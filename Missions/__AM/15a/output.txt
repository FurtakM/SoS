// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 69 0 0
// InitMacro ;
  15: CALL 20507 0 0
// InitNature ;
  19: CALL 17133 0 0
// InitArtifact ;
  23: CALL 17746 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// PrepareAmerican ;
  40: CALL 4579 0 0
// PrepareAlliance ;
  44: CALL 1375 0 0
// PrepareArabian ;
  48: CALL 6347 0 0
// PrepareRussian ;
  52: CALL 8332 0 0
// PrepareLegion ;
  56: CALL 6775 0 0
// Action ;
  60: CALL 10885 0 0
// MC_Start ( ) ;
  64: CALL 22619 0 0
// end ;
  68: END
// export debug ; export russianDestroyed , legionDestroyed , americanDestroyed , arabianDestroyed ; export americanCapitulated , russianCapitulated , legionCapitulated ; export artifactArCaptured , alienSpotted , spawnOmar ; export artifactIResearched , artifactIIResearched , artifactIIIResearched ; export vehicleLostCounter , artifactDestroyCounter ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// debug := false ;
  72: LD_ADDR_EXP 1
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// artifactArCaptured := LoadVariable ( 11_artifact_captured , 0 ) ;
  80: LD_ADDR_EXP 9
  84: PUSH
  85: LD_STRING 11_artifact_captured
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianDestroyed := false ;
  96: LD_ADDR_EXP 2
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// legionDestroyed := false ;
 104: LD_ADDR_EXP 3
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// americanDestroyed := false ;
 112: LD_ADDR_EXP 4
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// arabianDestroyed := false ;
 120: LD_ADDR_EXP 5
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// americanCapitulated := false ;
 128: LD_ADDR_EXP 6
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// russianCapitulated := false ;
 136: LD_ADDR_EXP 7
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// legionCapitulated := false ;
 144: LD_ADDR_EXP 8
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifactIResearched := false ;
 152: LD_ADDR_EXP 12
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifactIIResearched := false ;
 160: LD_ADDR_EXP 13
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// artifactIIIResearched := false ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// alienSpotted := false ;
 176: LD_ADDR_EXP 10
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// spawnOmar := false ;
 184: LD_ADDR_EXP 11
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// vehicleLostCounter := 0 ;
 192: LD_ADDR_EXP 15
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// artifactDestroyCounter := 0 ;
 200: LD_ADDR_EXP 16
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// end ;
 208: LD_VAR 0 1
 212: RET
// export function CustomInitMacro ( ) ; begin
 213: LD_INT 0
 215: PPUSH
// mc_parking := [ arabianParkingArea , russianParkingArea , legionParkingArea , powellParking ] ;
 216: LD_ADDR_EXP 103
 220: PUSH
 221: LD_INT 26
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 4
 229: PUSH
 230: LD_INT 8
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: ST_TO_ADDR
// mc_scan_area := [ arabianBaseArea , russianBaseArea , legionBaseArea , powellBase ] ;
 239: LD_ADDR_EXP 104
 243: PUSH
 244: LD_INT 27
 246: PUSH
 247: LD_INT 2
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 7
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 7 , 9 ] [ Difficulty ] , arabianMinefield ) ;
 262: LD_INT 1
 264: PPUSH
 265: LD_INT 6
 267: PUSH
 268: LD_INT 7
 270: PUSH
 271: LD_INT 9
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: PPUSH
 285: LD_INT 28
 287: PPUSH
 288: CALL 43836 0 3
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 292: LD_INT 1
 294: PPUSH
 295: LD_INT 10
 297: PUSH
 298: LD_INT 11
 300: PUSH
 301: LD_INT 13
 303: PUSH
 304: LD_INT 15
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: LIST
 311: LIST
 312: PPUSH
 313: CALL 44896 0 2
// MC_SetCratesArea ( 1 , [ arabianCratesArea ] ) ;
 317: LD_INT 1
 319: PPUSH
 320: LD_INT 29
 322: PUSH
 323: EMPTY
 324: LIST
 325: PPUSH
 326: CALL 44989 0 2
// mc_ape := Replace ( mc_ape , 1 , FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 330: LD_ADDR_EXP 108
 334: PUSH
 335: LD_EXP 108
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 22
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: LD_INT 25
 355: PUSH
 356: LD_INT 15
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PPUSH
 367: CALL_OW 69
 371: PPUSH
 372: CALL_OW 1
 376: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] ] ) ;
 377: LD_INT 1
 379: PPUSH
 380: LD_INT 13
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: LD_INT 31
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 13
 400: PUSH
 401: LD_INT 2
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: LD_INT 31
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 13
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 1
 424: PUSH
 425: LD_INT 28
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 13
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: LD_INT 1
 442: PUSH
 443: LD_INT 28
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_INT 13
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 28
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 13
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: LD_INT 1
 478: PUSH
 479: LD_INT 28
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: PPUSH
 496: CALL 44154 0 2
// MC_SetDefenderLimit ( 1 , 4 ) ;
 500: LD_INT 1
 502: PPUSH
 503: LD_INT 4
 505: PPUSH
 506: CALL 44339 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_spacetime ] ) ;
 510: LD_INT 2
 512: PPUSH
 513: LD_INT 10
 515: PUSH
 516: LD_INT 11
 518: PUSH
 519: LD_INT 12
 521: PUSH
 522: LD_INT 14
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL 44896 0 2
// MC_SetCratesArea ( 2 , [ russianCratesArea ] ) ;
 535: LD_INT 2
 537: PPUSH
 538: LD_INT 14
 540: PUSH
 541: EMPTY
 542: LIST
 543: PPUSH
 544: CALL 44989 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
 548: LD_INT 2
 550: PPUSH
 551: LD_INT 21
 553: PUSH
 554: LD_INT 3
 556: PUSH
 557: LD_INT 3
 559: PUSH
 560: LD_INT 51
 562: PUSH
 563: EMPTY
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 22
 571: PUSH
 572: LD_INT 3
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: LD_INT 52
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 22
 589: PUSH
 590: LD_INT 3
 592: PUSH
 593: LD_INT 3
 595: PUSH
 596: LD_INT 52
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_INT 24
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 3
 613: PUSH
 614: LD_INT 47
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: PUSH
 623: LD_INT 24
 625: PUSH
 626: LD_INT 3
 628: PUSH
 629: LD_INT 3
 631: PUSH
 632: LD_INT 47
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 24
 643: PUSH
 644: LD_INT 3
 646: PUSH
 647: LD_INT 3
 649: PUSH
 650: LD_INT 47
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 24
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 3
 667: PUSH
 668: LD_INT 47
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 24
 679: PUSH
 680: LD_INT 3
 682: PUSH
 683: LD_INT 3
 685: PUSH
 686: LD_INT 47
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: PPUSH
 705: CALL 44154 0 2
// MC_SetDefenderLimit ( 2 , 5 ) ;
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 5
 714: PPUSH
 715: CALL 44339 0 2
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
 719: LD_INT 2
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL 44769 0 2
// MC_SetMinesField ( 3 , [ 10 , 12 , 15 ] [ Difficulty ] , legionMinefield ) ;
 729: LD_INT 3
 731: PPUSH
 732: LD_INT 10
 734: PUSH
 735: LD_INT 12
 737: PUSH
 738: LD_INT 15
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: LD_OWVAR 67
 750: ARRAY
 751: PPUSH
 752: LD_INT 24
 754: PPUSH
 755: CALL 43836 0 3
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 759: LD_INT 3
 761: PPUSH
 762: LD_INT 10
 764: PUSH
 765: LD_INT 11
 767: PUSH
 768: LD_INT 13
 770: PUSH
 771: LD_INT 15
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: PPUSH
 780: CALL 44896 0 2
// MC_SetCratesArea ( 3 , [ legionCratesArea ] ) ;
 784: LD_INT 3
 786: PPUSH
 787: LD_INT 13
 789: PUSH
 790: EMPTY
 791: LIST
 792: PPUSH
 793: CALL 44989 0 2
// mc_ape := Replace ( mc_ape , 3 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 797: LD_ADDR_EXP 108
 801: PUSH
 802: LD_EXP 108
 806: PPUSH
 807: LD_INT 3
 809: PPUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 8
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 25
 822: PUSH
 823: LD_INT 15
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: PPUSH
 839: CALL_OW 1
 843: ST_TO_ADDR
// MC_SetProduceList ( 3 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_siberite , control_remote , ar_cargo_bay ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] ] ) ;
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 13
 849: PUSH
 850: LD_INT 2
 852: PUSH
 853: LD_INT 1
 855: PUSH
 856: LD_INT 31
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 13
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 31
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 13
 885: PUSH
 886: LD_INT 3
 888: PUSH
 889: LD_INT 2
 891: PUSH
 892: LD_INT 32
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 1
 909: PUSH
 910: LD_INT 28
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 14
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: LD_INT 1
 927: PUSH
 928: LD_INT 28
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_INT 14
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: LD_INT 1
 945: PUSH
 946: LD_INT 28
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: LD_INT 14
 957: PUSH
 958: LD_INT 1
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: LD_INT 28
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: PPUSH
 982: CALL 44154 0 2
// MC_SetDefenderLimit ( 3 , 4 ) ;
 986: LD_INT 3
 988: PPUSH
 989: LD_INT 4
 991: PPUSH
 992: CALL 44339 0 2
// MC_SetLabKind ( 4 , [ b_lab_weapon , b_lab_computer , b_lab_siberium , b_lab_opto ] ) ;
 996: LD_INT 4
 998: PPUSH
 999: LD_INT 10
1001: PUSH
1002: LD_INT 12
1004: PUSH
1005: LD_INT 11
1007: PUSH
1008: LD_INT 15
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL 44896 0 2
// MC_SetCratesArea ( 4 , [ americanCratesArea ] ) ;
1021: LD_INT 4
1023: PPUSH
1024: LD_INT 33
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL 44989 0 2
// MC_SetAllowedTurretWeapons ( 4 , [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1034: LD_INT 4
1036: PPUSH
1037: LD_INT 5
1039: PUSH
1040: LD_INT 6
1042: PUSH
1043: LD_INT 7
1045: PUSH
1046: LD_INT 9
1048: PUSH
1049: LD_INT 10
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PPUSH
1059: CALL 45307 0 2
// MC_SetFactoryExtension ( 4 , 54 , 85 , 2 , [ b_ext_laser , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
1063: LD_INT 4
1065: PPUSH
1066: LD_INT 54
1068: PPUSH
1069: LD_INT 85
1071: PPUSH
1072: LD_INT 2
1074: PPUSH
1075: LD_INT 25
1077: PUSH
1078: LD_INT 16
1080: PUSH
1081: LD_INT 17
1083: PUSH
1084: LD_INT 18
1086: PUSH
1087: LD_INT 22
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: PPUSH
1097: CALL 45101 0 5
// MC_SetProduceList ( 4 , [ [ us_morphling , engine_combustion , control_manual , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_manual , us_heavy_gun ] , [ us_morphling , engine_combustion , control_manual , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_manual , us_heavy_gun ] , [ us_morphling , engine_combustion , control_computer , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_computer , us_crane ] ] ) ;
1101: LD_INT 4
1103: PPUSH
1104: LD_INT 5
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: LD_INT 7
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 5
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 6
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 5
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 7
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 5
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 6
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 5
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 3
1184: PUSH
1185: LD_INT 12
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 3
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 3
1202: PUSH
1203: LD_INT 13
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL 44154 0 2
// MC_SetDefenderLimit ( 4 , 4 ) ;
1224: LD_INT 4
1226: PPUSH
1227: LD_INT 4
1229: PPUSH
1230: CALL 44339 0 2
// MC_SetTame ( 4 , powellApe ) ;
1234: LD_INT 4
1236: PPUSH
1237: LD_INT 11
1239: PPUSH
1240: CALL 44720 0 2
// end ;
1244: LD_VAR 0 1
1248: RET
// every 0 0$1 trigger debug do var i ;
1249: LD_EXP 1
1253: IFFALSE 1351
1255: GO 1257
1257: DISABLE
1258: LD_INT 0
1260: PPUSH
// begin enable ;
1261: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
1262: LD_ADDR_VAR 0 1
1266: PUSH
1267: LD_INT 22
1269: PUSH
1270: LD_INT 7
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 2
1279: PUSH
1280: LD_INT 21
1282: PUSH
1283: LD_INT 1
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 21
1292: PUSH
1293: LD_INT 2
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 3
1307: PUSH
1308: LD_INT 24
1310: PUSH
1311: LD_INT 1000
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 69
1331: PUSH
1332: FOR_IN
1333: IFFALSE 1349
// SetLives ( i , 1000 ) ;
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 1000
1342: PPUSH
1343: CALL_OW 234
1347: GO 1332
1349: POP
1350: POP
// end ;
1351: PPOPN 1
1353: END
// every 0 0$1 trigger artifactDestroyCounter >= 5 do
1354: LD_EXP 16
1358: PUSH
1359: LD_INT 5
1361: GREATEREQUAL
1362: IFFALSE 1374
1364: GO 1366
1366: DISABLE
// SetAchievement ( ACH_ARTIFACT ) ; end_of_file
1367: LD_STRING ACH_ARTIFACT
1369: PPUSH
1370: CALL_OW 543
1374: END
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Connie ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export function PrepareAlliance ; var i , veh , selected , tmp ; begin
1375: LD_INT 0
1377: PPUSH
1378: PPUSH
1379: PPUSH
1380: PPUSH
1381: PPUSH
// uc_side := 7 ;
1382: LD_ADDR_OWVAR 20
1386: PUSH
1387: LD_INT 7
1389: ST_TO_ADDR
// tmp := [ ] ;
1390: LD_ADDR_VAR 0 5
1394: PUSH
1395: EMPTY
1396: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
1397: LD_ADDR_EXP 17
1401: PUSH
1402: LD_STRING JMM
1404: PPUSH
1405: LD_EXP 1
1409: NOT
1410: PPUSH
1411: LD_STRING 14a_
1413: PPUSH
1414: CALL 50546 0 3
1418: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
1419: LD_ADDR_EXP 49
1423: PUSH
1424: LD_STRING Burlak
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 14a_
1435: PPUSH
1436: CALL 50546 0 3
1440: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1441: LD_ADDR_EXP 32
1445: PUSH
1446: LD_STRING Joan
1448: PPUSH
1449: LD_EXP 1
1453: NOT
1454: PPUSH
1455: LD_STRING 13a_
1457: PPUSH
1458: CALL 50546 0 3
1462: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1463: LD_ADDR_EXP 18
1467: PUSH
1468: LD_STRING Roth
1470: PPUSH
1471: LD_EXP 1
1475: NOT
1476: PPUSH
1477: LD_STRING 13a_
1479: PPUSH
1480: CALL 50546 0 3
1484: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1485: LD_ADDR_EXP 35
1489: PUSH
1490: LD_STRING Gossudarov
1492: PPUSH
1493: LD_EXP 1
1497: NOT
1498: PPUSH
1499: LD_STRING 13a_
1501: PPUSH
1502: CALL 50546 0 3
1506: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1507: LD_ADDR_EXP 23
1511: PUSH
1512: LD_STRING Denis
1514: PPUSH
1515: LD_EXP 1
1519: NOT
1520: PPUSH
1521: LD_STRING 13a_
1523: PPUSH
1524: CALL 50546 0 3
1528: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1529: LD_ADDR_EXP 33
1533: PUSH
1534: LD_STRING DeltaDoctor
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_STRING 13a_
1545: PPUSH
1546: CALL 50546 0 3
1550: ST_TO_ADDR
// if DeltaDoctor then
1551: LD_EXP 33
1555: IFFALSE 1573
// tmp := tmp ^ DeltaDoctor ;
1557: LD_ADDR_VAR 0 5
1561: PUSH
1562: LD_VAR 0 5
1566: PUSH
1567: LD_EXP 33
1571: ADD
1572: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1573: LD_ADDR_EXP 31
1577: PUSH
1578: LD_STRING Simms
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_STRING 13a_
1589: PPUSH
1590: CALL 50546 0 3
1594: ST_TO_ADDR
// if Simms then
1595: LD_EXP 31
1599: IFFALSE 1617
// tmp := tmp ^ Simms ;
1601: LD_ADDR_VAR 0 5
1605: PUSH
1606: LD_VAR 0 5
1610: PUSH
1611: LD_EXP 31
1615: ADD
1616: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
1617: LD_ADDR_EXP 29
1621: PUSH
1622: LD_STRING Frank
1624: PPUSH
1625: LD_EXP 1
1629: NOT
1630: PPUSH
1631: LD_STRING 13a_
1633: PPUSH
1634: CALL 50546 0 3
1638: ST_TO_ADDR
// if Frank then
1639: LD_EXP 29
1643: IFFALSE 1661
// tmp := tmp ^ Frank ;
1645: LD_ADDR_VAR 0 5
1649: PUSH
1650: LD_VAR 0 5
1654: PUSH
1655: LD_EXP 29
1659: ADD
1660: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
1661: LD_ADDR_EXP 36
1665: PUSH
1666: LD_STRING Kirilenkova
1668: PPUSH
1669: LD_EXP 1
1673: NOT
1674: PPUSH
1675: LD_STRING 13a_
1677: PPUSH
1678: CALL 50546 0 3
1682: ST_TO_ADDR
// if Kirilenkova then
1683: LD_EXP 36
1687: IFFALSE 1705
// tmp := tmp ^ Kirilenkova ;
1689: LD_ADDR_VAR 0 5
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_EXP 36
1703: ADD
1704: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
1705: LD_ADDR_EXP 37
1709: PUSH
1710: LD_STRING Titov
1712: PPUSH
1713: LD_EXP 1
1717: NOT
1718: PPUSH
1719: LD_STRING 13a_
1721: PPUSH
1722: CALL 50546 0 3
1726: ST_TO_ADDR
// if Titov then
1727: LD_EXP 37
1731: IFFALSE 1749
// tmp := tmp ^ Titov ;
1733: LD_ADDR_VAR 0 5
1737: PUSH
1738: LD_VAR 0 5
1742: PUSH
1743: LD_EXP 37
1747: ADD
1748: ST_TO_ADDR
// Fadeev := PrepareUnit ( Fadeev , ( not debug ) , 13a_ ) ;
1749: LD_ADDR_EXP 38
1753: PUSH
1754: LD_STRING Fadeev
1756: PPUSH
1757: LD_EXP 1
1761: NOT
1762: PPUSH
1763: LD_STRING 13a_
1765: PPUSH
1766: CALL 50546 0 3
1770: ST_TO_ADDR
// if Fadeev then
1771: LD_EXP 38
1775: IFFALSE 1793
// tmp := tmp ^ Fadeev ;
1777: LD_ADDR_VAR 0 5
1781: PUSH
1782: LD_VAR 0 5
1786: PUSH
1787: LD_EXP 38
1791: ADD
1792: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
1793: LD_ADDR_EXP 39
1797: PUSH
1798: LD_STRING Dolgov
1800: PPUSH
1801: LD_EXP 1
1805: NOT
1806: PPUSH
1807: LD_STRING 13a_
1809: PPUSH
1810: CALL 50546 0 3
1814: ST_TO_ADDR
// if Dolgov then
1815: LD_EXP 39
1819: IFFALSE 1837
// tmp := tmp ^ Dolgov ;
1821: LD_ADDR_VAR 0 5
1825: PUSH
1826: LD_VAR 0 5
1830: PUSH
1831: LD_EXP 39
1835: ADD
1836: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
1837: LD_ADDR_EXP 40
1841: PUSH
1842: LD_STRING Petrosyan
1844: PPUSH
1845: LD_EXP 1
1849: NOT
1850: PPUSH
1851: LD_STRING 13a_
1853: PPUSH
1854: CALL 50546 0 3
1858: ST_TO_ADDR
// if Petrosyan then
1859: LD_EXP 40
1863: IFFALSE 1881
// tmp := tmp ^ Petrosyan ;
1865: LD_ADDR_VAR 0 5
1869: PUSH
1870: LD_VAR 0 5
1874: PUSH
1875: LD_EXP 40
1879: ADD
1880: ST_TO_ADDR
// Scholtze := PrepareUnit ( Scholtze , ( not debug ) , 13a_ ) ;
1881: LD_ADDR_EXP 41
1885: PUSH
1886: LD_STRING Scholtze
1888: PPUSH
1889: LD_EXP 1
1893: NOT
1894: PPUSH
1895: LD_STRING 13a_
1897: PPUSH
1898: CALL 50546 0 3
1902: ST_TO_ADDR
// if Scholtze then
1903: LD_EXP 41
1907: IFFALSE 1925
// tmp := tmp ^ Scholtze ;
1909: LD_ADDR_VAR 0 5
1913: PUSH
1914: LD_VAR 0 5
1918: PUSH
1919: LD_EXP 41
1923: ADD
1924: ST_TO_ADDR
// Oblukov := PrepareUnit ( Oblukov , ( not debug ) , 13a_ ) ;
1925: LD_ADDR_EXP 42
1929: PUSH
1930: LD_STRING Oblukov
1932: PPUSH
1933: LD_EXP 1
1937: NOT
1938: PPUSH
1939: LD_STRING 13a_
1941: PPUSH
1942: CALL 50546 0 3
1946: ST_TO_ADDR
// if Oblukov then
1947: LD_EXP 42
1951: IFFALSE 1969
// tmp := tmp ^ Oblukov ;
1953: LD_ADDR_VAR 0 5
1957: PUSH
1958: LD_VAR 0 5
1962: PUSH
1963: LD_EXP 42
1967: ADD
1968: ST_TO_ADDR
// Kapitsova := PrepareUnit ( Kapitsova , ( not debug ) , 13a_ ) ;
1969: LD_ADDR_EXP 43
1973: PUSH
1974: LD_STRING Kapitsova
1976: PPUSH
1977: LD_EXP 1
1981: NOT
1982: PPUSH
1983: LD_STRING 13a_
1985: PPUSH
1986: CALL 50546 0 3
1990: ST_TO_ADDR
// if Kapitsova then
1991: LD_EXP 43
1995: IFFALSE 2013
// tmp := tmp ^ Kapitsova ;
1997: LD_ADDR_VAR 0 5
2001: PUSH
2002: LD_VAR 0 5
2006: PUSH
2007: LD_EXP 43
2011: ADD
2012: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , ( not debug ) , 13a_ ) ;
2013: LD_ADDR_EXP 44
2017: PUSH
2018: LD_STRING Lipshchin
2020: PPUSH
2021: LD_EXP 1
2025: NOT
2026: PPUSH
2027: LD_STRING 13a_
2029: PPUSH
2030: CALL 50546 0 3
2034: ST_TO_ADDR
// if Lipshchin then
2035: LD_EXP 44
2039: IFFALSE 2057
// tmp := tmp ^ Lipshchin ;
2041: LD_ADDR_VAR 0 5
2045: PUSH
2046: LD_VAR 0 5
2050: PUSH
2051: LD_EXP 44
2055: ADD
2056: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrovova , ( not debug ) , 13a_ ) ;
2057: LD_ADDR_EXP 45
2061: PUSH
2062: LD_STRING Petrovova
2064: PPUSH
2065: LD_EXP 1
2069: NOT
2070: PPUSH
2071: LD_STRING 13a_
2073: PPUSH
2074: CALL 50546 0 3
2078: ST_TO_ADDR
// if Petrovova then
2079: LD_EXP 45
2083: IFFALSE 2101
// tmp := tmp ^ Petrovova ;
2085: LD_ADDR_VAR 0 5
2089: PUSH
2090: LD_VAR 0 5
2094: PUSH
2095: LD_EXP 45
2099: ADD
2100: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , 13a_ ) ;
2101: LD_ADDR_EXP 46
2105: PUSH
2106: LD_STRING Kovalyuk
2108: PPUSH
2109: LD_EXP 1
2113: NOT
2114: PPUSH
2115: LD_STRING 13a_
2117: PPUSH
2118: CALL 50546 0 3
2122: ST_TO_ADDR
// if Kovalyuk then
2123: LD_EXP 46
2127: IFFALSE 2145
// tmp := tmp ^ Kovalyuk ;
2129: LD_ADDR_VAR 0 5
2133: PUSH
2134: LD_VAR 0 5
2138: PUSH
2139: LD_EXP 46
2143: ADD
2144: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , ( not debug ) , 13a_ ) ;
2145: LD_ADDR_EXP 47
2149: PUSH
2150: LD_STRING Kuzmov
2152: PPUSH
2153: LD_EXP 1
2157: NOT
2158: PPUSH
2159: LD_STRING 13a_
2161: PPUSH
2162: CALL 50546 0 3
2166: ST_TO_ADDR
// if Kuzmov then
2167: LD_EXP 47
2171: IFFALSE 2189
// tmp := tmp ^ Kuzmov ;
2173: LD_ADDR_VAR 0 5
2177: PUSH
2178: LD_VAR 0 5
2182: PUSH
2183: LD_EXP 47
2187: ADD
2188: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2189: LD_ADDR_EXP 48
2193: PUSH
2194: LD_STRING Karamazov
2196: PPUSH
2197: LD_EXP 1
2201: NOT
2202: PPUSH
2203: LD_STRING 13a_
2205: PPUSH
2206: CALL 50546 0 3
2210: ST_TO_ADDR
// if Karamazov then
2211: LD_EXP 48
2215: IFFALSE 2233
// tmp := tmp ^ Karamazov ;
2217: LD_ADDR_VAR 0 5
2221: PUSH
2222: LD_VAR 0 5
2226: PUSH
2227: LD_EXP 48
2231: ADD
2232: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 50
2237: PUSH
2238: LD_STRING Belkov
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 50546 0 3
2254: ST_TO_ADDR
// if Belkov then
2255: LD_EXP 50
2259: IFFALSE 2277
// tmp := tmp ^ Belkov ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_VAR 0 5
2270: PUSH
2271: LD_EXP 50
2275: ADD
2276: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 51
2281: PUSH
2282: LD_STRING Gnyevko
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 50546 0 3
2298: ST_TO_ADDR
// if Gnyevko then
2299: LD_EXP 51
2303: IFFALSE 2321
// tmp := tmp ^ Gnyevko ;
2305: LD_ADDR_VAR 0 5
2309: PUSH
2310: LD_VAR 0 5
2314: PUSH
2315: LD_EXP 51
2319: ADD
2320: ST_TO_ADDR
// Connie = NewCharacter ( Coonie ) ;
2321: LD_ADDR_EXP 34
2325: PUSH
2326: LD_STRING Coonie
2328: PPUSH
2329: CALL_OW 25
2333: ST_TO_ADDR
// if not Lisa then
2334: LD_EXP 19
2338: NOT
2339: IFFALSE 2385
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , 13a_ ) ;
2341: LD_ADDR_EXP 19
2345: PUSH
2346: LD_STRING Lisa
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 13a_
2357: PPUSH
2358: CALL 50546 0 3
2362: ST_TO_ADDR
// if Lisa then
2363: LD_EXP 19
2367: IFFALSE 2385
// tmp := tmp ^ Lisa ;
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: LD_VAR 0 5
2378: PUSH
2379: LD_EXP 19
2383: ADD
2384: ST_TO_ADDR
// end ; if not Donaldson then
2385: LD_EXP 20
2389: NOT
2390: IFFALSE 2436
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2392: LD_ADDR_EXP 20
2396: PUSH
2397: LD_STRING Donaldson
2399: PPUSH
2400: LD_EXP 1
2404: NOT
2405: PPUSH
2406: LD_STRING 13a_
2408: PPUSH
2409: CALL 50546 0 3
2413: ST_TO_ADDR
// if Donaldson then
2414: LD_EXP 20
2418: IFFALSE 2436
// tmp := tmp ^ Donaldson ;
2420: LD_ADDR_VAR 0 5
2424: PUSH
2425: LD_VAR 0 5
2429: PUSH
2430: LD_EXP 20
2434: ADD
2435: ST_TO_ADDR
// end ; if not Bobby then
2436: LD_EXP 21
2440: NOT
2441: IFFALSE 2487
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 13a_ ) ;
2443: LD_ADDR_EXP 21
2447: PUSH
2448: LD_STRING Bobby
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 13a_
2459: PPUSH
2460: CALL 50546 0 3
2464: ST_TO_ADDR
// if Bobby then
2465: LD_EXP 21
2469: IFFALSE 2487
// tmp := tmp ^ Bobby ;
2471: LD_ADDR_VAR 0 5
2475: PUSH
2476: LD_VAR 0 5
2480: PUSH
2481: LD_EXP 21
2485: ADD
2486: ST_TO_ADDR
// end ; if not Cyrus then
2487: LD_EXP 22
2491: NOT
2492: IFFALSE 2538
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13a_ ) ;
2494: LD_ADDR_EXP 22
2498: PUSH
2499: LD_STRING Cyrus
2501: PPUSH
2502: LD_EXP 1
2506: NOT
2507: PPUSH
2508: LD_STRING 13a_
2510: PPUSH
2511: CALL 50546 0 3
2515: ST_TO_ADDR
// if Cyrus then
2516: LD_EXP 22
2520: IFFALSE 2538
// tmp := tmp ^ Cyrus ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_VAR 0 5
2531: PUSH
2532: LD_EXP 22
2536: ADD
2537: ST_TO_ADDR
// end ; if not Brown then
2538: LD_EXP 24
2542: NOT
2543: IFFALSE 2589
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 13a_ ) ;
2545: LD_ADDR_EXP 24
2549: PUSH
2550: LD_STRING Brown
2552: PPUSH
2553: LD_EXP 1
2557: NOT
2558: PPUSH
2559: LD_STRING 13a_
2561: PPUSH
2562: CALL 50546 0 3
2566: ST_TO_ADDR
// if Brown then
2567: LD_EXP 24
2571: IFFALSE 2589
// tmp := tmp ^ Brown ;
2573: LD_ADDR_VAR 0 5
2577: PUSH
2578: LD_VAR 0 5
2582: PUSH
2583: LD_EXP 24
2587: ADD
2588: ST_TO_ADDR
// end ; if not Gladstone then
2589: LD_EXP 25
2593: NOT
2594: IFFALSE 2640
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13a_ ) ;
2596: LD_ADDR_EXP 25
2600: PUSH
2601: LD_STRING Gladstone
2603: PPUSH
2604: LD_EXP 1
2608: NOT
2609: PPUSH
2610: LD_STRING 13a_
2612: PPUSH
2613: CALL 50546 0 3
2617: ST_TO_ADDR
// if Gladstone then
2618: LD_EXP 25
2622: IFFALSE 2640
// tmp := tmp ^ Gladstone ;
2624: LD_ADDR_VAR 0 5
2628: PUSH
2629: LD_VAR 0 5
2633: PUSH
2634: LD_EXP 25
2638: ADD
2639: ST_TO_ADDR
// end ; if not Cornel then
2640: LD_EXP 27
2644: NOT
2645: IFFALSE 2691
// begin Cornel := PrepareUnit ( Cornel , ( not debug ) , 13a_ ) ;
2647: LD_ADDR_EXP 27
2651: PUSH
2652: LD_STRING Cornel
2654: PPUSH
2655: LD_EXP 1
2659: NOT
2660: PPUSH
2661: LD_STRING 13a_
2663: PPUSH
2664: CALL 50546 0 3
2668: ST_TO_ADDR
// if Cornel then
2669: LD_EXP 27
2673: IFFALSE 2691
// tmp := tmp ^ Cornel ;
2675: LD_ADDR_VAR 0 5
2679: PUSH
2680: LD_VAR 0 5
2684: PUSH
2685: LD_EXP 27
2689: ADD
2690: ST_TO_ADDR
// end ; if not Houten then
2691: LD_EXP 26
2695: NOT
2696: IFFALSE 2742
// begin Houten := PrepareUnit ( Houten , ( not debug ) , 13a_ ) ;
2698: LD_ADDR_EXP 26
2702: PUSH
2703: LD_STRING Houten
2705: PPUSH
2706: LD_EXP 1
2710: NOT
2711: PPUSH
2712: LD_STRING 13a_
2714: PPUSH
2715: CALL 50546 0 3
2719: ST_TO_ADDR
// if Houten then
2720: LD_EXP 26
2724: IFFALSE 2742
// tmp := tmp ^ Houten ;
2726: LD_ADDR_VAR 0 5
2730: PUSH
2731: LD_VAR 0 5
2735: PUSH
2736: LD_EXP 26
2740: ADD
2741: ST_TO_ADDR
// end ; if not Gary then
2742: LD_EXP 28
2746: NOT
2747: IFFALSE 2793
// begin Gary := PrepareUnit ( Gary , ( not debug ) , 13a_ ) ;
2749: LD_ADDR_EXP 28
2753: PUSH
2754: LD_STRING Gary
2756: PPUSH
2757: LD_EXP 1
2761: NOT
2762: PPUSH
2763: LD_STRING 13a_
2765: PPUSH
2766: CALL 50546 0 3
2770: ST_TO_ADDR
// if Gary then
2771: LD_EXP 28
2775: IFFALSE 2793
// tmp := tmp ^ Gary ;
2777: LD_ADDR_VAR 0 5
2781: PUSH
2782: LD_VAR 0 5
2786: PUSH
2787: LD_EXP 28
2791: ADD
2792: ST_TO_ADDR
// end ; if not Kikuchi then
2793: LD_EXP 30
2797: NOT
2798: IFFALSE 2844
// begin Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13a_ ) ;
2800: LD_ADDR_EXP 30
2804: PUSH
2805: LD_STRING Kikuchi
2807: PPUSH
2808: LD_EXP 1
2812: NOT
2813: PPUSH
2814: LD_STRING 13a_
2816: PPUSH
2817: CALL 50546 0 3
2821: ST_TO_ADDR
// if Kikuchi then
2822: LD_EXP 30
2826: IFFALSE 2844
// tmp := tmp ^ Kikuchi ;
2828: LD_ADDR_VAR 0 5
2832: PUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_EXP 30
2842: ADD
2843: ST_TO_ADDR
// end ; tmp := tmp union CreateCharacterSet ( 13a_others ) ;
2844: LD_ADDR_VAR 0 5
2848: PUSH
2849: LD_VAR 0 5
2853: PUSH
2854: LD_STRING 13a_others
2856: PPUSH
2857: CALL_OW 31
2861: UNION
2862: ST_TO_ADDR
// tmp := tmp diff 0 ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_VAR 0 5
2872: PUSH
2873: LD_INT 0
2875: DIFF
2876: ST_TO_ADDR
// if tmp < 15 then
2877: LD_VAR 0 5
2881: PUSH
2882: LD_INT 15
2884: LESS
2885: IFFALSE 2973
// for i = 15 downto tmp do
2887: LD_ADDR_VAR 0 2
2891: PUSH
2892: DOUBLE
2893: LD_INT 15
2895: INC
2896: ST_TO_ADDR
2897: LD_VAR 0 5
2901: PUSH
2902: FOR_DOWNTO
2903: IFFALSE 2971
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
2905: LD_ADDR_OWVAR 21
2909: PUSH
2910: LD_INT 1
2912: PUSH
2913: LD_INT 3
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 1
2922: PPUSH
2923: LD_INT 2
2925: PPUSH
2926: CALL_OW 12
2930: ARRAY
2931: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
2932: LD_INT 0
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 4
2940: PPUSH
2941: CALL_OW 12
2945: PPUSH
2946: LD_INT 8
2948: PPUSH
2949: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
2953: LD_ADDR_VAR 0 5
2957: PUSH
2958: LD_VAR 0 5
2962: PUSH
2963: CALL_OW 44
2967: ADD
2968: ST_TO_ADDR
// end ;
2969: GO 2902
2971: POP
2972: POP
// if not debug then
2973: LD_EXP 1
2977: NOT
2978: IFFALSE 3150
// selected = CharacterSelection (  , [ 15 , 14 , 13 ] [ Difficulty ] , [ 15 , 14 , 13 ] [ Difficulty ] , [ sel_dont_change_class , JMM , Burlak , Roth , Joan , Denis , Gossudarov , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp , [ class_soldier , class_scientistic , [ class_engineer , 1 ] , class_mechanic , [ class_sniper , 0 , 3 ] , [ class_bazooker , 0 , 3 ] ] ) else
2980: LD_ADDR_VAR 0 4
2984: PUSH
2985: LD_STRING 
2987: PPUSH
2988: LD_INT 15
2990: PUSH
2991: LD_INT 14
2993: PUSH
2994: LD_INT 13
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: LIST
3001: PUSH
3002: LD_OWVAR 67
3006: ARRAY
3007: PPUSH
3008: LD_INT 15
3010: PUSH
3011: LD_INT 14
3013: PUSH
3014: LD_INT 13
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_OWVAR 67
3026: ARRAY
3027: PPUSH
3028: LD_INT -6
3030: PUSH
3031: LD_EXP 17
3035: PUSH
3036: LD_EXP 49
3040: PUSH
3041: LD_EXP 18
3045: PUSH
3046: LD_EXP 32
3050: PUSH
3051: LD_EXP 23
3055: PUSH
3056: LD_EXP 35
3060: PUSH
3061: LD_INT -2
3063: PUSH
3064: LD_INT -3
3066: PUSH
3067: LD_INT -5
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_VAR 0 5
3086: ADD
3087: PPUSH
3088: LD_INT 1
3090: PUSH
3091: LD_INT 4
3093: PUSH
3094: LD_INT 2
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 3
3106: PUSH
3107: LD_INT 5
3109: PUSH
3110: LD_INT 0
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 9
3123: PUSH
3124: LD_INT 0
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 42
3147: ST_TO_ADDR
3148: GO 3229
// selected := [ Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ] ;
3150: LD_ADDR_VAR 0 4
3154: PUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_EXP 38
3164: PUSH
3165: LD_EXP 39
3169: PUSH
3170: LD_EXP 40
3174: PUSH
3175: LD_EXP 41
3179: PUSH
3180: LD_EXP 42
3184: PUSH
3185: LD_EXP 43
3189: PUSH
3190: LD_EXP 44
3194: PUSH
3195: LD_EXP 45
3199: PUSH
3200: LD_EXP 46
3204: PUSH
3205: LD_EXP 47
3209: PUSH
3210: LD_EXP 48
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: ST_TO_ADDR
// uc_nation := 1 ;
3229: LD_ADDR_OWVAR 21
3233: PUSH
3234: LD_INT 1
3236: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) ;
3237: LD_INT 5
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: LD_INT 1
3245: PPUSH
3246: LD_INT 6
3248: PPUSH
3249: LD_INT 100
3251: PPUSH
3252: CALL 57721 0 5
// veh := CreateVehicle ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 45
3265: ST_TO_ADDR
// SetMark ( veh , - 7 ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 7
3273: NEG
3274: PPUSH
3275: CALL_OW 242
// SetDir ( veh , 3 ) ;
3279: LD_VAR 0 3
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: CALL_OW 233
// PlaceUnitArea ( veh , allianceJMMSpawnArea , false ) ;
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 31
3298: PPUSH
3299: LD_INT 0
3301: PPUSH
3302: CALL_OW 49
// PlaceHumanInUnit ( JMM , veh ) ;
3306: LD_EXP 17
3310: PPUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: CALL_OW 52
// if Joan then
3320: LD_EXP 32
3324: IFFALSE 3396
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_radar , 100 ) ;
3326: LD_INT 3
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: LD_INT 1
3334: PPUSH
3335: LD_INT 11
3337: PPUSH
3338: LD_INT 100
3340: PPUSH
3341: CALL 57721 0 5
// veh := CreateVehicle ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: CALL_OW 45
3354: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3355: LD_VAR 0 3
3359: PPUSH
3360: LD_INT 3
3362: PPUSH
3363: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3367: LD_VAR 0 3
3371: PPUSH
3372: LD_INT 30
3374: PPUSH
3375: LD_INT 0
3377: PPUSH
3378: CALL_OW 49
// PlaceHumanInUnit ( Joan , veh ) ;
3382: LD_EXP 32
3386: PPUSH
3387: LD_VAR 0 3
3391: PPUSH
3392: CALL_OW 52
// end ; if Roth then
3396: LD_EXP 18
3400: IFFALSE 3472
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_radar , 100 ) ;
3402: LD_INT 3
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 1
3410: PPUSH
3411: LD_INT 11
3413: PPUSH
3414: LD_INT 100
3416: PPUSH
3417: CALL 57721 0 5
// veh := CreateVehicle ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: CALL_OW 45
3430: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: LD_INT 3
3438: PPUSH
3439: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3443: LD_VAR 0 3
3447: PPUSH
3448: LD_INT 30
3450: PPUSH
3451: LD_INT 0
3453: PPUSH
3454: CALL_OW 49
// PlaceHumanInUnit ( Roth , veh ) ;
3458: LD_EXP 18
3462: PPUSH
3463: LD_VAR 0 3
3467: PPUSH
3468: CALL_OW 52
// end ; if Denis then
3472: LD_EXP 23
3476: IFFALSE 3548
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_laser , 100 ) ;
3478: LD_INT 5
3480: PPUSH
3481: LD_INT 3
3483: PPUSH
3484: LD_INT 1
3486: PPUSH
3487: LD_INT 9
3489: PPUSH
3490: LD_INT 100
3492: PPUSH
3493: CALL 57721 0 5
// veh := CreateVehicle ;
3497: LD_ADDR_VAR 0 3
3501: PUSH
3502: CALL_OW 45
3506: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3507: LD_VAR 0 3
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_INT 30
3526: PPUSH
3527: LD_INT 0
3529: PPUSH
3530: CALL_OW 49
// PlaceHumanInUnit ( Denis , veh ) ;
3534: LD_EXP 23
3538: PPUSH
3539: LD_VAR 0 3
3543: PPUSH
3544: CALL_OW 52
// end ; uc_nation := 3 ;
3548: LD_ADDR_OWVAR 21
3552: PUSH
3553: LD_INT 3
3555: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_rocket_launcher , 100 ) ;
3556: LD_INT 22
3558: PPUSH
3559: LD_INT 3
3561: PPUSH
3562: LD_INT 1
3564: PPUSH
3565: LD_INT 45
3567: PPUSH
3568: LD_INT 100
3570: PPUSH
3571: CALL 57721 0 5
// veh := CreateVehicle ;
3575: LD_ADDR_VAR 0 3
3579: PUSH
3580: CALL_OW 45
3584: ST_TO_ADDR
// SetMark ( veh , - 7 ) ;
3585: LD_VAR 0 3
3589: PPUSH
3590: LD_INT 7
3592: NEG
3593: PPUSH
3594: CALL_OW 242
// SetDir ( veh , 3 ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_INT 3
3605: PPUSH
3606: CALL_OW 233
// PlaceUnitArea ( veh , allianceJMMSpawnArea , false ) ;
3610: LD_VAR 0 3
3614: PPUSH
3615: LD_INT 31
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL_OW 49
// PlaceHumanInUnit ( Burlak , veh ) ;
3625: LD_EXP 49
3629: PPUSH
3630: LD_VAR 0 3
3634: PPUSH
3635: CALL_OW 52
// if Gossudarov then
3639: LD_EXP 35
3643: IFFALSE 3730
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
3645: LD_INT 22
3647: PPUSH
3648: LD_INT 3
3650: PPUSH
3651: LD_INT 1
3653: PPUSH
3654: LD_INT 51
3656: PPUSH
3657: LD_INT 100
3659: PPUSH
3660: CALL 57721 0 5
// veh := CreateVehicle ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 45
3673: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3686: LD_VAR 0 3
3690: PPUSH
3691: LD_INT 30
3693: PPUSH
3694: LD_INT 0
3696: PPUSH
3697: CALL_OW 49
// PlaceHumanInUnit ( Gossudarov , veh ) ;
3701: LD_EXP 35
3705: PPUSH
3706: LD_VAR 0 3
3710: PPUSH
3711: CALL_OW 52
// SetCargo ( veh , mat_cans , 100 ) ;
3715: LD_VAR 0 3
3719: PPUSH
3720: LD_INT 1
3722: PPUSH
3723: LD_INT 100
3725: PPUSH
3726: CALL_OW 290
// end ; for i in selected do
3730: LD_ADDR_VAR 0 2
3734: PUSH
3735: LD_VAR 0 4
3739: PUSH
3740: FOR_IN
3741: IFFALSE 4299
// begin uc_nation := GetNation ( i ) ;
3743: LD_ADDR_OWVAR 21
3747: PUSH
3748: LD_VAR 0 2
3752: PPUSH
3753: CALL_OW 248
3757: ST_TO_ADDR
// if i in [ Lisa , Donaldson , Cyrus , Bobby ] then
3758: LD_VAR 0 2
3762: PUSH
3763: LD_EXP 19
3767: PUSH
3768: LD_EXP 20
3772: PUSH
3773: LD_EXP 22
3777: PUSH
3778: LD_EXP 21
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: IN
3789: IFFALSE 3812
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) else
3791: LD_INT 5
3793: PPUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 1
3799: PPUSH
3800: LD_INT 6
3802: PPUSH
3803: LD_INT 100
3805: PPUSH
3806: CALL 57721 0 5
3810: GO 4246
// if i in [ Oblukov , Kuzmov , Petrovova , Titov ] then
3812: LD_VAR 0 2
3816: PUSH
3817: LD_EXP 42
3821: PUSH
3822: LD_EXP 47
3826: PUSH
3827: LD_EXP 45
3831: PUSH
3832: LD_EXP 37
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: IN
3843: IFFALSE 3874
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_heavy_gun , rand ( 65 , 75 ) ) else
3845: LD_INT 24
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 46
3856: PPUSH
3857: LD_INT 65
3859: PPUSH
3860: LD_INT 75
3862: PPUSH
3863: CALL_OW 12
3867: PPUSH
3868: CALL 57721 0 5
3872: GO 4246
// if i = Karamazov then
3874: LD_VAR 0 2
3878: PUSH
3879: LD_EXP 48
3883: EQUAL
3884: IFFALSE 3907
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_crane , 100 ) else
3886: LD_INT 22
3888: PPUSH
3889: LD_INT 3
3891: PPUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 52
3897: PPUSH
3898: LD_INT 100
3900: PPUSH
3901: CALL 57721 0 5
3905: GO 4246
// if i = Brown then
3907: LD_VAR 0 2
3911: PUSH
3912: LD_EXP 24
3916: EQUAL
3917: IFFALSE 3940
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_crane , 100 ) else
3919: LD_INT 3
3921: PPUSH
3922: LD_INT 3
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: LD_INT 13
3930: PPUSH
3931: LD_INT 100
3933: PPUSH
3934: CALL 57721 0 5
3938: GO 4246
// if uc_nation = nation_american then
3940: LD_OWVAR 21
3944: PUSH
3945: LD_INT 1
3947: EQUAL
3948: IFFALSE 4099
// begin PrepareVehicle ( [ us_medium_tracked , us_morphling , us_morphling ] [ uc_nation mod 3 + 1 ] , [ engine_combustion , engine_siberite , engine_combustion ] [ uc_nation mod 3 + 1 ] , control_manual , [ [ us_radar , us_gatling_gun , us_double_gun ] , [ us_heavy_gun , us_rocket_launcher , us_laser ] , [ us_heavy_gun , us_laser , us_cargo_bay ] ] [ uc_nation mod 3 + 1 ] [ rand ( 1 , 3 ) ] , rand ( 65 , 75 ) ) ;
3950: LD_INT 3
3952: PUSH
3953: LD_INT 5
3955: PUSH
3956: LD_INT 5
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: LIST
3963: PUSH
3964: LD_OWVAR 21
3968: PUSH
3969: LD_INT 3
3971: MOD
3972: PUSH
3973: LD_INT 1
3975: PLUS
3976: ARRAY
3977: PPUSH
3978: LD_INT 1
3980: PUSH
3981: LD_INT 3
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: PUSH
3992: LD_OWVAR 21
3996: PUSH
3997: LD_INT 3
3999: MOD
4000: PUSH
4001: LD_INT 1
4003: PLUS
4004: ARRAY
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: LD_INT 11
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 5
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 6
4025: PUSH
4026: LD_INT 7
4028: PUSH
4029: LD_INT 9
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: PUSH
4037: LD_INT 6
4039: PUSH
4040: LD_INT 9
4042: PUSH
4043: LD_INT 12
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_OWVAR 21
4060: PUSH
4061: LD_INT 3
4063: MOD
4064: PUSH
4065: LD_INT 1
4067: PLUS
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: PPUSH
4073: LD_INT 3
4075: PPUSH
4076: CALL_OW 12
4080: ARRAY
4081: PPUSH
4082: LD_INT 65
4084: PPUSH
4085: LD_INT 75
4087: PPUSH
4088: CALL_OW 12
4092: PPUSH
4093: CALL 57721 0 5
// end else
4097: GO 4246
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled ] [ uc_nation mod 3 + 1 ] , [ engine_combustion , engine_siberite , engine_combustion ] [ uc_nation mod 3 + 1 ] , control_manual , [ [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] , [ ru_heavy_gun , ru_rocket_launcher , ru_gun ] , [ ru_heavy_gun , ru_gatling_gun , ru_rocket_launcher ] ] [ uc_nation mod 3 + 1 ] [ rand ( 1 , 3 ) ] , rand ( 65 , 75 ) ) ;
4099: LD_INT 22
4101: PUSH
4102: LD_INT 23
4104: PUSH
4105: LD_INT 23
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: PUSH
4113: LD_OWVAR 21
4117: PUSH
4118: LD_INT 3
4120: MOD
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: ARRAY
4126: PPUSH
4127: LD_INT 1
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 1
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: PUSH
4141: LD_OWVAR 21
4145: PUSH
4146: LD_INT 3
4148: MOD
4149: PUSH
4150: LD_INT 1
4152: PLUS
4153: ARRAY
4154: PPUSH
4155: LD_INT 1
4157: PPUSH
4158: LD_INT 45
4160: PUSH
4161: LD_INT 43
4163: PUSH
4164: LD_INT 44
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 46
4174: PUSH
4175: LD_INT 45
4177: PUSH
4178: LD_INT 44
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 46
4188: PUSH
4189: LD_INT 43
4191: PUSH
4192: LD_INT 45
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: LIST
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: LD_OWVAR 21
4209: PUSH
4210: LD_INT 3
4212: MOD
4213: PUSH
4214: LD_INT 1
4216: PLUS
4217: ARRAY
4218: PUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 3
4224: PPUSH
4225: CALL_OW 12
4229: ARRAY
4230: PPUSH
4231: LD_INT 65
4233: PPUSH
4234: LD_INT 75
4236: PPUSH
4237: CALL_OW 12
4241: PPUSH
4242: CALL 57721 0 5
// end ; veh := CreateVehicle ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 45
4255: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4256: LD_VAR 0 3
4260: PPUSH
4261: LD_INT 3
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 30
4275: PPUSH
4276: LD_INT 0
4278: PPUSH
4279: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4283: LD_VAR 0 2
4287: PPUSH
4288: LD_VAR 0 3
4292: PPUSH
4293: CALL_OW 52
// end ;
4297: GO 3740
4299: POP
4300: POP
// if artifactArCaptured then
4301: LD_EXP 9
4305: IFFALSE 4391
// begin uc_nation := nation_american ;
4307: LD_ADDR_OWVAR 21
4311: PUSH
4312: LD_INT 1
4314: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
4315: LD_INT 3
4317: PPUSH
4318: LD_INT 3
4320: PPUSH
4321: LD_INT 3
4323: PPUSH
4324: LD_INT 12
4326: PPUSH
4327: LD_INT 100
4329: PPUSH
4330: CALL 57721 0 5
// veh := CreateVehicle ;
4334: LD_ADDR_VAR 0 3
4338: PUSH
4339: CALL_OW 45
4343: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4344: LD_VAR 0 3
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: CALL_OW 233
// PlaceUnitXY ( veh , 198 , 22 , false ) ;
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_INT 198
4363: PPUSH
4364: LD_INT 22
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
4374: LD_VAR 0 3
4378: PPUSH
4379: LD_INT 4
4381: PPUSH
4382: LD_INT 50
4384: PPUSH
4385: CALL_OW 290
// end else
4389: GO 4410
// begin CreateResourcesXY ( mat_artifact , 267 , 226 , 5 , false ) ;
4391: LD_INT 4
4393: PPUSH
4394: LD_INT 267
4396: PPUSH
4397: LD_INT 226
4399: PPUSH
4400: LD_INT 5
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 58
// end ; uc_nation := nation_american ;
4410: LD_ADDR_OWVAR 21
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
4418: LD_INT 3
4420: PPUSH
4421: LD_INT 3
4423: PPUSH
4424: LD_INT 3
4426: PPUSH
4427: LD_INT 12
4429: PPUSH
4430: LD_INT 100
4432: PPUSH
4433: CALL 57721 0 5
// veh := CreateVehicle ;
4437: LD_ADDR_VAR 0 3
4441: PUSH
4442: CALL_OW 45
4446: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4447: LD_VAR 0 3
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: CALL_OW 233
// PlaceUnitXY ( veh , 218 , 23 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 218
4466: PPUSH
4467: LD_INT 23
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
4477: LD_VAR 0 3
4481: PPUSH
4482: LD_INT 4
4484: PPUSH
4485: LD_INT 30
4487: PPUSH
4488: CALL_OW 290
// uc_nation := nation_russian ;
4492: LD_ADDR_OWVAR 21
4496: PUSH
4497: LD_INT 3
4499: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
4500: LD_INT 22
4502: PPUSH
4503: LD_INT 3
4505: PPUSH
4506: LD_INT 3
4508: PPUSH
4509: LD_INT 51
4511: PPUSH
4512: LD_INT 100
4514: PPUSH
4515: CALL 57721 0 5
// veh := CreateVehicle ;
4519: LD_ADDR_VAR 0 3
4523: PUSH
4524: CALL_OW 45
4528: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 233
// PlaceUnitXY ( veh , 214 , 20 , false ) ;
4541: LD_VAR 0 3
4545: PPUSH
4546: LD_INT 214
4548: PPUSH
4549: LD_INT 20
4551: PPUSH
4552: LD_INT 0
4554: PPUSH
4555: CALL_OW 48
// SetCargo ( veh , mat_artifact , 40 ) ;
4559: LD_VAR 0 3
4563: PPUSH
4564: LD_INT 4
4566: PPUSH
4567: LD_INT 40
4569: PPUSH
4570: CALL_OW 290
// end ; end_of_file
4574: LD_VAR 0 1
4578: RET
// export Powell ; export function PrepareAmerican ; var i , b , veh , cl , tmp , depot , lab , armoury , workshop ; begin
4579: LD_INT 0
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
// InitHc ;
4591: CALL_OW 19
// uc_side := 1 ;
4595: LD_ADDR_OWVAR 20
4599: PUSH
4600: LD_INT 1
4602: ST_TO_ADDR
// uc_nation := 1 ;
4603: LD_ADDR_OWVAR 21
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: LD_INT 22
4618: PUSH
4619: LD_INT 1
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 21
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PPUSH
4640: CALL_OW 69
4644: PUSH
4645: FOR_IN
4646: IFFALSE 4662
// SetBLevel ( i , 10 ) ;
4648: LD_VAR 0 2
4652: PPUSH
4653: LD_INT 10
4655: PPUSH
4656: CALL_OW 241
4660: GO 4645
4662: POP
4663: POP
// SetResourceType ( GetBase ( am_depot ) , mat_cans , 7500 ) ;
4664: LD_INT 387
4666: PPUSH
4667: CALL_OW 274
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 7500
4677: PPUSH
4678: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_oil , 4000 ) ;
4682: LD_INT 387
4684: PPUSH
4685: CALL_OW 274
4689: PPUSH
4690: LD_INT 2
4692: PPUSH
4693: LD_INT 4000
4695: PPUSH
4696: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_siberit , 50 ) ;
4700: LD_INT 387
4702: PPUSH
4703: CALL_OW 274
4707: PPUSH
4708: LD_INT 3
4710: PPUSH
4711: LD_INT 50
4713: PPUSH
4714: CALL_OW 277
// SetResourceType ( GetBase ( am_depot2 ) , mat_cans , 5500 ) ;
4718: LD_INT 476
4720: PPUSH
4721: CALL_OW 274
4725: PPUSH
4726: LD_INT 1
4728: PPUSH
4729: LD_INT 5500
4731: PPUSH
4732: CALL_OW 277
// SetResourceType ( GetBase ( am_depot2 ) , mat_oil , 4000 ) ;
4736: LD_INT 476
4738: PPUSH
4739: CALL_OW 274
4743: PPUSH
4744: LD_INT 2
4746: PPUSH
4747: LD_INT 4000
4749: PPUSH
4750: CALL_OW 277
// SetResourceType ( GetBase ( am_depot2 ) , mat_siberit , 10 ) ;
4754: LD_INT 476
4756: PPUSH
4757: CALL_OW 274
4761: PPUSH
4762: LD_INT 3
4764: PPUSH
4765: LD_INT 10
4767: PPUSH
4768: CALL_OW 277
// Powell := NewCharacter ( Powell ) ;
4772: LD_ADDR_EXP 52
4776: PUSH
4777: LD_STRING Powell
4779: PPUSH
4780: CALL_OW 25
4784: ST_TO_ADDR
// PlaceHumanInUnit ( Powell , am_depot ) ;
4785: LD_EXP 52
4789: PPUSH
4790: LD_INT 387
4792: PPUSH
4793: CALL_OW 52
// tmp := [ ] ;
4797: LD_ADDR_VAR 0 6
4801: PUSH
4802: EMPTY
4803: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12p_ ) ;
4804: LD_ADDR_EXP 19
4808: PUSH
4809: LD_STRING Lisa
4811: PPUSH
4812: LD_EXP 1
4816: NOT
4817: PPUSH
4818: LD_STRING 12p_
4820: PPUSH
4821: CALL 50546 0 3
4825: ST_TO_ADDR
// if Lisa then
4826: LD_EXP 19
4830: IFFALSE 4848
// tmp := tmp ^ Lisa ;
4832: LD_ADDR_VAR 0 6
4836: PUSH
4837: LD_VAR 0 6
4841: PUSH
4842: LD_EXP 19
4846: ADD
4847: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12p_ ) ;
4848: LD_ADDR_EXP 20
4852: PUSH
4853: LD_STRING Donaldson
4855: PPUSH
4856: LD_EXP 1
4860: NOT
4861: PPUSH
4862: LD_STRING 12p_
4864: PPUSH
4865: CALL 50546 0 3
4869: ST_TO_ADDR
// if Donaldson then
4870: LD_EXP 20
4874: IFFALSE 4892
// tmp := tmp ^ Donaldson ;
4876: LD_ADDR_VAR 0 6
4880: PUSH
4881: LD_VAR 0 6
4885: PUSH
4886: LD_EXP 20
4890: ADD
4891: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12p_ ) ;
4892: LD_ADDR_EXP 21
4896: PUSH
4897: LD_STRING Bobby
4899: PPUSH
4900: LD_EXP 1
4904: NOT
4905: PPUSH
4906: LD_STRING 12p_
4908: PPUSH
4909: CALL 50546 0 3
4913: ST_TO_ADDR
// if Bobby then
4914: LD_EXP 21
4918: IFFALSE 4936
// tmp := tmp ^ Bobby ;
4920: LD_ADDR_VAR 0 6
4924: PUSH
4925: LD_VAR 0 6
4929: PUSH
4930: LD_EXP 21
4934: ADD
4935: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12p_ ) ;
4936: LD_ADDR_EXP 22
4940: PUSH
4941: LD_STRING Cyrus
4943: PPUSH
4944: LD_EXP 1
4948: NOT
4949: PPUSH
4950: LD_STRING 12p_
4952: PPUSH
4953: CALL 50546 0 3
4957: ST_TO_ADDR
// if Cyrus then
4958: LD_EXP 22
4962: IFFALSE 4980
// tmp := tmp ^ Cyrus ;
4964: LD_ADDR_VAR 0 6
4968: PUSH
4969: LD_VAR 0 6
4973: PUSH
4974: LD_EXP 22
4978: ADD
4979: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 12p_ ) ;
4980: LD_ADDR_EXP 24
4984: PUSH
4985: LD_STRING Brown
4987: PPUSH
4988: LD_EXP 1
4992: NOT
4993: PPUSH
4994: LD_STRING 12p_
4996: PPUSH
4997: CALL 50546 0 3
5001: ST_TO_ADDR
// if Brown then
5002: LD_EXP 24
5006: IFFALSE 5024
// tmp := tmp ^ Brown ;
5008: LD_ADDR_VAR 0 6
5012: PUSH
5013: LD_VAR 0 6
5017: PUSH
5018: LD_EXP 24
5022: ADD
5023: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12p_ ) ;
5024: LD_ADDR_EXP 25
5028: PUSH
5029: LD_STRING Gladstone
5031: PPUSH
5032: LD_EXP 1
5036: NOT
5037: PPUSH
5038: LD_STRING 12p_
5040: PPUSH
5041: CALL 50546 0 3
5045: ST_TO_ADDR
// if Gladstone then
5046: LD_EXP 25
5050: IFFALSE 5068
// tmp := tmp ^ Gladstone ;
5052: LD_ADDR_VAR 0 6
5056: PUSH
5057: LD_VAR 0 6
5061: PUSH
5062: LD_EXP 25
5066: ADD
5067: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 12p_ ) ;
5068: LD_ADDR_EXP 26
5072: PUSH
5073: LD_STRING Houten
5075: PPUSH
5076: LD_EXP 1
5080: NOT
5081: PPUSH
5082: LD_STRING 12p_
5084: PPUSH
5085: CALL 50546 0 3
5089: ST_TO_ADDR
// if Houten then
5090: LD_EXP 26
5094: IFFALSE 5112
// tmp := tmp ^ Houten ;
5096: LD_ADDR_VAR 0 6
5100: PUSH
5101: LD_VAR 0 6
5105: PUSH
5106: LD_EXP 26
5110: ADD
5111: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12p_ ) ;
5112: LD_ADDR_EXP 27
5116: PUSH
5117: LD_STRING Cornel
5119: PPUSH
5120: LD_EXP 1
5124: NOT
5125: PPUSH
5126: LD_STRING 12p_
5128: PPUSH
5129: CALL 50546 0 3
5133: ST_TO_ADDR
// if Cornel then
5134: LD_EXP 27
5138: IFFALSE 5156
// tmp := tmp ^ Cornel ;
5140: LD_ADDR_VAR 0 6
5144: PUSH
5145: LD_VAR 0 6
5149: PUSH
5150: LD_EXP 27
5154: ADD
5155: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 12p_ ) ;
5156: LD_ADDR_EXP 28
5160: PUSH
5161: LD_STRING Gary
5163: PPUSH
5164: LD_EXP 1
5168: NOT
5169: PPUSH
5170: LD_STRING 12p_
5172: PPUSH
5173: CALL 50546 0 3
5177: ST_TO_ADDR
// if Gary then
5178: LD_EXP 28
5182: IFFALSE 5200
// tmp := tmp ^ Gary ;
5184: LD_ADDR_VAR 0 6
5188: PUSH
5189: LD_VAR 0 6
5193: PUSH
5194: LD_EXP 28
5198: ADD
5199: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12p_ ) ;
5200: LD_ADDR_EXP 30
5204: PUSH
5205: LD_STRING Kikuchi
5207: PPUSH
5208: LD_EXP 1
5212: NOT
5213: PPUSH
5214: LD_STRING 12p_
5216: PPUSH
5217: CALL 50546 0 3
5221: ST_TO_ADDR
// if Kikuchi then
5222: LD_EXP 30
5226: IFFALSE 5244
// tmp := tmp ^ Kikuchi ;
5228: LD_ADDR_VAR 0 6
5232: PUSH
5233: LD_VAR 0 6
5237: PUSH
5238: LD_EXP 30
5242: ADD
5243: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 12p_others ) ;
5244: LD_ADDR_VAR 0 6
5248: PUSH
5249: LD_VAR 0 6
5253: PUSH
5254: LD_STRING 12p_others
5256: PPUSH
5257: CALL_OW 31
5261: UNION
5262: ST_TO_ADDR
// if tmp < 36 then
5263: LD_VAR 0 6
5267: PUSH
5268: LD_INT 36
5270: LESS
5271: IFFALSE 5338
// for i = 1 to 36 - tmp do
5273: LD_ADDR_VAR 0 2
5277: PUSH
5278: DOUBLE
5279: LD_INT 1
5281: DEC
5282: ST_TO_ADDR
5283: LD_INT 36
5285: PUSH
5286: LD_VAR 0 6
5290: MINUS
5291: PUSH
5292: FOR_TO
5293: IFFALSE 5336
// begin PrepareHuman ( sex_male , i mod 4 + 1 , 10 ) ;
5295: LD_INT 1
5297: PPUSH
5298: LD_VAR 0 2
5302: PUSH
5303: LD_INT 4
5305: MOD
5306: PUSH
5307: LD_INT 1
5309: PLUS
5310: PPUSH
5311: LD_INT 10
5313: PPUSH
5314: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
5318: LD_ADDR_VAR 0 6
5322: PUSH
5323: LD_VAR 0 6
5327: PUSH
5328: CALL_OW 44
5332: ADD
5333: ST_TO_ADDR
// end ;
5334: GO 5292
5336: POP
5337: POP
// for i in tmp do
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_VAR 0 6
5347: PUSH
5348: FOR_IN
5349: IFFALSE 5374
// PlaceUnitXYR ( i , 62 , 93 , 9 , false ) ;
5351: LD_VAR 0 2
5355: PPUSH
5356: LD_INT 62
5358: PPUSH
5359: LD_INT 93
5361: PPUSH
5362: LD_INT 9
5364: PPUSH
5365: LD_INT 0
5367: PPUSH
5368: CALL_OW 50
5372: GO 5348
5374: POP
5375: POP
// mc_bases := Replace ( mc_bases , 4 , FilterAllUnits ( [ f_side , 1 ] ) diff Powell ) ;
5376: LD_ADDR_EXP 79
5380: PUSH
5381: LD_EXP 79
5385: PPUSH
5386: LD_INT 4
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 69
5403: PUSH
5404: LD_EXP 52
5408: DIFF
5409: PPUSH
5410: CALL_OW 1
5414: ST_TO_ADDR
// uc_side := 0 ;
5415: LD_ADDR_OWVAR 20
5419: PUSH
5420: LD_INT 0
5422: ST_TO_ADDR
// uc_nation := 0 ;
5423: LD_ADDR_OWVAR 21
5427: PUSH
5428: LD_INT 0
5430: ST_TO_ADDR
// for i = 1 to 4 do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_INT 4
5443: PUSH
5444: FOR_TO
5445: IFFALSE 5476
// begin InitHc ;
5447: CALL_OW 19
// hc_class := class_apeman ;
5451: LD_ADDR_OWVAR 28
5455: PUSH
5456: LD_INT 12
5458: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , powellApe , false ) ;
5459: CALL_OW 44
5463: PPUSH
5464: LD_INT 11
5466: PPUSH
5467: LD_INT 0
5469: PPUSH
5470: CALL_OW 49
// end ;
5474: GO 5444
5476: POP
5477: POP
// end ;
5478: LD_VAR 0 1
5482: RET
// every 11 11$30 trigger not americanDestroyed and not MC_GetVehicles ( 4 , true ) do var i , tmp , target ;
5483: LD_EXP 4
5487: NOT
5488: PUSH
5489: LD_INT 4
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: CALL 45620 0 2
5499: NOT
5500: AND
5501: IFFALSE 6273
5503: GO 5505
5505: DISABLE
5506: LD_INT 0
5508: PPUSH
5509: PPUSH
5510: PPUSH
// begin enable ;
5511: ENABLE
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
5512: LD_INT 22
5514: PUSH
5515: LD_INT 1
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 23
5524: PUSH
5525: LD_INT 1
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 30
5534: PUSH
5535: LD_INT 3
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: PPUSH
5547: CALL_OW 69
5551: NOT
5552: IFFALSE 5556
// exit ;
5554: GO 6273
// if Prob ( 40 ) then
5556: LD_INT 40
5558: PPUSH
5559: CALL_OW 13
5563: IFFALSE 5690
// begin MC_InsertProduceList ( 4 , [ [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
5565: LD_INT 4
5567: PPUSH
5568: LD_INT 5
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: LD_INT 7
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 5
5588: PUSH
5589: LD_INT 1
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 7
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 5
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: LD_INT 2
5612: PUSH
5613: LD_INT 7
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 5
5624: PUSH
5625: LD_INT 1
5627: PUSH
5628: LD_INT 2
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 5
5642: PUSH
5643: LD_INT 1
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 6
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: LD_INT 5
5660: PUSH
5661: LD_INT 1
5663: PUSH
5664: LD_INT 2
5666: PUSH
5667: LD_INT 6
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: PPUSH
5684: CALL 44202 0 2
// end else
5688: GO 5813
// begin MC_InsertProduceList ( 4 , [ [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_laser ] , [ us_morphling , engine_combustion , control_remote , us_laser ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
5690: LD_INT 4
5692: PPUSH
5693: LD_INT 5
5695: PUSH
5696: LD_INT 1
5698: PUSH
5699: LD_INT 2
5701: PUSH
5702: LD_INT 7
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 5
5713: PUSH
5714: LD_INT 1
5716: PUSH
5717: LD_INT 2
5719: PUSH
5720: LD_INT 9
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 1
5734: PUSH
5735: LD_INT 2
5737: PUSH
5738: LD_INT 9
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: PUSH
5747: LD_INT 5
5749: PUSH
5750: LD_INT 1
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: LD_INT 6
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 5
5767: PUSH
5768: LD_INT 1
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: LD_INT 6
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 5
5785: PUSH
5786: LD_INT 1
5788: PUSH
5789: LD_INT 2
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL 44202 0 2
// end ; repeat wait ( 0 0$1 ) ;
5813: LD_INT 35
5815: PPUSH
5816: CALL_OW 67
// until MC_GetVehicles ( 4 , true ) >= 6 ;
5820: LD_INT 4
5822: PPUSH
5823: LD_INT 1
5825: PPUSH
5826: CALL 45620 0 2
5830: PUSH
5831: LD_INT 6
5833: GREATEREQUAL
5834: IFFALSE 5813
// wait ( 0 0$30 ) ;
5836: LD_INT 1050
5838: PPUSH
5839: CALL_OW 67
// tmp := MC_GetVehicles ( 4 , true ) ;
5843: LD_ADDR_VAR 0 2
5847: PUSH
5848: LD_INT 4
5850: PPUSH
5851: LD_INT 1
5853: PPUSH
5854: CALL 45620 0 2
5858: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 4 , mc_vehicles [ 4 ] diff tmp ) ;
5859: LD_ADDR_EXP 98
5863: PUSH
5864: LD_EXP 98
5868: PPUSH
5869: LD_INT 4
5871: PPUSH
5872: LD_EXP 98
5876: PUSH
5877: LD_INT 4
5879: ARRAY
5880: PUSH
5881: LD_VAR 0 2
5885: DIFF
5886: PPUSH
5887: CALL_OW 1
5891: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
5892: LD_ADDR_VAR 0 3
5896: PUSH
5897: LD_INT 0
5899: PPUSH
5900: LD_INT 2
5902: PPUSH
5903: CALL_OW 12
5907: ST_TO_ADDR
// if target then
5908: LD_VAR 0 3
5912: IFFALSE 6040
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
5914: LD_ADDR_VAR 0 2
5918: PUSH
5919: LD_VAR 0 2
5923: PPUSH
5924: LD_INT 24
5926: PUSH
5927: LD_INT 250
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PPUSH
5934: CALL_OW 72
5938: ST_TO_ADDR
// for i in tmp do
5939: LD_ADDR_VAR 0 1
5943: PUSH
5944: LD_VAR 0 2
5948: PUSH
5949: FOR_IN
5950: IFFALSE 5990
// if GetDistUnitXY ( i , 114 , 108 ) > 9 then
5952: LD_VAR 0 1
5956: PPUSH
5957: LD_INT 114
5959: PPUSH
5960: LD_INT 108
5962: PPUSH
5963: CALL_OW 297
5967: PUSH
5968: LD_INT 9
5970: GREATER
5971: IFFALSE 5988
// ComMoveXY ( i , 114 , 108 ) ;
5973: LD_VAR 0 1
5977: PPUSH
5978: LD_INT 114
5980: PPUSH
5981: LD_INT 108
5983: PPUSH
5984: CALL_OW 111
5988: GO 5949
5990: POP
5991: POP
// wait ( 0 0$1 ) ;
5992: LD_INT 35
5994: PPUSH
5995: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 114 , 108 , 9 ] ) >= ( tmp - 1 ) ;
5999: LD_VAR 0 2
6003: PPUSH
6004: LD_INT 92
6006: PUSH
6007: LD_INT 114
6009: PUSH
6010: LD_INT 108
6012: PUSH
6013: LD_INT 9
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PPUSH
6022: CALL_OW 72
6026: PUSH
6027: LD_VAR 0 2
6031: PUSH
6032: LD_INT 1
6034: MINUS
6035: GREATEREQUAL
6036: IFFALSE 5914
// end else
6038: GO 6164
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_VAR 0 2
6049: PPUSH
6050: LD_INT 24
6052: PUSH
6053: LD_INT 250
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PPUSH
6060: CALL_OW 72
6064: ST_TO_ADDR
// for i in tmp do
6065: LD_ADDR_VAR 0 1
6069: PUSH
6070: LD_VAR 0 2
6074: PUSH
6075: FOR_IN
6076: IFFALSE 6116
// if GetDistUnitXY ( i , 129 , 139 ) > 9 then
6078: LD_VAR 0 1
6082: PPUSH
6083: LD_INT 129
6085: PPUSH
6086: LD_INT 139
6088: PPUSH
6089: CALL_OW 297
6093: PUSH
6094: LD_INT 9
6096: GREATER
6097: IFFALSE 6114
// ComMoveXY ( i , 129 , 139 ) ;
6099: LD_VAR 0 1
6103: PPUSH
6104: LD_INT 129
6106: PPUSH
6107: LD_INT 139
6109: PPUSH
6110: CALL_OW 111
6114: GO 6075
6116: POP
6117: POP
// wait ( 0 0$1 ) ;
6118: LD_INT 35
6120: PPUSH
6121: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 129 , 139 , 9 ] ) >= ( tmp - 1 ) ;
6125: LD_VAR 0 2
6129: PPUSH
6130: LD_INT 92
6132: PUSH
6133: LD_INT 129
6135: PUSH
6136: LD_INT 139
6138: PUSH
6139: LD_INT 9
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 72
6152: PUSH
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 1
6160: MINUS
6161: GREATEREQUAL
6162: IFFALSE 6040
// end ; repeat wait ( 0 0$1 ) ;
6164: LD_INT 35
6166: PPUSH
6167: CALL_OW 67
// for i in tmp do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_VAR 0 2
6180: PUSH
6181: FOR_IN
6182: IFFALSE 6264
// begin if GetLives ( i ) > 251 then
6184: LD_VAR 0 1
6188: PPUSH
6189: CALL_OW 256
6193: PUSH
6194: LD_INT 251
6196: GREATER
6197: IFFALSE 6235
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) else
6199: LD_VAR 0 1
6203: PPUSH
6204: LD_INT 81
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: PPUSH
6219: LD_VAR 0 1
6223: PPUSH
6224: CALL_OW 74
6228: PPUSH
6229: CALL_OW 115
6233: GO 6262
// if IsDead ( i ) then
6235: LD_VAR 0 1
6239: PPUSH
6240: CALL_OW 301
6244: IFFALSE 6262
// tmp := tmp diff i ;
6246: LD_ADDR_VAR 0 2
6250: PUSH
6251: LD_VAR 0 2
6255: PUSH
6256: LD_VAR 0 1
6260: DIFF
6261: ST_TO_ADDR
// end ;
6262: GO 6181
6264: POP
6265: POP
// until not tmp ;
6266: LD_VAR 0 2
6270: NOT
6271: IFFALSE 6164
// end ;
6273: PPOPN 3
6275: END
// every 30 30$00 trigger not americanDestroyed do
6276: LD_EXP 4
6280: NOT
6281: IFFALSE 6346
6283: GO 6285
6285: DISABLE
// begin wait ( [ 30 30$00 , 20 20$00 , 10 10$00 ] [ Difficulty ] ) ;
6286: LD_INT 63000
6288: PUSH
6289: LD_INT 42000
6291: PUSH
6292: LD_INT 21000
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_OWVAR 67
6304: ARRAY
6305: PPUSH
6306: CALL_OW 67
// if americanDestroyed then
6310: LD_EXP 4
6314: IFFALSE 6318
// exit ;
6316: GO 6346
// MC_InsertProduceList ( 4 , [ [ us_morphling , engine_siberite , control_manual , us_siberium_rocket ] ] ) ;
6318: LD_INT 4
6320: PPUSH
6321: LD_INT 5
6323: PUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: LD_INT 8
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: PPUSH
6342: CALL 44202 0 2
// end ; end_of_file
6346: END
// export function PrepareArabian ; var i , un , tmp , side ; begin
6347: LD_INT 0
6349: PPUSH
6350: PPUSH
6351: PPUSH
6352: PPUSH
6353: PPUSH
// side := 2 ;
6354: LD_ADDR_VAR 0 5
6358: PUSH
6359: LD_INT 2
6361: ST_TO_ADDR
// InitHc ;
6362: CALL_OW 19
// uc_side := side ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_VAR 0 5
6375: ST_TO_ADDR
// uc_nation := 2 ;
6376: LD_ADDR_OWVAR 21
6380: PUSH
6381: LD_INT 2
6383: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: LD_INT 22
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 21
6401: PUSH
6402: LD_INT 3
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 69
6417: PUSH
6418: FOR_IN
6419: IFFALSE 6435
// SetBLevel ( i , 10 ) ;
6421: LD_VAR 0 2
6425: PPUSH
6426: LD_INT 10
6428: PPUSH
6429: CALL_OW 241
6433: GO 6418
6435: POP
6436: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6437: LD_ADDR_VAR 0 4
6441: PUSH
6442: LD_INT 22
6444: PUSH
6445: LD_VAR 0 5
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 30
6456: PUSH
6457: LD_INT 32
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 58
6466: PUSH
6467: EMPTY
6468: LIST
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: PPUSH
6475: CALL_OW 69
6479: ST_TO_ADDR
// for i = 1 to 10 do
6480: LD_ADDR_VAR 0 2
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_INT 10
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6566
// begin uc_nation := nation_nature ;
6496: LD_ADDR_OWVAR 21
6500: PUSH
6501: LD_INT 0
6503: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
6504: LD_ADDR_OWVAR 28
6508: PUSH
6509: LD_INT 15
6511: ST_TO_ADDR
// hc_gallery :=  ;
6512: LD_ADDR_OWVAR 33
6516: PUSH
6517: LD_STRING 
6519: ST_TO_ADDR
// hc_name :=  ;
6520: LD_ADDR_OWVAR 26
6524: PUSH
6525: LD_STRING 
6527: ST_TO_ADDR
// un := CreateHuman ;
6528: LD_ADDR_VAR 0 3
6532: PUSH
6533: CALL_OW 44
6537: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_VAR 0 4
6547: PUSH
6548: LD_VAR 0 4
6552: PUSH
6553: LD_VAR 0 2
6557: MINUS
6558: ARRAY
6559: PPUSH
6560: CALL_OW 52
// end ;
6564: GO 6493
6566: POP
6567: POP
// PrepareBase ( ar_depot , arabianBaseArea ,  , [ 8 , 9 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 16 , 6 , 6 , 6 ] ) ;
6568: LD_INT 503
6570: PPUSH
6571: LD_INT 27
6573: PPUSH
6574: LD_STRING 
6576: PPUSH
6577: LD_INT 8
6579: PUSH
6580: LD_INT 9
6582: PUSH
6583: LD_INT 10
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: PUSH
6591: LD_OWVAR 67
6595: ARRAY
6596: PPUSH
6597: LD_INT 3000
6599: PUSH
6600: LD_INT 500
6602: PUSH
6603: LD_INT 150
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PPUSH
6611: LD_INT 16
6613: PUSH
6614: LD_INT 6
6616: PUSH
6617: LD_INT 6
6619: PUSH
6620: LD_INT 6
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: PPUSH
6629: CALL 61130 0 6
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) ) ;
6633: LD_ADDR_EXP 79
6637: PUSH
6638: LD_EXP 79
6642: PPUSH
6643: LD_INT 1
6645: PPUSH
6646: LD_INT 22
6648: PUSH
6649: LD_VAR 0 5
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 23
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 3
6670: PUSH
6671: LD_INT 21
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: PPUSH
6690: CALL_OW 69
6694: PPUSH
6695: CALL_OW 1
6699: ST_TO_ADDR
// end ;
6700: LD_VAR 0 1
6704: RET
// export Omar ; export function PrepareOmarAli ; begin
6705: LD_INT 0
6707: PPUSH
// uc_side := 5 ;
6708: LD_ADDR_OWVAR 20
6712: PUSH
6713: LD_INT 5
6715: ST_TO_ADDR
// uc_nation := 2 ;
6716: LD_ADDR_OWVAR 21
6720: PUSH
6721: LD_INT 2
6723: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
6724: LD_ADDR_EXP 53
6728: PUSH
6729: LD_STRING Omar
6731: PPUSH
6732: CALL_OW 25
6736: ST_TO_ADDR
// PlaceUnitXY ( Omar , 330 , 244 , false ) ;
6737: LD_EXP 53
6741: PPUSH
6742: LD_INT 330
6744: PPUSH
6745: LD_INT 244
6747: PPUSH
6748: LD_INT 0
6750: PPUSH
6751: CALL_OW 48
// ComMoveXY ( Omar , 252 , 220 ) ;
6755: LD_EXP 53
6759: PPUSH
6760: LD_INT 252
6762: PPUSH
6763: LD_INT 220
6765: PPUSH
6766: CALL_OW 111
// end ; end_of_file
6770: LD_VAR 0 1
6774: RET
// export Schulz , Kozlov ; export function PrepareLegion ; var i , side , un , tmp ; begin
6775: LD_INT 0
6777: PPUSH
6778: PPUSH
6779: PPUSH
6780: PPUSH
6781: PPUSH
// side := 8 ;
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_INT 8
6789: ST_TO_ADDR
// InitHc ;
6790: CALL_OW 19
// uc_side := side ;
6794: LD_ADDR_OWVAR 20
6798: PUSH
6799: LD_VAR 0 3
6803: ST_TO_ADDR
// uc_nation := 2 ;
6804: LD_ADDR_OWVAR 21
6808: PUSH
6809: LD_INT 2
6811: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6812: LD_ADDR_VAR 0 2
6816: PUSH
6817: LD_INT 22
6819: PUSH
6820: LD_VAR 0 3
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 21
6831: PUSH
6832: LD_INT 3
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 69
6847: PUSH
6848: FOR_IN
6849: IFFALSE 6865
// SetBLevel ( i , 10 ) ;
6851: LD_VAR 0 2
6855: PPUSH
6856: LD_INT 10
6858: PPUSH
6859: CALL_OW 241
6863: GO 6848
6865: POP
6866: POP
// Schulz := NewCharacter ( Schulz ) ;
6867: LD_ADDR_EXP 54
6871: PUSH
6872: LD_STRING Schulz
6874: PPUSH
6875: CALL_OW 25
6879: ST_TO_ADDR
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
6880: LD_ADDR_EXP 55
6884: PUSH
6885: LD_STRING Kozlov
6887: PPUSH
6888: LD_INT 0
6890: PPUSH
6891: LD_STRING 
6893: PPUSH
6894: CALL 50546 0 3
6898: ST_TO_ADDR
// PlaceHumanInUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6899: LD_EXP 55
6903: PPUSH
6904: LD_INT 22
6906: PUSH
6907: LD_INT 8
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 23
6916: PUSH
6917: LD_INT 3
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 8
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: PPUSH
6939: CALL_OW 69
6943: PUSH
6944: LD_INT 1
6946: ARRAY
6947: PPUSH
6948: CALL_OW 52
// SetSkill ( Kozlov , class_mechanic , 10 ) ;
6952: LD_EXP 55
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 10
6962: PPUSH
6963: CALL_OW 237
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6967: LD_ADDR_VAR 0 5
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_VAR 0 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 32
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 58
6996: PUSH
6997: EMPTY
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 69
7009: ST_TO_ADDR
// for i = 1 to 10 do
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: DOUBLE
7016: LD_INT 1
7018: DEC
7019: ST_TO_ADDR
7020: LD_INT 10
7022: PUSH
7023: FOR_TO
7024: IFFALSE 7096
// begin uc_nation := nation_nature ;
7026: LD_ADDR_OWVAR 21
7030: PUSH
7031: LD_INT 0
7033: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
7034: LD_ADDR_OWVAR 28
7038: PUSH
7039: LD_INT 15
7041: ST_TO_ADDR
// hc_gallery :=  ;
7042: LD_ADDR_OWVAR 33
7046: PUSH
7047: LD_STRING 
7049: ST_TO_ADDR
// hc_name :=  ;
7050: LD_ADDR_OWVAR 26
7054: PUSH
7055: LD_STRING 
7057: ST_TO_ADDR
// un := CreateHuman ;
7058: LD_ADDR_VAR 0 4
7062: PUSH
7063: CALL_OW 44
7067: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
7068: LD_VAR 0 4
7072: PPUSH
7073: LD_VAR 0 5
7077: PUSH
7078: LD_VAR 0 5
7082: PUSH
7083: LD_VAR 0 2
7087: MINUS
7088: ARRAY
7089: PPUSH
7090: CALL_OW 52
// end ;
7094: GO 7023
7096: POP
7097: POP
// PrepareBase ( ar_depot1 , legionBaseArea ,  , [ 8 , 9 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 16 , 6 , 6 , 8 ] ) ;
7098: LD_INT 324
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: LD_STRING 
7106: PPUSH
7107: LD_INT 8
7109: PUSH
7110: LD_INT 9
7112: PUSH
7113: LD_INT 10
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: PUSH
7121: LD_OWVAR 67
7125: ARRAY
7126: PPUSH
7127: LD_INT 3000
7129: PUSH
7130: LD_INT 500
7132: PUSH
7133: LD_INT 150
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: PPUSH
7141: LD_INT 16
7143: PUSH
7144: LD_INT 6
7146: PUSH
7147: LD_INT 6
7149: PUSH
7150: LD_INT 8
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL 61130 0 6
// mc_bases := Replace ( mc_bases , 3 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Schulz ) ;
7163: LD_ADDR_EXP 79
7167: PUSH
7168: LD_EXP 79
7172: PPUSH
7173: LD_INT 3
7175: PPUSH
7176: LD_INT 22
7178: PUSH
7179: LD_VAR 0 3
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 23
7190: PUSH
7191: LD_INT 2
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 3
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 2
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: PUSH
7225: LD_EXP 54
7229: DIFF
7230: PPUSH
7231: CALL_OW 1
7235: ST_TO_ADDR
// end ;
7236: LD_VAR 0 1
7240: RET
// export function BuildKozlovBomb ; begin
7241: LD_INT 0
7243: PPUSH
// if not IsOk ( kozlov_fac ) or not IsOk ( kozlov_lab ) then
7244: LD_INT 332
7246: PPUSH
7247: CALL_OW 302
7251: NOT
7252: PUSH
7253: LD_INT 336
7255: PPUSH
7256: CALL_OW 302
7260: NOT
7261: OR
7262: IFFALSE 7266
// exit ;
7264: GO 7363
// ComChangeProfession ( Kozlov , 4 ) ;
7266: LD_EXP 55
7270: PPUSH
7271: LD_INT 4
7273: PPUSH
7274: CALL_OW 123
// ComResearch ( kozlov_lab , tech_sibFiss ) ;
7278: LD_INT 336
7280: PPUSH
7281: LD_INT 25
7283: PPUSH
7284: CALL_OW 124
// repeat wait ( 0 0$1 ) ;
7288: LD_INT 35
7290: PPUSH
7291: CALL_OW 67
// until GetTech ( tech_sibFiss , 8 ) = state_researched ;
7295: LD_INT 25
7297: PPUSH
7298: LD_INT 8
7300: PPUSH
7301: CALL_OW 321
7305: PUSH
7306: LD_INT 2
7308: EQUAL
7309: IFFALSE 7288
// ComExitBuilding ( Kozlov ) ;
7311: LD_EXP 55
7315: PPUSH
7316: CALL_OW 122
// AddComEnterUnit ( Kozlov , kozlov_fac ) ;
7320: LD_EXP 55
7324: PPUSH
7325: LD_INT 332
7327: PPUSH
7328: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
7332: LD_EXP 55
7336: PPUSH
7337: LD_INT 3
7339: PPUSH
7340: CALL_OW 183
// ComConstruct ( kozlov_fac , ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ) ;
7344: LD_INT 332
7346: PPUSH
7347: LD_INT 23
7349: PPUSH
7350: LD_INT 3
7352: PPUSH
7353: LD_INT 1
7355: PPUSH
7356: LD_INT 48
7358: PPUSH
7359: CALL_OW 125
// end ;
7363: LD_VAR 0 1
7367: RET
// every 11 11$30 trigger not legionDestroyed and not MC_GetVehicles ( 3 , true ) do var i , tmp , target ;
7368: LD_EXP 3
7372: NOT
7373: PUSH
7374: LD_INT 3
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL 45620 0 2
7384: NOT
7385: AND
7386: IFFALSE 8226
7388: GO 7390
7390: DISABLE
7391: LD_INT 0
7393: PPUSH
7394: PPUSH
7395: PPUSH
// begin enable ;
7396: ENABLE
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
7397: LD_INT 22
7399: PUSH
7400: LD_INT 8
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 23
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 30
7419: PUSH
7420: LD_INT 3
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: NOT
7437: IFFALSE 7441
// exit ;
7439: GO 8226
// if Prob ( 40 ) then
7441: LD_INT 40
7443: PPUSH
7444: CALL_OW 13
7448: IFFALSE 7575
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
7450: LD_INT 3
7452: PPUSH
7453: LD_INT 14
7455: PUSH
7456: LD_INT 1
7458: PUSH
7459: LD_INT 2
7461: PUSH
7462: LD_INT 28
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 14
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: LD_INT 28
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 14
7491: PUSH
7492: LD_INT 1
7494: PUSH
7495: LD_INT 2
7497: PUSH
7498: LD_INT 28
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 14
7509: PUSH
7510: LD_INT 1
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_INT 28
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 14
7527: PUSH
7528: LD_INT 1
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: LD_INT 28
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 14
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: LD_INT 26
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: PPUSH
7569: CALL 44202 0 2
// end else
7573: GO 7766
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
7575: LD_INT 3
7577: PPUSH
7578: LD_INT 14
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: LD_INT 27
7589: PUSH
7590: LD_INT 26
7592: PUSH
7593: LD_INT 26
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: PUSH
7601: LD_OWVAR 67
7605: ARRAY
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 14
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: LD_INT 2
7621: PUSH
7622: LD_INT 27
7624: PUSH
7625: LD_INT 26
7627: PUSH
7628: LD_INT 26
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 14
7650: PUSH
7651: LD_INT 1
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: LD_INT 26
7659: PUSH
7660: LD_INT 26
7662: PUSH
7663: LD_INT 29
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: PUSH
7671: LD_OWVAR 67
7675: ARRAY
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 13
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: LD_INT 2
7691: PUSH
7692: LD_INT 26
7694: PUSH
7695: LD_INT 29
7697: PUSH
7698: LD_INT 29
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: PUSH
7706: LD_OWVAR 67
7710: ARRAY
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 13
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: LD_INT 29
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 14
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 26
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL 44202 0 2
// end ; repeat wait ( 0 0$1 ) ;
7766: LD_INT 35
7768: PPUSH
7769: CALL_OW 67
// until MC_GetVehicles ( 3 , true ) >= 6 ;
7773: LD_INT 3
7775: PPUSH
7776: LD_INT 1
7778: PPUSH
7779: CALL 45620 0 2
7783: PUSH
7784: LD_INT 6
7786: GREATEREQUAL
7787: IFFALSE 7766
// wait ( 0 0$30 ) ;
7789: LD_INT 1050
7791: PPUSH
7792: CALL_OW 67
// tmp := MC_GetVehicles ( 3 , true ) ;
7796: LD_ADDR_VAR 0 2
7800: PUSH
7801: LD_INT 3
7803: PPUSH
7804: LD_INT 1
7806: PPUSH
7807: CALL 45620 0 2
7811: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 3 , mc_vehicles [ 3 ] diff tmp ) ;
7812: LD_ADDR_EXP 98
7816: PUSH
7817: LD_EXP 98
7821: PPUSH
7822: LD_INT 3
7824: PPUSH
7825: LD_EXP 98
7829: PUSH
7830: LD_INT 3
7832: ARRAY
7833: PUSH
7834: LD_VAR 0 2
7838: DIFF
7839: PPUSH
7840: CALL_OW 1
7844: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
7845: LD_ADDR_VAR 0 3
7849: PUSH
7850: LD_INT 0
7852: PPUSH
7853: LD_INT 2
7855: PPUSH
7856: CALL_OW 12
7860: ST_TO_ADDR
// if target then
7861: LD_VAR 0 3
7865: IFFALSE 7993
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
7867: LD_ADDR_VAR 0 2
7871: PUSH
7872: LD_VAR 0 2
7876: PPUSH
7877: LD_INT 24
7879: PUSH
7880: LD_INT 250
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PPUSH
7887: CALL_OW 72
7891: ST_TO_ADDR
// for i in tmp do
7892: LD_ADDR_VAR 0 1
7896: PUSH
7897: LD_VAR 0 2
7901: PUSH
7902: FOR_IN
7903: IFFALSE 7943
// if GetDistUnitXY ( i , 89 , 71 ) > 9 then
7905: LD_VAR 0 1
7909: PPUSH
7910: LD_INT 89
7912: PPUSH
7913: LD_INT 71
7915: PPUSH
7916: CALL_OW 297
7920: PUSH
7921: LD_INT 9
7923: GREATER
7924: IFFALSE 7941
// ComMoveXY ( i , 89 , 71 ) ;
7926: LD_VAR 0 1
7930: PPUSH
7931: LD_INT 89
7933: PPUSH
7934: LD_INT 71
7936: PPUSH
7937: CALL_OW 111
7941: GO 7902
7943: POP
7944: POP
// wait ( 0 0$1 ) ;
7945: LD_INT 35
7947: PPUSH
7948: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 89 , 71 , 9 ] ) >= ( tmp - 1 ) ;
7952: LD_VAR 0 2
7956: PPUSH
7957: LD_INT 92
7959: PUSH
7960: LD_INT 89
7962: PUSH
7963: LD_INT 71
7965: PUSH
7966: LD_INT 9
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: PPUSH
7975: CALL_OW 72
7979: PUSH
7980: LD_VAR 0 2
7984: PUSH
7985: LD_INT 1
7987: MINUS
7988: GREATEREQUAL
7989: IFFALSE 7867
// end else
7991: GO 8117
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
7993: LD_ADDR_VAR 0 2
7997: PUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 24
8005: PUSH
8006: LD_INT 250
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 72
8017: ST_TO_ADDR
// for i in tmp do
8018: LD_ADDR_VAR 0 1
8022: PUSH
8023: LD_VAR 0 2
8027: PUSH
8028: FOR_IN
8029: IFFALSE 8069
// if GetDistUnitXY ( i , 147 , 4 ) > 9 then
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 147
8038: PPUSH
8039: LD_INT 4
8041: PPUSH
8042: CALL_OW 297
8046: PUSH
8047: LD_INT 9
8049: GREATER
8050: IFFALSE 8067
// ComMoveXY ( i , 147 , 4 ) ;
8052: LD_VAR 0 1
8056: PPUSH
8057: LD_INT 147
8059: PPUSH
8060: LD_INT 4
8062: PPUSH
8063: CALL_OW 111
8067: GO 8028
8069: POP
8070: POP
// wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 147 , 4 , 9 ] ) >= ( tmp - 1 ) ;
8078: LD_VAR 0 2
8082: PPUSH
8083: LD_INT 92
8085: PUSH
8086: LD_INT 147
8088: PUSH
8089: LD_INT 4
8091: PUSH
8092: LD_INT 9
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 72
8105: PUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 1
8113: MINUS
8114: GREATEREQUAL
8115: IFFALSE 7993
// end ; repeat wait ( 0 0$1 ) ;
8117: LD_INT 35
8119: PPUSH
8120: CALL_OW 67
// for i in tmp do
8124: LD_ADDR_VAR 0 1
8128: PUSH
8129: LD_VAR 0 2
8133: PUSH
8134: FOR_IN
8135: IFFALSE 8217
// begin if GetLives ( i ) > 251 then
8137: LD_VAR 0 1
8141: PPUSH
8142: CALL_OW 256
8146: PUSH
8147: LD_INT 251
8149: GREATER
8150: IFFALSE 8188
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
8152: LD_VAR 0 1
8156: PPUSH
8157: LD_INT 81
8159: PUSH
8160: LD_INT 8
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: PPUSH
8172: LD_VAR 0 1
8176: PPUSH
8177: CALL_OW 74
8181: PPUSH
8182: CALL_OW 115
8186: GO 8215
// if IsDead ( i ) then
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 301
8197: IFFALSE 8215
// tmp := tmp diff i ;
8199: LD_ADDR_VAR 0 2
8203: PUSH
8204: LD_VAR 0 2
8208: PUSH
8209: LD_VAR 0 1
8213: DIFF
8214: ST_TO_ADDR
// end ;
8215: GO 8134
8217: POP
8218: POP
// until not tmp ;
8219: LD_VAR 0 2
8223: NOT
8224: IFFALSE 8117
// end ;
8226: PPOPN 3
8228: END
// every 0 0$1 trigger IsOk ( Kozlov ) and not legionDestroyed do
8229: LD_EXP 55
8233: PPUSH
8234: CALL_OW 302
8238: PUSH
8239: LD_EXP 3
8243: NOT
8244: AND
8245: IFFALSE 8254
8247: GO 8249
8249: DISABLE
// BuildKozlovBomb ;
8250: CALL 7241 0 0
8254: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) do
8255: LD_INT 22
8257: PUSH
8258: LD_INT 8
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 34
8267: PUSH
8268: LD_INT 48
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 69
8283: IFFALSE 8331
8285: GO 8287
8287: DISABLE
// begin ComAttackPlace ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] , 173 , 96 ) ;
8288: LD_INT 22
8290: PUSH
8291: LD_INT 8
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 34
8300: PUSH
8301: LD_INT 48
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PUSH
8317: LD_INT 1
8319: ARRAY
8320: PPUSH
8321: LD_INT 173
8323: PPUSH
8324: LD_INT 96
8326: PPUSH
8327: CALL_OW 116
// end ; end_of_file
8331: END
// export Platonov , Yakotich , Gleb , Bierezov ; export behemoths , behemothBuilders ; export function PrepareRussian ; var i , j , base , tmp , side , xy , b , teleport ; begin
8332: LD_INT 0
8334: PPUSH
8335: PPUSH
8336: PPUSH
8337: PPUSH
8338: PPUSH
8339: PPUSH
8340: PPUSH
8341: PPUSH
8342: PPUSH
// side := 3 ;
8343: LD_ADDR_VAR 0 6
8347: PUSH
8348: LD_INT 3
8350: ST_TO_ADDR
// InitHc ;
8351: CALL_OW 19
// uc_side := side ;
8355: LD_ADDR_OWVAR 20
8359: PUSH
8360: LD_VAR 0 6
8364: ST_TO_ADDR
// uc_nation := 3 ;
8365: LD_ADDR_OWVAR 21
8369: PUSH
8370: LD_INT 3
8372: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_VAR 0 6
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PUSH
8390: LD_INT 21
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 69
8408: PUSH
8409: FOR_IN
8410: IFFALSE 8426
// SetBLevel ( i , 10 ) ;
8412: LD_VAR 0 2
8416: PPUSH
8417: LD_INT 10
8419: PPUSH
8420: CALL_OW 241
8424: GO 8409
8426: POP
8427: POP
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
8428: LD_ADDR_VAR 0 9
8432: PUSH
8433: LD_INT 22
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 30
8447: PUSH
8448: LD_INT 34
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PPUSH
8459: CALL_OW 69
8463: ST_TO_ADDR
// if teleport then
8464: LD_VAR 0 9
8468: IFFALSE 8489
// TeleportExit ( teleport [ 1 ] , 123 , 122 ) ;
8470: LD_VAR 0 9
8474: PUSH
8475: LD_INT 1
8477: ARRAY
8478: PPUSH
8479: LD_INT 123
8481: PPUSH
8482: LD_INT 122
8484: PPUSH
8485: CALL_OW 243
// hc_importance := 0 ;
8489: LD_ADDR_OWVAR 32
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// Platonov := NewCharacter ( Platonov ) ;
8497: LD_ADDR_EXP 56
8501: PUSH
8502: LD_STRING Platonov
8504: PPUSH
8505: CALL_OW 25
8509: ST_TO_ADDR
// Yakotich := NewCharacter ( Yakotich ) ;
8510: LD_ADDR_EXP 57
8514: PUSH
8515: LD_STRING Yakotich
8517: PPUSH
8518: CALL_OW 25
8522: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
8523: LD_ADDR_EXP 58
8527: PUSH
8528: LD_STRING Gleb
8530: PPUSH
8531: CALL_OW 25
8535: ST_TO_ADDR
// if TestCharacters ( 03_Cornel ) then
8536: LD_STRING 03_Cornel
8538: PPUSH
8539: CALL_OW 28
8543: IFFALSE 8591
// begin Bierezov := NewCharacter ( Mikhail ) ;
8545: LD_ADDR_EXP 59
8549: PUSH
8550: LD_STRING Mikhail
8552: PPUSH
8553: CALL_OW 25
8557: ST_TO_ADDR
// PlaceUnitXYR ( Bierezov , 197 , 111 , 9 , false ) ;
8558: LD_EXP 59
8562: PPUSH
8563: LD_INT 197
8565: PPUSH
8566: LD_INT 111
8568: PPUSH
8569: LD_INT 9
8571: PPUSH
8572: LD_INT 0
8574: PPUSH
8575: CALL_OW 50
// SetClass ( Bierezov , 3 ) ;
8579: LD_EXP 59
8583: PPUSH
8584: LD_INT 3
8586: PPUSH
8587: CALL_OW 336
// end ; PlaceHumanInUnit ( Platonov , ru_depot ) ;
8591: LD_EXP 56
8595: PPUSH
8596: LD_INT 126
8598: PPUSH
8599: CALL_OW 52
// PlaceUnitXYR ( Yakotich , 197 , 111 , 9 , false ) ;
8603: LD_EXP 57
8607: PPUSH
8608: LD_INT 197
8610: PPUSH
8611: LD_INT 111
8613: PPUSH
8614: LD_INT 9
8616: PPUSH
8617: LD_INT 0
8619: PPUSH
8620: CALL_OW 50
// PlaceUnitXYR ( Gleb , 197 , 111 , 9 , false ) ;
8624: LD_EXP 58
8628: PPUSH
8629: LD_INT 197
8631: PPUSH
8632: LD_INT 111
8634: PPUSH
8635: LD_INT 9
8637: PPUSH
8638: LD_INT 0
8640: PPUSH
8641: CALL_OW 50
// tmp := PrepareBase ( ru_depot , russianBaseArea , zhukov , [ 9 , 10 , 10 ] [ Difficulty ] , [ 9000 , 1000 , 300 ] , [ 21 , 8 , 13 , 8 ] ) ;
8645: LD_ADDR_VAR 0 5
8649: PUSH
8650: LD_INT 126
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: LD_STRING zhukov
8658: PPUSH
8659: LD_INT 9
8661: PUSH
8662: LD_INT 10
8664: PUSH
8665: LD_INT 10
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: LD_OWVAR 67
8677: ARRAY
8678: PPUSH
8679: LD_INT 9000
8681: PUSH
8682: LD_INT 1000
8684: PUSH
8685: LD_INT 300
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: PPUSH
8693: LD_INT 21
8695: PUSH
8696: LD_INT 8
8698: PUSH
8699: LD_INT 13
8701: PUSH
8702: LD_INT 8
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL 61130 0 6
8715: ST_TO_ADDR
// base := GetBase ( ru_depot2 ) ;
8716: LD_ADDR_VAR 0 4
8720: PUSH
8721: LD_INT 267
8723: PPUSH
8724: CALL_OW 274
8728: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 5000 ) ;
8729: LD_VAR 0 4
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 5000
8739: PPUSH
8740: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
8744: LD_VAR 0 4
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: LD_INT 200
8754: PPUSH
8755: CALL_OW 277
// SetResourceType ( base , mat_siberit , 200 ) ;
8759: LD_VAR 0 4
8763: PPUSH
8764: LD_INT 3
8766: PPUSH
8767: LD_INT 200
8769: PPUSH
8770: CALL_OW 277
// mc_bases := Replace ( mc_bases , 2 , tmp union FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Platonov ) ;
8774: LD_ADDR_EXP 79
8778: PUSH
8779: LD_EXP 79
8783: PPUSH
8784: LD_INT 2
8786: PPUSH
8787: LD_VAR 0 5
8791: PUSH
8792: LD_INT 22
8794: PUSH
8795: LD_VAR 0 6
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 3
8806: PUSH
8807: LD_INT 21
8809: PUSH
8810: LD_INT 2
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PPUSH
8825: CALL_OW 69
8829: UNION
8830: PUSH
8831: LD_EXP 56
8835: DIFF
8836: PPUSH
8837: CALL_OW 1
8841: ST_TO_ADDR
// behemoths := [ ] ;
8842: LD_ADDR_EXP 60
8846: PUSH
8847: EMPTY
8848: ST_TO_ADDR
// behemothBuilders := [ ] ;
8849: LD_ADDR_EXP 61
8853: PUSH
8854: EMPTY
8855: ST_TO_ADDR
// j := 3 ;
8856: LD_ADDR_VAR 0 3
8860: PUSH
8861: LD_INT 3
8863: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
8864: LD_ADDR_VAR 0 2
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 3
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: LD_INT 3
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: FOR_IN
8899: IFFALSE 8949
// begin behemothBuilders := Join ( behemothBuilders , i ) ;
8901: LD_ADDR_EXP 61
8905: PUSH
8906: LD_EXP 61
8910: PPUSH
8911: LD_VAR 0 2
8915: PPUSH
8916: CALL 93476 0 2
8920: ST_TO_ADDR
// j := j - 1 ;
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_VAR 0 3
8930: PUSH
8931: LD_INT 1
8933: MINUS
8934: ST_TO_ADDR
// if j = 0 then
8935: LD_VAR 0 3
8939: PUSH
8940: LD_INT 0
8942: EQUAL
8943: IFFALSE 8947
// break ;
8945: GO 8949
// end ;
8947: GO 8898
8949: POP
8950: POP
// end ;
8951: LD_VAR 0 1
8955: RET
// export function BuildBehemoths ; var i , j , xy , tmp ; begin
8956: LD_INT 0
8958: PPUSH
8959: PPUSH
8960: PPUSH
8961: PPUSH
8962: PPUSH
// xy := [ [ 209 , 149 ] , [ 219 , 154 ] , [ 223 , 149 ] , [ 232 , 155 ] ] ;
8963: LD_ADDR_VAR 0 4
8967: PUSH
8968: LD_INT 209
8970: PUSH
8971: LD_INT 149
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 219
8980: PUSH
8981: LD_INT 154
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 223
8990: PUSH
8991: LD_INT 149
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 232
9000: PUSH
9001: LD_INT 155
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: ST_TO_ADDR
// if not behemothBuilders then
9014: LD_EXP 61
9018: NOT
9019: IFFALSE 9023
// exit ;
9021: GO 9127
// j := 1 ;
9023: LD_ADDR_VAR 0 3
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// for i in behemothBuilders do
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: LD_EXP 61
9040: PUSH
9041: FOR_IN
9042: IFFALSE 9125
// begin if IsInUnit ( i ) then
9044: LD_VAR 0 2
9048: PPUSH
9049: CALL_OW 310
9053: IFFALSE 9064
// ComExitBuilding ( i ) ;
9055: LD_VAR 0 2
9059: PPUSH
9060: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , xy [ j ] [ 1 ] , xy [ j ] [ 2 ] , 0 ) ;
9064: LD_VAR 0 2
9068: PPUSH
9069: LD_INT 37
9071: PPUSH
9072: LD_VAR 0 4
9076: PUSH
9077: LD_VAR 0 3
9081: ARRAY
9082: PUSH
9083: LD_INT 1
9085: ARRAY
9086: PPUSH
9087: LD_VAR 0 4
9091: PUSH
9092: LD_VAR 0 3
9096: ARRAY
9097: PUSH
9098: LD_INT 2
9100: ARRAY
9101: PPUSH
9102: LD_INT 0
9104: PPUSH
9105: CALL_OW 230
// j := j + 1 ;
9109: LD_ADDR_VAR 0 3
9113: PUSH
9114: LD_VAR 0 3
9118: PUSH
9119: LD_INT 1
9121: PLUS
9122: ST_TO_ADDR
// end ;
9123: GO 9041
9125: POP
9126: POP
// end ;
9127: LD_VAR 0 1
9131: RET
// every 0 0$3 trigger GetBehemoths ( 3 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) do var i , tmp ;
9132: LD_INT 3
9134: PPUSH
9135: CALL 93524 0 1
9139: PUSH
9140: LD_INT 22
9142: PUSH
9143: LD_INT 3
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 30
9152: PUSH
9153: LD_INT 37
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: NOT
9169: AND
9170: IFFALSE 9356
9172: GO 9174
9174: DISABLE
9175: LD_INT 0
9177: PPUSH
9178: PPUSH
// begin enable ;
9179: ENABLE
// tmp := GetBehemoths ( 3 ) ;
9180: LD_ADDR_VAR 0 2
9184: PUSH
9185: LD_INT 3
9187: PPUSH
9188: CALL 93524 0 1
9192: ST_TO_ADDR
// for i in tmp do
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: LD_VAR 0 2
9202: PUSH
9203: FOR_IN
9204: IFFALSE 9354
// begin if IsInArea ( i , powellBase ) and not GetTag ( i ) = 2 then
9206: LD_VAR 0 1
9210: PPUSH
9211: LD_INT 7
9213: PPUSH
9214: CALL_OW 308
9218: PUSH
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 110
9228: PUSH
9229: LD_INT 2
9231: EQUAL
9232: NOT
9233: AND
9234: IFFALSE 9248
// SetTag ( i , 2 ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_INT 2
9243: PPUSH
9244: CALL_OW 109
// if not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , i , 12 ] ] ) and not GetTag ( i ) = 2 then
9248: LD_INT 81
9250: PUSH
9251: LD_INT 3
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 91
9260: PUSH
9261: LD_VAR 0 1
9265: PUSH
9266: LD_INT 12
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: NOT
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 110
9293: PUSH
9294: LD_INT 2
9296: EQUAL
9297: NOT
9298: AND
9299: IFFALSE 9318
// ComAgressiveMove ( i , 64 , 93 ) else
9301: LD_VAR 0 1
9305: PPUSH
9306: LD_INT 64
9308: PPUSH
9309: LD_INT 93
9311: PPUSH
9312: CALL_OW 114
9316: GO 9352
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
9318: LD_VAR 0 1
9322: PPUSH
9323: LD_INT 81
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 69
9337: PPUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 74
9347: PPUSH
9348: CALL_OW 115
// end ;
9352: GO 9203
9354: POP
9355: POP
// end ;
9356: PPOPN 2
9358: END
// every 11 11$30 trigger not russianDestroyed and not MC_GetVehicles ( 2 , true ) do var i , tmp , target , teleport ;
9359: LD_EXP 2
9363: NOT
9364: PUSH
9365: LD_INT 2
9367: PPUSH
9368: LD_INT 1
9370: PPUSH
9371: CALL 45620 0 2
9375: NOT
9376: AND
9377: IFFALSE 10297
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
9386: PPUSH
9387: PPUSH
// begin enable ;
9388: ENABLE
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
9389: LD_INT 22
9391: PUSH
9392: LD_INT 3
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: LD_INT 3
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 69
9417: NOT
9418: IFFALSE 9422
// exit ;
9420: GO 10297
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
9422: LD_ADDR_VAR 0 4
9426: PUSH
9427: LD_INT 22
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 30
9439: PUSH
9440: LD_INT 34
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PPUSH
9451: CALL_OW 69
9455: ST_TO_ADDR
// if Prob ( 40 ) then
9456: LD_INT 40
9458: PPUSH
9459: CALL_OW 13
9463: IFFALSE 9590
// begin MC_InsertProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
9465: LD_INT 2
9467: PPUSH
9468: LD_INT 22
9470: PUSH
9471: LD_INT 3
9473: PUSH
9474: LD_INT 3
9476: PUSH
9477: LD_INT 49
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 22
9488: PUSH
9489: LD_INT 3
9491: PUSH
9492: LD_INT 3
9494: PUSH
9495: LD_INT 49
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 22
9506: PUSH
9507: LD_INT 3
9509: PUSH
9510: LD_INT 3
9512: PUSH
9513: LD_INT 49
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 24
9524: PUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 3
9530: PUSH
9531: LD_INT 46
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 24
9542: PUSH
9543: LD_INT 3
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 46
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 24
9560: PUSH
9561: LD_INT 3
9563: PUSH
9564: LD_INT 3
9566: PUSH
9567: LD_INT 46
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL 44202 0 2
// end else
9588: GO 9713
// begin MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
9590: LD_INT 2
9592: PPUSH
9593: LD_INT 24
9595: PUSH
9596: LD_INT 3
9598: PUSH
9599: LD_INT 3
9601: PUSH
9602: LD_INT 47
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 24
9613: PUSH
9614: LD_INT 3
9616: PUSH
9617: LD_INT 3
9619: PUSH
9620: LD_INT 47
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 3
9634: PUSH
9635: LD_INT 3
9637: PUSH
9638: LD_INT 47
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 3
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: LD_INT 46
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 24
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: LD_INT 3
9673: PUSH
9674: LD_INT 46
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 3
9691: PUSH
9692: LD_INT 46
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL 44202 0 2
// end ; if Difficulty > 1 then
9713: LD_OWVAR 67
9717: PUSH
9718: LD_INT 1
9720: GREATER
9721: IFFALSE 9751
// MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
9723: LD_INT 2
9725: PPUSH
9726: LD_INT 24
9728: PUSH
9729: LD_INT 3
9731: PUSH
9732: LD_INT 3
9734: PUSH
9735: LD_INT 47
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: PPUSH
9747: CALL 44202 0 2
// repeat wait ( 0 0$1 ) ;
9751: LD_INT 35
9753: PPUSH
9754: CALL_OW 67
// until MC_GetVehicles ( 2 , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] ;
9758: LD_INT 2
9760: PPUSH
9761: LD_INT 1
9763: PPUSH
9764: CALL 45620 0 2
9768: PUSH
9769: LD_INT 6
9771: PUSH
9772: LD_INT 7
9774: PUSH
9775: LD_INT 7
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: PUSH
9783: LD_OWVAR 67
9787: ARRAY
9788: GREATEREQUAL
9789: IFFALSE 9751
// wait ( 0 0$30 ) ;
9791: LD_INT 1050
9793: PPUSH
9794: CALL_OW 67
// tmp := MC_GetVehicles ( 2 , true ) ;
9798: LD_ADDR_VAR 0 2
9802: PUSH
9803: LD_INT 2
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL 45620 0 2
9813: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 2 , mc_vehicles [ 2 ] diff tmp ) ;
9814: LD_ADDR_EXP 98
9818: PUSH
9819: LD_EXP 98
9823: PPUSH
9824: LD_INT 2
9826: PPUSH
9827: LD_EXP 98
9831: PUSH
9832: LD_INT 2
9834: ARRAY
9835: PUSH
9836: LD_VAR 0 2
9840: DIFF
9841: PPUSH
9842: CALL_OW 1
9846: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
9847: LD_ADDR_VAR 0 3
9851: PUSH
9852: LD_INT 0
9854: PPUSH
9855: LD_INT 1
9857: PPUSH
9858: CALL_OW 12
9862: ST_TO_ADDR
// if target then
9863: LD_VAR 0 3
9867: IFFALSE 9995
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
9869: LD_ADDR_VAR 0 2
9873: PUSH
9874: LD_VAR 0 2
9878: PPUSH
9879: LD_INT 24
9881: PUSH
9882: LD_INT 250
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PPUSH
9889: CALL_OW 72
9893: ST_TO_ADDR
// for i in tmp do
9894: LD_ADDR_VAR 0 1
9898: PUSH
9899: LD_VAR 0 2
9903: PUSH
9904: FOR_IN
9905: IFFALSE 9945
// if GetDistUnitXY ( i , 139 , 89 ) > 9 then
9907: LD_VAR 0 1
9911: PPUSH
9912: LD_INT 139
9914: PPUSH
9915: LD_INT 89
9917: PPUSH
9918: CALL_OW 297
9922: PUSH
9923: LD_INT 9
9925: GREATER
9926: IFFALSE 9943
// ComMoveXY ( i , 139 , 89 ) ;
9928: LD_VAR 0 1
9932: PPUSH
9933: LD_INT 139
9935: PPUSH
9936: LD_INT 89
9938: PPUSH
9939: CALL_OW 111
9943: GO 9904
9945: POP
9946: POP
// wait ( 0 0$1 ) ;
9947: LD_INT 35
9949: PPUSH
9950: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 139 , 89 , 9 ] ) >= ( tmp - 1 ) ;
9954: LD_VAR 0 2
9958: PPUSH
9959: LD_INT 92
9961: PUSH
9962: LD_INT 139
9964: PUSH
9965: LD_INT 89
9967: PUSH
9968: LD_INT 9
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PPUSH
9977: CALL_OW 72
9981: PUSH
9982: LD_VAR 0 2
9986: PUSH
9987: LD_INT 1
9989: MINUS
9990: GREATEREQUAL
9991: IFFALSE 9869
// end else
9993: GO 10137
// begin ComEnterUnit ( tmp , teleport [ 1 ] ) ;
9995: LD_VAR 0 2
9999: PPUSH
10000: LD_VAR 0 4
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PPUSH
10009: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_INT 24
10025: PUSH
10026: LD_INT 250
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 72
10037: ST_TO_ADDR
// for i in tmp do
10038: LD_ADDR_VAR 0 1
10042: PUSH
10043: LD_VAR 0 2
10047: PUSH
10048: FOR_IN
10049: IFFALSE 10089
// if GetDistUnitXY ( i , 124 , 139 ) > 9 then
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_INT 124
10058: PPUSH
10059: LD_INT 139
10061: PPUSH
10062: CALL_OW 297
10066: PUSH
10067: LD_INT 9
10069: GREATER
10070: IFFALSE 10087
// ComMoveXY ( i , 124 , 139 ) ;
10072: LD_VAR 0 1
10076: PPUSH
10077: LD_INT 124
10079: PPUSH
10080: LD_INT 139
10082: PPUSH
10083: CALL_OW 111
10087: GO 10048
10089: POP
10090: POP
// wait ( 0 0$1 ) ;
10091: LD_INT 35
10093: PPUSH
10094: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 124 , 139 , 9 ] ) >= ( tmp - 1 ) ;
10098: LD_VAR 0 2
10102: PPUSH
10103: LD_INT 92
10105: PUSH
10106: LD_INT 124
10108: PUSH
10109: LD_INT 139
10111: PUSH
10112: LD_INT 9
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 72
10125: PUSH
10126: LD_VAR 0 2
10130: PUSH
10131: LD_INT 1
10133: MINUS
10134: GREATEREQUAL
10135: IFFALSE 10013
// end ; repeat wait ( 0 0$1 ) ;
10137: LD_INT 35
10139: PPUSH
10140: CALL_OW 67
// for i in tmp do
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: LD_VAR 0 2
10153: PUSH
10154: FOR_IN
10155: IFFALSE 10288
// begin if GetLives ( i ) > 251 then
10157: LD_VAR 0 1
10161: PPUSH
10162: CALL_OW 256
10166: PUSH
10167: LD_INT 251
10169: GREATER
10170: IFFALSE 10259
// begin if GetWeapon ( i ) = ru_time_lapser then
10172: LD_VAR 0 1
10176: PPUSH
10177: CALL_OW 264
10181: PUSH
10182: LD_INT 49
10184: EQUAL
10185: IFFALSE 10223
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
10187: LD_VAR 0 1
10191: PPUSH
10192: LD_INT 81
10194: PUSH
10195: LD_INT 3
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PPUSH
10207: LD_VAR 0 1
10211: PPUSH
10212: CALL_OW 74
10216: PPUSH
10217: CALL_OW 112
10221: GO 10257
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
10223: LD_VAR 0 1
10227: PPUSH
10228: LD_INT 81
10230: PUSH
10231: LD_INT 3
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PPUSH
10238: CALL_OW 69
10242: PPUSH
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 74
10252: PPUSH
10253: CALL_OW 115
// end else
10257: GO 10286
// if IsDead ( i ) then
10259: LD_VAR 0 1
10263: PPUSH
10264: CALL_OW 301
10268: IFFALSE 10286
// tmp := tmp diff i ;
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: LD_VAR 0 2
10279: PUSH
10280: LD_VAR 0 1
10284: DIFF
10285: ST_TO_ADDR
// end ;
10286: GO 10154
10288: POP
10289: POP
// until not tmp ;
10290: LD_VAR 0 2
10294: NOT
10295: IFFALSE 10137
// end ;
10297: PPOPN 4
10299: END
// every 30 30$00 trigger not russianDestroyed do
10300: LD_EXP 2
10304: NOT
10305: IFFALSE 10370
10307: GO 10309
10309: DISABLE
// begin wait ( [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] ) ;
10310: LD_INT 105000
10312: PUSH
10313: LD_INT 84000
10315: PUSH
10316: LD_INT 63000
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: LD_OWVAR 67
10328: ARRAY
10329: PPUSH
10330: CALL_OW 67
// if russianDestroyed then
10334: LD_EXP 2
10338: IFFALSE 10342
// exit ;
10340: GO 10370
// MC_InsertProduceList ( 2 , [ [ ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ] ] ) ;
10342: LD_INT 2
10344: PPUSH
10345: LD_INT 23
10347: PUSH
10348: LD_INT 3
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: LD_INT 48
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: PPUSH
10366: CALL 44202 0 2
// end ; end_of_file
10370: END
// export function CustomEvent ( event ) ; begin
10371: LD_INT 0
10373: PPUSH
// end ;
10374: LD_VAR 0 2
10378: RET
// on SibDepositContaminated ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
10379: LD_VAR 0 2
10383: PPUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: LD_INT 15
10391: PPUSH
10392: CALL_OW 309
10396: IFFALSE 10405
// YouLost ( MothContaminate ) ;
10398: LD_STRING MothContaminate
10400: PPUSH
10401: CALL_OW 104
// end ;
10405: PPOPN 3
10407: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
10408: LD_VAR 0 2
10412: PPUSH
10413: LD_VAR 0 3
10417: PPUSH
10418: LD_INT 15
10420: PPUSH
10421: CALL_OW 309
10425: IFFALSE 10441
// begin wait ( 0 0$6 ) ;
10427: LD_INT 210
10429: PPUSH
10430: CALL_OW 67
// YouLost ( MothContaminateBomb ) ;
10434: LD_STRING MothContaminateBomb
10436: PPUSH
10437: CALL_OW 104
// end ; end ;
10441: PPOPN 3
10443: END
// on UnitDestroyed ( un ) do begin if un = JMM then
10444: LD_VAR 0 1
10448: PUSH
10449: LD_EXP 17
10453: EQUAL
10454: IFFALSE 10465
// begin YouLost ( JMM ) ;
10456: LD_STRING JMM
10458: PPUSH
10459: CALL_OW 104
// exit ;
10463: GO 10564
// end ; if un = Powell then
10465: LD_VAR 0 1
10469: PUSH
10470: LD_EXP 52
10474: EQUAL
10475: IFFALSE 10485
// americanDestroyed := true ;
10477: LD_ADDR_EXP 4
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// if un = Platonov then
10485: LD_VAR 0 1
10489: PUSH
10490: LD_EXP 56
10494: EQUAL
10495: IFFALSE 10505
// russianDestroyed := true ;
10497: LD_ADDR_EXP 2
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) then
10505: LD_VAR 0 1
10509: PUSH
10510: LD_INT 22
10512: PUSH
10513: LD_INT 7
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 21
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 69
10538: IN
10539: IFFALSE 10555
// vehicleLostCounter := vehicleLostCounter + 1 ;
10541: LD_ADDR_EXP 15
10545: PUSH
10546: LD_EXP 15
10550: PUSH
10551: LD_INT 1
10553: PLUS
10554: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL 47594 0 1
// end ;
10564: PPOPN 1
10566: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_VAR 0 2
10576: PPUSH
10577: CALL 49928 0 2
// end ;
10581: PPOPN 2
10583: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10584: LD_VAR 0 1
10588: PPUSH
10589: CALL 48996 0 1
// end ;
10593: PPOPN 1
10595: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_workshop ] , [ f_nation , 3 ] ] ) then
10596: LD_VAR 0 1
10600: PUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 8
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 23
10623: PUSH
10624: LD_INT 3
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 69
10640: IN
10641: IFFALSE 10668
// begin ComUpgrade ( building ) ;
10643: LD_VAR 0 1
10647: PPUSH
10648: CALL_OW 146
// ComComplete ( Kozlov , building ) ;
10652: LD_EXP 55
10656: PPUSH
10657: LD_VAR 0 1
10661: PPUSH
10662: CALL 60694 0 2
// exit ;
10666: GO 10677
// end ; MCE_BuildingComplete ( building ) ;
10668: LD_VAR 0 1
10672: PPUSH
10673: CALL 49237 0 1
// end ;
10677: PPOPN 1
10679: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: LD_VAR 0 2
10689: PPUSH
10690: CALL 47290 0 2
// end ;
10694: PPOPN 2
10696: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: LD_VAR 0 4
10716: PPUSH
10717: LD_VAR 0 5
10721: PPUSH
10722: CALL 46910 0 5
// end ;
10726: PPOPN 5
10728: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10729: LD_VAR 0 1
10733: PPUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL 46506 0 2
// end ;
10743: PPOPN 2
10745: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10746: LD_VAR 0 1
10750: PPUSH
10751: LD_VAR 0 2
10755: PPUSH
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL 46344 0 4
// end ;
10770: PPOPN 4
10772: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: LD_VAR 0 2
10782: PPUSH
10783: LD_VAR 0 3
10787: PPUSH
10788: CALL 46119 0 3
// end ;
10792: PPOPN 3
10794: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10795: LD_VAR 0 1
10799: PPUSH
10800: LD_VAR 0 2
10804: PPUSH
10805: CALL 46004 0 2
// end ;
10809: PPOPN 2
10811: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10812: LD_VAR 0 1
10816: PPUSH
10817: LD_VAR 0 2
10821: PPUSH
10822: CALL 50189 0 2
// end ;
10826: PPOPN 2
10828: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10829: LD_VAR 0 1
10833: PPUSH
10834: LD_VAR 0 2
10838: PPUSH
10839: LD_VAR 0 3
10843: PPUSH
10844: LD_VAR 0 4
10848: PPUSH
10849: CALL 50405 0 4
// end ;
10853: PPOPN 4
10855: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10856: LD_VAR 0 1
10860: PPUSH
10861: LD_VAR 0 2
10865: PPUSH
10866: CALL 45813 0 2
// end ;
10870: PPOPN 2
10872: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10873: LD_VAR 0 1
10877: PPUSH
10878: CALL 104723 0 1
// end ; end_of_file
10882: PPOPN 1
10884: END
// export function Action ; begin
10885: LD_INT 0
10887: PPUSH
// InGameOn ;
10888: CALL_OW 8
// CenterNowOnXY ( 206 , 11 ) ;
10892: LD_INT 206
10894: PPUSH
10895: LD_INT 11
10897: PPUSH
10898: CALL_OW 86
// wait ( 0 0$1 ) ;
10902: LD_INT 35
10904: PPUSH
10905: CALL_OW 67
// Say ( JMM , DStart-JMM-JMM-1 ) ;
10909: LD_EXP 17
10913: PPUSH
10914: LD_STRING DStart-JMM-JMM-1
10916: PPUSH
10917: CALL_OW 88
// Say ( Burlak , DStart-JMM-Bur-1 ) ;
10921: LD_EXP 49
10925: PPUSH
10926: LD_STRING DStart-JMM-Bur-1
10928: PPUSH
10929: CALL_OW 88
// Say ( JMM , DStart-JMM-JMM-2 ) ;
10933: LD_EXP 17
10937: PPUSH
10938: LD_STRING DStart-JMM-JMM-2
10940: PPUSH
10941: CALL_OW 88
// Say ( Burlak , DStart-JMM-Bur-2 ) ;
10945: LD_EXP 49
10949: PPUSH
10950: LD_STRING DStart-JMM-Bur-2
10952: PPUSH
10953: CALL_OW 88
// InGameOff ;
10957: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
10961: LD_STRING MStart
10963: PPUSH
10964: CALL_OW 337
// end ;
10968: LD_VAR 0 1
10972: RET
// every 0 0$2 trigger SeeXY ( 7 , 255 , 219 ) do var speaker ;
10973: LD_INT 7
10975: PPUSH
10976: LD_INT 255
10978: PPUSH
10979: LD_INT 219
10981: PPUSH
10982: CALL_OW 293
10986: IFFALSE 11595
10988: GO 10990
10990: DISABLE
10991: LD_INT 0
10993: PPUSH
// begin wait ( 0 0$3 ) ;
10994: LD_INT 105
10996: PPUSH
10997: CALL_OW 67
// alienSpotted := true ;
11001: LD_ADDR_EXP 10
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Titov , Dolgov , Petrosyan , Kuzmov , Kovalyuk , Scholtze ] ;
11009: LD_ADDR_VAR 0 1
11013: PUSH
11014: LD_INT 22
11016: PUSH
11017: LD_INT 7
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 23
11026: PUSH
11027: LD_INT 3
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 21
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: LD_INT 26
11046: PUSH
11047: LD_INT 1
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: PPUSH
11060: CALL_OW 69
11064: PUSH
11065: LD_EXP 49
11069: PUSH
11070: LD_EXP 37
11074: PUSH
11075: LD_EXP 39
11079: PUSH
11080: LD_EXP 40
11084: PUSH
11085: LD_EXP 47
11089: PUSH
11090: LD_EXP 46
11094: PUSH
11095: LD_EXP 41
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: DIFF
11109: ST_TO_ADDR
// DialogueOn ;
11110: CALL_OW 6
// PlaceSeeing ( 255 , 219 , 7 , - 20 ) ;
11114: LD_INT 255
11116: PPUSH
11117: LD_INT 219
11119: PPUSH
11120: LD_INT 7
11122: PPUSH
11123: LD_INT 20
11125: NEG
11126: PPUSH
11127: CALL_OW 330
// CenterNowOnXY ( 255 , 219 ) ;
11131: LD_INT 255
11133: PPUSH
11134: LD_INT 219
11136: PPUSH
11137: CALL_OW 86
// if speaker then
11141: LD_VAR 0 1
11145: IFFALSE 11163
// Say ( speaker [ 1 ] , DAlienBase-RSol1-1 ) ;
11147: LD_VAR 0 1
11151: PUSH
11152: LD_INT 1
11154: ARRAY
11155: PPUSH
11156: LD_STRING DAlienBase-RSol1-1
11158: PPUSH
11159: CALL_OW 88
// Say ( JMM , DAlienBase-JMM-1 ) ;
11163: LD_EXP 17
11167: PPUSH
11168: LD_STRING DAlienBase-JMM-1
11170: PPUSH
11171: CALL_OW 88
// if IsOk ( Burlak ) then
11175: LD_EXP 49
11179: PPUSH
11180: CALL_OW 302
11184: IFFALSE 11205
// begin dwait ( 0 0$1 ) ;
11186: LD_INT 35
11188: PPUSH
11189: CALL_OW 68
// Say ( Burlak , DAlienBase-Bur-1 ) ;
11193: LD_EXP 49
11197: PPUSH
11198: LD_STRING DAlienBase-Bur-1
11200: PPUSH
11201: CALL_OW 88
// end ; if IsOk ( Roth ) then
11205: LD_EXP 18
11209: PPUSH
11210: CALL_OW 302
11214: IFFALSE 11228
// Say ( Roth , DAlienBase-Roth-1 ) ;
11216: LD_EXP 18
11220: PPUSH
11221: LD_STRING DAlienBase-Roth-1
11223: PPUSH
11224: CALL_OW 88
// if IsOk ( Gossudarov ) then
11228: LD_EXP 35
11232: PPUSH
11233: CALL_OW 302
11237: IFFALSE 11253
// Say ( Gossudarov , DAlienBase-Gos-1 ) else
11239: LD_EXP 35
11243: PPUSH
11244: LD_STRING DAlienBase-Gos-1
11246: PPUSH
11247: CALL_OW 88
11251: GO 11370
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11253: LD_ADDR_VAR 0 1
11257: PUSH
11258: LD_INT 22
11260: PUSH
11261: LD_INT 7
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 25
11270: PUSH
11271: LD_INT 4
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 21
11280: PUSH
11281: LD_INT 1
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 26
11290: PUSH
11291: LD_INT 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: PPUSH
11304: CALL_OW 69
11308: PUSH
11309: LD_EXP 18
11313: PUSH
11314: LD_EXP 17
11318: PUSH
11319: LD_EXP 49
11323: PUSH
11324: LD_EXP 37
11328: PUSH
11329: LD_EXP 47
11333: PUSH
11334: LD_EXP 46
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: DIFF
11347: ST_TO_ADDR
// if speaker then
11348: LD_VAR 0 1
11352: IFFALSE 11370
// Say ( speaker [ 1 ] , DAlienBase-Sci1-1 ) ;
11354: LD_VAR 0 1
11358: PUSH
11359: LD_INT 1
11361: ARRAY
11362: PPUSH
11363: LD_STRING DAlienBase-Sci1-1
11365: PPUSH
11366: CALL_OW 88
// end ; RemoveSeeing ( 255 , 219 , 7 ) ;
11370: LD_INT 255
11372: PPUSH
11373: LD_INT 219
11375: PPUSH
11376: LD_INT 7
11378: PPUSH
11379: CALL_OW 331
// DialogueOff ;
11383: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11387: LD_INT 35
11389: PPUSH
11390: CALL_OW 67
// until IsSelected ( alien ) ;
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 306
11401: IFFALSE 11387
// if not artifactIResearched or not artifactIIResearched then
11403: LD_EXP 12
11407: NOT
11408: PUSH
11409: LD_EXP 13
11413: NOT
11414: OR
11415: IFFALSE 11595
// begin if IsOk ( Roth ) then
11417: LD_EXP 18
11421: PPUSH
11422: CALL_OW 302
11426: IFFALSE 11442
// Say ( Roth , DAlieBaseNotReady-Roth-1 ) else
11428: LD_EXP 18
11432: PPUSH
11433: LD_STRING DAlieBaseNotReady-Roth-1
11435: PPUSH
11436: CALL_OW 88
11440: GO 11595
// if IsOk ( Gossudarov ) then
11442: LD_EXP 35
11446: PPUSH
11447: CALL_OW 302
11451: IFFALSE 11467
// Say ( Gossudarov , DAlieBaseNotReady-Gos-1 ) else
11453: LD_EXP 35
11457: PPUSH
11458: LD_STRING DAlieBaseNotReady-Gos-1
11460: PPUSH
11461: CALL_OW 88
11465: GO 11595
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11467: LD_ADDR_VAR 0 1
11471: PUSH
11472: LD_INT 22
11474: PUSH
11475: LD_INT 7
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 23
11484: PUSH
11485: LD_INT 3
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 25
11494: PUSH
11495: LD_INT 4
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 21
11504: PUSH
11505: LD_INT 1
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 26
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: PPUSH
11529: CALL_OW 69
11533: PUSH
11534: LD_EXP 18
11538: PUSH
11539: LD_EXP 17
11543: PUSH
11544: LD_EXP 49
11548: PUSH
11549: LD_EXP 37
11553: PUSH
11554: LD_EXP 47
11558: PUSH
11559: LD_EXP 46
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: DIFF
11572: ST_TO_ADDR
// if speaker then
11573: LD_VAR 0 1
11577: IFFALSE 11595
// Say ( speaker [ 1 ] , DAlieBaseNotReady-RSci1-1 ) ;
11579: LD_VAR 0 1
11583: PUSH
11584: LD_INT 1
11586: ARRAY
11587: PPUSH
11588: LD_STRING DAlieBaseNotReady-RSci1-1
11590: PPUSH
11591: CALL_OW 88
// end ; end ; end ;
11595: PPOPN 1
11597: END
// every 0 0$1 trigger GetTech ( tech_Artifact , 7 ) = state_researched do var speaker ;
11598: LD_INT 24
11600: PPUSH
11601: LD_INT 7
11603: PPUSH
11604: CALL_OW 321
11608: PUSH
11609: LD_INT 2
11611: EQUAL
11612: IFFALSE 12303
11614: GO 11616
11616: DISABLE
11617: LD_INT 0
11619: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11620: LD_ADDR_VAR 0 1
11624: PUSH
11625: LD_INT 22
11627: PUSH
11628: LD_INT 7
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 23
11637: PUSH
11638: LD_INT 3
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 25
11647: PUSH
11648: LD_INT 4
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 21
11657: PUSH
11658: LD_INT 1
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 26
11667: PUSH
11668: LD_INT 1
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PUSH
11687: LD_EXP 18
11691: PUSH
11692: LD_EXP 17
11696: PUSH
11697: LD_EXP 49
11701: PUSH
11702: LD_EXP 37
11706: PUSH
11707: LD_EXP 47
11711: PUSH
11712: LD_EXP 46
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: DIFF
11725: ST_TO_ADDR
// if not speaker then
11726: LD_VAR 0 1
11730: NOT
11731: IFFALSE 11735
// exit ;
11733: GO 12303
// DialogueOn ;
11735: CALL_OW 6
// Say ( speaker [ 1 ] , DArtefTechnology-RSci1-1 ) ;
11739: LD_VAR 0 1
11743: PUSH
11744: LD_INT 1
11746: ARRAY
11747: PPUSH
11748: LD_STRING DArtefTechnology-RSci1-1
11750: PPUSH
11751: CALL_OW 88
// if IsOk ( Burlak ) then
11755: LD_EXP 49
11759: PPUSH
11760: CALL_OW 302
11764: IFFALSE 11778
// Say ( Burlak , DArtefTechnology-Bur-1 ) ;
11766: LD_EXP 49
11770: PPUSH
11771: LD_STRING DArtefTechnology-Bur-1
11773: PPUSH
11774: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnology-RSci1-2 ) ;
11778: LD_VAR 0 1
11782: PUSH
11783: LD_INT 1
11785: ARRAY
11786: PPUSH
11787: LD_STRING DArtefTechnology-RSci1-2
11789: PPUSH
11790: CALL_OW 88
// if Denis then
11794: LD_EXP 23
11798: IFFALSE 11815
// speaker := [ Denis ] else
11800: LD_ADDR_VAR 0 1
11804: PUSH
11805: LD_EXP 23
11809: PUSH
11810: EMPTY
11811: LIST
11812: ST_TO_ADDR
11813: GO 11921
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11815: LD_ADDR_VAR 0 1
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 7
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 23
11832: PUSH
11833: LD_INT 1
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 25
11842: PUSH
11843: LD_INT 4
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 21
11852: PUSH
11853: LD_INT 1
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 26
11862: PUSH
11863: LD_INT 1
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PUSH
11882: LD_EXP 18
11886: PUSH
11887: LD_EXP 17
11891: PUSH
11892: LD_EXP 49
11896: PUSH
11897: LD_EXP 37
11901: PUSH
11902: LD_EXP 47
11906: PUSH
11907: LD_EXP 46
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: DIFF
11920: ST_TO_ADDR
// if speaker then
11921: LD_VAR 0 1
11925: IFFALSE 11943
// Say ( speaker [ 1 ] , DArtefTechnology-Sci1-2 ) ;
11927: LD_VAR 0 1
11931: PUSH
11932: LD_INT 1
11934: ARRAY
11935: PPUSH
11936: LD_STRING DArtefTechnology-Sci1-2
11938: PPUSH
11939: CALL_OW 88
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11943: LD_ADDR_VAR 0 1
11947: PUSH
11948: LD_INT 22
11950: PUSH
11951: LD_INT 7
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 23
11960: PUSH
11961: LD_INT 3
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 25
11970: PUSH
11971: LD_INT 4
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 21
11980: PUSH
11981: LD_INT 1
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 26
11990: PUSH
11991: LD_INT 1
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 69
12009: PUSH
12010: LD_EXP 18
12014: PUSH
12015: LD_EXP 17
12019: PUSH
12020: LD_EXP 49
12024: PUSH
12025: LD_EXP 37
12029: PUSH
12030: LD_EXP 47
12034: PUSH
12035: LD_EXP 46
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: DIFF
12048: ST_TO_ADDR
// if speaker and ( artifactArCaptured or arabianDestroyed ) then
12049: LD_VAR 0 1
12053: PUSH
12054: LD_EXP 9
12058: PUSH
12059: LD_EXP 5
12063: OR
12064: AND
12065: IFFALSE 12299
// begin if arabianDestroyed and IsOk ( Burlak ) then
12067: LD_EXP 5
12071: PUSH
12072: LD_EXP 49
12076: PPUSH
12077: CALL_OW 302
12081: AND
12082: IFFALSE 12098
// Say ( Burlak , DArtefTechnology-Bur-2 ) else
12084: LD_EXP 49
12088: PPUSH
12089: LD_STRING DArtefTechnology-Bur-2
12091: PPUSH
12092: CALL_OW 88
12096: GO 12110
// Say ( JMM , DArtefTechnology-JMM-2 ) ;
12098: LD_EXP 17
12102: PPUSH
12103: LD_STRING DArtefTechnology-JMM-2
12105: PPUSH
12106: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnology-RSci1-3 ) ;
12110: LD_VAR 0 1
12114: PUSH
12115: LD_INT 1
12117: ARRAY
12118: PPUSH
12119: LD_STRING DArtefTechnology-RSci1-3
12121: PPUSH
12122: CALL_OW 88
// if Denis then
12126: LD_EXP 23
12130: IFFALSE 12147
// speaker := [ Denis ] else
12132: LD_ADDR_VAR 0 1
12136: PUSH
12137: LD_EXP 23
12141: PUSH
12142: EMPTY
12143: LIST
12144: ST_TO_ADDR
12145: GO 12253
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12147: LD_ADDR_VAR 0 1
12151: PUSH
12152: LD_INT 22
12154: PUSH
12155: LD_INT 7
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 23
12164: PUSH
12165: LD_INT 1
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 25
12174: PUSH
12175: LD_INT 4
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 1
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 26
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 69
12213: PUSH
12214: LD_EXP 18
12218: PUSH
12219: LD_EXP 17
12223: PUSH
12224: LD_EXP 49
12228: PUSH
12229: LD_EXP 37
12233: PUSH
12234: LD_EXP 47
12238: PUSH
12239: LD_EXP 46
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: DIFF
12252: ST_TO_ADDR
// if speaker then
12253: LD_VAR 0 1
12257: IFFALSE 12299
// if alienSpotted then
12259: LD_EXP 10
12263: IFFALSE 12283
// Say ( speaker [ 1 ] , DArtefTechnology-Sci1-3 ) else
12265: LD_VAR 0 1
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_STRING DArtefTechnology-Sci1-3
12276: PPUSH
12277: CALL_OW 88
12281: GO 12299
// Say ( speaker [ 1 ] , DArtefTechnology-Sci1-3a ) ;
12283: LD_VAR 0 1
12287: PUSH
12288: LD_INT 1
12290: ARRAY
12291: PPUSH
12292: LD_STRING DArtefTechnology-Sci1-3a
12294: PPUSH
12295: CALL_OW 88
// end ; DialogueOff ;
12299: CALL_OW 7
// end ;
12303: PPOPN 1
12305: END
// every 0 0$1 trigger artifactIResearched do var speaker ;
12306: LD_EXP 12
12310: IFFALSE 12505
12312: GO 12314
12314: DISABLE
12315: LD_INT 0
12317: PPUSH
// begin if Denis then
12318: LD_EXP 23
12322: IFFALSE 12339
// speaker := [ Denis ] else
12324: LD_ADDR_VAR 0 1
12328: PUSH
12329: LD_EXP 23
12333: PUSH
12334: EMPTY
12335: LIST
12336: ST_TO_ADDR
12337: GO 12445
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12339: LD_ADDR_VAR 0 1
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_INT 7
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 23
12356: PUSH
12357: LD_INT 1
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 25
12366: PUSH
12367: LD_INT 4
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 21
12376: PUSH
12377: LD_INT 1
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 26
12386: PUSH
12387: LD_INT 1
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 69
12405: PUSH
12406: LD_EXP 18
12410: PUSH
12411: LD_EXP 17
12415: PUSH
12416: LD_EXP 49
12420: PUSH
12421: LD_EXP 37
12425: PUSH
12426: LD_EXP 47
12430: PUSH
12431: LD_EXP 46
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: DIFF
12444: ST_TO_ADDR
// if not speaker then
12445: LD_VAR 0 1
12449: NOT
12450: IFFALSE 12454
// exit ;
12452: GO 12505
// Say ( speaker [ 1 ] , DArtefTechnologyAm-Sci1-1 ) ;
12454: LD_VAR 0 1
12458: PUSH
12459: LD_INT 1
12461: ARRAY
12462: PPUSH
12463: LD_STRING DArtefTechnologyAm-Sci1-1
12465: PPUSH
12466: CALL_OW 88
// if IsOk ( Burlak ) then
12470: LD_EXP 49
12474: PPUSH
12475: CALL_OW 302
12479: IFFALSE 12493
// Say ( Burlak , DArtefTechnologyAm-Bur-1 ) ;
12481: LD_EXP 49
12485: PPUSH
12486: LD_STRING DArtefTechnologyAm-Bur-1
12488: PPUSH
12489: CALL_OW 88
// Say ( JMM , DArtefTechnologyAm-JMM-1 ) ;
12493: LD_EXP 17
12497: PPUSH
12498: LD_STRING DArtefTechnologyAm-JMM-1
12500: PPUSH
12501: CALL_OW 88
// end ;
12505: PPOPN 1
12507: END
// every 0 0$1 trigger artifactIIResearched do var speaker ;
12508: LD_EXP 13
12512: IFFALSE 12702
12514: GO 12516
12516: DISABLE
12517: LD_INT 0
12519: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12520: LD_ADDR_VAR 0 1
12524: PUSH
12525: LD_INT 22
12527: PUSH
12528: LD_INT 7
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 23
12537: PUSH
12538: LD_INT 3
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 25
12547: PUSH
12548: LD_INT 4
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 1
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 26
12567: PUSH
12568: LD_INT 1
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: PPUSH
12582: CALL_OW 69
12586: PUSH
12587: LD_EXP 18
12591: PUSH
12592: LD_EXP 17
12596: PUSH
12597: LD_EXP 49
12601: PUSH
12602: LD_EXP 37
12606: PUSH
12607: LD_EXP 47
12611: PUSH
12612: LD_EXP 46
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: DIFF
12625: ST_TO_ADDR
// if not speaker then
12626: LD_VAR 0 1
12630: NOT
12631: IFFALSE 12635
// exit ;
12633: GO 12702
// Say ( speaker [ 1 ] , DArtefTechnologyRu-RSci1-1 ) ;
12635: LD_VAR 0 1
12639: PUSH
12640: LD_INT 1
12642: ARRAY
12643: PPUSH
12644: LD_STRING DArtefTechnologyRu-RSci1-1
12646: PPUSH
12647: CALL_OW 88
// if IsOk ( Burlak ) then
12651: LD_EXP 49
12655: PPUSH
12656: CALL_OW 302
12660: IFFALSE 12674
// Say ( Burlak , DArtefTechnologyRu-Bur-1 ) ;
12662: LD_EXP 49
12666: PPUSH
12667: LD_STRING DArtefTechnologyRu-Bur-1
12669: PPUSH
12670: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyRu-RSci1-2 ) ;
12674: LD_VAR 0 1
12678: PUSH
12679: LD_INT 1
12681: ARRAY
12682: PPUSH
12683: LD_STRING DArtefTechnologyRu-RSci1-2
12685: PPUSH
12686: CALL_OW 88
// Say ( JMM , DArtefTechnologyRu-JMM-1 ) ;
12690: LD_EXP 17
12694: PPUSH
12695: LD_STRING DArtefTechnologyRu-JMM-1
12697: PPUSH
12698: CALL_OW 88
// end ;
12702: PPOPN 1
12704: END
// every 0 0$1 trigger GetTech ( tech_Artifact , 7 ) = state_researched and GetSide ( alien ) = 7 do var speaker ;
12705: LD_INT 24
12707: PPUSH
12708: LD_INT 7
12710: PPUSH
12711: CALL_OW 321
12715: PUSH
12716: LD_INT 2
12718: EQUAL
12719: PUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 255
12727: PUSH
12728: LD_INT 7
12730: EQUAL
12731: AND
12732: IFFALSE 12892
12734: GO 12736
12736: DISABLE
12737: LD_INT 0
12739: PPUSH
// begin if Denis then
12740: LD_EXP 23
12744: IFFALSE 12761
// speaker := [ Denis ] else
12746: LD_ADDR_VAR 0 1
12750: PUSH
12751: LD_EXP 23
12755: PUSH
12756: EMPTY
12757: LIST
12758: ST_TO_ADDR
12759: GO 12867
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12761: LD_ADDR_VAR 0 1
12765: PUSH
12766: LD_INT 22
12768: PUSH
12769: LD_INT 7
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 23
12778: PUSH
12779: LD_INT 1
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 25
12788: PUSH
12789: LD_INT 4
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 21
12798: PUSH
12799: LD_INT 1
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 26
12808: PUSH
12809: LD_INT 1
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: PUSH
12828: LD_EXP 18
12832: PUSH
12833: LD_EXP 17
12837: PUSH
12838: LD_EXP 49
12842: PUSH
12843: LD_EXP 37
12847: PUSH
12848: LD_EXP 47
12852: PUSH
12853: LD_EXP 46
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: DIFF
12866: ST_TO_ADDR
// if not speaker then
12867: LD_VAR 0 1
12871: NOT
12872: IFFALSE 12876
// exit ;
12874: GO 12892
// Say ( speaker [ 1 ] , DArtefTechnologyArStart-Sci1-1 ) ;
12876: LD_VAR 0 1
12880: PUSH
12881: LD_INT 1
12883: ARRAY
12884: PPUSH
12885: LD_STRING DArtefTechnologyArStart-Sci1-1
12887: PPUSH
12888: CALL_OW 88
// end ;
12892: PPOPN 1
12894: END
// every 0 0$1 trigger artifactIIIResearched do var speaker ;
12895: LD_EXP 14
12899: IFFALSE 13180
12901: GO 12903
12903: DISABLE
12904: LD_INT 0
12906: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12907: LD_ADDR_VAR 0 1
12911: PUSH
12912: LD_INT 22
12914: PUSH
12915: LD_INT 7
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 23
12924: PUSH
12925: LD_INT 3
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 25
12934: PUSH
12935: LD_INT 4
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 26
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: PPUSH
12969: CALL_OW 69
12973: PUSH
12974: LD_EXP 18
12978: PUSH
12979: LD_EXP 17
12983: PUSH
12984: LD_EXP 49
12988: PUSH
12989: LD_EXP 37
12993: PUSH
12994: LD_EXP 47
12998: PUSH
12999: LD_EXP 46
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: DIFF
13012: ST_TO_ADDR
// if not speaker then
13013: LD_VAR 0 1
13017: NOT
13018: IFFALSE 13022
// exit ;
13020: GO 13180
// DialogueOn ;
13022: CALL_OW 6
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-1 ) ;
13026: LD_VAR 0 1
13030: PUSH
13031: LD_INT 1
13033: ARRAY
13034: PPUSH
13035: LD_STRING DArtefTechnologyAr-RSci1-1
13037: PPUSH
13038: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-1 ) ;
13042: LD_EXP 17
13046: PPUSH
13047: LD_STRING DArtefTechnologyAr-JMM-1
13049: PPUSH
13050: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-2 ) ;
13054: LD_VAR 0 1
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: LD_STRING DArtefTechnologyAr-RSci1-2
13065: PPUSH
13066: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-2 ) ;
13070: LD_EXP 17
13074: PPUSH
13075: LD_STRING DArtefTechnologyAr-JMM-2
13077: PPUSH
13078: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-3 ) ;
13082: LD_VAR 0 1
13086: PUSH
13087: LD_INT 1
13089: ARRAY
13090: PPUSH
13091: LD_STRING DArtefTechnologyAr-RSci1-3
13093: PPUSH
13094: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-3 ) ;
13098: LD_EXP 17
13102: PPUSH
13103: LD_STRING DArtefTechnologyAr-JMM-3
13105: PPUSH
13106: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-4 ) ;
13110: LD_VAR 0 1
13114: PUSH
13115: LD_INT 1
13117: ARRAY
13118: PPUSH
13119: LD_STRING DArtefTechnologyAr-RSci1-4
13121: PPUSH
13122: CALL_OW 88
// if IsOk ( Burlak ) then
13126: LD_EXP 49
13130: PPUSH
13131: CALL_OW 302
13135: IFFALSE 13149
// Say ( Burlak , DArtefTechnologyAr-Bur-4 ) ;
13137: LD_EXP 49
13141: PPUSH
13142: LD_STRING DArtefTechnologyAr-Bur-4
13144: PPUSH
13145: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-4 ) ;
13149: LD_EXP 17
13153: PPUSH
13154: LD_STRING DArtefTechnologyAr-JMM-4
13156: PPUSH
13157: CALL_OW 88
// DialogueOff ;
13161: CALL_OW 7
// wait ( 0 0$45 ) ;
13165: LD_INT 1575
13167: PPUSH
13168: CALL_OW 67
// spawnOmar := true ;
13172: LD_ADDR_EXP 11
13176: PUSH
13177: LD_INT 1
13179: ST_TO_ADDR
// end ;
13180: PPOPN 1
13182: END
// every 0 0$1 trigger spawnOmar do
13183: LD_EXP 11
13187: IFFALSE 13567
13189: GO 13191
13191: DISABLE
// begin PrepareOmarAli ;
13192: CALL 6705 0 0
// if not HasTask ( Omar ) then
13196: LD_EXP 53
13200: PPUSH
13201: CALL_OW 314
13205: NOT
13206: IFFALSE 13223
// ComMoveXY ( Omar , 252 , 220 ) ;
13208: LD_EXP 53
13212: PPUSH
13213: LD_INT 252
13215: PPUSH
13216: LD_INT 220
13218: PPUSH
13219: CALL_OW 111
// if not Omar then
13223: LD_EXP 53
13227: NOT
13228: IFFALSE 13232
// exit ;
13230: GO 13567
// repeat wait ( 0 0$1 ) ;
13232: LD_INT 35
13234: PPUSH
13235: CALL_OW 67
// if not HasTask ( Omar ) and GetDistUnitXY ( Omar , 252 , 220 ) > 6 then
13239: LD_EXP 53
13243: PPUSH
13244: CALL_OW 314
13248: NOT
13249: PUSH
13250: LD_EXP 53
13254: PPUSH
13255: LD_INT 252
13257: PPUSH
13258: LD_INT 220
13260: PPUSH
13261: CALL_OW 297
13265: PUSH
13266: LD_INT 6
13268: GREATER
13269: AND
13270: IFFALSE 13287
// ComMoveXY ( Omar , 252 , 220 ) ;
13272: LD_EXP 53
13276: PPUSH
13277: LD_INT 252
13279: PPUSH
13280: LD_INT 220
13282: PPUSH
13283: CALL_OW 111
// until See ( 7 , Omar ) ;
13287: LD_INT 7
13289: PPUSH
13290: LD_EXP 53
13294: PPUSH
13295: CALL_OW 292
13299: IFFALSE 13232
// CenterNowOnUnits ( Omar ) ;
13301: LD_EXP 53
13305: PPUSH
13306: CALL_OW 87
// DialogueOn ;
13310: CALL_OW 6
// Say ( Omar , DOmar-Omar-1 ) ;
13314: LD_EXP 53
13318: PPUSH
13319: LD_STRING DOmar-Omar-1
13321: PPUSH
13322: CALL_OW 88
// Say ( JMM , DOmar-JMM-1 ) ;
13326: LD_EXP 17
13330: PPUSH
13331: LD_STRING DOmar-JMM-1
13333: PPUSH
13334: CALL_OW 88
// Say ( Omar , DOmar-Omar-2 ) ;
13338: LD_EXP 53
13342: PPUSH
13343: LD_STRING DOmar-Omar-2
13345: PPUSH
13346: CALL_OW 88
// Say ( JMM , DOmar-JMM-2 ) ;
13350: LD_EXP 17
13354: PPUSH
13355: LD_STRING DOmar-JMM-2
13357: PPUSH
13358: CALL_OW 88
// Say ( Omar , DOmar-Omar-3 ) ;
13362: LD_EXP 53
13366: PPUSH
13367: LD_STRING DOmar-Omar-3
13369: PPUSH
13370: CALL_OW 88
// if IsOk ( Burlak ) then
13374: LD_EXP 49
13378: PPUSH
13379: CALL_OW 302
13383: IFFALSE 13399
// Say ( Burlak , DOmar-Bur-3 ) else
13385: LD_EXP 49
13389: PPUSH
13390: LD_STRING DOmar-Bur-3
13392: PPUSH
13393: CALL_OW 88
13397: GO 13411
// Say ( JMM , DOmar-JMM-3 ) ;
13399: LD_EXP 17
13403: PPUSH
13404: LD_STRING DOmar-JMM-3
13406: PPUSH
13407: CALL_OW 88
// Say ( Omar , DOmar-Omar-4 ) ;
13411: LD_EXP 53
13415: PPUSH
13416: LD_STRING DOmar-Omar-4
13418: PPUSH
13419: CALL_OW 88
// case Query ( QAccept ) of 1 :
13423: LD_STRING QAccept
13425: PPUSH
13426: CALL_OW 97
13430: PUSH
13431: LD_INT 1
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13475
13439: POP
// begin Say ( JMM , DQrAccept#1-JMM-1 ) ;
13440: LD_EXP 17
13444: PPUSH
13445: LD_STRING DQrAccept#1-JMM-1
13447: PPUSH
13448: CALL_OW 88
// SetSide ( Omar , 7 ) ;
13452: LD_EXP 53
13456: PPUSH
13457: LD_INT 7
13459: PPUSH
13460: CALL_OW 235
// ComStop ( Omar ) ;
13464: LD_EXP 53
13468: PPUSH
13469: CALL_OW 141
// end ; 2 :
13473: GO 13524
13475: LD_INT 2
13477: DOUBLE
13478: EQUAL
13479: IFTRUE 13483
13481: GO 13523
13483: POP
// begin if IsOk ( Burlak ) then
13484: LD_EXP 49
13488: PPUSH
13489: CALL_OW 302
13493: IFFALSE 13509
// Say ( Burlak , DQrAccept#2-Bur-1 ) else
13495: LD_EXP 49
13499: PPUSH
13500: LD_STRING DQrAccept#2-Bur-1
13502: PPUSH
13503: CALL_OW 88
13507: GO 13521
// Say ( JMM , DQrAccept#2-JMM-1 ) ;
13509: LD_EXP 17
13513: PPUSH
13514: LD_STRING DQrAccept#2-JMM-1
13516: PPUSH
13517: CALL_OW 88
// end ; end ;
13521: GO 13524
13523: POP
// DialogueOff ;
13524: CALL_OW 7
// if GetSide ( Omar ) = 7 then
13528: LD_EXP 53
13532: PPUSH
13533: CALL_OW 255
13537: PUSH
13538: LD_INT 7
13540: EQUAL
13541: IFFALSE 13552
// begin SetAchievement ( ACH_OMAR ) ;
13543: LD_STRING ACH_OMAR
13545: PPUSH
13546: CALL_OW 543
// exit ;
13550: GO 13567
// end ; ComMoveXY ( Omar , 202 , 115 ) ;
13552: LD_EXP 53
13556: PPUSH
13557: LD_INT 202
13559: PPUSH
13560: LD_INT 115
13562: PPUSH
13563: CALL_OW 111
// end ;
13567: END
// every 0 0$1 trigger GetDistUnitXY ( Omar , 200 , 98 ) < 40 and russianDestroyed do
13568: LD_EXP 53
13572: PPUSH
13573: LD_INT 200
13575: PPUSH
13576: LD_INT 98
13578: PPUSH
13579: CALL_OW 297
13583: PUSH
13584: LD_INT 40
13586: LESS
13587: PUSH
13588: LD_EXP 2
13592: AND
13593: IFFALSE 13811
13595: GO 13597
13597: DISABLE
// begin SetSide ( Omar , 5 ) ;
13598: LD_EXP 53
13602: PPUSH
13603: LD_INT 5
13605: PPUSH
13606: CALL_OW 235
// if IsInUnit ( Omar ) then
13610: LD_EXP 53
13614: PPUSH
13615: CALL_OW 310
13619: IFFALSE 13630
// ComExitVehicle ( Omar ) ;
13621: LD_EXP 53
13625: PPUSH
13626: CALL_OW 121
// if IsInUnit ( Omar ) then
13630: LD_EXP 53
13634: PPUSH
13635: CALL_OW 310
13639: IFFALSE 13650
// ComExitBuilding ( Omar ) ;
13641: LD_EXP 53
13645: PPUSH
13646: CALL_OW 122
// wait ( 0 0$1 ) ;
13650: LD_INT 35
13652: PPUSH
13653: CALL_OW 67
// ComMoveXY ( Omar , 203 , 120 ) ;
13657: LD_EXP 53
13661: PPUSH
13662: LD_INT 203
13664: PPUSH
13665: LD_INT 120
13667: PPUSH
13668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13672: LD_INT 35
13674: PPUSH
13675: CALL_OW 67
// until IsSelected ( Omar ) or GetDistUnitXY ( Omar , 203 , 120 ) < 6 ;
13679: LD_EXP 53
13683: PPUSH
13684: CALL_OW 306
13688: PUSH
13689: LD_EXP 53
13693: PPUSH
13694: LD_INT 203
13696: PPUSH
13697: LD_INT 120
13699: PPUSH
13700: CALL_OW 297
13704: PUSH
13705: LD_INT 6
13707: LESS
13708: OR
13709: IFFALSE 13672
// CenterNowOnUnits ( Omar ) ;
13711: LD_EXP 53
13715: PPUSH
13716: CALL_OW 87
// DialogueOn ;
13720: CALL_OW 6
// Say ( JMM , DOmarContam-JMM-1 ) ;
13724: LD_EXP 17
13728: PPUSH
13729: LD_STRING DOmarContam-JMM-1
13731: PPUSH
13732: CALL_OW 88
// Say ( Omar , DOmarContam-Omar-1 ) ;
13736: LD_EXP 53
13740: PPUSH
13741: LD_STRING DOmarContam-Omar-1
13743: PPUSH
13744: CALL_OW 88
// Say ( JMM , DOmarContam-JMM-2 ) ;
13748: LD_EXP 17
13752: PPUSH
13753: LD_STRING DOmarContam-JMM-2
13755: PPUSH
13756: CALL_OW 88
// DialogueOff ;
13760: CALL_OW 7
// SetAttitude ( 5 , 7 , att_enemy , true ) ;
13764: LD_INT 5
13766: PPUSH
13767: LD_INT 7
13769: PPUSH
13770: LD_INT 2
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 80
// repeat wait ( 0 0$3 ) ;
13780: LD_INT 105
13782: PPUSH
13783: CALL_OW 67
// until IsAt ( Omar , 203 , 120 ) ;
13787: LD_EXP 53
13791: PPUSH
13792: LD_INT 203
13794: PPUSH
13795: LD_INT 120
13797: PPUSH
13798: CALL_OW 307
13802: IFFALSE 13780
// YouLost ( MothContaminate ) ;
13804: LD_STRING MothContaminate
13806: PPUSH
13807: CALL_OW 104
// end ;
13811: END
// every 0 0$2 trigger not americanDestroyed and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) do
13812: LD_EXP 4
13816: NOT
13817: PUSH
13818: LD_INT 22
13820: PUSH
13821: LD_INT 1
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 34
13830: PUSH
13831: LD_INT 8
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: AND
13847: IFFALSE 13928
13849: GO 13851
13851: DISABLE
// begin if not IsOk ( Powell ) then
13852: LD_EXP 52
13856: PPUSH
13857: CALL_OW 302
13861: NOT
13862: IFFALSE 13866
// exit ;
13864: GO 13928
// DialogueOn ;
13866: CALL_OW 6
// SayRadio ( Powell , DWinAmericans-Pow-1 ) ;
13870: LD_EXP 52
13874: PPUSH
13875: LD_STRING DWinAmericans-Pow-1
13877: PPUSH
13878: CALL_OW 94
// if IsOk ( Burlak ) then
13882: LD_EXP 49
13886: PPUSH
13887: CALL_OW 302
13891: IFFALSE 13905
// Say ( Burlak , DWinAmericans-Bur-1 ) ;
13893: LD_EXP 49
13897: PPUSH
13898: LD_STRING DWinAmericans-Bur-1
13900: PPUSH
13901: CALL_OW 88
// Say ( JMM , DWinAmericans-JMM-1 ) ;
13905: LD_EXP 17
13909: PPUSH
13910: LD_STRING DWinAmericans-JMM-1
13912: PPUSH
13913: CALL_OW 88
// DialogueOff ;
13917: CALL_OW 7
// YouLost ( AmBomb ) ;
13921: LD_STRING AmBomb
13923: PPUSH
13924: CALL_OW 104
// end ;
13928: END
// every 0 0$2 trigger not russianDestroyed and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) do
13929: LD_EXP 2
13933: NOT
13934: PUSH
13935: LD_INT 22
13937: PUSH
13938: LD_INT 3
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 34
13947: PUSH
13948: LD_INT 48
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PPUSH
13959: CALL_OW 69
13963: AND
13964: IFFALSE 14045
13966: GO 13968
13968: DISABLE
// begin if not IsOk ( Platonov ) then
13969: LD_EXP 56
13973: PPUSH
13974: CALL_OW 302
13978: NOT
13979: IFFALSE 13983
// exit ;
13981: GO 14045
// DialogueOn ;
13983: CALL_OW 6
// SayRadio ( Platonov , DWinRussians-Pla-1 ) ;
13987: LD_EXP 56
13991: PPUSH
13992: LD_STRING DWinRussians-Pla-1
13994: PPUSH
13995: CALL_OW 94
// if IsOk ( Burlak ) then
13999: LD_EXP 49
14003: PPUSH
14004: CALL_OW 302
14008: IFFALSE 14022
// Say ( Burlak , DWinRussians-Bur-1 ) ;
14010: LD_EXP 49
14014: PPUSH
14015: LD_STRING DWinRussians-Bur-1
14017: PPUSH
14018: CALL_OW 88
// Say ( JMM , DWinRussians-JMM-1 ) ;
14022: LD_EXP 17
14026: PPUSH
14027: LD_STRING DWinRussians-JMM-1
14029: PPUSH
14030: CALL_OW 88
// DialogueOff ;
14034: CALL_OW 7
// YouLost ( RuBomb ) ;
14038: LD_STRING RuBomb
14040: PPUSH
14041: CALL_OW 104
// end ;
14045: END
// every 0 0$20 trigger FilterUnitsInArea ( powellBase , [ f_side , 7 ] ) and not americanDestroyed do
14046: LD_INT 7
14048: PPUSH
14049: LD_INT 22
14051: PUSH
14052: LD_INT 7
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 70
14063: PUSH
14064: LD_EXP 4
14068: NOT
14069: AND
14070: IFFALSE 14099
14072: GO 14074
14074: DISABLE
// begin SayRadio ( Powell , DSurrenderAmericans-Pow-1 ) ;
14075: LD_EXP 52
14079: PPUSH
14080: LD_STRING DSurrenderAmericans-Pow-1
14082: PPUSH
14083: CALL_OW 94
// Say ( JMM , DSurrenderAmericans-JMM-1 ) ;
14087: LD_EXP 17
14091: PPUSH
14092: LD_STRING DSurrenderAmericans-JMM-1
14094: PPUSH
14095: CALL_OW 88
// end ;
14099: END
// every 0 0$20 trigger FilterUnitsInArea ( russianBaseArea , [ f_side , 7 ] ) and not russianDestroyed and Burlak do
14100: LD_INT 2
14102: PPUSH
14103: LD_INT 22
14105: PUSH
14106: LD_INT 7
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 70
14117: PUSH
14118: LD_EXP 2
14122: NOT
14123: AND
14124: PUSH
14125: LD_EXP 49
14129: AND
14130: IFFALSE 14159
14132: GO 14134
14134: DISABLE
// begin SayRadio ( Platonov , DSurrenderRussians-Pla-1 ) ;
14135: LD_EXP 56
14139: PPUSH
14140: LD_STRING DSurrenderRussians-Pla-1
14142: PPUSH
14143: CALL_OW 94
// Say ( Burlak , DSurrenderRussians-Bur-1 ) ;
14147: LD_EXP 49
14151: PPUSH
14152: LD_STRING DSurrenderRussians-Bur-1
14154: PPUSH
14155: CALL_OW 88
// end ;
14159: END
// every 0 0$2 + 0 0$5 trigger americanDestroyed do var i , tmp , speaker ;
14160: LD_EXP 4
14164: IFFALSE 14547
14166: GO 14168
14168: DISABLE
14169: LD_INT 0
14171: PPUSH
14172: PPUSH
14173: PPUSH
// begin MC_Kill ( 4 ) ;
14174: LD_INT 4
14176: PPUSH
14177: CALL 20742 0 1
// SetAttitude ( 1 , 7 , att_friend , true ) ;
14181: LD_INT 1
14183: PPUSH
14184: LD_INT 7
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: LD_INT 1
14192: PPUSH
14193: CALL_OW 80
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ Powell , Gladstone , Cyrus , Bobby , Gary , Houten ] ;
14197: LD_ADDR_VAR 0 3
14201: PUSH
14202: LD_INT 22
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 26
14214: PUSH
14215: LD_INT 1
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 23
14224: PUSH
14225: LD_INT 1
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 69
14241: PUSH
14242: LD_EXP 52
14246: PUSH
14247: LD_EXP 25
14251: PUSH
14252: LD_EXP 22
14256: PUSH
14257: LD_EXP 21
14261: PUSH
14262: LD_EXP 28
14266: PUSH
14267: LD_EXP 26
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: DIFF
14280: ST_TO_ADDR
// if speaker then
14281: LD_VAR 0 3
14285: IFFALSE 14311
// begin DialogueOn ;
14287: CALL_OW 6
// SayRadio ( speaker [ 1 ] , DSurrenderAmericans-Sol1-1a ) ;
14291: LD_VAR 0 3
14295: PUSH
14296: LD_INT 1
14298: ARRAY
14299: PPUSH
14300: LD_STRING DSurrenderAmericans-Sol1-1a
14302: PPUSH
14303: CALL_OW 94
// DialogueOff ;
14307: CALL_OW 7
// end ; americanCapitulated := true ;
14311: LD_ADDR_EXP 6
14315: PUSH
14316: LD_INT 1
14318: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
14319: LD_ADDR_VAR 0 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 21
14336: PUSH
14337: LD_INT 1
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PPUSH
14348: CALL_OW 69
14352: PUSH
14353: LD_INT 22
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 21
14365: PUSH
14366: LD_INT 2
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 1
14375: PUSH
14376: EMPTY
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 69
14388: ADD
14389: ST_TO_ADDR
// if tmp then
14390: LD_VAR 0 2
14394: IFFALSE 14547
// repeat wait ( 0 0$1 ) ;
14396: LD_INT 35
14398: PPUSH
14399: CALL_OW 67
// for i in tmp do
14403: LD_ADDR_VAR 0 1
14407: PUSH
14408: LD_VAR 0 2
14412: PUSH
14413: FOR_IN
14414: IFFALSE 14496
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 310
14425: PUSH
14426: LD_VAR 0 1
14430: PPUSH
14431: CALL_OW 310
14435: PPUSH
14436: CALL_OW 247
14440: PUSH
14441: LD_INT 3
14443: EQUAL
14444: AND
14445: IFFALSE 14456
// ComExitBuilding ( i ) ;
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 122
// AddComMoveXY ( i , 122 , 242 ) ;
14456: LD_VAR 0 1
14460: PPUSH
14461: LD_INT 122
14463: PPUSH
14464: LD_INT 242
14466: PPUSH
14467: CALL_OW 171
// if IsInArea ( i , americanEscape ) then
14471: LD_VAR 0 1
14475: PPUSH
14476: LD_INT 35
14478: PPUSH
14479: CALL_OW 308
14483: IFFALSE 14494
// RemoveUnit ( i ) ;
14485: LD_VAR 0 1
14489: PPUSH
14490: CALL_OW 64
// end ;
14494: GO 14413
14496: POP
14497: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
14498: LD_INT 22
14500: PUSH
14501: LD_INT 1
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: LD_INT 21
14513: PUSH
14514: LD_INT 1
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 33
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 69
14544: NOT
14545: IFFALSE 14396
// end ;
14547: PPOPN 3
14549: END
// every 0 0$2 + 0 0$5 trigger russianDestroyed do var i , tmp , speaker ;
14550: LD_EXP 2
14554: IFFALSE 14955
14556: GO 14558
14558: DISABLE
14559: LD_INT 0
14561: PPUSH
14562: PPUSH
14563: PPUSH
// begin repeat wait ( 0 0$1 ) ;
14564: LD_INT 35
14566: PPUSH
14567: CALL_OW 67
// until IsDead ( Yakotich ) ;
14571: LD_EXP 57
14575: PPUSH
14576: CALL_OW 301
14580: IFFALSE 14564
// MC_Kill ( 2 ) ;
14582: LD_INT 2
14584: PPUSH
14585: CALL 20742 0 1
// SetAttitude ( 3 , 7 , att_friend , true ) ;
14589: LD_INT 3
14591: PPUSH
14592: LD_INT 7
14594: PPUSH
14595: LD_INT 1
14597: PPUSH
14598: LD_INT 1
14600: PPUSH
14601: CALL_OW 80
// speaker := FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] , [ f_nation , 3 ] ] ) diff [ Platonov , Yakotich ] ;
14605: LD_ADDR_VAR 0 3
14609: PUSH
14610: LD_INT 22
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 26
14622: PUSH
14623: LD_INT 1
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 23
14632: PUSH
14633: LD_INT 3
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: LIST
14644: PPUSH
14645: CALL_OW 69
14649: PUSH
14650: LD_EXP 56
14654: PUSH
14655: LD_EXP 57
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: DIFF
14664: ST_TO_ADDR
// if speaker then
14665: LD_VAR 0 3
14669: IFFALSE 14719
// begin DialogueOn ;
14671: CALL_OW 6
// if Burlak then
14675: LD_EXP 49
14679: IFFALSE 14699
// SayRadio ( speaker [ 1 ] , DSurrenderRussians-RSol1-1 ) else
14681: LD_VAR 0 3
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PPUSH
14690: LD_STRING DSurrenderRussians-RSol1-1
14692: PPUSH
14693: CALL_OW 94
14697: GO 14715
// SayRadio ( speaker [ 1 ] , DSurrenderRussians-RSol1-1a ) ;
14699: LD_VAR 0 3
14703: PUSH
14704: LD_INT 1
14706: ARRAY
14707: PPUSH
14708: LD_STRING DSurrenderRussians-RSol1-1a
14710: PPUSH
14711: CALL_OW 94
// DialogueOff ;
14715: CALL_OW 7
// end ; russianCapitulated := true ;
14719: LD_ADDR_EXP 7
14723: PUSH
14724: LD_INT 1
14726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
14727: LD_ADDR_VAR 0 2
14731: PUSH
14732: LD_INT 22
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 21
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 69
14760: PUSH
14761: LD_INT 22
14763: PUSH
14764: LD_INT 3
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: LD_INT 21
14773: PUSH
14774: LD_INT 2
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: EMPTY
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: ADD
14797: ST_TO_ADDR
// if tmp then
14798: LD_VAR 0 2
14802: IFFALSE 14955
// repeat wait ( 0 0$1 ) ;
14804: LD_INT 35
14806: PPUSH
14807: CALL_OW 67
// for i in tmp do
14811: LD_ADDR_VAR 0 1
14815: PUSH
14816: LD_VAR 0 2
14820: PUSH
14821: FOR_IN
14822: IFFALSE 14904
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
14824: LD_VAR 0 1
14828: PPUSH
14829: CALL_OW 310
14833: PUSH
14834: LD_VAR 0 1
14838: PPUSH
14839: CALL_OW 310
14843: PPUSH
14844: CALL_OW 247
14848: PUSH
14849: LD_INT 3
14851: EQUAL
14852: AND
14853: IFFALSE 14864
// ComExitBuilding ( i ) ;
14855: LD_VAR 0 1
14859: PPUSH
14860: CALL_OW 122
// AddComMoveXY ( i , 154 , 1 ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: LD_INT 154
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: CALL_OW 171
// if IsInArea ( i , russianEscape ) then
14879: LD_VAR 0 1
14883: PPUSH
14884: LD_INT 36
14886: PPUSH
14887: CALL_OW 308
14891: IFFALSE 14902
// RemoveUnit ( i ) ;
14893: LD_VAR 0 1
14897: PPUSH
14898: CALL_OW 64
// end ;
14902: GO 14821
14904: POP
14905: POP
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
14906: LD_INT 22
14908: PUSH
14909: LD_INT 3
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: LD_INT 2
14918: PUSH
14919: LD_INT 21
14921: PUSH
14922: LD_INT 1
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 33
14931: PUSH
14932: LD_INT 1
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PPUSH
14948: CALL_OW 69
14952: NOT
14953: IFFALSE 14804
// end ;
14955: PPOPN 3
14957: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) < 18 or IsDead ( Kozlov ) or GetSide ( ar_depot1 ) = 7 do
14958: LD_INT 22
14960: PUSH
14961: LD_INT 8
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 21
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 23
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: PPUSH
14993: CALL_OW 69
14997: PUSH
14998: LD_INT 18
15000: LESS
15001: PUSH
15002: LD_EXP 55
15006: PPUSH
15007: CALL_OW 301
15011: OR
15012: PUSH
15013: LD_INT 324
15015: PPUSH
15016: CALL_OW 255
15020: PUSH
15021: LD_INT 7
15023: EQUAL
15024: OR
15025: IFFALSE 15038
15027: GO 15029
15029: DISABLE
// legionDestroyed := true ;
15030: LD_ADDR_EXP 3
15034: PUSH
15035: LD_INT 1
15037: ST_TO_ADDR
15038: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) < 9 do
15039: LD_INT 22
15041: PUSH
15042: LD_INT 2
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 21
15051: PUSH
15052: LD_INT 1
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 23
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 69
15078: PUSH
15079: LD_INT 9
15081: LESS
15082: IFFALSE 15095
15084: GO 15086
15086: DISABLE
// arabianDestroyed := true ;
15087: LD_ADDR_EXP 5
15091: PUSH
15092: LD_INT 1
15094: ST_TO_ADDR
15095: END
// every 0 0$1 trigger arabianDestroyed do var i , tmp ;
15096: LD_EXP 5
15100: IFFALSE 15344
15102: GO 15104
15104: DISABLE
15105: LD_INT 0
15107: PPUSH
15108: PPUSH
// begin MC_Kill ( 1 ) ;
15109: LD_INT 1
15111: PPUSH
15112: CALL 20742 0 1
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
15116: LD_ADDR_VAR 0 2
15120: PUSH
15121: LD_INT 22
15123: PUSH
15124: LD_INT 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 21
15133: PUSH
15134: LD_INT 1
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PPUSH
15145: CALL_OW 69
15149: PUSH
15150: LD_INT 22
15152: PUSH
15153: LD_INT 8
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 21
15162: PUSH
15163: LD_INT 2
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: PPUSH
15181: CALL_OW 69
15185: ADD
15186: ST_TO_ADDR
// if tmp then
15187: LD_VAR 0 2
15191: IFFALSE 15344
// repeat wait ( 0 0$1 ) ;
15193: LD_INT 35
15195: PPUSH
15196: CALL_OW 67
// for i in tmp do
15200: LD_ADDR_VAR 0 1
15204: PUSH
15205: LD_VAR 0 2
15209: PUSH
15210: FOR_IN
15211: IFFALSE 15293
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
15213: LD_VAR 0 1
15217: PPUSH
15218: CALL_OW 310
15222: PUSH
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL_OW 310
15232: PPUSH
15233: CALL_OW 247
15237: PUSH
15238: LD_INT 3
15240: EQUAL
15241: AND
15242: IFFALSE 15253
// ComExitBuilding ( i ) ;
15244: LD_VAR 0 1
15248: PPUSH
15249: CALL_OW 122
// AddComMoveXY ( i , 254 , 268 ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: LD_INT 254
15260: PPUSH
15261: LD_INT 268
15263: PPUSH
15264: CALL_OW 171
// if IsInArea ( i , arabEscape ) then
15268: LD_VAR 0 1
15272: PPUSH
15273: LD_INT 34
15275: PPUSH
15276: CALL_OW 308
15280: IFFALSE 15291
// RemoveUnit ( i ) ;
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 64
// end ;
15291: GO 15210
15293: POP
15294: POP
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
15295: LD_INT 22
15297: PUSH
15298: LD_INT 2
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 21
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 33
15320: PUSH
15321: LD_INT 1
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PPUSH
15337: CALL_OW 69
15341: NOT
15342: IFFALSE 15193
// end ;
15344: PPOPN 2
15346: END
// every 0 0$1 trigger legionDestroyed do var i , tmp ;
15347: LD_EXP 3
15351: IFFALSE 15703
15353: GO 15355
15355: DISABLE
15356: LD_INT 0
15358: PPUSH
15359: PPUSH
// begin MC_Kill ( 3 ) ;
15360: LD_INT 3
15362: PPUSH
15363: CALL 20742 0 1
// SetAttitude ( 8 , 7 , att_friend , true ) ;
15367: LD_INT 8
15369: PPUSH
15370: LD_INT 7
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: LD_INT 1
15378: PPUSH
15379: CALL_OW 80
// DialogueOn ;
15383: CALL_OW 6
// SayRadio ( Schulz , D15-Szulc-1 ) ;
15387: LD_EXP 54
15391: PPUSH
15392: LD_STRING D15-Szulc-1
15394: PPUSH
15395: CALL_OW 94
// DialogueOff ;
15399: CALL_OW 7
// legionCapitulated := true ;
15403: LD_ADDR_EXP 8
15407: PUSH
15408: LD_INT 1
15410: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
15411: LD_ADDR_VAR 0 1
15415: PUSH
15416: LD_INT 22
15418: PUSH
15419: LD_INT 8
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 3
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 23
15438: PUSH
15439: LD_INT 3
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: FOR_IN
15457: IFFALSE 15473
// SetLives ( i , 3 ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: LD_INT 3
15466: PPUSH
15467: CALL_OW 234
15471: GO 15456
15473: POP
15474: POP
// tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: LD_INT 22
15482: PUSH
15483: LD_INT 8
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 21
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: PUSH
15509: LD_INT 22
15511: PUSH
15512: LD_INT 8
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 21
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: ADD
15545: ST_TO_ADDR
// if tmp then
15546: LD_VAR 0 2
15550: IFFALSE 15703
// repeat wait ( 0 0$1 ) ;
15552: LD_INT 35
15554: PPUSH
15555: CALL_OW 67
// for i in tmp do
15559: LD_ADDR_VAR 0 1
15563: PUSH
15564: LD_VAR 0 2
15568: PUSH
15569: FOR_IN
15570: IFFALSE 15652
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
15572: LD_VAR 0 1
15576: PPUSH
15577: CALL_OW 310
15581: PUSH
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 310
15591: PPUSH
15592: CALL_OW 247
15596: PUSH
15597: LD_INT 3
15599: EQUAL
15600: AND
15601: IFFALSE 15612
// ComExitBuilding ( i ) ;
15603: LD_VAR 0 1
15607: PPUSH
15608: CALL_OW 122
// AddComMoveXY ( i , 10 , 1 ) ;
15612: LD_VAR 0 1
15616: PPUSH
15617: LD_INT 10
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: CALL_OW 171
// if IsInArea ( i , legionEscape ) then
15627: LD_VAR 0 1
15631: PPUSH
15632: LD_INT 32
15634: PPUSH
15635: CALL_OW 308
15639: IFFALSE 15650
// RemoveUnit ( i ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: CALL_OW 64
// end ;
15650: GO 15569
15652: POP
15653: POP
// until not FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
15654: LD_INT 22
15656: PUSH
15657: LD_INT 8
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 2
15666: PUSH
15667: LD_INT 21
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 33
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 69
15700: NOT
15701: IFFALSE 15552
// end ;
15703: PPOPN 2
15705: END
// every 0 0$10 trigger americanDestroyed and russianDestroyed and legionDestroyed and arabianDestroyed and americanCapitulated and russianCapitulated and legionCapitulated do var med1 , med2 ;
15706: LD_EXP 4
15710: PUSH
15711: LD_EXP 2
15715: AND
15716: PUSH
15717: LD_EXP 3
15721: AND
15722: PUSH
15723: LD_EXP 5
15727: AND
15728: PUSH
15729: LD_EXP 6
15733: AND
15734: PUSH
15735: LD_EXP 7
15739: AND
15740: PUSH
15741: LD_EXP 8
15745: AND
15746: IFFALSE 17130
15748: GO 15750
15750: DISABLE
15751: LD_INT 0
15753: PPUSH
15754: PPUSH
// begin music_class := 5 ;
15755: LD_ADDR_OWVAR 72
15759: PUSH
15760: LD_INT 5
15762: ST_TO_ADDR
// music_nat := 5 ;
15763: LD_ADDR_OWVAR 71
15767: PUSH
15768: LD_INT 5
15770: ST_TO_ADDR
// if vehicleLostCounter < 3 then
15771: LD_EXP 15
15775: PUSH
15776: LD_INT 3
15778: LESS
15779: IFFALSE 15788
// SetAchievement ( ACH_ECONOMY ) ;
15781: LD_STRING ACH_ECONOMY
15783: PPUSH
15784: CALL_OW 543
// if tick < 60 60$00 then
15788: LD_OWVAR 1
15792: PUSH
15793: LD_INT 126000
15795: LESS
15796: IFFALSE 15812
// begin wait ( 3 ) ;
15798: LD_INT 3
15800: PPUSH
15801: CALL_OW 67
// SetAchievement ( ACH_ASPEED_19 ) ;
15805: LD_STRING ACH_ASPEED_19
15807: PPUSH
15808: CALL_OW 543
// end ; CenterNowOnUnits ( JMM ) ;
15812: LD_EXP 17
15816: PPUSH
15817: CALL_OW 87
// InGameOn ;
15821: CALL_OW 8
// DialogueOn ;
15825: CALL_OW 6
// Say ( JMM , DEnd-JMM-JMM-1 ) ;
15829: LD_EXP 17
15833: PPUSH
15834: LD_STRING DEnd-JMM-JMM-1
15836: PPUSH
15837: CALL_OW 88
// if Joan then
15841: LD_EXP 32
15845: IFFALSE 15861
// Say ( Joan , DEnd-JMM-Joan-1 ) else
15847: LD_EXP 32
15851: PPUSH
15852: LD_STRING DEnd-JMM-Joan-1
15854: PPUSH
15855: CALL_OW 88
15859: GO 15905
// if Lisa and GetSide ( Lisa ) = 7 and IsPlaced ( Lisa ) then
15861: LD_EXP 19
15865: PUSH
15866: LD_EXP 19
15870: PPUSH
15871: CALL_OW 255
15875: PUSH
15876: LD_INT 7
15878: EQUAL
15879: AND
15880: PUSH
15881: LD_EXP 19
15885: PPUSH
15886: CALL_OW 305
15890: AND
15891: IFFALSE 15905
// Say ( Lisa , DEnd-JMM-Lisa-1 ) ;
15893: LD_EXP 19
15897: PPUSH
15898: LD_STRING DEnd-JMM-Lisa-1
15900: PPUSH
15901: CALL_OW 88
// if Frank and IsPlaced ( Frank ) then
15905: LD_EXP 29
15909: PUSH
15910: LD_EXP 29
15914: PPUSH
15915: CALL_OW 305
15919: AND
15920: IFFALSE 15934
// Say ( Frank , DEnd-JMM-Frank-1 ) ;
15922: LD_EXP 29
15926: PPUSH
15927: LD_STRING DEnd-JMM-Frank-1
15929: PPUSH
15930: CALL_OW 88
// if Cyrus and GetSide ( Cyrus ) = 7 and IsPlaced ( Cyrus ) then
15934: LD_EXP 22
15938: PUSH
15939: LD_EXP 22
15943: PPUSH
15944: CALL_OW 255
15948: PUSH
15949: LD_INT 7
15951: EQUAL
15952: AND
15953: PUSH
15954: LD_EXP 22
15958: PPUSH
15959: CALL_OW 305
15963: AND
15964: IFFALSE 15978
// Say ( Cyrus , DEnd-JMM-Cyrus-1 ) ;
15966: LD_EXP 22
15970: PPUSH
15971: LD_STRING DEnd-JMM-Cyrus-1
15973: PPUSH
15974: CALL_OW 88
// if Burlak then
15978: LD_EXP 49
15982: IFFALSE 15996
// Say ( Burlak , DEnd-JMM-Bur-1 ) ;
15984: LD_EXP 49
15988: PPUSH
15989: LD_STRING DEnd-JMM-Bur-1
15991: PPUSH
15992: CALL_OW 88
// if Joan and Lisa and GetSide ( Lisa ) = 7 and IsPlaced ( Lisa ) then
15996: LD_EXP 32
16000: PUSH
16001: LD_EXP 19
16005: AND
16006: PUSH
16007: LD_EXP 19
16011: PPUSH
16012: CALL_OW 255
16016: PUSH
16017: LD_INT 7
16019: EQUAL
16020: AND
16021: PUSH
16022: LD_EXP 19
16026: PPUSH
16027: CALL_OW 305
16031: AND
16032: IFFALSE 16046
// Say ( Lisa , DEnd-Burlak-Lisa-1 ) ;
16034: LD_EXP 19
16038: PPUSH
16039: LD_STRING DEnd-Burlak-Lisa-1
16041: PPUSH
16042: CALL_OW 88
// if Belkov and IsPlaced ( Belkov ) then
16046: LD_EXP 50
16050: PUSH
16051: LD_EXP 50
16055: PPUSH
16056: CALL_OW 305
16060: AND
16061: IFFALSE 16075
// Say ( Belkov , DEnd-JMM-Bel-1 ) ;
16063: LD_EXP 50
16067: PPUSH
16068: LD_STRING DEnd-JMM-Bel-1
16070: PPUSH
16071: CALL_OW 88
// if Gnyevko and IsPlaced ( Gnyevko ) then
16075: LD_EXP 51
16079: PUSH
16080: LD_EXP 51
16084: PPUSH
16085: CALL_OW 305
16089: AND
16090: IFFALSE 16104
// Say ( Gnyevko , DEnd-JMM-Gny-1 ) ;
16092: LD_EXP 51
16096: PPUSH
16097: LD_STRING DEnd-JMM-Gny-1
16099: PPUSH
16100: CALL_OW 88
// if Cornel and GetSide ( Cornel ) = 7 and IsPlaced ( Cornel ) then
16104: LD_EXP 27
16108: PUSH
16109: LD_EXP 27
16113: PPUSH
16114: CALL_OW 255
16118: PUSH
16119: LD_INT 7
16121: EQUAL
16122: AND
16123: PUSH
16124: LD_EXP 27
16128: PPUSH
16129: CALL_OW 305
16133: AND
16134: IFFALSE 16148
// Say ( Cornel , DEnd-JMM-Corn-1 ) ;
16136: LD_EXP 27
16140: PPUSH
16141: LD_STRING DEnd-JMM-Corn-1
16143: PPUSH
16144: CALL_OW 88
// if Donaldson and GetSide ( Donaldson ) = 7 and IsPlaced ( Donaldson ) then
16148: LD_EXP 20
16152: PUSH
16153: LD_EXP 20
16157: PPUSH
16158: CALL_OW 255
16162: PUSH
16163: LD_INT 7
16165: EQUAL
16166: AND
16167: PUSH
16168: LD_EXP 20
16172: PPUSH
16173: CALL_OW 305
16177: AND
16178: IFFALSE 16192
// Say ( Donaldson , DEnd-JMM-Don-1 ) ;
16180: LD_EXP 20
16184: PPUSH
16185: LD_STRING DEnd-JMM-Don-1
16187: PPUSH
16188: CALL_OW 88
// if Bobby and GetSide ( Bobby ) = 7 and IsPlaced ( Bobby ) then
16192: LD_EXP 21
16196: PUSH
16197: LD_EXP 21
16201: PPUSH
16202: CALL_OW 255
16206: PUSH
16207: LD_INT 7
16209: EQUAL
16210: AND
16211: PUSH
16212: LD_EXP 21
16216: PPUSH
16217: CALL_OW 305
16221: AND
16222: IFFALSE 16236
// Say ( Bobby , DEnd-JMM-Bobby-1 ) ;
16224: LD_EXP 21
16228: PPUSH
16229: LD_STRING DEnd-JMM-Bobby-1
16231: PPUSH
16232: CALL_OW 88
// if Denis and GetSide ( Denis ) = 7 and IsPlaced ( Denis ) then
16236: LD_EXP 23
16240: PUSH
16241: LD_EXP 23
16245: PPUSH
16246: CALL_OW 255
16250: PUSH
16251: LD_INT 7
16253: EQUAL
16254: AND
16255: PUSH
16256: LD_EXP 23
16260: PPUSH
16261: CALL_OW 305
16265: AND
16266: IFFALSE 16280
// Say ( Denis , DEnd-JMM-Den-1 ) ;
16268: LD_EXP 23
16272: PPUSH
16273: LD_STRING DEnd-JMM-Den-1
16275: PPUSH
16276: CALL_OW 88
// if Gladstone and GetSide ( Gladstone ) = 7 and IsPlaced ( Gladstone ) then
16280: LD_EXP 25
16284: PUSH
16285: LD_EXP 25
16289: PPUSH
16290: CALL_OW 255
16294: PUSH
16295: LD_INT 7
16297: EQUAL
16298: AND
16299: PUSH
16300: LD_EXP 25
16304: PPUSH
16305: CALL_OW 305
16309: AND
16310: IFFALSE 16324
// Say ( Gladstone , DEnd-JMM-Glad-1 ) ;
16312: LD_EXP 25
16316: PPUSH
16317: LD_STRING DEnd-JMM-Glad-1
16319: PPUSH
16320: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 7 and IsPlaced ( Kikuchi ) then
16324: LD_EXP 30
16328: PUSH
16329: LD_EXP 30
16333: PPUSH
16334: CALL_OW 255
16338: PUSH
16339: LD_INT 7
16341: EQUAL
16342: AND
16343: PUSH
16344: LD_EXP 30
16348: PPUSH
16349: CALL_OW 305
16353: AND
16354: IFFALSE 16368
// Say ( Kikuchi , DEnd-JMM-Yam-1 ) ;
16356: LD_EXP 30
16360: PPUSH
16361: LD_STRING DEnd-JMM-Yam-1
16363: PPUSH
16364: CALL_OW 88
// if Brown and GetSide ( Brown ) = 7 and IsPlaced ( Brown ) then
16368: LD_EXP 24
16372: PUSH
16373: LD_EXP 24
16377: PPUSH
16378: CALL_OW 255
16382: PUSH
16383: LD_INT 7
16385: EQUAL
16386: AND
16387: PUSH
16388: LD_EXP 24
16392: PPUSH
16393: CALL_OW 305
16397: AND
16398: IFFALSE 16412
// Say ( Brown , DEnd-JMM-Brown-1 ) ;
16400: LD_EXP 24
16404: PPUSH
16405: LD_STRING DEnd-JMM-Brown-1
16407: PPUSH
16408: CALL_OW 88
// if Connie and GetSide ( Connie ) = 7 and IsPlaced ( Connie ) then
16412: LD_EXP 34
16416: PUSH
16417: LD_EXP 34
16421: PPUSH
16422: CALL_OW 255
16426: PUSH
16427: LD_INT 7
16429: EQUAL
16430: AND
16431: PUSH
16432: LD_EXP 34
16436: PPUSH
16437: CALL_OW 305
16441: AND
16442: IFFALSE 16456
// Say ( Connie , DEnd-JMM-Con-1 ) ;
16444: LD_EXP 34
16448: PPUSH
16449: LD_STRING DEnd-JMM-Con-1
16451: PPUSH
16452: CALL_OW 88
// if Gary and GetSide ( Gary ) = 7 and IsPlaced ( Gary ) then
16456: LD_EXP 28
16460: PUSH
16461: LD_EXP 28
16465: PPUSH
16466: CALL_OW 255
16470: PUSH
16471: LD_INT 7
16473: EQUAL
16474: AND
16475: PUSH
16476: LD_EXP 28
16480: PPUSH
16481: CALL_OW 305
16485: AND
16486: IFFALSE 16500
// Say ( Gary , DEnd-JMM-Gary-1 ) ;
16488: LD_EXP 28
16492: PPUSH
16493: LD_STRING DEnd-JMM-Gary-1
16495: PPUSH
16496: CALL_OW 88
// if Simms and Roth and IsPlaced ( Simms ) then
16500: LD_EXP 31
16504: PUSH
16505: LD_EXP 18
16509: AND
16510: PUSH
16511: LD_EXP 31
16515: PPUSH
16516: CALL_OW 305
16520: AND
16521: IFFALSE 16535
// Say ( Simms , DEnd-JMM-Sim-1 ) ;
16523: LD_EXP 31
16527: PPUSH
16528: LD_STRING DEnd-JMM-Sim-1
16530: PPUSH
16531: CALL_OW 88
// if Houten and GetSide ( Houten ) = 7 and IsPlaced ( Houten ) then
16535: LD_EXP 26
16539: PUSH
16540: LD_EXP 26
16544: PPUSH
16545: CALL_OW 255
16549: PUSH
16550: LD_INT 7
16552: EQUAL
16553: AND
16554: PUSH
16555: LD_EXP 26
16559: PPUSH
16560: CALL_OW 305
16564: AND
16565: IFFALSE 16579
// Say ( Houten , DEnd-JMM-VanH-1 ) ;
16567: LD_EXP 26
16571: PPUSH
16572: LD_STRING DEnd-JMM-VanH-1
16574: PPUSH
16575: CALL_OW 88
// if Dolgov and IsPlaced ( Dolgov ) then
16579: LD_EXP 39
16583: PUSH
16584: LD_EXP 39
16588: PPUSH
16589: CALL_OW 305
16593: AND
16594: IFFALSE 16608
// Say ( Dolgov , DEnd-JMM-Dol-1 ) ;
16596: LD_EXP 39
16600: PPUSH
16601: LD_STRING DEnd-JMM-Dol-1
16603: PPUSH
16604: CALL_OW 88
// if Kapitsova and IsPlaced ( Kapitsova ) then
16608: LD_EXP 43
16612: PUSH
16613: LD_EXP 43
16617: PPUSH
16618: CALL_OW 305
16622: AND
16623: IFFALSE 16637
// Say ( Kapitsova , DEnd-JMM-Kap-1 ) ;
16625: LD_EXP 43
16629: PPUSH
16630: LD_STRING DEnd-JMM-Kap-1
16632: PPUSH
16633: CALL_OW 88
// if Kovalyuk and IsPlaced ( Kovalyuk ) then
16637: LD_EXP 46
16641: PUSH
16642: LD_EXP 46
16646: PPUSH
16647: CALL_OW 305
16651: AND
16652: IFFALSE 16666
// Say ( Kovalyuk , DEnd-JMM-Kov-1 ) ;
16654: LD_EXP 46
16658: PPUSH
16659: LD_STRING DEnd-JMM-Kov-1
16661: PPUSH
16662: CALL_OW 88
// if Scholtze and IsPlaced ( Scholtze ) then
16666: LD_EXP 41
16670: PUSH
16671: LD_EXP 41
16675: PPUSH
16676: CALL_OW 305
16680: AND
16681: IFFALSE 16695
// Say ( Scholtze , DEnd-JMM-Sch-1 ) ;
16683: LD_EXP 41
16687: PPUSH
16688: LD_STRING DEnd-JMM-Sch-1
16690: PPUSH
16691: CALL_OW 88
// if Titov and IsPlaced ( Titov ) then
16695: LD_EXP 37
16699: PUSH
16700: LD_EXP 37
16704: PPUSH
16705: CALL_OW 305
16709: AND
16710: IFFALSE 16724
// Say ( Titov , DEnd-JMM-Tit-1 ) ;
16712: LD_EXP 37
16716: PPUSH
16717: LD_STRING DEnd-JMM-Tit-1
16719: PPUSH
16720: CALL_OW 88
// if Oblukov and IsPlaced ( Oblukov ) then
16724: LD_EXP 42
16728: PUSH
16729: LD_EXP 42
16733: PPUSH
16734: CALL_OW 305
16738: AND
16739: IFFALSE 16753
// Say ( Oblukov , DEnd-JMM-Obl-1 ) ;
16741: LD_EXP 42
16745: PPUSH
16746: LD_STRING DEnd-JMM-Obl-1
16748: PPUSH
16749: CALL_OW 88
// if Lipshchin and IsPlaced ( Lipshchin ) then
16753: LD_EXP 44
16757: PUSH
16758: LD_EXP 44
16762: PPUSH
16763: CALL_OW 305
16767: AND
16768: IFFALSE 16782
// Say ( Lipshchin , DEnd-JMM-Lip-1 ) ;
16770: LD_EXP 44
16774: PPUSH
16775: LD_STRING DEnd-JMM-Lip-1
16777: PPUSH
16778: CALL_OW 88
// if Fadeev and IsPlaced ( Fadeev ) and Burlak then
16782: LD_EXP 38
16786: PUSH
16787: LD_EXP 38
16791: PPUSH
16792: CALL_OW 305
16796: AND
16797: PUSH
16798: LD_EXP 49
16802: AND
16803: IFFALSE 16817
// Say ( Fadeev , DEnd-Burlak-Fad-1 ) ;
16805: LD_EXP 38
16809: PPUSH
16810: LD_STRING DEnd-Burlak-Fad-1
16812: PPUSH
16813: CALL_OW 88
// if Petrovova and IsPlaced ( Petrovova ) then
16817: LD_EXP 45
16821: PUSH
16822: LD_EXP 45
16826: PPUSH
16827: CALL_OW 305
16831: AND
16832: IFFALSE 16846
// Say ( Petrovova , DEnd-Burlak-Ptr-1 ) ;
16834: LD_EXP 45
16838: PPUSH
16839: LD_STRING DEnd-Burlak-Ptr-1
16841: PPUSH
16842: CALL_OW 88
// if Kuzmov and IsPlaced ( Kuzmov ) then
16846: LD_EXP 47
16850: PUSH
16851: LD_EXP 47
16855: PPUSH
16856: CALL_OW 305
16860: AND
16861: IFFALSE 16875
// Say ( Kuzmov , DEnd-Burlak-Kuz-1 ) ;
16863: LD_EXP 47
16867: PPUSH
16868: LD_STRING DEnd-Burlak-Kuz-1
16870: PPUSH
16871: CALL_OW 88
// if Kirilenkova and IsPlaced ( Kirilenkova ) and Burlak then
16875: LD_EXP 36
16879: PUSH
16880: LD_EXP 36
16884: PPUSH
16885: CALL_OW 305
16889: AND
16890: PUSH
16891: LD_EXP 49
16895: AND
16896: IFFALSE 16910
// Say ( Kirilenkova , DEnd-Burlak-Kir-1 ) ;
16898: LD_EXP 36
16902: PPUSH
16903: LD_STRING DEnd-Burlak-Kir-1
16905: PPUSH
16906: CALL_OW 88
// if Burlak then
16910: LD_EXP 49
16914: IFFALSE 16928
// Say ( JMM , DEnd-Burlak-JMM-1 ) ;
16916: LD_EXP 17
16920: PPUSH
16921: LD_STRING DEnd-Burlak-JMM-1
16923: PPUSH
16924: CALL_OW 88
// dwait ( 0 0$2 ) ;
16928: LD_INT 70
16930: PPUSH
16931: CALL_OW 68
// SayRadio ( Schulz , DEnd-Szulc ) ;
16935: LD_EXP 54
16939: PPUSH
16940: LD_STRING DEnd-Szulc
16942: PPUSH
16943: CALL_OW 94
// dwait ( 0 0$1 ) ;
16947: LD_INT 35
16949: PPUSH
16950: CALL_OW 68
// if IsLive ( Burlak ) then
16954: LD_EXP 49
16958: PPUSH
16959: CALL_OW 300
16963: IFFALSE 16975
// med1 := 1 else
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_INT 1
16972: ST_TO_ADDR
16973: GO 16984
// med1 := - 1 ;
16975: LD_ADDR_VAR 0 1
16979: PUSH
16980: LD_INT 1
16982: NEG
16983: ST_TO_ADDR
// if artifactIResearched and artifactIIResearched and artifactIIIResearched then
16984: LD_EXP 12
16988: PUSH
16989: LD_EXP 13
16993: AND
16994: PUSH
16995: LD_EXP 14
16999: AND
17000: IFFALSE 17012
// med2 := 1 else
17002: LD_ADDR_VAR 0 2
17006: PUSH
17007: LD_INT 1
17009: ST_TO_ADDR
17010: GO 17021
// med2 := - 1 ;
17012: LD_ADDR_VAR 0 2
17016: PUSH
17017: LD_INT 1
17019: NEG
17020: ST_TO_ADDR
// AddMedal ( Hero , 1 ) ;
17021: LD_STRING Hero
17023: PPUSH
17024: LD_INT 1
17026: PPUSH
17027: CALL_OW 101
// AddMedal ( Artefact , med2 ) ;
17031: LD_STRING Artefact
17033: PPUSH
17034: LD_VAR 0 2
17038: PPUSH
17039: CALL_OW 101
// AddMedal ( ReconcileBurlak , med1 ) ;
17043: LD_STRING ReconcileBurlak
17045: PPUSH
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 101
// if Difficulty = 3 and med1 = 1 and med2 = 1 then
17055: LD_OWVAR 67
17059: PUSH
17060: LD_INT 3
17062: EQUAL
17063: PUSH
17064: LD_VAR 0 1
17068: PUSH
17069: LD_INT 1
17071: EQUAL
17072: AND
17073: PUSH
17074: LD_VAR 0 2
17078: PUSH
17079: LD_INT 1
17081: EQUAL
17082: AND
17083: IFFALSE 17095
// SetAchievementEX ( ACH_AMER , 19 ) ;
17085: LD_STRING ACH_AMER
17087: PPUSH
17088: LD_INT 19
17090: PPUSH
17091: CALL_OW 564
// GiveMedals ( MAIN ) ;
17095: LD_STRING MAIN
17097: PPUSH
17098: CALL_OW 102
// InGameOff ;
17102: CALL_OW 9
// DialogueOff ;
17106: CALL_OW 7
// music_nat := 1 ;
17110: LD_ADDR_OWVAR 71
17114: PUSH
17115: LD_INT 1
17117: ST_TO_ADDR
// music_class := 4 ;
17118: LD_ADDR_OWVAR 72
17122: PUSH
17123: LD_INT 4
17125: ST_TO_ADDR
// YouWin ;
17126: CALL_OW 103
// end ; end_of_file
17130: PPOPN 2
17132: END
// export function InitNature ; begin
17133: LD_INT 0
17135: PPUSH
// PrepareNature ( 3 , 3 , 2 , 1 , 1 , 0 , 0 , natureArea1 , 0 ) ;
17136: LD_INT 3
17138: PPUSH
17139: LD_INT 3
17141: PPUSH
17142: LD_INT 2
17144: PPUSH
17145: LD_INT 1
17147: PPUSH
17148: LD_INT 1
17150: PPUSH
17151: LD_INT 0
17153: PPUSH
17154: LD_INT 0
17156: PPUSH
17157: LD_INT 17
17159: PPUSH
17160: LD_INT 0
17162: PPUSH
17163: CALL 85512 0 9
// PrepareNature ( 2 , 1 , 1 , 1 , 1 , 0 , 0 , natureArea2 , 0 ) ;
17167: LD_INT 2
17169: PPUSH
17170: LD_INT 1
17172: PPUSH
17173: LD_INT 1
17175: PPUSH
17176: LD_INT 1
17178: PPUSH
17179: LD_INT 1
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: LD_INT 0
17187: PPUSH
17188: LD_INT 18
17190: PPUSH
17191: LD_INT 0
17193: PPUSH
17194: CALL 85512 0 9
// PrepareNature ( 4 , 1 , 2 , 4 , 2 , 1 , 0 , natureArea3 , 0 ) ;
17198: LD_INT 4
17200: PPUSH
17201: LD_INT 1
17203: PPUSH
17204: LD_INT 2
17206: PPUSH
17207: LD_INT 4
17209: PPUSH
17210: LD_INT 2
17212: PPUSH
17213: LD_INT 1
17215: PPUSH
17216: LD_INT 0
17218: PPUSH
17219: LD_INT 19
17221: PPUSH
17222: LD_INT 0
17224: PPUSH
17225: CALL 85512 0 9
// PrepareNature ( 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , natureWaterArea ) ;
17229: LD_INT 0
17231: PPUSH
17232: LD_INT 0
17234: PPUSH
17235: LD_INT 0
17237: PPUSH
17238: LD_INT 0
17240: PPUSH
17241: LD_INT 0
17243: PPUSH
17244: LD_INT 0
17246: PPUSH
17247: LD_INT 9
17249: PPUSH
17250: LD_INT 0
17252: PPUSH
17253: LD_INT 20
17255: PPUSH
17256: CALL 85512 0 9
// end ; end_of_file
17260: LD_VAR 0 1
17264: RET
// every 0 0$30 do var time ;
17265: GO 17267
17267: DISABLE
17268: LD_INT 0
17270: PPUSH
// begin time := 0 0$50 ;
17271: LD_ADDR_VAR 0 1
17275: PUSH
17276: LD_INT 1750
17278: ST_TO_ADDR
// repeat wait ( time ) ;
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 67
// if Prob ( 50 ) then
17288: LD_INT 50
17290: PPUSH
17291: CALL_OW 13
17295: IFFALSE 17324
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 89 , 45 , true ) ;
17297: LD_INT 1
17299: PPUSH
17300: LD_INT 5
17302: PPUSH
17303: CALL_OW 12
17307: PPUSH
17308: LD_INT 106
17310: PPUSH
17311: LD_INT 89
17313: PPUSH
17314: LD_INT 45
17316: PPUSH
17317: LD_INT 1
17319: PPUSH
17320: CALL_OW 56
// time := time + 0 0$3 ;
17324: LD_ADDR_VAR 0 1
17328: PUSH
17329: LD_VAR 0 1
17333: PUSH
17334: LD_INT 105
17336: PLUS
17337: ST_TO_ADDR
// if Prob ( 30 ) then
17338: LD_INT 30
17340: PPUSH
17341: CALL_OW 13
17345: IFFALSE 17391
// begin wait ( rand ( 0 0$15 , 0 0$21 ) ) ;
17347: LD_INT 525
17349: PPUSH
17350: LD_INT 735
17352: PPUSH
17353: CALL_OW 12
17357: PPUSH
17358: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 21 , 26 , 12 , true ) ;
17362: LD_INT 1
17364: PPUSH
17365: LD_INT 5
17367: PPUSH
17368: CALL_OW 12
17372: PPUSH
17373: LD_INT 21
17375: PPUSH
17376: LD_INT 26
17378: PPUSH
17379: LD_INT 12
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 56
// end else
17389: GO 17427
// begin wait ( rand ( 0 0$20 , 0 0$35 ) ) ;
17391: LD_INT 700
17393: PPUSH
17394: LD_INT 1225
17396: PPUSH
17397: CALL_OW 12
17401: PPUSH
17402: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , russianCratesArea , true ) ;
17406: LD_INT 1
17408: PPUSH
17409: LD_INT 5
17411: PPUSH
17412: CALL_OW 12
17416: PPUSH
17417: LD_INT 14
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: CALL_OW 55
// end ; if Prob ( 50 ) then
17427: LD_INT 50
17429: PPUSH
17430: CALL_OW 13
17434: IFFALSE 17480
// begin wait ( rand ( 0 0$20 , 0 0$30 ) ) ;
17436: LD_INT 700
17438: PPUSH
17439: LD_INT 1050
17441: PPUSH
17442: CALL_OW 12
17446: PPUSH
17447: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 181 , 218 , 16 , true ) ;
17451: LD_INT 1
17453: PPUSH
17454: LD_INT 5
17456: PPUSH
17457: CALL_OW 12
17461: PPUSH
17462: LD_INT 181
17464: PPUSH
17465: LD_INT 218
17467: PPUSH
17468: LD_INT 16
17470: PPUSH
17471: LD_INT 1
17473: PPUSH
17474: CALL_OW 56
// end else
17478: GO 17552
// begin wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
17480: LD_INT 350
17482: PPUSH
17483: LD_INT 525
17485: PPUSH
17486: CALL_OW 12
17490: PPUSH
17491: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , legionCratesArea , true ) ;
17495: LD_INT 1
17497: PPUSH
17498: LD_INT 5
17500: PPUSH
17501: CALL_OW 12
17505: PPUSH
17506: LD_INT 13
17508: PPUSH
17509: LD_INT 1
17511: PPUSH
17512: CALL_OW 55
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
17516: LD_INT 350
17518: PPUSH
17519: LD_INT 700
17521: PPUSH
17522: CALL_OW 12
17526: PPUSH
17527: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
17531: LD_INT 1
17533: PPUSH
17534: LD_INT 5
17536: PPUSH
17537: CALL_OW 12
17541: PPUSH
17542: LD_INT 33
17544: PPUSH
17545: LD_INT 1
17547: PPUSH
17548: CALL_OW 55
// end ; if Prob ( [ 65 , 62 , 55 ] [ Difficulty ] ) then
17552: LD_INT 65
17554: PUSH
17555: LD_INT 62
17557: PUSH
17558: LD_INT 55
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: LD_OWVAR 67
17570: ARRAY
17571: PPUSH
17572: CALL_OW 13
17576: IFFALSE 17622
// begin wait ( rand ( 0 0$15 , 0 0$25 ) ) ;
17578: LD_INT 525
17580: PPUSH
17581: LD_INT 875
17583: PPUSH
17584: CALL_OW 12
17588: PPUSH
17589: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 294 , 211 , 30 , true ) ;
17593: LD_INT 1
17595: PPUSH
17596: LD_INT 5
17598: PPUSH
17599: CALL_OW 12
17603: PPUSH
17604: LD_INT 294
17606: PPUSH
17607: LD_INT 211
17609: PPUSH
17610: LD_INT 30
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: CALL_OW 56
// end else
17620: GO 17664
// begin wait ( rand ( 0 0$12 , 0 0$22 ) ) ;
17622: LD_INT 420
17624: PPUSH
17625: LD_INT 770
17627: PPUSH
17628: CALL_OW 12
17632: PPUSH
17633: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 294 , 211 , 30 , true ) ;
17637: LD_INT 1
17639: PPUSH
17640: LD_INT 5
17642: PPUSH
17643: CALL_OW 12
17647: PPUSH
17648: LD_INT 294
17650: PPUSH
17651: LD_INT 211
17653: PPUSH
17654: LD_INT 30
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 56
// end ; if time > 2 2$20 then
17664: LD_VAR 0 1
17668: PUSH
17669: LD_INT 4900
17671: GREATER
17672: IFFALSE 17682
// time := 0 0$50 ;
17674: LD_ADDR_VAR 0 1
17678: PUSH
17679: LD_INT 1750
17681: ST_TO_ADDR
// until false ;
17682: LD_INT 0
17684: IFFALSE 17279
// end ;
17686: PPOPN 1
17688: END
// every 0 0$45 trigger tick < 10 10$00 do
17689: LD_OWVAR 1
17693: PUSH
17694: LD_INT 21000
17696: LESS
17697: IFFALSE 17745
17699: GO 17701
17701: DISABLE
// begin enable ;
17702: ENABLE
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
17703: LD_INT 350
17705: PPUSH
17706: LD_INT 700
17708: PPUSH
17709: CALL_OW 12
17713: PPUSH
17714: CALL_OW 67
// CreateCratesXYR ( rand ( 3 , 5 ) , 181 , 13 , 20 , true ) ;
17718: LD_INT 3
17720: PPUSH
17721: LD_INT 5
17723: PPUSH
17724: CALL_OW 12
17728: PPUSH
17729: LD_INT 181
17731: PPUSH
17732: LD_INT 13
17734: PPUSH
17735: LD_INT 20
17737: PPUSH
17738: LD_INT 1
17740: PPUSH
17741: CALL_OW 56
// end ; end_of_file
17745: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsLabsWorking ; export artifactsResDifficulty , artifactsResProgress , artifactsLabs , artifactsButtons , artifactsReady ; export function InitArtifact ; begin
17746: LD_INT 0
17748: PPUSH
// SetArtifactRes ( 7 , true ) ;
17749: LD_INT 7
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 467
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
17759: LD_ADDR_EXP 62
17763: PUSH
17764: EMPTY
17765: PUSH
17766: EMPTY
17767: PUSH
17768: EMPTY
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 * Difficulty , 1 1$20 * Difficulty , - 1 ] ;
17775: LD_ADDR_EXP 63
17779: PUSH
17780: LD_INT 1050
17782: PUSH
17783: LD_OWVAR 67
17787: MUL
17788: PUSH
17789: LD_INT 2800
17791: PUSH
17792: LD_OWVAR 67
17796: MUL
17797: PUSH
17798: LD_INT 1
17800: NEG
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
17807: LD_ADDR_EXP 64
17811: PUSH
17812: LD_INT 10
17814: PUSH
17815: LD_INT 35
17817: PUSH
17818: LD_INT 100
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: ST_TO_ADDR
// artifactsResearched := [ 0 , 0 , 0 ] ;
17826: LD_ADDR_EXP 65
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: LD_INT 0
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
17845: LD_ADDR_EXP 67
17849: PUSH
17850: LD_INT 300
17852: PUSH
17853: LD_INT 500
17855: PUSH
17856: LD_INT 800
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: ST_TO_ADDR
// artifactsResProgress := [ 0 , 0 , 0 ] ;
17864: LD_ADDR_EXP 68
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: LD_INT 0
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: ST_TO_ADDR
// artifactsLabs := [ 0 , 0 , 0 ] ;
17883: LD_ADDR_EXP 69
17887: PUSH
17888: LD_INT 0
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: ST_TO_ADDR
// artifactsLabsWorking := [ 0 , 0 , 0 ] ;
17902: LD_ADDR_EXP 66
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_teleport , art_place , art_exp_right ] ] ;
17921: LD_ADDR_EXP 70
17925: PUSH
17926: LD_INT 4
17928: PUSH
17929: LD_INT 3
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 5
17942: PUSH
17943: LD_INT 4
17945: PUSH
17946: LD_INT 2
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 6
17956: PUSH
17957: LD_INT 3
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: ST_TO_ADDR
// artifactsReady := [ 0 , 0 , 0 ] ;
17973: LD_ADDR_EXP 71
17977: PUSH
17978: LD_INT 0
17980: PUSH
17981: LD_INT 0
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: ST_TO_ADDR
// end ;
17992: LD_VAR 0 1
17996: RET
// every 0 0$1 trigger GetTech ( tech_artifact , 7 ) = state_researched do var i , pos , j , labs , nearestLab ;
17997: LD_INT 24
17999: PPUSH
18000: LD_INT 7
18002: PPUSH
18003: CALL_OW 321
18007: PUSH
18008: LD_INT 2
18010: EQUAL
18011: IFFALSE 18937
18013: GO 18015
18015: DISABLE
18016: LD_INT 0
18018: PPUSH
18019: PPUSH
18020: PPUSH
18021: PPUSH
18022: PPUSH
// begin enable ;
18023: ENABLE
// for i = 1 to 3 do
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: DOUBLE
18030: LD_INT 1
18032: DEC
18033: ST_TO_ADDR
18034: LD_INT 3
18036: PUSH
18037: FOR_TO
18038: IFFALSE 18935
// begin pos := FindArtifact ( i + 2 ) ;
18040: LD_ADDR_VAR 0 2
18044: PUSH
18045: LD_VAR 0 1
18049: PUSH
18050: LD_INT 2
18052: PLUS
18053: PPUSH
18054: CALL_OW 469
18058: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
18059: LD_ADDR_EXP 62
18063: PUSH
18064: LD_EXP 62
18068: PPUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 1
18083: ST_TO_ADDR
// if pos then
18084: LD_VAR 0 2
18088: IFFALSE 18796
// begin case i of 1 :
18090: LD_VAR 0 1
18094: PUSH
18095: LD_INT 1
18097: DOUBLE
18098: EQUAL
18099: IFTRUE 18103
18101: GO 18180
18103: POP
// labs := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) ; 2 :
18104: LD_ADDR_VAR 0 4
18108: PUSH
18109: LD_INT 22
18111: PUSH
18112: LD_INT 7
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 23
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 30
18134: PUSH
18135: LD_INT 8
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 30
18144: PUSH
18145: LD_INT 7
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 30
18154: PUSH
18155: LD_INT 11
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: LIST
18172: PPUSH
18173: CALL_OW 69
18177: ST_TO_ADDR
18178: GO 18288
18180: LD_INT 2
18182: DOUBLE
18183: EQUAL
18184: IFTRUE 18188
18186: GO 18265
18188: POP
// labs := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) ; 3 :
18189: LD_ADDR_VAR 0 4
18193: PUSH
18194: LD_INT 22
18196: PUSH
18197: LD_INT 7
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 23
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: LD_INT 30
18219: PUSH
18220: LD_INT 8
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 30
18229: PUSH
18230: LD_INT 7
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 30
18239: PUSH
18240: LD_INT 11
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: PPUSH
18258: CALL_OW 69
18262: ST_TO_ADDR
18263: GO 18288
18265: LD_INT 3
18267: DOUBLE
18268: EQUAL
18269: IFTRUE 18273
18271: GO 18287
18273: POP
// labs := [ alien ] ; end ;
18274: LD_ADDR_VAR 0 4
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: ST_TO_ADDR
18285: GO 18288
18287: POP
// if not labs then
18288: LD_VAR 0 4
18292: NOT
18293: IFFALSE 18297
// continue ;
18295: GO 18037
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
18297: LD_ADDR_VAR 0 5
18301: PUSH
18302: LD_VAR 0 4
18306: PPUSH
18307: LD_EXP 62
18311: PUSH
18312: LD_VAR 0 1
18316: ARRAY
18317: PUSH
18318: LD_INT 1
18320: ARRAY
18321: PPUSH
18322: LD_EXP 62
18326: PUSH
18327: LD_VAR 0 1
18331: ARRAY
18332: PUSH
18333: LD_INT 2
18335: ARRAY
18336: PPUSH
18337: CALL_OW 73
18341: ST_TO_ADDR
// if not nearestLab or nearestLab <> artifactsLabs [ i ] then
18342: LD_VAR 0 5
18346: NOT
18347: PUSH
18348: LD_VAR 0 5
18352: PUSH
18353: LD_EXP 69
18357: PUSH
18358: LD_VAR 0 1
18362: ARRAY
18363: NONEQUAL
18364: OR
18365: IFFALSE 18470
// begin SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_no , artifactsLabs [ i ] ) ;
18367: LD_INT 7
18369: PPUSH
18370: LD_EXP 70
18374: PUSH
18375: LD_VAR 0 1
18379: ARRAY
18380: PUSH
18381: LD_INT 3
18383: ARRAY
18384: PPUSH
18385: LD_INT 0
18387: PPUSH
18388: LD_EXP 69
18392: PUSH
18393: LD_VAR 0 1
18397: ARRAY
18398: PPUSH
18399: CALL_OW 468
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_no , artifactsLabs [ i ] ) ;
18403: LD_INT 7
18405: PPUSH
18406: LD_EXP 70
18410: PUSH
18411: LD_VAR 0 1
18415: ARRAY
18416: PUSH
18417: LD_INT 1
18419: ARRAY
18420: PPUSH
18421: LD_INT 0
18423: PPUSH
18424: LD_EXP 69
18428: PUSH
18429: LD_VAR 0 1
18433: ARRAY
18434: PPUSH
18435: CALL_OW 468
// if nearestLab then
18439: LD_VAR 0 5
18443: IFFALSE 18470
// artifactsLabs := Replace ( artifactsLabs , i , nearestLab ) ;
18445: LD_ADDR_EXP 69
18449: PUSH
18450: LD_EXP 69
18454: PPUSH
18455: LD_VAR 0 1
18459: PPUSH
18460: LD_VAR 0 5
18464: PPUSH
18465: CALL_OW 1
18469: ST_TO_ADDR
// end ; if not nearestLab then
18470: LD_VAR 0 5
18474: NOT
18475: IFFALSE 18479
// continue ;
18477: GO 18037
// if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 then
18479: LD_VAR 0 5
18483: PPUSH
18484: LD_EXP 62
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PUSH
18495: LD_INT 1
18497: ARRAY
18498: PPUSH
18499: LD_EXP 62
18503: PUSH
18504: LD_VAR 0 1
18508: ARRAY
18509: PUSH
18510: LD_INT 2
18512: ARRAY
18513: PPUSH
18514: CALL_OW 297
18518: PUSH
18519: LD_INT 8
18521: LESS
18522: IFFALSE 18719
// begin if not artifactsResearched [ i ] then
18524: LD_EXP 65
18528: PUSH
18529: LD_VAR 0 1
18533: ARRAY
18534: NOT
18535: IFFALSE 18616
// begin if BuildingStatus ( nearestLab ) = bs_idle then
18537: LD_VAR 0 5
18541: PPUSH
18542: CALL_OW 461
18546: PUSH
18547: LD_INT 2
18549: EQUAL
18550: IFFALSE 18584
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
18552: LD_INT 7
18554: PPUSH
18555: LD_EXP 70
18559: PUSH
18560: LD_VAR 0 1
18564: ARRAY
18565: PUSH
18566: LD_INT 3
18568: ARRAY
18569: PPUSH
18570: LD_INT 2
18572: PPUSH
18573: LD_VAR 0 5
18577: PPUSH
18578: CALL_OW 468
18582: GO 18614
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
18584: LD_INT 7
18586: PPUSH
18587: LD_EXP 70
18591: PUSH
18592: LD_VAR 0 1
18596: ARRAY
18597: PUSH
18598: LD_INT 3
18600: ARRAY
18601: PPUSH
18602: LD_INT 1
18604: PPUSH
18605: LD_VAR 0 5
18609: PPUSH
18610: CALL_OW 468
// end else
18614: GO 18717
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ i ] then
18616: LD_VAR 0 5
18620: PPUSH
18621: CALL_OW 461
18625: PUSH
18626: LD_INT 2
18628: EQUAL
18629: PUSH
18630: LD_EXP 71
18634: PUSH
18635: LD_VAR 0 1
18639: ARRAY
18640: AND
18641: IFFALSE 18687
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
18643: LD_INT 7
18645: PPUSH
18646: LD_EXP 70
18650: PUSH
18651: LD_VAR 0 1
18655: ARRAY
18656: PUSH
18657: LD_INT 1
18659: ARRAY
18660: PPUSH
18661: LD_EXP 70
18665: PUSH
18666: LD_VAR 0 1
18670: ARRAY
18671: PUSH
18672: LD_INT 2
18674: ARRAY
18675: PPUSH
18676: LD_VAR 0 5
18680: PPUSH
18681: CALL_OW 468
18685: GO 18717
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
18687: LD_INT 7
18689: PPUSH
18690: LD_EXP 70
18694: PUSH
18695: LD_VAR 0 1
18699: ARRAY
18700: PUSH
18701: LD_INT 1
18703: ARRAY
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: LD_VAR 0 5
18712: PPUSH
18713: CALL_OW 468
// end else
18717: GO 18794
// begin if not artifactsResearched [ i ] then
18719: LD_EXP 65
18723: PUSH
18724: LD_VAR 0 1
18728: ARRAY
18729: NOT
18730: IFFALSE 18764
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_no , nearestLab ) else
18732: LD_INT 7
18734: PPUSH
18735: LD_EXP 70
18739: PUSH
18740: LD_VAR 0 1
18744: ARRAY
18745: PUSH
18746: LD_INT 3
18748: ARRAY
18749: PPUSH
18750: LD_INT 0
18752: PPUSH
18753: LD_VAR 0 5
18757: PPUSH
18758: CALL_OW 468
18762: GO 18794
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_no , nearestLab ) ;
18764: LD_INT 7
18766: PPUSH
18767: LD_EXP 70
18771: PUSH
18772: LD_VAR 0 1
18776: ARRAY
18777: PUSH
18778: LD_INT 1
18780: ARRAY
18781: PPUSH
18782: LD_INT 0
18784: PPUSH
18785: LD_VAR 0 5
18789: PPUSH
18790: CALL_OW 468
// end ; end else
18794: GO 18933
// begin if not artifactsLabs [ i ] then
18796: LD_EXP 69
18800: PUSH
18801: LD_VAR 0 1
18805: ARRAY
18806: NOT
18807: IFFALSE 18811
// continue ;
18809: GO 18037
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_no , artifactsLabs [ i ] ) ;
18811: LD_INT 7
18813: PPUSH
18814: LD_EXP 70
18818: PUSH
18819: LD_VAR 0 1
18823: ARRAY
18824: PUSH
18825: LD_INT 3
18827: ARRAY
18828: PPUSH
18829: LD_INT 0
18831: PPUSH
18832: LD_EXP 69
18836: PUSH
18837: LD_VAR 0 1
18841: ARRAY
18842: PPUSH
18843: CALL_OW 468
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_no , artifactsLabs [ i ] ) ;
18847: LD_INT 7
18849: PPUSH
18850: LD_EXP 70
18854: PUSH
18855: LD_VAR 0 1
18859: ARRAY
18860: PUSH
18861: LD_INT 1
18863: ARRAY
18864: PPUSH
18865: LD_INT 0
18867: PPUSH
18868: LD_EXP 69
18872: PUSH
18873: LD_VAR 0 1
18877: ARRAY
18878: PPUSH
18879: CALL_OW 468
// if artifactsLabsWorking [ i ] then
18883: LD_EXP 66
18887: PUSH
18888: LD_VAR 0 1
18892: ARRAY
18893: IFFALSE 18933
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , false ) ;
18895: LD_ADDR_EXP 66
18899: PUSH
18900: LD_EXP 66
18904: PPUSH
18905: LD_VAR 0 1
18909: PPUSH
18910: LD_INT 0
18912: PPUSH
18913: CALL_OW 1
18917: ST_TO_ADDR
// ComCancel ( artifactsLabs [ i ] ) ;
18918: LD_EXP 69
18922: PUSH
18923: LD_VAR 0 1
18927: ARRAY
18928: PPUSH
18929: CALL_OW 127
// end ; end ; end ;
18933: GO 18037
18935: POP
18936: POP
// end ;
18937: PPOPN 5
18939: END
// on ArtifactUsed ( side , icon , x , y ) do var i , lab , time , list , un ;
18940: LD_INT 0
18942: PPUSH
18943: PPUSH
18944: PPUSH
18945: PPUSH
18946: PPUSH
// begin if icon = artifactsButtons [ 1 ] [ 3 ] then
18947: LD_VAR 0 2
18951: PUSH
18952: LD_EXP 70
18956: PUSH
18957: LD_INT 1
18959: ARRAY
18960: PUSH
18961: LD_INT 3
18963: ARRAY
18964: EQUAL
18965: IFFALSE 19088
// begin lab := artifactsLabs [ 1 ] ;
18967: LD_ADDR_VAR 0 6
18971: PUSH
18972: LD_EXP 69
18976: PUSH
18977: LD_INT 1
18979: ARRAY
18980: ST_TO_ADDR
// if not lab then
18981: LD_VAR 0 6
18985: NOT
18986: IFFALSE 18990
// exit ;
18988: GO 20068
// SetSpecResearch ( lab , artifactsResDifficulty [ 1 ] , true ) ;
18990: LD_VAR 0 6
18994: PPUSH
18995: LD_EXP 67
18999: PUSH
19000: LD_INT 1
19002: ARRAY
19003: PPUSH
19004: LD_INT 1
19006: PPUSH
19007: CALL_OW 486
// if artifactsResProgress [ 1 ] then
19011: LD_EXP 68
19015: PUSH
19016: LD_INT 1
19018: ARRAY
19019: IFFALSE 19039
// SetWorkingProgress ( lab , artifactsResProgress [ 1 ] ) ;
19021: LD_VAR 0 6
19025: PPUSH
19026: LD_EXP 68
19030: PUSH
19031: LD_INT 1
19033: ARRAY
19034: PPUSH
19035: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , 1 , 1 ) ;
19039: LD_ADDR_EXP 66
19043: PUSH
19044: LD_EXP 66
19048: PPUSH
19049: LD_INT 1
19051: PPUSH
19052: LD_INT 1
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// SetArtifactUse ( 7 , artifactsButtons [ 1 ] [ 3 ] , art_no , lab ) ;
19060: LD_INT 7
19062: PPUSH
19063: LD_EXP 70
19067: PUSH
19068: LD_INT 1
19070: ARRAY
19071: PUSH
19072: LD_INT 3
19074: ARRAY
19075: PPUSH
19076: LD_INT 0
19078: PPUSH
19079: LD_VAR 0 6
19083: PPUSH
19084: CALL_OW 468
// end ; if icon = artifactsButtons [ 2 ] [ 3 ] then
19088: LD_VAR 0 2
19092: PUSH
19093: LD_EXP 70
19097: PUSH
19098: LD_INT 2
19100: ARRAY
19101: PUSH
19102: LD_INT 3
19104: ARRAY
19105: EQUAL
19106: IFFALSE 19229
// begin lab := artifactsLabs [ 2 ] ;
19108: LD_ADDR_VAR 0 6
19112: PUSH
19113: LD_EXP 69
19117: PUSH
19118: LD_INT 2
19120: ARRAY
19121: ST_TO_ADDR
// if not lab then
19122: LD_VAR 0 6
19126: NOT
19127: IFFALSE 19131
// exit ;
19129: GO 20068
// SetSpecResearch ( lab , artifactsResDifficulty [ 2 ] , true ) ;
19131: LD_VAR 0 6
19135: PPUSH
19136: LD_EXP 67
19140: PUSH
19141: LD_INT 2
19143: ARRAY
19144: PPUSH
19145: LD_INT 1
19147: PPUSH
19148: CALL_OW 486
// if artifactsResProgress [ 2 ] then
19152: LD_EXP 68
19156: PUSH
19157: LD_INT 2
19159: ARRAY
19160: IFFALSE 19180
// SetWorkingProgress ( lab , artifactsResProgress [ 2 ] ) ;
19162: LD_VAR 0 6
19166: PPUSH
19167: LD_EXP 68
19171: PUSH
19172: LD_INT 2
19174: ARRAY
19175: PPUSH
19176: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , 2 , 1 ) ;
19180: LD_ADDR_EXP 66
19184: PUSH
19185: LD_EXP 66
19189: PPUSH
19190: LD_INT 2
19192: PPUSH
19193: LD_INT 1
19195: PPUSH
19196: CALL_OW 1
19200: ST_TO_ADDR
// SetArtifactUse ( 7 , artifactsButtons [ 2 ] [ 3 ] , art_no , lab ) ;
19201: LD_INT 7
19203: PPUSH
19204: LD_EXP 70
19208: PUSH
19209: LD_INT 2
19211: ARRAY
19212: PUSH
19213: LD_INT 3
19215: ARRAY
19216: PPUSH
19217: LD_INT 0
19219: PPUSH
19220: LD_VAR 0 6
19224: PPUSH
19225: CALL_OW 468
// end ; if icon = artifactsButtons [ 3 ] [ 3 ] then
19229: LD_VAR 0 2
19233: PUSH
19234: LD_EXP 70
19238: PUSH
19239: LD_INT 3
19241: ARRAY
19242: PUSH
19243: LD_INT 3
19245: ARRAY
19246: EQUAL
19247: IFFALSE 19370
// begin lab := artifactsLabs [ 3 ] ;
19249: LD_ADDR_VAR 0 6
19253: PUSH
19254: LD_EXP 69
19258: PUSH
19259: LD_INT 3
19261: ARRAY
19262: ST_TO_ADDR
// if not lab then
19263: LD_VAR 0 6
19267: NOT
19268: IFFALSE 19272
// exit ;
19270: GO 20068
// SetSpecResearch ( lab , artifactsResDifficulty [ 3 ] , true ) ;
19272: LD_VAR 0 6
19276: PPUSH
19277: LD_EXP 67
19281: PUSH
19282: LD_INT 3
19284: ARRAY
19285: PPUSH
19286: LD_INT 1
19288: PPUSH
19289: CALL_OW 486
// if artifactsResProgress [ 3 ] then
19293: LD_EXP 68
19297: PUSH
19298: LD_INT 3
19300: ARRAY
19301: IFFALSE 19321
// SetWorkingProgress ( lab , artifactsResProgress [ 3 ] ) ;
19303: LD_VAR 0 6
19307: PPUSH
19308: LD_EXP 68
19312: PUSH
19313: LD_INT 3
19315: ARRAY
19316: PPUSH
19317: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , 3 , 1 ) ;
19321: LD_ADDR_EXP 66
19325: PUSH
19326: LD_EXP 66
19330: PPUSH
19331: LD_INT 3
19333: PPUSH
19334: LD_INT 1
19336: PPUSH
19337: CALL_OW 1
19341: ST_TO_ADDR
// SetArtifactUse ( 7 , artifactsButtons [ 3 ] [ 3 ] , art_no , lab ) ;
19342: LD_INT 7
19344: PPUSH
19345: LD_EXP 70
19349: PUSH
19350: LD_INT 3
19352: ARRAY
19353: PUSH
19354: LD_INT 3
19356: ARRAY
19357: PPUSH
19358: LD_INT 0
19360: PPUSH
19361: LD_VAR 0 6
19365: PPUSH
19366: CALL_OW 468
// end ; if icon = artifactsButtons [ 1 ] [ 1 ] then
19370: LD_VAR 0 2
19374: PUSH
19375: LD_EXP 70
19379: PUSH
19380: LD_INT 1
19382: ARRAY
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: EQUAL
19388: IFFALSE 19546
// begin lab := artifactsLabs [ 1 ] ;
19390: LD_ADDR_VAR 0 6
19394: PUSH
19395: LD_EXP 69
19399: PUSH
19400: LD_INT 1
19402: ARRAY
19403: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
19404: LD_VAR 0 6
19408: PPUSH
19409: CALL_OW 274
19413: PPUSH
19414: CALL 93693 0 1
19418: PUSH
19419: LD_INT 3
19421: ARRAY
19422: PUSH
19423: LD_EXP 64
19427: PUSH
19428: LD_INT 1
19430: ARRAY
19431: LESS
19432: IFFALSE 19446
// begin HintSpec ( ArtifactCost , 2 ) ;
19434: LD_STRING ArtifactCost
19436: PPUSH
19437: LD_INT 2
19439: PPUSH
19440: CALL_OW 338
// exit ;
19444: GO 20068
// end ; artifactsReady := Replace ( artifactsReady , 1 , false ) ;
19446: LD_ADDR_EXP 71
19450: PUSH
19451: LD_EXP 71
19455: PPUSH
19456: LD_INT 1
19458: PPUSH
19459: LD_INT 0
19461: PPUSH
19462: CALL_OW 1
19466: ST_TO_ADDR
// PlaceSeeing ( x , y , 7 , - 12 ) ;
19467: LD_VAR 0 3
19471: PPUSH
19472: LD_VAR 0 4
19476: PPUSH
19477: LD_INT 7
19479: PPUSH
19480: LD_INT 12
19482: NEG
19483: PPUSH
19484: CALL_OW 330
// wait ( 0 0$30 ) ;
19488: LD_INT 1050
19490: PPUSH
19491: CALL_OW 67
// RemoveSeeing ( x , y , 7 ) ;
19495: LD_VAR 0 3
19499: PPUSH
19500: LD_VAR 0 4
19504: PPUSH
19505: LD_INT 7
19507: PPUSH
19508: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
19512: LD_EXP 63
19516: PUSH
19517: LD_INT 1
19519: ARRAY
19520: PPUSH
19521: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , 1 , true ) ;
19525: LD_ADDR_EXP 71
19529: PUSH
19530: LD_EXP 71
19534: PPUSH
19535: LD_INT 1
19537: PPUSH
19538: LD_INT 1
19540: PPUSH
19541: CALL_OW 1
19545: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
19546: LD_VAR 0 2
19550: PUSH
19551: LD_EXP 70
19555: PUSH
19556: LD_INT 2
19558: ARRAY
19559: PUSH
19560: LD_INT 1
19562: ARRAY
19563: EQUAL
19564: IFFALSE 19801
// begin lab := artifactsLabs [ 2 ] ;
19566: LD_ADDR_VAR 0 6
19570: PUSH
19571: LD_EXP 69
19575: PUSH
19576: LD_INT 2
19578: ARRAY
19579: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_btype , b_ext_siberium ] ] ] ) then
19580: LD_VAR 0 3
19584: PUSH
19585: LD_INT 81
19587: PUSH
19588: LD_INT 7
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 32
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 30
19610: PUSH
19611: LD_INT 28
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 30
19620: PUSH
19621: LD_INT 30
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 35
19630: PUSH
19631: LD_INT 49
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 34
19640: PUSH
19641: LD_INT 49
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 30
19650: PUSH
19651: LD_INT 21
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 69
19675: IN
19676: NOT
19677: IFFALSE 19681
// exit ;
19679: GO 20068
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
19681: LD_VAR 0 6
19685: PPUSH
19686: CALL_OW 274
19690: PPUSH
19691: CALL 93693 0 1
19695: PUSH
19696: LD_INT 3
19698: ARRAY
19699: PUSH
19700: LD_EXP 64
19704: PUSH
19705: LD_INT 2
19707: ARRAY
19708: LESS
19709: IFFALSE 19723
// begin HintSpec ( ArtifactCost , 2 ) ;
19711: LD_STRING ArtifactCost
19713: PPUSH
19714: LD_INT 2
19716: PPUSH
19717: CALL_OW 338
// exit ;
19721: GO 20068
// end ; artifactsReady := Replace ( artifactsReady , 2 , false ) ;
19723: LD_ADDR_EXP 71
19727: PUSH
19728: LD_EXP 71
19732: PPUSH
19733: LD_INT 2
19735: PPUSH
19736: LD_INT 0
19738: PPUSH
19739: CALL_OW 1
19743: ST_TO_ADDR
// KillUnit ( x ) ;
19744: LD_VAR 0 3
19748: PPUSH
19749: CALL_OW 66
// artifactDestroyCounter := artifactDestroyCounter + 1 ;
19753: LD_ADDR_EXP 16
19757: PUSH
19758: LD_EXP 16
19762: PUSH
19763: LD_INT 1
19765: PLUS
19766: ST_TO_ADDR
// wait ( artifactsRecharge [ 2 ] ) ;
19767: LD_EXP 63
19771: PUSH
19772: LD_INT 2
19774: ARRAY
19775: PPUSH
19776: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , 2 , true ) ;
19780: LD_ADDR_EXP 71
19784: PUSH
19785: LD_EXP 71
19789: PPUSH
19790: LD_INT 2
19792: PPUSH
19793: LD_INT 1
19795: PPUSH
19796: CALL_OW 1
19800: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
19801: LD_VAR 0 2
19805: PUSH
19806: LD_EXP 70
19810: PUSH
19811: LD_INT 3
19813: ARRAY
19814: PUSH
19815: LD_INT 1
19817: ARRAY
19818: EQUAL
19819: IFFALSE 20068
// begin lab := artifactsLabs [ 3 ] ;
19821: LD_ADDR_VAR 0 6
19825: PUSH
19826: LD_EXP 69
19830: PUSH
19831: LD_INT 3
19833: ARRAY
19834: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 3 ] then
19835: LD_VAR 0 6
19839: PPUSH
19840: CALL_OW 274
19844: PPUSH
19845: CALL 93693 0 1
19849: PUSH
19850: LD_INT 3
19852: ARRAY
19853: PUSH
19854: LD_EXP 64
19858: PUSH
19859: LD_INT 3
19861: ARRAY
19862: LESS
19863: IFFALSE 19877
// begin HintSpec ( ArtifactCost , 2 ) ;
19865: LD_STRING ArtifactCost
19867: PPUSH
19868: LD_INT 2
19870: PPUSH
19871: CALL_OW 338
// exit ;
19875: GO 20068
// end ; SetAreaMapShow ( teleportArea , 1 ) ;
19877: LD_INT 37
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 424
// time := 0 0$30 ;
19887: LD_ADDR_VAR 0 7
19891: PUSH
19892: LD_INT 1050
19894: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , 3 , false ) ;
19895: LD_ADDR_EXP 71
19899: PUSH
19900: LD_EXP 71
19904: PPUSH
19905: LD_INT 3
19907: PPUSH
19908: LD_INT 0
19910: PPUSH
19911: CALL_OW 1
19915: ST_TO_ADDR
// repeat display_strings := [ #Am15a-1 , time ] ;
19916: LD_ADDR_OWVAR 47
19920: PUSH
19921: LD_STRING #Am15a-1
19923: PUSH
19924: LD_VAR 0 7
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19933: LD_INT 35
19935: PPUSH
19936: CALL_OW 67
// time := time - 0 0$1 ;
19940: LD_ADDR_VAR 0 7
19944: PUSH
19945: LD_VAR 0 7
19949: PUSH
19950: LD_INT 35
19952: MINUS
19953: ST_TO_ADDR
// until time = 0 0$00 ;
19954: LD_VAR 0 7
19958: PUSH
19959: LD_INT 0
19961: EQUAL
19962: IFFALSE 19916
// display_strings :=  ;
19964: LD_ADDR_OWVAR 47
19968: PUSH
19969: LD_STRING 
19971: ST_TO_ADDR
// SetAreaMapShow ( teleportArea , 0 ) ;
19972: LD_INT 37
19974: PPUSH
19975: LD_INT 0
19977: PPUSH
19978: CALL_OW 424
// list := FilterUnitsInArea ( teleportArea , [ f_not , [ f_type , unit_building ] ] ) ;
19982: LD_ADDR_VAR 0 8
19986: PUSH
19987: LD_INT 37
19989: PPUSH
19990: LD_INT 3
19992: PUSH
19993: LD_INT 21
19995: PUSH
19996: LD_INT 3
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PPUSH
20007: CALL_OW 70
20011: ST_TO_ADDR
// CenterOnXY ( x , y ) ;
20012: LD_VAR 0 3
20016: PPUSH
20017: LD_VAR 0 4
20021: PPUSH
20022: CALL_OW 84
// for un in list do
20026: LD_ADDR_VAR 0 9
20030: PUSH
20031: LD_VAR 0 8
20035: PUSH
20036: FOR_IN
20037: IFFALSE 20066
// TeleportUnit ( un , x , y , 12 , true ) ;
20039: LD_VAR 0 9
20043: PPUSH
20044: LD_VAR 0 3
20048: PPUSH
20049: LD_VAR 0 4
20053: PPUSH
20054: LD_INT 12
20056: PPUSH
20057: LD_INT 1
20059: PPUSH
20060: CALL_OW 483
20064: GO 20036
20066: POP
20067: POP
// end ; end ;
20068: PPOPN 9
20070: END
// on SpecResearchCancel ( lab , progress ) do var i , labNum ;
20071: LD_INT 0
20073: PPUSH
20074: PPUSH
// begin labNum := 0 ;
20075: LD_ADDR_VAR 0 4
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// for i = 1 to artifactsLabs do
20083: LD_ADDR_VAR 0 3
20087: PUSH
20088: DOUBLE
20089: LD_INT 1
20091: DEC
20092: ST_TO_ADDR
20093: LD_EXP 69
20097: PUSH
20098: FOR_TO
20099: IFFALSE 20133
// if artifactsLabs [ i ] = lab then
20101: LD_EXP 69
20105: PUSH
20106: LD_VAR 0 3
20110: ARRAY
20111: PUSH
20112: LD_VAR 0 1
20116: EQUAL
20117: IFFALSE 20131
// begin labNum := i ;
20119: LD_ADDR_VAR 0 4
20123: PUSH
20124: LD_VAR 0 3
20128: ST_TO_ADDR
// break ;
20129: GO 20133
// end ;
20131: GO 20098
20133: POP
20134: POP
// if not labNum then
20135: LD_VAR 0 4
20139: NOT
20140: IFFALSE 20144
// exit ;
20142: GO 20222
// SetArtifactUse ( 7 , artifactsButtons [ labNum ] [ 3 ] , art_instant , lab ) ;
20144: LD_INT 7
20146: PPUSH
20147: LD_EXP 70
20151: PUSH
20152: LD_VAR 0 4
20156: ARRAY
20157: PUSH
20158: LD_INT 3
20160: ARRAY
20161: PPUSH
20162: LD_INT 2
20164: PPUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , labNum , progress ) ;
20174: LD_ADDR_EXP 68
20178: PUSH
20179: LD_EXP 68
20183: PPUSH
20184: LD_VAR 0 4
20188: PPUSH
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 1
20198: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , labNum , 0 ) ;
20199: LD_ADDR_EXP 66
20203: PUSH
20204: LD_EXP 66
20208: PPUSH
20209: LD_VAR 0 4
20213: PPUSH
20214: LD_INT 0
20216: PPUSH
20217: CALL_OW 1
20221: ST_TO_ADDR
// end ;
20222: PPOPN 4
20224: END
// on SpecResearchComplete ( lab ) do var i , labNum ;
20225: LD_INT 0
20227: PPUSH
20228: PPUSH
// begin labNum := 0 ;
20229: LD_ADDR_VAR 0 3
20233: PUSH
20234: LD_INT 0
20236: ST_TO_ADDR
// for i = 1 to artifactsLabs do
20237: LD_ADDR_VAR 0 2
20241: PUSH
20242: DOUBLE
20243: LD_INT 1
20245: DEC
20246: ST_TO_ADDR
20247: LD_EXP 69
20251: PUSH
20252: FOR_TO
20253: IFFALSE 20287
// if artifactsLabs [ i ] = lab then
20255: LD_EXP 69
20259: PUSH
20260: LD_VAR 0 2
20264: ARRAY
20265: PUSH
20266: LD_VAR 0 1
20270: EQUAL
20271: IFFALSE 20285
// begin labNum := i ;
20273: LD_ADDR_VAR 0 3
20277: PUSH
20278: LD_VAR 0 2
20282: ST_TO_ADDR
// break ;
20283: GO 20287
// end ;
20285: GO 20252
20287: POP
20288: POP
// if not labNum then
20289: LD_VAR 0 3
20293: NOT
20294: IFFALSE 20298
// exit ;
20296: GO 20460
// SetArtifactUse ( 7 , artifactsButtons [ labNum ] [ 3 ] , art_no , lab ) ;
20298: LD_INT 7
20300: PPUSH
20301: LD_EXP 70
20305: PUSH
20306: LD_VAR 0 3
20310: ARRAY
20311: PUSH
20312: LD_INT 3
20314: ARRAY
20315: PPUSH
20316: LD_INT 0
20318: PPUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , labNum , true ) ;
20328: LD_ADDR_EXP 65
20332: PUSH
20333: LD_EXP 65
20337: PPUSH
20338: LD_VAR 0 3
20342: PPUSH
20343: LD_INT 1
20345: PPUSH
20346: CALL_OW 1
20350: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , labNum , true ) ;
20351: LD_ADDR_EXP 71
20355: PUSH
20356: LD_EXP 71
20360: PPUSH
20361: LD_VAR 0 3
20365: PPUSH
20366: LD_INT 1
20368: PPUSH
20369: CALL_OW 1
20373: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , labNum , false ) ;
20374: LD_ADDR_EXP 66
20378: PUSH
20379: LD_EXP 66
20383: PPUSH
20384: LD_VAR 0 3
20388: PPUSH
20389: LD_INT 0
20391: PPUSH
20392: CALL_OW 1
20396: ST_TO_ADDR
// case labNum of 1 :
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 1
20404: DOUBLE
20405: EQUAL
20406: IFTRUE 20410
20408: GO 20421
20410: POP
// artifactIResearched := true ; 2 :
20411: LD_ADDR_EXP 12
20415: PUSH
20416: LD_INT 1
20418: ST_TO_ADDR
20419: GO 20460
20421: LD_INT 2
20423: DOUBLE
20424: EQUAL
20425: IFTRUE 20429
20427: GO 20440
20429: POP
// artifactIIResearched := true ; 3 :
20430: LD_ADDR_EXP 13
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
20438: GO 20460
20440: LD_INT 3
20442: DOUBLE
20443: EQUAL
20444: IFTRUE 20448
20446: GO 20459
20448: POP
// artifactIIIResearched := true ; end ;
20449: LD_ADDR_EXP 14
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
20457: GO 20460
20459: POP
// end ; end_of_file
20460: PPOPN 3
20462: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
20463: GO 20465
20465: DISABLE
// begin ru_radar := 98 ;
20466: LD_ADDR_EXP 72
20470: PUSH
20471: LD_INT 98
20473: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20474: LD_ADDR_EXP 73
20478: PUSH
20479: LD_INT 89
20481: ST_TO_ADDR
// us_hack := 99 ;
20482: LD_ADDR_EXP 74
20486: PUSH
20487: LD_INT 99
20489: ST_TO_ADDR
// us_artillery := 97 ;
20490: LD_ADDR_EXP 75
20494: PUSH
20495: LD_INT 97
20497: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20498: LD_ADDR_EXP 76
20502: PUSH
20503: LD_INT 91
20505: ST_TO_ADDR
// end ; end_of_file
20506: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
// skirmish := false ;
20511: LD_ADDR_EXP 77
20515: PUSH
20516: LD_INT 0
20518: ST_TO_ADDR
// debug_mc := false ;
20519: LD_ADDR_EXP 78
20523: PUSH
20524: LD_INT 0
20526: ST_TO_ADDR
// mc_bases := [ ] ;
20527: LD_ADDR_EXP 79
20531: PUSH
20532: EMPTY
20533: ST_TO_ADDR
// mc_sides := [ ] ;
20534: LD_ADDR_EXP 105
20538: PUSH
20539: EMPTY
20540: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
20541: LD_ADDR_EXP 80
20545: PUSH
20546: EMPTY
20547: ST_TO_ADDR
// mc_building_repairs := [ ] ;
20548: LD_ADDR_EXP 81
20552: PUSH
20553: EMPTY
20554: ST_TO_ADDR
// mc_need_heal := [ ] ;
20555: LD_ADDR_EXP 82
20559: PUSH
20560: EMPTY
20561: ST_TO_ADDR
// mc_healers := [ ] ;
20562: LD_ADDR_EXP 83
20566: PUSH
20567: EMPTY
20568: ST_TO_ADDR
// mc_build_list := [ ] ;
20569: LD_ADDR_EXP 84
20573: PUSH
20574: EMPTY
20575: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
20576: LD_ADDR_EXP 111
20580: PUSH
20581: EMPTY
20582: ST_TO_ADDR
// mc_builders := [ ] ;
20583: LD_ADDR_EXP 85
20587: PUSH
20588: EMPTY
20589: ST_TO_ADDR
// mc_construct_list := [ ] ;
20590: LD_ADDR_EXP 86
20594: PUSH
20595: EMPTY
20596: ST_TO_ADDR
// mc_turret_list := [ ] ;
20597: LD_ADDR_EXP 87
20601: PUSH
20602: EMPTY
20603: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
20604: LD_ADDR_EXP 88
20608: PUSH
20609: EMPTY
20610: ST_TO_ADDR
// mc_miners := [ ] ;
20611: LD_ADDR_EXP 93
20615: PUSH
20616: EMPTY
20617: ST_TO_ADDR
// mc_mines := [ ] ;
20618: LD_ADDR_EXP 92
20622: PUSH
20623: EMPTY
20624: ST_TO_ADDR
// mc_minefields := [ ] ;
20625: LD_ADDR_EXP 94
20629: PUSH
20630: EMPTY
20631: ST_TO_ADDR
// mc_crates := [ ] ;
20632: LD_ADDR_EXP 95
20636: PUSH
20637: EMPTY
20638: ST_TO_ADDR
// mc_crates_collector := [ ] ;
20639: LD_ADDR_EXP 96
20643: PUSH
20644: EMPTY
20645: ST_TO_ADDR
// mc_crates_area := [ ] ;
20646: LD_ADDR_EXP 97
20650: PUSH
20651: EMPTY
20652: ST_TO_ADDR
// mc_vehicles := [ ] ;
20653: LD_ADDR_EXP 98
20657: PUSH
20658: EMPTY
20659: ST_TO_ADDR
// mc_attack := [ ] ;
20660: LD_ADDR_EXP 99
20664: PUSH
20665: EMPTY
20666: ST_TO_ADDR
// mc_produce := [ ] ;
20667: LD_ADDR_EXP 100
20671: PUSH
20672: EMPTY
20673: ST_TO_ADDR
// mc_defender := [ ] ;
20674: LD_ADDR_EXP 101
20678: PUSH
20679: EMPTY
20680: ST_TO_ADDR
// mc_parking := [ ] ;
20681: LD_ADDR_EXP 103
20685: PUSH
20686: EMPTY
20687: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
20688: LD_ADDR_EXP 89
20692: PUSH
20693: EMPTY
20694: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
20695: LD_ADDR_EXP 91
20699: PUSH
20700: EMPTY
20701: ST_TO_ADDR
// mc_scan := [ ] ;
20702: LD_ADDR_EXP 102
20706: PUSH
20707: EMPTY
20708: ST_TO_ADDR
// mc_scan_area := [ ] ;
20709: LD_ADDR_EXP 104
20713: PUSH
20714: EMPTY
20715: ST_TO_ADDR
// mc_tech := [ ] ;
20716: LD_ADDR_EXP 106
20720: PUSH
20721: EMPTY
20722: ST_TO_ADDR
// mc_class := [ ] ;
20723: LD_ADDR_EXP 120
20727: PUSH
20728: EMPTY
20729: ST_TO_ADDR
// mc_class_case_use := [ ] ;
20730: LD_ADDR_EXP 121
20734: PUSH
20735: EMPTY
20736: ST_TO_ADDR
// end ;
20737: LD_VAR 0 1
20741: RET
// export function MC_Kill ( base ) ; begin
20742: LD_INT 0
20744: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
20745: LD_ADDR_EXP 79
20749: PUSH
20750: LD_EXP 79
20754: PPUSH
20755: LD_VAR 0 1
20759: PPUSH
20760: EMPTY
20761: PPUSH
20762: CALL_OW 1
20766: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
20767: LD_ADDR_EXP 80
20771: PUSH
20772: LD_EXP 80
20776: PPUSH
20777: LD_VAR 0 1
20781: PPUSH
20782: EMPTY
20783: PPUSH
20784: CALL_OW 1
20788: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
20789: LD_ADDR_EXP 81
20793: PUSH
20794: LD_EXP 81
20798: PPUSH
20799: LD_VAR 0 1
20803: PPUSH
20804: EMPTY
20805: PPUSH
20806: CALL_OW 1
20810: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
20811: LD_ADDR_EXP 82
20815: PUSH
20816: LD_EXP 82
20820: PPUSH
20821: LD_VAR 0 1
20825: PPUSH
20826: EMPTY
20827: PPUSH
20828: CALL_OW 1
20832: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
20833: LD_ADDR_EXP 83
20837: PUSH
20838: LD_EXP 83
20842: PPUSH
20843: LD_VAR 0 1
20847: PPUSH
20848: EMPTY
20849: PPUSH
20850: CALL_OW 1
20854: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
20855: LD_ADDR_EXP 84
20859: PUSH
20860: LD_EXP 84
20864: PPUSH
20865: LD_VAR 0 1
20869: PPUSH
20870: EMPTY
20871: PPUSH
20872: CALL_OW 1
20876: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
20877: LD_ADDR_EXP 85
20881: PUSH
20882: LD_EXP 85
20886: PPUSH
20887: LD_VAR 0 1
20891: PPUSH
20892: EMPTY
20893: PPUSH
20894: CALL_OW 1
20898: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
20899: LD_ADDR_EXP 86
20903: PUSH
20904: LD_EXP 86
20908: PPUSH
20909: LD_VAR 0 1
20913: PPUSH
20914: EMPTY
20915: PPUSH
20916: CALL_OW 1
20920: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
20921: LD_ADDR_EXP 87
20925: PUSH
20926: LD_EXP 87
20930: PPUSH
20931: LD_VAR 0 1
20935: PPUSH
20936: EMPTY
20937: PPUSH
20938: CALL_OW 1
20942: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
20943: LD_ADDR_EXP 88
20947: PUSH
20948: LD_EXP 88
20952: PPUSH
20953: LD_VAR 0 1
20957: PPUSH
20958: EMPTY
20959: PPUSH
20960: CALL_OW 1
20964: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
20965: LD_ADDR_EXP 89
20969: PUSH
20970: LD_EXP 89
20974: PPUSH
20975: LD_VAR 0 1
20979: PPUSH
20980: EMPTY
20981: PPUSH
20982: CALL_OW 1
20986: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
20987: LD_ADDR_EXP 90
20991: PUSH
20992: LD_EXP 90
20996: PPUSH
20997: LD_VAR 0 1
21001: PPUSH
21002: LD_INT 0
21004: PPUSH
21005: CALL_OW 1
21009: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
21010: LD_ADDR_EXP 91
21014: PUSH
21015: LD_EXP 91
21019: PPUSH
21020: LD_VAR 0 1
21024: PPUSH
21025: EMPTY
21026: PPUSH
21027: CALL_OW 1
21031: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
21032: LD_ADDR_EXP 92
21036: PUSH
21037: LD_EXP 92
21041: PPUSH
21042: LD_VAR 0 1
21046: PPUSH
21047: EMPTY
21048: PPUSH
21049: CALL_OW 1
21053: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
21054: LD_ADDR_EXP 93
21058: PUSH
21059: LD_EXP 93
21063: PPUSH
21064: LD_VAR 0 1
21068: PPUSH
21069: EMPTY
21070: PPUSH
21071: CALL_OW 1
21075: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
21076: LD_ADDR_EXP 94
21080: PUSH
21081: LD_EXP 94
21085: PPUSH
21086: LD_VAR 0 1
21090: PPUSH
21091: EMPTY
21092: PPUSH
21093: CALL_OW 1
21097: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
21098: LD_ADDR_EXP 95
21102: PUSH
21103: LD_EXP 95
21107: PPUSH
21108: LD_VAR 0 1
21112: PPUSH
21113: EMPTY
21114: PPUSH
21115: CALL_OW 1
21119: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
21120: LD_ADDR_EXP 96
21124: PUSH
21125: LD_EXP 96
21129: PPUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: EMPTY
21136: PPUSH
21137: CALL_OW 1
21141: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
21142: LD_ADDR_EXP 97
21146: PUSH
21147: LD_EXP 97
21151: PPUSH
21152: LD_VAR 0 1
21156: PPUSH
21157: EMPTY
21158: PPUSH
21159: CALL_OW 1
21163: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
21164: LD_ADDR_EXP 98
21168: PUSH
21169: LD_EXP 98
21173: PPUSH
21174: LD_VAR 0 1
21178: PPUSH
21179: EMPTY
21180: PPUSH
21181: CALL_OW 1
21185: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
21186: LD_ADDR_EXP 99
21190: PUSH
21191: LD_EXP 99
21195: PPUSH
21196: LD_VAR 0 1
21200: PPUSH
21201: EMPTY
21202: PPUSH
21203: CALL_OW 1
21207: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
21208: LD_ADDR_EXP 100
21212: PUSH
21213: LD_EXP 100
21217: PPUSH
21218: LD_VAR 0 1
21222: PPUSH
21223: EMPTY
21224: PPUSH
21225: CALL_OW 1
21229: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
21230: LD_ADDR_EXP 101
21234: PUSH
21235: LD_EXP 101
21239: PPUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: EMPTY
21246: PPUSH
21247: CALL_OW 1
21251: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
21252: LD_ADDR_EXP 102
21256: PUSH
21257: LD_EXP 102
21261: PPUSH
21262: LD_VAR 0 1
21266: PPUSH
21267: EMPTY
21268: PPUSH
21269: CALL_OW 1
21273: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
21274: LD_ADDR_EXP 103
21278: PUSH
21279: LD_EXP 103
21283: PPUSH
21284: LD_VAR 0 1
21288: PPUSH
21289: EMPTY
21290: PPUSH
21291: CALL_OW 1
21295: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
21296: LD_ADDR_EXP 104
21300: PUSH
21301: LD_EXP 104
21305: PPUSH
21306: LD_VAR 0 1
21310: PPUSH
21311: EMPTY
21312: PPUSH
21313: CALL_OW 1
21317: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
21318: LD_ADDR_EXP 106
21322: PUSH
21323: LD_EXP 106
21327: PPUSH
21328: LD_VAR 0 1
21332: PPUSH
21333: EMPTY
21334: PPUSH
21335: CALL_OW 1
21339: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
21340: LD_ADDR_EXP 108
21344: PUSH
21345: LD_EXP 108
21349: PPUSH
21350: LD_VAR 0 1
21354: PPUSH
21355: EMPTY
21356: PPUSH
21357: CALL_OW 1
21361: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
21362: LD_ADDR_EXP 109
21366: PUSH
21367: LD_EXP 109
21371: PPUSH
21372: LD_VAR 0 1
21376: PPUSH
21377: EMPTY
21378: PPUSH
21379: CALL_OW 1
21383: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
21384: LD_ADDR_EXP 110
21388: PUSH
21389: LD_EXP 110
21393: PPUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: EMPTY
21400: PPUSH
21401: CALL_OW 1
21405: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
21406: LD_ADDR_EXP 111
21410: PUSH
21411: LD_EXP 111
21415: PPUSH
21416: LD_VAR 0 1
21420: PPUSH
21421: EMPTY
21422: PPUSH
21423: CALL_OW 1
21427: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
21428: LD_ADDR_EXP 112
21432: PUSH
21433: LD_EXP 112
21437: PPUSH
21438: LD_VAR 0 1
21442: PPUSH
21443: EMPTY
21444: PPUSH
21445: CALL_OW 1
21449: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
21450: LD_ADDR_EXP 113
21454: PUSH
21455: LD_EXP 113
21459: PPUSH
21460: LD_VAR 0 1
21464: PPUSH
21465: EMPTY
21466: PPUSH
21467: CALL_OW 1
21471: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
21472: LD_ADDR_EXP 114
21476: PUSH
21477: LD_EXP 114
21481: PPUSH
21482: LD_VAR 0 1
21486: PPUSH
21487: EMPTY
21488: PPUSH
21489: CALL_OW 1
21493: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
21494: LD_ADDR_EXP 115
21498: PUSH
21499: LD_EXP 115
21503: PPUSH
21504: LD_VAR 0 1
21508: PPUSH
21509: EMPTY
21510: PPUSH
21511: CALL_OW 1
21515: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
21516: LD_ADDR_EXP 116
21520: PUSH
21521: LD_EXP 116
21525: PPUSH
21526: LD_VAR 0 1
21530: PPUSH
21531: EMPTY
21532: PPUSH
21533: CALL_OW 1
21537: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
21538: LD_ADDR_EXP 117
21542: PUSH
21543: LD_EXP 117
21547: PPUSH
21548: LD_VAR 0 1
21552: PPUSH
21553: EMPTY
21554: PPUSH
21555: CALL_OW 1
21559: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
21560: LD_ADDR_EXP 118
21564: PUSH
21565: LD_EXP 118
21569: PPUSH
21570: LD_VAR 0 1
21574: PPUSH
21575: EMPTY
21576: PPUSH
21577: CALL_OW 1
21581: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
21582: LD_ADDR_EXP 119
21586: PUSH
21587: LD_EXP 119
21591: PPUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: EMPTY
21598: PPUSH
21599: CALL_OW 1
21603: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
21604: LD_ADDR_EXP 120
21608: PUSH
21609: LD_EXP 120
21613: PPUSH
21614: LD_VAR 0 1
21618: PPUSH
21619: EMPTY
21620: PPUSH
21621: CALL_OW 1
21625: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
21626: LD_ADDR_EXP 121
21630: PUSH
21631: LD_EXP 121
21635: PPUSH
21636: LD_VAR 0 1
21640: PPUSH
21641: LD_INT 0
21643: PPUSH
21644: CALL_OW 1
21648: ST_TO_ADDR
// end ;
21649: LD_VAR 0 2
21653: RET
// export function MC_Add ( side , units ) ; var base ; begin
21654: LD_INT 0
21656: PPUSH
21657: PPUSH
// base := mc_bases + 1 ;
21658: LD_ADDR_VAR 0 4
21662: PUSH
21663: LD_EXP 79
21667: PUSH
21668: LD_INT 1
21670: PLUS
21671: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
21672: LD_ADDR_EXP 105
21676: PUSH
21677: LD_EXP 105
21681: PPUSH
21682: LD_VAR 0 4
21686: PPUSH
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 1
21696: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
21697: LD_ADDR_EXP 79
21701: PUSH
21702: LD_EXP 79
21706: PPUSH
21707: LD_VAR 0 4
21711: PPUSH
21712: LD_VAR 0 2
21716: PPUSH
21717: CALL_OW 1
21721: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
21722: LD_ADDR_EXP 80
21726: PUSH
21727: LD_EXP 80
21731: PPUSH
21732: LD_VAR 0 4
21736: PPUSH
21737: EMPTY
21738: PPUSH
21739: CALL_OW 1
21743: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
21744: LD_ADDR_EXP 81
21748: PUSH
21749: LD_EXP 81
21753: PPUSH
21754: LD_VAR 0 4
21758: PPUSH
21759: EMPTY
21760: PPUSH
21761: CALL_OW 1
21765: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
21766: LD_ADDR_EXP 82
21770: PUSH
21771: LD_EXP 82
21775: PPUSH
21776: LD_VAR 0 4
21780: PPUSH
21781: EMPTY
21782: PPUSH
21783: CALL_OW 1
21787: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
21788: LD_ADDR_EXP 83
21792: PUSH
21793: LD_EXP 83
21797: PPUSH
21798: LD_VAR 0 4
21802: PPUSH
21803: EMPTY
21804: PPUSH
21805: CALL_OW 1
21809: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
21810: LD_ADDR_EXP 84
21814: PUSH
21815: LD_EXP 84
21819: PPUSH
21820: LD_VAR 0 4
21824: PPUSH
21825: EMPTY
21826: PPUSH
21827: CALL_OW 1
21831: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
21832: LD_ADDR_EXP 85
21836: PUSH
21837: LD_EXP 85
21841: PPUSH
21842: LD_VAR 0 4
21846: PPUSH
21847: EMPTY
21848: PPUSH
21849: CALL_OW 1
21853: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
21854: LD_ADDR_EXP 86
21858: PUSH
21859: LD_EXP 86
21863: PPUSH
21864: LD_VAR 0 4
21868: PPUSH
21869: EMPTY
21870: PPUSH
21871: CALL_OW 1
21875: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
21876: LD_ADDR_EXP 87
21880: PUSH
21881: LD_EXP 87
21885: PPUSH
21886: LD_VAR 0 4
21890: PPUSH
21891: EMPTY
21892: PPUSH
21893: CALL_OW 1
21897: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
21898: LD_ADDR_EXP 88
21902: PUSH
21903: LD_EXP 88
21907: PPUSH
21908: LD_VAR 0 4
21912: PPUSH
21913: EMPTY
21914: PPUSH
21915: CALL_OW 1
21919: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
21920: LD_ADDR_EXP 89
21924: PUSH
21925: LD_EXP 89
21929: PPUSH
21930: LD_VAR 0 4
21934: PPUSH
21935: EMPTY
21936: PPUSH
21937: CALL_OW 1
21941: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
21942: LD_ADDR_EXP 90
21946: PUSH
21947: LD_EXP 90
21951: PPUSH
21952: LD_VAR 0 4
21956: PPUSH
21957: LD_INT 0
21959: PPUSH
21960: CALL_OW 1
21964: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
21965: LD_ADDR_EXP 91
21969: PUSH
21970: LD_EXP 91
21974: PPUSH
21975: LD_VAR 0 4
21979: PPUSH
21980: EMPTY
21981: PPUSH
21982: CALL_OW 1
21986: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
21987: LD_ADDR_EXP 92
21991: PUSH
21992: LD_EXP 92
21996: PPUSH
21997: LD_VAR 0 4
22001: PPUSH
22002: EMPTY
22003: PPUSH
22004: CALL_OW 1
22008: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
22009: LD_ADDR_EXP 93
22013: PUSH
22014: LD_EXP 93
22018: PPUSH
22019: LD_VAR 0 4
22023: PPUSH
22024: EMPTY
22025: PPUSH
22026: CALL_OW 1
22030: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
22031: LD_ADDR_EXP 94
22035: PUSH
22036: LD_EXP 94
22040: PPUSH
22041: LD_VAR 0 4
22045: PPUSH
22046: EMPTY
22047: PPUSH
22048: CALL_OW 1
22052: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
22053: LD_ADDR_EXP 95
22057: PUSH
22058: LD_EXP 95
22062: PPUSH
22063: LD_VAR 0 4
22067: PPUSH
22068: EMPTY
22069: PPUSH
22070: CALL_OW 1
22074: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
22075: LD_ADDR_EXP 96
22079: PUSH
22080: LD_EXP 96
22084: PPUSH
22085: LD_VAR 0 4
22089: PPUSH
22090: EMPTY
22091: PPUSH
22092: CALL_OW 1
22096: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
22097: LD_ADDR_EXP 97
22101: PUSH
22102: LD_EXP 97
22106: PPUSH
22107: LD_VAR 0 4
22111: PPUSH
22112: EMPTY
22113: PPUSH
22114: CALL_OW 1
22118: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
22119: LD_ADDR_EXP 98
22123: PUSH
22124: LD_EXP 98
22128: PPUSH
22129: LD_VAR 0 4
22133: PPUSH
22134: EMPTY
22135: PPUSH
22136: CALL_OW 1
22140: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
22141: LD_ADDR_EXP 99
22145: PUSH
22146: LD_EXP 99
22150: PPUSH
22151: LD_VAR 0 4
22155: PPUSH
22156: EMPTY
22157: PPUSH
22158: CALL_OW 1
22162: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
22163: LD_ADDR_EXP 100
22167: PUSH
22168: LD_EXP 100
22172: PPUSH
22173: LD_VAR 0 4
22177: PPUSH
22178: EMPTY
22179: PPUSH
22180: CALL_OW 1
22184: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
22185: LD_ADDR_EXP 101
22189: PUSH
22190: LD_EXP 101
22194: PPUSH
22195: LD_VAR 0 4
22199: PPUSH
22200: EMPTY
22201: PPUSH
22202: CALL_OW 1
22206: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
22207: LD_ADDR_EXP 102
22211: PUSH
22212: LD_EXP 102
22216: PPUSH
22217: LD_VAR 0 4
22221: PPUSH
22222: EMPTY
22223: PPUSH
22224: CALL_OW 1
22228: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
22229: LD_ADDR_EXP 103
22233: PUSH
22234: LD_EXP 103
22238: PPUSH
22239: LD_VAR 0 4
22243: PPUSH
22244: EMPTY
22245: PPUSH
22246: CALL_OW 1
22250: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
22251: LD_ADDR_EXP 104
22255: PUSH
22256: LD_EXP 104
22260: PPUSH
22261: LD_VAR 0 4
22265: PPUSH
22266: EMPTY
22267: PPUSH
22268: CALL_OW 1
22272: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
22273: LD_ADDR_EXP 106
22277: PUSH
22278: LD_EXP 106
22282: PPUSH
22283: LD_VAR 0 4
22287: PPUSH
22288: EMPTY
22289: PPUSH
22290: CALL_OW 1
22294: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
22295: LD_ADDR_EXP 108
22299: PUSH
22300: LD_EXP 108
22304: PPUSH
22305: LD_VAR 0 4
22309: PPUSH
22310: EMPTY
22311: PPUSH
22312: CALL_OW 1
22316: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
22317: LD_ADDR_EXP 109
22321: PUSH
22322: LD_EXP 109
22326: PPUSH
22327: LD_VAR 0 4
22331: PPUSH
22332: EMPTY
22333: PPUSH
22334: CALL_OW 1
22338: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
22339: LD_ADDR_EXP 110
22343: PUSH
22344: LD_EXP 110
22348: PPUSH
22349: LD_VAR 0 4
22353: PPUSH
22354: EMPTY
22355: PPUSH
22356: CALL_OW 1
22360: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
22361: LD_ADDR_EXP 111
22365: PUSH
22366: LD_EXP 111
22370: PPUSH
22371: LD_VAR 0 4
22375: PPUSH
22376: EMPTY
22377: PPUSH
22378: CALL_OW 1
22382: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
22383: LD_ADDR_EXP 112
22387: PUSH
22388: LD_EXP 112
22392: PPUSH
22393: LD_VAR 0 4
22397: PPUSH
22398: EMPTY
22399: PPUSH
22400: CALL_OW 1
22404: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
22405: LD_ADDR_EXP 113
22409: PUSH
22410: LD_EXP 113
22414: PPUSH
22415: LD_VAR 0 4
22419: PPUSH
22420: EMPTY
22421: PPUSH
22422: CALL_OW 1
22426: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
22427: LD_ADDR_EXP 114
22431: PUSH
22432: LD_EXP 114
22436: PPUSH
22437: LD_VAR 0 4
22441: PPUSH
22442: EMPTY
22443: PPUSH
22444: CALL_OW 1
22448: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
22449: LD_ADDR_EXP 115
22453: PUSH
22454: LD_EXP 115
22458: PPUSH
22459: LD_VAR 0 4
22463: PPUSH
22464: EMPTY
22465: PPUSH
22466: CALL_OW 1
22470: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
22471: LD_ADDR_EXP 116
22475: PUSH
22476: LD_EXP 116
22480: PPUSH
22481: LD_VAR 0 4
22485: PPUSH
22486: EMPTY
22487: PPUSH
22488: CALL_OW 1
22492: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
22493: LD_ADDR_EXP 117
22497: PUSH
22498: LD_EXP 117
22502: PPUSH
22503: LD_VAR 0 4
22507: PPUSH
22508: EMPTY
22509: PPUSH
22510: CALL_OW 1
22514: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
22515: LD_ADDR_EXP 118
22519: PUSH
22520: LD_EXP 118
22524: PPUSH
22525: LD_VAR 0 4
22529: PPUSH
22530: EMPTY
22531: PPUSH
22532: CALL_OW 1
22536: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
22537: LD_ADDR_EXP 119
22541: PUSH
22542: LD_EXP 119
22546: PPUSH
22547: LD_VAR 0 4
22551: PPUSH
22552: EMPTY
22553: PPUSH
22554: CALL_OW 1
22558: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
22559: LD_ADDR_EXP 120
22563: PUSH
22564: LD_EXP 120
22568: PPUSH
22569: LD_VAR 0 4
22573: PPUSH
22574: EMPTY
22575: PPUSH
22576: CALL_OW 1
22580: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
22581: LD_ADDR_EXP 121
22585: PUSH
22586: LD_EXP 121
22590: PPUSH
22591: LD_VAR 0 4
22595: PPUSH
22596: LD_INT 0
22598: PPUSH
22599: CALL_OW 1
22603: ST_TO_ADDR
// result := base ;
22604: LD_ADDR_VAR 0 3
22608: PUSH
22609: LD_VAR 0 4
22613: ST_TO_ADDR
// end ;
22614: LD_VAR 0 3
22618: RET
// export function MC_Start ( ) ; var i ; begin
22619: LD_INT 0
22621: PPUSH
22622: PPUSH
// for i = 1 to mc_bases do
22623: LD_ADDR_VAR 0 2
22627: PUSH
22628: DOUBLE
22629: LD_INT 1
22631: DEC
22632: ST_TO_ADDR
22633: LD_EXP 79
22637: PUSH
22638: FOR_TO
22639: IFFALSE 23716
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
22641: LD_ADDR_EXP 79
22645: PUSH
22646: LD_EXP 79
22650: PPUSH
22651: LD_VAR 0 2
22655: PPUSH
22656: LD_EXP 79
22660: PUSH
22661: LD_VAR 0 2
22665: ARRAY
22666: PUSH
22667: LD_INT 0
22669: DIFF
22670: PPUSH
22671: CALL_OW 1
22675: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
22676: LD_ADDR_EXP 80
22680: PUSH
22681: LD_EXP 80
22685: PPUSH
22686: LD_VAR 0 2
22690: PPUSH
22691: EMPTY
22692: PPUSH
22693: CALL_OW 1
22697: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
22698: LD_ADDR_EXP 81
22702: PUSH
22703: LD_EXP 81
22707: PPUSH
22708: LD_VAR 0 2
22712: PPUSH
22713: EMPTY
22714: PPUSH
22715: CALL_OW 1
22719: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
22720: LD_ADDR_EXP 82
22724: PUSH
22725: LD_EXP 82
22729: PPUSH
22730: LD_VAR 0 2
22734: PPUSH
22735: EMPTY
22736: PPUSH
22737: CALL_OW 1
22741: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
22742: LD_ADDR_EXP 83
22746: PUSH
22747: LD_EXP 83
22751: PPUSH
22752: LD_VAR 0 2
22756: PPUSH
22757: EMPTY
22758: PUSH
22759: EMPTY
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PPUSH
22765: CALL_OW 1
22769: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
22770: LD_ADDR_EXP 84
22774: PUSH
22775: LD_EXP 84
22779: PPUSH
22780: LD_VAR 0 2
22784: PPUSH
22785: EMPTY
22786: PPUSH
22787: CALL_OW 1
22791: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
22792: LD_ADDR_EXP 111
22796: PUSH
22797: LD_EXP 111
22801: PPUSH
22802: LD_VAR 0 2
22806: PPUSH
22807: EMPTY
22808: PPUSH
22809: CALL_OW 1
22813: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
22814: LD_ADDR_EXP 85
22818: PUSH
22819: LD_EXP 85
22823: PPUSH
22824: LD_VAR 0 2
22828: PPUSH
22829: EMPTY
22830: PPUSH
22831: CALL_OW 1
22835: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
22836: LD_ADDR_EXP 86
22840: PUSH
22841: LD_EXP 86
22845: PPUSH
22846: LD_VAR 0 2
22850: PPUSH
22851: EMPTY
22852: PPUSH
22853: CALL_OW 1
22857: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
22858: LD_ADDR_EXP 87
22862: PUSH
22863: LD_EXP 87
22867: PPUSH
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_EXP 79
22877: PUSH
22878: LD_VAR 0 2
22882: ARRAY
22883: PPUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 30
22889: PUSH
22890: LD_INT 32
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 30
22899: PUSH
22900: LD_INT 33
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: LIST
22911: PPUSH
22912: CALL_OW 72
22916: PPUSH
22917: CALL_OW 1
22921: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
22922: LD_ADDR_EXP 88
22926: PUSH
22927: LD_EXP 88
22931: PPUSH
22932: LD_VAR 0 2
22936: PPUSH
22937: LD_EXP 79
22941: PUSH
22942: LD_VAR 0 2
22946: ARRAY
22947: PPUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 30
22953: PUSH
22954: LD_INT 32
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 30
22963: PUSH
22964: LD_INT 31
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 58
22978: PUSH
22979: EMPTY
22980: LIST
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PPUSH
22986: CALL_OW 72
22990: PPUSH
22991: CALL_OW 1
22995: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
22996: LD_ADDR_EXP 89
23000: PUSH
23001: LD_EXP 89
23005: PPUSH
23006: LD_VAR 0 2
23010: PPUSH
23011: EMPTY
23012: PPUSH
23013: CALL_OW 1
23017: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
23018: LD_ADDR_EXP 93
23022: PUSH
23023: LD_EXP 93
23027: PPUSH
23028: LD_VAR 0 2
23032: PPUSH
23033: EMPTY
23034: PPUSH
23035: CALL_OW 1
23039: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
23040: LD_ADDR_EXP 92
23044: PUSH
23045: LD_EXP 92
23049: PPUSH
23050: LD_VAR 0 2
23054: PPUSH
23055: EMPTY
23056: PPUSH
23057: CALL_OW 1
23061: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
23062: LD_ADDR_EXP 94
23066: PUSH
23067: LD_EXP 94
23071: PPUSH
23072: LD_VAR 0 2
23076: PPUSH
23077: EMPTY
23078: PPUSH
23079: CALL_OW 1
23083: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
23084: LD_ADDR_EXP 95
23088: PUSH
23089: LD_EXP 95
23093: PPUSH
23094: LD_VAR 0 2
23098: PPUSH
23099: EMPTY
23100: PPUSH
23101: CALL_OW 1
23105: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
23106: LD_ADDR_EXP 96
23110: PUSH
23111: LD_EXP 96
23115: PPUSH
23116: LD_VAR 0 2
23120: PPUSH
23121: EMPTY
23122: PPUSH
23123: CALL_OW 1
23127: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
23128: LD_ADDR_EXP 97
23132: PUSH
23133: LD_EXP 97
23137: PPUSH
23138: LD_VAR 0 2
23142: PPUSH
23143: EMPTY
23144: PPUSH
23145: CALL_OW 1
23149: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
23150: LD_ADDR_EXP 98
23154: PUSH
23155: LD_EXP 98
23159: PPUSH
23160: LD_VAR 0 2
23164: PPUSH
23165: EMPTY
23166: PPUSH
23167: CALL_OW 1
23171: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
23172: LD_ADDR_EXP 99
23176: PUSH
23177: LD_EXP 99
23181: PPUSH
23182: LD_VAR 0 2
23186: PPUSH
23187: EMPTY
23188: PPUSH
23189: CALL_OW 1
23193: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
23194: LD_ADDR_EXP 100
23198: PUSH
23199: LD_EXP 100
23203: PPUSH
23204: LD_VAR 0 2
23208: PPUSH
23209: EMPTY
23210: PPUSH
23211: CALL_OW 1
23215: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
23216: LD_ADDR_EXP 101
23220: PUSH
23221: LD_EXP 101
23225: PPUSH
23226: LD_VAR 0 2
23230: PPUSH
23231: EMPTY
23232: PPUSH
23233: CALL_OW 1
23237: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
23238: LD_ADDR_EXP 90
23242: PUSH
23243: LD_EXP 90
23247: PPUSH
23248: LD_VAR 0 2
23252: PPUSH
23253: LD_INT 0
23255: PPUSH
23256: CALL_OW 1
23260: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
23261: LD_ADDR_EXP 103
23265: PUSH
23266: LD_EXP 103
23270: PPUSH
23271: LD_VAR 0 2
23275: PPUSH
23276: LD_INT 0
23278: PPUSH
23279: CALL_OW 1
23283: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
23284: LD_ADDR_EXP 91
23288: PUSH
23289: LD_EXP 91
23293: PPUSH
23294: LD_VAR 0 2
23298: PPUSH
23299: EMPTY
23300: PPUSH
23301: CALL_OW 1
23305: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
23306: LD_ADDR_EXP 102
23310: PUSH
23311: LD_EXP 102
23315: PPUSH
23316: LD_VAR 0 2
23320: PPUSH
23321: LD_INT 0
23323: PPUSH
23324: CALL_OW 1
23328: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
23329: LD_ADDR_EXP 104
23333: PUSH
23334: LD_EXP 104
23338: PPUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: EMPTY
23345: PPUSH
23346: CALL_OW 1
23350: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
23351: LD_ADDR_EXP 107
23355: PUSH
23356: LD_EXP 107
23360: PPUSH
23361: LD_VAR 0 2
23365: PPUSH
23366: LD_INT 0
23368: PPUSH
23369: CALL_OW 1
23373: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
23374: LD_ADDR_EXP 108
23378: PUSH
23379: LD_EXP 108
23383: PPUSH
23384: LD_VAR 0 2
23388: PPUSH
23389: EMPTY
23390: PPUSH
23391: CALL_OW 1
23395: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
23396: LD_ADDR_EXP 109
23400: PUSH
23401: LD_EXP 109
23405: PPUSH
23406: LD_VAR 0 2
23410: PPUSH
23411: EMPTY
23412: PPUSH
23413: CALL_OW 1
23417: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
23418: LD_ADDR_EXP 110
23422: PUSH
23423: LD_EXP 110
23427: PPUSH
23428: LD_VAR 0 2
23432: PPUSH
23433: EMPTY
23434: PPUSH
23435: CALL_OW 1
23439: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
23440: LD_ADDR_EXP 112
23444: PUSH
23445: LD_EXP 112
23449: PPUSH
23450: LD_VAR 0 2
23454: PPUSH
23455: LD_EXP 79
23459: PUSH
23460: LD_VAR 0 2
23464: ARRAY
23465: PPUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 30
23471: PUSH
23472: LD_INT 6
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 30
23481: PUSH
23482: LD_INT 7
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 30
23491: PUSH
23492: LD_INT 8
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: PPUSH
23505: CALL_OW 72
23509: PPUSH
23510: CALL_OW 1
23514: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
23515: LD_ADDR_EXP 113
23519: PUSH
23520: LD_EXP 113
23524: PPUSH
23525: LD_VAR 0 2
23529: PPUSH
23530: EMPTY
23531: PPUSH
23532: CALL_OW 1
23536: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
23537: LD_ADDR_EXP 114
23541: PUSH
23542: LD_EXP 114
23546: PPUSH
23547: LD_VAR 0 2
23551: PPUSH
23552: EMPTY
23553: PPUSH
23554: CALL_OW 1
23558: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
23559: LD_ADDR_EXP 115
23563: PUSH
23564: LD_EXP 115
23568: PPUSH
23569: LD_VAR 0 2
23573: PPUSH
23574: EMPTY
23575: PPUSH
23576: CALL_OW 1
23580: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
23581: LD_ADDR_EXP 116
23585: PUSH
23586: LD_EXP 116
23590: PPUSH
23591: LD_VAR 0 2
23595: PPUSH
23596: EMPTY
23597: PPUSH
23598: CALL_OW 1
23602: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
23603: LD_ADDR_EXP 117
23607: PUSH
23608: LD_EXP 117
23612: PPUSH
23613: LD_VAR 0 2
23617: PPUSH
23618: EMPTY
23619: PPUSH
23620: CALL_OW 1
23624: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
23625: LD_ADDR_EXP 118
23629: PUSH
23630: LD_EXP 118
23634: PPUSH
23635: LD_VAR 0 2
23639: PPUSH
23640: EMPTY
23641: PPUSH
23642: CALL_OW 1
23646: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
23647: LD_ADDR_EXP 119
23651: PUSH
23652: LD_EXP 119
23656: PPUSH
23657: LD_VAR 0 2
23661: PPUSH
23662: EMPTY
23663: PPUSH
23664: CALL_OW 1
23668: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
23669: LD_ADDR_EXP 120
23673: PUSH
23674: LD_EXP 120
23678: PPUSH
23679: LD_VAR 0 2
23683: PPUSH
23684: EMPTY
23685: PPUSH
23686: CALL_OW 1
23690: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
23691: LD_ADDR_EXP 121
23695: PUSH
23696: LD_EXP 121
23700: PPUSH
23701: LD_VAR 0 2
23705: PPUSH
23706: LD_INT 0
23708: PPUSH
23709: CALL_OW 1
23713: ST_TO_ADDR
// end ;
23714: GO 22638
23716: POP
23717: POP
// MC_InitSides ( ) ;
23718: CALL 24004 0 0
// MC_InitResearch ( ) ;
23722: CALL 23743 0 0
// CustomInitMacro ( ) ;
23726: CALL 213 0 0
// skirmish := true ;
23730: LD_ADDR_EXP 77
23734: PUSH
23735: LD_INT 1
23737: ST_TO_ADDR
// end ;
23738: LD_VAR 0 1
23742: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
23743: LD_INT 0
23745: PPUSH
23746: PPUSH
23747: PPUSH
23748: PPUSH
23749: PPUSH
23750: PPUSH
// if not mc_bases then
23751: LD_EXP 79
23755: NOT
23756: IFFALSE 23760
// exit ;
23758: GO 23999
// for i = 1 to 8 do
23760: LD_ADDR_VAR 0 2
23764: PUSH
23765: DOUBLE
23766: LD_INT 1
23768: DEC
23769: ST_TO_ADDR
23770: LD_INT 8
23772: PUSH
23773: FOR_TO
23774: IFFALSE 23800
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
23776: LD_ADDR_EXP 106
23780: PUSH
23781: LD_EXP 106
23785: PPUSH
23786: LD_VAR 0 2
23790: PPUSH
23791: EMPTY
23792: PPUSH
23793: CALL_OW 1
23797: ST_TO_ADDR
23798: GO 23773
23800: POP
23801: POP
// tmp := [ ] ;
23802: LD_ADDR_VAR 0 5
23806: PUSH
23807: EMPTY
23808: ST_TO_ADDR
// for i = 1 to mc_sides do
23809: LD_ADDR_VAR 0 2
23813: PUSH
23814: DOUBLE
23815: LD_INT 1
23817: DEC
23818: ST_TO_ADDR
23819: LD_EXP 105
23823: PUSH
23824: FOR_TO
23825: IFFALSE 23883
// if not mc_sides [ i ] in tmp then
23827: LD_EXP 105
23831: PUSH
23832: LD_VAR 0 2
23836: ARRAY
23837: PUSH
23838: LD_VAR 0 5
23842: IN
23843: NOT
23844: IFFALSE 23881
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
23846: LD_ADDR_VAR 0 5
23850: PUSH
23851: LD_VAR 0 5
23855: PPUSH
23856: LD_VAR 0 5
23860: PUSH
23861: LD_INT 1
23863: PLUS
23864: PPUSH
23865: LD_EXP 105
23869: PUSH
23870: LD_VAR 0 2
23874: ARRAY
23875: PPUSH
23876: CALL_OW 2
23880: ST_TO_ADDR
23881: GO 23824
23883: POP
23884: POP
// if not tmp then
23885: LD_VAR 0 5
23889: NOT
23890: IFFALSE 23894
// exit ;
23892: GO 23999
// for j in tmp do
23894: LD_ADDR_VAR 0 3
23898: PUSH
23899: LD_VAR 0 5
23903: PUSH
23904: FOR_IN
23905: IFFALSE 23997
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
23907: LD_ADDR_VAR 0 6
23911: PUSH
23912: LD_INT 22
23914: PUSH
23915: LD_VAR 0 3
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PPUSH
23924: CALL_OW 69
23928: ST_TO_ADDR
// if not un then
23929: LD_VAR 0 6
23933: NOT
23934: IFFALSE 23938
// continue ;
23936: GO 23904
// nation := GetNation ( un [ 1 ] ) ;
23938: LD_ADDR_VAR 0 4
23942: PUSH
23943: LD_VAR 0 6
23947: PUSH
23948: LD_INT 1
23950: ARRAY
23951: PPUSH
23952: CALL_OW 248
23956: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
23957: LD_ADDR_EXP 106
23961: PUSH
23962: LD_EXP 106
23966: PPUSH
23967: LD_VAR 0 3
23971: PPUSH
23972: LD_VAR 0 3
23976: PPUSH
23977: LD_VAR 0 4
23981: PPUSH
23982: LD_INT 1
23984: PPUSH
23985: CALL 50609 0 3
23989: PPUSH
23990: CALL_OW 1
23994: ST_TO_ADDR
// end ;
23995: GO 23904
23997: POP
23998: POP
// end ;
23999: LD_VAR 0 1
24003: RET
// export function MC_InitSides ( ) ; var i ; begin
24004: LD_INT 0
24006: PPUSH
24007: PPUSH
// if not mc_bases then
24008: LD_EXP 79
24012: NOT
24013: IFFALSE 24017
// exit ;
24015: GO 24091
// for i = 1 to mc_bases do
24017: LD_ADDR_VAR 0 2
24021: PUSH
24022: DOUBLE
24023: LD_INT 1
24025: DEC
24026: ST_TO_ADDR
24027: LD_EXP 79
24031: PUSH
24032: FOR_TO
24033: IFFALSE 24089
// if mc_bases [ i ] then
24035: LD_EXP 79
24039: PUSH
24040: LD_VAR 0 2
24044: ARRAY
24045: IFFALSE 24087
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
24047: LD_ADDR_EXP 105
24051: PUSH
24052: LD_EXP 105
24056: PPUSH
24057: LD_VAR 0 2
24061: PPUSH
24062: LD_EXP 79
24066: PUSH
24067: LD_VAR 0 2
24071: ARRAY
24072: PUSH
24073: LD_INT 1
24075: ARRAY
24076: PPUSH
24077: CALL_OW 255
24081: PPUSH
24082: CALL_OW 1
24086: ST_TO_ADDR
24087: GO 24032
24089: POP
24090: POP
// end ;
24091: LD_VAR 0 1
24095: RET
// every 0 0$01 trigger skirmish do
24096: LD_EXP 77
24100: IFFALSE 24254
24102: GO 24104
24104: DISABLE
// begin enable ;
24105: ENABLE
// MC_CheckBuildings ( ) ;
24106: CALL 28752 0 0
// MC_CheckPeopleLife ( ) ;
24110: CALL 28877 0 0
// RaiseSailEvent ( 100 ) ;
24114: LD_INT 100
24116: PPUSH
24117: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
24121: LD_INT 103
24123: PPUSH
24124: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
24128: LD_INT 104
24130: PPUSH
24131: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
24135: LD_INT 105
24137: PPUSH
24138: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
24142: LD_INT 106
24144: PPUSH
24145: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
24149: LD_INT 107
24151: PPUSH
24152: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
24156: LD_INT 108
24158: PPUSH
24159: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
24163: LD_INT 109
24165: PPUSH
24166: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
24170: LD_INT 110
24172: PPUSH
24173: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
24177: LD_INT 111
24179: PPUSH
24180: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
24184: LD_INT 112
24186: PPUSH
24187: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
24191: LD_INT 113
24193: PPUSH
24194: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
24198: LD_INT 120
24200: PPUSH
24201: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
24205: LD_INT 121
24207: PPUSH
24208: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
24212: LD_INT 122
24214: PPUSH
24215: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
24219: LD_INT 123
24221: PPUSH
24222: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
24226: LD_INT 124
24228: PPUSH
24229: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
24233: LD_INT 125
24235: PPUSH
24236: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
24240: LD_INT 126
24242: PPUSH
24243: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
24247: LD_INT 200
24249: PPUSH
24250: CALL_OW 427
// end ;
24254: END
// on SailEvent ( event ) do begin if event < 100 then
24255: LD_VAR 0 1
24259: PUSH
24260: LD_INT 100
24262: LESS
24263: IFFALSE 24274
// CustomEvent ( event ) ;
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL 10371 0 1
// if event = 100 then
24274: LD_VAR 0 1
24278: PUSH
24279: LD_INT 100
24281: EQUAL
24282: IFFALSE 24288
// MC_ClassManager ( ) ;
24284: CALL 24680 0 0
// if event = 101 then
24288: LD_VAR 0 1
24292: PUSH
24293: LD_INT 101
24295: EQUAL
24296: IFFALSE 24302
// MC_RepairBuildings ( ) ;
24298: CALL 29473 0 0
// if event = 102 then
24302: LD_VAR 0 1
24306: PUSH
24307: LD_INT 102
24309: EQUAL
24310: IFFALSE 24316
// MC_Heal ( ) ;
24312: CALL 30337 0 0
// if event = 103 then
24316: LD_VAR 0 1
24320: PUSH
24321: LD_INT 103
24323: EQUAL
24324: IFFALSE 24330
// MC_Build ( ) ;
24326: CALL 30759 0 0
// if event = 104 then
24330: LD_VAR 0 1
24334: PUSH
24335: LD_INT 104
24337: EQUAL
24338: IFFALSE 24344
// MC_TurretWeapon ( ) ;
24340: CALL 32372 0 0
// if event = 105 then
24344: LD_VAR 0 1
24348: PUSH
24349: LD_INT 105
24351: EQUAL
24352: IFFALSE 24358
// MC_BuildUpgrade ( ) ;
24354: CALL 31923 0 0
// if event = 106 then
24358: LD_VAR 0 1
24362: PUSH
24363: LD_INT 106
24365: EQUAL
24366: IFFALSE 24372
// MC_PlantMines ( ) ;
24368: CALL 32802 0 0
// if event = 107 then
24372: LD_VAR 0 1
24376: PUSH
24377: LD_INT 107
24379: EQUAL
24380: IFFALSE 24386
// MC_CollectCrates ( ) ;
24382: CALL 33600 0 0
// if event = 108 then
24386: LD_VAR 0 1
24390: PUSH
24391: LD_INT 108
24393: EQUAL
24394: IFFALSE 24400
// MC_LinkRemoteControl ( ) ;
24396: CALL 35376 0 0
// if event = 109 then
24400: LD_VAR 0 1
24404: PUSH
24405: LD_INT 109
24407: EQUAL
24408: IFFALSE 24414
// MC_ProduceVehicle ( ) ;
24410: CALL 35557 0 0
// if event = 110 then
24414: LD_VAR 0 1
24418: PUSH
24419: LD_INT 110
24421: EQUAL
24422: IFFALSE 24428
// MC_SendAttack ( ) ;
24424: CALL 36023 0 0
// if event = 111 then
24428: LD_VAR 0 1
24432: PUSH
24433: LD_INT 111
24435: EQUAL
24436: IFFALSE 24442
// MC_Defend ( ) ;
24438: CALL 36131 0 0
// if event = 112 then
24442: LD_VAR 0 1
24446: PUSH
24447: LD_INT 112
24449: EQUAL
24450: IFFALSE 24456
// MC_Research ( ) ;
24452: CALL 36736 0 0
// if event = 113 then
24456: LD_VAR 0 1
24460: PUSH
24461: LD_INT 113
24463: EQUAL
24464: IFFALSE 24470
// MC_MinesTrigger ( ) ;
24466: CALL 37850 0 0
// if event = 120 then
24470: LD_VAR 0 1
24474: PUSH
24475: LD_INT 120
24477: EQUAL
24478: IFFALSE 24484
// MC_RepairVehicle ( ) ;
24480: CALL 37949 0 0
// if event = 121 then
24484: LD_VAR 0 1
24488: PUSH
24489: LD_INT 121
24491: EQUAL
24492: IFFALSE 24498
// MC_TameApe ( ) ;
24494: CALL 38679 0 0
// if event = 122 then
24498: LD_VAR 0 1
24502: PUSH
24503: LD_INT 122
24505: EQUAL
24506: IFFALSE 24512
// MC_ChangeApeClass ( ) ;
24508: CALL 39508 0 0
// if event = 123 then
24512: LD_VAR 0 1
24516: PUSH
24517: LD_INT 123
24519: EQUAL
24520: IFFALSE 24526
// MC_Bazooka ( ) ;
24522: CALL 40158 0 0
// if event = 124 then
24526: LD_VAR 0 1
24530: PUSH
24531: LD_INT 124
24533: EQUAL
24534: IFFALSE 24540
// MC_TeleportExit ( ) ;
24536: CALL 40356 0 0
// if event = 125 then
24540: LD_VAR 0 1
24544: PUSH
24545: LD_INT 125
24547: EQUAL
24548: IFFALSE 24554
// MC_Deposits ( ) ;
24550: CALL 41003 0 0
// if event = 126 then
24554: LD_VAR 0 1
24558: PUSH
24559: LD_INT 126
24561: EQUAL
24562: IFFALSE 24568
// MC_RemoteDriver ( ) ;
24564: CALL 41628 0 0
// if event = 200 then
24568: LD_VAR 0 1
24572: PUSH
24573: LD_INT 200
24575: EQUAL
24576: IFFALSE 24582
// MC_Idle ( ) ;
24578: CALL 43577 0 0
// end ;
24582: PPOPN 1
24584: END
// export function MC_Reset ( base , tag ) ; var i ; begin
24585: LD_INT 0
24587: PPUSH
24588: PPUSH
// if not mc_bases [ base ] or not tag then
24589: LD_EXP 79
24593: PUSH
24594: LD_VAR 0 1
24598: ARRAY
24599: NOT
24600: PUSH
24601: LD_VAR 0 2
24605: NOT
24606: OR
24607: IFFALSE 24611
// exit ;
24609: GO 24675
// for i in mc_bases [ base ] union mc_ape [ base ] do
24611: LD_ADDR_VAR 0 4
24615: PUSH
24616: LD_EXP 79
24620: PUSH
24621: LD_VAR 0 1
24625: ARRAY
24626: PUSH
24627: LD_EXP 108
24631: PUSH
24632: LD_VAR 0 1
24636: ARRAY
24637: UNION
24638: PUSH
24639: FOR_IN
24640: IFFALSE 24673
// if GetTag ( i ) = tag then
24642: LD_VAR 0 4
24646: PPUSH
24647: CALL_OW 110
24651: PUSH
24652: LD_VAR 0 2
24656: EQUAL
24657: IFFALSE 24671
// SetTag ( i , 0 ) ;
24659: LD_VAR 0 4
24663: PPUSH
24664: LD_INT 0
24666: PPUSH
24667: CALL_OW 109
24671: GO 24639
24673: POP
24674: POP
// end ;
24675: LD_VAR 0 3
24679: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
24680: LD_INT 0
24682: PPUSH
24683: PPUSH
24684: PPUSH
24685: PPUSH
24686: PPUSH
24687: PPUSH
24688: PPUSH
24689: PPUSH
// if not mc_bases then
24690: LD_EXP 79
24694: NOT
24695: IFFALSE 24699
// exit ;
24697: GO 25157
// for i = 1 to mc_bases do
24699: LD_ADDR_VAR 0 2
24703: PUSH
24704: DOUBLE
24705: LD_INT 1
24707: DEC
24708: ST_TO_ADDR
24709: LD_EXP 79
24713: PUSH
24714: FOR_TO
24715: IFFALSE 25155
// begin tmp := MC_ClassCheckReq ( i ) ;
24717: LD_ADDR_VAR 0 4
24721: PUSH
24722: LD_VAR 0 2
24726: PPUSH
24727: CALL 25162 0 1
24731: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
24732: LD_ADDR_EXP 120
24736: PUSH
24737: LD_EXP 120
24741: PPUSH
24742: LD_VAR 0 2
24746: PPUSH
24747: LD_VAR 0 4
24751: PPUSH
24752: CALL_OW 1
24756: ST_TO_ADDR
// if not tmp then
24757: LD_VAR 0 4
24761: NOT
24762: IFFALSE 24766
// continue ;
24764: GO 24714
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
24766: LD_ADDR_VAR 0 6
24770: PUSH
24771: LD_EXP 79
24775: PUSH
24776: LD_VAR 0 2
24780: ARRAY
24781: PPUSH
24782: LD_INT 2
24784: PUSH
24785: LD_INT 30
24787: PUSH
24788: LD_INT 4
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 30
24797: PUSH
24798: LD_INT 5
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: LIST
24809: PPUSH
24810: CALL_OW 72
24814: PUSH
24815: LD_EXP 79
24819: PUSH
24820: LD_VAR 0 2
24824: ARRAY
24825: PPUSH
24826: LD_INT 2
24828: PUSH
24829: LD_INT 30
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 30
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: LIST
24853: PPUSH
24854: CALL_OW 72
24858: PUSH
24859: LD_EXP 79
24863: PUSH
24864: LD_VAR 0 2
24868: ARRAY
24869: PPUSH
24870: LD_INT 30
24872: PUSH
24873: LD_INT 3
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PPUSH
24880: CALL_OW 72
24884: PUSH
24885: LD_EXP 79
24889: PUSH
24890: LD_VAR 0 2
24894: ARRAY
24895: PPUSH
24896: LD_INT 2
24898: PUSH
24899: LD_INT 30
24901: PUSH
24902: LD_INT 6
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 30
24911: PUSH
24912: LD_INT 7
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 30
24921: PUSH
24922: LD_INT 8
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: PPUSH
24935: CALL_OW 72
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: ST_TO_ADDR
// for j = 1 to 4 do
24946: LD_ADDR_VAR 0 3
24950: PUSH
24951: DOUBLE
24952: LD_INT 1
24954: DEC
24955: ST_TO_ADDR
24956: LD_INT 4
24958: PUSH
24959: FOR_TO
24960: IFFALSE 25151
// begin if not tmp [ j ] then
24962: LD_VAR 0 4
24966: PUSH
24967: LD_VAR 0 3
24971: ARRAY
24972: NOT
24973: IFFALSE 24977
// continue ;
24975: GO 24959
// for p in tmp [ j ] do
24977: LD_ADDR_VAR 0 5
24981: PUSH
24982: LD_VAR 0 4
24986: PUSH
24987: LD_VAR 0 3
24991: ARRAY
24992: PUSH
24993: FOR_IN
24994: IFFALSE 25147
// begin if not b [ j ] then
24996: LD_VAR 0 6
25000: PUSH
25001: LD_VAR 0 3
25005: ARRAY
25006: NOT
25007: IFFALSE 25011
// break ;
25009: GO 25147
// e := 0 ;
25011: LD_ADDR_VAR 0 7
25015: PUSH
25016: LD_INT 0
25018: ST_TO_ADDR
// for k in b [ j ] do
25019: LD_ADDR_VAR 0 8
25023: PUSH
25024: LD_VAR 0 6
25028: PUSH
25029: LD_VAR 0 3
25033: ARRAY
25034: PUSH
25035: FOR_IN
25036: IFFALSE 25063
// if IsNotFull ( k ) then
25038: LD_VAR 0 8
25042: PPUSH
25043: CALL 55109 0 1
25047: IFFALSE 25061
// begin e := k ;
25049: LD_ADDR_VAR 0 7
25053: PUSH
25054: LD_VAR 0 8
25058: ST_TO_ADDR
// break ;
25059: GO 25063
// end ;
25061: GO 25035
25063: POP
25064: POP
// if e and not UnitGoingToBuilding ( p , e ) then
25065: LD_VAR 0 7
25069: PUSH
25070: LD_VAR 0 5
25074: PPUSH
25075: LD_VAR 0 7
25079: PPUSH
25080: CALL 92238 0 2
25084: NOT
25085: AND
25086: IFFALSE 25145
// begin if IsInUnit ( p ) then
25088: LD_VAR 0 5
25092: PPUSH
25093: CALL_OW 310
25097: IFFALSE 25108
// ComExitBuilding ( p ) ;
25099: LD_VAR 0 5
25103: PPUSH
25104: CALL_OW 122
// ComEnterUnit ( p , e ) ;
25108: LD_VAR 0 5
25112: PPUSH
25113: LD_VAR 0 7
25117: PPUSH
25118: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
25122: LD_VAR 0 5
25126: PPUSH
25127: LD_VAR 0 3
25131: PPUSH
25132: CALL_OW 183
// AddComExitBuilding ( p ) ;
25136: LD_VAR 0 5
25140: PPUSH
25141: CALL_OW 182
// end ; end ;
25145: GO 24993
25147: POP
25148: POP
// end ;
25149: GO 24959
25151: POP
25152: POP
// end ;
25153: GO 24714
25155: POP
25156: POP
// end ;
25157: LD_VAR 0 1
25161: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
25162: LD_INT 0
25164: PPUSH
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
25169: PPUSH
25170: PPUSH
25171: PPUSH
25172: PPUSH
25173: PPUSH
25174: PPUSH
25175: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
25176: LD_VAR 0 1
25180: NOT
25181: PUSH
25182: LD_EXP 79
25186: PUSH
25187: LD_VAR 0 1
25191: ARRAY
25192: NOT
25193: OR
25194: PUSH
25195: LD_EXP 79
25199: PUSH
25200: LD_VAR 0 1
25204: ARRAY
25205: PPUSH
25206: LD_INT 2
25208: PUSH
25209: LD_INT 30
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 30
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: LIST
25233: PPUSH
25234: CALL_OW 72
25238: NOT
25239: OR
25240: IFFALSE 25244
// exit ;
25242: GO 28747
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
25244: LD_ADDR_VAR 0 4
25248: PUSH
25249: LD_EXP 79
25253: PUSH
25254: LD_VAR 0 1
25258: ARRAY
25259: PPUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 25
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 25
25275: PUSH
25276: LD_INT 2
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 25
25285: PUSH
25286: LD_INT 3
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 25
25295: PUSH
25296: LD_INT 4
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 25
25305: PUSH
25306: LD_INT 5
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 25
25315: PUSH
25316: LD_INT 8
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 25
25325: PUSH
25326: LD_INT 9
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: PPUSH
25343: CALL_OW 72
25347: ST_TO_ADDR
// if not tmp then
25348: LD_VAR 0 4
25352: NOT
25353: IFFALSE 25357
// exit ;
25355: GO 28747
// for i in tmp do
25357: LD_ADDR_VAR 0 3
25361: PUSH
25362: LD_VAR 0 4
25366: PUSH
25367: FOR_IN
25368: IFFALSE 25399
// if GetTag ( i ) then
25370: LD_VAR 0 3
25374: PPUSH
25375: CALL_OW 110
25379: IFFALSE 25397
// tmp := tmp diff i ;
25381: LD_ADDR_VAR 0 4
25385: PUSH
25386: LD_VAR 0 4
25390: PUSH
25391: LD_VAR 0 3
25395: DIFF
25396: ST_TO_ADDR
25397: GO 25367
25399: POP
25400: POP
// if not tmp then
25401: LD_VAR 0 4
25405: NOT
25406: IFFALSE 25410
// exit ;
25408: GO 28747
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
25410: LD_ADDR_VAR 0 5
25414: PUSH
25415: LD_EXP 79
25419: PUSH
25420: LD_VAR 0 1
25424: ARRAY
25425: PPUSH
25426: LD_INT 2
25428: PUSH
25429: LD_INT 25
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 25
25441: PUSH
25442: LD_INT 5
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 25
25451: PUSH
25452: LD_INT 8
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 25
25461: PUSH
25462: LD_INT 9
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: PPUSH
25476: CALL_OW 72
25480: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
25481: LD_ADDR_VAR 0 6
25485: PUSH
25486: LD_EXP 79
25490: PUSH
25491: LD_VAR 0 1
25495: ARRAY
25496: PPUSH
25497: LD_INT 25
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PPUSH
25507: CALL_OW 72
25511: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
25512: LD_ADDR_VAR 0 7
25516: PUSH
25517: LD_EXP 79
25521: PUSH
25522: LD_VAR 0 1
25526: ARRAY
25527: PPUSH
25528: LD_INT 25
25530: PUSH
25531: LD_INT 3
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PPUSH
25538: CALL_OW 72
25542: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
25543: LD_ADDR_VAR 0 8
25547: PUSH
25548: LD_EXP 79
25552: PUSH
25553: LD_VAR 0 1
25557: ARRAY
25558: PPUSH
25559: LD_INT 25
25561: PUSH
25562: LD_INT 4
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 24
25571: PUSH
25572: LD_INT 251
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 72
25587: ST_TO_ADDR
// if mc_scan [ base ] then
25588: LD_EXP 102
25592: PUSH
25593: LD_VAR 0 1
25597: ARRAY
25598: IFFALSE 26059
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
25600: LD_ADDR_EXP 121
25604: PUSH
25605: LD_EXP 121
25609: PPUSH
25610: LD_VAR 0 1
25614: PPUSH
25615: LD_INT 4
25617: PPUSH
25618: CALL_OW 1
25622: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
25623: LD_ADDR_VAR 0 12
25627: PUSH
25628: LD_EXP 79
25632: PUSH
25633: LD_VAR 0 1
25637: ARRAY
25638: PPUSH
25639: LD_INT 2
25641: PUSH
25642: LD_INT 30
25644: PUSH
25645: LD_INT 4
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 30
25654: PUSH
25655: LD_INT 5
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 72
25671: ST_TO_ADDR
// if not b then
25672: LD_VAR 0 12
25676: NOT
25677: IFFALSE 25681
// exit ;
25679: GO 28747
// p := [ ] ;
25681: LD_ADDR_VAR 0 11
25685: PUSH
25686: EMPTY
25687: ST_TO_ADDR
// if sci >= 2 then
25688: LD_VAR 0 8
25692: PUSH
25693: LD_INT 2
25695: GREATEREQUAL
25696: IFFALSE 25727
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
25698: LD_ADDR_VAR 0 8
25702: PUSH
25703: LD_VAR 0 8
25707: PUSH
25708: LD_INT 1
25710: ARRAY
25711: PUSH
25712: LD_VAR 0 8
25716: PUSH
25717: LD_INT 2
25719: ARRAY
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: ST_TO_ADDR
25725: GO 25788
// if sci = 1 then
25727: LD_VAR 0 8
25731: PUSH
25732: LD_INT 1
25734: EQUAL
25735: IFFALSE 25756
// sci := [ sci [ 1 ] ] else
25737: LD_ADDR_VAR 0 8
25741: PUSH
25742: LD_VAR 0 8
25746: PUSH
25747: LD_INT 1
25749: ARRAY
25750: PUSH
25751: EMPTY
25752: LIST
25753: ST_TO_ADDR
25754: GO 25788
// if sci = 0 then
25756: LD_VAR 0 8
25760: PUSH
25761: LD_INT 0
25763: EQUAL
25764: IFFALSE 25788
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
25766: LD_ADDR_VAR 0 11
25770: PUSH
25771: LD_VAR 0 4
25775: PPUSH
25776: LD_INT 4
25778: PPUSH
25779: CALL 92101 0 2
25783: PUSH
25784: LD_INT 1
25786: ARRAY
25787: ST_TO_ADDR
// if eng > 4 then
25788: LD_VAR 0 6
25792: PUSH
25793: LD_INT 4
25795: GREATER
25796: IFFALSE 25842
// for i = eng downto 4 do
25798: LD_ADDR_VAR 0 3
25802: PUSH
25803: DOUBLE
25804: LD_VAR 0 6
25808: INC
25809: ST_TO_ADDR
25810: LD_INT 4
25812: PUSH
25813: FOR_DOWNTO
25814: IFFALSE 25840
// eng := eng diff eng [ i ] ;
25816: LD_ADDR_VAR 0 6
25820: PUSH
25821: LD_VAR 0 6
25825: PUSH
25826: LD_VAR 0 6
25830: PUSH
25831: LD_VAR 0 3
25835: ARRAY
25836: DIFF
25837: ST_TO_ADDR
25838: GO 25813
25840: POP
25841: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
25842: LD_ADDR_VAR 0 4
25846: PUSH
25847: LD_VAR 0 4
25851: PUSH
25852: LD_VAR 0 5
25856: PUSH
25857: LD_VAR 0 6
25861: UNION
25862: PUSH
25863: LD_VAR 0 7
25867: UNION
25868: PUSH
25869: LD_VAR 0 8
25873: UNION
25874: DIFF
25875: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
25876: LD_ADDR_VAR 0 13
25880: PUSH
25881: LD_EXP 79
25885: PUSH
25886: LD_VAR 0 1
25890: ARRAY
25891: PPUSH
25892: LD_INT 2
25894: PUSH
25895: LD_INT 30
25897: PUSH
25898: LD_INT 32
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 30
25907: PUSH
25908: LD_INT 31
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: PPUSH
25920: CALL_OW 72
25924: PUSH
25925: LD_EXP 79
25929: PUSH
25930: LD_VAR 0 1
25934: ARRAY
25935: PPUSH
25936: LD_INT 2
25938: PUSH
25939: LD_INT 30
25941: PUSH
25942: LD_INT 4
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 30
25951: PUSH
25952: LD_INT 5
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: LIST
25963: PPUSH
25964: CALL_OW 72
25968: PUSH
25969: LD_INT 6
25971: MUL
25972: PLUS
25973: ST_TO_ADDR
// if bcount < tmp then
25974: LD_VAR 0 13
25978: PUSH
25979: LD_VAR 0 4
25983: LESS
25984: IFFALSE 26030
// for i = tmp downto bcount do
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: DOUBLE
25992: LD_VAR 0 4
25996: INC
25997: ST_TO_ADDR
25998: LD_VAR 0 13
26002: PUSH
26003: FOR_DOWNTO
26004: IFFALSE 26028
// tmp := Delete ( tmp , tmp ) ;
26006: LD_ADDR_VAR 0 4
26010: PUSH
26011: LD_VAR 0 4
26015: PPUSH
26016: LD_VAR 0 4
26020: PPUSH
26021: CALL_OW 3
26025: ST_TO_ADDR
26026: GO 26003
26028: POP
26029: POP
// result := [ tmp , 0 , 0 , p ] ;
26030: LD_ADDR_VAR 0 2
26034: PUSH
26035: LD_VAR 0 4
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: LD_VAR 0 11
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: ST_TO_ADDR
// exit ;
26057: GO 28747
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
26059: LD_EXP 79
26063: PUSH
26064: LD_VAR 0 1
26068: ARRAY
26069: PPUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 30
26075: PUSH
26076: LD_INT 6
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 30
26085: PUSH
26086: LD_INT 7
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 30
26095: PUSH
26096: LD_INT 8
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: PPUSH
26109: CALL_OW 72
26113: NOT
26114: PUSH
26115: LD_EXP 79
26119: PUSH
26120: LD_VAR 0 1
26124: ARRAY
26125: PPUSH
26126: LD_INT 30
26128: PUSH
26129: LD_INT 3
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PPUSH
26136: CALL_OW 72
26140: NOT
26141: AND
26142: IFFALSE 26214
// begin if eng = tmp then
26144: LD_VAR 0 6
26148: PUSH
26149: LD_VAR 0 4
26153: EQUAL
26154: IFFALSE 26158
// exit ;
26156: GO 28747
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
26158: LD_ADDR_EXP 121
26162: PUSH
26163: LD_EXP 121
26167: PPUSH
26168: LD_VAR 0 1
26172: PPUSH
26173: LD_INT 1
26175: PPUSH
26176: CALL_OW 1
26180: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
26181: LD_ADDR_VAR 0 2
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: LD_VAR 0 4
26193: PUSH
26194: LD_VAR 0 6
26198: DIFF
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: ST_TO_ADDR
// exit ;
26212: GO 28747
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
26214: LD_EXP 106
26218: PUSH
26219: LD_EXP 105
26223: PUSH
26224: LD_VAR 0 1
26228: ARRAY
26229: ARRAY
26230: PUSH
26231: LD_EXP 79
26235: PUSH
26236: LD_VAR 0 1
26240: ARRAY
26241: PPUSH
26242: LD_INT 2
26244: PUSH
26245: LD_INT 30
26247: PUSH
26248: LD_INT 6
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 30
26257: PUSH
26258: LD_INT 7
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 30
26267: PUSH
26268: LD_INT 8
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: PPUSH
26281: CALL_OW 72
26285: AND
26286: PUSH
26287: LD_EXP 79
26291: PUSH
26292: LD_VAR 0 1
26296: ARRAY
26297: PPUSH
26298: LD_INT 30
26300: PUSH
26301: LD_INT 3
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PPUSH
26308: CALL_OW 72
26312: NOT
26313: AND
26314: IFFALSE 26528
// begin if sci >= 6 then
26316: LD_VAR 0 8
26320: PUSH
26321: LD_INT 6
26323: GREATEREQUAL
26324: IFFALSE 26328
// exit ;
26326: GO 28747
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
26328: LD_ADDR_EXP 121
26332: PUSH
26333: LD_EXP 121
26337: PPUSH
26338: LD_VAR 0 1
26342: PPUSH
26343: LD_INT 2
26345: PPUSH
26346: CALL_OW 1
26350: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
26351: LD_ADDR_VAR 0 9
26355: PUSH
26356: LD_VAR 0 4
26360: PUSH
26361: LD_VAR 0 8
26365: DIFF
26366: PPUSH
26367: LD_INT 4
26369: PPUSH
26370: CALL 92101 0 2
26374: ST_TO_ADDR
// p := [ ] ;
26375: LD_ADDR_VAR 0 11
26379: PUSH
26380: EMPTY
26381: ST_TO_ADDR
// if sci < 6 and sort > 6 then
26382: LD_VAR 0 8
26386: PUSH
26387: LD_INT 6
26389: LESS
26390: PUSH
26391: LD_VAR 0 9
26395: PUSH
26396: LD_INT 6
26398: GREATER
26399: AND
26400: IFFALSE 26481
// begin for i = 1 to 6 - sci do
26402: LD_ADDR_VAR 0 3
26406: PUSH
26407: DOUBLE
26408: LD_INT 1
26410: DEC
26411: ST_TO_ADDR
26412: LD_INT 6
26414: PUSH
26415: LD_VAR 0 8
26419: MINUS
26420: PUSH
26421: FOR_TO
26422: IFFALSE 26477
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
26424: LD_ADDR_VAR 0 11
26428: PUSH
26429: LD_VAR 0 11
26433: PPUSH
26434: LD_VAR 0 11
26438: PUSH
26439: LD_INT 1
26441: PLUS
26442: PPUSH
26443: LD_VAR 0 9
26447: PUSH
26448: LD_INT 1
26450: ARRAY
26451: PPUSH
26452: CALL_OW 2
26456: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
26457: LD_ADDR_VAR 0 9
26461: PUSH
26462: LD_VAR 0 9
26466: PPUSH
26467: LD_INT 1
26469: PPUSH
26470: CALL_OW 3
26474: ST_TO_ADDR
// end ;
26475: GO 26421
26477: POP
26478: POP
// end else
26479: GO 26501
// if sort then
26481: LD_VAR 0 9
26485: IFFALSE 26501
// p := sort [ 1 ] ;
26487: LD_ADDR_VAR 0 11
26491: PUSH
26492: LD_VAR 0 9
26496: PUSH
26497: LD_INT 1
26499: ARRAY
26500: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
26501: LD_ADDR_VAR 0 2
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: LD_VAR 0 11
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: ST_TO_ADDR
// exit ;
26526: GO 28747
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
26528: LD_EXP 106
26532: PUSH
26533: LD_EXP 105
26537: PUSH
26538: LD_VAR 0 1
26542: ARRAY
26543: ARRAY
26544: PUSH
26545: LD_EXP 79
26549: PUSH
26550: LD_VAR 0 1
26554: ARRAY
26555: PPUSH
26556: LD_INT 2
26558: PUSH
26559: LD_INT 30
26561: PUSH
26562: LD_INT 6
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 30
26571: PUSH
26572: LD_INT 7
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 30
26581: PUSH
26582: LD_INT 8
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: PPUSH
26595: CALL_OW 72
26599: AND
26600: PUSH
26601: LD_EXP 79
26605: PUSH
26606: LD_VAR 0 1
26610: ARRAY
26611: PPUSH
26612: LD_INT 30
26614: PUSH
26615: LD_INT 3
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PPUSH
26622: CALL_OW 72
26626: AND
26627: IFFALSE 27361
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
26629: LD_ADDR_EXP 121
26633: PUSH
26634: LD_EXP 121
26638: PPUSH
26639: LD_VAR 0 1
26643: PPUSH
26644: LD_INT 3
26646: PPUSH
26647: CALL_OW 1
26651: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: ST_TO_ADDR
// if not eng then
26675: LD_VAR 0 6
26679: NOT
26680: IFFALSE 26743
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
26682: LD_ADDR_VAR 0 11
26686: PUSH
26687: LD_VAR 0 4
26691: PPUSH
26692: LD_INT 2
26694: PPUSH
26695: CALL 92101 0 2
26699: PUSH
26700: LD_INT 1
26702: ARRAY
26703: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
26704: LD_ADDR_VAR 0 2
26708: PUSH
26709: LD_VAR 0 2
26713: PPUSH
26714: LD_INT 2
26716: PPUSH
26717: LD_VAR 0 11
26721: PPUSH
26722: CALL_OW 1
26726: ST_TO_ADDR
// tmp := tmp diff p ;
26727: LD_ADDR_VAR 0 4
26731: PUSH
26732: LD_VAR 0 4
26736: PUSH
26737: LD_VAR 0 11
26741: DIFF
26742: ST_TO_ADDR
// end ; if tmp and sci < 6 then
26743: LD_VAR 0 4
26747: PUSH
26748: LD_VAR 0 8
26752: PUSH
26753: LD_INT 6
26755: LESS
26756: AND
26757: IFFALSE 26945
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
26759: LD_ADDR_VAR 0 9
26763: PUSH
26764: LD_VAR 0 4
26768: PUSH
26769: LD_VAR 0 8
26773: PUSH
26774: LD_VAR 0 7
26778: UNION
26779: DIFF
26780: PPUSH
26781: LD_INT 4
26783: PPUSH
26784: CALL 92101 0 2
26788: ST_TO_ADDR
// p := [ ] ;
26789: LD_ADDR_VAR 0 11
26793: PUSH
26794: EMPTY
26795: ST_TO_ADDR
// if sort then
26796: LD_VAR 0 9
26800: IFFALSE 26916
// for i = 1 to 6 - sci do
26802: LD_ADDR_VAR 0 3
26806: PUSH
26807: DOUBLE
26808: LD_INT 1
26810: DEC
26811: ST_TO_ADDR
26812: LD_INT 6
26814: PUSH
26815: LD_VAR 0 8
26819: MINUS
26820: PUSH
26821: FOR_TO
26822: IFFALSE 26914
// begin if i = sort then
26824: LD_VAR 0 3
26828: PUSH
26829: LD_VAR 0 9
26833: EQUAL
26834: IFFALSE 26838
// break ;
26836: GO 26914
// if GetClass ( i ) = 4 then
26838: LD_VAR 0 3
26842: PPUSH
26843: CALL_OW 257
26847: PUSH
26848: LD_INT 4
26850: EQUAL
26851: IFFALSE 26855
// continue ;
26853: GO 26821
// p := Insert ( p , p + 1 , sort [ i ] ) ;
26855: LD_ADDR_VAR 0 11
26859: PUSH
26860: LD_VAR 0 11
26864: PPUSH
26865: LD_VAR 0 11
26869: PUSH
26870: LD_INT 1
26872: PLUS
26873: PPUSH
26874: LD_VAR 0 9
26878: PUSH
26879: LD_VAR 0 3
26883: ARRAY
26884: PPUSH
26885: CALL_OW 2
26889: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
26890: LD_ADDR_VAR 0 4
26894: PUSH
26895: LD_VAR 0 4
26899: PUSH
26900: LD_VAR 0 9
26904: PUSH
26905: LD_VAR 0 3
26909: ARRAY
26910: DIFF
26911: ST_TO_ADDR
// end ;
26912: GO 26821
26914: POP
26915: POP
// if p then
26916: LD_VAR 0 11
26920: IFFALSE 26945
// result := Replace ( result , 4 , p ) ;
26922: LD_ADDR_VAR 0 2
26926: PUSH
26927: LD_VAR 0 2
26931: PPUSH
26932: LD_INT 4
26934: PPUSH
26935: LD_VAR 0 11
26939: PPUSH
26940: CALL_OW 1
26944: ST_TO_ADDR
// end ; if tmp and mech < 6 then
26945: LD_VAR 0 4
26949: PUSH
26950: LD_VAR 0 7
26954: PUSH
26955: LD_INT 6
26957: LESS
26958: AND
26959: IFFALSE 27147
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
26961: LD_ADDR_VAR 0 9
26965: PUSH
26966: LD_VAR 0 4
26970: PUSH
26971: LD_VAR 0 8
26975: PUSH
26976: LD_VAR 0 7
26980: UNION
26981: DIFF
26982: PPUSH
26983: LD_INT 3
26985: PPUSH
26986: CALL 92101 0 2
26990: ST_TO_ADDR
// p := [ ] ;
26991: LD_ADDR_VAR 0 11
26995: PUSH
26996: EMPTY
26997: ST_TO_ADDR
// if sort then
26998: LD_VAR 0 9
27002: IFFALSE 27118
// for i = 1 to 6 - mech do
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: DOUBLE
27010: LD_INT 1
27012: DEC
27013: ST_TO_ADDR
27014: LD_INT 6
27016: PUSH
27017: LD_VAR 0 7
27021: MINUS
27022: PUSH
27023: FOR_TO
27024: IFFALSE 27116
// begin if i = sort then
27026: LD_VAR 0 3
27030: PUSH
27031: LD_VAR 0 9
27035: EQUAL
27036: IFFALSE 27040
// break ;
27038: GO 27116
// if GetClass ( i ) = 3 then
27040: LD_VAR 0 3
27044: PPUSH
27045: CALL_OW 257
27049: PUSH
27050: LD_INT 3
27052: EQUAL
27053: IFFALSE 27057
// continue ;
27055: GO 27023
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27057: LD_ADDR_VAR 0 11
27061: PUSH
27062: LD_VAR 0 11
27066: PPUSH
27067: LD_VAR 0 11
27071: PUSH
27072: LD_INT 1
27074: PLUS
27075: PPUSH
27076: LD_VAR 0 9
27080: PUSH
27081: LD_VAR 0 3
27085: ARRAY
27086: PPUSH
27087: CALL_OW 2
27091: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27092: LD_ADDR_VAR 0 4
27096: PUSH
27097: LD_VAR 0 4
27101: PUSH
27102: LD_VAR 0 9
27106: PUSH
27107: LD_VAR 0 3
27111: ARRAY
27112: DIFF
27113: ST_TO_ADDR
// end ;
27114: GO 27023
27116: POP
27117: POP
// if p then
27118: LD_VAR 0 11
27122: IFFALSE 27147
// result := Replace ( result , 3 , p ) ;
27124: LD_ADDR_VAR 0 2
27128: PUSH
27129: LD_VAR 0 2
27133: PPUSH
27134: LD_INT 3
27136: PPUSH
27137: LD_VAR 0 11
27141: PPUSH
27142: CALL_OW 1
27146: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
27147: LD_VAR 0 4
27151: PUSH
27152: LD_INT 6
27154: GREATER
27155: PUSH
27156: LD_VAR 0 6
27160: PUSH
27161: LD_INT 6
27163: LESS
27164: AND
27165: IFFALSE 27359
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
27167: LD_ADDR_VAR 0 9
27171: PUSH
27172: LD_VAR 0 4
27176: PUSH
27177: LD_VAR 0 8
27181: PUSH
27182: LD_VAR 0 7
27186: UNION
27187: PUSH
27188: LD_VAR 0 6
27192: UNION
27193: DIFF
27194: PPUSH
27195: LD_INT 2
27197: PPUSH
27198: CALL 92101 0 2
27202: ST_TO_ADDR
// p := [ ] ;
27203: LD_ADDR_VAR 0 11
27207: PUSH
27208: EMPTY
27209: ST_TO_ADDR
// if sort then
27210: LD_VAR 0 9
27214: IFFALSE 27330
// for i = 1 to 6 - eng do
27216: LD_ADDR_VAR 0 3
27220: PUSH
27221: DOUBLE
27222: LD_INT 1
27224: DEC
27225: ST_TO_ADDR
27226: LD_INT 6
27228: PUSH
27229: LD_VAR 0 6
27233: MINUS
27234: PUSH
27235: FOR_TO
27236: IFFALSE 27328
// begin if i = sort then
27238: LD_VAR 0 3
27242: PUSH
27243: LD_VAR 0 9
27247: EQUAL
27248: IFFALSE 27252
// break ;
27250: GO 27328
// if GetClass ( i ) = 2 then
27252: LD_VAR 0 3
27256: PPUSH
27257: CALL_OW 257
27261: PUSH
27262: LD_INT 2
27264: EQUAL
27265: IFFALSE 27269
// continue ;
27267: GO 27235
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27269: LD_ADDR_VAR 0 11
27273: PUSH
27274: LD_VAR 0 11
27278: PPUSH
27279: LD_VAR 0 11
27283: PUSH
27284: LD_INT 1
27286: PLUS
27287: PPUSH
27288: LD_VAR 0 9
27292: PUSH
27293: LD_VAR 0 3
27297: ARRAY
27298: PPUSH
27299: CALL_OW 2
27303: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27304: LD_ADDR_VAR 0 4
27308: PUSH
27309: LD_VAR 0 4
27313: PUSH
27314: LD_VAR 0 9
27318: PUSH
27319: LD_VAR 0 3
27323: ARRAY
27324: DIFF
27325: ST_TO_ADDR
// end ;
27326: GO 27235
27328: POP
27329: POP
// if p then
27330: LD_VAR 0 11
27334: IFFALSE 27359
// result := Replace ( result , 2 , p ) ;
27336: LD_ADDR_VAR 0 2
27340: PUSH
27341: LD_VAR 0 2
27345: PPUSH
27346: LD_INT 2
27348: PPUSH
27349: LD_VAR 0 11
27353: PPUSH
27354: CALL_OW 1
27358: ST_TO_ADDR
// end ; exit ;
27359: GO 28747
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
27361: LD_EXP 106
27365: PUSH
27366: LD_EXP 105
27370: PUSH
27371: LD_VAR 0 1
27375: ARRAY
27376: ARRAY
27377: NOT
27378: PUSH
27379: LD_EXP 79
27383: PUSH
27384: LD_VAR 0 1
27388: ARRAY
27389: PPUSH
27390: LD_INT 30
27392: PUSH
27393: LD_INT 3
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PPUSH
27400: CALL_OW 72
27404: AND
27405: PUSH
27406: LD_EXP 84
27410: PUSH
27411: LD_VAR 0 1
27415: ARRAY
27416: AND
27417: IFFALSE 28025
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
27419: LD_ADDR_EXP 121
27423: PUSH
27424: LD_EXP 121
27428: PPUSH
27429: LD_VAR 0 1
27433: PPUSH
27434: LD_INT 5
27436: PPUSH
27437: CALL_OW 1
27441: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
27442: LD_ADDR_VAR 0 2
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: ST_TO_ADDR
// if sci > 1 then
27465: LD_VAR 0 8
27469: PUSH
27470: LD_INT 1
27472: GREATER
27473: IFFALSE 27501
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
27475: LD_ADDR_VAR 0 4
27479: PUSH
27480: LD_VAR 0 4
27484: PUSH
27485: LD_VAR 0 8
27489: PUSH
27490: LD_VAR 0 8
27494: PUSH
27495: LD_INT 1
27497: ARRAY
27498: DIFF
27499: DIFF
27500: ST_TO_ADDR
// if tmp and not sci then
27501: LD_VAR 0 4
27505: PUSH
27506: LD_VAR 0 8
27510: NOT
27511: AND
27512: IFFALSE 27581
// begin sort := SortBySkill ( tmp , 4 ) ;
27514: LD_ADDR_VAR 0 9
27518: PUSH
27519: LD_VAR 0 4
27523: PPUSH
27524: LD_INT 4
27526: PPUSH
27527: CALL 92101 0 2
27531: ST_TO_ADDR
// if sort then
27532: LD_VAR 0 9
27536: IFFALSE 27552
// p := sort [ 1 ] ;
27538: LD_ADDR_VAR 0 11
27542: PUSH
27543: LD_VAR 0 9
27547: PUSH
27548: LD_INT 1
27550: ARRAY
27551: ST_TO_ADDR
// if p then
27552: LD_VAR 0 11
27556: IFFALSE 27581
// result := Replace ( result , 4 , p ) ;
27558: LD_ADDR_VAR 0 2
27562: PUSH
27563: LD_VAR 0 2
27567: PPUSH
27568: LD_INT 4
27570: PPUSH
27571: LD_VAR 0 11
27575: PPUSH
27576: CALL_OW 1
27580: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
27581: LD_ADDR_VAR 0 4
27585: PUSH
27586: LD_VAR 0 4
27590: PUSH
27591: LD_VAR 0 7
27595: DIFF
27596: ST_TO_ADDR
// if tmp and mech < 6 then
27597: LD_VAR 0 4
27601: PUSH
27602: LD_VAR 0 7
27606: PUSH
27607: LD_INT 6
27609: LESS
27610: AND
27611: IFFALSE 27799
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
27613: LD_ADDR_VAR 0 9
27617: PUSH
27618: LD_VAR 0 4
27622: PUSH
27623: LD_VAR 0 8
27627: PUSH
27628: LD_VAR 0 7
27632: UNION
27633: DIFF
27634: PPUSH
27635: LD_INT 3
27637: PPUSH
27638: CALL 92101 0 2
27642: ST_TO_ADDR
// p := [ ] ;
27643: LD_ADDR_VAR 0 11
27647: PUSH
27648: EMPTY
27649: ST_TO_ADDR
// if sort then
27650: LD_VAR 0 9
27654: IFFALSE 27770
// for i = 1 to 6 - mech do
27656: LD_ADDR_VAR 0 3
27660: PUSH
27661: DOUBLE
27662: LD_INT 1
27664: DEC
27665: ST_TO_ADDR
27666: LD_INT 6
27668: PUSH
27669: LD_VAR 0 7
27673: MINUS
27674: PUSH
27675: FOR_TO
27676: IFFALSE 27768
// begin if i = sort then
27678: LD_VAR 0 3
27682: PUSH
27683: LD_VAR 0 9
27687: EQUAL
27688: IFFALSE 27692
// break ;
27690: GO 27768
// if GetClass ( i ) = 3 then
27692: LD_VAR 0 3
27696: PPUSH
27697: CALL_OW 257
27701: PUSH
27702: LD_INT 3
27704: EQUAL
27705: IFFALSE 27709
// continue ;
27707: GO 27675
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27709: LD_ADDR_VAR 0 11
27713: PUSH
27714: LD_VAR 0 11
27718: PPUSH
27719: LD_VAR 0 11
27723: PUSH
27724: LD_INT 1
27726: PLUS
27727: PPUSH
27728: LD_VAR 0 9
27732: PUSH
27733: LD_VAR 0 3
27737: ARRAY
27738: PPUSH
27739: CALL_OW 2
27743: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27744: LD_ADDR_VAR 0 4
27748: PUSH
27749: LD_VAR 0 4
27753: PUSH
27754: LD_VAR 0 9
27758: PUSH
27759: LD_VAR 0 3
27763: ARRAY
27764: DIFF
27765: ST_TO_ADDR
// end ;
27766: GO 27675
27768: POP
27769: POP
// if p then
27770: LD_VAR 0 11
27774: IFFALSE 27799
// result := Replace ( result , 3 , p ) ;
27776: LD_ADDR_VAR 0 2
27780: PUSH
27781: LD_VAR 0 2
27785: PPUSH
27786: LD_INT 3
27788: PPUSH
27789: LD_VAR 0 11
27793: PPUSH
27794: CALL_OW 1
27798: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
27799: LD_ADDR_VAR 0 4
27803: PUSH
27804: LD_VAR 0 4
27808: PUSH
27809: LD_VAR 0 6
27813: DIFF
27814: ST_TO_ADDR
// if tmp and eng < 6 then
27815: LD_VAR 0 4
27819: PUSH
27820: LD_VAR 0 6
27824: PUSH
27825: LD_INT 6
27827: LESS
27828: AND
27829: IFFALSE 28023
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
27831: LD_ADDR_VAR 0 9
27835: PUSH
27836: LD_VAR 0 4
27840: PUSH
27841: LD_VAR 0 8
27845: PUSH
27846: LD_VAR 0 7
27850: UNION
27851: PUSH
27852: LD_VAR 0 6
27856: UNION
27857: DIFF
27858: PPUSH
27859: LD_INT 2
27861: PPUSH
27862: CALL 92101 0 2
27866: ST_TO_ADDR
// p := [ ] ;
27867: LD_ADDR_VAR 0 11
27871: PUSH
27872: EMPTY
27873: ST_TO_ADDR
// if sort then
27874: LD_VAR 0 9
27878: IFFALSE 27994
// for i = 1 to 6 - eng do
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: DOUBLE
27886: LD_INT 1
27888: DEC
27889: ST_TO_ADDR
27890: LD_INT 6
27892: PUSH
27893: LD_VAR 0 6
27897: MINUS
27898: PUSH
27899: FOR_TO
27900: IFFALSE 27992
// begin if i = sort then
27902: LD_VAR 0 3
27906: PUSH
27907: LD_VAR 0 9
27911: EQUAL
27912: IFFALSE 27916
// break ;
27914: GO 27992
// if GetClass ( i ) = 2 then
27916: LD_VAR 0 3
27920: PPUSH
27921: CALL_OW 257
27925: PUSH
27926: LD_INT 2
27928: EQUAL
27929: IFFALSE 27933
// continue ;
27931: GO 27899
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27933: LD_ADDR_VAR 0 11
27937: PUSH
27938: LD_VAR 0 11
27942: PPUSH
27943: LD_VAR 0 11
27947: PUSH
27948: LD_INT 1
27950: PLUS
27951: PPUSH
27952: LD_VAR 0 9
27956: PUSH
27957: LD_VAR 0 3
27961: ARRAY
27962: PPUSH
27963: CALL_OW 2
27967: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27968: LD_ADDR_VAR 0 4
27972: PUSH
27973: LD_VAR 0 4
27977: PUSH
27978: LD_VAR 0 9
27982: PUSH
27983: LD_VAR 0 3
27987: ARRAY
27988: DIFF
27989: ST_TO_ADDR
// end ;
27990: GO 27899
27992: POP
27993: POP
// if p then
27994: LD_VAR 0 11
27998: IFFALSE 28023
// result := Replace ( result , 2 , p ) ;
28000: LD_ADDR_VAR 0 2
28004: PUSH
28005: LD_VAR 0 2
28009: PPUSH
28010: LD_INT 2
28012: PPUSH
28013: LD_VAR 0 11
28017: PPUSH
28018: CALL_OW 1
28022: ST_TO_ADDR
// end ; exit ;
28023: GO 28747
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
28025: LD_EXP 106
28029: PUSH
28030: LD_EXP 105
28034: PUSH
28035: LD_VAR 0 1
28039: ARRAY
28040: ARRAY
28041: NOT
28042: PUSH
28043: LD_EXP 79
28047: PUSH
28048: LD_VAR 0 1
28052: ARRAY
28053: PPUSH
28054: LD_INT 30
28056: PUSH
28057: LD_INT 3
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: CALL_OW 72
28068: AND
28069: PUSH
28070: LD_EXP 84
28074: PUSH
28075: LD_VAR 0 1
28079: ARRAY
28080: NOT
28081: AND
28082: IFFALSE 28747
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
28084: LD_ADDR_EXP 121
28088: PUSH
28089: LD_EXP 121
28093: PPUSH
28094: LD_VAR 0 1
28098: PPUSH
28099: LD_INT 6
28101: PPUSH
28102: CALL_OW 1
28106: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
28107: LD_ADDR_VAR 0 2
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
// if sci >= 1 then
28130: LD_VAR 0 8
28134: PUSH
28135: LD_INT 1
28137: GREATEREQUAL
28138: IFFALSE 28160
// tmp := tmp diff sci [ 1 ] ;
28140: LD_ADDR_VAR 0 4
28144: PUSH
28145: LD_VAR 0 4
28149: PUSH
28150: LD_VAR 0 8
28154: PUSH
28155: LD_INT 1
28157: ARRAY
28158: DIFF
28159: ST_TO_ADDR
// if tmp and not sci then
28160: LD_VAR 0 4
28164: PUSH
28165: LD_VAR 0 8
28169: NOT
28170: AND
28171: IFFALSE 28240
// begin sort := SortBySkill ( tmp , 4 ) ;
28173: LD_ADDR_VAR 0 9
28177: PUSH
28178: LD_VAR 0 4
28182: PPUSH
28183: LD_INT 4
28185: PPUSH
28186: CALL 92101 0 2
28190: ST_TO_ADDR
// if sort then
28191: LD_VAR 0 9
28195: IFFALSE 28211
// p := sort [ 1 ] ;
28197: LD_ADDR_VAR 0 11
28201: PUSH
28202: LD_VAR 0 9
28206: PUSH
28207: LD_INT 1
28209: ARRAY
28210: ST_TO_ADDR
// if p then
28211: LD_VAR 0 11
28215: IFFALSE 28240
// result := Replace ( result , 4 , p ) ;
28217: LD_ADDR_VAR 0 2
28221: PUSH
28222: LD_VAR 0 2
28226: PPUSH
28227: LD_INT 4
28229: PPUSH
28230: LD_VAR 0 11
28234: PPUSH
28235: CALL_OW 1
28239: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
28240: LD_ADDR_VAR 0 4
28244: PUSH
28245: LD_VAR 0 4
28249: PUSH
28250: LD_VAR 0 7
28254: DIFF
28255: ST_TO_ADDR
// if tmp and mech < 6 then
28256: LD_VAR 0 4
28260: PUSH
28261: LD_VAR 0 7
28265: PUSH
28266: LD_INT 6
28268: LESS
28269: AND
28270: IFFALSE 28452
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
28272: LD_ADDR_VAR 0 9
28276: PUSH
28277: LD_VAR 0 4
28281: PUSH
28282: LD_VAR 0 7
28286: DIFF
28287: PPUSH
28288: LD_INT 3
28290: PPUSH
28291: CALL 92101 0 2
28295: ST_TO_ADDR
// p := [ ] ;
28296: LD_ADDR_VAR 0 11
28300: PUSH
28301: EMPTY
28302: ST_TO_ADDR
// if sort then
28303: LD_VAR 0 9
28307: IFFALSE 28423
// for i = 1 to 6 - mech do
28309: LD_ADDR_VAR 0 3
28313: PUSH
28314: DOUBLE
28315: LD_INT 1
28317: DEC
28318: ST_TO_ADDR
28319: LD_INT 6
28321: PUSH
28322: LD_VAR 0 7
28326: MINUS
28327: PUSH
28328: FOR_TO
28329: IFFALSE 28421
// begin if i = sort then
28331: LD_VAR 0 3
28335: PUSH
28336: LD_VAR 0 9
28340: EQUAL
28341: IFFALSE 28345
// break ;
28343: GO 28421
// if GetClass ( i ) = 3 then
28345: LD_VAR 0 3
28349: PPUSH
28350: CALL_OW 257
28354: PUSH
28355: LD_INT 3
28357: EQUAL
28358: IFFALSE 28362
// continue ;
28360: GO 28328
// p := Insert ( p , p + 1 , sort [ i ] ) ;
28362: LD_ADDR_VAR 0 11
28366: PUSH
28367: LD_VAR 0 11
28371: PPUSH
28372: LD_VAR 0 11
28376: PUSH
28377: LD_INT 1
28379: PLUS
28380: PPUSH
28381: LD_VAR 0 9
28385: PUSH
28386: LD_VAR 0 3
28390: ARRAY
28391: PPUSH
28392: CALL_OW 2
28396: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
28397: LD_ADDR_VAR 0 4
28401: PUSH
28402: LD_VAR 0 4
28406: PUSH
28407: LD_VAR 0 9
28411: PUSH
28412: LD_VAR 0 3
28416: ARRAY
28417: DIFF
28418: ST_TO_ADDR
// end ;
28419: GO 28328
28421: POP
28422: POP
// if p then
28423: LD_VAR 0 11
28427: IFFALSE 28452
// result := Replace ( result , 3 , p ) ;
28429: LD_ADDR_VAR 0 2
28433: PUSH
28434: LD_VAR 0 2
28438: PPUSH
28439: LD_INT 3
28441: PPUSH
28442: LD_VAR 0 11
28446: PPUSH
28447: CALL_OW 1
28451: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
28452: LD_ADDR_VAR 0 4
28456: PUSH
28457: LD_VAR 0 4
28461: PUSH
28462: LD_VAR 0 6
28466: DIFF
28467: ST_TO_ADDR
// if tmp and eng < 4 then
28468: LD_VAR 0 4
28472: PUSH
28473: LD_VAR 0 6
28477: PUSH
28478: LD_INT 4
28480: LESS
28481: AND
28482: IFFALSE 28672
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
28484: LD_ADDR_VAR 0 9
28488: PUSH
28489: LD_VAR 0 4
28493: PUSH
28494: LD_VAR 0 7
28498: PUSH
28499: LD_VAR 0 6
28503: UNION
28504: DIFF
28505: PPUSH
28506: LD_INT 2
28508: PPUSH
28509: CALL 92101 0 2
28513: ST_TO_ADDR
// p := [ ] ;
28514: LD_ADDR_VAR 0 11
28518: PUSH
28519: EMPTY
28520: ST_TO_ADDR
// if sort then
28521: LD_VAR 0 9
28525: IFFALSE 28641
// for i = 1 to 4 - eng do
28527: LD_ADDR_VAR 0 3
28531: PUSH
28532: DOUBLE
28533: LD_INT 1
28535: DEC
28536: ST_TO_ADDR
28537: LD_INT 4
28539: PUSH
28540: LD_VAR 0 6
28544: MINUS
28545: PUSH
28546: FOR_TO
28547: IFFALSE 28639
// begin if i = sort then
28549: LD_VAR 0 3
28553: PUSH
28554: LD_VAR 0 9
28558: EQUAL
28559: IFFALSE 28563
// break ;
28561: GO 28639
// if GetClass ( i ) = 2 then
28563: LD_VAR 0 3
28567: PPUSH
28568: CALL_OW 257
28572: PUSH
28573: LD_INT 2
28575: EQUAL
28576: IFFALSE 28580
// continue ;
28578: GO 28546
// p := Insert ( p , p + 1 , sort [ i ] ) ;
28580: LD_ADDR_VAR 0 11
28584: PUSH
28585: LD_VAR 0 11
28589: PPUSH
28590: LD_VAR 0 11
28594: PUSH
28595: LD_INT 1
28597: PLUS
28598: PPUSH
28599: LD_VAR 0 9
28603: PUSH
28604: LD_VAR 0 3
28608: ARRAY
28609: PPUSH
28610: CALL_OW 2
28614: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
28615: LD_ADDR_VAR 0 4
28619: PUSH
28620: LD_VAR 0 4
28624: PUSH
28625: LD_VAR 0 9
28629: PUSH
28630: LD_VAR 0 3
28634: ARRAY
28635: DIFF
28636: ST_TO_ADDR
// end ;
28637: GO 28546
28639: POP
28640: POP
// if p then
28641: LD_VAR 0 11
28645: IFFALSE 28670
// result := Replace ( result , 2 , p ) ;
28647: LD_ADDR_VAR 0 2
28651: PUSH
28652: LD_VAR 0 2
28656: PPUSH
28657: LD_INT 2
28659: PPUSH
28660: LD_VAR 0 11
28664: PPUSH
28665: CALL_OW 1
28669: ST_TO_ADDR
// end else
28670: GO 28716
// for i = eng downto 5 do
28672: LD_ADDR_VAR 0 3
28676: PUSH
28677: DOUBLE
28678: LD_VAR 0 6
28682: INC
28683: ST_TO_ADDR
28684: LD_INT 5
28686: PUSH
28687: FOR_DOWNTO
28688: IFFALSE 28714
// tmp := tmp union eng [ i ] ;
28690: LD_ADDR_VAR 0 4
28694: PUSH
28695: LD_VAR 0 4
28699: PUSH
28700: LD_VAR 0 6
28704: PUSH
28705: LD_VAR 0 3
28709: ARRAY
28710: UNION
28711: ST_TO_ADDR
28712: GO 28687
28714: POP
28715: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
28716: LD_ADDR_VAR 0 2
28720: PUSH
28721: LD_VAR 0 2
28725: PPUSH
28726: LD_INT 1
28728: PPUSH
28729: LD_VAR 0 4
28733: PUSH
28734: LD_VAR 0 5
28738: DIFF
28739: PPUSH
28740: CALL_OW 1
28744: ST_TO_ADDR
// exit ;
28745: GO 28747
// end ; end ;
28747: LD_VAR 0 2
28751: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
28752: LD_INT 0
28754: PPUSH
28755: PPUSH
28756: PPUSH
// if not mc_bases then
28757: LD_EXP 79
28761: NOT
28762: IFFALSE 28766
// exit ;
28764: GO 28872
// for i = 1 to mc_bases do
28766: LD_ADDR_VAR 0 2
28770: PUSH
28771: DOUBLE
28772: LD_INT 1
28774: DEC
28775: ST_TO_ADDR
28776: LD_EXP 79
28780: PUSH
28781: FOR_TO
28782: IFFALSE 28863
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
28784: LD_ADDR_VAR 0 3
28788: PUSH
28789: LD_EXP 79
28793: PUSH
28794: LD_VAR 0 2
28798: ARRAY
28799: PPUSH
28800: LD_INT 21
28802: PUSH
28803: LD_INT 3
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 3
28812: PUSH
28813: LD_INT 24
28815: PUSH
28816: LD_INT 1000
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PPUSH
28831: CALL_OW 72
28835: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
28836: LD_ADDR_EXP 80
28840: PUSH
28841: LD_EXP 80
28845: PPUSH
28846: LD_VAR 0 2
28850: PPUSH
28851: LD_VAR 0 3
28855: PPUSH
28856: CALL_OW 1
28860: ST_TO_ADDR
// end ;
28861: GO 28781
28863: POP
28864: POP
// RaiseSailEvent ( 101 ) ;
28865: LD_INT 101
28867: PPUSH
28868: CALL_OW 427
// end ;
28872: LD_VAR 0 1
28876: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
28877: LD_INT 0
28879: PPUSH
28880: PPUSH
28881: PPUSH
28882: PPUSH
28883: PPUSH
28884: PPUSH
28885: PPUSH
// if not mc_bases then
28886: LD_EXP 79
28890: NOT
28891: IFFALSE 28895
// exit ;
28893: GO 29468
// for i = 1 to mc_bases do
28895: LD_ADDR_VAR 0 2
28899: PUSH
28900: DOUBLE
28901: LD_INT 1
28903: DEC
28904: ST_TO_ADDR
28905: LD_EXP 79
28909: PUSH
28910: FOR_TO
28911: IFFALSE 29459
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
28913: LD_ADDR_VAR 0 5
28917: PUSH
28918: LD_EXP 79
28922: PUSH
28923: LD_VAR 0 2
28927: ARRAY
28928: PUSH
28929: LD_EXP 108
28933: PUSH
28934: LD_VAR 0 2
28938: ARRAY
28939: UNION
28940: PPUSH
28941: LD_INT 21
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: PUSH
28954: LD_INT 3
28956: PUSH
28957: LD_INT 54
28959: PUSH
28960: EMPTY
28961: LIST
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 3
28969: PUSH
28970: LD_INT 24
28972: PUSH
28973: LD_INT 800
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PPUSH
28993: CALL_OW 72
28997: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
28998: LD_ADDR_VAR 0 6
29002: PUSH
29003: LD_EXP 79
29007: PUSH
29008: LD_VAR 0 2
29012: ARRAY
29013: PPUSH
29014: LD_INT 21
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: LD_INT 3
29029: PUSH
29030: LD_INT 54
29032: PUSH
29033: EMPTY
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 3
29042: PUSH
29043: LD_INT 24
29045: PUSH
29046: LD_INT 250
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PPUSH
29066: CALL_OW 72
29070: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
29071: LD_ADDR_VAR 0 7
29075: PUSH
29076: LD_VAR 0 5
29080: PUSH
29081: LD_VAR 0 6
29085: DIFF
29086: ST_TO_ADDR
// if not need_heal_1 then
29087: LD_VAR 0 6
29091: NOT
29092: IFFALSE 29125
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
29094: LD_ADDR_EXP 82
29098: PUSH
29099: LD_EXP 82
29103: PPUSH
29104: LD_VAR 0 2
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PPUSH
29116: EMPTY
29117: PPUSH
29118: CALL 57843 0 3
29122: ST_TO_ADDR
29123: GO 29195
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
29125: LD_ADDR_EXP 82
29129: PUSH
29130: LD_EXP 82
29134: PPUSH
29135: LD_VAR 0 2
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PPUSH
29147: LD_EXP 82
29151: PUSH
29152: LD_VAR 0 2
29156: ARRAY
29157: PUSH
29158: LD_INT 1
29160: ARRAY
29161: PPUSH
29162: LD_INT 3
29164: PUSH
29165: LD_INT 24
29167: PUSH
29168: LD_INT 1000
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 72
29183: PUSH
29184: LD_VAR 0 6
29188: UNION
29189: PPUSH
29190: CALL 57843 0 3
29194: ST_TO_ADDR
// if not need_heal_2 then
29195: LD_VAR 0 7
29199: NOT
29200: IFFALSE 29233
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
29202: LD_ADDR_EXP 82
29206: PUSH
29207: LD_EXP 82
29211: PPUSH
29212: LD_VAR 0 2
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PPUSH
29224: EMPTY
29225: PPUSH
29226: CALL 57843 0 3
29230: ST_TO_ADDR
29231: GO 29265
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
29233: LD_ADDR_EXP 82
29237: PUSH
29238: LD_EXP 82
29242: PPUSH
29243: LD_VAR 0 2
29247: PUSH
29248: LD_INT 2
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PPUSH
29255: LD_VAR 0 7
29259: PPUSH
29260: CALL 57843 0 3
29264: ST_TO_ADDR
// if need_heal_2 then
29265: LD_VAR 0 7
29269: IFFALSE 29441
// for j in need_heal_2 do
29271: LD_ADDR_VAR 0 3
29275: PUSH
29276: LD_VAR 0 7
29280: PUSH
29281: FOR_IN
29282: IFFALSE 29439
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
29284: LD_ADDR_VAR 0 5
29288: PUSH
29289: LD_EXP 79
29293: PUSH
29294: LD_VAR 0 2
29298: ARRAY
29299: PPUSH
29300: LD_INT 2
29302: PUSH
29303: LD_INT 30
29305: PUSH
29306: LD_INT 6
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 30
29315: PUSH
29316: LD_INT 7
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 30
29325: PUSH
29326: LD_INT 8
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 30
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 30
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 25
29355: PUSH
29356: LD_INT 4
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: PPUSH
29372: CALL_OW 72
29376: ST_TO_ADDR
// if tmp then
29377: LD_VAR 0 5
29381: IFFALSE 29437
// begin k := NearestUnitToUnit ( tmp , j ) ;
29383: LD_ADDR_VAR 0 4
29387: PUSH
29388: LD_VAR 0 5
29392: PPUSH
29393: LD_VAR 0 3
29397: PPUSH
29398: CALL_OW 74
29402: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
29403: LD_VAR 0 3
29407: PPUSH
29408: LD_VAR 0 4
29412: PPUSH
29413: CALL_OW 296
29417: PUSH
29418: LD_INT 7
29420: GREATER
29421: IFFALSE 29437
// ComMoveUnit ( j , k ) ;
29423: LD_VAR 0 3
29427: PPUSH
29428: LD_VAR 0 4
29432: PPUSH
29433: CALL_OW 112
// end ; end ;
29437: GO 29281
29439: POP
29440: POP
// if not need_heal_1 and not need_heal_2 then
29441: LD_VAR 0 6
29445: NOT
29446: PUSH
29447: LD_VAR 0 7
29451: NOT
29452: AND
29453: IFFALSE 29457
// continue ;
29455: GO 28910
// end ;
29457: GO 28910
29459: POP
29460: POP
// RaiseSailEvent ( 102 ) ;
29461: LD_INT 102
29463: PPUSH
29464: CALL_OW 427
// end ;
29468: LD_VAR 0 1
29472: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
29473: LD_INT 0
29475: PPUSH
29476: PPUSH
29477: PPUSH
29478: PPUSH
29479: PPUSH
29480: PPUSH
29481: PPUSH
29482: PPUSH
// if not mc_bases then
29483: LD_EXP 79
29487: NOT
29488: IFFALSE 29492
// exit ;
29490: GO 30332
// for i = 1 to mc_bases do
29492: LD_ADDR_VAR 0 2
29496: PUSH
29497: DOUBLE
29498: LD_INT 1
29500: DEC
29501: ST_TO_ADDR
29502: LD_EXP 79
29506: PUSH
29507: FOR_TO
29508: IFFALSE 30330
// begin if not mc_building_need_repair [ i ] then
29510: LD_EXP 80
29514: PUSH
29515: LD_VAR 0 2
29519: ARRAY
29520: NOT
29521: IFFALSE 29695
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
29523: LD_ADDR_VAR 0 6
29527: PUSH
29528: LD_EXP 98
29532: PUSH
29533: LD_VAR 0 2
29537: ARRAY
29538: PPUSH
29539: LD_INT 3
29541: PUSH
29542: LD_INT 24
29544: PUSH
29545: LD_INT 1000
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: LD_INT 34
29561: PUSH
29562: LD_INT 13
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 34
29571: PUSH
29572: LD_INT 52
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PPUSH
29588: CALL_OW 72
29592: ST_TO_ADDR
// if cranes then
29593: LD_VAR 0 6
29597: IFFALSE 29659
// for j in cranes do
29599: LD_ADDR_VAR 0 3
29603: PUSH
29604: LD_VAR 0 6
29608: PUSH
29609: FOR_IN
29610: IFFALSE 29657
// if not IsInArea ( j , mc_parking [ i ] ) then
29612: LD_VAR 0 3
29616: PPUSH
29617: LD_EXP 103
29621: PUSH
29622: LD_VAR 0 2
29626: ARRAY
29627: PPUSH
29628: CALL_OW 308
29632: NOT
29633: IFFALSE 29655
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29635: LD_VAR 0 3
29639: PPUSH
29640: LD_EXP 103
29644: PUSH
29645: LD_VAR 0 2
29649: ARRAY
29650: PPUSH
29651: CALL_OW 113
29655: GO 29609
29657: POP
29658: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
29659: LD_ADDR_EXP 81
29663: PUSH
29664: LD_EXP 81
29668: PPUSH
29669: LD_VAR 0 2
29673: PPUSH
29674: EMPTY
29675: PPUSH
29676: CALL_OW 1
29680: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
29681: LD_VAR 0 2
29685: PPUSH
29686: LD_INT 101
29688: PPUSH
29689: CALL 24585 0 2
// continue ;
29693: GO 29507
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
29695: LD_ADDR_EXP 85
29699: PUSH
29700: LD_EXP 85
29704: PPUSH
29705: LD_VAR 0 2
29709: PPUSH
29710: EMPTY
29711: PPUSH
29712: CALL_OW 1
29716: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
29717: LD_VAR 0 2
29721: PPUSH
29722: LD_INT 103
29724: PPUSH
29725: CALL 24585 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
29729: LD_ADDR_VAR 0 5
29733: PUSH
29734: LD_EXP 79
29738: PUSH
29739: LD_VAR 0 2
29743: ARRAY
29744: PUSH
29745: LD_EXP 108
29749: PUSH
29750: LD_VAR 0 2
29754: ARRAY
29755: UNION
29756: PPUSH
29757: LD_INT 2
29759: PUSH
29760: LD_INT 25
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 25
29772: PUSH
29773: LD_INT 16
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: LIST
29784: PUSH
29785: EMPTY
29786: LIST
29787: PPUSH
29788: CALL_OW 72
29792: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
29793: LD_ADDR_VAR 0 6
29797: PUSH
29798: LD_EXP 98
29802: PUSH
29803: LD_VAR 0 2
29807: ARRAY
29808: PPUSH
29809: LD_INT 2
29811: PUSH
29812: LD_INT 34
29814: PUSH
29815: LD_INT 13
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 34
29824: PUSH
29825: LD_INT 52
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: PPUSH
29837: CALL_OW 72
29841: ST_TO_ADDR
// if cranes then
29842: LD_VAR 0 6
29846: IFFALSE 29982
// begin for j in cranes do
29848: LD_ADDR_VAR 0 3
29852: PUSH
29853: LD_VAR 0 6
29857: PUSH
29858: FOR_IN
29859: IFFALSE 29980
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
29861: LD_VAR 0 3
29865: PPUSH
29866: CALL_OW 256
29870: PUSH
29871: LD_INT 500
29873: GREATEREQUAL
29874: PUSH
29875: LD_VAR 0 3
29879: PPUSH
29880: CALL_OW 314
29884: NOT
29885: AND
29886: IFFALSE 29920
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
29888: LD_VAR 0 3
29892: PPUSH
29893: LD_EXP 80
29897: PUSH
29898: LD_VAR 0 2
29902: ARRAY
29903: PPUSH
29904: LD_VAR 0 3
29908: PPUSH
29909: CALL_OW 74
29913: PPUSH
29914: CALL_OW 130
29918: GO 29978
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
29920: LD_VAR 0 3
29924: PPUSH
29925: CALL_OW 256
29929: PUSH
29930: LD_INT 500
29932: LESS
29933: PUSH
29934: LD_VAR 0 3
29938: PPUSH
29939: LD_EXP 103
29943: PUSH
29944: LD_VAR 0 2
29948: ARRAY
29949: PPUSH
29950: CALL_OW 308
29954: NOT
29955: AND
29956: IFFALSE 29978
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29958: LD_VAR 0 3
29962: PPUSH
29963: LD_EXP 103
29967: PUSH
29968: LD_VAR 0 2
29972: ARRAY
29973: PPUSH
29974: CALL_OW 113
29978: GO 29858
29980: POP
29981: POP
// end ; if not tmp then
29982: LD_VAR 0 5
29986: NOT
29987: IFFALSE 29991
// continue ;
29989: GO 29507
// for j in tmp do
29991: LD_ADDR_VAR 0 3
29995: PUSH
29996: LD_VAR 0 5
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30326
// begin if mc_need_heal [ i ] then
30004: LD_EXP 82
30008: PUSH
30009: LD_VAR 0 2
30013: ARRAY
30014: IFFALSE 30062
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
30016: LD_VAR 0 3
30020: PUSH
30021: LD_EXP 82
30025: PUSH
30026: LD_VAR 0 2
30030: ARRAY
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: IN
30036: PUSH
30037: LD_VAR 0 3
30041: PUSH
30042: LD_EXP 82
30046: PUSH
30047: LD_VAR 0 2
30051: ARRAY
30052: PUSH
30053: LD_INT 2
30055: ARRAY
30056: IN
30057: OR
30058: IFFALSE 30062
// continue ;
30060: GO 30001
// if IsInUnit ( j ) then
30062: LD_VAR 0 3
30066: PPUSH
30067: CALL_OW 310
30071: IFFALSE 30082
// ComExitBuilding ( j ) ;
30073: LD_VAR 0 3
30077: PPUSH
30078: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
30082: LD_VAR 0 3
30086: PUSH
30087: LD_EXP 81
30091: PUSH
30092: LD_VAR 0 2
30096: ARRAY
30097: IN
30098: NOT
30099: IFFALSE 30157
// begin SetTag ( j , 101 ) ;
30101: LD_VAR 0 3
30105: PPUSH
30106: LD_INT 101
30108: PPUSH
30109: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
30113: LD_ADDR_EXP 81
30117: PUSH
30118: LD_EXP 81
30122: PPUSH
30123: LD_VAR 0 2
30127: PUSH
30128: LD_EXP 81
30132: PUSH
30133: LD_VAR 0 2
30137: ARRAY
30138: PUSH
30139: LD_INT 1
30141: PLUS
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PPUSH
30147: LD_VAR 0 3
30151: PPUSH
30152: CALL 57843 0 3
30156: ST_TO_ADDR
// end ; wait ( 1 ) ;
30157: LD_INT 1
30159: PPUSH
30160: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
30164: LD_ADDR_VAR 0 7
30168: PUSH
30169: LD_EXP 80
30173: PUSH
30174: LD_VAR 0 2
30178: ARRAY
30179: ST_TO_ADDR
// if mc_scan [ i ] then
30180: LD_EXP 102
30184: PUSH
30185: LD_VAR 0 2
30189: ARRAY
30190: IFFALSE 30259
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
30192: LD_ADDR_VAR 0 7
30196: PUSH
30197: LD_EXP 80
30201: PUSH
30202: LD_VAR 0 2
30206: ARRAY
30207: PPUSH
30208: LD_INT 3
30210: PUSH
30211: LD_INT 2
30213: PUSH
30214: LD_INT 30
30216: PUSH
30217: LD_INT 32
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 30
30226: PUSH
30227: LD_INT 33
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 30
30236: PUSH
30237: LD_INT 31
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PPUSH
30254: CALL_OW 72
30258: ST_TO_ADDR
// if not to_repair_tmp then
30259: LD_VAR 0 7
30263: NOT
30264: IFFALSE 30268
// continue ;
30266: GO 30001
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
30268: LD_ADDR_VAR 0 8
30272: PUSH
30273: LD_VAR 0 7
30277: PPUSH
30278: LD_VAR 0 3
30282: PPUSH
30283: CALL_OW 74
30287: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
30288: LD_VAR 0 8
30292: PPUSH
30293: LD_INT 14
30295: PPUSH
30296: CALL 60436 0 2
30300: PUSH
30301: LD_INT 4
30303: ARRAY
30304: PUSH
30305: LD_INT 5
30307: LESS
30308: IFFALSE 30324
// ComRepairBuilding ( j , to_repair ) ;
30310: LD_VAR 0 3
30314: PPUSH
30315: LD_VAR 0 8
30319: PPUSH
30320: CALL_OW 130
// end ;
30324: GO 30001
30326: POP
30327: POP
// end ;
30328: GO 29507
30330: POP
30331: POP
// end ;
30332: LD_VAR 0 1
30336: RET
// export function MC_Heal ; var i , j , tmp ; begin
30337: LD_INT 0
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
// if not mc_bases then
30343: LD_EXP 79
30347: NOT
30348: IFFALSE 30352
// exit ;
30350: GO 30754
// for i = 1 to mc_bases do
30352: LD_ADDR_VAR 0 2
30356: PUSH
30357: DOUBLE
30358: LD_INT 1
30360: DEC
30361: ST_TO_ADDR
30362: LD_EXP 79
30366: PUSH
30367: FOR_TO
30368: IFFALSE 30752
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
30370: LD_EXP 82
30374: PUSH
30375: LD_VAR 0 2
30379: ARRAY
30380: PUSH
30381: LD_INT 1
30383: ARRAY
30384: NOT
30385: PUSH
30386: LD_EXP 82
30390: PUSH
30391: LD_VAR 0 2
30395: ARRAY
30396: PUSH
30397: LD_INT 2
30399: ARRAY
30400: NOT
30401: AND
30402: IFFALSE 30440
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
30404: LD_ADDR_EXP 83
30408: PUSH
30409: LD_EXP 83
30413: PPUSH
30414: LD_VAR 0 2
30418: PPUSH
30419: EMPTY
30420: PPUSH
30421: CALL_OW 1
30425: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
30426: LD_VAR 0 2
30430: PPUSH
30431: LD_INT 102
30433: PPUSH
30434: CALL 24585 0 2
// continue ;
30438: GO 30367
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
30440: LD_ADDR_VAR 0 4
30444: PUSH
30445: LD_EXP 79
30449: PUSH
30450: LD_VAR 0 2
30454: ARRAY
30455: PPUSH
30456: LD_INT 25
30458: PUSH
30459: LD_INT 4
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PPUSH
30466: CALL_OW 72
30470: ST_TO_ADDR
// if not tmp then
30471: LD_VAR 0 4
30475: NOT
30476: IFFALSE 30480
// continue ;
30478: GO 30367
// if mc_taming [ i ] then
30480: LD_EXP 110
30484: PUSH
30485: LD_VAR 0 2
30489: ARRAY
30490: IFFALSE 30514
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
30492: LD_ADDR_EXP 110
30496: PUSH
30497: LD_EXP 110
30501: PPUSH
30502: LD_VAR 0 2
30506: PPUSH
30507: EMPTY
30508: PPUSH
30509: CALL_OW 1
30513: ST_TO_ADDR
// for j in tmp do
30514: LD_ADDR_VAR 0 3
30518: PUSH
30519: LD_VAR 0 4
30523: PUSH
30524: FOR_IN
30525: IFFALSE 30748
// begin if IsInUnit ( j ) then
30527: LD_VAR 0 3
30531: PPUSH
30532: CALL_OW 310
30536: IFFALSE 30547
// ComExitBuilding ( j ) ;
30538: LD_VAR 0 3
30542: PPUSH
30543: CALL_OW 122
// if not j in mc_healers [ i ] then
30547: LD_VAR 0 3
30551: PUSH
30552: LD_EXP 83
30556: PUSH
30557: LD_VAR 0 2
30561: ARRAY
30562: IN
30563: NOT
30564: IFFALSE 30610
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
30566: LD_ADDR_EXP 83
30570: PUSH
30571: LD_EXP 83
30575: PPUSH
30576: LD_VAR 0 2
30580: PUSH
30581: LD_EXP 83
30585: PUSH
30586: LD_VAR 0 2
30590: ARRAY
30591: PUSH
30592: LD_INT 1
30594: PLUS
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PPUSH
30600: LD_VAR 0 3
30604: PPUSH
30605: CALL 57843 0 3
30609: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
30610: LD_VAR 0 3
30614: PPUSH
30615: CALL_OW 110
30619: PUSH
30620: LD_INT 102
30622: NONEQUAL
30623: IFFALSE 30637
// SetTag ( j , 102 ) ;
30625: LD_VAR 0 3
30629: PPUSH
30630: LD_INT 102
30632: PPUSH
30633: CALL_OW 109
// Wait ( 3 ) ;
30637: LD_INT 3
30639: PPUSH
30640: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
30644: LD_EXP 82
30648: PUSH
30649: LD_VAR 0 2
30653: ARRAY
30654: PUSH
30655: LD_INT 1
30657: ARRAY
30658: IFFALSE 30690
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
30660: LD_VAR 0 3
30664: PPUSH
30665: LD_EXP 82
30669: PUSH
30670: LD_VAR 0 2
30674: ARRAY
30675: PUSH
30676: LD_INT 1
30678: ARRAY
30679: PUSH
30680: LD_INT 1
30682: ARRAY
30683: PPUSH
30684: CALL_OW 128
30688: GO 30746
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
30690: LD_VAR 0 3
30694: PPUSH
30695: CALL_OW 314
30699: NOT
30700: PUSH
30701: LD_EXP 82
30705: PUSH
30706: LD_VAR 0 2
30710: ARRAY
30711: PUSH
30712: LD_INT 2
30714: ARRAY
30715: AND
30716: IFFALSE 30746
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
30718: LD_VAR 0 3
30722: PPUSH
30723: LD_EXP 82
30727: PUSH
30728: LD_VAR 0 2
30732: ARRAY
30733: PUSH
30734: LD_INT 2
30736: ARRAY
30737: PUSH
30738: LD_INT 1
30740: ARRAY
30741: PPUSH
30742: CALL_OW 128
// end ;
30746: GO 30524
30748: POP
30749: POP
// end ;
30750: GO 30367
30752: POP
30753: POP
// end ;
30754: LD_VAR 0 1
30758: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
30759: LD_INT 0
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
// if not mc_bases then
30766: LD_EXP 79
30770: NOT
30771: IFFALSE 30775
// exit ;
30773: GO 31918
// for i = 1 to mc_bases do
30775: LD_ADDR_VAR 0 2
30779: PUSH
30780: DOUBLE
30781: LD_INT 1
30783: DEC
30784: ST_TO_ADDR
30785: LD_EXP 79
30789: PUSH
30790: FOR_TO
30791: IFFALSE 31916
// begin if mc_scan [ i ] then
30793: LD_EXP 102
30797: PUSH
30798: LD_VAR 0 2
30802: ARRAY
30803: IFFALSE 30807
// continue ;
30805: GO 30790
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
30807: LD_EXP 84
30811: PUSH
30812: LD_VAR 0 2
30816: ARRAY
30817: NOT
30818: PUSH
30819: LD_EXP 86
30823: PUSH
30824: LD_VAR 0 2
30828: ARRAY
30829: NOT
30830: AND
30831: PUSH
30832: LD_EXP 85
30836: PUSH
30837: LD_VAR 0 2
30841: ARRAY
30842: AND
30843: IFFALSE 30881
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
30845: LD_ADDR_EXP 85
30849: PUSH
30850: LD_EXP 85
30854: PPUSH
30855: LD_VAR 0 2
30859: PPUSH
30860: EMPTY
30861: PPUSH
30862: CALL_OW 1
30866: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
30867: LD_VAR 0 2
30871: PPUSH
30872: LD_INT 103
30874: PPUSH
30875: CALL 24585 0 2
// continue ;
30879: GO 30790
// end ; if mc_construct_list [ i ] then
30881: LD_EXP 86
30885: PUSH
30886: LD_VAR 0 2
30890: ARRAY
30891: IFFALSE 31111
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
30893: LD_ADDR_VAR 0 4
30897: PUSH
30898: LD_EXP 79
30902: PUSH
30903: LD_VAR 0 2
30907: ARRAY
30908: PPUSH
30909: LD_INT 25
30911: PUSH
30912: LD_INT 2
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PPUSH
30919: CALL_OW 72
30923: PUSH
30924: LD_EXP 81
30928: PUSH
30929: LD_VAR 0 2
30933: ARRAY
30934: DIFF
30935: ST_TO_ADDR
// if not tmp then
30936: LD_VAR 0 4
30940: NOT
30941: IFFALSE 30945
// continue ;
30943: GO 30790
// for j in tmp do
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: LD_VAR 0 4
30954: PUSH
30955: FOR_IN
30956: IFFALSE 31107
// begin if not mc_builders [ i ] then
30958: LD_EXP 85
30962: PUSH
30963: LD_VAR 0 2
30967: ARRAY
30968: NOT
30969: IFFALSE 31027
// begin SetTag ( j , 103 ) ;
30971: LD_VAR 0 3
30975: PPUSH
30976: LD_INT 103
30978: PPUSH
30979: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
30983: LD_ADDR_EXP 85
30987: PUSH
30988: LD_EXP 85
30992: PPUSH
30993: LD_VAR 0 2
30997: PUSH
30998: LD_EXP 85
31002: PUSH
31003: LD_VAR 0 2
31007: ARRAY
31008: PUSH
31009: LD_INT 1
31011: PLUS
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PPUSH
31017: LD_VAR 0 3
31021: PPUSH
31022: CALL 57843 0 3
31026: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
31027: LD_VAR 0 3
31031: PPUSH
31032: CALL_OW 310
31036: IFFALSE 31047
// ComExitBuilding ( j ) ;
31038: LD_VAR 0 3
31042: PPUSH
31043: CALL_OW 122
// wait ( 3 ) ;
31047: LD_INT 3
31049: PPUSH
31050: CALL_OW 67
// if not mc_construct_list [ i ] then
31054: LD_EXP 86
31058: PUSH
31059: LD_VAR 0 2
31063: ARRAY
31064: NOT
31065: IFFALSE 31069
// break ;
31067: GO 31107
// if not HasTask ( j ) then
31069: LD_VAR 0 3
31073: PPUSH
31074: CALL_OW 314
31078: NOT
31079: IFFALSE 31105
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
31081: LD_VAR 0 3
31085: PPUSH
31086: LD_EXP 86
31090: PUSH
31091: LD_VAR 0 2
31095: ARRAY
31096: PUSH
31097: LD_INT 1
31099: ARRAY
31100: PPUSH
31101: CALL 60694 0 2
// end ;
31105: GO 30955
31107: POP
31108: POP
// end else
31109: GO 31914
// if mc_build_list [ i ] then
31111: LD_EXP 84
31115: PUSH
31116: LD_VAR 0 2
31120: ARRAY
31121: IFFALSE 31914
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31123: LD_ADDR_VAR 0 5
31127: PUSH
31128: LD_EXP 79
31132: PUSH
31133: LD_VAR 0 2
31137: ARRAY
31138: PPUSH
31139: LD_INT 2
31141: PUSH
31142: LD_INT 30
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 30
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: PPUSH
31167: CALL_OW 72
31171: ST_TO_ADDR
// if depot then
31172: LD_VAR 0 5
31176: IFFALSE 31194
// depot := depot [ 1 ] else
31178: LD_ADDR_VAR 0 5
31182: PUSH
31183: LD_VAR 0 5
31187: PUSH
31188: LD_INT 1
31190: ARRAY
31191: ST_TO_ADDR
31192: GO 31202
// depot := 0 ;
31194: LD_ADDR_VAR 0 5
31198: PUSH
31199: LD_INT 0
31201: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
31202: LD_EXP 84
31206: PUSH
31207: LD_VAR 0 2
31211: ARRAY
31212: PUSH
31213: LD_INT 1
31215: ARRAY
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PPUSH
31221: CALL 60524 0 1
31225: PUSH
31226: LD_EXP 79
31230: PUSH
31231: LD_VAR 0 2
31235: ARRAY
31236: PPUSH
31237: LD_INT 2
31239: PUSH
31240: LD_INT 30
31242: PUSH
31243: LD_INT 2
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 30
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: PPUSH
31265: CALL_OW 72
31269: NOT
31270: AND
31271: IFFALSE 31376
// begin for j = 1 to mc_build_list [ i ] do
31273: LD_ADDR_VAR 0 3
31277: PUSH
31278: DOUBLE
31279: LD_INT 1
31281: DEC
31282: ST_TO_ADDR
31283: LD_EXP 84
31287: PUSH
31288: LD_VAR 0 2
31292: ARRAY
31293: PUSH
31294: FOR_TO
31295: IFFALSE 31374
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
31297: LD_EXP 84
31301: PUSH
31302: LD_VAR 0 2
31306: ARRAY
31307: PUSH
31308: LD_VAR 0 3
31312: ARRAY
31313: PUSH
31314: LD_INT 1
31316: ARRAY
31317: PUSH
31318: LD_INT 2
31320: EQUAL
31321: IFFALSE 31372
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
31323: LD_ADDR_EXP 84
31327: PUSH
31328: LD_EXP 84
31332: PPUSH
31333: LD_VAR 0 2
31337: PPUSH
31338: LD_EXP 84
31342: PUSH
31343: LD_VAR 0 2
31347: ARRAY
31348: PPUSH
31349: LD_VAR 0 3
31353: PPUSH
31354: LD_INT 1
31356: PPUSH
31357: LD_INT 0
31359: PPUSH
31360: CALL 57261 0 4
31364: PPUSH
31365: CALL_OW 1
31369: ST_TO_ADDR
// break ;
31370: GO 31374
// end ;
31372: GO 31294
31374: POP
31375: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
31376: LD_EXP 84
31380: PUSH
31381: LD_VAR 0 2
31385: ARRAY
31386: PUSH
31387: LD_INT 1
31389: ARRAY
31390: PUSH
31391: LD_INT 1
31393: ARRAY
31394: PUSH
31395: LD_INT 0
31397: EQUAL
31398: PUSH
31399: LD_VAR 0 5
31403: PUSH
31404: LD_VAR 0 5
31408: PPUSH
31409: LD_EXP 84
31413: PUSH
31414: LD_VAR 0 2
31418: ARRAY
31419: PUSH
31420: LD_INT 1
31422: ARRAY
31423: PUSH
31424: LD_INT 1
31426: ARRAY
31427: PPUSH
31428: LD_EXP 84
31432: PUSH
31433: LD_VAR 0 2
31437: ARRAY
31438: PUSH
31439: LD_INT 1
31441: ARRAY
31442: PUSH
31443: LD_INT 2
31445: ARRAY
31446: PPUSH
31447: LD_EXP 84
31451: PUSH
31452: LD_VAR 0 2
31456: ARRAY
31457: PUSH
31458: LD_INT 1
31460: ARRAY
31461: PUSH
31462: LD_INT 3
31464: ARRAY
31465: PPUSH
31466: LD_EXP 84
31470: PUSH
31471: LD_VAR 0 2
31475: ARRAY
31476: PUSH
31477: LD_INT 1
31479: ARRAY
31480: PUSH
31481: LD_INT 4
31483: ARRAY
31484: PPUSH
31485: CALL 65258 0 5
31489: AND
31490: OR
31491: IFFALSE 31772
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
31493: LD_ADDR_VAR 0 4
31497: PUSH
31498: LD_EXP 79
31502: PUSH
31503: LD_VAR 0 2
31507: ARRAY
31508: PPUSH
31509: LD_INT 25
31511: PUSH
31512: LD_INT 2
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PPUSH
31519: CALL_OW 72
31523: PUSH
31524: LD_EXP 81
31528: PUSH
31529: LD_VAR 0 2
31533: ARRAY
31534: DIFF
31535: ST_TO_ADDR
// if not tmp then
31536: LD_VAR 0 4
31540: NOT
31541: IFFALSE 31545
// continue ;
31543: GO 30790
// for j in tmp do
31545: LD_ADDR_VAR 0 3
31549: PUSH
31550: LD_VAR 0 4
31554: PUSH
31555: FOR_IN
31556: IFFALSE 31768
// begin if not mc_builders [ i ] then
31558: LD_EXP 85
31562: PUSH
31563: LD_VAR 0 2
31567: ARRAY
31568: NOT
31569: IFFALSE 31627
// begin SetTag ( j , 103 ) ;
31571: LD_VAR 0 3
31575: PPUSH
31576: LD_INT 103
31578: PPUSH
31579: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
31583: LD_ADDR_EXP 85
31587: PUSH
31588: LD_EXP 85
31592: PPUSH
31593: LD_VAR 0 2
31597: PUSH
31598: LD_EXP 85
31602: PUSH
31603: LD_VAR 0 2
31607: ARRAY
31608: PUSH
31609: LD_INT 1
31611: PLUS
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PPUSH
31617: LD_VAR 0 3
31621: PPUSH
31622: CALL 57843 0 3
31626: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
31627: LD_VAR 0 3
31631: PPUSH
31632: CALL_OW 310
31636: IFFALSE 31647
// ComExitBuilding ( j ) ;
31638: LD_VAR 0 3
31642: PPUSH
31643: CALL_OW 122
// wait ( 3 ) ;
31647: LD_INT 3
31649: PPUSH
31650: CALL_OW 67
// if not mc_build_list [ i ] then
31654: LD_EXP 84
31658: PUSH
31659: LD_VAR 0 2
31663: ARRAY
31664: NOT
31665: IFFALSE 31669
// break ;
31667: GO 31768
// if not HasTask ( j ) then
31669: LD_VAR 0 3
31673: PPUSH
31674: CALL_OW 314
31678: NOT
31679: IFFALSE 31766
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
31681: LD_VAR 0 3
31685: PPUSH
31686: LD_EXP 84
31690: PUSH
31691: LD_VAR 0 2
31695: ARRAY
31696: PUSH
31697: LD_INT 1
31699: ARRAY
31700: PUSH
31701: LD_INT 1
31703: ARRAY
31704: PPUSH
31705: LD_EXP 84
31709: PUSH
31710: LD_VAR 0 2
31714: ARRAY
31715: PUSH
31716: LD_INT 1
31718: ARRAY
31719: PUSH
31720: LD_INT 2
31722: ARRAY
31723: PPUSH
31724: LD_EXP 84
31728: PUSH
31729: LD_VAR 0 2
31733: ARRAY
31734: PUSH
31735: LD_INT 1
31737: ARRAY
31738: PUSH
31739: LD_INT 3
31741: ARRAY
31742: PPUSH
31743: LD_EXP 84
31747: PUSH
31748: LD_VAR 0 2
31752: ARRAY
31753: PUSH
31754: LD_INT 1
31756: ARRAY
31757: PUSH
31758: LD_INT 4
31760: ARRAY
31761: PPUSH
31762: CALL_OW 145
// end ;
31766: GO 31555
31768: POP
31769: POP
// end else
31770: GO 31914
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
31772: LD_EXP 79
31776: PUSH
31777: LD_VAR 0 2
31781: ARRAY
31782: PPUSH
31783: LD_EXP 84
31787: PUSH
31788: LD_VAR 0 2
31792: ARRAY
31793: PUSH
31794: LD_INT 1
31796: ARRAY
31797: PUSH
31798: LD_INT 1
31800: ARRAY
31801: PPUSH
31802: LD_EXP 84
31806: PUSH
31807: LD_VAR 0 2
31811: ARRAY
31812: PUSH
31813: LD_INT 1
31815: ARRAY
31816: PUSH
31817: LD_INT 2
31819: ARRAY
31820: PPUSH
31821: LD_EXP 84
31825: PUSH
31826: LD_VAR 0 2
31830: ARRAY
31831: PUSH
31832: LD_INT 1
31834: ARRAY
31835: PUSH
31836: LD_INT 3
31838: ARRAY
31839: PPUSH
31840: LD_EXP 84
31844: PUSH
31845: LD_VAR 0 2
31849: ARRAY
31850: PUSH
31851: LD_INT 1
31853: ARRAY
31854: PUSH
31855: LD_INT 4
31857: ARRAY
31858: PPUSH
31859: CALL 64594 0 5
31863: NOT
31864: IFFALSE 31914
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
31866: LD_ADDR_EXP 84
31870: PUSH
31871: LD_EXP 84
31875: PPUSH
31876: LD_VAR 0 2
31880: PPUSH
31881: LD_EXP 84
31885: PUSH
31886: LD_VAR 0 2
31890: ARRAY
31891: PPUSH
31892: LD_INT 1
31894: PPUSH
31895: LD_INT 1
31897: NEG
31898: PPUSH
31899: LD_INT 0
31901: PPUSH
31902: CALL 57261 0 4
31906: PPUSH
31907: CALL_OW 1
31911: ST_TO_ADDR
// continue ;
31912: GO 30790
// end ; end ; end ;
31914: GO 30790
31916: POP
31917: POP
// end ;
31918: LD_VAR 0 1
31922: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
31923: LD_INT 0
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
// if not mc_bases then
31931: LD_EXP 79
31935: NOT
31936: IFFALSE 31940
// exit ;
31938: GO 32367
// for i = 1 to mc_bases do
31940: LD_ADDR_VAR 0 2
31944: PUSH
31945: DOUBLE
31946: LD_INT 1
31948: DEC
31949: ST_TO_ADDR
31950: LD_EXP 79
31954: PUSH
31955: FOR_TO
31956: IFFALSE 32365
// begin tmp := mc_build_upgrade [ i ] ;
31958: LD_ADDR_VAR 0 4
31962: PUSH
31963: LD_EXP 111
31967: PUSH
31968: LD_VAR 0 2
31972: ARRAY
31973: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
31974: LD_ADDR_VAR 0 6
31978: PUSH
31979: LD_EXP 112
31983: PUSH
31984: LD_VAR 0 2
31988: ARRAY
31989: PPUSH
31990: LD_INT 2
31992: PUSH
31993: LD_INT 30
31995: PUSH
31996: LD_INT 6
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 30
32005: PUSH
32006: LD_INT 7
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: PPUSH
32018: CALL_OW 72
32022: ST_TO_ADDR
// if not tmp and not lab then
32023: LD_VAR 0 4
32027: NOT
32028: PUSH
32029: LD_VAR 0 6
32033: NOT
32034: AND
32035: IFFALSE 32039
// continue ;
32037: GO 31955
// if tmp then
32039: LD_VAR 0 4
32043: IFFALSE 32163
// for j in tmp do
32045: LD_ADDR_VAR 0 3
32049: PUSH
32050: LD_VAR 0 4
32054: PUSH
32055: FOR_IN
32056: IFFALSE 32161
// begin if UpgradeCost ( j ) then
32058: LD_VAR 0 3
32062: PPUSH
32063: CALL 64254 0 1
32067: IFFALSE 32159
// begin ComUpgrade ( j ) ;
32069: LD_VAR 0 3
32073: PPUSH
32074: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
32078: LD_ADDR_EXP 111
32082: PUSH
32083: LD_EXP 111
32087: PPUSH
32088: LD_VAR 0 2
32092: PPUSH
32093: LD_EXP 111
32097: PUSH
32098: LD_VAR 0 2
32102: ARRAY
32103: PUSH
32104: LD_VAR 0 3
32108: DIFF
32109: PPUSH
32110: CALL_OW 1
32114: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
32115: LD_ADDR_EXP 86
32119: PUSH
32120: LD_EXP 86
32124: PPUSH
32125: LD_VAR 0 2
32129: PUSH
32130: LD_EXP 86
32134: PUSH
32135: LD_VAR 0 2
32139: ARRAY
32140: PUSH
32141: LD_INT 1
32143: PLUS
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PPUSH
32149: LD_VAR 0 3
32153: PPUSH
32154: CALL 57843 0 3
32158: ST_TO_ADDR
// end ; end ;
32159: GO 32055
32161: POP
32162: POP
// if not lab or not mc_lab_upgrade [ i ] then
32163: LD_VAR 0 6
32167: NOT
32168: PUSH
32169: LD_EXP 113
32173: PUSH
32174: LD_VAR 0 2
32178: ARRAY
32179: NOT
32180: OR
32181: IFFALSE 32185
// continue ;
32183: GO 31955
// for j in lab do
32185: LD_ADDR_VAR 0 3
32189: PUSH
32190: LD_VAR 0 6
32194: PUSH
32195: FOR_IN
32196: IFFALSE 32361
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
32198: LD_VAR 0 3
32202: PPUSH
32203: CALL_OW 266
32207: PUSH
32208: LD_INT 6
32210: PUSH
32211: LD_INT 7
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: IN
32218: PUSH
32219: LD_VAR 0 3
32223: PPUSH
32224: CALL_OW 461
32228: PUSH
32229: LD_INT 1
32231: NONEQUAL
32232: AND
32233: IFFALSE 32359
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
32235: LD_VAR 0 3
32239: PPUSH
32240: LD_EXP 113
32244: PUSH
32245: LD_VAR 0 2
32249: ARRAY
32250: PUSH
32251: LD_INT 1
32253: ARRAY
32254: PPUSH
32255: CALL 64459 0 2
32259: IFFALSE 32359
// begin ComCancel ( j ) ;
32261: LD_VAR 0 3
32265: PPUSH
32266: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
32270: LD_VAR 0 3
32274: PPUSH
32275: LD_EXP 113
32279: PUSH
32280: LD_VAR 0 2
32284: ARRAY
32285: PUSH
32286: LD_INT 1
32288: ARRAY
32289: PPUSH
32290: CALL_OW 207
// if not j in mc_construct_list [ i ] then
32294: LD_VAR 0 3
32298: PUSH
32299: LD_EXP 86
32303: PUSH
32304: LD_VAR 0 2
32308: ARRAY
32309: IN
32310: NOT
32311: IFFALSE 32357
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
32313: LD_ADDR_EXP 86
32317: PUSH
32318: LD_EXP 86
32322: PPUSH
32323: LD_VAR 0 2
32327: PUSH
32328: LD_EXP 86
32332: PUSH
32333: LD_VAR 0 2
32337: ARRAY
32338: PUSH
32339: LD_INT 1
32341: PLUS
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PPUSH
32347: LD_VAR 0 3
32351: PPUSH
32352: CALL 57843 0 3
32356: ST_TO_ADDR
// break ;
32357: GO 32361
// end ; end ; end ;
32359: GO 32195
32361: POP
32362: POP
// end ;
32363: GO 31955
32365: POP
32366: POP
// end ;
32367: LD_VAR 0 1
32371: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
32372: LD_INT 0
32374: PPUSH
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
32379: PPUSH
32380: PPUSH
32381: PPUSH
32382: PPUSH
// if not mc_bases then
32383: LD_EXP 79
32387: NOT
32388: IFFALSE 32392
// exit ;
32390: GO 32797
// for i = 1 to mc_bases do
32392: LD_ADDR_VAR 0 2
32396: PUSH
32397: DOUBLE
32398: LD_INT 1
32400: DEC
32401: ST_TO_ADDR
32402: LD_EXP 79
32406: PUSH
32407: FOR_TO
32408: IFFALSE 32795
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
32410: LD_EXP 87
32414: PUSH
32415: LD_VAR 0 2
32419: ARRAY
32420: NOT
32421: PUSH
32422: LD_EXP 79
32426: PUSH
32427: LD_VAR 0 2
32431: ARRAY
32432: PPUSH
32433: LD_INT 30
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PPUSH
32443: CALL_OW 72
32447: NOT
32448: OR
32449: IFFALSE 32453
// continue ;
32451: GO 32407
// busy := false ;
32453: LD_ADDR_VAR 0 8
32457: PUSH
32458: LD_INT 0
32460: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32461: LD_ADDR_VAR 0 4
32465: PUSH
32466: LD_EXP 79
32470: PUSH
32471: LD_VAR 0 2
32475: ARRAY
32476: PPUSH
32477: LD_INT 30
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PPUSH
32487: CALL_OW 72
32491: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
32492: LD_ADDR_VAR 0 6
32496: PUSH
32497: LD_EXP 87
32501: PUSH
32502: LD_VAR 0 2
32506: ARRAY
32507: PPUSH
32508: LD_INT 2
32510: PUSH
32511: LD_INT 30
32513: PUSH
32514: LD_INT 32
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 30
32523: PUSH
32524: LD_INT 33
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: PPUSH
32536: CALL_OW 72
32540: ST_TO_ADDR
// if not t then
32541: LD_VAR 0 6
32545: NOT
32546: IFFALSE 32550
// continue ;
32548: GO 32407
// for j in tmp do
32550: LD_ADDR_VAR 0 3
32554: PUSH
32555: LD_VAR 0 4
32559: PUSH
32560: FOR_IN
32561: IFFALSE 32591
// if not BuildingStatus ( j ) = bs_idle then
32563: LD_VAR 0 3
32567: PPUSH
32568: CALL_OW 461
32572: PUSH
32573: LD_INT 2
32575: EQUAL
32576: NOT
32577: IFFALSE 32589
// begin busy := true ;
32579: LD_ADDR_VAR 0 8
32583: PUSH
32584: LD_INT 1
32586: ST_TO_ADDR
// break ;
32587: GO 32591
// end ;
32589: GO 32560
32591: POP
32592: POP
// if busy then
32593: LD_VAR 0 8
32597: IFFALSE 32601
// continue ;
32599: GO 32407
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
32601: LD_ADDR_VAR 0 7
32605: PUSH
32606: LD_VAR 0 6
32610: PPUSH
32611: LD_INT 35
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PPUSH
32621: CALL_OW 72
32625: ST_TO_ADDR
// if tw then
32626: LD_VAR 0 7
32630: IFFALSE 32707
// begin tw := tw [ 1 ] ;
32632: LD_ADDR_VAR 0 7
32636: PUSH
32637: LD_VAR 0 7
32641: PUSH
32642: LD_INT 1
32644: ARRAY
32645: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
32646: LD_ADDR_VAR 0 9
32650: PUSH
32651: LD_VAR 0 7
32655: PPUSH
32656: LD_EXP 104
32660: PUSH
32661: LD_VAR 0 2
32665: ARRAY
32666: PPUSH
32667: CALL 62813 0 2
32671: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
32672: LD_EXP 118
32676: PUSH
32677: LD_VAR 0 2
32681: ARRAY
32682: IFFALSE 32705
// if not weapon in mc_allowed_tower_weapons [ i ] then
32684: LD_VAR 0 9
32688: PUSH
32689: LD_EXP 118
32693: PUSH
32694: LD_VAR 0 2
32698: ARRAY
32699: IN
32700: NOT
32701: IFFALSE 32705
// continue ;
32703: GO 32407
// end else
32705: GO 32770
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
32707: LD_ADDR_VAR 0 5
32711: PUSH
32712: LD_EXP 87
32716: PUSH
32717: LD_VAR 0 2
32721: ARRAY
32722: PPUSH
32723: LD_VAR 0 4
32727: PPUSH
32728: CALL 93024 0 2
32732: ST_TO_ADDR
// if not tmp2 then
32733: LD_VAR 0 5
32737: NOT
32738: IFFALSE 32742
// continue ;
32740: GO 32407
// tw := tmp2 [ 1 ] ;
32742: LD_ADDR_VAR 0 7
32746: PUSH
32747: LD_VAR 0 5
32751: PUSH
32752: LD_INT 1
32754: ARRAY
32755: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
32756: LD_ADDR_VAR 0 9
32760: PUSH
32761: LD_VAR 0 5
32765: PUSH
32766: LD_INT 2
32768: ARRAY
32769: ST_TO_ADDR
// end ; if not weapon then
32770: LD_VAR 0 9
32774: NOT
32775: IFFALSE 32779
// continue ;
32777: GO 32407
// ComPlaceWeapon ( tw , weapon ) ;
32779: LD_VAR 0 7
32783: PPUSH
32784: LD_VAR 0 9
32788: PPUSH
32789: CALL_OW 148
// end ;
32793: GO 32407
32795: POP
32796: POP
// end ;
32797: LD_VAR 0 1
32801: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
32802: LD_INT 0
32804: PPUSH
32805: PPUSH
32806: PPUSH
32807: PPUSH
32808: PPUSH
32809: PPUSH
// if not mc_bases then
32810: LD_EXP 79
32814: NOT
32815: IFFALSE 32819
// exit ;
32817: GO 33595
// for i = 1 to mc_bases do
32819: LD_ADDR_VAR 0 2
32823: PUSH
32824: DOUBLE
32825: LD_INT 1
32827: DEC
32828: ST_TO_ADDR
32829: LD_EXP 79
32833: PUSH
32834: FOR_TO
32835: IFFALSE 33593
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
32837: LD_EXP 92
32841: PUSH
32842: LD_VAR 0 2
32846: ARRAY
32847: NOT
32848: PUSH
32849: LD_EXP 92
32853: PUSH
32854: LD_VAR 0 2
32858: ARRAY
32859: PUSH
32860: LD_EXP 93
32864: PUSH
32865: LD_VAR 0 2
32869: ARRAY
32870: EQUAL
32871: OR
32872: PUSH
32873: LD_EXP 102
32877: PUSH
32878: LD_VAR 0 2
32882: ARRAY
32883: OR
32884: IFFALSE 32888
// continue ;
32886: GO 32834
// if mc_miners [ i ] then
32888: LD_EXP 93
32892: PUSH
32893: LD_VAR 0 2
32897: ARRAY
32898: IFFALSE 33280
// begin for j = mc_miners [ i ] downto 1 do
32900: LD_ADDR_VAR 0 3
32904: PUSH
32905: DOUBLE
32906: LD_EXP 93
32910: PUSH
32911: LD_VAR 0 2
32915: ARRAY
32916: INC
32917: ST_TO_ADDR
32918: LD_INT 1
32920: PUSH
32921: FOR_DOWNTO
32922: IFFALSE 33278
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
32924: LD_EXP 93
32928: PUSH
32929: LD_VAR 0 2
32933: ARRAY
32934: PUSH
32935: LD_VAR 0 3
32939: ARRAY
32940: PPUSH
32941: CALL_OW 301
32945: PUSH
32946: LD_EXP 93
32950: PUSH
32951: LD_VAR 0 2
32955: ARRAY
32956: PUSH
32957: LD_VAR 0 3
32961: ARRAY
32962: PPUSH
32963: CALL_OW 257
32967: PUSH
32968: LD_INT 1
32970: NONEQUAL
32971: OR
32972: IFFALSE 33035
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
32974: LD_ADDR_VAR 0 5
32978: PUSH
32979: LD_EXP 93
32983: PUSH
32984: LD_VAR 0 2
32988: ARRAY
32989: PUSH
32990: LD_EXP 93
32994: PUSH
32995: LD_VAR 0 2
32999: ARRAY
33000: PUSH
33001: LD_VAR 0 3
33005: ARRAY
33006: DIFF
33007: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
33008: LD_ADDR_EXP 93
33012: PUSH
33013: LD_EXP 93
33017: PPUSH
33018: LD_VAR 0 2
33022: PPUSH
33023: LD_VAR 0 5
33027: PPUSH
33028: CALL_OW 1
33032: ST_TO_ADDR
// continue ;
33033: GO 32921
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
33035: LD_EXP 93
33039: PUSH
33040: LD_VAR 0 2
33044: ARRAY
33045: PUSH
33046: LD_VAR 0 3
33050: ARRAY
33051: PPUSH
33052: CALL_OW 257
33056: PUSH
33057: LD_INT 1
33059: EQUAL
33060: PUSH
33061: LD_EXP 93
33065: PUSH
33066: LD_VAR 0 2
33070: ARRAY
33071: PUSH
33072: LD_VAR 0 3
33076: ARRAY
33077: PPUSH
33078: CALL_OW 459
33082: NOT
33083: AND
33084: PUSH
33085: LD_EXP 93
33089: PUSH
33090: LD_VAR 0 2
33094: ARRAY
33095: PUSH
33096: LD_VAR 0 3
33100: ARRAY
33101: PPUSH
33102: CALL_OW 314
33106: NOT
33107: AND
33108: IFFALSE 33276
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
33110: LD_EXP 93
33114: PUSH
33115: LD_VAR 0 2
33119: ARRAY
33120: PUSH
33121: LD_VAR 0 3
33125: ARRAY
33126: PPUSH
33127: CALL_OW 310
33131: IFFALSE 33154
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
33133: LD_EXP 93
33137: PUSH
33138: LD_VAR 0 2
33142: ARRAY
33143: PUSH
33144: LD_VAR 0 3
33148: ARRAY
33149: PPUSH
33150: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
33154: LD_EXP 93
33158: PUSH
33159: LD_VAR 0 2
33163: ARRAY
33164: PUSH
33165: LD_VAR 0 3
33169: ARRAY
33170: PPUSH
33171: CALL_OW 314
33175: NOT
33176: IFFALSE 33276
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
33178: LD_EXP 93
33182: PUSH
33183: LD_VAR 0 2
33187: ARRAY
33188: PUSH
33189: LD_VAR 0 3
33193: ARRAY
33194: PPUSH
33195: LD_EXP 92
33199: PUSH
33200: LD_VAR 0 2
33204: ARRAY
33205: PUSH
33206: LD_VAR 0 3
33210: PUSH
33211: LD_EXP 92
33215: PUSH
33216: LD_VAR 0 2
33220: ARRAY
33221: MOD
33222: PUSH
33223: LD_INT 1
33225: PLUS
33226: ARRAY
33227: PUSH
33228: LD_INT 1
33230: ARRAY
33231: PPUSH
33232: LD_EXP 92
33236: PUSH
33237: LD_VAR 0 2
33241: ARRAY
33242: PUSH
33243: LD_VAR 0 3
33247: PUSH
33248: LD_EXP 92
33252: PUSH
33253: LD_VAR 0 2
33257: ARRAY
33258: MOD
33259: PUSH
33260: LD_INT 1
33262: PLUS
33263: ARRAY
33264: PUSH
33265: LD_INT 2
33267: ARRAY
33268: PPUSH
33269: LD_INT 0
33271: PPUSH
33272: CALL_OW 193
// end ; end ;
33276: GO 32921
33278: POP
33279: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
33280: LD_ADDR_VAR 0 5
33284: PUSH
33285: LD_EXP 79
33289: PUSH
33290: LD_VAR 0 2
33294: ARRAY
33295: PPUSH
33296: LD_INT 2
33298: PUSH
33299: LD_INT 30
33301: PUSH
33302: LD_INT 4
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 30
33311: PUSH
33312: LD_INT 5
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 30
33321: PUSH
33322: LD_INT 32
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: PPUSH
33335: CALL_OW 72
33339: ST_TO_ADDR
// if not tmp then
33340: LD_VAR 0 5
33344: NOT
33345: IFFALSE 33349
// continue ;
33347: GO 32834
// list := [ ] ;
33349: LD_ADDR_VAR 0 6
33353: PUSH
33354: EMPTY
33355: ST_TO_ADDR
// for j in tmp do
33356: LD_ADDR_VAR 0 3
33360: PUSH
33361: LD_VAR 0 5
33365: PUSH
33366: FOR_IN
33367: IFFALSE 33436
// begin for k in UnitsInside ( j ) do
33369: LD_ADDR_VAR 0 4
33373: PUSH
33374: LD_VAR 0 3
33378: PPUSH
33379: CALL_OW 313
33383: PUSH
33384: FOR_IN
33385: IFFALSE 33432
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
33387: LD_VAR 0 4
33391: PPUSH
33392: CALL_OW 257
33396: PUSH
33397: LD_INT 1
33399: EQUAL
33400: PUSH
33401: LD_VAR 0 4
33405: PPUSH
33406: CALL_OW 459
33410: NOT
33411: AND
33412: IFFALSE 33430
// list := list ^ k ;
33414: LD_ADDR_VAR 0 6
33418: PUSH
33419: LD_VAR 0 6
33423: PUSH
33424: LD_VAR 0 4
33428: ADD
33429: ST_TO_ADDR
33430: GO 33384
33432: POP
33433: POP
// end ;
33434: GO 33366
33436: POP
33437: POP
// list := list diff mc_miners [ i ] ;
33438: LD_ADDR_VAR 0 6
33442: PUSH
33443: LD_VAR 0 6
33447: PUSH
33448: LD_EXP 93
33452: PUSH
33453: LD_VAR 0 2
33457: ARRAY
33458: DIFF
33459: ST_TO_ADDR
// if not list then
33460: LD_VAR 0 6
33464: NOT
33465: IFFALSE 33469
// continue ;
33467: GO 32834
// k := mc_mines [ i ] - mc_miners [ i ] ;
33469: LD_ADDR_VAR 0 4
33473: PUSH
33474: LD_EXP 92
33478: PUSH
33479: LD_VAR 0 2
33483: ARRAY
33484: PUSH
33485: LD_EXP 93
33489: PUSH
33490: LD_VAR 0 2
33494: ARRAY
33495: MINUS
33496: ST_TO_ADDR
// if k > list then
33497: LD_VAR 0 4
33501: PUSH
33502: LD_VAR 0 6
33506: GREATER
33507: IFFALSE 33519
// k := list ;
33509: LD_ADDR_VAR 0 4
33513: PUSH
33514: LD_VAR 0 6
33518: ST_TO_ADDR
// for j = 1 to k do
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: DOUBLE
33525: LD_INT 1
33527: DEC
33528: ST_TO_ADDR
33529: LD_VAR 0 4
33533: PUSH
33534: FOR_TO
33535: IFFALSE 33589
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
33537: LD_ADDR_EXP 93
33541: PUSH
33542: LD_EXP 93
33546: PPUSH
33547: LD_VAR 0 2
33551: PUSH
33552: LD_EXP 93
33556: PUSH
33557: LD_VAR 0 2
33561: ARRAY
33562: PUSH
33563: LD_INT 1
33565: PLUS
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PPUSH
33571: LD_VAR 0 6
33575: PUSH
33576: LD_VAR 0 3
33580: ARRAY
33581: PPUSH
33582: CALL 57843 0 3
33586: ST_TO_ADDR
33587: GO 33534
33589: POP
33590: POP
// end ;
33591: GO 32834
33593: POP
33594: POP
// end ;
33595: LD_VAR 0 1
33599: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
33600: LD_INT 0
33602: PPUSH
33603: PPUSH
33604: PPUSH
33605: PPUSH
33606: PPUSH
33607: PPUSH
33608: PPUSH
33609: PPUSH
33610: PPUSH
33611: PPUSH
// if not mc_bases then
33612: LD_EXP 79
33616: NOT
33617: IFFALSE 33621
// exit ;
33619: GO 35371
// for i = 1 to mc_bases do
33621: LD_ADDR_VAR 0 2
33625: PUSH
33626: DOUBLE
33627: LD_INT 1
33629: DEC
33630: ST_TO_ADDR
33631: LD_EXP 79
33635: PUSH
33636: FOR_TO
33637: IFFALSE 35369
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
33639: LD_EXP 79
33643: PUSH
33644: LD_VAR 0 2
33648: ARRAY
33649: NOT
33650: PUSH
33651: LD_EXP 86
33655: PUSH
33656: LD_VAR 0 2
33660: ARRAY
33661: OR
33662: IFFALSE 33666
// continue ;
33664: GO 33636
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
33666: LD_EXP 95
33670: PUSH
33671: LD_VAR 0 2
33675: ARRAY
33676: NOT
33677: PUSH
33678: LD_EXP 96
33682: PUSH
33683: LD_VAR 0 2
33687: ARRAY
33688: AND
33689: IFFALSE 33727
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
33691: LD_ADDR_EXP 96
33695: PUSH
33696: LD_EXP 96
33700: PPUSH
33701: LD_VAR 0 2
33705: PPUSH
33706: EMPTY
33707: PPUSH
33708: CALL_OW 1
33712: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
33713: LD_VAR 0 2
33717: PPUSH
33718: LD_INT 107
33720: PPUSH
33721: CALL 24585 0 2
// continue ;
33725: GO 33636
// end ; target := [ ] ;
33727: LD_ADDR_VAR 0 6
33731: PUSH
33732: EMPTY
33733: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
33734: LD_ADDR_VAR 0 3
33738: PUSH
33739: DOUBLE
33740: LD_EXP 95
33744: PUSH
33745: LD_VAR 0 2
33749: ARRAY
33750: INC
33751: ST_TO_ADDR
33752: LD_INT 1
33754: PUSH
33755: FOR_DOWNTO
33756: IFFALSE 34016
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
33758: LD_EXP 95
33762: PUSH
33763: LD_VAR 0 2
33767: ARRAY
33768: PUSH
33769: LD_VAR 0 3
33773: ARRAY
33774: PUSH
33775: LD_INT 2
33777: ARRAY
33778: PPUSH
33779: LD_EXP 95
33783: PUSH
33784: LD_VAR 0 2
33788: ARRAY
33789: PUSH
33790: LD_VAR 0 3
33794: ARRAY
33795: PUSH
33796: LD_INT 3
33798: ARRAY
33799: PPUSH
33800: CALL_OW 488
33804: PUSH
33805: LD_EXP 95
33809: PUSH
33810: LD_VAR 0 2
33814: ARRAY
33815: PUSH
33816: LD_VAR 0 3
33820: ARRAY
33821: PUSH
33822: LD_INT 2
33824: ARRAY
33825: PPUSH
33826: LD_EXP 95
33830: PUSH
33831: LD_VAR 0 2
33835: ARRAY
33836: PUSH
33837: LD_VAR 0 3
33841: ARRAY
33842: PUSH
33843: LD_INT 3
33845: ARRAY
33846: PPUSH
33847: CALL_OW 284
33851: PUSH
33852: LD_INT 0
33854: EQUAL
33855: AND
33856: IFFALSE 33911
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
33858: LD_ADDR_VAR 0 5
33862: PUSH
33863: LD_EXP 95
33867: PUSH
33868: LD_VAR 0 2
33872: ARRAY
33873: PPUSH
33874: LD_VAR 0 3
33878: PPUSH
33879: CALL_OW 3
33883: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
33884: LD_ADDR_EXP 95
33888: PUSH
33889: LD_EXP 95
33893: PPUSH
33894: LD_VAR 0 2
33898: PPUSH
33899: LD_VAR 0 5
33903: PPUSH
33904: CALL_OW 1
33908: ST_TO_ADDR
// continue ;
33909: GO 33755
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
33911: LD_EXP 79
33915: PUSH
33916: LD_VAR 0 2
33920: ARRAY
33921: PUSH
33922: LD_INT 1
33924: ARRAY
33925: PPUSH
33926: CALL_OW 255
33930: PPUSH
33931: LD_EXP 95
33935: PUSH
33936: LD_VAR 0 2
33940: ARRAY
33941: PUSH
33942: LD_VAR 0 3
33946: ARRAY
33947: PUSH
33948: LD_INT 2
33950: ARRAY
33951: PPUSH
33952: LD_EXP 95
33956: PUSH
33957: LD_VAR 0 2
33961: ARRAY
33962: PUSH
33963: LD_VAR 0 3
33967: ARRAY
33968: PUSH
33969: LD_INT 3
33971: ARRAY
33972: PPUSH
33973: LD_INT 30
33975: PPUSH
33976: CALL 58739 0 4
33980: PUSH
33981: LD_INT 4
33983: ARRAY
33984: PUSH
33985: LD_INT 0
33987: EQUAL
33988: IFFALSE 34014
// begin target := mc_crates [ i ] [ j ] ;
33990: LD_ADDR_VAR 0 6
33994: PUSH
33995: LD_EXP 95
33999: PUSH
34000: LD_VAR 0 2
34004: ARRAY
34005: PUSH
34006: LD_VAR 0 3
34010: ARRAY
34011: ST_TO_ADDR
// break ;
34012: GO 34016
// end ; end ;
34014: GO 33755
34016: POP
34017: POP
// if not target then
34018: LD_VAR 0 6
34022: NOT
34023: IFFALSE 34027
// continue ;
34025: GO 33636
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
34027: LD_ADDR_VAR 0 7
34031: PUSH
34032: LD_EXP 98
34036: PUSH
34037: LD_VAR 0 2
34041: ARRAY
34042: PPUSH
34043: LD_INT 2
34045: PUSH
34046: LD_INT 3
34048: PUSH
34049: LD_INT 58
34051: PUSH
34052: EMPTY
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 61
34061: PUSH
34062: EMPTY
34063: LIST
34064: PUSH
34065: LD_INT 33
34067: PUSH
34068: LD_INT 5
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 33
34077: PUSH
34078: LD_INT 3
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: LD_INT 34
34097: PUSH
34098: LD_INT 32
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 34
34107: PUSH
34108: LD_INT 51
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 34
34117: PUSH
34118: LD_INT 12
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PPUSH
34135: CALL_OW 72
34139: ST_TO_ADDR
// if not cargo then
34140: LD_VAR 0 7
34144: NOT
34145: IFFALSE 34788
// begin if mc_crates_collector [ i ] < 5 then
34147: LD_EXP 96
34151: PUSH
34152: LD_VAR 0 2
34156: ARRAY
34157: PUSH
34158: LD_INT 5
34160: LESS
34161: IFFALSE 34527
// begin if mc_ape [ i ] then
34163: LD_EXP 108
34167: PUSH
34168: LD_VAR 0 2
34172: ARRAY
34173: IFFALSE 34220
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
34175: LD_ADDR_VAR 0 5
34179: PUSH
34180: LD_EXP 108
34184: PUSH
34185: LD_VAR 0 2
34189: ARRAY
34190: PPUSH
34191: LD_INT 25
34193: PUSH
34194: LD_INT 16
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 24
34203: PUSH
34204: LD_INT 750
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PPUSH
34215: CALL_OW 72
34219: ST_TO_ADDR
// if not tmp then
34220: LD_VAR 0 5
34224: NOT
34225: IFFALSE 34272
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
34227: LD_ADDR_VAR 0 5
34231: PUSH
34232: LD_EXP 79
34236: PUSH
34237: LD_VAR 0 2
34241: ARRAY
34242: PPUSH
34243: LD_INT 25
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 24
34255: PUSH
34256: LD_INT 750
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PPUSH
34267: CALL_OW 72
34271: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
34272: LD_EXP 108
34276: PUSH
34277: LD_VAR 0 2
34281: ARRAY
34282: PUSH
34283: LD_EXP 79
34287: PUSH
34288: LD_VAR 0 2
34292: ARRAY
34293: PPUSH
34294: LD_INT 25
34296: PUSH
34297: LD_INT 2
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 24
34306: PUSH
34307: LD_INT 750
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PPUSH
34318: CALL_OW 72
34322: AND
34323: PUSH
34324: LD_VAR 0 5
34328: PUSH
34329: LD_INT 5
34331: LESS
34332: AND
34333: IFFALSE 34415
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
34335: LD_ADDR_VAR 0 3
34339: PUSH
34340: LD_EXP 79
34344: PUSH
34345: LD_VAR 0 2
34349: ARRAY
34350: PPUSH
34351: LD_INT 25
34353: PUSH
34354: LD_INT 2
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 24
34363: PUSH
34364: LD_INT 750
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PPUSH
34375: CALL_OW 72
34379: PUSH
34380: FOR_IN
34381: IFFALSE 34413
// begin tmp := tmp union j ;
34383: LD_ADDR_VAR 0 5
34387: PUSH
34388: LD_VAR 0 5
34392: PUSH
34393: LD_VAR 0 3
34397: UNION
34398: ST_TO_ADDR
// if tmp >= 5 then
34399: LD_VAR 0 5
34403: PUSH
34404: LD_INT 5
34406: GREATEREQUAL
34407: IFFALSE 34411
// break ;
34409: GO 34413
// end ;
34411: GO 34380
34413: POP
34414: POP
// end ; if not tmp then
34415: LD_VAR 0 5
34419: NOT
34420: IFFALSE 34424
// continue ;
34422: GO 33636
// for j in tmp do
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: LD_VAR 0 5
34433: PUSH
34434: FOR_IN
34435: IFFALSE 34525
// if not GetTag ( j ) then
34437: LD_VAR 0 3
34441: PPUSH
34442: CALL_OW 110
34446: NOT
34447: IFFALSE 34523
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
34449: LD_ADDR_EXP 96
34453: PUSH
34454: LD_EXP 96
34458: PPUSH
34459: LD_VAR 0 2
34463: PUSH
34464: LD_EXP 96
34468: PUSH
34469: LD_VAR 0 2
34473: ARRAY
34474: PUSH
34475: LD_INT 1
34477: PLUS
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PPUSH
34483: LD_VAR 0 3
34487: PPUSH
34488: CALL 57843 0 3
34492: ST_TO_ADDR
// SetTag ( j , 107 ) ;
34493: LD_VAR 0 3
34497: PPUSH
34498: LD_INT 107
34500: PPUSH
34501: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
34505: LD_EXP 96
34509: PUSH
34510: LD_VAR 0 2
34514: ARRAY
34515: PUSH
34516: LD_INT 5
34518: GREATEREQUAL
34519: IFFALSE 34523
// break ;
34521: GO 34525
// end ;
34523: GO 34434
34525: POP
34526: POP
// end ; if mc_crates_collector [ i ] and target then
34527: LD_EXP 96
34531: PUSH
34532: LD_VAR 0 2
34536: ARRAY
34537: PUSH
34538: LD_VAR 0 6
34542: AND
34543: IFFALSE 34786
// begin if mc_crates_collector [ i ] < target [ 1 ] then
34545: LD_EXP 96
34549: PUSH
34550: LD_VAR 0 2
34554: ARRAY
34555: PUSH
34556: LD_VAR 0 6
34560: PUSH
34561: LD_INT 1
34563: ARRAY
34564: LESS
34565: IFFALSE 34585
// tmp := mc_crates_collector [ i ] else
34567: LD_ADDR_VAR 0 5
34571: PUSH
34572: LD_EXP 96
34576: PUSH
34577: LD_VAR 0 2
34581: ARRAY
34582: ST_TO_ADDR
34583: GO 34599
// tmp := target [ 1 ] ;
34585: LD_ADDR_VAR 0 5
34589: PUSH
34590: LD_VAR 0 6
34594: PUSH
34595: LD_INT 1
34597: ARRAY
34598: ST_TO_ADDR
// k := 0 ;
34599: LD_ADDR_VAR 0 4
34603: PUSH
34604: LD_INT 0
34606: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
34607: LD_ADDR_VAR 0 3
34611: PUSH
34612: LD_EXP 96
34616: PUSH
34617: LD_VAR 0 2
34621: ARRAY
34622: PUSH
34623: FOR_IN
34624: IFFALSE 34784
// begin k := k + 1 ;
34626: LD_ADDR_VAR 0 4
34630: PUSH
34631: LD_VAR 0 4
34635: PUSH
34636: LD_INT 1
34638: PLUS
34639: ST_TO_ADDR
// if k > tmp then
34640: LD_VAR 0 4
34644: PUSH
34645: LD_VAR 0 5
34649: GREATER
34650: IFFALSE 34654
// break ;
34652: GO 34784
// if not GetClass ( j ) in [ 2 , 16 ] then
34654: LD_VAR 0 3
34658: PPUSH
34659: CALL_OW 257
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 16
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: IN
34674: NOT
34675: IFFALSE 34728
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
34677: LD_ADDR_EXP 96
34681: PUSH
34682: LD_EXP 96
34686: PPUSH
34687: LD_VAR 0 2
34691: PPUSH
34692: LD_EXP 96
34696: PUSH
34697: LD_VAR 0 2
34701: ARRAY
34702: PUSH
34703: LD_VAR 0 3
34707: DIFF
34708: PPUSH
34709: CALL_OW 1
34713: ST_TO_ADDR
// SetTag ( j , 0 ) ;
34714: LD_VAR 0 3
34718: PPUSH
34719: LD_INT 0
34721: PPUSH
34722: CALL_OW 109
// continue ;
34726: GO 34623
// end ; if IsInUnit ( j ) then
34728: LD_VAR 0 3
34732: PPUSH
34733: CALL_OW 310
34737: IFFALSE 34748
// ComExitBuilding ( j ) ;
34739: LD_VAR 0 3
34743: PPUSH
34744: CALL_OW 122
// wait ( 3 ) ;
34748: LD_INT 3
34750: PPUSH
34751: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
34755: LD_VAR 0 3
34759: PPUSH
34760: LD_VAR 0 6
34764: PUSH
34765: LD_INT 2
34767: ARRAY
34768: PPUSH
34769: LD_VAR 0 6
34773: PUSH
34774: LD_INT 3
34776: ARRAY
34777: PPUSH
34778: CALL_OW 117
// end ;
34782: GO 34623
34784: POP
34785: POP
// end ; end else
34786: GO 35367
// begin for j in cargo do
34788: LD_ADDR_VAR 0 3
34792: PUSH
34793: LD_VAR 0 7
34797: PUSH
34798: FOR_IN
34799: IFFALSE 35365
// begin if GetTag ( j ) <> 0 then
34801: LD_VAR 0 3
34805: PPUSH
34806: CALL_OW 110
34810: PUSH
34811: LD_INT 0
34813: NONEQUAL
34814: IFFALSE 34818
// continue ;
34816: GO 34798
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
34818: LD_VAR 0 3
34822: PPUSH
34823: CALL_OW 256
34827: PUSH
34828: LD_INT 1000
34830: LESS
34831: PUSH
34832: LD_VAR 0 3
34836: PPUSH
34837: LD_EXP 103
34841: PUSH
34842: LD_VAR 0 2
34846: ARRAY
34847: PPUSH
34848: CALL_OW 308
34852: NOT
34853: AND
34854: IFFALSE 34876
// ComMoveToArea ( j , mc_parking [ i ] ) ;
34856: LD_VAR 0 3
34860: PPUSH
34861: LD_EXP 103
34865: PUSH
34866: LD_VAR 0 2
34870: ARRAY
34871: PPUSH
34872: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
34876: LD_VAR 0 3
34880: PPUSH
34881: CALL_OW 256
34885: PUSH
34886: LD_INT 1000
34888: LESS
34889: PUSH
34890: LD_VAR 0 3
34894: PPUSH
34895: LD_EXP 103
34899: PUSH
34900: LD_VAR 0 2
34904: ARRAY
34905: PPUSH
34906: CALL_OW 308
34910: AND
34911: IFFALSE 34915
// continue ;
34913: GO 34798
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
34915: LD_VAR 0 3
34919: PPUSH
34920: CALL_OW 262
34924: PUSH
34925: LD_INT 2
34927: EQUAL
34928: PUSH
34929: LD_VAR 0 3
34933: PPUSH
34934: CALL_OW 261
34938: PUSH
34939: LD_INT 15
34941: LESS
34942: AND
34943: IFFALSE 34947
// continue ;
34945: GO 34798
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
34947: LD_VAR 0 3
34951: PPUSH
34952: CALL_OW 262
34956: PUSH
34957: LD_INT 1
34959: EQUAL
34960: PUSH
34961: LD_VAR 0 3
34965: PPUSH
34966: CALL_OW 261
34970: PUSH
34971: LD_INT 10
34973: LESS
34974: AND
34975: IFFALSE 35304
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34977: LD_ADDR_VAR 0 8
34981: PUSH
34982: LD_EXP 79
34986: PUSH
34987: LD_VAR 0 2
34991: ARRAY
34992: PPUSH
34993: LD_INT 2
34995: PUSH
34996: LD_INT 30
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 30
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: PPUSH
35021: CALL_OW 72
35025: ST_TO_ADDR
// if not depot then
35026: LD_VAR 0 8
35030: NOT
35031: IFFALSE 35035
// continue ;
35033: GO 34798
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
35035: LD_VAR 0 3
35039: PPUSH
35040: LD_VAR 0 8
35044: PPUSH
35045: LD_VAR 0 3
35049: PPUSH
35050: CALL_OW 74
35054: PPUSH
35055: CALL_OW 296
35059: PUSH
35060: LD_INT 6
35062: LESS
35063: IFFALSE 35079
// SetFuel ( j , 100 ) else
35065: LD_VAR 0 3
35069: PPUSH
35070: LD_INT 100
35072: PPUSH
35073: CALL_OW 240
35077: GO 35304
// if GetFuel ( j ) = 0 then
35079: LD_VAR 0 3
35083: PPUSH
35084: CALL_OW 261
35088: PUSH
35089: LD_INT 0
35091: EQUAL
35092: IFFALSE 35304
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
35094: LD_ADDR_EXP 98
35098: PUSH
35099: LD_EXP 98
35103: PPUSH
35104: LD_VAR 0 2
35108: PPUSH
35109: LD_EXP 98
35113: PUSH
35114: LD_VAR 0 2
35118: ARRAY
35119: PUSH
35120: LD_VAR 0 3
35124: DIFF
35125: PPUSH
35126: CALL_OW 1
35130: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
35131: LD_VAR 0 3
35135: PPUSH
35136: CALL_OW 263
35140: PUSH
35141: LD_INT 1
35143: EQUAL
35144: IFFALSE 35160
// ComExitVehicle ( IsInUnit ( j ) ) ;
35146: LD_VAR 0 3
35150: PPUSH
35151: CALL_OW 310
35155: PPUSH
35156: CALL_OW 121
// if GetControl ( j ) = control_remote then
35160: LD_VAR 0 3
35164: PPUSH
35165: CALL_OW 263
35169: PUSH
35170: LD_INT 2
35172: EQUAL
35173: IFFALSE 35184
// ComUnlink ( j ) ;
35175: LD_VAR 0 3
35179: PPUSH
35180: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
35184: LD_ADDR_VAR 0 9
35188: PUSH
35189: LD_VAR 0 2
35193: PPUSH
35194: LD_INT 3
35196: PPUSH
35197: CALL 44657 0 2
35201: ST_TO_ADDR
// if fac then
35202: LD_VAR 0 9
35206: IFFALSE 35302
// begin for k in fac do
35208: LD_ADDR_VAR 0 4
35212: PUSH
35213: LD_VAR 0 9
35217: PUSH
35218: FOR_IN
35219: IFFALSE 35300
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
35221: LD_ADDR_VAR 0 10
35225: PUSH
35226: LD_VAR 0 9
35230: PPUSH
35231: LD_VAR 0 3
35235: PPUSH
35236: CALL_OW 265
35240: PPUSH
35241: LD_VAR 0 3
35245: PPUSH
35246: CALL_OW 262
35250: PPUSH
35251: LD_VAR 0 3
35255: PPUSH
35256: CALL_OW 263
35260: PPUSH
35261: LD_VAR 0 3
35265: PPUSH
35266: CALL_OW 264
35270: PPUSH
35271: CALL 55375 0 5
35275: ST_TO_ADDR
// if components then
35276: LD_VAR 0 10
35280: IFFALSE 35298
// begin MC_InsertProduceList ( i , components ) ;
35282: LD_VAR 0 2
35286: PPUSH
35287: LD_VAR 0 10
35291: PPUSH
35292: CALL 44202 0 2
// break ;
35296: GO 35300
// end ; end ;
35298: GO 35218
35300: POP
35301: POP
// end ; continue ;
35302: GO 34798
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
35304: LD_VAR 0 3
35308: PPUSH
35309: LD_INT 1
35311: PPUSH
35312: CALL_OW 289
35316: PUSH
35317: LD_INT 100
35319: LESS
35320: PUSH
35321: LD_VAR 0 3
35325: PPUSH
35326: CALL_OW 314
35330: NOT
35331: AND
35332: IFFALSE 35361
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
35334: LD_VAR 0 3
35338: PPUSH
35339: LD_VAR 0 6
35343: PUSH
35344: LD_INT 2
35346: ARRAY
35347: PPUSH
35348: LD_VAR 0 6
35352: PUSH
35353: LD_INT 3
35355: ARRAY
35356: PPUSH
35357: CALL_OW 117
// break ;
35361: GO 35365
// end ;
35363: GO 34798
35365: POP
35366: POP
// end ; end ;
35367: GO 33636
35369: POP
35370: POP
// end ;
35371: LD_VAR 0 1
35375: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
35376: LD_INT 0
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
// if not mc_bases then
35382: LD_EXP 79
35386: NOT
35387: IFFALSE 35391
// exit ;
35389: GO 35552
// for i = 1 to mc_bases do
35391: LD_ADDR_VAR 0 2
35395: PUSH
35396: DOUBLE
35397: LD_INT 1
35399: DEC
35400: ST_TO_ADDR
35401: LD_EXP 79
35405: PUSH
35406: FOR_TO
35407: IFFALSE 35550
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
35409: LD_ADDR_VAR 0 4
35413: PUSH
35414: LD_EXP 98
35418: PUSH
35419: LD_VAR 0 2
35423: ARRAY
35424: PUSH
35425: LD_EXP 101
35429: PUSH
35430: LD_VAR 0 2
35434: ARRAY
35435: UNION
35436: PPUSH
35437: LD_INT 33
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PPUSH
35447: CALL_OW 72
35451: ST_TO_ADDR
// if tmp then
35452: LD_VAR 0 4
35456: IFFALSE 35548
// for j in tmp do
35458: LD_ADDR_VAR 0 3
35462: PUSH
35463: LD_VAR 0 4
35467: PUSH
35468: FOR_IN
35469: IFFALSE 35546
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
35471: LD_VAR 0 3
35475: PPUSH
35476: CALL_OW 312
35480: NOT
35481: PUSH
35482: LD_VAR 0 3
35486: PPUSH
35487: CALL_OW 256
35491: PUSH
35492: LD_INT 250
35494: GREATEREQUAL
35495: AND
35496: IFFALSE 35509
// Connect ( j ) else
35498: LD_VAR 0 3
35502: PPUSH
35503: CALL 60776 0 1
35507: GO 35544
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
35509: LD_VAR 0 3
35513: PPUSH
35514: CALL_OW 256
35518: PUSH
35519: LD_INT 250
35521: LESS
35522: PUSH
35523: LD_VAR 0 3
35527: PPUSH
35528: CALL_OW 312
35532: AND
35533: IFFALSE 35544
// ComUnlink ( j ) ;
35535: LD_VAR 0 3
35539: PPUSH
35540: CALL_OW 136
35544: GO 35468
35546: POP
35547: POP
// end ;
35548: GO 35406
35550: POP
35551: POP
// end ;
35552: LD_VAR 0 1
35556: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
35557: LD_INT 0
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
// if not mc_bases then
35564: LD_EXP 79
35568: NOT
35569: IFFALSE 35573
// exit ;
35571: GO 36018
// for i = 1 to mc_bases do
35573: LD_ADDR_VAR 0 2
35577: PUSH
35578: DOUBLE
35579: LD_INT 1
35581: DEC
35582: ST_TO_ADDR
35583: LD_EXP 79
35587: PUSH
35588: FOR_TO
35589: IFFALSE 36016
// begin if not mc_produce [ i ] then
35591: LD_EXP 100
35595: PUSH
35596: LD_VAR 0 2
35600: ARRAY
35601: NOT
35602: IFFALSE 35606
// continue ;
35604: GO 35588
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
35606: LD_ADDR_VAR 0 5
35610: PUSH
35611: LD_EXP 79
35615: PUSH
35616: LD_VAR 0 2
35620: ARRAY
35621: PPUSH
35622: LD_INT 30
35624: PUSH
35625: LD_INT 3
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PPUSH
35632: CALL_OW 72
35636: ST_TO_ADDR
// if not fac then
35637: LD_VAR 0 5
35641: NOT
35642: IFFALSE 35646
// continue ;
35644: GO 35588
// for j in fac do
35646: LD_ADDR_VAR 0 3
35650: PUSH
35651: LD_VAR 0 5
35655: PUSH
35656: FOR_IN
35657: IFFALSE 36012
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
35659: LD_VAR 0 3
35663: PPUSH
35664: CALL_OW 461
35668: PUSH
35669: LD_INT 2
35671: NONEQUAL
35672: PUSH
35673: LD_VAR 0 3
35677: PPUSH
35678: LD_INT 15
35680: PPUSH
35681: CALL 60436 0 2
35685: PUSH
35686: LD_INT 4
35688: ARRAY
35689: OR
35690: IFFALSE 35694
// continue ;
35692: GO 35656
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
35694: LD_VAR 0 3
35698: PPUSH
35699: LD_EXP 100
35703: PUSH
35704: LD_VAR 0 2
35708: ARRAY
35709: PUSH
35710: LD_INT 1
35712: ARRAY
35713: PUSH
35714: LD_INT 1
35716: ARRAY
35717: PPUSH
35718: LD_EXP 100
35722: PUSH
35723: LD_VAR 0 2
35727: ARRAY
35728: PUSH
35729: LD_INT 1
35731: ARRAY
35732: PUSH
35733: LD_INT 2
35735: ARRAY
35736: PPUSH
35737: LD_EXP 100
35741: PUSH
35742: LD_VAR 0 2
35746: ARRAY
35747: PUSH
35748: LD_INT 1
35750: ARRAY
35751: PUSH
35752: LD_INT 3
35754: ARRAY
35755: PPUSH
35756: LD_EXP 100
35760: PUSH
35761: LD_VAR 0 2
35765: ARRAY
35766: PUSH
35767: LD_INT 1
35769: ARRAY
35770: PUSH
35771: LD_INT 4
35773: ARRAY
35774: PPUSH
35775: CALL_OW 448
35779: PUSH
35780: LD_VAR 0 3
35784: PPUSH
35785: LD_EXP 100
35789: PUSH
35790: LD_VAR 0 2
35794: ARRAY
35795: PUSH
35796: LD_INT 1
35798: ARRAY
35799: PUSH
35800: LD_INT 1
35802: ARRAY
35803: PUSH
35804: LD_EXP 100
35808: PUSH
35809: LD_VAR 0 2
35813: ARRAY
35814: PUSH
35815: LD_INT 1
35817: ARRAY
35818: PUSH
35819: LD_INT 2
35821: ARRAY
35822: PUSH
35823: LD_EXP 100
35827: PUSH
35828: LD_VAR 0 2
35832: ARRAY
35833: PUSH
35834: LD_INT 1
35836: ARRAY
35837: PUSH
35838: LD_INT 3
35840: ARRAY
35841: PUSH
35842: LD_EXP 100
35846: PUSH
35847: LD_VAR 0 2
35851: ARRAY
35852: PUSH
35853: LD_INT 1
35855: ARRAY
35856: PUSH
35857: LD_INT 4
35859: ARRAY
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: PPUSH
35867: CALL 64107 0 2
35871: AND
35872: IFFALSE 36010
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
35874: LD_VAR 0 3
35878: PPUSH
35879: LD_EXP 100
35883: PUSH
35884: LD_VAR 0 2
35888: ARRAY
35889: PUSH
35890: LD_INT 1
35892: ARRAY
35893: PUSH
35894: LD_INT 1
35896: ARRAY
35897: PPUSH
35898: LD_EXP 100
35902: PUSH
35903: LD_VAR 0 2
35907: ARRAY
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: PUSH
35913: LD_INT 2
35915: ARRAY
35916: PPUSH
35917: LD_EXP 100
35921: PUSH
35922: LD_VAR 0 2
35926: ARRAY
35927: PUSH
35928: LD_INT 1
35930: ARRAY
35931: PUSH
35932: LD_INT 3
35934: ARRAY
35935: PPUSH
35936: LD_EXP 100
35940: PUSH
35941: LD_VAR 0 2
35945: ARRAY
35946: PUSH
35947: LD_INT 1
35949: ARRAY
35950: PUSH
35951: LD_INT 4
35953: ARRAY
35954: PPUSH
35955: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
35959: LD_ADDR_VAR 0 4
35963: PUSH
35964: LD_EXP 100
35968: PUSH
35969: LD_VAR 0 2
35973: ARRAY
35974: PPUSH
35975: LD_INT 1
35977: PPUSH
35978: CALL_OW 3
35982: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
35983: LD_ADDR_EXP 100
35987: PUSH
35988: LD_EXP 100
35992: PPUSH
35993: LD_VAR 0 2
35997: PPUSH
35998: LD_VAR 0 4
36002: PPUSH
36003: CALL_OW 1
36007: ST_TO_ADDR
// break ;
36008: GO 36012
// end ; end ;
36010: GO 35656
36012: POP
36013: POP
// end ;
36014: GO 35588
36016: POP
36017: POP
// end ;
36018: LD_VAR 0 1
36022: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
36023: LD_INT 0
36025: PPUSH
36026: PPUSH
36027: PPUSH
// if not mc_bases then
36028: LD_EXP 79
36032: NOT
36033: IFFALSE 36037
// exit ;
36035: GO 36126
// for i = 1 to mc_bases do
36037: LD_ADDR_VAR 0 2
36041: PUSH
36042: DOUBLE
36043: LD_INT 1
36045: DEC
36046: ST_TO_ADDR
36047: LD_EXP 79
36051: PUSH
36052: FOR_TO
36053: IFFALSE 36124
// begin if mc_attack [ i ] then
36055: LD_EXP 99
36059: PUSH
36060: LD_VAR 0 2
36064: ARRAY
36065: IFFALSE 36122
// begin tmp := mc_attack [ i ] [ 1 ] ;
36067: LD_ADDR_VAR 0 3
36071: PUSH
36072: LD_EXP 99
36076: PUSH
36077: LD_VAR 0 2
36081: ARRAY
36082: PUSH
36083: LD_INT 1
36085: ARRAY
36086: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
36087: LD_ADDR_EXP 99
36091: PUSH
36092: LD_EXP 99
36096: PPUSH
36097: LD_VAR 0 2
36101: PPUSH
36102: EMPTY
36103: PPUSH
36104: CALL_OW 1
36108: ST_TO_ADDR
// Attack ( tmp ) ;
36109: LD_VAR 0 3
36113: PPUSH
36114: CALL 86297 0 1
// exit ;
36118: POP
36119: POP
36120: GO 36126
// end ; end ;
36122: GO 36052
36124: POP
36125: POP
// end ;
36126: LD_VAR 0 1
36130: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
36131: LD_INT 0
36133: PPUSH
36134: PPUSH
36135: PPUSH
36136: PPUSH
36137: PPUSH
36138: PPUSH
36139: PPUSH
// if not mc_bases then
36140: LD_EXP 79
36144: NOT
36145: IFFALSE 36149
// exit ;
36147: GO 36731
// for i = 1 to mc_bases do
36149: LD_ADDR_VAR 0 2
36153: PUSH
36154: DOUBLE
36155: LD_INT 1
36157: DEC
36158: ST_TO_ADDR
36159: LD_EXP 79
36163: PUSH
36164: FOR_TO
36165: IFFALSE 36729
// begin if not mc_bases [ i ] then
36167: LD_EXP 79
36171: PUSH
36172: LD_VAR 0 2
36176: ARRAY
36177: NOT
36178: IFFALSE 36182
// continue ;
36180: GO 36164
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
36182: LD_ADDR_VAR 0 7
36186: PUSH
36187: LD_EXP 79
36191: PUSH
36192: LD_VAR 0 2
36196: ARRAY
36197: PUSH
36198: LD_INT 1
36200: ARRAY
36201: PPUSH
36202: CALL 54679 0 1
36206: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
36207: LD_ADDR_EXP 102
36211: PUSH
36212: LD_EXP 102
36216: PPUSH
36217: LD_VAR 0 2
36221: PPUSH
36222: LD_EXP 79
36226: PUSH
36227: LD_VAR 0 2
36231: ARRAY
36232: PUSH
36233: LD_INT 1
36235: ARRAY
36236: PPUSH
36237: CALL_OW 255
36241: PPUSH
36242: LD_EXP 104
36246: PUSH
36247: LD_VAR 0 2
36251: ARRAY
36252: PPUSH
36253: CALL 52233 0 2
36257: PPUSH
36258: CALL_OW 1
36262: ST_TO_ADDR
// if not mc_scan [ i ] then
36263: LD_EXP 102
36267: PUSH
36268: LD_VAR 0 2
36272: ARRAY
36273: NOT
36274: IFFALSE 36429
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
36276: LD_ADDR_VAR 0 4
36280: PUSH
36281: LD_EXP 79
36285: PUSH
36286: LD_VAR 0 2
36290: ARRAY
36291: PPUSH
36292: LD_INT 2
36294: PUSH
36295: LD_INT 25
36297: PUSH
36298: LD_INT 5
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 25
36307: PUSH
36308: LD_INT 8
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 25
36317: PUSH
36318: LD_INT 9
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: PPUSH
36331: CALL_OW 72
36335: ST_TO_ADDR
// if not tmp then
36336: LD_VAR 0 4
36340: NOT
36341: IFFALSE 36345
// continue ;
36343: GO 36164
// for j in tmp do
36345: LD_ADDR_VAR 0 3
36349: PUSH
36350: LD_VAR 0 4
36354: PUSH
36355: FOR_IN
36356: IFFALSE 36427
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
36358: LD_VAR 0 3
36362: PPUSH
36363: CALL_OW 310
36367: PPUSH
36368: CALL_OW 266
36372: PUSH
36373: LD_INT 5
36375: EQUAL
36376: PUSH
36377: LD_VAR 0 3
36381: PPUSH
36382: CALL_OW 257
36386: PUSH
36387: LD_INT 1
36389: EQUAL
36390: AND
36391: PUSH
36392: LD_VAR 0 3
36396: PPUSH
36397: CALL_OW 459
36401: NOT
36402: AND
36403: PUSH
36404: LD_VAR 0 7
36408: AND
36409: IFFALSE 36425
// ComChangeProfession ( j , class ) ;
36411: LD_VAR 0 3
36415: PPUSH
36416: LD_VAR 0 7
36420: PPUSH
36421: CALL_OW 123
36425: GO 36355
36427: POP
36428: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
36429: LD_EXP 102
36433: PUSH
36434: LD_VAR 0 2
36438: ARRAY
36439: PUSH
36440: LD_EXP 101
36444: PUSH
36445: LD_VAR 0 2
36449: ARRAY
36450: NOT
36451: AND
36452: PUSH
36453: LD_EXP 79
36457: PUSH
36458: LD_VAR 0 2
36462: ARRAY
36463: PPUSH
36464: LD_INT 30
36466: PUSH
36467: LD_INT 32
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PPUSH
36474: CALL_OW 72
36478: NOT
36479: AND
36480: PUSH
36481: LD_EXP 79
36485: PUSH
36486: LD_VAR 0 2
36490: ARRAY
36491: PPUSH
36492: LD_INT 2
36494: PUSH
36495: LD_INT 30
36497: PUSH
36498: LD_INT 4
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 30
36507: PUSH
36508: LD_INT 5
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: PPUSH
36520: CALL_OW 72
36524: NOT
36525: AND
36526: IFFALSE 36658
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
36528: LD_ADDR_VAR 0 4
36532: PUSH
36533: LD_EXP 79
36537: PUSH
36538: LD_VAR 0 2
36542: ARRAY
36543: PPUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 25
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 25
36559: PUSH
36560: LD_INT 5
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 25
36569: PUSH
36570: LD_INT 8
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 25
36579: PUSH
36580: LD_INT 9
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: PPUSH
36594: CALL_OW 72
36598: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
36599: LD_ADDR_VAR 0 4
36603: PUSH
36604: LD_VAR 0 4
36608: PUSH
36609: LD_VAR 0 4
36613: PPUSH
36614: LD_INT 18
36616: PPUSH
36617: CALL 91113 0 2
36621: DIFF
36622: ST_TO_ADDR
// if tmp then
36623: LD_VAR 0 4
36627: IFFALSE 36658
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
36629: LD_VAR 0 2
36633: PPUSH
36634: LD_VAR 0 4
36638: PPUSH
36639: LD_EXP 104
36643: PUSH
36644: LD_VAR 0 2
36648: ARRAY
36649: PPUSH
36650: CALL 52268 0 3
// exit ;
36654: POP
36655: POP
36656: GO 36731
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
36658: LD_EXP 102
36662: PUSH
36663: LD_VAR 0 2
36667: ARRAY
36668: PUSH
36669: LD_EXP 101
36673: PUSH
36674: LD_VAR 0 2
36678: ARRAY
36679: AND
36680: IFFALSE 36727
// begin tmp := mc_defender [ i ] ;
36682: LD_ADDR_VAR 0 4
36686: PUSH
36687: LD_EXP 101
36691: PUSH
36692: LD_VAR 0 2
36696: ARRAY
36697: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
36698: LD_VAR 0 2
36702: PPUSH
36703: LD_VAR 0 4
36707: PPUSH
36708: LD_EXP 102
36712: PUSH
36713: LD_VAR 0 2
36717: ARRAY
36718: PPUSH
36719: CALL 52829 0 3
// exit ;
36723: POP
36724: POP
36725: GO 36731
// end ; end ;
36727: GO 36164
36729: POP
36730: POP
// end ;
36731: LD_VAR 0 1
36735: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
36736: LD_INT 0
36738: PPUSH
36739: PPUSH
36740: PPUSH
36741: PPUSH
36742: PPUSH
36743: PPUSH
36744: PPUSH
36745: PPUSH
36746: PPUSH
36747: PPUSH
36748: PPUSH
// if not mc_bases then
36749: LD_EXP 79
36753: NOT
36754: IFFALSE 36758
// exit ;
36756: GO 37845
// for i = 1 to mc_bases do
36758: LD_ADDR_VAR 0 2
36762: PUSH
36763: DOUBLE
36764: LD_INT 1
36766: DEC
36767: ST_TO_ADDR
36768: LD_EXP 79
36772: PUSH
36773: FOR_TO
36774: IFFALSE 37843
// begin tmp := mc_lab [ i ] ;
36776: LD_ADDR_VAR 0 6
36780: PUSH
36781: LD_EXP 112
36785: PUSH
36786: LD_VAR 0 2
36790: ARRAY
36791: ST_TO_ADDR
// if not tmp then
36792: LD_VAR 0 6
36796: NOT
36797: IFFALSE 36801
// continue ;
36799: GO 36773
// idle_lab := 0 ;
36801: LD_ADDR_VAR 0 11
36805: PUSH
36806: LD_INT 0
36808: ST_TO_ADDR
// for j in tmp do
36809: LD_ADDR_VAR 0 3
36813: PUSH
36814: LD_VAR 0 6
36818: PUSH
36819: FOR_IN
36820: IFFALSE 37839
// begin researching := false ;
36822: LD_ADDR_VAR 0 10
36826: PUSH
36827: LD_INT 0
36829: ST_TO_ADDR
// side := GetSide ( j ) ;
36830: LD_ADDR_VAR 0 4
36834: PUSH
36835: LD_VAR 0 3
36839: PPUSH
36840: CALL_OW 255
36844: ST_TO_ADDR
// if not mc_tech [ side ] then
36845: LD_EXP 106
36849: PUSH
36850: LD_VAR 0 4
36854: ARRAY
36855: NOT
36856: IFFALSE 36860
// continue ;
36858: GO 36819
// if BuildingStatus ( j ) = bs_idle then
36860: LD_VAR 0 3
36864: PPUSH
36865: CALL_OW 461
36869: PUSH
36870: LD_INT 2
36872: EQUAL
36873: IFFALSE 37061
// begin if idle_lab and UnitsInside ( j ) < 6 then
36875: LD_VAR 0 11
36879: PUSH
36880: LD_VAR 0 3
36884: PPUSH
36885: CALL_OW 313
36889: PUSH
36890: LD_INT 6
36892: LESS
36893: AND
36894: IFFALSE 36965
// begin tmp2 := UnitsInside ( idle_lab ) ;
36896: LD_ADDR_VAR 0 9
36900: PUSH
36901: LD_VAR 0 11
36905: PPUSH
36906: CALL_OW 313
36910: ST_TO_ADDR
// if tmp2 then
36911: LD_VAR 0 9
36915: IFFALSE 36957
// for x in tmp2 do
36917: LD_ADDR_VAR 0 7
36921: PUSH
36922: LD_VAR 0 9
36926: PUSH
36927: FOR_IN
36928: IFFALSE 36955
// begin ComExitBuilding ( x ) ;
36930: LD_VAR 0 7
36934: PPUSH
36935: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
36939: LD_VAR 0 7
36943: PPUSH
36944: LD_VAR 0 3
36948: PPUSH
36949: CALL_OW 180
// end ;
36953: GO 36927
36955: POP
36956: POP
// idle_lab := 0 ;
36957: LD_ADDR_VAR 0 11
36961: PUSH
36962: LD_INT 0
36964: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
36965: LD_ADDR_VAR 0 5
36969: PUSH
36970: LD_EXP 106
36974: PUSH
36975: LD_VAR 0 4
36979: ARRAY
36980: PUSH
36981: FOR_IN
36982: IFFALSE 37042
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
36984: LD_VAR 0 3
36988: PPUSH
36989: LD_VAR 0 5
36993: PPUSH
36994: CALL_OW 430
36998: PUSH
36999: LD_VAR 0 4
37003: PPUSH
37004: LD_VAR 0 5
37008: PPUSH
37009: CALL 51338 0 2
37013: AND
37014: IFFALSE 37040
// begin researching := true ;
37016: LD_ADDR_VAR 0 10
37020: PUSH
37021: LD_INT 1
37023: ST_TO_ADDR
// ComResearch ( j , t ) ;
37024: LD_VAR 0 3
37028: PPUSH
37029: LD_VAR 0 5
37033: PPUSH
37034: CALL_OW 124
// break ;
37038: GO 37042
// end ;
37040: GO 36981
37042: POP
37043: POP
// if not researching then
37044: LD_VAR 0 10
37048: NOT
37049: IFFALSE 37061
// idle_lab := j ;
37051: LD_ADDR_VAR 0 11
37055: PUSH
37056: LD_VAR 0 3
37060: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
37061: LD_VAR 0 3
37065: PPUSH
37066: CALL_OW 461
37070: PUSH
37071: LD_INT 10
37073: EQUAL
37074: IFFALSE 37662
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
37076: LD_EXP 108
37080: PUSH
37081: LD_VAR 0 2
37085: ARRAY
37086: NOT
37087: PUSH
37088: LD_EXP 109
37092: PUSH
37093: LD_VAR 0 2
37097: ARRAY
37098: NOT
37099: AND
37100: PUSH
37101: LD_EXP 106
37105: PUSH
37106: LD_VAR 0 4
37110: ARRAY
37111: PUSH
37112: LD_INT 1
37114: GREATER
37115: AND
37116: IFFALSE 37247
// begin ComCancel ( j ) ;
37118: LD_VAR 0 3
37122: PPUSH
37123: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
37127: LD_ADDR_EXP 106
37131: PUSH
37132: LD_EXP 106
37136: PPUSH
37137: LD_VAR 0 4
37141: PPUSH
37142: LD_EXP 106
37146: PUSH
37147: LD_VAR 0 4
37151: ARRAY
37152: PPUSH
37153: LD_EXP 106
37157: PUSH
37158: LD_VAR 0 4
37162: ARRAY
37163: PUSH
37164: LD_INT 1
37166: MINUS
37167: PPUSH
37168: LD_EXP 106
37172: PUSH
37173: LD_VAR 0 4
37177: ARRAY
37178: PPUSH
37179: LD_INT 0
37181: PPUSH
37182: CALL 57261 0 4
37186: PPUSH
37187: CALL_OW 1
37191: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
37192: LD_ADDR_EXP 106
37196: PUSH
37197: LD_EXP 106
37201: PPUSH
37202: LD_VAR 0 4
37206: PPUSH
37207: LD_EXP 106
37211: PUSH
37212: LD_VAR 0 4
37216: ARRAY
37217: PPUSH
37218: LD_EXP 106
37222: PUSH
37223: LD_VAR 0 4
37227: ARRAY
37228: PPUSH
37229: LD_INT 1
37231: PPUSH
37232: LD_INT 0
37234: PPUSH
37235: CALL 57261 0 4
37239: PPUSH
37240: CALL_OW 1
37244: ST_TO_ADDR
// continue ;
37245: GO 36819
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
37247: LD_EXP 108
37251: PUSH
37252: LD_VAR 0 2
37256: ARRAY
37257: PUSH
37258: LD_EXP 109
37262: PUSH
37263: LD_VAR 0 2
37267: ARRAY
37268: NOT
37269: AND
37270: IFFALSE 37397
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
37272: LD_ADDR_EXP 109
37276: PUSH
37277: LD_EXP 109
37281: PPUSH
37282: LD_VAR 0 2
37286: PUSH
37287: LD_EXP 109
37291: PUSH
37292: LD_VAR 0 2
37296: ARRAY
37297: PUSH
37298: LD_INT 1
37300: PLUS
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PPUSH
37306: LD_EXP 108
37310: PUSH
37311: LD_VAR 0 2
37315: ARRAY
37316: PUSH
37317: LD_INT 1
37319: ARRAY
37320: PPUSH
37321: CALL 57843 0 3
37325: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
37326: LD_EXP 108
37330: PUSH
37331: LD_VAR 0 2
37335: ARRAY
37336: PUSH
37337: LD_INT 1
37339: ARRAY
37340: PPUSH
37341: LD_INT 112
37343: PPUSH
37344: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
37348: LD_ADDR_VAR 0 9
37352: PUSH
37353: LD_EXP 108
37357: PUSH
37358: LD_VAR 0 2
37362: ARRAY
37363: PPUSH
37364: LD_INT 1
37366: PPUSH
37367: CALL_OW 3
37371: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
37372: LD_ADDR_EXP 108
37376: PUSH
37377: LD_EXP 108
37381: PPUSH
37382: LD_VAR 0 2
37386: PPUSH
37387: LD_VAR 0 9
37391: PPUSH
37392: CALL_OW 1
37396: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
37397: LD_EXP 108
37401: PUSH
37402: LD_VAR 0 2
37406: ARRAY
37407: PUSH
37408: LD_EXP 109
37412: PUSH
37413: LD_VAR 0 2
37417: ARRAY
37418: AND
37419: PUSH
37420: LD_EXP 109
37424: PUSH
37425: LD_VAR 0 2
37429: ARRAY
37430: PUSH
37431: LD_INT 1
37433: ARRAY
37434: PPUSH
37435: CALL_OW 310
37439: NOT
37440: AND
37441: PUSH
37442: LD_VAR 0 3
37446: PPUSH
37447: CALL_OW 313
37451: PUSH
37452: LD_INT 6
37454: EQUAL
37455: AND
37456: IFFALSE 37512
// begin tmp2 := UnitsInside ( j ) ;
37458: LD_ADDR_VAR 0 9
37462: PUSH
37463: LD_VAR 0 3
37467: PPUSH
37468: CALL_OW 313
37472: ST_TO_ADDR
// if tmp2 = 6 then
37473: LD_VAR 0 9
37477: PUSH
37478: LD_INT 6
37480: EQUAL
37481: IFFALSE 37512
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
37483: LD_VAR 0 9
37487: PUSH
37488: LD_INT 1
37490: ARRAY
37491: PPUSH
37492: LD_INT 112
37494: PPUSH
37495: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
37499: LD_VAR 0 9
37503: PUSH
37504: LD_INT 1
37506: ARRAY
37507: PPUSH
37508: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
37512: LD_EXP 109
37516: PUSH
37517: LD_VAR 0 2
37521: ARRAY
37522: PUSH
37523: LD_EXP 109
37527: PUSH
37528: LD_VAR 0 2
37532: ARRAY
37533: PUSH
37534: LD_INT 1
37536: ARRAY
37537: PPUSH
37538: CALL_OW 314
37542: NOT
37543: AND
37544: PUSH
37545: LD_EXP 109
37549: PUSH
37550: LD_VAR 0 2
37554: ARRAY
37555: PUSH
37556: LD_INT 1
37558: ARRAY
37559: PPUSH
37560: CALL_OW 310
37564: NOT
37565: AND
37566: IFFALSE 37592
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
37568: LD_EXP 109
37572: PUSH
37573: LD_VAR 0 2
37577: ARRAY
37578: PUSH
37579: LD_INT 1
37581: ARRAY
37582: PPUSH
37583: LD_VAR 0 3
37587: PPUSH
37588: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
37592: LD_EXP 109
37596: PUSH
37597: LD_VAR 0 2
37601: ARRAY
37602: PUSH
37603: LD_INT 1
37605: ARRAY
37606: PPUSH
37607: CALL_OW 310
37611: PUSH
37612: LD_EXP 109
37616: PUSH
37617: LD_VAR 0 2
37621: ARRAY
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: PPUSH
37627: CALL_OW 310
37631: PPUSH
37632: CALL_OW 461
37636: PUSH
37637: LD_INT 3
37639: NONEQUAL
37640: AND
37641: IFFALSE 37662
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
37643: LD_EXP 109
37647: PUSH
37648: LD_VAR 0 2
37652: ARRAY
37653: PUSH
37654: LD_INT 1
37656: ARRAY
37657: PPUSH
37658: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
37662: LD_VAR 0 3
37666: PPUSH
37667: CALL_OW 461
37671: PUSH
37672: LD_INT 6
37674: EQUAL
37675: PUSH
37676: LD_VAR 0 6
37680: PUSH
37681: LD_INT 1
37683: GREATER
37684: AND
37685: IFFALSE 37837
// begin sci := [ ] ;
37687: LD_ADDR_VAR 0 8
37691: PUSH
37692: EMPTY
37693: ST_TO_ADDR
// for x in ( tmp diff j ) do
37694: LD_ADDR_VAR 0 7
37698: PUSH
37699: LD_VAR 0 6
37703: PUSH
37704: LD_VAR 0 3
37708: DIFF
37709: PUSH
37710: FOR_IN
37711: IFFALSE 37763
// begin if sci = 6 then
37713: LD_VAR 0 8
37717: PUSH
37718: LD_INT 6
37720: EQUAL
37721: IFFALSE 37725
// break ;
37723: GO 37763
// if BuildingStatus ( x ) = bs_idle then
37725: LD_VAR 0 7
37729: PPUSH
37730: CALL_OW 461
37734: PUSH
37735: LD_INT 2
37737: EQUAL
37738: IFFALSE 37761
// sci := sci ^ UnitsInside ( x ) ;
37740: LD_ADDR_VAR 0 8
37744: PUSH
37745: LD_VAR 0 8
37749: PUSH
37750: LD_VAR 0 7
37754: PPUSH
37755: CALL_OW 313
37759: ADD
37760: ST_TO_ADDR
// end ;
37761: GO 37710
37763: POP
37764: POP
// if not sci then
37765: LD_VAR 0 8
37769: NOT
37770: IFFALSE 37774
// continue ;
37772: GO 36819
// for x in sci do
37774: LD_ADDR_VAR 0 7
37778: PUSH
37779: LD_VAR 0 8
37783: PUSH
37784: FOR_IN
37785: IFFALSE 37835
// if IsInUnit ( x ) and not HasTask ( x ) then
37787: LD_VAR 0 7
37791: PPUSH
37792: CALL_OW 310
37796: PUSH
37797: LD_VAR 0 7
37801: PPUSH
37802: CALL_OW 314
37806: NOT
37807: AND
37808: IFFALSE 37833
// begin ComExitBuilding ( x ) ;
37810: LD_VAR 0 7
37814: PPUSH
37815: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
37819: LD_VAR 0 7
37823: PPUSH
37824: LD_VAR 0 3
37828: PPUSH
37829: CALL_OW 180
// end ;
37833: GO 37784
37835: POP
37836: POP
// end ; end ;
37837: GO 36819
37839: POP
37840: POP
// end ;
37841: GO 36773
37843: POP
37844: POP
// end ;
37845: LD_VAR 0 1
37849: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
37850: LD_INT 0
37852: PPUSH
37853: PPUSH
// if not mc_bases then
37854: LD_EXP 79
37858: NOT
37859: IFFALSE 37863
// exit ;
37861: GO 37944
// for i = 1 to mc_bases do
37863: LD_ADDR_VAR 0 2
37867: PUSH
37868: DOUBLE
37869: LD_INT 1
37871: DEC
37872: ST_TO_ADDR
37873: LD_EXP 79
37877: PUSH
37878: FOR_TO
37879: IFFALSE 37942
// if mc_mines [ i ] and mc_miners [ i ] then
37881: LD_EXP 92
37885: PUSH
37886: LD_VAR 0 2
37890: ARRAY
37891: PUSH
37892: LD_EXP 93
37896: PUSH
37897: LD_VAR 0 2
37901: ARRAY
37902: AND
37903: IFFALSE 37940
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
37905: LD_EXP 93
37909: PUSH
37910: LD_VAR 0 2
37914: ARRAY
37915: PUSH
37916: LD_INT 1
37918: ARRAY
37919: PPUSH
37920: CALL_OW 255
37924: PPUSH
37925: LD_EXP 92
37929: PUSH
37930: LD_VAR 0 2
37934: ARRAY
37935: PPUSH
37936: CALL 54832 0 2
37940: GO 37878
37942: POP
37943: POP
// end ;
37944: LD_VAR 0 1
37948: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
37949: LD_INT 0
37951: PPUSH
37952: PPUSH
37953: PPUSH
37954: PPUSH
37955: PPUSH
37956: PPUSH
37957: PPUSH
37958: PPUSH
// if not mc_bases or not mc_parking then
37959: LD_EXP 79
37963: NOT
37964: PUSH
37965: LD_EXP 103
37969: NOT
37970: OR
37971: IFFALSE 37975
// exit ;
37973: GO 38674
// for i = 1 to mc_bases do
37975: LD_ADDR_VAR 0 2
37979: PUSH
37980: DOUBLE
37981: LD_INT 1
37983: DEC
37984: ST_TO_ADDR
37985: LD_EXP 79
37989: PUSH
37990: FOR_TO
37991: IFFALSE 38672
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
37993: LD_EXP 79
37997: PUSH
37998: LD_VAR 0 2
38002: ARRAY
38003: NOT
38004: PUSH
38005: LD_EXP 103
38009: PUSH
38010: LD_VAR 0 2
38014: ARRAY
38015: NOT
38016: OR
38017: IFFALSE 38021
// continue ;
38019: GO 37990
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
38021: LD_ADDR_VAR 0 5
38025: PUSH
38026: LD_EXP 79
38030: PUSH
38031: LD_VAR 0 2
38035: ARRAY
38036: PUSH
38037: LD_INT 1
38039: ARRAY
38040: PPUSH
38041: CALL_OW 255
38045: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
38046: LD_ADDR_VAR 0 6
38050: PUSH
38051: LD_EXP 79
38055: PUSH
38056: LD_VAR 0 2
38060: ARRAY
38061: PPUSH
38062: LD_INT 30
38064: PUSH
38065: LD_INT 3
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PPUSH
38072: CALL_OW 72
38076: ST_TO_ADDR
// if not fac then
38077: LD_VAR 0 6
38081: NOT
38082: IFFALSE 38133
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38084: LD_ADDR_VAR 0 6
38088: PUSH
38089: LD_EXP 79
38093: PUSH
38094: LD_VAR 0 2
38098: ARRAY
38099: PPUSH
38100: LD_INT 2
38102: PUSH
38103: LD_INT 30
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 30
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: PPUSH
38128: CALL_OW 72
38132: ST_TO_ADDR
// if not fac then
38133: LD_VAR 0 6
38137: NOT
38138: IFFALSE 38142
// continue ;
38140: GO 37990
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38142: LD_ADDR_VAR 0 7
38146: PUSH
38147: LD_EXP 103
38151: PUSH
38152: LD_VAR 0 2
38156: ARRAY
38157: PPUSH
38158: LD_INT 22
38160: PUSH
38161: LD_VAR 0 5
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 21
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: PUSH
38183: LD_INT 24
38185: PUSH
38186: LD_INT 1000
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: PPUSH
38202: CALL_OW 70
38206: ST_TO_ADDR
// for j in fac do
38207: LD_ADDR_VAR 0 3
38211: PUSH
38212: LD_VAR 0 6
38216: PUSH
38217: FOR_IN
38218: IFFALSE 38299
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38220: LD_ADDR_VAR 0 7
38224: PUSH
38225: LD_VAR 0 7
38229: PUSH
38230: LD_INT 22
38232: PUSH
38233: LD_VAR 0 5
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 91
38244: PUSH
38245: LD_VAR 0 3
38249: PUSH
38250: LD_INT 15
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 21
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 3
38270: PUSH
38271: LD_INT 24
38273: PUSH
38274: LD_INT 1000
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: PPUSH
38291: CALL_OW 69
38295: UNION
38296: ST_TO_ADDR
38297: GO 38217
38299: POP
38300: POP
// if not vehs then
38301: LD_VAR 0 7
38305: NOT
38306: IFFALSE 38332
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
38308: LD_ADDR_EXP 91
38312: PUSH
38313: LD_EXP 91
38317: PPUSH
38318: LD_VAR 0 2
38322: PPUSH
38323: EMPTY
38324: PPUSH
38325: CALL_OW 1
38329: ST_TO_ADDR
// continue ;
38330: GO 37990
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
38332: LD_ADDR_VAR 0 8
38336: PUSH
38337: LD_EXP 79
38341: PUSH
38342: LD_VAR 0 2
38346: ARRAY
38347: PPUSH
38348: LD_INT 30
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PPUSH
38358: CALL_OW 72
38362: ST_TO_ADDR
// if tmp then
38363: LD_VAR 0 8
38367: IFFALSE 38470
// begin for j in tmp do
38369: LD_ADDR_VAR 0 3
38373: PUSH
38374: LD_VAR 0 8
38378: PUSH
38379: FOR_IN
38380: IFFALSE 38468
// for k in UnitsInside ( j ) do
38382: LD_ADDR_VAR 0 4
38386: PUSH
38387: LD_VAR 0 3
38391: PPUSH
38392: CALL_OW 313
38396: PUSH
38397: FOR_IN
38398: IFFALSE 38464
// if k then
38400: LD_VAR 0 4
38404: IFFALSE 38462
// if not k in mc_repair_vehicle [ i ] then
38406: LD_VAR 0 4
38410: PUSH
38411: LD_EXP 91
38415: PUSH
38416: LD_VAR 0 2
38420: ARRAY
38421: IN
38422: NOT
38423: IFFALSE 38462
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
38425: LD_ADDR_EXP 91
38429: PUSH
38430: LD_EXP 91
38434: PPUSH
38435: LD_VAR 0 2
38439: PPUSH
38440: LD_EXP 91
38444: PUSH
38445: LD_VAR 0 2
38449: ARRAY
38450: PUSH
38451: LD_VAR 0 4
38455: UNION
38456: PPUSH
38457: CALL_OW 1
38461: ST_TO_ADDR
38462: GO 38397
38464: POP
38465: POP
38466: GO 38379
38468: POP
38469: POP
// end ; if not mc_repair_vehicle [ i ] then
38470: LD_EXP 91
38474: PUSH
38475: LD_VAR 0 2
38479: ARRAY
38480: NOT
38481: IFFALSE 38485
// continue ;
38483: GO 37990
// for j in mc_repair_vehicle [ i ] do
38485: LD_ADDR_VAR 0 3
38489: PUSH
38490: LD_EXP 91
38494: PUSH
38495: LD_VAR 0 2
38499: ARRAY
38500: PUSH
38501: FOR_IN
38502: IFFALSE 38668
// begin if GetClass ( j ) <> 3 then
38504: LD_VAR 0 3
38508: PPUSH
38509: CALL_OW 257
38513: PUSH
38514: LD_INT 3
38516: NONEQUAL
38517: IFFALSE 38558
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
38519: LD_ADDR_EXP 91
38523: PUSH
38524: LD_EXP 91
38528: PPUSH
38529: LD_VAR 0 2
38533: PPUSH
38534: LD_EXP 91
38538: PUSH
38539: LD_VAR 0 2
38543: ARRAY
38544: PUSH
38545: LD_VAR 0 3
38549: DIFF
38550: PPUSH
38551: CALL_OW 1
38555: ST_TO_ADDR
// continue ;
38556: GO 38501
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
38558: LD_VAR 0 3
38562: PPUSH
38563: CALL_OW 311
38567: NOT
38568: PUSH
38569: LD_VAR 0 3
38573: PUSH
38574: LD_EXP 82
38578: PUSH
38579: LD_VAR 0 2
38583: ARRAY
38584: PUSH
38585: LD_INT 1
38587: ARRAY
38588: IN
38589: NOT
38590: AND
38591: PUSH
38592: LD_VAR 0 3
38596: PUSH
38597: LD_EXP 82
38601: PUSH
38602: LD_VAR 0 2
38606: ARRAY
38607: PUSH
38608: LD_INT 2
38610: ARRAY
38611: IN
38612: NOT
38613: AND
38614: IFFALSE 38666
// begin if IsInUnit ( j ) then
38616: LD_VAR 0 3
38620: PPUSH
38621: CALL_OW 310
38625: IFFALSE 38636
// ComExitBuilding ( j ) ;
38627: LD_VAR 0 3
38631: PPUSH
38632: CALL_OW 122
// if not HasTask ( j ) then
38636: LD_VAR 0 3
38640: PPUSH
38641: CALL_OW 314
38645: NOT
38646: IFFALSE 38666
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
38648: LD_VAR 0 3
38652: PPUSH
38653: LD_VAR 0 7
38657: PUSH
38658: LD_INT 1
38660: ARRAY
38661: PPUSH
38662: CALL_OW 189
// end ; end ;
38666: GO 38501
38668: POP
38669: POP
// end ;
38670: GO 37990
38672: POP
38673: POP
// end ;
38674: LD_VAR 0 1
38678: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
38679: LD_INT 0
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
// if not mc_bases then
38692: LD_EXP 79
38696: NOT
38697: IFFALSE 38701
// exit ;
38699: GO 39503
// for i = 1 to mc_bases do
38701: LD_ADDR_VAR 0 2
38705: PUSH
38706: DOUBLE
38707: LD_INT 1
38709: DEC
38710: ST_TO_ADDR
38711: LD_EXP 79
38715: PUSH
38716: FOR_TO
38717: IFFALSE 39501
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
38719: LD_EXP 107
38723: PUSH
38724: LD_VAR 0 2
38728: ARRAY
38729: NOT
38730: PUSH
38731: LD_EXP 82
38735: PUSH
38736: LD_VAR 0 2
38740: ARRAY
38741: PUSH
38742: LD_INT 1
38744: ARRAY
38745: OR
38746: PUSH
38747: LD_EXP 82
38751: PUSH
38752: LD_VAR 0 2
38756: ARRAY
38757: PUSH
38758: LD_INT 2
38760: ARRAY
38761: OR
38762: PUSH
38763: LD_EXP 105
38767: PUSH
38768: LD_VAR 0 2
38772: ARRAY
38773: PPUSH
38774: LD_INT 1
38776: PPUSH
38777: CALL_OW 325
38781: NOT
38782: OR
38783: PUSH
38784: LD_EXP 102
38788: PUSH
38789: LD_VAR 0 2
38793: ARRAY
38794: OR
38795: IFFALSE 38799
// continue ;
38797: GO 38716
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
38799: LD_ADDR_VAR 0 8
38803: PUSH
38804: LD_EXP 79
38808: PUSH
38809: LD_VAR 0 2
38813: ARRAY
38814: PPUSH
38815: LD_INT 25
38817: PUSH
38818: LD_INT 4
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 50
38827: PUSH
38828: EMPTY
38829: LIST
38830: PUSH
38831: LD_INT 3
38833: PUSH
38834: LD_INT 60
38836: PUSH
38837: EMPTY
38838: LIST
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: PPUSH
38849: CALL_OW 72
38853: PUSH
38854: LD_EXP 83
38858: PUSH
38859: LD_VAR 0 2
38863: ARRAY
38864: DIFF
38865: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38866: LD_ADDR_VAR 0 9
38870: PUSH
38871: LD_EXP 79
38875: PUSH
38876: LD_VAR 0 2
38880: ARRAY
38881: PPUSH
38882: LD_INT 2
38884: PUSH
38885: LD_INT 30
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 30
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: PPUSH
38910: CALL_OW 72
38914: ST_TO_ADDR
// if not tmp or not dep then
38915: LD_VAR 0 8
38919: NOT
38920: PUSH
38921: LD_VAR 0 9
38925: NOT
38926: OR
38927: IFFALSE 38931
// continue ;
38929: GO 38716
// side := GetSide ( tmp [ 1 ] ) ;
38931: LD_ADDR_VAR 0 11
38935: PUSH
38936: LD_VAR 0 8
38940: PUSH
38941: LD_INT 1
38943: ARRAY
38944: PPUSH
38945: CALL_OW 255
38949: ST_TO_ADDR
// dep := dep [ 1 ] ;
38950: LD_ADDR_VAR 0 9
38954: PUSH
38955: LD_VAR 0 9
38959: PUSH
38960: LD_INT 1
38962: ARRAY
38963: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
38964: LD_ADDR_VAR 0 7
38968: PUSH
38969: LD_EXP 107
38973: PUSH
38974: LD_VAR 0 2
38978: ARRAY
38979: PPUSH
38980: LD_INT 22
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 25
38992: PUSH
38993: LD_INT 12
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PPUSH
39004: CALL_OW 70
39008: PUSH
39009: LD_INT 22
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 25
39021: PUSH
39022: LD_INT 12
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 91
39031: PUSH
39032: LD_VAR 0 9
39036: PUSH
39037: LD_INT 20
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: PPUSH
39050: CALL_OW 69
39054: UNION
39055: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
39056: LD_ADDR_VAR 0 10
39060: PUSH
39061: LD_EXP 107
39065: PUSH
39066: LD_VAR 0 2
39070: ARRAY
39071: PPUSH
39072: LD_INT 81
39074: PUSH
39075: LD_VAR 0 11
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PPUSH
39084: CALL_OW 70
39088: ST_TO_ADDR
// if not apes or danger_at_area then
39089: LD_VAR 0 7
39093: NOT
39094: PUSH
39095: LD_VAR 0 10
39099: OR
39100: IFFALSE 39150
// begin if mc_taming [ i ] then
39102: LD_EXP 110
39106: PUSH
39107: LD_VAR 0 2
39111: ARRAY
39112: IFFALSE 39148
// begin MC_Reset ( i , 121 ) ;
39114: LD_VAR 0 2
39118: PPUSH
39119: LD_INT 121
39121: PPUSH
39122: CALL 24585 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
39126: LD_ADDR_EXP 110
39130: PUSH
39131: LD_EXP 110
39135: PPUSH
39136: LD_VAR 0 2
39140: PPUSH
39141: EMPTY
39142: PPUSH
39143: CALL_OW 1
39147: ST_TO_ADDR
// end ; continue ;
39148: GO 38716
// end ; for j in tmp do
39150: LD_ADDR_VAR 0 3
39154: PUSH
39155: LD_VAR 0 8
39159: PUSH
39160: FOR_IN
39161: IFFALSE 39497
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
39163: LD_VAR 0 3
39167: PUSH
39168: LD_EXP 110
39172: PUSH
39173: LD_VAR 0 2
39177: ARRAY
39178: IN
39179: NOT
39180: PUSH
39181: LD_EXP 110
39185: PUSH
39186: LD_VAR 0 2
39190: ARRAY
39191: PUSH
39192: LD_INT 3
39194: LESS
39195: AND
39196: IFFALSE 39254
// begin SetTag ( j , 121 ) ;
39198: LD_VAR 0 3
39202: PPUSH
39203: LD_INT 121
39205: PPUSH
39206: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
39210: LD_ADDR_EXP 110
39214: PUSH
39215: LD_EXP 110
39219: PPUSH
39220: LD_VAR 0 2
39224: PUSH
39225: LD_EXP 110
39229: PUSH
39230: LD_VAR 0 2
39234: ARRAY
39235: PUSH
39236: LD_INT 1
39238: PLUS
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PPUSH
39244: LD_VAR 0 3
39248: PPUSH
39249: CALL 57843 0 3
39253: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
39254: LD_VAR 0 3
39258: PUSH
39259: LD_EXP 110
39263: PUSH
39264: LD_VAR 0 2
39268: ARRAY
39269: IN
39270: IFFALSE 39495
// begin if GetClass ( j ) <> 4 then
39272: LD_VAR 0 3
39276: PPUSH
39277: CALL_OW 257
39281: PUSH
39282: LD_INT 4
39284: NONEQUAL
39285: IFFALSE 39338
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
39287: LD_ADDR_EXP 110
39291: PUSH
39292: LD_EXP 110
39296: PPUSH
39297: LD_VAR 0 2
39301: PPUSH
39302: LD_EXP 110
39306: PUSH
39307: LD_VAR 0 2
39311: ARRAY
39312: PUSH
39313: LD_VAR 0 3
39317: DIFF
39318: PPUSH
39319: CALL_OW 1
39323: ST_TO_ADDR
// SetTag ( j , 0 ) ;
39324: LD_VAR 0 3
39328: PPUSH
39329: LD_INT 0
39331: PPUSH
39332: CALL_OW 109
// continue ;
39336: GO 39160
// end ; if IsInUnit ( j ) then
39338: LD_VAR 0 3
39342: PPUSH
39343: CALL_OW 310
39347: IFFALSE 39358
// ComExitBuilding ( j ) ;
39349: LD_VAR 0 3
39353: PPUSH
39354: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
39358: LD_ADDR_VAR 0 6
39362: PUSH
39363: LD_VAR 0 7
39367: PPUSH
39368: LD_VAR 0 3
39372: PPUSH
39373: CALL_OW 74
39377: ST_TO_ADDR
// if not ape then
39378: LD_VAR 0 6
39382: NOT
39383: IFFALSE 39387
// break ;
39385: GO 39497
// x := GetX ( ape ) ;
39387: LD_ADDR_VAR 0 4
39391: PUSH
39392: LD_VAR 0 6
39396: PPUSH
39397: CALL_OW 250
39401: ST_TO_ADDR
// y := GetY ( ape ) ;
39402: LD_ADDR_VAR 0 5
39406: PUSH
39407: LD_VAR 0 6
39411: PPUSH
39412: CALL_OW 251
39416: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39417: LD_VAR 0 4
39421: PPUSH
39422: LD_VAR 0 5
39426: PPUSH
39427: CALL_OW 488
39431: NOT
39432: PUSH
39433: LD_VAR 0 11
39437: PPUSH
39438: LD_VAR 0 4
39442: PPUSH
39443: LD_VAR 0 5
39447: PPUSH
39448: LD_INT 20
39450: PPUSH
39451: CALL 58739 0 4
39455: PUSH
39456: LD_INT 4
39458: ARRAY
39459: OR
39460: IFFALSE 39464
// break ;
39462: GO 39497
// if not HasTask ( j ) then
39464: LD_VAR 0 3
39468: PPUSH
39469: CALL_OW 314
39473: NOT
39474: IFFALSE 39495
// ComTameXY ( j , x , y ) ;
39476: LD_VAR 0 3
39480: PPUSH
39481: LD_VAR 0 4
39485: PPUSH
39486: LD_VAR 0 5
39490: PPUSH
39491: CALL_OW 131
// end ; end ;
39495: GO 39160
39497: POP
39498: POP
// end ;
39499: GO 38716
39501: POP
39502: POP
// end ;
39503: LD_VAR 0 1
39507: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
39508: LD_INT 0
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
39517: PPUSH
// if not mc_bases then
39518: LD_EXP 79
39522: NOT
39523: IFFALSE 39527
// exit ;
39525: GO 40153
// for i = 1 to mc_bases do
39527: LD_ADDR_VAR 0 2
39531: PUSH
39532: DOUBLE
39533: LD_INT 1
39535: DEC
39536: ST_TO_ADDR
39537: LD_EXP 79
39541: PUSH
39542: FOR_TO
39543: IFFALSE 40151
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
39545: LD_EXP 108
39549: PUSH
39550: LD_VAR 0 2
39554: ARRAY
39555: NOT
39556: PUSH
39557: LD_EXP 108
39561: PUSH
39562: LD_VAR 0 2
39566: ARRAY
39567: PPUSH
39568: LD_INT 25
39570: PUSH
39571: LD_INT 12
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PPUSH
39578: CALL_OW 72
39582: NOT
39583: OR
39584: IFFALSE 39588
// continue ;
39586: GO 39542
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
39588: LD_ADDR_VAR 0 5
39592: PUSH
39593: LD_EXP 108
39597: PUSH
39598: LD_VAR 0 2
39602: ARRAY
39603: PUSH
39604: LD_INT 1
39606: ARRAY
39607: PPUSH
39608: CALL_OW 255
39612: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
39613: LD_VAR 0 5
39617: PPUSH
39618: LD_INT 2
39620: PPUSH
39621: CALL_OW 325
39625: IFFALSE 39878
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
39627: LD_ADDR_VAR 0 4
39631: PUSH
39632: LD_EXP 108
39636: PUSH
39637: LD_VAR 0 2
39641: ARRAY
39642: PPUSH
39643: LD_INT 25
39645: PUSH
39646: LD_INT 16
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PPUSH
39653: CALL_OW 72
39657: ST_TO_ADDR
// if tmp < 6 then
39658: LD_VAR 0 4
39662: PUSH
39663: LD_INT 6
39665: LESS
39666: IFFALSE 39878
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39668: LD_ADDR_VAR 0 6
39672: PUSH
39673: LD_EXP 79
39677: PUSH
39678: LD_VAR 0 2
39682: ARRAY
39683: PPUSH
39684: LD_INT 2
39686: PUSH
39687: LD_INT 30
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 30
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: PPUSH
39712: CALL_OW 72
39716: ST_TO_ADDR
// if depot then
39717: LD_VAR 0 6
39721: IFFALSE 39878
// begin selected := 0 ;
39723: LD_ADDR_VAR 0 7
39727: PUSH
39728: LD_INT 0
39730: ST_TO_ADDR
// for j in depot do
39731: LD_ADDR_VAR 0 3
39735: PUSH
39736: LD_VAR 0 6
39740: PUSH
39741: FOR_IN
39742: IFFALSE 39773
// begin if UnitsInside ( j ) < 6 then
39744: LD_VAR 0 3
39748: PPUSH
39749: CALL_OW 313
39753: PUSH
39754: LD_INT 6
39756: LESS
39757: IFFALSE 39771
// begin selected := j ;
39759: LD_ADDR_VAR 0 7
39763: PUSH
39764: LD_VAR 0 3
39768: ST_TO_ADDR
// break ;
39769: GO 39773
// end ; end ;
39771: GO 39741
39773: POP
39774: POP
// if selected then
39775: LD_VAR 0 7
39779: IFFALSE 39878
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
39781: LD_ADDR_VAR 0 3
39785: PUSH
39786: LD_EXP 108
39790: PUSH
39791: LD_VAR 0 2
39795: ARRAY
39796: PPUSH
39797: LD_INT 25
39799: PUSH
39800: LD_INT 12
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PPUSH
39807: CALL_OW 72
39811: PUSH
39812: FOR_IN
39813: IFFALSE 39876
// if not HasTask ( j ) then
39815: LD_VAR 0 3
39819: PPUSH
39820: CALL_OW 314
39824: NOT
39825: IFFALSE 39874
// begin if not IsInUnit ( j ) then
39827: LD_VAR 0 3
39831: PPUSH
39832: CALL_OW 310
39836: NOT
39837: IFFALSE 39853
// ComEnterUnit ( j , selected ) ;
39839: LD_VAR 0 3
39843: PPUSH
39844: LD_VAR 0 7
39848: PPUSH
39849: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
39853: LD_VAR 0 3
39857: PPUSH
39858: LD_INT 16
39860: PPUSH
39861: CALL_OW 183
// AddComExitBuilding ( j ) ;
39865: LD_VAR 0 3
39869: PPUSH
39870: CALL_OW 182
// end ;
39874: GO 39812
39876: POP
39877: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
39878: LD_VAR 0 5
39882: PPUSH
39883: LD_INT 11
39885: PPUSH
39886: CALL_OW 325
39890: IFFALSE 40149
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
39892: LD_ADDR_VAR 0 4
39896: PUSH
39897: LD_EXP 108
39901: PUSH
39902: LD_VAR 0 2
39906: ARRAY
39907: PPUSH
39908: LD_INT 25
39910: PUSH
39911: LD_INT 16
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PPUSH
39918: CALL_OW 72
39922: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
39923: LD_VAR 0 4
39927: PUSH
39928: LD_INT 6
39930: GREATEREQUAL
39931: PUSH
39932: LD_VAR 0 5
39936: PPUSH
39937: LD_INT 2
39939: PPUSH
39940: CALL_OW 325
39944: NOT
39945: OR
39946: IFFALSE 40149
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
39948: LD_ADDR_VAR 0 8
39952: PUSH
39953: LD_EXP 79
39957: PUSH
39958: LD_VAR 0 2
39962: ARRAY
39963: PPUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 30
39969: PUSH
39970: LD_INT 4
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 30
39979: PUSH
39980: LD_INT 5
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: PPUSH
39992: CALL_OW 72
39996: ST_TO_ADDR
// if barracks then
39997: LD_VAR 0 8
40001: IFFALSE 40149
// begin selected := 0 ;
40003: LD_ADDR_VAR 0 7
40007: PUSH
40008: LD_INT 0
40010: ST_TO_ADDR
// for j in barracks do
40011: LD_ADDR_VAR 0 3
40015: PUSH
40016: LD_VAR 0 8
40020: PUSH
40021: FOR_IN
40022: IFFALSE 40053
// begin if UnitsInside ( j ) < 6 then
40024: LD_VAR 0 3
40028: PPUSH
40029: CALL_OW 313
40033: PUSH
40034: LD_INT 6
40036: LESS
40037: IFFALSE 40051
// begin selected := j ;
40039: LD_ADDR_VAR 0 7
40043: PUSH
40044: LD_VAR 0 3
40048: ST_TO_ADDR
// break ;
40049: GO 40053
// end ; end ;
40051: GO 40021
40053: POP
40054: POP
// if selected then
40055: LD_VAR 0 7
40059: IFFALSE 40149
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
40061: LD_ADDR_VAR 0 3
40065: PUSH
40066: LD_EXP 108
40070: PUSH
40071: LD_VAR 0 2
40075: ARRAY
40076: PPUSH
40077: LD_INT 25
40079: PUSH
40080: LD_INT 12
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PPUSH
40087: CALL_OW 72
40091: PUSH
40092: FOR_IN
40093: IFFALSE 40147
// if not IsInUnit ( j ) and not HasTask ( j ) then
40095: LD_VAR 0 3
40099: PPUSH
40100: CALL_OW 310
40104: NOT
40105: PUSH
40106: LD_VAR 0 3
40110: PPUSH
40111: CALL_OW 314
40115: NOT
40116: AND
40117: IFFALSE 40145
// begin ComEnterUnit ( j , selected ) ;
40119: LD_VAR 0 3
40123: PPUSH
40124: LD_VAR 0 7
40128: PPUSH
40129: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
40133: LD_VAR 0 3
40137: PPUSH
40138: LD_INT 15
40140: PPUSH
40141: CALL_OW 183
// end ;
40145: GO 40092
40147: POP
40148: POP
// end ; end ; end ; end ; end ;
40149: GO 39542
40151: POP
40152: POP
// end ;
40153: LD_VAR 0 1
40157: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
40158: LD_INT 0
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
// if not mc_bases then
40164: LD_EXP 79
40168: NOT
40169: IFFALSE 40173
// exit ;
40171: GO 40351
// for i = 1 to mc_bases do
40173: LD_ADDR_VAR 0 2
40177: PUSH
40178: DOUBLE
40179: LD_INT 1
40181: DEC
40182: ST_TO_ADDR
40183: LD_EXP 79
40187: PUSH
40188: FOR_TO
40189: IFFALSE 40349
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
40191: LD_ADDR_VAR 0 4
40195: PUSH
40196: LD_EXP 79
40200: PUSH
40201: LD_VAR 0 2
40205: ARRAY
40206: PPUSH
40207: LD_INT 25
40209: PUSH
40210: LD_INT 9
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PPUSH
40217: CALL_OW 72
40221: ST_TO_ADDR
// if not tmp then
40222: LD_VAR 0 4
40226: NOT
40227: IFFALSE 40231
// continue ;
40229: GO 40188
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
40231: LD_EXP 105
40235: PUSH
40236: LD_VAR 0 2
40240: ARRAY
40241: PPUSH
40242: LD_INT 29
40244: PPUSH
40245: CALL_OW 325
40249: NOT
40250: PUSH
40251: LD_EXP 105
40255: PUSH
40256: LD_VAR 0 2
40260: ARRAY
40261: PPUSH
40262: LD_INT 28
40264: PPUSH
40265: CALL_OW 325
40269: NOT
40270: AND
40271: IFFALSE 40275
// continue ;
40273: GO 40188
// for j in tmp do
40275: LD_ADDR_VAR 0 3
40279: PUSH
40280: LD_VAR 0 4
40284: PUSH
40285: FOR_IN
40286: IFFALSE 40345
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
40288: LD_VAR 0 3
40292: PUSH
40293: LD_EXP 82
40297: PUSH
40298: LD_VAR 0 2
40302: ARRAY
40303: PUSH
40304: LD_INT 1
40306: ARRAY
40307: IN
40308: NOT
40309: PUSH
40310: LD_VAR 0 3
40314: PUSH
40315: LD_EXP 82
40319: PUSH
40320: LD_VAR 0 2
40324: ARRAY
40325: PUSH
40326: LD_INT 2
40328: ARRAY
40329: IN
40330: NOT
40331: AND
40332: IFFALSE 40343
// ComSpaceTimeShoot ( j ) ;
40334: LD_VAR 0 3
40338: PPUSH
40339: CALL 51429 0 1
40343: GO 40285
40345: POP
40346: POP
// end ;
40347: GO 40188
40349: POP
40350: POP
// end ;
40351: LD_VAR 0 1
40355: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
40356: LD_INT 0
40358: PPUSH
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
40363: PPUSH
40364: PPUSH
40365: PPUSH
40366: PPUSH
// if not mc_bases then
40367: LD_EXP 79
40371: NOT
40372: IFFALSE 40376
// exit ;
40374: GO 40998
// for i = 1 to mc_bases do
40376: LD_ADDR_VAR 0 2
40380: PUSH
40381: DOUBLE
40382: LD_INT 1
40384: DEC
40385: ST_TO_ADDR
40386: LD_EXP 79
40390: PUSH
40391: FOR_TO
40392: IFFALSE 40996
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
40394: LD_EXP 114
40398: PUSH
40399: LD_VAR 0 2
40403: ARRAY
40404: NOT
40405: PUSH
40406: LD_INT 38
40408: PPUSH
40409: LD_EXP 105
40413: PUSH
40414: LD_VAR 0 2
40418: ARRAY
40419: PPUSH
40420: CALL_OW 321
40424: PUSH
40425: LD_INT 2
40427: NONEQUAL
40428: OR
40429: IFFALSE 40433
// continue ;
40431: GO 40391
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
40433: LD_ADDR_VAR 0 8
40437: PUSH
40438: LD_EXP 79
40442: PUSH
40443: LD_VAR 0 2
40447: ARRAY
40448: PPUSH
40449: LD_INT 30
40451: PUSH
40452: LD_INT 34
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PPUSH
40459: CALL_OW 72
40463: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
40464: LD_ADDR_VAR 0 9
40468: PUSH
40469: LD_EXP 79
40473: PUSH
40474: LD_VAR 0 2
40478: ARRAY
40479: PPUSH
40480: LD_INT 25
40482: PUSH
40483: LD_INT 4
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PPUSH
40490: CALL_OW 72
40494: PPUSH
40495: LD_INT 0
40497: PPUSH
40498: CALL 91113 0 2
40502: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
40503: LD_VAR 0 9
40507: NOT
40508: PUSH
40509: LD_VAR 0 8
40513: NOT
40514: OR
40515: PUSH
40516: LD_EXP 79
40520: PUSH
40521: LD_VAR 0 2
40525: ARRAY
40526: PPUSH
40527: LD_INT 124
40529: PPUSH
40530: CALL 91113 0 2
40534: OR
40535: IFFALSE 40539
// continue ;
40537: GO 40391
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
40539: LD_EXP 115
40543: PUSH
40544: LD_VAR 0 2
40548: ARRAY
40549: PUSH
40550: LD_EXP 114
40554: PUSH
40555: LD_VAR 0 2
40559: ARRAY
40560: LESS
40561: PUSH
40562: LD_EXP 115
40566: PUSH
40567: LD_VAR 0 2
40571: ARRAY
40572: PUSH
40573: LD_VAR 0 8
40577: LESS
40578: AND
40579: IFFALSE 40994
// begin tmp := sci [ 1 ] ;
40581: LD_ADDR_VAR 0 7
40585: PUSH
40586: LD_VAR 0 9
40590: PUSH
40591: LD_INT 1
40593: ARRAY
40594: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
40595: LD_VAR 0 7
40599: PPUSH
40600: LD_INT 124
40602: PPUSH
40603: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
40607: LD_ADDR_VAR 0 3
40611: PUSH
40612: DOUBLE
40613: LD_EXP 114
40617: PUSH
40618: LD_VAR 0 2
40622: ARRAY
40623: INC
40624: ST_TO_ADDR
40625: LD_EXP 114
40629: PUSH
40630: LD_VAR 0 2
40634: ARRAY
40635: PUSH
40636: FOR_DOWNTO
40637: IFFALSE 40980
// begin if IsInUnit ( tmp ) then
40639: LD_VAR 0 7
40643: PPUSH
40644: CALL_OW 310
40648: IFFALSE 40659
// ComExitBuilding ( tmp ) ;
40650: LD_VAR 0 7
40654: PPUSH
40655: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
40659: LD_INT 35
40661: PPUSH
40662: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
40666: LD_VAR 0 7
40670: PPUSH
40671: CALL_OW 310
40675: NOT
40676: PUSH
40677: LD_VAR 0 7
40681: PPUSH
40682: CALL_OW 314
40686: NOT
40687: AND
40688: IFFALSE 40659
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
40690: LD_ADDR_VAR 0 6
40694: PUSH
40695: LD_VAR 0 7
40699: PPUSH
40700: CALL_OW 250
40704: PUSH
40705: LD_VAR 0 7
40709: PPUSH
40710: CALL_OW 251
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40719: LD_INT 35
40721: PPUSH
40722: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
40726: LD_ADDR_VAR 0 4
40730: PUSH
40731: LD_EXP 114
40735: PUSH
40736: LD_VAR 0 2
40740: ARRAY
40741: PUSH
40742: LD_VAR 0 3
40746: ARRAY
40747: PUSH
40748: LD_INT 1
40750: ARRAY
40751: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
40752: LD_ADDR_VAR 0 5
40756: PUSH
40757: LD_EXP 114
40761: PUSH
40762: LD_VAR 0 2
40766: ARRAY
40767: PUSH
40768: LD_VAR 0 3
40772: ARRAY
40773: PUSH
40774: LD_INT 2
40776: ARRAY
40777: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
40778: LD_VAR 0 7
40782: PPUSH
40783: LD_INT 10
40785: PPUSH
40786: CALL 60436 0 2
40790: PUSH
40791: LD_INT 4
40793: ARRAY
40794: IFFALSE 40832
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
40796: LD_VAR 0 7
40800: PPUSH
40801: LD_VAR 0 6
40805: PUSH
40806: LD_INT 1
40808: ARRAY
40809: PPUSH
40810: LD_VAR 0 6
40814: PUSH
40815: LD_INT 2
40817: ARRAY
40818: PPUSH
40819: CALL_OW 111
// wait ( 0 0$10 ) ;
40823: LD_INT 350
40825: PPUSH
40826: CALL_OW 67
// end else
40830: GO 40858
// begin ComMoveXY ( tmp , x , y ) ;
40832: LD_VAR 0 7
40836: PPUSH
40837: LD_VAR 0 4
40841: PPUSH
40842: LD_VAR 0 5
40846: PPUSH
40847: CALL_OW 111
// wait ( 0 0$3 ) ;
40851: LD_INT 105
40853: PPUSH
40854: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
40858: LD_VAR 0 7
40862: PPUSH
40863: LD_VAR 0 4
40867: PPUSH
40868: LD_VAR 0 5
40872: PPUSH
40873: CALL_OW 307
40877: IFFALSE 40719
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
40879: LD_VAR 0 7
40883: PPUSH
40884: LD_VAR 0 4
40888: PPUSH
40889: LD_VAR 0 5
40893: PPUSH
40894: LD_VAR 0 8
40898: PUSH
40899: LD_VAR 0 3
40903: ARRAY
40904: PPUSH
40905: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
40909: LD_INT 35
40911: PPUSH
40912: CALL_OW 67
// until not HasTask ( tmp ) ;
40916: LD_VAR 0 7
40920: PPUSH
40921: CALL_OW 314
40925: NOT
40926: IFFALSE 40909
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
40928: LD_ADDR_EXP 115
40932: PUSH
40933: LD_EXP 115
40937: PPUSH
40938: LD_VAR 0 2
40942: PUSH
40943: LD_EXP 115
40947: PUSH
40948: LD_VAR 0 2
40952: ARRAY
40953: PUSH
40954: LD_INT 1
40956: PLUS
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PPUSH
40962: LD_VAR 0 8
40966: PUSH
40967: LD_VAR 0 3
40971: ARRAY
40972: PPUSH
40973: CALL 57843 0 3
40977: ST_TO_ADDR
// end ;
40978: GO 40636
40980: POP
40981: POP
// MC_Reset ( i , 124 ) ;
40982: LD_VAR 0 2
40986: PPUSH
40987: LD_INT 124
40989: PPUSH
40990: CALL 24585 0 2
// end ; end ;
40994: GO 40391
40996: POP
40997: POP
// end ;
40998: LD_VAR 0 1
41002: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
41003: LD_INT 0
41005: PPUSH
41006: PPUSH
41007: PPUSH
// if not mc_bases then
41008: LD_EXP 79
41012: NOT
41013: IFFALSE 41017
// exit ;
41015: GO 41623
// for i = 1 to mc_bases do
41017: LD_ADDR_VAR 0 2
41021: PUSH
41022: DOUBLE
41023: LD_INT 1
41025: DEC
41026: ST_TO_ADDR
41027: LD_EXP 79
41031: PUSH
41032: FOR_TO
41033: IFFALSE 41621
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
41035: LD_ADDR_VAR 0 3
41039: PUSH
41040: LD_EXP 79
41044: PUSH
41045: LD_VAR 0 2
41049: ARRAY
41050: PPUSH
41051: LD_INT 25
41053: PUSH
41054: LD_INT 4
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PPUSH
41061: CALL_OW 72
41065: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
41066: LD_VAR 0 3
41070: NOT
41071: PUSH
41072: LD_EXP 116
41076: PUSH
41077: LD_VAR 0 2
41081: ARRAY
41082: NOT
41083: OR
41084: PUSH
41085: LD_EXP 79
41089: PUSH
41090: LD_VAR 0 2
41094: ARRAY
41095: PPUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 30
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 30
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: PPUSH
41124: CALL_OW 72
41128: NOT
41129: OR
41130: IFFALSE 41180
// begin if mc_deposits_finder [ i ] then
41132: LD_EXP 117
41136: PUSH
41137: LD_VAR 0 2
41141: ARRAY
41142: IFFALSE 41178
// begin MC_Reset ( i , 125 ) ;
41144: LD_VAR 0 2
41148: PPUSH
41149: LD_INT 125
41151: PPUSH
41152: CALL 24585 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
41156: LD_ADDR_EXP 117
41160: PUSH
41161: LD_EXP 117
41165: PPUSH
41166: LD_VAR 0 2
41170: PPUSH
41171: EMPTY
41172: PPUSH
41173: CALL_OW 1
41177: ST_TO_ADDR
// end ; continue ;
41178: GO 41032
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
41180: LD_EXP 116
41184: PUSH
41185: LD_VAR 0 2
41189: ARRAY
41190: PUSH
41191: LD_INT 1
41193: ARRAY
41194: PUSH
41195: LD_INT 3
41197: ARRAY
41198: PUSH
41199: LD_INT 1
41201: EQUAL
41202: PUSH
41203: LD_INT 20
41205: PPUSH
41206: LD_EXP 105
41210: PUSH
41211: LD_VAR 0 2
41215: ARRAY
41216: PPUSH
41217: CALL_OW 321
41221: PUSH
41222: LD_INT 2
41224: NONEQUAL
41225: AND
41226: IFFALSE 41276
// begin if mc_deposits_finder [ i ] then
41228: LD_EXP 117
41232: PUSH
41233: LD_VAR 0 2
41237: ARRAY
41238: IFFALSE 41274
// begin MC_Reset ( i , 125 ) ;
41240: LD_VAR 0 2
41244: PPUSH
41245: LD_INT 125
41247: PPUSH
41248: CALL 24585 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
41252: LD_ADDR_EXP 117
41256: PUSH
41257: LD_EXP 117
41261: PPUSH
41262: LD_VAR 0 2
41266: PPUSH
41267: EMPTY
41268: PPUSH
41269: CALL_OW 1
41273: ST_TO_ADDR
// end ; continue ;
41274: GO 41032
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
41276: LD_EXP 116
41280: PUSH
41281: LD_VAR 0 2
41285: ARRAY
41286: PUSH
41287: LD_INT 1
41289: ARRAY
41290: PUSH
41291: LD_INT 1
41293: ARRAY
41294: PPUSH
41295: LD_EXP 116
41299: PUSH
41300: LD_VAR 0 2
41304: ARRAY
41305: PUSH
41306: LD_INT 1
41308: ARRAY
41309: PUSH
41310: LD_INT 2
41312: ARRAY
41313: PPUSH
41314: LD_EXP 105
41318: PUSH
41319: LD_VAR 0 2
41323: ARRAY
41324: PPUSH
41325: CALL_OW 440
41329: IFFALSE 41372
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
41331: LD_ADDR_EXP 116
41335: PUSH
41336: LD_EXP 116
41340: PPUSH
41341: LD_VAR 0 2
41345: PPUSH
41346: LD_EXP 116
41350: PUSH
41351: LD_VAR 0 2
41355: ARRAY
41356: PPUSH
41357: LD_INT 1
41359: PPUSH
41360: CALL_OW 3
41364: PPUSH
41365: CALL_OW 1
41369: ST_TO_ADDR
41370: GO 41619
// begin if not mc_deposits_finder [ i ] then
41372: LD_EXP 117
41376: PUSH
41377: LD_VAR 0 2
41381: ARRAY
41382: NOT
41383: IFFALSE 41435
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
41385: LD_ADDR_EXP 117
41389: PUSH
41390: LD_EXP 117
41394: PPUSH
41395: LD_VAR 0 2
41399: PPUSH
41400: LD_VAR 0 3
41404: PUSH
41405: LD_INT 1
41407: ARRAY
41408: PUSH
41409: EMPTY
41410: LIST
41411: PPUSH
41412: CALL_OW 1
41416: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
41417: LD_VAR 0 3
41421: PUSH
41422: LD_INT 1
41424: ARRAY
41425: PPUSH
41426: LD_INT 125
41428: PPUSH
41429: CALL_OW 109
// end else
41433: GO 41619
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
41435: LD_EXP 117
41439: PUSH
41440: LD_VAR 0 2
41444: ARRAY
41445: PUSH
41446: LD_INT 1
41448: ARRAY
41449: PPUSH
41450: CALL_OW 310
41454: IFFALSE 41477
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
41456: LD_EXP 117
41460: PUSH
41461: LD_VAR 0 2
41465: ARRAY
41466: PUSH
41467: LD_INT 1
41469: ARRAY
41470: PPUSH
41471: CALL_OW 122
41475: GO 41619
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
41477: LD_EXP 117
41481: PUSH
41482: LD_VAR 0 2
41486: ARRAY
41487: PUSH
41488: LD_INT 1
41490: ARRAY
41491: PPUSH
41492: CALL_OW 314
41496: NOT
41497: PUSH
41498: LD_EXP 117
41502: PUSH
41503: LD_VAR 0 2
41507: ARRAY
41508: PUSH
41509: LD_INT 1
41511: ARRAY
41512: PPUSH
41513: LD_EXP 116
41517: PUSH
41518: LD_VAR 0 2
41522: ARRAY
41523: PUSH
41524: LD_INT 1
41526: ARRAY
41527: PUSH
41528: LD_INT 1
41530: ARRAY
41531: PPUSH
41532: LD_EXP 116
41536: PUSH
41537: LD_VAR 0 2
41541: ARRAY
41542: PUSH
41543: LD_INT 1
41545: ARRAY
41546: PUSH
41547: LD_INT 2
41549: ARRAY
41550: PPUSH
41551: CALL_OW 297
41555: PUSH
41556: LD_INT 6
41558: GREATER
41559: AND
41560: IFFALSE 41619
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
41562: LD_EXP 117
41566: PUSH
41567: LD_VAR 0 2
41571: ARRAY
41572: PUSH
41573: LD_INT 1
41575: ARRAY
41576: PPUSH
41577: LD_EXP 116
41581: PUSH
41582: LD_VAR 0 2
41586: ARRAY
41587: PUSH
41588: LD_INT 1
41590: ARRAY
41591: PUSH
41592: LD_INT 1
41594: ARRAY
41595: PPUSH
41596: LD_EXP 116
41600: PUSH
41601: LD_VAR 0 2
41605: ARRAY
41606: PUSH
41607: LD_INT 1
41609: ARRAY
41610: PUSH
41611: LD_INT 2
41613: ARRAY
41614: PPUSH
41615: CALL_OW 111
// end ; end ; end ;
41619: GO 41032
41621: POP
41622: POP
// end ;
41623: LD_VAR 0 1
41627: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
41628: LD_INT 0
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
// if not mc_bases then
41641: LD_EXP 79
41645: NOT
41646: IFFALSE 41650
// exit ;
41648: GO 42590
// for i = 1 to mc_bases do
41650: LD_ADDR_VAR 0 2
41654: PUSH
41655: DOUBLE
41656: LD_INT 1
41658: DEC
41659: ST_TO_ADDR
41660: LD_EXP 79
41664: PUSH
41665: FOR_TO
41666: IFFALSE 42588
// begin if not mc_bases [ i ] or mc_scan [ i ] then
41668: LD_EXP 79
41672: PUSH
41673: LD_VAR 0 2
41677: ARRAY
41678: NOT
41679: PUSH
41680: LD_EXP 102
41684: PUSH
41685: LD_VAR 0 2
41689: ARRAY
41690: OR
41691: IFFALSE 41695
// continue ;
41693: GO 41665
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
41695: LD_ADDR_VAR 0 7
41699: PUSH
41700: LD_EXP 79
41704: PUSH
41705: LD_VAR 0 2
41709: ARRAY
41710: PUSH
41711: LD_INT 1
41713: ARRAY
41714: PPUSH
41715: CALL_OW 248
41719: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
41720: LD_VAR 0 7
41724: PUSH
41725: LD_INT 3
41727: EQUAL
41728: PUSH
41729: LD_EXP 98
41733: PUSH
41734: LD_VAR 0 2
41738: ARRAY
41739: PUSH
41740: LD_EXP 101
41744: PUSH
41745: LD_VAR 0 2
41749: ARRAY
41750: UNION
41751: PPUSH
41752: LD_INT 33
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PPUSH
41762: CALL_OW 72
41766: NOT
41767: OR
41768: IFFALSE 41772
// continue ;
41770: GO 41665
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
41772: LD_ADDR_VAR 0 9
41776: PUSH
41777: LD_EXP 79
41781: PUSH
41782: LD_VAR 0 2
41786: ARRAY
41787: PPUSH
41788: LD_INT 30
41790: PUSH
41791: LD_INT 36
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PPUSH
41798: CALL_OW 72
41802: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
41803: LD_ADDR_VAR 0 10
41807: PUSH
41808: LD_EXP 98
41812: PUSH
41813: LD_VAR 0 2
41817: ARRAY
41818: PPUSH
41819: LD_INT 34
41821: PUSH
41822: LD_INT 31
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PPUSH
41829: CALL_OW 72
41833: ST_TO_ADDR
// if not cts and not mcts then
41834: LD_VAR 0 9
41838: NOT
41839: PUSH
41840: LD_VAR 0 10
41844: NOT
41845: AND
41846: IFFALSE 41850
// continue ;
41848: GO 41665
// x := cts ;
41850: LD_ADDR_VAR 0 11
41854: PUSH
41855: LD_VAR 0 9
41859: ST_TO_ADDR
// if not x then
41860: LD_VAR 0 11
41864: NOT
41865: IFFALSE 41877
// x := mcts ;
41867: LD_ADDR_VAR 0 11
41871: PUSH
41872: LD_VAR 0 10
41876: ST_TO_ADDR
// if not x then
41877: LD_VAR 0 11
41881: NOT
41882: IFFALSE 41886
// continue ;
41884: GO 41665
// if mc_remote_driver [ i ] then
41886: LD_EXP 119
41890: PUSH
41891: LD_VAR 0 2
41895: ARRAY
41896: IFFALSE 42283
// for j in mc_remote_driver [ i ] do
41898: LD_ADDR_VAR 0 3
41902: PUSH
41903: LD_EXP 119
41907: PUSH
41908: LD_VAR 0 2
41912: ARRAY
41913: PUSH
41914: FOR_IN
41915: IFFALSE 42281
// begin if GetClass ( j ) <> 3 then
41917: LD_VAR 0 3
41921: PPUSH
41922: CALL_OW 257
41926: PUSH
41927: LD_INT 3
41929: NONEQUAL
41930: IFFALSE 41983
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
41932: LD_ADDR_EXP 119
41936: PUSH
41937: LD_EXP 119
41941: PPUSH
41942: LD_VAR 0 2
41946: PPUSH
41947: LD_EXP 119
41951: PUSH
41952: LD_VAR 0 2
41956: ARRAY
41957: PUSH
41958: LD_VAR 0 3
41962: DIFF
41963: PPUSH
41964: CALL_OW 1
41968: ST_TO_ADDR
// SetTag ( j , 0 ) ;
41969: LD_VAR 0 3
41973: PPUSH
41974: LD_INT 0
41976: PPUSH
41977: CALL_OW 109
// continue ;
41981: GO 41914
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
41983: LD_EXP 98
41987: PUSH
41988: LD_VAR 0 2
41992: ARRAY
41993: PPUSH
41994: LD_INT 34
41996: PUSH
41997: LD_INT 31
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 58
42006: PUSH
42007: EMPTY
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PPUSH
42014: CALL_OW 72
42018: PUSH
42019: LD_VAR 0 3
42023: PPUSH
42024: CALL 91201 0 1
42028: NOT
42029: AND
42030: IFFALSE 42101
// begin if IsInUnit ( j ) then
42032: LD_VAR 0 3
42036: PPUSH
42037: CALL_OW 310
42041: IFFALSE 42052
// ComExitBuilding ( j ) ;
42043: LD_VAR 0 3
42047: PPUSH
42048: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
42052: LD_VAR 0 3
42056: PPUSH
42057: LD_EXP 98
42061: PUSH
42062: LD_VAR 0 2
42066: ARRAY
42067: PPUSH
42068: LD_INT 34
42070: PUSH
42071: LD_INT 31
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 58
42080: PUSH
42081: EMPTY
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PPUSH
42088: CALL_OW 72
42092: PUSH
42093: LD_INT 1
42095: ARRAY
42096: PPUSH
42097: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
42101: LD_VAR 0 3
42105: PPUSH
42106: CALL_OW 310
42110: NOT
42111: PUSH
42112: LD_VAR 0 3
42116: PPUSH
42117: CALL_OW 310
42121: PPUSH
42122: CALL_OW 266
42126: PUSH
42127: LD_INT 36
42129: NONEQUAL
42130: PUSH
42131: LD_VAR 0 3
42135: PPUSH
42136: CALL 91201 0 1
42140: NOT
42141: AND
42142: OR
42143: IFFALSE 42279
// begin if IsInUnit ( j ) then
42145: LD_VAR 0 3
42149: PPUSH
42150: CALL_OW 310
42154: IFFALSE 42165
// ComExitBuilding ( j ) ;
42156: LD_VAR 0 3
42160: PPUSH
42161: CALL_OW 122
// ct := 0 ;
42165: LD_ADDR_VAR 0 8
42169: PUSH
42170: LD_INT 0
42172: ST_TO_ADDR
// for k in x do
42173: LD_ADDR_VAR 0 4
42177: PUSH
42178: LD_VAR 0 11
42182: PUSH
42183: FOR_IN
42184: IFFALSE 42257
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
42186: LD_VAR 0 4
42190: PPUSH
42191: CALL_OW 264
42195: PUSH
42196: LD_INT 31
42198: EQUAL
42199: PUSH
42200: LD_VAR 0 4
42204: PPUSH
42205: CALL_OW 311
42209: NOT
42210: AND
42211: PUSH
42212: LD_VAR 0 4
42216: PPUSH
42217: CALL_OW 266
42221: PUSH
42222: LD_INT 36
42224: EQUAL
42225: PUSH
42226: LD_VAR 0 4
42230: PPUSH
42231: CALL_OW 313
42235: PUSH
42236: LD_INT 3
42238: LESS
42239: AND
42240: OR
42241: IFFALSE 42255
// begin ct := k ;
42243: LD_ADDR_VAR 0 8
42247: PUSH
42248: LD_VAR 0 4
42252: ST_TO_ADDR
// break ;
42253: GO 42257
// end ;
42255: GO 42183
42257: POP
42258: POP
// if ct then
42259: LD_VAR 0 8
42263: IFFALSE 42279
// ComEnterUnit ( j , ct ) ;
42265: LD_VAR 0 3
42269: PPUSH
42270: LD_VAR 0 8
42274: PPUSH
42275: CALL_OW 120
// end ; end ;
42279: GO 41914
42281: POP
42282: POP
// places := 0 ;
42283: LD_ADDR_VAR 0 5
42287: PUSH
42288: LD_INT 0
42290: ST_TO_ADDR
// for j = 1 to x do
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: DOUBLE
42297: LD_INT 1
42299: DEC
42300: ST_TO_ADDR
42301: LD_VAR 0 11
42305: PUSH
42306: FOR_TO
42307: IFFALSE 42383
// if GetWeapon ( x [ j ] ) = ar_control_tower then
42309: LD_VAR 0 11
42313: PUSH
42314: LD_VAR 0 3
42318: ARRAY
42319: PPUSH
42320: CALL_OW 264
42324: PUSH
42325: LD_INT 31
42327: EQUAL
42328: IFFALSE 42346
// places := places + 1 else
42330: LD_ADDR_VAR 0 5
42334: PUSH
42335: LD_VAR 0 5
42339: PUSH
42340: LD_INT 1
42342: PLUS
42343: ST_TO_ADDR
42344: GO 42381
// if GetBType ( x [ j ] ) = b_control_tower then
42346: LD_VAR 0 11
42350: PUSH
42351: LD_VAR 0 3
42355: ARRAY
42356: PPUSH
42357: CALL_OW 266
42361: PUSH
42362: LD_INT 36
42364: EQUAL
42365: IFFALSE 42381
// places := places + 3 ;
42367: LD_ADDR_VAR 0 5
42371: PUSH
42372: LD_VAR 0 5
42376: PUSH
42377: LD_INT 3
42379: PLUS
42380: ST_TO_ADDR
42381: GO 42306
42383: POP
42384: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
42385: LD_VAR 0 5
42389: PUSH
42390: LD_INT 0
42392: EQUAL
42393: PUSH
42394: LD_VAR 0 5
42398: PUSH
42399: LD_EXP 119
42403: PUSH
42404: LD_VAR 0 2
42408: ARRAY
42409: LESSEQUAL
42410: OR
42411: IFFALSE 42415
// continue ;
42413: GO 41665
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
42415: LD_ADDR_VAR 0 6
42419: PUSH
42420: LD_EXP 79
42424: PUSH
42425: LD_VAR 0 2
42429: ARRAY
42430: PPUSH
42431: LD_INT 25
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PPUSH
42441: CALL_OW 72
42445: PUSH
42446: LD_EXP 119
42450: PUSH
42451: LD_VAR 0 2
42455: ARRAY
42456: DIFF
42457: PPUSH
42458: LD_INT 3
42460: PPUSH
42461: CALL 92101 0 2
42465: ST_TO_ADDR
// for j in tmp do
42466: LD_ADDR_VAR 0 3
42470: PUSH
42471: LD_VAR 0 6
42475: PUSH
42476: FOR_IN
42477: IFFALSE 42512
// if GetTag ( j ) > 0 then
42479: LD_VAR 0 3
42483: PPUSH
42484: CALL_OW 110
42488: PUSH
42489: LD_INT 0
42491: GREATER
42492: IFFALSE 42510
// tmp := tmp diff j ;
42494: LD_ADDR_VAR 0 6
42498: PUSH
42499: LD_VAR 0 6
42503: PUSH
42504: LD_VAR 0 3
42508: DIFF
42509: ST_TO_ADDR
42510: GO 42476
42512: POP
42513: POP
// if not tmp then
42514: LD_VAR 0 6
42518: NOT
42519: IFFALSE 42523
// continue ;
42521: GO 41665
// if places then
42523: LD_VAR 0 5
42527: IFFALSE 42586
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
42529: LD_ADDR_EXP 119
42533: PUSH
42534: LD_EXP 119
42538: PPUSH
42539: LD_VAR 0 2
42543: PPUSH
42544: LD_EXP 119
42548: PUSH
42549: LD_VAR 0 2
42553: ARRAY
42554: PUSH
42555: LD_VAR 0 6
42559: PUSH
42560: LD_INT 1
42562: ARRAY
42563: UNION
42564: PPUSH
42565: CALL_OW 1
42569: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
42570: LD_VAR 0 6
42574: PUSH
42575: LD_INT 1
42577: ARRAY
42578: PPUSH
42579: LD_INT 126
42581: PPUSH
42582: CALL_OW 109
// end ; end ;
42586: GO 41665
42588: POP
42589: POP
// end ;
42590: LD_VAR 0 1
42594: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
42595: LD_INT 0
42597: PPUSH
42598: PPUSH
42599: PPUSH
42600: PPUSH
42601: PPUSH
42602: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
42603: LD_VAR 0 1
42607: NOT
42608: PUSH
42609: LD_VAR 0 2
42613: NOT
42614: OR
42615: PUSH
42616: LD_VAR 0 3
42620: NOT
42621: OR
42622: PUSH
42623: LD_VAR 0 4
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: LD_INT 3
42636: PUSH
42637: LD_INT 4
42639: PUSH
42640: LD_INT 5
42642: PUSH
42643: LD_INT 8
42645: PUSH
42646: LD_INT 9
42648: PUSH
42649: LD_INT 15
42651: PUSH
42652: LD_INT 16
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: IN
42666: NOT
42667: OR
42668: IFFALSE 42672
// exit ;
42670: GO 43572
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
42672: LD_ADDR_VAR 0 2
42676: PUSH
42677: LD_VAR 0 2
42681: PPUSH
42682: LD_INT 21
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 24
42694: PUSH
42695: LD_INT 250
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PPUSH
42706: CALL_OW 72
42710: ST_TO_ADDR
// case class of 1 , 15 :
42711: LD_VAR 0 4
42715: PUSH
42716: LD_INT 1
42718: DOUBLE
42719: EQUAL
42720: IFTRUE 42730
42722: LD_INT 15
42724: DOUBLE
42725: EQUAL
42726: IFTRUE 42730
42728: GO 42815
42730: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
42731: LD_ADDR_VAR 0 8
42735: PUSH
42736: LD_VAR 0 2
42740: PPUSH
42741: LD_INT 2
42743: PUSH
42744: LD_INT 30
42746: PUSH
42747: LD_INT 32
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 30
42756: PUSH
42757: LD_INT 31
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: PPUSH
42769: CALL_OW 72
42773: PUSH
42774: LD_VAR 0 2
42778: PPUSH
42779: LD_INT 2
42781: PUSH
42782: LD_INT 30
42784: PUSH
42785: LD_INT 4
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 30
42794: PUSH
42795: LD_INT 5
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: LIST
42806: PPUSH
42807: CALL_OW 72
42811: ADD
42812: ST_TO_ADDR
42813: GO 43061
42815: LD_INT 2
42817: DOUBLE
42818: EQUAL
42819: IFTRUE 42829
42821: LD_INT 16
42823: DOUBLE
42824: EQUAL
42825: IFTRUE 42829
42827: GO 42875
42829: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
42830: LD_ADDR_VAR 0 8
42834: PUSH
42835: LD_VAR 0 2
42839: PPUSH
42840: LD_INT 2
42842: PUSH
42843: LD_INT 30
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 30
42855: PUSH
42856: LD_INT 1
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: PPUSH
42868: CALL_OW 72
42872: ST_TO_ADDR
42873: GO 43061
42875: LD_INT 3
42877: DOUBLE
42878: EQUAL
42879: IFTRUE 42883
42881: GO 42929
42883: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
42884: LD_ADDR_VAR 0 8
42888: PUSH
42889: LD_VAR 0 2
42893: PPUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 30
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 30
42909: PUSH
42910: LD_INT 3
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: PPUSH
42922: CALL_OW 72
42926: ST_TO_ADDR
42927: GO 43061
42929: LD_INT 4
42931: DOUBLE
42932: EQUAL
42933: IFTRUE 42937
42935: GO 42994
42937: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
42938: LD_ADDR_VAR 0 8
42942: PUSH
42943: LD_VAR 0 2
42947: PPUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 30
42953: PUSH
42954: LD_INT 6
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 30
42963: PUSH
42964: LD_INT 7
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 30
42973: PUSH
42974: LD_INT 8
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: PPUSH
42987: CALL_OW 72
42991: ST_TO_ADDR
42992: GO 43061
42994: LD_INT 5
42996: DOUBLE
42997: EQUAL
42998: IFTRUE 43014
43000: LD_INT 8
43002: DOUBLE
43003: EQUAL
43004: IFTRUE 43014
43006: LD_INT 9
43008: DOUBLE
43009: EQUAL
43010: IFTRUE 43014
43012: GO 43060
43014: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
43015: LD_ADDR_VAR 0 8
43019: PUSH
43020: LD_VAR 0 2
43024: PPUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 30
43030: PUSH
43031: LD_INT 4
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 30
43040: PUSH
43041: LD_INT 5
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: LIST
43052: PPUSH
43053: CALL_OW 72
43057: ST_TO_ADDR
43058: GO 43061
43060: POP
// if not tmp then
43061: LD_VAR 0 8
43065: NOT
43066: IFFALSE 43070
// exit ;
43068: GO 43572
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
43070: LD_VAR 0 4
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 15
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: IN
43085: PUSH
43086: LD_EXP 88
43090: PUSH
43091: LD_VAR 0 1
43095: ARRAY
43096: AND
43097: IFFALSE 43253
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
43099: LD_ADDR_VAR 0 9
43103: PUSH
43104: LD_EXP 88
43108: PUSH
43109: LD_VAR 0 1
43113: ARRAY
43114: PUSH
43115: LD_INT 1
43117: ARRAY
43118: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
43119: LD_VAR 0 9
43123: PUSH
43124: LD_EXP 89
43128: PUSH
43129: LD_VAR 0 1
43133: ARRAY
43134: IN
43135: NOT
43136: IFFALSE 43251
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
43138: LD_ADDR_EXP 89
43142: PUSH
43143: LD_EXP 89
43147: PPUSH
43148: LD_VAR 0 1
43152: PUSH
43153: LD_EXP 89
43157: PUSH
43158: LD_VAR 0 1
43162: ARRAY
43163: PUSH
43164: LD_INT 1
43166: PLUS
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PPUSH
43172: LD_VAR 0 9
43176: PPUSH
43177: CALL 57843 0 3
43181: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
43182: LD_ADDR_EXP 88
43186: PUSH
43187: LD_EXP 88
43191: PPUSH
43192: LD_VAR 0 1
43196: PPUSH
43197: LD_EXP 88
43201: PUSH
43202: LD_VAR 0 1
43206: ARRAY
43207: PUSH
43208: LD_VAR 0 9
43212: DIFF
43213: PPUSH
43214: CALL_OW 1
43218: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
43219: LD_VAR 0 3
43223: PPUSH
43224: LD_EXP 89
43228: PUSH
43229: LD_VAR 0 1
43233: ARRAY
43234: PUSH
43235: LD_EXP 89
43239: PUSH
43240: LD_VAR 0 1
43244: ARRAY
43245: ARRAY
43246: PPUSH
43247: CALL_OW 120
// end ; exit ;
43251: GO 43572
// end ; if tmp > 1 then
43253: LD_VAR 0 8
43257: PUSH
43258: LD_INT 1
43260: GREATER
43261: IFFALSE 43365
// for i = 2 to tmp do
43263: LD_ADDR_VAR 0 6
43267: PUSH
43268: DOUBLE
43269: LD_INT 2
43271: DEC
43272: ST_TO_ADDR
43273: LD_VAR 0 8
43277: PUSH
43278: FOR_TO
43279: IFFALSE 43363
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
43281: LD_VAR 0 8
43285: PUSH
43286: LD_VAR 0 6
43290: ARRAY
43291: PPUSH
43292: CALL_OW 461
43296: PUSH
43297: LD_INT 6
43299: EQUAL
43300: IFFALSE 43361
// begin x := tmp [ i ] ;
43302: LD_ADDR_VAR 0 9
43306: PUSH
43307: LD_VAR 0 8
43311: PUSH
43312: LD_VAR 0 6
43316: ARRAY
43317: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
43318: LD_ADDR_VAR 0 8
43322: PUSH
43323: LD_VAR 0 8
43327: PPUSH
43328: LD_VAR 0 6
43332: PPUSH
43333: CALL_OW 3
43337: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
43338: LD_ADDR_VAR 0 8
43342: PUSH
43343: LD_VAR 0 8
43347: PPUSH
43348: LD_INT 1
43350: PPUSH
43351: LD_VAR 0 9
43355: PPUSH
43356: CALL_OW 2
43360: ST_TO_ADDR
// end ;
43361: GO 43278
43363: POP
43364: POP
// for i in tmp do
43365: LD_ADDR_VAR 0 6
43369: PUSH
43370: LD_VAR 0 8
43374: PUSH
43375: FOR_IN
43376: IFFALSE 43445
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
43378: LD_VAR 0 6
43382: PPUSH
43383: CALL_OW 313
43387: PUSH
43388: LD_INT 6
43390: LESS
43391: PUSH
43392: LD_VAR 0 6
43396: PPUSH
43397: CALL_OW 266
43401: PUSH
43402: LD_INT 31
43404: PUSH
43405: LD_INT 32
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: IN
43412: NOT
43413: AND
43414: PUSH
43415: LD_VAR 0 6
43419: PPUSH
43420: CALL_OW 313
43424: PUSH
43425: LD_INT 0
43427: EQUAL
43428: OR
43429: IFFALSE 43443
// begin j := i ;
43431: LD_ADDR_VAR 0 7
43435: PUSH
43436: LD_VAR 0 6
43440: ST_TO_ADDR
// break ;
43441: GO 43445
// end ; end ;
43443: GO 43375
43445: POP
43446: POP
// if j then
43447: LD_VAR 0 7
43451: IFFALSE 43469
// ComEnterUnit ( unit , j ) else
43453: LD_VAR 0 3
43457: PPUSH
43458: LD_VAR 0 7
43462: PPUSH
43463: CALL_OW 120
43467: GO 43572
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43469: LD_ADDR_VAR 0 10
43473: PUSH
43474: LD_VAR 0 2
43478: PPUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 30
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 30
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: LIST
43506: PPUSH
43507: CALL_OW 72
43511: ST_TO_ADDR
// if depot then
43512: LD_VAR 0 10
43516: IFFALSE 43572
// begin depot := NearestUnitToUnit ( depot , unit ) ;
43518: LD_ADDR_VAR 0 10
43522: PUSH
43523: LD_VAR 0 10
43527: PPUSH
43528: LD_VAR 0 3
43532: PPUSH
43533: CALL_OW 74
43537: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
43538: LD_VAR 0 3
43542: PPUSH
43543: LD_VAR 0 10
43547: PPUSH
43548: CALL_OW 296
43552: PUSH
43553: LD_INT 10
43555: GREATER
43556: IFFALSE 43572
// ComStandNearbyBuilding ( unit , depot ) ;
43558: LD_VAR 0 3
43562: PPUSH
43563: LD_VAR 0 10
43567: PPUSH
43568: CALL 52046 0 2
// end ; end ; end ;
43572: LD_VAR 0 5
43576: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
43577: LD_INT 0
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
// if not mc_bases then
43583: LD_EXP 79
43587: NOT
43588: IFFALSE 43592
// exit ;
43590: GO 43831
// for i = 1 to mc_bases do
43592: LD_ADDR_VAR 0 2
43596: PUSH
43597: DOUBLE
43598: LD_INT 1
43600: DEC
43601: ST_TO_ADDR
43602: LD_EXP 79
43606: PUSH
43607: FOR_TO
43608: IFFALSE 43829
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
43610: LD_ADDR_VAR 0 4
43614: PUSH
43615: LD_EXP 79
43619: PUSH
43620: LD_VAR 0 2
43624: ARRAY
43625: PPUSH
43626: LD_INT 21
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PPUSH
43636: CALL_OW 72
43640: PUSH
43641: LD_EXP 108
43645: PUSH
43646: LD_VAR 0 2
43650: ARRAY
43651: UNION
43652: ST_TO_ADDR
// if not tmp then
43653: LD_VAR 0 4
43657: NOT
43658: IFFALSE 43662
// continue ;
43660: GO 43607
// for j in tmp do
43662: LD_ADDR_VAR 0 3
43666: PUSH
43667: LD_VAR 0 4
43671: PUSH
43672: FOR_IN
43673: IFFALSE 43825
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
43675: LD_VAR 0 3
43679: PPUSH
43680: CALL_OW 110
43684: NOT
43685: PUSH
43686: LD_VAR 0 3
43690: PPUSH
43691: CALL_OW 314
43695: NOT
43696: AND
43697: PUSH
43698: LD_VAR 0 3
43702: PPUSH
43703: CALL_OW 311
43707: NOT
43708: AND
43709: PUSH
43710: LD_VAR 0 3
43714: PPUSH
43715: CALL_OW 310
43719: NOT
43720: AND
43721: PUSH
43722: LD_VAR 0 3
43726: PUSH
43727: LD_EXP 82
43731: PUSH
43732: LD_VAR 0 2
43736: ARRAY
43737: PUSH
43738: LD_INT 1
43740: ARRAY
43741: IN
43742: NOT
43743: AND
43744: PUSH
43745: LD_VAR 0 3
43749: PUSH
43750: LD_EXP 82
43754: PUSH
43755: LD_VAR 0 2
43759: ARRAY
43760: PUSH
43761: LD_INT 2
43763: ARRAY
43764: IN
43765: NOT
43766: AND
43767: PUSH
43768: LD_VAR 0 3
43772: PUSH
43773: LD_EXP 91
43777: PUSH
43778: LD_VAR 0 2
43782: ARRAY
43783: IN
43784: NOT
43785: AND
43786: IFFALSE 43823
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
43788: LD_VAR 0 2
43792: PPUSH
43793: LD_EXP 79
43797: PUSH
43798: LD_VAR 0 2
43802: ARRAY
43803: PPUSH
43804: LD_VAR 0 3
43808: PPUSH
43809: LD_VAR 0 3
43813: PPUSH
43814: CALL_OW 257
43818: PPUSH
43819: CALL 42595 0 4
// end ;
43823: GO 43672
43825: POP
43826: POP
// end ;
43827: GO 43607
43829: POP
43830: POP
// end ;
43831: LD_VAR 0 1
43835: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
43836: LD_INT 0
43838: PPUSH
43839: PPUSH
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
// if not mc_bases [ base ] then
43844: LD_EXP 79
43848: PUSH
43849: LD_VAR 0 1
43853: ARRAY
43854: NOT
43855: IFFALSE 43859
// exit ;
43857: GO 44041
// tmp := [ ] ;
43859: LD_ADDR_VAR 0 6
43863: PUSH
43864: EMPTY
43865: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
43866: LD_ADDR_VAR 0 7
43870: PUSH
43871: LD_VAR 0 3
43875: PPUSH
43876: LD_INT 0
43878: PPUSH
43879: CALL_OW 517
43883: ST_TO_ADDR
// if not list then
43884: LD_VAR 0 7
43888: NOT
43889: IFFALSE 43893
// exit ;
43891: GO 44041
// for i = 1 to amount do
43893: LD_ADDR_VAR 0 5
43897: PUSH
43898: DOUBLE
43899: LD_INT 1
43901: DEC
43902: ST_TO_ADDR
43903: LD_VAR 0 2
43907: PUSH
43908: FOR_TO
43909: IFFALSE 43989
// begin x := rand ( 1 , list [ 1 ] ) ;
43911: LD_ADDR_VAR 0 8
43915: PUSH
43916: LD_INT 1
43918: PPUSH
43919: LD_VAR 0 7
43923: PUSH
43924: LD_INT 1
43926: ARRAY
43927: PPUSH
43928: CALL_OW 12
43932: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
43933: LD_ADDR_VAR 0 6
43937: PUSH
43938: LD_VAR 0 6
43942: PPUSH
43943: LD_VAR 0 5
43947: PPUSH
43948: LD_VAR 0 7
43952: PUSH
43953: LD_INT 1
43955: ARRAY
43956: PUSH
43957: LD_VAR 0 8
43961: ARRAY
43962: PUSH
43963: LD_VAR 0 7
43967: PUSH
43968: LD_INT 2
43970: ARRAY
43971: PUSH
43972: LD_VAR 0 8
43976: ARRAY
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PPUSH
43982: CALL_OW 1
43986: ST_TO_ADDR
// end ;
43987: GO 43908
43989: POP
43990: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
43991: LD_ADDR_EXP 92
43995: PUSH
43996: LD_EXP 92
44000: PPUSH
44001: LD_VAR 0 1
44005: PPUSH
44006: LD_VAR 0 6
44010: PPUSH
44011: CALL_OW 1
44015: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
44016: LD_ADDR_EXP 94
44020: PUSH
44021: LD_EXP 94
44025: PPUSH
44026: LD_VAR 0 1
44030: PPUSH
44031: LD_VAR 0 3
44035: PPUSH
44036: CALL_OW 1
44040: ST_TO_ADDR
// end ;
44041: LD_VAR 0 4
44045: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
44046: LD_INT 0
44048: PPUSH
// if not mc_bases [ base ] then
44049: LD_EXP 79
44053: PUSH
44054: LD_VAR 0 1
44058: ARRAY
44059: NOT
44060: IFFALSE 44064
// exit ;
44062: GO 44089
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
44064: LD_ADDR_EXP 84
44068: PUSH
44069: LD_EXP 84
44073: PPUSH
44074: LD_VAR 0 1
44078: PPUSH
44079: LD_VAR 0 2
44083: PPUSH
44084: CALL_OW 1
44088: ST_TO_ADDR
// end ;
44089: LD_VAR 0 3
44093: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
44094: LD_INT 0
44096: PPUSH
// if not mc_bases [ base ] then
44097: LD_EXP 79
44101: PUSH
44102: LD_VAR 0 1
44106: ARRAY
44107: NOT
44108: IFFALSE 44112
// exit ;
44110: GO 44149
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
44112: LD_ADDR_EXP 84
44116: PUSH
44117: LD_EXP 84
44121: PPUSH
44122: LD_VAR 0 1
44126: PPUSH
44127: LD_EXP 84
44131: PUSH
44132: LD_VAR 0 1
44136: ARRAY
44137: PUSH
44138: LD_VAR 0 2
44142: UNION
44143: PPUSH
44144: CALL_OW 1
44148: ST_TO_ADDR
// end ;
44149: LD_VAR 0 3
44153: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
44154: LD_INT 0
44156: PPUSH
// if not mc_bases [ base ] then
44157: LD_EXP 79
44161: PUSH
44162: LD_VAR 0 1
44166: ARRAY
44167: NOT
44168: IFFALSE 44172
// exit ;
44170: GO 44197
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
44172: LD_ADDR_EXP 100
44176: PUSH
44177: LD_EXP 100
44181: PPUSH
44182: LD_VAR 0 1
44186: PPUSH
44187: LD_VAR 0 2
44191: PPUSH
44192: CALL_OW 1
44196: ST_TO_ADDR
// end ;
44197: LD_VAR 0 3
44201: RET
// export function MC_InsertProduceList ( base , components ) ; begin
44202: LD_INT 0
44204: PPUSH
// if not mc_bases [ base ] then
44205: LD_EXP 79
44209: PUSH
44210: LD_VAR 0 1
44214: ARRAY
44215: NOT
44216: IFFALSE 44220
// exit ;
44218: GO 44257
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
44220: LD_ADDR_EXP 100
44224: PUSH
44225: LD_EXP 100
44229: PPUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: LD_EXP 100
44239: PUSH
44240: LD_VAR 0 1
44244: ARRAY
44245: PUSH
44246: LD_VAR 0 2
44250: ADD
44251: PPUSH
44252: CALL_OW 1
44256: ST_TO_ADDR
// end ;
44257: LD_VAR 0 3
44261: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
44262: LD_INT 0
44264: PPUSH
// if not mc_bases [ base ] then
44265: LD_EXP 79
44269: PUSH
44270: LD_VAR 0 1
44274: ARRAY
44275: NOT
44276: IFFALSE 44280
// exit ;
44278: GO 44334
// mc_defender := Replace ( mc_defender , base , deflist ) ;
44280: LD_ADDR_EXP 101
44284: PUSH
44285: LD_EXP 101
44289: PPUSH
44290: LD_VAR 0 1
44294: PPUSH
44295: LD_VAR 0 2
44299: PPUSH
44300: CALL_OW 1
44304: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
44305: LD_ADDR_EXP 90
44309: PUSH
44310: LD_EXP 90
44314: PPUSH
44315: LD_VAR 0 1
44319: PPUSH
44320: LD_VAR 0 2
44324: PUSH
44325: LD_INT 0
44327: PLUS
44328: PPUSH
44329: CALL_OW 1
44333: ST_TO_ADDR
// end ;
44334: LD_VAR 0 3
44338: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
44339: LD_INT 0
44341: PPUSH
// if not mc_bases [ base ] then
44342: LD_EXP 79
44346: PUSH
44347: LD_VAR 0 1
44351: ARRAY
44352: NOT
44353: IFFALSE 44357
// exit ;
44355: GO 44382
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
44357: LD_ADDR_EXP 90
44361: PUSH
44362: LD_EXP 90
44366: PPUSH
44367: LD_VAR 0 1
44371: PPUSH
44372: LD_VAR 0 2
44376: PPUSH
44377: CALL_OW 1
44381: ST_TO_ADDR
// end ;
44382: LD_VAR 0 3
44386: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
44387: LD_INT 0
44389: PPUSH
44390: PPUSH
44391: PPUSH
44392: PPUSH
// if not mc_bases [ base ] then
44393: LD_EXP 79
44397: PUSH
44398: LD_VAR 0 1
44402: ARRAY
44403: NOT
44404: IFFALSE 44408
// exit ;
44406: GO 44473
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
44408: LD_ADDR_EXP 99
44412: PUSH
44413: LD_EXP 99
44417: PPUSH
44418: LD_VAR 0 1
44422: PUSH
44423: LD_EXP 99
44427: PUSH
44428: LD_VAR 0 1
44432: ARRAY
44433: PUSH
44434: LD_INT 1
44436: PLUS
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PPUSH
44442: LD_VAR 0 1
44446: PUSH
44447: LD_VAR 0 2
44451: PUSH
44452: LD_VAR 0 3
44456: PUSH
44457: LD_VAR 0 4
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: PPUSH
44468: CALL 57843 0 3
44472: ST_TO_ADDR
// end ;
44473: LD_VAR 0 5
44477: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
44478: LD_INT 0
44480: PPUSH
// if not mc_bases [ base ] then
44481: LD_EXP 79
44485: PUSH
44486: LD_VAR 0 1
44490: ARRAY
44491: NOT
44492: IFFALSE 44496
// exit ;
44494: GO 44521
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
44496: LD_ADDR_EXP 116
44500: PUSH
44501: LD_EXP 116
44505: PPUSH
44506: LD_VAR 0 1
44510: PPUSH
44511: LD_VAR 0 2
44515: PPUSH
44516: CALL_OW 1
44520: ST_TO_ADDR
// end ;
44521: LD_VAR 0 3
44525: RET
// export function MC_GetMinesField ( base ) ; begin
44526: LD_INT 0
44528: PPUSH
// result := mc_mines [ base ] ;
44529: LD_ADDR_VAR 0 2
44533: PUSH
44534: LD_EXP 92
44538: PUSH
44539: LD_VAR 0 1
44543: ARRAY
44544: ST_TO_ADDR
// end ;
44545: LD_VAR 0 2
44549: RET
// export function MC_GetProduceList ( base ) ; begin
44550: LD_INT 0
44552: PPUSH
// result := mc_produce [ base ] ;
44553: LD_ADDR_VAR 0 2
44557: PUSH
44558: LD_EXP 100
44562: PUSH
44563: LD_VAR 0 1
44567: ARRAY
44568: ST_TO_ADDR
// end ;
44569: LD_VAR 0 2
44573: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
44574: LD_INT 0
44576: PPUSH
44577: PPUSH
// if not mc_bases then
44578: LD_EXP 79
44582: NOT
44583: IFFALSE 44587
// exit ;
44585: GO 44652
// if mc_bases [ base ] then
44587: LD_EXP 79
44591: PUSH
44592: LD_VAR 0 1
44596: ARRAY
44597: IFFALSE 44652
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44599: LD_ADDR_VAR 0 3
44603: PUSH
44604: LD_EXP 79
44608: PUSH
44609: LD_VAR 0 1
44613: ARRAY
44614: PPUSH
44615: LD_INT 30
44617: PUSH
44618: LD_VAR 0 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PPUSH
44627: CALL_OW 72
44631: ST_TO_ADDR
// if result then
44632: LD_VAR 0 3
44636: IFFALSE 44652
// result := result [ 1 ] ;
44638: LD_ADDR_VAR 0 3
44642: PUSH
44643: LD_VAR 0 3
44647: PUSH
44648: LD_INT 1
44650: ARRAY
44651: ST_TO_ADDR
// end ; end ;
44652: LD_VAR 0 3
44656: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
44657: LD_INT 0
44659: PPUSH
44660: PPUSH
// if not mc_bases then
44661: LD_EXP 79
44665: NOT
44666: IFFALSE 44670
// exit ;
44668: GO 44715
// if mc_bases [ base ] then
44670: LD_EXP 79
44674: PUSH
44675: LD_VAR 0 1
44679: ARRAY
44680: IFFALSE 44715
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44682: LD_ADDR_VAR 0 3
44686: PUSH
44687: LD_EXP 79
44691: PUSH
44692: LD_VAR 0 1
44696: ARRAY
44697: PPUSH
44698: LD_INT 30
44700: PUSH
44701: LD_VAR 0 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PPUSH
44710: CALL_OW 72
44714: ST_TO_ADDR
// end ;
44715: LD_VAR 0 3
44719: RET
// export function MC_SetTame ( base , area ) ; begin
44720: LD_INT 0
44722: PPUSH
// if not mc_bases or not base then
44723: LD_EXP 79
44727: NOT
44728: PUSH
44729: LD_VAR 0 1
44733: NOT
44734: OR
44735: IFFALSE 44739
// exit ;
44737: GO 44764
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
44739: LD_ADDR_EXP 107
44743: PUSH
44744: LD_EXP 107
44748: PPUSH
44749: LD_VAR 0 1
44753: PPUSH
44754: LD_VAR 0 2
44758: PPUSH
44759: CALL_OW 1
44763: ST_TO_ADDR
// end ;
44764: LD_VAR 0 3
44768: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
44769: LD_INT 0
44771: PPUSH
44772: PPUSH
// if not mc_bases or not base then
44773: LD_EXP 79
44777: NOT
44778: PUSH
44779: LD_VAR 0 1
44783: NOT
44784: OR
44785: IFFALSE 44789
// exit ;
44787: GO 44891
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44789: LD_ADDR_VAR 0 4
44793: PUSH
44794: LD_EXP 79
44798: PUSH
44799: LD_VAR 0 1
44803: ARRAY
44804: PPUSH
44805: LD_INT 30
44807: PUSH
44808: LD_VAR 0 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PPUSH
44817: CALL_OW 72
44821: ST_TO_ADDR
// if not tmp then
44822: LD_VAR 0 4
44826: NOT
44827: IFFALSE 44831
// exit ;
44829: GO 44891
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
44831: LD_ADDR_EXP 111
44835: PUSH
44836: LD_EXP 111
44840: PPUSH
44841: LD_VAR 0 1
44845: PPUSH
44846: LD_EXP 111
44850: PUSH
44851: LD_VAR 0 1
44855: ARRAY
44856: PPUSH
44857: LD_EXP 111
44861: PUSH
44862: LD_VAR 0 1
44866: ARRAY
44867: PUSH
44868: LD_INT 1
44870: PLUS
44871: PPUSH
44872: LD_VAR 0 4
44876: PUSH
44877: LD_INT 1
44879: ARRAY
44880: PPUSH
44881: CALL_OW 2
44885: PPUSH
44886: CALL_OW 1
44890: ST_TO_ADDR
// end ;
44891: LD_VAR 0 3
44895: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
44896: LD_INT 0
44898: PPUSH
44899: PPUSH
// if not mc_bases or not base or not kinds then
44900: LD_EXP 79
44904: NOT
44905: PUSH
44906: LD_VAR 0 1
44910: NOT
44911: OR
44912: PUSH
44913: LD_VAR 0 2
44917: NOT
44918: OR
44919: IFFALSE 44923
// exit ;
44921: GO 44984
// for i in kinds do
44923: LD_ADDR_VAR 0 4
44927: PUSH
44928: LD_VAR 0 2
44932: PUSH
44933: FOR_IN
44934: IFFALSE 44982
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
44936: LD_ADDR_EXP 113
44940: PUSH
44941: LD_EXP 113
44945: PPUSH
44946: LD_VAR 0 1
44950: PUSH
44951: LD_EXP 113
44955: PUSH
44956: LD_VAR 0 1
44960: ARRAY
44961: PUSH
44962: LD_INT 1
44964: PLUS
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PPUSH
44970: LD_VAR 0 4
44974: PPUSH
44975: CALL 57843 0 3
44979: ST_TO_ADDR
44980: GO 44933
44982: POP
44983: POP
// end ;
44984: LD_VAR 0 3
44988: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
44989: LD_INT 0
44991: PPUSH
// if not mc_bases or not base or not areas then
44992: LD_EXP 79
44996: NOT
44997: PUSH
44998: LD_VAR 0 1
45002: NOT
45003: OR
45004: PUSH
45005: LD_VAR 0 2
45009: NOT
45010: OR
45011: IFFALSE 45015
// exit ;
45013: GO 45040
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
45015: LD_ADDR_EXP 97
45019: PUSH
45020: LD_EXP 97
45024: PPUSH
45025: LD_VAR 0 1
45029: PPUSH
45030: LD_VAR 0 2
45034: PPUSH
45035: CALL_OW 1
45039: ST_TO_ADDR
// end ;
45040: LD_VAR 0 3
45044: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
45045: LD_INT 0
45047: PPUSH
// if not mc_bases or not base or not teleports_exit then
45048: LD_EXP 79
45052: NOT
45053: PUSH
45054: LD_VAR 0 1
45058: NOT
45059: OR
45060: PUSH
45061: LD_VAR 0 2
45065: NOT
45066: OR
45067: IFFALSE 45071
// exit ;
45069: GO 45096
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
45071: LD_ADDR_EXP 114
45075: PUSH
45076: LD_EXP 114
45080: PPUSH
45081: LD_VAR 0 1
45085: PPUSH
45086: LD_VAR 0 2
45090: PPUSH
45091: CALL_OW 1
45095: ST_TO_ADDR
// end ;
45096: LD_VAR 0 3
45100: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
45101: LD_INT 0
45103: PPUSH
45104: PPUSH
45105: PPUSH
// if not mc_bases or not base or not ext_list then
45106: LD_EXP 79
45110: NOT
45111: PUSH
45112: LD_VAR 0 1
45116: NOT
45117: OR
45118: PUSH
45119: LD_VAR 0 5
45123: NOT
45124: OR
45125: IFFALSE 45129
// exit ;
45127: GO 45302
// tmp := GetFacExtXYD ( x , y , d ) ;
45129: LD_ADDR_VAR 0 8
45133: PUSH
45134: LD_VAR 0 2
45138: PPUSH
45139: LD_VAR 0 3
45143: PPUSH
45144: LD_VAR 0 4
45148: PPUSH
45149: CALL 91231 0 3
45153: ST_TO_ADDR
// if not tmp then
45154: LD_VAR 0 8
45158: NOT
45159: IFFALSE 45163
// exit ;
45161: GO 45302
// for i in tmp do
45163: LD_ADDR_VAR 0 7
45167: PUSH
45168: LD_VAR 0 8
45172: PUSH
45173: FOR_IN
45174: IFFALSE 45300
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
45176: LD_ADDR_EXP 84
45180: PUSH
45181: LD_EXP 84
45185: PPUSH
45186: LD_VAR 0 1
45190: PPUSH
45191: LD_EXP 84
45195: PUSH
45196: LD_VAR 0 1
45200: ARRAY
45201: PPUSH
45202: LD_EXP 84
45206: PUSH
45207: LD_VAR 0 1
45211: ARRAY
45212: PUSH
45213: LD_INT 1
45215: PLUS
45216: PPUSH
45217: LD_VAR 0 5
45221: PUSH
45222: LD_INT 1
45224: ARRAY
45225: PUSH
45226: LD_VAR 0 7
45230: PUSH
45231: LD_INT 1
45233: ARRAY
45234: PUSH
45235: LD_VAR 0 7
45239: PUSH
45240: LD_INT 2
45242: ARRAY
45243: PUSH
45244: LD_VAR 0 7
45248: PUSH
45249: LD_INT 3
45251: ARRAY
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: PPUSH
45259: CALL_OW 2
45263: PPUSH
45264: CALL_OW 1
45268: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
45269: LD_ADDR_VAR 0 5
45273: PUSH
45274: LD_VAR 0 5
45278: PPUSH
45279: LD_INT 1
45281: PPUSH
45282: CALL_OW 3
45286: ST_TO_ADDR
// if not ext_list then
45287: LD_VAR 0 5
45291: NOT
45292: IFFALSE 45298
// exit ;
45294: POP
45295: POP
45296: GO 45302
// end ;
45298: GO 45173
45300: POP
45301: POP
// end ;
45302: LD_VAR 0 6
45306: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
45307: LD_INT 0
45309: PPUSH
// if not mc_bases or not base or not weapon_list then
45310: LD_EXP 79
45314: NOT
45315: PUSH
45316: LD_VAR 0 1
45320: NOT
45321: OR
45322: PUSH
45323: LD_VAR 0 2
45327: NOT
45328: OR
45329: IFFALSE 45333
// exit ;
45331: GO 45358
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
45333: LD_ADDR_EXP 118
45337: PUSH
45338: LD_EXP 118
45342: PPUSH
45343: LD_VAR 0 1
45347: PPUSH
45348: LD_VAR 0 2
45352: PPUSH
45353: CALL_OW 1
45357: ST_TO_ADDR
// end ;
45358: LD_VAR 0 3
45362: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
45363: LD_INT 0
45365: PPUSH
// if not mc_bases or not base or not tech_list then
45366: LD_EXP 79
45370: NOT
45371: PUSH
45372: LD_VAR 0 1
45376: NOT
45377: OR
45378: PUSH
45379: LD_VAR 0 2
45383: NOT
45384: OR
45385: IFFALSE 45389
// exit ;
45387: GO 45414
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
45389: LD_ADDR_EXP 106
45393: PUSH
45394: LD_EXP 106
45398: PPUSH
45399: LD_VAR 0 1
45403: PPUSH
45404: LD_VAR 0 2
45408: PPUSH
45409: CALL_OW 1
45413: ST_TO_ADDR
// end ;
45414: LD_VAR 0 3
45418: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
45419: LD_INT 0
45421: PPUSH
// if not mc_bases or not parking_area or not base then
45422: LD_EXP 79
45426: NOT
45427: PUSH
45428: LD_VAR 0 2
45432: NOT
45433: OR
45434: PUSH
45435: LD_VAR 0 1
45439: NOT
45440: OR
45441: IFFALSE 45445
// exit ;
45443: GO 45470
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
45445: LD_ADDR_EXP 103
45449: PUSH
45450: LD_EXP 103
45454: PPUSH
45455: LD_VAR 0 1
45459: PPUSH
45460: LD_VAR 0 2
45464: PPUSH
45465: CALL_OW 1
45469: ST_TO_ADDR
// end ;
45470: LD_VAR 0 3
45474: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
45475: LD_INT 0
45477: PPUSH
// if not mc_bases or not base or not scan_area then
45478: LD_EXP 79
45482: NOT
45483: PUSH
45484: LD_VAR 0 1
45488: NOT
45489: OR
45490: PUSH
45491: LD_VAR 0 2
45495: NOT
45496: OR
45497: IFFALSE 45501
// exit ;
45499: GO 45526
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
45501: LD_ADDR_EXP 104
45505: PUSH
45506: LD_EXP 104
45510: PPUSH
45511: LD_VAR 0 1
45515: PPUSH
45516: LD_VAR 0 2
45520: PPUSH
45521: CALL_OW 1
45525: ST_TO_ADDR
// end ;
45526: LD_VAR 0 3
45530: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
45531: LD_INT 0
45533: PPUSH
45534: PPUSH
// if not mc_bases or not base then
45535: LD_EXP 79
45539: NOT
45540: PUSH
45541: LD_VAR 0 1
45545: NOT
45546: OR
45547: IFFALSE 45551
// exit ;
45549: GO 45615
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
45551: LD_ADDR_VAR 0 3
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 4
45567: PUSH
45568: LD_INT 11
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
45578: LD_ADDR_EXP 106
45582: PUSH
45583: LD_EXP 106
45587: PPUSH
45588: LD_VAR 0 1
45592: PPUSH
45593: LD_EXP 106
45597: PUSH
45598: LD_VAR 0 1
45602: ARRAY
45603: PUSH
45604: LD_VAR 0 3
45608: DIFF
45609: PPUSH
45610: CALL_OW 1
45614: ST_TO_ADDR
// end ;
45615: LD_VAR 0 2
45619: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
45620: LD_INT 0
45622: PPUSH
// result := mc_vehicles [ base ] ;
45623: LD_ADDR_VAR 0 3
45627: PUSH
45628: LD_EXP 98
45632: PUSH
45633: LD_VAR 0 1
45637: ARRAY
45638: ST_TO_ADDR
// if onlyCombat then
45639: LD_VAR 0 2
45643: IFFALSE 45808
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
45645: LD_ADDR_VAR 0 3
45649: PUSH
45650: LD_VAR 0 3
45654: PUSH
45655: LD_VAR 0 3
45659: PPUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 34
45665: PUSH
45666: LD_INT 12
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 34
45675: PUSH
45676: LD_INT 51
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 34
45685: PUSH
45686: LD_EXP 73
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 34
45697: PUSH
45698: LD_INT 32
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 34
45707: PUSH
45708: LD_INT 13
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 34
45717: PUSH
45718: LD_INT 52
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 34
45727: PUSH
45728: LD_INT 14
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 34
45737: PUSH
45738: LD_INT 53
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 34
45747: PUSH
45748: LD_EXP 72
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 34
45759: PUSH
45760: LD_INT 31
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 34
45769: PUSH
45770: LD_INT 48
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 34
45779: PUSH
45780: LD_INT 8
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: PPUSH
45802: CALL_OW 72
45806: DIFF
45807: ST_TO_ADDR
// end ; end_of_file
45808: LD_VAR 0 3
45812: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
45813: LD_INT 0
45815: PPUSH
45816: PPUSH
45817: PPUSH
// if not mc_bases or not skirmish then
45818: LD_EXP 79
45822: NOT
45823: PUSH
45824: LD_EXP 77
45828: NOT
45829: OR
45830: IFFALSE 45834
// exit ;
45832: GO 45999
// for i = 1 to mc_bases do
45834: LD_ADDR_VAR 0 4
45838: PUSH
45839: DOUBLE
45840: LD_INT 1
45842: DEC
45843: ST_TO_ADDR
45844: LD_EXP 79
45848: PUSH
45849: FOR_TO
45850: IFFALSE 45997
// begin if sci in mc_bases [ i ] then
45852: LD_VAR 0 2
45856: PUSH
45857: LD_EXP 79
45861: PUSH
45862: LD_VAR 0 4
45866: ARRAY
45867: IN
45868: IFFALSE 45995
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
45870: LD_ADDR_EXP 108
45874: PUSH
45875: LD_EXP 108
45879: PPUSH
45880: LD_VAR 0 4
45884: PUSH
45885: LD_EXP 108
45889: PUSH
45890: LD_VAR 0 4
45894: ARRAY
45895: PUSH
45896: LD_INT 1
45898: PLUS
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PPUSH
45904: LD_VAR 0 1
45908: PPUSH
45909: CALL 57843 0 3
45913: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
45914: LD_ADDR_VAR 0 5
45918: PUSH
45919: LD_EXP 79
45923: PUSH
45924: LD_VAR 0 4
45928: ARRAY
45929: PPUSH
45930: LD_INT 2
45932: PUSH
45933: LD_INT 30
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 30
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: PPUSH
45958: CALL_OW 72
45962: PPUSH
45963: LD_VAR 0 1
45967: PPUSH
45968: CALL_OW 74
45972: ST_TO_ADDR
// if tmp then
45973: LD_VAR 0 5
45977: IFFALSE 45993
// ComStandNearbyBuilding ( ape , tmp ) ;
45979: LD_VAR 0 1
45983: PPUSH
45984: LD_VAR 0 5
45988: PPUSH
45989: CALL 52046 0 2
// break ;
45993: GO 45997
// end ; end ;
45995: GO 45849
45997: POP
45998: POP
// end ;
45999: LD_VAR 0 3
46003: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
46004: LD_INT 0
46006: PPUSH
46007: PPUSH
46008: PPUSH
// if not mc_bases or not skirmish then
46009: LD_EXP 79
46013: NOT
46014: PUSH
46015: LD_EXP 77
46019: NOT
46020: OR
46021: IFFALSE 46025
// exit ;
46023: GO 46114
// for i = 1 to mc_bases do
46025: LD_ADDR_VAR 0 4
46029: PUSH
46030: DOUBLE
46031: LD_INT 1
46033: DEC
46034: ST_TO_ADDR
46035: LD_EXP 79
46039: PUSH
46040: FOR_TO
46041: IFFALSE 46112
// begin if building in mc_busy_turret_list [ i ] then
46043: LD_VAR 0 1
46047: PUSH
46048: LD_EXP 89
46052: PUSH
46053: LD_VAR 0 4
46057: ARRAY
46058: IN
46059: IFFALSE 46110
// begin tmp := mc_busy_turret_list [ i ] diff building ;
46061: LD_ADDR_VAR 0 5
46065: PUSH
46066: LD_EXP 89
46070: PUSH
46071: LD_VAR 0 4
46075: ARRAY
46076: PUSH
46077: LD_VAR 0 1
46081: DIFF
46082: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
46083: LD_ADDR_EXP 89
46087: PUSH
46088: LD_EXP 89
46092: PPUSH
46093: LD_VAR 0 4
46097: PPUSH
46098: LD_VAR 0 5
46102: PPUSH
46103: CALL_OW 1
46107: ST_TO_ADDR
// break ;
46108: GO 46112
// end ; end ;
46110: GO 46040
46112: POP
46113: POP
// end ;
46114: LD_VAR 0 3
46118: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
46119: LD_INT 0
46121: PPUSH
46122: PPUSH
46123: PPUSH
// if not mc_bases or not skirmish then
46124: LD_EXP 79
46128: NOT
46129: PUSH
46130: LD_EXP 77
46134: NOT
46135: OR
46136: IFFALSE 46140
// exit ;
46138: GO 46339
// for i = 1 to mc_bases do
46140: LD_ADDR_VAR 0 5
46144: PUSH
46145: DOUBLE
46146: LD_INT 1
46148: DEC
46149: ST_TO_ADDR
46150: LD_EXP 79
46154: PUSH
46155: FOR_TO
46156: IFFALSE 46337
// if building in mc_bases [ i ] then
46158: LD_VAR 0 1
46162: PUSH
46163: LD_EXP 79
46167: PUSH
46168: LD_VAR 0 5
46172: ARRAY
46173: IN
46174: IFFALSE 46335
// begin tmp := mc_bases [ i ] diff building ;
46176: LD_ADDR_VAR 0 6
46180: PUSH
46181: LD_EXP 79
46185: PUSH
46186: LD_VAR 0 5
46190: ARRAY
46191: PUSH
46192: LD_VAR 0 1
46196: DIFF
46197: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
46198: LD_ADDR_EXP 79
46202: PUSH
46203: LD_EXP 79
46207: PPUSH
46208: LD_VAR 0 5
46212: PPUSH
46213: LD_VAR 0 6
46217: PPUSH
46218: CALL_OW 1
46222: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
46223: LD_VAR 0 1
46227: PUSH
46228: LD_EXP 87
46232: PUSH
46233: LD_VAR 0 5
46237: ARRAY
46238: IN
46239: IFFALSE 46278
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
46241: LD_ADDR_EXP 87
46245: PUSH
46246: LD_EXP 87
46250: PPUSH
46251: LD_VAR 0 5
46255: PPUSH
46256: LD_EXP 87
46260: PUSH
46261: LD_VAR 0 5
46265: ARRAY
46266: PUSH
46267: LD_VAR 0 1
46271: DIFF
46272: PPUSH
46273: CALL_OW 1
46277: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
46278: LD_VAR 0 1
46282: PUSH
46283: LD_EXP 88
46287: PUSH
46288: LD_VAR 0 5
46292: ARRAY
46293: IN
46294: IFFALSE 46333
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
46296: LD_ADDR_EXP 88
46300: PUSH
46301: LD_EXP 88
46305: PPUSH
46306: LD_VAR 0 5
46310: PPUSH
46311: LD_EXP 88
46315: PUSH
46316: LD_VAR 0 5
46320: ARRAY
46321: PUSH
46322: LD_VAR 0 1
46326: DIFF
46327: PPUSH
46328: CALL_OW 1
46332: ST_TO_ADDR
// break ;
46333: GO 46337
// end ;
46335: GO 46155
46337: POP
46338: POP
// end ;
46339: LD_VAR 0 4
46343: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
46344: LD_INT 0
46346: PPUSH
46347: PPUSH
46348: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
46349: LD_EXP 79
46353: NOT
46354: PUSH
46355: LD_EXP 77
46359: NOT
46360: OR
46361: PUSH
46362: LD_VAR 0 3
46366: PUSH
46367: LD_EXP 105
46371: IN
46372: NOT
46373: OR
46374: IFFALSE 46378
// exit ;
46376: GO 46501
// for i = 1 to mc_vehicles do
46378: LD_ADDR_VAR 0 6
46382: PUSH
46383: DOUBLE
46384: LD_INT 1
46386: DEC
46387: ST_TO_ADDR
46388: LD_EXP 98
46392: PUSH
46393: FOR_TO
46394: IFFALSE 46499
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
46396: LD_VAR 0 2
46400: PUSH
46401: LD_EXP 98
46405: PUSH
46406: LD_VAR 0 6
46410: ARRAY
46411: IN
46412: PUSH
46413: LD_VAR 0 1
46417: PUSH
46418: LD_EXP 98
46422: PUSH
46423: LD_VAR 0 6
46427: ARRAY
46428: IN
46429: OR
46430: IFFALSE 46497
// begin tmp := mc_vehicles [ i ] diff old ;
46432: LD_ADDR_VAR 0 7
46436: PUSH
46437: LD_EXP 98
46441: PUSH
46442: LD_VAR 0 6
46446: ARRAY
46447: PUSH
46448: LD_VAR 0 2
46452: DIFF
46453: ST_TO_ADDR
// tmp := tmp diff new ;
46454: LD_ADDR_VAR 0 7
46458: PUSH
46459: LD_VAR 0 7
46463: PUSH
46464: LD_VAR 0 1
46468: DIFF
46469: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
46470: LD_ADDR_EXP 98
46474: PUSH
46475: LD_EXP 98
46479: PPUSH
46480: LD_VAR 0 6
46484: PPUSH
46485: LD_VAR 0 7
46489: PPUSH
46490: CALL_OW 1
46494: ST_TO_ADDR
// break ;
46495: GO 46499
// end ;
46497: GO 46393
46499: POP
46500: POP
// end ;
46501: LD_VAR 0 5
46505: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
46506: LD_INT 0
46508: PPUSH
46509: PPUSH
46510: PPUSH
46511: PPUSH
// if not mc_bases or not skirmish then
46512: LD_EXP 79
46516: NOT
46517: PUSH
46518: LD_EXP 77
46522: NOT
46523: OR
46524: IFFALSE 46528
// exit ;
46526: GO 46905
// side := GetSide ( vehicle ) ;
46528: LD_ADDR_VAR 0 5
46532: PUSH
46533: LD_VAR 0 1
46537: PPUSH
46538: CALL_OW 255
46542: ST_TO_ADDR
// for i = 1 to mc_bases do
46543: LD_ADDR_VAR 0 4
46547: PUSH
46548: DOUBLE
46549: LD_INT 1
46551: DEC
46552: ST_TO_ADDR
46553: LD_EXP 79
46557: PUSH
46558: FOR_TO
46559: IFFALSE 46903
// begin if factory in mc_bases [ i ] then
46561: LD_VAR 0 2
46565: PUSH
46566: LD_EXP 79
46570: PUSH
46571: LD_VAR 0 4
46575: ARRAY
46576: IN
46577: IFFALSE 46901
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
46579: LD_EXP 101
46583: PUSH
46584: LD_VAR 0 4
46588: ARRAY
46589: PUSH
46590: LD_EXP 90
46594: PUSH
46595: LD_VAR 0 4
46599: ARRAY
46600: LESS
46601: PUSH
46602: LD_VAR 0 1
46606: PPUSH
46607: CALL_OW 264
46611: PUSH
46612: LD_INT 31
46614: PUSH
46615: LD_INT 32
46617: PUSH
46618: LD_INT 51
46620: PUSH
46621: LD_EXP 73
46625: PUSH
46626: LD_INT 12
46628: PUSH
46629: LD_INT 30
46631: PUSH
46632: LD_EXP 72
46636: PUSH
46637: LD_INT 11
46639: PUSH
46640: LD_INT 53
46642: PUSH
46643: LD_INT 14
46645: PUSH
46646: LD_EXP 76
46650: PUSH
46651: LD_INT 29
46653: PUSH
46654: LD_EXP 74
46658: PUSH
46659: LD_INT 13
46661: PUSH
46662: LD_INT 52
46664: PUSH
46665: LD_INT 48
46667: PUSH
46668: LD_INT 8
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: IN
46690: NOT
46691: AND
46692: IFFALSE 46740
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
46694: LD_ADDR_EXP 101
46698: PUSH
46699: LD_EXP 101
46703: PPUSH
46704: LD_VAR 0 4
46708: PUSH
46709: LD_EXP 101
46713: PUSH
46714: LD_VAR 0 4
46718: ARRAY
46719: PUSH
46720: LD_INT 1
46722: PLUS
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PPUSH
46728: LD_VAR 0 1
46732: PPUSH
46733: CALL 57843 0 3
46737: ST_TO_ADDR
46738: GO 46784
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
46740: LD_ADDR_EXP 98
46744: PUSH
46745: LD_EXP 98
46749: PPUSH
46750: LD_VAR 0 4
46754: PUSH
46755: LD_EXP 98
46759: PUSH
46760: LD_VAR 0 4
46764: ARRAY
46765: PUSH
46766: LD_INT 1
46768: PLUS
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PPUSH
46774: LD_VAR 0 1
46778: PPUSH
46779: CALL 57843 0 3
46783: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
46784: LD_VAR 0 1
46788: PPUSH
46789: CALL_OW 263
46793: PUSH
46794: LD_INT 2
46796: EQUAL
46797: IFFALSE 46817
// begin repeat wait ( 0 0$1 ) ;
46799: LD_INT 35
46801: PPUSH
46802: CALL_OW 67
// until IsControledBy ( vehicle ) ;
46806: LD_VAR 0 1
46810: PPUSH
46811: CALL_OW 312
46815: IFFALSE 46799
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
46817: LD_VAR 0 1
46821: PPUSH
46822: LD_EXP 103
46826: PUSH
46827: LD_VAR 0 4
46831: ARRAY
46832: PPUSH
46833: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
46837: LD_VAR 0 1
46841: PPUSH
46842: CALL_OW 263
46846: PUSH
46847: LD_INT 1
46849: NONEQUAL
46850: IFFALSE 46854
// break ;
46852: GO 46903
// repeat wait ( 0 0$1 ) ;
46854: LD_INT 35
46856: PPUSH
46857: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
46861: LD_VAR 0 1
46865: PPUSH
46866: LD_EXP 103
46870: PUSH
46871: LD_VAR 0 4
46875: ARRAY
46876: PPUSH
46877: CALL_OW 308
46881: IFFALSE 46854
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
46883: LD_VAR 0 1
46887: PPUSH
46888: CALL_OW 311
46892: PPUSH
46893: CALL_OW 121
// exit ;
46897: POP
46898: POP
46899: GO 46905
// end ; end ;
46901: GO 46558
46903: POP
46904: POP
// end ;
46905: LD_VAR 0 3
46909: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
46910: LD_INT 0
46912: PPUSH
46913: PPUSH
46914: PPUSH
46915: PPUSH
// if not mc_bases or not skirmish then
46916: LD_EXP 79
46920: NOT
46921: PUSH
46922: LD_EXP 77
46926: NOT
46927: OR
46928: IFFALSE 46932
// exit ;
46930: GO 47285
// repeat wait ( 0 0$1 ) ;
46932: LD_INT 35
46934: PPUSH
46935: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
46939: LD_VAR 0 2
46943: PPUSH
46944: LD_VAR 0 3
46948: PPUSH
46949: CALL_OW 284
46953: IFFALSE 46932
// if GetResourceTypeXY ( x , y ) = mat_artefact then
46955: LD_VAR 0 2
46959: PPUSH
46960: LD_VAR 0 3
46964: PPUSH
46965: CALL_OW 283
46969: PUSH
46970: LD_INT 4
46972: EQUAL
46973: IFFALSE 46977
// exit ;
46975: GO 47285
// for i = 1 to mc_bases do
46977: LD_ADDR_VAR 0 7
46981: PUSH
46982: DOUBLE
46983: LD_INT 1
46985: DEC
46986: ST_TO_ADDR
46987: LD_EXP 79
46991: PUSH
46992: FOR_TO
46993: IFFALSE 47283
// begin if mc_crates_area [ i ] then
46995: LD_EXP 97
46999: PUSH
47000: LD_VAR 0 7
47004: ARRAY
47005: IFFALSE 47116
// for j in mc_crates_area [ i ] do
47007: LD_ADDR_VAR 0 8
47011: PUSH
47012: LD_EXP 97
47016: PUSH
47017: LD_VAR 0 7
47021: ARRAY
47022: PUSH
47023: FOR_IN
47024: IFFALSE 47114
// if InArea ( x , y , j ) then
47026: LD_VAR 0 2
47030: PPUSH
47031: LD_VAR 0 3
47035: PPUSH
47036: LD_VAR 0 8
47040: PPUSH
47041: CALL_OW 309
47045: IFFALSE 47112
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
47047: LD_ADDR_EXP 95
47051: PUSH
47052: LD_EXP 95
47056: PPUSH
47057: LD_VAR 0 7
47061: PUSH
47062: LD_EXP 95
47066: PUSH
47067: LD_VAR 0 7
47071: ARRAY
47072: PUSH
47073: LD_INT 1
47075: PLUS
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PPUSH
47081: LD_VAR 0 4
47085: PUSH
47086: LD_VAR 0 2
47090: PUSH
47091: LD_VAR 0 3
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: PPUSH
47101: CALL 57843 0 3
47105: ST_TO_ADDR
// exit ;
47106: POP
47107: POP
47108: POP
47109: POP
47110: GO 47285
// end ;
47112: GO 47023
47114: POP
47115: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47116: LD_ADDR_VAR 0 9
47120: PUSH
47121: LD_EXP 79
47125: PUSH
47126: LD_VAR 0 7
47130: ARRAY
47131: PPUSH
47132: LD_INT 2
47134: PUSH
47135: LD_INT 30
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 30
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: PPUSH
47160: CALL_OW 72
47164: ST_TO_ADDR
// if not depot then
47165: LD_VAR 0 9
47169: NOT
47170: IFFALSE 47174
// continue ;
47172: GO 46992
// for j in depot do
47174: LD_ADDR_VAR 0 8
47178: PUSH
47179: LD_VAR 0 9
47183: PUSH
47184: FOR_IN
47185: IFFALSE 47279
// if GetDistUnitXY ( j , x , y ) < 30 then
47187: LD_VAR 0 8
47191: PPUSH
47192: LD_VAR 0 2
47196: PPUSH
47197: LD_VAR 0 3
47201: PPUSH
47202: CALL_OW 297
47206: PUSH
47207: LD_INT 30
47209: LESS
47210: IFFALSE 47277
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
47212: LD_ADDR_EXP 95
47216: PUSH
47217: LD_EXP 95
47221: PPUSH
47222: LD_VAR 0 7
47226: PUSH
47227: LD_EXP 95
47231: PUSH
47232: LD_VAR 0 7
47236: ARRAY
47237: PUSH
47238: LD_INT 1
47240: PLUS
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PPUSH
47246: LD_VAR 0 4
47250: PUSH
47251: LD_VAR 0 2
47255: PUSH
47256: LD_VAR 0 3
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: LIST
47265: PPUSH
47266: CALL 57843 0 3
47270: ST_TO_ADDR
// exit ;
47271: POP
47272: POP
47273: POP
47274: POP
47275: GO 47285
// end ;
47277: GO 47184
47279: POP
47280: POP
// end ;
47281: GO 46992
47283: POP
47284: POP
// end ;
47285: LD_VAR 0 6
47289: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
47290: LD_INT 0
47292: PPUSH
47293: PPUSH
47294: PPUSH
47295: PPUSH
// if not mc_bases or not skirmish then
47296: LD_EXP 79
47300: NOT
47301: PUSH
47302: LD_EXP 77
47306: NOT
47307: OR
47308: IFFALSE 47312
// exit ;
47310: GO 47589
// side := GetSide ( lab ) ;
47312: LD_ADDR_VAR 0 4
47316: PUSH
47317: LD_VAR 0 2
47321: PPUSH
47322: CALL_OW 255
47326: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
47327: LD_VAR 0 4
47331: PUSH
47332: LD_EXP 105
47336: IN
47337: NOT
47338: PUSH
47339: LD_EXP 106
47343: NOT
47344: OR
47345: PUSH
47346: LD_EXP 79
47350: NOT
47351: OR
47352: IFFALSE 47356
// exit ;
47354: GO 47589
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
47356: LD_ADDR_EXP 106
47360: PUSH
47361: LD_EXP 106
47365: PPUSH
47366: LD_VAR 0 4
47370: PPUSH
47371: LD_EXP 106
47375: PUSH
47376: LD_VAR 0 4
47380: ARRAY
47381: PUSH
47382: LD_VAR 0 1
47386: DIFF
47387: PPUSH
47388: CALL_OW 1
47392: ST_TO_ADDR
// for i = 1 to mc_bases do
47393: LD_ADDR_VAR 0 5
47397: PUSH
47398: DOUBLE
47399: LD_INT 1
47401: DEC
47402: ST_TO_ADDR
47403: LD_EXP 79
47407: PUSH
47408: FOR_TO
47409: IFFALSE 47587
// begin if lab in mc_bases [ i ] then
47411: LD_VAR 0 2
47415: PUSH
47416: LD_EXP 79
47420: PUSH
47421: LD_VAR 0 5
47425: ARRAY
47426: IN
47427: IFFALSE 47585
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
47429: LD_VAR 0 1
47433: PUSH
47434: LD_INT 11
47436: PUSH
47437: LD_INT 4
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: IN
47452: PUSH
47453: LD_EXP 109
47457: PUSH
47458: LD_VAR 0 5
47462: ARRAY
47463: AND
47464: IFFALSE 47585
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
47466: LD_ADDR_VAR 0 6
47470: PUSH
47471: LD_EXP 109
47475: PUSH
47476: LD_VAR 0 5
47480: ARRAY
47481: PUSH
47482: LD_INT 1
47484: ARRAY
47485: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
47486: LD_ADDR_EXP 109
47490: PUSH
47491: LD_EXP 109
47495: PPUSH
47496: LD_VAR 0 5
47500: PPUSH
47501: EMPTY
47502: PPUSH
47503: CALL_OW 1
47507: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
47508: LD_VAR 0 6
47512: PPUSH
47513: LD_INT 0
47515: PPUSH
47516: CALL_OW 109
// ComExitBuilding ( tmp ) ;
47520: LD_VAR 0 6
47524: PPUSH
47525: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
47529: LD_ADDR_EXP 108
47533: PUSH
47534: LD_EXP 108
47538: PPUSH
47539: LD_VAR 0 5
47543: PPUSH
47544: LD_EXP 108
47548: PUSH
47549: LD_VAR 0 5
47553: ARRAY
47554: PPUSH
47555: LD_INT 1
47557: PPUSH
47558: LD_VAR 0 6
47562: PPUSH
47563: CALL_OW 2
47567: PPUSH
47568: CALL_OW 1
47572: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
47573: LD_VAR 0 5
47577: PPUSH
47578: LD_INT 112
47580: PPUSH
47581: CALL 24585 0 2
// end ; end ; end ;
47585: GO 47408
47587: POP
47588: POP
// end ;
47589: LD_VAR 0 3
47593: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
47594: LD_INT 0
47596: PPUSH
47597: PPUSH
47598: PPUSH
47599: PPUSH
47600: PPUSH
47601: PPUSH
47602: PPUSH
47603: PPUSH
// if not mc_bases or not skirmish then
47604: LD_EXP 79
47608: NOT
47609: PUSH
47610: LD_EXP 77
47614: NOT
47615: OR
47616: IFFALSE 47620
// exit ;
47618: GO 48991
// for i = 1 to mc_bases do
47620: LD_ADDR_VAR 0 3
47624: PUSH
47625: DOUBLE
47626: LD_INT 1
47628: DEC
47629: ST_TO_ADDR
47630: LD_EXP 79
47634: PUSH
47635: FOR_TO
47636: IFFALSE 48989
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
47638: LD_VAR 0 1
47642: PUSH
47643: LD_EXP 79
47647: PUSH
47648: LD_VAR 0 3
47652: ARRAY
47653: IN
47654: PUSH
47655: LD_VAR 0 1
47659: PUSH
47660: LD_EXP 86
47664: PUSH
47665: LD_VAR 0 3
47669: ARRAY
47670: IN
47671: OR
47672: PUSH
47673: LD_VAR 0 1
47677: PUSH
47678: LD_EXP 101
47682: PUSH
47683: LD_VAR 0 3
47687: ARRAY
47688: IN
47689: OR
47690: PUSH
47691: LD_VAR 0 1
47695: PUSH
47696: LD_EXP 98
47700: PUSH
47701: LD_VAR 0 3
47705: ARRAY
47706: IN
47707: OR
47708: PUSH
47709: LD_VAR 0 1
47713: PUSH
47714: LD_EXP 108
47718: PUSH
47719: LD_VAR 0 3
47723: ARRAY
47724: IN
47725: OR
47726: PUSH
47727: LD_VAR 0 1
47731: PUSH
47732: LD_EXP 109
47736: PUSH
47737: LD_VAR 0 3
47741: ARRAY
47742: IN
47743: OR
47744: IFFALSE 48987
// begin if un in mc_ape [ i ] then
47746: LD_VAR 0 1
47750: PUSH
47751: LD_EXP 108
47755: PUSH
47756: LD_VAR 0 3
47760: ARRAY
47761: IN
47762: IFFALSE 47801
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
47764: LD_ADDR_EXP 108
47768: PUSH
47769: LD_EXP 108
47773: PPUSH
47774: LD_VAR 0 3
47778: PPUSH
47779: LD_EXP 108
47783: PUSH
47784: LD_VAR 0 3
47788: ARRAY
47789: PUSH
47790: LD_VAR 0 1
47794: DIFF
47795: PPUSH
47796: CALL_OW 1
47800: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
47801: LD_VAR 0 1
47805: PUSH
47806: LD_EXP 109
47810: PUSH
47811: LD_VAR 0 3
47815: ARRAY
47816: IN
47817: IFFALSE 47841
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
47819: LD_ADDR_EXP 109
47823: PUSH
47824: LD_EXP 109
47828: PPUSH
47829: LD_VAR 0 3
47833: PPUSH
47834: EMPTY
47835: PPUSH
47836: CALL_OW 1
47840: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
47841: LD_VAR 0 1
47845: PPUSH
47846: CALL_OW 247
47850: PUSH
47851: LD_INT 2
47853: EQUAL
47854: PUSH
47855: LD_VAR 0 1
47859: PPUSH
47860: CALL_OW 110
47864: PUSH
47865: LD_INT 20
47867: EQUAL
47868: PUSH
47869: LD_VAR 0 1
47873: PUSH
47874: LD_EXP 101
47878: PUSH
47879: LD_VAR 0 3
47883: ARRAY
47884: IN
47885: OR
47886: PUSH
47887: LD_VAR 0 1
47891: PPUSH
47892: CALL_OW 264
47896: PUSH
47897: LD_INT 12
47899: PUSH
47900: LD_INT 51
47902: PUSH
47903: LD_EXP 73
47907: PUSH
47908: LD_INT 32
47910: PUSH
47911: LD_INT 13
47913: PUSH
47914: LD_INT 52
47916: PUSH
47917: LD_INT 31
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: IN
47929: OR
47930: AND
47931: IFFALSE 48239
// begin if un in mc_defender [ i ] then
47933: LD_VAR 0 1
47937: PUSH
47938: LD_EXP 101
47942: PUSH
47943: LD_VAR 0 3
47947: ARRAY
47948: IN
47949: IFFALSE 47988
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
47951: LD_ADDR_EXP 101
47955: PUSH
47956: LD_EXP 101
47960: PPUSH
47961: LD_VAR 0 3
47965: PPUSH
47966: LD_EXP 101
47970: PUSH
47971: LD_VAR 0 3
47975: ARRAY
47976: PUSH
47977: LD_VAR 0 1
47981: DIFF
47982: PPUSH
47983: CALL_OW 1
47987: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
47988: LD_ADDR_VAR 0 8
47992: PUSH
47993: LD_VAR 0 3
47997: PPUSH
47998: LD_INT 3
48000: PPUSH
48001: CALL 44657 0 2
48005: ST_TO_ADDR
// if fac then
48006: LD_VAR 0 8
48010: IFFALSE 48239
// begin for j in fac do
48012: LD_ADDR_VAR 0 4
48016: PUSH
48017: LD_VAR 0 8
48021: PUSH
48022: FOR_IN
48023: IFFALSE 48237
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
48025: LD_ADDR_VAR 0 9
48029: PUSH
48030: LD_VAR 0 8
48034: PPUSH
48035: LD_VAR 0 1
48039: PPUSH
48040: CALL_OW 265
48044: PPUSH
48045: LD_VAR 0 1
48049: PPUSH
48050: CALL_OW 262
48054: PPUSH
48055: LD_VAR 0 1
48059: PPUSH
48060: CALL_OW 263
48064: PPUSH
48065: LD_VAR 0 1
48069: PPUSH
48070: CALL_OW 264
48074: PPUSH
48075: CALL 55375 0 5
48079: ST_TO_ADDR
// if components then
48080: LD_VAR 0 9
48084: IFFALSE 48235
// begin if GetWeapon ( un ) = ar_control_tower then
48086: LD_VAR 0 1
48090: PPUSH
48091: CALL_OW 264
48095: PUSH
48096: LD_INT 31
48098: EQUAL
48099: IFFALSE 48216
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
48101: LD_VAR 0 1
48105: PPUSH
48106: CALL_OW 311
48110: PPUSH
48111: LD_INT 0
48113: PPUSH
48114: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
48118: LD_ADDR_EXP 119
48122: PUSH
48123: LD_EXP 119
48127: PPUSH
48128: LD_VAR 0 3
48132: PPUSH
48133: LD_EXP 119
48137: PUSH
48138: LD_VAR 0 3
48142: ARRAY
48143: PUSH
48144: LD_VAR 0 1
48148: PPUSH
48149: CALL_OW 311
48153: DIFF
48154: PPUSH
48155: CALL_OW 1
48159: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
48160: LD_ADDR_VAR 0 7
48164: PUSH
48165: LD_EXP 100
48169: PUSH
48170: LD_VAR 0 3
48174: ARRAY
48175: PPUSH
48176: LD_INT 1
48178: PPUSH
48179: LD_VAR 0 9
48183: PPUSH
48184: CALL_OW 2
48188: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
48189: LD_ADDR_EXP 100
48193: PUSH
48194: LD_EXP 100
48198: PPUSH
48199: LD_VAR 0 3
48203: PPUSH
48204: LD_VAR 0 7
48208: PPUSH
48209: CALL_OW 1
48213: ST_TO_ADDR
// end else
48214: GO 48233
// MC_InsertProduceList ( i , [ components ] ) ;
48216: LD_VAR 0 3
48220: PPUSH
48221: LD_VAR 0 9
48225: PUSH
48226: EMPTY
48227: LIST
48228: PPUSH
48229: CALL 44202 0 2
// break ;
48233: GO 48237
// end ; end ;
48235: GO 48022
48237: POP
48238: POP
// end ; end ; if GetType ( un ) = unit_building then
48239: LD_VAR 0 1
48243: PPUSH
48244: CALL_OW 247
48248: PUSH
48249: LD_INT 3
48251: EQUAL
48252: IFFALSE 48655
// begin btype := GetBType ( un ) ;
48254: LD_ADDR_VAR 0 5
48258: PUSH
48259: LD_VAR 0 1
48263: PPUSH
48264: CALL_OW 266
48268: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
48269: LD_VAR 0 5
48273: PUSH
48274: LD_INT 29
48276: PUSH
48277: LD_INT 30
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: IN
48284: IFFALSE 48357
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
48286: LD_VAR 0 1
48290: PPUSH
48291: CALL_OW 250
48295: PPUSH
48296: LD_VAR 0 1
48300: PPUSH
48301: CALL_OW 251
48305: PPUSH
48306: LD_VAR 0 1
48310: PPUSH
48311: CALL_OW 255
48315: PPUSH
48316: CALL_OW 440
48320: NOT
48321: IFFALSE 48357
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 250
48332: PPUSH
48333: LD_VAR 0 1
48337: PPUSH
48338: CALL_OW 251
48342: PPUSH
48343: LD_VAR 0 1
48347: PPUSH
48348: CALL_OW 255
48352: PPUSH
48353: CALL_OW 441
// end ; if btype = b_warehouse then
48357: LD_VAR 0 5
48361: PUSH
48362: LD_INT 1
48364: EQUAL
48365: IFFALSE 48383
// begin btype := b_depot ;
48367: LD_ADDR_VAR 0 5
48371: PUSH
48372: LD_INT 0
48374: ST_TO_ADDR
// pos := 1 ;
48375: LD_ADDR_VAR 0 6
48379: PUSH
48380: LD_INT 1
48382: ST_TO_ADDR
// end ; if btype = b_factory then
48383: LD_VAR 0 5
48387: PUSH
48388: LD_INT 3
48390: EQUAL
48391: IFFALSE 48409
// begin btype := b_workshop ;
48393: LD_ADDR_VAR 0 5
48397: PUSH
48398: LD_INT 2
48400: ST_TO_ADDR
// pos := 1 ;
48401: LD_ADDR_VAR 0 6
48405: PUSH
48406: LD_INT 1
48408: ST_TO_ADDR
// end ; if btype = b_barracks then
48409: LD_VAR 0 5
48413: PUSH
48414: LD_INT 5
48416: EQUAL
48417: IFFALSE 48427
// btype := b_armoury ;
48419: LD_ADDR_VAR 0 5
48423: PUSH
48424: LD_INT 4
48426: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
48427: LD_VAR 0 5
48431: PUSH
48432: LD_INT 7
48434: PUSH
48435: LD_INT 8
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: IN
48442: IFFALSE 48452
// btype := b_lab ;
48444: LD_ADDR_VAR 0 5
48448: PUSH
48449: LD_INT 6
48451: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
48452: LD_ADDR_EXP 84
48456: PUSH
48457: LD_EXP 84
48461: PPUSH
48462: LD_VAR 0 3
48466: PUSH
48467: LD_EXP 84
48471: PUSH
48472: LD_VAR 0 3
48476: ARRAY
48477: PUSH
48478: LD_INT 1
48480: PLUS
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PPUSH
48486: LD_VAR 0 5
48490: PUSH
48491: LD_VAR 0 1
48495: PPUSH
48496: CALL_OW 250
48500: PUSH
48501: LD_VAR 0 1
48505: PPUSH
48506: CALL_OW 251
48510: PUSH
48511: LD_VAR 0 1
48515: PPUSH
48516: CALL_OW 254
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: PPUSH
48527: CALL 57843 0 3
48531: ST_TO_ADDR
// if pos = 1 then
48532: LD_VAR 0 6
48536: PUSH
48537: LD_INT 1
48539: EQUAL
48540: IFFALSE 48655
// begin tmp := mc_build_list [ i ] ;
48542: LD_ADDR_VAR 0 7
48546: PUSH
48547: LD_EXP 84
48551: PUSH
48552: LD_VAR 0 3
48556: ARRAY
48557: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
48558: LD_VAR 0 7
48562: PPUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 30
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 30
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: PPUSH
48591: CALL_OW 72
48595: IFFALSE 48605
// pos := 2 ;
48597: LD_ADDR_VAR 0 6
48601: PUSH
48602: LD_INT 2
48604: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
48605: LD_ADDR_VAR 0 7
48609: PUSH
48610: LD_VAR 0 7
48614: PPUSH
48615: LD_VAR 0 6
48619: PPUSH
48620: LD_VAR 0 7
48624: PPUSH
48625: CALL 58169 0 3
48629: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
48630: LD_ADDR_EXP 84
48634: PUSH
48635: LD_EXP 84
48639: PPUSH
48640: LD_VAR 0 3
48644: PPUSH
48645: LD_VAR 0 7
48649: PPUSH
48650: CALL_OW 1
48654: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
48655: LD_VAR 0 1
48659: PUSH
48660: LD_EXP 79
48664: PUSH
48665: LD_VAR 0 3
48669: ARRAY
48670: IN
48671: IFFALSE 48710
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
48673: LD_ADDR_EXP 79
48677: PUSH
48678: LD_EXP 79
48682: PPUSH
48683: LD_VAR 0 3
48687: PPUSH
48688: LD_EXP 79
48692: PUSH
48693: LD_VAR 0 3
48697: ARRAY
48698: PUSH
48699: LD_VAR 0 1
48703: DIFF
48704: PPUSH
48705: CALL_OW 1
48709: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
48710: LD_VAR 0 1
48714: PUSH
48715: LD_EXP 86
48719: PUSH
48720: LD_VAR 0 3
48724: ARRAY
48725: IN
48726: IFFALSE 48765
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
48728: LD_ADDR_EXP 86
48732: PUSH
48733: LD_EXP 86
48737: PPUSH
48738: LD_VAR 0 3
48742: PPUSH
48743: LD_EXP 86
48747: PUSH
48748: LD_VAR 0 3
48752: ARRAY
48753: PUSH
48754: LD_VAR 0 1
48758: DIFF
48759: PPUSH
48760: CALL_OW 1
48764: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
48765: LD_VAR 0 1
48769: PUSH
48770: LD_EXP 98
48774: PUSH
48775: LD_VAR 0 3
48779: ARRAY
48780: IN
48781: IFFALSE 48820
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
48783: LD_ADDR_EXP 98
48787: PUSH
48788: LD_EXP 98
48792: PPUSH
48793: LD_VAR 0 3
48797: PPUSH
48798: LD_EXP 98
48802: PUSH
48803: LD_VAR 0 3
48807: ARRAY
48808: PUSH
48809: LD_VAR 0 1
48813: DIFF
48814: PPUSH
48815: CALL_OW 1
48819: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
48820: LD_VAR 0 1
48824: PUSH
48825: LD_EXP 101
48829: PUSH
48830: LD_VAR 0 3
48834: ARRAY
48835: IN
48836: IFFALSE 48875
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
48838: LD_ADDR_EXP 101
48842: PUSH
48843: LD_EXP 101
48847: PPUSH
48848: LD_VAR 0 3
48852: PPUSH
48853: LD_EXP 101
48857: PUSH
48858: LD_VAR 0 3
48862: ARRAY
48863: PUSH
48864: LD_VAR 0 1
48868: DIFF
48869: PPUSH
48870: CALL_OW 1
48874: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
48875: LD_VAR 0 1
48879: PUSH
48880: LD_EXP 88
48884: PUSH
48885: LD_VAR 0 3
48889: ARRAY
48890: IN
48891: IFFALSE 48930
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
48893: LD_ADDR_EXP 88
48897: PUSH
48898: LD_EXP 88
48902: PPUSH
48903: LD_VAR 0 3
48907: PPUSH
48908: LD_EXP 88
48912: PUSH
48913: LD_VAR 0 3
48917: ARRAY
48918: PUSH
48919: LD_VAR 0 1
48923: DIFF
48924: PPUSH
48925: CALL_OW 1
48929: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
48930: LD_VAR 0 1
48934: PUSH
48935: LD_EXP 87
48939: PUSH
48940: LD_VAR 0 3
48944: ARRAY
48945: IN
48946: IFFALSE 48985
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
48948: LD_ADDR_EXP 87
48952: PUSH
48953: LD_EXP 87
48957: PPUSH
48958: LD_VAR 0 3
48962: PPUSH
48963: LD_EXP 87
48967: PUSH
48968: LD_VAR 0 3
48972: ARRAY
48973: PUSH
48974: LD_VAR 0 1
48978: DIFF
48979: PPUSH
48980: CALL_OW 1
48984: ST_TO_ADDR
// end ; break ;
48985: GO 48989
// end ;
48987: GO 47635
48989: POP
48990: POP
// end ;
48991: LD_VAR 0 2
48995: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
48996: LD_INT 0
48998: PPUSH
48999: PPUSH
49000: PPUSH
// if not mc_bases or not skirmish then
49001: LD_EXP 79
49005: NOT
49006: PUSH
49007: LD_EXP 77
49011: NOT
49012: OR
49013: IFFALSE 49017
// exit ;
49015: GO 49232
// for i = 1 to mc_bases do
49017: LD_ADDR_VAR 0 3
49021: PUSH
49022: DOUBLE
49023: LD_INT 1
49025: DEC
49026: ST_TO_ADDR
49027: LD_EXP 79
49031: PUSH
49032: FOR_TO
49033: IFFALSE 49230
// begin if building in mc_construct_list [ i ] then
49035: LD_VAR 0 1
49039: PUSH
49040: LD_EXP 86
49044: PUSH
49045: LD_VAR 0 3
49049: ARRAY
49050: IN
49051: IFFALSE 49228
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
49053: LD_ADDR_EXP 86
49057: PUSH
49058: LD_EXP 86
49062: PPUSH
49063: LD_VAR 0 3
49067: PPUSH
49068: LD_EXP 86
49072: PUSH
49073: LD_VAR 0 3
49077: ARRAY
49078: PUSH
49079: LD_VAR 0 1
49083: DIFF
49084: PPUSH
49085: CALL_OW 1
49089: ST_TO_ADDR
// if building in mc_lab [ i ] then
49090: LD_VAR 0 1
49094: PUSH
49095: LD_EXP 112
49099: PUSH
49100: LD_VAR 0 3
49104: ARRAY
49105: IN
49106: IFFALSE 49161
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
49108: LD_ADDR_EXP 113
49112: PUSH
49113: LD_EXP 113
49117: PPUSH
49118: LD_VAR 0 3
49122: PPUSH
49123: LD_EXP 113
49127: PUSH
49128: LD_VAR 0 3
49132: ARRAY
49133: PPUSH
49134: LD_INT 1
49136: PPUSH
49137: LD_EXP 113
49141: PUSH
49142: LD_VAR 0 3
49146: ARRAY
49147: PPUSH
49148: LD_INT 0
49150: PPUSH
49151: CALL 57261 0 4
49155: PPUSH
49156: CALL_OW 1
49160: ST_TO_ADDR
// if not building in mc_bases [ i ] then
49161: LD_VAR 0 1
49165: PUSH
49166: LD_EXP 79
49170: PUSH
49171: LD_VAR 0 3
49175: ARRAY
49176: IN
49177: NOT
49178: IFFALSE 49224
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
49180: LD_ADDR_EXP 79
49184: PUSH
49185: LD_EXP 79
49189: PPUSH
49190: LD_VAR 0 3
49194: PUSH
49195: LD_EXP 79
49199: PUSH
49200: LD_VAR 0 3
49204: ARRAY
49205: PUSH
49206: LD_INT 1
49208: PLUS
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PPUSH
49214: LD_VAR 0 1
49218: PPUSH
49219: CALL 57843 0 3
49223: ST_TO_ADDR
// exit ;
49224: POP
49225: POP
49226: GO 49232
// end ; end ;
49228: GO 49032
49230: POP
49231: POP
// end ;
49232: LD_VAR 0 2
49236: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
49237: LD_INT 0
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
// if not mc_bases or not skirmish then
49246: LD_EXP 79
49250: NOT
49251: PUSH
49252: LD_EXP 77
49256: NOT
49257: OR
49258: IFFALSE 49262
// exit ;
49260: GO 49923
// for i = 1 to mc_bases do
49262: LD_ADDR_VAR 0 3
49266: PUSH
49267: DOUBLE
49268: LD_INT 1
49270: DEC
49271: ST_TO_ADDR
49272: LD_EXP 79
49276: PUSH
49277: FOR_TO
49278: IFFALSE 49921
// begin if building in mc_construct_list [ i ] then
49280: LD_VAR 0 1
49284: PUSH
49285: LD_EXP 86
49289: PUSH
49290: LD_VAR 0 3
49294: ARRAY
49295: IN
49296: IFFALSE 49919
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
49298: LD_ADDR_EXP 86
49302: PUSH
49303: LD_EXP 86
49307: PPUSH
49308: LD_VAR 0 3
49312: PPUSH
49313: LD_EXP 86
49317: PUSH
49318: LD_VAR 0 3
49322: ARRAY
49323: PUSH
49324: LD_VAR 0 1
49328: DIFF
49329: PPUSH
49330: CALL_OW 1
49334: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
49335: LD_ADDR_EXP 79
49339: PUSH
49340: LD_EXP 79
49344: PPUSH
49345: LD_VAR 0 3
49349: PUSH
49350: LD_EXP 79
49354: PUSH
49355: LD_VAR 0 3
49359: ARRAY
49360: PUSH
49361: LD_INT 1
49363: PLUS
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PPUSH
49369: LD_VAR 0 1
49373: PPUSH
49374: CALL 57843 0 3
49378: ST_TO_ADDR
// btype := GetBType ( building ) ;
49379: LD_ADDR_VAR 0 5
49383: PUSH
49384: LD_VAR 0 1
49388: PPUSH
49389: CALL_OW 266
49393: ST_TO_ADDR
// side := GetSide ( building ) ;
49394: LD_ADDR_VAR 0 8
49398: PUSH
49399: LD_VAR 0 1
49403: PPUSH
49404: CALL_OW 255
49408: ST_TO_ADDR
// if btype = b_lab then
49409: LD_VAR 0 5
49413: PUSH
49414: LD_INT 6
49416: EQUAL
49417: IFFALSE 49467
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
49419: LD_ADDR_EXP 112
49423: PUSH
49424: LD_EXP 112
49428: PPUSH
49429: LD_VAR 0 3
49433: PUSH
49434: LD_EXP 112
49438: PUSH
49439: LD_VAR 0 3
49443: ARRAY
49444: PUSH
49445: LD_INT 1
49447: PLUS
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PPUSH
49453: LD_VAR 0 1
49457: PPUSH
49458: CALL 57843 0 3
49462: ST_TO_ADDR
// exit ;
49463: POP
49464: POP
49465: GO 49923
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
49467: LD_VAR 0 5
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: LD_INT 4
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: IN
49486: IFFALSE 49610
// begin if btype = b_armoury then
49488: LD_VAR 0 5
49492: PUSH
49493: LD_INT 4
49495: EQUAL
49496: IFFALSE 49506
// btype := b_barracks ;
49498: LD_ADDR_VAR 0 5
49502: PUSH
49503: LD_INT 5
49505: ST_TO_ADDR
// if btype = b_depot then
49506: LD_VAR 0 5
49510: PUSH
49511: LD_INT 0
49513: EQUAL
49514: IFFALSE 49524
// btype := b_warehouse ;
49516: LD_ADDR_VAR 0 5
49520: PUSH
49521: LD_INT 1
49523: ST_TO_ADDR
// if btype = b_workshop then
49524: LD_VAR 0 5
49528: PUSH
49529: LD_INT 2
49531: EQUAL
49532: IFFALSE 49542
// btype := b_factory ;
49534: LD_ADDR_VAR 0 5
49538: PUSH
49539: LD_INT 3
49541: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
49542: LD_VAR 0 5
49546: PPUSH
49547: LD_VAR 0 8
49551: PPUSH
49552: CALL_OW 323
49556: PUSH
49557: LD_INT 1
49559: EQUAL
49560: IFFALSE 49606
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
49562: LD_ADDR_EXP 111
49566: PUSH
49567: LD_EXP 111
49571: PPUSH
49572: LD_VAR 0 3
49576: PUSH
49577: LD_EXP 111
49581: PUSH
49582: LD_VAR 0 3
49586: ARRAY
49587: PUSH
49588: LD_INT 1
49590: PLUS
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PPUSH
49596: LD_VAR 0 1
49600: PPUSH
49601: CALL 57843 0 3
49605: ST_TO_ADDR
// exit ;
49606: POP
49607: POP
49608: GO 49923
// end ; if btype in [ b_bunker , b_turret ] then
49610: LD_VAR 0 5
49614: PUSH
49615: LD_INT 32
49617: PUSH
49618: LD_INT 33
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: IN
49625: IFFALSE 49915
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
49627: LD_ADDR_EXP 87
49631: PUSH
49632: LD_EXP 87
49636: PPUSH
49637: LD_VAR 0 3
49641: PUSH
49642: LD_EXP 87
49646: PUSH
49647: LD_VAR 0 3
49651: ARRAY
49652: PUSH
49653: LD_INT 1
49655: PLUS
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PPUSH
49661: LD_VAR 0 1
49665: PPUSH
49666: CALL 57843 0 3
49670: ST_TO_ADDR
// if btype = b_bunker then
49671: LD_VAR 0 5
49675: PUSH
49676: LD_INT 32
49678: EQUAL
49679: IFFALSE 49915
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
49681: LD_ADDR_EXP 88
49685: PUSH
49686: LD_EXP 88
49690: PPUSH
49691: LD_VAR 0 3
49695: PUSH
49696: LD_EXP 88
49700: PUSH
49701: LD_VAR 0 3
49705: ARRAY
49706: PUSH
49707: LD_INT 1
49709: PLUS
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PPUSH
49715: LD_VAR 0 1
49719: PPUSH
49720: CALL 57843 0 3
49724: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
49725: LD_ADDR_VAR 0 6
49729: PUSH
49730: LD_EXP 79
49734: PUSH
49735: LD_VAR 0 3
49739: ARRAY
49740: PPUSH
49741: LD_INT 25
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 3
49753: PUSH
49754: LD_INT 54
49756: PUSH
49757: EMPTY
49758: LIST
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PPUSH
49768: CALL_OW 72
49772: ST_TO_ADDR
// if tmp then
49773: LD_VAR 0 6
49777: IFFALSE 49783
// exit ;
49779: POP
49780: POP
49781: GO 49923
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
49783: LD_ADDR_VAR 0 6
49787: PUSH
49788: LD_EXP 79
49792: PUSH
49793: LD_VAR 0 3
49797: ARRAY
49798: PPUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 30
49804: PUSH
49805: LD_INT 4
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 30
49814: PUSH
49815: LD_INT 5
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: PPUSH
49827: CALL_OW 72
49831: ST_TO_ADDR
// if not tmp then
49832: LD_VAR 0 6
49836: NOT
49837: IFFALSE 49843
// exit ;
49839: POP
49840: POP
49841: GO 49923
// for j in tmp do
49843: LD_ADDR_VAR 0 4
49847: PUSH
49848: LD_VAR 0 6
49852: PUSH
49853: FOR_IN
49854: IFFALSE 49913
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
49856: LD_ADDR_VAR 0 7
49860: PUSH
49861: LD_VAR 0 4
49865: PPUSH
49866: CALL_OW 313
49870: PPUSH
49871: LD_INT 25
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PPUSH
49881: CALL_OW 72
49885: ST_TO_ADDR
// if units then
49886: LD_VAR 0 7
49890: IFFALSE 49911
// begin ComExitBuilding ( units [ 1 ] ) ;
49892: LD_VAR 0 7
49896: PUSH
49897: LD_INT 1
49899: ARRAY
49900: PPUSH
49901: CALL_OW 122
// exit ;
49905: POP
49906: POP
49907: POP
49908: POP
49909: GO 49923
// end ; end ;
49911: GO 49853
49913: POP
49914: POP
// end ; end ; exit ;
49915: POP
49916: POP
49917: GO 49923
// end ; end ;
49919: GO 49277
49921: POP
49922: POP
// end ;
49923: LD_VAR 0 2
49927: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
49928: LD_INT 0
49930: PPUSH
49931: PPUSH
49932: PPUSH
49933: PPUSH
49934: PPUSH
49935: PPUSH
49936: PPUSH
// if not mc_bases or not skirmish then
49937: LD_EXP 79
49941: NOT
49942: PUSH
49943: LD_EXP 77
49947: NOT
49948: OR
49949: IFFALSE 49953
// exit ;
49951: GO 50184
// btype := GetBType ( building ) ;
49953: LD_ADDR_VAR 0 6
49957: PUSH
49958: LD_VAR 0 1
49962: PPUSH
49963: CALL_OW 266
49967: ST_TO_ADDR
// x := GetX ( building ) ;
49968: LD_ADDR_VAR 0 7
49972: PUSH
49973: LD_VAR 0 1
49977: PPUSH
49978: CALL_OW 250
49982: ST_TO_ADDR
// y := GetY ( building ) ;
49983: LD_ADDR_VAR 0 8
49987: PUSH
49988: LD_VAR 0 1
49992: PPUSH
49993: CALL_OW 251
49997: ST_TO_ADDR
// d := GetDir ( building ) ;
49998: LD_ADDR_VAR 0 9
50002: PUSH
50003: LD_VAR 0 1
50007: PPUSH
50008: CALL_OW 254
50012: ST_TO_ADDR
// for i = 1 to mc_bases do
50013: LD_ADDR_VAR 0 4
50017: PUSH
50018: DOUBLE
50019: LD_INT 1
50021: DEC
50022: ST_TO_ADDR
50023: LD_EXP 79
50027: PUSH
50028: FOR_TO
50029: IFFALSE 50182
// begin if not mc_build_list [ i ] then
50031: LD_EXP 84
50035: PUSH
50036: LD_VAR 0 4
50040: ARRAY
50041: NOT
50042: IFFALSE 50046
// continue ;
50044: GO 50028
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
50046: LD_VAR 0 6
50050: PUSH
50051: LD_VAR 0 7
50055: PUSH
50056: LD_VAR 0 8
50060: PUSH
50061: LD_VAR 0 9
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: PPUSH
50072: LD_EXP 84
50076: PUSH
50077: LD_VAR 0 4
50081: ARRAY
50082: PUSH
50083: LD_INT 1
50085: ARRAY
50086: PPUSH
50087: CALL 64012 0 2
50091: IFFALSE 50180
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
50093: LD_ADDR_EXP 84
50097: PUSH
50098: LD_EXP 84
50102: PPUSH
50103: LD_VAR 0 4
50107: PPUSH
50108: LD_EXP 84
50112: PUSH
50113: LD_VAR 0 4
50117: ARRAY
50118: PPUSH
50119: LD_INT 1
50121: PPUSH
50122: CALL_OW 3
50126: PPUSH
50127: CALL_OW 1
50131: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
50132: LD_ADDR_EXP 86
50136: PUSH
50137: LD_EXP 86
50141: PPUSH
50142: LD_VAR 0 4
50146: PUSH
50147: LD_EXP 86
50151: PUSH
50152: LD_VAR 0 4
50156: ARRAY
50157: PUSH
50158: LD_INT 1
50160: PLUS
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PPUSH
50166: LD_VAR 0 1
50170: PPUSH
50171: CALL 57843 0 3
50175: ST_TO_ADDR
// exit ;
50176: POP
50177: POP
50178: GO 50184
// end ; end ;
50180: GO 50028
50182: POP
50183: POP
// end ;
50184: LD_VAR 0 3
50188: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
50189: LD_INT 0
50191: PPUSH
50192: PPUSH
50193: PPUSH
// if not mc_bases or not skirmish then
50194: LD_EXP 79
50198: NOT
50199: PUSH
50200: LD_EXP 77
50204: NOT
50205: OR
50206: IFFALSE 50210
// exit ;
50208: GO 50400
// for i = 1 to mc_bases do
50210: LD_ADDR_VAR 0 4
50214: PUSH
50215: DOUBLE
50216: LD_INT 1
50218: DEC
50219: ST_TO_ADDR
50220: LD_EXP 79
50224: PUSH
50225: FOR_TO
50226: IFFALSE 50313
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
50228: LD_VAR 0 1
50232: PUSH
50233: LD_EXP 87
50237: PUSH
50238: LD_VAR 0 4
50242: ARRAY
50243: IN
50244: PUSH
50245: LD_VAR 0 1
50249: PUSH
50250: LD_EXP 88
50254: PUSH
50255: LD_VAR 0 4
50259: ARRAY
50260: IN
50261: NOT
50262: AND
50263: IFFALSE 50311
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
50265: LD_ADDR_EXP 88
50269: PUSH
50270: LD_EXP 88
50274: PPUSH
50275: LD_VAR 0 4
50279: PUSH
50280: LD_EXP 88
50284: PUSH
50285: LD_VAR 0 4
50289: ARRAY
50290: PUSH
50291: LD_INT 1
50293: PLUS
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PPUSH
50299: LD_VAR 0 1
50303: PPUSH
50304: CALL 57843 0 3
50308: ST_TO_ADDR
// break ;
50309: GO 50313
// end ; end ;
50311: GO 50225
50313: POP
50314: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
50315: LD_VAR 0 1
50319: PPUSH
50320: CALL_OW 257
50324: PUSH
50325: LD_EXP 105
50329: IN
50330: PUSH
50331: LD_VAR 0 1
50335: PPUSH
50336: CALL_OW 266
50340: PUSH
50341: LD_INT 5
50343: EQUAL
50344: AND
50345: PUSH
50346: LD_VAR 0 2
50350: PPUSH
50351: CALL_OW 110
50355: PUSH
50356: LD_INT 18
50358: NONEQUAL
50359: AND
50360: IFFALSE 50400
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
50362: LD_VAR 0 2
50366: PPUSH
50367: CALL_OW 257
50371: PUSH
50372: LD_INT 5
50374: PUSH
50375: LD_INT 8
50377: PUSH
50378: LD_INT 9
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: IN
50386: IFFALSE 50400
// SetClass ( unit , 1 ) ;
50388: LD_VAR 0 2
50392: PPUSH
50393: LD_INT 1
50395: PPUSH
50396: CALL_OW 336
// end ;
50400: LD_VAR 0 3
50404: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
50405: LD_INT 0
50407: PPUSH
50408: PPUSH
// if not mc_bases or not skirmish then
50409: LD_EXP 79
50413: NOT
50414: PUSH
50415: LD_EXP 77
50419: NOT
50420: OR
50421: IFFALSE 50425
// exit ;
50423: GO 50541
// if GetLives ( abandoned_vehicle ) > 250 then
50425: LD_VAR 0 2
50429: PPUSH
50430: CALL_OW 256
50434: PUSH
50435: LD_INT 250
50437: GREATER
50438: IFFALSE 50442
// exit ;
50440: GO 50541
// for i = 1 to mc_bases do
50442: LD_ADDR_VAR 0 6
50446: PUSH
50447: DOUBLE
50448: LD_INT 1
50450: DEC
50451: ST_TO_ADDR
50452: LD_EXP 79
50456: PUSH
50457: FOR_TO
50458: IFFALSE 50539
// begin if driver in mc_bases [ i ] then
50460: LD_VAR 0 1
50464: PUSH
50465: LD_EXP 79
50469: PUSH
50470: LD_VAR 0 6
50474: ARRAY
50475: IN
50476: IFFALSE 50537
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
50478: LD_VAR 0 1
50482: PPUSH
50483: LD_EXP 79
50487: PUSH
50488: LD_VAR 0 6
50492: ARRAY
50493: PPUSH
50494: LD_INT 2
50496: PUSH
50497: LD_INT 30
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 30
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: PPUSH
50522: CALL_OW 72
50526: PUSH
50527: LD_INT 1
50529: ARRAY
50530: PPUSH
50531: CALL_OW 112
// break ;
50535: GO 50539
// end ; end ;
50537: GO 50457
50539: POP
50540: POP
// end ; end_of_file
50541: LD_VAR 0 5
50545: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50546: LD_INT 0
50548: PPUSH
50549: PPUSH
// if exist_mode then
50550: LD_VAR 0 2
50554: IFFALSE 50579
// unit := CreateCharacter ( prefix & ident ) else
50556: LD_ADDR_VAR 0 5
50560: PUSH
50561: LD_VAR 0 3
50565: PUSH
50566: LD_VAR 0 1
50570: STR
50571: PPUSH
50572: CALL_OW 34
50576: ST_TO_ADDR
50577: GO 50594
// unit := NewCharacter ( ident ) ;
50579: LD_ADDR_VAR 0 5
50583: PUSH
50584: LD_VAR 0 1
50588: PPUSH
50589: CALL_OW 25
50593: ST_TO_ADDR
// result := unit ;
50594: LD_ADDR_VAR 0 4
50598: PUSH
50599: LD_VAR 0 5
50603: ST_TO_ADDR
// end ;
50604: LD_VAR 0 4
50608: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50609: LD_INT 0
50611: PPUSH
50612: PPUSH
// if not side or not nation then
50613: LD_VAR 0 1
50617: NOT
50618: PUSH
50619: LD_VAR 0 2
50623: NOT
50624: OR
50625: IFFALSE 50629
// exit ;
50627: GO 51333
// case nation of nation_american :
50629: LD_VAR 0 2
50633: PUSH
50634: LD_INT 1
50636: DOUBLE
50637: EQUAL
50638: IFTRUE 50642
50640: GO 50836
50642: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
50643: LD_ADDR_VAR 0 4
50647: PUSH
50648: LD_INT 35
50650: PUSH
50651: LD_INT 45
50653: PUSH
50654: LD_INT 46
50656: PUSH
50657: LD_INT 47
50659: PUSH
50660: LD_INT 82
50662: PUSH
50663: LD_INT 83
50665: PUSH
50666: LD_INT 84
50668: PUSH
50669: LD_INT 85
50671: PUSH
50672: LD_INT 86
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: LD_INT 6
50683: PUSH
50684: LD_INT 15
50686: PUSH
50687: LD_INT 16
50689: PUSH
50690: LD_INT 7
50692: PUSH
50693: LD_INT 12
50695: PUSH
50696: LD_INT 13
50698: PUSH
50699: LD_INT 10
50701: PUSH
50702: LD_INT 14
50704: PUSH
50705: LD_INT 20
50707: PUSH
50708: LD_INT 21
50710: PUSH
50711: LD_INT 22
50713: PUSH
50714: LD_INT 25
50716: PUSH
50717: LD_INT 32
50719: PUSH
50720: LD_INT 27
50722: PUSH
50723: LD_INT 36
50725: PUSH
50726: LD_INT 69
50728: PUSH
50729: LD_INT 39
50731: PUSH
50732: LD_INT 34
50734: PUSH
50735: LD_INT 40
50737: PUSH
50738: LD_INT 48
50740: PUSH
50741: LD_INT 49
50743: PUSH
50744: LD_INT 50
50746: PUSH
50747: LD_INT 51
50749: PUSH
50750: LD_INT 52
50752: PUSH
50753: LD_INT 53
50755: PUSH
50756: LD_INT 54
50758: PUSH
50759: LD_INT 55
50761: PUSH
50762: LD_INT 56
50764: PUSH
50765: LD_INT 57
50767: PUSH
50768: LD_INT 58
50770: PUSH
50771: LD_INT 59
50773: PUSH
50774: LD_INT 60
50776: PUSH
50777: LD_INT 61
50779: PUSH
50780: LD_INT 62
50782: PUSH
50783: LD_INT 80
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: ST_TO_ADDR
50834: GO 51257
50836: LD_INT 2
50838: DOUBLE
50839: EQUAL
50840: IFTRUE 50844
50842: GO 51046
50844: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
50845: LD_ADDR_VAR 0 4
50849: PUSH
50850: LD_INT 35
50852: PUSH
50853: LD_INT 45
50855: PUSH
50856: LD_INT 46
50858: PUSH
50859: LD_INT 47
50861: PUSH
50862: LD_INT 82
50864: PUSH
50865: LD_INT 83
50867: PUSH
50868: LD_INT 84
50870: PUSH
50871: LD_INT 85
50873: PUSH
50874: LD_INT 87
50876: PUSH
50877: LD_INT 70
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 11
50885: PUSH
50886: LD_INT 3
50888: PUSH
50889: LD_INT 4
50891: PUSH
50892: LD_INT 5
50894: PUSH
50895: LD_INT 6
50897: PUSH
50898: LD_INT 15
50900: PUSH
50901: LD_INT 18
50903: PUSH
50904: LD_INT 7
50906: PUSH
50907: LD_INT 17
50909: PUSH
50910: LD_INT 8
50912: PUSH
50913: LD_INT 20
50915: PUSH
50916: LD_INT 21
50918: PUSH
50919: LD_INT 22
50921: PUSH
50922: LD_INT 72
50924: PUSH
50925: LD_INT 26
50927: PUSH
50928: LD_INT 69
50930: PUSH
50931: LD_INT 39
50933: PUSH
50934: LD_INT 40
50936: PUSH
50937: LD_INT 41
50939: PUSH
50940: LD_INT 42
50942: PUSH
50943: LD_INT 43
50945: PUSH
50946: LD_INT 48
50948: PUSH
50949: LD_INT 49
50951: PUSH
50952: LD_INT 50
50954: PUSH
50955: LD_INT 51
50957: PUSH
50958: LD_INT 52
50960: PUSH
50961: LD_INT 53
50963: PUSH
50964: LD_INT 54
50966: PUSH
50967: LD_INT 55
50969: PUSH
50970: LD_INT 56
50972: PUSH
50973: LD_INT 60
50975: PUSH
50976: LD_INT 61
50978: PUSH
50979: LD_INT 62
50981: PUSH
50982: LD_INT 66
50984: PUSH
50985: LD_INT 67
50987: PUSH
50988: LD_INT 68
50990: PUSH
50991: LD_INT 81
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: ST_TO_ADDR
51044: GO 51257
51046: LD_INT 3
51048: DOUBLE
51049: EQUAL
51050: IFTRUE 51054
51052: GO 51256
51054: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
51055: LD_ADDR_VAR 0 4
51059: PUSH
51060: LD_INT 46
51062: PUSH
51063: LD_INT 47
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 82
51074: PUSH
51075: LD_INT 83
51077: PUSH
51078: LD_INT 84
51080: PUSH
51081: LD_INT 85
51083: PUSH
51084: LD_INT 86
51086: PUSH
51087: LD_INT 11
51089: PUSH
51090: LD_INT 9
51092: PUSH
51093: LD_INT 20
51095: PUSH
51096: LD_INT 19
51098: PUSH
51099: LD_INT 21
51101: PUSH
51102: LD_INT 24
51104: PUSH
51105: LD_INT 22
51107: PUSH
51108: LD_INT 25
51110: PUSH
51111: LD_INT 28
51113: PUSH
51114: LD_INT 29
51116: PUSH
51117: LD_INT 30
51119: PUSH
51120: LD_INT 31
51122: PUSH
51123: LD_INT 37
51125: PUSH
51126: LD_INT 38
51128: PUSH
51129: LD_INT 32
51131: PUSH
51132: LD_INT 27
51134: PUSH
51135: LD_INT 33
51137: PUSH
51138: LD_INT 69
51140: PUSH
51141: LD_INT 39
51143: PUSH
51144: LD_INT 34
51146: PUSH
51147: LD_INT 40
51149: PUSH
51150: LD_INT 71
51152: PUSH
51153: LD_INT 23
51155: PUSH
51156: LD_INT 44
51158: PUSH
51159: LD_INT 48
51161: PUSH
51162: LD_INT 49
51164: PUSH
51165: LD_INT 50
51167: PUSH
51168: LD_INT 51
51170: PUSH
51171: LD_INT 52
51173: PUSH
51174: LD_INT 53
51176: PUSH
51177: LD_INT 54
51179: PUSH
51180: LD_INT 55
51182: PUSH
51183: LD_INT 56
51185: PUSH
51186: LD_INT 57
51188: PUSH
51189: LD_INT 58
51191: PUSH
51192: LD_INT 59
51194: PUSH
51195: LD_INT 63
51197: PUSH
51198: LD_INT 64
51200: PUSH
51201: LD_INT 65
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: ST_TO_ADDR
51254: GO 51257
51256: POP
// if state > - 1 and state < 3 then
51257: LD_VAR 0 3
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: GREATER
51266: PUSH
51267: LD_VAR 0 3
51271: PUSH
51272: LD_INT 3
51274: LESS
51275: AND
51276: IFFALSE 51333
// for i in result do
51278: LD_ADDR_VAR 0 5
51282: PUSH
51283: LD_VAR 0 4
51287: PUSH
51288: FOR_IN
51289: IFFALSE 51331
// if GetTech ( i , side ) <> state then
51291: LD_VAR 0 5
51295: PPUSH
51296: LD_VAR 0 1
51300: PPUSH
51301: CALL_OW 321
51305: PUSH
51306: LD_VAR 0 3
51310: NONEQUAL
51311: IFFALSE 51329
// result := result diff i ;
51313: LD_ADDR_VAR 0 4
51317: PUSH
51318: LD_VAR 0 4
51322: PUSH
51323: LD_VAR 0 5
51327: DIFF
51328: ST_TO_ADDR
51329: GO 51288
51331: POP
51332: POP
// end ;
51333: LD_VAR 0 4
51337: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
51338: LD_INT 0
51340: PPUSH
51341: PPUSH
51342: PPUSH
// result := true ;
51343: LD_ADDR_VAR 0 3
51347: PUSH
51348: LD_INT 1
51350: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
51351: LD_ADDR_VAR 0 5
51355: PUSH
51356: LD_VAR 0 2
51360: PPUSH
51361: CALL_OW 480
51365: ST_TO_ADDR
// if not tmp then
51366: LD_VAR 0 5
51370: NOT
51371: IFFALSE 51375
// exit ;
51373: GO 51424
// for i in tmp do
51375: LD_ADDR_VAR 0 4
51379: PUSH
51380: LD_VAR 0 5
51384: PUSH
51385: FOR_IN
51386: IFFALSE 51422
// if GetTech ( i , side ) <> state_researched then
51388: LD_VAR 0 4
51392: PPUSH
51393: LD_VAR 0 1
51397: PPUSH
51398: CALL_OW 321
51402: PUSH
51403: LD_INT 2
51405: NONEQUAL
51406: IFFALSE 51420
// begin result := false ;
51408: LD_ADDR_VAR 0 3
51412: PUSH
51413: LD_INT 0
51415: ST_TO_ADDR
// exit ;
51416: POP
51417: POP
51418: GO 51424
// end ;
51420: GO 51385
51422: POP
51423: POP
// end ;
51424: LD_VAR 0 3
51428: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
51429: LD_INT 0
51431: PPUSH
51432: PPUSH
51433: PPUSH
51434: PPUSH
51435: PPUSH
51436: PPUSH
51437: PPUSH
51438: PPUSH
51439: PPUSH
51440: PPUSH
51441: PPUSH
51442: PPUSH
51443: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51444: LD_VAR 0 1
51448: NOT
51449: PUSH
51450: LD_VAR 0 1
51454: PPUSH
51455: CALL_OW 257
51459: PUSH
51460: LD_INT 9
51462: NONEQUAL
51463: OR
51464: IFFALSE 51468
// exit ;
51466: GO 52041
// side := GetSide ( unit ) ;
51468: LD_ADDR_VAR 0 9
51472: PUSH
51473: LD_VAR 0 1
51477: PPUSH
51478: CALL_OW 255
51482: ST_TO_ADDR
// tech_space := tech_spacanom ;
51483: LD_ADDR_VAR 0 12
51487: PUSH
51488: LD_INT 29
51490: ST_TO_ADDR
// tech_time := tech_taurad ;
51491: LD_ADDR_VAR 0 13
51495: PUSH
51496: LD_INT 28
51498: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51499: LD_ADDR_VAR 0 11
51503: PUSH
51504: LD_VAR 0 1
51508: PPUSH
51509: CALL_OW 310
51513: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51514: LD_VAR 0 11
51518: PPUSH
51519: CALL_OW 247
51523: PUSH
51524: LD_INT 2
51526: EQUAL
51527: IFFALSE 51531
// exit ;
51529: GO 52041
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51531: LD_ADDR_VAR 0 8
51535: PUSH
51536: LD_INT 81
51538: PUSH
51539: LD_VAR 0 9
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: PUSH
51551: LD_INT 21
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PPUSH
51569: CALL_OW 69
51573: ST_TO_ADDR
// if not tmp then
51574: LD_VAR 0 8
51578: NOT
51579: IFFALSE 51583
// exit ;
51581: GO 52041
// if in_unit then
51583: LD_VAR 0 11
51587: IFFALSE 51611
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51589: LD_ADDR_VAR 0 10
51593: PUSH
51594: LD_VAR 0 8
51598: PPUSH
51599: LD_VAR 0 11
51603: PPUSH
51604: CALL_OW 74
51608: ST_TO_ADDR
51609: GO 51631
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51611: LD_ADDR_VAR 0 10
51615: PUSH
51616: LD_VAR 0 8
51620: PPUSH
51621: LD_VAR 0 1
51625: PPUSH
51626: CALL_OW 74
51630: ST_TO_ADDR
// if not enemy then
51631: LD_VAR 0 10
51635: NOT
51636: IFFALSE 51640
// exit ;
51638: GO 52041
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51640: LD_VAR 0 11
51644: PUSH
51645: LD_VAR 0 11
51649: PPUSH
51650: LD_VAR 0 10
51654: PPUSH
51655: CALL_OW 296
51659: PUSH
51660: LD_INT 13
51662: GREATER
51663: AND
51664: PUSH
51665: LD_VAR 0 1
51669: PPUSH
51670: LD_VAR 0 10
51674: PPUSH
51675: CALL_OW 296
51679: PUSH
51680: LD_INT 12
51682: GREATER
51683: OR
51684: IFFALSE 51688
// exit ;
51686: GO 52041
// missile := [ 1 ] ;
51688: LD_ADDR_VAR 0 14
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51699: LD_VAR 0 9
51703: PPUSH
51704: LD_VAR 0 12
51708: PPUSH
51709: CALL_OW 325
51713: IFFALSE 51742
// missile := Insert ( missile , missile + 1 , 2 ) ;
51715: LD_ADDR_VAR 0 14
51719: PUSH
51720: LD_VAR 0 14
51724: PPUSH
51725: LD_VAR 0 14
51729: PUSH
51730: LD_INT 1
51732: PLUS
51733: PPUSH
51734: LD_INT 2
51736: PPUSH
51737: CALL_OW 2
51741: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51742: LD_VAR 0 9
51746: PPUSH
51747: LD_VAR 0 13
51751: PPUSH
51752: CALL_OW 325
51756: PUSH
51757: LD_VAR 0 10
51761: PPUSH
51762: CALL_OW 255
51766: PPUSH
51767: LD_VAR 0 13
51771: PPUSH
51772: CALL_OW 325
51776: NOT
51777: AND
51778: IFFALSE 51807
// missile := Insert ( missile , missile + 1 , 3 ) ;
51780: LD_ADDR_VAR 0 14
51784: PUSH
51785: LD_VAR 0 14
51789: PPUSH
51790: LD_VAR 0 14
51794: PUSH
51795: LD_INT 1
51797: PLUS
51798: PPUSH
51799: LD_INT 3
51801: PPUSH
51802: CALL_OW 2
51806: ST_TO_ADDR
// if missile < 2 then
51807: LD_VAR 0 14
51811: PUSH
51812: LD_INT 2
51814: LESS
51815: IFFALSE 51819
// exit ;
51817: GO 52041
// x := GetX ( enemy ) ;
51819: LD_ADDR_VAR 0 4
51823: PUSH
51824: LD_VAR 0 10
51828: PPUSH
51829: CALL_OW 250
51833: ST_TO_ADDR
// y := GetY ( enemy ) ;
51834: LD_ADDR_VAR 0 5
51838: PUSH
51839: LD_VAR 0 10
51843: PPUSH
51844: CALL_OW 251
51848: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51849: LD_ADDR_VAR 0 6
51853: PUSH
51854: LD_VAR 0 4
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PPUSH
51863: LD_INT 1
51865: PPUSH
51866: CALL_OW 12
51870: PLUS
51871: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51872: LD_ADDR_VAR 0 7
51876: PUSH
51877: LD_VAR 0 5
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PPUSH
51886: LD_INT 1
51888: PPUSH
51889: CALL_OW 12
51893: PLUS
51894: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51895: LD_VAR 0 6
51899: PPUSH
51900: LD_VAR 0 7
51904: PPUSH
51905: CALL_OW 488
51909: NOT
51910: IFFALSE 51932
// begin _x := x ;
51912: LD_ADDR_VAR 0 6
51916: PUSH
51917: LD_VAR 0 4
51921: ST_TO_ADDR
// _y := y ;
51922: LD_ADDR_VAR 0 7
51926: PUSH
51927: LD_VAR 0 5
51931: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51932: LD_ADDR_VAR 0 3
51936: PUSH
51937: LD_INT 1
51939: PPUSH
51940: LD_VAR 0 14
51944: PPUSH
51945: CALL_OW 12
51949: ST_TO_ADDR
// case i of 1 :
51950: LD_VAR 0 3
51954: PUSH
51955: LD_INT 1
51957: DOUBLE
51958: EQUAL
51959: IFTRUE 51963
51961: GO 51980
51963: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51964: LD_VAR 0 1
51968: PPUSH
51969: LD_VAR 0 10
51973: PPUSH
51974: CALL_OW 115
51978: GO 52041
51980: LD_INT 2
51982: DOUBLE
51983: EQUAL
51984: IFTRUE 51988
51986: GO 52010
51988: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51989: LD_VAR 0 1
51993: PPUSH
51994: LD_VAR 0 6
51998: PPUSH
51999: LD_VAR 0 7
52003: PPUSH
52004: CALL_OW 153
52008: GO 52041
52010: LD_INT 3
52012: DOUBLE
52013: EQUAL
52014: IFTRUE 52018
52016: GO 52040
52018: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
52019: LD_VAR 0 1
52023: PPUSH
52024: LD_VAR 0 6
52028: PPUSH
52029: LD_VAR 0 7
52033: PPUSH
52034: CALL_OW 154
52038: GO 52041
52040: POP
// end ;
52041: LD_VAR 0 2
52045: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
52046: LD_INT 0
52048: PPUSH
52049: PPUSH
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
// if not unit or not building then
52054: LD_VAR 0 1
52058: NOT
52059: PUSH
52060: LD_VAR 0 2
52064: NOT
52065: OR
52066: IFFALSE 52070
// exit ;
52068: GO 52228
// x := GetX ( building ) ;
52070: LD_ADDR_VAR 0 5
52074: PUSH
52075: LD_VAR 0 2
52079: PPUSH
52080: CALL_OW 250
52084: ST_TO_ADDR
// y := GetY ( building ) ;
52085: LD_ADDR_VAR 0 6
52089: PUSH
52090: LD_VAR 0 2
52094: PPUSH
52095: CALL_OW 251
52099: ST_TO_ADDR
// for i = 0 to 5 do
52100: LD_ADDR_VAR 0 4
52104: PUSH
52105: DOUBLE
52106: LD_INT 0
52108: DEC
52109: ST_TO_ADDR
52110: LD_INT 5
52112: PUSH
52113: FOR_TO
52114: IFFALSE 52226
// begin _x := ShiftX ( x , i , 3 ) ;
52116: LD_ADDR_VAR 0 7
52120: PUSH
52121: LD_VAR 0 5
52125: PPUSH
52126: LD_VAR 0 4
52130: PPUSH
52131: LD_INT 3
52133: PPUSH
52134: CALL_OW 272
52138: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
52139: LD_ADDR_VAR 0 8
52143: PUSH
52144: LD_VAR 0 6
52148: PPUSH
52149: LD_VAR 0 4
52153: PPUSH
52154: LD_INT 3
52156: PPUSH
52157: CALL_OW 273
52161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52162: LD_VAR 0 7
52166: PPUSH
52167: LD_VAR 0 8
52171: PPUSH
52172: CALL_OW 488
52176: NOT
52177: IFFALSE 52181
// continue ;
52179: GO 52113
// if HexInfo ( _x , _y ) = 0 then
52181: LD_VAR 0 7
52185: PPUSH
52186: LD_VAR 0 8
52190: PPUSH
52191: CALL_OW 428
52195: PUSH
52196: LD_INT 0
52198: EQUAL
52199: IFFALSE 52224
// begin ComMoveXY ( unit , _x , _y ) ;
52201: LD_VAR 0 1
52205: PPUSH
52206: LD_VAR 0 7
52210: PPUSH
52211: LD_VAR 0 8
52215: PPUSH
52216: CALL_OW 111
// exit ;
52220: POP
52221: POP
52222: GO 52228
// end ; end ;
52224: GO 52113
52226: POP
52227: POP
// end ;
52228: LD_VAR 0 3
52232: RET
// export function ScanBase ( side , base_area ) ; begin
52233: LD_INT 0
52235: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
52236: LD_ADDR_VAR 0 3
52240: PUSH
52241: LD_VAR 0 2
52245: PPUSH
52246: LD_INT 81
52248: PUSH
52249: LD_VAR 0 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PPUSH
52258: CALL_OW 70
52262: ST_TO_ADDR
// end ;
52263: LD_VAR 0 3
52267: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
52268: LD_INT 0
52270: PPUSH
52271: PPUSH
52272: PPUSH
52273: PPUSH
52274: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
52275: LD_VAR 0 1
52279: NOT
52280: PUSH
52281: LD_EXP 79
52285: PUSH
52286: LD_VAR 0 1
52290: ARRAY
52291: NOT
52292: OR
52293: PUSH
52294: LD_VAR 0 2
52298: NOT
52299: OR
52300: PUSH
52301: LD_VAR 0 3
52305: NOT
52306: OR
52307: IFFALSE 52311
// exit ;
52309: GO 52824
// side := mc_sides [ base ] ;
52311: LD_ADDR_VAR 0 6
52315: PUSH
52316: LD_EXP 105
52320: PUSH
52321: LD_VAR 0 1
52325: ARRAY
52326: ST_TO_ADDR
// if not side then
52327: LD_VAR 0 6
52331: NOT
52332: IFFALSE 52336
// exit ;
52334: GO 52824
// for i in solds do
52336: LD_ADDR_VAR 0 7
52340: PUSH
52341: LD_VAR 0 2
52345: PUSH
52346: FOR_IN
52347: IFFALSE 52408
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
52349: LD_VAR 0 7
52353: PPUSH
52354: CALL_OW 310
52358: PPUSH
52359: CALL_OW 266
52363: PUSH
52364: LD_INT 32
52366: PUSH
52367: LD_INT 31
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: IN
52374: IFFALSE 52394
// solds := solds diff i else
52376: LD_ADDR_VAR 0 2
52380: PUSH
52381: LD_VAR 0 2
52385: PUSH
52386: LD_VAR 0 7
52390: DIFF
52391: ST_TO_ADDR
52392: GO 52406
// SetTag ( i , 18 ) ;
52394: LD_VAR 0 7
52398: PPUSH
52399: LD_INT 18
52401: PPUSH
52402: CALL_OW 109
52406: GO 52346
52408: POP
52409: POP
// if not solds then
52410: LD_VAR 0 2
52414: NOT
52415: IFFALSE 52419
// exit ;
52417: GO 52824
// repeat wait ( 0 0$1 ) ;
52419: LD_INT 35
52421: PPUSH
52422: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
52426: LD_ADDR_VAR 0 5
52430: PUSH
52431: LD_VAR 0 6
52435: PPUSH
52436: LD_VAR 0 3
52440: PPUSH
52441: CALL 52233 0 2
52445: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
52446: LD_EXP 79
52450: PUSH
52451: LD_VAR 0 1
52455: ARRAY
52456: NOT
52457: PUSH
52458: LD_EXP 79
52462: PUSH
52463: LD_VAR 0 1
52467: ARRAY
52468: PUSH
52469: EMPTY
52470: EQUAL
52471: OR
52472: IFFALSE 52509
// begin for i in solds do
52474: LD_ADDR_VAR 0 7
52478: PUSH
52479: LD_VAR 0 2
52483: PUSH
52484: FOR_IN
52485: IFFALSE 52498
// ComStop ( i ) ;
52487: LD_VAR 0 7
52491: PPUSH
52492: CALL_OW 141
52496: GO 52484
52498: POP
52499: POP
// solds := [ ] ;
52500: LD_ADDR_VAR 0 2
52504: PUSH
52505: EMPTY
52506: ST_TO_ADDR
// exit ;
52507: GO 52824
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
52509: LD_VAR 0 5
52513: NOT
52514: PUSH
52515: LD_VAR 0 5
52519: PUSH
52520: LD_INT 3
52522: GREATER
52523: OR
52524: PUSH
52525: LD_EXP 101
52529: PUSH
52530: LD_VAR 0 1
52534: ARRAY
52535: OR
52536: IFFALSE 52577
// begin for i in solds do
52538: LD_ADDR_VAR 0 7
52542: PUSH
52543: LD_VAR 0 2
52547: PUSH
52548: FOR_IN
52549: IFFALSE 52573
// if HasTask ( i ) then
52551: LD_VAR 0 7
52555: PPUSH
52556: CALL_OW 314
52560: IFFALSE 52571
// ComStop ( i ) ;
52562: LD_VAR 0 7
52566: PPUSH
52567: CALL_OW 141
52571: GO 52548
52573: POP
52574: POP
// break ;
52575: GO 52812
// end ; for i in solds do
52577: LD_ADDR_VAR 0 7
52581: PUSH
52582: LD_VAR 0 2
52586: PUSH
52587: FOR_IN
52588: IFFALSE 52804
// begin if IsInUnit ( i ) then
52590: LD_VAR 0 7
52594: PPUSH
52595: CALL_OW 310
52599: IFFALSE 52610
// ComExitBuilding ( i ) ;
52601: LD_VAR 0 7
52605: PPUSH
52606: CALL_OW 122
// if GetLives ( i ) > 333 then
52610: LD_VAR 0 7
52614: PPUSH
52615: CALL_OW 256
52619: PUSH
52620: LD_INT 333
52622: GREATER
52623: IFFALSE 52651
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52625: LD_VAR 0 7
52629: PPUSH
52630: LD_VAR 0 5
52634: PPUSH
52635: LD_VAR 0 7
52639: PPUSH
52640: CALL_OW 74
52644: PPUSH
52645: CALL_OW 115
52649: GO 52802
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
52651: LD_ADDR_VAR 0 8
52655: PUSH
52656: LD_EXP 79
52660: PUSH
52661: LD_VAR 0 1
52665: ARRAY
52666: PPUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 30
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 30
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 30
52692: PUSH
52693: LD_INT 6
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: PPUSH
52706: CALL_OW 72
52710: PPUSH
52711: LD_VAR 0 7
52715: PPUSH
52716: CALL_OW 74
52720: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
52721: LD_VAR 0 7
52725: PPUSH
52726: LD_VAR 0 8
52730: PPUSH
52731: CALL_OW 250
52735: PPUSH
52736: LD_INT 3
52738: PPUSH
52739: LD_INT 5
52741: PPUSH
52742: CALL_OW 272
52746: PPUSH
52747: LD_VAR 0 8
52751: PPUSH
52752: CALL_OW 251
52756: PPUSH
52757: LD_INT 3
52759: PPUSH
52760: LD_INT 5
52762: PPUSH
52763: CALL_OW 273
52767: PPUSH
52768: CALL_OW 111
// SetTag ( i , 0 ) ;
52772: LD_VAR 0 7
52776: PPUSH
52777: LD_INT 0
52779: PPUSH
52780: CALL_OW 109
// solds := solds diff i ;
52784: LD_ADDR_VAR 0 2
52788: PUSH
52789: LD_VAR 0 2
52793: PUSH
52794: LD_VAR 0 7
52798: DIFF
52799: ST_TO_ADDR
// continue ;
52800: GO 52587
// end ; end ;
52802: GO 52587
52804: POP
52805: POP
// until solds ;
52806: LD_VAR 0 2
52810: IFFALSE 52419
// MC_Reset ( base , 18 ) ;
52812: LD_VAR 0 1
52816: PPUSH
52817: LD_INT 18
52819: PPUSH
52820: CALL 24585 0 2
// end ;
52824: LD_VAR 0 4
52828: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
52829: LD_INT 0
52831: PPUSH
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
52837: PPUSH
52838: PPUSH
52839: PPUSH
52840: PPUSH
52841: PPUSH
52842: PPUSH
52843: PPUSH
52844: PPUSH
52845: PPUSH
52846: PPUSH
52847: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
52848: LD_ADDR_VAR 0 13
52852: PUSH
52853: LD_EXP 79
52857: PUSH
52858: LD_VAR 0 1
52862: ARRAY
52863: PPUSH
52864: LD_INT 25
52866: PUSH
52867: LD_INT 3
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PPUSH
52874: CALL_OW 72
52878: ST_TO_ADDR
// if mc_remote_driver [ base ] then
52879: LD_EXP 119
52883: PUSH
52884: LD_VAR 0 1
52888: ARRAY
52889: IFFALSE 52913
// mechs := mechs diff mc_remote_driver [ base ] ;
52891: LD_ADDR_VAR 0 13
52895: PUSH
52896: LD_VAR 0 13
52900: PUSH
52901: LD_EXP 119
52905: PUSH
52906: LD_VAR 0 1
52910: ARRAY
52911: DIFF
52912: ST_TO_ADDR
// for i in mechs do
52913: LD_ADDR_VAR 0 5
52917: PUSH
52918: LD_VAR 0 13
52922: PUSH
52923: FOR_IN
52924: IFFALSE 52959
// if GetTag ( i ) > 0 then
52926: LD_VAR 0 5
52930: PPUSH
52931: CALL_OW 110
52935: PUSH
52936: LD_INT 0
52938: GREATER
52939: IFFALSE 52957
// mechs := mechs diff i ;
52941: LD_ADDR_VAR 0 13
52945: PUSH
52946: LD_VAR 0 13
52950: PUSH
52951: LD_VAR 0 5
52955: DIFF
52956: ST_TO_ADDR
52957: GO 52923
52959: POP
52960: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
52961: LD_ADDR_VAR 0 9
52965: PUSH
52966: LD_EXP 79
52970: PUSH
52971: LD_VAR 0 1
52975: ARRAY
52976: PPUSH
52977: LD_INT 2
52979: PUSH
52980: LD_INT 25
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 25
52992: PUSH
52993: LD_INT 5
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 25
53002: PUSH
53003: LD_INT 8
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 25
53012: PUSH
53013: LD_INT 9
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: PPUSH
53027: CALL_OW 72
53031: ST_TO_ADDR
// if not defenders and not solds then
53032: LD_VAR 0 2
53036: NOT
53037: PUSH
53038: LD_VAR 0 9
53042: NOT
53043: AND
53044: IFFALSE 53048
// exit ;
53046: GO 54674
// depot_under_attack := false ;
53048: LD_ADDR_VAR 0 17
53052: PUSH
53053: LD_INT 0
53055: ST_TO_ADDR
// sold_defenders := [ ] ;
53056: LD_ADDR_VAR 0 18
53060: PUSH
53061: EMPTY
53062: ST_TO_ADDR
// if mechs then
53063: LD_VAR 0 13
53067: IFFALSE 53196
// for i in defenders do
53069: LD_ADDR_VAR 0 5
53073: PUSH
53074: LD_VAR 0 2
53078: PUSH
53079: FOR_IN
53080: IFFALSE 53194
// begin SetTag ( i , 20 ) ;
53082: LD_VAR 0 5
53086: PPUSH
53087: LD_INT 20
53089: PPUSH
53090: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
53094: LD_VAR 0 5
53098: PPUSH
53099: CALL_OW 263
53103: PUSH
53104: LD_INT 1
53106: EQUAL
53107: PUSH
53108: LD_VAR 0 5
53112: PPUSH
53113: CALL_OW 311
53117: NOT
53118: AND
53119: PUSH
53120: LD_VAR 0 13
53124: AND
53125: IFFALSE 53192
// begin un := mechs [ 1 ] ;
53127: LD_ADDR_VAR 0 11
53131: PUSH
53132: LD_VAR 0 13
53136: PUSH
53137: LD_INT 1
53139: ARRAY
53140: ST_TO_ADDR
// ComExitBuilding ( un ) ;
53141: LD_VAR 0 11
53145: PPUSH
53146: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
53150: LD_VAR 0 11
53154: PPUSH
53155: LD_VAR 0 5
53159: PPUSH
53160: CALL_OW 180
// SetTag ( un , 19 ) ;
53164: LD_VAR 0 11
53168: PPUSH
53169: LD_INT 19
53171: PPUSH
53172: CALL_OW 109
// mechs := mechs diff un ;
53176: LD_ADDR_VAR 0 13
53180: PUSH
53181: LD_VAR 0 13
53185: PUSH
53186: LD_VAR 0 11
53190: DIFF
53191: ST_TO_ADDR
// end ; end ;
53192: GO 53079
53194: POP
53195: POP
// if solds then
53196: LD_VAR 0 9
53200: IFFALSE 53259
// for i in solds do
53202: LD_ADDR_VAR 0 5
53206: PUSH
53207: LD_VAR 0 9
53211: PUSH
53212: FOR_IN
53213: IFFALSE 53257
// if not GetTag ( i ) then
53215: LD_VAR 0 5
53219: PPUSH
53220: CALL_OW 110
53224: NOT
53225: IFFALSE 53255
// begin defenders := defenders union i ;
53227: LD_ADDR_VAR 0 2
53231: PUSH
53232: LD_VAR 0 2
53236: PUSH
53237: LD_VAR 0 5
53241: UNION
53242: ST_TO_ADDR
// SetTag ( i , 18 ) ;
53243: LD_VAR 0 5
53247: PPUSH
53248: LD_INT 18
53250: PPUSH
53251: CALL_OW 109
// end ;
53255: GO 53212
53257: POP
53258: POP
// repeat wait ( 0 0$1 ) ;
53259: LD_INT 35
53261: PPUSH
53262: CALL_OW 67
// enemy := mc_scan [ base ] ;
53266: LD_ADDR_VAR 0 3
53270: PUSH
53271: LD_EXP 102
53275: PUSH
53276: LD_VAR 0 1
53280: ARRAY
53281: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
53282: LD_EXP 79
53286: PUSH
53287: LD_VAR 0 1
53291: ARRAY
53292: NOT
53293: PUSH
53294: LD_EXP 79
53298: PUSH
53299: LD_VAR 0 1
53303: ARRAY
53304: PUSH
53305: EMPTY
53306: EQUAL
53307: OR
53308: IFFALSE 53345
// begin for i in defenders do
53310: LD_ADDR_VAR 0 5
53314: PUSH
53315: LD_VAR 0 2
53319: PUSH
53320: FOR_IN
53321: IFFALSE 53334
// ComStop ( i ) ;
53323: LD_VAR 0 5
53327: PPUSH
53328: CALL_OW 141
53332: GO 53320
53334: POP
53335: POP
// defenders := [ ] ;
53336: LD_ADDR_VAR 0 2
53340: PUSH
53341: EMPTY
53342: ST_TO_ADDR
// exit ;
53343: GO 54674
// end ; for i in defenders do
53345: LD_ADDR_VAR 0 5
53349: PUSH
53350: LD_VAR 0 2
53354: PUSH
53355: FOR_IN
53356: IFFALSE 54174
// begin e := NearestUnitToUnit ( enemy , i ) ;
53358: LD_ADDR_VAR 0 14
53362: PUSH
53363: LD_VAR 0 3
53367: PPUSH
53368: LD_VAR 0 5
53372: PPUSH
53373: CALL_OW 74
53377: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
53378: LD_ADDR_VAR 0 8
53382: PUSH
53383: LD_EXP 79
53387: PUSH
53388: LD_VAR 0 1
53392: ARRAY
53393: PPUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 30
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 30
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: PPUSH
53422: CALL_OW 72
53426: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
53427: LD_ADDR_VAR 0 17
53431: PUSH
53432: LD_VAR 0 8
53436: NOT
53437: PUSH
53438: LD_VAR 0 8
53442: PPUSH
53443: LD_INT 3
53445: PUSH
53446: LD_INT 24
53448: PUSH
53449: LD_INT 600
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PPUSH
53460: CALL_OW 72
53464: OR
53465: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
53466: LD_VAR 0 5
53470: PPUSH
53471: CALL_OW 247
53475: PUSH
53476: LD_INT 2
53478: DOUBLE
53479: EQUAL
53480: IFTRUE 53484
53482: GO 53880
53484: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
53485: LD_VAR 0 5
53489: PPUSH
53490: CALL_OW 256
53494: PUSH
53495: LD_INT 650
53497: GREATER
53498: PUSH
53499: LD_VAR 0 5
53503: PPUSH
53504: LD_VAR 0 14
53508: PPUSH
53509: CALL_OW 296
53513: PUSH
53514: LD_INT 40
53516: LESS
53517: PUSH
53518: LD_VAR 0 14
53522: PPUSH
53523: LD_EXP 104
53527: PUSH
53528: LD_VAR 0 1
53532: ARRAY
53533: PPUSH
53534: CALL_OW 308
53538: OR
53539: AND
53540: IFFALSE 53662
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
53542: LD_VAR 0 5
53546: PPUSH
53547: CALL_OW 262
53551: PUSH
53552: LD_INT 1
53554: EQUAL
53555: PUSH
53556: LD_VAR 0 5
53560: PPUSH
53561: CALL_OW 261
53565: PUSH
53566: LD_INT 30
53568: LESS
53569: AND
53570: PUSH
53571: LD_VAR 0 8
53575: AND
53576: IFFALSE 53646
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
53578: LD_VAR 0 5
53582: PPUSH
53583: LD_VAR 0 8
53587: PPUSH
53588: LD_VAR 0 5
53592: PPUSH
53593: CALL_OW 74
53597: PPUSH
53598: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
53602: LD_VAR 0 5
53606: PPUSH
53607: LD_VAR 0 8
53611: PPUSH
53612: LD_VAR 0 5
53616: PPUSH
53617: CALL_OW 74
53621: PPUSH
53622: CALL_OW 296
53626: PUSH
53627: LD_INT 6
53629: LESS
53630: IFFALSE 53644
// SetFuel ( i , 100 ) ;
53632: LD_VAR 0 5
53636: PPUSH
53637: LD_INT 100
53639: PPUSH
53640: CALL_OW 240
// end else
53644: GO 53660
// ComAttackUnit ( i , e ) ;
53646: LD_VAR 0 5
53650: PPUSH
53651: LD_VAR 0 14
53655: PPUSH
53656: CALL_OW 115
// end else
53660: GO 53763
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
53662: LD_VAR 0 14
53666: PPUSH
53667: LD_EXP 104
53671: PUSH
53672: LD_VAR 0 1
53676: ARRAY
53677: PPUSH
53678: CALL_OW 308
53682: NOT
53683: PUSH
53684: LD_VAR 0 5
53688: PPUSH
53689: LD_VAR 0 14
53693: PPUSH
53694: CALL_OW 296
53698: PUSH
53699: LD_INT 40
53701: GREATEREQUAL
53702: AND
53703: PUSH
53704: LD_VAR 0 5
53708: PPUSH
53709: CALL_OW 256
53713: PUSH
53714: LD_INT 650
53716: LESSEQUAL
53717: OR
53718: PUSH
53719: LD_VAR 0 5
53723: PPUSH
53724: LD_EXP 103
53728: PUSH
53729: LD_VAR 0 1
53733: ARRAY
53734: PPUSH
53735: CALL_OW 308
53739: NOT
53740: AND
53741: IFFALSE 53763
// ComMoveToArea ( i , mc_parking [ base ] ) ;
53743: LD_VAR 0 5
53747: PPUSH
53748: LD_EXP 103
53752: PUSH
53753: LD_VAR 0 1
53757: ARRAY
53758: PPUSH
53759: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
53763: LD_VAR 0 5
53767: PPUSH
53768: CALL_OW 256
53772: PUSH
53773: LD_INT 998
53775: LESS
53776: PUSH
53777: LD_VAR 0 5
53781: PPUSH
53782: CALL_OW 263
53786: PUSH
53787: LD_INT 1
53789: EQUAL
53790: AND
53791: PUSH
53792: LD_VAR 0 5
53796: PPUSH
53797: CALL_OW 311
53801: AND
53802: PUSH
53803: LD_VAR 0 5
53807: PPUSH
53808: LD_EXP 103
53812: PUSH
53813: LD_VAR 0 1
53817: ARRAY
53818: PPUSH
53819: CALL_OW 308
53823: AND
53824: IFFALSE 53878
// begin mech := IsDrivenBy ( i ) ;
53826: LD_ADDR_VAR 0 10
53830: PUSH
53831: LD_VAR 0 5
53835: PPUSH
53836: CALL_OW 311
53840: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
53841: LD_VAR 0 10
53845: PPUSH
53846: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
53850: LD_VAR 0 10
53854: PPUSH
53855: LD_VAR 0 5
53859: PPUSH
53860: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
53864: LD_VAR 0 10
53868: PPUSH
53869: LD_VAR 0 5
53873: PPUSH
53874: CALL_OW 180
// end ; end ; unit_human :
53878: GO 54145
53880: LD_INT 1
53882: DOUBLE
53883: EQUAL
53884: IFTRUE 53888
53886: GO 54144
53888: POP
// begin b := IsInUnit ( i ) ;
53889: LD_ADDR_VAR 0 19
53893: PUSH
53894: LD_VAR 0 5
53898: PPUSH
53899: CALL_OW 310
53903: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
53904: LD_ADDR_VAR 0 20
53908: PUSH
53909: LD_VAR 0 19
53913: NOT
53914: PUSH
53915: LD_VAR 0 19
53919: PPUSH
53920: CALL_OW 266
53924: PUSH
53925: LD_INT 32
53927: PUSH
53928: LD_INT 31
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: IN
53935: OR
53936: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
53937: LD_VAR 0 17
53941: PUSH
53942: LD_VAR 0 2
53946: PPUSH
53947: LD_INT 21
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PPUSH
53957: CALL_OW 72
53961: PUSH
53962: LD_INT 1
53964: LESSEQUAL
53965: OR
53966: PUSH
53967: LD_VAR 0 20
53971: AND
53972: PUSH
53973: LD_VAR 0 5
53977: PUSH
53978: LD_VAR 0 18
53982: IN
53983: NOT
53984: AND
53985: IFFALSE 54078
// begin if b then
53987: LD_VAR 0 19
53991: IFFALSE 54040
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
53993: LD_VAR 0 19
53997: PPUSH
53998: LD_VAR 0 3
54002: PPUSH
54003: LD_VAR 0 19
54007: PPUSH
54008: CALL_OW 74
54012: PPUSH
54013: CALL_OW 296
54017: PUSH
54018: LD_INT 10
54020: LESS
54021: PUSH
54022: LD_VAR 0 19
54026: PPUSH
54027: CALL_OW 461
54031: PUSH
54032: LD_INT 7
54034: NONEQUAL
54035: AND
54036: IFFALSE 54040
// continue ;
54038: GO 53355
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
54040: LD_ADDR_VAR 0 18
54044: PUSH
54045: LD_VAR 0 18
54049: PPUSH
54050: LD_VAR 0 18
54054: PUSH
54055: LD_INT 1
54057: PLUS
54058: PPUSH
54059: LD_VAR 0 5
54063: PPUSH
54064: CALL_OW 1
54068: ST_TO_ADDR
// ComExitBuilding ( i ) ;
54069: LD_VAR 0 5
54073: PPUSH
54074: CALL_OW 122
// end ; if sold_defenders then
54078: LD_VAR 0 18
54082: IFFALSE 54142
// if i in sold_defenders then
54084: LD_VAR 0 5
54088: PUSH
54089: LD_VAR 0 18
54093: IN
54094: IFFALSE 54142
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
54096: LD_VAR 0 5
54100: PPUSH
54101: CALL_OW 314
54105: NOT
54106: PUSH
54107: LD_VAR 0 5
54111: PPUSH
54112: LD_VAR 0 14
54116: PPUSH
54117: CALL_OW 296
54121: PUSH
54122: LD_INT 30
54124: LESS
54125: AND
54126: IFFALSE 54142
// ComAttackUnit ( i , e ) ;
54128: LD_VAR 0 5
54132: PPUSH
54133: LD_VAR 0 14
54137: PPUSH
54138: CALL_OW 115
// end ; end ; end ;
54142: GO 54145
54144: POP
// if IsDead ( i ) then
54145: LD_VAR 0 5
54149: PPUSH
54150: CALL_OW 301
54154: IFFALSE 54172
// defenders := defenders diff i ;
54156: LD_ADDR_VAR 0 2
54160: PUSH
54161: LD_VAR 0 2
54165: PUSH
54166: LD_VAR 0 5
54170: DIFF
54171: ST_TO_ADDR
// end ;
54172: GO 53355
54174: POP
54175: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
54176: LD_VAR 0 3
54180: NOT
54181: PUSH
54182: LD_VAR 0 2
54186: NOT
54187: OR
54188: PUSH
54189: LD_EXP 79
54193: PUSH
54194: LD_VAR 0 1
54198: ARRAY
54199: NOT
54200: OR
54201: IFFALSE 53259
// MC_Reset ( base , 18 ) ;
54203: LD_VAR 0 1
54207: PPUSH
54208: LD_INT 18
54210: PPUSH
54211: CALL 24585 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54215: LD_ADDR_VAR 0 2
54219: PUSH
54220: LD_VAR 0 2
54224: PUSH
54225: LD_VAR 0 2
54229: PPUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 25
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 25
54245: PUSH
54246: LD_INT 5
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 25
54255: PUSH
54256: LD_INT 8
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 25
54265: PUSH
54266: LD_INT 9
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: PPUSH
54280: CALL_OW 72
54284: DIFF
54285: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
54286: LD_VAR 0 3
54290: NOT
54291: PUSH
54292: LD_VAR 0 2
54296: PPUSH
54297: LD_INT 21
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PPUSH
54307: CALL_OW 72
54311: AND
54312: IFFALSE 54650
// begin tmp := FilterByTag ( defenders , 19 ) ;
54314: LD_ADDR_VAR 0 12
54318: PUSH
54319: LD_VAR 0 2
54323: PPUSH
54324: LD_INT 19
54326: PPUSH
54327: CALL 91113 0 2
54331: ST_TO_ADDR
// if tmp then
54332: LD_VAR 0 12
54336: IFFALSE 54406
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
54338: LD_ADDR_VAR 0 12
54342: PUSH
54343: LD_VAR 0 12
54347: PPUSH
54348: LD_INT 25
54350: PUSH
54351: LD_INT 3
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PPUSH
54358: CALL_OW 72
54362: ST_TO_ADDR
// if tmp then
54363: LD_VAR 0 12
54367: IFFALSE 54406
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
54369: LD_ADDR_EXP 91
54373: PUSH
54374: LD_EXP 91
54378: PPUSH
54379: LD_VAR 0 1
54383: PPUSH
54384: LD_EXP 91
54388: PUSH
54389: LD_VAR 0 1
54393: ARRAY
54394: PUSH
54395: LD_VAR 0 12
54399: UNION
54400: PPUSH
54401: CALL_OW 1
54405: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
54406: LD_VAR 0 1
54410: PPUSH
54411: LD_INT 19
54413: PPUSH
54414: CALL 24585 0 2
// repeat wait ( 0 0$1 ) ;
54418: LD_INT 35
54420: PPUSH
54421: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
54425: LD_EXP 79
54429: PUSH
54430: LD_VAR 0 1
54434: ARRAY
54435: NOT
54436: PUSH
54437: LD_EXP 79
54441: PUSH
54442: LD_VAR 0 1
54446: ARRAY
54447: PUSH
54448: EMPTY
54449: EQUAL
54450: OR
54451: IFFALSE 54488
// begin for i in defenders do
54453: LD_ADDR_VAR 0 5
54457: PUSH
54458: LD_VAR 0 2
54462: PUSH
54463: FOR_IN
54464: IFFALSE 54477
// ComStop ( i ) ;
54466: LD_VAR 0 5
54470: PPUSH
54471: CALL_OW 141
54475: GO 54463
54477: POP
54478: POP
// defenders := [ ] ;
54479: LD_ADDR_VAR 0 2
54483: PUSH
54484: EMPTY
54485: ST_TO_ADDR
// exit ;
54486: GO 54674
// end ; for i in defenders do
54488: LD_ADDR_VAR 0 5
54492: PUSH
54493: LD_VAR 0 2
54497: PUSH
54498: FOR_IN
54499: IFFALSE 54588
// begin if not IsInArea ( i , mc_parking [ base ] ) then
54501: LD_VAR 0 5
54505: PPUSH
54506: LD_EXP 103
54510: PUSH
54511: LD_VAR 0 1
54515: ARRAY
54516: PPUSH
54517: CALL_OW 308
54521: NOT
54522: IFFALSE 54546
// ComMoveToArea ( i , mc_parking [ base ] ) else
54524: LD_VAR 0 5
54528: PPUSH
54529: LD_EXP 103
54533: PUSH
54534: LD_VAR 0 1
54538: ARRAY
54539: PPUSH
54540: CALL_OW 113
54544: GO 54586
// if GetControl ( i ) = control_manual then
54546: LD_VAR 0 5
54550: PPUSH
54551: CALL_OW 263
54555: PUSH
54556: LD_INT 1
54558: EQUAL
54559: IFFALSE 54586
// if IsDrivenBy ( i ) then
54561: LD_VAR 0 5
54565: PPUSH
54566: CALL_OW 311
54570: IFFALSE 54586
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
54572: LD_VAR 0 5
54576: PPUSH
54577: CALL_OW 311
54581: PPUSH
54582: CALL_OW 121
// end ;
54586: GO 54498
54588: POP
54589: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
54590: LD_VAR 0 2
54594: PPUSH
54595: LD_INT 95
54597: PUSH
54598: LD_EXP 103
54602: PUSH
54603: LD_VAR 0 1
54607: ARRAY
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PPUSH
54613: CALL_OW 72
54617: PUSH
54618: LD_VAR 0 2
54622: EQUAL
54623: PUSH
54624: LD_EXP 102
54628: PUSH
54629: LD_VAR 0 1
54633: ARRAY
54634: OR
54635: PUSH
54636: LD_EXP 79
54640: PUSH
54641: LD_VAR 0 1
54645: ARRAY
54646: NOT
54647: OR
54648: IFFALSE 54418
// end ; MC_Reset ( base , 19 ) ;
54650: LD_VAR 0 1
54654: PPUSH
54655: LD_INT 19
54657: PPUSH
54658: CALL 24585 0 2
// MC_Reset ( base , 20 ) ;
54662: LD_VAR 0 1
54666: PPUSH
54667: LD_INT 20
54669: PPUSH
54670: CALL 24585 0 2
// end ;
54674: LD_VAR 0 4
54678: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
54679: LD_INT 0
54681: PPUSH
54682: PPUSH
54683: PPUSH
54684: PPUSH
// result := false ;
54685: LD_ADDR_VAR 0 2
54689: PUSH
54690: LD_INT 0
54692: ST_TO_ADDR
// side := GetSide ( unit ) ;
54693: LD_ADDR_VAR 0 3
54697: PUSH
54698: LD_VAR 0 1
54702: PPUSH
54703: CALL_OW 255
54707: ST_TO_ADDR
// nat := GetNation ( unit ) ;
54708: LD_ADDR_VAR 0 4
54712: PUSH
54713: LD_VAR 0 1
54717: PPUSH
54718: CALL_OW 248
54722: ST_TO_ADDR
// case nat of 1 :
54723: LD_VAR 0 4
54727: PUSH
54728: LD_INT 1
54730: DOUBLE
54731: EQUAL
54732: IFTRUE 54736
54734: GO 54747
54736: POP
// tech := tech_lassight ; 2 :
54737: LD_ADDR_VAR 0 5
54741: PUSH
54742: LD_INT 12
54744: ST_TO_ADDR
54745: GO 54786
54747: LD_INT 2
54749: DOUBLE
54750: EQUAL
54751: IFTRUE 54755
54753: GO 54766
54755: POP
// tech := tech_mortar ; 3 :
54756: LD_ADDR_VAR 0 5
54760: PUSH
54761: LD_INT 41
54763: ST_TO_ADDR
54764: GO 54786
54766: LD_INT 3
54768: DOUBLE
54769: EQUAL
54770: IFTRUE 54774
54772: GO 54785
54774: POP
// tech := tech_bazooka ; end ;
54775: LD_ADDR_VAR 0 5
54779: PUSH
54780: LD_INT 44
54782: ST_TO_ADDR
54783: GO 54786
54785: POP
// if Researched ( side , tech ) then
54786: LD_VAR 0 3
54790: PPUSH
54791: LD_VAR 0 5
54795: PPUSH
54796: CALL_OW 325
54800: IFFALSE 54827
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
54802: LD_ADDR_VAR 0 2
54806: PUSH
54807: LD_INT 5
54809: PUSH
54810: LD_INT 8
54812: PUSH
54813: LD_INT 9
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: LIST
54820: PUSH
54821: LD_VAR 0 4
54825: ARRAY
54826: ST_TO_ADDR
// end ;
54827: LD_VAR 0 2
54831: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
54832: LD_INT 0
54834: PPUSH
54835: PPUSH
54836: PPUSH
// if not mines then
54837: LD_VAR 0 2
54841: NOT
54842: IFFALSE 54846
// exit ;
54844: GO 54990
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
54846: LD_ADDR_VAR 0 5
54850: PUSH
54851: LD_INT 81
54853: PUSH
54854: LD_VAR 0 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: PUSH
54866: LD_INT 21
54868: PUSH
54869: LD_INT 3
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PPUSH
54884: CALL_OW 69
54888: ST_TO_ADDR
// for i in mines do
54889: LD_ADDR_VAR 0 4
54893: PUSH
54894: LD_VAR 0 2
54898: PUSH
54899: FOR_IN
54900: IFFALSE 54988
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
54902: LD_VAR 0 4
54906: PUSH
54907: LD_INT 1
54909: ARRAY
54910: PPUSH
54911: LD_VAR 0 4
54915: PUSH
54916: LD_INT 2
54918: ARRAY
54919: PPUSH
54920: CALL_OW 458
54924: NOT
54925: IFFALSE 54929
// continue ;
54927: GO 54899
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
54929: LD_VAR 0 4
54933: PUSH
54934: LD_INT 1
54936: ARRAY
54937: PPUSH
54938: LD_VAR 0 4
54942: PUSH
54943: LD_INT 2
54945: ARRAY
54946: PPUSH
54947: CALL_OW 428
54951: PUSH
54952: LD_VAR 0 5
54956: IN
54957: IFFALSE 54986
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
54959: LD_VAR 0 4
54963: PUSH
54964: LD_INT 1
54966: ARRAY
54967: PPUSH
54968: LD_VAR 0 4
54972: PUSH
54973: LD_INT 2
54975: ARRAY
54976: PPUSH
54977: LD_VAR 0 1
54981: PPUSH
54982: CALL_OW 456
// end ;
54986: GO 54899
54988: POP
54989: POP
// end ;
54990: LD_VAR 0 3
54994: RET
// export function Count ( array ) ; var i ; begin
54995: LD_INT 0
54997: PPUSH
54998: PPUSH
// result := 0 ;
54999: LD_ADDR_VAR 0 2
55003: PUSH
55004: LD_INT 0
55006: ST_TO_ADDR
// for i in array do
55007: LD_ADDR_VAR 0 3
55011: PUSH
55012: LD_VAR 0 1
55016: PUSH
55017: FOR_IN
55018: IFFALSE 55042
// if i then
55020: LD_VAR 0 3
55024: IFFALSE 55040
// result := result + 1 ;
55026: LD_ADDR_VAR 0 2
55030: PUSH
55031: LD_VAR 0 2
55035: PUSH
55036: LD_INT 1
55038: PLUS
55039: ST_TO_ADDR
55040: GO 55017
55042: POP
55043: POP
// end ;
55044: LD_VAR 0 2
55048: RET
// export function IsEmpty ( building ) ; begin
55049: LD_INT 0
55051: PPUSH
// if not building then
55052: LD_VAR 0 1
55056: NOT
55057: IFFALSE 55061
// exit ;
55059: GO 55104
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
55061: LD_ADDR_VAR 0 2
55065: PUSH
55066: LD_VAR 0 1
55070: PUSH
55071: LD_INT 22
55073: PUSH
55074: LD_VAR 0 1
55078: PPUSH
55079: CALL_OW 255
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 58
55090: PUSH
55091: EMPTY
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PPUSH
55098: CALL_OW 69
55102: IN
55103: ST_TO_ADDR
// end ;
55104: LD_VAR 0 2
55108: RET
// export function IsNotFull ( building ) ; begin
55109: LD_INT 0
55111: PPUSH
// if not building then
55112: LD_VAR 0 1
55116: NOT
55117: IFFALSE 55121
// exit ;
55119: GO 55140
// result := UnitsInside ( building ) < 6 ;
55121: LD_ADDR_VAR 0 2
55125: PUSH
55126: LD_VAR 0 1
55130: PPUSH
55131: CALL_OW 313
55135: PUSH
55136: LD_INT 6
55138: LESS
55139: ST_TO_ADDR
// end ;
55140: LD_VAR 0 2
55144: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
55145: LD_INT 0
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
// tmp := [ ] ;
55151: LD_ADDR_VAR 0 3
55155: PUSH
55156: EMPTY
55157: ST_TO_ADDR
// list := [ ] ;
55158: LD_ADDR_VAR 0 5
55162: PUSH
55163: EMPTY
55164: ST_TO_ADDR
// for i = 16 to 25 do
55165: LD_ADDR_VAR 0 4
55169: PUSH
55170: DOUBLE
55171: LD_INT 16
55173: DEC
55174: ST_TO_ADDR
55175: LD_INT 25
55177: PUSH
55178: FOR_TO
55179: IFFALSE 55252
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
55181: LD_ADDR_VAR 0 3
55185: PUSH
55186: LD_VAR 0 3
55190: PUSH
55191: LD_INT 22
55193: PUSH
55194: LD_VAR 0 1
55198: PPUSH
55199: CALL_OW 255
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 91
55210: PUSH
55211: LD_VAR 0 1
55215: PUSH
55216: LD_INT 6
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 30
55226: PUSH
55227: LD_VAR 0 4
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: PUSH
55241: EMPTY
55242: LIST
55243: PPUSH
55244: CALL_OW 69
55248: ADD
55249: ST_TO_ADDR
55250: GO 55178
55252: POP
55253: POP
// for i = 1 to tmp do
55254: LD_ADDR_VAR 0 4
55258: PUSH
55259: DOUBLE
55260: LD_INT 1
55262: DEC
55263: ST_TO_ADDR
55264: LD_VAR 0 3
55268: PUSH
55269: FOR_TO
55270: IFFALSE 55358
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
55272: LD_ADDR_VAR 0 5
55276: PUSH
55277: LD_VAR 0 5
55281: PUSH
55282: LD_VAR 0 3
55286: PUSH
55287: LD_VAR 0 4
55291: ARRAY
55292: PPUSH
55293: CALL_OW 266
55297: PUSH
55298: LD_VAR 0 3
55302: PUSH
55303: LD_VAR 0 4
55307: ARRAY
55308: PPUSH
55309: CALL_OW 250
55313: PUSH
55314: LD_VAR 0 3
55318: PUSH
55319: LD_VAR 0 4
55323: ARRAY
55324: PPUSH
55325: CALL_OW 251
55329: PUSH
55330: LD_VAR 0 3
55334: PUSH
55335: LD_VAR 0 4
55339: ARRAY
55340: PPUSH
55341: CALL_OW 254
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: ADD
55355: ST_TO_ADDR
55356: GO 55269
55358: POP
55359: POP
// result := list ;
55360: LD_ADDR_VAR 0 2
55364: PUSH
55365: LD_VAR 0 5
55369: ST_TO_ADDR
// end ;
55370: LD_VAR 0 2
55374: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
55375: LD_INT 0
55377: PPUSH
55378: PPUSH
55379: PPUSH
55380: PPUSH
55381: PPUSH
55382: PPUSH
55383: PPUSH
// if not factory then
55384: LD_VAR 0 1
55388: NOT
55389: IFFALSE 55393
// exit ;
55391: GO 55986
// if control = control_apeman then
55393: LD_VAR 0 4
55397: PUSH
55398: LD_INT 5
55400: EQUAL
55401: IFFALSE 55510
// begin tmp := UnitsInside ( factory ) ;
55403: LD_ADDR_VAR 0 8
55407: PUSH
55408: LD_VAR 0 1
55412: PPUSH
55413: CALL_OW 313
55417: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
55418: LD_VAR 0 8
55422: PPUSH
55423: LD_INT 25
55425: PUSH
55426: LD_INT 12
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PPUSH
55433: CALL_OW 72
55437: NOT
55438: IFFALSE 55448
// control := control_manual ;
55440: LD_ADDR_VAR 0 4
55444: PUSH
55445: LD_INT 1
55447: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
55448: LD_ADDR_VAR 0 8
55452: PUSH
55453: LD_VAR 0 1
55457: PPUSH
55458: CALL 55145 0 1
55462: ST_TO_ADDR
// if tmp then
55463: LD_VAR 0 8
55467: IFFALSE 55510
// begin for i in tmp do
55469: LD_ADDR_VAR 0 7
55473: PUSH
55474: LD_VAR 0 8
55478: PUSH
55479: FOR_IN
55480: IFFALSE 55508
// if i [ 1 ] = b_ext_radio then
55482: LD_VAR 0 7
55486: PUSH
55487: LD_INT 1
55489: ARRAY
55490: PUSH
55491: LD_INT 22
55493: EQUAL
55494: IFFALSE 55506
// begin control := control_remote ;
55496: LD_ADDR_VAR 0 4
55500: PUSH
55501: LD_INT 2
55503: ST_TO_ADDR
// break ;
55504: GO 55508
// end ;
55506: GO 55479
55508: POP
55509: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
55510: LD_VAR 0 1
55514: PPUSH
55515: LD_VAR 0 2
55519: PPUSH
55520: LD_VAR 0 3
55524: PPUSH
55525: LD_VAR 0 4
55529: PPUSH
55530: LD_VAR 0 5
55534: PPUSH
55535: CALL_OW 448
55539: IFFALSE 55574
// begin result := [ chassis , engine , control , weapon ] ;
55541: LD_ADDR_VAR 0 6
55545: PUSH
55546: LD_VAR 0 2
55550: PUSH
55551: LD_VAR 0 3
55555: PUSH
55556: LD_VAR 0 4
55560: PUSH
55561: LD_VAR 0 5
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: ST_TO_ADDR
// exit ;
55572: GO 55986
// end ; _chassis := AvailableChassisList ( factory ) ;
55574: LD_ADDR_VAR 0 9
55578: PUSH
55579: LD_VAR 0 1
55583: PPUSH
55584: CALL_OW 475
55588: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
55589: LD_ADDR_VAR 0 11
55593: PUSH
55594: LD_VAR 0 1
55598: PPUSH
55599: CALL_OW 476
55603: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
55604: LD_ADDR_VAR 0 12
55608: PUSH
55609: LD_VAR 0 1
55613: PPUSH
55614: CALL_OW 477
55618: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
55619: LD_ADDR_VAR 0 10
55623: PUSH
55624: LD_VAR 0 1
55628: PPUSH
55629: CALL_OW 478
55633: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
55634: LD_VAR 0 9
55638: NOT
55639: PUSH
55640: LD_VAR 0 11
55644: NOT
55645: OR
55646: PUSH
55647: LD_VAR 0 12
55651: NOT
55652: OR
55653: PUSH
55654: LD_VAR 0 10
55658: NOT
55659: OR
55660: IFFALSE 55695
// begin result := [ chassis , engine , control , weapon ] ;
55662: LD_ADDR_VAR 0 6
55666: PUSH
55667: LD_VAR 0 2
55671: PUSH
55672: LD_VAR 0 3
55676: PUSH
55677: LD_VAR 0 4
55681: PUSH
55682: LD_VAR 0 5
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: ST_TO_ADDR
// exit ;
55693: GO 55986
// end ; if not chassis in _chassis then
55695: LD_VAR 0 2
55699: PUSH
55700: LD_VAR 0 9
55704: IN
55705: NOT
55706: IFFALSE 55732
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
55708: LD_ADDR_VAR 0 2
55712: PUSH
55713: LD_VAR 0 9
55717: PUSH
55718: LD_INT 1
55720: PPUSH
55721: LD_VAR 0 9
55725: PPUSH
55726: CALL_OW 12
55730: ARRAY
55731: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
55732: LD_VAR 0 2
55736: PPUSH
55737: LD_VAR 0 3
55741: PPUSH
55742: CALL 55991 0 2
55746: NOT
55747: IFFALSE 55806
// repeat engine := _engine [ 1 ] ;
55749: LD_ADDR_VAR 0 3
55753: PUSH
55754: LD_VAR 0 11
55758: PUSH
55759: LD_INT 1
55761: ARRAY
55762: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
55763: LD_ADDR_VAR 0 11
55767: PUSH
55768: LD_VAR 0 11
55772: PPUSH
55773: LD_INT 1
55775: PPUSH
55776: CALL_OW 3
55780: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
55781: LD_VAR 0 2
55785: PPUSH
55786: LD_VAR 0 3
55790: PPUSH
55791: CALL 55991 0 2
55795: PUSH
55796: LD_VAR 0 11
55800: PUSH
55801: EMPTY
55802: EQUAL
55803: OR
55804: IFFALSE 55749
// if not control in _control then
55806: LD_VAR 0 4
55810: PUSH
55811: LD_VAR 0 12
55815: IN
55816: NOT
55817: IFFALSE 55843
// control := _control [ rand ( 1 , _control ) ] ;
55819: LD_ADDR_VAR 0 4
55823: PUSH
55824: LD_VAR 0 12
55828: PUSH
55829: LD_INT 1
55831: PPUSH
55832: LD_VAR 0 12
55836: PPUSH
55837: CALL_OW 12
55841: ARRAY
55842: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
55843: LD_VAR 0 2
55847: PPUSH
55848: LD_VAR 0 5
55852: PPUSH
55853: CALL 56211 0 2
55857: NOT
55858: IFFALSE 55917
// repeat weapon := _weapon [ 1 ] ;
55860: LD_ADDR_VAR 0 5
55864: PUSH
55865: LD_VAR 0 10
55869: PUSH
55870: LD_INT 1
55872: ARRAY
55873: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
55874: LD_ADDR_VAR 0 10
55878: PUSH
55879: LD_VAR 0 10
55883: PPUSH
55884: LD_INT 1
55886: PPUSH
55887: CALL_OW 3
55891: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
55892: LD_VAR 0 2
55896: PPUSH
55897: LD_VAR 0 5
55901: PPUSH
55902: CALL 56211 0 2
55906: PUSH
55907: LD_VAR 0 10
55911: PUSH
55912: EMPTY
55913: EQUAL
55914: OR
55915: IFFALSE 55860
// result := [ ] ;
55917: LD_ADDR_VAR 0 6
55921: PUSH
55922: EMPTY
55923: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
55924: LD_VAR 0 1
55928: PPUSH
55929: LD_VAR 0 2
55933: PPUSH
55934: LD_VAR 0 3
55938: PPUSH
55939: LD_VAR 0 4
55943: PPUSH
55944: LD_VAR 0 5
55948: PPUSH
55949: CALL_OW 448
55953: IFFALSE 55986
// result := [ chassis , engine , control , weapon ] ;
55955: LD_ADDR_VAR 0 6
55959: PUSH
55960: LD_VAR 0 2
55964: PUSH
55965: LD_VAR 0 3
55969: PUSH
55970: LD_VAR 0 4
55974: PUSH
55975: LD_VAR 0 5
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// end ;
55986: LD_VAR 0 6
55990: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
55991: LD_INT 0
55993: PPUSH
// if not chassis or not engine then
55994: LD_VAR 0 1
55998: NOT
55999: PUSH
56000: LD_VAR 0 2
56004: NOT
56005: OR
56006: IFFALSE 56010
// exit ;
56008: GO 56206
// case engine of engine_solar :
56010: LD_VAR 0 2
56014: PUSH
56015: LD_INT 2
56017: DOUBLE
56018: EQUAL
56019: IFTRUE 56023
56021: GO 56061
56023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
56024: LD_ADDR_VAR 0 3
56028: PUSH
56029: LD_INT 11
56031: PUSH
56032: LD_INT 12
56034: PUSH
56035: LD_INT 13
56037: PUSH
56038: LD_INT 14
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: ST_TO_ADDR
56059: GO 56190
56061: LD_INT 1
56063: DOUBLE
56064: EQUAL
56065: IFTRUE 56069
56067: GO 56131
56069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
56070: LD_ADDR_VAR 0 3
56074: PUSH
56075: LD_INT 11
56077: PUSH
56078: LD_INT 12
56080: PUSH
56081: LD_INT 13
56083: PUSH
56084: LD_INT 14
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: LD_INT 4
56098: PUSH
56099: LD_INT 5
56101: PUSH
56102: LD_INT 21
56104: PUSH
56105: LD_INT 23
56107: PUSH
56108: LD_INT 22
56110: PUSH
56111: LD_INT 24
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
56129: GO 56190
56131: LD_INT 3
56133: DOUBLE
56134: EQUAL
56135: IFTRUE 56139
56137: GO 56189
56139: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
56140: LD_ADDR_VAR 0 3
56144: PUSH
56145: LD_INT 13
56147: PUSH
56148: LD_INT 14
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: LD_INT 4
56159: PUSH
56160: LD_INT 5
56162: PUSH
56163: LD_INT 21
56165: PUSH
56166: LD_INT 22
56168: PUSH
56169: LD_INT 23
56171: PUSH
56172: LD_INT 24
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
56187: GO 56190
56189: POP
// result := ( chassis in result ) ;
56190: LD_ADDR_VAR 0 3
56194: PUSH
56195: LD_VAR 0 1
56199: PUSH
56200: LD_VAR 0 3
56204: IN
56205: ST_TO_ADDR
// end ;
56206: LD_VAR 0 3
56210: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
56211: LD_INT 0
56213: PPUSH
// if not chassis or not weapon then
56214: LD_VAR 0 1
56218: NOT
56219: PUSH
56220: LD_VAR 0 2
56224: NOT
56225: OR
56226: IFFALSE 56230
// exit ;
56228: GO 57256
// case weapon of us_machine_gun :
56230: LD_VAR 0 2
56234: PUSH
56235: LD_INT 2
56237: DOUBLE
56238: EQUAL
56239: IFTRUE 56243
56241: GO 56273
56243: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
56244: LD_ADDR_VAR 0 3
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: LD_INT 4
56260: PUSH
56261: LD_INT 5
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: ST_TO_ADDR
56271: GO 57240
56273: LD_INT 3
56275: DOUBLE
56276: EQUAL
56277: IFTRUE 56281
56279: GO 56311
56281: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
56282: LD_ADDR_VAR 0 3
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: LD_INT 3
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: LD_INT 5
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
56309: GO 57240
56311: LD_INT 11
56313: DOUBLE
56314: EQUAL
56315: IFTRUE 56319
56317: GO 56349
56319: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
56320: LD_ADDR_VAR 0 3
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: LD_INT 4
56336: PUSH
56337: LD_INT 5
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: ST_TO_ADDR
56347: GO 57240
56349: LD_INT 4
56351: DOUBLE
56352: EQUAL
56353: IFTRUE 56357
56355: GO 56383
56357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
56358: LD_ADDR_VAR 0 3
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: LD_INT 4
56371: PUSH
56372: LD_INT 5
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
56381: GO 57240
56383: LD_INT 5
56385: DOUBLE
56386: EQUAL
56387: IFTRUE 56391
56389: GO 56417
56391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
56392: LD_ADDR_VAR 0 3
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: LD_INT 4
56405: PUSH
56406: LD_INT 5
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: ST_TO_ADDR
56415: GO 57240
56417: LD_INT 9
56419: DOUBLE
56420: EQUAL
56421: IFTRUE 56425
56423: GO 56451
56425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
56426: LD_ADDR_VAR 0 3
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: LD_INT 4
56439: PUSH
56440: LD_INT 5
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: ST_TO_ADDR
56449: GO 57240
56451: LD_INT 7
56453: DOUBLE
56454: EQUAL
56455: IFTRUE 56459
56457: GO 56485
56459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
56460: LD_ADDR_VAR 0 3
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: LD_INT 4
56473: PUSH
56474: LD_INT 5
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: ST_TO_ADDR
56483: GO 57240
56485: LD_INT 12
56487: DOUBLE
56488: EQUAL
56489: IFTRUE 56493
56491: GO 56519
56493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
56494: LD_ADDR_VAR 0 3
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: LD_INT 4
56507: PUSH
56508: LD_INT 5
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: ST_TO_ADDR
56517: GO 57240
56519: LD_INT 13
56521: DOUBLE
56522: EQUAL
56523: IFTRUE 56527
56525: GO 56553
56527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
56528: LD_ADDR_VAR 0 3
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 4
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: ST_TO_ADDR
56551: GO 57240
56553: LD_INT 14
56555: DOUBLE
56556: EQUAL
56557: IFTRUE 56561
56559: GO 56579
56561: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
56562: LD_ADDR_VAR 0 3
56566: PUSH
56567: LD_INT 4
56569: PUSH
56570: LD_INT 5
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: ST_TO_ADDR
56577: GO 57240
56579: LD_INT 6
56581: DOUBLE
56582: EQUAL
56583: IFTRUE 56587
56585: GO 56605
56587: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
56588: LD_ADDR_VAR 0 3
56592: PUSH
56593: LD_INT 4
56595: PUSH
56596: LD_INT 5
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: ST_TO_ADDR
56603: GO 57240
56605: LD_INT 10
56607: DOUBLE
56608: EQUAL
56609: IFTRUE 56613
56611: GO 56631
56613: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
56614: LD_ADDR_VAR 0 3
56618: PUSH
56619: LD_INT 4
56621: PUSH
56622: LD_INT 5
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: ST_TO_ADDR
56629: GO 57240
56631: LD_INT 22
56633: DOUBLE
56634: EQUAL
56635: IFTRUE 56639
56637: GO 56665
56639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
56640: LD_ADDR_VAR 0 3
56644: PUSH
56645: LD_INT 11
56647: PUSH
56648: LD_INT 12
56650: PUSH
56651: LD_INT 13
56653: PUSH
56654: LD_INT 14
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
56663: GO 57240
56665: LD_INT 23
56667: DOUBLE
56668: EQUAL
56669: IFTRUE 56673
56671: GO 56699
56673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
56674: LD_ADDR_VAR 0 3
56678: PUSH
56679: LD_INT 11
56681: PUSH
56682: LD_INT 12
56684: PUSH
56685: LD_INT 13
56687: PUSH
56688: LD_INT 14
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
56697: GO 57240
56699: LD_INT 24
56701: DOUBLE
56702: EQUAL
56703: IFTRUE 56707
56705: GO 56733
56707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
56708: LD_ADDR_VAR 0 3
56712: PUSH
56713: LD_INT 11
56715: PUSH
56716: LD_INT 12
56718: PUSH
56719: LD_INT 13
56721: PUSH
56722: LD_INT 14
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: ST_TO_ADDR
56731: GO 57240
56733: LD_INT 30
56735: DOUBLE
56736: EQUAL
56737: IFTRUE 56741
56739: GO 56767
56741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
56742: LD_ADDR_VAR 0 3
56746: PUSH
56747: LD_INT 11
56749: PUSH
56750: LD_INT 12
56752: PUSH
56753: LD_INT 13
56755: PUSH
56756: LD_INT 14
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: ST_TO_ADDR
56765: GO 57240
56767: LD_INT 25
56769: DOUBLE
56770: EQUAL
56771: IFTRUE 56775
56773: GO 56793
56775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
56776: LD_ADDR_VAR 0 3
56780: PUSH
56781: LD_INT 13
56783: PUSH
56784: LD_INT 14
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: ST_TO_ADDR
56791: GO 57240
56793: LD_INT 27
56795: DOUBLE
56796: EQUAL
56797: IFTRUE 56801
56799: GO 56819
56801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
56802: LD_ADDR_VAR 0 3
56806: PUSH
56807: LD_INT 13
56809: PUSH
56810: LD_INT 14
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: ST_TO_ADDR
56817: GO 57240
56819: LD_INT 28
56821: DOUBLE
56822: EQUAL
56823: IFTRUE 56827
56825: GO 56845
56827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
56828: LD_ADDR_VAR 0 3
56832: PUSH
56833: LD_INT 13
56835: PUSH
56836: LD_INT 14
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: ST_TO_ADDR
56843: GO 57240
56845: LD_INT 29
56847: DOUBLE
56848: EQUAL
56849: IFTRUE 56853
56851: GO 56871
56853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
56854: LD_ADDR_VAR 0 3
56858: PUSH
56859: LD_INT 13
56861: PUSH
56862: LD_INT 14
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: ST_TO_ADDR
56869: GO 57240
56871: LD_INT 31
56873: DOUBLE
56874: EQUAL
56875: IFTRUE 56879
56877: GO 56897
56879: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
56880: LD_ADDR_VAR 0 3
56884: PUSH
56885: LD_INT 13
56887: PUSH
56888: LD_INT 14
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: ST_TO_ADDR
56895: GO 57240
56897: LD_INT 26
56899: DOUBLE
56900: EQUAL
56901: IFTRUE 56905
56903: GO 56923
56905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
56906: LD_ADDR_VAR 0 3
56910: PUSH
56911: LD_INT 13
56913: PUSH
56914: LD_INT 14
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: ST_TO_ADDR
56921: GO 57240
56923: LD_INT 42
56925: DOUBLE
56926: EQUAL
56927: IFTRUE 56931
56929: GO 56957
56931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
56932: LD_ADDR_VAR 0 3
56936: PUSH
56937: LD_INT 21
56939: PUSH
56940: LD_INT 22
56942: PUSH
56943: LD_INT 23
56945: PUSH
56946: LD_INT 24
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
56955: GO 57240
56957: LD_INT 43
56959: DOUBLE
56960: EQUAL
56961: IFTRUE 56965
56963: GO 56991
56965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
56966: LD_ADDR_VAR 0 3
56970: PUSH
56971: LD_INT 21
56973: PUSH
56974: LD_INT 22
56976: PUSH
56977: LD_INT 23
56979: PUSH
56980: LD_INT 24
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: ST_TO_ADDR
56989: GO 57240
56991: LD_INT 44
56993: DOUBLE
56994: EQUAL
56995: IFTRUE 56999
56997: GO 57025
56999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
57000: LD_ADDR_VAR 0 3
57004: PUSH
57005: LD_INT 21
57007: PUSH
57008: LD_INT 22
57010: PUSH
57011: LD_INT 23
57013: PUSH
57014: LD_INT 24
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
57023: GO 57240
57025: LD_INT 45
57027: DOUBLE
57028: EQUAL
57029: IFTRUE 57033
57031: GO 57059
57033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
57034: LD_ADDR_VAR 0 3
57038: PUSH
57039: LD_INT 21
57041: PUSH
57042: LD_INT 22
57044: PUSH
57045: LD_INT 23
57047: PUSH
57048: LD_INT 24
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: ST_TO_ADDR
57057: GO 57240
57059: LD_INT 49
57061: DOUBLE
57062: EQUAL
57063: IFTRUE 57067
57065: GO 57093
57067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
57068: LD_ADDR_VAR 0 3
57072: PUSH
57073: LD_INT 21
57075: PUSH
57076: LD_INT 22
57078: PUSH
57079: LD_INT 23
57081: PUSH
57082: LD_INT 24
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: ST_TO_ADDR
57091: GO 57240
57093: LD_INT 51
57095: DOUBLE
57096: EQUAL
57097: IFTRUE 57101
57099: GO 57127
57101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
57102: LD_ADDR_VAR 0 3
57106: PUSH
57107: LD_INT 21
57109: PUSH
57110: LD_INT 22
57112: PUSH
57113: LD_INT 23
57115: PUSH
57116: LD_INT 24
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: ST_TO_ADDR
57125: GO 57240
57127: LD_INT 52
57129: DOUBLE
57130: EQUAL
57131: IFTRUE 57135
57133: GO 57161
57135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
57136: LD_ADDR_VAR 0 3
57140: PUSH
57141: LD_INT 21
57143: PUSH
57144: LD_INT 22
57146: PUSH
57147: LD_INT 23
57149: PUSH
57150: LD_INT 24
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: ST_TO_ADDR
57159: GO 57240
57161: LD_INT 53
57163: DOUBLE
57164: EQUAL
57165: IFTRUE 57169
57167: GO 57187
57169: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
57170: LD_ADDR_VAR 0 3
57174: PUSH
57175: LD_INT 23
57177: PUSH
57178: LD_INT 24
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: ST_TO_ADDR
57185: GO 57240
57187: LD_INT 46
57189: DOUBLE
57190: EQUAL
57191: IFTRUE 57195
57193: GO 57213
57195: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
57196: LD_ADDR_VAR 0 3
57200: PUSH
57201: LD_INT 23
57203: PUSH
57204: LD_INT 24
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: ST_TO_ADDR
57211: GO 57240
57213: LD_INT 47
57215: DOUBLE
57216: EQUAL
57217: IFTRUE 57221
57219: GO 57239
57221: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
57222: LD_ADDR_VAR 0 3
57226: PUSH
57227: LD_INT 23
57229: PUSH
57230: LD_INT 24
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: ST_TO_ADDR
57237: GO 57240
57239: POP
// result := ( chassis in result ) ;
57240: LD_ADDR_VAR 0 3
57244: PUSH
57245: LD_VAR 0 1
57249: PUSH
57250: LD_VAR 0 3
57254: IN
57255: ST_TO_ADDR
// end ;
57256: LD_VAR 0 3
57260: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
57261: LD_INT 0
57263: PPUSH
57264: PPUSH
57265: PPUSH
57266: PPUSH
57267: PPUSH
57268: PPUSH
57269: PPUSH
// result := array ;
57270: LD_ADDR_VAR 0 5
57274: PUSH
57275: LD_VAR 0 1
57279: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
57280: LD_VAR 0 1
57284: NOT
57285: PUSH
57286: LD_VAR 0 2
57290: NOT
57291: OR
57292: PUSH
57293: LD_VAR 0 3
57297: NOT
57298: OR
57299: PUSH
57300: LD_VAR 0 2
57304: PUSH
57305: LD_VAR 0 1
57309: GREATER
57310: OR
57311: PUSH
57312: LD_VAR 0 3
57316: PUSH
57317: LD_VAR 0 1
57321: GREATER
57322: OR
57323: IFFALSE 57327
// exit ;
57325: GO 57623
// if direction then
57327: LD_VAR 0 4
57331: IFFALSE 57395
// begin d := 1 ;
57333: LD_ADDR_VAR 0 9
57337: PUSH
57338: LD_INT 1
57340: ST_TO_ADDR
// if i_from > i_to then
57341: LD_VAR 0 2
57345: PUSH
57346: LD_VAR 0 3
57350: GREATER
57351: IFFALSE 57377
// length := ( array - i_from ) + i_to else
57353: LD_ADDR_VAR 0 11
57357: PUSH
57358: LD_VAR 0 1
57362: PUSH
57363: LD_VAR 0 2
57367: MINUS
57368: PUSH
57369: LD_VAR 0 3
57373: PLUS
57374: ST_TO_ADDR
57375: GO 57393
// length := i_to - i_from ;
57377: LD_ADDR_VAR 0 11
57381: PUSH
57382: LD_VAR 0 3
57386: PUSH
57387: LD_VAR 0 2
57391: MINUS
57392: ST_TO_ADDR
// end else
57393: GO 57456
// begin d := - 1 ;
57395: LD_ADDR_VAR 0 9
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: ST_TO_ADDR
// if i_from > i_to then
57404: LD_VAR 0 2
57408: PUSH
57409: LD_VAR 0 3
57413: GREATER
57414: IFFALSE 57434
// length := i_from - i_to else
57416: LD_ADDR_VAR 0 11
57420: PUSH
57421: LD_VAR 0 2
57425: PUSH
57426: LD_VAR 0 3
57430: MINUS
57431: ST_TO_ADDR
57432: GO 57456
// length := ( array - i_to ) + i_from ;
57434: LD_ADDR_VAR 0 11
57438: PUSH
57439: LD_VAR 0 1
57443: PUSH
57444: LD_VAR 0 3
57448: MINUS
57449: PUSH
57450: LD_VAR 0 2
57454: PLUS
57455: ST_TO_ADDR
// end ; if not length then
57456: LD_VAR 0 11
57460: NOT
57461: IFFALSE 57465
// exit ;
57463: GO 57623
// tmp := array ;
57465: LD_ADDR_VAR 0 10
57469: PUSH
57470: LD_VAR 0 1
57474: ST_TO_ADDR
// for i = 1 to length do
57475: LD_ADDR_VAR 0 6
57479: PUSH
57480: DOUBLE
57481: LD_INT 1
57483: DEC
57484: ST_TO_ADDR
57485: LD_VAR 0 11
57489: PUSH
57490: FOR_TO
57491: IFFALSE 57611
// begin for j = 1 to array do
57493: LD_ADDR_VAR 0 7
57497: PUSH
57498: DOUBLE
57499: LD_INT 1
57501: DEC
57502: ST_TO_ADDR
57503: LD_VAR 0 1
57507: PUSH
57508: FOR_TO
57509: IFFALSE 57597
// begin k := j + d ;
57511: LD_ADDR_VAR 0 8
57515: PUSH
57516: LD_VAR 0 7
57520: PUSH
57521: LD_VAR 0 9
57525: PLUS
57526: ST_TO_ADDR
// if k > array then
57527: LD_VAR 0 8
57531: PUSH
57532: LD_VAR 0 1
57536: GREATER
57537: IFFALSE 57547
// k := 1 ;
57539: LD_ADDR_VAR 0 8
57543: PUSH
57544: LD_INT 1
57546: ST_TO_ADDR
// if not k then
57547: LD_VAR 0 8
57551: NOT
57552: IFFALSE 57564
// k := array ;
57554: LD_ADDR_VAR 0 8
57558: PUSH
57559: LD_VAR 0 1
57563: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
57564: LD_ADDR_VAR 0 10
57568: PUSH
57569: LD_VAR 0 10
57573: PPUSH
57574: LD_VAR 0 8
57578: PPUSH
57579: LD_VAR 0 1
57583: PUSH
57584: LD_VAR 0 7
57588: ARRAY
57589: PPUSH
57590: CALL_OW 1
57594: ST_TO_ADDR
// end ;
57595: GO 57508
57597: POP
57598: POP
// array := tmp ;
57599: LD_ADDR_VAR 0 1
57603: PUSH
57604: LD_VAR 0 10
57608: ST_TO_ADDR
// end ;
57609: GO 57490
57611: POP
57612: POP
// result := array ;
57613: LD_ADDR_VAR 0 5
57617: PUSH
57618: LD_VAR 0 1
57622: ST_TO_ADDR
// end ;
57623: LD_VAR 0 5
57627: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
57628: LD_INT 0
57630: PPUSH
57631: PPUSH
// result := 0 ;
57632: LD_ADDR_VAR 0 3
57636: PUSH
57637: LD_INT 0
57639: ST_TO_ADDR
// if not array or not value in array then
57640: LD_VAR 0 1
57644: NOT
57645: PUSH
57646: LD_VAR 0 2
57650: PUSH
57651: LD_VAR 0 1
57655: IN
57656: NOT
57657: OR
57658: IFFALSE 57662
// exit ;
57660: GO 57716
// for i = 1 to array do
57662: LD_ADDR_VAR 0 4
57666: PUSH
57667: DOUBLE
57668: LD_INT 1
57670: DEC
57671: ST_TO_ADDR
57672: LD_VAR 0 1
57676: PUSH
57677: FOR_TO
57678: IFFALSE 57714
// if value = array [ i ] then
57680: LD_VAR 0 2
57684: PUSH
57685: LD_VAR 0 1
57689: PUSH
57690: LD_VAR 0 4
57694: ARRAY
57695: EQUAL
57696: IFFALSE 57712
// begin result := i ;
57698: LD_ADDR_VAR 0 3
57702: PUSH
57703: LD_VAR 0 4
57707: ST_TO_ADDR
// exit ;
57708: POP
57709: POP
57710: GO 57716
// end ;
57712: GO 57677
57714: POP
57715: POP
// end ;
57716: LD_VAR 0 3
57720: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
57721: LD_INT 0
57723: PPUSH
// vc_chassis := chassis ;
57724: LD_ADDR_OWVAR 37
57728: PUSH
57729: LD_VAR 0 1
57733: ST_TO_ADDR
// vc_engine := engine ;
57734: LD_ADDR_OWVAR 39
57738: PUSH
57739: LD_VAR 0 2
57743: ST_TO_ADDR
// vc_control := control ;
57744: LD_ADDR_OWVAR 38
57748: PUSH
57749: LD_VAR 0 3
57753: ST_TO_ADDR
// vc_weapon := weapon ;
57754: LD_ADDR_OWVAR 40
57758: PUSH
57759: LD_VAR 0 4
57763: ST_TO_ADDR
// vc_fuel_battery := fuel ;
57764: LD_ADDR_OWVAR 41
57768: PUSH
57769: LD_VAR 0 5
57773: ST_TO_ADDR
// end ;
57774: LD_VAR 0 6
57778: RET
// export function WantPlant ( unit ) ; var task ; begin
57779: LD_INT 0
57781: PPUSH
57782: PPUSH
// result := false ;
57783: LD_ADDR_VAR 0 2
57787: PUSH
57788: LD_INT 0
57790: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
57791: LD_ADDR_VAR 0 3
57795: PUSH
57796: LD_VAR 0 1
57800: PPUSH
57801: CALL_OW 437
57805: ST_TO_ADDR
// if task then
57806: LD_VAR 0 3
57810: IFFALSE 57838
// if task [ 1 ] [ 1 ] = p then
57812: LD_VAR 0 3
57816: PUSH
57817: LD_INT 1
57819: ARRAY
57820: PUSH
57821: LD_INT 1
57823: ARRAY
57824: PUSH
57825: LD_STRING p
57827: EQUAL
57828: IFFALSE 57838
// result := true ;
57830: LD_ADDR_VAR 0 2
57834: PUSH
57835: LD_INT 1
57837: ST_TO_ADDR
// end ;
57838: LD_VAR 0 2
57842: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
57843: LD_INT 0
57845: PPUSH
57846: PPUSH
57847: PPUSH
57848: PPUSH
// if pos < 1 then
57849: LD_VAR 0 2
57853: PUSH
57854: LD_INT 1
57856: LESS
57857: IFFALSE 57861
// exit ;
57859: GO 58164
// if pos = 1 then
57861: LD_VAR 0 2
57865: PUSH
57866: LD_INT 1
57868: EQUAL
57869: IFFALSE 57902
// result := Replace ( arr , pos [ 1 ] , value ) else
57871: LD_ADDR_VAR 0 4
57875: PUSH
57876: LD_VAR 0 1
57880: PPUSH
57881: LD_VAR 0 2
57885: PUSH
57886: LD_INT 1
57888: ARRAY
57889: PPUSH
57890: LD_VAR 0 3
57894: PPUSH
57895: CALL_OW 1
57899: ST_TO_ADDR
57900: GO 58164
// begin tmp := arr ;
57902: LD_ADDR_VAR 0 6
57906: PUSH
57907: LD_VAR 0 1
57911: ST_TO_ADDR
// s_arr := [ tmp ] ;
57912: LD_ADDR_VAR 0 7
57916: PUSH
57917: LD_VAR 0 6
57921: PUSH
57922: EMPTY
57923: LIST
57924: ST_TO_ADDR
// for i = 1 to pos - 1 do
57925: LD_ADDR_VAR 0 5
57929: PUSH
57930: DOUBLE
57931: LD_INT 1
57933: DEC
57934: ST_TO_ADDR
57935: LD_VAR 0 2
57939: PUSH
57940: LD_INT 1
57942: MINUS
57943: PUSH
57944: FOR_TO
57945: IFFALSE 57990
// begin tmp := tmp [ pos [ i ] ] ;
57947: LD_ADDR_VAR 0 6
57951: PUSH
57952: LD_VAR 0 6
57956: PUSH
57957: LD_VAR 0 2
57961: PUSH
57962: LD_VAR 0 5
57966: ARRAY
57967: ARRAY
57968: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
57969: LD_ADDR_VAR 0 7
57973: PUSH
57974: LD_VAR 0 7
57978: PUSH
57979: LD_VAR 0 6
57983: PUSH
57984: EMPTY
57985: LIST
57986: ADD
57987: ST_TO_ADDR
// end ;
57988: GO 57944
57990: POP
57991: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
57992: LD_ADDR_VAR 0 6
57996: PUSH
57997: LD_VAR 0 6
58001: PPUSH
58002: LD_VAR 0 2
58006: PUSH
58007: LD_VAR 0 2
58011: ARRAY
58012: PPUSH
58013: LD_VAR 0 3
58017: PPUSH
58018: CALL_OW 1
58022: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
58023: LD_ADDR_VAR 0 7
58027: PUSH
58028: LD_VAR 0 7
58032: PPUSH
58033: LD_VAR 0 7
58037: PPUSH
58038: LD_VAR 0 6
58042: PPUSH
58043: CALL_OW 1
58047: ST_TO_ADDR
// for i = s_arr downto 2 do
58048: LD_ADDR_VAR 0 5
58052: PUSH
58053: DOUBLE
58054: LD_VAR 0 7
58058: INC
58059: ST_TO_ADDR
58060: LD_INT 2
58062: PUSH
58063: FOR_DOWNTO
58064: IFFALSE 58148
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
58066: LD_ADDR_VAR 0 6
58070: PUSH
58071: LD_VAR 0 7
58075: PUSH
58076: LD_VAR 0 5
58080: PUSH
58081: LD_INT 1
58083: MINUS
58084: ARRAY
58085: PPUSH
58086: LD_VAR 0 2
58090: PUSH
58091: LD_VAR 0 5
58095: PUSH
58096: LD_INT 1
58098: MINUS
58099: ARRAY
58100: PPUSH
58101: LD_VAR 0 7
58105: PUSH
58106: LD_VAR 0 5
58110: ARRAY
58111: PPUSH
58112: CALL_OW 1
58116: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
58117: LD_ADDR_VAR 0 7
58121: PUSH
58122: LD_VAR 0 7
58126: PPUSH
58127: LD_VAR 0 5
58131: PUSH
58132: LD_INT 1
58134: MINUS
58135: PPUSH
58136: LD_VAR 0 6
58140: PPUSH
58141: CALL_OW 1
58145: ST_TO_ADDR
// end ;
58146: GO 58063
58148: POP
58149: POP
// result := s_arr [ 1 ] ;
58150: LD_ADDR_VAR 0 4
58154: PUSH
58155: LD_VAR 0 7
58159: PUSH
58160: LD_INT 1
58162: ARRAY
58163: ST_TO_ADDR
// end ; end ;
58164: LD_VAR 0 4
58168: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
58169: LD_INT 0
58171: PPUSH
58172: PPUSH
// if not list then
58173: LD_VAR 0 1
58177: NOT
58178: IFFALSE 58182
// exit ;
58180: GO 58273
// i := list [ pos1 ] ;
58182: LD_ADDR_VAR 0 5
58186: PUSH
58187: LD_VAR 0 1
58191: PUSH
58192: LD_VAR 0 2
58196: ARRAY
58197: ST_TO_ADDR
// if not i then
58198: LD_VAR 0 5
58202: NOT
58203: IFFALSE 58207
// exit ;
58205: GO 58273
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
58207: LD_ADDR_VAR 0 1
58211: PUSH
58212: LD_VAR 0 1
58216: PPUSH
58217: LD_VAR 0 2
58221: PPUSH
58222: LD_VAR 0 1
58226: PUSH
58227: LD_VAR 0 3
58231: ARRAY
58232: PPUSH
58233: CALL_OW 1
58237: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
58238: LD_ADDR_VAR 0 1
58242: PUSH
58243: LD_VAR 0 1
58247: PPUSH
58248: LD_VAR 0 3
58252: PPUSH
58253: LD_VAR 0 5
58257: PPUSH
58258: CALL_OW 1
58262: ST_TO_ADDR
// result := list ;
58263: LD_ADDR_VAR 0 4
58267: PUSH
58268: LD_VAR 0 1
58272: ST_TO_ADDR
// end ;
58273: LD_VAR 0 4
58277: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
58278: LD_INT 0
58280: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
58281: LD_ADDR_VAR 0 5
58285: PUSH
58286: LD_VAR 0 1
58290: PPUSH
58291: CALL_OW 250
58295: PPUSH
58296: LD_VAR 0 1
58300: PPUSH
58301: CALL_OW 251
58305: PPUSH
58306: LD_VAR 0 2
58310: PPUSH
58311: LD_VAR 0 3
58315: PPUSH
58316: LD_VAR 0 4
58320: PPUSH
58321: CALL 58331 0 5
58325: ST_TO_ADDR
// end ;
58326: LD_VAR 0 5
58330: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
58331: LD_INT 0
58333: PPUSH
58334: PPUSH
58335: PPUSH
58336: PPUSH
// if not list then
58337: LD_VAR 0 3
58341: NOT
58342: IFFALSE 58346
// exit ;
58344: GO 58734
// result := [ ] ;
58346: LD_ADDR_VAR 0 6
58350: PUSH
58351: EMPTY
58352: ST_TO_ADDR
// for i in list do
58353: LD_ADDR_VAR 0 7
58357: PUSH
58358: LD_VAR 0 3
58362: PUSH
58363: FOR_IN
58364: IFFALSE 58566
// begin tmp := GetDistUnitXY ( i , x , y ) ;
58366: LD_ADDR_VAR 0 9
58370: PUSH
58371: LD_VAR 0 7
58375: PPUSH
58376: LD_VAR 0 1
58380: PPUSH
58381: LD_VAR 0 2
58385: PPUSH
58386: CALL_OW 297
58390: ST_TO_ADDR
// if not result then
58391: LD_VAR 0 6
58395: NOT
58396: IFFALSE 58422
// result := [ [ i , tmp ] ] else
58398: LD_ADDR_VAR 0 6
58402: PUSH
58403: LD_VAR 0 7
58407: PUSH
58408: LD_VAR 0 9
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: ST_TO_ADDR
58420: GO 58564
// begin if result [ result ] [ 2 ] < tmp then
58422: LD_VAR 0 6
58426: PUSH
58427: LD_VAR 0 6
58431: ARRAY
58432: PUSH
58433: LD_INT 2
58435: ARRAY
58436: PUSH
58437: LD_VAR 0 9
58441: LESS
58442: IFFALSE 58484
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
58444: LD_ADDR_VAR 0 6
58448: PUSH
58449: LD_VAR 0 6
58453: PPUSH
58454: LD_VAR 0 6
58458: PUSH
58459: LD_INT 1
58461: PLUS
58462: PPUSH
58463: LD_VAR 0 7
58467: PUSH
58468: LD_VAR 0 9
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PPUSH
58477: CALL_OW 2
58481: ST_TO_ADDR
58482: GO 58564
// for j = 1 to result do
58484: LD_ADDR_VAR 0 8
58488: PUSH
58489: DOUBLE
58490: LD_INT 1
58492: DEC
58493: ST_TO_ADDR
58494: LD_VAR 0 6
58498: PUSH
58499: FOR_TO
58500: IFFALSE 58562
// begin if tmp < result [ j ] [ 2 ] then
58502: LD_VAR 0 9
58506: PUSH
58507: LD_VAR 0 6
58511: PUSH
58512: LD_VAR 0 8
58516: ARRAY
58517: PUSH
58518: LD_INT 2
58520: ARRAY
58521: LESS
58522: IFFALSE 58560
// begin result := Insert ( result , j , [ i , tmp ] ) ;
58524: LD_ADDR_VAR 0 6
58528: PUSH
58529: LD_VAR 0 6
58533: PPUSH
58534: LD_VAR 0 8
58538: PPUSH
58539: LD_VAR 0 7
58543: PUSH
58544: LD_VAR 0 9
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PPUSH
58553: CALL_OW 2
58557: ST_TO_ADDR
// break ;
58558: GO 58562
// end ; end ;
58560: GO 58499
58562: POP
58563: POP
// end ; end ;
58564: GO 58363
58566: POP
58567: POP
// if result and not asc then
58568: LD_VAR 0 6
58572: PUSH
58573: LD_VAR 0 4
58577: NOT
58578: AND
58579: IFFALSE 58654
// begin tmp := result ;
58581: LD_ADDR_VAR 0 9
58585: PUSH
58586: LD_VAR 0 6
58590: ST_TO_ADDR
// for i = tmp downto 1 do
58591: LD_ADDR_VAR 0 7
58595: PUSH
58596: DOUBLE
58597: LD_VAR 0 9
58601: INC
58602: ST_TO_ADDR
58603: LD_INT 1
58605: PUSH
58606: FOR_DOWNTO
58607: IFFALSE 58652
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
58609: LD_ADDR_VAR 0 6
58613: PUSH
58614: LD_VAR 0 6
58618: PPUSH
58619: LD_VAR 0 9
58623: PUSH
58624: LD_VAR 0 7
58628: MINUS
58629: PUSH
58630: LD_INT 1
58632: PLUS
58633: PPUSH
58634: LD_VAR 0 9
58638: PUSH
58639: LD_VAR 0 7
58643: ARRAY
58644: PPUSH
58645: CALL_OW 1
58649: ST_TO_ADDR
58650: GO 58606
58652: POP
58653: POP
// end ; tmp := [ ] ;
58654: LD_ADDR_VAR 0 9
58658: PUSH
58659: EMPTY
58660: ST_TO_ADDR
// if mode then
58661: LD_VAR 0 5
58665: IFFALSE 58734
// begin for i = 1 to result do
58667: LD_ADDR_VAR 0 7
58671: PUSH
58672: DOUBLE
58673: LD_INT 1
58675: DEC
58676: ST_TO_ADDR
58677: LD_VAR 0 6
58681: PUSH
58682: FOR_TO
58683: IFFALSE 58722
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
58685: LD_ADDR_VAR 0 9
58689: PUSH
58690: LD_VAR 0 9
58694: PPUSH
58695: LD_VAR 0 7
58699: PPUSH
58700: LD_VAR 0 6
58704: PUSH
58705: LD_VAR 0 7
58709: ARRAY
58710: PUSH
58711: LD_INT 1
58713: ARRAY
58714: PPUSH
58715: CALL_OW 1
58719: ST_TO_ADDR
58720: GO 58682
58722: POP
58723: POP
// result := tmp ;
58724: LD_ADDR_VAR 0 6
58728: PUSH
58729: LD_VAR 0 9
58733: ST_TO_ADDR
// end ; end ;
58734: LD_VAR 0 6
58738: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
58739: LD_INT 0
58741: PPUSH
58742: PPUSH
58743: PPUSH
58744: PPUSH
58745: PPUSH
58746: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
58747: LD_ADDR_VAR 0 5
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: EMPTY
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// if not x or not y then
58769: LD_VAR 0 2
58773: NOT
58774: PUSH
58775: LD_VAR 0 3
58779: NOT
58780: OR
58781: IFFALSE 58785
// exit ;
58783: GO 60431
// if not range then
58785: LD_VAR 0 4
58789: NOT
58790: IFFALSE 58800
// range := 10 ;
58792: LD_ADDR_VAR 0 4
58796: PUSH
58797: LD_INT 10
58799: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
58800: LD_ADDR_VAR 0 8
58804: PUSH
58805: LD_INT 81
58807: PUSH
58808: LD_VAR 0 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 92
58819: PUSH
58820: LD_VAR 0 2
58824: PUSH
58825: LD_VAR 0 3
58829: PUSH
58830: LD_VAR 0 4
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: LD_INT 21
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: LIST
58862: PPUSH
58863: CALL_OW 69
58867: ST_TO_ADDR
// if not tmp then
58868: LD_VAR 0 8
58872: NOT
58873: IFFALSE 58877
// exit ;
58875: GO 60431
// for i in tmp do
58877: LD_ADDR_VAR 0 6
58881: PUSH
58882: LD_VAR 0 8
58886: PUSH
58887: FOR_IN
58888: IFFALSE 60406
// begin points := [ 0 , 0 , 0 ] ;
58890: LD_ADDR_VAR 0 9
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: ST_TO_ADDR
// bpoints := 1 ;
58909: LD_ADDR_VAR 0 10
58913: PUSH
58914: LD_INT 1
58916: ST_TO_ADDR
// case GetType ( i ) of unit_human :
58917: LD_VAR 0 6
58921: PPUSH
58922: CALL_OW 247
58926: PUSH
58927: LD_INT 1
58929: DOUBLE
58930: EQUAL
58931: IFTRUE 58935
58933: GO 59513
58935: POP
// begin if GetClass ( i ) = 1 then
58936: LD_VAR 0 6
58940: PPUSH
58941: CALL_OW 257
58945: PUSH
58946: LD_INT 1
58948: EQUAL
58949: IFFALSE 58970
// points := [ 10 , 5 , 3 ] ;
58951: LD_ADDR_VAR 0 9
58955: PUSH
58956: LD_INT 10
58958: PUSH
58959: LD_INT 5
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
58970: LD_VAR 0 6
58974: PPUSH
58975: CALL_OW 257
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 3
58985: PUSH
58986: LD_INT 4
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: LIST
58993: IN
58994: IFFALSE 59015
// points := [ 3 , 2 , 1 ] ;
58996: LD_ADDR_VAR 0 9
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// if GetClass ( i ) = 5 then
59015: LD_VAR 0 6
59019: PPUSH
59020: CALL_OW 257
59024: PUSH
59025: LD_INT 5
59027: EQUAL
59028: IFFALSE 59049
// points := [ 130 , 5 , 2 ] ;
59030: LD_ADDR_VAR 0 9
59034: PUSH
59035: LD_INT 130
59037: PUSH
59038: LD_INT 5
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// if GetClass ( i ) = 8 then
59049: LD_VAR 0 6
59053: PPUSH
59054: CALL_OW 257
59058: PUSH
59059: LD_INT 8
59061: EQUAL
59062: IFFALSE 59083
// points := [ 35 , 35 , 30 ] ;
59064: LD_ADDR_VAR 0 9
59068: PUSH
59069: LD_INT 35
59071: PUSH
59072: LD_INT 35
59074: PUSH
59075: LD_INT 30
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: LIST
59082: ST_TO_ADDR
// if GetClass ( i ) = 9 then
59083: LD_VAR 0 6
59087: PPUSH
59088: CALL_OW 257
59092: PUSH
59093: LD_INT 9
59095: EQUAL
59096: IFFALSE 59117
// points := [ 20 , 55 , 40 ] ;
59098: LD_ADDR_VAR 0 9
59102: PUSH
59103: LD_INT 20
59105: PUSH
59106: LD_INT 55
59108: PUSH
59109: LD_INT 40
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
59117: LD_VAR 0 6
59121: PPUSH
59122: CALL_OW 257
59126: PUSH
59127: LD_INT 12
59129: PUSH
59130: LD_INT 16
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: IN
59137: IFFALSE 59158
// points := [ 5 , 3 , 2 ] ;
59139: LD_ADDR_VAR 0 9
59143: PUSH
59144: LD_INT 5
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// if GetClass ( i ) = 17 then
59158: LD_VAR 0 6
59162: PPUSH
59163: CALL_OW 257
59167: PUSH
59168: LD_INT 17
59170: EQUAL
59171: IFFALSE 59192
// points := [ 100 , 50 , 75 ] ;
59173: LD_ADDR_VAR 0 9
59177: PUSH
59178: LD_INT 100
59180: PUSH
59181: LD_INT 50
59183: PUSH
59184: LD_INT 75
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: ST_TO_ADDR
// if GetClass ( i ) = 15 then
59192: LD_VAR 0 6
59196: PPUSH
59197: CALL_OW 257
59201: PUSH
59202: LD_INT 15
59204: EQUAL
59205: IFFALSE 59226
// points := [ 10 , 5 , 3 ] ;
59207: LD_ADDR_VAR 0 9
59211: PUSH
59212: LD_INT 10
59214: PUSH
59215: LD_INT 5
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: LIST
59225: ST_TO_ADDR
// if GetClass ( i ) = 14 then
59226: LD_VAR 0 6
59230: PPUSH
59231: CALL_OW 257
59235: PUSH
59236: LD_INT 14
59238: EQUAL
59239: IFFALSE 59260
// points := [ 10 , 0 , 0 ] ;
59241: LD_ADDR_VAR 0 9
59245: PUSH
59246: LD_INT 10
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: LIST
59259: ST_TO_ADDR
// if GetClass ( i ) = 11 then
59260: LD_VAR 0 6
59264: PPUSH
59265: CALL_OW 257
59269: PUSH
59270: LD_INT 11
59272: EQUAL
59273: IFFALSE 59294
// points := [ 30 , 10 , 5 ] ;
59275: LD_ADDR_VAR 0 9
59279: PUSH
59280: LD_INT 30
59282: PUSH
59283: LD_INT 10
59285: PUSH
59286: LD_INT 5
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: LIST
59293: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
59294: LD_VAR 0 1
59298: PPUSH
59299: LD_INT 5
59301: PPUSH
59302: CALL_OW 321
59306: PUSH
59307: LD_INT 2
59309: EQUAL
59310: IFFALSE 59327
// bpoints := bpoints * 1.8 ;
59312: LD_ADDR_VAR 0 10
59316: PUSH
59317: LD_VAR 0 10
59321: PUSH
59322: LD_REAL  1.80000000000000E+0000
59325: MUL
59326: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
59327: LD_VAR 0 6
59331: PPUSH
59332: CALL_OW 257
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: LD_INT 4
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: IN
59355: PUSH
59356: LD_VAR 0 1
59360: PPUSH
59361: LD_INT 51
59363: PPUSH
59364: CALL_OW 321
59368: PUSH
59369: LD_INT 2
59371: EQUAL
59372: AND
59373: IFFALSE 59390
// bpoints := bpoints * 1.2 ;
59375: LD_ADDR_VAR 0 10
59379: PUSH
59380: LD_VAR 0 10
59384: PUSH
59385: LD_REAL  1.20000000000000E+0000
59388: MUL
59389: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
59390: LD_VAR 0 6
59394: PPUSH
59395: CALL_OW 257
59399: PUSH
59400: LD_INT 5
59402: PUSH
59403: LD_INT 7
59405: PUSH
59406: LD_INT 9
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: IN
59414: PUSH
59415: LD_VAR 0 1
59419: PPUSH
59420: LD_INT 52
59422: PPUSH
59423: CALL_OW 321
59427: PUSH
59428: LD_INT 2
59430: EQUAL
59431: AND
59432: IFFALSE 59449
// bpoints := bpoints * 1.5 ;
59434: LD_ADDR_VAR 0 10
59438: PUSH
59439: LD_VAR 0 10
59443: PUSH
59444: LD_REAL  1.50000000000000E+0000
59447: MUL
59448: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
59449: LD_VAR 0 1
59453: PPUSH
59454: LD_INT 66
59456: PPUSH
59457: CALL_OW 321
59461: PUSH
59462: LD_INT 2
59464: EQUAL
59465: IFFALSE 59482
// bpoints := bpoints * 1.1 ;
59467: LD_ADDR_VAR 0 10
59471: PUSH
59472: LD_VAR 0 10
59476: PUSH
59477: LD_REAL  1.10000000000000E+0000
59480: MUL
59481: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
59482: LD_ADDR_VAR 0 10
59486: PUSH
59487: LD_VAR 0 10
59491: PUSH
59492: LD_VAR 0 6
59496: PPUSH
59497: LD_INT 1
59499: PPUSH
59500: CALL_OW 259
59504: PUSH
59505: LD_REAL  1.15000000000000E+0000
59508: MUL
59509: MUL
59510: ST_TO_ADDR
// end ; unit_vehicle :
59511: GO 60335
59513: LD_INT 2
59515: DOUBLE
59516: EQUAL
59517: IFTRUE 59521
59519: GO 60323
59521: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
59522: LD_VAR 0 6
59526: PPUSH
59527: CALL_OW 264
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: LD_INT 42
59537: PUSH
59538: LD_INT 24
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: LIST
59545: IN
59546: IFFALSE 59567
// points := [ 25 , 5 , 3 ] ;
59548: LD_ADDR_VAR 0 9
59552: PUSH
59553: LD_INT 25
59555: PUSH
59556: LD_INT 5
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
59567: LD_VAR 0 6
59571: PPUSH
59572: CALL_OW 264
59576: PUSH
59577: LD_INT 4
59579: PUSH
59580: LD_INT 43
59582: PUSH
59583: LD_INT 25
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: IN
59591: IFFALSE 59612
// points := [ 40 , 15 , 5 ] ;
59593: LD_ADDR_VAR 0 9
59597: PUSH
59598: LD_INT 40
59600: PUSH
59601: LD_INT 15
59603: PUSH
59604: LD_INT 5
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: LIST
59611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
59612: LD_VAR 0 6
59616: PPUSH
59617: CALL_OW 264
59621: PUSH
59622: LD_INT 3
59624: PUSH
59625: LD_INT 23
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: IN
59632: IFFALSE 59653
// points := [ 7 , 25 , 8 ] ;
59634: LD_ADDR_VAR 0 9
59638: PUSH
59639: LD_INT 7
59641: PUSH
59642: LD_INT 25
59644: PUSH
59645: LD_INT 8
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: LIST
59652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
59653: LD_VAR 0 6
59657: PPUSH
59658: CALL_OW 264
59662: PUSH
59663: LD_INT 5
59665: PUSH
59666: LD_INT 27
59668: PUSH
59669: LD_INT 44
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: LIST
59676: IN
59677: IFFALSE 59698
// points := [ 14 , 50 , 16 ] ;
59679: LD_ADDR_VAR 0 9
59683: PUSH
59684: LD_INT 14
59686: PUSH
59687: LD_INT 50
59689: PUSH
59690: LD_INT 16
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
59698: LD_VAR 0 6
59702: PPUSH
59703: CALL_OW 264
59707: PUSH
59708: LD_INT 6
59710: PUSH
59711: LD_INT 46
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: IN
59718: IFFALSE 59739
// points := [ 32 , 120 , 70 ] ;
59720: LD_ADDR_VAR 0 9
59724: PUSH
59725: LD_INT 32
59727: PUSH
59728: LD_INT 120
59730: PUSH
59731: LD_INT 70
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: LIST
59738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
59739: LD_VAR 0 6
59743: PPUSH
59744: CALL_OW 264
59748: PUSH
59749: LD_INT 7
59751: PUSH
59752: LD_INT 28
59754: PUSH
59755: LD_INT 45
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: IN
59763: IFFALSE 59784
// points := [ 35 , 20 , 45 ] ;
59765: LD_ADDR_VAR 0 9
59769: PUSH
59770: LD_INT 35
59772: PUSH
59773: LD_INT 20
59775: PUSH
59776: LD_INT 45
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
59784: LD_VAR 0 6
59788: PPUSH
59789: CALL_OW 264
59793: PUSH
59794: LD_INT 47
59796: PUSH
59797: EMPTY
59798: LIST
59799: IN
59800: IFFALSE 59821
// points := [ 67 , 45 , 75 ] ;
59802: LD_ADDR_VAR 0 9
59806: PUSH
59807: LD_INT 67
59809: PUSH
59810: LD_INT 45
59812: PUSH
59813: LD_INT 75
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: LIST
59820: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
59821: LD_VAR 0 6
59825: PPUSH
59826: CALL_OW 264
59830: PUSH
59831: LD_INT 26
59833: PUSH
59834: EMPTY
59835: LIST
59836: IN
59837: IFFALSE 59858
// points := [ 120 , 30 , 80 ] ;
59839: LD_ADDR_VAR 0 9
59843: PUSH
59844: LD_INT 120
59846: PUSH
59847: LD_INT 30
59849: PUSH
59850: LD_INT 80
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
59858: LD_VAR 0 6
59862: PPUSH
59863: CALL_OW 264
59867: PUSH
59868: LD_INT 22
59870: PUSH
59871: EMPTY
59872: LIST
59873: IN
59874: IFFALSE 59895
// points := [ 40 , 1 , 1 ] ;
59876: LD_ADDR_VAR 0 9
59880: PUSH
59881: LD_INT 40
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
59895: LD_VAR 0 6
59899: PPUSH
59900: CALL_OW 264
59904: PUSH
59905: LD_INT 29
59907: PUSH
59908: EMPTY
59909: LIST
59910: IN
59911: IFFALSE 59932
// points := [ 70 , 200 , 400 ] ;
59913: LD_ADDR_VAR 0 9
59917: PUSH
59918: LD_INT 70
59920: PUSH
59921: LD_INT 200
59923: PUSH
59924: LD_INT 400
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: LIST
59931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
59932: LD_VAR 0 6
59936: PPUSH
59937: CALL_OW 264
59941: PUSH
59942: LD_INT 14
59944: PUSH
59945: LD_INT 53
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: IN
59952: IFFALSE 59973
// points := [ 40 , 10 , 20 ] ;
59954: LD_ADDR_VAR 0 9
59958: PUSH
59959: LD_INT 40
59961: PUSH
59962: LD_INT 10
59964: PUSH
59965: LD_INT 20
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: LIST
59972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
59973: LD_VAR 0 6
59977: PPUSH
59978: CALL_OW 264
59982: PUSH
59983: LD_INT 9
59985: PUSH
59986: EMPTY
59987: LIST
59988: IN
59989: IFFALSE 60010
// points := [ 5 , 70 , 20 ] ;
59991: LD_ADDR_VAR 0 9
59995: PUSH
59996: LD_INT 5
59998: PUSH
59999: LD_INT 70
60001: PUSH
60002: LD_INT 20
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
60010: LD_VAR 0 6
60014: PPUSH
60015: CALL_OW 264
60019: PUSH
60020: LD_INT 10
60022: PUSH
60023: EMPTY
60024: LIST
60025: IN
60026: IFFALSE 60047
// points := [ 35 , 110 , 70 ] ;
60028: LD_ADDR_VAR 0 9
60032: PUSH
60033: LD_INT 35
60035: PUSH
60036: LD_INT 110
60038: PUSH
60039: LD_INT 70
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
60047: LD_VAR 0 6
60051: PPUSH
60052: CALL_OW 265
60056: PUSH
60057: LD_INT 25
60059: EQUAL
60060: IFFALSE 60081
// points := [ 80 , 65 , 100 ] ;
60062: LD_ADDR_VAR 0 9
60066: PUSH
60067: LD_INT 80
60069: PUSH
60070: LD_INT 65
60072: PUSH
60073: LD_INT 100
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
60081: LD_VAR 0 6
60085: PPUSH
60086: CALL_OW 263
60090: PUSH
60091: LD_INT 1
60093: EQUAL
60094: IFFALSE 60129
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
60096: LD_ADDR_VAR 0 10
60100: PUSH
60101: LD_VAR 0 10
60105: PUSH
60106: LD_VAR 0 6
60110: PPUSH
60111: CALL_OW 311
60115: PPUSH
60116: LD_INT 3
60118: PPUSH
60119: CALL_OW 259
60123: PUSH
60124: LD_INT 4
60126: MUL
60127: MUL
60128: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
60129: LD_VAR 0 6
60133: PPUSH
60134: CALL_OW 263
60138: PUSH
60139: LD_INT 2
60141: EQUAL
60142: IFFALSE 60193
// begin j := IsControledBy ( i ) ;
60144: LD_ADDR_VAR 0 7
60148: PUSH
60149: LD_VAR 0 6
60153: PPUSH
60154: CALL_OW 312
60158: ST_TO_ADDR
// if j then
60159: LD_VAR 0 7
60163: IFFALSE 60193
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
60165: LD_ADDR_VAR 0 10
60169: PUSH
60170: LD_VAR 0 10
60174: PUSH
60175: LD_VAR 0 7
60179: PPUSH
60180: LD_INT 3
60182: PPUSH
60183: CALL_OW 259
60187: PUSH
60188: LD_INT 3
60190: MUL
60191: MUL
60192: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
60193: LD_VAR 0 6
60197: PPUSH
60198: CALL_OW 264
60202: PUSH
60203: LD_INT 5
60205: PUSH
60206: LD_INT 6
60208: PUSH
60209: LD_INT 46
60211: PUSH
60212: LD_INT 44
60214: PUSH
60215: LD_INT 47
60217: PUSH
60218: LD_INT 45
60220: PUSH
60221: LD_INT 28
60223: PUSH
60224: LD_INT 7
60226: PUSH
60227: LD_INT 27
60229: PUSH
60230: LD_INT 29
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: IN
60245: PUSH
60246: LD_VAR 0 1
60250: PPUSH
60251: LD_INT 52
60253: PPUSH
60254: CALL_OW 321
60258: PUSH
60259: LD_INT 2
60261: EQUAL
60262: AND
60263: IFFALSE 60280
// bpoints := bpoints * 1.2 ;
60265: LD_ADDR_VAR 0 10
60269: PUSH
60270: LD_VAR 0 10
60274: PUSH
60275: LD_REAL  1.20000000000000E+0000
60278: MUL
60279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
60280: LD_VAR 0 6
60284: PPUSH
60285: CALL_OW 264
60289: PUSH
60290: LD_INT 6
60292: PUSH
60293: LD_INT 46
60295: PUSH
60296: LD_INT 47
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: IN
60304: IFFALSE 60321
// bpoints := bpoints * 1.2 ;
60306: LD_ADDR_VAR 0 10
60310: PUSH
60311: LD_VAR 0 10
60315: PUSH
60316: LD_REAL  1.20000000000000E+0000
60319: MUL
60320: ST_TO_ADDR
// end ; unit_building :
60321: GO 60335
60323: LD_INT 3
60325: DOUBLE
60326: EQUAL
60327: IFTRUE 60331
60329: GO 60334
60331: POP
// ; end ;
60332: GO 60335
60334: POP
// for j = 1 to 3 do
60335: LD_ADDR_VAR 0 7
60339: PUSH
60340: DOUBLE
60341: LD_INT 1
60343: DEC
60344: ST_TO_ADDR
60345: LD_INT 3
60347: PUSH
60348: FOR_TO
60349: IFFALSE 60402
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
60351: LD_ADDR_VAR 0 5
60355: PUSH
60356: LD_VAR 0 5
60360: PPUSH
60361: LD_VAR 0 7
60365: PPUSH
60366: LD_VAR 0 5
60370: PUSH
60371: LD_VAR 0 7
60375: ARRAY
60376: PUSH
60377: LD_VAR 0 9
60381: PUSH
60382: LD_VAR 0 7
60386: ARRAY
60387: PUSH
60388: LD_VAR 0 10
60392: MUL
60393: PLUS
60394: PPUSH
60395: CALL_OW 1
60399: ST_TO_ADDR
60400: GO 60348
60402: POP
60403: POP
// end ;
60404: GO 58887
60406: POP
60407: POP
// result := Replace ( result , 4 , tmp ) ;
60408: LD_ADDR_VAR 0 5
60412: PUSH
60413: LD_VAR 0 5
60417: PPUSH
60418: LD_INT 4
60420: PPUSH
60421: LD_VAR 0 8
60425: PPUSH
60426: CALL_OW 1
60430: ST_TO_ADDR
// end ;
60431: LD_VAR 0 5
60435: RET
// export function DangerAtRange ( unit , range ) ; begin
60436: LD_INT 0
60438: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
60439: LD_ADDR_VAR 0 3
60443: PUSH
60444: LD_VAR 0 1
60448: PPUSH
60449: CALL_OW 255
60453: PPUSH
60454: LD_VAR 0 1
60458: PPUSH
60459: CALL_OW 250
60463: PPUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: CALL_OW 251
60473: PPUSH
60474: LD_VAR 0 2
60478: PPUSH
60479: CALL 58739 0 4
60483: ST_TO_ADDR
// end ;
60484: LD_VAR 0 3
60488: RET
// export function DangerInArea ( side , area ) ; begin
60489: LD_INT 0
60491: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
60492: LD_ADDR_VAR 0 3
60496: PUSH
60497: LD_VAR 0 2
60501: PPUSH
60502: LD_INT 81
60504: PUSH
60505: LD_VAR 0 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PPUSH
60514: CALL_OW 70
60518: ST_TO_ADDR
// end ;
60519: LD_VAR 0 3
60523: RET
// export function IsExtension ( b ) ; begin
60524: LD_INT 0
60526: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
60527: LD_ADDR_VAR 0 2
60531: PUSH
60532: LD_VAR 0 1
60536: PUSH
60537: LD_INT 23
60539: PUSH
60540: LD_INT 20
60542: PUSH
60543: LD_INT 22
60545: PUSH
60546: LD_INT 17
60548: PUSH
60549: LD_INT 24
60551: PUSH
60552: LD_INT 21
60554: PUSH
60555: LD_INT 19
60557: PUSH
60558: LD_INT 16
60560: PUSH
60561: LD_INT 25
60563: PUSH
60564: LD_INT 18
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: IN
60579: ST_TO_ADDR
// end ;
60580: LD_VAR 0 2
60584: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
60585: LD_INT 0
60587: PPUSH
60588: PPUSH
60589: PPUSH
// result := [ ] ;
60590: LD_ADDR_VAR 0 3
60594: PUSH
60595: EMPTY
60596: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
60597: LD_ADDR_VAR 0 4
60601: PUSH
60602: LD_VAR 0 2
60606: PPUSH
60607: LD_INT 21
60609: PUSH
60610: LD_INT 3
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PPUSH
60617: CALL_OW 70
60621: ST_TO_ADDR
// if not tmp then
60622: LD_VAR 0 4
60626: NOT
60627: IFFALSE 60631
// exit ;
60629: GO 60689
// for i in tmp do
60631: LD_ADDR_VAR 0 5
60635: PUSH
60636: LD_VAR 0 4
60640: PUSH
60641: FOR_IN
60642: IFFALSE 60677
// if GetBase ( i ) <> base then
60644: LD_VAR 0 5
60648: PPUSH
60649: CALL_OW 274
60653: PUSH
60654: LD_VAR 0 1
60658: NONEQUAL
60659: IFFALSE 60675
// ComLinkToBase ( base , i ) ;
60661: LD_VAR 0 1
60665: PPUSH
60666: LD_VAR 0 5
60670: PPUSH
60671: CALL_OW 169
60675: GO 60641
60677: POP
60678: POP
// result := tmp ;
60679: LD_ADDR_VAR 0 3
60683: PUSH
60684: LD_VAR 0 4
60688: ST_TO_ADDR
// end ;
60689: LD_VAR 0 3
60693: RET
// export function ComComplete ( unit , b ) ; var i ; begin
60694: LD_INT 0
60696: PPUSH
60697: PPUSH
// if BuildingStatus ( b ) = bs_build then
60698: LD_VAR 0 2
60702: PPUSH
60703: CALL_OW 461
60707: PUSH
60708: LD_INT 1
60710: EQUAL
60711: IFFALSE 60771
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
60713: LD_VAR 0 1
60717: PPUSH
60718: LD_STRING h
60720: PUSH
60721: LD_VAR 0 2
60725: PPUSH
60726: CALL_OW 250
60730: PUSH
60731: LD_VAR 0 2
60735: PPUSH
60736: CALL_OW 251
60740: PUSH
60741: LD_VAR 0 2
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: PUSH
60764: EMPTY
60765: LIST
60766: PPUSH
60767: CALL_OW 446
// end ;
60771: LD_VAR 0 3
60775: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
60776: LD_INT 0
60778: PPUSH
60779: PPUSH
60780: PPUSH
60781: PPUSH
60782: PPUSH
60783: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
60784: LD_VAR 0 1
60788: NOT
60789: PUSH
60790: LD_VAR 0 1
60794: PPUSH
60795: CALL_OW 263
60799: PUSH
60800: LD_INT 2
60802: EQUAL
60803: NOT
60804: OR
60805: IFFALSE 60809
// exit ;
60807: GO 61125
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
60809: LD_ADDR_VAR 0 6
60813: PUSH
60814: LD_INT 22
60816: PUSH
60817: LD_VAR 0 1
60821: PPUSH
60822: CALL_OW 255
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 30
60836: PUSH
60837: LD_INT 36
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 34
60846: PUSH
60847: LD_INT 31
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PPUSH
60863: CALL_OW 69
60867: ST_TO_ADDR
// if not tmp then
60868: LD_VAR 0 6
60872: NOT
60873: IFFALSE 60877
// exit ;
60875: GO 61125
// result := [ ] ;
60877: LD_ADDR_VAR 0 2
60881: PUSH
60882: EMPTY
60883: ST_TO_ADDR
// for i in tmp do
60884: LD_ADDR_VAR 0 3
60888: PUSH
60889: LD_VAR 0 6
60893: PUSH
60894: FOR_IN
60895: IFFALSE 60966
// begin t := UnitsInside ( i ) ;
60897: LD_ADDR_VAR 0 4
60901: PUSH
60902: LD_VAR 0 3
60906: PPUSH
60907: CALL_OW 313
60911: ST_TO_ADDR
// if t then
60912: LD_VAR 0 4
60916: IFFALSE 60964
// for j in t do
60918: LD_ADDR_VAR 0 7
60922: PUSH
60923: LD_VAR 0 4
60927: PUSH
60928: FOR_IN
60929: IFFALSE 60962
// result := Insert ( result , result + 1 , j ) ;
60931: LD_ADDR_VAR 0 2
60935: PUSH
60936: LD_VAR 0 2
60940: PPUSH
60941: LD_VAR 0 2
60945: PUSH
60946: LD_INT 1
60948: PLUS
60949: PPUSH
60950: LD_VAR 0 7
60954: PPUSH
60955: CALL_OW 2
60959: ST_TO_ADDR
60960: GO 60928
60962: POP
60963: POP
// end ;
60964: GO 60894
60966: POP
60967: POP
// if not result then
60968: LD_VAR 0 2
60972: NOT
60973: IFFALSE 60977
// exit ;
60975: GO 61125
// mech := result [ 1 ] ;
60977: LD_ADDR_VAR 0 5
60981: PUSH
60982: LD_VAR 0 2
60986: PUSH
60987: LD_INT 1
60989: ARRAY
60990: ST_TO_ADDR
// if result > 1 then
60991: LD_VAR 0 2
60995: PUSH
60996: LD_INT 1
60998: GREATER
60999: IFFALSE 61111
// for i = 2 to result do
61001: LD_ADDR_VAR 0 3
61005: PUSH
61006: DOUBLE
61007: LD_INT 2
61009: DEC
61010: ST_TO_ADDR
61011: LD_VAR 0 2
61015: PUSH
61016: FOR_TO
61017: IFFALSE 61109
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
61019: LD_ADDR_VAR 0 4
61023: PUSH
61024: LD_VAR 0 2
61028: PUSH
61029: LD_VAR 0 3
61033: ARRAY
61034: PPUSH
61035: LD_INT 3
61037: PPUSH
61038: CALL_OW 259
61042: PUSH
61043: LD_VAR 0 2
61047: PUSH
61048: LD_VAR 0 3
61052: ARRAY
61053: PPUSH
61054: CALL_OW 432
61058: MINUS
61059: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
61060: LD_VAR 0 4
61064: PUSH
61065: LD_VAR 0 5
61069: PPUSH
61070: LD_INT 3
61072: PPUSH
61073: CALL_OW 259
61077: PUSH
61078: LD_VAR 0 5
61082: PPUSH
61083: CALL_OW 432
61087: MINUS
61088: GREATEREQUAL
61089: IFFALSE 61107
// mech := result [ i ] ;
61091: LD_ADDR_VAR 0 5
61095: PUSH
61096: LD_VAR 0 2
61100: PUSH
61101: LD_VAR 0 3
61105: ARRAY
61106: ST_TO_ADDR
// end ;
61107: GO 61016
61109: POP
61110: POP
// ComLinkTo ( vehicle , mech ) ;
61111: LD_VAR 0 1
61115: PPUSH
61116: LD_VAR 0 5
61120: PPUSH
61121: CALL_OW 135
// end ;
61125: LD_VAR 0 2
61129: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
61130: LD_INT 0
61132: PPUSH
61133: PPUSH
61134: PPUSH
61135: PPUSH
61136: PPUSH
61137: PPUSH
61138: PPUSH
61139: PPUSH
61140: PPUSH
61141: PPUSH
61142: PPUSH
61143: PPUSH
61144: PPUSH
// result := [ ] ;
61145: LD_ADDR_VAR 0 7
61149: PUSH
61150: EMPTY
61151: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
61152: LD_VAR 0 1
61156: PPUSH
61157: CALL_OW 266
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: IN
61172: NOT
61173: IFFALSE 61177
// exit ;
61175: GO 62808
// if name then
61177: LD_VAR 0 3
61181: IFFALSE 61197
// SetBName ( base_dep , name ) ;
61183: LD_VAR 0 1
61187: PPUSH
61188: LD_VAR 0 3
61192: PPUSH
61193: CALL_OW 500
// base := GetBase ( base_dep ) ;
61197: LD_ADDR_VAR 0 15
61201: PUSH
61202: LD_VAR 0 1
61206: PPUSH
61207: CALL_OW 274
61211: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
61212: LD_ADDR_VAR 0 16
61216: PUSH
61217: LD_VAR 0 1
61221: PPUSH
61222: CALL_OW 255
61226: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
61227: LD_ADDR_VAR 0 17
61231: PUSH
61232: LD_VAR 0 1
61236: PPUSH
61237: CALL_OW 248
61241: ST_TO_ADDR
// if sources then
61242: LD_VAR 0 5
61246: IFFALSE 61293
// for i = 1 to 3 do
61248: LD_ADDR_VAR 0 8
61252: PUSH
61253: DOUBLE
61254: LD_INT 1
61256: DEC
61257: ST_TO_ADDR
61258: LD_INT 3
61260: PUSH
61261: FOR_TO
61262: IFFALSE 61291
// AddResourceType ( base , i , sources [ i ] ) ;
61264: LD_VAR 0 15
61268: PPUSH
61269: LD_VAR 0 8
61273: PPUSH
61274: LD_VAR 0 5
61278: PUSH
61279: LD_VAR 0 8
61283: ARRAY
61284: PPUSH
61285: CALL_OW 276
61289: GO 61261
61291: POP
61292: POP
// buildings := GetBaseBuildings ( base , area ) ;
61293: LD_ADDR_VAR 0 18
61297: PUSH
61298: LD_VAR 0 15
61302: PPUSH
61303: LD_VAR 0 2
61307: PPUSH
61308: CALL 60585 0 2
61312: ST_TO_ADDR
// InitHc ;
61313: CALL_OW 19
// InitUc ;
61317: CALL_OW 18
// uc_side := side ;
61321: LD_ADDR_OWVAR 20
61325: PUSH
61326: LD_VAR 0 16
61330: ST_TO_ADDR
// uc_nation := nation ;
61331: LD_ADDR_OWVAR 21
61335: PUSH
61336: LD_VAR 0 17
61340: ST_TO_ADDR
// if buildings then
61341: LD_VAR 0 18
61345: IFFALSE 62667
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
61347: LD_ADDR_VAR 0 19
61351: PUSH
61352: LD_VAR 0 18
61356: PPUSH
61357: LD_INT 2
61359: PUSH
61360: LD_INT 30
61362: PUSH
61363: LD_INT 29
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 30
61372: PUSH
61373: LD_INT 30
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: PPUSH
61385: CALL_OW 72
61389: ST_TO_ADDR
// if tmp then
61390: LD_VAR 0 19
61394: IFFALSE 61442
// for i in tmp do
61396: LD_ADDR_VAR 0 8
61400: PUSH
61401: LD_VAR 0 19
61405: PUSH
61406: FOR_IN
61407: IFFALSE 61440
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
61409: LD_VAR 0 8
61413: PPUSH
61414: CALL_OW 250
61418: PPUSH
61419: LD_VAR 0 8
61423: PPUSH
61424: CALL_OW 251
61428: PPUSH
61429: LD_VAR 0 16
61433: PPUSH
61434: CALL_OW 441
61438: GO 61406
61440: POP
61441: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
61442: LD_VAR 0 18
61446: PPUSH
61447: LD_INT 2
61449: PUSH
61450: LD_INT 30
61452: PUSH
61453: LD_INT 32
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 30
61462: PUSH
61463: LD_INT 33
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: LIST
61474: PPUSH
61475: CALL_OW 72
61479: IFFALSE 61567
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
61481: LD_ADDR_VAR 0 8
61485: PUSH
61486: LD_VAR 0 18
61490: PPUSH
61491: LD_INT 2
61493: PUSH
61494: LD_INT 30
61496: PUSH
61497: LD_INT 32
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 30
61506: PUSH
61507: LD_INT 33
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: LIST
61518: PPUSH
61519: CALL_OW 72
61523: PUSH
61524: FOR_IN
61525: IFFALSE 61565
// begin if not GetBWeapon ( i ) then
61527: LD_VAR 0 8
61531: PPUSH
61532: CALL_OW 269
61536: NOT
61537: IFFALSE 61563
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
61539: LD_VAR 0 8
61543: PPUSH
61544: LD_VAR 0 8
61548: PPUSH
61549: LD_VAR 0 2
61553: PPUSH
61554: CALL 62813 0 2
61558: PPUSH
61559: CALL_OW 431
// end ;
61563: GO 61524
61565: POP
61566: POP
// end ; for i = 1 to personel do
61567: LD_ADDR_VAR 0 8
61571: PUSH
61572: DOUBLE
61573: LD_INT 1
61575: DEC
61576: ST_TO_ADDR
61577: LD_VAR 0 6
61581: PUSH
61582: FOR_TO
61583: IFFALSE 62647
// begin if i > 4 then
61585: LD_VAR 0 8
61589: PUSH
61590: LD_INT 4
61592: GREATER
61593: IFFALSE 61597
// break ;
61595: GO 62647
// case i of 1 :
61597: LD_VAR 0 8
61601: PUSH
61602: LD_INT 1
61604: DOUBLE
61605: EQUAL
61606: IFTRUE 61610
61608: GO 61690
61610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
61611: LD_ADDR_VAR 0 12
61615: PUSH
61616: LD_VAR 0 18
61620: PPUSH
61621: LD_INT 22
61623: PUSH
61624: LD_VAR 0 16
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 58
61635: PUSH
61636: EMPTY
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: LD_INT 30
61644: PUSH
61645: LD_INT 32
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 30
61654: PUSH
61655: LD_INT 4
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 30
61664: PUSH
61665: LD_INT 5
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: LIST
61682: PPUSH
61683: CALL_OW 72
61687: ST_TO_ADDR
61688: GO 61912
61690: LD_INT 2
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61698
61696: GO 61760
61698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
61699: LD_ADDR_VAR 0 12
61703: PUSH
61704: LD_VAR 0 18
61708: PPUSH
61709: LD_INT 22
61711: PUSH
61712: LD_VAR 0 16
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: LD_INT 30
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 30
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PPUSH
61753: CALL_OW 72
61757: ST_TO_ADDR
61758: GO 61912
61760: LD_INT 3
61762: DOUBLE
61763: EQUAL
61764: IFTRUE 61768
61766: GO 61830
61768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
61769: LD_ADDR_VAR 0 12
61773: PUSH
61774: LD_VAR 0 18
61778: PPUSH
61779: LD_INT 22
61781: PUSH
61782: LD_VAR 0 16
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: LD_INT 30
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 30
61806: PUSH
61807: LD_INT 3
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PPUSH
61823: CALL_OW 72
61827: ST_TO_ADDR
61828: GO 61912
61830: LD_INT 4
61832: DOUBLE
61833: EQUAL
61834: IFTRUE 61838
61836: GO 61911
61838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
61839: LD_ADDR_VAR 0 12
61843: PUSH
61844: LD_VAR 0 18
61848: PPUSH
61849: LD_INT 22
61851: PUSH
61852: LD_VAR 0 16
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: PUSH
61864: LD_INT 30
61866: PUSH
61867: LD_INT 6
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 30
61876: PUSH
61877: LD_INT 7
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 30
61886: PUSH
61887: LD_INT 8
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PPUSH
61904: CALL_OW 72
61908: ST_TO_ADDR
61909: GO 61912
61911: POP
// if i = 1 then
61912: LD_VAR 0 8
61916: PUSH
61917: LD_INT 1
61919: EQUAL
61920: IFFALSE 62031
// begin tmp := [ ] ;
61922: LD_ADDR_VAR 0 19
61926: PUSH
61927: EMPTY
61928: ST_TO_ADDR
// for j in f do
61929: LD_ADDR_VAR 0 9
61933: PUSH
61934: LD_VAR 0 12
61938: PUSH
61939: FOR_IN
61940: IFFALSE 62013
// if GetBType ( j ) = b_bunker then
61942: LD_VAR 0 9
61946: PPUSH
61947: CALL_OW 266
61951: PUSH
61952: LD_INT 32
61954: EQUAL
61955: IFFALSE 61982
// tmp := Insert ( tmp , 1 , j ) else
61957: LD_ADDR_VAR 0 19
61961: PUSH
61962: LD_VAR 0 19
61966: PPUSH
61967: LD_INT 1
61969: PPUSH
61970: LD_VAR 0 9
61974: PPUSH
61975: CALL_OW 2
61979: ST_TO_ADDR
61980: GO 62011
// tmp := Insert ( tmp , tmp + 1 , j ) ;
61982: LD_ADDR_VAR 0 19
61986: PUSH
61987: LD_VAR 0 19
61991: PPUSH
61992: LD_VAR 0 19
61996: PUSH
61997: LD_INT 1
61999: PLUS
62000: PPUSH
62001: LD_VAR 0 9
62005: PPUSH
62006: CALL_OW 2
62010: ST_TO_ADDR
62011: GO 61939
62013: POP
62014: POP
// if tmp then
62015: LD_VAR 0 19
62019: IFFALSE 62031
// f := tmp ;
62021: LD_ADDR_VAR 0 12
62025: PUSH
62026: LD_VAR 0 19
62030: ST_TO_ADDR
// end ; x := personel [ i ] ;
62031: LD_ADDR_VAR 0 13
62035: PUSH
62036: LD_VAR 0 6
62040: PUSH
62041: LD_VAR 0 8
62045: ARRAY
62046: ST_TO_ADDR
// if x = - 1 then
62047: LD_VAR 0 13
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: EQUAL
62056: IFFALSE 62265
// begin for j in f do
62058: LD_ADDR_VAR 0 9
62062: PUSH
62063: LD_VAR 0 12
62067: PUSH
62068: FOR_IN
62069: IFFALSE 62261
// repeat InitHc ;
62071: CALL_OW 19
// if GetBType ( j ) = b_barracks then
62075: LD_VAR 0 9
62079: PPUSH
62080: CALL_OW 266
62084: PUSH
62085: LD_INT 5
62087: EQUAL
62088: IFFALSE 62158
// begin if UnitsInside ( j ) < 3 then
62090: LD_VAR 0 9
62094: PPUSH
62095: CALL_OW 313
62099: PUSH
62100: LD_INT 3
62102: LESS
62103: IFFALSE 62139
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
62105: LD_INT 0
62107: PPUSH
62108: LD_INT 5
62110: PUSH
62111: LD_INT 8
62113: PUSH
62114: LD_INT 9
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: LIST
62121: PUSH
62122: LD_VAR 0 17
62126: ARRAY
62127: PPUSH
62128: LD_VAR 0 4
62132: PPUSH
62133: CALL_OW 380
62137: GO 62156
// PrepareHuman ( false , i , skill ) ;
62139: LD_INT 0
62141: PPUSH
62142: LD_VAR 0 8
62146: PPUSH
62147: LD_VAR 0 4
62151: PPUSH
62152: CALL_OW 380
// end else
62156: GO 62175
// PrepareHuman ( false , i , skill ) ;
62158: LD_INT 0
62160: PPUSH
62161: LD_VAR 0 8
62165: PPUSH
62166: LD_VAR 0 4
62170: PPUSH
62171: CALL_OW 380
// un := CreateHuman ;
62175: LD_ADDR_VAR 0 14
62179: PUSH
62180: CALL_OW 44
62184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
62185: LD_ADDR_VAR 0 7
62189: PUSH
62190: LD_VAR 0 7
62194: PPUSH
62195: LD_INT 1
62197: PPUSH
62198: LD_VAR 0 14
62202: PPUSH
62203: CALL_OW 2
62207: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
62208: LD_VAR 0 14
62212: PPUSH
62213: LD_VAR 0 9
62217: PPUSH
62218: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
62222: LD_VAR 0 9
62226: PPUSH
62227: CALL_OW 313
62231: PUSH
62232: LD_INT 6
62234: EQUAL
62235: PUSH
62236: LD_VAR 0 9
62240: PPUSH
62241: CALL_OW 266
62245: PUSH
62246: LD_INT 32
62248: PUSH
62249: LD_INT 31
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: IN
62256: OR
62257: IFFALSE 62071
62259: GO 62068
62261: POP
62262: POP
// end else
62263: GO 62645
// for j = 1 to x do
62265: LD_ADDR_VAR 0 9
62269: PUSH
62270: DOUBLE
62271: LD_INT 1
62273: DEC
62274: ST_TO_ADDR
62275: LD_VAR 0 13
62279: PUSH
62280: FOR_TO
62281: IFFALSE 62643
// begin InitHc ;
62283: CALL_OW 19
// if not f then
62287: LD_VAR 0 12
62291: NOT
62292: IFFALSE 62381
// begin PrepareHuman ( false , i , skill ) ;
62294: LD_INT 0
62296: PPUSH
62297: LD_VAR 0 8
62301: PPUSH
62302: LD_VAR 0 4
62306: PPUSH
62307: CALL_OW 380
// un := CreateHuman ;
62311: LD_ADDR_VAR 0 14
62315: PUSH
62316: CALL_OW 44
62320: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
62321: LD_ADDR_VAR 0 7
62325: PUSH
62326: LD_VAR 0 7
62330: PPUSH
62331: LD_INT 1
62333: PPUSH
62334: LD_VAR 0 14
62338: PPUSH
62339: CALL_OW 2
62343: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
62344: LD_VAR 0 14
62348: PPUSH
62349: LD_VAR 0 1
62353: PPUSH
62354: CALL_OW 250
62358: PPUSH
62359: LD_VAR 0 1
62363: PPUSH
62364: CALL_OW 251
62368: PPUSH
62369: LD_INT 10
62371: PPUSH
62372: LD_INT 0
62374: PPUSH
62375: CALL_OW 50
// continue ;
62379: GO 62280
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
62381: LD_VAR 0 12
62385: PUSH
62386: LD_INT 1
62388: ARRAY
62389: PPUSH
62390: CALL_OW 313
62394: PUSH
62395: LD_VAR 0 12
62399: PUSH
62400: LD_INT 1
62402: ARRAY
62403: PPUSH
62404: CALL_OW 266
62408: PUSH
62409: LD_INT 32
62411: PUSH
62412: LD_INT 31
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: IN
62419: AND
62420: PUSH
62421: LD_VAR 0 12
62425: PUSH
62426: LD_INT 1
62428: ARRAY
62429: PPUSH
62430: CALL_OW 313
62434: PUSH
62435: LD_INT 6
62437: EQUAL
62438: OR
62439: IFFALSE 62459
// f := Delete ( f , 1 ) ;
62441: LD_ADDR_VAR 0 12
62445: PUSH
62446: LD_VAR 0 12
62450: PPUSH
62451: LD_INT 1
62453: PPUSH
62454: CALL_OW 3
62458: ST_TO_ADDR
// if not f then
62459: LD_VAR 0 12
62463: NOT
62464: IFFALSE 62482
// begin x := x + 2 ;
62466: LD_ADDR_VAR 0 13
62470: PUSH
62471: LD_VAR 0 13
62475: PUSH
62476: LD_INT 2
62478: PLUS
62479: ST_TO_ADDR
// continue ;
62480: GO 62280
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
62482: LD_VAR 0 12
62486: PUSH
62487: LD_INT 1
62489: ARRAY
62490: PPUSH
62491: CALL_OW 266
62495: PUSH
62496: LD_INT 5
62498: EQUAL
62499: IFFALSE 62573
// begin if UnitsInside ( f [ 1 ] ) < 3 then
62501: LD_VAR 0 12
62505: PUSH
62506: LD_INT 1
62508: ARRAY
62509: PPUSH
62510: CALL_OW 313
62514: PUSH
62515: LD_INT 3
62517: LESS
62518: IFFALSE 62554
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
62520: LD_INT 0
62522: PPUSH
62523: LD_INT 5
62525: PUSH
62526: LD_INT 8
62528: PUSH
62529: LD_INT 9
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: PUSH
62537: LD_VAR 0 17
62541: ARRAY
62542: PPUSH
62543: LD_VAR 0 4
62547: PPUSH
62548: CALL_OW 380
62552: GO 62571
// PrepareHuman ( false , i , skill ) ;
62554: LD_INT 0
62556: PPUSH
62557: LD_VAR 0 8
62561: PPUSH
62562: LD_VAR 0 4
62566: PPUSH
62567: CALL_OW 380
// end else
62571: GO 62590
// PrepareHuman ( false , i , skill ) ;
62573: LD_INT 0
62575: PPUSH
62576: LD_VAR 0 8
62580: PPUSH
62581: LD_VAR 0 4
62585: PPUSH
62586: CALL_OW 380
// un := CreateHuman ;
62590: LD_ADDR_VAR 0 14
62594: PUSH
62595: CALL_OW 44
62599: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
62600: LD_ADDR_VAR 0 7
62604: PUSH
62605: LD_VAR 0 7
62609: PPUSH
62610: LD_INT 1
62612: PPUSH
62613: LD_VAR 0 14
62617: PPUSH
62618: CALL_OW 2
62622: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
62623: LD_VAR 0 14
62627: PPUSH
62628: LD_VAR 0 12
62632: PUSH
62633: LD_INT 1
62635: ARRAY
62636: PPUSH
62637: CALL_OW 52
// end ;
62641: GO 62280
62643: POP
62644: POP
// end ;
62645: GO 61582
62647: POP
62648: POP
// result := result ^ buildings ;
62649: LD_ADDR_VAR 0 7
62653: PUSH
62654: LD_VAR 0 7
62658: PUSH
62659: LD_VAR 0 18
62663: ADD
62664: ST_TO_ADDR
// end else
62665: GO 62808
// begin for i = 1 to personel do
62667: LD_ADDR_VAR 0 8
62671: PUSH
62672: DOUBLE
62673: LD_INT 1
62675: DEC
62676: ST_TO_ADDR
62677: LD_VAR 0 6
62681: PUSH
62682: FOR_TO
62683: IFFALSE 62806
// begin if i > 4 then
62685: LD_VAR 0 8
62689: PUSH
62690: LD_INT 4
62692: GREATER
62693: IFFALSE 62697
// break ;
62695: GO 62806
// x := personel [ i ] ;
62697: LD_ADDR_VAR 0 13
62701: PUSH
62702: LD_VAR 0 6
62706: PUSH
62707: LD_VAR 0 8
62711: ARRAY
62712: ST_TO_ADDR
// if x = - 1 then
62713: LD_VAR 0 13
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: EQUAL
62722: IFFALSE 62726
// continue ;
62724: GO 62682
// PrepareHuman ( false , i , skill ) ;
62726: LD_INT 0
62728: PPUSH
62729: LD_VAR 0 8
62733: PPUSH
62734: LD_VAR 0 4
62738: PPUSH
62739: CALL_OW 380
// un := CreateHuman ;
62743: LD_ADDR_VAR 0 14
62747: PUSH
62748: CALL_OW 44
62752: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
62753: LD_VAR 0 14
62757: PPUSH
62758: LD_VAR 0 1
62762: PPUSH
62763: CALL_OW 250
62767: PPUSH
62768: LD_VAR 0 1
62772: PPUSH
62773: CALL_OW 251
62777: PPUSH
62778: LD_INT 10
62780: PPUSH
62781: LD_INT 0
62783: PPUSH
62784: CALL_OW 50
// result := result ^ un ;
62788: LD_ADDR_VAR 0 7
62792: PUSH
62793: LD_VAR 0 7
62797: PUSH
62798: LD_VAR 0 14
62802: ADD
62803: ST_TO_ADDR
// end ;
62804: GO 62682
62806: POP
62807: POP
// end ; end ;
62808: LD_VAR 0 7
62812: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
62813: LD_INT 0
62815: PPUSH
62816: PPUSH
62817: PPUSH
62818: PPUSH
62819: PPUSH
62820: PPUSH
62821: PPUSH
62822: PPUSH
62823: PPUSH
62824: PPUSH
62825: PPUSH
62826: PPUSH
62827: PPUSH
62828: PPUSH
62829: PPUSH
62830: PPUSH
// result := false ;
62831: LD_ADDR_VAR 0 3
62835: PUSH
62836: LD_INT 0
62838: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
62839: LD_VAR 0 1
62843: NOT
62844: PUSH
62845: LD_VAR 0 1
62849: PPUSH
62850: CALL_OW 266
62854: PUSH
62855: LD_INT 32
62857: PUSH
62858: LD_INT 33
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: IN
62865: NOT
62866: OR
62867: IFFALSE 62871
// exit ;
62869: GO 64007
// nat := GetNation ( tower ) ;
62871: LD_ADDR_VAR 0 12
62875: PUSH
62876: LD_VAR 0 1
62880: PPUSH
62881: CALL_OW 248
62885: ST_TO_ADDR
// side := GetSide ( tower ) ;
62886: LD_ADDR_VAR 0 16
62890: PUSH
62891: LD_VAR 0 1
62895: PPUSH
62896: CALL_OW 255
62900: ST_TO_ADDR
// x := GetX ( tower ) ;
62901: LD_ADDR_VAR 0 10
62905: PUSH
62906: LD_VAR 0 1
62910: PPUSH
62911: CALL_OW 250
62915: ST_TO_ADDR
// y := GetY ( tower ) ;
62916: LD_ADDR_VAR 0 11
62920: PUSH
62921: LD_VAR 0 1
62925: PPUSH
62926: CALL_OW 251
62930: ST_TO_ADDR
// if not x or not y then
62931: LD_VAR 0 10
62935: NOT
62936: PUSH
62937: LD_VAR 0 11
62941: NOT
62942: OR
62943: IFFALSE 62947
// exit ;
62945: GO 64007
// weapon := 0 ;
62947: LD_ADDR_VAR 0 18
62951: PUSH
62952: LD_INT 0
62954: ST_TO_ADDR
// fac_list := [ ] ;
62955: LD_ADDR_VAR 0 17
62959: PUSH
62960: EMPTY
62961: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
62962: LD_ADDR_VAR 0 6
62966: PUSH
62967: LD_VAR 0 1
62971: PPUSH
62972: CALL_OW 274
62976: PPUSH
62977: LD_VAR 0 2
62981: PPUSH
62982: CALL 60585 0 2
62986: PPUSH
62987: LD_INT 30
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PPUSH
62997: CALL_OW 72
63001: ST_TO_ADDR
// if not factories then
63002: LD_VAR 0 6
63006: NOT
63007: IFFALSE 63011
// exit ;
63009: GO 64007
// for i in factories do
63011: LD_ADDR_VAR 0 8
63015: PUSH
63016: LD_VAR 0 6
63020: PUSH
63021: FOR_IN
63022: IFFALSE 63047
// fac_list := fac_list union AvailableWeaponList ( i ) ;
63024: LD_ADDR_VAR 0 17
63028: PUSH
63029: LD_VAR 0 17
63033: PUSH
63034: LD_VAR 0 8
63038: PPUSH
63039: CALL_OW 478
63043: UNION
63044: ST_TO_ADDR
63045: GO 63021
63047: POP
63048: POP
// if not fac_list then
63049: LD_VAR 0 17
63053: NOT
63054: IFFALSE 63058
// exit ;
63056: GO 64007
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
63058: LD_ADDR_VAR 0 5
63062: PUSH
63063: LD_INT 4
63065: PUSH
63066: LD_INT 5
63068: PUSH
63069: LD_INT 9
63071: PUSH
63072: LD_INT 10
63074: PUSH
63075: LD_INT 6
63077: PUSH
63078: LD_INT 7
63080: PUSH
63081: LD_INT 11
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 27
63095: PUSH
63096: LD_INT 28
63098: PUSH
63099: LD_INT 26
63101: PUSH
63102: LD_INT 30
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 43
63113: PUSH
63114: LD_INT 44
63116: PUSH
63117: LD_INT 46
63119: PUSH
63120: LD_INT 45
63122: PUSH
63123: LD_INT 47
63125: PUSH
63126: LD_INT 49
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: PUSH
63142: LD_VAR 0 12
63146: ARRAY
63147: ST_TO_ADDR
// for i in list do
63148: LD_ADDR_VAR 0 8
63152: PUSH
63153: LD_VAR 0 5
63157: PUSH
63158: FOR_IN
63159: IFFALSE 63192
// if not i in fac_list then
63161: LD_VAR 0 8
63165: PUSH
63166: LD_VAR 0 17
63170: IN
63171: NOT
63172: IFFALSE 63190
// list := list diff i ;
63174: LD_ADDR_VAR 0 5
63178: PUSH
63179: LD_VAR 0 5
63183: PUSH
63184: LD_VAR 0 8
63188: DIFF
63189: ST_TO_ADDR
63190: GO 63158
63192: POP
63193: POP
// if not list then
63194: LD_VAR 0 5
63198: NOT
63199: IFFALSE 63203
// exit ;
63201: GO 64007
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
63203: LD_VAR 0 12
63207: PUSH
63208: LD_INT 3
63210: EQUAL
63211: PUSH
63212: LD_INT 49
63214: PUSH
63215: LD_VAR 0 5
63219: IN
63220: AND
63221: PUSH
63222: LD_INT 31
63224: PPUSH
63225: LD_VAR 0 16
63229: PPUSH
63230: CALL_OW 321
63234: PUSH
63235: LD_INT 2
63237: EQUAL
63238: AND
63239: IFFALSE 63299
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
63241: LD_INT 22
63243: PUSH
63244: LD_VAR 0 16
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 35
63255: PUSH
63256: LD_INT 49
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 91
63265: PUSH
63266: LD_VAR 0 1
63270: PUSH
63271: LD_INT 10
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: PPUSH
63284: CALL_OW 69
63288: NOT
63289: IFFALSE 63299
// weapon := ru_time_lapser ;
63291: LD_ADDR_VAR 0 18
63295: PUSH
63296: LD_INT 49
63298: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
63299: LD_VAR 0 12
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: LD_INT 2
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: IN
63314: PUSH
63315: LD_INT 11
63317: PUSH
63318: LD_VAR 0 5
63322: IN
63323: PUSH
63324: LD_INT 30
63326: PUSH
63327: LD_VAR 0 5
63331: IN
63332: OR
63333: AND
63334: PUSH
63335: LD_INT 6
63337: PPUSH
63338: LD_VAR 0 16
63342: PPUSH
63343: CALL_OW 321
63347: PUSH
63348: LD_INT 2
63350: EQUAL
63351: AND
63352: IFFALSE 63517
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
63354: LD_INT 22
63356: PUSH
63357: LD_VAR 0 16
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 2
63368: PUSH
63369: LD_INT 35
63371: PUSH
63372: LD_INT 11
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 35
63381: PUSH
63382: LD_INT 30
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 91
63396: PUSH
63397: LD_VAR 0 1
63401: PUSH
63402: LD_INT 18
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: LIST
63414: PPUSH
63415: CALL_OW 69
63419: NOT
63420: PUSH
63421: LD_INT 22
63423: PUSH
63424: LD_VAR 0 16
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: LD_INT 30
63438: PUSH
63439: LD_INT 32
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 30
63448: PUSH
63449: LD_INT 33
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 91
63463: PUSH
63464: LD_VAR 0 1
63468: PUSH
63469: LD_INT 12
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: LIST
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: PUSH
63482: EMPTY
63483: LIST
63484: PPUSH
63485: CALL_OW 69
63489: PUSH
63490: LD_INT 2
63492: GREATER
63493: AND
63494: IFFALSE 63517
// weapon := [ us_radar , ar_radar ] [ nat ] ;
63496: LD_ADDR_VAR 0 18
63500: PUSH
63501: LD_INT 11
63503: PUSH
63504: LD_INT 30
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_VAR 0 12
63515: ARRAY
63516: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
63517: LD_VAR 0 18
63521: NOT
63522: PUSH
63523: LD_INT 40
63525: PPUSH
63526: LD_VAR 0 16
63530: PPUSH
63531: CALL_OW 321
63535: PUSH
63536: LD_INT 2
63538: EQUAL
63539: AND
63540: PUSH
63541: LD_INT 7
63543: PUSH
63544: LD_VAR 0 5
63548: IN
63549: PUSH
63550: LD_INT 28
63552: PUSH
63553: LD_VAR 0 5
63557: IN
63558: OR
63559: PUSH
63560: LD_INT 45
63562: PUSH
63563: LD_VAR 0 5
63567: IN
63568: OR
63569: AND
63570: IFFALSE 63824
// begin hex := GetHexInfo ( x , y ) ;
63572: LD_ADDR_VAR 0 4
63576: PUSH
63577: LD_VAR 0 10
63581: PPUSH
63582: LD_VAR 0 11
63586: PPUSH
63587: CALL_OW 546
63591: ST_TO_ADDR
// if hex [ 1 ] then
63592: LD_VAR 0 4
63596: PUSH
63597: LD_INT 1
63599: ARRAY
63600: IFFALSE 63604
// exit ;
63602: GO 64007
// height := hex [ 2 ] ;
63604: LD_ADDR_VAR 0 15
63608: PUSH
63609: LD_VAR 0 4
63613: PUSH
63614: LD_INT 2
63616: ARRAY
63617: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
63618: LD_ADDR_VAR 0 14
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: LD_INT 3
63631: PUSH
63632: LD_INT 5
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: ST_TO_ADDR
// for i in tmp do
63641: LD_ADDR_VAR 0 8
63645: PUSH
63646: LD_VAR 0 14
63650: PUSH
63651: FOR_IN
63652: IFFALSE 63822
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
63654: LD_ADDR_VAR 0 9
63658: PUSH
63659: LD_VAR 0 10
63663: PPUSH
63664: LD_VAR 0 8
63668: PPUSH
63669: LD_INT 5
63671: PPUSH
63672: CALL_OW 272
63676: PUSH
63677: LD_VAR 0 11
63681: PPUSH
63682: LD_VAR 0 8
63686: PPUSH
63687: LD_INT 5
63689: PPUSH
63690: CALL_OW 273
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
63699: LD_VAR 0 9
63703: PUSH
63704: LD_INT 1
63706: ARRAY
63707: PPUSH
63708: LD_VAR 0 9
63712: PUSH
63713: LD_INT 2
63715: ARRAY
63716: PPUSH
63717: CALL_OW 488
63721: IFFALSE 63820
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
63723: LD_ADDR_VAR 0 4
63727: PUSH
63728: LD_VAR 0 9
63732: PUSH
63733: LD_INT 1
63735: ARRAY
63736: PPUSH
63737: LD_VAR 0 9
63741: PUSH
63742: LD_INT 2
63744: ARRAY
63745: PPUSH
63746: CALL_OW 546
63750: ST_TO_ADDR
// if hex [ 1 ] then
63751: LD_VAR 0 4
63755: PUSH
63756: LD_INT 1
63758: ARRAY
63759: IFFALSE 63763
// continue ;
63761: GO 63651
// h := hex [ 2 ] ;
63763: LD_ADDR_VAR 0 13
63767: PUSH
63768: LD_VAR 0 4
63772: PUSH
63773: LD_INT 2
63775: ARRAY
63776: ST_TO_ADDR
// if h + 7 < height then
63777: LD_VAR 0 13
63781: PUSH
63782: LD_INT 7
63784: PLUS
63785: PUSH
63786: LD_VAR 0 15
63790: LESS
63791: IFFALSE 63820
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
63793: LD_ADDR_VAR 0 18
63797: PUSH
63798: LD_INT 7
63800: PUSH
63801: LD_INT 28
63803: PUSH
63804: LD_INT 45
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: LIST
63811: PUSH
63812: LD_VAR 0 12
63816: ARRAY
63817: ST_TO_ADDR
// break ;
63818: GO 63822
// end ; end ; end ;
63820: GO 63651
63822: POP
63823: POP
// end ; if not weapon then
63824: LD_VAR 0 18
63828: NOT
63829: IFFALSE 63889
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
63831: LD_ADDR_VAR 0 5
63835: PUSH
63836: LD_VAR 0 5
63840: PUSH
63841: LD_INT 11
63843: PUSH
63844: LD_INT 30
63846: PUSH
63847: LD_INT 49
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: LIST
63854: DIFF
63855: ST_TO_ADDR
// if not list then
63856: LD_VAR 0 5
63860: NOT
63861: IFFALSE 63865
// exit ;
63863: GO 64007
// weapon := list [ rand ( 1 , list ) ] ;
63865: LD_ADDR_VAR 0 18
63869: PUSH
63870: LD_VAR 0 5
63874: PUSH
63875: LD_INT 1
63877: PPUSH
63878: LD_VAR 0 5
63882: PPUSH
63883: CALL_OW 12
63887: ARRAY
63888: ST_TO_ADDR
// end ; if weapon then
63889: LD_VAR 0 18
63893: IFFALSE 64007
// begin tmp := CostOfWeapon ( weapon ) ;
63895: LD_ADDR_VAR 0 14
63899: PUSH
63900: LD_VAR 0 18
63904: PPUSH
63905: CALL_OW 451
63909: ST_TO_ADDR
// j := GetBase ( tower ) ;
63910: LD_ADDR_VAR 0 9
63914: PUSH
63915: LD_VAR 0 1
63919: PPUSH
63920: CALL_OW 274
63924: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
63925: LD_VAR 0 9
63929: PPUSH
63930: LD_INT 1
63932: PPUSH
63933: CALL_OW 275
63937: PUSH
63938: LD_VAR 0 14
63942: PUSH
63943: LD_INT 1
63945: ARRAY
63946: GREATEREQUAL
63947: PUSH
63948: LD_VAR 0 9
63952: PPUSH
63953: LD_INT 2
63955: PPUSH
63956: CALL_OW 275
63960: PUSH
63961: LD_VAR 0 14
63965: PUSH
63966: LD_INT 2
63968: ARRAY
63969: GREATEREQUAL
63970: AND
63971: PUSH
63972: LD_VAR 0 9
63976: PPUSH
63977: LD_INT 3
63979: PPUSH
63980: CALL_OW 275
63984: PUSH
63985: LD_VAR 0 14
63989: PUSH
63990: LD_INT 3
63992: ARRAY
63993: GREATEREQUAL
63994: AND
63995: IFFALSE 64007
// result := weapon ;
63997: LD_ADDR_VAR 0 3
64001: PUSH
64002: LD_VAR 0 18
64006: ST_TO_ADDR
// end ; end ;
64007: LD_VAR 0 3
64011: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
64012: LD_INT 0
64014: PPUSH
64015: PPUSH
// result := true ;
64016: LD_ADDR_VAR 0 3
64020: PUSH
64021: LD_INT 1
64023: ST_TO_ADDR
// if array1 = array2 then
64024: LD_VAR 0 1
64028: PUSH
64029: LD_VAR 0 2
64033: EQUAL
64034: IFFALSE 64094
// begin for i = 1 to array1 do
64036: LD_ADDR_VAR 0 4
64040: PUSH
64041: DOUBLE
64042: LD_INT 1
64044: DEC
64045: ST_TO_ADDR
64046: LD_VAR 0 1
64050: PUSH
64051: FOR_TO
64052: IFFALSE 64090
// if array1 [ i ] <> array2 [ i ] then
64054: LD_VAR 0 1
64058: PUSH
64059: LD_VAR 0 4
64063: ARRAY
64064: PUSH
64065: LD_VAR 0 2
64069: PUSH
64070: LD_VAR 0 4
64074: ARRAY
64075: NONEQUAL
64076: IFFALSE 64088
// begin result := false ;
64078: LD_ADDR_VAR 0 3
64082: PUSH
64083: LD_INT 0
64085: ST_TO_ADDR
// break ;
64086: GO 64090
// end ;
64088: GO 64051
64090: POP
64091: POP
// end else
64092: GO 64102
// result := false ;
64094: LD_ADDR_VAR 0 3
64098: PUSH
64099: LD_INT 0
64101: ST_TO_ADDR
// end ;
64102: LD_VAR 0 3
64106: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
64107: LD_INT 0
64109: PPUSH
64110: PPUSH
64111: PPUSH
// pom := GetBase ( fac ) ;
64112: LD_ADDR_VAR 0 5
64116: PUSH
64117: LD_VAR 0 1
64121: PPUSH
64122: CALL_OW 274
64126: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
64127: LD_ADDR_VAR 0 4
64131: PUSH
64132: LD_VAR 0 2
64136: PUSH
64137: LD_INT 1
64139: ARRAY
64140: PPUSH
64141: LD_VAR 0 2
64145: PUSH
64146: LD_INT 2
64148: ARRAY
64149: PPUSH
64150: LD_VAR 0 2
64154: PUSH
64155: LD_INT 3
64157: ARRAY
64158: PPUSH
64159: LD_VAR 0 2
64163: PUSH
64164: LD_INT 4
64166: ARRAY
64167: PPUSH
64168: CALL_OW 449
64172: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
64173: LD_ADDR_VAR 0 3
64177: PUSH
64178: LD_VAR 0 5
64182: PPUSH
64183: LD_INT 1
64185: PPUSH
64186: CALL_OW 275
64190: PUSH
64191: LD_VAR 0 4
64195: PUSH
64196: LD_INT 1
64198: ARRAY
64199: GREATEREQUAL
64200: PUSH
64201: LD_VAR 0 5
64205: PPUSH
64206: LD_INT 2
64208: PPUSH
64209: CALL_OW 275
64213: PUSH
64214: LD_VAR 0 4
64218: PUSH
64219: LD_INT 2
64221: ARRAY
64222: GREATEREQUAL
64223: AND
64224: PUSH
64225: LD_VAR 0 5
64229: PPUSH
64230: LD_INT 3
64232: PPUSH
64233: CALL_OW 275
64237: PUSH
64238: LD_VAR 0 4
64242: PUSH
64243: LD_INT 3
64245: ARRAY
64246: GREATEREQUAL
64247: AND
64248: ST_TO_ADDR
// end ;
64249: LD_VAR 0 3
64253: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
64254: LD_INT 0
64256: PPUSH
64257: PPUSH
64258: PPUSH
64259: PPUSH
// pom := GetBase ( building ) ;
64260: LD_ADDR_VAR 0 3
64264: PUSH
64265: LD_VAR 0 1
64269: PPUSH
64270: CALL_OW 274
64274: ST_TO_ADDR
// if not pom then
64275: LD_VAR 0 3
64279: NOT
64280: IFFALSE 64284
// exit ;
64282: GO 64454
// btype := GetBType ( building ) ;
64284: LD_ADDR_VAR 0 5
64288: PUSH
64289: LD_VAR 0 1
64293: PPUSH
64294: CALL_OW 266
64298: ST_TO_ADDR
// if btype = b_armoury then
64299: LD_VAR 0 5
64303: PUSH
64304: LD_INT 4
64306: EQUAL
64307: IFFALSE 64317
// btype := b_barracks ;
64309: LD_ADDR_VAR 0 5
64313: PUSH
64314: LD_INT 5
64316: ST_TO_ADDR
// if btype = b_depot then
64317: LD_VAR 0 5
64321: PUSH
64322: LD_INT 0
64324: EQUAL
64325: IFFALSE 64335
// btype := b_warehouse ;
64327: LD_ADDR_VAR 0 5
64331: PUSH
64332: LD_INT 1
64334: ST_TO_ADDR
// if btype = b_workshop then
64335: LD_VAR 0 5
64339: PUSH
64340: LD_INT 2
64342: EQUAL
64343: IFFALSE 64353
// btype := b_factory ;
64345: LD_ADDR_VAR 0 5
64349: PUSH
64350: LD_INT 3
64352: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
64353: LD_ADDR_VAR 0 4
64357: PUSH
64358: LD_VAR 0 5
64362: PPUSH
64363: LD_VAR 0 1
64367: PPUSH
64368: CALL_OW 248
64372: PPUSH
64373: CALL_OW 450
64377: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
64378: LD_ADDR_VAR 0 2
64382: PUSH
64383: LD_VAR 0 3
64387: PPUSH
64388: LD_INT 1
64390: PPUSH
64391: CALL_OW 275
64395: PUSH
64396: LD_VAR 0 4
64400: PUSH
64401: LD_INT 1
64403: ARRAY
64404: GREATEREQUAL
64405: PUSH
64406: LD_VAR 0 3
64410: PPUSH
64411: LD_INT 2
64413: PPUSH
64414: CALL_OW 275
64418: PUSH
64419: LD_VAR 0 4
64423: PUSH
64424: LD_INT 2
64426: ARRAY
64427: GREATEREQUAL
64428: AND
64429: PUSH
64430: LD_VAR 0 3
64434: PPUSH
64435: LD_INT 3
64437: PPUSH
64438: CALL_OW 275
64442: PUSH
64443: LD_VAR 0 4
64447: PUSH
64448: LD_INT 3
64450: ARRAY
64451: GREATEREQUAL
64452: AND
64453: ST_TO_ADDR
// end ;
64454: LD_VAR 0 2
64458: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
64459: LD_INT 0
64461: PPUSH
64462: PPUSH
64463: PPUSH
// pom := GetBase ( building ) ;
64464: LD_ADDR_VAR 0 4
64468: PUSH
64469: LD_VAR 0 1
64473: PPUSH
64474: CALL_OW 274
64478: ST_TO_ADDR
// if not pom then
64479: LD_VAR 0 4
64483: NOT
64484: IFFALSE 64488
// exit ;
64486: GO 64589
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
64488: LD_ADDR_VAR 0 5
64492: PUSH
64493: LD_VAR 0 2
64497: PPUSH
64498: LD_VAR 0 1
64502: PPUSH
64503: CALL_OW 248
64507: PPUSH
64508: CALL_OW 450
64512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
64513: LD_ADDR_VAR 0 3
64517: PUSH
64518: LD_VAR 0 4
64522: PPUSH
64523: LD_INT 1
64525: PPUSH
64526: CALL_OW 275
64530: PUSH
64531: LD_VAR 0 5
64535: PUSH
64536: LD_INT 1
64538: ARRAY
64539: GREATEREQUAL
64540: PUSH
64541: LD_VAR 0 4
64545: PPUSH
64546: LD_INT 2
64548: PPUSH
64549: CALL_OW 275
64553: PUSH
64554: LD_VAR 0 5
64558: PUSH
64559: LD_INT 2
64561: ARRAY
64562: GREATEREQUAL
64563: AND
64564: PUSH
64565: LD_VAR 0 4
64569: PPUSH
64570: LD_INT 3
64572: PPUSH
64573: CALL_OW 275
64577: PUSH
64578: LD_VAR 0 5
64582: PUSH
64583: LD_INT 3
64585: ARRAY
64586: GREATEREQUAL
64587: AND
64588: ST_TO_ADDR
// end ;
64589: LD_VAR 0 3
64593: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
64594: LD_INT 0
64596: PPUSH
64597: PPUSH
64598: PPUSH
64599: PPUSH
64600: PPUSH
64601: PPUSH
64602: PPUSH
64603: PPUSH
64604: PPUSH
64605: PPUSH
// result := false ;
64606: LD_ADDR_VAR 0 6
64610: PUSH
64611: LD_INT 0
64613: ST_TO_ADDR
// if not base or not btype or not x or not y then
64614: LD_VAR 0 1
64618: NOT
64619: PUSH
64620: LD_VAR 0 2
64624: NOT
64625: OR
64626: PUSH
64627: LD_VAR 0 3
64631: NOT
64632: OR
64633: PUSH
64634: LD_VAR 0 4
64638: NOT
64639: OR
64640: IFFALSE 64644
// exit ;
64642: GO 65253
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
64644: LD_ADDR_VAR 0 12
64648: PUSH
64649: LD_VAR 0 2
64653: PPUSH
64654: LD_VAR 0 3
64658: PPUSH
64659: LD_VAR 0 4
64663: PPUSH
64664: LD_VAR 0 5
64668: PPUSH
64669: LD_VAR 0 1
64673: PUSH
64674: LD_INT 1
64676: ARRAY
64677: PPUSH
64678: CALL_OW 248
64682: PPUSH
64683: LD_INT 0
64685: PPUSH
64686: CALL 66090 0 6
64690: ST_TO_ADDR
// if not hexes then
64691: LD_VAR 0 12
64695: NOT
64696: IFFALSE 64700
// exit ;
64698: GO 65253
// for i = 1 to hexes do
64700: LD_ADDR_VAR 0 7
64704: PUSH
64705: DOUBLE
64706: LD_INT 1
64708: DEC
64709: ST_TO_ADDR
64710: LD_VAR 0 12
64714: PUSH
64715: FOR_TO
64716: IFFALSE 65251
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64718: LD_ADDR_VAR 0 11
64722: PUSH
64723: LD_VAR 0 12
64727: PUSH
64728: LD_VAR 0 7
64732: ARRAY
64733: PUSH
64734: LD_INT 1
64736: ARRAY
64737: PPUSH
64738: LD_VAR 0 12
64742: PUSH
64743: LD_VAR 0 7
64747: ARRAY
64748: PUSH
64749: LD_INT 2
64751: ARRAY
64752: PPUSH
64753: CALL_OW 428
64757: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
64758: LD_VAR 0 12
64762: PUSH
64763: LD_VAR 0 7
64767: ARRAY
64768: PUSH
64769: LD_INT 1
64771: ARRAY
64772: PPUSH
64773: LD_VAR 0 12
64777: PUSH
64778: LD_VAR 0 7
64782: ARRAY
64783: PUSH
64784: LD_INT 2
64786: ARRAY
64787: PPUSH
64788: CALL_OW 351
64792: PUSH
64793: LD_VAR 0 12
64797: PUSH
64798: LD_VAR 0 7
64802: ARRAY
64803: PUSH
64804: LD_INT 1
64806: ARRAY
64807: PPUSH
64808: LD_VAR 0 12
64812: PUSH
64813: LD_VAR 0 7
64817: ARRAY
64818: PUSH
64819: LD_INT 2
64821: ARRAY
64822: PPUSH
64823: CALL_OW 488
64827: NOT
64828: OR
64829: PUSH
64830: LD_VAR 0 11
64834: PPUSH
64835: CALL_OW 247
64839: PUSH
64840: LD_INT 3
64842: EQUAL
64843: OR
64844: IFFALSE 64850
// exit ;
64846: POP
64847: POP
64848: GO 65253
// if not tmp or not tmp in base then
64850: LD_VAR 0 11
64854: NOT
64855: PUSH
64856: LD_VAR 0 11
64860: PUSH
64861: LD_VAR 0 1
64865: IN
64866: NOT
64867: OR
64868: IFFALSE 64872
// continue ;
64870: GO 64715
// result := true ;
64872: LD_ADDR_VAR 0 6
64876: PUSH
64877: LD_INT 1
64879: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64880: LD_ADDR_VAR 0 15
64884: PUSH
64885: LD_VAR 0 1
64889: PPUSH
64890: LD_INT 22
64892: PUSH
64893: LD_VAR 0 11
64897: PPUSH
64898: CALL_OW 255
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: LD_INT 30
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 30
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PPUSH
64939: CALL_OW 72
64943: ST_TO_ADDR
// if dep then
64944: LD_VAR 0 15
64948: IFFALSE 65084
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
64950: LD_ADDR_VAR 0 14
64954: PUSH
64955: LD_VAR 0 15
64959: PUSH
64960: LD_INT 1
64962: ARRAY
64963: PPUSH
64964: CALL_OW 250
64968: PPUSH
64969: LD_VAR 0 15
64973: PUSH
64974: LD_INT 1
64976: ARRAY
64977: PPUSH
64978: CALL_OW 254
64982: PPUSH
64983: LD_INT 5
64985: PPUSH
64986: CALL_OW 272
64990: PUSH
64991: LD_VAR 0 15
64995: PUSH
64996: LD_INT 1
64998: ARRAY
64999: PPUSH
65000: CALL_OW 251
65004: PPUSH
65005: LD_VAR 0 15
65009: PUSH
65010: LD_INT 1
65012: ARRAY
65013: PPUSH
65014: CALL_OW 254
65018: PPUSH
65019: LD_INT 5
65021: PPUSH
65022: CALL_OW 273
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
65031: LD_VAR 0 14
65035: PUSH
65036: LD_INT 1
65038: ARRAY
65039: PPUSH
65040: LD_VAR 0 14
65044: PUSH
65045: LD_INT 2
65047: ARRAY
65048: PPUSH
65049: CALL_OW 488
65053: IFFALSE 65084
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
65055: LD_VAR 0 11
65059: PPUSH
65060: LD_VAR 0 14
65064: PUSH
65065: LD_INT 1
65067: ARRAY
65068: PPUSH
65069: LD_VAR 0 14
65073: PUSH
65074: LD_INT 2
65076: ARRAY
65077: PPUSH
65078: CALL_OW 111
// continue ;
65082: GO 64715
// end ; end ; r := GetDir ( tmp ) ;
65084: LD_ADDR_VAR 0 13
65088: PUSH
65089: LD_VAR 0 11
65093: PPUSH
65094: CALL_OW 254
65098: ST_TO_ADDR
// if r = 5 then
65099: LD_VAR 0 13
65103: PUSH
65104: LD_INT 5
65106: EQUAL
65107: IFFALSE 65117
// r := 0 ;
65109: LD_ADDR_VAR 0 13
65113: PUSH
65114: LD_INT 0
65116: ST_TO_ADDR
// for j = r to 5 do
65117: LD_ADDR_VAR 0 8
65121: PUSH
65122: DOUBLE
65123: LD_VAR 0 13
65127: DEC
65128: ST_TO_ADDR
65129: LD_INT 5
65131: PUSH
65132: FOR_TO
65133: IFFALSE 65247
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
65135: LD_ADDR_VAR 0 9
65139: PUSH
65140: LD_VAR 0 11
65144: PPUSH
65145: CALL_OW 250
65149: PPUSH
65150: LD_VAR 0 8
65154: PPUSH
65155: LD_INT 2
65157: PPUSH
65158: CALL_OW 272
65162: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
65163: LD_ADDR_VAR 0 10
65167: PUSH
65168: LD_VAR 0 11
65172: PPUSH
65173: CALL_OW 251
65177: PPUSH
65178: LD_VAR 0 8
65182: PPUSH
65183: LD_INT 2
65185: PPUSH
65186: CALL_OW 273
65190: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
65191: LD_VAR 0 9
65195: PPUSH
65196: LD_VAR 0 10
65200: PPUSH
65201: CALL_OW 488
65205: PUSH
65206: LD_VAR 0 9
65210: PPUSH
65211: LD_VAR 0 10
65215: PPUSH
65216: CALL_OW 428
65220: NOT
65221: AND
65222: IFFALSE 65245
// begin ComMoveXY ( tmp , _x , _y ) ;
65224: LD_VAR 0 11
65228: PPUSH
65229: LD_VAR 0 9
65233: PPUSH
65234: LD_VAR 0 10
65238: PPUSH
65239: CALL_OW 111
// break ;
65243: GO 65247
// end ; end ;
65245: GO 65132
65247: POP
65248: POP
// end ;
65249: GO 64715
65251: POP
65252: POP
// end ;
65253: LD_VAR 0 6
65257: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
65258: LD_INT 0
65260: PPUSH
65261: PPUSH
65262: PPUSH
65263: PPUSH
65264: PPUSH
65265: PPUSH
65266: PPUSH
65267: PPUSH
65268: PPUSH
65269: PPUSH
// result := false ;
65270: LD_ADDR_VAR 0 6
65274: PUSH
65275: LD_INT 0
65277: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
65278: LD_VAR 0 1
65282: NOT
65283: PUSH
65284: LD_VAR 0 1
65288: PPUSH
65289: CALL_OW 266
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: IN
65304: NOT
65305: OR
65306: PUSH
65307: LD_VAR 0 2
65311: NOT
65312: OR
65313: PUSH
65314: LD_VAR 0 5
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: LD_INT 1
65324: PUSH
65325: LD_INT 2
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: LD_INT 4
65333: PUSH
65334: LD_INT 5
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: IN
65345: NOT
65346: OR
65347: PUSH
65348: LD_VAR 0 3
65352: PPUSH
65353: LD_VAR 0 4
65357: PPUSH
65358: CALL_OW 488
65362: NOT
65363: OR
65364: IFFALSE 65368
// exit ;
65366: GO 66085
// pom := GetBase ( depot ) ;
65368: LD_ADDR_VAR 0 10
65372: PUSH
65373: LD_VAR 0 1
65377: PPUSH
65378: CALL_OW 274
65382: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
65383: LD_ADDR_VAR 0 11
65387: PUSH
65388: LD_VAR 0 2
65392: PPUSH
65393: LD_VAR 0 1
65397: PPUSH
65398: CALL_OW 248
65402: PPUSH
65403: CALL_OW 450
65407: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
65408: LD_VAR 0 10
65412: PPUSH
65413: LD_INT 1
65415: PPUSH
65416: CALL_OW 275
65420: PUSH
65421: LD_VAR 0 11
65425: PUSH
65426: LD_INT 1
65428: ARRAY
65429: GREATEREQUAL
65430: PUSH
65431: LD_VAR 0 10
65435: PPUSH
65436: LD_INT 2
65438: PPUSH
65439: CALL_OW 275
65443: PUSH
65444: LD_VAR 0 11
65448: PUSH
65449: LD_INT 2
65451: ARRAY
65452: GREATEREQUAL
65453: AND
65454: PUSH
65455: LD_VAR 0 10
65459: PPUSH
65460: LD_INT 3
65462: PPUSH
65463: CALL_OW 275
65467: PUSH
65468: LD_VAR 0 11
65472: PUSH
65473: LD_INT 3
65475: ARRAY
65476: GREATEREQUAL
65477: AND
65478: NOT
65479: IFFALSE 65483
// exit ;
65481: GO 66085
// if GetBType ( depot ) = b_depot then
65483: LD_VAR 0 1
65487: PPUSH
65488: CALL_OW 266
65492: PUSH
65493: LD_INT 0
65495: EQUAL
65496: IFFALSE 65508
// dist := 28 else
65498: LD_ADDR_VAR 0 14
65502: PUSH
65503: LD_INT 28
65505: ST_TO_ADDR
65506: GO 65516
// dist := 36 ;
65508: LD_ADDR_VAR 0 14
65512: PUSH
65513: LD_INT 36
65515: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
65516: LD_VAR 0 1
65520: PPUSH
65521: LD_VAR 0 3
65525: PPUSH
65526: LD_VAR 0 4
65530: PPUSH
65531: CALL_OW 297
65535: PUSH
65536: LD_VAR 0 14
65540: GREATER
65541: IFFALSE 65545
// exit ;
65543: GO 66085
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
65545: LD_ADDR_VAR 0 12
65549: PUSH
65550: LD_VAR 0 2
65554: PPUSH
65555: LD_VAR 0 3
65559: PPUSH
65560: LD_VAR 0 4
65564: PPUSH
65565: LD_VAR 0 5
65569: PPUSH
65570: LD_VAR 0 1
65574: PPUSH
65575: CALL_OW 248
65579: PPUSH
65580: LD_INT 0
65582: PPUSH
65583: CALL 66090 0 6
65587: ST_TO_ADDR
// if not hexes then
65588: LD_VAR 0 12
65592: NOT
65593: IFFALSE 65597
// exit ;
65595: GO 66085
// hex := GetHexInfo ( x , y ) ;
65597: LD_ADDR_VAR 0 15
65601: PUSH
65602: LD_VAR 0 3
65606: PPUSH
65607: LD_VAR 0 4
65611: PPUSH
65612: CALL_OW 546
65616: ST_TO_ADDR
// if hex [ 1 ] then
65617: LD_VAR 0 15
65621: PUSH
65622: LD_INT 1
65624: ARRAY
65625: IFFALSE 65629
// exit ;
65627: GO 66085
// height := hex [ 2 ] ;
65629: LD_ADDR_VAR 0 13
65633: PUSH
65634: LD_VAR 0 15
65638: PUSH
65639: LD_INT 2
65641: ARRAY
65642: ST_TO_ADDR
// for i = 1 to hexes do
65643: LD_ADDR_VAR 0 7
65647: PUSH
65648: DOUBLE
65649: LD_INT 1
65651: DEC
65652: ST_TO_ADDR
65653: LD_VAR 0 12
65657: PUSH
65658: FOR_TO
65659: IFFALSE 65989
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
65661: LD_VAR 0 12
65665: PUSH
65666: LD_VAR 0 7
65670: ARRAY
65671: PUSH
65672: LD_INT 1
65674: ARRAY
65675: PPUSH
65676: LD_VAR 0 12
65680: PUSH
65681: LD_VAR 0 7
65685: ARRAY
65686: PUSH
65687: LD_INT 2
65689: ARRAY
65690: PPUSH
65691: CALL_OW 488
65695: NOT
65696: PUSH
65697: LD_VAR 0 12
65701: PUSH
65702: LD_VAR 0 7
65706: ARRAY
65707: PUSH
65708: LD_INT 1
65710: ARRAY
65711: PPUSH
65712: LD_VAR 0 12
65716: PUSH
65717: LD_VAR 0 7
65721: ARRAY
65722: PUSH
65723: LD_INT 2
65725: ARRAY
65726: PPUSH
65727: CALL_OW 428
65731: PUSH
65732: LD_INT 0
65734: GREATER
65735: OR
65736: PUSH
65737: LD_VAR 0 12
65741: PUSH
65742: LD_VAR 0 7
65746: ARRAY
65747: PUSH
65748: LD_INT 1
65750: ARRAY
65751: PPUSH
65752: LD_VAR 0 12
65756: PUSH
65757: LD_VAR 0 7
65761: ARRAY
65762: PUSH
65763: LD_INT 2
65765: ARRAY
65766: PPUSH
65767: CALL_OW 351
65771: OR
65772: IFFALSE 65778
// exit ;
65774: POP
65775: POP
65776: GO 66085
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65778: LD_ADDR_VAR 0 8
65782: PUSH
65783: LD_VAR 0 12
65787: PUSH
65788: LD_VAR 0 7
65792: ARRAY
65793: PUSH
65794: LD_INT 1
65796: ARRAY
65797: PPUSH
65798: LD_VAR 0 12
65802: PUSH
65803: LD_VAR 0 7
65807: ARRAY
65808: PUSH
65809: LD_INT 2
65811: ARRAY
65812: PPUSH
65813: CALL_OW 546
65817: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
65818: LD_VAR 0 8
65822: PUSH
65823: LD_INT 1
65825: ARRAY
65826: PUSH
65827: LD_VAR 0 8
65831: PUSH
65832: LD_INT 2
65834: ARRAY
65835: PUSH
65836: LD_VAR 0 13
65840: PUSH
65841: LD_INT 2
65843: PLUS
65844: GREATER
65845: OR
65846: PUSH
65847: LD_VAR 0 8
65851: PUSH
65852: LD_INT 2
65854: ARRAY
65855: PUSH
65856: LD_VAR 0 13
65860: PUSH
65861: LD_INT 2
65863: MINUS
65864: LESS
65865: OR
65866: PUSH
65867: LD_VAR 0 8
65871: PUSH
65872: LD_INT 3
65874: ARRAY
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 8
65881: PUSH
65882: LD_INT 9
65884: PUSH
65885: LD_INT 10
65887: PUSH
65888: LD_INT 11
65890: PUSH
65891: LD_INT 12
65893: PUSH
65894: LD_INT 13
65896: PUSH
65897: LD_INT 16
65899: PUSH
65900: LD_INT 17
65902: PUSH
65903: LD_INT 18
65905: PUSH
65906: LD_INT 19
65908: PUSH
65909: LD_INT 20
65911: PUSH
65912: LD_INT 21
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: IN
65930: NOT
65931: OR
65932: PUSH
65933: LD_VAR 0 8
65937: PUSH
65938: LD_INT 5
65940: ARRAY
65941: NOT
65942: OR
65943: PUSH
65944: LD_VAR 0 8
65948: PUSH
65949: LD_INT 6
65951: ARRAY
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: LD_INT 7
65961: PUSH
65962: LD_INT 9
65964: PUSH
65965: LD_INT 10
65967: PUSH
65968: LD_INT 11
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: IN
65979: NOT
65980: OR
65981: IFFALSE 65987
// exit ;
65983: POP
65984: POP
65985: GO 66085
// end ;
65987: GO 65658
65989: POP
65990: POP
// side := GetSide ( depot ) ;
65991: LD_ADDR_VAR 0 9
65995: PUSH
65996: LD_VAR 0 1
66000: PPUSH
66001: CALL_OW 255
66005: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
66006: LD_VAR 0 9
66010: PPUSH
66011: LD_VAR 0 3
66015: PPUSH
66016: LD_VAR 0 4
66020: PPUSH
66021: LD_INT 20
66023: PPUSH
66024: CALL 58739 0 4
66028: PUSH
66029: LD_INT 4
66031: ARRAY
66032: IFFALSE 66036
// exit ;
66034: GO 66085
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
66036: LD_VAR 0 2
66040: PUSH
66041: LD_INT 29
66043: PUSH
66044: LD_INT 30
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: IN
66051: PUSH
66052: LD_VAR 0 3
66056: PPUSH
66057: LD_VAR 0 4
66061: PPUSH
66062: LD_VAR 0 9
66066: PPUSH
66067: CALL_OW 440
66071: NOT
66072: AND
66073: IFFALSE 66077
// exit ;
66075: GO 66085
// result := true ;
66077: LD_ADDR_VAR 0 6
66081: PUSH
66082: LD_INT 1
66084: ST_TO_ADDR
// end ;
66085: LD_VAR 0 6
66089: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
66090: LD_INT 0
66092: PPUSH
66093: PPUSH
66094: PPUSH
66095: PPUSH
66096: PPUSH
66097: PPUSH
66098: PPUSH
66099: PPUSH
66100: PPUSH
66101: PPUSH
66102: PPUSH
66103: PPUSH
66104: PPUSH
66105: PPUSH
66106: PPUSH
66107: PPUSH
66108: PPUSH
66109: PPUSH
66110: PPUSH
66111: PPUSH
66112: PPUSH
66113: PPUSH
66114: PPUSH
66115: PPUSH
66116: PPUSH
66117: PPUSH
66118: PPUSH
66119: PPUSH
66120: PPUSH
66121: PPUSH
66122: PPUSH
66123: PPUSH
66124: PPUSH
66125: PPUSH
66126: PPUSH
66127: PPUSH
66128: PPUSH
66129: PPUSH
66130: PPUSH
66131: PPUSH
66132: PPUSH
66133: PPUSH
66134: PPUSH
66135: PPUSH
66136: PPUSH
66137: PPUSH
66138: PPUSH
66139: PPUSH
66140: PPUSH
66141: PPUSH
66142: PPUSH
66143: PPUSH
66144: PPUSH
66145: PPUSH
66146: PPUSH
66147: PPUSH
66148: PPUSH
66149: PPUSH
// result = [ ] ;
66150: LD_ADDR_VAR 0 7
66154: PUSH
66155: EMPTY
66156: ST_TO_ADDR
// temp_list = [ ] ;
66157: LD_ADDR_VAR 0 9
66161: PUSH
66162: EMPTY
66163: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
66164: LD_VAR 0 4
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: LD_INT 2
66177: PUSH
66178: LD_INT 3
66180: PUSH
66181: LD_INT 4
66183: PUSH
66184: LD_INT 5
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: IN
66195: NOT
66196: PUSH
66197: LD_VAR 0 1
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: LD_INT 1
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: IN
66212: PUSH
66213: LD_VAR 0 5
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: LD_INT 2
66223: PUSH
66224: LD_INT 3
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: LIST
66231: IN
66232: NOT
66233: AND
66234: OR
66235: IFFALSE 66239
// exit ;
66237: GO 84630
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
66239: LD_VAR 0 1
66243: PUSH
66244: LD_INT 6
66246: PUSH
66247: LD_INT 7
66249: PUSH
66250: LD_INT 8
66252: PUSH
66253: LD_INT 13
66255: PUSH
66256: LD_INT 12
66258: PUSH
66259: LD_INT 15
66261: PUSH
66262: LD_INT 11
66264: PUSH
66265: LD_INT 14
66267: PUSH
66268: LD_INT 10
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: IN
66282: IFFALSE 66292
// btype = b_lab ;
66284: LD_ADDR_VAR 0 1
66288: PUSH
66289: LD_INT 6
66291: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
66292: LD_VAR 0 6
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: LD_INT 2
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: IN
66311: NOT
66312: PUSH
66313: LD_VAR 0 1
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 3
66329: PUSH
66330: LD_INT 6
66332: PUSH
66333: LD_INT 36
66335: PUSH
66336: LD_INT 4
66338: PUSH
66339: LD_INT 5
66341: PUSH
66342: LD_INT 31
66344: PUSH
66345: LD_INT 32
66347: PUSH
66348: LD_INT 33
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: IN
66364: NOT
66365: PUSH
66366: LD_VAR 0 6
66370: PUSH
66371: LD_INT 1
66373: EQUAL
66374: AND
66375: OR
66376: PUSH
66377: LD_VAR 0 1
66381: PUSH
66382: LD_INT 2
66384: PUSH
66385: LD_INT 3
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: IN
66392: NOT
66393: PUSH
66394: LD_VAR 0 6
66398: PUSH
66399: LD_INT 2
66401: EQUAL
66402: AND
66403: OR
66404: IFFALSE 66414
// mode = 0 ;
66406: LD_ADDR_VAR 0 6
66410: PUSH
66411: LD_INT 0
66413: ST_TO_ADDR
// case mode of 0 :
66414: LD_VAR 0 6
66418: PUSH
66419: LD_INT 0
66421: DOUBLE
66422: EQUAL
66423: IFTRUE 66427
66425: GO 77880
66427: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66428: LD_ADDR_VAR 0 11
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 2
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 2
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: PUSH
66544: LD_INT 2
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 0
66553: PUSH
66554: LD_INT 2
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 1
66563: NEG
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 1
66574: PUSH
66575: LD_INT 3
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 3
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: LD_INT 2
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66621: LD_ADDR_VAR 0 12
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: NEG
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 2
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 2
66744: NEG
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 2
66755: NEG
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 2
66767: NEG
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 3
66778: NEG
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 3
66789: NEG
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66817: LD_ADDR_VAR 0 13
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: LD_INT 0
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: LD_INT 1
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: LD_INT 0
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: LD_INT 1
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 1
66886: NEG
66887: PUSH
66888: LD_INT 1
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 1
66898: NEG
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 2
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 2
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 2
66940: NEG
66941: PUSH
66942: LD_INT 1
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 2
66952: NEG
66953: PUSH
66954: LD_INT 2
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 2
66964: NEG
66965: PUSH
66966: LD_INT 3
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 3
66976: NEG
66977: PUSH
66978: LD_INT 2
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 3
66988: NEG
66989: PUSH
66990: LD_INT 3
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67016: LD_ADDR_VAR 0 14
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: LD_INT 2
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: LD_INT 2
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: LD_INT 2
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 0
67141: PUSH
67142: LD_INT 2
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 1
67151: NEG
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: LD_INT 3
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: LD_INT 3
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 1
67185: PUSH
67186: LD_INT 2
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67212: LD_ADDR_VAR 0 15
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: LD_INT 1
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 1
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: LD_INT 1
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 1
67281: NEG
67282: PUSH
67283: LD_INT 1
67285: NEG
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: LD_INT 1
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 2
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 2
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 1
67324: NEG
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 2
67335: NEG
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 2
67346: NEG
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 2
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 3
67379: PUSH
67380: LD_INT 1
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67405: LD_ADDR_VAR 0 16
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: LD_INT 1
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 0
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 1
67463: NEG
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: LD_INT 2
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 2
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 2
67508: PUSH
67509: LD_INT 2
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 1
67518: PUSH
67519: LD_INT 2
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 2
67528: NEG
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 2
67540: NEG
67541: PUSH
67542: LD_INT 2
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: LD_INT 2
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: LD_INT 3
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 2
67572: PUSH
67573: LD_INT 3
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67598: LD_ADDR_VAR 0 17
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: LD_INT 1
67618: NEG
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 1
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: LD_INT 1
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: NEG
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: NEG
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: PUSH
67681: LD_INT 2
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: LD_INT 2
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: LD_INT 1
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 2
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: LD_INT 2
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: PUSH
67744: LD_INT 2
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: NEG
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 2
67774: NEG
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 2
67785: NEG
67786: PUSH
67787: LD_INT 1
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 2
67797: NEG
67798: PUSH
67799: LD_INT 2
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67828: LD_ADDR_VAR 0 18
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: LD_INT 0
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 1
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 1
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 1
67897: NEG
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 1
67909: NEG
67910: PUSH
67911: LD_INT 2
67913: NEG
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: LD_INT 2
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 1
67932: PUSH
67933: LD_INT 1
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 2
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 2
67953: PUSH
67954: LD_INT 1
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: LD_INT 2
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 1
67973: PUSH
67974: LD_INT 2
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: LD_INT 2
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: NEG
67994: PUSH
67995: LD_INT 1
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 2
68004: NEG
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 2
68015: NEG
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 2
68027: NEG
68028: PUSH
68029: LD_INT 2
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68058: LD_ADDR_VAR 0 19
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 1
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 1
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 1
68096: PUSH
68097: LD_INT 1
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: LD_INT 1
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 1
68127: NEG
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: PUSH
68141: LD_INT 2
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 0
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: LD_INT 1
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 2
68173: PUSH
68174: LD_INT 0
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 2
68183: PUSH
68184: LD_INT 1
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 2
68193: PUSH
68194: LD_INT 2
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 1
68203: PUSH
68204: LD_INT 2
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: LD_INT 2
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: LD_INT 1
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: NEG
68246: PUSH
68247: LD_INT 1
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: LD_INT 2
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68288: LD_ADDR_VAR 0 20
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 0
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 1
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 1
68326: PUSH
68327: LD_INT 1
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 0
68336: PUSH
68337: LD_INT 1
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 1
68346: NEG
68347: PUSH
68348: LD_INT 0
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 1
68357: NEG
68358: PUSH
68359: LD_INT 1
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 1
68369: NEG
68370: PUSH
68371: LD_INT 2
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 0
68381: PUSH
68382: LD_INT 2
68384: NEG
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 1
68392: PUSH
68393: LD_INT 1
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 2
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 2
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 2
68423: PUSH
68424: LD_INT 2
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 1
68433: PUSH
68434: LD_INT 2
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: LD_INT 2
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: PUSH
68455: LD_INT 1
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 2
68464: NEG
68465: PUSH
68466: LD_INT 0
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 2
68475: NEG
68476: PUSH
68477: LD_INT 1
68479: NEG
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 2
68487: NEG
68488: PUSH
68489: LD_INT 2
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68518: LD_ADDR_VAR 0 21
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: LD_INT 1
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: PUSH
68547: LD_INT 0
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: LD_INT 1
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: LD_INT 1
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 1
68576: NEG
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 1
68587: NEG
68588: PUSH
68589: LD_INT 1
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 1
68599: NEG
68600: PUSH
68601: LD_INT 2
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: LD_INT 2
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: PUSH
68623: LD_INT 1
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 2
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 2
68653: PUSH
68654: LD_INT 2
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 1
68663: PUSH
68664: LD_INT 2
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: LD_INT 2
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 1
68683: NEG
68684: PUSH
68685: LD_INT 1
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 2
68694: NEG
68695: PUSH
68696: LD_INT 0
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 2
68705: NEG
68706: PUSH
68707: LD_INT 1
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 2
68717: NEG
68718: PUSH
68719: LD_INT 2
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68748: LD_ADDR_VAR 0 22
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 0
68765: PUSH
68766: LD_INT 1
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 1
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 1
68786: PUSH
68787: LD_INT 1
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 0
68796: PUSH
68797: LD_INT 1
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 1
68806: NEG
68807: PUSH
68808: LD_INT 0
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 1
68817: NEG
68818: PUSH
68819: LD_INT 1
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 1
68829: NEG
68830: PUSH
68831: LD_INT 2
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: LD_INT 2
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 1
68852: PUSH
68853: LD_INT 1
68855: NEG
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 2
68863: PUSH
68864: LD_INT 0
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 2
68873: PUSH
68874: LD_INT 1
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 2
68883: PUSH
68884: LD_INT 2
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 1
68893: PUSH
68894: LD_INT 2
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 0
68903: PUSH
68904: LD_INT 2
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 1
68913: NEG
68914: PUSH
68915: LD_INT 1
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 2
68924: NEG
68925: PUSH
68926: LD_INT 0
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 2
68935: NEG
68936: PUSH
68937: LD_INT 1
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 2
68947: NEG
68948: PUSH
68949: LD_INT 2
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68978: LD_ADDR_VAR 0 23
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 0
68995: PUSH
68996: LD_INT 1
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 1
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: PUSH
69017: LD_INT 1
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 0
69026: PUSH
69027: LD_INT 1
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 1
69036: NEG
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 1
69047: NEG
69048: PUSH
69049: LD_INT 1
69051: NEG
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 1
69059: NEG
69060: PUSH
69061: LD_INT 2
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: LD_INT 2
69074: NEG
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 1
69082: PUSH
69083: LD_INT 1
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 2
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 2
69103: PUSH
69104: LD_INT 1
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 2
69113: PUSH
69114: LD_INT 2
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: LD_INT 2
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: LD_INT 2
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: LD_INT 1
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 2
69154: NEG
69155: PUSH
69156: LD_INT 0
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 2
69165: NEG
69166: PUSH
69167: LD_INT 1
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: NEG
69178: PUSH
69179: LD_INT 2
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 2
69189: NEG
69190: PUSH
69191: LD_INT 3
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 1
69201: NEG
69202: PUSH
69203: LD_INT 3
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: LD_INT 2
69216: NEG
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 2
69224: PUSH
69225: LD_INT 1
69227: NEG
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
69258: LD_ADDR_VAR 0 24
69262: PUSH
69263: LD_INT 0
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 0
69275: PUSH
69276: LD_INT 1
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: LD_INT 1
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 0
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 1
69327: NEG
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 1
69339: NEG
69340: PUSH
69341: LD_INT 2
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 2
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 1
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 2
69373: PUSH
69374: LD_INT 0
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: LD_INT 2
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: LD_INT 2
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: NEG
69424: PUSH
69425: LD_INT 1
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 2
69434: NEG
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 2
69445: NEG
69446: PUSH
69447: LD_INT 1
69449: NEG
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 2
69457: NEG
69458: PUSH
69459: LD_INT 2
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 1
69469: PUSH
69470: LD_INT 2
69472: NEG
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 2
69480: PUSH
69481: LD_INT 1
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 3
69491: PUSH
69492: LD_INT 1
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 3
69501: PUSH
69502: LD_INT 2
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
69534: LD_ADDR_VAR 0 25
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: LD_INT 1
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 1
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 1
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: LD_INT 1
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 1
69592: NEG
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 1
69603: NEG
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: LD_INT 2
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: LD_INT 1
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 2
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 2
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 2
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 0
69689: PUSH
69690: LD_INT 2
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 1
69699: NEG
69700: PUSH
69701: LD_INT 1
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: NEG
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: LD_INT 1
69725: NEG
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 2
69733: NEG
69734: PUSH
69735: LD_INT 2
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 3
69745: PUSH
69746: LD_INT 1
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 3
69755: PUSH
69756: LD_INT 2
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 2
69765: PUSH
69766: LD_INT 3
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 1
69775: PUSH
69776: LD_INT 3
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69808: LD_ADDR_VAR 0 26
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: LD_INT 0
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 0
69825: PUSH
69826: LD_INT 1
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: LD_INT 0
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 1
69846: PUSH
69847: LD_INT 1
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: LD_INT 1
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 1
69866: NEG
69867: PUSH
69868: LD_INT 0
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 1
69877: NEG
69878: PUSH
69879: LD_INT 1
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 1
69889: NEG
69890: PUSH
69891: LD_INT 2
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: LD_INT 2
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 1
69912: PUSH
69913: LD_INT 1
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 2
69923: PUSH
69924: LD_INT 0
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 2
69933: PUSH
69934: LD_INT 1
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 2
69943: PUSH
69944: LD_INT 2
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: LD_INT 2
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: LD_INT 2
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 1
69973: NEG
69974: PUSH
69975: LD_INT 1
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 2
69984: NEG
69985: PUSH
69986: LD_INT 0
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 2
69995: NEG
69996: PUSH
69997: LD_INT 1
69999: NEG
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 2
70007: NEG
70008: PUSH
70009: LD_INT 2
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 2
70019: PUSH
70020: LD_INT 3
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 1
70029: PUSH
70030: LD_INT 3
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 1
70039: NEG
70040: PUSH
70041: LD_INT 2
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 2
70050: NEG
70051: PUSH
70052: LD_INT 1
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70084: LD_ADDR_VAR 0 27
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: LD_INT 1
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: LD_INT 1
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 1
70142: NEG
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 1
70153: NEG
70154: PUSH
70155: LD_INT 1
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 1
70165: NEG
70166: PUSH
70167: LD_INT 2
70169: NEG
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 0
70177: PUSH
70178: LD_INT 2
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 1
70188: PUSH
70189: LD_INT 1
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 2
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 2
70209: PUSH
70210: LD_INT 1
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 2
70219: PUSH
70220: LD_INT 2
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 1
70229: PUSH
70230: LD_INT 2
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: LD_INT 2
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 1
70249: NEG
70250: PUSH
70251: LD_INT 1
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 2
70260: NEG
70261: PUSH
70262: LD_INT 0
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 2
70271: NEG
70272: PUSH
70273: LD_INT 1
70275: NEG
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 2
70283: NEG
70284: PUSH
70285: LD_INT 2
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 1
70295: NEG
70296: PUSH
70297: LD_INT 2
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 2
70306: NEG
70307: PUSH
70308: LD_INT 1
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 3
70317: NEG
70318: PUSH
70319: LD_INT 1
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 3
70329: NEG
70330: PUSH
70331: LD_INT 2
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70364: LD_ADDR_VAR 0 28
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 0
70381: PUSH
70382: LD_INT 1
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 1
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 1
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: NEG
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 1
70433: NEG
70434: PUSH
70435: LD_INT 1
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 1
70445: NEG
70446: PUSH
70447: LD_INT 2
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 0
70457: PUSH
70458: LD_INT 2
70460: NEG
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 1
70468: PUSH
70469: LD_INT 1
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 2
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 2
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 2
70499: PUSH
70500: LD_INT 2
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 1
70509: PUSH
70510: LD_INT 2
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 0
70519: PUSH
70520: LD_INT 2
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 1
70529: NEG
70530: PUSH
70531: LD_INT 1
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 2
70540: NEG
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 2
70551: NEG
70552: PUSH
70553: LD_INT 1
70555: NEG
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 2
70563: NEG
70564: PUSH
70565: LD_INT 2
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 2
70575: NEG
70576: PUSH
70577: LD_INT 3
70579: NEG
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 1
70587: NEG
70588: PUSH
70589: LD_INT 3
70591: NEG
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 3
70599: NEG
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 3
70611: NEG
70612: PUSH
70613: LD_INT 2
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
70646: LD_ADDR_VAR 0 29
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: LD_INT 0
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: LD_INT 1
70666: NEG
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 1
70674: PUSH
70675: LD_INT 0
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 1
70684: PUSH
70685: LD_INT 1
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: LD_INT 1
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 1
70704: NEG
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 1
70715: NEG
70716: PUSH
70717: LD_INT 1
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 1
70727: NEG
70728: PUSH
70729: LD_INT 2
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 0
70739: PUSH
70740: LD_INT 2
70742: NEG
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 1
70750: PUSH
70751: LD_INT 1
70753: NEG
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 2
70761: PUSH
70762: LD_INT 0
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 2
70771: PUSH
70772: LD_INT 1
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 1
70781: PUSH
70782: LD_INT 2
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 0
70791: PUSH
70792: LD_INT 2
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 1
70801: NEG
70802: PUSH
70803: LD_INT 1
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 2
70812: NEG
70813: PUSH
70814: LD_INT 1
70816: NEG
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 2
70824: NEG
70825: PUSH
70826: LD_INT 2
70828: NEG
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 2
70836: NEG
70837: PUSH
70838: LD_INT 3
70840: NEG
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 2
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 3
70859: PUSH
70860: LD_INT 1
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 1
70879: NEG
70880: PUSH
70881: LD_INT 2
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 3
70890: NEG
70891: PUSH
70892: LD_INT 2
70894: NEG
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70925: LD_ADDR_VAR 0 30
70929: PUSH
70930: LD_INT 0
70932: PUSH
70933: LD_INT 0
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 0
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 1
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 1
70963: PUSH
70964: LD_INT 1
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 0
70973: PUSH
70974: LD_INT 1
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 1
70983: NEG
70984: PUSH
70985: LD_INT 0
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 1
70994: NEG
70995: PUSH
70996: LD_INT 1
70998: NEG
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 1
71006: NEG
71007: PUSH
71008: LD_INT 2
71010: NEG
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 0
71018: PUSH
71019: LD_INT 2
71021: NEG
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 1
71029: PUSH
71030: LD_INT 1
71032: NEG
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 2
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 2
71050: PUSH
71051: LD_INT 1
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 2
71060: PUSH
71061: LD_INT 2
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 1
71070: PUSH
71071: LD_INT 2
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 1
71080: NEG
71081: PUSH
71082: LD_INT 1
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 2
71091: NEG
71092: PUSH
71093: LD_INT 0
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 2
71102: NEG
71103: PUSH
71104: LD_INT 1
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: NEG
71115: PUSH
71116: LD_INT 3
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 1
71126: PUSH
71127: LD_INT 2
71129: NEG
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 3
71137: PUSH
71138: LD_INT 2
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 2
71147: PUSH
71148: LD_INT 3
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 2
71157: NEG
71158: PUSH
71159: LD_INT 1
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 3
71168: NEG
71169: PUSH
71170: LD_INT 1
71172: NEG
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
71203: LD_ADDR_VAR 0 31
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: LD_INT 0
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: LD_INT 1
71223: NEG
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: LD_INT 0
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 1
71241: PUSH
71242: LD_INT 1
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 0
71251: PUSH
71252: LD_INT 1
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 1
71261: NEG
71262: PUSH
71263: LD_INT 0
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 1
71272: NEG
71273: PUSH
71274: LD_INT 1
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 1
71284: NEG
71285: PUSH
71286: LD_INT 2
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 1
71296: PUSH
71297: LD_INT 1
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 2
71307: PUSH
71308: LD_INT 0
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 2
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 2
71327: PUSH
71328: LD_INT 2
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 1
71337: PUSH
71338: LD_INT 2
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 0
71347: PUSH
71348: LD_INT 2
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 1
71357: NEG
71358: PUSH
71359: LD_INT 1
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 2
71368: NEG
71369: PUSH
71370: LD_INT 1
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 2
71380: NEG
71381: PUSH
71382: LD_INT 2
71384: NEG
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 2
71392: NEG
71393: PUSH
71394: LD_INT 3
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 2
71404: PUSH
71405: LD_INT 1
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 3
71415: PUSH
71416: LD_INT 1
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 1
71425: PUSH
71426: LD_INT 3
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 1
71435: NEG
71436: PUSH
71437: LD_INT 2
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 3
71446: NEG
71447: PUSH
71448: LD_INT 2
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71481: LD_ADDR_VAR 0 32
71485: PUSH
71486: LD_INT 0
71488: PUSH
71489: LD_INT 0
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 1
71501: NEG
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 1
71509: PUSH
71510: LD_INT 0
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 1
71519: PUSH
71520: LD_INT 1
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: LD_INT 1
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 1
71539: NEG
71540: PUSH
71541: LD_INT 0
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 1
71550: NEG
71551: PUSH
71552: LD_INT 1
71554: NEG
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 1
71562: NEG
71563: PUSH
71564: LD_INT 2
71566: NEG
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 0
71574: PUSH
71575: LD_INT 2
71577: NEG
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 1
71585: PUSH
71586: LD_INT 1
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 2
71596: PUSH
71597: LD_INT 1
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 2
71606: PUSH
71607: LD_INT 2
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 1
71616: PUSH
71617: LD_INT 2
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 0
71626: PUSH
71627: LD_INT 2
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 1
71636: NEG
71637: PUSH
71638: LD_INT 1
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 2
71647: NEG
71648: PUSH
71649: LD_INT 0
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 2
71658: NEG
71659: PUSH
71660: LD_INT 1
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 1
71670: NEG
71671: PUSH
71672: LD_INT 3
71674: NEG
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 1
71682: PUSH
71683: LD_INT 2
71685: NEG
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 3
71693: PUSH
71694: LD_INT 2
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 2
71703: PUSH
71704: LD_INT 3
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 2
71713: NEG
71714: PUSH
71715: LD_INT 1
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 3
71724: NEG
71725: PUSH
71726: LD_INT 1
71728: NEG
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
71759: LD_ADDR_VAR 0 33
71763: PUSH
71764: LD_INT 0
71766: PUSH
71767: LD_INT 0
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 0
71776: PUSH
71777: LD_INT 1
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 1
71787: PUSH
71788: LD_INT 0
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 1
71797: PUSH
71798: LD_INT 1
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 0
71807: PUSH
71808: LD_INT 1
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 1
71817: NEG
71818: PUSH
71819: LD_INT 0
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 1
71828: NEG
71829: PUSH
71830: LD_INT 1
71832: NEG
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 1
71840: NEG
71841: PUSH
71842: LD_INT 2
71844: NEG
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: PUSH
71850: LD_INT 1
71852: PUSH
71853: LD_INT 1
71855: NEG
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 2
71863: PUSH
71864: LD_INT 0
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 2
71873: PUSH
71874: LD_INT 1
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 1
71883: PUSH
71884: LD_INT 2
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 0
71893: PUSH
71894: LD_INT 2
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 1
71903: NEG
71904: PUSH
71905: LD_INT 1
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: LD_INT 2
71914: NEG
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 2
71925: NEG
71926: PUSH
71927: LD_INT 1
71929: NEG
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 2
71937: NEG
71938: PUSH
71939: LD_INT 2
71941: NEG
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 2
71949: NEG
71950: PUSH
71951: LD_INT 3
71953: NEG
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 2
71961: PUSH
71962: LD_INT 1
71964: NEG
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 3
71972: PUSH
71973: LD_INT 1
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 1
71982: PUSH
71983: LD_INT 3
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 1
71992: NEG
71993: PUSH
71994: LD_INT 2
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 3
72003: NEG
72004: PUSH
72005: LD_INT 2
72007: NEG
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
72038: LD_ADDR_VAR 0 34
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: LD_INT 0
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 0
72055: PUSH
72056: LD_INT 1
72058: NEG
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 1
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 1
72076: PUSH
72077: LD_INT 1
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: LD_INT 1
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 1
72096: NEG
72097: PUSH
72098: LD_INT 0
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 1
72107: NEG
72108: PUSH
72109: LD_INT 1
72111: NEG
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: NEG
72120: PUSH
72121: LD_INT 2
72123: NEG
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 0
72131: PUSH
72132: LD_INT 2
72134: NEG
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 1
72142: PUSH
72143: LD_INT 1
72145: NEG
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 2
72153: PUSH
72154: LD_INT 1
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 2
72163: PUSH
72164: LD_INT 2
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 1
72173: PUSH
72174: LD_INT 2
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 1
72183: NEG
72184: PUSH
72185: LD_INT 1
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 2
72194: NEG
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 2
72205: NEG
72206: PUSH
72207: LD_INT 1
72209: NEG
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 2
72217: NEG
72218: PUSH
72219: LD_INT 2
72221: NEG
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 1
72229: NEG
72230: PUSH
72231: LD_INT 3
72233: NEG
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 1
72241: PUSH
72242: LD_INT 2
72244: NEG
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 3
72252: PUSH
72253: LD_INT 2
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 2
72262: PUSH
72263: LD_INT 3
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 2
72272: NEG
72273: PUSH
72274: LD_INT 1
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 3
72283: NEG
72284: PUSH
72285: LD_INT 1
72287: NEG
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
72318: LD_ADDR_VAR 0 35
72322: PUSH
72323: LD_INT 0
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 0
72335: PUSH
72336: LD_INT 1
72338: NEG
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 1
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 1
72356: PUSH
72357: LD_INT 1
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: LD_INT 0
72366: PUSH
72367: LD_INT 1
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 1
72376: NEG
72377: PUSH
72378: LD_INT 0
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 1
72387: NEG
72388: PUSH
72389: LD_INT 1
72391: NEG
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 2
72399: PUSH
72400: LD_INT 1
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 2
72409: NEG
72410: PUSH
72411: LD_INT 1
72413: NEG
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
72430: LD_ADDR_VAR 0 36
72434: PUSH
72435: LD_INT 0
72437: PUSH
72438: LD_INT 0
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 0
72447: PUSH
72448: LD_INT 1
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 1
72458: PUSH
72459: LD_INT 0
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 1
72468: PUSH
72469: LD_INT 1
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 0
72478: PUSH
72479: LD_INT 1
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 1
72488: NEG
72489: PUSH
72490: LD_INT 0
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 1
72499: NEG
72500: PUSH
72501: LD_INT 1
72503: NEG
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 1
72511: NEG
72512: PUSH
72513: LD_INT 2
72515: NEG
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 1
72523: PUSH
72524: LD_INT 2
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
72542: LD_ADDR_VAR 0 37
72546: PUSH
72547: LD_INT 0
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 0
72559: PUSH
72560: LD_INT 1
72562: NEG
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 1
72570: PUSH
72571: LD_INT 0
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 1
72580: PUSH
72581: LD_INT 1
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: LD_INT 1
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 1
72600: NEG
72601: PUSH
72602: LD_INT 0
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 1
72611: NEG
72612: PUSH
72613: LD_INT 1
72615: NEG
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 1
72623: PUSH
72624: LD_INT 1
72626: NEG
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 1
72634: NEG
72635: PUSH
72636: LD_INT 1
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
72654: LD_ADDR_VAR 0 38
72658: PUSH
72659: LD_INT 0
72661: PUSH
72662: LD_INT 0
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 0
72671: PUSH
72672: LD_INT 1
72674: NEG
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 1
72682: PUSH
72683: LD_INT 0
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 1
72692: PUSH
72693: LD_INT 1
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: LD_INT 1
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 1
72712: NEG
72713: PUSH
72714: LD_INT 0
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 1
72723: NEG
72724: PUSH
72725: LD_INT 1
72727: NEG
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 2
72735: PUSH
72736: LD_INT 1
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 2
72745: NEG
72746: PUSH
72747: LD_INT 1
72749: NEG
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
72766: LD_ADDR_VAR 0 39
72770: PUSH
72771: LD_INT 0
72773: PUSH
72774: LD_INT 0
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 0
72783: PUSH
72784: LD_INT 1
72786: NEG
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 1
72794: PUSH
72795: LD_INT 0
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 1
72804: PUSH
72805: LD_INT 1
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 0
72814: PUSH
72815: LD_INT 1
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 1
72824: NEG
72825: PUSH
72826: LD_INT 0
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 1
72835: NEG
72836: PUSH
72837: LD_INT 1
72839: NEG
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 1
72847: NEG
72848: PUSH
72849: LD_INT 2
72851: NEG
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 1
72859: PUSH
72860: LD_INT 2
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
72878: LD_ADDR_VAR 0 40
72882: PUSH
72883: LD_INT 0
72885: PUSH
72886: LD_INT 0
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 0
72895: PUSH
72896: LD_INT 1
72898: NEG
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: PUSH
72904: LD_INT 1
72906: PUSH
72907: LD_INT 0
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PUSH
72914: LD_INT 1
72916: PUSH
72917: LD_INT 1
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 0
72926: PUSH
72927: LD_INT 1
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 1
72936: NEG
72937: PUSH
72938: LD_INT 0
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 1
72947: NEG
72948: PUSH
72949: LD_INT 1
72951: NEG
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 1
72959: PUSH
72960: LD_INT 1
72962: NEG
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 1
72970: NEG
72971: PUSH
72972: LD_INT 1
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72990: LD_ADDR_VAR 0 41
72994: PUSH
72995: LD_INT 0
72997: PUSH
72998: LD_INT 0
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 0
73007: PUSH
73008: LD_INT 1
73010: NEG
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 1
73018: PUSH
73019: LD_INT 0
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 1
73028: PUSH
73029: LD_INT 1
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 0
73038: PUSH
73039: LD_INT 1
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 1
73048: NEG
73049: PUSH
73050: LD_INT 0
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 1
73059: NEG
73060: PUSH
73061: LD_INT 1
73063: NEG
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 1
73071: NEG
73072: PUSH
73073: LD_INT 2
73075: NEG
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 1
73083: PUSH
73084: LD_INT 1
73086: NEG
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: LD_INT 2
73094: PUSH
73095: LD_INT 0
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 2
73104: PUSH
73105: LD_INT 1
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 2
73114: PUSH
73115: LD_INT 2
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 1
73124: PUSH
73125: LD_INT 2
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 1
73134: NEG
73135: PUSH
73136: LD_INT 1
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 2
73145: NEG
73146: PUSH
73147: LD_INT 0
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 2
73156: NEG
73157: PUSH
73158: LD_INT 1
73160: NEG
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: LD_INT 2
73168: NEG
73169: PUSH
73170: LD_INT 2
73172: NEG
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 2
73180: NEG
73181: PUSH
73182: LD_INT 3
73184: NEG
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 2
73192: PUSH
73193: LD_INT 1
73195: NEG
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 3
73203: PUSH
73204: LD_INT 0
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 3
73213: PUSH
73214: LD_INT 1
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 3
73223: PUSH
73224: LD_INT 2
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 3
73233: PUSH
73234: LD_INT 3
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 2
73243: PUSH
73244: LD_INT 3
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 2
73253: NEG
73254: PUSH
73255: LD_INT 1
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 3
73264: NEG
73265: PUSH
73266: LD_INT 0
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: LD_INT 3
73275: NEG
73276: PUSH
73277: LD_INT 1
73279: NEG
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: LD_INT 3
73287: NEG
73288: PUSH
73289: LD_INT 2
73291: NEG
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: LD_INT 3
73299: NEG
73300: PUSH
73301: LD_INT 3
73303: NEG
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73340: LD_ADDR_VAR 0 42
73344: PUSH
73345: LD_INT 0
73347: PUSH
73348: LD_INT 0
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 0
73357: PUSH
73358: LD_INT 1
73360: NEG
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 1
73368: PUSH
73369: LD_INT 0
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 1
73378: PUSH
73379: LD_INT 1
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 0
73388: PUSH
73389: LD_INT 1
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 1
73398: NEG
73399: PUSH
73400: LD_INT 0
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 1
73409: NEG
73410: PUSH
73411: LD_INT 1
73413: NEG
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_INT 1
73421: NEG
73422: PUSH
73423: LD_INT 2
73425: NEG
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 0
73433: PUSH
73434: LD_INT 2
73436: NEG
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 1
73444: PUSH
73445: LD_INT 1
73447: NEG
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 2
73455: PUSH
73456: LD_INT 1
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 2
73465: PUSH
73466: LD_INT 2
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 1
73475: PUSH
73476: LD_INT 2
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 0
73485: PUSH
73486: LD_INT 2
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 1
73495: NEG
73496: PUSH
73497: LD_INT 1
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 2
73506: NEG
73507: PUSH
73508: LD_INT 1
73510: NEG
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 2
73518: NEG
73519: PUSH
73520: LD_INT 2
73522: NEG
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: LD_INT 2
73530: NEG
73531: PUSH
73532: LD_INT 3
73534: NEG
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 1
73542: NEG
73543: PUSH
73544: LD_INT 3
73546: NEG
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 0
73554: PUSH
73555: LD_INT 3
73557: NEG
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PUSH
73563: LD_INT 1
73565: PUSH
73566: LD_INT 2
73568: NEG
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 3
73576: PUSH
73577: LD_INT 2
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 3
73586: PUSH
73587: LD_INT 3
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 2
73596: PUSH
73597: LD_INT 3
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 1
73606: PUSH
73607: LD_INT 3
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: LD_INT 3
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 1
73626: NEG
73627: PUSH
73628: LD_INT 2
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 3
73637: NEG
73638: PUSH
73639: LD_INT 2
73641: NEG
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 3
73649: NEG
73650: PUSH
73651: LD_INT 3
73653: NEG
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73690: LD_ADDR_VAR 0 43
73694: PUSH
73695: LD_INT 0
73697: PUSH
73698: LD_INT 0
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 0
73707: PUSH
73708: LD_INT 1
73710: NEG
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 1
73718: PUSH
73719: LD_INT 0
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 1
73728: PUSH
73729: LD_INT 1
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PUSH
73736: LD_INT 0
73738: PUSH
73739: LD_INT 1
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 1
73748: NEG
73749: PUSH
73750: LD_INT 0
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 1
73759: NEG
73760: PUSH
73761: LD_INT 1
73763: NEG
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: PUSH
73769: LD_INT 1
73771: NEG
73772: PUSH
73773: LD_INT 2
73775: NEG
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: PUSH
73781: LD_INT 0
73783: PUSH
73784: LD_INT 2
73786: NEG
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 1
73794: PUSH
73795: LD_INT 1
73797: NEG
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 2
73805: PUSH
73806: LD_INT 0
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 2
73815: PUSH
73816: LD_INT 1
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 1
73825: PUSH
73826: LD_INT 2
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: PUSH
73833: LD_INT 0
73835: PUSH
73836: LD_INT 2
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PUSH
73843: LD_INT 1
73845: NEG
73846: PUSH
73847: LD_INT 1
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 2
73856: NEG
73857: PUSH
73858: LD_INT 0
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PUSH
73865: LD_INT 2
73867: NEG
73868: PUSH
73869: LD_INT 1
73871: NEG
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 1
73879: NEG
73880: PUSH
73881: LD_INT 3
73883: NEG
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 0
73891: PUSH
73892: LD_INT 3
73894: NEG
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 1
73902: PUSH
73903: LD_INT 2
73905: NEG
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 2
73913: PUSH
73914: LD_INT 1
73916: NEG
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: LD_INT 3
73924: PUSH
73925: LD_INT 0
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: LD_INT 3
73934: PUSH
73935: LD_INT 1
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PUSH
73942: LD_INT 1
73944: PUSH
73945: LD_INT 3
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: LD_INT 0
73954: PUSH
73955: LD_INT 3
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: PUSH
73962: LD_INT 1
73964: NEG
73965: PUSH
73966: LD_INT 2
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: PUSH
73973: LD_INT 2
73975: NEG
73976: PUSH
73977: LD_INT 1
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 3
73986: NEG
73987: PUSH
73988: LD_INT 0
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: PUSH
73995: LD_INT 3
73997: NEG
73998: PUSH
73999: LD_INT 1
74001: NEG
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74038: LD_ADDR_VAR 0 44
74042: PUSH
74043: LD_INT 0
74045: PUSH
74046: LD_INT 0
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 0
74055: PUSH
74056: LD_INT 1
74058: NEG
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 1
74066: PUSH
74067: LD_INT 0
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 1
74076: PUSH
74077: LD_INT 1
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 0
74086: PUSH
74087: LD_INT 1
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 1
74096: NEG
74097: PUSH
74098: LD_INT 0
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 1
74107: NEG
74108: PUSH
74109: LD_INT 1
74111: NEG
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 1
74119: NEG
74120: PUSH
74121: LD_INT 2
74123: NEG
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 1
74131: PUSH
74132: LD_INT 1
74134: NEG
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: LD_INT 2
74142: PUSH
74143: LD_INT 0
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: LD_INT 2
74152: PUSH
74153: LD_INT 1
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 2
74162: PUSH
74163: LD_INT 2
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_INT 1
74172: PUSH
74173: LD_INT 2
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 1
74182: NEG
74183: PUSH
74184: LD_INT 1
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 2
74193: NEG
74194: PUSH
74195: LD_INT 0
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 2
74204: NEG
74205: PUSH
74206: LD_INT 1
74208: NEG
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 2
74216: NEG
74217: PUSH
74218: LD_INT 2
74220: NEG
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 2
74228: NEG
74229: PUSH
74230: LD_INT 3
74232: NEG
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: PUSH
74238: LD_INT 2
74240: PUSH
74241: LD_INT 1
74243: NEG
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_INT 3
74251: PUSH
74252: LD_INT 0
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PUSH
74259: LD_INT 3
74261: PUSH
74262: LD_INT 1
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: LD_INT 3
74271: PUSH
74272: LD_INT 2
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 3
74281: PUSH
74282: LD_INT 3
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 2
74291: PUSH
74292: LD_INT 3
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 2
74301: NEG
74302: PUSH
74303: LD_INT 1
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 3
74312: NEG
74313: PUSH
74314: LD_INT 0
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PUSH
74321: LD_INT 3
74323: NEG
74324: PUSH
74325: LD_INT 1
74327: NEG
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PUSH
74333: LD_INT 3
74335: NEG
74336: PUSH
74337: LD_INT 2
74339: NEG
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: LD_INT 3
74347: NEG
74348: PUSH
74349: LD_INT 3
74351: NEG
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74388: LD_ADDR_VAR 0 45
74392: PUSH
74393: LD_INT 0
74395: PUSH
74396: LD_INT 0
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: LD_INT 1
74408: NEG
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: LD_INT 1
74416: PUSH
74417: LD_INT 0
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: LD_INT 1
74426: PUSH
74427: LD_INT 1
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: PUSH
74434: LD_INT 0
74436: PUSH
74437: LD_INT 1
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 1
74446: NEG
74447: PUSH
74448: LD_INT 0
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 1
74457: NEG
74458: PUSH
74459: LD_INT 1
74461: NEG
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 1
74469: NEG
74470: PUSH
74471: LD_INT 2
74473: NEG
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 0
74481: PUSH
74482: LD_INT 2
74484: NEG
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: LD_INT 1
74492: PUSH
74493: LD_INT 1
74495: NEG
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 2
74503: PUSH
74504: LD_INT 1
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: LD_INT 2
74513: PUSH
74514: LD_INT 2
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: LD_INT 1
74523: PUSH
74524: LD_INT 2
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: PUSH
74531: LD_INT 0
74533: PUSH
74534: LD_INT 2
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: LD_INT 1
74543: NEG
74544: PUSH
74545: LD_INT 1
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PUSH
74552: LD_INT 2
74554: NEG
74555: PUSH
74556: LD_INT 1
74558: NEG
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: LD_INT 2
74566: NEG
74567: PUSH
74568: LD_INT 2
74570: NEG
74571: PUSH
74572: EMPTY
74573: LIST
74574: LIST
74575: PUSH
74576: LD_INT 2
74578: NEG
74579: PUSH
74580: LD_INT 3
74582: NEG
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 1
74590: NEG
74591: PUSH
74592: LD_INT 3
74594: NEG
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 0
74602: PUSH
74603: LD_INT 3
74605: NEG
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 1
74613: PUSH
74614: LD_INT 2
74616: NEG
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: PUSH
74622: LD_INT 3
74624: PUSH
74625: LD_INT 2
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: PUSH
74632: LD_INT 3
74634: PUSH
74635: LD_INT 3
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: LD_INT 2
74644: PUSH
74645: LD_INT 3
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 1
74654: PUSH
74655: LD_INT 3
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: LD_INT 0
74664: PUSH
74665: LD_INT 3
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 1
74674: NEG
74675: PUSH
74676: LD_INT 2
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: PUSH
74683: LD_INT 3
74685: NEG
74686: PUSH
74687: LD_INT 2
74689: NEG
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PUSH
74695: LD_INT 3
74697: NEG
74698: PUSH
74699: LD_INT 3
74701: NEG
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: LIST
74718: LIST
74719: LIST
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: LIST
74732: LIST
74733: LIST
74734: LIST
74735: LIST
74736: LIST
74737: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74738: LD_ADDR_VAR 0 46
74742: PUSH
74743: LD_INT 0
74745: PUSH
74746: LD_INT 0
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: PUSH
74753: LD_INT 0
74755: PUSH
74756: LD_INT 1
74758: NEG
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: PUSH
74764: LD_INT 1
74766: PUSH
74767: LD_INT 0
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_INT 1
74776: PUSH
74777: LD_INT 1
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PUSH
74784: LD_INT 0
74786: PUSH
74787: LD_INT 1
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_INT 1
74796: NEG
74797: PUSH
74798: LD_INT 0
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 1
74807: NEG
74808: PUSH
74809: LD_INT 1
74811: NEG
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: PUSH
74817: LD_INT 1
74819: NEG
74820: PUSH
74821: LD_INT 2
74823: NEG
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: PUSH
74829: LD_INT 0
74831: PUSH
74832: LD_INT 2
74834: NEG
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_INT 1
74842: PUSH
74843: LD_INT 1
74845: NEG
74846: PUSH
74847: EMPTY
74848: LIST
74849: LIST
74850: PUSH
74851: LD_INT 2
74853: PUSH
74854: LD_INT 0
74856: PUSH
74857: EMPTY
74858: LIST
74859: LIST
74860: PUSH
74861: LD_INT 2
74863: PUSH
74864: LD_INT 1
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 1
74873: PUSH
74874: LD_INT 2
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 0
74883: PUSH
74884: LD_INT 2
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: PUSH
74891: LD_INT 1
74893: NEG
74894: PUSH
74895: LD_INT 1
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_INT 2
74904: NEG
74905: PUSH
74906: LD_INT 0
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 2
74915: NEG
74916: PUSH
74917: LD_INT 1
74919: NEG
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: PUSH
74925: LD_INT 1
74927: NEG
74928: PUSH
74929: LD_INT 3
74931: NEG
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PUSH
74937: LD_INT 0
74939: PUSH
74940: LD_INT 3
74942: NEG
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: PUSH
74948: LD_INT 1
74950: PUSH
74951: LD_INT 2
74953: NEG
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: LD_INT 2
74961: PUSH
74962: LD_INT 1
74964: NEG
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PUSH
74970: LD_INT 3
74972: PUSH
74973: LD_INT 0
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 3
74982: PUSH
74983: LD_INT 1
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 1
74992: PUSH
74993: LD_INT 3
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: LD_INT 0
75002: PUSH
75003: LD_INT 3
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: PUSH
75010: LD_INT 1
75012: NEG
75013: PUSH
75014: LD_INT 2
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: LD_INT 2
75023: NEG
75024: PUSH
75025: LD_INT 1
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: PUSH
75032: LD_INT 3
75034: NEG
75035: PUSH
75036: LD_INT 0
75038: PUSH
75039: EMPTY
75040: LIST
75041: LIST
75042: PUSH
75043: LD_INT 3
75045: NEG
75046: PUSH
75047: LD_INT 1
75049: NEG
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: LIST
75085: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75086: LD_ADDR_VAR 0 47
75090: PUSH
75091: LD_INT 0
75093: PUSH
75094: LD_INT 0
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: PUSH
75101: LD_INT 0
75103: PUSH
75104: LD_INT 1
75106: NEG
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: LD_INT 1
75114: PUSH
75115: LD_INT 0
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PUSH
75122: LD_INT 1
75124: PUSH
75125: LD_INT 1
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 0
75134: PUSH
75135: LD_INT 1
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 1
75144: NEG
75145: PUSH
75146: LD_INT 0
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: PUSH
75153: LD_INT 1
75155: NEG
75156: PUSH
75157: LD_INT 1
75159: NEG
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_INT 1
75167: NEG
75168: PUSH
75169: LD_INT 2
75171: NEG
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: LD_INT 0
75179: PUSH
75180: LD_INT 2
75182: NEG
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: LD_INT 1
75190: PUSH
75191: LD_INT 1
75193: NEG
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 2
75201: NEG
75202: PUSH
75203: LD_INT 1
75205: NEG
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 2
75213: NEG
75214: PUSH
75215: LD_INT 2
75217: NEG
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
75237: LD_ADDR_VAR 0 48
75241: PUSH
75242: LD_INT 0
75244: PUSH
75245: LD_INT 0
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: PUSH
75252: LD_INT 0
75254: PUSH
75255: LD_INT 1
75257: NEG
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 1
75265: PUSH
75266: LD_INT 0
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 1
75275: PUSH
75276: LD_INT 1
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 0
75285: PUSH
75286: LD_INT 1
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: LD_INT 1
75295: NEG
75296: PUSH
75297: LD_INT 0
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: PUSH
75304: LD_INT 1
75306: NEG
75307: PUSH
75308: LD_INT 1
75310: NEG
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: LD_INT 1
75318: NEG
75319: PUSH
75320: LD_INT 2
75322: NEG
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 0
75330: PUSH
75331: LD_INT 2
75333: NEG
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: PUSH
75339: LD_INT 1
75341: PUSH
75342: LD_INT 1
75344: NEG
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: PUSH
75350: LD_INT 2
75352: PUSH
75353: LD_INT 0
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: LD_INT 2
75362: PUSH
75363: LD_INT 1
75365: PUSH
75366: EMPTY
75367: LIST
75368: LIST
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
75384: LD_ADDR_VAR 0 49
75388: PUSH
75389: LD_INT 0
75391: PUSH
75392: LD_INT 0
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 0
75401: PUSH
75402: LD_INT 1
75404: NEG
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: PUSH
75410: LD_INT 1
75412: PUSH
75413: LD_INT 0
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PUSH
75420: LD_INT 1
75422: PUSH
75423: LD_INT 1
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: PUSH
75430: LD_INT 0
75432: PUSH
75433: LD_INT 1
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: PUSH
75440: LD_INT 1
75442: NEG
75443: PUSH
75444: LD_INT 0
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: PUSH
75451: LD_INT 1
75453: NEG
75454: PUSH
75455: LD_INT 1
75457: NEG
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 1
75465: PUSH
75466: LD_INT 1
75468: NEG
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 2
75476: PUSH
75477: LD_INT 0
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: PUSH
75484: LD_INT 2
75486: PUSH
75487: LD_INT 1
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: PUSH
75494: LD_INT 2
75496: PUSH
75497: LD_INT 2
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: LD_INT 1
75506: PUSH
75507: LD_INT 2
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
75528: LD_ADDR_VAR 0 50
75532: PUSH
75533: LD_INT 0
75535: PUSH
75536: LD_INT 0
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 0
75545: PUSH
75546: LD_INT 1
75548: NEG
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: LD_INT 1
75556: PUSH
75557: LD_INT 0
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: LD_INT 1
75566: PUSH
75567: LD_INT 1
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: PUSH
75574: LD_INT 0
75576: PUSH
75577: LD_INT 1
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: PUSH
75584: LD_INT 1
75586: NEG
75587: PUSH
75588: LD_INT 0
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: LD_INT 1
75597: NEG
75598: PUSH
75599: LD_INT 1
75601: NEG
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 2
75609: PUSH
75610: LD_INT 1
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: LD_INT 2
75619: PUSH
75620: LD_INT 2
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: PUSH
75627: LD_INT 1
75629: PUSH
75630: LD_INT 2
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: PUSH
75637: LD_INT 0
75639: PUSH
75640: LD_INT 2
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: PUSH
75647: LD_INT 1
75649: NEG
75650: PUSH
75651: LD_INT 1
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
75672: LD_ADDR_VAR 0 51
75676: PUSH
75677: LD_INT 0
75679: PUSH
75680: LD_INT 0
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: PUSH
75687: LD_INT 0
75689: PUSH
75690: LD_INT 1
75692: NEG
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 1
75700: PUSH
75701: LD_INT 0
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 1
75710: PUSH
75711: LD_INT 1
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 0
75720: PUSH
75721: LD_INT 1
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: LD_INT 1
75730: NEG
75731: PUSH
75732: LD_INT 0
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: PUSH
75739: LD_INT 1
75741: NEG
75742: PUSH
75743: LD_INT 1
75745: NEG
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 1
75753: PUSH
75754: LD_INT 2
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: LD_INT 2
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 1
75773: NEG
75774: PUSH
75775: LD_INT 1
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: PUSH
75782: LD_INT 2
75784: NEG
75785: PUSH
75786: LD_INT 0
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: PUSH
75793: LD_INT 2
75795: NEG
75796: PUSH
75797: LD_INT 1
75799: NEG
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75819: LD_ADDR_VAR 0 52
75823: PUSH
75824: LD_INT 0
75826: PUSH
75827: LD_INT 0
75829: PUSH
75830: EMPTY
75831: LIST
75832: LIST
75833: PUSH
75834: LD_INT 0
75836: PUSH
75837: LD_INT 1
75839: NEG
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 1
75847: PUSH
75848: LD_INT 0
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: PUSH
75855: LD_INT 1
75857: PUSH
75858: LD_INT 1
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: PUSH
75865: LD_INT 0
75867: PUSH
75868: LD_INT 1
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: PUSH
75875: LD_INT 1
75877: NEG
75878: PUSH
75879: LD_INT 0
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PUSH
75886: LD_INT 1
75888: NEG
75889: PUSH
75890: LD_INT 1
75892: NEG
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: PUSH
75898: LD_INT 1
75900: NEG
75901: PUSH
75902: LD_INT 2
75904: NEG
75905: PUSH
75906: EMPTY
75907: LIST
75908: LIST
75909: PUSH
75910: LD_INT 1
75912: NEG
75913: PUSH
75914: LD_INT 1
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PUSH
75921: LD_INT 2
75923: NEG
75924: PUSH
75925: LD_INT 0
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: PUSH
75932: LD_INT 2
75934: NEG
75935: PUSH
75936: LD_INT 1
75938: NEG
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: PUSH
75944: LD_INT 2
75946: NEG
75947: PUSH
75948: LD_INT 2
75950: NEG
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75970: LD_ADDR_VAR 0 53
75974: PUSH
75975: LD_INT 0
75977: PUSH
75978: LD_INT 0
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: LD_INT 0
75987: PUSH
75988: LD_INT 1
75990: NEG
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: PUSH
75996: LD_INT 1
75998: PUSH
75999: LD_INT 0
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PUSH
76006: LD_INT 1
76008: PUSH
76009: LD_INT 1
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PUSH
76016: LD_INT 0
76018: PUSH
76019: LD_INT 1
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 1
76028: NEG
76029: PUSH
76030: LD_INT 0
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: PUSH
76037: LD_INT 1
76039: NEG
76040: PUSH
76041: LD_INT 1
76043: NEG
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 1
76051: NEG
76052: PUSH
76053: LD_INT 2
76055: NEG
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: PUSH
76061: LD_INT 0
76063: PUSH
76064: LD_INT 2
76066: NEG
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: PUSH
76072: LD_INT 1
76074: PUSH
76075: LD_INT 1
76077: NEG
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: LD_INT 2
76085: PUSH
76086: LD_INT 0
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 2
76095: PUSH
76096: LD_INT 1
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: LD_INT 2
76105: PUSH
76106: LD_INT 2
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: PUSH
76113: LD_INT 1
76115: PUSH
76116: LD_INT 2
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: PUSH
76123: LD_INT 0
76125: PUSH
76126: LD_INT 2
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_INT 1
76135: NEG
76136: PUSH
76137: LD_INT 1
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 2
76146: NEG
76147: PUSH
76148: LD_INT 0
76150: PUSH
76151: EMPTY
76152: LIST
76153: LIST
76154: PUSH
76155: LD_INT 2
76157: NEG
76158: PUSH
76159: LD_INT 1
76161: NEG
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PUSH
76167: LD_INT 2
76169: NEG
76170: PUSH
76171: LD_INT 2
76173: NEG
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: PUSH
76179: EMPTY
76180: LIST
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: LIST
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76200: LD_ADDR_VAR 0 54
76204: PUSH
76205: LD_INT 0
76207: PUSH
76208: LD_INT 0
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: LD_INT 0
76217: PUSH
76218: LD_INT 1
76220: NEG
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: PUSH
76226: LD_INT 1
76228: PUSH
76229: LD_INT 0
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: PUSH
76236: LD_INT 1
76238: PUSH
76239: LD_INT 1
76241: PUSH
76242: EMPTY
76243: LIST
76244: LIST
76245: PUSH
76246: LD_INT 0
76248: PUSH
76249: LD_INT 1
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: PUSH
76256: LD_INT 1
76258: NEG
76259: PUSH
76260: LD_INT 0
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: PUSH
76267: LD_INT 1
76269: NEG
76270: PUSH
76271: LD_INT 1
76273: NEG
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: PUSH
76279: LD_INT 1
76281: NEG
76282: PUSH
76283: LD_INT 2
76285: NEG
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: PUSH
76291: LD_INT 0
76293: PUSH
76294: LD_INT 2
76296: NEG
76297: PUSH
76298: EMPTY
76299: LIST
76300: LIST
76301: PUSH
76302: LD_INT 1
76304: PUSH
76305: LD_INT 1
76307: NEG
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: LD_INT 2
76315: PUSH
76316: LD_INT 0
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: LD_INT 2
76325: PUSH
76326: LD_INT 1
76328: PUSH
76329: EMPTY
76330: LIST
76331: LIST
76332: PUSH
76333: LD_INT 2
76335: PUSH
76336: LD_INT 2
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: PUSH
76343: LD_INT 1
76345: PUSH
76346: LD_INT 2
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 0
76355: PUSH
76356: LD_INT 2
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: LD_INT 1
76365: NEG
76366: PUSH
76367: LD_INT 1
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: LD_INT 2
76376: NEG
76377: PUSH
76378: LD_INT 0
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: LD_INT 2
76387: NEG
76388: PUSH
76389: LD_INT 1
76391: NEG
76392: PUSH
76393: EMPTY
76394: LIST
76395: LIST
76396: PUSH
76397: LD_INT 2
76399: NEG
76400: PUSH
76401: LD_INT 2
76403: NEG
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: LIST
76413: LIST
76414: LIST
76415: LIST
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76430: LD_ADDR_VAR 0 55
76434: PUSH
76435: LD_INT 0
76437: PUSH
76438: LD_INT 0
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: PUSH
76445: LD_INT 0
76447: PUSH
76448: LD_INT 1
76450: NEG
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: PUSH
76456: LD_INT 1
76458: PUSH
76459: LD_INT 0
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: PUSH
76466: LD_INT 1
76468: PUSH
76469: LD_INT 1
76471: PUSH
76472: EMPTY
76473: LIST
76474: LIST
76475: PUSH
76476: LD_INT 0
76478: PUSH
76479: LD_INT 1
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: PUSH
76486: LD_INT 1
76488: NEG
76489: PUSH
76490: LD_INT 0
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: PUSH
76497: LD_INT 1
76499: NEG
76500: PUSH
76501: LD_INT 1
76503: NEG
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: PUSH
76509: LD_INT 1
76511: NEG
76512: PUSH
76513: LD_INT 2
76515: NEG
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: PUSH
76521: LD_INT 0
76523: PUSH
76524: LD_INT 2
76526: NEG
76527: PUSH
76528: EMPTY
76529: LIST
76530: LIST
76531: PUSH
76532: LD_INT 1
76534: PUSH
76535: LD_INT 1
76537: NEG
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: PUSH
76543: LD_INT 2
76545: PUSH
76546: LD_INT 0
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: PUSH
76553: LD_INT 2
76555: PUSH
76556: LD_INT 1
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PUSH
76563: LD_INT 2
76565: PUSH
76566: LD_INT 2
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: PUSH
76573: LD_INT 1
76575: PUSH
76576: LD_INT 2
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 0
76585: PUSH
76586: LD_INT 2
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 1
76595: NEG
76596: PUSH
76597: LD_INT 1
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 2
76606: NEG
76607: PUSH
76608: LD_INT 0
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 2
76617: NEG
76618: PUSH
76619: LD_INT 1
76621: NEG
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 2
76629: NEG
76630: PUSH
76631: LD_INT 2
76633: NEG
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: LIST
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76660: LD_ADDR_VAR 0 56
76664: PUSH
76665: LD_INT 0
76667: PUSH
76668: LD_INT 0
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PUSH
76675: LD_INT 0
76677: PUSH
76678: LD_INT 1
76680: NEG
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 1
76688: PUSH
76689: LD_INT 0
76691: PUSH
76692: EMPTY
76693: LIST
76694: LIST
76695: PUSH
76696: LD_INT 1
76698: PUSH
76699: LD_INT 1
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: LD_INT 0
76708: PUSH
76709: LD_INT 1
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: LD_INT 1
76718: NEG
76719: PUSH
76720: LD_INT 0
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PUSH
76727: LD_INT 1
76729: NEG
76730: PUSH
76731: LD_INT 1
76733: NEG
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: PUSH
76739: LD_INT 1
76741: NEG
76742: PUSH
76743: LD_INT 2
76745: NEG
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: PUSH
76751: LD_INT 0
76753: PUSH
76754: LD_INT 2
76756: NEG
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: PUSH
76762: LD_INT 1
76764: PUSH
76765: LD_INT 1
76767: NEG
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 2
76775: PUSH
76776: LD_INT 0
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 2
76785: PUSH
76786: LD_INT 1
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PUSH
76793: LD_INT 2
76795: PUSH
76796: LD_INT 2
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: PUSH
76803: LD_INT 1
76805: PUSH
76806: LD_INT 2
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: PUSH
76813: LD_INT 0
76815: PUSH
76816: LD_INT 2
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: PUSH
76823: LD_INT 1
76825: NEG
76826: PUSH
76827: LD_INT 1
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PUSH
76834: LD_INT 2
76836: NEG
76837: PUSH
76838: LD_INT 0
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 2
76847: NEG
76848: PUSH
76849: LD_INT 1
76851: NEG
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 2
76859: NEG
76860: PUSH
76861: LD_INT 2
76863: NEG
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: LIST
76875: LIST
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: LIST
76881: LIST
76882: LIST
76883: LIST
76884: LIST
76885: LIST
76886: LIST
76887: LIST
76888: LIST
76889: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76890: LD_ADDR_VAR 0 57
76894: PUSH
76895: LD_INT 0
76897: PUSH
76898: LD_INT 0
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: PUSH
76905: LD_INT 0
76907: PUSH
76908: LD_INT 1
76910: NEG
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PUSH
76916: LD_INT 1
76918: PUSH
76919: LD_INT 0
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 1
76928: PUSH
76929: LD_INT 1
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PUSH
76936: LD_INT 0
76938: PUSH
76939: LD_INT 1
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: PUSH
76946: LD_INT 1
76948: NEG
76949: PUSH
76950: LD_INT 0
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PUSH
76957: LD_INT 1
76959: NEG
76960: PUSH
76961: LD_INT 1
76963: NEG
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 1
76971: NEG
76972: PUSH
76973: LD_INT 2
76975: NEG
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: PUSH
76981: LD_INT 0
76983: PUSH
76984: LD_INT 2
76986: NEG
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: LD_INT 1
76994: PUSH
76995: LD_INT 1
76997: NEG
76998: PUSH
76999: EMPTY
77000: LIST
77001: LIST
77002: PUSH
77003: LD_INT 2
77005: PUSH
77006: LD_INT 0
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 2
77015: PUSH
77016: LD_INT 1
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PUSH
77023: LD_INT 2
77025: PUSH
77026: LD_INT 2
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: PUSH
77033: LD_INT 1
77035: PUSH
77036: LD_INT 2
77038: PUSH
77039: EMPTY
77040: LIST
77041: LIST
77042: PUSH
77043: LD_INT 0
77045: PUSH
77046: LD_INT 2
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: PUSH
77053: LD_INT 1
77055: NEG
77056: PUSH
77057: LD_INT 1
77059: PUSH
77060: EMPTY
77061: LIST
77062: LIST
77063: PUSH
77064: LD_INT 2
77066: NEG
77067: PUSH
77068: LD_INT 0
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: PUSH
77075: LD_INT 2
77077: NEG
77078: PUSH
77079: LD_INT 1
77081: NEG
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: PUSH
77087: LD_INT 2
77089: NEG
77090: PUSH
77091: LD_INT 2
77093: NEG
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: LIST
77111: LIST
77112: LIST
77113: LIST
77114: LIST
77115: LIST
77116: LIST
77117: LIST
77118: LIST
77119: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77120: LD_ADDR_VAR 0 58
77124: PUSH
77125: LD_INT 0
77127: PUSH
77128: LD_INT 0
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PUSH
77135: LD_INT 0
77137: PUSH
77138: LD_INT 1
77140: NEG
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: PUSH
77146: LD_INT 1
77148: PUSH
77149: LD_INT 0
77151: PUSH
77152: EMPTY
77153: LIST
77154: LIST
77155: PUSH
77156: LD_INT 1
77158: PUSH
77159: LD_INT 1
77161: PUSH
77162: EMPTY
77163: LIST
77164: LIST
77165: PUSH
77166: LD_INT 0
77168: PUSH
77169: LD_INT 1
77171: PUSH
77172: EMPTY
77173: LIST
77174: LIST
77175: PUSH
77176: LD_INT 1
77178: NEG
77179: PUSH
77180: LD_INT 0
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: PUSH
77187: LD_INT 1
77189: NEG
77190: PUSH
77191: LD_INT 1
77193: NEG
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: PUSH
77199: LD_INT 1
77201: NEG
77202: PUSH
77203: LD_INT 2
77205: NEG
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: PUSH
77211: LD_INT 0
77213: PUSH
77214: LD_INT 2
77216: NEG
77217: PUSH
77218: EMPTY
77219: LIST
77220: LIST
77221: PUSH
77222: LD_INT 1
77224: PUSH
77225: LD_INT 1
77227: NEG
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PUSH
77233: LD_INT 2
77235: PUSH
77236: LD_INT 0
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PUSH
77243: LD_INT 2
77245: PUSH
77246: LD_INT 1
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: PUSH
77253: LD_INT 2
77255: PUSH
77256: LD_INT 2
77258: PUSH
77259: EMPTY
77260: LIST
77261: LIST
77262: PUSH
77263: LD_INT 1
77265: PUSH
77266: LD_INT 2
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: PUSH
77273: LD_INT 0
77275: PUSH
77276: LD_INT 2
77278: PUSH
77279: EMPTY
77280: LIST
77281: LIST
77282: PUSH
77283: LD_INT 1
77285: NEG
77286: PUSH
77287: LD_INT 1
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: PUSH
77294: LD_INT 2
77296: NEG
77297: PUSH
77298: LD_INT 0
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PUSH
77305: LD_INT 2
77307: NEG
77308: PUSH
77309: LD_INT 1
77311: NEG
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: PUSH
77317: LD_INT 2
77319: NEG
77320: PUSH
77321: LD_INT 2
77323: NEG
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: LIST
77347: LIST
77348: LIST
77349: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
77350: LD_ADDR_VAR 0 59
77354: PUSH
77355: LD_INT 0
77357: PUSH
77358: LD_INT 0
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: PUSH
77365: LD_INT 0
77367: PUSH
77368: LD_INT 1
77370: NEG
77371: PUSH
77372: EMPTY
77373: LIST
77374: LIST
77375: PUSH
77376: LD_INT 1
77378: PUSH
77379: LD_INT 0
77381: PUSH
77382: EMPTY
77383: LIST
77384: LIST
77385: PUSH
77386: LD_INT 1
77388: PUSH
77389: LD_INT 1
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: PUSH
77396: LD_INT 0
77398: PUSH
77399: LD_INT 1
77401: PUSH
77402: EMPTY
77403: LIST
77404: LIST
77405: PUSH
77406: LD_INT 1
77408: NEG
77409: PUSH
77410: LD_INT 0
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: PUSH
77417: LD_INT 1
77419: NEG
77420: PUSH
77421: LD_INT 1
77423: NEG
77424: PUSH
77425: EMPTY
77426: LIST
77427: LIST
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
77438: LD_ADDR_VAR 0 60
77442: PUSH
77443: LD_INT 0
77445: PUSH
77446: LD_INT 0
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: PUSH
77453: LD_INT 0
77455: PUSH
77456: LD_INT 1
77458: NEG
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PUSH
77464: LD_INT 1
77466: PUSH
77467: LD_INT 0
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PUSH
77474: LD_INT 1
77476: PUSH
77477: LD_INT 1
77479: PUSH
77480: EMPTY
77481: LIST
77482: LIST
77483: PUSH
77484: LD_INT 0
77486: PUSH
77487: LD_INT 1
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 1
77496: NEG
77497: PUSH
77498: LD_INT 0
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: PUSH
77505: LD_INT 1
77507: NEG
77508: PUSH
77509: LD_INT 1
77511: NEG
77512: PUSH
77513: EMPTY
77514: LIST
77515: LIST
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
77526: LD_ADDR_VAR 0 61
77530: PUSH
77531: LD_INT 0
77533: PUSH
77534: LD_INT 0
77536: PUSH
77537: EMPTY
77538: LIST
77539: LIST
77540: PUSH
77541: LD_INT 0
77543: PUSH
77544: LD_INT 1
77546: NEG
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: PUSH
77552: LD_INT 1
77554: PUSH
77555: LD_INT 0
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: PUSH
77562: LD_INT 1
77564: PUSH
77565: LD_INT 1
77567: PUSH
77568: EMPTY
77569: LIST
77570: LIST
77571: PUSH
77572: LD_INT 0
77574: PUSH
77575: LD_INT 1
77577: PUSH
77578: EMPTY
77579: LIST
77580: LIST
77581: PUSH
77582: LD_INT 1
77584: NEG
77585: PUSH
77586: LD_INT 0
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: PUSH
77593: LD_INT 1
77595: NEG
77596: PUSH
77597: LD_INT 1
77599: NEG
77600: PUSH
77601: EMPTY
77602: LIST
77603: LIST
77604: PUSH
77605: EMPTY
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
77614: LD_ADDR_VAR 0 62
77618: PUSH
77619: LD_INT 0
77621: PUSH
77622: LD_INT 0
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: PUSH
77629: LD_INT 0
77631: PUSH
77632: LD_INT 1
77634: NEG
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: PUSH
77640: LD_INT 1
77642: PUSH
77643: LD_INT 0
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: LD_INT 1
77652: PUSH
77653: LD_INT 1
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 0
77662: PUSH
77663: LD_INT 1
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PUSH
77670: LD_INT 1
77672: NEG
77673: PUSH
77674: LD_INT 0
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: PUSH
77681: LD_INT 1
77683: NEG
77684: PUSH
77685: LD_INT 1
77687: NEG
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: PUSH
77693: EMPTY
77694: LIST
77695: LIST
77696: LIST
77697: LIST
77698: LIST
77699: LIST
77700: LIST
77701: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
77702: LD_ADDR_VAR 0 63
77706: PUSH
77707: LD_INT 0
77709: PUSH
77710: LD_INT 0
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: PUSH
77717: LD_INT 0
77719: PUSH
77720: LD_INT 1
77722: NEG
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: PUSH
77728: LD_INT 1
77730: PUSH
77731: LD_INT 0
77733: PUSH
77734: EMPTY
77735: LIST
77736: LIST
77737: PUSH
77738: LD_INT 1
77740: PUSH
77741: LD_INT 1
77743: PUSH
77744: EMPTY
77745: LIST
77746: LIST
77747: PUSH
77748: LD_INT 0
77750: PUSH
77751: LD_INT 1
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: PUSH
77758: LD_INT 1
77760: NEG
77761: PUSH
77762: LD_INT 0
77764: PUSH
77765: EMPTY
77766: LIST
77767: LIST
77768: PUSH
77769: LD_INT 1
77771: NEG
77772: PUSH
77773: LD_INT 1
77775: NEG
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: EMPTY
77782: LIST
77783: LIST
77784: LIST
77785: LIST
77786: LIST
77787: LIST
77788: LIST
77789: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
77790: LD_ADDR_VAR 0 64
77794: PUSH
77795: LD_INT 0
77797: PUSH
77798: LD_INT 0
77800: PUSH
77801: EMPTY
77802: LIST
77803: LIST
77804: PUSH
77805: LD_INT 0
77807: PUSH
77808: LD_INT 1
77810: NEG
77811: PUSH
77812: EMPTY
77813: LIST
77814: LIST
77815: PUSH
77816: LD_INT 1
77818: PUSH
77819: LD_INT 0
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PUSH
77826: LD_INT 1
77828: PUSH
77829: LD_INT 1
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: PUSH
77836: LD_INT 0
77838: PUSH
77839: LD_INT 1
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: PUSH
77846: LD_INT 1
77848: NEG
77849: PUSH
77850: LD_INT 0
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 1
77859: NEG
77860: PUSH
77861: LD_INT 1
77863: NEG
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: LIST
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: ST_TO_ADDR
// end ; 1 :
77878: GO 83775
77880: LD_INT 1
77882: DOUBLE
77883: EQUAL
77884: IFTRUE 77888
77886: GO 80511
77888: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
77889: LD_ADDR_VAR 0 11
77893: PUSH
77894: LD_INT 1
77896: NEG
77897: PUSH
77898: LD_INT 3
77900: NEG
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: LD_INT 3
77911: NEG
77912: PUSH
77913: EMPTY
77914: LIST
77915: LIST
77916: PUSH
77917: LD_INT 1
77919: PUSH
77920: LD_INT 2
77922: NEG
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: LIST
77932: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
77933: LD_ADDR_VAR 0 12
77937: PUSH
77938: LD_INT 2
77940: PUSH
77941: LD_INT 1
77943: NEG
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: LD_INT 3
77951: PUSH
77952: LD_INT 0
77954: PUSH
77955: EMPTY
77956: LIST
77957: LIST
77958: PUSH
77959: LD_INT 3
77961: PUSH
77962: LD_INT 1
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: LIST
77973: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
77974: LD_ADDR_VAR 0 13
77978: PUSH
77979: LD_INT 3
77981: PUSH
77982: LD_INT 2
77984: PUSH
77985: EMPTY
77986: LIST
77987: LIST
77988: PUSH
77989: LD_INT 3
77991: PUSH
77992: LD_INT 3
77994: PUSH
77995: EMPTY
77996: LIST
77997: LIST
77998: PUSH
77999: LD_INT 2
78001: PUSH
78002: LD_INT 3
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: LIST
78013: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78014: LD_ADDR_VAR 0 14
78018: PUSH
78019: LD_INT 1
78021: PUSH
78022: LD_INT 3
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 0
78031: PUSH
78032: LD_INT 3
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: PUSH
78039: LD_INT 1
78041: NEG
78042: PUSH
78043: LD_INT 2
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: LIST
78054: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78055: LD_ADDR_VAR 0 15
78059: PUSH
78060: LD_INT 2
78062: NEG
78063: PUSH
78064: LD_INT 1
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: PUSH
78071: LD_INT 3
78073: NEG
78074: PUSH
78075: LD_INT 0
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: PUSH
78082: LD_INT 3
78084: NEG
78085: PUSH
78086: LD_INT 1
78088: NEG
78089: PUSH
78090: EMPTY
78091: LIST
78092: LIST
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: LIST
78098: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78099: LD_ADDR_VAR 0 16
78103: PUSH
78104: LD_INT 2
78106: NEG
78107: PUSH
78108: LD_INT 3
78110: NEG
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: PUSH
78116: LD_INT 3
78118: NEG
78119: PUSH
78120: LD_INT 2
78122: NEG
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: PUSH
78128: LD_INT 3
78130: NEG
78131: PUSH
78132: LD_INT 3
78134: NEG
78135: PUSH
78136: EMPTY
78137: LIST
78138: LIST
78139: PUSH
78140: EMPTY
78141: LIST
78142: LIST
78143: LIST
78144: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
78145: LD_ADDR_VAR 0 17
78149: PUSH
78150: LD_INT 1
78152: NEG
78153: PUSH
78154: LD_INT 3
78156: NEG
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: PUSH
78162: LD_INT 0
78164: PUSH
78165: LD_INT 3
78167: NEG
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: PUSH
78173: LD_INT 1
78175: PUSH
78176: LD_INT 2
78178: NEG
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: LIST
78188: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
78189: LD_ADDR_VAR 0 18
78193: PUSH
78194: LD_INT 2
78196: PUSH
78197: LD_INT 1
78199: NEG
78200: PUSH
78201: EMPTY
78202: LIST
78203: LIST
78204: PUSH
78205: LD_INT 3
78207: PUSH
78208: LD_INT 0
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: PUSH
78215: LD_INT 3
78217: PUSH
78218: LD_INT 1
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: LIST
78229: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78230: LD_ADDR_VAR 0 19
78234: PUSH
78235: LD_INT 3
78237: PUSH
78238: LD_INT 2
78240: PUSH
78241: EMPTY
78242: LIST
78243: LIST
78244: PUSH
78245: LD_INT 3
78247: PUSH
78248: LD_INT 3
78250: PUSH
78251: EMPTY
78252: LIST
78253: LIST
78254: PUSH
78255: LD_INT 2
78257: PUSH
78258: LD_INT 3
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: LIST
78269: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78270: LD_ADDR_VAR 0 20
78274: PUSH
78275: LD_INT 1
78277: PUSH
78278: LD_INT 3
78280: PUSH
78281: EMPTY
78282: LIST
78283: LIST
78284: PUSH
78285: LD_INT 0
78287: PUSH
78288: LD_INT 3
78290: PUSH
78291: EMPTY
78292: LIST
78293: LIST
78294: PUSH
78295: LD_INT 1
78297: NEG
78298: PUSH
78299: LD_INT 2
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: LIST
78310: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78311: LD_ADDR_VAR 0 21
78315: PUSH
78316: LD_INT 2
78318: NEG
78319: PUSH
78320: LD_INT 1
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: PUSH
78327: LD_INT 3
78329: NEG
78330: PUSH
78331: LD_INT 0
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PUSH
78338: LD_INT 3
78340: NEG
78341: PUSH
78342: LD_INT 1
78344: NEG
78345: PUSH
78346: EMPTY
78347: LIST
78348: LIST
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: LIST
78354: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78355: LD_ADDR_VAR 0 22
78359: PUSH
78360: LD_INT 2
78362: NEG
78363: PUSH
78364: LD_INT 3
78366: NEG
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: PUSH
78372: LD_INT 3
78374: NEG
78375: PUSH
78376: LD_INT 2
78378: NEG
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: PUSH
78384: LD_INT 3
78386: NEG
78387: PUSH
78388: LD_INT 3
78390: NEG
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: LIST
78400: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
78401: LD_ADDR_VAR 0 23
78405: PUSH
78406: LD_INT 0
78408: PUSH
78409: LD_INT 3
78411: NEG
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: PUSH
78417: LD_INT 1
78419: NEG
78420: PUSH
78421: LD_INT 4
78423: NEG
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PUSH
78429: LD_INT 1
78431: PUSH
78432: LD_INT 3
78434: NEG
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: LIST
78444: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
78445: LD_ADDR_VAR 0 24
78449: PUSH
78450: LD_INT 3
78452: PUSH
78453: LD_INT 0
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: LD_INT 3
78462: PUSH
78463: LD_INT 1
78465: NEG
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: PUSH
78471: LD_INT 4
78473: PUSH
78474: LD_INT 1
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: PUSH
78481: EMPTY
78482: LIST
78483: LIST
78484: LIST
78485: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
78486: LD_ADDR_VAR 0 25
78490: PUSH
78491: LD_INT 3
78493: PUSH
78494: LD_INT 3
78496: PUSH
78497: EMPTY
78498: LIST
78499: LIST
78500: PUSH
78501: LD_INT 4
78503: PUSH
78504: LD_INT 3
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: PUSH
78511: LD_INT 3
78513: PUSH
78514: LD_INT 4
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: LIST
78525: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
78526: LD_ADDR_VAR 0 26
78530: PUSH
78531: LD_INT 0
78533: PUSH
78534: LD_INT 3
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: PUSH
78541: LD_INT 1
78543: PUSH
78544: LD_INT 4
78546: PUSH
78547: EMPTY
78548: LIST
78549: LIST
78550: PUSH
78551: LD_INT 1
78553: NEG
78554: PUSH
78555: LD_INT 3
78557: PUSH
78558: EMPTY
78559: LIST
78560: LIST
78561: PUSH
78562: EMPTY
78563: LIST
78564: LIST
78565: LIST
78566: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
78567: LD_ADDR_VAR 0 27
78571: PUSH
78572: LD_INT 3
78574: NEG
78575: PUSH
78576: LD_INT 0
78578: PUSH
78579: EMPTY
78580: LIST
78581: LIST
78582: PUSH
78583: LD_INT 3
78585: NEG
78586: PUSH
78587: LD_INT 1
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: PUSH
78594: LD_INT 4
78596: NEG
78597: PUSH
78598: LD_INT 1
78600: NEG
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: PUSH
78606: EMPTY
78607: LIST
78608: LIST
78609: LIST
78610: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
78611: LD_ADDR_VAR 0 28
78615: PUSH
78616: LD_INT 3
78618: NEG
78619: PUSH
78620: LD_INT 3
78622: NEG
78623: PUSH
78624: EMPTY
78625: LIST
78626: LIST
78627: PUSH
78628: LD_INT 3
78630: NEG
78631: PUSH
78632: LD_INT 4
78634: NEG
78635: PUSH
78636: EMPTY
78637: LIST
78638: LIST
78639: PUSH
78640: LD_INT 4
78642: NEG
78643: PUSH
78644: LD_INT 3
78646: NEG
78647: PUSH
78648: EMPTY
78649: LIST
78650: LIST
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: LIST
78656: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
78657: LD_ADDR_VAR 0 29
78661: PUSH
78662: LD_INT 1
78664: NEG
78665: PUSH
78666: LD_INT 3
78668: NEG
78669: PUSH
78670: EMPTY
78671: LIST
78672: LIST
78673: PUSH
78674: LD_INT 0
78676: PUSH
78677: LD_INT 3
78679: NEG
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: PUSH
78685: LD_INT 1
78687: PUSH
78688: LD_INT 2
78690: NEG
78691: PUSH
78692: EMPTY
78693: LIST
78694: LIST
78695: PUSH
78696: LD_INT 1
78698: NEG
78699: PUSH
78700: LD_INT 4
78702: NEG
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: PUSH
78708: LD_INT 0
78710: PUSH
78711: LD_INT 4
78713: NEG
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: PUSH
78719: LD_INT 1
78721: PUSH
78722: LD_INT 3
78724: NEG
78725: PUSH
78726: EMPTY
78727: LIST
78728: LIST
78729: PUSH
78730: LD_INT 1
78732: NEG
78733: PUSH
78734: LD_INT 5
78736: NEG
78737: PUSH
78738: EMPTY
78739: LIST
78740: LIST
78741: PUSH
78742: LD_INT 0
78744: PUSH
78745: LD_INT 5
78747: NEG
78748: PUSH
78749: EMPTY
78750: LIST
78751: LIST
78752: PUSH
78753: LD_INT 1
78755: PUSH
78756: LD_INT 4
78758: NEG
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: PUSH
78764: LD_INT 1
78766: NEG
78767: PUSH
78768: LD_INT 6
78770: NEG
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: PUSH
78776: LD_INT 0
78778: PUSH
78779: LD_INT 6
78781: NEG
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: PUSH
78787: LD_INT 1
78789: PUSH
78790: LD_INT 5
78792: NEG
78793: PUSH
78794: EMPTY
78795: LIST
78796: LIST
78797: PUSH
78798: EMPTY
78799: LIST
78800: LIST
78801: LIST
78802: LIST
78803: LIST
78804: LIST
78805: LIST
78806: LIST
78807: LIST
78808: LIST
78809: LIST
78810: LIST
78811: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
78812: LD_ADDR_VAR 0 30
78816: PUSH
78817: LD_INT 2
78819: PUSH
78820: LD_INT 1
78822: NEG
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: PUSH
78828: LD_INT 3
78830: PUSH
78831: LD_INT 0
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PUSH
78838: LD_INT 3
78840: PUSH
78841: LD_INT 1
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: LD_INT 3
78850: PUSH
78851: LD_INT 1
78853: NEG
78854: PUSH
78855: EMPTY
78856: LIST
78857: LIST
78858: PUSH
78859: LD_INT 4
78861: PUSH
78862: LD_INT 0
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PUSH
78869: LD_INT 4
78871: PUSH
78872: LD_INT 1
78874: PUSH
78875: EMPTY
78876: LIST
78877: LIST
78878: PUSH
78879: LD_INT 4
78881: PUSH
78882: LD_INT 1
78884: NEG
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 5
78892: PUSH
78893: LD_INT 0
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: PUSH
78900: LD_INT 5
78902: PUSH
78903: LD_INT 1
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: PUSH
78910: LD_INT 5
78912: PUSH
78913: LD_INT 1
78915: NEG
78916: PUSH
78917: EMPTY
78918: LIST
78919: LIST
78920: PUSH
78921: LD_INT 6
78923: PUSH
78924: LD_INT 0
78926: PUSH
78927: EMPTY
78928: LIST
78929: LIST
78930: PUSH
78931: LD_INT 6
78933: PUSH
78934: LD_INT 1
78936: PUSH
78937: EMPTY
78938: LIST
78939: LIST
78940: PUSH
78941: EMPTY
78942: LIST
78943: LIST
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
78955: LD_ADDR_VAR 0 31
78959: PUSH
78960: LD_INT 3
78962: PUSH
78963: LD_INT 2
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: PUSH
78970: LD_INT 3
78972: PUSH
78973: LD_INT 3
78975: PUSH
78976: EMPTY
78977: LIST
78978: LIST
78979: PUSH
78980: LD_INT 2
78982: PUSH
78983: LD_INT 3
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: LD_INT 4
78992: PUSH
78993: LD_INT 3
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: PUSH
79000: LD_INT 4
79002: PUSH
79003: LD_INT 4
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: LD_INT 3
79012: PUSH
79013: LD_INT 4
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PUSH
79020: LD_INT 5
79022: PUSH
79023: LD_INT 4
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PUSH
79030: LD_INT 5
79032: PUSH
79033: LD_INT 5
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PUSH
79040: LD_INT 4
79042: PUSH
79043: LD_INT 5
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PUSH
79050: LD_INT 6
79052: PUSH
79053: LD_INT 5
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: LD_INT 6
79062: PUSH
79063: LD_INT 6
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: PUSH
79070: LD_INT 5
79072: PUSH
79073: LD_INT 6
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: LIST
79084: LIST
79085: LIST
79086: LIST
79087: LIST
79088: LIST
79089: LIST
79090: LIST
79091: LIST
79092: LIST
79093: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
79094: LD_ADDR_VAR 0 32
79098: PUSH
79099: LD_INT 1
79101: PUSH
79102: LD_INT 3
79104: PUSH
79105: EMPTY
79106: LIST
79107: LIST
79108: PUSH
79109: LD_INT 0
79111: PUSH
79112: LD_INT 3
79114: PUSH
79115: EMPTY
79116: LIST
79117: LIST
79118: PUSH
79119: LD_INT 1
79121: NEG
79122: PUSH
79123: LD_INT 2
79125: PUSH
79126: EMPTY
79127: LIST
79128: LIST
79129: PUSH
79130: LD_INT 1
79132: PUSH
79133: LD_INT 4
79135: PUSH
79136: EMPTY
79137: LIST
79138: LIST
79139: PUSH
79140: LD_INT 0
79142: PUSH
79143: LD_INT 4
79145: PUSH
79146: EMPTY
79147: LIST
79148: LIST
79149: PUSH
79150: LD_INT 1
79152: NEG
79153: PUSH
79154: LD_INT 3
79156: PUSH
79157: EMPTY
79158: LIST
79159: LIST
79160: PUSH
79161: LD_INT 1
79163: PUSH
79164: LD_INT 5
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: PUSH
79171: LD_INT 0
79173: PUSH
79174: LD_INT 5
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: PUSH
79181: LD_INT 1
79183: NEG
79184: PUSH
79185: LD_INT 4
79187: PUSH
79188: EMPTY
79189: LIST
79190: LIST
79191: PUSH
79192: LD_INT 1
79194: PUSH
79195: LD_INT 6
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: PUSH
79202: LD_INT 0
79204: PUSH
79205: LD_INT 6
79207: PUSH
79208: EMPTY
79209: LIST
79210: LIST
79211: PUSH
79212: LD_INT 1
79214: NEG
79215: PUSH
79216: LD_INT 5
79218: PUSH
79219: EMPTY
79220: LIST
79221: LIST
79222: PUSH
79223: EMPTY
79224: LIST
79225: LIST
79226: LIST
79227: LIST
79228: LIST
79229: LIST
79230: LIST
79231: LIST
79232: LIST
79233: LIST
79234: LIST
79235: LIST
79236: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
79237: LD_ADDR_VAR 0 33
79241: PUSH
79242: LD_INT 2
79244: NEG
79245: PUSH
79246: LD_INT 1
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: PUSH
79253: LD_INT 3
79255: NEG
79256: PUSH
79257: LD_INT 0
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 3
79266: NEG
79267: PUSH
79268: LD_INT 1
79270: NEG
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PUSH
79276: LD_INT 3
79278: NEG
79279: PUSH
79280: LD_INT 1
79282: PUSH
79283: EMPTY
79284: LIST
79285: LIST
79286: PUSH
79287: LD_INT 4
79289: NEG
79290: PUSH
79291: LD_INT 0
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: PUSH
79298: LD_INT 4
79300: NEG
79301: PUSH
79302: LD_INT 1
79304: NEG
79305: PUSH
79306: EMPTY
79307: LIST
79308: LIST
79309: PUSH
79310: LD_INT 4
79312: NEG
79313: PUSH
79314: LD_INT 1
79316: PUSH
79317: EMPTY
79318: LIST
79319: LIST
79320: PUSH
79321: LD_INT 5
79323: NEG
79324: PUSH
79325: LD_INT 0
79327: PUSH
79328: EMPTY
79329: LIST
79330: LIST
79331: PUSH
79332: LD_INT 5
79334: NEG
79335: PUSH
79336: LD_INT 1
79338: NEG
79339: PUSH
79340: EMPTY
79341: LIST
79342: LIST
79343: PUSH
79344: LD_INT 5
79346: NEG
79347: PUSH
79348: LD_INT 1
79350: PUSH
79351: EMPTY
79352: LIST
79353: LIST
79354: PUSH
79355: LD_INT 6
79357: NEG
79358: PUSH
79359: LD_INT 0
79361: PUSH
79362: EMPTY
79363: LIST
79364: LIST
79365: PUSH
79366: LD_INT 6
79368: NEG
79369: PUSH
79370: LD_INT 1
79372: NEG
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: LIST
79382: LIST
79383: LIST
79384: LIST
79385: LIST
79386: LIST
79387: LIST
79388: LIST
79389: LIST
79390: LIST
79391: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
79392: LD_ADDR_VAR 0 34
79396: PUSH
79397: LD_INT 2
79399: NEG
79400: PUSH
79401: LD_INT 3
79403: NEG
79404: PUSH
79405: EMPTY
79406: LIST
79407: LIST
79408: PUSH
79409: LD_INT 3
79411: NEG
79412: PUSH
79413: LD_INT 2
79415: NEG
79416: PUSH
79417: EMPTY
79418: LIST
79419: LIST
79420: PUSH
79421: LD_INT 3
79423: NEG
79424: PUSH
79425: LD_INT 3
79427: NEG
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: PUSH
79433: LD_INT 3
79435: NEG
79436: PUSH
79437: LD_INT 4
79439: NEG
79440: PUSH
79441: EMPTY
79442: LIST
79443: LIST
79444: PUSH
79445: LD_INT 4
79447: NEG
79448: PUSH
79449: LD_INT 3
79451: NEG
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: PUSH
79457: LD_INT 4
79459: NEG
79460: PUSH
79461: LD_INT 4
79463: NEG
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 4
79471: NEG
79472: PUSH
79473: LD_INT 5
79475: NEG
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: PUSH
79481: LD_INT 5
79483: NEG
79484: PUSH
79485: LD_INT 4
79487: NEG
79488: PUSH
79489: EMPTY
79490: LIST
79491: LIST
79492: PUSH
79493: LD_INT 5
79495: NEG
79496: PUSH
79497: LD_INT 5
79499: NEG
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PUSH
79505: LD_INT 5
79507: NEG
79508: PUSH
79509: LD_INT 6
79511: NEG
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 6
79519: NEG
79520: PUSH
79521: LD_INT 5
79523: NEG
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: PUSH
79529: LD_INT 6
79531: NEG
79532: PUSH
79533: LD_INT 6
79535: NEG
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: EMPTY
79542: LIST
79543: LIST
79544: LIST
79545: LIST
79546: LIST
79547: LIST
79548: LIST
79549: LIST
79550: LIST
79551: LIST
79552: LIST
79553: LIST
79554: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
79555: LD_ADDR_VAR 0 41
79559: PUSH
79560: LD_INT 0
79562: PUSH
79563: LD_INT 2
79565: NEG
79566: PUSH
79567: EMPTY
79568: LIST
79569: LIST
79570: PUSH
79571: LD_INT 1
79573: NEG
79574: PUSH
79575: LD_INT 3
79577: NEG
79578: PUSH
79579: EMPTY
79580: LIST
79581: LIST
79582: PUSH
79583: LD_INT 1
79585: PUSH
79586: LD_INT 2
79588: NEG
79589: PUSH
79590: EMPTY
79591: LIST
79592: LIST
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: LIST
79598: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
79599: LD_ADDR_VAR 0 42
79603: PUSH
79604: LD_INT 2
79606: PUSH
79607: LD_INT 0
79609: PUSH
79610: EMPTY
79611: LIST
79612: LIST
79613: PUSH
79614: LD_INT 2
79616: PUSH
79617: LD_INT 1
79619: NEG
79620: PUSH
79621: EMPTY
79622: LIST
79623: LIST
79624: PUSH
79625: LD_INT 3
79627: PUSH
79628: LD_INT 1
79630: PUSH
79631: EMPTY
79632: LIST
79633: LIST
79634: PUSH
79635: EMPTY
79636: LIST
79637: LIST
79638: LIST
79639: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
79640: LD_ADDR_VAR 0 43
79644: PUSH
79645: LD_INT 2
79647: PUSH
79648: LD_INT 2
79650: PUSH
79651: EMPTY
79652: LIST
79653: LIST
79654: PUSH
79655: LD_INT 3
79657: PUSH
79658: LD_INT 2
79660: PUSH
79661: EMPTY
79662: LIST
79663: LIST
79664: PUSH
79665: LD_INT 2
79667: PUSH
79668: LD_INT 3
79670: PUSH
79671: EMPTY
79672: LIST
79673: LIST
79674: PUSH
79675: EMPTY
79676: LIST
79677: LIST
79678: LIST
79679: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
79680: LD_ADDR_VAR 0 44
79684: PUSH
79685: LD_INT 0
79687: PUSH
79688: LD_INT 2
79690: PUSH
79691: EMPTY
79692: LIST
79693: LIST
79694: PUSH
79695: LD_INT 1
79697: PUSH
79698: LD_INT 3
79700: PUSH
79701: EMPTY
79702: LIST
79703: LIST
79704: PUSH
79705: LD_INT 1
79707: NEG
79708: PUSH
79709: LD_INT 2
79711: PUSH
79712: EMPTY
79713: LIST
79714: LIST
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: LIST
79720: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
79721: LD_ADDR_VAR 0 45
79725: PUSH
79726: LD_INT 2
79728: NEG
79729: PUSH
79730: LD_INT 0
79732: PUSH
79733: EMPTY
79734: LIST
79735: LIST
79736: PUSH
79737: LD_INT 2
79739: NEG
79740: PUSH
79741: LD_INT 1
79743: PUSH
79744: EMPTY
79745: LIST
79746: LIST
79747: PUSH
79748: LD_INT 3
79750: NEG
79751: PUSH
79752: LD_INT 1
79754: NEG
79755: PUSH
79756: EMPTY
79757: LIST
79758: LIST
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: LIST
79764: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
79765: LD_ADDR_VAR 0 46
79769: PUSH
79770: LD_INT 2
79772: NEG
79773: PUSH
79774: LD_INT 2
79776: NEG
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: PUSH
79782: LD_INT 2
79784: NEG
79785: PUSH
79786: LD_INT 3
79788: NEG
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 3
79796: NEG
79797: PUSH
79798: LD_INT 2
79800: NEG
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: PUSH
79806: EMPTY
79807: LIST
79808: LIST
79809: LIST
79810: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
79811: LD_ADDR_VAR 0 47
79815: PUSH
79816: LD_INT 2
79818: NEG
79819: PUSH
79820: LD_INT 3
79822: NEG
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: PUSH
79828: LD_INT 1
79830: NEG
79831: PUSH
79832: LD_INT 3
79834: NEG
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: PUSH
79840: EMPTY
79841: LIST
79842: LIST
79843: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
79844: LD_ADDR_VAR 0 48
79848: PUSH
79849: LD_INT 1
79851: PUSH
79852: LD_INT 2
79854: NEG
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: PUSH
79860: LD_INT 2
79862: PUSH
79863: LD_INT 1
79865: NEG
79866: PUSH
79867: EMPTY
79868: LIST
79869: LIST
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
79875: LD_ADDR_VAR 0 49
79879: PUSH
79880: LD_INT 3
79882: PUSH
79883: LD_INT 1
79885: PUSH
79886: EMPTY
79887: LIST
79888: LIST
79889: PUSH
79890: LD_INT 3
79892: PUSH
79893: LD_INT 2
79895: PUSH
79896: EMPTY
79897: LIST
79898: LIST
79899: PUSH
79900: EMPTY
79901: LIST
79902: LIST
79903: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
79904: LD_ADDR_VAR 0 50
79908: PUSH
79909: LD_INT 2
79911: PUSH
79912: LD_INT 3
79914: PUSH
79915: EMPTY
79916: LIST
79917: LIST
79918: PUSH
79919: LD_INT 1
79921: PUSH
79922: LD_INT 3
79924: PUSH
79925: EMPTY
79926: LIST
79927: LIST
79928: PUSH
79929: EMPTY
79930: LIST
79931: LIST
79932: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
79933: LD_ADDR_VAR 0 51
79937: PUSH
79938: LD_INT 1
79940: NEG
79941: PUSH
79942: LD_INT 2
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: PUSH
79949: LD_INT 2
79951: NEG
79952: PUSH
79953: LD_INT 1
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: PUSH
79960: EMPTY
79961: LIST
79962: LIST
79963: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
79964: LD_ADDR_VAR 0 52
79968: PUSH
79969: LD_INT 3
79971: NEG
79972: PUSH
79973: LD_INT 1
79975: NEG
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: PUSH
79981: LD_INT 3
79983: NEG
79984: PUSH
79985: LD_INT 2
79987: NEG
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
79997: LD_ADDR_VAR 0 53
80001: PUSH
80002: LD_INT 1
80004: NEG
80005: PUSH
80006: LD_INT 3
80008: NEG
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: PUSH
80014: LD_INT 0
80016: PUSH
80017: LD_INT 3
80019: NEG
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: PUSH
80025: LD_INT 1
80027: PUSH
80028: LD_INT 2
80030: NEG
80031: PUSH
80032: EMPTY
80033: LIST
80034: LIST
80035: PUSH
80036: EMPTY
80037: LIST
80038: LIST
80039: LIST
80040: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80041: LD_ADDR_VAR 0 54
80045: PUSH
80046: LD_INT 2
80048: PUSH
80049: LD_INT 1
80051: NEG
80052: PUSH
80053: EMPTY
80054: LIST
80055: LIST
80056: PUSH
80057: LD_INT 3
80059: PUSH
80060: LD_INT 0
80062: PUSH
80063: EMPTY
80064: LIST
80065: LIST
80066: PUSH
80067: LD_INT 3
80069: PUSH
80070: LD_INT 1
80072: PUSH
80073: EMPTY
80074: LIST
80075: LIST
80076: PUSH
80077: EMPTY
80078: LIST
80079: LIST
80080: LIST
80081: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80082: LD_ADDR_VAR 0 55
80086: PUSH
80087: LD_INT 3
80089: PUSH
80090: LD_INT 2
80092: PUSH
80093: EMPTY
80094: LIST
80095: LIST
80096: PUSH
80097: LD_INT 3
80099: PUSH
80100: LD_INT 3
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: LD_INT 2
80109: PUSH
80110: LD_INT 3
80112: PUSH
80113: EMPTY
80114: LIST
80115: LIST
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: LIST
80121: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80122: LD_ADDR_VAR 0 56
80126: PUSH
80127: LD_INT 1
80129: PUSH
80130: LD_INT 3
80132: PUSH
80133: EMPTY
80134: LIST
80135: LIST
80136: PUSH
80137: LD_INT 0
80139: PUSH
80140: LD_INT 3
80142: PUSH
80143: EMPTY
80144: LIST
80145: LIST
80146: PUSH
80147: LD_INT 1
80149: NEG
80150: PUSH
80151: LD_INT 2
80153: PUSH
80154: EMPTY
80155: LIST
80156: LIST
80157: PUSH
80158: EMPTY
80159: LIST
80160: LIST
80161: LIST
80162: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80163: LD_ADDR_VAR 0 57
80167: PUSH
80168: LD_INT 2
80170: NEG
80171: PUSH
80172: LD_INT 1
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: LD_INT 3
80181: NEG
80182: PUSH
80183: LD_INT 0
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PUSH
80190: LD_INT 3
80192: NEG
80193: PUSH
80194: LD_INT 1
80196: NEG
80197: PUSH
80198: EMPTY
80199: LIST
80200: LIST
80201: PUSH
80202: EMPTY
80203: LIST
80204: LIST
80205: LIST
80206: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
80207: LD_ADDR_VAR 0 58
80211: PUSH
80212: LD_INT 2
80214: NEG
80215: PUSH
80216: LD_INT 3
80218: NEG
80219: PUSH
80220: EMPTY
80221: LIST
80222: LIST
80223: PUSH
80224: LD_INT 3
80226: NEG
80227: PUSH
80228: LD_INT 2
80230: NEG
80231: PUSH
80232: EMPTY
80233: LIST
80234: LIST
80235: PUSH
80236: LD_INT 3
80238: NEG
80239: PUSH
80240: LD_INT 3
80242: NEG
80243: PUSH
80244: EMPTY
80245: LIST
80246: LIST
80247: PUSH
80248: EMPTY
80249: LIST
80250: LIST
80251: LIST
80252: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
80253: LD_ADDR_VAR 0 59
80257: PUSH
80258: LD_INT 1
80260: NEG
80261: PUSH
80262: LD_INT 2
80264: NEG
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: PUSH
80270: LD_INT 0
80272: PUSH
80273: LD_INT 2
80275: NEG
80276: PUSH
80277: EMPTY
80278: LIST
80279: LIST
80280: PUSH
80281: LD_INT 1
80283: PUSH
80284: LD_INT 1
80286: NEG
80287: PUSH
80288: EMPTY
80289: LIST
80290: LIST
80291: PUSH
80292: EMPTY
80293: LIST
80294: LIST
80295: LIST
80296: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
80297: LD_ADDR_VAR 0 60
80301: PUSH
80302: LD_INT 1
80304: PUSH
80305: LD_INT 1
80307: NEG
80308: PUSH
80309: EMPTY
80310: LIST
80311: LIST
80312: PUSH
80313: LD_INT 2
80315: PUSH
80316: LD_INT 0
80318: PUSH
80319: EMPTY
80320: LIST
80321: LIST
80322: PUSH
80323: LD_INT 2
80325: PUSH
80326: LD_INT 1
80328: PUSH
80329: EMPTY
80330: LIST
80331: LIST
80332: PUSH
80333: EMPTY
80334: LIST
80335: LIST
80336: LIST
80337: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
80338: LD_ADDR_VAR 0 61
80342: PUSH
80343: LD_INT 2
80345: PUSH
80346: LD_INT 1
80348: PUSH
80349: EMPTY
80350: LIST
80351: LIST
80352: PUSH
80353: LD_INT 2
80355: PUSH
80356: LD_INT 2
80358: PUSH
80359: EMPTY
80360: LIST
80361: LIST
80362: PUSH
80363: LD_INT 1
80365: PUSH
80366: LD_INT 2
80368: PUSH
80369: EMPTY
80370: LIST
80371: LIST
80372: PUSH
80373: EMPTY
80374: LIST
80375: LIST
80376: LIST
80377: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
80378: LD_ADDR_VAR 0 62
80382: PUSH
80383: LD_INT 1
80385: PUSH
80386: LD_INT 2
80388: PUSH
80389: EMPTY
80390: LIST
80391: LIST
80392: PUSH
80393: LD_INT 0
80395: PUSH
80396: LD_INT 2
80398: PUSH
80399: EMPTY
80400: LIST
80401: LIST
80402: PUSH
80403: LD_INT 1
80405: NEG
80406: PUSH
80407: LD_INT 1
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: PUSH
80414: EMPTY
80415: LIST
80416: LIST
80417: LIST
80418: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
80419: LD_ADDR_VAR 0 63
80423: PUSH
80424: LD_INT 1
80426: NEG
80427: PUSH
80428: LD_INT 1
80430: PUSH
80431: EMPTY
80432: LIST
80433: LIST
80434: PUSH
80435: LD_INT 2
80437: NEG
80438: PUSH
80439: LD_INT 0
80441: PUSH
80442: EMPTY
80443: LIST
80444: LIST
80445: PUSH
80446: LD_INT 2
80448: NEG
80449: PUSH
80450: LD_INT 1
80452: NEG
80453: PUSH
80454: EMPTY
80455: LIST
80456: LIST
80457: PUSH
80458: EMPTY
80459: LIST
80460: LIST
80461: LIST
80462: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80463: LD_ADDR_VAR 0 64
80467: PUSH
80468: LD_INT 1
80470: NEG
80471: PUSH
80472: LD_INT 2
80474: NEG
80475: PUSH
80476: EMPTY
80477: LIST
80478: LIST
80479: PUSH
80480: LD_INT 2
80482: NEG
80483: PUSH
80484: LD_INT 1
80486: NEG
80487: PUSH
80488: EMPTY
80489: LIST
80490: LIST
80491: PUSH
80492: LD_INT 2
80494: NEG
80495: PUSH
80496: LD_INT 2
80498: NEG
80499: PUSH
80500: EMPTY
80501: LIST
80502: LIST
80503: PUSH
80504: EMPTY
80505: LIST
80506: LIST
80507: LIST
80508: ST_TO_ADDR
// end ; 2 :
80509: GO 83775
80511: LD_INT 2
80513: DOUBLE
80514: EQUAL
80515: IFTRUE 80519
80517: GO 83774
80519: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
80520: LD_ADDR_VAR 0 29
80524: PUSH
80525: LD_INT 4
80527: PUSH
80528: LD_INT 0
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: PUSH
80535: LD_INT 4
80537: PUSH
80538: LD_INT 1
80540: NEG
80541: PUSH
80542: EMPTY
80543: LIST
80544: LIST
80545: PUSH
80546: LD_INT 5
80548: PUSH
80549: LD_INT 0
80551: PUSH
80552: EMPTY
80553: LIST
80554: LIST
80555: PUSH
80556: LD_INT 5
80558: PUSH
80559: LD_INT 1
80561: PUSH
80562: EMPTY
80563: LIST
80564: LIST
80565: PUSH
80566: LD_INT 4
80568: PUSH
80569: LD_INT 1
80571: PUSH
80572: EMPTY
80573: LIST
80574: LIST
80575: PUSH
80576: LD_INT 3
80578: PUSH
80579: LD_INT 0
80581: PUSH
80582: EMPTY
80583: LIST
80584: LIST
80585: PUSH
80586: LD_INT 3
80588: PUSH
80589: LD_INT 1
80591: NEG
80592: PUSH
80593: EMPTY
80594: LIST
80595: LIST
80596: PUSH
80597: LD_INT 3
80599: PUSH
80600: LD_INT 2
80602: NEG
80603: PUSH
80604: EMPTY
80605: LIST
80606: LIST
80607: PUSH
80608: LD_INT 5
80610: PUSH
80611: LD_INT 2
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: PUSH
80618: LD_INT 3
80620: PUSH
80621: LD_INT 3
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: PUSH
80628: LD_INT 3
80630: PUSH
80631: LD_INT 2
80633: PUSH
80634: EMPTY
80635: LIST
80636: LIST
80637: PUSH
80638: LD_INT 4
80640: PUSH
80641: LD_INT 3
80643: PUSH
80644: EMPTY
80645: LIST
80646: LIST
80647: PUSH
80648: LD_INT 4
80650: PUSH
80651: LD_INT 4
80653: PUSH
80654: EMPTY
80655: LIST
80656: LIST
80657: PUSH
80658: LD_INT 3
80660: PUSH
80661: LD_INT 4
80663: PUSH
80664: EMPTY
80665: LIST
80666: LIST
80667: PUSH
80668: LD_INT 2
80670: PUSH
80671: LD_INT 3
80673: PUSH
80674: EMPTY
80675: LIST
80676: LIST
80677: PUSH
80678: LD_INT 2
80680: PUSH
80681: LD_INT 2
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: LD_INT 4
80690: PUSH
80691: LD_INT 2
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: PUSH
80698: LD_INT 2
80700: PUSH
80701: LD_INT 4
80703: PUSH
80704: EMPTY
80705: LIST
80706: LIST
80707: PUSH
80708: LD_INT 0
80710: PUSH
80711: LD_INT 4
80713: PUSH
80714: EMPTY
80715: LIST
80716: LIST
80717: PUSH
80718: LD_INT 0
80720: PUSH
80721: LD_INT 3
80723: PUSH
80724: EMPTY
80725: LIST
80726: LIST
80727: PUSH
80728: LD_INT 1
80730: PUSH
80731: LD_INT 4
80733: PUSH
80734: EMPTY
80735: LIST
80736: LIST
80737: PUSH
80738: LD_INT 1
80740: PUSH
80741: LD_INT 5
80743: PUSH
80744: EMPTY
80745: LIST
80746: LIST
80747: PUSH
80748: LD_INT 0
80750: PUSH
80751: LD_INT 5
80753: PUSH
80754: EMPTY
80755: LIST
80756: LIST
80757: PUSH
80758: LD_INT 1
80760: NEG
80761: PUSH
80762: LD_INT 4
80764: PUSH
80765: EMPTY
80766: LIST
80767: LIST
80768: PUSH
80769: LD_INT 1
80771: NEG
80772: PUSH
80773: LD_INT 3
80775: PUSH
80776: EMPTY
80777: LIST
80778: LIST
80779: PUSH
80780: LD_INT 2
80782: PUSH
80783: LD_INT 5
80785: PUSH
80786: EMPTY
80787: LIST
80788: LIST
80789: PUSH
80790: LD_INT 2
80792: NEG
80793: PUSH
80794: LD_INT 3
80796: PUSH
80797: EMPTY
80798: LIST
80799: LIST
80800: PUSH
80801: LD_INT 3
80803: NEG
80804: PUSH
80805: LD_INT 0
80807: PUSH
80808: EMPTY
80809: LIST
80810: LIST
80811: PUSH
80812: LD_INT 3
80814: NEG
80815: PUSH
80816: LD_INT 1
80818: NEG
80819: PUSH
80820: EMPTY
80821: LIST
80822: LIST
80823: PUSH
80824: LD_INT 2
80826: NEG
80827: PUSH
80828: LD_INT 0
80830: PUSH
80831: EMPTY
80832: LIST
80833: LIST
80834: PUSH
80835: LD_INT 2
80837: NEG
80838: PUSH
80839: LD_INT 1
80841: PUSH
80842: EMPTY
80843: LIST
80844: LIST
80845: PUSH
80846: LD_INT 3
80848: NEG
80849: PUSH
80850: LD_INT 1
80852: PUSH
80853: EMPTY
80854: LIST
80855: LIST
80856: PUSH
80857: LD_INT 4
80859: NEG
80860: PUSH
80861: LD_INT 0
80863: PUSH
80864: EMPTY
80865: LIST
80866: LIST
80867: PUSH
80868: LD_INT 4
80870: NEG
80871: PUSH
80872: LD_INT 1
80874: NEG
80875: PUSH
80876: EMPTY
80877: LIST
80878: LIST
80879: PUSH
80880: LD_INT 4
80882: NEG
80883: PUSH
80884: LD_INT 2
80886: NEG
80887: PUSH
80888: EMPTY
80889: LIST
80890: LIST
80891: PUSH
80892: LD_INT 2
80894: NEG
80895: PUSH
80896: LD_INT 2
80898: PUSH
80899: EMPTY
80900: LIST
80901: LIST
80902: PUSH
80903: LD_INT 4
80905: NEG
80906: PUSH
80907: LD_INT 4
80909: NEG
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: PUSH
80915: LD_INT 4
80917: NEG
80918: PUSH
80919: LD_INT 5
80921: NEG
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PUSH
80927: LD_INT 3
80929: NEG
80930: PUSH
80931: LD_INT 4
80933: NEG
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: PUSH
80939: LD_INT 3
80941: NEG
80942: PUSH
80943: LD_INT 3
80945: NEG
80946: PUSH
80947: EMPTY
80948: LIST
80949: LIST
80950: PUSH
80951: LD_INT 4
80953: NEG
80954: PUSH
80955: LD_INT 3
80957: NEG
80958: PUSH
80959: EMPTY
80960: LIST
80961: LIST
80962: PUSH
80963: LD_INT 5
80965: NEG
80966: PUSH
80967: LD_INT 4
80969: NEG
80970: PUSH
80971: EMPTY
80972: LIST
80973: LIST
80974: PUSH
80975: LD_INT 5
80977: NEG
80978: PUSH
80979: LD_INT 5
80981: NEG
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: PUSH
80987: LD_INT 3
80989: NEG
80990: PUSH
80991: LD_INT 5
80993: NEG
80994: PUSH
80995: EMPTY
80996: LIST
80997: LIST
80998: PUSH
80999: LD_INT 5
81001: NEG
81002: PUSH
81003: LD_INT 3
81005: NEG
81006: PUSH
81007: EMPTY
81008: LIST
81009: LIST
81010: PUSH
81011: EMPTY
81012: LIST
81013: LIST
81014: LIST
81015: LIST
81016: LIST
81017: LIST
81018: LIST
81019: LIST
81020: LIST
81021: LIST
81022: LIST
81023: LIST
81024: LIST
81025: LIST
81026: LIST
81027: LIST
81028: LIST
81029: LIST
81030: LIST
81031: LIST
81032: LIST
81033: LIST
81034: LIST
81035: LIST
81036: LIST
81037: LIST
81038: LIST
81039: LIST
81040: LIST
81041: LIST
81042: LIST
81043: LIST
81044: LIST
81045: LIST
81046: LIST
81047: LIST
81048: LIST
81049: LIST
81050: LIST
81051: LIST
81052: LIST
81053: LIST
81054: LIST
81055: LIST
81056: LIST
81057: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
81058: LD_ADDR_VAR 0 30
81062: PUSH
81063: LD_INT 4
81065: PUSH
81066: LD_INT 4
81068: PUSH
81069: EMPTY
81070: LIST
81071: LIST
81072: PUSH
81073: LD_INT 4
81075: PUSH
81076: LD_INT 3
81078: PUSH
81079: EMPTY
81080: LIST
81081: LIST
81082: PUSH
81083: LD_INT 5
81085: PUSH
81086: LD_INT 4
81088: PUSH
81089: EMPTY
81090: LIST
81091: LIST
81092: PUSH
81093: LD_INT 5
81095: PUSH
81096: LD_INT 5
81098: PUSH
81099: EMPTY
81100: LIST
81101: LIST
81102: PUSH
81103: LD_INT 4
81105: PUSH
81106: LD_INT 5
81108: PUSH
81109: EMPTY
81110: LIST
81111: LIST
81112: PUSH
81113: LD_INT 3
81115: PUSH
81116: LD_INT 4
81118: PUSH
81119: EMPTY
81120: LIST
81121: LIST
81122: PUSH
81123: LD_INT 3
81125: PUSH
81126: LD_INT 3
81128: PUSH
81129: EMPTY
81130: LIST
81131: LIST
81132: PUSH
81133: LD_INT 5
81135: PUSH
81136: LD_INT 3
81138: PUSH
81139: EMPTY
81140: LIST
81141: LIST
81142: PUSH
81143: LD_INT 3
81145: PUSH
81146: LD_INT 5
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PUSH
81153: LD_INT 0
81155: PUSH
81156: LD_INT 3
81158: PUSH
81159: EMPTY
81160: LIST
81161: LIST
81162: PUSH
81163: LD_INT 0
81165: PUSH
81166: LD_INT 2
81168: PUSH
81169: EMPTY
81170: LIST
81171: LIST
81172: PUSH
81173: LD_INT 1
81175: PUSH
81176: LD_INT 3
81178: PUSH
81179: EMPTY
81180: LIST
81181: LIST
81182: PUSH
81183: LD_INT 1
81185: PUSH
81186: LD_INT 4
81188: PUSH
81189: EMPTY
81190: LIST
81191: LIST
81192: PUSH
81193: LD_INT 0
81195: PUSH
81196: LD_INT 4
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: PUSH
81203: LD_INT 1
81205: NEG
81206: PUSH
81207: LD_INT 3
81209: PUSH
81210: EMPTY
81211: LIST
81212: LIST
81213: PUSH
81214: LD_INT 1
81216: NEG
81217: PUSH
81218: LD_INT 2
81220: PUSH
81221: EMPTY
81222: LIST
81223: LIST
81224: PUSH
81225: LD_INT 2
81227: PUSH
81228: LD_INT 4
81230: PUSH
81231: EMPTY
81232: LIST
81233: LIST
81234: PUSH
81235: LD_INT 2
81237: NEG
81238: PUSH
81239: LD_INT 2
81241: PUSH
81242: EMPTY
81243: LIST
81244: LIST
81245: PUSH
81246: LD_INT 4
81248: NEG
81249: PUSH
81250: LD_INT 0
81252: PUSH
81253: EMPTY
81254: LIST
81255: LIST
81256: PUSH
81257: LD_INT 4
81259: NEG
81260: PUSH
81261: LD_INT 1
81263: NEG
81264: PUSH
81265: EMPTY
81266: LIST
81267: LIST
81268: PUSH
81269: LD_INT 3
81271: NEG
81272: PUSH
81273: LD_INT 0
81275: PUSH
81276: EMPTY
81277: LIST
81278: LIST
81279: PUSH
81280: LD_INT 3
81282: NEG
81283: PUSH
81284: LD_INT 1
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: PUSH
81291: LD_INT 4
81293: NEG
81294: PUSH
81295: LD_INT 1
81297: PUSH
81298: EMPTY
81299: LIST
81300: LIST
81301: PUSH
81302: LD_INT 5
81304: NEG
81305: PUSH
81306: LD_INT 0
81308: PUSH
81309: EMPTY
81310: LIST
81311: LIST
81312: PUSH
81313: LD_INT 5
81315: NEG
81316: PUSH
81317: LD_INT 1
81319: NEG
81320: PUSH
81321: EMPTY
81322: LIST
81323: LIST
81324: PUSH
81325: LD_INT 5
81327: NEG
81328: PUSH
81329: LD_INT 2
81331: NEG
81332: PUSH
81333: EMPTY
81334: LIST
81335: LIST
81336: PUSH
81337: LD_INT 3
81339: NEG
81340: PUSH
81341: LD_INT 2
81343: PUSH
81344: EMPTY
81345: LIST
81346: LIST
81347: PUSH
81348: LD_INT 3
81350: NEG
81351: PUSH
81352: LD_INT 3
81354: NEG
81355: PUSH
81356: EMPTY
81357: LIST
81358: LIST
81359: PUSH
81360: LD_INT 3
81362: NEG
81363: PUSH
81364: LD_INT 4
81366: NEG
81367: PUSH
81368: EMPTY
81369: LIST
81370: LIST
81371: PUSH
81372: LD_INT 2
81374: NEG
81375: PUSH
81376: LD_INT 3
81378: NEG
81379: PUSH
81380: EMPTY
81381: LIST
81382: LIST
81383: PUSH
81384: LD_INT 2
81386: NEG
81387: PUSH
81388: LD_INT 2
81390: NEG
81391: PUSH
81392: EMPTY
81393: LIST
81394: LIST
81395: PUSH
81396: LD_INT 3
81398: NEG
81399: PUSH
81400: LD_INT 2
81402: NEG
81403: PUSH
81404: EMPTY
81405: LIST
81406: LIST
81407: PUSH
81408: LD_INT 4
81410: NEG
81411: PUSH
81412: LD_INT 3
81414: NEG
81415: PUSH
81416: EMPTY
81417: LIST
81418: LIST
81419: PUSH
81420: LD_INT 4
81422: NEG
81423: PUSH
81424: LD_INT 4
81426: NEG
81427: PUSH
81428: EMPTY
81429: LIST
81430: LIST
81431: PUSH
81432: LD_INT 2
81434: NEG
81435: PUSH
81436: LD_INT 4
81438: NEG
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: PUSH
81444: LD_INT 4
81446: NEG
81447: PUSH
81448: LD_INT 2
81450: NEG
81451: PUSH
81452: EMPTY
81453: LIST
81454: LIST
81455: PUSH
81456: LD_INT 0
81458: PUSH
81459: LD_INT 4
81461: NEG
81462: PUSH
81463: EMPTY
81464: LIST
81465: LIST
81466: PUSH
81467: LD_INT 0
81469: PUSH
81470: LD_INT 5
81472: NEG
81473: PUSH
81474: EMPTY
81475: LIST
81476: LIST
81477: PUSH
81478: LD_INT 1
81480: PUSH
81481: LD_INT 4
81483: NEG
81484: PUSH
81485: EMPTY
81486: LIST
81487: LIST
81488: PUSH
81489: LD_INT 1
81491: PUSH
81492: LD_INT 3
81494: NEG
81495: PUSH
81496: EMPTY
81497: LIST
81498: LIST
81499: PUSH
81500: LD_INT 0
81502: PUSH
81503: LD_INT 3
81505: NEG
81506: PUSH
81507: EMPTY
81508: LIST
81509: LIST
81510: PUSH
81511: LD_INT 1
81513: NEG
81514: PUSH
81515: LD_INT 4
81517: NEG
81518: PUSH
81519: EMPTY
81520: LIST
81521: LIST
81522: PUSH
81523: LD_INT 1
81525: NEG
81526: PUSH
81527: LD_INT 5
81529: NEG
81530: PUSH
81531: EMPTY
81532: LIST
81533: LIST
81534: PUSH
81535: LD_INT 2
81537: PUSH
81538: LD_INT 3
81540: NEG
81541: PUSH
81542: EMPTY
81543: LIST
81544: LIST
81545: PUSH
81546: LD_INT 2
81548: NEG
81549: PUSH
81550: LD_INT 5
81552: NEG
81553: PUSH
81554: EMPTY
81555: LIST
81556: LIST
81557: PUSH
81558: EMPTY
81559: LIST
81560: LIST
81561: LIST
81562: LIST
81563: LIST
81564: LIST
81565: LIST
81566: LIST
81567: LIST
81568: LIST
81569: LIST
81570: LIST
81571: LIST
81572: LIST
81573: LIST
81574: LIST
81575: LIST
81576: LIST
81577: LIST
81578: LIST
81579: LIST
81580: LIST
81581: LIST
81582: LIST
81583: LIST
81584: LIST
81585: LIST
81586: LIST
81587: LIST
81588: LIST
81589: LIST
81590: LIST
81591: LIST
81592: LIST
81593: LIST
81594: LIST
81595: LIST
81596: LIST
81597: LIST
81598: LIST
81599: LIST
81600: LIST
81601: LIST
81602: LIST
81603: LIST
81604: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
81605: LD_ADDR_VAR 0 31
81609: PUSH
81610: LD_INT 0
81612: PUSH
81613: LD_INT 4
81615: PUSH
81616: EMPTY
81617: LIST
81618: LIST
81619: PUSH
81620: LD_INT 0
81622: PUSH
81623: LD_INT 3
81625: PUSH
81626: EMPTY
81627: LIST
81628: LIST
81629: PUSH
81630: LD_INT 1
81632: PUSH
81633: LD_INT 4
81635: PUSH
81636: EMPTY
81637: LIST
81638: LIST
81639: PUSH
81640: LD_INT 1
81642: PUSH
81643: LD_INT 5
81645: PUSH
81646: EMPTY
81647: LIST
81648: LIST
81649: PUSH
81650: LD_INT 0
81652: PUSH
81653: LD_INT 5
81655: PUSH
81656: EMPTY
81657: LIST
81658: LIST
81659: PUSH
81660: LD_INT 1
81662: NEG
81663: PUSH
81664: LD_INT 4
81666: PUSH
81667: EMPTY
81668: LIST
81669: LIST
81670: PUSH
81671: LD_INT 1
81673: NEG
81674: PUSH
81675: LD_INT 3
81677: PUSH
81678: EMPTY
81679: LIST
81680: LIST
81681: PUSH
81682: LD_INT 2
81684: PUSH
81685: LD_INT 5
81687: PUSH
81688: EMPTY
81689: LIST
81690: LIST
81691: PUSH
81692: LD_INT 2
81694: NEG
81695: PUSH
81696: LD_INT 3
81698: PUSH
81699: EMPTY
81700: LIST
81701: LIST
81702: PUSH
81703: LD_INT 3
81705: NEG
81706: PUSH
81707: LD_INT 0
81709: PUSH
81710: EMPTY
81711: LIST
81712: LIST
81713: PUSH
81714: LD_INT 3
81716: NEG
81717: PUSH
81718: LD_INT 1
81720: NEG
81721: PUSH
81722: EMPTY
81723: LIST
81724: LIST
81725: PUSH
81726: LD_INT 2
81728: NEG
81729: PUSH
81730: LD_INT 0
81732: PUSH
81733: EMPTY
81734: LIST
81735: LIST
81736: PUSH
81737: LD_INT 2
81739: NEG
81740: PUSH
81741: LD_INT 1
81743: PUSH
81744: EMPTY
81745: LIST
81746: LIST
81747: PUSH
81748: LD_INT 3
81750: NEG
81751: PUSH
81752: LD_INT 1
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: PUSH
81759: LD_INT 4
81761: NEG
81762: PUSH
81763: LD_INT 0
81765: PUSH
81766: EMPTY
81767: LIST
81768: LIST
81769: PUSH
81770: LD_INT 4
81772: NEG
81773: PUSH
81774: LD_INT 1
81776: NEG
81777: PUSH
81778: EMPTY
81779: LIST
81780: LIST
81781: PUSH
81782: LD_INT 4
81784: NEG
81785: PUSH
81786: LD_INT 2
81788: NEG
81789: PUSH
81790: EMPTY
81791: LIST
81792: LIST
81793: PUSH
81794: LD_INT 2
81796: NEG
81797: PUSH
81798: LD_INT 2
81800: PUSH
81801: EMPTY
81802: LIST
81803: LIST
81804: PUSH
81805: LD_INT 4
81807: NEG
81808: PUSH
81809: LD_INT 4
81811: NEG
81812: PUSH
81813: EMPTY
81814: LIST
81815: LIST
81816: PUSH
81817: LD_INT 4
81819: NEG
81820: PUSH
81821: LD_INT 5
81823: NEG
81824: PUSH
81825: EMPTY
81826: LIST
81827: LIST
81828: PUSH
81829: LD_INT 3
81831: NEG
81832: PUSH
81833: LD_INT 4
81835: NEG
81836: PUSH
81837: EMPTY
81838: LIST
81839: LIST
81840: PUSH
81841: LD_INT 3
81843: NEG
81844: PUSH
81845: LD_INT 3
81847: NEG
81848: PUSH
81849: EMPTY
81850: LIST
81851: LIST
81852: PUSH
81853: LD_INT 4
81855: NEG
81856: PUSH
81857: LD_INT 3
81859: NEG
81860: PUSH
81861: EMPTY
81862: LIST
81863: LIST
81864: PUSH
81865: LD_INT 5
81867: NEG
81868: PUSH
81869: LD_INT 4
81871: NEG
81872: PUSH
81873: EMPTY
81874: LIST
81875: LIST
81876: PUSH
81877: LD_INT 5
81879: NEG
81880: PUSH
81881: LD_INT 5
81883: NEG
81884: PUSH
81885: EMPTY
81886: LIST
81887: LIST
81888: PUSH
81889: LD_INT 3
81891: NEG
81892: PUSH
81893: LD_INT 5
81895: NEG
81896: PUSH
81897: EMPTY
81898: LIST
81899: LIST
81900: PUSH
81901: LD_INT 5
81903: NEG
81904: PUSH
81905: LD_INT 3
81907: NEG
81908: PUSH
81909: EMPTY
81910: LIST
81911: LIST
81912: PUSH
81913: LD_INT 0
81915: PUSH
81916: LD_INT 3
81918: NEG
81919: PUSH
81920: EMPTY
81921: LIST
81922: LIST
81923: PUSH
81924: LD_INT 0
81926: PUSH
81927: LD_INT 4
81929: NEG
81930: PUSH
81931: EMPTY
81932: LIST
81933: LIST
81934: PUSH
81935: LD_INT 1
81937: PUSH
81938: LD_INT 3
81940: NEG
81941: PUSH
81942: EMPTY
81943: LIST
81944: LIST
81945: PUSH
81946: LD_INT 1
81948: PUSH
81949: LD_INT 2
81951: NEG
81952: PUSH
81953: EMPTY
81954: LIST
81955: LIST
81956: PUSH
81957: LD_INT 0
81959: PUSH
81960: LD_INT 2
81962: NEG
81963: PUSH
81964: EMPTY
81965: LIST
81966: LIST
81967: PUSH
81968: LD_INT 1
81970: NEG
81971: PUSH
81972: LD_INT 3
81974: NEG
81975: PUSH
81976: EMPTY
81977: LIST
81978: LIST
81979: PUSH
81980: LD_INT 1
81982: NEG
81983: PUSH
81984: LD_INT 4
81986: NEG
81987: PUSH
81988: EMPTY
81989: LIST
81990: LIST
81991: PUSH
81992: LD_INT 2
81994: PUSH
81995: LD_INT 2
81997: NEG
81998: PUSH
81999: EMPTY
82000: LIST
82001: LIST
82002: PUSH
82003: LD_INT 2
82005: NEG
82006: PUSH
82007: LD_INT 4
82009: NEG
82010: PUSH
82011: EMPTY
82012: LIST
82013: LIST
82014: PUSH
82015: LD_INT 4
82017: PUSH
82018: LD_INT 0
82020: PUSH
82021: EMPTY
82022: LIST
82023: LIST
82024: PUSH
82025: LD_INT 4
82027: PUSH
82028: LD_INT 1
82030: NEG
82031: PUSH
82032: EMPTY
82033: LIST
82034: LIST
82035: PUSH
82036: LD_INT 5
82038: PUSH
82039: LD_INT 0
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: PUSH
82046: LD_INT 5
82048: PUSH
82049: LD_INT 1
82051: PUSH
82052: EMPTY
82053: LIST
82054: LIST
82055: PUSH
82056: LD_INT 4
82058: PUSH
82059: LD_INT 1
82061: PUSH
82062: EMPTY
82063: LIST
82064: LIST
82065: PUSH
82066: LD_INT 3
82068: PUSH
82069: LD_INT 0
82071: PUSH
82072: EMPTY
82073: LIST
82074: LIST
82075: PUSH
82076: LD_INT 3
82078: PUSH
82079: LD_INT 1
82081: NEG
82082: PUSH
82083: EMPTY
82084: LIST
82085: LIST
82086: PUSH
82087: LD_INT 3
82089: PUSH
82090: LD_INT 2
82092: NEG
82093: PUSH
82094: EMPTY
82095: LIST
82096: LIST
82097: PUSH
82098: LD_INT 5
82100: PUSH
82101: LD_INT 2
82103: PUSH
82104: EMPTY
82105: LIST
82106: LIST
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: LIST
82112: LIST
82113: LIST
82114: LIST
82115: LIST
82116: LIST
82117: LIST
82118: LIST
82119: LIST
82120: LIST
82121: LIST
82122: LIST
82123: LIST
82124: LIST
82125: LIST
82126: LIST
82127: LIST
82128: LIST
82129: LIST
82130: LIST
82131: LIST
82132: LIST
82133: LIST
82134: LIST
82135: LIST
82136: LIST
82137: LIST
82138: LIST
82139: LIST
82140: LIST
82141: LIST
82142: LIST
82143: LIST
82144: LIST
82145: LIST
82146: LIST
82147: LIST
82148: LIST
82149: LIST
82150: LIST
82151: LIST
82152: LIST
82153: LIST
82154: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
82155: LD_ADDR_VAR 0 32
82159: PUSH
82160: LD_INT 4
82162: NEG
82163: PUSH
82164: LD_INT 0
82166: PUSH
82167: EMPTY
82168: LIST
82169: LIST
82170: PUSH
82171: LD_INT 4
82173: NEG
82174: PUSH
82175: LD_INT 1
82177: NEG
82178: PUSH
82179: EMPTY
82180: LIST
82181: LIST
82182: PUSH
82183: LD_INT 3
82185: NEG
82186: PUSH
82187: LD_INT 0
82189: PUSH
82190: EMPTY
82191: LIST
82192: LIST
82193: PUSH
82194: LD_INT 3
82196: NEG
82197: PUSH
82198: LD_INT 1
82200: PUSH
82201: EMPTY
82202: LIST
82203: LIST
82204: PUSH
82205: LD_INT 4
82207: NEG
82208: PUSH
82209: LD_INT 1
82211: PUSH
82212: EMPTY
82213: LIST
82214: LIST
82215: PUSH
82216: LD_INT 5
82218: NEG
82219: PUSH
82220: LD_INT 0
82222: PUSH
82223: EMPTY
82224: LIST
82225: LIST
82226: PUSH
82227: LD_INT 5
82229: NEG
82230: PUSH
82231: LD_INT 1
82233: NEG
82234: PUSH
82235: EMPTY
82236: LIST
82237: LIST
82238: PUSH
82239: LD_INT 5
82241: NEG
82242: PUSH
82243: LD_INT 2
82245: NEG
82246: PUSH
82247: EMPTY
82248: LIST
82249: LIST
82250: PUSH
82251: LD_INT 3
82253: NEG
82254: PUSH
82255: LD_INT 2
82257: PUSH
82258: EMPTY
82259: LIST
82260: LIST
82261: PUSH
82262: LD_INT 3
82264: NEG
82265: PUSH
82266: LD_INT 3
82268: NEG
82269: PUSH
82270: EMPTY
82271: LIST
82272: LIST
82273: PUSH
82274: LD_INT 3
82276: NEG
82277: PUSH
82278: LD_INT 4
82280: NEG
82281: PUSH
82282: EMPTY
82283: LIST
82284: LIST
82285: PUSH
82286: LD_INT 2
82288: NEG
82289: PUSH
82290: LD_INT 3
82292: NEG
82293: PUSH
82294: EMPTY
82295: LIST
82296: LIST
82297: PUSH
82298: LD_INT 2
82300: NEG
82301: PUSH
82302: LD_INT 2
82304: NEG
82305: PUSH
82306: EMPTY
82307: LIST
82308: LIST
82309: PUSH
82310: LD_INT 3
82312: NEG
82313: PUSH
82314: LD_INT 2
82316: NEG
82317: PUSH
82318: EMPTY
82319: LIST
82320: LIST
82321: PUSH
82322: LD_INT 4
82324: NEG
82325: PUSH
82326: LD_INT 3
82328: NEG
82329: PUSH
82330: EMPTY
82331: LIST
82332: LIST
82333: PUSH
82334: LD_INT 4
82336: NEG
82337: PUSH
82338: LD_INT 4
82340: NEG
82341: PUSH
82342: EMPTY
82343: LIST
82344: LIST
82345: PUSH
82346: LD_INT 2
82348: NEG
82349: PUSH
82350: LD_INT 4
82352: NEG
82353: PUSH
82354: EMPTY
82355: LIST
82356: LIST
82357: PUSH
82358: LD_INT 4
82360: NEG
82361: PUSH
82362: LD_INT 2
82364: NEG
82365: PUSH
82366: EMPTY
82367: LIST
82368: LIST
82369: PUSH
82370: LD_INT 0
82372: PUSH
82373: LD_INT 4
82375: NEG
82376: PUSH
82377: EMPTY
82378: LIST
82379: LIST
82380: PUSH
82381: LD_INT 0
82383: PUSH
82384: LD_INT 5
82386: NEG
82387: PUSH
82388: EMPTY
82389: LIST
82390: LIST
82391: PUSH
82392: LD_INT 1
82394: PUSH
82395: LD_INT 4
82397: NEG
82398: PUSH
82399: EMPTY
82400: LIST
82401: LIST
82402: PUSH
82403: LD_INT 1
82405: PUSH
82406: LD_INT 3
82408: NEG
82409: PUSH
82410: EMPTY
82411: LIST
82412: LIST
82413: PUSH
82414: LD_INT 0
82416: PUSH
82417: LD_INT 3
82419: NEG
82420: PUSH
82421: EMPTY
82422: LIST
82423: LIST
82424: PUSH
82425: LD_INT 1
82427: NEG
82428: PUSH
82429: LD_INT 4
82431: NEG
82432: PUSH
82433: EMPTY
82434: LIST
82435: LIST
82436: PUSH
82437: LD_INT 1
82439: NEG
82440: PUSH
82441: LD_INT 5
82443: NEG
82444: PUSH
82445: EMPTY
82446: LIST
82447: LIST
82448: PUSH
82449: LD_INT 2
82451: PUSH
82452: LD_INT 3
82454: NEG
82455: PUSH
82456: EMPTY
82457: LIST
82458: LIST
82459: PUSH
82460: LD_INT 2
82462: NEG
82463: PUSH
82464: LD_INT 5
82466: NEG
82467: PUSH
82468: EMPTY
82469: LIST
82470: LIST
82471: PUSH
82472: LD_INT 3
82474: PUSH
82475: LD_INT 0
82477: PUSH
82478: EMPTY
82479: LIST
82480: LIST
82481: PUSH
82482: LD_INT 3
82484: PUSH
82485: LD_INT 1
82487: NEG
82488: PUSH
82489: EMPTY
82490: LIST
82491: LIST
82492: PUSH
82493: LD_INT 4
82495: PUSH
82496: LD_INT 0
82498: PUSH
82499: EMPTY
82500: LIST
82501: LIST
82502: PUSH
82503: LD_INT 4
82505: PUSH
82506: LD_INT 1
82508: PUSH
82509: EMPTY
82510: LIST
82511: LIST
82512: PUSH
82513: LD_INT 3
82515: PUSH
82516: LD_INT 1
82518: PUSH
82519: EMPTY
82520: LIST
82521: LIST
82522: PUSH
82523: LD_INT 2
82525: PUSH
82526: LD_INT 0
82528: PUSH
82529: EMPTY
82530: LIST
82531: LIST
82532: PUSH
82533: LD_INT 2
82535: PUSH
82536: LD_INT 1
82538: NEG
82539: PUSH
82540: EMPTY
82541: LIST
82542: LIST
82543: PUSH
82544: LD_INT 2
82546: PUSH
82547: LD_INT 2
82549: NEG
82550: PUSH
82551: EMPTY
82552: LIST
82553: LIST
82554: PUSH
82555: LD_INT 4
82557: PUSH
82558: LD_INT 2
82560: PUSH
82561: EMPTY
82562: LIST
82563: LIST
82564: PUSH
82565: LD_INT 4
82567: PUSH
82568: LD_INT 4
82570: PUSH
82571: EMPTY
82572: LIST
82573: LIST
82574: PUSH
82575: LD_INT 4
82577: PUSH
82578: LD_INT 3
82580: PUSH
82581: EMPTY
82582: LIST
82583: LIST
82584: PUSH
82585: LD_INT 5
82587: PUSH
82588: LD_INT 4
82590: PUSH
82591: EMPTY
82592: LIST
82593: LIST
82594: PUSH
82595: LD_INT 5
82597: PUSH
82598: LD_INT 5
82600: PUSH
82601: EMPTY
82602: LIST
82603: LIST
82604: PUSH
82605: LD_INT 4
82607: PUSH
82608: LD_INT 5
82610: PUSH
82611: EMPTY
82612: LIST
82613: LIST
82614: PUSH
82615: LD_INT 3
82617: PUSH
82618: LD_INT 4
82620: PUSH
82621: EMPTY
82622: LIST
82623: LIST
82624: PUSH
82625: LD_INT 3
82627: PUSH
82628: LD_INT 3
82630: PUSH
82631: EMPTY
82632: LIST
82633: LIST
82634: PUSH
82635: LD_INT 5
82637: PUSH
82638: LD_INT 3
82640: PUSH
82641: EMPTY
82642: LIST
82643: LIST
82644: PUSH
82645: LD_INT 3
82647: PUSH
82648: LD_INT 5
82650: PUSH
82651: EMPTY
82652: LIST
82653: LIST
82654: PUSH
82655: EMPTY
82656: LIST
82657: LIST
82658: LIST
82659: LIST
82660: LIST
82661: LIST
82662: LIST
82663: LIST
82664: LIST
82665: LIST
82666: LIST
82667: LIST
82668: LIST
82669: LIST
82670: LIST
82671: LIST
82672: LIST
82673: LIST
82674: LIST
82675: LIST
82676: LIST
82677: LIST
82678: LIST
82679: LIST
82680: LIST
82681: LIST
82682: LIST
82683: LIST
82684: LIST
82685: LIST
82686: LIST
82687: LIST
82688: LIST
82689: LIST
82690: LIST
82691: LIST
82692: LIST
82693: LIST
82694: LIST
82695: LIST
82696: LIST
82697: LIST
82698: LIST
82699: LIST
82700: LIST
82701: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
82702: LD_ADDR_VAR 0 33
82706: PUSH
82707: LD_INT 4
82709: NEG
82710: PUSH
82711: LD_INT 4
82713: NEG
82714: PUSH
82715: EMPTY
82716: LIST
82717: LIST
82718: PUSH
82719: LD_INT 4
82721: NEG
82722: PUSH
82723: LD_INT 5
82725: NEG
82726: PUSH
82727: EMPTY
82728: LIST
82729: LIST
82730: PUSH
82731: LD_INT 3
82733: NEG
82734: PUSH
82735: LD_INT 4
82737: NEG
82738: PUSH
82739: EMPTY
82740: LIST
82741: LIST
82742: PUSH
82743: LD_INT 3
82745: NEG
82746: PUSH
82747: LD_INT 3
82749: NEG
82750: PUSH
82751: EMPTY
82752: LIST
82753: LIST
82754: PUSH
82755: LD_INT 4
82757: NEG
82758: PUSH
82759: LD_INT 3
82761: NEG
82762: PUSH
82763: EMPTY
82764: LIST
82765: LIST
82766: PUSH
82767: LD_INT 5
82769: NEG
82770: PUSH
82771: LD_INT 4
82773: NEG
82774: PUSH
82775: EMPTY
82776: LIST
82777: LIST
82778: PUSH
82779: LD_INT 5
82781: NEG
82782: PUSH
82783: LD_INT 5
82785: NEG
82786: PUSH
82787: EMPTY
82788: LIST
82789: LIST
82790: PUSH
82791: LD_INT 3
82793: NEG
82794: PUSH
82795: LD_INT 5
82797: NEG
82798: PUSH
82799: EMPTY
82800: LIST
82801: LIST
82802: PUSH
82803: LD_INT 5
82805: NEG
82806: PUSH
82807: LD_INT 3
82809: NEG
82810: PUSH
82811: EMPTY
82812: LIST
82813: LIST
82814: PUSH
82815: LD_INT 0
82817: PUSH
82818: LD_INT 3
82820: NEG
82821: PUSH
82822: EMPTY
82823: LIST
82824: LIST
82825: PUSH
82826: LD_INT 0
82828: PUSH
82829: LD_INT 4
82831: NEG
82832: PUSH
82833: EMPTY
82834: LIST
82835: LIST
82836: PUSH
82837: LD_INT 1
82839: PUSH
82840: LD_INT 3
82842: NEG
82843: PUSH
82844: EMPTY
82845: LIST
82846: LIST
82847: PUSH
82848: LD_INT 1
82850: PUSH
82851: LD_INT 2
82853: NEG
82854: PUSH
82855: EMPTY
82856: LIST
82857: LIST
82858: PUSH
82859: LD_INT 0
82861: PUSH
82862: LD_INT 2
82864: NEG
82865: PUSH
82866: EMPTY
82867: LIST
82868: LIST
82869: PUSH
82870: LD_INT 1
82872: NEG
82873: PUSH
82874: LD_INT 3
82876: NEG
82877: PUSH
82878: EMPTY
82879: LIST
82880: LIST
82881: PUSH
82882: LD_INT 1
82884: NEG
82885: PUSH
82886: LD_INT 4
82888: NEG
82889: PUSH
82890: EMPTY
82891: LIST
82892: LIST
82893: PUSH
82894: LD_INT 2
82896: PUSH
82897: LD_INT 2
82899: NEG
82900: PUSH
82901: EMPTY
82902: LIST
82903: LIST
82904: PUSH
82905: LD_INT 2
82907: NEG
82908: PUSH
82909: LD_INT 4
82911: NEG
82912: PUSH
82913: EMPTY
82914: LIST
82915: LIST
82916: PUSH
82917: LD_INT 4
82919: PUSH
82920: LD_INT 0
82922: PUSH
82923: EMPTY
82924: LIST
82925: LIST
82926: PUSH
82927: LD_INT 4
82929: PUSH
82930: LD_INT 1
82932: NEG
82933: PUSH
82934: EMPTY
82935: LIST
82936: LIST
82937: PUSH
82938: LD_INT 5
82940: PUSH
82941: LD_INT 0
82943: PUSH
82944: EMPTY
82945: LIST
82946: LIST
82947: PUSH
82948: LD_INT 5
82950: PUSH
82951: LD_INT 1
82953: PUSH
82954: EMPTY
82955: LIST
82956: LIST
82957: PUSH
82958: LD_INT 4
82960: PUSH
82961: LD_INT 1
82963: PUSH
82964: EMPTY
82965: LIST
82966: LIST
82967: PUSH
82968: LD_INT 3
82970: PUSH
82971: LD_INT 0
82973: PUSH
82974: EMPTY
82975: LIST
82976: LIST
82977: PUSH
82978: LD_INT 3
82980: PUSH
82981: LD_INT 1
82983: NEG
82984: PUSH
82985: EMPTY
82986: LIST
82987: LIST
82988: PUSH
82989: LD_INT 3
82991: PUSH
82992: LD_INT 2
82994: NEG
82995: PUSH
82996: EMPTY
82997: LIST
82998: LIST
82999: PUSH
83000: LD_INT 5
83002: PUSH
83003: LD_INT 2
83005: PUSH
83006: EMPTY
83007: LIST
83008: LIST
83009: PUSH
83010: LD_INT 3
83012: PUSH
83013: LD_INT 3
83015: PUSH
83016: EMPTY
83017: LIST
83018: LIST
83019: PUSH
83020: LD_INT 3
83022: PUSH
83023: LD_INT 2
83025: PUSH
83026: EMPTY
83027: LIST
83028: LIST
83029: PUSH
83030: LD_INT 4
83032: PUSH
83033: LD_INT 3
83035: PUSH
83036: EMPTY
83037: LIST
83038: LIST
83039: PUSH
83040: LD_INT 4
83042: PUSH
83043: LD_INT 4
83045: PUSH
83046: EMPTY
83047: LIST
83048: LIST
83049: PUSH
83050: LD_INT 3
83052: PUSH
83053: LD_INT 4
83055: PUSH
83056: EMPTY
83057: LIST
83058: LIST
83059: PUSH
83060: LD_INT 2
83062: PUSH
83063: LD_INT 3
83065: PUSH
83066: EMPTY
83067: LIST
83068: LIST
83069: PUSH
83070: LD_INT 2
83072: PUSH
83073: LD_INT 2
83075: PUSH
83076: EMPTY
83077: LIST
83078: LIST
83079: PUSH
83080: LD_INT 4
83082: PUSH
83083: LD_INT 2
83085: PUSH
83086: EMPTY
83087: LIST
83088: LIST
83089: PUSH
83090: LD_INT 2
83092: PUSH
83093: LD_INT 4
83095: PUSH
83096: EMPTY
83097: LIST
83098: LIST
83099: PUSH
83100: LD_INT 0
83102: PUSH
83103: LD_INT 4
83105: PUSH
83106: EMPTY
83107: LIST
83108: LIST
83109: PUSH
83110: LD_INT 0
83112: PUSH
83113: LD_INT 3
83115: PUSH
83116: EMPTY
83117: LIST
83118: LIST
83119: PUSH
83120: LD_INT 1
83122: PUSH
83123: LD_INT 4
83125: PUSH
83126: EMPTY
83127: LIST
83128: LIST
83129: PUSH
83130: LD_INT 1
83132: PUSH
83133: LD_INT 5
83135: PUSH
83136: EMPTY
83137: LIST
83138: LIST
83139: PUSH
83140: LD_INT 0
83142: PUSH
83143: LD_INT 5
83145: PUSH
83146: EMPTY
83147: LIST
83148: LIST
83149: PUSH
83150: LD_INT 1
83152: NEG
83153: PUSH
83154: LD_INT 4
83156: PUSH
83157: EMPTY
83158: LIST
83159: LIST
83160: PUSH
83161: LD_INT 1
83163: NEG
83164: PUSH
83165: LD_INT 3
83167: PUSH
83168: EMPTY
83169: LIST
83170: LIST
83171: PUSH
83172: LD_INT 2
83174: PUSH
83175: LD_INT 5
83177: PUSH
83178: EMPTY
83179: LIST
83180: LIST
83181: PUSH
83182: LD_INT 2
83184: NEG
83185: PUSH
83186: LD_INT 3
83188: PUSH
83189: EMPTY
83190: LIST
83191: LIST
83192: PUSH
83193: EMPTY
83194: LIST
83195: LIST
83196: LIST
83197: LIST
83198: LIST
83199: LIST
83200: LIST
83201: LIST
83202: LIST
83203: LIST
83204: LIST
83205: LIST
83206: LIST
83207: LIST
83208: LIST
83209: LIST
83210: LIST
83211: LIST
83212: LIST
83213: LIST
83214: LIST
83215: LIST
83216: LIST
83217: LIST
83218: LIST
83219: LIST
83220: LIST
83221: LIST
83222: LIST
83223: LIST
83224: LIST
83225: LIST
83226: LIST
83227: LIST
83228: LIST
83229: LIST
83230: LIST
83231: LIST
83232: LIST
83233: LIST
83234: LIST
83235: LIST
83236: LIST
83237: LIST
83238: LIST
83239: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
83240: LD_ADDR_VAR 0 34
83244: PUSH
83245: LD_INT 0
83247: PUSH
83248: LD_INT 4
83250: NEG
83251: PUSH
83252: EMPTY
83253: LIST
83254: LIST
83255: PUSH
83256: LD_INT 0
83258: PUSH
83259: LD_INT 5
83261: NEG
83262: PUSH
83263: EMPTY
83264: LIST
83265: LIST
83266: PUSH
83267: LD_INT 1
83269: PUSH
83270: LD_INT 4
83272: NEG
83273: PUSH
83274: EMPTY
83275: LIST
83276: LIST
83277: PUSH
83278: LD_INT 1
83280: PUSH
83281: LD_INT 3
83283: NEG
83284: PUSH
83285: EMPTY
83286: LIST
83287: LIST
83288: PUSH
83289: LD_INT 0
83291: PUSH
83292: LD_INT 3
83294: NEG
83295: PUSH
83296: EMPTY
83297: LIST
83298: LIST
83299: PUSH
83300: LD_INT 1
83302: NEG
83303: PUSH
83304: LD_INT 4
83306: NEG
83307: PUSH
83308: EMPTY
83309: LIST
83310: LIST
83311: PUSH
83312: LD_INT 1
83314: NEG
83315: PUSH
83316: LD_INT 5
83318: NEG
83319: PUSH
83320: EMPTY
83321: LIST
83322: LIST
83323: PUSH
83324: LD_INT 2
83326: PUSH
83327: LD_INT 3
83329: NEG
83330: PUSH
83331: EMPTY
83332: LIST
83333: LIST
83334: PUSH
83335: LD_INT 2
83337: NEG
83338: PUSH
83339: LD_INT 5
83341: NEG
83342: PUSH
83343: EMPTY
83344: LIST
83345: LIST
83346: PUSH
83347: LD_INT 3
83349: PUSH
83350: LD_INT 0
83352: PUSH
83353: EMPTY
83354: LIST
83355: LIST
83356: PUSH
83357: LD_INT 3
83359: PUSH
83360: LD_INT 1
83362: NEG
83363: PUSH
83364: EMPTY
83365: LIST
83366: LIST
83367: PUSH
83368: LD_INT 4
83370: PUSH
83371: LD_INT 0
83373: PUSH
83374: EMPTY
83375: LIST
83376: LIST
83377: PUSH
83378: LD_INT 4
83380: PUSH
83381: LD_INT 1
83383: PUSH
83384: EMPTY
83385: LIST
83386: LIST
83387: PUSH
83388: LD_INT 3
83390: PUSH
83391: LD_INT 1
83393: PUSH
83394: EMPTY
83395: LIST
83396: LIST
83397: PUSH
83398: LD_INT 2
83400: PUSH
83401: LD_INT 0
83403: PUSH
83404: EMPTY
83405: LIST
83406: LIST
83407: PUSH
83408: LD_INT 2
83410: PUSH
83411: LD_INT 1
83413: NEG
83414: PUSH
83415: EMPTY
83416: LIST
83417: LIST
83418: PUSH
83419: LD_INT 2
83421: PUSH
83422: LD_INT 2
83424: NEG
83425: PUSH
83426: EMPTY
83427: LIST
83428: LIST
83429: PUSH
83430: LD_INT 4
83432: PUSH
83433: LD_INT 2
83435: PUSH
83436: EMPTY
83437: LIST
83438: LIST
83439: PUSH
83440: LD_INT 4
83442: PUSH
83443: LD_INT 4
83445: PUSH
83446: EMPTY
83447: LIST
83448: LIST
83449: PUSH
83450: LD_INT 4
83452: PUSH
83453: LD_INT 3
83455: PUSH
83456: EMPTY
83457: LIST
83458: LIST
83459: PUSH
83460: LD_INT 5
83462: PUSH
83463: LD_INT 4
83465: PUSH
83466: EMPTY
83467: LIST
83468: LIST
83469: PUSH
83470: LD_INT 5
83472: PUSH
83473: LD_INT 5
83475: PUSH
83476: EMPTY
83477: LIST
83478: LIST
83479: PUSH
83480: LD_INT 4
83482: PUSH
83483: LD_INT 5
83485: PUSH
83486: EMPTY
83487: LIST
83488: LIST
83489: PUSH
83490: LD_INT 3
83492: PUSH
83493: LD_INT 4
83495: PUSH
83496: EMPTY
83497: LIST
83498: LIST
83499: PUSH
83500: LD_INT 3
83502: PUSH
83503: LD_INT 3
83505: PUSH
83506: EMPTY
83507: LIST
83508: LIST
83509: PUSH
83510: LD_INT 5
83512: PUSH
83513: LD_INT 3
83515: PUSH
83516: EMPTY
83517: LIST
83518: LIST
83519: PUSH
83520: LD_INT 3
83522: PUSH
83523: LD_INT 5
83525: PUSH
83526: EMPTY
83527: LIST
83528: LIST
83529: PUSH
83530: LD_INT 0
83532: PUSH
83533: LD_INT 3
83535: PUSH
83536: EMPTY
83537: LIST
83538: LIST
83539: PUSH
83540: LD_INT 0
83542: PUSH
83543: LD_INT 2
83545: PUSH
83546: EMPTY
83547: LIST
83548: LIST
83549: PUSH
83550: LD_INT 1
83552: PUSH
83553: LD_INT 3
83555: PUSH
83556: EMPTY
83557: LIST
83558: LIST
83559: PUSH
83560: LD_INT 1
83562: PUSH
83563: LD_INT 4
83565: PUSH
83566: EMPTY
83567: LIST
83568: LIST
83569: PUSH
83570: LD_INT 0
83572: PUSH
83573: LD_INT 4
83575: PUSH
83576: EMPTY
83577: LIST
83578: LIST
83579: PUSH
83580: LD_INT 1
83582: NEG
83583: PUSH
83584: LD_INT 3
83586: PUSH
83587: EMPTY
83588: LIST
83589: LIST
83590: PUSH
83591: LD_INT 1
83593: NEG
83594: PUSH
83595: LD_INT 2
83597: PUSH
83598: EMPTY
83599: LIST
83600: LIST
83601: PUSH
83602: LD_INT 2
83604: PUSH
83605: LD_INT 4
83607: PUSH
83608: EMPTY
83609: LIST
83610: LIST
83611: PUSH
83612: LD_INT 2
83614: NEG
83615: PUSH
83616: LD_INT 2
83618: PUSH
83619: EMPTY
83620: LIST
83621: LIST
83622: PUSH
83623: LD_INT 4
83625: NEG
83626: PUSH
83627: LD_INT 0
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: PUSH
83634: LD_INT 4
83636: NEG
83637: PUSH
83638: LD_INT 1
83640: NEG
83641: PUSH
83642: EMPTY
83643: LIST
83644: LIST
83645: PUSH
83646: LD_INT 3
83648: NEG
83649: PUSH
83650: LD_INT 0
83652: PUSH
83653: EMPTY
83654: LIST
83655: LIST
83656: PUSH
83657: LD_INT 3
83659: NEG
83660: PUSH
83661: LD_INT 1
83663: PUSH
83664: EMPTY
83665: LIST
83666: LIST
83667: PUSH
83668: LD_INT 4
83670: NEG
83671: PUSH
83672: LD_INT 1
83674: PUSH
83675: EMPTY
83676: LIST
83677: LIST
83678: PUSH
83679: LD_INT 5
83681: NEG
83682: PUSH
83683: LD_INT 0
83685: PUSH
83686: EMPTY
83687: LIST
83688: LIST
83689: PUSH
83690: LD_INT 5
83692: NEG
83693: PUSH
83694: LD_INT 1
83696: NEG
83697: PUSH
83698: EMPTY
83699: LIST
83700: LIST
83701: PUSH
83702: LD_INT 5
83704: NEG
83705: PUSH
83706: LD_INT 2
83708: NEG
83709: PUSH
83710: EMPTY
83711: LIST
83712: LIST
83713: PUSH
83714: LD_INT 3
83716: NEG
83717: PUSH
83718: LD_INT 2
83720: PUSH
83721: EMPTY
83722: LIST
83723: LIST
83724: PUSH
83725: EMPTY
83726: LIST
83727: LIST
83728: LIST
83729: LIST
83730: LIST
83731: LIST
83732: LIST
83733: LIST
83734: LIST
83735: LIST
83736: LIST
83737: LIST
83738: LIST
83739: LIST
83740: LIST
83741: LIST
83742: LIST
83743: LIST
83744: LIST
83745: LIST
83746: LIST
83747: LIST
83748: LIST
83749: LIST
83750: LIST
83751: LIST
83752: LIST
83753: LIST
83754: LIST
83755: LIST
83756: LIST
83757: LIST
83758: LIST
83759: LIST
83760: LIST
83761: LIST
83762: LIST
83763: LIST
83764: LIST
83765: LIST
83766: LIST
83767: LIST
83768: LIST
83769: LIST
83770: LIST
83771: ST_TO_ADDR
// end ; end ;
83772: GO 83775
83774: POP
// case btype of b_depot , b_warehouse :
83775: LD_VAR 0 1
83779: PUSH
83780: LD_INT 0
83782: DOUBLE
83783: EQUAL
83784: IFTRUE 83794
83786: LD_INT 1
83788: DOUBLE
83789: EQUAL
83790: IFTRUE 83794
83792: GO 83995
83794: POP
// case nation of nation_american :
83795: LD_VAR 0 5
83799: PUSH
83800: LD_INT 1
83802: DOUBLE
83803: EQUAL
83804: IFTRUE 83808
83806: GO 83864
83808: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
83809: LD_ADDR_VAR 0 9
83813: PUSH
83814: LD_VAR 0 11
83818: PUSH
83819: LD_VAR 0 12
83823: PUSH
83824: LD_VAR 0 13
83828: PUSH
83829: LD_VAR 0 14
83833: PUSH
83834: LD_VAR 0 15
83838: PUSH
83839: LD_VAR 0 16
83843: PUSH
83844: EMPTY
83845: LIST
83846: LIST
83847: LIST
83848: LIST
83849: LIST
83850: LIST
83851: PUSH
83852: LD_VAR 0 4
83856: PUSH
83857: LD_INT 1
83859: PLUS
83860: ARRAY
83861: ST_TO_ADDR
83862: GO 83993
83864: LD_INT 2
83866: DOUBLE
83867: EQUAL
83868: IFTRUE 83872
83870: GO 83928
83872: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
83873: LD_ADDR_VAR 0 9
83877: PUSH
83878: LD_VAR 0 17
83882: PUSH
83883: LD_VAR 0 18
83887: PUSH
83888: LD_VAR 0 19
83892: PUSH
83893: LD_VAR 0 20
83897: PUSH
83898: LD_VAR 0 21
83902: PUSH
83903: LD_VAR 0 22
83907: PUSH
83908: EMPTY
83909: LIST
83910: LIST
83911: LIST
83912: LIST
83913: LIST
83914: LIST
83915: PUSH
83916: LD_VAR 0 4
83920: PUSH
83921: LD_INT 1
83923: PLUS
83924: ARRAY
83925: ST_TO_ADDR
83926: GO 83993
83928: LD_INT 3
83930: DOUBLE
83931: EQUAL
83932: IFTRUE 83936
83934: GO 83992
83936: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
83937: LD_ADDR_VAR 0 9
83941: PUSH
83942: LD_VAR 0 23
83946: PUSH
83947: LD_VAR 0 24
83951: PUSH
83952: LD_VAR 0 25
83956: PUSH
83957: LD_VAR 0 26
83961: PUSH
83962: LD_VAR 0 27
83966: PUSH
83967: LD_VAR 0 28
83971: PUSH
83972: EMPTY
83973: LIST
83974: LIST
83975: LIST
83976: LIST
83977: LIST
83978: LIST
83979: PUSH
83980: LD_VAR 0 4
83984: PUSH
83985: LD_INT 1
83987: PLUS
83988: ARRAY
83989: ST_TO_ADDR
83990: GO 83993
83992: POP
83993: GO 84548
83995: LD_INT 2
83997: DOUBLE
83998: EQUAL
83999: IFTRUE 84009
84001: LD_INT 3
84003: DOUBLE
84004: EQUAL
84005: IFTRUE 84009
84007: GO 84065
84009: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
84010: LD_ADDR_VAR 0 9
84014: PUSH
84015: LD_VAR 0 29
84019: PUSH
84020: LD_VAR 0 30
84024: PUSH
84025: LD_VAR 0 31
84029: PUSH
84030: LD_VAR 0 32
84034: PUSH
84035: LD_VAR 0 33
84039: PUSH
84040: LD_VAR 0 34
84044: PUSH
84045: EMPTY
84046: LIST
84047: LIST
84048: LIST
84049: LIST
84050: LIST
84051: LIST
84052: PUSH
84053: LD_VAR 0 4
84057: PUSH
84058: LD_INT 1
84060: PLUS
84061: ARRAY
84062: ST_TO_ADDR
84063: GO 84548
84065: LD_INT 16
84067: DOUBLE
84068: EQUAL
84069: IFTRUE 84127
84071: LD_INT 17
84073: DOUBLE
84074: EQUAL
84075: IFTRUE 84127
84077: LD_INT 18
84079: DOUBLE
84080: EQUAL
84081: IFTRUE 84127
84083: LD_INT 19
84085: DOUBLE
84086: EQUAL
84087: IFTRUE 84127
84089: LD_INT 22
84091: DOUBLE
84092: EQUAL
84093: IFTRUE 84127
84095: LD_INT 20
84097: DOUBLE
84098: EQUAL
84099: IFTRUE 84127
84101: LD_INT 21
84103: DOUBLE
84104: EQUAL
84105: IFTRUE 84127
84107: LD_INT 23
84109: DOUBLE
84110: EQUAL
84111: IFTRUE 84127
84113: LD_INT 24
84115: DOUBLE
84116: EQUAL
84117: IFTRUE 84127
84119: LD_INT 25
84121: DOUBLE
84122: EQUAL
84123: IFTRUE 84127
84125: GO 84183
84127: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
84128: LD_ADDR_VAR 0 9
84132: PUSH
84133: LD_VAR 0 35
84137: PUSH
84138: LD_VAR 0 36
84142: PUSH
84143: LD_VAR 0 37
84147: PUSH
84148: LD_VAR 0 38
84152: PUSH
84153: LD_VAR 0 39
84157: PUSH
84158: LD_VAR 0 40
84162: PUSH
84163: EMPTY
84164: LIST
84165: LIST
84166: LIST
84167: LIST
84168: LIST
84169: LIST
84170: PUSH
84171: LD_VAR 0 4
84175: PUSH
84176: LD_INT 1
84178: PLUS
84179: ARRAY
84180: ST_TO_ADDR
84181: GO 84548
84183: LD_INT 6
84185: DOUBLE
84186: EQUAL
84187: IFTRUE 84239
84189: LD_INT 7
84191: DOUBLE
84192: EQUAL
84193: IFTRUE 84239
84195: LD_INT 8
84197: DOUBLE
84198: EQUAL
84199: IFTRUE 84239
84201: LD_INT 13
84203: DOUBLE
84204: EQUAL
84205: IFTRUE 84239
84207: LD_INT 12
84209: DOUBLE
84210: EQUAL
84211: IFTRUE 84239
84213: LD_INT 15
84215: DOUBLE
84216: EQUAL
84217: IFTRUE 84239
84219: LD_INT 11
84221: DOUBLE
84222: EQUAL
84223: IFTRUE 84239
84225: LD_INT 14
84227: DOUBLE
84228: EQUAL
84229: IFTRUE 84239
84231: LD_INT 10
84233: DOUBLE
84234: EQUAL
84235: IFTRUE 84239
84237: GO 84295
84239: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
84240: LD_ADDR_VAR 0 9
84244: PUSH
84245: LD_VAR 0 41
84249: PUSH
84250: LD_VAR 0 42
84254: PUSH
84255: LD_VAR 0 43
84259: PUSH
84260: LD_VAR 0 44
84264: PUSH
84265: LD_VAR 0 45
84269: PUSH
84270: LD_VAR 0 46
84274: PUSH
84275: EMPTY
84276: LIST
84277: LIST
84278: LIST
84279: LIST
84280: LIST
84281: LIST
84282: PUSH
84283: LD_VAR 0 4
84287: PUSH
84288: LD_INT 1
84290: PLUS
84291: ARRAY
84292: ST_TO_ADDR
84293: GO 84548
84295: LD_INT 36
84297: DOUBLE
84298: EQUAL
84299: IFTRUE 84303
84301: GO 84359
84303: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
84304: LD_ADDR_VAR 0 9
84308: PUSH
84309: LD_VAR 0 47
84313: PUSH
84314: LD_VAR 0 48
84318: PUSH
84319: LD_VAR 0 49
84323: PUSH
84324: LD_VAR 0 50
84328: PUSH
84329: LD_VAR 0 51
84333: PUSH
84334: LD_VAR 0 52
84338: PUSH
84339: EMPTY
84340: LIST
84341: LIST
84342: LIST
84343: LIST
84344: LIST
84345: LIST
84346: PUSH
84347: LD_VAR 0 4
84351: PUSH
84352: LD_INT 1
84354: PLUS
84355: ARRAY
84356: ST_TO_ADDR
84357: GO 84548
84359: LD_INT 4
84361: DOUBLE
84362: EQUAL
84363: IFTRUE 84385
84365: LD_INT 5
84367: DOUBLE
84368: EQUAL
84369: IFTRUE 84385
84371: LD_INT 34
84373: DOUBLE
84374: EQUAL
84375: IFTRUE 84385
84377: LD_INT 37
84379: DOUBLE
84380: EQUAL
84381: IFTRUE 84385
84383: GO 84441
84385: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
84386: LD_ADDR_VAR 0 9
84390: PUSH
84391: LD_VAR 0 53
84395: PUSH
84396: LD_VAR 0 54
84400: PUSH
84401: LD_VAR 0 55
84405: PUSH
84406: LD_VAR 0 56
84410: PUSH
84411: LD_VAR 0 57
84415: PUSH
84416: LD_VAR 0 58
84420: PUSH
84421: EMPTY
84422: LIST
84423: LIST
84424: LIST
84425: LIST
84426: LIST
84427: LIST
84428: PUSH
84429: LD_VAR 0 4
84433: PUSH
84434: LD_INT 1
84436: PLUS
84437: ARRAY
84438: ST_TO_ADDR
84439: GO 84548
84441: LD_INT 31
84443: DOUBLE
84444: EQUAL
84445: IFTRUE 84491
84447: LD_INT 32
84449: DOUBLE
84450: EQUAL
84451: IFTRUE 84491
84453: LD_INT 33
84455: DOUBLE
84456: EQUAL
84457: IFTRUE 84491
84459: LD_INT 27
84461: DOUBLE
84462: EQUAL
84463: IFTRUE 84491
84465: LD_INT 26
84467: DOUBLE
84468: EQUAL
84469: IFTRUE 84491
84471: LD_INT 28
84473: DOUBLE
84474: EQUAL
84475: IFTRUE 84491
84477: LD_INT 29
84479: DOUBLE
84480: EQUAL
84481: IFTRUE 84491
84483: LD_INT 30
84485: DOUBLE
84486: EQUAL
84487: IFTRUE 84491
84489: GO 84547
84491: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
84492: LD_ADDR_VAR 0 9
84496: PUSH
84497: LD_VAR 0 59
84501: PUSH
84502: LD_VAR 0 60
84506: PUSH
84507: LD_VAR 0 61
84511: PUSH
84512: LD_VAR 0 62
84516: PUSH
84517: LD_VAR 0 63
84521: PUSH
84522: LD_VAR 0 64
84526: PUSH
84527: EMPTY
84528: LIST
84529: LIST
84530: LIST
84531: LIST
84532: LIST
84533: LIST
84534: PUSH
84535: LD_VAR 0 4
84539: PUSH
84540: LD_INT 1
84542: PLUS
84543: ARRAY
84544: ST_TO_ADDR
84545: GO 84548
84547: POP
// temp_list2 = [ ] ;
84548: LD_ADDR_VAR 0 10
84552: PUSH
84553: EMPTY
84554: ST_TO_ADDR
// for i in temp_list do
84555: LD_ADDR_VAR 0 8
84559: PUSH
84560: LD_VAR 0 9
84564: PUSH
84565: FOR_IN
84566: IFFALSE 84618
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
84568: LD_ADDR_VAR 0 10
84572: PUSH
84573: LD_VAR 0 10
84577: PUSH
84578: LD_VAR 0 8
84582: PUSH
84583: LD_INT 1
84585: ARRAY
84586: PUSH
84587: LD_VAR 0 2
84591: PLUS
84592: PUSH
84593: LD_VAR 0 8
84597: PUSH
84598: LD_INT 2
84600: ARRAY
84601: PUSH
84602: LD_VAR 0 3
84606: PLUS
84607: PUSH
84608: EMPTY
84609: LIST
84610: LIST
84611: PUSH
84612: EMPTY
84613: LIST
84614: ADD
84615: ST_TO_ADDR
84616: GO 84565
84618: POP
84619: POP
// result = temp_list2 ;
84620: LD_ADDR_VAR 0 7
84624: PUSH
84625: LD_VAR 0 10
84629: ST_TO_ADDR
// end ;
84630: LD_VAR 0 7
84634: RET
// export function EnemyInRange ( unit , dist ) ; begin
84635: LD_INT 0
84637: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
84638: LD_ADDR_VAR 0 3
84642: PUSH
84643: LD_VAR 0 1
84647: PPUSH
84648: CALL_OW 255
84652: PPUSH
84653: LD_VAR 0 1
84657: PPUSH
84658: CALL_OW 250
84662: PPUSH
84663: LD_VAR 0 1
84667: PPUSH
84668: CALL_OW 251
84672: PPUSH
84673: LD_VAR 0 2
84677: PPUSH
84678: CALL 58739 0 4
84682: PUSH
84683: LD_INT 4
84685: ARRAY
84686: ST_TO_ADDR
// end ;
84687: LD_VAR 0 3
84691: RET
// export function PlayerSeeMe ( unit ) ; begin
84692: LD_INT 0
84694: PPUSH
// result := See ( your_side , unit ) ;
84695: LD_ADDR_VAR 0 2
84699: PUSH
84700: LD_OWVAR 2
84704: PPUSH
84705: LD_VAR 0 1
84709: PPUSH
84710: CALL_OW 292
84714: ST_TO_ADDR
// end ;
84715: LD_VAR 0 2
84719: RET
// export function ReverseDir ( unit ) ; begin
84720: LD_INT 0
84722: PPUSH
// if not unit then
84723: LD_VAR 0 1
84727: NOT
84728: IFFALSE 84732
// exit ;
84730: GO 84755
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
84732: LD_ADDR_VAR 0 2
84736: PUSH
84737: LD_VAR 0 1
84741: PPUSH
84742: CALL_OW 254
84746: PUSH
84747: LD_INT 3
84749: PLUS
84750: PUSH
84751: LD_INT 6
84753: MOD
84754: ST_TO_ADDR
// end ;
84755: LD_VAR 0 2
84759: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
84760: LD_INT 0
84762: PPUSH
84763: PPUSH
84764: PPUSH
84765: PPUSH
84766: PPUSH
// if not hexes then
84767: LD_VAR 0 2
84771: NOT
84772: IFFALSE 84776
// exit ;
84774: GO 84924
// dist := 9999 ;
84776: LD_ADDR_VAR 0 5
84780: PUSH
84781: LD_INT 9999
84783: ST_TO_ADDR
// for i = 1 to hexes do
84784: LD_ADDR_VAR 0 4
84788: PUSH
84789: DOUBLE
84790: LD_INT 1
84792: DEC
84793: ST_TO_ADDR
84794: LD_VAR 0 2
84798: PUSH
84799: FOR_TO
84800: IFFALSE 84912
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
84802: LD_VAR 0 1
84806: PPUSH
84807: LD_VAR 0 2
84811: PUSH
84812: LD_VAR 0 4
84816: ARRAY
84817: PUSH
84818: LD_INT 1
84820: ARRAY
84821: PPUSH
84822: LD_VAR 0 2
84826: PUSH
84827: LD_VAR 0 4
84831: ARRAY
84832: PUSH
84833: LD_INT 2
84835: ARRAY
84836: PPUSH
84837: CALL_OW 297
84841: PUSH
84842: LD_VAR 0 5
84846: LESS
84847: IFFALSE 84910
// begin hex := hexes [ i ] ;
84849: LD_ADDR_VAR 0 7
84853: PUSH
84854: LD_VAR 0 2
84858: PUSH
84859: LD_VAR 0 4
84863: ARRAY
84864: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
84865: LD_ADDR_VAR 0 5
84869: PUSH
84870: LD_VAR 0 1
84874: PPUSH
84875: LD_VAR 0 2
84879: PUSH
84880: LD_VAR 0 4
84884: ARRAY
84885: PUSH
84886: LD_INT 1
84888: ARRAY
84889: PPUSH
84890: LD_VAR 0 2
84894: PUSH
84895: LD_VAR 0 4
84899: ARRAY
84900: PUSH
84901: LD_INT 2
84903: ARRAY
84904: PPUSH
84905: CALL_OW 297
84909: ST_TO_ADDR
// end ; end ;
84910: GO 84799
84912: POP
84913: POP
// result := hex ;
84914: LD_ADDR_VAR 0 3
84918: PUSH
84919: LD_VAR 0 7
84923: ST_TO_ADDR
// end ;
84924: LD_VAR 0 3
84928: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
84929: LD_INT 0
84931: PPUSH
84932: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
84933: LD_VAR 0 1
84937: NOT
84938: PUSH
84939: LD_VAR 0 1
84943: PUSH
84944: LD_INT 21
84946: PUSH
84947: LD_INT 2
84949: PUSH
84950: EMPTY
84951: LIST
84952: LIST
84953: PUSH
84954: LD_INT 23
84956: PUSH
84957: LD_INT 2
84959: PUSH
84960: EMPTY
84961: LIST
84962: LIST
84963: PUSH
84964: EMPTY
84965: LIST
84966: LIST
84967: PPUSH
84968: CALL_OW 69
84972: IN
84973: NOT
84974: OR
84975: IFFALSE 84979
// exit ;
84977: GO 85026
// for i = 1 to 3 do
84979: LD_ADDR_VAR 0 3
84983: PUSH
84984: DOUBLE
84985: LD_INT 1
84987: DEC
84988: ST_TO_ADDR
84989: LD_INT 3
84991: PUSH
84992: FOR_TO
84993: IFFALSE 85024
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
84995: LD_VAR 0 1
84999: PPUSH
85000: CALL_OW 250
85004: PPUSH
85005: LD_VAR 0 1
85009: PPUSH
85010: CALL_OW 251
85014: PPUSH
85015: LD_INT 1
85017: PPUSH
85018: CALL_OW 453
85022: GO 84992
85024: POP
85025: POP
// end ;
85026: LD_VAR 0 2
85030: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
85031: LD_INT 0
85033: PPUSH
85034: PPUSH
85035: PPUSH
85036: PPUSH
85037: PPUSH
85038: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
85039: LD_VAR 0 1
85043: NOT
85044: PUSH
85045: LD_VAR 0 2
85049: NOT
85050: OR
85051: PUSH
85052: LD_VAR 0 1
85056: PPUSH
85057: CALL_OW 314
85061: OR
85062: IFFALSE 85066
// exit ;
85064: GO 85507
// x := GetX ( enemy_unit ) ;
85066: LD_ADDR_VAR 0 7
85070: PUSH
85071: LD_VAR 0 2
85075: PPUSH
85076: CALL_OW 250
85080: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
85081: LD_ADDR_VAR 0 8
85085: PUSH
85086: LD_VAR 0 2
85090: PPUSH
85091: CALL_OW 251
85095: ST_TO_ADDR
// if not x or not y then
85096: LD_VAR 0 7
85100: NOT
85101: PUSH
85102: LD_VAR 0 8
85106: NOT
85107: OR
85108: IFFALSE 85112
// exit ;
85110: GO 85507
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
85112: LD_ADDR_VAR 0 6
85116: PUSH
85117: LD_VAR 0 7
85121: PPUSH
85122: LD_INT 0
85124: PPUSH
85125: LD_INT 4
85127: PPUSH
85128: CALL_OW 272
85132: PUSH
85133: LD_VAR 0 8
85137: PPUSH
85138: LD_INT 0
85140: PPUSH
85141: LD_INT 4
85143: PPUSH
85144: CALL_OW 273
85148: PUSH
85149: EMPTY
85150: LIST
85151: LIST
85152: PUSH
85153: LD_VAR 0 7
85157: PPUSH
85158: LD_INT 1
85160: PPUSH
85161: LD_INT 4
85163: PPUSH
85164: CALL_OW 272
85168: PUSH
85169: LD_VAR 0 8
85173: PPUSH
85174: LD_INT 1
85176: PPUSH
85177: LD_INT 4
85179: PPUSH
85180: CALL_OW 273
85184: PUSH
85185: EMPTY
85186: LIST
85187: LIST
85188: PUSH
85189: LD_VAR 0 7
85193: PPUSH
85194: LD_INT 2
85196: PPUSH
85197: LD_INT 4
85199: PPUSH
85200: CALL_OW 272
85204: PUSH
85205: LD_VAR 0 8
85209: PPUSH
85210: LD_INT 2
85212: PPUSH
85213: LD_INT 4
85215: PPUSH
85216: CALL_OW 273
85220: PUSH
85221: EMPTY
85222: LIST
85223: LIST
85224: PUSH
85225: LD_VAR 0 7
85229: PPUSH
85230: LD_INT 3
85232: PPUSH
85233: LD_INT 4
85235: PPUSH
85236: CALL_OW 272
85240: PUSH
85241: LD_VAR 0 8
85245: PPUSH
85246: LD_INT 3
85248: PPUSH
85249: LD_INT 4
85251: PPUSH
85252: CALL_OW 273
85256: PUSH
85257: EMPTY
85258: LIST
85259: LIST
85260: PUSH
85261: LD_VAR 0 7
85265: PPUSH
85266: LD_INT 4
85268: PPUSH
85269: LD_INT 4
85271: PPUSH
85272: CALL_OW 272
85276: PUSH
85277: LD_VAR 0 8
85281: PPUSH
85282: LD_INT 4
85284: PPUSH
85285: LD_INT 4
85287: PPUSH
85288: CALL_OW 273
85292: PUSH
85293: EMPTY
85294: LIST
85295: LIST
85296: PUSH
85297: LD_VAR 0 7
85301: PPUSH
85302: LD_INT 5
85304: PPUSH
85305: LD_INT 4
85307: PPUSH
85308: CALL_OW 272
85312: PUSH
85313: LD_VAR 0 8
85317: PPUSH
85318: LD_INT 5
85320: PPUSH
85321: LD_INT 4
85323: PPUSH
85324: CALL_OW 273
85328: PUSH
85329: EMPTY
85330: LIST
85331: LIST
85332: PUSH
85333: EMPTY
85334: LIST
85335: LIST
85336: LIST
85337: LIST
85338: LIST
85339: LIST
85340: ST_TO_ADDR
// for i = tmp downto 1 do
85341: LD_ADDR_VAR 0 4
85345: PUSH
85346: DOUBLE
85347: LD_VAR 0 6
85351: INC
85352: ST_TO_ADDR
85353: LD_INT 1
85355: PUSH
85356: FOR_DOWNTO
85357: IFFALSE 85458
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
85359: LD_VAR 0 6
85363: PUSH
85364: LD_VAR 0 4
85368: ARRAY
85369: PUSH
85370: LD_INT 1
85372: ARRAY
85373: PPUSH
85374: LD_VAR 0 6
85378: PUSH
85379: LD_VAR 0 4
85383: ARRAY
85384: PUSH
85385: LD_INT 2
85387: ARRAY
85388: PPUSH
85389: CALL_OW 488
85393: NOT
85394: PUSH
85395: LD_VAR 0 6
85399: PUSH
85400: LD_VAR 0 4
85404: ARRAY
85405: PUSH
85406: LD_INT 1
85408: ARRAY
85409: PPUSH
85410: LD_VAR 0 6
85414: PUSH
85415: LD_VAR 0 4
85419: ARRAY
85420: PUSH
85421: LD_INT 2
85423: ARRAY
85424: PPUSH
85425: CALL_OW 428
85429: PUSH
85430: LD_INT 0
85432: NONEQUAL
85433: OR
85434: IFFALSE 85456
// tmp := Delete ( tmp , i ) ;
85436: LD_ADDR_VAR 0 6
85440: PUSH
85441: LD_VAR 0 6
85445: PPUSH
85446: LD_VAR 0 4
85450: PPUSH
85451: CALL_OW 3
85455: ST_TO_ADDR
85456: GO 85356
85458: POP
85459: POP
// j := GetClosestHex ( unit , tmp ) ;
85460: LD_ADDR_VAR 0 5
85464: PUSH
85465: LD_VAR 0 1
85469: PPUSH
85470: LD_VAR 0 6
85474: PPUSH
85475: CALL 84760 0 2
85479: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
85480: LD_VAR 0 1
85484: PPUSH
85485: LD_VAR 0 5
85489: PUSH
85490: LD_INT 1
85492: ARRAY
85493: PPUSH
85494: LD_VAR 0 5
85498: PUSH
85499: LD_INT 2
85501: ARRAY
85502: PPUSH
85503: CALL_OW 111
// end ;
85507: LD_VAR 0 3
85511: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
85512: LD_INT 0
85514: PPUSH
85515: PPUSH
85516: PPUSH
// uc_side = 0 ;
85517: LD_ADDR_OWVAR 20
85521: PUSH
85522: LD_INT 0
85524: ST_TO_ADDR
// uc_nation = 0 ;
85525: LD_ADDR_OWVAR 21
85529: PUSH
85530: LD_INT 0
85532: ST_TO_ADDR
// InitHc ;
85533: CALL_OW 19
// InitVc ;
85537: CALL_OW 20
// if mastodonts then
85541: LD_VAR 0 6
85545: IFFALSE 85612
// for i = 1 to mastodonts do
85547: LD_ADDR_VAR 0 11
85551: PUSH
85552: DOUBLE
85553: LD_INT 1
85555: DEC
85556: ST_TO_ADDR
85557: LD_VAR 0 6
85561: PUSH
85562: FOR_TO
85563: IFFALSE 85610
// begin vc_chassis := 31 ;
85565: LD_ADDR_OWVAR 37
85569: PUSH
85570: LD_INT 31
85572: ST_TO_ADDR
// vc_control := control_rider ;
85573: LD_ADDR_OWVAR 38
85577: PUSH
85578: LD_INT 4
85580: ST_TO_ADDR
// animal := CreateVehicle ;
85581: LD_ADDR_VAR 0 12
85585: PUSH
85586: CALL_OW 45
85590: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85591: LD_VAR 0 12
85595: PPUSH
85596: LD_VAR 0 8
85600: PPUSH
85601: LD_INT 0
85603: PPUSH
85604: CALL 92390 0 3
// end ;
85608: GO 85562
85610: POP
85611: POP
// if horses then
85612: LD_VAR 0 5
85616: IFFALSE 85683
// for i = 1 to horses do
85618: LD_ADDR_VAR 0 11
85622: PUSH
85623: DOUBLE
85624: LD_INT 1
85626: DEC
85627: ST_TO_ADDR
85628: LD_VAR 0 5
85632: PUSH
85633: FOR_TO
85634: IFFALSE 85681
// begin hc_class := 21 ;
85636: LD_ADDR_OWVAR 28
85640: PUSH
85641: LD_INT 21
85643: ST_TO_ADDR
// hc_gallery :=  ;
85644: LD_ADDR_OWVAR 33
85648: PUSH
85649: LD_STRING 
85651: ST_TO_ADDR
// animal := CreateHuman ;
85652: LD_ADDR_VAR 0 12
85656: PUSH
85657: CALL_OW 44
85661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85662: LD_VAR 0 12
85666: PPUSH
85667: LD_VAR 0 8
85671: PPUSH
85672: LD_INT 0
85674: PPUSH
85675: CALL 92390 0 3
// end ;
85679: GO 85633
85681: POP
85682: POP
// if birds then
85683: LD_VAR 0 1
85687: IFFALSE 85754
// for i = 1 to birds do
85689: LD_ADDR_VAR 0 11
85693: PUSH
85694: DOUBLE
85695: LD_INT 1
85697: DEC
85698: ST_TO_ADDR
85699: LD_VAR 0 1
85703: PUSH
85704: FOR_TO
85705: IFFALSE 85752
// begin hc_class = 18 ;
85707: LD_ADDR_OWVAR 28
85711: PUSH
85712: LD_INT 18
85714: ST_TO_ADDR
// hc_gallery =  ;
85715: LD_ADDR_OWVAR 33
85719: PUSH
85720: LD_STRING 
85722: ST_TO_ADDR
// animal := CreateHuman ;
85723: LD_ADDR_VAR 0 12
85727: PUSH
85728: CALL_OW 44
85732: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85733: LD_VAR 0 12
85737: PPUSH
85738: LD_VAR 0 8
85742: PPUSH
85743: LD_INT 0
85745: PPUSH
85746: CALL 92390 0 3
// end ;
85750: GO 85704
85752: POP
85753: POP
// if tigers then
85754: LD_VAR 0 2
85758: IFFALSE 85842
// for i = 1 to tigers do
85760: LD_ADDR_VAR 0 11
85764: PUSH
85765: DOUBLE
85766: LD_INT 1
85768: DEC
85769: ST_TO_ADDR
85770: LD_VAR 0 2
85774: PUSH
85775: FOR_TO
85776: IFFALSE 85840
// begin hc_class = class_tiger ;
85778: LD_ADDR_OWVAR 28
85782: PUSH
85783: LD_INT 14
85785: ST_TO_ADDR
// hc_gallery =  ;
85786: LD_ADDR_OWVAR 33
85790: PUSH
85791: LD_STRING 
85793: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
85794: LD_ADDR_OWVAR 35
85798: PUSH
85799: LD_INT 7
85801: NEG
85802: PPUSH
85803: LD_INT 7
85805: PPUSH
85806: CALL_OW 12
85810: ST_TO_ADDR
// animal := CreateHuman ;
85811: LD_ADDR_VAR 0 12
85815: PUSH
85816: CALL_OW 44
85820: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85821: LD_VAR 0 12
85825: PPUSH
85826: LD_VAR 0 8
85830: PPUSH
85831: LD_INT 0
85833: PPUSH
85834: CALL 92390 0 3
// end ;
85838: GO 85775
85840: POP
85841: POP
// if apemans then
85842: LD_VAR 0 3
85846: IFFALSE 85969
// for i = 1 to apemans do
85848: LD_ADDR_VAR 0 11
85852: PUSH
85853: DOUBLE
85854: LD_INT 1
85856: DEC
85857: ST_TO_ADDR
85858: LD_VAR 0 3
85862: PUSH
85863: FOR_TO
85864: IFFALSE 85967
// begin hc_class = class_apeman ;
85866: LD_ADDR_OWVAR 28
85870: PUSH
85871: LD_INT 12
85873: ST_TO_ADDR
// hc_gallery =  ;
85874: LD_ADDR_OWVAR 33
85878: PUSH
85879: LD_STRING 
85881: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
85882: LD_ADDR_OWVAR 35
85886: PUSH
85887: LD_INT 5
85889: NEG
85890: PPUSH
85891: LD_INT 5
85893: PPUSH
85894: CALL_OW 12
85898: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
85899: LD_ADDR_OWVAR 31
85903: PUSH
85904: LD_INT 1
85906: PPUSH
85907: LD_INT 3
85909: PPUSH
85910: CALL_OW 12
85914: PUSH
85915: LD_INT 1
85917: PPUSH
85918: LD_INT 3
85920: PPUSH
85921: CALL_OW 12
85925: PUSH
85926: LD_INT 0
85928: PUSH
85929: LD_INT 0
85931: PUSH
85932: EMPTY
85933: LIST
85934: LIST
85935: LIST
85936: LIST
85937: ST_TO_ADDR
// animal := CreateHuman ;
85938: LD_ADDR_VAR 0 12
85942: PUSH
85943: CALL_OW 44
85947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85948: LD_VAR 0 12
85952: PPUSH
85953: LD_VAR 0 8
85957: PPUSH
85958: LD_INT 0
85960: PPUSH
85961: CALL 92390 0 3
// end ;
85965: GO 85863
85967: POP
85968: POP
// if enchidnas then
85969: LD_VAR 0 4
85973: IFFALSE 86040
// for i = 1 to enchidnas do
85975: LD_ADDR_VAR 0 11
85979: PUSH
85980: DOUBLE
85981: LD_INT 1
85983: DEC
85984: ST_TO_ADDR
85985: LD_VAR 0 4
85989: PUSH
85990: FOR_TO
85991: IFFALSE 86038
// begin hc_class = 13 ;
85993: LD_ADDR_OWVAR 28
85997: PUSH
85998: LD_INT 13
86000: ST_TO_ADDR
// hc_gallery =  ;
86001: LD_ADDR_OWVAR 33
86005: PUSH
86006: LD_STRING 
86008: ST_TO_ADDR
// animal := CreateHuman ;
86009: LD_ADDR_VAR 0 12
86013: PUSH
86014: CALL_OW 44
86018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
86019: LD_VAR 0 12
86023: PPUSH
86024: LD_VAR 0 8
86028: PPUSH
86029: LD_INT 0
86031: PPUSH
86032: CALL 92390 0 3
// end ;
86036: GO 85990
86038: POP
86039: POP
// if fishes then
86040: LD_VAR 0 7
86044: IFFALSE 86111
// for i = 1 to fishes do
86046: LD_ADDR_VAR 0 11
86050: PUSH
86051: DOUBLE
86052: LD_INT 1
86054: DEC
86055: ST_TO_ADDR
86056: LD_VAR 0 7
86060: PUSH
86061: FOR_TO
86062: IFFALSE 86109
// begin hc_class = 20 ;
86064: LD_ADDR_OWVAR 28
86068: PUSH
86069: LD_INT 20
86071: ST_TO_ADDR
// hc_gallery =  ;
86072: LD_ADDR_OWVAR 33
86076: PUSH
86077: LD_STRING 
86079: ST_TO_ADDR
// animal := CreateHuman ;
86080: LD_ADDR_VAR 0 12
86084: PUSH
86085: CALL_OW 44
86089: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
86090: LD_VAR 0 12
86094: PPUSH
86095: LD_VAR 0 9
86099: PPUSH
86100: LD_INT 0
86102: PPUSH
86103: CALL 92390 0 3
// end ;
86107: GO 86061
86109: POP
86110: POP
// end ;
86111: LD_VAR 0 10
86115: RET
// export function WantHeal ( sci , unit ) ; begin
86116: LD_INT 0
86118: PPUSH
// if GetTaskList ( sci ) > 0 then
86119: LD_VAR 0 1
86123: PPUSH
86124: CALL_OW 437
86128: PUSH
86129: LD_INT 0
86131: GREATER
86132: IFFALSE 86202
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
86134: LD_VAR 0 1
86138: PPUSH
86139: CALL_OW 437
86143: PUSH
86144: LD_INT 1
86146: ARRAY
86147: PUSH
86148: LD_INT 1
86150: ARRAY
86151: PUSH
86152: LD_STRING l
86154: EQUAL
86155: PUSH
86156: LD_VAR 0 1
86160: PPUSH
86161: CALL_OW 437
86165: PUSH
86166: LD_INT 1
86168: ARRAY
86169: PUSH
86170: LD_INT 4
86172: ARRAY
86173: PUSH
86174: LD_VAR 0 2
86178: EQUAL
86179: AND
86180: IFFALSE 86192
// result := true else
86182: LD_ADDR_VAR 0 3
86186: PUSH
86187: LD_INT 1
86189: ST_TO_ADDR
86190: GO 86200
// result := false ;
86192: LD_ADDR_VAR 0 3
86196: PUSH
86197: LD_INT 0
86199: ST_TO_ADDR
// end else
86200: GO 86210
// result := false ;
86202: LD_ADDR_VAR 0 3
86206: PUSH
86207: LD_INT 0
86209: ST_TO_ADDR
// end ;
86210: LD_VAR 0 3
86214: RET
// export function HealTarget ( sci ) ; begin
86215: LD_INT 0
86217: PPUSH
// if not sci then
86218: LD_VAR 0 1
86222: NOT
86223: IFFALSE 86227
// exit ;
86225: GO 86292
// result := 0 ;
86227: LD_ADDR_VAR 0 2
86231: PUSH
86232: LD_INT 0
86234: ST_TO_ADDR
// if GetTaskList ( sci ) then
86235: LD_VAR 0 1
86239: PPUSH
86240: CALL_OW 437
86244: IFFALSE 86292
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
86246: LD_VAR 0 1
86250: PPUSH
86251: CALL_OW 437
86255: PUSH
86256: LD_INT 1
86258: ARRAY
86259: PUSH
86260: LD_INT 1
86262: ARRAY
86263: PUSH
86264: LD_STRING l
86266: EQUAL
86267: IFFALSE 86292
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
86269: LD_ADDR_VAR 0 2
86273: PUSH
86274: LD_VAR 0 1
86278: PPUSH
86279: CALL_OW 437
86283: PUSH
86284: LD_INT 1
86286: ARRAY
86287: PUSH
86288: LD_INT 4
86290: ARRAY
86291: ST_TO_ADDR
// end ;
86292: LD_VAR 0 2
86296: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
86297: LD_INT 0
86299: PPUSH
86300: PPUSH
86301: PPUSH
86302: PPUSH
86303: PPUSH
86304: PPUSH
86305: PPUSH
86306: PPUSH
86307: PPUSH
86308: PPUSH
86309: PPUSH
86310: PPUSH
86311: PPUSH
86312: PPUSH
86313: PPUSH
86314: PPUSH
86315: PPUSH
86316: PPUSH
86317: PPUSH
86318: PPUSH
86319: PPUSH
86320: PPUSH
86321: PPUSH
86322: PPUSH
86323: PPUSH
86324: PPUSH
86325: PPUSH
86326: PPUSH
86327: PPUSH
86328: PPUSH
86329: PPUSH
86330: PPUSH
86331: PPUSH
86332: PPUSH
// if not list then
86333: LD_VAR 0 1
86337: NOT
86338: IFFALSE 86342
// exit ;
86340: GO 91001
// base := list [ 1 ] ;
86342: LD_ADDR_VAR 0 3
86346: PUSH
86347: LD_VAR 0 1
86351: PUSH
86352: LD_INT 1
86354: ARRAY
86355: ST_TO_ADDR
// group := list [ 2 ] ;
86356: LD_ADDR_VAR 0 4
86360: PUSH
86361: LD_VAR 0 1
86365: PUSH
86366: LD_INT 2
86368: ARRAY
86369: ST_TO_ADDR
// path := list [ 3 ] ;
86370: LD_ADDR_VAR 0 5
86374: PUSH
86375: LD_VAR 0 1
86379: PUSH
86380: LD_INT 3
86382: ARRAY
86383: ST_TO_ADDR
// flags := list [ 4 ] ;
86384: LD_ADDR_VAR 0 6
86388: PUSH
86389: LD_VAR 0 1
86393: PUSH
86394: LD_INT 4
86396: ARRAY
86397: ST_TO_ADDR
// mined := [ ] ;
86398: LD_ADDR_VAR 0 27
86402: PUSH
86403: EMPTY
86404: ST_TO_ADDR
// bombed := [ ] ;
86405: LD_ADDR_VAR 0 28
86409: PUSH
86410: EMPTY
86411: ST_TO_ADDR
// healers := [ ] ;
86412: LD_ADDR_VAR 0 31
86416: PUSH
86417: EMPTY
86418: ST_TO_ADDR
// to_heal := [ ] ;
86419: LD_ADDR_VAR 0 30
86423: PUSH
86424: EMPTY
86425: ST_TO_ADDR
// repairs := [ ] ;
86426: LD_ADDR_VAR 0 33
86430: PUSH
86431: EMPTY
86432: ST_TO_ADDR
// to_repair := [ ] ;
86433: LD_ADDR_VAR 0 32
86437: PUSH
86438: EMPTY
86439: ST_TO_ADDR
// if not group or not path then
86440: LD_VAR 0 4
86444: NOT
86445: PUSH
86446: LD_VAR 0 5
86450: NOT
86451: OR
86452: IFFALSE 86456
// exit ;
86454: GO 91001
// side := GetSide ( group [ 1 ] ) ;
86456: LD_ADDR_VAR 0 35
86460: PUSH
86461: LD_VAR 0 4
86465: PUSH
86466: LD_INT 1
86468: ARRAY
86469: PPUSH
86470: CALL_OW 255
86474: ST_TO_ADDR
// if flags then
86475: LD_VAR 0 6
86479: IFFALSE 86623
// begin f_ignore_area := flags [ 1 ] ;
86481: LD_ADDR_VAR 0 17
86485: PUSH
86486: LD_VAR 0 6
86490: PUSH
86491: LD_INT 1
86493: ARRAY
86494: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
86495: LD_ADDR_VAR 0 18
86499: PUSH
86500: LD_VAR 0 6
86504: PUSH
86505: LD_INT 2
86507: ARRAY
86508: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
86509: LD_ADDR_VAR 0 19
86513: PUSH
86514: LD_VAR 0 6
86518: PUSH
86519: LD_INT 3
86521: ARRAY
86522: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
86523: LD_ADDR_VAR 0 20
86527: PUSH
86528: LD_VAR 0 6
86532: PUSH
86533: LD_INT 4
86535: ARRAY
86536: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
86537: LD_ADDR_VAR 0 21
86541: PUSH
86542: LD_VAR 0 6
86546: PUSH
86547: LD_INT 5
86549: ARRAY
86550: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
86551: LD_ADDR_VAR 0 22
86555: PUSH
86556: LD_VAR 0 6
86560: PUSH
86561: LD_INT 6
86563: ARRAY
86564: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
86565: LD_ADDR_VAR 0 23
86569: PUSH
86570: LD_VAR 0 6
86574: PUSH
86575: LD_INT 7
86577: ARRAY
86578: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
86579: LD_ADDR_VAR 0 24
86583: PUSH
86584: LD_VAR 0 6
86588: PUSH
86589: LD_INT 8
86591: ARRAY
86592: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
86593: LD_ADDR_VAR 0 25
86597: PUSH
86598: LD_VAR 0 6
86602: PUSH
86603: LD_INT 9
86605: ARRAY
86606: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
86607: LD_ADDR_VAR 0 26
86611: PUSH
86612: LD_VAR 0 6
86616: PUSH
86617: LD_INT 10
86619: ARRAY
86620: ST_TO_ADDR
// end else
86621: GO 86703
// begin f_ignore_area := false ;
86623: LD_ADDR_VAR 0 17
86627: PUSH
86628: LD_INT 0
86630: ST_TO_ADDR
// f_capture := false ;
86631: LD_ADDR_VAR 0 18
86635: PUSH
86636: LD_INT 0
86638: ST_TO_ADDR
// f_ignore_civ := false ;
86639: LD_ADDR_VAR 0 19
86643: PUSH
86644: LD_INT 0
86646: ST_TO_ADDR
// f_murder := false ;
86647: LD_ADDR_VAR 0 20
86651: PUSH
86652: LD_INT 0
86654: ST_TO_ADDR
// f_mines := false ;
86655: LD_ADDR_VAR 0 21
86659: PUSH
86660: LD_INT 0
86662: ST_TO_ADDR
// f_repair := false ;
86663: LD_ADDR_VAR 0 22
86667: PUSH
86668: LD_INT 0
86670: ST_TO_ADDR
// f_heal := false ;
86671: LD_ADDR_VAR 0 23
86675: PUSH
86676: LD_INT 0
86678: ST_TO_ADDR
// f_spacetime := false ;
86679: LD_ADDR_VAR 0 24
86683: PUSH
86684: LD_INT 0
86686: ST_TO_ADDR
// f_attack_depot := false ;
86687: LD_ADDR_VAR 0 25
86691: PUSH
86692: LD_INT 0
86694: ST_TO_ADDR
// f_crawl := false ;
86695: LD_ADDR_VAR 0 26
86699: PUSH
86700: LD_INT 0
86702: ST_TO_ADDR
// end ; if f_heal then
86703: LD_VAR 0 23
86707: IFFALSE 86734
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
86709: LD_ADDR_VAR 0 31
86713: PUSH
86714: LD_VAR 0 4
86718: PPUSH
86719: LD_INT 25
86721: PUSH
86722: LD_INT 4
86724: PUSH
86725: EMPTY
86726: LIST
86727: LIST
86728: PPUSH
86729: CALL_OW 72
86733: ST_TO_ADDR
// if f_repair then
86734: LD_VAR 0 22
86738: IFFALSE 86765
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
86740: LD_ADDR_VAR 0 33
86744: PUSH
86745: LD_VAR 0 4
86749: PPUSH
86750: LD_INT 25
86752: PUSH
86753: LD_INT 3
86755: PUSH
86756: EMPTY
86757: LIST
86758: LIST
86759: PPUSH
86760: CALL_OW 72
86764: ST_TO_ADDR
// units_path := [ ] ;
86765: LD_ADDR_VAR 0 16
86769: PUSH
86770: EMPTY
86771: ST_TO_ADDR
// for i = 1 to group do
86772: LD_ADDR_VAR 0 7
86776: PUSH
86777: DOUBLE
86778: LD_INT 1
86780: DEC
86781: ST_TO_ADDR
86782: LD_VAR 0 4
86786: PUSH
86787: FOR_TO
86788: IFFALSE 86817
// units_path := Replace ( units_path , i , path ) ;
86790: LD_ADDR_VAR 0 16
86794: PUSH
86795: LD_VAR 0 16
86799: PPUSH
86800: LD_VAR 0 7
86804: PPUSH
86805: LD_VAR 0 5
86809: PPUSH
86810: CALL_OW 1
86814: ST_TO_ADDR
86815: GO 86787
86817: POP
86818: POP
// repeat for i = group downto 1 do
86819: LD_ADDR_VAR 0 7
86823: PUSH
86824: DOUBLE
86825: LD_VAR 0 4
86829: INC
86830: ST_TO_ADDR
86831: LD_INT 1
86833: PUSH
86834: FOR_DOWNTO
86835: IFFALSE 90957
// begin wait ( 5 ) ;
86837: LD_INT 5
86839: PPUSH
86840: CALL_OW 67
// tmp := [ ] ;
86844: LD_ADDR_VAR 0 14
86848: PUSH
86849: EMPTY
86850: ST_TO_ADDR
// attacking := false ;
86851: LD_ADDR_VAR 0 29
86855: PUSH
86856: LD_INT 0
86858: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
86859: LD_VAR 0 4
86863: PUSH
86864: LD_VAR 0 7
86868: ARRAY
86869: PPUSH
86870: CALL_OW 301
86874: PUSH
86875: LD_VAR 0 4
86879: PUSH
86880: LD_VAR 0 7
86884: ARRAY
86885: NOT
86886: OR
86887: IFFALSE 86996
// begin if GetType ( group [ i ] ) = unit_human then
86889: LD_VAR 0 4
86893: PUSH
86894: LD_VAR 0 7
86898: ARRAY
86899: PPUSH
86900: CALL_OW 247
86904: PUSH
86905: LD_INT 1
86907: EQUAL
86908: IFFALSE 86954
// begin to_heal := to_heal diff group [ i ] ;
86910: LD_ADDR_VAR 0 30
86914: PUSH
86915: LD_VAR 0 30
86919: PUSH
86920: LD_VAR 0 4
86924: PUSH
86925: LD_VAR 0 7
86929: ARRAY
86930: DIFF
86931: ST_TO_ADDR
// healers := healers diff group [ i ] ;
86932: LD_ADDR_VAR 0 31
86936: PUSH
86937: LD_VAR 0 31
86941: PUSH
86942: LD_VAR 0 4
86946: PUSH
86947: LD_VAR 0 7
86951: ARRAY
86952: DIFF
86953: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
86954: LD_ADDR_VAR 0 4
86958: PUSH
86959: LD_VAR 0 4
86963: PPUSH
86964: LD_VAR 0 7
86968: PPUSH
86969: CALL_OW 3
86973: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
86974: LD_ADDR_VAR 0 16
86978: PUSH
86979: LD_VAR 0 16
86983: PPUSH
86984: LD_VAR 0 7
86988: PPUSH
86989: CALL_OW 3
86993: ST_TO_ADDR
// continue ;
86994: GO 86834
// end ; if f_repair then
86996: LD_VAR 0 22
87000: IFFALSE 87489
// begin if GetType ( group [ i ] ) = unit_vehicle then
87002: LD_VAR 0 4
87006: PUSH
87007: LD_VAR 0 7
87011: ARRAY
87012: PPUSH
87013: CALL_OW 247
87017: PUSH
87018: LD_INT 2
87020: EQUAL
87021: IFFALSE 87211
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
87023: LD_VAR 0 4
87027: PUSH
87028: LD_VAR 0 7
87032: ARRAY
87033: PPUSH
87034: CALL_OW 256
87038: PUSH
87039: LD_INT 700
87041: LESS
87042: PUSH
87043: LD_VAR 0 4
87047: PUSH
87048: LD_VAR 0 7
87052: ARRAY
87053: PUSH
87054: LD_VAR 0 32
87058: IN
87059: NOT
87060: AND
87061: IFFALSE 87085
// to_repair := to_repair union group [ i ] ;
87063: LD_ADDR_VAR 0 32
87067: PUSH
87068: LD_VAR 0 32
87072: PUSH
87073: LD_VAR 0 4
87077: PUSH
87078: LD_VAR 0 7
87082: ARRAY
87083: UNION
87084: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
87085: LD_VAR 0 4
87089: PUSH
87090: LD_VAR 0 7
87094: ARRAY
87095: PPUSH
87096: CALL_OW 256
87100: PUSH
87101: LD_INT 1000
87103: EQUAL
87104: PUSH
87105: LD_VAR 0 4
87109: PUSH
87110: LD_VAR 0 7
87114: ARRAY
87115: PUSH
87116: LD_VAR 0 32
87120: IN
87121: AND
87122: IFFALSE 87146
// to_repair := to_repair diff group [ i ] ;
87124: LD_ADDR_VAR 0 32
87128: PUSH
87129: LD_VAR 0 32
87133: PUSH
87134: LD_VAR 0 4
87138: PUSH
87139: LD_VAR 0 7
87143: ARRAY
87144: DIFF
87145: ST_TO_ADDR
// if group [ i ] in to_repair then
87146: LD_VAR 0 4
87150: PUSH
87151: LD_VAR 0 7
87155: ARRAY
87156: PUSH
87157: LD_VAR 0 32
87161: IN
87162: IFFALSE 87209
// begin if not IsInArea ( group [ i ] , f_repair ) then
87164: LD_VAR 0 4
87168: PUSH
87169: LD_VAR 0 7
87173: ARRAY
87174: PPUSH
87175: LD_VAR 0 22
87179: PPUSH
87180: CALL_OW 308
87184: NOT
87185: IFFALSE 87207
// ComMoveToArea ( group [ i ] , f_repair ) ;
87187: LD_VAR 0 4
87191: PUSH
87192: LD_VAR 0 7
87196: ARRAY
87197: PPUSH
87198: LD_VAR 0 22
87202: PPUSH
87203: CALL_OW 113
// continue ;
87207: GO 86834
// end ; end else
87209: GO 87489
// if group [ i ] in repairs then
87211: LD_VAR 0 4
87215: PUSH
87216: LD_VAR 0 7
87220: ARRAY
87221: PUSH
87222: LD_VAR 0 33
87226: IN
87227: IFFALSE 87489
// begin if IsInUnit ( group [ i ] ) then
87229: LD_VAR 0 4
87233: PUSH
87234: LD_VAR 0 7
87238: ARRAY
87239: PPUSH
87240: CALL_OW 310
87244: IFFALSE 87312
// begin z := IsInUnit ( group [ i ] ) ;
87246: LD_ADDR_VAR 0 13
87250: PUSH
87251: LD_VAR 0 4
87255: PUSH
87256: LD_VAR 0 7
87260: ARRAY
87261: PPUSH
87262: CALL_OW 310
87266: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
87267: LD_VAR 0 13
87271: PUSH
87272: LD_VAR 0 32
87276: IN
87277: PUSH
87278: LD_VAR 0 13
87282: PPUSH
87283: LD_VAR 0 22
87287: PPUSH
87288: CALL_OW 308
87292: AND
87293: IFFALSE 87310
// ComExitVehicle ( group [ i ] ) ;
87295: LD_VAR 0 4
87299: PUSH
87300: LD_VAR 0 7
87304: ARRAY
87305: PPUSH
87306: CALL_OW 121
// end else
87310: GO 87489
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
87312: LD_ADDR_VAR 0 13
87316: PUSH
87317: LD_VAR 0 4
87321: PPUSH
87322: LD_INT 95
87324: PUSH
87325: LD_VAR 0 22
87329: PUSH
87330: EMPTY
87331: LIST
87332: LIST
87333: PUSH
87334: LD_INT 58
87336: PUSH
87337: EMPTY
87338: LIST
87339: PUSH
87340: EMPTY
87341: LIST
87342: LIST
87343: PPUSH
87344: CALL_OW 72
87348: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
87349: LD_VAR 0 4
87353: PUSH
87354: LD_VAR 0 7
87358: ARRAY
87359: PPUSH
87360: CALL_OW 314
87364: NOT
87365: IFFALSE 87487
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
87367: LD_ADDR_VAR 0 10
87371: PUSH
87372: LD_VAR 0 13
87376: PPUSH
87377: LD_VAR 0 4
87381: PUSH
87382: LD_VAR 0 7
87386: ARRAY
87387: PPUSH
87388: CALL_OW 74
87392: ST_TO_ADDR
// if not x then
87393: LD_VAR 0 10
87397: NOT
87398: IFFALSE 87402
// continue ;
87400: GO 86834
// if GetLives ( x ) < 1000 then
87402: LD_VAR 0 10
87406: PPUSH
87407: CALL_OW 256
87411: PUSH
87412: LD_INT 1000
87414: LESS
87415: IFFALSE 87439
// ComRepairVehicle ( group [ i ] , x ) else
87417: LD_VAR 0 4
87421: PUSH
87422: LD_VAR 0 7
87426: ARRAY
87427: PPUSH
87428: LD_VAR 0 10
87432: PPUSH
87433: CALL_OW 129
87437: GO 87487
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
87439: LD_VAR 0 23
87443: PUSH
87444: LD_VAR 0 4
87448: PUSH
87449: LD_VAR 0 7
87453: ARRAY
87454: PPUSH
87455: CALL_OW 256
87459: PUSH
87460: LD_INT 1000
87462: LESS
87463: AND
87464: NOT
87465: IFFALSE 87487
// ComEnterUnit ( group [ i ] , x ) ;
87467: LD_VAR 0 4
87471: PUSH
87472: LD_VAR 0 7
87476: ARRAY
87477: PPUSH
87478: LD_VAR 0 10
87482: PPUSH
87483: CALL_OW 120
// end ; continue ;
87487: GO 86834
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
87489: LD_VAR 0 23
87493: PUSH
87494: LD_VAR 0 4
87498: PUSH
87499: LD_VAR 0 7
87503: ARRAY
87504: PPUSH
87505: CALL_OW 247
87509: PUSH
87510: LD_INT 1
87512: EQUAL
87513: AND
87514: IFFALSE 87992
// begin if group [ i ] in healers then
87516: LD_VAR 0 4
87520: PUSH
87521: LD_VAR 0 7
87525: ARRAY
87526: PUSH
87527: LD_VAR 0 31
87531: IN
87532: IFFALSE 87805
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
87534: LD_VAR 0 4
87538: PUSH
87539: LD_VAR 0 7
87543: ARRAY
87544: PPUSH
87545: LD_VAR 0 23
87549: PPUSH
87550: CALL_OW 308
87554: NOT
87555: PUSH
87556: LD_VAR 0 4
87560: PUSH
87561: LD_VAR 0 7
87565: ARRAY
87566: PPUSH
87567: CALL_OW 314
87571: NOT
87572: AND
87573: IFFALSE 87597
// ComMoveToArea ( group [ i ] , f_heal ) else
87575: LD_VAR 0 4
87579: PUSH
87580: LD_VAR 0 7
87584: ARRAY
87585: PPUSH
87586: LD_VAR 0 23
87590: PPUSH
87591: CALL_OW 113
87595: GO 87803
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
87597: LD_VAR 0 4
87601: PUSH
87602: LD_VAR 0 7
87606: ARRAY
87607: PPUSH
87608: CALL 86215 0 1
87612: PPUSH
87613: CALL_OW 256
87617: PUSH
87618: LD_INT 1000
87620: EQUAL
87621: IFFALSE 87640
// ComStop ( group [ i ] ) else
87623: LD_VAR 0 4
87627: PUSH
87628: LD_VAR 0 7
87632: ARRAY
87633: PPUSH
87634: CALL_OW 141
87638: GO 87803
// if not HasTask ( group [ i ] ) and to_heal then
87640: LD_VAR 0 4
87644: PUSH
87645: LD_VAR 0 7
87649: ARRAY
87650: PPUSH
87651: CALL_OW 314
87655: NOT
87656: PUSH
87657: LD_VAR 0 30
87661: AND
87662: IFFALSE 87803
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
87664: LD_ADDR_VAR 0 13
87668: PUSH
87669: LD_VAR 0 30
87673: PPUSH
87674: LD_INT 3
87676: PUSH
87677: LD_INT 54
87679: PUSH
87680: EMPTY
87681: LIST
87682: PUSH
87683: EMPTY
87684: LIST
87685: LIST
87686: PPUSH
87687: CALL_OW 72
87691: PPUSH
87692: LD_VAR 0 4
87696: PUSH
87697: LD_VAR 0 7
87701: ARRAY
87702: PPUSH
87703: CALL_OW 74
87707: ST_TO_ADDR
// if z then
87708: LD_VAR 0 13
87712: IFFALSE 87803
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
87714: LD_INT 91
87716: PUSH
87717: LD_VAR 0 13
87721: PUSH
87722: LD_INT 10
87724: PUSH
87725: EMPTY
87726: LIST
87727: LIST
87728: LIST
87729: PUSH
87730: LD_INT 81
87732: PUSH
87733: LD_VAR 0 13
87737: PPUSH
87738: CALL_OW 255
87742: PUSH
87743: EMPTY
87744: LIST
87745: LIST
87746: PUSH
87747: EMPTY
87748: LIST
87749: LIST
87750: PPUSH
87751: CALL_OW 69
87755: PUSH
87756: LD_INT 0
87758: EQUAL
87759: IFFALSE 87783
// ComHeal ( group [ i ] , z ) else
87761: LD_VAR 0 4
87765: PUSH
87766: LD_VAR 0 7
87770: ARRAY
87771: PPUSH
87772: LD_VAR 0 13
87776: PPUSH
87777: CALL_OW 128
87781: GO 87803
// ComMoveToArea ( group [ i ] , f_heal ) ;
87783: LD_VAR 0 4
87787: PUSH
87788: LD_VAR 0 7
87792: ARRAY
87793: PPUSH
87794: LD_VAR 0 23
87798: PPUSH
87799: CALL_OW 113
// end ; continue ;
87803: GO 86834
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
87805: LD_VAR 0 4
87809: PUSH
87810: LD_VAR 0 7
87814: ARRAY
87815: PPUSH
87816: CALL_OW 256
87820: PUSH
87821: LD_INT 700
87823: LESS
87824: PUSH
87825: LD_VAR 0 4
87829: PUSH
87830: LD_VAR 0 7
87834: ARRAY
87835: PUSH
87836: LD_VAR 0 30
87840: IN
87841: NOT
87842: AND
87843: IFFALSE 87867
// to_heal := to_heal union group [ i ] ;
87845: LD_ADDR_VAR 0 30
87849: PUSH
87850: LD_VAR 0 30
87854: PUSH
87855: LD_VAR 0 4
87859: PUSH
87860: LD_VAR 0 7
87864: ARRAY
87865: UNION
87866: ST_TO_ADDR
// if group [ i ] in to_heal then
87867: LD_VAR 0 4
87871: PUSH
87872: LD_VAR 0 7
87876: ARRAY
87877: PUSH
87878: LD_VAR 0 30
87882: IN
87883: IFFALSE 87992
// begin if GetLives ( group [ i ] ) = 1000 then
87885: LD_VAR 0 4
87889: PUSH
87890: LD_VAR 0 7
87894: ARRAY
87895: PPUSH
87896: CALL_OW 256
87900: PUSH
87901: LD_INT 1000
87903: EQUAL
87904: IFFALSE 87930
// to_heal := to_heal diff group [ i ] else
87906: LD_ADDR_VAR 0 30
87910: PUSH
87911: LD_VAR 0 30
87915: PUSH
87916: LD_VAR 0 4
87920: PUSH
87921: LD_VAR 0 7
87925: ARRAY
87926: DIFF
87927: ST_TO_ADDR
87928: GO 87992
// begin if not IsInArea ( group [ i ] , to_heal ) then
87930: LD_VAR 0 4
87934: PUSH
87935: LD_VAR 0 7
87939: ARRAY
87940: PPUSH
87941: LD_VAR 0 30
87945: PPUSH
87946: CALL_OW 308
87950: NOT
87951: IFFALSE 87975
// ComMoveToArea ( group [ i ] , f_heal ) else
87953: LD_VAR 0 4
87957: PUSH
87958: LD_VAR 0 7
87962: ARRAY
87963: PPUSH
87964: LD_VAR 0 23
87968: PPUSH
87969: CALL_OW 113
87973: GO 87990
// ComHold ( group [ i ] ) ;
87975: LD_VAR 0 4
87979: PUSH
87980: LD_VAR 0 7
87984: ARRAY
87985: PPUSH
87986: CALL_OW 140
// continue ;
87990: GO 86834
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
87992: LD_VAR 0 4
87996: PUSH
87997: LD_VAR 0 7
88001: ARRAY
88002: PPUSH
88003: LD_INT 10
88005: PPUSH
88006: CALL 84635 0 2
88010: NOT
88011: PUSH
88012: LD_VAR 0 16
88016: PUSH
88017: LD_VAR 0 7
88021: ARRAY
88022: PUSH
88023: EMPTY
88024: EQUAL
88025: NOT
88026: AND
88027: IFFALSE 88293
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
88029: LD_VAR 0 4
88033: PUSH
88034: LD_VAR 0 7
88038: ARRAY
88039: PPUSH
88040: CALL_OW 262
88044: PUSH
88045: LD_INT 1
88047: PUSH
88048: LD_INT 2
88050: PUSH
88051: EMPTY
88052: LIST
88053: LIST
88054: IN
88055: IFFALSE 88096
// if GetFuel ( group [ i ] ) < 10 then
88057: LD_VAR 0 4
88061: PUSH
88062: LD_VAR 0 7
88066: ARRAY
88067: PPUSH
88068: CALL_OW 261
88072: PUSH
88073: LD_INT 10
88075: LESS
88076: IFFALSE 88096
// SetFuel ( group [ i ] , 12 ) ;
88078: LD_VAR 0 4
88082: PUSH
88083: LD_VAR 0 7
88087: ARRAY
88088: PPUSH
88089: LD_INT 12
88091: PPUSH
88092: CALL_OW 240
// if units_path [ i ] then
88096: LD_VAR 0 16
88100: PUSH
88101: LD_VAR 0 7
88105: ARRAY
88106: IFFALSE 88291
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
88108: LD_VAR 0 4
88112: PUSH
88113: LD_VAR 0 7
88117: ARRAY
88118: PPUSH
88119: LD_VAR 0 16
88123: PUSH
88124: LD_VAR 0 7
88128: ARRAY
88129: PUSH
88130: LD_INT 1
88132: ARRAY
88133: PUSH
88134: LD_INT 1
88136: ARRAY
88137: PPUSH
88138: LD_VAR 0 16
88142: PUSH
88143: LD_VAR 0 7
88147: ARRAY
88148: PUSH
88149: LD_INT 1
88151: ARRAY
88152: PUSH
88153: LD_INT 2
88155: ARRAY
88156: PPUSH
88157: CALL_OW 297
88161: PUSH
88162: LD_INT 6
88164: GREATER
88165: IFFALSE 88240
// begin if not HasTask ( group [ i ] ) then
88167: LD_VAR 0 4
88171: PUSH
88172: LD_VAR 0 7
88176: ARRAY
88177: PPUSH
88178: CALL_OW 314
88182: NOT
88183: IFFALSE 88238
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
88185: LD_VAR 0 4
88189: PUSH
88190: LD_VAR 0 7
88194: ARRAY
88195: PPUSH
88196: LD_VAR 0 16
88200: PUSH
88201: LD_VAR 0 7
88205: ARRAY
88206: PUSH
88207: LD_INT 1
88209: ARRAY
88210: PUSH
88211: LD_INT 1
88213: ARRAY
88214: PPUSH
88215: LD_VAR 0 16
88219: PUSH
88220: LD_VAR 0 7
88224: ARRAY
88225: PUSH
88226: LD_INT 1
88228: ARRAY
88229: PUSH
88230: LD_INT 2
88232: ARRAY
88233: PPUSH
88234: CALL_OW 114
// end else
88238: GO 88291
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
88240: LD_ADDR_VAR 0 15
88244: PUSH
88245: LD_VAR 0 16
88249: PUSH
88250: LD_VAR 0 7
88254: ARRAY
88255: PPUSH
88256: LD_INT 1
88258: PPUSH
88259: CALL_OW 3
88263: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
88264: LD_ADDR_VAR 0 16
88268: PUSH
88269: LD_VAR 0 16
88273: PPUSH
88274: LD_VAR 0 7
88278: PPUSH
88279: LD_VAR 0 15
88283: PPUSH
88284: CALL_OW 1
88288: ST_TO_ADDR
// continue ;
88289: GO 86834
// end ; end ; end else
88291: GO 90955
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
88293: LD_ADDR_VAR 0 14
88297: PUSH
88298: LD_INT 81
88300: PUSH
88301: LD_VAR 0 4
88305: PUSH
88306: LD_VAR 0 7
88310: ARRAY
88311: PPUSH
88312: CALL_OW 255
88316: PUSH
88317: EMPTY
88318: LIST
88319: LIST
88320: PPUSH
88321: CALL_OW 69
88325: ST_TO_ADDR
// if not tmp then
88326: LD_VAR 0 14
88330: NOT
88331: IFFALSE 88335
// continue ;
88333: GO 86834
// if f_ignore_area then
88335: LD_VAR 0 17
88339: IFFALSE 88427
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
88341: LD_ADDR_VAR 0 15
88345: PUSH
88346: LD_VAR 0 14
88350: PPUSH
88351: LD_INT 3
88353: PUSH
88354: LD_INT 92
88356: PUSH
88357: LD_VAR 0 17
88361: PUSH
88362: LD_INT 1
88364: ARRAY
88365: PUSH
88366: LD_VAR 0 17
88370: PUSH
88371: LD_INT 2
88373: ARRAY
88374: PUSH
88375: LD_VAR 0 17
88379: PUSH
88380: LD_INT 3
88382: ARRAY
88383: PUSH
88384: EMPTY
88385: LIST
88386: LIST
88387: LIST
88388: LIST
88389: PUSH
88390: EMPTY
88391: LIST
88392: LIST
88393: PPUSH
88394: CALL_OW 72
88398: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
88399: LD_VAR 0 14
88403: PUSH
88404: LD_VAR 0 15
88408: DIFF
88409: IFFALSE 88427
// tmp := tmp diff tmp2 ;
88411: LD_ADDR_VAR 0 14
88415: PUSH
88416: LD_VAR 0 14
88420: PUSH
88421: LD_VAR 0 15
88425: DIFF
88426: ST_TO_ADDR
// end ; if not f_murder then
88427: LD_VAR 0 20
88431: NOT
88432: IFFALSE 88490
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
88434: LD_ADDR_VAR 0 15
88438: PUSH
88439: LD_VAR 0 14
88443: PPUSH
88444: LD_INT 3
88446: PUSH
88447: LD_INT 50
88449: PUSH
88450: EMPTY
88451: LIST
88452: PUSH
88453: EMPTY
88454: LIST
88455: LIST
88456: PPUSH
88457: CALL_OW 72
88461: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
88462: LD_VAR 0 14
88466: PUSH
88467: LD_VAR 0 15
88471: DIFF
88472: IFFALSE 88490
// tmp := tmp diff tmp2 ;
88474: LD_ADDR_VAR 0 14
88478: PUSH
88479: LD_VAR 0 14
88483: PUSH
88484: LD_VAR 0 15
88488: DIFF
88489: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
88490: LD_ADDR_VAR 0 14
88494: PUSH
88495: LD_VAR 0 4
88499: PUSH
88500: LD_VAR 0 7
88504: ARRAY
88505: PPUSH
88506: LD_VAR 0 14
88510: PPUSH
88511: LD_INT 1
88513: PPUSH
88514: LD_INT 1
88516: PPUSH
88517: CALL 58278 0 4
88521: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
88522: LD_VAR 0 4
88526: PUSH
88527: LD_VAR 0 7
88531: ARRAY
88532: PPUSH
88533: CALL_OW 257
88537: PUSH
88538: LD_INT 1
88540: EQUAL
88541: IFFALSE 88989
// begin if WantPlant ( group [ i ] ) then
88543: LD_VAR 0 4
88547: PUSH
88548: LD_VAR 0 7
88552: ARRAY
88553: PPUSH
88554: CALL 57779 0 1
88558: IFFALSE 88562
// continue ;
88560: GO 86834
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
88562: LD_VAR 0 18
88566: PUSH
88567: LD_VAR 0 4
88571: PUSH
88572: LD_VAR 0 7
88576: ARRAY
88577: PPUSH
88578: CALL_OW 310
88582: NOT
88583: AND
88584: PUSH
88585: LD_VAR 0 14
88589: PUSH
88590: LD_INT 1
88592: ARRAY
88593: PUSH
88594: LD_VAR 0 14
88598: PPUSH
88599: LD_INT 21
88601: PUSH
88602: LD_INT 2
88604: PUSH
88605: EMPTY
88606: LIST
88607: LIST
88608: PUSH
88609: LD_INT 58
88611: PUSH
88612: EMPTY
88613: LIST
88614: PUSH
88615: EMPTY
88616: LIST
88617: LIST
88618: PPUSH
88619: CALL_OW 72
88623: IN
88624: AND
88625: IFFALSE 88661
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
88627: LD_VAR 0 4
88631: PUSH
88632: LD_VAR 0 7
88636: ARRAY
88637: PPUSH
88638: LD_VAR 0 14
88642: PUSH
88643: LD_INT 1
88645: ARRAY
88646: PPUSH
88647: CALL_OW 120
// attacking := true ;
88651: LD_ADDR_VAR 0 29
88655: PUSH
88656: LD_INT 1
88658: ST_TO_ADDR
// continue ;
88659: GO 86834
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
88661: LD_VAR 0 26
88665: PUSH
88666: LD_VAR 0 4
88670: PUSH
88671: LD_VAR 0 7
88675: ARRAY
88676: PPUSH
88677: CALL_OW 257
88681: PUSH
88682: LD_INT 1
88684: EQUAL
88685: AND
88686: PUSH
88687: LD_VAR 0 4
88691: PUSH
88692: LD_VAR 0 7
88696: ARRAY
88697: PPUSH
88698: CALL_OW 256
88702: PUSH
88703: LD_INT 800
88705: LESS
88706: AND
88707: PUSH
88708: LD_VAR 0 4
88712: PUSH
88713: LD_VAR 0 7
88717: ARRAY
88718: PPUSH
88719: CALL_OW 318
88723: NOT
88724: AND
88725: IFFALSE 88742
// ComCrawl ( group [ i ] ) ;
88727: LD_VAR 0 4
88731: PUSH
88732: LD_VAR 0 7
88736: ARRAY
88737: PPUSH
88738: CALL_OW 137
// if f_mines then
88742: LD_VAR 0 21
88746: IFFALSE 88989
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
88748: LD_VAR 0 14
88752: PUSH
88753: LD_INT 1
88755: ARRAY
88756: PPUSH
88757: CALL_OW 247
88761: PUSH
88762: LD_INT 3
88764: EQUAL
88765: PUSH
88766: LD_VAR 0 14
88770: PUSH
88771: LD_INT 1
88773: ARRAY
88774: PUSH
88775: LD_VAR 0 27
88779: IN
88780: NOT
88781: AND
88782: IFFALSE 88989
// begin x := GetX ( tmp [ 1 ] ) ;
88784: LD_ADDR_VAR 0 10
88788: PUSH
88789: LD_VAR 0 14
88793: PUSH
88794: LD_INT 1
88796: ARRAY
88797: PPUSH
88798: CALL_OW 250
88802: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
88803: LD_ADDR_VAR 0 11
88807: PUSH
88808: LD_VAR 0 14
88812: PUSH
88813: LD_INT 1
88815: ARRAY
88816: PPUSH
88817: CALL_OW 251
88821: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
88822: LD_ADDR_VAR 0 12
88826: PUSH
88827: LD_VAR 0 4
88831: PUSH
88832: LD_VAR 0 7
88836: ARRAY
88837: PPUSH
88838: CALL 84720 0 1
88842: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
88843: LD_VAR 0 4
88847: PUSH
88848: LD_VAR 0 7
88852: ARRAY
88853: PPUSH
88854: LD_VAR 0 10
88858: PPUSH
88859: LD_VAR 0 11
88863: PPUSH
88864: LD_VAR 0 14
88868: PUSH
88869: LD_INT 1
88871: ARRAY
88872: PPUSH
88873: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
88877: LD_VAR 0 4
88881: PUSH
88882: LD_VAR 0 7
88886: ARRAY
88887: PPUSH
88888: LD_VAR 0 10
88892: PPUSH
88893: LD_VAR 0 12
88897: PPUSH
88898: LD_INT 7
88900: PPUSH
88901: CALL_OW 272
88905: PPUSH
88906: LD_VAR 0 11
88910: PPUSH
88911: LD_VAR 0 12
88915: PPUSH
88916: LD_INT 7
88918: PPUSH
88919: CALL_OW 273
88923: PPUSH
88924: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
88928: LD_VAR 0 4
88932: PUSH
88933: LD_VAR 0 7
88937: ARRAY
88938: PPUSH
88939: LD_INT 71
88941: PPUSH
88942: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
88946: LD_ADDR_VAR 0 27
88950: PUSH
88951: LD_VAR 0 27
88955: PPUSH
88956: LD_VAR 0 27
88960: PUSH
88961: LD_INT 1
88963: PLUS
88964: PPUSH
88965: LD_VAR 0 14
88969: PUSH
88970: LD_INT 1
88972: ARRAY
88973: PPUSH
88974: CALL_OW 1
88978: ST_TO_ADDR
// attacking := true ;
88979: LD_ADDR_VAR 0 29
88983: PUSH
88984: LD_INT 1
88986: ST_TO_ADDR
// continue ;
88987: GO 86834
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
88989: LD_VAR 0 4
88993: PUSH
88994: LD_VAR 0 7
88998: ARRAY
88999: PPUSH
89000: CALL_OW 257
89004: PUSH
89005: LD_INT 17
89007: EQUAL
89008: PUSH
89009: LD_VAR 0 4
89013: PUSH
89014: LD_VAR 0 7
89018: ARRAY
89019: PPUSH
89020: CALL_OW 110
89024: PUSH
89025: LD_INT 71
89027: EQUAL
89028: NOT
89029: AND
89030: IFFALSE 89176
// begin attacking := false ;
89032: LD_ADDR_VAR 0 29
89036: PUSH
89037: LD_INT 0
89039: ST_TO_ADDR
// k := 5 ;
89040: LD_ADDR_VAR 0 9
89044: PUSH
89045: LD_INT 5
89047: ST_TO_ADDR
// if tmp < k then
89048: LD_VAR 0 14
89052: PUSH
89053: LD_VAR 0 9
89057: LESS
89058: IFFALSE 89070
// k := tmp ;
89060: LD_ADDR_VAR 0 9
89064: PUSH
89065: LD_VAR 0 14
89069: ST_TO_ADDR
// for j = 1 to k do
89070: LD_ADDR_VAR 0 8
89074: PUSH
89075: DOUBLE
89076: LD_INT 1
89078: DEC
89079: ST_TO_ADDR
89080: LD_VAR 0 9
89084: PUSH
89085: FOR_TO
89086: IFFALSE 89174
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
89088: LD_VAR 0 14
89092: PUSH
89093: LD_VAR 0 8
89097: ARRAY
89098: PUSH
89099: LD_VAR 0 14
89103: PPUSH
89104: LD_INT 58
89106: PUSH
89107: EMPTY
89108: LIST
89109: PPUSH
89110: CALL_OW 72
89114: IN
89115: NOT
89116: IFFALSE 89172
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
89118: LD_VAR 0 4
89122: PUSH
89123: LD_VAR 0 7
89127: ARRAY
89128: PPUSH
89129: LD_VAR 0 14
89133: PUSH
89134: LD_VAR 0 8
89138: ARRAY
89139: PPUSH
89140: CALL_OW 115
// attacking := true ;
89144: LD_ADDR_VAR 0 29
89148: PUSH
89149: LD_INT 1
89151: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
89152: LD_VAR 0 4
89156: PUSH
89157: LD_VAR 0 7
89161: ARRAY
89162: PPUSH
89163: LD_INT 71
89165: PPUSH
89166: CALL_OW 109
// continue ;
89170: GO 89085
// end ; end ;
89172: GO 89085
89174: POP
89175: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
89176: LD_VAR 0 4
89180: PUSH
89181: LD_VAR 0 7
89185: ARRAY
89186: PPUSH
89187: CALL_OW 257
89191: PUSH
89192: LD_INT 8
89194: EQUAL
89195: PUSH
89196: LD_VAR 0 4
89200: PUSH
89201: LD_VAR 0 7
89205: ARRAY
89206: PPUSH
89207: CALL_OW 264
89211: PUSH
89212: LD_INT 28
89214: PUSH
89215: LD_INT 45
89217: PUSH
89218: LD_INT 7
89220: PUSH
89221: LD_INT 47
89223: PUSH
89224: EMPTY
89225: LIST
89226: LIST
89227: LIST
89228: LIST
89229: IN
89230: OR
89231: IFFALSE 89487
// begin attacking := false ;
89233: LD_ADDR_VAR 0 29
89237: PUSH
89238: LD_INT 0
89240: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
89241: LD_VAR 0 14
89245: PUSH
89246: LD_INT 1
89248: ARRAY
89249: PPUSH
89250: CALL_OW 266
89254: PUSH
89255: LD_INT 32
89257: PUSH
89258: LD_INT 31
89260: PUSH
89261: LD_INT 33
89263: PUSH
89264: LD_INT 4
89266: PUSH
89267: LD_INT 5
89269: PUSH
89270: EMPTY
89271: LIST
89272: LIST
89273: LIST
89274: LIST
89275: LIST
89276: IN
89277: IFFALSE 89463
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
89279: LD_ADDR_VAR 0 9
89283: PUSH
89284: LD_VAR 0 14
89288: PUSH
89289: LD_INT 1
89291: ARRAY
89292: PPUSH
89293: CALL_OW 266
89297: PPUSH
89298: LD_VAR 0 14
89302: PUSH
89303: LD_INT 1
89305: ARRAY
89306: PPUSH
89307: CALL_OW 250
89311: PPUSH
89312: LD_VAR 0 14
89316: PUSH
89317: LD_INT 1
89319: ARRAY
89320: PPUSH
89321: CALL_OW 251
89325: PPUSH
89326: LD_VAR 0 14
89330: PUSH
89331: LD_INT 1
89333: ARRAY
89334: PPUSH
89335: CALL_OW 254
89339: PPUSH
89340: LD_VAR 0 14
89344: PUSH
89345: LD_INT 1
89347: ARRAY
89348: PPUSH
89349: CALL_OW 248
89353: PPUSH
89354: LD_INT 0
89356: PPUSH
89357: CALL 66090 0 6
89361: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
89362: LD_ADDR_VAR 0 8
89366: PUSH
89367: LD_VAR 0 4
89371: PUSH
89372: LD_VAR 0 7
89376: ARRAY
89377: PPUSH
89378: LD_VAR 0 9
89382: PPUSH
89383: CALL 84760 0 2
89387: ST_TO_ADDR
// if j then
89388: LD_VAR 0 8
89392: IFFALSE 89461
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
89394: LD_VAR 0 8
89398: PUSH
89399: LD_INT 1
89401: ARRAY
89402: PPUSH
89403: LD_VAR 0 8
89407: PUSH
89408: LD_INT 2
89410: ARRAY
89411: PPUSH
89412: CALL_OW 488
89416: IFFALSE 89461
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
89418: LD_VAR 0 4
89422: PUSH
89423: LD_VAR 0 7
89427: ARRAY
89428: PPUSH
89429: LD_VAR 0 8
89433: PUSH
89434: LD_INT 1
89436: ARRAY
89437: PPUSH
89438: LD_VAR 0 8
89442: PUSH
89443: LD_INT 2
89445: ARRAY
89446: PPUSH
89447: CALL_OW 116
// attacking := true ;
89451: LD_ADDR_VAR 0 29
89455: PUSH
89456: LD_INT 1
89458: ST_TO_ADDR
// continue ;
89459: GO 86834
// end ; end else
89461: GO 89487
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
89463: LD_VAR 0 4
89467: PUSH
89468: LD_VAR 0 7
89472: ARRAY
89473: PPUSH
89474: LD_VAR 0 14
89478: PUSH
89479: LD_INT 1
89481: ARRAY
89482: PPUSH
89483: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
89487: LD_VAR 0 4
89491: PUSH
89492: LD_VAR 0 7
89496: ARRAY
89497: PPUSH
89498: CALL_OW 265
89502: PUSH
89503: LD_INT 11
89505: EQUAL
89506: IFFALSE 89784
// begin k := 10 ;
89508: LD_ADDR_VAR 0 9
89512: PUSH
89513: LD_INT 10
89515: ST_TO_ADDR
// x := 0 ;
89516: LD_ADDR_VAR 0 10
89520: PUSH
89521: LD_INT 0
89523: ST_TO_ADDR
// if tmp < k then
89524: LD_VAR 0 14
89528: PUSH
89529: LD_VAR 0 9
89533: LESS
89534: IFFALSE 89546
// k := tmp ;
89536: LD_ADDR_VAR 0 9
89540: PUSH
89541: LD_VAR 0 14
89545: ST_TO_ADDR
// for j = k downto 1 do
89546: LD_ADDR_VAR 0 8
89550: PUSH
89551: DOUBLE
89552: LD_VAR 0 9
89556: INC
89557: ST_TO_ADDR
89558: LD_INT 1
89560: PUSH
89561: FOR_DOWNTO
89562: IFFALSE 89637
// begin if GetType ( tmp [ j ] ) = unit_human then
89564: LD_VAR 0 14
89568: PUSH
89569: LD_VAR 0 8
89573: ARRAY
89574: PPUSH
89575: CALL_OW 247
89579: PUSH
89580: LD_INT 1
89582: EQUAL
89583: IFFALSE 89635
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
89585: LD_VAR 0 4
89589: PUSH
89590: LD_VAR 0 7
89594: ARRAY
89595: PPUSH
89596: LD_VAR 0 14
89600: PUSH
89601: LD_VAR 0 8
89605: ARRAY
89606: PPUSH
89607: CALL 85031 0 2
// x := tmp [ j ] ;
89611: LD_ADDR_VAR 0 10
89615: PUSH
89616: LD_VAR 0 14
89620: PUSH
89621: LD_VAR 0 8
89625: ARRAY
89626: ST_TO_ADDR
// attacking := true ;
89627: LD_ADDR_VAR 0 29
89631: PUSH
89632: LD_INT 1
89634: ST_TO_ADDR
// end ; end ;
89635: GO 89561
89637: POP
89638: POP
// if not x then
89639: LD_VAR 0 10
89643: NOT
89644: IFFALSE 89784
// begin attacking := true ;
89646: LD_ADDR_VAR 0 29
89650: PUSH
89651: LD_INT 1
89653: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
89654: LD_VAR 0 4
89658: PUSH
89659: LD_VAR 0 7
89663: ARRAY
89664: PPUSH
89665: CALL_OW 250
89669: PPUSH
89670: LD_VAR 0 4
89674: PUSH
89675: LD_VAR 0 7
89679: ARRAY
89680: PPUSH
89681: CALL_OW 251
89685: PPUSH
89686: CALL_OW 546
89690: PUSH
89691: LD_INT 2
89693: ARRAY
89694: PUSH
89695: LD_VAR 0 14
89699: PUSH
89700: LD_INT 1
89702: ARRAY
89703: PPUSH
89704: CALL_OW 250
89708: PPUSH
89709: LD_VAR 0 14
89713: PUSH
89714: LD_INT 1
89716: ARRAY
89717: PPUSH
89718: CALL_OW 251
89722: PPUSH
89723: CALL_OW 546
89727: PUSH
89728: LD_INT 2
89730: ARRAY
89731: EQUAL
89732: IFFALSE 89760
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
89734: LD_VAR 0 4
89738: PUSH
89739: LD_VAR 0 7
89743: ARRAY
89744: PPUSH
89745: LD_VAR 0 14
89749: PUSH
89750: LD_INT 1
89752: ARRAY
89753: PPUSH
89754: CALL 85031 0 2
89758: GO 89784
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
89760: LD_VAR 0 4
89764: PUSH
89765: LD_VAR 0 7
89769: ARRAY
89770: PPUSH
89771: LD_VAR 0 14
89775: PUSH
89776: LD_INT 1
89778: ARRAY
89779: PPUSH
89780: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
89784: LD_VAR 0 4
89788: PUSH
89789: LD_VAR 0 7
89793: ARRAY
89794: PPUSH
89795: CALL_OW 264
89799: PUSH
89800: LD_INT 29
89802: EQUAL
89803: IFFALSE 90169
// begin if WantsToAttack ( group [ i ] ) in bombed then
89805: LD_VAR 0 4
89809: PUSH
89810: LD_VAR 0 7
89814: ARRAY
89815: PPUSH
89816: CALL_OW 319
89820: PUSH
89821: LD_VAR 0 28
89825: IN
89826: IFFALSE 89830
// continue ;
89828: GO 86834
// k := 8 ;
89830: LD_ADDR_VAR 0 9
89834: PUSH
89835: LD_INT 8
89837: ST_TO_ADDR
// x := 0 ;
89838: LD_ADDR_VAR 0 10
89842: PUSH
89843: LD_INT 0
89845: ST_TO_ADDR
// if tmp < k then
89846: LD_VAR 0 14
89850: PUSH
89851: LD_VAR 0 9
89855: LESS
89856: IFFALSE 89868
// k := tmp ;
89858: LD_ADDR_VAR 0 9
89862: PUSH
89863: LD_VAR 0 14
89867: ST_TO_ADDR
// for j = 1 to k do
89868: LD_ADDR_VAR 0 8
89872: PUSH
89873: DOUBLE
89874: LD_INT 1
89876: DEC
89877: ST_TO_ADDR
89878: LD_VAR 0 9
89882: PUSH
89883: FOR_TO
89884: IFFALSE 90016
// begin if GetType ( tmp [ j ] ) = unit_building then
89886: LD_VAR 0 14
89890: PUSH
89891: LD_VAR 0 8
89895: ARRAY
89896: PPUSH
89897: CALL_OW 247
89901: PUSH
89902: LD_INT 3
89904: EQUAL
89905: IFFALSE 90014
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
89907: LD_VAR 0 14
89911: PUSH
89912: LD_VAR 0 8
89916: ARRAY
89917: PUSH
89918: LD_VAR 0 28
89922: IN
89923: NOT
89924: PUSH
89925: LD_VAR 0 14
89929: PUSH
89930: LD_VAR 0 8
89934: ARRAY
89935: PPUSH
89936: CALL_OW 313
89940: AND
89941: IFFALSE 90014
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
89943: LD_VAR 0 4
89947: PUSH
89948: LD_VAR 0 7
89952: ARRAY
89953: PPUSH
89954: LD_VAR 0 14
89958: PUSH
89959: LD_VAR 0 8
89963: ARRAY
89964: PPUSH
89965: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
89969: LD_ADDR_VAR 0 28
89973: PUSH
89974: LD_VAR 0 28
89978: PPUSH
89979: LD_VAR 0 28
89983: PUSH
89984: LD_INT 1
89986: PLUS
89987: PPUSH
89988: LD_VAR 0 14
89992: PUSH
89993: LD_VAR 0 8
89997: ARRAY
89998: PPUSH
89999: CALL_OW 1
90003: ST_TO_ADDR
// attacking := true ;
90004: LD_ADDR_VAR 0 29
90008: PUSH
90009: LD_INT 1
90011: ST_TO_ADDR
// break ;
90012: GO 90016
// end ; end ;
90014: GO 89883
90016: POP
90017: POP
// if not attacking and f_attack_depot then
90018: LD_VAR 0 29
90022: NOT
90023: PUSH
90024: LD_VAR 0 25
90028: AND
90029: IFFALSE 90124
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
90031: LD_ADDR_VAR 0 13
90035: PUSH
90036: LD_VAR 0 14
90040: PPUSH
90041: LD_INT 2
90043: PUSH
90044: LD_INT 30
90046: PUSH
90047: LD_INT 0
90049: PUSH
90050: EMPTY
90051: LIST
90052: LIST
90053: PUSH
90054: LD_INT 30
90056: PUSH
90057: LD_INT 1
90059: PUSH
90060: EMPTY
90061: LIST
90062: LIST
90063: PUSH
90064: EMPTY
90065: LIST
90066: LIST
90067: LIST
90068: PPUSH
90069: CALL_OW 72
90073: ST_TO_ADDR
// if z then
90074: LD_VAR 0 13
90078: IFFALSE 90124
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
90080: LD_VAR 0 4
90084: PUSH
90085: LD_VAR 0 7
90089: ARRAY
90090: PPUSH
90091: LD_VAR 0 13
90095: PPUSH
90096: LD_VAR 0 4
90100: PUSH
90101: LD_VAR 0 7
90105: ARRAY
90106: PPUSH
90107: CALL_OW 74
90111: PPUSH
90112: CALL_OW 115
// attacking := true ;
90116: LD_ADDR_VAR 0 29
90120: PUSH
90121: LD_INT 1
90123: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
90124: LD_VAR 0 4
90128: PUSH
90129: LD_VAR 0 7
90133: ARRAY
90134: PPUSH
90135: CALL_OW 256
90139: PUSH
90140: LD_INT 500
90142: LESS
90143: IFFALSE 90169
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
90145: LD_VAR 0 4
90149: PUSH
90150: LD_VAR 0 7
90154: ARRAY
90155: PPUSH
90156: LD_VAR 0 14
90160: PUSH
90161: LD_INT 1
90163: ARRAY
90164: PPUSH
90165: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
90169: LD_VAR 0 4
90173: PUSH
90174: LD_VAR 0 7
90178: ARRAY
90179: PPUSH
90180: CALL_OW 264
90184: PUSH
90185: LD_INT 49
90187: EQUAL
90188: IFFALSE 90309
// begin if not HasTask ( group [ i ] ) then
90190: LD_VAR 0 4
90194: PUSH
90195: LD_VAR 0 7
90199: ARRAY
90200: PPUSH
90201: CALL_OW 314
90205: NOT
90206: IFFALSE 90309
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
90208: LD_ADDR_VAR 0 9
90212: PUSH
90213: LD_INT 81
90215: PUSH
90216: LD_VAR 0 4
90220: PUSH
90221: LD_VAR 0 7
90225: ARRAY
90226: PPUSH
90227: CALL_OW 255
90231: PUSH
90232: EMPTY
90233: LIST
90234: LIST
90235: PPUSH
90236: CALL_OW 69
90240: PPUSH
90241: LD_VAR 0 4
90245: PUSH
90246: LD_VAR 0 7
90250: ARRAY
90251: PPUSH
90252: CALL_OW 74
90256: ST_TO_ADDR
// if k then
90257: LD_VAR 0 9
90261: IFFALSE 90309
// if GetDistUnits ( group [ i ] , k ) > 10 then
90263: LD_VAR 0 4
90267: PUSH
90268: LD_VAR 0 7
90272: ARRAY
90273: PPUSH
90274: LD_VAR 0 9
90278: PPUSH
90279: CALL_OW 296
90283: PUSH
90284: LD_INT 10
90286: GREATER
90287: IFFALSE 90309
// ComMoveUnit ( group [ i ] , k ) ;
90289: LD_VAR 0 4
90293: PUSH
90294: LD_VAR 0 7
90298: ARRAY
90299: PPUSH
90300: LD_VAR 0 9
90304: PPUSH
90305: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
90309: LD_VAR 0 4
90313: PUSH
90314: LD_VAR 0 7
90318: ARRAY
90319: PPUSH
90320: CALL_OW 256
90324: PUSH
90325: LD_INT 250
90327: LESS
90328: PUSH
90329: LD_VAR 0 4
90333: PUSH
90334: LD_VAR 0 7
90338: ARRAY
90339: PUSH
90340: LD_INT 21
90342: PUSH
90343: LD_INT 2
90345: PUSH
90346: EMPTY
90347: LIST
90348: LIST
90349: PUSH
90350: LD_INT 23
90352: PUSH
90353: LD_INT 2
90355: PUSH
90356: EMPTY
90357: LIST
90358: LIST
90359: PUSH
90360: EMPTY
90361: LIST
90362: LIST
90363: PPUSH
90364: CALL_OW 69
90368: IN
90369: AND
90370: IFFALSE 90495
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
90372: LD_ADDR_VAR 0 9
90376: PUSH
90377: LD_OWVAR 3
90381: PUSH
90382: LD_VAR 0 4
90386: PUSH
90387: LD_VAR 0 7
90391: ARRAY
90392: DIFF
90393: PPUSH
90394: LD_VAR 0 4
90398: PUSH
90399: LD_VAR 0 7
90403: ARRAY
90404: PPUSH
90405: CALL_OW 74
90409: ST_TO_ADDR
// if not k then
90410: LD_VAR 0 9
90414: NOT
90415: IFFALSE 90419
// continue ;
90417: GO 86834
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
90419: LD_VAR 0 9
90423: PUSH
90424: LD_INT 81
90426: PUSH
90427: LD_VAR 0 4
90431: PUSH
90432: LD_VAR 0 7
90436: ARRAY
90437: PPUSH
90438: CALL_OW 255
90442: PUSH
90443: EMPTY
90444: LIST
90445: LIST
90446: PPUSH
90447: CALL_OW 69
90451: IN
90452: PUSH
90453: LD_VAR 0 9
90457: PPUSH
90458: LD_VAR 0 4
90462: PUSH
90463: LD_VAR 0 7
90467: ARRAY
90468: PPUSH
90469: CALL_OW 296
90473: PUSH
90474: LD_INT 5
90476: LESS
90477: AND
90478: IFFALSE 90495
// ComAutodestruct ( group [ i ] ) ;
90480: LD_VAR 0 4
90484: PUSH
90485: LD_VAR 0 7
90489: ARRAY
90490: PPUSH
90491: CALL 84929 0 1
// end ; if f_attack_depot then
90495: LD_VAR 0 25
90499: IFFALSE 90611
// begin k := 6 ;
90501: LD_ADDR_VAR 0 9
90505: PUSH
90506: LD_INT 6
90508: ST_TO_ADDR
// if tmp < k then
90509: LD_VAR 0 14
90513: PUSH
90514: LD_VAR 0 9
90518: LESS
90519: IFFALSE 90531
// k := tmp ;
90521: LD_ADDR_VAR 0 9
90525: PUSH
90526: LD_VAR 0 14
90530: ST_TO_ADDR
// for j = 1 to k do
90531: LD_ADDR_VAR 0 8
90535: PUSH
90536: DOUBLE
90537: LD_INT 1
90539: DEC
90540: ST_TO_ADDR
90541: LD_VAR 0 9
90545: PUSH
90546: FOR_TO
90547: IFFALSE 90609
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
90549: LD_VAR 0 8
90553: PPUSH
90554: CALL_OW 266
90558: PUSH
90559: LD_INT 0
90561: PUSH
90562: LD_INT 1
90564: PUSH
90565: EMPTY
90566: LIST
90567: LIST
90568: IN
90569: IFFALSE 90607
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
90571: LD_VAR 0 4
90575: PUSH
90576: LD_VAR 0 7
90580: ARRAY
90581: PPUSH
90582: LD_VAR 0 14
90586: PUSH
90587: LD_VAR 0 8
90591: ARRAY
90592: PPUSH
90593: CALL_OW 115
// attacking := true ;
90597: LD_ADDR_VAR 0 29
90601: PUSH
90602: LD_INT 1
90604: ST_TO_ADDR
// break ;
90605: GO 90609
// end ;
90607: GO 90546
90609: POP
90610: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
90611: LD_VAR 0 4
90615: PUSH
90616: LD_VAR 0 7
90620: ARRAY
90621: PPUSH
90622: CALL_OW 302
90626: PUSH
90627: LD_VAR 0 29
90631: NOT
90632: AND
90633: IFFALSE 90955
// begin if GetTag ( group [ i ] ) = 71 then
90635: LD_VAR 0 4
90639: PUSH
90640: LD_VAR 0 7
90644: ARRAY
90645: PPUSH
90646: CALL_OW 110
90650: PUSH
90651: LD_INT 71
90653: EQUAL
90654: IFFALSE 90695
// begin if HasTask ( group [ i ] ) then
90656: LD_VAR 0 4
90660: PUSH
90661: LD_VAR 0 7
90665: ARRAY
90666: PPUSH
90667: CALL_OW 314
90671: IFFALSE 90677
// continue else
90673: GO 86834
90675: GO 90695
// SetTag ( group [ i ] , 0 ) ;
90677: LD_VAR 0 4
90681: PUSH
90682: LD_VAR 0 7
90686: ARRAY
90687: PPUSH
90688: LD_INT 0
90690: PPUSH
90691: CALL_OW 109
// end ; k := 8 ;
90695: LD_ADDR_VAR 0 9
90699: PUSH
90700: LD_INT 8
90702: ST_TO_ADDR
// x := 0 ;
90703: LD_ADDR_VAR 0 10
90707: PUSH
90708: LD_INT 0
90710: ST_TO_ADDR
// if tmp < k then
90711: LD_VAR 0 14
90715: PUSH
90716: LD_VAR 0 9
90720: LESS
90721: IFFALSE 90733
// k := tmp ;
90723: LD_ADDR_VAR 0 9
90727: PUSH
90728: LD_VAR 0 14
90732: ST_TO_ADDR
// for j = 1 to k do
90733: LD_ADDR_VAR 0 8
90737: PUSH
90738: DOUBLE
90739: LD_INT 1
90741: DEC
90742: ST_TO_ADDR
90743: LD_VAR 0 9
90747: PUSH
90748: FOR_TO
90749: IFFALSE 90847
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
90751: LD_VAR 0 14
90755: PUSH
90756: LD_VAR 0 8
90760: ARRAY
90761: PPUSH
90762: CALL_OW 247
90766: PUSH
90767: LD_INT 1
90769: EQUAL
90770: PUSH
90771: LD_VAR 0 14
90775: PUSH
90776: LD_VAR 0 8
90780: ARRAY
90781: PPUSH
90782: CALL_OW 256
90786: PUSH
90787: LD_INT 250
90789: LESS
90790: PUSH
90791: LD_VAR 0 20
90795: AND
90796: PUSH
90797: LD_VAR 0 20
90801: NOT
90802: PUSH
90803: LD_VAR 0 14
90807: PUSH
90808: LD_VAR 0 8
90812: ARRAY
90813: PPUSH
90814: CALL_OW 256
90818: PUSH
90819: LD_INT 250
90821: GREATEREQUAL
90822: AND
90823: OR
90824: AND
90825: IFFALSE 90845
// begin x := tmp [ j ] ;
90827: LD_ADDR_VAR 0 10
90831: PUSH
90832: LD_VAR 0 14
90836: PUSH
90837: LD_VAR 0 8
90841: ARRAY
90842: ST_TO_ADDR
// break ;
90843: GO 90847
// end ;
90845: GO 90748
90847: POP
90848: POP
// if x then
90849: LD_VAR 0 10
90853: IFFALSE 90877
// ComAttackUnit ( group [ i ] , x ) else
90855: LD_VAR 0 4
90859: PUSH
90860: LD_VAR 0 7
90864: ARRAY
90865: PPUSH
90866: LD_VAR 0 10
90870: PPUSH
90871: CALL_OW 115
90875: GO 90901
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
90877: LD_VAR 0 4
90881: PUSH
90882: LD_VAR 0 7
90886: ARRAY
90887: PPUSH
90888: LD_VAR 0 14
90892: PUSH
90893: LD_INT 1
90895: ARRAY
90896: PPUSH
90897: CALL_OW 115
// if not HasTask ( group [ i ] ) then
90901: LD_VAR 0 4
90905: PUSH
90906: LD_VAR 0 7
90910: ARRAY
90911: PPUSH
90912: CALL_OW 314
90916: NOT
90917: IFFALSE 90955
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
90919: LD_VAR 0 4
90923: PUSH
90924: LD_VAR 0 7
90928: ARRAY
90929: PPUSH
90930: LD_VAR 0 14
90934: PPUSH
90935: LD_VAR 0 4
90939: PUSH
90940: LD_VAR 0 7
90944: ARRAY
90945: PPUSH
90946: CALL_OW 74
90950: PPUSH
90951: CALL_OW 115
// end ; end ; end ;
90955: GO 86834
90957: POP
90958: POP
// wait ( 0 0$2 ) ;
90959: LD_INT 70
90961: PPUSH
90962: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
90966: LD_VAR 0 4
90970: NOT
90971: PUSH
90972: LD_VAR 0 4
90976: PUSH
90977: EMPTY
90978: EQUAL
90979: OR
90980: PUSH
90981: LD_INT 81
90983: PUSH
90984: LD_VAR 0 35
90988: PUSH
90989: EMPTY
90990: LIST
90991: LIST
90992: PPUSH
90993: CALL_OW 69
90997: NOT
90998: OR
90999: IFFALSE 86819
// end ;
91001: LD_VAR 0 2
91005: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
91006: LD_INT 0
91008: PPUSH
91009: PPUSH
91010: PPUSH
91011: PPUSH
// if not base_units then
91012: LD_VAR 0 1
91016: NOT
91017: IFFALSE 91021
// exit ;
91019: GO 91108
// result := false ;
91021: LD_ADDR_VAR 0 2
91025: PUSH
91026: LD_INT 0
91028: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
91029: LD_ADDR_VAR 0 5
91033: PUSH
91034: LD_VAR 0 1
91038: PPUSH
91039: LD_INT 21
91041: PUSH
91042: LD_INT 3
91044: PUSH
91045: EMPTY
91046: LIST
91047: LIST
91048: PPUSH
91049: CALL_OW 72
91053: ST_TO_ADDR
// if not tmp then
91054: LD_VAR 0 5
91058: NOT
91059: IFFALSE 91063
// exit ;
91061: GO 91108
// for i in tmp do
91063: LD_ADDR_VAR 0 3
91067: PUSH
91068: LD_VAR 0 5
91072: PUSH
91073: FOR_IN
91074: IFFALSE 91106
// begin result := EnemyInRange ( i , 22 ) ;
91076: LD_ADDR_VAR 0 2
91080: PUSH
91081: LD_VAR 0 3
91085: PPUSH
91086: LD_INT 22
91088: PPUSH
91089: CALL 84635 0 2
91093: ST_TO_ADDR
// if result then
91094: LD_VAR 0 2
91098: IFFALSE 91104
// exit ;
91100: POP
91101: POP
91102: GO 91108
// end ;
91104: GO 91073
91106: POP
91107: POP
// end ;
91108: LD_VAR 0 2
91112: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
91113: LD_INT 0
91115: PPUSH
91116: PPUSH
// if not units then
91117: LD_VAR 0 1
91121: NOT
91122: IFFALSE 91126
// exit ;
91124: GO 91196
// result := [ ] ;
91126: LD_ADDR_VAR 0 3
91130: PUSH
91131: EMPTY
91132: ST_TO_ADDR
// for i in units do
91133: LD_ADDR_VAR 0 4
91137: PUSH
91138: LD_VAR 0 1
91142: PUSH
91143: FOR_IN
91144: IFFALSE 91194
// if GetTag ( i ) = tag then
91146: LD_VAR 0 4
91150: PPUSH
91151: CALL_OW 110
91155: PUSH
91156: LD_VAR 0 2
91160: EQUAL
91161: IFFALSE 91192
// result := Insert ( result , result + 1 , i ) ;
91163: LD_ADDR_VAR 0 3
91167: PUSH
91168: LD_VAR 0 3
91172: PPUSH
91173: LD_VAR 0 3
91177: PUSH
91178: LD_INT 1
91180: PLUS
91181: PPUSH
91182: LD_VAR 0 4
91186: PPUSH
91187: CALL_OW 2
91191: ST_TO_ADDR
91192: GO 91143
91194: POP
91195: POP
// end ;
91196: LD_VAR 0 3
91200: RET
// export function IsDriver ( un ) ; begin
91201: LD_INT 0
91203: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
91204: LD_ADDR_VAR 0 2
91208: PUSH
91209: LD_VAR 0 1
91213: PUSH
91214: LD_INT 55
91216: PUSH
91217: EMPTY
91218: LIST
91219: PPUSH
91220: CALL_OW 69
91224: IN
91225: ST_TO_ADDR
// end ;
91226: LD_VAR 0 2
91230: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
91231: LD_INT 0
91233: PPUSH
91234: PPUSH
// list := [ ] ;
91235: LD_ADDR_VAR 0 5
91239: PUSH
91240: EMPTY
91241: ST_TO_ADDR
// case d of 0 :
91242: LD_VAR 0 3
91246: PUSH
91247: LD_INT 0
91249: DOUBLE
91250: EQUAL
91251: IFTRUE 91255
91253: GO 91388
91255: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
91256: LD_ADDR_VAR 0 5
91260: PUSH
91261: LD_VAR 0 1
91265: PUSH
91266: LD_INT 4
91268: MINUS
91269: PUSH
91270: LD_VAR 0 2
91274: PUSH
91275: LD_INT 4
91277: MINUS
91278: PUSH
91279: LD_INT 2
91281: PUSH
91282: EMPTY
91283: LIST
91284: LIST
91285: LIST
91286: PUSH
91287: LD_VAR 0 1
91291: PUSH
91292: LD_INT 3
91294: MINUS
91295: PUSH
91296: LD_VAR 0 2
91300: PUSH
91301: LD_INT 1
91303: PUSH
91304: EMPTY
91305: LIST
91306: LIST
91307: LIST
91308: PUSH
91309: LD_VAR 0 1
91313: PUSH
91314: LD_INT 4
91316: PLUS
91317: PUSH
91318: LD_VAR 0 2
91322: PUSH
91323: LD_INT 4
91325: PUSH
91326: EMPTY
91327: LIST
91328: LIST
91329: LIST
91330: PUSH
91331: LD_VAR 0 1
91335: PUSH
91336: LD_INT 3
91338: PLUS
91339: PUSH
91340: LD_VAR 0 2
91344: PUSH
91345: LD_INT 3
91347: PLUS
91348: PUSH
91349: LD_INT 5
91351: PUSH
91352: EMPTY
91353: LIST
91354: LIST
91355: LIST
91356: PUSH
91357: LD_VAR 0 1
91361: PUSH
91362: LD_VAR 0 2
91366: PUSH
91367: LD_INT 4
91369: PLUS
91370: PUSH
91371: LD_INT 0
91373: PUSH
91374: EMPTY
91375: LIST
91376: LIST
91377: LIST
91378: PUSH
91379: EMPTY
91380: LIST
91381: LIST
91382: LIST
91383: LIST
91384: LIST
91385: ST_TO_ADDR
// end ; 1 :
91386: GO 92086
91388: LD_INT 1
91390: DOUBLE
91391: EQUAL
91392: IFTRUE 91396
91394: GO 91529
91396: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
91397: LD_ADDR_VAR 0 5
91401: PUSH
91402: LD_VAR 0 1
91406: PUSH
91407: LD_VAR 0 2
91411: PUSH
91412: LD_INT 4
91414: MINUS
91415: PUSH
91416: LD_INT 3
91418: PUSH
91419: EMPTY
91420: LIST
91421: LIST
91422: LIST
91423: PUSH
91424: LD_VAR 0 1
91428: PUSH
91429: LD_INT 3
91431: MINUS
91432: PUSH
91433: LD_VAR 0 2
91437: PUSH
91438: LD_INT 3
91440: MINUS
91441: PUSH
91442: LD_INT 2
91444: PUSH
91445: EMPTY
91446: LIST
91447: LIST
91448: LIST
91449: PUSH
91450: LD_VAR 0 1
91454: PUSH
91455: LD_INT 4
91457: MINUS
91458: PUSH
91459: LD_VAR 0 2
91463: PUSH
91464: LD_INT 1
91466: PUSH
91467: EMPTY
91468: LIST
91469: LIST
91470: LIST
91471: PUSH
91472: LD_VAR 0 1
91476: PUSH
91477: LD_VAR 0 2
91481: PUSH
91482: LD_INT 3
91484: PLUS
91485: PUSH
91486: LD_INT 0
91488: PUSH
91489: EMPTY
91490: LIST
91491: LIST
91492: LIST
91493: PUSH
91494: LD_VAR 0 1
91498: PUSH
91499: LD_INT 4
91501: PLUS
91502: PUSH
91503: LD_VAR 0 2
91507: PUSH
91508: LD_INT 4
91510: PLUS
91511: PUSH
91512: LD_INT 5
91514: PUSH
91515: EMPTY
91516: LIST
91517: LIST
91518: LIST
91519: PUSH
91520: EMPTY
91521: LIST
91522: LIST
91523: LIST
91524: LIST
91525: LIST
91526: ST_TO_ADDR
// end ; 2 :
91527: GO 92086
91529: LD_INT 2
91531: DOUBLE
91532: EQUAL
91533: IFTRUE 91537
91535: GO 91666
91537: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
91538: LD_ADDR_VAR 0 5
91542: PUSH
91543: LD_VAR 0 1
91547: PUSH
91548: LD_VAR 0 2
91552: PUSH
91553: LD_INT 3
91555: MINUS
91556: PUSH
91557: LD_INT 3
91559: PUSH
91560: EMPTY
91561: LIST
91562: LIST
91563: LIST
91564: PUSH
91565: LD_VAR 0 1
91569: PUSH
91570: LD_INT 4
91572: PLUS
91573: PUSH
91574: LD_VAR 0 2
91578: PUSH
91579: LD_INT 4
91581: PUSH
91582: EMPTY
91583: LIST
91584: LIST
91585: LIST
91586: PUSH
91587: LD_VAR 0 1
91591: PUSH
91592: LD_VAR 0 2
91596: PUSH
91597: LD_INT 4
91599: PLUS
91600: PUSH
91601: LD_INT 0
91603: PUSH
91604: EMPTY
91605: LIST
91606: LIST
91607: LIST
91608: PUSH
91609: LD_VAR 0 1
91613: PUSH
91614: LD_INT 3
91616: MINUS
91617: PUSH
91618: LD_VAR 0 2
91622: PUSH
91623: LD_INT 1
91625: PUSH
91626: EMPTY
91627: LIST
91628: LIST
91629: LIST
91630: PUSH
91631: LD_VAR 0 1
91635: PUSH
91636: LD_INT 4
91638: MINUS
91639: PUSH
91640: LD_VAR 0 2
91644: PUSH
91645: LD_INT 4
91647: MINUS
91648: PUSH
91649: LD_INT 2
91651: PUSH
91652: EMPTY
91653: LIST
91654: LIST
91655: LIST
91656: PUSH
91657: EMPTY
91658: LIST
91659: LIST
91660: LIST
91661: LIST
91662: LIST
91663: ST_TO_ADDR
// end ; 3 :
91664: GO 92086
91666: LD_INT 3
91668: DOUBLE
91669: EQUAL
91670: IFTRUE 91674
91672: GO 91807
91674: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
91675: LD_ADDR_VAR 0 5
91679: PUSH
91680: LD_VAR 0 1
91684: PUSH
91685: LD_INT 3
91687: PLUS
91688: PUSH
91689: LD_VAR 0 2
91693: PUSH
91694: LD_INT 4
91696: PUSH
91697: EMPTY
91698: LIST
91699: LIST
91700: LIST
91701: PUSH
91702: LD_VAR 0 1
91706: PUSH
91707: LD_INT 4
91709: PLUS
91710: PUSH
91711: LD_VAR 0 2
91715: PUSH
91716: LD_INT 4
91718: PLUS
91719: PUSH
91720: LD_INT 5
91722: PUSH
91723: EMPTY
91724: LIST
91725: LIST
91726: LIST
91727: PUSH
91728: LD_VAR 0 1
91732: PUSH
91733: LD_INT 4
91735: MINUS
91736: PUSH
91737: LD_VAR 0 2
91741: PUSH
91742: LD_INT 1
91744: PUSH
91745: EMPTY
91746: LIST
91747: LIST
91748: LIST
91749: PUSH
91750: LD_VAR 0 1
91754: PUSH
91755: LD_VAR 0 2
91759: PUSH
91760: LD_INT 4
91762: MINUS
91763: PUSH
91764: LD_INT 3
91766: PUSH
91767: EMPTY
91768: LIST
91769: LIST
91770: LIST
91771: PUSH
91772: LD_VAR 0 1
91776: PUSH
91777: LD_INT 3
91779: MINUS
91780: PUSH
91781: LD_VAR 0 2
91785: PUSH
91786: LD_INT 3
91788: MINUS
91789: PUSH
91790: LD_INT 2
91792: PUSH
91793: EMPTY
91794: LIST
91795: LIST
91796: LIST
91797: PUSH
91798: EMPTY
91799: LIST
91800: LIST
91801: LIST
91802: LIST
91803: LIST
91804: ST_TO_ADDR
// end ; 4 :
91805: GO 92086
91807: LD_INT 4
91809: DOUBLE
91810: EQUAL
91811: IFTRUE 91815
91813: GO 91948
91815: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
91816: LD_ADDR_VAR 0 5
91820: PUSH
91821: LD_VAR 0 1
91825: PUSH
91826: LD_VAR 0 2
91830: PUSH
91831: LD_INT 4
91833: PLUS
91834: PUSH
91835: LD_INT 0
91837: PUSH
91838: EMPTY
91839: LIST
91840: LIST
91841: LIST
91842: PUSH
91843: LD_VAR 0 1
91847: PUSH
91848: LD_INT 3
91850: PLUS
91851: PUSH
91852: LD_VAR 0 2
91856: PUSH
91857: LD_INT 3
91859: PLUS
91860: PUSH
91861: LD_INT 5
91863: PUSH
91864: EMPTY
91865: LIST
91866: LIST
91867: LIST
91868: PUSH
91869: LD_VAR 0 1
91873: PUSH
91874: LD_INT 4
91876: PLUS
91877: PUSH
91878: LD_VAR 0 2
91882: PUSH
91883: LD_INT 4
91885: PUSH
91886: EMPTY
91887: LIST
91888: LIST
91889: LIST
91890: PUSH
91891: LD_VAR 0 1
91895: PUSH
91896: LD_VAR 0 2
91900: PUSH
91901: LD_INT 3
91903: MINUS
91904: PUSH
91905: LD_INT 3
91907: PUSH
91908: EMPTY
91909: LIST
91910: LIST
91911: LIST
91912: PUSH
91913: LD_VAR 0 1
91917: PUSH
91918: LD_INT 4
91920: MINUS
91921: PUSH
91922: LD_VAR 0 2
91926: PUSH
91927: LD_INT 4
91929: MINUS
91930: PUSH
91931: LD_INT 2
91933: PUSH
91934: EMPTY
91935: LIST
91936: LIST
91937: LIST
91938: PUSH
91939: EMPTY
91940: LIST
91941: LIST
91942: LIST
91943: LIST
91944: LIST
91945: ST_TO_ADDR
// end ; 5 :
91946: GO 92086
91948: LD_INT 5
91950: DOUBLE
91951: EQUAL
91952: IFTRUE 91956
91954: GO 92085
91956: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
91957: LD_ADDR_VAR 0 5
91961: PUSH
91962: LD_VAR 0 1
91966: PUSH
91967: LD_INT 4
91969: MINUS
91970: PUSH
91971: LD_VAR 0 2
91975: PUSH
91976: LD_INT 1
91978: PUSH
91979: EMPTY
91980: LIST
91981: LIST
91982: LIST
91983: PUSH
91984: LD_VAR 0 1
91988: PUSH
91989: LD_VAR 0 2
91993: PUSH
91994: LD_INT 4
91996: MINUS
91997: PUSH
91998: LD_INT 3
92000: PUSH
92001: EMPTY
92002: LIST
92003: LIST
92004: LIST
92005: PUSH
92006: LD_VAR 0 1
92010: PUSH
92011: LD_INT 4
92013: PLUS
92014: PUSH
92015: LD_VAR 0 2
92019: PUSH
92020: LD_INT 4
92022: PLUS
92023: PUSH
92024: LD_INT 5
92026: PUSH
92027: EMPTY
92028: LIST
92029: LIST
92030: LIST
92031: PUSH
92032: LD_VAR 0 1
92036: PUSH
92037: LD_INT 3
92039: PLUS
92040: PUSH
92041: LD_VAR 0 2
92045: PUSH
92046: LD_INT 4
92048: PUSH
92049: EMPTY
92050: LIST
92051: LIST
92052: LIST
92053: PUSH
92054: LD_VAR 0 1
92058: PUSH
92059: LD_VAR 0 2
92063: PUSH
92064: LD_INT 3
92066: PLUS
92067: PUSH
92068: LD_INT 0
92070: PUSH
92071: EMPTY
92072: LIST
92073: LIST
92074: LIST
92075: PUSH
92076: EMPTY
92077: LIST
92078: LIST
92079: LIST
92080: LIST
92081: LIST
92082: ST_TO_ADDR
// end ; end ;
92083: GO 92086
92085: POP
// result := list ;
92086: LD_ADDR_VAR 0 4
92090: PUSH
92091: LD_VAR 0 5
92095: ST_TO_ADDR
// end ;
92096: LD_VAR 0 4
92100: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
92101: LD_INT 0
92103: PPUSH
92104: PPUSH
92105: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
92106: LD_VAR 0 1
92110: NOT
92111: PUSH
92112: LD_VAR 0 2
92116: PUSH
92117: LD_INT 1
92119: PUSH
92120: LD_INT 2
92122: PUSH
92123: LD_INT 3
92125: PUSH
92126: LD_INT 4
92128: PUSH
92129: EMPTY
92130: LIST
92131: LIST
92132: LIST
92133: LIST
92134: IN
92135: NOT
92136: OR
92137: IFFALSE 92141
// exit ;
92139: GO 92233
// tmp := [ ] ;
92141: LD_ADDR_VAR 0 5
92145: PUSH
92146: EMPTY
92147: ST_TO_ADDR
// for i in units do
92148: LD_ADDR_VAR 0 4
92152: PUSH
92153: LD_VAR 0 1
92157: PUSH
92158: FOR_IN
92159: IFFALSE 92202
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
92161: LD_ADDR_VAR 0 5
92165: PUSH
92166: LD_VAR 0 5
92170: PPUSH
92171: LD_VAR 0 5
92175: PUSH
92176: LD_INT 1
92178: PLUS
92179: PPUSH
92180: LD_VAR 0 4
92184: PPUSH
92185: LD_VAR 0 2
92189: PPUSH
92190: CALL_OW 259
92194: PPUSH
92195: CALL_OW 2
92199: ST_TO_ADDR
92200: GO 92158
92202: POP
92203: POP
// if not tmp then
92204: LD_VAR 0 5
92208: NOT
92209: IFFALSE 92213
// exit ;
92211: GO 92233
// result := SortListByListDesc ( units , tmp ) ;
92213: LD_ADDR_VAR 0 3
92217: PUSH
92218: LD_VAR 0 1
92222: PPUSH
92223: LD_VAR 0 5
92227: PPUSH
92228: CALL_OW 77
92232: ST_TO_ADDR
// end ;
92233: LD_VAR 0 3
92237: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
92238: LD_INT 0
92240: PPUSH
92241: PPUSH
92242: PPUSH
// x := GetX ( building ) ;
92243: LD_ADDR_VAR 0 4
92247: PUSH
92248: LD_VAR 0 2
92252: PPUSH
92253: CALL_OW 250
92257: ST_TO_ADDR
// y := GetY ( building ) ;
92258: LD_ADDR_VAR 0 5
92262: PUSH
92263: LD_VAR 0 2
92267: PPUSH
92268: CALL_OW 251
92272: ST_TO_ADDR
// if GetTaskList ( unit ) then
92273: LD_VAR 0 1
92277: PPUSH
92278: CALL_OW 437
92282: IFFALSE 92377
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
92284: LD_STRING e
92286: PUSH
92287: LD_VAR 0 1
92291: PPUSH
92292: CALL_OW 437
92296: PUSH
92297: LD_INT 1
92299: ARRAY
92300: PUSH
92301: LD_INT 1
92303: ARRAY
92304: EQUAL
92305: PUSH
92306: LD_VAR 0 4
92310: PUSH
92311: LD_VAR 0 1
92315: PPUSH
92316: CALL_OW 437
92320: PUSH
92321: LD_INT 1
92323: ARRAY
92324: PUSH
92325: LD_INT 2
92327: ARRAY
92328: EQUAL
92329: AND
92330: PUSH
92331: LD_VAR 0 5
92335: PUSH
92336: LD_VAR 0 1
92340: PPUSH
92341: CALL_OW 437
92345: PUSH
92346: LD_INT 1
92348: ARRAY
92349: PUSH
92350: LD_INT 3
92352: ARRAY
92353: EQUAL
92354: AND
92355: IFFALSE 92367
// result := true else
92357: LD_ADDR_VAR 0 3
92361: PUSH
92362: LD_INT 1
92364: ST_TO_ADDR
92365: GO 92375
// result := false ;
92367: LD_ADDR_VAR 0 3
92371: PUSH
92372: LD_INT 0
92374: ST_TO_ADDR
// end else
92375: GO 92385
// result := false ;
92377: LD_ADDR_VAR 0 3
92381: PUSH
92382: LD_INT 0
92384: ST_TO_ADDR
// end ;
92385: LD_VAR 0 3
92389: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
92390: LD_INT 0
92392: PPUSH
92393: PPUSH
92394: PPUSH
92395: PPUSH
// if not unit or not area then
92396: LD_VAR 0 1
92400: NOT
92401: PUSH
92402: LD_VAR 0 2
92406: NOT
92407: OR
92408: IFFALSE 92412
// exit ;
92410: GO 92576
// tmp := AreaToList ( area , i ) ;
92412: LD_ADDR_VAR 0 6
92416: PUSH
92417: LD_VAR 0 2
92421: PPUSH
92422: LD_VAR 0 5
92426: PPUSH
92427: CALL_OW 517
92431: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
92432: LD_ADDR_VAR 0 5
92436: PUSH
92437: DOUBLE
92438: LD_INT 1
92440: DEC
92441: ST_TO_ADDR
92442: LD_VAR 0 6
92446: PUSH
92447: LD_INT 1
92449: ARRAY
92450: PUSH
92451: FOR_TO
92452: IFFALSE 92574
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
92454: LD_ADDR_VAR 0 7
92458: PUSH
92459: LD_VAR 0 6
92463: PUSH
92464: LD_INT 1
92466: ARRAY
92467: PUSH
92468: LD_VAR 0 5
92472: ARRAY
92473: PUSH
92474: LD_VAR 0 6
92478: PUSH
92479: LD_INT 2
92481: ARRAY
92482: PUSH
92483: LD_VAR 0 5
92487: ARRAY
92488: PUSH
92489: EMPTY
92490: LIST
92491: LIST
92492: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
92493: LD_VAR 0 7
92497: PUSH
92498: LD_INT 1
92500: ARRAY
92501: PPUSH
92502: LD_VAR 0 7
92506: PUSH
92507: LD_INT 2
92509: ARRAY
92510: PPUSH
92511: CALL_OW 428
92515: PUSH
92516: LD_INT 0
92518: EQUAL
92519: IFFALSE 92572
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
92521: LD_VAR 0 1
92525: PPUSH
92526: LD_VAR 0 7
92530: PUSH
92531: LD_INT 1
92533: ARRAY
92534: PPUSH
92535: LD_VAR 0 7
92539: PUSH
92540: LD_INT 2
92542: ARRAY
92543: PPUSH
92544: LD_VAR 0 3
92548: PPUSH
92549: CALL_OW 48
// result := IsPlaced ( unit ) ;
92553: LD_ADDR_VAR 0 4
92557: PUSH
92558: LD_VAR 0 1
92562: PPUSH
92563: CALL_OW 305
92567: ST_TO_ADDR
// exit ;
92568: POP
92569: POP
92570: GO 92576
// end ; end ;
92572: GO 92451
92574: POP
92575: POP
// end ;
92576: LD_VAR 0 4
92580: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
92581: LD_INT 0
92583: PPUSH
92584: PPUSH
92585: PPUSH
// if not side or side > 8 then
92586: LD_VAR 0 1
92590: NOT
92591: PUSH
92592: LD_VAR 0 1
92596: PUSH
92597: LD_INT 8
92599: GREATER
92600: OR
92601: IFFALSE 92605
// exit ;
92603: GO 92792
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
92605: LD_ADDR_VAR 0 4
92609: PUSH
92610: LD_INT 22
92612: PUSH
92613: LD_VAR 0 1
92617: PUSH
92618: EMPTY
92619: LIST
92620: LIST
92621: PUSH
92622: LD_INT 21
92624: PUSH
92625: LD_INT 3
92627: PUSH
92628: EMPTY
92629: LIST
92630: LIST
92631: PUSH
92632: EMPTY
92633: LIST
92634: LIST
92635: PPUSH
92636: CALL_OW 69
92640: ST_TO_ADDR
// if not tmp then
92641: LD_VAR 0 4
92645: NOT
92646: IFFALSE 92650
// exit ;
92648: GO 92792
// enable_addtolog := true ;
92650: LD_ADDR_OWVAR 81
92654: PUSH
92655: LD_INT 1
92657: ST_TO_ADDR
// AddToLog ( [ ) ;
92658: LD_STRING [
92660: PPUSH
92661: CALL_OW 561
// for i in tmp do
92665: LD_ADDR_VAR 0 3
92669: PUSH
92670: LD_VAR 0 4
92674: PUSH
92675: FOR_IN
92676: IFFALSE 92783
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
92678: LD_STRING [
92680: PUSH
92681: LD_VAR 0 3
92685: PPUSH
92686: CALL_OW 266
92690: STR
92691: PUSH
92692: LD_STRING , 
92694: STR
92695: PUSH
92696: LD_VAR 0 3
92700: PPUSH
92701: CALL_OW 250
92705: STR
92706: PUSH
92707: LD_STRING , 
92709: STR
92710: PUSH
92711: LD_VAR 0 3
92715: PPUSH
92716: CALL_OW 251
92720: STR
92721: PUSH
92722: LD_STRING , 
92724: STR
92725: PUSH
92726: LD_VAR 0 3
92730: PPUSH
92731: CALL_OW 254
92735: STR
92736: PUSH
92737: LD_STRING , 
92739: STR
92740: PUSH
92741: LD_VAR 0 3
92745: PPUSH
92746: LD_INT 1
92748: PPUSH
92749: CALL_OW 268
92753: STR
92754: PUSH
92755: LD_STRING , 
92757: STR
92758: PUSH
92759: LD_VAR 0 3
92763: PPUSH
92764: LD_INT 2
92766: PPUSH
92767: CALL_OW 268
92771: STR
92772: PUSH
92773: LD_STRING ],
92775: STR
92776: PPUSH
92777: CALL_OW 561
// end ;
92781: GO 92675
92783: POP
92784: POP
// AddToLog ( ]; ) ;
92785: LD_STRING ];
92787: PPUSH
92788: CALL_OW 561
// end ;
92792: LD_VAR 0 2
92796: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
92797: LD_INT 0
92799: PPUSH
92800: PPUSH
92801: PPUSH
92802: PPUSH
92803: PPUSH
// if not area or not rate or not max then
92804: LD_VAR 0 1
92808: NOT
92809: PUSH
92810: LD_VAR 0 2
92814: NOT
92815: OR
92816: PUSH
92817: LD_VAR 0 4
92821: NOT
92822: OR
92823: IFFALSE 92827
// exit ;
92825: GO 93019
// while 1 do
92827: LD_INT 1
92829: IFFALSE 93019
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
92831: LD_ADDR_VAR 0 9
92835: PUSH
92836: LD_VAR 0 1
92840: PPUSH
92841: LD_INT 1
92843: PPUSH
92844: CALL_OW 287
92848: PUSH
92849: LD_INT 10
92851: MUL
92852: ST_TO_ADDR
// r := rate / 10 ;
92853: LD_ADDR_VAR 0 7
92857: PUSH
92858: LD_VAR 0 2
92862: PUSH
92863: LD_INT 10
92865: DIVREAL
92866: ST_TO_ADDR
// time := 1 1$00 ;
92867: LD_ADDR_VAR 0 8
92871: PUSH
92872: LD_INT 2100
92874: ST_TO_ADDR
// if amount < min then
92875: LD_VAR 0 9
92879: PUSH
92880: LD_VAR 0 3
92884: LESS
92885: IFFALSE 92903
// r := r * 2 else
92887: LD_ADDR_VAR 0 7
92891: PUSH
92892: LD_VAR 0 7
92896: PUSH
92897: LD_INT 2
92899: MUL
92900: ST_TO_ADDR
92901: GO 92929
// if amount > max then
92903: LD_VAR 0 9
92907: PUSH
92908: LD_VAR 0 4
92912: GREATER
92913: IFFALSE 92929
// r := r / 2 ;
92915: LD_ADDR_VAR 0 7
92919: PUSH
92920: LD_VAR 0 7
92924: PUSH
92925: LD_INT 2
92927: DIVREAL
92928: ST_TO_ADDR
// time := time / r ;
92929: LD_ADDR_VAR 0 8
92933: PUSH
92934: LD_VAR 0 8
92938: PUSH
92939: LD_VAR 0 7
92943: DIVREAL
92944: ST_TO_ADDR
// if time < 0 then
92945: LD_VAR 0 8
92949: PUSH
92950: LD_INT 0
92952: LESS
92953: IFFALSE 92970
// time := time * - 1 ;
92955: LD_ADDR_VAR 0 8
92959: PUSH
92960: LD_VAR 0 8
92964: PUSH
92965: LD_INT 1
92967: NEG
92968: MUL
92969: ST_TO_ADDR
// wait ( time ) ;
92970: LD_VAR 0 8
92974: PPUSH
92975: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
92979: LD_INT 35
92981: PPUSH
92982: LD_INT 875
92984: PPUSH
92985: CALL_OW 12
92989: PPUSH
92990: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
92994: LD_INT 1
92996: PPUSH
92997: LD_INT 5
92999: PPUSH
93000: CALL_OW 12
93004: PPUSH
93005: LD_VAR 0 1
93009: PPUSH
93010: LD_INT 1
93012: PPUSH
93013: CALL_OW 55
// end ;
93017: GO 92827
// end ;
93019: LD_VAR 0 5
93023: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
93024: LD_INT 0
93026: PPUSH
93027: PPUSH
93028: PPUSH
93029: PPUSH
93030: PPUSH
93031: PPUSH
93032: PPUSH
93033: PPUSH
// if not turrets or not factories then
93034: LD_VAR 0 1
93038: NOT
93039: PUSH
93040: LD_VAR 0 2
93044: NOT
93045: OR
93046: IFFALSE 93050
// exit ;
93048: GO 93357
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
93050: LD_ADDR_VAR 0 10
93054: PUSH
93055: LD_INT 5
93057: PUSH
93058: LD_INT 6
93060: PUSH
93061: EMPTY
93062: LIST
93063: LIST
93064: PUSH
93065: LD_INT 2
93067: PUSH
93068: LD_INT 4
93070: PUSH
93071: EMPTY
93072: LIST
93073: LIST
93074: PUSH
93075: LD_INT 3
93077: PUSH
93078: LD_INT 5
93080: PUSH
93081: EMPTY
93082: LIST
93083: LIST
93084: PUSH
93085: EMPTY
93086: LIST
93087: LIST
93088: LIST
93089: PUSH
93090: LD_INT 24
93092: PUSH
93093: LD_INT 25
93095: PUSH
93096: EMPTY
93097: LIST
93098: LIST
93099: PUSH
93100: LD_INT 23
93102: PUSH
93103: LD_INT 27
93105: PUSH
93106: EMPTY
93107: LIST
93108: LIST
93109: PUSH
93110: EMPTY
93111: LIST
93112: LIST
93113: PUSH
93114: LD_INT 42
93116: PUSH
93117: LD_INT 43
93119: PUSH
93120: EMPTY
93121: LIST
93122: LIST
93123: PUSH
93124: LD_INT 44
93126: PUSH
93127: LD_INT 46
93129: PUSH
93130: EMPTY
93131: LIST
93132: LIST
93133: PUSH
93134: LD_INT 45
93136: PUSH
93137: LD_INT 47
93139: PUSH
93140: EMPTY
93141: LIST
93142: LIST
93143: PUSH
93144: EMPTY
93145: LIST
93146: LIST
93147: LIST
93148: PUSH
93149: EMPTY
93150: LIST
93151: LIST
93152: LIST
93153: ST_TO_ADDR
// result := [ ] ;
93154: LD_ADDR_VAR 0 3
93158: PUSH
93159: EMPTY
93160: ST_TO_ADDR
// for i in turrets do
93161: LD_ADDR_VAR 0 4
93165: PUSH
93166: LD_VAR 0 1
93170: PUSH
93171: FOR_IN
93172: IFFALSE 93355
// begin nat := GetNation ( i ) ;
93174: LD_ADDR_VAR 0 7
93178: PUSH
93179: LD_VAR 0 4
93183: PPUSH
93184: CALL_OW 248
93188: ST_TO_ADDR
// weapon := 0 ;
93189: LD_ADDR_VAR 0 8
93193: PUSH
93194: LD_INT 0
93196: ST_TO_ADDR
// if not nat then
93197: LD_VAR 0 7
93201: NOT
93202: IFFALSE 93206
// continue ;
93204: GO 93171
// for j in list [ nat ] do
93206: LD_ADDR_VAR 0 5
93210: PUSH
93211: LD_VAR 0 10
93215: PUSH
93216: LD_VAR 0 7
93220: ARRAY
93221: PUSH
93222: FOR_IN
93223: IFFALSE 93264
// if GetBWeapon ( i ) = j [ 1 ] then
93225: LD_VAR 0 4
93229: PPUSH
93230: CALL_OW 269
93234: PUSH
93235: LD_VAR 0 5
93239: PUSH
93240: LD_INT 1
93242: ARRAY
93243: EQUAL
93244: IFFALSE 93262
// begin weapon := j [ 2 ] ;
93246: LD_ADDR_VAR 0 8
93250: PUSH
93251: LD_VAR 0 5
93255: PUSH
93256: LD_INT 2
93258: ARRAY
93259: ST_TO_ADDR
// break ;
93260: GO 93264
// end ;
93262: GO 93222
93264: POP
93265: POP
// if not weapon then
93266: LD_VAR 0 8
93270: NOT
93271: IFFALSE 93275
// continue ;
93273: GO 93171
// for k in factories do
93275: LD_ADDR_VAR 0 6
93279: PUSH
93280: LD_VAR 0 2
93284: PUSH
93285: FOR_IN
93286: IFFALSE 93351
// begin weapons := AvailableWeaponList ( k ) ;
93288: LD_ADDR_VAR 0 9
93292: PUSH
93293: LD_VAR 0 6
93297: PPUSH
93298: CALL_OW 478
93302: ST_TO_ADDR
// if not weapons then
93303: LD_VAR 0 9
93307: NOT
93308: IFFALSE 93312
// continue ;
93310: GO 93285
// if weapon in weapons then
93312: LD_VAR 0 8
93316: PUSH
93317: LD_VAR 0 9
93321: IN
93322: IFFALSE 93349
// begin result := [ i , weapon ] ;
93324: LD_ADDR_VAR 0 3
93328: PUSH
93329: LD_VAR 0 4
93333: PUSH
93334: LD_VAR 0 8
93338: PUSH
93339: EMPTY
93340: LIST
93341: LIST
93342: ST_TO_ADDR
// exit ;
93343: POP
93344: POP
93345: POP
93346: POP
93347: GO 93357
// end ; end ;
93349: GO 93285
93351: POP
93352: POP
// end ;
93353: GO 93171
93355: POP
93356: POP
// end ;
93357: LD_VAR 0 3
93361: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
93362: LD_INT 0
93364: PPUSH
// if not side or side > 8 then
93365: LD_VAR 0 3
93369: NOT
93370: PUSH
93371: LD_VAR 0 3
93375: PUSH
93376: LD_INT 8
93378: GREATER
93379: OR
93380: IFFALSE 93384
// exit ;
93382: GO 93443
// if not range then
93384: LD_VAR 0 4
93388: NOT
93389: IFFALSE 93400
// range := - 12 ;
93391: LD_ADDR_VAR 0 4
93395: PUSH
93396: LD_INT 12
93398: NEG
93399: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
93400: LD_VAR 0 1
93404: PPUSH
93405: LD_VAR 0 2
93409: PPUSH
93410: LD_VAR 0 3
93414: PPUSH
93415: LD_VAR 0 4
93419: PPUSH
93420: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
93424: LD_VAR 0 1
93428: PPUSH
93429: LD_VAR 0 2
93433: PPUSH
93434: LD_VAR 0 3
93438: PPUSH
93439: CALL_OW 331
// end ;
93443: LD_VAR 0 5
93447: RET
// export function Video ( mode ) ; begin
93448: LD_INT 0
93450: PPUSH
// ingame_video = mode ;
93451: LD_ADDR_OWVAR 52
93455: PUSH
93456: LD_VAR 0 1
93460: ST_TO_ADDR
// interface_hidden = mode ;
93461: LD_ADDR_OWVAR 54
93465: PUSH
93466: LD_VAR 0 1
93470: ST_TO_ADDR
// end ;
93471: LD_VAR 0 2
93475: RET
// export function Join ( array , element ) ; begin
93476: LD_INT 0
93478: PPUSH
// result := array ^ element ;
93479: LD_ADDR_VAR 0 3
93483: PUSH
93484: LD_VAR 0 1
93488: PUSH
93489: LD_VAR 0 2
93493: ADD
93494: ST_TO_ADDR
// end ;
93495: LD_VAR 0 3
93499: RET
// export function JoinUnion ( array , element ) ; begin
93500: LD_INT 0
93502: PPUSH
// result := array union element ;
93503: LD_ADDR_VAR 0 3
93507: PUSH
93508: LD_VAR 0 1
93512: PUSH
93513: LD_VAR 0 2
93517: UNION
93518: ST_TO_ADDR
// end ;
93519: LD_VAR 0 3
93523: RET
// export function GetBehemoths ( side ) ; begin
93524: LD_INT 0
93526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
93527: LD_ADDR_VAR 0 2
93531: PUSH
93532: LD_INT 22
93534: PUSH
93535: LD_VAR 0 1
93539: PUSH
93540: EMPTY
93541: LIST
93542: LIST
93543: PUSH
93544: LD_INT 31
93546: PUSH
93547: LD_INT 25
93549: PUSH
93550: EMPTY
93551: LIST
93552: LIST
93553: PUSH
93554: EMPTY
93555: LIST
93556: LIST
93557: PPUSH
93558: CALL_OW 69
93562: ST_TO_ADDR
// end ;
93563: LD_VAR 0 2
93567: RET
// export function Shuffle ( array ) ; var i , index ; begin
93568: LD_INT 0
93570: PPUSH
93571: PPUSH
93572: PPUSH
// result := [ ] ;
93573: LD_ADDR_VAR 0 2
93577: PUSH
93578: EMPTY
93579: ST_TO_ADDR
// if not array then
93580: LD_VAR 0 1
93584: NOT
93585: IFFALSE 93589
// exit ;
93587: GO 93688
// Randomize ;
93589: CALL_OW 10
// for i = array downto 1 do
93593: LD_ADDR_VAR 0 3
93597: PUSH
93598: DOUBLE
93599: LD_VAR 0 1
93603: INC
93604: ST_TO_ADDR
93605: LD_INT 1
93607: PUSH
93608: FOR_DOWNTO
93609: IFFALSE 93686
// begin index := rand ( 1 , array ) ;
93611: LD_ADDR_VAR 0 4
93615: PUSH
93616: LD_INT 1
93618: PPUSH
93619: LD_VAR 0 1
93623: PPUSH
93624: CALL_OW 12
93628: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
93629: LD_ADDR_VAR 0 2
93633: PUSH
93634: LD_VAR 0 2
93638: PPUSH
93639: LD_VAR 0 2
93643: PUSH
93644: LD_INT 1
93646: PLUS
93647: PPUSH
93648: LD_VAR 0 1
93652: PUSH
93653: LD_VAR 0 4
93657: ARRAY
93658: PPUSH
93659: CALL_OW 2
93663: ST_TO_ADDR
// array := Delete ( array , index ) ;
93664: LD_ADDR_VAR 0 1
93668: PUSH
93669: LD_VAR 0 1
93673: PPUSH
93674: LD_VAR 0 4
93678: PPUSH
93679: CALL_OW 3
93683: ST_TO_ADDR
// end ;
93684: GO 93608
93686: POP
93687: POP
// end ;
93688: LD_VAR 0 2
93692: RET
// export function GetBaseMaterials ( base ) ; begin
93693: LD_INT 0
93695: PPUSH
// result := [ 0 , 0 , 0 ] ;
93696: LD_ADDR_VAR 0 2
93700: PUSH
93701: LD_INT 0
93703: PUSH
93704: LD_INT 0
93706: PUSH
93707: LD_INT 0
93709: PUSH
93710: EMPTY
93711: LIST
93712: LIST
93713: LIST
93714: ST_TO_ADDR
// if not base then
93715: LD_VAR 0 1
93719: NOT
93720: IFFALSE 93724
// exit ;
93722: GO 93773
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
93724: LD_ADDR_VAR 0 2
93728: PUSH
93729: LD_VAR 0 1
93733: PPUSH
93734: LD_INT 1
93736: PPUSH
93737: CALL_OW 275
93741: PUSH
93742: LD_VAR 0 1
93746: PPUSH
93747: LD_INT 2
93749: PPUSH
93750: CALL_OW 275
93754: PUSH
93755: LD_VAR 0 1
93759: PPUSH
93760: LD_INT 3
93762: PPUSH
93763: CALL_OW 275
93767: PUSH
93768: EMPTY
93769: LIST
93770: LIST
93771: LIST
93772: ST_TO_ADDR
// end ; end_of_file end_of_file
93773: LD_VAR 0 2
93777: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
93778: GO 93780
93780: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
93781: LD_STRING initStreamRollete();
93783: PPUSH
93784: CALL_OW 559
// InitStreamMode ;
93788: CALL 93797 0 0
// DefineStreamItems ( ) ;
93792: CALL 94237 0 0
// end ;
93796: END
// function InitStreamMode ; begin
93797: LD_INT 0
93799: PPUSH
// streamModeActive := false ;
93800: LD_ADDR_EXP 122
93804: PUSH
93805: LD_INT 0
93807: ST_TO_ADDR
// normalCounter := 36 ;
93808: LD_ADDR_EXP 123
93812: PUSH
93813: LD_INT 36
93815: ST_TO_ADDR
// hardcoreCounter := 16 ;
93816: LD_ADDR_EXP 124
93820: PUSH
93821: LD_INT 16
93823: ST_TO_ADDR
// sRocket := false ;
93824: LD_ADDR_EXP 127
93828: PUSH
93829: LD_INT 0
93831: ST_TO_ADDR
// sSpeed := false ;
93832: LD_ADDR_EXP 126
93836: PUSH
93837: LD_INT 0
93839: ST_TO_ADDR
// sEngine := false ;
93840: LD_ADDR_EXP 128
93844: PUSH
93845: LD_INT 0
93847: ST_TO_ADDR
// sSpec := false ;
93848: LD_ADDR_EXP 125
93852: PUSH
93853: LD_INT 0
93855: ST_TO_ADDR
// sLevel := false ;
93856: LD_ADDR_EXP 129
93860: PUSH
93861: LD_INT 0
93863: ST_TO_ADDR
// sArmoury := false ;
93864: LD_ADDR_EXP 130
93868: PUSH
93869: LD_INT 0
93871: ST_TO_ADDR
// sRadar := false ;
93872: LD_ADDR_EXP 131
93876: PUSH
93877: LD_INT 0
93879: ST_TO_ADDR
// sBunker := false ;
93880: LD_ADDR_EXP 132
93884: PUSH
93885: LD_INT 0
93887: ST_TO_ADDR
// sHack := false ;
93888: LD_ADDR_EXP 133
93892: PUSH
93893: LD_INT 0
93895: ST_TO_ADDR
// sFire := false ;
93896: LD_ADDR_EXP 134
93900: PUSH
93901: LD_INT 0
93903: ST_TO_ADDR
// sRefresh := false ;
93904: LD_ADDR_EXP 135
93908: PUSH
93909: LD_INT 0
93911: ST_TO_ADDR
// sExp := false ;
93912: LD_ADDR_EXP 136
93916: PUSH
93917: LD_INT 0
93919: ST_TO_ADDR
// sDepot := false ;
93920: LD_ADDR_EXP 137
93924: PUSH
93925: LD_INT 0
93927: ST_TO_ADDR
// sFlag := false ;
93928: LD_ADDR_EXP 138
93932: PUSH
93933: LD_INT 0
93935: ST_TO_ADDR
// sKamikadze := false ;
93936: LD_ADDR_EXP 146
93940: PUSH
93941: LD_INT 0
93943: ST_TO_ADDR
// sTroll := false ;
93944: LD_ADDR_EXP 147
93948: PUSH
93949: LD_INT 0
93951: ST_TO_ADDR
// sSlow := false ;
93952: LD_ADDR_EXP 148
93956: PUSH
93957: LD_INT 0
93959: ST_TO_ADDR
// sLack := false ;
93960: LD_ADDR_EXP 149
93964: PUSH
93965: LD_INT 0
93967: ST_TO_ADDR
// sTank := false ;
93968: LD_ADDR_EXP 151
93972: PUSH
93973: LD_INT 0
93975: ST_TO_ADDR
// sRemote := false ;
93976: LD_ADDR_EXP 152
93980: PUSH
93981: LD_INT 0
93983: ST_TO_ADDR
// sPowell := false ;
93984: LD_ADDR_EXP 153
93988: PUSH
93989: LD_INT 0
93991: ST_TO_ADDR
// sTeleport := false ;
93992: LD_ADDR_EXP 156
93996: PUSH
93997: LD_INT 0
93999: ST_TO_ADDR
// sOilTower := false ;
94000: LD_ADDR_EXP 158
94004: PUSH
94005: LD_INT 0
94007: ST_TO_ADDR
// sShovel := false ;
94008: LD_ADDR_EXP 159
94012: PUSH
94013: LD_INT 0
94015: ST_TO_ADDR
// sSheik := false ;
94016: LD_ADDR_EXP 160
94020: PUSH
94021: LD_INT 0
94023: ST_TO_ADDR
// sEarthquake := false ;
94024: LD_ADDR_EXP 162
94028: PUSH
94029: LD_INT 0
94031: ST_TO_ADDR
// sAI := false ;
94032: LD_ADDR_EXP 163
94036: PUSH
94037: LD_INT 0
94039: ST_TO_ADDR
// sCargo := false ;
94040: LD_ADDR_EXP 166
94044: PUSH
94045: LD_INT 0
94047: ST_TO_ADDR
// sDLaser := false ;
94048: LD_ADDR_EXP 167
94052: PUSH
94053: LD_INT 0
94055: ST_TO_ADDR
// sExchange := false ;
94056: LD_ADDR_EXP 168
94060: PUSH
94061: LD_INT 0
94063: ST_TO_ADDR
// sFac := false ;
94064: LD_ADDR_EXP 169
94068: PUSH
94069: LD_INT 0
94071: ST_TO_ADDR
// sPower := false ;
94072: LD_ADDR_EXP 170
94076: PUSH
94077: LD_INT 0
94079: ST_TO_ADDR
// sRandom := false ;
94080: LD_ADDR_EXP 171
94084: PUSH
94085: LD_INT 0
94087: ST_TO_ADDR
// sShield := false ;
94088: LD_ADDR_EXP 172
94092: PUSH
94093: LD_INT 0
94095: ST_TO_ADDR
// sTime := false ;
94096: LD_ADDR_EXP 173
94100: PUSH
94101: LD_INT 0
94103: ST_TO_ADDR
// sTools := false ;
94104: LD_ADDR_EXP 174
94108: PUSH
94109: LD_INT 0
94111: ST_TO_ADDR
// sSold := false ;
94112: LD_ADDR_EXP 139
94116: PUSH
94117: LD_INT 0
94119: ST_TO_ADDR
// sDiff := false ;
94120: LD_ADDR_EXP 140
94124: PUSH
94125: LD_INT 0
94127: ST_TO_ADDR
// sFog := false ;
94128: LD_ADDR_EXP 143
94132: PUSH
94133: LD_INT 0
94135: ST_TO_ADDR
// sReset := false ;
94136: LD_ADDR_EXP 144
94140: PUSH
94141: LD_INT 0
94143: ST_TO_ADDR
// sSun := false ;
94144: LD_ADDR_EXP 145
94148: PUSH
94149: LD_INT 0
94151: ST_TO_ADDR
// sTiger := false ;
94152: LD_ADDR_EXP 141
94156: PUSH
94157: LD_INT 0
94159: ST_TO_ADDR
// sBomb := false ;
94160: LD_ADDR_EXP 142
94164: PUSH
94165: LD_INT 0
94167: ST_TO_ADDR
// sWound := false ;
94168: LD_ADDR_EXP 150
94172: PUSH
94173: LD_INT 0
94175: ST_TO_ADDR
// sBetray := false ;
94176: LD_ADDR_EXP 154
94180: PUSH
94181: LD_INT 0
94183: ST_TO_ADDR
// sContamin := false ;
94184: LD_ADDR_EXP 155
94188: PUSH
94189: LD_INT 0
94191: ST_TO_ADDR
// sOil := false ;
94192: LD_ADDR_EXP 157
94196: PUSH
94197: LD_INT 0
94199: ST_TO_ADDR
// sStu := false ;
94200: LD_ADDR_EXP 161
94204: PUSH
94205: LD_INT 0
94207: ST_TO_ADDR
// sBazooka := false ;
94208: LD_ADDR_EXP 164
94212: PUSH
94213: LD_INT 0
94215: ST_TO_ADDR
// sMortar := false ;
94216: LD_ADDR_EXP 165
94220: PUSH
94221: LD_INT 0
94223: ST_TO_ADDR
// sRanger := false ;
94224: LD_ADDR_EXP 175
94228: PUSH
94229: LD_INT 0
94231: ST_TO_ADDR
// end ;
94232: LD_VAR 0 1
94236: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
94237: LD_INT 0
94239: PPUSH
94240: PPUSH
94241: PPUSH
94242: PPUSH
94243: PPUSH
// result := [ ] ;
94244: LD_ADDR_VAR 0 1
94248: PUSH
94249: EMPTY
94250: ST_TO_ADDR
// if campaign_id = 1 then
94251: LD_OWVAR 69
94255: PUSH
94256: LD_INT 1
94258: EQUAL
94259: IFFALSE 97197
// begin case mission_number of 1 :
94261: LD_OWVAR 70
94265: PUSH
94266: LD_INT 1
94268: DOUBLE
94269: EQUAL
94270: IFTRUE 94274
94272: GO 94338
94274: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
94275: LD_ADDR_VAR 0 1
94279: PUSH
94280: LD_INT 2
94282: PUSH
94283: LD_INT 4
94285: PUSH
94286: LD_INT 11
94288: PUSH
94289: LD_INT 12
94291: PUSH
94292: LD_INT 15
94294: PUSH
94295: LD_INT 16
94297: PUSH
94298: LD_INT 22
94300: PUSH
94301: LD_INT 23
94303: PUSH
94304: LD_INT 26
94306: PUSH
94307: EMPTY
94308: LIST
94309: LIST
94310: LIST
94311: LIST
94312: LIST
94313: LIST
94314: LIST
94315: LIST
94316: LIST
94317: PUSH
94318: LD_INT 101
94320: PUSH
94321: LD_INT 102
94323: PUSH
94324: LD_INT 106
94326: PUSH
94327: EMPTY
94328: LIST
94329: LIST
94330: LIST
94331: PUSH
94332: EMPTY
94333: LIST
94334: LIST
94335: ST_TO_ADDR
94336: GO 97195
94338: LD_INT 2
94340: DOUBLE
94341: EQUAL
94342: IFTRUE 94346
94344: GO 94418
94346: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
94347: LD_ADDR_VAR 0 1
94351: PUSH
94352: LD_INT 2
94354: PUSH
94355: LD_INT 4
94357: PUSH
94358: LD_INT 11
94360: PUSH
94361: LD_INT 12
94363: PUSH
94364: LD_INT 15
94366: PUSH
94367: LD_INT 16
94369: PUSH
94370: LD_INT 22
94372: PUSH
94373: LD_INT 23
94375: PUSH
94376: LD_INT 26
94378: PUSH
94379: EMPTY
94380: LIST
94381: LIST
94382: LIST
94383: LIST
94384: LIST
94385: LIST
94386: LIST
94387: LIST
94388: LIST
94389: PUSH
94390: LD_INT 101
94392: PUSH
94393: LD_INT 102
94395: PUSH
94396: LD_INT 105
94398: PUSH
94399: LD_INT 106
94401: PUSH
94402: LD_INT 108
94404: PUSH
94405: EMPTY
94406: LIST
94407: LIST
94408: LIST
94409: LIST
94410: LIST
94411: PUSH
94412: EMPTY
94413: LIST
94414: LIST
94415: ST_TO_ADDR
94416: GO 97195
94418: LD_INT 3
94420: DOUBLE
94421: EQUAL
94422: IFTRUE 94426
94424: GO 94502
94426: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
94427: LD_ADDR_VAR 0 1
94431: PUSH
94432: LD_INT 2
94434: PUSH
94435: LD_INT 4
94437: PUSH
94438: LD_INT 5
94440: PUSH
94441: LD_INT 11
94443: PUSH
94444: LD_INT 12
94446: PUSH
94447: LD_INT 15
94449: PUSH
94450: LD_INT 16
94452: PUSH
94453: LD_INT 22
94455: PUSH
94456: LD_INT 26
94458: PUSH
94459: LD_INT 36
94461: PUSH
94462: EMPTY
94463: LIST
94464: LIST
94465: LIST
94466: LIST
94467: LIST
94468: LIST
94469: LIST
94470: LIST
94471: LIST
94472: LIST
94473: PUSH
94474: LD_INT 101
94476: PUSH
94477: LD_INT 102
94479: PUSH
94480: LD_INT 105
94482: PUSH
94483: LD_INT 106
94485: PUSH
94486: LD_INT 108
94488: PUSH
94489: EMPTY
94490: LIST
94491: LIST
94492: LIST
94493: LIST
94494: LIST
94495: PUSH
94496: EMPTY
94497: LIST
94498: LIST
94499: ST_TO_ADDR
94500: GO 97195
94502: LD_INT 4
94504: DOUBLE
94505: EQUAL
94506: IFTRUE 94510
94508: GO 94594
94510: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
94511: LD_ADDR_VAR 0 1
94515: PUSH
94516: LD_INT 2
94518: PUSH
94519: LD_INT 4
94521: PUSH
94522: LD_INT 5
94524: PUSH
94525: LD_INT 8
94527: PUSH
94528: LD_INT 11
94530: PUSH
94531: LD_INT 12
94533: PUSH
94534: LD_INT 15
94536: PUSH
94537: LD_INT 16
94539: PUSH
94540: LD_INT 22
94542: PUSH
94543: LD_INT 23
94545: PUSH
94546: LD_INT 26
94548: PUSH
94549: LD_INT 36
94551: PUSH
94552: EMPTY
94553: LIST
94554: LIST
94555: LIST
94556: LIST
94557: LIST
94558: LIST
94559: LIST
94560: LIST
94561: LIST
94562: LIST
94563: LIST
94564: LIST
94565: PUSH
94566: LD_INT 101
94568: PUSH
94569: LD_INT 102
94571: PUSH
94572: LD_INT 105
94574: PUSH
94575: LD_INT 106
94577: PUSH
94578: LD_INT 108
94580: PUSH
94581: EMPTY
94582: LIST
94583: LIST
94584: LIST
94585: LIST
94586: LIST
94587: PUSH
94588: EMPTY
94589: LIST
94590: LIST
94591: ST_TO_ADDR
94592: GO 97195
94594: LD_INT 5
94596: DOUBLE
94597: EQUAL
94598: IFTRUE 94602
94600: GO 94702
94602: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
94603: LD_ADDR_VAR 0 1
94607: PUSH
94608: LD_INT 2
94610: PUSH
94611: LD_INT 4
94613: PUSH
94614: LD_INT 5
94616: PUSH
94617: LD_INT 6
94619: PUSH
94620: LD_INT 8
94622: PUSH
94623: LD_INT 11
94625: PUSH
94626: LD_INT 12
94628: PUSH
94629: LD_INT 15
94631: PUSH
94632: LD_INT 16
94634: PUSH
94635: LD_INT 22
94637: PUSH
94638: LD_INT 23
94640: PUSH
94641: LD_INT 25
94643: PUSH
94644: LD_INT 26
94646: PUSH
94647: LD_INT 36
94649: PUSH
94650: EMPTY
94651: LIST
94652: LIST
94653: LIST
94654: LIST
94655: LIST
94656: LIST
94657: LIST
94658: LIST
94659: LIST
94660: LIST
94661: LIST
94662: LIST
94663: LIST
94664: LIST
94665: PUSH
94666: LD_INT 101
94668: PUSH
94669: LD_INT 102
94671: PUSH
94672: LD_INT 105
94674: PUSH
94675: LD_INT 106
94677: PUSH
94678: LD_INT 108
94680: PUSH
94681: LD_INT 109
94683: PUSH
94684: LD_INT 112
94686: PUSH
94687: EMPTY
94688: LIST
94689: LIST
94690: LIST
94691: LIST
94692: LIST
94693: LIST
94694: LIST
94695: PUSH
94696: EMPTY
94697: LIST
94698: LIST
94699: ST_TO_ADDR
94700: GO 97195
94702: LD_INT 6
94704: DOUBLE
94705: EQUAL
94706: IFTRUE 94710
94708: GO 94830
94710: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
94711: LD_ADDR_VAR 0 1
94715: PUSH
94716: LD_INT 2
94718: PUSH
94719: LD_INT 4
94721: PUSH
94722: LD_INT 5
94724: PUSH
94725: LD_INT 6
94727: PUSH
94728: LD_INT 8
94730: PUSH
94731: LD_INT 11
94733: PUSH
94734: LD_INT 12
94736: PUSH
94737: LD_INT 15
94739: PUSH
94740: LD_INT 16
94742: PUSH
94743: LD_INT 20
94745: PUSH
94746: LD_INT 21
94748: PUSH
94749: LD_INT 22
94751: PUSH
94752: LD_INT 23
94754: PUSH
94755: LD_INT 25
94757: PUSH
94758: LD_INT 26
94760: PUSH
94761: LD_INT 30
94763: PUSH
94764: LD_INT 31
94766: PUSH
94767: LD_INT 32
94769: PUSH
94770: LD_INT 36
94772: PUSH
94773: EMPTY
94774: LIST
94775: LIST
94776: LIST
94777: LIST
94778: LIST
94779: LIST
94780: LIST
94781: LIST
94782: LIST
94783: LIST
94784: LIST
94785: LIST
94786: LIST
94787: LIST
94788: LIST
94789: LIST
94790: LIST
94791: LIST
94792: LIST
94793: PUSH
94794: LD_INT 101
94796: PUSH
94797: LD_INT 102
94799: PUSH
94800: LD_INT 105
94802: PUSH
94803: LD_INT 106
94805: PUSH
94806: LD_INT 108
94808: PUSH
94809: LD_INT 109
94811: PUSH
94812: LD_INT 112
94814: PUSH
94815: EMPTY
94816: LIST
94817: LIST
94818: LIST
94819: LIST
94820: LIST
94821: LIST
94822: LIST
94823: PUSH
94824: EMPTY
94825: LIST
94826: LIST
94827: ST_TO_ADDR
94828: GO 97195
94830: LD_INT 7
94832: DOUBLE
94833: EQUAL
94834: IFTRUE 94838
94836: GO 94938
94838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
94839: LD_ADDR_VAR 0 1
94843: PUSH
94844: LD_INT 2
94846: PUSH
94847: LD_INT 4
94849: PUSH
94850: LD_INT 5
94852: PUSH
94853: LD_INT 7
94855: PUSH
94856: LD_INT 11
94858: PUSH
94859: LD_INT 12
94861: PUSH
94862: LD_INT 15
94864: PUSH
94865: LD_INT 16
94867: PUSH
94868: LD_INT 20
94870: PUSH
94871: LD_INT 21
94873: PUSH
94874: LD_INT 22
94876: PUSH
94877: LD_INT 23
94879: PUSH
94880: LD_INT 25
94882: PUSH
94883: LD_INT 26
94885: PUSH
94886: EMPTY
94887: LIST
94888: LIST
94889: LIST
94890: LIST
94891: LIST
94892: LIST
94893: LIST
94894: LIST
94895: LIST
94896: LIST
94897: LIST
94898: LIST
94899: LIST
94900: LIST
94901: PUSH
94902: LD_INT 101
94904: PUSH
94905: LD_INT 102
94907: PUSH
94908: LD_INT 103
94910: PUSH
94911: LD_INT 105
94913: PUSH
94914: LD_INT 106
94916: PUSH
94917: LD_INT 108
94919: PUSH
94920: LD_INT 112
94922: PUSH
94923: EMPTY
94924: LIST
94925: LIST
94926: LIST
94927: LIST
94928: LIST
94929: LIST
94930: LIST
94931: PUSH
94932: EMPTY
94933: LIST
94934: LIST
94935: ST_TO_ADDR
94936: GO 97195
94938: LD_INT 8
94940: DOUBLE
94941: EQUAL
94942: IFTRUE 94946
94944: GO 95074
94946: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
94947: LD_ADDR_VAR 0 1
94951: PUSH
94952: LD_INT 2
94954: PUSH
94955: LD_INT 4
94957: PUSH
94958: LD_INT 5
94960: PUSH
94961: LD_INT 6
94963: PUSH
94964: LD_INT 7
94966: PUSH
94967: LD_INT 8
94969: PUSH
94970: LD_INT 11
94972: PUSH
94973: LD_INT 12
94975: PUSH
94976: LD_INT 15
94978: PUSH
94979: LD_INT 16
94981: PUSH
94982: LD_INT 20
94984: PUSH
94985: LD_INT 21
94987: PUSH
94988: LD_INT 22
94990: PUSH
94991: LD_INT 23
94993: PUSH
94994: LD_INT 25
94996: PUSH
94997: LD_INT 26
94999: PUSH
95000: LD_INT 30
95002: PUSH
95003: LD_INT 31
95005: PUSH
95006: LD_INT 32
95008: PUSH
95009: LD_INT 36
95011: PUSH
95012: EMPTY
95013: LIST
95014: LIST
95015: LIST
95016: LIST
95017: LIST
95018: LIST
95019: LIST
95020: LIST
95021: LIST
95022: LIST
95023: LIST
95024: LIST
95025: LIST
95026: LIST
95027: LIST
95028: LIST
95029: LIST
95030: LIST
95031: LIST
95032: LIST
95033: PUSH
95034: LD_INT 101
95036: PUSH
95037: LD_INT 102
95039: PUSH
95040: LD_INT 103
95042: PUSH
95043: LD_INT 105
95045: PUSH
95046: LD_INT 106
95048: PUSH
95049: LD_INT 108
95051: PUSH
95052: LD_INT 109
95054: PUSH
95055: LD_INT 112
95057: PUSH
95058: EMPTY
95059: LIST
95060: LIST
95061: LIST
95062: LIST
95063: LIST
95064: LIST
95065: LIST
95066: LIST
95067: PUSH
95068: EMPTY
95069: LIST
95070: LIST
95071: ST_TO_ADDR
95072: GO 97195
95074: LD_INT 9
95076: DOUBLE
95077: EQUAL
95078: IFTRUE 95082
95080: GO 95218
95082: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
95083: LD_ADDR_VAR 0 1
95087: PUSH
95088: LD_INT 2
95090: PUSH
95091: LD_INT 4
95093: PUSH
95094: LD_INT 5
95096: PUSH
95097: LD_INT 6
95099: PUSH
95100: LD_INT 7
95102: PUSH
95103: LD_INT 8
95105: PUSH
95106: LD_INT 11
95108: PUSH
95109: LD_INT 12
95111: PUSH
95112: LD_INT 15
95114: PUSH
95115: LD_INT 16
95117: PUSH
95118: LD_INT 20
95120: PUSH
95121: LD_INT 21
95123: PUSH
95124: LD_INT 22
95126: PUSH
95127: LD_INT 23
95129: PUSH
95130: LD_INT 25
95132: PUSH
95133: LD_INT 26
95135: PUSH
95136: LD_INT 28
95138: PUSH
95139: LD_INT 30
95141: PUSH
95142: LD_INT 31
95144: PUSH
95145: LD_INT 32
95147: PUSH
95148: LD_INT 36
95150: PUSH
95151: EMPTY
95152: LIST
95153: LIST
95154: LIST
95155: LIST
95156: LIST
95157: LIST
95158: LIST
95159: LIST
95160: LIST
95161: LIST
95162: LIST
95163: LIST
95164: LIST
95165: LIST
95166: LIST
95167: LIST
95168: LIST
95169: LIST
95170: LIST
95171: LIST
95172: LIST
95173: PUSH
95174: LD_INT 101
95176: PUSH
95177: LD_INT 102
95179: PUSH
95180: LD_INT 103
95182: PUSH
95183: LD_INT 105
95185: PUSH
95186: LD_INT 106
95188: PUSH
95189: LD_INT 108
95191: PUSH
95192: LD_INT 109
95194: PUSH
95195: LD_INT 112
95197: PUSH
95198: LD_INT 114
95200: PUSH
95201: EMPTY
95202: LIST
95203: LIST
95204: LIST
95205: LIST
95206: LIST
95207: LIST
95208: LIST
95209: LIST
95210: LIST
95211: PUSH
95212: EMPTY
95213: LIST
95214: LIST
95215: ST_TO_ADDR
95216: GO 97195
95218: LD_INT 10
95220: DOUBLE
95221: EQUAL
95222: IFTRUE 95226
95224: GO 95410
95226: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
95227: LD_ADDR_VAR 0 1
95231: PUSH
95232: LD_INT 2
95234: PUSH
95235: LD_INT 4
95237: PUSH
95238: LD_INT 5
95240: PUSH
95241: LD_INT 6
95243: PUSH
95244: LD_INT 7
95246: PUSH
95247: LD_INT 8
95249: PUSH
95250: LD_INT 9
95252: PUSH
95253: LD_INT 10
95255: PUSH
95256: LD_INT 11
95258: PUSH
95259: LD_INT 12
95261: PUSH
95262: LD_INT 13
95264: PUSH
95265: LD_INT 14
95267: PUSH
95268: LD_INT 15
95270: PUSH
95271: LD_INT 16
95273: PUSH
95274: LD_INT 17
95276: PUSH
95277: LD_INT 18
95279: PUSH
95280: LD_INT 19
95282: PUSH
95283: LD_INT 20
95285: PUSH
95286: LD_INT 21
95288: PUSH
95289: LD_INT 22
95291: PUSH
95292: LD_INT 23
95294: PUSH
95295: LD_INT 24
95297: PUSH
95298: LD_INT 25
95300: PUSH
95301: LD_INT 26
95303: PUSH
95304: LD_INT 28
95306: PUSH
95307: LD_INT 30
95309: PUSH
95310: LD_INT 31
95312: PUSH
95313: LD_INT 32
95315: PUSH
95316: LD_INT 36
95318: PUSH
95319: EMPTY
95320: LIST
95321: LIST
95322: LIST
95323: LIST
95324: LIST
95325: LIST
95326: LIST
95327: LIST
95328: LIST
95329: LIST
95330: LIST
95331: LIST
95332: LIST
95333: LIST
95334: LIST
95335: LIST
95336: LIST
95337: LIST
95338: LIST
95339: LIST
95340: LIST
95341: LIST
95342: LIST
95343: LIST
95344: LIST
95345: LIST
95346: LIST
95347: LIST
95348: LIST
95349: PUSH
95350: LD_INT 101
95352: PUSH
95353: LD_INT 102
95355: PUSH
95356: LD_INT 103
95358: PUSH
95359: LD_INT 104
95361: PUSH
95362: LD_INT 105
95364: PUSH
95365: LD_INT 106
95367: PUSH
95368: LD_INT 107
95370: PUSH
95371: LD_INT 108
95373: PUSH
95374: LD_INT 109
95376: PUSH
95377: LD_INT 110
95379: PUSH
95380: LD_INT 111
95382: PUSH
95383: LD_INT 112
95385: PUSH
95386: LD_INT 114
95388: PUSH
95389: EMPTY
95390: LIST
95391: LIST
95392: LIST
95393: LIST
95394: LIST
95395: LIST
95396: LIST
95397: LIST
95398: LIST
95399: LIST
95400: LIST
95401: LIST
95402: LIST
95403: PUSH
95404: EMPTY
95405: LIST
95406: LIST
95407: ST_TO_ADDR
95408: GO 97195
95410: LD_INT 11
95412: DOUBLE
95413: EQUAL
95414: IFTRUE 95418
95416: GO 95610
95418: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
95419: LD_ADDR_VAR 0 1
95423: PUSH
95424: LD_INT 2
95426: PUSH
95427: LD_INT 3
95429: PUSH
95430: LD_INT 4
95432: PUSH
95433: LD_INT 5
95435: PUSH
95436: LD_INT 6
95438: PUSH
95439: LD_INT 7
95441: PUSH
95442: LD_INT 8
95444: PUSH
95445: LD_INT 9
95447: PUSH
95448: LD_INT 10
95450: PUSH
95451: LD_INT 11
95453: PUSH
95454: LD_INT 12
95456: PUSH
95457: LD_INT 13
95459: PUSH
95460: LD_INT 14
95462: PUSH
95463: LD_INT 15
95465: PUSH
95466: LD_INT 16
95468: PUSH
95469: LD_INT 17
95471: PUSH
95472: LD_INT 18
95474: PUSH
95475: LD_INT 19
95477: PUSH
95478: LD_INT 20
95480: PUSH
95481: LD_INT 21
95483: PUSH
95484: LD_INT 22
95486: PUSH
95487: LD_INT 23
95489: PUSH
95490: LD_INT 24
95492: PUSH
95493: LD_INT 25
95495: PUSH
95496: LD_INT 26
95498: PUSH
95499: LD_INT 28
95501: PUSH
95502: LD_INT 30
95504: PUSH
95505: LD_INT 31
95507: PUSH
95508: LD_INT 32
95510: PUSH
95511: LD_INT 34
95513: PUSH
95514: LD_INT 36
95516: PUSH
95517: EMPTY
95518: LIST
95519: LIST
95520: LIST
95521: LIST
95522: LIST
95523: LIST
95524: LIST
95525: LIST
95526: LIST
95527: LIST
95528: LIST
95529: LIST
95530: LIST
95531: LIST
95532: LIST
95533: LIST
95534: LIST
95535: LIST
95536: LIST
95537: LIST
95538: LIST
95539: LIST
95540: LIST
95541: LIST
95542: LIST
95543: LIST
95544: LIST
95545: LIST
95546: LIST
95547: LIST
95548: LIST
95549: PUSH
95550: LD_INT 101
95552: PUSH
95553: LD_INT 102
95555: PUSH
95556: LD_INT 103
95558: PUSH
95559: LD_INT 104
95561: PUSH
95562: LD_INT 105
95564: PUSH
95565: LD_INT 106
95567: PUSH
95568: LD_INT 107
95570: PUSH
95571: LD_INT 108
95573: PUSH
95574: LD_INT 109
95576: PUSH
95577: LD_INT 110
95579: PUSH
95580: LD_INT 111
95582: PUSH
95583: LD_INT 112
95585: PUSH
95586: LD_INT 114
95588: PUSH
95589: EMPTY
95590: LIST
95591: LIST
95592: LIST
95593: LIST
95594: LIST
95595: LIST
95596: LIST
95597: LIST
95598: LIST
95599: LIST
95600: LIST
95601: LIST
95602: LIST
95603: PUSH
95604: EMPTY
95605: LIST
95606: LIST
95607: ST_TO_ADDR
95608: GO 97195
95610: LD_INT 12
95612: DOUBLE
95613: EQUAL
95614: IFTRUE 95618
95616: GO 95826
95618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
95619: LD_ADDR_VAR 0 1
95623: PUSH
95624: LD_INT 1
95626: PUSH
95627: LD_INT 2
95629: PUSH
95630: LD_INT 3
95632: PUSH
95633: LD_INT 4
95635: PUSH
95636: LD_INT 5
95638: PUSH
95639: LD_INT 6
95641: PUSH
95642: LD_INT 7
95644: PUSH
95645: LD_INT 8
95647: PUSH
95648: LD_INT 9
95650: PUSH
95651: LD_INT 10
95653: PUSH
95654: LD_INT 11
95656: PUSH
95657: LD_INT 12
95659: PUSH
95660: LD_INT 13
95662: PUSH
95663: LD_INT 14
95665: PUSH
95666: LD_INT 15
95668: PUSH
95669: LD_INT 16
95671: PUSH
95672: LD_INT 17
95674: PUSH
95675: LD_INT 18
95677: PUSH
95678: LD_INT 19
95680: PUSH
95681: LD_INT 20
95683: PUSH
95684: LD_INT 21
95686: PUSH
95687: LD_INT 22
95689: PUSH
95690: LD_INT 23
95692: PUSH
95693: LD_INT 24
95695: PUSH
95696: LD_INT 25
95698: PUSH
95699: LD_INT 26
95701: PUSH
95702: LD_INT 27
95704: PUSH
95705: LD_INT 28
95707: PUSH
95708: LD_INT 30
95710: PUSH
95711: LD_INT 31
95713: PUSH
95714: LD_INT 32
95716: PUSH
95717: LD_INT 33
95719: PUSH
95720: LD_INT 34
95722: PUSH
95723: LD_INT 36
95725: PUSH
95726: EMPTY
95727: LIST
95728: LIST
95729: LIST
95730: LIST
95731: LIST
95732: LIST
95733: LIST
95734: LIST
95735: LIST
95736: LIST
95737: LIST
95738: LIST
95739: LIST
95740: LIST
95741: LIST
95742: LIST
95743: LIST
95744: LIST
95745: LIST
95746: LIST
95747: LIST
95748: LIST
95749: LIST
95750: LIST
95751: LIST
95752: LIST
95753: LIST
95754: LIST
95755: LIST
95756: LIST
95757: LIST
95758: LIST
95759: LIST
95760: LIST
95761: PUSH
95762: LD_INT 101
95764: PUSH
95765: LD_INT 102
95767: PUSH
95768: LD_INT 103
95770: PUSH
95771: LD_INT 104
95773: PUSH
95774: LD_INT 105
95776: PUSH
95777: LD_INT 106
95779: PUSH
95780: LD_INT 107
95782: PUSH
95783: LD_INT 108
95785: PUSH
95786: LD_INT 109
95788: PUSH
95789: LD_INT 110
95791: PUSH
95792: LD_INT 111
95794: PUSH
95795: LD_INT 112
95797: PUSH
95798: LD_INT 113
95800: PUSH
95801: LD_INT 114
95803: PUSH
95804: EMPTY
95805: LIST
95806: LIST
95807: LIST
95808: LIST
95809: LIST
95810: LIST
95811: LIST
95812: LIST
95813: LIST
95814: LIST
95815: LIST
95816: LIST
95817: LIST
95818: LIST
95819: PUSH
95820: EMPTY
95821: LIST
95822: LIST
95823: ST_TO_ADDR
95824: GO 97195
95826: LD_INT 13
95828: DOUBLE
95829: EQUAL
95830: IFTRUE 95834
95832: GO 96030
95834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
95835: LD_ADDR_VAR 0 1
95839: PUSH
95840: LD_INT 1
95842: PUSH
95843: LD_INT 2
95845: PUSH
95846: LD_INT 3
95848: PUSH
95849: LD_INT 4
95851: PUSH
95852: LD_INT 5
95854: PUSH
95855: LD_INT 8
95857: PUSH
95858: LD_INT 9
95860: PUSH
95861: LD_INT 10
95863: PUSH
95864: LD_INT 11
95866: PUSH
95867: LD_INT 12
95869: PUSH
95870: LD_INT 14
95872: PUSH
95873: LD_INT 15
95875: PUSH
95876: LD_INT 16
95878: PUSH
95879: LD_INT 17
95881: PUSH
95882: LD_INT 18
95884: PUSH
95885: LD_INT 19
95887: PUSH
95888: LD_INT 20
95890: PUSH
95891: LD_INT 21
95893: PUSH
95894: LD_INT 22
95896: PUSH
95897: LD_INT 23
95899: PUSH
95900: LD_INT 24
95902: PUSH
95903: LD_INT 25
95905: PUSH
95906: LD_INT 26
95908: PUSH
95909: LD_INT 27
95911: PUSH
95912: LD_INT 28
95914: PUSH
95915: LD_INT 30
95917: PUSH
95918: LD_INT 31
95920: PUSH
95921: LD_INT 32
95923: PUSH
95924: LD_INT 33
95926: PUSH
95927: LD_INT 34
95929: PUSH
95930: LD_INT 36
95932: PUSH
95933: EMPTY
95934: LIST
95935: LIST
95936: LIST
95937: LIST
95938: LIST
95939: LIST
95940: LIST
95941: LIST
95942: LIST
95943: LIST
95944: LIST
95945: LIST
95946: LIST
95947: LIST
95948: LIST
95949: LIST
95950: LIST
95951: LIST
95952: LIST
95953: LIST
95954: LIST
95955: LIST
95956: LIST
95957: LIST
95958: LIST
95959: LIST
95960: LIST
95961: LIST
95962: LIST
95963: LIST
95964: LIST
95965: PUSH
95966: LD_INT 101
95968: PUSH
95969: LD_INT 102
95971: PUSH
95972: LD_INT 103
95974: PUSH
95975: LD_INT 104
95977: PUSH
95978: LD_INT 105
95980: PUSH
95981: LD_INT 106
95983: PUSH
95984: LD_INT 107
95986: PUSH
95987: LD_INT 108
95989: PUSH
95990: LD_INT 109
95992: PUSH
95993: LD_INT 110
95995: PUSH
95996: LD_INT 111
95998: PUSH
95999: LD_INT 112
96001: PUSH
96002: LD_INT 113
96004: PUSH
96005: LD_INT 114
96007: PUSH
96008: EMPTY
96009: LIST
96010: LIST
96011: LIST
96012: LIST
96013: LIST
96014: LIST
96015: LIST
96016: LIST
96017: LIST
96018: LIST
96019: LIST
96020: LIST
96021: LIST
96022: LIST
96023: PUSH
96024: EMPTY
96025: LIST
96026: LIST
96027: ST_TO_ADDR
96028: GO 97195
96030: LD_INT 14
96032: DOUBLE
96033: EQUAL
96034: IFTRUE 96038
96036: GO 96250
96038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
96039: LD_ADDR_VAR 0 1
96043: PUSH
96044: LD_INT 1
96046: PUSH
96047: LD_INT 2
96049: PUSH
96050: LD_INT 3
96052: PUSH
96053: LD_INT 4
96055: PUSH
96056: LD_INT 5
96058: PUSH
96059: LD_INT 6
96061: PUSH
96062: LD_INT 7
96064: PUSH
96065: LD_INT 8
96067: PUSH
96068: LD_INT 9
96070: PUSH
96071: LD_INT 10
96073: PUSH
96074: LD_INT 11
96076: PUSH
96077: LD_INT 12
96079: PUSH
96080: LD_INT 13
96082: PUSH
96083: LD_INT 14
96085: PUSH
96086: LD_INT 15
96088: PUSH
96089: LD_INT 16
96091: PUSH
96092: LD_INT 17
96094: PUSH
96095: LD_INT 18
96097: PUSH
96098: LD_INT 19
96100: PUSH
96101: LD_INT 20
96103: PUSH
96104: LD_INT 21
96106: PUSH
96107: LD_INT 22
96109: PUSH
96110: LD_INT 23
96112: PUSH
96113: LD_INT 24
96115: PUSH
96116: LD_INT 25
96118: PUSH
96119: LD_INT 26
96121: PUSH
96122: LD_INT 27
96124: PUSH
96125: LD_INT 28
96127: PUSH
96128: LD_INT 29
96130: PUSH
96131: LD_INT 30
96133: PUSH
96134: LD_INT 31
96136: PUSH
96137: LD_INT 32
96139: PUSH
96140: LD_INT 33
96142: PUSH
96143: LD_INT 34
96145: PUSH
96146: LD_INT 36
96148: PUSH
96149: EMPTY
96150: LIST
96151: LIST
96152: LIST
96153: LIST
96154: LIST
96155: LIST
96156: LIST
96157: LIST
96158: LIST
96159: LIST
96160: LIST
96161: LIST
96162: LIST
96163: LIST
96164: LIST
96165: LIST
96166: LIST
96167: LIST
96168: LIST
96169: LIST
96170: LIST
96171: LIST
96172: LIST
96173: LIST
96174: LIST
96175: LIST
96176: LIST
96177: LIST
96178: LIST
96179: LIST
96180: LIST
96181: LIST
96182: LIST
96183: LIST
96184: LIST
96185: PUSH
96186: LD_INT 101
96188: PUSH
96189: LD_INT 102
96191: PUSH
96192: LD_INT 103
96194: PUSH
96195: LD_INT 104
96197: PUSH
96198: LD_INT 105
96200: PUSH
96201: LD_INT 106
96203: PUSH
96204: LD_INT 107
96206: PUSH
96207: LD_INT 108
96209: PUSH
96210: LD_INT 109
96212: PUSH
96213: LD_INT 110
96215: PUSH
96216: LD_INT 111
96218: PUSH
96219: LD_INT 112
96221: PUSH
96222: LD_INT 113
96224: PUSH
96225: LD_INT 114
96227: PUSH
96228: EMPTY
96229: LIST
96230: LIST
96231: LIST
96232: LIST
96233: LIST
96234: LIST
96235: LIST
96236: LIST
96237: LIST
96238: LIST
96239: LIST
96240: LIST
96241: LIST
96242: LIST
96243: PUSH
96244: EMPTY
96245: LIST
96246: LIST
96247: ST_TO_ADDR
96248: GO 97195
96250: LD_INT 15
96252: DOUBLE
96253: EQUAL
96254: IFTRUE 96258
96256: GO 96470
96258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
96259: LD_ADDR_VAR 0 1
96263: PUSH
96264: LD_INT 1
96266: PUSH
96267: LD_INT 2
96269: PUSH
96270: LD_INT 3
96272: PUSH
96273: LD_INT 4
96275: PUSH
96276: LD_INT 5
96278: PUSH
96279: LD_INT 6
96281: PUSH
96282: LD_INT 7
96284: PUSH
96285: LD_INT 8
96287: PUSH
96288: LD_INT 9
96290: PUSH
96291: LD_INT 10
96293: PUSH
96294: LD_INT 11
96296: PUSH
96297: LD_INT 12
96299: PUSH
96300: LD_INT 13
96302: PUSH
96303: LD_INT 14
96305: PUSH
96306: LD_INT 15
96308: PUSH
96309: LD_INT 16
96311: PUSH
96312: LD_INT 17
96314: PUSH
96315: LD_INT 18
96317: PUSH
96318: LD_INT 19
96320: PUSH
96321: LD_INT 20
96323: PUSH
96324: LD_INT 21
96326: PUSH
96327: LD_INT 22
96329: PUSH
96330: LD_INT 23
96332: PUSH
96333: LD_INT 24
96335: PUSH
96336: LD_INT 25
96338: PUSH
96339: LD_INT 26
96341: PUSH
96342: LD_INT 27
96344: PUSH
96345: LD_INT 28
96347: PUSH
96348: LD_INT 29
96350: PUSH
96351: LD_INT 30
96353: PUSH
96354: LD_INT 31
96356: PUSH
96357: LD_INT 32
96359: PUSH
96360: LD_INT 33
96362: PUSH
96363: LD_INT 34
96365: PUSH
96366: LD_INT 36
96368: PUSH
96369: EMPTY
96370: LIST
96371: LIST
96372: LIST
96373: LIST
96374: LIST
96375: LIST
96376: LIST
96377: LIST
96378: LIST
96379: LIST
96380: LIST
96381: LIST
96382: LIST
96383: LIST
96384: LIST
96385: LIST
96386: LIST
96387: LIST
96388: LIST
96389: LIST
96390: LIST
96391: LIST
96392: LIST
96393: LIST
96394: LIST
96395: LIST
96396: LIST
96397: LIST
96398: LIST
96399: LIST
96400: LIST
96401: LIST
96402: LIST
96403: LIST
96404: LIST
96405: PUSH
96406: LD_INT 101
96408: PUSH
96409: LD_INT 102
96411: PUSH
96412: LD_INT 103
96414: PUSH
96415: LD_INT 104
96417: PUSH
96418: LD_INT 105
96420: PUSH
96421: LD_INT 106
96423: PUSH
96424: LD_INT 107
96426: PUSH
96427: LD_INT 108
96429: PUSH
96430: LD_INT 109
96432: PUSH
96433: LD_INT 110
96435: PUSH
96436: LD_INT 111
96438: PUSH
96439: LD_INT 112
96441: PUSH
96442: LD_INT 113
96444: PUSH
96445: LD_INT 114
96447: PUSH
96448: EMPTY
96449: LIST
96450: LIST
96451: LIST
96452: LIST
96453: LIST
96454: LIST
96455: LIST
96456: LIST
96457: LIST
96458: LIST
96459: LIST
96460: LIST
96461: LIST
96462: LIST
96463: PUSH
96464: EMPTY
96465: LIST
96466: LIST
96467: ST_TO_ADDR
96468: GO 97195
96470: LD_INT 16
96472: DOUBLE
96473: EQUAL
96474: IFTRUE 96478
96476: GO 96602
96478: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
96479: LD_ADDR_VAR 0 1
96483: PUSH
96484: LD_INT 2
96486: PUSH
96487: LD_INT 4
96489: PUSH
96490: LD_INT 5
96492: PUSH
96493: LD_INT 7
96495: PUSH
96496: LD_INT 11
96498: PUSH
96499: LD_INT 12
96501: PUSH
96502: LD_INT 15
96504: PUSH
96505: LD_INT 16
96507: PUSH
96508: LD_INT 20
96510: PUSH
96511: LD_INT 21
96513: PUSH
96514: LD_INT 22
96516: PUSH
96517: LD_INT 23
96519: PUSH
96520: LD_INT 25
96522: PUSH
96523: LD_INT 26
96525: PUSH
96526: LD_INT 30
96528: PUSH
96529: LD_INT 31
96531: PUSH
96532: LD_INT 32
96534: PUSH
96535: LD_INT 33
96537: PUSH
96538: LD_INT 34
96540: PUSH
96541: EMPTY
96542: LIST
96543: LIST
96544: LIST
96545: LIST
96546: LIST
96547: LIST
96548: LIST
96549: LIST
96550: LIST
96551: LIST
96552: LIST
96553: LIST
96554: LIST
96555: LIST
96556: LIST
96557: LIST
96558: LIST
96559: LIST
96560: LIST
96561: PUSH
96562: LD_INT 101
96564: PUSH
96565: LD_INT 102
96567: PUSH
96568: LD_INT 103
96570: PUSH
96571: LD_INT 106
96573: PUSH
96574: LD_INT 108
96576: PUSH
96577: LD_INT 112
96579: PUSH
96580: LD_INT 113
96582: PUSH
96583: LD_INT 114
96585: PUSH
96586: EMPTY
96587: LIST
96588: LIST
96589: LIST
96590: LIST
96591: LIST
96592: LIST
96593: LIST
96594: LIST
96595: PUSH
96596: EMPTY
96597: LIST
96598: LIST
96599: ST_TO_ADDR
96600: GO 97195
96602: LD_INT 17
96604: DOUBLE
96605: EQUAL
96606: IFTRUE 96610
96608: GO 96822
96610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
96611: LD_ADDR_VAR 0 1
96615: PUSH
96616: LD_INT 1
96618: PUSH
96619: LD_INT 2
96621: PUSH
96622: LD_INT 3
96624: PUSH
96625: LD_INT 4
96627: PUSH
96628: LD_INT 5
96630: PUSH
96631: LD_INT 6
96633: PUSH
96634: LD_INT 7
96636: PUSH
96637: LD_INT 8
96639: PUSH
96640: LD_INT 9
96642: PUSH
96643: LD_INT 10
96645: PUSH
96646: LD_INT 11
96648: PUSH
96649: LD_INT 12
96651: PUSH
96652: LD_INT 13
96654: PUSH
96655: LD_INT 14
96657: PUSH
96658: LD_INT 15
96660: PUSH
96661: LD_INT 16
96663: PUSH
96664: LD_INT 17
96666: PUSH
96667: LD_INT 18
96669: PUSH
96670: LD_INT 19
96672: PUSH
96673: LD_INT 20
96675: PUSH
96676: LD_INT 21
96678: PUSH
96679: LD_INT 22
96681: PUSH
96682: LD_INT 23
96684: PUSH
96685: LD_INT 24
96687: PUSH
96688: LD_INT 25
96690: PUSH
96691: LD_INT 26
96693: PUSH
96694: LD_INT 27
96696: PUSH
96697: LD_INT 28
96699: PUSH
96700: LD_INT 29
96702: PUSH
96703: LD_INT 30
96705: PUSH
96706: LD_INT 31
96708: PUSH
96709: LD_INT 32
96711: PUSH
96712: LD_INT 33
96714: PUSH
96715: LD_INT 34
96717: PUSH
96718: LD_INT 36
96720: PUSH
96721: EMPTY
96722: LIST
96723: LIST
96724: LIST
96725: LIST
96726: LIST
96727: LIST
96728: LIST
96729: LIST
96730: LIST
96731: LIST
96732: LIST
96733: LIST
96734: LIST
96735: LIST
96736: LIST
96737: LIST
96738: LIST
96739: LIST
96740: LIST
96741: LIST
96742: LIST
96743: LIST
96744: LIST
96745: LIST
96746: LIST
96747: LIST
96748: LIST
96749: LIST
96750: LIST
96751: LIST
96752: LIST
96753: LIST
96754: LIST
96755: LIST
96756: LIST
96757: PUSH
96758: LD_INT 101
96760: PUSH
96761: LD_INT 102
96763: PUSH
96764: LD_INT 103
96766: PUSH
96767: LD_INT 104
96769: PUSH
96770: LD_INT 105
96772: PUSH
96773: LD_INT 106
96775: PUSH
96776: LD_INT 107
96778: PUSH
96779: LD_INT 108
96781: PUSH
96782: LD_INT 109
96784: PUSH
96785: LD_INT 110
96787: PUSH
96788: LD_INT 111
96790: PUSH
96791: LD_INT 112
96793: PUSH
96794: LD_INT 113
96796: PUSH
96797: LD_INT 114
96799: PUSH
96800: EMPTY
96801: LIST
96802: LIST
96803: LIST
96804: LIST
96805: LIST
96806: LIST
96807: LIST
96808: LIST
96809: LIST
96810: LIST
96811: LIST
96812: LIST
96813: LIST
96814: LIST
96815: PUSH
96816: EMPTY
96817: LIST
96818: LIST
96819: ST_TO_ADDR
96820: GO 97195
96822: LD_INT 18
96824: DOUBLE
96825: EQUAL
96826: IFTRUE 96830
96828: GO 96966
96830: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
96831: LD_ADDR_VAR 0 1
96835: PUSH
96836: LD_INT 2
96838: PUSH
96839: LD_INT 4
96841: PUSH
96842: LD_INT 5
96844: PUSH
96845: LD_INT 7
96847: PUSH
96848: LD_INT 11
96850: PUSH
96851: LD_INT 12
96853: PUSH
96854: LD_INT 15
96856: PUSH
96857: LD_INT 16
96859: PUSH
96860: LD_INT 20
96862: PUSH
96863: LD_INT 21
96865: PUSH
96866: LD_INT 22
96868: PUSH
96869: LD_INT 23
96871: PUSH
96872: LD_INT 25
96874: PUSH
96875: LD_INT 26
96877: PUSH
96878: LD_INT 30
96880: PUSH
96881: LD_INT 31
96883: PUSH
96884: LD_INT 32
96886: PUSH
96887: LD_INT 33
96889: PUSH
96890: LD_INT 34
96892: PUSH
96893: LD_INT 35
96895: PUSH
96896: LD_INT 36
96898: PUSH
96899: EMPTY
96900: LIST
96901: LIST
96902: LIST
96903: LIST
96904: LIST
96905: LIST
96906: LIST
96907: LIST
96908: LIST
96909: LIST
96910: LIST
96911: LIST
96912: LIST
96913: LIST
96914: LIST
96915: LIST
96916: LIST
96917: LIST
96918: LIST
96919: LIST
96920: LIST
96921: PUSH
96922: LD_INT 101
96924: PUSH
96925: LD_INT 102
96927: PUSH
96928: LD_INT 103
96930: PUSH
96931: LD_INT 106
96933: PUSH
96934: LD_INT 108
96936: PUSH
96937: LD_INT 112
96939: PUSH
96940: LD_INT 113
96942: PUSH
96943: LD_INT 114
96945: PUSH
96946: LD_INT 115
96948: PUSH
96949: EMPTY
96950: LIST
96951: LIST
96952: LIST
96953: LIST
96954: LIST
96955: LIST
96956: LIST
96957: LIST
96958: LIST
96959: PUSH
96960: EMPTY
96961: LIST
96962: LIST
96963: ST_TO_ADDR
96964: GO 97195
96966: LD_INT 19
96968: DOUBLE
96969: EQUAL
96970: IFTRUE 96974
96972: GO 97194
96974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
96975: LD_ADDR_VAR 0 1
96979: PUSH
96980: LD_INT 1
96982: PUSH
96983: LD_INT 2
96985: PUSH
96986: LD_INT 3
96988: PUSH
96989: LD_INT 4
96991: PUSH
96992: LD_INT 5
96994: PUSH
96995: LD_INT 6
96997: PUSH
96998: LD_INT 7
97000: PUSH
97001: LD_INT 8
97003: PUSH
97004: LD_INT 9
97006: PUSH
97007: LD_INT 10
97009: PUSH
97010: LD_INT 11
97012: PUSH
97013: LD_INT 12
97015: PUSH
97016: LD_INT 13
97018: PUSH
97019: LD_INT 14
97021: PUSH
97022: LD_INT 15
97024: PUSH
97025: LD_INT 16
97027: PUSH
97028: LD_INT 17
97030: PUSH
97031: LD_INT 18
97033: PUSH
97034: LD_INT 19
97036: PUSH
97037: LD_INT 20
97039: PUSH
97040: LD_INT 21
97042: PUSH
97043: LD_INT 22
97045: PUSH
97046: LD_INT 23
97048: PUSH
97049: LD_INT 24
97051: PUSH
97052: LD_INT 25
97054: PUSH
97055: LD_INT 26
97057: PUSH
97058: LD_INT 27
97060: PUSH
97061: LD_INT 28
97063: PUSH
97064: LD_INT 29
97066: PUSH
97067: LD_INT 30
97069: PUSH
97070: LD_INT 31
97072: PUSH
97073: LD_INT 32
97075: PUSH
97076: LD_INT 33
97078: PUSH
97079: LD_INT 34
97081: PUSH
97082: LD_INT 35
97084: PUSH
97085: LD_INT 36
97087: PUSH
97088: EMPTY
97089: LIST
97090: LIST
97091: LIST
97092: LIST
97093: LIST
97094: LIST
97095: LIST
97096: LIST
97097: LIST
97098: LIST
97099: LIST
97100: LIST
97101: LIST
97102: LIST
97103: LIST
97104: LIST
97105: LIST
97106: LIST
97107: LIST
97108: LIST
97109: LIST
97110: LIST
97111: LIST
97112: LIST
97113: LIST
97114: LIST
97115: LIST
97116: LIST
97117: LIST
97118: LIST
97119: LIST
97120: LIST
97121: LIST
97122: LIST
97123: LIST
97124: LIST
97125: PUSH
97126: LD_INT 101
97128: PUSH
97129: LD_INT 102
97131: PUSH
97132: LD_INT 103
97134: PUSH
97135: LD_INT 104
97137: PUSH
97138: LD_INT 105
97140: PUSH
97141: LD_INT 106
97143: PUSH
97144: LD_INT 107
97146: PUSH
97147: LD_INT 108
97149: PUSH
97150: LD_INT 109
97152: PUSH
97153: LD_INT 110
97155: PUSH
97156: LD_INT 111
97158: PUSH
97159: LD_INT 112
97161: PUSH
97162: LD_INT 113
97164: PUSH
97165: LD_INT 114
97167: PUSH
97168: LD_INT 115
97170: PUSH
97171: EMPTY
97172: LIST
97173: LIST
97174: LIST
97175: LIST
97176: LIST
97177: LIST
97178: LIST
97179: LIST
97180: LIST
97181: LIST
97182: LIST
97183: LIST
97184: LIST
97185: LIST
97186: LIST
97187: PUSH
97188: EMPTY
97189: LIST
97190: LIST
97191: ST_TO_ADDR
97192: GO 97195
97194: POP
// end else
97195: GO 97232
// if campaign_id = 5 then
97197: LD_OWVAR 69
97201: PUSH
97202: LD_INT 5
97204: EQUAL
97205: IFFALSE 97232
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
97207: LD_ADDR_VAR 0 1
97211: PUSH
97212: LD_INT 1
97214: PUSH
97215: LD_INT 2
97217: PUSH
97218: EMPTY
97219: LIST
97220: LIST
97221: PUSH
97222: LD_INT 100
97224: PUSH
97225: EMPTY
97226: LIST
97227: PUSH
97228: EMPTY
97229: LIST
97230: LIST
97231: ST_TO_ADDR
// end ; if result then
97232: LD_VAR 0 1
97236: IFFALSE 97525
// begin normal :=  ;
97238: LD_ADDR_VAR 0 3
97242: PUSH
97243: LD_STRING 
97245: ST_TO_ADDR
// hardcore :=  ;
97246: LD_ADDR_VAR 0 4
97250: PUSH
97251: LD_STRING 
97253: ST_TO_ADDR
// for i = 1 to normalCounter do
97254: LD_ADDR_VAR 0 5
97258: PUSH
97259: DOUBLE
97260: LD_INT 1
97262: DEC
97263: ST_TO_ADDR
97264: LD_EXP 123
97268: PUSH
97269: FOR_TO
97270: IFFALSE 97371
// begin tmp := 0 ;
97272: LD_ADDR_VAR 0 2
97276: PUSH
97277: LD_STRING 0
97279: ST_TO_ADDR
// if result [ 1 ] then
97280: LD_VAR 0 1
97284: PUSH
97285: LD_INT 1
97287: ARRAY
97288: IFFALSE 97353
// if result [ 1 ] [ 1 ] = i then
97290: LD_VAR 0 1
97294: PUSH
97295: LD_INT 1
97297: ARRAY
97298: PUSH
97299: LD_INT 1
97301: ARRAY
97302: PUSH
97303: LD_VAR 0 5
97307: EQUAL
97308: IFFALSE 97353
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
97310: LD_ADDR_VAR 0 1
97314: PUSH
97315: LD_VAR 0 1
97319: PPUSH
97320: LD_INT 1
97322: PPUSH
97323: LD_VAR 0 1
97327: PUSH
97328: LD_INT 1
97330: ARRAY
97331: PPUSH
97332: LD_INT 1
97334: PPUSH
97335: CALL_OW 3
97339: PPUSH
97340: CALL_OW 1
97344: ST_TO_ADDR
// tmp := 1 ;
97345: LD_ADDR_VAR 0 2
97349: PUSH
97350: LD_STRING 1
97352: ST_TO_ADDR
// end ; normal := normal & tmp ;
97353: LD_ADDR_VAR 0 3
97357: PUSH
97358: LD_VAR 0 3
97362: PUSH
97363: LD_VAR 0 2
97367: STR
97368: ST_TO_ADDR
// end ;
97369: GO 97269
97371: POP
97372: POP
// for i = 1 to hardcoreCounter do
97373: LD_ADDR_VAR 0 5
97377: PUSH
97378: DOUBLE
97379: LD_INT 1
97381: DEC
97382: ST_TO_ADDR
97383: LD_EXP 124
97387: PUSH
97388: FOR_TO
97389: IFFALSE 97494
// begin tmp := 0 ;
97391: LD_ADDR_VAR 0 2
97395: PUSH
97396: LD_STRING 0
97398: ST_TO_ADDR
// if result [ 2 ] then
97399: LD_VAR 0 1
97403: PUSH
97404: LD_INT 2
97406: ARRAY
97407: IFFALSE 97476
// if result [ 2 ] [ 1 ] = 100 + i then
97409: LD_VAR 0 1
97413: PUSH
97414: LD_INT 2
97416: ARRAY
97417: PUSH
97418: LD_INT 1
97420: ARRAY
97421: PUSH
97422: LD_INT 100
97424: PUSH
97425: LD_VAR 0 5
97429: PLUS
97430: EQUAL
97431: IFFALSE 97476
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
97433: LD_ADDR_VAR 0 1
97437: PUSH
97438: LD_VAR 0 1
97442: PPUSH
97443: LD_INT 2
97445: PPUSH
97446: LD_VAR 0 1
97450: PUSH
97451: LD_INT 2
97453: ARRAY
97454: PPUSH
97455: LD_INT 1
97457: PPUSH
97458: CALL_OW 3
97462: PPUSH
97463: CALL_OW 1
97467: ST_TO_ADDR
// tmp := 1 ;
97468: LD_ADDR_VAR 0 2
97472: PUSH
97473: LD_STRING 1
97475: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
97476: LD_ADDR_VAR 0 4
97480: PUSH
97481: LD_VAR 0 4
97485: PUSH
97486: LD_VAR 0 2
97490: STR
97491: ST_TO_ADDR
// end ;
97492: GO 97388
97494: POP
97495: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
97496: LD_STRING getStreamItemsFromMission("
97498: PUSH
97499: LD_VAR 0 3
97503: STR
97504: PUSH
97505: LD_STRING ","
97507: STR
97508: PUSH
97509: LD_VAR 0 4
97513: STR
97514: PUSH
97515: LD_STRING ")
97517: STR
97518: PPUSH
97519: CALL_OW 559
// end else
97523: GO 97532
// ToLua ( getStreamItemsFromMission("","") ) ;
97525: LD_STRING getStreamItemsFromMission("","")
97527: PPUSH
97528: CALL_OW 559
// end ;
97532: LD_VAR 0 1
97536: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
97537: LD_VAR 0 2
97541: PUSH
97542: LD_INT 100
97544: EQUAL
97545: IFFALSE 98494
// begin if not StreamModeActive then
97547: LD_EXP 122
97551: NOT
97552: IFFALSE 97562
// StreamModeActive := true ;
97554: LD_ADDR_EXP 122
97558: PUSH
97559: LD_INT 1
97561: ST_TO_ADDR
// if p3 = 0 then
97562: LD_VAR 0 3
97566: PUSH
97567: LD_INT 0
97569: EQUAL
97570: IFFALSE 97576
// InitStreamMode ;
97572: CALL 93797 0 0
// if p3 = 1 then
97576: LD_VAR 0 3
97580: PUSH
97581: LD_INT 1
97583: EQUAL
97584: IFFALSE 97594
// sRocket := true ;
97586: LD_ADDR_EXP 127
97590: PUSH
97591: LD_INT 1
97593: ST_TO_ADDR
// if p3 = 2 then
97594: LD_VAR 0 3
97598: PUSH
97599: LD_INT 2
97601: EQUAL
97602: IFFALSE 97612
// sSpeed := true ;
97604: LD_ADDR_EXP 126
97608: PUSH
97609: LD_INT 1
97611: ST_TO_ADDR
// if p3 = 3 then
97612: LD_VAR 0 3
97616: PUSH
97617: LD_INT 3
97619: EQUAL
97620: IFFALSE 97630
// sEngine := true ;
97622: LD_ADDR_EXP 128
97626: PUSH
97627: LD_INT 1
97629: ST_TO_ADDR
// if p3 = 4 then
97630: LD_VAR 0 3
97634: PUSH
97635: LD_INT 4
97637: EQUAL
97638: IFFALSE 97648
// sSpec := true ;
97640: LD_ADDR_EXP 125
97644: PUSH
97645: LD_INT 1
97647: ST_TO_ADDR
// if p3 = 5 then
97648: LD_VAR 0 3
97652: PUSH
97653: LD_INT 5
97655: EQUAL
97656: IFFALSE 97666
// sLevel := true ;
97658: LD_ADDR_EXP 129
97662: PUSH
97663: LD_INT 1
97665: ST_TO_ADDR
// if p3 = 6 then
97666: LD_VAR 0 3
97670: PUSH
97671: LD_INT 6
97673: EQUAL
97674: IFFALSE 97684
// sArmoury := true ;
97676: LD_ADDR_EXP 130
97680: PUSH
97681: LD_INT 1
97683: ST_TO_ADDR
// if p3 = 7 then
97684: LD_VAR 0 3
97688: PUSH
97689: LD_INT 7
97691: EQUAL
97692: IFFALSE 97702
// sRadar := true ;
97694: LD_ADDR_EXP 131
97698: PUSH
97699: LD_INT 1
97701: ST_TO_ADDR
// if p3 = 8 then
97702: LD_VAR 0 3
97706: PUSH
97707: LD_INT 8
97709: EQUAL
97710: IFFALSE 97720
// sBunker := true ;
97712: LD_ADDR_EXP 132
97716: PUSH
97717: LD_INT 1
97719: ST_TO_ADDR
// if p3 = 9 then
97720: LD_VAR 0 3
97724: PUSH
97725: LD_INT 9
97727: EQUAL
97728: IFFALSE 97738
// sHack := true ;
97730: LD_ADDR_EXP 133
97734: PUSH
97735: LD_INT 1
97737: ST_TO_ADDR
// if p3 = 10 then
97738: LD_VAR 0 3
97742: PUSH
97743: LD_INT 10
97745: EQUAL
97746: IFFALSE 97756
// sFire := true ;
97748: LD_ADDR_EXP 134
97752: PUSH
97753: LD_INT 1
97755: ST_TO_ADDR
// if p3 = 11 then
97756: LD_VAR 0 3
97760: PUSH
97761: LD_INT 11
97763: EQUAL
97764: IFFALSE 97774
// sRefresh := true ;
97766: LD_ADDR_EXP 135
97770: PUSH
97771: LD_INT 1
97773: ST_TO_ADDR
// if p3 = 12 then
97774: LD_VAR 0 3
97778: PUSH
97779: LD_INT 12
97781: EQUAL
97782: IFFALSE 97792
// sExp := true ;
97784: LD_ADDR_EXP 136
97788: PUSH
97789: LD_INT 1
97791: ST_TO_ADDR
// if p3 = 13 then
97792: LD_VAR 0 3
97796: PUSH
97797: LD_INT 13
97799: EQUAL
97800: IFFALSE 97810
// sDepot := true ;
97802: LD_ADDR_EXP 137
97806: PUSH
97807: LD_INT 1
97809: ST_TO_ADDR
// if p3 = 14 then
97810: LD_VAR 0 3
97814: PUSH
97815: LD_INT 14
97817: EQUAL
97818: IFFALSE 97828
// sFlag := true ;
97820: LD_ADDR_EXP 138
97824: PUSH
97825: LD_INT 1
97827: ST_TO_ADDR
// if p3 = 15 then
97828: LD_VAR 0 3
97832: PUSH
97833: LD_INT 15
97835: EQUAL
97836: IFFALSE 97846
// sKamikadze := true ;
97838: LD_ADDR_EXP 146
97842: PUSH
97843: LD_INT 1
97845: ST_TO_ADDR
// if p3 = 16 then
97846: LD_VAR 0 3
97850: PUSH
97851: LD_INT 16
97853: EQUAL
97854: IFFALSE 97864
// sTroll := true ;
97856: LD_ADDR_EXP 147
97860: PUSH
97861: LD_INT 1
97863: ST_TO_ADDR
// if p3 = 17 then
97864: LD_VAR 0 3
97868: PUSH
97869: LD_INT 17
97871: EQUAL
97872: IFFALSE 97882
// sSlow := true ;
97874: LD_ADDR_EXP 148
97878: PUSH
97879: LD_INT 1
97881: ST_TO_ADDR
// if p3 = 18 then
97882: LD_VAR 0 3
97886: PUSH
97887: LD_INT 18
97889: EQUAL
97890: IFFALSE 97900
// sLack := true ;
97892: LD_ADDR_EXP 149
97896: PUSH
97897: LD_INT 1
97899: ST_TO_ADDR
// if p3 = 19 then
97900: LD_VAR 0 3
97904: PUSH
97905: LD_INT 19
97907: EQUAL
97908: IFFALSE 97918
// sTank := true ;
97910: LD_ADDR_EXP 151
97914: PUSH
97915: LD_INT 1
97917: ST_TO_ADDR
// if p3 = 20 then
97918: LD_VAR 0 3
97922: PUSH
97923: LD_INT 20
97925: EQUAL
97926: IFFALSE 97936
// sRemote := true ;
97928: LD_ADDR_EXP 152
97932: PUSH
97933: LD_INT 1
97935: ST_TO_ADDR
// if p3 = 21 then
97936: LD_VAR 0 3
97940: PUSH
97941: LD_INT 21
97943: EQUAL
97944: IFFALSE 97954
// sPowell := true ;
97946: LD_ADDR_EXP 153
97950: PUSH
97951: LD_INT 1
97953: ST_TO_ADDR
// if p3 = 22 then
97954: LD_VAR 0 3
97958: PUSH
97959: LD_INT 22
97961: EQUAL
97962: IFFALSE 97972
// sTeleport := true ;
97964: LD_ADDR_EXP 156
97968: PUSH
97969: LD_INT 1
97971: ST_TO_ADDR
// if p3 = 23 then
97972: LD_VAR 0 3
97976: PUSH
97977: LD_INT 23
97979: EQUAL
97980: IFFALSE 97990
// sOilTower := true ;
97982: LD_ADDR_EXP 158
97986: PUSH
97987: LD_INT 1
97989: ST_TO_ADDR
// if p3 = 24 then
97990: LD_VAR 0 3
97994: PUSH
97995: LD_INT 24
97997: EQUAL
97998: IFFALSE 98008
// sShovel := true ;
98000: LD_ADDR_EXP 159
98004: PUSH
98005: LD_INT 1
98007: ST_TO_ADDR
// if p3 = 25 then
98008: LD_VAR 0 3
98012: PUSH
98013: LD_INT 25
98015: EQUAL
98016: IFFALSE 98026
// sSheik := true ;
98018: LD_ADDR_EXP 160
98022: PUSH
98023: LD_INT 1
98025: ST_TO_ADDR
// if p3 = 26 then
98026: LD_VAR 0 3
98030: PUSH
98031: LD_INT 26
98033: EQUAL
98034: IFFALSE 98044
// sEarthquake := true ;
98036: LD_ADDR_EXP 162
98040: PUSH
98041: LD_INT 1
98043: ST_TO_ADDR
// if p3 = 27 then
98044: LD_VAR 0 3
98048: PUSH
98049: LD_INT 27
98051: EQUAL
98052: IFFALSE 98062
// sAI := true ;
98054: LD_ADDR_EXP 163
98058: PUSH
98059: LD_INT 1
98061: ST_TO_ADDR
// if p3 = 28 then
98062: LD_VAR 0 3
98066: PUSH
98067: LD_INT 28
98069: EQUAL
98070: IFFALSE 98080
// sCargo := true ;
98072: LD_ADDR_EXP 166
98076: PUSH
98077: LD_INT 1
98079: ST_TO_ADDR
// if p3 = 29 then
98080: LD_VAR 0 3
98084: PUSH
98085: LD_INT 29
98087: EQUAL
98088: IFFALSE 98098
// sDLaser := true ;
98090: LD_ADDR_EXP 167
98094: PUSH
98095: LD_INT 1
98097: ST_TO_ADDR
// if p3 = 30 then
98098: LD_VAR 0 3
98102: PUSH
98103: LD_INT 30
98105: EQUAL
98106: IFFALSE 98116
// sExchange := true ;
98108: LD_ADDR_EXP 168
98112: PUSH
98113: LD_INT 1
98115: ST_TO_ADDR
// if p3 = 31 then
98116: LD_VAR 0 3
98120: PUSH
98121: LD_INT 31
98123: EQUAL
98124: IFFALSE 98134
// sFac := true ;
98126: LD_ADDR_EXP 169
98130: PUSH
98131: LD_INT 1
98133: ST_TO_ADDR
// if p3 = 32 then
98134: LD_VAR 0 3
98138: PUSH
98139: LD_INT 32
98141: EQUAL
98142: IFFALSE 98152
// sPower := true ;
98144: LD_ADDR_EXP 170
98148: PUSH
98149: LD_INT 1
98151: ST_TO_ADDR
// if p3 = 33 then
98152: LD_VAR 0 3
98156: PUSH
98157: LD_INT 33
98159: EQUAL
98160: IFFALSE 98170
// sRandom := true ;
98162: LD_ADDR_EXP 171
98166: PUSH
98167: LD_INT 1
98169: ST_TO_ADDR
// if p3 = 34 then
98170: LD_VAR 0 3
98174: PUSH
98175: LD_INT 34
98177: EQUAL
98178: IFFALSE 98188
// sShield := true ;
98180: LD_ADDR_EXP 172
98184: PUSH
98185: LD_INT 1
98187: ST_TO_ADDR
// if p3 = 35 then
98188: LD_VAR 0 3
98192: PUSH
98193: LD_INT 35
98195: EQUAL
98196: IFFALSE 98206
// sTime := true ;
98198: LD_ADDR_EXP 173
98202: PUSH
98203: LD_INT 1
98205: ST_TO_ADDR
// if p3 = 36 then
98206: LD_VAR 0 3
98210: PUSH
98211: LD_INT 36
98213: EQUAL
98214: IFFALSE 98224
// sTools := true ;
98216: LD_ADDR_EXP 174
98220: PUSH
98221: LD_INT 1
98223: ST_TO_ADDR
// if p3 = 101 then
98224: LD_VAR 0 3
98228: PUSH
98229: LD_INT 101
98231: EQUAL
98232: IFFALSE 98242
// sSold := true ;
98234: LD_ADDR_EXP 139
98238: PUSH
98239: LD_INT 1
98241: ST_TO_ADDR
// if p3 = 102 then
98242: LD_VAR 0 3
98246: PUSH
98247: LD_INT 102
98249: EQUAL
98250: IFFALSE 98260
// sDiff := true ;
98252: LD_ADDR_EXP 140
98256: PUSH
98257: LD_INT 1
98259: ST_TO_ADDR
// if p3 = 103 then
98260: LD_VAR 0 3
98264: PUSH
98265: LD_INT 103
98267: EQUAL
98268: IFFALSE 98278
// sFog := true ;
98270: LD_ADDR_EXP 143
98274: PUSH
98275: LD_INT 1
98277: ST_TO_ADDR
// if p3 = 104 then
98278: LD_VAR 0 3
98282: PUSH
98283: LD_INT 104
98285: EQUAL
98286: IFFALSE 98296
// sReset := true ;
98288: LD_ADDR_EXP 144
98292: PUSH
98293: LD_INT 1
98295: ST_TO_ADDR
// if p3 = 105 then
98296: LD_VAR 0 3
98300: PUSH
98301: LD_INT 105
98303: EQUAL
98304: IFFALSE 98314
// sSun := true ;
98306: LD_ADDR_EXP 145
98310: PUSH
98311: LD_INT 1
98313: ST_TO_ADDR
// if p3 = 106 then
98314: LD_VAR 0 3
98318: PUSH
98319: LD_INT 106
98321: EQUAL
98322: IFFALSE 98332
// sTiger := true ;
98324: LD_ADDR_EXP 141
98328: PUSH
98329: LD_INT 1
98331: ST_TO_ADDR
// if p3 = 107 then
98332: LD_VAR 0 3
98336: PUSH
98337: LD_INT 107
98339: EQUAL
98340: IFFALSE 98350
// sBomb := true ;
98342: LD_ADDR_EXP 142
98346: PUSH
98347: LD_INT 1
98349: ST_TO_ADDR
// if p3 = 108 then
98350: LD_VAR 0 3
98354: PUSH
98355: LD_INT 108
98357: EQUAL
98358: IFFALSE 98368
// sWound := true ;
98360: LD_ADDR_EXP 150
98364: PUSH
98365: LD_INT 1
98367: ST_TO_ADDR
// if p3 = 109 then
98368: LD_VAR 0 3
98372: PUSH
98373: LD_INT 109
98375: EQUAL
98376: IFFALSE 98386
// sBetray := true ;
98378: LD_ADDR_EXP 154
98382: PUSH
98383: LD_INT 1
98385: ST_TO_ADDR
// if p3 = 110 then
98386: LD_VAR 0 3
98390: PUSH
98391: LD_INT 110
98393: EQUAL
98394: IFFALSE 98404
// sContamin := true ;
98396: LD_ADDR_EXP 155
98400: PUSH
98401: LD_INT 1
98403: ST_TO_ADDR
// if p3 = 111 then
98404: LD_VAR 0 3
98408: PUSH
98409: LD_INT 111
98411: EQUAL
98412: IFFALSE 98422
// sOil := true ;
98414: LD_ADDR_EXP 157
98418: PUSH
98419: LD_INT 1
98421: ST_TO_ADDR
// if p3 = 112 then
98422: LD_VAR 0 3
98426: PUSH
98427: LD_INT 112
98429: EQUAL
98430: IFFALSE 98440
// sStu := true ;
98432: LD_ADDR_EXP 161
98436: PUSH
98437: LD_INT 1
98439: ST_TO_ADDR
// if p3 = 113 then
98440: LD_VAR 0 3
98444: PUSH
98445: LD_INT 113
98447: EQUAL
98448: IFFALSE 98458
// sBazooka := true ;
98450: LD_ADDR_EXP 164
98454: PUSH
98455: LD_INT 1
98457: ST_TO_ADDR
// if p3 = 114 then
98458: LD_VAR 0 3
98462: PUSH
98463: LD_INT 114
98465: EQUAL
98466: IFFALSE 98476
// sMortar := true ;
98468: LD_ADDR_EXP 165
98472: PUSH
98473: LD_INT 1
98475: ST_TO_ADDR
// if p3 = 115 then
98476: LD_VAR 0 3
98480: PUSH
98481: LD_INT 115
98483: EQUAL
98484: IFFALSE 98494
// sRanger := true ;
98486: LD_ADDR_EXP 175
98490: PUSH
98491: LD_INT 1
98493: ST_TO_ADDR
// end ; end ;
98494: PPOPN 6
98496: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
98497: LD_EXP 122
98501: PUSH
98502: LD_EXP 127
98506: AND
98507: IFFALSE 98631
98509: GO 98511
98511: DISABLE
98512: LD_INT 0
98514: PPUSH
98515: PPUSH
// begin enable ;
98516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
98517: LD_ADDR_VAR 0 2
98521: PUSH
98522: LD_INT 22
98524: PUSH
98525: LD_OWVAR 2
98529: PUSH
98530: EMPTY
98531: LIST
98532: LIST
98533: PUSH
98534: LD_INT 2
98536: PUSH
98537: LD_INT 34
98539: PUSH
98540: LD_INT 7
98542: PUSH
98543: EMPTY
98544: LIST
98545: LIST
98546: PUSH
98547: LD_INT 34
98549: PUSH
98550: LD_INT 45
98552: PUSH
98553: EMPTY
98554: LIST
98555: LIST
98556: PUSH
98557: LD_INT 34
98559: PUSH
98560: LD_INT 28
98562: PUSH
98563: EMPTY
98564: LIST
98565: LIST
98566: PUSH
98567: LD_INT 34
98569: PUSH
98570: LD_INT 47
98572: PUSH
98573: EMPTY
98574: LIST
98575: LIST
98576: PUSH
98577: EMPTY
98578: LIST
98579: LIST
98580: LIST
98581: LIST
98582: LIST
98583: PUSH
98584: EMPTY
98585: LIST
98586: LIST
98587: PPUSH
98588: CALL_OW 69
98592: ST_TO_ADDR
// if not tmp then
98593: LD_VAR 0 2
98597: NOT
98598: IFFALSE 98602
// exit ;
98600: GO 98631
// for i in tmp do
98602: LD_ADDR_VAR 0 1
98606: PUSH
98607: LD_VAR 0 2
98611: PUSH
98612: FOR_IN
98613: IFFALSE 98629
// begin SetLives ( i , 0 ) ;
98615: LD_VAR 0 1
98619: PPUSH
98620: LD_INT 0
98622: PPUSH
98623: CALL_OW 234
// end ;
98627: GO 98612
98629: POP
98630: POP
// end ;
98631: PPOPN 2
98633: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
98634: LD_EXP 122
98638: PUSH
98639: LD_EXP 128
98643: AND
98644: IFFALSE 98728
98646: GO 98648
98648: DISABLE
98649: LD_INT 0
98651: PPUSH
98652: PPUSH
// begin enable ;
98653: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
98654: LD_ADDR_VAR 0 2
98658: PUSH
98659: LD_INT 22
98661: PUSH
98662: LD_OWVAR 2
98666: PUSH
98667: EMPTY
98668: LIST
98669: LIST
98670: PUSH
98671: LD_INT 32
98673: PUSH
98674: LD_INT 3
98676: PUSH
98677: EMPTY
98678: LIST
98679: LIST
98680: PUSH
98681: EMPTY
98682: LIST
98683: LIST
98684: PPUSH
98685: CALL_OW 69
98689: ST_TO_ADDR
// if not tmp then
98690: LD_VAR 0 2
98694: NOT
98695: IFFALSE 98699
// exit ;
98697: GO 98728
// for i in tmp do
98699: LD_ADDR_VAR 0 1
98703: PUSH
98704: LD_VAR 0 2
98708: PUSH
98709: FOR_IN
98710: IFFALSE 98726
// begin SetLives ( i , 0 ) ;
98712: LD_VAR 0 1
98716: PPUSH
98717: LD_INT 0
98719: PPUSH
98720: CALL_OW 234
// end ;
98724: GO 98709
98726: POP
98727: POP
// end ;
98728: PPOPN 2
98730: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
98731: LD_EXP 122
98735: PUSH
98736: LD_EXP 125
98740: AND
98741: IFFALSE 98834
98743: GO 98745
98745: DISABLE
98746: LD_INT 0
98748: PPUSH
// begin enable ;
98749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
98750: LD_ADDR_VAR 0 1
98754: PUSH
98755: LD_INT 22
98757: PUSH
98758: LD_OWVAR 2
98762: PUSH
98763: EMPTY
98764: LIST
98765: LIST
98766: PUSH
98767: LD_INT 2
98769: PUSH
98770: LD_INT 25
98772: PUSH
98773: LD_INT 5
98775: PUSH
98776: EMPTY
98777: LIST
98778: LIST
98779: PUSH
98780: LD_INT 25
98782: PUSH
98783: LD_INT 9
98785: PUSH
98786: EMPTY
98787: LIST
98788: LIST
98789: PUSH
98790: LD_INT 25
98792: PUSH
98793: LD_INT 8
98795: PUSH
98796: EMPTY
98797: LIST
98798: LIST
98799: PUSH
98800: EMPTY
98801: LIST
98802: LIST
98803: LIST
98804: LIST
98805: PUSH
98806: EMPTY
98807: LIST
98808: LIST
98809: PPUSH
98810: CALL_OW 69
98814: PUSH
98815: FOR_IN
98816: IFFALSE 98832
// begin SetClass ( i , 1 ) ;
98818: LD_VAR 0 1
98822: PPUSH
98823: LD_INT 1
98825: PPUSH
98826: CALL_OW 336
// end ;
98830: GO 98815
98832: POP
98833: POP
// end ;
98834: PPOPN 1
98836: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
98837: LD_EXP 122
98841: PUSH
98842: LD_EXP 126
98846: AND
98847: PUSH
98848: LD_OWVAR 65
98852: PUSH
98853: LD_INT 7
98855: LESS
98856: AND
98857: IFFALSE 98871
98859: GO 98861
98861: DISABLE
// begin enable ;
98862: ENABLE
// game_speed := 7 ;
98863: LD_ADDR_OWVAR 65
98867: PUSH
98868: LD_INT 7
98870: ST_TO_ADDR
// end ;
98871: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
98872: LD_EXP 122
98876: PUSH
98877: LD_EXP 129
98881: AND
98882: IFFALSE 99084
98884: GO 98886
98886: DISABLE
98887: LD_INT 0
98889: PPUSH
98890: PPUSH
98891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
98892: LD_ADDR_VAR 0 3
98896: PUSH
98897: LD_INT 81
98899: PUSH
98900: LD_OWVAR 2
98904: PUSH
98905: EMPTY
98906: LIST
98907: LIST
98908: PUSH
98909: LD_INT 21
98911: PUSH
98912: LD_INT 1
98914: PUSH
98915: EMPTY
98916: LIST
98917: LIST
98918: PUSH
98919: EMPTY
98920: LIST
98921: LIST
98922: PPUSH
98923: CALL_OW 69
98927: ST_TO_ADDR
// if not tmp then
98928: LD_VAR 0 3
98932: NOT
98933: IFFALSE 98937
// exit ;
98935: GO 99084
// if tmp > 5 then
98937: LD_VAR 0 3
98941: PUSH
98942: LD_INT 5
98944: GREATER
98945: IFFALSE 98957
// k := 5 else
98947: LD_ADDR_VAR 0 2
98951: PUSH
98952: LD_INT 5
98954: ST_TO_ADDR
98955: GO 98967
// k := tmp ;
98957: LD_ADDR_VAR 0 2
98961: PUSH
98962: LD_VAR 0 3
98966: ST_TO_ADDR
// for i := 1 to k do
98967: LD_ADDR_VAR 0 1
98971: PUSH
98972: DOUBLE
98973: LD_INT 1
98975: DEC
98976: ST_TO_ADDR
98977: LD_VAR 0 2
98981: PUSH
98982: FOR_TO
98983: IFFALSE 99082
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
98985: LD_VAR 0 3
98989: PUSH
98990: LD_VAR 0 1
98994: ARRAY
98995: PPUSH
98996: LD_VAR 0 1
99000: PUSH
99001: LD_INT 4
99003: MOD
99004: PUSH
99005: LD_INT 1
99007: PLUS
99008: PPUSH
99009: CALL_OW 259
99013: PUSH
99014: LD_INT 10
99016: LESS
99017: IFFALSE 99080
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
99019: LD_VAR 0 3
99023: PUSH
99024: LD_VAR 0 1
99028: ARRAY
99029: PPUSH
99030: LD_VAR 0 1
99034: PUSH
99035: LD_INT 4
99037: MOD
99038: PUSH
99039: LD_INT 1
99041: PLUS
99042: PPUSH
99043: LD_VAR 0 3
99047: PUSH
99048: LD_VAR 0 1
99052: ARRAY
99053: PPUSH
99054: LD_VAR 0 1
99058: PUSH
99059: LD_INT 4
99061: MOD
99062: PUSH
99063: LD_INT 1
99065: PLUS
99066: PPUSH
99067: CALL_OW 259
99071: PUSH
99072: LD_INT 1
99074: PLUS
99075: PPUSH
99076: CALL_OW 237
99080: GO 98982
99082: POP
99083: POP
// end ;
99084: PPOPN 3
99086: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
99087: LD_EXP 122
99091: PUSH
99092: LD_EXP 130
99096: AND
99097: IFFALSE 99117
99099: GO 99101
99101: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
99102: LD_INT 4
99104: PPUSH
99105: LD_OWVAR 2
99109: PPUSH
99110: LD_INT 0
99112: PPUSH
99113: CALL_OW 324
99117: END
// every 0 0$1 trigger StreamModeActive and sShovel do
99118: LD_EXP 122
99122: PUSH
99123: LD_EXP 159
99127: AND
99128: IFFALSE 99148
99130: GO 99132
99132: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
99133: LD_INT 19
99135: PPUSH
99136: LD_OWVAR 2
99140: PPUSH
99141: LD_INT 0
99143: PPUSH
99144: CALL_OW 324
99148: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
99149: LD_EXP 122
99153: PUSH
99154: LD_EXP 131
99158: AND
99159: IFFALSE 99261
99161: GO 99163
99163: DISABLE
99164: LD_INT 0
99166: PPUSH
99167: PPUSH
// begin enable ;
99168: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
99169: LD_ADDR_VAR 0 2
99173: PUSH
99174: LD_INT 22
99176: PUSH
99177: LD_OWVAR 2
99181: PUSH
99182: EMPTY
99183: LIST
99184: LIST
99185: PUSH
99186: LD_INT 2
99188: PUSH
99189: LD_INT 34
99191: PUSH
99192: LD_INT 11
99194: PUSH
99195: EMPTY
99196: LIST
99197: LIST
99198: PUSH
99199: LD_INT 34
99201: PUSH
99202: LD_INT 30
99204: PUSH
99205: EMPTY
99206: LIST
99207: LIST
99208: PUSH
99209: EMPTY
99210: LIST
99211: LIST
99212: LIST
99213: PUSH
99214: EMPTY
99215: LIST
99216: LIST
99217: PPUSH
99218: CALL_OW 69
99222: ST_TO_ADDR
// if not tmp then
99223: LD_VAR 0 2
99227: NOT
99228: IFFALSE 99232
// exit ;
99230: GO 99261
// for i in tmp do
99232: LD_ADDR_VAR 0 1
99236: PUSH
99237: LD_VAR 0 2
99241: PUSH
99242: FOR_IN
99243: IFFALSE 99259
// begin SetLives ( i , 0 ) ;
99245: LD_VAR 0 1
99249: PPUSH
99250: LD_INT 0
99252: PPUSH
99253: CALL_OW 234
// end ;
99257: GO 99242
99259: POP
99260: POP
// end ;
99261: PPOPN 2
99263: END
// every 0 0$1 trigger StreamModeActive and sBunker do
99264: LD_EXP 122
99268: PUSH
99269: LD_EXP 132
99273: AND
99274: IFFALSE 99294
99276: GO 99278
99278: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
99279: LD_INT 32
99281: PPUSH
99282: LD_OWVAR 2
99286: PPUSH
99287: LD_INT 0
99289: PPUSH
99290: CALL_OW 324
99294: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
99295: LD_EXP 122
99299: PUSH
99300: LD_EXP 133
99304: AND
99305: IFFALSE 99486
99307: GO 99309
99309: DISABLE
99310: LD_INT 0
99312: PPUSH
99313: PPUSH
99314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
99315: LD_ADDR_VAR 0 2
99319: PUSH
99320: LD_INT 22
99322: PUSH
99323: LD_OWVAR 2
99327: PUSH
99328: EMPTY
99329: LIST
99330: LIST
99331: PUSH
99332: LD_INT 33
99334: PUSH
99335: LD_INT 3
99337: PUSH
99338: EMPTY
99339: LIST
99340: LIST
99341: PUSH
99342: EMPTY
99343: LIST
99344: LIST
99345: PPUSH
99346: CALL_OW 69
99350: ST_TO_ADDR
// if not tmp then
99351: LD_VAR 0 2
99355: NOT
99356: IFFALSE 99360
// exit ;
99358: GO 99486
// side := 0 ;
99360: LD_ADDR_VAR 0 3
99364: PUSH
99365: LD_INT 0
99367: ST_TO_ADDR
// for i := 1 to 8 do
99368: LD_ADDR_VAR 0 1
99372: PUSH
99373: DOUBLE
99374: LD_INT 1
99376: DEC
99377: ST_TO_ADDR
99378: LD_INT 8
99380: PUSH
99381: FOR_TO
99382: IFFALSE 99430
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
99384: LD_OWVAR 2
99388: PUSH
99389: LD_VAR 0 1
99393: NONEQUAL
99394: PUSH
99395: LD_OWVAR 2
99399: PPUSH
99400: LD_VAR 0 1
99404: PPUSH
99405: CALL_OW 81
99409: PUSH
99410: LD_INT 2
99412: EQUAL
99413: AND
99414: IFFALSE 99428
// begin side := i ;
99416: LD_ADDR_VAR 0 3
99420: PUSH
99421: LD_VAR 0 1
99425: ST_TO_ADDR
// break ;
99426: GO 99430
// end ;
99428: GO 99381
99430: POP
99431: POP
// if not side then
99432: LD_VAR 0 3
99436: NOT
99437: IFFALSE 99441
// exit ;
99439: GO 99486
// for i := 1 to tmp do
99441: LD_ADDR_VAR 0 1
99445: PUSH
99446: DOUBLE
99447: LD_INT 1
99449: DEC
99450: ST_TO_ADDR
99451: LD_VAR 0 2
99455: PUSH
99456: FOR_TO
99457: IFFALSE 99484
// if Prob ( 60 ) then
99459: LD_INT 60
99461: PPUSH
99462: CALL_OW 13
99466: IFFALSE 99482
// SetSide ( i , side ) ;
99468: LD_VAR 0 1
99472: PPUSH
99473: LD_VAR 0 3
99477: PPUSH
99478: CALL_OW 235
99482: GO 99456
99484: POP
99485: POP
// end ;
99486: PPOPN 3
99488: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
99489: LD_EXP 122
99493: PUSH
99494: LD_EXP 135
99498: AND
99499: IFFALSE 99618
99501: GO 99503
99503: DISABLE
99504: LD_INT 0
99506: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
99507: LD_ADDR_VAR 0 1
99511: PUSH
99512: LD_INT 22
99514: PUSH
99515: LD_OWVAR 2
99519: PUSH
99520: EMPTY
99521: LIST
99522: LIST
99523: PUSH
99524: LD_INT 21
99526: PUSH
99527: LD_INT 1
99529: PUSH
99530: EMPTY
99531: LIST
99532: LIST
99533: PUSH
99534: LD_INT 3
99536: PUSH
99537: LD_INT 23
99539: PUSH
99540: LD_INT 0
99542: PUSH
99543: EMPTY
99544: LIST
99545: LIST
99546: PUSH
99547: EMPTY
99548: LIST
99549: LIST
99550: PUSH
99551: EMPTY
99552: LIST
99553: LIST
99554: LIST
99555: PPUSH
99556: CALL_OW 69
99560: PUSH
99561: FOR_IN
99562: IFFALSE 99616
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
99564: LD_VAR 0 1
99568: PPUSH
99569: CALL_OW 257
99573: PUSH
99574: LD_INT 1
99576: PUSH
99577: LD_INT 2
99579: PUSH
99580: LD_INT 3
99582: PUSH
99583: LD_INT 4
99585: PUSH
99586: EMPTY
99587: LIST
99588: LIST
99589: LIST
99590: LIST
99591: IN
99592: IFFALSE 99614
// SetClass ( un , rand ( 1 , 4 ) ) ;
99594: LD_VAR 0 1
99598: PPUSH
99599: LD_INT 1
99601: PPUSH
99602: LD_INT 4
99604: PPUSH
99605: CALL_OW 12
99609: PPUSH
99610: CALL_OW 336
99614: GO 99561
99616: POP
99617: POP
// end ;
99618: PPOPN 1
99620: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
99621: LD_EXP 122
99625: PUSH
99626: LD_EXP 134
99630: AND
99631: IFFALSE 99710
99633: GO 99635
99635: DISABLE
99636: LD_INT 0
99638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
99639: LD_ADDR_VAR 0 1
99643: PUSH
99644: LD_INT 22
99646: PUSH
99647: LD_OWVAR 2
99651: PUSH
99652: EMPTY
99653: LIST
99654: LIST
99655: PUSH
99656: LD_INT 21
99658: PUSH
99659: LD_INT 3
99661: PUSH
99662: EMPTY
99663: LIST
99664: LIST
99665: PUSH
99666: EMPTY
99667: LIST
99668: LIST
99669: PPUSH
99670: CALL_OW 69
99674: ST_TO_ADDR
// if not tmp then
99675: LD_VAR 0 1
99679: NOT
99680: IFFALSE 99684
// exit ;
99682: GO 99710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
99684: LD_VAR 0 1
99688: PUSH
99689: LD_INT 1
99691: PPUSH
99692: LD_VAR 0 1
99696: PPUSH
99697: CALL_OW 12
99701: ARRAY
99702: PPUSH
99703: LD_INT 100
99705: PPUSH
99706: CALL_OW 234
// end ;
99710: PPOPN 1
99712: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
99713: LD_EXP 122
99717: PUSH
99718: LD_EXP 136
99722: AND
99723: IFFALSE 99821
99725: GO 99727
99727: DISABLE
99728: LD_INT 0
99730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
99731: LD_ADDR_VAR 0 1
99735: PUSH
99736: LD_INT 22
99738: PUSH
99739: LD_OWVAR 2
99743: PUSH
99744: EMPTY
99745: LIST
99746: LIST
99747: PUSH
99748: LD_INT 21
99750: PUSH
99751: LD_INT 1
99753: PUSH
99754: EMPTY
99755: LIST
99756: LIST
99757: PUSH
99758: EMPTY
99759: LIST
99760: LIST
99761: PPUSH
99762: CALL_OW 69
99766: ST_TO_ADDR
// if not tmp then
99767: LD_VAR 0 1
99771: NOT
99772: IFFALSE 99776
// exit ;
99774: GO 99821
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
99776: LD_VAR 0 1
99780: PUSH
99781: LD_INT 1
99783: PPUSH
99784: LD_VAR 0 1
99788: PPUSH
99789: CALL_OW 12
99793: ARRAY
99794: PPUSH
99795: LD_INT 1
99797: PPUSH
99798: LD_INT 4
99800: PPUSH
99801: CALL_OW 12
99805: PPUSH
99806: LD_INT 3000
99808: PPUSH
99809: LD_INT 9000
99811: PPUSH
99812: CALL_OW 12
99816: PPUSH
99817: CALL_OW 492
// end ;
99821: PPOPN 1
99823: END
// every 0 0$1 trigger StreamModeActive and sDepot do
99824: LD_EXP 122
99828: PUSH
99829: LD_EXP 137
99833: AND
99834: IFFALSE 99854
99836: GO 99838
99838: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
99839: LD_INT 1
99841: PPUSH
99842: LD_OWVAR 2
99846: PPUSH
99847: LD_INT 0
99849: PPUSH
99850: CALL_OW 324
99854: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
99855: LD_EXP 122
99859: PUSH
99860: LD_EXP 138
99864: AND
99865: IFFALSE 99948
99867: GO 99869
99869: DISABLE
99870: LD_INT 0
99872: PPUSH
99873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
99874: LD_ADDR_VAR 0 2
99878: PUSH
99879: LD_INT 22
99881: PUSH
99882: LD_OWVAR 2
99886: PUSH
99887: EMPTY
99888: LIST
99889: LIST
99890: PUSH
99891: LD_INT 21
99893: PUSH
99894: LD_INT 3
99896: PUSH
99897: EMPTY
99898: LIST
99899: LIST
99900: PUSH
99901: EMPTY
99902: LIST
99903: LIST
99904: PPUSH
99905: CALL_OW 69
99909: ST_TO_ADDR
// if not tmp then
99910: LD_VAR 0 2
99914: NOT
99915: IFFALSE 99919
// exit ;
99917: GO 99948
// for i in tmp do
99919: LD_ADDR_VAR 0 1
99923: PUSH
99924: LD_VAR 0 2
99928: PUSH
99929: FOR_IN
99930: IFFALSE 99946
// SetBLevel ( i , 10 ) ;
99932: LD_VAR 0 1
99936: PPUSH
99937: LD_INT 10
99939: PPUSH
99940: CALL_OW 241
99944: GO 99929
99946: POP
99947: POP
// end ;
99948: PPOPN 2
99950: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
99951: LD_EXP 122
99955: PUSH
99956: LD_EXP 139
99960: AND
99961: IFFALSE 100072
99963: GO 99965
99965: DISABLE
99966: LD_INT 0
99968: PPUSH
99969: PPUSH
99970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99971: LD_ADDR_VAR 0 3
99975: PUSH
99976: LD_INT 22
99978: PUSH
99979: LD_OWVAR 2
99983: PUSH
99984: EMPTY
99985: LIST
99986: LIST
99987: PUSH
99988: LD_INT 25
99990: PUSH
99991: LD_INT 1
99993: PUSH
99994: EMPTY
99995: LIST
99996: LIST
99997: PUSH
99998: EMPTY
99999: LIST
100000: LIST
100001: PPUSH
100002: CALL_OW 69
100006: ST_TO_ADDR
// if not tmp then
100007: LD_VAR 0 3
100011: NOT
100012: IFFALSE 100016
// exit ;
100014: GO 100072
// un := tmp [ rand ( 1 , tmp ) ] ;
100016: LD_ADDR_VAR 0 2
100020: PUSH
100021: LD_VAR 0 3
100025: PUSH
100026: LD_INT 1
100028: PPUSH
100029: LD_VAR 0 3
100033: PPUSH
100034: CALL_OW 12
100038: ARRAY
100039: ST_TO_ADDR
// if Crawls ( un ) then
100040: LD_VAR 0 2
100044: PPUSH
100045: CALL_OW 318
100049: IFFALSE 100060
// ComWalk ( un ) ;
100051: LD_VAR 0 2
100055: PPUSH
100056: CALL_OW 138
// SetClass ( un , class_sniper ) ;
100060: LD_VAR 0 2
100064: PPUSH
100065: LD_INT 5
100067: PPUSH
100068: CALL_OW 336
// end ;
100072: PPOPN 3
100074: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
100075: LD_EXP 122
100079: PUSH
100080: LD_EXP 140
100084: AND
100085: PUSH
100086: LD_OWVAR 67
100090: PUSH
100091: LD_INT 3
100093: LESS
100094: AND
100095: IFFALSE 100114
100097: GO 100099
100099: DISABLE
// Difficulty := Difficulty + 1 ;
100100: LD_ADDR_OWVAR 67
100104: PUSH
100105: LD_OWVAR 67
100109: PUSH
100110: LD_INT 1
100112: PLUS
100113: ST_TO_ADDR
100114: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
100115: LD_EXP 122
100119: PUSH
100120: LD_EXP 141
100124: AND
100125: IFFALSE 100228
100127: GO 100129
100129: DISABLE
100130: LD_INT 0
100132: PPUSH
// begin for i := 1 to 5 do
100133: LD_ADDR_VAR 0 1
100137: PUSH
100138: DOUBLE
100139: LD_INT 1
100141: DEC
100142: ST_TO_ADDR
100143: LD_INT 5
100145: PUSH
100146: FOR_TO
100147: IFFALSE 100226
// begin uc_nation := nation_nature ;
100149: LD_ADDR_OWVAR 21
100153: PUSH
100154: LD_INT 0
100156: ST_TO_ADDR
// uc_side := 0 ;
100157: LD_ADDR_OWVAR 20
100161: PUSH
100162: LD_INT 0
100164: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
100165: LD_ADDR_OWVAR 29
100169: PUSH
100170: LD_INT 12
100172: PUSH
100173: LD_INT 12
100175: PUSH
100176: EMPTY
100177: LIST
100178: LIST
100179: ST_TO_ADDR
// hc_agressivity := 20 ;
100180: LD_ADDR_OWVAR 35
100184: PUSH
100185: LD_INT 20
100187: ST_TO_ADDR
// hc_class := class_tiger ;
100188: LD_ADDR_OWVAR 28
100192: PUSH
100193: LD_INT 14
100195: ST_TO_ADDR
// hc_gallery :=  ;
100196: LD_ADDR_OWVAR 33
100200: PUSH
100201: LD_STRING 
100203: ST_TO_ADDR
// hc_name :=  ;
100204: LD_ADDR_OWVAR 26
100208: PUSH
100209: LD_STRING 
100211: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
100212: CALL_OW 44
100216: PPUSH
100217: LD_INT 0
100219: PPUSH
100220: CALL_OW 51
// end ;
100224: GO 100146
100226: POP
100227: POP
// end ;
100228: PPOPN 1
100230: END
// every 0 0$1 trigger StreamModeActive and sBomb do
100231: LD_EXP 122
100235: PUSH
100236: LD_EXP 142
100240: AND
100241: IFFALSE 100250
100243: GO 100245
100245: DISABLE
// StreamSibBomb ;
100246: CALL 100251 0 0
100250: END
// export function StreamSibBomb ; var i , x , y ; begin
100251: LD_INT 0
100253: PPUSH
100254: PPUSH
100255: PPUSH
100256: PPUSH
// result := false ;
100257: LD_ADDR_VAR 0 1
100261: PUSH
100262: LD_INT 0
100264: ST_TO_ADDR
// for i := 1 to 16 do
100265: LD_ADDR_VAR 0 2
100269: PUSH
100270: DOUBLE
100271: LD_INT 1
100273: DEC
100274: ST_TO_ADDR
100275: LD_INT 16
100277: PUSH
100278: FOR_TO
100279: IFFALSE 100478
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
100281: LD_ADDR_VAR 0 3
100285: PUSH
100286: LD_INT 10
100288: PUSH
100289: LD_INT 20
100291: PUSH
100292: LD_INT 30
100294: PUSH
100295: LD_INT 40
100297: PUSH
100298: LD_INT 50
100300: PUSH
100301: LD_INT 60
100303: PUSH
100304: LD_INT 70
100306: PUSH
100307: LD_INT 80
100309: PUSH
100310: LD_INT 90
100312: PUSH
100313: LD_INT 100
100315: PUSH
100316: LD_INT 110
100318: PUSH
100319: LD_INT 120
100321: PUSH
100322: LD_INT 130
100324: PUSH
100325: LD_INT 140
100327: PUSH
100328: LD_INT 150
100330: PUSH
100331: EMPTY
100332: LIST
100333: LIST
100334: LIST
100335: LIST
100336: LIST
100337: LIST
100338: LIST
100339: LIST
100340: LIST
100341: LIST
100342: LIST
100343: LIST
100344: LIST
100345: LIST
100346: LIST
100347: PUSH
100348: LD_INT 1
100350: PPUSH
100351: LD_INT 15
100353: PPUSH
100354: CALL_OW 12
100358: ARRAY
100359: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
100360: LD_ADDR_VAR 0 4
100364: PUSH
100365: LD_INT 10
100367: PUSH
100368: LD_INT 20
100370: PUSH
100371: LD_INT 30
100373: PUSH
100374: LD_INT 40
100376: PUSH
100377: LD_INT 50
100379: PUSH
100380: LD_INT 60
100382: PUSH
100383: LD_INT 70
100385: PUSH
100386: LD_INT 80
100388: PUSH
100389: LD_INT 90
100391: PUSH
100392: LD_INT 100
100394: PUSH
100395: LD_INT 110
100397: PUSH
100398: LD_INT 120
100400: PUSH
100401: LD_INT 130
100403: PUSH
100404: LD_INT 140
100406: PUSH
100407: LD_INT 150
100409: PUSH
100410: EMPTY
100411: LIST
100412: LIST
100413: LIST
100414: LIST
100415: LIST
100416: LIST
100417: LIST
100418: LIST
100419: LIST
100420: LIST
100421: LIST
100422: LIST
100423: LIST
100424: LIST
100425: LIST
100426: PUSH
100427: LD_INT 1
100429: PPUSH
100430: LD_INT 15
100432: PPUSH
100433: CALL_OW 12
100437: ARRAY
100438: ST_TO_ADDR
// if ValidHex ( x , y ) then
100439: LD_VAR 0 3
100443: PPUSH
100444: LD_VAR 0 4
100448: PPUSH
100449: CALL_OW 488
100453: IFFALSE 100476
// begin result := [ x , y ] ;
100455: LD_ADDR_VAR 0 1
100459: PUSH
100460: LD_VAR 0 3
100464: PUSH
100465: LD_VAR 0 4
100469: PUSH
100470: EMPTY
100471: LIST
100472: LIST
100473: ST_TO_ADDR
// break ;
100474: GO 100478
// end ; end ;
100476: GO 100278
100478: POP
100479: POP
// if result then
100480: LD_VAR 0 1
100484: IFFALSE 100544
// begin ToLua ( playSibBomb() ) ;
100486: LD_STRING playSibBomb()
100488: PPUSH
100489: CALL_OW 559
// wait ( 0 0$14 ) ;
100493: LD_INT 490
100495: PPUSH
100496: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
100500: LD_VAR 0 1
100504: PUSH
100505: LD_INT 1
100507: ARRAY
100508: PPUSH
100509: LD_VAR 0 1
100513: PUSH
100514: LD_INT 2
100516: ARRAY
100517: PPUSH
100518: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
100522: LD_VAR 0 1
100526: PUSH
100527: LD_INT 1
100529: ARRAY
100530: PPUSH
100531: LD_VAR 0 1
100535: PUSH
100536: LD_INT 2
100538: ARRAY
100539: PPUSH
100540: CALL_OW 429
// end ; end ;
100544: LD_VAR 0 1
100548: RET
// every 0 0$1 trigger StreamModeActive and sReset do
100549: LD_EXP 122
100553: PUSH
100554: LD_EXP 144
100558: AND
100559: IFFALSE 100571
100561: GO 100563
100563: DISABLE
// YouLost (  ) ;
100564: LD_STRING 
100566: PPUSH
100567: CALL_OW 104
100571: END
// every 0 0$1 trigger StreamModeActive and sFog do
100572: LD_EXP 122
100576: PUSH
100577: LD_EXP 143
100581: AND
100582: IFFALSE 100596
100584: GO 100586
100586: DISABLE
// FogOff ( your_side ) ;
100587: LD_OWVAR 2
100591: PPUSH
100592: CALL_OW 344
100596: END
// every 0 0$1 trigger StreamModeActive and sSun do
100597: LD_EXP 122
100601: PUSH
100602: LD_EXP 145
100606: AND
100607: IFFALSE 100635
100609: GO 100611
100611: DISABLE
// begin solar_recharge_percent := 0 ;
100612: LD_ADDR_OWVAR 79
100616: PUSH
100617: LD_INT 0
100619: ST_TO_ADDR
// wait ( 5 5$00 ) ;
100620: LD_INT 10500
100622: PPUSH
100623: CALL_OW 67
// solar_recharge_percent := 100 ;
100627: LD_ADDR_OWVAR 79
100631: PUSH
100632: LD_INT 100
100634: ST_TO_ADDR
// end ;
100635: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
100636: LD_EXP 122
100640: PUSH
100641: LD_EXP 146
100645: AND
100646: IFFALSE 100885
100648: GO 100650
100650: DISABLE
100651: LD_INT 0
100653: PPUSH
100654: PPUSH
100655: PPUSH
// begin tmp := [ ] ;
100656: LD_ADDR_VAR 0 3
100660: PUSH
100661: EMPTY
100662: ST_TO_ADDR
// for i := 1 to 6 do
100663: LD_ADDR_VAR 0 1
100667: PUSH
100668: DOUBLE
100669: LD_INT 1
100671: DEC
100672: ST_TO_ADDR
100673: LD_INT 6
100675: PUSH
100676: FOR_TO
100677: IFFALSE 100782
// begin uc_nation := nation_nature ;
100679: LD_ADDR_OWVAR 21
100683: PUSH
100684: LD_INT 0
100686: ST_TO_ADDR
// uc_side := 0 ;
100687: LD_ADDR_OWVAR 20
100691: PUSH
100692: LD_INT 0
100694: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
100695: LD_ADDR_OWVAR 29
100699: PUSH
100700: LD_INT 12
100702: PUSH
100703: LD_INT 12
100705: PUSH
100706: EMPTY
100707: LIST
100708: LIST
100709: ST_TO_ADDR
// hc_agressivity := 20 ;
100710: LD_ADDR_OWVAR 35
100714: PUSH
100715: LD_INT 20
100717: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
100718: LD_ADDR_OWVAR 28
100722: PUSH
100723: LD_INT 17
100725: ST_TO_ADDR
// hc_gallery :=  ;
100726: LD_ADDR_OWVAR 33
100730: PUSH
100731: LD_STRING 
100733: ST_TO_ADDR
// hc_name :=  ;
100734: LD_ADDR_OWVAR 26
100738: PUSH
100739: LD_STRING 
100741: ST_TO_ADDR
// un := CreateHuman ;
100742: LD_ADDR_VAR 0 2
100746: PUSH
100747: CALL_OW 44
100751: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
100752: LD_VAR 0 2
100756: PPUSH
100757: LD_INT 1
100759: PPUSH
100760: CALL_OW 51
// tmp := tmp ^ un ;
100764: LD_ADDR_VAR 0 3
100768: PUSH
100769: LD_VAR 0 3
100773: PUSH
100774: LD_VAR 0 2
100778: ADD
100779: ST_TO_ADDR
// end ;
100780: GO 100676
100782: POP
100783: POP
// repeat wait ( 0 0$1 ) ;
100784: LD_INT 35
100786: PPUSH
100787: CALL_OW 67
// for un in tmp do
100791: LD_ADDR_VAR 0 2
100795: PUSH
100796: LD_VAR 0 3
100800: PUSH
100801: FOR_IN
100802: IFFALSE 100876
// begin if IsDead ( un ) then
100804: LD_VAR 0 2
100808: PPUSH
100809: CALL_OW 301
100813: IFFALSE 100833
// begin tmp := tmp diff un ;
100815: LD_ADDR_VAR 0 3
100819: PUSH
100820: LD_VAR 0 3
100824: PUSH
100825: LD_VAR 0 2
100829: DIFF
100830: ST_TO_ADDR
// continue ;
100831: GO 100801
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
100833: LD_VAR 0 2
100837: PPUSH
100838: LD_INT 3
100840: PUSH
100841: LD_INT 22
100843: PUSH
100844: LD_INT 0
100846: PUSH
100847: EMPTY
100848: LIST
100849: LIST
100850: PUSH
100851: EMPTY
100852: LIST
100853: LIST
100854: PPUSH
100855: CALL_OW 69
100859: PPUSH
100860: LD_VAR 0 2
100864: PPUSH
100865: CALL_OW 74
100869: PPUSH
100870: CALL_OW 115
// end ;
100874: GO 100801
100876: POP
100877: POP
// until not tmp ;
100878: LD_VAR 0 3
100882: NOT
100883: IFFALSE 100784
// end ;
100885: PPOPN 3
100887: END
// every 0 0$1 trigger StreamModeActive and sTroll do
100888: LD_EXP 122
100892: PUSH
100893: LD_EXP 147
100897: AND
100898: IFFALSE 100952
100900: GO 100902
100902: DISABLE
// begin ToLua ( displayTroll(); ) ;
100903: LD_STRING displayTroll();
100905: PPUSH
100906: CALL_OW 559
// wait ( 3 3$00 ) ;
100910: LD_INT 6300
100912: PPUSH
100913: CALL_OW 67
// ToLua ( hideTroll(); ) ;
100917: LD_STRING hideTroll();
100919: PPUSH
100920: CALL_OW 559
// wait ( 1 1$00 ) ;
100924: LD_INT 2100
100926: PPUSH
100927: CALL_OW 67
// ToLua ( displayTroll(); ) ;
100931: LD_STRING displayTroll();
100933: PPUSH
100934: CALL_OW 559
// wait ( 1 1$00 ) ;
100938: LD_INT 2100
100940: PPUSH
100941: CALL_OW 67
// ToLua ( hideTroll(); ) ;
100945: LD_STRING hideTroll();
100947: PPUSH
100948: CALL_OW 559
// end ;
100952: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
100953: LD_EXP 122
100957: PUSH
100958: LD_EXP 148
100962: AND
100963: IFFALSE 101026
100965: GO 100967
100967: DISABLE
100968: LD_INT 0
100970: PPUSH
// begin p := 0 ;
100971: LD_ADDR_VAR 0 1
100975: PUSH
100976: LD_INT 0
100978: ST_TO_ADDR
// repeat game_speed := 1 ;
100979: LD_ADDR_OWVAR 65
100983: PUSH
100984: LD_INT 1
100986: ST_TO_ADDR
// wait ( 0 0$1 ) ;
100987: LD_INT 35
100989: PPUSH
100990: CALL_OW 67
// p := p + 1 ;
100994: LD_ADDR_VAR 0 1
100998: PUSH
100999: LD_VAR 0 1
101003: PUSH
101004: LD_INT 1
101006: PLUS
101007: ST_TO_ADDR
// until p >= 60 ;
101008: LD_VAR 0 1
101012: PUSH
101013: LD_INT 60
101015: GREATEREQUAL
101016: IFFALSE 100979
// game_speed := 4 ;
101018: LD_ADDR_OWVAR 65
101022: PUSH
101023: LD_INT 4
101025: ST_TO_ADDR
// end ;
101026: PPOPN 1
101028: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
101029: LD_EXP 122
101033: PUSH
101034: LD_EXP 149
101038: AND
101039: IFFALSE 101185
101041: GO 101043
101043: DISABLE
101044: LD_INT 0
101046: PPUSH
101047: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
101048: LD_ADDR_VAR 0 1
101052: PUSH
101053: LD_INT 22
101055: PUSH
101056: LD_OWVAR 2
101060: PUSH
101061: EMPTY
101062: LIST
101063: LIST
101064: PUSH
101065: LD_INT 2
101067: PUSH
101068: LD_INT 30
101070: PUSH
101071: LD_INT 0
101073: PUSH
101074: EMPTY
101075: LIST
101076: LIST
101077: PUSH
101078: LD_INT 30
101080: PUSH
101081: LD_INT 1
101083: PUSH
101084: EMPTY
101085: LIST
101086: LIST
101087: PUSH
101088: EMPTY
101089: LIST
101090: LIST
101091: LIST
101092: PUSH
101093: EMPTY
101094: LIST
101095: LIST
101096: PPUSH
101097: CALL_OW 69
101101: ST_TO_ADDR
// if not depot then
101102: LD_VAR 0 1
101106: NOT
101107: IFFALSE 101111
// exit ;
101109: GO 101185
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
101111: LD_ADDR_VAR 0 2
101115: PUSH
101116: LD_VAR 0 1
101120: PUSH
101121: LD_INT 1
101123: PPUSH
101124: LD_VAR 0 1
101128: PPUSH
101129: CALL_OW 12
101133: ARRAY
101134: PPUSH
101135: CALL_OW 274
101139: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
101140: LD_VAR 0 2
101144: PPUSH
101145: LD_INT 1
101147: PPUSH
101148: LD_INT 0
101150: PPUSH
101151: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
101155: LD_VAR 0 2
101159: PPUSH
101160: LD_INT 2
101162: PPUSH
101163: LD_INT 0
101165: PPUSH
101166: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
101170: LD_VAR 0 2
101174: PPUSH
101175: LD_INT 3
101177: PPUSH
101178: LD_INT 0
101180: PPUSH
101181: CALL_OW 277
// end ;
101185: PPOPN 2
101187: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
101188: LD_EXP 122
101192: PUSH
101193: LD_EXP 150
101197: AND
101198: IFFALSE 101295
101200: GO 101202
101202: DISABLE
101203: LD_INT 0
101205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
101206: LD_ADDR_VAR 0 1
101210: PUSH
101211: LD_INT 22
101213: PUSH
101214: LD_OWVAR 2
101218: PUSH
101219: EMPTY
101220: LIST
101221: LIST
101222: PUSH
101223: LD_INT 21
101225: PUSH
101226: LD_INT 1
101228: PUSH
101229: EMPTY
101230: LIST
101231: LIST
101232: PUSH
101233: LD_INT 3
101235: PUSH
101236: LD_INT 23
101238: PUSH
101239: LD_INT 0
101241: PUSH
101242: EMPTY
101243: LIST
101244: LIST
101245: PUSH
101246: EMPTY
101247: LIST
101248: LIST
101249: PUSH
101250: EMPTY
101251: LIST
101252: LIST
101253: LIST
101254: PPUSH
101255: CALL_OW 69
101259: ST_TO_ADDR
// if not tmp then
101260: LD_VAR 0 1
101264: NOT
101265: IFFALSE 101269
// exit ;
101267: GO 101295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
101269: LD_VAR 0 1
101273: PUSH
101274: LD_INT 1
101276: PPUSH
101277: LD_VAR 0 1
101281: PPUSH
101282: CALL_OW 12
101286: ARRAY
101287: PPUSH
101288: LD_INT 200
101290: PPUSH
101291: CALL_OW 234
// end ;
101295: PPOPN 1
101297: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
101298: LD_EXP 122
101302: PUSH
101303: LD_EXP 151
101307: AND
101308: IFFALSE 101387
101310: GO 101312
101312: DISABLE
101313: LD_INT 0
101315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
101316: LD_ADDR_VAR 0 1
101320: PUSH
101321: LD_INT 22
101323: PUSH
101324: LD_OWVAR 2
101328: PUSH
101329: EMPTY
101330: LIST
101331: LIST
101332: PUSH
101333: LD_INT 21
101335: PUSH
101336: LD_INT 2
101338: PUSH
101339: EMPTY
101340: LIST
101341: LIST
101342: PUSH
101343: EMPTY
101344: LIST
101345: LIST
101346: PPUSH
101347: CALL_OW 69
101351: ST_TO_ADDR
// if not tmp then
101352: LD_VAR 0 1
101356: NOT
101357: IFFALSE 101361
// exit ;
101359: GO 101387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
101361: LD_VAR 0 1
101365: PUSH
101366: LD_INT 1
101368: PPUSH
101369: LD_VAR 0 1
101373: PPUSH
101374: CALL_OW 12
101378: ARRAY
101379: PPUSH
101380: LD_INT 60
101382: PPUSH
101383: CALL_OW 234
// end ;
101387: PPOPN 1
101389: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
101390: LD_EXP 122
101394: PUSH
101395: LD_EXP 152
101399: AND
101400: IFFALSE 101499
101402: GO 101404
101404: DISABLE
101405: LD_INT 0
101407: PPUSH
101408: PPUSH
// begin enable ;
101409: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
101410: LD_ADDR_VAR 0 1
101414: PUSH
101415: LD_INT 22
101417: PUSH
101418: LD_OWVAR 2
101422: PUSH
101423: EMPTY
101424: LIST
101425: LIST
101426: PUSH
101427: LD_INT 61
101429: PUSH
101430: EMPTY
101431: LIST
101432: PUSH
101433: LD_INT 33
101435: PUSH
101436: LD_INT 2
101438: PUSH
101439: EMPTY
101440: LIST
101441: LIST
101442: PUSH
101443: EMPTY
101444: LIST
101445: LIST
101446: LIST
101447: PPUSH
101448: CALL_OW 69
101452: ST_TO_ADDR
// if not tmp then
101453: LD_VAR 0 1
101457: NOT
101458: IFFALSE 101462
// exit ;
101460: GO 101499
// for i in tmp do
101462: LD_ADDR_VAR 0 2
101466: PUSH
101467: LD_VAR 0 1
101471: PUSH
101472: FOR_IN
101473: IFFALSE 101497
// if IsControledBy ( i ) then
101475: LD_VAR 0 2
101479: PPUSH
101480: CALL_OW 312
101484: IFFALSE 101495
// ComUnlink ( i ) ;
101486: LD_VAR 0 2
101490: PPUSH
101491: CALL_OW 136
101495: GO 101472
101497: POP
101498: POP
// end ;
101499: PPOPN 2
101501: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
101502: LD_EXP 122
101506: PUSH
101507: LD_EXP 153
101511: AND
101512: IFFALSE 101652
101514: GO 101516
101516: DISABLE
101517: LD_INT 0
101519: PPUSH
101520: PPUSH
// begin ToLua ( displayPowell(); ) ;
101521: LD_STRING displayPowell();
101523: PPUSH
101524: CALL_OW 559
// uc_side := 0 ;
101528: LD_ADDR_OWVAR 20
101532: PUSH
101533: LD_INT 0
101535: ST_TO_ADDR
// uc_nation := 2 ;
101536: LD_ADDR_OWVAR 21
101540: PUSH
101541: LD_INT 2
101543: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
101544: LD_ADDR_OWVAR 37
101548: PUSH
101549: LD_INT 14
101551: ST_TO_ADDR
// vc_engine := engine_siberite ;
101552: LD_ADDR_OWVAR 39
101556: PUSH
101557: LD_INT 3
101559: ST_TO_ADDR
// vc_control := control_apeman ;
101560: LD_ADDR_OWVAR 38
101564: PUSH
101565: LD_INT 5
101567: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
101568: LD_ADDR_OWVAR 40
101572: PUSH
101573: LD_INT 29
101575: ST_TO_ADDR
// un := CreateVehicle ;
101576: LD_ADDR_VAR 0 2
101580: PUSH
101581: CALL_OW 45
101585: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
101586: LD_VAR 0 2
101590: PPUSH
101591: LD_INT 1
101593: PPUSH
101594: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
101598: LD_INT 35
101600: PPUSH
101601: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
101605: LD_VAR 0 2
101609: PPUSH
101610: LD_INT 22
101612: PUSH
101613: LD_OWVAR 2
101617: PUSH
101618: EMPTY
101619: LIST
101620: LIST
101621: PPUSH
101622: CALL_OW 69
101626: PPUSH
101627: LD_VAR 0 2
101631: PPUSH
101632: CALL_OW 74
101636: PPUSH
101637: CALL_OW 115
// until IsDead ( un ) ;
101641: LD_VAR 0 2
101645: PPUSH
101646: CALL_OW 301
101650: IFFALSE 101598
// end ;
101652: PPOPN 2
101654: END
// every 0 0$1 trigger StreamModeActive and sStu do
101655: LD_EXP 122
101659: PUSH
101660: LD_EXP 161
101664: AND
101665: IFFALSE 101681
101667: GO 101669
101669: DISABLE
// begin ToLua ( displayStucuk(); ) ;
101670: LD_STRING displayStucuk();
101672: PPUSH
101673: CALL_OW 559
// ResetFog ;
101677: CALL_OW 335
// end ;
101681: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
101682: LD_EXP 122
101686: PUSH
101687: LD_EXP 154
101691: AND
101692: IFFALSE 101833
101694: GO 101696
101696: DISABLE
101697: LD_INT 0
101699: PPUSH
101700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
101701: LD_ADDR_VAR 0 2
101705: PUSH
101706: LD_INT 22
101708: PUSH
101709: LD_OWVAR 2
101713: PUSH
101714: EMPTY
101715: LIST
101716: LIST
101717: PUSH
101718: LD_INT 21
101720: PUSH
101721: LD_INT 1
101723: PUSH
101724: EMPTY
101725: LIST
101726: LIST
101727: PUSH
101728: EMPTY
101729: LIST
101730: LIST
101731: PPUSH
101732: CALL_OW 69
101736: ST_TO_ADDR
// if not tmp then
101737: LD_VAR 0 2
101741: NOT
101742: IFFALSE 101746
// exit ;
101744: GO 101833
// un := tmp [ rand ( 1 , tmp ) ] ;
101746: LD_ADDR_VAR 0 1
101750: PUSH
101751: LD_VAR 0 2
101755: PUSH
101756: LD_INT 1
101758: PPUSH
101759: LD_VAR 0 2
101763: PPUSH
101764: CALL_OW 12
101768: ARRAY
101769: ST_TO_ADDR
// SetSide ( un , 0 ) ;
101770: LD_VAR 0 1
101774: PPUSH
101775: LD_INT 0
101777: PPUSH
101778: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
101782: LD_VAR 0 1
101786: PPUSH
101787: LD_OWVAR 3
101791: PUSH
101792: LD_VAR 0 1
101796: DIFF
101797: PPUSH
101798: LD_VAR 0 1
101802: PPUSH
101803: CALL_OW 74
101807: PPUSH
101808: CALL_OW 115
// wait ( 0 0$20 ) ;
101812: LD_INT 700
101814: PPUSH
101815: CALL_OW 67
// SetSide ( un , your_side ) ;
101819: LD_VAR 0 1
101823: PPUSH
101824: LD_OWVAR 2
101828: PPUSH
101829: CALL_OW 235
// end ;
101833: PPOPN 2
101835: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
101836: LD_EXP 122
101840: PUSH
101841: LD_EXP 155
101845: AND
101846: IFFALSE 101952
101848: GO 101850
101850: DISABLE
101851: LD_INT 0
101853: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
101854: LD_ADDR_VAR 0 1
101858: PUSH
101859: LD_INT 22
101861: PUSH
101862: LD_OWVAR 2
101866: PUSH
101867: EMPTY
101868: LIST
101869: LIST
101870: PUSH
101871: LD_INT 2
101873: PUSH
101874: LD_INT 30
101876: PUSH
101877: LD_INT 0
101879: PUSH
101880: EMPTY
101881: LIST
101882: LIST
101883: PUSH
101884: LD_INT 30
101886: PUSH
101887: LD_INT 1
101889: PUSH
101890: EMPTY
101891: LIST
101892: LIST
101893: PUSH
101894: EMPTY
101895: LIST
101896: LIST
101897: LIST
101898: PUSH
101899: EMPTY
101900: LIST
101901: LIST
101902: PPUSH
101903: CALL_OW 69
101907: ST_TO_ADDR
// if not depot then
101908: LD_VAR 0 1
101912: NOT
101913: IFFALSE 101917
// exit ;
101915: GO 101952
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
101917: LD_VAR 0 1
101921: PUSH
101922: LD_INT 1
101924: ARRAY
101925: PPUSH
101926: CALL_OW 250
101930: PPUSH
101931: LD_VAR 0 1
101935: PUSH
101936: LD_INT 1
101938: ARRAY
101939: PPUSH
101940: CALL_OW 251
101944: PPUSH
101945: LD_INT 70
101947: PPUSH
101948: CALL_OW 495
// end ;
101952: PPOPN 1
101954: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
101955: LD_EXP 122
101959: PUSH
101960: LD_EXP 156
101964: AND
101965: IFFALSE 102176
101967: GO 101969
101969: DISABLE
101970: LD_INT 0
101972: PPUSH
101973: PPUSH
101974: PPUSH
101975: PPUSH
101976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
101977: LD_ADDR_VAR 0 5
101981: PUSH
101982: LD_INT 22
101984: PUSH
101985: LD_OWVAR 2
101989: PUSH
101990: EMPTY
101991: LIST
101992: LIST
101993: PUSH
101994: LD_INT 21
101996: PUSH
101997: LD_INT 1
101999: PUSH
102000: EMPTY
102001: LIST
102002: LIST
102003: PUSH
102004: EMPTY
102005: LIST
102006: LIST
102007: PPUSH
102008: CALL_OW 69
102012: ST_TO_ADDR
// if not tmp then
102013: LD_VAR 0 5
102017: NOT
102018: IFFALSE 102022
// exit ;
102020: GO 102176
// for i in tmp do
102022: LD_ADDR_VAR 0 1
102026: PUSH
102027: LD_VAR 0 5
102031: PUSH
102032: FOR_IN
102033: IFFALSE 102174
// begin d := rand ( 0 , 5 ) ;
102035: LD_ADDR_VAR 0 4
102039: PUSH
102040: LD_INT 0
102042: PPUSH
102043: LD_INT 5
102045: PPUSH
102046: CALL_OW 12
102050: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
102051: LD_ADDR_VAR 0 2
102055: PUSH
102056: LD_VAR 0 1
102060: PPUSH
102061: CALL_OW 250
102065: PPUSH
102066: LD_VAR 0 4
102070: PPUSH
102071: LD_INT 3
102073: PPUSH
102074: LD_INT 12
102076: PPUSH
102077: CALL_OW 12
102081: PPUSH
102082: CALL_OW 272
102086: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
102087: LD_ADDR_VAR 0 3
102091: PUSH
102092: LD_VAR 0 1
102096: PPUSH
102097: CALL_OW 251
102101: PPUSH
102102: LD_VAR 0 4
102106: PPUSH
102107: LD_INT 3
102109: PPUSH
102110: LD_INT 12
102112: PPUSH
102113: CALL_OW 12
102117: PPUSH
102118: CALL_OW 273
102122: ST_TO_ADDR
// if ValidHex ( x , y ) then
102123: LD_VAR 0 2
102127: PPUSH
102128: LD_VAR 0 3
102132: PPUSH
102133: CALL_OW 488
102137: IFFALSE 102172
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
102139: LD_VAR 0 1
102143: PPUSH
102144: LD_VAR 0 2
102148: PPUSH
102149: LD_VAR 0 3
102153: PPUSH
102154: LD_INT 3
102156: PPUSH
102157: LD_INT 6
102159: PPUSH
102160: CALL_OW 12
102164: PPUSH
102165: LD_INT 1
102167: PPUSH
102168: CALL_OW 483
// end ;
102172: GO 102032
102174: POP
102175: POP
// end ;
102176: PPOPN 5
102178: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
102179: LD_EXP 122
102183: PUSH
102184: LD_EXP 157
102188: AND
102189: IFFALSE 102283
102191: GO 102193
102193: DISABLE
102194: LD_INT 0
102196: PPUSH
102197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
102198: LD_ADDR_VAR 0 2
102202: PUSH
102203: LD_INT 22
102205: PUSH
102206: LD_OWVAR 2
102210: PUSH
102211: EMPTY
102212: LIST
102213: LIST
102214: PUSH
102215: LD_INT 32
102217: PUSH
102218: LD_INT 1
102220: PUSH
102221: EMPTY
102222: LIST
102223: LIST
102224: PUSH
102225: LD_INT 21
102227: PUSH
102228: LD_INT 2
102230: PUSH
102231: EMPTY
102232: LIST
102233: LIST
102234: PUSH
102235: EMPTY
102236: LIST
102237: LIST
102238: LIST
102239: PPUSH
102240: CALL_OW 69
102244: ST_TO_ADDR
// if not tmp then
102245: LD_VAR 0 2
102249: NOT
102250: IFFALSE 102254
// exit ;
102252: GO 102283
// for i in tmp do
102254: LD_ADDR_VAR 0 1
102258: PUSH
102259: LD_VAR 0 2
102263: PUSH
102264: FOR_IN
102265: IFFALSE 102281
// SetFuel ( i , 0 ) ;
102267: LD_VAR 0 1
102271: PPUSH
102272: LD_INT 0
102274: PPUSH
102275: CALL_OW 240
102279: GO 102264
102281: POP
102282: POP
// end ;
102283: PPOPN 2
102285: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
102286: LD_EXP 122
102290: PUSH
102291: LD_EXP 158
102295: AND
102296: IFFALSE 102362
102298: GO 102300
102300: DISABLE
102301: LD_INT 0
102303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
102304: LD_ADDR_VAR 0 1
102308: PUSH
102309: LD_INT 22
102311: PUSH
102312: LD_OWVAR 2
102316: PUSH
102317: EMPTY
102318: LIST
102319: LIST
102320: PUSH
102321: LD_INT 30
102323: PUSH
102324: LD_INT 29
102326: PUSH
102327: EMPTY
102328: LIST
102329: LIST
102330: PUSH
102331: EMPTY
102332: LIST
102333: LIST
102334: PPUSH
102335: CALL_OW 69
102339: ST_TO_ADDR
// if not tmp then
102340: LD_VAR 0 1
102344: NOT
102345: IFFALSE 102349
// exit ;
102347: GO 102362
// DestroyUnit ( tmp [ 1 ] ) ;
102349: LD_VAR 0 1
102353: PUSH
102354: LD_INT 1
102356: ARRAY
102357: PPUSH
102358: CALL_OW 65
// end ;
102362: PPOPN 1
102364: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
102365: LD_EXP 122
102369: PUSH
102370: LD_EXP 160
102374: AND
102375: IFFALSE 102504
102377: GO 102379
102379: DISABLE
102380: LD_INT 0
102382: PPUSH
// begin uc_side := 0 ;
102383: LD_ADDR_OWVAR 20
102387: PUSH
102388: LD_INT 0
102390: ST_TO_ADDR
// uc_nation := nation_arabian ;
102391: LD_ADDR_OWVAR 21
102395: PUSH
102396: LD_INT 2
102398: ST_TO_ADDR
// hc_gallery :=  ;
102399: LD_ADDR_OWVAR 33
102403: PUSH
102404: LD_STRING 
102406: ST_TO_ADDR
// hc_name :=  ;
102407: LD_ADDR_OWVAR 26
102411: PUSH
102412: LD_STRING 
102414: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
102415: LD_INT 1
102417: PPUSH
102418: LD_INT 11
102420: PPUSH
102421: LD_INT 10
102423: PPUSH
102424: CALL_OW 380
// un := CreateHuman ;
102428: LD_ADDR_VAR 0 1
102432: PUSH
102433: CALL_OW 44
102437: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
102438: LD_VAR 0 1
102442: PPUSH
102443: LD_INT 1
102445: PPUSH
102446: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
102450: LD_INT 35
102452: PPUSH
102453: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
102457: LD_VAR 0 1
102461: PPUSH
102462: LD_INT 22
102464: PUSH
102465: LD_OWVAR 2
102469: PUSH
102470: EMPTY
102471: LIST
102472: LIST
102473: PPUSH
102474: CALL_OW 69
102478: PPUSH
102479: LD_VAR 0 1
102483: PPUSH
102484: CALL_OW 74
102488: PPUSH
102489: CALL_OW 115
// until IsDead ( un ) ;
102493: LD_VAR 0 1
102497: PPUSH
102498: CALL_OW 301
102502: IFFALSE 102450
// end ;
102504: PPOPN 1
102506: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
102507: LD_EXP 122
102511: PUSH
102512: LD_EXP 162
102516: AND
102517: IFFALSE 102529
102519: GO 102521
102521: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
102522: LD_STRING earthquake(getX(game), 0, 32)
102524: PPUSH
102525: CALL_OW 559
102529: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
102530: LD_EXP 122
102534: PUSH
102535: LD_EXP 163
102539: AND
102540: IFFALSE 102631
102542: GO 102544
102544: DISABLE
102545: LD_INT 0
102547: PPUSH
// begin enable ;
102548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
102549: LD_ADDR_VAR 0 1
102553: PUSH
102554: LD_INT 22
102556: PUSH
102557: LD_OWVAR 2
102561: PUSH
102562: EMPTY
102563: LIST
102564: LIST
102565: PUSH
102566: LD_INT 21
102568: PUSH
102569: LD_INT 2
102571: PUSH
102572: EMPTY
102573: LIST
102574: LIST
102575: PUSH
102576: LD_INT 33
102578: PUSH
102579: LD_INT 3
102581: PUSH
102582: EMPTY
102583: LIST
102584: LIST
102585: PUSH
102586: EMPTY
102587: LIST
102588: LIST
102589: LIST
102590: PPUSH
102591: CALL_OW 69
102595: ST_TO_ADDR
// if not tmp then
102596: LD_VAR 0 1
102600: NOT
102601: IFFALSE 102605
// exit ;
102603: GO 102631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
102605: LD_VAR 0 1
102609: PUSH
102610: LD_INT 1
102612: PPUSH
102613: LD_VAR 0 1
102617: PPUSH
102618: CALL_OW 12
102622: ARRAY
102623: PPUSH
102624: LD_INT 1
102626: PPUSH
102627: CALL_OW 234
// end ;
102631: PPOPN 1
102633: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
102634: LD_EXP 122
102638: PUSH
102639: LD_EXP 164
102643: AND
102644: IFFALSE 102785
102646: GO 102648
102648: DISABLE
102649: LD_INT 0
102651: PPUSH
102652: PPUSH
102653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
102654: LD_ADDR_VAR 0 3
102658: PUSH
102659: LD_INT 22
102661: PUSH
102662: LD_OWVAR 2
102666: PUSH
102667: EMPTY
102668: LIST
102669: LIST
102670: PUSH
102671: LD_INT 25
102673: PUSH
102674: LD_INT 1
102676: PUSH
102677: EMPTY
102678: LIST
102679: LIST
102680: PUSH
102681: EMPTY
102682: LIST
102683: LIST
102684: PPUSH
102685: CALL_OW 69
102689: ST_TO_ADDR
// if not tmp then
102690: LD_VAR 0 3
102694: NOT
102695: IFFALSE 102699
// exit ;
102697: GO 102785
// un := tmp [ rand ( 1 , tmp ) ] ;
102699: LD_ADDR_VAR 0 2
102703: PUSH
102704: LD_VAR 0 3
102708: PUSH
102709: LD_INT 1
102711: PPUSH
102712: LD_VAR 0 3
102716: PPUSH
102717: CALL_OW 12
102721: ARRAY
102722: ST_TO_ADDR
// if Crawls ( un ) then
102723: LD_VAR 0 2
102727: PPUSH
102728: CALL_OW 318
102732: IFFALSE 102743
// ComWalk ( un ) ;
102734: LD_VAR 0 2
102738: PPUSH
102739: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
102743: LD_VAR 0 2
102747: PPUSH
102748: LD_INT 9
102750: PPUSH
102751: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
102755: LD_INT 28
102757: PPUSH
102758: LD_OWVAR 2
102762: PPUSH
102763: LD_INT 2
102765: PPUSH
102766: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
102770: LD_INT 29
102772: PPUSH
102773: LD_OWVAR 2
102777: PPUSH
102778: LD_INT 2
102780: PPUSH
102781: CALL_OW 322
// end ;
102785: PPOPN 3
102787: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
102788: LD_EXP 122
102792: PUSH
102793: LD_EXP 165
102797: AND
102798: IFFALSE 102909
102800: GO 102802
102802: DISABLE
102803: LD_INT 0
102805: PPUSH
102806: PPUSH
102807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
102808: LD_ADDR_VAR 0 3
102812: PUSH
102813: LD_INT 22
102815: PUSH
102816: LD_OWVAR 2
102820: PUSH
102821: EMPTY
102822: LIST
102823: LIST
102824: PUSH
102825: LD_INT 25
102827: PUSH
102828: LD_INT 1
102830: PUSH
102831: EMPTY
102832: LIST
102833: LIST
102834: PUSH
102835: EMPTY
102836: LIST
102837: LIST
102838: PPUSH
102839: CALL_OW 69
102843: ST_TO_ADDR
// if not tmp then
102844: LD_VAR 0 3
102848: NOT
102849: IFFALSE 102853
// exit ;
102851: GO 102909
// un := tmp [ rand ( 1 , tmp ) ] ;
102853: LD_ADDR_VAR 0 2
102857: PUSH
102858: LD_VAR 0 3
102862: PUSH
102863: LD_INT 1
102865: PPUSH
102866: LD_VAR 0 3
102870: PPUSH
102871: CALL_OW 12
102875: ARRAY
102876: ST_TO_ADDR
// if Crawls ( un ) then
102877: LD_VAR 0 2
102881: PPUSH
102882: CALL_OW 318
102886: IFFALSE 102897
// ComWalk ( un ) ;
102888: LD_VAR 0 2
102892: PPUSH
102893: CALL_OW 138
// SetClass ( un , class_mortar ) ;
102897: LD_VAR 0 2
102901: PPUSH
102902: LD_INT 8
102904: PPUSH
102905: CALL_OW 336
// end ;
102909: PPOPN 3
102911: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
102912: LD_EXP 122
102916: PUSH
102917: LD_EXP 166
102921: AND
102922: IFFALSE 103066
102924: GO 102926
102926: DISABLE
102927: LD_INT 0
102929: PPUSH
102930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
102931: LD_ADDR_VAR 0 2
102935: PUSH
102936: LD_INT 22
102938: PUSH
102939: LD_OWVAR 2
102943: PUSH
102944: EMPTY
102945: LIST
102946: LIST
102947: PUSH
102948: LD_INT 21
102950: PUSH
102951: LD_INT 2
102953: PUSH
102954: EMPTY
102955: LIST
102956: LIST
102957: PUSH
102958: LD_INT 2
102960: PUSH
102961: LD_INT 34
102963: PUSH
102964: LD_INT 12
102966: PUSH
102967: EMPTY
102968: LIST
102969: LIST
102970: PUSH
102971: LD_INT 34
102973: PUSH
102974: LD_INT 51
102976: PUSH
102977: EMPTY
102978: LIST
102979: LIST
102980: PUSH
102981: LD_INT 34
102983: PUSH
102984: LD_INT 32
102986: PUSH
102987: EMPTY
102988: LIST
102989: LIST
102990: PUSH
102991: EMPTY
102992: LIST
102993: LIST
102994: LIST
102995: LIST
102996: PUSH
102997: EMPTY
102998: LIST
102999: LIST
103000: LIST
103001: PPUSH
103002: CALL_OW 69
103006: ST_TO_ADDR
// if not tmp then
103007: LD_VAR 0 2
103011: NOT
103012: IFFALSE 103016
// exit ;
103014: GO 103066
// for i in tmp do
103016: LD_ADDR_VAR 0 1
103020: PUSH
103021: LD_VAR 0 2
103025: PUSH
103026: FOR_IN
103027: IFFALSE 103064
// if GetCargo ( i , mat_artifact ) = 0 then
103029: LD_VAR 0 1
103033: PPUSH
103034: LD_INT 4
103036: PPUSH
103037: CALL_OW 289
103041: PUSH
103042: LD_INT 0
103044: EQUAL
103045: IFFALSE 103062
// SetCargo ( i , mat_siberit , 100 ) ;
103047: LD_VAR 0 1
103051: PPUSH
103052: LD_INT 3
103054: PPUSH
103055: LD_INT 100
103057: PPUSH
103058: CALL_OW 290
103062: GO 103026
103064: POP
103065: POP
// end ;
103066: PPOPN 2
103068: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
103069: LD_EXP 122
103073: PUSH
103074: LD_EXP 167
103078: AND
103079: IFFALSE 103232
103081: GO 103083
103083: DISABLE
103084: LD_INT 0
103086: PPUSH
103087: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
103088: LD_ADDR_VAR 0 2
103092: PUSH
103093: LD_INT 22
103095: PUSH
103096: LD_OWVAR 2
103100: PUSH
103101: EMPTY
103102: LIST
103103: LIST
103104: PPUSH
103105: CALL_OW 69
103109: ST_TO_ADDR
// if not tmp then
103110: LD_VAR 0 2
103114: NOT
103115: IFFALSE 103119
// exit ;
103117: GO 103232
// for i := 1 to 2 do
103119: LD_ADDR_VAR 0 1
103123: PUSH
103124: DOUBLE
103125: LD_INT 1
103127: DEC
103128: ST_TO_ADDR
103129: LD_INT 2
103131: PUSH
103132: FOR_TO
103133: IFFALSE 103230
// begin uc_side := your_side ;
103135: LD_ADDR_OWVAR 20
103139: PUSH
103140: LD_OWVAR 2
103144: ST_TO_ADDR
// uc_nation := nation_american ;
103145: LD_ADDR_OWVAR 21
103149: PUSH
103150: LD_INT 1
103152: ST_TO_ADDR
// vc_chassis := us_morphling ;
103153: LD_ADDR_OWVAR 37
103157: PUSH
103158: LD_INT 5
103160: ST_TO_ADDR
// vc_engine := engine_siberite ;
103161: LD_ADDR_OWVAR 39
103165: PUSH
103166: LD_INT 3
103168: ST_TO_ADDR
// vc_control := control_computer ;
103169: LD_ADDR_OWVAR 38
103173: PUSH
103174: LD_INT 3
103176: ST_TO_ADDR
// vc_weapon := us_double_laser ;
103177: LD_ADDR_OWVAR 40
103181: PUSH
103182: LD_INT 10
103184: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
103185: CALL_OW 45
103189: PPUSH
103190: LD_VAR 0 2
103194: PUSH
103195: LD_INT 1
103197: ARRAY
103198: PPUSH
103199: CALL_OW 250
103203: PPUSH
103204: LD_VAR 0 2
103208: PUSH
103209: LD_INT 1
103211: ARRAY
103212: PPUSH
103213: CALL_OW 251
103217: PPUSH
103218: LD_INT 12
103220: PPUSH
103221: LD_INT 1
103223: PPUSH
103224: CALL_OW 50
// end ;
103228: GO 103132
103230: POP
103231: POP
// end ;
103232: PPOPN 2
103234: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
103235: LD_EXP 122
103239: PUSH
103240: LD_EXP 168
103244: AND
103245: IFFALSE 103467
103247: GO 103249
103249: DISABLE
103250: LD_INT 0
103252: PPUSH
103253: PPUSH
103254: PPUSH
103255: PPUSH
103256: PPUSH
103257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
103258: LD_ADDR_VAR 0 6
103262: PUSH
103263: LD_INT 22
103265: PUSH
103266: LD_OWVAR 2
103270: PUSH
103271: EMPTY
103272: LIST
103273: LIST
103274: PUSH
103275: LD_INT 21
103277: PUSH
103278: LD_INT 1
103280: PUSH
103281: EMPTY
103282: LIST
103283: LIST
103284: PUSH
103285: LD_INT 3
103287: PUSH
103288: LD_INT 23
103290: PUSH
103291: LD_INT 0
103293: PUSH
103294: EMPTY
103295: LIST
103296: LIST
103297: PUSH
103298: EMPTY
103299: LIST
103300: LIST
103301: PUSH
103302: EMPTY
103303: LIST
103304: LIST
103305: LIST
103306: PPUSH
103307: CALL_OW 69
103311: ST_TO_ADDR
// if not tmp then
103312: LD_VAR 0 6
103316: NOT
103317: IFFALSE 103321
// exit ;
103319: GO 103467
// s1 := rand ( 1 , 4 ) ;
103321: LD_ADDR_VAR 0 2
103325: PUSH
103326: LD_INT 1
103328: PPUSH
103329: LD_INT 4
103331: PPUSH
103332: CALL_OW 12
103336: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
103337: LD_ADDR_VAR 0 4
103341: PUSH
103342: LD_VAR 0 6
103346: PUSH
103347: LD_INT 1
103349: ARRAY
103350: PPUSH
103351: LD_VAR 0 2
103355: PPUSH
103356: CALL_OW 259
103360: ST_TO_ADDR
// if s1 = 1 then
103361: LD_VAR 0 2
103365: PUSH
103366: LD_INT 1
103368: EQUAL
103369: IFFALSE 103389
// s2 := rand ( 2 , 4 ) else
103371: LD_ADDR_VAR 0 3
103375: PUSH
103376: LD_INT 2
103378: PPUSH
103379: LD_INT 4
103381: PPUSH
103382: CALL_OW 12
103386: ST_TO_ADDR
103387: GO 103397
// s2 := 1 ;
103389: LD_ADDR_VAR 0 3
103393: PUSH
103394: LD_INT 1
103396: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
103397: LD_ADDR_VAR 0 5
103401: PUSH
103402: LD_VAR 0 6
103406: PUSH
103407: LD_INT 1
103409: ARRAY
103410: PPUSH
103411: LD_VAR 0 3
103415: PPUSH
103416: CALL_OW 259
103420: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
103421: LD_VAR 0 6
103425: PUSH
103426: LD_INT 1
103428: ARRAY
103429: PPUSH
103430: LD_VAR 0 2
103434: PPUSH
103435: LD_VAR 0 5
103439: PPUSH
103440: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
103444: LD_VAR 0 6
103448: PUSH
103449: LD_INT 1
103451: ARRAY
103452: PPUSH
103453: LD_VAR 0 3
103457: PPUSH
103458: LD_VAR 0 4
103462: PPUSH
103463: CALL_OW 237
// end ;
103467: PPOPN 6
103469: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
103470: LD_EXP 122
103474: PUSH
103475: LD_EXP 169
103479: AND
103480: IFFALSE 103559
103482: GO 103484
103484: DISABLE
103485: LD_INT 0
103487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
103488: LD_ADDR_VAR 0 1
103492: PUSH
103493: LD_INT 22
103495: PUSH
103496: LD_OWVAR 2
103500: PUSH
103501: EMPTY
103502: LIST
103503: LIST
103504: PUSH
103505: LD_INT 30
103507: PUSH
103508: LD_INT 3
103510: PUSH
103511: EMPTY
103512: LIST
103513: LIST
103514: PUSH
103515: EMPTY
103516: LIST
103517: LIST
103518: PPUSH
103519: CALL_OW 69
103523: ST_TO_ADDR
// if not tmp then
103524: LD_VAR 0 1
103528: NOT
103529: IFFALSE 103533
// exit ;
103531: GO 103559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
103533: LD_VAR 0 1
103537: PUSH
103538: LD_INT 1
103540: PPUSH
103541: LD_VAR 0 1
103545: PPUSH
103546: CALL_OW 12
103550: ARRAY
103551: PPUSH
103552: LD_INT 1
103554: PPUSH
103555: CALL_OW 234
// end ;
103559: PPOPN 1
103561: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
103562: LD_EXP 122
103566: PUSH
103567: LD_EXP 170
103571: AND
103572: IFFALSE 103684
103574: GO 103576
103576: DISABLE
103577: LD_INT 0
103579: PPUSH
103580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
103581: LD_ADDR_VAR 0 2
103585: PUSH
103586: LD_INT 22
103588: PUSH
103589: LD_OWVAR 2
103593: PUSH
103594: EMPTY
103595: LIST
103596: LIST
103597: PUSH
103598: LD_INT 2
103600: PUSH
103601: LD_INT 30
103603: PUSH
103604: LD_INT 27
103606: PUSH
103607: EMPTY
103608: LIST
103609: LIST
103610: PUSH
103611: LD_INT 30
103613: PUSH
103614: LD_INT 26
103616: PUSH
103617: EMPTY
103618: LIST
103619: LIST
103620: PUSH
103621: LD_INT 30
103623: PUSH
103624: LD_INT 28
103626: PUSH
103627: EMPTY
103628: LIST
103629: LIST
103630: PUSH
103631: EMPTY
103632: LIST
103633: LIST
103634: LIST
103635: LIST
103636: PUSH
103637: EMPTY
103638: LIST
103639: LIST
103640: PPUSH
103641: CALL_OW 69
103645: ST_TO_ADDR
// if not tmp then
103646: LD_VAR 0 2
103650: NOT
103651: IFFALSE 103655
// exit ;
103653: GO 103684
// for i in tmp do
103655: LD_ADDR_VAR 0 1
103659: PUSH
103660: LD_VAR 0 2
103664: PUSH
103665: FOR_IN
103666: IFFALSE 103682
// SetLives ( i , 1 ) ;
103668: LD_VAR 0 1
103672: PPUSH
103673: LD_INT 1
103675: PPUSH
103676: CALL_OW 234
103680: GO 103665
103682: POP
103683: POP
// end ;
103684: PPOPN 2
103686: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
103687: LD_EXP 122
103691: PUSH
103692: LD_EXP 171
103696: AND
103697: IFFALSE 103971
103699: GO 103701
103701: DISABLE
103702: LD_INT 0
103704: PPUSH
103705: PPUSH
103706: PPUSH
// begin i := rand ( 1 , 7 ) ;
103707: LD_ADDR_VAR 0 1
103711: PUSH
103712: LD_INT 1
103714: PPUSH
103715: LD_INT 7
103717: PPUSH
103718: CALL_OW 12
103722: ST_TO_ADDR
// case i of 1 :
103723: LD_VAR 0 1
103727: PUSH
103728: LD_INT 1
103730: DOUBLE
103731: EQUAL
103732: IFTRUE 103736
103734: GO 103746
103736: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
103737: LD_STRING earthquake(getX(game), 0, 32)
103739: PPUSH
103740: CALL_OW 559
103744: GO 103971
103746: LD_INT 2
103748: DOUBLE
103749: EQUAL
103750: IFTRUE 103754
103752: GO 103768
103754: POP
// begin ToLua ( displayStucuk(); ) ;
103755: LD_STRING displayStucuk();
103757: PPUSH
103758: CALL_OW 559
// ResetFog ;
103762: CALL_OW 335
// end ; 3 :
103766: GO 103971
103768: LD_INT 3
103770: DOUBLE
103771: EQUAL
103772: IFTRUE 103776
103774: GO 103880
103776: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
103777: LD_ADDR_VAR 0 2
103781: PUSH
103782: LD_INT 22
103784: PUSH
103785: LD_OWVAR 2
103789: PUSH
103790: EMPTY
103791: LIST
103792: LIST
103793: PUSH
103794: LD_INT 25
103796: PUSH
103797: LD_INT 1
103799: PUSH
103800: EMPTY
103801: LIST
103802: LIST
103803: PUSH
103804: EMPTY
103805: LIST
103806: LIST
103807: PPUSH
103808: CALL_OW 69
103812: ST_TO_ADDR
// if not tmp then
103813: LD_VAR 0 2
103817: NOT
103818: IFFALSE 103822
// exit ;
103820: GO 103971
// un := tmp [ rand ( 1 , tmp ) ] ;
103822: LD_ADDR_VAR 0 3
103826: PUSH
103827: LD_VAR 0 2
103831: PUSH
103832: LD_INT 1
103834: PPUSH
103835: LD_VAR 0 2
103839: PPUSH
103840: CALL_OW 12
103844: ARRAY
103845: ST_TO_ADDR
// if Crawls ( un ) then
103846: LD_VAR 0 3
103850: PPUSH
103851: CALL_OW 318
103855: IFFALSE 103866
// ComWalk ( un ) ;
103857: LD_VAR 0 3
103861: PPUSH
103862: CALL_OW 138
// SetClass ( un , class_mortar ) ;
103866: LD_VAR 0 3
103870: PPUSH
103871: LD_INT 8
103873: PPUSH
103874: CALL_OW 336
// end ; 4 :
103878: GO 103971
103880: LD_INT 4
103882: DOUBLE
103883: EQUAL
103884: IFTRUE 103888
103886: GO 103949
103888: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
103889: LD_ADDR_VAR 0 2
103893: PUSH
103894: LD_INT 22
103896: PUSH
103897: LD_OWVAR 2
103901: PUSH
103902: EMPTY
103903: LIST
103904: LIST
103905: PUSH
103906: LD_INT 30
103908: PUSH
103909: LD_INT 29
103911: PUSH
103912: EMPTY
103913: LIST
103914: LIST
103915: PUSH
103916: EMPTY
103917: LIST
103918: LIST
103919: PPUSH
103920: CALL_OW 69
103924: ST_TO_ADDR
// if not tmp then
103925: LD_VAR 0 2
103929: NOT
103930: IFFALSE 103934
// exit ;
103932: GO 103971
// DestroyUnit ( tmp [ 1 ] ) ;
103934: LD_VAR 0 2
103938: PUSH
103939: LD_INT 1
103941: ARRAY
103942: PPUSH
103943: CALL_OW 65
// end ; 5 .. 7 :
103947: GO 103971
103949: LD_INT 5
103951: DOUBLE
103952: GREATEREQUAL
103953: IFFALSE 103961
103955: LD_INT 7
103957: DOUBLE
103958: LESSEQUAL
103959: IFTRUE 103963
103961: GO 103970
103963: POP
// StreamSibBomb ; end ;
103964: CALL 100251 0 0
103968: GO 103971
103970: POP
// end ;
103971: PPOPN 3
103973: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
103974: LD_EXP 122
103978: PUSH
103979: LD_EXP 172
103983: AND
103984: IFFALSE 104140
103986: GO 103988
103988: DISABLE
103989: LD_INT 0
103991: PPUSH
103992: PPUSH
103993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
103994: LD_ADDR_VAR 0 2
103998: PUSH
103999: LD_INT 81
104001: PUSH
104002: LD_OWVAR 2
104006: PUSH
104007: EMPTY
104008: LIST
104009: LIST
104010: PUSH
104011: LD_INT 2
104013: PUSH
104014: LD_INT 21
104016: PUSH
104017: LD_INT 1
104019: PUSH
104020: EMPTY
104021: LIST
104022: LIST
104023: PUSH
104024: LD_INT 21
104026: PUSH
104027: LD_INT 2
104029: PUSH
104030: EMPTY
104031: LIST
104032: LIST
104033: PUSH
104034: EMPTY
104035: LIST
104036: LIST
104037: LIST
104038: PUSH
104039: EMPTY
104040: LIST
104041: LIST
104042: PPUSH
104043: CALL_OW 69
104047: ST_TO_ADDR
// if not tmp then
104048: LD_VAR 0 2
104052: NOT
104053: IFFALSE 104057
// exit ;
104055: GO 104140
// p := 0 ;
104057: LD_ADDR_VAR 0 3
104061: PUSH
104062: LD_INT 0
104064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
104065: LD_INT 35
104067: PPUSH
104068: CALL_OW 67
// p := p + 1 ;
104072: LD_ADDR_VAR 0 3
104076: PUSH
104077: LD_VAR 0 3
104081: PUSH
104082: LD_INT 1
104084: PLUS
104085: ST_TO_ADDR
// for i in tmp do
104086: LD_ADDR_VAR 0 1
104090: PUSH
104091: LD_VAR 0 2
104095: PUSH
104096: FOR_IN
104097: IFFALSE 104128
// if GetLives ( i ) < 1000 then
104099: LD_VAR 0 1
104103: PPUSH
104104: CALL_OW 256
104108: PUSH
104109: LD_INT 1000
104111: LESS
104112: IFFALSE 104126
// SetLives ( i , 1000 ) ;
104114: LD_VAR 0 1
104118: PPUSH
104119: LD_INT 1000
104121: PPUSH
104122: CALL_OW 234
104126: GO 104096
104128: POP
104129: POP
// until p > 20 ;
104130: LD_VAR 0 3
104134: PUSH
104135: LD_INT 20
104137: GREATER
104138: IFFALSE 104065
// end ;
104140: PPOPN 3
104142: END
// every 0 0$1 trigger StreamModeActive and sTime do
104143: LD_EXP 122
104147: PUSH
104148: LD_EXP 173
104152: AND
104153: IFFALSE 104188
104155: GO 104157
104157: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
104158: LD_INT 28
104160: PPUSH
104161: LD_OWVAR 2
104165: PPUSH
104166: LD_INT 2
104168: PPUSH
104169: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
104173: LD_INT 30
104175: PPUSH
104176: LD_OWVAR 2
104180: PPUSH
104181: LD_INT 2
104183: PPUSH
104184: CALL_OW 322
// end ;
104188: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
104189: LD_EXP 122
104193: PUSH
104194: LD_EXP 174
104198: AND
104199: IFFALSE 104320
104201: GO 104203
104203: DISABLE
104204: LD_INT 0
104206: PPUSH
104207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
104208: LD_ADDR_VAR 0 2
104212: PUSH
104213: LD_INT 22
104215: PUSH
104216: LD_OWVAR 2
104220: PUSH
104221: EMPTY
104222: LIST
104223: LIST
104224: PUSH
104225: LD_INT 21
104227: PUSH
104228: LD_INT 1
104230: PUSH
104231: EMPTY
104232: LIST
104233: LIST
104234: PUSH
104235: LD_INT 3
104237: PUSH
104238: LD_INT 23
104240: PUSH
104241: LD_INT 0
104243: PUSH
104244: EMPTY
104245: LIST
104246: LIST
104247: PUSH
104248: EMPTY
104249: LIST
104250: LIST
104251: PUSH
104252: EMPTY
104253: LIST
104254: LIST
104255: LIST
104256: PPUSH
104257: CALL_OW 69
104261: ST_TO_ADDR
// if not tmp then
104262: LD_VAR 0 2
104266: NOT
104267: IFFALSE 104271
// exit ;
104269: GO 104320
// for i in tmp do
104271: LD_ADDR_VAR 0 1
104275: PUSH
104276: LD_VAR 0 2
104280: PUSH
104281: FOR_IN
104282: IFFALSE 104318
// begin if Crawls ( i ) then
104284: LD_VAR 0 1
104288: PPUSH
104289: CALL_OW 318
104293: IFFALSE 104304
// ComWalk ( i ) ;
104295: LD_VAR 0 1
104299: PPUSH
104300: CALL_OW 138
// SetClass ( i , 2 ) ;
104304: LD_VAR 0 1
104308: PPUSH
104309: LD_INT 2
104311: PPUSH
104312: CALL_OW 336
// end ;
104316: GO 104281
104318: POP
104319: POP
// end ;
104320: PPOPN 2
104322: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
104323: LD_EXP 122
104327: PUSH
104328: LD_EXP 175
104332: AND
104333: IFFALSE 104614
104335: GO 104337
104337: DISABLE
104338: LD_INT 0
104340: PPUSH
104341: PPUSH
104342: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
104343: LD_OWVAR 2
104347: PPUSH
104348: LD_INT 9
104350: PPUSH
104351: LD_INT 1
104353: PPUSH
104354: LD_INT 1
104356: PPUSH
104357: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
104361: LD_INT 9
104363: PPUSH
104364: LD_OWVAR 2
104368: PPUSH
104369: CALL_OW 343
// uc_side := 9 ;
104373: LD_ADDR_OWVAR 20
104377: PUSH
104378: LD_INT 9
104380: ST_TO_ADDR
// uc_nation := 2 ;
104381: LD_ADDR_OWVAR 21
104385: PUSH
104386: LD_INT 2
104388: ST_TO_ADDR
// hc_name := Dark Warrior ;
104389: LD_ADDR_OWVAR 26
104393: PUSH
104394: LD_STRING Dark Warrior
104396: ST_TO_ADDR
// hc_gallery :=  ;
104397: LD_ADDR_OWVAR 33
104401: PUSH
104402: LD_STRING 
104404: ST_TO_ADDR
// hc_noskilllimit := true ;
104405: LD_ADDR_OWVAR 76
104409: PUSH
104410: LD_INT 1
104412: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
104413: LD_ADDR_OWVAR 31
104417: PUSH
104418: LD_INT 30
104420: PUSH
104421: LD_INT 30
104423: PUSH
104424: LD_INT 30
104426: PUSH
104427: LD_INT 30
104429: PUSH
104430: EMPTY
104431: LIST
104432: LIST
104433: LIST
104434: LIST
104435: ST_TO_ADDR
// un := CreateHuman ;
104436: LD_ADDR_VAR 0 3
104440: PUSH
104441: CALL_OW 44
104445: ST_TO_ADDR
// hc_noskilllimit := false ;
104446: LD_ADDR_OWVAR 76
104450: PUSH
104451: LD_INT 0
104453: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
104454: LD_VAR 0 3
104458: PPUSH
104459: LD_INT 1
104461: PPUSH
104462: CALL_OW 51
// p := 0 ;
104466: LD_ADDR_VAR 0 2
104470: PUSH
104471: LD_INT 0
104473: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
104474: LD_INT 35
104476: PPUSH
104477: CALL_OW 67
// p := p + 1 ;
104481: LD_ADDR_VAR 0 2
104485: PUSH
104486: LD_VAR 0 2
104490: PUSH
104491: LD_INT 1
104493: PLUS
104494: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
104495: LD_VAR 0 3
104499: PPUSH
104500: CALL_OW 256
104504: PUSH
104505: LD_INT 1000
104507: LESS
104508: IFFALSE 104522
// SetLives ( un , 1000 ) ;
104510: LD_VAR 0 3
104514: PPUSH
104515: LD_INT 1000
104517: PPUSH
104518: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
104522: LD_VAR 0 3
104526: PPUSH
104527: LD_INT 81
104529: PUSH
104530: LD_OWVAR 2
104534: PUSH
104535: EMPTY
104536: LIST
104537: LIST
104538: PUSH
104539: LD_INT 91
104541: PUSH
104542: LD_VAR 0 3
104546: PUSH
104547: LD_INT 30
104549: PUSH
104550: EMPTY
104551: LIST
104552: LIST
104553: LIST
104554: PUSH
104555: EMPTY
104556: LIST
104557: LIST
104558: PPUSH
104559: CALL_OW 69
104563: PPUSH
104564: LD_VAR 0 3
104568: PPUSH
104569: CALL_OW 74
104573: PPUSH
104574: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
104578: LD_VAR 0 2
104582: PUSH
104583: LD_INT 60
104585: GREATER
104586: PUSH
104587: LD_VAR 0 3
104591: PPUSH
104592: CALL_OW 301
104596: OR
104597: IFFALSE 104474
// if un then
104599: LD_VAR 0 3
104603: IFFALSE 104614
// RemoveUnit ( un ) ;
104605: LD_VAR 0 3
104609: PPUSH
104610: CALL_OW 64
// end ; end_of_file
104614: PPOPN 3
104616: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
104617: LD_INT 0
104619: PPUSH
104620: PPUSH
104621: PPUSH
104622: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
104623: LD_VAR 0 1
104627: PPUSH
104628: CALL_OW 264
104632: PUSH
104633: LD_EXP 76
104637: EQUAL
104638: IFFALSE 104710
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
104640: LD_INT 68
104642: PPUSH
104643: LD_VAR 0 1
104647: PPUSH
104648: CALL_OW 255
104652: PPUSH
104653: CALL_OW 321
104657: PUSH
104658: LD_INT 2
104660: EQUAL
104661: IFFALSE 104673
// eff := 70 else
104663: LD_ADDR_VAR 0 4
104667: PUSH
104668: LD_INT 70
104670: ST_TO_ADDR
104671: GO 104681
// eff := 30 ;
104673: LD_ADDR_VAR 0 4
104677: PUSH
104678: LD_INT 30
104680: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
104681: LD_VAR 0 1
104685: PPUSH
104686: CALL_OW 250
104690: PPUSH
104691: LD_VAR 0 1
104695: PPUSH
104696: CALL_OW 251
104700: PPUSH
104701: LD_VAR 0 4
104705: PPUSH
104706: CALL_OW 495
// end ; end ;
104710: LD_VAR 0 2
104714: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
104715: LD_INT 0
104717: PPUSH
// end ;
104718: LD_VAR 0 4
104722: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
104723: LD_INT 0
104725: PPUSH
104726: PPUSH
104727: PPUSH
104728: PPUSH
104729: PPUSH
104730: PPUSH
// if cmd = 124 then
104731: LD_VAR 0 1
104735: PUSH
104736: LD_INT 124
104738: EQUAL
104739: IFFALSE 104945
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
104741: LD_ADDR_VAR 0 5
104745: PUSH
104746: LD_INT 2
104748: PUSH
104749: LD_INT 34
104751: PUSH
104752: LD_INT 53
104754: PUSH
104755: EMPTY
104756: LIST
104757: LIST
104758: PUSH
104759: LD_INT 34
104761: PUSH
104762: LD_INT 14
104764: PUSH
104765: EMPTY
104766: LIST
104767: LIST
104768: PUSH
104769: EMPTY
104770: LIST
104771: LIST
104772: LIST
104773: PPUSH
104774: CALL_OW 69
104778: ST_TO_ADDR
// if not tmp then
104779: LD_VAR 0 5
104783: NOT
104784: IFFALSE 104788
// exit ;
104786: GO 104945
// for i in tmp do
104788: LD_ADDR_VAR 0 3
104792: PUSH
104793: LD_VAR 0 5
104797: PUSH
104798: FOR_IN
104799: IFFALSE 104943
// begin taskList := GetTaskList ( i ) ;
104801: LD_ADDR_VAR 0 6
104805: PUSH
104806: LD_VAR 0 3
104810: PPUSH
104811: CALL_OW 437
104815: ST_TO_ADDR
// if not taskList then
104816: LD_VAR 0 6
104820: NOT
104821: IFFALSE 104825
// continue ;
104823: GO 104798
// for j = 1 to taskList do
104825: LD_ADDR_VAR 0 4
104829: PUSH
104830: DOUBLE
104831: LD_INT 1
104833: DEC
104834: ST_TO_ADDR
104835: LD_VAR 0 6
104839: PUSH
104840: FOR_TO
104841: IFFALSE 104939
// if taskList [ j ] [ 1 ] = | then
104843: LD_VAR 0 6
104847: PUSH
104848: LD_VAR 0 4
104852: ARRAY
104853: PUSH
104854: LD_INT 1
104856: ARRAY
104857: PUSH
104858: LD_STRING |
104860: EQUAL
104861: IFFALSE 104937
// begin _taskList := Delete ( taskList , 1 ) ;
104863: LD_ADDR_VAR 0 7
104867: PUSH
104868: LD_VAR 0 6
104872: PPUSH
104873: LD_INT 1
104875: PPUSH
104876: CALL_OW 3
104880: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
104881: LD_VAR 0 3
104885: PPUSH
104886: LD_VAR 0 7
104890: PPUSH
104891: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
104895: LD_VAR 0 3
104899: PPUSH
104900: LD_VAR 0 6
104904: PUSH
104905: LD_VAR 0 4
104909: ARRAY
104910: PUSH
104911: LD_INT 2
104913: ARRAY
104914: PPUSH
104915: LD_VAR 0 6
104919: PUSH
104920: LD_VAR 0 4
104924: ARRAY
104925: PUSH
104926: LD_INT 3
104928: ARRAY
104929: PPUSH
104930: LD_INT 8
104932: PPUSH
104933: CALL 104950 0 4
// end ;
104937: GO 104840
104939: POP
104940: POP
// end ;
104941: GO 104798
104943: POP
104944: POP
// end ; end ;
104945: LD_VAR 0 2
104949: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
104950: LD_INT 0
104952: PPUSH
104953: PPUSH
104954: PPUSH
104955: PPUSH
104956: PPUSH
104957: PPUSH
104958: PPUSH
104959: PPUSH
104960: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
104961: LD_VAR 0 1
104965: NOT
104966: PUSH
104967: LD_VAR 0 2
104971: PPUSH
104972: LD_VAR 0 3
104976: PPUSH
104977: CALL_OW 488
104981: NOT
104982: OR
104983: PUSH
104984: LD_VAR 0 4
104988: NOT
104989: OR
104990: IFFALSE 104994
// exit ;
104992: GO 105334
// list := [ ] ;
104994: LD_ADDR_VAR 0 13
104998: PUSH
104999: EMPTY
105000: ST_TO_ADDR
// if x - r < 0 then
105001: LD_VAR 0 2
105005: PUSH
105006: LD_VAR 0 4
105010: MINUS
105011: PUSH
105012: LD_INT 0
105014: LESS
105015: IFFALSE 105027
// min_x := 0 else
105017: LD_ADDR_VAR 0 7
105021: PUSH
105022: LD_INT 0
105024: ST_TO_ADDR
105025: GO 105043
// min_x := x - r ;
105027: LD_ADDR_VAR 0 7
105031: PUSH
105032: LD_VAR 0 2
105036: PUSH
105037: LD_VAR 0 4
105041: MINUS
105042: ST_TO_ADDR
// if y - r < 0 then
105043: LD_VAR 0 3
105047: PUSH
105048: LD_VAR 0 4
105052: MINUS
105053: PUSH
105054: LD_INT 0
105056: LESS
105057: IFFALSE 105069
// min_y := 0 else
105059: LD_ADDR_VAR 0 8
105063: PUSH
105064: LD_INT 0
105066: ST_TO_ADDR
105067: GO 105085
// min_y := y - r ;
105069: LD_ADDR_VAR 0 8
105073: PUSH
105074: LD_VAR 0 3
105078: PUSH
105079: LD_VAR 0 4
105083: MINUS
105084: ST_TO_ADDR
// max_x := x + r ;
105085: LD_ADDR_VAR 0 9
105089: PUSH
105090: LD_VAR 0 2
105094: PUSH
105095: LD_VAR 0 4
105099: PLUS
105100: ST_TO_ADDR
// max_y := y + r ;
105101: LD_ADDR_VAR 0 10
105105: PUSH
105106: LD_VAR 0 3
105110: PUSH
105111: LD_VAR 0 4
105115: PLUS
105116: ST_TO_ADDR
// for _x = min_x to max_x do
105117: LD_ADDR_VAR 0 11
105121: PUSH
105122: DOUBLE
105123: LD_VAR 0 7
105127: DEC
105128: ST_TO_ADDR
105129: LD_VAR 0 9
105133: PUSH
105134: FOR_TO
105135: IFFALSE 105252
// for _y = min_y to max_y do
105137: LD_ADDR_VAR 0 12
105141: PUSH
105142: DOUBLE
105143: LD_VAR 0 8
105147: DEC
105148: ST_TO_ADDR
105149: LD_VAR 0 10
105153: PUSH
105154: FOR_TO
105155: IFFALSE 105248
// begin if not ValidHex ( _x , _y ) then
105157: LD_VAR 0 11
105161: PPUSH
105162: LD_VAR 0 12
105166: PPUSH
105167: CALL_OW 488
105171: NOT
105172: IFFALSE 105176
// continue ;
105174: GO 105154
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
105176: LD_VAR 0 11
105180: PPUSH
105181: LD_VAR 0 12
105185: PPUSH
105186: CALL_OW 351
105190: PUSH
105191: LD_VAR 0 11
105195: PPUSH
105196: LD_VAR 0 12
105200: PPUSH
105201: CALL_OW 554
105205: AND
105206: IFFALSE 105246
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
105208: LD_ADDR_VAR 0 13
105212: PUSH
105213: LD_VAR 0 13
105217: PPUSH
105218: LD_VAR 0 13
105222: PUSH
105223: LD_INT 1
105225: PLUS
105226: PPUSH
105227: LD_VAR 0 11
105231: PUSH
105232: LD_VAR 0 12
105236: PUSH
105237: EMPTY
105238: LIST
105239: LIST
105240: PPUSH
105241: CALL_OW 2
105245: ST_TO_ADDR
// end ;
105246: GO 105154
105248: POP
105249: POP
105250: GO 105134
105252: POP
105253: POP
// if not list then
105254: LD_VAR 0 13
105258: NOT
105259: IFFALSE 105263
// exit ;
105261: GO 105334
// for i in list do
105263: LD_ADDR_VAR 0 6
105267: PUSH
105268: LD_VAR 0 13
105272: PUSH
105273: FOR_IN
105274: IFFALSE 105332
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
105276: LD_VAR 0 1
105280: PPUSH
105281: LD_STRING M
105283: PUSH
105284: LD_VAR 0 6
105288: PUSH
105289: LD_INT 1
105291: ARRAY
105292: PUSH
105293: LD_VAR 0 6
105297: PUSH
105298: LD_INT 2
105300: ARRAY
105301: PUSH
105302: LD_INT 0
105304: PUSH
105305: LD_INT 0
105307: PUSH
105308: LD_INT 0
105310: PUSH
105311: LD_INT 0
105313: PUSH
105314: EMPTY
105315: LIST
105316: LIST
105317: LIST
105318: LIST
105319: LIST
105320: LIST
105321: LIST
105322: PUSH
105323: EMPTY
105324: LIST
105325: PPUSH
105326: CALL_OW 447
105330: GO 105273
105332: POP
105333: POP
// end ;
105334: LD_VAR 0 5
105338: RET
