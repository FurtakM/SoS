// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 69 0 0
// InitMacro ;
  15: CALL 20571 0 0
// InitNature ;
  19: CALL 17133 0 0
// InitArtifact ;
  23: CALL 17746 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// PrepareAmerican ;
  40: CALL 4579 0 0
// PrepareAlliance ;
  44: CALL 1375 0 0
// PrepareArabian ;
  48: CALL 6347 0 0
// PrepareRussian ;
  52: CALL 8332 0 0
// PrepareLegion ;
  56: CALL 6775 0 0
// Action ;
  60: CALL 10885 0 0
// MC_Start ( ) ;
  64: CALL 22683 0 0
// end ;
  68: END
// export debug ; export russianDestroyed , legionDestroyed , americanDestroyed , arabianDestroyed ; export americanCapitulated , russianCapitulated , legionCapitulated ; export artifactArCaptured , alienSpotted , spawnOmar ; export artifactIResearched , artifactIIResearched , artifactIIIResearched ; export vehicleLostCounter , artifactDestroyCounter ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// debug := false ;
  72: LD_ADDR_EXP 1
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// artifactArCaptured := LoadVariable ( 11_artifact_captured , 0 ) ;
  80: LD_ADDR_EXP 9
  84: PUSH
  85: LD_STRING 11_artifact_captured
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianDestroyed := false ;
  96: LD_ADDR_EXP 2
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// legionDestroyed := false ;
 104: LD_ADDR_EXP 3
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// americanDestroyed := false ;
 112: LD_ADDR_EXP 4
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// arabianDestroyed := false ;
 120: LD_ADDR_EXP 5
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// americanCapitulated := false ;
 128: LD_ADDR_EXP 6
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// russianCapitulated := false ;
 136: LD_ADDR_EXP 7
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// legionCapitulated := false ;
 144: LD_ADDR_EXP 8
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifactIResearched := false ;
 152: LD_ADDR_EXP 12
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifactIIResearched := false ;
 160: LD_ADDR_EXP 13
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// artifactIIIResearched := false ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// alienSpotted := false ;
 176: LD_ADDR_EXP 10
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// spawnOmar := false ;
 184: LD_ADDR_EXP 11
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// vehicleLostCounter := 0 ;
 192: LD_ADDR_EXP 15
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// artifactDestroyCounter := 0 ;
 200: LD_ADDR_EXP 16
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// end ;
 208: LD_VAR 0 1
 212: RET
// export function CustomInitMacro ( ) ; begin
 213: LD_INT 0
 215: PPUSH
// mc_parking := [ arabianParkingArea , russianParkingArea , legionParkingArea , powellParking ] ;
 216: LD_ADDR_EXP 111
 220: PUSH
 221: LD_INT 26
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 4
 229: PUSH
 230: LD_INT 8
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: ST_TO_ADDR
// mc_scan_area := [ arabianBaseArea , russianBaseArea , legionBaseArea , powellBase ] ;
 239: LD_ADDR_EXP 112
 243: PUSH
 244: LD_INT 27
 246: PUSH
 247: LD_INT 2
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 7
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 7 , 9 ] [ Difficulty ] , arabianMinefield ) ;
 262: LD_INT 1
 264: PPUSH
 265: LD_INT 6
 267: PUSH
 268: LD_INT 7
 270: PUSH
 271: LD_INT 9
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: PPUSH
 285: LD_INT 28
 287: PPUSH
 288: CALL 43900 0 3
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 292: LD_INT 1
 294: PPUSH
 295: LD_INT 10
 297: PUSH
 298: LD_INT 11
 300: PUSH
 301: LD_INT 13
 303: PUSH
 304: LD_INT 15
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: LIST
 311: LIST
 312: PPUSH
 313: CALL 44960 0 2
// MC_SetCratesArea ( 1 , [ arabianCratesArea ] ) ;
 317: LD_INT 1
 319: PPUSH
 320: LD_INT 29
 322: PUSH
 323: EMPTY
 324: LIST
 325: PPUSH
 326: CALL 45053 0 2
// mc_ape := Replace ( mc_ape , 1 , FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 330: LD_ADDR_EXP 116
 334: PUSH
 335: LD_EXP 116
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 22
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: LD_INT 25
 355: PUSH
 356: LD_INT 15
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PPUSH
 367: CALL_OW 69
 371: PPUSH
 372: CALL_OW 1
 376: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] ] ) ;
 377: LD_INT 1
 379: PPUSH
 380: LD_INT 13
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: LD_INT 31
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 13
 400: PUSH
 401: LD_INT 2
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: LD_INT 31
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 13
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 1
 424: PUSH
 425: LD_INT 28
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 13
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: LD_INT 1
 442: PUSH
 443: LD_INT 28
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_INT 13
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 28
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 13
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: LD_INT 1
 478: PUSH
 479: LD_INT 28
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: PPUSH
 496: CALL 44218 0 2
// MC_SetDefenderLimit ( 1 , 4 ) ;
 500: LD_INT 1
 502: PPUSH
 503: LD_INT 4
 505: PPUSH
 506: CALL 44403 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_spacetime ] ) ;
 510: LD_INT 2
 512: PPUSH
 513: LD_INT 10
 515: PUSH
 516: LD_INT 11
 518: PUSH
 519: LD_INT 12
 521: PUSH
 522: LD_INT 14
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL 44960 0 2
// MC_SetCratesArea ( 2 , [ russianCratesArea ] ) ;
 535: LD_INT 2
 537: PPUSH
 538: LD_INT 14
 540: PUSH
 541: EMPTY
 542: LIST
 543: PPUSH
 544: CALL 45053 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
 548: LD_INT 2
 550: PPUSH
 551: LD_INT 21
 553: PUSH
 554: LD_INT 3
 556: PUSH
 557: LD_INT 3
 559: PUSH
 560: LD_INT 51
 562: PUSH
 563: EMPTY
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 22
 571: PUSH
 572: LD_INT 3
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: LD_INT 52
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 22
 589: PUSH
 590: LD_INT 3
 592: PUSH
 593: LD_INT 3
 595: PUSH
 596: LD_INT 52
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_INT 24
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 3
 613: PUSH
 614: LD_INT 47
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: PUSH
 623: LD_INT 24
 625: PUSH
 626: LD_INT 3
 628: PUSH
 629: LD_INT 3
 631: PUSH
 632: LD_INT 47
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 24
 643: PUSH
 644: LD_INT 3
 646: PUSH
 647: LD_INT 3
 649: PUSH
 650: LD_INT 47
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 24
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 3
 667: PUSH
 668: LD_INT 47
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 24
 679: PUSH
 680: LD_INT 3
 682: PUSH
 683: LD_INT 3
 685: PUSH
 686: LD_INT 47
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: PPUSH
 705: CALL 44218 0 2
// MC_SetDefenderLimit ( 2 , 5 ) ;
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 5
 714: PPUSH
 715: CALL 44403 0 2
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
 719: LD_INT 2
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL 44833 0 2
// MC_SetMinesField ( 3 , [ 10 , 12 , 15 ] [ Difficulty ] , legionMinefield ) ;
 729: LD_INT 3
 731: PPUSH
 732: LD_INT 10
 734: PUSH
 735: LD_INT 12
 737: PUSH
 738: LD_INT 15
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: LD_OWVAR 67
 750: ARRAY
 751: PPUSH
 752: LD_INT 24
 754: PPUSH
 755: CALL 43900 0 3
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 759: LD_INT 3
 761: PPUSH
 762: LD_INT 10
 764: PUSH
 765: LD_INT 11
 767: PUSH
 768: LD_INT 13
 770: PUSH
 771: LD_INT 15
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: PPUSH
 780: CALL 44960 0 2
// MC_SetCratesArea ( 3 , [ legionCratesArea ] ) ;
 784: LD_INT 3
 786: PPUSH
 787: LD_INT 13
 789: PUSH
 790: EMPTY
 791: LIST
 792: PPUSH
 793: CALL 45053 0 2
// mc_ape := Replace ( mc_ape , 3 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 797: LD_ADDR_EXP 116
 801: PUSH
 802: LD_EXP 116
 806: PPUSH
 807: LD_INT 3
 809: PPUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 8
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 25
 822: PUSH
 823: LD_INT 15
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: PPUSH
 839: CALL_OW 1
 843: ST_TO_ADDR
// MC_SetProduceList ( 3 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_siberite , control_remote , ar_cargo_bay ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] ] ) ;
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 13
 849: PUSH
 850: LD_INT 2
 852: PUSH
 853: LD_INT 1
 855: PUSH
 856: LD_INT 31
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 13
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 31
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 13
 885: PUSH
 886: LD_INT 3
 888: PUSH
 889: LD_INT 2
 891: PUSH
 892: LD_INT 32
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 1
 909: PUSH
 910: LD_INT 28
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 14
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: LD_INT 1
 927: PUSH
 928: LD_INT 28
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_INT 14
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: LD_INT 1
 945: PUSH
 946: LD_INT 28
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: LD_INT 14
 957: PUSH
 958: LD_INT 1
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: LD_INT 28
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: PPUSH
 982: CALL 44218 0 2
// MC_SetDefenderLimit ( 3 , 4 ) ;
 986: LD_INT 3
 988: PPUSH
 989: LD_INT 4
 991: PPUSH
 992: CALL 44403 0 2
// MC_SetLabKind ( 4 , [ b_lab_weapon , b_lab_computer , b_lab_siberium , b_lab_opto ] ) ;
 996: LD_INT 4
 998: PPUSH
 999: LD_INT 10
1001: PUSH
1002: LD_INT 12
1004: PUSH
1005: LD_INT 11
1007: PUSH
1008: LD_INT 15
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL 44960 0 2
// MC_SetCratesArea ( 4 , [ americanCratesArea ] ) ;
1021: LD_INT 4
1023: PPUSH
1024: LD_INT 33
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL 45053 0 2
// MC_SetAllowedTurretWeapons ( 4 , [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1034: LD_INT 4
1036: PPUSH
1037: LD_INT 5
1039: PUSH
1040: LD_INT 6
1042: PUSH
1043: LD_INT 7
1045: PUSH
1046: LD_INT 9
1048: PUSH
1049: LD_INT 10
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PPUSH
1059: CALL 45371 0 2
// MC_SetFactoryExtension ( 4 , 54 , 85 , 2 , [ b_ext_laser , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
1063: LD_INT 4
1065: PPUSH
1066: LD_INT 54
1068: PPUSH
1069: LD_INT 85
1071: PPUSH
1072: LD_INT 2
1074: PPUSH
1075: LD_INT 25
1077: PUSH
1078: LD_INT 16
1080: PUSH
1081: LD_INT 17
1083: PUSH
1084: LD_INT 18
1086: PUSH
1087: LD_INT 22
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: PPUSH
1097: CALL 45165 0 5
// MC_SetProduceList ( 4 , [ [ us_morphling , engine_combustion , control_manual , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_manual , us_heavy_gun ] , [ us_morphling , engine_combustion , control_manual , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_manual , us_heavy_gun ] , [ us_morphling , engine_combustion , control_computer , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_computer , us_crane ] ] ) ;
1101: LD_INT 4
1103: PPUSH
1104: LD_INT 5
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: LD_INT 7
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 5
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 6
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 5
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 7
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 5
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 6
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 5
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 3
1184: PUSH
1185: LD_INT 12
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 3
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 3
1202: PUSH
1203: LD_INT 13
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL 44218 0 2
// MC_SetDefenderLimit ( 4 , 4 ) ;
1224: LD_INT 4
1226: PPUSH
1227: LD_INT 4
1229: PPUSH
1230: CALL 44403 0 2
// MC_SetTame ( 4 , powellApe ) ;
1234: LD_INT 4
1236: PPUSH
1237: LD_INT 11
1239: PPUSH
1240: CALL 44784 0 2
// end ;
1244: LD_VAR 0 1
1248: RET
// every 0 0$1 trigger debug do var i ;
1249: LD_EXP 1
1253: IFFALSE 1351
1255: GO 1257
1257: DISABLE
1258: LD_INT 0
1260: PPUSH
// begin enable ;
1261: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
1262: LD_ADDR_VAR 0 1
1266: PUSH
1267: LD_INT 22
1269: PUSH
1270: LD_INT 7
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 2
1279: PUSH
1280: LD_INT 21
1282: PUSH
1283: LD_INT 1
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 21
1292: PUSH
1293: LD_INT 2
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 3
1307: PUSH
1308: LD_INT 24
1310: PUSH
1311: LD_INT 1000
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 69
1331: PUSH
1332: FOR_IN
1333: IFFALSE 1349
// SetLives ( i , 1000 ) ;
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 1000
1342: PPUSH
1343: CALL_OW 234
1347: GO 1332
1349: POP
1350: POP
// end ;
1351: PPOPN 1
1353: END
// every 0 0$1 trigger artifactDestroyCounter >= 5 do
1354: LD_EXP 16
1358: PUSH
1359: LD_INT 5
1361: GREATEREQUAL
1362: IFFALSE 1374
1364: GO 1366
1366: DISABLE
// SetAchievement ( ACH_ARTIFACT ) ; end_of_file
1367: LD_STRING ACH_ARTIFACT
1369: PPUSH
1370: CALL_OW 543
1374: END
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Connie ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export function PrepareAlliance ; var i , veh , selected , tmp ; begin
1375: LD_INT 0
1377: PPUSH
1378: PPUSH
1379: PPUSH
1380: PPUSH
1381: PPUSH
// uc_side := 7 ;
1382: LD_ADDR_OWVAR 20
1386: PUSH
1387: LD_INT 7
1389: ST_TO_ADDR
// tmp := [ ] ;
1390: LD_ADDR_VAR 0 5
1394: PUSH
1395: EMPTY
1396: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
1397: LD_ADDR_EXP 17
1401: PUSH
1402: LD_STRING JMM
1404: PPUSH
1405: LD_EXP 1
1409: NOT
1410: PPUSH
1411: LD_STRING 14a_
1413: PPUSH
1414: CALL 50610 0 3
1418: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
1419: LD_ADDR_EXP 49
1423: PUSH
1424: LD_STRING Burlak
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 14a_
1435: PPUSH
1436: CALL 50610 0 3
1440: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1441: LD_ADDR_EXP 32
1445: PUSH
1446: LD_STRING Joan
1448: PPUSH
1449: LD_EXP 1
1453: NOT
1454: PPUSH
1455: LD_STRING 13a_
1457: PPUSH
1458: CALL 50610 0 3
1462: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1463: LD_ADDR_EXP 18
1467: PUSH
1468: LD_STRING Roth
1470: PPUSH
1471: LD_EXP 1
1475: NOT
1476: PPUSH
1477: LD_STRING 13a_
1479: PPUSH
1480: CALL 50610 0 3
1484: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1485: LD_ADDR_EXP 35
1489: PUSH
1490: LD_STRING Gossudarov
1492: PPUSH
1493: LD_EXP 1
1497: NOT
1498: PPUSH
1499: LD_STRING 13a_
1501: PPUSH
1502: CALL 50610 0 3
1506: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1507: LD_ADDR_EXP 23
1511: PUSH
1512: LD_STRING Denis
1514: PPUSH
1515: LD_EXP 1
1519: NOT
1520: PPUSH
1521: LD_STRING 13a_
1523: PPUSH
1524: CALL 50610 0 3
1528: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1529: LD_ADDR_EXP 33
1533: PUSH
1534: LD_STRING DeltaDoctor
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_STRING 13a_
1545: PPUSH
1546: CALL 50610 0 3
1550: ST_TO_ADDR
// if DeltaDoctor then
1551: LD_EXP 33
1555: IFFALSE 1573
// tmp := tmp ^ DeltaDoctor ;
1557: LD_ADDR_VAR 0 5
1561: PUSH
1562: LD_VAR 0 5
1566: PUSH
1567: LD_EXP 33
1571: ADD
1572: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1573: LD_ADDR_EXP 31
1577: PUSH
1578: LD_STRING Simms
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_STRING 13a_
1589: PPUSH
1590: CALL 50610 0 3
1594: ST_TO_ADDR
// if Simms then
1595: LD_EXP 31
1599: IFFALSE 1617
// tmp := tmp ^ Simms ;
1601: LD_ADDR_VAR 0 5
1605: PUSH
1606: LD_VAR 0 5
1610: PUSH
1611: LD_EXP 31
1615: ADD
1616: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
1617: LD_ADDR_EXP 29
1621: PUSH
1622: LD_STRING Frank
1624: PPUSH
1625: LD_EXP 1
1629: NOT
1630: PPUSH
1631: LD_STRING 13a_
1633: PPUSH
1634: CALL 50610 0 3
1638: ST_TO_ADDR
// if Frank then
1639: LD_EXP 29
1643: IFFALSE 1661
// tmp := tmp ^ Frank ;
1645: LD_ADDR_VAR 0 5
1649: PUSH
1650: LD_VAR 0 5
1654: PUSH
1655: LD_EXP 29
1659: ADD
1660: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
1661: LD_ADDR_EXP 36
1665: PUSH
1666: LD_STRING Kirilenkova
1668: PPUSH
1669: LD_EXP 1
1673: NOT
1674: PPUSH
1675: LD_STRING 13a_
1677: PPUSH
1678: CALL 50610 0 3
1682: ST_TO_ADDR
// if Kirilenkova then
1683: LD_EXP 36
1687: IFFALSE 1705
// tmp := tmp ^ Kirilenkova ;
1689: LD_ADDR_VAR 0 5
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_EXP 36
1703: ADD
1704: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
1705: LD_ADDR_EXP 37
1709: PUSH
1710: LD_STRING Titov
1712: PPUSH
1713: LD_EXP 1
1717: NOT
1718: PPUSH
1719: LD_STRING 13a_
1721: PPUSH
1722: CALL 50610 0 3
1726: ST_TO_ADDR
// if Titov then
1727: LD_EXP 37
1731: IFFALSE 1749
// tmp := tmp ^ Titov ;
1733: LD_ADDR_VAR 0 5
1737: PUSH
1738: LD_VAR 0 5
1742: PUSH
1743: LD_EXP 37
1747: ADD
1748: ST_TO_ADDR
// Fadeev := PrepareUnit ( Fadeev , ( not debug ) , 13a_ ) ;
1749: LD_ADDR_EXP 38
1753: PUSH
1754: LD_STRING Fadeev
1756: PPUSH
1757: LD_EXP 1
1761: NOT
1762: PPUSH
1763: LD_STRING 13a_
1765: PPUSH
1766: CALL 50610 0 3
1770: ST_TO_ADDR
// if Fadeev then
1771: LD_EXP 38
1775: IFFALSE 1793
// tmp := tmp ^ Fadeev ;
1777: LD_ADDR_VAR 0 5
1781: PUSH
1782: LD_VAR 0 5
1786: PUSH
1787: LD_EXP 38
1791: ADD
1792: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
1793: LD_ADDR_EXP 39
1797: PUSH
1798: LD_STRING Dolgov
1800: PPUSH
1801: LD_EXP 1
1805: NOT
1806: PPUSH
1807: LD_STRING 13a_
1809: PPUSH
1810: CALL 50610 0 3
1814: ST_TO_ADDR
// if Dolgov then
1815: LD_EXP 39
1819: IFFALSE 1837
// tmp := tmp ^ Dolgov ;
1821: LD_ADDR_VAR 0 5
1825: PUSH
1826: LD_VAR 0 5
1830: PUSH
1831: LD_EXP 39
1835: ADD
1836: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
1837: LD_ADDR_EXP 40
1841: PUSH
1842: LD_STRING Petrosyan
1844: PPUSH
1845: LD_EXP 1
1849: NOT
1850: PPUSH
1851: LD_STRING 13a_
1853: PPUSH
1854: CALL 50610 0 3
1858: ST_TO_ADDR
// if Petrosyan then
1859: LD_EXP 40
1863: IFFALSE 1881
// tmp := tmp ^ Petrosyan ;
1865: LD_ADDR_VAR 0 5
1869: PUSH
1870: LD_VAR 0 5
1874: PUSH
1875: LD_EXP 40
1879: ADD
1880: ST_TO_ADDR
// Scholtze := PrepareUnit ( Scholtze , ( not debug ) , 13a_ ) ;
1881: LD_ADDR_EXP 41
1885: PUSH
1886: LD_STRING Scholtze
1888: PPUSH
1889: LD_EXP 1
1893: NOT
1894: PPUSH
1895: LD_STRING 13a_
1897: PPUSH
1898: CALL 50610 0 3
1902: ST_TO_ADDR
// if Scholtze then
1903: LD_EXP 41
1907: IFFALSE 1925
// tmp := tmp ^ Scholtze ;
1909: LD_ADDR_VAR 0 5
1913: PUSH
1914: LD_VAR 0 5
1918: PUSH
1919: LD_EXP 41
1923: ADD
1924: ST_TO_ADDR
// Oblukov := PrepareUnit ( Oblukov , ( not debug ) , 13a_ ) ;
1925: LD_ADDR_EXP 42
1929: PUSH
1930: LD_STRING Oblukov
1932: PPUSH
1933: LD_EXP 1
1937: NOT
1938: PPUSH
1939: LD_STRING 13a_
1941: PPUSH
1942: CALL 50610 0 3
1946: ST_TO_ADDR
// if Oblukov then
1947: LD_EXP 42
1951: IFFALSE 1969
// tmp := tmp ^ Oblukov ;
1953: LD_ADDR_VAR 0 5
1957: PUSH
1958: LD_VAR 0 5
1962: PUSH
1963: LD_EXP 42
1967: ADD
1968: ST_TO_ADDR
// Kapitsova := PrepareUnit ( Kapitsova , ( not debug ) , 13a_ ) ;
1969: LD_ADDR_EXP 43
1973: PUSH
1974: LD_STRING Kapitsova
1976: PPUSH
1977: LD_EXP 1
1981: NOT
1982: PPUSH
1983: LD_STRING 13a_
1985: PPUSH
1986: CALL 50610 0 3
1990: ST_TO_ADDR
// if Kapitsova then
1991: LD_EXP 43
1995: IFFALSE 2013
// tmp := tmp ^ Kapitsova ;
1997: LD_ADDR_VAR 0 5
2001: PUSH
2002: LD_VAR 0 5
2006: PUSH
2007: LD_EXP 43
2011: ADD
2012: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , ( not debug ) , 13a_ ) ;
2013: LD_ADDR_EXP 44
2017: PUSH
2018: LD_STRING Lipshchin
2020: PPUSH
2021: LD_EXP 1
2025: NOT
2026: PPUSH
2027: LD_STRING 13a_
2029: PPUSH
2030: CALL 50610 0 3
2034: ST_TO_ADDR
// if Lipshchin then
2035: LD_EXP 44
2039: IFFALSE 2057
// tmp := tmp ^ Lipshchin ;
2041: LD_ADDR_VAR 0 5
2045: PUSH
2046: LD_VAR 0 5
2050: PUSH
2051: LD_EXP 44
2055: ADD
2056: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrovova , ( not debug ) , 13a_ ) ;
2057: LD_ADDR_EXP 45
2061: PUSH
2062: LD_STRING Petrovova
2064: PPUSH
2065: LD_EXP 1
2069: NOT
2070: PPUSH
2071: LD_STRING 13a_
2073: PPUSH
2074: CALL 50610 0 3
2078: ST_TO_ADDR
// if Petrovova then
2079: LD_EXP 45
2083: IFFALSE 2101
// tmp := tmp ^ Petrovova ;
2085: LD_ADDR_VAR 0 5
2089: PUSH
2090: LD_VAR 0 5
2094: PUSH
2095: LD_EXP 45
2099: ADD
2100: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , 13a_ ) ;
2101: LD_ADDR_EXP 46
2105: PUSH
2106: LD_STRING Kovalyuk
2108: PPUSH
2109: LD_EXP 1
2113: NOT
2114: PPUSH
2115: LD_STRING 13a_
2117: PPUSH
2118: CALL 50610 0 3
2122: ST_TO_ADDR
// if Kovalyuk then
2123: LD_EXP 46
2127: IFFALSE 2145
// tmp := tmp ^ Kovalyuk ;
2129: LD_ADDR_VAR 0 5
2133: PUSH
2134: LD_VAR 0 5
2138: PUSH
2139: LD_EXP 46
2143: ADD
2144: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , ( not debug ) , 13a_ ) ;
2145: LD_ADDR_EXP 47
2149: PUSH
2150: LD_STRING Kuzmov
2152: PPUSH
2153: LD_EXP 1
2157: NOT
2158: PPUSH
2159: LD_STRING 13a_
2161: PPUSH
2162: CALL 50610 0 3
2166: ST_TO_ADDR
// if Kuzmov then
2167: LD_EXP 47
2171: IFFALSE 2189
// tmp := tmp ^ Kuzmov ;
2173: LD_ADDR_VAR 0 5
2177: PUSH
2178: LD_VAR 0 5
2182: PUSH
2183: LD_EXP 47
2187: ADD
2188: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2189: LD_ADDR_EXP 48
2193: PUSH
2194: LD_STRING Karamazov
2196: PPUSH
2197: LD_EXP 1
2201: NOT
2202: PPUSH
2203: LD_STRING 13a_
2205: PPUSH
2206: CALL 50610 0 3
2210: ST_TO_ADDR
// if Karamazov then
2211: LD_EXP 48
2215: IFFALSE 2233
// tmp := tmp ^ Karamazov ;
2217: LD_ADDR_VAR 0 5
2221: PUSH
2222: LD_VAR 0 5
2226: PUSH
2227: LD_EXP 48
2231: ADD
2232: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 50
2237: PUSH
2238: LD_STRING Belkov
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 50610 0 3
2254: ST_TO_ADDR
// if Belkov then
2255: LD_EXP 50
2259: IFFALSE 2277
// tmp := tmp ^ Belkov ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_VAR 0 5
2270: PUSH
2271: LD_EXP 50
2275: ADD
2276: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 51
2281: PUSH
2282: LD_STRING Gnyevko
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 50610 0 3
2298: ST_TO_ADDR
// if Gnyevko then
2299: LD_EXP 51
2303: IFFALSE 2321
// tmp := tmp ^ Gnyevko ;
2305: LD_ADDR_VAR 0 5
2309: PUSH
2310: LD_VAR 0 5
2314: PUSH
2315: LD_EXP 51
2319: ADD
2320: ST_TO_ADDR
// Connie = NewCharacter ( Coonie ) ;
2321: LD_ADDR_EXP 34
2325: PUSH
2326: LD_STRING Coonie
2328: PPUSH
2329: CALL_OW 25
2333: ST_TO_ADDR
// if not Lisa then
2334: LD_EXP 19
2338: NOT
2339: IFFALSE 2385
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , 13a_ ) ;
2341: LD_ADDR_EXP 19
2345: PUSH
2346: LD_STRING Lisa
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 13a_
2357: PPUSH
2358: CALL 50610 0 3
2362: ST_TO_ADDR
// if Lisa then
2363: LD_EXP 19
2367: IFFALSE 2385
// tmp := tmp ^ Lisa ;
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: LD_VAR 0 5
2378: PUSH
2379: LD_EXP 19
2383: ADD
2384: ST_TO_ADDR
// end ; if not Donaldson then
2385: LD_EXP 20
2389: NOT
2390: IFFALSE 2436
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2392: LD_ADDR_EXP 20
2396: PUSH
2397: LD_STRING Donaldson
2399: PPUSH
2400: LD_EXP 1
2404: NOT
2405: PPUSH
2406: LD_STRING 13a_
2408: PPUSH
2409: CALL 50610 0 3
2413: ST_TO_ADDR
// if Donaldson then
2414: LD_EXP 20
2418: IFFALSE 2436
// tmp := tmp ^ Donaldson ;
2420: LD_ADDR_VAR 0 5
2424: PUSH
2425: LD_VAR 0 5
2429: PUSH
2430: LD_EXP 20
2434: ADD
2435: ST_TO_ADDR
// end ; if not Bobby then
2436: LD_EXP 21
2440: NOT
2441: IFFALSE 2487
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 13a_ ) ;
2443: LD_ADDR_EXP 21
2447: PUSH
2448: LD_STRING Bobby
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 13a_
2459: PPUSH
2460: CALL 50610 0 3
2464: ST_TO_ADDR
// if Bobby then
2465: LD_EXP 21
2469: IFFALSE 2487
// tmp := tmp ^ Bobby ;
2471: LD_ADDR_VAR 0 5
2475: PUSH
2476: LD_VAR 0 5
2480: PUSH
2481: LD_EXP 21
2485: ADD
2486: ST_TO_ADDR
// end ; if not Cyrus then
2487: LD_EXP 22
2491: NOT
2492: IFFALSE 2538
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13a_ ) ;
2494: LD_ADDR_EXP 22
2498: PUSH
2499: LD_STRING Cyrus
2501: PPUSH
2502: LD_EXP 1
2506: NOT
2507: PPUSH
2508: LD_STRING 13a_
2510: PPUSH
2511: CALL 50610 0 3
2515: ST_TO_ADDR
// if Cyrus then
2516: LD_EXP 22
2520: IFFALSE 2538
// tmp := tmp ^ Cyrus ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_VAR 0 5
2531: PUSH
2532: LD_EXP 22
2536: ADD
2537: ST_TO_ADDR
// end ; if not Brown then
2538: LD_EXP 24
2542: NOT
2543: IFFALSE 2589
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 13a_ ) ;
2545: LD_ADDR_EXP 24
2549: PUSH
2550: LD_STRING Brown
2552: PPUSH
2553: LD_EXP 1
2557: NOT
2558: PPUSH
2559: LD_STRING 13a_
2561: PPUSH
2562: CALL 50610 0 3
2566: ST_TO_ADDR
// if Brown then
2567: LD_EXP 24
2571: IFFALSE 2589
// tmp := tmp ^ Brown ;
2573: LD_ADDR_VAR 0 5
2577: PUSH
2578: LD_VAR 0 5
2582: PUSH
2583: LD_EXP 24
2587: ADD
2588: ST_TO_ADDR
// end ; if not Gladstone then
2589: LD_EXP 25
2593: NOT
2594: IFFALSE 2640
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13a_ ) ;
2596: LD_ADDR_EXP 25
2600: PUSH
2601: LD_STRING Gladstone
2603: PPUSH
2604: LD_EXP 1
2608: NOT
2609: PPUSH
2610: LD_STRING 13a_
2612: PPUSH
2613: CALL 50610 0 3
2617: ST_TO_ADDR
// if Gladstone then
2618: LD_EXP 25
2622: IFFALSE 2640
// tmp := tmp ^ Gladstone ;
2624: LD_ADDR_VAR 0 5
2628: PUSH
2629: LD_VAR 0 5
2633: PUSH
2634: LD_EXP 25
2638: ADD
2639: ST_TO_ADDR
// end ; if not Cornel then
2640: LD_EXP 27
2644: NOT
2645: IFFALSE 2691
// begin Cornel := PrepareUnit ( Cornel , ( not debug ) , 13a_ ) ;
2647: LD_ADDR_EXP 27
2651: PUSH
2652: LD_STRING Cornel
2654: PPUSH
2655: LD_EXP 1
2659: NOT
2660: PPUSH
2661: LD_STRING 13a_
2663: PPUSH
2664: CALL 50610 0 3
2668: ST_TO_ADDR
// if Cornel then
2669: LD_EXP 27
2673: IFFALSE 2691
// tmp := tmp ^ Cornel ;
2675: LD_ADDR_VAR 0 5
2679: PUSH
2680: LD_VAR 0 5
2684: PUSH
2685: LD_EXP 27
2689: ADD
2690: ST_TO_ADDR
// end ; if not Houten then
2691: LD_EXP 26
2695: NOT
2696: IFFALSE 2742
// begin Houten := PrepareUnit ( Houten , ( not debug ) , 13a_ ) ;
2698: LD_ADDR_EXP 26
2702: PUSH
2703: LD_STRING Houten
2705: PPUSH
2706: LD_EXP 1
2710: NOT
2711: PPUSH
2712: LD_STRING 13a_
2714: PPUSH
2715: CALL 50610 0 3
2719: ST_TO_ADDR
// if Houten then
2720: LD_EXP 26
2724: IFFALSE 2742
// tmp := tmp ^ Houten ;
2726: LD_ADDR_VAR 0 5
2730: PUSH
2731: LD_VAR 0 5
2735: PUSH
2736: LD_EXP 26
2740: ADD
2741: ST_TO_ADDR
// end ; if not Gary then
2742: LD_EXP 28
2746: NOT
2747: IFFALSE 2793
// begin Gary := PrepareUnit ( Gary , ( not debug ) , 13a_ ) ;
2749: LD_ADDR_EXP 28
2753: PUSH
2754: LD_STRING Gary
2756: PPUSH
2757: LD_EXP 1
2761: NOT
2762: PPUSH
2763: LD_STRING 13a_
2765: PPUSH
2766: CALL 50610 0 3
2770: ST_TO_ADDR
// if Gary then
2771: LD_EXP 28
2775: IFFALSE 2793
// tmp := tmp ^ Gary ;
2777: LD_ADDR_VAR 0 5
2781: PUSH
2782: LD_VAR 0 5
2786: PUSH
2787: LD_EXP 28
2791: ADD
2792: ST_TO_ADDR
// end ; if not Kikuchi then
2793: LD_EXP 30
2797: NOT
2798: IFFALSE 2844
// begin Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13a_ ) ;
2800: LD_ADDR_EXP 30
2804: PUSH
2805: LD_STRING Kikuchi
2807: PPUSH
2808: LD_EXP 1
2812: NOT
2813: PPUSH
2814: LD_STRING 13a_
2816: PPUSH
2817: CALL 50610 0 3
2821: ST_TO_ADDR
// if Kikuchi then
2822: LD_EXP 30
2826: IFFALSE 2844
// tmp := tmp ^ Kikuchi ;
2828: LD_ADDR_VAR 0 5
2832: PUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_EXP 30
2842: ADD
2843: ST_TO_ADDR
// end ; tmp := tmp union CreateCharacterSet ( 13a_others ) ;
2844: LD_ADDR_VAR 0 5
2848: PUSH
2849: LD_VAR 0 5
2853: PUSH
2854: LD_STRING 13a_others
2856: PPUSH
2857: CALL_OW 31
2861: UNION
2862: ST_TO_ADDR
// tmp := tmp diff 0 ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_VAR 0 5
2872: PUSH
2873: LD_INT 0
2875: DIFF
2876: ST_TO_ADDR
// if tmp < 15 then
2877: LD_VAR 0 5
2881: PUSH
2882: LD_INT 15
2884: LESS
2885: IFFALSE 2973
// for i = 15 downto tmp do
2887: LD_ADDR_VAR 0 2
2891: PUSH
2892: DOUBLE
2893: LD_INT 15
2895: INC
2896: ST_TO_ADDR
2897: LD_VAR 0 5
2901: PUSH
2902: FOR_DOWNTO
2903: IFFALSE 2971
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
2905: LD_ADDR_OWVAR 21
2909: PUSH
2910: LD_INT 1
2912: PUSH
2913: LD_INT 3
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 1
2922: PPUSH
2923: LD_INT 2
2925: PPUSH
2926: CALL_OW 12
2930: ARRAY
2931: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
2932: LD_INT 0
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 4
2940: PPUSH
2941: CALL_OW 12
2945: PPUSH
2946: LD_INT 8
2948: PPUSH
2949: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
2953: LD_ADDR_VAR 0 5
2957: PUSH
2958: LD_VAR 0 5
2962: PUSH
2963: CALL_OW 44
2967: ADD
2968: ST_TO_ADDR
// end ;
2969: GO 2902
2971: POP
2972: POP
// if not debug then
2973: LD_EXP 1
2977: NOT
2978: IFFALSE 3150
// selected = CharacterSelection (  , [ 15 , 14 , 13 ] [ Difficulty ] , [ 15 , 14 , 13 ] [ Difficulty ] , [ sel_dont_change_class , JMM , Burlak , Roth , Joan , Denis , Gossudarov , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp , [ class_soldier , class_scientistic , [ class_engineer , 1 ] , class_mechanic , [ class_sniper , 0 , 3 ] , [ class_bazooker , 0 , 3 ] ] ) else
2980: LD_ADDR_VAR 0 4
2984: PUSH
2985: LD_STRING 
2987: PPUSH
2988: LD_INT 15
2990: PUSH
2991: LD_INT 14
2993: PUSH
2994: LD_INT 13
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: LIST
3001: PUSH
3002: LD_OWVAR 67
3006: ARRAY
3007: PPUSH
3008: LD_INT 15
3010: PUSH
3011: LD_INT 14
3013: PUSH
3014: LD_INT 13
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_OWVAR 67
3026: ARRAY
3027: PPUSH
3028: LD_INT -6
3030: PUSH
3031: LD_EXP 17
3035: PUSH
3036: LD_EXP 49
3040: PUSH
3041: LD_EXP 18
3045: PUSH
3046: LD_EXP 32
3050: PUSH
3051: LD_EXP 23
3055: PUSH
3056: LD_EXP 35
3060: PUSH
3061: LD_INT -2
3063: PUSH
3064: LD_INT -3
3066: PUSH
3067: LD_INT -5
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_VAR 0 5
3086: ADD
3087: PPUSH
3088: LD_INT 1
3090: PUSH
3091: LD_INT 4
3093: PUSH
3094: LD_INT 2
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 3
3106: PUSH
3107: LD_INT 5
3109: PUSH
3110: LD_INT 0
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 9
3123: PUSH
3124: LD_INT 0
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 42
3147: ST_TO_ADDR
3148: GO 3229
// selected := [ Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ] ;
3150: LD_ADDR_VAR 0 4
3154: PUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_EXP 38
3164: PUSH
3165: LD_EXP 39
3169: PUSH
3170: LD_EXP 40
3174: PUSH
3175: LD_EXP 41
3179: PUSH
3180: LD_EXP 42
3184: PUSH
3185: LD_EXP 43
3189: PUSH
3190: LD_EXP 44
3194: PUSH
3195: LD_EXP 45
3199: PUSH
3200: LD_EXP 46
3204: PUSH
3205: LD_EXP 47
3209: PUSH
3210: LD_EXP 48
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: ST_TO_ADDR
// uc_nation := 1 ;
3229: LD_ADDR_OWVAR 21
3233: PUSH
3234: LD_INT 1
3236: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) ;
3237: LD_INT 5
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: LD_INT 1
3245: PPUSH
3246: LD_INT 6
3248: PPUSH
3249: LD_INT 100
3251: PPUSH
3252: CALL 55434 0 5
// veh := CreateVehicle ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 45
3265: ST_TO_ADDR
// SetMark ( veh , - 7 ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 7
3273: NEG
3274: PPUSH
3275: CALL_OW 242
// SetDir ( veh , 3 ) ;
3279: LD_VAR 0 3
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: CALL_OW 233
// PlaceUnitArea ( veh , allianceJMMSpawnArea , false ) ;
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 31
3298: PPUSH
3299: LD_INT 0
3301: PPUSH
3302: CALL_OW 49
// PlaceHumanInUnit ( JMM , veh ) ;
3306: LD_EXP 17
3310: PPUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: CALL_OW 52
// if Joan then
3320: LD_EXP 32
3324: IFFALSE 3396
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_radar , 100 ) ;
3326: LD_INT 3
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: LD_INT 1
3334: PPUSH
3335: LD_INT 11
3337: PPUSH
3338: LD_INT 100
3340: PPUSH
3341: CALL 55434 0 5
// veh := CreateVehicle ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: CALL_OW 45
3354: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3355: LD_VAR 0 3
3359: PPUSH
3360: LD_INT 3
3362: PPUSH
3363: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3367: LD_VAR 0 3
3371: PPUSH
3372: LD_INT 30
3374: PPUSH
3375: LD_INT 0
3377: PPUSH
3378: CALL_OW 49
// PlaceHumanInUnit ( Joan , veh ) ;
3382: LD_EXP 32
3386: PPUSH
3387: LD_VAR 0 3
3391: PPUSH
3392: CALL_OW 52
// end ; if Roth then
3396: LD_EXP 18
3400: IFFALSE 3472
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_radar , 100 ) ;
3402: LD_INT 3
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 1
3410: PPUSH
3411: LD_INT 11
3413: PPUSH
3414: LD_INT 100
3416: PPUSH
3417: CALL 55434 0 5
// veh := CreateVehicle ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: CALL_OW 45
3430: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: LD_INT 3
3438: PPUSH
3439: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3443: LD_VAR 0 3
3447: PPUSH
3448: LD_INT 30
3450: PPUSH
3451: LD_INT 0
3453: PPUSH
3454: CALL_OW 49
// PlaceHumanInUnit ( Roth , veh ) ;
3458: LD_EXP 18
3462: PPUSH
3463: LD_VAR 0 3
3467: PPUSH
3468: CALL_OW 52
// end ; if Denis then
3472: LD_EXP 23
3476: IFFALSE 3548
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_laser , 100 ) ;
3478: LD_INT 5
3480: PPUSH
3481: LD_INT 3
3483: PPUSH
3484: LD_INT 1
3486: PPUSH
3487: LD_INT 9
3489: PPUSH
3490: LD_INT 100
3492: PPUSH
3493: CALL 55434 0 5
// veh := CreateVehicle ;
3497: LD_ADDR_VAR 0 3
3501: PUSH
3502: CALL_OW 45
3506: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3507: LD_VAR 0 3
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_INT 30
3526: PPUSH
3527: LD_INT 0
3529: PPUSH
3530: CALL_OW 49
// PlaceHumanInUnit ( Denis , veh ) ;
3534: LD_EXP 23
3538: PPUSH
3539: LD_VAR 0 3
3543: PPUSH
3544: CALL_OW 52
// end ; uc_nation := 3 ;
3548: LD_ADDR_OWVAR 21
3552: PUSH
3553: LD_INT 3
3555: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_rocket_launcher , 100 ) ;
3556: LD_INT 22
3558: PPUSH
3559: LD_INT 3
3561: PPUSH
3562: LD_INT 1
3564: PPUSH
3565: LD_INT 45
3567: PPUSH
3568: LD_INT 100
3570: PPUSH
3571: CALL 55434 0 5
// veh := CreateVehicle ;
3575: LD_ADDR_VAR 0 3
3579: PUSH
3580: CALL_OW 45
3584: ST_TO_ADDR
// SetMark ( veh , - 7 ) ;
3585: LD_VAR 0 3
3589: PPUSH
3590: LD_INT 7
3592: NEG
3593: PPUSH
3594: CALL_OW 242
// SetDir ( veh , 3 ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_INT 3
3605: PPUSH
3606: CALL_OW 233
// PlaceUnitArea ( veh , allianceJMMSpawnArea , false ) ;
3610: LD_VAR 0 3
3614: PPUSH
3615: LD_INT 31
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL_OW 49
// PlaceHumanInUnit ( Burlak , veh ) ;
3625: LD_EXP 49
3629: PPUSH
3630: LD_VAR 0 3
3634: PPUSH
3635: CALL_OW 52
// if Gossudarov then
3639: LD_EXP 35
3643: IFFALSE 3730
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
3645: LD_INT 22
3647: PPUSH
3648: LD_INT 3
3650: PPUSH
3651: LD_INT 1
3653: PPUSH
3654: LD_INT 51
3656: PPUSH
3657: LD_INT 100
3659: PPUSH
3660: CALL 55434 0 5
// veh := CreateVehicle ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 45
3673: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
3686: LD_VAR 0 3
3690: PPUSH
3691: LD_INT 30
3693: PPUSH
3694: LD_INT 0
3696: PPUSH
3697: CALL_OW 49
// PlaceHumanInUnit ( Gossudarov , veh ) ;
3701: LD_EXP 35
3705: PPUSH
3706: LD_VAR 0 3
3710: PPUSH
3711: CALL_OW 52
// SetCargo ( veh , mat_cans , 100 ) ;
3715: LD_VAR 0 3
3719: PPUSH
3720: LD_INT 1
3722: PPUSH
3723: LD_INT 100
3725: PPUSH
3726: CALL_OW 290
// end ; for i in selected do
3730: LD_ADDR_VAR 0 2
3734: PUSH
3735: LD_VAR 0 4
3739: PUSH
3740: FOR_IN
3741: IFFALSE 4299
// begin uc_nation := GetNation ( i ) ;
3743: LD_ADDR_OWVAR 21
3747: PUSH
3748: LD_VAR 0 2
3752: PPUSH
3753: CALL_OW 248
3757: ST_TO_ADDR
// if i in [ Lisa , Donaldson , Cyrus , Bobby ] then
3758: LD_VAR 0 2
3762: PUSH
3763: LD_EXP 19
3767: PUSH
3768: LD_EXP 20
3772: PUSH
3773: LD_EXP 22
3777: PUSH
3778: LD_EXP 21
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: IN
3789: IFFALSE 3812
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) else
3791: LD_INT 5
3793: PPUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 1
3799: PPUSH
3800: LD_INT 6
3802: PPUSH
3803: LD_INT 100
3805: PPUSH
3806: CALL 55434 0 5
3810: GO 4246
// if i in [ Oblukov , Kuzmov , Petrovova , Titov ] then
3812: LD_VAR 0 2
3816: PUSH
3817: LD_EXP 42
3821: PUSH
3822: LD_EXP 47
3826: PUSH
3827: LD_EXP 45
3831: PUSH
3832: LD_EXP 37
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: IN
3843: IFFALSE 3874
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_heavy_gun , rand ( 65 , 75 ) ) else
3845: LD_INT 24
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 46
3856: PPUSH
3857: LD_INT 65
3859: PPUSH
3860: LD_INT 75
3862: PPUSH
3863: CALL_OW 12
3867: PPUSH
3868: CALL 55434 0 5
3872: GO 4246
// if i = Karamazov then
3874: LD_VAR 0 2
3878: PUSH
3879: LD_EXP 48
3883: EQUAL
3884: IFFALSE 3907
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_crane , 100 ) else
3886: LD_INT 22
3888: PPUSH
3889: LD_INT 3
3891: PPUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 52
3897: PPUSH
3898: LD_INT 100
3900: PPUSH
3901: CALL 55434 0 5
3905: GO 4246
// if i = Brown then
3907: LD_VAR 0 2
3911: PUSH
3912: LD_EXP 24
3916: EQUAL
3917: IFFALSE 3940
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_crane , 100 ) else
3919: LD_INT 3
3921: PPUSH
3922: LD_INT 3
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: LD_INT 13
3930: PPUSH
3931: LD_INT 100
3933: PPUSH
3934: CALL 55434 0 5
3938: GO 4246
// if uc_nation = nation_american then
3940: LD_OWVAR 21
3944: PUSH
3945: LD_INT 1
3947: EQUAL
3948: IFFALSE 4099
// begin PrepareVehicle ( [ us_medium_tracked , us_morphling , us_morphling ] [ uc_nation mod 3 + 1 ] , [ engine_combustion , engine_siberite , engine_combustion ] [ uc_nation mod 3 + 1 ] , control_manual , [ [ us_radar , us_gatling_gun , us_double_gun ] , [ us_heavy_gun , us_rocket_launcher , us_laser ] , [ us_heavy_gun , us_laser , us_cargo_bay ] ] [ uc_nation mod 3 + 1 ] [ rand ( 1 , 3 ) ] , rand ( 65 , 75 ) ) ;
3950: LD_INT 3
3952: PUSH
3953: LD_INT 5
3955: PUSH
3956: LD_INT 5
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: LIST
3963: PUSH
3964: LD_OWVAR 21
3968: PUSH
3969: LD_INT 3
3971: MOD
3972: PUSH
3973: LD_INT 1
3975: PLUS
3976: ARRAY
3977: PPUSH
3978: LD_INT 1
3980: PUSH
3981: LD_INT 3
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: PUSH
3992: LD_OWVAR 21
3996: PUSH
3997: LD_INT 3
3999: MOD
4000: PUSH
4001: LD_INT 1
4003: PLUS
4004: ARRAY
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: LD_INT 11
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 5
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 6
4025: PUSH
4026: LD_INT 7
4028: PUSH
4029: LD_INT 9
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: PUSH
4037: LD_INT 6
4039: PUSH
4040: LD_INT 9
4042: PUSH
4043: LD_INT 12
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_OWVAR 21
4060: PUSH
4061: LD_INT 3
4063: MOD
4064: PUSH
4065: LD_INT 1
4067: PLUS
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: PPUSH
4073: LD_INT 3
4075: PPUSH
4076: CALL_OW 12
4080: ARRAY
4081: PPUSH
4082: LD_INT 65
4084: PPUSH
4085: LD_INT 75
4087: PPUSH
4088: CALL_OW 12
4092: PPUSH
4093: CALL 55434 0 5
// end else
4097: GO 4246
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled ] [ uc_nation mod 3 + 1 ] , [ engine_combustion , engine_siberite , engine_combustion ] [ uc_nation mod 3 + 1 ] , control_manual , [ [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] , [ ru_heavy_gun , ru_rocket_launcher , ru_gun ] , [ ru_heavy_gun , ru_gatling_gun , ru_rocket_launcher ] ] [ uc_nation mod 3 + 1 ] [ rand ( 1 , 3 ) ] , rand ( 65 , 75 ) ) ;
4099: LD_INT 22
4101: PUSH
4102: LD_INT 23
4104: PUSH
4105: LD_INT 23
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: PUSH
4113: LD_OWVAR 21
4117: PUSH
4118: LD_INT 3
4120: MOD
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: ARRAY
4126: PPUSH
4127: LD_INT 1
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 1
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: PUSH
4141: LD_OWVAR 21
4145: PUSH
4146: LD_INT 3
4148: MOD
4149: PUSH
4150: LD_INT 1
4152: PLUS
4153: ARRAY
4154: PPUSH
4155: LD_INT 1
4157: PPUSH
4158: LD_INT 45
4160: PUSH
4161: LD_INT 43
4163: PUSH
4164: LD_INT 44
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 46
4174: PUSH
4175: LD_INT 45
4177: PUSH
4178: LD_INT 44
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 46
4188: PUSH
4189: LD_INT 43
4191: PUSH
4192: LD_INT 45
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: LIST
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: LD_OWVAR 21
4209: PUSH
4210: LD_INT 3
4212: MOD
4213: PUSH
4214: LD_INT 1
4216: PLUS
4217: ARRAY
4218: PUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 3
4224: PPUSH
4225: CALL_OW 12
4229: ARRAY
4230: PPUSH
4231: LD_INT 65
4233: PPUSH
4234: LD_INT 75
4236: PPUSH
4237: CALL_OW 12
4241: PPUSH
4242: CALL 55434 0 5
// end ; veh := CreateVehicle ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 45
4255: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4256: LD_VAR 0 3
4260: PPUSH
4261: LD_INT 3
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitArea ( veh , allianceSpawnArea , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 30
4275: PPUSH
4276: LD_INT 0
4278: PPUSH
4279: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4283: LD_VAR 0 2
4287: PPUSH
4288: LD_VAR 0 3
4292: PPUSH
4293: CALL_OW 52
// end ;
4297: GO 3740
4299: POP
4300: POP
// if artifactArCaptured then
4301: LD_EXP 9
4305: IFFALSE 4391
// begin uc_nation := nation_american ;
4307: LD_ADDR_OWVAR 21
4311: PUSH
4312: LD_INT 1
4314: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
4315: LD_INT 3
4317: PPUSH
4318: LD_INT 3
4320: PPUSH
4321: LD_INT 3
4323: PPUSH
4324: LD_INT 12
4326: PPUSH
4327: LD_INT 100
4329: PPUSH
4330: CALL 55434 0 5
// veh := CreateVehicle ;
4334: LD_ADDR_VAR 0 3
4338: PUSH
4339: CALL_OW 45
4343: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4344: LD_VAR 0 3
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: CALL_OW 233
// PlaceUnitXY ( veh , 198 , 22 , false ) ;
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_INT 198
4363: PPUSH
4364: LD_INT 22
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
4374: LD_VAR 0 3
4378: PPUSH
4379: LD_INT 4
4381: PPUSH
4382: LD_INT 50
4384: PPUSH
4385: CALL_OW 290
// end else
4389: GO 4410
// begin CreateResourcesXY ( mat_artifact , 267 , 226 , 5 , false ) ;
4391: LD_INT 4
4393: PPUSH
4394: LD_INT 267
4396: PPUSH
4397: LD_INT 226
4399: PPUSH
4400: LD_INT 5
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 58
// end ; uc_nation := nation_american ;
4410: LD_ADDR_OWVAR 21
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
4418: LD_INT 3
4420: PPUSH
4421: LD_INT 3
4423: PPUSH
4424: LD_INT 3
4426: PPUSH
4427: LD_INT 12
4429: PPUSH
4430: LD_INT 100
4432: PPUSH
4433: CALL 55434 0 5
// veh := CreateVehicle ;
4437: LD_ADDR_VAR 0 3
4441: PUSH
4442: CALL_OW 45
4446: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4447: LD_VAR 0 3
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: CALL_OW 233
// PlaceUnitXY ( veh , 218 , 23 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 218
4466: PPUSH
4467: LD_INT 23
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
4477: LD_VAR 0 3
4481: PPUSH
4482: LD_INT 4
4484: PPUSH
4485: LD_INT 30
4487: PPUSH
4488: CALL_OW 290
// uc_nation := nation_russian ;
4492: LD_ADDR_OWVAR 21
4496: PUSH
4497: LD_INT 3
4499: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
4500: LD_INT 22
4502: PPUSH
4503: LD_INT 3
4505: PPUSH
4506: LD_INT 3
4508: PPUSH
4509: LD_INT 51
4511: PPUSH
4512: LD_INT 100
4514: PPUSH
4515: CALL 55434 0 5
// veh := CreateVehicle ;
4519: LD_ADDR_VAR 0 3
4523: PUSH
4524: CALL_OW 45
4528: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 233
// PlaceUnitXY ( veh , 214 , 20 , false ) ;
4541: LD_VAR 0 3
4545: PPUSH
4546: LD_INT 214
4548: PPUSH
4549: LD_INT 20
4551: PPUSH
4552: LD_INT 0
4554: PPUSH
4555: CALL_OW 48
// SetCargo ( veh , mat_artifact , 40 ) ;
4559: LD_VAR 0 3
4563: PPUSH
4564: LD_INT 4
4566: PPUSH
4567: LD_INT 40
4569: PPUSH
4570: CALL_OW 290
// end ; end_of_file
4574: LD_VAR 0 1
4578: RET
// export Powell ; export function PrepareAmerican ; var i , b , veh , cl , tmp , depot , lab , armoury , workshop ; begin
4579: LD_INT 0
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
// InitHc ;
4591: CALL_OW 19
// uc_side := 1 ;
4595: LD_ADDR_OWVAR 20
4599: PUSH
4600: LD_INT 1
4602: ST_TO_ADDR
// uc_nation := 1 ;
4603: LD_ADDR_OWVAR 21
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: LD_INT 22
4618: PUSH
4619: LD_INT 1
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 21
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PPUSH
4640: CALL_OW 69
4644: PUSH
4645: FOR_IN
4646: IFFALSE 4662
// SetBLevel ( i , 10 ) ;
4648: LD_VAR 0 2
4652: PPUSH
4653: LD_INT 10
4655: PPUSH
4656: CALL_OW 241
4660: GO 4645
4662: POP
4663: POP
// SetResourceType ( GetBase ( am_depot ) , mat_cans , 7500 ) ;
4664: LD_INT 387
4666: PPUSH
4667: CALL_OW 274
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 7500
4677: PPUSH
4678: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_oil , 4000 ) ;
4682: LD_INT 387
4684: PPUSH
4685: CALL_OW 274
4689: PPUSH
4690: LD_INT 2
4692: PPUSH
4693: LD_INT 4000
4695: PPUSH
4696: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_siberit , 50 ) ;
4700: LD_INT 387
4702: PPUSH
4703: CALL_OW 274
4707: PPUSH
4708: LD_INT 3
4710: PPUSH
4711: LD_INT 50
4713: PPUSH
4714: CALL_OW 277
// SetResourceType ( GetBase ( am_depot2 ) , mat_cans , 5500 ) ;
4718: LD_INT 476
4720: PPUSH
4721: CALL_OW 274
4725: PPUSH
4726: LD_INT 1
4728: PPUSH
4729: LD_INT 5500
4731: PPUSH
4732: CALL_OW 277
// SetResourceType ( GetBase ( am_depot2 ) , mat_oil , 4000 ) ;
4736: LD_INT 476
4738: PPUSH
4739: CALL_OW 274
4743: PPUSH
4744: LD_INT 2
4746: PPUSH
4747: LD_INT 4000
4749: PPUSH
4750: CALL_OW 277
// SetResourceType ( GetBase ( am_depot2 ) , mat_siberit , 10 ) ;
4754: LD_INT 476
4756: PPUSH
4757: CALL_OW 274
4761: PPUSH
4762: LD_INT 3
4764: PPUSH
4765: LD_INT 10
4767: PPUSH
4768: CALL_OW 277
// Powell := NewCharacter ( Powell ) ;
4772: LD_ADDR_EXP 52
4776: PUSH
4777: LD_STRING Powell
4779: PPUSH
4780: CALL_OW 25
4784: ST_TO_ADDR
// PlaceHumanInUnit ( Powell , am_depot ) ;
4785: LD_EXP 52
4789: PPUSH
4790: LD_INT 387
4792: PPUSH
4793: CALL_OW 52
// tmp := [ ] ;
4797: LD_ADDR_VAR 0 6
4801: PUSH
4802: EMPTY
4803: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12p_ ) ;
4804: LD_ADDR_EXP 19
4808: PUSH
4809: LD_STRING Lisa
4811: PPUSH
4812: LD_EXP 1
4816: NOT
4817: PPUSH
4818: LD_STRING 12p_
4820: PPUSH
4821: CALL 50610 0 3
4825: ST_TO_ADDR
// if Lisa then
4826: LD_EXP 19
4830: IFFALSE 4848
// tmp := tmp ^ Lisa ;
4832: LD_ADDR_VAR 0 6
4836: PUSH
4837: LD_VAR 0 6
4841: PUSH
4842: LD_EXP 19
4846: ADD
4847: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12p_ ) ;
4848: LD_ADDR_EXP 20
4852: PUSH
4853: LD_STRING Donaldson
4855: PPUSH
4856: LD_EXP 1
4860: NOT
4861: PPUSH
4862: LD_STRING 12p_
4864: PPUSH
4865: CALL 50610 0 3
4869: ST_TO_ADDR
// if Donaldson then
4870: LD_EXP 20
4874: IFFALSE 4892
// tmp := tmp ^ Donaldson ;
4876: LD_ADDR_VAR 0 6
4880: PUSH
4881: LD_VAR 0 6
4885: PUSH
4886: LD_EXP 20
4890: ADD
4891: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12p_ ) ;
4892: LD_ADDR_EXP 21
4896: PUSH
4897: LD_STRING Bobby
4899: PPUSH
4900: LD_EXP 1
4904: NOT
4905: PPUSH
4906: LD_STRING 12p_
4908: PPUSH
4909: CALL 50610 0 3
4913: ST_TO_ADDR
// if Bobby then
4914: LD_EXP 21
4918: IFFALSE 4936
// tmp := tmp ^ Bobby ;
4920: LD_ADDR_VAR 0 6
4924: PUSH
4925: LD_VAR 0 6
4929: PUSH
4930: LD_EXP 21
4934: ADD
4935: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12p_ ) ;
4936: LD_ADDR_EXP 22
4940: PUSH
4941: LD_STRING Cyrus
4943: PPUSH
4944: LD_EXP 1
4948: NOT
4949: PPUSH
4950: LD_STRING 12p_
4952: PPUSH
4953: CALL 50610 0 3
4957: ST_TO_ADDR
// if Cyrus then
4958: LD_EXP 22
4962: IFFALSE 4980
// tmp := tmp ^ Cyrus ;
4964: LD_ADDR_VAR 0 6
4968: PUSH
4969: LD_VAR 0 6
4973: PUSH
4974: LD_EXP 22
4978: ADD
4979: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 12p_ ) ;
4980: LD_ADDR_EXP 24
4984: PUSH
4985: LD_STRING Brown
4987: PPUSH
4988: LD_EXP 1
4992: NOT
4993: PPUSH
4994: LD_STRING 12p_
4996: PPUSH
4997: CALL 50610 0 3
5001: ST_TO_ADDR
// if Brown then
5002: LD_EXP 24
5006: IFFALSE 5024
// tmp := tmp ^ Brown ;
5008: LD_ADDR_VAR 0 6
5012: PUSH
5013: LD_VAR 0 6
5017: PUSH
5018: LD_EXP 24
5022: ADD
5023: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12p_ ) ;
5024: LD_ADDR_EXP 25
5028: PUSH
5029: LD_STRING Gladstone
5031: PPUSH
5032: LD_EXP 1
5036: NOT
5037: PPUSH
5038: LD_STRING 12p_
5040: PPUSH
5041: CALL 50610 0 3
5045: ST_TO_ADDR
// if Gladstone then
5046: LD_EXP 25
5050: IFFALSE 5068
// tmp := tmp ^ Gladstone ;
5052: LD_ADDR_VAR 0 6
5056: PUSH
5057: LD_VAR 0 6
5061: PUSH
5062: LD_EXP 25
5066: ADD
5067: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 12p_ ) ;
5068: LD_ADDR_EXP 26
5072: PUSH
5073: LD_STRING Houten
5075: PPUSH
5076: LD_EXP 1
5080: NOT
5081: PPUSH
5082: LD_STRING 12p_
5084: PPUSH
5085: CALL 50610 0 3
5089: ST_TO_ADDR
// if Houten then
5090: LD_EXP 26
5094: IFFALSE 5112
// tmp := tmp ^ Houten ;
5096: LD_ADDR_VAR 0 6
5100: PUSH
5101: LD_VAR 0 6
5105: PUSH
5106: LD_EXP 26
5110: ADD
5111: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12p_ ) ;
5112: LD_ADDR_EXP 27
5116: PUSH
5117: LD_STRING Cornel
5119: PPUSH
5120: LD_EXP 1
5124: NOT
5125: PPUSH
5126: LD_STRING 12p_
5128: PPUSH
5129: CALL 50610 0 3
5133: ST_TO_ADDR
// if Cornel then
5134: LD_EXP 27
5138: IFFALSE 5156
// tmp := tmp ^ Cornel ;
5140: LD_ADDR_VAR 0 6
5144: PUSH
5145: LD_VAR 0 6
5149: PUSH
5150: LD_EXP 27
5154: ADD
5155: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 12p_ ) ;
5156: LD_ADDR_EXP 28
5160: PUSH
5161: LD_STRING Gary
5163: PPUSH
5164: LD_EXP 1
5168: NOT
5169: PPUSH
5170: LD_STRING 12p_
5172: PPUSH
5173: CALL 50610 0 3
5177: ST_TO_ADDR
// if Gary then
5178: LD_EXP 28
5182: IFFALSE 5200
// tmp := tmp ^ Gary ;
5184: LD_ADDR_VAR 0 6
5188: PUSH
5189: LD_VAR 0 6
5193: PUSH
5194: LD_EXP 28
5198: ADD
5199: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12p_ ) ;
5200: LD_ADDR_EXP 30
5204: PUSH
5205: LD_STRING Kikuchi
5207: PPUSH
5208: LD_EXP 1
5212: NOT
5213: PPUSH
5214: LD_STRING 12p_
5216: PPUSH
5217: CALL 50610 0 3
5221: ST_TO_ADDR
// if Kikuchi then
5222: LD_EXP 30
5226: IFFALSE 5244
// tmp := tmp ^ Kikuchi ;
5228: LD_ADDR_VAR 0 6
5232: PUSH
5233: LD_VAR 0 6
5237: PUSH
5238: LD_EXP 30
5242: ADD
5243: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 12p_others ) ;
5244: LD_ADDR_VAR 0 6
5248: PUSH
5249: LD_VAR 0 6
5253: PUSH
5254: LD_STRING 12p_others
5256: PPUSH
5257: CALL_OW 31
5261: UNION
5262: ST_TO_ADDR
// if tmp < 36 then
5263: LD_VAR 0 6
5267: PUSH
5268: LD_INT 36
5270: LESS
5271: IFFALSE 5338
// for i = 1 to 36 - tmp do
5273: LD_ADDR_VAR 0 2
5277: PUSH
5278: DOUBLE
5279: LD_INT 1
5281: DEC
5282: ST_TO_ADDR
5283: LD_INT 36
5285: PUSH
5286: LD_VAR 0 6
5290: MINUS
5291: PUSH
5292: FOR_TO
5293: IFFALSE 5336
// begin PrepareHuman ( sex_male , i mod 4 + 1 , 10 ) ;
5295: LD_INT 1
5297: PPUSH
5298: LD_VAR 0 2
5302: PUSH
5303: LD_INT 4
5305: MOD
5306: PUSH
5307: LD_INT 1
5309: PLUS
5310: PPUSH
5311: LD_INT 10
5313: PPUSH
5314: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
5318: LD_ADDR_VAR 0 6
5322: PUSH
5323: LD_VAR 0 6
5327: PUSH
5328: CALL_OW 44
5332: ADD
5333: ST_TO_ADDR
// end ;
5334: GO 5292
5336: POP
5337: POP
// for i in tmp do
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_VAR 0 6
5347: PUSH
5348: FOR_IN
5349: IFFALSE 5374
// PlaceUnitXYR ( i , 62 , 93 , 9 , false ) ;
5351: LD_VAR 0 2
5355: PPUSH
5356: LD_INT 62
5358: PPUSH
5359: LD_INT 93
5361: PPUSH
5362: LD_INT 9
5364: PPUSH
5365: LD_INT 0
5367: PPUSH
5368: CALL_OW 50
5372: GO 5348
5374: POP
5375: POP
// mc_bases := Replace ( mc_bases , 4 , FilterAllUnits ( [ f_side , 1 ] ) diff Powell ) ;
5376: LD_ADDR_EXP 87
5380: PUSH
5381: LD_EXP 87
5385: PPUSH
5386: LD_INT 4
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 69
5403: PUSH
5404: LD_EXP 52
5408: DIFF
5409: PPUSH
5410: CALL_OW 1
5414: ST_TO_ADDR
// uc_side := 0 ;
5415: LD_ADDR_OWVAR 20
5419: PUSH
5420: LD_INT 0
5422: ST_TO_ADDR
// uc_nation := 0 ;
5423: LD_ADDR_OWVAR 21
5427: PUSH
5428: LD_INT 0
5430: ST_TO_ADDR
// for i = 1 to 4 do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_INT 4
5443: PUSH
5444: FOR_TO
5445: IFFALSE 5476
// begin InitHc ;
5447: CALL_OW 19
// hc_class := class_apeman ;
5451: LD_ADDR_OWVAR 28
5455: PUSH
5456: LD_INT 12
5458: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , powellApe , false ) ;
5459: CALL_OW 44
5463: PPUSH
5464: LD_INT 11
5466: PPUSH
5467: LD_INT 0
5469: PPUSH
5470: CALL_OW 49
// end ;
5474: GO 5444
5476: POP
5477: POP
// end ;
5478: LD_VAR 0 1
5482: RET
// every 11 11$30 trigger not americanDestroyed and not MC_GetVehicles ( 4 , true ) do var i , tmp , target ;
5483: LD_EXP 4
5487: NOT
5488: PUSH
5489: LD_INT 4
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: CALL 45684 0 2
5499: NOT
5500: AND
5501: IFFALSE 6273
5503: GO 5505
5505: DISABLE
5506: LD_INT 0
5508: PPUSH
5509: PPUSH
5510: PPUSH
// begin enable ;
5511: ENABLE
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
5512: LD_INT 22
5514: PUSH
5515: LD_INT 1
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 23
5524: PUSH
5525: LD_INT 1
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 30
5534: PUSH
5535: LD_INT 3
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: PPUSH
5547: CALL_OW 69
5551: NOT
5552: IFFALSE 5556
// exit ;
5554: GO 6273
// if Prob ( 40 ) then
5556: LD_INT 40
5558: PPUSH
5559: CALL_OW 13
5563: IFFALSE 5690
// begin MC_InsertProduceList ( 4 , [ [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
5565: LD_INT 4
5567: PPUSH
5568: LD_INT 5
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: LD_INT 7
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 5
5588: PUSH
5589: LD_INT 1
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 7
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 5
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: LD_INT 2
5612: PUSH
5613: LD_INT 7
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 5
5624: PUSH
5625: LD_INT 1
5627: PUSH
5628: LD_INT 2
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 5
5642: PUSH
5643: LD_INT 1
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 6
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: LD_INT 5
5660: PUSH
5661: LD_INT 1
5663: PUSH
5664: LD_INT 2
5666: PUSH
5667: LD_INT 6
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: PPUSH
5684: CALL 44266 0 2
// end else
5688: GO 5813
// begin MC_InsertProduceList ( 4 , [ [ us_morphling , engine_combustion , control_remote , us_rocket_launcher ] , [ us_morphling , engine_combustion , control_remote , us_laser ] , [ us_morphling , engine_combustion , control_remote , us_laser ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
5690: LD_INT 4
5692: PPUSH
5693: LD_INT 5
5695: PUSH
5696: LD_INT 1
5698: PUSH
5699: LD_INT 2
5701: PUSH
5702: LD_INT 7
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 5
5713: PUSH
5714: LD_INT 1
5716: PUSH
5717: LD_INT 2
5719: PUSH
5720: LD_INT 9
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 1
5734: PUSH
5735: LD_INT 2
5737: PUSH
5738: LD_INT 9
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: PUSH
5747: LD_INT 5
5749: PUSH
5750: LD_INT 1
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: LD_INT 6
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 5
5767: PUSH
5768: LD_INT 1
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: LD_INT 6
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 5
5785: PUSH
5786: LD_INT 1
5788: PUSH
5789: LD_INT 2
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL 44266 0 2
// end ; repeat wait ( 0 0$1 ) ;
5813: LD_INT 35
5815: PPUSH
5816: CALL_OW 67
// until MC_GetVehicles ( 4 , true ) >= 6 ;
5820: LD_INT 4
5822: PPUSH
5823: LD_INT 1
5825: PPUSH
5826: CALL 45684 0 2
5830: PUSH
5831: LD_INT 6
5833: GREATEREQUAL
5834: IFFALSE 5813
// wait ( 0 0$30 ) ;
5836: LD_INT 1050
5838: PPUSH
5839: CALL_OW 67
// tmp := MC_GetVehicles ( 4 , true ) ;
5843: LD_ADDR_VAR 0 2
5847: PUSH
5848: LD_INT 4
5850: PPUSH
5851: LD_INT 1
5853: PPUSH
5854: CALL 45684 0 2
5858: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 4 , mc_vehicles [ 4 ] diff tmp ) ;
5859: LD_ADDR_EXP 106
5863: PUSH
5864: LD_EXP 106
5868: PPUSH
5869: LD_INT 4
5871: PPUSH
5872: LD_EXP 106
5876: PUSH
5877: LD_INT 4
5879: ARRAY
5880: PUSH
5881: LD_VAR 0 2
5885: DIFF
5886: PPUSH
5887: CALL_OW 1
5891: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
5892: LD_ADDR_VAR 0 3
5896: PUSH
5897: LD_INT 0
5899: PPUSH
5900: LD_INT 2
5902: PPUSH
5903: CALL_OW 12
5907: ST_TO_ADDR
// if target then
5908: LD_VAR 0 3
5912: IFFALSE 6040
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
5914: LD_ADDR_VAR 0 2
5918: PUSH
5919: LD_VAR 0 2
5923: PPUSH
5924: LD_INT 24
5926: PUSH
5927: LD_INT 250
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PPUSH
5934: CALL_OW 72
5938: ST_TO_ADDR
// for i in tmp do
5939: LD_ADDR_VAR 0 1
5943: PUSH
5944: LD_VAR 0 2
5948: PUSH
5949: FOR_IN
5950: IFFALSE 5990
// if GetDistUnitXY ( i , 114 , 108 ) > 9 then
5952: LD_VAR 0 1
5956: PPUSH
5957: LD_INT 114
5959: PPUSH
5960: LD_INT 108
5962: PPUSH
5963: CALL_OW 297
5967: PUSH
5968: LD_INT 9
5970: GREATER
5971: IFFALSE 5988
// ComMoveXY ( i , 114 , 108 ) ;
5973: LD_VAR 0 1
5977: PPUSH
5978: LD_INT 114
5980: PPUSH
5981: LD_INT 108
5983: PPUSH
5984: CALL_OW 111
5988: GO 5949
5990: POP
5991: POP
// wait ( 0 0$1 ) ;
5992: LD_INT 35
5994: PPUSH
5995: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 114 , 108 , 9 ] ) >= ( tmp - 1 ) ;
5999: LD_VAR 0 2
6003: PPUSH
6004: LD_INT 92
6006: PUSH
6007: LD_INT 114
6009: PUSH
6010: LD_INT 108
6012: PUSH
6013: LD_INT 9
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PPUSH
6022: CALL_OW 72
6026: PUSH
6027: LD_VAR 0 2
6031: PUSH
6032: LD_INT 1
6034: MINUS
6035: GREATEREQUAL
6036: IFFALSE 5914
// end else
6038: GO 6164
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_VAR 0 2
6049: PPUSH
6050: LD_INT 24
6052: PUSH
6053: LD_INT 250
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PPUSH
6060: CALL_OW 72
6064: ST_TO_ADDR
// for i in tmp do
6065: LD_ADDR_VAR 0 1
6069: PUSH
6070: LD_VAR 0 2
6074: PUSH
6075: FOR_IN
6076: IFFALSE 6116
// if GetDistUnitXY ( i , 129 , 139 ) > 9 then
6078: LD_VAR 0 1
6082: PPUSH
6083: LD_INT 129
6085: PPUSH
6086: LD_INT 139
6088: PPUSH
6089: CALL_OW 297
6093: PUSH
6094: LD_INT 9
6096: GREATER
6097: IFFALSE 6114
// ComMoveXY ( i , 129 , 139 ) ;
6099: LD_VAR 0 1
6103: PPUSH
6104: LD_INT 129
6106: PPUSH
6107: LD_INT 139
6109: PPUSH
6110: CALL_OW 111
6114: GO 6075
6116: POP
6117: POP
// wait ( 0 0$1 ) ;
6118: LD_INT 35
6120: PPUSH
6121: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 129 , 139 , 9 ] ) >= ( tmp - 1 ) ;
6125: LD_VAR 0 2
6129: PPUSH
6130: LD_INT 92
6132: PUSH
6133: LD_INT 129
6135: PUSH
6136: LD_INT 139
6138: PUSH
6139: LD_INT 9
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 72
6152: PUSH
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 1
6160: MINUS
6161: GREATEREQUAL
6162: IFFALSE 6040
// end ; repeat wait ( 0 0$1 ) ;
6164: LD_INT 35
6166: PPUSH
6167: CALL_OW 67
// for i in tmp do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_VAR 0 2
6180: PUSH
6181: FOR_IN
6182: IFFALSE 6264
// begin if GetLives ( i ) > 251 then
6184: LD_VAR 0 1
6188: PPUSH
6189: CALL_OW 256
6193: PUSH
6194: LD_INT 251
6196: GREATER
6197: IFFALSE 6235
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) else
6199: LD_VAR 0 1
6203: PPUSH
6204: LD_INT 81
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: PPUSH
6219: LD_VAR 0 1
6223: PPUSH
6224: CALL_OW 74
6228: PPUSH
6229: CALL_OW 115
6233: GO 6262
// if IsDead ( i ) then
6235: LD_VAR 0 1
6239: PPUSH
6240: CALL_OW 301
6244: IFFALSE 6262
// tmp := tmp diff i ;
6246: LD_ADDR_VAR 0 2
6250: PUSH
6251: LD_VAR 0 2
6255: PUSH
6256: LD_VAR 0 1
6260: DIFF
6261: ST_TO_ADDR
// end ;
6262: GO 6181
6264: POP
6265: POP
// until not tmp ;
6266: LD_VAR 0 2
6270: NOT
6271: IFFALSE 6164
// end ;
6273: PPOPN 3
6275: END
// every 30 30$00 trigger not americanDestroyed do
6276: LD_EXP 4
6280: NOT
6281: IFFALSE 6346
6283: GO 6285
6285: DISABLE
// begin wait ( [ 30 30$00 , 20 20$00 , 10 10$00 ] [ Difficulty ] ) ;
6286: LD_INT 63000
6288: PUSH
6289: LD_INT 42000
6291: PUSH
6292: LD_INT 21000
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_OWVAR 67
6304: ARRAY
6305: PPUSH
6306: CALL_OW 67
// if americanDestroyed then
6310: LD_EXP 4
6314: IFFALSE 6318
// exit ;
6316: GO 6346
// MC_InsertProduceList ( 4 , [ [ us_morphling , engine_siberite , control_manual , us_siberium_rocket ] ] ) ;
6318: LD_INT 4
6320: PPUSH
6321: LD_INT 5
6323: PUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: LD_INT 8
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: PPUSH
6342: CALL 44266 0 2
// end ; end_of_file
6346: END
// export function PrepareArabian ; var i , un , tmp , side ; begin
6347: LD_INT 0
6349: PPUSH
6350: PPUSH
6351: PPUSH
6352: PPUSH
6353: PPUSH
// side := 2 ;
6354: LD_ADDR_VAR 0 5
6358: PUSH
6359: LD_INT 2
6361: ST_TO_ADDR
// InitHc ;
6362: CALL_OW 19
// uc_side := side ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_VAR 0 5
6375: ST_TO_ADDR
// uc_nation := 2 ;
6376: LD_ADDR_OWVAR 21
6380: PUSH
6381: LD_INT 2
6383: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: LD_INT 22
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 21
6401: PUSH
6402: LD_INT 3
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 69
6417: PUSH
6418: FOR_IN
6419: IFFALSE 6435
// SetBLevel ( i , 10 ) ;
6421: LD_VAR 0 2
6425: PPUSH
6426: LD_INT 10
6428: PPUSH
6429: CALL_OW 241
6433: GO 6418
6435: POP
6436: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6437: LD_ADDR_VAR 0 4
6441: PUSH
6442: LD_INT 22
6444: PUSH
6445: LD_VAR 0 5
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 30
6456: PUSH
6457: LD_INT 32
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 58
6466: PUSH
6467: EMPTY
6468: LIST
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: PPUSH
6475: CALL_OW 69
6479: ST_TO_ADDR
// for i = 1 to 10 do
6480: LD_ADDR_VAR 0 2
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_INT 10
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6566
// begin uc_nation := nation_nature ;
6496: LD_ADDR_OWVAR 21
6500: PUSH
6501: LD_INT 0
6503: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
6504: LD_ADDR_OWVAR 28
6508: PUSH
6509: LD_INT 15
6511: ST_TO_ADDR
// hc_gallery :=  ;
6512: LD_ADDR_OWVAR 33
6516: PUSH
6517: LD_STRING 
6519: ST_TO_ADDR
// hc_name :=  ;
6520: LD_ADDR_OWVAR 26
6524: PUSH
6525: LD_STRING 
6527: ST_TO_ADDR
// un := CreateHuman ;
6528: LD_ADDR_VAR 0 3
6532: PUSH
6533: CALL_OW 44
6537: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_VAR 0 4
6547: PUSH
6548: LD_VAR 0 4
6552: PUSH
6553: LD_VAR 0 2
6557: MINUS
6558: ARRAY
6559: PPUSH
6560: CALL_OW 52
// end ;
6564: GO 6493
6566: POP
6567: POP
// PrepareBase ( ar_depot , arabianBaseArea ,  , [ 8 , 9 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 16 , 6 , 6 , 6 ] ) ;
6568: LD_INT 503
6570: PPUSH
6571: LD_INT 27
6573: PPUSH
6574: LD_STRING 
6576: PPUSH
6577: LD_INT 8
6579: PUSH
6580: LD_INT 9
6582: PUSH
6583: LD_INT 10
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: PUSH
6591: LD_OWVAR 67
6595: ARRAY
6596: PPUSH
6597: LD_INT 3000
6599: PUSH
6600: LD_INT 500
6602: PUSH
6603: LD_INT 150
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PPUSH
6611: LD_INT 16
6613: PUSH
6614: LD_INT 6
6616: PUSH
6617: LD_INT 6
6619: PUSH
6620: LD_INT 6
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: PPUSH
6629: CALL 58843 0 6
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) ) ;
6633: LD_ADDR_EXP 87
6637: PUSH
6638: LD_EXP 87
6642: PPUSH
6643: LD_INT 1
6645: PPUSH
6646: LD_INT 22
6648: PUSH
6649: LD_VAR 0 5
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 23
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 3
6670: PUSH
6671: LD_INT 21
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: PPUSH
6690: CALL_OW 69
6694: PPUSH
6695: CALL_OW 1
6699: ST_TO_ADDR
// end ;
6700: LD_VAR 0 1
6704: RET
// export Omar ; export function PrepareOmarAli ; begin
6705: LD_INT 0
6707: PPUSH
// uc_side := 5 ;
6708: LD_ADDR_OWVAR 20
6712: PUSH
6713: LD_INT 5
6715: ST_TO_ADDR
// uc_nation := 2 ;
6716: LD_ADDR_OWVAR 21
6720: PUSH
6721: LD_INT 2
6723: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
6724: LD_ADDR_EXP 53
6728: PUSH
6729: LD_STRING Omar
6731: PPUSH
6732: CALL_OW 25
6736: ST_TO_ADDR
// PlaceUnitXY ( Omar , 330 , 244 , false ) ;
6737: LD_EXP 53
6741: PPUSH
6742: LD_INT 330
6744: PPUSH
6745: LD_INT 244
6747: PPUSH
6748: LD_INT 0
6750: PPUSH
6751: CALL_OW 48
// ComMoveXY ( Omar , 252 , 220 ) ;
6755: LD_EXP 53
6759: PPUSH
6760: LD_INT 252
6762: PPUSH
6763: LD_INT 220
6765: PPUSH
6766: CALL_OW 111
// end ; end_of_file
6770: LD_VAR 0 1
6774: RET
// export Schulz , Kozlov ; export function PrepareLegion ; var i , side , un , tmp ; begin
6775: LD_INT 0
6777: PPUSH
6778: PPUSH
6779: PPUSH
6780: PPUSH
6781: PPUSH
// side := 8 ;
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_INT 8
6789: ST_TO_ADDR
// InitHc ;
6790: CALL_OW 19
// uc_side := side ;
6794: LD_ADDR_OWVAR 20
6798: PUSH
6799: LD_VAR 0 3
6803: ST_TO_ADDR
// uc_nation := 2 ;
6804: LD_ADDR_OWVAR 21
6808: PUSH
6809: LD_INT 2
6811: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6812: LD_ADDR_VAR 0 2
6816: PUSH
6817: LD_INT 22
6819: PUSH
6820: LD_VAR 0 3
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 21
6831: PUSH
6832: LD_INT 3
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 69
6847: PUSH
6848: FOR_IN
6849: IFFALSE 6865
// SetBLevel ( i , 10 ) ;
6851: LD_VAR 0 2
6855: PPUSH
6856: LD_INT 10
6858: PPUSH
6859: CALL_OW 241
6863: GO 6848
6865: POP
6866: POP
// Schulz := NewCharacter ( Schulz ) ;
6867: LD_ADDR_EXP 54
6871: PUSH
6872: LD_STRING Schulz
6874: PPUSH
6875: CALL_OW 25
6879: ST_TO_ADDR
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
6880: LD_ADDR_EXP 55
6884: PUSH
6885: LD_STRING Kozlov
6887: PPUSH
6888: LD_INT 0
6890: PPUSH
6891: LD_STRING 
6893: PPUSH
6894: CALL 50610 0 3
6898: ST_TO_ADDR
// PlaceHumanInUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6899: LD_EXP 55
6903: PPUSH
6904: LD_INT 22
6906: PUSH
6907: LD_INT 8
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 23
6916: PUSH
6917: LD_INT 3
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 8
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: PPUSH
6939: CALL_OW 69
6943: PUSH
6944: LD_INT 1
6946: ARRAY
6947: PPUSH
6948: CALL_OW 52
// SetSkill ( Kozlov , class_mechanic , 10 ) ;
6952: LD_EXP 55
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 10
6962: PPUSH
6963: CALL_OW 237
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6967: LD_ADDR_VAR 0 5
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_VAR 0 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 32
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 58
6996: PUSH
6997: EMPTY
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 69
7009: ST_TO_ADDR
// for i = 1 to 10 do
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: DOUBLE
7016: LD_INT 1
7018: DEC
7019: ST_TO_ADDR
7020: LD_INT 10
7022: PUSH
7023: FOR_TO
7024: IFFALSE 7096
// begin uc_nation := nation_nature ;
7026: LD_ADDR_OWVAR 21
7030: PUSH
7031: LD_INT 0
7033: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
7034: LD_ADDR_OWVAR 28
7038: PUSH
7039: LD_INT 15
7041: ST_TO_ADDR
// hc_gallery :=  ;
7042: LD_ADDR_OWVAR 33
7046: PUSH
7047: LD_STRING 
7049: ST_TO_ADDR
// hc_name :=  ;
7050: LD_ADDR_OWVAR 26
7054: PUSH
7055: LD_STRING 
7057: ST_TO_ADDR
// un := CreateHuman ;
7058: LD_ADDR_VAR 0 4
7062: PUSH
7063: CALL_OW 44
7067: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
7068: LD_VAR 0 4
7072: PPUSH
7073: LD_VAR 0 5
7077: PUSH
7078: LD_VAR 0 5
7082: PUSH
7083: LD_VAR 0 2
7087: MINUS
7088: ARRAY
7089: PPUSH
7090: CALL_OW 52
// end ;
7094: GO 7023
7096: POP
7097: POP
// PrepareBase ( ar_depot1 , legionBaseArea ,  , [ 8 , 9 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 16 , 6 , 6 , 8 ] ) ;
7098: LD_INT 324
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: LD_STRING 
7106: PPUSH
7107: LD_INT 8
7109: PUSH
7110: LD_INT 9
7112: PUSH
7113: LD_INT 10
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: PUSH
7121: LD_OWVAR 67
7125: ARRAY
7126: PPUSH
7127: LD_INT 3000
7129: PUSH
7130: LD_INT 500
7132: PUSH
7133: LD_INT 150
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: PPUSH
7141: LD_INT 16
7143: PUSH
7144: LD_INT 6
7146: PUSH
7147: LD_INT 6
7149: PUSH
7150: LD_INT 8
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL 58843 0 6
// mc_bases := Replace ( mc_bases , 3 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Schulz ) ;
7163: LD_ADDR_EXP 87
7167: PUSH
7168: LD_EXP 87
7172: PPUSH
7173: LD_INT 3
7175: PPUSH
7176: LD_INT 22
7178: PUSH
7179: LD_VAR 0 3
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 23
7190: PUSH
7191: LD_INT 2
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 3
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 2
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: PUSH
7225: LD_EXP 54
7229: DIFF
7230: PPUSH
7231: CALL_OW 1
7235: ST_TO_ADDR
// end ;
7236: LD_VAR 0 1
7240: RET
// export function BuildKozlovBomb ; begin
7241: LD_INT 0
7243: PPUSH
// if not IsOk ( kozlov_fac ) or not IsOk ( kozlov_lab ) then
7244: LD_INT 332
7246: PPUSH
7247: CALL_OW 302
7251: NOT
7252: PUSH
7253: LD_INT 336
7255: PPUSH
7256: CALL_OW 302
7260: NOT
7261: OR
7262: IFFALSE 7266
// exit ;
7264: GO 7363
// ComChangeProfession ( Kozlov , 4 ) ;
7266: LD_EXP 55
7270: PPUSH
7271: LD_INT 4
7273: PPUSH
7274: CALL_OW 123
// ComResearch ( kozlov_lab , tech_sibFiss ) ;
7278: LD_INT 336
7280: PPUSH
7281: LD_INT 25
7283: PPUSH
7284: CALL_OW 124
// repeat wait ( 0 0$1 ) ;
7288: LD_INT 35
7290: PPUSH
7291: CALL_OW 67
// until GetTech ( tech_sibFiss , 8 ) = state_researched ;
7295: LD_INT 25
7297: PPUSH
7298: LD_INT 8
7300: PPUSH
7301: CALL_OW 321
7305: PUSH
7306: LD_INT 2
7308: EQUAL
7309: IFFALSE 7288
// ComExitBuilding ( Kozlov ) ;
7311: LD_EXP 55
7315: PPUSH
7316: CALL_OW 122
// AddComEnterUnit ( Kozlov , kozlov_fac ) ;
7320: LD_EXP 55
7324: PPUSH
7325: LD_INT 332
7327: PPUSH
7328: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
7332: LD_EXP 55
7336: PPUSH
7337: LD_INT 3
7339: PPUSH
7340: CALL_OW 183
// ComConstruct ( kozlov_fac , ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ) ;
7344: LD_INT 332
7346: PPUSH
7347: LD_INT 23
7349: PPUSH
7350: LD_INT 3
7352: PPUSH
7353: LD_INT 1
7355: PPUSH
7356: LD_INT 48
7358: PPUSH
7359: CALL_OW 125
// end ;
7363: LD_VAR 0 1
7367: RET
// every 11 11$30 trigger not legionDestroyed and not MC_GetVehicles ( 3 , true ) do var i , tmp , target ;
7368: LD_EXP 3
7372: NOT
7373: PUSH
7374: LD_INT 3
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL 45684 0 2
7384: NOT
7385: AND
7386: IFFALSE 8226
7388: GO 7390
7390: DISABLE
7391: LD_INT 0
7393: PPUSH
7394: PPUSH
7395: PPUSH
// begin enable ;
7396: ENABLE
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
7397: LD_INT 22
7399: PUSH
7400: LD_INT 8
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 23
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 30
7419: PUSH
7420: LD_INT 3
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: NOT
7437: IFFALSE 7441
// exit ;
7439: GO 8226
// if Prob ( 40 ) then
7441: LD_INT 40
7443: PPUSH
7444: CALL_OW 13
7448: IFFALSE 7575
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
7450: LD_INT 3
7452: PPUSH
7453: LD_INT 14
7455: PUSH
7456: LD_INT 1
7458: PUSH
7459: LD_INT 2
7461: PUSH
7462: LD_INT 28
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 14
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: LD_INT 28
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 14
7491: PUSH
7492: LD_INT 1
7494: PUSH
7495: LD_INT 2
7497: PUSH
7498: LD_INT 28
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 14
7509: PUSH
7510: LD_INT 1
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_INT 28
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 14
7527: PUSH
7528: LD_INT 1
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: LD_INT 28
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 14
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: LD_INT 26
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: PPUSH
7569: CALL 44266 0 2
// end else
7573: GO 7766
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
7575: LD_INT 3
7577: PPUSH
7578: LD_INT 14
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: LD_INT 27
7589: PUSH
7590: LD_INT 26
7592: PUSH
7593: LD_INT 26
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: PUSH
7601: LD_OWVAR 67
7605: ARRAY
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 14
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: LD_INT 2
7621: PUSH
7622: LD_INT 27
7624: PUSH
7625: LD_INT 26
7627: PUSH
7628: LD_INT 26
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 14
7650: PUSH
7651: LD_INT 1
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: LD_INT 26
7659: PUSH
7660: LD_INT 26
7662: PUSH
7663: LD_INT 29
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: PUSH
7671: LD_OWVAR 67
7675: ARRAY
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 13
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: LD_INT 2
7691: PUSH
7692: LD_INT 26
7694: PUSH
7695: LD_INT 29
7697: PUSH
7698: LD_INT 29
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: PUSH
7706: LD_OWVAR 67
7710: ARRAY
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 13
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: LD_INT 29
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 14
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 26
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL 44266 0 2
// end ; repeat wait ( 0 0$1 ) ;
7766: LD_INT 35
7768: PPUSH
7769: CALL_OW 67
// until MC_GetVehicles ( 3 , true ) >= 6 ;
7773: LD_INT 3
7775: PPUSH
7776: LD_INT 1
7778: PPUSH
7779: CALL 45684 0 2
7783: PUSH
7784: LD_INT 6
7786: GREATEREQUAL
7787: IFFALSE 7766
// wait ( 0 0$30 ) ;
7789: LD_INT 1050
7791: PPUSH
7792: CALL_OW 67
// tmp := MC_GetVehicles ( 3 , true ) ;
7796: LD_ADDR_VAR 0 2
7800: PUSH
7801: LD_INT 3
7803: PPUSH
7804: LD_INT 1
7806: PPUSH
7807: CALL 45684 0 2
7811: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 3 , mc_vehicles [ 3 ] diff tmp ) ;
7812: LD_ADDR_EXP 106
7816: PUSH
7817: LD_EXP 106
7821: PPUSH
7822: LD_INT 3
7824: PPUSH
7825: LD_EXP 106
7829: PUSH
7830: LD_INT 3
7832: ARRAY
7833: PUSH
7834: LD_VAR 0 2
7838: DIFF
7839: PPUSH
7840: CALL_OW 1
7844: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
7845: LD_ADDR_VAR 0 3
7849: PUSH
7850: LD_INT 0
7852: PPUSH
7853: LD_INT 2
7855: PPUSH
7856: CALL_OW 12
7860: ST_TO_ADDR
// if target then
7861: LD_VAR 0 3
7865: IFFALSE 7993
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
7867: LD_ADDR_VAR 0 2
7871: PUSH
7872: LD_VAR 0 2
7876: PPUSH
7877: LD_INT 24
7879: PUSH
7880: LD_INT 250
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PPUSH
7887: CALL_OW 72
7891: ST_TO_ADDR
// for i in tmp do
7892: LD_ADDR_VAR 0 1
7896: PUSH
7897: LD_VAR 0 2
7901: PUSH
7902: FOR_IN
7903: IFFALSE 7943
// if GetDistUnitXY ( i , 89 , 71 ) > 9 then
7905: LD_VAR 0 1
7909: PPUSH
7910: LD_INT 89
7912: PPUSH
7913: LD_INT 71
7915: PPUSH
7916: CALL_OW 297
7920: PUSH
7921: LD_INT 9
7923: GREATER
7924: IFFALSE 7941
// ComMoveXY ( i , 89 , 71 ) ;
7926: LD_VAR 0 1
7930: PPUSH
7931: LD_INT 89
7933: PPUSH
7934: LD_INT 71
7936: PPUSH
7937: CALL_OW 111
7941: GO 7902
7943: POP
7944: POP
// wait ( 0 0$1 ) ;
7945: LD_INT 35
7947: PPUSH
7948: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 89 , 71 , 9 ] ) >= ( tmp - 1 ) ;
7952: LD_VAR 0 2
7956: PPUSH
7957: LD_INT 92
7959: PUSH
7960: LD_INT 89
7962: PUSH
7963: LD_INT 71
7965: PUSH
7966: LD_INT 9
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: PPUSH
7975: CALL_OW 72
7979: PUSH
7980: LD_VAR 0 2
7984: PUSH
7985: LD_INT 1
7987: MINUS
7988: GREATEREQUAL
7989: IFFALSE 7867
// end else
7991: GO 8117
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
7993: LD_ADDR_VAR 0 2
7997: PUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 24
8005: PUSH
8006: LD_INT 250
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 72
8017: ST_TO_ADDR
// for i in tmp do
8018: LD_ADDR_VAR 0 1
8022: PUSH
8023: LD_VAR 0 2
8027: PUSH
8028: FOR_IN
8029: IFFALSE 8069
// if GetDistUnitXY ( i , 147 , 4 ) > 9 then
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 147
8038: PPUSH
8039: LD_INT 4
8041: PPUSH
8042: CALL_OW 297
8046: PUSH
8047: LD_INT 9
8049: GREATER
8050: IFFALSE 8067
// ComMoveXY ( i , 147 , 4 ) ;
8052: LD_VAR 0 1
8056: PPUSH
8057: LD_INT 147
8059: PPUSH
8060: LD_INT 4
8062: PPUSH
8063: CALL_OW 111
8067: GO 8028
8069: POP
8070: POP
// wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 147 , 4 , 9 ] ) >= ( tmp - 1 ) ;
8078: LD_VAR 0 2
8082: PPUSH
8083: LD_INT 92
8085: PUSH
8086: LD_INT 147
8088: PUSH
8089: LD_INT 4
8091: PUSH
8092: LD_INT 9
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 72
8105: PUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 1
8113: MINUS
8114: GREATEREQUAL
8115: IFFALSE 7993
// end ; repeat wait ( 0 0$1 ) ;
8117: LD_INT 35
8119: PPUSH
8120: CALL_OW 67
// for i in tmp do
8124: LD_ADDR_VAR 0 1
8128: PUSH
8129: LD_VAR 0 2
8133: PUSH
8134: FOR_IN
8135: IFFALSE 8217
// begin if GetLives ( i ) > 251 then
8137: LD_VAR 0 1
8141: PPUSH
8142: CALL_OW 256
8146: PUSH
8147: LD_INT 251
8149: GREATER
8150: IFFALSE 8188
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
8152: LD_VAR 0 1
8156: PPUSH
8157: LD_INT 81
8159: PUSH
8160: LD_INT 8
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: PPUSH
8172: LD_VAR 0 1
8176: PPUSH
8177: CALL_OW 74
8181: PPUSH
8182: CALL_OW 115
8186: GO 8215
// if IsDead ( i ) then
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 301
8197: IFFALSE 8215
// tmp := tmp diff i ;
8199: LD_ADDR_VAR 0 2
8203: PUSH
8204: LD_VAR 0 2
8208: PUSH
8209: LD_VAR 0 1
8213: DIFF
8214: ST_TO_ADDR
// end ;
8215: GO 8134
8217: POP
8218: POP
// until not tmp ;
8219: LD_VAR 0 2
8223: NOT
8224: IFFALSE 8117
// end ;
8226: PPOPN 3
8228: END
// every 0 0$1 trigger IsOk ( Kozlov ) and not legionDestroyed do
8229: LD_EXP 55
8233: PPUSH
8234: CALL_OW 302
8238: PUSH
8239: LD_EXP 3
8243: NOT
8244: AND
8245: IFFALSE 8254
8247: GO 8249
8249: DISABLE
// BuildKozlovBomb ;
8250: CALL 7241 0 0
8254: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) do
8255: LD_INT 22
8257: PUSH
8258: LD_INT 8
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 34
8267: PUSH
8268: LD_INT 48
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 69
8283: IFFALSE 8331
8285: GO 8287
8287: DISABLE
// begin ComAttackPlace ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] , 173 , 96 ) ;
8288: LD_INT 22
8290: PUSH
8291: LD_INT 8
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 34
8300: PUSH
8301: LD_INT 48
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PUSH
8317: LD_INT 1
8319: ARRAY
8320: PPUSH
8321: LD_INT 173
8323: PPUSH
8324: LD_INT 96
8326: PPUSH
8327: CALL_OW 116
// end ; end_of_file
8331: END
// export Platonov , Yakotich , Gleb , Bierezov ; export behemoths , behemothBuilders ; export function PrepareRussian ; var i , j , base , tmp , side , xy , b , teleport ; begin
8332: LD_INT 0
8334: PPUSH
8335: PPUSH
8336: PPUSH
8337: PPUSH
8338: PPUSH
8339: PPUSH
8340: PPUSH
8341: PPUSH
8342: PPUSH
// side := 3 ;
8343: LD_ADDR_VAR 0 6
8347: PUSH
8348: LD_INT 3
8350: ST_TO_ADDR
// InitHc ;
8351: CALL_OW 19
// uc_side := side ;
8355: LD_ADDR_OWVAR 20
8359: PUSH
8360: LD_VAR 0 6
8364: ST_TO_ADDR
// uc_nation := 3 ;
8365: LD_ADDR_OWVAR 21
8369: PUSH
8370: LD_INT 3
8372: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_VAR 0 6
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PUSH
8390: LD_INT 21
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 69
8408: PUSH
8409: FOR_IN
8410: IFFALSE 8426
// SetBLevel ( i , 10 ) ;
8412: LD_VAR 0 2
8416: PPUSH
8417: LD_INT 10
8419: PPUSH
8420: CALL_OW 241
8424: GO 8409
8426: POP
8427: POP
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
8428: LD_ADDR_VAR 0 9
8432: PUSH
8433: LD_INT 22
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 30
8447: PUSH
8448: LD_INT 34
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PPUSH
8459: CALL_OW 69
8463: ST_TO_ADDR
// if teleport then
8464: LD_VAR 0 9
8468: IFFALSE 8489
// TeleportExit ( teleport [ 1 ] , 123 , 122 ) ;
8470: LD_VAR 0 9
8474: PUSH
8475: LD_INT 1
8477: ARRAY
8478: PPUSH
8479: LD_INT 123
8481: PPUSH
8482: LD_INT 122
8484: PPUSH
8485: CALL_OW 243
// hc_importance := 0 ;
8489: LD_ADDR_OWVAR 32
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// Platonov := NewCharacter ( Platonov ) ;
8497: LD_ADDR_EXP 56
8501: PUSH
8502: LD_STRING Platonov
8504: PPUSH
8505: CALL_OW 25
8509: ST_TO_ADDR
// Yakotich := NewCharacter ( Yakotich ) ;
8510: LD_ADDR_EXP 57
8514: PUSH
8515: LD_STRING Yakotich
8517: PPUSH
8518: CALL_OW 25
8522: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
8523: LD_ADDR_EXP 58
8527: PUSH
8528: LD_STRING Gleb
8530: PPUSH
8531: CALL_OW 25
8535: ST_TO_ADDR
// if TestCharacters ( 03_Cornel ) then
8536: LD_STRING 03_Cornel
8538: PPUSH
8539: CALL_OW 28
8543: IFFALSE 8591
// begin Bierezov := NewCharacter ( Mikhail ) ;
8545: LD_ADDR_EXP 59
8549: PUSH
8550: LD_STRING Mikhail
8552: PPUSH
8553: CALL_OW 25
8557: ST_TO_ADDR
// PlaceUnitXYR ( Bierezov , 197 , 111 , 9 , false ) ;
8558: LD_EXP 59
8562: PPUSH
8563: LD_INT 197
8565: PPUSH
8566: LD_INT 111
8568: PPUSH
8569: LD_INT 9
8571: PPUSH
8572: LD_INT 0
8574: PPUSH
8575: CALL_OW 50
// SetClass ( Bierezov , 3 ) ;
8579: LD_EXP 59
8583: PPUSH
8584: LD_INT 3
8586: PPUSH
8587: CALL_OW 336
// end ; PlaceHumanInUnit ( Platonov , ru_depot ) ;
8591: LD_EXP 56
8595: PPUSH
8596: LD_INT 126
8598: PPUSH
8599: CALL_OW 52
// PlaceUnitXYR ( Yakotich , 197 , 111 , 9 , false ) ;
8603: LD_EXP 57
8607: PPUSH
8608: LD_INT 197
8610: PPUSH
8611: LD_INT 111
8613: PPUSH
8614: LD_INT 9
8616: PPUSH
8617: LD_INT 0
8619: PPUSH
8620: CALL_OW 50
// PlaceUnitXYR ( Gleb , 197 , 111 , 9 , false ) ;
8624: LD_EXP 58
8628: PPUSH
8629: LD_INT 197
8631: PPUSH
8632: LD_INT 111
8634: PPUSH
8635: LD_INT 9
8637: PPUSH
8638: LD_INT 0
8640: PPUSH
8641: CALL_OW 50
// tmp := PrepareBase ( ru_depot , russianBaseArea , zhukov , [ 9 , 10 , 10 ] [ Difficulty ] , [ 9000 , 1000 , 300 ] , [ 21 , 8 , 13 , 8 ] ) ;
8645: LD_ADDR_VAR 0 5
8649: PUSH
8650: LD_INT 126
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: LD_STRING zhukov
8658: PPUSH
8659: LD_INT 9
8661: PUSH
8662: LD_INT 10
8664: PUSH
8665: LD_INT 10
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: LD_OWVAR 67
8677: ARRAY
8678: PPUSH
8679: LD_INT 9000
8681: PUSH
8682: LD_INT 1000
8684: PUSH
8685: LD_INT 300
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: PPUSH
8693: LD_INT 21
8695: PUSH
8696: LD_INT 8
8698: PUSH
8699: LD_INT 13
8701: PUSH
8702: LD_INT 8
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL 58843 0 6
8715: ST_TO_ADDR
// base := GetBase ( ru_depot2 ) ;
8716: LD_ADDR_VAR 0 4
8720: PUSH
8721: LD_INT 267
8723: PPUSH
8724: CALL_OW 274
8728: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 5000 ) ;
8729: LD_VAR 0 4
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 5000
8739: PPUSH
8740: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
8744: LD_VAR 0 4
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: LD_INT 200
8754: PPUSH
8755: CALL_OW 277
// SetResourceType ( base , mat_siberit , 200 ) ;
8759: LD_VAR 0 4
8763: PPUSH
8764: LD_INT 3
8766: PPUSH
8767: LD_INT 200
8769: PPUSH
8770: CALL_OW 277
// mc_bases := Replace ( mc_bases , 2 , tmp union FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Platonov ) ;
8774: LD_ADDR_EXP 87
8778: PUSH
8779: LD_EXP 87
8783: PPUSH
8784: LD_INT 2
8786: PPUSH
8787: LD_VAR 0 5
8791: PUSH
8792: LD_INT 22
8794: PUSH
8795: LD_VAR 0 6
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 3
8806: PUSH
8807: LD_INT 21
8809: PUSH
8810: LD_INT 2
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PPUSH
8825: CALL_OW 69
8829: UNION
8830: PUSH
8831: LD_EXP 56
8835: DIFF
8836: PPUSH
8837: CALL_OW 1
8841: ST_TO_ADDR
// behemoths := [ ] ;
8842: LD_ADDR_EXP 60
8846: PUSH
8847: EMPTY
8848: ST_TO_ADDR
// behemothBuilders := [ ] ;
8849: LD_ADDR_EXP 61
8853: PUSH
8854: EMPTY
8855: ST_TO_ADDR
// j := 3 ;
8856: LD_ADDR_VAR 0 3
8860: PUSH
8861: LD_INT 3
8863: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
8864: LD_ADDR_VAR 0 2
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 3
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: LD_INT 3
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: FOR_IN
8899: IFFALSE 8949
// begin behemothBuilders := Join ( behemothBuilders , i ) ;
8901: LD_ADDR_EXP 61
8905: PUSH
8906: LD_EXP 61
8910: PPUSH
8911: LD_VAR 0 2
8915: PPUSH
8916: CALL 86480 0 2
8920: ST_TO_ADDR
// j := j - 1 ;
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_VAR 0 3
8930: PUSH
8931: LD_INT 1
8933: MINUS
8934: ST_TO_ADDR
// if j = 0 then
8935: LD_VAR 0 3
8939: PUSH
8940: LD_INT 0
8942: EQUAL
8943: IFFALSE 8947
// break ;
8945: GO 8949
// end ;
8947: GO 8898
8949: POP
8950: POP
// end ;
8951: LD_VAR 0 1
8955: RET
// export function BuildBehemoths ; var i , j , xy , tmp ; begin
8956: LD_INT 0
8958: PPUSH
8959: PPUSH
8960: PPUSH
8961: PPUSH
8962: PPUSH
// xy := [ [ 209 , 149 ] , [ 219 , 154 ] , [ 223 , 149 ] , [ 232 , 155 ] ] ;
8963: LD_ADDR_VAR 0 4
8967: PUSH
8968: LD_INT 209
8970: PUSH
8971: LD_INT 149
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 219
8980: PUSH
8981: LD_INT 154
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 223
8990: PUSH
8991: LD_INT 149
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 232
9000: PUSH
9001: LD_INT 155
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: ST_TO_ADDR
// if not behemothBuilders then
9014: LD_EXP 61
9018: NOT
9019: IFFALSE 9023
// exit ;
9021: GO 9127
// j := 1 ;
9023: LD_ADDR_VAR 0 3
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// for i in behemothBuilders do
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: LD_EXP 61
9040: PUSH
9041: FOR_IN
9042: IFFALSE 9125
// begin if IsInUnit ( i ) then
9044: LD_VAR 0 2
9048: PPUSH
9049: CALL_OW 310
9053: IFFALSE 9064
// ComExitBuilding ( i ) ;
9055: LD_VAR 0 2
9059: PPUSH
9060: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , xy [ j ] [ 1 ] , xy [ j ] [ 2 ] , 0 ) ;
9064: LD_VAR 0 2
9068: PPUSH
9069: LD_INT 37
9071: PPUSH
9072: LD_VAR 0 4
9076: PUSH
9077: LD_VAR 0 3
9081: ARRAY
9082: PUSH
9083: LD_INT 1
9085: ARRAY
9086: PPUSH
9087: LD_VAR 0 4
9091: PUSH
9092: LD_VAR 0 3
9096: ARRAY
9097: PUSH
9098: LD_INT 2
9100: ARRAY
9101: PPUSH
9102: LD_INT 0
9104: PPUSH
9105: CALL_OW 230
// j := j + 1 ;
9109: LD_ADDR_VAR 0 3
9113: PUSH
9114: LD_VAR 0 3
9118: PUSH
9119: LD_INT 1
9121: PLUS
9122: ST_TO_ADDR
// end ;
9123: GO 9041
9125: POP
9126: POP
// end ;
9127: LD_VAR 0 1
9131: RET
// every 0 0$3 trigger GetBehemoths ( 3 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) do var i , tmp ;
9132: LD_INT 3
9134: PPUSH
9135: CALL 86528 0 1
9139: PUSH
9140: LD_INT 22
9142: PUSH
9143: LD_INT 3
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 30
9152: PUSH
9153: LD_INT 37
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: NOT
9169: AND
9170: IFFALSE 9356
9172: GO 9174
9174: DISABLE
9175: LD_INT 0
9177: PPUSH
9178: PPUSH
// begin enable ;
9179: ENABLE
// tmp := GetBehemoths ( 3 ) ;
9180: LD_ADDR_VAR 0 2
9184: PUSH
9185: LD_INT 3
9187: PPUSH
9188: CALL 86528 0 1
9192: ST_TO_ADDR
// for i in tmp do
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: LD_VAR 0 2
9202: PUSH
9203: FOR_IN
9204: IFFALSE 9354
// begin if IsInArea ( i , powellBase ) and not GetTag ( i ) = 2 then
9206: LD_VAR 0 1
9210: PPUSH
9211: LD_INT 7
9213: PPUSH
9214: CALL_OW 308
9218: PUSH
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 110
9228: PUSH
9229: LD_INT 2
9231: EQUAL
9232: NOT
9233: AND
9234: IFFALSE 9248
// SetTag ( i , 2 ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_INT 2
9243: PPUSH
9244: CALL_OW 109
// if not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , i , 12 ] ] ) and not GetTag ( i ) = 2 then
9248: LD_INT 81
9250: PUSH
9251: LD_INT 3
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 91
9260: PUSH
9261: LD_VAR 0 1
9265: PUSH
9266: LD_INT 12
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: NOT
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 110
9293: PUSH
9294: LD_INT 2
9296: EQUAL
9297: NOT
9298: AND
9299: IFFALSE 9318
// ComAgressiveMove ( i , 64 , 93 ) else
9301: LD_VAR 0 1
9305: PPUSH
9306: LD_INT 64
9308: PPUSH
9309: LD_INT 93
9311: PPUSH
9312: CALL_OW 114
9316: GO 9352
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
9318: LD_VAR 0 1
9322: PPUSH
9323: LD_INT 81
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 69
9337: PPUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 74
9347: PPUSH
9348: CALL_OW 115
// end ;
9352: GO 9203
9354: POP
9355: POP
// end ;
9356: PPOPN 2
9358: END
// every 11 11$30 trigger not russianDestroyed and not MC_GetVehicles ( 2 , true ) do var i , tmp , target , teleport ;
9359: LD_EXP 2
9363: NOT
9364: PUSH
9365: LD_INT 2
9367: PPUSH
9368: LD_INT 1
9370: PPUSH
9371: CALL 45684 0 2
9375: NOT
9376: AND
9377: IFFALSE 10297
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
9386: PPUSH
9387: PPUSH
// begin enable ;
9388: ENABLE
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
9389: LD_INT 22
9391: PUSH
9392: LD_INT 3
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: LD_INT 3
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 69
9417: NOT
9418: IFFALSE 9422
// exit ;
9420: GO 10297
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
9422: LD_ADDR_VAR 0 4
9426: PUSH
9427: LD_INT 22
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 30
9439: PUSH
9440: LD_INT 34
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PPUSH
9451: CALL_OW 69
9455: ST_TO_ADDR
// if Prob ( 40 ) then
9456: LD_INT 40
9458: PPUSH
9459: CALL_OW 13
9463: IFFALSE 9590
// begin MC_InsertProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
9465: LD_INT 2
9467: PPUSH
9468: LD_INT 22
9470: PUSH
9471: LD_INT 3
9473: PUSH
9474: LD_INT 3
9476: PUSH
9477: LD_INT 49
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 22
9488: PUSH
9489: LD_INT 3
9491: PUSH
9492: LD_INT 3
9494: PUSH
9495: LD_INT 49
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 22
9506: PUSH
9507: LD_INT 3
9509: PUSH
9510: LD_INT 3
9512: PUSH
9513: LD_INT 49
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 24
9524: PUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 3
9530: PUSH
9531: LD_INT 46
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 24
9542: PUSH
9543: LD_INT 3
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 46
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 24
9560: PUSH
9561: LD_INT 3
9563: PUSH
9564: LD_INT 3
9566: PUSH
9567: LD_INT 46
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL 44266 0 2
// end else
9588: GO 9713
// begin MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
9590: LD_INT 2
9592: PPUSH
9593: LD_INT 24
9595: PUSH
9596: LD_INT 3
9598: PUSH
9599: LD_INT 3
9601: PUSH
9602: LD_INT 47
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 24
9613: PUSH
9614: LD_INT 3
9616: PUSH
9617: LD_INT 3
9619: PUSH
9620: LD_INT 47
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 3
9634: PUSH
9635: LD_INT 3
9637: PUSH
9638: LD_INT 47
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 3
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: LD_INT 46
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 24
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: LD_INT 3
9673: PUSH
9674: LD_INT 46
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 3
9691: PUSH
9692: LD_INT 46
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL 44266 0 2
// end ; if Difficulty > 1 then
9713: LD_OWVAR 67
9717: PUSH
9718: LD_INT 1
9720: GREATER
9721: IFFALSE 9751
// MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
9723: LD_INT 2
9725: PPUSH
9726: LD_INT 24
9728: PUSH
9729: LD_INT 3
9731: PUSH
9732: LD_INT 3
9734: PUSH
9735: LD_INT 47
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: PPUSH
9747: CALL 44266 0 2
// repeat wait ( 0 0$1 ) ;
9751: LD_INT 35
9753: PPUSH
9754: CALL_OW 67
// until MC_GetVehicles ( 2 , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] ;
9758: LD_INT 2
9760: PPUSH
9761: LD_INT 1
9763: PPUSH
9764: CALL 45684 0 2
9768: PUSH
9769: LD_INT 6
9771: PUSH
9772: LD_INT 7
9774: PUSH
9775: LD_INT 7
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: PUSH
9783: LD_OWVAR 67
9787: ARRAY
9788: GREATEREQUAL
9789: IFFALSE 9751
// wait ( 0 0$30 ) ;
9791: LD_INT 1050
9793: PPUSH
9794: CALL_OW 67
// tmp := MC_GetVehicles ( 2 , true ) ;
9798: LD_ADDR_VAR 0 2
9802: PUSH
9803: LD_INT 2
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL 45684 0 2
9813: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 2 , mc_vehicles [ 2 ] diff tmp ) ;
9814: LD_ADDR_EXP 106
9818: PUSH
9819: LD_EXP 106
9823: PPUSH
9824: LD_INT 2
9826: PPUSH
9827: LD_EXP 106
9831: PUSH
9832: LD_INT 2
9834: ARRAY
9835: PUSH
9836: LD_VAR 0 2
9840: DIFF
9841: PPUSH
9842: CALL_OW 1
9846: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
9847: LD_ADDR_VAR 0 3
9851: PUSH
9852: LD_INT 0
9854: PPUSH
9855: LD_INT 1
9857: PPUSH
9858: CALL_OW 12
9862: ST_TO_ADDR
// if target then
9863: LD_VAR 0 3
9867: IFFALSE 9995
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
9869: LD_ADDR_VAR 0 2
9873: PUSH
9874: LD_VAR 0 2
9878: PPUSH
9879: LD_INT 24
9881: PUSH
9882: LD_INT 250
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PPUSH
9889: CALL_OW 72
9893: ST_TO_ADDR
// for i in tmp do
9894: LD_ADDR_VAR 0 1
9898: PUSH
9899: LD_VAR 0 2
9903: PUSH
9904: FOR_IN
9905: IFFALSE 9945
// if GetDistUnitXY ( i , 139 , 89 ) > 9 then
9907: LD_VAR 0 1
9911: PPUSH
9912: LD_INT 139
9914: PPUSH
9915: LD_INT 89
9917: PPUSH
9918: CALL_OW 297
9922: PUSH
9923: LD_INT 9
9925: GREATER
9926: IFFALSE 9943
// ComMoveXY ( i , 139 , 89 ) ;
9928: LD_VAR 0 1
9932: PPUSH
9933: LD_INT 139
9935: PPUSH
9936: LD_INT 89
9938: PPUSH
9939: CALL_OW 111
9943: GO 9904
9945: POP
9946: POP
// wait ( 0 0$1 ) ;
9947: LD_INT 35
9949: PPUSH
9950: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 139 , 89 , 9 ] ) >= ( tmp - 1 ) ;
9954: LD_VAR 0 2
9958: PPUSH
9959: LD_INT 92
9961: PUSH
9962: LD_INT 139
9964: PUSH
9965: LD_INT 89
9967: PUSH
9968: LD_INT 9
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PPUSH
9977: CALL_OW 72
9981: PUSH
9982: LD_VAR 0 2
9986: PUSH
9987: LD_INT 1
9989: MINUS
9990: GREATEREQUAL
9991: IFFALSE 9869
// end else
9993: GO 10137
// begin ComEnterUnit ( tmp , teleport [ 1 ] ) ;
9995: LD_VAR 0 2
9999: PPUSH
10000: LD_VAR 0 4
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PPUSH
10009: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_INT 24
10025: PUSH
10026: LD_INT 250
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 72
10037: ST_TO_ADDR
// for i in tmp do
10038: LD_ADDR_VAR 0 1
10042: PUSH
10043: LD_VAR 0 2
10047: PUSH
10048: FOR_IN
10049: IFFALSE 10089
// if GetDistUnitXY ( i , 124 , 139 ) > 9 then
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_INT 124
10058: PPUSH
10059: LD_INT 139
10061: PPUSH
10062: CALL_OW 297
10066: PUSH
10067: LD_INT 9
10069: GREATER
10070: IFFALSE 10087
// ComMoveXY ( i , 124 , 139 ) ;
10072: LD_VAR 0 1
10076: PPUSH
10077: LD_INT 124
10079: PPUSH
10080: LD_INT 139
10082: PPUSH
10083: CALL_OW 111
10087: GO 10048
10089: POP
10090: POP
// wait ( 0 0$1 ) ;
10091: LD_INT 35
10093: PPUSH
10094: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 124 , 139 , 9 ] ) >= ( tmp - 1 ) ;
10098: LD_VAR 0 2
10102: PPUSH
10103: LD_INT 92
10105: PUSH
10106: LD_INT 124
10108: PUSH
10109: LD_INT 139
10111: PUSH
10112: LD_INT 9
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 72
10125: PUSH
10126: LD_VAR 0 2
10130: PUSH
10131: LD_INT 1
10133: MINUS
10134: GREATEREQUAL
10135: IFFALSE 10013
// end ; repeat wait ( 0 0$1 ) ;
10137: LD_INT 35
10139: PPUSH
10140: CALL_OW 67
// for i in tmp do
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: LD_VAR 0 2
10153: PUSH
10154: FOR_IN
10155: IFFALSE 10288
// begin if GetLives ( i ) > 251 then
10157: LD_VAR 0 1
10161: PPUSH
10162: CALL_OW 256
10166: PUSH
10167: LD_INT 251
10169: GREATER
10170: IFFALSE 10259
// begin if GetWeapon ( i ) = ru_time_lapser then
10172: LD_VAR 0 1
10176: PPUSH
10177: CALL_OW 264
10181: PUSH
10182: LD_INT 49
10184: EQUAL
10185: IFFALSE 10223
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
10187: LD_VAR 0 1
10191: PPUSH
10192: LD_INT 81
10194: PUSH
10195: LD_INT 3
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PPUSH
10207: LD_VAR 0 1
10211: PPUSH
10212: CALL_OW 74
10216: PPUSH
10217: CALL_OW 112
10221: GO 10257
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
10223: LD_VAR 0 1
10227: PPUSH
10228: LD_INT 81
10230: PUSH
10231: LD_INT 3
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PPUSH
10238: CALL_OW 69
10242: PPUSH
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 74
10252: PPUSH
10253: CALL_OW 115
// end else
10257: GO 10286
// if IsDead ( i ) then
10259: LD_VAR 0 1
10263: PPUSH
10264: CALL_OW 301
10268: IFFALSE 10286
// tmp := tmp diff i ;
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: LD_VAR 0 2
10279: PUSH
10280: LD_VAR 0 1
10284: DIFF
10285: ST_TO_ADDR
// end ;
10286: GO 10154
10288: POP
10289: POP
// until not tmp ;
10290: LD_VAR 0 2
10294: NOT
10295: IFFALSE 10137
// end ;
10297: PPOPN 4
10299: END
// every 30 30$00 trigger not russianDestroyed do
10300: LD_EXP 2
10304: NOT
10305: IFFALSE 10370
10307: GO 10309
10309: DISABLE
// begin wait ( [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] ) ;
10310: LD_INT 105000
10312: PUSH
10313: LD_INT 84000
10315: PUSH
10316: LD_INT 63000
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: LD_OWVAR 67
10328: ARRAY
10329: PPUSH
10330: CALL_OW 67
// if russianDestroyed then
10334: LD_EXP 2
10338: IFFALSE 10342
// exit ;
10340: GO 10370
// MC_InsertProduceList ( 2 , [ [ ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ] ] ) ;
10342: LD_INT 2
10344: PPUSH
10345: LD_INT 23
10347: PUSH
10348: LD_INT 3
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: LD_INT 48
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: PPUSH
10366: CALL 44266 0 2
// end ; end_of_file
10370: END
// export function CustomEvent ( event ) ; begin
10371: LD_INT 0
10373: PPUSH
// end ;
10374: LD_VAR 0 2
10378: RET
// on SibDepositContaminated ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
10379: LD_VAR 0 2
10383: PPUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: LD_INT 15
10391: PPUSH
10392: CALL_OW 309
10396: IFFALSE 10405
// YouLost ( MothContaminate ) ;
10398: LD_STRING MothContaminate
10400: PPUSH
10401: CALL_OW 104
// end ;
10405: PPOPN 3
10407: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
10408: LD_VAR 0 2
10412: PPUSH
10413: LD_VAR 0 3
10417: PPUSH
10418: LD_INT 15
10420: PPUSH
10421: CALL_OW 309
10425: IFFALSE 10441
// begin wait ( 0 0$6 ) ;
10427: LD_INT 210
10429: PPUSH
10430: CALL_OW 67
// YouLost ( MothContaminateBomb ) ;
10434: LD_STRING MothContaminateBomb
10436: PPUSH
10437: CALL_OW 104
// end ; end ;
10441: PPOPN 3
10443: END
// on UnitDestroyed ( un ) do begin if un = JMM then
10444: LD_VAR 0 1
10448: PUSH
10449: LD_EXP 17
10453: EQUAL
10454: IFFALSE 10465
// begin YouLost ( JMM ) ;
10456: LD_STRING JMM
10458: PPUSH
10459: CALL_OW 104
// exit ;
10463: GO 10564
// end ; if un = Powell then
10465: LD_VAR 0 1
10469: PUSH
10470: LD_EXP 52
10474: EQUAL
10475: IFFALSE 10485
// americanDestroyed := true ;
10477: LD_ADDR_EXP 4
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// if un = Platonov then
10485: LD_VAR 0 1
10489: PUSH
10490: LD_EXP 56
10494: EQUAL
10495: IFFALSE 10505
// russianDestroyed := true ;
10497: LD_ADDR_EXP 2
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) then
10505: LD_VAR 0 1
10509: PUSH
10510: LD_INT 22
10512: PUSH
10513: LD_INT 7
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 21
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 69
10538: IN
10539: IFFALSE 10555
// vehicleLostCounter := vehicleLostCounter + 1 ;
10541: LD_ADDR_EXP 15
10545: PUSH
10546: LD_EXP 15
10550: PUSH
10551: LD_INT 1
10553: PLUS
10554: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL 47658 0 1
// end ;
10564: PPOPN 1
10566: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_VAR 0 2
10576: PPUSH
10577: CALL 49992 0 2
// end ;
10581: PPOPN 2
10583: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10584: LD_VAR 0 1
10588: PPUSH
10589: CALL 49060 0 1
// end ;
10593: PPOPN 1
10595: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_workshop ] , [ f_nation , 3 ] ] ) then
10596: LD_VAR 0 1
10600: PUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 8
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 23
10623: PUSH
10624: LD_INT 3
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 69
10640: IN
10641: IFFALSE 10668
// begin ComUpgrade ( building ) ;
10643: LD_VAR 0 1
10647: PPUSH
10648: CALL_OW 146
// ComComplete ( Kozlov , building ) ;
10652: LD_EXP 55
10656: PPUSH
10657: LD_VAR 0 1
10661: PPUSH
10662: CALL 58407 0 2
// exit ;
10666: GO 10677
// end ; MCE_BuildingComplete ( building ) ;
10668: LD_VAR 0 1
10672: PPUSH
10673: CALL 49301 0 1
// end ;
10677: PPOPN 1
10679: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: LD_VAR 0 2
10689: PPUSH
10690: CALL 47354 0 2
// end ;
10694: PPOPN 2
10696: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: LD_VAR 0 4
10716: PPUSH
10717: LD_VAR 0 5
10721: PPUSH
10722: CALL 46974 0 5
// end ;
10726: PPOPN 5
10728: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10729: LD_VAR 0 1
10733: PPUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL 46570 0 2
// end ;
10743: PPOPN 2
10745: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10746: LD_VAR 0 1
10750: PPUSH
10751: LD_VAR 0 2
10755: PPUSH
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL 46408 0 4
// end ;
10770: PPOPN 4
10772: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: LD_VAR 0 2
10782: PPUSH
10783: LD_VAR 0 3
10787: PPUSH
10788: CALL 46183 0 3
// end ;
10792: PPOPN 3
10794: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10795: LD_VAR 0 1
10799: PPUSH
10800: LD_VAR 0 2
10804: PPUSH
10805: CALL 46068 0 2
// end ;
10809: PPOPN 2
10811: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10812: LD_VAR 0 1
10816: PPUSH
10817: LD_VAR 0 2
10821: PPUSH
10822: CALL 50253 0 2
// end ;
10826: PPOPN 2
10828: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10829: LD_VAR 0 1
10833: PPUSH
10834: LD_VAR 0 2
10838: PPUSH
10839: LD_VAR 0 3
10843: PPUSH
10844: LD_VAR 0 4
10848: PPUSH
10849: CALL 50469 0 4
// end ;
10853: PPOPN 4
10855: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10856: LD_VAR 0 1
10860: PPUSH
10861: LD_VAR 0 2
10865: PPUSH
10866: CALL 45877 0 2
// end ;
10870: PPOPN 2
10872: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10873: LD_VAR 0 1
10877: PPUSH
10878: CALL 97909 0 1
// end ; end_of_file
10882: PPOPN 1
10884: END
// export function Action ; begin
10885: LD_INT 0
10887: PPUSH
// InGameOn ;
10888: CALL_OW 8
// CenterNowOnXY ( 206 , 11 ) ;
10892: LD_INT 206
10894: PPUSH
10895: LD_INT 11
10897: PPUSH
10898: CALL_OW 86
// wait ( 0 0$1 ) ;
10902: LD_INT 35
10904: PPUSH
10905: CALL_OW 67
// Say ( JMM , DStart-JMM-JMM-1 ) ;
10909: LD_EXP 17
10913: PPUSH
10914: LD_STRING DStart-JMM-JMM-1
10916: PPUSH
10917: CALL_OW 88
// Say ( Burlak , DStart-JMM-Bur-1 ) ;
10921: LD_EXP 49
10925: PPUSH
10926: LD_STRING DStart-JMM-Bur-1
10928: PPUSH
10929: CALL_OW 88
// Say ( JMM , DStart-JMM-JMM-2 ) ;
10933: LD_EXP 17
10937: PPUSH
10938: LD_STRING DStart-JMM-JMM-2
10940: PPUSH
10941: CALL_OW 88
// Say ( Burlak , DStart-JMM-Bur-2 ) ;
10945: LD_EXP 49
10949: PPUSH
10950: LD_STRING DStart-JMM-Bur-2
10952: PPUSH
10953: CALL_OW 88
// InGameOff ;
10957: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
10961: LD_STRING MStart
10963: PPUSH
10964: CALL_OW 337
// end ;
10968: LD_VAR 0 1
10972: RET
// every 0 0$2 trigger SeeXY ( 7 , 255 , 219 ) do var speaker ;
10973: LD_INT 7
10975: PPUSH
10976: LD_INT 255
10978: PPUSH
10979: LD_INT 219
10981: PPUSH
10982: CALL_OW 293
10986: IFFALSE 11595
10988: GO 10990
10990: DISABLE
10991: LD_INT 0
10993: PPUSH
// begin wait ( 0 0$3 ) ;
10994: LD_INT 105
10996: PPUSH
10997: CALL_OW 67
// alienSpotted := true ;
11001: LD_ADDR_EXP 10
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Titov , Dolgov , Petrosyan , Kuzmov , Kovalyuk , Scholtze ] ;
11009: LD_ADDR_VAR 0 1
11013: PUSH
11014: LD_INT 22
11016: PUSH
11017: LD_INT 7
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 23
11026: PUSH
11027: LD_INT 3
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 21
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: LD_INT 26
11046: PUSH
11047: LD_INT 1
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: PPUSH
11060: CALL_OW 69
11064: PUSH
11065: LD_EXP 49
11069: PUSH
11070: LD_EXP 37
11074: PUSH
11075: LD_EXP 39
11079: PUSH
11080: LD_EXP 40
11084: PUSH
11085: LD_EXP 47
11089: PUSH
11090: LD_EXP 46
11094: PUSH
11095: LD_EXP 41
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: DIFF
11109: ST_TO_ADDR
// DialogueOn ;
11110: CALL_OW 6
// PlaceSeeing ( 255 , 219 , 7 , - 20 ) ;
11114: LD_INT 255
11116: PPUSH
11117: LD_INT 219
11119: PPUSH
11120: LD_INT 7
11122: PPUSH
11123: LD_INT 20
11125: NEG
11126: PPUSH
11127: CALL_OW 330
// CenterNowOnXY ( 255 , 219 ) ;
11131: LD_INT 255
11133: PPUSH
11134: LD_INT 219
11136: PPUSH
11137: CALL_OW 86
// if speaker then
11141: LD_VAR 0 1
11145: IFFALSE 11163
// Say ( speaker [ 1 ] , DAlienBase-RSol1-1 ) ;
11147: LD_VAR 0 1
11151: PUSH
11152: LD_INT 1
11154: ARRAY
11155: PPUSH
11156: LD_STRING DAlienBase-RSol1-1
11158: PPUSH
11159: CALL_OW 88
// Say ( JMM , DAlienBase-JMM-1 ) ;
11163: LD_EXP 17
11167: PPUSH
11168: LD_STRING DAlienBase-JMM-1
11170: PPUSH
11171: CALL_OW 88
// if IsOk ( Burlak ) then
11175: LD_EXP 49
11179: PPUSH
11180: CALL_OW 302
11184: IFFALSE 11205
// begin dwait ( 0 0$1 ) ;
11186: LD_INT 35
11188: PPUSH
11189: CALL_OW 68
// Say ( Burlak , DAlienBase-Bur-1 ) ;
11193: LD_EXP 49
11197: PPUSH
11198: LD_STRING DAlienBase-Bur-1
11200: PPUSH
11201: CALL_OW 88
// end ; if IsOk ( Roth ) then
11205: LD_EXP 18
11209: PPUSH
11210: CALL_OW 302
11214: IFFALSE 11228
// Say ( Roth , DAlienBase-Roth-1 ) ;
11216: LD_EXP 18
11220: PPUSH
11221: LD_STRING DAlienBase-Roth-1
11223: PPUSH
11224: CALL_OW 88
// if IsOk ( Gossudarov ) then
11228: LD_EXP 35
11232: PPUSH
11233: CALL_OW 302
11237: IFFALSE 11253
// Say ( Gossudarov , DAlienBase-Gos-1 ) else
11239: LD_EXP 35
11243: PPUSH
11244: LD_STRING DAlienBase-Gos-1
11246: PPUSH
11247: CALL_OW 88
11251: GO 11370
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11253: LD_ADDR_VAR 0 1
11257: PUSH
11258: LD_INT 22
11260: PUSH
11261: LD_INT 7
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 25
11270: PUSH
11271: LD_INT 4
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 21
11280: PUSH
11281: LD_INT 1
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 26
11290: PUSH
11291: LD_INT 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: PPUSH
11304: CALL_OW 69
11308: PUSH
11309: LD_EXP 18
11313: PUSH
11314: LD_EXP 17
11318: PUSH
11319: LD_EXP 49
11323: PUSH
11324: LD_EXP 37
11328: PUSH
11329: LD_EXP 47
11333: PUSH
11334: LD_EXP 46
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: DIFF
11347: ST_TO_ADDR
// if speaker then
11348: LD_VAR 0 1
11352: IFFALSE 11370
// Say ( speaker [ 1 ] , DAlienBase-Sci1-1 ) ;
11354: LD_VAR 0 1
11358: PUSH
11359: LD_INT 1
11361: ARRAY
11362: PPUSH
11363: LD_STRING DAlienBase-Sci1-1
11365: PPUSH
11366: CALL_OW 88
// end ; RemoveSeeing ( 255 , 219 , 7 ) ;
11370: LD_INT 255
11372: PPUSH
11373: LD_INT 219
11375: PPUSH
11376: LD_INT 7
11378: PPUSH
11379: CALL_OW 331
// DialogueOff ;
11383: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11387: LD_INT 35
11389: PPUSH
11390: CALL_OW 67
// until IsSelected ( alien ) ;
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 306
11401: IFFALSE 11387
// if not artifactIResearched or not artifactIIResearched then
11403: LD_EXP 12
11407: NOT
11408: PUSH
11409: LD_EXP 13
11413: NOT
11414: OR
11415: IFFALSE 11595
// begin if IsOk ( Roth ) then
11417: LD_EXP 18
11421: PPUSH
11422: CALL_OW 302
11426: IFFALSE 11442
// Say ( Roth , DAlieBaseNotReady-Roth-1 ) else
11428: LD_EXP 18
11432: PPUSH
11433: LD_STRING DAlieBaseNotReady-Roth-1
11435: PPUSH
11436: CALL_OW 88
11440: GO 11595
// if IsOk ( Gossudarov ) then
11442: LD_EXP 35
11446: PPUSH
11447: CALL_OW 302
11451: IFFALSE 11467
// Say ( Gossudarov , DAlieBaseNotReady-Gos-1 ) else
11453: LD_EXP 35
11457: PPUSH
11458: LD_STRING DAlieBaseNotReady-Gos-1
11460: PPUSH
11461: CALL_OW 88
11465: GO 11595
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11467: LD_ADDR_VAR 0 1
11471: PUSH
11472: LD_INT 22
11474: PUSH
11475: LD_INT 7
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 23
11484: PUSH
11485: LD_INT 3
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 25
11494: PUSH
11495: LD_INT 4
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 21
11504: PUSH
11505: LD_INT 1
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 26
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: PPUSH
11529: CALL_OW 69
11533: PUSH
11534: LD_EXP 18
11538: PUSH
11539: LD_EXP 17
11543: PUSH
11544: LD_EXP 49
11548: PUSH
11549: LD_EXP 37
11553: PUSH
11554: LD_EXP 47
11558: PUSH
11559: LD_EXP 46
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: DIFF
11572: ST_TO_ADDR
// if speaker then
11573: LD_VAR 0 1
11577: IFFALSE 11595
// Say ( speaker [ 1 ] , DAlieBaseNotReady-RSci1-1 ) ;
11579: LD_VAR 0 1
11583: PUSH
11584: LD_INT 1
11586: ARRAY
11587: PPUSH
11588: LD_STRING DAlieBaseNotReady-RSci1-1
11590: PPUSH
11591: CALL_OW 88
// end ; end ; end ;
11595: PPOPN 1
11597: END
// every 0 0$1 trigger GetTech ( tech_Artifact , 7 ) = state_researched do var speaker ;
11598: LD_INT 24
11600: PPUSH
11601: LD_INT 7
11603: PPUSH
11604: CALL_OW 321
11608: PUSH
11609: LD_INT 2
11611: EQUAL
11612: IFFALSE 12303
11614: GO 11616
11616: DISABLE
11617: LD_INT 0
11619: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11620: LD_ADDR_VAR 0 1
11624: PUSH
11625: LD_INT 22
11627: PUSH
11628: LD_INT 7
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 23
11637: PUSH
11638: LD_INT 3
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 25
11647: PUSH
11648: LD_INT 4
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 21
11657: PUSH
11658: LD_INT 1
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 26
11667: PUSH
11668: LD_INT 1
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PUSH
11687: LD_EXP 18
11691: PUSH
11692: LD_EXP 17
11696: PUSH
11697: LD_EXP 49
11701: PUSH
11702: LD_EXP 37
11706: PUSH
11707: LD_EXP 47
11711: PUSH
11712: LD_EXP 46
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: DIFF
11725: ST_TO_ADDR
// if not speaker then
11726: LD_VAR 0 1
11730: NOT
11731: IFFALSE 11735
// exit ;
11733: GO 12303
// DialogueOn ;
11735: CALL_OW 6
// Say ( speaker [ 1 ] , DArtefTechnology-RSci1-1 ) ;
11739: LD_VAR 0 1
11743: PUSH
11744: LD_INT 1
11746: ARRAY
11747: PPUSH
11748: LD_STRING DArtefTechnology-RSci1-1
11750: PPUSH
11751: CALL_OW 88
// if IsOk ( Burlak ) then
11755: LD_EXP 49
11759: PPUSH
11760: CALL_OW 302
11764: IFFALSE 11778
// Say ( Burlak , DArtefTechnology-Bur-1 ) ;
11766: LD_EXP 49
11770: PPUSH
11771: LD_STRING DArtefTechnology-Bur-1
11773: PPUSH
11774: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnology-RSci1-2 ) ;
11778: LD_VAR 0 1
11782: PUSH
11783: LD_INT 1
11785: ARRAY
11786: PPUSH
11787: LD_STRING DArtefTechnology-RSci1-2
11789: PPUSH
11790: CALL_OW 88
// if Denis then
11794: LD_EXP 23
11798: IFFALSE 11815
// speaker := [ Denis ] else
11800: LD_ADDR_VAR 0 1
11804: PUSH
11805: LD_EXP 23
11809: PUSH
11810: EMPTY
11811: LIST
11812: ST_TO_ADDR
11813: GO 11921
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11815: LD_ADDR_VAR 0 1
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 7
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 23
11832: PUSH
11833: LD_INT 1
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 25
11842: PUSH
11843: LD_INT 4
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 21
11852: PUSH
11853: LD_INT 1
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 26
11862: PUSH
11863: LD_INT 1
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PUSH
11882: LD_EXP 18
11886: PUSH
11887: LD_EXP 17
11891: PUSH
11892: LD_EXP 49
11896: PUSH
11897: LD_EXP 37
11901: PUSH
11902: LD_EXP 47
11906: PUSH
11907: LD_EXP 46
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: DIFF
11920: ST_TO_ADDR
// if speaker then
11921: LD_VAR 0 1
11925: IFFALSE 11943
// Say ( speaker [ 1 ] , DArtefTechnology-Sci1-2 ) ;
11927: LD_VAR 0 1
11931: PUSH
11932: LD_INT 1
11934: ARRAY
11935: PPUSH
11936: LD_STRING DArtefTechnology-Sci1-2
11938: PPUSH
11939: CALL_OW 88
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
11943: LD_ADDR_VAR 0 1
11947: PUSH
11948: LD_INT 22
11950: PUSH
11951: LD_INT 7
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 23
11960: PUSH
11961: LD_INT 3
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 25
11970: PUSH
11971: LD_INT 4
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 21
11980: PUSH
11981: LD_INT 1
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 26
11990: PUSH
11991: LD_INT 1
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 69
12009: PUSH
12010: LD_EXP 18
12014: PUSH
12015: LD_EXP 17
12019: PUSH
12020: LD_EXP 49
12024: PUSH
12025: LD_EXP 37
12029: PUSH
12030: LD_EXP 47
12034: PUSH
12035: LD_EXP 46
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: DIFF
12048: ST_TO_ADDR
// if speaker and ( artifactArCaptured or arabianDestroyed ) then
12049: LD_VAR 0 1
12053: PUSH
12054: LD_EXP 9
12058: PUSH
12059: LD_EXP 5
12063: OR
12064: AND
12065: IFFALSE 12299
// begin if arabianDestroyed and IsOk ( Burlak ) then
12067: LD_EXP 5
12071: PUSH
12072: LD_EXP 49
12076: PPUSH
12077: CALL_OW 302
12081: AND
12082: IFFALSE 12098
// Say ( Burlak , DArtefTechnology-Bur-2 ) else
12084: LD_EXP 49
12088: PPUSH
12089: LD_STRING DArtefTechnology-Bur-2
12091: PPUSH
12092: CALL_OW 88
12096: GO 12110
// Say ( JMM , DArtefTechnology-JMM-2 ) ;
12098: LD_EXP 17
12102: PPUSH
12103: LD_STRING DArtefTechnology-JMM-2
12105: PPUSH
12106: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnology-RSci1-3 ) ;
12110: LD_VAR 0 1
12114: PUSH
12115: LD_INT 1
12117: ARRAY
12118: PPUSH
12119: LD_STRING DArtefTechnology-RSci1-3
12121: PPUSH
12122: CALL_OW 88
// if Denis then
12126: LD_EXP 23
12130: IFFALSE 12147
// speaker := [ Denis ] else
12132: LD_ADDR_VAR 0 1
12136: PUSH
12137: LD_EXP 23
12141: PUSH
12142: EMPTY
12143: LIST
12144: ST_TO_ADDR
12145: GO 12253
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12147: LD_ADDR_VAR 0 1
12151: PUSH
12152: LD_INT 22
12154: PUSH
12155: LD_INT 7
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 23
12164: PUSH
12165: LD_INT 1
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 25
12174: PUSH
12175: LD_INT 4
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 1
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 26
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 69
12213: PUSH
12214: LD_EXP 18
12218: PUSH
12219: LD_EXP 17
12223: PUSH
12224: LD_EXP 49
12228: PUSH
12229: LD_EXP 37
12233: PUSH
12234: LD_EXP 47
12238: PUSH
12239: LD_EXP 46
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: DIFF
12252: ST_TO_ADDR
// if speaker then
12253: LD_VAR 0 1
12257: IFFALSE 12299
// if alienSpotted then
12259: LD_EXP 10
12263: IFFALSE 12283
// Say ( speaker [ 1 ] , DArtefTechnology-Sci1-3 ) else
12265: LD_VAR 0 1
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_STRING DArtefTechnology-Sci1-3
12276: PPUSH
12277: CALL_OW 88
12281: GO 12299
// Say ( speaker [ 1 ] , DArtefTechnology-Sci1-3a ) ;
12283: LD_VAR 0 1
12287: PUSH
12288: LD_INT 1
12290: ARRAY
12291: PPUSH
12292: LD_STRING DArtefTechnology-Sci1-3a
12294: PPUSH
12295: CALL_OW 88
// end ; DialogueOff ;
12299: CALL_OW 7
// end ;
12303: PPOPN 1
12305: END
// every 0 0$1 trigger artifactIResearched do var speaker ;
12306: LD_EXP 12
12310: IFFALSE 12505
12312: GO 12314
12314: DISABLE
12315: LD_INT 0
12317: PPUSH
// begin if Denis then
12318: LD_EXP 23
12322: IFFALSE 12339
// speaker := [ Denis ] else
12324: LD_ADDR_VAR 0 1
12328: PUSH
12329: LD_EXP 23
12333: PUSH
12334: EMPTY
12335: LIST
12336: ST_TO_ADDR
12337: GO 12445
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12339: LD_ADDR_VAR 0 1
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_INT 7
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 23
12356: PUSH
12357: LD_INT 1
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 25
12366: PUSH
12367: LD_INT 4
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 21
12376: PUSH
12377: LD_INT 1
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 26
12386: PUSH
12387: LD_INT 1
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 69
12405: PUSH
12406: LD_EXP 18
12410: PUSH
12411: LD_EXP 17
12415: PUSH
12416: LD_EXP 49
12420: PUSH
12421: LD_EXP 37
12425: PUSH
12426: LD_EXP 47
12430: PUSH
12431: LD_EXP 46
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: DIFF
12444: ST_TO_ADDR
// if not speaker then
12445: LD_VAR 0 1
12449: NOT
12450: IFFALSE 12454
// exit ;
12452: GO 12505
// Say ( speaker [ 1 ] , DArtefTechnologyAm-Sci1-1 ) ;
12454: LD_VAR 0 1
12458: PUSH
12459: LD_INT 1
12461: ARRAY
12462: PPUSH
12463: LD_STRING DArtefTechnologyAm-Sci1-1
12465: PPUSH
12466: CALL_OW 88
// if IsOk ( Burlak ) then
12470: LD_EXP 49
12474: PPUSH
12475: CALL_OW 302
12479: IFFALSE 12493
// Say ( Burlak , DArtefTechnologyAm-Bur-1 ) ;
12481: LD_EXP 49
12485: PPUSH
12486: LD_STRING DArtefTechnologyAm-Bur-1
12488: PPUSH
12489: CALL_OW 88
// Say ( JMM , DArtefTechnologyAm-JMM-1 ) ;
12493: LD_EXP 17
12497: PPUSH
12498: LD_STRING DArtefTechnologyAm-JMM-1
12500: PPUSH
12501: CALL_OW 88
// end ;
12505: PPOPN 1
12507: END
// every 0 0$1 trigger artifactIIResearched do var speaker ;
12508: LD_EXP 13
12512: IFFALSE 12702
12514: GO 12516
12516: DISABLE
12517: LD_INT 0
12519: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12520: LD_ADDR_VAR 0 1
12524: PUSH
12525: LD_INT 22
12527: PUSH
12528: LD_INT 7
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 23
12537: PUSH
12538: LD_INT 3
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 25
12547: PUSH
12548: LD_INT 4
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 1
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 26
12567: PUSH
12568: LD_INT 1
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: PPUSH
12582: CALL_OW 69
12586: PUSH
12587: LD_EXP 18
12591: PUSH
12592: LD_EXP 17
12596: PUSH
12597: LD_EXP 49
12601: PUSH
12602: LD_EXP 37
12606: PUSH
12607: LD_EXP 47
12611: PUSH
12612: LD_EXP 46
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: DIFF
12625: ST_TO_ADDR
// if not speaker then
12626: LD_VAR 0 1
12630: NOT
12631: IFFALSE 12635
// exit ;
12633: GO 12702
// Say ( speaker [ 1 ] , DArtefTechnologyRu-RSci1-1 ) ;
12635: LD_VAR 0 1
12639: PUSH
12640: LD_INT 1
12642: ARRAY
12643: PPUSH
12644: LD_STRING DArtefTechnologyRu-RSci1-1
12646: PPUSH
12647: CALL_OW 88
// if IsOk ( Burlak ) then
12651: LD_EXP 49
12655: PPUSH
12656: CALL_OW 302
12660: IFFALSE 12674
// Say ( Burlak , DArtefTechnologyRu-Bur-1 ) ;
12662: LD_EXP 49
12666: PPUSH
12667: LD_STRING DArtefTechnologyRu-Bur-1
12669: PPUSH
12670: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyRu-RSci1-2 ) ;
12674: LD_VAR 0 1
12678: PUSH
12679: LD_INT 1
12681: ARRAY
12682: PPUSH
12683: LD_STRING DArtefTechnologyRu-RSci1-2
12685: PPUSH
12686: CALL_OW 88
// Say ( JMM , DArtefTechnologyRu-JMM-1 ) ;
12690: LD_EXP 17
12694: PPUSH
12695: LD_STRING DArtefTechnologyRu-JMM-1
12697: PPUSH
12698: CALL_OW 88
// end ;
12702: PPOPN 1
12704: END
// every 0 0$1 trigger GetTech ( tech_Artifact , 7 ) = state_researched and GetSide ( alien ) = 7 do var speaker ;
12705: LD_INT 24
12707: PPUSH
12708: LD_INT 7
12710: PPUSH
12711: CALL_OW 321
12715: PUSH
12716: LD_INT 2
12718: EQUAL
12719: PUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 255
12727: PUSH
12728: LD_INT 7
12730: EQUAL
12731: AND
12732: IFFALSE 12892
12734: GO 12736
12736: DISABLE
12737: LD_INT 0
12739: PPUSH
// begin if Denis then
12740: LD_EXP 23
12744: IFFALSE 12761
// speaker := [ Denis ] else
12746: LD_ADDR_VAR 0 1
12750: PUSH
12751: LD_EXP 23
12755: PUSH
12756: EMPTY
12757: LIST
12758: ST_TO_ADDR
12759: GO 12867
// speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12761: LD_ADDR_VAR 0 1
12765: PUSH
12766: LD_INT 22
12768: PUSH
12769: LD_INT 7
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 23
12778: PUSH
12779: LD_INT 1
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 25
12788: PUSH
12789: LD_INT 4
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 21
12798: PUSH
12799: LD_INT 1
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 26
12808: PUSH
12809: LD_INT 1
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: PUSH
12828: LD_EXP 18
12832: PUSH
12833: LD_EXP 17
12837: PUSH
12838: LD_EXP 49
12842: PUSH
12843: LD_EXP 37
12847: PUSH
12848: LD_EXP 47
12852: PUSH
12853: LD_EXP 46
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: DIFF
12866: ST_TO_ADDR
// if not speaker then
12867: LD_VAR 0 1
12871: NOT
12872: IFFALSE 12876
// exit ;
12874: GO 12892
// Say ( speaker [ 1 ] , DArtefTechnologyArStart-Sci1-1 ) ;
12876: LD_VAR 0 1
12880: PUSH
12881: LD_INT 1
12883: ARRAY
12884: PPUSH
12885: LD_STRING DArtefTechnologyArStart-Sci1-1
12887: PPUSH
12888: CALL_OW 88
// end ;
12892: PPOPN 1
12894: END
// every 0 0$1 trigger artifactIIIResearched do var speaker ;
12895: LD_EXP 14
12899: IFFALSE 13180
12901: GO 12903
12903: DISABLE
12904: LD_INT 0
12906: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Roth , JMM , Burlak , Titov , Kuzmov , Kovalyuk ] ;
12907: LD_ADDR_VAR 0 1
12911: PUSH
12912: LD_INT 22
12914: PUSH
12915: LD_INT 7
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 23
12924: PUSH
12925: LD_INT 3
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 25
12934: PUSH
12935: LD_INT 4
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 26
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: PPUSH
12969: CALL_OW 69
12973: PUSH
12974: LD_EXP 18
12978: PUSH
12979: LD_EXP 17
12983: PUSH
12984: LD_EXP 49
12988: PUSH
12989: LD_EXP 37
12993: PUSH
12994: LD_EXP 47
12998: PUSH
12999: LD_EXP 46
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: DIFF
13012: ST_TO_ADDR
// if not speaker then
13013: LD_VAR 0 1
13017: NOT
13018: IFFALSE 13022
// exit ;
13020: GO 13180
// DialogueOn ;
13022: CALL_OW 6
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-1 ) ;
13026: LD_VAR 0 1
13030: PUSH
13031: LD_INT 1
13033: ARRAY
13034: PPUSH
13035: LD_STRING DArtefTechnologyAr-RSci1-1
13037: PPUSH
13038: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-1 ) ;
13042: LD_EXP 17
13046: PPUSH
13047: LD_STRING DArtefTechnologyAr-JMM-1
13049: PPUSH
13050: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-2 ) ;
13054: LD_VAR 0 1
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: LD_STRING DArtefTechnologyAr-RSci1-2
13065: PPUSH
13066: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-2 ) ;
13070: LD_EXP 17
13074: PPUSH
13075: LD_STRING DArtefTechnologyAr-JMM-2
13077: PPUSH
13078: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-3 ) ;
13082: LD_VAR 0 1
13086: PUSH
13087: LD_INT 1
13089: ARRAY
13090: PPUSH
13091: LD_STRING DArtefTechnologyAr-RSci1-3
13093: PPUSH
13094: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-3 ) ;
13098: LD_EXP 17
13102: PPUSH
13103: LD_STRING DArtefTechnologyAr-JMM-3
13105: PPUSH
13106: CALL_OW 88
// Say ( speaker [ 1 ] , DArtefTechnologyAr-RSci1-4 ) ;
13110: LD_VAR 0 1
13114: PUSH
13115: LD_INT 1
13117: ARRAY
13118: PPUSH
13119: LD_STRING DArtefTechnologyAr-RSci1-4
13121: PPUSH
13122: CALL_OW 88
// if IsOk ( Burlak ) then
13126: LD_EXP 49
13130: PPUSH
13131: CALL_OW 302
13135: IFFALSE 13149
// Say ( Burlak , DArtefTechnologyAr-Bur-4 ) ;
13137: LD_EXP 49
13141: PPUSH
13142: LD_STRING DArtefTechnologyAr-Bur-4
13144: PPUSH
13145: CALL_OW 88
// Say ( JMM , DArtefTechnologyAr-JMM-4 ) ;
13149: LD_EXP 17
13153: PPUSH
13154: LD_STRING DArtefTechnologyAr-JMM-4
13156: PPUSH
13157: CALL_OW 88
// DialogueOff ;
13161: CALL_OW 7
// wait ( 0 0$45 ) ;
13165: LD_INT 1575
13167: PPUSH
13168: CALL_OW 67
// spawnOmar := true ;
13172: LD_ADDR_EXP 11
13176: PUSH
13177: LD_INT 1
13179: ST_TO_ADDR
// end ;
13180: PPOPN 1
13182: END
// every 0 0$1 trigger spawnOmar do
13183: LD_EXP 11
13187: IFFALSE 13567
13189: GO 13191
13191: DISABLE
// begin PrepareOmarAli ;
13192: CALL 6705 0 0
// if not HasTask ( Omar ) then
13196: LD_EXP 53
13200: PPUSH
13201: CALL_OW 314
13205: NOT
13206: IFFALSE 13223
// ComMoveXY ( Omar , 252 , 220 ) ;
13208: LD_EXP 53
13212: PPUSH
13213: LD_INT 252
13215: PPUSH
13216: LD_INT 220
13218: PPUSH
13219: CALL_OW 111
// if not Omar then
13223: LD_EXP 53
13227: NOT
13228: IFFALSE 13232
// exit ;
13230: GO 13567
// repeat wait ( 0 0$1 ) ;
13232: LD_INT 35
13234: PPUSH
13235: CALL_OW 67
// if not HasTask ( Omar ) and GetDistUnitXY ( Omar , 252 , 220 ) > 6 then
13239: LD_EXP 53
13243: PPUSH
13244: CALL_OW 314
13248: NOT
13249: PUSH
13250: LD_EXP 53
13254: PPUSH
13255: LD_INT 252
13257: PPUSH
13258: LD_INT 220
13260: PPUSH
13261: CALL_OW 297
13265: PUSH
13266: LD_INT 6
13268: GREATER
13269: AND
13270: IFFALSE 13287
// ComMoveXY ( Omar , 252 , 220 ) ;
13272: LD_EXP 53
13276: PPUSH
13277: LD_INT 252
13279: PPUSH
13280: LD_INT 220
13282: PPUSH
13283: CALL_OW 111
// until See ( 7 , Omar ) ;
13287: LD_INT 7
13289: PPUSH
13290: LD_EXP 53
13294: PPUSH
13295: CALL_OW 292
13299: IFFALSE 13232
// CenterNowOnUnits ( Omar ) ;
13301: LD_EXP 53
13305: PPUSH
13306: CALL_OW 87
// DialogueOn ;
13310: CALL_OW 6
// Say ( Omar , DOmar-Omar-1 ) ;
13314: LD_EXP 53
13318: PPUSH
13319: LD_STRING DOmar-Omar-1
13321: PPUSH
13322: CALL_OW 88
// Say ( JMM , DOmar-JMM-1 ) ;
13326: LD_EXP 17
13330: PPUSH
13331: LD_STRING DOmar-JMM-1
13333: PPUSH
13334: CALL_OW 88
// Say ( Omar , DOmar-Omar-2 ) ;
13338: LD_EXP 53
13342: PPUSH
13343: LD_STRING DOmar-Omar-2
13345: PPUSH
13346: CALL_OW 88
// Say ( JMM , DOmar-JMM-2 ) ;
13350: LD_EXP 17
13354: PPUSH
13355: LD_STRING DOmar-JMM-2
13357: PPUSH
13358: CALL_OW 88
// Say ( Omar , DOmar-Omar-3 ) ;
13362: LD_EXP 53
13366: PPUSH
13367: LD_STRING DOmar-Omar-3
13369: PPUSH
13370: CALL_OW 88
// if IsOk ( Burlak ) then
13374: LD_EXP 49
13378: PPUSH
13379: CALL_OW 302
13383: IFFALSE 13399
// Say ( Burlak , DOmar-Bur-3 ) else
13385: LD_EXP 49
13389: PPUSH
13390: LD_STRING DOmar-Bur-3
13392: PPUSH
13393: CALL_OW 88
13397: GO 13411
// Say ( JMM , DOmar-JMM-3 ) ;
13399: LD_EXP 17
13403: PPUSH
13404: LD_STRING DOmar-JMM-3
13406: PPUSH
13407: CALL_OW 88
// Say ( Omar , DOmar-Omar-4 ) ;
13411: LD_EXP 53
13415: PPUSH
13416: LD_STRING DOmar-Omar-4
13418: PPUSH
13419: CALL_OW 88
// case Query ( QAccept ) of 1 :
13423: LD_STRING QAccept
13425: PPUSH
13426: CALL_OW 97
13430: PUSH
13431: LD_INT 1
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13475
13439: POP
// begin Say ( JMM , DQrAccept#1-JMM-1 ) ;
13440: LD_EXP 17
13444: PPUSH
13445: LD_STRING DQrAccept#1-JMM-1
13447: PPUSH
13448: CALL_OW 88
// SetSide ( Omar , 7 ) ;
13452: LD_EXP 53
13456: PPUSH
13457: LD_INT 7
13459: PPUSH
13460: CALL_OW 235
// ComStop ( Omar ) ;
13464: LD_EXP 53
13468: PPUSH
13469: CALL_OW 141
// end ; 2 :
13473: GO 13524
13475: LD_INT 2
13477: DOUBLE
13478: EQUAL
13479: IFTRUE 13483
13481: GO 13523
13483: POP
// begin if IsOk ( Burlak ) then
13484: LD_EXP 49
13488: PPUSH
13489: CALL_OW 302
13493: IFFALSE 13509
// Say ( Burlak , DQrAccept#2-Bur-1 ) else
13495: LD_EXP 49
13499: PPUSH
13500: LD_STRING DQrAccept#2-Bur-1
13502: PPUSH
13503: CALL_OW 88
13507: GO 13521
// Say ( JMM , DQrAccept#2-JMM-1 ) ;
13509: LD_EXP 17
13513: PPUSH
13514: LD_STRING DQrAccept#2-JMM-1
13516: PPUSH
13517: CALL_OW 88
// end ; end ;
13521: GO 13524
13523: POP
// DialogueOff ;
13524: CALL_OW 7
// if GetSide ( Omar ) = 7 then
13528: LD_EXP 53
13532: PPUSH
13533: CALL_OW 255
13537: PUSH
13538: LD_INT 7
13540: EQUAL
13541: IFFALSE 13552
// begin SetAchievement ( ACH_OMAR ) ;
13543: LD_STRING ACH_OMAR
13545: PPUSH
13546: CALL_OW 543
// exit ;
13550: GO 13567
// end ; ComMoveXY ( Omar , 202 , 115 ) ;
13552: LD_EXP 53
13556: PPUSH
13557: LD_INT 202
13559: PPUSH
13560: LD_INT 115
13562: PPUSH
13563: CALL_OW 111
// end ;
13567: END
// every 0 0$1 trigger GetDistUnitXY ( Omar , 200 , 98 ) < 40 and russianDestroyed do
13568: LD_EXP 53
13572: PPUSH
13573: LD_INT 200
13575: PPUSH
13576: LD_INT 98
13578: PPUSH
13579: CALL_OW 297
13583: PUSH
13584: LD_INT 40
13586: LESS
13587: PUSH
13588: LD_EXP 2
13592: AND
13593: IFFALSE 13811
13595: GO 13597
13597: DISABLE
// begin SetSide ( Omar , 5 ) ;
13598: LD_EXP 53
13602: PPUSH
13603: LD_INT 5
13605: PPUSH
13606: CALL_OW 235
// if IsInUnit ( Omar ) then
13610: LD_EXP 53
13614: PPUSH
13615: CALL_OW 310
13619: IFFALSE 13630
// ComExitVehicle ( Omar ) ;
13621: LD_EXP 53
13625: PPUSH
13626: CALL_OW 121
// if IsInUnit ( Omar ) then
13630: LD_EXP 53
13634: PPUSH
13635: CALL_OW 310
13639: IFFALSE 13650
// ComExitBuilding ( Omar ) ;
13641: LD_EXP 53
13645: PPUSH
13646: CALL_OW 122
// wait ( 0 0$1 ) ;
13650: LD_INT 35
13652: PPUSH
13653: CALL_OW 67
// ComMoveXY ( Omar , 203 , 120 ) ;
13657: LD_EXP 53
13661: PPUSH
13662: LD_INT 203
13664: PPUSH
13665: LD_INT 120
13667: PPUSH
13668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13672: LD_INT 35
13674: PPUSH
13675: CALL_OW 67
// until IsSelected ( Omar ) or GetDistUnitXY ( Omar , 203 , 120 ) < 6 ;
13679: LD_EXP 53
13683: PPUSH
13684: CALL_OW 306
13688: PUSH
13689: LD_EXP 53
13693: PPUSH
13694: LD_INT 203
13696: PPUSH
13697: LD_INT 120
13699: PPUSH
13700: CALL_OW 297
13704: PUSH
13705: LD_INT 6
13707: LESS
13708: OR
13709: IFFALSE 13672
// CenterNowOnUnits ( Omar ) ;
13711: LD_EXP 53
13715: PPUSH
13716: CALL_OW 87
// DialogueOn ;
13720: CALL_OW 6
// Say ( JMM , DOmarContam-JMM-1 ) ;
13724: LD_EXP 17
13728: PPUSH
13729: LD_STRING DOmarContam-JMM-1
13731: PPUSH
13732: CALL_OW 88
// Say ( Omar , DOmarContam-Omar-1 ) ;
13736: LD_EXP 53
13740: PPUSH
13741: LD_STRING DOmarContam-Omar-1
13743: PPUSH
13744: CALL_OW 88
// Say ( JMM , DOmarContam-JMM-2 ) ;
13748: LD_EXP 17
13752: PPUSH
13753: LD_STRING DOmarContam-JMM-2
13755: PPUSH
13756: CALL_OW 88
// DialogueOff ;
13760: CALL_OW 7
// SetAttitude ( 5 , 7 , att_enemy , true ) ;
13764: LD_INT 5
13766: PPUSH
13767: LD_INT 7
13769: PPUSH
13770: LD_INT 2
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 80
// repeat wait ( 0 0$3 ) ;
13780: LD_INT 105
13782: PPUSH
13783: CALL_OW 67
// until IsAt ( Omar , 203 , 120 ) ;
13787: LD_EXP 53
13791: PPUSH
13792: LD_INT 203
13794: PPUSH
13795: LD_INT 120
13797: PPUSH
13798: CALL_OW 307
13802: IFFALSE 13780
// YouLost ( MothContaminate ) ;
13804: LD_STRING MothContaminate
13806: PPUSH
13807: CALL_OW 104
// end ;
13811: END
// every 0 0$2 trigger not americanDestroyed and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) do
13812: LD_EXP 4
13816: NOT
13817: PUSH
13818: LD_INT 22
13820: PUSH
13821: LD_INT 1
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 34
13830: PUSH
13831: LD_INT 8
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: AND
13847: IFFALSE 13928
13849: GO 13851
13851: DISABLE
// begin if not IsOk ( Powell ) then
13852: LD_EXP 52
13856: PPUSH
13857: CALL_OW 302
13861: NOT
13862: IFFALSE 13866
// exit ;
13864: GO 13928
// DialogueOn ;
13866: CALL_OW 6
// SayRadio ( Powell , DWinAmericans-Pow-1 ) ;
13870: LD_EXP 52
13874: PPUSH
13875: LD_STRING DWinAmericans-Pow-1
13877: PPUSH
13878: CALL_OW 94
// if IsOk ( Burlak ) then
13882: LD_EXP 49
13886: PPUSH
13887: CALL_OW 302
13891: IFFALSE 13905
// Say ( Burlak , DWinAmericans-Bur-1 ) ;
13893: LD_EXP 49
13897: PPUSH
13898: LD_STRING DWinAmericans-Bur-1
13900: PPUSH
13901: CALL_OW 88
// Say ( JMM , DWinAmericans-JMM-1 ) ;
13905: LD_EXP 17
13909: PPUSH
13910: LD_STRING DWinAmericans-JMM-1
13912: PPUSH
13913: CALL_OW 88
// DialogueOff ;
13917: CALL_OW 7
// YouLost ( AmBomb ) ;
13921: LD_STRING AmBomb
13923: PPUSH
13924: CALL_OW 104
// end ;
13928: END
// every 0 0$2 trigger not russianDestroyed and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) do
13929: LD_EXP 2
13933: NOT
13934: PUSH
13935: LD_INT 22
13937: PUSH
13938: LD_INT 3
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 34
13947: PUSH
13948: LD_INT 48
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PPUSH
13959: CALL_OW 69
13963: AND
13964: IFFALSE 14045
13966: GO 13968
13968: DISABLE
// begin if not IsOk ( Platonov ) then
13969: LD_EXP 56
13973: PPUSH
13974: CALL_OW 302
13978: NOT
13979: IFFALSE 13983
// exit ;
13981: GO 14045
// DialogueOn ;
13983: CALL_OW 6
// SayRadio ( Platonov , DWinRussians-Pla-1 ) ;
13987: LD_EXP 56
13991: PPUSH
13992: LD_STRING DWinRussians-Pla-1
13994: PPUSH
13995: CALL_OW 94
// if IsOk ( Burlak ) then
13999: LD_EXP 49
14003: PPUSH
14004: CALL_OW 302
14008: IFFALSE 14022
// Say ( Burlak , DWinRussians-Bur-1 ) ;
14010: LD_EXP 49
14014: PPUSH
14015: LD_STRING DWinRussians-Bur-1
14017: PPUSH
14018: CALL_OW 88
// Say ( JMM , DWinRussians-JMM-1 ) ;
14022: LD_EXP 17
14026: PPUSH
14027: LD_STRING DWinRussians-JMM-1
14029: PPUSH
14030: CALL_OW 88
// DialogueOff ;
14034: CALL_OW 7
// YouLost ( RuBomb ) ;
14038: LD_STRING RuBomb
14040: PPUSH
14041: CALL_OW 104
// end ;
14045: END
// every 0 0$20 trigger FilterUnitsInArea ( powellBase , [ f_side , 7 ] ) and not americanDestroyed do
14046: LD_INT 7
14048: PPUSH
14049: LD_INT 22
14051: PUSH
14052: LD_INT 7
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 70
14063: PUSH
14064: LD_EXP 4
14068: NOT
14069: AND
14070: IFFALSE 14099
14072: GO 14074
14074: DISABLE
// begin SayRadio ( Powell , DSurrenderAmericans-Pow-1 ) ;
14075: LD_EXP 52
14079: PPUSH
14080: LD_STRING DSurrenderAmericans-Pow-1
14082: PPUSH
14083: CALL_OW 94
// Say ( JMM , DSurrenderAmericans-JMM-1 ) ;
14087: LD_EXP 17
14091: PPUSH
14092: LD_STRING DSurrenderAmericans-JMM-1
14094: PPUSH
14095: CALL_OW 88
// end ;
14099: END
// every 0 0$20 trigger FilterUnitsInArea ( russianBaseArea , [ f_side , 7 ] ) and not russianDestroyed and Burlak do
14100: LD_INT 2
14102: PPUSH
14103: LD_INT 22
14105: PUSH
14106: LD_INT 7
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 70
14117: PUSH
14118: LD_EXP 2
14122: NOT
14123: AND
14124: PUSH
14125: LD_EXP 49
14129: AND
14130: IFFALSE 14159
14132: GO 14134
14134: DISABLE
// begin SayRadio ( Platonov , DSurrenderRussians-Pla-1 ) ;
14135: LD_EXP 56
14139: PPUSH
14140: LD_STRING DSurrenderRussians-Pla-1
14142: PPUSH
14143: CALL_OW 94
// Say ( Burlak , DSurrenderRussians-Bur-1 ) ;
14147: LD_EXP 49
14151: PPUSH
14152: LD_STRING DSurrenderRussians-Bur-1
14154: PPUSH
14155: CALL_OW 88
// end ;
14159: END
// every 0 0$2 + 0 0$5 trigger americanDestroyed do var i , tmp , speaker ;
14160: LD_EXP 4
14164: IFFALSE 14547
14166: GO 14168
14168: DISABLE
14169: LD_INT 0
14171: PPUSH
14172: PPUSH
14173: PPUSH
// begin MC_Kill ( 4 ) ;
14174: LD_INT 4
14176: PPUSH
14177: CALL 20806 0 1
// SetAttitude ( 1 , 7 , att_friend , true ) ;
14181: LD_INT 1
14183: PPUSH
14184: LD_INT 7
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: LD_INT 1
14192: PPUSH
14193: CALL_OW 80
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ Powell , Gladstone , Cyrus , Bobby , Gary , Houten ] ;
14197: LD_ADDR_VAR 0 3
14201: PUSH
14202: LD_INT 22
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 26
14214: PUSH
14215: LD_INT 1
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 23
14224: PUSH
14225: LD_INT 1
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 69
14241: PUSH
14242: LD_EXP 52
14246: PUSH
14247: LD_EXP 25
14251: PUSH
14252: LD_EXP 22
14256: PUSH
14257: LD_EXP 21
14261: PUSH
14262: LD_EXP 28
14266: PUSH
14267: LD_EXP 26
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: DIFF
14280: ST_TO_ADDR
// if speaker then
14281: LD_VAR 0 3
14285: IFFALSE 14311
// begin DialogueOn ;
14287: CALL_OW 6
// SayRadio ( speaker [ 1 ] , DSurrenderAmericans-Sol1-1a ) ;
14291: LD_VAR 0 3
14295: PUSH
14296: LD_INT 1
14298: ARRAY
14299: PPUSH
14300: LD_STRING DSurrenderAmericans-Sol1-1a
14302: PPUSH
14303: CALL_OW 94
// DialogueOff ;
14307: CALL_OW 7
// end ; americanCapitulated := true ;
14311: LD_ADDR_EXP 6
14315: PUSH
14316: LD_INT 1
14318: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
14319: LD_ADDR_VAR 0 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 21
14336: PUSH
14337: LD_INT 1
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PPUSH
14348: CALL_OW 69
14352: PUSH
14353: LD_INT 22
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 21
14365: PUSH
14366: LD_INT 2
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 1
14375: PUSH
14376: EMPTY
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 69
14388: ADD
14389: ST_TO_ADDR
// if tmp then
14390: LD_VAR 0 2
14394: IFFALSE 14547
// repeat wait ( 0 0$1 ) ;
14396: LD_INT 35
14398: PPUSH
14399: CALL_OW 67
// for i in tmp do
14403: LD_ADDR_VAR 0 1
14407: PUSH
14408: LD_VAR 0 2
14412: PUSH
14413: FOR_IN
14414: IFFALSE 14496
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 310
14425: PUSH
14426: LD_VAR 0 1
14430: PPUSH
14431: CALL_OW 310
14435: PPUSH
14436: CALL_OW 247
14440: PUSH
14441: LD_INT 3
14443: EQUAL
14444: AND
14445: IFFALSE 14456
// ComExitBuilding ( i ) ;
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 122
// AddComMoveXY ( i , 122 , 242 ) ;
14456: LD_VAR 0 1
14460: PPUSH
14461: LD_INT 122
14463: PPUSH
14464: LD_INT 242
14466: PPUSH
14467: CALL_OW 171
// if IsInArea ( i , americanEscape ) then
14471: LD_VAR 0 1
14475: PPUSH
14476: LD_INT 35
14478: PPUSH
14479: CALL_OW 308
14483: IFFALSE 14494
// RemoveUnit ( i ) ;
14485: LD_VAR 0 1
14489: PPUSH
14490: CALL_OW 64
// end ;
14494: GO 14413
14496: POP
14497: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
14498: LD_INT 22
14500: PUSH
14501: LD_INT 1
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: LD_INT 21
14513: PUSH
14514: LD_INT 1
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 33
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 69
14544: NOT
14545: IFFALSE 14396
// end ;
14547: PPOPN 3
14549: END
// every 0 0$2 + 0 0$5 trigger russianDestroyed do var i , tmp , speaker ;
14550: LD_EXP 2
14554: IFFALSE 14955
14556: GO 14558
14558: DISABLE
14559: LD_INT 0
14561: PPUSH
14562: PPUSH
14563: PPUSH
// begin repeat wait ( 0 0$1 ) ;
14564: LD_INT 35
14566: PPUSH
14567: CALL_OW 67
// until IsDead ( Yakotich ) ;
14571: LD_EXP 57
14575: PPUSH
14576: CALL_OW 301
14580: IFFALSE 14564
// MC_Kill ( 2 ) ;
14582: LD_INT 2
14584: PPUSH
14585: CALL 20806 0 1
// SetAttitude ( 3 , 7 , att_friend , true ) ;
14589: LD_INT 3
14591: PPUSH
14592: LD_INT 7
14594: PPUSH
14595: LD_INT 1
14597: PPUSH
14598: LD_INT 1
14600: PPUSH
14601: CALL_OW 80
// speaker := FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] , [ f_nation , 3 ] ] ) diff [ Platonov , Yakotich ] ;
14605: LD_ADDR_VAR 0 3
14609: PUSH
14610: LD_INT 22
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 26
14622: PUSH
14623: LD_INT 1
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 23
14632: PUSH
14633: LD_INT 3
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: LIST
14644: PPUSH
14645: CALL_OW 69
14649: PUSH
14650: LD_EXP 56
14654: PUSH
14655: LD_EXP 57
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: DIFF
14664: ST_TO_ADDR
// if speaker then
14665: LD_VAR 0 3
14669: IFFALSE 14719
// begin DialogueOn ;
14671: CALL_OW 6
// if Burlak then
14675: LD_EXP 49
14679: IFFALSE 14699
// SayRadio ( speaker [ 1 ] , DSurrenderRussians-RSol1-1 ) else
14681: LD_VAR 0 3
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PPUSH
14690: LD_STRING DSurrenderRussians-RSol1-1
14692: PPUSH
14693: CALL_OW 94
14697: GO 14715
// SayRadio ( speaker [ 1 ] , DSurrenderRussians-RSol1-1a ) ;
14699: LD_VAR 0 3
14703: PUSH
14704: LD_INT 1
14706: ARRAY
14707: PPUSH
14708: LD_STRING DSurrenderRussians-RSol1-1a
14710: PPUSH
14711: CALL_OW 94
// DialogueOff ;
14715: CALL_OW 7
// end ; russianCapitulated := true ;
14719: LD_ADDR_EXP 7
14723: PUSH
14724: LD_INT 1
14726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
14727: LD_ADDR_VAR 0 2
14731: PUSH
14732: LD_INT 22
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 21
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 69
14760: PUSH
14761: LD_INT 22
14763: PUSH
14764: LD_INT 3
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: LD_INT 21
14773: PUSH
14774: LD_INT 2
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: EMPTY
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: ADD
14797: ST_TO_ADDR
// if tmp then
14798: LD_VAR 0 2
14802: IFFALSE 14955
// repeat wait ( 0 0$1 ) ;
14804: LD_INT 35
14806: PPUSH
14807: CALL_OW 67
// for i in tmp do
14811: LD_ADDR_VAR 0 1
14815: PUSH
14816: LD_VAR 0 2
14820: PUSH
14821: FOR_IN
14822: IFFALSE 14904
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
14824: LD_VAR 0 1
14828: PPUSH
14829: CALL_OW 310
14833: PUSH
14834: LD_VAR 0 1
14838: PPUSH
14839: CALL_OW 310
14843: PPUSH
14844: CALL_OW 247
14848: PUSH
14849: LD_INT 3
14851: EQUAL
14852: AND
14853: IFFALSE 14864
// ComExitBuilding ( i ) ;
14855: LD_VAR 0 1
14859: PPUSH
14860: CALL_OW 122
// AddComMoveXY ( i , 154 , 1 ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: LD_INT 154
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: CALL_OW 171
// if IsInArea ( i , russianEscape ) then
14879: LD_VAR 0 1
14883: PPUSH
14884: LD_INT 36
14886: PPUSH
14887: CALL_OW 308
14891: IFFALSE 14902
// RemoveUnit ( i ) ;
14893: LD_VAR 0 1
14897: PPUSH
14898: CALL_OW 64
// end ;
14902: GO 14821
14904: POP
14905: POP
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
14906: LD_INT 22
14908: PUSH
14909: LD_INT 3
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: LD_INT 2
14918: PUSH
14919: LD_INT 21
14921: PUSH
14922: LD_INT 1
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 33
14931: PUSH
14932: LD_INT 1
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PPUSH
14948: CALL_OW 69
14952: NOT
14953: IFFALSE 14804
// end ;
14955: PPOPN 3
14957: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) < 18 or IsDead ( Kozlov ) or GetSide ( ar_depot1 ) = 7 do
14958: LD_INT 22
14960: PUSH
14961: LD_INT 8
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 21
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 23
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: PPUSH
14993: CALL_OW 69
14997: PUSH
14998: LD_INT 18
15000: LESS
15001: PUSH
15002: LD_EXP 55
15006: PPUSH
15007: CALL_OW 301
15011: OR
15012: PUSH
15013: LD_INT 324
15015: PPUSH
15016: CALL_OW 255
15020: PUSH
15021: LD_INT 7
15023: EQUAL
15024: OR
15025: IFFALSE 15038
15027: GO 15029
15029: DISABLE
// legionDestroyed := true ;
15030: LD_ADDR_EXP 3
15034: PUSH
15035: LD_INT 1
15037: ST_TO_ADDR
15038: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) < 9 do
15039: LD_INT 22
15041: PUSH
15042: LD_INT 2
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 21
15051: PUSH
15052: LD_INT 1
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 23
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 69
15078: PUSH
15079: LD_INT 9
15081: LESS
15082: IFFALSE 15095
15084: GO 15086
15086: DISABLE
// arabianDestroyed := true ;
15087: LD_ADDR_EXP 5
15091: PUSH
15092: LD_INT 1
15094: ST_TO_ADDR
15095: END
// every 0 0$1 trigger arabianDestroyed do var i , tmp ;
15096: LD_EXP 5
15100: IFFALSE 15344
15102: GO 15104
15104: DISABLE
15105: LD_INT 0
15107: PPUSH
15108: PPUSH
// begin MC_Kill ( 1 ) ;
15109: LD_INT 1
15111: PPUSH
15112: CALL 20806 0 1
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
15116: LD_ADDR_VAR 0 2
15120: PUSH
15121: LD_INT 22
15123: PUSH
15124: LD_INT 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 21
15133: PUSH
15134: LD_INT 1
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PPUSH
15145: CALL_OW 69
15149: PUSH
15150: LD_INT 22
15152: PUSH
15153: LD_INT 8
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 21
15162: PUSH
15163: LD_INT 2
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: PPUSH
15181: CALL_OW 69
15185: ADD
15186: ST_TO_ADDR
// if tmp then
15187: LD_VAR 0 2
15191: IFFALSE 15344
// repeat wait ( 0 0$1 ) ;
15193: LD_INT 35
15195: PPUSH
15196: CALL_OW 67
// for i in tmp do
15200: LD_ADDR_VAR 0 1
15204: PUSH
15205: LD_VAR 0 2
15209: PUSH
15210: FOR_IN
15211: IFFALSE 15293
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
15213: LD_VAR 0 1
15217: PPUSH
15218: CALL_OW 310
15222: PUSH
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL_OW 310
15232: PPUSH
15233: CALL_OW 247
15237: PUSH
15238: LD_INT 3
15240: EQUAL
15241: AND
15242: IFFALSE 15253
// ComExitBuilding ( i ) ;
15244: LD_VAR 0 1
15248: PPUSH
15249: CALL_OW 122
// AddComMoveXY ( i , 254 , 268 ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: LD_INT 254
15260: PPUSH
15261: LD_INT 268
15263: PPUSH
15264: CALL_OW 171
// if IsInArea ( i , arabEscape ) then
15268: LD_VAR 0 1
15272: PPUSH
15273: LD_INT 34
15275: PPUSH
15276: CALL_OW 308
15280: IFFALSE 15291
// RemoveUnit ( i ) ;
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 64
// end ;
15291: GO 15210
15293: POP
15294: POP
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
15295: LD_INT 22
15297: PUSH
15298: LD_INT 2
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 21
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 33
15320: PUSH
15321: LD_INT 1
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PPUSH
15337: CALL_OW 69
15341: NOT
15342: IFFALSE 15193
// end ;
15344: PPOPN 2
15346: END
// every 0 0$1 trigger legionDestroyed do var i , tmp ;
15347: LD_EXP 3
15351: IFFALSE 15703
15353: GO 15355
15355: DISABLE
15356: LD_INT 0
15358: PPUSH
15359: PPUSH
// begin MC_Kill ( 3 ) ;
15360: LD_INT 3
15362: PPUSH
15363: CALL 20806 0 1
// SetAttitude ( 8 , 7 , att_friend , true ) ;
15367: LD_INT 8
15369: PPUSH
15370: LD_INT 7
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: LD_INT 1
15378: PPUSH
15379: CALL_OW 80
// DialogueOn ;
15383: CALL_OW 6
// SayRadio ( Schulz , D15-Szulc-1 ) ;
15387: LD_EXP 54
15391: PPUSH
15392: LD_STRING D15-Szulc-1
15394: PPUSH
15395: CALL_OW 94
// DialogueOff ;
15399: CALL_OW 7
// legionCapitulated := true ;
15403: LD_ADDR_EXP 8
15407: PUSH
15408: LD_INT 1
15410: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
15411: LD_ADDR_VAR 0 1
15415: PUSH
15416: LD_INT 22
15418: PUSH
15419: LD_INT 8
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 3
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 23
15438: PUSH
15439: LD_INT 3
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: FOR_IN
15457: IFFALSE 15473
// SetLives ( i , 3 ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: LD_INT 3
15466: PPUSH
15467: CALL_OW 234
15471: GO 15456
15473: POP
15474: POP
// tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ control_manual ] ] ) ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: LD_INT 22
15482: PUSH
15483: LD_INT 8
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 21
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: PUSH
15509: LD_INT 22
15511: PUSH
15512: LD_INT 8
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 21
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: ADD
15545: ST_TO_ADDR
// if tmp then
15546: LD_VAR 0 2
15550: IFFALSE 15703
// repeat wait ( 0 0$1 ) ;
15552: LD_INT 35
15554: PPUSH
15555: CALL_OW 67
// for i in tmp do
15559: LD_ADDR_VAR 0 1
15563: PUSH
15564: LD_VAR 0 2
15568: PUSH
15569: FOR_IN
15570: IFFALSE 15652
// begin if IsInUnit ( i ) and GetType ( IsInUnit ( i ) ) = unit_building then
15572: LD_VAR 0 1
15576: PPUSH
15577: CALL_OW 310
15581: PUSH
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 310
15591: PPUSH
15592: CALL_OW 247
15596: PUSH
15597: LD_INT 3
15599: EQUAL
15600: AND
15601: IFFALSE 15612
// ComExitBuilding ( i ) ;
15603: LD_VAR 0 1
15607: PPUSH
15608: CALL_OW 122
// AddComMoveXY ( i , 10 , 1 ) ;
15612: LD_VAR 0 1
15616: PPUSH
15617: LD_INT 10
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: CALL_OW 171
// if IsInArea ( i , legionEscape ) then
15627: LD_VAR 0 1
15631: PPUSH
15632: LD_INT 32
15634: PPUSH
15635: CALL_OW 308
15639: IFFALSE 15650
// RemoveUnit ( i ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: CALL_OW 64
// end ;
15650: GO 15569
15652: POP
15653: POP
// until not FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_manual ] ] ] ) ;
15654: LD_INT 22
15656: PUSH
15657: LD_INT 8
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 2
15666: PUSH
15667: LD_INT 21
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 33
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 69
15700: NOT
15701: IFFALSE 15552
// end ;
15703: PPOPN 2
15705: END
// every 0 0$10 trigger americanDestroyed and russianDestroyed and legionDestroyed and arabianDestroyed and americanCapitulated and russianCapitulated and legionCapitulated do var med1 , med2 ;
15706: LD_EXP 4
15710: PUSH
15711: LD_EXP 2
15715: AND
15716: PUSH
15717: LD_EXP 3
15721: AND
15722: PUSH
15723: LD_EXP 5
15727: AND
15728: PUSH
15729: LD_EXP 6
15733: AND
15734: PUSH
15735: LD_EXP 7
15739: AND
15740: PUSH
15741: LD_EXP 8
15745: AND
15746: IFFALSE 17130
15748: GO 15750
15750: DISABLE
15751: LD_INT 0
15753: PPUSH
15754: PPUSH
// begin music_class := 5 ;
15755: LD_ADDR_OWVAR 72
15759: PUSH
15760: LD_INT 5
15762: ST_TO_ADDR
// music_nat := 5 ;
15763: LD_ADDR_OWVAR 71
15767: PUSH
15768: LD_INT 5
15770: ST_TO_ADDR
// if vehicleLostCounter < 3 then
15771: LD_EXP 15
15775: PUSH
15776: LD_INT 3
15778: LESS
15779: IFFALSE 15788
// SetAchievement ( ACH_ECONOMY ) ;
15781: LD_STRING ACH_ECONOMY
15783: PPUSH
15784: CALL_OW 543
// if tick < 60 60$00 then
15788: LD_OWVAR 1
15792: PUSH
15793: LD_INT 126000
15795: LESS
15796: IFFALSE 15812
// begin wait ( 3 ) ;
15798: LD_INT 3
15800: PPUSH
15801: CALL_OW 67
// SetAchievement ( ACH_ASPEED_19 ) ;
15805: LD_STRING ACH_ASPEED_19
15807: PPUSH
15808: CALL_OW 543
// end ; CenterNowOnUnits ( JMM ) ;
15812: LD_EXP 17
15816: PPUSH
15817: CALL_OW 87
// InGameOn ;
15821: CALL_OW 8
// DialogueOn ;
15825: CALL_OW 6
// Say ( JMM , DEnd-JMM-JMM-1 ) ;
15829: LD_EXP 17
15833: PPUSH
15834: LD_STRING DEnd-JMM-JMM-1
15836: PPUSH
15837: CALL_OW 88
// if Joan then
15841: LD_EXP 32
15845: IFFALSE 15861
// Say ( Joan , DEnd-JMM-Joan-1 ) else
15847: LD_EXP 32
15851: PPUSH
15852: LD_STRING DEnd-JMM-Joan-1
15854: PPUSH
15855: CALL_OW 88
15859: GO 15905
// if Lisa and GetSide ( Lisa ) = 7 and IsPlaced ( Lisa ) then
15861: LD_EXP 19
15865: PUSH
15866: LD_EXP 19
15870: PPUSH
15871: CALL_OW 255
15875: PUSH
15876: LD_INT 7
15878: EQUAL
15879: AND
15880: PUSH
15881: LD_EXP 19
15885: PPUSH
15886: CALL_OW 305
15890: AND
15891: IFFALSE 15905
// Say ( Lisa , DEnd-JMM-Lisa-1 ) ;
15893: LD_EXP 19
15897: PPUSH
15898: LD_STRING DEnd-JMM-Lisa-1
15900: PPUSH
15901: CALL_OW 88
// if Frank and IsPlaced ( Frank ) then
15905: LD_EXP 29
15909: PUSH
15910: LD_EXP 29
15914: PPUSH
15915: CALL_OW 305
15919: AND
15920: IFFALSE 15934
// Say ( Frank , DEnd-JMM-Frank-1 ) ;
15922: LD_EXP 29
15926: PPUSH
15927: LD_STRING DEnd-JMM-Frank-1
15929: PPUSH
15930: CALL_OW 88
// if Cyrus and GetSide ( Cyrus ) = 7 and IsPlaced ( Cyrus ) then
15934: LD_EXP 22
15938: PUSH
15939: LD_EXP 22
15943: PPUSH
15944: CALL_OW 255
15948: PUSH
15949: LD_INT 7
15951: EQUAL
15952: AND
15953: PUSH
15954: LD_EXP 22
15958: PPUSH
15959: CALL_OW 305
15963: AND
15964: IFFALSE 15978
// Say ( Cyrus , DEnd-JMM-Cyrus-1 ) ;
15966: LD_EXP 22
15970: PPUSH
15971: LD_STRING DEnd-JMM-Cyrus-1
15973: PPUSH
15974: CALL_OW 88
// if Burlak then
15978: LD_EXP 49
15982: IFFALSE 15996
// Say ( Burlak , DEnd-JMM-Bur-1 ) ;
15984: LD_EXP 49
15988: PPUSH
15989: LD_STRING DEnd-JMM-Bur-1
15991: PPUSH
15992: CALL_OW 88
// if Joan and Lisa and GetSide ( Lisa ) = 7 and IsPlaced ( Lisa ) then
15996: LD_EXP 32
16000: PUSH
16001: LD_EXP 19
16005: AND
16006: PUSH
16007: LD_EXP 19
16011: PPUSH
16012: CALL_OW 255
16016: PUSH
16017: LD_INT 7
16019: EQUAL
16020: AND
16021: PUSH
16022: LD_EXP 19
16026: PPUSH
16027: CALL_OW 305
16031: AND
16032: IFFALSE 16046
// Say ( Lisa , DEnd-Burlak-Lisa-1 ) ;
16034: LD_EXP 19
16038: PPUSH
16039: LD_STRING DEnd-Burlak-Lisa-1
16041: PPUSH
16042: CALL_OW 88
// if Belkov and IsPlaced ( Belkov ) then
16046: LD_EXP 50
16050: PUSH
16051: LD_EXP 50
16055: PPUSH
16056: CALL_OW 305
16060: AND
16061: IFFALSE 16075
// Say ( Belkov , DEnd-JMM-Bel-1 ) ;
16063: LD_EXP 50
16067: PPUSH
16068: LD_STRING DEnd-JMM-Bel-1
16070: PPUSH
16071: CALL_OW 88
// if Gnyevko and IsPlaced ( Gnyevko ) then
16075: LD_EXP 51
16079: PUSH
16080: LD_EXP 51
16084: PPUSH
16085: CALL_OW 305
16089: AND
16090: IFFALSE 16104
// Say ( Gnyevko , DEnd-JMM-Gny-1 ) ;
16092: LD_EXP 51
16096: PPUSH
16097: LD_STRING DEnd-JMM-Gny-1
16099: PPUSH
16100: CALL_OW 88
// if Cornel and GetSide ( Cornel ) = 7 and IsPlaced ( Cornel ) then
16104: LD_EXP 27
16108: PUSH
16109: LD_EXP 27
16113: PPUSH
16114: CALL_OW 255
16118: PUSH
16119: LD_INT 7
16121: EQUAL
16122: AND
16123: PUSH
16124: LD_EXP 27
16128: PPUSH
16129: CALL_OW 305
16133: AND
16134: IFFALSE 16148
// Say ( Cornel , DEnd-JMM-Corn-1 ) ;
16136: LD_EXP 27
16140: PPUSH
16141: LD_STRING DEnd-JMM-Corn-1
16143: PPUSH
16144: CALL_OW 88
// if Donaldson and GetSide ( Donaldson ) = 7 and IsPlaced ( Donaldson ) then
16148: LD_EXP 20
16152: PUSH
16153: LD_EXP 20
16157: PPUSH
16158: CALL_OW 255
16162: PUSH
16163: LD_INT 7
16165: EQUAL
16166: AND
16167: PUSH
16168: LD_EXP 20
16172: PPUSH
16173: CALL_OW 305
16177: AND
16178: IFFALSE 16192
// Say ( Donaldson , DEnd-JMM-Don-1 ) ;
16180: LD_EXP 20
16184: PPUSH
16185: LD_STRING DEnd-JMM-Don-1
16187: PPUSH
16188: CALL_OW 88
// if Bobby and GetSide ( Bobby ) = 7 and IsPlaced ( Bobby ) then
16192: LD_EXP 21
16196: PUSH
16197: LD_EXP 21
16201: PPUSH
16202: CALL_OW 255
16206: PUSH
16207: LD_INT 7
16209: EQUAL
16210: AND
16211: PUSH
16212: LD_EXP 21
16216: PPUSH
16217: CALL_OW 305
16221: AND
16222: IFFALSE 16236
// Say ( Bobby , DEnd-JMM-Bobby-1 ) ;
16224: LD_EXP 21
16228: PPUSH
16229: LD_STRING DEnd-JMM-Bobby-1
16231: PPUSH
16232: CALL_OW 88
// if Denis and GetSide ( Denis ) = 7 and IsPlaced ( Denis ) then
16236: LD_EXP 23
16240: PUSH
16241: LD_EXP 23
16245: PPUSH
16246: CALL_OW 255
16250: PUSH
16251: LD_INT 7
16253: EQUAL
16254: AND
16255: PUSH
16256: LD_EXP 23
16260: PPUSH
16261: CALL_OW 305
16265: AND
16266: IFFALSE 16280
// Say ( Denis , DEnd-JMM-Den-1 ) ;
16268: LD_EXP 23
16272: PPUSH
16273: LD_STRING DEnd-JMM-Den-1
16275: PPUSH
16276: CALL_OW 88
// if Gladstone and GetSide ( Gladstone ) = 7 and IsPlaced ( Gladstone ) then
16280: LD_EXP 25
16284: PUSH
16285: LD_EXP 25
16289: PPUSH
16290: CALL_OW 255
16294: PUSH
16295: LD_INT 7
16297: EQUAL
16298: AND
16299: PUSH
16300: LD_EXP 25
16304: PPUSH
16305: CALL_OW 305
16309: AND
16310: IFFALSE 16324
// Say ( Gladstone , DEnd-JMM-Glad-1 ) ;
16312: LD_EXP 25
16316: PPUSH
16317: LD_STRING DEnd-JMM-Glad-1
16319: PPUSH
16320: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 7 and IsPlaced ( Kikuchi ) then
16324: LD_EXP 30
16328: PUSH
16329: LD_EXP 30
16333: PPUSH
16334: CALL_OW 255
16338: PUSH
16339: LD_INT 7
16341: EQUAL
16342: AND
16343: PUSH
16344: LD_EXP 30
16348: PPUSH
16349: CALL_OW 305
16353: AND
16354: IFFALSE 16368
// Say ( Kikuchi , DEnd-JMM-Yam-1 ) ;
16356: LD_EXP 30
16360: PPUSH
16361: LD_STRING DEnd-JMM-Yam-1
16363: PPUSH
16364: CALL_OW 88
// if Brown and GetSide ( Brown ) = 7 and IsPlaced ( Brown ) then
16368: LD_EXP 24
16372: PUSH
16373: LD_EXP 24
16377: PPUSH
16378: CALL_OW 255
16382: PUSH
16383: LD_INT 7
16385: EQUAL
16386: AND
16387: PUSH
16388: LD_EXP 24
16392: PPUSH
16393: CALL_OW 305
16397: AND
16398: IFFALSE 16412
// Say ( Brown , DEnd-JMM-Brown-1 ) ;
16400: LD_EXP 24
16404: PPUSH
16405: LD_STRING DEnd-JMM-Brown-1
16407: PPUSH
16408: CALL_OW 88
// if Connie and GetSide ( Connie ) = 7 and IsPlaced ( Connie ) then
16412: LD_EXP 34
16416: PUSH
16417: LD_EXP 34
16421: PPUSH
16422: CALL_OW 255
16426: PUSH
16427: LD_INT 7
16429: EQUAL
16430: AND
16431: PUSH
16432: LD_EXP 34
16436: PPUSH
16437: CALL_OW 305
16441: AND
16442: IFFALSE 16456
// Say ( Connie , DEnd-JMM-Con-1 ) ;
16444: LD_EXP 34
16448: PPUSH
16449: LD_STRING DEnd-JMM-Con-1
16451: PPUSH
16452: CALL_OW 88
// if Gary and GetSide ( Gary ) = 7 and IsPlaced ( Gary ) then
16456: LD_EXP 28
16460: PUSH
16461: LD_EXP 28
16465: PPUSH
16466: CALL_OW 255
16470: PUSH
16471: LD_INT 7
16473: EQUAL
16474: AND
16475: PUSH
16476: LD_EXP 28
16480: PPUSH
16481: CALL_OW 305
16485: AND
16486: IFFALSE 16500
// Say ( Gary , DEnd-JMM-Gary-1 ) ;
16488: LD_EXP 28
16492: PPUSH
16493: LD_STRING DEnd-JMM-Gary-1
16495: PPUSH
16496: CALL_OW 88
// if Simms and Roth and IsPlaced ( Simms ) then
16500: LD_EXP 31
16504: PUSH
16505: LD_EXP 18
16509: AND
16510: PUSH
16511: LD_EXP 31
16515: PPUSH
16516: CALL_OW 305
16520: AND
16521: IFFALSE 16535
// Say ( Simms , DEnd-JMM-Sim-1 ) ;
16523: LD_EXP 31
16527: PPUSH
16528: LD_STRING DEnd-JMM-Sim-1
16530: PPUSH
16531: CALL_OW 88
// if Houten and GetSide ( Houten ) = 7 and IsPlaced ( Houten ) then
16535: LD_EXP 26
16539: PUSH
16540: LD_EXP 26
16544: PPUSH
16545: CALL_OW 255
16549: PUSH
16550: LD_INT 7
16552: EQUAL
16553: AND
16554: PUSH
16555: LD_EXP 26
16559: PPUSH
16560: CALL_OW 305
16564: AND
16565: IFFALSE 16579
// Say ( Houten , DEnd-JMM-VanH-1 ) ;
16567: LD_EXP 26
16571: PPUSH
16572: LD_STRING DEnd-JMM-VanH-1
16574: PPUSH
16575: CALL_OW 88
// if Dolgov and IsPlaced ( Dolgov ) then
16579: LD_EXP 39
16583: PUSH
16584: LD_EXP 39
16588: PPUSH
16589: CALL_OW 305
16593: AND
16594: IFFALSE 16608
// Say ( Dolgov , DEnd-JMM-Dol-1 ) ;
16596: LD_EXP 39
16600: PPUSH
16601: LD_STRING DEnd-JMM-Dol-1
16603: PPUSH
16604: CALL_OW 88
// if Kapitsova and IsPlaced ( Kapitsova ) then
16608: LD_EXP 43
16612: PUSH
16613: LD_EXP 43
16617: PPUSH
16618: CALL_OW 305
16622: AND
16623: IFFALSE 16637
// Say ( Kapitsova , DEnd-JMM-Kap-1 ) ;
16625: LD_EXP 43
16629: PPUSH
16630: LD_STRING DEnd-JMM-Kap-1
16632: PPUSH
16633: CALL_OW 88
// if Kovalyuk and IsPlaced ( Kovalyuk ) then
16637: LD_EXP 46
16641: PUSH
16642: LD_EXP 46
16646: PPUSH
16647: CALL_OW 305
16651: AND
16652: IFFALSE 16666
// Say ( Kovalyuk , DEnd-JMM-Kov-1 ) ;
16654: LD_EXP 46
16658: PPUSH
16659: LD_STRING DEnd-JMM-Kov-1
16661: PPUSH
16662: CALL_OW 88
// if Scholtze and IsPlaced ( Scholtze ) then
16666: LD_EXP 41
16670: PUSH
16671: LD_EXP 41
16675: PPUSH
16676: CALL_OW 305
16680: AND
16681: IFFALSE 16695
// Say ( Scholtze , DEnd-JMM-Sch-1 ) ;
16683: LD_EXP 41
16687: PPUSH
16688: LD_STRING DEnd-JMM-Sch-1
16690: PPUSH
16691: CALL_OW 88
// if Titov and IsPlaced ( Titov ) then
16695: LD_EXP 37
16699: PUSH
16700: LD_EXP 37
16704: PPUSH
16705: CALL_OW 305
16709: AND
16710: IFFALSE 16724
// Say ( Titov , DEnd-JMM-Tit-1 ) ;
16712: LD_EXP 37
16716: PPUSH
16717: LD_STRING DEnd-JMM-Tit-1
16719: PPUSH
16720: CALL_OW 88
// if Oblukov and IsPlaced ( Oblukov ) then
16724: LD_EXP 42
16728: PUSH
16729: LD_EXP 42
16733: PPUSH
16734: CALL_OW 305
16738: AND
16739: IFFALSE 16753
// Say ( Oblukov , DEnd-JMM-Obl-1 ) ;
16741: LD_EXP 42
16745: PPUSH
16746: LD_STRING DEnd-JMM-Obl-1
16748: PPUSH
16749: CALL_OW 88
// if Lipshchin and IsPlaced ( Lipshchin ) then
16753: LD_EXP 44
16757: PUSH
16758: LD_EXP 44
16762: PPUSH
16763: CALL_OW 305
16767: AND
16768: IFFALSE 16782
// Say ( Lipshchin , DEnd-JMM-Lip-1 ) ;
16770: LD_EXP 44
16774: PPUSH
16775: LD_STRING DEnd-JMM-Lip-1
16777: PPUSH
16778: CALL_OW 88
// if Fadeev and IsPlaced ( Fadeev ) and Burlak then
16782: LD_EXP 38
16786: PUSH
16787: LD_EXP 38
16791: PPUSH
16792: CALL_OW 305
16796: AND
16797: PUSH
16798: LD_EXP 49
16802: AND
16803: IFFALSE 16817
// Say ( Fadeev , DEnd-Burlak-Fad-1 ) ;
16805: LD_EXP 38
16809: PPUSH
16810: LD_STRING DEnd-Burlak-Fad-1
16812: PPUSH
16813: CALL_OW 88
// if Petrovova and IsPlaced ( Petrovova ) then
16817: LD_EXP 45
16821: PUSH
16822: LD_EXP 45
16826: PPUSH
16827: CALL_OW 305
16831: AND
16832: IFFALSE 16846
// Say ( Petrovova , DEnd-Burlak-Ptr-1 ) ;
16834: LD_EXP 45
16838: PPUSH
16839: LD_STRING DEnd-Burlak-Ptr-1
16841: PPUSH
16842: CALL_OW 88
// if Kuzmov and IsPlaced ( Kuzmov ) then
16846: LD_EXP 47
16850: PUSH
16851: LD_EXP 47
16855: PPUSH
16856: CALL_OW 305
16860: AND
16861: IFFALSE 16875
// Say ( Kuzmov , DEnd-Burlak-Kuz-1 ) ;
16863: LD_EXP 47
16867: PPUSH
16868: LD_STRING DEnd-Burlak-Kuz-1
16870: PPUSH
16871: CALL_OW 88
// if Kirilenkova and IsPlaced ( Kirilenkova ) and Burlak then
16875: LD_EXP 36
16879: PUSH
16880: LD_EXP 36
16884: PPUSH
16885: CALL_OW 305
16889: AND
16890: PUSH
16891: LD_EXP 49
16895: AND
16896: IFFALSE 16910
// Say ( Kirilenkova , DEnd-Burlak-Kir-1 ) ;
16898: LD_EXP 36
16902: PPUSH
16903: LD_STRING DEnd-Burlak-Kir-1
16905: PPUSH
16906: CALL_OW 88
// if Burlak then
16910: LD_EXP 49
16914: IFFALSE 16928
// Say ( JMM , DEnd-Burlak-JMM-1 ) ;
16916: LD_EXP 17
16920: PPUSH
16921: LD_STRING DEnd-Burlak-JMM-1
16923: PPUSH
16924: CALL_OW 88
// dwait ( 0 0$2 ) ;
16928: LD_INT 70
16930: PPUSH
16931: CALL_OW 68
// SayRadio ( Schulz , DEnd-Szulc ) ;
16935: LD_EXP 54
16939: PPUSH
16940: LD_STRING DEnd-Szulc
16942: PPUSH
16943: CALL_OW 94
// dwait ( 0 0$1 ) ;
16947: LD_INT 35
16949: PPUSH
16950: CALL_OW 68
// if IsLive ( Burlak ) then
16954: LD_EXP 49
16958: PPUSH
16959: CALL_OW 300
16963: IFFALSE 16975
// med1 := 1 else
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_INT 1
16972: ST_TO_ADDR
16973: GO 16984
// med1 := - 1 ;
16975: LD_ADDR_VAR 0 1
16979: PUSH
16980: LD_INT 1
16982: NEG
16983: ST_TO_ADDR
// if artifactIResearched and artifactIIResearched and artifactIIIResearched then
16984: LD_EXP 12
16988: PUSH
16989: LD_EXP 13
16993: AND
16994: PUSH
16995: LD_EXP 14
16999: AND
17000: IFFALSE 17012
// med2 := 1 else
17002: LD_ADDR_VAR 0 2
17006: PUSH
17007: LD_INT 1
17009: ST_TO_ADDR
17010: GO 17021
// med2 := - 1 ;
17012: LD_ADDR_VAR 0 2
17016: PUSH
17017: LD_INT 1
17019: NEG
17020: ST_TO_ADDR
// AddMedal ( Hero , 1 ) ;
17021: LD_STRING Hero
17023: PPUSH
17024: LD_INT 1
17026: PPUSH
17027: CALL_OW 101
// AddMedal ( Artefact , med2 ) ;
17031: LD_STRING Artefact
17033: PPUSH
17034: LD_VAR 0 2
17038: PPUSH
17039: CALL_OW 101
// AddMedal ( ReconcileBurlak , med1 ) ;
17043: LD_STRING ReconcileBurlak
17045: PPUSH
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 101
// if Difficulty = 3 and med1 = 1 and med2 = 1 then
17055: LD_OWVAR 67
17059: PUSH
17060: LD_INT 3
17062: EQUAL
17063: PUSH
17064: LD_VAR 0 1
17068: PUSH
17069: LD_INT 1
17071: EQUAL
17072: AND
17073: PUSH
17074: LD_VAR 0 2
17078: PUSH
17079: LD_INT 1
17081: EQUAL
17082: AND
17083: IFFALSE 17095
// SetAchievementEX ( ACH_AMER , 19 ) ;
17085: LD_STRING ACH_AMER
17087: PPUSH
17088: LD_INT 19
17090: PPUSH
17091: CALL_OW 564
// GiveMedals ( MAIN ) ;
17095: LD_STRING MAIN
17097: PPUSH
17098: CALL_OW 102
// InGameOff ;
17102: CALL_OW 9
// DialogueOff ;
17106: CALL_OW 7
// music_nat := 1 ;
17110: LD_ADDR_OWVAR 71
17114: PUSH
17115: LD_INT 1
17117: ST_TO_ADDR
// music_class := 4 ;
17118: LD_ADDR_OWVAR 72
17122: PUSH
17123: LD_INT 4
17125: ST_TO_ADDR
// YouWin ;
17126: CALL_OW 103
// end ; end_of_file
17130: PPOPN 2
17132: END
// export function InitNature ; begin
17133: LD_INT 0
17135: PPUSH
// PrepareNature ( 3 , 3 , 2 , 1 , 1 , 0 , 0 , natureArea1 , 0 ) ;
17136: LD_INT 3
17138: PPUSH
17139: LD_INT 3
17141: PPUSH
17142: LD_INT 2
17144: PPUSH
17145: LD_INT 1
17147: PPUSH
17148: LD_INT 1
17150: PPUSH
17151: LD_INT 0
17153: PPUSH
17154: LD_INT 0
17156: PPUSH
17157: LD_INT 17
17159: PPUSH
17160: LD_INT 0
17162: PPUSH
17163: CALL 83225 0 9
// PrepareNature ( 2 , 1 , 1 , 1 , 1 , 0 , 0 , natureArea2 , 0 ) ;
17167: LD_INT 2
17169: PPUSH
17170: LD_INT 1
17172: PPUSH
17173: LD_INT 1
17175: PPUSH
17176: LD_INT 1
17178: PPUSH
17179: LD_INT 1
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: LD_INT 0
17187: PPUSH
17188: LD_INT 18
17190: PPUSH
17191: LD_INT 0
17193: PPUSH
17194: CALL 83225 0 9
// PrepareNature ( 4 , 1 , 2 , 4 , 2 , 1 , 0 , natureArea3 , 0 ) ;
17198: LD_INT 4
17200: PPUSH
17201: LD_INT 1
17203: PPUSH
17204: LD_INT 2
17206: PPUSH
17207: LD_INT 4
17209: PPUSH
17210: LD_INT 2
17212: PPUSH
17213: LD_INT 1
17215: PPUSH
17216: LD_INT 0
17218: PPUSH
17219: LD_INT 19
17221: PPUSH
17222: LD_INT 0
17224: PPUSH
17225: CALL 83225 0 9
// PrepareNature ( 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , natureWaterArea ) ;
17229: LD_INT 0
17231: PPUSH
17232: LD_INT 0
17234: PPUSH
17235: LD_INT 0
17237: PPUSH
17238: LD_INT 0
17240: PPUSH
17241: LD_INT 0
17243: PPUSH
17244: LD_INT 0
17246: PPUSH
17247: LD_INT 9
17249: PPUSH
17250: LD_INT 0
17252: PPUSH
17253: LD_INT 20
17255: PPUSH
17256: CALL 83225 0 9
// end ; end_of_file
17260: LD_VAR 0 1
17264: RET
// every 0 0$30 do var time ;
17265: GO 17267
17267: DISABLE
17268: LD_INT 0
17270: PPUSH
// begin time := 0 0$50 ;
17271: LD_ADDR_VAR 0 1
17275: PUSH
17276: LD_INT 1750
17278: ST_TO_ADDR
// repeat wait ( time ) ;
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 67
// if Prob ( 50 ) then
17288: LD_INT 50
17290: PPUSH
17291: CALL_OW 13
17295: IFFALSE 17324
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 89 , 45 , true ) ;
17297: LD_INT 1
17299: PPUSH
17300: LD_INT 5
17302: PPUSH
17303: CALL_OW 12
17307: PPUSH
17308: LD_INT 106
17310: PPUSH
17311: LD_INT 89
17313: PPUSH
17314: LD_INT 45
17316: PPUSH
17317: LD_INT 1
17319: PPUSH
17320: CALL_OW 56
// time := time + 0 0$3 ;
17324: LD_ADDR_VAR 0 1
17328: PUSH
17329: LD_VAR 0 1
17333: PUSH
17334: LD_INT 105
17336: PLUS
17337: ST_TO_ADDR
// if Prob ( 30 ) then
17338: LD_INT 30
17340: PPUSH
17341: CALL_OW 13
17345: IFFALSE 17391
// begin wait ( rand ( 0 0$15 , 0 0$21 ) ) ;
17347: LD_INT 525
17349: PPUSH
17350: LD_INT 735
17352: PPUSH
17353: CALL_OW 12
17357: PPUSH
17358: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 21 , 26 , 12 , true ) ;
17362: LD_INT 1
17364: PPUSH
17365: LD_INT 5
17367: PPUSH
17368: CALL_OW 12
17372: PPUSH
17373: LD_INT 21
17375: PPUSH
17376: LD_INT 26
17378: PPUSH
17379: LD_INT 12
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 56
// end else
17389: GO 17427
// begin wait ( rand ( 0 0$20 , 0 0$35 ) ) ;
17391: LD_INT 700
17393: PPUSH
17394: LD_INT 1225
17396: PPUSH
17397: CALL_OW 12
17401: PPUSH
17402: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , russianCratesArea , true ) ;
17406: LD_INT 1
17408: PPUSH
17409: LD_INT 5
17411: PPUSH
17412: CALL_OW 12
17416: PPUSH
17417: LD_INT 14
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: CALL_OW 55
// end ; if Prob ( 50 ) then
17427: LD_INT 50
17429: PPUSH
17430: CALL_OW 13
17434: IFFALSE 17480
// begin wait ( rand ( 0 0$20 , 0 0$30 ) ) ;
17436: LD_INT 700
17438: PPUSH
17439: LD_INT 1050
17441: PPUSH
17442: CALL_OW 12
17446: PPUSH
17447: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 181 , 218 , 16 , true ) ;
17451: LD_INT 1
17453: PPUSH
17454: LD_INT 5
17456: PPUSH
17457: CALL_OW 12
17461: PPUSH
17462: LD_INT 181
17464: PPUSH
17465: LD_INT 218
17467: PPUSH
17468: LD_INT 16
17470: PPUSH
17471: LD_INT 1
17473: PPUSH
17474: CALL_OW 56
// end else
17478: GO 17552
// begin wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
17480: LD_INT 350
17482: PPUSH
17483: LD_INT 525
17485: PPUSH
17486: CALL_OW 12
17490: PPUSH
17491: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , legionCratesArea , true ) ;
17495: LD_INT 1
17497: PPUSH
17498: LD_INT 5
17500: PPUSH
17501: CALL_OW 12
17505: PPUSH
17506: LD_INT 13
17508: PPUSH
17509: LD_INT 1
17511: PPUSH
17512: CALL_OW 55
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
17516: LD_INT 350
17518: PPUSH
17519: LD_INT 700
17521: PPUSH
17522: CALL_OW 12
17526: PPUSH
17527: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
17531: LD_INT 1
17533: PPUSH
17534: LD_INT 5
17536: PPUSH
17537: CALL_OW 12
17541: PPUSH
17542: LD_INT 33
17544: PPUSH
17545: LD_INT 1
17547: PPUSH
17548: CALL_OW 55
// end ; if Prob ( [ 65 , 62 , 55 ] [ Difficulty ] ) then
17552: LD_INT 65
17554: PUSH
17555: LD_INT 62
17557: PUSH
17558: LD_INT 55
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: LD_OWVAR 67
17570: ARRAY
17571: PPUSH
17572: CALL_OW 13
17576: IFFALSE 17622
// begin wait ( rand ( 0 0$15 , 0 0$25 ) ) ;
17578: LD_INT 525
17580: PPUSH
17581: LD_INT 875
17583: PPUSH
17584: CALL_OW 12
17588: PPUSH
17589: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 294 , 211 , 30 , true ) ;
17593: LD_INT 1
17595: PPUSH
17596: LD_INT 5
17598: PPUSH
17599: CALL_OW 12
17603: PPUSH
17604: LD_INT 294
17606: PPUSH
17607: LD_INT 211
17609: PPUSH
17610: LD_INT 30
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: CALL_OW 56
// end else
17620: GO 17664
// begin wait ( rand ( 0 0$12 , 0 0$22 ) ) ;
17622: LD_INT 420
17624: PPUSH
17625: LD_INT 770
17627: PPUSH
17628: CALL_OW 12
17632: PPUSH
17633: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 294 , 211 , 30 , true ) ;
17637: LD_INT 1
17639: PPUSH
17640: LD_INT 5
17642: PPUSH
17643: CALL_OW 12
17647: PPUSH
17648: LD_INT 294
17650: PPUSH
17651: LD_INT 211
17653: PPUSH
17654: LD_INT 30
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 56
// end ; if time > 2 2$20 then
17664: LD_VAR 0 1
17668: PUSH
17669: LD_INT 4900
17671: GREATER
17672: IFFALSE 17682
// time := 0 0$50 ;
17674: LD_ADDR_VAR 0 1
17678: PUSH
17679: LD_INT 1750
17681: ST_TO_ADDR
// until false ;
17682: LD_INT 0
17684: IFFALSE 17279
// end ;
17686: PPOPN 1
17688: END
// every 0 0$45 trigger tick < 10 10$00 do
17689: LD_OWVAR 1
17693: PUSH
17694: LD_INT 21000
17696: LESS
17697: IFFALSE 17745
17699: GO 17701
17701: DISABLE
// begin enable ;
17702: ENABLE
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
17703: LD_INT 350
17705: PPUSH
17706: LD_INT 700
17708: PPUSH
17709: CALL_OW 12
17713: PPUSH
17714: CALL_OW 67
// CreateCratesXYR ( rand ( 3 , 5 ) , 181 , 13 , 20 , true ) ;
17718: LD_INT 3
17720: PPUSH
17721: LD_INT 5
17723: PPUSH
17724: CALL_OW 12
17728: PPUSH
17729: LD_INT 181
17731: PPUSH
17732: LD_INT 13
17734: PPUSH
17735: LD_INT 20
17737: PPUSH
17738: LD_INT 1
17740: PPUSH
17741: CALL_OW 56
// end ; end_of_file
17745: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsLabsWorking ; export artifactsResDifficulty , artifactsResProgress , artifactsLabs , artifactsButtons , artifactsReady ; export function InitArtifact ; begin
17746: LD_INT 0
17748: PPUSH
// SetArtifactRes ( 7 , true ) ;
17749: LD_INT 7
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 467
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
17759: LD_ADDR_EXP 62
17763: PUSH
17764: EMPTY
17765: PUSH
17766: EMPTY
17767: PUSH
17768: EMPTY
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 * Difficulty , 1 1$20 * Difficulty , - 1 ] ;
17775: LD_ADDR_EXP 63
17779: PUSH
17780: LD_INT 1050
17782: PUSH
17783: LD_OWVAR 67
17787: MUL
17788: PUSH
17789: LD_INT 2800
17791: PUSH
17792: LD_OWVAR 67
17796: MUL
17797: PUSH
17798: LD_INT 1
17800: NEG
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
17807: LD_ADDR_EXP 64
17811: PUSH
17812: LD_INT 10
17814: PUSH
17815: LD_INT 35
17817: PUSH
17818: LD_INT 100
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: ST_TO_ADDR
// artifactsResearched := [ 0 , 0 , 0 ] ;
17826: LD_ADDR_EXP 65
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: LD_INT 0
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
17845: LD_ADDR_EXP 67
17849: PUSH
17850: LD_INT 300
17852: PUSH
17853: LD_INT 500
17855: PUSH
17856: LD_INT 800
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: ST_TO_ADDR
// artifactsResProgress := [ 0 , 0 , 0 ] ;
17864: LD_ADDR_EXP 68
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: LD_INT 0
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: ST_TO_ADDR
// artifactsLabs := [ 0 , 0 , 0 ] ;
17883: LD_ADDR_EXP 69
17887: PUSH
17888: LD_INT 0
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: ST_TO_ADDR
// artifactsLabsWorking := [ 0 , 0 , 0 ] ;
17902: LD_ADDR_EXP 66
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_teleport , art_place , art_exp_right ] ] ;
17921: LD_ADDR_EXP 70
17925: PUSH
17926: LD_INT 4
17928: PUSH
17929: LD_INT 3
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 5
17942: PUSH
17943: LD_INT 4
17945: PUSH
17946: LD_INT 2
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 6
17956: PUSH
17957: LD_INT 3
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: ST_TO_ADDR
// artifactsReady := [ 0 , 0 , 0 ] ;
17973: LD_ADDR_EXP 71
17977: PUSH
17978: LD_INT 0
17980: PUSH
17981: LD_INT 0
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: ST_TO_ADDR
// end ;
17992: LD_VAR 0 1
17996: RET
// every 0 0$1 trigger GetTech ( tech_artifact , 7 ) = state_researched do var i , pos , j , labs , nearestLab ;
17997: LD_INT 24
17999: PPUSH
18000: LD_INT 7
18002: PPUSH
18003: CALL_OW 321
18007: PUSH
18008: LD_INT 2
18010: EQUAL
18011: IFFALSE 18937
18013: GO 18015
18015: DISABLE
18016: LD_INT 0
18018: PPUSH
18019: PPUSH
18020: PPUSH
18021: PPUSH
18022: PPUSH
// begin enable ;
18023: ENABLE
// for i = 1 to 3 do
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: DOUBLE
18030: LD_INT 1
18032: DEC
18033: ST_TO_ADDR
18034: LD_INT 3
18036: PUSH
18037: FOR_TO
18038: IFFALSE 18935
// begin pos := FindArtifact ( i + 2 ) ;
18040: LD_ADDR_VAR 0 2
18044: PUSH
18045: LD_VAR 0 1
18049: PUSH
18050: LD_INT 2
18052: PLUS
18053: PPUSH
18054: CALL_OW 469
18058: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
18059: LD_ADDR_EXP 62
18063: PUSH
18064: LD_EXP 62
18068: PPUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 1
18083: ST_TO_ADDR
// if pos then
18084: LD_VAR 0 2
18088: IFFALSE 18796
// begin case i of 1 :
18090: LD_VAR 0 1
18094: PUSH
18095: LD_INT 1
18097: DOUBLE
18098: EQUAL
18099: IFTRUE 18103
18101: GO 18180
18103: POP
// labs := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) ; 2 :
18104: LD_ADDR_VAR 0 4
18108: PUSH
18109: LD_INT 22
18111: PUSH
18112: LD_INT 7
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 23
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 30
18134: PUSH
18135: LD_INT 8
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 30
18144: PUSH
18145: LD_INT 7
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 30
18154: PUSH
18155: LD_INT 11
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: LIST
18172: PPUSH
18173: CALL_OW 69
18177: ST_TO_ADDR
18178: GO 18288
18180: LD_INT 2
18182: DOUBLE
18183: EQUAL
18184: IFTRUE 18188
18186: GO 18265
18188: POP
// labs := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) ; 3 :
18189: LD_ADDR_VAR 0 4
18193: PUSH
18194: LD_INT 22
18196: PUSH
18197: LD_INT 7
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 23
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: LD_INT 30
18219: PUSH
18220: LD_INT 8
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 30
18229: PUSH
18230: LD_INT 7
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 30
18239: PUSH
18240: LD_INT 11
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: PPUSH
18258: CALL_OW 69
18262: ST_TO_ADDR
18263: GO 18288
18265: LD_INT 3
18267: DOUBLE
18268: EQUAL
18269: IFTRUE 18273
18271: GO 18287
18273: POP
// labs := [ alien ] ; end ;
18274: LD_ADDR_VAR 0 4
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: ST_TO_ADDR
18285: GO 18288
18287: POP
// if not labs then
18288: LD_VAR 0 4
18292: NOT
18293: IFFALSE 18297
// continue ;
18295: GO 18037
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
18297: LD_ADDR_VAR 0 5
18301: PUSH
18302: LD_VAR 0 4
18306: PPUSH
18307: LD_EXP 62
18311: PUSH
18312: LD_VAR 0 1
18316: ARRAY
18317: PUSH
18318: LD_INT 1
18320: ARRAY
18321: PPUSH
18322: LD_EXP 62
18326: PUSH
18327: LD_VAR 0 1
18331: ARRAY
18332: PUSH
18333: LD_INT 2
18335: ARRAY
18336: PPUSH
18337: CALL_OW 73
18341: ST_TO_ADDR
// if not nearestLab or nearestLab <> artifactsLabs [ i ] then
18342: LD_VAR 0 5
18346: NOT
18347: PUSH
18348: LD_VAR 0 5
18352: PUSH
18353: LD_EXP 69
18357: PUSH
18358: LD_VAR 0 1
18362: ARRAY
18363: NONEQUAL
18364: OR
18365: IFFALSE 18470
// begin SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_no , artifactsLabs [ i ] ) ;
18367: LD_INT 7
18369: PPUSH
18370: LD_EXP 70
18374: PUSH
18375: LD_VAR 0 1
18379: ARRAY
18380: PUSH
18381: LD_INT 3
18383: ARRAY
18384: PPUSH
18385: LD_INT 0
18387: PPUSH
18388: LD_EXP 69
18392: PUSH
18393: LD_VAR 0 1
18397: ARRAY
18398: PPUSH
18399: CALL_OW 468
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_no , artifactsLabs [ i ] ) ;
18403: LD_INT 7
18405: PPUSH
18406: LD_EXP 70
18410: PUSH
18411: LD_VAR 0 1
18415: ARRAY
18416: PUSH
18417: LD_INT 1
18419: ARRAY
18420: PPUSH
18421: LD_INT 0
18423: PPUSH
18424: LD_EXP 69
18428: PUSH
18429: LD_VAR 0 1
18433: ARRAY
18434: PPUSH
18435: CALL_OW 468
// if nearestLab then
18439: LD_VAR 0 5
18443: IFFALSE 18470
// artifactsLabs := Replace ( artifactsLabs , i , nearestLab ) ;
18445: LD_ADDR_EXP 69
18449: PUSH
18450: LD_EXP 69
18454: PPUSH
18455: LD_VAR 0 1
18459: PPUSH
18460: LD_VAR 0 5
18464: PPUSH
18465: CALL_OW 1
18469: ST_TO_ADDR
// end ; if not nearestLab then
18470: LD_VAR 0 5
18474: NOT
18475: IFFALSE 18479
// continue ;
18477: GO 18037
// if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 then
18479: LD_VAR 0 5
18483: PPUSH
18484: LD_EXP 62
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PUSH
18495: LD_INT 1
18497: ARRAY
18498: PPUSH
18499: LD_EXP 62
18503: PUSH
18504: LD_VAR 0 1
18508: ARRAY
18509: PUSH
18510: LD_INT 2
18512: ARRAY
18513: PPUSH
18514: CALL_OW 297
18518: PUSH
18519: LD_INT 8
18521: LESS
18522: IFFALSE 18719
// begin if not artifactsResearched [ i ] then
18524: LD_EXP 65
18528: PUSH
18529: LD_VAR 0 1
18533: ARRAY
18534: NOT
18535: IFFALSE 18616
// begin if BuildingStatus ( nearestLab ) = bs_idle then
18537: LD_VAR 0 5
18541: PPUSH
18542: CALL_OW 461
18546: PUSH
18547: LD_INT 2
18549: EQUAL
18550: IFFALSE 18584
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
18552: LD_INT 7
18554: PPUSH
18555: LD_EXP 70
18559: PUSH
18560: LD_VAR 0 1
18564: ARRAY
18565: PUSH
18566: LD_INT 3
18568: ARRAY
18569: PPUSH
18570: LD_INT 2
18572: PPUSH
18573: LD_VAR 0 5
18577: PPUSH
18578: CALL_OW 468
18582: GO 18614
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
18584: LD_INT 7
18586: PPUSH
18587: LD_EXP 70
18591: PUSH
18592: LD_VAR 0 1
18596: ARRAY
18597: PUSH
18598: LD_INT 3
18600: ARRAY
18601: PPUSH
18602: LD_INT 1
18604: PPUSH
18605: LD_VAR 0 5
18609: PPUSH
18610: CALL_OW 468
// end else
18614: GO 18717
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ i ] then
18616: LD_VAR 0 5
18620: PPUSH
18621: CALL_OW 461
18625: PUSH
18626: LD_INT 2
18628: EQUAL
18629: PUSH
18630: LD_EXP 71
18634: PUSH
18635: LD_VAR 0 1
18639: ARRAY
18640: AND
18641: IFFALSE 18687
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
18643: LD_INT 7
18645: PPUSH
18646: LD_EXP 70
18650: PUSH
18651: LD_VAR 0 1
18655: ARRAY
18656: PUSH
18657: LD_INT 1
18659: ARRAY
18660: PPUSH
18661: LD_EXP 70
18665: PUSH
18666: LD_VAR 0 1
18670: ARRAY
18671: PUSH
18672: LD_INT 2
18674: ARRAY
18675: PPUSH
18676: LD_VAR 0 5
18680: PPUSH
18681: CALL_OW 468
18685: GO 18717
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
18687: LD_INT 7
18689: PPUSH
18690: LD_EXP 70
18694: PUSH
18695: LD_VAR 0 1
18699: ARRAY
18700: PUSH
18701: LD_INT 1
18703: ARRAY
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: LD_VAR 0 5
18712: PPUSH
18713: CALL_OW 468
// end else
18717: GO 18794
// begin if not artifactsResearched [ i ] then
18719: LD_EXP 65
18723: PUSH
18724: LD_VAR 0 1
18728: ARRAY
18729: NOT
18730: IFFALSE 18764
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_no , nearestLab ) else
18732: LD_INT 7
18734: PPUSH
18735: LD_EXP 70
18739: PUSH
18740: LD_VAR 0 1
18744: ARRAY
18745: PUSH
18746: LD_INT 3
18748: ARRAY
18749: PPUSH
18750: LD_INT 0
18752: PPUSH
18753: LD_VAR 0 5
18757: PPUSH
18758: CALL_OW 468
18762: GO 18794
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_no , nearestLab ) ;
18764: LD_INT 7
18766: PPUSH
18767: LD_EXP 70
18771: PUSH
18772: LD_VAR 0 1
18776: ARRAY
18777: PUSH
18778: LD_INT 1
18780: ARRAY
18781: PPUSH
18782: LD_INT 0
18784: PPUSH
18785: LD_VAR 0 5
18789: PPUSH
18790: CALL_OW 468
// end ; end else
18794: GO 18933
// begin if not artifactsLabs [ i ] then
18796: LD_EXP 69
18800: PUSH
18801: LD_VAR 0 1
18805: ARRAY
18806: NOT
18807: IFFALSE 18811
// continue ;
18809: GO 18037
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 3 ] , art_no , artifactsLabs [ i ] ) ;
18811: LD_INT 7
18813: PPUSH
18814: LD_EXP 70
18818: PUSH
18819: LD_VAR 0 1
18823: ARRAY
18824: PUSH
18825: LD_INT 3
18827: ARRAY
18828: PPUSH
18829: LD_INT 0
18831: PPUSH
18832: LD_EXP 69
18836: PUSH
18837: LD_VAR 0 1
18841: ARRAY
18842: PPUSH
18843: CALL_OW 468
// SetArtifactUse ( 7 , artifactsButtons [ i ] [ 1 ] , art_no , artifactsLabs [ i ] ) ;
18847: LD_INT 7
18849: PPUSH
18850: LD_EXP 70
18854: PUSH
18855: LD_VAR 0 1
18859: ARRAY
18860: PUSH
18861: LD_INT 1
18863: ARRAY
18864: PPUSH
18865: LD_INT 0
18867: PPUSH
18868: LD_EXP 69
18872: PUSH
18873: LD_VAR 0 1
18877: ARRAY
18878: PPUSH
18879: CALL_OW 468
// if artifactsLabsWorking [ i ] then
18883: LD_EXP 66
18887: PUSH
18888: LD_VAR 0 1
18892: ARRAY
18893: IFFALSE 18933
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , false ) ;
18895: LD_ADDR_EXP 66
18899: PUSH
18900: LD_EXP 66
18904: PPUSH
18905: LD_VAR 0 1
18909: PPUSH
18910: LD_INT 0
18912: PPUSH
18913: CALL_OW 1
18917: ST_TO_ADDR
// ComCancel ( artifactsLabs [ i ] ) ;
18918: LD_EXP 69
18922: PUSH
18923: LD_VAR 0 1
18927: ARRAY
18928: PPUSH
18929: CALL_OW 127
// end ; end ; end ;
18933: GO 18037
18935: POP
18936: POP
// end ;
18937: PPOPN 5
18939: END
// on ArtifactUsed ( side , icon , x , y ) do var i , lab , time , list , un ;
18940: LD_INT 0
18942: PPUSH
18943: PPUSH
18944: PPUSH
18945: PPUSH
18946: PPUSH
// begin if icon = artifactsButtons [ 1 ] [ 3 ] then
18947: LD_VAR 0 2
18951: PUSH
18952: LD_EXP 70
18956: PUSH
18957: LD_INT 1
18959: ARRAY
18960: PUSH
18961: LD_INT 3
18963: ARRAY
18964: EQUAL
18965: IFFALSE 19088
// begin lab := artifactsLabs [ 1 ] ;
18967: LD_ADDR_VAR 0 6
18971: PUSH
18972: LD_EXP 69
18976: PUSH
18977: LD_INT 1
18979: ARRAY
18980: ST_TO_ADDR
// if not lab then
18981: LD_VAR 0 6
18985: NOT
18986: IFFALSE 18990
// exit ;
18988: GO 20068
// SetSpecResearch ( lab , artifactsResDifficulty [ 1 ] , true ) ;
18990: LD_VAR 0 6
18994: PPUSH
18995: LD_EXP 67
18999: PUSH
19000: LD_INT 1
19002: ARRAY
19003: PPUSH
19004: LD_INT 1
19006: PPUSH
19007: CALL_OW 486
// if artifactsResProgress [ 1 ] then
19011: LD_EXP 68
19015: PUSH
19016: LD_INT 1
19018: ARRAY
19019: IFFALSE 19039
// SetWorkingProgress ( lab , artifactsResProgress [ 1 ] ) ;
19021: LD_VAR 0 6
19025: PPUSH
19026: LD_EXP 68
19030: PUSH
19031: LD_INT 1
19033: ARRAY
19034: PPUSH
19035: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , 1 , 1 ) ;
19039: LD_ADDR_EXP 66
19043: PUSH
19044: LD_EXP 66
19048: PPUSH
19049: LD_INT 1
19051: PPUSH
19052: LD_INT 1
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// SetArtifactUse ( 7 , artifactsButtons [ 1 ] [ 3 ] , art_no , lab ) ;
19060: LD_INT 7
19062: PPUSH
19063: LD_EXP 70
19067: PUSH
19068: LD_INT 1
19070: ARRAY
19071: PUSH
19072: LD_INT 3
19074: ARRAY
19075: PPUSH
19076: LD_INT 0
19078: PPUSH
19079: LD_VAR 0 6
19083: PPUSH
19084: CALL_OW 468
// end ; if icon = artifactsButtons [ 2 ] [ 3 ] then
19088: LD_VAR 0 2
19092: PUSH
19093: LD_EXP 70
19097: PUSH
19098: LD_INT 2
19100: ARRAY
19101: PUSH
19102: LD_INT 3
19104: ARRAY
19105: EQUAL
19106: IFFALSE 19229
// begin lab := artifactsLabs [ 2 ] ;
19108: LD_ADDR_VAR 0 6
19112: PUSH
19113: LD_EXP 69
19117: PUSH
19118: LD_INT 2
19120: ARRAY
19121: ST_TO_ADDR
// if not lab then
19122: LD_VAR 0 6
19126: NOT
19127: IFFALSE 19131
// exit ;
19129: GO 20068
// SetSpecResearch ( lab , artifactsResDifficulty [ 2 ] , true ) ;
19131: LD_VAR 0 6
19135: PPUSH
19136: LD_EXP 67
19140: PUSH
19141: LD_INT 2
19143: ARRAY
19144: PPUSH
19145: LD_INT 1
19147: PPUSH
19148: CALL_OW 486
// if artifactsResProgress [ 2 ] then
19152: LD_EXP 68
19156: PUSH
19157: LD_INT 2
19159: ARRAY
19160: IFFALSE 19180
// SetWorkingProgress ( lab , artifactsResProgress [ 2 ] ) ;
19162: LD_VAR 0 6
19166: PPUSH
19167: LD_EXP 68
19171: PUSH
19172: LD_INT 2
19174: ARRAY
19175: PPUSH
19176: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , 2 , 1 ) ;
19180: LD_ADDR_EXP 66
19184: PUSH
19185: LD_EXP 66
19189: PPUSH
19190: LD_INT 2
19192: PPUSH
19193: LD_INT 1
19195: PPUSH
19196: CALL_OW 1
19200: ST_TO_ADDR
// SetArtifactUse ( 7 , artifactsButtons [ 2 ] [ 3 ] , art_no , lab ) ;
19201: LD_INT 7
19203: PPUSH
19204: LD_EXP 70
19208: PUSH
19209: LD_INT 2
19211: ARRAY
19212: PUSH
19213: LD_INT 3
19215: ARRAY
19216: PPUSH
19217: LD_INT 0
19219: PPUSH
19220: LD_VAR 0 6
19224: PPUSH
19225: CALL_OW 468
// end ; if icon = artifactsButtons [ 3 ] [ 3 ] then
19229: LD_VAR 0 2
19233: PUSH
19234: LD_EXP 70
19238: PUSH
19239: LD_INT 3
19241: ARRAY
19242: PUSH
19243: LD_INT 3
19245: ARRAY
19246: EQUAL
19247: IFFALSE 19370
// begin lab := artifactsLabs [ 3 ] ;
19249: LD_ADDR_VAR 0 6
19253: PUSH
19254: LD_EXP 69
19258: PUSH
19259: LD_INT 3
19261: ARRAY
19262: ST_TO_ADDR
// if not lab then
19263: LD_VAR 0 6
19267: NOT
19268: IFFALSE 19272
// exit ;
19270: GO 20068
// SetSpecResearch ( lab , artifactsResDifficulty [ 3 ] , true ) ;
19272: LD_VAR 0 6
19276: PPUSH
19277: LD_EXP 67
19281: PUSH
19282: LD_INT 3
19284: ARRAY
19285: PPUSH
19286: LD_INT 1
19288: PPUSH
19289: CALL_OW 486
// if artifactsResProgress [ 3 ] then
19293: LD_EXP 68
19297: PUSH
19298: LD_INT 3
19300: ARRAY
19301: IFFALSE 19321
// SetWorkingProgress ( lab , artifactsResProgress [ 3 ] ) ;
19303: LD_VAR 0 6
19307: PPUSH
19308: LD_EXP 68
19312: PUSH
19313: LD_INT 3
19315: ARRAY
19316: PPUSH
19317: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , 3 , 1 ) ;
19321: LD_ADDR_EXP 66
19325: PUSH
19326: LD_EXP 66
19330: PPUSH
19331: LD_INT 3
19333: PPUSH
19334: LD_INT 1
19336: PPUSH
19337: CALL_OW 1
19341: ST_TO_ADDR
// SetArtifactUse ( 7 , artifactsButtons [ 3 ] [ 3 ] , art_no , lab ) ;
19342: LD_INT 7
19344: PPUSH
19345: LD_EXP 70
19349: PUSH
19350: LD_INT 3
19352: ARRAY
19353: PUSH
19354: LD_INT 3
19356: ARRAY
19357: PPUSH
19358: LD_INT 0
19360: PPUSH
19361: LD_VAR 0 6
19365: PPUSH
19366: CALL_OW 468
// end ; if icon = artifactsButtons [ 1 ] [ 1 ] then
19370: LD_VAR 0 2
19374: PUSH
19375: LD_EXP 70
19379: PUSH
19380: LD_INT 1
19382: ARRAY
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: EQUAL
19388: IFFALSE 19546
// begin lab := artifactsLabs [ 1 ] ;
19390: LD_ADDR_VAR 0 6
19394: PUSH
19395: LD_EXP 69
19399: PUSH
19400: LD_INT 1
19402: ARRAY
19403: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
19404: LD_VAR 0 6
19408: PPUSH
19409: CALL_OW 274
19413: PPUSH
19414: CALL 86697 0 1
19418: PUSH
19419: LD_INT 3
19421: ARRAY
19422: PUSH
19423: LD_EXP 64
19427: PUSH
19428: LD_INT 1
19430: ARRAY
19431: LESS
19432: IFFALSE 19446
// begin HintSpec ( ArtifactCost , 2 ) ;
19434: LD_STRING ArtifactCost
19436: PPUSH
19437: LD_INT 2
19439: PPUSH
19440: CALL_OW 338
// exit ;
19444: GO 20068
// end ; artifactsReady := Replace ( artifactsReady , 1 , false ) ;
19446: LD_ADDR_EXP 71
19450: PUSH
19451: LD_EXP 71
19455: PPUSH
19456: LD_INT 1
19458: PPUSH
19459: LD_INT 0
19461: PPUSH
19462: CALL_OW 1
19466: ST_TO_ADDR
// PlaceSeeing ( x , y , 7 , - 12 ) ;
19467: LD_VAR 0 3
19471: PPUSH
19472: LD_VAR 0 4
19476: PPUSH
19477: LD_INT 7
19479: PPUSH
19480: LD_INT 12
19482: NEG
19483: PPUSH
19484: CALL_OW 330
// wait ( 0 0$30 ) ;
19488: LD_INT 1050
19490: PPUSH
19491: CALL_OW 67
// RemoveSeeing ( x , y , 7 ) ;
19495: LD_VAR 0 3
19499: PPUSH
19500: LD_VAR 0 4
19504: PPUSH
19505: LD_INT 7
19507: PPUSH
19508: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
19512: LD_EXP 63
19516: PUSH
19517: LD_INT 1
19519: ARRAY
19520: PPUSH
19521: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , 1 , true ) ;
19525: LD_ADDR_EXP 71
19529: PUSH
19530: LD_EXP 71
19534: PPUSH
19535: LD_INT 1
19537: PPUSH
19538: LD_INT 1
19540: PPUSH
19541: CALL_OW 1
19545: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
19546: LD_VAR 0 2
19550: PUSH
19551: LD_EXP 70
19555: PUSH
19556: LD_INT 2
19558: ARRAY
19559: PUSH
19560: LD_INT 1
19562: ARRAY
19563: EQUAL
19564: IFFALSE 19801
// begin lab := artifactsLabs [ 2 ] ;
19566: LD_ADDR_VAR 0 6
19570: PUSH
19571: LD_EXP 69
19575: PUSH
19576: LD_INT 2
19578: ARRAY
19579: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_btype , b_ext_siberium ] ] ] ) then
19580: LD_VAR 0 3
19584: PUSH
19585: LD_INT 81
19587: PUSH
19588: LD_INT 7
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 32
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 30
19610: PUSH
19611: LD_INT 28
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 30
19620: PUSH
19621: LD_INT 30
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 35
19630: PUSH
19631: LD_INT 49
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 34
19640: PUSH
19641: LD_INT 49
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 30
19650: PUSH
19651: LD_INT 21
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 69
19675: IN
19676: NOT
19677: IFFALSE 19681
// exit ;
19679: GO 20068
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
19681: LD_VAR 0 6
19685: PPUSH
19686: CALL_OW 274
19690: PPUSH
19691: CALL 86697 0 1
19695: PUSH
19696: LD_INT 3
19698: ARRAY
19699: PUSH
19700: LD_EXP 64
19704: PUSH
19705: LD_INT 2
19707: ARRAY
19708: LESS
19709: IFFALSE 19723
// begin HintSpec ( ArtifactCost , 2 ) ;
19711: LD_STRING ArtifactCost
19713: PPUSH
19714: LD_INT 2
19716: PPUSH
19717: CALL_OW 338
// exit ;
19721: GO 20068
// end ; artifactsReady := Replace ( artifactsReady , 2 , false ) ;
19723: LD_ADDR_EXP 71
19727: PUSH
19728: LD_EXP 71
19732: PPUSH
19733: LD_INT 2
19735: PPUSH
19736: LD_INT 0
19738: PPUSH
19739: CALL_OW 1
19743: ST_TO_ADDR
// KillUnit ( x ) ;
19744: LD_VAR 0 3
19748: PPUSH
19749: CALL_OW 66
// artifactDestroyCounter := artifactDestroyCounter + 1 ;
19753: LD_ADDR_EXP 16
19757: PUSH
19758: LD_EXP 16
19762: PUSH
19763: LD_INT 1
19765: PLUS
19766: ST_TO_ADDR
// wait ( artifactsRecharge [ 2 ] ) ;
19767: LD_EXP 63
19771: PUSH
19772: LD_INT 2
19774: ARRAY
19775: PPUSH
19776: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , 2 , true ) ;
19780: LD_ADDR_EXP 71
19784: PUSH
19785: LD_EXP 71
19789: PPUSH
19790: LD_INT 2
19792: PPUSH
19793: LD_INT 1
19795: PPUSH
19796: CALL_OW 1
19800: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
19801: LD_VAR 0 2
19805: PUSH
19806: LD_EXP 70
19810: PUSH
19811: LD_INT 3
19813: ARRAY
19814: PUSH
19815: LD_INT 1
19817: ARRAY
19818: EQUAL
19819: IFFALSE 20068
// begin lab := artifactsLabs [ 3 ] ;
19821: LD_ADDR_VAR 0 6
19825: PUSH
19826: LD_EXP 69
19830: PUSH
19831: LD_INT 3
19833: ARRAY
19834: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 3 ] then
19835: LD_VAR 0 6
19839: PPUSH
19840: CALL_OW 274
19844: PPUSH
19845: CALL 86697 0 1
19849: PUSH
19850: LD_INT 3
19852: ARRAY
19853: PUSH
19854: LD_EXP 64
19858: PUSH
19859: LD_INT 3
19861: ARRAY
19862: LESS
19863: IFFALSE 19877
// begin HintSpec ( ArtifactCost , 2 ) ;
19865: LD_STRING ArtifactCost
19867: PPUSH
19868: LD_INT 2
19870: PPUSH
19871: CALL_OW 338
// exit ;
19875: GO 20068
// end ; SetAreaMapShow ( teleportArea , 1 ) ;
19877: LD_INT 37
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 424
// time := 0 0$30 ;
19887: LD_ADDR_VAR 0 7
19891: PUSH
19892: LD_INT 1050
19894: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , 3 , false ) ;
19895: LD_ADDR_EXP 71
19899: PUSH
19900: LD_EXP 71
19904: PPUSH
19905: LD_INT 3
19907: PPUSH
19908: LD_INT 0
19910: PPUSH
19911: CALL_OW 1
19915: ST_TO_ADDR
// repeat display_strings := [ #Am15a-1 , time ] ;
19916: LD_ADDR_OWVAR 47
19920: PUSH
19921: LD_STRING #Am15a-1
19923: PUSH
19924: LD_VAR 0 7
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19933: LD_INT 35
19935: PPUSH
19936: CALL_OW 67
// time := time - 0 0$1 ;
19940: LD_ADDR_VAR 0 7
19944: PUSH
19945: LD_VAR 0 7
19949: PUSH
19950: LD_INT 35
19952: MINUS
19953: ST_TO_ADDR
// until time = 0 0$00 ;
19954: LD_VAR 0 7
19958: PUSH
19959: LD_INT 0
19961: EQUAL
19962: IFFALSE 19916
// display_strings :=  ;
19964: LD_ADDR_OWVAR 47
19968: PUSH
19969: LD_STRING 
19971: ST_TO_ADDR
// SetAreaMapShow ( teleportArea , 0 ) ;
19972: LD_INT 37
19974: PPUSH
19975: LD_INT 0
19977: PPUSH
19978: CALL_OW 424
// list := FilterUnitsInArea ( teleportArea , [ f_not , [ f_type , unit_building ] ] ) ;
19982: LD_ADDR_VAR 0 8
19986: PUSH
19987: LD_INT 37
19989: PPUSH
19990: LD_INT 3
19992: PUSH
19993: LD_INT 21
19995: PUSH
19996: LD_INT 3
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PPUSH
20007: CALL_OW 70
20011: ST_TO_ADDR
// CenterOnXY ( x , y ) ;
20012: LD_VAR 0 3
20016: PPUSH
20017: LD_VAR 0 4
20021: PPUSH
20022: CALL_OW 84
// for un in list do
20026: LD_ADDR_VAR 0 9
20030: PUSH
20031: LD_VAR 0 8
20035: PUSH
20036: FOR_IN
20037: IFFALSE 20066
// TeleportUnit ( un , x , y , 12 , true ) ;
20039: LD_VAR 0 9
20043: PPUSH
20044: LD_VAR 0 3
20048: PPUSH
20049: LD_VAR 0 4
20053: PPUSH
20054: LD_INT 12
20056: PPUSH
20057: LD_INT 1
20059: PPUSH
20060: CALL_OW 483
20064: GO 20036
20066: POP
20067: POP
// end ; end ;
20068: PPOPN 9
20070: END
// on SpecResearchCancel ( lab , progress ) do var i , labNum ;
20071: LD_INT 0
20073: PPUSH
20074: PPUSH
// begin labNum := 0 ;
20075: LD_ADDR_VAR 0 4
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// for i = 1 to artifactsLabs do
20083: LD_ADDR_VAR 0 3
20087: PUSH
20088: DOUBLE
20089: LD_INT 1
20091: DEC
20092: ST_TO_ADDR
20093: LD_EXP 69
20097: PUSH
20098: FOR_TO
20099: IFFALSE 20133
// if artifactsLabs [ i ] = lab then
20101: LD_EXP 69
20105: PUSH
20106: LD_VAR 0 3
20110: ARRAY
20111: PUSH
20112: LD_VAR 0 1
20116: EQUAL
20117: IFFALSE 20131
// begin labNum := i ;
20119: LD_ADDR_VAR 0 4
20123: PUSH
20124: LD_VAR 0 3
20128: ST_TO_ADDR
// break ;
20129: GO 20133
// end ;
20131: GO 20098
20133: POP
20134: POP
// if not labNum then
20135: LD_VAR 0 4
20139: NOT
20140: IFFALSE 20144
// exit ;
20142: GO 20222
// SetArtifactUse ( 7 , artifactsButtons [ labNum ] [ 3 ] , art_instant , lab ) ;
20144: LD_INT 7
20146: PPUSH
20147: LD_EXP 70
20151: PUSH
20152: LD_VAR 0 4
20156: ARRAY
20157: PUSH
20158: LD_INT 3
20160: ARRAY
20161: PPUSH
20162: LD_INT 2
20164: PPUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , labNum , progress ) ;
20174: LD_ADDR_EXP 68
20178: PUSH
20179: LD_EXP 68
20183: PPUSH
20184: LD_VAR 0 4
20188: PPUSH
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 1
20198: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , labNum , 0 ) ;
20199: LD_ADDR_EXP 66
20203: PUSH
20204: LD_EXP 66
20208: PPUSH
20209: LD_VAR 0 4
20213: PPUSH
20214: LD_INT 0
20216: PPUSH
20217: CALL_OW 1
20221: ST_TO_ADDR
// end ;
20222: PPOPN 4
20224: END
// on SpecResearchComplete ( lab ) do var i , labNum ;
20225: LD_INT 0
20227: PPUSH
20228: PPUSH
// begin labNum := 0 ;
20229: LD_ADDR_VAR 0 3
20233: PUSH
20234: LD_INT 0
20236: ST_TO_ADDR
// for i = 1 to artifactsLabs do
20237: LD_ADDR_VAR 0 2
20241: PUSH
20242: DOUBLE
20243: LD_INT 1
20245: DEC
20246: ST_TO_ADDR
20247: LD_EXP 69
20251: PUSH
20252: FOR_TO
20253: IFFALSE 20287
// if artifactsLabs [ i ] = lab then
20255: LD_EXP 69
20259: PUSH
20260: LD_VAR 0 2
20264: ARRAY
20265: PUSH
20266: LD_VAR 0 1
20270: EQUAL
20271: IFFALSE 20285
// begin labNum := i ;
20273: LD_ADDR_VAR 0 3
20277: PUSH
20278: LD_VAR 0 2
20282: ST_TO_ADDR
// break ;
20283: GO 20287
// end ;
20285: GO 20252
20287: POP
20288: POP
// if not labNum then
20289: LD_VAR 0 3
20293: NOT
20294: IFFALSE 20298
// exit ;
20296: GO 20460
// SetArtifactUse ( 7 , artifactsButtons [ labNum ] [ 3 ] , art_no , lab ) ;
20298: LD_INT 7
20300: PPUSH
20301: LD_EXP 70
20305: PUSH
20306: LD_VAR 0 3
20310: ARRAY
20311: PUSH
20312: LD_INT 3
20314: ARRAY
20315: PPUSH
20316: LD_INT 0
20318: PPUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , labNum , true ) ;
20328: LD_ADDR_EXP 65
20332: PUSH
20333: LD_EXP 65
20337: PPUSH
20338: LD_VAR 0 3
20342: PPUSH
20343: LD_INT 1
20345: PPUSH
20346: CALL_OW 1
20350: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , labNum , true ) ;
20351: LD_ADDR_EXP 71
20355: PUSH
20356: LD_EXP 71
20360: PPUSH
20361: LD_VAR 0 3
20365: PPUSH
20366: LD_INT 1
20368: PPUSH
20369: CALL_OW 1
20373: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , labNum , false ) ;
20374: LD_ADDR_EXP 66
20378: PUSH
20379: LD_EXP 66
20383: PPUSH
20384: LD_VAR 0 3
20388: PPUSH
20389: LD_INT 0
20391: PPUSH
20392: CALL_OW 1
20396: ST_TO_ADDR
// case labNum of 1 :
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 1
20404: DOUBLE
20405: EQUAL
20406: IFTRUE 20410
20408: GO 20421
20410: POP
// artifactIResearched := true ; 2 :
20411: LD_ADDR_EXP 12
20415: PUSH
20416: LD_INT 1
20418: ST_TO_ADDR
20419: GO 20460
20421: LD_INT 2
20423: DOUBLE
20424: EQUAL
20425: IFTRUE 20429
20427: GO 20440
20429: POP
// artifactIIResearched := true ; 3 :
20430: LD_ADDR_EXP 13
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
20438: GO 20460
20440: LD_INT 3
20442: DOUBLE
20443: EQUAL
20444: IFTRUE 20448
20446: GO 20459
20448: POP
// artifactIIIResearched := true ; end ;
20449: LD_ADDR_EXP 14
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
20457: GO 20460
20459: POP
// end ; end_of_file
20460: PPOPN 3
20462: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
20463: GO 20465
20465: DISABLE
// begin ru_radar := 98 ;
20466: LD_ADDR_EXP 72
20470: PUSH
20471: LD_INT 98
20473: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20474: LD_ADDR_EXP 73
20478: PUSH
20479: LD_INT 89
20481: ST_TO_ADDR
// us_hack := 99 ;
20482: LD_ADDR_EXP 74
20486: PUSH
20487: LD_INT 99
20489: ST_TO_ADDR
// us_artillery := 97 ;
20490: LD_ADDR_EXP 75
20494: PUSH
20495: LD_INT 97
20497: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20498: LD_ADDR_EXP 76
20502: PUSH
20503: LD_INT 91
20505: ST_TO_ADDR
// tech_Artillery := 80 ;
20506: LD_ADDR_EXP 77
20510: PUSH
20511: LD_INT 80
20513: ST_TO_ADDR
// tech_RadMat := 81 ;
20514: LD_ADDR_EXP 78
20518: PUSH
20519: LD_INT 81
20521: ST_TO_ADDR
// tech_BasicTools := 82 ;
20522: LD_ADDR_EXP 79
20526: PUSH
20527: LD_INT 82
20529: ST_TO_ADDR
// tech_Cargo := 83 ;
20530: LD_ADDR_EXP 80
20534: PUSH
20535: LD_INT 83
20537: ST_TO_ADDR
// tech_Track := 84 ;
20538: LD_ADDR_EXP 81
20542: PUSH
20543: LD_INT 84
20545: ST_TO_ADDR
// tech_Crane := 85 ;
20546: LD_ADDR_EXP 82
20550: PUSH
20551: LD_INT 85
20553: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20554: LD_ADDR_EXP 83
20558: PUSH
20559: LD_INT 86
20561: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20562: LD_ADDR_EXP 84
20566: PUSH
20567: LD_INT 87
20569: ST_TO_ADDR
// end ; end_of_file
20570: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
20571: LD_INT 0
20573: PPUSH
20574: PPUSH
// skirmish := false ;
20575: LD_ADDR_EXP 85
20579: PUSH
20580: LD_INT 0
20582: ST_TO_ADDR
// debug_mc := false ;
20583: LD_ADDR_EXP 86
20587: PUSH
20588: LD_INT 0
20590: ST_TO_ADDR
// mc_bases := [ ] ;
20591: LD_ADDR_EXP 87
20595: PUSH
20596: EMPTY
20597: ST_TO_ADDR
// mc_sides := [ ] ;
20598: LD_ADDR_EXP 113
20602: PUSH
20603: EMPTY
20604: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
20605: LD_ADDR_EXP 88
20609: PUSH
20610: EMPTY
20611: ST_TO_ADDR
// mc_building_repairs := [ ] ;
20612: LD_ADDR_EXP 89
20616: PUSH
20617: EMPTY
20618: ST_TO_ADDR
// mc_need_heal := [ ] ;
20619: LD_ADDR_EXP 90
20623: PUSH
20624: EMPTY
20625: ST_TO_ADDR
// mc_healers := [ ] ;
20626: LD_ADDR_EXP 91
20630: PUSH
20631: EMPTY
20632: ST_TO_ADDR
// mc_build_list := [ ] ;
20633: LD_ADDR_EXP 92
20637: PUSH
20638: EMPTY
20639: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
20640: LD_ADDR_EXP 119
20644: PUSH
20645: EMPTY
20646: ST_TO_ADDR
// mc_builders := [ ] ;
20647: LD_ADDR_EXP 93
20651: PUSH
20652: EMPTY
20653: ST_TO_ADDR
// mc_construct_list := [ ] ;
20654: LD_ADDR_EXP 94
20658: PUSH
20659: EMPTY
20660: ST_TO_ADDR
// mc_turret_list := [ ] ;
20661: LD_ADDR_EXP 95
20665: PUSH
20666: EMPTY
20667: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
20668: LD_ADDR_EXP 96
20672: PUSH
20673: EMPTY
20674: ST_TO_ADDR
// mc_miners := [ ] ;
20675: LD_ADDR_EXP 101
20679: PUSH
20680: EMPTY
20681: ST_TO_ADDR
// mc_mines := [ ] ;
20682: LD_ADDR_EXP 100
20686: PUSH
20687: EMPTY
20688: ST_TO_ADDR
// mc_minefields := [ ] ;
20689: LD_ADDR_EXP 102
20693: PUSH
20694: EMPTY
20695: ST_TO_ADDR
// mc_crates := [ ] ;
20696: LD_ADDR_EXP 103
20700: PUSH
20701: EMPTY
20702: ST_TO_ADDR
// mc_crates_collector := [ ] ;
20703: LD_ADDR_EXP 104
20707: PUSH
20708: EMPTY
20709: ST_TO_ADDR
// mc_crates_area := [ ] ;
20710: LD_ADDR_EXP 105
20714: PUSH
20715: EMPTY
20716: ST_TO_ADDR
// mc_vehicles := [ ] ;
20717: LD_ADDR_EXP 106
20721: PUSH
20722: EMPTY
20723: ST_TO_ADDR
// mc_attack := [ ] ;
20724: LD_ADDR_EXP 107
20728: PUSH
20729: EMPTY
20730: ST_TO_ADDR
// mc_produce := [ ] ;
20731: LD_ADDR_EXP 108
20735: PUSH
20736: EMPTY
20737: ST_TO_ADDR
// mc_defender := [ ] ;
20738: LD_ADDR_EXP 109
20742: PUSH
20743: EMPTY
20744: ST_TO_ADDR
// mc_parking := [ ] ;
20745: LD_ADDR_EXP 111
20749: PUSH
20750: EMPTY
20751: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
20752: LD_ADDR_EXP 97
20756: PUSH
20757: EMPTY
20758: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
20759: LD_ADDR_EXP 99
20763: PUSH
20764: EMPTY
20765: ST_TO_ADDR
// mc_scan := [ ] ;
20766: LD_ADDR_EXP 110
20770: PUSH
20771: EMPTY
20772: ST_TO_ADDR
// mc_scan_area := [ ] ;
20773: LD_ADDR_EXP 112
20777: PUSH
20778: EMPTY
20779: ST_TO_ADDR
// mc_tech := [ ] ;
20780: LD_ADDR_EXP 114
20784: PUSH
20785: EMPTY
20786: ST_TO_ADDR
// mc_class := [ ] ;
20787: LD_ADDR_EXP 128
20791: PUSH
20792: EMPTY
20793: ST_TO_ADDR
// mc_class_case_use := [ ] ;
20794: LD_ADDR_EXP 129
20798: PUSH
20799: EMPTY
20800: ST_TO_ADDR
// end ;
20801: LD_VAR 0 1
20805: RET
// export function MC_Kill ( base ) ; begin
20806: LD_INT 0
20808: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
20809: LD_ADDR_EXP 87
20813: PUSH
20814: LD_EXP 87
20818: PPUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: EMPTY
20825: PPUSH
20826: CALL_OW 1
20830: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
20831: LD_ADDR_EXP 88
20835: PUSH
20836: LD_EXP 88
20840: PPUSH
20841: LD_VAR 0 1
20845: PPUSH
20846: EMPTY
20847: PPUSH
20848: CALL_OW 1
20852: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
20853: LD_ADDR_EXP 89
20857: PUSH
20858: LD_EXP 89
20862: PPUSH
20863: LD_VAR 0 1
20867: PPUSH
20868: EMPTY
20869: PPUSH
20870: CALL_OW 1
20874: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
20875: LD_ADDR_EXP 90
20879: PUSH
20880: LD_EXP 90
20884: PPUSH
20885: LD_VAR 0 1
20889: PPUSH
20890: EMPTY
20891: PPUSH
20892: CALL_OW 1
20896: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
20897: LD_ADDR_EXP 91
20901: PUSH
20902: LD_EXP 91
20906: PPUSH
20907: LD_VAR 0 1
20911: PPUSH
20912: EMPTY
20913: PPUSH
20914: CALL_OW 1
20918: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
20919: LD_ADDR_EXP 92
20923: PUSH
20924: LD_EXP 92
20928: PPUSH
20929: LD_VAR 0 1
20933: PPUSH
20934: EMPTY
20935: PPUSH
20936: CALL_OW 1
20940: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
20941: LD_ADDR_EXP 93
20945: PUSH
20946: LD_EXP 93
20950: PPUSH
20951: LD_VAR 0 1
20955: PPUSH
20956: EMPTY
20957: PPUSH
20958: CALL_OW 1
20962: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
20963: LD_ADDR_EXP 94
20967: PUSH
20968: LD_EXP 94
20972: PPUSH
20973: LD_VAR 0 1
20977: PPUSH
20978: EMPTY
20979: PPUSH
20980: CALL_OW 1
20984: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
20985: LD_ADDR_EXP 95
20989: PUSH
20990: LD_EXP 95
20994: PPUSH
20995: LD_VAR 0 1
20999: PPUSH
21000: EMPTY
21001: PPUSH
21002: CALL_OW 1
21006: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
21007: LD_ADDR_EXP 96
21011: PUSH
21012: LD_EXP 96
21016: PPUSH
21017: LD_VAR 0 1
21021: PPUSH
21022: EMPTY
21023: PPUSH
21024: CALL_OW 1
21028: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
21029: LD_ADDR_EXP 97
21033: PUSH
21034: LD_EXP 97
21038: PPUSH
21039: LD_VAR 0 1
21043: PPUSH
21044: EMPTY
21045: PPUSH
21046: CALL_OW 1
21050: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
21051: LD_ADDR_EXP 98
21055: PUSH
21056: LD_EXP 98
21060: PPUSH
21061: LD_VAR 0 1
21065: PPUSH
21066: LD_INT 0
21068: PPUSH
21069: CALL_OW 1
21073: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
21074: LD_ADDR_EXP 99
21078: PUSH
21079: LD_EXP 99
21083: PPUSH
21084: LD_VAR 0 1
21088: PPUSH
21089: EMPTY
21090: PPUSH
21091: CALL_OW 1
21095: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
21096: LD_ADDR_EXP 100
21100: PUSH
21101: LD_EXP 100
21105: PPUSH
21106: LD_VAR 0 1
21110: PPUSH
21111: EMPTY
21112: PPUSH
21113: CALL_OW 1
21117: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
21118: LD_ADDR_EXP 101
21122: PUSH
21123: LD_EXP 101
21127: PPUSH
21128: LD_VAR 0 1
21132: PPUSH
21133: EMPTY
21134: PPUSH
21135: CALL_OW 1
21139: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
21140: LD_ADDR_EXP 102
21144: PUSH
21145: LD_EXP 102
21149: PPUSH
21150: LD_VAR 0 1
21154: PPUSH
21155: EMPTY
21156: PPUSH
21157: CALL_OW 1
21161: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
21162: LD_ADDR_EXP 103
21166: PUSH
21167: LD_EXP 103
21171: PPUSH
21172: LD_VAR 0 1
21176: PPUSH
21177: EMPTY
21178: PPUSH
21179: CALL_OW 1
21183: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
21184: LD_ADDR_EXP 104
21188: PUSH
21189: LD_EXP 104
21193: PPUSH
21194: LD_VAR 0 1
21198: PPUSH
21199: EMPTY
21200: PPUSH
21201: CALL_OW 1
21205: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
21206: LD_ADDR_EXP 105
21210: PUSH
21211: LD_EXP 105
21215: PPUSH
21216: LD_VAR 0 1
21220: PPUSH
21221: EMPTY
21222: PPUSH
21223: CALL_OW 1
21227: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
21228: LD_ADDR_EXP 106
21232: PUSH
21233: LD_EXP 106
21237: PPUSH
21238: LD_VAR 0 1
21242: PPUSH
21243: EMPTY
21244: PPUSH
21245: CALL_OW 1
21249: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
21250: LD_ADDR_EXP 107
21254: PUSH
21255: LD_EXP 107
21259: PPUSH
21260: LD_VAR 0 1
21264: PPUSH
21265: EMPTY
21266: PPUSH
21267: CALL_OW 1
21271: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
21272: LD_ADDR_EXP 108
21276: PUSH
21277: LD_EXP 108
21281: PPUSH
21282: LD_VAR 0 1
21286: PPUSH
21287: EMPTY
21288: PPUSH
21289: CALL_OW 1
21293: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
21294: LD_ADDR_EXP 109
21298: PUSH
21299: LD_EXP 109
21303: PPUSH
21304: LD_VAR 0 1
21308: PPUSH
21309: EMPTY
21310: PPUSH
21311: CALL_OW 1
21315: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
21316: LD_ADDR_EXP 110
21320: PUSH
21321: LD_EXP 110
21325: PPUSH
21326: LD_VAR 0 1
21330: PPUSH
21331: EMPTY
21332: PPUSH
21333: CALL_OW 1
21337: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
21338: LD_ADDR_EXP 111
21342: PUSH
21343: LD_EXP 111
21347: PPUSH
21348: LD_VAR 0 1
21352: PPUSH
21353: EMPTY
21354: PPUSH
21355: CALL_OW 1
21359: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
21360: LD_ADDR_EXP 112
21364: PUSH
21365: LD_EXP 112
21369: PPUSH
21370: LD_VAR 0 1
21374: PPUSH
21375: EMPTY
21376: PPUSH
21377: CALL_OW 1
21381: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
21382: LD_ADDR_EXP 114
21386: PUSH
21387: LD_EXP 114
21391: PPUSH
21392: LD_VAR 0 1
21396: PPUSH
21397: EMPTY
21398: PPUSH
21399: CALL_OW 1
21403: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
21404: LD_ADDR_EXP 116
21408: PUSH
21409: LD_EXP 116
21413: PPUSH
21414: LD_VAR 0 1
21418: PPUSH
21419: EMPTY
21420: PPUSH
21421: CALL_OW 1
21425: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
21426: LD_ADDR_EXP 117
21430: PUSH
21431: LD_EXP 117
21435: PPUSH
21436: LD_VAR 0 1
21440: PPUSH
21441: EMPTY
21442: PPUSH
21443: CALL_OW 1
21447: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
21448: LD_ADDR_EXP 118
21452: PUSH
21453: LD_EXP 118
21457: PPUSH
21458: LD_VAR 0 1
21462: PPUSH
21463: EMPTY
21464: PPUSH
21465: CALL_OW 1
21469: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
21470: LD_ADDR_EXP 119
21474: PUSH
21475: LD_EXP 119
21479: PPUSH
21480: LD_VAR 0 1
21484: PPUSH
21485: EMPTY
21486: PPUSH
21487: CALL_OW 1
21491: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
21492: LD_ADDR_EXP 120
21496: PUSH
21497: LD_EXP 120
21501: PPUSH
21502: LD_VAR 0 1
21506: PPUSH
21507: EMPTY
21508: PPUSH
21509: CALL_OW 1
21513: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
21514: LD_ADDR_EXP 121
21518: PUSH
21519: LD_EXP 121
21523: PPUSH
21524: LD_VAR 0 1
21528: PPUSH
21529: EMPTY
21530: PPUSH
21531: CALL_OW 1
21535: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
21536: LD_ADDR_EXP 122
21540: PUSH
21541: LD_EXP 122
21545: PPUSH
21546: LD_VAR 0 1
21550: PPUSH
21551: EMPTY
21552: PPUSH
21553: CALL_OW 1
21557: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
21558: LD_ADDR_EXP 123
21562: PUSH
21563: LD_EXP 123
21567: PPUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: EMPTY
21574: PPUSH
21575: CALL_OW 1
21579: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
21580: LD_ADDR_EXP 124
21584: PUSH
21585: LD_EXP 124
21589: PPUSH
21590: LD_VAR 0 1
21594: PPUSH
21595: EMPTY
21596: PPUSH
21597: CALL_OW 1
21601: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
21602: LD_ADDR_EXP 125
21606: PUSH
21607: LD_EXP 125
21611: PPUSH
21612: LD_VAR 0 1
21616: PPUSH
21617: EMPTY
21618: PPUSH
21619: CALL_OW 1
21623: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
21624: LD_ADDR_EXP 126
21628: PUSH
21629: LD_EXP 126
21633: PPUSH
21634: LD_VAR 0 1
21638: PPUSH
21639: EMPTY
21640: PPUSH
21641: CALL_OW 1
21645: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
21646: LD_ADDR_EXP 127
21650: PUSH
21651: LD_EXP 127
21655: PPUSH
21656: LD_VAR 0 1
21660: PPUSH
21661: EMPTY
21662: PPUSH
21663: CALL_OW 1
21667: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
21668: LD_ADDR_EXP 128
21672: PUSH
21673: LD_EXP 128
21677: PPUSH
21678: LD_VAR 0 1
21682: PPUSH
21683: EMPTY
21684: PPUSH
21685: CALL_OW 1
21689: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
21690: LD_ADDR_EXP 129
21694: PUSH
21695: LD_EXP 129
21699: PPUSH
21700: LD_VAR 0 1
21704: PPUSH
21705: LD_INT 0
21707: PPUSH
21708: CALL_OW 1
21712: ST_TO_ADDR
// end ;
21713: LD_VAR 0 2
21717: RET
// export function MC_Add ( side , units ) ; var base ; begin
21718: LD_INT 0
21720: PPUSH
21721: PPUSH
// base := mc_bases + 1 ;
21722: LD_ADDR_VAR 0 4
21726: PUSH
21727: LD_EXP 87
21731: PUSH
21732: LD_INT 1
21734: PLUS
21735: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
21736: LD_ADDR_EXP 113
21740: PUSH
21741: LD_EXP 113
21745: PPUSH
21746: LD_VAR 0 4
21750: PPUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 1
21760: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
21761: LD_ADDR_EXP 87
21765: PUSH
21766: LD_EXP 87
21770: PPUSH
21771: LD_VAR 0 4
21775: PPUSH
21776: LD_VAR 0 2
21780: PPUSH
21781: CALL_OW 1
21785: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
21786: LD_ADDR_EXP 88
21790: PUSH
21791: LD_EXP 88
21795: PPUSH
21796: LD_VAR 0 4
21800: PPUSH
21801: EMPTY
21802: PPUSH
21803: CALL_OW 1
21807: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
21808: LD_ADDR_EXP 89
21812: PUSH
21813: LD_EXP 89
21817: PPUSH
21818: LD_VAR 0 4
21822: PPUSH
21823: EMPTY
21824: PPUSH
21825: CALL_OW 1
21829: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
21830: LD_ADDR_EXP 90
21834: PUSH
21835: LD_EXP 90
21839: PPUSH
21840: LD_VAR 0 4
21844: PPUSH
21845: EMPTY
21846: PPUSH
21847: CALL_OW 1
21851: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
21852: LD_ADDR_EXP 91
21856: PUSH
21857: LD_EXP 91
21861: PPUSH
21862: LD_VAR 0 4
21866: PPUSH
21867: EMPTY
21868: PPUSH
21869: CALL_OW 1
21873: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
21874: LD_ADDR_EXP 92
21878: PUSH
21879: LD_EXP 92
21883: PPUSH
21884: LD_VAR 0 4
21888: PPUSH
21889: EMPTY
21890: PPUSH
21891: CALL_OW 1
21895: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
21896: LD_ADDR_EXP 93
21900: PUSH
21901: LD_EXP 93
21905: PPUSH
21906: LD_VAR 0 4
21910: PPUSH
21911: EMPTY
21912: PPUSH
21913: CALL_OW 1
21917: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
21918: LD_ADDR_EXP 94
21922: PUSH
21923: LD_EXP 94
21927: PPUSH
21928: LD_VAR 0 4
21932: PPUSH
21933: EMPTY
21934: PPUSH
21935: CALL_OW 1
21939: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
21940: LD_ADDR_EXP 95
21944: PUSH
21945: LD_EXP 95
21949: PPUSH
21950: LD_VAR 0 4
21954: PPUSH
21955: EMPTY
21956: PPUSH
21957: CALL_OW 1
21961: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
21962: LD_ADDR_EXP 96
21966: PUSH
21967: LD_EXP 96
21971: PPUSH
21972: LD_VAR 0 4
21976: PPUSH
21977: EMPTY
21978: PPUSH
21979: CALL_OW 1
21983: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
21984: LD_ADDR_EXP 97
21988: PUSH
21989: LD_EXP 97
21993: PPUSH
21994: LD_VAR 0 4
21998: PPUSH
21999: EMPTY
22000: PPUSH
22001: CALL_OW 1
22005: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
22006: LD_ADDR_EXP 98
22010: PUSH
22011: LD_EXP 98
22015: PPUSH
22016: LD_VAR 0 4
22020: PPUSH
22021: LD_INT 0
22023: PPUSH
22024: CALL_OW 1
22028: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
22029: LD_ADDR_EXP 99
22033: PUSH
22034: LD_EXP 99
22038: PPUSH
22039: LD_VAR 0 4
22043: PPUSH
22044: EMPTY
22045: PPUSH
22046: CALL_OW 1
22050: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
22051: LD_ADDR_EXP 100
22055: PUSH
22056: LD_EXP 100
22060: PPUSH
22061: LD_VAR 0 4
22065: PPUSH
22066: EMPTY
22067: PPUSH
22068: CALL_OW 1
22072: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
22073: LD_ADDR_EXP 101
22077: PUSH
22078: LD_EXP 101
22082: PPUSH
22083: LD_VAR 0 4
22087: PPUSH
22088: EMPTY
22089: PPUSH
22090: CALL_OW 1
22094: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
22095: LD_ADDR_EXP 102
22099: PUSH
22100: LD_EXP 102
22104: PPUSH
22105: LD_VAR 0 4
22109: PPUSH
22110: EMPTY
22111: PPUSH
22112: CALL_OW 1
22116: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
22117: LD_ADDR_EXP 103
22121: PUSH
22122: LD_EXP 103
22126: PPUSH
22127: LD_VAR 0 4
22131: PPUSH
22132: EMPTY
22133: PPUSH
22134: CALL_OW 1
22138: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
22139: LD_ADDR_EXP 104
22143: PUSH
22144: LD_EXP 104
22148: PPUSH
22149: LD_VAR 0 4
22153: PPUSH
22154: EMPTY
22155: PPUSH
22156: CALL_OW 1
22160: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
22161: LD_ADDR_EXP 105
22165: PUSH
22166: LD_EXP 105
22170: PPUSH
22171: LD_VAR 0 4
22175: PPUSH
22176: EMPTY
22177: PPUSH
22178: CALL_OW 1
22182: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
22183: LD_ADDR_EXP 106
22187: PUSH
22188: LD_EXP 106
22192: PPUSH
22193: LD_VAR 0 4
22197: PPUSH
22198: EMPTY
22199: PPUSH
22200: CALL_OW 1
22204: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
22205: LD_ADDR_EXP 107
22209: PUSH
22210: LD_EXP 107
22214: PPUSH
22215: LD_VAR 0 4
22219: PPUSH
22220: EMPTY
22221: PPUSH
22222: CALL_OW 1
22226: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
22227: LD_ADDR_EXP 108
22231: PUSH
22232: LD_EXP 108
22236: PPUSH
22237: LD_VAR 0 4
22241: PPUSH
22242: EMPTY
22243: PPUSH
22244: CALL_OW 1
22248: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
22249: LD_ADDR_EXP 109
22253: PUSH
22254: LD_EXP 109
22258: PPUSH
22259: LD_VAR 0 4
22263: PPUSH
22264: EMPTY
22265: PPUSH
22266: CALL_OW 1
22270: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
22271: LD_ADDR_EXP 110
22275: PUSH
22276: LD_EXP 110
22280: PPUSH
22281: LD_VAR 0 4
22285: PPUSH
22286: EMPTY
22287: PPUSH
22288: CALL_OW 1
22292: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
22293: LD_ADDR_EXP 111
22297: PUSH
22298: LD_EXP 111
22302: PPUSH
22303: LD_VAR 0 4
22307: PPUSH
22308: EMPTY
22309: PPUSH
22310: CALL_OW 1
22314: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
22315: LD_ADDR_EXP 112
22319: PUSH
22320: LD_EXP 112
22324: PPUSH
22325: LD_VAR 0 4
22329: PPUSH
22330: EMPTY
22331: PPUSH
22332: CALL_OW 1
22336: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
22337: LD_ADDR_EXP 114
22341: PUSH
22342: LD_EXP 114
22346: PPUSH
22347: LD_VAR 0 4
22351: PPUSH
22352: EMPTY
22353: PPUSH
22354: CALL_OW 1
22358: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
22359: LD_ADDR_EXP 116
22363: PUSH
22364: LD_EXP 116
22368: PPUSH
22369: LD_VAR 0 4
22373: PPUSH
22374: EMPTY
22375: PPUSH
22376: CALL_OW 1
22380: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
22381: LD_ADDR_EXP 117
22385: PUSH
22386: LD_EXP 117
22390: PPUSH
22391: LD_VAR 0 4
22395: PPUSH
22396: EMPTY
22397: PPUSH
22398: CALL_OW 1
22402: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
22403: LD_ADDR_EXP 118
22407: PUSH
22408: LD_EXP 118
22412: PPUSH
22413: LD_VAR 0 4
22417: PPUSH
22418: EMPTY
22419: PPUSH
22420: CALL_OW 1
22424: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
22425: LD_ADDR_EXP 119
22429: PUSH
22430: LD_EXP 119
22434: PPUSH
22435: LD_VAR 0 4
22439: PPUSH
22440: EMPTY
22441: PPUSH
22442: CALL_OW 1
22446: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
22447: LD_ADDR_EXP 120
22451: PUSH
22452: LD_EXP 120
22456: PPUSH
22457: LD_VAR 0 4
22461: PPUSH
22462: EMPTY
22463: PPUSH
22464: CALL_OW 1
22468: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
22469: LD_ADDR_EXP 121
22473: PUSH
22474: LD_EXP 121
22478: PPUSH
22479: LD_VAR 0 4
22483: PPUSH
22484: EMPTY
22485: PPUSH
22486: CALL_OW 1
22490: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
22491: LD_ADDR_EXP 122
22495: PUSH
22496: LD_EXP 122
22500: PPUSH
22501: LD_VAR 0 4
22505: PPUSH
22506: EMPTY
22507: PPUSH
22508: CALL_OW 1
22512: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
22513: LD_ADDR_EXP 123
22517: PUSH
22518: LD_EXP 123
22522: PPUSH
22523: LD_VAR 0 4
22527: PPUSH
22528: EMPTY
22529: PPUSH
22530: CALL_OW 1
22534: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
22535: LD_ADDR_EXP 124
22539: PUSH
22540: LD_EXP 124
22544: PPUSH
22545: LD_VAR 0 4
22549: PPUSH
22550: EMPTY
22551: PPUSH
22552: CALL_OW 1
22556: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
22557: LD_ADDR_EXP 125
22561: PUSH
22562: LD_EXP 125
22566: PPUSH
22567: LD_VAR 0 4
22571: PPUSH
22572: EMPTY
22573: PPUSH
22574: CALL_OW 1
22578: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
22579: LD_ADDR_EXP 126
22583: PUSH
22584: LD_EXP 126
22588: PPUSH
22589: LD_VAR 0 4
22593: PPUSH
22594: EMPTY
22595: PPUSH
22596: CALL_OW 1
22600: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
22601: LD_ADDR_EXP 127
22605: PUSH
22606: LD_EXP 127
22610: PPUSH
22611: LD_VAR 0 4
22615: PPUSH
22616: EMPTY
22617: PPUSH
22618: CALL_OW 1
22622: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
22623: LD_ADDR_EXP 128
22627: PUSH
22628: LD_EXP 128
22632: PPUSH
22633: LD_VAR 0 4
22637: PPUSH
22638: EMPTY
22639: PPUSH
22640: CALL_OW 1
22644: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
22645: LD_ADDR_EXP 129
22649: PUSH
22650: LD_EXP 129
22654: PPUSH
22655: LD_VAR 0 4
22659: PPUSH
22660: LD_INT 0
22662: PPUSH
22663: CALL_OW 1
22667: ST_TO_ADDR
// result := base ;
22668: LD_ADDR_VAR 0 3
22672: PUSH
22673: LD_VAR 0 4
22677: ST_TO_ADDR
// end ;
22678: LD_VAR 0 3
22682: RET
// export function MC_Start ( ) ; var i ; begin
22683: LD_INT 0
22685: PPUSH
22686: PPUSH
// for i = 1 to mc_bases do
22687: LD_ADDR_VAR 0 2
22691: PUSH
22692: DOUBLE
22693: LD_INT 1
22695: DEC
22696: ST_TO_ADDR
22697: LD_EXP 87
22701: PUSH
22702: FOR_TO
22703: IFFALSE 23780
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
22705: LD_ADDR_EXP 87
22709: PUSH
22710: LD_EXP 87
22714: PPUSH
22715: LD_VAR 0 2
22719: PPUSH
22720: LD_EXP 87
22724: PUSH
22725: LD_VAR 0 2
22729: ARRAY
22730: PUSH
22731: LD_INT 0
22733: DIFF
22734: PPUSH
22735: CALL_OW 1
22739: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
22740: LD_ADDR_EXP 88
22744: PUSH
22745: LD_EXP 88
22749: PPUSH
22750: LD_VAR 0 2
22754: PPUSH
22755: EMPTY
22756: PPUSH
22757: CALL_OW 1
22761: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
22762: LD_ADDR_EXP 89
22766: PUSH
22767: LD_EXP 89
22771: PPUSH
22772: LD_VAR 0 2
22776: PPUSH
22777: EMPTY
22778: PPUSH
22779: CALL_OW 1
22783: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
22784: LD_ADDR_EXP 90
22788: PUSH
22789: LD_EXP 90
22793: PPUSH
22794: LD_VAR 0 2
22798: PPUSH
22799: EMPTY
22800: PPUSH
22801: CALL_OW 1
22805: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
22806: LD_ADDR_EXP 91
22810: PUSH
22811: LD_EXP 91
22815: PPUSH
22816: LD_VAR 0 2
22820: PPUSH
22821: EMPTY
22822: PUSH
22823: EMPTY
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PPUSH
22829: CALL_OW 1
22833: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
22834: LD_ADDR_EXP 92
22838: PUSH
22839: LD_EXP 92
22843: PPUSH
22844: LD_VAR 0 2
22848: PPUSH
22849: EMPTY
22850: PPUSH
22851: CALL_OW 1
22855: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
22856: LD_ADDR_EXP 119
22860: PUSH
22861: LD_EXP 119
22865: PPUSH
22866: LD_VAR 0 2
22870: PPUSH
22871: EMPTY
22872: PPUSH
22873: CALL_OW 1
22877: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
22878: LD_ADDR_EXP 93
22882: PUSH
22883: LD_EXP 93
22887: PPUSH
22888: LD_VAR 0 2
22892: PPUSH
22893: EMPTY
22894: PPUSH
22895: CALL_OW 1
22899: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
22900: LD_ADDR_EXP 94
22904: PUSH
22905: LD_EXP 94
22909: PPUSH
22910: LD_VAR 0 2
22914: PPUSH
22915: EMPTY
22916: PPUSH
22917: CALL_OW 1
22921: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
22922: LD_ADDR_EXP 95
22926: PUSH
22927: LD_EXP 95
22931: PPUSH
22932: LD_VAR 0 2
22936: PPUSH
22937: LD_EXP 87
22941: PUSH
22942: LD_VAR 0 2
22946: ARRAY
22947: PPUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 30
22953: PUSH
22954: LD_INT 32
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 30
22963: PUSH
22964: LD_INT 33
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: PPUSH
22976: CALL_OW 72
22980: PPUSH
22981: CALL_OW 1
22985: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
22986: LD_ADDR_EXP 96
22990: PUSH
22991: LD_EXP 96
22995: PPUSH
22996: LD_VAR 0 2
23000: PPUSH
23001: LD_EXP 87
23005: PUSH
23006: LD_VAR 0 2
23010: ARRAY
23011: PPUSH
23012: LD_INT 2
23014: PUSH
23015: LD_INT 30
23017: PUSH
23018: LD_INT 32
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 30
23027: PUSH
23028: LD_INT 31
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 58
23042: PUSH
23043: EMPTY
23044: LIST
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PPUSH
23050: CALL_OW 72
23054: PPUSH
23055: CALL_OW 1
23059: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
23060: LD_ADDR_EXP 97
23064: PUSH
23065: LD_EXP 97
23069: PPUSH
23070: LD_VAR 0 2
23074: PPUSH
23075: EMPTY
23076: PPUSH
23077: CALL_OW 1
23081: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
23082: LD_ADDR_EXP 101
23086: PUSH
23087: LD_EXP 101
23091: PPUSH
23092: LD_VAR 0 2
23096: PPUSH
23097: EMPTY
23098: PPUSH
23099: CALL_OW 1
23103: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
23104: LD_ADDR_EXP 100
23108: PUSH
23109: LD_EXP 100
23113: PPUSH
23114: LD_VAR 0 2
23118: PPUSH
23119: EMPTY
23120: PPUSH
23121: CALL_OW 1
23125: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
23126: LD_ADDR_EXP 102
23130: PUSH
23131: LD_EXP 102
23135: PPUSH
23136: LD_VAR 0 2
23140: PPUSH
23141: EMPTY
23142: PPUSH
23143: CALL_OW 1
23147: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
23148: LD_ADDR_EXP 103
23152: PUSH
23153: LD_EXP 103
23157: PPUSH
23158: LD_VAR 0 2
23162: PPUSH
23163: EMPTY
23164: PPUSH
23165: CALL_OW 1
23169: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
23170: LD_ADDR_EXP 104
23174: PUSH
23175: LD_EXP 104
23179: PPUSH
23180: LD_VAR 0 2
23184: PPUSH
23185: EMPTY
23186: PPUSH
23187: CALL_OW 1
23191: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
23192: LD_ADDR_EXP 105
23196: PUSH
23197: LD_EXP 105
23201: PPUSH
23202: LD_VAR 0 2
23206: PPUSH
23207: EMPTY
23208: PPUSH
23209: CALL_OW 1
23213: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
23214: LD_ADDR_EXP 106
23218: PUSH
23219: LD_EXP 106
23223: PPUSH
23224: LD_VAR 0 2
23228: PPUSH
23229: EMPTY
23230: PPUSH
23231: CALL_OW 1
23235: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
23236: LD_ADDR_EXP 107
23240: PUSH
23241: LD_EXP 107
23245: PPUSH
23246: LD_VAR 0 2
23250: PPUSH
23251: EMPTY
23252: PPUSH
23253: CALL_OW 1
23257: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
23258: LD_ADDR_EXP 108
23262: PUSH
23263: LD_EXP 108
23267: PPUSH
23268: LD_VAR 0 2
23272: PPUSH
23273: EMPTY
23274: PPUSH
23275: CALL_OW 1
23279: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
23280: LD_ADDR_EXP 109
23284: PUSH
23285: LD_EXP 109
23289: PPUSH
23290: LD_VAR 0 2
23294: PPUSH
23295: EMPTY
23296: PPUSH
23297: CALL_OW 1
23301: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
23302: LD_ADDR_EXP 98
23306: PUSH
23307: LD_EXP 98
23311: PPUSH
23312: LD_VAR 0 2
23316: PPUSH
23317: LD_INT 0
23319: PPUSH
23320: CALL_OW 1
23324: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
23325: LD_ADDR_EXP 111
23329: PUSH
23330: LD_EXP 111
23334: PPUSH
23335: LD_VAR 0 2
23339: PPUSH
23340: LD_INT 0
23342: PPUSH
23343: CALL_OW 1
23347: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
23348: LD_ADDR_EXP 99
23352: PUSH
23353: LD_EXP 99
23357: PPUSH
23358: LD_VAR 0 2
23362: PPUSH
23363: EMPTY
23364: PPUSH
23365: CALL_OW 1
23369: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
23370: LD_ADDR_EXP 110
23374: PUSH
23375: LD_EXP 110
23379: PPUSH
23380: LD_VAR 0 2
23384: PPUSH
23385: LD_INT 0
23387: PPUSH
23388: CALL_OW 1
23392: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
23393: LD_ADDR_EXP 112
23397: PUSH
23398: LD_EXP 112
23402: PPUSH
23403: LD_VAR 0 2
23407: PPUSH
23408: EMPTY
23409: PPUSH
23410: CALL_OW 1
23414: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
23415: LD_ADDR_EXP 115
23419: PUSH
23420: LD_EXP 115
23424: PPUSH
23425: LD_VAR 0 2
23429: PPUSH
23430: LD_INT 0
23432: PPUSH
23433: CALL_OW 1
23437: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
23438: LD_ADDR_EXP 116
23442: PUSH
23443: LD_EXP 116
23447: PPUSH
23448: LD_VAR 0 2
23452: PPUSH
23453: EMPTY
23454: PPUSH
23455: CALL_OW 1
23459: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
23460: LD_ADDR_EXP 117
23464: PUSH
23465: LD_EXP 117
23469: PPUSH
23470: LD_VAR 0 2
23474: PPUSH
23475: EMPTY
23476: PPUSH
23477: CALL_OW 1
23481: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
23482: LD_ADDR_EXP 118
23486: PUSH
23487: LD_EXP 118
23491: PPUSH
23492: LD_VAR 0 2
23496: PPUSH
23497: EMPTY
23498: PPUSH
23499: CALL_OW 1
23503: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
23504: LD_ADDR_EXP 120
23508: PUSH
23509: LD_EXP 120
23513: PPUSH
23514: LD_VAR 0 2
23518: PPUSH
23519: LD_EXP 87
23523: PUSH
23524: LD_VAR 0 2
23528: ARRAY
23529: PPUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 30
23535: PUSH
23536: LD_INT 6
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 30
23545: PUSH
23546: LD_INT 7
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 30
23555: PUSH
23556: LD_INT 8
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: PPUSH
23569: CALL_OW 72
23573: PPUSH
23574: CALL_OW 1
23578: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
23579: LD_ADDR_EXP 121
23583: PUSH
23584: LD_EXP 121
23588: PPUSH
23589: LD_VAR 0 2
23593: PPUSH
23594: EMPTY
23595: PPUSH
23596: CALL_OW 1
23600: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
23601: LD_ADDR_EXP 122
23605: PUSH
23606: LD_EXP 122
23610: PPUSH
23611: LD_VAR 0 2
23615: PPUSH
23616: EMPTY
23617: PPUSH
23618: CALL_OW 1
23622: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
23623: LD_ADDR_EXP 123
23627: PUSH
23628: LD_EXP 123
23632: PPUSH
23633: LD_VAR 0 2
23637: PPUSH
23638: EMPTY
23639: PPUSH
23640: CALL_OW 1
23644: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
23645: LD_ADDR_EXP 124
23649: PUSH
23650: LD_EXP 124
23654: PPUSH
23655: LD_VAR 0 2
23659: PPUSH
23660: EMPTY
23661: PPUSH
23662: CALL_OW 1
23666: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
23667: LD_ADDR_EXP 125
23671: PUSH
23672: LD_EXP 125
23676: PPUSH
23677: LD_VAR 0 2
23681: PPUSH
23682: EMPTY
23683: PPUSH
23684: CALL_OW 1
23688: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
23689: LD_ADDR_EXP 126
23693: PUSH
23694: LD_EXP 126
23698: PPUSH
23699: LD_VAR 0 2
23703: PPUSH
23704: EMPTY
23705: PPUSH
23706: CALL_OW 1
23710: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
23711: LD_ADDR_EXP 127
23715: PUSH
23716: LD_EXP 127
23720: PPUSH
23721: LD_VAR 0 2
23725: PPUSH
23726: EMPTY
23727: PPUSH
23728: CALL_OW 1
23732: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
23733: LD_ADDR_EXP 128
23737: PUSH
23738: LD_EXP 128
23742: PPUSH
23743: LD_VAR 0 2
23747: PPUSH
23748: EMPTY
23749: PPUSH
23750: CALL_OW 1
23754: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
23755: LD_ADDR_EXP 129
23759: PUSH
23760: LD_EXP 129
23764: PPUSH
23765: LD_VAR 0 2
23769: PPUSH
23770: LD_INT 0
23772: PPUSH
23773: CALL_OW 1
23777: ST_TO_ADDR
// end ;
23778: GO 22702
23780: POP
23781: POP
// MC_InitSides ( ) ;
23782: CALL 24068 0 0
// MC_InitResearch ( ) ;
23786: CALL 23807 0 0
// CustomInitMacro ( ) ;
23790: CALL 213 0 0
// skirmish := true ;
23794: LD_ADDR_EXP 85
23798: PUSH
23799: LD_INT 1
23801: ST_TO_ADDR
// end ;
23802: LD_VAR 0 1
23806: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
23807: LD_INT 0
23809: PPUSH
23810: PPUSH
23811: PPUSH
23812: PPUSH
23813: PPUSH
23814: PPUSH
// if not mc_bases then
23815: LD_EXP 87
23819: NOT
23820: IFFALSE 23824
// exit ;
23822: GO 24063
// for i = 1 to 8 do
23824: LD_ADDR_VAR 0 2
23828: PUSH
23829: DOUBLE
23830: LD_INT 1
23832: DEC
23833: ST_TO_ADDR
23834: LD_INT 8
23836: PUSH
23837: FOR_TO
23838: IFFALSE 23864
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
23840: LD_ADDR_EXP 114
23844: PUSH
23845: LD_EXP 114
23849: PPUSH
23850: LD_VAR 0 2
23854: PPUSH
23855: EMPTY
23856: PPUSH
23857: CALL_OW 1
23861: ST_TO_ADDR
23862: GO 23837
23864: POP
23865: POP
// tmp := [ ] ;
23866: LD_ADDR_VAR 0 5
23870: PUSH
23871: EMPTY
23872: ST_TO_ADDR
// for i = 1 to mc_sides do
23873: LD_ADDR_VAR 0 2
23877: PUSH
23878: DOUBLE
23879: LD_INT 1
23881: DEC
23882: ST_TO_ADDR
23883: LD_EXP 113
23887: PUSH
23888: FOR_TO
23889: IFFALSE 23947
// if not mc_sides [ i ] in tmp then
23891: LD_EXP 113
23895: PUSH
23896: LD_VAR 0 2
23900: ARRAY
23901: PUSH
23902: LD_VAR 0 5
23906: IN
23907: NOT
23908: IFFALSE 23945
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
23910: LD_ADDR_VAR 0 5
23914: PUSH
23915: LD_VAR 0 5
23919: PPUSH
23920: LD_VAR 0 5
23924: PUSH
23925: LD_INT 1
23927: PLUS
23928: PPUSH
23929: LD_EXP 113
23933: PUSH
23934: LD_VAR 0 2
23938: ARRAY
23939: PPUSH
23940: CALL_OW 2
23944: ST_TO_ADDR
23945: GO 23888
23947: POP
23948: POP
// if not tmp then
23949: LD_VAR 0 5
23953: NOT
23954: IFFALSE 23958
// exit ;
23956: GO 24063
// for j in tmp do
23958: LD_ADDR_VAR 0 3
23962: PUSH
23963: LD_VAR 0 5
23967: PUSH
23968: FOR_IN
23969: IFFALSE 24061
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
23971: LD_ADDR_VAR 0 6
23975: PUSH
23976: LD_INT 22
23978: PUSH
23979: LD_VAR 0 3
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PPUSH
23988: CALL_OW 69
23992: ST_TO_ADDR
// if not un then
23993: LD_VAR 0 6
23997: NOT
23998: IFFALSE 24002
// continue ;
24000: GO 23968
// nation := GetNation ( un [ 1 ] ) ;
24002: LD_ADDR_VAR 0 4
24006: PUSH
24007: LD_VAR 0 6
24011: PUSH
24012: LD_INT 1
24014: ARRAY
24015: PPUSH
24016: CALL_OW 248
24020: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
24021: LD_ADDR_EXP 114
24025: PUSH
24026: LD_EXP 114
24030: PPUSH
24031: LD_VAR 0 3
24035: PPUSH
24036: LD_VAR 0 3
24040: PPUSH
24041: LD_VAR 0 4
24045: PPUSH
24046: LD_INT 1
24048: PPUSH
24049: CALL 50673 0 3
24053: PPUSH
24054: CALL_OW 1
24058: ST_TO_ADDR
// end ;
24059: GO 23968
24061: POP
24062: POP
// end ;
24063: LD_VAR 0 1
24067: RET
// export function MC_InitSides ( ) ; var i ; begin
24068: LD_INT 0
24070: PPUSH
24071: PPUSH
// if not mc_bases then
24072: LD_EXP 87
24076: NOT
24077: IFFALSE 24081
// exit ;
24079: GO 24155
// for i = 1 to mc_bases do
24081: LD_ADDR_VAR 0 2
24085: PUSH
24086: DOUBLE
24087: LD_INT 1
24089: DEC
24090: ST_TO_ADDR
24091: LD_EXP 87
24095: PUSH
24096: FOR_TO
24097: IFFALSE 24153
// if mc_bases [ i ] then
24099: LD_EXP 87
24103: PUSH
24104: LD_VAR 0 2
24108: ARRAY
24109: IFFALSE 24151
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
24111: LD_ADDR_EXP 113
24115: PUSH
24116: LD_EXP 113
24120: PPUSH
24121: LD_VAR 0 2
24125: PPUSH
24126: LD_EXP 87
24130: PUSH
24131: LD_VAR 0 2
24135: ARRAY
24136: PUSH
24137: LD_INT 1
24139: ARRAY
24140: PPUSH
24141: CALL_OW 255
24145: PPUSH
24146: CALL_OW 1
24150: ST_TO_ADDR
24151: GO 24096
24153: POP
24154: POP
// end ;
24155: LD_VAR 0 1
24159: RET
// every 0 0$01 trigger skirmish do
24160: LD_EXP 85
24164: IFFALSE 24318
24166: GO 24168
24168: DISABLE
// begin enable ;
24169: ENABLE
// MC_CheckBuildings ( ) ;
24170: CALL 28816 0 0
// MC_CheckPeopleLife ( ) ;
24174: CALL 28941 0 0
// RaiseSailEvent ( 100 ) ;
24178: LD_INT 100
24180: PPUSH
24181: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
24185: LD_INT 103
24187: PPUSH
24188: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
24192: LD_INT 104
24194: PPUSH
24195: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
24199: LD_INT 105
24201: PPUSH
24202: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
24206: LD_INT 106
24208: PPUSH
24209: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
24213: LD_INT 107
24215: PPUSH
24216: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
24220: LD_INT 108
24222: PPUSH
24223: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
24227: LD_INT 109
24229: PPUSH
24230: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
24234: LD_INT 110
24236: PPUSH
24237: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
24241: LD_INT 111
24243: PPUSH
24244: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
24248: LD_INT 112
24250: PPUSH
24251: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
24255: LD_INT 113
24257: PPUSH
24258: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
24262: LD_INT 120
24264: PPUSH
24265: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
24269: LD_INT 121
24271: PPUSH
24272: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
24276: LD_INT 122
24278: PPUSH
24279: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
24283: LD_INT 123
24285: PPUSH
24286: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
24290: LD_INT 124
24292: PPUSH
24293: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
24297: LD_INT 125
24299: PPUSH
24300: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
24304: LD_INT 126
24306: PPUSH
24307: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
24311: LD_INT 200
24313: PPUSH
24314: CALL_OW 427
// end ;
24318: END
// on SailEvent ( event ) do begin if event < 100 then
24319: LD_VAR 0 1
24323: PUSH
24324: LD_INT 100
24326: LESS
24327: IFFALSE 24338
// CustomEvent ( event ) ;
24329: LD_VAR 0 1
24333: PPUSH
24334: CALL 10371 0 1
// if event = 100 then
24338: LD_VAR 0 1
24342: PUSH
24343: LD_INT 100
24345: EQUAL
24346: IFFALSE 24352
// MC_ClassManager ( ) ;
24348: CALL 24744 0 0
// if event = 101 then
24352: LD_VAR 0 1
24356: PUSH
24357: LD_INT 101
24359: EQUAL
24360: IFFALSE 24366
// MC_RepairBuildings ( ) ;
24362: CALL 29537 0 0
// if event = 102 then
24366: LD_VAR 0 1
24370: PUSH
24371: LD_INT 102
24373: EQUAL
24374: IFFALSE 24380
// MC_Heal ( ) ;
24376: CALL 30401 0 0
// if event = 103 then
24380: LD_VAR 0 1
24384: PUSH
24385: LD_INT 103
24387: EQUAL
24388: IFFALSE 24394
// MC_Build ( ) ;
24390: CALL 30823 0 0
// if event = 104 then
24394: LD_VAR 0 1
24398: PUSH
24399: LD_INT 104
24401: EQUAL
24402: IFFALSE 24408
// MC_TurretWeapon ( ) ;
24404: CALL 32436 0 0
// if event = 105 then
24408: LD_VAR 0 1
24412: PUSH
24413: LD_INT 105
24415: EQUAL
24416: IFFALSE 24422
// MC_BuildUpgrade ( ) ;
24418: CALL 31987 0 0
// if event = 106 then
24422: LD_VAR 0 1
24426: PUSH
24427: LD_INT 106
24429: EQUAL
24430: IFFALSE 24436
// MC_PlantMines ( ) ;
24432: CALL 32866 0 0
// if event = 107 then
24436: LD_VAR 0 1
24440: PUSH
24441: LD_INT 107
24443: EQUAL
24444: IFFALSE 24450
// MC_CollectCrates ( ) ;
24446: CALL 33664 0 0
// if event = 108 then
24450: LD_VAR 0 1
24454: PUSH
24455: LD_INT 108
24457: EQUAL
24458: IFFALSE 24464
// MC_LinkRemoteControl ( ) ;
24460: CALL 35440 0 0
// if event = 109 then
24464: LD_VAR 0 1
24468: PUSH
24469: LD_INT 109
24471: EQUAL
24472: IFFALSE 24478
// MC_ProduceVehicle ( ) ;
24474: CALL 35621 0 0
// if event = 110 then
24478: LD_VAR 0 1
24482: PUSH
24483: LD_INT 110
24485: EQUAL
24486: IFFALSE 24492
// MC_SendAttack ( ) ;
24488: CALL 36087 0 0
// if event = 111 then
24492: LD_VAR 0 1
24496: PUSH
24497: LD_INT 111
24499: EQUAL
24500: IFFALSE 24506
// MC_Defend ( ) ;
24502: CALL 36195 0 0
// if event = 112 then
24506: LD_VAR 0 1
24510: PUSH
24511: LD_INT 112
24513: EQUAL
24514: IFFALSE 24520
// MC_Research ( ) ;
24516: CALL 36800 0 0
// if event = 113 then
24520: LD_VAR 0 1
24524: PUSH
24525: LD_INT 113
24527: EQUAL
24528: IFFALSE 24534
// MC_MinesTrigger ( ) ;
24530: CALL 37914 0 0
// if event = 120 then
24534: LD_VAR 0 1
24538: PUSH
24539: LD_INT 120
24541: EQUAL
24542: IFFALSE 24548
// MC_RepairVehicle ( ) ;
24544: CALL 38013 0 0
// if event = 121 then
24548: LD_VAR 0 1
24552: PUSH
24553: LD_INT 121
24555: EQUAL
24556: IFFALSE 24562
// MC_TameApe ( ) ;
24558: CALL 38743 0 0
// if event = 122 then
24562: LD_VAR 0 1
24566: PUSH
24567: LD_INT 122
24569: EQUAL
24570: IFFALSE 24576
// MC_ChangeApeClass ( ) ;
24572: CALL 39572 0 0
// if event = 123 then
24576: LD_VAR 0 1
24580: PUSH
24581: LD_INT 123
24583: EQUAL
24584: IFFALSE 24590
// MC_Bazooka ( ) ;
24586: CALL 40222 0 0
// if event = 124 then
24590: LD_VAR 0 1
24594: PUSH
24595: LD_INT 124
24597: EQUAL
24598: IFFALSE 24604
// MC_TeleportExit ( ) ;
24600: CALL 40420 0 0
// if event = 125 then
24604: LD_VAR 0 1
24608: PUSH
24609: LD_INT 125
24611: EQUAL
24612: IFFALSE 24618
// MC_Deposits ( ) ;
24614: CALL 41067 0 0
// if event = 126 then
24618: LD_VAR 0 1
24622: PUSH
24623: LD_INT 126
24625: EQUAL
24626: IFFALSE 24632
// MC_RemoteDriver ( ) ;
24628: CALL 41692 0 0
// if event = 200 then
24632: LD_VAR 0 1
24636: PUSH
24637: LD_INT 200
24639: EQUAL
24640: IFFALSE 24646
// MC_Idle ( ) ;
24642: CALL 43641 0 0
// end ;
24646: PPOPN 1
24648: END
// export function MC_Reset ( base , tag ) ; var i ; begin
24649: LD_INT 0
24651: PPUSH
24652: PPUSH
// if not mc_bases [ base ] or not tag then
24653: LD_EXP 87
24657: PUSH
24658: LD_VAR 0 1
24662: ARRAY
24663: NOT
24664: PUSH
24665: LD_VAR 0 2
24669: NOT
24670: OR
24671: IFFALSE 24675
// exit ;
24673: GO 24739
// for i in mc_bases [ base ] union mc_ape [ base ] do
24675: LD_ADDR_VAR 0 4
24679: PUSH
24680: LD_EXP 87
24684: PUSH
24685: LD_VAR 0 1
24689: ARRAY
24690: PUSH
24691: LD_EXP 116
24695: PUSH
24696: LD_VAR 0 1
24700: ARRAY
24701: UNION
24702: PUSH
24703: FOR_IN
24704: IFFALSE 24737
// if GetTag ( i ) = tag then
24706: LD_VAR 0 4
24710: PPUSH
24711: CALL_OW 110
24715: PUSH
24716: LD_VAR 0 2
24720: EQUAL
24721: IFFALSE 24735
// SetTag ( i , 0 ) ;
24723: LD_VAR 0 4
24727: PPUSH
24728: LD_INT 0
24730: PPUSH
24731: CALL_OW 109
24735: GO 24703
24737: POP
24738: POP
// end ;
24739: LD_VAR 0 3
24743: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
24744: LD_INT 0
24746: PPUSH
24747: PPUSH
24748: PPUSH
24749: PPUSH
24750: PPUSH
24751: PPUSH
24752: PPUSH
24753: PPUSH
// if not mc_bases then
24754: LD_EXP 87
24758: NOT
24759: IFFALSE 24763
// exit ;
24761: GO 25221
// for i = 1 to mc_bases do
24763: LD_ADDR_VAR 0 2
24767: PUSH
24768: DOUBLE
24769: LD_INT 1
24771: DEC
24772: ST_TO_ADDR
24773: LD_EXP 87
24777: PUSH
24778: FOR_TO
24779: IFFALSE 25219
// begin tmp := MC_ClassCheckReq ( i ) ;
24781: LD_ADDR_VAR 0 4
24785: PUSH
24786: LD_VAR 0 2
24790: PPUSH
24791: CALL 25226 0 1
24795: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
24796: LD_ADDR_EXP 128
24800: PUSH
24801: LD_EXP 128
24805: PPUSH
24806: LD_VAR 0 2
24810: PPUSH
24811: LD_VAR 0 4
24815: PPUSH
24816: CALL_OW 1
24820: ST_TO_ADDR
// if not tmp then
24821: LD_VAR 0 4
24825: NOT
24826: IFFALSE 24830
// continue ;
24828: GO 24778
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
24830: LD_ADDR_VAR 0 6
24834: PUSH
24835: LD_EXP 87
24839: PUSH
24840: LD_VAR 0 2
24844: ARRAY
24845: PPUSH
24846: LD_INT 2
24848: PUSH
24849: LD_INT 30
24851: PUSH
24852: LD_INT 4
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 30
24861: PUSH
24862: LD_INT 5
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: PPUSH
24874: CALL_OW 72
24878: PUSH
24879: LD_EXP 87
24883: PUSH
24884: LD_VAR 0 2
24888: ARRAY
24889: PPUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 30
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 30
24905: PUSH
24906: LD_INT 1
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: PPUSH
24918: CALL_OW 72
24922: PUSH
24923: LD_EXP 87
24927: PUSH
24928: LD_VAR 0 2
24932: ARRAY
24933: PPUSH
24934: LD_INT 30
24936: PUSH
24937: LD_INT 3
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PPUSH
24944: CALL_OW 72
24948: PUSH
24949: LD_EXP 87
24953: PUSH
24954: LD_VAR 0 2
24958: ARRAY
24959: PPUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 30
24965: PUSH
24966: LD_INT 6
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 30
24975: PUSH
24976: LD_INT 7
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 30
24985: PUSH
24986: LD_INT 8
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: PPUSH
24999: CALL_OW 72
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: ST_TO_ADDR
// for j = 1 to 4 do
25010: LD_ADDR_VAR 0 3
25014: PUSH
25015: DOUBLE
25016: LD_INT 1
25018: DEC
25019: ST_TO_ADDR
25020: LD_INT 4
25022: PUSH
25023: FOR_TO
25024: IFFALSE 25215
// begin if not tmp [ j ] then
25026: LD_VAR 0 4
25030: PUSH
25031: LD_VAR 0 3
25035: ARRAY
25036: NOT
25037: IFFALSE 25041
// continue ;
25039: GO 25023
// for p in tmp [ j ] do
25041: LD_ADDR_VAR 0 5
25045: PUSH
25046: LD_VAR 0 4
25050: PUSH
25051: LD_VAR 0 3
25055: ARRAY
25056: PUSH
25057: FOR_IN
25058: IFFALSE 25211
// begin if not b [ j ] then
25060: LD_VAR 0 6
25064: PUSH
25065: LD_VAR 0 3
25069: ARRAY
25070: NOT
25071: IFFALSE 25075
// break ;
25073: GO 25211
// e := 0 ;
25075: LD_ADDR_VAR 0 7
25079: PUSH
25080: LD_INT 0
25082: ST_TO_ADDR
// for k in b [ j ] do
25083: LD_ADDR_VAR 0 8
25087: PUSH
25088: LD_VAR 0 6
25092: PUSH
25093: LD_VAR 0 3
25097: ARRAY
25098: PUSH
25099: FOR_IN
25100: IFFALSE 25127
// if IsNotFull ( k ) then
25102: LD_VAR 0 8
25106: PPUSH
25107: CALL 52822 0 1
25111: IFFALSE 25125
// begin e := k ;
25113: LD_ADDR_VAR 0 7
25117: PUSH
25118: LD_VAR 0 8
25122: ST_TO_ADDR
// break ;
25123: GO 25127
// end ;
25125: GO 25099
25127: POP
25128: POP
// if e and not UnitGoingToBuilding ( p , e ) then
25129: LD_VAR 0 7
25133: PUSH
25134: LD_VAR 0 5
25138: PPUSH
25139: LD_VAR 0 7
25143: PPUSH
25144: CALL 85242 0 2
25148: NOT
25149: AND
25150: IFFALSE 25209
// begin if IsInUnit ( p ) then
25152: LD_VAR 0 5
25156: PPUSH
25157: CALL_OW 310
25161: IFFALSE 25172
// ComExitBuilding ( p ) ;
25163: LD_VAR 0 5
25167: PPUSH
25168: CALL_OW 122
// ComEnterUnit ( p , e ) ;
25172: LD_VAR 0 5
25176: PPUSH
25177: LD_VAR 0 7
25181: PPUSH
25182: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
25186: LD_VAR 0 5
25190: PPUSH
25191: LD_VAR 0 3
25195: PPUSH
25196: CALL_OW 183
// AddComExitBuilding ( p ) ;
25200: LD_VAR 0 5
25204: PPUSH
25205: CALL_OW 182
// end ; end ;
25209: GO 25057
25211: POP
25212: POP
// end ;
25213: GO 25023
25215: POP
25216: POP
// end ;
25217: GO 24778
25219: POP
25220: POP
// end ;
25221: LD_VAR 0 1
25225: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
25226: LD_INT 0
25228: PPUSH
25229: PPUSH
25230: PPUSH
25231: PPUSH
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
25239: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
25240: LD_VAR 0 1
25244: NOT
25245: PUSH
25246: LD_EXP 87
25250: PUSH
25251: LD_VAR 0 1
25255: ARRAY
25256: NOT
25257: OR
25258: PUSH
25259: LD_EXP 87
25263: PUSH
25264: LD_VAR 0 1
25268: ARRAY
25269: PPUSH
25270: LD_INT 2
25272: PUSH
25273: LD_INT 30
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 30
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: PPUSH
25298: CALL_OW 72
25302: NOT
25303: OR
25304: IFFALSE 25308
// exit ;
25306: GO 28811
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
25308: LD_ADDR_VAR 0 4
25312: PUSH
25313: LD_EXP 87
25317: PUSH
25318: LD_VAR 0 1
25322: ARRAY
25323: PPUSH
25324: LD_INT 2
25326: PUSH
25327: LD_INT 25
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 25
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 25
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 25
25359: PUSH
25360: LD_INT 4
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 25
25369: PUSH
25370: LD_INT 5
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 25
25379: PUSH
25380: LD_INT 8
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 25
25389: PUSH
25390: LD_INT 9
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: PPUSH
25407: CALL_OW 72
25411: ST_TO_ADDR
// if not tmp then
25412: LD_VAR 0 4
25416: NOT
25417: IFFALSE 25421
// exit ;
25419: GO 28811
// for i in tmp do
25421: LD_ADDR_VAR 0 3
25425: PUSH
25426: LD_VAR 0 4
25430: PUSH
25431: FOR_IN
25432: IFFALSE 25463
// if GetTag ( i ) then
25434: LD_VAR 0 3
25438: PPUSH
25439: CALL_OW 110
25443: IFFALSE 25461
// tmp := tmp diff i ;
25445: LD_ADDR_VAR 0 4
25449: PUSH
25450: LD_VAR 0 4
25454: PUSH
25455: LD_VAR 0 3
25459: DIFF
25460: ST_TO_ADDR
25461: GO 25431
25463: POP
25464: POP
// if not tmp then
25465: LD_VAR 0 4
25469: NOT
25470: IFFALSE 25474
// exit ;
25472: GO 28811
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
25474: LD_ADDR_VAR 0 5
25478: PUSH
25479: LD_EXP 87
25483: PUSH
25484: LD_VAR 0 1
25488: ARRAY
25489: PPUSH
25490: LD_INT 2
25492: PUSH
25493: LD_INT 25
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 25
25505: PUSH
25506: LD_INT 5
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 25
25515: PUSH
25516: LD_INT 8
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 25
25525: PUSH
25526: LD_INT 9
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: PPUSH
25540: CALL_OW 72
25544: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
25545: LD_ADDR_VAR 0 6
25549: PUSH
25550: LD_EXP 87
25554: PUSH
25555: LD_VAR 0 1
25559: ARRAY
25560: PPUSH
25561: LD_INT 25
25563: PUSH
25564: LD_INT 2
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PPUSH
25571: CALL_OW 72
25575: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
25576: LD_ADDR_VAR 0 7
25580: PUSH
25581: LD_EXP 87
25585: PUSH
25586: LD_VAR 0 1
25590: ARRAY
25591: PPUSH
25592: LD_INT 25
25594: PUSH
25595: LD_INT 3
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PPUSH
25602: CALL_OW 72
25606: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
25607: LD_ADDR_VAR 0 8
25611: PUSH
25612: LD_EXP 87
25616: PUSH
25617: LD_VAR 0 1
25621: ARRAY
25622: PPUSH
25623: LD_INT 25
25625: PUSH
25626: LD_INT 4
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 24
25635: PUSH
25636: LD_INT 251
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PPUSH
25647: CALL_OW 72
25651: ST_TO_ADDR
// if mc_scan [ base ] then
25652: LD_EXP 110
25656: PUSH
25657: LD_VAR 0 1
25661: ARRAY
25662: IFFALSE 26123
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
25664: LD_ADDR_EXP 129
25668: PUSH
25669: LD_EXP 129
25673: PPUSH
25674: LD_VAR 0 1
25678: PPUSH
25679: LD_INT 4
25681: PPUSH
25682: CALL_OW 1
25686: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
25687: LD_ADDR_VAR 0 12
25691: PUSH
25692: LD_EXP 87
25696: PUSH
25697: LD_VAR 0 1
25701: ARRAY
25702: PPUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 30
25708: PUSH
25709: LD_INT 4
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 30
25718: PUSH
25719: LD_INT 5
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: PPUSH
25731: CALL_OW 72
25735: ST_TO_ADDR
// if not b then
25736: LD_VAR 0 12
25740: NOT
25741: IFFALSE 25745
// exit ;
25743: GO 28811
// p := [ ] ;
25745: LD_ADDR_VAR 0 11
25749: PUSH
25750: EMPTY
25751: ST_TO_ADDR
// if sci >= 2 then
25752: LD_VAR 0 8
25756: PUSH
25757: LD_INT 2
25759: GREATEREQUAL
25760: IFFALSE 25791
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
25762: LD_ADDR_VAR 0 8
25766: PUSH
25767: LD_VAR 0 8
25771: PUSH
25772: LD_INT 1
25774: ARRAY
25775: PUSH
25776: LD_VAR 0 8
25780: PUSH
25781: LD_INT 2
25783: ARRAY
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: ST_TO_ADDR
25789: GO 25852
// if sci = 1 then
25791: LD_VAR 0 8
25795: PUSH
25796: LD_INT 1
25798: EQUAL
25799: IFFALSE 25820
// sci := [ sci [ 1 ] ] else
25801: LD_ADDR_VAR 0 8
25805: PUSH
25806: LD_VAR 0 8
25810: PUSH
25811: LD_INT 1
25813: ARRAY
25814: PUSH
25815: EMPTY
25816: LIST
25817: ST_TO_ADDR
25818: GO 25852
// if sci = 0 then
25820: LD_VAR 0 8
25824: PUSH
25825: LD_INT 0
25827: EQUAL
25828: IFFALSE 25852
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
25830: LD_ADDR_VAR 0 11
25834: PUSH
25835: LD_VAR 0 4
25839: PPUSH
25840: LD_INT 4
25842: PPUSH
25843: CALL 85105 0 2
25847: PUSH
25848: LD_INT 1
25850: ARRAY
25851: ST_TO_ADDR
// if eng > 4 then
25852: LD_VAR 0 6
25856: PUSH
25857: LD_INT 4
25859: GREATER
25860: IFFALSE 25906
// for i = eng downto 4 do
25862: LD_ADDR_VAR 0 3
25866: PUSH
25867: DOUBLE
25868: LD_VAR 0 6
25872: INC
25873: ST_TO_ADDR
25874: LD_INT 4
25876: PUSH
25877: FOR_DOWNTO
25878: IFFALSE 25904
// eng := eng diff eng [ i ] ;
25880: LD_ADDR_VAR 0 6
25884: PUSH
25885: LD_VAR 0 6
25889: PUSH
25890: LD_VAR 0 6
25894: PUSH
25895: LD_VAR 0 3
25899: ARRAY
25900: DIFF
25901: ST_TO_ADDR
25902: GO 25877
25904: POP
25905: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
25906: LD_ADDR_VAR 0 4
25910: PUSH
25911: LD_VAR 0 4
25915: PUSH
25916: LD_VAR 0 5
25920: PUSH
25921: LD_VAR 0 6
25925: UNION
25926: PUSH
25927: LD_VAR 0 7
25931: UNION
25932: PUSH
25933: LD_VAR 0 8
25937: UNION
25938: DIFF
25939: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
25940: LD_ADDR_VAR 0 13
25944: PUSH
25945: LD_EXP 87
25949: PUSH
25950: LD_VAR 0 1
25954: ARRAY
25955: PPUSH
25956: LD_INT 2
25958: PUSH
25959: LD_INT 30
25961: PUSH
25962: LD_INT 32
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 30
25971: PUSH
25972: LD_INT 31
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: LIST
25983: PPUSH
25984: CALL_OW 72
25988: PUSH
25989: LD_EXP 87
25993: PUSH
25994: LD_VAR 0 1
25998: ARRAY
25999: PPUSH
26000: LD_INT 2
26002: PUSH
26003: LD_INT 30
26005: PUSH
26006: LD_INT 4
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 30
26015: PUSH
26016: LD_INT 5
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: PPUSH
26028: CALL_OW 72
26032: PUSH
26033: LD_INT 6
26035: MUL
26036: PLUS
26037: ST_TO_ADDR
// if bcount < tmp then
26038: LD_VAR 0 13
26042: PUSH
26043: LD_VAR 0 4
26047: LESS
26048: IFFALSE 26094
// for i = tmp downto bcount do
26050: LD_ADDR_VAR 0 3
26054: PUSH
26055: DOUBLE
26056: LD_VAR 0 4
26060: INC
26061: ST_TO_ADDR
26062: LD_VAR 0 13
26066: PUSH
26067: FOR_DOWNTO
26068: IFFALSE 26092
// tmp := Delete ( tmp , tmp ) ;
26070: LD_ADDR_VAR 0 4
26074: PUSH
26075: LD_VAR 0 4
26079: PPUSH
26080: LD_VAR 0 4
26084: PPUSH
26085: CALL_OW 3
26089: ST_TO_ADDR
26090: GO 26067
26092: POP
26093: POP
// result := [ tmp , 0 , 0 , p ] ;
26094: LD_ADDR_VAR 0 2
26098: PUSH
26099: LD_VAR 0 4
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: LD_VAR 0 11
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: ST_TO_ADDR
// exit ;
26121: GO 28811
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
26123: LD_EXP 87
26127: PUSH
26128: LD_VAR 0 1
26132: ARRAY
26133: PPUSH
26134: LD_INT 2
26136: PUSH
26137: LD_INT 30
26139: PUSH
26140: LD_INT 6
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 30
26149: PUSH
26150: LD_INT 7
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 30
26159: PUSH
26160: LD_INT 8
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: PPUSH
26173: CALL_OW 72
26177: NOT
26178: PUSH
26179: LD_EXP 87
26183: PUSH
26184: LD_VAR 0 1
26188: ARRAY
26189: PPUSH
26190: LD_INT 30
26192: PUSH
26193: LD_INT 3
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PPUSH
26200: CALL_OW 72
26204: NOT
26205: AND
26206: IFFALSE 26278
// begin if eng = tmp then
26208: LD_VAR 0 6
26212: PUSH
26213: LD_VAR 0 4
26217: EQUAL
26218: IFFALSE 26222
// exit ;
26220: GO 28811
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
26222: LD_ADDR_EXP 129
26226: PUSH
26227: LD_EXP 129
26231: PPUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: LD_INT 1
26239: PPUSH
26240: CALL_OW 1
26244: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
26245: LD_ADDR_VAR 0 2
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: LD_VAR 0 4
26257: PUSH
26258: LD_VAR 0 6
26262: DIFF
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: ST_TO_ADDR
// exit ;
26276: GO 28811
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
26278: LD_EXP 114
26282: PUSH
26283: LD_EXP 113
26287: PUSH
26288: LD_VAR 0 1
26292: ARRAY
26293: ARRAY
26294: PUSH
26295: LD_EXP 87
26299: PUSH
26300: LD_VAR 0 1
26304: ARRAY
26305: PPUSH
26306: LD_INT 2
26308: PUSH
26309: LD_INT 30
26311: PUSH
26312: LD_INT 6
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 30
26321: PUSH
26322: LD_INT 7
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 30
26331: PUSH
26332: LD_INT 8
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: PPUSH
26345: CALL_OW 72
26349: AND
26350: PUSH
26351: LD_EXP 87
26355: PUSH
26356: LD_VAR 0 1
26360: ARRAY
26361: PPUSH
26362: LD_INT 30
26364: PUSH
26365: LD_INT 3
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PPUSH
26372: CALL_OW 72
26376: NOT
26377: AND
26378: IFFALSE 26592
// begin if sci >= 6 then
26380: LD_VAR 0 8
26384: PUSH
26385: LD_INT 6
26387: GREATEREQUAL
26388: IFFALSE 26392
// exit ;
26390: GO 28811
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
26392: LD_ADDR_EXP 129
26396: PUSH
26397: LD_EXP 129
26401: PPUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: LD_INT 2
26409: PPUSH
26410: CALL_OW 1
26414: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
26415: LD_ADDR_VAR 0 9
26419: PUSH
26420: LD_VAR 0 4
26424: PUSH
26425: LD_VAR 0 8
26429: DIFF
26430: PPUSH
26431: LD_INT 4
26433: PPUSH
26434: CALL 85105 0 2
26438: ST_TO_ADDR
// p := [ ] ;
26439: LD_ADDR_VAR 0 11
26443: PUSH
26444: EMPTY
26445: ST_TO_ADDR
// if sci < 6 and sort > 6 then
26446: LD_VAR 0 8
26450: PUSH
26451: LD_INT 6
26453: LESS
26454: PUSH
26455: LD_VAR 0 9
26459: PUSH
26460: LD_INT 6
26462: GREATER
26463: AND
26464: IFFALSE 26545
// begin for i = 1 to 6 - sci do
26466: LD_ADDR_VAR 0 3
26470: PUSH
26471: DOUBLE
26472: LD_INT 1
26474: DEC
26475: ST_TO_ADDR
26476: LD_INT 6
26478: PUSH
26479: LD_VAR 0 8
26483: MINUS
26484: PUSH
26485: FOR_TO
26486: IFFALSE 26541
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
26488: LD_ADDR_VAR 0 11
26492: PUSH
26493: LD_VAR 0 11
26497: PPUSH
26498: LD_VAR 0 11
26502: PUSH
26503: LD_INT 1
26505: PLUS
26506: PPUSH
26507: LD_VAR 0 9
26511: PUSH
26512: LD_INT 1
26514: ARRAY
26515: PPUSH
26516: CALL_OW 2
26520: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
26521: LD_ADDR_VAR 0 9
26525: PUSH
26526: LD_VAR 0 9
26530: PPUSH
26531: LD_INT 1
26533: PPUSH
26534: CALL_OW 3
26538: ST_TO_ADDR
// end ;
26539: GO 26485
26541: POP
26542: POP
// end else
26543: GO 26565
// if sort then
26545: LD_VAR 0 9
26549: IFFALSE 26565
// p := sort [ 1 ] ;
26551: LD_ADDR_VAR 0 11
26555: PUSH
26556: LD_VAR 0 9
26560: PUSH
26561: LD_INT 1
26563: ARRAY
26564: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
26565: LD_ADDR_VAR 0 2
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: LD_VAR 0 11
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: ST_TO_ADDR
// exit ;
26590: GO 28811
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
26592: LD_EXP 114
26596: PUSH
26597: LD_EXP 113
26601: PUSH
26602: LD_VAR 0 1
26606: ARRAY
26607: ARRAY
26608: PUSH
26609: LD_EXP 87
26613: PUSH
26614: LD_VAR 0 1
26618: ARRAY
26619: PPUSH
26620: LD_INT 2
26622: PUSH
26623: LD_INT 30
26625: PUSH
26626: LD_INT 6
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 30
26635: PUSH
26636: LD_INT 7
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 30
26645: PUSH
26646: LD_INT 8
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: PPUSH
26659: CALL_OW 72
26663: AND
26664: PUSH
26665: LD_EXP 87
26669: PUSH
26670: LD_VAR 0 1
26674: ARRAY
26675: PPUSH
26676: LD_INT 30
26678: PUSH
26679: LD_INT 3
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PPUSH
26686: CALL_OW 72
26690: AND
26691: IFFALSE 27425
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
26693: LD_ADDR_EXP 129
26697: PUSH
26698: LD_EXP 129
26702: PPUSH
26703: LD_VAR 0 1
26707: PPUSH
26708: LD_INT 3
26710: PPUSH
26711: CALL_OW 1
26715: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
26716: LD_ADDR_VAR 0 2
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
// if not eng then
26739: LD_VAR 0 6
26743: NOT
26744: IFFALSE 26807
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
26746: LD_ADDR_VAR 0 11
26750: PUSH
26751: LD_VAR 0 4
26755: PPUSH
26756: LD_INT 2
26758: PPUSH
26759: CALL 85105 0 2
26763: PUSH
26764: LD_INT 1
26766: ARRAY
26767: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
26768: LD_ADDR_VAR 0 2
26772: PUSH
26773: LD_VAR 0 2
26777: PPUSH
26778: LD_INT 2
26780: PPUSH
26781: LD_VAR 0 11
26785: PPUSH
26786: CALL_OW 1
26790: ST_TO_ADDR
// tmp := tmp diff p ;
26791: LD_ADDR_VAR 0 4
26795: PUSH
26796: LD_VAR 0 4
26800: PUSH
26801: LD_VAR 0 11
26805: DIFF
26806: ST_TO_ADDR
// end ; if tmp and sci < 6 then
26807: LD_VAR 0 4
26811: PUSH
26812: LD_VAR 0 8
26816: PUSH
26817: LD_INT 6
26819: LESS
26820: AND
26821: IFFALSE 27009
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
26823: LD_ADDR_VAR 0 9
26827: PUSH
26828: LD_VAR 0 4
26832: PUSH
26833: LD_VAR 0 8
26837: PUSH
26838: LD_VAR 0 7
26842: UNION
26843: DIFF
26844: PPUSH
26845: LD_INT 4
26847: PPUSH
26848: CALL 85105 0 2
26852: ST_TO_ADDR
// p := [ ] ;
26853: LD_ADDR_VAR 0 11
26857: PUSH
26858: EMPTY
26859: ST_TO_ADDR
// if sort then
26860: LD_VAR 0 9
26864: IFFALSE 26980
// for i = 1 to 6 - sci do
26866: LD_ADDR_VAR 0 3
26870: PUSH
26871: DOUBLE
26872: LD_INT 1
26874: DEC
26875: ST_TO_ADDR
26876: LD_INT 6
26878: PUSH
26879: LD_VAR 0 8
26883: MINUS
26884: PUSH
26885: FOR_TO
26886: IFFALSE 26978
// begin if i = sort then
26888: LD_VAR 0 3
26892: PUSH
26893: LD_VAR 0 9
26897: EQUAL
26898: IFFALSE 26902
// break ;
26900: GO 26978
// if GetClass ( i ) = 4 then
26902: LD_VAR 0 3
26906: PPUSH
26907: CALL_OW 257
26911: PUSH
26912: LD_INT 4
26914: EQUAL
26915: IFFALSE 26919
// continue ;
26917: GO 26885
// p := Insert ( p , p + 1 , sort [ i ] ) ;
26919: LD_ADDR_VAR 0 11
26923: PUSH
26924: LD_VAR 0 11
26928: PPUSH
26929: LD_VAR 0 11
26933: PUSH
26934: LD_INT 1
26936: PLUS
26937: PPUSH
26938: LD_VAR 0 9
26942: PUSH
26943: LD_VAR 0 3
26947: ARRAY
26948: PPUSH
26949: CALL_OW 2
26953: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
26954: LD_ADDR_VAR 0 4
26958: PUSH
26959: LD_VAR 0 4
26963: PUSH
26964: LD_VAR 0 9
26968: PUSH
26969: LD_VAR 0 3
26973: ARRAY
26974: DIFF
26975: ST_TO_ADDR
// end ;
26976: GO 26885
26978: POP
26979: POP
// if p then
26980: LD_VAR 0 11
26984: IFFALSE 27009
// result := Replace ( result , 4 , p ) ;
26986: LD_ADDR_VAR 0 2
26990: PUSH
26991: LD_VAR 0 2
26995: PPUSH
26996: LD_INT 4
26998: PPUSH
26999: LD_VAR 0 11
27003: PPUSH
27004: CALL_OW 1
27008: ST_TO_ADDR
// end ; if tmp and mech < 6 then
27009: LD_VAR 0 4
27013: PUSH
27014: LD_VAR 0 7
27018: PUSH
27019: LD_INT 6
27021: LESS
27022: AND
27023: IFFALSE 27211
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
27025: LD_ADDR_VAR 0 9
27029: PUSH
27030: LD_VAR 0 4
27034: PUSH
27035: LD_VAR 0 8
27039: PUSH
27040: LD_VAR 0 7
27044: UNION
27045: DIFF
27046: PPUSH
27047: LD_INT 3
27049: PPUSH
27050: CALL 85105 0 2
27054: ST_TO_ADDR
// p := [ ] ;
27055: LD_ADDR_VAR 0 11
27059: PUSH
27060: EMPTY
27061: ST_TO_ADDR
// if sort then
27062: LD_VAR 0 9
27066: IFFALSE 27182
// for i = 1 to 6 - mech do
27068: LD_ADDR_VAR 0 3
27072: PUSH
27073: DOUBLE
27074: LD_INT 1
27076: DEC
27077: ST_TO_ADDR
27078: LD_INT 6
27080: PUSH
27081: LD_VAR 0 7
27085: MINUS
27086: PUSH
27087: FOR_TO
27088: IFFALSE 27180
// begin if i = sort then
27090: LD_VAR 0 3
27094: PUSH
27095: LD_VAR 0 9
27099: EQUAL
27100: IFFALSE 27104
// break ;
27102: GO 27180
// if GetClass ( i ) = 3 then
27104: LD_VAR 0 3
27108: PPUSH
27109: CALL_OW 257
27113: PUSH
27114: LD_INT 3
27116: EQUAL
27117: IFFALSE 27121
// continue ;
27119: GO 27087
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27121: LD_ADDR_VAR 0 11
27125: PUSH
27126: LD_VAR 0 11
27130: PPUSH
27131: LD_VAR 0 11
27135: PUSH
27136: LD_INT 1
27138: PLUS
27139: PPUSH
27140: LD_VAR 0 9
27144: PUSH
27145: LD_VAR 0 3
27149: ARRAY
27150: PPUSH
27151: CALL_OW 2
27155: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27156: LD_ADDR_VAR 0 4
27160: PUSH
27161: LD_VAR 0 4
27165: PUSH
27166: LD_VAR 0 9
27170: PUSH
27171: LD_VAR 0 3
27175: ARRAY
27176: DIFF
27177: ST_TO_ADDR
// end ;
27178: GO 27087
27180: POP
27181: POP
// if p then
27182: LD_VAR 0 11
27186: IFFALSE 27211
// result := Replace ( result , 3 , p ) ;
27188: LD_ADDR_VAR 0 2
27192: PUSH
27193: LD_VAR 0 2
27197: PPUSH
27198: LD_INT 3
27200: PPUSH
27201: LD_VAR 0 11
27205: PPUSH
27206: CALL_OW 1
27210: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
27211: LD_VAR 0 4
27215: PUSH
27216: LD_INT 6
27218: GREATER
27219: PUSH
27220: LD_VAR 0 6
27224: PUSH
27225: LD_INT 6
27227: LESS
27228: AND
27229: IFFALSE 27423
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
27231: LD_ADDR_VAR 0 9
27235: PUSH
27236: LD_VAR 0 4
27240: PUSH
27241: LD_VAR 0 8
27245: PUSH
27246: LD_VAR 0 7
27250: UNION
27251: PUSH
27252: LD_VAR 0 6
27256: UNION
27257: DIFF
27258: PPUSH
27259: LD_INT 2
27261: PPUSH
27262: CALL 85105 0 2
27266: ST_TO_ADDR
// p := [ ] ;
27267: LD_ADDR_VAR 0 11
27271: PUSH
27272: EMPTY
27273: ST_TO_ADDR
// if sort then
27274: LD_VAR 0 9
27278: IFFALSE 27394
// for i = 1 to 6 - eng do
27280: LD_ADDR_VAR 0 3
27284: PUSH
27285: DOUBLE
27286: LD_INT 1
27288: DEC
27289: ST_TO_ADDR
27290: LD_INT 6
27292: PUSH
27293: LD_VAR 0 6
27297: MINUS
27298: PUSH
27299: FOR_TO
27300: IFFALSE 27392
// begin if i = sort then
27302: LD_VAR 0 3
27306: PUSH
27307: LD_VAR 0 9
27311: EQUAL
27312: IFFALSE 27316
// break ;
27314: GO 27392
// if GetClass ( i ) = 2 then
27316: LD_VAR 0 3
27320: PPUSH
27321: CALL_OW 257
27325: PUSH
27326: LD_INT 2
27328: EQUAL
27329: IFFALSE 27333
// continue ;
27331: GO 27299
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27333: LD_ADDR_VAR 0 11
27337: PUSH
27338: LD_VAR 0 11
27342: PPUSH
27343: LD_VAR 0 11
27347: PUSH
27348: LD_INT 1
27350: PLUS
27351: PPUSH
27352: LD_VAR 0 9
27356: PUSH
27357: LD_VAR 0 3
27361: ARRAY
27362: PPUSH
27363: CALL_OW 2
27367: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27368: LD_ADDR_VAR 0 4
27372: PUSH
27373: LD_VAR 0 4
27377: PUSH
27378: LD_VAR 0 9
27382: PUSH
27383: LD_VAR 0 3
27387: ARRAY
27388: DIFF
27389: ST_TO_ADDR
// end ;
27390: GO 27299
27392: POP
27393: POP
// if p then
27394: LD_VAR 0 11
27398: IFFALSE 27423
// result := Replace ( result , 2 , p ) ;
27400: LD_ADDR_VAR 0 2
27404: PUSH
27405: LD_VAR 0 2
27409: PPUSH
27410: LD_INT 2
27412: PPUSH
27413: LD_VAR 0 11
27417: PPUSH
27418: CALL_OW 1
27422: ST_TO_ADDR
// end ; exit ;
27423: GO 28811
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
27425: LD_EXP 114
27429: PUSH
27430: LD_EXP 113
27434: PUSH
27435: LD_VAR 0 1
27439: ARRAY
27440: ARRAY
27441: NOT
27442: PUSH
27443: LD_EXP 87
27447: PUSH
27448: LD_VAR 0 1
27452: ARRAY
27453: PPUSH
27454: LD_INT 30
27456: PUSH
27457: LD_INT 3
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PPUSH
27464: CALL_OW 72
27468: AND
27469: PUSH
27470: LD_EXP 92
27474: PUSH
27475: LD_VAR 0 1
27479: ARRAY
27480: AND
27481: IFFALSE 28089
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
27483: LD_ADDR_EXP 129
27487: PUSH
27488: LD_EXP 129
27492: PPUSH
27493: LD_VAR 0 1
27497: PPUSH
27498: LD_INT 5
27500: PPUSH
27501: CALL_OW 1
27505: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
27506: LD_ADDR_VAR 0 2
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: ST_TO_ADDR
// if sci > 1 then
27529: LD_VAR 0 8
27533: PUSH
27534: LD_INT 1
27536: GREATER
27537: IFFALSE 27565
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
27539: LD_ADDR_VAR 0 4
27543: PUSH
27544: LD_VAR 0 4
27548: PUSH
27549: LD_VAR 0 8
27553: PUSH
27554: LD_VAR 0 8
27558: PUSH
27559: LD_INT 1
27561: ARRAY
27562: DIFF
27563: DIFF
27564: ST_TO_ADDR
// if tmp and not sci then
27565: LD_VAR 0 4
27569: PUSH
27570: LD_VAR 0 8
27574: NOT
27575: AND
27576: IFFALSE 27645
// begin sort := SortBySkill ( tmp , 4 ) ;
27578: LD_ADDR_VAR 0 9
27582: PUSH
27583: LD_VAR 0 4
27587: PPUSH
27588: LD_INT 4
27590: PPUSH
27591: CALL 85105 0 2
27595: ST_TO_ADDR
// if sort then
27596: LD_VAR 0 9
27600: IFFALSE 27616
// p := sort [ 1 ] ;
27602: LD_ADDR_VAR 0 11
27606: PUSH
27607: LD_VAR 0 9
27611: PUSH
27612: LD_INT 1
27614: ARRAY
27615: ST_TO_ADDR
// if p then
27616: LD_VAR 0 11
27620: IFFALSE 27645
// result := Replace ( result , 4 , p ) ;
27622: LD_ADDR_VAR 0 2
27626: PUSH
27627: LD_VAR 0 2
27631: PPUSH
27632: LD_INT 4
27634: PPUSH
27635: LD_VAR 0 11
27639: PPUSH
27640: CALL_OW 1
27644: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
27645: LD_ADDR_VAR 0 4
27649: PUSH
27650: LD_VAR 0 4
27654: PUSH
27655: LD_VAR 0 7
27659: DIFF
27660: ST_TO_ADDR
// if tmp and mech < 6 then
27661: LD_VAR 0 4
27665: PUSH
27666: LD_VAR 0 7
27670: PUSH
27671: LD_INT 6
27673: LESS
27674: AND
27675: IFFALSE 27863
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
27677: LD_ADDR_VAR 0 9
27681: PUSH
27682: LD_VAR 0 4
27686: PUSH
27687: LD_VAR 0 8
27691: PUSH
27692: LD_VAR 0 7
27696: UNION
27697: DIFF
27698: PPUSH
27699: LD_INT 3
27701: PPUSH
27702: CALL 85105 0 2
27706: ST_TO_ADDR
// p := [ ] ;
27707: LD_ADDR_VAR 0 11
27711: PUSH
27712: EMPTY
27713: ST_TO_ADDR
// if sort then
27714: LD_VAR 0 9
27718: IFFALSE 27834
// for i = 1 to 6 - mech do
27720: LD_ADDR_VAR 0 3
27724: PUSH
27725: DOUBLE
27726: LD_INT 1
27728: DEC
27729: ST_TO_ADDR
27730: LD_INT 6
27732: PUSH
27733: LD_VAR 0 7
27737: MINUS
27738: PUSH
27739: FOR_TO
27740: IFFALSE 27832
// begin if i = sort then
27742: LD_VAR 0 3
27746: PUSH
27747: LD_VAR 0 9
27751: EQUAL
27752: IFFALSE 27756
// break ;
27754: GO 27832
// if GetClass ( i ) = 3 then
27756: LD_VAR 0 3
27760: PPUSH
27761: CALL_OW 257
27765: PUSH
27766: LD_INT 3
27768: EQUAL
27769: IFFALSE 27773
// continue ;
27771: GO 27739
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27773: LD_ADDR_VAR 0 11
27777: PUSH
27778: LD_VAR 0 11
27782: PPUSH
27783: LD_VAR 0 11
27787: PUSH
27788: LD_INT 1
27790: PLUS
27791: PPUSH
27792: LD_VAR 0 9
27796: PUSH
27797: LD_VAR 0 3
27801: ARRAY
27802: PPUSH
27803: CALL_OW 2
27807: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27808: LD_ADDR_VAR 0 4
27812: PUSH
27813: LD_VAR 0 4
27817: PUSH
27818: LD_VAR 0 9
27822: PUSH
27823: LD_VAR 0 3
27827: ARRAY
27828: DIFF
27829: ST_TO_ADDR
// end ;
27830: GO 27739
27832: POP
27833: POP
// if p then
27834: LD_VAR 0 11
27838: IFFALSE 27863
// result := Replace ( result , 3 , p ) ;
27840: LD_ADDR_VAR 0 2
27844: PUSH
27845: LD_VAR 0 2
27849: PPUSH
27850: LD_INT 3
27852: PPUSH
27853: LD_VAR 0 11
27857: PPUSH
27858: CALL_OW 1
27862: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
27863: LD_ADDR_VAR 0 4
27867: PUSH
27868: LD_VAR 0 4
27872: PUSH
27873: LD_VAR 0 6
27877: DIFF
27878: ST_TO_ADDR
// if tmp and eng < 6 then
27879: LD_VAR 0 4
27883: PUSH
27884: LD_VAR 0 6
27888: PUSH
27889: LD_INT 6
27891: LESS
27892: AND
27893: IFFALSE 28087
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
27895: LD_ADDR_VAR 0 9
27899: PUSH
27900: LD_VAR 0 4
27904: PUSH
27905: LD_VAR 0 8
27909: PUSH
27910: LD_VAR 0 7
27914: UNION
27915: PUSH
27916: LD_VAR 0 6
27920: UNION
27921: DIFF
27922: PPUSH
27923: LD_INT 2
27925: PPUSH
27926: CALL 85105 0 2
27930: ST_TO_ADDR
// p := [ ] ;
27931: LD_ADDR_VAR 0 11
27935: PUSH
27936: EMPTY
27937: ST_TO_ADDR
// if sort then
27938: LD_VAR 0 9
27942: IFFALSE 28058
// for i = 1 to 6 - eng do
27944: LD_ADDR_VAR 0 3
27948: PUSH
27949: DOUBLE
27950: LD_INT 1
27952: DEC
27953: ST_TO_ADDR
27954: LD_INT 6
27956: PUSH
27957: LD_VAR 0 6
27961: MINUS
27962: PUSH
27963: FOR_TO
27964: IFFALSE 28056
// begin if i = sort then
27966: LD_VAR 0 3
27970: PUSH
27971: LD_VAR 0 9
27975: EQUAL
27976: IFFALSE 27980
// break ;
27978: GO 28056
// if GetClass ( i ) = 2 then
27980: LD_VAR 0 3
27984: PPUSH
27985: CALL_OW 257
27989: PUSH
27990: LD_INT 2
27992: EQUAL
27993: IFFALSE 27997
// continue ;
27995: GO 27963
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27997: LD_ADDR_VAR 0 11
28001: PUSH
28002: LD_VAR 0 11
28006: PPUSH
28007: LD_VAR 0 11
28011: PUSH
28012: LD_INT 1
28014: PLUS
28015: PPUSH
28016: LD_VAR 0 9
28020: PUSH
28021: LD_VAR 0 3
28025: ARRAY
28026: PPUSH
28027: CALL_OW 2
28031: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
28032: LD_ADDR_VAR 0 4
28036: PUSH
28037: LD_VAR 0 4
28041: PUSH
28042: LD_VAR 0 9
28046: PUSH
28047: LD_VAR 0 3
28051: ARRAY
28052: DIFF
28053: ST_TO_ADDR
// end ;
28054: GO 27963
28056: POP
28057: POP
// if p then
28058: LD_VAR 0 11
28062: IFFALSE 28087
// result := Replace ( result , 2 , p ) ;
28064: LD_ADDR_VAR 0 2
28068: PUSH
28069: LD_VAR 0 2
28073: PPUSH
28074: LD_INT 2
28076: PPUSH
28077: LD_VAR 0 11
28081: PPUSH
28082: CALL_OW 1
28086: ST_TO_ADDR
// end ; exit ;
28087: GO 28811
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
28089: LD_EXP 114
28093: PUSH
28094: LD_EXP 113
28098: PUSH
28099: LD_VAR 0 1
28103: ARRAY
28104: ARRAY
28105: NOT
28106: PUSH
28107: LD_EXP 87
28111: PUSH
28112: LD_VAR 0 1
28116: ARRAY
28117: PPUSH
28118: LD_INT 30
28120: PUSH
28121: LD_INT 3
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PPUSH
28128: CALL_OW 72
28132: AND
28133: PUSH
28134: LD_EXP 92
28138: PUSH
28139: LD_VAR 0 1
28143: ARRAY
28144: NOT
28145: AND
28146: IFFALSE 28811
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
28148: LD_ADDR_EXP 129
28152: PUSH
28153: LD_EXP 129
28157: PPUSH
28158: LD_VAR 0 1
28162: PPUSH
28163: LD_INT 6
28165: PPUSH
28166: CALL_OW 1
28170: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
28171: LD_ADDR_VAR 0 2
28175: PUSH
28176: LD_INT 0
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: ST_TO_ADDR
// if sci >= 1 then
28194: LD_VAR 0 8
28198: PUSH
28199: LD_INT 1
28201: GREATEREQUAL
28202: IFFALSE 28224
// tmp := tmp diff sci [ 1 ] ;
28204: LD_ADDR_VAR 0 4
28208: PUSH
28209: LD_VAR 0 4
28213: PUSH
28214: LD_VAR 0 8
28218: PUSH
28219: LD_INT 1
28221: ARRAY
28222: DIFF
28223: ST_TO_ADDR
// if tmp and not sci then
28224: LD_VAR 0 4
28228: PUSH
28229: LD_VAR 0 8
28233: NOT
28234: AND
28235: IFFALSE 28304
// begin sort := SortBySkill ( tmp , 4 ) ;
28237: LD_ADDR_VAR 0 9
28241: PUSH
28242: LD_VAR 0 4
28246: PPUSH
28247: LD_INT 4
28249: PPUSH
28250: CALL 85105 0 2
28254: ST_TO_ADDR
// if sort then
28255: LD_VAR 0 9
28259: IFFALSE 28275
// p := sort [ 1 ] ;
28261: LD_ADDR_VAR 0 11
28265: PUSH
28266: LD_VAR 0 9
28270: PUSH
28271: LD_INT 1
28273: ARRAY
28274: ST_TO_ADDR
// if p then
28275: LD_VAR 0 11
28279: IFFALSE 28304
// result := Replace ( result , 4 , p ) ;
28281: LD_ADDR_VAR 0 2
28285: PUSH
28286: LD_VAR 0 2
28290: PPUSH
28291: LD_INT 4
28293: PPUSH
28294: LD_VAR 0 11
28298: PPUSH
28299: CALL_OW 1
28303: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
28304: LD_ADDR_VAR 0 4
28308: PUSH
28309: LD_VAR 0 4
28313: PUSH
28314: LD_VAR 0 7
28318: DIFF
28319: ST_TO_ADDR
// if tmp and mech < 6 then
28320: LD_VAR 0 4
28324: PUSH
28325: LD_VAR 0 7
28329: PUSH
28330: LD_INT 6
28332: LESS
28333: AND
28334: IFFALSE 28516
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
28336: LD_ADDR_VAR 0 9
28340: PUSH
28341: LD_VAR 0 4
28345: PUSH
28346: LD_VAR 0 7
28350: DIFF
28351: PPUSH
28352: LD_INT 3
28354: PPUSH
28355: CALL 85105 0 2
28359: ST_TO_ADDR
// p := [ ] ;
28360: LD_ADDR_VAR 0 11
28364: PUSH
28365: EMPTY
28366: ST_TO_ADDR
// if sort then
28367: LD_VAR 0 9
28371: IFFALSE 28487
// for i = 1 to 6 - mech do
28373: LD_ADDR_VAR 0 3
28377: PUSH
28378: DOUBLE
28379: LD_INT 1
28381: DEC
28382: ST_TO_ADDR
28383: LD_INT 6
28385: PUSH
28386: LD_VAR 0 7
28390: MINUS
28391: PUSH
28392: FOR_TO
28393: IFFALSE 28485
// begin if i = sort then
28395: LD_VAR 0 3
28399: PUSH
28400: LD_VAR 0 9
28404: EQUAL
28405: IFFALSE 28409
// break ;
28407: GO 28485
// if GetClass ( i ) = 3 then
28409: LD_VAR 0 3
28413: PPUSH
28414: CALL_OW 257
28418: PUSH
28419: LD_INT 3
28421: EQUAL
28422: IFFALSE 28426
// continue ;
28424: GO 28392
// p := Insert ( p , p + 1 , sort [ i ] ) ;
28426: LD_ADDR_VAR 0 11
28430: PUSH
28431: LD_VAR 0 11
28435: PPUSH
28436: LD_VAR 0 11
28440: PUSH
28441: LD_INT 1
28443: PLUS
28444: PPUSH
28445: LD_VAR 0 9
28449: PUSH
28450: LD_VAR 0 3
28454: ARRAY
28455: PPUSH
28456: CALL_OW 2
28460: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
28461: LD_ADDR_VAR 0 4
28465: PUSH
28466: LD_VAR 0 4
28470: PUSH
28471: LD_VAR 0 9
28475: PUSH
28476: LD_VAR 0 3
28480: ARRAY
28481: DIFF
28482: ST_TO_ADDR
// end ;
28483: GO 28392
28485: POP
28486: POP
// if p then
28487: LD_VAR 0 11
28491: IFFALSE 28516
// result := Replace ( result , 3 , p ) ;
28493: LD_ADDR_VAR 0 2
28497: PUSH
28498: LD_VAR 0 2
28502: PPUSH
28503: LD_INT 3
28505: PPUSH
28506: LD_VAR 0 11
28510: PPUSH
28511: CALL_OW 1
28515: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
28516: LD_ADDR_VAR 0 4
28520: PUSH
28521: LD_VAR 0 4
28525: PUSH
28526: LD_VAR 0 6
28530: DIFF
28531: ST_TO_ADDR
// if tmp and eng < 4 then
28532: LD_VAR 0 4
28536: PUSH
28537: LD_VAR 0 6
28541: PUSH
28542: LD_INT 4
28544: LESS
28545: AND
28546: IFFALSE 28736
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
28548: LD_ADDR_VAR 0 9
28552: PUSH
28553: LD_VAR 0 4
28557: PUSH
28558: LD_VAR 0 7
28562: PUSH
28563: LD_VAR 0 6
28567: UNION
28568: DIFF
28569: PPUSH
28570: LD_INT 2
28572: PPUSH
28573: CALL 85105 0 2
28577: ST_TO_ADDR
// p := [ ] ;
28578: LD_ADDR_VAR 0 11
28582: PUSH
28583: EMPTY
28584: ST_TO_ADDR
// if sort then
28585: LD_VAR 0 9
28589: IFFALSE 28705
// for i = 1 to 4 - eng do
28591: LD_ADDR_VAR 0 3
28595: PUSH
28596: DOUBLE
28597: LD_INT 1
28599: DEC
28600: ST_TO_ADDR
28601: LD_INT 4
28603: PUSH
28604: LD_VAR 0 6
28608: MINUS
28609: PUSH
28610: FOR_TO
28611: IFFALSE 28703
// begin if i = sort then
28613: LD_VAR 0 3
28617: PUSH
28618: LD_VAR 0 9
28622: EQUAL
28623: IFFALSE 28627
// break ;
28625: GO 28703
// if GetClass ( i ) = 2 then
28627: LD_VAR 0 3
28631: PPUSH
28632: CALL_OW 257
28636: PUSH
28637: LD_INT 2
28639: EQUAL
28640: IFFALSE 28644
// continue ;
28642: GO 28610
// p := Insert ( p , p + 1 , sort [ i ] ) ;
28644: LD_ADDR_VAR 0 11
28648: PUSH
28649: LD_VAR 0 11
28653: PPUSH
28654: LD_VAR 0 11
28658: PUSH
28659: LD_INT 1
28661: PLUS
28662: PPUSH
28663: LD_VAR 0 9
28667: PUSH
28668: LD_VAR 0 3
28672: ARRAY
28673: PPUSH
28674: CALL_OW 2
28678: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
28679: LD_ADDR_VAR 0 4
28683: PUSH
28684: LD_VAR 0 4
28688: PUSH
28689: LD_VAR 0 9
28693: PUSH
28694: LD_VAR 0 3
28698: ARRAY
28699: DIFF
28700: ST_TO_ADDR
// end ;
28701: GO 28610
28703: POP
28704: POP
// if p then
28705: LD_VAR 0 11
28709: IFFALSE 28734
// result := Replace ( result , 2 , p ) ;
28711: LD_ADDR_VAR 0 2
28715: PUSH
28716: LD_VAR 0 2
28720: PPUSH
28721: LD_INT 2
28723: PPUSH
28724: LD_VAR 0 11
28728: PPUSH
28729: CALL_OW 1
28733: ST_TO_ADDR
// end else
28734: GO 28780
// for i = eng downto 5 do
28736: LD_ADDR_VAR 0 3
28740: PUSH
28741: DOUBLE
28742: LD_VAR 0 6
28746: INC
28747: ST_TO_ADDR
28748: LD_INT 5
28750: PUSH
28751: FOR_DOWNTO
28752: IFFALSE 28778
// tmp := tmp union eng [ i ] ;
28754: LD_ADDR_VAR 0 4
28758: PUSH
28759: LD_VAR 0 4
28763: PUSH
28764: LD_VAR 0 6
28768: PUSH
28769: LD_VAR 0 3
28773: ARRAY
28774: UNION
28775: ST_TO_ADDR
28776: GO 28751
28778: POP
28779: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
28780: LD_ADDR_VAR 0 2
28784: PUSH
28785: LD_VAR 0 2
28789: PPUSH
28790: LD_INT 1
28792: PPUSH
28793: LD_VAR 0 4
28797: PUSH
28798: LD_VAR 0 5
28802: DIFF
28803: PPUSH
28804: CALL_OW 1
28808: ST_TO_ADDR
// exit ;
28809: GO 28811
// end ; end ;
28811: LD_VAR 0 2
28815: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
28820: PPUSH
// if not mc_bases then
28821: LD_EXP 87
28825: NOT
28826: IFFALSE 28830
// exit ;
28828: GO 28936
// for i = 1 to mc_bases do
28830: LD_ADDR_VAR 0 2
28834: PUSH
28835: DOUBLE
28836: LD_INT 1
28838: DEC
28839: ST_TO_ADDR
28840: LD_EXP 87
28844: PUSH
28845: FOR_TO
28846: IFFALSE 28927
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
28848: LD_ADDR_VAR 0 3
28852: PUSH
28853: LD_EXP 87
28857: PUSH
28858: LD_VAR 0 2
28862: ARRAY
28863: PPUSH
28864: LD_INT 21
28866: PUSH
28867: LD_INT 3
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 3
28876: PUSH
28877: LD_INT 24
28879: PUSH
28880: LD_INT 1000
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PPUSH
28895: CALL_OW 72
28899: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
28900: LD_ADDR_EXP 88
28904: PUSH
28905: LD_EXP 88
28909: PPUSH
28910: LD_VAR 0 2
28914: PPUSH
28915: LD_VAR 0 3
28919: PPUSH
28920: CALL_OW 1
28924: ST_TO_ADDR
// end ;
28925: GO 28845
28927: POP
28928: POP
// RaiseSailEvent ( 101 ) ;
28929: LD_INT 101
28931: PPUSH
28932: CALL_OW 427
// end ;
28936: LD_VAR 0 1
28940: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
28941: LD_INT 0
28943: PPUSH
28944: PPUSH
28945: PPUSH
28946: PPUSH
28947: PPUSH
28948: PPUSH
28949: PPUSH
// if not mc_bases then
28950: LD_EXP 87
28954: NOT
28955: IFFALSE 28959
// exit ;
28957: GO 29532
// for i = 1 to mc_bases do
28959: LD_ADDR_VAR 0 2
28963: PUSH
28964: DOUBLE
28965: LD_INT 1
28967: DEC
28968: ST_TO_ADDR
28969: LD_EXP 87
28973: PUSH
28974: FOR_TO
28975: IFFALSE 29523
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
28977: LD_ADDR_VAR 0 5
28981: PUSH
28982: LD_EXP 87
28986: PUSH
28987: LD_VAR 0 2
28991: ARRAY
28992: PUSH
28993: LD_EXP 116
28997: PUSH
28998: LD_VAR 0 2
29002: ARRAY
29003: UNION
29004: PPUSH
29005: LD_INT 21
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: LD_INT 3
29020: PUSH
29021: LD_INT 54
29023: PUSH
29024: EMPTY
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 3
29033: PUSH
29034: LD_INT 24
29036: PUSH
29037: LD_INT 800
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PPUSH
29057: CALL_OW 72
29061: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
29062: LD_ADDR_VAR 0 6
29066: PUSH
29067: LD_EXP 87
29071: PUSH
29072: LD_VAR 0 2
29076: ARRAY
29077: PPUSH
29078: LD_INT 21
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 3
29093: PUSH
29094: LD_INT 54
29096: PUSH
29097: EMPTY
29098: LIST
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 3
29106: PUSH
29107: LD_INT 24
29109: PUSH
29110: LD_INT 250
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PPUSH
29130: CALL_OW 72
29134: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
29135: LD_ADDR_VAR 0 7
29139: PUSH
29140: LD_VAR 0 5
29144: PUSH
29145: LD_VAR 0 6
29149: DIFF
29150: ST_TO_ADDR
// if not need_heal_1 then
29151: LD_VAR 0 6
29155: NOT
29156: IFFALSE 29189
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
29158: LD_ADDR_EXP 90
29162: PUSH
29163: LD_EXP 90
29167: PPUSH
29168: LD_VAR 0 2
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PPUSH
29180: EMPTY
29181: PPUSH
29182: CALL 55556 0 3
29186: ST_TO_ADDR
29187: GO 29259
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
29189: LD_ADDR_EXP 90
29193: PUSH
29194: LD_EXP 90
29198: PPUSH
29199: LD_VAR 0 2
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PPUSH
29211: LD_EXP 90
29215: PUSH
29216: LD_VAR 0 2
29220: ARRAY
29221: PUSH
29222: LD_INT 1
29224: ARRAY
29225: PPUSH
29226: LD_INT 3
29228: PUSH
29229: LD_INT 24
29231: PUSH
29232: LD_INT 1000
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PPUSH
29243: CALL_OW 72
29247: PUSH
29248: LD_VAR 0 6
29252: UNION
29253: PPUSH
29254: CALL 55556 0 3
29258: ST_TO_ADDR
// if not need_heal_2 then
29259: LD_VAR 0 7
29263: NOT
29264: IFFALSE 29297
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
29266: LD_ADDR_EXP 90
29270: PUSH
29271: LD_EXP 90
29275: PPUSH
29276: LD_VAR 0 2
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PPUSH
29288: EMPTY
29289: PPUSH
29290: CALL 55556 0 3
29294: ST_TO_ADDR
29295: GO 29329
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
29297: LD_ADDR_EXP 90
29301: PUSH
29302: LD_EXP 90
29306: PPUSH
29307: LD_VAR 0 2
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PPUSH
29319: LD_VAR 0 7
29323: PPUSH
29324: CALL 55556 0 3
29328: ST_TO_ADDR
// if need_heal_2 then
29329: LD_VAR 0 7
29333: IFFALSE 29505
// for j in need_heal_2 do
29335: LD_ADDR_VAR 0 3
29339: PUSH
29340: LD_VAR 0 7
29344: PUSH
29345: FOR_IN
29346: IFFALSE 29503
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
29348: LD_ADDR_VAR 0 5
29352: PUSH
29353: LD_EXP 87
29357: PUSH
29358: LD_VAR 0 2
29362: ARRAY
29363: PPUSH
29364: LD_INT 2
29366: PUSH
29367: LD_INT 30
29369: PUSH
29370: LD_INT 6
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 30
29379: PUSH
29380: LD_INT 7
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 30
29389: PUSH
29390: LD_INT 8
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 30
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 30
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 25
29419: PUSH
29420: LD_INT 4
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: PPUSH
29436: CALL_OW 72
29440: ST_TO_ADDR
// if tmp then
29441: LD_VAR 0 5
29445: IFFALSE 29501
// begin k := NearestUnitToUnit ( tmp , j ) ;
29447: LD_ADDR_VAR 0 4
29451: PUSH
29452: LD_VAR 0 5
29456: PPUSH
29457: LD_VAR 0 3
29461: PPUSH
29462: CALL_OW 74
29466: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
29467: LD_VAR 0 3
29471: PPUSH
29472: LD_VAR 0 4
29476: PPUSH
29477: CALL_OW 296
29481: PUSH
29482: LD_INT 7
29484: GREATER
29485: IFFALSE 29501
// ComMoveUnit ( j , k ) ;
29487: LD_VAR 0 3
29491: PPUSH
29492: LD_VAR 0 4
29496: PPUSH
29497: CALL_OW 112
// end ; end ;
29501: GO 29345
29503: POP
29504: POP
// if not need_heal_1 and not need_heal_2 then
29505: LD_VAR 0 6
29509: NOT
29510: PUSH
29511: LD_VAR 0 7
29515: NOT
29516: AND
29517: IFFALSE 29521
// continue ;
29519: GO 28974
// end ;
29521: GO 28974
29523: POP
29524: POP
// RaiseSailEvent ( 102 ) ;
29525: LD_INT 102
29527: PPUSH
29528: CALL_OW 427
// end ;
29532: LD_VAR 0 1
29536: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
29537: LD_INT 0
29539: PPUSH
29540: PPUSH
29541: PPUSH
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
// if not mc_bases then
29547: LD_EXP 87
29551: NOT
29552: IFFALSE 29556
// exit ;
29554: GO 30396
// for i = 1 to mc_bases do
29556: LD_ADDR_VAR 0 2
29560: PUSH
29561: DOUBLE
29562: LD_INT 1
29564: DEC
29565: ST_TO_ADDR
29566: LD_EXP 87
29570: PUSH
29571: FOR_TO
29572: IFFALSE 30394
// begin if not mc_building_need_repair [ i ] then
29574: LD_EXP 88
29578: PUSH
29579: LD_VAR 0 2
29583: ARRAY
29584: NOT
29585: IFFALSE 29759
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
29587: LD_ADDR_VAR 0 6
29591: PUSH
29592: LD_EXP 106
29596: PUSH
29597: LD_VAR 0 2
29601: ARRAY
29602: PPUSH
29603: LD_INT 3
29605: PUSH
29606: LD_INT 24
29608: PUSH
29609: LD_INT 1000
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 2
29622: PUSH
29623: LD_INT 34
29625: PUSH
29626: LD_INT 13
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 34
29635: PUSH
29636: LD_INT 52
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PPUSH
29652: CALL_OW 72
29656: ST_TO_ADDR
// if cranes then
29657: LD_VAR 0 6
29661: IFFALSE 29723
// for j in cranes do
29663: LD_ADDR_VAR 0 3
29667: PUSH
29668: LD_VAR 0 6
29672: PUSH
29673: FOR_IN
29674: IFFALSE 29721
// if not IsInArea ( j , mc_parking [ i ] ) then
29676: LD_VAR 0 3
29680: PPUSH
29681: LD_EXP 111
29685: PUSH
29686: LD_VAR 0 2
29690: ARRAY
29691: PPUSH
29692: CALL_OW 308
29696: NOT
29697: IFFALSE 29719
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29699: LD_VAR 0 3
29703: PPUSH
29704: LD_EXP 111
29708: PUSH
29709: LD_VAR 0 2
29713: ARRAY
29714: PPUSH
29715: CALL_OW 113
29719: GO 29673
29721: POP
29722: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
29723: LD_ADDR_EXP 89
29727: PUSH
29728: LD_EXP 89
29732: PPUSH
29733: LD_VAR 0 2
29737: PPUSH
29738: EMPTY
29739: PPUSH
29740: CALL_OW 1
29744: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
29745: LD_VAR 0 2
29749: PPUSH
29750: LD_INT 101
29752: PPUSH
29753: CALL 24649 0 2
// continue ;
29757: GO 29571
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
29759: LD_ADDR_EXP 93
29763: PUSH
29764: LD_EXP 93
29768: PPUSH
29769: LD_VAR 0 2
29773: PPUSH
29774: EMPTY
29775: PPUSH
29776: CALL_OW 1
29780: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
29781: LD_VAR 0 2
29785: PPUSH
29786: LD_INT 103
29788: PPUSH
29789: CALL 24649 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
29793: LD_ADDR_VAR 0 5
29797: PUSH
29798: LD_EXP 87
29802: PUSH
29803: LD_VAR 0 2
29807: ARRAY
29808: PUSH
29809: LD_EXP 116
29813: PUSH
29814: LD_VAR 0 2
29818: ARRAY
29819: UNION
29820: PPUSH
29821: LD_INT 2
29823: PUSH
29824: LD_INT 25
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 25
29836: PUSH
29837: LD_INT 16
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: PUSH
29849: EMPTY
29850: LIST
29851: PPUSH
29852: CALL_OW 72
29856: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
29857: LD_ADDR_VAR 0 6
29861: PUSH
29862: LD_EXP 106
29866: PUSH
29867: LD_VAR 0 2
29871: ARRAY
29872: PPUSH
29873: LD_INT 2
29875: PUSH
29876: LD_INT 34
29878: PUSH
29879: LD_INT 13
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 34
29888: PUSH
29889: LD_INT 52
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: PPUSH
29901: CALL_OW 72
29905: ST_TO_ADDR
// if cranes then
29906: LD_VAR 0 6
29910: IFFALSE 30046
// begin for j in cranes do
29912: LD_ADDR_VAR 0 3
29916: PUSH
29917: LD_VAR 0 6
29921: PUSH
29922: FOR_IN
29923: IFFALSE 30044
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
29925: LD_VAR 0 3
29929: PPUSH
29930: CALL_OW 256
29934: PUSH
29935: LD_INT 500
29937: GREATEREQUAL
29938: PUSH
29939: LD_VAR 0 3
29943: PPUSH
29944: CALL_OW 314
29948: NOT
29949: AND
29950: IFFALSE 29984
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
29952: LD_VAR 0 3
29956: PPUSH
29957: LD_EXP 88
29961: PUSH
29962: LD_VAR 0 2
29966: ARRAY
29967: PPUSH
29968: LD_VAR 0 3
29972: PPUSH
29973: CALL_OW 74
29977: PPUSH
29978: CALL_OW 130
29982: GO 30042
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
29984: LD_VAR 0 3
29988: PPUSH
29989: CALL_OW 256
29993: PUSH
29994: LD_INT 500
29996: LESS
29997: PUSH
29998: LD_VAR 0 3
30002: PPUSH
30003: LD_EXP 111
30007: PUSH
30008: LD_VAR 0 2
30012: ARRAY
30013: PPUSH
30014: CALL_OW 308
30018: NOT
30019: AND
30020: IFFALSE 30042
// ComMoveToArea ( j , mc_parking [ i ] ) ;
30022: LD_VAR 0 3
30026: PPUSH
30027: LD_EXP 111
30031: PUSH
30032: LD_VAR 0 2
30036: ARRAY
30037: PPUSH
30038: CALL_OW 113
30042: GO 29922
30044: POP
30045: POP
// end ; if not tmp then
30046: LD_VAR 0 5
30050: NOT
30051: IFFALSE 30055
// continue ;
30053: GO 29571
// for j in tmp do
30055: LD_ADDR_VAR 0 3
30059: PUSH
30060: LD_VAR 0 5
30064: PUSH
30065: FOR_IN
30066: IFFALSE 30390
// begin if mc_need_heal [ i ] then
30068: LD_EXP 90
30072: PUSH
30073: LD_VAR 0 2
30077: ARRAY
30078: IFFALSE 30126
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
30080: LD_VAR 0 3
30084: PUSH
30085: LD_EXP 90
30089: PUSH
30090: LD_VAR 0 2
30094: ARRAY
30095: PUSH
30096: LD_INT 1
30098: ARRAY
30099: IN
30100: PUSH
30101: LD_VAR 0 3
30105: PUSH
30106: LD_EXP 90
30110: PUSH
30111: LD_VAR 0 2
30115: ARRAY
30116: PUSH
30117: LD_INT 2
30119: ARRAY
30120: IN
30121: OR
30122: IFFALSE 30126
// continue ;
30124: GO 30065
// if IsInUnit ( j ) then
30126: LD_VAR 0 3
30130: PPUSH
30131: CALL_OW 310
30135: IFFALSE 30146
// ComExitBuilding ( j ) ;
30137: LD_VAR 0 3
30141: PPUSH
30142: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
30146: LD_VAR 0 3
30150: PUSH
30151: LD_EXP 89
30155: PUSH
30156: LD_VAR 0 2
30160: ARRAY
30161: IN
30162: NOT
30163: IFFALSE 30221
// begin SetTag ( j , 101 ) ;
30165: LD_VAR 0 3
30169: PPUSH
30170: LD_INT 101
30172: PPUSH
30173: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
30177: LD_ADDR_EXP 89
30181: PUSH
30182: LD_EXP 89
30186: PPUSH
30187: LD_VAR 0 2
30191: PUSH
30192: LD_EXP 89
30196: PUSH
30197: LD_VAR 0 2
30201: ARRAY
30202: PUSH
30203: LD_INT 1
30205: PLUS
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PPUSH
30211: LD_VAR 0 3
30215: PPUSH
30216: CALL 55556 0 3
30220: ST_TO_ADDR
// end ; wait ( 1 ) ;
30221: LD_INT 1
30223: PPUSH
30224: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
30228: LD_ADDR_VAR 0 7
30232: PUSH
30233: LD_EXP 88
30237: PUSH
30238: LD_VAR 0 2
30242: ARRAY
30243: ST_TO_ADDR
// if mc_scan [ i ] then
30244: LD_EXP 110
30248: PUSH
30249: LD_VAR 0 2
30253: ARRAY
30254: IFFALSE 30323
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
30256: LD_ADDR_VAR 0 7
30260: PUSH
30261: LD_EXP 88
30265: PUSH
30266: LD_VAR 0 2
30270: ARRAY
30271: PPUSH
30272: LD_INT 3
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: LD_INT 30
30280: PUSH
30281: LD_INT 32
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 30
30290: PUSH
30291: LD_INT 33
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 30
30300: PUSH
30301: LD_INT 31
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PPUSH
30318: CALL_OW 72
30322: ST_TO_ADDR
// if not to_repair_tmp then
30323: LD_VAR 0 7
30327: NOT
30328: IFFALSE 30332
// continue ;
30330: GO 30065
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
30332: LD_ADDR_VAR 0 8
30336: PUSH
30337: LD_VAR 0 7
30341: PPUSH
30342: LD_VAR 0 3
30346: PPUSH
30347: CALL_OW 74
30351: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
30352: LD_VAR 0 8
30356: PPUSH
30357: LD_INT 14
30359: PPUSH
30360: CALL 58149 0 2
30364: PUSH
30365: LD_INT 4
30367: ARRAY
30368: PUSH
30369: LD_INT 5
30371: LESS
30372: IFFALSE 30388
// ComRepairBuilding ( j , to_repair ) ;
30374: LD_VAR 0 3
30378: PPUSH
30379: LD_VAR 0 8
30383: PPUSH
30384: CALL_OW 130
// end ;
30388: GO 30065
30390: POP
30391: POP
// end ;
30392: GO 29571
30394: POP
30395: POP
// end ;
30396: LD_VAR 0 1
30400: RET
// export function MC_Heal ; var i , j , tmp ; begin
30401: LD_INT 0
30403: PPUSH
30404: PPUSH
30405: PPUSH
30406: PPUSH
// if not mc_bases then
30407: LD_EXP 87
30411: NOT
30412: IFFALSE 30416
// exit ;
30414: GO 30818
// for i = 1 to mc_bases do
30416: LD_ADDR_VAR 0 2
30420: PUSH
30421: DOUBLE
30422: LD_INT 1
30424: DEC
30425: ST_TO_ADDR
30426: LD_EXP 87
30430: PUSH
30431: FOR_TO
30432: IFFALSE 30816
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
30434: LD_EXP 90
30438: PUSH
30439: LD_VAR 0 2
30443: ARRAY
30444: PUSH
30445: LD_INT 1
30447: ARRAY
30448: NOT
30449: PUSH
30450: LD_EXP 90
30454: PUSH
30455: LD_VAR 0 2
30459: ARRAY
30460: PUSH
30461: LD_INT 2
30463: ARRAY
30464: NOT
30465: AND
30466: IFFALSE 30504
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
30468: LD_ADDR_EXP 91
30472: PUSH
30473: LD_EXP 91
30477: PPUSH
30478: LD_VAR 0 2
30482: PPUSH
30483: EMPTY
30484: PPUSH
30485: CALL_OW 1
30489: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
30490: LD_VAR 0 2
30494: PPUSH
30495: LD_INT 102
30497: PPUSH
30498: CALL 24649 0 2
// continue ;
30502: GO 30431
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
30504: LD_ADDR_VAR 0 4
30508: PUSH
30509: LD_EXP 87
30513: PUSH
30514: LD_VAR 0 2
30518: ARRAY
30519: PPUSH
30520: LD_INT 25
30522: PUSH
30523: LD_INT 4
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PPUSH
30530: CALL_OW 72
30534: ST_TO_ADDR
// if not tmp then
30535: LD_VAR 0 4
30539: NOT
30540: IFFALSE 30544
// continue ;
30542: GO 30431
// if mc_taming [ i ] then
30544: LD_EXP 118
30548: PUSH
30549: LD_VAR 0 2
30553: ARRAY
30554: IFFALSE 30578
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
30556: LD_ADDR_EXP 118
30560: PUSH
30561: LD_EXP 118
30565: PPUSH
30566: LD_VAR 0 2
30570: PPUSH
30571: EMPTY
30572: PPUSH
30573: CALL_OW 1
30577: ST_TO_ADDR
// for j in tmp do
30578: LD_ADDR_VAR 0 3
30582: PUSH
30583: LD_VAR 0 4
30587: PUSH
30588: FOR_IN
30589: IFFALSE 30812
// begin if IsInUnit ( j ) then
30591: LD_VAR 0 3
30595: PPUSH
30596: CALL_OW 310
30600: IFFALSE 30611
// ComExitBuilding ( j ) ;
30602: LD_VAR 0 3
30606: PPUSH
30607: CALL_OW 122
// if not j in mc_healers [ i ] then
30611: LD_VAR 0 3
30615: PUSH
30616: LD_EXP 91
30620: PUSH
30621: LD_VAR 0 2
30625: ARRAY
30626: IN
30627: NOT
30628: IFFALSE 30674
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
30630: LD_ADDR_EXP 91
30634: PUSH
30635: LD_EXP 91
30639: PPUSH
30640: LD_VAR 0 2
30644: PUSH
30645: LD_EXP 91
30649: PUSH
30650: LD_VAR 0 2
30654: ARRAY
30655: PUSH
30656: LD_INT 1
30658: PLUS
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PPUSH
30664: LD_VAR 0 3
30668: PPUSH
30669: CALL 55556 0 3
30673: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
30674: LD_VAR 0 3
30678: PPUSH
30679: CALL_OW 110
30683: PUSH
30684: LD_INT 102
30686: NONEQUAL
30687: IFFALSE 30701
// SetTag ( j , 102 ) ;
30689: LD_VAR 0 3
30693: PPUSH
30694: LD_INT 102
30696: PPUSH
30697: CALL_OW 109
// Wait ( 3 ) ;
30701: LD_INT 3
30703: PPUSH
30704: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
30708: LD_EXP 90
30712: PUSH
30713: LD_VAR 0 2
30717: ARRAY
30718: PUSH
30719: LD_INT 1
30721: ARRAY
30722: IFFALSE 30754
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
30724: LD_VAR 0 3
30728: PPUSH
30729: LD_EXP 90
30733: PUSH
30734: LD_VAR 0 2
30738: ARRAY
30739: PUSH
30740: LD_INT 1
30742: ARRAY
30743: PUSH
30744: LD_INT 1
30746: ARRAY
30747: PPUSH
30748: CALL_OW 128
30752: GO 30810
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
30754: LD_VAR 0 3
30758: PPUSH
30759: CALL_OW 314
30763: NOT
30764: PUSH
30765: LD_EXP 90
30769: PUSH
30770: LD_VAR 0 2
30774: ARRAY
30775: PUSH
30776: LD_INT 2
30778: ARRAY
30779: AND
30780: IFFALSE 30810
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
30782: LD_VAR 0 3
30786: PPUSH
30787: LD_EXP 90
30791: PUSH
30792: LD_VAR 0 2
30796: ARRAY
30797: PUSH
30798: LD_INT 2
30800: ARRAY
30801: PUSH
30802: LD_INT 1
30804: ARRAY
30805: PPUSH
30806: CALL_OW 128
// end ;
30810: GO 30588
30812: POP
30813: POP
// end ;
30814: GO 30431
30816: POP
30817: POP
// end ;
30818: LD_VAR 0 1
30822: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
30823: LD_INT 0
30825: PPUSH
30826: PPUSH
30827: PPUSH
30828: PPUSH
30829: PPUSH
// if not mc_bases then
30830: LD_EXP 87
30834: NOT
30835: IFFALSE 30839
// exit ;
30837: GO 31982
// for i = 1 to mc_bases do
30839: LD_ADDR_VAR 0 2
30843: PUSH
30844: DOUBLE
30845: LD_INT 1
30847: DEC
30848: ST_TO_ADDR
30849: LD_EXP 87
30853: PUSH
30854: FOR_TO
30855: IFFALSE 31980
// begin if mc_scan [ i ] then
30857: LD_EXP 110
30861: PUSH
30862: LD_VAR 0 2
30866: ARRAY
30867: IFFALSE 30871
// continue ;
30869: GO 30854
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
30871: LD_EXP 92
30875: PUSH
30876: LD_VAR 0 2
30880: ARRAY
30881: NOT
30882: PUSH
30883: LD_EXP 94
30887: PUSH
30888: LD_VAR 0 2
30892: ARRAY
30893: NOT
30894: AND
30895: PUSH
30896: LD_EXP 93
30900: PUSH
30901: LD_VAR 0 2
30905: ARRAY
30906: AND
30907: IFFALSE 30945
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
30909: LD_ADDR_EXP 93
30913: PUSH
30914: LD_EXP 93
30918: PPUSH
30919: LD_VAR 0 2
30923: PPUSH
30924: EMPTY
30925: PPUSH
30926: CALL_OW 1
30930: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
30931: LD_VAR 0 2
30935: PPUSH
30936: LD_INT 103
30938: PPUSH
30939: CALL 24649 0 2
// continue ;
30943: GO 30854
// end ; if mc_construct_list [ i ] then
30945: LD_EXP 94
30949: PUSH
30950: LD_VAR 0 2
30954: ARRAY
30955: IFFALSE 31175
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
30957: LD_ADDR_VAR 0 4
30961: PUSH
30962: LD_EXP 87
30966: PUSH
30967: LD_VAR 0 2
30971: ARRAY
30972: PPUSH
30973: LD_INT 25
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PPUSH
30983: CALL_OW 72
30987: PUSH
30988: LD_EXP 89
30992: PUSH
30993: LD_VAR 0 2
30997: ARRAY
30998: DIFF
30999: ST_TO_ADDR
// if not tmp then
31000: LD_VAR 0 4
31004: NOT
31005: IFFALSE 31009
// continue ;
31007: GO 30854
// for j in tmp do
31009: LD_ADDR_VAR 0 3
31013: PUSH
31014: LD_VAR 0 4
31018: PUSH
31019: FOR_IN
31020: IFFALSE 31171
// begin if not mc_builders [ i ] then
31022: LD_EXP 93
31026: PUSH
31027: LD_VAR 0 2
31031: ARRAY
31032: NOT
31033: IFFALSE 31091
// begin SetTag ( j , 103 ) ;
31035: LD_VAR 0 3
31039: PPUSH
31040: LD_INT 103
31042: PPUSH
31043: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
31047: LD_ADDR_EXP 93
31051: PUSH
31052: LD_EXP 93
31056: PPUSH
31057: LD_VAR 0 2
31061: PUSH
31062: LD_EXP 93
31066: PUSH
31067: LD_VAR 0 2
31071: ARRAY
31072: PUSH
31073: LD_INT 1
31075: PLUS
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PPUSH
31081: LD_VAR 0 3
31085: PPUSH
31086: CALL 55556 0 3
31090: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
31091: LD_VAR 0 3
31095: PPUSH
31096: CALL_OW 310
31100: IFFALSE 31111
// ComExitBuilding ( j ) ;
31102: LD_VAR 0 3
31106: PPUSH
31107: CALL_OW 122
// wait ( 3 ) ;
31111: LD_INT 3
31113: PPUSH
31114: CALL_OW 67
// if not mc_construct_list [ i ] then
31118: LD_EXP 94
31122: PUSH
31123: LD_VAR 0 2
31127: ARRAY
31128: NOT
31129: IFFALSE 31133
// break ;
31131: GO 31171
// if not HasTask ( j ) then
31133: LD_VAR 0 3
31137: PPUSH
31138: CALL_OW 314
31142: NOT
31143: IFFALSE 31169
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
31145: LD_VAR 0 3
31149: PPUSH
31150: LD_EXP 94
31154: PUSH
31155: LD_VAR 0 2
31159: ARRAY
31160: PUSH
31161: LD_INT 1
31163: ARRAY
31164: PPUSH
31165: CALL 58407 0 2
// end ;
31169: GO 31019
31171: POP
31172: POP
// end else
31173: GO 31978
// if mc_build_list [ i ] then
31175: LD_EXP 92
31179: PUSH
31180: LD_VAR 0 2
31184: ARRAY
31185: IFFALSE 31978
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31187: LD_ADDR_VAR 0 5
31191: PUSH
31192: LD_EXP 87
31196: PUSH
31197: LD_VAR 0 2
31201: ARRAY
31202: PPUSH
31203: LD_INT 2
31205: PUSH
31206: LD_INT 30
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 30
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: PPUSH
31231: CALL_OW 72
31235: ST_TO_ADDR
// if depot then
31236: LD_VAR 0 5
31240: IFFALSE 31258
// depot := depot [ 1 ] else
31242: LD_ADDR_VAR 0 5
31246: PUSH
31247: LD_VAR 0 5
31251: PUSH
31252: LD_INT 1
31254: ARRAY
31255: ST_TO_ADDR
31256: GO 31266
// depot := 0 ;
31258: LD_ADDR_VAR 0 5
31262: PUSH
31263: LD_INT 0
31265: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
31266: LD_EXP 92
31270: PUSH
31271: LD_VAR 0 2
31275: ARRAY
31276: PUSH
31277: LD_INT 1
31279: ARRAY
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: PPUSH
31285: CALL 58237 0 1
31289: PUSH
31290: LD_EXP 87
31294: PUSH
31295: LD_VAR 0 2
31299: ARRAY
31300: PPUSH
31301: LD_INT 2
31303: PUSH
31304: LD_INT 30
31306: PUSH
31307: LD_INT 2
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 30
31316: PUSH
31317: LD_INT 3
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: LIST
31328: PPUSH
31329: CALL_OW 72
31333: NOT
31334: AND
31335: IFFALSE 31440
// begin for j = 1 to mc_build_list [ i ] do
31337: LD_ADDR_VAR 0 3
31341: PUSH
31342: DOUBLE
31343: LD_INT 1
31345: DEC
31346: ST_TO_ADDR
31347: LD_EXP 92
31351: PUSH
31352: LD_VAR 0 2
31356: ARRAY
31357: PUSH
31358: FOR_TO
31359: IFFALSE 31438
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
31361: LD_EXP 92
31365: PUSH
31366: LD_VAR 0 2
31370: ARRAY
31371: PUSH
31372: LD_VAR 0 3
31376: ARRAY
31377: PUSH
31378: LD_INT 1
31380: ARRAY
31381: PUSH
31382: LD_INT 2
31384: EQUAL
31385: IFFALSE 31436
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
31387: LD_ADDR_EXP 92
31391: PUSH
31392: LD_EXP 92
31396: PPUSH
31397: LD_VAR 0 2
31401: PPUSH
31402: LD_EXP 92
31406: PUSH
31407: LD_VAR 0 2
31411: ARRAY
31412: PPUSH
31413: LD_VAR 0 3
31417: PPUSH
31418: LD_INT 1
31420: PPUSH
31421: LD_INT 0
31423: PPUSH
31424: CALL 54974 0 4
31428: PPUSH
31429: CALL_OW 1
31433: ST_TO_ADDR
// break ;
31434: GO 31438
// end ;
31436: GO 31358
31438: POP
31439: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
31440: LD_EXP 92
31444: PUSH
31445: LD_VAR 0 2
31449: ARRAY
31450: PUSH
31451: LD_INT 1
31453: ARRAY
31454: PUSH
31455: LD_INT 1
31457: ARRAY
31458: PUSH
31459: LD_INT 0
31461: EQUAL
31462: PUSH
31463: LD_VAR 0 5
31467: PUSH
31468: LD_VAR 0 5
31472: PPUSH
31473: LD_EXP 92
31477: PUSH
31478: LD_VAR 0 2
31482: ARRAY
31483: PUSH
31484: LD_INT 1
31486: ARRAY
31487: PUSH
31488: LD_INT 1
31490: ARRAY
31491: PPUSH
31492: LD_EXP 92
31496: PUSH
31497: LD_VAR 0 2
31501: ARRAY
31502: PUSH
31503: LD_INT 1
31505: ARRAY
31506: PUSH
31507: LD_INT 2
31509: ARRAY
31510: PPUSH
31511: LD_EXP 92
31515: PUSH
31516: LD_VAR 0 2
31520: ARRAY
31521: PUSH
31522: LD_INT 1
31524: ARRAY
31525: PUSH
31526: LD_INT 3
31528: ARRAY
31529: PPUSH
31530: LD_EXP 92
31534: PUSH
31535: LD_VAR 0 2
31539: ARRAY
31540: PUSH
31541: LD_INT 1
31543: ARRAY
31544: PUSH
31545: LD_INT 4
31547: ARRAY
31548: PPUSH
31549: CALL 62971 0 5
31553: AND
31554: OR
31555: IFFALSE 31836
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
31557: LD_ADDR_VAR 0 4
31561: PUSH
31562: LD_EXP 87
31566: PUSH
31567: LD_VAR 0 2
31571: ARRAY
31572: PPUSH
31573: LD_INT 25
31575: PUSH
31576: LD_INT 2
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PPUSH
31583: CALL_OW 72
31587: PUSH
31588: LD_EXP 89
31592: PUSH
31593: LD_VAR 0 2
31597: ARRAY
31598: DIFF
31599: ST_TO_ADDR
// if not tmp then
31600: LD_VAR 0 4
31604: NOT
31605: IFFALSE 31609
// continue ;
31607: GO 30854
// for j in tmp do
31609: LD_ADDR_VAR 0 3
31613: PUSH
31614: LD_VAR 0 4
31618: PUSH
31619: FOR_IN
31620: IFFALSE 31832
// begin if not mc_builders [ i ] then
31622: LD_EXP 93
31626: PUSH
31627: LD_VAR 0 2
31631: ARRAY
31632: NOT
31633: IFFALSE 31691
// begin SetTag ( j , 103 ) ;
31635: LD_VAR 0 3
31639: PPUSH
31640: LD_INT 103
31642: PPUSH
31643: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
31647: LD_ADDR_EXP 93
31651: PUSH
31652: LD_EXP 93
31656: PPUSH
31657: LD_VAR 0 2
31661: PUSH
31662: LD_EXP 93
31666: PUSH
31667: LD_VAR 0 2
31671: ARRAY
31672: PUSH
31673: LD_INT 1
31675: PLUS
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PPUSH
31681: LD_VAR 0 3
31685: PPUSH
31686: CALL 55556 0 3
31690: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
31691: LD_VAR 0 3
31695: PPUSH
31696: CALL_OW 310
31700: IFFALSE 31711
// ComExitBuilding ( j ) ;
31702: LD_VAR 0 3
31706: PPUSH
31707: CALL_OW 122
// wait ( 3 ) ;
31711: LD_INT 3
31713: PPUSH
31714: CALL_OW 67
// if not mc_build_list [ i ] then
31718: LD_EXP 92
31722: PUSH
31723: LD_VAR 0 2
31727: ARRAY
31728: NOT
31729: IFFALSE 31733
// break ;
31731: GO 31832
// if not HasTask ( j ) then
31733: LD_VAR 0 3
31737: PPUSH
31738: CALL_OW 314
31742: NOT
31743: IFFALSE 31830
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
31745: LD_VAR 0 3
31749: PPUSH
31750: LD_EXP 92
31754: PUSH
31755: LD_VAR 0 2
31759: ARRAY
31760: PUSH
31761: LD_INT 1
31763: ARRAY
31764: PUSH
31765: LD_INT 1
31767: ARRAY
31768: PPUSH
31769: LD_EXP 92
31773: PUSH
31774: LD_VAR 0 2
31778: ARRAY
31779: PUSH
31780: LD_INT 1
31782: ARRAY
31783: PUSH
31784: LD_INT 2
31786: ARRAY
31787: PPUSH
31788: LD_EXP 92
31792: PUSH
31793: LD_VAR 0 2
31797: ARRAY
31798: PUSH
31799: LD_INT 1
31801: ARRAY
31802: PUSH
31803: LD_INT 3
31805: ARRAY
31806: PPUSH
31807: LD_EXP 92
31811: PUSH
31812: LD_VAR 0 2
31816: ARRAY
31817: PUSH
31818: LD_INT 1
31820: ARRAY
31821: PUSH
31822: LD_INT 4
31824: ARRAY
31825: PPUSH
31826: CALL_OW 145
// end ;
31830: GO 31619
31832: POP
31833: POP
// end else
31834: GO 31978
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
31836: LD_EXP 87
31840: PUSH
31841: LD_VAR 0 2
31845: ARRAY
31846: PPUSH
31847: LD_EXP 92
31851: PUSH
31852: LD_VAR 0 2
31856: ARRAY
31857: PUSH
31858: LD_INT 1
31860: ARRAY
31861: PUSH
31862: LD_INT 1
31864: ARRAY
31865: PPUSH
31866: LD_EXP 92
31870: PUSH
31871: LD_VAR 0 2
31875: ARRAY
31876: PUSH
31877: LD_INT 1
31879: ARRAY
31880: PUSH
31881: LD_INT 2
31883: ARRAY
31884: PPUSH
31885: LD_EXP 92
31889: PUSH
31890: LD_VAR 0 2
31894: ARRAY
31895: PUSH
31896: LD_INT 1
31898: ARRAY
31899: PUSH
31900: LD_INT 3
31902: ARRAY
31903: PPUSH
31904: LD_EXP 92
31908: PUSH
31909: LD_VAR 0 2
31913: ARRAY
31914: PUSH
31915: LD_INT 1
31917: ARRAY
31918: PUSH
31919: LD_INT 4
31921: ARRAY
31922: PPUSH
31923: CALL 62307 0 5
31927: NOT
31928: IFFALSE 31978
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
31930: LD_ADDR_EXP 92
31934: PUSH
31935: LD_EXP 92
31939: PPUSH
31940: LD_VAR 0 2
31944: PPUSH
31945: LD_EXP 92
31949: PUSH
31950: LD_VAR 0 2
31954: ARRAY
31955: PPUSH
31956: LD_INT 1
31958: PPUSH
31959: LD_INT 1
31961: NEG
31962: PPUSH
31963: LD_INT 0
31965: PPUSH
31966: CALL 54974 0 4
31970: PPUSH
31971: CALL_OW 1
31975: ST_TO_ADDR
// continue ;
31976: GO 30854
// end ; end ; end ;
31978: GO 30854
31980: POP
31981: POP
// end ;
31982: LD_VAR 0 1
31986: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
31987: LD_INT 0
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
// if not mc_bases then
31995: LD_EXP 87
31999: NOT
32000: IFFALSE 32004
// exit ;
32002: GO 32431
// for i = 1 to mc_bases do
32004: LD_ADDR_VAR 0 2
32008: PUSH
32009: DOUBLE
32010: LD_INT 1
32012: DEC
32013: ST_TO_ADDR
32014: LD_EXP 87
32018: PUSH
32019: FOR_TO
32020: IFFALSE 32429
// begin tmp := mc_build_upgrade [ i ] ;
32022: LD_ADDR_VAR 0 4
32026: PUSH
32027: LD_EXP 119
32031: PUSH
32032: LD_VAR 0 2
32036: ARRAY
32037: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
32038: LD_ADDR_VAR 0 6
32042: PUSH
32043: LD_EXP 120
32047: PUSH
32048: LD_VAR 0 2
32052: ARRAY
32053: PPUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 30
32059: PUSH
32060: LD_INT 6
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 30
32069: PUSH
32070: LD_INT 7
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: LIST
32081: PPUSH
32082: CALL_OW 72
32086: ST_TO_ADDR
// if not tmp and not lab then
32087: LD_VAR 0 4
32091: NOT
32092: PUSH
32093: LD_VAR 0 6
32097: NOT
32098: AND
32099: IFFALSE 32103
// continue ;
32101: GO 32019
// if tmp then
32103: LD_VAR 0 4
32107: IFFALSE 32227
// for j in tmp do
32109: LD_ADDR_VAR 0 3
32113: PUSH
32114: LD_VAR 0 4
32118: PUSH
32119: FOR_IN
32120: IFFALSE 32225
// begin if UpgradeCost ( j ) then
32122: LD_VAR 0 3
32126: PPUSH
32127: CALL 61967 0 1
32131: IFFALSE 32223
// begin ComUpgrade ( j ) ;
32133: LD_VAR 0 3
32137: PPUSH
32138: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
32142: LD_ADDR_EXP 119
32146: PUSH
32147: LD_EXP 119
32151: PPUSH
32152: LD_VAR 0 2
32156: PPUSH
32157: LD_EXP 119
32161: PUSH
32162: LD_VAR 0 2
32166: ARRAY
32167: PUSH
32168: LD_VAR 0 3
32172: DIFF
32173: PPUSH
32174: CALL_OW 1
32178: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
32179: LD_ADDR_EXP 94
32183: PUSH
32184: LD_EXP 94
32188: PPUSH
32189: LD_VAR 0 2
32193: PUSH
32194: LD_EXP 94
32198: PUSH
32199: LD_VAR 0 2
32203: ARRAY
32204: PUSH
32205: LD_INT 1
32207: PLUS
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PPUSH
32213: LD_VAR 0 3
32217: PPUSH
32218: CALL 55556 0 3
32222: ST_TO_ADDR
// end ; end ;
32223: GO 32119
32225: POP
32226: POP
// if not lab or not mc_lab_upgrade [ i ] then
32227: LD_VAR 0 6
32231: NOT
32232: PUSH
32233: LD_EXP 121
32237: PUSH
32238: LD_VAR 0 2
32242: ARRAY
32243: NOT
32244: OR
32245: IFFALSE 32249
// continue ;
32247: GO 32019
// for j in lab do
32249: LD_ADDR_VAR 0 3
32253: PUSH
32254: LD_VAR 0 6
32258: PUSH
32259: FOR_IN
32260: IFFALSE 32425
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
32262: LD_VAR 0 3
32266: PPUSH
32267: CALL_OW 266
32271: PUSH
32272: LD_INT 6
32274: PUSH
32275: LD_INT 7
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: IN
32282: PUSH
32283: LD_VAR 0 3
32287: PPUSH
32288: CALL_OW 461
32292: PUSH
32293: LD_INT 1
32295: NONEQUAL
32296: AND
32297: IFFALSE 32423
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
32299: LD_VAR 0 3
32303: PPUSH
32304: LD_EXP 121
32308: PUSH
32309: LD_VAR 0 2
32313: ARRAY
32314: PUSH
32315: LD_INT 1
32317: ARRAY
32318: PPUSH
32319: CALL 62172 0 2
32323: IFFALSE 32423
// begin ComCancel ( j ) ;
32325: LD_VAR 0 3
32329: PPUSH
32330: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
32334: LD_VAR 0 3
32338: PPUSH
32339: LD_EXP 121
32343: PUSH
32344: LD_VAR 0 2
32348: ARRAY
32349: PUSH
32350: LD_INT 1
32352: ARRAY
32353: PPUSH
32354: CALL_OW 207
// if not j in mc_construct_list [ i ] then
32358: LD_VAR 0 3
32362: PUSH
32363: LD_EXP 94
32367: PUSH
32368: LD_VAR 0 2
32372: ARRAY
32373: IN
32374: NOT
32375: IFFALSE 32421
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
32377: LD_ADDR_EXP 94
32381: PUSH
32382: LD_EXP 94
32386: PPUSH
32387: LD_VAR 0 2
32391: PUSH
32392: LD_EXP 94
32396: PUSH
32397: LD_VAR 0 2
32401: ARRAY
32402: PUSH
32403: LD_INT 1
32405: PLUS
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PPUSH
32411: LD_VAR 0 3
32415: PPUSH
32416: CALL 55556 0 3
32420: ST_TO_ADDR
// break ;
32421: GO 32425
// end ; end ; end ;
32423: GO 32259
32425: POP
32426: POP
// end ;
32427: GO 32019
32429: POP
32430: POP
// end ;
32431: LD_VAR 0 1
32435: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
32436: LD_INT 0
32438: PPUSH
32439: PPUSH
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
// if not mc_bases then
32447: LD_EXP 87
32451: NOT
32452: IFFALSE 32456
// exit ;
32454: GO 32861
// for i = 1 to mc_bases do
32456: LD_ADDR_VAR 0 2
32460: PUSH
32461: DOUBLE
32462: LD_INT 1
32464: DEC
32465: ST_TO_ADDR
32466: LD_EXP 87
32470: PUSH
32471: FOR_TO
32472: IFFALSE 32859
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
32474: LD_EXP 95
32478: PUSH
32479: LD_VAR 0 2
32483: ARRAY
32484: NOT
32485: PUSH
32486: LD_EXP 87
32490: PUSH
32491: LD_VAR 0 2
32495: ARRAY
32496: PPUSH
32497: LD_INT 30
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PPUSH
32507: CALL_OW 72
32511: NOT
32512: OR
32513: IFFALSE 32517
// continue ;
32515: GO 32471
// busy := false ;
32517: LD_ADDR_VAR 0 8
32521: PUSH
32522: LD_INT 0
32524: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32525: LD_ADDR_VAR 0 4
32529: PUSH
32530: LD_EXP 87
32534: PUSH
32535: LD_VAR 0 2
32539: ARRAY
32540: PPUSH
32541: LD_INT 30
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PPUSH
32551: CALL_OW 72
32555: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
32556: LD_ADDR_VAR 0 6
32560: PUSH
32561: LD_EXP 95
32565: PUSH
32566: LD_VAR 0 2
32570: ARRAY
32571: PPUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 30
32577: PUSH
32578: LD_INT 32
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 30
32587: PUSH
32588: LD_INT 33
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: PPUSH
32600: CALL_OW 72
32604: ST_TO_ADDR
// if not t then
32605: LD_VAR 0 6
32609: NOT
32610: IFFALSE 32614
// continue ;
32612: GO 32471
// for j in tmp do
32614: LD_ADDR_VAR 0 3
32618: PUSH
32619: LD_VAR 0 4
32623: PUSH
32624: FOR_IN
32625: IFFALSE 32655
// if not BuildingStatus ( j ) = bs_idle then
32627: LD_VAR 0 3
32631: PPUSH
32632: CALL_OW 461
32636: PUSH
32637: LD_INT 2
32639: EQUAL
32640: NOT
32641: IFFALSE 32653
// begin busy := true ;
32643: LD_ADDR_VAR 0 8
32647: PUSH
32648: LD_INT 1
32650: ST_TO_ADDR
// break ;
32651: GO 32655
// end ;
32653: GO 32624
32655: POP
32656: POP
// if busy then
32657: LD_VAR 0 8
32661: IFFALSE 32665
// continue ;
32663: GO 32471
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
32665: LD_ADDR_VAR 0 7
32669: PUSH
32670: LD_VAR 0 6
32674: PPUSH
32675: LD_INT 35
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PPUSH
32685: CALL_OW 72
32689: ST_TO_ADDR
// if tw then
32690: LD_VAR 0 7
32694: IFFALSE 32771
// begin tw := tw [ 1 ] ;
32696: LD_ADDR_VAR 0 7
32700: PUSH
32701: LD_VAR 0 7
32705: PUSH
32706: LD_INT 1
32708: ARRAY
32709: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
32710: LD_ADDR_VAR 0 9
32714: PUSH
32715: LD_VAR 0 7
32719: PPUSH
32720: LD_EXP 112
32724: PUSH
32725: LD_VAR 0 2
32729: ARRAY
32730: PPUSH
32731: CALL 60526 0 2
32735: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
32736: LD_EXP 126
32740: PUSH
32741: LD_VAR 0 2
32745: ARRAY
32746: IFFALSE 32769
// if not weapon in mc_allowed_tower_weapons [ i ] then
32748: LD_VAR 0 9
32752: PUSH
32753: LD_EXP 126
32757: PUSH
32758: LD_VAR 0 2
32762: ARRAY
32763: IN
32764: NOT
32765: IFFALSE 32769
// continue ;
32767: GO 32471
// end else
32769: GO 32834
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
32771: LD_ADDR_VAR 0 5
32775: PUSH
32776: LD_EXP 95
32780: PUSH
32781: LD_VAR 0 2
32785: ARRAY
32786: PPUSH
32787: LD_VAR 0 4
32791: PPUSH
32792: CALL 86028 0 2
32796: ST_TO_ADDR
// if not tmp2 then
32797: LD_VAR 0 5
32801: NOT
32802: IFFALSE 32806
// continue ;
32804: GO 32471
// tw := tmp2 [ 1 ] ;
32806: LD_ADDR_VAR 0 7
32810: PUSH
32811: LD_VAR 0 5
32815: PUSH
32816: LD_INT 1
32818: ARRAY
32819: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
32820: LD_ADDR_VAR 0 9
32824: PUSH
32825: LD_VAR 0 5
32829: PUSH
32830: LD_INT 2
32832: ARRAY
32833: ST_TO_ADDR
// end ; if not weapon then
32834: LD_VAR 0 9
32838: NOT
32839: IFFALSE 32843
// continue ;
32841: GO 32471
// ComPlaceWeapon ( tw , weapon ) ;
32843: LD_VAR 0 7
32847: PPUSH
32848: LD_VAR 0 9
32852: PPUSH
32853: CALL_OW 148
// end ;
32857: GO 32471
32859: POP
32860: POP
// end ;
32861: LD_VAR 0 1
32865: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
32866: LD_INT 0
32868: PPUSH
32869: PPUSH
32870: PPUSH
32871: PPUSH
32872: PPUSH
32873: PPUSH
// if not mc_bases then
32874: LD_EXP 87
32878: NOT
32879: IFFALSE 32883
// exit ;
32881: GO 33659
// for i = 1 to mc_bases do
32883: LD_ADDR_VAR 0 2
32887: PUSH
32888: DOUBLE
32889: LD_INT 1
32891: DEC
32892: ST_TO_ADDR
32893: LD_EXP 87
32897: PUSH
32898: FOR_TO
32899: IFFALSE 33657
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
32901: LD_EXP 100
32905: PUSH
32906: LD_VAR 0 2
32910: ARRAY
32911: NOT
32912: PUSH
32913: LD_EXP 100
32917: PUSH
32918: LD_VAR 0 2
32922: ARRAY
32923: PUSH
32924: LD_EXP 101
32928: PUSH
32929: LD_VAR 0 2
32933: ARRAY
32934: EQUAL
32935: OR
32936: PUSH
32937: LD_EXP 110
32941: PUSH
32942: LD_VAR 0 2
32946: ARRAY
32947: OR
32948: IFFALSE 32952
// continue ;
32950: GO 32898
// if mc_miners [ i ] then
32952: LD_EXP 101
32956: PUSH
32957: LD_VAR 0 2
32961: ARRAY
32962: IFFALSE 33344
// begin for j = mc_miners [ i ] downto 1 do
32964: LD_ADDR_VAR 0 3
32968: PUSH
32969: DOUBLE
32970: LD_EXP 101
32974: PUSH
32975: LD_VAR 0 2
32979: ARRAY
32980: INC
32981: ST_TO_ADDR
32982: LD_INT 1
32984: PUSH
32985: FOR_DOWNTO
32986: IFFALSE 33342
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
32988: LD_EXP 101
32992: PUSH
32993: LD_VAR 0 2
32997: ARRAY
32998: PUSH
32999: LD_VAR 0 3
33003: ARRAY
33004: PPUSH
33005: CALL_OW 301
33009: PUSH
33010: LD_EXP 101
33014: PUSH
33015: LD_VAR 0 2
33019: ARRAY
33020: PUSH
33021: LD_VAR 0 3
33025: ARRAY
33026: PPUSH
33027: CALL_OW 257
33031: PUSH
33032: LD_INT 1
33034: NONEQUAL
33035: OR
33036: IFFALSE 33099
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
33038: LD_ADDR_VAR 0 5
33042: PUSH
33043: LD_EXP 101
33047: PUSH
33048: LD_VAR 0 2
33052: ARRAY
33053: PUSH
33054: LD_EXP 101
33058: PUSH
33059: LD_VAR 0 2
33063: ARRAY
33064: PUSH
33065: LD_VAR 0 3
33069: ARRAY
33070: DIFF
33071: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
33072: LD_ADDR_EXP 101
33076: PUSH
33077: LD_EXP 101
33081: PPUSH
33082: LD_VAR 0 2
33086: PPUSH
33087: LD_VAR 0 5
33091: PPUSH
33092: CALL_OW 1
33096: ST_TO_ADDR
// continue ;
33097: GO 32985
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
33099: LD_EXP 101
33103: PUSH
33104: LD_VAR 0 2
33108: ARRAY
33109: PUSH
33110: LD_VAR 0 3
33114: ARRAY
33115: PPUSH
33116: CALL_OW 257
33120: PUSH
33121: LD_INT 1
33123: EQUAL
33124: PUSH
33125: LD_EXP 101
33129: PUSH
33130: LD_VAR 0 2
33134: ARRAY
33135: PUSH
33136: LD_VAR 0 3
33140: ARRAY
33141: PPUSH
33142: CALL_OW 459
33146: NOT
33147: AND
33148: PUSH
33149: LD_EXP 101
33153: PUSH
33154: LD_VAR 0 2
33158: ARRAY
33159: PUSH
33160: LD_VAR 0 3
33164: ARRAY
33165: PPUSH
33166: CALL_OW 314
33170: NOT
33171: AND
33172: IFFALSE 33340
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
33174: LD_EXP 101
33178: PUSH
33179: LD_VAR 0 2
33183: ARRAY
33184: PUSH
33185: LD_VAR 0 3
33189: ARRAY
33190: PPUSH
33191: CALL_OW 310
33195: IFFALSE 33218
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
33197: LD_EXP 101
33201: PUSH
33202: LD_VAR 0 2
33206: ARRAY
33207: PUSH
33208: LD_VAR 0 3
33212: ARRAY
33213: PPUSH
33214: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
33218: LD_EXP 101
33222: PUSH
33223: LD_VAR 0 2
33227: ARRAY
33228: PUSH
33229: LD_VAR 0 3
33233: ARRAY
33234: PPUSH
33235: CALL_OW 314
33239: NOT
33240: IFFALSE 33340
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
33242: LD_EXP 101
33246: PUSH
33247: LD_VAR 0 2
33251: ARRAY
33252: PUSH
33253: LD_VAR 0 3
33257: ARRAY
33258: PPUSH
33259: LD_EXP 100
33263: PUSH
33264: LD_VAR 0 2
33268: ARRAY
33269: PUSH
33270: LD_VAR 0 3
33274: PUSH
33275: LD_EXP 100
33279: PUSH
33280: LD_VAR 0 2
33284: ARRAY
33285: MOD
33286: PUSH
33287: LD_INT 1
33289: PLUS
33290: ARRAY
33291: PUSH
33292: LD_INT 1
33294: ARRAY
33295: PPUSH
33296: LD_EXP 100
33300: PUSH
33301: LD_VAR 0 2
33305: ARRAY
33306: PUSH
33307: LD_VAR 0 3
33311: PUSH
33312: LD_EXP 100
33316: PUSH
33317: LD_VAR 0 2
33321: ARRAY
33322: MOD
33323: PUSH
33324: LD_INT 1
33326: PLUS
33327: ARRAY
33328: PUSH
33329: LD_INT 2
33331: ARRAY
33332: PPUSH
33333: LD_INT 0
33335: PPUSH
33336: CALL_OW 193
// end ; end ;
33340: GO 32985
33342: POP
33343: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
33344: LD_ADDR_VAR 0 5
33348: PUSH
33349: LD_EXP 87
33353: PUSH
33354: LD_VAR 0 2
33358: ARRAY
33359: PPUSH
33360: LD_INT 2
33362: PUSH
33363: LD_INT 30
33365: PUSH
33366: LD_INT 4
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 30
33375: PUSH
33376: LD_INT 5
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 30
33385: PUSH
33386: LD_INT 32
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: PPUSH
33399: CALL_OW 72
33403: ST_TO_ADDR
// if not tmp then
33404: LD_VAR 0 5
33408: NOT
33409: IFFALSE 33413
// continue ;
33411: GO 32898
// list := [ ] ;
33413: LD_ADDR_VAR 0 6
33417: PUSH
33418: EMPTY
33419: ST_TO_ADDR
// for j in tmp do
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_VAR 0 5
33429: PUSH
33430: FOR_IN
33431: IFFALSE 33500
// begin for k in UnitsInside ( j ) do
33433: LD_ADDR_VAR 0 4
33437: PUSH
33438: LD_VAR 0 3
33442: PPUSH
33443: CALL_OW 313
33447: PUSH
33448: FOR_IN
33449: IFFALSE 33496
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
33451: LD_VAR 0 4
33455: PPUSH
33456: CALL_OW 257
33460: PUSH
33461: LD_INT 1
33463: EQUAL
33464: PUSH
33465: LD_VAR 0 4
33469: PPUSH
33470: CALL_OW 459
33474: NOT
33475: AND
33476: IFFALSE 33494
// list := list ^ k ;
33478: LD_ADDR_VAR 0 6
33482: PUSH
33483: LD_VAR 0 6
33487: PUSH
33488: LD_VAR 0 4
33492: ADD
33493: ST_TO_ADDR
33494: GO 33448
33496: POP
33497: POP
// end ;
33498: GO 33430
33500: POP
33501: POP
// list := list diff mc_miners [ i ] ;
33502: LD_ADDR_VAR 0 6
33506: PUSH
33507: LD_VAR 0 6
33511: PUSH
33512: LD_EXP 101
33516: PUSH
33517: LD_VAR 0 2
33521: ARRAY
33522: DIFF
33523: ST_TO_ADDR
// if not list then
33524: LD_VAR 0 6
33528: NOT
33529: IFFALSE 33533
// continue ;
33531: GO 32898
// k := mc_mines [ i ] - mc_miners [ i ] ;
33533: LD_ADDR_VAR 0 4
33537: PUSH
33538: LD_EXP 100
33542: PUSH
33543: LD_VAR 0 2
33547: ARRAY
33548: PUSH
33549: LD_EXP 101
33553: PUSH
33554: LD_VAR 0 2
33558: ARRAY
33559: MINUS
33560: ST_TO_ADDR
// if k > list then
33561: LD_VAR 0 4
33565: PUSH
33566: LD_VAR 0 6
33570: GREATER
33571: IFFALSE 33583
// k := list ;
33573: LD_ADDR_VAR 0 4
33577: PUSH
33578: LD_VAR 0 6
33582: ST_TO_ADDR
// for j = 1 to k do
33583: LD_ADDR_VAR 0 3
33587: PUSH
33588: DOUBLE
33589: LD_INT 1
33591: DEC
33592: ST_TO_ADDR
33593: LD_VAR 0 4
33597: PUSH
33598: FOR_TO
33599: IFFALSE 33653
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
33601: LD_ADDR_EXP 101
33605: PUSH
33606: LD_EXP 101
33610: PPUSH
33611: LD_VAR 0 2
33615: PUSH
33616: LD_EXP 101
33620: PUSH
33621: LD_VAR 0 2
33625: ARRAY
33626: PUSH
33627: LD_INT 1
33629: PLUS
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PPUSH
33635: LD_VAR 0 6
33639: PUSH
33640: LD_VAR 0 3
33644: ARRAY
33645: PPUSH
33646: CALL 55556 0 3
33650: ST_TO_ADDR
33651: GO 33598
33653: POP
33654: POP
// end ;
33655: GO 32898
33657: POP
33658: POP
// end ;
33659: LD_VAR 0 1
33663: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
33664: LD_INT 0
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
33675: PPUSH
// if not mc_bases then
33676: LD_EXP 87
33680: NOT
33681: IFFALSE 33685
// exit ;
33683: GO 35435
// for i = 1 to mc_bases do
33685: LD_ADDR_VAR 0 2
33689: PUSH
33690: DOUBLE
33691: LD_INT 1
33693: DEC
33694: ST_TO_ADDR
33695: LD_EXP 87
33699: PUSH
33700: FOR_TO
33701: IFFALSE 35433
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
33703: LD_EXP 87
33707: PUSH
33708: LD_VAR 0 2
33712: ARRAY
33713: NOT
33714: PUSH
33715: LD_EXP 94
33719: PUSH
33720: LD_VAR 0 2
33724: ARRAY
33725: OR
33726: IFFALSE 33730
// continue ;
33728: GO 33700
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
33730: LD_EXP 103
33734: PUSH
33735: LD_VAR 0 2
33739: ARRAY
33740: NOT
33741: PUSH
33742: LD_EXP 104
33746: PUSH
33747: LD_VAR 0 2
33751: ARRAY
33752: AND
33753: IFFALSE 33791
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
33755: LD_ADDR_EXP 104
33759: PUSH
33760: LD_EXP 104
33764: PPUSH
33765: LD_VAR 0 2
33769: PPUSH
33770: EMPTY
33771: PPUSH
33772: CALL_OW 1
33776: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
33777: LD_VAR 0 2
33781: PPUSH
33782: LD_INT 107
33784: PPUSH
33785: CALL 24649 0 2
// continue ;
33789: GO 33700
// end ; target := [ ] ;
33791: LD_ADDR_VAR 0 6
33795: PUSH
33796: EMPTY
33797: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
33798: LD_ADDR_VAR 0 3
33802: PUSH
33803: DOUBLE
33804: LD_EXP 103
33808: PUSH
33809: LD_VAR 0 2
33813: ARRAY
33814: INC
33815: ST_TO_ADDR
33816: LD_INT 1
33818: PUSH
33819: FOR_DOWNTO
33820: IFFALSE 34080
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
33822: LD_EXP 103
33826: PUSH
33827: LD_VAR 0 2
33831: ARRAY
33832: PUSH
33833: LD_VAR 0 3
33837: ARRAY
33838: PUSH
33839: LD_INT 2
33841: ARRAY
33842: PPUSH
33843: LD_EXP 103
33847: PUSH
33848: LD_VAR 0 2
33852: ARRAY
33853: PUSH
33854: LD_VAR 0 3
33858: ARRAY
33859: PUSH
33860: LD_INT 3
33862: ARRAY
33863: PPUSH
33864: CALL_OW 488
33868: PUSH
33869: LD_EXP 103
33873: PUSH
33874: LD_VAR 0 2
33878: ARRAY
33879: PUSH
33880: LD_VAR 0 3
33884: ARRAY
33885: PUSH
33886: LD_INT 2
33888: ARRAY
33889: PPUSH
33890: LD_EXP 103
33894: PUSH
33895: LD_VAR 0 2
33899: ARRAY
33900: PUSH
33901: LD_VAR 0 3
33905: ARRAY
33906: PUSH
33907: LD_INT 3
33909: ARRAY
33910: PPUSH
33911: CALL_OW 284
33915: PUSH
33916: LD_INT 0
33918: EQUAL
33919: AND
33920: IFFALSE 33975
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
33922: LD_ADDR_VAR 0 5
33926: PUSH
33927: LD_EXP 103
33931: PUSH
33932: LD_VAR 0 2
33936: ARRAY
33937: PPUSH
33938: LD_VAR 0 3
33942: PPUSH
33943: CALL_OW 3
33947: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
33948: LD_ADDR_EXP 103
33952: PUSH
33953: LD_EXP 103
33957: PPUSH
33958: LD_VAR 0 2
33962: PPUSH
33963: LD_VAR 0 5
33967: PPUSH
33968: CALL_OW 1
33972: ST_TO_ADDR
// continue ;
33973: GO 33819
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
33975: LD_EXP 87
33979: PUSH
33980: LD_VAR 0 2
33984: ARRAY
33985: PUSH
33986: LD_INT 1
33988: ARRAY
33989: PPUSH
33990: CALL_OW 255
33994: PPUSH
33995: LD_EXP 103
33999: PUSH
34000: LD_VAR 0 2
34004: ARRAY
34005: PUSH
34006: LD_VAR 0 3
34010: ARRAY
34011: PUSH
34012: LD_INT 2
34014: ARRAY
34015: PPUSH
34016: LD_EXP 103
34020: PUSH
34021: LD_VAR 0 2
34025: ARRAY
34026: PUSH
34027: LD_VAR 0 3
34031: ARRAY
34032: PUSH
34033: LD_INT 3
34035: ARRAY
34036: PPUSH
34037: LD_INT 30
34039: PPUSH
34040: CALL 56452 0 4
34044: PUSH
34045: LD_INT 4
34047: ARRAY
34048: PUSH
34049: LD_INT 0
34051: EQUAL
34052: IFFALSE 34078
// begin target := mc_crates [ i ] [ j ] ;
34054: LD_ADDR_VAR 0 6
34058: PUSH
34059: LD_EXP 103
34063: PUSH
34064: LD_VAR 0 2
34068: ARRAY
34069: PUSH
34070: LD_VAR 0 3
34074: ARRAY
34075: ST_TO_ADDR
// break ;
34076: GO 34080
// end ; end ;
34078: GO 33819
34080: POP
34081: POP
// if not target then
34082: LD_VAR 0 6
34086: NOT
34087: IFFALSE 34091
// continue ;
34089: GO 33700
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
34091: LD_ADDR_VAR 0 7
34095: PUSH
34096: LD_EXP 106
34100: PUSH
34101: LD_VAR 0 2
34105: ARRAY
34106: PPUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: LD_INT 58
34115: PUSH
34116: EMPTY
34117: LIST
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 61
34125: PUSH
34126: EMPTY
34127: LIST
34128: PUSH
34129: LD_INT 33
34131: PUSH
34132: LD_INT 5
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 33
34141: PUSH
34142: LD_INT 3
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: LD_INT 34
34161: PUSH
34162: LD_INT 32
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 34
34171: PUSH
34172: LD_INT 51
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 34
34181: PUSH
34182: LD_INT 12
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PPUSH
34199: CALL_OW 72
34203: ST_TO_ADDR
// if not cargo then
34204: LD_VAR 0 7
34208: NOT
34209: IFFALSE 34852
// begin if mc_crates_collector [ i ] < 5 then
34211: LD_EXP 104
34215: PUSH
34216: LD_VAR 0 2
34220: ARRAY
34221: PUSH
34222: LD_INT 5
34224: LESS
34225: IFFALSE 34591
// begin if mc_ape [ i ] then
34227: LD_EXP 116
34231: PUSH
34232: LD_VAR 0 2
34236: ARRAY
34237: IFFALSE 34284
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
34239: LD_ADDR_VAR 0 5
34243: PUSH
34244: LD_EXP 116
34248: PUSH
34249: LD_VAR 0 2
34253: ARRAY
34254: PPUSH
34255: LD_INT 25
34257: PUSH
34258: LD_INT 16
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 24
34267: PUSH
34268: LD_INT 750
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PPUSH
34279: CALL_OW 72
34283: ST_TO_ADDR
// if not tmp then
34284: LD_VAR 0 5
34288: NOT
34289: IFFALSE 34336
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
34291: LD_ADDR_VAR 0 5
34295: PUSH
34296: LD_EXP 87
34300: PUSH
34301: LD_VAR 0 2
34305: ARRAY
34306: PPUSH
34307: LD_INT 25
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 24
34319: PUSH
34320: LD_INT 750
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PPUSH
34331: CALL_OW 72
34335: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
34336: LD_EXP 116
34340: PUSH
34341: LD_VAR 0 2
34345: ARRAY
34346: PUSH
34347: LD_EXP 87
34351: PUSH
34352: LD_VAR 0 2
34356: ARRAY
34357: PPUSH
34358: LD_INT 25
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 24
34370: PUSH
34371: LD_INT 750
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PPUSH
34382: CALL_OW 72
34386: AND
34387: PUSH
34388: LD_VAR 0 5
34392: PUSH
34393: LD_INT 5
34395: LESS
34396: AND
34397: IFFALSE 34479
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_EXP 87
34408: PUSH
34409: LD_VAR 0 2
34413: ARRAY
34414: PPUSH
34415: LD_INT 25
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 24
34427: PUSH
34428: LD_INT 750
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PPUSH
34439: CALL_OW 72
34443: PUSH
34444: FOR_IN
34445: IFFALSE 34477
// begin tmp := tmp union j ;
34447: LD_ADDR_VAR 0 5
34451: PUSH
34452: LD_VAR 0 5
34456: PUSH
34457: LD_VAR 0 3
34461: UNION
34462: ST_TO_ADDR
// if tmp >= 5 then
34463: LD_VAR 0 5
34467: PUSH
34468: LD_INT 5
34470: GREATEREQUAL
34471: IFFALSE 34475
// break ;
34473: GO 34477
// end ;
34475: GO 34444
34477: POP
34478: POP
// end ; if not tmp then
34479: LD_VAR 0 5
34483: NOT
34484: IFFALSE 34488
// continue ;
34486: GO 33700
// for j in tmp do
34488: LD_ADDR_VAR 0 3
34492: PUSH
34493: LD_VAR 0 5
34497: PUSH
34498: FOR_IN
34499: IFFALSE 34589
// if not GetTag ( j ) then
34501: LD_VAR 0 3
34505: PPUSH
34506: CALL_OW 110
34510: NOT
34511: IFFALSE 34587
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
34513: LD_ADDR_EXP 104
34517: PUSH
34518: LD_EXP 104
34522: PPUSH
34523: LD_VAR 0 2
34527: PUSH
34528: LD_EXP 104
34532: PUSH
34533: LD_VAR 0 2
34537: ARRAY
34538: PUSH
34539: LD_INT 1
34541: PLUS
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PPUSH
34547: LD_VAR 0 3
34551: PPUSH
34552: CALL 55556 0 3
34556: ST_TO_ADDR
// SetTag ( j , 107 ) ;
34557: LD_VAR 0 3
34561: PPUSH
34562: LD_INT 107
34564: PPUSH
34565: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
34569: LD_EXP 104
34573: PUSH
34574: LD_VAR 0 2
34578: ARRAY
34579: PUSH
34580: LD_INT 5
34582: GREATEREQUAL
34583: IFFALSE 34587
// break ;
34585: GO 34589
// end ;
34587: GO 34498
34589: POP
34590: POP
// end ; if mc_crates_collector [ i ] and target then
34591: LD_EXP 104
34595: PUSH
34596: LD_VAR 0 2
34600: ARRAY
34601: PUSH
34602: LD_VAR 0 6
34606: AND
34607: IFFALSE 34850
// begin if mc_crates_collector [ i ] < target [ 1 ] then
34609: LD_EXP 104
34613: PUSH
34614: LD_VAR 0 2
34618: ARRAY
34619: PUSH
34620: LD_VAR 0 6
34624: PUSH
34625: LD_INT 1
34627: ARRAY
34628: LESS
34629: IFFALSE 34649
// tmp := mc_crates_collector [ i ] else
34631: LD_ADDR_VAR 0 5
34635: PUSH
34636: LD_EXP 104
34640: PUSH
34641: LD_VAR 0 2
34645: ARRAY
34646: ST_TO_ADDR
34647: GO 34663
// tmp := target [ 1 ] ;
34649: LD_ADDR_VAR 0 5
34653: PUSH
34654: LD_VAR 0 6
34658: PUSH
34659: LD_INT 1
34661: ARRAY
34662: ST_TO_ADDR
// k := 0 ;
34663: LD_ADDR_VAR 0 4
34667: PUSH
34668: LD_INT 0
34670: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
34671: LD_ADDR_VAR 0 3
34675: PUSH
34676: LD_EXP 104
34680: PUSH
34681: LD_VAR 0 2
34685: ARRAY
34686: PUSH
34687: FOR_IN
34688: IFFALSE 34848
// begin k := k + 1 ;
34690: LD_ADDR_VAR 0 4
34694: PUSH
34695: LD_VAR 0 4
34699: PUSH
34700: LD_INT 1
34702: PLUS
34703: ST_TO_ADDR
// if k > tmp then
34704: LD_VAR 0 4
34708: PUSH
34709: LD_VAR 0 5
34713: GREATER
34714: IFFALSE 34718
// break ;
34716: GO 34848
// if not GetClass ( j ) in [ 2 , 16 ] then
34718: LD_VAR 0 3
34722: PPUSH
34723: CALL_OW 257
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: LD_INT 16
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: IN
34738: NOT
34739: IFFALSE 34792
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
34741: LD_ADDR_EXP 104
34745: PUSH
34746: LD_EXP 104
34750: PPUSH
34751: LD_VAR 0 2
34755: PPUSH
34756: LD_EXP 104
34760: PUSH
34761: LD_VAR 0 2
34765: ARRAY
34766: PUSH
34767: LD_VAR 0 3
34771: DIFF
34772: PPUSH
34773: CALL_OW 1
34777: ST_TO_ADDR
// SetTag ( j , 0 ) ;
34778: LD_VAR 0 3
34782: PPUSH
34783: LD_INT 0
34785: PPUSH
34786: CALL_OW 109
// continue ;
34790: GO 34687
// end ; if IsInUnit ( j ) then
34792: LD_VAR 0 3
34796: PPUSH
34797: CALL_OW 310
34801: IFFALSE 34812
// ComExitBuilding ( j ) ;
34803: LD_VAR 0 3
34807: PPUSH
34808: CALL_OW 122
// wait ( 3 ) ;
34812: LD_INT 3
34814: PPUSH
34815: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
34819: LD_VAR 0 3
34823: PPUSH
34824: LD_VAR 0 6
34828: PUSH
34829: LD_INT 2
34831: ARRAY
34832: PPUSH
34833: LD_VAR 0 6
34837: PUSH
34838: LD_INT 3
34840: ARRAY
34841: PPUSH
34842: CALL_OW 117
// end ;
34846: GO 34687
34848: POP
34849: POP
// end ; end else
34850: GO 35431
// begin for j in cargo do
34852: LD_ADDR_VAR 0 3
34856: PUSH
34857: LD_VAR 0 7
34861: PUSH
34862: FOR_IN
34863: IFFALSE 35429
// begin if GetTag ( j ) <> 0 then
34865: LD_VAR 0 3
34869: PPUSH
34870: CALL_OW 110
34874: PUSH
34875: LD_INT 0
34877: NONEQUAL
34878: IFFALSE 34882
// continue ;
34880: GO 34862
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
34882: LD_VAR 0 3
34886: PPUSH
34887: CALL_OW 256
34891: PUSH
34892: LD_INT 1000
34894: LESS
34895: PUSH
34896: LD_VAR 0 3
34900: PPUSH
34901: LD_EXP 111
34905: PUSH
34906: LD_VAR 0 2
34910: ARRAY
34911: PPUSH
34912: CALL_OW 308
34916: NOT
34917: AND
34918: IFFALSE 34940
// ComMoveToArea ( j , mc_parking [ i ] ) ;
34920: LD_VAR 0 3
34924: PPUSH
34925: LD_EXP 111
34929: PUSH
34930: LD_VAR 0 2
34934: ARRAY
34935: PPUSH
34936: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
34940: LD_VAR 0 3
34944: PPUSH
34945: CALL_OW 256
34949: PUSH
34950: LD_INT 1000
34952: LESS
34953: PUSH
34954: LD_VAR 0 3
34958: PPUSH
34959: LD_EXP 111
34963: PUSH
34964: LD_VAR 0 2
34968: ARRAY
34969: PPUSH
34970: CALL_OW 308
34974: AND
34975: IFFALSE 34979
// continue ;
34977: GO 34862
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
34979: LD_VAR 0 3
34983: PPUSH
34984: CALL_OW 262
34988: PUSH
34989: LD_INT 2
34991: EQUAL
34992: PUSH
34993: LD_VAR 0 3
34997: PPUSH
34998: CALL_OW 261
35002: PUSH
35003: LD_INT 15
35005: LESS
35006: AND
35007: IFFALSE 35011
// continue ;
35009: GO 34862
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
35011: LD_VAR 0 3
35015: PPUSH
35016: CALL_OW 262
35020: PUSH
35021: LD_INT 1
35023: EQUAL
35024: PUSH
35025: LD_VAR 0 3
35029: PPUSH
35030: CALL_OW 261
35034: PUSH
35035: LD_INT 10
35037: LESS
35038: AND
35039: IFFALSE 35368
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35041: LD_ADDR_VAR 0 8
35045: PUSH
35046: LD_EXP 87
35050: PUSH
35051: LD_VAR 0 2
35055: ARRAY
35056: PPUSH
35057: LD_INT 2
35059: PUSH
35060: LD_INT 30
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 30
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: PPUSH
35085: CALL_OW 72
35089: ST_TO_ADDR
// if not depot then
35090: LD_VAR 0 8
35094: NOT
35095: IFFALSE 35099
// continue ;
35097: GO 34862
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
35099: LD_VAR 0 3
35103: PPUSH
35104: LD_VAR 0 8
35108: PPUSH
35109: LD_VAR 0 3
35113: PPUSH
35114: CALL_OW 74
35118: PPUSH
35119: CALL_OW 296
35123: PUSH
35124: LD_INT 6
35126: LESS
35127: IFFALSE 35143
// SetFuel ( j , 100 ) else
35129: LD_VAR 0 3
35133: PPUSH
35134: LD_INT 100
35136: PPUSH
35137: CALL_OW 240
35141: GO 35368
// if GetFuel ( j ) = 0 then
35143: LD_VAR 0 3
35147: PPUSH
35148: CALL_OW 261
35152: PUSH
35153: LD_INT 0
35155: EQUAL
35156: IFFALSE 35368
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
35158: LD_ADDR_EXP 106
35162: PUSH
35163: LD_EXP 106
35167: PPUSH
35168: LD_VAR 0 2
35172: PPUSH
35173: LD_EXP 106
35177: PUSH
35178: LD_VAR 0 2
35182: ARRAY
35183: PUSH
35184: LD_VAR 0 3
35188: DIFF
35189: PPUSH
35190: CALL_OW 1
35194: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
35195: LD_VAR 0 3
35199: PPUSH
35200: CALL_OW 263
35204: PUSH
35205: LD_INT 1
35207: EQUAL
35208: IFFALSE 35224
// ComExitVehicle ( IsInUnit ( j ) ) ;
35210: LD_VAR 0 3
35214: PPUSH
35215: CALL_OW 310
35219: PPUSH
35220: CALL_OW 121
// if GetControl ( j ) = control_remote then
35224: LD_VAR 0 3
35228: PPUSH
35229: CALL_OW 263
35233: PUSH
35234: LD_INT 2
35236: EQUAL
35237: IFFALSE 35248
// ComUnlink ( j ) ;
35239: LD_VAR 0 3
35243: PPUSH
35244: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
35248: LD_ADDR_VAR 0 9
35252: PUSH
35253: LD_VAR 0 2
35257: PPUSH
35258: LD_INT 3
35260: PPUSH
35261: CALL 44721 0 2
35265: ST_TO_ADDR
// if fac then
35266: LD_VAR 0 9
35270: IFFALSE 35366
// begin for k in fac do
35272: LD_ADDR_VAR 0 4
35276: PUSH
35277: LD_VAR 0 9
35281: PUSH
35282: FOR_IN
35283: IFFALSE 35364
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
35285: LD_ADDR_VAR 0 10
35289: PUSH
35290: LD_VAR 0 9
35294: PPUSH
35295: LD_VAR 0 3
35299: PPUSH
35300: CALL_OW 265
35304: PPUSH
35305: LD_VAR 0 3
35309: PPUSH
35310: CALL_OW 262
35314: PPUSH
35315: LD_VAR 0 3
35319: PPUSH
35320: CALL_OW 263
35324: PPUSH
35325: LD_VAR 0 3
35329: PPUSH
35330: CALL_OW 264
35334: PPUSH
35335: CALL 53088 0 5
35339: ST_TO_ADDR
// if components then
35340: LD_VAR 0 10
35344: IFFALSE 35362
// begin MC_InsertProduceList ( i , components ) ;
35346: LD_VAR 0 2
35350: PPUSH
35351: LD_VAR 0 10
35355: PPUSH
35356: CALL 44266 0 2
// break ;
35360: GO 35364
// end ; end ;
35362: GO 35282
35364: POP
35365: POP
// end ; continue ;
35366: GO 34862
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
35368: LD_VAR 0 3
35372: PPUSH
35373: LD_INT 1
35375: PPUSH
35376: CALL_OW 289
35380: PUSH
35381: LD_INT 100
35383: LESS
35384: PUSH
35385: LD_VAR 0 3
35389: PPUSH
35390: CALL_OW 314
35394: NOT
35395: AND
35396: IFFALSE 35425
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
35398: LD_VAR 0 3
35402: PPUSH
35403: LD_VAR 0 6
35407: PUSH
35408: LD_INT 2
35410: ARRAY
35411: PPUSH
35412: LD_VAR 0 6
35416: PUSH
35417: LD_INT 3
35419: ARRAY
35420: PPUSH
35421: CALL_OW 117
// break ;
35425: GO 35429
// end ;
35427: GO 34862
35429: POP
35430: POP
// end ; end ;
35431: GO 33700
35433: POP
35434: POP
// end ;
35435: LD_VAR 0 1
35439: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
35440: LD_INT 0
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
// if not mc_bases then
35446: LD_EXP 87
35450: NOT
35451: IFFALSE 35455
// exit ;
35453: GO 35616
// for i = 1 to mc_bases do
35455: LD_ADDR_VAR 0 2
35459: PUSH
35460: DOUBLE
35461: LD_INT 1
35463: DEC
35464: ST_TO_ADDR
35465: LD_EXP 87
35469: PUSH
35470: FOR_TO
35471: IFFALSE 35614
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
35473: LD_ADDR_VAR 0 4
35477: PUSH
35478: LD_EXP 106
35482: PUSH
35483: LD_VAR 0 2
35487: ARRAY
35488: PUSH
35489: LD_EXP 109
35493: PUSH
35494: LD_VAR 0 2
35498: ARRAY
35499: UNION
35500: PPUSH
35501: LD_INT 33
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PPUSH
35511: CALL_OW 72
35515: ST_TO_ADDR
// if tmp then
35516: LD_VAR 0 4
35520: IFFALSE 35612
// for j in tmp do
35522: LD_ADDR_VAR 0 3
35526: PUSH
35527: LD_VAR 0 4
35531: PUSH
35532: FOR_IN
35533: IFFALSE 35610
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
35535: LD_VAR 0 3
35539: PPUSH
35540: CALL_OW 312
35544: NOT
35545: PUSH
35546: LD_VAR 0 3
35550: PPUSH
35551: CALL_OW 256
35555: PUSH
35556: LD_INT 250
35558: GREATEREQUAL
35559: AND
35560: IFFALSE 35573
// Connect ( j ) else
35562: LD_VAR 0 3
35566: PPUSH
35567: CALL 58489 0 1
35571: GO 35608
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
35573: LD_VAR 0 3
35577: PPUSH
35578: CALL_OW 256
35582: PUSH
35583: LD_INT 250
35585: LESS
35586: PUSH
35587: LD_VAR 0 3
35591: PPUSH
35592: CALL_OW 312
35596: AND
35597: IFFALSE 35608
// ComUnlink ( j ) ;
35599: LD_VAR 0 3
35603: PPUSH
35604: CALL_OW 136
35608: GO 35532
35610: POP
35611: POP
// end ;
35612: GO 35470
35614: POP
35615: POP
// end ;
35616: LD_VAR 0 1
35620: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
35621: LD_INT 0
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
// if not mc_bases then
35628: LD_EXP 87
35632: NOT
35633: IFFALSE 35637
// exit ;
35635: GO 36082
// for i = 1 to mc_bases do
35637: LD_ADDR_VAR 0 2
35641: PUSH
35642: DOUBLE
35643: LD_INT 1
35645: DEC
35646: ST_TO_ADDR
35647: LD_EXP 87
35651: PUSH
35652: FOR_TO
35653: IFFALSE 36080
// begin if not mc_produce [ i ] then
35655: LD_EXP 108
35659: PUSH
35660: LD_VAR 0 2
35664: ARRAY
35665: NOT
35666: IFFALSE 35670
// continue ;
35668: GO 35652
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
35670: LD_ADDR_VAR 0 5
35674: PUSH
35675: LD_EXP 87
35679: PUSH
35680: LD_VAR 0 2
35684: ARRAY
35685: PPUSH
35686: LD_INT 30
35688: PUSH
35689: LD_INT 3
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PPUSH
35696: CALL_OW 72
35700: ST_TO_ADDR
// if not fac then
35701: LD_VAR 0 5
35705: NOT
35706: IFFALSE 35710
// continue ;
35708: GO 35652
// for j in fac do
35710: LD_ADDR_VAR 0 3
35714: PUSH
35715: LD_VAR 0 5
35719: PUSH
35720: FOR_IN
35721: IFFALSE 36076
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
35723: LD_VAR 0 3
35727: PPUSH
35728: CALL_OW 461
35732: PUSH
35733: LD_INT 2
35735: NONEQUAL
35736: PUSH
35737: LD_VAR 0 3
35741: PPUSH
35742: LD_INT 15
35744: PPUSH
35745: CALL 58149 0 2
35749: PUSH
35750: LD_INT 4
35752: ARRAY
35753: OR
35754: IFFALSE 35758
// continue ;
35756: GO 35720
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
35758: LD_VAR 0 3
35762: PPUSH
35763: LD_EXP 108
35767: PUSH
35768: LD_VAR 0 2
35772: ARRAY
35773: PUSH
35774: LD_INT 1
35776: ARRAY
35777: PUSH
35778: LD_INT 1
35780: ARRAY
35781: PPUSH
35782: LD_EXP 108
35786: PUSH
35787: LD_VAR 0 2
35791: ARRAY
35792: PUSH
35793: LD_INT 1
35795: ARRAY
35796: PUSH
35797: LD_INT 2
35799: ARRAY
35800: PPUSH
35801: LD_EXP 108
35805: PUSH
35806: LD_VAR 0 2
35810: ARRAY
35811: PUSH
35812: LD_INT 1
35814: ARRAY
35815: PUSH
35816: LD_INT 3
35818: ARRAY
35819: PPUSH
35820: LD_EXP 108
35824: PUSH
35825: LD_VAR 0 2
35829: ARRAY
35830: PUSH
35831: LD_INT 1
35833: ARRAY
35834: PUSH
35835: LD_INT 4
35837: ARRAY
35838: PPUSH
35839: CALL_OW 448
35843: PUSH
35844: LD_VAR 0 3
35848: PPUSH
35849: LD_EXP 108
35853: PUSH
35854: LD_VAR 0 2
35858: ARRAY
35859: PUSH
35860: LD_INT 1
35862: ARRAY
35863: PUSH
35864: LD_INT 1
35866: ARRAY
35867: PUSH
35868: LD_EXP 108
35872: PUSH
35873: LD_VAR 0 2
35877: ARRAY
35878: PUSH
35879: LD_INT 1
35881: ARRAY
35882: PUSH
35883: LD_INT 2
35885: ARRAY
35886: PUSH
35887: LD_EXP 108
35891: PUSH
35892: LD_VAR 0 2
35896: ARRAY
35897: PUSH
35898: LD_INT 1
35900: ARRAY
35901: PUSH
35902: LD_INT 3
35904: ARRAY
35905: PUSH
35906: LD_EXP 108
35910: PUSH
35911: LD_VAR 0 2
35915: ARRAY
35916: PUSH
35917: LD_INT 1
35919: ARRAY
35920: PUSH
35921: LD_INT 4
35923: ARRAY
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: PPUSH
35931: CALL 61820 0 2
35935: AND
35936: IFFALSE 36074
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
35938: LD_VAR 0 3
35942: PPUSH
35943: LD_EXP 108
35947: PUSH
35948: LD_VAR 0 2
35952: ARRAY
35953: PUSH
35954: LD_INT 1
35956: ARRAY
35957: PUSH
35958: LD_INT 1
35960: ARRAY
35961: PPUSH
35962: LD_EXP 108
35966: PUSH
35967: LD_VAR 0 2
35971: ARRAY
35972: PUSH
35973: LD_INT 1
35975: ARRAY
35976: PUSH
35977: LD_INT 2
35979: ARRAY
35980: PPUSH
35981: LD_EXP 108
35985: PUSH
35986: LD_VAR 0 2
35990: ARRAY
35991: PUSH
35992: LD_INT 1
35994: ARRAY
35995: PUSH
35996: LD_INT 3
35998: ARRAY
35999: PPUSH
36000: LD_EXP 108
36004: PUSH
36005: LD_VAR 0 2
36009: ARRAY
36010: PUSH
36011: LD_INT 1
36013: ARRAY
36014: PUSH
36015: LD_INT 4
36017: ARRAY
36018: PPUSH
36019: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
36023: LD_ADDR_VAR 0 4
36027: PUSH
36028: LD_EXP 108
36032: PUSH
36033: LD_VAR 0 2
36037: ARRAY
36038: PPUSH
36039: LD_INT 1
36041: PPUSH
36042: CALL_OW 3
36046: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
36047: LD_ADDR_EXP 108
36051: PUSH
36052: LD_EXP 108
36056: PPUSH
36057: LD_VAR 0 2
36061: PPUSH
36062: LD_VAR 0 4
36066: PPUSH
36067: CALL_OW 1
36071: ST_TO_ADDR
// break ;
36072: GO 36076
// end ; end ;
36074: GO 35720
36076: POP
36077: POP
// end ;
36078: GO 35652
36080: POP
36081: POP
// end ;
36082: LD_VAR 0 1
36086: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
36087: LD_INT 0
36089: PPUSH
36090: PPUSH
36091: PPUSH
// if not mc_bases then
36092: LD_EXP 87
36096: NOT
36097: IFFALSE 36101
// exit ;
36099: GO 36190
// for i = 1 to mc_bases do
36101: LD_ADDR_VAR 0 2
36105: PUSH
36106: DOUBLE
36107: LD_INT 1
36109: DEC
36110: ST_TO_ADDR
36111: LD_EXP 87
36115: PUSH
36116: FOR_TO
36117: IFFALSE 36188
// begin if mc_attack [ i ] then
36119: LD_EXP 107
36123: PUSH
36124: LD_VAR 0 2
36128: ARRAY
36129: IFFALSE 36186
// begin tmp := mc_attack [ i ] [ 1 ] ;
36131: LD_ADDR_VAR 0 3
36135: PUSH
36136: LD_EXP 107
36140: PUSH
36141: LD_VAR 0 2
36145: ARRAY
36146: PUSH
36147: LD_INT 1
36149: ARRAY
36150: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
36151: LD_ADDR_EXP 107
36155: PUSH
36156: LD_EXP 107
36160: PPUSH
36161: LD_VAR 0 2
36165: PPUSH
36166: EMPTY
36167: PPUSH
36168: CALL_OW 1
36172: ST_TO_ADDR
// Attack ( tmp ) ;
36173: LD_VAR 0 3
36177: PPUSH
36178: CALL 98379 0 1
// exit ;
36182: POP
36183: POP
36184: GO 36190
// end ; end ;
36186: GO 36116
36188: POP
36189: POP
// end ;
36190: LD_VAR 0 1
36194: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
36195: LD_INT 0
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
// if not mc_bases then
36204: LD_EXP 87
36208: NOT
36209: IFFALSE 36213
// exit ;
36211: GO 36795
// for i = 1 to mc_bases do
36213: LD_ADDR_VAR 0 2
36217: PUSH
36218: DOUBLE
36219: LD_INT 1
36221: DEC
36222: ST_TO_ADDR
36223: LD_EXP 87
36227: PUSH
36228: FOR_TO
36229: IFFALSE 36793
// begin if not mc_bases [ i ] then
36231: LD_EXP 87
36235: PUSH
36236: LD_VAR 0 2
36240: ARRAY
36241: NOT
36242: IFFALSE 36246
// continue ;
36244: GO 36228
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
36246: LD_ADDR_VAR 0 7
36250: PUSH
36251: LD_EXP 87
36255: PUSH
36256: LD_VAR 0 2
36260: ARRAY
36261: PUSH
36262: LD_INT 1
36264: ARRAY
36265: PPUSH
36266: CALL 52392 0 1
36270: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
36271: LD_ADDR_EXP 110
36275: PUSH
36276: LD_EXP 110
36280: PPUSH
36281: LD_VAR 0 2
36285: PPUSH
36286: LD_EXP 87
36290: PUSH
36291: LD_VAR 0 2
36295: ARRAY
36296: PUSH
36297: LD_INT 1
36299: ARRAY
36300: PPUSH
36301: CALL_OW 255
36305: PPUSH
36306: LD_EXP 112
36310: PUSH
36311: LD_VAR 0 2
36315: ARRAY
36316: PPUSH
36317: CALL 52357 0 2
36321: PPUSH
36322: CALL_OW 1
36326: ST_TO_ADDR
// if not mc_scan [ i ] then
36327: LD_EXP 110
36331: PUSH
36332: LD_VAR 0 2
36336: ARRAY
36337: NOT
36338: IFFALSE 36493
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
36340: LD_ADDR_VAR 0 4
36344: PUSH
36345: LD_EXP 87
36349: PUSH
36350: LD_VAR 0 2
36354: ARRAY
36355: PPUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 25
36361: PUSH
36362: LD_INT 5
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 25
36371: PUSH
36372: LD_INT 8
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 25
36381: PUSH
36382: LD_INT 9
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: PPUSH
36395: CALL_OW 72
36399: ST_TO_ADDR
// if not tmp then
36400: LD_VAR 0 4
36404: NOT
36405: IFFALSE 36409
// continue ;
36407: GO 36228
// for j in tmp do
36409: LD_ADDR_VAR 0 3
36413: PUSH
36414: LD_VAR 0 4
36418: PUSH
36419: FOR_IN
36420: IFFALSE 36491
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
36422: LD_VAR 0 3
36426: PPUSH
36427: CALL_OW 310
36431: PPUSH
36432: CALL_OW 266
36436: PUSH
36437: LD_INT 5
36439: EQUAL
36440: PUSH
36441: LD_VAR 0 3
36445: PPUSH
36446: CALL_OW 257
36450: PUSH
36451: LD_INT 1
36453: EQUAL
36454: AND
36455: PUSH
36456: LD_VAR 0 3
36460: PPUSH
36461: CALL_OW 459
36465: NOT
36466: AND
36467: PUSH
36468: LD_VAR 0 7
36472: AND
36473: IFFALSE 36489
// ComChangeProfession ( j , class ) ;
36475: LD_VAR 0 3
36479: PPUSH
36480: LD_VAR 0 7
36484: PPUSH
36485: CALL_OW 123
36489: GO 36419
36491: POP
36492: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
36493: LD_EXP 110
36497: PUSH
36498: LD_VAR 0 2
36502: ARRAY
36503: PUSH
36504: LD_EXP 109
36508: PUSH
36509: LD_VAR 0 2
36513: ARRAY
36514: NOT
36515: AND
36516: PUSH
36517: LD_EXP 87
36521: PUSH
36522: LD_VAR 0 2
36526: ARRAY
36527: PPUSH
36528: LD_INT 30
36530: PUSH
36531: LD_INT 32
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PPUSH
36538: CALL_OW 72
36542: NOT
36543: AND
36544: PUSH
36545: LD_EXP 87
36549: PUSH
36550: LD_VAR 0 2
36554: ARRAY
36555: PPUSH
36556: LD_INT 2
36558: PUSH
36559: LD_INT 30
36561: PUSH
36562: LD_INT 4
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 30
36571: PUSH
36572: LD_INT 5
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: PPUSH
36584: CALL_OW 72
36588: NOT
36589: AND
36590: IFFALSE 36722
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
36592: LD_ADDR_VAR 0 4
36596: PUSH
36597: LD_EXP 87
36601: PUSH
36602: LD_VAR 0 2
36606: ARRAY
36607: PPUSH
36608: LD_INT 2
36610: PUSH
36611: LD_INT 25
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 25
36623: PUSH
36624: LD_INT 5
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 25
36633: PUSH
36634: LD_INT 8
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 25
36643: PUSH
36644: LD_INT 9
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: PPUSH
36658: CALL_OW 72
36662: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
36663: LD_ADDR_VAR 0 4
36667: PUSH
36668: LD_VAR 0 4
36672: PUSH
36673: LD_VAR 0 4
36677: PPUSH
36678: LD_INT 18
36680: PPUSH
36681: CALL 84117 0 2
36685: DIFF
36686: ST_TO_ADDR
// if tmp then
36687: LD_VAR 0 4
36691: IFFALSE 36722
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
36693: LD_VAR 0 2
36697: PPUSH
36698: LD_VAR 0 4
36702: PPUSH
36703: LD_EXP 112
36707: PUSH
36708: LD_VAR 0 2
36712: ARRAY
36713: PPUSH
36714: CALL 103088 0 3
// exit ;
36718: POP
36719: POP
36720: GO 36795
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
36722: LD_EXP 110
36726: PUSH
36727: LD_VAR 0 2
36731: ARRAY
36732: PUSH
36733: LD_EXP 109
36737: PUSH
36738: LD_VAR 0 2
36742: ARRAY
36743: AND
36744: IFFALSE 36791
// begin tmp := mc_defender [ i ] ;
36746: LD_ADDR_VAR 0 4
36750: PUSH
36751: LD_EXP 109
36755: PUSH
36756: LD_VAR 0 2
36760: ARRAY
36761: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
36762: LD_VAR 0 2
36766: PPUSH
36767: LD_VAR 0 4
36771: PPUSH
36772: LD_EXP 110
36776: PUSH
36777: LD_VAR 0 2
36781: ARRAY
36782: PPUSH
36783: CALL 103649 0 3
// exit ;
36787: POP
36788: POP
36789: GO 36795
// end ; end ;
36791: GO 36228
36793: POP
36794: POP
// end ;
36795: LD_VAR 0 1
36799: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
36800: LD_INT 0
36802: PPUSH
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
36807: PPUSH
36808: PPUSH
36809: PPUSH
36810: PPUSH
36811: PPUSH
36812: PPUSH
// if not mc_bases then
36813: LD_EXP 87
36817: NOT
36818: IFFALSE 36822
// exit ;
36820: GO 37909
// for i = 1 to mc_bases do
36822: LD_ADDR_VAR 0 2
36826: PUSH
36827: DOUBLE
36828: LD_INT 1
36830: DEC
36831: ST_TO_ADDR
36832: LD_EXP 87
36836: PUSH
36837: FOR_TO
36838: IFFALSE 37907
// begin tmp := mc_lab [ i ] ;
36840: LD_ADDR_VAR 0 6
36844: PUSH
36845: LD_EXP 120
36849: PUSH
36850: LD_VAR 0 2
36854: ARRAY
36855: ST_TO_ADDR
// if not tmp then
36856: LD_VAR 0 6
36860: NOT
36861: IFFALSE 36865
// continue ;
36863: GO 36837
// idle_lab := 0 ;
36865: LD_ADDR_VAR 0 11
36869: PUSH
36870: LD_INT 0
36872: ST_TO_ADDR
// for j in tmp do
36873: LD_ADDR_VAR 0 3
36877: PUSH
36878: LD_VAR 0 6
36882: PUSH
36883: FOR_IN
36884: IFFALSE 37903
// begin researching := false ;
36886: LD_ADDR_VAR 0 10
36890: PUSH
36891: LD_INT 0
36893: ST_TO_ADDR
// side := GetSide ( j ) ;
36894: LD_ADDR_VAR 0 4
36898: PUSH
36899: LD_VAR 0 3
36903: PPUSH
36904: CALL_OW 255
36908: ST_TO_ADDR
// if not mc_tech [ side ] then
36909: LD_EXP 114
36913: PUSH
36914: LD_VAR 0 4
36918: ARRAY
36919: NOT
36920: IFFALSE 36924
// continue ;
36922: GO 36883
// if BuildingStatus ( j ) = bs_idle then
36924: LD_VAR 0 3
36928: PPUSH
36929: CALL_OW 461
36933: PUSH
36934: LD_INT 2
36936: EQUAL
36937: IFFALSE 37125
// begin if idle_lab and UnitsInside ( j ) < 6 then
36939: LD_VAR 0 11
36943: PUSH
36944: LD_VAR 0 3
36948: PPUSH
36949: CALL_OW 313
36953: PUSH
36954: LD_INT 6
36956: LESS
36957: AND
36958: IFFALSE 37029
// begin tmp2 := UnitsInside ( idle_lab ) ;
36960: LD_ADDR_VAR 0 9
36964: PUSH
36965: LD_VAR 0 11
36969: PPUSH
36970: CALL_OW 313
36974: ST_TO_ADDR
// if tmp2 then
36975: LD_VAR 0 9
36979: IFFALSE 37021
// for x in tmp2 do
36981: LD_ADDR_VAR 0 7
36985: PUSH
36986: LD_VAR 0 9
36990: PUSH
36991: FOR_IN
36992: IFFALSE 37019
// begin ComExitBuilding ( x ) ;
36994: LD_VAR 0 7
36998: PPUSH
36999: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
37003: LD_VAR 0 7
37007: PPUSH
37008: LD_VAR 0 3
37012: PPUSH
37013: CALL_OW 180
// end ;
37017: GO 36991
37019: POP
37020: POP
// idle_lab := 0 ;
37021: LD_ADDR_VAR 0 11
37025: PUSH
37026: LD_INT 0
37028: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
37029: LD_ADDR_VAR 0 5
37033: PUSH
37034: LD_EXP 114
37038: PUSH
37039: LD_VAR 0 4
37043: ARRAY
37044: PUSH
37045: FOR_IN
37046: IFFALSE 37106
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
37048: LD_VAR 0 3
37052: PPUSH
37053: LD_VAR 0 5
37057: PPUSH
37058: CALL_OW 430
37062: PUSH
37063: LD_VAR 0 4
37067: PPUSH
37068: LD_VAR 0 5
37072: PPUSH
37073: CALL 51462 0 2
37077: AND
37078: IFFALSE 37104
// begin researching := true ;
37080: LD_ADDR_VAR 0 10
37084: PUSH
37085: LD_INT 1
37087: ST_TO_ADDR
// ComResearch ( j , t ) ;
37088: LD_VAR 0 3
37092: PPUSH
37093: LD_VAR 0 5
37097: PPUSH
37098: CALL_OW 124
// break ;
37102: GO 37106
// end ;
37104: GO 37045
37106: POP
37107: POP
// if not researching then
37108: LD_VAR 0 10
37112: NOT
37113: IFFALSE 37125
// idle_lab := j ;
37115: LD_ADDR_VAR 0 11
37119: PUSH
37120: LD_VAR 0 3
37124: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
37125: LD_VAR 0 3
37129: PPUSH
37130: CALL_OW 461
37134: PUSH
37135: LD_INT 10
37137: EQUAL
37138: IFFALSE 37726
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
37140: LD_EXP 116
37144: PUSH
37145: LD_VAR 0 2
37149: ARRAY
37150: NOT
37151: PUSH
37152: LD_EXP 117
37156: PUSH
37157: LD_VAR 0 2
37161: ARRAY
37162: NOT
37163: AND
37164: PUSH
37165: LD_EXP 114
37169: PUSH
37170: LD_VAR 0 4
37174: ARRAY
37175: PUSH
37176: LD_INT 1
37178: GREATER
37179: AND
37180: IFFALSE 37311
// begin ComCancel ( j ) ;
37182: LD_VAR 0 3
37186: PPUSH
37187: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
37191: LD_ADDR_EXP 114
37195: PUSH
37196: LD_EXP 114
37200: PPUSH
37201: LD_VAR 0 4
37205: PPUSH
37206: LD_EXP 114
37210: PUSH
37211: LD_VAR 0 4
37215: ARRAY
37216: PPUSH
37217: LD_EXP 114
37221: PUSH
37222: LD_VAR 0 4
37226: ARRAY
37227: PUSH
37228: LD_INT 1
37230: MINUS
37231: PPUSH
37232: LD_EXP 114
37236: PUSH
37237: LD_VAR 0 4
37241: ARRAY
37242: PPUSH
37243: LD_INT 0
37245: PPUSH
37246: CALL 54974 0 4
37250: PPUSH
37251: CALL_OW 1
37255: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
37256: LD_ADDR_EXP 114
37260: PUSH
37261: LD_EXP 114
37265: PPUSH
37266: LD_VAR 0 4
37270: PPUSH
37271: LD_EXP 114
37275: PUSH
37276: LD_VAR 0 4
37280: ARRAY
37281: PPUSH
37282: LD_EXP 114
37286: PUSH
37287: LD_VAR 0 4
37291: ARRAY
37292: PPUSH
37293: LD_INT 1
37295: PPUSH
37296: LD_INT 0
37298: PPUSH
37299: CALL 54974 0 4
37303: PPUSH
37304: CALL_OW 1
37308: ST_TO_ADDR
// continue ;
37309: GO 36883
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
37311: LD_EXP 116
37315: PUSH
37316: LD_VAR 0 2
37320: ARRAY
37321: PUSH
37322: LD_EXP 117
37326: PUSH
37327: LD_VAR 0 2
37331: ARRAY
37332: NOT
37333: AND
37334: IFFALSE 37461
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
37336: LD_ADDR_EXP 117
37340: PUSH
37341: LD_EXP 117
37345: PPUSH
37346: LD_VAR 0 2
37350: PUSH
37351: LD_EXP 117
37355: PUSH
37356: LD_VAR 0 2
37360: ARRAY
37361: PUSH
37362: LD_INT 1
37364: PLUS
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PPUSH
37370: LD_EXP 116
37374: PUSH
37375: LD_VAR 0 2
37379: ARRAY
37380: PUSH
37381: LD_INT 1
37383: ARRAY
37384: PPUSH
37385: CALL 55556 0 3
37389: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
37390: LD_EXP 116
37394: PUSH
37395: LD_VAR 0 2
37399: ARRAY
37400: PUSH
37401: LD_INT 1
37403: ARRAY
37404: PPUSH
37405: LD_INT 112
37407: PPUSH
37408: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
37412: LD_ADDR_VAR 0 9
37416: PUSH
37417: LD_EXP 116
37421: PUSH
37422: LD_VAR 0 2
37426: ARRAY
37427: PPUSH
37428: LD_INT 1
37430: PPUSH
37431: CALL_OW 3
37435: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
37436: LD_ADDR_EXP 116
37440: PUSH
37441: LD_EXP 116
37445: PPUSH
37446: LD_VAR 0 2
37450: PPUSH
37451: LD_VAR 0 9
37455: PPUSH
37456: CALL_OW 1
37460: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
37461: LD_EXP 116
37465: PUSH
37466: LD_VAR 0 2
37470: ARRAY
37471: PUSH
37472: LD_EXP 117
37476: PUSH
37477: LD_VAR 0 2
37481: ARRAY
37482: AND
37483: PUSH
37484: LD_EXP 117
37488: PUSH
37489: LD_VAR 0 2
37493: ARRAY
37494: PUSH
37495: LD_INT 1
37497: ARRAY
37498: PPUSH
37499: CALL_OW 310
37503: NOT
37504: AND
37505: PUSH
37506: LD_VAR 0 3
37510: PPUSH
37511: CALL_OW 313
37515: PUSH
37516: LD_INT 6
37518: EQUAL
37519: AND
37520: IFFALSE 37576
// begin tmp2 := UnitsInside ( j ) ;
37522: LD_ADDR_VAR 0 9
37526: PUSH
37527: LD_VAR 0 3
37531: PPUSH
37532: CALL_OW 313
37536: ST_TO_ADDR
// if tmp2 = 6 then
37537: LD_VAR 0 9
37541: PUSH
37542: LD_INT 6
37544: EQUAL
37545: IFFALSE 37576
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
37547: LD_VAR 0 9
37551: PUSH
37552: LD_INT 1
37554: ARRAY
37555: PPUSH
37556: LD_INT 112
37558: PPUSH
37559: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
37563: LD_VAR 0 9
37567: PUSH
37568: LD_INT 1
37570: ARRAY
37571: PPUSH
37572: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
37576: LD_EXP 117
37580: PUSH
37581: LD_VAR 0 2
37585: ARRAY
37586: PUSH
37587: LD_EXP 117
37591: PUSH
37592: LD_VAR 0 2
37596: ARRAY
37597: PUSH
37598: LD_INT 1
37600: ARRAY
37601: PPUSH
37602: CALL_OW 314
37606: NOT
37607: AND
37608: PUSH
37609: LD_EXP 117
37613: PUSH
37614: LD_VAR 0 2
37618: ARRAY
37619: PUSH
37620: LD_INT 1
37622: ARRAY
37623: PPUSH
37624: CALL_OW 310
37628: NOT
37629: AND
37630: IFFALSE 37656
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
37632: LD_EXP 117
37636: PUSH
37637: LD_VAR 0 2
37641: ARRAY
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PPUSH
37647: LD_VAR 0 3
37651: PPUSH
37652: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
37656: LD_EXP 117
37660: PUSH
37661: LD_VAR 0 2
37665: ARRAY
37666: PUSH
37667: LD_INT 1
37669: ARRAY
37670: PPUSH
37671: CALL_OW 310
37675: PUSH
37676: LD_EXP 117
37680: PUSH
37681: LD_VAR 0 2
37685: ARRAY
37686: PUSH
37687: LD_INT 1
37689: ARRAY
37690: PPUSH
37691: CALL_OW 310
37695: PPUSH
37696: CALL_OW 461
37700: PUSH
37701: LD_INT 3
37703: NONEQUAL
37704: AND
37705: IFFALSE 37726
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
37707: LD_EXP 117
37711: PUSH
37712: LD_VAR 0 2
37716: ARRAY
37717: PUSH
37718: LD_INT 1
37720: ARRAY
37721: PPUSH
37722: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
37726: LD_VAR 0 3
37730: PPUSH
37731: CALL_OW 461
37735: PUSH
37736: LD_INT 6
37738: EQUAL
37739: PUSH
37740: LD_VAR 0 6
37744: PUSH
37745: LD_INT 1
37747: GREATER
37748: AND
37749: IFFALSE 37901
// begin sci := [ ] ;
37751: LD_ADDR_VAR 0 8
37755: PUSH
37756: EMPTY
37757: ST_TO_ADDR
// for x in ( tmp diff j ) do
37758: LD_ADDR_VAR 0 7
37762: PUSH
37763: LD_VAR 0 6
37767: PUSH
37768: LD_VAR 0 3
37772: DIFF
37773: PUSH
37774: FOR_IN
37775: IFFALSE 37827
// begin if sci = 6 then
37777: LD_VAR 0 8
37781: PUSH
37782: LD_INT 6
37784: EQUAL
37785: IFFALSE 37789
// break ;
37787: GO 37827
// if BuildingStatus ( x ) = bs_idle then
37789: LD_VAR 0 7
37793: PPUSH
37794: CALL_OW 461
37798: PUSH
37799: LD_INT 2
37801: EQUAL
37802: IFFALSE 37825
// sci := sci ^ UnitsInside ( x ) ;
37804: LD_ADDR_VAR 0 8
37808: PUSH
37809: LD_VAR 0 8
37813: PUSH
37814: LD_VAR 0 7
37818: PPUSH
37819: CALL_OW 313
37823: ADD
37824: ST_TO_ADDR
// end ;
37825: GO 37774
37827: POP
37828: POP
// if not sci then
37829: LD_VAR 0 8
37833: NOT
37834: IFFALSE 37838
// continue ;
37836: GO 36883
// for x in sci do
37838: LD_ADDR_VAR 0 7
37842: PUSH
37843: LD_VAR 0 8
37847: PUSH
37848: FOR_IN
37849: IFFALSE 37899
// if IsInUnit ( x ) and not HasTask ( x ) then
37851: LD_VAR 0 7
37855: PPUSH
37856: CALL_OW 310
37860: PUSH
37861: LD_VAR 0 7
37865: PPUSH
37866: CALL_OW 314
37870: NOT
37871: AND
37872: IFFALSE 37897
// begin ComExitBuilding ( x ) ;
37874: LD_VAR 0 7
37878: PPUSH
37879: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
37883: LD_VAR 0 7
37887: PPUSH
37888: LD_VAR 0 3
37892: PPUSH
37893: CALL_OW 180
// end ;
37897: GO 37848
37899: POP
37900: POP
// end ; end ;
37901: GO 36883
37903: POP
37904: POP
// end ;
37905: GO 36837
37907: POP
37908: POP
// end ;
37909: LD_VAR 0 1
37913: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
37914: LD_INT 0
37916: PPUSH
37917: PPUSH
// if not mc_bases then
37918: LD_EXP 87
37922: NOT
37923: IFFALSE 37927
// exit ;
37925: GO 38008
// for i = 1 to mc_bases do
37927: LD_ADDR_VAR 0 2
37931: PUSH
37932: DOUBLE
37933: LD_INT 1
37935: DEC
37936: ST_TO_ADDR
37937: LD_EXP 87
37941: PUSH
37942: FOR_TO
37943: IFFALSE 38006
// if mc_mines [ i ] and mc_miners [ i ] then
37945: LD_EXP 100
37949: PUSH
37950: LD_VAR 0 2
37954: ARRAY
37955: PUSH
37956: LD_EXP 101
37960: PUSH
37961: LD_VAR 0 2
37965: ARRAY
37966: AND
37967: IFFALSE 38004
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
37969: LD_EXP 101
37973: PUSH
37974: LD_VAR 0 2
37978: ARRAY
37979: PUSH
37980: LD_INT 1
37982: ARRAY
37983: PPUSH
37984: CALL_OW 255
37988: PPUSH
37989: LD_EXP 100
37993: PUSH
37994: LD_VAR 0 2
37998: ARRAY
37999: PPUSH
38000: CALL 52545 0 2
38004: GO 37942
38006: POP
38007: POP
// end ;
38008: LD_VAR 0 1
38012: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
38013: LD_INT 0
38015: PPUSH
38016: PPUSH
38017: PPUSH
38018: PPUSH
38019: PPUSH
38020: PPUSH
38021: PPUSH
38022: PPUSH
// if not mc_bases or not mc_parking then
38023: LD_EXP 87
38027: NOT
38028: PUSH
38029: LD_EXP 111
38033: NOT
38034: OR
38035: IFFALSE 38039
// exit ;
38037: GO 38738
// for i = 1 to mc_bases do
38039: LD_ADDR_VAR 0 2
38043: PUSH
38044: DOUBLE
38045: LD_INT 1
38047: DEC
38048: ST_TO_ADDR
38049: LD_EXP 87
38053: PUSH
38054: FOR_TO
38055: IFFALSE 38736
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
38057: LD_EXP 87
38061: PUSH
38062: LD_VAR 0 2
38066: ARRAY
38067: NOT
38068: PUSH
38069: LD_EXP 111
38073: PUSH
38074: LD_VAR 0 2
38078: ARRAY
38079: NOT
38080: OR
38081: IFFALSE 38085
// continue ;
38083: GO 38054
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
38085: LD_ADDR_VAR 0 5
38089: PUSH
38090: LD_EXP 87
38094: PUSH
38095: LD_VAR 0 2
38099: ARRAY
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: PPUSH
38105: CALL_OW 255
38109: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
38110: LD_ADDR_VAR 0 6
38114: PUSH
38115: LD_EXP 87
38119: PUSH
38120: LD_VAR 0 2
38124: ARRAY
38125: PPUSH
38126: LD_INT 30
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PPUSH
38136: CALL_OW 72
38140: ST_TO_ADDR
// if not fac then
38141: LD_VAR 0 6
38145: NOT
38146: IFFALSE 38197
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38148: LD_ADDR_VAR 0 6
38152: PUSH
38153: LD_EXP 87
38157: PUSH
38158: LD_VAR 0 2
38162: ARRAY
38163: PPUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 30
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 30
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: PPUSH
38192: CALL_OW 72
38196: ST_TO_ADDR
// if not fac then
38197: LD_VAR 0 6
38201: NOT
38202: IFFALSE 38206
// continue ;
38204: GO 38054
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38206: LD_ADDR_VAR 0 7
38210: PUSH
38211: LD_EXP 111
38215: PUSH
38216: LD_VAR 0 2
38220: ARRAY
38221: PPUSH
38222: LD_INT 22
38224: PUSH
38225: LD_VAR 0 5
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 21
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 3
38246: PUSH
38247: LD_INT 24
38249: PUSH
38250: LD_INT 1000
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: PPUSH
38266: CALL_OW 70
38270: ST_TO_ADDR
// for j in fac do
38271: LD_ADDR_VAR 0 3
38275: PUSH
38276: LD_VAR 0 6
38280: PUSH
38281: FOR_IN
38282: IFFALSE 38363
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38284: LD_ADDR_VAR 0 7
38288: PUSH
38289: LD_VAR 0 7
38293: PUSH
38294: LD_INT 22
38296: PUSH
38297: LD_VAR 0 5
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 91
38308: PUSH
38309: LD_VAR 0 3
38313: PUSH
38314: LD_INT 15
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 21
38324: PUSH
38325: LD_INT 2
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 3
38334: PUSH
38335: LD_INT 24
38337: PUSH
38338: LD_INT 1000
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: PPUSH
38355: CALL_OW 69
38359: UNION
38360: ST_TO_ADDR
38361: GO 38281
38363: POP
38364: POP
// if not vehs then
38365: LD_VAR 0 7
38369: NOT
38370: IFFALSE 38396
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
38372: LD_ADDR_EXP 99
38376: PUSH
38377: LD_EXP 99
38381: PPUSH
38382: LD_VAR 0 2
38386: PPUSH
38387: EMPTY
38388: PPUSH
38389: CALL_OW 1
38393: ST_TO_ADDR
// continue ;
38394: GO 38054
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
38396: LD_ADDR_VAR 0 8
38400: PUSH
38401: LD_EXP 87
38405: PUSH
38406: LD_VAR 0 2
38410: ARRAY
38411: PPUSH
38412: LD_INT 30
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PPUSH
38422: CALL_OW 72
38426: ST_TO_ADDR
// if tmp then
38427: LD_VAR 0 8
38431: IFFALSE 38534
// begin for j in tmp do
38433: LD_ADDR_VAR 0 3
38437: PUSH
38438: LD_VAR 0 8
38442: PUSH
38443: FOR_IN
38444: IFFALSE 38532
// for k in UnitsInside ( j ) do
38446: LD_ADDR_VAR 0 4
38450: PUSH
38451: LD_VAR 0 3
38455: PPUSH
38456: CALL_OW 313
38460: PUSH
38461: FOR_IN
38462: IFFALSE 38528
// if k then
38464: LD_VAR 0 4
38468: IFFALSE 38526
// if not k in mc_repair_vehicle [ i ] then
38470: LD_VAR 0 4
38474: PUSH
38475: LD_EXP 99
38479: PUSH
38480: LD_VAR 0 2
38484: ARRAY
38485: IN
38486: NOT
38487: IFFALSE 38526
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
38489: LD_ADDR_EXP 99
38493: PUSH
38494: LD_EXP 99
38498: PPUSH
38499: LD_VAR 0 2
38503: PPUSH
38504: LD_EXP 99
38508: PUSH
38509: LD_VAR 0 2
38513: ARRAY
38514: PUSH
38515: LD_VAR 0 4
38519: UNION
38520: PPUSH
38521: CALL_OW 1
38525: ST_TO_ADDR
38526: GO 38461
38528: POP
38529: POP
38530: GO 38443
38532: POP
38533: POP
// end ; if not mc_repair_vehicle [ i ] then
38534: LD_EXP 99
38538: PUSH
38539: LD_VAR 0 2
38543: ARRAY
38544: NOT
38545: IFFALSE 38549
// continue ;
38547: GO 38054
// for j in mc_repair_vehicle [ i ] do
38549: LD_ADDR_VAR 0 3
38553: PUSH
38554: LD_EXP 99
38558: PUSH
38559: LD_VAR 0 2
38563: ARRAY
38564: PUSH
38565: FOR_IN
38566: IFFALSE 38732
// begin if GetClass ( j ) <> 3 then
38568: LD_VAR 0 3
38572: PPUSH
38573: CALL_OW 257
38577: PUSH
38578: LD_INT 3
38580: NONEQUAL
38581: IFFALSE 38622
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
38583: LD_ADDR_EXP 99
38587: PUSH
38588: LD_EXP 99
38592: PPUSH
38593: LD_VAR 0 2
38597: PPUSH
38598: LD_EXP 99
38602: PUSH
38603: LD_VAR 0 2
38607: ARRAY
38608: PUSH
38609: LD_VAR 0 3
38613: DIFF
38614: PPUSH
38615: CALL_OW 1
38619: ST_TO_ADDR
// continue ;
38620: GO 38565
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
38622: LD_VAR 0 3
38626: PPUSH
38627: CALL_OW 311
38631: NOT
38632: PUSH
38633: LD_VAR 0 3
38637: PUSH
38638: LD_EXP 90
38642: PUSH
38643: LD_VAR 0 2
38647: ARRAY
38648: PUSH
38649: LD_INT 1
38651: ARRAY
38652: IN
38653: NOT
38654: AND
38655: PUSH
38656: LD_VAR 0 3
38660: PUSH
38661: LD_EXP 90
38665: PUSH
38666: LD_VAR 0 2
38670: ARRAY
38671: PUSH
38672: LD_INT 2
38674: ARRAY
38675: IN
38676: NOT
38677: AND
38678: IFFALSE 38730
// begin if IsInUnit ( j ) then
38680: LD_VAR 0 3
38684: PPUSH
38685: CALL_OW 310
38689: IFFALSE 38700
// ComExitBuilding ( j ) ;
38691: LD_VAR 0 3
38695: PPUSH
38696: CALL_OW 122
// if not HasTask ( j ) then
38700: LD_VAR 0 3
38704: PPUSH
38705: CALL_OW 314
38709: NOT
38710: IFFALSE 38730
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
38712: LD_VAR 0 3
38716: PPUSH
38717: LD_VAR 0 7
38721: PUSH
38722: LD_INT 1
38724: ARRAY
38725: PPUSH
38726: CALL_OW 189
// end ; end ;
38730: GO 38565
38732: POP
38733: POP
// end ;
38734: GO 38054
38736: POP
38737: POP
// end ;
38738: LD_VAR 0 1
38742: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
38743: LD_INT 0
38745: PPUSH
38746: PPUSH
38747: PPUSH
38748: PPUSH
38749: PPUSH
38750: PPUSH
38751: PPUSH
38752: PPUSH
38753: PPUSH
38754: PPUSH
38755: PPUSH
// if not mc_bases then
38756: LD_EXP 87
38760: NOT
38761: IFFALSE 38765
// exit ;
38763: GO 39567
// for i = 1 to mc_bases do
38765: LD_ADDR_VAR 0 2
38769: PUSH
38770: DOUBLE
38771: LD_INT 1
38773: DEC
38774: ST_TO_ADDR
38775: LD_EXP 87
38779: PUSH
38780: FOR_TO
38781: IFFALSE 39565
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
38783: LD_EXP 115
38787: PUSH
38788: LD_VAR 0 2
38792: ARRAY
38793: NOT
38794: PUSH
38795: LD_EXP 90
38799: PUSH
38800: LD_VAR 0 2
38804: ARRAY
38805: PUSH
38806: LD_INT 1
38808: ARRAY
38809: OR
38810: PUSH
38811: LD_EXP 90
38815: PUSH
38816: LD_VAR 0 2
38820: ARRAY
38821: PUSH
38822: LD_INT 2
38824: ARRAY
38825: OR
38826: PUSH
38827: LD_EXP 113
38831: PUSH
38832: LD_VAR 0 2
38836: ARRAY
38837: PPUSH
38838: LD_INT 1
38840: PPUSH
38841: CALL_OW 325
38845: NOT
38846: OR
38847: PUSH
38848: LD_EXP 110
38852: PUSH
38853: LD_VAR 0 2
38857: ARRAY
38858: OR
38859: IFFALSE 38863
// continue ;
38861: GO 38780
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
38863: LD_ADDR_VAR 0 8
38867: PUSH
38868: LD_EXP 87
38872: PUSH
38873: LD_VAR 0 2
38877: ARRAY
38878: PPUSH
38879: LD_INT 25
38881: PUSH
38882: LD_INT 4
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 50
38891: PUSH
38892: EMPTY
38893: LIST
38894: PUSH
38895: LD_INT 3
38897: PUSH
38898: LD_INT 60
38900: PUSH
38901: EMPTY
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: PPUSH
38913: CALL_OW 72
38917: PUSH
38918: LD_EXP 91
38922: PUSH
38923: LD_VAR 0 2
38927: ARRAY
38928: DIFF
38929: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38930: LD_ADDR_VAR 0 9
38934: PUSH
38935: LD_EXP 87
38939: PUSH
38940: LD_VAR 0 2
38944: ARRAY
38945: PPUSH
38946: LD_INT 2
38948: PUSH
38949: LD_INT 30
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 30
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: PPUSH
38974: CALL_OW 72
38978: ST_TO_ADDR
// if not tmp or not dep then
38979: LD_VAR 0 8
38983: NOT
38984: PUSH
38985: LD_VAR 0 9
38989: NOT
38990: OR
38991: IFFALSE 38995
// continue ;
38993: GO 38780
// side := GetSide ( tmp [ 1 ] ) ;
38995: LD_ADDR_VAR 0 11
38999: PUSH
39000: LD_VAR 0 8
39004: PUSH
39005: LD_INT 1
39007: ARRAY
39008: PPUSH
39009: CALL_OW 255
39013: ST_TO_ADDR
// dep := dep [ 1 ] ;
39014: LD_ADDR_VAR 0 9
39018: PUSH
39019: LD_VAR 0 9
39023: PUSH
39024: LD_INT 1
39026: ARRAY
39027: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
39028: LD_ADDR_VAR 0 7
39032: PUSH
39033: LD_EXP 115
39037: PUSH
39038: LD_VAR 0 2
39042: ARRAY
39043: PPUSH
39044: LD_INT 22
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 25
39056: PUSH
39057: LD_INT 12
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PPUSH
39068: CALL_OW 70
39072: PUSH
39073: LD_INT 22
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 25
39085: PUSH
39086: LD_INT 12
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 91
39095: PUSH
39096: LD_VAR 0 9
39100: PUSH
39101: LD_INT 20
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: PPUSH
39114: CALL_OW 69
39118: UNION
39119: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
39120: LD_ADDR_VAR 0 10
39124: PUSH
39125: LD_EXP 115
39129: PUSH
39130: LD_VAR 0 2
39134: ARRAY
39135: PPUSH
39136: LD_INT 81
39138: PUSH
39139: LD_VAR 0 11
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PPUSH
39148: CALL_OW 70
39152: ST_TO_ADDR
// if not apes or danger_at_area then
39153: LD_VAR 0 7
39157: NOT
39158: PUSH
39159: LD_VAR 0 10
39163: OR
39164: IFFALSE 39214
// begin if mc_taming [ i ] then
39166: LD_EXP 118
39170: PUSH
39171: LD_VAR 0 2
39175: ARRAY
39176: IFFALSE 39212
// begin MC_Reset ( i , 121 ) ;
39178: LD_VAR 0 2
39182: PPUSH
39183: LD_INT 121
39185: PPUSH
39186: CALL 24649 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
39190: LD_ADDR_EXP 118
39194: PUSH
39195: LD_EXP 118
39199: PPUSH
39200: LD_VAR 0 2
39204: PPUSH
39205: EMPTY
39206: PPUSH
39207: CALL_OW 1
39211: ST_TO_ADDR
// end ; continue ;
39212: GO 38780
// end ; for j in tmp do
39214: LD_ADDR_VAR 0 3
39218: PUSH
39219: LD_VAR 0 8
39223: PUSH
39224: FOR_IN
39225: IFFALSE 39561
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
39227: LD_VAR 0 3
39231: PUSH
39232: LD_EXP 118
39236: PUSH
39237: LD_VAR 0 2
39241: ARRAY
39242: IN
39243: NOT
39244: PUSH
39245: LD_EXP 118
39249: PUSH
39250: LD_VAR 0 2
39254: ARRAY
39255: PUSH
39256: LD_INT 3
39258: LESS
39259: AND
39260: IFFALSE 39318
// begin SetTag ( j , 121 ) ;
39262: LD_VAR 0 3
39266: PPUSH
39267: LD_INT 121
39269: PPUSH
39270: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
39274: LD_ADDR_EXP 118
39278: PUSH
39279: LD_EXP 118
39283: PPUSH
39284: LD_VAR 0 2
39288: PUSH
39289: LD_EXP 118
39293: PUSH
39294: LD_VAR 0 2
39298: ARRAY
39299: PUSH
39300: LD_INT 1
39302: PLUS
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PPUSH
39308: LD_VAR 0 3
39312: PPUSH
39313: CALL 55556 0 3
39317: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
39318: LD_VAR 0 3
39322: PUSH
39323: LD_EXP 118
39327: PUSH
39328: LD_VAR 0 2
39332: ARRAY
39333: IN
39334: IFFALSE 39559
// begin if GetClass ( j ) <> 4 then
39336: LD_VAR 0 3
39340: PPUSH
39341: CALL_OW 257
39345: PUSH
39346: LD_INT 4
39348: NONEQUAL
39349: IFFALSE 39402
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
39351: LD_ADDR_EXP 118
39355: PUSH
39356: LD_EXP 118
39360: PPUSH
39361: LD_VAR 0 2
39365: PPUSH
39366: LD_EXP 118
39370: PUSH
39371: LD_VAR 0 2
39375: ARRAY
39376: PUSH
39377: LD_VAR 0 3
39381: DIFF
39382: PPUSH
39383: CALL_OW 1
39387: ST_TO_ADDR
// SetTag ( j , 0 ) ;
39388: LD_VAR 0 3
39392: PPUSH
39393: LD_INT 0
39395: PPUSH
39396: CALL_OW 109
// continue ;
39400: GO 39224
// end ; if IsInUnit ( j ) then
39402: LD_VAR 0 3
39406: PPUSH
39407: CALL_OW 310
39411: IFFALSE 39422
// ComExitBuilding ( j ) ;
39413: LD_VAR 0 3
39417: PPUSH
39418: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
39422: LD_ADDR_VAR 0 6
39426: PUSH
39427: LD_VAR 0 7
39431: PPUSH
39432: LD_VAR 0 3
39436: PPUSH
39437: CALL_OW 74
39441: ST_TO_ADDR
// if not ape then
39442: LD_VAR 0 6
39446: NOT
39447: IFFALSE 39451
// break ;
39449: GO 39561
// x := GetX ( ape ) ;
39451: LD_ADDR_VAR 0 4
39455: PUSH
39456: LD_VAR 0 6
39460: PPUSH
39461: CALL_OW 250
39465: ST_TO_ADDR
// y := GetY ( ape ) ;
39466: LD_ADDR_VAR 0 5
39470: PUSH
39471: LD_VAR 0 6
39475: PPUSH
39476: CALL_OW 251
39480: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39481: LD_VAR 0 4
39485: PPUSH
39486: LD_VAR 0 5
39490: PPUSH
39491: CALL_OW 488
39495: NOT
39496: PUSH
39497: LD_VAR 0 11
39501: PPUSH
39502: LD_VAR 0 4
39506: PPUSH
39507: LD_VAR 0 5
39511: PPUSH
39512: LD_INT 20
39514: PPUSH
39515: CALL 56452 0 4
39519: PUSH
39520: LD_INT 4
39522: ARRAY
39523: OR
39524: IFFALSE 39528
// break ;
39526: GO 39561
// if not HasTask ( j ) then
39528: LD_VAR 0 3
39532: PPUSH
39533: CALL_OW 314
39537: NOT
39538: IFFALSE 39559
// ComTameXY ( j , x , y ) ;
39540: LD_VAR 0 3
39544: PPUSH
39545: LD_VAR 0 4
39549: PPUSH
39550: LD_VAR 0 5
39554: PPUSH
39555: CALL_OW 131
// end ; end ;
39559: GO 39224
39561: POP
39562: POP
// end ;
39563: GO 38780
39565: POP
39566: POP
// end ;
39567: LD_VAR 0 1
39571: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
39572: LD_INT 0
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
// if not mc_bases then
39582: LD_EXP 87
39586: NOT
39587: IFFALSE 39591
// exit ;
39589: GO 40217
// for i = 1 to mc_bases do
39591: LD_ADDR_VAR 0 2
39595: PUSH
39596: DOUBLE
39597: LD_INT 1
39599: DEC
39600: ST_TO_ADDR
39601: LD_EXP 87
39605: PUSH
39606: FOR_TO
39607: IFFALSE 40215
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
39609: LD_EXP 116
39613: PUSH
39614: LD_VAR 0 2
39618: ARRAY
39619: NOT
39620: PUSH
39621: LD_EXP 116
39625: PUSH
39626: LD_VAR 0 2
39630: ARRAY
39631: PPUSH
39632: LD_INT 25
39634: PUSH
39635: LD_INT 12
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PPUSH
39642: CALL_OW 72
39646: NOT
39647: OR
39648: IFFALSE 39652
// continue ;
39650: GO 39606
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
39652: LD_ADDR_VAR 0 5
39656: PUSH
39657: LD_EXP 116
39661: PUSH
39662: LD_VAR 0 2
39666: ARRAY
39667: PUSH
39668: LD_INT 1
39670: ARRAY
39671: PPUSH
39672: CALL_OW 255
39676: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
39677: LD_VAR 0 5
39681: PPUSH
39682: LD_INT 2
39684: PPUSH
39685: CALL_OW 325
39689: IFFALSE 39942
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
39691: LD_ADDR_VAR 0 4
39695: PUSH
39696: LD_EXP 116
39700: PUSH
39701: LD_VAR 0 2
39705: ARRAY
39706: PPUSH
39707: LD_INT 25
39709: PUSH
39710: LD_INT 16
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PPUSH
39717: CALL_OW 72
39721: ST_TO_ADDR
// if tmp < 6 then
39722: LD_VAR 0 4
39726: PUSH
39727: LD_INT 6
39729: LESS
39730: IFFALSE 39942
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39732: LD_ADDR_VAR 0 6
39736: PUSH
39737: LD_EXP 87
39741: PUSH
39742: LD_VAR 0 2
39746: ARRAY
39747: PPUSH
39748: LD_INT 2
39750: PUSH
39751: LD_INT 30
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 30
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: LIST
39775: PPUSH
39776: CALL_OW 72
39780: ST_TO_ADDR
// if depot then
39781: LD_VAR 0 6
39785: IFFALSE 39942
// begin selected := 0 ;
39787: LD_ADDR_VAR 0 7
39791: PUSH
39792: LD_INT 0
39794: ST_TO_ADDR
// for j in depot do
39795: LD_ADDR_VAR 0 3
39799: PUSH
39800: LD_VAR 0 6
39804: PUSH
39805: FOR_IN
39806: IFFALSE 39837
// begin if UnitsInside ( j ) < 6 then
39808: LD_VAR 0 3
39812: PPUSH
39813: CALL_OW 313
39817: PUSH
39818: LD_INT 6
39820: LESS
39821: IFFALSE 39835
// begin selected := j ;
39823: LD_ADDR_VAR 0 7
39827: PUSH
39828: LD_VAR 0 3
39832: ST_TO_ADDR
// break ;
39833: GO 39837
// end ; end ;
39835: GO 39805
39837: POP
39838: POP
// if selected then
39839: LD_VAR 0 7
39843: IFFALSE 39942
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
39845: LD_ADDR_VAR 0 3
39849: PUSH
39850: LD_EXP 116
39854: PUSH
39855: LD_VAR 0 2
39859: ARRAY
39860: PPUSH
39861: LD_INT 25
39863: PUSH
39864: LD_INT 12
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PPUSH
39871: CALL_OW 72
39875: PUSH
39876: FOR_IN
39877: IFFALSE 39940
// if not HasTask ( j ) then
39879: LD_VAR 0 3
39883: PPUSH
39884: CALL_OW 314
39888: NOT
39889: IFFALSE 39938
// begin if not IsInUnit ( j ) then
39891: LD_VAR 0 3
39895: PPUSH
39896: CALL_OW 310
39900: NOT
39901: IFFALSE 39917
// ComEnterUnit ( j , selected ) ;
39903: LD_VAR 0 3
39907: PPUSH
39908: LD_VAR 0 7
39912: PPUSH
39913: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
39917: LD_VAR 0 3
39921: PPUSH
39922: LD_INT 16
39924: PPUSH
39925: CALL_OW 183
// AddComExitBuilding ( j ) ;
39929: LD_VAR 0 3
39933: PPUSH
39934: CALL_OW 182
// end ;
39938: GO 39876
39940: POP
39941: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
39942: LD_VAR 0 5
39946: PPUSH
39947: LD_INT 11
39949: PPUSH
39950: CALL_OW 325
39954: IFFALSE 40213
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
39956: LD_ADDR_VAR 0 4
39960: PUSH
39961: LD_EXP 116
39965: PUSH
39966: LD_VAR 0 2
39970: ARRAY
39971: PPUSH
39972: LD_INT 25
39974: PUSH
39975: LD_INT 16
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PPUSH
39982: CALL_OW 72
39986: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
39987: LD_VAR 0 4
39991: PUSH
39992: LD_INT 6
39994: GREATEREQUAL
39995: PUSH
39996: LD_VAR 0 5
40000: PPUSH
40001: LD_INT 2
40003: PPUSH
40004: CALL_OW 325
40008: NOT
40009: OR
40010: IFFALSE 40213
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
40012: LD_ADDR_VAR 0 8
40016: PUSH
40017: LD_EXP 87
40021: PUSH
40022: LD_VAR 0 2
40026: ARRAY
40027: PPUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 30
40033: PUSH
40034: LD_INT 4
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 30
40043: PUSH
40044: LD_INT 5
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: PPUSH
40056: CALL_OW 72
40060: ST_TO_ADDR
// if barracks then
40061: LD_VAR 0 8
40065: IFFALSE 40213
// begin selected := 0 ;
40067: LD_ADDR_VAR 0 7
40071: PUSH
40072: LD_INT 0
40074: ST_TO_ADDR
// for j in barracks do
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: LD_VAR 0 8
40084: PUSH
40085: FOR_IN
40086: IFFALSE 40117
// begin if UnitsInside ( j ) < 6 then
40088: LD_VAR 0 3
40092: PPUSH
40093: CALL_OW 313
40097: PUSH
40098: LD_INT 6
40100: LESS
40101: IFFALSE 40115
// begin selected := j ;
40103: LD_ADDR_VAR 0 7
40107: PUSH
40108: LD_VAR 0 3
40112: ST_TO_ADDR
// break ;
40113: GO 40117
// end ; end ;
40115: GO 40085
40117: POP
40118: POP
// if selected then
40119: LD_VAR 0 7
40123: IFFALSE 40213
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: LD_EXP 116
40134: PUSH
40135: LD_VAR 0 2
40139: ARRAY
40140: PPUSH
40141: LD_INT 25
40143: PUSH
40144: LD_INT 12
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PPUSH
40151: CALL_OW 72
40155: PUSH
40156: FOR_IN
40157: IFFALSE 40211
// if not IsInUnit ( j ) and not HasTask ( j ) then
40159: LD_VAR 0 3
40163: PPUSH
40164: CALL_OW 310
40168: NOT
40169: PUSH
40170: LD_VAR 0 3
40174: PPUSH
40175: CALL_OW 314
40179: NOT
40180: AND
40181: IFFALSE 40209
// begin ComEnterUnit ( j , selected ) ;
40183: LD_VAR 0 3
40187: PPUSH
40188: LD_VAR 0 7
40192: PPUSH
40193: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
40197: LD_VAR 0 3
40201: PPUSH
40202: LD_INT 15
40204: PPUSH
40205: CALL_OW 183
// end ;
40209: GO 40156
40211: POP
40212: POP
// end ; end ; end ; end ; end ;
40213: GO 39606
40215: POP
40216: POP
// end ;
40217: LD_VAR 0 1
40221: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
// if not mc_bases then
40228: LD_EXP 87
40232: NOT
40233: IFFALSE 40237
// exit ;
40235: GO 40415
// for i = 1 to mc_bases do
40237: LD_ADDR_VAR 0 2
40241: PUSH
40242: DOUBLE
40243: LD_INT 1
40245: DEC
40246: ST_TO_ADDR
40247: LD_EXP 87
40251: PUSH
40252: FOR_TO
40253: IFFALSE 40413
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
40255: LD_ADDR_VAR 0 4
40259: PUSH
40260: LD_EXP 87
40264: PUSH
40265: LD_VAR 0 2
40269: ARRAY
40270: PPUSH
40271: LD_INT 25
40273: PUSH
40274: LD_INT 9
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PPUSH
40281: CALL_OW 72
40285: ST_TO_ADDR
// if not tmp then
40286: LD_VAR 0 4
40290: NOT
40291: IFFALSE 40295
// continue ;
40293: GO 40252
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
40295: LD_EXP 113
40299: PUSH
40300: LD_VAR 0 2
40304: ARRAY
40305: PPUSH
40306: LD_INT 29
40308: PPUSH
40309: CALL_OW 325
40313: NOT
40314: PUSH
40315: LD_EXP 113
40319: PUSH
40320: LD_VAR 0 2
40324: ARRAY
40325: PPUSH
40326: LD_INT 28
40328: PPUSH
40329: CALL_OW 325
40333: NOT
40334: AND
40335: IFFALSE 40339
// continue ;
40337: GO 40252
// for j in tmp do
40339: LD_ADDR_VAR 0 3
40343: PUSH
40344: LD_VAR 0 4
40348: PUSH
40349: FOR_IN
40350: IFFALSE 40409
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
40352: LD_VAR 0 3
40356: PUSH
40357: LD_EXP 90
40361: PUSH
40362: LD_VAR 0 2
40366: ARRAY
40367: PUSH
40368: LD_INT 1
40370: ARRAY
40371: IN
40372: NOT
40373: PUSH
40374: LD_VAR 0 3
40378: PUSH
40379: LD_EXP 90
40383: PUSH
40384: LD_VAR 0 2
40388: ARRAY
40389: PUSH
40390: LD_INT 2
40392: ARRAY
40393: IN
40394: NOT
40395: AND
40396: IFFALSE 40407
// ComSpaceTimeShoot ( j ) ;
40398: LD_VAR 0 3
40402: PPUSH
40403: CALL 51553 0 1
40407: GO 40349
40409: POP
40410: POP
// end ;
40411: GO 40252
40413: POP
40414: POP
// end ;
40415: LD_VAR 0 1
40419: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
40420: LD_INT 0
40422: PPUSH
40423: PPUSH
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
// if not mc_bases then
40431: LD_EXP 87
40435: NOT
40436: IFFALSE 40440
// exit ;
40438: GO 41062
// for i = 1 to mc_bases do
40440: LD_ADDR_VAR 0 2
40444: PUSH
40445: DOUBLE
40446: LD_INT 1
40448: DEC
40449: ST_TO_ADDR
40450: LD_EXP 87
40454: PUSH
40455: FOR_TO
40456: IFFALSE 41060
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
40458: LD_EXP 122
40462: PUSH
40463: LD_VAR 0 2
40467: ARRAY
40468: NOT
40469: PUSH
40470: LD_INT 38
40472: PPUSH
40473: LD_EXP 113
40477: PUSH
40478: LD_VAR 0 2
40482: ARRAY
40483: PPUSH
40484: CALL_OW 321
40488: PUSH
40489: LD_INT 2
40491: NONEQUAL
40492: OR
40493: IFFALSE 40497
// continue ;
40495: GO 40455
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
40497: LD_ADDR_VAR 0 8
40501: PUSH
40502: LD_EXP 87
40506: PUSH
40507: LD_VAR 0 2
40511: ARRAY
40512: PPUSH
40513: LD_INT 30
40515: PUSH
40516: LD_INT 34
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PPUSH
40523: CALL_OW 72
40527: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
40528: LD_ADDR_VAR 0 9
40532: PUSH
40533: LD_EXP 87
40537: PUSH
40538: LD_VAR 0 2
40542: ARRAY
40543: PPUSH
40544: LD_INT 25
40546: PUSH
40547: LD_INT 4
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PPUSH
40554: CALL_OW 72
40558: PPUSH
40559: LD_INT 0
40561: PPUSH
40562: CALL 84117 0 2
40566: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
40567: LD_VAR 0 9
40571: NOT
40572: PUSH
40573: LD_VAR 0 8
40577: NOT
40578: OR
40579: PUSH
40580: LD_EXP 87
40584: PUSH
40585: LD_VAR 0 2
40589: ARRAY
40590: PPUSH
40591: LD_INT 124
40593: PPUSH
40594: CALL 84117 0 2
40598: OR
40599: IFFALSE 40603
// continue ;
40601: GO 40455
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
40603: LD_EXP 123
40607: PUSH
40608: LD_VAR 0 2
40612: ARRAY
40613: PUSH
40614: LD_EXP 122
40618: PUSH
40619: LD_VAR 0 2
40623: ARRAY
40624: LESS
40625: PUSH
40626: LD_EXP 123
40630: PUSH
40631: LD_VAR 0 2
40635: ARRAY
40636: PUSH
40637: LD_VAR 0 8
40641: LESS
40642: AND
40643: IFFALSE 41058
// begin tmp := sci [ 1 ] ;
40645: LD_ADDR_VAR 0 7
40649: PUSH
40650: LD_VAR 0 9
40654: PUSH
40655: LD_INT 1
40657: ARRAY
40658: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
40659: LD_VAR 0 7
40663: PPUSH
40664: LD_INT 124
40666: PPUSH
40667: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
40671: LD_ADDR_VAR 0 3
40675: PUSH
40676: DOUBLE
40677: LD_EXP 122
40681: PUSH
40682: LD_VAR 0 2
40686: ARRAY
40687: INC
40688: ST_TO_ADDR
40689: LD_EXP 122
40693: PUSH
40694: LD_VAR 0 2
40698: ARRAY
40699: PUSH
40700: FOR_DOWNTO
40701: IFFALSE 41044
// begin if IsInUnit ( tmp ) then
40703: LD_VAR 0 7
40707: PPUSH
40708: CALL_OW 310
40712: IFFALSE 40723
// ComExitBuilding ( tmp ) ;
40714: LD_VAR 0 7
40718: PPUSH
40719: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
40723: LD_INT 35
40725: PPUSH
40726: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
40730: LD_VAR 0 7
40734: PPUSH
40735: CALL_OW 310
40739: NOT
40740: PUSH
40741: LD_VAR 0 7
40745: PPUSH
40746: CALL_OW 314
40750: NOT
40751: AND
40752: IFFALSE 40723
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
40754: LD_ADDR_VAR 0 6
40758: PUSH
40759: LD_VAR 0 7
40763: PPUSH
40764: CALL_OW 250
40768: PUSH
40769: LD_VAR 0 7
40773: PPUSH
40774: CALL_OW 251
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40783: LD_INT 35
40785: PPUSH
40786: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
40790: LD_ADDR_VAR 0 4
40794: PUSH
40795: LD_EXP 122
40799: PUSH
40800: LD_VAR 0 2
40804: ARRAY
40805: PUSH
40806: LD_VAR 0 3
40810: ARRAY
40811: PUSH
40812: LD_INT 1
40814: ARRAY
40815: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
40816: LD_ADDR_VAR 0 5
40820: PUSH
40821: LD_EXP 122
40825: PUSH
40826: LD_VAR 0 2
40830: ARRAY
40831: PUSH
40832: LD_VAR 0 3
40836: ARRAY
40837: PUSH
40838: LD_INT 2
40840: ARRAY
40841: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
40842: LD_VAR 0 7
40846: PPUSH
40847: LD_INT 10
40849: PPUSH
40850: CALL 58149 0 2
40854: PUSH
40855: LD_INT 4
40857: ARRAY
40858: IFFALSE 40896
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
40860: LD_VAR 0 7
40864: PPUSH
40865: LD_VAR 0 6
40869: PUSH
40870: LD_INT 1
40872: ARRAY
40873: PPUSH
40874: LD_VAR 0 6
40878: PUSH
40879: LD_INT 2
40881: ARRAY
40882: PPUSH
40883: CALL_OW 111
// wait ( 0 0$10 ) ;
40887: LD_INT 350
40889: PPUSH
40890: CALL_OW 67
// end else
40894: GO 40922
// begin ComMoveXY ( tmp , x , y ) ;
40896: LD_VAR 0 7
40900: PPUSH
40901: LD_VAR 0 4
40905: PPUSH
40906: LD_VAR 0 5
40910: PPUSH
40911: CALL_OW 111
// wait ( 0 0$3 ) ;
40915: LD_INT 105
40917: PPUSH
40918: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
40922: LD_VAR 0 7
40926: PPUSH
40927: LD_VAR 0 4
40931: PPUSH
40932: LD_VAR 0 5
40936: PPUSH
40937: CALL_OW 307
40941: IFFALSE 40783
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
40943: LD_VAR 0 7
40947: PPUSH
40948: LD_VAR 0 4
40952: PPUSH
40953: LD_VAR 0 5
40957: PPUSH
40958: LD_VAR 0 8
40962: PUSH
40963: LD_VAR 0 3
40967: ARRAY
40968: PPUSH
40969: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
40973: LD_INT 35
40975: PPUSH
40976: CALL_OW 67
// until not HasTask ( tmp ) ;
40980: LD_VAR 0 7
40984: PPUSH
40985: CALL_OW 314
40989: NOT
40990: IFFALSE 40973
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
40992: LD_ADDR_EXP 123
40996: PUSH
40997: LD_EXP 123
41001: PPUSH
41002: LD_VAR 0 2
41006: PUSH
41007: LD_EXP 123
41011: PUSH
41012: LD_VAR 0 2
41016: ARRAY
41017: PUSH
41018: LD_INT 1
41020: PLUS
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PPUSH
41026: LD_VAR 0 8
41030: PUSH
41031: LD_VAR 0 3
41035: ARRAY
41036: PPUSH
41037: CALL 55556 0 3
41041: ST_TO_ADDR
// end ;
41042: GO 40700
41044: POP
41045: POP
// MC_Reset ( i , 124 ) ;
41046: LD_VAR 0 2
41050: PPUSH
41051: LD_INT 124
41053: PPUSH
41054: CALL 24649 0 2
// end ; end ;
41058: GO 40455
41060: POP
41061: POP
// end ;
41062: LD_VAR 0 1
41066: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
41067: LD_INT 0
41069: PPUSH
41070: PPUSH
41071: PPUSH
// if not mc_bases then
41072: LD_EXP 87
41076: NOT
41077: IFFALSE 41081
// exit ;
41079: GO 41687
// for i = 1 to mc_bases do
41081: LD_ADDR_VAR 0 2
41085: PUSH
41086: DOUBLE
41087: LD_INT 1
41089: DEC
41090: ST_TO_ADDR
41091: LD_EXP 87
41095: PUSH
41096: FOR_TO
41097: IFFALSE 41685
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
41099: LD_ADDR_VAR 0 3
41103: PUSH
41104: LD_EXP 87
41108: PUSH
41109: LD_VAR 0 2
41113: ARRAY
41114: PPUSH
41115: LD_INT 25
41117: PUSH
41118: LD_INT 4
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PPUSH
41125: CALL_OW 72
41129: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
41130: LD_VAR 0 3
41134: NOT
41135: PUSH
41136: LD_EXP 124
41140: PUSH
41141: LD_VAR 0 2
41145: ARRAY
41146: NOT
41147: OR
41148: PUSH
41149: LD_EXP 87
41153: PUSH
41154: LD_VAR 0 2
41158: ARRAY
41159: PPUSH
41160: LD_INT 2
41162: PUSH
41163: LD_INT 30
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 30
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: PPUSH
41188: CALL_OW 72
41192: NOT
41193: OR
41194: IFFALSE 41244
// begin if mc_deposits_finder [ i ] then
41196: LD_EXP 125
41200: PUSH
41201: LD_VAR 0 2
41205: ARRAY
41206: IFFALSE 41242
// begin MC_Reset ( i , 125 ) ;
41208: LD_VAR 0 2
41212: PPUSH
41213: LD_INT 125
41215: PPUSH
41216: CALL 24649 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
41220: LD_ADDR_EXP 125
41224: PUSH
41225: LD_EXP 125
41229: PPUSH
41230: LD_VAR 0 2
41234: PPUSH
41235: EMPTY
41236: PPUSH
41237: CALL_OW 1
41241: ST_TO_ADDR
// end ; continue ;
41242: GO 41096
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
41244: LD_EXP 124
41248: PUSH
41249: LD_VAR 0 2
41253: ARRAY
41254: PUSH
41255: LD_INT 1
41257: ARRAY
41258: PUSH
41259: LD_INT 3
41261: ARRAY
41262: PUSH
41263: LD_INT 1
41265: EQUAL
41266: PUSH
41267: LD_INT 20
41269: PPUSH
41270: LD_EXP 113
41274: PUSH
41275: LD_VAR 0 2
41279: ARRAY
41280: PPUSH
41281: CALL_OW 321
41285: PUSH
41286: LD_INT 2
41288: NONEQUAL
41289: AND
41290: IFFALSE 41340
// begin if mc_deposits_finder [ i ] then
41292: LD_EXP 125
41296: PUSH
41297: LD_VAR 0 2
41301: ARRAY
41302: IFFALSE 41338
// begin MC_Reset ( i , 125 ) ;
41304: LD_VAR 0 2
41308: PPUSH
41309: LD_INT 125
41311: PPUSH
41312: CALL 24649 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
41316: LD_ADDR_EXP 125
41320: PUSH
41321: LD_EXP 125
41325: PPUSH
41326: LD_VAR 0 2
41330: PPUSH
41331: EMPTY
41332: PPUSH
41333: CALL_OW 1
41337: ST_TO_ADDR
// end ; continue ;
41338: GO 41096
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
41340: LD_EXP 124
41344: PUSH
41345: LD_VAR 0 2
41349: ARRAY
41350: PUSH
41351: LD_INT 1
41353: ARRAY
41354: PUSH
41355: LD_INT 1
41357: ARRAY
41358: PPUSH
41359: LD_EXP 124
41363: PUSH
41364: LD_VAR 0 2
41368: ARRAY
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: PUSH
41374: LD_INT 2
41376: ARRAY
41377: PPUSH
41378: LD_EXP 113
41382: PUSH
41383: LD_VAR 0 2
41387: ARRAY
41388: PPUSH
41389: CALL_OW 440
41393: IFFALSE 41436
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
41395: LD_ADDR_EXP 124
41399: PUSH
41400: LD_EXP 124
41404: PPUSH
41405: LD_VAR 0 2
41409: PPUSH
41410: LD_EXP 124
41414: PUSH
41415: LD_VAR 0 2
41419: ARRAY
41420: PPUSH
41421: LD_INT 1
41423: PPUSH
41424: CALL_OW 3
41428: PPUSH
41429: CALL_OW 1
41433: ST_TO_ADDR
41434: GO 41683
// begin if not mc_deposits_finder [ i ] then
41436: LD_EXP 125
41440: PUSH
41441: LD_VAR 0 2
41445: ARRAY
41446: NOT
41447: IFFALSE 41499
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
41449: LD_ADDR_EXP 125
41453: PUSH
41454: LD_EXP 125
41458: PPUSH
41459: LD_VAR 0 2
41463: PPUSH
41464: LD_VAR 0 3
41468: PUSH
41469: LD_INT 1
41471: ARRAY
41472: PUSH
41473: EMPTY
41474: LIST
41475: PPUSH
41476: CALL_OW 1
41480: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
41481: LD_VAR 0 3
41485: PUSH
41486: LD_INT 1
41488: ARRAY
41489: PPUSH
41490: LD_INT 125
41492: PPUSH
41493: CALL_OW 109
// end else
41497: GO 41683
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
41499: LD_EXP 125
41503: PUSH
41504: LD_VAR 0 2
41508: ARRAY
41509: PUSH
41510: LD_INT 1
41512: ARRAY
41513: PPUSH
41514: CALL_OW 310
41518: IFFALSE 41541
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
41520: LD_EXP 125
41524: PUSH
41525: LD_VAR 0 2
41529: ARRAY
41530: PUSH
41531: LD_INT 1
41533: ARRAY
41534: PPUSH
41535: CALL_OW 122
41539: GO 41683
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
41541: LD_EXP 125
41545: PUSH
41546: LD_VAR 0 2
41550: ARRAY
41551: PUSH
41552: LD_INT 1
41554: ARRAY
41555: PPUSH
41556: CALL_OW 314
41560: NOT
41561: PUSH
41562: LD_EXP 125
41566: PUSH
41567: LD_VAR 0 2
41571: ARRAY
41572: PUSH
41573: LD_INT 1
41575: ARRAY
41576: PPUSH
41577: LD_EXP 124
41581: PUSH
41582: LD_VAR 0 2
41586: ARRAY
41587: PUSH
41588: LD_INT 1
41590: ARRAY
41591: PUSH
41592: LD_INT 1
41594: ARRAY
41595: PPUSH
41596: LD_EXP 124
41600: PUSH
41601: LD_VAR 0 2
41605: ARRAY
41606: PUSH
41607: LD_INT 1
41609: ARRAY
41610: PUSH
41611: LD_INT 2
41613: ARRAY
41614: PPUSH
41615: CALL_OW 297
41619: PUSH
41620: LD_INT 6
41622: GREATER
41623: AND
41624: IFFALSE 41683
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
41626: LD_EXP 125
41630: PUSH
41631: LD_VAR 0 2
41635: ARRAY
41636: PUSH
41637: LD_INT 1
41639: ARRAY
41640: PPUSH
41641: LD_EXP 124
41645: PUSH
41646: LD_VAR 0 2
41650: ARRAY
41651: PUSH
41652: LD_INT 1
41654: ARRAY
41655: PUSH
41656: LD_INT 1
41658: ARRAY
41659: PPUSH
41660: LD_EXP 124
41664: PUSH
41665: LD_VAR 0 2
41669: ARRAY
41670: PUSH
41671: LD_INT 1
41673: ARRAY
41674: PUSH
41675: LD_INT 2
41677: ARRAY
41678: PPUSH
41679: CALL_OW 111
// end ; end ; end ;
41683: GO 41096
41685: POP
41686: POP
// end ;
41687: LD_VAR 0 1
41691: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
41692: LD_INT 0
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
// if not mc_bases then
41705: LD_EXP 87
41709: NOT
41710: IFFALSE 41714
// exit ;
41712: GO 42654
// for i = 1 to mc_bases do
41714: LD_ADDR_VAR 0 2
41718: PUSH
41719: DOUBLE
41720: LD_INT 1
41722: DEC
41723: ST_TO_ADDR
41724: LD_EXP 87
41728: PUSH
41729: FOR_TO
41730: IFFALSE 42652
// begin if not mc_bases [ i ] or mc_scan [ i ] then
41732: LD_EXP 87
41736: PUSH
41737: LD_VAR 0 2
41741: ARRAY
41742: NOT
41743: PUSH
41744: LD_EXP 110
41748: PUSH
41749: LD_VAR 0 2
41753: ARRAY
41754: OR
41755: IFFALSE 41759
// continue ;
41757: GO 41729
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
41759: LD_ADDR_VAR 0 7
41763: PUSH
41764: LD_EXP 87
41768: PUSH
41769: LD_VAR 0 2
41773: ARRAY
41774: PUSH
41775: LD_INT 1
41777: ARRAY
41778: PPUSH
41779: CALL_OW 248
41783: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
41784: LD_VAR 0 7
41788: PUSH
41789: LD_INT 3
41791: EQUAL
41792: PUSH
41793: LD_EXP 106
41797: PUSH
41798: LD_VAR 0 2
41802: ARRAY
41803: PUSH
41804: LD_EXP 109
41808: PUSH
41809: LD_VAR 0 2
41813: ARRAY
41814: UNION
41815: PPUSH
41816: LD_INT 33
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PPUSH
41826: CALL_OW 72
41830: NOT
41831: OR
41832: IFFALSE 41836
// continue ;
41834: GO 41729
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
41836: LD_ADDR_VAR 0 9
41840: PUSH
41841: LD_EXP 87
41845: PUSH
41846: LD_VAR 0 2
41850: ARRAY
41851: PPUSH
41852: LD_INT 30
41854: PUSH
41855: LD_INT 36
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PPUSH
41862: CALL_OW 72
41866: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
41867: LD_ADDR_VAR 0 10
41871: PUSH
41872: LD_EXP 106
41876: PUSH
41877: LD_VAR 0 2
41881: ARRAY
41882: PPUSH
41883: LD_INT 34
41885: PUSH
41886: LD_INT 31
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PPUSH
41893: CALL_OW 72
41897: ST_TO_ADDR
// if not cts and not mcts then
41898: LD_VAR 0 9
41902: NOT
41903: PUSH
41904: LD_VAR 0 10
41908: NOT
41909: AND
41910: IFFALSE 41914
// continue ;
41912: GO 41729
// x := cts ;
41914: LD_ADDR_VAR 0 11
41918: PUSH
41919: LD_VAR 0 9
41923: ST_TO_ADDR
// if not x then
41924: LD_VAR 0 11
41928: NOT
41929: IFFALSE 41941
// x := mcts ;
41931: LD_ADDR_VAR 0 11
41935: PUSH
41936: LD_VAR 0 10
41940: ST_TO_ADDR
// if not x then
41941: LD_VAR 0 11
41945: NOT
41946: IFFALSE 41950
// continue ;
41948: GO 41729
// if mc_remote_driver [ i ] then
41950: LD_EXP 127
41954: PUSH
41955: LD_VAR 0 2
41959: ARRAY
41960: IFFALSE 42347
// for j in mc_remote_driver [ i ] do
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_EXP 127
41971: PUSH
41972: LD_VAR 0 2
41976: ARRAY
41977: PUSH
41978: FOR_IN
41979: IFFALSE 42345
// begin if GetClass ( j ) <> 3 then
41981: LD_VAR 0 3
41985: PPUSH
41986: CALL_OW 257
41990: PUSH
41991: LD_INT 3
41993: NONEQUAL
41994: IFFALSE 42047
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
41996: LD_ADDR_EXP 127
42000: PUSH
42001: LD_EXP 127
42005: PPUSH
42006: LD_VAR 0 2
42010: PPUSH
42011: LD_EXP 127
42015: PUSH
42016: LD_VAR 0 2
42020: ARRAY
42021: PUSH
42022: LD_VAR 0 3
42026: DIFF
42027: PPUSH
42028: CALL_OW 1
42032: ST_TO_ADDR
// SetTag ( j , 0 ) ;
42033: LD_VAR 0 3
42037: PPUSH
42038: LD_INT 0
42040: PPUSH
42041: CALL_OW 109
// continue ;
42045: GO 41978
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
42047: LD_EXP 106
42051: PUSH
42052: LD_VAR 0 2
42056: ARRAY
42057: PPUSH
42058: LD_INT 34
42060: PUSH
42061: LD_INT 31
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 58
42070: PUSH
42071: EMPTY
42072: LIST
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PPUSH
42078: CALL_OW 72
42082: PUSH
42083: LD_VAR 0 3
42087: PPUSH
42088: CALL 84205 0 1
42092: NOT
42093: AND
42094: IFFALSE 42165
// begin if IsInUnit ( j ) then
42096: LD_VAR 0 3
42100: PPUSH
42101: CALL_OW 310
42105: IFFALSE 42116
// ComExitBuilding ( j ) ;
42107: LD_VAR 0 3
42111: PPUSH
42112: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
42116: LD_VAR 0 3
42120: PPUSH
42121: LD_EXP 106
42125: PUSH
42126: LD_VAR 0 2
42130: ARRAY
42131: PPUSH
42132: LD_INT 34
42134: PUSH
42135: LD_INT 31
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 58
42144: PUSH
42145: EMPTY
42146: LIST
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PPUSH
42152: CALL_OW 72
42156: PUSH
42157: LD_INT 1
42159: ARRAY
42160: PPUSH
42161: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
42165: LD_VAR 0 3
42169: PPUSH
42170: CALL_OW 310
42174: NOT
42175: PUSH
42176: LD_VAR 0 3
42180: PPUSH
42181: CALL_OW 310
42185: PPUSH
42186: CALL_OW 266
42190: PUSH
42191: LD_INT 36
42193: NONEQUAL
42194: PUSH
42195: LD_VAR 0 3
42199: PPUSH
42200: CALL 84205 0 1
42204: NOT
42205: AND
42206: OR
42207: IFFALSE 42343
// begin if IsInUnit ( j ) then
42209: LD_VAR 0 3
42213: PPUSH
42214: CALL_OW 310
42218: IFFALSE 42229
// ComExitBuilding ( j ) ;
42220: LD_VAR 0 3
42224: PPUSH
42225: CALL_OW 122
// ct := 0 ;
42229: LD_ADDR_VAR 0 8
42233: PUSH
42234: LD_INT 0
42236: ST_TO_ADDR
// for k in x do
42237: LD_ADDR_VAR 0 4
42241: PUSH
42242: LD_VAR 0 11
42246: PUSH
42247: FOR_IN
42248: IFFALSE 42321
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
42250: LD_VAR 0 4
42254: PPUSH
42255: CALL_OW 264
42259: PUSH
42260: LD_INT 31
42262: EQUAL
42263: PUSH
42264: LD_VAR 0 4
42268: PPUSH
42269: CALL_OW 311
42273: NOT
42274: AND
42275: PUSH
42276: LD_VAR 0 4
42280: PPUSH
42281: CALL_OW 266
42285: PUSH
42286: LD_INT 36
42288: EQUAL
42289: PUSH
42290: LD_VAR 0 4
42294: PPUSH
42295: CALL_OW 313
42299: PUSH
42300: LD_INT 3
42302: LESS
42303: AND
42304: OR
42305: IFFALSE 42319
// begin ct := k ;
42307: LD_ADDR_VAR 0 8
42311: PUSH
42312: LD_VAR 0 4
42316: ST_TO_ADDR
// break ;
42317: GO 42321
// end ;
42319: GO 42247
42321: POP
42322: POP
// if ct then
42323: LD_VAR 0 8
42327: IFFALSE 42343
// ComEnterUnit ( j , ct ) ;
42329: LD_VAR 0 3
42333: PPUSH
42334: LD_VAR 0 8
42338: PPUSH
42339: CALL_OW 120
// end ; end ;
42343: GO 41978
42345: POP
42346: POP
// places := 0 ;
42347: LD_ADDR_VAR 0 5
42351: PUSH
42352: LD_INT 0
42354: ST_TO_ADDR
// for j = 1 to x do
42355: LD_ADDR_VAR 0 3
42359: PUSH
42360: DOUBLE
42361: LD_INT 1
42363: DEC
42364: ST_TO_ADDR
42365: LD_VAR 0 11
42369: PUSH
42370: FOR_TO
42371: IFFALSE 42447
// if GetWeapon ( x [ j ] ) = ar_control_tower then
42373: LD_VAR 0 11
42377: PUSH
42378: LD_VAR 0 3
42382: ARRAY
42383: PPUSH
42384: CALL_OW 264
42388: PUSH
42389: LD_INT 31
42391: EQUAL
42392: IFFALSE 42410
// places := places + 1 else
42394: LD_ADDR_VAR 0 5
42398: PUSH
42399: LD_VAR 0 5
42403: PUSH
42404: LD_INT 1
42406: PLUS
42407: ST_TO_ADDR
42408: GO 42445
// if GetBType ( x [ j ] ) = b_control_tower then
42410: LD_VAR 0 11
42414: PUSH
42415: LD_VAR 0 3
42419: ARRAY
42420: PPUSH
42421: CALL_OW 266
42425: PUSH
42426: LD_INT 36
42428: EQUAL
42429: IFFALSE 42445
// places := places + 3 ;
42431: LD_ADDR_VAR 0 5
42435: PUSH
42436: LD_VAR 0 5
42440: PUSH
42441: LD_INT 3
42443: PLUS
42444: ST_TO_ADDR
42445: GO 42370
42447: POP
42448: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
42449: LD_VAR 0 5
42453: PUSH
42454: LD_INT 0
42456: EQUAL
42457: PUSH
42458: LD_VAR 0 5
42462: PUSH
42463: LD_EXP 127
42467: PUSH
42468: LD_VAR 0 2
42472: ARRAY
42473: LESSEQUAL
42474: OR
42475: IFFALSE 42479
// continue ;
42477: GO 41729
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
42479: LD_ADDR_VAR 0 6
42483: PUSH
42484: LD_EXP 87
42488: PUSH
42489: LD_VAR 0 2
42493: ARRAY
42494: PPUSH
42495: LD_INT 25
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PPUSH
42505: CALL_OW 72
42509: PUSH
42510: LD_EXP 127
42514: PUSH
42515: LD_VAR 0 2
42519: ARRAY
42520: DIFF
42521: PPUSH
42522: LD_INT 3
42524: PPUSH
42525: CALL 85105 0 2
42529: ST_TO_ADDR
// for j in tmp do
42530: LD_ADDR_VAR 0 3
42534: PUSH
42535: LD_VAR 0 6
42539: PUSH
42540: FOR_IN
42541: IFFALSE 42576
// if GetTag ( j ) > 0 then
42543: LD_VAR 0 3
42547: PPUSH
42548: CALL_OW 110
42552: PUSH
42553: LD_INT 0
42555: GREATER
42556: IFFALSE 42574
// tmp := tmp diff j ;
42558: LD_ADDR_VAR 0 6
42562: PUSH
42563: LD_VAR 0 6
42567: PUSH
42568: LD_VAR 0 3
42572: DIFF
42573: ST_TO_ADDR
42574: GO 42540
42576: POP
42577: POP
// if not tmp then
42578: LD_VAR 0 6
42582: NOT
42583: IFFALSE 42587
// continue ;
42585: GO 41729
// if places then
42587: LD_VAR 0 5
42591: IFFALSE 42650
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
42593: LD_ADDR_EXP 127
42597: PUSH
42598: LD_EXP 127
42602: PPUSH
42603: LD_VAR 0 2
42607: PPUSH
42608: LD_EXP 127
42612: PUSH
42613: LD_VAR 0 2
42617: ARRAY
42618: PUSH
42619: LD_VAR 0 6
42623: PUSH
42624: LD_INT 1
42626: ARRAY
42627: UNION
42628: PPUSH
42629: CALL_OW 1
42633: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
42634: LD_VAR 0 6
42638: PUSH
42639: LD_INT 1
42641: ARRAY
42642: PPUSH
42643: LD_INT 126
42645: PPUSH
42646: CALL_OW 109
// end ; end ;
42650: GO 41729
42652: POP
42653: POP
// end ;
42654: LD_VAR 0 1
42658: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
42659: LD_INT 0
42661: PPUSH
42662: PPUSH
42663: PPUSH
42664: PPUSH
42665: PPUSH
42666: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
42667: LD_VAR 0 1
42671: NOT
42672: PUSH
42673: LD_VAR 0 2
42677: NOT
42678: OR
42679: PUSH
42680: LD_VAR 0 3
42684: NOT
42685: OR
42686: PUSH
42687: LD_VAR 0 4
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: LD_INT 4
42703: PUSH
42704: LD_INT 5
42706: PUSH
42707: LD_INT 8
42709: PUSH
42710: LD_INT 9
42712: PUSH
42713: LD_INT 15
42715: PUSH
42716: LD_INT 16
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: IN
42730: NOT
42731: OR
42732: IFFALSE 42736
// exit ;
42734: GO 43636
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
42736: LD_ADDR_VAR 0 2
42740: PUSH
42741: LD_VAR 0 2
42745: PPUSH
42746: LD_INT 21
42748: PUSH
42749: LD_INT 3
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 24
42758: PUSH
42759: LD_INT 250
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PPUSH
42770: CALL_OW 72
42774: ST_TO_ADDR
// case class of 1 , 15 :
42775: LD_VAR 0 4
42779: PUSH
42780: LD_INT 1
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42794
42786: LD_INT 15
42788: DOUBLE
42789: EQUAL
42790: IFTRUE 42794
42792: GO 42879
42794: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
42795: LD_ADDR_VAR 0 8
42799: PUSH
42800: LD_VAR 0 2
42804: PPUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 30
42810: PUSH
42811: LD_INT 32
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 30
42820: PUSH
42821: LD_INT 31
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: PPUSH
42833: CALL_OW 72
42837: PUSH
42838: LD_VAR 0 2
42842: PPUSH
42843: LD_INT 2
42845: PUSH
42846: LD_INT 30
42848: PUSH
42849: LD_INT 4
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 30
42858: PUSH
42859: LD_INT 5
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: PPUSH
42871: CALL_OW 72
42875: ADD
42876: ST_TO_ADDR
42877: GO 43125
42879: LD_INT 2
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42893
42885: LD_INT 16
42887: DOUBLE
42888: EQUAL
42889: IFTRUE 42893
42891: GO 42939
42893: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
42894: LD_ADDR_VAR 0 8
42898: PUSH
42899: LD_VAR 0 2
42903: PPUSH
42904: LD_INT 2
42906: PUSH
42907: LD_INT 30
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 30
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: PPUSH
42932: CALL_OW 72
42936: ST_TO_ADDR
42937: GO 43125
42939: LD_INT 3
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42947
42945: GO 42993
42947: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
42948: LD_ADDR_VAR 0 8
42952: PUSH
42953: LD_VAR 0 2
42957: PPUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 30
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 30
42973: PUSH
42974: LD_INT 3
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: PPUSH
42986: CALL_OW 72
42990: ST_TO_ADDR
42991: GO 43125
42993: LD_INT 4
42995: DOUBLE
42996: EQUAL
42997: IFTRUE 43001
42999: GO 43058
43001: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
43002: LD_ADDR_VAR 0 8
43006: PUSH
43007: LD_VAR 0 2
43011: PPUSH
43012: LD_INT 2
43014: PUSH
43015: LD_INT 30
43017: PUSH
43018: LD_INT 6
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 30
43027: PUSH
43028: LD_INT 7
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 30
43037: PUSH
43038: LD_INT 8
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: PPUSH
43051: CALL_OW 72
43055: ST_TO_ADDR
43056: GO 43125
43058: LD_INT 5
43060: DOUBLE
43061: EQUAL
43062: IFTRUE 43078
43064: LD_INT 8
43066: DOUBLE
43067: EQUAL
43068: IFTRUE 43078
43070: LD_INT 9
43072: DOUBLE
43073: EQUAL
43074: IFTRUE 43078
43076: GO 43124
43078: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
43079: LD_ADDR_VAR 0 8
43083: PUSH
43084: LD_VAR 0 2
43088: PPUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 30
43094: PUSH
43095: LD_INT 4
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 30
43104: PUSH
43105: LD_INT 5
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: LIST
43116: PPUSH
43117: CALL_OW 72
43121: ST_TO_ADDR
43122: GO 43125
43124: POP
// if not tmp then
43125: LD_VAR 0 8
43129: NOT
43130: IFFALSE 43134
// exit ;
43132: GO 43636
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
43134: LD_VAR 0 4
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 15
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: IN
43149: PUSH
43150: LD_EXP 96
43154: PUSH
43155: LD_VAR 0 1
43159: ARRAY
43160: AND
43161: IFFALSE 43317
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
43163: LD_ADDR_VAR 0 9
43167: PUSH
43168: LD_EXP 96
43172: PUSH
43173: LD_VAR 0 1
43177: ARRAY
43178: PUSH
43179: LD_INT 1
43181: ARRAY
43182: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
43183: LD_VAR 0 9
43187: PUSH
43188: LD_EXP 97
43192: PUSH
43193: LD_VAR 0 1
43197: ARRAY
43198: IN
43199: NOT
43200: IFFALSE 43315
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
43202: LD_ADDR_EXP 97
43206: PUSH
43207: LD_EXP 97
43211: PPUSH
43212: LD_VAR 0 1
43216: PUSH
43217: LD_EXP 97
43221: PUSH
43222: LD_VAR 0 1
43226: ARRAY
43227: PUSH
43228: LD_INT 1
43230: PLUS
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PPUSH
43236: LD_VAR 0 9
43240: PPUSH
43241: CALL 55556 0 3
43245: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
43246: LD_ADDR_EXP 96
43250: PUSH
43251: LD_EXP 96
43255: PPUSH
43256: LD_VAR 0 1
43260: PPUSH
43261: LD_EXP 96
43265: PUSH
43266: LD_VAR 0 1
43270: ARRAY
43271: PUSH
43272: LD_VAR 0 9
43276: DIFF
43277: PPUSH
43278: CALL_OW 1
43282: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
43283: LD_VAR 0 3
43287: PPUSH
43288: LD_EXP 97
43292: PUSH
43293: LD_VAR 0 1
43297: ARRAY
43298: PUSH
43299: LD_EXP 97
43303: PUSH
43304: LD_VAR 0 1
43308: ARRAY
43309: ARRAY
43310: PPUSH
43311: CALL_OW 120
// end ; exit ;
43315: GO 43636
// end ; if tmp > 1 then
43317: LD_VAR 0 8
43321: PUSH
43322: LD_INT 1
43324: GREATER
43325: IFFALSE 43429
// for i = 2 to tmp do
43327: LD_ADDR_VAR 0 6
43331: PUSH
43332: DOUBLE
43333: LD_INT 2
43335: DEC
43336: ST_TO_ADDR
43337: LD_VAR 0 8
43341: PUSH
43342: FOR_TO
43343: IFFALSE 43427
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
43345: LD_VAR 0 8
43349: PUSH
43350: LD_VAR 0 6
43354: ARRAY
43355: PPUSH
43356: CALL_OW 461
43360: PUSH
43361: LD_INT 6
43363: EQUAL
43364: IFFALSE 43425
// begin x := tmp [ i ] ;
43366: LD_ADDR_VAR 0 9
43370: PUSH
43371: LD_VAR 0 8
43375: PUSH
43376: LD_VAR 0 6
43380: ARRAY
43381: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
43382: LD_ADDR_VAR 0 8
43386: PUSH
43387: LD_VAR 0 8
43391: PPUSH
43392: LD_VAR 0 6
43396: PPUSH
43397: CALL_OW 3
43401: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
43402: LD_ADDR_VAR 0 8
43406: PUSH
43407: LD_VAR 0 8
43411: PPUSH
43412: LD_INT 1
43414: PPUSH
43415: LD_VAR 0 9
43419: PPUSH
43420: CALL_OW 2
43424: ST_TO_ADDR
// end ;
43425: GO 43342
43427: POP
43428: POP
// for i in tmp do
43429: LD_ADDR_VAR 0 6
43433: PUSH
43434: LD_VAR 0 8
43438: PUSH
43439: FOR_IN
43440: IFFALSE 43509
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
43442: LD_VAR 0 6
43446: PPUSH
43447: CALL_OW 313
43451: PUSH
43452: LD_INT 6
43454: LESS
43455: PUSH
43456: LD_VAR 0 6
43460: PPUSH
43461: CALL_OW 266
43465: PUSH
43466: LD_INT 31
43468: PUSH
43469: LD_INT 32
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: IN
43476: NOT
43477: AND
43478: PUSH
43479: LD_VAR 0 6
43483: PPUSH
43484: CALL_OW 313
43488: PUSH
43489: LD_INT 0
43491: EQUAL
43492: OR
43493: IFFALSE 43507
// begin j := i ;
43495: LD_ADDR_VAR 0 7
43499: PUSH
43500: LD_VAR 0 6
43504: ST_TO_ADDR
// break ;
43505: GO 43509
// end ; end ;
43507: GO 43439
43509: POP
43510: POP
// if j then
43511: LD_VAR 0 7
43515: IFFALSE 43533
// ComEnterUnit ( unit , j ) else
43517: LD_VAR 0 3
43521: PPUSH
43522: LD_VAR 0 7
43526: PPUSH
43527: CALL_OW 120
43531: GO 43636
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43533: LD_ADDR_VAR 0 10
43537: PUSH
43538: LD_VAR 0 2
43542: PPUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 30
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 30
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: PPUSH
43571: CALL_OW 72
43575: ST_TO_ADDR
// if depot then
43576: LD_VAR 0 10
43580: IFFALSE 43636
// begin depot := NearestUnitToUnit ( depot , unit ) ;
43582: LD_ADDR_VAR 0 10
43586: PUSH
43587: LD_VAR 0 10
43591: PPUSH
43592: LD_VAR 0 3
43596: PPUSH
43597: CALL_OW 74
43601: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
43602: LD_VAR 0 3
43606: PPUSH
43607: LD_VAR 0 10
43611: PPUSH
43612: CALL_OW 296
43616: PUSH
43617: LD_INT 10
43619: GREATER
43620: IFFALSE 43636
// ComStandNearbyBuilding ( unit , depot ) ;
43622: LD_VAR 0 3
43626: PPUSH
43627: LD_VAR 0 10
43631: PPUSH
43632: CALL 52170 0 2
// end ; end ; end ;
43636: LD_VAR 0 5
43640: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
43641: LD_INT 0
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
// if not mc_bases then
43647: LD_EXP 87
43651: NOT
43652: IFFALSE 43656
// exit ;
43654: GO 43895
// for i = 1 to mc_bases do
43656: LD_ADDR_VAR 0 2
43660: PUSH
43661: DOUBLE
43662: LD_INT 1
43664: DEC
43665: ST_TO_ADDR
43666: LD_EXP 87
43670: PUSH
43671: FOR_TO
43672: IFFALSE 43893
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
43674: LD_ADDR_VAR 0 4
43678: PUSH
43679: LD_EXP 87
43683: PUSH
43684: LD_VAR 0 2
43688: ARRAY
43689: PPUSH
43690: LD_INT 21
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PPUSH
43700: CALL_OW 72
43704: PUSH
43705: LD_EXP 116
43709: PUSH
43710: LD_VAR 0 2
43714: ARRAY
43715: UNION
43716: ST_TO_ADDR
// if not tmp then
43717: LD_VAR 0 4
43721: NOT
43722: IFFALSE 43726
// continue ;
43724: GO 43671
// for j in tmp do
43726: LD_ADDR_VAR 0 3
43730: PUSH
43731: LD_VAR 0 4
43735: PUSH
43736: FOR_IN
43737: IFFALSE 43889
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
43739: LD_VAR 0 3
43743: PPUSH
43744: CALL_OW 110
43748: NOT
43749: PUSH
43750: LD_VAR 0 3
43754: PPUSH
43755: CALL_OW 314
43759: NOT
43760: AND
43761: PUSH
43762: LD_VAR 0 3
43766: PPUSH
43767: CALL_OW 311
43771: NOT
43772: AND
43773: PUSH
43774: LD_VAR 0 3
43778: PPUSH
43779: CALL_OW 310
43783: NOT
43784: AND
43785: PUSH
43786: LD_VAR 0 3
43790: PUSH
43791: LD_EXP 90
43795: PUSH
43796: LD_VAR 0 2
43800: ARRAY
43801: PUSH
43802: LD_INT 1
43804: ARRAY
43805: IN
43806: NOT
43807: AND
43808: PUSH
43809: LD_VAR 0 3
43813: PUSH
43814: LD_EXP 90
43818: PUSH
43819: LD_VAR 0 2
43823: ARRAY
43824: PUSH
43825: LD_INT 2
43827: ARRAY
43828: IN
43829: NOT
43830: AND
43831: PUSH
43832: LD_VAR 0 3
43836: PUSH
43837: LD_EXP 99
43841: PUSH
43842: LD_VAR 0 2
43846: ARRAY
43847: IN
43848: NOT
43849: AND
43850: IFFALSE 43887
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
43852: LD_VAR 0 2
43856: PPUSH
43857: LD_EXP 87
43861: PUSH
43862: LD_VAR 0 2
43866: ARRAY
43867: PPUSH
43868: LD_VAR 0 3
43872: PPUSH
43873: LD_VAR 0 3
43877: PPUSH
43878: CALL_OW 257
43882: PPUSH
43883: CALL 42659 0 4
// end ;
43887: GO 43736
43889: POP
43890: POP
// end ;
43891: GO 43671
43893: POP
43894: POP
// end ;
43895: LD_VAR 0 1
43899: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
43900: LD_INT 0
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
// if not mc_bases [ base ] then
43908: LD_EXP 87
43912: PUSH
43913: LD_VAR 0 1
43917: ARRAY
43918: NOT
43919: IFFALSE 43923
// exit ;
43921: GO 44105
// tmp := [ ] ;
43923: LD_ADDR_VAR 0 6
43927: PUSH
43928: EMPTY
43929: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
43930: LD_ADDR_VAR 0 7
43934: PUSH
43935: LD_VAR 0 3
43939: PPUSH
43940: LD_INT 0
43942: PPUSH
43943: CALL_OW 517
43947: ST_TO_ADDR
// if not list then
43948: LD_VAR 0 7
43952: NOT
43953: IFFALSE 43957
// exit ;
43955: GO 44105
// for i = 1 to amount do
43957: LD_ADDR_VAR 0 5
43961: PUSH
43962: DOUBLE
43963: LD_INT 1
43965: DEC
43966: ST_TO_ADDR
43967: LD_VAR 0 2
43971: PUSH
43972: FOR_TO
43973: IFFALSE 44053
// begin x := rand ( 1 , list [ 1 ] ) ;
43975: LD_ADDR_VAR 0 8
43979: PUSH
43980: LD_INT 1
43982: PPUSH
43983: LD_VAR 0 7
43987: PUSH
43988: LD_INT 1
43990: ARRAY
43991: PPUSH
43992: CALL_OW 12
43996: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
43997: LD_ADDR_VAR 0 6
44001: PUSH
44002: LD_VAR 0 6
44006: PPUSH
44007: LD_VAR 0 5
44011: PPUSH
44012: LD_VAR 0 7
44016: PUSH
44017: LD_INT 1
44019: ARRAY
44020: PUSH
44021: LD_VAR 0 8
44025: ARRAY
44026: PUSH
44027: LD_VAR 0 7
44031: PUSH
44032: LD_INT 2
44034: ARRAY
44035: PUSH
44036: LD_VAR 0 8
44040: ARRAY
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PPUSH
44046: CALL_OW 1
44050: ST_TO_ADDR
// end ;
44051: GO 43972
44053: POP
44054: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
44055: LD_ADDR_EXP 100
44059: PUSH
44060: LD_EXP 100
44064: PPUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: LD_VAR 0 6
44074: PPUSH
44075: CALL_OW 1
44079: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
44080: LD_ADDR_EXP 102
44084: PUSH
44085: LD_EXP 102
44089: PPUSH
44090: LD_VAR 0 1
44094: PPUSH
44095: LD_VAR 0 3
44099: PPUSH
44100: CALL_OW 1
44104: ST_TO_ADDR
// end ;
44105: LD_VAR 0 4
44109: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
44110: LD_INT 0
44112: PPUSH
// if not mc_bases [ base ] then
44113: LD_EXP 87
44117: PUSH
44118: LD_VAR 0 1
44122: ARRAY
44123: NOT
44124: IFFALSE 44128
// exit ;
44126: GO 44153
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
44128: LD_ADDR_EXP 92
44132: PUSH
44133: LD_EXP 92
44137: PPUSH
44138: LD_VAR 0 1
44142: PPUSH
44143: LD_VAR 0 2
44147: PPUSH
44148: CALL_OW 1
44152: ST_TO_ADDR
// end ;
44153: LD_VAR 0 3
44157: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
44158: LD_INT 0
44160: PPUSH
// if not mc_bases [ base ] then
44161: LD_EXP 87
44165: PUSH
44166: LD_VAR 0 1
44170: ARRAY
44171: NOT
44172: IFFALSE 44176
// exit ;
44174: GO 44213
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
44176: LD_ADDR_EXP 92
44180: PUSH
44181: LD_EXP 92
44185: PPUSH
44186: LD_VAR 0 1
44190: PPUSH
44191: LD_EXP 92
44195: PUSH
44196: LD_VAR 0 1
44200: ARRAY
44201: PUSH
44202: LD_VAR 0 2
44206: UNION
44207: PPUSH
44208: CALL_OW 1
44212: ST_TO_ADDR
// end ;
44213: LD_VAR 0 3
44217: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
44218: LD_INT 0
44220: PPUSH
// if not mc_bases [ base ] then
44221: LD_EXP 87
44225: PUSH
44226: LD_VAR 0 1
44230: ARRAY
44231: NOT
44232: IFFALSE 44236
// exit ;
44234: GO 44261
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
44236: LD_ADDR_EXP 108
44240: PUSH
44241: LD_EXP 108
44245: PPUSH
44246: LD_VAR 0 1
44250: PPUSH
44251: LD_VAR 0 2
44255: PPUSH
44256: CALL_OW 1
44260: ST_TO_ADDR
// end ;
44261: LD_VAR 0 3
44265: RET
// export function MC_InsertProduceList ( base , components ) ; begin
44266: LD_INT 0
44268: PPUSH
// if not mc_bases [ base ] then
44269: LD_EXP 87
44273: PUSH
44274: LD_VAR 0 1
44278: ARRAY
44279: NOT
44280: IFFALSE 44284
// exit ;
44282: GO 44321
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
44284: LD_ADDR_EXP 108
44288: PUSH
44289: LD_EXP 108
44293: PPUSH
44294: LD_VAR 0 1
44298: PPUSH
44299: LD_EXP 108
44303: PUSH
44304: LD_VAR 0 1
44308: ARRAY
44309: PUSH
44310: LD_VAR 0 2
44314: ADD
44315: PPUSH
44316: CALL_OW 1
44320: ST_TO_ADDR
// end ;
44321: LD_VAR 0 3
44325: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
44326: LD_INT 0
44328: PPUSH
// if not mc_bases [ base ] then
44329: LD_EXP 87
44333: PUSH
44334: LD_VAR 0 1
44338: ARRAY
44339: NOT
44340: IFFALSE 44344
// exit ;
44342: GO 44398
// mc_defender := Replace ( mc_defender , base , deflist ) ;
44344: LD_ADDR_EXP 109
44348: PUSH
44349: LD_EXP 109
44353: PPUSH
44354: LD_VAR 0 1
44358: PPUSH
44359: LD_VAR 0 2
44363: PPUSH
44364: CALL_OW 1
44368: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
44369: LD_ADDR_EXP 98
44373: PUSH
44374: LD_EXP 98
44378: PPUSH
44379: LD_VAR 0 1
44383: PPUSH
44384: LD_VAR 0 2
44388: PUSH
44389: LD_INT 0
44391: PLUS
44392: PPUSH
44393: CALL_OW 1
44397: ST_TO_ADDR
// end ;
44398: LD_VAR 0 3
44402: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
44403: LD_INT 0
44405: PPUSH
// if not mc_bases [ base ] then
44406: LD_EXP 87
44410: PUSH
44411: LD_VAR 0 1
44415: ARRAY
44416: NOT
44417: IFFALSE 44421
// exit ;
44419: GO 44446
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
44421: LD_ADDR_EXP 98
44425: PUSH
44426: LD_EXP 98
44430: PPUSH
44431: LD_VAR 0 1
44435: PPUSH
44436: LD_VAR 0 2
44440: PPUSH
44441: CALL_OW 1
44445: ST_TO_ADDR
// end ;
44446: LD_VAR 0 3
44450: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
44451: LD_INT 0
44453: PPUSH
44454: PPUSH
44455: PPUSH
44456: PPUSH
// if not mc_bases [ base ] then
44457: LD_EXP 87
44461: PUSH
44462: LD_VAR 0 1
44466: ARRAY
44467: NOT
44468: IFFALSE 44472
// exit ;
44470: GO 44537
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
44472: LD_ADDR_EXP 107
44476: PUSH
44477: LD_EXP 107
44481: PPUSH
44482: LD_VAR 0 1
44486: PUSH
44487: LD_EXP 107
44491: PUSH
44492: LD_VAR 0 1
44496: ARRAY
44497: PUSH
44498: LD_INT 1
44500: PLUS
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PPUSH
44506: LD_VAR 0 1
44510: PUSH
44511: LD_VAR 0 2
44515: PUSH
44516: LD_VAR 0 3
44520: PUSH
44521: LD_VAR 0 4
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: PPUSH
44532: CALL 55556 0 3
44536: ST_TO_ADDR
// end ;
44537: LD_VAR 0 5
44541: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
44542: LD_INT 0
44544: PPUSH
// if not mc_bases [ base ] then
44545: LD_EXP 87
44549: PUSH
44550: LD_VAR 0 1
44554: ARRAY
44555: NOT
44556: IFFALSE 44560
// exit ;
44558: GO 44585
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
44560: LD_ADDR_EXP 124
44564: PUSH
44565: LD_EXP 124
44569: PPUSH
44570: LD_VAR 0 1
44574: PPUSH
44575: LD_VAR 0 2
44579: PPUSH
44580: CALL_OW 1
44584: ST_TO_ADDR
// end ;
44585: LD_VAR 0 3
44589: RET
// export function MC_GetMinesField ( base ) ; begin
44590: LD_INT 0
44592: PPUSH
// result := mc_mines [ base ] ;
44593: LD_ADDR_VAR 0 2
44597: PUSH
44598: LD_EXP 100
44602: PUSH
44603: LD_VAR 0 1
44607: ARRAY
44608: ST_TO_ADDR
// end ;
44609: LD_VAR 0 2
44613: RET
// export function MC_GetProduceList ( base ) ; begin
44614: LD_INT 0
44616: PPUSH
// result := mc_produce [ base ] ;
44617: LD_ADDR_VAR 0 2
44621: PUSH
44622: LD_EXP 108
44626: PUSH
44627: LD_VAR 0 1
44631: ARRAY
44632: ST_TO_ADDR
// end ;
44633: LD_VAR 0 2
44637: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
44638: LD_INT 0
44640: PPUSH
44641: PPUSH
// if not mc_bases then
44642: LD_EXP 87
44646: NOT
44647: IFFALSE 44651
// exit ;
44649: GO 44716
// if mc_bases [ base ] then
44651: LD_EXP 87
44655: PUSH
44656: LD_VAR 0 1
44660: ARRAY
44661: IFFALSE 44716
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44663: LD_ADDR_VAR 0 3
44667: PUSH
44668: LD_EXP 87
44672: PUSH
44673: LD_VAR 0 1
44677: ARRAY
44678: PPUSH
44679: LD_INT 30
44681: PUSH
44682: LD_VAR 0 2
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PPUSH
44691: CALL_OW 72
44695: ST_TO_ADDR
// if result then
44696: LD_VAR 0 3
44700: IFFALSE 44716
// result := result [ 1 ] ;
44702: LD_ADDR_VAR 0 3
44706: PUSH
44707: LD_VAR 0 3
44711: PUSH
44712: LD_INT 1
44714: ARRAY
44715: ST_TO_ADDR
// end ; end ;
44716: LD_VAR 0 3
44720: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
44721: LD_INT 0
44723: PPUSH
44724: PPUSH
// if not mc_bases then
44725: LD_EXP 87
44729: NOT
44730: IFFALSE 44734
// exit ;
44732: GO 44779
// if mc_bases [ base ] then
44734: LD_EXP 87
44738: PUSH
44739: LD_VAR 0 1
44743: ARRAY
44744: IFFALSE 44779
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44746: LD_ADDR_VAR 0 3
44750: PUSH
44751: LD_EXP 87
44755: PUSH
44756: LD_VAR 0 1
44760: ARRAY
44761: PPUSH
44762: LD_INT 30
44764: PUSH
44765: LD_VAR 0 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PPUSH
44774: CALL_OW 72
44778: ST_TO_ADDR
// end ;
44779: LD_VAR 0 3
44783: RET
// export function MC_SetTame ( base , area ) ; begin
44784: LD_INT 0
44786: PPUSH
// if not mc_bases or not base then
44787: LD_EXP 87
44791: NOT
44792: PUSH
44793: LD_VAR 0 1
44797: NOT
44798: OR
44799: IFFALSE 44803
// exit ;
44801: GO 44828
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
44803: LD_ADDR_EXP 115
44807: PUSH
44808: LD_EXP 115
44812: PPUSH
44813: LD_VAR 0 1
44817: PPUSH
44818: LD_VAR 0 2
44822: PPUSH
44823: CALL_OW 1
44827: ST_TO_ADDR
// end ;
44828: LD_VAR 0 3
44832: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
44833: LD_INT 0
44835: PPUSH
44836: PPUSH
// if not mc_bases or not base then
44837: LD_EXP 87
44841: NOT
44842: PUSH
44843: LD_VAR 0 1
44847: NOT
44848: OR
44849: IFFALSE 44853
// exit ;
44851: GO 44955
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44853: LD_ADDR_VAR 0 4
44857: PUSH
44858: LD_EXP 87
44862: PUSH
44863: LD_VAR 0 1
44867: ARRAY
44868: PPUSH
44869: LD_INT 30
44871: PUSH
44872: LD_VAR 0 2
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PPUSH
44881: CALL_OW 72
44885: ST_TO_ADDR
// if not tmp then
44886: LD_VAR 0 4
44890: NOT
44891: IFFALSE 44895
// exit ;
44893: GO 44955
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
44895: LD_ADDR_EXP 119
44899: PUSH
44900: LD_EXP 119
44904: PPUSH
44905: LD_VAR 0 1
44909: PPUSH
44910: LD_EXP 119
44914: PUSH
44915: LD_VAR 0 1
44919: ARRAY
44920: PPUSH
44921: LD_EXP 119
44925: PUSH
44926: LD_VAR 0 1
44930: ARRAY
44931: PUSH
44932: LD_INT 1
44934: PLUS
44935: PPUSH
44936: LD_VAR 0 4
44940: PUSH
44941: LD_INT 1
44943: ARRAY
44944: PPUSH
44945: CALL_OW 2
44949: PPUSH
44950: CALL_OW 1
44954: ST_TO_ADDR
// end ;
44955: LD_VAR 0 3
44959: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
44960: LD_INT 0
44962: PPUSH
44963: PPUSH
// if not mc_bases or not base or not kinds then
44964: LD_EXP 87
44968: NOT
44969: PUSH
44970: LD_VAR 0 1
44974: NOT
44975: OR
44976: PUSH
44977: LD_VAR 0 2
44981: NOT
44982: OR
44983: IFFALSE 44987
// exit ;
44985: GO 45048
// for i in kinds do
44987: LD_ADDR_VAR 0 4
44991: PUSH
44992: LD_VAR 0 2
44996: PUSH
44997: FOR_IN
44998: IFFALSE 45046
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
45000: LD_ADDR_EXP 121
45004: PUSH
45005: LD_EXP 121
45009: PPUSH
45010: LD_VAR 0 1
45014: PUSH
45015: LD_EXP 121
45019: PUSH
45020: LD_VAR 0 1
45024: ARRAY
45025: PUSH
45026: LD_INT 1
45028: PLUS
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PPUSH
45034: LD_VAR 0 4
45038: PPUSH
45039: CALL 55556 0 3
45043: ST_TO_ADDR
45044: GO 44997
45046: POP
45047: POP
// end ;
45048: LD_VAR 0 3
45052: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
45053: LD_INT 0
45055: PPUSH
// if not mc_bases or not base or not areas then
45056: LD_EXP 87
45060: NOT
45061: PUSH
45062: LD_VAR 0 1
45066: NOT
45067: OR
45068: PUSH
45069: LD_VAR 0 2
45073: NOT
45074: OR
45075: IFFALSE 45079
// exit ;
45077: GO 45104
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
45079: LD_ADDR_EXP 105
45083: PUSH
45084: LD_EXP 105
45088: PPUSH
45089: LD_VAR 0 1
45093: PPUSH
45094: LD_VAR 0 2
45098: PPUSH
45099: CALL_OW 1
45103: ST_TO_ADDR
// end ;
45104: LD_VAR 0 3
45108: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
45109: LD_INT 0
45111: PPUSH
// if not mc_bases or not base or not teleports_exit then
45112: LD_EXP 87
45116: NOT
45117: PUSH
45118: LD_VAR 0 1
45122: NOT
45123: OR
45124: PUSH
45125: LD_VAR 0 2
45129: NOT
45130: OR
45131: IFFALSE 45135
// exit ;
45133: GO 45160
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
45135: LD_ADDR_EXP 122
45139: PUSH
45140: LD_EXP 122
45144: PPUSH
45145: LD_VAR 0 1
45149: PPUSH
45150: LD_VAR 0 2
45154: PPUSH
45155: CALL_OW 1
45159: ST_TO_ADDR
// end ;
45160: LD_VAR 0 3
45164: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
45165: LD_INT 0
45167: PPUSH
45168: PPUSH
45169: PPUSH
// if not mc_bases or not base or not ext_list then
45170: LD_EXP 87
45174: NOT
45175: PUSH
45176: LD_VAR 0 1
45180: NOT
45181: OR
45182: PUSH
45183: LD_VAR 0 5
45187: NOT
45188: OR
45189: IFFALSE 45193
// exit ;
45191: GO 45366
// tmp := GetFacExtXYD ( x , y , d ) ;
45193: LD_ADDR_VAR 0 8
45197: PUSH
45198: LD_VAR 0 2
45202: PPUSH
45203: LD_VAR 0 3
45207: PPUSH
45208: LD_VAR 0 4
45212: PPUSH
45213: CALL 84235 0 3
45217: ST_TO_ADDR
// if not tmp then
45218: LD_VAR 0 8
45222: NOT
45223: IFFALSE 45227
// exit ;
45225: GO 45366
// for i in tmp do
45227: LD_ADDR_VAR 0 7
45231: PUSH
45232: LD_VAR 0 8
45236: PUSH
45237: FOR_IN
45238: IFFALSE 45364
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
45240: LD_ADDR_EXP 92
45244: PUSH
45245: LD_EXP 92
45249: PPUSH
45250: LD_VAR 0 1
45254: PPUSH
45255: LD_EXP 92
45259: PUSH
45260: LD_VAR 0 1
45264: ARRAY
45265: PPUSH
45266: LD_EXP 92
45270: PUSH
45271: LD_VAR 0 1
45275: ARRAY
45276: PUSH
45277: LD_INT 1
45279: PLUS
45280: PPUSH
45281: LD_VAR 0 5
45285: PUSH
45286: LD_INT 1
45288: ARRAY
45289: PUSH
45290: LD_VAR 0 7
45294: PUSH
45295: LD_INT 1
45297: ARRAY
45298: PUSH
45299: LD_VAR 0 7
45303: PUSH
45304: LD_INT 2
45306: ARRAY
45307: PUSH
45308: LD_VAR 0 7
45312: PUSH
45313: LD_INT 3
45315: ARRAY
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: PPUSH
45323: CALL_OW 2
45327: PPUSH
45328: CALL_OW 1
45332: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
45333: LD_ADDR_VAR 0 5
45337: PUSH
45338: LD_VAR 0 5
45342: PPUSH
45343: LD_INT 1
45345: PPUSH
45346: CALL_OW 3
45350: ST_TO_ADDR
// if not ext_list then
45351: LD_VAR 0 5
45355: NOT
45356: IFFALSE 45362
// exit ;
45358: POP
45359: POP
45360: GO 45366
// end ;
45362: GO 45237
45364: POP
45365: POP
// end ;
45366: LD_VAR 0 6
45370: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
45371: LD_INT 0
45373: PPUSH
// if not mc_bases or not base or not weapon_list then
45374: LD_EXP 87
45378: NOT
45379: PUSH
45380: LD_VAR 0 1
45384: NOT
45385: OR
45386: PUSH
45387: LD_VAR 0 2
45391: NOT
45392: OR
45393: IFFALSE 45397
// exit ;
45395: GO 45422
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
45397: LD_ADDR_EXP 126
45401: PUSH
45402: LD_EXP 126
45406: PPUSH
45407: LD_VAR 0 1
45411: PPUSH
45412: LD_VAR 0 2
45416: PPUSH
45417: CALL_OW 1
45421: ST_TO_ADDR
// end ;
45422: LD_VAR 0 3
45426: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
45427: LD_INT 0
45429: PPUSH
// if not mc_bases or not base or not tech_list then
45430: LD_EXP 87
45434: NOT
45435: PUSH
45436: LD_VAR 0 1
45440: NOT
45441: OR
45442: PUSH
45443: LD_VAR 0 2
45447: NOT
45448: OR
45449: IFFALSE 45453
// exit ;
45451: GO 45478
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
45453: LD_ADDR_EXP 114
45457: PUSH
45458: LD_EXP 114
45462: PPUSH
45463: LD_VAR 0 1
45467: PPUSH
45468: LD_VAR 0 2
45472: PPUSH
45473: CALL_OW 1
45477: ST_TO_ADDR
// end ;
45478: LD_VAR 0 3
45482: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
45483: LD_INT 0
45485: PPUSH
// if not mc_bases or not parking_area or not base then
45486: LD_EXP 87
45490: NOT
45491: PUSH
45492: LD_VAR 0 2
45496: NOT
45497: OR
45498: PUSH
45499: LD_VAR 0 1
45503: NOT
45504: OR
45505: IFFALSE 45509
// exit ;
45507: GO 45534
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
45509: LD_ADDR_EXP 111
45513: PUSH
45514: LD_EXP 111
45518: PPUSH
45519: LD_VAR 0 1
45523: PPUSH
45524: LD_VAR 0 2
45528: PPUSH
45529: CALL_OW 1
45533: ST_TO_ADDR
// end ;
45534: LD_VAR 0 3
45538: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
45539: LD_INT 0
45541: PPUSH
// if not mc_bases or not base or not scan_area then
45542: LD_EXP 87
45546: NOT
45547: PUSH
45548: LD_VAR 0 1
45552: NOT
45553: OR
45554: PUSH
45555: LD_VAR 0 2
45559: NOT
45560: OR
45561: IFFALSE 45565
// exit ;
45563: GO 45590
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
45565: LD_ADDR_EXP 112
45569: PUSH
45570: LD_EXP 112
45574: PPUSH
45575: LD_VAR 0 1
45579: PPUSH
45580: LD_VAR 0 2
45584: PPUSH
45585: CALL_OW 1
45589: ST_TO_ADDR
// end ;
45590: LD_VAR 0 3
45594: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
45595: LD_INT 0
45597: PPUSH
45598: PPUSH
// if not mc_bases or not base then
45599: LD_EXP 87
45603: NOT
45604: PUSH
45605: LD_VAR 0 1
45609: NOT
45610: OR
45611: IFFALSE 45615
// exit ;
45613: GO 45679
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
45615: LD_ADDR_VAR 0 3
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 3
45628: PUSH
45629: LD_INT 4
45631: PUSH
45632: LD_INT 11
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
45642: LD_ADDR_EXP 114
45646: PUSH
45647: LD_EXP 114
45651: PPUSH
45652: LD_VAR 0 1
45656: PPUSH
45657: LD_EXP 114
45661: PUSH
45662: LD_VAR 0 1
45666: ARRAY
45667: PUSH
45668: LD_VAR 0 3
45672: DIFF
45673: PPUSH
45674: CALL_OW 1
45678: ST_TO_ADDR
// end ;
45679: LD_VAR 0 2
45683: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
45684: LD_INT 0
45686: PPUSH
// result := mc_vehicles [ base ] ;
45687: LD_ADDR_VAR 0 3
45691: PUSH
45692: LD_EXP 106
45696: PUSH
45697: LD_VAR 0 1
45701: ARRAY
45702: ST_TO_ADDR
// if onlyCombat then
45703: LD_VAR 0 2
45707: IFFALSE 45872
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
45709: LD_ADDR_VAR 0 3
45713: PUSH
45714: LD_VAR 0 3
45718: PUSH
45719: LD_VAR 0 3
45723: PPUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 34
45729: PUSH
45730: LD_INT 12
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 34
45739: PUSH
45740: LD_INT 51
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 34
45749: PUSH
45750: LD_EXP 73
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 34
45761: PUSH
45762: LD_INT 32
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 34
45771: PUSH
45772: LD_INT 13
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 34
45781: PUSH
45782: LD_INT 52
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 34
45791: PUSH
45792: LD_INT 14
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 34
45801: PUSH
45802: LD_INT 53
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 34
45811: PUSH
45812: LD_EXP 72
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 34
45823: PUSH
45824: LD_INT 31
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 34
45833: PUSH
45834: LD_INT 48
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 34
45843: PUSH
45844: LD_INT 8
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: PPUSH
45866: CALL_OW 72
45870: DIFF
45871: ST_TO_ADDR
// end ; end_of_file
45872: LD_VAR 0 3
45876: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
45877: LD_INT 0
45879: PPUSH
45880: PPUSH
45881: PPUSH
// if not mc_bases or not skirmish then
45882: LD_EXP 87
45886: NOT
45887: PUSH
45888: LD_EXP 85
45892: NOT
45893: OR
45894: IFFALSE 45898
// exit ;
45896: GO 46063
// for i = 1 to mc_bases do
45898: LD_ADDR_VAR 0 4
45902: PUSH
45903: DOUBLE
45904: LD_INT 1
45906: DEC
45907: ST_TO_ADDR
45908: LD_EXP 87
45912: PUSH
45913: FOR_TO
45914: IFFALSE 46061
// begin if sci in mc_bases [ i ] then
45916: LD_VAR 0 2
45920: PUSH
45921: LD_EXP 87
45925: PUSH
45926: LD_VAR 0 4
45930: ARRAY
45931: IN
45932: IFFALSE 46059
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
45934: LD_ADDR_EXP 116
45938: PUSH
45939: LD_EXP 116
45943: PPUSH
45944: LD_VAR 0 4
45948: PUSH
45949: LD_EXP 116
45953: PUSH
45954: LD_VAR 0 4
45958: ARRAY
45959: PUSH
45960: LD_INT 1
45962: PLUS
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PPUSH
45968: LD_VAR 0 1
45972: PPUSH
45973: CALL 55556 0 3
45977: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
45978: LD_ADDR_VAR 0 5
45982: PUSH
45983: LD_EXP 87
45987: PUSH
45988: LD_VAR 0 4
45992: ARRAY
45993: PPUSH
45994: LD_INT 2
45996: PUSH
45997: LD_INT 30
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 30
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: PPUSH
46022: CALL_OW 72
46026: PPUSH
46027: LD_VAR 0 1
46031: PPUSH
46032: CALL_OW 74
46036: ST_TO_ADDR
// if tmp then
46037: LD_VAR 0 5
46041: IFFALSE 46057
// ComStandNearbyBuilding ( ape , tmp ) ;
46043: LD_VAR 0 1
46047: PPUSH
46048: LD_VAR 0 5
46052: PPUSH
46053: CALL 52170 0 2
// break ;
46057: GO 46061
// end ; end ;
46059: GO 45913
46061: POP
46062: POP
// end ;
46063: LD_VAR 0 3
46067: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
46068: LD_INT 0
46070: PPUSH
46071: PPUSH
46072: PPUSH
// if not mc_bases or not skirmish then
46073: LD_EXP 87
46077: NOT
46078: PUSH
46079: LD_EXP 85
46083: NOT
46084: OR
46085: IFFALSE 46089
// exit ;
46087: GO 46178
// for i = 1 to mc_bases do
46089: LD_ADDR_VAR 0 4
46093: PUSH
46094: DOUBLE
46095: LD_INT 1
46097: DEC
46098: ST_TO_ADDR
46099: LD_EXP 87
46103: PUSH
46104: FOR_TO
46105: IFFALSE 46176
// begin if building in mc_busy_turret_list [ i ] then
46107: LD_VAR 0 1
46111: PUSH
46112: LD_EXP 97
46116: PUSH
46117: LD_VAR 0 4
46121: ARRAY
46122: IN
46123: IFFALSE 46174
// begin tmp := mc_busy_turret_list [ i ] diff building ;
46125: LD_ADDR_VAR 0 5
46129: PUSH
46130: LD_EXP 97
46134: PUSH
46135: LD_VAR 0 4
46139: ARRAY
46140: PUSH
46141: LD_VAR 0 1
46145: DIFF
46146: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
46147: LD_ADDR_EXP 97
46151: PUSH
46152: LD_EXP 97
46156: PPUSH
46157: LD_VAR 0 4
46161: PPUSH
46162: LD_VAR 0 5
46166: PPUSH
46167: CALL_OW 1
46171: ST_TO_ADDR
// break ;
46172: GO 46176
// end ; end ;
46174: GO 46104
46176: POP
46177: POP
// end ;
46178: LD_VAR 0 3
46182: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
46183: LD_INT 0
46185: PPUSH
46186: PPUSH
46187: PPUSH
// if not mc_bases or not skirmish then
46188: LD_EXP 87
46192: NOT
46193: PUSH
46194: LD_EXP 85
46198: NOT
46199: OR
46200: IFFALSE 46204
// exit ;
46202: GO 46403
// for i = 1 to mc_bases do
46204: LD_ADDR_VAR 0 5
46208: PUSH
46209: DOUBLE
46210: LD_INT 1
46212: DEC
46213: ST_TO_ADDR
46214: LD_EXP 87
46218: PUSH
46219: FOR_TO
46220: IFFALSE 46401
// if building in mc_bases [ i ] then
46222: LD_VAR 0 1
46226: PUSH
46227: LD_EXP 87
46231: PUSH
46232: LD_VAR 0 5
46236: ARRAY
46237: IN
46238: IFFALSE 46399
// begin tmp := mc_bases [ i ] diff building ;
46240: LD_ADDR_VAR 0 6
46244: PUSH
46245: LD_EXP 87
46249: PUSH
46250: LD_VAR 0 5
46254: ARRAY
46255: PUSH
46256: LD_VAR 0 1
46260: DIFF
46261: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
46262: LD_ADDR_EXP 87
46266: PUSH
46267: LD_EXP 87
46271: PPUSH
46272: LD_VAR 0 5
46276: PPUSH
46277: LD_VAR 0 6
46281: PPUSH
46282: CALL_OW 1
46286: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
46287: LD_VAR 0 1
46291: PUSH
46292: LD_EXP 95
46296: PUSH
46297: LD_VAR 0 5
46301: ARRAY
46302: IN
46303: IFFALSE 46342
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
46305: LD_ADDR_EXP 95
46309: PUSH
46310: LD_EXP 95
46314: PPUSH
46315: LD_VAR 0 5
46319: PPUSH
46320: LD_EXP 95
46324: PUSH
46325: LD_VAR 0 5
46329: ARRAY
46330: PUSH
46331: LD_VAR 0 1
46335: DIFF
46336: PPUSH
46337: CALL_OW 1
46341: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
46342: LD_VAR 0 1
46346: PUSH
46347: LD_EXP 96
46351: PUSH
46352: LD_VAR 0 5
46356: ARRAY
46357: IN
46358: IFFALSE 46397
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
46360: LD_ADDR_EXP 96
46364: PUSH
46365: LD_EXP 96
46369: PPUSH
46370: LD_VAR 0 5
46374: PPUSH
46375: LD_EXP 96
46379: PUSH
46380: LD_VAR 0 5
46384: ARRAY
46385: PUSH
46386: LD_VAR 0 1
46390: DIFF
46391: PPUSH
46392: CALL_OW 1
46396: ST_TO_ADDR
// break ;
46397: GO 46401
// end ;
46399: GO 46219
46401: POP
46402: POP
// end ;
46403: LD_VAR 0 4
46407: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
46408: LD_INT 0
46410: PPUSH
46411: PPUSH
46412: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
46413: LD_EXP 87
46417: NOT
46418: PUSH
46419: LD_EXP 85
46423: NOT
46424: OR
46425: PUSH
46426: LD_VAR 0 3
46430: PUSH
46431: LD_EXP 113
46435: IN
46436: NOT
46437: OR
46438: IFFALSE 46442
// exit ;
46440: GO 46565
// for i = 1 to mc_vehicles do
46442: LD_ADDR_VAR 0 6
46446: PUSH
46447: DOUBLE
46448: LD_INT 1
46450: DEC
46451: ST_TO_ADDR
46452: LD_EXP 106
46456: PUSH
46457: FOR_TO
46458: IFFALSE 46563
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
46460: LD_VAR 0 2
46464: PUSH
46465: LD_EXP 106
46469: PUSH
46470: LD_VAR 0 6
46474: ARRAY
46475: IN
46476: PUSH
46477: LD_VAR 0 1
46481: PUSH
46482: LD_EXP 106
46486: PUSH
46487: LD_VAR 0 6
46491: ARRAY
46492: IN
46493: OR
46494: IFFALSE 46561
// begin tmp := mc_vehicles [ i ] diff old ;
46496: LD_ADDR_VAR 0 7
46500: PUSH
46501: LD_EXP 106
46505: PUSH
46506: LD_VAR 0 6
46510: ARRAY
46511: PUSH
46512: LD_VAR 0 2
46516: DIFF
46517: ST_TO_ADDR
// tmp := tmp diff new ;
46518: LD_ADDR_VAR 0 7
46522: PUSH
46523: LD_VAR 0 7
46527: PUSH
46528: LD_VAR 0 1
46532: DIFF
46533: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
46534: LD_ADDR_EXP 106
46538: PUSH
46539: LD_EXP 106
46543: PPUSH
46544: LD_VAR 0 6
46548: PPUSH
46549: LD_VAR 0 7
46553: PPUSH
46554: CALL_OW 1
46558: ST_TO_ADDR
// break ;
46559: GO 46563
// end ;
46561: GO 46457
46563: POP
46564: POP
// end ;
46565: LD_VAR 0 5
46569: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
46570: LD_INT 0
46572: PPUSH
46573: PPUSH
46574: PPUSH
46575: PPUSH
// if not mc_bases or not skirmish then
46576: LD_EXP 87
46580: NOT
46581: PUSH
46582: LD_EXP 85
46586: NOT
46587: OR
46588: IFFALSE 46592
// exit ;
46590: GO 46969
// side := GetSide ( vehicle ) ;
46592: LD_ADDR_VAR 0 5
46596: PUSH
46597: LD_VAR 0 1
46601: PPUSH
46602: CALL_OW 255
46606: ST_TO_ADDR
// for i = 1 to mc_bases do
46607: LD_ADDR_VAR 0 4
46611: PUSH
46612: DOUBLE
46613: LD_INT 1
46615: DEC
46616: ST_TO_ADDR
46617: LD_EXP 87
46621: PUSH
46622: FOR_TO
46623: IFFALSE 46967
// begin if factory in mc_bases [ i ] then
46625: LD_VAR 0 2
46629: PUSH
46630: LD_EXP 87
46634: PUSH
46635: LD_VAR 0 4
46639: ARRAY
46640: IN
46641: IFFALSE 46965
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
46643: LD_EXP 109
46647: PUSH
46648: LD_VAR 0 4
46652: ARRAY
46653: PUSH
46654: LD_EXP 98
46658: PUSH
46659: LD_VAR 0 4
46663: ARRAY
46664: LESS
46665: PUSH
46666: LD_VAR 0 1
46670: PPUSH
46671: CALL_OW 264
46675: PUSH
46676: LD_INT 31
46678: PUSH
46679: LD_INT 32
46681: PUSH
46682: LD_INT 51
46684: PUSH
46685: LD_EXP 73
46689: PUSH
46690: LD_INT 12
46692: PUSH
46693: LD_INT 30
46695: PUSH
46696: LD_EXP 72
46700: PUSH
46701: LD_INT 11
46703: PUSH
46704: LD_INT 53
46706: PUSH
46707: LD_INT 14
46709: PUSH
46710: LD_EXP 76
46714: PUSH
46715: LD_INT 29
46717: PUSH
46718: LD_EXP 74
46722: PUSH
46723: LD_INT 13
46725: PUSH
46726: LD_INT 52
46728: PUSH
46729: LD_INT 48
46731: PUSH
46732: LD_INT 8
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: IN
46754: NOT
46755: AND
46756: IFFALSE 46804
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
46758: LD_ADDR_EXP 109
46762: PUSH
46763: LD_EXP 109
46767: PPUSH
46768: LD_VAR 0 4
46772: PUSH
46773: LD_EXP 109
46777: PUSH
46778: LD_VAR 0 4
46782: ARRAY
46783: PUSH
46784: LD_INT 1
46786: PLUS
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PPUSH
46792: LD_VAR 0 1
46796: PPUSH
46797: CALL 55556 0 3
46801: ST_TO_ADDR
46802: GO 46848
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
46804: LD_ADDR_EXP 106
46808: PUSH
46809: LD_EXP 106
46813: PPUSH
46814: LD_VAR 0 4
46818: PUSH
46819: LD_EXP 106
46823: PUSH
46824: LD_VAR 0 4
46828: ARRAY
46829: PUSH
46830: LD_INT 1
46832: PLUS
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PPUSH
46838: LD_VAR 0 1
46842: PPUSH
46843: CALL 55556 0 3
46847: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
46848: LD_VAR 0 1
46852: PPUSH
46853: CALL_OW 263
46857: PUSH
46858: LD_INT 2
46860: EQUAL
46861: IFFALSE 46881
// begin repeat wait ( 0 0$1 ) ;
46863: LD_INT 35
46865: PPUSH
46866: CALL_OW 67
// until IsControledBy ( vehicle ) ;
46870: LD_VAR 0 1
46874: PPUSH
46875: CALL_OW 312
46879: IFFALSE 46863
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
46881: LD_VAR 0 1
46885: PPUSH
46886: LD_EXP 111
46890: PUSH
46891: LD_VAR 0 4
46895: ARRAY
46896: PPUSH
46897: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
46901: LD_VAR 0 1
46905: PPUSH
46906: CALL_OW 263
46910: PUSH
46911: LD_INT 1
46913: NONEQUAL
46914: IFFALSE 46918
// break ;
46916: GO 46967
// repeat wait ( 0 0$1 ) ;
46918: LD_INT 35
46920: PPUSH
46921: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
46925: LD_VAR 0 1
46929: PPUSH
46930: LD_EXP 111
46934: PUSH
46935: LD_VAR 0 4
46939: ARRAY
46940: PPUSH
46941: CALL_OW 308
46945: IFFALSE 46918
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
46947: LD_VAR 0 1
46951: PPUSH
46952: CALL_OW 311
46956: PPUSH
46957: CALL_OW 121
// exit ;
46961: POP
46962: POP
46963: GO 46969
// end ; end ;
46965: GO 46622
46967: POP
46968: POP
// end ;
46969: LD_VAR 0 3
46973: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
46974: LD_INT 0
46976: PPUSH
46977: PPUSH
46978: PPUSH
46979: PPUSH
// if not mc_bases or not skirmish then
46980: LD_EXP 87
46984: NOT
46985: PUSH
46986: LD_EXP 85
46990: NOT
46991: OR
46992: IFFALSE 46996
// exit ;
46994: GO 47349
// repeat wait ( 0 0$1 ) ;
46996: LD_INT 35
46998: PPUSH
46999: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
47003: LD_VAR 0 2
47007: PPUSH
47008: LD_VAR 0 3
47012: PPUSH
47013: CALL_OW 284
47017: IFFALSE 46996
// if GetResourceTypeXY ( x , y ) = mat_artefact then
47019: LD_VAR 0 2
47023: PPUSH
47024: LD_VAR 0 3
47028: PPUSH
47029: CALL_OW 283
47033: PUSH
47034: LD_INT 4
47036: EQUAL
47037: IFFALSE 47041
// exit ;
47039: GO 47349
// for i = 1 to mc_bases do
47041: LD_ADDR_VAR 0 7
47045: PUSH
47046: DOUBLE
47047: LD_INT 1
47049: DEC
47050: ST_TO_ADDR
47051: LD_EXP 87
47055: PUSH
47056: FOR_TO
47057: IFFALSE 47347
// begin if mc_crates_area [ i ] then
47059: LD_EXP 105
47063: PUSH
47064: LD_VAR 0 7
47068: ARRAY
47069: IFFALSE 47180
// for j in mc_crates_area [ i ] do
47071: LD_ADDR_VAR 0 8
47075: PUSH
47076: LD_EXP 105
47080: PUSH
47081: LD_VAR 0 7
47085: ARRAY
47086: PUSH
47087: FOR_IN
47088: IFFALSE 47178
// if InArea ( x , y , j ) then
47090: LD_VAR 0 2
47094: PPUSH
47095: LD_VAR 0 3
47099: PPUSH
47100: LD_VAR 0 8
47104: PPUSH
47105: CALL_OW 309
47109: IFFALSE 47176
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
47111: LD_ADDR_EXP 103
47115: PUSH
47116: LD_EXP 103
47120: PPUSH
47121: LD_VAR 0 7
47125: PUSH
47126: LD_EXP 103
47130: PUSH
47131: LD_VAR 0 7
47135: ARRAY
47136: PUSH
47137: LD_INT 1
47139: PLUS
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PPUSH
47145: LD_VAR 0 4
47149: PUSH
47150: LD_VAR 0 2
47154: PUSH
47155: LD_VAR 0 3
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: LIST
47164: PPUSH
47165: CALL 55556 0 3
47169: ST_TO_ADDR
// exit ;
47170: POP
47171: POP
47172: POP
47173: POP
47174: GO 47349
// end ;
47176: GO 47087
47178: POP
47179: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47180: LD_ADDR_VAR 0 9
47184: PUSH
47185: LD_EXP 87
47189: PUSH
47190: LD_VAR 0 7
47194: ARRAY
47195: PPUSH
47196: LD_INT 2
47198: PUSH
47199: LD_INT 30
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 30
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: PPUSH
47224: CALL_OW 72
47228: ST_TO_ADDR
// if not depot then
47229: LD_VAR 0 9
47233: NOT
47234: IFFALSE 47238
// continue ;
47236: GO 47056
// for j in depot do
47238: LD_ADDR_VAR 0 8
47242: PUSH
47243: LD_VAR 0 9
47247: PUSH
47248: FOR_IN
47249: IFFALSE 47343
// if GetDistUnitXY ( j , x , y ) < 30 then
47251: LD_VAR 0 8
47255: PPUSH
47256: LD_VAR 0 2
47260: PPUSH
47261: LD_VAR 0 3
47265: PPUSH
47266: CALL_OW 297
47270: PUSH
47271: LD_INT 30
47273: LESS
47274: IFFALSE 47341
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
47276: LD_ADDR_EXP 103
47280: PUSH
47281: LD_EXP 103
47285: PPUSH
47286: LD_VAR 0 7
47290: PUSH
47291: LD_EXP 103
47295: PUSH
47296: LD_VAR 0 7
47300: ARRAY
47301: PUSH
47302: LD_INT 1
47304: PLUS
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PPUSH
47310: LD_VAR 0 4
47314: PUSH
47315: LD_VAR 0 2
47319: PUSH
47320: LD_VAR 0 3
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: PPUSH
47330: CALL 55556 0 3
47334: ST_TO_ADDR
// exit ;
47335: POP
47336: POP
47337: POP
47338: POP
47339: GO 47349
// end ;
47341: GO 47248
47343: POP
47344: POP
// end ;
47345: GO 47056
47347: POP
47348: POP
// end ;
47349: LD_VAR 0 6
47353: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
47354: LD_INT 0
47356: PPUSH
47357: PPUSH
47358: PPUSH
47359: PPUSH
// if not mc_bases or not skirmish then
47360: LD_EXP 87
47364: NOT
47365: PUSH
47366: LD_EXP 85
47370: NOT
47371: OR
47372: IFFALSE 47376
// exit ;
47374: GO 47653
// side := GetSide ( lab ) ;
47376: LD_ADDR_VAR 0 4
47380: PUSH
47381: LD_VAR 0 2
47385: PPUSH
47386: CALL_OW 255
47390: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
47391: LD_VAR 0 4
47395: PUSH
47396: LD_EXP 113
47400: IN
47401: NOT
47402: PUSH
47403: LD_EXP 114
47407: NOT
47408: OR
47409: PUSH
47410: LD_EXP 87
47414: NOT
47415: OR
47416: IFFALSE 47420
// exit ;
47418: GO 47653
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
47420: LD_ADDR_EXP 114
47424: PUSH
47425: LD_EXP 114
47429: PPUSH
47430: LD_VAR 0 4
47434: PPUSH
47435: LD_EXP 114
47439: PUSH
47440: LD_VAR 0 4
47444: ARRAY
47445: PUSH
47446: LD_VAR 0 1
47450: DIFF
47451: PPUSH
47452: CALL_OW 1
47456: ST_TO_ADDR
// for i = 1 to mc_bases do
47457: LD_ADDR_VAR 0 5
47461: PUSH
47462: DOUBLE
47463: LD_INT 1
47465: DEC
47466: ST_TO_ADDR
47467: LD_EXP 87
47471: PUSH
47472: FOR_TO
47473: IFFALSE 47651
// begin if lab in mc_bases [ i ] then
47475: LD_VAR 0 2
47479: PUSH
47480: LD_EXP 87
47484: PUSH
47485: LD_VAR 0 5
47489: ARRAY
47490: IN
47491: IFFALSE 47649
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
47493: LD_VAR 0 1
47497: PUSH
47498: LD_INT 11
47500: PUSH
47501: LD_INT 4
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: IN
47516: PUSH
47517: LD_EXP 117
47521: PUSH
47522: LD_VAR 0 5
47526: ARRAY
47527: AND
47528: IFFALSE 47649
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
47530: LD_ADDR_VAR 0 6
47534: PUSH
47535: LD_EXP 117
47539: PUSH
47540: LD_VAR 0 5
47544: ARRAY
47545: PUSH
47546: LD_INT 1
47548: ARRAY
47549: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
47550: LD_ADDR_EXP 117
47554: PUSH
47555: LD_EXP 117
47559: PPUSH
47560: LD_VAR 0 5
47564: PPUSH
47565: EMPTY
47566: PPUSH
47567: CALL_OW 1
47571: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
47572: LD_VAR 0 6
47576: PPUSH
47577: LD_INT 0
47579: PPUSH
47580: CALL_OW 109
// ComExitBuilding ( tmp ) ;
47584: LD_VAR 0 6
47588: PPUSH
47589: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
47593: LD_ADDR_EXP 116
47597: PUSH
47598: LD_EXP 116
47602: PPUSH
47603: LD_VAR 0 5
47607: PPUSH
47608: LD_EXP 116
47612: PUSH
47613: LD_VAR 0 5
47617: ARRAY
47618: PPUSH
47619: LD_INT 1
47621: PPUSH
47622: LD_VAR 0 6
47626: PPUSH
47627: CALL_OW 2
47631: PPUSH
47632: CALL_OW 1
47636: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
47637: LD_VAR 0 5
47641: PPUSH
47642: LD_INT 112
47644: PPUSH
47645: CALL 24649 0 2
// end ; end ; end ;
47649: GO 47472
47651: POP
47652: POP
// end ;
47653: LD_VAR 0 3
47657: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
47658: LD_INT 0
47660: PPUSH
47661: PPUSH
47662: PPUSH
47663: PPUSH
47664: PPUSH
47665: PPUSH
47666: PPUSH
47667: PPUSH
// if not mc_bases or not skirmish then
47668: LD_EXP 87
47672: NOT
47673: PUSH
47674: LD_EXP 85
47678: NOT
47679: OR
47680: IFFALSE 47684
// exit ;
47682: GO 49055
// for i = 1 to mc_bases do
47684: LD_ADDR_VAR 0 3
47688: PUSH
47689: DOUBLE
47690: LD_INT 1
47692: DEC
47693: ST_TO_ADDR
47694: LD_EXP 87
47698: PUSH
47699: FOR_TO
47700: IFFALSE 49053
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
47702: LD_VAR 0 1
47706: PUSH
47707: LD_EXP 87
47711: PUSH
47712: LD_VAR 0 3
47716: ARRAY
47717: IN
47718: PUSH
47719: LD_VAR 0 1
47723: PUSH
47724: LD_EXP 94
47728: PUSH
47729: LD_VAR 0 3
47733: ARRAY
47734: IN
47735: OR
47736: PUSH
47737: LD_VAR 0 1
47741: PUSH
47742: LD_EXP 109
47746: PUSH
47747: LD_VAR 0 3
47751: ARRAY
47752: IN
47753: OR
47754: PUSH
47755: LD_VAR 0 1
47759: PUSH
47760: LD_EXP 106
47764: PUSH
47765: LD_VAR 0 3
47769: ARRAY
47770: IN
47771: OR
47772: PUSH
47773: LD_VAR 0 1
47777: PUSH
47778: LD_EXP 116
47782: PUSH
47783: LD_VAR 0 3
47787: ARRAY
47788: IN
47789: OR
47790: PUSH
47791: LD_VAR 0 1
47795: PUSH
47796: LD_EXP 117
47800: PUSH
47801: LD_VAR 0 3
47805: ARRAY
47806: IN
47807: OR
47808: IFFALSE 49051
// begin if un in mc_ape [ i ] then
47810: LD_VAR 0 1
47814: PUSH
47815: LD_EXP 116
47819: PUSH
47820: LD_VAR 0 3
47824: ARRAY
47825: IN
47826: IFFALSE 47865
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
47828: LD_ADDR_EXP 116
47832: PUSH
47833: LD_EXP 116
47837: PPUSH
47838: LD_VAR 0 3
47842: PPUSH
47843: LD_EXP 116
47847: PUSH
47848: LD_VAR 0 3
47852: ARRAY
47853: PUSH
47854: LD_VAR 0 1
47858: DIFF
47859: PPUSH
47860: CALL_OW 1
47864: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
47865: LD_VAR 0 1
47869: PUSH
47870: LD_EXP 117
47874: PUSH
47875: LD_VAR 0 3
47879: ARRAY
47880: IN
47881: IFFALSE 47905
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
47883: LD_ADDR_EXP 117
47887: PUSH
47888: LD_EXP 117
47892: PPUSH
47893: LD_VAR 0 3
47897: PPUSH
47898: EMPTY
47899: PPUSH
47900: CALL_OW 1
47904: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
47905: LD_VAR 0 1
47909: PPUSH
47910: CALL_OW 247
47914: PUSH
47915: LD_INT 2
47917: EQUAL
47918: PUSH
47919: LD_VAR 0 1
47923: PPUSH
47924: CALL_OW 110
47928: PUSH
47929: LD_INT 20
47931: EQUAL
47932: PUSH
47933: LD_VAR 0 1
47937: PUSH
47938: LD_EXP 109
47942: PUSH
47943: LD_VAR 0 3
47947: ARRAY
47948: IN
47949: OR
47950: PUSH
47951: LD_VAR 0 1
47955: PPUSH
47956: CALL_OW 264
47960: PUSH
47961: LD_INT 12
47963: PUSH
47964: LD_INT 51
47966: PUSH
47967: LD_EXP 73
47971: PUSH
47972: LD_INT 32
47974: PUSH
47975: LD_INT 13
47977: PUSH
47978: LD_INT 52
47980: PUSH
47981: LD_INT 31
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: IN
47993: OR
47994: AND
47995: IFFALSE 48303
// begin if un in mc_defender [ i ] then
47997: LD_VAR 0 1
48001: PUSH
48002: LD_EXP 109
48006: PUSH
48007: LD_VAR 0 3
48011: ARRAY
48012: IN
48013: IFFALSE 48052
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
48015: LD_ADDR_EXP 109
48019: PUSH
48020: LD_EXP 109
48024: PPUSH
48025: LD_VAR 0 3
48029: PPUSH
48030: LD_EXP 109
48034: PUSH
48035: LD_VAR 0 3
48039: ARRAY
48040: PUSH
48041: LD_VAR 0 1
48045: DIFF
48046: PPUSH
48047: CALL_OW 1
48051: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
48052: LD_ADDR_VAR 0 8
48056: PUSH
48057: LD_VAR 0 3
48061: PPUSH
48062: LD_INT 3
48064: PPUSH
48065: CALL 44721 0 2
48069: ST_TO_ADDR
// if fac then
48070: LD_VAR 0 8
48074: IFFALSE 48303
// begin for j in fac do
48076: LD_ADDR_VAR 0 4
48080: PUSH
48081: LD_VAR 0 8
48085: PUSH
48086: FOR_IN
48087: IFFALSE 48301
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
48089: LD_ADDR_VAR 0 9
48093: PUSH
48094: LD_VAR 0 8
48098: PPUSH
48099: LD_VAR 0 1
48103: PPUSH
48104: CALL_OW 265
48108: PPUSH
48109: LD_VAR 0 1
48113: PPUSH
48114: CALL_OW 262
48118: PPUSH
48119: LD_VAR 0 1
48123: PPUSH
48124: CALL_OW 263
48128: PPUSH
48129: LD_VAR 0 1
48133: PPUSH
48134: CALL_OW 264
48138: PPUSH
48139: CALL 53088 0 5
48143: ST_TO_ADDR
// if components then
48144: LD_VAR 0 9
48148: IFFALSE 48299
// begin if GetWeapon ( un ) = ar_control_tower then
48150: LD_VAR 0 1
48154: PPUSH
48155: CALL_OW 264
48159: PUSH
48160: LD_INT 31
48162: EQUAL
48163: IFFALSE 48280
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
48165: LD_VAR 0 1
48169: PPUSH
48170: CALL_OW 311
48174: PPUSH
48175: LD_INT 0
48177: PPUSH
48178: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
48182: LD_ADDR_EXP 127
48186: PUSH
48187: LD_EXP 127
48191: PPUSH
48192: LD_VAR 0 3
48196: PPUSH
48197: LD_EXP 127
48201: PUSH
48202: LD_VAR 0 3
48206: ARRAY
48207: PUSH
48208: LD_VAR 0 1
48212: PPUSH
48213: CALL_OW 311
48217: DIFF
48218: PPUSH
48219: CALL_OW 1
48223: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
48224: LD_ADDR_VAR 0 7
48228: PUSH
48229: LD_EXP 108
48233: PUSH
48234: LD_VAR 0 3
48238: ARRAY
48239: PPUSH
48240: LD_INT 1
48242: PPUSH
48243: LD_VAR 0 9
48247: PPUSH
48248: CALL_OW 2
48252: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
48253: LD_ADDR_EXP 108
48257: PUSH
48258: LD_EXP 108
48262: PPUSH
48263: LD_VAR 0 3
48267: PPUSH
48268: LD_VAR 0 7
48272: PPUSH
48273: CALL_OW 1
48277: ST_TO_ADDR
// end else
48278: GO 48297
// MC_InsertProduceList ( i , [ components ] ) ;
48280: LD_VAR 0 3
48284: PPUSH
48285: LD_VAR 0 9
48289: PUSH
48290: EMPTY
48291: LIST
48292: PPUSH
48293: CALL 44266 0 2
// break ;
48297: GO 48301
// end ; end ;
48299: GO 48086
48301: POP
48302: POP
// end ; end ; if GetType ( un ) = unit_building then
48303: LD_VAR 0 1
48307: PPUSH
48308: CALL_OW 247
48312: PUSH
48313: LD_INT 3
48315: EQUAL
48316: IFFALSE 48719
// begin btype := GetBType ( un ) ;
48318: LD_ADDR_VAR 0 5
48322: PUSH
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 266
48332: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
48333: LD_VAR 0 5
48337: PUSH
48338: LD_INT 29
48340: PUSH
48341: LD_INT 30
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: IN
48348: IFFALSE 48421
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
48350: LD_VAR 0 1
48354: PPUSH
48355: CALL_OW 250
48359: PPUSH
48360: LD_VAR 0 1
48364: PPUSH
48365: CALL_OW 251
48369: PPUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: CALL_OW 255
48379: PPUSH
48380: CALL_OW 440
48384: NOT
48385: IFFALSE 48421
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
48387: LD_VAR 0 1
48391: PPUSH
48392: CALL_OW 250
48396: PPUSH
48397: LD_VAR 0 1
48401: PPUSH
48402: CALL_OW 251
48406: PPUSH
48407: LD_VAR 0 1
48411: PPUSH
48412: CALL_OW 255
48416: PPUSH
48417: CALL_OW 441
// end ; if btype = b_warehouse then
48421: LD_VAR 0 5
48425: PUSH
48426: LD_INT 1
48428: EQUAL
48429: IFFALSE 48447
// begin btype := b_depot ;
48431: LD_ADDR_VAR 0 5
48435: PUSH
48436: LD_INT 0
48438: ST_TO_ADDR
// pos := 1 ;
48439: LD_ADDR_VAR 0 6
48443: PUSH
48444: LD_INT 1
48446: ST_TO_ADDR
// end ; if btype = b_factory then
48447: LD_VAR 0 5
48451: PUSH
48452: LD_INT 3
48454: EQUAL
48455: IFFALSE 48473
// begin btype := b_workshop ;
48457: LD_ADDR_VAR 0 5
48461: PUSH
48462: LD_INT 2
48464: ST_TO_ADDR
// pos := 1 ;
48465: LD_ADDR_VAR 0 6
48469: PUSH
48470: LD_INT 1
48472: ST_TO_ADDR
// end ; if btype = b_barracks then
48473: LD_VAR 0 5
48477: PUSH
48478: LD_INT 5
48480: EQUAL
48481: IFFALSE 48491
// btype := b_armoury ;
48483: LD_ADDR_VAR 0 5
48487: PUSH
48488: LD_INT 4
48490: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
48491: LD_VAR 0 5
48495: PUSH
48496: LD_INT 7
48498: PUSH
48499: LD_INT 8
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: IN
48506: IFFALSE 48516
// btype := b_lab ;
48508: LD_ADDR_VAR 0 5
48512: PUSH
48513: LD_INT 6
48515: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
48516: LD_ADDR_EXP 92
48520: PUSH
48521: LD_EXP 92
48525: PPUSH
48526: LD_VAR 0 3
48530: PUSH
48531: LD_EXP 92
48535: PUSH
48536: LD_VAR 0 3
48540: ARRAY
48541: PUSH
48542: LD_INT 1
48544: PLUS
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PPUSH
48550: LD_VAR 0 5
48554: PUSH
48555: LD_VAR 0 1
48559: PPUSH
48560: CALL_OW 250
48564: PUSH
48565: LD_VAR 0 1
48569: PPUSH
48570: CALL_OW 251
48574: PUSH
48575: LD_VAR 0 1
48579: PPUSH
48580: CALL_OW 254
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: PPUSH
48591: CALL 55556 0 3
48595: ST_TO_ADDR
// if pos = 1 then
48596: LD_VAR 0 6
48600: PUSH
48601: LD_INT 1
48603: EQUAL
48604: IFFALSE 48719
// begin tmp := mc_build_list [ i ] ;
48606: LD_ADDR_VAR 0 7
48610: PUSH
48611: LD_EXP 92
48615: PUSH
48616: LD_VAR 0 3
48620: ARRAY
48621: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
48622: LD_VAR 0 7
48626: PPUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 30
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 30
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: PPUSH
48655: CALL_OW 72
48659: IFFALSE 48669
// pos := 2 ;
48661: LD_ADDR_VAR 0 6
48665: PUSH
48666: LD_INT 2
48668: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
48669: LD_ADDR_VAR 0 7
48673: PUSH
48674: LD_VAR 0 7
48678: PPUSH
48679: LD_VAR 0 6
48683: PPUSH
48684: LD_VAR 0 7
48688: PPUSH
48689: CALL 55882 0 3
48693: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
48694: LD_ADDR_EXP 92
48698: PUSH
48699: LD_EXP 92
48703: PPUSH
48704: LD_VAR 0 3
48708: PPUSH
48709: LD_VAR 0 7
48713: PPUSH
48714: CALL_OW 1
48718: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
48719: LD_VAR 0 1
48723: PUSH
48724: LD_EXP 87
48728: PUSH
48729: LD_VAR 0 3
48733: ARRAY
48734: IN
48735: IFFALSE 48774
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
48737: LD_ADDR_EXP 87
48741: PUSH
48742: LD_EXP 87
48746: PPUSH
48747: LD_VAR 0 3
48751: PPUSH
48752: LD_EXP 87
48756: PUSH
48757: LD_VAR 0 3
48761: ARRAY
48762: PUSH
48763: LD_VAR 0 1
48767: DIFF
48768: PPUSH
48769: CALL_OW 1
48773: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
48774: LD_VAR 0 1
48778: PUSH
48779: LD_EXP 94
48783: PUSH
48784: LD_VAR 0 3
48788: ARRAY
48789: IN
48790: IFFALSE 48829
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
48792: LD_ADDR_EXP 94
48796: PUSH
48797: LD_EXP 94
48801: PPUSH
48802: LD_VAR 0 3
48806: PPUSH
48807: LD_EXP 94
48811: PUSH
48812: LD_VAR 0 3
48816: ARRAY
48817: PUSH
48818: LD_VAR 0 1
48822: DIFF
48823: PPUSH
48824: CALL_OW 1
48828: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
48829: LD_VAR 0 1
48833: PUSH
48834: LD_EXP 106
48838: PUSH
48839: LD_VAR 0 3
48843: ARRAY
48844: IN
48845: IFFALSE 48884
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
48847: LD_ADDR_EXP 106
48851: PUSH
48852: LD_EXP 106
48856: PPUSH
48857: LD_VAR 0 3
48861: PPUSH
48862: LD_EXP 106
48866: PUSH
48867: LD_VAR 0 3
48871: ARRAY
48872: PUSH
48873: LD_VAR 0 1
48877: DIFF
48878: PPUSH
48879: CALL_OW 1
48883: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
48884: LD_VAR 0 1
48888: PUSH
48889: LD_EXP 109
48893: PUSH
48894: LD_VAR 0 3
48898: ARRAY
48899: IN
48900: IFFALSE 48939
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
48902: LD_ADDR_EXP 109
48906: PUSH
48907: LD_EXP 109
48911: PPUSH
48912: LD_VAR 0 3
48916: PPUSH
48917: LD_EXP 109
48921: PUSH
48922: LD_VAR 0 3
48926: ARRAY
48927: PUSH
48928: LD_VAR 0 1
48932: DIFF
48933: PPUSH
48934: CALL_OW 1
48938: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
48939: LD_VAR 0 1
48943: PUSH
48944: LD_EXP 96
48948: PUSH
48949: LD_VAR 0 3
48953: ARRAY
48954: IN
48955: IFFALSE 48994
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
48957: LD_ADDR_EXP 96
48961: PUSH
48962: LD_EXP 96
48966: PPUSH
48967: LD_VAR 0 3
48971: PPUSH
48972: LD_EXP 96
48976: PUSH
48977: LD_VAR 0 3
48981: ARRAY
48982: PUSH
48983: LD_VAR 0 1
48987: DIFF
48988: PPUSH
48989: CALL_OW 1
48993: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
48994: LD_VAR 0 1
48998: PUSH
48999: LD_EXP 95
49003: PUSH
49004: LD_VAR 0 3
49008: ARRAY
49009: IN
49010: IFFALSE 49049
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
49012: LD_ADDR_EXP 95
49016: PUSH
49017: LD_EXP 95
49021: PPUSH
49022: LD_VAR 0 3
49026: PPUSH
49027: LD_EXP 95
49031: PUSH
49032: LD_VAR 0 3
49036: ARRAY
49037: PUSH
49038: LD_VAR 0 1
49042: DIFF
49043: PPUSH
49044: CALL_OW 1
49048: ST_TO_ADDR
// end ; break ;
49049: GO 49053
// end ;
49051: GO 47699
49053: POP
49054: POP
// end ;
49055: LD_VAR 0 2
49059: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
49060: LD_INT 0
49062: PPUSH
49063: PPUSH
49064: PPUSH
// if not mc_bases or not skirmish then
49065: LD_EXP 87
49069: NOT
49070: PUSH
49071: LD_EXP 85
49075: NOT
49076: OR
49077: IFFALSE 49081
// exit ;
49079: GO 49296
// for i = 1 to mc_bases do
49081: LD_ADDR_VAR 0 3
49085: PUSH
49086: DOUBLE
49087: LD_INT 1
49089: DEC
49090: ST_TO_ADDR
49091: LD_EXP 87
49095: PUSH
49096: FOR_TO
49097: IFFALSE 49294
// begin if building in mc_construct_list [ i ] then
49099: LD_VAR 0 1
49103: PUSH
49104: LD_EXP 94
49108: PUSH
49109: LD_VAR 0 3
49113: ARRAY
49114: IN
49115: IFFALSE 49292
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
49117: LD_ADDR_EXP 94
49121: PUSH
49122: LD_EXP 94
49126: PPUSH
49127: LD_VAR 0 3
49131: PPUSH
49132: LD_EXP 94
49136: PUSH
49137: LD_VAR 0 3
49141: ARRAY
49142: PUSH
49143: LD_VAR 0 1
49147: DIFF
49148: PPUSH
49149: CALL_OW 1
49153: ST_TO_ADDR
// if building in mc_lab [ i ] then
49154: LD_VAR 0 1
49158: PUSH
49159: LD_EXP 120
49163: PUSH
49164: LD_VAR 0 3
49168: ARRAY
49169: IN
49170: IFFALSE 49225
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
49172: LD_ADDR_EXP 121
49176: PUSH
49177: LD_EXP 121
49181: PPUSH
49182: LD_VAR 0 3
49186: PPUSH
49187: LD_EXP 121
49191: PUSH
49192: LD_VAR 0 3
49196: ARRAY
49197: PPUSH
49198: LD_INT 1
49200: PPUSH
49201: LD_EXP 121
49205: PUSH
49206: LD_VAR 0 3
49210: ARRAY
49211: PPUSH
49212: LD_INT 0
49214: PPUSH
49215: CALL 54974 0 4
49219: PPUSH
49220: CALL_OW 1
49224: ST_TO_ADDR
// if not building in mc_bases [ i ] then
49225: LD_VAR 0 1
49229: PUSH
49230: LD_EXP 87
49234: PUSH
49235: LD_VAR 0 3
49239: ARRAY
49240: IN
49241: NOT
49242: IFFALSE 49288
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
49244: LD_ADDR_EXP 87
49248: PUSH
49249: LD_EXP 87
49253: PPUSH
49254: LD_VAR 0 3
49258: PUSH
49259: LD_EXP 87
49263: PUSH
49264: LD_VAR 0 3
49268: ARRAY
49269: PUSH
49270: LD_INT 1
49272: PLUS
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PPUSH
49278: LD_VAR 0 1
49282: PPUSH
49283: CALL 55556 0 3
49287: ST_TO_ADDR
// exit ;
49288: POP
49289: POP
49290: GO 49296
// end ; end ;
49292: GO 49096
49294: POP
49295: POP
// end ;
49296: LD_VAR 0 2
49300: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
49301: LD_INT 0
49303: PPUSH
49304: PPUSH
49305: PPUSH
49306: PPUSH
49307: PPUSH
49308: PPUSH
49309: PPUSH
// if not mc_bases or not skirmish then
49310: LD_EXP 87
49314: NOT
49315: PUSH
49316: LD_EXP 85
49320: NOT
49321: OR
49322: IFFALSE 49326
// exit ;
49324: GO 49987
// for i = 1 to mc_bases do
49326: LD_ADDR_VAR 0 3
49330: PUSH
49331: DOUBLE
49332: LD_INT 1
49334: DEC
49335: ST_TO_ADDR
49336: LD_EXP 87
49340: PUSH
49341: FOR_TO
49342: IFFALSE 49985
// begin if building in mc_construct_list [ i ] then
49344: LD_VAR 0 1
49348: PUSH
49349: LD_EXP 94
49353: PUSH
49354: LD_VAR 0 3
49358: ARRAY
49359: IN
49360: IFFALSE 49983
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
49362: LD_ADDR_EXP 94
49366: PUSH
49367: LD_EXP 94
49371: PPUSH
49372: LD_VAR 0 3
49376: PPUSH
49377: LD_EXP 94
49381: PUSH
49382: LD_VAR 0 3
49386: ARRAY
49387: PUSH
49388: LD_VAR 0 1
49392: DIFF
49393: PPUSH
49394: CALL_OW 1
49398: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
49399: LD_ADDR_EXP 87
49403: PUSH
49404: LD_EXP 87
49408: PPUSH
49409: LD_VAR 0 3
49413: PUSH
49414: LD_EXP 87
49418: PUSH
49419: LD_VAR 0 3
49423: ARRAY
49424: PUSH
49425: LD_INT 1
49427: PLUS
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PPUSH
49433: LD_VAR 0 1
49437: PPUSH
49438: CALL 55556 0 3
49442: ST_TO_ADDR
// btype := GetBType ( building ) ;
49443: LD_ADDR_VAR 0 5
49447: PUSH
49448: LD_VAR 0 1
49452: PPUSH
49453: CALL_OW 266
49457: ST_TO_ADDR
// side := GetSide ( building ) ;
49458: LD_ADDR_VAR 0 8
49462: PUSH
49463: LD_VAR 0 1
49467: PPUSH
49468: CALL_OW 255
49472: ST_TO_ADDR
// if btype = b_lab then
49473: LD_VAR 0 5
49477: PUSH
49478: LD_INT 6
49480: EQUAL
49481: IFFALSE 49531
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
49483: LD_ADDR_EXP 120
49487: PUSH
49488: LD_EXP 120
49492: PPUSH
49493: LD_VAR 0 3
49497: PUSH
49498: LD_EXP 120
49502: PUSH
49503: LD_VAR 0 3
49507: ARRAY
49508: PUSH
49509: LD_INT 1
49511: PLUS
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PPUSH
49517: LD_VAR 0 1
49521: PPUSH
49522: CALL 55556 0 3
49526: ST_TO_ADDR
// exit ;
49527: POP
49528: POP
49529: GO 49987
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
49531: LD_VAR 0 5
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 4
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: IN
49550: IFFALSE 49674
// begin if btype = b_armoury then
49552: LD_VAR 0 5
49556: PUSH
49557: LD_INT 4
49559: EQUAL
49560: IFFALSE 49570
// btype := b_barracks ;
49562: LD_ADDR_VAR 0 5
49566: PUSH
49567: LD_INT 5
49569: ST_TO_ADDR
// if btype = b_depot then
49570: LD_VAR 0 5
49574: PUSH
49575: LD_INT 0
49577: EQUAL
49578: IFFALSE 49588
// btype := b_warehouse ;
49580: LD_ADDR_VAR 0 5
49584: PUSH
49585: LD_INT 1
49587: ST_TO_ADDR
// if btype = b_workshop then
49588: LD_VAR 0 5
49592: PUSH
49593: LD_INT 2
49595: EQUAL
49596: IFFALSE 49606
// btype := b_factory ;
49598: LD_ADDR_VAR 0 5
49602: PUSH
49603: LD_INT 3
49605: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
49606: LD_VAR 0 5
49610: PPUSH
49611: LD_VAR 0 8
49615: PPUSH
49616: CALL_OW 323
49620: PUSH
49621: LD_INT 1
49623: EQUAL
49624: IFFALSE 49670
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
49626: LD_ADDR_EXP 119
49630: PUSH
49631: LD_EXP 119
49635: PPUSH
49636: LD_VAR 0 3
49640: PUSH
49641: LD_EXP 119
49645: PUSH
49646: LD_VAR 0 3
49650: ARRAY
49651: PUSH
49652: LD_INT 1
49654: PLUS
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PPUSH
49660: LD_VAR 0 1
49664: PPUSH
49665: CALL 55556 0 3
49669: ST_TO_ADDR
// exit ;
49670: POP
49671: POP
49672: GO 49987
// end ; if btype in [ b_bunker , b_turret ] then
49674: LD_VAR 0 5
49678: PUSH
49679: LD_INT 32
49681: PUSH
49682: LD_INT 33
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: IN
49689: IFFALSE 49979
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
49691: LD_ADDR_EXP 95
49695: PUSH
49696: LD_EXP 95
49700: PPUSH
49701: LD_VAR 0 3
49705: PUSH
49706: LD_EXP 95
49710: PUSH
49711: LD_VAR 0 3
49715: ARRAY
49716: PUSH
49717: LD_INT 1
49719: PLUS
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PPUSH
49725: LD_VAR 0 1
49729: PPUSH
49730: CALL 55556 0 3
49734: ST_TO_ADDR
// if btype = b_bunker then
49735: LD_VAR 0 5
49739: PUSH
49740: LD_INT 32
49742: EQUAL
49743: IFFALSE 49979
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
49745: LD_ADDR_EXP 96
49749: PUSH
49750: LD_EXP 96
49754: PPUSH
49755: LD_VAR 0 3
49759: PUSH
49760: LD_EXP 96
49764: PUSH
49765: LD_VAR 0 3
49769: ARRAY
49770: PUSH
49771: LD_INT 1
49773: PLUS
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PPUSH
49779: LD_VAR 0 1
49783: PPUSH
49784: CALL 55556 0 3
49788: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
49789: LD_ADDR_VAR 0 6
49793: PUSH
49794: LD_EXP 87
49798: PUSH
49799: LD_VAR 0 3
49803: ARRAY
49804: PPUSH
49805: LD_INT 25
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: LD_INT 54
49820: PUSH
49821: EMPTY
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PPUSH
49832: CALL_OW 72
49836: ST_TO_ADDR
// if tmp then
49837: LD_VAR 0 6
49841: IFFALSE 49847
// exit ;
49843: POP
49844: POP
49845: GO 49987
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
49847: LD_ADDR_VAR 0 6
49851: PUSH
49852: LD_EXP 87
49856: PUSH
49857: LD_VAR 0 3
49861: ARRAY
49862: PPUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 30
49868: PUSH
49869: LD_INT 4
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 30
49878: PUSH
49879: LD_INT 5
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: PPUSH
49891: CALL_OW 72
49895: ST_TO_ADDR
// if not tmp then
49896: LD_VAR 0 6
49900: NOT
49901: IFFALSE 49907
// exit ;
49903: POP
49904: POP
49905: GO 49987
// for j in tmp do
49907: LD_ADDR_VAR 0 4
49911: PUSH
49912: LD_VAR 0 6
49916: PUSH
49917: FOR_IN
49918: IFFALSE 49977
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
49920: LD_ADDR_VAR 0 7
49924: PUSH
49925: LD_VAR 0 4
49929: PPUSH
49930: CALL_OW 313
49934: PPUSH
49935: LD_INT 25
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PPUSH
49945: CALL_OW 72
49949: ST_TO_ADDR
// if units then
49950: LD_VAR 0 7
49954: IFFALSE 49975
// begin ComExitBuilding ( units [ 1 ] ) ;
49956: LD_VAR 0 7
49960: PUSH
49961: LD_INT 1
49963: ARRAY
49964: PPUSH
49965: CALL_OW 122
// exit ;
49969: POP
49970: POP
49971: POP
49972: POP
49973: GO 49987
// end ; end ;
49975: GO 49917
49977: POP
49978: POP
// end ; end ; exit ;
49979: POP
49980: POP
49981: GO 49987
// end ; end ;
49983: GO 49341
49985: POP
49986: POP
// end ;
49987: LD_VAR 0 2
49991: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
49992: LD_INT 0
49994: PPUSH
49995: PPUSH
49996: PPUSH
49997: PPUSH
49998: PPUSH
49999: PPUSH
50000: PPUSH
// if not mc_bases or not skirmish then
50001: LD_EXP 87
50005: NOT
50006: PUSH
50007: LD_EXP 85
50011: NOT
50012: OR
50013: IFFALSE 50017
// exit ;
50015: GO 50248
// btype := GetBType ( building ) ;
50017: LD_ADDR_VAR 0 6
50021: PUSH
50022: LD_VAR 0 1
50026: PPUSH
50027: CALL_OW 266
50031: ST_TO_ADDR
// x := GetX ( building ) ;
50032: LD_ADDR_VAR 0 7
50036: PUSH
50037: LD_VAR 0 1
50041: PPUSH
50042: CALL_OW 250
50046: ST_TO_ADDR
// y := GetY ( building ) ;
50047: LD_ADDR_VAR 0 8
50051: PUSH
50052: LD_VAR 0 1
50056: PPUSH
50057: CALL_OW 251
50061: ST_TO_ADDR
// d := GetDir ( building ) ;
50062: LD_ADDR_VAR 0 9
50066: PUSH
50067: LD_VAR 0 1
50071: PPUSH
50072: CALL_OW 254
50076: ST_TO_ADDR
// for i = 1 to mc_bases do
50077: LD_ADDR_VAR 0 4
50081: PUSH
50082: DOUBLE
50083: LD_INT 1
50085: DEC
50086: ST_TO_ADDR
50087: LD_EXP 87
50091: PUSH
50092: FOR_TO
50093: IFFALSE 50246
// begin if not mc_build_list [ i ] then
50095: LD_EXP 92
50099: PUSH
50100: LD_VAR 0 4
50104: ARRAY
50105: NOT
50106: IFFALSE 50110
// continue ;
50108: GO 50092
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
50110: LD_VAR 0 6
50114: PUSH
50115: LD_VAR 0 7
50119: PUSH
50120: LD_VAR 0 8
50124: PUSH
50125: LD_VAR 0 9
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: PPUSH
50136: LD_EXP 92
50140: PUSH
50141: LD_VAR 0 4
50145: ARRAY
50146: PUSH
50147: LD_INT 1
50149: ARRAY
50150: PPUSH
50151: CALL 61725 0 2
50155: IFFALSE 50244
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
50157: LD_ADDR_EXP 92
50161: PUSH
50162: LD_EXP 92
50166: PPUSH
50167: LD_VAR 0 4
50171: PPUSH
50172: LD_EXP 92
50176: PUSH
50177: LD_VAR 0 4
50181: ARRAY
50182: PPUSH
50183: LD_INT 1
50185: PPUSH
50186: CALL_OW 3
50190: PPUSH
50191: CALL_OW 1
50195: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
50196: LD_ADDR_EXP 94
50200: PUSH
50201: LD_EXP 94
50205: PPUSH
50206: LD_VAR 0 4
50210: PUSH
50211: LD_EXP 94
50215: PUSH
50216: LD_VAR 0 4
50220: ARRAY
50221: PUSH
50222: LD_INT 1
50224: PLUS
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PPUSH
50230: LD_VAR 0 1
50234: PPUSH
50235: CALL 55556 0 3
50239: ST_TO_ADDR
// exit ;
50240: POP
50241: POP
50242: GO 50248
// end ; end ;
50244: GO 50092
50246: POP
50247: POP
// end ;
50248: LD_VAR 0 3
50252: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
50253: LD_INT 0
50255: PPUSH
50256: PPUSH
50257: PPUSH
// if not mc_bases or not skirmish then
50258: LD_EXP 87
50262: NOT
50263: PUSH
50264: LD_EXP 85
50268: NOT
50269: OR
50270: IFFALSE 50274
// exit ;
50272: GO 50464
// for i = 1 to mc_bases do
50274: LD_ADDR_VAR 0 4
50278: PUSH
50279: DOUBLE
50280: LD_INT 1
50282: DEC
50283: ST_TO_ADDR
50284: LD_EXP 87
50288: PUSH
50289: FOR_TO
50290: IFFALSE 50377
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
50292: LD_VAR 0 1
50296: PUSH
50297: LD_EXP 95
50301: PUSH
50302: LD_VAR 0 4
50306: ARRAY
50307: IN
50308: PUSH
50309: LD_VAR 0 1
50313: PUSH
50314: LD_EXP 96
50318: PUSH
50319: LD_VAR 0 4
50323: ARRAY
50324: IN
50325: NOT
50326: AND
50327: IFFALSE 50375
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
50329: LD_ADDR_EXP 96
50333: PUSH
50334: LD_EXP 96
50338: PPUSH
50339: LD_VAR 0 4
50343: PUSH
50344: LD_EXP 96
50348: PUSH
50349: LD_VAR 0 4
50353: ARRAY
50354: PUSH
50355: LD_INT 1
50357: PLUS
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PPUSH
50363: LD_VAR 0 1
50367: PPUSH
50368: CALL 55556 0 3
50372: ST_TO_ADDR
// break ;
50373: GO 50377
// end ; end ;
50375: GO 50289
50377: POP
50378: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
50379: LD_VAR 0 1
50383: PPUSH
50384: CALL_OW 257
50388: PUSH
50389: LD_EXP 113
50393: IN
50394: PUSH
50395: LD_VAR 0 1
50399: PPUSH
50400: CALL_OW 266
50404: PUSH
50405: LD_INT 5
50407: EQUAL
50408: AND
50409: PUSH
50410: LD_VAR 0 2
50414: PPUSH
50415: CALL_OW 110
50419: PUSH
50420: LD_INT 18
50422: NONEQUAL
50423: AND
50424: IFFALSE 50464
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
50426: LD_VAR 0 2
50430: PPUSH
50431: CALL_OW 257
50435: PUSH
50436: LD_INT 5
50438: PUSH
50439: LD_INT 8
50441: PUSH
50442: LD_INT 9
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: LIST
50449: IN
50450: IFFALSE 50464
// SetClass ( unit , 1 ) ;
50452: LD_VAR 0 2
50456: PPUSH
50457: LD_INT 1
50459: PPUSH
50460: CALL_OW 336
// end ;
50464: LD_VAR 0 3
50468: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
50469: LD_INT 0
50471: PPUSH
50472: PPUSH
// if not mc_bases or not skirmish then
50473: LD_EXP 87
50477: NOT
50478: PUSH
50479: LD_EXP 85
50483: NOT
50484: OR
50485: IFFALSE 50489
// exit ;
50487: GO 50605
// if GetLives ( abandoned_vehicle ) > 250 then
50489: LD_VAR 0 2
50493: PPUSH
50494: CALL_OW 256
50498: PUSH
50499: LD_INT 250
50501: GREATER
50502: IFFALSE 50506
// exit ;
50504: GO 50605
// for i = 1 to mc_bases do
50506: LD_ADDR_VAR 0 6
50510: PUSH
50511: DOUBLE
50512: LD_INT 1
50514: DEC
50515: ST_TO_ADDR
50516: LD_EXP 87
50520: PUSH
50521: FOR_TO
50522: IFFALSE 50603
// begin if driver in mc_bases [ i ] then
50524: LD_VAR 0 1
50528: PUSH
50529: LD_EXP 87
50533: PUSH
50534: LD_VAR 0 6
50538: ARRAY
50539: IN
50540: IFFALSE 50601
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
50542: LD_VAR 0 1
50546: PPUSH
50547: LD_EXP 87
50551: PUSH
50552: LD_VAR 0 6
50556: ARRAY
50557: PPUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 30
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 30
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: PPUSH
50586: CALL_OW 72
50590: PUSH
50591: LD_INT 1
50593: ARRAY
50594: PPUSH
50595: CALL_OW 112
// break ;
50599: GO 50603
// end ; end ;
50601: GO 50521
50603: POP
50604: POP
// end ; end_of_file
50605: LD_VAR 0 5
50609: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50610: LD_INT 0
50612: PPUSH
50613: PPUSH
// if exist_mode then
50614: LD_VAR 0 2
50618: IFFALSE 50643
// unit := CreateCharacter ( prefix & ident ) else
50620: LD_ADDR_VAR 0 5
50624: PUSH
50625: LD_VAR 0 3
50629: PUSH
50630: LD_VAR 0 1
50634: STR
50635: PPUSH
50636: CALL_OW 34
50640: ST_TO_ADDR
50641: GO 50658
// unit := NewCharacter ( ident ) ;
50643: LD_ADDR_VAR 0 5
50647: PUSH
50648: LD_VAR 0 1
50652: PPUSH
50653: CALL_OW 25
50657: ST_TO_ADDR
// result := unit ;
50658: LD_ADDR_VAR 0 4
50662: PUSH
50663: LD_VAR 0 5
50667: ST_TO_ADDR
// end ;
50668: LD_VAR 0 4
50672: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50673: LD_INT 0
50675: PPUSH
50676: PPUSH
// if not side or not nation then
50677: LD_VAR 0 1
50681: NOT
50682: PUSH
50683: LD_VAR 0 2
50687: NOT
50688: OR
50689: IFFALSE 50693
// exit ;
50691: GO 51457
// case nation of nation_american :
50693: LD_VAR 0 2
50697: PUSH
50698: LD_INT 1
50700: DOUBLE
50701: EQUAL
50702: IFTRUE 50706
50704: GO 50920
50706: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50707: LD_ADDR_VAR 0 4
50711: PUSH
50712: LD_INT 35
50714: PUSH
50715: LD_INT 45
50717: PUSH
50718: LD_INT 46
50720: PUSH
50721: LD_INT 47
50723: PUSH
50724: LD_INT 82
50726: PUSH
50727: LD_INT 83
50729: PUSH
50730: LD_INT 84
50732: PUSH
50733: LD_INT 85
50735: PUSH
50736: LD_INT 86
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 6
50747: PUSH
50748: LD_INT 15
50750: PUSH
50751: LD_INT 16
50753: PUSH
50754: LD_INT 7
50756: PUSH
50757: LD_INT 12
50759: PUSH
50760: LD_INT 13
50762: PUSH
50763: LD_INT 10
50765: PUSH
50766: LD_INT 14
50768: PUSH
50769: LD_INT 20
50771: PUSH
50772: LD_INT 21
50774: PUSH
50775: LD_INT 22
50777: PUSH
50778: LD_INT 25
50780: PUSH
50781: LD_INT 32
50783: PUSH
50784: LD_INT 27
50786: PUSH
50787: LD_INT 36
50789: PUSH
50790: LD_INT 69
50792: PUSH
50793: LD_INT 39
50795: PUSH
50796: LD_INT 34
50798: PUSH
50799: LD_INT 40
50801: PUSH
50802: LD_INT 48
50804: PUSH
50805: LD_INT 49
50807: PUSH
50808: LD_INT 50
50810: PUSH
50811: LD_INT 51
50813: PUSH
50814: LD_INT 52
50816: PUSH
50817: LD_INT 53
50819: PUSH
50820: LD_INT 54
50822: PUSH
50823: LD_INT 55
50825: PUSH
50826: LD_INT 56
50828: PUSH
50829: LD_INT 57
50831: PUSH
50832: LD_INT 58
50834: PUSH
50835: LD_INT 59
50837: PUSH
50838: LD_INT 60
50840: PUSH
50841: LD_INT 61
50843: PUSH
50844: LD_INT 62
50846: PUSH
50847: LD_INT 80
50849: PUSH
50850: LD_INT 82
50852: PUSH
50853: LD_INT 83
50855: PUSH
50856: LD_INT 84
50858: PUSH
50859: LD_INT 85
50861: PUSH
50862: LD_INT 86
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: ST_TO_ADDR
50918: GO 51381
50920: LD_INT 2
50922: DOUBLE
50923: EQUAL
50924: IFTRUE 50928
50926: GO 51150
50928: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
50929: LD_ADDR_VAR 0 4
50933: PUSH
50934: LD_INT 35
50936: PUSH
50937: LD_INT 45
50939: PUSH
50940: LD_INT 46
50942: PUSH
50943: LD_INT 47
50945: PUSH
50946: LD_INT 82
50948: PUSH
50949: LD_INT 83
50951: PUSH
50952: LD_INT 84
50954: PUSH
50955: LD_INT 85
50957: PUSH
50958: LD_INT 87
50960: PUSH
50961: LD_INT 70
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 11
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: LD_INT 4
50975: PUSH
50976: LD_INT 5
50978: PUSH
50979: LD_INT 6
50981: PUSH
50982: LD_INT 15
50984: PUSH
50985: LD_INT 18
50987: PUSH
50988: LD_INT 7
50990: PUSH
50991: LD_INT 17
50993: PUSH
50994: LD_INT 8
50996: PUSH
50997: LD_INT 20
50999: PUSH
51000: LD_INT 21
51002: PUSH
51003: LD_INT 22
51005: PUSH
51006: LD_INT 72
51008: PUSH
51009: LD_INT 26
51011: PUSH
51012: LD_INT 69
51014: PUSH
51015: LD_INT 39
51017: PUSH
51018: LD_INT 40
51020: PUSH
51021: LD_INT 41
51023: PUSH
51024: LD_INT 42
51026: PUSH
51027: LD_INT 43
51029: PUSH
51030: LD_INT 48
51032: PUSH
51033: LD_INT 49
51035: PUSH
51036: LD_INT 50
51038: PUSH
51039: LD_INT 51
51041: PUSH
51042: LD_INT 52
51044: PUSH
51045: LD_INT 53
51047: PUSH
51048: LD_INT 54
51050: PUSH
51051: LD_INT 55
51053: PUSH
51054: LD_INT 56
51056: PUSH
51057: LD_INT 60
51059: PUSH
51060: LD_INT 61
51062: PUSH
51063: LD_INT 62
51065: PUSH
51066: LD_INT 66
51068: PUSH
51069: LD_INT 67
51071: PUSH
51072: LD_INT 68
51074: PUSH
51075: LD_INT 81
51077: PUSH
51078: LD_INT 82
51080: PUSH
51081: LD_INT 83
51083: PUSH
51084: LD_INT 84
51086: PUSH
51087: LD_INT 85
51089: PUSH
51090: LD_INT 87
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: ST_TO_ADDR
51148: GO 51381
51150: LD_INT 3
51152: DOUBLE
51153: EQUAL
51154: IFTRUE 51158
51156: GO 51380
51158: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
51159: LD_ADDR_VAR 0 4
51163: PUSH
51164: LD_INT 46
51166: PUSH
51167: LD_INT 47
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 82
51178: PUSH
51179: LD_INT 83
51181: PUSH
51182: LD_INT 84
51184: PUSH
51185: LD_INT 85
51187: PUSH
51188: LD_INT 86
51190: PUSH
51191: LD_INT 11
51193: PUSH
51194: LD_INT 9
51196: PUSH
51197: LD_INT 20
51199: PUSH
51200: LD_INT 19
51202: PUSH
51203: LD_INT 21
51205: PUSH
51206: LD_INT 24
51208: PUSH
51209: LD_INT 22
51211: PUSH
51212: LD_INT 25
51214: PUSH
51215: LD_INT 28
51217: PUSH
51218: LD_INT 29
51220: PUSH
51221: LD_INT 30
51223: PUSH
51224: LD_INT 31
51226: PUSH
51227: LD_INT 37
51229: PUSH
51230: LD_INT 38
51232: PUSH
51233: LD_INT 32
51235: PUSH
51236: LD_INT 27
51238: PUSH
51239: LD_INT 33
51241: PUSH
51242: LD_INT 69
51244: PUSH
51245: LD_INT 39
51247: PUSH
51248: LD_INT 34
51250: PUSH
51251: LD_INT 40
51253: PUSH
51254: LD_INT 71
51256: PUSH
51257: LD_INT 23
51259: PUSH
51260: LD_INT 44
51262: PUSH
51263: LD_INT 48
51265: PUSH
51266: LD_INT 49
51268: PUSH
51269: LD_INT 50
51271: PUSH
51272: LD_INT 51
51274: PUSH
51275: LD_INT 52
51277: PUSH
51278: LD_INT 53
51280: PUSH
51281: LD_INT 54
51283: PUSH
51284: LD_INT 55
51286: PUSH
51287: LD_INT 56
51289: PUSH
51290: LD_INT 57
51292: PUSH
51293: LD_INT 58
51295: PUSH
51296: LD_INT 59
51298: PUSH
51299: LD_INT 63
51301: PUSH
51302: LD_INT 64
51304: PUSH
51305: LD_INT 65
51307: PUSH
51308: LD_INT 82
51310: PUSH
51311: LD_INT 83
51313: PUSH
51314: LD_INT 84
51316: PUSH
51317: LD_INT 85
51319: PUSH
51320: LD_INT 86
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: ST_TO_ADDR
51378: GO 51381
51380: POP
// if state > - 1 and state < 3 then
51381: LD_VAR 0 3
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: GREATER
51390: PUSH
51391: LD_VAR 0 3
51395: PUSH
51396: LD_INT 3
51398: LESS
51399: AND
51400: IFFALSE 51457
// for i in result do
51402: LD_ADDR_VAR 0 5
51406: PUSH
51407: LD_VAR 0 4
51411: PUSH
51412: FOR_IN
51413: IFFALSE 51455
// if GetTech ( i , side ) <> state then
51415: LD_VAR 0 5
51419: PPUSH
51420: LD_VAR 0 1
51424: PPUSH
51425: CALL_OW 321
51429: PUSH
51430: LD_VAR 0 3
51434: NONEQUAL
51435: IFFALSE 51453
// result := result diff i ;
51437: LD_ADDR_VAR 0 4
51441: PUSH
51442: LD_VAR 0 4
51446: PUSH
51447: LD_VAR 0 5
51451: DIFF
51452: ST_TO_ADDR
51453: GO 51412
51455: POP
51456: POP
// end ;
51457: LD_VAR 0 4
51461: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
51462: LD_INT 0
51464: PPUSH
51465: PPUSH
51466: PPUSH
// result := true ;
51467: LD_ADDR_VAR 0 3
51471: PUSH
51472: LD_INT 1
51474: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
51475: LD_ADDR_VAR 0 5
51479: PUSH
51480: LD_VAR 0 2
51484: PPUSH
51485: CALL_OW 480
51489: ST_TO_ADDR
// if not tmp then
51490: LD_VAR 0 5
51494: NOT
51495: IFFALSE 51499
// exit ;
51497: GO 51548
// for i in tmp do
51499: LD_ADDR_VAR 0 4
51503: PUSH
51504: LD_VAR 0 5
51508: PUSH
51509: FOR_IN
51510: IFFALSE 51546
// if GetTech ( i , side ) <> state_researched then
51512: LD_VAR 0 4
51516: PPUSH
51517: LD_VAR 0 1
51521: PPUSH
51522: CALL_OW 321
51526: PUSH
51527: LD_INT 2
51529: NONEQUAL
51530: IFFALSE 51544
// begin result := false ;
51532: LD_ADDR_VAR 0 3
51536: PUSH
51537: LD_INT 0
51539: ST_TO_ADDR
// exit ;
51540: POP
51541: POP
51542: GO 51548
// end ;
51544: GO 51509
51546: POP
51547: POP
// end ;
51548: LD_VAR 0 3
51552: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
51553: LD_INT 0
51555: PPUSH
51556: PPUSH
51557: PPUSH
51558: PPUSH
51559: PPUSH
51560: PPUSH
51561: PPUSH
51562: PPUSH
51563: PPUSH
51564: PPUSH
51565: PPUSH
51566: PPUSH
51567: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51568: LD_VAR 0 1
51572: NOT
51573: PUSH
51574: LD_VAR 0 1
51578: PPUSH
51579: CALL_OW 257
51583: PUSH
51584: LD_INT 9
51586: NONEQUAL
51587: OR
51588: IFFALSE 51592
// exit ;
51590: GO 52165
// side := GetSide ( unit ) ;
51592: LD_ADDR_VAR 0 9
51596: PUSH
51597: LD_VAR 0 1
51601: PPUSH
51602: CALL_OW 255
51606: ST_TO_ADDR
// tech_space := tech_spacanom ;
51607: LD_ADDR_VAR 0 12
51611: PUSH
51612: LD_INT 29
51614: ST_TO_ADDR
// tech_time := tech_taurad ;
51615: LD_ADDR_VAR 0 13
51619: PUSH
51620: LD_INT 28
51622: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51623: LD_ADDR_VAR 0 11
51627: PUSH
51628: LD_VAR 0 1
51632: PPUSH
51633: CALL_OW 310
51637: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51638: LD_VAR 0 11
51642: PPUSH
51643: CALL_OW 247
51647: PUSH
51648: LD_INT 2
51650: EQUAL
51651: IFFALSE 51655
// exit ;
51653: GO 52165
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51655: LD_ADDR_VAR 0 8
51659: PUSH
51660: LD_INT 81
51662: PUSH
51663: LD_VAR 0 9
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: LD_INT 21
51677: PUSH
51678: LD_INT 3
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PPUSH
51693: CALL_OW 69
51697: ST_TO_ADDR
// if not tmp then
51698: LD_VAR 0 8
51702: NOT
51703: IFFALSE 51707
// exit ;
51705: GO 52165
// if in_unit then
51707: LD_VAR 0 11
51711: IFFALSE 51735
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51713: LD_ADDR_VAR 0 10
51717: PUSH
51718: LD_VAR 0 8
51722: PPUSH
51723: LD_VAR 0 11
51727: PPUSH
51728: CALL_OW 74
51732: ST_TO_ADDR
51733: GO 51755
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51735: LD_ADDR_VAR 0 10
51739: PUSH
51740: LD_VAR 0 8
51744: PPUSH
51745: LD_VAR 0 1
51749: PPUSH
51750: CALL_OW 74
51754: ST_TO_ADDR
// if not enemy then
51755: LD_VAR 0 10
51759: NOT
51760: IFFALSE 51764
// exit ;
51762: GO 52165
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51764: LD_VAR 0 11
51768: PUSH
51769: LD_VAR 0 11
51773: PPUSH
51774: LD_VAR 0 10
51778: PPUSH
51779: CALL_OW 296
51783: PUSH
51784: LD_INT 13
51786: GREATER
51787: AND
51788: PUSH
51789: LD_VAR 0 1
51793: PPUSH
51794: LD_VAR 0 10
51798: PPUSH
51799: CALL_OW 296
51803: PUSH
51804: LD_INT 12
51806: GREATER
51807: OR
51808: IFFALSE 51812
// exit ;
51810: GO 52165
// missile := [ 1 ] ;
51812: LD_ADDR_VAR 0 14
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51823: LD_VAR 0 9
51827: PPUSH
51828: LD_VAR 0 12
51832: PPUSH
51833: CALL_OW 325
51837: IFFALSE 51866
// missile := Insert ( missile , missile + 1 , 2 ) ;
51839: LD_ADDR_VAR 0 14
51843: PUSH
51844: LD_VAR 0 14
51848: PPUSH
51849: LD_VAR 0 14
51853: PUSH
51854: LD_INT 1
51856: PLUS
51857: PPUSH
51858: LD_INT 2
51860: PPUSH
51861: CALL_OW 2
51865: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51866: LD_VAR 0 9
51870: PPUSH
51871: LD_VAR 0 13
51875: PPUSH
51876: CALL_OW 325
51880: PUSH
51881: LD_VAR 0 10
51885: PPUSH
51886: CALL_OW 255
51890: PPUSH
51891: LD_VAR 0 13
51895: PPUSH
51896: CALL_OW 325
51900: NOT
51901: AND
51902: IFFALSE 51931
// missile := Insert ( missile , missile + 1 , 3 ) ;
51904: LD_ADDR_VAR 0 14
51908: PUSH
51909: LD_VAR 0 14
51913: PPUSH
51914: LD_VAR 0 14
51918: PUSH
51919: LD_INT 1
51921: PLUS
51922: PPUSH
51923: LD_INT 3
51925: PPUSH
51926: CALL_OW 2
51930: ST_TO_ADDR
// if missile < 2 then
51931: LD_VAR 0 14
51935: PUSH
51936: LD_INT 2
51938: LESS
51939: IFFALSE 51943
// exit ;
51941: GO 52165
// x := GetX ( enemy ) ;
51943: LD_ADDR_VAR 0 4
51947: PUSH
51948: LD_VAR 0 10
51952: PPUSH
51953: CALL_OW 250
51957: ST_TO_ADDR
// y := GetY ( enemy ) ;
51958: LD_ADDR_VAR 0 5
51962: PUSH
51963: LD_VAR 0 10
51967: PPUSH
51968: CALL_OW 251
51972: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51973: LD_ADDR_VAR 0 6
51977: PUSH
51978: LD_VAR 0 4
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PPUSH
51987: LD_INT 1
51989: PPUSH
51990: CALL_OW 12
51994: PLUS
51995: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51996: LD_ADDR_VAR 0 7
52000: PUSH
52001: LD_VAR 0 5
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PPUSH
52010: LD_INT 1
52012: PPUSH
52013: CALL_OW 12
52017: PLUS
52018: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52019: LD_VAR 0 6
52023: PPUSH
52024: LD_VAR 0 7
52028: PPUSH
52029: CALL_OW 488
52033: NOT
52034: IFFALSE 52056
// begin _x := x ;
52036: LD_ADDR_VAR 0 6
52040: PUSH
52041: LD_VAR 0 4
52045: ST_TO_ADDR
// _y := y ;
52046: LD_ADDR_VAR 0 7
52050: PUSH
52051: LD_VAR 0 5
52055: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
52056: LD_ADDR_VAR 0 3
52060: PUSH
52061: LD_INT 1
52063: PPUSH
52064: LD_VAR 0 14
52068: PPUSH
52069: CALL_OW 12
52073: ST_TO_ADDR
// case i of 1 :
52074: LD_VAR 0 3
52078: PUSH
52079: LD_INT 1
52081: DOUBLE
52082: EQUAL
52083: IFTRUE 52087
52085: GO 52104
52087: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
52088: LD_VAR 0 1
52092: PPUSH
52093: LD_VAR 0 10
52097: PPUSH
52098: CALL_OW 115
52102: GO 52165
52104: LD_INT 2
52106: DOUBLE
52107: EQUAL
52108: IFTRUE 52112
52110: GO 52134
52112: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
52113: LD_VAR 0 1
52117: PPUSH
52118: LD_VAR 0 6
52122: PPUSH
52123: LD_VAR 0 7
52127: PPUSH
52128: CALL_OW 153
52132: GO 52165
52134: LD_INT 3
52136: DOUBLE
52137: EQUAL
52138: IFTRUE 52142
52140: GO 52164
52142: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
52143: LD_VAR 0 1
52147: PPUSH
52148: LD_VAR 0 6
52152: PPUSH
52153: LD_VAR 0 7
52157: PPUSH
52158: CALL_OW 154
52162: GO 52165
52164: POP
// end ;
52165: LD_VAR 0 2
52169: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
52170: LD_INT 0
52172: PPUSH
52173: PPUSH
52174: PPUSH
52175: PPUSH
52176: PPUSH
52177: PPUSH
// if not unit or not building then
52178: LD_VAR 0 1
52182: NOT
52183: PUSH
52184: LD_VAR 0 2
52188: NOT
52189: OR
52190: IFFALSE 52194
// exit ;
52192: GO 52352
// x := GetX ( building ) ;
52194: LD_ADDR_VAR 0 5
52198: PUSH
52199: LD_VAR 0 2
52203: PPUSH
52204: CALL_OW 250
52208: ST_TO_ADDR
// y := GetY ( building ) ;
52209: LD_ADDR_VAR 0 6
52213: PUSH
52214: LD_VAR 0 2
52218: PPUSH
52219: CALL_OW 251
52223: ST_TO_ADDR
// for i = 0 to 5 do
52224: LD_ADDR_VAR 0 4
52228: PUSH
52229: DOUBLE
52230: LD_INT 0
52232: DEC
52233: ST_TO_ADDR
52234: LD_INT 5
52236: PUSH
52237: FOR_TO
52238: IFFALSE 52350
// begin _x := ShiftX ( x , i , 3 ) ;
52240: LD_ADDR_VAR 0 7
52244: PUSH
52245: LD_VAR 0 5
52249: PPUSH
52250: LD_VAR 0 4
52254: PPUSH
52255: LD_INT 3
52257: PPUSH
52258: CALL_OW 272
52262: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
52263: LD_ADDR_VAR 0 8
52267: PUSH
52268: LD_VAR 0 6
52272: PPUSH
52273: LD_VAR 0 4
52277: PPUSH
52278: LD_INT 3
52280: PPUSH
52281: CALL_OW 273
52285: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52286: LD_VAR 0 7
52290: PPUSH
52291: LD_VAR 0 8
52295: PPUSH
52296: CALL_OW 488
52300: NOT
52301: IFFALSE 52305
// continue ;
52303: GO 52237
// if HexInfo ( _x , _y ) = 0 then
52305: LD_VAR 0 7
52309: PPUSH
52310: LD_VAR 0 8
52314: PPUSH
52315: CALL_OW 428
52319: PUSH
52320: LD_INT 0
52322: EQUAL
52323: IFFALSE 52348
// begin ComMoveXY ( unit , _x , _y ) ;
52325: LD_VAR 0 1
52329: PPUSH
52330: LD_VAR 0 7
52334: PPUSH
52335: LD_VAR 0 8
52339: PPUSH
52340: CALL_OW 111
// exit ;
52344: POP
52345: POP
52346: GO 52352
// end ; end ;
52348: GO 52237
52350: POP
52351: POP
// end ;
52352: LD_VAR 0 3
52356: RET
// export function ScanBase ( side , base_area ) ; begin
52357: LD_INT 0
52359: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
52360: LD_ADDR_VAR 0 3
52364: PUSH
52365: LD_VAR 0 2
52369: PPUSH
52370: LD_INT 81
52372: PUSH
52373: LD_VAR 0 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PPUSH
52382: CALL_OW 70
52386: ST_TO_ADDR
// end ;
52387: LD_VAR 0 3
52391: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
52392: LD_INT 0
52394: PPUSH
52395: PPUSH
52396: PPUSH
52397: PPUSH
// result := false ;
52398: LD_ADDR_VAR 0 2
52402: PUSH
52403: LD_INT 0
52405: ST_TO_ADDR
// side := GetSide ( unit ) ;
52406: LD_ADDR_VAR 0 3
52410: PUSH
52411: LD_VAR 0 1
52415: PPUSH
52416: CALL_OW 255
52420: ST_TO_ADDR
// nat := GetNation ( unit ) ;
52421: LD_ADDR_VAR 0 4
52425: PUSH
52426: LD_VAR 0 1
52430: PPUSH
52431: CALL_OW 248
52435: ST_TO_ADDR
// case nat of 1 :
52436: LD_VAR 0 4
52440: PUSH
52441: LD_INT 1
52443: DOUBLE
52444: EQUAL
52445: IFTRUE 52449
52447: GO 52460
52449: POP
// tech := tech_lassight ; 2 :
52450: LD_ADDR_VAR 0 5
52454: PUSH
52455: LD_INT 12
52457: ST_TO_ADDR
52458: GO 52499
52460: LD_INT 2
52462: DOUBLE
52463: EQUAL
52464: IFTRUE 52468
52466: GO 52479
52468: POP
// tech := tech_mortar ; 3 :
52469: LD_ADDR_VAR 0 5
52473: PUSH
52474: LD_INT 41
52476: ST_TO_ADDR
52477: GO 52499
52479: LD_INT 3
52481: DOUBLE
52482: EQUAL
52483: IFTRUE 52487
52485: GO 52498
52487: POP
// tech := tech_bazooka ; end ;
52488: LD_ADDR_VAR 0 5
52492: PUSH
52493: LD_INT 44
52495: ST_TO_ADDR
52496: GO 52499
52498: POP
// if Researched ( side , tech ) then
52499: LD_VAR 0 3
52503: PPUSH
52504: LD_VAR 0 5
52508: PPUSH
52509: CALL_OW 325
52513: IFFALSE 52540
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
52515: LD_ADDR_VAR 0 2
52519: PUSH
52520: LD_INT 5
52522: PUSH
52523: LD_INT 8
52525: PUSH
52526: LD_INT 9
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: PUSH
52534: LD_VAR 0 4
52538: ARRAY
52539: ST_TO_ADDR
// end ;
52540: LD_VAR 0 2
52544: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
52545: LD_INT 0
52547: PPUSH
52548: PPUSH
52549: PPUSH
// if not mines then
52550: LD_VAR 0 2
52554: NOT
52555: IFFALSE 52559
// exit ;
52557: GO 52703
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52559: LD_ADDR_VAR 0 5
52563: PUSH
52564: LD_INT 81
52566: PUSH
52567: LD_VAR 0 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: LD_INT 21
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PPUSH
52597: CALL_OW 69
52601: ST_TO_ADDR
// for i in mines do
52602: LD_ADDR_VAR 0 4
52606: PUSH
52607: LD_VAR 0 2
52611: PUSH
52612: FOR_IN
52613: IFFALSE 52701
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
52615: LD_VAR 0 4
52619: PUSH
52620: LD_INT 1
52622: ARRAY
52623: PPUSH
52624: LD_VAR 0 4
52628: PUSH
52629: LD_INT 2
52631: ARRAY
52632: PPUSH
52633: CALL_OW 458
52637: NOT
52638: IFFALSE 52642
// continue ;
52640: GO 52612
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
52642: LD_VAR 0 4
52646: PUSH
52647: LD_INT 1
52649: ARRAY
52650: PPUSH
52651: LD_VAR 0 4
52655: PUSH
52656: LD_INT 2
52658: ARRAY
52659: PPUSH
52660: CALL_OW 428
52664: PUSH
52665: LD_VAR 0 5
52669: IN
52670: IFFALSE 52699
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
52672: LD_VAR 0 4
52676: PUSH
52677: LD_INT 1
52679: ARRAY
52680: PPUSH
52681: LD_VAR 0 4
52685: PUSH
52686: LD_INT 2
52688: ARRAY
52689: PPUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: CALL_OW 456
// end ;
52699: GO 52612
52701: POP
52702: POP
// end ;
52703: LD_VAR 0 3
52707: RET
// export function Count ( array ) ; var i ; begin
52708: LD_INT 0
52710: PPUSH
52711: PPUSH
// result := 0 ;
52712: LD_ADDR_VAR 0 2
52716: PUSH
52717: LD_INT 0
52719: ST_TO_ADDR
// for i in array do
52720: LD_ADDR_VAR 0 3
52724: PUSH
52725: LD_VAR 0 1
52729: PUSH
52730: FOR_IN
52731: IFFALSE 52755
// if i then
52733: LD_VAR 0 3
52737: IFFALSE 52753
// result := result + 1 ;
52739: LD_ADDR_VAR 0 2
52743: PUSH
52744: LD_VAR 0 2
52748: PUSH
52749: LD_INT 1
52751: PLUS
52752: ST_TO_ADDR
52753: GO 52730
52755: POP
52756: POP
// end ;
52757: LD_VAR 0 2
52761: RET
// export function IsEmpty ( building ) ; begin
52762: LD_INT 0
52764: PPUSH
// if not building then
52765: LD_VAR 0 1
52769: NOT
52770: IFFALSE 52774
// exit ;
52772: GO 52817
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52774: LD_ADDR_VAR 0 2
52778: PUSH
52779: LD_VAR 0 1
52783: PUSH
52784: LD_INT 22
52786: PUSH
52787: LD_VAR 0 1
52791: PPUSH
52792: CALL_OW 255
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 58
52803: PUSH
52804: EMPTY
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PPUSH
52811: CALL_OW 69
52815: IN
52816: ST_TO_ADDR
// end ;
52817: LD_VAR 0 2
52821: RET
// export function IsNotFull ( building ) ; begin
52822: LD_INT 0
52824: PPUSH
// if not building then
52825: LD_VAR 0 1
52829: NOT
52830: IFFALSE 52834
// exit ;
52832: GO 52853
// result := UnitsInside ( building ) < 6 ;
52834: LD_ADDR_VAR 0 2
52838: PUSH
52839: LD_VAR 0 1
52843: PPUSH
52844: CALL_OW 313
52848: PUSH
52849: LD_INT 6
52851: LESS
52852: ST_TO_ADDR
// end ;
52853: LD_VAR 0 2
52857: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52858: LD_INT 0
52860: PPUSH
52861: PPUSH
52862: PPUSH
52863: PPUSH
// tmp := [ ] ;
52864: LD_ADDR_VAR 0 3
52868: PUSH
52869: EMPTY
52870: ST_TO_ADDR
// list := [ ] ;
52871: LD_ADDR_VAR 0 5
52875: PUSH
52876: EMPTY
52877: ST_TO_ADDR
// for i = 16 to 25 do
52878: LD_ADDR_VAR 0 4
52882: PUSH
52883: DOUBLE
52884: LD_INT 16
52886: DEC
52887: ST_TO_ADDR
52888: LD_INT 25
52890: PUSH
52891: FOR_TO
52892: IFFALSE 52965
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52894: LD_ADDR_VAR 0 3
52898: PUSH
52899: LD_VAR 0 3
52903: PUSH
52904: LD_INT 22
52906: PUSH
52907: LD_VAR 0 1
52911: PPUSH
52912: CALL_OW 255
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 91
52923: PUSH
52924: LD_VAR 0 1
52928: PUSH
52929: LD_INT 6
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 30
52939: PUSH
52940: LD_VAR 0 4
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: PUSH
52954: EMPTY
52955: LIST
52956: PPUSH
52957: CALL_OW 69
52961: ADD
52962: ST_TO_ADDR
52963: GO 52891
52965: POP
52966: POP
// for i = 1 to tmp do
52967: LD_ADDR_VAR 0 4
52971: PUSH
52972: DOUBLE
52973: LD_INT 1
52975: DEC
52976: ST_TO_ADDR
52977: LD_VAR 0 3
52981: PUSH
52982: FOR_TO
52983: IFFALSE 53071
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52985: LD_ADDR_VAR 0 5
52989: PUSH
52990: LD_VAR 0 5
52994: PUSH
52995: LD_VAR 0 3
52999: PUSH
53000: LD_VAR 0 4
53004: ARRAY
53005: PPUSH
53006: CALL_OW 266
53010: PUSH
53011: LD_VAR 0 3
53015: PUSH
53016: LD_VAR 0 4
53020: ARRAY
53021: PPUSH
53022: CALL_OW 250
53026: PUSH
53027: LD_VAR 0 3
53031: PUSH
53032: LD_VAR 0 4
53036: ARRAY
53037: PPUSH
53038: CALL_OW 251
53042: PUSH
53043: LD_VAR 0 3
53047: PUSH
53048: LD_VAR 0 4
53052: ARRAY
53053: PPUSH
53054: CALL_OW 254
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: PUSH
53065: EMPTY
53066: LIST
53067: ADD
53068: ST_TO_ADDR
53069: GO 52982
53071: POP
53072: POP
// result := list ;
53073: LD_ADDR_VAR 0 2
53077: PUSH
53078: LD_VAR 0 5
53082: ST_TO_ADDR
// end ;
53083: LD_VAR 0 2
53087: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
53088: LD_INT 0
53090: PPUSH
53091: PPUSH
53092: PPUSH
53093: PPUSH
53094: PPUSH
53095: PPUSH
53096: PPUSH
// if not factory then
53097: LD_VAR 0 1
53101: NOT
53102: IFFALSE 53106
// exit ;
53104: GO 53699
// if control = control_apeman then
53106: LD_VAR 0 4
53110: PUSH
53111: LD_INT 5
53113: EQUAL
53114: IFFALSE 53223
// begin tmp := UnitsInside ( factory ) ;
53116: LD_ADDR_VAR 0 8
53120: PUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: CALL_OW 313
53130: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
53131: LD_VAR 0 8
53135: PPUSH
53136: LD_INT 25
53138: PUSH
53139: LD_INT 12
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PPUSH
53146: CALL_OW 72
53150: NOT
53151: IFFALSE 53161
// control := control_manual ;
53153: LD_ADDR_VAR 0 4
53157: PUSH
53158: LD_INT 1
53160: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
53161: LD_ADDR_VAR 0 8
53165: PUSH
53166: LD_VAR 0 1
53170: PPUSH
53171: CALL 52858 0 1
53175: ST_TO_ADDR
// if tmp then
53176: LD_VAR 0 8
53180: IFFALSE 53223
// begin for i in tmp do
53182: LD_ADDR_VAR 0 7
53186: PUSH
53187: LD_VAR 0 8
53191: PUSH
53192: FOR_IN
53193: IFFALSE 53221
// if i [ 1 ] = b_ext_radio then
53195: LD_VAR 0 7
53199: PUSH
53200: LD_INT 1
53202: ARRAY
53203: PUSH
53204: LD_INT 22
53206: EQUAL
53207: IFFALSE 53219
// begin control := control_remote ;
53209: LD_ADDR_VAR 0 4
53213: PUSH
53214: LD_INT 2
53216: ST_TO_ADDR
// break ;
53217: GO 53221
// end ;
53219: GO 53192
53221: POP
53222: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53223: LD_VAR 0 1
53227: PPUSH
53228: LD_VAR 0 2
53232: PPUSH
53233: LD_VAR 0 3
53237: PPUSH
53238: LD_VAR 0 4
53242: PPUSH
53243: LD_VAR 0 5
53247: PPUSH
53248: CALL_OW 448
53252: IFFALSE 53287
// begin result := [ chassis , engine , control , weapon ] ;
53254: LD_ADDR_VAR 0 6
53258: PUSH
53259: LD_VAR 0 2
53263: PUSH
53264: LD_VAR 0 3
53268: PUSH
53269: LD_VAR 0 4
53273: PUSH
53274: LD_VAR 0 5
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: ST_TO_ADDR
// exit ;
53285: GO 53699
// end ; _chassis := AvailableChassisList ( factory ) ;
53287: LD_ADDR_VAR 0 9
53291: PUSH
53292: LD_VAR 0 1
53296: PPUSH
53297: CALL_OW 475
53301: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
53302: LD_ADDR_VAR 0 11
53306: PUSH
53307: LD_VAR 0 1
53311: PPUSH
53312: CALL_OW 476
53316: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
53317: LD_ADDR_VAR 0 12
53321: PUSH
53322: LD_VAR 0 1
53326: PPUSH
53327: CALL_OW 477
53331: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
53332: LD_ADDR_VAR 0 10
53336: PUSH
53337: LD_VAR 0 1
53341: PPUSH
53342: CALL_OW 478
53346: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
53347: LD_VAR 0 9
53351: NOT
53352: PUSH
53353: LD_VAR 0 11
53357: NOT
53358: OR
53359: PUSH
53360: LD_VAR 0 12
53364: NOT
53365: OR
53366: PUSH
53367: LD_VAR 0 10
53371: NOT
53372: OR
53373: IFFALSE 53408
// begin result := [ chassis , engine , control , weapon ] ;
53375: LD_ADDR_VAR 0 6
53379: PUSH
53380: LD_VAR 0 2
53384: PUSH
53385: LD_VAR 0 3
53389: PUSH
53390: LD_VAR 0 4
53394: PUSH
53395: LD_VAR 0 5
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: ST_TO_ADDR
// exit ;
53406: GO 53699
// end ; if not chassis in _chassis then
53408: LD_VAR 0 2
53412: PUSH
53413: LD_VAR 0 9
53417: IN
53418: NOT
53419: IFFALSE 53445
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
53421: LD_ADDR_VAR 0 2
53425: PUSH
53426: LD_VAR 0 9
53430: PUSH
53431: LD_INT 1
53433: PPUSH
53434: LD_VAR 0 9
53438: PPUSH
53439: CALL_OW 12
53443: ARRAY
53444: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
53445: LD_VAR 0 2
53449: PPUSH
53450: LD_VAR 0 3
53454: PPUSH
53455: CALL 53704 0 2
53459: NOT
53460: IFFALSE 53519
// repeat engine := _engine [ 1 ] ;
53462: LD_ADDR_VAR 0 3
53466: PUSH
53467: LD_VAR 0 11
53471: PUSH
53472: LD_INT 1
53474: ARRAY
53475: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
53476: LD_ADDR_VAR 0 11
53480: PUSH
53481: LD_VAR 0 11
53485: PPUSH
53486: LD_INT 1
53488: PPUSH
53489: CALL_OW 3
53493: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
53494: LD_VAR 0 2
53498: PPUSH
53499: LD_VAR 0 3
53503: PPUSH
53504: CALL 53704 0 2
53508: PUSH
53509: LD_VAR 0 11
53513: PUSH
53514: EMPTY
53515: EQUAL
53516: OR
53517: IFFALSE 53462
// if not control in _control then
53519: LD_VAR 0 4
53523: PUSH
53524: LD_VAR 0 12
53528: IN
53529: NOT
53530: IFFALSE 53556
// control := _control [ rand ( 1 , _control ) ] ;
53532: LD_ADDR_VAR 0 4
53536: PUSH
53537: LD_VAR 0 12
53541: PUSH
53542: LD_INT 1
53544: PPUSH
53545: LD_VAR 0 12
53549: PPUSH
53550: CALL_OW 12
53554: ARRAY
53555: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53556: LD_VAR 0 2
53560: PPUSH
53561: LD_VAR 0 5
53565: PPUSH
53566: CALL 53924 0 2
53570: NOT
53571: IFFALSE 53630
// repeat weapon := _weapon [ 1 ] ;
53573: LD_ADDR_VAR 0 5
53577: PUSH
53578: LD_VAR 0 10
53582: PUSH
53583: LD_INT 1
53585: ARRAY
53586: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53587: LD_ADDR_VAR 0 10
53591: PUSH
53592: LD_VAR 0 10
53596: PPUSH
53597: LD_INT 1
53599: PPUSH
53600: CALL_OW 3
53604: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53605: LD_VAR 0 2
53609: PPUSH
53610: LD_VAR 0 5
53614: PPUSH
53615: CALL 53924 0 2
53619: PUSH
53620: LD_VAR 0 10
53624: PUSH
53625: EMPTY
53626: EQUAL
53627: OR
53628: IFFALSE 53573
// result := [ ] ;
53630: LD_ADDR_VAR 0 6
53634: PUSH
53635: EMPTY
53636: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53637: LD_VAR 0 1
53641: PPUSH
53642: LD_VAR 0 2
53646: PPUSH
53647: LD_VAR 0 3
53651: PPUSH
53652: LD_VAR 0 4
53656: PPUSH
53657: LD_VAR 0 5
53661: PPUSH
53662: CALL_OW 448
53666: IFFALSE 53699
// result := [ chassis , engine , control , weapon ] ;
53668: LD_ADDR_VAR 0 6
53672: PUSH
53673: LD_VAR 0 2
53677: PUSH
53678: LD_VAR 0 3
53682: PUSH
53683: LD_VAR 0 4
53687: PUSH
53688: LD_VAR 0 5
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: ST_TO_ADDR
// end ;
53699: LD_VAR 0 6
53703: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53704: LD_INT 0
53706: PPUSH
// if not chassis or not engine then
53707: LD_VAR 0 1
53711: NOT
53712: PUSH
53713: LD_VAR 0 2
53717: NOT
53718: OR
53719: IFFALSE 53723
// exit ;
53721: GO 53919
// case engine of engine_solar :
53723: LD_VAR 0 2
53727: PUSH
53728: LD_INT 2
53730: DOUBLE
53731: EQUAL
53732: IFTRUE 53736
53734: GO 53774
53736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53737: LD_ADDR_VAR 0 3
53741: PUSH
53742: LD_INT 11
53744: PUSH
53745: LD_INT 12
53747: PUSH
53748: LD_INT 13
53750: PUSH
53751: LD_INT 14
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: LD_INT 3
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: ST_TO_ADDR
53772: GO 53903
53774: LD_INT 1
53776: DOUBLE
53777: EQUAL
53778: IFTRUE 53782
53780: GO 53844
53782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53783: LD_ADDR_VAR 0 3
53787: PUSH
53788: LD_INT 11
53790: PUSH
53791: LD_INT 12
53793: PUSH
53794: LD_INT 13
53796: PUSH
53797: LD_INT 14
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 3
53808: PUSH
53809: LD_INT 4
53811: PUSH
53812: LD_INT 5
53814: PUSH
53815: LD_INT 21
53817: PUSH
53818: LD_INT 23
53820: PUSH
53821: LD_INT 22
53823: PUSH
53824: LD_INT 24
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: ST_TO_ADDR
53842: GO 53903
53844: LD_INT 3
53846: DOUBLE
53847: EQUAL
53848: IFTRUE 53852
53850: GO 53902
53852: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53853: LD_ADDR_VAR 0 3
53857: PUSH
53858: LD_INT 13
53860: PUSH
53861: LD_INT 14
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: LD_INT 4
53872: PUSH
53873: LD_INT 5
53875: PUSH
53876: LD_INT 21
53878: PUSH
53879: LD_INT 22
53881: PUSH
53882: LD_INT 23
53884: PUSH
53885: LD_INT 24
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
53900: GO 53903
53902: POP
// result := ( chassis in result ) ;
53903: LD_ADDR_VAR 0 3
53907: PUSH
53908: LD_VAR 0 1
53912: PUSH
53913: LD_VAR 0 3
53917: IN
53918: ST_TO_ADDR
// end ;
53919: LD_VAR 0 3
53923: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53924: LD_INT 0
53926: PPUSH
// if not chassis or not weapon then
53927: LD_VAR 0 1
53931: NOT
53932: PUSH
53933: LD_VAR 0 2
53937: NOT
53938: OR
53939: IFFALSE 53943
// exit ;
53941: GO 54969
// case weapon of us_machine_gun :
53943: LD_VAR 0 2
53947: PUSH
53948: LD_INT 2
53950: DOUBLE
53951: EQUAL
53952: IFTRUE 53956
53954: GO 53986
53956: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53957: LD_ADDR_VAR 0 3
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: LD_INT 4
53973: PUSH
53974: LD_INT 5
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
53984: GO 54953
53986: LD_INT 3
53988: DOUBLE
53989: EQUAL
53990: IFTRUE 53994
53992: GO 54024
53994: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53995: LD_ADDR_VAR 0 3
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 3
54008: PUSH
54009: LD_INT 4
54011: PUSH
54012: LD_INT 5
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: ST_TO_ADDR
54022: GO 54953
54024: LD_INT 11
54026: DOUBLE
54027: EQUAL
54028: IFTRUE 54032
54030: GO 54062
54032: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
54033: LD_ADDR_VAR 0 3
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 4
54049: PUSH
54050: LD_INT 5
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
54060: GO 54953
54062: LD_INT 4
54064: DOUBLE
54065: EQUAL
54066: IFTRUE 54070
54068: GO 54096
54070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
54071: LD_ADDR_VAR 0 3
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 3
54081: PUSH
54082: LD_INT 4
54084: PUSH
54085: LD_INT 5
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
54094: GO 54953
54096: LD_INT 5
54098: DOUBLE
54099: EQUAL
54100: IFTRUE 54104
54102: GO 54130
54104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
54105: LD_ADDR_VAR 0 3
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 3
54115: PUSH
54116: LD_INT 4
54118: PUSH
54119: LD_INT 5
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: ST_TO_ADDR
54128: GO 54953
54130: LD_INT 9
54132: DOUBLE
54133: EQUAL
54134: IFTRUE 54138
54136: GO 54164
54138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
54139: LD_ADDR_VAR 0 3
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: LD_INT 4
54152: PUSH
54153: LD_INT 5
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: ST_TO_ADDR
54162: GO 54953
54164: LD_INT 7
54166: DOUBLE
54167: EQUAL
54168: IFTRUE 54172
54170: GO 54198
54172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
54173: LD_ADDR_VAR 0 3
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: LD_INT 3
54183: PUSH
54184: LD_INT 4
54186: PUSH
54187: LD_INT 5
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
54196: GO 54953
54198: LD_INT 12
54200: DOUBLE
54201: EQUAL
54202: IFTRUE 54206
54204: GO 54232
54206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
54207: LD_ADDR_VAR 0 3
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: LD_INT 4
54220: PUSH
54221: LD_INT 5
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
54230: GO 54953
54232: LD_INT 13
54234: DOUBLE
54235: EQUAL
54236: IFTRUE 54240
54238: GO 54266
54240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
54241: LD_ADDR_VAR 0 3
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: LD_INT 4
54254: PUSH
54255: LD_INT 5
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: ST_TO_ADDR
54264: GO 54953
54266: LD_INT 14
54268: DOUBLE
54269: EQUAL
54270: IFTRUE 54274
54272: GO 54292
54274: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
54275: LD_ADDR_VAR 0 3
54279: PUSH
54280: LD_INT 4
54282: PUSH
54283: LD_INT 5
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: ST_TO_ADDR
54290: GO 54953
54292: LD_INT 6
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54300
54298: GO 54318
54300: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
54301: LD_ADDR_VAR 0 3
54305: PUSH
54306: LD_INT 4
54308: PUSH
54309: LD_INT 5
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: ST_TO_ADDR
54316: GO 54953
54318: LD_INT 10
54320: DOUBLE
54321: EQUAL
54322: IFTRUE 54326
54324: GO 54344
54326: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
54327: LD_ADDR_VAR 0 3
54331: PUSH
54332: LD_INT 4
54334: PUSH
54335: LD_INT 5
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: ST_TO_ADDR
54342: GO 54953
54344: LD_INT 22
54346: DOUBLE
54347: EQUAL
54348: IFTRUE 54352
54350: GO 54378
54352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
54353: LD_ADDR_VAR 0 3
54357: PUSH
54358: LD_INT 11
54360: PUSH
54361: LD_INT 12
54363: PUSH
54364: LD_INT 13
54366: PUSH
54367: LD_INT 14
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: ST_TO_ADDR
54376: GO 54953
54378: LD_INT 23
54380: DOUBLE
54381: EQUAL
54382: IFTRUE 54386
54384: GO 54412
54386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
54387: LD_ADDR_VAR 0 3
54391: PUSH
54392: LD_INT 11
54394: PUSH
54395: LD_INT 12
54397: PUSH
54398: LD_INT 13
54400: PUSH
54401: LD_INT 14
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: ST_TO_ADDR
54410: GO 54953
54412: LD_INT 24
54414: DOUBLE
54415: EQUAL
54416: IFTRUE 54420
54418: GO 54446
54420: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
54421: LD_ADDR_VAR 0 3
54425: PUSH
54426: LD_INT 11
54428: PUSH
54429: LD_INT 12
54431: PUSH
54432: LD_INT 13
54434: PUSH
54435: LD_INT 14
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: ST_TO_ADDR
54444: GO 54953
54446: LD_INT 30
54448: DOUBLE
54449: EQUAL
54450: IFTRUE 54454
54452: GO 54480
54454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
54455: LD_ADDR_VAR 0 3
54459: PUSH
54460: LD_INT 11
54462: PUSH
54463: LD_INT 12
54465: PUSH
54466: LD_INT 13
54468: PUSH
54469: LD_INT 14
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: ST_TO_ADDR
54478: GO 54953
54480: LD_INT 25
54482: DOUBLE
54483: EQUAL
54484: IFTRUE 54488
54486: GO 54506
54488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
54489: LD_ADDR_VAR 0 3
54493: PUSH
54494: LD_INT 13
54496: PUSH
54497: LD_INT 14
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: ST_TO_ADDR
54504: GO 54953
54506: LD_INT 27
54508: DOUBLE
54509: EQUAL
54510: IFTRUE 54514
54512: GO 54532
54514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54515: LD_ADDR_VAR 0 3
54519: PUSH
54520: LD_INT 13
54522: PUSH
54523: LD_INT 14
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: ST_TO_ADDR
54530: GO 54953
54532: LD_INT 28
54534: DOUBLE
54535: EQUAL
54536: IFTRUE 54540
54538: GO 54558
54540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54541: LD_ADDR_VAR 0 3
54545: PUSH
54546: LD_INT 13
54548: PUSH
54549: LD_INT 14
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: ST_TO_ADDR
54556: GO 54953
54558: LD_INT 29
54560: DOUBLE
54561: EQUAL
54562: IFTRUE 54566
54564: GO 54584
54566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54567: LD_ADDR_VAR 0 3
54571: PUSH
54572: LD_INT 13
54574: PUSH
54575: LD_INT 14
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: ST_TO_ADDR
54582: GO 54953
54584: LD_INT 31
54586: DOUBLE
54587: EQUAL
54588: IFTRUE 54592
54590: GO 54610
54592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54593: LD_ADDR_VAR 0 3
54597: PUSH
54598: LD_INT 13
54600: PUSH
54601: LD_INT 14
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: ST_TO_ADDR
54608: GO 54953
54610: LD_INT 26
54612: DOUBLE
54613: EQUAL
54614: IFTRUE 54618
54616: GO 54636
54618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54619: LD_ADDR_VAR 0 3
54623: PUSH
54624: LD_INT 13
54626: PUSH
54627: LD_INT 14
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: ST_TO_ADDR
54634: GO 54953
54636: LD_INT 42
54638: DOUBLE
54639: EQUAL
54640: IFTRUE 54644
54642: GO 54670
54644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54645: LD_ADDR_VAR 0 3
54649: PUSH
54650: LD_INT 21
54652: PUSH
54653: LD_INT 22
54655: PUSH
54656: LD_INT 23
54658: PUSH
54659: LD_INT 24
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: ST_TO_ADDR
54668: GO 54953
54670: LD_INT 43
54672: DOUBLE
54673: EQUAL
54674: IFTRUE 54678
54676: GO 54704
54678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54679: LD_ADDR_VAR 0 3
54683: PUSH
54684: LD_INT 21
54686: PUSH
54687: LD_INT 22
54689: PUSH
54690: LD_INT 23
54692: PUSH
54693: LD_INT 24
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
54702: GO 54953
54704: LD_INT 44
54706: DOUBLE
54707: EQUAL
54708: IFTRUE 54712
54710: GO 54738
54712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54713: LD_ADDR_VAR 0 3
54717: PUSH
54718: LD_INT 21
54720: PUSH
54721: LD_INT 22
54723: PUSH
54724: LD_INT 23
54726: PUSH
54727: LD_INT 24
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: ST_TO_ADDR
54736: GO 54953
54738: LD_INT 45
54740: DOUBLE
54741: EQUAL
54742: IFTRUE 54746
54744: GO 54772
54746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54747: LD_ADDR_VAR 0 3
54751: PUSH
54752: LD_INT 21
54754: PUSH
54755: LD_INT 22
54757: PUSH
54758: LD_INT 23
54760: PUSH
54761: LD_INT 24
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
54770: GO 54953
54772: LD_INT 49
54774: DOUBLE
54775: EQUAL
54776: IFTRUE 54780
54778: GO 54806
54780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54781: LD_ADDR_VAR 0 3
54785: PUSH
54786: LD_INT 21
54788: PUSH
54789: LD_INT 22
54791: PUSH
54792: LD_INT 23
54794: PUSH
54795: LD_INT 24
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: ST_TO_ADDR
54804: GO 54953
54806: LD_INT 51
54808: DOUBLE
54809: EQUAL
54810: IFTRUE 54814
54812: GO 54840
54814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54815: LD_ADDR_VAR 0 3
54819: PUSH
54820: LD_INT 21
54822: PUSH
54823: LD_INT 22
54825: PUSH
54826: LD_INT 23
54828: PUSH
54829: LD_INT 24
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: ST_TO_ADDR
54838: GO 54953
54840: LD_INT 52
54842: DOUBLE
54843: EQUAL
54844: IFTRUE 54848
54846: GO 54874
54848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54849: LD_ADDR_VAR 0 3
54853: PUSH
54854: LD_INT 21
54856: PUSH
54857: LD_INT 22
54859: PUSH
54860: LD_INT 23
54862: PUSH
54863: LD_INT 24
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: ST_TO_ADDR
54872: GO 54953
54874: LD_INT 53
54876: DOUBLE
54877: EQUAL
54878: IFTRUE 54882
54880: GO 54900
54882: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54883: LD_ADDR_VAR 0 3
54887: PUSH
54888: LD_INT 23
54890: PUSH
54891: LD_INT 24
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: ST_TO_ADDR
54898: GO 54953
54900: LD_INT 46
54902: DOUBLE
54903: EQUAL
54904: IFTRUE 54908
54906: GO 54926
54908: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54909: LD_ADDR_VAR 0 3
54913: PUSH
54914: LD_INT 23
54916: PUSH
54917: LD_INT 24
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: ST_TO_ADDR
54924: GO 54953
54926: LD_INT 47
54928: DOUBLE
54929: EQUAL
54930: IFTRUE 54934
54932: GO 54952
54934: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54935: LD_ADDR_VAR 0 3
54939: PUSH
54940: LD_INT 23
54942: PUSH
54943: LD_INT 24
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: ST_TO_ADDR
54950: GO 54953
54952: POP
// result := ( chassis in result ) ;
54953: LD_ADDR_VAR 0 3
54957: PUSH
54958: LD_VAR 0 1
54962: PUSH
54963: LD_VAR 0 3
54967: IN
54968: ST_TO_ADDR
// end ;
54969: LD_VAR 0 3
54973: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54974: LD_INT 0
54976: PPUSH
54977: PPUSH
54978: PPUSH
54979: PPUSH
54980: PPUSH
54981: PPUSH
54982: PPUSH
// result := array ;
54983: LD_ADDR_VAR 0 5
54987: PUSH
54988: LD_VAR 0 1
54992: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54993: LD_VAR 0 1
54997: NOT
54998: PUSH
54999: LD_VAR 0 2
55003: NOT
55004: OR
55005: PUSH
55006: LD_VAR 0 3
55010: NOT
55011: OR
55012: PUSH
55013: LD_VAR 0 2
55017: PUSH
55018: LD_VAR 0 1
55022: GREATER
55023: OR
55024: PUSH
55025: LD_VAR 0 3
55029: PUSH
55030: LD_VAR 0 1
55034: GREATER
55035: OR
55036: IFFALSE 55040
// exit ;
55038: GO 55336
// if direction then
55040: LD_VAR 0 4
55044: IFFALSE 55108
// begin d := 1 ;
55046: LD_ADDR_VAR 0 9
55050: PUSH
55051: LD_INT 1
55053: ST_TO_ADDR
// if i_from > i_to then
55054: LD_VAR 0 2
55058: PUSH
55059: LD_VAR 0 3
55063: GREATER
55064: IFFALSE 55090
// length := ( array - i_from ) + i_to else
55066: LD_ADDR_VAR 0 11
55070: PUSH
55071: LD_VAR 0 1
55075: PUSH
55076: LD_VAR 0 2
55080: MINUS
55081: PUSH
55082: LD_VAR 0 3
55086: PLUS
55087: ST_TO_ADDR
55088: GO 55106
// length := i_to - i_from ;
55090: LD_ADDR_VAR 0 11
55094: PUSH
55095: LD_VAR 0 3
55099: PUSH
55100: LD_VAR 0 2
55104: MINUS
55105: ST_TO_ADDR
// end else
55106: GO 55169
// begin d := - 1 ;
55108: LD_ADDR_VAR 0 9
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: ST_TO_ADDR
// if i_from > i_to then
55117: LD_VAR 0 2
55121: PUSH
55122: LD_VAR 0 3
55126: GREATER
55127: IFFALSE 55147
// length := i_from - i_to else
55129: LD_ADDR_VAR 0 11
55133: PUSH
55134: LD_VAR 0 2
55138: PUSH
55139: LD_VAR 0 3
55143: MINUS
55144: ST_TO_ADDR
55145: GO 55169
// length := ( array - i_to ) + i_from ;
55147: LD_ADDR_VAR 0 11
55151: PUSH
55152: LD_VAR 0 1
55156: PUSH
55157: LD_VAR 0 3
55161: MINUS
55162: PUSH
55163: LD_VAR 0 2
55167: PLUS
55168: ST_TO_ADDR
// end ; if not length then
55169: LD_VAR 0 11
55173: NOT
55174: IFFALSE 55178
// exit ;
55176: GO 55336
// tmp := array ;
55178: LD_ADDR_VAR 0 10
55182: PUSH
55183: LD_VAR 0 1
55187: ST_TO_ADDR
// for i = 1 to length do
55188: LD_ADDR_VAR 0 6
55192: PUSH
55193: DOUBLE
55194: LD_INT 1
55196: DEC
55197: ST_TO_ADDR
55198: LD_VAR 0 11
55202: PUSH
55203: FOR_TO
55204: IFFALSE 55324
// begin for j = 1 to array do
55206: LD_ADDR_VAR 0 7
55210: PUSH
55211: DOUBLE
55212: LD_INT 1
55214: DEC
55215: ST_TO_ADDR
55216: LD_VAR 0 1
55220: PUSH
55221: FOR_TO
55222: IFFALSE 55310
// begin k := j + d ;
55224: LD_ADDR_VAR 0 8
55228: PUSH
55229: LD_VAR 0 7
55233: PUSH
55234: LD_VAR 0 9
55238: PLUS
55239: ST_TO_ADDR
// if k > array then
55240: LD_VAR 0 8
55244: PUSH
55245: LD_VAR 0 1
55249: GREATER
55250: IFFALSE 55260
// k := 1 ;
55252: LD_ADDR_VAR 0 8
55256: PUSH
55257: LD_INT 1
55259: ST_TO_ADDR
// if not k then
55260: LD_VAR 0 8
55264: NOT
55265: IFFALSE 55277
// k := array ;
55267: LD_ADDR_VAR 0 8
55271: PUSH
55272: LD_VAR 0 1
55276: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
55277: LD_ADDR_VAR 0 10
55281: PUSH
55282: LD_VAR 0 10
55286: PPUSH
55287: LD_VAR 0 8
55291: PPUSH
55292: LD_VAR 0 1
55296: PUSH
55297: LD_VAR 0 7
55301: ARRAY
55302: PPUSH
55303: CALL_OW 1
55307: ST_TO_ADDR
// end ;
55308: GO 55221
55310: POP
55311: POP
// array := tmp ;
55312: LD_ADDR_VAR 0 1
55316: PUSH
55317: LD_VAR 0 10
55321: ST_TO_ADDR
// end ;
55322: GO 55203
55324: POP
55325: POP
// result := array ;
55326: LD_ADDR_VAR 0 5
55330: PUSH
55331: LD_VAR 0 1
55335: ST_TO_ADDR
// end ;
55336: LD_VAR 0 5
55340: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
55341: LD_INT 0
55343: PPUSH
55344: PPUSH
// result := 0 ;
55345: LD_ADDR_VAR 0 3
55349: PUSH
55350: LD_INT 0
55352: ST_TO_ADDR
// if not array or not value in array then
55353: LD_VAR 0 1
55357: NOT
55358: PUSH
55359: LD_VAR 0 2
55363: PUSH
55364: LD_VAR 0 1
55368: IN
55369: NOT
55370: OR
55371: IFFALSE 55375
// exit ;
55373: GO 55429
// for i = 1 to array do
55375: LD_ADDR_VAR 0 4
55379: PUSH
55380: DOUBLE
55381: LD_INT 1
55383: DEC
55384: ST_TO_ADDR
55385: LD_VAR 0 1
55389: PUSH
55390: FOR_TO
55391: IFFALSE 55427
// if value = array [ i ] then
55393: LD_VAR 0 2
55397: PUSH
55398: LD_VAR 0 1
55402: PUSH
55403: LD_VAR 0 4
55407: ARRAY
55408: EQUAL
55409: IFFALSE 55425
// begin result := i ;
55411: LD_ADDR_VAR 0 3
55415: PUSH
55416: LD_VAR 0 4
55420: ST_TO_ADDR
// exit ;
55421: POP
55422: POP
55423: GO 55429
// end ;
55425: GO 55390
55427: POP
55428: POP
// end ;
55429: LD_VAR 0 3
55433: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
55434: LD_INT 0
55436: PPUSH
// vc_chassis := chassis ;
55437: LD_ADDR_OWVAR 37
55441: PUSH
55442: LD_VAR 0 1
55446: ST_TO_ADDR
// vc_engine := engine ;
55447: LD_ADDR_OWVAR 39
55451: PUSH
55452: LD_VAR 0 2
55456: ST_TO_ADDR
// vc_control := control ;
55457: LD_ADDR_OWVAR 38
55461: PUSH
55462: LD_VAR 0 3
55466: ST_TO_ADDR
// vc_weapon := weapon ;
55467: LD_ADDR_OWVAR 40
55471: PUSH
55472: LD_VAR 0 4
55476: ST_TO_ADDR
// vc_fuel_battery := fuel ;
55477: LD_ADDR_OWVAR 41
55481: PUSH
55482: LD_VAR 0 5
55486: ST_TO_ADDR
// end ;
55487: LD_VAR 0 6
55491: RET
// export function WantPlant ( unit ) ; var task ; begin
55492: LD_INT 0
55494: PPUSH
55495: PPUSH
// result := false ;
55496: LD_ADDR_VAR 0 2
55500: PUSH
55501: LD_INT 0
55503: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55504: LD_ADDR_VAR 0 3
55508: PUSH
55509: LD_VAR 0 1
55513: PPUSH
55514: CALL_OW 437
55518: ST_TO_ADDR
// if task then
55519: LD_VAR 0 3
55523: IFFALSE 55551
// if task [ 1 ] [ 1 ] = p then
55525: LD_VAR 0 3
55529: PUSH
55530: LD_INT 1
55532: ARRAY
55533: PUSH
55534: LD_INT 1
55536: ARRAY
55537: PUSH
55538: LD_STRING p
55540: EQUAL
55541: IFFALSE 55551
// result := true ;
55543: LD_ADDR_VAR 0 2
55547: PUSH
55548: LD_INT 1
55550: ST_TO_ADDR
// end ;
55551: LD_VAR 0 2
55555: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55556: LD_INT 0
55558: PPUSH
55559: PPUSH
55560: PPUSH
55561: PPUSH
// if pos < 1 then
55562: LD_VAR 0 2
55566: PUSH
55567: LD_INT 1
55569: LESS
55570: IFFALSE 55574
// exit ;
55572: GO 55877
// if pos = 1 then
55574: LD_VAR 0 2
55578: PUSH
55579: LD_INT 1
55581: EQUAL
55582: IFFALSE 55615
// result := Replace ( arr , pos [ 1 ] , value ) else
55584: LD_ADDR_VAR 0 4
55588: PUSH
55589: LD_VAR 0 1
55593: PPUSH
55594: LD_VAR 0 2
55598: PUSH
55599: LD_INT 1
55601: ARRAY
55602: PPUSH
55603: LD_VAR 0 3
55607: PPUSH
55608: CALL_OW 1
55612: ST_TO_ADDR
55613: GO 55877
// begin tmp := arr ;
55615: LD_ADDR_VAR 0 6
55619: PUSH
55620: LD_VAR 0 1
55624: ST_TO_ADDR
// s_arr := [ tmp ] ;
55625: LD_ADDR_VAR 0 7
55629: PUSH
55630: LD_VAR 0 6
55634: PUSH
55635: EMPTY
55636: LIST
55637: ST_TO_ADDR
// for i = 1 to pos - 1 do
55638: LD_ADDR_VAR 0 5
55642: PUSH
55643: DOUBLE
55644: LD_INT 1
55646: DEC
55647: ST_TO_ADDR
55648: LD_VAR 0 2
55652: PUSH
55653: LD_INT 1
55655: MINUS
55656: PUSH
55657: FOR_TO
55658: IFFALSE 55703
// begin tmp := tmp [ pos [ i ] ] ;
55660: LD_ADDR_VAR 0 6
55664: PUSH
55665: LD_VAR 0 6
55669: PUSH
55670: LD_VAR 0 2
55674: PUSH
55675: LD_VAR 0 5
55679: ARRAY
55680: ARRAY
55681: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55682: LD_ADDR_VAR 0 7
55686: PUSH
55687: LD_VAR 0 7
55691: PUSH
55692: LD_VAR 0 6
55696: PUSH
55697: EMPTY
55698: LIST
55699: ADD
55700: ST_TO_ADDR
// end ;
55701: GO 55657
55703: POP
55704: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55705: LD_ADDR_VAR 0 6
55709: PUSH
55710: LD_VAR 0 6
55714: PPUSH
55715: LD_VAR 0 2
55719: PUSH
55720: LD_VAR 0 2
55724: ARRAY
55725: PPUSH
55726: LD_VAR 0 3
55730: PPUSH
55731: CALL_OW 1
55735: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55736: LD_ADDR_VAR 0 7
55740: PUSH
55741: LD_VAR 0 7
55745: PPUSH
55746: LD_VAR 0 7
55750: PPUSH
55751: LD_VAR 0 6
55755: PPUSH
55756: CALL_OW 1
55760: ST_TO_ADDR
// for i = s_arr downto 2 do
55761: LD_ADDR_VAR 0 5
55765: PUSH
55766: DOUBLE
55767: LD_VAR 0 7
55771: INC
55772: ST_TO_ADDR
55773: LD_INT 2
55775: PUSH
55776: FOR_DOWNTO
55777: IFFALSE 55861
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55779: LD_ADDR_VAR 0 6
55783: PUSH
55784: LD_VAR 0 7
55788: PUSH
55789: LD_VAR 0 5
55793: PUSH
55794: LD_INT 1
55796: MINUS
55797: ARRAY
55798: PPUSH
55799: LD_VAR 0 2
55803: PUSH
55804: LD_VAR 0 5
55808: PUSH
55809: LD_INT 1
55811: MINUS
55812: ARRAY
55813: PPUSH
55814: LD_VAR 0 7
55818: PUSH
55819: LD_VAR 0 5
55823: ARRAY
55824: PPUSH
55825: CALL_OW 1
55829: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55830: LD_ADDR_VAR 0 7
55834: PUSH
55835: LD_VAR 0 7
55839: PPUSH
55840: LD_VAR 0 5
55844: PUSH
55845: LD_INT 1
55847: MINUS
55848: PPUSH
55849: LD_VAR 0 6
55853: PPUSH
55854: CALL_OW 1
55858: ST_TO_ADDR
// end ;
55859: GO 55776
55861: POP
55862: POP
// result := s_arr [ 1 ] ;
55863: LD_ADDR_VAR 0 4
55867: PUSH
55868: LD_VAR 0 7
55872: PUSH
55873: LD_INT 1
55875: ARRAY
55876: ST_TO_ADDR
// end ; end ;
55877: LD_VAR 0 4
55881: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55882: LD_INT 0
55884: PPUSH
55885: PPUSH
// if not list then
55886: LD_VAR 0 1
55890: NOT
55891: IFFALSE 55895
// exit ;
55893: GO 55986
// i := list [ pos1 ] ;
55895: LD_ADDR_VAR 0 5
55899: PUSH
55900: LD_VAR 0 1
55904: PUSH
55905: LD_VAR 0 2
55909: ARRAY
55910: ST_TO_ADDR
// if not i then
55911: LD_VAR 0 5
55915: NOT
55916: IFFALSE 55920
// exit ;
55918: GO 55986
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55920: LD_ADDR_VAR 0 1
55924: PUSH
55925: LD_VAR 0 1
55929: PPUSH
55930: LD_VAR 0 2
55934: PPUSH
55935: LD_VAR 0 1
55939: PUSH
55940: LD_VAR 0 3
55944: ARRAY
55945: PPUSH
55946: CALL_OW 1
55950: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55951: LD_ADDR_VAR 0 1
55955: PUSH
55956: LD_VAR 0 1
55960: PPUSH
55961: LD_VAR 0 3
55965: PPUSH
55966: LD_VAR 0 5
55970: PPUSH
55971: CALL_OW 1
55975: ST_TO_ADDR
// result := list ;
55976: LD_ADDR_VAR 0 4
55980: PUSH
55981: LD_VAR 0 1
55985: ST_TO_ADDR
// end ;
55986: LD_VAR 0 4
55990: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55991: LD_INT 0
55993: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55994: LD_ADDR_VAR 0 5
55998: PUSH
55999: LD_VAR 0 1
56003: PPUSH
56004: CALL_OW 250
56008: PPUSH
56009: LD_VAR 0 1
56013: PPUSH
56014: CALL_OW 251
56018: PPUSH
56019: LD_VAR 0 2
56023: PPUSH
56024: LD_VAR 0 3
56028: PPUSH
56029: LD_VAR 0 4
56033: PPUSH
56034: CALL 56044 0 5
56038: ST_TO_ADDR
// end ;
56039: LD_VAR 0 5
56043: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
56044: LD_INT 0
56046: PPUSH
56047: PPUSH
56048: PPUSH
56049: PPUSH
// if not list then
56050: LD_VAR 0 3
56054: NOT
56055: IFFALSE 56059
// exit ;
56057: GO 56447
// result := [ ] ;
56059: LD_ADDR_VAR 0 6
56063: PUSH
56064: EMPTY
56065: ST_TO_ADDR
// for i in list do
56066: LD_ADDR_VAR 0 7
56070: PUSH
56071: LD_VAR 0 3
56075: PUSH
56076: FOR_IN
56077: IFFALSE 56279
// begin tmp := GetDistUnitXY ( i , x , y ) ;
56079: LD_ADDR_VAR 0 9
56083: PUSH
56084: LD_VAR 0 7
56088: PPUSH
56089: LD_VAR 0 1
56093: PPUSH
56094: LD_VAR 0 2
56098: PPUSH
56099: CALL_OW 297
56103: ST_TO_ADDR
// if not result then
56104: LD_VAR 0 6
56108: NOT
56109: IFFALSE 56135
// result := [ [ i , tmp ] ] else
56111: LD_ADDR_VAR 0 6
56115: PUSH
56116: LD_VAR 0 7
56120: PUSH
56121: LD_VAR 0 9
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: EMPTY
56131: LIST
56132: ST_TO_ADDR
56133: GO 56277
// begin if result [ result ] [ 2 ] < tmp then
56135: LD_VAR 0 6
56139: PUSH
56140: LD_VAR 0 6
56144: ARRAY
56145: PUSH
56146: LD_INT 2
56148: ARRAY
56149: PUSH
56150: LD_VAR 0 9
56154: LESS
56155: IFFALSE 56197
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
56157: LD_ADDR_VAR 0 6
56161: PUSH
56162: LD_VAR 0 6
56166: PPUSH
56167: LD_VAR 0 6
56171: PUSH
56172: LD_INT 1
56174: PLUS
56175: PPUSH
56176: LD_VAR 0 7
56180: PUSH
56181: LD_VAR 0 9
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PPUSH
56190: CALL_OW 2
56194: ST_TO_ADDR
56195: GO 56277
// for j = 1 to result do
56197: LD_ADDR_VAR 0 8
56201: PUSH
56202: DOUBLE
56203: LD_INT 1
56205: DEC
56206: ST_TO_ADDR
56207: LD_VAR 0 6
56211: PUSH
56212: FOR_TO
56213: IFFALSE 56275
// begin if tmp < result [ j ] [ 2 ] then
56215: LD_VAR 0 9
56219: PUSH
56220: LD_VAR 0 6
56224: PUSH
56225: LD_VAR 0 8
56229: ARRAY
56230: PUSH
56231: LD_INT 2
56233: ARRAY
56234: LESS
56235: IFFALSE 56273
// begin result := Insert ( result , j , [ i , tmp ] ) ;
56237: LD_ADDR_VAR 0 6
56241: PUSH
56242: LD_VAR 0 6
56246: PPUSH
56247: LD_VAR 0 8
56251: PPUSH
56252: LD_VAR 0 7
56256: PUSH
56257: LD_VAR 0 9
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PPUSH
56266: CALL_OW 2
56270: ST_TO_ADDR
// break ;
56271: GO 56275
// end ; end ;
56273: GO 56212
56275: POP
56276: POP
// end ; end ;
56277: GO 56076
56279: POP
56280: POP
// if result and not asc then
56281: LD_VAR 0 6
56285: PUSH
56286: LD_VAR 0 4
56290: NOT
56291: AND
56292: IFFALSE 56367
// begin tmp := result ;
56294: LD_ADDR_VAR 0 9
56298: PUSH
56299: LD_VAR 0 6
56303: ST_TO_ADDR
// for i = tmp downto 1 do
56304: LD_ADDR_VAR 0 7
56308: PUSH
56309: DOUBLE
56310: LD_VAR 0 9
56314: INC
56315: ST_TO_ADDR
56316: LD_INT 1
56318: PUSH
56319: FOR_DOWNTO
56320: IFFALSE 56365
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
56322: LD_ADDR_VAR 0 6
56326: PUSH
56327: LD_VAR 0 6
56331: PPUSH
56332: LD_VAR 0 9
56336: PUSH
56337: LD_VAR 0 7
56341: MINUS
56342: PUSH
56343: LD_INT 1
56345: PLUS
56346: PPUSH
56347: LD_VAR 0 9
56351: PUSH
56352: LD_VAR 0 7
56356: ARRAY
56357: PPUSH
56358: CALL_OW 1
56362: ST_TO_ADDR
56363: GO 56319
56365: POP
56366: POP
// end ; tmp := [ ] ;
56367: LD_ADDR_VAR 0 9
56371: PUSH
56372: EMPTY
56373: ST_TO_ADDR
// if mode then
56374: LD_VAR 0 5
56378: IFFALSE 56447
// begin for i = 1 to result do
56380: LD_ADDR_VAR 0 7
56384: PUSH
56385: DOUBLE
56386: LD_INT 1
56388: DEC
56389: ST_TO_ADDR
56390: LD_VAR 0 6
56394: PUSH
56395: FOR_TO
56396: IFFALSE 56435
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
56398: LD_ADDR_VAR 0 9
56402: PUSH
56403: LD_VAR 0 9
56407: PPUSH
56408: LD_VAR 0 7
56412: PPUSH
56413: LD_VAR 0 6
56417: PUSH
56418: LD_VAR 0 7
56422: ARRAY
56423: PUSH
56424: LD_INT 1
56426: ARRAY
56427: PPUSH
56428: CALL_OW 1
56432: ST_TO_ADDR
56433: GO 56395
56435: POP
56436: POP
// result := tmp ;
56437: LD_ADDR_VAR 0 6
56441: PUSH
56442: LD_VAR 0 9
56446: ST_TO_ADDR
// end ; end ;
56447: LD_VAR 0 6
56451: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
56452: LD_INT 0
56454: PPUSH
56455: PPUSH
56456: PPUSH
56457: PPUSH
56458: PPUSH
56459: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
56460: LD_ADDR_VAR 0 5
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: ST_TO_ADDR
// if not x or not y then
56482: LD_VAR 0 2
56486: NOT
56487: PUSH
56488: LD_VAR 0 3
56492: NOT
56493: OR
56494: IFFALSE 56498
// exit ;
56496: GO 58144
// if not range then
56498: LD_VAR 0 4
56502: NOT
56503: IFFALSE 56513
// range := 10 ;
56505: LD_ADDR_VAR 0 4
56509: PUSH
56510: LD_INT 10
56512: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56513: LD_ADDR_VAR 0 8
56517: PUSH
56518: LD_INT 81
56520: PUSH
56521: LD_VAR 0 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 92
56532: PUSH
56533: LD_VAR 0 2
56537: PUSH
56538: LD_VAR 0 3
56542: PUSH
56543: LD_VAR 0 4
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: LD_INT 21
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: LIST
56575: PPUSH
56576: CALL_OW 69
56580: ST_TO_ADDR
// if not tmp then
56581: LD_VAR 0 8
56585: NOT
56586: IFFALSE 56590
// exit ;
56588: GO 58144
// for i in tmp do
56590: LD_ADDR_VAR 0 6
56594: PUSH
56595: LD_VAR 0 8
56599: PUSH
56600: FOR_IN
56601: IFFALSE 58119
// begin points := [ 0 , 0 , 0 ] ;
56603: LD_ADDR_VAR 0 9
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// bpoints := 1 ;
56622: LD_ADDR_VAR 0 10
56626: PUSH
56627: LD_INT 1
56629: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56630: LD_VAR 0 6
56634: PPUSH
56635: CALL_OW 247
56639: PUSH
56640: LD_INT 1
56642: DOUBLE
56643: EQUAL
56644: IFTRUE 56648
56646: GO 57226
56648: POP
// begin if GetClass ( i ) = 1 then
56649: LD_VAR 0 6
56653: PPUSH
56654: CALL_OW 257
56658: PUSH
56659: LD_INT 1
56661: EQUAL
56662: IFFALSE 56683
// points := [ 10 , 5 , 3 ] ;
56664: LD_ADDR_VAR 0 9
56668: PUSH
56669: LD_INT 10
56671: PUSH
56672: LD_INT 5
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56683: LD_VAR 0 6
56687: PPUSH
56688: CALL_OW 257
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 4
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: IN
56707: IFFALSE 56728
// points := [ 3 , 2 , 1 ] ;
56709: LD_ADDR_VAR 0 9
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: LIST
56727: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56728: LD_VAR 0 6
56732: PPUSH
56733: CALL_OW 257
56737: PUSH
56738: LD_INT 5
56740: EQUAL
56741: IFFALSE 56762
// points := [ 130 , 5 , 2 ] ;
56743: LD_ADDR_VAR 0 9
56747: PUSH
56748: LD_INT 130
56750: PUSH
56751: LD_INT 5
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56762: LD_VAR 0 6
56766: PPUSH
56767: CALL_OW 257
56771: PUSH
56772: LD_INT 8
56774: EQUAL
56775: IFFALSE 56796
// points := [ 35 , 35 , 30 ] ;
56777: LD_ADDR_VAR 0 9
56781: PUSH
56782: LD_INT 35
56784: PUSH
56785: LD_INT 35
56787: PUSH
56788: LD_INT 30
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56796: LD_VAR 0 6
56800: PPUSH
56801: CALL_OW 257
56805: PUSH
56806: LD_INT 9
56808: EQUAL
56809: IFFALSE 56830
// points := [ 20 , 55 , 40 ] ;
56811: LD_ADDR_VAR 0 9
56815: PUSH
56816: LD_INT 20
56818: PUSH
56819: LD_INT 55
56821: PUSH
56822: LD_INT 40
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56830: LD_VAR 0 6
56834: PPUSH
56835: CALL_OW 257
56839: PUSH
56840: LD_INT 12
56842: PUSH
56843: LD_INT 16
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: IN
56850: IFFALSE 56871
// points := [ 5 , 3 , 2 ] ;
56852: LD_ADDR_VAR 0 9
56856: PUSH
56857: LD_INT 5
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56871: LD_VAR 0 6
56875: PPUSH
56876: CALL_OW 257
56880: PUSH
56881: LD_INT 17
56883: EQUAL
56884: IFFALSE 56905
// points := [ 100 , 50 , 75 ] ;
56886: LD_ADDR_VAR 0 9
56890: PUSH
56891: LD_INT 100
56893: PUSH
56894: LD_INT 50
56896: PUSH
56897: LD_INT 75
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56905: LD_VAR 0 6
56909: PPUSH
56910: CALL_OW 257
56914: PUSH
56915: LD_INT 15
56917: EQUAL
56918: IFFALSE 56939
// points := [ 10 , 5 , 3 ] ;
56920: LD_ADDR_VAR 0 9
56924: PUSH
56925: LD_INT 10
56927: PUSH
56928: LD_INT 5
56930: PUSH
56931: LD_INT 3
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56939: LD_VAR 0 6
56943: PPUSH
56944: CALL_OW 257
56948: PUSH
56949: LD_INT 14
56951: EQUAL
56952: IFFALSE 56973
// points := [ 10 , 0 , 0 ] ;
56954: LD_ADDR_VAR 0 9
56958: PUSH
56959: LD_INT 10
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56973: LD_VAR 0 6
56977: PPUSH
56978: CALL_OW 257
56982: PUSH
56983: LD_INT 11
56985: EQUAL
56986: IFFALSE 57007
// points := [ 30 , 10 , 5 ] ;
56988: LD_ADDR_VAR 0 9
56992: PUSH
56993: LD_INT 30
56995: PUSH
56996: LD_INT 10
56998: PUSH
56999: LD_INT 5
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: LIST
57006: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
57007: LD_VAR 0 1
57011: PPUSH
57012: LD_INT 5
57014: PPUSH
57015: CALL_OW 321
57019: PUSH
57020: LD_INT 2
57022: EQUAL
57023: IFFALSE 57040
// bpoints := bpoints * 1.8 ;
57025: LD_ADDR_VAR 0 10
57029: PUSH
57030: LD_VAR 0 10
57034: PUSH
57035: LD_REAL  1.80000000000000E+0000
57038: MUL
57039: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
57040: LD_VAR 0 6
57044: PPUSH
57045: CALL_OW 257
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: LD_INT 4
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: IN
57068: PUSH
57069: LD_VAR 0 1
57073: PPUSH
57074: LD_INT 51
57076: PPUSH
57077: CALL_OW 321
57081: PUSH
57082: LD_INT 2
57084: EQUAL
57085: AND
57086: IFFALSE 57103
// bpoints := bpoints * 1.2 ;
57088: LD_ADDR_VAR 0 10
57092: PUSH
57093: LD_VAR 0 10
57097: PUSH
57098: LD_REAL  1.20000000000000E+0000
57101: MUL
57102: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
57103: LD_VAR 0 6
57107: PPUSH
57108: CALL_OW 257
57112: PUSH
57113: LD_INT 5
57115: PUSH
57116: LD_INT 7
57118: PUSH
57119: LD_INT 9
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: IN
57127: PUSH
57128: LD_VAR 0 1
57132: PPUSH
57133: LD_INT 52
57135: PPUSH
57136: CALL_OW 321
57140: PUSH
57141: LD_INT 2
57143: EQUAL
57144: AND
57145: IFFALSE 57162
// bpoints := bpoints * 1.5 ;
57147: LD_ADDR_VAR 0 10
57151: PUSH
57152: LD_VAR 0 10
57156: PUSH
57157: LD_REAL  1.50000000000000E+0000
57160: MUL
57161: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
57162: LD_VAR 0 1
57166: PPUSH
57167: LD_INT 66
57169: PPUSH
57170: CALL_OW 321
57174: PUSH
57175: LD_INT 2
57177: EQUAL
57178: IFFALSE 57195
// bpoints := bpoints * 1.1 ;
57180: LD_ADDR_VAR 0 10
57184: PUSH
57185: LD_VAR 0 10
57189: PUSH
57190: LD_REAL  1.10000000000000E+0000
57193: MUL
57194: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
57195: LD_ADDR_VAR 0 10
57199: PUSH
57200: LD_VAR 0 10
57204: PUSH
57205: LD_VAR 0 6
57209: PPUSH
57210: LD_INT 1
57212: PPUSH
57213: CALL_OW 259
57217: PUSH
57218: LD_REAL  1.15000000000000E+0000
57221: MUL
57222: MUL
57223: ST_TO_ADDR
// end ; unit_vehicle :
57224: GO 58048
57226: LD_INT 2
57228: DOUBLE
57229: EQUAL
57230: IFTRUE 57234
57232: GO 58036
57234: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
57235: LD_VAR 0 6
57239: PPUSH
57240: CALL_OW 264
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 42
57250: PUSH
57251: LD_INT 24
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: LIST
57258: IN
57259: IFFALSE 57280
// points := [ 25 , 5 , 3 ] ;
57261: LD_ADDR_VAR 0 9
57265: PUSH
57266: LD_INT 25
57268: PUSH
57269: LD_INT 5
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
57280: LD_VAR 0 6
57284: PPUSH
57285: CALL_OW 264
57289: PUSH
57290: LD_INT 4
57292: PUSH
57293: LD_INT 43
57295: PUSH
57296: LD_INT 25
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: LIST
57303: IN
57304: IFFALSE 57325
// points := [ 40 , 15 , 5 ] ;
57306: LD_ADDR_VAR 0 9
57310: PUSH
57311: LD_INT 40
57313: PUSH
57314: LD_INT 15
57316: PUSH
57317: LD_INT 5
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
57325: LD_VAR 0 6
57329: PPUSH
57330: CALL_OW 264
57334: PUSH
57335: LD_INT 3
57337: PUSH
57338: LD_INT 23
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: IN
57345: IFFALSE 57366
// points := [ 7 , 25 , 8 ] ;
57347: LD_ADDR_VAR 0 9
57351: PUSH
57352: LD_INT 7
57354: PUSH
57355: LD_INT 25
57357: PUSH
57358: LD_INT 8
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
57366: LD_VAR 0 6
57370: PPUSH
57371: CALL_OW 264
57375: PUSH
57376: LD_INT 5
57378: PUSH
57379: LD_INT 27
57381: PUSH
57382: LD_INT 44
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: IN
57390: IFFALSE 57411
// points := [ 14 , 50 , 16 ] ;
57392: LD_ADDR_VAR 0 9
57396: PUSH
57397: LD_INT 14
57399: PUSH
57400: LD_INT 50
57402: PUSH
57403: LD_INT 16
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
57411: LD_VAR 0 6
57415: PPUSH
57416: CALL_OW 264
57420: PUSH
57421: LD_INT 6
57423: PUSH
57424: LD_INT 46
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: IN
57431: IFFALSE 57452
// points := [ 32 , 120 , 70 ] ;
57433: LD_ADDR_VAR 0 9
57437: PUSH
57438: LD_INT 32
57440: PUSH
57441: LD_INT 120
57443: PUSH
57444: LD_INT 70
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
57452: LD_VAR 0 6
57456: PPUSH
57457: CALL_OW 264
57461: PUSH
57462: LD_INT 7
57464: PUSH
57465: LD_INT 28
57467: PUSH
57468: LD_INT 45
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: LIST
57475: IN
57476: IFFALSE 57497
// points := [ 35 , 20 , 45 ] ;
57478: LD_ADDR_VAR 0 9
57482: PUSH
57483: LD_INT 35
57485: PUSH
57486: LD_INT 20
57488: PUSH
57489: LD_INT 45
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57497: LD_VAR 0 6
57501: PPUSH
57502: CALL_OW 264
57506: PUSH
57507: LD_INT 47
57509: PUSH
57510: EMPTY
57511: LIST
57512: IN
57513: IFFALSE 57534
// points := [ 67 , 45 , 75 ] ;
57515: LD_ADDR_VAR 0 9
57519: PUSH
57520: LD_INT 67
57522: PUSH
57523: LD_INT 45
57525: PUSH
57526: LD_INT 75
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57534: LD_VAR 0 6
57538: PPUSH
57539: CALL_OW 264
57543: PUSH
57544: LD_INT 26
57546: PUSH
57547: EMPTY
57548: LIST
57549: IN
57550: IFFALSE 57571
// points := [ 120 , 30 , 80 ] ;
57552: LD_ADDR_VAR 0 9
57556: PUSH
57557: LD_INT 120
57559: PUSH
57560: LD_INT 30
57562: PUSH
57563: LD_INT 80
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57571: LD_VAR 0 6
57575: PPUSH
57576: CALL_OW 264
57580: PUSH
57581: LD_INT 22
57583: PUSH
57584: EMPTY
57585: LIST
57586: IN
57587: IFFALSE 57608
// points := [ 40 , 1 , 1 ] ;
57589: LD_ADDR_VAR 0 9
57593: PUSH
57594: LD_INT 40
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: LIST
57607: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57608: LD_VAR 0 6
57612: PPUSH
57613: CALL_OW 264
57617: PUSH
57618: LD_INT 29
57620: PUSH
57621: EMPTY
57622: LIST
57623: IN
57624: IFFALSE 57645
// points := [ 70 , 200 , 400 ] ;
57626: LD_ADDR_VAR 0 9
57630: PUSH
57631: LD_INT 70
57633: PUSH
57634: LD_INT 200
57636: PUSH
57637: LD_INT 400
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: LIST
57644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57645: LD_VAR 0 6
57649: PPUSH
57650: CALL_OW 264
57654: PUSH
57655: LD_INT 14
57657: PUSH
57658: LD_INT 53
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: IN
57665: IFFALSE 57686
// points := [ 40 , 10 , 20 ] ;
57667: LD_ADDR_VAR 0 9
57671: PUSH
57672: LD_INT 40
57674: PUSH
57675: LD_INT 10
57677: PUSH
57678: LD_INT 20
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: LIST
57685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57686: LD_VAR 0 6
57690: PPUSH
57691: CALL_OW 264
57695: PUSH
57696: LD_INT 9
57698: PUSH
57699: EMPTY
57700: LIST
57701: IN
57702: IFFALSE 57723
// points := [ 5 , 70 , 20 ] ;
57704: LD_ADDR_VAR 0 9
57708: PUSH
57709: LD_INT 5
57711: PUSH
57712: LD_INT 70
57714: PUSH
57715: LD_INT 20
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57723: LD_VAR 0 6
57727: PPUSH
57728: CALL_OW 264
57732: PUSH
57733: LD_INT 10
57735: PUSH
57736: EMPTY
57737: LIST
57738: IN
57739: IFFALSE 57760
// points := [ 35 , 110 , 70 ] ;
57741: LD_ADDR_VAR 0 9
57745: PUSH
57746: LD_INT 35
57748: PUSH
57749: LD_INT 110
57751: PUSH
57752: LD_INT 70
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: LIST
57759: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57760: LD_VAR 0 6
57764: PPUSH
57765: CALL_OW 265
57769: PUSH
57770: LD_INT 25
57772: EQUAL
57773: IFFALSE 57794
// points := [ 80 , 65 , 100 ] ;
57775: LD_ADDR_VAR 0 9
57779: PUSH
57780: LD_INT 80
57782: PUSH
57783: LD_INT 65
57785: PUSH
57786: LD_INT 100
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57794: LD_VAR 0 6
57798: PPUSH
57799: CALL_OW 263
57803: PUSH
57804: LD_INT 1
57806: EQUAL
57807: IFFALSE 57842
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57809: LD_ADDR_VAR 0 10
57813: PUSH
57814: LD_VAR 0 10
57818: PUSH
57819: LD_VAR 0 6
57823: PPUSH
57824: CALL_OW 311
57828: PPUSH
57829: LD_INT 3
57831: PPUSH
57832: CALL_OW 259
57836: PUSH
57837: LD_INT 4
57839: MUL
57840: MUL
57841: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57842: LD_VAR 0 6
57846: PPUSH
57847: CALL_OW 263
57851: PUSH
57852: LD_INT 2
57854: EQUAL
57855: IFFALSE 57906
// begin j := IsControledBy ( i ) ;
57857: LD_ADDR_VAR 0 7
57861: PUSH
57862: LD_VAR 0 6
57866: PPUSH
57867: CALL_OW 312
57871: ST_TO_ADDR
// if j then
57872: LD_VAR 0 7
57876: IFFALSE 57906
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57878: LD_ADDR_VAR 0 10
57882: PUSH
57883: LD_VAR 0 10
57887: PUSH
57888: LD_VAR 0 7
57892: PPUSH
57893: LD_INT 3
57895: PPUSH
57896: CALL_OW 259
57900: PUSH
57901: LD_INT 3
57903: MUL
57904: MUL
57905: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57906: LD_VAR 0 6
57910: PPUSH
57911: CALL_OW 264
57915: PUSH
57916: LD_INT 5
57918: PUSH
57919: LD_INT 6
57921: PUSH
57922: LD_INT 46
57924: PUSH
57925: LD_INT 44
57927: PUSH
57928: LD_INT 47
57930: PUSH
57931: LD_INT 45
57933: PUSH
57934: LD_INT 28
57936: PUSH
57937: LD_INT 7
57939: PUSH
57940: LD_INT 27
57942: PUSH
57943: LD_INT 29
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: IN
57958: PUSH
57959: LD_VAR 0 1
57963: PPUSH
57964: LD_INT 52
57966: PPUSH
57967: CALL_OW 321
57971: PUSH
57972: LD_INT 2
57974: EQUAL
57975: AND
57976: IFFALSE 57993
// bpoints := bpoints * 1.2 ;
57978: LD_ADDR_VAR 0 10
57982: PUSH
57983: LD_VAR 0 10
57987: PUSH
57988: LD_REAL  1.20000000000000E+0000
57991: MUL
57992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57993: LD_VAR 0 6
57997: PPUSH
57998: CALL_OW 264
58002: PUSH
58003: LD_INT 6
58005: PUSH
58006: LD_INT 46
58008: PUSH
58009: LD_INT 47
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: IN
58017: IFFALSE 58034
// bpoints := bpoints * 1.2 ;
58019: LD_ADDR_VAR 0 10
58023: PUSH
58024: LD_VAR 0 10
58028: PUSH
58029: LD_REAL  1.20000000000000E+0000
58032: MUL
58033: ST_TO_ADDR
// end ; unit_building :
58034: GO 58048
58036: LD_INT 3
58038: DOUBLE
58039: EQUAL
58040: IFTRUE 58044
58042: GO 58047
58044: POP
// ; end ;
58045: GO 58048
58047: POP
// for j = 1 to 3 do
58048: LD_ADDR_VAR 0 7
58052: PUSH
58053: DOUBLE
58054: LD_INT 1
58056: DEC
58057: ST_TO_ADDR
58058: LD_INT 3
58060: PUSH
58061: FOR_TO
58062: IFFALSE 58115
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
58064: LD_ADDR_VAR 0 5
58068: PUSH
58069: LD_VAR 0 5
58073: PPUSH
58074: LD_VAR 0 7
58078: PPUSH
58079: LD_VAR 0 5
58083: PUSH
58084: LD_VAR 0 7
58088: ARRAY
58089: PUSH
58090: LD_VAR 0 9
58094: PUSH
58095: LD_VAR 0 7
58099: ARRAY
58100: PUSH
58101: LD_VAR 0 10
58105: MUL
58106: PLUS
58107: PPUSH
58108: CALL_OW 1
58112: ST_TO_ADDR
58113: GO 58061
58115: POP
58116: POP
// end ;
58117: GO 56600
58119: POP
58120: POP
// result := Replace ( result , 4 , tmp ) ;
58121: LD_ADDR_VAR 0 5
58125: PUSH
58126: LD_VAR 0 5
58130: PPUSH
58131: LD_INT 4
58133: PPUSH
58134: LD_VAR 0 8
58138: PPUSH
58139: CALL_OW 1
58143: ST_TO_ADDR
// end ;
58144: LD_VAR 0 5
58148: RET
// export function DangerAtRange ( unit , range ) ; begin
58149: LD_INT 0
58151: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
58152: LD_ADDR_VAR 0 3
58156: PUSH
58157: LD_VAR 0 1
58161: PPUSH
58162: CALL_OW 255
58166: PPUSH
58167: LD_VAR 0 1
58171: PPUSH
58172: CALL_OW 250
58176: PPUSH
58177: LD_VAR 0 1
58181: PPUSH
58182: CALL_OW 251
58186: PPUSH
58187: LD_VAR 0 2
58191: PPUSH
58192: CALL 56452 0 4
58196: ST_TO_ADDR
// end ;
58197: LD_VAR 0 3
58201: RET
// export function DangerInArea ( side , area ) ; begin
58202: LD_INT 0
58204: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
58205: LD_ADDR_VAR 0 3
58209: PUSH
58210: LD_VAR 0 2
58214: PPUSH
58215: LD_INT 81
58217: PUSH
58218: LD_VAR 0 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PPUSH
58227: CALL_OW 70
58231: ST_TO_ADDR
// end ;
58232: LD_VAR 0 3
58236: RET
// export function IsExtension ( b ) ; begin
58237: LD_INT 0
58239: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
58240: LD_ADDR_VAR 0 2
58244: PUSH
58245: LD_VAR 0 1
58249: PUSH
58250: LD_INT 23
58252: PUSH
58253: LD_INT 20
58255: PUSH
58256: LD_INT 22
58258: PUSH
58259: LD_INT 17
58261: PUSH
58262: LD_INT 24
58264: PUSH
58265: LD_INT 21
58267: PUSH
58268: LD_INT 19
58270: PUSH
58271: LD_INT 16
58273: PUSH
58274: LD_INT 25
58276: PUSH
58277: LD_INT 18
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: IN
58292: ST_TO_ADDR
// end ;
58293: LD_VAR 0 2
58297: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
58298: LD_INT 0
58300: PPUSH
58301: PPUSH
58302: PPUSH
// result := [ ] ;
58303: LD_ADDR_VAR 0 3
58307: PUSH
58308: EMPTY
58309: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
58310: LD_ADDR_VAR 0 4
58314: PUSH
58315: LD_VAR 0 2
58319: PPUSH
58320: LD_INT 21
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PPUSH
58330: CALL_OW 70
58334: ST_TO_ADDR
// if not tmp then
58335: LD_VAR 0 4
58339: NOT
58340: IFFALSE 58344
// exit ;
58342: GO 58402
// for i in tmp do
58344: LD_ADDR_VAR 0 5
58348: PUSH
58349: LD_VAR 0 4
58353: PUSH
58354: FOR_IN
58355: IFFALSE 58390
// if GetBase ( i ) <> base then
58357: LD_VAR 0 5
58361: PPUSH
58362: CALL_OW 274
58366: PUSH
58367: LD_VAR 0 1
58371: NONEQUAL
58372: IFFALSE 58388
// ComLinkToBase ( base , i ) ;
58374: LD_VAR 0 1
58378: PPUSH
58379: LD_VAR 0 5
58383: PPUSH
58384: CALL_OW 169
58388: GO 58354
58390: POP
58391: POP
// result := tmp ;
58392: LD_ADDR_VAR 0 3
58396: PUSH
58397: LD_VAR 0 4
58401: ST_TO_ADDR
// end ;
58402: LD_VAR 0 3
58406: RET
// export function ComComplete ( unit , b ) ; var i ; begin
58407: LD_INT 0
58409: PPUSH
58410: PPUSH
// if BuildingStatus ( b ) = bs_build then
58411: LD_VAR 0 2
58415: PPUSH
58416: CALL_OW 461
58420: PUSH
58421: LD_INT 1
58423: EQUAL
58424: IFFALSE 58484
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
58426: LD_VAR 0 1
58430: PPUSH
58431: LD_STRING h
58433: PUSH
58434: LD_VAR 0 2
58438: PPUSH
58439: CALL_OW 250
58443: PUSH
58444: LD_VAR 0 2
58448: PPUSH
58449: CALL_OW 251
58453: PUSH
58454: LD_VAR 0 2
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: PPUSH
58480: CALL_OW 446
// end ;
58484: LD_VAR 0 3
58488: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58489: LD_INT 0
58491: PPUSH
58492: PPUSH
58493: PPUSH
58494: PPUSH
58495: PPUSH
58496: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
58497: LD_VAR 0 1
58501: NOT
58502: PUSH
58503: LD_VAR 0 1
58507: PPUSH
58508: CALL_OW 263
58512: PUSH
58513: LD_INT 2
58515: EQUAL
58516: NOT
58517: OR
58518: IFFALSE 58522
// exit ;
58520: GO 58838
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58522: LD_ADDR_VAR 0 6
58526: PUSH
58527: LD_INT 22
58529: PUSH
58530: LD_VAR 0 1
58534: PPUSH
58535: CALL_OW 255
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: LD_INT 30
58549: PUSH
58550: LD_INT 36
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 34
58559: PUSH
58560: LD_INT 31
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PPUSH
58576: CALL_OW 69
58580: ST_TO_ADDR
// if not tmp then
58581: LD_VAR 0 6
58585: NOT
58586: IFFALSE 58590
// exit ;
58588: GO 58838
// result := [ ] ;
58590: LD_ADDR_VAR 0 2
58594: PUSH
58595: EMPTY
58596: ST_TO_ADDR
// for i in tmp do
58597: LD_ADDR_VAR 0 3
58601: PUSH
58602: LD_VAR 0 6
58606: PUSH
58607: FOR_IN
58608: IFFALSE 58679
// begin t := UnitsInside ( i ) ;
58610: LD_ADDR_VAR 0 4
58614: PUSH
58615: LD_VAR 0 3
58619: PPUSH
58620: CALL_OW 313
58624: ST_TO_ADDR
// if t then
58625: LD_VAR 0 4
58629: IFFALSE 58677
// for j in t do
58631: LD_ADDR_VAR 0 7
58635: PUSH
58636: LD_VAR 0 4
58640: PUSH
58641: FOR_IN
58642: IFFALSE 58675
// result := Insert ( result , result + 1 , j ) ;
58644: LD_ADDR_VAR 0 2
58648: PUSH
58649: LD_VAR 0 2
58653: PPUSH
58654: LD_VAR 0 2
58658: PUSH
58659: LD_INT 1
58661: PLUS
58662: PPUSH
58663: LD_VAR 0 7
58667: PPUSH
58668: CALL_OW 2
58672: ST_TO_ADDR
58673: GO 58641
58675: POP
58676: POP
// end ;
58677: GO 58607
58679: POP
58680: POP
// if not result then
58681: LD_VAR 0 2
58685: NOT
58686: IFFALSE 58690
// exit ;
58688: GO 58838
// mech := result [ 1 ] ;
58690: LD_ADDR_VAR 0 5
58694: PUSH
58695: LD_VAR 0 2
58699: PUSH
58700: LD_INT 1
58702: ARRAY
58703: ST_TO_ADDR
// if result > 1 then
58704: LD_VAR 0 2
58708: PUSH
58709: LD_INT 1
58711: GREATER
58712: IFFALSE 58824
// for i = 2 to result do
58714: LD_ADDR_VAR 0 3
58718: PUSH
58719: DOUBLE
58720: LD_INT 2
58722: DEC
58723: ST_TO_ADDR
58724: LD_VAR 0 2
58728: PUSH
58729: FOR_TO
58730: IFFALSE 58822
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58732: LD_ADDR_VAR 0 4
58736: PUSH
58737: LD_VAR 0 2
58741: PUSH
58742: LD_VAR 0 3
58746: ARRAY
58747: PPUSH
58748: LD_INT 3
58750: PPUSH
58751: CALL_OW 259
58755: PUSH
58756: LD_VAR 0 2
58760: PUSH
58761: LD_VAR 0 3
58765: ARRAY
58766: PPUSH
58767: CALL_OW 432
58771: MINUS
58772: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58773: LD_VAR 0 4
58777: PUSH
58778: LD_VAR 0 5
58782: PPUSH
58783: LD_INT 3
58785: PPUSH
58786: CALL_OW 259
58790: PUSH
58791: LD_VAR 0 5
58795: PPUSH
58796: CALL_OW 432
58800: MINUS
58801: GREATEREQUAL
58802: IFFALSE 58820
// mech := result [ i ] ;
58804: LD_ADDR_VAR 0 5
58808: PUSH
58809: LD_VAR 0 2
58813: PUSH
58814: LD_VAR 0 3
58818: ARRAY
58819: ST_TO_ADDR
// end ;
58820: GO 58729
58822: POP
58823: POP
// ComLinkTo ( vehicle , mech ) ;
58824: LD_VAR 0 1
58828: PPUSH
58829: LD_VAR 0 5
58833: PPUSH
58834: CALL_OW 135
// end ;
58838: LD_VAR 0 2
58842: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58843: LD_INT 0
58845: PPUSH
58846: PPUSH
58847: PPUSH
58848: PPUSH
58849: PPUSH
58850: PPUSH
58851: PPUSH
58852: PPUSH
58853: PPUSH
58854: PPUSH
58855: PPUSH
58856: PPUSH
58857: PPUSH
// result := [ ] ;
58858: LD_ADDR_VAR 0 7
58862: PUSH
58863: EMPTY
58864: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58865: LD_VAR 0 1
58869: PPUSH
58870: CALL_OW 266
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: IN
58885: NOT
58886: IFFALSE 58890
// exit ;
58888: GO 60521
// if name then
58890: LD_VAR 0 3
58894: IFFALSE 58910
// SetBName ( base_dep , name ) ;
58896: LD_VAR 0 1
58900: PPUSH
58901: LD_VAR 0 3
58905: PPUSH
58906: CALL_OW 500
// base := GetBase ( base_dep ) ;
58910: LD_ADDR_VAR 0 15
58914: PUSH
58915: LD_VAR 0 1
58919: PPUSH
58920: CALL_OW 274
58924: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58925: LD_ADDR_VAR 0 16
58929: PUSH
58930: LD_VAR 0 1
58934: PPUSH
58935: CALL_OW 255
58939: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58940: LD_ADDR_VAR 0 17
58944: PUSH
58945: LD_VAR 0 1
58949: PPUSH
58950: CALL_OW 248
58954: ST_TO_ADDR
// if sources then
58955: LD_VAR 0 5
58959: IFFALSE 59006
// for i = 1 to 3 do
58961: LD_ADDR_VAR 0 8
58965: PUSH
58966: DOUBLE
58967: LD_INT 1
58969: DEC
58970: ST_TO_ADDR
58971: LD_INT 3
58973: PUSH
58974: FOR_TO
58975: IFFALSE 59004
// AddResourceType ( base , i , sources [ i ] ) ;
58977: LD_VAR 0 15
58981: PPUSH
58982: LD_VAR 0 8
58986: PPUSH
58987: LD_VAR 0 5
58991: PUSH
58992: LD_VAR 0 8
58996: ARRAY
58997: PPUSH
58998: CALL_OW 276
59002: GO 58974
59004: POP
59005: POP
// buildings := GetBaseBuildings ( base , area ) ;
59006: LD_ADDR_VAR 0 18
59010: PUSH
59011: LD_VAR 0 15
59015: PPUSH
59016: LD_VAR 0 2
59020: PPUSH
59021: CALL 58298 0 2
59025: ST_TO_ADDR
// InitHc ;
59026: CALL_OW 19
// InitUc ;
59030: CALL_OW 18
// uc_side := side ;
59034: LD_ADDR_OWVAR 20
59038: PUSH
59039: LD_VAR 0 16
59043: ST_TO_ADDR
// uc_nation := nation ;
59044: LD_ADDR_OWVAR 21
59048: PUSH
59049: LD_VAR 0 17
59053: ST_TO_ADDR
// if buildings then
59054: LD_VAR 0 18
59058: IFFALSE 60380
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
59060: LD_ADDR_VAR 0 19
59064: PUSH
59065: LD_VAR 0 18
59069: PPUSH
59070: LD_INT 2
59072: PUSH
59073: LD_INT 30
59075: PUSH
59076: LD_INT 29
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 30
59085: PUSH
59086: LD_INT 30
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: PPUSH
59098: CALL_OW 72
59102: ST_TO_ADDR
// if tmp then
59103: LD_VAR 0 19
59107: IFFALSE 59155
// for i in tmp do
59109: LD_ADDR_VAR 0 8
59113: PUSH
59114: LD_VAR 0 19
59118: PUSH
59119: FOR_IN
59120: IFFALSE 59153
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
59122: LD_VAR 0 8
59126: PPUSH
59127: CALL_OW 250
59131: PPUSH
59132: LD_VAR 0 8
59136: PPUSH
59137: CALL_OW 251
59141: PPUSH
59142: LD_VAR 0 16
59146: PPUSH
59147: CALL_OW 441
59151: GO 59119
59153: POP
59154: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
59155: LD_VAR 0 18
59159: PPUSH
59160: LD_INT 2
59162: PUSH
59163: LD_INT 30
59165: PUSH
59166: LD_INT 32
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 30
59175: PUSH
59176: LD_INT 33
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: PPUSH
59188: CALL_OW 72
59192: IFFALSE 59280
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
59194: LD_ADDR_VAR 0 8
59198: PUSH
59199: LD_VAR 0 18
59203: PPUSH
59204: LD_INT 2
59206: PUSH
59207: LD_INT 30
59209: PUSH
59210: LD_INT 32
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 30
59219: PUSH
59220: LD_INT 33
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: PPUSH
59232: CALL_OW 72
59236: PUSH
59237: FOR_IN
59238: IFFALSE 59278
// begin if not GetBWeapon ( i ) then
59240: LD_VAR 0 8
59244: PPUSH
59245: CALL_OW 269
59249: NOT
59250: IFFALSE 59276
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
59252: LD_VAR 0 8
59256: PPUSH
59257: LD_VAR 0 8
59261: PPUSH
59262: LD_VAR 0 2
59266: PPUSH
59267: CALL 60526 0 2
59271: PPUSH
59272: CALL_OW 431
// end ;
59276: GO 59237
59278: POP
59279: POP
// end ; for i = 1 to personel do
59280: LD_ADDR_VAR 0 8
59284: PUSH
59285: DOUBLE
59286: LD_INT 1
59288: DEC
59289: ST_TO_ADDR
59290: LD_VAR 0 6
59294: PUSH
59295: FOR_TO
59296: IFFALSE 60360
// begin if i > 4 then
59298: LD_VAR 0 8
59302: PUSH
59303: LD_INT 4
59305: GREATER
59306: IFFALSE 59310
// break ;
59308: GO 60360
// case i of 1 :
59310: LD_VAR 0 8
59314: PUSH
59315: LD_INT 1
59317: DOUBLE
59318: EQUAL
59319: IFTRUE 59323
59321: GO 59403
59323: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
59324: LD_ADDR_VAR 0 12
59328: PUSH
59329: LD_VAR 0 18
59333: PPUSH
59334: LD_INT 22
59336: PUSH
59337: LD_VAR 0 16
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 58
59348: PUSH
59349: EMPTY
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: LD_INT 30
59357: PUSH
59358: LD_INT 32
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 30
59367: PUSH
59368: LD_INT 4
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 30
59377: PUSH
59378: LD_INT 5
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: PPUSH
59396: CALL_OW 72
59400: ST_TO_ADDR
59401: GO 59625
59403: LD_INT 2
59405: DOUBLE
59406: EQUAL
59407: IFTRUE 59411
59409: GO 59473
59411: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
59412: LD_ADDR_VAR 0 12
59416: PUSH
59417: LD_VAR 0 18
59421: PPUSH
59422: LD_INT 22
59424: PUSH
59425: LD_VAR 0 16
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: PUSH
59437: LD_INT 30
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 30
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: LIST
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PPUSH
59466: CALL_OW 72
59470: ST_TO_ADDR
59471: GO 59625
59473: LD_INT 3
59475: DOUBLE
59476: EQUAL
59477: IFTRUE 59481
59479: GO 59543
59481: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59482: LD_ADDR_VAR 0 12
59486: PUSH
59487: LD_VAR 0 18
59491: PPUSH
59492: LD_INT 22
59494: PUSH
59495: LD_VAR 0 16
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: LD_INT 30
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 30
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PPUSH
59536: CALL_OW 72
59540: ST_TO_ADDR
59541: GO 59625
59543: LD_INT 4
59545: DOUBLE
59546: EQUAL
59547: IFTRUE 59551
59549: GO 59624
59551: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59552: LD_ADDR_VAR 0 12
59556: PUSH
59557: LD_VAR 0 18
59561: PPUSH
59562: LD_INT 22
59564: PUSH
59565: LD_VAR 0 16
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: LD_INT 30
59579: PUSH
59580: LD_INT 6
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 30
59589: PUSH
59590: LD_INT 7
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 30
59599: PUSH
59600: LD_INT 8
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PPUSH
59617: CALL_OW 72
59621: ST_TO_ADDR
59622: GO 59625
59624: POP
// if i = 1 then
59625: LD_VAR 0 8
59629: PUSH
59630: LD_INT 1
59632: EQUAL
59633: IFFALSE 59744
// begin tmp := [ ] ;
59635: LD_ADDR_VAR 0 19
59639: PUSH
59640: EMPTY
59641: ST_TO_ADDR
// for j in f do
59642: LD_ADDR_VAR 0 9
59646: PUSH
59647: LD_VAR 0 12
59651: PUSH
59652: FOR_IN
59653: IFFALSE 59726
// if GetBType ( j ) = b_bunker then
59655: LD_VAR 0 9
59659: PPUSH
59660: CALL_OW 266
59664: PUSH
59665: LD_INT 32
59667: EQUAL
59668: IFFALSE 59695
// tmp := Insert ( tmp , 1 , j ) else
59670: LD_ADDR_VAR 0 19
59674: PUSH
59675: LD_VAR 0 19
59679: PPUSH
59680: LD_INT 1
59682: PPUSH
59683: LD_VAR 0 9
59687: PPUSH
59688: CALL_OW 2
59692: ST_TO_ADDR
59693: GO 59724
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59695: LD_ADDR_VAR 0 19
59699: PUSH
59700: LD_VAR 0 19
59704: PPUSH
59705: LD_VAR 0 19
59709: PUSH
59710: LD_INT 1
59712: PLUS
59713: PPUSH
59714: LD_VAR 0 9
59718: PPUSH
59719: CALL_OW 2
59723: ST_TO_ADDR
59724: GO 59652
59726: POP
59727: POP
// if tmp then
59728: LD_VAR 0 19
59732: IFFALSE 59744
// f := tmp ;
59734: LD_ADDR_VAR 0 12
59738: PUSH
59739: LD_VAR 0 19
59743: ST_TO_ADDR
// end ; x := personel [ i ] ;
59744: LD_ADDR_VAR 0 13
59748: PUSH
59749: LD_VAR 0 6
59753: PUSH
59754: LD_VAR 0 8
59758: ARRAY
59759: ST_TO_ADDR
// if x = - 1 then
59760: LD_VAR 0 13
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: EQUAL
59769: IFFALSE 59978
// begin for j in f do
59771: LD_ADDR_VAR 0 9
59775: PUSH
59776: LD_VAR 0 12
59780: PUSH
59781: FOR_IN
59782: IFFALSE 59974
// repeat InitHc ;
59784: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59788: LD_VAR 0 9
59792: PPUSH
59793: CALL_OW 266
59797: PUSH
59798: LD_INT 5
59800: EQUAL
59801: IFFALSE 59871
// begin if UnitsInside ( j ) < 3 then
59803: LD_VAR 0 9
59807: PPUSH
59808: CALL_OW 313
59812: PUSH
59813: LD_INT 3
59815: LESS
59816: IFFALSE 59852
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59818: LD_INT 0
59820: PPUSH
59821: LD_INT 5
59823: PUSH
59824: LD_INT 8
59826: PUSH
59827: LD_INT 9
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: PUSH
59835: LD_VAR 0 17
59839: ARRAY
59840: PPUSH
59841: LD_VAR 0 4
59845: PPUSH
59846: CALL_OW 380
59850: GO 59869
// PrepareHuman ( false , i , skill ) ;
59852: LD_INT 0
59854: PPUSH
59855: LD_VAR 0 8
59859: PPUSH
59860: LD_VAR 0 4
59864: PPUSH
59865: CALL_OW 380
// end else
59869: GO 59888
// PrepareHuman ( false , i , skill ) ;
59871: LD_INT 0
59873: PPUSH
59874: LD_VAR 0 8
59878: PPUSH
59879: LD_VAR 0 4
59883: PPUSH
59884: CALL_OW 380
// un := CreateHuman ;
59888: LD_ADDR_VAR 0 14
59892: PUSH
59893: CALL_OW 44
59897: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59898: LD_ADDR_VAR 0 7
59902: PUSH
59903: LD_VAR 0 7
59907: PPUSH
59908: LD_INT 1
59910: PPUSH
59911: LD_VAR 0 14
59915: PPUSH
59916: CALL_OW 2
59920: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59921: LD_VAR 0 14
59925: PPUSH
59926: LD_VAR 0 9
59930: PPUSH
59931: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59935: LD_VAR 0 9
59939: PPUSH
59940: CALL_OW 313
59944: PUSH
59945: LD_INT 6
59947: EQUAL
59948: PUSH
59949: LD_VAR 0 9
59953: PPUSH
59954: CALL_OW 266
59958: PUSH
59959: LD_INT 32
59961: PUSH
59962: LD_INT 31
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: IN
59969: OR
59970: IFFALSE 59784
59972: GO 59781
59974: POP
59975: POP
// end else
59976: GO 60358
// for j = 1 to x do
59978: LD_ADDR_VAR 0 9
59982: PUSH
59983: DOUBLE
59984: LD_INT 1
59986: DEC
59987: ST_TO_ADDR
59988: LD_VAR 0 13
59992: PUSH
59993: FOR_TO
59994: IFFALSE 60356
// begin InitHc ;
59996: CALL_OW 19
// if not f then
60000: LD_VAR 0 12
60004: NOT
60005: IFFALSE 60094
// begin PrepareHuman ( false , i , skill ) ;
60007: LD_INT 0
60009: PPUSH
60010: LD_VAR 0 8
60014: PPUSH
60015: LD_VAR 0 4
60019: PPUSH
60020: CALL_OW 380
// un := CreateHuman ;
60024: LD_ADDR_VAR 0 14
60028: PUSH
60029: CALL_OW 44
60033: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60034: LD_ADDR_VAR 0 7
60038: PUSH
60039: LD_VAR 0 7
60043: PPUSH
60044: LD_INT 1
60046: PPUSH
60047: LD_VAR 0 14
60051: PPUSH
60052: CALL_OW 2
60056: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60057: LD_VAR 0 14
60061: PPUSH
60062: LD_VAR 0 1
60066: PPUSH
60067: CALL_OW 250
60071: PPUSH
60072: LD_VAR 0 1
60076: PPUSH
60077: CALL_OW 251
60081: PPUSH
60082: LD_INT 10
60084: PPUSH
60085: LD_INT 0
60087: PPUSH
60088: CALL_OW 50
// continue ;
60092: GO 59993
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
60094: LD_VAR 0 12
60098: PUSH
60099: LD_INT 1
60101: ARRAY
60102: PPUSH
60103: CALL_OW 313
60107: PUSH
60108: LD_VAR 0 12
60112: PUSH
60113: LD_INT 1
60115: ARRAY
60116: PPUSH
60117: CALL_OW 266
60121: PUSH
60122: LD_INT 32
60124: PUSH
60125: LD_INT 31
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: IN
60132: AND
60133: PUSH
60134: LD_VAR 0 12
60138: PUSH
60139: LD_INT 1
60141: ARRAY
60142: PPUSH
60143: CALL_OW 313
60147: PUSH
60148: LD_INT 6
60150: EQUAL
60151: OR
60152: IFFALSE 60172
// f := Delete ( f , 1 ) ;
60154: LD_ADDR_VAR 0 12
60158: PUSH
60159: LD_VAR 0 12
60163: PPUSH
60164: LD_INT 1
60166: PPUSH
60167: CALL_OW 3
60171: ST_TO_ADDR
// if not f then
60172: LD_VAR 0 12
60176: NOT
60177: IFFALSE 60195
// begin x := x + 2 ;
60179: LD_ADDR_VAR 0 13
60183: PUSH
60184: LD_VAR 0 13
60188: PUSH
60189: LD_INT 2
60191: PLUS
60192: ST_TO_ADDR
// continue ;
60193: GO 59993
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
60195: LD_VAR 0 12
60199: PUSH
60200: LD_INT 1
60202: ARRAY
60203: PPUSH
60204: CALL_OW 266
60208: PUSH
60209: LD_INT 5
60211: EQUAL
60212: IFFALSE 60286
// begin if UnitsInside ( f [ 1 ] ) < 3 then
60214: LD_VAR 0 12
60218: PUSH
60219: LD_INT 1
60221: ARRAY
60222: PPUSH
60223: CALL_OW 313
60227: PUSH
60228: LD_INT 3
60230: LESS
60231: IFFALSE 60267
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
60233: LD_INT 0
60235: PPUSH
60236: LD_INT 5
60238: PUSH
60239: LD_INT 8
60241: PUSH
60242: LD_INT 9
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: PUSH
60250: LD_VAR 0 17
60254: ARRAY
60255: PPUSH
60256: LD_VAR 0 4
60260: PPUSH
60261: CALL_OW 380
60265: GO 60284
// PrepareHuman ( false , i , skill ) ;
60267: LD_INT 0
60269: PPUSH
60270: LD_VAR 0 8
60274: PPUSH
60275: LD_VAR 0 4
60279: PPUSH
60280: CALL_OW 380
// end else
60284: GO 60303
// PrepareHuman ( false , i , skill ) ;
60286: LD_INT 0
60288: PPUSH
60289: LD_VAR 0 8
60293: PPUSH
60294: LD_VAR 0 4
60298: PPUSH
60299: CALL_OW 380
// un := CreateHuman ;
60303: LD_ADDR_VAR 0 14
60307: PUSH
60308: CALL_OW 44
60312: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60313: LD_ADDR_VAR 0 7
60317: PUSH
60318: LD_VAR 0 7
60322: PPUSH
60323: LD_INT 1
60325: PPUSH
60326: LD_VAR 0 14
60330: PPUSH
60331: CALL_OW 2
60335: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
60336: LD_VAR 0 14
60340: PPUSH
60341: LD_VAR 0 12
60345: PUSH
60346: LD_INT 1
60348: ARRAY
60349: PPUSH
60350: CALL_OW 52
// end ;
60354: GO 59993
60356: POP
60357: POP
// end ;
60358: GO 59295
60360: POP
60361: POP
// result := result ^ buildings ;
60362: LD_ADDR_VAR 0 7
60366: PUSH
60367: LD_VAR 0 7
60371: PUSH
60372: LD_VAR 0 18
60376: ADD
60377: ST_TO_ADDR
// end else
60378: GO 60521
// begin for i = 1 to personel do
60380: LD_ADDR_VAR 0 8
60384: PUSH
60385: DOUBLE
60386: LD_INT 1
60388: DEC
60389: ST_TO_ADDR
60390: LD_VAR 0 6
60394: PUSH
60395: FOR_TO
60396: IFFALSE 60519
// begin if i > 4 then
60398: LD_VAR 0 8
60402: PUSH
60403: LD_INT 4
60405: GREATER
60406: IFFALSE 60410
// break ;
60408: GO 60519
// x := personel [ i ] ;
60410: LD_ADDR_VAR 0 13
60414: PUSH
60415: LD_VAR 0 6
60419: PUSH
60420: LD_VAR 0 8
60424: ARRAY
60425: ST_TO_ADDR
// if x = - 1 then
60426: LD_VAR 0 13
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: EQUAL
60435: IFFALSE 60439
// continue ;
60437: GO 60395
// PrepareHuman ( false , i , skill ) ;
60439: LD_INT 0
60441: PPUSH
60442: LD_VAR 0 8
60446: PPUSH
60447: LD_VAR 0 4
60451: PPUSH
60452: CALL_OW 380
// un := CreateHuman ;
60456: LD_ADDR_VAR 0 14
60460: PUSH
60461: CALL_OW 44
60465: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60466: LD_VAR 0 14
60470: PPUSH
60471: LD_VAR 0 1
60475: PPUSH
60476: CALL_OW 250
60480: PPUSH
60481: LD_VAR 0 1
60485: PPUSH
60486: CALL_OW 251
60490: PPUSH
60491: LD_INT 10
60493: PPUSH
60494: LD_INT 0
60496: PPUSH
60497: CALL_OW 50
// result := result ^ un ;
60501: LD_ADDR_VAR 0 7
60505: PUSH
60506: LD_VAR 0 7
60510: PUSH
60511: LD_VAR 0 14
60515: ADD
60516: ST_TO_ADDR
// end ;
60517: GO 60395
60519: POP
60520: POP
// end ; end ;
60521: LD_VAR 0 7
60525: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60526: LD_INT 0
60528: PPUSH
60529: PPUSH
60530: PPUSH
60531: PPUSH
60532: PPUSH
60533: PPUSH
60534: PPUSH
60535: PPUSH
60536: PPUSH
60537: PPUSH
60538: PPUSH
60539: PPUSH
60540: PPUSH
60541: PPUSH
60542: PPUSH
60543: PPUSH
// result := false ;
60544: LD_ADDR_VAR 0 3
60548: PUSH
60549: LD_INT 0
60551: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60552: LD_VAR 0 1
60556: NOT
60557: PUSH
60558: LD_VAR 0 1
60562: PPUSH
60563: CALL_OW 266
60567: PUSH
60568: LD_INT 32
60570: PUSH
60571: LD_INT 33
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: IN
60578: NOT
60579: OR
60580: IFFALSE 60584
// exit ;
60582: GO 61720
// nat := GetNation ( tower ) ;
60584: LD_ADDR_VAR 0 12
60588: PUSH
60589: LD_VAR 0 1
60593: PPUSH
60594: CALL_OW 248
60598: ST_TO_ADDR
// side := GetSide ( tower ) ;
60599: LD_ADDR_VAR 0 16
60603: PUSH
60604: LD_VAR 0 1
60608: PPUSH
60609: CALL_OW 255
60613: ST_TO_ADDR
// x := GetX ( tower ) ;
60614: LD_ADDR_VAR 0 10
60618: PUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 250
60628: ST_TO_ADDR
// y := GetY ( tower ) ;
60629: LD_ADDR_VAR 0 11
60633: PUSH
60634: LD_VAR 0 1
60638: PPUSH
60639: CALL_OW 251
60643: ST_TO_ADDR
// if not x or not y then
60644: LD_VAR 0 10
60648: NOT
60649: PUSH
60650: LD_VAR 0 11
60654: NOT
60655: OR
60656: IFFALSE 60660
// exit ;
60658: GO 61720
// weapon := 0 ;
60660: LD_ADDR_VAR 0 18
60664: PUSH
60665: LD_INT 0
60667: ST_TO_ADDR
// fac_list := [ ] ;
60668: LD_ADDR_VAR 0 17
60672: PUSH
60673: EMPTY
60674: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
60675: LD_ADDR_VAR 0 6
60679: PUSH
60680: LD_VAR 0 1
60684: PPUSH
60685: CALL_OW 274
60689: PPUSH
60690: LD_VAR 0 2
60694: PPUSH
60695: CALL 58298 0 2
60699: PPUSH
60700: LD_INT 30
60702: PUSH
60703: LD_INT 3
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PPUSH
60710: CALL_OW 72
60714: ST_TO_ADDR
// if not factories then
60715: LD_VAR 0 6
60719: NOT
60720: IFFALSE 60724
// exit ;
60722: GO 61720
// for i in factories do
60724: LD_ADDR_VAR 0 8
60728: PUSH
60729: LD_VAR 0 6
60733: PUSH
60734: FOR_IN
60735: IFFALSE 60760
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60737: LD_ADDR_VAR 0 17
60741: PUSH
60742: LD_VAR 0 17
60746: PUSH
60747: LD_VAR 0 8
60751: PPUSH
60752: CALL_OW 478
60756: UNION
60757: ST_TO_ADDR
60758: GO 60734
60760: POP
60761: POP
// if not fac_list then
60762: LD_VAR 0 17
60766: NOT
60767: IFFALSE 60771
// exit ;
60769: GO 61720
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60771: LD_ADDR_VAR 0 5
60775: PUSH
60776: LD_INT 4
60778: PUSH
60779: LD_INT 5
60781: PUSH
60782: LD_INT 9
60784: PUSH
60785: LD_INT 10
60787: PUSH
60788: LD_INT 6
60790: PUSH
60791: LD_INT 7
60793: PUSH
60794: LD_INT 11
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 27
60808: PUSH
60809: LD_INT 28
60811: PUSH
60812: LD_INT 26
60814: PUSH
60815: LD_INT 30
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 43
60826: PUSH
60827: LD_INT 44
60829: PUSH
60830: LD_INT 46
60832: PUSH
60833: LD_INT 45
60835: PUSH
60836: LD_INT 47
60838: PUSH
60839: LD_INT 49
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: PUSH
60855: LD_VAR 0 12
60859: ARRAY
60860: ST_TO_ADDR
// for i in list do
60861: LD_ADDR_VAR 0 8
60865: PUSH
60866: LD_VAR 0 5
60870: PUSH
60871: FOR_IN
60872: IFFALSE 60905
// if not i in fac_list then
60874: LD_VAR 0 8
60878: PUSH
60879: LD_VAR 0 17
60883: IN
60884: NOT
60885: IFFALSE 60903
// list := list diff i ;
60887: LD_ADDR_VAR 0 5
60891: PUSH
60892: LD_VAR 0 5
60896: PUSH
60897: LD_VAR 0 8
60901: DIFF
60902: ST_TO_ADDR
60903: GO 60871
60905: POP
60906: POP
// if not list then
60907: LD_VAR 0 5
60911: NOT
60912: IFFALSE 60916
// exit ;
60914: GO 61720
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60916: LD_VAR 0 12
60920: PUSH
60921: LD_INT 3
60923: EQUAL
60924: PUSH
60925: LD_INT 49
60927: PUSH
60928: LD_VAR 0 5
60932: IN
60933: AND
60934: PUSH
60935: LD_INT 31
60937: PPUSH
60938: LD_VAR 0 16
60942: PPUSH
60943: CALL_OW 321
60947: PUSH
60948: LD_INT 2
60950: EQUAL
60951: AND
60952: IFFALSE 61012
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60954: LD_INT 22
60956: PUSH
60957: LD_VAR 0 16
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 35
60968: PUSH
60969: LD_INT 49
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 91
60978: PUSH
60979: LD_VAR 0 1
60983: PUSH
60984: LD_INT 10
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: PPUSH
60997: CALL_OW 69
61001: NOT
61002: IFFALSE 61012
// weapon := ru_time_lapser ;
61004: LD_ADDR_VAR 0 18
61008: PUSH
61009: LD_INT 49
61011: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
61012: LD_VAR 0 12
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: IN
61027: PUSH
61028: LD_INT 11
61030: PUSH
61031: LD_VAR 0 5
61035: IN
61036: PUSH
61037: LD_INT 30
61039: PUSH
61040: LD_VAR 0 5
61044: IN
61045: OR
61046: AND
61047: PUSH
61048: LD_INT 6
61050: PPUSH
61051: LD_VAR 0 16
61055: PPUSH
61056: CALL_OW 321
61060: PUSH
61061: LD_INT 2
61063: EQUAL
61064: AND
61065: IFFALSE 61230
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
61067: LD_INT 22
61069: PUSH
61070: LD_VAR 0 16
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: LD_INT 35
61084: PUSH
61085: LD_INT 11
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 35
61094: PUSH
61095: LD_INT 30
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 91
61109: PUSH
61110: LD_VAR 0 1
61114: PUSH
61115: LD_INT 18
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: LIST
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: LIST
61127: PPUSH
61128: CALL_OW 69
61132: NOT
61133: PUSH
61134: LD_INT 22
61136: PUSH
61137: LD_VAR 0 16
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: LD_INT 30
61151: PUSH
61152: LD_INT 32
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 30
61161: PUSH
61162: LD_INT 33
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 91
61176: PUSH
61177: LD_VAR 0 1
61181: PUSH
61182: LD_INT 12
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: LIST
61194: PUSH
61195: EMPTY
61196: LIST
61197: PPUSH
61198: CALL_OW 69
61202: PUSH
61203: LD_INT 2
61205: GREATER
61206: AND
61207: IFFALSE 61230
// weapon := [ us_radar , ar_radar ] [ nat ] ;
61209: LD_ADDR_VAR 0 18
61213: PUSH
61214: LD_INT 11
61216: PUSH
61217: LD_INT 30
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_VAR 0 12
61228: ARRAY
61229: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
61230: LD_VAR 0 18
61234: NOT
61235: PUSH
61236: LD_INT 40
61238: PPUSH
61239: LD_VAR 0 16
61243: PPUSH
61244: CALL_OW 321
61248: PUSH
61249: LD_INT 2
61251: EQUAL
61252: AND
61253: PUSH
61254: LD_INT 7
61256: PUSH
61257: LD_VAR 0 5
61261: IN
61262: PUSH
61263: LD_INT 28
61265: PUSH
61266: LD_VAR 0 5
61270: IN
61271: OR
61272: PUSH
61273: LD_INT 45
61275: PUSH
61276: LD_VAR 0 5
61280: IN
61281: OR
61282: AND
61283: IFFALSE 61537
// begin hex := GetHexInfo ( x , y ) ;
61285: LD_ADDR_VAR 0 4
61289: PUSH
61290: LD_VAR 0 10
61294: PPUSH
61295: LD_VAR 0 11
61299: PPUSH
61300: CALL_OW 546
61304: ST_TO_ADDR
// if hex [ 1 ] then
61305: LD_VAR 0 4
61309: PUSH
61310: LD_INT 1
61312: ARRAY
61313: IFFALSE 61317
// exit ;
61315: GO 61720
// height := hex [ 2 ] ;
61317: LD_ADDR_VAR 0 15
61321: PUSH
61322: LD_VAR 0 4
61326: PUSH
61327: LD_INT 2
61329: ARRAY
61330: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
61331: LD_ADDR_VAR 0 14
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: LD_INT 5
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: ST_TO_ADDR
// for i in tmp do
61354: LD_ADDR_VAR 0 8
61358: PUSH
61359: LD_VAR 0 14
61363: PUSH
61364: FOR_IN
61365: IFFALSE 61535
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
61367: LD_ADDR_VAR 0 9
61371: PUSH
61372: LD_VAR 0 10
61376: PPUSH
61377: LD_VAR 0 8
61381: PPUSH
61382: LD_INT 5
61384: PPUSH
61385: CALL_OW 272
61389: PUSH
61390: LD_VAR 0 11
61394: PPUSH
61395: LD_VAR 0 8
61399: PPUSH
61400: LD_INT 5
61402: PPUSH
61403: CALL_OW 273
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
61412: LD_VAR 0 9
61416: PUSH
61417: LD_INT 1
61419: ARRAY
61420: PPUSH
61421: LD_VAR 0 9
61425: PUSH
61426: LD_INT 2
61428: ARRAY
61429: PPUSH
61430: CALL_OW 488
61434: IFFALSE 61533
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
61436: LD_ADDR_VAR 0 4
61440: PUSH
61441: LD_VAR 0 9
61445: PUSH
61446: LD_INT 1
61448: ARRAY
61449: PPUSH
61450: LD_VAR 0 9
61454: PUSH
61455: LD_INT 2
61457: ARRAY
61458: PPUSH
61459: CALL_OW 546
61463: ST_TO_ADDR
// if hex [ 1 ] then
61464: LD_VAR 0 4
61468: PUSH
61469: LD_INT 1
61471: ARRAY
61472: IFFALSE 61476
// continue ;
61474: GO 61364
// h := hex [ 2 ] ;
61476: LD_ADDR_VAR 0 13
61480: PUSH
61481: LD_VAR 0 4
61485: PUSH
61486: LD_INT 2
61488: ARRAY
61489: ST_TO_ADDR
// if h + 7 < height then
61490: LD_VAR 0 13
61494: PUSH
61495: LD_INT 7
61497: PLUS
61498: PUSH
61499: LD_VAR 0 15
61503: LESS
61504: IFFALSE 61533
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61506: LD_ADDR_VAR 0 18
61510: PUSH
61511: LD_INT 7
61513: PUSH
61514: LD_INT 28
61516: PUSH
61517: LD_INT 45
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: LIST
61524: PUSH
61525: LD_VAR 0 12
61529: ARRAY
61530: ST_TO_ADDR
// break ;
61531: GO 61535
// end ; end ; end ;
61533: GO 61364
61535: POP
61536: POP
// end ; if not weapon then
61537: LD_VAR 0 18
61541: NOT
61542: IFFALSE 61602
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61544: LD_ADDR_VAR 0 5
61548: PUSH
61549: LD_VAR 0 5
61553: PUSH
61554: LD_INT 11
61556: PUSH
61557: LD_INT 30
61559: PUSH
61560: LD_INT 49
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: LIST
61567: DIFF
61568: ST_TO_ADDR
// if not list then
61569: LD_VAR 0 5
61573: NOT
61574: IFFALSE 61578
// exit ;
61576: GO 61720
// weapon := list [ rand ( 1 , list ) ] ;
61578: LD_ADDR_VAR 0 18
61582: PUSH
61583: LD_VAR 0 5
61587: PUSH
61588: LD_INT 1
61590: PPUSH
61591: LD_VAR 0 5
61595: PPUSH
61596: CALL_OW 12
61600: ARRAY
61601: ST_TO_ADDR
// end ; if weapon then
61602: LD_VAR 0 18
61606: IFFALSE 61720
// begin tmp := CostOfWeapon ( weapon ) ;
61608: LD_ADDR_VAR 0 14
61612: PUSH
61613: LD_VAR 0 18
61617: PPUSH
61618: CALL_OW 451
61622: ST_TO_ADDR
// j := GetBase ( tower ) ;
61623: LD_ADDR_VAR 0 9
61627: PUSH
61628: LD_VAR 0 1
61632: PPUSH
61633: CALL_OW 274
61637: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61638: LD_VAR 0 9
61642: PPUSH
61643: LD_INT 1
61645: PPUSH
61646: CALL_OW 275
61650: PUSH
61651: LD_VAR 0 14
61655: PUSH
61656: LD_INT 1
61658: ARRAY
61659: GREATEREQUAL
61660: PUSH
61661: LD_VAR 0 9
61665: PPUSH
61666: LD_INT 2
61668: PPUSH
61669: CALL_OW 275
61673: PUSH
61674: LD_VAR 0 14
61678: PUSH
61679: LD_INT 2
61681: ARRAY
61682: GREATEREQUAL
61683: AND
61684: PUSH
61685: LD_VAR 0 9
61689: PPUSH
61690: LD_INT 3
61692: PPUSH
61693: CALL_OW 275
61697: PUSH
61698: LD_VAR 0 14
61702: PUSH
61703: LD_INT 3
61705: ARRAY
61706: GREATEREQUAL
61707: AND
61708: IFFALSE 61720
// result := weapon ;
61710: LD_ADDR_VAR 0 3
61714: PUSH
61715: LD_VAR 0 18
61719: ST_TO_ADDR
// end ; end ;
61720: LD_VAR 0 3
61724: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61725: LD_INT 0
61727: PPUSH
61728: PPUSH
// result := true ;
61729: LD_ADDR_VAR 0 3
61733: PUSH
61734: LD_INT 1
61736: ST_TO_ADDR
// if array1 = array2 then
61737: LD_VAR 0 1
61741: PUSH
61742: LD_VAR 0 2
61746: EQUAL
61747: IFFALSE 61807
// begin for i = 1 to array1 do
61749: LD_ADDR_VAR 0 4
61753: PUSH
61754: DOUBLE
61755: LD_INT 1
61757: DEC
61758: ST_TO_ADDR
61759: LD_VAR 0 1
61763: PUSH
61764: FOR_TO
61765: IFFALSE 61803
// if array1 [ i ] <> array2 [ i ] then
61767: LD_VAR 0 1
61771: PUSH
61772: LD_VAR 0 4
61776: ARRAY
61777: PUSH
61778: LD_VAR 0 2
61782: PUSH
61783: LD_VAR 0 4
61787: ARRAY
61788: NONEQUAL
61789: IFFALSE 61801
// begin result := false ;
61791: LD_ADDR_VAR 0 3
61795: PUSH
61796: LD_INT 0
61798: ST_TO_ADDR
// break ;
61799: GO 61803
// end ;
61801: GO 61764
61803: POP
61804: POP
// end else
61805: GO 61815
// result := false ;
61807: LD_ADDR_VAR 0 3
61811: PUSH
61812: LD_INT 0
61814: ST_TO_ADDR
// end ;
61815: LD_VAR 0 3
61819: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61820: LD_INT 0
61822: PPUSH
61823: PPUSH
61824: PPUSH
// pom := GetBase ( fac ) ;
61825: LD_ADDR_VAR 0 5
61829: PUSH
61830: LD_VAR 0 1
61834: PPUSH
61835: CALL_OW 274
61839: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61840: LD_ADDR_VAR 0 4
61844: PUSH
61845: LD_VAR 0 2
61849: PUSH
61850: LD_INT 1
61852: ARRAY
61853: PPUSH
61854: LD_VAR 0 2
61858: PUSH
61859: LD_INT 2
61861: ARRAY
61862: PPUSH
61863: LD_VAR 0 2
61867: PUSH
61868: LD_INT 3
61870: ARRAY
61871: PPUSH
61872: LD_VAR 0 2
61876: PUSH
61877: LD_INT 4
61879: ARRAY
61880: PPUSH
61881: CALL_OW 449
61885: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61886: LD_ADDR_VAR 0 3
61890: PUSH
61891: LD_VAR 0 5
61895: PPUSH
61896: LD_INT 1
61898: PPUSH
61899: CALL_OW 275
61903: PUSH
61904: LD_VAR 0 4
61908: PUSH
61909: LD_INT 1
61911: ARRAY
61912: GREATEREQUAL
61913: PUSH
61914: LD_VAR 0 5
61918: PPUSH
61919: LD_INT 2
61921: PPUSH
61922: CALL_OW 275
61926: PUSH
61927: LD_VAR 0 4
61931: PUSH
61932: LD_INT 2
61934: ARRAY
61935: GREATEREQUAL
61936: AND
61937: PUSH
61938: LD_VAR 0 5
61942: PPUSH
61943: LD_INT 3
61945: PPUSH
61946: CALL_OW 275
61950: PUSH
61951: LD_VAR 0 4
61955: PUSH
61956: LD_INT 3
61958: ARRAY
61959: GREATEREQUAL
61960: AND
61961: ST_TO_ADDR
// end ;
61962: LD_VAR 0 3
61966: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61967: LD_INT 0
61969: PPUSH
61970: PPUSH
61971: PPUSH
61972: PPUSH
// pom := GetBase ( building ) ;
61973: LD_ADDR_VAR 0 3
61977: PUSH
61978: LD_VAR 0 1
61982: PPUSH
61983: CALL_OW 274
61987: ST_TO_ADDR
// if not pom then
61988: LD_VAR 0 3
61992: NOT
61993: IFFALSE 61997
// exit ;
61995: GO 62167
// btype := GetBType ( building ) ;
61997: LD_ADDR_VAR 0 5
62001: PUSH
62002: LD_VAR 0 1
62006: PPUSH
62007: CALL_OW 266
62011: ST_TO_ADDR
// if btype = b_armoury then
62012: LD_VAR 0 5
62016: PUSH
62017: LD_INT 4
62019: EQUAL
62020: IFFALSE 62030
// btype := b_barracks ;
62022: LD_ADDR_VAR 0 5
62026: PUSH
62027: LD_INT 5
62029: ST_TO_ADDR
// if btype = b_depot then
62030: LD_VAR 0 5
62034: PUSH
62035: LD_INT 0
62037: EQUAL
62038: IFFALSE 62048
// btype := b_warehouse ;
62040: LD_ADDR_VAR 0 5
62044: PUSH
62045: LD_INT 1
62047: ST_TO_ADDR
// if btype = b_workshop then
62048: LD_VAR 0 5
62052: PUSH
62053: LD_INT 2
62055: EQUAL
62056: IFFALSE 62066
// btype := b_factory ;
62058: LD_ADDR_VAR 0 5
62062: PUSH
62063: LD_INT 3
62065: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62066: LD_ADDR_VAR 0 4
62070: PUSH
62071: LD_VAR 0 5
62075: PPUSH
62076: LD_VAR 0 1
62080: PPUSH
62081: CALL_OW 248
62085: PPUSH
62086: CALL_OW 450
62090: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62091: LD_ADDR_VAR 0 2
62095: PUSH
62096: LD_VAR 0 3
62100: PPUSH
62101: LD_INT 1
62103: PPUSH
62104: CALL_OW 275
62108: PUSH
62109: LD_VAR 0 4
62113: PUSH
62114: LD_INT 1
62116: ARRAY
62117: GREATEREQUAL
62118: PUSH
62119: LD_VAR 0 3
62123: PPUSH
62124: LD_INT 2
62126: PPUSH
62127: CALL_OW 275
62131: PUSH
62132: LD_VAR 0 4
62136: PUSH
62137: LD_INT 2
62139: ARRAY
62140: GREATEREQUAL
62141: AND
62142: PUSH
62143: LD_VAR 0 3
62147: PPUSH
62148: LD_INT 3
62150: PPUSH
62151: CALL_OW 275
62155: PUSH
62156: LD_VAR 0 4
62160: PUSH
62161: LD_INT 3
62163: ARRAY
62164: GREATEREQUAL
62165: AND
62166: ST_TO_ADDR
// end ;
62167: LD_VAR 0 2
62171: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
62172: LD_INT 0
62174: PPUSH
62175: PPUSH
62176: PPUSH
// pom := GetBase ( building ) ;
62177: LD_ADDR_VAR 0 4
62181: PUSH
62182: LD_VAR 0 1
62186: PPUSH
62187: CALL_OW 274
62191: ST_TO_ADDR
// if not pom then
62192: LD_VAR 0 4
62196: NOT
62197: IFFALSE 62201
// exit ;
62199: GO 62302
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62201: LD_ADDR_VAR 0 5
62205: PUSH
62206: LD_VAR 0 2
62210: PPUSH
62211: LD_VAR 0 1
62215: PPUSH
62216: CALL_OW 248
62220: PPUSH
62221: CALL_OW 450
62225: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62226: LD_ADDR_VAR 0 3
62230: PUSH
62231: LD_VAR 0 4
62235: PPUSH
62236: LD_INT 1
62238: PPUSH
62239: CALL_OW 275
62243: PUSH
62244: LD_VAR 0 5
62248: PUSH
62249: LD_INT 1
62251: ARRAY
62252: GREATEREQUAL
62253: PUSH
62254: LD_VAR 0 4
62258: PPUSH
62259: LD_INT 2
62261: PPUSH
62262: CALL_OW 275
62266: PUSH
62267: LD_VAR 0 5
62271: PUSH
62272: LD_INT 2
62274: ARRAY
62275: GREATEREQUAL
62276: AND
62277: PUSH
62278: LD_VAR 0 4
62282: PPUSH
62283: LD_INT 3
62285: PPUSH
62286: CALL_OW 275
62290: PUSH
62291: LD_VAR 0 5
62295: PUSH
62296: LD_INT 3
62298: ARRAY
62299: GREATEREQUAL
62300: AND
62301: ST_TO_ADDR
// end ;
62302: LD_VAR 0 3
62306: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
62307: LD_INT 0
62309: PPUSH
62310: PPUSH
62311: PPUSH
62312: PPUSH
62313: PPUSH
62314: PPUSH
62315: PPUSH
62316: PPUSH
62317: PPUSH
62318: PPUSH
// result := false ;
62319: LD_ADDR_VAR 0 6
62323: PUSH
62324: LD_INT 0
62326: ST_TO_ADDR
// if not base or not btype or not x or not y then
62327: LD_VAR 0 1
62331: NOT
62332: PUSH
62333: LD_VAR 0 2
62337: NOT
62338: OR
62339: PUSH
62340: LD_VAR 0 3
62344: NOT
62345: OR
62346: PUSH
62347: LD_VAR 0 4
62351: NOT
62352: OR
62353: IFFALSE 62357
// exit ;
62355: GO 62966
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
62357: LD_ADDR_VAR 0 12
62361: PUSH
62362: LD_VAR 0 2
62366: PPUSH
62367: LD_VAR 0 3
62371: PPUSH
62372: LD_VAR 0 4
62376: PPUSH
62377: LD_VAR 0 5
62381: PPUSH
62382: LD_VAR 0 1
62386: PUSH
62387: LD_INT 1
62389: ARRAY
62390: PPUSH
62391: CALL_OW 248
62395: PPUSH
62396: LD_INT 0
62398: PPUSH
62399: CALL 63803 0 6
62403: ST_TO_ADDR
// if not hexes then
62404: LD_VAR 0 12
62408: NOT
62409: IFFALSE 62413
// exit ;
62411: GO 62966
// for i = 1 to hexes do
62413: LD_ADDR_VAR 0 7
62417: PUSH
62418: DOUBLE
62419: LD_INT 1
62421: DEC
62422: ST_TO_ADDR
62423: LD_VAR 0 12
62427: PUSH
62428: FOR_TO
62429: IFFALSE 62964
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62431: LD_ADDR_VAR 0 11
62435: PUSH
62436: LD_VAR 0 12
62440: PUSH
62441: LD_VAR 0 7
62445: ARRAY
62446: PUSH
62447: LD_INT 1
62449: ARRAY
62450: PPUSH
62451: LD_VAR 0 12
62455: PUSH
62456: LD_VAR 0 7
62460: ARRAY
62461: PUSH
62462: LD_INT 2
62464: ARRAY
62465: PPUSH
62466: CALL_OW 428
62470: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62471: LD_VAR 0 12
62475: PUSH
62476: LD_VAR 0 7
62480: ARRAY
62481: PUSH
62482: LD_INT 1
62484: ARRAY
62485: PPUSH
62486: LD_VAR 0 12
62490: PUSH
62491: LD_VAR 0 7
62495: ARRAY
62496: PUSH
62497: LD_INT 2
62499: ARRAY
62500: PPUSH
62501: CALL_OW 351
62505: PUSH
62506: LD_VAR 0 12
62510: PUSH
62511: LD_VAR 0 7
62515: ARRAY
62516: PUSH
62517: LD_INT 1
62519: ARRAY
62520: PPUSH
62521: LD_VAR 0 12
62525: PUSH
62526: LD_VAR 0 7
62530: ARRAY
62531: PUSH
62532: LD_INT 2
62534: ARRAY
62535: PPUSH
62536: CALL_OW 488
62540: NOT
62541: OR
62542: PUSH
62543: LD_VAR 0 11
62547: PPUSH
62548: CALL_OW 247
62552: PUSH
62553: LD_INT 3
62555: EQUAL
62556: OR
62557: IFFALSE 62563
// exit ;
62559: POP
62560: POP
62561: GO 62966
// if not tmp or not tmp in base then
62563: LD_VAR 0 11
62567: NOT
62568: PUSH
62569: LD_VAR 0 11
62573: PUSH
62574: LD_VAR 0 1
62578: IN
62579: NOT
62580: OR
62581: IFFALSE 62585
// continue ;
62583: GO 62428
// result := true ;
62585: LD_ADDR_VAR 0 6
62589: PUSH
62590: LD_INT 1
62592: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62593: LD_ADDR_VAR 0 15
62597: PUSH
62598: LD_VAR 0 1
62602: PPUSH
62603: LD_INT 22
62605: PUSH
62606: LD_VAR 0 11
62610: PPUSH
62611: CALL_OW 255
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: LD_INT 30
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 30
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PPUSH
62652: CALL_OW 72
62656: ST_TO_ADDR
// if dep then
62657: LD_VAR 0 15
62661: IFFALSE 62797
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62663: LD_ADDR_VAR 0 14
62667: PUSH
62668: LD_VAR 0 15
62672: PUSH
62673: LD_INT 1
62675: ARRAY
62676: PPUSH
62677: CALL_OW 250
62681: PPUSH
62682: LD_VAR 0 15
62686: PUSH
62687: LD_INT 1
62689: ARRAY
62690: PPUSH
62691: CALL_OW 254
62695: PPUSH
62696: LD_INT 5
62698: PPUSH
62699: CALL_OW 272
62703: PUSH
62704: LD_VAR 0 15
62708: PUSH
62709: LD_INT 1
62711: ARRAY
62712: PPUSH
62713: CALL_OW 251
62717: PPUSH
62718: LD_VAR 0 15
62722: PUSH
62723: LD_INT 1
62725: ARRAY
62726: PPUSH
62727: CALL_OW 254
62731: PPUSH
62732: LD_INT 5
62734: PPUSH
62735: CALL_OW 273
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62744: LD_VAR 0 14
62748: PUSH
62749: LD_INT 1
62751: ARRAY
62752: PPUSH
62753: LD_VAR 0 14
62757: PUSH
62758: LD_INT 2
62760: ARRAY
62761: PPUSH
62762: CALL_OW 488
62766: IFFALSE 62797
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62768: LD_VAR 0 11
62772: PPUSH
62773: LD_VAR 0 14
62777: PUSH
62778: LD_INT 1
62780: ARRAY
62781: PPUSH
62782: LD_VAR 0 14
62786: PUSH
62787: LD_INT 2
62789: ARRAY
62790: PPUSH
62791: CALL_OW 111
// continue ;
62795: GO 62428
// end ; end ; r := GetDir ( tmp ) ;
62797: LD_ADDR_VAR 0 13
62801: PUSH
62802: LD_VAR 0 11
62806: PPUSH
62807: CALL_OW 254
62811: ST_TO_ADDR
// if r = 5 then
62812: LD_VAR 0 13
62816: PUSH
62817: LD_INT 5
62819: EQUAL
62820: IFFALSE 62830
// r := 0 ;
62822: LD_ADDR_VAR 0 13
62826: PUSH
62827: LD_INT 0
62829: ST_TO_ADDR
// for j = r to 5 do
62830: LD_ADDR_VAR 0 8
62834: PUSH
62835: DOUBLE
62836: LD_VAR 0 13
62840: DEC
62841: ST_TO_ADDR
62842: LD_INT 5
62844: PUSH
62845: FOR_TO
62846: IFFALSE 62960
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62848: LD_ADDR_VAR 0 9
62852: PUSH
62853: LD_VAR 0 11
62857: PPUSH
62858: CALL_OW 250
62862: PPUSH
62863: LD_VAR 0 8
62867: PPUSH
62868: LD_INT 2
62870: PPUSH
62871: CALL_OW 272
62875: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62876: LD_ADDR_VAR 0 10
62880: PUSH
62881: LD_VAR 0 11
62885: PPUSH
62886: CALL_OW 251
62890: PPUSH
62891: LD_VAR 0 8
62895: PPUSH
62896: LD_INT 2
62898: PPUSH
62899: CALL_OW 273
62903: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62904: LD_VAR 0 9
62908: PPUSH
62909: LD_VAR 0 10
62913: PPUSH
62914: CALL_OW 488
62918: PUSH
62919: LD_VAR 0 9
62923: PPUSH
62924: LD_VAR 0 10
62928: PPUSH
62929: CALL_OW 428
62933: NOT
62934: AND
62935: IFFALSE 62958
// begin ComMoveXY ( tmp , _x , _y ) ;
62937: LD_VAR 0 11
62941: PPUSH
62942: LD_VAR 0 9
62946: PPUSH
62947: LD_VAR 0 10
62951: PPUSH
62952: CALL_OW 111
// break ;
62956: GO 62960
// end ; end ;
62958: GO 62845
62960: POP
62961: POP
// end ;
62962: GO 62428
62964: POP
62965: POP
// end ;
62966: LD_VAR 0 6
62970: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
62971: LD_INT 0
62973: PPUSH
62974: PPUSH
62975: PPUSH
62976: PPUSH
62977: PPUSH
62978: PPUSH
62979: PPUSH
62980: PPUSH
62981: PPUSH
62982: PPUSH
// result := false ;
62983: LD_ADDR_VAR 0 6
62987: PUSH
62988: LD_INT 0
62990: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
62991: LD_VAR 0 1
62995: NOT
62996: PUSH
62997: LD_VAR 0 1
63001: PPUSH
63002: CALL_OW 266
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: IN
63017: NOT
63018: OR
63019: PUSH
63020: LD_VAR 0 2
63024: NOT
63025: OR
63026: PUSH
63027: LD_VAR 0 5
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: LD_INT 3
63043: PUSH
63044: LD_INT 4
63046: PUSH
63047: LD_INT 5
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: IN
63058: NOT
63059: OR
63060: PUSH
63061: LD_VAR 0 3
63065: PPUSH
63066: LD_VAR 0 4
63070: PPUSH
63071: CALL_OW 488
63075: NOT
63076: OR
63077: IFFALSE 63081
// exit ;
63079: GO 63798
// pom := GetBase ( depot ) ;
63081: LD_ADDR_VAR 0 10
63085: PUSH
63086: LD_VAR 0 1
63090: PPUSH
63091: CALL_OW 274
63095: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63096: LD_ADDR_VAR 0 11
63100: PUSH
63101: LD_VAR 0 2
63105: PPUSH
63106: LD_VAR 0 1
63110: PPUSH
63111: CALL_OW 248
63115: PPUSH
63116: CALL_OW 450
63120: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63121: LD_VAR 0 10
63125: PPUSH
63126: LD_INT 1
63128: PPUSH
63129: CALL_OW 275
63133: PUSH
63134: LD_VAR 0 11
63138: PUSH
63139: LD_INT 1
63141: ARRAY
63142: GREATEREQUAL
63143: PUSH
63144: LD_VAR 0 10
63148: PPUSH
63149: LD_INT 2
63151: PPUSH
63152: CALL_OW 275
63156: PUSH
63157: LD_VAR 0 11
63161: PUSH
63162: LD_INT 2
63164: ARRAY
63165: GREATEREQUAL
63166: AND
63167: PUSH
63168: LD_VAR 0 10
63172: PPUSH
63173: LD_INT 3
63175: PPUSH
63176: CALL_OW 275
63180: PUSH
63181: LD_VAR 0 11
63185: PUSH
63186: LD_INT 3
63188: ARRAY
63189: GREATEREQUAL
63190: AND
63191: NOT
63192: IFFALSE 63196
// exit ;
63194: GO 63798
// if GetBType ( depot ) = b_depot then
63196: LD_VAR 0 1
63200: PPUSH
63201: CALL_OW 266
63205: PUSH
63206: LD_INT 0
63208: EQUAL
63209: IFFALSE 63221
// dist := 28 else
63211: LD_ADDR_VAR 0 14
63215: PUSH
63216: LD_INT 28
63218: ST_TO_ADDR
63219: GO 63229
// dist := 36 ;
63221: LD_ADDR_VAR 0 14
63225: PUSH
63226: LD_INT 36
63228: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63229: LD_VAR 0 1
63233: PPUSH
63234: LD_VAR 0 3
63238: PPUSH
63239: LD_VAR 0 4
63243: PPUSH
63244: CALL_OW 297
63248: PUSH
63249: LD_VAR 0 14
63253: GREATER
63254: IFFALSE 63258
// exit ;
63256: GO 63798
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63258: LD_ADDR_VAR 0 12
63262: PUSH
63263: LD_VAR 0 2
63267: PPUSH
63268: LD_VAR 0 3
63272: PPUSH
63273: LD_VAR 0 4
63277: PPUSH
63278: LD_VAR 0 5
63282: PPUSH
63283: LD_VAR 0 1
63287: PPUSH
63288: CALL_OW 248
63292: PPUSH
63293: LD_INT 0
63295: PPUSH
63296: CALL 63803 0 6
63300: ST_TO_ADDR
// if not hexes then
63301: LD_VAR 0 12
63305: NOT
63306: IFFALSE 63310
// exit ;
63308: GO 63798
// hex := GetHexInfo ( x , y ) ;
63310: LD_ADDR_VAR 0 15
63314: PUSH
63315: LD_VAR 0 3
63319: PPUSH
63320: LD_VAR 0 4
63324: PPUSH
63325: CALL_OW 546
63329: ST_TO_ADDR
// if hex [ 1 ] then
63330: LD_VAR 0 15
63334: PUSH
63335: LD_INT 1
63337: ARRAY
63338: IFFALSE 63342
// exit ;
63340: GO 63798
// height := hex [ 2 ] ;
63342: LD_ADDR_VAR 0 13
63346: PUSH
63347: LD_VAR 0 15
63351: PUSH
63352: LD_INT 2
63354: ARRAY
63355: ST_TO_ADDR
// for i = 1 to hexes do
63356: LD_ADDR_VAR 0 7
63360: PUSH
63361: DOUBLE
63362: LD_INT 1
63364: DEC
63365: ST_TO_ADDR
63366: LD_VAR 0 12
63370: PUSH
63371: FOR_TO
63372: IFFALSE 63702
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63374: LD_VAR 0 12
63378: PUSH
63379: LD_VAR 0 7
63383: ARRAY
63384: PUSH
63385: LD_INT 1
63387: ARRAY
63388: PPUSH
63389: LD_VAR 0 12
63393: PUSH
63394: LD_VAR 0 7
63398: ARRAY
63399: PUSH
63400: LD_INT 2
63402: ARRAY
63403: PPUSH
63404: CALL_OW 488
63408: NOT
63409: PUSH
63410: LD_VAR 0 12
63414: PUSH
63415: LD_VAR 0 7
63419: ARRAY
63420: PUSH
63421: LD_INT 1
63423: ARRAY
63424: PPUSH
63425: LD_VAR 0 12
63429: PUSH
63430: LD_VAR 0 7
63434: ARRAY
63435: PUSH
63436: LD_INT 2
63438: ARRAY
63439: PPUSH
63440: CALL_OW 428
63444: PUSH
63445: LD_INT 0
63447: GREATER
63448: OR
63449: PUSH
63450: LD_VAR 0 12
63454: PUSH
63455: LD_VAR 0 7
63459: ARRAY
63460: PUSH
63461: LD_INT 1
63463: ARRAY
63464: PPUSH
63465: LD_VAR 0 12
63469: PUSH
63470: LD_VAR 0 7
63474: ARRAY
63475: PUSH
63476: LD_INT 2
63478: ARRAY
63479: PPUSH
63480: CALL_OW 351
63484: OR
63485: IFFALSE 63491
// exit ;
63487: POP
63488: POP
63489: GO 63798
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63491: LD_ADDR_VAR 0 8
63495: PUSH
63496: LD_VAR 0 12
63500: PUSH
63501: LD_VAR 0 7
63505: ARRAY
63506: PUSH
63507: LD_INT 1
63509: ARRAY
63510: PPUSH
63511: LD_VAR 0 12
63515: PUSH
63516: LD_VAR 0 7
63520: ARRAY
63521: PUSH
63522: LD_INT 2
63524: ARRAY
63525: PPUSH
63526: CALL_OW 546
63530: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
63531: LD_VAR 0 8
63535: PUSH
63536: LD_INT 1
63538: ARRAY
63539: PUSH
63540: LD_VAR 0 8
63544: PUSH
63545: LD_INT 2
63547: ARRAY
63548: PUSH
63549: LD_VAR 0 13
63553: PUSH
63554: LD_INT 2
63556: PLUS
63557: GREATER
63558: OR
63559: PUSH
63560: LD_VAR 0 8
63564: PUSH
63565: LD_INT 2
63567: ARRAY
63568: PUSH
63569: LD_VAR 0 13
63573: PUSH
63574: LD_INT 2
63576: MINUS
63577: LESS
63578: OR
63579: PUSH
63580: LD_VAR 0 8
63584: PUSH
63585: LD_INT 3
63587: ARRAY
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 8
63594: PUSH
63595: LD_INT 9
63597: PUSH
63598: LD_INT 10
63600: PUSH
63601: LD_INT 11
63603: PUSH
63604: LD_INT 12
63606: PUSH
63607: LD_INT 13
63609: PUSH
63610: LD_INT 16
63612: PUSH
63613: LD_INT 17
63615: PUSH
63616: LD_INT 18
63618: PUSH
63619: LD_INT 19
63621: PUSH
63622: LD_INT 20
63624: PUSH
63625: LD_INT 21
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: IN
63643: NOT
63644: OR
63645: PUSH
63646: LD_VAR 0 8
63650: PUSH
63651: LD_INT 5
63653: ARRAY
63654: NOT
63655: OR
63656: PUSH
63657: LD_VAR 0 8
63661: PUSH
63662: LD_INT 6
63664: ARRAY
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: LD_INT 7
63674: PUSH
63675: LD_INT 9
63677: PUSH
63678: LD_INT 10
63680: PUSH
63681: LD_INT 11
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: IN
63692: NOT
63693: OR
63694: IFFALSE 63700
// exit ;
63696: POP
63697: POP
63698: GO 63798
// end ;
63700: GO 63371
63702: POP
63703: POP
// side := GetSide ( depot ) ;
63704: LD_ADDR_VAR 0 9
63708: PUSH
63709: LD_VAR 0 1
63713: PPUSH
63714: CALL_OW 255
63718: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
63719: LD_VAR 0 9
63723: PPUSH
63724: LD_VAR 0 3
63728: PPUSH
63729: LD_VAR 0 4
63733: PPUSH
63734: LD_INT 20
63736: PPUSH
63737: CALL 56452 0 4
63741: PUSH
63742: LD_INT 4
63744: ARRAY
63745: IFFALSE 63749
// exit ;
63747: GO 63798
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
63749: LD_VAR 0 2
63753: PUSH
63754: LD_INT 29
63756: PUSH
63757: LD_INT 30
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: IN
63764: PUSH
63765: LD_VAR 0 3
63769: PPUSH
63770: LD_VAR 0 4
63774: PPUSH
63775: LD_VAR 0 9
63779: PPUSH
63780: CALL_OW 440
63784: NOT
63785: AND
63786: IFFALSE 63790
// exit ;
63788: GO 63798
// result := true ;
63790: LD_ADDR_VAR 0 6
63794: PUSH
63795: LD_INT 1
63797: ST_TO_ADDR
// end ;
63798: LD_VAR 0 6
63802: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
63803: LD_INT 0
63805: PPUSH
63806: PPUSH
63807: PPUSH
63808: PPUSH
63809: PPUSH
63810: PPUSH
63811: PPUSH
63812: PPUSH
63813: PPUSH
63814: PPUSH
63815: PPUSH
63816: PPUSH
63817: PPUSH
63818: PPUSH
63819: PPUSH
63820: PPUSH
63821: PPUSH
63822: PPUSH
63823: PPUSH
63824: PPUSH
63825: PPUSH
63826: PPUSH
63827: PPUSH
63828: PPUSH
63829: PPUSH
63830: PPUSH
63831: PPUSH
63832: PPUSH
63833: PPUSH
63834: PPUSH
63835: PPUSH
63836: PPUSH
63837: PPUSH
63838: PPUSH
63839: PPUSH
63840: PPUSH
63841: PPUSH
63842: PPUSH
63843: PPUSH
63844: PPUSH
63845: PPUSH
63846: PPUSH
63847: PPUSH
63848: PPUSH
63849: PPUSH
63850: PPUSH
63851: PPUSH
63852: PPUSH
63853: PPUSH
63854: PPUSH
63855: PPUSH
63856: PPUSH
63857: PPUSH
63858: PPUSH
63859: PPUSH
63860: PPUSH
63861: PPUSH
63862: PPUSH
// result = [ ] ;
63863: LD_ADDR_VAR 0 7
63867: PUSH
63868: EMPTY
63869: ST_TO_ADDR
// temp_list = [ ] ;
63870: LD_ADDR_VAR 0 9
63874: PUSH
63875: EMPTY
63876: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
63877: LD_VAR 0 4
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: LD_INT 3
63893: PUSH
63894: LD_INT 4
63896: PUSH
63897: LD_INT 5
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: IN
63908: NOT
63909: PUSH
63910: LD_VAR 0 1
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: IN
63925: PUSH
63926: LD_VAR 0 5
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: LD_INT 2
63936: PUSH
63937: LD_INT 3
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: LIST
63944: IN
63945: NOT
63946: AND
63947: OR
63948: IFFALSE 63952
// exit ;
63950: GO 82343
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
63952: LD_VAR 0 1
63956: PUSH
63957: LD_INT 6
63959: PUSH
63960: LD_INT 7
63962: PUSH
63963: LD_INT 8
63965: PUSH
63966: LD_INT 13
63968: PUSH
63969: LD_INT 12
63971: PUSH
63972: LD_INT 15
63974: PUSH
63975: LD_INT 11
63977: PUSH
63978: LD_INT 14
63980: PUSH
63981: LD_INT 10
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: IN
63995: IFFALSE 64005
// btype = b_lab ;
63997: LD_ADDR_VAR 0 1
64001: PUSH
64002: LD_INT 6
64004: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64005: LD_VAR 0 6
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 1
64015: PUSH
64016: LD_INT 2
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: LIST
64023: IN
64024: NOT
64025: PUSH
64026: LD_VAR 0 1
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: LD_INT 3
64042: PUSH
64043: LD_INT 6
64045: PUSH
64046: LD_INT 36
64048: PUSH
64049: LD_INT 4
64051: PUSH
64052: LD_INT 5
64054: PUSH
64055: LD_INT 31
64057: PUSH
64058: LD_INT 32
64060: PUSH
64061: LD_INT 33
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: IN
64077: NOT
64078: PUSH
64079: LD_VAR 0 6
64083: PUSH
64084: LD_INT 1
64086: EQUAL
64087: AND
64088: OR
64089: PUSH
64090: LD_VAR 0 1
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: LD_INT 3
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: IN
64105: NOT
64106: PUSH
64107: LD_VAR 0 6
64111: PUSH
64112: LD_INT 2
64114: EQUAL
64115: AND
64116: OR
64117: IFFALSE 64127
// mode = 0 ;
64119: LD_ADDR_VAR 0 6
64123: PUSH
64124: LD_INT 0
64126: ST_TO_ADDR
// case mode of 0 :
64127: LD_VAR 0 6
64131: PUSH
64132: LD_INT 0
64134: DOUBLE
64135: EQUAL
64136: IFTRUE 64140
64138: GO 75593
64140: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64141: LD_ADDR_VAR 0 11
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 1
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: LD_INT 2
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: LD_INT 2
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: PUSH
64288: LD_INT 3
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 3
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: LD_INT 2
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64334: LD_ADDR_VAR 0 12
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 2
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 2
64457: NEG
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: NEG
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 2
64480: NEG
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 3
64491: NEG
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 3
64502: NEG
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64530: LD_ADDR_VAR 0 13
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: NEG
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: LD_INT 1
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 2
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 2
64665: NEG
64666: PUSH
64667: LD_INT 2
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: LD_INT 3
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 3
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64729: LD_ADDR_VAR 0 14
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 2
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 1
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 3
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 3
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: LD_INT 2
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64925: LD_ADDR_VAR 0 15
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: LD_INT 1
64998: NEG
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 2
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 2
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: NEG
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: NEG
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: LD_INT 1
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 3
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 3
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65118: LD_ADDR_VAR 0 16
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 1
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 0
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: LD_INT 1
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 3
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65311: LD_ADDR_VAR 0 17
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: LD_INT 2
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: LD_INT 2
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 2
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: LD_INT 2
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 0
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: NEG
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 2
65498: NEG
65499: PUSH
65500: LD_INT 1
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 2
65510: NEG
65511: PUSH
65512: LD_INT 2
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65541: LD_ADDR_VAR 0 18
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: PUSH
65612: LD_INT 1
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: LD_INT 2
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 2
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 2
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 2
65676: PUSH
65677: LD_INT 2
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: NEG
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 2
65717: NEG
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 2
65728: NEG
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 2
65740: NEG
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65771: LD_ADDR_VAR 0 19
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 1
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 1
65852: NEG
65853: PUSH
65854: LD_INT 2
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 2
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 2
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 2
65906: PUSH
65907: LD_INT 2
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: LD_INT 2
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: LD_INT 1
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 2
65947: NEG
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 2
65958: NEG
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: LD_INT 2
65974: NEG
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66001: LD_ADDR_VAR 0 20
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: LD_INT 1
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: LD_INT 1
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 1
66070: NEG
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: LD_INT 2
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 2
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 2
66126: PUSH
66127: LD_INT 1
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 2
66136: PUSH
66137: LD_INT 2
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: LD_INT 2
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: LD_INT 2
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 1
66166: NEG
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 2
66177: NEG
66178: PUSH
66179: LD_INT 0
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 2
66188: NEG
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 2
66200: NEG
66201: PUSH
66202: LD_INT 2
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66231: LD_ADDR_VAR 0 21
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 0
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 1
66289: NEG
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 1
66312: NEG
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 2
66366: PUSH
66367: LD_INT 2
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 1
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 2
66407: NEG
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 2
66418: NEG
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 2
66430: NEG
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66461: LD_ADDR_VAR 0 22
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 1
66519: NEG
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 1
66542: NEG
66543: PUSH
66544: LD_INT 2
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: LD_INT 2
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: LD_INT 1
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 2
66596: PUSH
66597: LD_INT 2
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: LD_INT 2
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: LD_INT 2
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 2
66637: NEG
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 2
66660: NEG
66661: PUSH
66662: LD_INT 2
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66691: LD_ADDR_VAR 0 23
66695: PUSH
66696: LD_INT 0
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 0
66708: PUSH
66709: LD_INT 1
66711: NEG
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 1
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: LD_INT 1
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 1
66749: NEG
66750: PUSH
66751: LD_INT 0
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: LD_INT 2
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 2
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 2
66806: PUSH
66807: LD_INT 0
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 2
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 2
66826: PUSH
66827: LD_INT 2
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 1
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 2
66867: NEG
66868: PUSH
66869: LD_INT 0
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 2
66878: NEG
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: LD_INT 2
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: LD_INT 3
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 1
66914: NEG
66915: PUSH
66916: LD_INT 3
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: LD_INT 2
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 2
66937: PUSH
66938: LD_INT 1
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
66971: LD_ADDR_VAR 0 24
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: LD_INT 1
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 1
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 1
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: LD_INT 2
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 2
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 2
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 2
67106: PUSH
67107: LD_INT 2
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_INT 2
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 2
67158: NEG
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 2
67170: NEG
67171: PUSH
67172: LD_INT 2
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: LD_INT 2
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 3
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 3
67214: PUSH
67215: LD_INT 2
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67247: LD_ADDR_VAR 0 25
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 1
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: LD_INT 1
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 1
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: LD_INT 1
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 1
67328: NEG
67329: PUSH
67330: LD_INT 2
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: LD_INT 2
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 2
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 2
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: LD_INT 2
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: LD_INT 2
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: LD_INT 2
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 2
67423: NEG
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: NEG
67435: PUSH
67436: LD_INT 1
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 2
67446: NEG
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 3
67458: PUSH
67459: LD_INT 1
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 3
67468: PUSH
67469: LD_INT 2
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: LD_INT 3
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67521: LD_ADDR_VAR 0 26
67525: PUSH
67526: LD_INT 0
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: LD_INT 1
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: LD_INT 1
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: LD_INT 1
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: NEG
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: LD_INT 2
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 2
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 2
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 2
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 2
67656: PUSH
67657: LD_INT 2
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: PUSH
67667: LD_INT 2
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 2
67697: NEG
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 2
67708: NEG
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 2
67720: NEG
67721: PUSH
67722: LD_INT 2
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 2
67732: PUSH
67733: LD_INT 3
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 1
67742: PUSH
67743: LD_INT 3
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 1
67752: NEG
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67797: LD_ADDR_VAR 0 27
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: LD_INT 1
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 1
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 1
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 1
67855: NEG
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: NEG
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 1
67878: NEG
67879: PUSH
67880: LD_INT 2
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: LD_INT 2
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: LD_INT 1
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: PUSH
67913: LD_INT 0
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: LD_INT 1
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 2
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 1
67942: PUSH
67943: LD_INT 2
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: LD_INT 1
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 2
67973: NEG
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 2
67984: NEG
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 2
67996: NEG
67997: PUSH
67998: LD_INT 2
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 1
68008: NEG
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 2
68019: NEG
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: LD_INT 1
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: LD_INT 2
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68077: LD_ADDR_VAR 0 28
68081: PUSH
68082: LD_INT 0
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 1
68105: PUSH
68106: LD_INT 0
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 1
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 0
68125: PUSH
68126: LD_INT 1
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 1
68135: NEG
68136: PUSH
68137: LD_INT 0
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: LD_INT 1
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: NEG
68159: PUSH
68160: LD_INT 2
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: LD_INT 2
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 1
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 2
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 2
68202: PUSH
68203: LD_INT 1
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: LD_INT 2
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 2
68253: NEG
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: NEG
68265: PUSH
68266: LD_INT 1
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 2
68276: NEG
68277: PUSH
68278: LD_INT 2
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 2
68288: NEG
68289: PUSH
68290: LD_INT 3
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 1
68300: NEG
68301: PUSH
68302: LD_INT 3
68304: NEG
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 3
68312: NEG
68313: PUSH
68314: LD_INT 1
68316: NEG
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 3
68324: NEG
68325: PUSH
68326: LD_INT 2
68328: NEG
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68359: LD_ADDR_VAR 0 29
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: LD_INT 0
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 0
68376: PUSH
68377: LD_INT 1
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 1
68387: PUSH
68388: LD_INT 0
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 1
68397: PUSH
68398: LD_INT 1
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 1
68417: NEG
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 1
68428: NEG
68429: PUSH
68430: LD_INT 1
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 1
68440: NEG
68441: PUSH
68442: LD_INT 2
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 0
68452: PUSH
68453: LD_INT 2
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 1
68463: PUSH
68464: LD_INT 1
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 2
68484: PUSH
68485: LD_INT 1
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: PUSH
68495: LD_INT 2
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: LD_INT 2
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 1
68514: NEG
68515: PUSH
68516: LD_INT 1
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 2
68525: NEG
68526: PUSH
68527: LD_INT 1
68529: NEG
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 2
68537: NEG
68538: PUSH
68539: LD_INT 2
68541: NEG
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 2
68549: NEG
68550: PUSH
68551: LD_INT 3
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 2
68561: PUSH
68562: LD_INT 1
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 3
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 1
68582: PUSH
68583: LD_INT 3
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 1
68592: NEG
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 3
68603: NEG
68604: PUSH
68605: LD_INT 2
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68638: LD_ADDR_VAR 0 30
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 0
68655: PUSH
68656: LD_INT 1
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 1
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 1
68676: PUSH
68677: LD_INT 1
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: LD_INT 1
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 1
68696: NEG
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 1
68707: NEG
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 1
68719: NEG
68720: PUSH
68721: LD_INT 2
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: LD_INT 2
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 1
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 2
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 2
68763: PUSH
68764: LD_INT 1
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 2
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 1
68783: PUSH
68784: LD_INT 2
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 1
68793: NEG
68794: PUSH
68795: LD_INT 1
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: LD_INT 1
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 1
68827: NEG
68828: PUSH
68829: LD_INT 3
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 1
68839: PUSH
68840: LD_INT 2
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 3
68850: PUSH
68851: LD_INT 2
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 2
68860: PUSH
68861: LD_INT 3
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 2
68870: NEG
68871: PUSH
68872: LD_INT 1
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 3
68881: NEG
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68916: LD_ADDR_VAR 0 31
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: LD_INT 0
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: LD_INT 1
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: PUSH
68955: LD_INT 1
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: LD_INT 1
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 1
68974: NEG
68975: PUSH
68976: LD_INT 0
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: NEG
68986: PUSH
68987: LD_INT 1
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: LD_INT 2
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 1
69009: PUSH
69010: LD_INT 1
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 2
69020: PUSH
69021: LD_INT 0
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 2
69030: PUSH
69031: LD_INT 1
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 2
69040: PUSH
69041: LD_INT 2
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 1
69050: PUSH
69051: LD_INT 2
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 0
69060: PUSH
69061: LD_INT 2
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 1
69070: NEG
69071: PUSH
69072: LD_INT 1
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 2
69081: NEG
69082: PUSH
69083: LD_INT 1
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 2
69093: NEG
69094: PUSH
69095: LD_INT 2
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 2
69105: NEG
69106: PUSH
69107: LD_INT 3
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 2
69117: PUSH
69118: LD_INT 1
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: LD_INT 1
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 1
69138: PUSH
69139: LD_INT 3
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 1
69148: NEG
69149: PUSH
69150: LD_INT 2
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 3
69159: NEG
69160: PUSH
69161: LD_INT 2
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69194: LD_ADDR_VAR 0 32
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: LD_INT 0
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 0
69211: PUSH
69212: LD_INT 1
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 1
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 1
69232: PUSH
69233: LD_INT 1
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 0
69242: PUSH
69243: LD_INT 1
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 1
69252: NEG
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 1
69263: NEG
69264: PUSH
69265: LD_INT 1
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 1
69275: NEG
69276: PUSH
69277: LD_INT 2
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: LD_INT 2
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 1
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 2
69309: PUSH
69310: LD_INT 1
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 2
69319: PUSH
69320: LD_INT 2
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 1
69329: PUSH
69330: LD_INT 2
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 0
69339: PUSH
69340: LD_INT 2
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 1
69349: NEG
69350: PUSH
69351: LD_INT 1
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: LD_INT 1
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 1
69383: NEG
69384: PUSH
69385: LD_INT 3
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 1
69395: PUSH
69396: LD_INT 2
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: LD_INT 2
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 2
69416: PUSH
69417: LD_INT 3
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 2
69426: NEG
69427: PUSH
69428: LD_INT 1
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 3
69437: NEG
69438: PUSH
69439: LD_INT 1
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69472: LD_ADDR_VAR 0 33
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: LD_INT 0
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: LD_INT 1
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 1
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 1
69510: PUSH
69511: LD_INT 1
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 0
69520: PUSH
69521: LD_INT 1
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 1
69530: NEG
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 1
69541: NEG
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 1
69553: NEG
69554: PUSH
69555: LD_INT 2
69557: NEG
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 1
69565: PUSH
69566: LD_INT 1
69568: NEG
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 2
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 2
69586: PUSH
69587: LD_INT 1
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 1
69596: PUSH
69597: LD_INT 2
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 0
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 1
69616: NEG
69617: PUSH
69618: LD_INT 1
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 2
69627: NEG
69628: PUSH
69629: LD_INT 0
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 2
69638: NEG
69639: PUSH
69640: LD_INT 1
69642: NEG
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 2
69650: NEG
69651: PUSH
69652: LD_INT 2
69654: NEG
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 2
69662: NEG
69663: PUSH
69664: LD_INT 3
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 2
69674: PUSH
69675: LD_INT 1
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 3
69685: PUSH
69686: LD_INT 1
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 1
69695: PUSH
69696: LD_INT 3
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 1
69705: NEG
69706: PUSH
69707: LD_INT 2
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 3
69716: NEG
69717: PUSH
69718: LD_INT 2
69720: NEG
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69751: LD_ADDR_VAR 0 34
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 0
69768: PUSH
69769: LD_INT 1
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: PUSH
69780: LD_INT 0
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 1
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 0
69799: PUSH
69800: LD_INT 1
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 1
69809: NEG
69810: PUSH
69811: LD_INT 0
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 1
69820: NEG
69821: PUSH
69822: LD_INT 1
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: NEG
69833: PUSH
69834: LD_INT 2
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 0
69844: PUSH
69845: LD_INT 2
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 2
69866: PUSH
69867: LD_INT 1
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 2
69876: PUSH
69877: LD_INT 2
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 1
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 1
69896: NEG
69897: PUSH
69898: LD_INT 1
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 2
69907: NEG
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 2
69918: NEG
69919: PUSH
69920: LD_INT 1
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 2
69930: NEG
69931: PUSH
69932: LD_INT 2
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 1
69942: NEG
69943: PUSH
69944: LD_INT 3
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 1
69954: PUSH
69955: LD_INT 2
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 3
69965: PUSH
69966: LD_INT 2
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 2
69975: PUSH
69976: LD_INT 3
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 2
69985: NEG
69986: PUSH
69987: LD_INT 1
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 3
69996: NEG
69997: PUSH
69998: LD_INT 1
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70031: LD_ADDR_VAR 0 35
70035: PUSH
70036: LD_INT 0
70038: PUSH
70039: LD_INT 0
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 0
70048: PUSH
70049: LD_INT 1
70051: NEG
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 1
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 1
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: LD_INT 1
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 1
70089: NEG
70090: PUSH
70091: LD_INT 0
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 1
70100: NEG
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: LD_INT 1
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 2
70122: NEG
70123: PUSH
70124: LD_INT 1
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70143: LD_ADDR_VAR 0 36
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 0
70160: PUSH
70161: LD_INT 1
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 1
70171: PUSH
70172: LD_INT 0
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 1
70181: PUSH
70182: LD_INT 1
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: LD_INT 1
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 1
70201: NEG
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 1
70212: NEG
70213: PUSH
70214: LD_INT 1
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 1
70224: NEG
70225: PUSH
70226: LD_INT 2
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 1
70236: PUSH
70237: LD_INT 2
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70255: LD_ADDR_VAR 0 37
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: LD_INT 1
70275: NEG
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 1
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: LD_INT 1
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: LD_INT 1
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 1
70313: NEG
70314: PUSH
70315: LD_INT 0
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 1
70324: NEG
70325: PUSH
70326: LD_INT 1
70328: NEG
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 1
70336: PUSH
70337: LD_INT 1
70339: NEG
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 1
70347: NEG
70348: PUSH
70349: LD_INT 1
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70367: LD_ADDR_VAR 0 38
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 0
70384: PUSH
70385: LD_INT 1
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 1
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: LD_INT 1
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: LD_INT 1
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 1
70425: NEG
70426: PUSH
70427: LD_INT 0
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 1
70436: NEG
70437: PUSH
70438: LD_INT 1
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: LD_INT 1
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 2
70458: NEG
70459: PUSH
70460: LD_INT 1
70462: NEG
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70479: LD_ADDR_VAR 0 39
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: LD_INT 0
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: LD_INT 1
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 1
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 1
70517: PUSH
70518: LD_INT 1
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 0
70527: PUSH
70528: LD_INT 1
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 1
70537: NEG
70538: PUSH
70539: LD_INT 0
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 1
70548: NEG
70549: PUSH
70550: LD_INT 1
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 1
70560: NEG
70561: PUSH
70562: LD_INT 2
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 1
70572: PUSH
70573: LD_INT 2
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70591: LD_ADDR_VAR 0 40
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 0
70608: PUSH
70609: LD_INT 1
70611: NEG
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 1
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 1
70629: PUSH
70630: LD_INT 1
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: LD_INT 1
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 1
70649: NEG
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 1
70660: NEG
70661: PUSH
70662: LD_INT 1
70664: NEG
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 1
70672: PUSH
70673: LD_INT 1
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 1
70683: NEG
70684: PUSH
70685: LD_INT 1
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70703: LD_ADDR_VAR 0 41
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 0
70720: PUSH
70721: LD_INT 1
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 1
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 1
70741: PUSH
70742: LD_INT 1
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: LD_INT 1
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 1
70761: NEG
70762: PUSH
70763: LD_INT 0
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 1
70772: NEG
70773: PUSH
70774: LD_INT 1
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 1
70784: NEG
70785: PUSH
70786: LD_INT 2
70788: NEG
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 1
70796: PUSH
70797: LD_INT 1
70799: NEG
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 2
70807: PUSH
70808: LD_INT 0
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 2
70817: PUSH
70818: LD_INT 1
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 2
70827: PUSH
70828: LD_INT 2
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 1
70837: PUSH
70838: LD_INT 2
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 1
70847: NEG
70848: PUSH
70849: LD_INT 1
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 2
70858: NEG
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 2
70869: NEG
70870: PUSH
70871: LD_INT 1
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 2
70881: NEG
70882: PUSH
70883: LD_INT 2
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 2
70893: NEG
70894: PUSH
70895: LD_INT 3
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 2
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 3
70916: PUSH
70917: LD_INT 0
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 3
70926: PUSH
70927: LD_INT 1
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 3
70936: PUSH
70937: LD_INT 2
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 3
70946: PUSH
70947: LD_INT 3
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 2
70956: PUSH
70957: LD_INT 3
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 2
70966: NEG
70967: PUSH
70968: LD_INT 1
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 3
70977: NEG
70978: PUSH
70979: LD_INT 0
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 3
70988: NEG
70989: PUSH
70990: LD_INT 1
70992: NEG
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 3
71000: NEG
71001: PUSH
71002: LD_INT 2
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 3
71012: NEG
71013: PUSH
71014: LD_INT 3
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71053: LD_ADDR_VAR 0 42
71057: PUSH
71058: LD_INT 0
71060: PUSH
71061: LD_INT 0
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 0
71070: PUSH
71071: LD_INT 1
71073: NEG
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 1
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 1
71091: PUSH
71092: LD_INT 1
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 0
71101: PUSH
71102: LD_INT 1
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 1
71111: NEG
71112: PUSH
71113: LD_INT 0
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 1
71122: NEG
71123: PUSH
71124: LD_INT 1
71126: NEG
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 1
71134: NEG
71135: PUSH
71136: LD_INT 2
71138: NEG
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 0
71146: PUSH
71147: LD_INT 2
71149: NEG
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 1
71157: PUSH
71158: LD_INT 1
71160: NEG
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 2
71168: PUSH
71169: LD_INT 1
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 2
71178: PUSH
71179: LD_INT 2
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 1
71188: PUSH
71189: LD_INT 2
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 0
71198: PUSH
71199: LD_INT 2
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 1
71208: NEG
71209: PUSH
71210: LD_INT 1
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 2
71219: NEG
71220: PUSH
71221: LD_INT 1
71223: NEG
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 2
71231: NEG
71232: PUSH
71233: LD_INT 2
71235: NEG
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 2
71243: NEG
71244: PUSH
71245: LD_INT 3
71247: NEG
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 1
71255: NEG
71256: PUSH
71257: LD_INT 3
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: LD_INT 3
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 1
71278: PUSH
71279: LD_INT 2
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 3
71289: PUSH
71290: LD_INT 2
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 3
71299: PUSH
71300: LD_INT 3
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 2
71309: PUSH
71310: LD_INT 3
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 1
71319: PUSH
71320: LD_INT 3
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: LD_INT 3
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 1
71339: NEG
71340: PUSH
71341: LD_INT 2
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 3
71350: NEG
71351: PUSH
71352: LD_INT 2
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 3
71362: NEG
71363: PUSH
71364: LD_INT 3
71366: NEG
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71403: LD_ADDR_VAR 0 43
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: LD_INT 1
71423: NEG
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 1
71431: PUSH
71432: LD_INT 0
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 1
71441: PUSH
71442: LD_INT 1
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: LD_INT 1
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 1
71461: NEG
71462: PUSH
71463: LD_INT 0
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 1
71472: NEG
71473: PUSH
71474: LD_INT 1
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 1
71484: NEG
71485: PUSH
71486: LD_INT 2
71488: NEG
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 0
71496: PUSH
71497: LD_INT 2
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 1
71507: PUSH
71508: LD_INT 1
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 2
71518: PUSH
71519: LD_INT 0
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 2
71528: PUSH
71529: LD_INT 1
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 1
71538: PUSH
71539: LD_INT 2
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 0
71548: PUSH
71549: LD_INT 2
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 1
71558: NEG
71559: PUSH
71560: LD_INT 1
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 2
71569: NEG
71570: PUSH
71571: LD_INT 0
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 2
71580: NEG
71581: PUSH
71582: LD_INT 1
71584: NEG
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: LD_INT 1
71592: NEG
71593: PUSH
71594: LD_INT 3
71596: NEG
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 0
71604: PUSH
71605: LD_INT 3
71607: NEG
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 1
71615: PUSH
71616: LD_INT 2
71618: NEG
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 2
71626: PUSH
71627: LD_INT 1
71629: NEG
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 3
71637: PUSH
71638: LD_INT 0
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 3
71647: PUSH
71648: LD_INT 1
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 1
71657: PUSH
71658: LD_INT 3
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: LD_INT 3
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 1
71677: NEG
71678: PUSH
71679: LD_INT 2
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 2
71688: NEG
71689: PUSH
71690: LD_INT 1
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 3
71699: NEG
71700: PUSH
71701: LD_INT 0
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 3
71710: NEG
71711: PUSH
71712: LD_INT 1
71714: NEG
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71751: LD_ADDR_VAR 0 44
71755: PUSH
71756: LD_INT 0
71758: PUSH
71759: LD_INT 0
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 0
71768: PUSH
71769: LD_INT 1
71771: NEG
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 1
71779: PUSH
71780: LD_INT 0
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: PUSH
71790: LD_INT 1
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 0
71799: PUSH
71800: LD_INT 1
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 1
71809: NEG
71810: PUSH
71811: LD_INT 0
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 1
71820: NEG
71821: PUSH
71822: LD_INT 1
71824: NEG
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 1
71832: NEG
71833: PUSH
71834: LD_INT 2
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 1
71844: PUSH
71845: LD_INT 1
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 2
71855: PUSH
71856: LD_INT 0
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 2
71865: PUSH
71866: LD_INT 1
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 2
71875: PUSH
71876: LD_INT 2
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 1
71885: PUSH
71886: LD_INT 2
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 1
71895: NEG
71896: PUSH
71897: LD_INT 1
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 2
71906: NEG
71907: PUSH
71908: LD_INT 0
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 2
71917: NEG
71918: PUSH
71919: LD_INT 1
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 2
71929: NEG
71930: PUSH
71931: LD_INT 2
71933: NEG
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 2
71941: NEG
71942: PUSH
71943: LD_INT 3
71945: NEG
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 2
71953: PUSH
71954: LD_INT 1
71956: NEG
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 3
71964: PUSH
71965: LD_INT 0
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 3
71974: PUSH
71975: LD_INT 1
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 3
71984: PUSH
71985: LD_INT 2
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 3
71994: PUSH
71995: LD_INT 3
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 2
72004: PUSH
72005: LD_INT 3
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 2
72014: NEG
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 3
72025: NEG
72026: PUSH
72027: LD_INT 0
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: LD_INT 3
72036: NEG
72037: PUSH
72038: LD_INT 1
72040: NEG
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 3
72048: NEG
72049: PUSH
72050: LD_INT 2
72052: NEG
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 3
72060: NEG
72061: PUSH
72062: LD_INT 3
72064: NEG
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72101: LD_ADDR_VAR 0 45
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: LD_INT 0
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: LD_INT 1
72121: NEG
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: LD_INT 0
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: LD_INT 1
72139: PUSH
72140: LD_INT 1
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: PUSH
72147: LD_INT 0
72149: PUSH
72150: LD_INT 1
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 1
72159: NEG
72160: PUSH
72161: LD_INT 0
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 1
72170: NEG
72171: PUSH
72172: LD_INT 1
72174: NEG
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 1
72182: NEG
72183: PUSH
72184: LD_INT 2
72186: NEG
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 0
72194: PUSH
72195: LD_INT 2
72197: NEG
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 1
72205: PUSH
72206: LD_INT 1
72208: NEG
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 2
72216: PUSH
72217: LD_INT 1
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 2
72226: PUSH
72227: LD_INT 2
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 1
72236: PUSH
72237: LD_INT 2
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 0
72246: PUSH
72247: LD_INT 2
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 1
72256: NEG
72257: PUSH
72258: LD_INT 1
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 2
72267: NEG
72268: PUSH
72269: LD_INT 1
72271: NEG
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 2
72279: NEG
72280: PUSH
72281: LD_INT 2
72283: NEG
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 2
72291: NEG
72292: PUSH
72293: LD_INT 3
72295: NEG
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: LD_INT 1
72303: NEG
72304: PUSH
72305: LD_INT 3
72307: NEG
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 0
72315: PUSH
72316: LD_INT 3
72318: NEG
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 1
72326: PUSH
72327: LD_INT 2
72329: NEG
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 3
72337: PUSH
72338: LD_INT 2
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 3
72347: PUSH
72348: LD_INT 3
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 2
72357: PUSH
72358: LD_INT 3
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 1
72367: PUSH
72368: LD_INT 3
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: LD_INT 3
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 1
72387: NEG
72388: PUSH
72389: LD_INT 2
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 3
72398: NEG
72399: PUSH
72400: LD_INT 2
72402: NEG
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 3
72410: NEG
72411: PUSH
72412: LD_INT 3
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72451: LD_ADDR_VAR 0 46
72455: PUSH
72456: LD_INT 0
72458: PUSH
72459: LD_INT 0
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: LD_INT 1
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 1
72479: PUSH
72480: LD_INT 0
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 1
72489: PUSH
72490: LD_INT 1
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 0
72499: PUSH
72500: LD_INT 1
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 1
72509: NEG
72510: PUSH
72511: LD_INT 0
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 1
72520: NEG
72521: PUSH
72522: LD_INT 1
72524: NEG
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 1
72532: NEG
72533: PUSH
72534: LD_INT 2
72536: NEG
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: PUSH
72542: LD_INT 0
72544: PUSH
72545: LD_INT 2
72547: NEG
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 1
72555: PUSH
72556: LD_INT 1
72558: NEG
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 2
72566: PUSH
72567: LD_INT 0
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 2
72576: PUSH
72577: LD_INT 1
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: LD_INT 1
72586: PUSH
72587: LD_INT 2
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 0
72596: PUSH
72597: LD_INT 2
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 1
72606: NEG
72607: PUSH
72608: LD_INT 1
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 2
72617: NEG
72618: PUSH
72619: LD_INT 0
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 2
72628: NEG
72629: PUSH
72630: LD_INT 1
72632: NEG
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 1
72640: NEG
72641: PUSH
72642: LD_INT 3
72644: NEG
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 0
72652: PUSH
72653: LD_INT 3
72655: NEG
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 1
72663: PUSH
72664: LD_INT 2
72666: NEG
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 2
72674: PUSH
72675: LD_INT 1
72677: NEG
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 3
72685: PUSH
72686: LD_INT 0
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 3
72695: PUSH
72696: LD_INT 1
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 1
72705: PUSH
72706: LD_INT 3
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 0
72715: PUSH
72716: LD_INT 3
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 1
72725: NEG
72726: PUSH
72727: LD_INT 2
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 2
72736: NEG
72737: PUSH
72738: LD_INT 1
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 3
72747: NEG
72748: PUSH
72749: LD_INT 0
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 3
72758: NEG
72759: PUSH
72760: LD_INT 1
72762: NEG
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72799: LD_ADDR_VAR 0 47
72803: PUSH
72804: LD_INT 0
72806: PUSH
72807: LD_INT 0
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: LD_INT 1
72819: NEG
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 1
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 1
72837: PUSH
72838: LD_INT 1
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 0
72847: PUSH
72848: LD_INT 1
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 1
72857: NEG
72858: PUSH
72859: LD_INT 0
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 1
72868: NEG
72869: PUSH
72870: LD_INT 1
72872: NEG
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 1
72880: NEG
72881: PUSH
72882: LD_INT 2
72884: NEG
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 0
72892: PUSH
72893: LD_INT 2
72895: NEG
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 1
72903: PUSH
72904: LD_INT 1
72906: NEG
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 2
72914: NEG
72915: PUSH
72916: LD_INT 1
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 2
72926: NEG
72927: PUSH
72928: LD_INT 2
72930: NEG
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72950: LD_ADDR_VAR 0 48
72954: PUSH
72955: LD_INT 0
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 0
72967: PUSH
72968: LD_INT 1
72970: NEG
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 1
72978: PUSH
72979: LD_INT 0
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: LD_INT 1
72988: PUSH
72989: LD_INT 1
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 0
72998: PUSH
72999: LD_INT 1
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 1
73008: NEG
73009: PUSH
73010: LD_INT 0
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 1
73019: NEG
73020: PUSH
73021: LD_INT 1
73023: NEG
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 1
73031: NEG
73032: PUSH
73033: LD_INT 2
73035: NEG
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 0
73043: PUSH
73044: LD_INT 2
73046: NEG
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 1
73054: PUSH
73055: LD_INT 1
73057: NEG
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 2
73065: PUSH
73066: LD_INT 0
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 2
73075: PUSH
73076: LD_INT 1
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73097: LD_ADDR_VAR 0 49
73101: PUSH
73102: LD_INT 0
73104: PUSH
73105: LD_INT 0
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 0
73114: PUSH
73115: LD_INT 1
73117: NEG
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 1
73125: PUSH
73126: LD_INT 0
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 1
73135: PUSH
73136: LD_INT 1
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 0
73145: PUSH
73146: LD_INT 1
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 1
73155: NEG
73156: PUSH
73157: LD_INT 0
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 1
73166: NEG
73167: PUSH
73168: LD_INT 1
73170: NEG
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 1
73178: PUSH
73179: LD_INT 1
73181: NEG
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PUSH
73187: LD_INT 2
73189: PUSH
73190: LD_INT 0
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: LD_INT 2
73199: PUSH
73200: LD_INT 1
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 2
73209: PUSH
73210: LD_INT 2
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 1
73219: PUSH
73220: LD_INT 2
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73241: LD_ADDR_VAR 0 50
73245: PUSH
73246: LD_INT 0
73248: PUSH
73249: LD_INT 0
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 0
73258: PUSH
73259: LD_INT 1
73261: NEG
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PUSH
73267: LD_INT 1
73269: PUSH
73270: LD_INT 0
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 1
73279: PUSH
73280: LD_INT 1
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: LD_INT 0
73289: PUSH
73290: LD_INT 1
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: LD_INT 1
73299: NEG
73300: PUSH
73301: LD_INT 0
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_INT 1
73310: NEG
73311: PUSH
73312: LD_INT 1
73314: NEG
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 2
73322: PUSH
73323: LD_INT 1
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 2
73332: PUSH
73333: LD_INT 2
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 1
73342: PUSH
73343: LD_INT 2
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 0
73352: PUSH
73353: LD_INT 2
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 1
73362: NEG
73363: PUSH
73364: LD_INT 1
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73385: LD_ADDR_VAR 0 51
73389: PUSH
73390: LD_INT 0
73392: PUSH
73393: LD_INT 0
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 0
73402: PUSH
73403: LD_INT 1
73405: NEG
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 1
73413: PUSH
73414: LD_INT 0
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 1
73423: PUSH
73424: LD_INT 1
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 0
73433: PUSH
73434: LD_INT 1
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 1
73443: NEG
73444: PUSH
73445: LD_INT 0
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 1
73454: NEG
73455: PUSH
73456: LD_INT 1
73458: NEG
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 1
73466: PUSH
73467: LD_INT 2
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 0
73476: PUSH
73477: LD_INT 2
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 1
73486: NEG
73487: PUSH
73488: LD_INT 1
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 2
73497: NEG
73498: PUSH
73499: LD_INT 0
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 2
73508: NEG
73509: PUSH
73510: LD_INT 1
73512: NEG
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73532: LD_ADDR_VAR 0 52
73536: PUSH
73537: LD_INT 0
73539: PUSH
73540: LD_INT 0
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 0
73549: PUSH
73550: LD_INT 1
73552: NEG
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 1
73560: PUSH
73561: LD_INT 0
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 1
73570: PUSH
73571: LD_INT 1
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 0
73580: PUSH
73581: LD_INT 1
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 1
73590: NEG
73591: PUSH
73592: LD_INT 0
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 1
73601: NEG
73602: PUSH
73603: LD_INT 1
73605: NEG
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 1
73613: NEG
73614: PUSH
73615: LD_INT 2
73617: NEG
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: PUSH
73623: LD_INT 1
73625: NEG
73626: PUSH
73627: LD_INT 1
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: PUSH
73634: LD_INT 2
73636: NEG
73637: PUSH
73638: LD_INT 0
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 2
73647: NEG
73648: PUSH
73649: LD_INT 1
73651: NEG
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 2
73659: NEG
73660: PUSH
73661: LD_INT 2
73663: NEG
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73683: LD_ADDR_VAR 0 53
73687: PUSH
73688: LD_INT 0
73690: PUSH
73691: LD_INT 0
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 0
73700: PUSH
73701: LD_INT 1
73703: NEG
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 1
73711: PUSH
73712: LD_INT 0
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: PUSH
73719: LD_INT 1
73721: PUSH
73722: LD_INT 1
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: LD_INT 0
73731: PUSH
73732: LD_INT 1
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 1
73741: NEG
73742: PUSH
73743: LD_INT 0
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 1
73752: NEG
73753: PUSH
73754: LD_INT 1
73756: NEG
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: LD_INT 1
73764: NEG
73765: PUSH
73766: LD_INT 2
73768: NEG
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: LD_INT 0
73776: PUSH
73777: LD_INT 2
73779: NEG
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: LD_INT 1
73787: PUSH
73788: LD_INT 1
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 2
73798: PUSH
73799: LD_INT 0
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 2
73808: PUSH
73809: LD_INT 1
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 2
73818: PUSH
73819: LD_INT 2
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 1
73828: PUSH
73829: LD_INT 2
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 0
73838: PUSH
73839: LD_INT 2
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PUSH
73846: LD_INT 1
73848: NEG
73849: PUSH
73850: LD_INT 1
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 2
73859: NEG
73860: PUSH
73861: LD_INT 0
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 2
73870: NEG
73871: PUSH
73872: LD_INT 1
73874: NEG
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: LD_INT 2
73882: NEG
73883: PUSH
73884: LD_INT 2
73886: NEG
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73913: LD_ADDR_VAR 0 54
73917: PUSH
73918: LD_INT 0
73920: PUSH
73921: LD_INT 0
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: PUSH
73928: LD_INT 0
73930: PUSH
73931: LD_INT 1
73933: NEG
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 1
73941: PUSH
73942: LD_INT 0
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 1
73951: PUSH
73952: LD_INT 1
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 0
73961: PUSH
73962: LD_INT 1
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 1
73971: NEG
73972: PUSH
73973: LD_INT 0
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: PUSH
73980: LD_INT 1
73982: NEG
73983: PUSH
73984: LD_INT 1
73986: NEG
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 1
73994: NEG
73995: PUSH
73996: LD_INT 2
73998: NEG
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: LD_INT 0
74006: PUSH
74007: LD_INT 2
74009: NEG
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: PUSH
74015: LD_INT 1
74017: PUSH
74018: LD_INT 1
74020: NEG
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 2
74028: PUSH
74029: LD_INT 0
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 2
74038: PUSH
74039: LD_INT 1
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 2
74048: PUSH
74049: LD_INT 2
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 1
74058: PUSH
74059: LD_INT 2
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 0
74068: PUSH
74069: LD_INT 2
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 1
74078: NEG
74079: PUSH
74080: LD_INT 1
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 2
74089: NEG
74090: PUSH
74091: LD_INT 0
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: LD_INT 2
74100: NEG
74101: PUSH
74102: LD_INT 1
74104: NEG
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: LD_INT 2
74112: NEG
74113: PUSH
74114: LD_INT 2
74116: NEG
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74143: LD_ADDR_VAR 0 55
74147: PUSH
74148: LD_INT 0
74150: PUSH
74151: LD_INT 0
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 0
74160: PUSH
74161: LD_INT 1
74163: NEG
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 1
74171: PUSH
74172: LD_INT 0
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 1
74181: PUSH
74182: LD_INT 1
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: PUSH
74189: LD_INT 0
74191: PUSH
74192: LD_INT 1
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: PUSH
74199: LD_INT 1
74201: NEG
74202: PUSH
74203: LD_INT 0
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: PUSH
74210: LD_INT 1
74212: NEG
74213: PUSH
74214: LD_INT 1
74216: NEG
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 1
74224: NEG
74225: PUSH
74226: LD_INT 2
74228: NEG
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: PUSH
74234: LD_INT 0
74236: PUSH
74237: LD_INT 2
74239: NEG
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: LD_INT 1
74247: PUSH
74248: LD_INT 1
74250: NEG
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 2
74258: PUSH
74259: LD_INT 0
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 2
74268: PUSH
74269: LD_INT 1
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 2
74278: PUSH
74279: LD_INT 2
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: PUSH
74286: LD_INT 1
74288: PUSH
74289: LD_INT 2
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 0
74298: PUSH
74299: LD_INT 2
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PUSH
74306: LD_INT 1
74308: NEG
74309: PUSH
74310: LD_INT 1
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 2
74319: NEG
74320: PUSH
74321: LD_INT 0
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 2
74330: NEG
74331: PUSH
74332: LD_INT 1
74334: NEG
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 2
74342: NEG
74343: PUSH
74344: LD_INT 2
74346: NEG
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74373: LD_ADDR_VAR 0 56
74377: PUSH
74378: LD_INT 0
74380: PUSH
74381: LD_INT 0
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 0
74390: PUSH
74391: LD_INT 1
74393: NEG
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: LD_INT 1
74401: PUSH
74402: LD_INT 0
74404: PUSH
74405: EMPTY
74406: LIST
74407: LIST
74408: PUSH
74409: LD_INT 1
74411: PUSH
74412: LD_INT 1
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PUSH
74419: LD_INT 0
74421: PUSH
74422: LD_INT 1
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PUSH
74429: LD_INT 1
74431: NEG
74432: PUSH
74433: LD_INT 0
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_INT 1
74442: NEG
74443: PUSH
74444: LD_INT 1
74446: NEG
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: LD_INT 1
74454: NEG
74455: PUSH
74456: LD_INT 2
74458: NEG
74459: PUSH
74460: EMPTY
74461: LIST
74462: LIST
74463: PUSH
74464: LD_INT 0
74466: PUSH
74467: LD_INT 2
74469: NEG
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 1
74477: PUSH
74478: LD_INT 1
74480: NEG
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: PUSH
74486: LD_INT 2
74488: PUSH
74489: LD_INT 0
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 2
74498: PUSH
74499: LD_INT 1
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_INT 2
74508: PUSH
74509: LD_INT 2
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PUSH
74516: LD_INT 1
74518: PUSH
74519: LD_INT 2
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PUSH
74526: LD_INT 0
74528: PUSH
74529: LD_INT 2
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: PUSH
74536: LD_INT 1
74538: NEG
74539: PUSH
74540: LD_INT 1
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 2
74549: NEG
74550: PUSH
74551: LD_INT 0
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: LD_INT 2
74560: NEG
74561: PUSH
74562: LD_INT 1
74564: NEG
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PUSH
74570: LD_INT 2
74572: NEG
74573: PUSH
74574: LD_INT 2
74576: NEG
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: LIST
74596: LIST
74597: LIST
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74603: LD_ADDR_VAR 0 57
74607: PUSH
74608: LD_INT 0
74610: PUSH
74611: LD_INT 0
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 0
74620: PUSH
74621: LD_INT 1
74623: NEG
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 1
74631: PUSH
74632: LD_INT 0
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 1
74641: PUSH
74642: LD_INT 1
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PUSH
74649: LD_INT 0
74651: PUSH
74652: LD_INT 1
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: PUSH
74659: LD_INT 1
74661: NEG
74662: PUSH
74663: LD_INT 0
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: LD_INT 1
74672: NEG
74673: PUSH
74674: LD_INT 1
74676: NEG
74677: PUSH
74678: EMPTY
74679: LIST
74680: LIST
74681: PUSH
74682: LD_INT 1
74684: NEG
74685: PUSH
74686: LD_INT 2
74688: NEG
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 0
74696: PUSH
74697: LD_INT 2
74699: NEG
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 1
74707: PUSH
74708: LD_INT 1
74710: NEG
74711: PUSH
74712: EMPTY
74713: LIST
74714: LIST
74715: PUSH
74716: LD_INT 2
74718: PUSH
74719: LD_INT 0
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PUSH
74726: LD_INT 2
74728: PUSH
74729: LD_INT 1
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_INT 2
74738: PUSH
74739: LD_INT 2
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: PUSH
74746: LD_INT 1
74748: PUSH
74749: LD_INT 2
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: PUSH
74756: LD_INT 0
74758: PUSH
74759: LD_INT 2
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: PUSH
74766: LD_INT 1
74768: NEG
74769: PUSH
74770: LD_INT 1
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PUSH
74777: LD_INT 2
74779: NEG
74780: PUSH
74781: LD_INT 0
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: PUSH
74788: LD_INT 2
74790: NEG
74791: PUSH
74792: LD_INT 1
74794: NEG
74795: PUSH
74796: EMPTY
74797: LIST
74798: LIST
74799: PUSH
74800: LD_INT 2
74802: NEG
74803: PUSH
74804: LD_INT 2
74806: NEG
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74833: LD_ADDR_VAR 0 58
74837: PUSH
74838: LD_INT 0
74840: PUSH
74841: LD_INT 0
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 0
74850: PUSH
74851: LD_INT 1
74853: NEG
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: LD_INT 1
74861: PUSH
74862: LD_INT 0
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PUSH
74869: LD_INT 1
74871: PUSH
74872: LD_INT 1
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: LD_INT 0
74881: PUSH
74882: LD_INT 1
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PUSH
74889: LD_INT 1
74891: NEG
74892: PUSH
74893: LD_INT 0
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: LD_INT 1
74902: NEG
74903: PUSH
74904: LD_INT 1
74906: NEG
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PUSH
74912: LD_INT 1
74914: NEG
74915: PUSH
74916: LD_INT 2
74918: NEG
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 0
74926: PUSH
74927: LD_INT 2
74929: NEG
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 1
74937: PUSH
74938: LD_INT 1
74940: NEG
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 2
74948: PUSH
74949: LD_INT 0
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 2
74958: PUSH
74959: LD_INT 1
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: LD_INT 2
74968: PUSH
74969: LD_INT 2
74971: PUSH
74972: EMPTY
74973: LIST
74974: LIST
74975: PUSH
74976: LD_INT 1
74978: PUSH
74979: LD_INT 2
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: PUSH
74986: LD_INT 0
74988: PUSH
74989: LD_INT 2
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: PUSH
74996: LD_INT 1
74998: NEG
74999: PUSH
75000: LD_INT 1
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PUSH
75007: LD_INT 2
75009: NEG
75010: PUSH
75011: LD_INT 0
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 2
75020: NEG
75021: PUSH
75022: LD_INT 1
75024: NEG
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 2
75032: NEG
75033: PUSH
75034: LD_INT 2
75036: NEG
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: PUSH
75042: EMPTY
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75063: LD_ADDR_VAR 0 59
75067: PUSH
75068: LD_INT 0
75070: PUSH
75071: LD_INT 0
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 0
75080: PUSH
75081: LD_INT 1
75083: NEG
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 1
75091: PUSH
75092: LD_INT 0
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: LD_INT 1
75101: PUSH
75102: LD_INT 1
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: PUSH
75109: LD_INT 0
75111: PUSH
75112: LD_INT 1
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 1
75121: NEG
75122: PUSH
75123: LD_INT 0
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 1
75132: NEG
75133: PUSH
75134: LD_INT 1
75136: NEG
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75151: LD_ADDR_VAR 0 60
75155: PUSH
75156: LD_INT 0
75158: PUSH
75159: LD_INT 0
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: PUSH
75166: LD_INT 0
75168: PUSH
75169: LD_INT 1
75171: NEG
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: LD_INT 1
75179: PUSH
75180: LD_INT 0
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: PUSH
75187: LD_INT 1
75189: PUSH
75190: LD_INT 1
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: PUSH
75197: LD_INT 0
75199: PUSH
75200: LD_INT 1
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: PUSH
75207: LD_INT 1
75209: NEG
75210: PUSH
75211: LD_INT 0
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: PUSH
75218: LD_INT 1
75220: NEG
75221: PUSH
75222: LD_INT 1
75224: NEG
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75239: LD_ADDR_VAR 0 61
75243: PUSH
75244: LD_INT 0
75246: PUSH
75247: LD_INT 0
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PUSH
75254: LD_INT 0
75256: PUSH
75257: LD_INT 1
75259: NEG
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: PUSH
75265: LD_INT 1
75267: PUSH
75268: LD_INT 0
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PUSH
75275: LD_INT 1
75277: PUSH
75278: LD_INT 1
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PUSH
75285: LD_INT 0
75287: PUSH
75288: LD_INT 1
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 1
75297: NEG
75298: PUSH
75299: LD_INT 0
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 1
75308: NEG
75309: PUSH
75310: LD_INT 1
75312: NEG
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75327: LD_ADDR_VAR 0 62
75331: PUSH
75332: LD_INT 0
75334: PUSH
75335: LD_INT 0
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 0
75344: PUSH
75345: LD_INT 1
75347: NEG
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 1
75355: PUSH
75356: LD_INT 0
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: PUSH
75363: LD_INT 1
75365: PUSH
75366: LD_INT 1
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: PUSH
75373: LD_INT 0
75375: PUSH
75376: LD_INT 1
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: PUSH
75383: LD_INT 1
75385: NEG
75386: PUSH
75387: LD_INT 0
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 1
75396: NEG
75397: PUSH
75398: LD_INT 1
75400: NEG
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75415: LD_ADDR_VAR 0 63
75419: PUSH
75420: LD_INT 0
75422: PUSH
75423: LD_INT 0
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: PUSH
75430: LD_INT 0
75432: PUSH
75433: LD_INT 1
75435: NEG
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: PUSH
75441: LD_INT 1
75443: PUSH
75444: LD_INT 0
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: PUSH
75451: LD_INT 1
75453: PUSH
75454: LD_INT 1
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: PUSH
75461: LD_INT 0
75463: PUSH
75464: LD_INT 1
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: LD_INT 1
75473: NEG
75474: PUSH
75475: LD_INT 0
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 1
75484: NEG
75485: PUSH
75486: LD_INT 1
75488: NEG
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75503: LD_ADDR_VAR 0 64
75507: PUSH
75508: LD_INT 0
75510: PUSH
75511: LD_INT 0
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 0
75520: PUSH
75521: LD_INT 1
75523: NEG
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 1
75531: PUSH
75532: LD_INT 0
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PUSH
75539: LD_INT 1
75541: PUSH
75542: LD_INT 1
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 0
75551: PUSH
75552: LD_INT 1
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: PUSH
75559: LD_INT 1
75561: NEG
75562: PUSH
75563: LD_INT 0
75565: PUSH
75566: EMPTY
75567: LIST
75568: LIST
75569: PUSH
75570: LD_INT 1
75572: NEG
75573: PUSH
75574: LD_INT 1
75576: NEG
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: ST_TO_ADDR
// end ; 1 :
75591: GO 81488
75593: LD_INT 1
75595: DOUBLE
75596: EQUAL
75597: IFTRUE 75601
75599: GO 78224
75601: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75602: LD_ADDR_VAR 0 11
75606: PUSH
75607: LD_INT 1
75609: NEG
75610: PUSH
75611: LD_INT 3
75613: NEG
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PUSH
75619: LD_INT 0
75621: PUSH
75622: LD_INT 3
75624: NEG
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PUSH
75630: LD_INT 1
75632: PUSH
75633: LD_INT 2
75635: NEG
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: LIST
75645: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75646: LD_ADDR_VAR 0 12
75650: PUSH
75651: LD_INT 2
75653: PUSH
75654: LD_INT 1
75656: NEG
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PUSH
75662: LD_INT 3
75664: PUSH
75665: LD_INT 0
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: PUSH
75672: LD_INT 3
75674: PUSH
75675: LD_INT 1
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: LIST
75686: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75687: LD_ADDR_VAR 0 13
75691: PUSH
75692: LD_INT 3
75694: PUSH
75695: LD_INT 2
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: PUSH
75702: LD_INT 3
75704: PUSH
75705: LD_INT 3
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: PUSH
75712: LD_INT 2
75714: PUSH
75715: LD_INT 3
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75727: LD_ADDR_VAR 0 14
75731: PUSH
75732: LD_INT 1
75734: PUSH
75735: LD_INT 3
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: PUSH
75742: LD_INT 0
75744: PUSH
75745: LD_INT 3
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PUSH
75752: LD_INT 1
75754: NEG
75755: PUSH
75756: LD_INT 2
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: LIST
75767: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75768: LD_ADDR_VAR 0 15
75772: PUSH
75773: LD_INT 2
75775: NEG
75776: PUSH
75777: LD_INT 1
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PUSH
75784: LD_INT 3
75786: NEG
75787: PUSH
75788: LD_INT 0
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 3
75797: NEG
75798: PUSH
75799: LD_INT 1
75801: NEG
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: LIST
75811: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75812: LD_ADDR_VAR 0 16
75816: PUSH
75817: LD_INT 2
75819: NEG
75820: PUSH
75821: LD_INT 3
75823: NEG
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 3
75831: NEG
75832: PUSH
75833: LD_INT 2
75835: NEG
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PUSH
75841: LD_INT 3
75843: NEG
75844: PUSH
75845: LD_INT 3
75847: NEG
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: LIST
75857: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75858: LD_ADDR_VAR 0 17
75862: PUSH
75863: LD_INT 1
75865: NEG
75866: PUSH
75867: LD_INT 3
75869: NEG
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: PUSH
75875: LD_INT 0
75877: PUSH
75878: LD_INT 3
75880: NEG
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PUSH
75886: LD_INT 1
75888: PUSH
75889: LD_INT 2
75891: NEG
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: LIST
75901: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75902: LD_ADDR_VAR 0 18
75906: PUSH
75907: LD_INT 2
75909: PUSH
75910: LD_INT 1
75912: NEG
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: LD_INT 3
75920: PUSH
75921: LD_INT 0
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 3
75930: PUSH
75931: LD_INT 1
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: LIST
75942: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75943: LD_ADDR_VAR 0 19
75947: PUSH
75948: LD_INT 3
75950: PUSH
75951: LD_INT 2
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: PUSH
75958: LD_INT 3
75960: PUSH
75961: LD_INT 3
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: PUSH
75968: LD_INT 2
75970: PUSH
75971: LD_INT 3
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: LIST
75982: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75983: LD_ADDR_VAR 0 20
75987: PUSH
75988: LD_INT 1
75990: PUSH
75991: LD_INT 3
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PUSH
75998: LD_INT 0
76000: PUSH
76001: LD_INT 3
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 1
76010: NEG
76011: PUSH
76012: LD_INT 2
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: LIST
76023: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76024: LD_ADDR_VAR 0 21
76028: PUSH
76029: LD_INT 2
76031: NEG
76032: PUSH
76033: LD_INT 1
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: PUSH
76040: LD_INT 3
76042: NEG
76043: PUSH
76044: LD_INT 0
76046: PUSH
76047: EMPTY
76048: LIST
76049: LIST
76050: PUSH
76051: LD_INT 3
76053: NEG
76054: PUSH
76055: LD_INT 1
76057: NEG
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: LIST
76067: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76068: LD_ADDR_VAR 0 22
76072: PUSH
76073: LD_INT 2
76075: NEG
76076: PUSH
76077: LD_INT 3
76079: NEG
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 3
76087: NEG
76088: PUSH
76089: LD_INT 2
76091: NEG
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: PUSH
76097: LD_INT 3
76099: NEG
76100: PUSH
76101: LD_INT 3
76103: NEG
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: LIST
76113: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76114: LD_ADDR_VAR 0 23
76118: PUSH
76119: LD_INT 0
76121: PUSH
76122: LD_INT 3
76124: NEG
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: LD_INT 1
76132: NEG
76133: PUSH
76134: LD_INT 4
76136: NEG
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: LD_INT 1
76144: PUSH
76145: LD_INT 3
76147: NEG
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: LIST
76157: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76158: LD_ADDR_VAR 0 24
76162: PUSH
76163: LD_INT 3
76165: PUSH
76166: LD_INT 0
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: PUSH
76173: LD_INT 3
76175: PUSH
76176: LD_INT 1
76178: NEG
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PUSH
76184: LD_INT 4
76186: PUSH
76187: LD_INT 1
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: LIST
76198: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76199: LD_ADDR_VAR 0 25
76203: PUSH
76204: LD_INT 3
76206: PUSH
76207: LD_INT 3
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: PUSH
76214: LD_INT 4
76216: PUSH
76217: LD_INT 3
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: PUSH
76224: LD_INT 3
76226: PUSH
76227: LD_INT 4
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: LIST
76238: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76239: LD_ADDR_VAR 0 26
76243: PUSH
76244: LD_INT 0
76246: PUSH
76247: LD_INT 3
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: PUSH
76254: LD_INT 1
76256: PUSH
76257: LD_INT 4
76259: PUSH
76260: EMPTY
76261: LIST
76262: LIST
76263: PUSH
76264: LD_INT 1
76266: NEG
76267: PUSH
76268: LD_INT 3
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: LIST
76279: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76280: LD_ADDR_VAR 0 27
76284: PUSH
76285: LD_INT 3
76287: NEG
76288: PUSH
76289: LD_INT 0
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 3
76298: NEG
76299: PUSH
76300: LD_INT 1
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 4
76309: NEG
76310: PUSH
76311: LD_INT 1
76313: NEG
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: LIST
76323: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76324: LD_ADDR_VAR 0 28
76328: PUSH
76329: LD_INT 3
76331: NEG
76332: PUSH
76333: LD_INT 3
76335: NEG
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 3
76343: NEG
76344: PUSH
76345: LD_INT 4
76347: NEG
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 4
76355: NEG
76356: PUSH
76357: LD_INT 3
76359: NEG
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: LIST
76369: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76370: LD_ADDR_VAR 0 29
76374: PUSH
76375: LD_INT 1
76377: NEG
76378: PUSH
76379: LD_INT 3
76381: NEG
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: LD_INT 0
76389: PUSH
76390: LD_INT 3
76392: NEG
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: LD_INT 1
76400: PUSH
76401: LD_INT 2
76403: NEG
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: LD_INT 1
76411: NEG
76412: PUSH
76413: LD_INT 4
76415: NEG
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 0
76423: PUSH
76424: LD_INT 4
76426: NEG
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: PUSH
76432: LD_INT 1
76434: PUSH
76435: LD_INT 3
76437: NEG
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PUSH
76443: LD_INT 1
76445: NEG
76446: PUSH
76447: LD_INT 5
76449: NEG
76450: PUSH
76451: EMPTY
76452: LIST
76453: LIST
76454: PUSH
76455: LD_INT 0
76457: PUSH
76458: LD_INT 5
76460: NEG
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: PUSH
76466: LD_INT 1
76468: PUSH
76469: LD_INT 4
76471: NEG
76472: PUSH
76473: EMPTY
76474: LIST
76475: LIST
76476: PUSH
76477: LD_INT 1
76479: NEG
76480: PUSH
76481: LD_INT 6
76483: NEG
76484: PUSH
76485: EMPTY
76486: LIST
76487: LIST
76488: PUSH
76489: LD_INT 0
76491: PUSH
76492: LD_INT 6
76494: NEG
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: PUSH
76500: LD_INT 1
76502: PUSH
76503: LD_INT 5
76505: NEG
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
76525: LD_ADDR_VAR 0 30
76529: PUSH
76530: LD_INT 2
76532: PUSH
76533: LD_INT 1
76535: NEG
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: PUSH
76541: LD_INT 3
76543: PUSH
76544: LD_INT 0
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: PUSH
76551: LD_INT 3
76553: PUSH
76554: LD_INT 1
76556: PUSH
76557: EMPTY
76558: LIST
76559: LIST
76560: PUSH
76561: LD_INT 3
76563: PUSH
76564: LD_INT 1
76566: NEG
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: PUSH
76572: LD_INT 4
76574: PUSH
76575: LD_INT 0
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 4
76584: PUSH
76585: LD_INT 1
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 4
76594: PUSH
76595: LD_INT 1
76597: NEG
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: PUSH
76603: LD_INT 5
76605: PUSH
76606: LD_INT 0
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 5
76615: PUSH
76616: LD_INT 1
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: LD_INT 5
76625: PUSH
76626: LD_INT 1
76628: NEG
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: LD_INT 6
76636: PUSH
76637: LD_INT 0
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: PUSH
76644: LD_INT 6
76646: PUSH
76647: LD_INT 1
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
76668: LD_ADDR_VAR 0 31
76672: PUSH
76673: LD_INT 3
76675: PUSH
76676: LD_INT 2
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: PUSH
76683: LD_INT 3
76685: PUSH
76686: LD_INT 3
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PUSH
76693: LD_INT 2
76695: PUSH
76696: LD_INT 3
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: LD_INT 4
76705: PUSH
76706: LD_INT 3
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: PUSH
76713: LD_INT 4
76715: PUSH
76716: LD_INT 4
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: PUSH
76723: LD_INT 3
76725: PUSH
76726: LD_INT 4
76728: PUSH
76729: EMPTY
76730: LIST
76731: LIST
76732: PUSH
76733: LD_INT 5
76735: PUSH
76736: LD_INT 4
76738: PUSH
76739: EMPTY
76740: LIST
76741: LIST
76742: PUSH
76743: LD_INT 5
76745: PUSH
76746: LD_INT 5
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: PUSH
76753: LD_INT 4
76755: PUSH
76756: LD_INT 5
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 6
76765: PUSH
76766: LD_INT 5
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 6
76775: PUSH
76776: LD_INT 6
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 5
76785: PUSH
76786: LD_INT 6
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: LIST
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: LIST
76804: LIST
76805: LIST
76806: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
76807: LD_ADDR_VAR 0 32
76811: PUSH
76812: LD_INT 1
76814: PUSH
76815: LD_INT 3
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: LD_INT 0
76824: PUSH
76825: LD_INT 3
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PUSH
76832: LD_INT 1
76834: NEG
76835: PUSH
76836: LD_INT 2
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: LD_INT 1
76845: PUSH
76846: LD_INT 4
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: PUSH
76853: LD_INT 0
76855: PUSH
76856: LD_INT 4
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 1
76865: NEG
76866: PUSH
76867: LD_INT 3
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: PUSH
76874: LD_INT 1
76876: PUSH
76877: LD_INT 5
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 0
76886: PUSH
76887: LD_INT 5
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 1
76896: NEG
76897: PUSH
76898: LD_INT 4
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: PUSH
76905: LD_INT 1
76907: PUSH
76908: LD_INT 6
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: PUSH
76915: LD_INT 0
76917: PUSH
76918: LD_INT 6
76920: PUSH
76921: EMPTY
76922: LIST
76923: LIST
76924: PUSH
76925: LD_INT 1
76927: NEG
76928: PUSH
76929: LD_INT 5
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
76950: LD_ADDR_VAR 0 33
76954: PUSH
76955: LD_INT 2
76957: NEG
76958: PUSH
76959: LD_INT 1
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: PUSH
76966: LD_INT 3
76968: NEG
76969: PUSH
76970: LD_INT 0
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: PUSH
76977: LD_INT 3
76979: NEG
76980: PUSH
76981: LD_INT 1
76983: NEG
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: LD_INT 3
76991: NEG
76992: PUSH
76993: LD_INT 1
76995: PUSH
76996: EMPTY
76997: LIST
76998: LIST
76999: PUSH
77000: LD_INT 4
77002: NEG
77003: PUSH
77004: LD_INT 0
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: PUSH
77011: LD_INT 4
77013: NEG
77014: PUSH
77015: LD_INT 1
77017: NEG
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PUSH
77023: LD_INT 4
77025: NEG
77026: PUSH
77027: LD_INT 1
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PUSH
77034: LD_INT 5
77036: NEG
77037: PUSH
77038: LD_INT 0
77040: PUSH
77041: EMPTY
77042: LIST
77043: LIST
77044: PUSH
77045: LD_INT 5
77047: NEG
77048: PUSH
77049: LD_INT 1
77051: NEG
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: PUSH
77057: LD_INT 5
77059: NEG
77060: PUSH
77061: LD_INT 1
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: PUSH
77068: LD_INT 6
77070: NEG
77071: PUSH
77072: LD_INT 0
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: PUSH
77079: LD_INT 6
77081: NEG
77082: PUSH
77083: LD_INT 1
77085: NEG
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: PUSH
77091: EMPTY
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77105: LD_ADDR_VAR 0 34
77109: PUSH
77110: LD_INT 2
77112: NEG
77113: PUSH
77114: LD_INT 3
77116: NEG
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: LD_INT 3
77124: NEG
77125: PUSH
77126: LD_INT 2
77128: NEG
77129: PUSH
77130: EMPTY
77131: LIST
77132: LIST
77133: PUSH
77134: LD_INT 3
77136: NEG
77137: PUSH
77138: LD_INT 3
77140: NEG
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: PUSH
77146: LD_INT 3
77148: NEG
77149: PUSH
77150: LD_INT 4
77152: NEG
77153: PUSH
77154: EMPTY
77155: LIST
77156: LIST
77157: PUSH
77158: LD_INT 4
77160: NEG
77161: PUSH
77162: LD_INT 3
77164: NEG
77165: PUSH
77166: EMPTY
77167: LIST
77168: LIST
77169: PUSH
77170: LD_INT 4
77172: NEG
77173: PUSH
77174: LD_INT 4
77176: NEG
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: PUSH
77182: LD_INT 4
77184: NEG
77185: PUSH
77186: LD_INT 5
77188: NEG
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: PUSH
77194: LD_INT 5
77196: NEG
77197: PUSH
77198: LD_INT 4
77200: NEG
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 5
77208: NEG
77209: PUSH
77210: LD_INT 5
77212: NEG
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: PUSH
77218: LD_INT 5
77220: NEG
77221: PUSH
77222: LD_INT 6
77224: NEG
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 6
77232: NEG
77233: PUSH
77234: LD_INT 5
77236: NEG
77237: PUSH
77238: EMPTY
77239: LIST
77240: LIST
77241: PUSH
77242: LD_INT 6
77244: NEG
77245: PUSH
77246: LD_INT 6
77248: NEG
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: LIST
77258: LIST
77259: LIST
77260: LIST
77261: LIST
77262: LIST
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77268: LD_ADDR_VAR 0 41
77272: PUSH
77273: LD_INT 0
77275: PUSH
77276: LD_INT 2
77278: NEG
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 1
77286: NEG
77287: PUSH
77288: LD_INT 3
77290: NEG
77291: PUSH
77292: EMPTY
77293: LIST
77294: LIST
77295: PUSH
77296: LD_INT 1
77298: PUSH
77299: LD_INT 2
77301: NEG
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: LIST
77311: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77312: LD_ADDR_VAR 0 42
77316: PUSH
77317: LD_INT 2
77319: PUSH
77320: LD_INT 0
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: PUSH
77327: LD_INT 2
77329: PUSH
77330: LD_INT 1
77332: NEG
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: PUSH
77338: LD_INT 3
77340: PUSH
77341: LD_INT 1
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: LIST
77352: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77353: LD_ADDR_VAR 0 43
77357: PUSH
77358: LD_INT 2
77360: PUSH
77361: LD_INT 2
77363: PUSH
77364: EMPTY
77365: LIST
77366: LIST
77367: PUSH
77368: LD_INT 3
77370: PUSH
77371: LD_INT 2
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: PUSH
77378: LD_INT 2
77380: PUSH
77381: LD_INT 3
77383: PUSH
77384: EMPTY
77385: LIST
77386: LIST
77387: PUSH
77388: EMPTY
77389: LIST
77390: LIST
77391: LIST
77392: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77393: LD_ADDR_VAR 0 44
77397: PUSH
77398: LD_INT 0
77400: PUSH
77401: LD_INT 2
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 1
77410: PUSH
77411: LD_INT 3
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: PUSH
77418: LD_INT 1
77420: NEG
77421: PUSH
77422: LD_INT 2
77424: PUSH
77425: EMPTY
77426: LIST
77427: LIST
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: LIST
77433: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77434: LD_ADDR_VAR 0 45
77438: PUSH
77439: LD_INT 2
77441: NEG
77442: PUSH
77443: LD_INT 0
77445: PUSH
77446: EMPTY
77447: LIST
77448: LIST
77449: PUSH
77450: LD_INT 2
77452: NEG
77453: PUSH
77454: LD_INT 1
77456: PUSH
77457: EMPTY
77458: LIST
77459: LIST
77460: PUSH
77461: LD_INT 3
77463: NEG
77464: PUSH
77465: LD_INT 1
77467: NEG
77468: PUSH
77469: EMPTY
77470: LIST
77471: LIST
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: LIST
77477: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
77478: LD_ADDR_VAR 0 46
77482: PUSH
77483: LD_INT 2
77485: NEG
77486: PUSH
77487: LD_INT 2
77489: NEG
77490: PUSH
77491: EMPTY
77492: LIST
77493: LIST
77494: PUSH
77495: LD_INT 2
77497: NEG
77498: PUSH
77499: LD_INT 3
77501: NEG
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: PUSH
77507: LD_INT 3
77509: NEG
77510: PUSH
77511: LD_INT 2
77513: NEG
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: LIST
77523: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
77524: LD_ADDR_VAR 0 47
77528: PUSH
77529: LD_INT 2
77531: NEG
77532: PUSH
77533: LD_INT 3
77535: NEG
77536: PUSH
77537: EMPTY
77538: LIST
77539: LIST
77540: PUSH
77541: LD_INT 1
77543: NEG
77544: PUSH
77545: LD_INT 3
77547: NEG
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: EMPTY
77554: LIST
77555: LIST
77556: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77557: LD_ADDR_VAR 0 48
77561: PUSH
77562: LD_INT 1
77564: PUSH
77565: LD_INT 2
77567: NEG
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: LD_INT 2
77575: PUSH
77576: LD_INT 1
77578: NEG
77579: PUSH
77580: EMPTY
77581: LIST
77582: LIST
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
77588: LD_ADDR_VAR 0 49
77592: PUSH
77593: LD_INT 3
77595: PUSH
77596: LD_INT 1
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 3
77605: PUSH
77606: LD_INT 2
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: EMPTY
77614: LIST
77615: LIST
77616: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
77617: LD_ADDR_VAR 0 50
77621: PUSH
77622: LD_INT 2
77624: PUSH
77625: LD_INT 3
77627: PUSH
77628: EMPTY
77629: LIST
77630: LIST
77631: PUSH
77632: LD_INT 1
77634: PUSH
77635: LD_INT 3
77637: PUSH
77638: EMPTY
77639: LIST
77640: LIST
77641: PUSH
77642: EMPTY
77643: LIST
77644: LIST
77645: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
77646: LD_ADDR_VAR 0 51
77650: PUSH
77651: LD_INT 1
77653: NEG
77654: PUSH
77655: LD_INT 2
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PUSH
77662: LD_INT 2
77664: NEG
77665: PUSH
77666: LD_INT 1
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: EMPTY
77674: LIST
77675: LIST
77676: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
77677: LD_ADDR_VAR 0 52
77681: PUSH
77682: LD_INT 3
77684: NEG
77685: PUSH
77686: LD_INT 1
77688: NEG
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: PUSH
77694: LD_INT 3
77696: NEG
77697: PUSH
77698: LD_INT 2
77700: NEG
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: PUSH
77706: EMPTY
77707: LIST
77708: LIST
77709: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
77710: LD_ADDR_VAR 0 53
77714: PUSH
77715: LD_INT 1
77717: NEG
77718: PUSH
77719: LD_INT 3
77721: NEG
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PUSH
77727: LD_INT 0
77729: PUSH
77730: LD_INT 3
77732: NEG
77733: PUSH
77734: EMPTY
77735: LIST
77736: LIST
77737: PUSH
77738: LD_INT 1
77740: PUSH
77741: LD_INT 2
77743: NEG
77744: PUSH
77745: EMPTY
77746: LIST
77747: LIST
77748: PUSH
77749: EMPTY
77750: LIST
77751: LIST
77752: LIST
77753: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
77754: LD_ADDR_VAR 0 54
77758: PUSH
77759: LD_INT 2
77761: PUSH
77762: LD_INT 1
77764: NEG
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 3
77772: PUSH
77773: LD_INT 0
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 3
77782: PUSH
77783: LD_INT 1
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: LIST
77794: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
77795: LD_ADDR_VAR 0 55
77799: PUSH
77800: LD_INT 3
77802: PUSH
77803: LD_INT 2
77805: PUSH
77806: EMPTY
77807: LIST
77808: LIST
77809: PUSH
77810: LD_INT 3
77812: PUSH
77813: LD_INT 3
77815: PUSH
77816: EMPTY
77817: LIST
77818: LIST
77819: PUSH
77820: LD_INT 2
77822: PUSH
77823: LD_INT 3
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: PUSH
77830: EMPTY
77831: LIST
77832: LIST
77833: LIST
77834: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
77835: LD_ADDR_VAR 0 56
77839: PUSH
77840: LD_INT 1
77842: PUSH
77843: LD_INT 3
77845: PUSH
77846: EMPTY
77847: LIST
77848: LIST
77849: PUSH
77850: LD_INT 0
77852: PUSH
77853: LD_INT 3
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: PUSH
77860: LD_INT 1
77862: NEG
77863: PUSH
77864: LD_INT 2
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: PUSH
77871: EMPTY
77872: LIST
77873: LIST
77874: LIST
77875: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77876: LD_ADDR_VAR 0 57
77880: PUSH
77881: LD_INT 2
77883: NEG
77884: PUSH
77885: LD_INT 1
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PUSH
77892: LD_INT 3
77894: NEG
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PUSH
77903: LD_INT 3
77905: NEG
77906: PUSH
77907: LD_INT 1
77909: NEG
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: LIST
77919: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77920: LD_ADDR_VAR 0 58
77924: PUSH
77925: LD_INT 2
77927: NEG
77928: PUSH
77929: LD_INT 3
77931: NEG
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: PUSH
77937: LD_INT 3
77939: NEG
77940: PUSH
77941: LD_INT 2
77943: NEG
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: LD_INT 3
77951: NEG
77952: PUSH
77953: LD_INT 3
77955: NEG
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: LIST
77965: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
77966: LD_ADDR_VAR 0 59
77970: PUSH
77971: LD_INT 1
77973: NEG
77974: PUSH
77975: LD_INT 2
77977: NEG
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: LD_INT 0
77985: PUSH
77986: LD_INT 2
77988: NEG
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PUSH
77994: LD_INT 1
77996: PUSH
77997: LD_INT 1
77999: NEG
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: LIST
78009: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78010: LD_ADDR_VAR 0 60
78014: PUSH
78015: LD_INT 1
78017: PUSH
78018: LD_INT 1
78020: NEG
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: PUSH
78026: LD_INT 2
78028: PUSH
78029: LD_INT 0
78031: PUSH
78032: EMPTY
78033: LIST
78034: LIST
78035: PUSH
78036: LD_INT 2
78038: PUSH
78039: LD_INT 1
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: LIST
78050: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78051: LD_ADDR_VAR 0 61
78055: PUSH
78056: LD_INT 2
78058: PUSH
78059: LD_INT 1
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: PUSH
78066: LD_INT 2
78068: PUSH
78069: LD_INT 2
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: PUSH
78076: LD_INT 1
78078: PUSH
78079: LD_INT 2
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: PUSH
78086: EMPTY
78087: LIST
78088: LIST
78089: LIST
78090: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78091: LD_ADDR_VAR 0 62
78095: PUSH
78096: LD_INT 1
78098: PUSH
78099: LD_INT 2
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: PUSH
78106: LD_INT 0
78108: PUSH
78109: LD_INT 2
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: PUSH
78116: LD_INT 1
78118: NEG
78119: PUSH
78120: LD_INT 1
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: LIST
78131: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78132: LD_ADDR_VAR 0 63
78136: PUSH
78137: LD_INT 1
78139: NEG
78140: PUSH
78141: LD_INT 1
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: PUSH
78148: LD_INT 2
78150: NEG
78151: PUSH
78152: LD_INT 0
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PUSH
78159: LD_INT 2
78161: NEG
78162: PUSH
78163: LD_INT 1
78165: NEG
78166: PUSH
78167: EMPTY
78168: LIST
78169: LIST
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: LIST
78175: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78176: LD_ADDR_VAR 0 64
78180: PUSH
78181: LD_INT 1
78183: NEG
78184: PUSH
78185: LD_INT 2
78187: NEG
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: PUSH
78193: LD_INT 2
78195: NEG
78196: PUSH
78197: LD_INT 1
78199: NEG
78200: PUSH
78201: EMPTY
78202: LIST
78203: LIST
78204: PUSH
78205: LD_INT 2
78207: NEG
78208: PUSH
78209: LD_INT 2
78211: NEG
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: PUSH
78217: EMPTY
78218: LIST
78219: LIST
78220: LIST
78221: ST_TO_ADDR
// end ; 2 :
78222: GO 81488
78224: LD_INT 2
78226: DOUBLE
78227: EQUAL
78228: IFTRUE 78232
78230: GO 81487
78232: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78233: LD_ADDR_VAR 0 29
78237: PUSH
78238: LD_INT 4
78240: PUSH
78241: LD_INT 0
78243: PUSH
78244: EMPTY
78245: LIST
78246: LIST
78247: PUSH
78248: LD_INT 4
78250: PUSH
78251: LD_INT 1
78253: NEG
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: LD_INT 5
78261: PUSH
78262: LD_INT 0
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: PUSH
78269: LD_INT 5
78271: PUSH
78272: LD_INT 1
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PUSH
78279: LD_INT 4
78281: PUSH
78282: LD_INT 1
78284: PUSH
78285: EMPTY
78286: LIST
78287: LIST
78288: PUSH
78289: LD_INT 3
78291: PUSH
78292: LD_INT 0
78294: PUSH
78295: EMPTY
78296: LIST
78297: LIST
78298: PUSH
78299: LD_INT 3
78301: PUSH
78302: LD_INT 1
78304: NEG
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: PUSH
78310: LD_INT 3
78312: PUSH
78313: LD_INT 2
78315: NEG
78316: PUSH
78317: EMPTY
78318: LIST
78319: LIST
78320: PUSH
78321: LD_INT 5
78323: PUSH
78324: LD_INT 2
78326: PUSH
78327: EMPTY
78328: LIST
78329: LIST
78330: PUSH
78331: LD_INT 3
78333: PUSH
78334: LD_INT 3
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: PUSH
78341: LD_INT 3
78343: PUSH
78344: LD_INT 2
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: PUSH
78351: LD_INT 4
78353: PUSH
78354: LD_INT 3
78356: PUSH
78357: EMPTY
78358: LIST
78359: LIST
78360: PUSH
78361: LD_INT 4
78363: PUSH
78364: LD_INT 4
78366: PUSH
78367: EMPTY
78368: LIST
78369: LIST
78370: PUSH
78371: LD_INT 3
78373: PUSH
78374: LD_INT 4
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: PUSH
78381: LD_INT 2
78383: PUSH
78384: LD_INT 3
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PUSH
78391: LD_INT 2
78393: PUSH
78394: LD_INT 2
78396: PUSH
78397: EMPTY
78398: LIST
78399: LIST
78400: PUSH
78401: LD_INT 4
78403: PUSH
78404: LD_INT 2
78406: PUSH
78407: EMPTY
78408: LIST
78409: LIST
78410: PUSH
78411: LD_INT 2
78413: PUSH
78414: LD_INT 4
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: PUSH
78421: LD_INT 0
78423: PUSH
78424: LD_INT 4
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: PUSH
78431: LD_INT 0
78433: PUSH
78434: LD_INT 3
78436: PUSH
78437: EMPTY
78438: LIST
78439: LIST
78440: PUSH
78441: LD_INT 1
78443: PUSH
78444: LD_INT 4
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: PUSH
78451: LD_INT 1
78453: PUSH
78454: LD_INT 5
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: PUSH
78461: LD_INT 0
78463: PUSH
78464: LD_INT 5
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: PUSH
78471: LD_INT 1
78473: NEG
78474: PUSH
78475: LD_INT 4
78477: PUSH
78478: EMPTY
78479: LIST
78480: LIST
78481: PUSH
78482: LD_INT 1
78484: NEG
78485: PUSH
78486: LD_INT 3
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PUSH
78493: LD_INT 2
78495: PUSH
78496: LD_INT 5
78498: PUSH
78499: EMPTY
78500: LIST
78501: LIST
78502: PUSH
78503: LD_INT 2
78505: NEG
78506: PUSH
78507: LD_INT 3
78509: PUSH
78510: EMPTY
78511: LIST
78512: LIST
78513: PUSH
78514: LD_INT 3
78516: NEG
78517: PUSH
78518: LD_INT 0
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: PUSH
78525: LD_INT 3
78527: NEG
78528: PUSH
78529: LD_INT 1
78531: NEG
78532: PUSH
78533: EMPTY
78534: LIST
78535: LIST
78536: PUSH
78537: LD_INT 2
78539: NEG
78540: PUSH
78541: LD_INT 0
78543: PUSH
78544: EMPTY
78545: LIST
78546: LIST
78547: PUSH
78548: LD_INT 2
78550: NEG
78551: PUSH
78552: LD_INT 1
78554: PUSH
78555: EMPTY
78556: LIST
78557: LIST
78558: PUSH
78559: LD_INT 3
78561: NEG
78562: PUSH
78563: LD_INT 1
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: LD_INT 4
78572: NEG
78573: PUSH
78574: LD_INT 0
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PUSH
78581: LD_INT 4
78583: NEG
78584: PUSH
78585: LD_INT 1
78587: NEG
78588: PUSH
78589: EMPTY
78590: LIST
78591: LIST
78592: PUSH
78593: LD_INT 4
78595: NEG
78596: PUSH
78597: LD_INT 2
78599: NEG
78600: PUSH
78601: EMPTY
78602: LIST
78603: LIST
78604: PUSH
78605: LD_INT 2
78607: NEG
78608: PUSH
78609: LD_INT 2
78611: PUSH
78612: EMPTY
78613: LIST
78614: LIST
78615: PUSH
78616: LD_INT 4
78618: NEG
78619: PUSH
78620: LD_INT 4
78622: NEG
78623: PUSH
78624: EMPTY
78625: LIST
78626: LIST
78627: PUSH
78628: LD_INT 4
78630: NEG
78631: PUSH
78632: LD_INT 5
78634: NEG
78635: PUSH
78636: EMPTY
78637: LIST
78638: LIST
78639: PUSH
78640: LD_INT 3
78642: NEG
78643: PUSH
78644: LD_INT 4
78646: NEG
78647: PUSH
78648: EMPTY
78649: LIST
78650: LIST
78651: PUSH
78652: LD_INT 3
78654: NEG
78655: PUSH
78656: LD_INT 3
78658: NEG
78659: PUSH
78660: EMPTY
78661: LIST
78662: LIST
78663: PUSH
78664: LD_INT 4
78666: NEG
78667: PUSH
78668: LD_INT 3
78670: NEG
78671: PUSH
78672: EMPTY
78673: LIST
78674: LIST
78675: PUSH
78676: LD_INT 5
78678: NEG
78679: PUSH
78680: LD_INT 4
78682: NEG
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: PUSH
78688: LD_INT 5
78690: NEG
78691: PUSH
78692: LD_INT 5
78694: NEG
78695: PUSH
78696: EMPTY
78697: LIST
78698: LIST
78699: PUSH
78700: LD_INT 3
78702: NEG
78703: PUSH
78704: LD_INT 5
78706: NEG
78707: PUSH
78708: EMPTY
78709: LIST
78710: LIST
78711: PUSH
78712: LD_INT 5
78714: NEG
78715: PUSH
78716: LD_INT 3
78718: NEG
78719: PUSH
78720: EMPTY
78721: LIST
78722: LIST
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: LIST
78728: LIST
78729: LIST
78730: LIST
78731: LIST
78732: LIST
78733: LIST
78734: LIST
78735: LIST
78736: LIST
78737: LIST
78738: LIST
78739: LIST
78740: LIST
78741: LIST
78742: LIST
78743: LIST
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: LIST
78752: LIST
78753: LIST
78754: LIST
78755: LIST
78756: LIST
78757: LIST
78758: LIST
78759: LIST
78760: LIST
78761: LIST
78762: LIST
78763: LIST
78764: LIST
78765: LIST
78766: LIST
78767: LIST
78768: LIST
78769: LIST
78770: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
78771: LD_ADDR_VAR 0 30
78775: PUSH
78776: LD_INT 4
78778: PUSH
78779: LD_INT 4
78781: PUSH
78782: EMPTY
78783: LIST
78784: LIST
78785: PUSH
78786: LD_INT 4
78788: PUSH
78789: LD_INT 3
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: PUSH
78796: LD_INT 5
78798: PUSH
78799: LD_INT 4
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 5
78808: PUSH
78809: LD_INT 5
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PUSH
78816: LD_INT 4
78818: PUSH
78819: LD_INT 5
78821: PUSH
78822: EMPTY
78823: LIST
78824: LIST
78825: PUSH
78826: LD_INT 3
78828: PUSH
78829: LD_INT 4
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: PUSH
78836: LD_INT 3
78838: PUSH
78839: LD_INT 3
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: PUSH
78846: LD_INT 5
78848: PUSH
78849: LD_INT 3
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PUSH
78856: LD_INT 3
78858: PUSH
78859: LD_INT 5
78861: PUSH
78862: EMPTY
78863: LIST
78864: LIST
78865: PUSH
78866: LD_INT 0
78868: PUSH
78869: LD_INT 3
78871: PUSH
78872: EMPTY
78873: LIST
78874: LIST
78875: PUSH
78876: LD_INT 0
78878: PUSH
78879: LD_INT 2
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PUSH
78886: LD_INT 1
78888: PUSH
78889: LD_INT 3
78891: PUSH
78892: EMPTY
78893: LIST
78894: LIST
78895: PUSH
78896: LD_INT 1
78898: PUSH
78899: LD_INT 4
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: PUSH
78906: LD_INT 0
78908: PUSH
78909: LD_INT 4
78911: PUSH
78912: EMPTY
78913: LIST
78914: LIST
78915: PUSH
78916: LD_INT 1
78918: NEG
78919: PUSH
78920: LD_INT 3
78922: PUSH
78923: EMPTY
78924: LIST
78925: LIST
78926: PUSH
78927: LD_INT 1
78929: NEG
78930: PUSH
78931: LD_INT 2
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: LD_INT 2
78940: PUSH
78941: LD_INT 4
78943: PUSH
78944: EMPTY
78945: LIST
78946: LIST
78947: PUSH
78948: LD_INT 2
78950: NEG
78951: PUSH
78952: LD_INT 2
78954: PUSH
78955: EMPTY
78956: LIST
78957: LIST
78958: PUSH
78959: LD_INT 4
78961: NEG
78962: PUSH
78963: LD_INT 0
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: PUSH
78970: LD_INT 4
78972: NEG
78973: PUSH
78974: LD_INT 1
78976: NEG
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: PUSH
78982: LD_INT 3
78984: NEG
78985: PUSH
78986: LD_INT 0
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: PUSH
78993: LD_INT 3
78995: NEG
78996: PUSH
78997: LD_INT 1
78999: PUSH
79000: EMPTY
79001: LIST
79002: LIST
79003: PUSH
79004: LD_INT 4
79006: NEG
79007: PUSH
79008: LD_INT 1
79010: PUSH
79011: EMPTY
79012: LIST
79013: LIST
79014: PUSH
79015: LD_INT 5
79017: NEG
79018: PUSH
79019: LD_INT 0
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: PUSH
79026: LD_INT 5
79028: NEG
79029: PUSH
79030: LD_INT 1
79032: NEG
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: PUSH
79038: LD_INT 5
79040: NEG
79041: PUSH
79042: LD_INT 2
79044: NEG
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PUSH
79050: LD_INT 3
79052: NEG
79053: PUSH
79054: LD_INT 2
79056: PUSH
79057: EMPTY
79058: LIST
79059: LIST
79060: PUSH
79061: LD_INT 3
79063: NEG
79064: PUSH
79065: LD_INT 3
79067: NEG
79068: PUSH
79069: EMPTY
79070: LIST
79071: LIST
79072: PUSH
79073: LD_INT 3
79075: NEG
79076: PUSH
79077: LD_INT 4
79079: NEG
79080: PUSH
79081: EMPTY
79082: LIST
79083: LIST
79084: PUSH
79085: LD_INT 2
79087: NEG
79088: PUSH
79089: LD_INT 3
79091: NEG
79092: PUSH
79093: EMPTY
79094: LIST
79095: LIST
79096: PUSH
79097: LD_INT 2
79099: NEG
79100: PUSH
79101: LD_INT 2
79103: NEG
79104: PUSH
79105: EMPTY
79106: LIST
79107: LIST
79108: PUSH
79109: LD_INT 3
79111: NEG
79112: PUSH
79113: LD_INT 2
79115: NEG
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: PUSH
79121: LD_INT 4
79123: NEG
79124: PUSH
79125: LD_INT 3
79127: NEG
79128: PUSH
79129: EMPTY
79130: LIST
79131: LIST
79132: PUSH
79133: LD_INT 4
79135: NEG
79136: PUSH
79137: LD_INT 4
79139: NEG
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: PUSH
79145: LD_INT 2
79147: NEG
79148: PUSH
79149: LD_INT 4
79151: NEG
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: PUSH
79157: LD_INT 4
79159: NEG
79160: PUSH
79161: LD_INT 2
79163: NEG
79164: PUSH
79165: EMPTY
79166: LIST
79167: LIST
79168: PUSH
79169: LD_INT 0
79171: PUSH
79172: LD_INT 4
79174: NEG
79175: PUSH
79176: EMPTY
79177: LIST
79178: LIST
79179: PUSH
79180: LD_INT 0
79182: PUSH
79183: LD_INT 5
79185: NEG
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: PUSH
79191: LD_INT 1
79193: PUSH
79194: LD_INT 4
79196: NEG
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: PUSH
79202: LD_INT 1
79204: PUSH
79205: LD_INT 3
79207: NEG
79208: PUSH
79209: EMPTY
79210: LIST
79211: LIST
79212: PUSH
79213: LD_INT 0
79215: PUSH
79216: LD_INT 3
79218: NEG
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: PUSH
79224: LD_INT 1
79226: NEG
79227: PUSH
79228: LD_INT 4
79230: NEG
79231: PUSH
79232: EMPTY
79233: LIST
79234: LIST
79235: PUSH
79236: LD_INT 1
79238: NEG
79239: PUSH
79240: LD_INT 5
79242: NEG
79243: PUSH
79244: EMPTY
79245: LIST
79246: LIST
79247: PUSH
79248: LD_INT 2
79250: PUSH
79251: LD_INT 3
79253: NEG
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: PUSH
79259: LD_INT 2
79261: NEG
79262: PUSH
79263: LD_INT 5
79265: NEG
79266: PUSH
79267: EMPTY
79268: LIST
79269: LIST
79270: PUSH
79271: EMPTY
79272: LIST
79273: LIST
79274: LIST
79275: LIST
79276: LIST
79277: LIST
79278: LIST
79279: LIST
79280: LIST
79281: LIST
79282: LIST
79283: LIST
79284: LIST
79285: LIST
79286: LIST
79287: LIST
79288: LIST
79289: LIST
79290: LIST
79291: LIST
79292: LIST
79293: LIST
79294: LIST
79295: LIST
79296: LIST
79297: LIST
79298: LIST
79299: LIST
79300: LIST
79301: LIST
79302: LIST
79303: LIST
79304: LIST
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79318: LD_ADDR_VAR 0 31
79322: PUSH
79323: LD_INT 0
79325: PUSH
79326: LD_INT 4
79328: PUSH
79329: EMPTY
79330: LIST
79331: LIST
79332: PUSH
79333: LD_INT 0
79335: PUSH
79336: LD_INT 3
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: PUSH
79343: LD_INT 1
79345: PUSH
79346: LD_INT 4
79348: PUSH
79349: EMPTY
79350: LIST
79351: LIST
79352: PUSH
79353: LD_INT 1
79355: PUSH
79356: LD_INT 5
79358: PUSH
79359: EMPTY
79360: LIST
79361: LIST
79362: PUSH
79363: LD_INT 0
79365: PUSH
79366: LD_INT 5
79368: PUSH
79369: EMPTY
79370: LIST
79371: LIST
79372: PUSH
79373: LD_INT 1
79375: NEG
79376: PUSH
79377: LD_INT 4
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: LD_INT 1
79386: NEG
79387: PUSH
79388: LD_INT 3
79390: PUSH
79391: EMPTY
79392: LIST
79393: LIST
79394: PUSH
79395: LD_INT 2
79397: PUSH
79398: LD_INT 5
79400: PUSH
79401: EMPTY
79402: LIST
79403: LIST
79404: PUSH
79405: LD_INT 2
79407: NEG
79408: PUSH
79409: LD_INT 3
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: PUSH
79416: LD_INT 3
79418: NEG
79419: PUSH
79420: LD_INT 0
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: PUSH
79427: LD_INT 3
79429: NEG
79430: PUSH
79431: LD_INT 1
79433: NEG
79434: PUSH
79435: EMPTY
79436: LIST
79437: LIST
79438: PUSH
79439: LD_INT 2
79441: NEG
79442: PUSH
79443: LD_INT 0
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 2
79452: NEG
79453: PUSH
79454: LD_INT 1
79456: PUSH
79457: EMPTY
79458: LIST
79459: LIST
79460: PUSH
79461: LD_INT 3
79463: NEG
79464: PUSH
79465: LD_INT 1
79467: PUSH
79468: EMPTY
79469: LIST
79470: LIST
79471: PUSH
79472: LD_INT 4
79474: NEG
79475: PUSH
79476: LD_INT 0
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: PUSH
79483: LD_INT 4
79485: NEG
79486: PUSH
79487: LD_INT 1
79489: NEG
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: LD_INT 4
79497: NEG
79498: PUSH
79499: LD_INT 2
79501: NEG
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PUSH
79507: LD_INT 2
79509: NEG
79510: PUSH
79511: LD_INT 2
79513: PUSH
79514: EMPTY
79515: LIST
79516: LIST
79517: PUSH
79518: LD_INT 4
79520: NEG
79521: PUSH
79522: LD_INT 4
79524: NEG
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: PUSH
79530: LD_INT 4
79532: NEG
79533: PUSH
79534: LD_INT 5
79536: NEG
79537: PUSH
79538: EMPTY
79539: LIST
79540: LIST
79541: PUSH
79542: LD_INT 3
79544: NEG
79545: PUSH
79546: LD_INT 4
79548: NEG
79549: PUSH
79550: EMPTY
79551: LIST
79552: LIST
79553: PUSH
79554: LD_INT 3
79556: NEG
79557: PUSH
79558: LD_INT 3
79560: NEG
79561: PUSH
79562: EMPTY
79563: LIST
79564: LIST
79565: PUSH
79566: LD_INT 4
79568: NEG
79569: PUSH
79570: LD_INT 3
79572: NEG
79573: PUSH
79574: EMPTY
79575: LIST
79576: LIST
79577: PUSH
79578: LD_INT 5
79580: NEG
79581: PUSH
79582: LD_INT 4
79584: NEG
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: PUSH
79590: LD_INT 5
79592: NEG
79593: PUSH
79594: LD_INT 5
79596: NEG
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 3
79604: NEG
79605: PUSH
79606: LD_INT 5
79608: NEG
79609: PUSH
79610: EMPTY
79611: LIST
79612: LIST
79613: PUSH
79614: LD_INT 5
79616: NEG
79617: PUSH
79618: LD_INT 3
79620: NEG
79621: PUSH
79622: EMPTY
79623: LIST
79624: LIST
79625: PUSH
79626: LD_INT 0
79628: PUSH
79629: LD_INT 3
79631: NEG
79632: PUSH
79633: EMPTY
79634: LIST
79635: LIST
79636: PUSH
79637: LD_INT 0
79639: PUSH
79640: LD_INT 4
79642: NEG
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: PUSH
79648: LD_INT 1
79650: PUSH
79651: LD_INT 3
79653: NEG
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: PUSH
79659: LD_INT 1
79661: PUSH
79662: LD_INT 2
79664: NEG
79665: PUSH
79666: EMPTY
79667: LIST
79668: LIST
79669: PUSH
79670: LD_INT 0
79672: PUSH
79673: LD_INT 2
79675: NEG
79676: PUSH
79677: EMPTY
79678: LIST
79679: LIST
79680: PUSH
79681: LD_INT 1
79683: NEG
79684: PUSH
79685: LD_INT 3
79687: NEG
79688: PUSH
79689: EMPTY
79690: LIST
79691: LIST
79692: PUSH
79693: LD_INT 1
79695: NEG
79696: PUSH
79697: LD_INT 4
79699: NEG
79700: PUSH
79701: EMPTY
79702: LIST
79703: LIST
79704: PUSH
79705: LD_INT 2
79707: PUSH
79708: LD_INT 2
79710: NEG
79711: PUSH
79712: EMPTY
79713: LIST
79714: LIST
79715: PUSH
79716: LD_INT 2
79718: NEG
79719: PUSH
79720: LD_INT 4
79722: NEG
79723: PUSH
79724: EMPTY
79725: LIST
79726: LIST
79727: PUSH
79728: LD_INT 4
79730: PUSH
79731: LD_INT 0
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: LD_INT 4
79740: PUSH
79741: LD_INT 1
79743: NEG
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PUSH
79749: LD_INT 5
79751: PUSH
79752: LD_INT 0
79754: PUSH
79755: EMPTY
79756: LIST
79757: LIST
79758: PUSH
79759: LD_INT 5
79761: PUSH
79762: LD_INT 1
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: PUSH
79769: LD_INT 4
79771: PUSH
79772: LD_INT 1
79774: PUSH
79775: EMPTY
79776: LIST
79777: LIST
79778: PUSH
79779: LD_INT 3
79781: PUSH
79782: LD_INT 0
79784: PUSH
79785: EMPTY
79786: LIST
79787: LIST
79788: PUSH
79789: LD_INT 3
79791: PUSH
79792: LD_INT 1
79794: NEG
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: PUSH
79800: LD_INT 3
79802: PUSH
79803: LD_INT 2
79805: NEG
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PUSH
79811: LD_INT 5
79813: PUSH
79814: LD_INT 2
79816: PUSH
79817: EMPTY
79818: LIST
79819: LIST
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: LIST
79825: LIST
79826: LIST
79827: LIST
79828: LIST
79829: LIST
79830: LIST
79831: LIST
79832: LIST
79833: LIST
79834: LIST
79835: LIST
79836: LIST
79837: LIST
79838: LIST
79839: LIST
79840: LIST
79841: LIST
79842: LIST
79843: LIST
79844: LIST
79845: LIST
79846: LIST
79847: LIST
79848: LIST
79849: LIST
79850: LIST
79851: LIST
79852: LIST
79853: LIST
79854: LIST
79855: LIST
79856: LIST
79857: LIST
79858: LIST
79859: LIST
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: LIST
79867: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
79868: LD_ADDR_VAR 0 32
79872: PUSH
79873: LD_INT 4
79875: NEG
79876: PUSH
79877: LD_INT 0
79879: PUSH
79880: EMPTY
79881: LIST
79882: LIST
79883: PUSH
79884: LD_INT 4
79886: NEG
79887: PUSH
79888: LD_INT 1
79890: NEG
79891: PUSH
79892: EMPTY
79893: LIST
79894: LIST
79895: PUSH
79896: LD_INT 3
79898: NEG
79899: PUSH
79900: LD_INT 0
79902: PUSH
79903: EMPTY
79904: LIST
79905: LIST
79906: PUSH
79907: LD_INT 3
79909: NEG
79910: PUSH
79911: LD_INT 1
79913: PUSH
79914: EMPTY
79915: LIST
79916: LIST
79917: PUSH
79918: LD_INT 4
79920: NEG
79921: PUSH
79922: LD_INT 1
79924: PUSH
79925: EMPTY
79926: LIST
79927: LIST
79928: PUSH
79929: LD_INT 5
79931: NEG
79932: PUSH
79933: LD_INT 0
79935: PUSH
79936: EMPTY
79937: LIST
79938: LIST
79939: PUSH
79940: LD_INT 5
79942: NEG
79943: PUSH
79944: LD_INT 1
79946: NEG
79947: PUSH
79948: EMPTY
79949: LIST
79950: LIST
79951: PUSH
79952: LD_INT 5
79954: NEG
79955: PUSH
79956: LD_INT 2
79958: NEG
79959: PUSH
79960: EMPTY
79961: LIST
79962: LIST
79963: PUSH
79964: LD_INT 3
79966: NEG
79967: PUSH
79968: LD_INT 2
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 3
79977: NEG
79978: PUSH
79979: LD_INT 3
79981: NEG
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 3
79989: NEG
79990: PUSH
79991: LD_INT 4
79993: NEG
79994: PUSH
79995: EMPTY
79996: LIST
79997: LIST
79998: PUSH
79999: LD_INT 2
80001: NEG
80002: PUSH
80003: LD_INT 3
80005: NEG
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PUSH
80011: LD_INT 2
80013: NEG
80014: PUSH
80015: LD_INT 2
80017: NEG
80018: PUSH
80019: EMPTY
80020: LIST
80021: LIST
80022: PUSH
80023: LD_INT 3
80025: NEG
80026: PUSH
80027: LD_INT 2
80029: NEG
80030: PUSH
80031: EMPTY
80032: LIST
80033: LIST
80034: PUSH
80035: LD_INT 4
80037: NEG
80038: PUSH
80039: LD_INT 3
80041: NEG
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: PUSH
80047: LD_INT 4
80049: NEG
80050: PUSH
80051: LD_INT 4
80053: NEG
80054: PUSH
80055: EMPTY
80056: LIST
80057: LIST
80058: PUSH
80059: LD_INT 2
80061: NEG
80062: PUSH
80063: LD_INT 4
80065: NEG
80066: PUSH
80067: EMPTY
80068: LIST
80069: LIST
80070: PUSH
80071: LD_INT 4
80073: NEG
80074: PUSH
80075: LD_INT 2
80077: NEG
80078: PUSH
80079: EMPTY
80080: LIST
80081: LIST
80082: PUSH
80083: LD_INT 0
80085: PUSH
80086: LD_INT 4
80088: NEG
80089: PUSH
80090: EMPTY
80091: LIST
80092: LIST
80093: PUSH
80094: LD_INT 0
80096: PUSH
80097: LD_INT 5
80099: NEG
80100: PUSH
80101: EMPTY
80102: LIST
80103: LIST
80104: PUSH
80105: LD_INT 1
80107: PUSH
80108: LD_INT 4
80110: NEG
80111: PUSH
80112: EMPTY
80113: LIST
80114: LIST
80115: PUSH
80116: LD_INT 1
80118: PUSH
80119: LD_INT 3
80121: NEG
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: PUSH
80127: LD_INT 0
80129: PUSH
80130: LD_INT 3
80132: NEG
80133: PUSH
80134: EMPTY
80135: LIST
80136: LIST
80137: PUSH
80138: LD_INT 1
80140: NEG
80141: PUSH
80142: LD_INT 4
80144: NEG
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: PUSH
80150: LD_INT 1
80152: NEG
80153: PUSH
80154: LD_INT 5
80156: NEG
80157: PUSH
80158: EMPTY
80159: LIST
80160: LIST
80161: PUSH
80162: LD_INT 2
80164: PUSH
80165: LD_INT 3
80167: NEG
80168: PUSH
80169: EMPTY
80170: LIST
80171: LIST
80172: PUSH
80173: LD_INT 2
80175: NEG
80176: PUSH
80177: LD_INT 5
80179: NEG
80180: PUSH
80181: EMPTY
80182: LIST
80183: LIST
80184: PUSH
80185: LD_INT 3
80187: PUSH
80188: LD_INT 0
80190: PUSH
80191: EMPTY
80192: LIST
80193: LIST
80194: PUSH
80195: LD_INT 3
80197: PUSH
80198: LD_INT 1
80200: NEG
80201: PUSH
80202: EMPTY
80203: LIST
80204: LIST
80205: PUSH
80206: LD_INT 4
80208: PUSH
80209: LD_INT 0
80211: PUSH
80212: EMPTY
80213: LIST
80214: LIST
80215: PUSH
80216: LD_INT 4
80218: PUSH
80219: LD_INT 1
80221: PUSH
80222: EMPTY
80223: LIST
80224: LIST
80225: PUSH
80226: LD_INT 3
80228: PUSH
80229: LD_INT 1
80231: PUSH
80232: EMPTY
80233: LIST
80234: LIST
80235: PUSH
80236: LD_INT 2
80238: PUSH
80239: LD_INT 0
80241: PUSH
80242: EMPTY
80243: LIST
80244: LIST
80245: PUSH
80246: LD_INT 2
80248: PUSH
80249: LD_INT 1
80251: NEG
80252: PUSH
80253: EMPTY
80254: LIST
80255: LIST
80256: PUSH
80257: LD_INT 2
80259: PUSH
80260: LD_INT 2
80262: NEG
80263: PUSH
80264: EMPTY
80265: LIST
80266: LIST
80267: PUSH
80268: LD_INT 4
80270: PUSH
80271: LD_INT 2
80273: PUSH
80274: EMPTY
80275: LIST
80276: LIST
80277: PUSH
80278: LD_INT 4
80280: PUSH
80281: LD_INT 4
80283: PUSH
80284: EMPTY
80285: LIST
80286: LIST
80287: PUSH
80288: LD_INT 4
80290: PUSH
80291: LD_INT 3
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: PUSH
80298: LD_INT 5
80300: PUSH
80301: LD_INT 4
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: PUSH
80308: LD_INT 5
80310: PUSH
80311: LD_INT 5
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 4
80320: PUSH
80321: LD_INT 5
80323: PUSH
80324: EMPTY
80325: LIST
80326: LIST
80327: PUSH
80328: LD_INT 3
80330: PUSH
80331: LD_INT 4
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: LD_INT 3
80340: PUSH
80341: LD_INT 3
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: LD_INT 5
80350: PUSH
80351: LD_INT 3
80353: PUSH
80354: EMPTY
80355: LIST
80356: LIST
80357: PUSH
80358: LD_INT 3
80360: PUSH
80361: LD_INT 5
80363: PUSH
80364: EMPTY
80365: LIST
80366: LIST
80367: PUSH
80368: EMPTY
80369: LIST
80370: LIST
80371: LIST
80372: LIST
80373: LIST
80374: LIST
80375: LIST
80376: LIST
80377: LIST
80378: LIST
80379: LIST
80380: LIST
80381: LIST
80382: LIST
80383: LIST
80384: LIST
80385: LIST
80386: LIST
80387: LIST
80388: LIST
80389: LIST
80390: LIST
80391: LIST
80392: LIST
80393: LIST
80394: LIST
80395: LIST
80396: LIST
80397: LIST
80398: LIST
80399: LIST
80400: LIST
80401: LIST
80402: LIST
80403: LIST
80404: LIST
80405: LIST
80406: LIST
80407: LIST
80408: LIST
80409: LIST
80410: LIST
80411: LIST
80412: LIST
80413: LIST
80414: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80415: LD_ADDR_VAR 0 33
80419: PUSH
80420: LD_INT 4
80422: NEG
80423: PUSH
80424: LD_INT 4
80426: NEG
80427: PUSH
80428: EMPTY
80429: LIST
80430: LIST
80431: PUSH
80432: LD_INT 4
80434: NEG
80435: PUSH
80436: LD_INT 5
80438: NEG
80439: PUSH
80440: EMPTY
80441: LIST
80442: LIST
80443: PUSH
80444: LD_INT 3
80446: NEG
80447: PUSH
80448: LD_INT 4
80450: NEG
80451: PUSH
80452: EMPTY
80453: LIST
80454: LIST
80455: PUSH
80456: LD_INT 3
80458: NEG
80459: PUSH
80460: LD_INT 3
80462: NEG
80463: PUSH
80464: EMPTY
80465: LIST
80466: LIST
80467: PUSH
80468: LD_INT 4
80470: NEG
80471: PUSH
80472: LD_INT 3
80474: NEG
80475: PUSH
80476: EMPTY
80477: LIST
80478: LIST
80479: PUSH
80480: LD_INT 5
80482: NEG
80483: PUSH
80484: LD_INT 4
80486: NEG
80487: PUSH
80488: EMPTY
80489: LIST
80490: LIST
80491: PUSH
80492: LD_INT 5
80494: NEG
80495: PUSH
80496: LD_INT 5
80498: NEG
80499: PUSH
80500: EMPTY
80501: LIST
80502: LIST
80503: PUSH
80504: LD_INT 3
80506: NEG
80507: PUSH
80508: LD_INT 5
80510: NEG
80511: PUSH
80512: EMPTY
80513: LIST
80514: LIST
80515: PUSH
80516: LD_INT 5
80518: NEG
80519: PUSH
80520: LD_INT 3
80522: NEG
80523: PUSH
80524: EMPTY
80525: LIST
80526: LIST
80527: PUSH
80528: LD_INT 0
80530: PUSH
80531: LD_INT 3
80533: NEG
80534: PUSH
80535: EMPTY
80536: LIST
80537: LIST
80538: PUSH
80539: LD_INT 0
80541: PUSH
80542: LD_INT 4
80544: NEG
80545: PUSH
80546: EMPTY
80547: LIST
80548: LIST
80549: PUSH
80550: LD_INT 1
80552: PUSH
80553: LD_INT 3
80555: NEG
80556: PUSH
80557: EMPTY
80558: LIST
80559: LIST
80560: PUSH
80561: LD_INT 1
80563: PUSH
80564: LD_INT 2
80566: NEG
80567: PUSH
80568: EMPTY
80569: LIST
80570: LIST
80571: PUSH
80572: LD_INT 0
80574: PUSH
80575: LD_INT 2
80577: NEG
80578: PUSH
80579: EMPTY
80580: LIST
80581: LIST
80582: PUSH
80583: LD_INT 1
80585: NEG
80586: PUSH
80587: LD_INT 3
80589: NEG
80590: PUSH
80591: EMPTY
80592: LIST
80593: LIST
80594: PUSH
80595: LD_INT 1
80597: NEG
80598: PUSH
80599: LD_INT 4
80601: NEG
80602: PUSH
80603: EMPTY
80604: LIST
80605: LIST
80606: PUSH
80607: LD_INT 2
80609: PUSH
80610: LD_INT 2
80612: NEG
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: PUSH
80618: LD_INT 2
80620: NEG
80621: PUSH
80622: LD_INT 4
80624: NEG
80625: PUSH
80626: EMPTY
80627: LIST
80628: LIST
80629: PUSH
80630: LD_INT 4
80632: PUSH
80633: LD_INT 0
80635: PUSH
80636: EMPTY
80637: LIST
80638: LIST
80639: PUSH
80640: LD_INT 4
80642: PUSH
80643: LD_INT 1
80645: NEG
80646: PUSH
80647: EMPTY
80648: LIST
80649: LIST
80650: PUSH
80651: LD_INT 5
80653: PUSH
80654: LD_INT 0
80656: PUSH
80657: EMPTY
80658: LIST
80659: LIST
80660: PUSH
80661: LD_INT 5
80663: PUSH
80664: LD_INT 1
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: PUSH
80671: LD_INT 4
80673: PUSH
80674: LD_INT 1
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: PUSH
80681: LD_INT 3
80683: PUSH
80684: LD_INT 0
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: PUSH
80691: LD_INT 3
80693: PUSH
80694: LD_INT 1
80696: NEG
80697: PUSH
80698: EMPTY
80699: LIST
80700: LIST
80701: PUSH
80702: LD_INT 3
80704: PUSH
80705: LD_INT 2
80707: NEG
80708: PUSH
80709: EMPTY
80710: LIST
80711: LIST
80712: PUSH
80713: LD_INT 5
80715: PUSH
80716: LD_INT 2
80718: PUSH
80719: EMPTY
80720: LIST
80721: LIST
80722: PUSH
80723: LD_INT 3
80725: PUSH
80726: LD_INT 3
80728: PUSH
80729: EMPTY
80730: LIST
80731: LIST
80732: PUSH
80733: LD_INT 3
80735: PUSH
80736: LD_INT 2
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: PUSH
80743: LD_INT 4
80745: PUSH
80746: LD_INT 3
80748: PUSH
80749: EMPTY
80750: LIST
80751: LIST
80752: PUSH
80753: LD_INT 4
80755: PUSH
80756: LD_INT 4
80758: PUSH
80759: EMPTY
80760: LIST
80761: LIST
80762: PUSH
80763: LD_INT 3
80765: PUSH
80766: LD_INT 4
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: PUSH
80773: LD_INT 2
80775: PUSH
80776: LD_INT 3
80778: PUSH
80779: EMPTY
80780: LIST
80781: LIST
80782: PUSH
80783: LD_INT 2
80785: PUSH
80786: LD_INT 2
80788: PUSH
80789: EMPTY
80790: LIST
80791: LIST
80792: PUSH
80793: LD_INT 4
80795: PUSH
80796: LD_INT 2
80798: PUSH
80799: EMPTY
80800: LIST
80801: LIST
80802: PUSH
80803: LD_INT 2
80805: PUSH
80806: LD_INT 4
80808: PUSH
80809: EMPTY
80810: LIST
80811: LIST
80812: PUSH
80813: LD_INT 0
80815: PUSH
80816: LD_INT 4
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: PUSH
80823: LD_INT 0
80825: PUSH
80826: LD_INT 3
80828: PUSH
80829: EMPTY
80830: LIST
80831: LIST
80832: PUSH
80833: LD_INT 1
80835: PUSH
80836: LD_INT 4
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: PUSH
80843: LD_INT 1
80845: PUSH
80846: LD_INT 5
80848: PUSH
80849: EMPTY
80850: LIST
80851: LIST
80852: PUSH
80853: LD_INT 0
80855: PUSH
80856: LD_INT 5
80858: PUSH
80859: EMPTY
80860: LIST
80861: LIST
80862: PUSH
80863: LD_INT 1
80865: NEG
80866: PUSH
80867: LD_INT 4
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: PUSH
80874: LD_INT 1
80876: NEG
80877: PUSH
80878: LD_INT 3
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: PUSH
80885: LD_INT 2
80887: PUSH
80888: LD_INT 5
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: PUSH
80895: LD_INT 2
80897: NEG
80898: PUSH
80899: LD_INT 3
80901: PUSH
80902: EMPTY
80903: LIST
80904: LIST
80905: PUSH
80906: EMPTY
80907: LIST
80908: LIST
80909: LIST
80910: LIST
80911: LIST
80912: LIST
80913: LIST
80914: LIST
80915: LIST
80916: LIST
80917: LIST
80918: LIST
80919: LIST
80920: LIST
80921: LIST
80922: LIST
80923: LIST
80924: LIST
80925: LIST
80926: LIST
80927: LIST
80928: LIST
80929: LIST
80930: LIST
80931: LIST
80932: LIST
80933: LIST
80934: LIST
80935: LIST
80936: LIST
80937: LIST
80938: LIST
80939: LIST
80940: LIST
80941: LIST
80942: LIST
80943: LIST
80944: LIST
80945: LIST
80946: LIST
80947: LIST
80948: LIST
80949: LIST
80950: LIST
80951: LIST
80952: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
80953: LD_ADDR_VAR 0 34
80957: PUSH
80958: LD_INT 0
80960: PUSH
80961: LD_INT 4
80963: NEG
80964: PUSH
80965: EMPTY
80966: LIST
80967: LIST
80968: PUSH
80969: LD_INT 0
80971: PUSH
80972: LD_INT 5
80974: NEG
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: PUSH
80980: LD_INT 1
80982: PUSH
80983: LD_INT 4
80985: NEG
80986: PUSH
80987: EMPTY
80988: LIST
80989: LIST
80990: PUSH
80991: LD_INT 1
80993: PUSH
80994: LD_INT 3
80996: NEG
80997: PUSH
80998: EMPTY
80999: LIST
81000: LIST
81001: PUSH
81002: LD_INT 0
81004: PUSH
81005: LD_INT 3
81007: NEG
81008: PUSH
81009: EMPTY
81010: LIST
81011: LIST
81012: PUSH
81013: LD_INT 1
81015: NEG
81016: PUSH
81017: LD_INT 4
81019: NEG
81020: PUSH
81021: EMPTY
81022: LIST
81023: LIST
81024: PUSH
81025: LD_INT 1
81027: NEG
81028: PUSH
81029: LD_INT 5
81031: NEG
81032: PUSH
81033: EMPTY
81034: LIST
81035: LIST
81036: PUSH
81037: LD_INT 2
81039: PUSH
81040: LD_INT 3
81042: NEG
81043: PUSH
81044: EMPTY
81045: LIST
81046: LIST
81047: PUSH
81048: LD_INT 2
81050: NEG
81051: PUSH
81052: LD_INT 5
81054: NEG
81055: PUSH
81056: EMPTY
81057: LIST
81058: LIST
81059: PUSH
81060: LD_INT 3
81062: PUSH
81063: LD_INT 0
81065: PUSH
81066: EMPTY
81067: LIST
81068: LIST
81069: PUSH
81070: LD_INT 3
81072: PUSH
81073: LD_INT 1
81075: NEG
81076: PUSH
81077: EMPTY
81078: LIST
81079: LIST
81080: PUSH
81081: LD_INT 4
81083: PUSH
81084: LD_INT 0
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: PUSH
81091: LD_INT 4
81093: PUSH
81094: LD_INT 1
81096: PUSH
81097: EMPTY
81098: LIST
81099: LIST
81100: PUSH
81101: LD_INT 3
81103: PUSH
81104: LD_INT 1
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: PUSH
81111: LD_INT 2
81113: PUSH
81114: LD_INT 0
81116: PUSH
81117: EMPTY
81118: LIST
81119: LIST
81120: PUSH
81121: LD_INT 2
81123: PUSH
81124: LD_INT 1
81126: NEG
81127: PUSH
81128: EMPTY
81129: LIST
81130: LIST
81131: PUSH
81132: LD_INT 2
81134: PUSH
81135: LD_INT 2
81137: NEG
81138: PUSH
81139: EMPTY
81140: LIST
81141: LIST
81142: PUSH
81143: LD_INT 4
81145: PUSH
81146: LD_INT 2
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PUSH
81153: LD_INT 4
81155: PUSH
81156: LD_INT 4
81158: PUSH
81159: EMPTY
81160: LIST
81161: LIST
81162: PUSH
81163: LD_INT 4
81165: PUSH
81166: LD_INT 3
81168: PUSH
81169: EMPTY
81170: LIST
81171: LIST
81172: PUSH
81173: LD_INT 5
81175: PUSH
81176: LD_INT 4
81178: PUSH
81179: EMPTY
81180: LIST
81181: LIST
81182: PUSH
81183: LD_INT 5
81185: PUSH
81186: LD_INT 5
81188: PUSH
81189: EMPTY
81190: LIST
81191: LIST
81192: PUSH
81193: LD_INT 4
81195: PUSH
81196: LD_INT 5
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: PUSH
81203: LD_INT 3
81205: PUSH
81206: LD_INT 4
81208: PUSH
81209: EMPTY
81210: LIST
81211: LIST
81212: PUSH
81213: LD_INT 3
81215: PUSH
81216: LD_INT 3
81218: PUSH
81219: EMPTY
81220: LIST
81221: LIST
81222: PUSH
81223: LD_INT 5
81225: PUSH
81226: LD_INT 3
81228: PUSH
81229: EMPTY
81230: LIST
81231: LIST
81232: PUSH
81233: LD_INT 3
81235: PUSH
81236: LD_INT 5
81238: PUSH
81239: EMPTY
81240: LIST
81241: LIST
81242: PUSH
81243: LD_INT 0
81245: PUSH
81246: LD_INT 3
81248: PUSH
81249: EMPTY
81250: LIST
81251: LIST
81252: PUSH
81253: LD_INT 0
81255: PUSH
81256: LD_INT 2
81258: PUSH
81259: EMPTY
81260: LIST
81261: LIST
81262: PUSH
81263: LD_INT 1
81265: PUSH
81266: LD_INT 3
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: PUSH
81273: LD_INT 1
81275: PUSH
81276: LD_INT 4
81278: PUSH
81279: EMPTY
81280: LIST
81281: LIST
81282: PUSH
81283: LD_INT 0
81285: PUSH
81286: LD_INT 4
81288: PUSH
81289: EMPTY
81290: LIST
81291: LIST
81292: PUSH
81293: LD_INT 1
81295: NEG
81296: PUSH
81297: LD_INT 3
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: PUSH
81304: LD_INT 1
81306: NEG
81307: PUSH
81308: LD_INT 2
81310: PUSH
81311: EMPTY
81312: LIST
81313: LIST
81314: PUSH
81315: LD_INT 2
81317: PUSH
81318: LD_INT 4
81320: PUSH
81321: EMPTY
81322: LIST
81323: LIST
81324: PUSH
81325: LD_INT 2
81327: NEG
81328: PUSH
81329: LD_INT 2
81331: PUSH
81332: EMPTY
81333: LIST
81334: LIST
81335: PUSH
81336: LD_INT 4
81338: NEG
81339: PUSH
81340: LD_INT 0
81342: PUSH
81343: EMPTY
81344: LIST
81345: LIST
81346: PUSH
81347: LD_INT 4
81349: NEG
81350: PUSH
81351: LD_INT 1
81353: NEG
81354: PUSH
81355: EMPTY
81356: LIST
81357: LIST
81358: PUSH
81359: LD_INT 3
81361: NEG
81362: PUSH
81363: LD_INT 0
81365: PUSH
81366: EMPTY
81367: LIST
81368: LIST
81369: PUSH
81370: LD_INT 3
81372: NEG
81373: PUSH
81374: LD_INT 1
81376: PUSH
81377: EMPTY
81378: LIST
81379: LIST
81380: PUSH
81381: LD_INT 4
81383: NEG
81384: PUSH
81385: LD_INT 1
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: PUSH
81392: LD_INT 5
81394: NEG
81395: PUSH
81396: LD_INT 0
81398: PUSH
81399: EMPTY
81400: LIST
81401: LIST
81402: PUSH
81403: LD_INT 5
81405: NEG
81406: PUSH
81407: LD_INT 1
81409: NEG
81410: PUSH
81411: EMPTY
81412: LIST
81413: LIST
81414: PUSH
81415: LD_INT 5
81417: NEG
81418: PUSH
81419: LD_INT 2
81421: NEG
81422: PUSH
81423: EMPTY
81424: LIST
81425: LIST
81426: PUSH
81427: LD_INT 3
81429: NEG
81430: PUSH
81431: LD_INT 2
81433: PUSH
81434: EMPTY
81435: LIST
81436: LIST
81437: PUSH
81438: EMPTY
81439: LIST
81440: LIST
81441: LIST
81442: LIST
81443: LIST
81444: LIST
81445: LIST
81446: LIST
81447: LIST
81448: LIST
81449: LIST
81450: LIST
81451: LIST
81452: LIST
81453: LIST
81454: LIST
81455: LIST
81456: LIST
81457: LIST
81458: LIST
81459: LIST
81460: LIST
81461: LIST
81462: LIST
81463: LIST
81464: LIST
81465: LIST
81466: LIST
81467: LIST
81468: LIST
81469: LIST
81470: LIST
81471: LIST
81472: LIST
81473: LIST
81474: LIST
81475: LIST
81476: LIST
81477: LIST
81478: LIST
81479: LIST
81480: LIST
81481: LIST
81482: LIST
81483: LIST
81484: ST_TO_ADDR
// end ; end ;
81485: GO 81488
81487: POP
// case btype of b_depot , b_warehouse :
81488: LD_VAR 0 1
81492: PUSH
81493: LD_INT 0
81495: DOUBLE
81496: EQUAL
81497: IFTRUE 81507
81499: LD_INT 1
81501: DOUBLE
81502: EQUAL
81503: IFTRUE 81507
81505: GO 81708
81507: POP
// case nation of nation_american :
81508: LD_VAR 0 5
81512: PUSH
81513: LD_INT 1
81515: DOUBLE
81516: EQUAL
81517: IFTRUE 81521
81519: GO 81577
81521: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
81522: LD_ADDR_VAR 0 9
81526: PUSH
81527: LD_VAR 0 11
81531: PUSH
81532: LD_VAR 0 12
81536: PUSH
81537: LD_VAR 0 13
81541: PUSH
81542: LD_VAR 0 14
81546: PUSH
81547: LD_VAR 0 15
81551: PUSH
81552: LD_VAR 0 16
81556: PUSH
81557: EMPTY
81558: LIST
81559: LIST
81560: LIST
81561: LIST
81562: LIST
81563: LIST
81564: PUSH
81565: LD_VAR 0 4
81569: PUSH
81570: LD_INT 1
81572: PLUS
81573: ARRAY
81574: ST_TO_ADDR
81575: GO 81706
81577: LD_INT 2
81579: DOUBLE
81580: EQUAL
81581: IFTRUE 81585
81583: GO 81641
81585: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
81586: LD_ADDR_VAR 0 9
81590: PUSH
81591: LD_VAR 0 17
81595: PUSH
81596: LD_VAR 0 18
81600: PUSH
81601: LD_VAR 0 19
81605: PUSH
81606: LD_VAR 0 20
81610: PUSH
81611: LD_VAR 0 21
81615: PUSH
81616: LD_VAR 0 22
81620: PUSH
81621: EMPTY
81622: LIST
81623: LIST
81624: LIST
81625: LIST
81626: LIST
81627: LIST
81628: PUSH
81629: LD_VAR 0 4
81633: PUSH
81634: LD_INT 1
81636: PLUS
81637: ARRAY
81638: ST_TO_ADDR
81639: GO 81706
81641: LD_INT 3
81643: DOUBLE
81644: EQUAL
81645: IFTRUE 81649
81647: GO 81705
81649: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
81650: LD_ADDR_VAR 0 9
81654: PUSH
81655: LD_VAR 0 23
81659: PUSH
81660: LD_VAR 0 24
81664: PUSH
81665: LD_VAR 0 25
81669: PUSH
81670: LD_VAR 0 26
81674: PUSH
81675: LD_VAR 0 27
81679: PUSH
81680: LD_VAR 0 28
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: LIST
81689: LIST
81690: LIST
81691: LIST
81692: PUSH
81693: LD_VAR 0 4
81697: PUSH
81698: LD_INT 1
81700: PLUS
81701: ARRAY
81702: ST_TO_ADDR
81703: GO 81706
81705: POP
81706: GO 82261
81708: LD_INT 2
81710: DOUBLE
81711: EQUAL
81712: IFTRUE 81722
81714: LD_INT 3
81716: DOUBLE
81717: EQUAL
81718: IFTRUE 81722
81720: GO 81778
81722: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
81723: LD_ADDR_VAR 0 9
81727: PUSH
81728: LD_VAR 0 29
81732: PUSH
81733: LD_VAR 0 30
81737: PUSH
81738: LD_VAR 0 31
81742: PUSH
81743: LD_VAR 0 32
81747: PUSH
81748: LD_VAR 0 33
81752: PUSH
81753: LD_VAR 0 34
81757: PUSH
81758: EMPTY
81759: LIST
81760: LIST
81761: LIST
81762: LIST
81763: LIST
81764: LIST
81765: PUSH
81766: LD_VAR 0 4
81770: PUSH
81771: LD_INT 1
81773: PLUS
81774: ARRAY
81775: ST_TO_ADDR
81776: GO 82261
81778: LD_INT 16
81780: DOUBLE
81781: EQUAL
81782: IFTRUE 81840
81784: LD_INT 17
81786: DOUBLE
81787: EQUAL
81788: IFTRUE 81840
81790: LD_INT 18
81792: DOUBLE
81793: EQUAL
81794: IFTRUE 81840
81796: LD_INT 19
81798: DOUBLE
81799: EQUAL
81800: IFTRUE 81840
81802: LD_INT 22
81804: DOUBLE
81805: EQUAL
81806: IFTRUE 81840
81808: LD_INT 20
81810: DOUBLE
81811: EQUAL
81812: IFTRUE 81840
81814: LD_INT 21
81816: DOUBLE
81817: EQUAL
81818: IFTRUE 81840
81820: LD_INT 23
81822: DOUBLE
81823: EQUAL
81824: IFTRUE 81840
81826: LD_INT 24
81828: DOUBLE
81829: EQUAL
81830: IFTRUE 81840
81832: LD_INT 25
81834: DOUBLE
81835: EQUAL
81836: IFTRUE 81840
81838: GO 81896
81840: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
81841: LD_ADDR_VAR 0 9
81845: PUSH
81846: LD_VAR 0 35
81850: PUSH
81851: LD_VAR 0 36
81855: PUSH
81856: LD_VAR 0 37
81860: PUSH
81861: LD_VAR 0 38
81865: PUSH
81866: LD_VAR 0 39
81870: PUSH
81871: LD_VAR 0 40
81875: PUSH
81876: EMPTY
81877: LIST
81878: LIST
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: PUSH
81884: LD_VAR 0 4
81888: PUSH
81889: LD_INT 1
81891: PLUS
81892: ARRAY
81893: ST_TO_ADDR
81894: GO 82261
81896: LD_INT 6
81898: DOUBLE
81899: EQUAL
81900: IFTRUE 81952
81902: LD_INT 7
81904: DOUBLE
81905: EQUAL
81906: IFTRUE 81952
81908: LD_INT 8
81910: DOUBLE
81911: EQUAL
81912: IFTRUE 81952
81914: LD_INT 13
81916: DOUBLE
81917: EQUAL
81918: IFTRUE 81952
81920: LD_INT 12
81922: DOUBLE
81923: EQUAL
81924: IFTRUE 81952
81926: LD_INT 15
81928: DOUBLE
81929: EQUAL
81930: IFTRUE 81952
81932: LD_INT 11
81934: DOUBLE
81935: EQUAL
81936: IFTRUE 81952
81938: LD_INT 14
81940: DOUBLE
81941: EQUAL
81942: IFTRUE 81952
81944: LD_INT 10
81946: DOUBLE
81947: EQUAL
81948: IFTRUE 81952
81950: GO 82008
81952: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
81953: LD_ADDR_VAR 0 9
81957: PUSH
81958: LD_VAR 0 41
81962: PUSH
81963: LD_VAR 0 42
81967: PUSH
81968: LD_VAR 0 43
81972: PUSH
81973: LD_VAR 0 44
81977: PUSH
81978: LD_VAR 0 45
81982: PUSH
81983: LD_VAR 0 46
81987: PUSH
81988: EMPTY
81989: LIST
81990: LIST
81991: LIST
81992: LIST
81993: LIST
81994: LIST
81995: PUSH
81996: LD_VAR 0 4
82000: PUSH
82001: LD_INT 1
82003: PLUS
82004: ARRAY
82005: ST_TO_ADDR
82006: GO 82261
82008: LD_INT 36
82010: DOUBLE
82011: EQUAL
82012: IFTRUE 82016
82014: GO 82072
82016: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82017: LD_ADDR_VAR 0 9
82021: PUSH
82022: LD_VAR 0 47
82026: PUSH
82027: LD_VAR 0 48
82031: PUSH
82032: LD_VAR 0 49
82036: PUSH
82037: LD_VAR 0 50
82041: PUSH
82042: LD_VAR 0 51
82046: PUSH
82047: LD_VAR 0 52
82051: PUSH
82052: EMPTY
82053: LIST
82054: LIST
82055: LIST
82056: LIST
82057: LIST
82058: LIST
82059: PUSH
82060: LD_VAR 0 4
82064: PUSH
82065: LD_INT 1
82067: PLUS
82068: ARRAY
82069: ST_TO_ADDR
82070: GO 82261
82072: LD_INT 4
82074: DOUBLE
82075: EQUAL
82076: IFTRUE 82098
82078: LD_INT 5
82080: DOUBLE
82081: EQUAL
82082: IFTRUE 82098
82084: LD_INT 34
82086: DOUBLE
82087: EQUAL
82088: IFTRUE 82098
82090: LD_INT 37
82092: DOUBLE
82093: EQUAL
82094: IFTRUE 82098
82096: GO 82154
82098: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82099: LD_ADDR_VAR 0 9
82103: PUSH
82104: LD_VAR 0 53
82108: PUSH
82109: LD_VAR 0 54
82113: PUSH
82114: LD_VAR 0 55
82118: PUSH
82119: LD_VAR 0 56
82123: PUSH
82124: LD_VAR 0 57
82128: PUSH
82129: LD_VAR 0 58
82133: PUSH
82134: EMPTY
82135: LIST
82136: LIST
82137: LIST
82138: LIST
82139: LIST
82140: LIST
82141: PUSH
82142: LD_VAR 0 4
82146: PUSH
82147: LD_INT 1
82149: PLUS
82150: ARRAY
82151: ST_TO_ADDR
82152: GO 82261
82154: LD_INT 31
82156: DOUBLE
82157: EQUAL
82158: IFTRUE 82204
82160: LD_INT 32
82162: DOUBLE
82163: EQUAL
82164: IFTRUE 82204
82166: LD_INT 33
82168: DOUBLE
82169: EQUAL
82170: IFTRUE 82204
82172: LD_INT 27
82174: DOUBLE
82175: EQUAL
82176: IFTRUE 82204
82178: LD_INT 26
82180: DOUBLE
82181: EQUAL
82182: IFTRUE 82204
82184: LD_INT 28
82186: DOUBLE
82187: EQUAL
82188: IFTRUE 82204
82190: LD_INT 29
82192: DOUBLE
82193: EQUAL
82194: IFTRUE 82204
82196: LD_INT 30
82198: DOUBLE
82199: EQUAL
82200: IFTRUE 82204
82202: GO 82260
82204: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
82205: LD_ADDR_VAR 0 9
82209: PUSH
82210: LD_VAR 0 59
82214: PUSH
82215: LD_VAR 0 60
82219: PUSH
82220: LD_VAR 0 61
82224: PUSH
82225: LD_VAR 0 62
82229: PUSH
82230: LD_VAR 0 63
82234: PUSH
82235: LD_VAR 0 64
82239: PUSH
82240: EMPTY
82241: LIST
82242: LIST
82243: LIST
82244: LIST
82245: LIST
82246: LIST
82247: PUSH
82248: LD_VAR 0 4
82252: PUSH
82253: LD_INT 1
82255: PLUS
82256: ARRAY
82257: ST_TO_ADDR
82258: GO 82261
82260: POP
// temp_list2 = [ ] ;
82261: LD_ADDR_VAR 0 10
82265: PUSH
82266: EMPTY
82267: ST_TO_ADDR
// for i in temp_list do
82268: LD_ADDR_VAR 0 8
82272: PUSH
82273: LD_VAR 0 9
82277: PUSH
82278: FOR_IN
82279: IFFALSE 82331
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82281: LD_ADDR_VAR 0 10
82285: PUSH
82286: LD_VAR 0 10
82290: PUSH
82291: LD_VAR 0 8
82295: PUSH
82296: LD_INT 1
82298: ARRAY
82299: PUSH
82300: LD_VAR 0 2
82304: PLUS
82305: PUSH
82306: LD_VAR 0 8
82310: PUSH
82311: LD_INT 2
82313: ARRAY
82314: PUSH
82315: LD_VAR 0 3
82319: PLUS
82320: PUSH
82321: EMPTY
82322: LIST
82323: LIST
82324: PUSH
82325: EMPTY
82326: LIST
82327: ADD
82328: ST_TO_ADDR
82329: GO 82278
82331: POP
82332: POP
// result = temp_list2 ;
82333: LD_ADDR_VAR 0 7
82337: PUSH
82338: LD_VAR 0 10
82342: ST_TO_ADDR
// end ;
82343: LD_VAR 0 7
82347: RET
// export function EnemyInRange ( unit , dist ) ; begin
82348: LD_INT 0
82350: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82351: LD_ADDR_VAR 0 3
82355: PUSH
82356: LD_VAR 0 1
82360: PPUSH
82361: CALL_OW 255
82365: PPUSH
82366: LD_VAR 0 1
82370: PPUSH
82371: CALL_OW 250
82375: PPUSH
82376: LD_VAR 0 1
82380: PPUSH
82381: CALL_OW 251
82385: PPUSH
82386: LD_VAR 0 2
82390: PPUSH
82391: CALL 56452 0 4
82395: PUSH
82396: LD_INT 4
82398: ARRAY
82399: ST_TO_ADDR
// end ;
82400: LD_VAR 0 3
82404: RET
// export function PlayerSeeMe ( unit ) ; begin
82405: LD_INT 0
82407: PPUSH
// result := See ( your_side , unit ) ;
82408: LD_ADDR_VAR 0 2
82412: PUSH
82413: LD_OWVAR 2
82417: PPUSH
82418: LD_VAR 0 1
82422: PPUSH
82423: CALL_OW 292
82427: ST_TO_ADDR
// end ;
82428: LD_VAR 0 2
82432: RET
// export function ReverseDir ( unit ) ; begin
82433: LD_INT 0
82435: PPUSH
// if not unit then
82436: LD_VAR 0 1
82440: NOT
82441: IFFALSE 82445
// exit ;
82443: GO 82468
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
82445: LD_ADDR_VAR 0 2
82449: PUSH
82450: LD_VAR 0 1
82454: PPUSH
82455: CALL_OW 254
82459: PUSH
82460: LD_INT 3
82462: PLUS
82463: PUSH
82464: LD_INT 6
82466: MOD
82467: ST_TO_ADDR
// end ;
82468: LD_VAR 0 2
82472: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
82473: LD_INT 0
82475: PPUSH
82476: PPUSH
82477: PPUSH
82478: PPUSH
82479: PPUSH
// if not hexes then
82480: LD_VAR 0 2
82484: NOT
82485: IFFALSE 82489
// exit ;
82487: GO 82637
// dist := 9999 ;
82489: LD_ADDR_VAR 0 5
82493: PUSH
82494: LD_INT 9999
82496: ST_TO_ADDR
// for i = 1 to hexes do
82497: LD_ADDR_VAR 0 4
82501: PUSH
82502: DOUBLE
82503: LD_INT 1
82505: DEC
82506: ST_TO_ADDR
82507: LD_VAR 0 2
82511: PUSH
82512: FOR_TO
82513: IFFALSE 82625
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
82515: LD_VAR 0 1
82519: PPUSH
82520: LD_VAR 0 2
82524: PUSH
82525: LD_VAR 0 4
82529: ARRAY
82530: PUSH
82531: LD_INT 1
82533: ARRAY
82534: PPUSH
82535: LD_VAR 0 2
82539: PUSH
82540: LD_VAR 0 4
82544: ARRAY
82545: PUSH
82546: LD_INT 2
82548: ARRAY
82549: PPUSH
82550: CALL_OW 297
82554: PUSH
82555: LD_VAR 0 5
82559: LESS
82560: IFFALSE 82623
// begin hex := hexes [ i ] ;
82562: LD_ADDR_VAR 0 7
82566: PUSH
82567: LD_VAR 0 2
82571: PUSH
82572: LD_VAR 0 4
82576: ARRAY
82577: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82578: LD_ADDR_VAR 0 5
82582: PUSH
82583: LD_VAR 0 1
82587: PPUSH
82588: LD_VAR 0 2
82592: PUSH
82593: LD_VAR 0 4
82597: ARRAY
82598: PUSH
82599: LD_INT 1
82601: ARRAY
82602: PPUSH
82603: LD_VAR 0 2
82607: PUSH
82608: LD_VAR 0 4
82612: ARRAY
82613: PUSH
82614: LD_INT 2
82616: ARRAY
82617: PPUSH
82618: CALL_OW 297
82622: ST_TO_ADDR
// end ; end ;
82623: GO 82512
82625: POP
82626: POP
// result := hex ;
82627: LD_ADDR_VAR 0 3
82631: PUSH
82632: LD_VAR 0 7
82636: ST_TO_ADDR
// end ;
82637: LD_VAR 0 3
82641: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
82642: LD_INT 0
82644: PPUSH
82645: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
82646: LD_VAR 0 1
82650: NOT
82651: PUSH
82652: LD_VAR 0 1
82656: PUSH
82657: LD_INT 21
82659: PUSH
82660: LD_INT 2
82662: PUSH
82663: EMPTY
82664: LIST
82665: LIST
82666: PUSH
82667: LD_INT 23
82669: PUSH
82670: LD_INT 2
82672: PUSH
82673: EMPTY
82674: LIST
82675: LIST
82676: PUSH
82677: EMPTY
82678: LIST
82679: LIST
82680: PPUSH
82681: CALL_OW 69
82685: IN
82686: NOT
82687: OR
82688: IFFALSE 82692
// exit ;
82690: GO 82739
// for i = 1 to 3 do
82692: LD_ADDR_VAR 0 3
82696: PUSH
82697: DOUBLE
82698: LD_INT 1
82700: DEC
82701: ST_TO_ADDR
82702: LD_INT 3
82704: PUSH
82705: FOR_TO
82706: IFFALSE 82737
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
82708: LD_VAR 0 1
82712: PPUSH
82713: CALL_OW 250
82717: PPUSH
82718: LD_VAR 0 1
82722: PPUSH
82723: CALL_OW 251
82727: PPUSH
82728: LD_INT 1
82730: PPUSH
82731: CALL_OW 453
82735: GO 82705
82737: POP
82738: POP
// end ;
82739: LD_VAR 0 2
82743: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
82744: LD_INT 0
82746: PPUSH
82747: PPUSH
82748: PPUSH
82749: PPUSH
82750: PPUSH
82751: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
82752: LD_VAR 0 1
82756: NOT
82757: PUSH
82758: LD_VAR 0 2
82762: NOT
82763: OR
82764: PUSH
82765: LD_VAR 0 1
82769: PPUSH
82770: CALL_OW 314
82774: OR
82775: IFFALSE 82779
// exit ;
82777: GO 83220
// x := GetX ( enemy_unit ) ;
82779: LD_ADDR_VAR 0 7
82783: PUSH
82784: LD_VAR 0 2
82788: PPUSH
82789: CALL_OW 250
82793: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
82794: LD_ADDR_VAR 0 8
82798: PUSH
82799: LD_VAR 0 2
82803: PPUSH
82804: CALL_OW 251
82808: ST_TO_ADDR
// if not x or not y then
82809: LD_VAR 0 7
82813: NOT
82814: PUSH
82815: LD_VAR 0 8
82819: NOT
82820: OR
82821: IFFALSE 82825
// exit ;
82823: GO 83220
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
82825: LD_ADDR_VAR 0 6
82829: PUSH
82830: LD_VAR 0 7
82834: PPUSH
82835: LD_INT 0
82837: PPUSH
82838: LD_INT 4
82840: PPUSH
82841: CALL_OW 272
82845: PUSH
82846: LD_VAR 0 8
82850: PPUSH
82851: LD_INT 0
82853: PPUSH
82854: LD_INT 4
82856: PPUSH
82857: CALL_OW 273
82861: PUSH
82862: EMPTY
82863: LIST
82864: LIST
82865: PUSH
82866: LD_VAR 0 7
82870: PPUSH
82871: LD_INT 1
82873: PPUSH
82874: LD_INT 4
82876: PPUSH
82877: CALL_OW 272
82881: PUSH
82882: LD_VAR 0 8
82886: PPUSH
82887: LD_INT 1
82889: PPUSH
82890: LD_INT 4
82892: PPUSH
82893: CALL_OW 273
82897: PUSH
82898: EMPTY
82899: LIST
82900: LIST
82901: PUSH
82902: LD_VAR 0 7
82906: PPUSH
82907: LD_INT 2
82909: PPUSH
82910: LD_INT 4
82912: PPUSH
82913: CALL_OW 272
82917: PUSH
82918: LD_VAR 0 8
82922: PPUSH
82923: LD_INT 2
82925: PPUSH
82926: LD_INT 4
82928: PPUSH
82929: CALL_OW 273
82933: PUSH
82934: EMPTY
82935: LIST
82936: LIST
82937: PUSH
82938: LD_VAR 0 7
82942: PPUSH
82943: LD_INT 3
82945: PPUSH
82946: LD_INT 4
82948: PPUSH
82949: CALL_OW 272
82953: PUSH
82954: LD_VAR 0 8
82958: PPUSH
82959: LD_INT 3
82961: PPUSH
82962: LD_INT 4
82964: PPUSH
82965: CALL_OW 273
82969: PUSH
82970: EMPTY
82971: LIST
82972: LIST
82973: PUSH
82974: LD_VAR 0 7
82978: PPUSH
82979: LD_INT 4
82981: PPUSH
82982: LD_INT 4
82984: PPUSH
82985: CALL_OW 272
82989: PUSH
82990: LD_VAR 0 8
82994: PPUSH
82995: LD_INT 4
82997: PPUSH
82998: LD_INT 4
83000: PPUSH
83001: CALL_OW 273
83005: PUSH
83006: EMPTY
83007: LIST
83008: LIST
83009: PUSH
83010: LD_VAR 0 7
83014: PPUSH
83015: LD_INT 5
83017: PPUSH
83018: LD_INT 4
83020: PPUSH
83021: CALL_OW 272
83025: PUSH
83026: LD_VAR 0 8
83030: PPUSH
83031: LD_INT 5
83033: PPUSH
83034: LD_INT 4
83036: PPUSH
83037: CALL_OW 273
83041: PUSH
83042: EMPTY
83043: LIST
83044: LIST
83045: PUSH
83046: EMPTY
83047: LIST
83048: LIST
83049: LIST
83050: LIST
83051: LIST
83052: LIST
83053: ST_TO_ADDR
// for i = tmp downto 1 do
83054: LD_ADDR_VAR 0 4
83058: PUSH
83059: DOUBLE
83060: LD_VAR 0 6
83064: INC
83065: ST_TO_ADDR
83066: LD_INT 1
83068: PUSH
83069: FOR_DOWNTO
83070: IFFALSE 83171
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83072: LD_VAR 0 6
83076: PUSH
83077: LD_VAR 0 4
83081: ARRAY
83082: PUSH
83083: LD_INT 1
83085: ARRAY
83086: PPUSH
83087: LD_VAR 0 6
83091: PUSH
83092: LD_VAR 0 4
83096: ARRAY
83097: PUSH
83098: LD_INT 2
83100: ARRAY
83101: PPUSH
83102: CALL_OW 488
83106: NOT
83107: PUSH
83108: LD_VAR 0 6
83112: PUSH
83113: LD_VAR 0 4
83117: ARRAY
83118: PUSH
83119: LD_INT 1
83121: ARRAY
83122: PPUSH
83123: LD_VAR 0 6
83127: PUSH
83128: LD_VAR 0 4
83132: ARRAY
83133: PUSH
83134: LD_INT 2
83136: ARRAY
83137: PPUSH
83138: CALL_OW 428
83142: PUSH
83143: LD_INT 0
83145: NONEQUAL
83146: OR
83147: IFFALSE 83169
// tmp := Delete ( tmp , i ) ;
83149: LD_ADDR_VAR 0 6
83153: PUSH
83154: LD_VAR 0 6
83158: PPUSH
83159: LD_VAR 0 4
83163: PPUSH
83164: CALL_OW 3
83168: ST_TO_ADDR
83169: GO 83069
83171: POP
83172: POP
// j := GetClosestHex ( unit , tmp ) ;
83173: LD_ADDR_VAR 0 5
83177: PUSH
83178: LD_VAR 0 1
83182: PPUSH
83183: LD_VAR 0 6
83187: PPUSH
83188: CALL 82473 0 2
83192: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83193: LD_VAR 0 1
83197: PPUSH
83198: LD_VAR 0 5
83202: PUSH
83203: LD_INT 1
83205: ARRAY
83206: PPUSH
83207: LD_VAR 0 5
83211: PUSH
83212: LD_INT 2
83214: ARRAY
83215: PPUSH
83216: CALL_OW 111
// end ;
83220: LD_VAR 0 3
83224: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
83225: LD_INT 0
83227: PPUSH
83228: PPUSH
83229: PPUSH
// uc_side = 0 ;
83230: LD_ADDR_OWVAR 20
83234: PUSH
83235: LD_INT 0
83237: ST_TO_ADDR
// uc_nation = 0 ;
83238: LD_ADDR_OWVAR 21
83242: PUSH
83243: LD_INT 0
83245: ST_TO_ADDR
// InitHc ;
83246: CALL_OW 19
// InitVc ;
83250: CALL_OW 20
// if mastodonts then
83254: LD_VAR 0 6
83258: IFFALSE 83325
// for i = 1 to mastodonts do
83260: LD_ADDR_VAR 0 11
83264: PUSH
83265: DOUBLE
83266: LD_INT 1
83268: DEC
83269: ST_TO_ADDR
83270: LD_VAR 0 6
83274: PUSH
83275: FOR_TO
83276: IFFALSE 83323
// begin vc_chassis := 31 ;
83278: LD_ADDR_OWVAR 37
83282: PUSH
83283: LD_INT 31
83285: ST_TO_ADDR
// vc_control := control_rider ;
83286: LD_ADDR_OWVAR 38
83290: PUSH
83291: LD_INT 4
83293: ST_TO_ADDR
// animal := CreateVehicle ;
83294: LD_ADDR_VAR 0 12
83298: PUSH
83299: CALL_OW 45
83303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83304: LD_VAR 0 12
83308: PPUSH
83309: LD_VAR 0 8
83313: PPUSH
83314: LD_INT 0
83316: PPUSH
83317: CALL 85394 0 3
// end ;
83321: GO 83275
83323: POP
83324: POP
// if horses then
83325: LD_VAR 0 5
83329: IFFALSE 83396
// for i = 1 to horses do
83331: LD_ADDR_VAR 0 11
83335: PUSH
83336: DOUBLE
83337: LD_INT 1
83339: DEC
83340: ST_TO_ADDR
83341: LD_VAR 0 5
83345: PUSH
83346: FOR_TO
83347: IFFALSE 83394
// begin hc_class := 21 ;
83349: LD_ADDR_OWVAR 28
83353: PUSH
83354: LD_INT 21
83356: ST_TO_ADDR
// hc_gallery :=  ;
83357: LD_ADDR_OWVAR 33
83361: PUSH
83362: LD_STRING 
83364: ST_TO_ADDR
// animal := CreateHuman ;
83365: LD_ADDR_VAR 0 12
83369: PUSH
83370: CALL_OW 44
83374: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83375: LD_VAR 0 12
83379: PPUSH
83380: LD_VAR 0 8
83384: PPUSH
83385: LD_INT 0
83387: PPUSH
83388: CALL 85394 0 3
// end ;
83392: GO 83346
83394: POP
83395: POP
// if birds then
83396: LD_VAR 0 1
83400: IFFALSE 83467
// for i = 1 to birds do
83402: LD_ADDR_VAR 0 11
83406: PUSH
83407: DOUBLE
83408: LD_INT 1
83410: DEC
83411: ST_TO_ADDR
83412: LD_VAR 0 1
83416: PUSH
83417: FOR_TO
83418: IFFALSE 83465
// begin hc_class = 18 ;
83420: LD_ADDR_OWVAR 28
83424: PUSH
83425: LD_INT 18
83427: ST_TO_ADDR
// hc_gallery =  ;
83428: LD_ADDR_OWVAR 33
83432: PUSH
83433: LD_STRING 
83435: ST_TO_ADDR
// animal := CreateHuman ;
83436: LD_ADDR_VAR 0 12
83440: PUSH
83441: CALL_OW 44
83445: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83446: LD_VAR 0 12
83450: PPUSH
83451: LD_VAR 0 8
83455: PPUSH
83456: LD_INT 0
83458: PPUSH
83459: CALL 85394 0 3
// end ;
83463: GO 83417
83465: POP
83466: POP
// if tigers then
83467: LD_VAR 0 2
83471: IFFALSE 83555
// for i = 1 to tigers do
83473: LD_ADDR_VAR 0 11
83477: PUSH
83478: DOUBLE
83479: LD_INT 1
83481: DEC
83482: ST_TO_ADDR
83483: LD_VAR 0 2
83487: PUSH
83488: FOR_TO
83489: IFFALSE 83553
// begin hc_class = class_tiger ;
83491: LD_ADDR_OWVAR 28
83495: PUSH
83496: LD_INT 14
83498: ST_TO_ADDR
// hc_gallery =  ;
83499: LD_ADDR_OWVAR 33
83503: PUSH
83504: LD_STRING 
83506: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
83507: LD_ADDR_OWVAR 35
83511: PUSH
83512: LD_INT 7
83514: NEG
83515: PPUSH
83516: LD_INT 7
83518: PPUSH
83519: CALL_OW 12
83523: ST_TO_ADDR
// animal := CreateHuman ;
83524: LD_ADDR_VAR 0 12
83528: PUSH
83529: CALL_OW 44
83533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83534: LD_VAR 0 12
83538: PPUSH
83539: LD_VAR 0 8
83543: PPUSH
83544: LD_INT 0
83546: PPUSH
83547: CALL 85394 0 3
// end ;
83551: GO 83488
83553: POP
83554: POP
// if apemans then
83555: LD_VAR 0 3
83559: IFFALSE 83682
// for i = 1 to apemans do
83561: LD_ADDR_VAR 0 11
83565: PUSH
83566: DOUBLE
83567: LD_INT 1
83569: DEC
83570: ST_TO_ADDR
83571: LD_VAR 0 3
83575: PUSH
83576: FOR_TO
83577: IFFALSE 83680
// begin hc_class = class_apeman ;
83579: LD_ADDR_OWVAR 28
83583: PUSH
83584: LD_INT 12
83586: ST_TO_ADDR
// hc_gallery =  ;
83587: LD_ADDR_OWVAR 33
83591: PUSH
83592: LD_STRING 
83594: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
83595: LD_ADDR_OWVAR 35
83599: PUSH
83600: LD_INT 5
83602: NEG
83603: PPUSH
83604: LD_INT 5
83606: PPUSH
83607: CALL_OW 12
83611: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
83612: LD_ADDR_OWVAR 31
83616: PUSH
83617: LD_INT 1
83619: PPUSH
83620: LD_INT 3
83622: PPUSH
83623: CALL_OW 12
83627: PUSH
83628: LD_INT 1
83630: PPUSH
83631: LD_INT 3
83633: PPUSH
83634: CALL_OW 12
83638: PUSH
83639: LD_INT 0
83641: PUSH
83642: LD_INT 0
83644: PUSH
83645: EMPTY
83646: LIST
83647: LIST
83648: LIST
83649: LIST
83650: ST_TO_ADDR
// animal := CreateHuman ;
83651: LD_ADDR_VAR 0 12
83655: PUSH
83656: CALL_OW 44
83660: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83661: LD_VAR 0 12
83665: PPUSH
83666: LD_VAR 0 8
83670: PPUSH
83671: LD_INT 0
83673: PPUSH
83674: CALL 85394 0 3
// end ;
83678: GO 83576
83680: POP
83681: POP
// if enchidnas then
83682: LD_VAR 0 4
83686: IFFALSE 83753
// for i = 1 to enchidnas do
83688: LD_ADDR_VAR 0 11
83692: PUSH
83693: DOUBLE
83694: LD_INT 1
83696: DEC
83697: ST_TO_ADDR
83698: LD_VAR 0 4
83702: PUSH
83703: FOR_TO
83704: IFFALSE 83751
// begin hc_class = 13 ;
83706: LD_ADDR_OWVAR 28
83710: PUSH
83711: LD_INT 13
83713: ST_TO_ADDR
// hc_gallery =  ;
83714: LD_ADDR_OWVAR 33
83718: PUSH
83719: LD_STRING 
83721: ST_TO_ADDR
// animal := CreateHuman ;
83722: LD_ADDR_VAR 0 12
83726: PUSH
83727: CALL_OW 44
83731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83732: LD_VAR 0 12
83736: PPUSH
83737: LD_VAR 0 8
83741: PPUSH
83742: LD_INT 0
83744: PPUSH
83745: CALL 85394 0 3
// end ;
83749: GO 83703
83751: POP
83752: POP
// if fishes then
83753: LD_VAR 0 7
83757: IFFALSE 83824
// for i = 1 to fishes do
83759: LD_ADDR_VAR 0 11
83763: PUSH
83764: DOUBLE
83765: LD_INT 1
83767: DEC
83768: ST_TO_ADDR
83769: LD_VAR 0 7
83773: PUSH
83774: FOR_TO
83775: IFFALSE 83822
// begin hc_class = 20 ;
83777: LD_ADDR_OWVAR 28
83781: PUSH
83782: LD_INT 20
83784: ST_TO_ADDR
// hc_gallery =  ;
83785: LD_ADDR_OWVAR 33
83789: PUSH
83790: LD_STRING 
83792: ST_TO_ADDR
// animal := CreateHuman ;
83793: LD_ADDR_VAR 0 12
83797: PUSH
83798: CALL_OW 44
83802: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
83803: LD_VAR 0 12
83807: PPUSH
83808: LD_VAR 0 9
83812: PPUSH
83813: LD_INT 0
83815: PPUSH
83816: CALL 85394 0 3
// end ;
83820: GO 83774
83822: POP
83823: POP
// end ;
83824: LD_VAR 0 10
83828: RET
// export function WantHeal ( sci , unit ) ; begin
83829: LD_INT 0
83831: PPUSH
// if GetTaskList ( sci ) > 0 then
83832: LD_VAR 0 1
83836: PPUSH
83837: CALL_OW 437
83841: PUSH
83842: LD_INT 0
83844: GREATER
83845: IFFALSE 83915
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
83847: LD_VAR 0 1
83851: PPUSH
83852: CALL_OW 437
83856: PUSH
83857: LD_INT 1
83859: ARRAY
83860: PUSH
83861: LD_INT 1
83863: ARRAY
83864: PUSH
83865: LD_STRING l
83867: EQUAL
83868: PUSH
83869: LD_VAR 0 1
83873: PPUSH
83874: CALL_OW 437
83878: PUSH
83879: LD_INT 1
83881: ARRAY
83882: PUSH
83883: LD_INT 4
83885: ARRAY
83886: PUSH
83887: LD_VAR 0 2
83891: EQUAL
83892: AND
83893: IFFALSE 83905
// result := true else
83895: LD_ADDR_VAR 0 3
83899: PUSH
83900: LD_INT 1
83902: ST_TO_ADDR
83903: GO 83913
// result := false ;
83905: LD_ADDR_VAR 0 3
83909: PUSH
83910: LD_INT 0
83912: ST_TO_ADDR
// end else
83913: GO 83923
// result := false ;
83915: LD_ADDR_VAR 0 3
83919: PUSH
83920: LD_INT 0
83922: ST_TO_ADDR
// end ;
83923: LD_VAR 0 3
83927: RET
// export function HealTarget ( sci ) ; begin
83928: LD_INT 0
83930: PPUSH
// if not sci then
83931: LD_VAR 0 1
83935: NOT
83936: IFFALSE 83940
// exit ;
83938: GO 84005
// result := 0 ;
83940: LD_ADDR_VAR 0 2
83944: PUSH
83945: LD_INT 0
83947: ST_TO_ADDR
// if GetTaskList ( sci ) then
83948: LD_VAR 0 1
83952: PPUSH
83953: CALL_OW 437
83957: IFFALSE 84005
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
83959: LD_VAR 0 1
83963: PPUSH
83964: CALL_OW 437
83968: PUSH
83969: LD_INT 1
83971: ARRAY
83972: PUSH
83973: LD_INT 1
83975: ARRAY
83976: PUSH
83977: LD_STRING l
83979: EQUAL
83980: IFFALSE 84005
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
83982: LD_ADDR_VAR 0 2
83986: PUSH
83987: LD_VAR 0 1
83991: PPUSH
83992: CALL_OW 437
83996: PUSH
83997: LD_INT 1
83999: ARRAY
84000: PUSH
84001: LD_INT 4
84003: ARRAY
84004: ST_TO_ADDR
// end ;
84005: LD_VAR 0 2
84009: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84010: LD_INT 0
84012: PPUSH
84013: PPUSH
84014: PPUSH
84015: PPUSH
// if not base_units then
84016: LD_VAR 0 1
84020: NOT
84021: IFFALSE 84025
// exit ;
84023: GO 84112
// result := false ;
84025: LD_ADDR_VAR 0 2
84029: PUSH
84030: LD_INT 0
84032: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
84033: LD_ADDR_VAR 0 5
84037: PUSH
84038: LD_VAR 0 1
84042: PPUSH
84043: LD_INT 21
84045: PUSH
84046: LD_INT 3
84048: PUSH
84049: EMPTY
84050: LIST
84051: LIST
84052: PPUSH
84053: CALL_OW 72
84057: ST_TO_ADDR
// if not tmp then
84058: LD_VAR 0 5
84062: NOT
84063: IFFALSE 84067
// exit ;
84065: GO 84112
// for i in tmp do
84067: LD_ADDR_VAR 0 3
84071: PUSH
84072: LD_VAR 0 5
84076: PUSH
84077: FOR_IN
84078: IFFALSE 84110
// begin result := EnemyInRange ( i , 22 ) ;
84080: LD_ADDR_VAR 0 2
84084: PUSH
84085: LD_VAR 0 3
84089: PPUSH
84090: LD_INT 22
84092: PPUSH
84093: CALL 82348 0 2
84097: ST_TO_ADDR
// if result then
84098: LD_VAR 0 2
84102: IFFALSE 84108
// exit ;
84104: POP
84105: POP
84106: GO 84112
// end ;
84108: GO 84077
84110: POP
84111: POP
// end ;
84112: LD_VAR 0 2
84116: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
84117: LD_INT 0
84119: PPUSH
84120: PPUSH
// if not units then
84121: LD_VAR 0 1
84125: NOT
84126: IFFALSE 84130
// exit ;
84128: GO 84200
// result := [ ] ;
84130: LD_ADDR_VAR 0 3
84134: PUSH
84135: EMPTY
84136: ST_TO_ADDR
// for i in units do
84137: LD_ADDR_VAR 0 4
84141: PUSH
84142: LD_VAR 0 1
84146: PUSH
84147: FOR_IN
84148: IFFALSE 84198
// if GetTag ( i ) = tag then
84150: LD_VAR 0 4
84154: PPUSH
84155: CALL_OW 110
84159: PUSH
84160: LD_VAR 0 2
84164: EQUAL
84165: IFFALSE 84196
// result := Insert ( result , result + 1 , i ) ;
84167: LD_ADDR_VAR 0 3
84171: PUSH
84172: LD_VAR 0 3
84176: PPUSH
84177: LD_VAR 0 3
84181: PUSH
84182: LD_INT 1
84184: PLUS
84185: PPUSH
84186: LD_VAR 0 4
84190: PPUSH
84191: CALL_OW 2
84195: ST_TO_ADDR
84196: GO 84147
84198: POP
84199: POP
// end ;
84200: LD_VAR 0 3
84204: RET
// export function IsDriver ( un ) ; begin
84205: LD_INT 0
84207: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
84208: LD_ADDR_VAR 0 2
84212: PUSH
84213: LD_VAR 0 1
84217: PUSH
84218: LD_INT 55
84220: PUSH
84221: EMPTY
84222: LIST
84223: PPUSH
84224: CALL_OW 69
84228: IN
84229: ST_TO_ADDR
// end ;
84230: LD_VAR 0 2
84234: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
84235: LD_INT 0
84237: PPUSH
84238: PPUSH
// list := [ ] ;
84239: LD_ADDR_VAR 0 5
84243: PUSH
84244: EMPTY
84245: ST_TO_ADDR
// case d of 0 :
84246: LD_VAR 0 3
84250: PUSH
84251: LD_INT 0
84253: DOUBLE
84254: EQUAL
84255: IFTRUE 84259
84257: GO 84392
84259: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
84260: LD_ADDR_VAR 0 5
84264: PUSH
84265: LD_VAR 0 1
84269: PUSH
84270: LD_INT 4
84272: MINUS
84273: PUSH
84274: LD_VAR 0 2
84278: PUSH
84279: LD_INT 4
84281: MINUS
84282: PUSH
84283: LD_INT 2
84285: PUSH
84286: EMPTY
84287: LIST
84288: LIST
84289: LIST
84290: PUSH
84291: LD_VAR 0 1
84295: PUSH
84296: LD_INT 3
84298: MINUS
84299: PUSH
84300: LD_VAR 0 2
84304: PUSH
84305: LD_INT 1
84307: PUSH
84308: EMPTY
84309: LIST
84310: LIST
84311: LIST
84312: PUSH
84313: LD_VAR 0 1
84317: PUSH
84318: LD_INT 4
84320: PLUS
84321: PUSH
84322: LD_VAR 0 2
84326: PUSH
84327: LD_INT 4
84329: PUSH
84330: EMPTY
84331: LIST
84332: LIST
84333: LIST
84334: PUSH
84335: LD_VAR 0 1
84339: PUSH
84340: LD_INT 3
84342: PLUS
84343: PUSH
84344: LD_VAR 0 2
84348: PUSH
84349: LD_INT 3
84351: PLUS
84352: PUSH
84353: LD_INT 5
84355: PUSH
84356: EMPTY
84357: LIST
84358: LIST
84359: LIST
84360: PUSH
84361: LD_VAR 0 1
84365: PUSH
84366: LD_VAR 0 2
84370: PUSH
84371: LD_INT 4
84373: PLUS
84374: PUSH
84375: LD_INT 0
84377: PUSH
84378: EMPTY
84379: LIST
84380: LIST
84381: LIST
84382: PUSH
84383: EMPTY
84384: LIST
84385: LIST
84386: LIST
84387: LIST
84388: LIST
84389: ST_TO_ADDR
// end ; 1 :
84390: GO 85090
84392: LD_INT 1
84394: DOUBLE
84395: EQUAL
84396: IFTRUE 84400
84398: GO 84533
84400: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
84401: LD_ADDR_VAR 0 5
84405: PUSH
84406: LD_VAR 0 1
84410: PUSH
84411: LD_VAR 0 2
84415: PUSH
84416: LD_INT 4
84418: MINUS
84419: PUSH
84420: LD_INT 3
84422: PUSH
84423: EMPTY
84424: LIST
84425: LIST
84426: LIST
84427: PUSH
84428: LD_VAR 0 1
84432: PUSH
84433: LD_INT 3
84435: MINUS
84436: PUSH
84437: LD_VAR 0 2
84441: PUSH
84442: LD_INT 3
84444: MINUS
84445: PUSH
84446: LD_INT 2
84448: PUSH
84449: EMPTY
84450: LIST
84451: LIST
84452: LIST
84453: PUSH
84454: LD_VAR 0 1
84458: PUSH
84459: LD_INT 4
84461: MINUS
84462: PUSH
84463: LD_VAR 0 2
84467: PUSH
84468: LD_INT 1
84470: PUSH
84471: EMPTY
84472: LIST
84473: LIST
84474: LIST
84475: PUSH
84476: LD_VAR 0 1
84480: PUSH
84481: LD_VAR 0 2
84485: PUSH
84486: LD_INT 3
84488: PLUS
84489: PUSH
84490: LD_INT 0
84492: PUSH
84493: EMPTY
84494: LIST
84495: LIST
84496: LIST
84497: PUSH
84498: LD_VAR 0 1
84502: PUSH
84503: LD_INT 4
84505: PLUS
84506: PUSH
84507: LD_VAR 0 2
84511: PUSH
84512: LD_INT 4
84514: PLUS
84515: PUSH
84516: LD_INT 5
84518: PUSH
84519: EMPTY
84520: LIST
84521: LIST
84522: LIST
84523: PUSH
84524: EMPTY
84525: LIST
84526: LIST
84527: LIST
84528: LIST
84529: LIST
84530: ST_TO_ADDR
// end ; 2 :
84531: GO 85090
84533: LD_INT 2
84535: DOUBLE
84536: EQUAL
84537: IFTRUE 84541
84539: GO 84670
84541: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
84542: LD_ADDR_VAR 0 5
84546: PUSH
84547: LD_VAR 0 1
84551: PUSH
84552: LD_VAR 0 2
84556: PUSH
84557: LD_INT 3
84559: MINUS
84560: PUSH
84561: LD_INT 3
84563: PUSH
84564: EMPTY
84565: LIST
84566: LIST
84567: LIST
84568: PUSH
84569: LD_VAR 0 1
84573: PUSH
84574: LD_INT 4
84576: PLUS
84577: PUSH
84578: LD_VAR 0 2
84582: PUSH
84583: LD_INT 4
84585: PUSH
84586: EMPTY
84587: LIST
84588: LIST
84589: LIST
84590: PUSH
84591: LD_VAR 0 1
84595: PUSH
84596: LD_VAR 0 2
84600: PUSH
84601: LD_INT 4
84603: PLUS
84604: PUSH
84605: LD_INT 0
84607: PUSH
84608: EMPTY
84609: LIST
84610: LIST
84611: LIST
84612: PUSH
84613: LD_VAR 0 1
84617: PUSH
84618: LD_INT 3
84620: MINUS
84621: PUSH
84622: LD_VAR 0 2
84626: PUSH
84627: LD_INT 1
84629: PUSH
84630: EMPTY
84631: LIST
84632: LIST
84633: LIST
84634: PUSH
84635: LD_VAR 0 1
84639: PUSH
84640: LD_INT 4
84642: MINUS
84643: PUSH
84644: LD_VAR 0 2
84648: PUSH
84649: LD_INT 4
84651: MINUS
84652: PUSH
84653: LD_INT 2
84655: PUSH
84656: EMPTY
84657: LIST
84658: LIST
84659: LIST
84660: PUSH
84661: EMPTY
84662: LIST
84663: LIST
84664: LIST
84665: LIST
84666: LIST
84667: ST_TO_ADDR
// end ; 3 :
84668: GO 85090
84670: LD_INT 3
84672: DOUBLE
84673: EQUAL
84674: IFTRUE 84678
84676: GO 84811
84678: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
84679: LD_ADDR_VAR 0 5
84683: PUSH
84684: LD_VAR 0 1
84688: PUSH
84689: LD_INT 3
84691: PLUS
84692: PUSH
84693: LD_VAR 0 2
84697: PUSH
84698: LD_INT 4
84700: PUSH
84701: EMPTY
84702: LIST
84703: LIST
84704: LIST
84705: PUSH
84706: LD_VAR 0 1
84710: PUSH
84711: LD_INT 4
84713: PLUS
84714: PUSH
84715: LD_VAR 0 2
84719: PUSH
84720: LD_INT 4
84722: PLUS
84723: PUSH
84724: LD_INT 5
84726: PUSH
84727: EMPTY
84728: LIST
84729: LIST
84730: LIST
84731: PUSH
84732: LD_VAR 0 1
84736: PUSH
84737: LD_INT 4
84739: MINUS
84740: PUSH
84741: LD_VAR 0 2
84745: PUSH
84746: LD_INT 1
84748: PUSH
84749: EMPTY
84750: LIST
84751: LIST
84752: LIST
84753: PUSH
84754: LD_VAR 0 1
84758: PUSH
84759: LD_VAR 0 2
84763: PUSH
84764: LD_INT 4
84766: MINUS
84767: PUSH
84768: LD_INT 3
84770: PUSH
84771: EMPTY
84772: LIST
84773: LIST
84774: LIST
84775: PUSH
84776: LD_VAR 0 1
84780: PUSH
84781: LD_INT 3
84783: MINUS
84784: PUSH
84785: LD_VAR 0 2
84789: PUSH
84790: LD_INT 3
84792: MINUS
84793: PUSH
84794: LD_INT 2
84796: PUSH
84797: EMPTY
84798: LIST
84799: LIST
84800: LIST
84801: PUSH
84802: EMPTY
84803: LIST
84804: LIST
84805: LIST
84806: LIST
84807: LIST
84808: ST_TO_ADDR
// end ; 4 :
84809: GO 85090
84811: LD_INT 4
84813: DOUBLE
84814: EQUAL
84815: IFTRUE 84819
84817: GO 84952
84819: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
84820: LD_ADDR_VAR 0 5
84824: PUSH
84825: LD_VAR 0 1
84829: PUSH
84830: LD_VAR 0 2
84834: PUSH
84835: LD_INT 4
84837: PLUS
84838: PUSH
84839: LD_INT 0
84841: PUSH
84842: EMPTY
84843: LIST
84844: LIST
84845: LIST
84846: PUSH
84847: LD_VAR 0 1
84851: PUSH
84852: LD_INT 3
84854: PLUS
84855: PUSH
84856: LD_VAR 0 2
84860: PUSH
84861: LD_INT 3
84863: PLUS
84864: PUSH
84865: LD_INT 5
84867: PUSH
84868: EMPTY
84869: LIST
84870: LIST
84871: LIST
84872: PUSH
84873: LD_VAR 0 1
84877: PUSH
84878: LD_INT 4
84880: PLUS
84881: PUSH
84882: LD_VAR 0 2
84886: PUSH
84887: LD_INT 4
84889: PUSH
84890: EMPTY
84891: LIST
84892: LIST
84893: LIST
84894: PUSH
84895: LD_VAR 0 1
84899: PUSH
84900: LD_VAR 0 2
84904: PUSH
84905: LD_INT 3
84907: MINUS
84908: PUSH
84909: LD_INT 3
84911: PUSH
84912: EMPTY
84913: LIST
84914: LIST
84915: LIST
84916: PUSH
84917: LD_VAR 0 1
84921: PUSH
84922: LD_INT 4
84924: MINUS
84925: PUSH
84926: LD_VAR 0 2
84930: PUSH
84931: LD_INT 4
84933: MINUS
84934: PUSH
84935: LD_INT 2
84937: PUSH
84938: EMPTY
84939: LIST
84940: LIST
84941: LIST
84942: PUSH
84943: EMPTY
84944: LIST
84945: LIST
84946: LIST
84947: LIST
84948: LIST
84949: ST_TO_ADDR
// end ; 5 :
84950: GO 85090
84952: LD_INT 5
84954: DOUBLE
84955: EQUAL
84956: IFTRUE 84960
84958: GO 85089
84960: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
84961: LD_ADDR_VAR 0 5
84965: PUSH
84966: LD_VAR 0 1
84970: PUSH
84971: LD_INT 4
84973: MINUS
84974: PUSH
84975: LD_VAR 0 2
84979: PUSH
84980: LD_INT 1
84982: PUSH
84983: EMPTY
84984: LIST
84985: LIST
84986: LIST
84987: PUSH
84988: LD_VAR 0 1
84992: PUSH
84993: LD_VAR 0 2
84997: PUSH
84998: LD_INT 4
85000: MINUS
85001: PUSH
85002: LD_INT 3
85004: PUSH
85005: EMPTY
85006: LIST
85007: LIST
85008: LIST
85009: PUSH
85010: LD_VAR 0 1
85014: PUSH
85015: LD_INT 4
85017: PLUS
85018: PUSH
85019: LD_VAR 0 2
85023: PUSH
85024: LD_INT 4
85026: PLUS
85027: PUSH
85028: LD_INT 5
85030: PUSH
85031: EMPTY
85032: LIST
85033: LIST
85034: LIST
85035: PUSH
85036: LD_VAR 0 1
85040: PUSH
85041: LD_INT 3
85043: PLUS
85044: PUSH
85045: LD_VAR 0 2
85049: PUSH
85050: LD_INT 4
85052: PUSH
85053: EMPTY
85054: LIST
85055: LIST
85056: LIST
85057: PUSH
85058: LD_VAR 0 1
85062: PUSH
85063: LD_VAR 0 2
85067: PUSH
85068: LD_INT 3
85070: PLUS
85071: PUSH
85072: LD_INT 0
85074: PUSH
85075: EMPTY
85076: LIST
85077: LIST
85078: LIST
85079: PUSH
85080: EMPTY
85081: LIST
85082: LIST
85083: LIST
85084: LIST
85085: LIST
85086: ST_TO_ADDR
// end ; end ;
85087: GO 85090
85089: POP
// result := list ;
85090: LD_ADDR_VAR 0 4
85094: PUSH
85095: LD_VAR 0 5
85099: ST_TO_ADDR
// end ;
85100: LD_VAR 0 4
85104: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
85105: LD_INT 0
85107: PPUSH
85108: PPUSH
85109: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
85110: LD_VAR 0 1
85114: NOT
85115: PUSH
85116: LD_VAR 0 2
85120: PUSH
85121: LD_INT 1
85123: PUSH
85124: LD_INT 2
85126: PUSH
85127: LD_INT 3
85129: PUSH
85130: LD_INT 4
85132: PUSH
85133: EMPTY
85134: LIST
85135: LIST
85136: LIST
85137: LIST
85138: IN
85139: NOT
85140: OR
85141: IFFALSE 85145
// exit ;
85143: GO 85237
// tmp := [ ] ;
85145: LD_ADDR_VAR 0 5
85149: PUSH
85150: EMPTY
85151: ST_TO_ADDR
// for i in units do
85152: LD_ADDR_VAR 0 4
85156: PUSH
85157: LD_VAR 0 1
85161: PUSH
85162: FOR_IN
85163: IFFALSE 85206
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
85165: LD_ADDR_VAR 0 5
85169: PUSH
85170: LD_VAR 0 5
85174: PPUSH
85175: LD_VAR 0 5
85179: PUSH
85180: LD_INT 1
85182: PLUS
85183: PPUSH
85184: LD_VAR 0 4
85188: PPUSH
85189: LD_VAR 0 2
85193: PPUSH
85194: CALL_OW 259
85198: PPUSH
85199: CALL_OW 2
85203: ST_TO_ADDR
85204: GO 85162
85206: POP
85207: POP
// if not tmp then
85208: LD_VAR 0 5
85212: NOT
85213: IFFALSE 85217
// exit ;
85215: GO 85237
// result := SortListByListDesc ( units , tmp ) ;
85217: LD_ADDR_VAR 0 3
85221: PUSH
85222: LD_VAR 0 1
85226: PPUSH
85227: LD_VAR 0 5
85231: PPUSH
85232: CALL_OW 77
85236: ST_TO_ADDR
// end ;
85237: LD_VAR 0 3
85241: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
85242: LD_INT 0
85244: PPUSH
85245: PPUSH
85246: PPUSH
// x := GetX ( building ) ;
85247: LD_ADDR_VAR 0 4
85251: PUSH
85252: LD_VAR 0 2
85256: PPUSH
85257: CALL_OW 250
85261: ST_TO_ADDR
// y := GetY ( building ) ;
85262: LD_ADDR_VAR 0 5
85266: PUSH
85267: LD_VAR 0 2
85271: PPUSH
85272: CALL_OW 251
85276: ST_TO_ADDR
// if GetTaskList ( unit ) then
85277: LD_VAR 0 1
85281: PPUSH
85282: CALL_OW 437
85286: IFFALSE 85381
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
85288: LD_STRING e
85290: PUSH
85291: LD_VAR 0 1
85295: PPUSH
85296: CALL_OW 437
85300: PUSH
85301: LD_INT 1
85303: ARRAY
85304: PUSH
85305: LD_INT 1
85307: ARRAY
85308: EQUAL
85309: PUSH
85310: LD_VAR 0 4
85314: PUSH
85315: LD_VAR 0 1
85319: PPUSH
85320: CALL_OW 437
85324: PUSH
85325: LD_INT 1
85327: ARRAY
85328: PUSH
85329: LD_INT 2
85331: ARRAY
85332: EQUAL
85333: AND
85334: PUSH
85335: LD_VAR 0 5
85339: PUSH
85340: LD_VAR 0 1
85344: PPUSH
85345: CALL_OW 437
85349: PUSH
85350: LD_INT 1
85352: ARRAY
85353: PUSH
85354: LD_INT 3
85356: ARRAY
85357: EQUAL
85358: AND
85359: IFFALSE 85371
// result := true else
85361: LD_ADDR_VAR 0 3
85365: PUSH
85366: LD_INT 1
85368: ST_TO_ADDR
85369: GO 85379
// result := false ;
85371: LD_ADDR_VAR 0 3
85375: PUSH
85376: LD_INT 0
85378: ST_TO_ADDR
// end else
85379: GO 85389
// result := false ;
85381: LD_ADDR_VAR 0 3
85385: PUSH
85386: LD_INT 0
85388: ST_TO_ADDR
// end ;
85389: LD_VAR 0 3
85393: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
85394: LD_INT 0
85396: PPUSH
85397: PPUSH
85398: PPUSH
85399: PPUSH
// if not unit or not area then
85400: LD_VAR 0 1
85404: NOT
85405: PUSH
85406: LD_VAR 0 2
85410: NOT
85411: OR
85412: IFFALSE 85416
// exit ;
85414: GO 85580
// tmp := AreaToList ( area , i ) ;
85416: LD_ADDR_VAR 0 6
85420: PUSH
85421: LD_VAR 0 2
85425: PPUSH
85426: LD_VAR 0 5
85430: PPUSH
85431: CALL_OW 517
85435: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
85436: LD_ADDR_VAR 0 5
85440: PUSH
85441: DOUBLE
85442: LD_INT 1
85444: DEC
85445: ST_TO_ADDR
85446: LD_VAR 0 6
85450: PUSH
85451: LD_INT 1
85453: ARRAY
85454: PUSH
85455: FOR_TO
85456: IFFALSE 85578
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
85458: LD_ADDR_VAR 0 7
85462: PUSH
85463: LD_VAR 0 6
85467: PUSH
85468: LD_INT 1
85470: ARRAY
85471: PUSH
85472: LD_VAR 0 5
85476: ARRAY
85477: PUSH
85478: LD_VAR 0 6
85482: PUSH
85483: LD_INT 2
85485: ARRAY
85486: PUSH
85487: LD_VAR 0 5
85491: ARRAY
85492: PUSH
85493: EMPTY
85494: LIST
85495: LIST
85496: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
85497: LD_VAR 0 7
85501: PUSH
85502: LD_INT 1
85504: ARRAY
85505: PPUSH
85506: LD_VAR 0 7
85510: PUSH
85511: LD_INT 2
85513: ARRAY
85514: PPUSH
85515: CALL_OW 428
85519: PUSH
85520: LD_INT 0
85522: EQUAL
85523: IFFALSE 85576
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
85525: LD_VAR 0 1
85529: PPUSH
85530: LD_VAR 0 7
85534: PUSH
85535: LD_INT 1
85537: ARRAY
85538: PPUSH
85539: LD_VAR 0 7
85543: PUSH
85544: LD_INT 2
85546: ARRAY
85547: PPUSH
85548: LD_VAR 0 3
85552: PPUSH
85553: CALL_OW 48
// result := IsPlaced ( unit ) ;
85557: LD_ADDR_VAR 0 4
85561: PUSH
85562: LD_VAR 0 1
85566: PPUSH
85567: CALL_OW 305
85571: ST_TO_ADDR
// exit ;
85572: POP
85573: POP
85574: GO 85580
// end ; end ;
85576: GO 85455
85578: POP
85579: POP
// end ;
85580: LD_VAR 0 4
85584: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
85585: LD_INT 0
85587: PPUSH
85588: PPUSH
85589: PPUSH
// if not side or side > 8 then
85590: LD_VAR 0 1
85594: NOT
85595: PUSH
85596: LD_VAR 0 1
85600: PUSH
85601: LD_INT 8
85603: GREATER
85604: OR
85605: IFFALSE 85609
// exit ;
85607: GO 85796
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
85609: LD_ADDR_VAR 0 4
85613: PUSH
85614: LD_INT 22
85616: PUSH
85617: LD_VAR 0 1
85621: PUSH
85622: EMPTY
85623: LIST
85624: LIST
85625: PUSH
85626: LD_INT 21
85628: PUSH
85629: LD_INT 3
85631: PUSH
85632: EMPTY
85633: LIST
85634: LIST
85635: PUSH
85636: EMPTY
85637: LIST
85638: LIST
85639: PPUSH
85640: CALL_OW 69
85644: ST_TO_ADDR
// if not tmp then
85645: LD_VAR 0 4
85649: NOT
85650: IFFALSE 85654
// exit ;
85652: GO 85796
// enable_addtolog := true ;
85654: LD_ADDR_OWVAR 81
85658: PUSH
85659: LD_INT 1
85661: ST_TO_ADDR
// AddToLog ( [ ) ;
85662: LD_STRING [
85664: PPUSH
85665: CALL_OW 561
// for i in tmp do
85669: LD_ADDR_VAR 0 3
85673: PUSH
85674: LD_VAR 0 4
85678: PUSH
85679: FOR_IN
85680: IFFALSE 85787
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
85682: LD_STRING [
85684: PUSH
85685: LD_VAR 0 3
85689: PPUSH
85690: CALL_OW 266
85694: STR
85695: PUSH
85696: LD_STRING , 
85698: STR
85699: PUSH
85700: LD_VAR 0 3
85704: PPUSH
85705: CALL_OW 250
85709: STR
85710: PUSH
85711: LD_STRING , 
85713: STR
85714: PUSH
85715: LD_VAR 0 3
85719: PPUSH
85720: CALL_OW 251
85724: STR
85725: PUSH
85726: LD_STRING , 
85728: STR
85729: PUSH
85730: LD_VAR 0 3
85734: PPUSH
85735: CALL_OW 254
85739: STR
85740: PUSH
85741: LD_STRING , 
85743: STR
85744: PUSH
85745: LD_VAR 0 3
85749: PPUSH
85750: LD_INT 1
85752: PPUSH
85753: CALL_OW 268
85757: STR
85758: PUSH
85759: LD_STRING , 
85761: STR
85762: PUSH
85763: LD_VAR 0 3
85767: PPUSH
85768: LD_INT 2
85770: PPUSH
85771: CALL_OW 268
85775: STR
85776: PUSH
85777: LD_STRING ],
85779: STR
85780: PPUSH
85781: CALL_OW 561
// end ;
85785: GO 85679
85787: POP
85788: POP
// AddToLog ( ]; ) ;
85789: LD_STRING ];
85791: PPUSH
85792: CALL_OW 561
// end ;
85796: LD_VAR 0 2
85800: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
85801: LD_INT 0
85803: PPUSH
85804: PPUSH
85805: PPUSH
85806: PPUSH
85807: PPUSH
// if not area or not rate or not max then
85808: LD_VAR 0 1
85812: NOT
85813: PUSH
85814: LD_VAR 0 2
85818: NOT
85819: OR
85820: PUSH
85821: LD_VAR 0 4
85825: NOT
85826: OR
85827: IFFALSE 85831
// exit ;
85829: GO 86023
// while 1 do
85831: LD_INT 1
85833: IFFALSE 86023
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
85835: LD_ADDR_VAR 0 9
85839: PUSH
85840: LD_VAR 0 1
85844: PPUSH
85845: LD_INT 1
85847: PPUSH
85848: CALL_OW 287
85852: PUSH
85853: LD_INT 10
85855: MUL
85856: ST_TO_ADDR
// r := rate / 10 ;
85857: LD_ADDR_VAR 0 7
85861: PUSH
85862: LD_VAR 0 2
85866: PUSH
85867: LD_INT 10
85869: DIVREAL
85870: ST_TO_ADDR
// time := 1 1$00 ;
85871: LD_ADDR_VAR 0 8
85875: PUSH
85876: LD_INT 2100
85878: ST_TO_ADDR
// if amount < min then
85879: LD_VAR 0 9
85883: PUSH
85884: LD_VAR 0 3
85888: LESS
85889: IFFALSE 85907
// r := r * 2 else
85891: LD_ADDR_VAR 0 7
85895: PUSH
85896: LD_VAR 0 7
85900: PUSH
85901: LD_INT 2
85903: MUL
85904: ST_TO_ADDR
85905: GO 85933
// if amount > max then
85907: LD_VAR 0 9
85911: PUSH
85912: LD_VAR 0 4
85916: GREATER
85917: IFFALSE 85933
// r := r / 2 ;
85919: LD_ADDR_VAR 0 7
85923: PUSH
85924: LD_VAR 0 7
85928: PUSH
85929: LD_INT 2
85931: DIVREAL
85932: ST_TO_ADDR
// time := time / r ;
85933: LD_ADDR_VAR 0 8
85937: PUSH
85938: LD_VAR 0 8
85942: PUSH
85943: LD_VAR 0 7
85947: DIVREAL
85948: ST_TO_ADDR
// if time < 0 then
85949: LD_VAR 0 8
85953: PUSH
85954: LD_INT 0
85956: LESS
85957: IFFALSE 85974
// time := time * - 1 ;
85959: LD_ADDR_VAR 0 8
85963: PUSH
85964: LD_VAR 0 8
85968: PUSH
85969: LD_INT 1
85971: NEG
85972: MUL
85973: ST_TO_ADDR
// wait ( time ) ;
85974: LD_VAR 0 8
85978: PPUSH
85979: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
85983: LD_INT 35
85985: PPUSH
85986: LD_INT 875
85988: PPUSH
85989: CALL_OW 12
85993: PPUSH
85994: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
85998: LD_INT 1
86000: PPUSH
86001: LD_INT 5
86003: PPUSH
86004: CALL_OW 12
86008: PPUSH
86009: LD_VAR 0 1
86013: PPUSH
86014: LD_INT 1
86016: PPUSH
86017: CALL_OW 55
// end ;
86021: GO 85831
// end ;
86023: LD_VAR 0 5
86027: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
86028: LD_INT 0
86030: PPUSH
86031: PPUSH
86032: PPUSH
86033: PPUSH
86034: PPUSH
86035: PPUSH
86036: PPUSH
86037: PPUSH
// if not turrets or not factories then
86038: LD_VAR 0 1
86042: NOT
86043: PUSH
86044: LD_VAR 0 2
86048: NOT
86049: OR
86050: IFFALSE 86054
// exit ;
86052: GO 86361
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
86054: LD_ADDR_VAR 0 10
86058: PUSH
86059: LD_INT 5
86061: PUSH
86062: LD_INT 6
86064: PUSH
86065: EMPTY
86066: LIST
86067: LIST
86068: PUSH
86069: LD_INT 2
86071: PUSH
86072: LD_INT 4
86074: PUSH
86075: EMPTY
86076: LIST
86077: LIST
86078: PUSH
86079: LD_INT 3
86081: PUSH
86082: LD_INT 5
86084: PUSH
86085: EMPTY
86086: LIST
86087: LIST
86088: PUSH
86089: EMPTY
86090: LIST
86091: LIST
86092: LIST
86093: PUSH
86094: LD_INT 24
86096: PUSH
86097: LD_INT 25
86099: PUSH
86100: EMPTY
86101: LIST
86102: LIST
86103: PUSH
86104: LD_INT 23
86106: PUSH
86107: LD_INT 27
86109: PUSH
86110: EMPTY
86111: LIST
86112: LIST
86113: PUSH
86114: EMPTY
86115: LIST
86116: LIST
86117: PUSH
86118: LD_INT 42
86120: PUSH
86121: LD_INT 43
86123: PUSH
86124: EMPTY
86125: LIST
86126: LIST
86127: PUSH
86128: LD_INT 44
86130: PUSH
86131: LD_INT 46
86133: PUSH
86134: EMPTY
86135: LIST
86136: LIST
86137: PUSH
86138: LD_INT 45
86140: PUSH
86141: LD_INT 47
86143: PUSH
86144: EMPTY
86145: LIST
86146: LIST
86147: PUSH
86148: EMPTY
86149: LIST
86150: LIST
86151: LIST
86152: PUSH
86153: EMPTY
86154: LIST
86155: LIST
86156: LIST
86157: ST_TO_ADDR
// result := [ ] ;
86158: LD_ADDR_VAR 0 3
86162: PUSH
86163: EMPTY
86164: ST_TO_ADDR
// for i in turrets do
86165: LD_ADDR_VAR 0 4
86169: PUSH
86170: LD_VAR 0 1
86174: PUSH
86175: FOR_IN
86176: IFFALSE 86359
// begin nat := GetNation ( i ) ;
86178: LD_ADDR_VAR 0 7
86182: PUSH
86183: LD_VAR 0 4
86187: PPUSH
86188: CALL_OW 248
86192: ST_TO_ADDR
// weapon := 0 ;
86193: LD_ADDR_VAR 0 8
86197: PUSH
86198: LD_INT 0
86200: ST_TO_ADDR
// if not nat then
86201: LD_VAR 0 7
86205: NOT
86206: IFFALSE 86210
// continue ;
86208: GO 86175
// for j in list [ nat ] do
86210: LD_ADDR_VAR 0 5
86214: PUSH
86215: LD_VAR 0 10
86219: PUSH
86220: LD_VAR 0 7
86224: ARRAY
86225: PUSH
86226: FOR_IN
86227: IFFALSE 86268
// if GetBWeapon ( i ) = j [ 1 ] then
86229: LD_VAR 0 4
86233: PPUSH
86234: CALL_OW 269
86238: PUSH
86239: LD_VAR 0 5
86243: PUSH
86244: LD_INT 1
86246: ARRAY
86247: EQUAL
86248: IFFALSE 86266
// begin weapon := j [ 2 ] ;
86250: LD_ADDR_VAR 0 8
86254: PUSH
86255: LD_VAR 0 5
86259: PUSH
86260: LD_INT 2
86262: ARRAY
86263: ST_TO_ADDR
// break ;
86264: GO 86268
// end ;
86266: GO 86226
86268: POP
86269: POP
// if not weapon then
86270: LD_VAR 0 8
86274: NOT
86275: IFFALSE 86279
// continue ;
86277: GO 86175
// for k in factories do
86279: LD_ADDR_VAR 0 6
86283: PUSH
86284: LD_VAR 0 2
86288: PUSH
86289: FOR_IN
86290: IFFALSE 86355
// begin weapons := AvailableWeaponList ( k ) ;
86292: LD_ADDR_VAR 0 9
86296: PUSH
86297: LD_VAR 0 6
86301: PPUSH
86302: CALL_OW 478
86306: ST_TO_ADDR
// if not weapons then
86307: LD_VAR 0 9
86311: NOT
86312: IFFALSE 86316
// continue ;
86314: GO 86289
// if weapon in weapons then
86316: LD_VAR 0 8
86320: PUSH
86321: LD_VAR 0 9
86325: IN
86326: IFFALSE 86353
// begin result := [ i , weapon ] ;
86328: LD_ADDR_VAR 0 3
86332: PUSH
86333: LD_VAR 0 4
86337: PUSH
86338: LD_VAR 0 8
86342: PUSH
86343: EMPTY
86344: LIST
86345: LIST
86346: ST_TO_ADDR
// exit ;
86347: POP
86348: POP
86349: POP
86350: POP
86351: GO 86361
// end ; end ;
86353: GO 86289
86355: POP
86356: POP
// end ;
86357: GO 86175
86359: POP
86360: POP
// end ;
86361: LD_VAR 0 3
86365: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
86366: LD_INT 0
86368: PPUSH
// if not side or side > 8 then
86369: LD_VAR 0 3
86373: NOT
86374: PUSH
86375: LD_VAR 0 3
86379: PUSH
86380: LD_INT 8
86382: GREATER
86383: OR
86384: IFFALSE 86388
// exit ;
86386: GO 86447
// if not range then
86388: LD_VAR 0 4
86392: NOT
86393: IFFALSE 86404
// range := - 12 ;
86395: LD_ADDR_VAR 0 4
86399: PUSH
86400: LD_INT 12
86402: NEG
86403: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
86404: LD_VAR 0 1
86408: PPUSH
86409: LD_VAR 0 2
86413: PPUSH
86414: LD_VAR 0 3
86418: PPUSH
86419: LD_VAR 0 4
86423: PPUSH
86424: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
86428: LD_VAR 0 1
86432: PPUSH
86433: LD_VAR 0 2
86437: PPUSH
86438: LD_VAR 0 3
86442: PPUSH
86443: CALL_OW 331
// end ;
86447: LD_VAR 0 5
86451: RET
// export function Video ( mode ) ; begin
86452: LD_INT 0
86454: PPUSH
// ingame_video = mode ;
86455: LD_ADDR_OWVAR 52
86459: PUSH
86460: LD_VAR 0 1
86464: ST_TO_ADDR
// interface_hidden = mode ;
86465: LD_ADDR_OWVAR 54
86469: PUSH
86470: LD_VAR 0 1
86474: ST_TO_ADDR
// end ;
86475: LD_VAR 0 2
86479: RET
// export function Join ( array , element ) ; begin
86480: LD_INT 0
86482: PPUSH
// result := array ^ element ;
86483: LD_ADDR_VAR 0 3
86487: PUSH
86488: LD_VAR 0 1
86492: PUSH
86493: LD_VAR 0 2
86497: ADD
86498: ST_TO_ADDR
// end ;
86499: LD_VAR 0 3
86503: RET
// export function JoinUnion ( array , element ) ; begin
86504: LD_INT 0
86506: PPUSH
// result := array union element ;
86507: LD_ADDR_VAR 0 3
86511: PUSH
86512: LD_VAR 0 1
86516: PUSH
86517: LD_VAR 0 2
86521: UNION
86522: ST_TO_ADDR
// end ;
86523: LD_VAR 0 3
86527: RET
// export function GetBehemoths ( side ) ; begin
86528: LD_INT 0
86530: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
86531: LD_ADDR_VAR 0 2
86535: PUSH
86536: LD_INT 22
86538: PUSH
86539: LD_VAR 0 1
86543: PUSH
86544: EMPTY
86545: LIST
86546: LIST
86547: PUSH
86548: LD_INT 31
86550: PUSH
86551: LD_INT 25
86553: PUSH
86554: EMPTY
86555: LIST
86556: LIST
86557: PUSH
86558: EMPTY
86559: LIST
86560: LIST
86561: PPUSH
86562: CALL_OW 69
86566: ST_TO_ADDR
// end ;
86567: LD_VAR 0 2
86571: RET
// export function Shuffle ( array ) ; var i , index ; begin
86572: LD_INT 0
86574: PPUSH
86575: PPUSH
86576: PPUSH
// result := [ ] ;
86577: LD_ADDR_VAR 0 2
86581: PUSH
86582: EMPTY
86583: ST_TO_ADDR
// if not array then
86584: LD_VAR 0 1
86588: NOT
86589: IFFALSE 86593
// exit ;
86591: GO 86692
// Randomize ;
86593: CALL_OW 10
// for i = array downto 1 do
86597: LD_ADDR_VAR 0 3
86601: PUSH
86602: DOUBLE
86603: LD_VAR 0 1
86607: INC
86608: ST_TO_ADDR
86609: LD_INT 1
86611: PUSH
86612: FOR_DOWNTO
86613: IFFALSE 86690
// begin index := rand ( 1 , array ) ;
86615: LD_ADDR_VAR 0 4
86619: PUSH
86620: LD_INT 1
86622: PPUSH
86623: LD_VAR 0 1
86627: PPUSH
86628: CALL_OW 12
86632: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
86633: LD_ADDR_VAR 0 2
86637: PUSH
86638: LD_VAR 0 2
86642: PPUSH
86643: LD_VAR 0 2
86647: PUSH
86648: LD_INT 1
86650: PLUS
86651: PPUSH
86652: LD_VAR 0 1
86656: PUSH
86657: LD_VAR 0 4
86661: ARRAY
86662: PPUSH
86663: CALL_OW 2
86667: ST_TO_ADDR
// array := Delete ( array , index ) ;
86668: LD_ADDR_VAR 0 1
86672: PUSH
86673: LD_VAR 0 1
86677: PPUSH
86678: LD_VAR 0 4
86682: PPUSH
86683: CALL_OW 3
86687: ST_TO_ADDR
// end ;
86688: GO 86612
86690: POP
86691: POP
// end ;
86692: LD_VAR 0 2
86696: RET
// export function GetBaseMaterials ( base ) ; begin
86697: LD_INT 0
86699: PPUSH
// result := [ 0 , 0 , 0 ] ;
86700: LD_ADDR_VAR 0 2
86704: PUSH
86705: LD_INT 0
86707: PUSH
86708: LD_INT 0
86710: PUSH
86711: LD_INT 0
86713: PUSH
86714: EMPTY
86715: LIST
86716: LIST
86717: LIST
86718: ST_TO_ADDR
// if not base then
86719: LD_VAR 0 1
86723: NOT
86724: IFFALSE 86728
// exit ;
86726: GO 86777
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
86728: LD_ADDR_VAR 0 2
86732: PUSH
86733: LD_VAR 0 1
86737: PPUSH
86738: LD_INT 1
86740: PPUSH
86741: CALL_OW 275
86745: PUSH
86746: LD_VAR 0 1
86750: PPUSH
86751: LD_INT 2
86753: PPUSH
86754: CALL_OW 275
86758: PUSH
86759: LD_VAR 0 1
86763: PPUSH
86764: LD_INT 3
86766: PPUSH
86767: CALL_OW 275
86771: PUSH
86772: EMPTY
86773: LIST
86774: LIST
86775: LIST
86776: ST_TO_ADDR
// end ; end_of_file end_of_file
86777: LD_VAR 0 2
86781: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
86782: GO 86784
86784: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
86785: LD_STRING initStreamRollete();
86787: PPUSH
86788: CALL_OW 559
// InitStreamMode ;
86792: CALL 86801 0 0
// DefineStreamItems ( ) ;
86796: CALL 87241 0 0
// end ;
86800: END
// function InitStreamMode ; begin
86801: LD_INT 0
86803: PPUSH
// streamModeActive := false ;
86804: LD_ADDR_EXP 130
86808: PUSH
86809: LD_INT 0
86811: ST_TO_ADDR
// normalCounter := 36 ;
86812: LD_ADDR_EXP 131
86816: PUSH
86817: LD_INT 36
86819: ST_TO_ADDR
// hardcoreCounter := 16 ;
86820: LD_ADDR_EXP 132
86824: PUSH
86825: LD_INT 16
86827: ST_TO_ADDR
// sRocket := false ;
86828: LD_ADDR_EXP 135
86832: PUSH
86833: LD_INT 0
86835: ST_TO_ADDR
// sSpeed := false ;
86836: LD_ADDR_EXP 134
86840: PUSH
86841: LD_INT 0
86843: ST_TO_ADDR
// sEngine := false ;
86844: LD_ADDR_EXP 136
86848: PUSH
86849: LD_INT 0
86851: ST_TO_ADDR
// sSpec := false ;
86852: LD_ADDR_EXP 133
86856: PUSH
86857: LD_INT 0
86859: ST_TO_ADDR
// sLevel := false ;
86860: LD_ADDR_EXP 137
86864: PUSH
86865: LD_INT 0
86867: ST_TO_ADDR
// sArmoury := false ;
86868: LD_ADDR_EXP 138
86872: PUSH
86873: LD_INT 0
86875: ST_TO_ADDR
// sRadar := false ;
86876: LD_ADDR_EXP 139
86880: PUSH
86881: LD_INT 0
86883: ST_TO_ADDR
// sBunker := false ;
86884: LD_ADDR_EXP 140
86888: PUSH
86889: LD_INT 0
86891: ST_TO_ADDR
// sHack := false ;
86892: LD_ADDR_EXP 141
86896: PUSH
86897: LD_INT 0
86899: ST_TO_ADDR
// sFire := false ;
86900: LD_ADDR_EXP 142
86904: PUSH
86905: LD_INT 0
86907: ST_TO_ADDR
// sRefresh := false ;
86908: LD_ADDR_EXP 143
86912: PUSH
86913: LD_INT 0
86915: ST_TO_ADDR
// sExp := false ;
86916: LD_ADDR_EXP 144
86920: PUSH
86921: LD_INT 0
86923: ST_TO_ADDR
// sDepot := false ;
86924: LD_ADDR_EXP 145
86928: PUSH
86929: LD_INT 0
86931: ST_TO_ADDR
// sFlag := false ;
86932: LD_ADDR_EXP 146
86936: PUSH
86937: LD_INT 0
86939: ST_TO_ADDR
// sKamikadze := false ;
86940: LD_ADDR_EXP 154
86944: PUSH
86945: LD_INT 0
86947: ST_TO_ADDR
// sTroll := false ;
86948: LD_ADDR_EXP 155
86952: PUSH
86953: LD_INT 0
86955: ST_TO_ADDR
// sSlow := false ;
86956: LD_ADDR_EXP 156
86960: PUSH
86961: LD_INT 0
86963: ST_TO_ADDR
// sLack := false ;
86964: LD_ADDR_EXP 157
86968: PUSH
86969: LD_INT 0
86971: ST_TO_ADDR
// sTank := false ;
86972: LD_ADDR_EXP 159
86976: PUSH
86977: LD_INT 0
86979: ST_TO_ADDR
// sRemote := false ;
86980: LD_ADDR_EXP 160
86984: PUSH
86985: LD_INT 0
86987: ST_TO_ADDR
// sPowell := false ;
86988: LD_ADDR_EXP 161
86992: PUSH
86993: LD_INT 0
86995: ST_TO_ADDR
// sTeleport := false ;
86996: LD_ADDR_EXP 164
87000: PUSH
87001: LD_INT 0
87003: ST_TO_ADDR
// sOilTower := false ;
87004: LD_ADDR_EXP 166
87008: PUSH
87009: LD_INT 0
87011: ST_TO_ADDR
// sShovel := false ;
87012: LD_ADDR_EXP 167
87016: PUSH
87017: LD_INT 0
87019: ST_TO_ADDR
// sSheik := false ;
87020: LD_ADDR_EXP 168
87024: PUSH
87025: LD_INT 0
87027: ST_TO_ADDR
// sEarthquake := false ;
87028: LD_ADDR_EXP 170
87032: PUSH
87033: LD_INT 0
87035: ST_TO_ADDR
// sAI := false ;
87036: LD_ADDR_EXP 171
87040: PUSH
87041: LD_INT 0
87043: ST_TO_ADDR
// sCargo := false ;
87044: LD_ADDR_EXP 174
87048: PUSH
87049: LD_INT 0
87051: ST_TO_ADDR
// sDLaser := false ;
87052: LD_ADDR_EXP 175
87056: PUSH
87057: LD_INT 0
87059: ST_TO_ADDR
// sExchange := false ;
87060: LD_ADDR_EXP 176
87064: PUSH
87065: LD_INT 0
87067: ST_TO_ADDR
// sFac := false ;
87068: LD_ADDR_EXP 177
87072: PUSH
87073: LD_INT 0
87075: ST_TO_ADDR
// sPower := false ;
87076: LD_ADDR_EXP 178
87080: PUSH
87081: LD_INT 0
87083: ST_TO_ADDR
// sRandom := false ;
87084: LD_ADDR_EXP 179
87088: PUSH
87089: LD_INT 0
87091: ST_TO_ADDR
// sShield := false ;
87092: LD_ADDR_EXP 180
87096: PUSH
87097: LD_INT 0
87099: ST_TO_ADDR
// sTime := false ;
87100: LD_ADDR_EXP 181
87104: PUSH
87105: LD_INT 0
87107: ST_TO_ADDR
// sTools := false ;
87108: LD_ADDR_EXP 182
87112: PUSH
87113: LD_INT 0
87115: ST_TO_ADDR
// sSold := false ;
87116: LD_ADDR_EXP 147
87120: PUSH
87121: LD_INT 0
87123: ST_TO_ADDR
// sDiff := false ;
87124: LD_ADDR_EXP 148
87128: PUSH
87129: LD_INT 0
87131: ST_TO_ADDR
// sFog := false ;
87132: LD_ADDR_EXP 151
87136: PUSH
87137: LD_INT 0
87139: ST_TO_ADDR
// sReset := false ;
87140: LD_ADDR_EXP 152
87144: PUSH
87145: LD_INT 0
87147: ST_TO_ADDR
// sSun := false ;
87148: LD_ADDR_EXP 153
87152: PUSH
87153: LD_INT 0
87155: ST_TO_ADDR
// sTiger := false ;
87156: LD_ADDR_EXP 149
87160: PUSH
87161: LD_INT 0
87163: ST_TO_ADDR
// sBomb := false ;
87164: LD_ADDR_EXP 150
87168: PUSH
87169: LD_INT 0
87171: ST_TO_ADDR
// sWound := false ;
87172: LD_ADDR_EXP 158
87176: PUSH
87177: LD_INT 0
87179: ST_TO_ADDR
// sBetray := false ;
87180: LD_ADDR_EXP 162
87184: PUSH
87185: LD_INT 0
87187: ST_TO_ADDR
// sContamin := false ;
87188: LD_ADDR_EXP 163
87192: PUSH
87193: LD_INT 0
87195: ST_TO_ADDR
// sOil := false ;
87196: LD_ADDR_EXP 165
87200: PUSH
87201: LD_INT 0
87203: ST_TO_ADDR
// sStu := false ;
87204: LD_ADDR_EXP 169
87208: PUSH
87209: LD_INT 0
87211: ST_TO_ADDR
// sBazooka := false ;
87212: LD_ADDR_EXP 172
87216: PUSH
87217: LD_INT 0
87219: ST_TO_ADDR
// sMortar := false ;
87220: LD_ADDR_EXP 173
87224: PUSH
87225: LD_INT 0
87227: ST_TO_ADDR
// sRanger := false ;
87228: LD_ADDR_EXP 183
87232: PUSH
87233: LD_INT 0
87235: ST_TO_ADDR
// end ;
87236: LD_VAR 0 1
87240: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
87241: LD_INT 0
87243: PPUSH
87244: PPUSH
87245: PPUSH
87246: PPUSH
87247: PPUSH
// result := [ ] ;
87248: LD_ADDR_VAR 0 1
87252: PUSH
87253: EMPTY
87254: ST_TO_ADDR
// if campaign_id = 1 then
87255: LD_OWVAR 69
87259: PUSH
87260: LD_INT 1
87262: EQUAL
87263: IFFALSE 90201
// begin case mission_number of 1 :
87265: LD_OWVAR 70
87269: PUSH
87270: LD_INT 1
87272: DOUBLE
87273: EQUAL
87274: IFTRUE 87278
87276: GO 87342
87278: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
87279: LD_ADDR_VAR 0 1
87283: PUSH
87284: LD_INT 2
87286: PUSH
87287: LD_INT 4
87289: PUSH
87290: LD_INT 11
87292: PUSH
87293: LD_INT 12
87295: PUSH
87296: LD_INT 15
87298: PUSH
87299: LD_INT 16
87301: PUSH
87302: LD_INT 22
87304: PUSH
87305: LD_INT 23
87307: PUSH
87308: LD_INT 26
87310: PUSH
87311: EMPTY
87312: LIST
87313: LIST
87314: LIST
87315: LIST
87316: LIST
87317: LIST
87318: LIST
87319: LIST
87320: LIST
87321: PUSH
87322: LD_INT 101
87324: PUSH
87325: LD_INT 102
87327: PUSH
87328: LD_INT 106
87330: PUSH
87331: EMPTY
87332: LIST
87333: LIST
87334: LIST
87335: PUSH
87336: EMPTY
87337: LIST
87338: LIST
87339: ST_TO_ADDR
87340: GO 90199
87342: LD_INT 2
87344: DOUBLE
87345: EQUAL
87346: IFTRUE 87350
87348: GO 87422
87350: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
87351: LD_ADDR_VAR 0 1
87355: PUSH
87356: LD_INT 2
87358: PUSH
87359: LD_INT 4
87361: PUSH
87362: LD_INT 11
87364: PUSH
87365: LD_INT 12
87367: PUSH
87368: LD_INT 15
87370: PUSH
87371: LD_INT 16
87373: PUSH
87374: LD_INT 22
87376: PUSH
87377: LD_INT 23
87379: PUSH
87380: LD_INT 26
87382: PUSH
87383: EMPTY
87384: LIST
87385: LIST
87386: LIST
87387: LIST
87388: LIST
87389: LIST
87390: LIST
87391: LIST
87392: LIST
87393: PUSH
87394: LD_INT 101
87396: PUSH
87397: LD_INT 102
87399: PUSH
87400: LD_INT 105
87402: PUSH
87403: LD_INT 106
87405: PUSH
87406: LD_INT 108
87408: PUSH
87409: EMPTY
87410: LIST
87411: LIST
87412: LIST
87413: LIST
87414: LIST
87415: PUSH
87416: EMPTY
87417: LIST
87418: LIST
87419: ST_TO_ADDR
87420: GO 90199
87422: LD_INT 3
87424: DOUBLE
87425: EQUAL
87426: IFTRUE 87430
87428: GO 87506
87430: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
87431: LD_ADDR_VAR 0 1
87435: PUSH
87436: LD_INT 2
87438: PUSH
87439: LD_INT 4
87441: PUSH
87442: LD_INT 5
87444: PUSH
87445: LD_INT 11
87447: PUSH
87448: LD_INT 12
87450: PUSH
87451: LD_INT 15
87453: PUSH
87454: LD_INT 16
87456: PUSH
87457: LD_INT 22
87459: PUSH
87460: LD_INT 26
87462: PUSH
87463: LD_INT 36
87465: PUSH
87466: EMPTY
87467: LIST
87468: LIST
87469: LIST
87470: LIST
87471: LIST
87472: LIST
87473: LIST
87474: LIST
87475: LIST
87476: LIST
87477: PUSH
87478: LD_INT 101
87480: PUSH
87481: LD_INT 102
87483: PUSH
87484: LD_INT 105
87486: PUSH
87487: LD_INT 106
87489: PUSH
87490: LD_INT 108
87492: PUSH
87493: EMPTY
87494: LIST
87495: LIST
87496: LIST
87497: LIST
87498: LIST
87499: PUSH
87500: EMPTY
87501: LIST
87502: LIST
87503: ST_TO_ADDR
87504: GO 90199
87506: LD_INT 4
87508: DOUBLE
87509: EQUAL
87510: IFTRUE 87514
87512: GO 87598
87514: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
87515: LD_ADDR_VAR 0 1
87519: PUSH
87520: LD_INT 2
87522: PUSH
87523: LD_INT 4
87525: PUSH
87526: LD_INT 5
87528: PUSH
87529: LD_INT 8
87531: PUSH
87532: LD_INT 11
87534: PUSH
87535: LD_INT 12
87537: PUSH
87538: LD_INT 15
87540: PUSH
87541: LD_INT 16
87543: PUSH
87544: LD_INT 22
87546: PUSH
87547: LD_INT 23
87549: PUSH
87550: LD_INT 26
87552: PUSH
87553: LD_INT 36
87555: PUSH
87556: EMPTY
87557: LIST
87558: LIST
87559: LIST
87560: LIST
87561: LIST
87562: LIST
87563: LIST
87564: LIST
87565: LIST
87566: LIST
87567: LIST
87568: LIST
87569: PUSH
87570: LD_INT 101
87572: PUSH
87573: LD_INT 102
87575: PUSH
87576: LD_INT 105
87578: PUSH
87579: LD_INT 106
87581: PUSH
87582: LD_INT 108
87584: PUSH
87585: EMPTY
87586: LIST
87587: LIST
87588: LIST
87589: LIST
87590: LIST
87591: PUSH
87592: EMPTY
87593: LIST
87594: LIST
87595: ST_TO_ADDR
87596: GO 90199
87598: LD_INT 5
87600: DOUBLE
87601: EQUAL
87602: IFTRUE 87606
87604: GO 87706
87606: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
87607: LD_ADDR_VAR 0 1
87611: PUSH
87612: LD_INT 2
87614: PUSH
87615: LD_INT 4
87617: PUSH
87618: LD_INT 5
87620: PUSH
87621: LD_INT 6
87623: PUSH
87624: LD_INT 8
87626: PUSH
87627: LD_INT 11
87629: PUSH
87630: LD_INT 12
87632: PUSH
87633: LD_INT 15
87635: PUSH
87636: LD_INT 16
87638: PUSH
87639: LD_INT 22
87641: PUSH
87642: LD_INT 23
87644: PUSH
87645: LD_INT 25
87647: PUSH
87648: LD_INT 26
87650: PUSH
87651: LD_INT 36
87653: PUSH
87654: EMPTY
87655: LIST
87656: LIST
87657: LIST
87658: LIST
87659: LIST
87660: LIST
87661: LIST
87662: LIST
87663: LIST
87664: LIST
87665: LIST
87666: LIST
87667: LIST
87668: LIST
87669: PUSH
87670: LD_INT 101
87672: PUSH
87673: LD_INT 102
87675: PUSH
87676: LD_INT 105
87678: PUSH
87679: LD_INT 106
87681: PUSH
87682: LD_INT 108
87684: PUSH
87685: LD_INT 109
87687: PUSH
87688: LD_INT 112
87690: PUSH
87691: EMPTY
87692: LIST
87693: LIST
87694: LIST
87695: LIST
87696: LIST
87697: LIST
87698: LIST
87699: PUSH
87700: EMPTY
87701: LIST
87702: LIST
87703: ST_TO_ADDR
87704: GO 90199
87706: LD_INT 6
87708: DOUBLE
87709: EQUAL
87710: IFTRUE 87714
87712: GO 87834
87714: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
87715: LD_ADDR_VAR 0 1
87719: PUSH
87720: LD_INT 2
87722: PUSH
87723: LD_INT 4
87725: PUSH
87726: LD_INT 5
87728: PUSH
87729: LD_INT 6
87731: PUSH
87732: LD_INT 8
87734: PUSH
87735: LD_INT 11
87737: PUSH
87738: LD_INT 12
87740: PUSH
87741: LD_INT 15
87743: PUSH
87744: LD_INT 16
87746: PUSH
87747: LD_INT 20
87749: PUSH
87750: LD_INT 21
87752: PUSH
87753: LD_INT 22
87755: PUSH
87756: LD_INT 23
87758: PUSH
87759: LD_INT 25
87761: PUSH
87762: LD_INT 26
87764: PUSH
87765: LD_INT 30
87767: PUSH
87768: LD_INT 31
87770: PUSH
87771: LD_INT 32
87773: PUSH
87774: LD_INT 36
87776: PUSH
87777: EMPTY
87778: LIST
87779: LIST
87780: LIST
87781: LIST
87782: LIST
87783: LIST
87784: LIST
87785: LIST
87786: LIST
87787: LIST
87788: LIST
87789: LIST
87790: LIST
87791: LIST
87792: LIST
87793: LIST
87794: LIST
87795: LIST
87796: LIST
87797: PUSH
87798: LD_INT 101
87800: PUSH
87801: LD_INT 102
87803: PUSH
87804: LD_INT 105
87806: PUSH
87807: LD_INT 106
87809: PUSH
87810: LD_INT 108
87812: PUSH
87813: LD_INT 109
87815: PUSH
87816: LD_INT 112
87818: PUSH
87819: EMPTY
87820: LIST
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: LIST
87826: LIST
87827: PUSH
87828: EMPTY
87829: LIST
87830: LIST
87831: ST_TO_ADDR
87832: GO 90199
87834: LD_INT 7
87836: DOUBLE
87837: EQUAL
87838: IFTRUE 87842
87840: GO 87942
87842: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
87843: LD_ADDR_VAR 0 1
87847: PUSH
87848: LD_INT 2
87850: PUSH
87851: LD_INT 4
87853: PUSH
87854: LD_INT 5
87856: PUSH
87857: LD_INT 7
87859: PUSH
87860: LD_INT 11
87862: PUSH
87863: LD_INT 12
87865: PUSH
87866: LD_INT 15
87868: PUSH
87869: LD_INT 16
87871: PUSH
87872: LD_INT 20
87874: PUSH
87875: LD_INT 21
87877: PUSH
87878: LD_INT 22
87880: PUSH
87881: LD_INT 23
87883: PUSH
87884: LD_INT 25
87886: PUSH
87887: LD_INT 26
87889: PUSH
87890: EMPTY
87891: LIST
87892: LIST
87893: LIST
87894: LIST
87895: LIST
87896: LIST
87897: LIST
87898: LIST
87899: LIST
87900: LIST
87901: LIST
87902: LIST
87903: LIST
87904: LIST
87905: PUSH
87906: LD_INT 101
87908: PUSH
87909: LD_INT 102
87911: PUSH
87912: LD_INT 103
87914: PUSH
87915: LD_INT 105
87917: PUSH
87918: LD_INT 106
87920: PUSH
87921: LD_INT 108
87923: PUSH
87924: LD_INT 112
87926: PUSH
87927: EMPTY
87928: LIST
87929: LIST
87930: LIST
87931: LIST
87932: LIST
87933: LIST
87934: LIST
87935: PUSH
87936: EMPTY
87937: LIST
87938: LIST
87939: ST_TO_ADDR
87940: GO 90199
87942: LD_INT 8
87944: DOUBLE
87945: EQUAL
87946: IFTRUE 87950
87948: GO 88078
87950: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
87951: LD_ADDR_VAR 0 1
87955: PUSH
87956: LD_INT 2
87958: PUSH
87959: LD_INT 4
87961: PUSH
87962: LD_INT 5
87964: PUSH
87965: LD_INT 6
87967: PUSH
87968: LD_INT 7
87970: PUSH
87971: LD_INT 8
87973: PUSH
87974: LD_INT 11
87976: PUSH
87977: LD_INT 12
87979: PUSH
87980: LD_INT 15
87982: PUSH
87983: LD_INT 16
87985: PUSH
87986: LD_INT 20
87988: PUSH
87989: LD_INT 21
87991: PUSH
87992: LD_INT 22
87994: PUSH
87995: LD_INT 23
87997: PUSH
87998: LD_INT 25
88000: PUSH
88001: LD_INT 26
88003: PUSH
88004: LD_INT 30
88006: PUSH
88007: LD_INT 31
88009: PUSH
88010: LD_INT 32
88012: PUSH
88013: LD_INT 36
88015: PUSH
88016: EMPTY
88017: LIST
88018: LIST
88019: LIST
88020: LIST
88021: LIST
88022: LIST
88023: LIST
88024: LIST
88025: LIST
88026: LIST
88027: LIST
88028: LIST
88029: LIST
88030: LIST
88031: LIST
88032: LIST
88033: LIST
88034: LIST
88035: LIST
88036: LIST
88037: PUSH
88038: LD_INT 101
88040: PUSH
88041: LD_INT 102
88043: PUSH
88044: LD_INT 103
88046: PUSH
88047: LD_INT 105
88049: PUSH
88050: LD_INT 106
88052: PUSH
88053: LD_INT 108
88055: PUSH
88056: LD_INT 109
88058: PUSH
88059: LD_INT 112
88061: PUSH
88062: EMPTY
88063: LIST
88064: LIST
88065: LIST
88066: LIST
88067: LIST
88068: LIST
88069: LIST
88070: LIST
88071: PUSH
88072: EMPTY
88073: LIST
88074: LIST
88075: ST_TO_ADDR
88076: GO 90199
88078: LD_INT 9
88080: DOUBLE
88081: EQUAL
88082: IFTRUE 88086
88084: GO 88222
88086: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
88087: LD_ADDR_VAR 0 1
88091: PUSH
88092: LD_INT 2
88094: PUSH
88095: LD_INT 4
88097: PUSH
88098: LD_INT 5
88100: PUSH
88101: LD_INT 6
88103: PUSH
88104: LD_INT 7
88106: PUSH
88107: LD_INT 8
88109: PUSH
88110: LD_INT 11
88112: PUSH
88113: LD_INT 12
88115: PUSH
88116: LD_INT 15
88118: PUSH
88119: LD_INT 16
88121: PUSH
88122: LD_INT 20
88124: PUSH
88125: LD_INT 21
88127: PUSH
88128: LD_INT 22
88130: PUSH
88131: LD_INT 23
88133: PUSH
88134: LD_INT 25
88136: PUSH
88137: LD_INT 26
88139: PUSH
88140: LD_INT 28
88142: PUSH
88143: LD_INT 30
88145: PUSH
88146: LD_INT 31
88148: PUSH
88149: LD_INT 32
88151: PUSH
88152: LD_INT 36
88154: PUSH
88155: EMPTY
88156: LIST
88157: LIST
88158: LIST
88159: LIST
88160: LIST
88161: LIST
88162: LIST
88163: LIST
88164: LIST
88165: LIST
88166: LIST
88167: LIST
88168: LIST
88169: LIST
88170: LIST
88171: LIST
88172: LIST
88173: LIST
88174: LIST
88175: LIST
88176: LIST
88177: PUSH
88178: LD_INT 101
88180: PUSH
88181: LD_INT 102
88183: PUSH
88184: LD_INT 103
88186: PUSH
88187: LD_INT 105
88189: PUSH
88190: LD_INT 106
88192: PUSH
88193: LD_INT 108
88195: PUSH
88196: LD_INT 109
88198: PUSH
88199: LD_INT 112
88201: PUSH
88202: LD_INT 114
88204: PUSH
88205: EMPTY
88206: LIST
88207: LIST
88208: LIST
88209: LIST
88210: LIST
88211: LIST
88212: LIST
88213: LIST
88214: LIST
88215: PUSH
88216: EMPTY
88217: LIST
88218: LIST
88219: ST_TO_ADDR
88220: GO 90199
88222: LD_INT 10
88224: DOUBLE
88225: EQUAL
88226: IFTRUE 88230
88228: GO 88414
88230: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
88231: LD_ADDR_VAR 0 1
88235: PUSH
88236: LD_INT 2
88238: PUSH
88239: LD_INT 4
88241: PUSH
88242: LD_INT 5
88244: PUSH
88245: LD_INT 6
88247: PUSH
88248: LD_INT 7
88250: PUSH
88251: LD_INT 8
88253: PUSH
88254: LD_INT 9
88256: PUSH
88257: LD_INT 10
88259: PUSH
88260: LD_INT 11
88262: PUSH
88263: LD_INT 12
88265: PUSH
88266: LD_INT 13
88268: PUSH
88269: LD_INT 14
88271: PUSH
88272: LD_INT 15
88274: PUSH
88275: LD_INT 16
88277: PUSH
88278: LD_INT 17
88280: PUSH
88281: LD_INT 18
88283: PUSH
88284: LD_INT 19
88286: PUSH
88287: LD_INT 20
88289: PUSH
88290: LD_INT 21
88292: PUSH
88293: LD_INT 22
88295: PUSH
88296: LD_INT 23
88298: PUSH
88299: LD_INT 24
88301: PUSH
88302: LD_INT 25
88304: PUSH
88305: LD_INT 26
88307: PUSH
88308: LD_INT 28
88310: PUSH
88311: LD_INT 30
88313: PUSH
88314: LD_INT 31
88316: PUSH
88317: LD_INT 32
88319: PUSH
88320: LD_INT 36
88322: PUSH
88323: EMPTY
88324: LIST
88325: LIST
88326: LIST
88327: LIST
88328: LIST
88329: LIST
88330: LIST
88331: LIST
88332: LIST
88333: LIST
88334: LIST
88335: LIST
88336: LIST
88337: LIST
88338: LIST
88339: LIST
88340: LIST
88341: LIST
88342: LIST
88343: LIST
88344: LIST
88345: LIST
88346: LIST
88347: LIST
88348: LIST
88349: LIST
88350: LIST
88351: LIST
88352: LIST
88353: PUSH
88354: LD_INT 101
88356: PUSH
88357: LD_INT 102
88359: PUSH
88360: LD_INT 103
88362: PUSH
88363: LD_INT 104
88365: PUSH
88366: LD_INT 105
88368: PUSH
88369: LD_INT 106
88371: PUSH
88372: LD_INT 107
88374: PUSH
88375: LD_INT 108
88377: PUSH
88378: LD_INT 109
88380: PUSH
88381: LD_INT 110
88383: PUSH
88384: LD_INT 111
88386: PUSH
88387: LD_INT 112
88389: PUSH
88390: LD_INT 114
88392: PUSH
88393: EMPTY
88394: LIST
88395: LIST
88396: LIST
88397: LIST
88398: LIST
88399: LIST
88400: LIST
88401: LIST
88402: LIST
88403: LIST
88404: LIST
88405: LIST
88406: LIST
88407: PUSH
88408: EMPTY
88409: LIST
88410: LIST
88411: ST_TO_ADDR
88412: GO 90199
88414: LD_INT 11
88416: DOUBLE
88417: EQUAL
88418: IFTRUE 88422
88420: GO 88614
88422: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
88423: LD_ADDR_VAR 0 1
88427: PUSH
88428: LD_INT 2
88430: PUSH
88431: LD_INT 3
88433: PUSH
88434: LD_INT 4
88436: PUSH
88437: LD_INT 5
88439: PUSH
88440: LD_INT 6
88442: PUSH
88443: LD_INT 7
88445: PUSH
88446: LD_INT 8
88448: PUSH
88449: LD_INT 9
88451: PUSH
88452: LD_INT 10
88454: PUSH
88455: LD_INT 11
88457: PUSH
88458: LD_INT 12
88460: PUSH
88461: LD_INT 13
88463: PUSH
88464: LD_INT 14
88466: PUSH
88467: LD_INT 15
88469: PUSH
88470: LD_INT 16
88472: PUSH
88473: LD_INT 17
88475: PUSH
88476: LD_INT 18
88478: PUSH
88479: LD_INT 19
88481: PUSH
88482: LD_INT 20
88484: PUSH
88485: LD_INT 21
88487: PUSH
88488: LD_INT 22
88490: PUSH
88491: LD_INT 23
88493: PUSH
88494: LD_INT 24
88496: PUSH
88497: LD_INT 25
88499: PUSH
88500: LD_INT 26
88502: PUSH
88503: LD_INT 28
88505: PUSH
88506: LD_INT 30
88508: PUSH
88509: LD_INT 31
88511: PUSH
88512: LD_INT 32
88514: PUSH
88515: LD_INT 34
88517: PUSH
88518: LD_INT 36
88520: PUSH
88521: EMPTY
88522: LIST
88523: LIST
88524: LIST
88525: LIST
88526: LIST
88527: LIST
88528: LIST
88529: LIST
88530: LIST
88531: LIST
88532: LIST
88533: LIST
88534: LIST
88535: LIST
88536: LIST
88537: LIST
88538: LIST
88539: LIST
88540: LIST
88541: LIST
88542: LIST
88543: LIST
88544: LIST
88545: LIST
88546: LIST
88547: LIST
88548: LIST
88549: LIST
88550: LIST
88551: LIST
88552: LIST
88553: PUSH
88554: LD_INT 101
88556: PUSH
88557: LD_INT 102
88559: PUSH
88560: LD_INT 103
88562: PUSH
88563: LD_INT 104
88565: PUSH
88566: LD_INT 105
88568: PUSH
88569: LD_INT 106
88571: PUSH
88572: LD_INT 107
88574: PUSH
88575: LD_INT 108
88577: PUSH
88578: LD_INT 109
88580: PUSH
88581: LD_INT 110
88583: PUSH
88584: LD_INT 111
88586: PUSH
88587: LD_INT 112
88589: PUSH
88590: LD_INT 114
88592: PUSH
88593: EMPTY
88594: LIST
88595: LIST
88596: LIST
88597: LIST
88598: LIST
88599: LIST
88600: LIST
88601: LIST
88602: LIST
88603: LIST
88604: LIST
88605: LIST
88606: LIST
88607: PUSH
88608: EMPTY
88609: LIST
88610: LIST
88611: ST_TO_ADDR
88612: GO 90199
88614: LD_INT 12
88616: DOUBLE
88617: EQUAL
88618: IFTRUE 88622
88620: GO 88830
88622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
88623: LD_ADDR_VAR 0 1
88627: PUSH
88628: LD_INT 1
88630: PUSH
88631: LD_INT 2
88633: PUSH
88634: LD_INT 3
88636: PUSH
88637: LD_INT 4
88639: PUSH
88640: LD_INT 5
88642: PUSH
88643: LD_INT 6
88645: PUSH
88646: LD_INT 7
88648: PUSH
88649: LD_INT 8
88651: PUSH
88652: LD_INT 9
88654: PUSH
88655: LD_INT 10
88657: PUSH
88658: LD_INT 11
88660: PUSH
88661: LD_INT 12
88663: PUSH
88664: LD_INT 13
88666: PUSH
88667: LD_INT 14
88669: PUSH
88670: LD_INT 15
88672: PUSH
88673: LD_INT 16
88675: PUSH
88676: LD_INT 17
88678: PUSH
88679: LD_INT 18
88681: PUSH
88682: LD_INT 19
88684: PUSH
88685: LD_INT 20
88687: PUSH
88688: LD_INT 21
88690: PUSH
88691: LD_INT 22
88693: PUSH
88694: LD_INT 23
88696: PUSH
88697: LD_INT 24
88699: PUSH
88700: LD_INT 25
88702: PUSH
88703: LD_INT 26
88705: PUSH
88706: LD_INT 27
88708: PUSH
88709: LD_INT 28
88711: PUSH
88712: LD_INT 30
88714: PUSH
88715: LD_INT 31
88717: PUSH
88718: LD_INT 32
88720: PUSH
88721: LD_INT 33
88723: PUSH
88724: LD_INT 34
88726: PUSH
88727: LD_INT 36
88729: PUSH
88730: EMPTY
88731: LIST
88732: LIST
88733: LIST
88734: LIST
88735: LIST
88736: LIST
88737: LIST
88738: LIST
88739: LIST
88740: LIST
88741: LIST
88742: LIST
88743: LIST
88744: LIST
88745: LIST
88746: LIST
88747: LIST
88748: LIST
88749: LIST
88750: LIST
88751: LIST
88752: LIST
88753: LIST
88754: LIST
88755: LIST
88756: LIST
88757: LIST
88758: LIST
88759: LIST
88760: LIST
88761: LIST
88762: LIST
88763: LIST
88764: LIST
88765: PUSH
88766: LD_INT 101
88768: PUSH
88769: LD_INT 102
88771: PUSH
88772: LD_INT 103
88774: PUSH
88775: LD_INT 104
88777: PUSH
88778: LD_INT 105
88780: PUSH
88781: LD_INT 106
88783: PUSH
88784: LD_INT 107
88786: PUSH
88787: LD_INT 108
88789: PUSH
88790: LD_INT 109
88792: PUSH
88793: LD_INT 110
88795: PUSH
88796: LD_INT 111
88798: PUSH
88799: LD_INT 112
88801: PUSH
88802: LD_INT 113
88804: PUSH
88805: LD_INT 114
88807: PUSH
88808: EMPTY
88809: LIST
88810: LIST
88811: LIST
88812: LIST
88813: LIST
88814: LIST
88815: LIST
88816: LIST
88817: LIST
88818: LIST
88819: LIST
88820: LIST
88821: LIST
88822: LIST
88823: PUSH
88824: EMPTY
88825: LIST
88826: LIST
88827: ST_TO_ADDR
88828: GO 90199
88830: LD_INT 13
88832: DOUBLE
88833: EQUAL
88834: IFTRUE 88838
88836: GO 89034
88838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
88839: LD_ADDR_VAR 0 1
88843: PUSH
88844: LD_INT 1
88846: PUSH
88847: LD_INT 2
88849: PUSH
88850: LD_INT 3
88852: PUSH
88853: LD_INT 4
88855: PUSH
88856: LD_INT 5
88858: PUSH
88859: LD_INT 8
88861: PUSH
88862: LD_INT 9
88864: PUSH
88865: LD_INT 10
88867: PUSH
88868: LD_INT 11
88870: PUSH
88871: LD_INT 12
88873: PUSH
88874: LD_INT 14
88876: PUSH
88877: LD_INT 15
88879: PUSH
88880: LD_INT 16
88882: PUSH
88883: LD_INT 17
88885: PUSH
88886: LD_INT 18
88888: PUSH
88889: LD_INT 19
88891: PUSH
88892: LD_INT 20
88894: PUSH
88895: LD_INT 21
88897: PUSH
88898: LD_INT 22
88900: PUSH
88901: LD_INT 23
88903: PUSH
88904: LD_INT 24
88906: PUSH
88907: LD_INT 25
88909: PUSH
88910: LD_INT 26
88912: PUSH
88913: LD_INT 27
88915: PUSH
88916: LD_INT 28
88918: PUSH
88919: LD_INT 30
88921: PUSH
88922: LD_INT 31
88924: PUSH
88925: LD_INT 32
88927: PUSH
88928: LD_INT 33
88930: PUSH
88931: LD_INT 34
88933: PUSH
88934: LD_INT 36
88936: PUSH
88937: EMPTY
88938: LIST
88939: LIST
88940: LIST
88941: LIST
88942: LIST
88943: LIST
88944: LIST
88945: LIST
88946: LIST
88947: LIST
88948: LIST
88949: LIST
88950: LIST
88951: LIST
88952: LIST
88953: LIST
88954: LIST
88955: LIST
88956: LIST
88957: LIST
88958: LIST
88959: LIST
88960: LIST
88961: LIST
88962: LIST
88963: LIST
88964: LIST
88965: LIST
88966: LIST
88967: LIST
88968: LIST
88969: PUSH
88970: LD_INT 101
88972: PUSH
88973: LD_INT 102
88975: PUSH
88976: LD_INT 103
88978: PUSH
88979: LD_INT 104
88981: PUSH
88982: LD_INT 105
88984: PUSH
88985: LD_INT 106
88987: PUSH
88988: LD_INT 107
88990: PUSH
88991: LD_INT 108
88993: PUSH
88994: LD_INT 109
88996: PUSH
88997: LD_INT 110
88999: PUSH
89000: LD_INT 111
89002: PUSH
89003: LD_INT 112
89005: PUSH
89006: LD_INT 113
89008: PUSH
89009: LD_INT 114
89011: PUSH
89012: EMPTY
89013: LIST
89014: LIST
89015: LIST
89016: LIST
89017: LIST
89018: LIST
89019: LIST
89020: LIST
89021: LIST
89022: LIST
89023: LIST
89024: LIST
89025: LIST
89026: LIST
89027: PUSH
89028: EMPTY
89029: LIST
89030: LIST
89031: ST_TO_ADDR
89032: GO 90199
89034: LD_INT 14
89036: DOUBLE
89037: EQUAL
89038: IFTRUE 89042
89040: GO 89254
89042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
89043: LD_ADDR_VAR 0 1
89047: PUSH
89048: LD_INT 1
89050: PUSH
89051: LD_INT 2
89053: PUSH
89054: LD_INT 3
89056: PUSH
89057: LD_INT 4
89059: PUSH
89060: LD_INT 5
89062: PUSH
89063: LD_INT 6
89065: PUSH
89066: LD_INT 7
89068: PUSH
89069: LD_INT 8
89071: PUSH
89072: LD_INT 9
89074: PUSH
89075: LD_INT 10
89077: PUSH
89078: LD_INT 11
89080: PUSH
89081: LD_INT 12
89083: PUSH
89084: LD_INT 13
89086: PUSH
89087: LD_INT 14
89089: PUSH
89090: LD_INT 15
89092: PUSH
89093: LD_INT 16
89095: PUSH
89096: LD_INT 17
89098: PUSH
89099: LD_INT 18
89101: PUSH
89102: LD_INT 19
89104: PUSH
89105: LD_INT 20
89107: PUSH
89108: LD_INT 21
89110: PUSH
89111: LD_INT 22
89113: PUSH
89114: LD_INT 23
89116: PUSH
89117: LD_INT 24
89119: PUSH
89120: LD_INT 25
89122: PUSH
89123: LD_INT 26
89125: PUSH
89126: LD_INT 27
89128: PUSH
89129: LD_INT 28
89131: PUSH
89132: LD_INT 29
89134: PUSH
89135: LD_INT 30
89137: PUSH
89138: LD_INT 31
89140: PUSH
89141: LD_INT 32
89143: PUSH
89144: LD_INT 33
89146: PUSH
89147: LD_INT 34
89149: PUSH
89150: LD_INT 36
89152: PUSH
89153: EMPTY
89154: LIST
89155: LIST
89156: LIST
89157: LIST
89158: LIST
89159: LIST
89160: LIST
89161: LIST
89162: LIST
89163: LIST
89164: LIST
89165: LIST
89166: LIST
89167: LIST
89168: LIST
89169: LIST
89170: LIST
89171: LIST
89172: LIST
89173: LIST
89174: LIST
89175: LIST
89176: LIST
89177: LIST
89178: LIST
89179: LIST
89180: LIST
89181: LIST
89182: LIST
89183: LIST
89184: LIST
89185: LIST
89186: LIST
89187: LIST
89188: LIST
89189: PUSH
89190: LD_INT 101
89192: PUSH
89193: LD_INT 102
89195: PUSH
89196: LD_INT 103
89198: PUSH
89199: LD_INT 104
89201: PUSH
89202: LD_INT 105
89204: PUSH
89205: LD_INT 106
89207: PUSH
89208: LD_INT 107
89210: PUSH
89211: LD_INT 108
89213: PUSH
89214: LD_INT 109
89216: PUSH
89217: LD_INT 110
89219: PUSH
89220: LD_INT 111
89222: PUSH
89223: LD_INT 112
89225: PUSH
89226: LD_INT 113
89228: PUSH
89229: LD_INT 114
89231: PUSH
89232: EMPTY
89233: LIST
89234: LIST
89235: LIST
89236: LIST
89237: LIST
89238: LIST
89239: LIST
89240: LIST
89241: LIST
89242: LIST
89243: LIST
89244: LIST
89245: LIST
89246: LIST
89247: PUSH
89248: EMPTY
89249: LIST
89250: LIST
89251: ST_TO_ADDR
89252: GO 90199
89254: LD_INT 15
89256: DOUBLE
89257: EQUAL
89258: IFTRUE 89262
89260: GO 89474
89262: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
89263: LD_ADDR_VAR 0 1
89267: PUSH
89268: LD_INT 1
89270: PUSH
89271: LD_INT 2
89273: PUSH
89274: LD_INT 3
89276: PUSH
89277: LD_INT 4
89279: PUSH
89280: LD_INT 5
89282: PUSH
89283: LD_INT 6
89285: PUSH
89286: LD_INT 7
89288: PUSH
89289: LD_INT 8
89291: PUSH
89292: LD_INT 9
89294: PUSH
89295: LD_INT 10
89297: PUSH
89298: LD_INT 11
89300: PUSH
89301: LD_INT 12
89303: PUSH
89304: LD_INT 13
89306: PUSH
89307: LD_INT 14
89309: PUSH
89310: LD_INT 15
89312: PUSH
89313: LD_INT 16
89315: PUSH
89316: LD_INT 17
89318: PUSH
89319: LD_INT 18
89321: PUSH
89322: LD_INT 19
89324: PUSH
89325: LD_INT 20
89327: PUSH
89328: LD_INT 21
89330: PUSH
89331: LD_INT 22
89333: PUSH
89334: LD_INT 23
89336: PUSH
89337: LD_INT 24
89339: PUSH
89340: LD_INT 25
89342: PUSH
89343: LD_INT 26
89345: PUSH
89346: LD_INT 27
89348: PUSH
89349: LD_INT 28
89351: PUSH
89352: LD_INT 29
89354: PUSH
89355: LD_INT 30
89357: PUSH
89358: LD_INT 31
89360: PUSH
89361: LD_INT 32
89363: PUSH
89364: LD_INT 33
89366: PUSH
89367: LD_INT 34
89369: PUSH
89370: LD_INT 36
89372: PUSH
89373: EMPTY
89374: LIST
89375: LIST
89376: LIST
89377: LIST
89378: LIST
89379: LIST
89380: LIST
89381: LIST
89382: LIST
89383: LIST
89384: LIST
89385: LIST
89386: LIST
89387: LIST
89388: LIST
89389: LIST
89390: LIST
89391: LIST
89392: LIST
89393: LIST
89394: LIST
89395: LIST
89396: LIST
89397: LIST
89398: LIST
89399: LIST
89400: LIST
89401: LIST
89402: LIST
89403: LIST
89404: LIST
89405: LIST
89406: LIST
89407: LIST
89408: LIST
89409: PUSH
89410: LD_INT 101
89412: PUSH
89413: LD_INT 102
89415: PUSH
89416: LD_INT 103
89418: PUSH
89419: LD_INT 104
89421: PUSH
89422: LD_INT 105
89424: PUSH
89425: LD_INT 106
89427: PUSH
89428: LD_INT 107
89430: PUSH
89431: LD_INT 108
89433: PUSH
89434: LD_INT 109
89436: PUSH
89437: LD_INT 110
89439: PUSH
89440: LD_INT 111
89442: PUSH
89443: LD_INT 112
89445: PUSH
89446: LD_INT 113
89448: PUSH
89449: LD_INT 114
89451: PUSH
89452: EMPTY
89453: LIST
89454: LIST
89455: LIST
89456: LIST
89457: LIST
89458: LIST
89459: LIST
89460: LIST
89461: LIST
89462: LIST
89463: LIST
89464: LIST
89465: LIST
89466: LIST
89467: PUSH
89468: EMPTY
89469: LIST
89470: LIST
89471: ST_TO_ADDR
89472: GO 90199
89474: LD_INT 16
89476: DOUBLE
89477: EQUAL
89478: IFTRUE 89482
89480: GO 89606
89482: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
89483: LD_ADDR_VAR 0 1
89487: PUSH
89488: LD_INT 2
89490: PUSH
89491: LD_INT 4
89493: PUSH
89494: LD_INT 5
89496: PUSH
89497: LD_INT 7
89499: PUSH
89500: LD_INT 11
89502: PUSH
89503: LD_INT 12
89505: PUSH
89506: LD_INT 15
89508: PUSH
89509: LD_INT 16
89511: PUSH
89512: LD_INT 20
89514: PUSH
89515: LD_INT 21
89517: PUSH
89518: LD_INT 22
89520: PUSH
89521: LD_INT 23
89523: PUSH
89524: LD_INT 25
89526: PUSH
89527: LD_INT 26
89529: PUSH
89530: LD_INT 30
89532: PUSH
89533: LD_INT 31
89535: PUSH
89536: LD_INT 32
89538: PUSH
89539: LD_INT 33
89541: PUSH
89542: LD_INT 34
89544: PUSH
89545: EMPTY
89546: LIST
89547: LIST
89548: LIST
89549: LIST
89550: LIST
89551: LIST
89552: LIST
89553: LIST
89554: LIST
89555: LIST
89556: LIST
89557: LIST
89558: LIST
89559: LIST
89560: LIST
89561: LIST
89562: LIST
89563: LIST
89564: LIST
89565: PUSH
89566: LD_INT 101
89568: PUSH
89569: LD_INT 102
89571: PUSH
89572: LD_INT 103
89574: PUSH
89575: LD_INT 106
89577: PUSH
89578: LD_INT 108
89580: PUSH
89581: LD_INT 112
89583: PUSH
89584: LD_INT 113
89586: PUSH
89587: LD_INT 114
89589: PUSH
89590: EMPTY
89591: LIST
89592: LIST
89593: LIST
89594: LIST
89595: LIST
89596: LIST
89597: LIST
89598: LIST
89599: PUSH
89600: EMPTY
89601: LIST
89602: LIST
89603: ST_TO_ADDR
89604: GO 90199
89606: LD_INT 17
89608: DOUBLE
89609: EQUAL
89610: IFTRUE 89614
89612: GO 89826
89614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
89615: LD_ADDR_VAR 0 1
89619: PUSH
89620: LD_INT 1
89622: PUSH
89623: LD_INT 2
89625: PUSH
89626: LD_INT 3
89628: PUSH
89629: LD_INT 4
89631: PUSH
89632: LD_INT 5
89634: PUSH
89635: LD_INT 6
89637: PUSH
89638: LD_INT 7
89640: PUSH
89641: LD_INT 8
89643: PUSH
89644: LD_INT 9
89646: PUSH
89647: LD_INT 10
89649: PUSH
89650: LD_INT 11
89652: PUSH
89653: LD_INT 12
89655: PUSH
89656: LD_INT 13
89658: PUSH
89659: LD_INT 14
89661: PUSH
89662: LD_INT 15
89664: PUSH
89665: LD_INT 16
89667: PUSH
89668: LD_INT 17
89670: PUSH
89671: LD_INT 18
89673: PUSH
89674: LD_INT 19
89676: PUSH
89677: LD_INT 20
89679: PUSH
89680: LD_INT 21
89682: PUSH
89683: LD_INT 22
89685: PUSH
89686: LD_INT 23
89688: PUSH
89689: LD_INT 24
89691: PUSH
89692: LD_INT 25
89694: PUSH
89695: LD_INT 26
89697: PUSH
89698: LD_INT 27
89700: PUSH
89701: LD_INT 28
89703: PUSH
89704: LD_INT 29
89706: PUSH
89707: LD_INT 30
89709: PUSH
89710: LD_INT 31
89712: PUSH
89713: LD_INT 32
89715: PUSH
89716: LD_INT 33
89718: PUSH
89719: LD_INT 34
89721: PUSH
89722: LD_INT 36
89724: PUSH
89725: EMPTY
89726: LIST
89727: LIST
89728: LIST
89729: LIST
89730: LIST
89731: LIST
89732: LIST
89733: LIST
89734: LIST
89735: LIST
89736: LIST
89737: LIST
89738: LIST
89739: LIST
89740: LIST
89741: LIST
89742: LIST
89743: LIST
89744: LIST
89745: LIST
89746: LIST
89747: LIST
89748: LIST
89749: LIST
89750: LIST
89751: LIST
89752: LIST
89753: LIST
89754: LIST
89755: LIST
89756: LIST
89757: LIST
89758: LIST
89759: LIST
89760: LIST
89761: PUSH
89762: LD_INT 101
89764: PUSH
89765: LD_INT 102
89767: PUSH
89768: LD_INT 103
89770: PUSH
89771: LD_INT 104
89773: PUSH
89774: LD_INT 105
89776: PUSH
89777: LD_INT 106
89779: PUSH
89780: LD_INT 107
89782: PUSH
89783: LD_INT 108
89785: PUSH
89786: LD_INT 109
89788: PUSH
89789: LD_INT 110
89791: PUSH
89792: LD_INT 111
89794: PUSH
89795: LD_INT 112
89797: PUSH
89798: LD_INT 113
89800: PUSH
89801: LD_INT 114
89803: PUSH
89804: EMPTY
89805: LIST
89806: LIST
89807: LIST
89808: LIST
89809: LIST
89810: LIST
89811: LIST
89812: LIST
89813: LIST
89814: LIST
89815: LIST
89816: LIST
89817: LIST
89818: LIST
89819: PUSH
89820: EMPTY
89821: LIST
89822: LIST
89823: ST_TO_ADDR
89824: GO 90199
89826: LD_INT 18
89828: DOUBLE
89829: EQUAL
89830: IFTRUE 89834
89832: GO 89970
89834: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
89835: LD_ADDR_VAR 0 1
89839: PUSH
89840: LD_INT 2
89842: PUSH
89843: LD_INT 4
89845: PUSH
89846: LD_INT 5
89848: PUSH
89849: LD_INT 7
89851: PUSH
89852: LD_INT 11
89854: PUSH
89855: LD_INT 12
89857: PUSH
89858: LD_INT 15
89860: PUSH
89861: LD_INT 16
89863: PUSH
89864: LD_INT 20
89866: PUSH
89867: LD_INT 21
89869: PUSH
89870: LD_INT 22
89872: PUSH
89873: LD_INT 23
89875: PUSH
89876: LD_INT 25
89878: PUSH
89879: LD_INT 26
89881: PUSH
89882: LD_INT 30
89884: PUSH
89885: LD_INT 31
89887: PUSH
89888: LD_INT 32
89890: PUSH
89891: LD_INT 33
89893: PUSH
89894: LD_INT 34
89896: PUSH
89897: LD_INT 35
89899: PUSH
89900: LD_INT 36
89902: PUSH
89903: EMPTY
89904: LIST
89905: LIST
89906: LIST
89907: LIST
89908: LIST
89909: LIST
89910: LIST
89911: LIST
89912: LIST
89913: LIST
89914: LIST
89915: LIST
89916: LIST
89917: LIST
89918: LIST
89919: LIST
89920: LIST
89921: LIST
89922: LIST
89923: LIST
89924: LIST
89925: PUSH
89926: LD_INT 101
89928: PUSH
89929: LD_INT 102
89931: PUSH
89932: LD_INT 103
89934: PUSH
89935: LD_INT 106
89937: PUSH
89938: LD_INT 108
89940: PUSH
89941: LD_INT 112
89943: PUSH
89944: LD_INT 113
89946: PUSH
89947: LD_INT 114
89949: PUSH
89950: LD_INT 115
89952: PUSH
89953: EMPTY
89954: LIST
89955: LIST
89956: LIST
89957: LIST
89958: LIST
89959: LIST
89960: LIST
89961: LIST
89962: LIST
89963: PUSH
89964: EMPTY
89965: LIST
89966: LIST
89967: ST_TO_ADDR
89968: GO 90199
89970: LD_INT 19
89972: DOUBLE
89973: EQUAL
89974: IFTRUE 89978
89976: GO 90198
89978: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
89979: LD_ADDR_VAR 0 1
89983: PUSH
89984: LD_INT 1
89986: PUSH
89987: LD_INT 2
89989: PUSH
89990: LD_INT 3
89992: PUSH
89993: LD_INT 4
89995: PUSH
89996: LD_INT 5
89998: PUSH
89999: LD_INT 6
90001: PUSH
90002: LD_INT 7
90004: PUSH
90005: LD_INT 8
90007: PUSH
90008: LD_INT 9
90010: PUSH
90011: LD_INT 10
90013: PUSH
90014: LD_INT 11
90016: PUSH
90017: LD_INT 12
90019: PUSH
90020: LD_INT 13
90022: PUSH
90023: LD_INT 14
90025: PUSH
90026: LD_INT 15
90028: PUSH
90029: LD_INT 16
90031: PUSH
90032: LD_INT 17
90034: PUSH
90035: LD_INT 18
90037: PUSH
90038: LD_INT 19
90040: PUSH
90041: LD_INT 20
90043: PUSH
90044: LD_INT 21
90046: PUSH
90047: LD_INT 22
90049: PUSH
90050: LD_INT 23
90052: PUSH
90053: LD_INT 24
90055: PUSH
90056: LD_INT 25
90058: PUSH
90059: LD_INT 26
90061: PUSH
90062: LD_INT 27
90064: PUSH
90065: LD_INT 28
90067: PUSH
90068: LD_INT 29
90070: PUSH
90071: LD_INT 30
90073: PUSH
90074: LD_INT 31
90076: PUSH
90077: LD_INT 32
90079: PUSH
90080: LD_INT 33
90082: PUSH
90083: LD_INT 34
90085: PUSH
90086: LD_INT 35
90088: PUSH
90089: LD_INT 36
90091: PUSH
90092: EMPTY
90093: LIST
90094: LIST
90095: LIST
90096: LIST
90097: LIST
90098: LIST
90099: LIST
90100: LIST
90101: LIST
90102: LIST
90103: LIST
90104: LIST
90105: LIST
90106: LIST
90107: LIST
90108: LIST
90109: LIST
90110: LIST
90111: LIST
90112: LIST
90113: LIST
90114: LIST
90115: LIST
90116: LIST
90117: LIST
90118: LIST
90119: LIST
90120: LIST
90121: LIST
90122: LIST
90123: LIST
90124: LIST
90125: LIST
90126: LIST
90127: LIST
90128: LIST
90129: PUSH
90130: LD_INT 101
90132: PUSH
90133: LD_INT 102
90135: PUSH
90136: LD_INT 103
90138: PUSH
90139: LD_INT 104
90141: PUSH
90142: LD_INT 105
90144: PUSH
90145: LD_INT 106
90147: PUSH
90148: LD_INT 107
90150: PUSH
90151: LD_INT 108
90153: PUSH
90154: LD_INT 109
90156: PUSH
90157: LD_INT 110
90159: PUSH
90160: LD_INT 111
90162: PUSH
90163: LD_INT 112
90165: PUSH
90166: LD_INT 113
90168: PUSH
90169: LD_INT 114
90171: PUSH
90172: LD_INT 115
90174: PUSH
90175: EMPTY
90176: LIST
90177: LIST
90178: LIST
90179: LIST
90180: LIST
90181: LIST
90182: LIST
90183: LIST
90184: LIST
90185: LIST
90186: LIST
90187: LIST
90188: LIST
90189: LIST
90190: LIST
90191: PUSH
90192: EMPTY
90193: LIST
90194: LIST
90195: ST_TO_ADDR
90196: GO 90199
90198: POP
// end else
90199: GO 90418
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
90201: LD_ADDR_VAR 0 1
90205: PUSH
90206: LD_INT 1
90208: PUSH
90209: LD_INT 2
90211: PUSH
90212: LD_INT 3
90214: PUSH
90215: LD_INT 4
90217: PUSH
90218: LD_INT 5
90220: PUSH
90221: LD_INT 6
90223: PUSH
90224: LD_INT 7
90226: PUSH
90227: LD_INT 8
90229: PUSH
90230: LD_INT 9
90232: PUSH
90233: LD_INT 10
90235: PUSH
90236: LD_INT 11
90238: PUSH
90239: LD_INT 12
90241: PUSH
90242: LD_INT 13
90244: PUSH
90245: LD_INT 14
90247: PUSH
90248: LD_INT 15
90250: PUSH
90251: LD_INT 16
90253: PUSH
90254: LD_INT 17
90256: PUSH
90257: LD_INT 18
90259: PUSH
90260: LD_INT 19
90262: PUSH
90263: LD_INT 20
90265: PUSH
90266: LD_INT 21
90268: PUSH
90269: LD_INT 22
90271: PUSH
90272: LD_INT 23
90274: PUSH
90275: LD_INT 24
90277: PUSH
90278: LD_INT 25
90280: PUSH
90281: LD_INT 26
90283: PUSH
90284: LD_INT 27
90286: PUSH
90287: LD_INT 28
90289: PUSH
90290: LD_INT 29
90292: PUSH
90293: LD_INT 30
90295: PUSH
90296: LD_INT 31
90298: PUSH
90299: LD_INT 32
90301: PUSH
90302: LD_INT 33
90304: PUSH
90305: LD_INT 34
90307: PUSH
90308: LD_INT 35
90310: PUSH
90311: LD_INT 36
90313: PUSH
90314: EMPTY
90315: LIST
90316: LIST
90317: LIST
90318: LIST
90319: LIST
90320: LIST
90321: LIST
90322: LIST
90323: LIST
90324: LIST
90325: LIST
90326: LIST
90327: LIST
90328: LIST
90329: LIST
90330: LIST
90331: LIST
90332: LIST
90333: LIST
90334: LIST
90335: LIST
90336: LIST
90337: LIST
90338: LIST
90339: LIST
90340: LIST
90341: LIST
90342: LIST
90343: LIST
90344: LIST
90345: LIST
90346: LIST
90347: LIST
90348: LIST
90349: LIST
90350: LIST
90351: PUSH
90352: LD_INT 101
90354: PUSH
90355: LD_INT 102
90357: PUSH
90358: LD_INT 103
90360: PUSH
90361: LD_INT 104
90363: PUSH
90364: LD_INT 105
90366: PUSH
90367: LD_INT 106
90369: PUSH
90370: LD_INT 107
90372: PUSH
90373: LD_INT 108
90375: PUSH
90376: LD_INT 109
90378: PUSH
90379: LD_INT 110
90381: PUSH
90382: LD_INT 111
90384: PUSH
90385: LD_INT 112
90387: PUSH
90388: LD_INT 113
90390: PUSH
90391: LD_INT 114
90393: PUSH
90394: LD_INT 115
90396: PUSH
90397: EMPTY
90398: LIST
90399: LIST
90400: LIST
90401: LIST
90402: LIST
90403: LIST
90404: LIST
90405: LIST
90406: LIST
90407: LIST
90408: LIST
90409: LIST
90410: LIST
90411: LIST
90412: LIST
90413: PUSH
90414: EMPTY
90415: LIST
90416: LIST
90417: ST_TO_ADDR
// if result then
90418: LD_VAR 0 1
90422: IFFALSE 90711
// begin normal :=  ;
90424: LD_ADDR_VAR 0 3
90428: PUSH
90429: LD_STRING 
90431: ST_TO_ADDR
// hardcore :=  ;
90432: LD_ADDR_VAR 0 4
90436: PUSH
90437: LD_STRING 
90439: ST_TO_ADDR
// for i = 1 to normalCounter do
90440: LD_ADDR_VAR 0 5
90444: PUSH
90445: DOUBLE
90446: LD_INT 1
90448: DEC
90449: ST_TO_ADDR
90450: LD_EXP 131
90454: PUSH
90455: FOR_TO
90456: IFFALSE 90557
// begin tmp := 0 ;
90458: LD_ADDR_VAR 0 2
90462: PUSH
90463: LD_STRING 0
90465: ST_TO_ADDR
// if result [ 1 ] then
90466: LD_VAR 0 1
90470: PUSH
90471: LD_INT 1
90473: ARRAY
90474: IFFALSE 90539
// if result [ 1 ] [ 1 ] = i then
90476: LD_VAR 0 1
90480: PUSH
90481: LD_INT 1
90483: ARRAY
90484: PUSH
90485: LD_INT 1
90487: ARRAY
90488: PUSH
90489: LD_VAR 0 5
90493: EQUAL
90494: IFFALSE 90539
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
90496: LD_ADDR_VAR 0 1
90500: PUSH
90501: LD_VAR 0 1
90505: PPUSH
90506: LD_INT 1
90508: PPUSH
90509: LD_VAR 0 1
90513: PUSH
90514: LD_INT 1
90516: ARRAY
90517: PPUSH
90518: LD_INT 1
90520: PPUSH
90521: CALL_OW 3
90525: PPUSH
90526: CALL_OW 1
90530: ST_TO_ADDR
// tmp := 1 ;
90531: LD_ADDR_VAR 0 2
90535: PUSH
90536: LD_STRING 1
90538: ST_TO_ADDR
// end ; normal := normal & tmp ;
90539: LD_ADDR_VAR 0 3
90543: PUSH
90544: LD_VAR 0 3
90548: PUSH
90549: LD_VAR 0 2
90553: STR
90554: ST_TO_ADDR
// end ;
90555: GO 90455
90557: POP
90558: POP
// for i = 1 to hardcoreCounter do
90559: LD_ADDR_VAR 0 5
90563: PUSH
90564: DOUBLE
90565: LD_INT 1
90567: DEC
90568: ST_TO_ADDR
90569: LD_EXP 132
90573: PUSH
90574: FOR_TO
90575: IFFALSE 90680
// begin tmp := 0 ;
90577: LD_ADDR_VAR 0 2
90581: PUSH
90582: LD_STRING 0
90584: ST_TO_ADDR
// if result [ 2 ] then
90585: LD_VAR 0 1
90589: PUSH
90590: LD_INT 2
90592: ARRAY
90593: IFFALSE 90662
// if result [ 2 ] [ 1 ] = 100 + i then
90595: LD_VAR 0 1
90599: PUSH
90600: LD_INT 2
90602: ARRAY
90603: PUSH
90604: LD_INT 1
90606: ARRAY
90607: PUSH
90608: LD_INT 100
90610: PUSH
90611: LD_VAR 0 5
90615: PLUS
90616: EQUAL
90617: IFFALSE 90662
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
90619: LD_ADDR_VAR 0 1
90623: PUSH
90624: LD_VAR 0 1
90628: PPUSH
90629: LD_INT 2
90631: PPUSH
90632: LD_VAR 0 1
90636: PUSH
90637: LD_INT 2
90639: ARRAY
90640: PPUSH
90641: LD_INT 1
90643: PPUSH
90644: CALL_OW 3
90648: PPUSH
90649: CALL_OW 1
90653: ST_TO_ADDR
// tmp := 1 ;
90654: LD_ADDR_VAR 0 2
90658: PUSH
90659: LD_STRING 1
90661: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
90662: LD_ADDR_VAR 0 4
90666: PUSH
90667: LD_VAR 0 4
90671: PUSH
90672: LD_VAR 0 2
90676: STR
90677: ST_TO_ADDR
// end ;
90678: GO 90574
90680: POP
90681: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
90682: LD_STRING getStreamItemsFromMission("
90684: PUSH
90685: LD_VAR 0 3
90689: STR
90690: PUSH
90691: LD_STRING ","
90693: STR
90694: PUSH
90695: LD_VAR 0 4
90699: STR
90700: PUSH
90701: LD_STRING ")
90703: STR
90704: PPUSH
90705: CALL_OW 559
// end else
90709: GO 90718
// ToLua ( getStreamItemsFromMission("","") ) ;
90711: LD_STRING getStreamItemsFromMission("","")
90713: PPUSH
90714: CALL_OW 559
// end ;
90718: LD_VAR 0 1
90722: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
90723: LD_VAR 0 2
90727: PUSH
90728: LD_INT 100
90730: EQUAL
90731: IFFALSE 91680
// begin if not StreamModeActive then
90733: LD_EXP 130
90737: NOT
90738: IFFALSE 90748
// StreamModeActive := true ;
90740: LD_ADDR_EXP 130
90744: PUSH
90745: LD_INT 1
90747: ST_TO_ADDR
// if p3 = 0 then
90748: LD_VAR 0 3
90752: PUSH
90753: LD_INT 0
90755: EQUAL
90756: IFFALSE 90762
// InitStreamMode ;
90758: CALL 86801 0 0
// if p3 = 1 then
90762: LD_VAR 0 3
90766: PUSH
90767: LD_INT 1
90769: EQUAL
90770: IFFALSE 90780
// sRocket := true ;
90772: LD_ADDR_EXP 135
90776: PUSH
90777: LD_INT 1
90779: ST_TO_ADDR
// if p3 = 2 then
90780: LD_VAR 0 3
90784: PUSH
90785: LD_INT 2
90787: EQUAL
90788: IFFALSE 90798
// sSpeed := true ;
90790: LD_ADDR_EXP 134
90794: PUSH
90795: LD_INT 1
90797: ST_TO_ADDR
// if p3 = 3 then
90798: LD_VAR 0 3
90802: PUSH
90803: LD_INT 3
90805: EQUAL
90806: IFFALSE 90816
// sEngine := true ;
90808: LD_ADDR_EXP 136
90812: PUSH
90813: LD_INT 1
90815: ST_TO_ADDR
// if p3 = 4 then
90816: LD_VAR 0 3
90820: PUSH
90821: LD_INT 4
90823: EQUAL
90824: IFFALSE 90834
// sSpec := true ;
90826: LD_ADDR_EXP 133
90830: PUSH
90831: LD_INT 1
90833: ST_TO_ADDR
// if p3 = 5 then
90834: LD_VAR 0 3
90838: PUSH
90839: LD_INT 5
90841: EQUAL
90842: IFFALSE 90852
// sLevel := true ;
90844: LD_ADDR_EXP 137
90848: PUSH
90849: LD_INT 1
90851: ST_TO_ADDR
// if p3 = 6 then
90852: LD_VAR 0 3
90856: PUSH
90857: LD_INT 6
90859: EQUAL
90860: IFFALSE 90870
// sArmoury := true ;
90862: LD_ADDR_EXP 138
90866: PUSH
90867: LD_INT 1
90869: ST_TO_ADDR
// if p3 = 7 then
90870: LD_VAR 0 3
90874: PUSH
90875: LD_INT 7
90877: EQUAL
90878: IFFALSE 90888
// sRadar := true ;
90880: LD_ADDR_EXP 139
90884: PUSH
90885: LD_INT 1
90887: ST_TO_ADDR
// if p3 = 8 then
90888: LD_VAR 0 3
90892: PUSH
90893: LD_INT 8
90895: EQUAL
90896: IFFALSE 90906
// sBunker := true ;
90898: LD_ADDR_EXP 140
90902: PUSH
90903: LD_INT 1
90905: ST_TO_ADDR
// if p3 = 9 then
90906: LD_VAR 0 3
90910: PUSH
90911: LD_INT 9
90913: EQUAL
90914: IFFALSE 90924
// sHack := true ;
90916: LD_ADDR_EXP 141
90920: PUSH
90921: LD_INT 1
90923: ST_TO_ADDR
// if p3 = 10 then
90924: LD_VAR 0 3
90928: PUSH
90929: LD_INT 10
90931: EQUAL
90932: IFFALSE 90942
// sFire := true ;
90934: LD_ADDR_EXP 142
90938: PUSH
90939: LD_INT 1
90941: ST_TO_ADDR
// if p3 = 11 then
90942: LD_VAR 0 3
90946: PUSH
90947: LD_INT 11
90949: EQUAL
90950: IFFALSE 90960
// sRefresh := true ;
90952: LD_ADDR_EXP 143
90956: PUSH
90957: LD_INT 1
90959: ST_TO_ADDR
// if p3 = 12 then
90960: LD_VAR 0 3
90964: PUSH
90965: LD_INT 12
90967: EQUAL
90968: IFFALSE 90978
// sExp := true ;
90970: LD_ADDR_EXP 144
90974: PUSH
90975: LD_INT 1
90977: ST_TO_ADDR
// if p3 = 13 then
90978: LD_VAR 0 3
90982: PUSH
90983: LD_INT 13
90985: EQUAL
90986: IFFALSE 90996
// sDepot := true ;
90988: LD_ADDR_EXP 145
90992: PUSH
90993: LD_INT 1
90995: ST_TO_ADDR
// if p3 = 14 then
90996: LD_VAR 0 3
91000: PUSH
91001: LD_INT 14
91003: EQUAL
91004: IFFALSE 91014
// sFlag := true ;
91006: LD_ADDR_EXP 146
91010: PUSH
91011: LD_INT 1
91013: ST_TO_ADDR
// if p3 = 15 then
91014: LD_VAR 0 3
91018: PUSH
91019: LD_INT 15
91021: EQUAL
91022: IFFALSE 91032
// sKamikadze := true ;
91024: LD_ADDR_EXP 154
91028: PUSH
91029: LD_INT 1
91031: ST_TO_ADDR
// if p3 = 16 then
91032: LD_VAR 0 3
91036: PUSH
91037: LD_INT 16
91039: EQUAL
91040: IFFALSE 91050
// sTroll := true ;
91042: LD_ADDR_EXP 155
91046: PUSH
91047: LD_INT 1
91049: ST_TO_ADDR
// if p3 = 17 then
91050: LD_VAR 0 3
91054: PUSH
91055: LD_INT 17
91057: EQUAL
91058: IFFALSE 91068
// sSlow := true ;
91060: LD_ADDR_EXP 156
91064: PUSH
91065: LD_INT 1
91067: ST_TO_ADDR
// if p3 = 18 then
91068: LD_VAR 0 3
91072: PUSH
91073: LD_INT 18
91075: EQUAL
91076: IFFALSE 91086
// sLack := true ;
91078: LD_ADDR_EXP 157
91082: PUSH
91083: LD_INT 1
91085: ST_TO_ADDR
// if p3 = 19 then
91086: LD_VAR 0 3
91090: PUSH
91091: LD_INT 19
91093: EQUAL
91094: IFFALSE 91104
// sTank := true ;
91096: LD_ADDR_EXP 159
91100: PUSH
91101: LD_INT 1
91103: ST_TO_ADDR
// if p3 = 20 then
91104: LD_VAR 0 3
91108: PUSH
91109: LD_INT 20
91111: EQUAL
91112: IFFALSE 91122
// sRemote := true ;
91114: LD_ADDR_EXP 160
91118: PUSH
91119: LD_INT 1
91121: ST_TO_ADDR
// if p3 = 21 then
91122: LD_VAR 0 3
91126: PUSH
91127: LD_INT 21
91129: EQUAL
91130: IFFALSE 91140
// sPowell := true ;
91132: LD_ADDR_EXP 161
91136: PUSH
91137: LD_INT 1
91139: ST_TO_ADDR
// if p3 = 22 then
91140: LD_VAR 0 3
91144: PUSH
91145: LD_INT 22
91147: EQUAL
91148: IFFALSE 91158
// sTeleport := true ;
91150: LD_ADDR_EXP 164
91154: PUSH
91155: LD_INT 1
91157: ST_TO_ADDR
// if p3 = 23 then
91158: LD_VAR 0 3
91162: PUSH
91163: LD_INT 23
91165: EQUAL
91166: IFFALSE 91176
// sOilTower := true ;
91168: LD_ADDR_EXP 166
91172: PUSH
91173: LD_INT 1
91175: ST_TO_ADDR
// if p3 = 24 then
91176: LD_VAR 0 3
91180: PUSH
91181: LD_INT 24
91183: EQUAL
91184: IFFALSE 91194
// sShovel := true ;
91186: LD_ADDR_EXP 167
91190: PUSH
91191: LD_INT 1
91193: ST_TO_ADDR
// if p3 = 25 then
91194: LD_VAR 0 3
91198: PUSH
91199: LD_INT 25
91201: EQUAL
91202: IFFALSE 91212
// sSheik := true ;
91204: LD_ADDR_EXP 168
91208: PUSH
91209: LD_INT 1
91211: ST_TO_ADDR
// if p3 = 26 then
91212: LD_VAR 0 3
91216: PUSH
91217: LD_INT 26
91219: EQUAL
91220: IFFALSE 91230
// sEarthquake := true ;
91222: LD_ADDR_EXP 170
91226: PUSH
91227: LD_INT 1
91229: ST_TO_ADDR
// if p3 = 27 then
91230: LD_VAR 0 3
91234: PUSH
91235: LD_INT 27
91237: EQUAL
91238: IFFALSE 91248
// sAI := true ;
91240: LD_ADDR_EXP 171
91244: PUSH
91245: LD_INT 1
91247: ST_TO_ADDR
// if p3 = 28 then
91248: LD_VAR 0 3
91252: PUSH
91253: LD_INT 28
91255: EQUAL
91256: IFFALSE 91266
// sCargo := true ;
91258: LD_ADDR_EXP 174
91262: PUSH
91263: LD_INT 1
91265: ST_TO_ADDR
// if p3 = 29 then
91266: LD_VAR 0 3
91270: PUSH
91271: LD_INT 29
91273: EQUAL
91274: IFFALSE 91284
// sDLaser := true ;
91276: LD_ADDR_EXP 175
91280: PUSH
91281: LD_INT 1
91283: ST_TO_ADDR
// if p3 = 30 then
91284: LD_VAR 0 3
91288: PUSH
91289: LD_INT 30
91291: EQUAL
91292: IFFALSE 91302
// sExchange := true ;
91294: LD_ADDR_EXP 176
91298: PUSH
91299: LD_INT 1
91301: ST_TO_ADDR
// if p3 = 31 then
91302: LD_VAR 0 3
91306: PUSH
91307: LD_INT 31
91309: EQUAL
91310: IFFALSE 91320
// sFac := true ;
91312: LD_ADDR_EXP 177
91316: PUSH
91317: LD_INT 1
91319: ST_TO_ADDR
// if p3 = 32 then
91320: LD_VAR 0 3
91324: PUSH
91325: LD_INT 32
91327: EQUAL
91328: IFFALSE 91338
// sPower := true ;
91330: LD_ADDR_EXP 178
91334: PUSH
91335: LD_INT 1
91337: ST_TO_ADDR
// if p3 = 33 then
91338: LD_VAR 0 3
91342: PUSH
91343: LD_INT 33
91345: EQUAL
91346: IFFALSE 91356
// sRandom := true ;
91348: LD_ADDR_EXP 179
91352: PUSH
91353: LD_INT 1
91355: ST_TO_ADDR
// if p3 = 34 then
91356: LD_VAR 0 3
91360: PUSH
91361: LD_INT 34
91363: EQUAL
91364: IFFALSE 91374
// sShield := true ;
91366: LD_ADDR_EXP 180
91370: PUSH
91371: LD_INT 1
91373: ST_TO_ADDR
// if p3 = 35 then
91374: LD_VAR 0 3
91378: PUSH
91379: LD_INT 35
91381: EQUAL
91382: IFFALSE 91392
// sTime := true ;
91384: LD_ADDR_EXP 181
91388: PUSH
91389: LD_INT 1
91391: ST_TO_ADDR
// if p3 = 36 then
91392: LD_VAR 0 3
91396: PUSH
91397: LD_INT 36
91399: EQUAL
91400: IFFALSE 91410
// sTools := true ;
91402: LD_ADDR_EXP 182
91406: PUSH
91407: LD_INT 1
91409: ST_TO_ADDR
// if p3 = 101 then
91410: LD_VAR 0 3
91414: PUSH
91415: LD_INT 101
91417: EQUAL
91418: IFFALSE 91428
// sSold := true ;
91420: LD_ADDR_EXP 147
91424: PUSH
91425: LD_INT 1
91427: ST_TO_ADDR
// if p3 = 102 then
91428: LD_VAR 0 3
91432: PUSH
91433: LD_INT 102
91435: EQUAL
91436: IFFALSE 91446
// sDiff := true ;
91438: LD_ADDR_EXP 148
91442: PUSH
91443: LD_INT 1
91445: ST_TO_ADDR
// if p3 = 103 then
91446: LD_VAR 0 3
91450: PUSH
91451: LD_INT 103
91453: EQUAL
91454: IFFALSE 91464
// sFog := true ;
91456: LD_ADDR_EXP 151
91460: PUSH
91461: LD_INT 1
91463: ST_TO_ADDR
// if p3 = 104 then
91464: LD_VAR 0 3
91468: PUSH
91469: LD_INT 104
91471: EQUAL
91472: IFFALSE 91482
// sReset := true ;
91474: LD_ADDR_EXP 152
91478: PUSH
91479: LD_INT 1
91481: ST_TO_ADDR
// if p3 = 105 then
91482: LD_VAR 0 3
91486: PUSH
91487: LD_INT 105
91489: EQUAL
91490: IFFALSE 91500
// sSun := true ;
91492: LD_ADDR_EXP 153
91496: PUSH
91497: LD_INT 1
91499: ST_TO_ADDR
// if p3 = 106 then
91500: LD_VAR 0 3
91504: PUSH
91505: LD_INT 106
91507: EQUAL
91508: IFFALSE 91518
// sTiger := true ;
91510: LD_ADDR_EXP 149
91514: PUSH
91515: LD_INT 1
91517: ST_TO_ADDR
// if p3 = 107 then
91518: LD_VAR 0 3
91522: PUSH
91523: LD_INT 107
91525: EQUAL
91526: IFFALSE 91536
// sBomb := true ;
91528: LD_ADDR_EXP 150
91532: PUSH
91533: LD_INT 1
91535: ST_TO_ADDR
// if p3 = 108 then
91536: LD_VAR 0 3
91540: PUSH
91541: LD_INT 108
91543: EQUAL
91544: IFFALSE 91554
// sWound := true ;
91546: LD_ADDR_EXP 158
91550: PUSH
91551: LD_INT 1
91553: ST_TO_ADDR
// if p3 = 109 then
91554: LD_VAR 0 3
91558: PUSH
91559: LD_INT 109
91561: EQUAL
91562: IFFALSE 91572
// sBetray := true ;
91564: LD_ADDR_EXP 162
91568: PUSH
91569: LD_INT 1
91571: ST_TO_ADDR
// if p3 = 110 then
91572: LD_VAR 0 3
91576: PUSH
91577: LD_INT 110
91579: EQUAL
91580: IFFALSE 91590
// sContamin := true ;
91582: LD_ADDR_EXP 163
91586: PUSH
91587: LD_INT 1
91589: ST_TO_ADDR
// if p3 = 111 then
91590: LD_VAR 0 3
91594: PUSH
91595: LD_INT 111
91597: EQUAL
91598: IFFALSE 91608
// sOil := true ;
91600: LD_ADDR_EXP 165
91604: PUSH
91605: LD_INT 1
91607: ST_TO_ADDR
// if p3 = 112 then
91608: LD_VAR 0 3
91612: PUSH
91613: LD_INT 112
91615: EQUAL
91616: IFFALSE 91626
// sStu := true ;
91618: LD_ADDR_EXP 169
91622: PUSH
91623: LD_INT 1
91625: ST_TO_ADDR
// if p3 = 113 then
91626: LD_VAR 0 3
91630: PUSH
91631: LD_INT 113
91633: EQUAL
91634: IFFALSE 91644
// sBazooka := true ;
91636: LD_ADDR_EXP 172
91640: PUSH
91641: LD_INT 1
91643: ST_TO_ADDR
// if p3 = 114 then
91644: LD_VAR 0 3
91648: PUSH
91649: LD_INT 114
91651: EQUAL
91652: IFFALSE 91662
// sMortar := true ;
91654: LD_ADDR_EXP 173
91658: PUSH
91659: LD_INT 1
91661: ST_TO_ADDR
// if p3 = 115 then
91662: LD_VAR 0 3
91666: PUSH
91667: LD_INT 115
91669: EQUAL
91670: IFFALSE 91680
// sRanger := true ;
91672: LD_ADDR_EXP 183
91676: PUSH
91677: LD_INT 1
91679: ST_TO_ADDR
// end ; end ;
91680: PPOPN 6
91682: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
91683: LD_EXP 130
91687: PUSH
91688: LD_EXP 135
91692: AND
91693: IFFALSE 91817
91695: GO 91697
91697: DISABLE
91698: LD_INT 0
91700: PPUSH
91701: PPUSH
// begin enable ;
91702: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
91703: LD_ADDR_VAR 0 2
91707: PUSH
91708: LD_INT 22
91710: PUSH
91711: LD_OWVAR 2
91715: PUSH
91716: EMPTY
91717: LIST
91718: LIST
91719: PUSH
91720: LD_INT 2
91722: PUSH
91723: LD_INT 34
91725: PUSH
91726: LD_INT 7
91728: PUSH
91729: EMPTY
91730: LIST
91731: LIST
91732: PUSH
91733: LD_INT 34
91735: PUSH
91736: LD_INT 45
91738: PUSH
91739: EMPTY
91740: LIST
91741: LIST
91742: PUSH
91743: LD_INT 34
91745: PUSH
91746: LD_INT 28
91748: PUSH
91749: EMPTY
91750: LIST
91751: LIST
91752: PUSH
91753: LD_INT 34
91755: PUSH
91756: LD_INT 47
91758: PUSH
91759: EMPTY
91760: LIST
91761: LIST
91762: PUSH
91763: EMPTY
91764: LIST
91765: LIST
91766: LIST
91767: LIST
91768: LIST
91769: PUSH
91770: EMPTY
91771: LIST
91772: LIST
91773: PPUSH
91774: CALL_OW 69
91778: ST_TO_ADDR
// if not tmp then
91779: LD_VAR 0 2
91783: NOT
91784: IFFALSE 91788
// exit ;
91786: GO 91817
// for i in tmp do
91788: LD_ADDR_VAR 0 1
91792: PUSH
91793: LD_VAR 0 2
91797: PUSH
91798: FOR_IN
91799: IFFALSE 91815
// begin SetLives ( i , 0 ) ;
91801: LD_VAR 0 1
91805: PPUSH
91806: LD_INT 0
91808: PPUSH
91809: CALL_OW 234
// end ;
91813: GO 91798
91815: POP
91816: POP
// end ;
91817: PPOPN 2
91819: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
91820: LD_EXP 130
91824: PUSH
91825: LD_EXP 136
91829: AND
91830: IFFALSE 91914
91832: GO 91834
91834: DISABLE
91835: LD_INT 0
91837: PPUSH
91838: PPUSH
// begin enable ;
91839: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
91840: LD_ADDR_VAR 0 2
91844: PUSH
91845: LD_INT 22
91847: PUSH
91848: LD_OWVAR 2
91852: PUSH
91853: EMPTY
91854: LIST
91855: LIST
91856: PUSH
91857: LD_INT 32
91859: PUSH
91860: LD_INT 3
91862: PUSH
91863: EMPTY
91864: LIST
91865: LIST
91866: PUSH
91867: EMPTY
91868: LIST
91869: LIST
91870: PPUSH
91871: CALL_OW 69
91875: ST_TO_ADDR
// if not tmp then
91876: LD_VAR 0 2
91880: NOT
91881: IFFALSE 91885
// exit ;
91883: GO 91914
// for i in tmp do
91885: LD_ADDR_VAR 0 1
91889: PUSH
91890: LD_VAR 0 2
91894: PUSH
91895: FOR_IN
91896: IFFALSE 91912
// begin SetLives ( i , 0 ) ;
91898: LD_VAR 0 1
91902: PPUSH
91903: LD_INT 0
91905: PPUSH
91906: CALL_OW 234
// end ;
91910: GO 91895
91912: POP
91913: POP
// end ;
91914: PPOPN 2
91916: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
91917: LD_EXP 130
91921: PUSH
91922: LD_EXP 133
91926: AND
91927: IFFALSE 92020
91929: GO 91931
91931: DISABLE
91932: LD_INT 0
91934: PPUSH
// begin enable ;
91935: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
91936: LD_ADDR_VAR 0 1
91940: PUSH
91941: LD_INT 22
91943: PUSH
91944: LD_OWVAR 2
91948: PUSH
91949: EMPTY
91950: LIST
91951: LIST
91952: PUSH
91953: LD_INT 2
91955: PUSH
91956: LD_INT 25
91958: PUSH
91959: LD_INT 5
91961: PUSH
91962: EMPTY
91963: LIST
91964: LIST
91965: PUSH
91966: LD_INT 25
91968: PUSH
91969: LD_INT 9
91971: PUSH
91972: EMPTY
91973: LIST
91974: LIST
91975: PUSH
91976: LD_INT 25
91978: PUSH
91979: LD_INT 8
91981: PUSH
91982: EMPTY
91983: LIST
91984: LIST
91985: PUSH
91986: EMPTY
91987: LIST
91988: LIST
91989: LIST
91990: LIST
91991: PUSH
91992: EMPTY
91993: LIST
91994: LIST
91995: PPUSH
91996: CALL_OW 69
92000: PUSH
92001: FOR_IN
92002: IFFALSE 92018
// begin SetClass ( i , 1 ) ;
92004: LD_VAR 0 1
92008: PPUSH
92009: LD_INT 1
92011: PPUSH
92012: CALL_OW 336
// end ;
92016: GO 92001
92018: POP
92019: POP
// end ;
92020: PPOPN 1
92022: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
92023: LD_EXP 130
92027: PUSH
92028: LD_EXP 134
92032: AND
92033: PUSH
92034: LD_OWVAR 65
92038: PUSH
92039: LD_INT 7
92041: LESS
92042: AND
92043: IFFALSE 92057
92045: GO 92047
92047: DISABLE
// begin enable ;
92048: ENABLE
// game_speed := 7 ;
92049: LD_ADDR_OWVAR 65
92053: PUSH
92054: LD_INT 7
92056: ST_TO_ADDR
// end ;
92057: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
92058: LD_EXP 130
92062: PUSH
92063: LD_EXP 137
92067: AND
92068: IFFALSE 92270
92070: GO 92072
92072: DISABLE
92073: LD_INT 0
92075: PPUSH
92076: PPUSH
92077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
92078: LD_ADDR_VAR 0 3
92082: PUSH
92083: LD_INT 81
92085: PUSH
92086: LD_OWVAR 2
92090: PUSH
92091: EMPTY
92092: LIST
92093: LIST
92094: PUSH
92095: LD_INT 21
92097: PUSH
92098: LD_INT 1
92100: PUSH
92101: EMPTY
92102: LIST
92103: LIST
92104: PUSH
92105: EMPTY
92106: LIST
92107: LIST
92108: PPUSH
92109: CALL_OW 69
92113: ST_TO_ADDR
// if not tmp then
92114: LD_VAR 0 3
92118: NOT
92119: IFFALSE 92123
// exit ;
92121: GO 92270
// if tmp > 5 then
92123: LD_VAR 0 3
92127: PUSH
92128: LD_INT 5
92130: GREATER
92131: IFFALSE 92143
// k := 5 else
92133: LD_ADDR_VAR 0 2
92137: PUSH
92138: LD_INT 5
92140: ST_TO_ADDR
92141: GO 92153
// k := tmp ;
92143: LD_ADDR_VAR 0 2
92147: PUSH
92148: LD_VAR 0 3
92152: ST_TO_ADDR
// for i := 1 to k do
92153: LD_ADDR_VAR 0 1
92157: PUSH
92158: DOUBLE
92159: LD_INT 1
92161: DEC
92162: ST_TO_ADDR
92163: LD_VAR 0 2
92167: PUSH
92168: FOR_TO
92169: IFFALSE 92268
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
92171: LD_VAR 0 3
92175: PUSH
92176: LD_VAR 0 1
92180: ARRAY
92181: PPUSH
92182: LD_VAR 0 1
92186: PUSH
92187: LD_INT 4
92189: MOD
92190: PUSH
92191: LD_INT 1
92193: PLUS
92194: PPUSH
92195: CALL_OW 259
92199: PUSH
92200: LD_INT 10
92202: LESS
92203: IFFALSE 92266
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
92205: LD_VAR 0 3
92209: PUSH
92210: LD_VAR 0 1
92214: ARRAY
92215: PPUSH
92216: LD_VAR 0 1
92220: PUSH
92221: LD_INT 4
92223: MOD
92224: PUSH
92225: LD_INT 1
92227: PLUS
92228: PPUSH
92229: LD_VAR 0 3
92233: PUSH
92234: LD_VAR 0 1
92238: ARRAY
92239: PPUSH
92240: LD_VAR 0 1
92244: PUSH
92245: LD_INT 4
92247: MOD
92248: PUSH
92249: LD_INT 1
92251: PLUS
92252: PPUSH
92253: CALL_OW 259
92257: PUSH
92258: LD_INT 1
92260: PLUS
92261: PPUSH
92262: CALL_OW 237
92266: GO 92168
92268: POP
92269: POP
// end ;
92270: PPOPN 3
92272: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
92273: LD_EXP 130
92277: PUSH
92278: LD_EXP 138
92282: AND
92283: IFFALSE 92303
92285: GO 92287
92287: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
92288: LD_INT 4
92290: PPUSH
92291: LD_OWVAR 2
92295: PPUSH
92296: LD_INT 0
92298: PPUSH
92299: CALL_OW 324
92303: END
// every 0 0$1 trigger StreamModeActive and sShovel do
92304: LD_EXP 130
92308: PUSH
92309: LD_EXP 167
92313: AND
92314: IFFALSE 92334
92316: GO 92318
92318: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
92319: LD_INT 19
92321: PPUSH
92322: LD_OWVAR 2
92326: PPUSH
92327: LD_INT 0
92329: PPUSH
92330: CALL_OW 324
92334: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
92335: LD_EXP 130
92339: PUSH
92340: LD_EXP 139
92344: AND
92345: IFFALSE 92447
92347: GO 92349
92349: DISABLE
92350: LD_INT 0
92352: PPUSH
92353: PPUSH
// begin enable ;
92354: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
92355: LD_ADDR_VAR 0 2
92359: PUSH
92360: LD_INT 22
92362: PUSH
92363: LD_OWVAR 2
92367: PUSH
92368: EMPTY
92369: LIST
92370: LIST
92371: PUSH
92372: LD_INT 2
92374: PUSH
92375: LD_INT 34
92377: PUSH
92378: LD_INT 11
92380: PUSH
92381: EMPTY
92382: LIST
92383: LIST
92384: PUSH
92385: LD_INT 34
92387: PUSH
92388: LD_INT 30
92390: PUSH
92391: EMPTY
92392: LIST
92393: LIST
92394: PUSH
92395: EMPTY
92396: LIST
92397: LIST
92398: LIST
92399: PUSH
92400: EMPTY
92401: LIST
92402: LIST
92403: PPUSH
92404: CALL_OW 69
92408: ST_TO_ADDR
// if not tmp then
92409: LD_VAR 0 2
92413: NOT
92414: IFFALSE 92418
// exit ;
92416: GO 92447
// for i in tmp do
92418: LD_ADDR_VAR 0 1
92422: PUSH
92423: LD_VAR 0 2
92427: PUSH
92428: FOR_IN
92429: IFFALSE 92445
// begin SetLives ( i , 0 ) ;
92431: LD_VAR 0 1
92435: PPUSH
92436: LD_INT 0
92438: PPUSH
92439: CALL_OW 234
// end ;
92443: GO 92428
92445: POP
92446: POP
// end ;
92447: PPOPN 2
92449: END
// every 0 0$1 trigger StreamModeActive and sBunker do
92450: LD_EXP 130
92454: PUSH
92455: LD_EXP 140
92459: AND
92460: IFFALSE 92480
92462: GO 92464
92464: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
92465: LD_INT 32
92467: PPUSH
92468: LD_OWVAR 2
92472: PPUSH
92473: LD_INT 0
92475: PPUSH
92476: CALL_OW 324
92480: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
92481: LD_EXP 130
92485: PUSH
92486: LD_EXP 141
92490: AND
92491: IFFALSE 92672
92493: GO 92495
92495: DISABLE
92496: LD_INT 0
92498: PPUSH
92499: PPUSH
92500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
92501: LD_ADDR_VAR 0 2
92505: PUSH
92506: LD_INT 22
92508: PUSH
92509: LD_OWVAR 2
92513: PUSH
92514: EMPTY
92515: LIST
92516: LIST
92517: PUSH
92518: LD_INT 33
92520: PUSH
92521: LD_INT 3
92523: PUSH
92524: EMPTY
92525: LIST
92526: LIST
92527: PUSH
92528: EMPTY
92529: LIST
92530: LIST
92531: PPUSH
92532: CALL_OW 69
92536: ST_TO_ADDR
// if not tmp then
92537: LD_VAR 0 2
92541: NOT
92542: IFFALSE 92546
// exit ;
92544: GO 92672
// side := 0 ;
92546: LD_ADDR_VAR 0 3
92550: PUSH
92551: LD_INT 0
92553: ST_TO_ADDR
// for i := 1 to 8 do
92554: LD_ADDR_VAR 0 1
92558: PUSH
92559: DOUBLE
92560: LD_INT 1
92562: DEC
92563: ST_TO_ADDR
92564: LD_INT 8
92566: PUSH
92567: FOR_TO
92568: IFFALSE 92616
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
92570: LD_OWVAR 2
92574: PUSH
92575: LD_VAR 0 1
92579: NONEQUAL
92580: PUSH
92581: LD_OWVAR 2
92585: PPUSH
92586: LD_VAR 0 1
92590: PPUSH
92591: CALL_OW 81
92595: PUSH
92596: LD_INT 2
92598: EQUAL
92599: AND
92600: IFFALSE 92614
// begin side := i ;
92602: LD_ADDR_VAR 0 3
92606: PUSH
92607: LD_VAR 0 1
92611: ST_TO_ADDR
// break ;
92612: GO 92616
// end ;
92614: GO 92567
92616: POP
92617: POP
// if not side then
92618: LD_VAR 0 3
92622: NOT
92623: IFFALSE 92627
// exit ;
92625: GO 92672
// for i := 1 to tmp do
92627: LD_ADDR_VAR 0 1
92631: PUSH
92632: DOUBLE
92633: LD_INT 1
92635: DEC
92636: ST_TO_ADDR
92637: LD_VAR 0 2
92641: PUSH
92642: FOR_TO
92643: IFFALSE 92670
// if Prob ( 60 ) then
92645: LD_INT 60
92647: PPUSH
92648: CALL_OW 13
92652: IFFALSE 92668
// SetSide ( i , side ) ;
92654: LD_VAR 0 1
92658: PPUSH
92659: LD_VAR 0 3
92663: PPUSH
92664: CALL_OW 235
92668: GO 92642
92670: POP
92671: POP
// end ;
92672: PPOPN 3
92674: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
92675: LD_EXP 130
92679: PUSH
92680: LD_EXP 143
92684: AND
92685: IFFALSE 92804
92687: GO 92689
92689: DISABLE
92690: LD_INT 0
92692: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
92693: LD_ADDR_VAR 0 1
92697: PUSH
92698: LD_INT 22
92700: PUSH
92701: LD_OWVAR 2
92705: PUSH
92706: EMPTY
92707: LIST
92708: LIST
92709: PUSH
92710: LD_INT 21
92712: PUSH
92713: LD_INT 1
92715: PUSH
92716: EMPTY
92717: LIST
92718: LIST
92719: PUSH
92720: LD_INT 3
92722: PUSH
92723: LD_INT 23
92725: PUSH
92726: LD_INT 0
92728: PUSH
92729: EMPTY
92730: LIST
92731: LIST
92732: PUSH
92733: EMPTY
92734: LIST
92735: LIST
92736: PUSH
92737: EMPTY
92738: LIST
92739: LIST
92740: LIST
92741: PPUSH
92742: CALL_OW 69
92746: PUSH
92747: FOR_IN
92748: IFFALSE 92802
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
92750: LD_VAR 0 1
92754: PPUSH
92755: CALL_OW 257
92759: PUSH
92760: LD_INT 1
92762: PUSH
92763: LD_INT 2
92765: PUSH
92766: LD_INT 3
92768: PUSH
92769: LD_INT 4
92771: PUSH
92772: EMPTY
92773: LIST
92774: LIST
92775: LIST
92776: LIST
92777: IN
92778: IFFALSE 92800
// SetClass ( un , rand ( 1 , 4 ) ) ;
92780: LD_VAR 0 1
92784: PPUSH
92785: LD_INT 1
92787: PPUSH
92788: LD_INT 4
92790: PPUSH
92791: CALL_OW 12
92795: PPUSH
92796: CALL_OW 336
92800: GO 92747
92802: POP
92803: POP
// end ;
92804: PPOPN 1
92806: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
92807: LD_EXP 130
92811: PUSH
92812: LD_EXP 142
92816: AND
92817: IFFALSE 92896
92819: GO 92821
92821: DISABLE
92822: LD_INT 0
92824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
92825: LD_ADDR_VAR 0 1
92829: PUSH
92830: LD_INT 22
92832: PUSH
92833: LD_OWVAR 2
92837: PUSH
92838: EMPTY
92839: LIST
92840: LIST
92841: PUSH
92842: LD_INT 21
92844: PUSH
92845: LD_INT 3
92847: PUSH
92848: EMPTY
92849: LIST
92850: LIST
92851: PUSH
92852: EMPTY
92853: LIST
92854: LIST
92855: PPUSH
92856: CALL_OW 69
92860: ST_TO_ADDR
// if not tmp then
92861: LD_VAR 0 1
92865: NOT
92866: IFFALSE 92870
// exit ;
92868: GO 92896
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
92870: LD_VAR 0 1
92874: PUSH
92875: LD_INT 1
92877: PPUSH
92878: LD_VAR 0 1
92882: PPUSH
92883: CALL_OW 12
92887: ARRAY
92888: PPUSH
92889: LD_INT 100
92891: PPUSH
92892: CALL_OW 234
// end ;
92896: PPOPN 1
92898: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
92899: LD_EXP 130
92903: PUSH
92904: LD_EXP 144
92908: AND
92909: IFFALSE 93007
92911: GO 92913
92913: DISABLE
92914: LD_INT 0
92916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
92917: LD_ADDR_VAR 0 1
92921: PUSH
92922: LD_INT 22
92924: PUSH
92925: LD_OWVAR 2
92929: PUSH
92930: EMPTY
92931: LIST
92932: LIST
92933: PUSH
92934: LD_INT 21
92936: PUSH
92937: LD_INT 1
92939: PUSH
92940: EMPTY
92941: LIST
92942: LIST
92943: PUSH
92944: EMPTY
92945: LIST
92946: LIST
92947: PPUSH
92948: CALL_OW 69
92952: ST_TO_ADDR
// if not tmp then
92953: LD_VAR 0 1
92957: NOT
92958: IFFALSE 92962
// exit ;
92960: GO 93007
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
92962: LD_VAR 0 1
92966: PUSH
92967: LD_INT 1
92969: PPUSH
92970: LD_VAR 0 1
92974: PPUSH
92975: CALL_OW 12
92979: ARRAY
92980: PPUSH
92981: LD_INT 1
92983: PPUSH
92984: LD_INT 4
92986: PPUSH
92987: CALL_OW 12
92991: PPUSH
92992: LD_INT 3000
92994: PPUSH
92995: LD_INT 9000
92997: PPUSH
92998: CALL_OW 12
93002: PPUSH
93003: CALL_OW 492
// end ;
93007: PPOPN 1
93009: END
// every 0 0$1 trigger StreamModeActive and sDepot do
93010: LD_EXP 130
93014: PUSH
93015: LD_EXP 145
93019: AND
93020: IFFALSE 93040
93022: GO 93024
93024: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
93025: LD_INT 1
93027: PPUSH
93028: LD_OWVAR 2
93032: PPUSH
93033: LD_INT 0
93035: PPUSH
93036: CALL_OW 324
93040: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
93041: LD_EXP 130
93045: PUSH
93046: LD_EXP 146
93050: AND
93051: IFFALSE 93134
93053: GO 93055
93055: DISABLE
93056: LD_INT 0
93058: PPUSH
93059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
93060: LD_ADDR_VAR 0 2
93064: PUSH
93065: LD_INT 22
93067: PUSH
93068: LD_OWVAR 2
93072: PUSH
93073: EMPTY
93074: LIST
93075: LIST
93076: PUSH
93077: LD_INT 21
93079: PUSH
93080: LD_INT 3
93082: PUSH
93083: EMPTY
93084: LIST
93085: LIST
93086: PUSH
93087: EMPTY
93088: LIST
93089: LIST
93090: PPUSH
93091: CALL_OW 69
93095: ST_TO_ADDR
// if not tmp then
93096: LD_VAR 0 2
93100: NOT
93101: IFFALSE 93105
// exit ;
93103: GO 93134
// for i in tmp do
93105: LD_ADDR_VAR 0 1
93109: PUSH
93110: LD_VAR 0 2
93114: PUSH
93115: FOR_IN
93116: IFFALSE 93132
// SetBLevel ( i , 10 ) ;
93118: LD_VAR 0 1
93122: PPUSH
93123: LD_INT 10
93125: PPUSH
93126: CALL_OW 241
93130: GO 93115
93132: POP
93133: POP
// end ;
93134: PPOPN 2
93136: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
93137: LD_EXP 130
93141: PUSH
93142: LD_EXP 147
93146: AND
93147: IFFALSE 93258
93149: GO 93151
93151: DISABLE
93152: LD_INT 0
93154: PPUSH
93155: PPUSH
93156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
93157: LD_ADDR_VAR 0 3
93161: PUSH
93162: LD_INT 22
93164: PUSH
93165: LD_OWVAR 2
93169: PUSH
93170: EMPTY
93171: LIST
93172: LIST
93173: PUSH
93174: LD_INT 25
93176: PUSH
93177: LD_INT 1
93179: PUSH
93180: EMPTY
93181: LIST
93182: LIST
93183: PUSH
93184: EMPTY
93185: LIST
93186: LIST
93187: PPUSH
93188: CALL_OW 69
93192: ST_TO_ADDR
// if not tmp then
93193: LD_VAR 0 3
93197: NOT
93198: IFFALSE 93202
// exit ;
93200: GO 93258
// un := tmp [ rand ( 1 , tmp ) ] ;
93202: LD_ADDR_VAR 0 2
93206: PUSH
93207: LD_VAR 0 3
93211: PUSH
93212: LD_INT 1
93214: PPUSH
93215: LD_VAR 0 3
93219: PPUSH
93220: CALL_OW 12
93224: ARRAY
93225: ST_TO_ADDR
// if Crawls ( un ) then
93226: LD_VAR 0 2
93230: PPUSH
93231: CALL_OW 318
93235: IFFALSE 93246
// ComWalk ( un ) ;
93237: LD_VAR 0 2
93241: PPUSH
93242: CALL_OW 138
// SetClass ( un , class_sniper ) ;
93246: LD_VAR 0 2
93250: PPUSH
93251: LD_INT 5
93253: PPUSH
93254: CALL_OW 336
// end ;
93258: PPOPN 3
93260: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
93261: LD_EXP 130
93265: PUSH
93266: LD_EXP 148
93270: AND
93271: PUSH
93272: LD_OWVAR 67
93276: PUSH
93277: LD_INT 3
93279: LESS
93280: AND
93281: IFFALSE 93300
93283: GO 93285
93285: DISABLE
// Difficulty := Difficulty + 1 ;
93286: LD_ADDR_OWVAR 67
93290: PUSH
93291: LD_OWVAR 67
93295: PUSH
93296: LD_INT 1
93298: PLUS
93299: ST_TO_ADDR
93300: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
93301: LD_EXP 130
93305: PUSH
93306: LD_EXP 149
93310: AND
93311: IFFALSE 93414
93313: GO 93315
93315: DISABLE
93316: LD_INT 0
93318: PPUSH
// begin for i := 1 to 5 do
93319: LD_ADDR_VAR 0 1
93323: PUSH
93324: DOUBLE
93325: LD_INT 1
93327: DEC
93328: ST_TO_ADDR
93329: LD_INT 5
93331: PUSH
93332: FOR_TO
93333: IFFALSE 93412
// begin uc_nation := nation_nature ;
93335: LD_ADDR_OWVAR 21
93339: PUSH
93340: LD_INT 0
93342: ST_TO_ADDR
// uc_side := 0 ;
93343: LD_ADDR_OWVAR 20
93347: PUSH
93348: LD_INT 0
93350: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
93351: LD_ADDR_OWVAR 29
93355: PUSH
93356: LD_INT 12
93358: PUSH
93359: LD_INT 12
93361: PUSH
93362: EMPTY
93363: LIST
93364: LIST
93365: ST_TO_ADDR
// hc_agressivity := 20 ;
93366: LD_ADDR_OWVAR 35
93370: PUSH
93371: LD_INT 20
93373: ST_TO_ADDR
// hc_class := class_tiger ;
93374: LD_ADDR_OWVAR 28
93378: PUSH
93379: LD_INT 14
93381: ST_TO_ADDR
// hc_gallery :=  ;
93382: LD_ADDR_OWVAR 33
93386: PUSH
93387: LD_STRING 
93389: ST_TO_ADDR
// hc_name :=  ;
93390: LD_ADDR_OWVAR 26
93394: PUSH
93395: LD_STRING 
93397: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
93398: CALL_OW 44
93402: PPUSH
93403: LD_INT 0
93405: PPUSH
93406: CALL_OW 51
// end ;
93410: GO 93332
93412: POP
93413: POP
// end ;
93414: PPOPN 1
93416: END
// every 0 0$1 trigger StreamModeActive and sBomb do
93417: LD_EXP 130
93421: PUSH
93422: LD_EXP 150
93426: AND
93427: IFFALSE 93436
93429: GO 93431
93431: DISABLE
// StreamSibBomb ;
93432: CALL 93437 0 0
93436: END
// export function StreamSibBomb ; var i , x , y ; begin
93437: LD_INT 0
93439: PPUSH
93440: PPUSH
93441: PPUSH
93442: PPUSH
// result := false ;
93443: LD_ADDR_VAR 0 1
93447: PUSH
93448: LD_INT 0
93450: ST_TO_ADDR
// for i := 1 to 16 do
93451: LD_ADDR_VAR 0 2
93455: PUSH
93456: DOUBLE
93457: LD_INT 1
93459: DEC
93460: ST_TO_ADDR
93461: LD_INT 16
93463: PUSH
93464: FOR_TO
93465: IFFALSE 93664
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
93467: LD_ADDR_VAR 0 3
93471: PUSH
93472: LD_INT 10
93474: PUSH
93475: LD_INT 20
93477: PUSH
93478: LD_INT 30
93480: PUSH
93481: LD_INT 40
93483: PUSH
93484: LD_INT 50
93486: PUSH
93487: LD_INT 60
93489: PUSH
93490: LD_INT 70
93492: PUSH
93493: LD_INT 80
93495: PUSH
93496: LD_INT 90
93498: PUSH
93499: LD_INT 100
93501: PUSH
93502: LD_INT 110
93504: PUSH
93505: LD_INT 120
93507: PUSH
93508: LD_INT 130
93510: PUSH
93511: LD_INT 140
93513: PUSH
93514: LD_INT 150
93516: PUSH
93517: EMPTY
93518: LIST
93519: LIST
93520: LIST
93521: LIST
93522: LIST
93523: LIST
93524: LIST
93525: LIST
93526: LIST
93527: LIST
93528: LIST
93529: LIST
93530: LIST
93531: LIST
93532: LIST
93533: PUSH
93534: LD_INT 1
93536: PPUSH
93537: LD_INT 15
93539: PPUSH
93540: CALL_OW 12
93544: ARRAY
93545: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
93546: LD_ADDR_VAR 0 4
93550: PUSH
93551: LD_INT 10
93553: PUSH
93554: LD_INT 20
93556: PUSH
93557: LD_INT 30
93559: PUSH
93560: LD_INT 40
93562: PUSH
93563: LD_INT 50
93565: PUSH
93566: LD_INT 60
93568: PUSH
93569: LD_INT 70
93571: PUSH
93572: LD_INT 80
93574: PUSH
93575: LD_INT 90
93577: PUSH
93578: LD_INT 100
93580: PUSH
93581: LD_INT 110
93583: PUSH
93584: LD_INT 120
93586: PUSH
93587: LD_INT 130
93589: PUSH
93590: LD_INT 140
93592: PUSH
93593: LD_INT 150
93595: PUSH
93596: EMPTY
93597: LIST
93598: LIST
93599: LIST
93600: LIST
93601: LIST
93602: LIST
93603: LIST
93604: LIST
93605: LIST
93606: LIST
93607: LIST
93608: LIST
93609: LIST
93610: LIST
93611: LIST
93612: PUSH
93613: LD_INT 1
93615: PPUSH
93616: LD_INT 15
93618: PPUSH
93619: CALL_OW 12
93623: ARRAY
93624: ST_TO_ADDR
// if ValidHex ( x , y ) then
93625: LD_VAR 0 3
93629: PPUSH
93630: LD_VAR 0 4
93634: PPUSH
93635: CALL_OW 488
93639: IFFALSE 93662
// begin result := [ x , y ] ;
93641: LD_ADDR_VAR 0 1
93645: PUSH
93646: LD_VAR 0 3
93650: PUSH
93651: LD_VAR 0 4
93655: PUSH
93656: EMPTY
93657: LIST
93658: LIST
93659: ST_TO_ADDR
// break ;
93660: GO 93664
// end ; end ;
93662: GO 93464
93664: POP
93665: POP
// if result then
93666: LD_VAR 0 1
93670: IFFALSE 93730
// begin ToLua ( playSibBomb() ) ;
93672: LD_STRING playSibBomb()
93674: PPUSH
93675: CALL_OW 559
// wait ( 0 0$14 ) ;
93679: LD_INT 490
93681: PPUSH
93682: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
93686: LD_VAR 0 1
93690: PUSH
93691: LD_INT 1
93693: ARRAY
93694: PPUSH
93695: LD_VAR 0 1
93699: PUSH
93700: LD_INT 2
93702: ARRAY
93703: PPUSH
93704: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
93708: LD_VAR 0 1
93712: PUSH
93713: LD_INT 1
93715: ARRAY
93716: PPUSH
93717: LD_VAR 0 1
93721: PUSH
93722: LD_INT 2
93724: ARRAY
93725: PPUSH
93726: CALL_OW 429
// end ; end ;
93730: LD_VAR 0 1
93734: RET
// every 0 0$1 trigger StreamModeActive and sReset do
93735: LD_EXP 130
93739: PUSH
93740: LD_EXP 152
93744: AND
93745: IFFALSE 93757
93747: GO 93749
93749: DISABLE
// YouLost (  ) ;
93750: LD_STRING 
93752: PPUSH
93753: CALL_OW 104
93757: END
// every 0 0$1 trigger StreamModeActive and sFog do
93758: LD_EXP 130
93762: PUSH
93763: LD_EXP 151
93767: AND
93768: IFFALSE 93782
93770: GO 93772
93772: DISABLE
// FogOff ( your_side ) ;
93773: LD_OWVAR 2
93777: PPUSH
93778: CALL_OW 344
93782: END
// every 0 0$1 trigger StreamModeActive and sSun do
93783: LD_EXP 130
93787: PUSH
93788: LD_EXP 153
93792: AND
93793: IFFALSE 93821
93795: GO 93797
93797: DISABLE
// begin solar_recharge_percent := 0 ;
93798: LD_ADDR_OWVAR 79
93802: PUSH
93803: LD_INT 0
93805: ST_TO_ADDR
// wait ( 5 5$00 ) ;
93806: LD_INT 10500
93808: PPUSH
93809: CALL_OW 67
// solar_recharge_percent := 100 ;
93813: LD_ADDR_OWVAR 79
93817: PUSH
93818: LD_INT 100
93820: ST_TO_ADDR
// end ;
93821: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
93822: LD_EXP 130
93826: PUSH
93827: LD_EXP 154
93831: AND
93832: IFFALSE 94071
93834: GO 93836
93836: DISABLE
93837: LD_INT 0
93839: PPUSH
93840: PPUSH
93841: PPUSH
// begin tmp := [ ] ;
93842: LD_ADDR_VAR 0 3
93846: PUSH
93847: EMPTY
93848: ST_TO_ADDR
// for i := 1 to 6 do
93849: LD_ADDR_VAR 0 1
93853: PUSH
93854: DOUBLE
93855: LD_INT 1
93857: DEC
93858: ST_TO_ADDR
93859: LD_INT 6
93861: PUSH
93862: FOR_TO
93863: IFFALSE 93968
// begin uc_nation := nation_nature ;
93865: LD_ADDR_OWVAR 21
93869: PUSH
93870: LD_INT 0
93872: ST_TO_ADDR
// uc_side := 0 ;
93873: LD_ADDR_OWVAR 20
93877: PUSH
93878: LD_INT 0
93880: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
93881: LD_ADDR_OWVAR 29
93885: PUSH
93886: LD_INT 12
93888: PUSH
93889: LD_INT 12
93891: PUSH
93892: EMPTY
93893: LIST
93894: LIST
93895: ST_TO_ADDR
// hc_agressivity := 20 ;
93896: LD_ADDR_OWVAR 35
93900: PUSH
93901: LD_INT 20
93903: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
93904: LD_ADDR_OWVAR 28
93908: PUSH
93909: LD_INT 17
93911: ST_TO_ADDR
// hc_gallery :=  ;
93912: LD_ADDR_OWVAR 33
93916: PUSH
93917: LD_STRING 
93919: ST_TO_ADDR
// hc_name :=  ;
93920: LD_ADDR_OWVAR 26
93924: PUSH
93925: LD_STRING 
93927: ST_TO_ADDR
// un := CreateHuman ;
93928: LD_ADDR_VAR 0 2
93932: PUSH
93933: CALL_OW 44
93937: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
93938: LD_VAR 0 2
93942: PPUSH
93943: LD_INT 1
93945: PPUSH
93946: CALL_OW 51
// tmp := tmp ^ un ;
93950: LD_ADDR_VAR 0 3
93954: PUSH
93955: LD_VAR 0 3
93959: PUSH
93960: LD_VAR 0 2
93964: ADD
93965: ST_TO_ADDR
// end ;
93966: GO 93862
93968: POP
93969: POP
// repeat wait ( 0 0$1 ) ;
93970: LD_INT 35
93972: PPUSH
93973: CALL_OW 67
// for un in tmp do
93977: LD_ADDR_VAR 0 2
93981: PUSH
93982: LD_VAR 0 3
93986: PUSH
93987: FOR_IN
93988: IFFALSE 94062
// begin if IsDead ( un ) then
93990: LD_VAR 0 2
93994: PPUSH
93995: CALL_OW 301
93999: IFFALSE 94019
// begin tmp := tmp diff un ;
94001: LD_ADDR_VAR 0 3
94005: PUSH
94006: LD_VAR 0 3
94010: PUSH
94011: LD_VAR 0 2
94015: DIFF
94016: ST_TO_ADDR
// continue ;
94017: GO 93987
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
94019: LD_VAR 0 2
94023: PPUSH
94024: LD_INT 3
94026: PUSH
94027: LD_INT 22
94029: PUSH
94030: LD_INT 0
94032: PUSH
94033: EMPTY
94034: LIST
94035: LIST
94036: PUSH
94037: EMPTY
94038: LIST
94039: LIST
94040: PPUSH
94041: CALL_OW 69
94045: PPUSH
94046: LD_VAR 0 2
94050: PPUSH
94051: CALL_OW 74
94055: PPUSH
94056: CALL_OW 115
// end ;
94060: GO 93987
94062: POP
94063: POP
// until not tmp ;
94064: LD_VAR 0 3
94068: NOT
94069: IFFALSE 93970
// end ;
94071: PPOPN 3
94073: END
// every 0 0$1 trigger StreamModeActive and sTroll do
94074: LD_EXP 130
94078: PUSH
94079: LD_EXP 155
94083: AND
94084: IFFALSE 94138
94086: GO 94088
94088: DISABLE
// begin ToLua ( displayTroll(); ) ;
94089: LD_STRING displayTroll();
94091: PPUSH
94092: CALL_OW 559
// wait ( 3 3$00 ) ;
94096: LD_INT 6300
94098: PPUSH
94099: CALL_OW 67
// ToLua ( hideTroll(); ) ;
94103: LD_STRING hideTroll();
94105: PPUSH
94106: CALL_OW 559
// wait ( 1 1$00 ) ;
94110: LD_INT 2100
94112: PPUSH
94113: CALL_OW 67
// ToLua ( displayTroll(); ) ;
94117: LD_STRING displayTroll();
94119: PPUSH
94120: CALL_OW 559
// wait ( 1 1$00 ) ;
94124: LD_INT 2100
94126: PPUSH
94127: CALL_OW 67
// ToLua ( hideTroll(); ) ;
94131: LD_STRING hideTroll();
94133: PPUSH
94134: CALL_OW 559
// end ;
94138: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
94139: LD_EXP 130
94143: PUSH
94144: LD_EXP 156
94148: AND
94149: IFFALSE 94212
94151: GO 94153
94153: DISABLE
94154: LD_INT 0
94156: PPUSH
// begin p := 0 ;
94157: LD_ADDR_VAR 0 1
94161: PUSH
94162: LD_INT 0
94164: ST_TO_ADDR
// repeat game_speed := 1 ;
94165: LD_ADDR_OWVAR 65
94169: PUSH
94170: LD_INT 1
94172: ST_TO_ADDR
// wait ( 0 0$1 ) ;
94173: LD_INT 35
94175: PPUSH
94176: CALL_OW 67
// p := p + 1 ;
94180: LD_ADDR_VAR 0 1
94184: PUSH
94185: LD_VAR 0 1
94189: PUSH
94190: LD_INT 1
94192: PLUS
94193: ST_TO_ADDR
// until p >= 60 ;
94194: LD_VAR 0 1
94198: PUSH
94199: LD_INT 60
94201: GREATEREQUAL
94202: IFFALSE 94165
// game_speed := 4 ;
94204: LD_ADDR_OWVAR 65
94208: PUSH
94209: LD_INT 4
94211: ST_TO_ADDR
// end ;
94212: PPOPN 1
94214: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
94215: LD_EXP 130
94219: PUSH
94220: LD_EXP 157
94224: AND
94225: IFFALSE 94371
94227: GO 94229
94229: DISABLE
94230: LD_INT 0
94232: PPUSH
94233: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
94234: LD_ADDR_VAR 0 1
94238: PUSH
94239: LD_INT 22
94241: PUSH
94242: LD_OWVAR 2
94246: PUSH
94247: EMPTY
94248: LIST
94249: LIST
94250: PUSH
94251: LD_INT 2
94253: PUSH
94254: LD_INT 30
94256: PUSH
94257: LD_INT 0
94259: PUSH
94260: EMPTY
94261: LIST
94262: LIST
94263: PUSH
94264: LD_INT 30
94266: PUSH
94267: LD_INT 1
94269: PUSH
94270: EMPTY
94271: LIST
94272: LIST
94273: PUSH
94274: EMPTY
94275: LIST
94276: LIST
94277: LIST
94278: PUSH
94279: EMPTY
94280: LIST
94281: LIST
94282: PPUSH
94283: CALL_OW 69
94287: ST_TO_ADDR
// if not depot then
94288: LD_VAR 0 1
94292: NOT
94293: IFFALSE 94297
// exit ;
94295: GO 94371
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
94297: LD_ADDR_VAR 0 2
94301: PUSH
94302: LD_VAR 0 1
94306: PUSH
94307: LD_INT 1
94309: PPUSH
94310: LD_VAR 0 1
94314: PPUSH
94315: CALL_OW 12
94319: ARRAY
94320: PPUSH
94321: CALL_OW 274
94325: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
94326: LD_VAR 0 2
94330: PPUSH
94331: LD_INT 1
94333: PPUSH
94334: LD_INT 0
94336: PPUSH
94337: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
94341: LD_VAR 0 2
94345: PPUSH
94346: LD_INT 2
94348: PPUSH
94349: LD_INT 0
94351: PPUSH
94352: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
94356: LD_VAR 0 2
94360: PPUSH
94361: LD_INT 3
94363: PPUSH
94364: LD_INT 0
94366: PPUSH
94367: CALL_OW 277
// end ;
94371: PPOPN 2
94373: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
94374: LD_EXP 130
94378: PUSH
94379: LD_EXP 158
94383: AND
94384: IFFALSE 94481
94386: GO 94388
94388: DISABLE
94389: LD_INT 0
94391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
94392: LD_ADDR_VAR 0 1
94396: PUSH
94397: LD_INT 22
94399: PUSH
94400: LD_OWVAR 2
94404: PUSH
94405: EMPTY
94406: LIST
94407: LIST
94408: PUSH
94409: LD_INT 21
94411: PUSH
94412: LD_INT 1
94414: PUSH
94415: EMPTY
94416: LIST
94417: LIST
94418: PUSH
94419: LD_INT 3
94421: PUSH
94422: LD_INT 23
94424: PUSH
94425: LD_INT 0
94427: PUSH
94428: EMPTY
94429: LIST
94430: LIST
94431: PUSH
94432: EMPTY
94433: LIST
94434: LIST
94435: PUSH
94436: EMPTY
94437: LIST
94438: LIST
94439: LIST
94440: PPUSH
94441: CALL_OW 69
94445: ST_TO_ADDR
// if not tmp then
94446: LD_VAR 0 1
94450: NOT
94451: IFFALSE 94455
// exit ;
94453: GO 94481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
94455: LD_VAR 0 1
94459: PUSH
94460: LD_INT 1
94462: PPUSH
94463: LD_VAR 0 1
94467: PPUSH
94468: CALL_OW 12
94472: ARRAY
94473: PPUSH
94474: LD_INT 200
94476: PPUSH
94477: CALL_OW 234
// end ;
94481: PPOPN 1
94483: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
94484: LD_EXP 130
94488: PUSH
94489: LD_EXP 159
94493: AND
94494: IFFALSE 94573
94496: GO 94498
94498: DISABLE
94499: LD_INT 0
94501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
94502: LD_ADDR_VAR 0 1
94506: PUSH
94507: LD_INT 22
94509: PUSH
94510: LD_OWVAR 2
94514: PUSH
94515: EMPTY
94516: LIST
94517: LIST
94518: PUSH
94519: LD_INT 21
94521: PUSH
94522: LD_INT 2
94524: PUSH
94525: EMPTY
94526: LIST
94527: LIST
94528: PUSH
94529: EMPTY
94530: LIST
94531: LIST
94532: PPUSH
94533: CALL_OW 69
94537: ST_TO_ADDR
// if not tmp then
94538: LD_VAR 0 1
94542: NOT
94543: IFFALSE 94547
// exit ;
94545: GO 94573
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
94547: LD_VAR 0 1
94551: PUSH
94552: LD_INT 1
94554: PPUSH
94555: LD_VAR 0 1
94559: PPUSH
94560: CALL_OW 12
94564: ARRAY
94565: PPUSH
94566: LD_INT 60
94568: PPUSH
94569: CALL_OW 234
// end ;
94573: PPOPN 1
94575: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
94576: LD_EXP 130
94580: PUSH
94581: LD_EXP 160
94585: AND
94586: IFFALSE 94685
94588: GO 94590
94590: DISABLE
94591: LD_INT 0
94593: PPUSH
94594: PPUSH
// begin enable ;
94595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
94596: LD_ADDR_VAR 0 1
94600: PUSH
94601: LD_INT 22
94603: PUSH
94604: LD_OWVAR 2
94608: PUSH
94609: EMPTY
94610: LIST
94611: LIST
94612: PUSH
94613: LD_INT 61
94615: PUSH
94616: EMPTY
94617: LIST
94618: PUSH
94619: LD_INT 33
94621: PUSH
94622: LD_INT 2
94624: PUSH
94625: EMPTY
94626: LIST
94627: LIST
94628: PUSH
94629: EMPTY
94630: LIST
94631: LIST
94632: LIST
94633: PPUSH
94634: CALL_OW 69
94638: ST_TO_ADDR
// if not tmp then
94639: LD_VAR 0 1
94643: NOT
94644: IFFALSE 94648
// exit ;
94646: GO 94685
// for i in tmp do
94648: LD_ADDR_VAR 0 2
94652: PUSH
94653: LD_VAR 0 1
94657: PUSH
94658: FOR_IN
94659: IFFALSE 94683
// if IsControledBy ( i ) then
94661: LD_VAR 0 2
94665: PPUSH
94666: CALL_OW 312
94670: IFFALSE 94681
// ComUnlink ( i ) ;
94672: LD_VAR 0 2
94676: PPUSH
94677: CALL_OW 136
94681: GO 94658
94683: POP
94684: POP
// end ;
94685: PPOPN 2
94687: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
94688: LD_EXP 130
94692: PUSH
94693: LD_EXP 161
94697: AND
94698: IFFALSE 94838
94700: GO 94702
94702: DISABLE
94703: LD_INT 0
94705: PPUSH
94706: PPUSH
// begin ToLua ( displayPowell(); ) ;
94707: LD_STRING displayPowell();
94709: PPUSH
94710: CALL_OW 559
// uc_side := 0 ;
94714: LD_ADDR_OWVAR 20
94718: PUSH
94719: LD_INT 0
94721: ST_TO_ADDR
// uc_nation := 2 ;
94722: LD_ADDR_OWVAR 21
94726: PUSH
94727: LD_INT 2
94729: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
94730: LD_ADDR_OWVAR 37
94734: PUSH
94735: LD_INT 14
94737: ST_TO_ADDR
// vc_engine := engine_siberite ;
94738: LD_ADDR_OWVAR 39
94742: PUSH
94743: LD_INT 3
94745: ST_TO_ADDR
// vc_control := control_apeman ;
94746: LD_ADDR_OWVAR 38
94750: PUSH
94751: LD_INT 5
94753: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
94754: LD_ADDR_OWVAR 40
94758: PUSH
94759: LD_INT 29
94761: ST_TO_ADDR
// un := CreateVehicle ;
94762: LD_ADDR_VAR 0 2
94766: PUSH
94767: CALL_OW 45
94771: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94772: LD_VAR 0 2
94776: PPUSH
94777: LD_INT 1
94779: PPUSH
94780: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94784: LD_INT 35
94786: PPUSH
94787: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94791: LD_VAR 0 2
94795: PPUSH
94796: LD_INT 22
94798: PUSH
94799: LD_OWVAR 2
94803: PUSH
94804: EMPTY
94805: LIST
94806: LIST
94807: PPUSH
94808: CALL_OW 69
94812: PPUSH
94813: LD_VAR 0 2
94817: PPUSH
94818: CALL_OW 74
94822: PPUSH
94823: CALL_OW 115
// until IsDead ( un ) ;
94827: LD_VAR 0 2
94831: PPUSH
94832: CALL_OW 301
94836: IFFALSE 94784
// end ;
94838: PPOPN 2
94840: END
// every 0 0$1 trigger StreamModeActive and sStu do
94841: LD_EXP 130
94845: PUSH
94846: LD_EXP 169
94850: AND
94851: IFFALSE 94867
94853: GO 94855
94855: DISABLE
// begin ToLua ( displayStucuk(); ) ;
94856: LD_STRING displayStucuk();
94858: PPUSH
94859: CALL_OW 559
// ResetFog ;
94863: CALL_OW 335
// end ;
94867: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
94868: LD_EXP 130
94872: PUSH
94873: LD_EXP 162
94877: AND
94878: IFFALSE 95019
94880: GO 94882
94882: DISABLE
94883: LD_INT 0
94885: PPUSH
94886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94887: LD_ADDR_VAR 0 2
94891: PUSH
94892: LD_INT 22
94894: PUSH
94895: LD_OWVAR 2
94899: PUSH
94900: EMPTY
94901: LIST
94902: LIST
94903: PUSH
94904: LD_INT 21
94906: PUSH
94907: LD_INT 1
94909: PUSH
94910: EMPTY
94911: LIST
94912: LIST
94913: PUSH
94914: EMPTY
94915: LIST
94916: LIST
94917: PPUSH
94918: CALL_OW 69
94922: ST_TO_ADDR
// if not tmp then
94923: LD_VAR 0 2
94927: NOT
94928: IFFALSE 94932
// exit ;
94930: GO 95019
// un := tmp [ rand ( 1 , tmp ) ] ;
94932: LD_ADDR_VAR 0 1
94936: PUSH
94937: LD_VAR 0 2
94941: PUSH
94942: LD_INT 1
94944: PPUSH
94945: LD_VAR 0 2
94949: PPUSH
94950: CALL_OW 12
94954: ARRAY
94955: ST_TO_ADDR
// SetSide ( un , 0 ) ;
94956: LD_VAR 0 1
94960: PPUSH
94961: LD_INT 0
94963: PPUSH
94964: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
94968: LD_VAR 0 1
94972: PPUSH
94973: LD_OWVAR 3
94977: PUSH
94978: LD_VAR 0 1
94982: DIFF
94983: PPUSH
94984: LD_VAR 0 1
94988: PPUSH
94989: CALL_OW 74
94993: PPUSH
94994: CALL_OW 115
// wait ( 0 0$20 ) ;
94998: LD_INT 700
95000: PPUSH
95001: CALL_OW 67
// SetSide ( un , your_side ) ;
95005: LD_VAR 0 1
95009: PPUSH
95010: LD_OWVAR 2
95014: PPUSH
95015: CALL_OW 235
// end ;
95019: PPOPN 2
95021: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
95022: LD_EXP 130
95026: PUSH
95027: LD_EXP 163
95031: AND
95032: IFFALSE 95138
95034: GO 95036
95036: DISABLE
95037: LD_INT 0
95039: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
95040: LD_ADDR_VAR 0 1
95044: PUSH
95045: LD_INT 22
95047: PUSH
95048: LD_OWVAR 2
95052: PUSH
95053: EMPTY
95054: LIST
95055: LIST
95056: PUSH
95057: LD_INT 2
95059: PUSH
95060: LD_INT 30
95062: PUSH
95063: LD_INT 0
95065: PUSH
95066: EMPTY
95067: LIST
95068: LIST
95069: PUSH
95070: LD_INT 30
95072: PUSH
95073: LD_INT 1
95075: PUSH
95076: EMPTY
95077: LIST
95078: LIST
95079: PUSH
95080: EMPTY
95081: LIST
95082: LIST
95083: LIST
95084: PUSH
95085: EMPTY
95086: LIST
95087: LIST
95088: PPUSH
95089: CALL_OW 69
95093: ST_TO_ADDR
// if not depot then
95094: LD_VAR 0 1
95098: NOT
95099: IFFALSE 95103
// exit ;
95101: GO 95138
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
95103: LD_VAR 0 1
95107: PUSH
95108: LD_INT 1
95110: ARRAY
95111: PPUSH
95112: CALL_OW 250
95116: PPUSH
95117: LD_VAR 0 1
95121: PUSH
95122: LD_INT 1
95124: ARRAY
95125: PPUSH
95126: CALL_OW 251
95130: PPUSH
95131: LD_INT 70
95133: PPUSH
95134: CALL_OW 495
// end ;
95138: PPOPN 1
95140: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
95141: LD_EXP 130
95145: PUSH
95146: LD_EXP 164
95150: AND
95151: IFFALSE 95362
95153: GO 95155
95155: DISABLE
95156: LD_INT 0
95158: PPUSH
95159: PPUSH
95160: PPUSH
95161: PPUSH
95162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
95163: LD_ADDR_VAR 0 5
95167: PUSH
95168: LD_INT 22
95170: PUSH
95171: LD_OWVAR 2
95175: PUSH
95176: EMPTY
95177: LIST
95178: LIST
95179: PUSH
95180: LD_INT 21
95182: PUSH
95183: LD_INT 1
95185: PUSH
95186: EMPTY
95187: LIST
95188: LIST
95189: PUSH
95190: EMPTY
95191: LIST
95192: LIST
95193: PPUSH
95194: CALL_OW 69
95198: ST_TO_ADDR
// if not tmp then
95199: LD_VAR 0 5
95203: NOT
95204: IFFALSE 95208
// exit ;
95206: GO 95362
// for i in tmp do
95208: LD_ADDR_VAR 0 1
95212: PUSH
95213: LD_VAR 0 5
95217: PUSH
95218: FOR_IN
95219: IFFALSE 95360
// begin d := rand ( 0 , 5 ) ;
95221: LD_ADDR_VAR 0 4
95225: PUSH
95226: LD_INT 0
95228: PPUSH
95229: LD_INT 5
95231: PPUSH
95232: CALL_OW 12
95236: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
95237: LD_ADDR_VAR 0 2
95241: PUSH
95242: LD_VAR 0 1
95246: PPUSH
95247: CALL_OW 250
95251: PPUSH
95252: LD_VAR 0 4
95256: PPUSH
95257: LD_INT 3
95259: PPUSH
95260: LD_INT 12
95262: PPUSH
95263: CALL_OW 12
95267: PPUSH
95268: CALL_OW 272
95272: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
95273: LD_ADDR_VAR 0 3
95277: PUSH
95278: LD_VAR 0 1
95282: PPUSH
95283: CALL_OW 251
95287: PPUSH
95288: LD_VAR 0 4
95292: PPUSH
95293: LD_INT 3
95295: PPUSH
95296: LD_INT 12
95298: PPUSH
95299: CALL_OW 12
95303: PPUSH
95304: CALL_OW 273
95308: ST_TO_ADDR
// if ValidHex ( x , y ) then
95309: LD_VAR 0 2
95313: PPUSH
95314: LD_VAR 0 3
95318: PPUSH
95319: CALL_OW 488
95323: IFFALSE 95358
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
95325: LD_VAR 0 1
95329: PPUSH
95330: LD_VAR 0 2
95334: PPUSH
95335: LD_VAR 0 3
95339: PPUSH
95340: LD_INT 3
95342: PPUSH
95343: LD_INT 6
95345: PPUSH
95346: CALL_OW 12
95350: PPUSH
95351: LD_INT 1
95353: PPUSH
95354: CALL_OW 483
// end ;
95358: GO 95218
95360: POP
95361: POP
// end ;
95362: PPOPN 5
95364: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
95365: LD_EXP 130
95369: PUSH
95370: LD_EXP 165
95374: AND
95375: IFFALSE 95469
95377: GO 95379
95379: DISABLE
95380: LD_INT 0
95382: PPUSH
95383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
95384: LD_ADDR_VAR 0 2
95388: PUSH
95389: LD_INT 22
95391: PUSH
95392: LD_OWVAR 2
95396: PUSH
95397: EMPTY
95398: LIST
95399: LIST
95400: PUSH
95401: LD_INT 32
95403: PUSH
95404: LD_INT 1
95406: PUSH
95407: EMPTY
95408: LIST
95409: LIST
95410: PUSH
95411: LD_INT 21
95413: PUSH
95414: LD_INT 2
95416: PUSH
95417: EMPTY
95418: LIST
95419: LIST
95420: PUSH
95421: EMPTY
95422: LIST
95423: LIST
95424: LIST
95425: PPUSH
95426: CALL_OW 69
95430: ST_TO_ADDR
// if not tmp then
95431: LD_VAR 0 2
95435: NOT
95436: IFFALSE 95440
// exit ;
95438: GO 95469
// for i in tmp do
95440: LD_ADDR_VAR 0 1
95444: PUSH
95445: LD_VAR 0 2
95449: PUSH
95450: FOR_IN
95451: IFFALSE 95467
// SetFuel ( i , 0 ) ;
95453: LD_VAR 0 1
95457: PPUSH
95458: LD_INT 0
95460: PPUSH
95461: CALL_OW 240
95465: GO 95450
95467: POP
95468: POP
// end ;
95469: PPOPN 2
95471: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
95472: LD_EXP 130
95476: PUSH
95477: LD_EXP 166
95481: AND
95482: IFFALSE 95548
95484: GO 95486
95486: DISABLE
95487: LD_INT 0
95489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
95490: LD_ADDR_VAR 0 1
95494: PUSH
95495: LD_INT 22
95497: PUSH
95498: LD_OWVAR 2
95502: PUSH
95503: EMPTY
95504: LIST
95505: LIST
95506: PUSH
95507: LD_INT 30
95509: PUSH
95510: LD_INT 29
95512: PUSH
95513: EMPTY
95514: LIST
95515: LIST
95516: PUSH
95517: EMPTY
95518: LIST
95519: LIST
95520: PPUSH
95521: CALL_OW 69
95525: ST_TO_ADDR
// if not tmp then
95526: LD_VAR 0 1
95530: NOT
95531: IFFALSE 95535
// exit ;
95533: GO 95548
// DestroyUnit ( tmp [ 1 ] ) ;
95535: LD_VAR 0 1
95539: PUSH
95540: LD_INT 1
95542: ARRAY
95543: PPUSH
95544: CALL_OW 65
// end ;
95548: PPOPN 1
95550: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
95551: LD_EXP 130
95555: PUSH
95556: LD_EXP 168
95560: AND
95561: IFFALSE 95690
95563: GO 95565
95565: DISABLE
95566: LD_INT 0
95568: PPUSH
// begin uc_side := 0 ;
95569: LD_ADDR_OWVAR 20
95573: PUSH
95574: LD_INT 0
95576: ST_TO_ADDR
// uc_nation := nation_arabian ;
95577: LD_ADDR_OWVAR 21
95581: PUSH
95582: LD_INT 2
95584: ST_TO_ADDR
// hc_gallery :=  ;
95585: LD_ADDR_OWVAR 33
95589: PUSH
95590: LD_STRING 
95592: ST_TO_ADDR
// hc_name :=  ;
95593: LD_ADDR_OWVAR 26
95597: PUSH
95598: LD_STRING 
95600: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
95601: LD_INT 1
95603: PPUSH
95604: LD_INT 11
95606: PPUSH
95607: LD_INT 10
95609: PPUSH
95610: CALL_OW 380
// un := CreateHuman ;
95614: LD_ADDR_VAR 0 1
95618: PUSH
95619: CALL_OW 44
95623: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
95624: LD_VAR 0 1
95628: PPUSH
95629: LD_INT 1
95631: PPUSH
95632: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
95636: LD_INT 35
95638: PPUSH
95639: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
95643: LD_VAR 0 1
95647: PPUSH
95648: LD_INT 22
95650: PUSH
95651: LD_OWVAR 2
95655: PUSH
95656: EMPTY
95657: LIST
95658: LIST
95659: PPUSH
95660: CALL_OW 69
95664: PPUSH
95665: LD_VAR 0 1
95669: PPUSH
95670: CALL_OW 74
95674: PPUSH
95675: CALL_OW 115
// until IsDead ( un ) ;
95679: LD_VAR 0 1
95683: PPUSH
95684: CALL_OW 301
95688: IFFALSE 95636
// end ;
95690: PPOPN 1
95692: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
95693: LD_EXP 130
95697: PUSH
95698: LD_EXP 170
95702: AND
95703: IFFALSE 95715
95705: GO 95707
95707: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
95708: LD_STRING earthquake(getX(game), 0, 32)
95710: PPUSH
95711: CALL_OW 559
95715: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
95716: LD_EXP 130
95720: PUSH
95721: LD_EXP 171
95725: AND
95726: IFFALSE 95817
95728: GO 95730
95730: DISABLE
95731: LD_INT 0
95733: PPUSH
// begin enable ;
95734: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
95735: LD_ADDR_VAR 0 1
95739: PUSH
95740: LD_INT 22
95742: PUSH
95743: LD_OWVAR 2
95747: PUSH
95748: EMPTY
95749: LIST
95750: LIST
95751: PUSH
95752: LD_INT 21
95754: PUSH
95755: LD_INT 2
95757: PUSH
95758: EMPTY
95759: LIST
95760: LIST
95761: PUSH
95762: LD_INT 33
95764: PUSH
95765: LD_INT 3
95767: PUSH
95768: EMPTY
95769: LIST
95770: LIST
95771: PUSH
95772: EMPTY
95773: LIST
95774: LIST
95775: LIST
95776: PPUSH
95777: CALL_OW 69
95781: ST_TO_ADDR
// if not tmp then
95782: LD_VAR 0 1
95786: NOT
95787: IFFALSE 95791
// exit ;
95789: GO 95817
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
95791: LD_VAR 0 1
95795: PUSH
95796: LD_INT 1
95798: PPUSH
95799: LD_VAR 0 1
95803: PPUSH
95804: CALL_OW 12
95808: ARRAY
95809: PPUSH
95810: LD_INT 1
95812: PPUSH
95813: CALL_OW 234
// end ;
95817: PPOPN 1
95819: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
95820: LD_EXP 130
95824: PUSH
95825: LD_EXP 172
95829: AND
95830: IFFALSE 95971
95832: GO 95834
95834: DISABLE
95835: LD_INT 0
95837: PPUSH
95838: PPUSH
95839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95840: LD_ADDR_VAR 0 3
95844: PUSH
95845: LD_INT 22
95847: PUSH
95848: LD_OWVAR 2
95852: PUSH
95853: EMPTY
95854: LIST
95855: LIST
95856: PUSH
95857: LD_INT 25
95859: PUSH
95860: LD_INT 1
95862: PUSH
95863: EMPTY
95864: LIST
95865: LIST
95866: PUSH
95867: EMPTY
95868: LIST
95869: LIST
95870: PPUSH
95871: CALL_OW 69
95875: ST_TO_ADDR
// if not tmp then
95876: LD_VAR 0 3
95880: NOT
95881: IFFALSE 95885
// exit ;
95883: GO 95971
// un := tmp [ rand ( 1 , tmp ) ] ;
95885: LD_ADDR_VAR 0 2
95889: PUSH
95890: LD_VAR 0 3
95894: PUSH
95895: LD_INT 1
95897: PPUSH
95898: LD_VAR 0 3
95902: PPUSH
95903: CALL_OW 12
95907: ARRAY
95908: ST_TO_ADDR
// if Crawls ( un ) then
95909: LD_VAR 0 2
95913: PPUSH
95914: CALL_OW 318
95918: IFFALSE 95929
// ComWalk ( un ) ;
95920: LD_VAR 0 2
95924: PPUSH
95925: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
95929: LD_VAR 0 2
95933: PPUSH
95934: LD_INT 9
95936: PPUSH
95937: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
95941: LD_INT 28
95943: PPUSH
95944: LD_OWVAR 2
95948: PPUSH
95949: LD_INT 2
95951: PPUSH
95952: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
95956: LD_INT 29
95958: PPUSH
95959: LD_OWVAR 2
95963: PPUSH
95964: LD_INT 2
95966: PPUSH
95967: CALL_OW 322
// end ;
95971: PPOPN 3
95973: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
95974: LD_EXP 130
95978: PUSH
95979: LD_EXP 173
95983: AND
95984: IFFALSE 96095
95986: GO 95988
95988: DISABLE
95989: LD_INT 0
95991: PPUSH
95992: PPUSH
95993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95994: LD_ADDR_VAR 0 3
95998: PUSH
95999: LD_INT 22
96001: PUSH
96002: LD_OWVAR 2
96006: PUSH
96007: EMPTY
96008: LIST
96009: LIST
96010: PUSH
96011: LD_INT 25
96013: PUSH
96014: LD_INT 1
96016: PUSH
96017: EMPTY
96018: LIST
96019: LIST
96020: PUSH
96021: EMPTY
96022: LIST
96023: LIST
96024: PPUSH
96025: CALL_OW 69
96029: ST_TO_ADDR
// if not tmp then
96030: LD_VAR 0 3
96034: NOT
96035: IFFALSE 96039
// exit ;
96037: GO 96095
// un := tmp [ rand ( 1 , tmp ) ] ;
96039: LD_ADDR_VAR 0 2
96043: PUSH
96044: LD_VAR 0 3
96048: PUSH
96049: LD_INT 1
96051: PPUSH
96052: LD_VAR 0 3
96056: PPUSH
96057: CALL_OW 12
96061: ARRAY
96062: ST_TO_ADDR
// if Crawls ( un ) then
96063: LD_VAR 0 2
96067: PPUSH
96068: CALL_OW 318
96072: IFFALSE 96083
// ComWalk ( un ) ;
96074: LD_VAR 0 2
96078: PPUSH
96079: CALL_OW 138
// SetClass ( un , class_mortar ) ;
96083: LD_VAR 0 2
96087: PPUSH
96088: LD_INT 8
96090: PPUSH
96091: CALL_OW 336
// end ;
96095: PPOPN 3
96097: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
96098: LD_EXP 130
96102: PUSH
96103: LD_EXP 174
96107: AND
96108: IFFALSE 96252
96110: GO 96112
96112: DISABLE
96113: LD_INT 0
96115: PPUSH
96116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
96117: LD_ADDR_VAR 0 2
96121: PUSH
96122: LD_INT 22
96124: PUSH
96125: LD_OWVAR 2
96129: PUSH
96130: EMPTY
96131: LIST
96132: LIST
96133: PUSH
96134: LD_INT 21
96136: PUSH
96137: LD_INT 2
96139: PUSH
96140: EMPTY
96141: LIST
96142: LIST
96143: PUSH
96144: LD_INT 2
96146: PUSH
96147: LD_INT 34
96149: PUSH
96150: LD_INT 12
96152: PUSH
96153: EMPTY
96154: LIST
96155: LIST
96156: PUSH
96157: LD_INT 34
96159: PUSH
96160: LD_INT 51
96162: PUSH
96163: EMPTY
96164: LIST
96165: LIST
96166: PUSH
96167: LD_INT 34
96169: PUSH
96170: LD_INT 32
96172: PUSH
96173: EMPTY
96174: LIST
96175: LIST
96176: PUSH
96177: EMPTY
96178: LIST
96179: LIST
96180: LIST
96181: LIST
96182: PUSH
96183: EMPTY
96184: LIST
96185: LIST
96186: LIST
96187: PPUSH
96188: CALL_OW 69
96192: ST_TO_ADDR
// if not tmp then
96193: LD_VAR 0 2
96197: NOT
96198: IFFALSE 96202
// exit ;
96200: GO 96252
// for i in tmp do
96202: LD_ADDR_VAR 0 1
96206: PUSH
96207: LD_VAR 0 2
96211: PUSH
96212: FOR_IN
96213: IFFALSE 96250
// if GetCargo ( i , mat_artifact ) = 0 then
96215: LD_VAR 0 1
96219: PPUSH
96220: LD_INT 4
96222: PPUSH
96223: CALL_OW 289
96227: PUSH
96228: LD_INT 0
96230: EQUAL
96231: IFFALSE 96248
// SetCargo ( i , mat_siberit , 100 ) ;
96233: LD_VAR 0 1
96237: PPUSH
96238: LD_INT 3
96240: PPUSH
96241: LD_INT 100
96243: PPUSH
96244: CALL_OW 290
96248: GO 96212
96250: POP
96251: POP
// end ;
96252: PPOPN 2
96254: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
96255: LD_EXP 130
96259: PUSH
96260: LD_EXP 175
96264: AND
96265: IFFALSE 96418
96267: GO 96269
96269: DISABLE
96270: LD_INT 0
96272: PPUSH
96273: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
96274: LD_ADDR_VAR 0 2
96278: PUSH
96279: LD_INT 22
96281: PUSH
96282: LD_OWVAR 2
96286: PUSH
96287: EMPTY
96288: LIST
96289: LIST
96290: PPUSH
96291: CALL_OW 69
96295: ST_TO_ADDR
// if not tmp then
96296: LD_VAR 0 2
96300: NOT
96301: IFFALSE 96305
// exit ;
96303: GO 96418
// for i := 1 to 2 do
96305: LD_ADDR_VAR 0 1
96309: PUSH
96310: DOUBLE
96311: LD_INT 1
96313: DEC
96314: ST_TO_ADDR
96315: LD_INT 2
96317: PUSH
96318: FOR_TO
96319: IFFALSE 96416
// begin uc_side := your_side ;
96321: LD_ADDR_OWVAR 20
96325: PUSH
96326: LD_OWVAR 2
96330: ST_TO_ADDR
// uc_nation := nation_american ;
96331: LD_ADDR_OWVAR 21
96335: PUSH
96336: LD_INT 1
96338: ST_TO_ADDR
// vc_chassis := us_morphling ;
96339: LD_ADDR_OWVAR 37
96343: PUSH
96344: LD_INT 5
96346: ST_TO_ADDR
// vc_engine := engine_siberite ;
96347: LD_ADDR_OWVAR 39
96351: PUSH
96352: LD_INT 3
96354: ST_TO_ADDR
// vc_control := control_computer ;
96355: LD_ADDR_OWVAR 38
96359: PUSH
96360: LD_INT 3
96362: ST_TO_ADDR
// vc_weapon := us_double_laser ;
96363: LD_ADDR_OWVAR 40
96367: PUSH
96368: LD_INT 10
96370: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
96371: CALL_OW 45
96375: PPUSH
96376: LD_VAR 0 2
96380: PUSH
96381: LD_INT 1
96383: ARRAY
96384: PPUSH
96385: CALL_OW 250
96389: PPUSH
96390: LD_VAR 0 2
96394: PUSH
96395: LD_INT 1
96397: ARRAY
96398: PPUSH
96399: CALL_OW 251
96403: PPUSH
96404: LD_INT 12
96406: PPUSH
96407: LD_INT 1
96409: PPUSH
96410: CALL_OW 50
// end ;
96414: GO 96318
96416: POP
96417: POP
// end ;
96418: PPOPN 2
96420: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
96421: LD_EXP 130
96425: PUSH
96426: LD_EXP 176
96430: AND
96431: IFFALSE 96653
96433: GO 96435
96435: DISABLE
96436: LD_INT 0
96438: PPUSH
96439: PPUSH
96440: PPUSH
96441: PPUSH
96442: PPUSH
96443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96444: LD_ADDR_VAR 0 6
96448: PUSH
96449: LD_INT 22
96451: PUSH
96452: LD_OWVAR 2
96456: PUSH
96457: EMPTY
96458: LIST
96459: LIST
96460: PUSH
96461: LD_INT 21
96463: PUSH
96464: LD_INT 1
96466: PUSH
96467: EMPTY
96468: LIST
96469: LIST
96470: PUSH
96471: LD_INT 3
96473: PUSH
96474: LD_INT 23
96476: PUSH
96477: LD_INT 0
96479: PUSH
96480: EMPTY
96481: LIST
96482: LIST
96483: PUSH
96484: EMPTY
96485: LIST
96486: LIST
96487: PUSH
96488: EMPTY
96489: LIST
96490: LIST
96491: LIST
96492: PPUSH
96493: CALL_OW 69
96497: ST_TO_ADDR
// if not tmp then
96498: LD_VAR 0 6
96502: NOT
96503: IFFALSE 96507
// exit ;
96505: GO 96653
// s1 := rand ( 1 , 4 ) ;
96507: LD_ADDR_VAR 0 2
96511: PUSH
96512: LD_INT 1
96514: PPUSH
96515: LD_INT 4
96517: PPUSH
96518: CALL_OW 12
96522: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
96523: LD_ADDR_VAR 0 4
96527: PUSH
96528: LD_VAR 0 6
96532: PUSH
96533: LD_INT 1
96535: ARRAY
96536: PPUSH
96537: LD_VAR 0 2
96541: PPUSH
96542: CALL_OW 259
96546: ST_TO_ADDR
// if s1 = 1 then
96547: LD_VAR 0 2
96551: PUSH
96552: LD_INT 1
96554: EQUAL
96555: IFFALSE 96575
// s2 := rand ( 2 , 4 ) else
96557: LD_ADDR_VAR 0 3
96561: PUSH
96562: LD_INT 2
96564: PPUSH
96565: LD_INT 4
96567: PPUSH
96568: CALL_OW 12
96572: ST_TO_ADDR
96573: GO 96583
// s2 := 1 ;
96575: LD_ADDR_VAR 0 3
96579: PUSH
96580: LD_INT 1
96582: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
96583: LD_ADDR_VAR 0 5
96587: PUSH
96588: LD_VAR 0 6
96592: PUSH
96593: LD_INT 1
96595: ARRAY
96596: PPUSH
96597: LD_VAR 0 3
96601: PPUSH
96602: CALL_OW 259
96606: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
96607: LD_VAR 0 6
96611: PUSH
96612: LD_INT 1
96614: ARRAY
96615: PPUSH
96616: LD_VAR 0 2
96620: PPUSH
96621: LD_VAR 0 5
96625: PPUSH
96626: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
96630: LD_VAR 0 6
96634: PUSH
96635: LD_INT 1
96637: ARRAY
96638: PPUSH
96639: LD_VAR 0 3
96643: PPUSH
96644: LD_VAR 0 4
96648: PPUSH
96649: CALL_OW 237
// end ;
96653: PPOPN 6
96655: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
96656: LD_EXP 130
96660: PUSH
96661: LD_EXP 177
96665: AND
96666: IFFALSE 96745
96668: GO 96670
96670: DISABLE
96671: LD_INT 0
96673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
96674: LD_ADDR_VAR 0 1
96678: PUSH
96679: LD_INT 22
96681: PUSH
96682: LD_OWVAR 2
96686: PUSH
96687: EMPTY
96688: LIST
96689: LIST
96690: PUSH
96691: LD_INT 30
96693: PUSH
96694: LD_INT 3
96696: PUSH
96697: EMPTY
96698: LIST
96699: LIST
96700: PUSH
96701: EMPTY
96702: LIST
96703: LIST
96704: PPUSH
96705: CALL_OW 69
96709: ST_TO_ADDR
// if not tmp then
96710: LD_VAR 0 1
96714: NOT
96715: IFFALSE 96719
// exit ;
96717: GO 96745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
96719: LD_VAR 0 1
96723: PUSH
96724: LD_INT 1
96726: PPUSH
96727: LD_VAR 0 1
96731: PPUSH
96732: CALL_OW 12
96736: ARRAY
96737: PPUSH
96738: LD_INT 1
96740: PPUSH
96741: CALL_OW 234
// end ;
96745: PPOPN 1
96747: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
96748: LD_EXP 130
96752: PUSH
96753: LD_EXP 178
96757: AND
96758: IFFALSE 96870
96760: GO 96762
96762: DISABLE
96763: LD_INT 0
96765: PPUSH
96766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
96767: LD_ADDR_VAR 0 2
96771: PUSH
96772: LD_INT 22
96774: PUSH
96775: LD_OWVAR 2
96779: PUSH
96780: EMPTY
96781: LIST
96782: LIST
96783: PUSH
96784: LD_INT 2
96786: PUSH
96787: LD_INT 30
96789: PUSH
96790: LD_INT 27
96792: PUSH
96793: EMPTY
96794: LIST
96795: LIST
96796: PUSH
96797: LD_INT 30
96799: PUSH
96800: LD_INT 26
96802: PUSH
96803: EMPTY
96804: LIST
96805: LIST
96806: PUSH
96807: LD_INT 30
96809: PUSH
96810: LD_INT 28
96812: PUSH
96813: EMPTY
96814: LIST
96815: LIST
96816: PUSH
96817: EMPTY
96818: LIST
96819: LIST
96820: LIST
96821: LIST
96822: PUSH
96823: EMPTY
96824: LIST
96825: LIST
96826: PPUSH
96827: CALL_OW 69
96831: ST_TO_ADDR
// if not tmp then
96832: LD_VAR 0 2
96836: NOT
96837: IFFALSE 96841
// exit ;
96839: GO 96870
// for i in tmp do
96841: LD_ADDR_VAR 0 1
96845: PUSH
96846: LD_VAR 0 2
96850: PUSH
96851: FOR_IN
96852: IFFALSE 96868
// SetLives ( i , 1 ) ;
96854: LD_VAR 0 1
96858: PPUSH
96859: LD_INT 1
96861: PPUSH
96862: CALL_OW 234
96866: GO 96851
96868: POP
96869: POP
// end ;
96870: PPOPN 2
96872: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
96873: LD_EXP 130
96877: PUSH
96878: LD_EXP 179
96882: AND
96883: IFFALSE 97157
96885: GO 96887
96887: DISABLE
96888: LD_INT 0
96890: PPUSH
96891: PPUSH
96892: PPUSH
// begin i := rand ( 1 , 7 ) ;
96893: LD_ADDR_VAR 0 1
96897: PUSH
96898: LD_INT 1
96900: PPUSH
96901: LD_INT 7
96903: PPUSH
96904: CALL_OW 12
96908: ST_TO_ADDR
// case i of 1 :
96909: LD_VAR 0 1
96913: PUSH
96914: LD_INT 1
96916: DOUBLE
96917: EQUAL
96918: IFTRUE 96922
96920: GO 96932
96922: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
96923: LD_STRING earthquake(getX(game), 0, 32)
96925: PPUSH
96926: CALL_OW 559
96930: GO 97157
96932: LD_INT 2
96934: DOUBLE
96935: EQUAL
96936: IFTRUE 96940
96938: GO 96954
96940: POP
// begin ToLua ( displayStucuk(); ) ;
96941: LD_STRING displayStucuk();
96943: PPUSH
96944: CALL_OW 559
// ResetFog ;
96948: CALL_OW 335
// end ; 3 :
96952: GO 97157
96954: LD_INT 3
96956: DOUBLE
96957: EQUAL
96958: IFTRUE 96962
96960: GO 97066
96962: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96963: LD_ADDR_VAR 0 2
96967: PUSH
96968: LD_INT 22
96970: PUSH
96971: LD_OWVAR 2
96975: PUSH
96976: EMPTY
96977: LIST
96978: LIST
96979: PUSH
96980: LD_INT 25
96982: PUSH
96983: LD_INT 1
96985: PUSH
96986: EMPTY
96987: LIST
96988: LIST
96989: PUSH
96990: EMPTY
96991: LIST
96992: LIST
96993: PPUSH
96994: CALL_OW 69
96998: ST_TO_ADDR
// if not tmp then
96999: LD_VAR 0 2
97003: NOT
97004: IFFALSE 97008
// exit ;
97006: GO 97157
// un := tmp [ rand ( 1 , tmp ) ] ;
97008: LD_ADDR_VAR 0 3
97012: PUSH
97013: LD_VAR 0 2
97017: PUSH
97018: LD_INT 1
97020: PPUSH
97021: LD_VAR 0 2
97025: PPUSH
97026: CALL_OW 12
97030: ARRAY
97031: ST_TO_ADDR
// if Crawls ( un ) then
97032: LD_VAR 0 3
97036: PPUSH
97037: CALL_OW 318
97041: IFFALSE 97052
// ComWalk ( un ) ;
97043: LD_VAR 0 3
97047: PPUSH
97048: CALL_OW 138
// SetClass ( un , class_mortar ) ;
97052: LD_VAR 0 3
97056: PPUSH
97057: LD_INT 8
97059: PPUSH
97060: CALL_OW 336
// end ; 4 :
97064: GO 97157
97066: LD_INT 4
97068: DOUBLE
97069: EQUAL
97070: IFTRUE 97074
97072: GO 97135
97074: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
97075: LD_ADDR_VAR 0 2
97079: PUSH
97080: LD_INT 22
97082: PUSH
97083: LD_OWVAR 2
97087: PUSH
97088: EMPTY
97089: LIST
97090: LIST
97091: PUSH
97092: LD_INT 30
97094: PUSH
97095: LD_INT 29
97097: PUSH
97098: EMPTY
97099: LIST
97100: LIST
97101: PUSH
97102: EMPTY
97103: LIST
97104: LIST
97105: PPUSH
97106: CALL_OW 69
97110: ST_TO_ADDR
// if not tmp then
97111: LD_VAR 0 2
97115: NOT
97116: IFFALSE 97120
// exit ;
97118: GO 97157
// DestroyUnit ( tmp [ 1 ] ) ;
97120: LD_VAR 0 2
97124: PUSH
97125: LD_INT 1
97127: ARRAY
97128: PPUSH
97129: CALL_OW 65
// end ; 5 .. 7 :
97133: GO 97157
97135: LD_INT 5
97137: DOUBLE
97138: GREATEREQUAL
97139: IFFALSE 97147
97141: LD_INT 7
97143: DOUBLE
97144: LESSEQUAL
97145: IFTRUE 97149
97147: GO 97156
97149: POP
// StreamSibBomb ; end ;
97150: CALL 93437 0 0
97154: GO 97157
97156: POP
// end ;
97157: PPOPN 3
97159: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
97160: LD_EXP 130
97164: PUSH
97165: LD_EXP 180
97169: AND
97170: IFFALSE 97326
97172: GO 97174
97174: DISABLE
97175: LD_INT 0
97177: PPUSH
97178: PPUSH
97179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
97180: LD_ADDR_VAR 0 2
97184: PUSH
97185: LD_INT 81
97187: PUSH
97188: LD_OWVAR 2
97192: PUSH
97193: EMPTY
97194: LIST
97195: LIST
97196: PUSH
97197: LD_INT 2
97199: PUSH
97200: LD_INT 21
97202: PUSH
97203: LD_INT 1
97205: PUSH
97206: EMPTY
97207: LIST
97208: LIST
97209: PUSH
97210: LD_INT 21
97212: PUSH
97213: LD_INT 2
97215: PUSH
97216: EMPTY
97217: LIST
97218: LIST
97219: PUSH
97220: EMPTY
97221: LIST
97222: LIST
97223: LIST
97224: PUSH
97225: EMPTY
97226: LIST
97227: LIST
97228: PPUSH
97229: CALL_OW 69
97233: ST_TO_ADDR
// if not tmp then
97234: LD_VAR 0 2
97238: NOT
97239: IFFALSE 97243
// exit ;
97241: GO 97326
// p := 0 ;
97243: LD_ADDR_VAR 0 3
97247: PUSH
97248: LD_INT 0
97250: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
97251: LD_INT 35
97253: PPUSH
97254: CALL_OW 67
// p := p + 1 ;
97258: LD_ADDR_VAR 0 3
97262: PUSH
97263: LD_VAR 0 3
97267: PUSH
97268: LD_INT 1
97270: PLUS
97271: ST_TO_ADDR
// for i in tmp do
97272: LD_ADDR_VAR 0 1
97276: PUSH
97277: LD_VAR 0 2
97281: PUSH
97282: FOR_IN
97283: IFFALSE 97314
// if GetLives ( i ) < 1000 then
97285: LD_VAR 0 1
97289: PPUSH
97290: CALL_OW 256
97294: PUSH
97295: LD_INT 1000
97297: LESS
97298: IFFALSE 97312
// SetLives ( i , 1000 ) ;
97300: LD_VAR 0 1
97304: PPUSH
97305: LD_INT 1000
97307: PPUSH
97308: CALL_OW 234
97312: GO 97282
97314: POP
97315: POP
// until p > 20 ;
97316: LD_VAR 0 3
97320: PUSH
97321: LD_INT 20
97323: GREATER
97324: IFFALSE 97251
// end ;
97326: PPOPN 3
97328: END
// every 0 0$1 trigger StreamModeActive and sTime do
97329: LD_EXP 130
97333: PUSH
97334: LD_EXP 181
97338: AND
97339: IFFALSE 97374
97341: GO 97343
97343: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
97344: LD_INT 28
97346: PPUSH
97347: LD_OWVAR 2
97351: PPUSH
97352: LD_INT 2
97354: PPUSH
97355: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
97359: LD_INT 30
97361: PPUSH
97362: LD_OWVAR 2
97366: PPUSH
97367: LD_INT 2
97369: PPUSH
97370: CALL_OW 322
// end ;
97374: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
97375: LD_EXP 130
97379: PUSH
97380: LD_EXP 182
97384: AND
97385: IFFALSE 97506
97387: GO 97389
97389: DISABLE
97390: LD_INT 0
97392: PPUSH
97393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
97394: LD_ADDR_VAR 0 2
97398: PUSH
97399: LD_INT 22
97401: PUSH
97402: LD_OWVAR 2
97406: PUSH
97407: EMPTY
97408: LIST
97409: LIST
97410: PUSH
97411: LD_INT 21
97413: PUSH
97414: LD_INT 1
97416: PUSH
97417: EMPTY
97418: LIST
97419: LIST
97420: PUSH
97421: LD_INT 3
97423: PUSH
97424: LD_INT 23
97426: PUSH
97427: LD_INT 0
97429: PUSH
97430: EMPTY
97431: LIST
97432: LIST
97433: PUSH
97434: EMPTY
97435: LIST
97436: LIST
97437: PUSH
97438: EMPTY
97439: LIST
97440: LIST
97441: LIST
97442: PPUSH
97443: CALL_OW 69
97447: ST_TO_ADDR
// if not tmp then
97448: LD_VAR 0 2
97452: NOT
97453: IFFALSE 97457
// exit ;
97455: GO 97506
// for i in tmp do
97457: LD_ADDR_VAR 0 1
97461: PUSH
97462: LD_VAR 0 2
97466: PUSH
97467: FOR_IN
97468: IFFALSE 97504
// begin if Crawls ( i ) then
97470: LD_VAR 0 1
97474: PPUSH
97475: CALL_OW 318
97479: IFFALSE 97490
// ComWalk ( i ) ;
97481: LD_VAR 0 1
97485: PPUSH
97486: CALL_OW 138
// SetClass ( i , 2 ) ;
97490: LD_VAR 0 1
97494: PPUSH
97495: LD_INT 2
97497: PPUSH
97498: CALL_OW 336
// end ;
97502: GO 97467
97504: POP
97505: POP
// end ;
97506: PPOPN 2
97508: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
97509: LD_EXP 130
97513: PUSH
97514: LD_EXP 183
97518: AND
97519: IFFALSE 97800
97521: GO 97523
97523: DISABLE
97524: LD_INT 0
97526: PPUSH
97527: PPUSH
97528: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
97529: LD_OWVAR 2
97533: PPUSH
97534: LD_INT 9
97536: PPUSH
97537: LD_INT 1
97539: PPUSH
97540: LD_INT 1
97542: PPUSH
97543: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
97547: LD_INT 9
97549: PPUSH
97550: LD_OWVAR 2
97554: PPUSH
97555: CALL_OW 343
// uc_side := 9 ;
97559: LD_ADDR_OWVAR 20
97563: PUSH
97564: LD_INT 9
97566: ST_TO_ADDR
// uc_nation := 2 ;
97567: LD_ADDR_OWVAR 21
97571: PUSH
97572: LD_INT 2
97574: ST_TO_ADDR
// hc_name := Dark Warrior ;
97575: LD_ADDR_OWVAR 26
97579: PUSH
97580: LD_STRING Dark Warrior
97582: ST_TO_ADDR
// hc_gallery :=  ;
97583: LD_ADDR_OWVAR 33
97587: PUSH
97588: LD_STRING 
97590: ST_TO_ADDR
// hc_noskilllimit := true ;
97591: LD_ADDR_OWVAR 76
97595: PUSH
97596: LD_INT 1
97598: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
97599: LD_ADDR_OWVAR 31
97603: PUSH
97604: LD_INT 30
97606: PUSH
97607: LD_INT 30
97609: PUSH
97610: LD_INT 30
97612: PUSH
97613: LD_INT 30
97615: PUSH
97616: EMPTY
97617: LIST
97618: LIST
97619: LIST
97620: LIST
97621: ST_TO_ADDR
// un := CreateHuman ;
97622: LD_ADDR_VAR 0 3
97626: PUSH
97627: CALL_OW 44
97631: ST_TO_ADDR
// hc_noskilllimit := false ;
97632: LD_ADDR_OWVAR 76
97636: PUSH
97637: LD_INT 0
97639: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
97640: LD_VAR 0 3
97644: PPUSH
97645: LD_INT 1
97647: PPUSH
97648: CALL_OW 51
// p := 0 ;
97652: LD_ADDR_VAR 0 2
97656: PUSH
97657: LD_INT 0
97659: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
97660: LD_INT 35
97662: PPUSH
97663: CALL_OW 67
// p := p + 1 ;
97667: LD_ADDR_VAR 0 2
97671: PUSH
97672: LD_VAR 0 2
97676: PUSH
97677: LD_INT 1
97679: PLUS
97680: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
97681: LD_VAR 0 3
97685: PPUSH
97686: CALL_OW 256
97690: PUSH
97691: LD_INT 1000
97693: LESS
97694: IFFALSE 97708
// SetLives ( un , 1000 ) ;
97696: LD_VAR 0 3
97700: PPUSH
97701: LD_INT 1000
97703: PPUSH
97704: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
97708: LD_VAR 0 3
97712: PPUSH
97713: LD_INT 81
97715: PUSH
97716: LD_OWVAR 2
97720: PUSH
97721: EMPTY
97722: LIST
97723: LIST
97724: PUSH
97725: LD_INT 91
97727: PUSH
97728: LD_VAR 0 3
97732: PUSH
97733: LD_INT 30
97735: PUSH
97736: EMPTY
97737: LIST
97738: LIST
97739: LIST
97740: PUSH
97741: EMPTY
97742: LIST
97743: LIST
97744: PPUSH
97745: CALL_OW 69
97749: PPUSH
97750: LD_VAR 0 3
97754: PPUSH
97755: CALL_OW 74
97759: PPUSH
97760: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
97764: LD_VAR 0 2
97768: PUSH
97769: LD_INT 60
97771: GREATER
97772: PUSH
97773: LD_VAR 0 3
97777: PPUSH
97778: CALL_OW 301
97782: OR
97783: IFFALSE 97660
// if un then
97785: LD_VAR 0 3
97789: IFFALSE 97800
// RemoveUnit ( un ) ;
97791: LD_VAR 0 3
97795: PPUSH
97796: CALL_OW 64
// end ; end_of_file
97800: PPOPN 3
97802: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
97803: LD_INT 0
97805: PPUSH
97806: PPUSH
97807: PPUSH
97808: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
97809: LD_VAR 0 1
97813: PPUSH
97814: CALL_OW 264
97818: PUSH
97819: LD_EXP 76
97823: EQUAL
97824: IFFALSE 97896
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
97826: LD_INT 68
97828: PPUSH
97829: LD_VAR 0 1
97833: PPUSH
97834: CALL_OW 255
97838: PPUSH
97839: CALL_OW 321
97843: PUSH
97844: LD_INT 2
97846: EQUAL
97847: IFFALSE 97859
// eff := 70 else
97849: LD_ADDR_VAR 0 4
97853: PUSH
97854: LD_INT 70
97856: ST_TO_ADDR
97857: GO 97867
// eff := 30 ;
97859: LD_ADDR_VAR 0 4
97863: PUSH
97864: LD_INT 30
97866: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
97867: LD_VAR 0 1
97871: PPUSH
97872: CALL_OW 250
97876: PPUSH
97877: LD_VAR 0 1
97881: PPUSH
97882: CALL_OW 251
97886: PPUSH
97887: LD_VAR 0 4
97891: PPUSH
97892: CALL_OW 495
// end ; end ;
97896: LD_VAR 0 2
97900: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
97901: LD_INT 0
97903: PPUSH
// end ;
97904: LD_VAR 0 4
97908: RET
// export function SOS_Command ( cmd ) ; begin
97909: LD_INT 0
97911: PPUSH
// end ;
97912: LD_VAR 0 2
97916: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
97917: LD_VAR 0 1
97921: PUSH
97922: LD_INT 255
97924: EQUAL
97925: PUSH
97926: LD_VAR 0 2
97930: PPUSH
97931: CALL_OW 264
97935: PUSH
97936: LD_INT 14
97938: PUSH
97939: LD_INT 53
97941: PUSH
97942: EMPTY
97943: LIST
97944: LIST
97945: IN
97946: AND
97947: PUSH
97948: LD_VAR 0 4
97952: PPUSH
97953: LD_VAR 0 5
97957: PPUSH
97958: CALL_OW 488
97962: AND
97963: IFFALSE 97987
// CutTreeXYR ( unit , x , y , 12 ) ;
97965: LD_VAR 0 2
97969: PPUSH
97970: LD_VAR 0 4
97974: PPUSH
97975: LD_VAR 0 5
97979: PPUSH
97980: LD_INT 12
97982: PPUSH
97983: CALL 97990 0 4
// end ;
97987: PPOPN 5
97989: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
97990: LD_INT 0
97992: PPUSH
97993: PPUSH
97994: PPUSH
97995: PPUSH
97996: PPUSH
97997: PPUSH
97998: PPUSH
97999: PPUSH
98000: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
98001: LD_VAR 0 1
98005: NOT
98006: PUSH
98007: LD_VAR 0 2
98011: PPUSH
98012: LD_VAR 0 3
98016: PPUSH
98017: CALL_OW 488
98021: NOT
98022: OR
98023: PUSH
98024: LD_VAR 0 4
98028: NOT
98029: OR
98030: IFFALSE 98034
// exit ;
98032: GO 98374
// list := [ ] ;
98034: LD_ADDR_VAR 0 13
98038: PUSH
98039: EMPTY
98040: ST_TO_ADDR
// if x - r < 0 then
98041: LD_VAR 0 2
98045: PUSH
98046: LD_VAR 0 4
98050: MINUS
98051: PUSH
98052: LD_INT 0
98054: LESS
98055: IFFALSE 98067
// min_x := 0 else
98057: LD_ADDR_VAR 0 7
98061: PUSH
98062: LD_INT 0
98064: ST_TO_ADDR
98065: GO 98083
// min_x := x - r ;
98067: LD_ADDR_VAR 0 7
98071: PUSH
98072: LD_VAR 0 2
98076: PUSH
98077: LD_VAR 0 4
98081: MINUS
98082: ST_TO_ADDR
// if y - r < 0 then
98083: LD_VAR 0 3
98087: PUSH
98088: LD_VAR 0 4
98092: MINUS
98093: PUSH
98094: LD_INT 0
98096: LESS
98097: IFFALSE 98109
// min_y := 0 else
98099: LD_ADDR_VAR 0 8
98103: PUSH
98104: LD_INT 0
98106: ST_TO_ADDR
98107: GO 98125
// min_y := y - r ;
98109: LD_ADDR_VAR 0 8
98113: PUSH
98114: LD_VAR 0 3
98118: PUSH
98119: LD_VAR 0 4
98123: MINUS
98124: ST_TO_ADDR
// max_x := x + r ;
98125: LD_ADDR_VAR 0 9
98129: PUSH
98130: LD_VAR 0 2
98134: PUSH
98135: LD_VAR 0 4
98139: PLUS
98140: ST_TO_ADDR
// max_y := y + r ;
98141: LD_ADDR_VAR 0 10
98145: PUSH
98146: LD_VAR 0 3
98150: PUSH
98151: LD_VAR 0 4
98155: PLUS
98156: ST_TO_ADDR
// for _x = min_x to max_x do
98157: LD_ADDR_VAR 0 11
98161: PUSH
98162: DOUBLE
98163: LD_VAR 0 7
98167: DEC
98168: ST_TO_ADDR
98169: LD_VAR 0 9
98173: PUSH
98174: FOR_TO
98175: IFFALSE 98292
// for _y = min_y to max_y do
98177: LD_ADDR_VAR 0 12
98181: PUSH
98182: DOUBLE
98183: LD_VAR 0 8
98187: DEC
98188: ST_TO_ADDR
98189: LD_VAR 0 10
98193: PUSH
98194: FOR_TO
98195: IFFALSE 98288
// begin if not ValidHex ( _x , _y ) then
98197: LD_VAR 0 11
98201: PPUSH
98202: LD_VAR 0 12
98206: PPUSH
98207: CALL_OW 488
98211: NOT
98212: IFFALSE 98216
// continue ;
98214: GO 98194
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
98216: LD_VAR 0 11
98220: PPUSH
98221: LD_VAR 0 12
98225: PPUSH
98226: CALL_OW 351
98230: PUSH
98231: LD_VAR 0 11
98235: PPUSH
98236: LD_VAR 0 12
98240: PPUSH
98241: CALL_OW 554
98245: AND
98246: IFFALSE 98286
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
98248: LD_ADDR_VAR 0 13
98252: PUSH
98253: LD_VAR 0 13
98257: PPUSH
98258: LD_VAR 0 13
98262: PUSH
98263: LD_INT 1
98265: PLUS
98266: PPUSH
98267: LD_VAR 0 11
98271: PUSH
98272: LD_VAR 0 12
98276: PUSH
98277: EMPTY
98278: LIST
98279: LIST
98280: PPUSH
98281: CALL_OW 2
98285: ST_TO_ADDR
// end ;
98286: GO 98194
98288: POP
98289: POP
98290: GO 98174
98292: POP
98293: POP
// if not list then
98294: LD_VAR 0 13
98298: NOT
98299: IFFALSE 98303
// exit ;
98301: GO 98374
// for i in list do
98303: LD_ADDR_VAR 0 6
98307: PUSH
98308: LD_VAR 0 13
98312: PUSH
98313: FOR_IN
98314: IFFALSE 98372
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
98316: LD_VAR 0 1
98320: PPUSH
98321: LD_STRING M
98323: PUSH
98324: LD_VAR 0 6
98328: PUSH
98329: LD_INT 1
98331: ARRAY
98332: PUSH
98333: LD_VAR 0 6
98337: PUSH
98338: LD_INT 2
98340: ARRAY
98341: PUSH
98342: LD_INT 0
98344: PUSH
98345: LD_INT 0
98347: PUSH
98348: LD_INT 0
98350: PUSH
98351: LD_INT 0
98353: PUSH
98354: EMPTY
98355: LIST
98356: LIST
98357: LIST
98358: LIST
98359: LIST
98360: LIST
98361: LIST
98362: PUSH
98363: EMPTY
98364: LIST
98365: PPUSH
98366: CALL_OW 447
98370: GO 98313
98372: POP
98373: POP
// end ; end_of_file
98374: LD_VAR 0 5
98378: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
98379: LD_INT 0
98381: PPUSH
98382: PPUSH
98383: PPUSH
98384: PPUSH
98385: PPUSH
98386: PPUSH
98387: PPUSH
98388: PPUSH
98389: PPUSH
98390: PPUSH
98391: PPUSH
98392: PPUSH
98393: PPUSH
98394: PPUSH
98395: PPUSH
98396: PPUSH
98397: PPUSH
98398: PPUSH
98399: PPUSH
98400: PPUSH
98401: PPUSH
98402: PPUSH
98403: PPUSH
98404: PPUSH
98405: PPUSH
98406: PPUSH
98407: PPUSH
98408: PPUSH
98409: PPUSH
98410: PPUSH
98411: PPUSH
98412: PPUSH
98413: PPUSH
98414: PPUSH
// if not list then
98415: LD_VAR 0 1
98419: NOT
98420: IFFALSE 98424
// exit ;
98422: GO 103083
// base := list [ 1 ] ;
98424: LD_ADDR_VAR 0 3
98428: PUSH
98429: LD_VAR 0 1
98433: PUSH
98434: LD_INT 1
98436: ARRAY
98437: ST_TO_ADDR
// group := list [ 2 ] ;
98438: LD_ADDR_VAR 0 4
98442: PUSH
98443: LD_VAR 0 1
98447: PUSH
98448: LD_INT 2
98450: ARRAY
98451: ST_TO_ADDR
// path := list [ 3 ] ;
98452: LD_ADDR_VAR 0 5
98456: PUSH
98457: LD_VAR 0 1
98461: PUSH
98462: LD_INT 3
98464: ARRAY
98465: ST_TO_ADDR
// flags := list [ 4 ] ;
98466: LD_ADDR_VAR 0 6
98470: PUSH
98471: LD_VAR 0 1
98475: PUSH
98476: LD_INT 4
98478: ARRAY
98479: ST_TO_ADDR
// mined := [ ] ;
98480: LD_ADDR_VAR 0 27
98484: PUSH
98485: EMPTY
98486: ST_TO_ADDR
// bombed := [ ] ;
98487: LD_ADDR_VAR 0 28
98491: PUSH
98492: EMPTY
98493: ST_TO_ADDR
// healers := [ ] ;
98494: LD_ADDR_VAR 0 31
98498: PUSH
98499: EMPTY
98500: ST_TO_ADDR
// to_heal := [ ] ;
98501: LD_ADDR_VAR 0 30
98505: PUSH
98506: EMPTY
98507: ST_TO_ADDR
// repairs := [ ] ;
98508: LD_ADDR_VAR 0 33
98512: PUSH
98513: EMPTY
98514: ST_TO_ADDR
// to_repair := [ ] ;
98515: LD_ADDR_VAR 0 32
98519: PUSH
98520: EMPTY
98521: ST_TO_ADDR
// if not group or not path then
98522: LD_VAR 0 4
98526: NOT
98527: PUSH
98528: LD_VAR 0 5
98532: NOT
98533: OR
98534: IFFALSE 98538
// exit ;
98536: GO 103083
// side := GetSide ( group [ 1 ] ) ;
98538: LD_ADDR_VAR 0 35
98542: PUSH
98543: LD_VAR 0 4
98547: PUSH
98548: LD_INT 1
98550: ARRAY
98551: PPUSH
98552: CALL_OW 255
98556: ST_TO_ADDR
// if flags then
98557: LD_VAR 0 6
98561: IFFALSE 98705
// begin f_ignore_area := flags [ 1 ] ;
98563: LD_ADDR_VAR 0 17
98567: PUSH
98568: LD_VAR 0 6
98572: PUSH
98573: LD_INT 1
98575: ARRAY
98576: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
98577: LD_ADDR_VAR 0 18
98581: PUSH
98582: LD_VAR 0 6
98586: PUSH
98587: LD_INT 2
98589: ARRAY
98590: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
98591: LD_ADDR_VAR 0 19
98595: PUSH
98596: LD_VAR 0 6
98600: PUSH
98601: LD_INT 3
98603: ARRAY
98604: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
98605: LD_ADDR_VAR 0 20
98609: PUSH
98610: LD_VAR 0 6
98614: PUSH
98615: LD_INT 4
98617: ARRAY
98618: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
98619: LD_ADDR_VAR 0 21
98623: PUSH
98624: LD_VAR 0 6
98628: PUSH
98629: LD_INT 5
98631: ARRAY
98632: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
98633: LD_ADDR_VAR 0 22
98637: PUSH
98638: LD_VAR 0 6
98642: PUSH
98643: LD_INT 6
98645: ARRAY
98646: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
98647: LD_ADDR_VAR 0 23
98651: PUSH
98652: LD_VAR 0 6
98656: PUSH
98657: LD_INT 7
98659: ARRAY
98660: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
98661: LD_ADDR_VAR 0 24
98665: PUSH
98666: LD_VAR 0 6
98670: PUSH
98671: LD_INT 8
98673: ARRAY
98674: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
98675: LD_ADDR_VAR 0 25
98679: PUSH
98680: LD_VAR 0 6
98684: PUSH
98685: LD_INT 9
98687: ARRAY
98688: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
98689: LD_ADDR_VAR 0 26
98693: PUSH
98694: LD_VAR 0 6
98698: PUSH
98699: LD_INT 10
98701: ARRAY
98702: ST_TO_ADDR
// end else
98703: GO 98785
// begin f_ignore_area := false ;
98705: LD_ADDR_VAR 0 17
98709: PUSH
98710: LD_INT 0
98712: ST_TO_ADDR
// f_capture := false ;
98713: LD_ADDR_VAR 0 18
98717: PUSH
98718: LD_INT 0
98720: ST_TO_ADDR
// f_ignore_civ := false ;
98721: LD_ADDR_VAR 0 19
98725: PUSH
98726: LD_INT 0
98728: ST_TO_ADDR
// f_murder := false ;
98729: LD_ADDR_VAR 0 20
98733: PUSH
98734: LD_INT 0
98736: ST_TO_ADDR
// f_mines := false ;
98737: LD_ADDR_VAR 0 21
98741: PUSH
98742: LD_INT 0
98744: ST_TO_ADDR
// f_repair := false ;
98745: LD_ADDR_VAR 0 22
98749: PUSH
98750: LD_INT 0
98752: ST_TO_ADDR
// f_heal := false ;
98753: LD_ADDR_VAR 0 23
98757: PUSH
98758: LD_INT 0
98760: ST_TO_ADDR
// f_spacetime := false ;
98761: LD_ADDR_VAR 0 24
98765: PUSH
98766: LD_INT 0
98768: ST_TO_ADDR
// f_attack_depot := false ;
98769: LD_ADDR_VAR 0 25
98773: PUSH
98774: LD_INT 0
98776: ST_TO_ADDR
// f_crawl := false ;
98777: LD_ADDR_VAR 0 26
98781: PUSH
98782: LD_INT 0
98784: ST_TO_ADDR
// end ; if f_heal then
98785: LD_VAR 0 23
98789: IFFALSE 98816
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
98791: LD_ADDR_VAR 0 31
98795: PUSH
98796: LD_VAR 0 4
98800: PPUSH
98801: LD_INT 25
98803: PUSH
98804: LD_INT 4
98806: PUSH
98807: EMPTY
98808: LIST
98809: LIST
98810: PPUSH
98811: CALL_OW 72
98815: ST_TO_ADDR
// if f_repair then
98816: LD_VAR 0 22
98820: IFFALSE 98847
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
98822: LD_ADDR_VAR 0 33
98826: PUSH
98827: LD_VAR 0 4
98831: PPUSH
98832: LD_INT 25
98834: PUSH
98835: LD_INT 3
98837: PUSH
98838: EMPTY
98839: LIST
98840: LIST
98841: PPUSH
98842: CALL_OW 72
98846: ST_TO_ADDR
// units_path := [ ] ;
98847: LD_ADDR_VAR 0 16
98851: PUSH
98852: EMPTY
98853: ST_TO_ADDR
// for i = 1 to group do
98854: LD_ADDR_VAR 0 7
98858: PUSH
98859: DOUBLE
98860: LD_INT 1
98862: DEC
98863: ST_TO_ADDR
98864: LD_VAR 0 4
98868: PUSH
98869: FOR_TO
98870: IFFALSE 98899
// units_path := Replace ( units_path , i , path ) ;
98872: LD_ADDR_VAR 0 16
98876: PUSH
98877: LD_VAR 0 16
98881: PPUSH
98882: LD_VAR 0 7
98886: PPUSH
98887: LD_VAR 0 5
98891: PPUSH
98892: CALL_OW 1
98896: ST_TO_ADDR
98897: GO 98869
98899: POP
98900: POP
// repeat for i = group downto 1 do
98901: LD_ADDR_VAR 0 7
98905: PUSH
98906: DOUBLE
98907: LD_VAR 0 4
98911: INC
98912: ST_TO_ADDR
98913: LD_INT 1
98915: PUSH
98916: FOR_DOWNTO
98917: IFFALSE 103039
// begin wait ( 5 ) ;
98919: LD_INT 5
98921: PPUSH
98922: CALL_OW 67
// tmp := [ ] ;
98926: LD_ADDR_VAR 0 14
98930: PUSH
98931: EMPTY
98932: ST_TO_ADDR
// attacking := false ;
98933: LD_ADDR_VAR 0 29
98937: PUSH
98938: LD_INT 0
98940: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
98941: LD_VAR 0 4
98945: PUSH
98946: LD_VAR 0 7
98950: ARRAY
98951: PPUSH
98952: CALL_OW 301
98956: PUSH
98957: LD_VAR 0 4
98961: PUSH
98962: LD_VAR 0 7
98966: ARRAY
98967: NOT
98968: OR
98969: IFFALSE 99078
// begin if GetType ( group [ i ] ) = unit_human then
98971: LD_VAR 0 4
98975: PUSH
98976: LD_VAR 0 7
98980: ARRAY
98981: PPUSH
98982: CALL_OW 247
98986: PUSH
98987: LD_INT 1
98989: EQUAL
98990: IFFALSE 99036
// begin to_heal := to_heal diff group [ i ] ;
98992: LD_ADDR_VAR 0 30
98996: PUSH
98997: LD_VAR 0 30
99001: PUSH
99002: LD_VAR 0 4
99006: PUSH
99007: LD_VAR 0 7
99011: ARRAY
99012: DIFF
99013: ST_TO_ADDR
// healers := healers diff group [ i ] ;
99014: LD_ADDR_VAR 0 31
99018: PUSH
99019: LD_VAR 0 31
99023: PUSH
99024: LD_VAR 0 4
99028: PUSH
99029: LD_VAR 0 7
99033: ARRAY
99034: DIFF
99035: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
99036: LD_ADDR_VAR 0 4
99040: PUSH
99041: LD_VAR 0 4
99045: PPUSH
99046: LD_VAR 0 7
99050: PPUSH
99051: CALL_OW 3
99055: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
99056: LD_ADDR_VAR 0 16
99060: PUSH
99061: LD_VAR 0 16
99065: PPUSH
99066: LD_VAR 0 7
99070: PPUSH
99071: CALL_OW 3
99075: ST_TO_ADDR
// continue ;
99076: GO 98916
// end ; if f_repair then
99078: LD_VAR 0 22
99082: IFFALSE 99571
// begin if GetType ( group [ i ] ) = unit_vehicle then
99084: LD_VAR 0 4
99088: PUSH
99089: LD_VAR 0 7
99093: ARRAY
99094: PPUSH
99095: CALL_OW 247
99099: PUSH
99100: LD_INT 2
99102: EQUAL
99103: IFFALSE 99293
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
99105: LD_VAR 0 4
99109: PUSH
99110: LD_VAR 0 7
99114: ARRAY
99115: PPUSH
99116: CALL_OW 256
99120: PUSH
99121: LD_INT 700
99123: LESS
99124: PUSH
99125: LD_VAR 0 4
99129: PUSH
99130: LD_VAR 0 7
99134: ARRAY
99135: PUSH
99136: LD_VAR 0 32
99140: IN
99141: NOT
99142: AND
99143: IFFALSE 99167
// to_repair := to_repair union group [ i ] ;
99145: LD_ADDR_VAR 0 32
99149: PUSH
99150: LD_VAR 0 32
99154: PUSH
99155: LD_VAR 0 4
99159: PUSH
99160: LD_VAR 0 7
99164: ARRAY
99165: UNION
99166: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
99167: LD_VAR 0 4
99171: PUSH
99172: LD_VAR 0 7
99176: ARRAY
99177: PPUSH
99178: CALL_OW 256
99182: PUSH
99183: LD_INT 1000
99185: EQUAL
99186: PUSH
99187: LD_VAR 0 4
99191: PUSH
99192: LD_VAR 0 7
99196: ARRAY
99197: PUSH
99198: LD_VAR 0 32
99202: IN
99203: AND
99204: IFFALSE 99228
// to_repair := to_repair diff group [ i ] ;
99206: LD_ADDR_VAR 0 32
99210: PUSH
99211: LD_VAR 0 32
99215: PUSH
99216: LD_VAR 0 4
99220: PUSH
99221: LD_VAR 0 7
99225: ARRAY
99226: DIFF
99227: ST_TO_ADDR
// if group [ i ] in to_repair then
99228: LD_VAR 0 4
99232: PUSH
99233: LD_VAR 0 7
99237: ARRAY
99238: PUSH
99239: LD_VAR 0 32
99243: IN
99244: IFFALSE 99291
// begin if not IsInArea ( group [ i ] , f_repair ) then
99246: LD_VAR 0 4
99250: PUSH
99251: LD_VAR 0 7
99255: ARRAY
99256: PPUSH
99257: LD_VAR 0 22
99261: PPUSH
99262: CALL_OW 308
99266: NOT
99267: IFFALSE 99289
// ComMoveToArea ( group [ i ] , f_repair ) ;
99269: LD_VAR 0 4
99273: PUSH
99274: LD_VAR 0 7
99278: ARRAY
99279: PPUSH
99280: LD_VAR 0 22
99284: PPUSH
99285: CALL_OW 113
// continue ;
99289: GO 98916
// end ; end else
99291: GO 99571
// if group [ i ] in repairs then
99293: LD_VAR 0 4
99297: PUSH
99298: LD_VAR 0 7
99302: ARRAY
99303: PUSH
99304: LD_VAR 0 33
99308: IN
99309: IFFALSE 99571
// begin if IsInUnit ( group [ i ] ) then
99311: LD_VAR 0 4
99315: PUSH
99316: LD_VAR 0 7
99320: ARRAY
99321: PPUSH
99322: CALL_OW 310
99326: IFFALSE 99394
// begin z := IsInUnit ( group [ i ] ) ;
99328: LD_ADDR_VAR 0 13
99332: PUSH
99333: LD_VAR 0 4
99337: PUSH
99338: LD_VAR 0 7
99342: ARRAY
99343: PPUSH
99344: CALL_OW 310
99348: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
99349: LD_VAR 0 13
99353: PUSH
99354: LD_VAR 0 32
99358: IN
99359: PUSH
99360: LD_VAR 0 13
99364: PPUSH
99365: LD_VAR 0 22
99369: PPUSH
99370: CALL_OW 308
99374: AND
99375: IFFALSE 99392
// ComExitVehicle ( group [ i ] ) ;
99377: LD_VAR 0 4
99381: PUSH
99382: LD_VAR 0 7
99386: ARRAY
99387: PPUSH
99388: CALL_OW 121
// end else
99392: GO 99571
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
99394: LD_ADDR_VAR 0 13
99398: PUSH
99399: LD_VAR 0 4
99403: PPUSH
99404: LD_INT 95
99406: PUSH
99407: LD_VAR 0 22
99411: PUSH
99412: EMPTY
99413: LIST
99414: LIST
99415: PUSH
99416: LD_INT 58
99418: PUSH
99419: EMPTY
99420: LIST
99421: PUSH
99422: EMPTY
99423: LIST
99424: LIST
99425: PPUSH
99426: CALL_OW 72
99430: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
99431: LD_VAR 0 4
99435: PUSH
99436: LD_VAR 0 7
99440: ARRAY
99441: PPUSH
99442: CALL_OW 314
99446: NOT
99447: IFFALSE 99569
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
99449: LD_ADDR_VAR 0 10
99453: PUSH
99454: LD_VAR 0 13
99458: PPUSH
99459: LD_VAR 0 4
99463: PUSH
99464: LD_VAR 0 7
99468: ARRAY
99469: PPUSH
99470: CALL_OW 74
99474: ST_TO_ADDR
// if not x then
99475: LD_VAR 0 10
99479: NOT
99480: IFFALSE 99484
// continue ;
99482: GO 98916
// if GetLives ( x ) < 1000 then
99484: LD_VAR 0 10
99488: PPUSH
99489: CALL_OW 256
99493: PUSH
99494: LD_INT 1000
99496: LESS
99497: IFFALSE 99521
// ComRepairVehicle ( group [ i ] , x ) else
99499: LD_VAR 0 4
99503: PUSH
99504: LD_VAR 0 7
99508: ARRAY
99509: PPUSH
99510: LD_VAR 0 10
99514: PPUSH
99515: CALL_OW 129
99519: GO 99569
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
99521: LD_VAR 0 23
99525: PUSH
99526: LD_VAR 0 4
99530: PUSH
99531: LD_VAR 0 7
99535: ARRAY
99536: PPUSH
99537: CALL_OW 256
99541: PUSH
99542: LD_INT 1000
99544: LESS
99545: AND
99546: NOT
99547: IFFALSE 99569
// ComEnterUnit ( group [ i ] , x ) ;
99549: LD_VAR 0 4
99553: PUSH
99554: LD_VAR 0 7
99558: ARRAY
99559: PPUSH
99560: LD_VAR 0 10
99564: PPUSH
99565: CALL_OW 120
// end ; continue ;
99569: GO 98916
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
99571: LD_VAR 0 23
99575: PUSH
99576: LD_VAR 0 4
99580: PUSH
99581: LD_VAR 0 7
99585: ARRAY
99586: PPUSH
99587: CALL_OW 247
99591: PUSH
99592: LD_INT 1
99594: EQUAL
99595: AND
99596: IFFALSE 100074
// begin if group [ i ] in healers then
99598: LD_VAR 0 4
99602: PUSH
99603: LD_VAR 0 7
99607: ARRAY
99608: PUSH
99609: LD_VAR 0 31
99613: IN
99614: IFFALSE 99887
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
99616: LD_VAR 0 4
99620: PUSH
99621: LD_VAR 0 7
99625: ARRAY
99626: PPUSH
99627: LD_VAR 0 23
99631: PPUSH
99632: CALL_OW 308
99636: NOT
99637: PUSH
99638: LD_VAR 0 4
99642: PUSH
99643: LD_VAR 0 7
99647: ARRAY
99648: PPUSH
99649: CALL_OW 314
99653: NOT
99654: AND
99655: IFFALSE 99679
// ComMoveToArea ( group [ i ] , f_heal ) else
99657: LD_VAR 0 4
99661: PUSH
99662: LD_VAR 0 7
99666: ARRAY
99667: PPUSH
99668: LD_VAR 0 23
99672: PPUSH
99673: CALL_OW 113
99677: GO 99885
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
99679: LD_VAR 0 4
99683: PUSH
99684: LD_VAR 0 7
99688: ARRAY
99689: PPUSH
99690: CALL 83928 0 1
99694: PPUSH
99695: CALL_OW 256
99699: PUSH
99700: LD_INT 1000
99702: EQUAL
99703: IFFALSE 99722
// ComStop ( group [ i ] ) else
99705: LD_VAR 0 4
99709: PUSH
99710: LD_VAR 0 7
99714: ARRAY
99715: PPUSH
99716: CALL_OW 141
99720: GO 99885
// if not HasTask ( group [ i ] ) and to_heal then
99722: LD_VAR 0 4
99726: PUSH
99727: LD_VAR 0 7
99731: ARRAY
99732: PPUSH
99733: CALL_OW 314
99737: NOT
99738: PUSH
99739: LD_VAR 0 30
99743: AND
99744: IFFALSE 99885
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
99746: LD_ADDR_VAR 0 13
99750: PUSH
99751: LD_VAR 0 30
99755: PPUSH
99756: LD_INT 3
99758: PUSH
99759: LD_INT 54
99761: PUSH
99762: EMPTY
99763: LIST
99764: PUSH
99765: EMPTY
99766: LIST
99767: LIST
99768: PPUSH
99769: CALL_OW 72
99773: PPUSH
99774: LD_VAR 0 4
99778: PUSH
99779: LD_VAR 0 7
99783: ARRAY
99784: PPUSH
99785: CALL_OW 74
99789: ST_TO_ADDR
// if z then
99790: LD_VAR 0 13
99794: IFFALSE 99885
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
99796: LD_INT 91
99798: PUSH
99799: LD_VAR 0 13
99803: PUSH
99804: LD_INT 10
99806: PUSH
99807: EMPTY
99808: LIST
99809: LIST
99810: LIST
99811: PUSH
99812: LD_INT 81
99814: PUSH
99815: LD_VAR 0 13
99819: PPUSH
99820: CALL_OW 255
99824: PUSH
99825: EMPTY
99826: LIST
99827: LIST
99828: PUSH
99829: EMPTY
99830: LIST
99831: LIST
99832: PPUSH
99833: CALL_OW 69
99837: PUSH
99838: LD_INT 0
99840: EQUAL
99841: IFFALSE 99865
// ComHeal ( group [ i ] , z ) else
99843: LD_VAR 0 4
99847: PUSH
99848: LD_VAR 0 7
99852: ARRAY
99853: PPUSH
99854: LD_VAR 0 13
99858: PPUSH
99859: CALL_OW 128
99863: GO 99885
// ComMoveToArea ( group [ i ] , f_heal ) ;
99865: LD_VAR 0 4
99869: PUSH
99870: LD_VAR 0 7
99874: ARRAY
99875: PPUSH
99876: LD_VAR 0 23
99880: PPUSH
99881: CALL_OW 113
// end ; continue ;
99885: GO 98916
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
99887: LD_VAR 0 4
99891: PUSH
99892: LD_VAR 0 7
99896: ARRAY
99897: PPUSH
99898: CALL_OW 256
99902: PUSH
99903: LD_INT 700
99905: LESS
99906: PUSH
99907: LD_VAR 0 4
99911: PUSH
99912: LD_VAR 0 7
99916: ARRAY
99917: PUSH
99918: LD_VAR 0 30
99922: IN
99923: NOT
99924: AND
99925: IFFALSE 99949
// to_heal := to_heal union group [ i ] ;
99927: LD_ADDR_VAR 0 30
99931: PUSH
99932: LD_VAR 0 30
99936: PUSH
99937: LD_VAR 0 4
99941: PUSH
99942: LD_VAR 0 7
99946: ARRAY
99947: UNION
99948: ST_TO_ADDR
// if group [ i ] in to_heal then
99949: LD_VAR 0 4
99953: PUSH
99954: LD_VAR 0 7
99958: ARRAY
99959: PUSH
99960: LD_VAR 0 30
99964: IN
99965: IFFALSE 100074
// begin if GetLives ( group [ i ] ) = 1000 then
99967: LD_VAR 0 4
99971: PUSH
99972: LD_VAR 0 7
99976: ARRAY
99977: PPUSH
99978: CALL_OW 256
99982: PUSH
99983: LD_INT 1000
99985: EQUAL
99986: IFFALSE 100012
// to_heal := to_heal diff group [ i ] else
99988: LD_ADDR_VAR 0 30
99992: PUSH
99993: LD_VAR 0 30
99997: PUSH
99998: LD_VAR 0 4
100002: PUSH
100003: LD_VAR 0 7
100007: ARRAY
100008: DIFF
100009: ST_TO_ADDR
100010: GO 100074
// begin if not IsInArea ( group [ i ] , to_heal ) then
100012: LD_VAR 0 4
100016: PUSH
100017: LD_VAR 0 7
100021: ARRAY
100022: PPUSH
100023: LD_VAR 0 30
100027: PPUSH
100028: CALL_OW 308
100032: NOT
100033: IFFALSE 100057
// ComMoveToArea ( group [ i ] , f_heal ) else
100035: LD_VAR 0 4
100039: PUSH
100040: LD_VAR 0 7
100044: ARRAY
100045: PPUSH
100046: LD_VAR 0 23
100050: PPUSH
100051: CALL_OW 113
100055: GO 100072
// ComHold ( group [ i ] ) ;
100057: LD_VAR 0 4
100061: PUSH
100062: LD_VAR 0 7
100066: ARRAY
100067: PPUSH
100068: CALL_OW 140
// continue ;
100072: GO 98916
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
100074: LD_VAR 0 4
100078: PUSH
100079: LD_VAR 0 7
100083: ARRAY
100084: PPUSH
100085: LD_INT 10
100087: PPUSH
100088: CALL 82348 0 2
100092: NOT
100093: PUSH
100094: LD_VAR 0 16
100098: PUSH
100099: LD_VAR 0 7
100103: ARRAY
100104: PUSH
100105: EMPTY
100106: EQUAL
100107: NOT
100108: AND
100109: IFFALSE 100375
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
100111: LD_VAR 0 4
100115: PUSH
100116: LD_VAR 0 7
100120: ARRAY
100121: PPUSH
100122: CALL_OW 262
100126: PUSH
100127: LD_INT 1
100129: PUSH
100130: LD_INT 2
100132: PUSH
100133: EMPTY
100134: LIST
100135: LIST
100136: IN
100137: IFFALSE 100178
// if GetFuel ( group [ i ] ) < 10 then
100139: LD_VAR 0 4
100143: PUSH
100144: LD_VAR 0 7
100148: ARRAY
100149: PPUSH
100150: CALL_OW 261
100154: PUSH
100155: LD_INT 10
100157: LESS
100158: IFFALSE 100178
// SetFuel ( group [ i ] , 12 ) ;
100160: LD_VAR 0 4
100164: PUSH
100165: LD_VAR 0 7
100169: ARRAY
100170: PPUSH
100171: LD_INT 12
100173: PPUSH
100174: CALL_OW 240
// if units_path [ i ] then
100178: LD_VAR 0 16
100182: PUSH
100183: LD_VAR 0 7
100187: ARRAY
100188: IFFALSE 100373
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
100190: LD_VAR 0 4
100194: PUSH
100195: LD_VAR 0 7
100199: ARRAY
100200: PPUSH
100201: LD_VAR 0 16
100205: PUSH
100206: LD_VAR 0 7
100210: ARRAY
100211: PUSH
100212: LD_INT 1
100214: ARRAY
100215: PUSH
100216: LD_INT 1
100218: ARRAY
100219: PPUSH
100220: LD_VAR 0 16
100224: PUSH
100225: LD_VAR 0 7
100229: ARRAY
100230: PUSH
100231: LD_INT 1
100233: ARRAY
100234: PUSH
100235: LD_INT 2
100237: ARRAY
100238: PPUSH
100239: CALL_OW 297
100243: PUSH
100244: LD_INT 6
100246: GREATER
100247: IFFALSE 100322
// begin if not HasTask ( group [ i ] ) then
100249: LD_VAR 0 4
100253: PUSH
100254: LD_VAR 0 7
100258: ARRAY
100259: PPUSH
100260: CALL_OW 314
100264: NOT
100265: IFFALSE 100320
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
100267: LD_VAR 0 4
100271: PUSH
100272: LD_VAR 0 7
100276: ARRAY
100277: PPUSH
100278: LD_VAR 0 16
100282: PUSH
100283: LD_VAR 0 7
100287: ARRAY
100288: PUSH
100289: LD_INT 1
100291: ARRAY
100292: PUSH
100293: LD_INT 1
100295: ARRAY
100296: PPUSH
100297: LD_VAR 0 16
100301: PUSH
100302: LD_VAR 0 7
100306: ARRAY
100307: PUSH
100308: LD_INT 1
100310: ARRAY
100311: PUSH
100312: LD_INT 2
100314: ARRAY
100315: PPUSH
100316: CALL_OW 114
// end else
100320: GO 100373
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
100322: LD_ADDR_VAR 0 15
100326: PUSH
100327: LD_VAR 0 16
100331: PUSH
100332: LD_VAR 0 7
100336: ARRAY
100337: PPUSH
100338: LD_INT 1
100340: PPUSH
100341: CALL_OW 3
100345: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
100346: LD_ADDR_VAR 0 16
100350: PUSH
100351: LD_VAR 0 16
100355: PPUSH
100356: LD_VAR 0 7
100360: PPUSH
100361: LD_VAR 0 15
100365: PPUSH
100366: CALL_OW 1
100370: ST_TO_ADDR
// continue ;
100371: GO 98916
// end ; end ; end else
100373: GO 103037
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
100375: LD_ADDR_VAR 0 14
100379: PUSH
100380: LD_INT 81
100382: PUSH
100383: LD_VAR 0 4
100387: PUSH
100388: LD_VAR 0 7
100392: ARRAY
100393: PPUSH
100394: CALL_OW 255
100398: PUSH
100399: EMPTY
100400: LIST
100401: LIST
100402: PPUSH
100403: CALL_OW 69
100407: ST_TO_ADDR
// if not tmp then
100408: LD_VAR 0 14
100412: NOT
100413: IFFALSE 100417
// continue ;
100415: GO 98916
// if f_ignore_area then
100417: LD_VAR 0 17
100421: IFFALSE 100509
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
100423: LD_ADDR_VAR 0 15
100427: PUSH
100428: LD_VAR 0 14
100432: PPUSH
100433: LD_INT 3
100435: PUSH
100436: LD_INT 92
100438: PUSH
100439: LD_VAR 0 17
100443: PUSH
100444: LD_INT 1
100446: ARRAY
100447: PUSH
100448: LD_VAR 0 17
100452: PUSH
100453: LD_INT 2
100455: ARRAY
100456: PUSH
100457: LD_VAR 0 17
100461: PUSH
100462: LD_INT 3
100464: ARRAY
100465: PUSH
100466: EMPTY
100467: LIST
100468: LIST
100469: LIST
100470: LIST
100471: PUSH
100472: EMPTY
100473: LIST
100474: LIST
100475: PPUSH
100476: CALL_OW 72
100480: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
100481: LD_VAR 0 14
100485: PUSH
100486: LD_VAR 0 15
100490: DIFF
100491: IFFALSE 100509
// tmp := tmp diff tmp2 ;
100493: LD_ADDR_VAR 0 14
100497: PUSH
100498: LD_VAR 0 14
100502: PUSH
100503: LD_VAR 0 15
100507: DIFF
100508: ST_TO_ADDR
// end ; if not f_murder then
100509: LD_VAR 0 20
100513: NOT
100514: IFFALSE 100572
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
100516: LD_ADDR_VAR 0 15
100520: PUSH
100521: LD_VAR 0 14
100525: PPUSH
100526: LD_INT 3
100528: PUSH
100529: LD_INT 50
100531: PUSH
100532: EMPTY
100533: LIST
100534: PUSH
100535: EMPTY
100536: LIST
100537: LIST
100538: PPUSH
100539: CALL_OW 72
100543: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
100544: LD_VAR 0 14
100548: PUSH
100549: LD_VAR 0 15
100553: DIFF
100554: IFFALSE 100572
// tmp := tmp diff tmp2 ;
100556: LD_ADDR_VAR 0 14
100560: PUSH
100561: LD_VAR 0 14
100565: PUSH
100566: LD_VAR 0 15
100570: DIFF
100571: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
100572: LD_ADDR_VAR 0 14
100576: PUSH
100577: LD_VAR 0 4
100581: PUSH
100582: LD_VAR 0 7
100586: ARRAY
100587: PPUSH
100588: LD_VAR 0 14
100592: PPUSH
100593: LD_INT 1
100595: PPUSH
100596: LD_INT 1
100598: PPUSH
100599: CALL 55991 0 4
100603: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
100604: LD_VAR 0 4
100608: PUSH
100609: LD_VAR 0 7
100613: ARRAY
100614: PPUSH
100615: CALL_OW 257
100619: PUSH
100620: LD_INT 1
100622: EQUAL
100623: IFFALSE 101071
// begin if WantPlant ( group [ i ] ) then
100625: LD_VAR 0 4
100629: PUSH
100630: LD_VAR 0 7
100634: ARRAY
100635: PPUSH
100636: CALL 55492 0 1
100640: IFFALSE 100644
// continue ;
100642: GO 98916
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
100644: LD_VAR 0 18
100648: PUSH
100649: LD_VAR 0 4
100653: PUSH
100654: LD_VAR 0 7
100658: ARRAY
100659: PPUSH
100660: CALL_OW 310
100664: NOT
100665: AND
100666: PUSH
100667: LD_VAR 0 14
100671: PUSH
100672: LD_INT 1
100674: ARRAY
100675: PUSH
100676: LD_VAR 0 14
100680: PPUSH
100681: LD_INT 21
100683: PUSH
100684: LD_INT 2
100686: PUSH
100687: EMPTY
100688: LIST
100689: LIST
100690: PUSH
100691: LD_INT 58
100693: PUSH
100694: EMPTY
100695: LIST
100696: PUSH
100697: EMPTY
100698: LIST
100699: LIST
100700: PPUSH
100701: CALL_OW 72
100705: IN
100706: AND
100707: IFFALSE 100743
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
100709: LD_VAR 0 4
100713: PUSH
100714: LD_VAR 0 7
100718: ARRAY
100719: PPUSH
100720: LD_VAR 0 14
100724: PUSH
100725: LD_INT 1
100727: ARRAY
100728: PPUSH
100729: CALL_OW 120
// attacking := true ;
100733: LD_ADDR_VAR 0 29
100737: PUSH
100738: LD_INT 1
100740: ST_TO_ADDR
// continue ;
100741: GO 98916
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
100743: LD_VAR 0 26
100747: PUSH
100748: LD_VAR 0 4
100752: PUSH
100753: LD_VAR 0 7
100757: ARRAY
100758: PPUSH
100759: CALL_OW 257
100763: PUSH
100764: LD_INT 1
100766: EQUAL
100767: AND
100768: PUSH
100769: LD_VAR 0 4
100773: PUSH
100774: LD_VAR 0 7
100778: ARRAY
100779: PPUSH
100780: CALL_OW 256
100784: PUSH
100785: LD_INT 800
100787: LESS
100788: AND
100789: PUSH
100790: LD_VAR 0 4
100794: PUSH
100795: LD_VAR 0 7
100799: ARRAY
100800: PPUSH
100801: CALL_OW 318
100805: NOT
100806: AND
100807: IFFALSE 100824
// ComCrawl ( group [ i ] ) ;
100809: LD_VAR 0 4
100813: PUSH
100814: LD_VAR 0 7
100818: ARRAY
100819: PPUSH
100820: CALL_OW 137
// if f_mines then
100824: LD_VAR 0 21
100828: IFFALSE 101071
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
100830: LD_VAR 0 14
100834: PUSH
100835: LD_INT 1
100837: ARRAY
100838: PPUSH
100839: CALL_OW 247
100843: PUSH
100844: LD_INT 3
100846: EQUAL
100847: PUSH
100848: LD_VAR 0 14
100852: PUSH
100853: LD_INT 1
100855: ARRAY
100856: PUSH
100857: LD_VAR 0 27
100861: IN
100862: NOT
100863: AND
100864: IFFALSE 101071
// begin x := GetX ( tmp [ 1 ] ) ;
100866: LD_ADDR_VAR 0 10
100870: PUSH
100871: LD_VAR 0 14
100875: PUSH
100876: LD_INT 1
100878: ARRAY
100879: PPUSH
100880: CALL_OW 250
100884: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
100885: LD_ADDR_VAR 0 11
100889: PUSH
100890: LD_VAR 0 14
100894: PUSH
100895: LD_INT 1
100897: ARRAY
100898: PPUSH
100899: CALL_OW 251
100903: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
100904: LD_ADDR_VAR 0 12
100908: PUSH
100909: LD_VAR 0 4
100913: PUSH
100914: LD_VAR 0 7
100918: ARRAY
100919: PPUSH
100920: CALL 82433 0 1
100924: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
100925: LD_VAR 0 4
100929: PUSH
100930: LD_VAR 0 7
100934: ARRAY
100935: PPUSH
100936: LD_VAR 0 10
100940: PPUSH
100941: LD_VAR 0 11
100945: PPUSH
100946: LD_VAR 0 14
100950: PUSH
100951: LD_INT 1
100953: ARRAY
100954: PPUSH
100955: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
100959: LD_VAR 0 4
100963: PUSH
100964: LD_VAR 0 7
100968: ARRAY
100969: PPUSH
100970: LD_VAR 0 10
100974: PPUSH
100975: LD_VAR 0 12
100979: PPUSH
100980: LD_INT 7
100982: PPUSH
100983: CALL_OW 272
100987: PPUSH
100988: LD_VAR 0 11
100992: PPUSH
100993: LD_VAR 0 12
100997: PPUSH
100998: LD_INT 7
101000: PPUSH
101001: CALL_OW 273
101005: PPUSH
101006: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
101010: LD_VAR 0 4
101014: PUSH
101015: LD_VAR 0 7
101019: ARRAY
101020: PPUSH
101021: LD_INT 71
101023: PPUSH
101024: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
101028: LD_ADDR_VAR 0 27
101032: PUSH
101033: LD_VAR 0 27
101037: PPUSH
101038: LD_VAR 0 27
101042: PUSH
101043: LD_INT 1
101045: PLUS
101046: PPUSH
101047: LD_VAR 0 14
101051: PUSH
101052: LD_INT 1
101054: ARRAY
101055: PPUSH
101056: CALL_OW 1
101060: ST_TO_ADDR
// attacking := true ;
101061: LD_ADDR_VAR 0 29
101065: PUSH
101066: LD_INT 1
101068: ST_TO_ADDR
// continue ;
101069: GO 98916
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
101071: LD_VAR 0 4
101075: PUSH
101076: LD_VAR 0 7
101080: ARRAY
101081: PPUSH
101082: CALL_OW 257
101086: PUSH
101087: LD_INT 17
101089: EQUAL
101090: PUSH
101091: LD_VAR 0 4
101095: PUSH
101096: LD_VAR 0 7
101100: ARRAY
101101: PPUSH
101102: CALL_OW 110
101106: PUSH
101107: LD_INT 71
101109: EQUAL
101110: NOT
101111: AND
101112: IFFALSE 101258
// begin attacking := false ;
101114: LD_ADDR_VAR 0 29
101118: PUSH
101119: LD_INT 0
101121: ST_TO_ADDR
// k := 5 ;
101122: LD_ADDR_VAR 0 9
101126: PUSH
101127: LD_INT 5
101129: ST_TO_ADDR
// if tmp < k then
101130: LD_VAR 0 14
101134: PUSH
101135: LD_VAR 0 9
101139: LESS
101140: IFFALSE 101152
// k := tmp ;
101142: LD_ADDR_VAR 0 9
101146: PUSH
101147: LD_VAR 0 14
101151: ST_TO_ADDR
// for j = 1 to k do
101152: LD_ADDR_VAR 0 8
101156: PUSH
101157: DOUBLE
101158: LD_INT 1
101160: DEC
101161: ST_TO_ADDR
101162: LD_VAR 0 9
101166: PUSH
101167: FOR_TO
101168: IFFALSE 101256
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
101170: LD_VAR 0 14
101174: PUSH
101175: LD_VAR 0 8
101179: ARRAY
101180: PUSH
101181: LD_VAR 0 14
101185: PPUSH
101186: LD_INT 58
101188: PUSH
101189: EMPTY
101190: LIST
101191: PPUSH
101192: CALL_OW 72
101196: IN
101197: NOT
101198: IFFALSE 101254
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
101200: LD_VAR 0 4
101204: PUSH
101205: LD_VAR 0 7
101209: ARRAY
101210: PPUSH
101211: LD_VAR 0 14
101215: PUSH
101216: LD_VAR 0 8
101220: ARRAY
101221: PPUSH
101222: CALL_OW 115
// attacking := true ;
101226: LD_ADDR_VAR 0 29
101230: PUSH
101231: LD_INT 1
101233: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
101234: LD_VAR 0 4
101238: PUSH
101239: LD_VAR 0 7
101243: ARRAY
101244: PPUSH
101245: LD_INT 71
101247: PPUSH
101248: CALL_OW 109
// continue ;
101252: GO 101167
// end ; end ;
101254: GO 101167
101256: POP
101257: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
101258: LD_VAR 0 4
101262: PUSH
101263: LD_VAR 0 7
101267: ARRAY
101268: PPUSH
101269: CALL_OW 257
101273: PUSH
101274: LD_INT 8
101276: EQUAL
101277: PUSH
101278: LD_VAR 0 4
101282: PUSH
101283: LD_VAR 0 7
101287: ARRAY
101288: PPUSH
101289: CALL_OW 264
101293: PUSH
101294: LD_INT 28
101296: PUSH
101297: LD_INT 45
101299: PUSH
101300: LD_INT 7
101302: PUSH
101303: LD_INT 47
101305: PUSH
101306: EMPTY
101307: LIST
101308: LIST
101309: LIST
101310: LIST
101311: IN
101312: OR
101313: IFFALSE 101569
// begin attacking := false ;
101315: LD_ADDR_VAR 0 29
101319: PUSH
101320: LD_INT 0
101322: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
101323: LD_VAR 0 14
101327: PUSH
101328: LD_INT 1
101330: ARRAY
101331: PPUSH
101332: CALL_OW 266
101336: PUSH
101337: LD_INT 32
101339: PUSH
101340: LD_INT 31
101342: PUSH
101343: LD_INT 33
101345: PUSH
101346: LD_INT 4
101348: PUSH
101349: LD_INT 5
101351: PUSH
101352: EMPTY
101353: LIST
101354: LIST
101355: LIST
101356: LIST
101357: LIST
101358: IN
101359: IFFALSE 101545
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
101361: LD_ADDR_VAR 0 9
101365: PUSH
101366: LD_VAR 0 14
101370: PUSH
101371: LD_INT 1
101373: ARRAY
101374: PPUSH
101375: CALL_OW 266
101379: PPUSH
101380: LD_VAR 0 14
101384: PUSH
101385: LD_INT 1
101387: ARRAY
101388: PPUSH
101389: CALL_OW 250
101393: PPUSH
101394: LD_VAR 0 14
101398: PUSH
101399: LD_INT 1
101401: ARRAY
101402: PPUSH
101403: CALL_OW 251
101407: PPUSH
101408: LD_VAR 0 14
101412: PUSH
101413: LD_INT 1
101415: ARRAY
101416: PPUSH
101417: CALL_OW 254
101421: PPUSH
101422: LD_VAR 0 14
101426: PUSH
101427: LD_INT 1
101429: ARRAY
101430: PPUSH
101431: CALL_OW 248
101435: PPUSH
101436: LD_INT 0
101438: PPUSH
101439: CALL 63803 0 6
101443: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
101444: LD_ADDR_VAR 0 8
101448: PUSH
101449: LD_VAR 0 4
101453: PUSH
101454: LD_VAR 0 7
101458: ARRAY
101459: PPUSH
101460: LD_VAR 0 9
101464: PPUSH
101465: CALL 82473 0 2
101469: ST_TO_ADDR
// if j then
101470: LD_VAR 0 8
101474: IFFALSE 101543
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
101476: LD_VAR 0 8
101480: PUSH
101481: LD_INT 1
101483: ARRAY
101484: PPUSH
101485: LD_VAR 0 8
101489: PUSH
101490: LD_INT 2
101492: ARRAY
101493: PPUSH
101494: CALL_OW 488
101498: IFFALSE 101543
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
101500: LD_VAR 0 4
101504: PUSH
101505: LD_VAR 0 7
101509: ARRAY
101510: PPUSH
101511: LD_VAR 0 8
101515: PUSH
101516: LD_INT 1
101518: ARRAY
101519: PPUSH
101520: LD_VAR 0 8
101524: PUSH
101525: LD_INT 2
101527: ARRAY
101528: PPUSH
101529: CALL_OW 116
// attacking := true ;
101533: LD_ADDR_VAR 0 29
101537: PUSH
101538: LD_INT 1
101540: ST_TO_ADDR
// continue ;
101541: GO 98916
// end ; end else
101543: GO 101569
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101545: LD_VAR 0 4
101549: PUSH
101550: LD_VAR 0 7
101554: ARRAY
101555: PPUSH
101556: LD_VAR 0 14
101560: PUSH
101561: LD_INT 1
101563: ARRAY
101564: PPUSH
101565: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
101569: LD_VAR 0 4
101573: PUSH
101574: LD_VAR 0 7
101578: ARRAY
101579: PPUSH
101580: CALL_OW 265
101584: PUSH
101585: LD_INT 11
101587: EQUAL
101588: IFFALSE 101866
// begin k := 10 ;
101590: LD_ADDR_VAR 0 9
101594: PUSH
101595: LD_INT 10
101597: ST_TO_ADDR
// x := 0 ;
101598: LD_ADDR_VAR 0 10
101602: PUSH
101603: LD_INT 0
101605: ST_TO_ADDR
// if tmp < k then
101606: LD_VAR 0 14
101610: PUSH
101611: LD_VAR 0 9
101615: LESS
101616: IFFALSE 101628
// k := tmp ;
101618: LD_ADDR_VAR 0 9
101622: PUSH
101623: LD_VAR 0 14
101627: ST_TO_ADDR
// for j = k downto 1 do
101628: LD_ADDR_VAR 0 8
101632: PUSH
101633: DOUBLE
101634: LD_VAR 0 9
101638: INC
101639: ST_TO_ADDR
101640: LD_INT 1
101642: PUSH
101643: FOR_DOWNTO
101644: IFFALSE 101719
// begin if GetType ( tmp [ j ] ) = unit_human then
101646: LD_VAR 0 14
101650: PUSH
101651: LD_VAR 0 8
101655: ARRAY
101656: PPUSH
101657: CALL_OW 247
101661: PUSH
101662: LD_INT 1
101664: EQUAL
101665: IFFALSE 101717
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
101667: LD_VAR 0 4
101671: PUSH
101672: LD_VAR 0 7
101676: ARRAY
101677: PPUSH
101678: LD_VAR 0 14
101682: PUSH
101683: LD_VAR 0 8
101687: ARRAY
101688: PPUSH
101689: CALL 82744 0 2
// x := tmp [ j ] ;
101693: LD_ADDR_VAR 0 10
101697: PUSH
101698: LD_VAR 0 14
101702: PUSH
101703: LD_VAR 0 8
101707: ARRAY
101708: ST_TO_ADDR
// attacking := true ;
101709: LD_ADDR_VAR 0 29
101713: PUSH
101714: LD_INT 1
101716: ST_TO_ADDR
// end ; end ;
101717: GO 101643
101719: POP
101720: POP
// if not x then
101721: LD_VAR 0 10
101725: NOT
101726: IFFALSE 101866
// begin attacking := true ;
101728: LD_ADDR_VAR 0 29
101732: PUSH
101733: LD_INT 1
101735: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
101736: LD_VAR 0 4
101740: PUSH
101741: LD_VAR 0 7
101745: ARRAY
101746: PPUSH
101747: CALL_OW 250
101751: PPUSH
101752: LD_VAR 0 4
101756: PUSH
101757: LD_VAR 0 7
101761: ARRAY
101762: PPUSH
101763: CALL_OW 251
101767: PPUSH
101768: CALL_OW 546
101772: PUSH
101773: LD_INT 2
101775: ARRAY
101776: PUSH
101777: LD_VAR 0 14
101781: PUSH
101782: LD_INT 1
101784: ARRAY
101785: PPUSH
101786: CALL_OW 250
101790: PPUSH
101791: LD_VAR 0 14
101795: PUSH
101796: LD_INT 1
101798: ARRAY
101799: PPUSH
101800: CALL_OW 251
101804: PPUSH
101805: CALL_OW 546
101809: PUSH
101810: LD_INT 2
101812: ARRAY
101813: EQUAL
101814: IFFALSE 101842
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
101816: LD_VAR 0 4
101820: PUSH
101821: LD_VAR 0 7
101825: ARRAY
101826: PPUSH
101827: LD_VAR 0 14
101831: PUSH
101832: LD_INT 1
101834: ARRAY
101835: PPUSH
101836: CALL 82744 0 2
101840: GO 101866
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101842: LD_VAR 0 4
101846: PUSH
101847: LD_VAR 0 7
101851: ARRAY
101852: PPUSH
101853: LD_VAR 0 14
101857: PUSH
101858: LD_INT 1
101860: ARRAY
101861: PPUSH
101862: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
101866: LD_VAR 0 4
101870: PUSH
101871: LD_VAR 0 7
101875: ARRAY
101876: PPUSH
101877: CALL_OW 264
101881: PUSH
101882: LD_INT 29
101884: EQUAL
101885: IFFALSE 102251
// begin if WantsToAttack ( group [ i ] ) in bombed then
101887: LD_VAR 0 4
101891: PUSH
101892: LD_VAR 0 7
101896: ARRAY
101897: PPUSH
101898: CALL_OW 319
101902: PUSH
101903: LD_VAR 0 28
101907: IN
101908: IFFALSE 101912
// continue ;
101910: GO 98916
// k := 8 ;
101912: LD_ADDR_VAR 0 9
101916: PUSH
101917: LD_INT 8
101919: ST_TO_ADDR
// x := 0 ;
101920: LD_ADDR_VAR 0 10
101924: PUSH
101925: LD_INT 0
101927: ST_TO_ADDR
// if tmp < k then
101928: LD_VAR 0 14
101932: PUSH
101933: LD_VAR 0 9
101937: LESS
101938: IFFALSE 101950
// k := tmp ;
101940: LD_ADDR_VAR 0 9
101944: PUSH
101945: LD_VAR 0 14
101949: ST_TO_ADDR
// for j = 1 to k do
101950: LD_ADDR_VAR 0 8
101954: PUSH
101955: DOUBLE
101956: LD_INT 1
101958: DEC
101959: ST_TO_ADDR
101960: LD_VAR 0 9
101964: PUSH
101965: FOR_TO
101966: IFFALSE 102098
// begin if GetType ( tmp [ j ] ) = unit_building then
101968: LD_VAR 0 14
101972: PUSH
101973: LD_VAR 0 8
101977: ARRAY
101978: PPUSH
101979: CALL_OW 247
101983: PUSH
101984: LD_INT 3
101986: EQUAL
101987: IFFALSE 102096
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
101989: LD_VAR 0 14
101993: PUSH
101994: LD_VAR 0 8
101998: ARRAY
101999: PUSH
102000: LD_VAR 0 28
102004: IN
102005: NOT
102006: PUSH
102007: LD_VAR 0 14
102011: PUSH
102012: LD_VAR 0 8
102016: ARRAY
102017: PPUSH
102018: CALL_OW 313
102022: AND
102023: IFFALSE 102096
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
102025: LD_VAR 0 4
102029: PUSH
102030: LD_VAR 0 7
102034: ARRAY
102035: PPUSH
102036: LD_VAR 0 14
102040: PUSH
102041: LD_VAR 0 8
102045: ARRAY
102046: PPUSH
102047: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
102051: LD_ADDR_VAR 0 28
102055: PUSH
102056: LD_VAR 0 28
102060: PPUSH
102061: LD_VAR 0 28
102065: PUSH
102066: LD_INT 1
102068: PLUS
102069: PPUSH
102070: LD_VAR 0 14
102074: PUSH
102075: LD_VAR 0 8
102079: ARRAY
102080: PPUSH
102081: CALL_OW 1
102085: ST_TO_ADDR
// attacking := true ;
102086: LD_ADDR_VAR 0 29
102090: PUSH
102091: LD_INT 1
102093: ST_TO_ADDR
// break ;
102094: GO 102098
// end ; end ;
102096: GO 101965
102098: POP
102099: POP
// if not attacking and f_attack_depot then
102100: LD_VAR 0 29
102104: NOT
102105: PUSH
102106: LD_VAR 0 25
102110: AND
102111: IFFALSE 102206
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
102113: LD_ADDR_VAR 0 13
102117: PUSH
102118: LD_VAR 0 14
102122: PPUSH
102123: LD_INT 2
102125: PUSH
102126: LD_INT 30
102128: PUSH
102129: LD_INT 0
102131: PUSH
102132: EMPTY
102133: LIST
102134: LIST
102135: PUSH
102136: LD_INT 30
102138: PUSH
102139: LD_INT 1
102141: PUSH
102142: EMPTY
102143: LIST
102144: LIST
102145: PUSH
102146: EMPTY
102147: LIST
102148: LIST
102149: LIST
102150: PPUSH
102151: CALL_OW 72
102155: ST_TO_ADDR
// if z then
102156: LD_VAR 0 13
102160: IFFALSE 102206
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
102162: LD_VAR 0 4
102166: PUSH
102167: LD_VAR 0 7
102171: ARRAY
102172: PPUSH
102173: LD_VAR 0 13
102177: PPUSH
102178: LD_VAR 0 4
102182: PUSH
102183: LD_VAR 0 7
102187: ARRAY
102188: PPUSH
102189: CALL_OW 74
102193: PPUSH
102194: CALL_OW 115
// attacking := true ;
102198: LD_ADDR_VAR 0 29
102202: PUSH
102203: LD_INT 1
102205: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
102206: LD_VAR 0 4
102210: PUSH
102211: LD_VAR 0 7
102215: ARRAY
102216: PPUSH
102217: CALL_OW 256
102221: PUSH
102222: LD_INT 500
102224: LESS
102225: IFFALSE 102251
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
102227: LD_VAR 0 4
102231: PUSH
102232: LD_VAR 0 7
102236: ARRAY
102237: PPUSH
102238: LD_VAR 0 14
102242: PUSH
102243: LD_INT 1
102245: ARRAY
102246: PPUSH
102247: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
102251: LD_VAR 0 4
102255: PUSH
102256: LD_VAR 0 7
102260: ARRAY
102261: PPUSH
102262: CALL_OW 264
102266: PUSH
102267: LD_INT 49
102269: EQUAL
102270: IFFALSE 102391
// begin if not HasTask ( group [ i ] ) then
102272: LD_VAR 0 4
102276: PUSH
102277: LD_VAR 0 7
102281: ARRAY
102282: PPUSH
102283: CALL_OW 314
102287: NOT
102288: IFFALSE 102391
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
102290: LD_ADDR_VAR 0 9
102294: PUSH
102295: LD_INT 81
102297: PUSH
102298: LD_VAR 0 4
102302: PUSH
102303: LD_VAR 0 7
102307: ARRAY
102308: PPUSH
102309: CALL_OW 255
102313: PUSH
102314: EMPTY
102315: LIST
102316: LIST
102317: PPUSH
102318: CALL_OW 69
102322: PPUSH
102323: LD_VAR 0 4
102327: PUSH
102328: LD_VAR 0 7
102332: ARRAY
102333: PPUSH
102334: CALL_OW 74
102338: ST_TO_ADDR
// if k then
102339: LD_VAR 0 9
102343: IFFALSE 102391
// if GetDistUnits ( group [ i ] , k ) > 10 then
102345: LD_VAR 0 4
102349: PUSH
102350: LD_VAR 0 7
102354: ARRAY
102355: PPUSH
102356: LD_VAR 0 9
102360: PPUSH
102361: CALL_OW 296
102365: PUSH
102366: LD_INT 10
102368: GREATER
102369: IFFALSE 102391
// ComMoveUnit ( group [ i ] , k ) ;
102371: LD_VAR 0 4
102375: PUSH
102376: LD_VAR 0 7
102380: ARRAY
102381: PPUSH
102382: LD_VAR 0 9
102386: PPUSH
102387: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
102391: LD_VAR 0 4
102395: PUSH
102396: LD_VAR 0 7
102400: ARRAY
102401: PPUSH
102402: CALL_OW 256
102406: PUSH
102407: LD_INT 250
102409: LESS
102410: PUSH
102411: LD_VAR 0 4
102415: PUSH
102416: LD_VAR 0 7
102420: ARRAY
102421: PUSH
102422: LD_INT 21
102424: PUSH
102425: LD_INT 2
102427: PUSH
102428: EMPTY
102429: LIST
102430: LIST
102431: PUSH
102432: LD_INT 23
102434: PUSH
102435: LD_INT 2
102437: PUSH
102438: EMPTY
102439: LIST
102440: LIST
102441: PUSH
102442: EMPTY
102443: LIST
102444: LIST
102445: PPUSH
102446: CALL_OW 69
102450: IN
102451: AND
102452: IFFALSE 102577
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
102454: LD_ADDR_VAR 0 9
102458: PUSH
102459: LD_OWVAR 3
102463: PUSH
102464: LD_VAR 0 4
102468: PUSH
102469: LD_VAR 0 7
102473: ARRAY
102474: DIFF
102475: PPUSH
102476: LD_VAR 0 4
102480: PUSH
102481: LD_VAR 0 7
102485: ARRAY
102486: PPUSH
102487: CALL_OW 74
102491: ST_TO_ADDR
// if not k then
102492: LD_VAR 0 9
102496: NOT
102497: IFFALSE 102501
// continue ;
102499: GO 98916
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
102501: LD_VAR 0 9
102505: PUSH
102506: LD_INT 81
102508: PUSH
102509: LD_VAR 0 4
102513: PUSH
102514: LD_VAR 0 7
102518: ARRAY
102519: PPUSH
102520: CALL_OW 255
102524: PUSH
102525: EMPTY
102526: LIST
102527: LIST
102528: PPUSH
102529: CALL_OW 69
102533: IN
102534: PUSH
102535: LD_VAR 0 9
102539: PPUSH
102540: LD_VAR 0 4
102544: PUSH
102545: LD_VAR 0 7
102549: ARRAY
102550: PPUSH
102551: CALL_OW 296
102555: PUSH
102556: LD_INT 5
102558: LESS
102559: AND
102560: IFFALSE 102577
// ComAutodestruct ( group [ i ] ) ;
102562: LD_VAR 0 4
102566: PUSH
102567: LD_VAR 0 7
102571: ARRAY
102572: PPUSH
102573: CALL 82642 0 1
// end ; if f_attack_depot then
102577: LD_VAR 0 25
102581: IFFALSE 102693
// begin k := 6 ;
102583: LD_ADDR_VAR 0 9
102587: PUSH
102588: LD_INT 6
102590: ST_TO_ADDR
// if tmp < k then
102591: LD_VAR 0 14
102595: PUSH
102596: LD_VAR 0 9
102600: LESS
102601: IFFALSE 102613
// k := tmp ;
102603: LD_ADDR_VAR 0 9
102607: PUSH
102608: LD_VAR 0 14
102612: ST_TO_ADDR
// for j = 1 to k do
102613: LD_ADDR_VAR 0 8
102617: PUSH
102618: DOUBLE
102619: LD_INT 1
102621: DEC
102622: ST_TO_ADDR
102623: LD_VAR 0 9
102627: PUSH
102628: FOR_TO
102629: IFFALSE 102691
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
102631: LD_VAR 0 8
102635: PPUSH
102636: CALL_OW 266
102640: PUSH
102641: LD_INT 0
102643: PUSH
102644: LD_INT 1
102646: PUSH
102647: EMPTY
102648: LIST
102649: LIST
102650: IN
102651: IFFALSE 102689
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
102653: LD_VAR 0 4
102657: PUSH
102658: LD_VAR 0 7
102662: ARRAY
102663: PPUSH
102664: LD_VAR 0 14
102668: PUSH
102669: LD_VAR 0 8
102673: ARRAY
102674: PPUSH
102675: CALL_OW 115
// attacking := true ;
102679: LD_ADDR_VAR 0 29
102683: PUSH
102684: LD_INT 1
102686: ST_TO_ADDR
// break ;
102687: GO 102691
// end ;
102689: GO 102628
102691: POP
102692: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
102693: LD_VAR 0 4
102697: PUSH
102698: LD_VAR 0 7
102702: ARRAY
102703: PPUSH
102704: CALL_OW 302
102708: PUSH
102709: LD_VAR 0 29
102713: NOT
102714: AND
102715: IFFALSE 103037
// begin if GetTag ( group [ i ] ) = 71 then
102717: LD_VAR 0 4
102721: PUSH
102722: LD_VAR 0 7
102726: ARRAY
102727: PPUSH
102728: CALL_OW 110
102732: PUSH
102733: LD_INT 71
102735: EQUAL
102736: IFFALSE 102777
// begin if HasTask ( group [ i ] ) then
102738: LD_VAR 0 4
102742: PUSH
102743: LD_VAR 0 7
102747: ARRAY
102748: PPUSH
102749: CALL_OW 314
102753: IFFALSE 102759
// continue else
102755: GO 98916
102757: GO 102777
// SetTag ( group [ i ] , 0 ) ;
102759: LD_VAR 0 4
102763: PUSH
102764: LD_VAR 0 7
102768: ARRAY
102769: PPUSH
102770: LD_INT 0
102772: PPUSH
102773: CALL_OW 109
// end ; k := 8 ;
102777: LD_ADDR_VAR 0 9
102781: PUSH
102782: LD_INT 8
102784: ST_TO_ADDR
// x := 0 ;
102785: LD_ADDR_VAR 0 10
102789: PUSH
102790: LD_INT 0
102792: ST_TO_ADDR
// if tmp < k then
102793: LD_VAR 0 14
102797: PUSH
102798: LD_VAR 0 9
102802: LESS
102803: IFFALSE 102815
// k := tmp ;
102805: LD_ADDR_VAR 0 9
102809: PUSH
102810: LD_VAR 0 14
102814: ST_TO_ADDR
// for j = 1 to k do
102815: LD_ADDR_VAR 0 8
102819: PUSH
102820: DOUBLE
102821: LD_INT 1
102823: DEC
102824: ST_TO_ADDR
102825: LD_VAR 0 9
102829: PUSH
102830: FOR_TO
102831: IFFALSE 102929
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
102833: LD_VAR 0 14
102837: PUSH
102838: LD_VAR 0 8
102842: ARRAY
102843: PPUSH
102844: CALL_OW 247
102848: PUSH
102849: LD_INT 1
102851: EQUAL
102852: PUSH
102853: LD_VAR 0 14
102857: PUSH
102858: LD_VAR 0 8
102862: ARRAY
102863: PPUSH
102864: CALL_OW 256
102868: PUSH
102869: LD_INT 250
102871: LESS
102872: PUSH
102873: LD_VAR 0 20
102877: AND
102878: PUSH
102879: LD_VAR 0 20
102883: NOT
102884: PUSH
102885: LD_VAR 0 14
102889: PUSH
102890: LD_VAR 0 8
102894: ARRAY
102895: PPUSH
102896: CALL_OW 256
102900: PUSH
102901: LD_INT 250
102903: GREATEREQUAL
102904: AND
102905: OR
102906: AND
102907: IFFALSE 102927
// begin x := tmp [ j ] ;
102909: LD_ADDR_VAR 0 10
102913: PUSH
102914: LD_VAR 0 14
102918: PUSH
102919: LD_VAR 0 8
102923: ARRAY
102924: ST_TO_ADDR
// break ;
102925: GO 102929
// end ;
102927: GO 102830
102929: POP
102930: POP
// if x then
102931: LD_VAR 0 10
102935: IFFALSE 102959
// ComAttackUnit ( group [ i ] , x ) else
102937: LD_VAR 0 4
102941: PUSH
102942: LD_VAR 0 7
102946: ARRAY
102947: PPUSH
102948: LD_VAR 0 10
102952: PPUSH
102953: CALL_OW 115
102957: GO 102983
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
102959: LD_VAR 0 4
102963: PUSH
102964: LD_VAR 0 7
102968: ARRAY
102969: PPUSH
102970: LD_VAR 0 14
102974: PUSH
102975: LD_INT 1
102977: ARRAY
102978: PPUSH
102979: CALL_OW 115
// if not HasTask ( group [ i ] ) then
102983: LD_VAR 0 4
102987: PUSH
102988: LD_VAR 0 7
102992: ARRAY
102993: PPUSH
102994: CALL_OW 314
102998: NOT
102999: IFFALSE 103037
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
103001: LD_VAR 0 4
103005: PUSH
103006: LD_VAR 0 7
103010: ARRAY
103011: PPUSH
103012: LD_VAR 0 14
103016: PPUSH
103017: LD_VAR 0 4
103021: PUSH
103022: LD_VAR 0 7
103026: ARRAY
103027: PPUSH
103028: CALL_OW 74
103032: PPUSH
103033: CALL_OW 115
// end ; end ; end ;
103037: GO 98916
103039: POP
103040: POP
// wait ( 0 0$2 ) ;
103041: LD_INT 70
103043: PPUSH
103044: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
103048: LD_VAR 0 4
103052: NOT
103053: PUSH
103054: LD_VAR 0 4
103058: PUSH
103059: EMPTY
103060: EQUAL
103061: OR
103062: PUSH
103063: LD_INT 81
103065: PUSH
103066: LD_VAR 0 35
103070: PUSH
103071: EMPTY
103072: LIST
103073: LIST
103074: PPUSH
103075: CALL_OW 69
103079: NOT
103080: OR
103081: IFFALSE 98901
// end ;
103083: LD_VAR 0 2
103087: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
103088: LD_INT 0
103090: PPUSH
103091: PPUSH
103092: PPUSH
103093: PPUSH
103094: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
103095: LD_VAR 0 1
103099: NOT
103100: PUSH
103101: LD_EXP 87
103105: PUSH
103106: LD_VAR 0 1
103110: ARRAY
103111: NOT
103112: OR
103113: PUSH
103114: LD_VAR 0 2
103118: NOT
103119: OR
103120: PUSH
103121: LD_VAR 0 3
103125: NOT
103126: OR
103127: IFFALSE 103131
// exit ;
103129: GO 103644
// side := mc_sides [ base ] ;
103131: LD_ADDR_VAR 0 6
103135: PUSH
103136: LD_EXP 113
103140: PUSH
103141: LD_VAR 0 1
103145: ARRAY
103146: ST_TO_ADDR
// if not side then
103147: LD_VAR 0 6
103151: NOT
103152: IFFALSE 103156
// exit ;
103154: GO 103644
// for i in solds do
103156: LD_ADDR_VAR 0 7
103160: PUSH
103161: LD_VAR 0 2
103165: PUSH
103166: FOR_IN
103167: IFFALSE 103228
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
103169: LD_VAR 0 7
103173: PPUSH
103174: CALL_OW 310
103178: PPUSH
103179: CALL_OW 266
103183: PUSH
103184: LD_INT 32
103186: PUSH
103187: LD_INT 31
103189: PUSH
103190: EMPTY
103191: LIST
103192: LIST
103193: IN
103194: IFFALSE 103214
// solds := solds diff i else
103196: LD_ADDR_VAR 0 2
103200: PUSH
103201: LD_VAR 0 2
103205: PUSH
103206: LD_VAR 0 7
103210: DIFF
103211: ST_TO_ADDR
103212: GO 103226
// SetTag ( i , 18 ) ;
103214: LD_VAR 0 7
103218: PPUSH
103219: LD_INT 18
103221: PPUSH
103222: CALL_OW 109
103226: GO 103166
103228: POP
103229: POP
// if not solds then
103230: LD_VAR 0 2
103234: NOT
103235: IFFALSE 103239
// exit ;
103237: GO 103644
// repeat wait ( 0 0$1 ) ;
103239: LD_INT 35
103241: PPUSH
103242: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
103246: LD_ADDR_VAR 0 5
103250: PUSH
103251: LD_VAR 0 6
103255: PPUSH
103256: LD_VAR 0 3
103260: PPUSH
103261: CALL 52357 0 2
103265: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
103266: LD_EXP 87
103270: PUSH
103271: LD_VAR 0 1
103275: ARRAY
103276: NOT
103277: PUSH
103278: LD_EXP 87
103282: PUSH
103283: LD_VAR 0 1
103287: ARRAY
103288: PUSH
103289: EMPTY
103290: EQUAL
103291: OR
103292: IFFALSE 103329
// begin for i in solds do
103294: LD_ADDR_VAR 0 7
103298: PUSH
103299: LD_VAR 0 2
103303: PUSH
103304: FOR_IN
103305: IFFALSE 103318
// ComStop ( i ) ;
103307: LD_VAR 0 7
103311: PPUSH
103312: CALL_OW 141
103316: GO 103304
103318: POP
103319: POP
// solds := [ ] ;
103320: LD_ADDR_VAR 0 2
103324: PUSH
103325: EMPTY
103326: ST_TO_ADDR
// exit ;
103327: GO 103644
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
103329: LD_VAR 0 5
103333: NOT
103334: PUSH
103335: LD_VAR 0 5
103339: PUSH
103340: LD_INT 3
103342: GREATER
103343: OR
103344: PUSH
103345: LD_EXP 109
103349: PUSH
103350: LD_VAR 0 1
103354: ARRAY
103355: OR
103356: IFFALSE 103397
// begin for i in solds do
103358: LD_ADDR_VAR 0 7
103362: PUSH
103363: LD_VAR 0 2
103367: PUSH
103368: FOR_IN
103369: IFFALSE 103393
// if HasTask ( i ) then
103371: LD_VAR 0 7
103375: PPUSH
103376: CALL_OW 314
103380: IFFALSE 103391
// ComStop ( i ) ;
103382: LD_VAR 0 7
103386: PPUSH
103387: CALL_OW 141
103391: GO 103368
103393: POP
103394: POP
// break ;
103395: GO 103632
// end ; for i in solds do
103397: LD_ADDR_VAR 0 7
103401: PUSH
103402: LD_VAR 0 2
103406: PUSH
103407: FOR_IN
103408: IFFALSE 103624
// begin if IsInUnit ( i ) then
103410: LD_VAR 0 7
103414: PPUSH
103415: CALL_OW 310
103419: IFFALSE 103430
// ComExitBuilding ( i ) ;
103421: LD_VAR 0 7
103425: PPUSH
103426: CALL_OW 122
// if GetLives ( i ) > 333 then
103430: LD_VAR 0 7
103434: PPUSH
103435: CALL_OW 256
103439: PUSH
103440: LD_INT 333
103442: GREATER
103443: IFFALSE 103471
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
103445: LD_VAR 0 7
103449: PPUSH
103450: LD_VAR 0 5
103454: PPUSH
103455: LD_VAR 0 7
103459: PPUSH
103460: CALL_OW 74
103464: PPUSH
103465: CALL_OW 115
103469: GO 103622
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
103471: LD_ADDR_VAR 0 8
103475: PUSH
103476: LD_EXP 87
103480: PUSH
103481: LD_VAR 0 1
103485: ARRAY
103486: PPUSH
103487: LD_INT 2
103489: PUSH
103490: LD_INT 30
103492: PUSH
103493: LD_INT 0
103495: PUSH
103496: EMPTY
103497: LIST
103498: LIST
103499: PUSH
103500: LD_INT 30
103502: PUSH
103503: LD_INT 1
103505: PUSH
103506: EMPTY
103507: LIST
103508: LIST
103509: PUSH
103510: LD_INT 30
103512: PUSH
103513: LD_INT 6
103515: PUSH
103516: EMPTY
103517: LIST
103518: LIST
103519: PUSH
103520: EMPTY
103521: LIST
103522: LIST
103523: LIST
103524: LIST
103525: PPUSH
103526: CALL_OW 72
103530: PPUSH
103531: LD_VAR 0 7
103535: PPUSH
103536: CALL_OW 74
103540: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
103541: LD_VAR 0 7
103545: PPUSH
103546: LD_VAR 0 8
103550: PPUSH
103551: CALL_OW 250
103555: PPUSH
103556: LD_INT 3
103558: PPUSH
103559: LD_INT 5
103561: PPUSH
103562: CALL_OW 272
103566: PPUSH
103567: LD_VAR 0 8
103571: PPUSH
103572: CALL_OW 251
103576: PPUSH
103577: LD_INT 3
103579: PPUSH
103580: LD_INT 5
103582: PPUSH
103583: CALL_OW 273
103587: PPUSH
103588: CALL_OW 111
// SetTag ( i , 0 ) ;
103592: LD_VAR 0 7
103596: PPUSH
103597: LD_INT 0
103599: PPUSH
103600: CALL_OW 109
// solds := solds diff i ;
103604: LD_ADDR_VAR 0 2
103608: PUSH
103609: LD_VAR 0 2
103613: PUSH
103614: LD_VAR 0 7
103618: DIFF
103619: ST_TO_ADDR
// continue ;
103620: GO 103407
// end ; end ;
103622: GO 103407
103624: POP
103625: POP
// until solds ;
103626: LD_VAR 0 2
103630: IFFALSE 103239
// MC_Reset ( base , 18 ) ;
103632: LD_VAR 0 1
103636: PPUSH
103637: LD_INT 18
103639: PPUSH
103640: CALL 24649 0 2
// end ;
103644: LD_VAR 0 4
103648: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
103649: LD_INT 0
103651: PPUSH
103652: PPUSH
103653: PPUSH
103654: PPUSH
103655: PPUSH
103656: PPUSH
103657: PPUSH
103658: PPUSH
103659: PPUSH
103660: PPUSH
103661: PPUSH
103662: PPUSH
103663: PPUSH
103664: PPUSH
103665: PPUSH
103666: PPUSH
103667: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
103668: LD_ADDR_VAR 0 13
103672: PUSH
103673: LD_EXP 87
103677: PUSH
103678: LD_VAR 0 1
103682: ARRAY
103683: PPUSH
103684: LD_INT 25
103686: PUSH
103687: LD_INT 3
103689: PUSH
103690: EMPTY
103691: LIST
103692: LIST
103693: PPUSH
103694: CALL_OW 72
103698: ST_TO_ADDR
// if mc_remote_driver [ base ] then
103699: LD_EXP 127
103703: PUSH
103704: LD_VAR 0 1
103708: ARRAY
103709: IFFALSE 103733
// mechs := mechs diff mc_remote_driver [ base ] ;
103711: LD_ADDR_VAR 0 13
103715: PUSH
103716: LD_VAR 0 13
103720: PUSH
103721: LD_EXP 127
103725: PUSH
103726: LD_VAR 0 1
103730: ARRAY
103731: DIFF
103732: ST_TO_ADDR
// for i in mechs do
103733: LD_ADDR_VAR 0 5
103737: PUSH
103738: LD_VAR 0 13
103742: PUSH
103743: FOR_IN
103744: IFFALSE 103779
// if GetTag ( i ) > 0 then
103746: LD_VAR 0 5
103750: PPUSH
103751: CALL_OW 110
103755: PUSH
103756: LD_INT 0
103758: GREATER
103759: IFFALSE 103777
// mechs := mechs diff i ;
103761: LD_ADDR_VAR 0 13
103765: PUSH
103766: LD_VAR 0 13
103770: PUSH
103771: LD_VAR 0 5
103775: DIFF
103776: ST_TO_ADDR
103777: GO 103743
103779: POP
103780: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
103781: LD_ADDR_VAR 0 9
103785: PUSH
103786: LD_EXP 87
103790: PUSH
103791: LD_VAR 0 1
103795: ARRAY
103796: PPUSH
103797: LD_INT 2
103799: PUSH
103800: LD_INT 25
103802: PUSH
103803: LD_INT 1
103805: PUSH
103806: EMPTY
103807: LIST
103808: LIST
103809: PUSH
103810: LD_INT 25
103812: PUSH
103813: LD_INT 5
103815: PUSH
103816: EMPTY
103817: LIST
103818: LIST
103819: PUSH
103820: LD_INT 25
103822: PUSH
103823: LD_INT 8
103825: PUSH
103826: EMPTY
103827: LIST
103828: LIST
103829: PUSH
103830: LD_INT 25
103832: PUSH
103833: LD_INT 9
103835: PUSH
103836: EMPTY
103837: LIST
103838: LIST
103839: PUSH
103840: EMPTY
103841: LIST
103842: LIST
103843: LIST
103844: LIST
103845: LIST
103846: PPUSH
103847: CALL_OW 72
103851: ST_TO_ADDR
// if not defenders and not solds then
103852: LD_VAR 0 2
103856: NOT
103857: PUSH
103858: LD_VAR 0 9
103862: NOT
103863: AND
103864: IFFALSE 103868
// exit ;
103866: GO 105494
// depot_under_attack := false ;
103868: LD_ADDR_VAR 0 17
103872: PUSH
103873: LD_INT 0
103875: ST_TO_ADDR
// sold_defenders := [ ] ;
103876: LD_ADDR_VAR 0 18
103880: PUSH
103881: EMPTY
103882: ST_TO_ADDR
// if mechs then
103883: LD_VAR 0 13
103887: IFFALSE 104016
// for i in defenders do
103889: LD_ADDR_VAR 0 5
103893: PUSH
103894: LD_VAR 0 2
103898: PUSH
103899: FOR_IN
103900: IFFALSE 104014
// begin SetTag ( i , 20 ) ;
103902: LD_VAR 0 5
103906: PPUSH
103907: LD_INT 20
103909: PPUSH
103910: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
103914: LD_VAR 0 5
103918: PPUSH
103919: CALL_OW 263
103923: PUSH
103924: LD_INT 1
103926: EQUAL
103927: PUSH
103928: LD_VAR 0 5
103932: PPUSH
103933: CALL_OW 311
103937: NOT
103938: AND
103939: PUSH
103940: LD_VAR 0 13
103944: AND
103945: IFFALSE 104012
// begin un := mechs [ 1 ] ;
103947: LD_ADDR_VAR 0 11
103951: PUSH
103952: LD_VAR 0 13
103956: PUSH
103957: LD_INT 1
103959: ARRAY
103960: ST_TO_ADDR
// ComExitBuilding ( un ) ;
103961: LD_VAR 0 11
103965: PPUSH
103966: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
103970: LD_VAR 0 11
103974: PPUSH
103975: LD_VAR 0 5
103979: PPUSH
103980: CALL_OW 180
// SetTag ( un , 19 ) ;
103984: LD_VAR 0 11
103988: PPUSH
103989: LD_INT 19
103991: PPUSH
103992: CALL_OW 109
// mechs := mechs diff un ;
103996: LD_ADDR_VAR 0 13
104000: PUSH
104001: LD_VAR 0 13
104005: PUSH
104006: LD_VAR 0 11
104010: DIFF
104011: ST_TO_ADDR
// end ; end ;
104012: GO 103899
104014: POP
104015: POP
// if solds then
104016: LD_VAR 0 9
104020: IFFALSE 104079
// for i in solds do
104022: LD_ADDR_VAR 0 5
104026: PUSH
104027: LD_VAR 0 9
104031: PUSH
104032: FOR_IN
104033: IFFALSE 104077
// if not GetTag ( i ) then
104035: LD_VAR 0 5
104039: PPUSH
104040: CALL_OW 110
104044: NOT
104045: IFFALSE 104075
// begin defenders := defenders union i ;
104047: LD_ADDR_VAR 0 2
104051: PUSH
104052: LD_VAR 0 2
104056: PUSH
104057: LD_VAR 0 5
104061: UNION
104062: ST_TO_ADDR
// SetTag ( i , 18 ) ;
104063: LD_VAR 0 5
104067: PPUSH
104068: LD_INT 18
104070: PPUSH
104071: CALL_OW 109
// end ;
104075: GO 104032
104077: POP
104078: POP
// repeat wait ( 0 0$1 ) ;
104079: LD_INT 35
104081: PPUSH
104082: CALL_OW 67
// enemy := mc_scan [ base ] ;
104086: LD_ADDR_VAR 0 3
104090: PUSH
104091: LD_EXP 110
104095: PUSH
104096: LD_VAR 0 1
104100: ARRAY
104101: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
104102: LD_EXP 87
104106: PUSH
104107: LD_VAR 0 1
104111: ARRAY
104112: NOT
104113: PUSH
104114: LD_EXP 87
104118: PUSH
104119: LD_VAR 0 1
104123: ARRAY
104124: PUSH
104125: EMPTY
104126: EQUAL
104127: OR
104128: IFFALSE 104165
// begin for i in defenders do
104130: LD_ADDR_VAR 0 5
104134: PUSH
104135: LD_VAR 0 2
104139: PUSH
104140: FOR_IN
104141: IFFALSE 104154
// ComStop ( i ) ;
104143: LD_VAR 0 5
104147: PPUSH
104148: CALL_OW 141
104152: GO 104140
104154: POP
104155: POP
// defenders := [ ] ;
104156: LD_ADDR_VAR 0 2
104160: PUSH
104161: EMPTY
104162: ST_TO_ADDR
// exit ;
104163: GO 105494
// end ; for i in defenders do
104165: LD_ADDR_VAR 0 5
104169: PUSH
104170: LD_VAR 0 2
104174: PUSH
104175: FOR_IN
104176: IFFALSE 104994
// begin e := NearestUnitToUnit ( enemy , i ) ;
104178: LD_ADDR_VAR 0 14
104182: PUSH
104183: LD_VAR 0 3
104187: PPUSH
104188: LD_VAR 0 5
104192: PPUSH
104193: CALL_OW 74
104197: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
104198: LD_ADDR_VAR 0 8
104202: PUSH
104203: LD_EXP 87
104207: PUSH
104208: LD_VAR 0 1
104212: ARRAY
104213: PPUSH
104214: LD_INT 2
104216: PUSH
104217: LD_INT 30
104219: PUSH
104220: LD_INT 0
104222: PUSH
104223: EMPTY
104224: LIST
104225: LIST
104226: PUSH
104227: LD_INT 30
104229: PUSH
104230: LD_INT 1
104232: PUSH
104233: EMPTY
104234: LIST
104235: LIST
104236: PUSH
104237: EMPTY
104238: LIST
104239: LIST
104240: LIST
104241: PPUSH
104242: CALL_OW 72
104246: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
104247: LD_ADDR_VAR 0 17
104251: PUSH
104252: LD_VAR 0 8
104256: NOT
104257: PUSH
104258: LD_VAR 0 8
104262: PPUSH
104263: LD_INT 3
104265: PUSH
104266: LD_INT 24
104268: PUSH
104269: LD_INT 600
104271: PUSH
104272: EMPTY
104273: LIST
104274: LIST
104275: PUSH
104276: EMPTY
104277: LIST
104278: LIST
104279: PPUSH
104280: CALL_OW 72
104284: OR
104285: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
104286: LD_VAR 0 5
104290: PPUSH
104291: CALL_OW 247
104295: PUSH
104296: LD_INT 2
104298: DOUBLE
104299: EQUAL
104300: IFTRUE 104304
104302: GO 104700
104304: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
104305: LD_VAR 0 5
104309: PPUSH
104310: CALL_OW 256
104314: PUSH
104315: LD_INT 650
104317: GREATER
104318: PUSH
104319: LD_VAR 0 5
104323: PPUSH
104324: LD_VAR 0 14
104328: PPUSH
104329: CALL_OW 296
104333: PUSH
104334: LD_INT 40
104336: LESS
104337: PUSH
104338: LD_VAR 0 14
104342: PPUSH
104343: LD_EXP 112
104347: PUSH
104348: LD_VAR 0 1
104352: ARRAY
104353: PPUSH
104354: CALL_OW 308
104358: OR
104359: AND
104360: IFFALSE 104482
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
104362: LD_VAR 0 5
104366: PPUSH
104367: CALL_OW 262
104371: PUSH
104372: LD_INT 1
104374: EQUAL
104375: PUSH
104376: LD_VAR 0 5
104380: PPUSH
104381: CALL_OW 261
104385: PUSH
104386: LD_INT 30
104388: LESS
104389: AND
104390: PUSH
104391: LD_VAR 0 8
104395: AND
104396: IFFALSE 104466
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
104398: LD_VAR 0 5
104402: PPUSH
104403: LD_VAR 0 8
104407: PPUSH
104408: LD_VAR 0 5
104412: PPUSH
104413: CALL_OW 74
104417: PPUSH
104418: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
104422: LD_VAR 0 5
104426: PPUSH
104427: LD_VAR 0 8
104431: PPUSH
104432: LD_VAR 0 5
104436: PPUSH
104437: CALL_OW 74
104441: PPUSH
104442: CALL_OW 296
104446: PUSH
104447: LD_INT 6
104449: LESS
104450: IFFALSE 104464
// SetFuel ( i , 100 ) ;
104452: LD_VAR 0 5
104456: PPUSH
104457: LD_INT 100
104459: PPUSH
104460: CALL_OW 240
// end else
104464: GO 104480
// ComAttackUnit ( i , e ) ;
104466: LD_VAR 0 5
104470: PPUSH
104471: LD_VAR 0 14
104475: PPUSH
104476: CALL_OW 115
// end else
104480: GO 104583
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
104482: LD_VAR 0 14
104486: PPUSH
104487: LD_EXP 112
104491: PUSH
104492: LD_VAR 0 1
104496: ARRAY
104497: PPUSH
104498: CALL_OW 308
104502: NOT
104503: PUSH
104504: LD_VAR 0 5
104508: PPUSH
104509: LD_VAR 0 14
104513: PPUSH
104514: CALL_OW 296
104518: PUSH
104519: LD_INT 40
104521: GREATEREQUAL
104522: AND
104523: PUSH
104524: LD_VAR 0 5
104528: PPUSH
104529: CALL_OW 256
104533: PUSH
104534: LD_INT 650
104536: LESSEQUAL
104537: OR
104538: PUSH
104539: LD_VAR 0 5
104543: PPUSH
104544: LD_EXP 111
104548: PUSH
104549: LD_VAR 0 1
104553: ARRAY
104554: PPUSH
104555: CALL_OW 308
104559: NOT
104560: AND
104561: IFFALSE 104583
// ComMoveToArea ( i , mc_parking [ base ] ) ;
104563: LD_VAR 0 5
104567: PPUSH
104568: LD_EXP 111
104572: PUSH
104573: LD_VAR 0 1
104577: ARRAY
104578: PPUSH
104579: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
104583: LD_VAR 0 5
104587: PPUSH
104588: CALL_OW 256
104592: PUSH
104593: LD_INT 998
104595: LESS
104596: PUSH
104597: LD_VAR 0 5
104601: PPUSH
104602: CALL_OW 263
104606: PUSH
104607: LD_INT 1
104609: EQUAL
104610: AND
104611: PUSH
104612: LD_VAR 0 5
104616: PPUSH
104617: CALL_OW 311
104621: AND
104622: PUSH
104623: LD_VAR 0 5
104627: PPUSH
104628: LD_EXP 111
104632: PUSH
104633: LD_VAR 0 1
104637: ARRAY
104638: PPUSH
104639: CALL_OW 308
104643: AND
104644: IFFALSE 104698
// begin mech := IsDrivenBy ( i ) ;
104646: LD_ADDR_VAR 0 10
104650: PUSH
104651: LD_VAR 0 5
104655: PPUSH
104656: CALL_OW 311
104660: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
104661: LD_VAR 0 10
104665: PPUSH
104666: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
104670: LD_VAR 0 10
104674: PPUSH
104675: LD_VAR 0 5
104679: PPUSH
104680: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
104684: LD_VAR 0 10
104688: PPUSH
104689: LD_VAR 0 5
104693: PPUSH
104694: CALL_OW 180
// end ; end ; unit_human :
104698: GO 104965
104700: LD_INT 1
104702: DOUBLE
104703: EQUAL
104704: IFTRUE 104708
104706: GO 104964
104708: POP
// begin b := IsInUnit ( i ) ;
104709: LD_ADDR_VAR 0 19
104713: PUSH
104714: LD_VAR 0 5
104718: PPUSH
104719: CALL_OW 310
104723: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
104724: LD_ADDR_VAR 0 20
104728: PUSH
104729: LD_VAR 0 19
104733: NOT
104734: PUSH
104735: LD_VAR 0 19
104739: PPUSH
104740: CALL_OW 266
104744: PUSH
104745: LD_INT 32
104747: PUSH
104748: LD_INT 31
104750: PUSH
104751: EMPTY
104752: LIST
104753: LIST
104754: IN
104755: OR
104756: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
104757: LD_VAR 0 17
104761: PUSH
104762: LD_VAR 0 2
104766: PPUSH
104767: LD_INT 21
104769: PUSH
104770: LD_INT 2
104772: PUSH
104773: EMPTY
104774: LIST
104775: LIST
104776: PPUSH
104777: CALL_OW 72
104781: PUSH
104782: LD_INT 1
104784: LESSEQUAL
104785: OR
104786: PUSH
104787: LD_VAR 0 20
104791: AND
104792: PUSH
104793: LD_VAR 0 5
104797: PUSH
104798: LD_VAR 0 18
104802: IN
104803: NOT
104804: AND
104805: IFFALSE 104898
// begin if b then
104807: LD_VAR 0 19
104811: IFFALSE 104860
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
104813: LD_VAR 0 19
104817: PPUSH
104818: LD_VAR 0 3
104822: PPUSH
104823: LD_VAR 0 19
104827: PPUSH
104828: CALL_OW 74
104832: PPUSH
104833: CALL_OW 296
104837: PUSH
104838: LD_INT 10
104840: LESS
104841: PUSH
104842: LD_VAR 0 19
104846: PPUSH
104847: CALL_OW 461
104851: PUSH
104852: LD_INT 7
104854: NONEQUAL
104855: AND
104856: IFFALSE 104860
// continue ;
104858: GO 104175
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
104860: LD_ADDR_VAR 0 18
104864: PUSH
104865: LD_VAR 0 18
104869: PPUSH
104870: LD_VAR 0 18
104874: PUSH
104875: LD_INT 1
104877: PLUS
104878: PPUSH
104879: LD_VAR 0 5
104883: PPUSH
104884: CALL_OW 1
104888: ST_TO_ADDR
// ComExitBuilding ( i ) ;
104889: LD_VAR 0 5
104893: PPUSH
104894: CALL_OW 122
// end ; if sold_defenders then
104898: LD_VAR 0 18
104902: IFFALSE 104962
// if i in sold_defenders then
104904: LD_VAR 0 5
104908: PUSH
104909: LD_VAR 0 18
104913: IN
104914: IFFALSE 104962
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
104916: LD_VAR 0 5
104920: PPUSH
104921: CALL_OW 314
104925: NOT
104926: PUSH
104927: LD_VAR 0 5
104931: PPUSH
104932: LD_VAR 0 14
104936: PPUSH
104937: CALL_OW 296
104941: PUSH
104942: LD_INT 30
104944: LESS
104945: AND
104946: IFFALSE 104962
// ComAttackUnit ( i , e ) ;
104948: LD_VAR 0 5
104952: PPUSH
104953: LD_VAR 0 14
104957: PPUSH
104958: CALL_OW 115
// end ; end ; end ;
104962: GO 104965
104964: POP
// if IsDead ( i ) then
104965: LD_VAR 0 5
104969: PPUSH
104970: CALL_OW 301
104974: IFFALSE 104992
// defenders := defenders diff i ;
104976: LD_ADDR_VAR 0 2
104980: PUSH
104981: LD_VAR 0 2
104985: PUSH
104986: LD_VAR 0 5
104990: DIFF
104991: ST_TO_ADDR
// end ;
104992: GO 104175
104994: POP
104995: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
104996: LD_VAR 0 3
105000: NOT
105001: PUSH
105002: LD_VAR 0 2
105006: NOT
105007: OR
105008: PUSH
105009: LD_EXP 87
105013: PUSH
105014: LD_VAR 0 1
105018: ARRAY
105019: NOT
105020: OR
105021: IFFALSE 104079
// MC_Reset ( base , 18 ) ;
105023: LD_VAR 0 1
105027: PPUSH
105028: LD_INT 18
105030: PPUSH
105031: CALL 24649 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
105035: LD_ADDR_VAR 0 2
105039: PUSH
105040: LD_VAR 0 2
105044: PUSH
105045: LD_VAR 0 2
105049: PPUSH
105050: LD_INT 2
105052: PUSH
105053: LD_INT 25
105055: PUSH
105056: LD_INT 1
105058: PUSH
105059: EMPTY
105060: LIST
105061: LIST
105062: PUSH
105063: LD_INT 25
105065: PUSH
105066: LD_INT 5
105068: PUSH
105069: EMPTY
105070: LIST
105071: LIST
105072: PUSH
105073: LD_INT 25
105075: PUSH
105076: LD_INT 8
105078: PUSH
105079: EMPTY
105080: LIST
105081: LIST
105082: PUSH
105083: LD_INT 25
105085: PUSH
105086: LD_INT 9
105088: PUSH
105089: EMPTY
105090: LIST
105091: LIST
105092: PUSH
105093: EMPTY
105094: LIST
105095: LIST
105096: LIST
105097: LIST
105098: LIST
105099: PPUSH
105100: CALL_OW 72
105104: DIFF
105105: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
105106: LD_VAR 0 3
105110: NOT
105111: PUSH
105112: LD_VAR 0 2
105116: PPUSH
105117: LD_INT 21
105119: PUSH
105120: LD_INT 2
105122: PUSH
105123: EMPTY
105124: LIST
105125: LIST
105126: PPUSH
105127: CALL_OW 72
105131: AND
105132: IFFALSE 105470
// begin tmp := FilterByTag ( defenders , 19 ) ;
105134: LD_ADDR_VAR 0 12
105138: PUSH
105139: LD_VAR 0 2
105143: PPUSH
105144: LD_INT 19
105146: PPUSH
105147: CALL 84117 0 2
105151: ST_TO_ADDR
// if tmp then
105152: LD_VAR 0 12
105156: IFFALSE 105226
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
105158: LD_ADDR_VAR 0 12
105162: PUSH
105163: LD_VAR 0 12
105167: PPUSH
105168: LD_INT 25
105170: PUSH
105171: LD_INT 3
105173: PUSH
105174: EMPTY
105175: LIST
105176: LIST
105177: PPUSH
105178: CALL_OW 72
105182: ST_TO_ADDR
// if tmp then
105183: LD_VAR 0 12
105187: IFFALSE 105226
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
105189: LD_ADDR_EXP 99
105193: PUSH
105194: LD_EXP 99
105198: PPUSH
105199: LD_VAR 0 1
105203: PPUSH
105204: LD_EXP 99
105208: PUSH
105209: LD_VAR 0 1
105213: ARRAY
105214: PUSH
105215: LD_VAR 0 12
105219: UNION
105220: PPUSH
105221: CALL_OW 1
105225: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
105226: LD_VAR 0 1
105230: PPUSH
105231: LD_INT 19
105233: PPUSH
105234: CALL 24649 0 2
// repeat wait ( 0 0$1 ) ;
105238: LD_INT 35
105240: PPUSH
105241: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
105245: LD_EXP 87
105249: PUSH
105250: LD_VAR 0 1
105254: ARRAY
105255: NOT
105256: PUSH
105257: LD_EXP 87
105261: PUSH
105262: LD_VAR 0 1
105266: ARRAY
105267: PUSH
105268: EMPTY
105269: EQUAL
105270: OR
105271: IFFALSE 105308
// begin for i in defenders do
105273: LD_ADDR_VAR 0 5
105277: PUSH
105278: LD_VAR 0 2
105282: PUSH
105283: FOR_IN
105284: IFFALSE 105297
// ComStop ( i ) ;
105286: LD_VAR 0 5
105290: PPUSH
105291: CALL_OW 141
105295: GO 105283
105297: POP
105298: POP
// defenders := [ ] ;
105299: LD_ADDR_VAR 0 2
105303: PUSH
105304: EMPTY
105305: ST_TO_ADDR
// exit ;
105306: GO 105494
// end ; for i in defenders do
105308: LD_ADDR_VAR 0 5
105312: PUSH
105313: LD_VAR 0 2
105317: PUSH
105318: FOR_IN
105319: IFFALSE 105408
// begin if not IsInArea ( i , mc_parking [ base ] ) then
105321: LD_VAR 0 5
105325: PPUSH
105326: LD_EXP 111
105330: PUSH
105331: LD_VAR 0 1
105335: ARRAY
105336: PPUSH
105337: CALL_OW 308
105341: NOT
105342: IFFALSE 105366
// ComMoveToArea ( i , mc_parking [ base ] ) else
105344: LD_VAR 0 5
105348: PPUSH
105349: LD_EXP 111
105353: PUSH
105354: LD_VAR 0 1
105358: ARRAY
105359: PPUSH
105360: CALL_OW 113
105364: GO 105406
// if GetControl ( i ) = control_manual then
105366: LD_VAR 0 5
105370: PPUSH
105371: CALL_OW 263
105375: PUSH
105376: LD_INT 1
105378: EQUAL
105379: IFFALSE 105406
// if IsDrivenBy ( i ) then
105381: LD_VAR 0 5
105385: PPUSH
105386: CALL_OW 311
105390: IFFALSE 105406
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
105392: LD_VAR 0 5
105396: PPUSH
105397: CALL_OW 311
105401: PPUSH
105402: CALL_OW 121
// end ;
105406: GO 105318
105408: POP
105409: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
105410: LD_VAR 0 2
105414: PPUSH
105415: LD_INT 95
105417: PUSH
105418: LD_EXP 111
105422: PUSH
105423: LD_VAR 0 1
105427: ARRAY
105428: PUSH
105429: EMPTY
105430: LIST
105431: LIST
105432: PPUSH
105433: CALL_OW 72
105437: PUSH
105438: LD_VAR 0 2
105442: EQUAL
105443: PUSH
105444: LD_EXP 110
105448: PUSH
105449: LD_VAR 0 1
105453: ARRAY
105454: OR
105455: PUSH
105456: LD_EXP 87
105460: PUSH
105461: LD_VAR 0 1
105465: ARRAY
105466: NOT
105467: OR
105468: IFFALSE 105238
// end ; MC_Reset ( base , 19 ) ;
105470: LD_VAR 0 1
105474: PPUSH
105475: LD_INT 19
105477: PPUSH
105478: CALL 24649 0 2
// MC_Reset ( base , 20 ) ;
105482: LD_VAR 0 1
105486: PPUSH
105487: LD_INT 20
105489: PPUSH
105490: CALL 24649 0 2
// end ;
105494: LD_VAR 0 4
105498: RET
