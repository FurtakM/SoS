// starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Action ;
  11: CALL 16 0 0
// end ; end_of_file
  15: END
// export function Action ; var John , Roth , veh ; begin
  16: LD_INT 0
  18: PPUSH
  19: PPUSH
  20: PPUSH
  21: PPUSH
// Video ( true ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL 38709 0 1
// PlaceSeeing ( 58 , 14 , 7 , - 26 ) ;
  29: LD_INT 58
  31: PPUSH
  32: LD_INT 14
  34: PPUSH
  35: LD_INT 7
  37: PPUSH
  38: LD_INT 26
  40: NEG
  41: PPUSH
  42: CALL_OW 330
// uc_side := 7 ;
  46: LD_ADDR_OWVAR 20
  50: PUSH
  51: LD_INT 7
  53: ST_TO_ADDR
// uc_nation := 1 ;
  54: LD_ADDR_OWVAR 21
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// John := NewCharacter ( JMM ) ;
  62: LD_ADDR_VAR 0 2
  66: PUSH
  67: LD_STRING JMM
  69: PPUSH
  70: CALL_OW 25
  74: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
  75: LD_ADDR_VAR 0 3
  79: PUSH
  80: LD_STRING Roth
  82: PPUSH
  83: CALL_OW 25
  87: ST_TO_ADDR
// SetDir ( John , 1 ) ;
  88: LD_VAR 0 2
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: CALL_OW 233
// SetDir ( Roth , 4 ) ;
 100: LD_VAR 0 3
 104: PPUSH
 105: LD_INT 4
 107: PPUSH
 108: CALL_OW 233
// PlaceUnitXY ( John , 55 , 14 , false ) ;
 112: LD_VAR 0 2
 116: PPUSH
 117: LD_INT 55
 119: PPUSH
 120: LD_INT 14
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: CALL_OW 48
// PlaceUnitXY ( Roth , 58 , 14 , false ) ;
 130: LD_VAR 0 3
 134: PPUSH
 135: LD_INT 58
 137: PPUSH
 138: LD_INT 14
 140: PPUSH
 141: LD_INT 0
 143: PPUSH
 144: CALL_OW 48
// ComTurnUnit ( John , Roth ) ;
 148: LD_VAR 0 2
 152: PPUSH
 153: LD_VAR 0 3
 157: PPUSH
 158: CALL_OW 119
// ComTurnUnit ( Roth , John ) ;
 162: LD_VAR 0 3
 166: PPUSH
 167: LD_VAR 0 2
 171: PPUSH
 172: CALL_OW 119
// CenterNowonUnits ( [ John , Roth ] ) ;
 176: LD_VAR 0 2
 180: PUSH
 181: LD_VAR 0 3
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PPUSH
 190: CALL_OW 87
// wait ( 0 0$0.5 ) ;
 194: LD_INT 18
 196: PPUSH
 197: CALL_OW 67
// Say ( Roth , DStart-Roth-1 ) ;
 201: LD_VAR 0 3
 205: PPUSH
 206: LD_STRING DStart-Roth-1
 208: PPUSH
 209: CALL_OW 88
// Say ( John , DStart-JMM-1 ) ;
 213: LD_VAR 0 2
 217: PPUSH
 218: LD_STRING DStart-JMM-1
 220: PPUSH
 221: CALL_OW 88
// Say ( Roth , DStart-Roth-2 ) ;
 225: LD_VAR 0 3
 229: PPUSH
 230: LD_STRING DStart-Roth-2
 232: PPUSH
 233: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 237: LD_INT 18
 239: PPUSH
 240: CALL_OW 67
// Say ( John , DStart-JMM-2 ) ;
 244: LD_VAR 0 2
 248: PPUSH
 249: LD_STRING DStart-JMM-2
 251: PPUSH
 252: CALL_OW 88
// Say ( Roth , DStart-Roth-3 ) ;
 256: LD_VAR 0 3
 260: PPUSH
 261: LD_STRING DStart-Roth-3
 263: PPUSH
 264: CALL_OW 88
// Say ( John , DStart-JMM-3 ) ;
 268: LD_VAR 0 2
 272: PPUSH
 273: LD_STRING DStart-JMM-3
 275: PPUSH
 276: CALL_OW 88
// uc_side := 1 ;
 280: LD_ADDR_OWVAR 20
 284: PUSH
 285: LD_INT 1
 287: ST_TO_ADDR
// uc_nation := 1 ;
 288: LD_ADDR_OWVAR 21
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 296: LD_ADDR_OWVAR 37
 300: PUSH
 301: LD_INT 2
 303: ST_TO_ADDR
// vc_engine := engine_siberite ;
 304: LD_ADDR_OWVAR 39
 308: PUSH
 309: LD_INT 3
 311: ST_TO_ADDR
// vc_control := control_manual ;
 312: LD_ADDR_OWVAR 38
 316: PUSH
 317: LD_INT 1
 319: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 320: LD_ADDR_OWVAR 40
 324: PUSH
 325: LD_INT 4
 327: ST_TO_ADDR
// veh := CreateVehicle ;
 328: LD_ADDR_VAR 0 4
 332: PUSH
 333: CALL_OW 45
 337: ST_TO_ADDR
// PlaceUnitXY ( veh , 43 , 41 , false ) ;
 338: LD_VAR 0 4
 342: PPUSH
 343: LD_INT 43
 345: PPUSH
 346: LD_INT 41
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 48
// PrepareMechanic ( false , 10 ) ;
 356: LD_INT 0
 358: PPUSH
 359: LD_INT 10
 361: PPUSH
 362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
 366: CALL_OW 44
 370: PPUSH
 371: LD_VAR 0 4
 375: PPUSH
 376: CALL_OW 52
// ComMoveXY ( veh , 24 , 2 ) ;
 380: LD_VAR 0 4
 384: PPUSH
 385: LD_INT 24
 387: PPUSH
 388: LD_INT 2
 390: PPUSH
 391: CALL_OW 111
// Say ( Roth , DStart-Roth-4 ) ;
 395: LD_VAR 0 3
 399: PPUSH
 400: LD_STRING DStart-Roth-4
 402: PPUSH
 403: CALL_OW 88
// Say ( John , DStart-JMM-4 ) ;
 407: LD_VAR 0 2
 411: PPUSH
 412: LD_STRING DStart-JMM-4
 414: PPUSH
 415: CALL_OW 88
// Say ( Roth , DStart-Roth-5 ) ;
 419: LD_VAR 0 3
 423: PPUSH
 424: LD_STRING DStart-Roth-5
 426: PPUSH
 427: CALL_OW 88
// Say ( John , DStart-JMM-5 ) ;
 431: LD_VAR 0 2
 435: PPUSH
 436: LD_STRING DStart-JMM-5
 438: PPUSH
 439: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 443: LD_INT 10
 445: PPUSH
 446: CALL_OW 67
// Say ( Roth , DStart-Roth-6 ) ;
 450: LD_VAR 0 3
 454: PPUSH
 455: LD_STRING DStart-Roth-6
 457: PPUSH
 458: CALL_OW 88
// wait ( 0 0$0.1 ) ;
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 67
// ComMoveXY ( John , 32 , 14 ) ;
 469: LD_VAR 0 2
 473: PPUSH
 474: LD_INT 32
 476: PPUSH
 477: LD_INT 14
 479: PPUSH
 480: CALL_OW 111
// wait ( 0 0$2 ) ;
 484: LD_INT 70
 486: PPUSH
 487: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
 491: LD_INT 1
 493: PPUSH
 494: LD_STRING %_cont
 496: PPUSH
 497: CALL_OW 340
// end ;
 501: LD_VAR 0 1
 505: RET
// every 0 0$1 trigger HexInfo ( 24 , 2 ) do
 506: LD_INT 24
 508: PPUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 428
 516: IFFALSE 536
 518: GO 520
 520: DISABLE
// RemoveUnit ( HexInfo ( 24 , 2 ) ) ; end_of_file
 521: LD_INT 24
 523: PPUSH
 524: LD_INT 2
 526: PPUSH
 527: CALL_OW 428
 531: PPUSH
 532: CALL_OW 64
 536: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// if exist_mode then
 541: LD_VAR 0 2
 545: IFFALSE 591
// begin unit := CreateCharacter ( prefix & ident ) ;
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: LD_VAR 0 3
 556: PUSH
 557: LD_VAR 0 1
 561: STR
 562: PPUSH
 563: CALL_OW 34
 567: ST_TO_ADDR
// if unit then
 568: LD_VAR 0 5
 572: IFFALSE 589
// DeleteCharacters ( prefix & ident ) ;
 574: LD_VAR 0 3
 578: PUSH
 579: LD_VAR 0 1
 583: STR
 584: PPUSH
 585: CALL_OW 40
// end else
 589: GO 606
// unit := NewCharacter ( ident ) ;
 591: LD_ADDR_VAR 0 5
 595: PUSH
 596: LD_VAR 0 1
 600: PPUSH
 601: CALL_OW 25
 605: ST_TO_ADDR
// result := unit ;
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 5
 615: ST_TO_ADDR
// end ;
 616: LD_VAR 0 4
 620: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// if exist_mode then
 625: LD_VAR 0 2
 629: IFFALSE 654
// unit := CreateCharacter ( prefix & ident ) else
 631: LD_ADDR_VAR 0 5
 635: PUSH
 636: LD_VAR 0 3
 640: PUSH
 641: LD_VAR 0 1
 645: STR
 646: PPUSH
 647: CALL_OW 34
 651: ST_TO_ADDR
 652: GO 669
// unit := NewCharacter ( ident ) ;
 654: LD_ADDR_VAR 0 5
 658: PUSH
 659: LD_VAR 0 1
 663: PPUSH
 664: CALL_OW 25
 668: ST_TO_ADDR
// result := unit ;
 669: LD_ADDR_VAR 0 4
 673: PUSH
 674: LD_VAR 0 5
 678: ST_TO_ADDR
// end ;
 679: LD_VAR 0 4
 683: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 684: LD_INT 0
 686: PPUSH
 687: PPUSH
// if not side or not nation then
 688: LD_VAR 0 1
 692: NOT
 693: IFTRUE 702
 695: PUSH
 696: LD_VAR 0 2
 700: NOT
 701: OR
 702: IFFALSE 706
// exit ;
 704: GO 1500
// case nation of nation_american :
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 1
 713: DOUBLE
 714: EQUAL
 715: IFTRUE 719
 717: GO 941
 719: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
 720: LD_ADDR_VAR 0 4
 724: PUSH
 725: LD_INT 35
 727: PUSH
 728: LD_INT 45
 730: PUSH
 731: LD_INT 46
 733: PUSH
 734: LD_INT 47
 736: PUSH
 737: LD_INT 82
 739: PUSH
 740: LD_INT 83
 742: PUSH
 743: LD_INT 84
 745: PUSH
 746: LD_INT 85
 748: PUSH
 749: LD_INT 86
 751: PUSH
 752: LD_INT 1
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 6
 760: PUSH
 761: LD_INT 15
 763: PUSH
 764: LD_INT 16
 766: PUSH
 767: LD_INT 7
 769: PUSH
 770: LD_INT 12
 772: PUSH
 773: LD_INT 13
 775: PUSH
 776: LD_INT 10
 778: PUSH
 779: LD_INT 14
 781: PUSH
 782: LD_INT 20
 784: PUSH
 785: LD_INT 21
 787: PUSH
 788: LD_INT 22
 790: PUSH
 791: LD_INT 25
 793: PUSH
 794: LD_INT 32
 796: PUSH
 797: LD_INT 27
 799: PUSH
 800: LD_INT 36
 802: PUSH
 803: LD_INT 69
 805: PUSH
 806: LD_INT 39
 808: PUSH
 809: LD_INT 34
 811: PUSH
 812: LD_INT 40
 814: PUSH
 815: LD_INT 48
 817: PUSH
 818: LD_INT 49
 820: PUSH
 821: LD_INT 50
 823: PUSH
 824: LD_INT 51
 826: PUSH
 827: LD_INT 52
 829: PUSH
 830: LD_INT 53
 832: PUSH
 833: LD_INT 54
 835: PUSH
 836: LD_INT 55
 838: PUSH
 839: LD_INT 56
 841: PUSH
 842: LD_INT 57
 844: PUSH
 845: LD_INT 58
 847: PUSH
 848: LD_INT 59
 850: PUSH
 851: LD_INT 60
 853: PUSH
 854: LD_INT 61
 856: PUSH
 857: LD_INT 62
 859: PUSH
 860: LD_INT 80
 862: PUSH
 863: LD_INT 82
 865: PUSH
 866: LD_INT 83
 868: PUSH
 869: LD_INT 84
 871: PUSH
 872: LD_INT 85
 874: PUSH
 875: LD_INT 86
 877: PUSH
 878: LD_INT 90
 880: PUSH
 881: LD_INT 93
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: LIST
 938: ST_TO_ADDR
 939: GO 1422
 941: LD_INT 2
 943: DOUBLE
 944: EQUAL
 945: IFTRUE 949
 947: GO 1183
 949: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
 950: LD_ADDR_VAR 0 4
 954: PUSH
 955: LD_INT 35
 957: PUSH
 958: LD_INT 45
 960: PUSH
 961: LD_INT 46
 963: PUSH
 964: LD_INT 47
 966: PUSH
 967: LD_INT 82
 969: PUSH
 970: LD_INT 83
 972: PUSH
 973: LD_INT 84
 975: PUSH
 976: LD_INT 85
 978: PUSH
 979: LD_INT 87
 981: PUSH
 982: LD_INT 70
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 11
 990: PUSH
 991: LD_INT 3
 993: PUSH
 994: LD_INT 4
 996: PUSH
 997: LD_INT 5
 999: PUSH
1000: LD_INT 6
1002: PUSH
1003: LD_INT 15
1005: PUSH
1006: LD_INT 18
1008: PUSH
1009: LD_INT 7
1011: PUSH
1012: LD_INT 17
1014: PUSH
1015: LD_INT 8
1017: PUSH
1018: LD_INT 20
1020: PUSH
1021: LD_INT 21
1023: PUSH
1024: LD_INT 22
1026: PUSH
1027: LD_INT 72
1029: PUSH
1030: LD_INT 26
1032: PUSH
1033: LD_INT 69
1035: PUSH
1036: LD_INT 39
1038: PUSH
1039: LD_INT 40
1041: PUSH
1042: LD_INT 41
1044: PUSH
1045: LD_INT 42
1047: PUSH
1048: LD_INT 43
1050: PUSH
1051: LD_INT 48
1053: PUSH
1054: LD_INT 49
1056: PUSH
1057: LD_INT 50
1059: PUSH
1060: LD_INT 51
1062: PUSH
1063: LD_INT 52
1065: PUSH
1066: LD_INT 53
1068: PUSH
1069: LD_INT 54
1071: PUSH
1072: LD_INT 55
1074: PUSH
1075: LD_INT 56
1077: PUSH
1078: LD_INT 60
1080: PUSH
1081: LD_INT 61
1083: PUSH
1084: LD_INT 62
1086: PUSH
1087: LD_INT 66
1089: PUSH
1090: LD_INT 67
1092: PUSH
1093: LD_INT 68
1095: PUSH
1096: LD_INT 81
1098: PUSH
1099: LD_INT 82
1101: PUSH
1102: LD_INT 83
1104: PUSH
1105: LD_INT 84
1107: PUSH
1108: LD_INT 85
1110: PUSH
1111: LD_INT 87
1113: PUSH
1114: LD_INT 88
1116: PUSH
1117: LD_INT 92
1119: PUSH
1120: LD_INT 94
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: ST_TO_ADDR
1181: GO 1422
1183: LD_INT 3
1185: DOUBLE
1186: EQUAL
1187: IFTRUE 1191
1189: GO 1421
1191: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_INT 46
1199: PUSH
1200: LD_INT 47
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 2
1208: PUSH
1209: LD_INT 82
1211: PUSH
1212: LD_INT 83
1214: PUSH
1215: LD_INT 84
1217: PUSH
1218: LD_INT 85
1220: PUSH
1221: LD_INT 86
1223: PUSH
1224: LD_INT 11
1226: PUSH
1227: LD_INT 9
1229: PUSH
1230: LD_INT 20
1232: PUSH
1233: LD_INT 19
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 24
1241: PUSH
1242: LD_INT 22
1244: PUSH
1245: LD_INT 25
1247: PUSH
1248: LD_INT 28
1250: PUSH
1251: LD_INT 29
1253: PUSH
1254: LD_INT 30
1256: PUSH
1257: LD_INT 31
1259: PUSH
1260: LD_INT 37
1262: PUSH
1263: LD_INT 38
1265: PUSH
1266: LD_INT 32
1268: PUSH
1269: LD_INT 27
1271: PUSH
1272: LD_INT 33
1274: PUSH
1275: LD_INT 69
1277: PUSH
1278: LD_INT 39
1280: PUSH
1281: LD_INT 34
1283: PUSH
1284: LD_INT 40
1286: PUSH
1287: LD_INT 71
1289: PUSH
1290: LD_INT 23
1292: PUSH
1293: LD_INT 44
1295: PUSH
1296: LD_INT 48
1298: PUSH
1299: LD_INT 49
1301: PUSH
1302: LD_INT 50
1304: PUSH
1305: LD_INT 51
1307: PUSH
1308: LD_INT 52
1310: PUSH
1311: LD_INT 53
1313: PUSH
1314: LD_INT 54
1316: PUSH
1317: LD_INT 55
1319: PUSH
1320: LD_INT 56
1322: PUSH
1323: LD_INT 57
1325: PUSH
1326: LD_INT 58
1328: PUSH
1329: LD_INT 59
1331: PUSH
1332: LD_INT 63
1334: PUSH
1335: LD_INT 64
1337: PUSH
1338: LD_INT 65
1340: PUSH
1341: LD_INT 82
1343: PUSH
1344: LD_INT 83
1346: PUSH
1347: LD_INT 84
1349: PUSH
1350: LD_INT 85
1352: PUSH
1353: LD_INT 86
1355: PUSH
1356: LD_INT 89
1358: PUSH
1359: LD_INT 91
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
1419: GO 1422
1421: POP
// if state > - 1 and state < 3 then
1422: LD_VAR 0 3
1426: PUSH
1427: LD_INT 1
1429: NEG
1430: GREATER
1431: IFFALSE 1443
1433: PUSH
1434: LD_VAR 0 3
1438: PUSH
1439: LD_INT 3
1441: LESS
1442: AND
1443: IFFALSE 1500
// for i in result do
1445: LD_ADDR_VAR 0 5
1449: PUSH
1450: LD_VAR 0 4
1454: PUSH
1455: FOR_IN
1456: IFFALSE 1498
// if GetTech ( i , side ) <> state then
1458: LD_VAR 0 5
1462: PPUSH
1463: LD_VAR 0 1
1467: PPUSH
1468: CALL_OW 321
1472: PUSH
1473: LD_VAR 0 3
1477: NONEQUAL
1478: IFFALSE 1496
// result := result diff i ;
1480: LD_ADDR_VAR 0 4
1484: PUSH
1485: LD_VAR 0 4
1489: PUSH
1490: LD_VAR 0 5
1494: DIFF
1495: ST_TO_ADDR
1496: GO 1455
1498: POP
1499: POP
// end ;
1500: LD_VAR 0 4
1504: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
// result := true ;
1510: LD_ADDR_VAR 0 3
1514: PUSH
1515: LD_INT 1
1517: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1518: LD_ADDR_VAR 0 5
1522: PUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 480
1532: ST_TO_ADDR
// if not tmp then
1533: LD_VAR 0 5
1537: NOT
1538: IFFALSE 1542
// exit ;
1540: GO 1591
// for i in tmp do
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_VAR 0 5
1551: PUSH
1552: FOR_IN
1553: IFFALSE 1589
// if GetTech ( i , side ) <> state_researched then
1555: LD_VAR 0 4
1559: PPUSH
1560: LD_VAR 0 1
1564: PPUSH
1565: CALL_OW 321
1569: PUSH
1570: LD_INT 2
1572: NONEQUAL
1573: IFFALSE 1587
// begin result := false ;
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 0
1582: ST_TO_ADDR
// exit ;
1583: POP
1584: POP
1585: GO 1591
// end ;
1587: GO 1552
1589: POP
1590: POP
// end ;
1591: LD_VAR 0 3
1595: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1596: LD_INT 0
1598: PPUSH
1599: PPUSH
1600: PPUSH
1601: PPUSH
1602: PPUSH
1603: PPUSH
1604: PPUSH
1605: PPUSH
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
1610: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1611: LD_VAR 0 1
1615: NOT
1616: IFTRUE 1633
1618: PUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 257
1628: PUSH
1629: LD_INT 9
1631: NONEQUAL
1632: OR
1633: IFFALSE 1637
// exit ;
1635: GO 2216
// side := GetSide ( unit ) ;
1637: LD_ADDR_VAR 0 9
1641: PUSH
1642: LD_VAR 0 1
1646: PPUSH
1647: CALL_OW 255
1651: ST_TO_ADDR
// tech_space := tech_spacanom ;
1652: LD_ADDR_VAR 0 12
1656: PUSH
1657: LD_INT 29
1659: ST_TO_ADDR
// tech_time := tech_taurad ;
1660: LD_ADDR_VAR 0 13
1664: PUSH
1665: LD_INT 28
1667: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1668: LD_ADDR_VAR 0 11
1672: PUSH
1673: LD_VAR 0 1
1677: PPUSH
1678: CALL_OW 310
1682: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1683: LD_VAR 0 11
1687: PPUSH
1688: CALL_OW 247
1692: PUSH
1693: LD_INT 2
1695: EQUAL
1696: IFFALSE 1700
// exit ;
1698: GO 2216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1700: LD_ADDR_VAR 0 8
1704: PUSH
1705: LD_INT 81
1707: PUSH
1708: LD_VAR 0 9
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: LD_INT 21
1722: PUSH
1723: LD_INT 3
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PPUSH
1738: CALL_OW 69
1742: ST_TO_ADDR
// if not tmp then
1743: LD_VAR 0 8
1747: NOT
1748: IFFALSE 1752
// exit ;
1750: GO 2216
// if in_unit then
1752: LD_VAR 0 11
1756: IFFALSE 1780
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1758: LD_ADDR_VAR 0 10
1762: PUSH
1763: LD_VAR 0 8
1767: PPUSH
1768: LD_VAR 0 11
1772: PPUSH
1773: CALL_OW 74
1777: ST_TO_ADDR
1778: GO 1800
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1780: LD_ADDR_VAR 0 10
1784: PUSH
1785: LD_VAR 0 8
1789: PPUSH
1790: LD_VAR 0 1
1794: PPUSH
1795: CALL_OW 74
1799: ST_TO_ADDR
// if not enemy then
1800: LD_VAR 0 10
1804: NOT
1805: IFFALSE 1809
// exit ;
1807: GO 2216
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1809: LD_VAR 0 11
1813: IFFALSE 1835
1815: PUSH
1816: LD_VAR 0 11
1820: PPUSH
1821: LD_VAR 0 10
1825: PPUSH
1826: CALL_OW 296
1830: PUSH
1831: LD_INT 13
1833: GREATER
1834: AND
1835: IFTRUE 1857
1837: PUSH
1838: LD_VAR 0 1
1842: PPUSH
1843: LD_VAR 0 10
1847: PPUSH
1848: CALL_OW 296
1852: PUSH
1853: LD_INT 12
1855: GREATER
1856: OR
1857: IFFALSE 1861
// exit ;
1859: GO 2216
// missile := [ 1 ] ;
1861: LD_ADDR_VAR 0 14
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: EMPTY
1870: LIST
1871: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1872: LD_VAR 0 9
1876: PPUSH
1877: LD_VAR 0 12
1881: PPUSH
1882: CALL_OW 325
1886: IFFALSE 1915
// missile := Replace ( missile , missile + 1 , 2 ) ;
1888: LD_ADDR_VAR 0 14
1892: PUSH
1893: LD_VAR 0 14
1897: PPUSH
1898: LD_VAR 0 14
1902: PUSH
1903: LD_INT 1
1905: PLUS
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: CALL_OW 1
1914: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1915: LD_VAR 0 9
1919: PPUSH
1920: LD_VAR 0 13
1924: PPUSH
1925: CALL_OW 325
1929: IFFALSE 1953
1931: PUSH
1932: LD_VAR 0 10
1936: PPUSH
1937: CALL_OW 255
1941: PPUSH
1942: LD_VAR 0 13
1946: PPUSH
1947: CALL_OW 325
1951: NOT
1952: AND
1953: IFFALSE 1982
// missile := Replace ( missile , missile + 1 , 3 ) ;
1955: LD_ADDR_VAR 0 14
1959: PUSH
1960: LD_VAR 0 14
1964: PPUSH
1965: LD_VAR 0 14
1969: PUSH
1970: LD_INT 1
1972: PLUS
1973: PPUSH
1974: LD_INT 3
1976: PPUSH
1977: CALL_OW 1
1981: ST_TO_ADDR
// if missile < 2 then
1982: LD_VAR 0 14
1986: PUSH
1987: LD_INT 2
1989: LESS
1990: IFFALSE 1994
// exit ;
1992: GO 2216
// x := GetX ( enemy ) ;
1994: LD_ADDR_VAR 0 4
1998: PUSH
1999: LD_VAR 0 10
2003: PPUSH
2004: CALL_OW 250
2008: ST_TO_ADDR
// y := GetY ( enemy ) ;
2009: LD_ADDR_VAR 0 5
2013: PUSH
2014: LD_VAR 0 10
2018: PPUSH
2019: CALL_OW 251
2023: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2024: LD_ADDR_VAR 0 6
2028: PUSH
2029: LD_VAR 0 4
2033: PUSH
2034: LD_INT 1
2036: NEG
2037: PPUSH
2038: LD_INT 1
2040: PPUSH
2041: CALL_OW 12
2045: PLUS
2046: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2047: LD_ADDR_VAR 0 7
2051: PUSH
2052: LD_VAR 0 5
2056: PUSH
2057: LD_INT 1
2059: NEG
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 12
2068: PLUS
2069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2070: LD_VAR 0 6
2074: PPUSH
2075: LD_VAR 0 7
2079: PPUSH
2080: CALL_OW 488
2084: NOT
2085: IFFALSE 2107
// begin _x := x ;
2087: LD_ADDR_VAR 0 6
2091: PUSH
2092: LD_VAR 0 4
2096: ST_TO_ADDR
// _y := y ;
2097: LD_ADDR_VAR 0 7
2101: PUSH
2102: LD_VAR 0 5
2106: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_VAR 0 14
2119: PPUSH
2120: CALL_OW 12
2124: ST_TO_ADDR
// case i of 1 :
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: DOUBLE
2133: EQUAL
2134: IFTRUE 2138
2136: GO 2155
2138: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2139: LD_VAR 0 1
2143: PPUSH
2144: LD_VAR 0 10
2148: PPUSH
2149: CALL_OW 115
2153: GO 2216
2155: LD_INT 2
2157: DOUBLE
2158: EQUAL
2159: IFTRUE 2163
2161: GO 2185
2163: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2164: LD_VAR 0 1
2168: PPUSH
2169: LD_VAR 0 6
2173: PPUSH
2174: LD_VAR 0 7
2178: PPUSH
2179: CALL_OW 153
2183: GO 2216
2185: LD_INT 3
2187: DOUBLE
2188: EQUAL
2189: IFTRUE 2193
2191: GO 2215
2193: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2194: LD_VAR 0 1
2198: PPUSH
2199: LD_VAR 0 6
2203: PPUSH
2204: LD_VAR 0 7
2208: PPUSH
2209: CALL_OW 154
2213: GO 2216
2215: POP
// end ;
2216: LD_VAR 0 2
2220: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
2228: PPUSH
// if not unit or not building then
2229: LD_VAR 0 1
2233: NOT
2234: IFTRUE 2243
2236: PUSH
2237: LD_VAR 0 2
2241: NOT
2242: OR
2243: IFFALSE 2247
// exit ;
2245: GO 2405
// x := GetX ( building ) ;
2247: LD_ADDR_VAR 0 5
2251: PUSH
2252: LD_VAR 0 2
2256: PPUSH
2257: CALL_OW 250
2261: ST_TO_ADDR
// y := GetY ( building ) ;
2262: LD_ADDR_VAR 0 6
2266: PUSH
2267: LD_VAR 0 2
2271: PPUSH
2272: CALL_OW 251
2276: ST_TO_ADDR
// for i := 0 to 5 do
2277: LD_ADDR_VAR 0 4
2281: PUSH
2282: DOUBLE
2283: LD_INT 0
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 5
2289: PUSH
2290: FOR_TO
2291: IFFALSE 2403
// begin _x := ShiftX ( x , i , 3 ) ;
2293: LD_ADDR_VAR 0 7
2297: PUSH
2298: LD_VAR 0 5
2302: PPUSH
2303: LD_VAR 0 4
2307: PPUSH
2308: LD_INT 3
2310: PPUSH
2311: CALL_OW 272
2315: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2316: LD_ADDR_VAR 0 8
2320: PUSH
2321: LD_VAR 0 6
2325: PPUSH
2326: LD_VAR 0 4
2330: PPUSH
2331: LD_INT 3
2333: PPUSH
2334: CALL_OW 273
2338: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2339: LD_VAR 0 7
2343: PPUSH
2344: LD_VAR 0 8
2348: PPUSH
2349: CALL_OW 488
2353: NOT
2354: IFFALSE 2358
// continue ;
2356: GO 2290
// if HexInfo ( _x , _y ) = 0 then
2358: LD_VAR 0 7
2362: PPUSH
2363: LD_VAR 0 8
2367: PPUSH
2368: CALL_OW 428
2372: PUSH
2373: LD_INT 0
2375: EQUAL
2376: IFFALSE 2401
// begin ComMoveXY ( unit , _x , _y ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_VAR 0 7
2387: PPUSH
2388: LD_VAR 0 8
2392: PPUSH
2393: CALL_OW 111
// exit ;
2397: POP
2398: POP
2399: GO 2405
// end ; end ;
2401: GO 2290
2403: POP
2404: POP
// end ;
2405: LD_VAR 0 3
2409: RET
// export function ScanBase ( side , base_area ) ; begin
2410: LD_INT 0
2412: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2413: LD_ADDR_VAR 0 3
2417: PUSH
2418: LD_VAR 0 2
2422: PPUSH
2423: LD_INT 81
2425: PUSH
2426: LD_VAR 0 1
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PPUSH
2435: CALL_OW 70
2439: ST_TO_ADDR
// end ;
2440: LD_VAR 0 3
2444: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2445: LD_INT 0
2447: PPUSH
2448: PPUSH
2449: PPUSH
2450: PPUSH
// result := false ;
2451: LD_ADDR_VAR 0 2
2455: PUSH
2456: LD_INT 0
2458: ST_TO_ADDR
// side := GetSide ( unit ) ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 1
2468: PPUSH
2469: CALL_OW 255
2473: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2474: LD_ADDR_VAR 0 4
2478: PUSH
2479: LD_VAR 0 1
2483: PPUSH
2484: CALL_OW 248
2488: ST_TO_ADDR
// case nat of 1 :
2489: LD_VAR 0 4
2493: PUSH
2494: LD_INT 1
2496: DOUBLE
2497: EQUAL
2498: IFTRUE 2502
2500: GO 2513
2502: POP
// tech := tech_lassight ; 2 :
2503: LD_ADDR_VAR 0 5
2507: PUSH
2508: LD_INT 12
2510: ST_TO_ADDR
2511: GO 2552
2513: LD_INT 2
2515: DOUBLE
2516: EQUAL
2517: IFTRUE 2521
2519: GO 2532
2521: POP
// tech := tech_mortar ; 3 :
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 41
2529: ST_TO_ADDR
2530: GO 2552
2532: LD_INT 3
2534: DOUBLE
2535: EQUAL
2536: IFTRUE 2540
2538: GO 2551
2540: POP
// tech := tech_bazooka ; end ;
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_INT 44
2548: ST_TO_ADDR
2549: GO 2552
2551: POP
// if Researched ( side , tech ) then
2552: LD_VAR 0 3
2556: PPUSH
2557: LD_VAR 0 5
2561: PPUSH
2562: CALL_OW 325
2566: IFFALSE 2593
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2568: LD_ADDR_VAR 0 2
2572: PUSH
2573: LD_INT 5
2575: PUSH
2576: LD_INT 8
2578: PUSH
2579: LD_INT 9
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: LIST
2586: PUSH
2587: LD_VAR 0 4
2591: ARRAY
2592: ST_TO_ADDR
// end ;
2593: LD_VAR 0 2
2597: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2598: LD_INT 0
2600: PPUSH
2601: PPUSH
2602: PPUSH
// if not mines then
2603: LD_VAR 0 2
2607: NOT
2608: IFFALSE 2612
// exit ;
2610: GO 2756
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2612: LD_ADDR_VAR 0 5
2616: PUSH
2617: LD_INT 81
2619: PUSH
2620: LD_VAR 0 1
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 3
2631: PUSH
2632: LD_INT 21
2634: PUSH
2635: LD_INT 3
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PPUSH
2650: CALL_OW 69
2654: ST_TO_ADDR
// for i in mines do
2655: LD_ADDR_VAR 0 4
2659: PUSH
2660: LD_VAR 0 2
2664: PUSH
2665: FOR_IN
2666: IFFALSE 2754
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2668: LD_VAR 0 4
2672: PUSH
2673: LD_INT 1
2675: ARRAY
2676: PPUSH
2677: LD_VAR 0 4
2681: PUSH
2682: LD_INT 2
2684: ARRAY
2685: PPUSH
2686: CALL_OW 458
2690: NOT
2691: IFFALSE 2695
// continue ;
2693: GO 2665
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2695: LD_VAR 0 4
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PPUSH
2704: LD_VAR 0 4
2708: PUSH
2709: LD_INT 2
2711: ARRAY
2712: PPUSH
2713: CALL_OW 428
2717: PUSH
2718: LD_VAR 0 5
2722: IN
2723: IFFALSE 2752
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2725: LD_VAR 0 4
2729: PUSH
2730: LD_INT 1
2732: ARRAY
2733: PPUSH
2734: LD_VAR 0 4
2738: PUSH
2739: LD_INT 2
2741: ARRAY
2742: PPUSH
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 456
// end ;
2752: GO 2665
2754: POP
2755: POP
// end ;
2756: LD_VAR 0 3
2760: RET
// export function Count ( array ) ; begin
2761: LD_INT 0
2763: PPUSH
// result := array + 0 ;
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_VAR 0 1
2773: PUSH
2774: LD_INT 0
2776: PLUS
2777: ST_TO_ADDR
// end ;
2778: LD_VAR 0 2
2782: RET
// export function IsEmpty ( building ) ; begin
2783: LD_INT 0
2785: PPUSH
// if not building then
2786: LD_VAR 0 1
2790: NOT
2791: IFFALSE 2795
// exit ;
2793: GO 2838
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2795: LD_ADDR_VAR 0 2
2799: PUSH
2800: LD_VAR 0 1
2804: PUSH
2805: LD_INT 22
2807: PUSH
2808: LD_VAR 0 1
2812: PPUSH
2813: CALL_OW 255
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 58
2824: PUSH
2825: EMPTY
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: IN
2837: ST_TO_ADDR
// end ;
2838: LD_VAR 0 2
2842: RET
// export function IsNotFull ( building ) ; var places ; begin
2843: LD_INT 0
2845: PPUSH
2846: PPUSH
// if not building then
2847: LD_VAR 0 1
2851: NOT
2852: IFFALSE 2856
// exit ;
2854: GO 2884
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: LD_VAR 0 1
2865: PPUSH
2866: LD_INT 3
2868: PUSH
2869: LD_INT 62
2871: PUSH
2872: EMPTY
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 72
2883: ST_TO_ADDR
// end ;
2884: LD_VAR 0 2
2888: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
2894: PPUSH
// tmp := [ ] ;
2895: LD_ADDR_VAR 0 3
2899: PUSH
2900: EMPTY
2901: ST_TO_ADDR
// list := [ ] ;
2902: LD_ADDR_VAR 0 5
2906: PUSH
2907: EMPTY
2908: ST_TO_ADDR
// for i = 16 to 25 do
2909: LD_ADDR_VAR 0 4
2913: PUSH
2914: DOUBLE
2915: LD_INT 16
2917: DEC
2918: ST_TO_ADDR
2919: LD_INT 25
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2996
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2925: LD_ADDR_VAR 0 3
2929: PUSH
2930: LD_VAR 0 3
2934: PUSH
2935: LD_INT 22
2937: PUSH
2938: LD_VAR 0 1
2942: PPUSH
2943: CALL_OW 255
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: LD_INT 91
2954: PUSH
2955: LD_VAR 0 1
2959: PUSH
2960: LD_INT 6
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 30
2970: PUSH
2971: LD_VAR 0 4
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: LIST
2984: PUSH
2985: EMPTY
2986: LIST
2987: PPUSH
2988: CALL_OW 69
2992: ADD
2993: ST_TO_ADDR
2994: GO 2922
2996: POP
2997: POP
// for i = 1 to tmp do
2998: LD_ADDR_VAR 0 4
3002: PUSH
3003: DOUBLE
3004: LD_INT 1
3006: DEC
3007: ST_TO_ADDR
3008: LD_VAR 0 3
3012: PUSH
3013: FOR_TO
3014: IFFALSE 3102
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3016: LD_ADDR_VAR 0 5
3020: PUSH
3021: LD_VAR 0 5
3025: PUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_VAR 0 4
3035: ARRAY
3036: PPUSH
3037: CALL_OW 266
3041: PUSH
3042: LD_VAR 0 3
3046: PUSH
3047: LD_VAR 0 4
3051: ARRAY
3052: PPUSH
3053: CALL_OW 250
3057: PUSH
3058: LD_VAR 0 3
3062: PUSH
3063: LD_VAR 0 4
3067: ARRAY
3068: PPUSH
3069: CALL_OW 251
3073: PUSH
3074: LD_VAR 0 3
3078: PUSH
3079: LD_VAR 0 4
3083: ARRAY
3084: PPUSH
3085: CALL_OW 254
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: ADD
3099: ST_TO_ADDR
3100: GO 3013
3102: POP
3103: POP
// result := list ;
3104: LD_ADDR_VAR 0 2
3108: PUSH
3109: LD_VAR 0 5
3113: ST_TO_ADDR
// end ;
3114: LD_VAR 0 2
3118: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3119: LD_INT 0
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
// if not factory then
3128: LD_VAR 0 1
3132: NOT
3133: IFFALSE 3137
// exit ;
3135: GO 3740
// if control = control_apeman then
3137: LD_VAR 0 4
3141: PUSH
3142: LD_INT 5
3144: EQUAL
3145: IFFALSE 3254
// begin tmp := UnitsInside ( factory ) ;
3147: LD_ADDR_VAR 0 8
3151: PUSH
3152: LD_VAR 0 1
3156: PPUSH
3157: CALL_OW 313
3161: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3162: LD_VAR 0 8
3166: PPUSH
3167: LD_INT 25
3169: PUSH
3170: LD_INT 12
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PPUSH
3177: CALL_OW 72
3181: NOT
3182: IFFALSE 3192
// control := control_manual ;
3184: LD_ADDR_VAR 0 4
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3192: LD_ADDR_VAR 0 8
3196: PUSH
3197: LD_VAR 0 1
3201: PPUSH
3202: CALL 2889 0 1
3206: ST_TO_ADDR
// if tmp then
3207: LD_VAR 0 8
3211: IFFALSE 3254
// begin for i in tmp do
3213: LD_ADDR_VAR 0 7
3217: PUSH
3218: LD_VAR 0 8
3222: PUSH
3223: FOR_IN
3224: IFFALSE 3252
// if i [ 1 ] = b_ext_radio then
3226: LD_VAR 0 7
3230: PUSH
3231: LD_INT 1
3233: ARRAY
3234: PUSH
3235: LD_INT 22
3237: EQUAL
3238: IFFALSE 3250
// begin control := control_remote ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_INT 2
3247: ST_TO_ADDR
// break ;
3248: GO 3252
// end ;
3250: GO 3223
3252: POP
3253: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3254: LD_VAR 0 1
3258: PPUSH
3259: LD_VAR 0 2
3263: PPUSH
3264: LD_VAR 0 3
3268: PPUSH
3269: LD_VAR 0 4
3273: PPUSH
3274: LD_VAR 0 5
3278: PPUSH
3279: CALL_OW 448
3283: IFFALSE 3318
// begin result := [ chassis , engine , control , weapon ] ;
3285: LD_ADDR_VAR 0 6
3289: PUSH
3290: LD_VAR 0 2
3294: PUSH
3295: LD_VAR 0 3
3299: PUSH
3300: LD_VAR 0 4
3304: PUSH
3305: LD_VAR 0 5
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: ST_TO_ADDR
// exit ;
3316: GO 3740
// end ; _chassis := AvailableChassisList ( factory ) ;
3318: LD_ADDR_VAR 0 9
3322: PUSH
3323: LD_VAR 0 1
3327: PPUSH
3328: CALL_OW 475
3332: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3333: LD_ADDR_VAR 0 11
3337: PUSH
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 476
3347: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3348: LD_ADDR_VAR 0 12
3352: PUSH
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL_OW 477
3362: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3363: LD_ADDR_VAR 0 10
3367: PUSH
3368: LD_VAR 0 1
3372: PPUSH
3373: CALL_OW 478
3377: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3378: LD_VAR 0 9
3382: NOT
3383: IFTRUE 3392
3385: PUSH
3386: LD_VAR 0 11
3390: NOT
3391: OR
3392: IFTRUE 3401
3394: PUSH
3395: LD_VAR 0 12
3399: NOT
3400: OR
3401: IFTRUE 3410
3403: PUSH
3404: LD_VAR 0 10
3408: NOT
3409: OR
3410: IFFALSE 3445
// begin result := [ chassis , engine , control , weapon ] ;
3412: LD_ADDR_VAR 0 6
3416: PUSH
3417: LD_VAR 0 2
3421: PUSH
3422: LD_VAR 0 3
3426: PUSH
3427: LD_VAR 0 4
3431: PUSH
3432: LD_VAR 0 5
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// exit ;
3443: GO 3740
// end ; if not chassis in _chassis then
3445: LD_VAR 0 2
3449: PUSH
3450: LD_VAR 0 9
3454: IN
3455: NOT
3456: IFFALSE 3482
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3458: LD_ADDR_VAR 0 2
3462: PUSH
3463: LD_VAR 0 9
3467: PUSH
3468: LD_INT 1
3470: PPUSH
3471: LD_VAR 0 9
3475: PPUSH
3476: CALL_OW 12
3480: ARRAY
3481: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3482: LD_VAR 0 2
3486: PPUSH
3487: LD_VAR 0 3
3491: PPUSH
3492: CALL 3745 0 2
3496: NOT
3497: IFFALSE 3558
// repeat engine := _engine [ 1 ] ;
3499: LD_ADDR_VAR 0 3
3503: PUSH
3504: LD_VAR 0 11
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3513: LD_ADDR_VAR 0 11
3517: PUSH
3518: LD_VAR 0 11
3522: PPUSH
3523: LD_INT 1
3525: PPUSH
3526: CALL_OW 3
3530: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_VAR 0 3
3540: PPUSH
3541: CALL 3745 0 2
3545: IFTRUE 3556
3547: PUSH
3548: LD_VAR 0 11
3552: PUSH
3553: EMPTY
3554: EQUAL
3555: OR
3556: IFFALSE 3499
// if not control in _control then
3558: LD_VAR 0 4
3562: PUSH
3563: LD_VAR 0 12
3567: IN
3568: NOT
3569: IFFALSE 3595
// control := _control [ rand ( 1 , _control ) ] ;
3571: LD_ADDR_VAR 0 4
3575: PUSH
3576: LD_VAR 0 12
3580: PUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_VAR 0 12
3588: PPUSH
3589: CALL_OW 12
3593: ARRAY
3594: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3595: LD_VAR 0 2
3599: PPUSH
3600: LD_VAR 0 5
3604: PPUSH
3605: CALL 3967 0 2
3609: NOT
3610: IFFALSE 3671
// repeat weapon := _weapon [ 1 ] ;
3612: LD_ADDR_VAR 0 5
3616: PUSH
3617: LD_VAR 0 10
3621: PUSH
3622: LD_INT 1
3624: ARRAY
3625: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3626: LD_ADDR_VAR 0 10
3630: PUSH
3631: LD_VAR 0 10
3635: PPUSH
3636: LD_INT 1
3638: PPUSH
3639: CALL_OW 3
3643: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3644: LD_VAR 0 2
3648: PPUSH
3649: LD_VAR 0 5
3653: PPUSH
3654: CALL 3967 0 2
3658: IFTRUE 3669
3660: PUSH
3661: LD_VAR 0 10
3665: PUSH
3666: EMPTY
3667: EQUAL
3668: OR
3669: IFFALSE 3612
// result := [ ] ;
3671: LD_ADDR_VAR 0 6
3675: PUSH
3676: EMPTY
3677: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3678: LD_VAR 0 1
3682: PPUSH
3683: LD_VAR 0 2
3687: PPUSH
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_VAR 0 4
3697: PPUSH
3698: LD_VAR 0 5
3702: PPUSH
3703: CALL_OW 448
3707: IFFALSE 3740
// result := [ chassis , engine , control , weapon ] ;
3709: LD_ADDR_VAR 0 6
3713: PUSH
3714: LD_VAR 0 2
3718: PUSH
3719: LD_VAR 0 3
3723: PUSH
3724: LD_VAR 0 4
3728: PUSH
3729: LD_VAR 0 5
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: ST_TO_ADDR
// end ;
3740: LD_VAR 0 6
3744: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3745: LD_INT 0
3747: PPUSH
// if not chassis or not engine then
3748: LD_VAR 0 1
3752: NOT
3753: IFTRUE 3762
3755: PUSH
3756: LD_VAR 0 2
3760: NOT
3761: OR
3762: IFFALSE 3766
// exit ;
3764: GO 3962
// case engine of engine_solar :
3766: LD_VAR 0 2
3770: PUSH
3771: LD_INT 2
3773: DOUBLE
3774: EQUAL
3775: IFTRUE 3779
3777: GO 3817
3779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3780: LD_ADDR_VAR 0 3
3784: PUSH
3785: LD_INT 11
3787: PUSH
3788: LD_INT 12
3790: PUSH
3791: LD_INT 13
3793: PUSH
3794: LD_INT 14
3796: PUSH
3797: LD_INT 1
3799: PUSH
3800: LD_INT 2
3802: PUSH
3803: LD_INT 3
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: ST_TO_ADDR
3815: GO 3946
3817: LD_INT 1
3819: DOUBLE
3820: EQUAL
3821: IFTRUE 3825
3823: GO 3887
3825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3826: LD_ADDR_VAR 0 3
3830: PUSH
3831: LD_INT 11
3833: PUSH
3834: LD_INT 12
3836: PUSH
3837: LD_INT 13
3839: PUSH
3840: LD_INT 14
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: LD_INT 3
3851: PUSH
3852: LD_INT 4
3854: PUSH
3855: LD_INT 5
3857: PUSH
3858: LD_INT 21
3860: PUSH
3861: LD_INT 23
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 24
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: ST_TO_ADDR
3885: GO 3946
3887: LD_INT 3
3889: DOUBLE
3890: EQUAL
3891: IFTRUE 3895
3893: GO 3945
3895: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3896: LD_ADDR_VAR 0 3
3900: PUSH
3901: LD_INT 13
3903: PUSH
3904: LD_INT 14
3906: PUSH
3907: LD_INT 2
3909: PUSH
3910: LD_INT 3
3912: PUSH
3913: LD_INT 4
3915: PUSH
3916: LD_INT 5
3918: PUSH
3919: LD_INT 21
3921: PUSH
3922: LD_INT 22
3924: PUSH
3925: LD_INT 23
3927: PUSH
3928: LD_INT 24
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: ST_TO_ADDR
3943: GO 3946
3945: POP
// result := ( chassis in result ) ;
3946: LD_ADDR_VAR 0 3
3950: PUSH
3951: LD_VAR 0 1
3955: PUSH
3956: LD_VAR 0 3
3960: IN
3961: ST_TO_ADDR
// end ;
3962: LD_VAR 0 3
3966: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3967: LD_INT 0
3969: PPUSH
// if not chassis or not weapon then
3970: LD_VAR 0 1
3974: NOT
3975: IFTRUE 3984
3977: PUSH
3978: LD_VAR 0 2
3982: NOT
3983: OR
3984: IFFALSE 3988
// exit ;
3986: GO 5082
// case weapon of us_machine_gun :
3988: LD_VAR 0 2
3992: PUSH
3993: LD_INT 2
3995: DOUBLE
3996: EQUAL
3997: IFTRUE 4001
3999: GO 4031
4001: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4002: LD_ADDR_VAR 0 3
4006: PUSH
4007: LD_INT 1
4009: PUSH
4010: LD_INT 2
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: ST_TO_ADDR
4029: GO 5066
4031: LD_INT 3
4033: DOUBLE
4034: EQUAL
4035: IFTRUE 4039
4037: GO 4069
4039: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4040: LD_ADDR_VAR 0 3
4044: PUSH
4045: LD_INT 1
4047: PUSH
4048: LD_INT 2
4050: PUSH
4051: LD_INT 3
4053: PUSH
4054: LD_INT 4
4056: PUSH
4057: LD_INT 5
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: ST_TO_ADDR
4067: GO 5066
4069: LD_INT 11
4071: DOUBLE
4072: EQUAL
4073: IFTRUE 4077
4075: GO 4107
4077: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4078: LD_ADDR_VAR 0 3
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: LD_INT 2
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: LD_INT 4
4094: PUSH
4095: LD_INT 5
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: ST_TO_ADDR
4105: GO 5066
4107: LD_INT 4
4109: DOUBLE
4110: EQUAL
4111: IFTRUE 4115
4113: GO 4141
4115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4116: LD_ADDR_VAR 0 3
4120: PUSH
4121: LD_INT 2
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: LD_INT 5
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: ST_TO_ADDR
4139: GO 5066
4141: LD_INT 5
4143: DOUBLE
4144: EQUAL
4145: IFTRUE 4149
4147: GO 4175
4149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4150: LD_ADDR_VAR 0 3
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 5066
4175: LD_INT 9
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4209
4183: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: LD_INT 2
4191: PUSH
4192: LD_INT 3
4194: PUSH
4195: LD_INT 4
4197: PUSH
4198: LD_INT 5
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
4207: GO 5066
4209: LD_INT 7
4211: DOUBLE
4212: EQUAL
4213: IFTRUE 4217
4215: GO 4243
4217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4218: LD_ADDR_VAR 0 3
4222: PUSH
4223: LD_INT 2
4225: PUSH
4226: LD_INT 3
4228: PUSH
4229: LD_INT 4
4231: PUSH
4232: LD_INT 5
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: ST_TO_ADDR
4241: GO 5066
4243: LD_INT 12
4245: DOUBLE
4246: EQUAL
4247: IFTRUE 4251
4249: GO 4277
4251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4252: LD_ADDR_VAR 0 3
4256: PUSH
4257: LD_INT 2
4259: PUSH
4260: LD_INT 3
4262: PUSH
4263: LD_INT 4
4265: PUSH
4266: LD_INT 5
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: ST_TO_ADDR
4275: GO 5066
4277: LD_INT 13
4279: DOUBLE
4280: EQUAL
4281: IFTRUE 4285
4283: GO 4311
4285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4286: LD_ADDR_VAR 0 3
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: LD_INT 4
4299: PUSH
4300: LD_INT 5
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: ST_TO_ADDR
4309: GO 5066
4311: LD_INT 14
4313: DOUBLE
4314: EQUAL
4315: IFTRUE 4319
4317: GO 4337
4319: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4320: LD_ADDR_VAR 0 3
4324: PUSH
4325: LD_INT 4
4327: PUSH
4328: LD_INT 5
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: ST_TO_ADDR
4335: GO 5066
4337: LD_INT 6
4339: DOUBLE
4340: EQUAL
4341: IFTRUE 4345
4343: GO 4363
4345: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: LD_INT 5
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: ST_TO_ADDR
4361: GO 5066
4363: LD_INT 10
4365: DOUBLE
4366: EQUAL
4367: IFTRUE 4371
4369: GO 4389
4371: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: LD_INT 4
4379: PUSH
4380: LD_INT 5
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
4387: GO 5066
4389: LD_INT 22
4391: DOUBLE
4392: EQUAL
4393: IFTRUE 4397
4395: GO 4423
4397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4398: LD_ADDR_VAR 0 3
4402: PUSH
4403: LD_INT 11
4405: PUSH
4406: LD_INT 12
4408: PUSH
4409: LD_INT 13
4411: PUSH
4412: LD_INT 14
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: ST_TO_ADDR
4421: GO 5066
4423: LD_INT 23
4425: DOUBLE
4426: EQUAL
4427: IFTRUE 4431
4429: GO 4457
4431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4432: LD_ADDR_VAR 0 3
4436: PUSH
4437: LD_INT 11
4439: PUSH
4440: LD_INT 12
4442: PUSH
4443: LD_INT 13
4445: PUSH
4446: LD_INT 14
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
4455: GO 5066
4457: LD_INT 24
4459: DOUBLE
4460: EQUAL
4461: IFTRUE 4465
4463: GO 4491
4465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: LD_INT 11
4473: PUSH
4474: LD_INT 12
4476: PUSH
4477: LD_INT 13
4479: PUSH
4480: LD_INT 14
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: ST_TO_ADDR
4489: GO 5066
4491: LD_INT 30
4493: DOUBLE
4494: EQUAL
4495: IFTRUE 4499
4497: GO 4525
4499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4500: LD_ADDR_VAR 0 3
4504: PUSH
4505: LD_INT 11
4507: PUSH
4508: LD_INT 12
4510: PUSH
4511: LD_INT 13
4513: PUSH
4514: LD_INT 14
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: ST_TO_ADDR
4523: GO 5066
4525: LD_INT 25
4527: DOUBLE
4528: EQUAL
4529: IFTRUE 4533
4531: GO 4551
4533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4534: LD_ADDR_VAR 0 3
4538: PUSH
4539: LD_INT 13
4541: PUSH
4542: LD_INT 14
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: ST_TO_ADDR
4549: GO 5066
4551: LD_INT 27
4553: DOUBLE
4554: EQUAL
4555: IFTRUE 4559
4557: GO 4577
4559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4560: LD_ADDR_VAR 0 3
4564: PUSH
4565: LD_INT 13
4567: PUSH
4568: LD_INT 14
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: ST_TO_ADDR
4575: GO 5066
4577: LD_INT 92
4579: DOUBLE
4580: EQUAL
4581: IFTRUE 4585
4583: GO 4611
4585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4586: LD_ADDR_VAR 0 3
4590: PUSH
4591: LD_INT 11
4593: PUSH
4594: LD_INT 12
4596: PUSH
4597: LD_INT 13
4599: PUSH
4600: LD_INT 14
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: ST_TO_ADDR
4609: GO 5066
4611: LD_INT 28
4613: DOUBLE
4614: EQUAL
4615: IFTRUE 4619
4617: GO 4637
4619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_INT 13
4627: PUSH
4628: LD_INT 14
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: ST_TO_ADDR
4635: GO 5066
4637: LD_INT 29
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4663
4645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_INT 13
4653: PUSH
4654: LD_INT 14
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: ST_TO_ADDR
4661: GO 5066
4663: LD_INT 31
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4689
4671: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4672: LD_ADDR_VAR 0 3
4676: PUSH
4677: LD_INT 13
4679: PUSH
4680: LD_INT 14
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: ST_TO_ADDR
4687: GO 5066
4689: LD_INT 26
4691: DOUBLE
4692: EQUAL
4693: IFTRUE 4697
4695: GO 4715
4697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_INT 13
4705: PUSH
4706: LD_INT 14
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: ST_TO_ADDR
4713: GO 5066
4715: LD_INT 42
4717: DOUBLE
4718: EQUAL
4719: IFTRUE 4723
4721: GO 4749
4723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4724: LD_ADDR_VAR 0 3
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 22
4734: PUSH
4735: LD_INT 23
4737: PUSH
4738: LD_INT 24
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 5066
4749: LD_INT 43
4751: DOUBLE
4752: EQUAL
4753: IFTRUE 4757
4755: GO 4783
4757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 22
4768: PUSH
4769: LD_INT 23
4771: PUSH
4772: LD_INT 24
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5066
4783: LD_INT 44
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4817
4791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 23
4805: PUSH
4806: LD_INT 24
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: ST_TO_ADDR
4815: GO 5066
4817: LD_INT 45
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4851
4825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: LD_INT 21
4833: PUSH
4834: LD_INT 22
4836: PUSH
4837: LD_INT 23
4839: PUSH
4840: LD_INT 24
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: ST_TO_ADDR
4849: GO 5066
4851: LD_INT 49
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4885
4859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_INT 21
4867: PUSH
4868: LD_INT 22
4870: PUSH
4871: LD_INT 23
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: ST_TO_ADDR
4883: GO 5066
4885: LD_INT 51
4887: DOUBLE
4888: EQUAL
4889: IFTRUE 4893
4891: GO 4919
4893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: LD_INT 21
4901: PUSH
4902: LD_INT 22
4904: PUSH
4905: LD_INT 23
4907: PUSH
4908: LD_INT 24
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
4917: GO 5066
4919: LD_INT 52
4921: DOUBLE
4922: EQUAL
4923: IFTRUE 4927
4925: GO 4953
4927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: LD_INT 21
4935: PUSH
4936: LD_INT 22
4938: PUSH
4939: LD_INT 23
4941: PUSH
4942: LD_INT 24
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
4951: GO 5066
4953: LD_INT 53
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4979
4961: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 23
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 5066
4979: LD_INT 46
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5005
4987: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_INT 23
4995: PUSH
4996: LD_INT 24
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: ST_TO_ADDR
5003: GO 5066
5005: LD_INT 47
5007: DOUBLE
5008: EQUAL
5009: IFTRUE 5013
5011: GO 5031
5013: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
5014: LD_ADDR_VAR 0 3
5018: PUSH
5019: LD_INT 23
5021: PUSH
5022: LD_INT 24
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: ST_TO_ADDR
5029: GO 5066
5031: LD_INT 98
5033: DOUBLE
5034: EQUAL
5035: IFTRUE 5039
5037: GO 5065
5039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5040: LD_ADDR_VAR 0 3
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 22
5050: PUSH
5051: LD_INT 23
5053: PUSH
5054: LD_INT 24
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
5063: GO 5066
5065: POP
// result := ( chassis in result ) ;
5066: LD_ADDR_VAR 0 3
5070: PUSH
5071: LD_VAR 0 1
5075: PUSH
5076: LD_VAR 0 3
5080: IN
5081: ST_TO_ADDR
// end ;
5082: LD_VAR 0 3
5086: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5087: LD_INT 0
5089: PPUSH
5090: PPUSH
5091: PPUSH
5092: PPUSH
5093: PPUSH
5094: PPUSH
5095: PPUSH
// result := array ;
5096: LD_ADDR_VAR 0 5
5100: PUSH
5101: LD_VAR 0 1
5105: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5106: LD_VAR 0 1
5110: NOT
5111: IFTRUE 5120
5113: PUSH
5114: LD_VAR 0 2
5118: NOT
5119: OR
5120: IFTRUE 5129
5122: PUSH
5123: LD_VAR 0 3
5127: NOT
5128: OR
5129: IFTRUE 5143
5131: PUSH
5132: LD_VAR 0 2
5136: PUSH
5137: LD_VAR 0 1
5141: GREATER
5142: OR
5143: IFTRUE 5157
5145: PUSH
5146: LD_VAR 0 3
5150: PUSH
5151: LD_VAR 0 1
5155: GREATER
5156: OR
5157: IFFALSE 5161
// exit ;
5159: GO 5457
// if direction then
5161: LD_VAR 0 4
5165: IFFALSE 5229
// begin d := 1 ;
5167: LD_ADDR_VAR 0 9
5171: PUSH
5172: LD_INT 1
5174: ST_TO_ADDR
// if i_from > i_to then
5175: LD_VAR 0 2
5179: PUSH
5180: LD_VAR 0 3
5184: GREATER
5185: IFFALSE 5211
// length := ( array - i_from ) + i_to else
5187: LD_ADDR_VAR 0 11
5191: PUSH
5192: LD_VAR 0 1
5196: PUSH
5197: LD_VAR 0 2
5201: MINUS
5202: PUSH
5203: LD_VAR 0 3
5207: PLUS
5208: ST_TO_ADDR
5209: GO 5227
// length := i_to - i_from ;
5211: LD_ADDR_VAR 0 11
5215: PUSH
5216: LD_VAR 0 3
5220: PUSH
5221: LD_VAR 0 2
5225: MINUS
5226: ST_TO_ADDR
// end else
5227: GO 5290
// begin d := - 1 ;
5229: LD_ADDR_VAR 0 9
5233: PUSH
5234: LD_INT 1
5236: NEG
5237: ST_TO_ADDR
// if i_from > i_to then
5238: LD_VAR 0 2
5242: PUSH
5243: LD_VAR 0 3
5247: GREATER
5248: IFFALSE 5268
// length := i_from - i_to else
5250: LD_ADDR_VAR 0 11
5254: PUSH
5255: LD_VAR 0 2
5259: PUSH
5260: LD_VAR 0 3
5264: MINUS
5265: ST_TO_ADDR
5266: GO 5290
// length := ( array - i_to ) + i_from ;
5268: LD_ADDR_VAR 0 11
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_VAR 0 3
5282: MINUS
5283: PUSH
5284: LD_VAR 0 2
5288: PLUS
5289: ST_TO_ADDR
// end ; if not length then
5290: LD_VAR 0 11
5294: NOT
5295: IFFALSE 5299
// exit ;
5297: GO 5457
// tmp := array ;
5299: LD_ADDR_VAR 0 10
5303: PUSH
5304: LD_VAR 0 1
5308: ST_TO_ADDR
// for i = 1 to length do
5309: LD_ADDR_VAR 0 6
5313: PUSH
5314: DOUBLE
5315: LD_INT 1
5317: DEC
5318: ST_TO_ADDR
5319: LD_VAR 0 11
5323: PUSH
5324: FOR_TO
5325: IFFALSE 5445
// begin for j = 1 to array do
5327: LD_ADDR_VAR 0 7
5331: PUSH
5332: DOUBLE
5333: LD_INT 1
5335: DEC
5336: ST_TO_ADDR
5337: LD_VAR 0 1
5341: PUSH
5342: FOR_TO
5343: IFFALSE 5431
// begin k := j + d ;
5345: LD_ADDR_VAR 0 8
5349: PUSH
5350: LD_VAR 0 7
5354: PUSH
5355: LD_VAR 0 9
5359: PLUS
5360: ST_TO_ADDR
// if k > array then
5361: LD_VAR 0 8
5365: PUSH
5366: LD_VAR 0 1
5370: GREATER
5371: IFFALSE 5381
// k := 1 ;
5373: LD_ADDR_VAR 0 8
5377: PUSH
5378: LD_INT 1
5380: ST_TO_ADDR
// if not k then
5381: LD_VAR 0 8
5385: NOT
5386: IFFALSE 5398
// k := array ;
5388: LD_ADDR_VAR 0 8
5392: PUSH
5393: LD_VAR 0 1
5397: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5398: LD_ADDR_VAR 0 10
5402: PUSH
5403: LD_VAR 0 10
5407: PPUSH
5408: LD_VAR 0 8
5412: PPUSH
5413: LD_VAR 0 1
5417: PUSH
5418: LD_VAR 0 7
5422: ARRAY
5423: PPUSH
5424: CALL_OW 1
5428: ST_TO_ADDR
// end ;
5429: GO 5342
5431: POP
5432: POP
// array := tmp ;
5433: LD_ADDR_VAR 0 1
5437: PUSH
5438: LD_VAR 0 10
5442: ST_TO_ADDR
// end ;
5443: GO 5324
5445: POP
5446: POP
// result := array ;
5447: LD_ADDR_VAR 0 5
5451: PUSH
5452: LD_VAR 0 1
5456: ST_TO_ADDR
// end ;
5457: LD_VAR 0 5
5461: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5462: LD_INT 0
5464: PPUSH
5465: PPUSH
// result := 0 ;
5466: LD_ADDR_VAR 0 3
5470: PUSH
5471: LD_INT 0
5473: ST_TO_ADDR
// if not array or not value in array then
5474: LD_VAR 0 1
5478: NOT
5479: IFTRUE 5494
5481: PUSH
5482: LD_VAR 0 2
5486: PUSH
5487: LD_VAR 0 1
5491: IN
5492: NOT
5493: OR
5494: IFFALSE 5498
// exit ;
5496: GO 5552
// for i = 1 to array do
5498: LD_ADDR_VAR 0 4
5502: PUSH
5503: DOUBLE
5504: LD_INT 1
5506: DEC
5507: ST_TO_ADDR
5508: LD_VAR 0 1
5512: PUSH
5513: FOR_TO
5514: IFFALSE 5550
// if value = array [ i ] then
5516: LD_VAR 0 2
5520: PUSH
5521: LD_VAR 0 1
5525: PUSH
5526: LD_VAR 0 4
5530: ARRAY
5531: EQUAL
5532: IFFALSE 5548
// begin result := i ;
5534: LD_ADDR_VAR 0 3
5538: PUSH
5539: LD_VAR 0 4
5543: ST_TO_ADDR
// exit ;
5544: POP
5545: POP
5546: GO 5552
// end ;
5548: GO 5513
5550: POP
5551: POP
// end ;
5552: LD_VAR 0 3
5556: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5557: LD_INT 0
5559: PPUSH
// vc_chassis := chassis ;
5560: LD_ADDR_OWVAR 37
5564: PUSH
5565: LD_VAR 0 1
5569: ST_TO_ADDR
// vc_engine := engine ;
5570: LD_ADDR_OWVAR 39
5574: PUSH
5575: LD_VAR 0 2
5579: ST_TO_ADDR
// vc_control := control ;
5580: LD_ADDR_OWVAR 38
5584: PUSH
5585: LD_VAR 0 3
5589: ST_TO_ADDR
// vc_weapon := weapon ;
5590: LD_ADDR_OWVAR 40
5594: PUSH
5595: LD_VAR 0 4
5599: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5600: LD_ADDR_OWVAR 41
5604: PUSH
5605: LD_VAR 0 5
5609: ST_TO_ADDR
// end ;
5610: LD_VAR 0 6
5614: RET
// export function WantPlant ( unit ) ; var task ; begin
5615: LD_INT 0
5617: PPUSH
5618: PPUSH
// result := false ;
5619: LD_ADDR_VAR 0 2
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5627: LD_ADDR_VAR 0 3
5631: PUSH
5632: LD_VAR 0 1
5636: PPUSH
5637: CALL_OW 437
5641: ST_TO_ADDR
// if task then
5642: LD_VAR 0 3
5646: IFFALSE 5674
// if task [ 1 ] [ 1 ] = p then
5648: LD_VAR 0 3
5652: PUSH
5653: LD_INT 1
5655: ARRAY
5656: PUSH
5657: LD_INT 1
5659: ARRAY
5660: PUSH
5661: LD_STRING p
5663: EQUAL
5664: IFFALSE 5674
// result := true ;
5666: LD_ADDR_VAR 0 2
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// end ;
5674: LD_VAR 0 2
5678: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5679: LD_INT 0
5681: PPUSH
5682: PPUSH
5683: PPUSH
5684: PPUSH
// if pos < 1 then
5685: LD_VAR 0 2
5689: PUSH
5690: LD_INT 1
5692: LESS
5693: IFFALSE 5697
// exit ;
5695: GO 6000
// if pos = 1 then
5697: LD_VAR 0 2
5701: PUSH
5702: LD_INT 1
5704: EQUAL
5705: IFFALSE 5738
// result := Replace ( arr , pos [ 1 ] , value ) else
5707: LD_ADDR_VAR 0 4
5711: PUSH
5712: LD_VAR 0 1
5716: PPUSH
5717: LD_VAR 0 2
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_VAR 0 3
5730: PPUSH
5731: CALL_OW 1
5735: ST_TO_ADDR
5736: GO 6000
// begin tmp := arr ;
5738: LD_ADDR_VAR 0 6
5742: PUSH
5743: LD_VAR 0 1
5747: ST_TO_ADDR
// s_arr := [ tmp ] ;
5748: LD_ADDR_VAR 0 7
5752: PUSH
5753: LD_VAR 0 6
5757: PUSH
5758: EMPTY
5759: LIST
5760: ST_TO_ADDR
// for i = 1 to pos - 1 do
5761: LD_ADDR_VAR 0 5
5765: PUSH
5766: DOUBLE
5767: LD_INT 1
5769: DEC
5770: ST_TO_ADDR
5771: LD_VAR 0 2
5775: PUSH
5776: LD_INT 1
5778: MINUS
5779: PUSH
5780: FOR_TO
5781: IFFALSE 5826
// begin tmp := tmp [ pos [ i ] ] ;
5783: LD_ADDR_VAR 0 6
5787: PUSH
5788: LD_VAR 0 6
5792: PUSH
5793: LD_VAR 0 2
5797: PUSH
5798: LD_VAR 0 5
5802: ARRAY
5803: ARRAY
5804: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5805: LD_ADDR_VAR 0 7
5809: PUSH
5810: LD_VAR 0 7
5814: PUSH
5815: LD_VAR 0 6
5819: PUSH
5820: EMPTY
5821: LIST
5822: ADD
5823: ST_TO_ADDR
// end ;
5824: GO 5780
5826: POP
5827: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5828: LD_ADDR_VAR 0 6
5832: PUSH
5833: LD_VAR 0 6
5837: PPUSH
5838: LD_VAR 0 2
5842: PUSH
5843: LD_VAR 0 2
5847: ARRAY
5848: PPUSH
5849: LD_VAR 0 3
5853: PPUSH
5854: CALL_OW 1
5858: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5859: LD_ADDR_VAR 0 7
5863: PUSH
5864: LD_VAR 0 7
5868: PPUSH
5869: LD_VAR 0 7
5873: PPUSH
5874: LD_VAR 0 6
5878: PPUSH
5879: CALL_OW 1
5883: ST_TO_ADDR
// for i = s_arr downto 2 do
5884: LD_ADDR_VAR 0 5
5888: PUSH
5889: DOUBLE
5890: LD_VAR 0 7
5894: INC
5895: ST_TO_ADDR
5896: LD_INT 2
5898: PUSH
5899: FOR_DOWNTO
5900: IFFALSE 5984
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5902: LD_ADDR_VAR 0 6
5906: PUSH
5907: LD_VAR 0 7
5911: PUSH
5912: LD_VAR 0 5
5916: PUSH
5917: LD_INT 1
5919: MINUS
5920: ARRAY
5921: PPUSH
5922: LD_VAR 0 2
5926: PUSH
5927: LD_VAR 0 5
5931: PUSH
5932: LD_INT 1
5934: MINUS
5935: ARRAY
5936: PPUSH
5937: LD_VAR 0 7
5941: PUSH
5942: LD_VAR 0 5
5946: ARRAY
5947: PPUSH
5948: CALL_OW 1
5952: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5953: LD_ADDR_VAR 0 7
5957: PUSH
5958: LD_VAR 0 7
5962: PPUSH
5963: LD_VAR 0 5
5967: PUSH
5968: LD_INT 1
5970: MINUS
5971: PPUSH
5972: LD_VAR 0 6
5976: PPUSH
5977: CALL_OW 1
5981: ST_TO_ADDR
// end ;
5982: GO 5899
5984: POP
5985: POP
// result := s_arr [ 1 ] ;
5986: LD_ADDR_VAR 0 4
5990: PUSH
5991: LD_VAR 0 7
5995: PUSH
5996: LD_INT 1
5998: ARRAY
5999: ST_TO_ADDR
// end ; end ;
6000: LD_VAR 0 4
6004: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6005: LD_INT 0
6007: PPUSH
6008: PPUSH
// if not list then
6009: LD_VAR 0 1
6013: NOT
6014: IFFALSE 6018
// exit ;
6016: GO 6109
// i := list [ pos1 ] ;
6018: LD_ADDR_VAR 0 5
6022: PUSH
6023: LD_VAR 0 1
6027: PUSH
6028: LD_VAR 0 2
6032: ARRAY
6033: ST_TO_ADDR
// if not i then
6034: LD_VAR 0 5
6038: NOT
6039: IFFALSE 6043
// exit ;
6041: GO 6109
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6043: LD_ADDR_VAR 0 1
6047: PUSH
6048: LD_VAR 0 1
6052: PPUSH
6053: LD_VAR 0 2
6057: PPUSH
6058: LD_VAR 0 1
6062: PUSH
6063: LD_VAR 0 3
6067: ARRAY
6068: PPUSH
6069: CALL_OW 1
6073: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6074: LD_ADDR_VAR 0 1
6078: PUSH
6079: LD_VAR 0 1
6083: PPUSH
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_VAR 0 5
6093: PPUSH
6094: CALL_OW 1
6098: ST_TO_ADDR
// result := list ;
6099: LD_ADDR_VAR 0 4
6103: PUSH
6104: LD_VAR 0 1
6108: ST_TO_ADDR
// end ;
6109: LD_VAR 0 4
6113: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6114: LD_INT 0
6116: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6117: LD_ADDR_VAR 0 5
6121: PUSH
6122: LD_VAR 0 1
6126: PPUSH
6127: CALL_OW 250
6131: PPUSH
6132: LD_VAR 0 1
6136: PPUSH
6137: CALL_OW 251
6141: PPUSH
6142: LD_VAR 0 2
6146: PPUSH
6147: LD_VAR 0 3
6151: PPUSH
6152: LD_VAR 0 4
6156: PPUSH
6157: CALL 6539 0 5
6161: ST_TO_ADDR
// end ;
6162: LD_VAR 0 5
6166: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6167: LD_INT 0
6169: PPUSH
6170: PPUSH
6171: PPUSH
6172: PPUSH
// if not list or not unit then
6173: LD_VAR 0 2
6177: NOT
6178: IFTRUE 6187
6180: PUSH
6181: LD_VAR 0 1
6185: NOT
6186: OR
6187: IFFALSE 6191
// exit ;
6189: GO 6534
// result := [ ] ;
6191: LD_ADDR_VAR 0 5
6195: PUSH
6196: EMPTY
6197: ST_TO_ADDR
// for i in list do
6198: LD_ADDR_VAR 0 6
6202: PUSH
6203: LD_VAR 0 2
6207: PUSH
6208: FOR_IN
6209: IFFALSE 6427
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6211: LD_ADDR_VAR 0 8
6215: PUSH
6216: LD_VAR 0 1
6220: PPUSH
6221: LD_VAR 0 6
6225: PUSH
6226: LD_INT 1
6228: ARRAY
6229: PPUSH
6230: LD_VAR 0 6
6234: PUSH
6235: LD_INT 2
6237: ARRAY
6238: PPUSH
6239: CALL_OW 297
6243: ST_TO_ADDR
// if not Count ( result ) then
6244: LD_VAR 0 5
6248: PPUSH
6249: CALL 2761 0 1
6253: NOT
6254: IFFALSE 6287
// begin result := Join ( result , [ i , tmp ] ) ;
6256: LD_ADDR_VAR 0 5
6260: PUSH
6261: LD_VAR 0 5
6265: PPUSH
6266: LD_VAR 0 6
6270: PUSH
6271: LD_VAR 0 8
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PPUSH
6280: CALL 38737 0 2
6284: ST_TO_ADDR
// continue ;
6285: GO 6208
// end ; if result [ result ] [ 2 ] <= tmp then
6287: LD_VAR 0 5
6291: PUSH
6292: LD_VAR 0 5
6296: ARRAY
6297: PUSH
6298: LD_INT 2
6300: ARRAY
6301: PUSH
6302: LD_VAR 0 8
6306: LESSEQUAL
6307: IFFALSE 6340
// result := Join ( result , [ i , tmp ] ) else
6309: LD_ADDR_VAR 0 5
6313: PUSH
6314: LD_VAR 0 5
6318: PPUSH
6319: LD_VAR 0 6
6323: PUSH
6324: LD_VAR 0 8
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PPUSH
6333: CALL 38737 0 2
6337: ST_TO_ADDR
6338: GO 6425
// begin for j := 1 to Count ( result ) do
6340: LD_ADDR_VAR 0 7
6344: PUSH
6345: DOUBLE
6346: LD_INT 1
6348: DEC
6349: ST_TO_ADDR
6350: LD_VAR 0 5
6354: PPUSH
6355: CALL 2761 0 1
6359: PUSH
6360: FOR_TO
6361: IFFALSE 6423
// begin if tmp < result [ j ] [ 2 ] then
6363: LD_VAR 0 8
6367: PUSH
6368: LD_VAR 0 5
6372: PUSH
6373: LD_VAR 0 7
6377: ARRAY
6378: PUSH
6379: LD_INT 2
6381: ARRAY
6382: LESS
6383: IFFALSE 6421
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6385: LD_ADDR_VAR 0 5
6389: PUSH
6390: LD_VAR 0 5
6394: PPUSH
6395: LD_VAR 0 7
6399: PPUSH
6400: LD_VAR 0 6
6404: PUSH
6405: LD_VAR 0 8
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 2
6418: ST_TO_ADDR
// break ;
6419: GO 6423
// end ; end ;
6421: GO 6360
6423: POP
6424: POP
// end ; end ;
6425: GO 6208
6427: POP
6428: POP
// if result and not asc then
6429: LD_VAR 0 5
6433: IFFALSE 6442
6435: PUSH
6436: LD_VAR 0 3
6440: NOT
6441: AND
6442: IFFALSE 6459
// result := ReverseArray ( result ) ;
6444: LD_ADDR_VAR 0 5
6448: PUSH
6449: LD_VAR 0 5
6453: PPUSH
6454: CALL 33817 0 1
6458: ST_TO_ADDR
// tmp := [ ] ;
6459: LD_ADDR_VAR 0 8
6463: PUSH
6464: EMPTY
6465: ST_TO_ADDR
// if mode then
6466: LD_VAR 0 4
6470: IFFALSE 6534
// begin for i := 1 to result do
6472: LD_ADDR_VAR 0 6
6476: PUSH
6477: DOUBLE
6478: LD_INT 1
6480: DEC
6481: ST_TO_ADDR
6482: LD_VAR 0 5
6486: PUSH
6487: FOR_TO
6488: IFFALSE 6522
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6490: LD_ADDR_VAR 0 8
6494: PUSH
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_VAR 0 5
6504: PUSH
6505: LD_VAR 0 6
6509: ARRAY
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: PPUSH
6515: CALL 38737 0 2
6519: ST_TO_ADDR
6520: GO 6487
6522: POP
6523: POP
// result := tmp ;
6524: LD_ADDR_VAR 0 5
6528: PUSH
6529: LD_VAR 0 8
6533: ST_TO_ADDR
// end ; end ;
6534: LD_VAR 0 5
6538: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6539: LD_INT 0
6541: PPUSH
6542: PPUSH
6543: PPUSH
6544: PPUSH
// if not list then
6545: LD_VAR 0 3
6549: NOT
6550: IFFALSE 6554
// exit ;
6552: GO 6944
// result := [ ] ;
6554: LD_ADDR_VAR 0 6
6558: PUSH
6559: EMPTY
6560: ST_TO_ADDR
// for i in list do
6561: LD_ADDR_VAR 0 7
6565: PUSH
6566: LD_VAR 0 3
6570: PUSH
6571: FOR_IN
6572: IFFALSE 6774
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6574: LD_ADDR_VAR 0 9
6578: PUSH
6579: LD_VAR 0 7
6583: PPUSH
6584: LD_VAR 0 1
6588: PPUSH
6589: LD_VAR 0 2
6593: PPUSH
6594: CALL_OW 297
6598: ST_TO_ADDR
// if not result then
6599: LD_VAR 0 6
6603: NOT
6604: IFFALSE 6630
// result := [ [ i , tmp ] ] else
6606: LD_ADDR_VAR 0 6
6610: PUSH
6611: LD_VAR 0 7
6615: PUSH
6616: LD_VAR 0 9
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: ST_TO_ADDR
6628: GO 6772
// begin if result [ result ] [ 2 ] <= tmp then
6630: LD_VAR 0 6
6634: PUSH
6635: LD_VAR 0 6
6639: ARRAY
6640: PUSH
6641: LD_INT 2
6643: ARRAY
6644: PUSH
6645: LD_VAR 0 9
6649: LESSEQUAL
6650: IFFALSE 6692
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6652: LD_ADDR_VAR 0 6
6656: PUSH
6657: LD_VAR 0 6
6661: PPUSH
6662: LD_VAR 0 6
6666: PUSH
6667: LD_INT 1
6669: PLUS
6670: PPUSH
6671: LD_VAR 0 7
6675: PUSH
6676: LD_VAR 0 9
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 2
6689: ST_TO_ADDR
6690: GO 6772
// for j := 1 to result do
6692: LD_ADDR_VAR 0 8
6696: PUSH
6697: DOUBLE
6698: LD_INT 1
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 6
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6770
// begin if tmp < result [ j ] [ 2 ] then
6710: LD_VAR 0 9
6714: PUSH
6715: LD_VAR 0 6
6719: PUSH
6720: LD_VAR 0 8
6724: ARRAY
6725: PUSH
6726: LD_INT 2
6728: ARRAY
6729: LESS
6730: IFFALSE 6768
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6732: LD_ADDR_VAR 0 6
6736: PUSH
6737: LD_VAR 0 6
6741: PPUSH
6742: LD_VAR 0 8
6746: PPUSH
6747: LD_VAR 0 7
6751: PUSH
6752: LD_VAR 0 9
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PPUSH
6761: CALL_OW 2
6765: ST_TO_ADDR
// break ;
6766: GO 6770
// end ; end ;
6768: GO 6707
6770: POP
6771: POP
// end ; end ;
6772: GO 6571
6774: POP
6775: POP
// if result and not asc then
6776: LD_VAR 0 6
6780: IFFALSE 6789
6782: PUSH
6783: LD_VAR 0 4
6787: NOT
6788: AND
6789: IFFALSE 6864
// begin tmp := result ;
6791: LD_ADDR_VAR 0 9
6795: PUSH
6796: LD_VAR 0 6
6800: ST_TO_ADDR
// for i = tmp downto 1 do
6801: LD_ADDR_VAR 0 7
6805: PUSH
6806: DOUBLE
6807: LD_VAR 0 9
6811: INC
6812: ST_TO_ADDR
6813: LD_INT 1
6815: PUSH
6816: FOR_DOWNTO
6817: IFFALSE 6862
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6819: LD_ADDR_VAR 0 6
6823: PUSH
6824: LD_VAR 0 6
6828: PPUSH
6829: LD_VAR 0 9
6833: PUSH
6834: LD_VAR 0 7
6838: MINUS
6839: PUSH
6840: LD_INT 1
6842: PLUS
6843: PPUSH
6844: LD_VAR 0 9
6848: PUSH
6849: LD_VAR 0 7
6853: ARRAY
6854: PPUSH
6855: CALL_OW 1
6859: ST_TO_ADDR
6860: GO 6816
6862: POP
6863: POP
// end ; tmp := [ ] ;
6864: LD_ADDR_VAR 0 9
6868: PUSH
6869: EMPTY
6870: ST_TO_ADDR
// if mode then
6871: LD_VAR 0 5
6875: IFFALSE 6944
// begin for i = 1 to result do
6877: LD_ADDR_VAR 0 7
6881: PUSH
6882: DOUBLE
6883: LD_INT 1
6885: DEC
6886: ST_TO_ADDR
6887: LD_VAR 0 6
6891: PUSH
6892: FOR_TO
6893: IFFALSE 6932
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6895: LD_ADDR_VAR 0 9
6899: PUSH
6900: LD_VAR 0 9
6904: PPUSH
6905: LD_VAR 0 7
6909: PPUSH
6910: LD_VAR 0 6
6914: PUSH
6915: LD_VAR 0 7
6919: ARRAY
6920: PUSH
6921: LD_INT 1
6923: ARRAY
6924: PPUSH
6925: CALL_OW 1
6929: ST_TO_ADDR
6930: GO 6892
6932: POP
6933: POP
// result := tmp ;
6934: LD_ADDR_VAR 0 6
6938: PUSH
6939: LD_VAR 0 9
6943: ST_TO_ADDR
// end ; end ;
6944: LD_VAR 0 6
6948: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6949: LD_INT 0
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6957: LD_ADDR_VAR 0 5
6961: PUSH
6962: LD_INT 0
6964: PUSH
6965: LD_INT 0
6967: PUSH
6968: LD_INT 0
6970: PUSH
6971: EMPTY
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: ST_TO_ADDR
// if not x or not y then
6979: LD_VAR 0 2
6983: NOT
6984: IFTRUE 6993
6986: PUSH
6987: LD_VAR 0 3
6991: NOT
6992: OR
6993: IFFALSE 6997
// exit ;
6995: GO 8653
// if not range then
6997: LD_VAR 0 4
7001: NOT
7002: IFFALSE 7012
// range := 10 ;
7004: LD_ADDR_VAR 0 4
7008: PUSH
7009: LD_INT 10
7011: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7012: LD_ADDR_VAR 0 8
7016: PUSH
7017: LD_INT 81
7019: PUSH
7020: LD_VAR 0 1
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 92
7031: PUSH
7032: LD_VAR 0 2
7036: PUSH
7037: LD_VAR 0 3
7041: PUSH
7042: LD_VAR 0 4
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 3
7055: PUSH
7056: LD_INT 21
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 69
7079: ST_TO_ADDR
// if not tmp then
7080: LD_VAR 0 8
7084: NOT
7085: IFFALSE 7089
// exit ;
7087: GO 8653
// for i in tmp do
7089: LD_ADDR_VAR 0 6
7093: PUSH
7094: LD_VAR 0 8
7098: PUSH
7099: FOR_IN
7100: IFFALSE 8628
// begin points := [ 0 , 0 , 0 ] ;
7102: LD_ADDR_VAR 0 9
7106: PUSH
7107: LD_INT 0
7109: PUSH
7110: LD_INT 0
7112: PUSH
7113: LD_INT 0
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: ST_TO_ADDR
// bpoints := 1 ;
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_INT 1
7128: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7129: LD_VAR 0 6
7133: PPUSH
7134: CALL_OW 247
7138: PUSH
7139: LD_INT 1
7141: DOUBLE
7142: EQUAL
7143: IFTRUE 7147
7145: GO 7729
7147: POP
// begin if GetClass ( i ) = 1 then
7148: LD_VAR 0 6
7152: PPUSH
7153: CALL_OW 257
7157: PUSH
7158: LD_INT 1
7160: EQUAL
7161: IFFALSE 7182
// points := [ 10 , 5 , 3 ] ;
7163: LD_ADDR_VAR 0 9
7167: PUSH
7168: LD_INT 10
7170: PUSH
7171: LD_INT 5
7173: PUSH
7174: LD_INT 3
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: LIST
7181: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7182: LD_VAR 0 6
7186: PPUSH
7187: CALL_OW 257
7191: PUSH
7192: LD_INT 2
7194: PUSH
7195: LD_INT 3
7197: PUSH
7198: LD_INT 4
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: IN
7206: IFFALSE 7227
// points := [ 3 , 2 , 1 ] ;
7208: LD_ADDR_VAR 0 9
7212: PUSH
7213: LD_INT 3
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_INT 1
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7227: LD_VAR 0 6
7231: PPUSH
7232: CALL_OW 257
7236: PUSH
7237: LD_INT 5
7239: EQUAL
7240: IFFALSE 7261
// points := [ 130 , 5 , 2 ] ;
7242: LD_ADDR_VAR 0 9
7246: PUSH
7247: LD_INT 130
7249: PUSH
7250: LD_INT 5
7252: PUSH
7253: LD_INT 2
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7261: LD_VAR 0 6
7265: PPUSH
7266: CALL_OW 257
7270: PUSH
7271: LD_INT 8
7273: EQUAL
7274: IFFALSE 7295
// points := [ 35 , 35 , 30 ] ;
7276: LD_ADDR_VAR 0 9
7280: PUSH
7281: LD_INT 35
7283: PUSH
7284: LD_INT 35
7286: PUSH
7287: LD_INT 30
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7295: LD_VAR 0 6
7299: PPUSH
7300: CALL_OW 257
7304: PUSH
7305: LD_INT 9
7307: EQUAL
7308: IFFALSE 7329
// points := [ 20 , 55 , 40 ] ;
7310: LD_ADDR_VAR 0 9
7314: PUSH
7315: LD_INT 20
7317: PUSH
7318: LD_INT 55
7320: PUSH
7321: LD_INT 40
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7329: LD_VAR 0 6
7333: PPUSH
7334: CALL_OW 257
7338: PUSH
7339: LD_INT 12
7341: PUSH
7342: LD_INT 16
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: IN
7349: IFFALSE 7370
// points := [ 5 , 3 , 2 ] ;
7351: LD_ADDR_VAR 0 9
7355: PUSH
7356: LD_INT 5
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 2
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7370: LD_VAR 0 6
7374: PPUSH
7375: CALL_OW 257
7379: PUSH
7380: LD_INT 17
7382: EQUAL
7383: IFFALSE 7404
// points := [ 100 , 50 , 75 ] ;
7385: LD_ADDR_VAR 0 9
7389: PUSH
7390: LD_INT 100
7392: PUSH
7393: LD_INT 50
7395: PUSH
7396: LD_INT 75
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7404: LD_VAR 0 6
7408: PPUSH
7409: CALL_OW 257
7413: PUSH
7414: LD_INT 15
7416: EQUAL
7417: IFFALSE 7438
// points := [ 10 , 5 , 3 ] ;
7419: LD_ADDR_VAR 0 9
7423: PUSH
7424: LD_INT 10
7426: PUSH
7427: LD_INT 5
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7438: LD_VAR 0 6
7442: PPUSH
7443: CALL_OW 257
7447: PUSH
7448: LD_INT 14
7450: EQUAL
7451: IFFALSE 7472
// points := [ 10 , 0 , 0 ] ;
7453: LD_ADDR_VAR 0 9
7457: PUSH
7458: LD_INT 10
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7472: LD_VAR 0 6
7476: PPUSH
7477: CALL_OW 257
7481: PUSH
7482: LD_INT 11
7484: EQUAL
7485: IFFALSE 7506
// points := [ 30 , 10 , 5 ] ;
7487: LD_ADDR_VAR 0 9
7491: PUSH
7492: LD_INT 30
7494: PUSH
7495: LD_INT 10
7497: PUSH
7498: LD_INT 5
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 5
7513: PPUSH
7514: CALL_OW 321
7518: PUSH
7519: LD_INT 2
7521: EQUAL
7522: IFFALSE 7539
// bpoints := bpoints * 1.8 ;
7524: LD_ADDR_VAR 0 10
7528: PUSH
7529: LD_VAR 0 10
7533: PUSH
7534: LD_REAL  1.80000000000000E+0000
7537: MUL
7538: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7539: LD_VAR 0 6
7543: PPUSH
7544: CALL_OW 257
7548: PUSH
7549: LD_INT 1
7551: PUSH
7552: LD_INT 2
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: LD_INT 4
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: IN
7567: IFFALSE 7587
7569: PUSH
7570: LD_VAR 0 1
7574: PPUSH
7575: LD_INT 51
7577: PPUSH
7578: CALL_OW 321
7582: PUSH
7583: LD_INT 2
7585: EQUAL
7586: AND
7587: IFFALSE 7604
// bpoints := bpoints * 1.2 ;
7589: LD_ADDR_VAR 0 10
7593: PUSH
7594: LD_VAR 0 10
7598: PUSH
7599: LD_REAL  1.20000000000000E+0000
7602: MUL
7603: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7604: LD_VAR 0 6
7608: PPUSH
7609: CALL_OW 257
7613: PUSH
7614: LD_INT 5
7616: PUSH
7617: LD_INT 7
7619: PUSH
7620: LD_INT 9
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: IN
7628: IFFALSE 7648
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: LD_INT 52
7638: PPUSH
7639: CALL_OW 321
7643: PUSH
7644: LD_INT 2
7646: EQUAL
7647: AND
7648: IFFALSE 7665
// bpoints := bpoints * 1.5 ;
7650: LD_ADDR_VAR 0 10
7654: PUSH
7655: LD_VAR 0 10
7659: PUSH
7660: LD_REAL  1.50000000000000E+0000
7663: MUL
7664: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7665: LD_VAR 0 1
7669: PPUSH
7670: LD_INT 66
7672: PPUSH
7673: CALL_OW 321
7677: PUSH
7678: LD_INT 2
7680: EQUAL
7681: IFFALSE 7698
// bpoints := bpoints * 1.1 ;
7683: LD_ADDR_VAR 0 10
7687: PUSH
7688: LD_VAR 0 10
7692: PUSH
7693: LD_REAL  1.10000000000000E+0000
7696: MUL
7697: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7698: LD_ADDR_VAR 0 10
7702: PUSH
7703: LD_VAR 0 10
7707: PUSH
7708: LD_VAR 0 6
7712: PPUSH
7713: LD_INT 1
7715: PPUSH
7716: CALL_OW 259
7720: PUSH
7721: LD_REAL  1.15000000000000E+0000
7724: MUL
7725: MUL
7726: ST_TO_ADDR
// end ; unit_vehicle :
7727: GO 8557
7729: LD_INT 2
7731: DOUBLE
7732: EQUAL
7733: IFTRUE 7737
7735: GO 8545
7737: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7738: LD_VAR 0 6
7742: PPUSH
7743: CALL_OW 264
7747: PUSH
7748: LD_INT 2
7750: PUSH
7751: LD_INT 42
7753: PUSH
7754: LD_INT 24
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: IN
7762: IFFALSE 7783
// points := [ 25 , 5 , 3 ] ;
7764: LD_ADDR_VAR 0 9
7768: PUSH
7769: LD_INT 25
7771: PUSH
7772: LD_INT 5
7774: PUSH
7775: LD_INT 3
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7783: LD_VAR 0 6
7787: PPUSH
7788: CALL_OW 264
7792: PUSH
7793: LD_INT 4
7795: PUSH
7796: LD_INT 43
7798: PUSH
7799: LD_INT 25
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: IN
7807: IFFALSE 7828
// points := [ 40 , 15 , 5 ] ;
7809: LD_ADDR_VAR 0 9
7813: PUSH
7814: LD_INT 40
7816: PUSH
7817: LD_INT 15
7819: PUSH
7820: LD_INT 5
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7828: LD_VAR 0 6
7832: PPUSH
7833: CALL_OW 264
7837: PUSH
7838: LD_INT 3
7840: PUSH
7841: LD_INT 23
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: IN
7848: IFFALSE 7869
// points := [ 7 , 25 , 8 ] ;
7850: LD_ADDR_VAR 0 9
7854: PUSH
7855: LD_INT 7
7857: PUSH
7858: LD_INT 25
7860: PUSH
7861: LD_INT 8
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7869: LD_VAR 0 6
7873: PPUSH
7874: CALL_OW 264
7878: PUSH
7879: LD_INT 5
7881: PUSH
7882: LD_INT 27
7884: PUSH
7885: LD_INT 44
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: IN
7893: IFFALSE 7914
// points := [ 14 , 50 , 16 ] ;
7895: LD_ADDR_VAR 0 9
7899: PUSH
7900: LD_INT 14
7902: PUSH
7903: LD_INT 50
7905: PUSH
7906: LD_INT 16
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7914: LD_VAR 0 6
7918: PPUSH
7919: CALL_OW 264
7923: PUSH
7924: LD_INT 6
7926: PUSH
7927: LD_INT 46
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: IN
7934: IFFALSE 7955
// points := [ 32 , 120 , 70 ] ;
7936: LD_ADDR_VAR 0 9
7940: PUSH
7941: LD_INT 32
7943: PUSH
7944: LD_INT 120
7946: PUSH
7947: LD_INT 70
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7955: LD_VAR 0 6
7959: PPUSH
7960: CALL_OW 264
7964: PUSH
7965: LD_INT 7
7967: PUSH
7968: LD_INT 28
7970: PUSH
7971: LD_INT 45
7973: PUSH
7974: LD_INT 92
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: IN
7983: IFFALSE 8004
// points := [ 35 , 20 , 45 ] ;
7985: LD_ADDR_VAR 0 9
7989: PUSH
7990: LD_INT 35
7992: PUSH
7993: LD_INT 20
7995: PUSH
7996: LD_INT 45
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8004: LD_VAR 0 6
8008: PPUSH
8009: CALL_OW 264
8013: PUSH
8014: LD_INT 47
8016: PUSH
8017: EMPTY
8018: LIST
8019: IN
8020: IFFALSE 8041
// points := [ 67 , 45 , 75 ] ;
8022: LD_ADDR_VAR 0 9
8026: PUSH
8027: LD_INT 67
8029: PUSH
8030: LD_INT 45
8032: PUSH
8033: LD_INT 75
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: LIST
8040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8041: LD_VAR 0 6
8045: PPUSH
8046: CALL_OW 264
8050: PUSH
8051: LD_INT 26
8053: PUSH
8054: EMPTY
8055: LIST
8056: IN
8057: IFFALSE 8078
// points := [ 120 , 30 , 80 ] ;
8059: LD_ADDR_VAR 0 9
8063: PUSH
8064: LD_INT 120
8066: PUSH
8067: LD_INT 30
8069: PUSH
8070: LD_INT 80
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: LIST
8077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8078: LD_VAR 0 6
8082: PPUSH
8083: CALL_OW 264
8087: PUSH
8088: LD_INT 22
8090: PUSH
8091: EMPTY
8092: LIST
8093: IN
8094: IFFALSE 8115
// points := [ 40 , 1 , 1 ] ;
8096: LD_ADDR_VAR 0 9
8100: PUSH
8101: LD_INT 40
8103: PUSH
8104: LD_INT 1
8106: PUSH
8107: LD_INT 1
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8115: LD_VAR 0 6
8119: PPUSH
8120: CALL_OW 264
8124: PUSH
8125: LD_INT 29
8127: PUSH
8128: EMPTY
8129: LIST
8130: IN
8131: IFFALSE 8152
// points := [ 70 , 200 , 400 ] ;
8133: LD_ADDR_VAR 0 9
8137: PUSH
8138: LD_INT 70
8140: PUSH
8141: LD_INT 200
8143: PUSH
8144: LD_INT 400
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8152: LD_VAR 0 6
8156: PPUSH
8157: CALL_OW 264
8161: PUSH
8162: LD_INT 14
8164: PUSH
8165: LD_INT 53
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: IN
8172: IFFALSE 8193
// points := [ 40 , 10 , 20 ] ;
8174: LD_ADDR_VAR 0 9
8178: PUSH
8179: LD_INT 40
8181: PUSH
8182: LD_INT 10
8184: PUSH
8185: LD_INT 20
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8193: LD_VAR 0 6
8197: PPUSH
8198: CALL_OW 264
8202: PUSH
8203: LD_INT 9
8205: PUSH
8206: EMPTY
8207: LIST
8208: IN
8209: IFFALSE 8230
// points := [ 5 , 70 , 20 ] ;
8211: LD_ADDR_VAR 0 9
8215: PUSH
8216: LD_INT 5
8218: PUSH
8219: LD_INT 70
8221: PUSH
8222: LD_INT 20
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8230: LD_VAR 0 6
8234: PPUSH
8235: CALL_OW 264
8239: PUSH
8240: LD_INT 10
8242: PUSH
8243: EMPTY
8244: LIST
8245: IN
8246: IFFALSE 8267
// points := [ 35 , 110 , 70 ] ;
8248: LD_ADDR_VAR 0 9
8252: PUSH
8253: LD_INT 35
8255: PUSH
8256: LD_INT 110
8258: PUSH
8259: LD_INT 70
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8267: LD_VAR 0 6
8271: PPUSH
8272: CALL_OW 265
8276: PUSH
8277: LD_INT 25
8279: EQUAL
8280: IFFALSE 8301
// points := [ 80 , 65 , 100 ] ;
8282: LD_ADDR_VAR 0 9
8286: PUSH
8287: LD_INT 80
8289: PUSH
8290: LD_INT 65
8292: PUSH
8293: LD_INT 100
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8301: LD_VAR 0 6
8305: PPUSH
8306: CALL_OW 263
8310: PUSH
8311: LD_INT 1
8313: EQUAL
8314: IFFALSE 8349
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8316: LD_ADDR_VAR 0 10
8320: PUSH
8321: LD_VAR 0 10
8325: PUSH
8326: LD_VAR 0 6
8330: PPUSH
8331: CALL_OW 311
8335: PPUSH
8336: LD_INT 3
8338: PPUSH
8339: CALL_OW 259
8343: PUSH
8344: LD_INT 4
8346: MUL
8347: MUL
8348: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8349: LD_VAR 0 6
8353: PPUSH
8354: CALL_OW 263
8358: PUSH
8359: LD_INT 2
8361: EQUAL
8362: IFFALSE 8413
// begin j := IsControledBy ( i ) ;
8364: LD_ADDR_VAR 0 7
8368: PUSH
8369: LD_VAR 0 6
8373: PPUSH
8374: CALL_OW 312
8378: ST_TO_ADDR
// if j then
8379: LD_VAR 0 7
8383: IFFALSE 8413
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8385: LD_ADDR_VAR 0 10
8389: PUSH
8390: LD_VAR 0 10
8394: PUSH
8395: LD_VAR 0 7
8399: PPUSH
8400: LD_INT 3
8402: PPUSH
8403: CALL_OW 259
8407: PUSH
8408: LD_INT 3
8410: MUL
8411: MUL
8412: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8413: LD_VAR 0 6
8417: PPUSH
8418: CALL_OW 264
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: LD_INT 6
8428: PUSH
8429: LD_INT 46
8431: PUSH
8432: LD_INT 44
8434: PUSH
8435: LD_INT 47
8437: PUSH
8438: LD_INT 45
8440: PUSH
8441: LD_INT 28
8443: PUSH
8444: LD_INT 7
8446: PUSH
8447: LD_INT 27
8449: PUSH
8450: LD_INT 29
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: IN
8465: IFFALSE 8485
8467: PUSH
8468: LD_VAR 0 1
8472: PPUSH
8473: LD_INT 52
8475: PPUSH
8476: CALL_OW 321
8480: PUSH
8481: LD_INT 2
8483: EQUAL
8484: AND
8485: IFFALSE 8502
// bpoints := bpoints * 1.2 ;
8487: LD_ADDR_VAR 0 10
8491: PUSH
8492: LD_VAR 0 10
8496: PUSH
8497: LD_REAL  1.20000000000000E+0000
8500: MUL
8501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8502: LD_VAR 0 6
8506: PPUSH
8507: CALL_OW 264
8511: PUSH
8512: LD_INT 6
8514: PUSH
8515: LD_INT 46
8517: PUSH
8518: LD_INT 47
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: IN
8526: IFFALSE 8543
// bpoints := bpoints * 1.2 ;
8528: LD_ADDR_VAR 0 10
8532: PUSH
8533: LD_VAR 0 10
8537: PUSH
8538: LD_REAL  1.20000000000000E+0000
8541: MUL
8542: ST_TO_ADDR
// end ; unit_building :
8543: GO 8557
8545: LD_INT 3
8547: DOUBLE
8548: EQUAL
8549: IFTRUE 8553
8551: GO 8556
8553: POP
// ; end ;
8554: GO 8557
8556: POP
// for j = 1 to 3 do
8557: LD_ADDR_VAR 0 7
8561: PUSH
8562: DOUBLE
8563: LD_INT 1
8565: DEC
8566: ST_TO_ADDR
8567: LD_INT 3
8569: PUSH
8570: FOR_TO
8571: IFFALSE 8624
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8573: LD_ADDR_VAR 0 5
8577: PUSH
8578: LD_VAR 0 5
8582: PPUSH
8583: LD_VAR 0 7
8587: PPUSH
8588: LD_VAR 0 5
8592: PUSH
8593: LD_VAR 0 7
8597: ARRAY
8598: PUSH
8599: LD_VAR 0 9
8603: PUSH
8604: LD_VAR 0 7
8608: ARRAY
8609: PUSH
8610: LD_VAR 0 10
8614: MUL
8615: PLUS
8616: PPUSH
8617: CALL_OW 1
8621: ST_TO_ADDR
8622: GO 8570
8624: POP
8625: POP
// end ;
8626: GO 7099
8628: POP
8629: POP
// result := Replace ( result , 4 , tmp ) ;
8630: LD_ADDR_VAR 0 5
8634: PUSH
8635: LD_VAR 0 5
8639: PPUSH
8640: LD_INT 4
8642: PPUSH
8643: LD_VAR 0 8
8647: PPUSH
8648: CALL_OW 1
8652: ST_TO_ADDR
// end ;
8653: LD_VAR 0 5
8657: RET
// export function DangerAtRange ( unit , range ) ; begin
8658: LD_INT 0
8660: PPUSH
// if not unit then
8661: LD_VAR 0 1
8665: NOT
8666: IFFALSE 8670
// exit ;
8668: GO 8715
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8670: LD_ADDR_VAR 0 3
8674: PUSH
8675: LD_VAR 0 1
8679: PPUSH
8680: CALL_OW 255
8684: PPUSH
8685: LD_VAR 0 1
8689: PPUSH
8690: CALL_OW 250
8694: PPUSH
8695: LD_VAR 0 1
8699: PPUSH
8700: CALL_OW 251
8704: PPUSH
8705: LD_VAR 0 2
8709: PPUSH
8710: CALL 6949 0 4
8714: ST_TO_ADDR
// end ;
8715: LD_VAR 0 3
8719: RET
// export function DangerInArea ( side , area ) ; begin
8720: LD_INT 0
8722: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8723: LD_ADDR_VAR 0 3
8727: PUSH
8728: LD_VAR 0 2
8732: PPUSH
8733: LD_INT 81
8735: PUSH
8736: LD_VAR 0 1
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 70
8749: ST_TO_ADDR
// end ;
8750: LD_VAR 0 3
8754: RET
// export function IsExtension ( b ) ; begin
8755: LD_INT 0
8757: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_VAR 0 1
8767: PUSH
8768: LD_INT 23
8770: PUSH
8771: LD_INT 20
8773: PUSH
8774: LD_INT 22
8776: PUSH
8777: LD_INT 17
8779: PUSH
8780: LD_INT 24
8782: PUSH
8783: LD_INT 21
8785: PUSH
8786: LD_INT 19
8788: PUSH
8789: LD_INT 16
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 18
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: IN
8810: ST_TO_ADDR
// end ;
8811: LD_VAR 0 2
8815: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8816: LD_INT 0
8818: PPUSH
8819: PPUSH
8820: PPUSH
// result := [ ] ;
8821: LD_ADDR_VAR 0 4
8825: PUSH
8826: EMPTY
8827: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8828: LD_ADDR_VAR 0 5
8832: PUSH
8833: LD_VAR 0 2
8837: PPUSH
8838: LD_INT 21
8840: PUSH
8841: LD_INT 3
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PPUSH
8848: CALL_OW 70
8852: ST_TO_ADDR
// if not tmp then
8853: LD_VAR 0 5
8857: NOT
8858: IFFALSE 8862
// exit ;
8860: GO 8926
// if checkLink then
8862: LD_VAR 0 3
8866: IFFALSE 8916
// begin for i in tmp do
8868: LD_ADDR_VAR 0 6
8872: PUSH
8873: LD_VAR 0 5
8877: PUSH
8878: FOR_IN
8879: IFFALSE 8914
// if GetBase ( i ) <> base then
8881: LD_VAR 0 6
8885: PPUSH
8886: CALL_OW 274
8890: PUSH
8891: LD_VAR 0 1
8895: NONEQUAL
8896: IFFALSE 8912
// ComLinkToBase ( base , i ) ;
8898: LD_VAR 0 1
8902: PPUSH
8903: LD_VAR 0 6
8907: PPUSH
8908: CALL_OW 169
8912: GO 8878
8914: POP
8915: POP
// end ; result := tmp ;
8916: LD_ADDR_VAR 0 4
8920: PUSH
8921: LD_VAR 0 5
8925: ST_TO_ADDR
// end ;
8926: LD_VAR 0 4
8930: RET
// export function ComComplete ( units , b ) ; var i ; begin
8931: LD_INT 0
8933: PPUSH
8934: PPUSH
// if not units then
8935: LD_VAR 0 1
8939: NOT
8940: IFFALSE 8944
// exit ;
8942: GO 9034
// for i in units do
8944: LD_ADDR_VAR 0 4
8948: PUSH
8949: LD_VAR 0 1
8953: PUSH
8954: FOR_IN
8955: IFFALSE 9032
// if BuildingStatus ( b ) = bs_build then
8957: LD_VAR 0 2
8961: PPUSH
8962: CALL_OW 461
8966: PUSH
8967: LD_INT 1
8969: EQUAL
8970: IFFALSE 9030
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8972: LD_VAR 0 4
8976: PPUSH
8977: LD_STRING h
8979: PUSH
8980: LD_VAR 0 2
8984: PPUSH
8985: CALL_OW 250
8989: PUSH
8990: LD_VAR 0 2
8994: PPUSH
8995: CALL_OW 251
8999: PUSH
9000: LD_VAR 0 2
9004: PUSH
9005: LD_INT 0
9007: PUSH
9008: LD_INT 0
9010: PUSH
9011: LD_INT 0
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: PUSH
9023: EMPTY
9024: LIST
9025: PPUSH
9026: CALL_OW 446
9030: GO 8954
9032: POP
9033: POP
// end ;
9034: LD_VAR 0 3
9038: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9039: LD_INT 0
9041: PPUSH
9042: PPUSH
9043: PPUSH
9044: PPUSH
9045: PPUSH
9046: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9047: LD_VAR 0 1
9051: NOT
9052: IFTRUE 9069
9054: PUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 263
9064: PUSH
9065: LD_INT 2
9067: NONEQUAL
9068: OR
9069: IFFALSE 9073
// exit ;
9071: GO 9389
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9073: LD_ADDR_VAR 0 6
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: LD_VAR 0 1
9085: PPUSH
9086: CALL_OW 255
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 2
9097: PUSH
9098: LD_INT 30
9100: PUSH
9101: LD_INT 36
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: LD_INT 34
9110: PUSH
9111: LD_INT 31
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 69
9131: ST_TO_ADDR
// if not tmp then
9132: LD_VAR 0 6
9136: NOT
9137: IFFALSE 9141
// exit ;
9139: GO 9389
// result := [ ] ;
9141: LD_ADDR_VAR 0 2
9145: PUSH
9146: EMPTY
9147: ST_TO_ADDR
// for i in tmp do
9148: LD_ADDR_VAR 0 3
9152: PUSH
9153: LD_VAR 0 6
9157: PUSH
9158: FOR_IN
9159: IFFALSE 9230
// begin t := UnitsInside ( i ) ;
9161: LD_ADDR_VAR 0 4
9165: PUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: CALL_OW 313
9175: ST_TO_ADDR
// if t then
9176: LD_VAR 0 4
9180: IFFALSE 9228
// for j in t do
9182: LD_ADDR_VAR 0 7
9186: PUSH
9187: LD_VAR 0 4
9191: PUSH
9192: FOR_IN
9193: IFFALSE 9226
// result := Replace ( result , result + 1 , j ) ;
9195: LD_ADDR_VAR 0 2
9199: PUSH
9200: LD_VAR 0 2
9204: PPUSH
9205: LD_VAR 0 2
9209: PUSH
9210: LD_INT 1
9212: PLUS
9213: PPUSH
9214: LD_VAR 0 7
9218: PPUSH
9219: CALL_OW 1
9223: ST_TO_ADDR
9224: GO 9192
9226: POP
9227: POP
// end ;
9228: GO 9158
9230: POP
9231: POP
// if not result then
9232: LD_VAR 0 2
9236: NOT
9237: IFFALSE 9241
// exit ;
9239: GO 9389
// mech := result [ 1 ] ;
9241: LD_ADDR_VAR 0 5
9245: PUSH
9246: LD_VAR 0 2
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: ST_TO_ADDR
// if result > 1 then
9255: LD_VAR 0 2
9259: PUSH
9260: LD_INT 1
9262: GREATER
9263: IFFALSE 9375
// begin for i = 2 to result do
9265: LD_ADDR_VAR 0 3
9269: PUSH
9270: DOUBLE
9271: LD_INT 2
9273: DEC
9274: ST_TO_ADDR
9275: LD_VAR 0 2
9279: PUSH
9280: FOR_TO
9281: IFFALSE 9373
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_VAR 0 3
9297: ARRAY
9298: PPUSH
9299: LD_INT 3
9301: PPUSH
9302: CALL_OW 259
9306: PUSH
9307: LD_VAR 0 2
9311: PUSH
9312: LD_VAR 0 3
9316: ARRAY
9317: PPUSH
9318: CALL_OW 432
9322: MINUS
9323: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9324: LD_VAR 0 4
9328: PUSH
9329: LD_VAR 0 5
9333: PPUSH
9334: LD_INT 3
9336: PPUSH
9337: CALL_OW 259
9341: PUSH
9342: LD_VAR 0 5
9346: PPUSH
9347: CALL_OW 432
9351: MINUS
9352: GREATEREQUAL
9353: IFFALSE 9371
// mech := result [ i ] ;
9355: LD_ADDR_VAR 0 5
9359: PUSH
9360: LD_VAR 0 2
9364: PUSH
9365: LD_VAR 0 3
9369: ARRAY
9370: ST_TO_ADDR
// end ;
9371: GO 9280
9373: POP
9374: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9375: LD_VAR 0 1
9379: PPUSH
9380: LD_VAR 0 5
9384: PPUSH
9385: CALL_OW 135
// end ;
9389: LD_VAR 0 2
9393: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9394: LD_INT 0
9396: PPUSH
9397: PPUSH
9398: PPUSH
9399: PPUSH
9400: PPUSH
9401: PPUSH
9402: PPUSH
9403: PPUSH
9404: PPUSH
9405: PPUSH
9406: PPUSH
9407: PPUSH
9408: PPUSH
// result := [ ] ;
9409: LD_ADDR_VAR 0 7
9413: PUSH
9414: EMPTY
9415: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 266
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 1
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: IN
9436: NOT
9437: IFFALSE 9441
// exit ;
9439: GO 11081
// if name then
9441: LD_VAR 0 3
9445: IFFALSE 9461
// SetBName ( base_dep , name ) ;
9447: LD_VAR 0 1
9451: PPUSH
9452: LD_VAR 0 3
9456: PPUSH
9457: CALL_OW 500
// base := GetBase ( base_dep ) ;
9461: LD_ADDR_VAR 0 15
9465: PUSH
9466: LD_VAR 0 1
9470: PPUSH
9471: CALL_OW 274
9475: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9476: LD_ADDR_VAR 0 16
9480: PUSH
9481: LD_VAR 0 1
9485: PPUSH
9486: CALL_OW 255
9490: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9491: LD_ADDR_VAR 0 17
9495: PUSH
9496: LD_VAR 0 1
9500: PPUSH
9501: CALL_OW 248
9505: ST_TO_ADDR
// if sources then
9506: LD_VAR 0 5
9510: IFFALSE 9557
// for i = 1 to 3 do
9512: LD_ADDR_VAR 0 8
9516: PUSH
9517: DOUBLE
9518: LD_INT 1
9520: DEC
9521: ST_TO_ADDR
9522: LD_INT 3
9524: PUSH
9525: FOR_TO
9526: IFFALSE 9555
// AddResourceType ( base , i , sources [ i ] ) ;
9528: LD_VAR 0 15
9532: PPUSH
9533: LD_VAR 0 8
9537: PPUSH
9538: LD_VAR 0 5
9542: PUSH
9543: LD_VAR 0 8
9547: ARRAY
9548: PPUSH
9549: CALL_OW 276
9553: GO 9525
9555: POP
9556: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9557: LD_ADDR_VAR 0 18
9561: PUSH
9562: LD_VAR 0 15
9566: PPUSH
9567: LD_VAR 0 2
9571: PPUSH
9572: LD_INT 1
9574: PPUSH
9575: CALL 8816 0 3
9579: ST_TO_ADDR
// InitHc ;
9580: CALL_OW 19
// InitUc ;
9584: CALL_OW 18
// uc_side := side ;
9588: LD_ADDR_OWVAR 20
9592: PUSH
9593: LD_VAR 0 16
9597: ST_TO_ADDR
// uc_nation := nation ;
9598: LD_ADDR_OWVAR 21
9602: PUSH
9603: LD_VAR 0 17
9607: ST_TO_ADDR
// if buildings then
9608: LD_VAR 0 18
9612: IFFALSE 10940
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9614: LD_ADDR_VAR 0 19
9618: PUSH
9619: LD_VAR 0 18
9623: PPUSH
9624: LD_INT 2
9626: PUSH
9627: LD_INT 30
9629: PUSH
9630: LD_INT 29
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 30
9639: PUSH
9640: LD_INT 30
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: PPUSH
9652: CALL_OW 72
9656: ST_TO_ADDR
// if tmp then
9657: LD_VAR 0 19
9661: IFFALSE 9709
// for i in tmp do
9663: LD_ADDR_VAR 0 8
9667: PUSH
9668: LD_VAR 0 19
9672: PUSH
9673: FOR_IN
9674: IFFALSE 9707
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9676: LD_VAR 0 8
9680: PPUSH
9681: CALL_OW 250
9685: PPUSH
9686: LD_VAR 0 8
9690: PPUSH
9691: CALL_OW 251
9695: PPUSH
9696: LD_VAR 0 16
9700: PPUSH
9701: CALL_OW 441
9705: GO 9673
9707: POP
9708: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9709: LD_VAR 0 18
9713: PPUSH
9714: LD_INT 2
9716: PUSH
9717: LD_INT 30
9719: PUSH
9720: LD_INT 32
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 30
9729: PUSH
9730: LD_INT 33
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: PPUSH
9742: CALL_OW 72
9746: IFFALSE 9834
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9748: LD_ADDR_VAR 0 8
9752: PUSH
9753: LD_VAR 0 18
9757: PPUSH
9758: LD_INT 2
9760: PUSH
9761: LD_INT 30
9763: PUSH
9764: LD_INT 32
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 30
9773: PUSH
9774: LD_INT 33
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 72
9790: PUSH
9791: FOR_IN
9792: IFFALSE 9832
// begin if not GetBWeapon ( i ) then
9794: LD_VAR 0 8
9798: PPUSH
9799: CALL_OW 269
9803: NOT
9804: IFFALSE 9830
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9806: LD_VAR 0 8
9810: PPUSH
9811: LD_VAR 0 8
9815: PPUSH
9816: LD_VAR 0 2
9820: PPUSH
9821: CALL 11086 0 2
9825: PPUSH
9826: CALL_OW 431
// end ;
9830: GO 9791
9832: POP
9833: POP
// end ; for i = 1 to personel do
9834: LD_ADDR_VAR 0 8
9838: PUSH
9839: DOUBLE
9840: LD_INT 1
9842: DEC
9843: ST_TO_ADDR
9844: LD_VAR 0 6
9848: PUSH
9849: FOR_TO
9850: IFFALSE 10920
// begin if i > 4 then
9852: LD_VAR 0 8
9856: PUSH
9857: LD_INT 4
9859: GREATER
9860: IFFALSE 9864
// break ;
9862: GO 10920
// case i of 1 :
9864: LD_VAR 0 8
9868: PUSH
9869: LD_INT 1
9871: DOUBLE
9872: EQUAL
9873: IFTRUE 9877
9875: GO 9957
9877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9878: LD_ADDR_VAR 0 12
9882: PUSH
9883: LD_VAR 0 18
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 16
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 58
9902: PUSH
9903: EMPTY
9904: LIST
9905: PUSH
9906: LD_INT 2
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 32
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: LD_INT 30
9921: PUSH
9922: LD_INT 4
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PUSH
9929: LD_INT 30
9931: PUSH
9932: LD_INT 5
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: PPUSH
9950: CALL_OW 72
9954: ST_TO_ADDR
9955: GO 10179
9957: LD_INT 2
9959: DOUBLE
9960: EQUAL
9961: IFTRUE 9965
9963: GO 10027
9965: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9966: LD_ADDR_VAR 0 12
9970: PUSH
9971: LD_VAR 0 18
9975: PPUSH
9976: LD_INT 22
9978: PUSH
9979: LD_VAR 0 16
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 2
9990: PUSH
9991: LD_INT 30
9993: PUSH
9994: LD_INT 0
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 30
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 72
10024: ST_TO_ADDR
10025: GO 10179
10027: LD_INT 3
10029: DOUBLE
10030: EQUAL
10031: IFTRUE 10035
10033: GO 10097
10035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10036: LD_ADDR_VAR 0 12
10040: PUSH
10041: LD_VAR 0 18
10045: PPUSH
10046: LD_INT 22
10048: PUSH
10049: LD_VAR 0 16
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 2
10060: PUSH
10061: LD_INT 30
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 30
10073: PUSH
10074: LD_INT 3
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: LIST
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PPUSH
10090: CALL_OW 72
10094: ST_TO_ADDR
10095: GO 10179
10097: LD_INT 4
10099: DOUBLE
10100: EQUAL
10101: IFTRUE 10105
10103: GO 10178
10105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10106: LD_ADDR_VAR 0 12
10110: PUSH
10111: LD_VAR 0 18
10115: PPUSH
10116: LD_INT 22
10118: PUSH
10119: LD_VAR 0 16
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 2
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 6
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 30
10143: PUSH
10144: LD_INT 7
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 30
10153: PUSH
10154: LD_INT 8
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 72
10175: ST_TO_ADDR
10176: GO 10179
10178: POP
// if i = 1 then
10179: LD_VAR 0 8
10183: PUSH
10184: LD_INT 1
10186: EQUAL
10187: IFFALSE 10298
// begin tmp := [ ] ;
10189: LD_ADDR_VAR 0 19
10193: PUSH
10194: EMPTY
10195: ST_TO_ADDR
// for j in f do
10196: LD_ADDR_VAR 0 9
10200: PUSH
10201: LD_VAR 0 12
10205: PUSH
10206: FOR_IN
10207: IFFALSE 10280
// if GetBType ( j ) = b_bunker then
10209: LD_VAR 0 9
10213: PPUSH
10214: CALL_OW 266
10218: PUSH
10219: LD_INT 32
10221: EQUAL
10222: IFFALSE 10249
// tmp := Insert ( tmp , 1 , j ) else
10224: LD_ADDR_VAR 0 19
10228: PUSH
10229: LD_VAR 0 19
10233: PPUSH
10234: LD_INT 1
10236: PPUSH
10237: LD_VAR 0 9
10241: PPUSH
10242: CALL_OW 2
10246: ST_TO_ADDR
10247: GO 10278
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10249: LD_ADDR_VAR 0 19
10253: PUSH
10254: LD_VAR 0 19
10258: PPUSH
10259: LD_VAR 0 19
10263: PUSH
10264: LD_INT 1
10266: PLUS
10267: PPUSH
10268: LD_VAR 0 9
10272: PPUSH
10273: CALL_OW 2
10277: ST_TO_ADDR
10278: GO 10206
10280: POP
10281: POP
// if tmp then
10282: LD_VAR 0 19
10286: IFFALSE 10298
// f := tmp ;
10288: LD_ADDR_VAR 0 12
10292: PUSH
10293: LD_VAR 0 19
10297: ST_TO_ADDR
// end ; x := personel [ i ] ;
10298: LD_ADDR_VAR 0 13
10302: PUSH
10303: LD_VAR 0 6
10307: PUSH
10308: LD_VAR 0 8
10312: ARRAY
10313: ST_TO_ADDR
// if x = - 1 then
10314: LD_VAR 0 13
10318: PUSH
10319: LD_INT 1
10321: NEG
10322: EQUAL
10323: IFFALSE 10534
// begin for j in f do
10325: LD_ADDR_VAR 0 9
10329: PUSH
10330: LD_VAR 0 12
10334: PUSH
10335: FOR_IN
10336: IFFALSE 10530
// repeat InitHc ;
10338: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10342: LD_VAR 0 9
10346: PPUSH
10347: CALL_OW 266
10351: PUSH
10352: LD_INT 5
10354: EQUAL
10355: IFFALSE 10425
// begin if UnitsInside ( j ) < 3 then
10357: LD_VAR 0 9
10361: PPUSH
10362: CALL_OW 313
10366: PUSH
10367: LD_INT 3
10369: LESS
10370: IFFALSE 10406
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10372: LD_INT 0
10374: PPUSH
10375: LD_INT 5
10377: PUSH
10378: LD_INT 8
10380: PUSH
10381: LD_INT 9
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: LD_VAR 0 17
10393: ARRAY
10394: PPUSH
10395: LD_VAR 0 4
10399: PPUSH
10400: CALL_OW 380
10404: GO 10423
// PrepareHuman ( false , i , skill ) ;
10406: LD_INT 0
10408: PPUSH
10409: LD_VAR 0 8
10413: PPUSH
10414: LD_VAR 0 4
10418: PPUSH
10419: CALL_OW 380
// end else
10423: GO 10442
// PrepareHuman ( false , i , skill ) ;
10425: LD_INT 0
10427: PPUSH
10428: LD_VAR 0 8
10432: PPUSH
10433: LD_VAR 0 4
10437: PPUSH
10438: CALL_OW 380
// un := CreateHuman ;
10442: LD_ADDR_VAR 0 14
10446: PUSH
10447: CALL_OW 44
10451: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10452: LD_ADDR_VAR 0 7
10456: PUSH
10457: LD_VAR 0 7
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: LD_VAR 0 14
10469: PPUSH
10470: CALL_OW 2
10474: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10475: LD_VAR 0 14
10479: PPUSH
10480: LD_VAR 0 9
10484: PPUSH
10485: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10489: LD_VAR 0 9
10493: PPUSH
10494: CALL_OW 313
10498: PUSH
10499: LD_INT 6
10501: EQUAL
10502: IFTRUE 10526
10504: PUSH
10505: LD_VAR 0 9
10509: PPUSH
10510: CALL_OW 266
10514: PUSH
10515: LD_INT 32
10517: PUSH
10518: LD_INT 31
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: IN
10525: OR
10526: IFFALSE 10338
10528: GO 10335
10530: POP
10531: POP
// end else
10532: GO 10918
// for j = 1 to x do
10534: LD_ADDR_VAR 0 9
10538: PUSH
10539: DOUBLE
10540: LD_INT 1
10542: DEC
10543: ST_TO_ADDR
10544: LD_VAR 0 13
10548: PUSH
10549: FOR_TO
10550: IFFALSE 10916
// begin InitHc ;
10552: CALL_OW 19
// if not f then
10556: LD_VAR 0 12
10560: NOT
10561: IFFALSE 10650
// begin PrepareHuman ( false , i , skill ) ;
10563: LD_INT 0
10565: PPUSH
10566: LD_VAR 0 8
10570: PPUSH
10571: LD_VAR 0 4
10575: PPUSH
10576: CALL_OW 380
// un := CreateHuman ;
10580: LD_ADDR_VAR 0 14
10584: PUSH
10585: CALL_OW 44
10589: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10590: LD_ADDR_VAR 0 7
10594: PUSH
10595: LD_VAR 0 7
10599: PPUSH
10600: LD_INT 1
10602: PPUSH
10603: LD_VAR 0 14
10607: PPUSH
10608: CALL_OW 2
10612: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10613: LD_VAR 0 14
10617: PPUSH
10618: LD_VAR 0 1
10622: PPUSH
10623: CALL_OW 250
10627: PPUSH
10628: LD_VAR 0 1
10632: PPUSH
10633: CALL_OW 251
10637: PPUSH
10638: LD_INT 10
10640: PPUSH
10641: LD_INT 0
10643: PPUSH
10644: CALL_OW 50
// continue ;
10648: GO 10549
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10650: LD_VAR 0 12
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: CALL_OW 313
10663: IFFALSE 10691
10665: PUSH
10666: LD_VAR 0 12
10670: PUSH
10671: LD_INT 1
10673: ARRAY
10674: PPUSH
10675: CALL_OW 266
10679: PUSH
10680: LD_INT 32
10682: PUSH
10683: LD_INT 31
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: IN
10690: AND
10691: IFTRUE 10712
10693: PUSH
10694: LD_VAR 0 12
10698: PUSH
10699: LD_INT 1
10701: ARRAY
10702: PPUSH
10703: CALL_OW 313
10707: PUSH
10708: LD_INT 6
10710: EQUAL
10711: OR
10712: IFFALSE 10732
// f := Delete ( f , 1 ) ;
10714: LD_ADDR_VAR 0 12
10718: PUSH
10719: LD_VAR 0 12
10723: PPUSH
10724: LD_INT 1
10726: PPUSH
10727: CALL_OW 3
10731: ST_TO_ADDR
// if not f then
10732: LD_VAR 0 12
10736: NOT
10737: IFFALSE 10755
// begin x := x + 2 ;
10739: LD_ADDR_VAR 0 13
10743: PUSH
10744: LD_VAR 0 13
10748: PUSH
10749: LD_INT 2
10751: PLUS
10752: ST_TO_ADDR
// continue ;
10753: GO 10549
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10755: LD_VAR 0 12
10759: PUSH
10760: LD_INT 1
10762: ARRAY
10763: PPUSH
10764: CALL_OW 266
10768: PUSH
10769: LD_INT 5
10771: EQUAL
10772: IFFALSE 10846
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10774: LD_VAR 0 12
10778: PUSH
10779: LD_INT 1
10781: ARRAY
10782: PPUSH
10783: CALL_OW 313
10787: PUSH
10788: LD_INT 3
10790: LESS
10791: IFFALSE 10827
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10793: LD_INT 0
10795: PPUSH
10796: LD_INT 5
10798: PUSH
10799: LD_INT 8
10801: PUSH
10802: LD_INT 9
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: LD_VAR 0 17
10814: ARRAY
10815: PPUSH
10816: LD_VAR 0 4
10820: PPUSH
10821: CALL_OW 380
10825: GO 10844
// PrepareHuman ( false , i , skill ) ;
10827: LD_INT 0
10829: PPUSH
10830: LD_VAR 0 8
10834: PPUSH
10835: LD_VAR 0 4
10839: PPUSH
10840: CALL_OW 380
// end else
10844: GO 10863
// PrepareHuman ( false , i , skill ) ;
10846: LD_INT 0
10848: PPUSH
10849: LD_VAR 0 8
10853: PPUSH
10854: LD_VAR 0 4
10858: PPUSH
10859: CALL_OW 380
// un := CreateHuman ;
10863: LD_ADDR_VAR 0 14
10867: PUSH
10868: CALL_OW 44
10872: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10873: LD_ADDR_VAR 0 7
10877: PUSH
10878: LD_VAR 0 7
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: LD_VAR 0 14
10890: PPUSH
10891: CALL_OW 2
10895: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10896: LD_VAR 0 14
10900: PPUSH
10901: LD_VAR 0 12
10905: PUSH
10906: LD_INT 1
10908: ARRAY
10909: PPUSH
10910: CALL_OW 52
// end ;
10914: GO 10549
10916: POP
10917: POP
// end ;
10918: GO 9849
10920: POP
10921: POP
// result := result ^ buildings ;
10922: LD_ADDR_VAR 0 7
10926: PUSH
10927: LD_VAR 0 7
10931: PUSH
10932: LD_VAR 0 18
10936: ADD
10937: ST_TO_ADDR
// end else
10938: GO 11081
// begin for i = 1 to personel do
10940: LD_ADDR_VAR 0 8
10944: PUSH
10945: DOUBLE
10946: LD_INT 1
10948: DEC
10949: ST_TO_ADDR
10950: LD_VAR 0 6
10954: PUSH
10955: FOR_TO
10956: IFFALSE 11079
// begin if i > 4 then
10958: LD_VAR 0 8
10962: PUSH
10963: LD_INT 4
10965: GREATER
10966: IFFALSE 10970
// break ;
10968: GO 11079
// x := personel [ i ] ;
10970: LD_ADDR_VAR 0 13
10974: PUSH
10975: LD_VAR 0 6
10979: PUSH
10980: LD_VAR 0 8
10984: ARRAY
10985: ST_TO_ADDR
// if x = - 1 then
10986: LD_VAR 0 13
10990: PUSH
10991: LD_INT 1
10993: NEG
10994: EQUAL
10995: IFFALSE 10999
// continue ;
10997: GO 10955
// PrepareHuman ( false , i , skill ) ;
10999: LD_INT 0
11001: PPUSH
11002: LD_VAR 0 8
11006: PPUSH
11007: LD_VAR 0 4
11011: PPUSH
11012: CALL_OW 380
// un := CreateHuman ;
11016: LD_ADDR_VAR 0 14
11020: PUSH
11021: CALL_OW 44
11025: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11026: LD_VAR 0 14
11030: PPUSH
11031: LD_VAR 0 1
11035: PPUSH
11036: CALL_OW 250
11040: PPUSH
11041: LD_VAR 0 1
11045: PPUSH
11046: CALL_OW 251
11050: PPUSH
11051: LD_INT 10
11053: PPUSH
11054: LD_INT 0
11056: PPUSH
11057: CALL_OW 50
// result := result ^ un ;
11061: LD_ADDR_VAR 0 7
11065: PUSH
11066: LD_VAR 0 7
11070: PUSH
11071: LD_VAR 0 14
11075: ADD
11076: ST_TO_ADDR
// end ;
11077: GO 10955
11079: POP
11080: POP
// end ; end ;
11081: LD_VAR 0 7
11085: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11086: LD_INT 0
11088: PPUSH
11089: PPUSH
11090: PPUSH
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
11102: PPUSH
11103: PPUSH
// result := false ;
11104: LD_ADDR_VAR 0 3
11108: PUSH
11109: LD_INT 0
11111: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11112: LD_VAR 0 1
11116: NOT
11117: IFTRUE 11142
11119: PUSH
11120: LD_VAR 0 1
11124: PPUSH
11125: CALL_OW 266
11129: PUSH
11130: LD_INT 32
11132: PUSH
11133: LD_INT 33
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: IN
11140: NOT
11141: OR
11142: IFFALSE 11146
// exit ;
11144: GO 12281
// nat := GetNation ( tower ) ;
11146: LD_ADDR_VAR 0 12
11150: PUSH
11151: LD_VAR 0 1
11155: PPUSH
11156: CALL_OW 248
11160: ST_TO_ADDR
// side := GetSide ( tower ) ;
11161: LD_ADDR_VAR 0 16
11165: PUSH
11166: LD_VAR 0 1
11170: PPUSH
11171: CALL_OW 255
11175: ST_TO_ADDR
// x := GetX ( tower ) ;
11176: LD_ADDR_VAR 0 10
11180: PUSH
11181: LD_VAR 0 1
11185: PPUSH
11186: CALL_OW 250
11190: ST_TO_ADDR
// y := GetY ( tower ) ;
11191: LD_ADDR_VAR 0 11
11195: PUSH
11196: LD_VAR 0 1
11200: PPUSH
11201: CALL_OW 251
11205: ST_TO_ADDR
// if not x or not y then
11206: LD_VAR 0 10
11210: NOT
11211: IFTRUE 11220
11213: PUSH
11214: LD_VAR 0 11
11218: NOT
11219: OR
11220: IFFALSE 11224
// exit ;
11222: GO 12281
// weapon := 0 ;
11224: LD_ADDR_VAR 0 18
11228: PUSH
11229: LD_INT 0
11231: ST_TO_ADDR
// fac_list := [ ] ;
11232: LD_ADDR_VAR 0 17
11236: PUSH
11237: EMPTY
11238: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11239: LD_ADDR_VAR 0 6
11243: PUSH
11244: LD_VAR 0 1
11248: PPUSH
11249: CALL_OW 274
11253: PPUSH
11254: LD_VAR 0 2
11258: PPUSH
11259: LD_INT 0
11261: PPUSH
11262: CALL 8816 0 3
11266: PPUSH
11267: LD_INT 30
11269: PUSH
11270: LD_INT 3
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PPUSH
11277: CALL_OW 72
11281: ST_TO_ADDR
// if not factories then
11282: LD_VAR 0 6
11286: NOT
11287: IFFALSE 11291
// exit ;
11289: GO 12281
// for i in factories do
11291: LD_ADDR_VAR 0 8
11295: PUSH
11296: LD_VAR 0 6
11300: PUSH
11301: FOR_IN
11302: IFFALSE 11327
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11304: LD_ADDR_VAR 0 17
11308: PUSH
11309: LD_VAR 0 17
11313: PUSH
11314: LD_VAR 0 8
11318: PPUSH
11319: CALL_OW 478
11323: UNION
11324: ST_TO_ADDR
11325: GO 11301
11327: POP
11328: POP
// if not fac_list then
11329: LD_VAR 0 17
11333: NOT
11334: IFFALSE 11338
// exit ;
11336: GO 12281
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11338: LD_ADDR_VAR 0 5
11342: PUSH
11343: LD_INT 4
11345: PUSH
11346: LD_INT 5
11348: PUSH
11349: LD_INT 9
11351: PUSH
11352: LD_INT 10
11354: PUSH
11355: LD_INT 6
11357: PUSH
11358: LD_INT 7
11360: PUSH
11361: LD_INT 11
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 27
11375: PUSH
11376: LD_INT 28
11378: PUSH
11379: LD_INT 26
11381: PUSH
11382: LD_INT 30
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 43
11393: PUSH
11394: LD_INT 44
11396: PUSH
11397: LD_INT 46
11399: PUSH
11400: LD_INT 45
11402: PUSH
11403: LD_INT 47
11405: PUSH
11406: LD_INT 49
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: PUSH
11422: LD_VAR 0 12
11426: ARRAY
11427: ST_TO_ADDR
// list := list isect fac_list ;
11428: LD_ADDR_VAR 0 5
11432: PUSH
11433: LD_VAR 0 5
11437: PUSH
11438: LD_VAR 0 17
11442: ISECT
11443: ST_TO_ADDR
// if not list then
11444: LD_VAR 0 5
11448: NOT
11449: IFFALSE 11453
// exit ;
11451: GO 12281
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11453: LD_VAR 0 12
11457: PUSH
11458: LD_INT 3
11460: EQUAL
11461: IFFALSE 11473
11463: PUSH
11464: LD_INT 49
11466: PUSH
11467: LD_VAR 0 5
11471: IN
11472: AND
11473: IFFALSE 11493
11475: PUSH
11476: LD_INT 31
11478: PPUSH
11479: LD_VAR 0 16
11483: PPUSH
11484: CALL_OW 321
11488: PUSH
11489: LD_INT 2
11491: EQUAL
11492: AND
11493: IFFALSE 11553
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11495: LD_INT 22
11497: PUSH
11498: LD_VAR 0 16
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 35
11509: PUSH
11510: LD_INT 49
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 91
11519: PUSH
11520: LD_VAR 0 1
11524: PUSH
11525: LD_INT 10
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: PPUSH
11538: CALL_OW 69
11542: NOT
11543: IFFALSE 11553
// weapon := ru_time_lapser ;
11545: LD_ADDR_VAR 0 18
11549: PUSH
11550: LD_INT 49
11552: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11553: LD_VAR 0 12
11557: PUSH
11558: LD_INT 1
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: IN
11568: IFFALSE 11592
11570: PUSH
11571: LD_INT 11
11573: PUSH
11574: LD_VAR 0 5
11578: IN
11579: IFTRUE 11591
11581: PUSH
11582: LD_INT 30
11584: PUSH
11585: LD_VAR 0 5
11589: IN
11590: OR
11591: AND
11592: IFFALSE 11612
11594: PUSH
11595: LD_INT 6
11597: PPUSH
11598: LD_VAR 0 16
11602: PPUSH
11603: CALL_OW 321
11607: PUSH
11608: LD_INT 2
11610: EQUAL
11611: AND
11612: IFFALSE 11779
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11614: LD_INT 22
11616: PUSH
11617: LD_VAR 0 16
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 2
11628: PUSH
11629: LD_INT 35
11631: PUSH
11632: LD_INT 11
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 35
11641: PUSH
11642: LD_INT 30
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 91
11656: PUSH
11657: LD_VAR 0 1
11661: PUSH
11662: LD_INT 18
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: PPUSH
11675: CALL_OW 69
11679: NOT
11680: IFFALSE 11756
11682: PUSH
11683: LD_INT 22
11685: PUSH
11686: LD_VAR 0 16
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 2
11697: PUSH
11698: LD_INT 30
11700: PUSH
11701: LD_INT 32
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 30
11710: PUSH
11711: LD_INT 33
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 91
11725: PUSH
11726: LD_VAR 0 1
11730: PUSH
11731: LD_INT 12
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: PPUSH
11747: CALL_OW 69
11751: PUSH
11752: LD_INT 2
11754: GREATER
11755: AND
11756: IFFALSE 11779
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11758: LD_ADDR_VAR 0 18
11762: PUSH
11763: LD_INT 11
11765: PUSH
11766: LD_INT 30
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_VAR 0 12
11777: ARRAY
11778: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11779: LD_VAR 0 18
11783: NOT
11784: IFFALSE 11804
11786: PUSH
11787: LD_INT 40
11789: PPUSH
11790: LD_VAR 0 16
11794: PPUSH
11795: CALL_OW 321
11799: PUSH
11800: LD_INT 2
11802: EQUAL
11803: AND
11804: IFFALSE 11840
11806: PUSH
11807: LD_INT 7
11809: PUSH
11810: LD_VAR 0 5
11814: IN
11815: IFTRUE 11827
11817: PUSH
11818: LD_INT 28
11820: PUSH
11821: LD_VAR 0 5
11825: IN
11826: OR
11827: IFTRUE 11839
11829: PUSH
11830: LD_INT 45
11832: PUSH
11833: LD_VAR 0 5
11837: IN
11838: OR
11839: AND
11840: IFFALSE 12094
// begin hex := GetHexInfo ( x , y ) ;
11842: LD_ADDR_VAR 0 4
11846: PUSH
11847: LD_VAR 0 10
11851: PPUSH
11852: LD_VAR 0 11
11856: PPUSH
11857: CALL_OW 546
11861: ST_TO_ADDR
// if hex [ 1 ] then
11862: LD_VAR 0 4
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: IFFALSE 11874
// exit ;
11872: GO 12281
// height := hex [ 2 ] ;
11874: LD_ADDR_VAR 0 15
11878: PUSH
11879: LD_VAR 0 4
11883: PUSH
11884: LD_INT 2
11886: ARRAY
11887: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11888: LD_ADDR_VAR 0 14
11892: PUSH
11893: LD_INT 0
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: LD_INT 5
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: ST_TO_ADDR
// for i in tmp do
11911: LD_ADDR_VAR 0 8
11915: PUSH
11916: LD_VAR 0 14
11920: PUSH
11921: FOR_IN
11922: IFFALSE 12092
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11924: LD_ADDR_VAR 0 9
11928: PUSH
11929: LD_VAR 0 10
11933: PPUSH
11934: LD_VAR 0 8
11938: PPUSH
11939: LD_INT 5
11941: PPUSH
11942: CALL_OW 272
11946: PUSH
11947: LD_VAR 0 11
11951: PPUSH
11952: LD_VAR 0 8
11956: PPUSH
11957: LD_INT 5
11959: PPUSH
11960: CALL_OW 273
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11969: LD_VAR 0 9
11973: PUSH
11974: LD_INT 1
11976: ARRAY
11977: PPUSH
11978: LD_VAR 0 9
11982: PUSH
11983: LD_INT 2
11985: ARRAY
11986: PPUSH
11987: CALL_OW 488
11991: IFFALSE 12090
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11993: LD_ADDR_VAR 0 4
11997: PUSH
11998: LD_VAR 0 9
12002: PUSH
12003: LD_INT 1
12005: ARRAY
12006: PPUSH
12007: LD_VAR 0 9
12011: PUSH
12012: LD_INT 2
12014: ARRAY
12015: PPUSH
12016: CALL_OW 546
12020: ST_TO_ADDR
// if hex [ 1 ] then
12021: LD_VAR 0 4
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: IFFALSE 12033
// continue ;
12031: GO 11921
// h := hex [ 2 ] ;
12033: LD_ADDR_VAR 0 13
12037: PUSH
12038: LD_VAR 0 4
12042: PUSH
12043: LD_INT 2
12045: ARRAY
12046: ST_TO_ADDR
// if h + 7 < height then
12047: LD_VAR 0 13
12051: PUSH
12052: LD_INT 7
12054: PLUS
12055: PUSH
12056: LD_VAR 0 15
12060: LESS
12061: IFFALSE 12090
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12063: LD_ADDR_VAR 0 18
12067: PUSH
12068: LD_INT 7
12070: PUSH
12071: LD_INT 28
12073: PUSH
12074: LD_INT 45
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: PUSH
12082: LD_VAR 0 12
12086: ARRAY
12087: ST_TO_ADDR
// break ;
12088: GO 12092
// end ; end ; end ;
12090: GO 11921
12092: POP
12093: POP
// end ; if not weapon then
12094: LD_VAR 0 18
12098: NOT
12099: IFFALSE 12159
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12101: LD_ADDR_VAR 0 5
12105: PUSH
12106: LD_VAR 0 5
12110: PUSH
12111: LD_INT 11
12113: PUSH
12114: LD_INT 30
12116: PUSH
12117: LD_INT 49
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: DIFF
12125: ST_TO_ADDR
// if not list then
12126: LD_VAR 0 5
12130: NOT
12131: IFFALSE 12135
// exit ;
12133: GO 12281
// weapon := list [ rand ( 1 , list ) ] ;
12135: LD_ADDR_VAR 0 18
12139: PUSH
12140: LD_VAR 0 5
12144: PUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 5
12152: PPUSH
12153: CALL_OW 12
12157: ARRAY
12158: ST_TO_ADDR
// end ; if weapon then
12159: LD_VAR 0 18
12163: IFFALSE 12281
// begin tmp := CostOfWeapon ( weapon ) ;
12165: LD_ADDR_VAR 0 14
12169: PUSH
12170: LD_VAR 0 18
12174: PPUSH
12175: CALL_OW 451
12179: ST_TO_ADDR
// j := GetBase ( tower ) ;
12180: LD_ADDR_VAR 0 9
12184: PUSH
12185: LD_VAR 0 1
12189: PPUSH
12190: CALL_OW 274
12194: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12195: LD_VAR 0 9
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 275
12207: PUSH
12208: LD_VAR 0 14
12212: PUSH
12213: LD_INT 1
12215: ARRAY
12216: GREATEREQUAL
12217: IFFALSE 12243
12219: PUSH
12220: LD_VAR 0 9
12224: PPUSH
12225: LD_INT 2
12227: PPUSH
12228: CALL_OW 275
12232: PUSH
12233: LD_VAR 0 14
12237: PUSH
12238: LD_INT 2
12240: ARRAY
12241: GREATEREQUAL
12242: AND
12243: IFFALSE 12269
12245: PUSH
12246: LD_VAR 0 9
12250: PPUSH
12251: LD_INT 3
12253: PPUSH
12254: CALL_OW 275
12258: PUSH
12259: LD_VAR 0 14
12263: PUSH
12264: LD_INT 3
12266: ARRAY
12267: GREATEREQUAL
12268: AND
12269: IFFALSE 12281
// result := weapon ;
12271: LD_ADDR_VAR 0 3
12275: PUSH
12276: LD_VAR 0 18
12280: ST_TO_ADDR
// end ; end ;
12281: LD_VAR 0 3
12285: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12286: LD_INT 0
12288: PPUSH
12289: PPUSH
// result := true ;
12290: LD_ADDR_VAR 0 3
12294: PUSH
12295: LD_INT 1
12297: ST_TO_ADDR
// if array1 = array2 then
12298: LD_VAR 0 1
12302: PUSH
12303: LD_VAR 0 2
12307: EQUAL
12308: IFFALSE 12368
// begin for i = 1 to array1 do
12310: LD_ADDR_VAR 0 4
12314: PUSH
12315: DOUBLE
12316: LD_INT 1
12318: DEC
12319: ST_TO_ADDR
12320: LD_VAR 0 1
12324: PUSH
12325: FOR_TO
12326: IFFALSE 12364
// if array1 [ i ] <> array2 [ i ] then
12328: LD_VAR 0 1
12332: PUSH
12333: LD_VAR 0 4
12337: ARRAY
12338: PUSH
12339: LD_VAR 0 2
12343: PUSH
12344: LD_VAR 0 4
12348: ARRAY
12349: NONEQUAL
12350: IFFALSE 12362
// begin result := false ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: LD_INT 0
12359: ST_TO_ADDR
// break ;
12360: GO 12364
// end ;
12362: GO 12325
12364: POP
12365: POP
// end else
12366: GO 12376
// result := false ;
12368: LD_ADDR_VAR 0 3
12372: PUSH
12373: LD_INT 0
12375: ST_TO_ADDR
// end ;
12376: LD_VAR 0 3
12380: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12381: LD_INT 0
12383: PPUSH
12384: PPUSH
// if not array1 or not array2 then
12385: LD_VAR 0 1
12389: NOT
12390: IFTRUE 12399
12392: PUSH
12393: LD_VAR 0 2
12397: NOT
12398: OR
12399: IFFALSE 12403
// exit ;
12401: GO 12467
// result := true ;
12403: LD_ADDR_VAR 0 3
12407: PUSH
12408: LD_INT 1
12410: ST_TO_ADDR
// for i = 1 to array1 do
12411: LD_ADDR_VAR 0 4
12415: PUSH
12416: DOUBLE
12417: LD_INT 1
12419: DEC
12420: ST_TO_ADDR
12421: LD_VAR 0 1
12425: PUSH
12426: FOR_TO
12427: IFFALSE 12465
// if array1 [ i ] <> array2 [ i ] then
12429: LD_VAR 0 1
12433: PUSH
12434: LD_VAR 0 4
12438: ARRAY
12439: PUSH
12440: LD_VAR 0 2
12444: PUSH
12445: LD_VAR 0 4
12449: ARRAY
12450: NONEQUAL
12451: IFFALSE 12463
// begin result := false ;
12453: LD_ADDR_VAR 0 3
12457: PUSH
12458: LD_INT 0
12460: ST_TO_ADDR
// break ;
12461: GO 12465
// end ;
12463: GO 12426
12465: POP
12466: POP
// end ;
12467: LD_VAR 0 3
12471: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12472: LD_INT 0
12474: PPUSH
12475: PPUSH
12476: PPUSH
// pom := GetBase ( fac ) ;
12477: LD_ADDR_VAR 0 5
12481: PUSH
12482: LD_VAR 0 1
12486: PPUSH
12487: CALL_OW 274
12491: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12492: LD_ADDR_VAR 0 4
12496: PUSH
12497: LD_VAR 0 2
12501: PUSH
12502: LD_INT 1
12504: ARRAY
12505: PPUSH
12506: LD_VAR 0 2
12510: PUSH
12511: LD_INT 2
12513: ARRAY
12514: PPUSH
12515: LD_VAR 0 2
12519: PUSH
12520: LD_INT 3
12522: ARRAY
12523: PPUSH
12524: LD_VAR 0 2
12528: PUSH
12529: LD_INT 4
12531: ARRAY
12532: PPUSH
12533: CALL_OW 449
12537: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12538: LD_ADDR_VAR 0 3
12542: PUSH
12543: LD_VAR 0 5
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: CALL_OW 275
12555: PUSH
12556: LD_VAR 0 4
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: GREATEREQUAL
12565: IFFALSE 12591
12567: PUSH
12568: LD_VAR 0 5
12572: PPUSH
12573: LD_INT 2
12575: PPUSH
12576: CALL_OW 275
12580: PUSH
12581: LD_VAR 0 4
12585: PUSH
12586: LD_INT 2
12588: ARRAY
12589: GREATEREQUAL
12590: AND
12591: IFFALSE 12617
12593: PUSH
12594: LD_VAR 0 5
12598: PPUSH
12599: LD_INT 3
12601: PPUSH
12602: CALL_OW 275
12606: PUSH
12607: LD_VAR 0 4
12611: PUSH
12612: LD_INT 3
12614: ARRAY
12615: GREATEREQUAL
12616: AND
12617: ST_TO_ADDR
// end ;
12618: LD_VAR 0 3
12622: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12623: LD_INT 0
12625: PPUSH
12626: PPUSH
12627: PPUSH
12628: PPUSH
// pom := GetBase ( building ) ;
12629: LD_ADDR_VAR 0 3
12633: PUSH
12634: LD_VAR 0 1
12638: PPUSH
12639: CALL_OW 274
12643: ST_TO_ADDR
// if not pom then
12644: LD_VAR 0 3
12648: NOT
12649: IFFALSE 12653
// exit ;
12651: GO 12827
// btype := GetBType ( building ) ;
12653: LD_ADDR_VAR 0 5
12657: PUSH
12658: LD_VAR 0 1
12662: PPUSH
12663: CALL_OW 266
12667: ST_TO_ADDR
// if btype = b_armoury then
12668: LD_VAR 0 5
12672: PUSH
12673: LD_INT 4
12675: EQUAL
12676: IFFALSE 12686
// btype := b_barracks ;
12678: LD_ADDR_VAR 0 5
12682: PUSH
12683: LD_INT 5
12685: ST_TO_ADDR
// if btype = b_depot then
12686: LD_VAR 0 5
12690: PUSH
12691: LD_INT 0
12693: EQUAL
12694: IFFALSE 12704
// btype := b_warehouse ;
12696: LD_ADDR_VAR 0 5
12700: PUSH
12701: LD_INT 1
12703: ST_TO_ADDR
// if btype = b_workshop then
12704: LD_VAR 0 5
12708: PUSH
12709: LD_INT 2
12711: EQUAL
12712: IFFALSE 12722
// btype := b_factory ;
12714: LD_ADDR_VAR 0 5
12718: PUSH
12719: LD_INT 3
12721: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12722: LD_ADDR_VAR 0 4
12726: PUSH
12727: LD_VAR 0 5
12731: PPUSH
12732: LD_VAR 0 1
12736: PPUSH
12737: CALL_OW 248
12741: PPUSH
12742: CALL_OW 450
12746: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 275
12764: PUSH
12765: LD_VAR 0 4
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: GREATEREQUAL
12774: IFFALSE 12800
12776: PUSH
12777: LD_VAR 0 3
12781: PPUSH
12782: LD_INT 2
12784: PPUSH
12785: CALL_OW 275
12789: PUSH
12790: LD_VAR 0 4
12794: PUSH
12795: LD_INT 2
12797: ARRAY
12798: GREATEREQUAL
12799: AND
12800: IFFALSE 12826
12802: PUSH
12803: LD_VAR 0 3
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: CALL_OW 275
12815: PUSH
12816: LD_VAR 0 4
12820: PUSH
12821: LD_INT 3
12823: ARRAY
12824: GREATEREQUAL
12825: AND
12826: ST_TO_ADDR
// end ;
12827: LD_VAR 0 2
12831: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12832: LD_INT 0
12834: PPUSH
12835: PPUSH
12836: PPUSH
// pom := GetBase ( building ) ;
12837: LD_ADDR_VAR 0 4
12841: PUSH
12842: LD_VAR 0 1
12846: PPUSH
12847: CALL_OW 274
12851: ST_TO_ADDR
// if not pom then
12852: LD_VAR 0 4
12856: NOT
12857: IFFALSE 12861
// exit ;
12859: GO 12966
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12861: LD_ADDR_VAR 0 5
12865: PUSH
12866: LD_VAR 0 2
12870: PPUSH
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 248
12880: PPUSH
12881: CALL_OW 450
12885: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12886: LD_ADDR_VAR 0 3
12890: PUSH
12891: LD_VAR 0 4
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 275
12903: PUSH
12904: LD_VAR 0 5
12908: PUSH
12909: LD_INT 1
12911: ARRAY
12912: GREATEREQUAL
12913: IFFALSE 12939
12915: PUSH
12916: LD_VAR 0 4
12920: PPUSH
12921: LD_INT 2
12923: PPUSH
12924: CALL_OW 275
12928: PUSH
12929: LD_VAR 0 5
12933: PUSH
12934: LD_INT 2
12936: ARRAY
12937: GREATEREQUAL
12938: AND
12939: IFFALSE 12965
12941: PUSH
12942: LD_VAR 0 4
12946: PPUSH
12947: LD_INT 3
12949: PPUSH
12950: CALL_OW 275
12954: PUSH
12955: LD_VAR 0 5
12959: PUSH
12960: LD_INT 3
12962: ARRAY
12963: GREATEREQUAL
12964: AND
12965: ST_TO_ADDR
// end ;
12966: LD_VAR 0 3
12970: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12971: LD_INT 0
12973: PPUSH
12974: PPUSH
12975: PPUSH
12976: PPUSH
12977: PPUSH
12978: PPUSH
12979: PPUSH
12980: PPUSH
12981: PPUSH
12982: PPUSH
12983: PPUSH
// result := false ;
12984: LD_ADDR_VAR 0 8
12988: PUSH
12989: LD_INT 0
12991: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12992: LD_VAR 0 5
12996: NOT
12997: IFTRUE 13006
12999: PUSH
13000: LD_VAR 0 1
13004: NOT
13005: OR
13006: IFTRUE 13015
13008: PUSH
13009: LD_VAR 0 2
13013: NOT
13014: OR
13015: IFTRUE 13024
13017: PUSH
13018: LD_VAR 0 3
13022: NOT
13023: OR
13024: IFFALSE 13028
// exit ;
13026: GO 13854
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13028: LD_ADDR_VAR 0 14
13032: PUSH
13033: LD_VAR 0 1
13037: PPUSH
13038: LD_VAR 0 2
13042: PPUSH
13043: LD_VAR 0 3
13047: PPUSH
13048: LD_VAR 0 4
13052: PPUSH
13053: LD_VAR 0 5
13057: PUSH
13058: LD_INT 1
13060: ARRAY
13061: PPUSH
13062: CALL_OW 248
13066: PPUSH
13067: LD_INT 0
13069: PPUSH
13070: CALL 15135 0 6
13074: ST_TO_ADDR
// if not hexes then
13075: LD_VAR 0 14
13079: NOT
13080: IFFALSE 13084
// exit ;
13082: GO 13854
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13084: LD_ADDR_VAR 0 17
13088: PUSH
13089: LD_VAR 0 5
13093: PPUSH
13094: LD_INT 22
13096: PUSH
13097: LD_VAR 0 13
13101: PPUSH
13102: CALL_OW 255
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: LD_INT 30
13116: PUSH
13117: LD_INT 0
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 30
13126: PUSH
13127: LD_INT 1
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PPUSH
13143: CALL_OW 72
13147: ST_TO_ADDR
// for i = 1 to hexes do
13148: LD_ADDR_VAR 0 9
13152: PUSH
13153: DOUBLE
13154: LD_INT 1
13156: DEC
13157: ST_TO_ADDR
13158: LD_VAR 0 14
13162: PUSH
13163: FOR_TO
13164: IFFALSE 13852
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13166: LD_ADDR_VAR 0 13
13170: PUSH
13171: LD_VAR 0 14
13175: PUSH
13176: LD_VAR 0 9
13180: ARRAY
13181: PUSH
13182: LD_INT 1
13184: ARRAY
13185: PPUSH
13186: LD_VAR 0 14
13190: PUSH
13191: LD_VAR 0 9
13195: ARRAY
13196: PUSH
13197: LD_INT 2
13199: ARRAY
13200: PPUSH
13201: CALL_OW 428
13205: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13206: LD_VAR 0 14
13210: PUSH
13211: LD_VAR 0 9
13215: ARRAY
13216: PUSH
13217: LD_INT 1
13219: ARRAY
13220: PPUSH
13221: LD_VAR 0 14
13225: PUSH
13226: LD_VAR 0 9
13230: ARRAY
13231: PUSH
13232: LD_INT 2
13234: ARRAY
13235: PPUSH
13236: CALL_OW 351
13240: IFTRUE 13279
13242: PUSH
13243: LD_VAR 0 14
13247: PUSH
13248: LD_VAR 0 9
13252: ARRAY
13253: PUSH
13254: LD_INT 1
13256: ARRAY
13257: PPUSH
13258: LD_VAR 0 14
13262: PUSH
13263: LD_VAR 0 9
13267: ARRAY
13268: PUSH
13269: LD_INT 2
13271: ARRAY
13272: PPUSH
13273: CALL_OW 488
13277: NOT
13278: OR
13279: IFTRUE 13296
13281: PUSH
13282: LD_VAR 0 13
13286: PPUSH
13287: CALL_OW 247
13291: PUSH
13292: LD_INT 3
13294: EQUAL
13295: OR
13296: IFFALSE 13302
// exit ;
13298: POP
13299: POP
13300: GO 13854
// if not tmp then
13302: LD_VAR 0 13
13306: NOT
13307: IFFALSE 13311
// continue ;
13309: GO 13163
// result := true ;
13311: LD_ADDR_VAR 0 8
13315: PUSH
13316: LD_INT 1
13318: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13319: LD_VAR 0 6
13323: IFFALSE 13340
13325: PUSH
13326: LD_VAR 0 13
13330: PPUSH
13331: CALL_OW 247
13335: PUSH
13336: LD_INT 2
13338: EQUAL
13339: AND
13340: IFFALSE 13357
13342: PUSH
13343: LD_VAR 0 13
13347: PPUSH
13348: CALL_OW 263
13352: PUSH
13353: LD_INT 1
13355: EQUAL
13356: AND
13357: IFFALSE 13521
// begin if IsDrivenBy ( tmp ) then
13359: LD_VAR 0 13
13363: PPUSH
13364: CALL_OW 311
13368: IFFALSE 13372
// continue ;
13370: GO 13163
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13372: LD_VAR 0 6
13376: PPUSH
13377: LD_INT 3
13379: PUSH
13380: LD_INT 60
13382: PUSH
13383: EMPTY
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 3
13392: PUSH
13393: LD_INT 55
13395: PUSH
13396: EMPTY
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PPUSH
13407: CALL_OW 72
13411: IFFALSE 13519
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13413: LD_ADDR_VAR 0 18
13417: PUSH
13418: LD_VAR 0 6
13422: PPUSH
13423: LD_INT 3
13425: PUSH
13426: LD_INT 60
13428: PUSH
13429: EMPTY
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: LD_INT 55
13441: PUSH
13442: EMPTY
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 72
13457: PUSH
13458: LD_INT 1
13460: ARRAY
13461: ST_TO_ADDR
// if IsInUnit ( driver ) then
13462: LD_VAR 0 18
13466: PPUSH
13467: CALL_OW 310
13471: IFFALSE 13482
// ComExit ( driver ) ;
13473: LD_VAR 0 18
13477: PPUSH
13478: CALL 39135 0 1
// AddComEnterUnit ( driver , tmp ) ;
13482: LD_VAR 0 18
13486: PPUSH
13487: LD_VAR 0 13
13491: PPUSH
13492: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13496: LD_VAR 0 18
13500: PPUSH
13501: LD_VAR 0 7
13505: PPUSH
13506: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13510: LD_VAR 0 18
13514: PPUSH
13515: CALL_OW 181
// end ; continue ;
13519: GO 13163
// end ; if not cleaners or not tmp in cleaners then
13521: LD_VAR 0 6
13525: NOT
13526: IFTRUE 13541
13528: PUSH
13529: LD_VAR 0 13
13533: PUSH
13534: LD_VAR 0 6
13538: IN
13539: NOT
13540: OR
13541: IFFALSE 13850
// begin if dep then
13543: LD_VAR 0 17
13547: IFFALSE 13683
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13549: LD_ADDR_VAR 0 16
13553: PUSH
13554: LD_VAR 0 17
13558: PUSH
13559: LD_INT 1
13561: ARRAY
13562: PPUSH
13563: CALL_OW 250
13567: PPUSH
13568: LD_VAR 0 17
13572: PUSH
13573: LD_INT 1
13575: ARRAY
13576: PPUSH
13577: CALL_OW 254
13581: PPUSH
13582: LD_INT 5
13584: PPUSH
13585: CALL_OW 272
13589: PUSH
13590: LD_VAR 0 17
13594: PUSH
13595: LD_INT 1
13597: ARRAY
13598: PPUSH
13599: CALL_OW 251
13603: PPUSH
13604: LD_VAR 0 17
13608: PUSH
13609: LD_INT 1
13611: ARRAY
13612: PPUSH
13613: CALL_OW 254
13617: PPUSH
13618: LD_INT 5
13620: PPUSH
13621: CALL_OW 273
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13630: LD_VAR 0 16
13634: PUSH
13635: LD_INT 1
13637: ARRAY
13638: PPUSH
13639: LD_VAR 0 16
13643: PUSH
13644: LD_INT 2
13646: ARRAY
13647: PPUSH
13648: CALL_OW 488
13652: IFFALSE 13683
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13654: LD_VAR 0 13
13658: PPUSH
13659: LD_VAR 0 16
13663: PUSH
13664: LD_INT 1
13666: ARRAY
13667: PPUSH
13668: LD_VAR 0 16
13672: PUSH
13673: LD_INT 2
13675: ARRAY
13676: PPUSH
13677: CALL_OW 111
// continue ;
13681: GO 13163
// end ; end ; r := GetDir ( tmp ) ;
13683: LD_ADDR_VAR 0 15
13687: PUSH
13688: LD_VAR 0 13
13692: PPUSH
13693: CALL_OW 254
13697: ST_TO_ADDR
// if r = 5 then
13698: LD_VAR 0 15
13702: PUSH
13703: LD_INT 5
13705: EQUAL
13706: IFFALSE 13716
// r := 0 ;
13708: LD_ADDR_VAR 0 15
13712: PUSH
13713: LD_INT 0
13715: ST_TO_ADDR
// for j = r to 5 do
13716: LD_ADDR_VAR 0 10
13720: PUSH
13721: DOUBLE
13722: LD_VAR 0 15
13726: DEC
13727: ST_TO_ADDR
13728: LD_INT 5
13730: PUSH
13731: FOR_TO
13732: IFFALSE 13848
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13734: LD_ADDR_VAR 0 11
13738: PUSH
13739: LD_VAR 0 13
13743: PPUSH
13744: CALL_OW 250
13748: PPUSH
13749: LD_VAR 0 10
13753: PPUSH
13754: LD_INT 2
13756: PPUSH
13757: CALL_OW 272
13761: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13762: LD_ADDR_VAR 0 12
13766: PUSH
13767: LD_VAR 0 13
13771: PPUSH
13772: CALL_OW 251
13776: PPUSH
13777: LD_VAR 0 10
13781: PPUSH
13782: LD_INT 2
13784: PPUSH
13785: CALL_OW 273
13789: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13790: LD_VAR 0 11
13794: PPUSH
13795: LD_VAR 0 12
13799: PPUSH
13800: CALL_OW 488
13804: IFFALSE 13823
13806: PUSH
13807: LD_VAR 0 11
13811: PPUSH
13812: LD_VAR 0 12
13816: PPUSH
13817: CALL_OW 428
13821: NOT
13822: AND
13823: IFFALSE 13846
// begin ComMoveXY ( tmp , _x , _y ) ;
13825: LD_VAR 0 13
13829: PPUSH
13830: LD_VAR 0 11
13834: PPUSH
13835: LD_VAR 0 12
13839: PPUSH
13840: CALL_OW 111
// break ;
13844: GO 13848
// end ; end ;
13846: GO 13731
13848: POP
13849: POP
// end ; end ;
13850: GO 13163
13852: POP
13853: POP
// end ;
13854: LD_VAR 0 8
13858: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13859: LD_INT 0
13861: PPUSH
// result := true ;
13862: LD_ADDR_VAR 0 3
13866: PUSH
13867: LD_INT 1
13869: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13870: LD_VAR 0 2
13874: PUSH
13875: LD_INT 24
13877: DOUBLE
13878: EQUAL
13879: IFTRUE 13889
13881: LD_INT 33
13883: DOUBLE
13884: EQUAL
13885: IFTRUE 13889
13887: GO 13914
13889: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13890: LD_ADDR_VAR 0 3
13894: PUSH
13895: LD_INT 32
13897: PPUSH
13898: LD_VAR 0 1
13902: PPUSH
13903: CALL_OW 321
13907: PUSH
13908: LD_INT 2
13910: EQUAL
13911: ST_TO_ADDR
13912: GO 14230
13914: LD_INT 20
13916: DOUBLE
13917: EQUAL
13918: IFTRUE 13922
13920: GO 13947
13922: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13923: LD_ADDR_VAR 0 3
13927: PUSH
13928: LD_INT 6
13930: PPUSH
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 321
13940: PUSH
13941: LD_INT 2
13943: EQUAL
13944: ST_TO_ADDR
13945: GO 14230
13947: LD_INT 22
13949: DOUBLE
13950: EQUAL
13951: IFTRUE 13961
13953: LD_INT 36
13955: DOUBLE
13956: EQUAL
13957: IFTRUE 13961
13959: GO 13986
13961: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13962: LD_ADDR_VAR 0 3
13966: PUSH
13967: LD_INT 15
13969: PPUSH
13970: LD_VAR 0 1
13974: PPUSH
13975: CALL_OW 321
13979: PUSH
13980: LD_INT 2
13982: EQUAL
13983: ST_TO_ADDR
13984: GO 14230
13986: LD_INT 30
13988: DOUBLE
13989: EQUAL
13990: IFTRUE 13994
13992: GO 14019
13994: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: LD_INT 20
14002: PPUSH
14003: LD_VAR 0 1
14007: PPUSH
14008: CALL_OW 321
14012: PUSH
14013: LD_INT 2
14015: EQUAL
14016: ST_TO_ADDR
14017: GO 14230
14019: LD_INT 28
14021: DOUBLE
14022: EQUAL
14023: IFTRUE 14033
14025: LD_INT 21
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14058
14033: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_INT 21
14041: PPUSH
14042: LD_VAR 0 1
14046: PPUSH
14047: CALL_OW 321
14051: PUSH
14052: LD_INT 2
14054: EQUAL
14055: ST_TO_ADDR
14056: GO 14230
14058: LD_INT 16
14060: DOUBLE
14061: EQUAL
14062: IFTRUE 14066
14064: GO 14091
14066: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14067: LD_ADDR_VAR 0 3
14071: PUSH
14072: LD_INT 84
14074: PPUSH
14075: LD_VAR 0 1
14079: PPUSH
14080: CALL_OW 321
14084: PUSH
14085: LD_INT 2
14087: EQUAL
14088: ST_TO_ADDR
14089: GO 14230
14091: LD_INT 19
14093: DOUBLE
14094: EQUAL
14095: IFTRUE 14105
14097: LD_INT 23
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14130
14105: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14106: LD_ADDR_VAR 0 3
14110: PUSH
14111: LD_INT 83
14113: PPUSH
14114: LD_VAR 0 1
14118: PPUSH
14119: CALL_OW 321
14123: PUSH
14124: LD_INT 2
14126: EQUAL
14127: ST_TO_ADDR
14128: GO 14230
14130: LD_INT 17
14132: DOUBLE
14133: EQUAL
14134: IFTRUE 14138
14136: GO 14163
14138: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14139: LD_ADDR_VAR 0 3
14143: PUSH
14144: LD_INT 39
14146: PPUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 321
14156: PUSH
14157: LD_INT 2
14159: EQUAL
14160: ST_TO_ADDR
14161: GO 14230
14163: LD_INT 18
14165: DOUBLE
14166: EQUAL
14167: IFTRUE 14171
14169: GO 14196
14171: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14172: LD_ADDR_VAR 0 3
14176: PUSH
14177: LD_INT 40
14179: PPUSH
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 321
14189: PUSH
14190: LD_INT 2
14192: EQUAL
14193: ST_TO_ADDR
14194: GO 14230
14196: LD_INT 27
14198: DOUBLE
14199: EQUAL
14200: IFTRUE 14204
14202: GO 14229
14204: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14205: LD_ADDR_VAR 0 3
14209: PUSH
14210: LD_INT 35
14212: PPUSH
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 321
14222: PUSH
14223: LD_INT 2
14225: EQUAL
14226: ST_TO_ADDR
14227: GO 14230
14229: POP
// end ;
14230: LD_VAR 0 3
14234: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14235: LD_INT 0
14237: PPUSH
14238: PPUSH
14239: PPUSH
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
14246: PPUSH
14247: PPUSH
// result := false ;
14248: LD_ADDR_VAR 0 6
14252: PUSH
14253: LD_INT 0
14255: ST_TO_ADDR
// if btype = b_depot then
14256: LD_VAR 0 2
14260: PUSH
14261: LD_INT 0
14263: EQUAL
14264: IFFALSE 14276
// begin result := true ;
14266: LD_ADDR_VAR 0 6
14270: PUSH
14271: LD_INT 1
14273: ST_TO_ADDR
// exit ;
14274: GO 15130
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14276: LD_VAR 0 1
14280: NOT
14281: IFTRUE 14306
14283: PUSH
14284: LD_VAR 0 1
14288: PPUSH
14289: CALL_OW 266
14293: PUSH
14294: LD_INT 0
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: IN
14304: NOT
14305: OR
14306: IFTRUE 14315
14308: PUSH
14309: LD_VAR 0 2
14313: NOT
14314: OR
14315: IFTRUE 14351
14317: PUSH
14318: LD_VAR 0 5
14322: PUSH
14323: LD_INT 0
14325: PUSH
14326: LD_INT 1
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 3
14334: PUSH
14335: LD_INT 4
14337: PUSH
14338: LD_INT 5
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: IN
14349: NOT
14350: OR
14351: IFTRUE 14370
14353: PUSH
14354: LD_VAR 0 3
14358: PPUSH
14359: LD_VAR 0 4
14363: PPUSH
14364: CALL_OW 488
14368: NOT
14369: OR
14370: IFFALSE 14374
// exit ;
14372: GO 15130
// side := GetSide ( depot ) ;
14374: LD_ADDR_VAR 0 9
14378: PUSH
14379: LD_VAR 0 1
14383: PPUSH
14384: CALL_OW 255
14388: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14389: LD_VAR 0 9
14393: PPUSH
14394: LD_VAR 0 2
14398: PPUSH
14399: CALL 13859 0 2
14403: NOT
14404: IFFALSE 14408
// exit ;
14406: GO 15130
// pom := GetBase ( depot ) ;
14408: LD_ADDR_VAR 0 10
14412: PUSH
14413: LD_VAR 0 1
14417: PPUSH
14418: CALL_OW 274
14422: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14423: LD_ADDR_VAR 0 11
14427: PUSH
14428: LD_VAR 0 2
14432: PPUSH
14433: LD_VAR 0 1
14437: PPUSH
14438: CALL_OW 248
14442: PPUSH
14443: CALL_OW 450
14447: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14448: LD_VAR 0 10
14452: PPUSH
14453: LD_INT 1
14455: PPUSH
14456: CALL_OW 275
14460: PUSH
14461: LD_VAR 0 11
14465: PUSH
14466: LD_INT 1
14468: ARRAY
14469: GREATEREQUAL
14470: IFFALSE 14496
14472: PUSH
14473: LD_VAR 0 10
14477: PPUSH
14478: LD_INT 2
14480: PPUSH
14481: CALL_OW 275
14485: PUSH
14486: LD_VAR 0 11
14490: PUSH
14491: LD_INT 2
14493: ARRAY
14494: GREATEREQUAL
14495: AND
14496: IFFALSE 14522
14498: PUSH
14499: LD_VAR 0 10
14503: PPUSH
14504: LD_INT 3
14506: PPUSH
14507: CALL_OW 275
14511: PUSH
14512: LD_VAR 0 11
14516: PUSH
14517: LD_INT 3
14519: ARRAY
14520: GREATEREQUAL
14521: AND
14522: NOT
14523: IFFALSE 14527
// exit ;
14525: GO 15130
// if GetBType ( depot ) = b_depot then
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 266
14536: PUSH
14537: LD_INT 0
14539: EQUAL
14540: IFFALSE 14552
// dist := 28 else
14542: LD_ADDR_VAR 0 14
14546: PUSH
14547: LD_INT 28
14549: ST_TO_ADDR
14550: GO 14560
// dist := 36 ;
14552: LD_ADDR_VAR 0 14
14556: PUSH
14557: LD_INT 36
14559: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14560: LD_VAR 0 1
14564: PPUSH
14565: LD_VAR 0 3
14569: PPUSH
14570: LD_VAR 0 4
14574: PPUSH
14575: CALL_OW 297
14579: PUSH
14580: LD_VAR 0 14
14584: GREATER
14585: IFFALSE 14589
// exit ;
14587: GO 15130
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14589: LD_ADDR_VAR 0 12
14593: PUSH
14594: LD_VAR 0 2
14598: PPUSH
14599: LD_VAR 0 3
14603: PPUSH
14604: LD_VAR 0 4
14608: PPUSH
14609: LD_VAR 0 5
14613: PPUSH
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 248
14623: PPUSH
14624: LD_INT 0
14626: PPUSH
14627: CALL 15135 0 6
14631: ST_TO_ADDR
// if not hexes then
14632: LD_VAR 0 12
14636: NOT
14637: IFFALSE 14641
// exit ;
14639: GO 15130
// hex := GetHexInfo ( x , y ) ;
14641: LD_ADDR_VAR 0 15
14645: PUSH
14646: LD_VAR 0 3
14650: PPUSH
14651: LD_VAR 0 4
14655: PPUSH
14656: CALL_OW 546
14660: ST_TO_ADDR
// if hex [ 1 ] then
14661: LD_VAR 0 15
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: IFFALSE 14673
// exit ;
14671: GO 15130
// height := hex [ 2 ] ;
14673: LD_ADDR_VAR 0 13
14677: PUSH
14678: LD_VAR 0 15
14682: PUSH
14683: LD_INT 2
14685: ARRAY
14686: ST_TO_ADDR
// for i = 1 to hexes do
14687: LD_ADDR_VAR 0 7
14691: PUSH
14692: DOUBLE
14693: LD_INT 1
14695: DEC
14696: ST_TO_ADDR
14697: LD_VAR 0 12
14701: PUSH
14702: FOR_TO
14703: IFFALSE 15047
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14705: LD_VAR 0 12
14709: PUSH
14710: LD_VAR 0 7
14714: ARRAY
14715: PUSH
14716: LD_INT 1
14718: ARRAY
14719: PPUSH
14720: LD_VAR 0 12
14724: PUSH
14725: LD_VAR 0 7
14729: ARRAY
14730: PUSH
14731: LD_INT 2
14733: ARRAY
14734: PPUSH
14735: CALL_OW 488
14739: NOT
14740: IFTRUE 14782
14742: PUSH
14743: LD_VAR 0 12
14747: PUSH
14748: LD_VAR 0 7
14752: ARRAY
14753: PUSH
14754: LD_INT 1
14756: ARRAY
14757: PPUSH
14758: LD_VAR 0 12
14762: PUSH
14763: LD_VAR 0 7
14767: ARRAY
14768: PUSH
14769: LD_INT 2
14771: ARRAY
14772: PPUSH
14773: CALL_OW 428
14777: PUSH
14778: LD_INT 0
14780: GREATER
14781: OR
14782: IFTRUE 14820
14784: PUSH
14785: LD_VAR 0 12
14789: PUSH
14790: LD_VAR 0 7
14794: ARRAY
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PPUSH
14800: LD_VAR 0 12
14804: PUSH
14805: LD_VAR 0 7
14809: ARRAY
14810: PUSH
14811: LD_INT 2
14813: ARRAY
14814: PPUSH
14815: CALL_OW 351
14819: OR
14820: IFFALSE 14826
// exit ;
14822: POP
14823: POP
14824: GO 15130
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14826: LD_ADDR_VAR 0 8
14830: PUSH
14831: LD_VAR 0 12
14835: PUSH
14836: LD_VAR 0 7
14840: ARRAY
14841: PUSH
14842: LD_INT 1
14844: ARRAY
14845: PPUSH
14846: LD_VAR 0 12
14850: PUSH
14851: LD_VAR 0 7
14855: ARRAY
14856: PUSH
14857: LD_INT 2
14859: ARRAY
14860: PPUSH
14861: CALL_OW 546
14865: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14866: LD_VAR 0 8
14870: PUSH
14871: LD_INT 1
14873: ARRAY
14874: IFTRUE 14896
14876: PUSH
14877: LD_VAR 0 8
14881: PUSH
14882: LD_INT 2
14884: ARRAY
14885: PUSH
14886: LD_VAR 0 13
14890: PUSH
14891: LD_INT 2
14893: PLUS
14894: GREATER
14895: OR
14896: IFTRUE 14918
14898: PUSH
14899: LD_VAR 0 8
14903: PUSH
14904: LD_INT 2
14906: ARRAY
14907: PUSH
14908: LD_VAR 0 13
14912: PUSH
14913: LD_INT 2
14915: MINUS
14916: LESS
14917: OR
14918: IFTRUE 14986
14920: PUSH
14921: LD_VAR 0 8
14925: PUSH
14926: LD_INT 3
14928: ARRAY
14929: PUSH
14930: LD_INT 0
14932: PUSH
14933: LD_INT 8
14935: PUSH
14936: LD_INT 9
14938: PUSH
14939: LD_INT 10
14941: PUSH
14942: LD_INT 11
14944: PUSH
14945: LD_INT 12
14947: PUSH
14948: LD_INT 13
14950: PUSH
14951: LD_INT 16
14953: PUSH
14954: LD_INT 17
14956: PUSH
14957: LD_INT 18
14959: PUSH
14960: LD_INT 19
14962: PUSH
14963: LD_INT 20
14965: PUSH
14966: LD_INT 21
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: IN
14984: NOT
14985: OR
14986: IFTRUE 14999
14988: PUSH
14989: LD_VAR 0 8
14993: PUSH
14994: LD_INT 5
14996: ARRAY
14997: NOT
14998: OR
14999: IFTRUE 15039
15001: PUSH
15002: LD_VAR 0 8
15006: PUSH
15007: LD_INT 6
15009: ARRAY
15010: PUSH
15011: LD_INT 1
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: LD_INT 7
15019: PUSH
15020: LD_INT 9
15022: PUSH
15023: LD_INT 10
15025: PUSH
15026: LD_INT 11
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: IN
15037: NOT
15038: OR
15039: IFFALSE 15045
// exit ;
15041: POP
15042: POP
15043: GO 15130
// end ;
15045: GO 14702
15047: POP
15048: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15049: LD_VAR 0 9
15053: PPUSH
15054: LD_VAR 0 3
15058: PPUSH
15059: LD_VAR 0 4
15063: PPUSH
15064: LD_INT 20
15066: PPUSH
15067: CALL 6949 0 4
15071: PUSH
15072: LD_INT 4
15074: ARRAY
15075: IFFALSE 15079
// exit ;
15077: GO 15130
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15079: LD_VAR 0 2
15083: PUSH
15084: LD_INT 29
15086: PUSH
15087: LD_INT 30
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: IN
15094: IFFALSE 15118
15096: PUSH
15097: LD_VAR 0 3
15101: PPUSH
15102: LD_VAR 0 4
15106: PPUSH
15107: LD_VAR 0 9
15111: PPUSH
15112: CALL_OW 440
15116: NOT
15117: AND
15118: IFFALSE 15122
// exit ;
15120: GO 15130
// result := true ;
15122: LD_ADDR_VAR 0 6
15126: PUSH
15127: LD_INT 1
15129: ST_TO_ADDR
// end ;
15130: LD_VAR 0 6
15134: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15135: LD_INT 0
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
15153: PPUSH
15154: PPUSH
15155: PPUSH
15156: PPUSH
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
15169: PPUSH
15170: PPUSH
15171: PPUSH
15172: PPUSH
15173: PPUSH
15174: PPUSH
15175: PPUSH
15176: PPUSH
15177: PPUSH
15178: PPUSH
15179: PPUSH
15180: PPUSH
15181: PPUSH
15182: PPUSH
15183: PPUSH
15184: PPUSH
15185: PPUSH
15186: PPUSH
15187: PPUSH
15188: PPUSH
15189: PPUSH
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
15194: PPUSH
// result = [ ] ;
15195: LD_ADDR_VAR 0 7
15199: PUSH
15200: EMPTY
15201: ST_TO_ADDR
// temp_list = [ ] ;
15202: LD_ADDR_VAR 0 9
15206: PUSH
15207: EMPTY
15208: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15209: LD_VAR 0 4
15213: PUSH
15214: LD_INT 0
15216: PUSH
15217: LD_INT 1
15219: PUSH
15220: LD_INT 2
15222: PUSH
15223: LD_INT 3
15225: PUSH
15226: LD_INT 4
15228: PUSH
15229: LD_INT 5
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: IN
15240: NOT
15241: IFTRUE 15284
15243: PUSH
15244: LD_VAR 0 1
15248: PUSH
15249: LD_INT 0
15251: PUSH
15252: LD_INT 1
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: IN
15259: IFFALSE 15283
15261: PUSH
15262: LD_VAR 0 5
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: LD_INT 2
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: IN
15281: NOT
15282: AND
15283: OR
15284: IFFALSE 15288
// exit ;
15286: GO 33687
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15288: LD_VAR 0 1
15292: PUSH
15293: LD_INT 6
15295: PUSH
15296: LD_INT 7
15298: PUSH
15299: LD_INT 8
15301: PUSH
15302: LD_INT 13
15304: PUSH
15305: LD_INT 12
15307: PUSH
15308: LD_INT 15
15310: PUSH
15311: LD_INT 11
15313: PUSH
15314: LD_INT 14
15316: PUSH
15317: LD_INT 10
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: IN
15331: IFFALSE 15341
// btype = b_lab ;
15333: LD_ADDR_VAR 0 1
15337: PUSH
15338: LD_INT 6
15340: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15341: LD_VAR 0 6
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: LD_INT 1
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: IN
15360: NOT
15361: IFTRUE 15429
15363: PUSH
15364: LD_VAR 0 1
15368: PUSH
15369: LD_INT 0
15371: PUSH
15372: LD_INT 1
15374: PUSH
15375: LD_INT 2
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: LD_INT 6
15383: PUSH
15384: LD_INT 36
15386: PUSH
15387: LD_INT 4
15389: PUSH
15390: LD_INT 5
15392: PUSH
15393: LD_INT 31
15395: PUSH
15396: LD_INT 32
15398: PUSH
15399: LD_INT 33
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: IN
15415: NOT
15416: IFFALSE 15428
15418: PUSH
15419: LD_VAR 0 6
15423: PUSH
15424: LD_INT 1
15426: EQUAL
15427: AND
15428: OR
15429: IFTRUE 15461
15431: PUSH
15432: LD_VAR 0 1
15436: PUSH
15437: LD_INT 2
15439: PUSH
15440: LD_INT 3
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: IN
15447: NOT
15448: IFFALSE 15460
15450: PUSH
15451: LD_VAR 0 6
15455: PUSH
15456: LD_INT 2
15458: EQUAL
15459: AND
15460: OR
15461: IFFALSE 15471
// mode = 0 ;
15463: LD_ADDR_VAR 0 6
15467: PUSH
15468: LD_INT 0
15470: ST_TO_ADDR
// case mode of 0 :
15471: LD_VAR 0 6
15475: PUSH
15476: LD_INT 0
15478: DOUBLE
15479: EQUAL
15480: IFTRUE 15484
15482: GO 26937
15484: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15485: LD_ADDR_VAR 0 11
15489: PUSH
15490: LD_INT 0
15492: PUSH
15493: LD_INT 0
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 0
15502: PUSH
15503: LD_INT 1
15505: NEG
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: LD_INT 0
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 0
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 1
15543: NEG
15544: PUSH
15545: LD_INT 0
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 1
15554: NEG
15555: PUSH
15556: LD_INT 1
15558: NEG
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PUSH
15568: LD_INT 2
15570: NEG
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 2
15581: NEG
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: LD_INT 1
15592: NEG
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 1
15600: PUSH
15601: LD_INT 2
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 0
15610: PUSH
15611: LD_INT 2
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 1
15620: NEG
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 1
15631: PUSH
15632: LD_INT 3
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: NEG
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15678: LD_ADDR_VAR 0 12
15682: PUSH
15683: LD_INT 0
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 0
15695: PUSH
15696: LD_INT 1
15698: NEG
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: LD_INT 0
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 0
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 1
15736: NEG
15737: PUSH
15738: LD_INT 0
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 1
15747: NEG
15748: PUSH
15749: LD_INT 1
15751: NEG
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 1
15759: PUSH
15760: LD_INT 1
15762: NEG
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: LD_INT 0
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 2
15780: PUSH
15781: LD_INT 1
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 1
15790: NEG
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 2
15801: NEG
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 2
15812: NEG
15813: PUSH
15814: LD_INT 1
15816: NEG
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 2
15824: NEG
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 3
15835: NEG
15836: PUSH
15837: LD_INT 0
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 3
15846: NEG
15847: PUSH
15848: LD_INT 1
15850: NEG
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15874: LD_ADDR_VAR 0 13
15878: PUSH
15879: LD_INT 0
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 0
15891: PUSH
15892: LD_INT 1
15894: NEG
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 1
15902: PUSH
15903: LD_INT 0
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: LD_INT 1
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 0
15922: PUSH
15923: LD_INT 1
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 1
15932: NEG
15933: PUSH
15934: LD_INT 0
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 1
15943: NEG
15944: PUSH
15945: LD_INT 1
15947: NEG
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 1
15955: NEG
15956: PUSH
15957: LD_INT 2
15959: NEG
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 2
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 2
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 2
15997: NEG
15998: PUSH
15999: LD_INT 1
16001: NEG
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 2
16009: NEG
16010: PUSH
16011: LD_INT 2
16013: NEG
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 2
16021: NEG
16022: PUSH
16023: LD_INT 3
16025: NEG
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 3
16033: NEG
16034: PUSH
16035: LD_INT 2
16037: NEG
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 3
16045: NEG
16046: PUSH
16047: LD_INT 3
16049: NEG
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16073: LD_ADDR_VAR 0 14
16077: PUSH
16078: LD_INT 0
16080: PUSH
16081: LD_INT 0
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 0
16090: PUSH
16091: LD_INT 1
16093: NEG
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: LD_INT 0
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 1
16111: PUSH
16112: LD_INT 1
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 0
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 1
16131: NEG
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 1
16142: NEG
16143: PUSH
16144: LD_INT 1
16146: NEG
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 1
16154: NEG
16155: PUSH
16156: LD_INT 2
16158: NEG
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: LD_INT 2
16169: NEG
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: LD_INT 1
16180: NEG
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 1
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 0
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 1
16208: NEG
16209: PUSH
16210: LD_INT 1
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 1
16219: NEG
16220: PUSH
16221: LD_INT 3
16223: NEG
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 0
16231: PUSH
16232: LD_INT 3
16234: NEG
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: LD_INT 2
16245: NEG
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16269: LD_ADDR_VAR 0 15
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: LD_INT 0
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 0
16286: PUSH
16287: LD_INT 1
16289: NEG
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 1
16297: PUSH
16298: LD_INT 0
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 0
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 1
16327: NEG
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 1
16338: NEG
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: LD_INT 1
16353: NEG
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 2
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 1
16381: NEG
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 2
16392: NEG
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 2
16403: NEG
16404: PUSH
16405: LD_INT 1
16407: NEG
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 2
16415: PUSH
16416: LD_INT 1
16418: NEG
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 3
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 3
16436: PUSH
16437: LD_INT 1
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16462: LD_ADDR_VAR 0 16
16466: PUSH
16467: LD_INT 0
16469: PUSH
16470: LD_INT 0
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 0
16479: PUSH
16480: LD_INT 1
16482: NEG
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: LD_INT 0
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 1
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 0
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: NEG
16521: PUSH
16522: LD_INT 0
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 1
16531: NEG
16532: PUSH
16533: LD_INT 1
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: NEG
16544: PUSH
16545: LD_INT 2
16547: NEG
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 2
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 2
16565: PUSH
16566: LD_INT 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 1
16575: PUSH
16576: LD_INT 2
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 2
16585: NEG
16586: PUSH
16587: LD_INT 1
16589: NEG
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 2
16597: NEG
16598: PUSH
16599: LD_INT 2
16601: NEG
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 3
16609: PUSH
16610: LD_INT 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: LD_INT 3
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16655: LD_ADDR_VAR 0 17
16659: PUSH
16660: LD_INT 0
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 0
16672: PUSH
16673: LD_INT 1
16675: NEG
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 1
16683: PUSH
16684: LD_INT 0
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 1
16693: PUSH
16694: LD_INT 1
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 0
16703: PUSH
16704: LD_INT 1
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 1
16713: NEG
16714: PUSH
16715: LD_INT 0
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 1
16724: NEG
16725: PUSH
16726: LD_INT 1
16728: NEG
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 1
16736: NEG
16737: PUSH
16738: LD_INT 2
16740: NEG
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 0
16748: PUSH
16749: LD_INT 2
16751: NEG
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: LD_INT 1
16762: NEG
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 2
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: LD_INT 2
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 0
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 1
16820: NEG
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 2
16831: NEG
16832: PUSH
16833: LD_INT 0
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 2
16842: NEG
16843: PUSH
16844: LD_INT 1
16846: NEG
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 2
16854: NEG
16855: PUSH
16856: LD_INT 2
16858: NEG
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16885: LD_ADDR_VAR 0 18
16889: PUSH
16890: LD_INT 0
16892: PUSH
16893: LD_INT 0
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: LD_INT 1
16905: NEG
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: LD_INT 0
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: LD_INT 1
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 1
16954: NEG
16955: PUSH
16956: LD_INT 1
16958: NEG
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 1
16966: NEG
16967: PUSH
16968: LD_INT 2
16970: NEG
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 0
16978: PUSH
16979: LD_INT 2
16981: NEG
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: LD_INT 1
16992: NEG
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 2
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: LD_INT 2
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 1
17030: PUSH
17031: LD_INT 2
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 0
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: NEG
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 2
17061: NEG
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 2
17072: NEG
17073: PUSH
17074: LD_INT 1
17076: NEG
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 2
17084: NEG
17085: PUSH
17086: LD_INT 2
17088: NEG
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17115: LD_ADDR_VAR 0 19
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: LD_INT 0
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 0
17132: PUSH
17133: LD_INT 1
17135: NEG
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: LD_INT 0
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: LD_INT 1
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 1
17184: NEG
17185: PUSH
17186: LD_INT 1
17188: NEG
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 1
17196: NEG
17197: PUSH
17198: LD_INT 2
17200: NEG
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 0
17208: PUSH
17209: LD_INT 2
17211: NEG
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PUSH
17220: LD_INT 1
17222: NEG
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 0
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 2
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: LD_INT 2
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 0
17270: PUSH
17271: LD_INT 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: NEG
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 2
17291: NEG
17292: PUSH
17293: LD_INT 0
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 2
17302: NEG
17303: PUSH
17304: LD_INT 1
17306: NEG
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: NEG
17315: PUSH
17316: LD_INT 2
17318: NEG
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17345: LD_ADDR_VAR 0 20
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: LD_INT 0
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 0
17362: PUSH
17363: LD_INT 1
17365: NEG
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 0
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 1
17403: NEG
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 1
17414: NEG
17415: PUSH
17416: LD_INT 1
17418: NEG
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: NEG
17427: PUSH
17428: LD_INT 2
17430: NEG
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: LD_INT 2
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: LD_INT 1
17452: NEG
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 2
17460: PUSH
17461: LD_INT 0
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 2
17480: PUSH
17481: LD_INT 2
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: LD_INT 2
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 0
17500: PUSH
17501: LD_INT 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 2
17521: NEG
17522: PUSH
17523: LD_INT 0
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 2
17532: NEG
17533: PUSH
17534: LD_INT 1
17536: NEG
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: NEG
17545: PUSH
17546: LD_INT 2
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17575: LD_ADDR_VAR 0 21
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: LD_INT 0
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 0
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 0
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 1
17633: NEG
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 1
17644: NEG
17645: PUSH
17646: LD_INT 1
17648: NEG
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: LD_INT 2
17660: NEG
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 0
17668: PUSH
17669: LD_INT 2
17671: NEG
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: LD_INT 1
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: LD_INT 0
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 2
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 2
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 1
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: LD_INT 2
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 1
17740: NEG
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 2
17751: NEG
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 2
17762: NEG
17763: PUSH
17764: LD_INT 1
17766: NEG
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 2
17774: NEG
17775: PUSH
17776: LD_INT 2
17778: NEG
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17805: LD_ADDR_VAR 0 22
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 0
17898: PUSH
17899: LD_INT 2
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 0
17960: PUSH
17961: LD_INT 2
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: NEG
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 2
17992: NEG
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: NEG
18005: PUSH
18006: LD_INT 2
18008: NEG
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18035: LD_ADDR_VAR 0 23
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 0
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 1
18093: NEG
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: LD_INT 1
18108: NEG
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 2
18120: NEG
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: LD_INT 2
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: LD_INT 1
18142: NEG
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: LD_INT 0
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: NEG
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 2
18211: NEG
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: LD_INT 1
18226: NEG
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: NEG
18235: PUSH
18236: LD_INT 2
18238: NEG
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 2
18246: NEG
18247: PUSH
18248: LD_INT 3
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 3
18262: NEG
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18315: LD_ADDR_VAR 0 24
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: NEG
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: LD_INT 1
18388: NEG
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 1
18396: NEG
18397: PUSH
18398: LD_INT 2
18400: NEG
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 2
18411: NEG
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 2
18450: PUSH
18451: LD_INT 2
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 2
18514: NEG
18515: PUSH
18516: LD_INT 2
18518: NEG
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 2
18529: NEG
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: LD_INT 1
18540: NEG
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 3
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 3
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18591: LD_ADDR_VAR 0 25
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 0
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 0
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 1
18649: NEG
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: LD_INT 1
18664: NEG
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 1
18672: NEG
18673: PUSH
18674: LD_INT 2
18676: NEG
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 2
18687: NEG
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: LD_INT 1
18698: NEG
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 2
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 1
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 2
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 2
18767: NEG
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: NEG
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 2
18790: NEG
18791: PUSH
18792: LD_INT 2
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 3
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: LD_INT 3
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18865: LD_ADDR_VAR 0 26
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 1
18934: NEG
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: NEG
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: LD_INT 2
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: LD_INT 1
18972: NEG
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 2
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: NEG
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: LD_INT 2
19068: NEG
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 3
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 1
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 1
19096: NEG
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: NEG
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19141: LD_ADDR_VAR 0 27
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 1
19210: NEG
19211: PUSH
19212: LD_INT 1
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: LD_INT 2
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: LD_INT 2
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 1
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: NEG
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: NEG
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 3
19374: NEG
19375: PUSH
19376: LD_INT 1
19378: NEG
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 3
19386: NEG
19387: PUSH
19388: LD_INT 2
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19421: LD_ADDR_VAR 0 28
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: LD_INT 2
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 2
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 2
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: LD_INT 2
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: NEG
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 2
19620: NEG
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: LD_INT 3
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: LD_INT 3
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 3
19656: NEG
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 3
19668: NEG
19669: PUSH
19670: LD_INT 2
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19703: LD_ADDR_VAR 0 29
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: NEG
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: LD_INT 2
19788: NEG
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: LD_INT 2
19799: NEG
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: LD_INT 1
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: LD_INT 0
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: NEG
19882: PUSH
19883: LD_INT 2
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: LD_INT 3
19897: NEG
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 3
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: LD_INT 3
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 3
19947: NEG
19948: PUSH
19949: LD_INT 2
19951: NEG
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19982: LD_ADDR_VAR 0 30
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 1
20040: NEG
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: LD_INT 1
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: PUSH
20065: LD_INT 2
20067: NEG
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: LD_INT 2
20078: NEG
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: PUSH
20087: LD_INT 1
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 2
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: NEG
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 2
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 3
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 3
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: LD_INT 3
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: NEG
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 3
20225: NEG
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20260: LD_ADDR_VAR 0 31
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: NEG
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: LD_INT 2
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: LD_INT 1
20356: NEG
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 0
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: NEG
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: NEG
20438: PUSH
20439: LD_INT 2
20441: NEG
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: LD_INT 3
20453: NEG
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: LD_INT 1
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 3
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: LD_INT 3
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: LD_INT 2
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 3
20503: NEG
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20538: LD_ADDR_VAR 0 32
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 2
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 2
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: NEG
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 2
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: LD_INT 3
20731: NEG
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 3
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: LD_INT 3
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: NEG
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 3
20781: NEG
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20816: LD_ADDR_VAR 0 33
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: NEG
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: LD_INT 1
20889: NEG
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: LD_INT 2
20901: NEG
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 1
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 0
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 0
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 1
20960: NEG
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: NEG
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: NEG
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: NEG
20995: PUSH
20996: LD_INT 2
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 3
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 3
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: LD_INT 3
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 1
21049: NEG
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 3
21060: NEG
21061: PUSH
21062: LD_INT 2
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21095: LD_ADDR_VAR 0 34
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: NEG
21177: PUSH
21178: LD_INT 2
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: LD_INT 2
21191: NEG
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: LD_INT 1
21202: NEG
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: LD_INT 2
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: NEG
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: NEG
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: NEG
21275: PUSH
21276: LD_INT 2
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: LD_INT 3
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 3
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 3
21340: NEG
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21375: LD_ADDR_VAR 0 35
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21487: LD_ADDR_VAR 0 36
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: NEG
21569: PUSH
21570: LD_INT 2
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21599: LD_ADDR_VAR 0 37
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 0
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: NEG
21669: PUSH
21670: LD_INT 1
21672: NEG
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: LD_INT 1
21683: NEG
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 1
21691: NEG
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21711: LD_ADDR_VAR 0 38
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: NEG
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21823: LD_ADDR_VAR 0 39
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: NEG
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 2
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21935: LD_ADDR_VAR 0 40
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22047: LD_ADDR_VAR 0 41
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: LD_INT 2
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: NEG
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 2
22202: NEG
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 2
22213: NEG
22214: PUSH
22215: LD_INT 1
22217: NEG
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: NEG
22226: PUSH
22227: LD_INT 2
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 2
22237: NEG
22238: PUSH
22239: LD_INT 3
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 3
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 3
22290: PUSH
22291: LD_INT 3
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 3
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 2
22310: NEG
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 3
22321: NEG
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 3
22332: NEG
22333: PUSH
22334: LD_INT 1
22336: NEG
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 3
22344: NEG
22345: PUSH
22346: LD_INT 2
22348: NEG
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 3
22356: NEG
22357: PUSH
22358: LD_INT 3
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22397: LD_ADDR_VAR 0 42
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: LD_INT 0
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 1
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 0
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: LD_INT 0
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 1
22466: NEG
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: LD_INT 2
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: LD_INT 2
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 2
22563: NEG
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 2
22575: NEG
22576: PUSH
22577: LD_INT 2
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: NEG
22588: PUSH
22589: LD_INT 3
22591: NEG
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: LD_INT 3
22603: NEG
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 0
22611: PUSH
22612: LD_INT 3
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: LD_INT 2
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 3
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 3
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 2
22653: PUSH
22654: LD_INT 3
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 3
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 3
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 3
22694: NEG
22695: PUSH
22696: LD_INT 2
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 3
22706: NEG
22707: PUSH
22708: LD_INT 3
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22747: LD_ADDR_VAR 0 43
22751: PUSH
22752: LD_INT 0
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: LD_INT 2
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 2
22924: NEG
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: LD_INT 3
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 3
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: LD_INT 3
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 3
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 3
23043: NEG
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 3
23054: NEG
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23095: LD_ADDR_VAR 0 44
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 0
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: NEG
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: LD_INT 2
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: NEG
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: NEG
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: NEG
23274: PUSH
23275: LD_INT 2
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 2
23285: NEG
23286: PUSH
23287: LD_INT 3
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 3
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 3
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 3
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 3
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 2
23358: NEG
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 3
23369: NEG
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 3
23380: NEG
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 3
23392: NEG
23393: PUSH
23394: LD_INT 2
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 3
23404: NEG
23405: PUSH
23406: LD_INT 3
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23445: LD_ADDR_VAR 0 45
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: LD_INT 2
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: NEG
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 2
23623: NEG
23624: PUSH
23625: LD_INT 2
23627: NEG
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 2
23635: NEG
23636: PUSH
23637: LD_INT 3
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: LD_INT 3
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 3
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 2
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 3
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 3
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 3
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 3
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 3
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 3
23742: NEG
23743: PUSH
23744: LD_INT 2
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 3
23754: NEG
23755: PUSH
23756: LD_INT 3
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23795: LD_ADDR_VAR 0 46
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: LD_INT 0
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 2
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: LD_INT 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 2
23961: NEG
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: NEG
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 3
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: LD_INT 3
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: LD_INT 2
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 3
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 3
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 2
24080: NEG
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 3
24091: NEG
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: NEG
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24143: LD_ADDR_VAR 0 47
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: LD_INT 2
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 2
24258: NEG
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 2
24270: NEG
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24294: LD_ADDR_VAR 0 48
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 1
24375: NEG
24376: PUSH
24377: LD_INT 2
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 2
24390: NEG
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24441: LD_ADDR_VAR 0 49
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24585: LD_ADDR_VAR 0 50
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 2
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24729: LD_ADDR_VAR 0 51
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: NEG
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24876: LD_ADDR_VAR 0 52
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: LD_INT 2
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: LD_INT 2
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25027: LD_ADDR_VAR 0 53
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: NEG
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25257: LD_ADDR_VAR 0 54
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 2
25433: NEG
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: NEG
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: LD_INT 2
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25487: LD_ADDR_VAR 0 55
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: NEG
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 2
25674: NEG
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: NEG
25687: PUSH
25688: LD_INT 2
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25717: LD_ADDR_VAR 0 56
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 2
25916: NEG
25917: PUSH
25918: LD_INT 2
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25947: LD_ADDR_VAR 0 57
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 2
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 2
26134: NEG
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: NEG
26147: PUSH
26148: LD_INT 2
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26177: LD_ADDR_VAR 0 58
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: LD_INT 2
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: NEG
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26407: LD_ADDR_VAR 0 59
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26495: LD_ADDR_VAR 0 60
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26583: LD_ADDR_VAR 0 61
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26671: LD_ADDR_VAR 0 62
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26759: LD_ADDR_VAR 0 63
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26847: LD_ADDR_VAR 0 64
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: ST_TO_ADDR
// end ; 1 :
26935: GO 32832
26937: LD_INT 1
26939: DOUBLE
26940: EQUAL
26941: IFTRUE 26945
26943: GO 29568
26945: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26946: LD_ADDR_VAR 0 11
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 3
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 3
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26990: LD_ADDR_VAR 0 12
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 3
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 3
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27031: LD_ADDR_VAR 0 13
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 3
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: LD_INT 3
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27071: LD_ADDR_VAR 0 14
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 3
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27112: LD_ADDR_VAR 0 15
27116: PUSH
27117: LD_INT 2
27119: NEG
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 3
27130: NEG
27131: PUSH
27132: LD_INT 0
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 3
27141: NEG
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27156: LD_ADDR_VAR 0 16
27160: PUSH
27161: LD_INT 2
27163: NEG
27164: PUSH
27165: LD_INT 3
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 3
27175: NEG
27176: PUSH
27177: LD_INT 2
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 3
27187: NEG
27188: PUSH
27189: LD_INT 3
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27202: LD_ADDR_VAR 0 17
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 3
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: LD_INT 3
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27246: LD_ADDR_VAR 0 18
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 3
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 3
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27287: LD_ADDR_VAR 0 19
27291: PUSH
27292: LD_INT 3
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 3
27304: PUSH
27305: LD_INT 3
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: LD_INT 3
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27327: LD_ADDR_VAR 0 20
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 3
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: LD_INT 3
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27368: LD_ADDR_VAR 0 21
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 3
27386: NEG
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 3
27397: NEG
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27412: LD_ADDR_VAR 0 22
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: LD_INT 3
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 3
27443: NEG
27444: PUSH
27445: LD_INT 3
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27458: LD_ADDR_VAR 0 23
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 3
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 4
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 3
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27502: LD_ADDR_VAR 0 24
27506: PUSH
27507: LD_INT 3
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 3
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 4
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27543: LD_ADDR_VAR 0 25
27547: PUSH
27548: LD_INT 3
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 4
27560: PUSH
27561: LD_INT 3
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: LD_INT 4
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27583: LD_ADDR_VAR 0 26
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 3
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 4
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: LD_INT 3
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: LIST
27623: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27624: LD_ADDR_VAR 0 27
27628: PUSH
27629: LD_INT 3
27631: NEG
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 3
27642: NEG
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 4
27653: NEG
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27668: LD_ADDR_VAR 0 28
27672: PUSH
27673: LD_INT 3
27675: NEG
27676: PUSH
27677: LD_INT 3
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: LD_INT 4
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 4
27699: NEG
27700: PUSH
27701: LD_INT 3
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27714: LD_ADDR_VAR 0 29
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 3
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 3
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 4
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 4
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 3
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 5
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: LD_INT 5
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 4
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: LD_INT 6
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 6
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 5
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27869: LD_ADDR_VAR 0 30
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 3
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 3
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 3
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 4
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 4
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 4
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 5
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 5
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 5
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 6
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 6
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28012: LD_ADDR_VAR 0 31
28016: PUSH
28017: LD_INT 3
28019: PUSH
28020: LD_INT 2
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 3
28029: PUSH
28030: LD_INT 3
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: LD_INT 3
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 4
28049: PUSH
28050: LD_INT 3
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 4
28059: PUSH
28060: LD_INT 4
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: LD_INT 4
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 5
28079: PUSH
28080: LD_INT 4
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 5
28089: PUSH
28090: LD_INT 5
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 4
28099: PUSH
28100: LD_INT 5
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 6
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 6
28119: PUSH
28120: LD_INT 6
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 5
28129: PUSH
28130: LD_INT 6
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28151: LD_ADDR_VAR 0 32
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 4
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 4
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: LD_INT 5
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 5
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: LD_INT 4
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 6
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: LD_INT 6
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: LD_INT 5
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28294: LD_ADDR_VAR 0 33
28298: PUSH
28299: LD_INT 2
28301: NEG
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 3
28312: NEG
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 3
28323: NEG
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 3
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 4
28346: NEG
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 4
28357: NEG
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 4
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 5
28380: NEG
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 5
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 5
28403: NEG
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 6
28414: NEG
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 6
28425: NEG
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28449: LD_ADDR_VAR 0 34
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: LD_INT 3
28460: NEG
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 3
28468: NEG
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 3
28480: NEG
28481: PUSH
28482: LD_INT 3
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: NEG
28493: PUSH
28494: LD_INT 4
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 4
28504: NEG
28505: PUSH
28506: LD_INT 3
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 4
28516: NEG
28517: PUSH
28518: LD_INT 4
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 4
28528: NEG
28529: PUSH
28530: LD_INT 5
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 5
28540: NEG
28541: PUSH
28542: LD_INT 4
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 5
28552: NEG
28553: PUSH
28554: LD_INT 5
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 5
28564: NEG
28565: PUSH
28566: LD_INT 6
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 6
28576: NEG
28577: PUSH
28578: LD_INT 5
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 6
28588: NEG
28589: PUSH
28590: LD_INT 6
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28612: LD_ADDR_VAR 0 41
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 2
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 3
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 2
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28656: LD_ADDR_VAR 0 42
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 3
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28697: LD_ADDR_VAR 0 43
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 3
28714: PUSH
28715: LD_INT 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28737: LD_ADDR_VAR 0 44
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: LD_INT 3
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28778: LD_ADDR_VAR 0 45
28782: PUSH
28783: LD_INT 2
28785: NEG
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: LD_INT 1
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 3
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28822: LD_ADDR_VAR 0 46
28826: PUSH
28827: LD_INT 2
28829: NEG
28830: PUSH
28831: LD_INT 2
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: LD_INT 3
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 3
28853: NEG
28854: PUSH
28855: LD_INT 2
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28868: LD_ADDR_VAR 0 47
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 3
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: LD_INT 3
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28901: LD_ADDR_VAR 0 48
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 2
28911: NEG
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28932: LD_ADDR_VAR 0 49
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 3
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28961: LD_ADDR_VAR 0 50
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 3
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28990: LD_ADDR_VAR 0 51
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29021: LD_ADDR_VAR 0 52
29025: PUSH
29026: LD_INT 3
29028: NEG
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 3
29040: NEG
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29054: LD_ADDR_VAR 0 53
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 3
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29098: LD_ADDR_VAR 0 54
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 3
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29139: LD_ADDR_VAR 0 55
29143: PUSH
29144: LD_INT 3
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 3
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: LD_INT 3
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29179: LD_ADDR_VAR 0 56
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: LD_INT 3
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29220: LD_ADDR_VAR 0 57
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 3
29238: NEG
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 3
29249: NEG
29250: PUSH
29251: LD_INT 1
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29264: LD_ADDR_VAR 0 58
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: LD_INT 3
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 3
29283: NEG
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29310: LD_ADDR_VAR 0 59
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29354: LD_ADDR_VAR 0 60
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 2
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29395: LD_ADDR_VAR 0 61
29399: PUSH
29400: LD_INT 2
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 2
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29435: LD_ADDR_VAR 0 62
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29476: LD_ADDR_VAR 0 63
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 2
29494: NEG
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29520: LD_ADDR_VAR 0 64
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: NEG
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// end ; 2 :
29566: GO 32832
29568: LD_INT 2
29570: DOUBLE
29571: EQUAL
29572: IFTRUE 29576
29574: GO 32831
29576: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29577: LD_ADDR_VAR 0 29
29581: PUSH
29582: LD_INT 4
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 4
29594: PUSH
29595: LD_INT 1
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 5
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 5
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 4
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 3
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 5
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 3
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 4
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 4
29707: PUSH
29708: LD_INT 4
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: LD_INT 4
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 4
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: LD_INT 4
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 4
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 4
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: LD_INT 5
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: LD_INT 5
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: LD_INT 4
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 5
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 2
29849: NEG
29850: PUSH
29851: LD_INT 3
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 3
29860: NEG
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 3
29871: NEG
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 3
29905: NEG
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 4
29916: NEG
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 4
29927: NEG
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 4
29939: NEG
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 4
29962: NEG
29963: PUSH
29964: LD_INT 4
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 4
29974: NEG
29975: PUSH
29976: LD_INT 5
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 4
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: LD_INT 3
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 4
30010: NEG
30011: PUSH
30012: LD_INT 3
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 5
30022: NEG
30023: PUSH
30024: LD_INT 4
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 5
30034: NEG
30035: PUSH
30036: LD_INT 5
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 3
30046: NEG
30047: PUSH
30048: LD_INT 5
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 5
30058: NEG
30059: PUSH
30060: LD_INT 3
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30115: LD_ADDR_VAR 0 30
30119: PUSH
30120: LD_INT 4
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 4
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 5
30142: PUSH
30143: LD_INT 4
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 5
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 4
30162: PUSH
30163: LD_INT 5
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: LD_INT 4
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 5
30192: PUSH
30193: LD_INT 3
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 3
30202: PUSH
30203: LD_INT 5
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 4
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: NEG
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 4
30305: NEG
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 4
30316: NEG
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 3
30328: NEG
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: NEG
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 4
30350: NEG
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 5
30361: NEG
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 5
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 5
30384: NEG
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 3
30396: NEG
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: LD_INT 3
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: NEG
30420: PUSH
30421: LD_INT 4
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: LD_INT 3
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: NEG
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 3
30455: NEG
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 4
30467: NEG
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 4
30479: NEG
30480: PUSH
30481: LD_INT 4
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: LD_INT 4
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 4
30503: NEG
30504: PUSH
30505: LD_INT 2
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 4
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: LD_INT 5
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: LD_INT 4
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 5
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 3
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 2
30605: NEG
30606: PUSH
30607: LD_INT 5
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30662: LD_ADDR_VAR 0 31
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 4
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 5
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 5
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 4
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: LD_INT 5
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 3
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 3
30807: NEG
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 4
30818: NEG
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 4
30829: NEG
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 4
30841: NEG
30842: PUSH
30843: LD_INT 2
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: NEG
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 4
30864: NEG
30865: PUSH
30866: LD_INT 4
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 4
30876: NEG
30877: PUSH
30878: LD_INT 5
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 3
30888: NEG
30889: PUSH
30890: LD_INT 4
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: LD_INT 3
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 4
30912: NEG
30913: PUSH
30914: LD_INT 3
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 5
30924: NEG
30925: PUSH
30926: LD_INT 4
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 5
30936: NEG
30937: PUSH
30938: LD_INT 5
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: LD_INT 5
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 5
30960: NEG
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 3
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 4
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: LD_INT 4
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: LD_INT 4
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 4
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 5
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 5
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: LD_INT 2
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 5
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31212: LD_ADDR_VAR 0 32
31216: PUSH
31217: LD_INT 4
31219: NEG
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 4
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 3
31242: NEG
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 3
31253: NEG
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 4
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 5
31275: NEG
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 5
31286: NEG
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 5
31298: NEG
31299: PUSH
31300: LD_INT 2
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 3
31310: NEG
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: LD_INT 4
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: LD_INT 2
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 4
31381: NEG
31382: PUSH
31383: LD_INT 3
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 4
31393: NEG
31394: PUSH
31395: LD_INT 4
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: LD_INT 4
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 4
31417: NEG
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 4
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: LD_INT 5
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: LD_INT 3
31465: NEG
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: LD_INT 3
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: LD_INT 4
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: LD_INT 5
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: LD_INT 3
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: LD_INT 5
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 4
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 4
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 3
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 4
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 4
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 4
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 5
31644: PUSH
31645: LD_INT 4
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 5
31654: PUSH
31655: LD_INT 5
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 4
31664: PUSH
31665: LD_INT 5
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: PUSH
31675: LD_INT 4
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 3
31684: PUSH
31685: LD_INT 3
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 5
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 3
31704: PUSH
31705: LD_INT 5
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31759: LD_ADDR_VAR 0 33
31763: PUSH
31764: LD_INT 4
31766: NEG
31767: PUSH
31768: LD_INT 4
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 4
31778: NEG
31779: PUSH
31780: LD_INT 5
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 3
31790: NEG
31791: PUSH
31792: LD_INT 4
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 3
31802: NEG
31803: PUSH
31804: LD_INT 3
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 4
31814: NEG
31815: PUSH
31816: LD_INT 3
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 5
31826: NEG
31827: PUSH
31828: LD_INT 4
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 5
31838: NEG
31839: PUSH
31840: LD_INT 5
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: LD_INT 5
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 5
31862: NEG
31863: PUSH
31864: LD_INT 3
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: LD_INT 3
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 4
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 2
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 3
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 4
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 2
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: LD_INT 4
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 4
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 4
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 5
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 4
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 3
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 5
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 3
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 4
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: LD_INT 4
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: LD_INT 4
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 3
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 4
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: LD_INT 4
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: LD_INT 4
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 4
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 5
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 5
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 4
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 5
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32297: LD_ADDR_VAR 0 34
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 4
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 5
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 4
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 3
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 4
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: LD_INT 5
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: LD_INT 5
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 3
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 4
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 4
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 4
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 4
32499: PUSH
32500: LD_INT 4
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 4
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 5
32519: PUSH
32520: LD_INT 4
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 5
32529: PUSH
32530: LD_INT 5
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 4
32539: PUSH
32540: LD_INT 5
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 4
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 3
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 5
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: LD_INT 5
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: LD_INT 3
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: LD_INT 3
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 4
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 4
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 3
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 4
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 4
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 4
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 3
32705: NEG
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 4
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 5
32738: NEG
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 5
32749: NEG
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 5
32761: NEG
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
// end ; end ;
32829: GO 32832
32831: POP
// case btype of b_depot , b_warehouse :
32832: LD_VAR 0 1
32836: PUSH
32837: LD_INT 0
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32851
32843: LD_INT 1
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 33052
32851: POP
// case nation of nation_american :
32852: LD_VAR 0 5
32856: PUSH
32857: LD_INT 1
32859: DOUBLE
32860: EQUAL
32861: IFTRUE 32865
32863: GO 32921
32865: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32866: LD_ADDR_VAR 0 9
32870: PUSH
32871: LD_VAR 0 11
32875: PUSH
32876: LD_VAR 0 12
32880: PUSH
32881: LD_VAR 0 13
32885: PUSH
32886: LD_VAR 0 14
32890: PUSH
32891: LD_VAR 0 15
32895: PUSH
32896: LD_VAR 0 16
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: PUSH
32909: LD_VAR 0 4
32913: PUSH
32914: LD_INT 1
32916: PLUS
32917: ARRAY
32918: ST_TO_ADDR
32919: GO 33050
32921: LD_INT 2
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 32985
32929: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32930: LD_ADDR_VAR 0 9
32934: PUSH
32935: LD_VAR 0 17
32939: PUSH
32940: LD_VAR 0 18
32944: PUSH
32945: LD_VAR 0 19
32949: PUSH
32950: LD_VAR 0 20
32954: PUSH
32955: LD_VAR 0 21
32959: PUSH
32960: LD_VAR 0 22
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: PUSH
32973: LD_VAR 0 4
32977: PUSH
32978: LD_INT 1
32980: PLUS
32981: ARRAY
32982: ST_TO_ADDR
32983: GO 33050
32985: LD_INT 3
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32993
32991: GO 33049
32993: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32994: LD_ADDR_VAR 0 9
32998: PUSH
32999: LD_VAR 0 23
33003: PUSH
33004: LD_VAR 0 24
33008: PUSH
33009: LD_VAR 0 25
33013: PUSH
33014: LD_VAR 0 26
33018: PUSH
33019: LD_VAR 0 27
33023: PUSH
33024: LD_VAR 0 28
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: PUSH
33037: LD_VAR 0 4
33041: PUSH
33042: LD_INT 1
33044: PLUS
33045: ARRAY
33046: ST_TO_ADDR
33047: GO 33050
33049: POP
33050: GO 33605
33052: LD_INT 2
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33066
33058: LD_INT 3
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33122
33066: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33067: LD_ADDR_VAR 0 9
33071: PUSH
33072: LD_VAR 0 29
33076: PUSH
33077: LD_VAR 0 30
33081: PUSH
33082: LD_VAR 0 31
33086: PUSH
33087: LD_VAR 0 32
33091: PUSH
33092: LD_VAR 0 33
33096: PUSH
33097: LD_VAR 0 34
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: PUSH
33110: LD_VAR 0 4
33114: PUSH
33115: LD_INT 1
33117: PLUS
33118: ARRAY
33119: ST_TO_ADDR
33120: GO 33605
33122: LD_INT 16
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33184
33128: LD_INT 17
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33184
33134: LD_INT 18
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33184
33140: LD_INT 19
33142: DOUBLE
33143: EQUAL
33144: IFTRUE 33184
33146: LD_INT 22
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33184
33152: LD_INT 20
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33184
33158: LD_INT 21
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33184
33164: LD_INT 23
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33184
33170: LD_INT 24
33172: DOUBLE
33173: EQUAL
33174: IFTRUE 33184
33176: LD_INT 25
33178: DOUBLE
33179: EQUAL
33180: IFTRUE 33184
33182: GO 33240
33184: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33185: LD_ADDR_VAR 0 9
33189: PUSH
33190: LD_VAR 0 35
33194: PUSH
33195: LD_VAR 0 36
33199: PUSH
33200: LD_VAR 0 37
33204: PUSH
33205: LD_VAR 0 38
33209: PUSH
33210: LD_VAR 0 39
33214: PUSH
33215: LD_VAR 0 40
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: PUSH
33228: LD_VAR 0 4
33232: PUSH
33233: LD_INT 1
33235: PLUS
33236: ARRAY
33237: ST_TO_ADDR
33238: GO 33605
33240: LD_INT 6
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33296
33246: LD_INT 7
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33296
33252: LD_INT 8
33254: DOUBLE
33255: EQUAL
33256: IFTRUE 33296
33258: LD_INT 13
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33296
33264: LD_INT 12
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33296
33270: LD_INT 15
33272: DOUBLE
33273: EQUAL
33274: IFTRUE 33296
33276: LD_INT 11
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33296
33282: LD_INT 14
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33296
33288: LD_INT 10
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33352
33296: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33297: LD_ADDR_VAR 0 9
33301: PUSH
33302: LD_VAR 0 41
33306: PUSH
33307: LD_VAR 0 42
33311: PUSH
33312: LD_VAR 0 43
33316: PUSH
33317: LD_VAR 0 44
33321: PUSH
33322: LD_VAR 0 45
33326: PUSH
33327: LD_VAR 0 46
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: PUSH
33340: LD_VAR 0 4
33344: PUSH
33345: LD_INT 1
33347: PLUS
33348: ARRAY
33349: ST_TO_ADDR
33350: GO 33605
33352: LD_INT 36
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33416
33360: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33361: LD_ADDR_VAR 0 9
33365: PUSH
33366: LD_VAR 0 47
33370: PUSH
33371: LD_VAR 0 48
33375: PUSH
33376: LD_VAR 0 49
33380: PUSH
33381: LD_VAR 0 50
33385: PUSH
33386: LD_VAR 0 51
33390: PUSH
33391: LD_VAR 0 52
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: PUSH
33404: LD_VAR 0 4
33408: PUSH
33409: LD_INT 1
33411: PLUS
33412: ARRAY
33413: ST_TO_ADDR
33414: GO 33605
33416: LD_INT 4
33418: DOUBLE
33419: EQUAL
33420: IFTRUE 33442
33422: LD_INT 5
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33442
33428: LD_INT 34
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33442
33434: LD_INT 37
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 33498
33442: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33443: LD_ADDR_VAR 0 9
33447: PUSH
33448: LD_VAR 0 53
33452: PUSH
33453: LD_VAR 0 54
33457: PUSH
33458: LD_VAR 0 55
33462: PUSH
33463: LD_VAR 0 56
33467: PUSH
33468: LD_VAR 0 57
33472: PUSH
33473: LD_VAR 0 58
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: PUSH
33486: LD_VAR 0 4
33490: PUSH
33491: LD_INT 1
33493: PLUS
33494: ARRAY
33495: ST_TO_ADDR
33496: GO 33605
33498: LD_INT 31
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33548
33504: LD_INT 32
33506: DOUBLE
33507: EQUAL
33508: IFTRUE 33548
33510: LD_INT 33
33512: DOUBLE
33513: EQUAL
33514: IFTRUE 33548
33516: LD_INT 27
33518: DOUBLE
33519: EQUAL
33520: IFTRUE 33548
33522: LD_INT 26
33524: DOUBLE
33525: EQUAL
33526: IFTRUE 33548
33528: LD_INT 28
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33548
33534: LD_INT 29
33536: DOUBLE
33537: EQUAL
33538: IFTRUE 33548
33540: LD_INT 30
33542: DOUBLE
33543: EQUAL
33544: IFTRUE 33548
33546: GO 33604
33548: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33549: LD_ADDR_VAR 0 9
33553: PUSH
33554: LD_VAR 0 59
33558: PUSH
33559: LD_VAR 0 60
33563: PUSH
33564: LD_VAR 0 61
33568: PUSH
33569: LD_VAR 0 62
33573: PUSH
33574: LD_VAR 0 63
33578: PUSH
33579: LD_VAR 0 64
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: LD_VAR 0 4
33596: PUSH
33597: LD_INT 1
33599: PLUS
33600: ARRAY
33601: ST_TO_ADDR
33602: GO 33605
33604: POP
// temp_list2 = [ ] ;
33605: LD_ADDR_VAR 0 10
33609: PUSH
33610: EMPTY
33611: ST_TO_ADDR
// for i in temp_list do
33612: LD_ADDR_VAR 0 8
33616: PUSH
33617: LD_VAR 0 9
33621: PUSH
33622: FOR_IN
33623: IFFALSE 33675
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33625: LD_ADDR_VAR 0 10
33629: PUSH
33630: LD_VAR 0 10
33634: PUSH
33635: LD_VAR 0 8
33639: PUSH
33640: LD_INT 1
33642: ARRAY
33643: PUSH
33644: LD_VAR 0 2
33648: PLUS
33649: PUSH
33650: LD_VAR 0 8
33654: PUSH
33655: LD_INT 2
33657: ARRAY
33658: PUSH
33659: LD_VAR 0 3
33663: PLUS
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: EMPTY
33670: LIST
33671: ADD
33672: ST_TO_ADDR
33673: GO 33622
33675: POP
33676: POP
// result = temp_list2 ;
33677: LD_ADDR_VAR 0 7
33681: PUSH
33682: LD_VAR 0 10
33686: ST_TO_ADDR
// end ;
33687: LD_VAR 0 7
33691: RET
// export function EnemyInRange ( unit , dist ) ; begin
33692: LD_INT 0
33694: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33695: LD_ADDR_VAR 0 3
33699: PUSH
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 255
33709: PPUSH
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 250
33719: PPUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 251
33729: PPUSH
33730: LD_VAR 0 2
33734: PPUSH
33735: CALL 6949 0 4
33739: PUSH
33740: LD_INT 4
33742: ARRAY
33743: ST_TO_ADDR
// end ;
33744: LD_VAR 0 3
33748: RET
// export function PlayerSeeMe ( unit ) ; begin
33749: LD_INT 0
33751: PPUSH
// result := See ( your_side , unit ) ;
33752: LD_ADDR_VAR 0 2
33756: PUSH
33757: LD_OWVAR 2
33761: PPUSH
33762: LD_VAR 0 1
33766: PPUSH
33767: CALL_OW 292
33771: ST_TO_ADDR
// end ;
33772: LD_VAR 0 2
33776: RET
// export function ReverseDir ( unit ) ; begin
33777: LD_INT 0
33779: PPUSH
// if not unit then
33780: LD_VAR 0 1
33784: NOT
33785: IFFALSE 33789
// exit ;
33787: GO 33812
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33789: LD_ADDR_VAR 0 2
33793: PUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 254
33803: PUSH
33804: LD_INT 3
33806: PLUS
33807: PUSH
33808: LD_INT 6
33810: MOD
33811: ST_TO_ADDR
// end ;
33812: LD_VAR 0 2
33816: RET
// export function ReverseArray ( array ) ; var i ; begin
33817: LD_INT 0
33819: PPUSH
33820: PPUSH
// if not array then
33821: LD_VAR 0 1
33825: NOT
33826: IFFALSE 33830
// exit ;
33828: GO 33885
// result := [ ] ;
33830: LD_ADDR_VAR 0 2
33834: PUSH
33835: EMPTY
33836: ST_TO_ADDR
// for i := array downto 1 do
33837: LD_ADDR_VAR 0 3
33841: PUSH
33842: DOUBLE
33843: LD_VAR 0 1
33847: INC
33848: ST_TO_ADDR
33849: LD_INT 1
33851: PUSH
33852: FOR_DOWNTO
33853: IFFALSE 33883
// result := Join ( result , array [ i ] ) ;
33855: LD_ADDR_VAR 0 2
33859: PUSH
33860: LD_VAR 0 2
33864: PPUSH
33865: LD_VAR 0 1
33869: PUSH
33870: LD_VAR 0 3
33874: ARRAY
33875: PPUSH
33876: CALL 38737 0 2
33880: ST_TO_ADDR
33881: GO 33852
33883: POP
33884: POP
// end ;
33885: LD_VAR 0 2
33889: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33890: LD_INT 0
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
// if not unit or not hexes then
33898: LD_VAR 0 1
33902: NOT
33903: IFTRUE 33912
33905: PUSH
33906: LD_VAR 0 2
33910: NOT
33911: OR
33912: IFFALSE 33916
// exit ;
33914: GO 34039
// dist := 9999 ;
33916: LD_ADDR_VAR 0 5
33920: PUSH
33921: LD_INT 9999
33923: ST_TO_ADDR
// for i = 1 to hexes do
33924: LD_ADDR_VAR 0 4
33928: PUSH
33929: DOUBLE
33930: LD_INT 1
33932: DEC
33933: ST_TO_ADDR
33934: LD_VAR 0 2
33938: PUSH
33939: FOR_TO
33940: IFFALSE 34027
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33942: LD_ADDR_VAR 0 6
33946: PUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: LD_VAR 0 2
33956: PUSH
33957: LD_VAR 0 4
33961: ARRAY
33962: PUSH
33963: LD_INT 1
33965: ARRAY
33966: PPUSH
33967: LD_VAR 0 2
33971: PUSH
33972: LD_VAR 0 4
33976: ARRAY
33977: PUSH
33978: LD_INT 2
33980: ARRAY
33981: PPUSH
33982: CALL_OW 297
33986: ST_TO_ADDR
// if tdist < dist then
33987: LD_VAR 0 6
33991: PUSH
33992: LD_VAR 0 5
33996: LESS
33997: IFFALSE 34025
// begin hex := hexes [ i ] ;
33999: LD_ADDR_VAR 0 8
34003: PUSH
34004: LD_VAR 0 2
34008: PUSH
34009: LD_VAR 0 4
34013: ARRAY
34014: ST_TO_ADDR
// dist := tdist ;
34015: LD_ADDR_VAR 0 5
34019: PUSH
34020: LD_VAR 0 6
34024: ST_TO_ADDR
// end ; end ;
34025: GO 33939
34027: POP
34028: POP
// result := hex ;
34029: LD_ADDR_VAR 0 3
34033: PUSH
34034: LD_VAR 0 8
34038: ST_TO_ADDR
// end ;
34039: LD_VAR 0 3
34043: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34044: LD_INT 0
34046: PPUSH
34047: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34048: LD_VAR 0 1
34052: NOT
34053: IFTRUE 34092
34055: PUSH
34056: LD_VAR 0 1
34060: PUSH
34061: LD_INT 21
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 23
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PPUSH
34085: CALL_OW 69
34089: IN
34090: NOT
34091: OR
34092: IFFALSE 34096
// exit ;
34094: GO 34143
// for i = 1 to 3 do
34096: LD_ADDR_VAR 0 3
34100: PUSH
34101: DOUBLE
34102: LD_INT 1
34104: DEC
34105: ST_TO_ADDR
34106: LD_INT 3
34108: PUSH
34109: FOR_TO
34110: IFFALSE 34141
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34112: LD_VAR 0 1
34116: PPUSH
34117: CALL_OW 250
34121: PPUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 251
34131: PPUSH
34132: LD_INT 1
34134: PPUSH
34135: CALL_OW 453
34139: GO 34109
34141: POP
34142: POP
// end ;
34143: LD_VAR 0 2
34147: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34148: LD_INT 0
34150: PPUSH
34151: PPUSH
34152: PPUSH
34153: PPUSH
34154: PPUSH
34155: PPUSH
// if not unit or not enemy_unit then
34156: LD_VAR 0 1
34160: NOT
34161: IFTRUE 34170
34163: PUSH
34164: LD_VAR 0 2
34168: NOT
34169: OR
34170: IFFALSE 34174
// exit ;
34172: GO 34655
// if GetLives ( i ) < 250 then
34174: LD_VAR 0 4
34178: PPUSH
34179: CALL_OW 256
34183: PUSH
34184: LD_INT 250
34186: LESS
34187: IFFALSE 34200
// begin ComAutodestruct ( i ) ;
34189: LD_VAR 0 4
34193: PPUSH
34194: CALL 34044 0 1
// exit ;
34198: GO 34655
// end ; x := GetX ( enemy_unit ) ;
34200: LD_ADDR_VAR 0 7
34204: PUSH
34205: LD_VAR 0 2
34209: PPUSH
34210: CALL_OW 250
34214: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34215: LD_ADDR_VAR 0 8
34219: PUSH
34220: LD_VAR 0 2
34224: PPUSH
34225: CALL_OW 251
34229: ST_TO_ADDR
// if not x or not y then
34230: LD_VAR 0 7
34234: NOT
34235: IFTRUE 34244
34237: PUSH
34238: LD_VAR 0 8
34242: NOT
34243: OR
34244: IFFALSE 34248
// exit ;
34246: GO 34655
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34248: LD_ADDR_VAR 0 6
34252: PUSH
34253: LD_VAR 0 7
34257: PPUSH
34258: LD_INT 0
34260: PPUSH
34261: LD_INT 4
34263: PPUSH
34264: CALL_OW 272
34268: PUSH
34269: LD_VAR 0 8
34273: PPUSH
34274: LD_INT 0
34276: PPUSH
34277: LD_INT 4
34279: PPUSH
34280: CALL_OW 273
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_VAR 0 7
34293: PPUSH
34294: LD_INT 1
34296: PPUSH
34297: LD_INT 4
34299: PPUSH
34300: CALL_OW 272
34304: PUSH
34305: LD_VAR 0 8
34309: PPUSH
34310: LD_INT 1
34312: PPUSH
34313: LD_INT 4
34315: PPUSH
34316: CALL_OW 273
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_VAR 0 7
34329: PPUSH
34330: LD_INT 2
34332: PPUSH
34333: LD_INT 4
34335: PPUSH
34336: CALL_OW 272
34340: PUSH
34341: LD_VAR 0 8
34345: PPUSH
34346: LD_INT 2
34348: PPUSH
34349: LD_INT 4
34351: PPUSH
34352: CALL_OW 273
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_VAR 0 7
34365: PPUSH
34366: LD_INT 3
34368: PPUSH
34369: LD_INT 4
34371: PPUSH
34372: CALL_OW 272
34376: PUSH
34377: LD_VAR 0 8
34381: PPUSH
34382: LD_INT 3
34384: PPUSH
34385: LD_INT 4
34387: PPUSH
34388: CALL_OW 273
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_VAR 0 7
34401: PPUSH
34402: LD_INT 4
34404: PPUSH
34405: LD_INT 4
34407: PPUSH
34408: CALL_OW 272
34412: PUSH
34413: LD_VAR 0 8
34417: PPUSH
34418: LD_INT 4
34420: PPUSH
34421: LD_INT 4
34423: PPUSH
34424: CALL_OW 273
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_VAR 0 7
34437: PPUSH
34438: LD_INT 5
34440: PPUSH
34441: LD_INT 4
34443: PPUSH
34444: CALL_OW 272
34448: PUSH
34449: LD_VAR 0 8
34453: PPUSH
34454: LD_INT 5
34456: PPUSH
34457: LD_INT 4
34459: PPUSH
34460: CALL_OW 273
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: ST_TO_ADDR
// for i = tmp downto 1 do
34477: LD_ADDR_VAR 0 4
34481: PUSH
34482: DOUBLE
34483: LD_VAR 0 6
34487: INC
34488: ST_TO_ADDR
34489: LD_INT 1
34491: PUSH
34492: FOR_DOWNTO
34493: IFFALSE 34596
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34495: LD_VAR 0 6
34499: PUSH
34500: LD_VAR 0 4
34504: ARRAY
34505: PUSH
34506: LD_INT 1
34508: ARRAY
34509: PPUSH
34510: LD_VAR 0 6
34514: PUSH
34515: LD_VAR 0 4
34519: ARRAY
34520: PUSH
34521: LD_INT 2
34523: ARRAY
34524: PPUSH
34525: CALL_OW 488
34529: NOT
34530: IFTRUE 34572
34532: PUSH
34533: LD_VAR 0 6
34537: PUSH
34538: LD_VAR 0 4
34542: ARRAY
34543: PUSH
34544: LD_INT 1
34546: ARRAY
34547: PPUSH
34548: LD_VAR 0 6
34552: PUSH
34553: LD_VAR 0 4
34557: ARRAY
34558: PUSH
34559: LD_INT 2
34561: ARRAY
34562: PPUSH
34563: CALL_OW 428
34567: PUSH
34568: LD_INT 0
34570: NONEQUAL
34571: OR
34572: IFFALSE 34594
// tmp := Delete ( tmp , i ) ;
34574: LD_ADDR_VAR 0 6
34578: PUSH
34579: LD_VAR 0 6
34583: PPUSH
34584: LD_VAR 0 4
34588: PPUSH
34589: CALL_OW 3
34593: ST_TO_ADDR
34594: GO 34492
34596: POP
34597: POP
// j := GetClosestHex ( unit , tmp ) ;
34598: LD_ADDR_VAR 0 5
34602: PUSH
34603: LD_VAR 0 1
34607: PPUSH
34608: LD_VAR 0 6
34612: PPUSH
34613: CALL 33890 0 2
34617: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34618: LD_VAR 0 1
34622: PPUSH
34623: LD_VAR 0 5
34627: PUSH
34628: LD_INT 1
34630: ARRAY
34631: PPUSH
34632: LD_VAR 0 5
34636: PUSH
34637: LD_INT 2
34639: ARRAY
34640: PPUSH
34641: CALL_OW 111
// result := j ;
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_VAR 0 5
34654: ST_TO_ADDR
// end ;
34655: LD_VAR 0 3
34659: RET
// export function PrepareApemanSoldier ( ) ; begin
34660: LD_INT 0
34662: PPUSH
// uc_nation := 0 ;
34663: LD_ADDR_OWVAR 21
34667: PUSH
34668: LD_INT 0
34670: ST_TO_ADDR
// hc_sex := sex_male ;
34671: LD_ADDR_OWVAR 27
34675: PUSH
34676: LD_INT 1
34678: ST_TO_ADDR
// hc_name :=  ;
34679: LD_ADDR_OWVAR 26
34683: PUSH
34684: LD_STRING 
34686: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34687: LD_ADDR_OWVAR 28
34691: PUSH
34692: LD_INT 15
34694: ST_TO_ADDR
// hc_gallery :=  ;
34695: LD_ADDR_OWVAR 33
34699: PUSH
34700: LD_STRING 
34702: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34703: LD_ADDR_OWVAR 31
34707: PUSH
34708: LD_INT 0
34710: PPUSH
34711: LD_INT 3
34713: PPUSH
34714: CALL_OW 12
34718: PUSH
34719: LD_INT 0
34721: PPUSH
34722: LD_INT 3
34724: PPUSH
34725: CALL_OW 12
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
34742: LD_ADDR_OWVAR 29
34746: PUSH
34747: LD_INT 10
34749: PUSH
34750: LD_INT 12
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: ST_TO_ADDR
// end ;
34757: LD_VAR 0 1
34761: RET
// export function PrepareApemanEngineer ( ) ; begin
34762: LD_INT 0
34764: PPUSH
// uc_nation := 0 ;
34765: LD_ADDR_OWVAR 21
34769: PUSH
34770: LD_INT 0
34772: ST_TO_ADDR
// hc_sex := sex_male ;
34773: LD_ADDR_OWVAR 27
34777: PUSH
34778: LD_INT 1
34780: ST_TO_ADDR
// hc_name :=  ;
34781: LD_ADDR_OWVAR 26
34785: PUSH
34786: LD_STRING 
34788: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34789: LD_ADDR_OWVAR 28
34793: PUSH
34794: LD_INT 16
34796: ST_TO_ADDR
// hc_gallery :=  ;
34797: LD_ADDR_OWVAR 33
34801: PUSH
34802: LD_STRING 
34804: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34805: LD_ADDR_OWVAR 31
34809: PUSH
34810: LD_INT 0
34812: PPUSH
34813: LD_INT 3
34815: PPUSH
34816: CALL_OW 12
34820: PUSH
34821: LD_INT 0
34823: PPUSH
34824: LD_INT 3
34826: PPUSH
34827: CALL_OW 12
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
34844: LD_ADDR_OWVAR 29
34848: PUSH
34849: LD_INT 10
34851: PUSH
34852: LD_INT 12
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: ST_TO_ADDR
// end ;
34859: LD_VAR 0 1
34863: RET
// export function PrepareApeman ( agressivity ) ; begin
34864: LD_INT 0
34866: PPUSH
// uc_side := 0 ;
34867: LD_ADDR_OWVAR 20
34871: PUSH
34872: LD_INT 0
34874: ST_TO_ADDR
// uc_nation := 0 ;
34875: LD_ADDR_OWVAR 21
34879: PUSH
34880: LD_INT 0
34882: ST_TO_ADDR
// hc_sex := sex_male ;
34883: LD_ADDR_OWVAR 27
34887: PUSH
34888: LD_INT 1
34890: ST_TO_ADDR
// hc_class := class_apeman ;
34891: LD_ADDR_OWVAR 28
34895: PUSH
34896: LD_INT 12
34898: ST_TO_ADDR
// hc_gallery :=  ;
34899: LD_ADDR_OWVAR 33
34903: PUSH
34904: LD_STRING 
34906: ST_TO_ADDR
// hc_name :=  ;
34907: LD_ADDR_OWVAR 26
34911: PUSH
34912: LD_STRING 
34914: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
34915: LD_ADDR_OWVAR 29
34919: PUSH
34920: LD_INT 10
34922: PUSH
34923: LD_INT 12
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: ST_TO_ADDR
// if agressivity = 0 then
34930: LD_VAR 0 1
34934: PUSH
34935: LD_INT 0
34937: EQUAL
34938: IFFALSE 34950
// hc_agressivity := 0 else
34940: LD_ADDR_OWVAR 35
34944: PUSH
34945: LD_INT 0
34947: ST_TO_ADDR
34948: GO 34971
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34950: LD_ADDR_OWVAR 35
34954: PUSH
34955: LD_VAR 0 1
34959: NEG
34960: PPUSH
34961: LD_VAR 0 1
34965: PPUSH
34966: CALL_OW 12
34970: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34971: LD_ADDR_OWVAR 31
34975: PUSH
34976: LD_INT 0
34978: PPUSH
34979: LD_INT 3
34981: PPUSH
34982: CALL_OW 12
34986: PUSH
34987: LD_INT 0
34989: PPUSH
34990: LD_INT 3
34992: PPUSH
34993: CALL_OW 12
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
// end ;
35010: LD_VAR 0 2
35014: RET
// export function PrepareTiger ( agressivity ) ; begin
35015: LD_INT 0
35017: PPUSH
// uc_side := 0 ;
35018: LD_ADDR_OWVAR 20
35022: PUSH
35023: LD_INT 0
35025: ST_TO_ADDR
// uc_nation := 0 ;
35026: LD_ADDR_OWVAR 21
35030: PUSH
35031: LD_INT 0
35033: ST_TO_ADDR
// InitHc ;
35034: CALL_OW 19
// hc_class := class_tiger ;
35038: LD_ADDR_OWVAR 28
35042: PUSH
35043: LD_INT 14
35045: ST_TO_ADDR
// hc_gallery :=  ;
35046: LD_ADDR_OWVAR 33
35050: PUSH
35051: LD_STRING 
35053: ST_TO_ADDR
// hc_name :=  ;
35054: LD_ADDR_OWVAR 26
35058: PUSH
35059: LD_STRING 
35061: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35062: LD_ADDR_OWVAR 35
35066: PUSH
35067: LD_VAR 0 1
35071: NEG
35072: PPUSH
35073: LD_VAR 0 1
35077: PPUSH
35078: CALL_OW 12
35082: ST_TO_ADDR
// end ;
35083: LD_VAR 0 2
35087: RET
// export function PrepareEnchidna ( ) ; begin
35088: LD_INT 0
35090: PPUSH
// uc_side := 0 ;
35091: LD_ADDR_OWVAR 20
35095: PUSH
35096: LD_INT 0
35098: ST_TO_ADDR
// uc_nation := 0 ;
35099: LD_ADDR_OWVAR 21
35103: PUSH
35104: LD_INT 0
35106: ST_TO_ADDR
// InitHc ;
35107: CALL_OW 19
// hc_class := class_baggie ;
35111: LD_ADDR_OWVAR 28
35115: PUSH
35116: LD_INT 13
35118: ST_TO_ADDR
// hc_gallery :=  ;
35119: LD_ADDR_OWVAR 33
35123: PUSH
35124: LD_STRING 
35126: ST_TO_ADDR
// hc_name :=  ;
35127: LD_ADDR_OWVAR 26
35131: PUSH
35132: LD_STRING 
35134: ST_TO_ADDR
// end ;
35135: LD_VAR 0 1
35139: RET
// export function PrepareFrog ( ) ; begin
35140: LD_INT 0
35142: PPUSH
// uc_side := 0 ;
35143: LD_ADDR_OWVAR 20
35147: PUSH
35148: LD_INT 0
35150: ST_TO_ADDR
// uc_nation := 0 ;
35151: LD_ADDR_OWVAR 21
35155: PUSH
35156: LD_INT 0
35158: ST_TO_ADDR
// InitHc ;
35159: CALL_OW 19
// hc_class := class_frog ;
35163: LD_ADDR_OWVAR 28
35167: PUSH
35168: LD_INT 19
35170: ST_TO_ADDR
// hc_gallery :=  ;
35171: LD_ADDR_OWVAR 33
35175: PUSH
35176: LD_STRING 
35178: ST_TO_ADDR
// hc_name :=  ;
35179: LD_ADDR_OWVAR 26
35183: PUSH
35184: LD_STRING 
35186: ST_TO_ADDR
// end ;
35187: LD_VAR 0 1
35191: RET
// export function PrepareFish ( ) ; begin
35192: LD_INT 0
35194: PPUSH
// uc_side := 0 ;
35195: LD_ADDR_OWVAR 20
35199: PUSH
35200: LD_INT 0
35202: ST_TO_ADDR
// uc_nation := 0 ;
35203: LD_ADDR_OWVAR 21
35207: PUSH
35208: LD_INT 0
35210: ST_TO_ADDR
// InitHc ;
35211: CALL_OW 19
// hc_class := class_fish ;
35215: LD_ADDR_OWVAR 28
35219: PUSH
35220: LD_INT 20
35222: ST_TO_ADDR
// hc_gallery :=  ;
35223: LD_ADDR_OWVAR 33
35227: PUSH
35228: LD_STRING 
35230: ST_TO_ADDR
// hc_name :=  ;
35231: LD_ADDR_OWVAR 26
35235: PUSH
35236: LD_STRING 
35238: ST_TO_ADDR
// end ;
35239: LD_VAR 0 1
35243: RET
// export function PrepareBird ( ) ; begin
35244: LD_INT 0
35246: PPUSH
// uc_side := 0 ;
35247: LD_ADDR_OWVAR 20
35251: PUSH
35252: LD_INT 0
35254: ST_TO_ADDR
// uc_nation := 0 ;
35255: LD_ADDR_OWVAR 21
35259: PUSH
35260: LD_INT 0
35262: ST_TO_ADDR
// InitHc ;
35263: CALL_OW 19
// hc_class := class_phororhacos ;
35267: LD_ADDR_OWVAR 28
35271: PUSH
35272: LD_INT 18
35274: ST_TO_ADDR
// hc_gallery :=  ;
35275: LD_ADDR_OWVAR 33
35279: PUSH
35280: LD_STRING 
35282: ST_TO_ADDR
// hc_name :=  ;
35283: LD_ADDR_OWVAR 26
35287: PUSH
35288: LD_STRING 
35290: ST_TO_ADDR
// end ;
35291: LD_VAR 0 1
35295: RET
// export function PrepareHorse ( ) ; begin
35296: LD_INT 0
35298: PPUSH
// uc_side := 0 ;
35299: LD_ADDR_OWVAR 20
35303: PUSH
35304: LD_INT 0
35306: ST_TO_ADDR
// uc_nation := 0 ;
35307: LD_ADDR_OWVAR 21
35311: PUSH
35312: LD_INT 0
35314: ST_TO_ADDR
// InitHc ;
35315: CALL_OW 19
// hc_class := class_horse ;
35319: LD_ADDR_OWVAR 28
35323: PUSH
35324: LD_INT 21
35326: ST_TO_ADDR
// hc_gallery :=  ;
35327: LD_ADDR_OWVAR 33
35331: PUSH
35332: LD_STRING 
35334: ST_TO_ADDR
// hc_name :=  ;
35335: LD_ADDR_OWVAR 26
35339: PUSH
35340: LD_STRING 
35342: ST_TO_ADDR
// end ;
35343: LD_VAR 0 1
35347: RET
// export function PrepareMastodont ( ) ; begin
35348: LD_INT 0
35350: PPUSH
// uc_side := 0 ;
35351: LD_ADDR_OWVAR 20
35355: PUSH
35356: LD_INT 0
35358: ST_TO_ADDR
// uc_nation := 0 ;
35359: LD_ADDR_OWVAR 21
35363: PUSH
35364: LD_INT 0
35366: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35367: LD_ADDR_OWVAR 37
35371: PUSH
35372: LD_INT 31
35374: ST_TO_ADDR
// vc_control := control_rider ;
35375: LD_ADDR_OWVAR 38
35379: PUSH
35380: LD_INT 4
35382: ST_TO_ADDR
// end ;
35383: LD_VAR 0 1
35387: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35388: LD_INT 0
35390: PPUSH
35391: PPUSH
35392: PPUSH
// uc_side = 0 ;
35393: LD_ADDR_OWVAR 20
35397: PUSH
35398: LD_INT 0
35400: ST_TO_ADDR
// uc_nation = 0 ;
35401: LD_ADDR_OWVAR 21
35405: PUSH
35406: LD_INT 0
35408: ST_TO_ADDR
// InitHc_All ( ) ;
35409: CALL_OW 584
// InitVc ;
35413: CALL_OW 20
// if mastodonts then
35417: LD_VAR 0 6
35421: IFFALSE 35488
// for i = 1 to mastodonts do
35423: LD_ADDR_VAR 0 11
35427: PUSH
35428: DOUBLE
35429: LD_INT 1
35431: DEC
35432: ST_TO_ADDR
35433: LD_VAR 0 6
35437: PUSH
35438: FOR_TO
35439: IFFALSE 35486
// begin vc_chassis := 31 ;
35441: LD_ADDR_OWVAR 37
35445: PUSH
35446: LD_INT 31
35448: ST_TO_ADDR
// vc_control := control_rider ;
35449: LD_ADDR_OWVAR 38
35453: PUSH
35454: LD_INT 4
35456: ST_TO_ADDR
// animal := CreateVehicle ;
35457: LD_ADDR_VAR 0 12
35461: PUSH
35462: CALL_OW 45
35466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35467: LD_VAR 0 12
35471: PPUSH
35472: LD_VAR 0 8
35476: PPUSH
35477: LD_INT 0
35479: PPUSH
35480: CALL 37630 0 3
// end ;
35484: GO 35438
35486: POP
35487: POP
// if horses then
35488: LD_VAR 0 5
35492: IFFALSE 35559
// for i = 1 to horses do
35494: LD_ADDR_VAR 0 11
35498: PUSH
35499: DOUBLE
35500: LD_INT 1
35502: DEC
35503: ST_TO_ADDR
35504: LD_VAR 0 5
35508: PUSH
35509: FOR_TO
35510: IFFALSE 35557
// begin hc_class := 21 ;
35512: LD_ADDR_OWVAR 28
35516: PUSH
35517: LD_INT 21
35519: ST_TO_ADDR
// hc_gallery :=  ;
35520: LD_ADDR_OWVAR 33
35524: PUSH
35525: LD_STRING 
35527: ST_TO_ADDR
// animal := CreateHuman ;
35528: LD_ADDR_VAR 0 12
35532: PUSH
35533: CALL_OW 44
35537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35538: LD_VAR 0 12
35542: PPUSH
35543: LD_VAR 0 8
35547: PPUSH
35548: LD_INT 0
35550: PPUSH
35551: CALL 37630 0 3
// end ;
35555: GO 35509
35557: POP
35558: POP
// if birds then
35559: LD_VAR 0 1
35563: IFFALSE 35630
// for i = 1 to birds do
35565: LD_ADDR_VAR 0 11
35569: PUSH
35570: DOUBLE
35571: LD_INT 1
35573: DEC
35574: ST_TO_ADDR
35575: LD_VAR 0 1
35579: PUSH
35580: FOR_TO
35581: IFFALSE 35628
// begin hc_class := 18 ;
35583: LD_ADDR_OWVAR 28
35587: PUSH
35588: LD_INT 18
35590: ST_TO_ADDR
// hc_gallery =  ;
35591: LD_ADDR_OWVAR 33
35595: PUSH
35596: LD_STRING 
35598: ST_TO_ADDR
// animal := CreateHuman ;
35599: LD_ADDR_VAR 0 12
35603: PUSH
35604: CALL_OW 44
35608: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35609: LD_VAR 0 12
35613: PPUSH
35614: LD_VAR 0 8
35618: PPUSH
35619: LD_INT 0
35621: PPUSH
35622: CALL 37630 0 3
// end ;
35626: GO 35580
35628: POP
35629: POP
// if tigers then
35630: LD_VAR 0 2
35634: IFFALSE 35718
// for i = 1 to tigers do
35636: LD_ADDR_VAR 0 11
35640: PUSH
35641: DOUBLE
35642: LD_INT 1
35644: DEC
35645: ST_TO_ADDR
35646: LD_VAR 0 2
35650: PUSH
35651: FOR_TO
35652: IFFALSE 35716
// begin hc_class = class_tiger ;
35654: LD_ADDR_OWVAR 28
35658: PUSH
35659: LD_INT 14
35661: ST_TO_ADDR
// hc_gallery =  ;
35662: LD_ADDR_OWVAR 33
35666: PUSH
35667: LD_STRING 
35669: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35670: LD_ADDR_OWVAR 35
35674: PUSH
35675: LD_INT 7
35677: NEG
35678: PPUSH
35679: LD_INT 7
35681: PPUSH
35682: CALL_OW 12
35686: ST_TO_ADDR
// animal := CreateHuman ;
35687: LD_ADDR_VAR 0 12
35691: PUSH
35692: CALL_OW 44
35696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35697: LD_VAR 0 12
35701: PPUSH
35702: LD_VAR 0 8
35706: PPUSH
35707: LD_INT 0
35709: PPUSH
35710: CALL 37630 0 3
// end ;
35714: GO 35651
35716: POP
35717: POP
// if apemans then
35718: LD_VAR 0 3
35722: IFFALSE 35845
// for i = 1 to apemans do
35724: LD_ADDR_VAR 0 11
35728: PUSH
35729: DOUBLE
35730: LD_INT 1
35732: DEC
35733: ST_TO_ADDR
35734: LD_VAR 0 3
35738: PUSH
35739: FOR_TO
35740: IFFALSE 35843
// begin hc_class = class_apeman ;
35742: LD_ADDR_OWVAR 28
35746: PUSH
35747: LD_INT 12
35749: ST_TO_ADDR
// hc_gallery =  ;
35750: LD_ADDR_OWVAR 33
35754: PUSH
35755: LD_STRING 
35757: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35758: LD_ADDR_OWVAR 35
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PPUSH
35767: LD_INT 2
35769: PPUSH
35770: CALL_OW 12
35774: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35775: LD_ADDR_OWVAR 31
35779: PUSH
35780: LD_INT 1
35782: PPUSH
35783: LD_INT 3
35785: PPUSH
35786: CALL_OW 12
35790: PUSH
35791: LD_INT 1
35793: PPUSH
35794: LD_INT 3
35796: PPUSH
35797: CALL_OW 12
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
// animal := CreateHuman ;
35814: LD_ADDR_VAR 0 12
35818: PUSH
35819: CALL_OW 44
35823: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35824: LD_VAR 0 12
35828: PPUSH
35829: LD_VAR 0 8
35833: PPUSH
35834: LD_INT 0
35836: PPUSH
35837: CALL 37630 0 3
// end ;
35841: GO 35739
35843: POP
35844: POP
// if enchidnas then
35845: LD_VAR 0 4
35849: IFFALSE 35916
// for i = 1 to enchidnas do
35851: LD_ADDR_VAR 0 11
35855: PUSH
35856: DOUBLE
35857: LD_INT 1
35859: DEC
35860: ST_TO_ADDR
35861: LD_VAR 0 4
35865: PUSH
35866: FOR_TO
35867: IFFALSE 35914
// begin hc_class = 13 ;
35869: LD_ADDR_OWVAR 28
35873: PUSH
35874: LD_INT 13
35876: ST_TO_ADDR
// hc_gallery =  ;
35877: LD_ADDR_OWVAR 33
35881: PUSH
35882: LD_STRING 
35884: ST_TO_ADDR
// animal := CreateHuman ;
35885: LD_ADDR_VAR 0 12
35889: PUSH
35890: CALL_OW 44
35894: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35895: LD_VAR 0 12
35899: PPUSH
35900: LD_VAR 0 8
35904: PPUSH
35905: LD_INT 0
35907: PPUSH
35908: CALL 37630 0 3
// end ;
35912: GO 35866
35914: POP
35915: POP
// if fishes then
35916: LD_VAR 0 7
35920: IFFALSE 35987
// for i = 1 to fishes do
35922: LD_ADDR_VAR 0 11
35926: PUSH
35927: DOUBLE
35928: LD_INT 1
35930: DEC
35931: ST_TO_ADDR
35932: LD_VAR 0 7
35936: PUSH
35937: FOR_TO
35938: IFFALSE 35985
// begin hc_class = 20 ;
35940: LD_ADDR_OWVAR 28
35944: PUSH
35945: LD_INT 20
35947: ST_TO_ADDR
// hc_gallery =  ;
35948: LD_ADDR_OWVAR 33
35952: PUSH
35953: LD_STRING 
35955: ST_TO_ADDR
// animal := CreateHuman ;
35956: LD_ADDR_VAR 0 12
35960: PUSH
35961: CALL_OW 44
35965: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35966: LD_VAR 0 12
35970: PPUSH
35971: LD_VAR 0 9
35975: PPUSH
35976: LD_INT 0
35978: PPUSH
35979: CALL 37630 0 3
// end ;
35983: GO 35937
35985: POP
35986: POP
// end ;
35987: LD_VAR 0 10
35991: RET
// export function WantHeal ( sci , unit ) ; begin
35992: LD_INT 0
35994: PPUSH
// if GetTaskList ( sci ) > 0 then
35995: LD_VAR 0 1
35999: PPUSH
36000: CALL_OW 437
36004: PUSH
36005: LD_INT 0
36007: GREATER
36008: IFFALSE 36080
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36010: LD_VAR 0 1
36014: PPUSH
36015: CALL_OW 437
36019: PUSH
36020: LD_INT 1
36022: ARRAY
36023: PUSH
36024: LD_INT 1
36026: ARRAY
36027: PUSH
36028: LD_STRING l
36030: EQUAL
36031: IFFALSE 36058
36033: PUSH
36034: LD_VAR 0 1
36038: PPUSH
36039: CALL_OW 437
36043: PUSH
36044: LD_INT 1
36046: ARRAY
36047: PUSH
36048: LD_INT 4
36050: ARRAY
36051: PUSH
36052: LD_VAR 0 2
36056: EQUAL
36057: AND
36058: IFFALSE 36070
// result := true else
36060: LD_ADDR_VAR 0 3
36064: PUSH
36065: LD_INT 1
36067: ST_TO_ADDR
36068: GO 36078
// result := false ;
36070: LD_ADDR_VAR 0 3
36074: PUSH
36075: LD_INT 0
36077: ST_TO_ADDR
// end else
36078: GO 36088
// result := false ;
36080: LD_ADDR_VAR 0 3
36084: PUSH
36085: LD_INT 0
36087: ST_TO_ADDR
// end ;
36088: LD_VAR 0 3
36092: RET
// export function HealTarget ( sci ) ; begin
36093: LD_INT 0
36095: PPUSH
// if not sci then
36096: LD_VAR 0 1
36100: NOT
36101: IFFALSE 36105
// exit ;
36103: GO 36170
// result := 0 ;
36105: LD_ADDR_VAR 0 2
36109: PUSH
36110: LD_INT 0
36112: ST_TO_ADDR
// if GetTaskList ( sci ) then
36113: LD_VAR 0 1
36117: PPUSH
36118: CALL_OW 437
36122: IFFALSE 36170
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 437
36133: PUSH
36134: LD_INT 1
36136: ARRAY
36137: PUSH
36138: LD_INT 1
36140: ARRAY
36141: PUSH
36142: LD_STRING l
36144: EQUAL
36145: IFFALSE 36170
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36147: LD_ADDR_VAR 0 2
36151: PUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: CALL_OW 437
36161: PUSH
36162: LD_INT 1
36164: ARRAY
36165: PUSH
36166: LD_INT 4
36168: ARRAY
36169: ST_TO_ADDR
// end ;
36170: LD_VAR 0 2
36174: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36175: LD_INT 0
36177: PPUSH
36178: PPUSH
36179: PPUSH
36180: PPUSH
// if not base_units then
36181: LD_VAR 0 1
36185: NOT
36186: IFFALSE 36190
// exit ;
36188: GO 36277
// result := false ;
36190: LD_ADDR_VAR 0 2
36194: PUSH
36195: LD_INT 0
36197: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36198: LD_ADDR_VAR 0 5
36202: PUSH
36203: LD_VAR 0 1
36207: PPUSH
36208: LD_INT 21
36210: PUSH
36211: LD_INT 3
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PPUSH
36218: CALL_OW 72
36222: ST_TO_ADDR
// if not tmp then
36223: LD_VAR 0 5
36227: NOT
36228: IFFALSE 36232
// exit ;
36230: GO 36277
// for i in tmp do
36232: LD_ADDR_VAR 0 3
36236: PUSH
36237: LD_VAR 0 5
36241: PUSH
36242: FOR_IN
36243: IFFALSE 36275
// begin result := EnemyInRange ( i , 22 ) ;
36245: LD_ADDR_VAR 0 2
36249: PUSH
36250: LD_VAR 0 3
36254: PPUSH
36255: LD_INT 22
36257: PPUSH
36258: CALL 33692 0 2
36262: ST_TO_ADDR
// if result then
36263: LD_VAR 0 2
36267: IFFALSE 36273
// exit ;
36269: POP
36270: POP
36271: GO 36277
// end ;
36273: GO 36242
36275: POP
36276: POP
// end ;
36277: LD_VAR 0 2
36281: RET
// export function FilterByTag ( units , tag ) ; begin
36282: LD_INT 0
36284: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36285: LD_ADDR_VAR 0 3
36289: PUSH
36290: LD_VAR 0 1
36294: PPUSH
36295: LD_INT 120
36297: PUSH
36298: LD_VAR 0 2
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PPUSH
36307: CALL_OW 72
36311: ST_TO_ADDR
// end ;
36312: LD_VAR 0 3
36316: RET
// export function IsDriver ( un ) ; begin
36317: LD_INT 0
36319: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36320: LD_ADDR_VAR 0 2
36324: PUSH
36325: LD_VAR 0 1
36329: PUSH
36330: LD_INT 55
36332: PUSH
36333: EMPTY
36334: LIST
36335: PPUSH
36336: CALL_OW 69
36340: IN
36341: ST_TO_ADDR
// end ;
36342: LD_VAR 0 2
36346: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36347: LD_INT 0
36349: PPUSH
36350: PPUSH
// list := [ ] ;
36351: LD_ADDR_VAR 0 5
36355: PUSH
36356: EMPTY
36357: ST_TO_ADDR
// case d of 0 :
36358: LD_VAR 0 3
36362: PUSH
36363: LD_INT 0
36365: DOUBLE
36366: EQUAL
36367: IFTRUE 36371
36369: GO 36504
36371: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36372: LD_ADDR_VAR 0 5
36376: PUSH
36377: LD_VAR 0 1
36381: PUSH
36382: LD_INT 4
36384: MINUS
36385: PUSH
36386: LD_VAR 0 2
36390: PUSH
36391: LD_INT 4
36393: MINUS
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: PUSH
36403: LD_VAR 0 1
36407: PUSH
36408: LD_INT 3
36410: MINUS
36411: PUSH
36412: LD_VAR 0 2
36416: PUSH
36417: LD_INT 1
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: LIST
36424: PUSH
36425: LD_VAR 0 1
36429: PUSH
36430: LD_INT 4
36432: PLUS
36433: PUSH
36434: LD_VAR 0 2
36438: PUSH
36439: LD_INT 4
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: PUSH
36447: LD_VAR 0 1
36451: PUSH
36452: LD_INT 3
36454: PLUS
36455: PUSH
36456: LD_VAR 0 2
36460: PUSH
36461: LD_INT 3
36463: PLUS
36464: PUSH
36465: LD_INT 5
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: PUSH
36473: LD_VAR 0 1
36477: PUSH
36478: LD_VAR 0 2
36482: PUSH
36483: LD_INT 4
36485: PLUS
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: ST_TO_ADDR
// end ; 1 :
36502: GO 37202
36504: LD_INT 1
36506: DOUBLE
36507: EQUAL
36508: IFTRUE 36512
36510: GO 36645
36512: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36513: LD_ADDR_VAR 0 5
36517: PUSH
36518: LD_VAR 0 1
36522: PUSH
36523: LD_VAR 0 2
36527: PUSH
36528: LD_INT 4
36530: MINUS
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: PUSH
36540: LD_VAR 0 1
36544: PUSH
36545: LD_INT 3
36547: MINUS
36548: PUSH
36549: LD_VAR 0 2
36553: PUSH
36554: LD_INT 3
36556: MINUS
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: PUSH
36566: LD_VAR 0 1
36570: PUSH
36571: LD_INT 4
36573: MINUS
36574: PUSH
36575: LD_VAR 0 2
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: PUSH
36588: LD_VAR 0 1
36592: PUSH
36593: LD_VAR 0 2
36597: PUSH
36598: LD_INT 3
36600: PLUS
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: PUSH
36610: LD_VAR 0 1
36614: PUSH
36615: LD_INT 4
36617: PLUS
36618: PUSH
36619: LD_VAR 0 2
36623: PUSH
36624: LD_INT 4
36626: PLUS
36627: PUSH
36628: LD_INT 5
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: ST_TO_ADDR
// end ; 2 :
36643: GO 37202
36645: LD_INT 2
36647: DOUBLE
36648: EQUAL
36649: IFTRUE 36653
36651: GO 36782
36653: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36654: LD_ADDR_VAR 0 5
36658: PUSH
36659: LD_VAR 0 1
36663: PUSH
36664: LD_VAR 0 2
36668: PUSH
36669: LD_INT 3
36671: MINUS
36672: PUSH
36673: LD_INT 3
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: PUSH
36681: LD_VAR 0 1
36685: PUSH
36686: LD_INT 4
36688: PLUS
36689: PUSH
36690: LD_VAR 0 2
36694: PUSH
36695: LD_INT 4
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: LD_VAR 0 1
36707: PUSH
36708: LD_VAR 0 2
36712: PUSH
36713: LD_INT 4
36715: PLUS
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: PUSH
36725: LD_VAR 0 1
36729: PUSH
36730: LD_INT 3
36732: MINUS
36733: PUSH
36734: LD_VAR 0 2
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: PUSH
36747: LD_VAR 0 1
36751: PUSH
36752: LD_INT 4
36754: MINUS
36755: PUSH
36756: LD_VAR 0 2
36760: PUSH
36761: LD_INT 4
36763: MINUS
36764: PUSH
36765: LD_INT 2
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// end ; 3 :
36780: GO 37202
36782: LD_INT 3
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36790
36788: GO 36923
36790: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36791: LD_ADDR_VAR 0 5
36795: PUSH
36796: LD_VAR 0 1
36800: PUSH
36801: LD_INT 3
36803: PLUS
36804: PUSH
36805: LD_VAR 0 2
36809: PUSH
36810: LD_INT 4
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: PUSH
36818: LD_VAR 0 1
36822: PUSH
36823: LD_INT 4
36825: PLUS
36826: PUSH
36827: LD_VAR 0 2
36831: PUSH
36832: LD_INT 4
36834: PLUS
36835: PUSH
36836: LD_INT 5
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: LD_VAR 0 1
36848: PUSH
36849: LD_INT 4
36851: MINUS
36852: PUSH
36853: LD_VAR 0 2
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: PUSH
36866: LD_VAR 0 1
36870: PUSH
36871: LD_VAR 0 2
36875: PUSH
36876: LD_INT 4
36878: MINUS
36879: PUSH
36880: LD_INT 3
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: PUSH
36888: LD_VAR 0 1
36892: PUSH
36893: LD_INT 3
36895: MINUS
36896: PUSH
36897: LD_VAR 0 2
36901: PUSH
36902: LD_INT 3
36904: MINUS
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: ST_TO_ADDR
// end ; 4 :
36921: GO 37202
36923: LD_INT 4
36925: DOUBLE
36926: EQUAL
36927: IFTRUE 36931
36929: GO 37064
36931: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36932: LD_ADDR_VAR 0 5
36936: PUSH
36937: LD_VAR 0 1
36941: PUSH
36942: LD_VAR 0 2
36946: PUSH
36947: LD_INT 4
36949: PLUS
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: PUSH
36959: LD_VAR 0 1
36963: PUSH
36964: LD_INT 3
36966: PLUS
36967: PUSH
36968: LD_VAR 0 2
36972: PUSH
36973: LD_INT 3
36975: PLUS
36976: PUSH
36977: LD_INT 5
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 4
36992: PLUS
36993: PUSH
36994: LD_VAR 0 2
36998: PUSH
36999: LD_INT 4
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: LD_VAR 0 1
37011: PUSH
37012: LD_VAR 0 2
37016: PUSH
37017: LD_INT 3
37019: MINUS
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: PUSH
37029: LD_VAR 0 1
37033: PUSH
37034: LD_INT 4
37036: MINUS
37037: PUSH
37038: LD_VAR 0 2
37042: PUSH
37043: LD_INT 4
37045: MINUS
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// end ; 5 :
37062: GO 37202
37064: LD_INT 5
37066: DOUBLE
37067: EQUAL
37068: IFTRUE 37072
37070: GO 37201
37072: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37073: LD_ADDR_VAR 0 5
37077: PUSH
37078: LD_VAR 0 1
37082: PUSH
37083: LD_INT 4
37085: MINUS
37086: PUSH
37087: LD_VAR 0 2
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: PUSH
37100: LD_VAR 0 1
37104: PUSH
37105: LD_VAR 0 2
37109: PUSH
37110: LD_INT 4
37112: MINUS
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: PUSH
37122: LD_VAR 0 1
37126: PUSH
37127: LD_INT 4
37129: PLUS
37130: PUSH
37131: LD_VAR 0 2
37135: PUSH
37136: LD_INT 4
37138: PLUS
37139: PUSH
37140: LD_INT 5
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: PUSH
37148: LD_VAR 0 1
37152: PUSH
37153: LD_INT 3
37155: PLUS
37156: PUSH
37157: LD_VAR 0 2
37161: PUSH
37162: LD_INT 4
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: PUSH
37170: LD_VAR 0 1
37174: PUSH
37175: LD_VAR 0 2
37179: PUSH
37180: LD_INT 3
37182: PLUS
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// end ; end ;
37199: GO 37202
37201: POP
// result := list ;
37202: LD_ADDR_VAR 0 4
37206: PUSH
37207: LD_VAR 0 5
37211: ST_TO_ADDR
// end ;
37212: LD_VAR 0 4
37216: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37217: LD_INT 0
37219: PPUSH
37220: PPUSH
37221: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37222: LD_VAR 0 1
37226: NOT
37227: IFTRUE 37255
37229: PUSH
37230: LD_VAR 0 2
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: LD_INT 4
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: IN
37253: NOT
37254: OR
37255: IFFALSE 37259
// exit ;
37257: GO 37342
// tmp := [ ] ;
37259: LD_ADDR_VAR 0 5
37263: PUSH
37264: EMPTY
37265: ST_TO_ADDR
// for i in units do
37266: LD_ADDR_VAR 0 4
37270: PUSH
37271: LD_VAR 0 1
37275: PUSH
37276: FOR_IN
37277: IFFALSE 37311
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37279: LD_ADDR_VAR 0 5
37283: PUSH
37284: LD_VAR 0 5
37288: PPUSH
37289: LD_VAR 0 4
37293: PPUSH
37294: LD_VAR 0 2
37298: PPUSH
37299: CALL_OW 259
37303: PPUSH
37304: CALL 38737 0 2
37308: ST_TO_ADDR
37309: GO 37276
37311: POP
37312: POP
// if not tmp then
37313: LD_VAR 0 5
37317: NOT
37318: IFFALSE 37322
// exit ;
37320: GO 37342
// result := SortListByListDesc ( units , tmp ) ;
37322: LD_ADDR_VAR 0 3
37326: PUSH
37327: LD_VAR 0 1
37331: PPUSH
37332: LD_VAR 0 5
37336: PPUSH
37337: CALL_OW 77
37341: ST_TO_ADDR
// end ;
37342: LD_VAR 0 3
37346: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37347: LD_INT 0
37349: PPUSH
37350: PPUSH
37351: PPUSH
// result := false ;
37352: LD_ADDR_VAR 0 3
37356: PUSH
37357: LD_INT 0
37359: ST_TO_ADDR
// if not building then
37360: LD_VAR 0 2
37364: NOT
37365: IFFALSE 37369
// exit ;
37367: GO 37513
// x := GetX ( building ) ;
37369: LD_ADDR_VAR 0 4
37373: PUSH
37374: LD_VAR 0 2
37378: PPUSH
37379: CALL_OW 250
37383: ST_TO_ADDR
// y := GetY ( building ) ;
37384: LD_ADDR_VAR 0 5
37388: PUSH
37389: LD_VAR 0 2
37393: PPUSH
37394: CALL_OW 251
37398: ST_TO_ADDR
// if not x or not y then
37399: LD_VAR 0 4
37403: NOT
37404: IFTRUE 37413
37406: PUSH
37407: LD_VAR 0 5
37411: NOT
37412: OR
37413: IFFALSE 37417
// exit ;
37415: GO 37513
// if GetTaskList ( unit ) then
37417: LD_VAR 0 1
37421: PPUSH
37422: CALL_OW 437
37426: IFFALSE 37513
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37428: LD_STRING e
37430: PUSH
37431: LD_VAR 0 1
37435: PPUSH
37436: CALL_OW 437
37440: PUSH
37441: LD_INT 1
37443: ARRAY
37444: PUSH
37445: LD_INT 1
37447: ARRAY
37448: EQUAL
37449: IFFALSE 37476
37451: PUSH
37452: LD_VAR 0 4
37456: PUSH
37457: LD_VAR 0 1
37461: PPUSH
37462: CALL_OW 437
37466: PUSH
37467: LD_INT 1
37469: ARRAY
37470: PUSH
37471: LD_INT 2
37473: ARRAY
37474: EQUAL
37475: AND
37476: IFFALSE 37503
37478: PUSH
37479: LD_VAR 0 5
37483: PUSH
37484: LD_VAR 0 1
37488: PPUSH
37489: CALL_OW 437
37493: PUSH
37494: LD_INT 1
37496: ARRAY
37497: PUSH
37498: LD_INT 3
37500: ARRAY
37501: EQUAL
37502: AND
37503: IFFALSE 37513
// result := true end ;
37505: LD_ADDR_VAR 0 3
37509: PUSH
37510: LD_INT 1
37512: ST_TO_ADDR
// end ;
37513: LD_VAR 0 3
37517: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37518: LD_INT 0
37520: PPUSH
// result := false ;
37521: LD_ADDR_VAR 0 4
37525: PUSH
37526: LD_INT 0
37528: ST_TO_ADDR
// if GetTaskList ( unit ) then
37529: LD_VAR 0 1
37533: PPUSH
37534: CALL_OW 437
37538: IFFALSE 37625
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37540: LD_STRING M
37542: PUSH
37543: LD_VAR 0 1
37547: PPUSH
37548: CALL_OW 437
37552: PUSH
37553: LD_INT 1
37555: ARRAY
37556: PUSH
37557: LD_INT 1
37559: ARRAY
37560: EQUAL
37561: IFFALSE 37588
37563: PUSH
37564: LD_VAR 0 2
37568: PUSH
37569: LD_VAR 0 1
37573: PPUSH
37574: CALL_OW 437
37578: PUSH
37579: LD_INT 1
37581: ARRAY
37582: PUSH
37583: LD_INT 2
37585: ARRAY
37586: EQUAL
37587: AND
37588: IFFALSE 37615
37590: PUSH
37591: LD_VAR 0 3
37595: PUSH
37596: LD_VAR 0 1
37600: PPUSH
37601: CALL_OW 437
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: PUSH
37610: LD_INT 3
37612: ARRAY
37613: EQUAL
37614: AND
37615: IFFALSE 37625
// result := true ;
37617: LD_ADDR_VAR 0 4
37621: PUSH
37622: LD_INT 1
37624: ST_TO_ADDR
// end ; end ;
37625: LD_VAR 0 4
37629: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37630: LD_INT 0
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
// if not unit or not area then
37636: LD_VAR 0 1
37640: NOT
37641: IFTRUE 37650
37643: PUSH
37644: LD_VAR 0 2
37648: NOT
37649: OR
37650: IFFALSE 37654
// exit ;
37652: GO 37830
// tmp := AreaToList ( area , i ) ;
37654: LD_ADDR_VAR 0 6
37658: PUSH
37659: LD_VAR 0 2
37663: PPUSH
37664: LD_VAR 0 5
37668: PPUSH
37669: CALL_OW 517
37673: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37674: LD_ADDR_VAR 0 5
37678: PUSH
37679: DOUBLE
37680: LD_INT 1
37682: DEC
37683: ST_TO_ADDR
37684: LD_VAR 0 6
37688: PUSH
37689: LD_INT 1
37691: ARRAY
37692: PUSH
37693: FOR_TO
37694: IFFALSE 37828
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37696: LD_ADDR_VAR 0 7
37700: PUSH
37701: LD_VAR 0 6
37705: PUSH
37706: LD_INT 1
37708: ARRAY
37709: PUSH
37710: LD_VAR 0 5
37714: ARRAY
37715: PUSH
37716: LD_VAR 0 6
37720: PUSH
37721: LD_INT 2
37723: ARRAY
37724: PUSH
37725: LD_VAR 0 5
37729: ARRAY
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37735: LD_INT 92
37737: PUSH
37738: LD_VAR 0 7
37742: PUSH
37743: LD_INT 1
37745: ARRAY
37746: PUSH
37747: LD_VAR 0 7
37751: PUSH
37752: LD_INT 2
37754: ARRAY
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: PPUSH
37765: CALL_OW 69
37769: PUSH
37770: LD_INT 0
37772: EQUAL
37773: IFFALSE 37826
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37775: LD_VAR 0 1
37779: PPUSH
37780: LD_VAR 0 7
37784: PUSH
37785: LD_INT 1
37787: ARRAY
37788: PPUSH
37789: LD_VAR 0 7
37793: PUSH
37794: LD_INT 2
37796: ARRAY
37797: PPUSH
37798: LD_VAR 0 3
37802: PPUSH
37803: CALL_OW 48
// result := IsPlaced ( unit ) ;
37807: LD_ADDR_VAR 0 4
37811: PUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL_OW 305
37821: ST_TO_ADDR
// exit ;
37822: POP
37823: POP
37824: GO 37830
// end ; end ;
37826: GO 37693
37828: POP
37829: POP
// end ;
37830: LD_VAR 0 4
37834: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37835: LD_INT 0
37837: PPUSH
37838: PPUSH
37839: PPUSH
// if not side or side > 8 then
37840: LD_VAR 0 1
37844: NOT
37845: IFTRUE 37857
37847: PUSH
37848: LD_VAR 0 1
37852: PUSH
37853: LD_INT 8
37855: GREATER
37856: OR
37857: IFFALSE 37861
// exit ;
37859: GO 38048
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37861: LD_ADDR_VAR 0 4
37865: PUSH
37866: LD_INT 22
37868: PUSH
37869: LD_VAR 0 1
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 21
37880: PUSH
37881: LD_INT 3
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PPUSH
37892: CALL_OW 69
37896: ST_TO_ADDR
// if not tmp then
37897: LD_VAR 0 4
37901: NOT
37902: IFFALSE 37906
// exit ;
37904: GO 38048
// enable_addtolog := true ;
37906: LD_ADDR_OWVAR 81
37910: PUSH
37911: LD_INT 1
37913: ST_TO_ADDR
// AddToLog ( [ ) ;
37914: LD_STRING [
37916: PPUSH
37917: CALL_OW 561
// for i in tmp do
37921: LD_ADDR_VAR 0 3
37925: PUSH
37926: LD_VAR 0 4
37930: PUSH
37931: FOR_IN
37932: IFFALSE 38039
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37934: LD_STRING [
37936: PUSH
37937: LD_VAR 0 3
37941: PPUSH
37942: CALL_OW 266
37946: STR
37947: PUSH
37948: LD_STRING , 
37950: STR
37951: PUSH
37952: LD_VAR 0 3
37956: PPUSH
37957: CALL_OW 250
37961: STR
37962: PUSH
37963: LD_STRING , 
37965: STR
37966: PUSH
37967: LD_VAR 0 3
37971: PPUSH
37972: CALL_OW 251
37976: STR
37977: PUSH
37978: LD_STRING , 
37980: STR
37981: PUSH
37982: LD_VAR 0 3
37986: PPUSH
37987: CALL_OW 254
37991: STR
37992: PUSH
37993: LD_STRING , 
37995: STR
37996: PUSH
37997: LD_VAR 0 3
38001: PPUSH
38002: LD_INT 1
38004: PPUSH
38005: CALL_OW 268
38009: STR
38010: PUSH
38011: LD_STRING , 
38013: STR
38014: PUSH
38015: LD_VAR 0 3
38019: PPUSH
38020: LD_INT 2
38022: PPUSH
38023: CALL_OW 268
38027: STR
38028: PUSH
38029: LD_STRING ],
38031: STR
38032: PPUSH
38033: CALL_OW 561
// end ;
38037: GO 37931
38039: POP
38040: POP
// AddToLog ( ]; ) ;
38041: LD_STRING ];
38043: PPUSH
38044: CALL_OW 561
// end ;
38048: LD_VAR 0 2
38052: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38053: LD_INT 0
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
// if not area or not rate or not max then
38060: LD_VAR 0 1
38064: NOT
38065: IFTRUE 38074
38067: PUSH
38068: LD_VAR 0 2
38072: NOT
38073: OR
38074: IFTRUE 38083
38076: PUSH
38077: LD_VAR 0 4
38081: NOT
38082: OR
38083: IFFALSE 38087
// exit ;
38085: GO 38276
// while 1 do
38087: LD_INT 1
38089: IFFALSE 38276
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38091: LD_ADDR_VAR 0 9
38095: PUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: LD_INT 1
38103: PPUSH
38104: CALL_OW 287
38108: PUSH
38109: LD_INT 10
38111: MUL
38112: ST_TO_ADDR
// r := rate / 10 ;
38113: LD_ADDR_VAR 0 7
38117: PUSH
38118: LD_VAR 0 2
38122: PUSH
38123: LD_INT 10
38125: DIVREAL
38126: ST_TO_ADDR
// time := 1 1$00 ;
38127: LD_ADDR_VAR 0 8
38131: PUSH
38132: LD_INT 2100
38134: ST_TO_ADDR
// if amount < min then
38135: LD_VAR 0 9
38139: PUSH
38140: LD_VAR 0 3
38144: LESS
38145: IFFALSE 38163
// r := r * 2 else
38147: LD_ADDR_VAR 0 7
38151: PUSH
38152: LD_VAR 0 7
38156: PUSH
38157: LD_INT 2
38159: MUL
38160: ST_TO_ADDR
38161: GO 38189
// if amount > max then
38163: LD_VAR 0 9
38167: PUSH
38168: LD_VAR 0 4
38172: GREATER
38173: IFFALSE 38189
// r := r / 2 ;
38175: LD_ADDR_VAR 0 7
38179: PUSH
38180: LD_VAR 0 7
38184: PUSH
38185: LD_INT 2
38187: DIVREAL
38188: ST_TO_ADDR
// time := time / r ;
38189: LD_ADDR_VAR 0 8
38193: PUSH
38194: LD_VAR 0 8
38198: PUSH
38199: LD_VAR 0 7
38203: DIVREAL
38204: ST_TO_ADDR
// if time < 0 then
38205: LD_VAR 0 8
38209: PUSH
38210: LD_INT 0
38212: LESS
38213: IFFALSE 38230
// time := time * - 1 ;
38215: LD_ADDR_VAR 0 8
38219: PUSH
38220: LD_VAR 0 8
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: MUL
38229: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38230: LD_VAR 0 8
38234: PUSH
38235: LD_INT 35
38237: PPUSH
38238: LD_INT 875
38240: PPUSH
38241: CALL_OW 12
38245: PLUS
38246: PPUSH
38247: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38251: LD_INT 1
38253: PPUSH
38254: LD_INT 5
38256: PPUSH
38257: CALL_OW 12
38261: PPUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: LD_INT 1
38269: PPUSH
38270: CALL_OW 55
// end ;
38274: GO 38087
// end ;
38276: LD_VAR 0 5
38280: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38281: LD_INT 0
38283: PPUSH
38284: PPUSH
38285: PPUSH
38286: PPUSH
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
// if not turrets or not factories then
38291: LD_VAR 0 1
38295: NOT
38296: IFTRUE 38305
38298: PUSH
38299: LD_VAR 0 2
38303: NOT
38304: OR
38305: IFFALSE 38309
// exit ;
38307: GO 38616
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38309: LD_ADDR_VAR 0 10
38313: PUSH
38314: LD_INT 5
38316: PUSH
38317: LD_INT 6
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: LD_INT 4
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: LD_INT 5
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 24
38351: PUSH
38352: LD_INT 25
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 23
38361: PUSH
38362: LD_INT 27
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 42
38375: PUSH
38376: LD_INT 43
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 44
38385: PUSH
38386: LD_INT 46
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 45
38395: PUSH
38396: LD_INT 47
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: ST_TO_ADDR
// result := [ ] ;
38413: LD_ADDR_VAR 0 3
38417: PUSH
38418: EMPTY
38419: ST_TO_ADDR
// for i in turrets do
38420: LD_ADDR_VAR 0 4
38424: PUSH
38425: LD_VAR 0 1
38429: PUSH
38430: FOR_IN
38431: IFFALSE 38614
// begin nat := GetNation ( i ) ;
38433: LD_ADDR_VAR 0 7
38437: PUSH
38438: LD_VAR 0 4
38442: PPUSH
38443: CALL_OW 248
38447: ST_TO_ADDR
// weapon := 0 ;
38448: LD_ADDR_VAR 0 8
38452: PUSH
38453: LD_INT 0
38455: ST_TO_ADDR
// if not nat then
38456: LD_VAR 0 7
38460: NOT
38461: IFFALSE 38465
// continue ;
38463: GO 38430
// for j in list [ nat ] do
38465: LD_ADDR_VAR 0 5
38469: PUSH
38470: LD_VAR 0 10
38474: PUSH
38475: LD_VAR 0 7
38479: ARRAY
38480: PUSH
38481: FOR_IN
38482: IFFALSE 38523
// if GetBWeapon ( i ) = j [ 1 ] then
38484: LD_VAR 0 4
38488: PPUSH
38489: CALL_OW 269
38493: PUSH
38494: LD_VAR 0 5
38498: PUSH
38499: LD_INT 1
38501: ARRAY
38502: EQUAL
38503: IFFALSE 38521
// begin weapon := j [ 2 ] ;
38505: LD_ADDR_VAR 0 8
38509: PUSH
38510: LD_VAR 0 5
38514: PUSH
38515: LD_INT 2
38517: ARRAY
38518: ST_TO_ADDR
// break ;
38519: GO 38523
// end ;
38521: GO 38481
38523: POP
38524: POP
// if not weapon then
38525: LD_VAR 0 8
38529: NOT
38530: IFFALSE 38534
// continue ;
38532: GO 38430
// for k in factories do
38534: LD_ADDR_VAR 0 6
38538: PUSH
38539: LD_VAR 0 2
38543: PUSH
38544: FOR_IN
38545: IFFALSE 38610
// begin weapons := AvailableWeaponList ( k ) ;
38547: LD_ADDR_VAR 0 9
38551: PUSH
38552: LD_VAR 0 6
38556: PPUSH
38557: CALL_OW 478
38561: ST_TO_ADDR
// if not weapons then
38562: LD_VAR 0 9
38566: NOT
38567: IFFALSE 38571
// continue ;
38569: GO 38544
// if weapon in weapons then
38571: LD_VAR 0 8
38575: PUSH
38576: LD_VAR 0 9
38580: IN
38581: IFFALSE 38608
// begin result := [ i , weapon ] ;
38583: LD_ADDR_VAR 0 3
38587: PUSH
38588: LD_VAR 0 4
38592: PUSH
38593: LD_VAR 0 8
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: ST_TO_ADDR
// exit ;
38602: POP
38603: POP
38604: POP
38605: POP
38606: GO 38616
// end ; end ;
38608: GO 38544
38610: POP
38611: POP
// end ;
38612: GO 38430
38614: POP
38615: POP
// end ;
38616: LD_VAR 0 3
38620: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38621: LD_INT 0
38623: PPUSH
// if not side or side > 8 then
38624: LD_VAR 0 3
38628: NOT
38629: IFTRUE 38641
38631: PUSH
38632: LD_VAR 0 3
38636: PUSH
38637: LD_INT 8
38639: GREATER
38640: OR
38641: IFFALSE 38645
// exit ;
38643: GO 38704
// if not range then
38645: LD_VAR 0 4
38649: NOT
38650: IFFALSE 38661
// range := - 12 ;
38652: LD_ADDR_VAR 0 4
38656: PUSH
38657: LD_INT 12
38659: NEG
38660: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38661: LD_VAR 0 1
38665: PPUSH
38666: LD_VAR 0 2
38670: PPUSH
38671: LD_VAR 0 3
38675: PPUSH
38676: LD_VAR 0 4
38680: PPUSH
38681: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38685: LD_VAR 0 1
38689: PPUSH
38690: LD_VAR 0 2
38694: PPUSH
38695: LD_VAR 0 3
38699: PPUSH
38700: CALL_OW 331
// end ;
38704: LD_VAR 0 5
38708: RET
// export function Video ( mode ) ; begin
38709: LD_INT 0
38711: PPUSH
// ingame_video = mode ;
38712: LD_ADDR_OWVAR 52
38716: PUSH
38717: LD_VAR 0 1
38721: ST_TO_ADDR
// interface_hidden = mode ;
38722: LD_ADDR_OWVAR 54
38726: PUSH
38727: LD_VAR 0 1
38731: ST_TO_ADDR
// end ;
38732: LD_VAR 0 2
38736: RET
// export function Join ( array , element ) ; begin
38737: LD_INT 0
38739: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38740: LD_ADDR_VAR 0 3
38744: PUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: LD_VAR 0 1
38754: PUSH
38755: LD_INT 1
38757: PLUS
38758: PPUSH
38759: LD_VAR 0 2
38763: PPUSH
38764: CALL_OW 1
38768: ST_TO_ADDR
// end ;
38769: LD_VAR 0 3
38773: RET
// export function JoinUnion ( array , element ) ; begin
38774: LD_INT 0
38776: PPUSH
// result := array union element ;
38777: LD_ADDR_VAR 0 3
38781: PUSH
38782: LD_VAR 0 1
38786: PUSH
38787: LD_VAR 0 2
38791: UNION
38792: ST_TO_ADDR
// end ;
38793: LD_VAR 0 3
38797: RET
// export function GetBehemoths ( side ) ; begin
38798: LD_INT 0
38800: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38801: LD_ADDR_VAR 0 2
38805: PUSH
38806: LD_INT 22
38808: PUSH
38809: LD_VAR 0 1
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 31
38820: PUSH
38821: LD_INT 25
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PPUSH
38832: CALL_OW 69
38836: ST_TO_ADDR
// end ;
38837: LD_VAR 0 2
38841: RET
// export function Shuffle ( array ) ; var i , index ; begin
38842: LD_INT 0
38844: PPUSH
38845: PPUSH
38846: PPUSH
// result := [ ] ;
38847: LD_ADDR_VAR 0 2
38851: PUSH
38852: EMPTY
38853: ST_TO_ADDR
// if not array then
38854: LD_VAR 0 1
38858: NOT
38859: IFFALSE 38863
// exit ;
38861: GO 38962
// Randomize ;
38863: CALL_OW 10
// for i = array downto 1 do
38867: LD_ADDR_VAR 0 3
38871: PUSH
38872: DOUBLE
38873: LD_VAR 0 1
38877: INC
38878: ST_TO_ADDR
38879: LD_INT 1
38881: PUSH
38882: FOR_DOWNTO
38883: IFFALSE 38960
// begin index := rand ( 1 , array ) ;
38885: LD_ADDR_VAR 0 4
38889: PUSH
38890: LD_INT 1
38892: PPUSH
38893: LD_VAR 0 1
38897: PPUSH
38898: CALL_OW 12
38902: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38903: LD_ADDR_VAR 0 2
38907: PUSH
38908: LD_VAR 0 2
38912: PPUSH
38913: LD_VAR 0 2
38917: PUSH
38918: LD_INT 1
38920: PLUS
38921: PPUSH
38922: LD_VAR 0 1
38926: PUSH
38927: LD_VAR 0 4
38931: ARRAY
38932: PPUSH
38933: CALL_OW 2
38937: ST_TO_ADDR
// array := Delete ( array , index ) ;
38938: LD_ADDR_VAR 0 1
38942: PUSH
38943: LD_VAR 0 1
38947: PPUSH
38948: LD_VAR 0 4
38952: PPUSH
38953: CALL_OW 3
38957: ST_TO_ADDR
// end ;
38958: GO 38882
38960: POP
38961: POP
// end ;
38962: LD_VAR 0 2
38966: RET
// export function GetBaseMaterials ( base ) ; begin
38967: LD_INT 0
38969: PPUSH
// result := [ 0 , 0 , 0 ] ;
38970: LD_ADDR_VAR 0 2
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: ST_TO_ADDR
// if not base then
38989: LD_VAR 0 1
38993: NOT
38994: IFFALSE 38998
// exit ;
38996: GO 39047
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38998: LD_ADDR_VAR 0 2
39002: PUSH
39003: LD_VAR 0 1
39007: PPUSH
39008: LD_INT 1
39010: PPUSH
39011: CALL_OW 275
39015: PUSH
39016: LD_VAR 0 1
39020: PPUSH
39021: LD_INT 2
39023: PPUSH
39024: CALL_OW 275
39028: PUSH
39029: LD_VAR 0 1
39033: PPUSH
39034: LD_INT 3
39036: PPUSH
39037: CALL_OW 275
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: ST_TO_ADDR
// end ;
39047: LD_VAR 0 2
39051: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39052: LD_INT 0
39054: PPUSH
39055: PPUSH
// result := array ;
39056: LD_ADDR_VAR 0 3
39060: PUSH
39061: LD_VAR 0 1
39065: ST_TO_ADDR
// if size >= result then
39066: LD_VAR 0 2
39070: PUSH
39071: LD_VAR 0 3
39075: GREATEREQUAL
39076: IFFALSE 39080
// exit ;
39078: GO 39130
// if size then
39080: LD_VAR 0 2
39084: IFFALSE 39130
// for i := array downto size do
39086: LD_ADDR_VAR 0 4
39090: PUSH
39091: DOUBLE
39092: LD_VAR 0 1
39096: INC
39097: ST_TO_ADDR
39098: LD_VAR 0 2
39102: PUSH
39103: FOR_DOWNTO
39104: IFFALSE 39128
// result := Delete ( result , result ) ;
39106: LD_ADDR_VAR 0 3
39110: PUSH
39111: LD_VAR 0 3
39115: PPUSH
39116: LD_VAR 0 3
39120: PPUSH
39121: CALL_OW 3
39125: ST_TO_ADDR
39126: GO 39103
39128: POP
39129: POP
// end ;
39130: LD_VAR 0 3
39134: RET
// export function ComExit ( unit ) ; var tmp ; begin
39135: LD_INT 0
39137: PPUSH
39138: PPUSH
// if not IsInUnit ( unit ) then
39139: LD_VAR 0 1
39143: PPUSH
39144: CALL_OW 310
39148: NOT
39149: IFFALSE 39153
// exit ;
39151: GO 39213
// tmp := IsInUnit ( unit ) ;
39153: LD_ADDR_VAR 0 3
39157: PUSH
39158: LD_VAR 0 1
39162: PPUSH
39163: CALL_OW 310
39167: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39168: LD_VAR 0 3
39172: PPUSH
39173: CALL_OW 247
39177: PUSH
39178: LD_INT 2
39180: EQUAL
39181: IFFALSE 39194
// ComExitVehicle ( unit ) else
39183: LD_VAR 0 1
39187: PPUSH
39188: CALL_OW 121
39192: GO 39203
// ComExitBuilding ( unit ) ;
39194: LD_VAR 0 1
39198: PPUSH
39199: CALL_OW 122
// result := tmp ;
39203: LD_ADDR_VAR 0 2
39207: PUSH
39208: LD_VAR 0 3
39212: ST_TO_ADDR
// end ;
39213: LD_VAR 0 2
39217: RET
// export function ComExitAll ( units ) ; var i ; begin
39218: LD_INT 0
39220: PPUSH
39221: PPUSH
// if not units then
39222: LD_VAR 0 1
39226: NOT
39227: IFFALSE 39231
// exit ;
39229: GO 39257
// for i in units do
39231: LD_ADDR_VAR 0 3
39235: PUSH
39236: LD_VAR 0 1
39240: PUSH
39241: FOR_IN
39242: IFFALSE 39255
// ComExit ( i ) ;
39244: LD_VAR 0 3
39248: PPUSH
39249: CALL 39135 0 1
39253: GO 39241
39255: POP
39256: POP
// end ;
39257: LD_VAR 0 2
39261: RET
// export function ResetHc ; begin
39262: LD_INT 0
39264: PPUSH
// InitHc ;
39265: CALL_OW 19
// hc_importance := 0 ;
39269: LD_ADDR_OWVAR 32
39273: PUSH
39274: LD_INT 0
39276: ST_TO_ADDR
// end ;
39277: LD_VAR 0 1
39281: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39282: LD_INT 0
39284: PPUSH
39285: PPUSH
39286: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39287: LD_ADDR_VAR 0 6
39291: PUSH
39292: LD_VAR 0 1
39296: PUSH
39297: LD_VAR 0 3
39301: PLUS
39302: PUSH
39303: LD_INT 2
39305: DIV
39306: ST_TO_ADDR
// if _x < 0 then
39307: LD_VAR 0 6
39311: PUSH
39312: LD_INT 0
39314: LESS
39315: IFFALSE 39332
// _x := _x * - 1 ;
39317: LD_ADDR_VAR 0 6
39321: PUSH
39322: LD_VAR 0 6
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: MUL
39331: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39332: LD_ADDR_VAR 0 7
39336: PUSH
39337: LD_VAR 0 2
39341: PUSH
39342: LD_VAR 0 4
39346: PLUS
39347: PUSH
39348: LD_INT 2
39350: DIV
39351: ST_TO_ADDR
// if _y < 0 then
39352: LD_VAR 0 7
39356: PUSH
39357: LD_INT 0
39359: LESS
39360: IFFALSE 39377
// _y := _y * - 1 ;
39362: LD_ADDR_VAR 0 7
39366: PUSH
39367: LD_VAR 0 7
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: MUL
39376: ST_TO_ADDR
// result := [ _x , _y ] ;
39377: LD_ADDR_VAR 0 5
39381: PUSH
39382: LD_VAR 0 6
39386: PUSH
39387: LD_VAR 0 7
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: ST_TO_ADDR
// end ;
39396: LD_VAR 0 5
39400: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39401: LD_INT 0
39403: PPUSH
39404: PPUSH
39405: PPUSH
39406: PPUSH
// task := GetTaskList ( unit ) ;
39407: LD_ADDR_VAR 0 7
39411: PUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL_OW 437
39421: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39422: LD_VAR 0 7
39426: NOT
39427: IFFALSE 39446
39429: PUSH
39430: LD_VAR 0 1
39434: PPUSH
39435: LD_VAR 0 2
39439: PPUSH
39440: CALL_OW 308
39444: NOT
39445: AND
39446: IFFALSE 39450
// exit ;
39448: GO 39568
// if IsInArea ( unit , area ) then
39450: LD_VAR 0 1
39454: PPUSH
39455: LD_VAR 0 2
39459: PPUSH
39460: CALL_OW 308
39464: IFFALSE 39482
// begin ComMoveToArea ( unit , goAway ) ;
39466: LD_VAR 0 1
39470: PPUSH
39471: LD_VAR 0 3
39475: PPUSH
39476: CALL_OW 113
// exit ;
39480: GO 39568
// end ; if task [ 1 ] [ 1 ] <> M then
39482: LD_VAR 0 7
39486: PUSH
39487: LD_INT 1
39489: ARRAY
39490: PUSH
39491: LD_INT 1
39493: ARRAY
39494: PUSH
39495: LD_STRING M
39497: NONEQUAL
39498: IFFALSE 39502
// exit ;
39500: GO 39568
// x := task [ 1 ] [ 2 ] ;
39502: LD_ADDR_VAR 0 5
39506: PUSH
39507: LD_VAR 0 7
39511: PUSH
39512: LD_INT 1
39514: ARRAY
39515: PUSH
39516: LD_INT 2
39518: ARRAY
39519: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39520: LD_ADDR_VAR 0 6
39524: PUSH
39525: LD_VAR 0 7
39529: PUSH
39530: LD_INT 1
39532: ARRAY
39533: PUSH
39534: LD_INT 3
39536: ARRAY
39537: ST_TO_ADDR
// if InArea ( x , y , area ) then
39538: LD_VAR 0 5
39542: PPUSH
39543: LD_VAR 0 6
39547: PPUSH
39548: LD_VAR 0 2
39552: PPUSH
39553: CALL_OW 309
39557: IFFALSE 39568
// ComStop ( unit ) ;
39559: LD_VAR 0 1
39563: PPUSH
39564: CALL_OW 141
// end ;
39568: LD_VAR 0 4
39572: RET
// export function Abs ( value ) ; begin
39573: LD_INT 0
39575: PPUSH
// result := value ;
39576: LD_ADDR_VAR 0 2
39580: PUSH
39581: LD_VAR 0 1
39585: ST_TO_ADDR
// if value < 0 then
39586: LD_VAR 0 1
39590: PUSH
39591: LD_INT 0
39593: LESS
39594: IFFALSE 39611
// result := value * - 1 ;
39596: LD_ADDR_VAR 0 2
39600: PUSH
39601: LD_VAR 0 1
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: MUL
39610: ST_TO_ADDR
// end ;
39611: LD_VAR 0 2
39615: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39616: LD_INT 0
39618: PPUSH
39619: PPUSH
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
// if not unit or not building then
39626: LD_VAR 0 1
39630: NOT
39631: IFTRUE 39640
39633: PUSH
39634: LD_VAR 0 2
39638: NOT
39639: OR
39640: IFFALSE 39644
// exit ;
39642: GO 39872
// x := GetX ( building ) ;
39644: LD_ADDR_VAR 0 4
39648: PUSH
39649: LD_VAR 0 2
39653: PPUSH
39654: CALL_OW 250
39658: ST_TO_ADDR
// y := GetY ( building ) ;
39659: LD_ADDR_VAR 0 6
39663: PUSH
39664: LD_VAR 0 2
39668: PPUSH
39669: CALL_OW 251
39673: ST_TO_ADDR
// d := GetDir ( building ) ;
39674: LD_ADDR_VAR 0 8
39678: PUSH
39679: LD_VAR 0 2
39683: PPUSH
39684: CALL_OW 254
39688: ST_TO_ADDR
// r := 4 ;
39689: LD_ADDR_VAR 0 9
39693: PUSH
39694: LD_INT 4
39696: ST_TO_ADDR
// for i := 1 to 5 do
39697: LD_ADDR_VAR 0 10
39701: PUSH
39702: DOUBLE
39703: LD_INT 1
39705: DEC
39706: ST_TO_ADDR
39707: LD_INT 5
39709: PUSH
39710: FOR_TO
39711: IFFALSE 39870
// begin _x := ShiftX ( x , d , r + i ) ;
39713: LD_ADDR_VAR 0 5
39717: PUSH
39718: LD_VAR 0 4
39722: PPUSH
39723: LD_VAR 0 8
39727: PPUSH
39728: LD_VAR 0 9
39732: PUSH
39733: LD_VAR 0 10
39737: PLUS
39738: PPUSH
39739: CALL_OW 272
39743: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39744: LD_ADDR_VAR 0 7
39748: PUSH
39749: LD_VAR 0 6
39753: PPUSH
39754: LD_VAR 0 8
39758: PPUSH
39759: LD_VAR 0 9
39763: PUSH
39764: LD_VAR 0 10
39768: PLUS
39769: PPUSH
39770: CALL_OW 273
39774: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39775: LD_VAR 0 5
39779: PPUSH
39780: LD_VAR 0 7
39784: PPUSH
39785: CALL_OW 488
39789: IFFALSE 39824
39791: PUSH
39792: LD_VAR 0 5
39796: PPUSH
39797: LD_VAR 0 7
39801: PPUSH
39802: CALL_OW 428
39806: PPUSH
39807: CALL_OW 247
39811: PUSH
39812: LD_INT 3
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: IN
39822: NOT
39823: AND
39824: IFFALSE 39868
// begin ComMoveXY ( unit , _x , _y ) ;
39826: LD_VAR 0 1
39830: PPUSH
39831: LD_VAR 0 5
39835: PPUSH
39836: LD_VAR 0 7
39840: PPUSH
39841: CALL_OW 111
// result := [ _x , _y ] ;
39845: LD_ADDR_VAR 0 3
39849: PUSH
39850: LD_VAR 0 5
39854: PUSH
39855: LD_VAR 0 7
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// exit ;
39864: POP
39865: POP
39866: GO 39872
// end ; end ;
39868: GO 39710
39870: POP
39871: POP
// end ;
39872: LD_VAR 0 3
39876: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39877: LD_INT 0
39879: PPUSH
39880: PPUSH
39881: PPUSH
// result := 0 ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_INT 0
39889: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39890: LD_VAR 0 1
39894: PUSH
39895: LD_INT 0
39897: LESS
39898: IFTRUE 39910
39900: PUSH
39901: LD_VAR 0 1
39905: PUSH
39906: LD_INT 8
39908: GREATER
39909: OR
39910: IFTRUE 39922
39912: PUSH
39913: LD_VAR 0 2
39917: PUSH
39918: LD_INT 0
39920: LESS
39921: OR
39922: IFTRUE 39934
39924: PUSH
39925: LD_VAR 0 2
39929: PUSH
39930: LD_INT 8
39932: GREATER
39933: OR
39934: IFFALSE 39938
// exit ;
39936: GO 40013
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39938: LD_ADDR_VAR 0 4
39942: PUSH
39943: LD_INT 22
39945: PUSH
39946: LD_VAR 0 2
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PPUSH
39955: CALL_OW 69
39959: PUSH
39960: FOR_IN
39961: IFFALSE 40011
// begin un := UnitShoot ( i ) ;
39963: LD_ADDR_VAR 0 5
39967: PUSH
39968: LD_VAR 0 4
39972: PPUSH
39973: CALL_OW 504
39977: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39978: LD_VAR 0 5
39982: PPUSH
39983: CALL_OW 255
39987: PUSH
39988: LD_VAR 0 1
39992: EQUAL
39993: IFFALSE 40009
// begin result := un ;
39995: LD_ADDR_VAR 0 3
39999: PUSH
40000: LD_VAR 0 5
40004: ST_TO_ADDR
// exit ;
40005: POP
40006: POP
40007: GO 40013
// end ; end ;
40009: GO 39960
40011: POP
40012: POP
// end ;
40013: LD_VAR 0 3
40017: RET
// export function GetCargoBay ( units ) ; begin
40018: LD_INT 0
40020: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40021: LD_ADDR_VAR 0 2
40025: PUSH
40026: LD_VAR 0 1
40030: PPUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 34
40036: PUSH
40037: LD_INT 12
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 34
40046: PUSH
40047: LD_INT 51
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 34
40056: PUSH
40057: LD_INT 32
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 34
40066: PUSH
40067: LD_INT 89
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: PPUSH
40081: CALL_OW 72
40085: ST_TO_ADDR
// end ;
40086: LD_VAR 0 2
40090: RET
// export function Negate ( value ) ; begin
40091: LD_INT 0
40093: PPUSH
// result := not value ;
40094: LD_ADDR_VAR 0 2
40098: PUSH
40099: LD_VAR 0 1
40103: NOT
40104: ST_TO_ADDR
// end ;
40105: LD_VAR 0 2
40109: RET
// export function Inc ( value ) ; begin
40110: LD_INT 0
40112: PPUSH
// result := value + 1 ;
40113: LD_ADDR_VAR 0 2
40117: PUSH
40118: LD_VAR 0 1
40122: PUSH
40123: LD_INT 1
40125: PLUS
40126: ST_TO_ADDR
// end ;
40127: LD_VAR 0 2
40131: RET
// export function Dec ( value ) ; begin
40132: LD_INT 0
40134: PPUSH
// result := value - 1 ;
40135: LD_ADDR_VAR 0 2
40139: PUSH
40140: LD_VAR 0 1
40144: PUSH
40145: LD_INT 1
40147: MINUS
40148: ST_TO_ADDR
// end ;
40149: LD_VAR 0 2
40153: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40154: LD_INT 0
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40164: LD_VAR 0 1
40168: PPUSH
40169: LD_VAR 0 2
40173: PPUSH
40174: CALL_OW 488
40178: NOT
40179: IFTRUE 40198
40181: PUSH
40182: LD_VAR 0 3
40186: PPUSH
40187: LD_VAR 0 4
40191: PPUSH
40192: CALL_OW 488
40196: NOT
40197: OR
40198: IFFALSE 40211
// begin result := - 1 ;
40200: LD_ADDR_VAR 0 5
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: ST_TO_ADDR
// exit ;
40209: GO 40446
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40211: LD_ADDR_VAR 0 12
40215: PUSH
40216: LD_VAR 0 1
40220: PPUSH
40221: LD_VAR 0 2
40225: PPUSH
40226: LD_VAR 0 3
40230: PPUSH
40231: LD_VAR 0 4
40235: PPUSH
40236: CALL 39282 0 4
40240: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40241: LD_ADDR_VAR 0 11
40245: PUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: LD_VAR 0 2
40255: PPUSH
40256: LD_VAR 0 12
40260: PUSH
40261: LD_INT 1
40263: ARRAY
40264: PPUSH
40265: LD_VAR 0 12
40269: PUSH
40270: LD_INT 2
40272: ARRAY
40273: PPUSH
40274: CALL_OW 298
40278: ST_TO_ADDR
// distance := 9999 ;
40279: LD_ADDR_VAR 0 10
40283: PUSH
40284: LD_INT 9999
40286: ST_TO_ADDR
// for i := 0 to 5 do
40287: LD_ADDR_VAR 0 6
40291: PUSH
40292: DOUBLE
40293: LD_INT 0
40295: DEC
40296: ST_TO_ADDR
40297: LD_INT 5
40299: PUSH
40300: FOR_TO
40301: IFFALSE 40444
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40303: LD_ADDR_VAR 0 7
40307: PUSH
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_VAR 0 6
40317: PPUSH
40318: LD_VAR 0 11
40322: PPUSH
40323: CALL_OW 272
40327: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40328: LD_ADDR_VAR 0 8
40332: PUSH
40333: LD_VAR 0 2
40337: PPUSH
40338: LD_VAR 0 6
40342: PPUSH
40343: LD_VAR 0 11
40347: PPUSH
40348: CALL_OW 273
40352: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40353: LD_VAR 0 7
40357: PPUSH
40358: LD_VAR 0 8
40362: PPUSH
40363: CALL_OW 488
40367: NOT
40368: IFFALSE 40372
// continue ;
40370: GO 40300
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40372: LD_ADDR_VAR 0 9
40376: PUSH
40377: LD_VAR 0 12
40381: PUSH
40382: LD_INT 1
40384: ARRAY
40385: PPUSH
40386: LD_VAR 0 12
40390: PUSH
40391: LD_INT 2
40393: ARRAY
40394: PPUSH
40395: LD_VAR 0 7
40399: PPUSH
40400: LD_VAR 0 8
40404: PPUSH
40405: CALL_OW 298
40409: ST_TO_ADDR
// if tmp < distance then
40410: LD_VAR 0 9
40414: PUSH
40415: LD_VAR 0 10
40419: LESS
40420: IFFALSE 40442
// begin result := i ;
40422: LD_ADDR_VAR 0 5
40426: PUSH
40427: LD_VAR 0 6
40431: ST_TO_ADDR
// distance := tmp ;
40432: LD_ADDR_VAR 0 10
40436: PUSH
40437: LD_VAR 0 9
40441: ST_TO_ADDR
// end ; end ;
40442: GO 40300
40444: POP
40445: POP
// end ;
40446: LD_VAR 0 5
40450: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40451: LD_INT 0
40453: PPUSH
40454: PPUSH
// if not driver or not IsInUnit ( driver ) then
40455: LD_VAR 0 1
40459: NOT
40460: IFTRUE 40474
40462: PUSH
40463: LD_VAR 0 1
40467: PPUSH
40468: CALL_OW 310
40472: NOT
40473: OR
40474: IFFALSE 40478
// exit ;
40476: GO 40568
// vehicle := IsInUnit ( driver ) ;
40478: LD_ADDR_VAR 0 3
40482: PUSH
40483: LD_VAR 0 1
40487: PPUSH
40488: CALL_OW 310
40492: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40493: LD_VAR 0 1
40497: PPUSH
40498: LD_STRING \
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: PUSH
40528: LD_STRING E
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_VAR 0 3
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PPUSH
40564: CALL_OW 446
// end ;
40568: LD_VAR 0 2
40572: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40573: LD_INT 0
40575: PPUSH
40576: PPUSH
// if not driver or not IsInUnit ( driver ) then
40577: LD_VAR 0 1
40581: NOT
40582: IFTRUE 40596
40584: PUSH
40585: LD_VAR 0 1
40589: PPUSH
40590: CALL_OW 310
40594: NOT
40595: OR
40596: IFFALSE 40600
// exit ;
40598: GO 40690
// vehicle := IsInUnit ( driver ) ;
40600: LD_ADDR_VAR 0 3
40604: PUSH
40605: LD_VAR 0 1
40609: PPUSH
40610: CALL_OW 310
40614: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40615: LD_VAR 0 1
40619: PPUSH
40620: LD_STRING \
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: PUSH
40650: LD_STRING E
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_VAR 0 3
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PPUSH
40686: CALL_OW 447
// end ;
40690: LD_VAR 0 2
40694: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40695: LD_INT 0
40697: PPUSH
40698: PPUSH
40699: PPUSH
// tmp := [ ] ;
40700: LD_ADDR_VAR 0 5
40704: PUSH
40705: EMPTY
40706: ST_TO_ADDR
// for i in units do
40707: LD_ADDR_VAR 0 4
40711: PUSH
40712: LD_VAR 0 1
40716: PUSH
40717: FOR_IN
40718: IFFALSE 40756
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40720: LD_ADDR_VAR 0 5
40724: PUSH
40725: LD_VAR 0 5
40729: PPUSH
40730: LD_VAR 0 5
40734: PUSH
40735: LD_INT 1
40737: PLUS
40738: PPUSH
40739: LD_VAR 0 4
40743: PPUSH
40744: CALL_OW 256
40748: PPUSH
40749: CALL_OW 2
40753: ST_TO_ADDR
40754: GO 40717
40756: POP
40757: POP
// if not tmp then
40758: LD_VAR 0 5
40762: NOT
40763: IFFALSE 40767
// exit ;
40765: GO 40815
// if asc then
40767: LD_VAR 0 2
40771: IFFALSE 40795
// result := SortListByListAsc ( units , tmp ) else
40773: LD_ADDR_VAR 0 3
40777: PUSH
40778: LD_VAR 0 1
40782: PPUSH
40783: LD_VAR 0 5
40787: PPUSH
40788: CALL_OW 76
40792: ST_TO_ADDR
40793: GO 40815
// result := SortListByListDesc ( units , tmp ) ;
40795: LD_ADDR_VAR 0 3
40799: PUSH
40800: LD_VAR 0 1
40804: PPUSH
40805: LD_VAR 0 5
40809: PPUSH
40810: CALL_OW 77
40814: ST_TO_ADDR
// end ;
40815: LD_VAR 0 3
40819: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40820: LD_INT 0
40822: PPUSH
40823: PPUSH
// task := GetTaskList ( mech ) ;
40824: LD_ADDR_VAR 0 4
40828: PUSH
40829: LD_VAR 0 1
40833: PPUSH
40834: CALL_OW 437
40838: ST_TO_ADDR
// if not task then
40839: LD_VAR 0 4
40843: NOT
40844: IFFALSE 40848
// exit ;
40846: GO 40892
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40848: LD_ADDR_VAR 0 3
40852: PUSH
40853: LD_VAR 0 4
40857: PUSH
40858: LD_INT 1
40860: ARRAY
40861: PUSH
40862: LD_INT 1
40864: ARRAY
40865: PUSH
40866: LD_STRING r
40868: EQUAL
40869: IFFALSE 40891
40871: PUSH
40872: LD_VAR 0 4
40876: PUSH
40877: LD_INT 1
40879: ARRAY
40880: PUSH
40881: LD_INT 4
40883: ARRAY
40884: PUSH
40885: LD_VAR 0 2
40889: EQUAL
40890: AND
40891: ST_TO_ADDR
// end ;
40892: LD_VAR 0 3
40896: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40897: LD_INT 0
40899: PPUSH
// SetDir ( unit , d ) ;
40900: LD_VAR 0 1
40904: PPUSH
40905: LD_VAR 0 4
40909: PPUSH
40910: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40914: LD_ADDR_VAR 0 6
40918: PUSH
40919: LD_VAR 0 1
40923: PPUSH
40924: LD_VAR 0 2
40928: PPUSH
40929: LD_VAR 0 3
40933: PPUSH
40934: LD_VAR 0 5
40938: PPUSH
40939: CALL_OW 48
40943: ST_TO_ADDR
// end ;
40944: LD_VAR 0 6
40948: RET
// export function ToNaturalNumber ( number ) ; begin
40949: LD_INT 0
40951: PPUSH
// result := number div 1 ;
40952: LD_ADDR_VAR 0 2
40956: PUSH
40957: LD_VAR 0 1
40961: PUSH
40962: LD_INT 1
40964: DIV
40965: ST_TO_ADDR
// if number < 0 then
40966: LD_VAR 0 1
40970: PUSH
40971: LD_INT 0
40973: LESS
40974: IFFALSE 40984
// result := 0 ;
40976: LD_ADDR_VAR 0 2
40980: PUSH
40981: LD_INT 0
40983: ST_TO_ADDR
// end ;
40984: LD_VAR 0 2
40988: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
40989: LD_INT 0
40991: PPUSH
40992: PPUSH
40993: PPUSH
// if not buildings then
40994: LD_VAR 0 1
40998: NOT
40999: IFFALSE 41003
// exit ;
41001: GO 41118
// tmp := [ ] ;
41003: LD_ADDR_VAR 0 5
41007: PUSH
41008: EMPTY
41009: ST_TO_ADDR
// for b in buildings do
41010: LD_ADDR_VAR 0 4
41014: PUSH
41015: LD_VAR 0 1
41019: PUSH
41020: FOR_IN
41021: IFFALSE 41059
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
41023: LD_ADDR_VAR 0 5
41027: PUSH
41028: LD_VAR 0 5
41032: PPUSH
41033: LD_VAR 0 5
41037: PUSH
41038: LD_INT 1
41040: PLUS
41041: PPUSH
41042: LD_VAR 0 4
41046: PPUSH
41047: CALL_OW 266
41051: PPUSH
41052: CALL_OW 1
41056: ST_TO_ADDR
41057: GO 41020
41059: POP
41060: POP
// if not tmp then
41061: LD_VAR 0 5
41065: NOT
41066: IFFALSE 41070
// exit ;
41068: GO 41118
// if asc then
41070: LD_VAR 0 2
41074: IFFALSE 41098
// result := SortListByListAsc ( buildings , tmp ) else
41076: LD_ADDR_VAR 0 3
41080: PUSH
41081: LD_VAR 0 1
41085: PPUSH
41086: LD_VAR 0 5
41090: PPUSH
41091: CALL_OW 76
41095: ST_TO_ADDR
41096: GO 41118
// result := SortListByListDesc ( buildings , tmp ) ;
41098: LD_ADDR_VAR 0 3
41102: PUSH
41103: LD_VAR 0 1
41107: PPUSH
41108: LD_VAR 0 5
41112: PPUSH
41113: CALL_OW 77
41117: ST_TO_ADDR
// end ;
41118: LD_VAR 0 3
41122: RET
// export function SortByClass ( units , class ) ; var un ; begin
41123: LD_INT 0
41125: PPUSH
41126: PPUSH
// if not units or not class then
41127: LD_VAR 0 1
41131: NOT
41132: IFTRUE 41141
41134: PUSH
41135: LD_VAR 0 2
41139: NOT
41140: OR
41141: IFFALSE 41145
// exit ;
41143: GO 41240
// result := [ ] ;
41145: LD_ADDR_VAR 0 3
41149: PUSH
41150: EMPTY
41151: ST_TO_ADDR
// for un in units do
41152: LD_ADDR_VAR 0 4
41156: PUSH
41157: LD_VAR 0 1
41161: PUSH
41162: FOR_IN
41163: IFFALSE 41238
// if GetClass ( un ) = class then
41165: LD_VAR 0 4
41169: PPUSH
41170: CALL_OW 257
41174: PUSH
41175: LD_VAR 0 2
41179: EQUAL
41180: IFFALSE 41207
// result := Insert ( result , 1 , un ) else
41182: LD_ADDR_VAR 0 3
41186: PUSH
41187: LD_VAR 0 3
41191: PPUSH
41192: LD_INT 1
41194: PPUSH
41195: LD_VAR 0 4
41199: PPUSH
41200: CALL_OW 2
41204: ST_TO_ADDR
41205: GO 41236
// result := Replace ( result , result + 1 , un ) ;
41207: LD_ADDR_VAR 0 3
41211: PUSH
41212: LD_VAR 0 3
41216: PPUSH
41217: LD_VAR 0 3
41221: PUSH
41222: LD_INT 1
41224: PLUS
41225: PPUSH
41226: LD_VAR 0 4
41230: PPUSH
41231: CALL_OW 1
41235: ST_TO_ADDR
41236: GO 41162
41238: POP
41239: POP
// end ;
41240: LD_VAR 0 3
41244: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41245: LD_INT 0
41247: PPUSH
41248: PPUSH
41249: PPUSH
41250: PPUSH
41251: PPUSH
41252: PPUSH
41253: PPUSH
// result := [ ] ;
41254: LD_ADDR_VAR 0 4
41258: PUSH
41259: EMPTY
41260: ST_TO_ADDR
// if x - r < 0 then
41261: LD_VAR 0 1
41265: PUSH
41266: LD_VAR 0 3
41270: MINUS
41271: PUSH
41272: LD_INT 0
41274: LESS
41275: IFFALSE 41287
// min_x := 0 else
41277: LD_ADDR_VAR 0 8
41281: PUSH
41282: LD_INT 0
41284: ST_TO_ADDR
41285: GO 41303
// min_x := x - r ;
41287: LD_ADDR_VAR 0 8
41291: PUSH
41292: LD_VAR 0 1
41296: PUSH
41297: LD_VAR 0 3
41301: MINUS
41302: ST_TO_ADDR
// if y - r < 0 then
41303: LD_VAR 0 2
41307: PUSH
41308: LD_VAR 0 3
41312: MINUS
41313: PUSH
41314: LD_INT 0
41316: LESS
41317: IFFALSE 41329
// min_y := 0 else
41319: LD_ADDR_VAR 0 7
41323: PUSH
41324: LD_INT 0
41326: ST_TO_ADDR
41327: GO 41345
// min_y := y - r ;
41329: LD_ADDR_VAR 0 7
41333: PUSH
41334: LD_VAR 0 2
41338: PUSH
41339: LD_VAR 0 3
41343: MINUS
41344: ST_TO_ADDR
// max_x := x + r ;
41345: LD_ADDR_VAR 0 9
41349: PUSH
41350: LD_VAR 0 1
41354: PUSH
41355: LD_VAR 0 3
41359: PLUS
41360: ST_TO_ADDR
// max_y := y + r ;
41361: LD_ADDR_VAR 0 10
41365: PUSH
41366: LD_VAR 0 2
41370: PUSH
41371: LD_VAR 0 3
41375: PLUS
41376: ST_TO_ADDR
// for _x = min_x to max_x do
41377: LD_ADDR_VAR 0 5
41381: PUSH
41382: DOUBLE
41383: LD_VAR 0 8
41387: DEC
41388: ST_TO_ADDR
41389: LD_VAR 0 9
41393: PUSH
41394: FOR_TO
41395: IFFALSE 41496
// for _y = min_y to max_y do
41397: LD_ADDR_VAR 0 6
41401: PUSH
41402: DOUBLE
41403: LD_VAR 0 7
41407: DEC
41408: ST_TO_ADDR
41409: LD_VAR 0 10
41413: PUSH
41414: FOR_TO
41415: IFFALSE 41492
// begin if not ValidHex ( _x , _y ) then
41417: LD_VAR 0 5
41421: PPUSH
41422: LD_VAR 0 6
41426: PPUSH
41427: CALL_OW 488
41431: NOT
41432: IFFALSE 41436
// continue ;
41434: GO 41414
// if GetResourceTypeXY ( _x , _y ) then
41436: LD_VAR 0 5
41440: PPUSH
41441: LD_VAR 0 6
41445: PPUSH
41446: CALL_OW 283
41450: IFFALSE 41490
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41452: LD_ADDR_VAR 0 4
41456: PUSH
41457: LD_VAR 0 4
41461: PPUSH
41462: LD_VAR 0 4
41466: PUSH
41467: LD_INT 1
41469: PLUS
41470: PPUSH
41471: LD_VAR 0 5
41475: PUSH
41476: LD_VAR 0 6
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PPUSH
41485: CALL_OW 1
41489: ST_TO_ADDR
// end ;
41490: GO 41414
41492: POP
41493: POP
41494: GO 41394
41496: POP
41497: POP
// end ;
41498: LD_VAR 0 4
41502: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41503: LD_INT 0
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
// if not units then
41513: LD_VAR 0 1
41517: NOT
41518: IFFALSE 41522
// exit ;
41520: GO 42054
// result := UnitFilter ( units , [ f_ok ] ) ;
41522: LD_ADDR_VAR 0 3
41526: PUSH
41527: LD_VAR 0 1
41531: PPUSH
41532: LD_INT 50
41534: PUSH
41535: EMPTY
41536: LIST
41537: PPUSH
41538: CALL_OW 72
41542: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41543: LD_ADDR_VAR 0 8
41547: PUSH
41548: LD_VAR 0 1
41552: PUSH
41553: LD_INT 1
41555: ARRAY
41556: PPUSH
41557: CALL_OW 255
41561: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41562: LD_ADDR_VAR 0 10
41566: PUSH
41567: LD_INT 29
41569: PUSH
41570: LD_INT 91
41572: PUSH
41573: LD_INT 49
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: ST_TO_ADDR
// if not result then
41581: LD_VAR 0 3
41585: NOT
41586: IFFALSE 41590
// exit ;
41588: GO 42054
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41590: LD_ADDR_VAR 0 5
41594: PUSH
41595: LD_INT 81
41597: PUSH
41598: LD_VAR 0 8
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PPUSH
41607: CALL_OW 69
41611: ST_TO_ADDR
// for i in result do
41612: LD_ADDR_VAR 0 4
41616: PUSH
41617: LD_VAR 0 3
41621: PUSH
41622: FOR_IN
41623: IFFALSE 42052
// begin tag := GetTag ( i ) + 1 ;
41625: LD_ADDR_VAR 0 9
41629: PUSH
41630: LD_VAR 0 4
41634: PPUSH
41635: CALL_OW 110
41639: PUSH
41640: LD_INT 1
41642: PLUS
41643: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41644: LD_ADDR_VAR 0 7
41648: PUSH
41649: LD_VAR 0 4
41653: PPUSH
41654: CALL_OW 250
41658: PPUSH
41659: LD_VAR 0 4
41663: PPUSH
41664: CALL_OW 251
41668: PPUSH
41669: LD_INT 4
41671: PPUSH
41672: CALL 41245 0 3
41676: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41677: LD_VAR 0 4
41681: PPUSH
41682: CALL_OW 247
41686: PUSH
41687: LD_INT 2
41689: EQUAL
41690: IFFALSE 41702
41692: PUSH
41693: LD_VAR 0 7
41697: PUSH
41698: LD_INT 2
41700: GREATER
41701: AND
41702: IFFALSE 41722
41704: PUSH
41705: LD_VAR 0 4
41709: PPUSH
41710: CALL_OW 264
41714: PUSH
41715: LD_VAR 0 10
41719: IN
41720: NOT
41721: AND
41722: IFFALSE 41761
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41724: LD_VAR 0 4
41728: PPUSH
41729: LD_VAR 0 7
41733: PUSH
41734: LD_INT 1
41736: ARRAY
41737: PUSH
41738: LD_INT 1
41740: ARRAY
41741: PPUSH
41742: LD_VAR 0 7
41746: PUSH
41747: LD_INT 1
41749: ARRAY
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: PPUSH
41755: CALL_OW 116
41759: GO 42050
// if path > tag then
41761: LD_VAR 0 2
41765: PUSH
41766: LD_VAR 0 9
41770: GREATER
41771: IFFALSE 41979
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41773: LD_ADDR_VAR 0 6
41777: PUSH
41778: LD_VAR 0 5
41782: PPUSH
41783: LD_INT 91
41785: PUSH
41786: LD_VAR 0 4
41790: PUSH
41791: LD_INT 8
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: PPUSH
41799: CALL_OW 72
41803: ST_TO_ADDR
// if nearEnemy then
41804: LD_VAR 0 6
41808: IFFALSE 41877
// begin if GetWeapon ( i ) = ru_time_lapser then
41810: LD_VAR 0 4
41814: PPUSH
41815: CALL_OW 264
41819: PUSH
41820: LD_INT 49
41822: EQUAL
41823: IFFALSE 41851
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41825: LD_VAR 0 4
41829: PPUSH
41830: LD_VAR 0 6
41834: PPUSH
41835: LD_VAR 0 4
41839: PPUSH
41840: CALL_OW 74
41844: PPUSH
41845: CALL_OW 112
41849: GO 41875
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41851: LD_VAR 0 4
41855: PPUSH
41856: LD_VAR 0 6
41860: PPUSH
41861: LD_VAR 0 4
41865: PPUSH
41866: CALL_OW 74
41870: PPUSH
41871: CALL 43135 0 2
// end else
41875: GO 41977
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41877: LD_VAR 0 4
41881: PPUSH
41882: LD_VAR 0 2
41886: PUSH
41887: LD_VAR 0 9
41891: ARRAY
41892: PUSH
41893: LD_INT 1
41895: ARRAY
41896: PPUSH
41897: LD_VAR 0 2
41901: PUSH
41902: LD_VAR 0 9
41906: ARRAY
41907: PUSH
41908: LD_INT 2
41910: ARRAY
41911: PPUSH
41912: CALL_OW 297
41916: PUSH
41917: LD_INT 6
41919: GREATER
41920: IFFALSE 41963
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41922: LD_VAR 0 4
41926: PPUSH
41927: LD_VAR 0 2
41931: PUSH
41932: LD_VAR 0 9
41936: ARRAY
41937: PUSH
41938: LD_INT 1
41940: ARRAY
41941: PPUSH
41942: LD_VAR 0 2
41946: PUSH
41947: LD_VAR 0 9
41951: ARRAY
41952: PUSH
41953: LD_INT 2
41955: ARRAY
41956: PPUSH
41957: CALL_OW 114
41961: GO 41977
// SetTag ( i , tag ) ;
41963: LD_VAR 0 4
41967: PPUSH
41968: LD_VAR 0 9
41972: PPUSH
41973: CALL_OW 109
// end else
41977: GO 42050
// if enemy then
41979: LD_VAR 0 5
41983: IFFALSE 42050
// begin if GetWeapon ( i ) = ru_time_lapser then
41985: LD_VAR 0 4
41989: PPUSH
41990: CALL_OW 264
41994: PUSH
41995: LD_INT 49
41997: EQUAL
41998: IFFALSE 42026
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42000: LD_VAR 0 4
42004: PPUSH
42005: LD_VAR 0 5
42009: PPUSH
42010: LD_VAR 0 4
42014: PPUSH
42015: CALL_OW 74
42019: PPUSH
42020: CALL_OW 112
42024: GO 42050
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42026: LD_VAR 0 4
42030: PPUSH
42031: LD_VAR 0 5
42035: PPUSH
42036: LD_VAR 0 4
42040: PPUSH
42041: CALL_OW 74
42045: PPUSH
42046: CALL 43135 0 2
// end ; end ;
42050: GO 41622
42052: POP
42053: POP
// end ;
42054: LD_VAR 0 3
42058: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42059: LD_INT 0
42061: PPUSH
42062: PPUSH
42063: PPUSH
// if not unit or IsInUnit ( unit ) then
42064: LD_VAR 0 1
42068: NOT
42069: IFTRUE 42082
42071: PUSH
42072: LD_VAR 0 1
42076: PPUSH
42077: CALL_OW 310
42081: OR
42082: IFFALSE 42086
// exit ;
42084: GO 42177
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42086: LD_ADDR_VAR 0 4
42090: PUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: CALL_OW 250
42100: PPUSH
42101: LD_VAR 0 2
42105: PPUSH
42106: LD_INT 1
42108: PPUSH
42109: CALL_OW 272
42113: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42114: LD_ADDR_VAR 0 5
42118: PUSH
42119: LD_VAR 0 1
42123: PPUSH
42124: CALL_OW 251
42128: PPUSH
42129: LD_VAR 0 2
42133: PPUSH
42134: LD_INT 1
42136: PPUSH
42137: CALL_OW 273
42141: ST_TO_ADDR
// if ValidHex ( x , y ) then
42142: LD_VAR 0 4
42146: PPUSH
42147: LD_VAR 0 5
42151: PPUSH
42152: CALL_OW 488
42156: IFFALSE 42177
// ComTurnXY ( unit , x , y ) ;
42158: LD_VAR 0 1
42162: PPUSH
42163: LD_VAR 0 4
42167: PPUSH
42168: LD_VAR 0 5
42172: PPUSH
42173: CALL_OW 118
// end ;
42177: LD_VAR 0 3
42181: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42182: LD_INT 0
42184: PPUSH
42185: PPUSH
// result := false ;
42186: LD_ADDR_VAR 0 3
42190: PUSH
42191: LD_INT 0
42193: ST_TO_ADDR
// if not units then
42194: LD_VAR 0 2
42198: NOT
42199: IFFALSE 42203
// exit ;
42201: GO 42248
// for i in units do
42203: LD_ADDR_VAR 0 4
42207: PUSH
42208: LD_VAR 0 2
42212: PUSH
42213: FOR_IN
42214: IFFALSE 42246
// if See ( side , i ) then
42216: LD_VAR 0 1
42220: PPUSH
42221: LD_VAR 0 4
42225: PPUSH
42226: CALL_OW 292
42230: IFFALSE 42244
// begin result := true ;
42232: LD_ADDR_VAR 0 3
42236: PUSH
42237: LD_INT 1
42239: ST_TO_ADDR
// exit ;
42240: POP
42241: POP
42242: GO 42248
// end ;
42244: GO 42213
42246: POP
42247: POP
// end ;
42248: LD_VAR 0 3
42252: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42253: LD_INT 0
42255: PPUSH
42256: PPUSH
42257: PPUSH
42258: PPUSH
// if not unit or not points then
42259: LD_VAR 0 1
42263: NOT
42264: IFTRUE 42273
42266: PUSH
42267: LD_VAR 0 2
42271: NOT
42272: OR
42273: IFFALSE 42277
// exit ;
42275: GO 42367
// dist := 99999 ;
42277: LD_ADDR_VAR 0 5
42281: PUSH
42282: LD_INT 99999
42284: ST_TO_ADDR
// for i in points do
42285: LD_ADDR_VAR 0 4
42289: PUSH
42290: LD_VAR 0 2
42294: PUSH
42295: FOR_IN
42296: IFFALSE 42365
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42298: LD_ADDR_VAR 0 6
42302: PUSH
42303: LD_VAR 0 1
42307: PPUSH
42308: LD_VAR 0 4
42312: PUSH
42313: LD_INT 1
42315: ARRAY
42316: PPUSH
42317: LD_VAR 0 4
42321: PUSH
42322: LD_INT 2
42324: ARRAY
42325: PPUSH
42326: CALL_OW 297
42330: ST_TO_ADDR
// if tmpDist < dist then
42331: LD_VAR 0 6
42335: PUSH
42336: LD_VAR 0 5
42340: LESS
42341: IFFALSE 42363
// begin result := i ;
42343: LD_ADDR_VAR 0 3
42347: PUSH
42348: LD_VAR 0 4
42352: ST_TO_ADDR
// dist := tmpDist ;
42353: LD_ADDR_VAR 0 5
42357: PUSH
42358: LD_VAR 0 6
42362: ST_TO_ADDR
// end ; end ;
42363: GO 42295
42365: POP
42366: POP
// end ;
42367: LD_VAR 0 3
42371: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42372: LD_INT 0
42374: PPUSH
// uc_side := side ;
42375: LD_ADDR_OWVAR 20
42379: PUSH
42380: LD_VAR 0 1
42384: ST_TO_ADDR
// uc_nation := 3 ;
42385: LD_ADDR_OWVAR 21
42389: PUSH
42390: LD_INT 3
42392: ST_TO_ADDR
// vc_chassis := 25 ;
42393: LD_ADDR_OWVAR 37
42397: PUSH
42398: LD_INT 25
42400: ST_TO_ADDR
// vc_engine := engine_siberite ;
42401: LD_ADDR_OWVAR 39
42405: PUSH
42406: LD_INT 3
42408: ST_TO_ADDR
// vc_control := control_computer ;
42409: LD_ADDR_OWVAR 38
42413: PUSH
42414: LD_INT 3
42416: ST_TO_ADDR
// vc_weapon := 59 ;
42417: LD_ADDR_OWVAR 40
42421: PUSH
42422: LD_INT 59
42424: ST_TO_ADDR
// result := CreateVehicle ;
42425: LD_ADDR_VAR 0 5
42429: PUSH
42430: CALL_OW 45
42434: ST_TO_ADDR
// SetDir ( result , d ) ;
42435: LD_VAR 0 5
42439: PPUSH
42440: LD_VAR 0 4
42444: PPUSH
42445: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42449: LD_VAR 0 5
42453: PPUSH
42454: LD_VAR 0 2
42458: PPUSH
42459: LD_VAR 0 3
42463: PPUSH
42464: LD_INT 0
42466: PPUSH
42467: CALL_OW 48
// end ;
42471: LD_VAR 0 5
42475: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42476: LD_INT 0
42478: PPUSH
42479: PPUSH
42480: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42481: LD_ADDR_VAR 0 2
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42504: LD_VAR 0 1
42508: NOT
42509: IFTRUE 42542
42511: PUSH
42512: LD_VAR 0 1
42516: PPUSH
42517: CALL_OW 264
42521: PUSH
42522: LD_INT 12
42524: PUSH
42525: LD_INT 51
42527: PUSH
42528: LD_INT 32
42530: PUSH
42531: LD_INT 89
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: IN
42540: NOT
42541: OR
42542: IFFALSE 42546
// exit ;
42544: GO 42644
// for i := 1 to 3 do
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: DOUBLE
42552: LD_INT 1
42554: DEC
42555: ST_TO_ADDR
42556: LD_INT 3
42558: PUSH
42559: FOR_TO
42560: IFFALSE 42642
// begin tmp := GetCargo ( cargo , i ) ;
42562: LD_ADDR_VAR 0 4
42566: PUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: LD_VAR 0 3
42576: PPUSH
42577: CALL_OW 289
42581: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42582: LD_ADDR_VAR 0 2
42586: PUSH
42587: LD_VAR 0 2
42591: PPUSH
42592: LD_VAR 0 3
42596: PPUSH
42597: LD_VAR 0 4
42601: PPUSH
42602: CALL_OW 1
42606: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42607: LD_ADDR_VAR 0 2
42611: PUSH
42612: LD_VAR 0 2
42616: PPUSH
42617: LD_INT 4
42619: PPUSH
42620: LD_VAR 0 2
42624: PUSH
42625: LD_INT 4
42627: ARRAY
42628: PUSH
42629: LD_VAR 0 4
42633: PLUS
42634: PPUSH
42635: CALL_OW 1
42639: ST_TO_ADDR
// end ;
42640: GO 42559
42642: POP
42643: POP
// end ;
42644: LD_VAR 0 2
42648: RET
// export function Length ( array ) ; begin
42649: LD_INT 0
42651: PPUSH
// result := array + 0 ;
42652: LD_ADDR_VAR 0 2
42656: PUSH
42657: LD_VAR 0 1
42661: PUSH
42662: LD_INT 0
42664: PLUS
42665: ST_TO_ADDR
// end ;
42666: LD_VAR 0 2
42670: RET
// export function PrepareArray ( array ) ; begin
42671: LD_INT 0
42673: PPUSH
// result := array diff 0 ;
42674: LD_ADDR_VAR 0 2
42678: PUSH
42679: LD_VAR 0 1
42683: PUSH
42684: LD_INT 0
42686: DIFF
42687: ST_TO_ADDR
// if not result [ 1 ] then
42688: LD_VAR 0 2
42692: PUSH
42693: LD_INT 1
42695: ARRAY
42696: NOT
42697: IFFALSE 42717
// result := Delete ( result , 1 ) ;
42699: LD_ADDR_VAR 0 2
42703: PUSH
42704: LD_VAR 0 2
42708: PPUSH
42709: LD_INT 1
42711: PPUSH
42712: CALL_OW 3
42716: ST_TO_ADDR
// end ;
42717: LD_VAR 0 2
42721: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42722: LD_INT 0
42724: PPUSH
42725: PPUSH
42726: PPUSH
42727: PPUSH
// sibRocketRange := 25 ;
42728: LD_ADDR_VAR 0 6
42732: PUSH
42733: LD_INT 25
42735: ST_TO_ADDR
// result := false ;
42736: LD_ADDR_VAR 0 4
42740: PUSH
42741: LD_INT 0
42743: ST_TO_ADDR
// for i := 0 to 5 do
42744: LD_ADDR_VAR 0 5
42748: PUSH
42749: DOUBLE
42750: LD_INT 0
42752: DEC
42753: ST_TO_ADDR
42754: LD_INT 5
42756: PUSH
42757: FOR_TO
42758: IFFALSE 42825
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42760: LD_VAR 0 1
42764: PPUSH
42765: LD_VAR 0 5
42769: PPUSH
42770: LD_VAR 0 6
42774: PPUSH
42775: CALL_OW 272
42779: PPUSH
42780: LD_VAR 0 2
42784: PPUSH
42785: LD_VAR 0 5
42789: PPUSH
42790: LD_VAR 0 6
42794: PPUSH
42795: CALL_OW 273
42799: PPUSH
42800: LD_VAR 0 3
42804: PPUSH
42805: CALL_OW 309
42809: IFFALSE 42823
// begin result := true ;
42811: LD_ADDR_VAR 0 4
42815: PUSH
42816: LD_INT 1
42818: ST_TO_ADDR
// exit ;
42819: POP
42820: POP
42821: GO 42827
// end ;
42823: GO 42757
42825: POP
42826: POP
// end ;
42827: LD_VAR 0 4
42831: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42832: LD_INT 0
42834: PPUSH
42835: PPUSH
42836: PPUSH
// if btype = b_depot then
42837: LD_VAR 0 2
42841: PUSH
42842: LD_INT 0
42844: EQUAL
42845: IFFALSE 42857
// begin result := true ;
42847: LD_ADDR_VAR 0 3
42851: PUSH
42852: LD_INT 1
42854: ST_TO_ADDR
// exit ;
42855: GO 42977
// end ; pom := GetBase ( depot ) ;
42857: LD_ADDR_VAR 0 4
42861: PUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 274
42871: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42872: LD_ADDR_VAR 0 5
42876: PUSH
42877: LD_VAR 0 2
42881: PPUSH
42882: LD_VAR 0 1
42886: PPUSH
42887: CALL_OW 248
42891: PPUSH
42892: CALL_OW 450
42896: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42897: LD_ADDR_VAR 0 3
42901: PUSH
42902: LD_VAR 0 4
42906: PPUSH
42907: LD_INT 1
42909: PPUSH
42910: CALL_OW 275
42914: PUSH
42915: LD_VAR 0 5
42919: PUSH
42920: LD_INT 1
42922: ARRAY
42923: GREATEREQUAL
42924: IFFALSE 42950
42926: PUSH
42927: LD_VAR 0 4
42931: PPUSH
42932: LD_INT 2
42934: PPUSH
42935: CALL_OW 275
42939: PUSH
42940: LD_VAR 0 5
42944: PUSH
42945: LD_INT 2
42947: ARRAY
42948: GREATEREQUAL
42949: AND
42950: IFFALSE 42976
42952: PUSH
42953: LD_VAR 0 4
42957: PPUSH
42958: LD_INT 3
42960: PPUSH
42961: CALL_OW 275
42965: PUSH
42966: LD_VAR 0 5
42970: PUSH
42971: LD_INT 3
42973: ARRAY
42974: GREATEREQUAL
42975: AND
42976: ST_TO_ADDR
// end ;
42977: LD_VAR 0 3
42981: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42982: LD_INT 0
42984: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42985: LD_VAR 0 1
42989: PPUSH
42990: LD_VAR 0 2
42994: PPUSH
42995: LD_INT 0
42997: PPUSH
42998: LD_INT 0
43000: PPUSH
43001: LD_INT 1
43003: PPUSH
43004: LD_INT 0
43006: PPUSH
43007: CALL_OW 587
// end ;
43011: LD_VAR 0 3
43015: RET
// export function CenterOnNow ( unit ) ; begin
43016: LD_INT 0
43018: PPUSH
// result := IsInUnit ( unit ) ;
43019: LD_ADDR_VAR 0 2
43023: PUSH
43024: LD_VAR 0 1
43028: PPUSH
43029: CALL_OW 310
43033: ST_TO_ADDR
// if not result then
43034: LD_VAR 0 2
43038: NOT
43039: IFFALSE 43051
// result := unit ;
43041: LD_ADDR_VAR 0 2
43045: PUSH
43046: LD_VAR 0 1
43050: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 87
// end ;
43060: LD_VAR 0 2
43064: RET
// export function ComMoveHex ( unit , hex ) ; begin
43065: LD_INT 0
43067: PPUSH
// if not hex then
43068: LD_VAR 0 2
43072: NOT
43073: IFFALSE 43077
// exit ;
43075: GO 43130
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43077: LD_VAR 0 2
43081: PUSH
43082: LD_INT 1
43084: ARRAY
43085: PPUSH
43086: LD_VAR 0 2
43090: PUSH
43091: LD_INT 2
43093: ARRAY
43094: PPUSH
43095: CALL_OW 428
43099: IFFALSE 43103
// exit ;
43101: GO 43130
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43103: LD_VAR 0 1
43107: PPUSH
43108: LD_VAR 0 2
43112: PUSH
43113: LD_INT 1
43115: ARRAY
43116: PPUSH
43117: LD_VAR 0 2
43121: PUSH
43122: LD_INT 2
43124: ARRAY
43125: PPUSH
43126: CALL_OW 111
// end ;
43130: LD_VAR 0 3
43134: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43135: LD_INT 0
43137: PPUSH
43138: PPUSH
43139: PPUSH
// if not unit or not enemy then
43140: LD_VAR 0 1
43144: NOT
43145: IFTRUE 43154
43147: PUSH
43148: LD_VAR 0 2
43152: NOT
43153: OR
43154: IFFALSE 43158
// exit ;
43156: GO 43284
// x := GetX ( enemy ) ;
43158: LD_ADDR_VAR 0 4
43162: PUSH
43163: LD_VAR 0 2
43167: PPUSH
43168: CALL_OW 250
43172: ST_TO_ADDR
// y := GetY ( enemy ) ;
43173: LD_ADDR_VAR 0 5
43177: PUSH
43178: LD_VAR 0 2
43182: PPUSH
43183: CALL_OW 251
43187: ST_TO_ADDR
// if ValidHex ( x , y ) then
43188: LD_VAR 0 4
43192: PPUSH
43193: LD_VAR 0 5
43197: PPUSH
43198: CALL_OW 488
43202: IFFALSE 43284
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43204: LD_VAR 0 2
43208: PPUSH
43209: CALL_OW 247
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: IN
43224: IFTRUE 43247
43226: PUSH
43227: LD_VAR 0 1
43231: PPUSH
43232: CALL_OW 255
43236: PPUSH
43237: LD_VAR 0 2
43241: PPUSH
43242: CALL_OW 292
43246: OR
43247: IFFALSE 43265
// ComAttackUnit ( unit , enemy ) else
43249: LD_VAR 0 1
43253: PPUSH
43254: LD_VAR 0 2
43258: PPUSH
43259: CALL_OW 115
43263: GO 43284
// ComAgressiveMove ( unit , x , y ) ;
43265: LD_VAR 0 1
43269: PPUSH
43270: LD_VAR 0 4
43274: PPUSH
43275: LD_VAR 0 5
43279: PPUSH
43280: CALL_OW 114
// end ;
43284: LD_VAR 0 3
43288: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43289: LD_INT 0
43291: PPUSH
43292: PPUSH
43293: PPUSH
// list := AreaToList ( area , 0 ) ;
43294: LD_ADDR_VAR 0 5
43298: PUSH
43299: LD_VAR 0 1
43303: PPUSH
43304: LD_INT 0
43306: PPUSH
43307: CALL_OW 517
43311: ST_TO_ADDR
// if not list then
43312: LD_VAR 0 5
43316: NOT
43317: IFFALSE 43321
// exit ;
43319: GO 43451
// if all then
43321: LD_VAR 0 2
43325: IFFALSE 43413
// begin for i := 1 to list [ 1 ] do
43327: LD_ADDR_VAR 0 4
43331: PUSH
43332: DOUBLE
43333: LD_INT 1
43335: DEC
43336: ST_TO_ADDR
43337: LD_VAR 0 5
43341: PUSH
43342: LD_INT 1
43344: ARRAY
43345: PUSH
43346: FOR_TO
43347: IFFALSE 43409
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43349: LD_ADDR_VAR 0 3
43353: PUSH
43354: LD_VAR 0 3
43358: PPUSH
43359: LD_VAR 0 3
43363: PUSH
43364: LD_INT 1
43366: PLUS
43367: PPUSH
43368: LD_VAR 0 5
43372: PUSH
43373: LD_INT 1
43375: ARRAY
43376: PUSH
43377: LD_VAR 0 4
43381: ARRAY
43382: PUSH
43383: LD_VAR 0 5
43387: PUSH
43388: LD_INT 2
43390: ARRAY
43391: PUSH
43392: LD_VAR 0 4
43396: ARRAY
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PPUSH
43402: CALL_OW 1
43406: ST_TO_ADDR
43407: GO 43346
43409: POP
43410: POP
// exit ;
43411: GO 43451
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43413: LD_ADDR_VAR 0 3
43417: PUSH
43418: LD_VAR 0 5
43422: PUSH
43423: LD_INT 1
43425: ARRAY
43426: PUSH
43427: LD_INT 1
43429: ARRAY
43430: PUSH
43431: LD_VAR 0 5
43435: PUSH
43436: LD_INT 2
43438: ARRAY
43439: PUSH
43440: LD_INT 1
43442: ARRAY
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: EMPTY
43449: LIST
43450: ST_TO_ADDR
// end ;
43451: LD_VAR 0 3
43455: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43456: LD_INT 0
43458: PPUSH
43459: PPUSH
// list := AreaToList ( area , 0 ) ;
43460: LD_ADDR_VAR 0 4
43464: PUSH
43465: LD_VAR 0 1
43469: PPUSH
43470: LD_INT 0
43472: PPUSH
43473: CALL_OW 517
43477: ST_TO_ADDR
// if not list then
43478: LD_VAR 0 4
43482: NOT
43483: IFFALSE 43487
// exit ;
43485: GO 43528
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43487: LD_ADDR_VAR 0 3
43491: PUSH
43492: LD_VAR 0 4
43496: PUSH
43497: LD_INT 1
43499: ARRAY
43500: PUSH
43501: LD_INT 1
43503: ARRAY
43504: PUSH
43505: LD_VAR 0 4
43509: PUSH
43510: LD_INT 2
43512: ARRAY
43513: PUSH
43514: LD_INT 1
43516: ARRAY
43517: PUSH
43518: LD_VAR 0 2
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// end ;
43528: LD_VAR 0 3
43532: RET
// export function First ( array ) ; begin
43533: LD_INT 0
43535: PPUSH
// if not array then
43536: LD_VAR 0 1
43540: NOT
43541: IFFALSE 43545
// exit ;
43543: GO 43559
// result := array [ 1 ] ;
43545: LD_ADDR_VAR 0 2
43549: PUSH
43550: LD_VAR 0 1
43554: PUSH
43555: LD_INT 1
43557: ARRAY
43558: ST_TO_ADDR
// end ;
43559: LD_VAR 0 2
43563: RET
// export function Last ( array ) ; begin
43564: LD_INT 0
43566: PPUSH
// if not array then
43567: LD_VAR 0 1
43571: NOT
43572: IFFALSE 43576
// exit ;
43574: GO 43592
// result := array [ array ] ;
43576: LD_ADDR_VAR 0 2
43580: PUSH
43581: LD_VAR 0 1
43585: PUSH
43586: LD_VAR 0 1
43590: ARRAY
43591: ST_TO_ADDR
// end ;
43592: LD_VAR 0 2
43596: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43597: LD_INT 0
43599: PPUSH
43600: PPUSH
// result := [ ] ;
43601: LD_ADDR_VAR 0 5
43605: PUSH
43606: EMPTY
43607: ST_TO_ADDR
// if not array then
43608: LD_VAR 0 1
43612: NOT
43613: IFFALSE 43617
// exit ;
43615: GO 43729
// for i := 1 to array do
43617: LD_ADDR_VAR 0 6
43621: PUSH
43622: DOUBLE
43623: LD_INT 1
43625: DEC
43626: ST_TO_ADDR
43627: LD_VAR 0 1
43631: PUSH
43632: FOR_TO
43633: IFFALSE 43727
// if array [ i ] [ index ] = value then
43635: LD_VAR 0 1
43639: PUSH
43640: LD_VAR 0 6
43644: ARRAY
43645: PUSH
43646: LD_VAR 0 2
43650: ARRAY
43651: PUSH
43652: LD_VAR 0 3
43656: EQUAL
43657: IFFALSE 43725
// begin if indexColumn then
43659: LD_VAR 0 4
43663: IFFALSE 43699
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43665: LD_ADDR_VAR 0 5
43669: PUSH
43670: LD_VAR 0 5
43674: PPUSH
43675: LD_VAR 0 1
43679: PUSH
43680: LD_VAR 0 6
43684: ARRAY
43685: PUSH
43686: LD_VAR 0 4
43690: ARRAY
43691: PPUSH
43692: CALL 38737 0 2
43696: ST_TO_ADDR
43697: GO 43725
// result := Join ( result , array [ i ] ) ;
43699: LD_ADDR_VAR 0 5
43703: PUSH
43704: LD_VAR 0 5
43708: PPUSH
43709: LD_VAR 0 1
43713: PUSH
43714: LD_VAR 0 6
43718: ARRAY
43719: PPUSH
43720: CALL 38737 0 2
43724: ST_TO_ADDR
// end ;
43725: GO 43632
43727: POP
43728: POP
// end ;
43729: LD_VAR 0 5
43733: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43734: LD_INT 0
43736: PPUSH
// if not vehicles or not parkingPoint then
43737: LD_VAR 0 1
43741: NOT
43742: IFTRUE 43751
43744: PUSH
43745: LD_VAR 0 2
43749: NOT
43750: OR
43751: IFFALSE 43755
// exit ;
43753: GO 43853
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43755: LD_ADDR_VAR 0 1
43759: PUSH
43760: LD_VAR 0 1
43764: PPUSH
43765: LD_INT 50
43767: PUSH
43768: EMPTY
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 92
43776: PUSH
43777: LD_VAR 0 2
43781: PUSH
43782: LD_INT 1
43784: ARRAY
43785: PUSH
43786: LD_VAR 0 2
43790: PUSH
43791: LD_INT 2
43793: ARRAY
43794: PUSH
43795: LD_INT 8
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PPUSH
43812: CALL_OW 72
43816: ST_TO_ADDR
// if not vehicles then
43817: LD_VAR 0 1
43821: NOT
43822: IFFALSE 43826
// exit ;
43824: GO 43853
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43826: LD_VAR 0 1
43830: PPUSH
43831: LD_VAR 0 2
43835: PUSH
43836: LD_INT 1
43838: ARRAY
43839: PPUSH
43840: LD_VAR 0 2
43844: PUSH
43845: LD_INT 2
43847: ARRAY
43848: PPUSH
43849: CALL_OW 111
// end ;
43853: LD_VAR 0 3
43857: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43858: LD_INT 0
43860: PPUSH
43861: PPUSH
43862: PPUSH
// if not side or not area then
43863: LD_VAR 0 1
43867: NOT
43868: IFTRUE 43877
43870: PUSH
43871: LD_VAR 0 2
43875: NOT
43876: OR
43877: IFFALSE 43881
// exit ;
43879: GO 44000
// tmp := AreaToList ( area , 0 ) ;
43881: LD_ADDR_VAR 0 5
43885: PUSH
43886: LD_VAR 0 2
43890: PPUSH
43891: LD_INT 0
43893: PPUSH
43894: CALL_OW 517
43898: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43899: LD_ADDR_VAR 0 4
43903: PUSH
43904: DOUBLE
43905: LD_INT 1
43907: DEC
43908: ST_TO_ADDR
43909: LD_VAR 0 5
43913: PUSH
43914: LD_INT 1
43916: ARRAY
43917: PUSH
43918: FOR_TO
43919: IFFALSE 43998
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43921: LD_VAR 0 5
43925: PUSH
43926: LD_INT 1
43928: ARRAY
43929: PUSH
43930: LD_VAR 0 4
43934: ARRAY
43935: PPUSH
43936: LD_VAR 0 5
43940: PUSH
43941: LD_INT 2
43943: ARRAY
43944: PUSH
43945: LD_VAR 0 4
43949: ARRAY
43950: PPUSH
43951: CALL_OW 351
43955: IFFALSE 43996
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43957: LD_VAR 0 5
43961: PUSH
43962: LD_INT 1
43964: ARRAY
43965: PUSH
43966: LD_VAR 0 4
43970: ARRAY
43971: PPUSH
43972: LD_VAR 0 5
43976: PUSH
43977: LD_INT 2
43979: ARRAY
43980: PUSH
43981: LD_VAR 0 4
43985: ARRAY
43986: PPUSH
43987: LD_VAR 0 1
43991: PPUSH
43992: CALL_OW 244
// end ;
43996: GO 43918
43998: POP
43999: POP
// end ;
44000: LD_VAR 0 3
44004: RET
// export function UniqueArray ( array ) ; var i ; begin
44005: LD_INT 0
44007: PPUSH
44008: PPUSH
// result := [ ] ;
44009: LD_ADDR_VAR 0 2
44013: PUSH
44014: EMPTY
44015: ST_TO_ADDR
// if not array then
44016: LD_VAR 0 1
44020: NOT
44021: IFFALSE 44025
// exit ;
44023: GO 44086
// for i := 1 to array do
44025: LD_ADDR_VAR 0 3
44029: PUSH
44030: DOUBLE
44031: LD_INT 1
44033: DEC
44034: ST_TO_ADDR
44035: LD_VAR 0 1
44039: PUSH
44040: FOR_TO
44041: IFFALSE 44084
// if not array [ i ] in result then
44043: LD_VAR 0 1
44047: PUSH
44048: LD_VAR 0 3
44052: ARRAY
44053: PUSH
44054: LD_VAR 0 2
44058: IN
44059: NOT
44060: IFFALSE 44082
// result := Join ( result , i ) ;
44062: LD_ADDR_VAR 0 2
44066: PUSH
44067: LD_VAR 0 2
44071: PPUSH
44072: LD_VAR 0 3
44076: PPUSH
44077: CALL 38737 0 2
44081: ST_TO_ADDR
44082: GO 44040
44084: POP
44085: POP
// end ;
44086: LD_VAR 0 2
44090: RET
