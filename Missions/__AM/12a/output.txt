// starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Action ;
  11: CALL 16 0 0
// end ; end_of_file
  15: END
// export function Action ; var John , Roth , veh ; begin
  16: LD_INT 0
  18: PPUSH
  19: PPUSH
  20: PPUSH
  21: PPUSH
// Video ( true ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL 38665 0 1
// PlaceSeeing ( 58 , 14 , 7 , - 26 ) ;
  29: LD_INT 58
  31: PPUSH
  32: LD_INT 14
  34: PPUSH
  35: LD_INT 7
  37: PPUSH
  38: LD_INT 26
  40: NEG
  41: PPUSH
  42: CALL_OW 330
// uc_side := 7 ;
  46: LD_ADDR_OWVAR 20
  50: PUSH
  51: LD_INT 7
  53: ST_TO_ADDR
// uc_nation := 1 ;
  54: LD_ADDR_OWVAR 21
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// John := NewCharacter ( JMM ) ;
  62: LD_ADDR_VAR 0 2
  66: PUSH
  67: LD_STRING JMM
  69: PPUSH
  70: CALL_OW 25
  74: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
  75: LD_ADDR_VAR 0 3
  79: PUSH
  80: LD_STRING Roth
  82: PPUSH
  83: CALL_OW 25
  87: ST_TO_ADDR
// SetDir ( John , 1 ) ;
  88: LD_VAR 0 2
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: CALL_OW 233
// SetDir ( Roth , 4 ) ;
 100: LD_VAR 0 3
 104: PPUSH
 105: LD_INT 4
 107: PPUSH
 108: CALL_OW 233
// PlaceUnitXY ( John , 55 , 14 , false ) ;
 112: LD_VAR 0 2
 116: PPUSH
 117: LD_INT 55
 119: PPUSH
 120: LD_INT 14
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: CALL_OW 48
// PlaceUnitXY ( Roth , 58 , 14 , false ) ;
 130: LD_VAR 0 3
 134: PPUSH
 135: LD_INT 58
 137: PPUSH
 138: LD_INT 14
 140: PPUSH
 141: LD_INT 0
 143: PPUSH
 144: CALL_OW 48
// ComTurnUnit ( John , Roth ) ;
 148: LD_VAR 0 2
 152: PPUSH
 153: LD_VAR 0 3
 157: PPUSH
 158: CALL_OW 119
// ComTurnUnit ( Roth , John ) ;
 162: LD_VAR 0 3
 166: PPUSH
 167: LD_VAR 0 2
 171: PPUSH
 172: CALL_OW 119
// CenterNowonUnits ( [ John , Roth ] ) ;
 176: LD_VAR 0 2
 180: PUSH
 181: LD_VAR 0 3
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PPUSH
 190: CALL_OW 87
// wait ( 0 0$0.5 ) ;
 194: LD_INT 18
 196: PPUSH
 197: CALL_OW 67
// Say ( Roth , DStart-Roth-1 ) ;
 201: LD_VAR 0 3
 205: PPUSH
 206: LD_STRING DStart-Roth-1
 208: PPUSH
 209: CALL_OW 88
// Say ( John , DStart-JMM-1 ) ;
 213: LD_VAR 0 2
 217: PPUSH
 218: LD_STRING DStart-JMM-1
 220: PPUSH
 221: CALL_OW 88
// Say ( Roth , DStart-Roth-2 ) ;
 225: LD_VAR 0 3
 229: PPUSH
 230: LD_STRING DStart-Roth-2
 232: PPUSH
 233: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 237: LD_INT 18
 239: PPUSH
 240: CALL_OW 67
// Say ( John , DStart-JMM-2 ) ;
 244: LD_VAR 0 2
 248: PPUSH
 249: LD_STRING DStart-JMM-2
 251: PPUSH
 252: CALL_OW 88
// Say ( Roth , DStart-Roth-3 ) ;
 256: LD_VAR 0 3
 260: PPUSH
 261: LD_STRING DStart-Roth-3
 263: PPUSH
 264: CALL_OW 88
// Say ( John , DStart-JMM-3 ) ;
 268: LD_VAR 0 2
 272: PPUSH
 273: LD_STRING DStart-JMM-3
 275: PPUSH
 276: CALL_OW 88
// uc_side := 1 ;
 280: LD_ADDR_OWVAR 20
 284: PUSH
 285: LD_INT 1
 287: ST_TO_ADDR
// uc_nation := 1 ;
 288: LD_ADDR_OWVAR 21
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 296: LD_ADDR_OWVAR 37
 300: PUSH
 301: LD_INT 2
 303: ST_TO_ADDR
// vc_engine := engine_siberite ;
 304: LD_ADDR_OWVAR 39
 308: PUSH
 309: LD_INT 3
 311: ST_TO_ADDR
// vc_control := control_manual ;
 312: LD_ADDR_OWVAR 38
 316: PUSH
 317: LD_INT 1
 319: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 320: LD_ADDR_OWVAR 40
 324: PUSH
 325: LD_INT 4
 327: ST_TO_ADDR
// veh := CreateVehicle ;
 328: LD_ADDR_VAR 0 4
 332: PUSH
 333: CALL_OW 45
 337: ST_TO_ADDR
// PlaceUnitXY ( veh , 43 , 41 , false ) ;
 338: LD_VAR 0 4
 342: PPUSH
 343: LD_INT 43
 345: PPUSH
 346: LD_INT 41
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 48
// PrepareMechanic ( false , 10 ) ;
 356: LD_INT 0
 358: PPUSH
 359: LD_INT 10
 361: PPUSH
 362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
 366: CALL_OW 44
 370: PPUSH
 371: LD_VAR 0 4
 375: PPUSH
 376: CALL_OW 52
// ComMoveXY ( veh , 24 , 2 ) ;
 380: LD_VAR 0 4
 384: PPUSH
 385: LD_INT 24
 387: PPUSH
 388: LD_INT 2
 390: PPUSH
 391: CALL_OW 111
// Say ( Roth , DStart-Roth-4 ) ;
 395: LD_VAR 0 3
 399: PPUSH
 400: LD_STRING DStart-Roth-4
 402: PPUSH
 403: CALL_OW 88
// Say ( John , DStart-JMM-4 ) ;
 407: LD_VAR 0 2
 411: PPUSH
 412: LD_STRING DStart-JMM-4
 414: PPUSH
 415: CALL_OW 88
// Say ( Roth , DStart-Roth-5 ) ;
 419: LD_VAR 0 3
 423: PPUSH
 424: LD_STRING DStart-Roth-5
 426: PPUSH
 427: CALL_OW 88
// Say ( John , DStart-JMM-5 ) ;
 431: LD_VAR 0 2
 435: PPUSH
 436: LD_STRING DStart-JMM-5
 438: PPUSH
 439: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 443: LD_INT 10
 445: PPUSH
 446: CALL_OW 67
// Say ( Roth , DStart-Roth-6 ) ;
 450: LD_VAR 0 3
 454: PPUSH
 455: LD_STRING DStart-Roth-6
 457: PPUSH
 458: CALL_OW 88
// wait ( 0 0$0.1 ) ;
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 67
// ComMoveXY ( John , 32 , 14 ) ;
 469: LD_VAR 0 2
 473: PPUSH
 474: LD_INT 32
 476: PPUSH
 477: LD_INT 14
 479: PPUSH
 480: CALL_OW 111
// wait ( 0 0$2 ) ;
 484: LD_INT 70
 486: PPUSH
 487: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
 491: LD_INT 1
 493: PPUSH
 494: LD_STRING %_cont
 496: PPUSH
 497: CALL_OW 340
// end ;
 501: LD_VAR 0 1
 505: RET
// every 0 0$1 trigger HexInfo ( 24 , 2 ) do
 506: LD_INT 24
 508: PPUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 428
 516: IFFALSE 536
 518: GO 520
 520: DISABLE
// RemoveUnit ( HexInfo ( 24 , 2 ) ) ; end_of_file
 521: LD_INT 24
 523: PPUSH
 524: LD_INT 2
 526: PPUSH
 527: CALL_OW 428
 531: PPUSH
 532: CALL_OW 64
 536: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// if exist_mode then
 541: LD_VAR 0 2
 545: IFFALSE 591
// begin unit := CreateCharacter ( prefix & ident ) ;
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: LD_VAR 0 3
 556: PUSH
 557: LD_VAR 0 1
 561: STR
 562: PPUSH
 563: CALL_OW 34
 567: ST_TO_ADDR
// if unit then
 568: LD_VAR 0 5
 572: IFFALSE 589
// DeleteCharacters ( prefix & ident ) ;
 574: LD_VAR 0 3
 578: PUSH
 579: LD_VAR 0 1
 583: STR
 584: PPUSH
 585: CALL_OW 40
// end else
 589: GO 606
// unit := NewCharacter ( ident ) ;
 591: LD_ADDR_VAR 0 5
 595: PUSH
 596: LD_VAR 0 1
 600: PPUSH
 601: CALL_OW 25
 605: ST_TO_ADDR
// result := unit ;
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 5
 615: ST_TO_ADDR
// end ;
 616: LD_VAR 0 4
 620: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// if exist_mode then
 625: LD_VAR 0 2
 629: IFFALSE 654
// unit := CreateCharacter ( prefix & ident ) else
 631: LD_ADDR_VAR 0 5
 635: PUSH
 636: LD_VAR 0 3
 640: PUSH
 641: LD_VAR 0 1
 645: STR
 646: PPUSH
 647: CALL_OW 34
 651: ST_TO_ADDR
 652: GO 669
// unit := NewCharacter ( ident ) ;
 654: LD_ADDR_VAR 0 5
 658: PUSH
 659: LD_VAR 0 1
 663: PPUSH
 664: CALL_OW 25
 668: ST_TO_ADDR
// result := unit ;
 669: LD_ADDR_VAR 0 4
 673: PUSH
 674: LD_VAR 0 5
 678: ST_TO_ADDR
// end ;
 679: LD_VAR 0 4
 683: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 684: LD_INT 0
 686: PPUSH
 687: PPUSH
// if not side or not nation then
 688: LD_VAR 0 1
 692: NOT
 693: IFTRUE 702
 695: PUSH
 696: LD_VAR 0 2
 700: NOT
 701: OR
 702: IFFALSE 706
// exit ;
 704: GO 1500
// case nation of nation_american :
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 1
 713: DOUBLE
 714: EQUAL
 715: IFTRUE 719
 717: GO 941
 719: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
 720: LD_ADDR_VAR 0 4
 724: PUSH
 725: LD_INT 35
 727: PUSH
 728: LD_INT 45
 730: PUSH
 731: LD_INT 46
 733: PUSH
 734: LD_INT 47
 736: PUSH
 737: LD_INT 82
 739: PUSH
 740: LD_INT 83
 742: PUSH
 743: LD_INT 84
 745: PUSH
 746: LD_INT 85
 748: PUSH
 749: LD_INT 86
 751: PUSH
 752: LD_INT 1
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 6
 760: PUSH
 761: LD_INT 15
 763: PUSH
 764: LD_INT 16
 766: PUSH
 767: LD_INT 7
 769: PUSH
 770: LD_INT 12
 772: PUSH
 773: LD_INT 13
 775: PUSH
 776: LD_INT 10
 778: PUSH
 779: LD_INT 14
 781: PUSH
 782: LD_INT 20
 784: PUSH
 785: LD_INT 21
 787: PUSH
 788: LD_INT 22
 790: PUSH
 791: LD_INT 25
 793: PUSH
 794: LD_INT 32
 796: PUSH
 797: LD_INT 27
 799: PUSH
 800: LD_INT 36
 802: PUSH
 803: LD_INT 69
 805: PUSH
 806: LD_INT 39
 808: PUSH
 809: LD_INT 34
 811: PUSH
 812: LD_INT 40
 814: PUSH
 815: LD_INT 48
 817: PUSH
 818: LD_INT 49
 820: PUSH
 821: LD_INT 50
 823: PUSH
 824: LD_INT 51
 826: PUSH
 827: LD_INT 52
 829: PUSH
 830: LD_INT 53
 832: PUSH
 833: LD_INT 54
 835: PUSH
 836: LD_INT 55
 838: PUSH
 839: LD_INT 56
 841: PUSH
 842: LD_INT 57
 844: PUSH
 845: LD_INT 58
 847: PUSH
 848: LD_INT 59
 850: PUSH
 851: LD_INT 60
 853: PUSH
 854: LD_INT 61
 856: PUSH
 857: LD_INT 62
 859: PUSH
 860: LD_INT 80
 862: PUSH
 863: LD_INT 82
 865: PUSH
 866: LD_INT 83
 868: PUSH
 869: LD_INT 84
 871: PUSH
 872: LD_INT 85
 874: PUSH
 875: LD_INT 86
 877: PUSH
 878: LD_INT 90
 880: PUSH
 881: LD_INT 93
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: LIST
 938: ST_TO_ADDR
 939: GO 1422
 941: LD_INT 2
 943: DOUBLE
 944: EQUAL
 945: IFTRUE 949
 947: GO 1183
 949: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
 950: LD_ADDR_VAR 0 4
 954: PUSH
 955: LD_INT 35
 957: PUSH
 958: LD_INT 45
 960: PUSH
 961: LD_INT 46
 963: PUSH
 964: LD_INT 47
 966: PUSH
 967: LD_INT 82
 969: PUSH
 970: LD_INT 83
 972: PUSH
 973: LD_INT 84
 975: PUSH
 976: LD_INT 85
 978: PUSH
 979: LD_INT 87
 981: PUSH
 982: LD_INT 70
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 11
 990: PUSH
 991: LD_INT 3
 993: PUSH
 994: LD_INT 4
 996: PUSH
 997: LD_INT 5
 999: PUSH
1000: LD_INT 6
1002: PUSH
1003: LD_INT 15
1005: PUSH
1006: LD_INT 18
1008: PUSH
1009: LD_INT 7
1011: PUSH
1012: LD_INT 17
1014: PUSH
1015: LD_INT 8
1017: PUSH
1018: LD_INT 20
1020: PUSH
1021: LD_INT 21
1023: PUSH
1024: LD_INT 22
1026: PUSH
1027: LD_INT 72
1029: PUSH
1030: LD_INT 26
1032: PUSH
1033: LD_INT 69
1035: PUSH
1036: LD_INT 39
1038: PUSH
1039: LD_INT 40
1041: PUSH
1042: LD_INT 41
1044: PUSH
1045: LD_INT 42
1047: PUSH
1048: LD_INT 43
1050: PUSH
1051: LD_INT 48
1053: PUSH
1054: LD_INT 49
1056: PUSH
1057: LD_INT 50
1059: PUSH
1060: LD_INT 51
1062: PUSH
1063: LD_INT 52
1065: PUSH
1066: LD_INT 53
1068: PUSH
1069: LD_INT 54
1071: PUSH
1072: LD_INT 55
1074: PUSH
1075: LD_INT 56
1077: PUSH
1078: LD_INT 60
1080: PUSH
1081: LD_INT 61
1083: PUSH
1084: LD_INT 62
1086: PUSH
1087: LD_INT 66
1089: PUSH
1090: LD_INT 67
1092: PUSH
1093: LD_INT 68
1095: PUSH
1096: LD_INT 81
1098: PUSH
1099: LD_INT 82
1101: PUSH
1102: LD_INT 83
1104: PUSH
1105: LD_INT 84
1107: PUSH
1108: LD_INT 85
1110: PUSH
1111: LD_INT 87
1113: PUSH
1114: LD_INT 88
1116: PUSH
1117: LD_INT 92
1119: PUSH
1120: LD_INT 94
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: ST_TO_ADDR
1181: GO 1422
1183: LD_INT 3
1185: DOUBLE
1186: EQUAL
1187: IFTRUE 1191
1189: GO 1421
1191: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_INT 46
1199: PUSH
1200: LD_INT 47
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 2
1208: PUSH
1209: LD_INT 82
1211: PUSH
1212: LD_INT 83
1214: PUSH
1215: LD_INT 84
1217: PUSH
1218: LD_INT 85
1220: PUSH
1221: LD_INT 86
1223: PUSH
1224: LD_INT 11
1226: PUSH
1227: LD_INT 9
1229: PUSH
1230: LD_INT 20
1232: PUSH
1233: LD_INT 19
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 24
1241: PUSH
1242: LD_INT 22
1244: PUSH
1245: LD_INT 25
1247: PUSH
1248: LD_INT 28
1250: PUSH
1251: LD_INT 29
1253: PUSH
1254: LD_INT 30
1256: PUSH
1257: LD_INT 31
1259: PUSH
1260: LD_INT 37
1262: PUSH
1263: LD_INT 38
1265: PUSH
1266: LD_INT 32
1268: PUSH
1269: LD_INT 27
1271: PUSH
1272: LD_INT 33
1274: PUSH
1275: LD_INT 69
1277: PUSH
1278: LD_INT 39
1280: PUSH
1281: LD_INT 34
1283: PUSH
1284: LD_INT 40
1286: PUSH
1287: LD_INT 71
1289: PUSH
1290: LD_INT 23
1292: PUSH
1293: LD_INT 44
1295: PUSH
1296: LD_INT 48
1298: PUSH
1299: LD_INT 49
1301: PUSH
1302: LD_INT 50
1304: PUSH
1305: LD_INT 51
1307: PUSH
1308: LD_INT 52
1310: PUSH
1311: LD_INT 53
1313: PUSH
1314: LD_INT 54
1316: PUSH
1317: LD_INT 55
1319: PUSH
1320: LD_INT 56
1322: PUSH
1323: LD_INT 57
1325: PUSH
1326: LD_INT 58
1328: PUSH
1329: LD_INT 59
1331: PUSH
1332: LD_INT 63
1334: PUSH
1335: LD_INT 64
1337: PUSH
1338: LD_INT 65
1340: PUSH
1341: LD_INT 82
1343: PUSH
1344: LD_INT 83
1346: PUSH
1347: LD_INT 84
1349: PUSH
1350: LD_INT 85
1352: PUSH
1353: LD_INT 86
1355: PUSH
1356: LD_INT 89
1358: PUSH
1359: LD_INT 91
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
1419: GO 1422
1421: POP
// if state > - 1 and state < 3 then
1422: LD_VAR 0 3
1426: PUSH
1427: LD_INT 1
1429: NEG
1430: GREATER
1431: IFFALSE 1443
1433: PUSH
1434: LD_VAR 0 3
1438: PUSH
1439: LD_INT 3
1441: LESS
1442: AND
1443: IFFALSE 1500
// for i in result do
1445: LD_ADDR_VAR 0 5
1449: PUSH
1450: LD_VAR 0 4
1454: PUSH
1455: FOR_IN
1456: IFFALSE 1498
// if GetTech ( i , side ) <> state then
1458: LD_VAR 0 5
1462: PPUSH
1463: LD_VAR 0 1
1467: PPUSH
1468: CALL_OW 321
1472: PUSH
1473: LD_VAR 0 3
1477: NONEQUAL
1478: IFFALSE 1496
// result := result diff i ;
1480: LD_ADDR_VAR 0 4
1484: PUSH
1485: LD_VAR 0 4
1489: PUSH
1490: LD_VAR 0 5
1494: DIFF
1495: ST_TO_ADDR
1496: GO 1455
1498: POP
1499: POP
// end ;
1500: LD_VAR 0 4
1504: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
// result := true ;
1510: LD_ADDR_VAR 0 3
1514: PUSH
1515: LD_INT 1
1517: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1518: LD_ADDR_VAR 0 5
1522: PUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 480
1532: ST_TO_ADDR
// if not tmp then
1533: LD_VAR 0 5
1537: NOT
1538: IFFALSE 1542
// exit ;
1540: GO 1591
// for i in tmp do
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_VAR 0 5
1551: PUSH
1552: FOR_IN
1553: IFFALSE 1589
// if GetTech ( i , side ) <> state_researched then
1555: LD_VAR 0 4
1559: PPUSH
1560: LD_VAR 0 1
1564: PPUSH
1565: CALL_OW 321
1569: PUSH
1570: LD_INT 2
1572: NONEQUAL
1573: IFFALSE 1587
// begin result := false ;
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 0
1582: ST_TO_ADDR
// exit ;
1583: POP
1584: POP
1585: GO 1591
// end ;
1587: GO 1552
1589: POP
1590: POP
// end ;
1591: LD_VAR 0 3
1595: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1596: LD_INT 0
1598: PPUSH
1599: PPUSH
1600: PPUSH
1601: PPUSH
1602: PPUSH
1603: PPUSH
1604: PPUSH
1605: PPUSH
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
1610: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1611: LD_VAR 0 1
1615: NOT
1616: IFTRUE 1633
1618: PUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 257
1628: PUSH
1629: LD_INT 9
1631: NONEQUAL
1632: OR
1633: IFFALSE 1637
// exit ;
1635: GO 2216
// side := GetSide ( unit ) ;
1637: LD_ADDR_VAR 0 9
1641: PUSH
1642: LD_VAR 0 1
1646: PPUSH
1647: CALL_OW 255
1651: ST_TO_ADDR
// tech_space := tech_spacanom ;
1652: LD_ADDR_VAR 0 12
1656: PUSH
1657: LD_INT 29
1659: ST_TO_ADDR
// tech_time := tech_taurad ;
1660: LD_ADDR_VAR 0 13
1664: PUSH
1665: LD_INT 28
1667: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1668: LD_ADDR_VAR 0 11
1672: PUSH
1673: LD_VAR 0 1
1677: PPUSH
1678: CALL_OW 310
1682: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1683: LD_VAR 0 11
1687: PPUSH
1688: CALL_OW 247
1692: PUSH
1693: LD_INT 2
1695: EQUAL
1696: IFFALSE 1700
// exit ;
1698: GO 2216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1700: LD_ADDR_VAR 0 8
1704: PUSH
1705: LD_INT 81
1707: PUSH
1708: LD_VAR 0 9
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: LD_INT 21
1722: PUSH
1723: LD_INT 3
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PPUSH
1738: CALL_OW 69
1742: ST_TO_ADDR
// if not tmp then
1743: LD_VAR 0 8
1747: NOT
1748: IFFALSE 1752
// exit ;
1750: GO 2216
// if in_unit then
1752: LD_VAR 0 11
1756: IFFALSE 1780
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1758: LD_ADDR_VAR 0 10
1762: PUSH
1763: LD_VAR 0 8
1767: PPUSH
1768: LD_VAR 0 11
1772: PPUSH
1773: CALL_OW 74
1777: ST_TO_ADDR
1778: GO 1800
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1780: LD_ADDR_VAR 0 10
1784: PUSH
1785: LD_VAR 0 8
1789: PPUSH
1790: LD_VAR 0 1
1794: PPUSH
1795: CALL_OW 74
1799: ST_TO_ADDR
// if not enemy then
1800: LD_VAR 0 10
1804: NOT
1805: IFFALSE 1809
// exit ;
1807: GO 2216
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1809: LD_VAR 0 11
1813: IFFALSE 1835
1815: PUSH
1816: LD_VAR 0 11
1820: PPUSH
1821: LD_VAR 0 10
1825: PPUSH
1826: CALL_OW 296
1830: PUSH
1831: LD_INT 13
1833: GREATER
1834: AND
1835: IFTRUE 1857
1837: PUSH
1838: LD_VAR 0 1
1842: PPUSH
1843: LD_VAR 0 10
1847: PPUSH
1848: CALL_OW 296
1852: PUSH
1853: LD_INT 12
1855: GREATER
1856: OR
1857: IFFALSE 1861
// exit ;
1859: GO 2216
// missile := [ 1 ] ;
1861: LD_ADDR_VAR 0 14
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: EMPTY
1870: LIST
1871: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1872: LD_VAR 0 9
1876: PPUSH
1877: LD_VAR 0 12
1881: PPUSH
1882: CALL_OW 325
1886: IFFALSE 1915
// missile := Replace ( missile , missile + 1 , 2 ) ;
1888: LD_ADDR_VAR 0 14
1892: PUSH
1893: LD_VAR 0 14
1897: PPUSH
1898: LD_VAR 0 14
1902: PUSH
1903: LD_INT 1
1905: PLUS
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: CALL_OW 1
1914: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1915: LD_VAR 0 9
1919: PPUSH
1920: LD_VAR 0 13
1924: PPUSH
1925: CALL_OW 325
1929: IFFALSE 1953
1931: PUSH
1932: LD_VAR 0 10
1936: PPUSH
1937: CALL_OW 255
1941: PPUSH
1942: LD_VAR 0 13
1946: PPUSH
1947: CALL_OW 325
1951: NOT
1952: AND
1953: IFFALSE 1982
// missile := Replace ( missile , missile + 1 , 3 ) ;
1955: LD_ADDR_VAR 0 14
1959: PUSH
1960: LD_VAR 0 14
1964: PPUSH
1965: LD_VAR 0 14
1969: PUSH
1970: LD_INT 1
1972: PLUS
1973: PPUSH
1974: LD_INT 3
1976: PPUSH
1977: CALL_OW 1
1981: ST_TO_ADDR
// if missile < 2 then
1982: LD_VAR 0 14
1986: PUSH
1987: LD_INT 2
1989: LESS
1990: IFFALSE 1994
// exit ;
1992: GO 2216
// x := GetX ( enemy ) ;
1994: LD_ADDR_VAR 0 4
1998: PUSH
1999: LD_VAR 0 10
2003: PPUSH
2004: CALL_OW 250
2008: ST_TO_ADDR
// y := GetY ( enemy ) ;
2009: LD_ADDR_VAR 0 5
2013: PUSH
2014: LD_VAR 0 10
2018: PPUSH
2019: CALL_OW 251
2023: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2024: LD_ADDR_VAR 0 6
2028: PUSH
2029: LD_VAR 0 4
2033: PUSH
2034: LD_INT 1
2036: NEG
2037: PPUSH
2038: LD_INT 1
2040: PPUSH
2041: CALL_OW 12
2045: PLUS
2046: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2047: LD_ADDR_VAR 0 7
2051: PUSH
2052: LD_VAR 0 5
2056: PUSH
2057: LD_INT 1
2059: NEG
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 12
2068: PLUS
2069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2070: LD_VAR 0 6
2074: PPUSH
2075: LD_VAR 0 7
2079: PPUSH
2080: CALL_OW 488
2084: NOT
2085: IFFALSE 2107
// begin _x := x ;
2087: LD_ADDR_VAR 0 6
2091: PUSH
2092: LD_VAR 0 4
2096: ST_TO_ADDR
// _y := y ;
2097: LD_ADDR_VAR 0 7
2101: PUSH
2102: LD_VAR 0 5
2106: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_VAR 0 14
2119: PPUSH
2120: CALL_OW 12
2124: ST_TO_ADDR
// case i of 1 :
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: DOUBLE
2133: EQUAL
2134: IFTRUE 2138
2136: GO 2155
2138: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2139: LD_VAR 0 1
2143: PPUSH
2144: LD_VAR 0 10
2148: PPUSH
2149: CALL_OW 115
2153: GO 2216
2155: LD_INT 2
2157: DOUBLE
2158: EQUAL
2159: IFTRUE 2163
2161: GO 2185
2163: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2164: LD_VAR 0 1
2168: PPUSH
2169: LD_VAR 0 6
2173: PPUSH
2174: LD_VAR 0 7
2178: PPUSH
2179: CALL_OW 153
2183: GO 2216
2185: LD_INT 3
2187: DOUBLE
2188: EQUAL
2189: IFTRUE 2193
2191: GO 2215
2193: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2194: LD_VAR 0 1
2198: PPUSH
2199: LD_VAR 0 6
2203: PPUSH
2204: LD_VAR 0 7
2208: PPUSH
2209: CALL_OW 154
2213: GO 2216
2215: POP
// end ;
2216: LD_VAR 0 2
2220: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
2228: PPUSH
// if not unit or not building then
2229: LD_VAR 0 1
2233: NOT
2234: IFTRUE 2243
2236: PUSH
2237: LD_VAR 0 2
2241: NOT
2242: OR
2243: IFFALSE 2247
// exit ;
2245: GO 2405
// x := GetX ( building ) ;
2247: LD_ADDR_VAR 0 5
2251: PUSH
2252: LD_VAR 0 2
2256: PPUSH
2257: CALL_OW 250
2261: ST_TO_ADDR
// y := GetY ( building ) ;
2262: LD_ADDR_VAR 0 6
2266: PUSH
2267: LD_VAR 0 2
2271: PPUSH
2272: CALL_OW 251
2276: ST_TO_ADDR
// for i := 0 to 5 do
2277: LD_ADDR_VAR 0 4
2281: PUSH
2282: DOUBLE
2283: LD_INT 0
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 5
2289: PUSH
2290: FOR_TO
2291: IFFALSE 2403
// begin _x := ShiftX ( x , i , 3 ) ;
2293: LD_ADDR_VAR 0 7
2297: PUSH
2298: LD_VAR 0 5
2302: PPUSH
2303: LD_VAR 0 4
2307: PPUSH
2308: LD_INT 3
2310: PPUSH
2311: CALL_OW 272
2315: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2316: LD_ADDR_VAR 0 8
2320: PUSH
2321: LD_VAR 0 6
2325: PPUSH
2326: LD_VAR 0 4
2330: PPUSH
2331: LD_INT 3
2333: PPUSH
2334: CALL_OW 273
2338: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2339: LD_VAR 0 7
2343: PPUSH
2344: LD_VAR 0 8
2348: PPUSH
2349: CALL_OW 488
2353: NOT
2354: IFFALSE 2358
// continue ;
2356: GO 2290
// if HexInfo ( _x , _y ) = 0 then
2358: LD_VAR 0 7
2362: PPUSH
2363: LD_VAR 0 8
2367: PPUSH
2368: CALL_OW 428
2372: PUSH
2373: LD_INT 0
2375: EQUAL
2376: IFFALSE 2401
// begin ComMoveXY ( unit , _x , _y ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_VAR 0 7
2387: PPUSH
2388: LD_VAR 0 8
2392: PPUSH
2393: CALL_OW 111
// exit ;
2397: POP
2398: POP
2399: GO 2405
// end ; end ;
2401: GO 2290
2403: POP
2404: POP
// end ;
2405: LD_VAR 0 3
2409: RET
// export function ScanBase ( side , base_area ) ; begin
2410: LD_INT 0
2412: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2413: LD_ADDR_VAR 0 3
2417: PUSH
2418: LD_VAR 0 2
2422: PPUSH
2423: LD_INT 81
2425: PUSH
2426: LD_VAR 0 1
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PPUSH
2435: CALL_OW 70
2439: ST_TO_ADDR
// end ;
2440: LD_VAR 0 3
2444: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2445: LD_INT 0
2447: PPUSH
2448: PPUSH
2449: PPUSH
2450: PPUSH
// result := false ;
2451: LD_ADDR_VAR 0 2
2455: PUSH
2456: LD_INT 0
2458: ST_TO_ADDR
// side := GetSide ( unit ) ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 1
2468: PPUSH
2469: CALL_OW 255
2473: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2474: LD_ADDR_VAR 0 4
2478: PUSH
2479: LD_VAR 0 1
2483: PPUSH
2484: CALL_OW 248
2488: ST_TO_ADDR
// case nat of 1 :
2489: LD_VAR 0 4
2493: PUSH
2494: LD_INT 1
2496: DOUBLE
2497: EQUAL
2498: IFTRUE 2502
2500: GO 2513
2502: POP
// tech := tech_lassight ; 2 :
2503: LD_ADDR_VAR 0 5
2507: PUSH
2508: LD_INT 12
2510: ST_TO_ADDR
2511: GO 2552
2513: LD_INT 2
2515: DOUBLE
2516: EQUAL
2517: IFTRUE 2521
2519: GO 2532
2521: POP
// tech := tech_mortar ; 3 :
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 41
2529: ST_TO_ADDR
2530: GO 2552
2532: LD_INT 3
2534: DOUBLE
2535: EQUAL
2536: IFTRUE 2540
2538: GO 2551
2540: POP
// tech := tech_bazooka ; end ;
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_INT 44
2548: ST_TO_ADDR
2549: GO 2552
2551: POP
// if Researched ( side , tech ) then
2552: LD_VAR 0 3
2556: PPUSH
2557: LD_VAR 0 5
2561: PPUSH
2562: CALL_OW 325
2566: IFFALSE 2593
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2568: LD_ADDR_VAR 0 2
2572: PUSH
2573: LD_INT 5
2575: PUSH
2576: LD_INT 8
2578: PUSH
2579: LD_INT 9
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: LIST
2586: PUSH
2587: LD_VAR 0 4
2591: ARRAY
2592: ST_TO_ADDR
// end ;
2593: LD_VAR 0 2
2597: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2598: LD_INT 0
2600: PPUSH
2601: PPUSH
2602: PPUSH
// if not mines then
2603: LD_VAR 0 2
2607: NOT
2608: IFFALSE 2612
// exit ;
2610: GO 2756
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2612: LD_ADDR_VAR 0 5
2616: PUSH
2617: LD_INT 81
2619: PUSH
2620: LD_VAR 0 1
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 3
2631: PUSH
2632: LD_INT 21
2634: PUSH
2635: LD_INT 3
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PPUSH
2650: CALL_OW 69
2654: ST_TO_ADDR
// for i in mines do
2655: LD_ADDR_VAR 0 4
2659: PUSH
2660: LD_VAR 0 2
2664: PUSH
2665: FOR_IN
2666: IFFALSE 2754
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2668: LD_VAR 0 4
2672: PUSH
2673: LD_INT 1
2675: ARRAY
2676: PPUSH
2677: LD_VAR 0 4
2681: PUSH
2682: LD_INT 2
2684: ARRAY
2685: PPUSH
2686: CALL_OW 458
2690: NOT
2691: IFFALSE 2695
// continue ;
2693: GO 2665
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2695: LD_VAR 0 4
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PPUSH
2704: LD_VAR 0 4
2708: PUSH
2709: LD_INT 2
2711: ARRAY
2712: PPUSH
2713: CALL_OW 428
2717: PUSH
2718: LD_VAR 0 5
2722: IN
2723: IFFALSE 2752
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2725: LD_VAR 0 4
2729: PUSH
2730: LD_INT 1
2732: ARRAY
2733: PPUSH
2734: LD_VAR 0 4
2738: PUSH
2739: LD_INT 2
2741: ARRAY
2742: PPUSH
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 456
// end ;
2752: GO 2665
2754: POP
2755: POP
// end ;
2756: LD_VAR 0 3
2760: RET
// export function Count ( array ) ; begin
2761: LD_INT 0
2763: PPUSH
// result := array + 0 ;
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_VAR 0 1
2773: PUSH
2774: LD_INT 0
2776: PLUS
2777: ST_TO_ADDR
// end ;
2778: LD_VAR 0 2
2782: RET
// export function IsEmpty ( building ) ; begin
2783: LD_INT 0
2785: PPUSH
// if not building then
2786: LD_VAR 0 1
2790: NOT
2791: IFFALSE 2795
// exit ;
2793: GO 2838
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2795: LD_ADDR_VAR 0 2
2799: PUSH
2800: LD_VAR 0 1
2804: PUSH
2805: LD_INT 22
2807: PUSH
2808: LD_VAR 0 1
2812: PPUSH
2813: CALL_OW 255
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 58
2824: PUSH
2825: EMPTY
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: IN
2837: ST_TO_ADDR
// end ;
2838: LD_VAR 0 2
2842: RET
// export function IsNotFull ( building ) ; var places ; begin
2843: LD_INT 0
2845: PPUSH
2846: PPUSH
// if not building then
2847: LD_VAR 0 1
2851: NOT
2852: IFFALSE 2856
// exit ;
2854: GO 2884
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: LD_VAR 0 1
2865: PPUSH
2866: LD_INT 3
2868: PUSH
2869: LD_INT 62
2871: PUSH
2872: EMPTY
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 72
2883: ST_TO_ADDR
// end ;
2884: LD_VAR 0 2
2888: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
2894: PPUSH
// tmp := [ ] ;
2895: LD_ADDR_VAR 0 3
2899: PUSH
2900: EMPTY
2901: ST_TO_ADDR
// list := [ ] ;
2902: LD_ADDR_VAR 0 5
2906: PUSH
2907: EMPTY
2908: ST_TO_ADDR
// for i = 16 to 25 do
2909: LD_ADDR_VAR 0 4
2913: PUSH
2914: DOUBLE
2915: LD_INT 16
2917: DEC
2918: ST_TO_ADDR
2919: LD_INT 25
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2996
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2925: LD_ADDR_VAR 0 3
2929: PUSH
2930: LD_VAR 0 3
2934: PUSH
2935: LD_INT 22
2937: PUSH
2938: LD_VAR 0 1
2942: PPUSH
2943: CALL_OW 255
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: LD_INT 91
2954: PUSH
2955: LD_VAR 0 1
2959: PUSH
2960: LD_INT 6
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 30
2970: PUSH
2971: LD_VAR 0 4
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: LIST
2984: PUSH
2985: EMPTY
2986: LIST
2987: PPUSH
2988: CALL_OW 69
2992: ADD
2993: ST_TO_ADDR
2994: GO 2922
2996: POP
2997: POP
// for i = 1 to tmp do
2998: LD_ADDR_VAR 0 4
3002: PUSH
3003: DOUBLE
3004: LD_INT 1
3006: DEC
3007: ST_TO_ADDR
3008: LD_VAR 0 3
3012: PUSH
3013: FOR_TO
3014: IFFALSE 3102
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3016: LD_ADDR_VAR 0 5
3020: PUSH
3021: LD_VAR 0 5
3025: PUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_VAR 0 4
3035: ARRAY
3036: PPUSH
3037: CALL_OW 266
3041: PUSH
3042: LD_VAR 0 3
3046: PUSH
3047: LD_VAR 0 4
3051: ARRAY
3052: PPUSH
3053: CALL_OW 250
3057: PUSH
3058: LD_VAR 0 3
3062: PUSH
3063: LD_VAR 0 4
3067: ARRAY
3068: PPUSH
3069: CALL_OW 251
3073: PUSH
3074: LD_VAR 0 3
3078: PUSH
3079: LD_VAR 0 4
3083: ARRAY
3084: PPUSH
3085: CALL_OW 254
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: ADD
3099: ST_TO_ADDR
3100: GO 3013
3102: POP
3103: POP
// result := list ;
3104: LD_ADDR_VAR 0 2
3108: PUSH
3109: LD_VAR 0 5
3113: ST_TO_ADDR
// end ;
3114: LD_VAR 0 2
3118: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3119: LD_INT 0
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
// if not factory then
3128: LD_VAR 0 1
3132: NOT
3133: IFFALSE 3137
// exit ;
3135: GO 3740
// if control = control_apeman then
3137: LD_VAR 0 4
3141: PUSH
3142: LD_INT 5
3144: EQUAL
3145: IFFALSE 3254
// begin tmp := UnitsInside ( factory ) ;
3147: LD_ADDR_VAR 0 8
3151: PUSH
3152: LD_VAR 0 1
3156: PPUSH
3157: CALL_OW 313
3161: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3162: LD_VAR 0 8
3166: PPUSH
3167: LD_INT 25
3169: PUSH
3170: LD_INT 12
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PPUSH
3177: CALL_OW 72
3181: NOT
3182: IFFALSE 3192
// control := control_manual ;
3184: LD_ADDR_VAR 0 4
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3192: LD_ADDR_VAR 0 8
3196: PUSH
3197: LD_VAR 0 1
3201: PPUSH
3202: CALL 2889 0 1
3206: ST_TO_ADDR
// if tmp then
3207: LD_VAR 0 8
3211: IFFALSE 3254
// begin for i in tmp do
3213: LD_ADDR_VAR 0 7
3217: PUSH
3218: LD_VAR 0 8
3222: PUSH
3223: FOR_IN
3224: IFFALSE 3252
// if i [ 1 ] = b_ext_radio then
3226: LD_VAR 0 7
3230: PUSH
3231: LD_INT 1
3233: ARRAY
3234: PUSH
3235: LD_INT 22
3237: EQUAL
3238: IFFALSE 3250
// begin control := control_remote ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_INT 2
3247: ST_TO_ADDR
// break ;
3248: GO 3252
// end ;
3250: GO 3223
3252: POP
3253: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3254: LD_VAR 0 1
3258: PPUSH
3259: LD_VAR 0 2
3263: PPUSH
3264: LD_VAR 0 3
3268: PPUSH
3269: LD_VAR 0 4
3273: PPUSH
3274: LD_VAR 0 5
3278: PPUSH
3279: CALL_OW 448
3283: IFFALSE 3318
// begin result := [ chassis , engine , control , weapon ] ;
3285: LD_ADDR_VAR 0 6
3289: PUSH
3290: LD_VAR 0 2
3294: PUSH
3295: LD_VAR 0 3
3299: PUSH
3300: LD_VAR 0 4
3304: PUSH
3305: LD_VAR 0 5
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: ST_TO_ADDR
// exit ;
3316: GO 3740
// end ; _chassis := AvailableChassisList ( factory ) ;
3318: LD_ADDR_VAR 0 9
3322: PUSH
3323: LD_VAR 0 1
3327: PPUSH
3328: CALL_OW 475
3332: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3333: LD_ADDR_VAR 0 11
3337: PUSH
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 476
3347: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3348: LD_ADDR_VAR 0 12
3352: PUSH
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL_OW 477
3362: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3363: LD_ADDR_VAR 0 10
3367: PUSH
3368: LD_VAR 0 1
3372: PPUSH
3373: CALL_OW 478
3377: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3378: LD_VAR 0 9
3382: NOT
3383: IFTRUE 3392
3385: PUSH
3386: LD_VAR 0 11
3390: NOT
3391: OR
3392: IFTRUE 3401
3394: PUSH
3395: LD_VAR 0 12
3399: NOT
3400: OR
3401: IFTRUE 3410
3403: PUSH
3404: LD_VAR 0 10
3408: NOT
3409: OR
3410: IFFALSE 3445
// begin result := [ chassis , engine , control , weapon ] ;
3412: LD_ADDR_VAR 0 6
3416: PUSH
3417: LD_VAR 0 2
3421: PUSH
3422: LD_VAR 0 3
3426: PUSH
3427: LD_VAR 0 4
3431: PUSH
3432: LD_VAR 0 5
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// exit ;
3443: GO 3740
// end ; if not chassis in _chassis then
3445: LD_VAR 0 2
3449: PUSH
3450: LD_VAR 0 9
3454: IN
3455: NOT
3456: IFFALSE 3482
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3458: LD_ADDR_VAR 0 2
3462: PUSH
3463: LD_VAR 0 9
3467: PUSH
3468: LD_INT 1
3470: PPUSH
3471: LD_VAR 0 9
3475: PPUSH
3476: CALL_OW 12
3480: ARRAY
3481: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3482: LD_VAR 0 2
3486: PPUSH
3487: LD_VAR 0 3
3491: PPUSH
3492: CALL 3745 0 2
3496: NOT
3497: IFFALSE 3558
// repeat engine := _engine [ 1 ] ;
3499: LD_ADDR_VAR 0 3
3503: PUSH
3504: LD_VAR 0 11
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3513: LD_ADDR_VAR 0 11
3517: PUSH
3518: LD_VAR 0 11
3522: PPUSH
3523: LD_INT 1
3525: PPUSH
3526: CALL_OW 3
3530: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_VAR 0 3
3540: PPUSH
3541: CALL 3745 0 2
3545: IFTRUE 3556
3547: PUSH
3548: LD_VAR 0 11
3552: PUSH
3553: EMPTY
3554: EQUAL
3555: OR
3556: IFFALSE 3499
// if not control in _control then
3558: LD_VAR 0 4
3562: PUSH
3563: LD_VAR 0 12
3567: IN
3568: NOT
3569: IFFALSE 3595
// control := _control [ rand ( 1 , _control ) ] ;
3571: LD_ADDR_VAR 0 4
3575: PUSH
3576: LD_VAR 0 12
3580: PUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_VAR 0 12
3588: PPUSH
3589: CALL_OW 12
3593: ARRAY
3594: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3595: LD_VAR 0 2
3599: PPUSH
3600: LD_VAR 0 5
3604: PPUSH
3605: CALL 3967 0 2
3609: NOT
3610: IFFALSE 3671
// repeat weapon := _weapon [ 1 ] ;
3612: LD_ADDR_VAR 0 5
3616: PUSH
3617: LD_VAR 0 10
3621: PUSH
3622: LD_INT 1
3624: ARRAY
3625: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3626: LD_ADDR_VAR 0 10
3630: PUSH
3631: LD_VAR 0 10
3635: PPUSH
3636: LD_INT 1
3638: PPUSH
3639: CALL_OW 3
3643: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3644: LD_VAR 0 2
3648: PPUSH
3649: LD_VAR 0 5
3653: PPUSH
3654: CALL 3967 0 2
3658: IFTRUE 3669
3660: PUSH
3661: LD_VAR 0 10
3665: PUSH
3666: EMPTY
3667: EQUAL
3668: OR
3669: IFFALSE 3612
// result := [ ] ;
3671: LD_ADDR_VAR 0 6
3675: PUSH
3676: EMPTY
3677: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3678: LD_VAR 0 1
3682: PPUSH
3683: LD_VAR 0 2
3687: PPUSH
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_VAR 0 4
3697: PPUSH
3698: LD_VAR 0 5
3702: PPUSH
3703: CALL_OW 448
3707: IFFALSE 3740
// result := [ chassis , engine , control , weapon ] ;
3709: LD_ADDR_VAR 0 6
3713: PUSH
3714: LD_VAR 0 2
3718: PUSH
3719: LD_VAR 0 3
3723: PUSH
3724: LD_VAR 0 4
3728: PUSH
3729: LD_VAR 0 5
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: ST_TO_ADDR
// end ;
3740: LD_VAR 0 6
3744: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3745: LD_INT 0
3747: PPUSH
// if not chassis or not engine then
3748: LD_VAR 0 1
3752: NOT
3753: IFTRUE 3762
3755: PUSH
3756: LD_VAR 0 2
3760: NOT
3761: OR
3762: IFFALSE 3766
// exit ;
3764: GO 3962
// case engine of engine_solar :
3766: LD_VAR 0 2
3770: PUSH
3771: LD_INT 2
3773: DOUBLE
3774: EQUAL
3775: IFTRUE 3779
3777: GO 3817
3779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3780: LD_ADDR_VAR 0 3
3784: PUSH
3785: LD_INT 11
3787: PUSH
3788: LD_INT 12
3790: PUSH
3791: LD_INT 13
3793: PUSH
3794: LD_INT 14
3796: PUSH
3797: LD_INT 1
3799: PUSH
3800: LD_INT 2
3802: PUSH
3803: LD_INT 3
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: ST_TO_ADDR
3815: GO 3946
3817: LD_INT 1
3819: DOUBLE
3820: EQUAL
3821: IFTRUE 3825
3823: GO 3887
3825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3826: LD_ADDR_VAR 0 3
3830: PUSH
3831: LD_INT 11
3833: PUSH
3834: LD_INT 12
3836: PUSH
3837: LD_INT 13
3839: PUSH
3840: LD_INT 14
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: LD_INT 3
3851: PUSH
3852: LD_INT 4
3854: PUSH
3855: LD_INT 5
3857: PUSH
3858: LD_INT 21
3860: PUSH
3861: LD_INT 23
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 24
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: ST_TO_ADDR
3885: GO 3946
3887: LD_INT 3
3889: DOUBLE
3890: EQUAL
3891: IFTRUE 3895
3893: GO 3945
3895: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3896: LD_ADDR_VAR 0 3
3900: PUSH
3901: LD_INT 13
3903: PUSH
3904: LD_INT 14
3906: PUSH
3907: LD_INT 2
3909: PUSH
3910: LD_INT 3
3912: PUSH
3913: LD_INT 4
3915: PUSH
3916: LD_INT 5
3918: PUSH
3919: LD_INT 21
3921: PUSH
3922: LD_INT 22
3924: PUSH
3925: LD_INT 23
3927: PUSH
3928: LD_INT 24
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: ST_TO_ADDR
3943: GO 3946
3945: POP
// result := ( chassis in result ) ;
3946: LD_ADDR_VAR 0 3
3950: PUSH
3951: LD_VAR 0 1
3955: PUSH
3956: LD_VAR 0 3
3960: IN
3961: ST_TO_ADDR
// end ;
3962: LD_VAR 0 3
3966: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3967: LD_INT 0
3969: PPUSH
// if not chassis or not weapon then
3970: LD_VAR 0 1
3974: NOT
3975: IFTRUE 3984
3977: PUSH
3978: LD_VAR 0 2
3982: NOT
3983: OR
3984: IFFALSE 3988
// exit ;
3986: GO 5048
// case weapon of us_machine_gun :
3988: LD_VAR 0 2
3992: PUSH
3993: LD_INT 2
3995: DOUBLE
3996: EQUAL
3997: IFTRUE 4001
3999: GO 4031
4001: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4002: LD_ADDR_VAR 0 3
4006: PUSH
4007: LD_INT 1
4009: PUSH
4010: LD_INT 2
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: ST_TO_ADDR
4029: GO 5032
4031: LD_INT 3
4033: DOUBLE
4034: EQUAL
4035: IFTRUE 4039
4037: GO 4069
4039: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4040: LD_ADDR_VAR 0 3
4044: PUSH
4045: LD_INT 1
4047: PUSH
4048: LD_INT 2
4050: PUSH
4051: LD_INT 3
4053: PUSH
4054: LD_INT 4
4056: PUSH
4057: LD_INT 5
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: ST_TO_ADDR
4067: GO 5032
4069: LD_INT 11
4071: DOUBLE
4072: EQUAL
4073: IFTRUE 4077
4075: GO 4107
4077: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4078: LD_ADDR_VAR 0 3
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: LD_INT 2
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: LD_INT 4
4094: PUSH
4095: LD_INT 5
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: ST_TO_ADDR
4105: GO 5032
4107: LD_INT 4
4109: DOUBLE
4110: EQUAL
4111: IFTRUE 4115
4113: GO 4141
4115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4116: LD_ADDR_VAR 0 3
4120: PUSH
4121: LD_INT 2
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: LD_INT 5
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: ST_TO_ADDR
4139: GO 5032
4141: LD_INT 5
4143: DOUBLE
4144: EQUAL
4145: IFTRUE 4149
4147: GO 4175
4149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4150: LD_ADDR_VAR 0 3
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 5032
4175: LD_INT 9
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4209
4183: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: LD_INT 2
4191: PUSH
4192: LD_INT 3
4194: PUSH
4195: LD_INT 4
4197: PUSH
4198: LD_INT 5
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
4207: GO 5032
4209: LD_INT 7
4211: DOUBLE
4212: EQUAL
4213: IFTRUE 4217
4215: GO 4243
4217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4218: LD_ADDR_VAR 0 3
4222: PUSH
4223: LD_INT 2
4225: PUSH
4226: LD_INT 3
4228: PUSH
4229: LD_INT 4
4231: PUSH
4232: LD_INT 5
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: ST_TO_ADDR
4241: GO 5032
4243: LD_INT 12
4245: DOUBLE
4246: EQUAL
4247: IFTRUE 4251
4249: GO 4277
4251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4252: LD_ADDR_VAR 0 3
4256: PUSH
4257: LD_INT 2
4259: PUSH
4260: LD_INT 3
4262: PUSH
4263: LD_INT 4
4265: PUSH
4266: LD_INT 5
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: ST_TO_ADDR
4275: GO 5032
4277: LD_INT 13
4279: DOUBLE
4280: EQUAL
4281: IFTRUE 4285
4283: GO 4311
4285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4286: LD_ADDR_VAR 0 3
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: LD_INT 4
4299: PUSH
4300: LD_INT 5
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: ST_TO_ADDR
4309: GO 5032
4311: LD_INT 14
4313: DOUBLE
4314: EQUAL
4315: IFTRUE 4319
4317: GO 4337
4319: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4320: LD_ADDR_VAR 0 3
4324: PUSH
4325: LD_INT 4
4327: PUSH
4328: LD_INT 5
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: ST_TO_ADDR
4335: GO 5032
4337: LD_INT 6
4339: DOUBLE
4340: EQUAL
4341: IFTRUE 4345
4343: GO 4363
4345: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: LD_INT 5
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: ST_TO_ADDR
4361: GO 5032
4363: LD_INT 10
4365: DOUBLE
4366: EQUAL
4367: IFTRUE 4371
4369: GO 4389
4371: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: LD_INT 4
4379: PUSH
4380: LD_INT 5
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
4387: GO 5032
4389: LD_INT 22
4391: DOUBLE
4392: EQUAL
4393: IFTRUE 4397
4395: GO 4423
4397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4398: LD_ADDR_VAR 0 3
4402: PUSH
4403: LD_INT 11
4405: PUSH
4406: LD_INT 12
4408: PUSH
4409: LD_INT 13
4411: PUSH
4412: LD_INT 14
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: ST_TO_ADDR
4421: GO 5032
4423: LD_INT 23
4425: DOUBLE
4426: EQUAL
4427: IFTRUE 4431
4429: GO 4457
4431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4432: LD_ADDR_VAR 0 3
4436: PUSH
4437: LD_INT 11
4439: PUSH
4440: LD_INT 12
4442: PUSH
4443: LD_INT 13
4445: PUSH
4446: LD_INT 14
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
4455: GO 5032
4457: LD_INT 24
4459: DOUBLE
4460: EQUAL
4461: IFTRUE 4465
4463: GO 4491
4465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: LD_INT 11
4473: PUSH
4474: LD_INT 12
4476: PUSH
4477: LD_INT 13
4479: PUSH
4480: LD_INT 14
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: ST_TO_ADDR
4489: GO 5032
4491: LD_INT 30
4493: DOUBLE
4494: EQUAL
4495: IFTRUE 4499
4497: GO 4525
4499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4500: LD_ADDR_VAR 0 3
4504: PUSH
4505: LD_INT 11
4507: PUSH
4508: LD_INT 12
4510: PUSH
4511: LD_INT 13
4513: PUSH
4514: LD_INT 14
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: ST_TO_ADDR
4523: GO 5032
4525: LD_INT 25
4527: DOUBLE
4528: EQUAL
4529: IFTRUE 4533
4531: GO 4551
4533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4534: LD_ADDR_VAR 0 3
4538: PUSH
4539: LD_INT 13
4541: PUSH
4542: LD_INT 14
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: ST_TO_ADDR
4549: GO 5032
4551: LD_INT 27
4553: DOUBLE
4554: EQUAL
4555: IFTRUE 4559
4557: GO 4577
4559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4560: LD_ADDR_VAR 0 3
4564: PUSH
4565: LD_INT 13
4567: PUSH
4568: LD_INT 14
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: ST_TO_ADDR
4575: GO 5032
4577: LD_INT 92
4579: DOUBLE
4580: EQUAL
4581: IFTRUE 4585
4583: GO 4611
4585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4586: LD_ADDR_VAR 0 3
4590: PUSH
4591: LD_INT 11
4593: PUSH
4594: LD_INT 12
4596: PUSH
4597: LD_INT 13
4599: PUSH
4600: LD_INT 14
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: ST_TO_ADDR
4609: GO 5032
4611: LD_INT 28
4613: DOUBLE
4614: EQUAL
4615: IFTRUE 4619
4617: GO 4637
4619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_INT 13
4627: PUSH
4628: LD_INT 14
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: ST_TO_ADDR
4635: GO 5032
4637: LD_INT 29
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4663
4645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_INT 13
4653: PUSH
4654: LD_INT 14
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: ST_TO_ADDR
4661: GO 5032
4663: LD_INT 31
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4689
4671: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4672: LD_ADDR_VAR 0 3
4676: PUSH
4677: LD_INT 13
4679: PUSH
4680: LD_INT 14
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: ST_TO_ADDR
4687: GO 5032
4689: LD_INT 26
4691: DOUBLE
4692: EQUAL
4693: IFTRUE 4697
4695: GO 4715
4697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_INT 13
4705: PUSH
4706: LD_INT 14
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: ST_TO_ADDR
4713: GO 5032
4715: LD_INT 42
4717: DOUBLE
4718: EQUAL
4719: IFTRUE 4723
4721: GO 4749
4723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4724: LD_ADDR_VAR 0 3
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 22
4734: PUSH
4735: LD_INT 23
4737: PUSH
4738: LD_INT 24
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 5032
4749: LD_INT 43
4751: DOUBLE
4752: EQUAL
4753: IFTRUE 4757
4755: GO 4783
4757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 22
4768: PUSH
4769: LD_INT 23
4771: PUSH
4772: LD_INT 24
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5032
4783: LD_INT 44
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4817
4791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 23
4805: PUSH
4806: LD_INT 24
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: ST_TO_ADDR
4815: GO 5032
4817: LD_INT 45
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4851
4825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: LD_INT 21
4833: PUSH
4834: LD_INT 22
4836: PUSH
4837: LD_INT 23
4839: PUSH
4840: LD_INT 24
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: ST_TO_ADDR
4849: GO 5032
4851: LD_INT 49
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4885
4859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_INT 21
4867: PUSH
4868: LD_INT 22
4870: PUSH
4871: LD_INT 23
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: ST_TO_ADDR
4883: GO 5032
4885: LD_INT 51
4887: DOUBLE
4888: EQUAL
4889: IFTRUE 4893
4891: GO 4919
4893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: LD_INT 21
4901: PUSH
4902: LD_INT 22
4904: PUSH
4905: LD_INT 23
4907: PUSH
4908: LD_INT 24
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
4917: GO 5032
4919: LD_INT 52
4921: DOUBLE
4922: EQUAL
4923: IFTRUE 4927
4925: GO 4953
4927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: LD_INT 21
4935: PUSH
4936: LD_INT 22
4938: PUSH
4939: LD_INT 23
4941: PUSH
4942: LD_INT 24
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
4951: GO 5032
4953: LD_INT 53
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4979
4961: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 23
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 5032
4979: LD_INT 46
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5005
4987: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_INT 23
4995: PUSH
4996: LD_INT 24
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: ST_TO_ADDR
5003: GO 5032
5005: LD_INT 47
5007: DOUBLE
5008: EQUAL
5009: IFTRUE 5013
5011: GO 5031
5013: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5014: LD_ADDR_VAR 0 3
5018: PUSH
5019: LD_INT 23
5021: PUSH
5022: LD_INT 24
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: ST_TO_ADDR
5029: GO 5032
5031: POP
// result := ( chassis in result ) ;
5032: LD_ADDR_VAR 0 3
5036: PUSH
5037: LD_VAR 0 1
5041: PUSH
5042: LD_VAR 0 3
5046: IN
5047: ST_TO_ADDR
// end ;
5048: LD_VAR 0 3
5052: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5053: LD_INT 0
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
// result := array ;
5062: LD_ADDR_VAR 0 5
5066: PUSH
5067: LD_VAR 0 1
5071: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5072: LD_VAR 0 1
5076: NOT
5077: IFTRUE 5086
5079: PUSH
5080: LD_VAR 0 2
5084: NOT
5085: OR
5086: IFTRUE 5095
5088: PUSH
5089: LD_VAR 0 3
5093: NOT
5094: OR
5095: IFTRUE 5109
5097: PUSH
5098: LD_VAR 0 2
5102: PUSH
5103: LD_VAR 0 1
5107: GREATER
5108: OR
5109: IFTRUE 5123
5111: PUSH
5112: LD_VAR 0 3
5116: PUSH
5117: LD_VAR 0 1
5121: GREATER
5122: OR
5123: IFFALSE 5127
// exit ;
5125: GO 5423
// if direction then
5127: LD_VAR 0 4
5131: IFFALSE 5195
// begin d := 1 ;
5133: LD_ADDR_VAR 0 9
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// if i_from > i_to then
5141: LD_VAR 0 2
5145: PUSH
5146: LD_VAR 0 3
5150: GREATER
5151: IFFALSE 5177
// length := ( array - i_from ) + i_to else
5153: LD_ADDR_VAR 0 11
5157: PUSH
5158: LD_VAR 0 1
5162: PUSH
5163: LD_VAR 0 2
5167: MINUS
5168: PUSH
5169: LD_VAR 0 3
5173: PLUS
5174: ST_TO_ADDR
5175: GO 5193
// length := i_to - i_from ;
5177: LD_ADDR_VAR 0 11
5181: PUSH
5182: LD_VAR 0 3
5186: PUSH
5187: LD_VAR 0 2
5191: MINUS
5192: ST_TO_ADDR
// end else
5193: GO 5256
// begin d := - 1 ;
5195: LD_ADDR_VAR 0 9
5199: PUSH
5200: LD_INT 1
5202: NEG
5203: ST_TO_ADDR
// if i_from > i_to then
5204: LD_VAR 0 2
5208: PUSH
5209: LD_VAR 0 3
5213: GREATER
5214: IFFALSE 5234
// length := i_from - i_to else
5216: LD_ADDR_VAR 0 11
5220: PUSH
5221: LD_VAR 0 2
5225: PUSH
5226: LD_VAR 0 3
5230: MINUS
5231: ST_TO_ADDR
5232: GO 5256
// length := ( array - i_to ) + i_from ;
5234: LD_ADDR_VAR 0 11
5238: PUSH
5239: LD_VAR 0 1
5243: PUSH
5244: LD_VAR 0 3
5248: MINUS
5249: PUSH
5250: LD_VAR 0 2
5254: PLUS
5255: ST_TO_ADDR
// end ; if not length then
5256: LD_VAR 0 11
5260: NOT
5261: IFFALSE 5265
// exit ;
5263: GO 5423
// tmp := array ;
5265: LD_ADDR_VAR 0 10
5269: PUSH
5270: LD_VAR 0 1
5274: ST_TO_ADDR
// for i = 1 to length do
5275: LD_ADDR_VAR 0 6
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 11
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5411
// begin for j = 1 to array do
5293: LD_ADDR_VAR 0 7
5297: PUSH
5298: DOUBLE
5299: LD_INT 1
5301: DEC
5302: ST_TO_ADDR
5303: LD_VAR 0 1
5307: PUSH
5308: FOR_TO
5309: IFFALSE 5397
// begin k := j + d ;
5311: LD_ADDR_VAR 0 8
5315: PUSH
5316: LD_VAR 0 7
5320: PUSH
5321: LD_VAR 0 9
5325: PLUS
5326: ST_TO_ADDR
// if k > array then
5327: LD_VAR 0 8
5331: PUSH
5332: LD_VAR 0 1
5336: GREATER
5337: IFFALSE 5347
// k := 1 ;
5339: LD_ADDR_VAR 0 8
5343: PUSH
5344: LD_INT 1
5346: ST_TO_ADDR
// if not k then
5347: LD_VAR 0 8
5351: NOT
5352: IFFALSE 5364
// k := array ;
5354: LD_ADDR_VAR 0 8
5358: PUSH
5359: LD_VAR 0 1
5363: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5364: LD_ADDR_VAR 0 10
5368: PUSH
5369: LD_VAR 0 10
5373: PPUSH
5374: LD_VAR 0 8
5378: PPUSH
5379: LD_VAR 0 1
5383: PUSH
5384: LD_VAR 0 7
5388: ARRAY
5389: PPUSH
5390: CALL_OW 1
5394: ST_TO_ADDR
// end ;
5395: GO 5308
5397: POP
5398: POP
// array := tmp ;
5399: LD_ADDR_VAR 0 1
5403: PUSH
5404: LD_VAR 0 10
5408: ST_TO_ADDR
// end ;
5409: GO 5290
5411: POP
5412: POP
// result := array ;
5413: LD_ADDR_VAR 0 5
5417: PUSH
5418: LD_VAR 0 1
5422: ST_TO_ADDR
// end ;
5423: LD_VAR 0 5
5427: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5428: LD_INT 0
5430: PPUSH
5431: PPUSH
// result := 0 ;
5432: LD_ADDR_VAR 0 3
5436: PUSH
5437: LD_INT 0
5439: ST_TO_ADDR
// if not array or not value in array then
5440: LD_VAR 0 1
5444: NOT
5445: IFTRUE 5460
5447: PUSH
5448: LD_VAR 0 2
5452: PUSH
5453: LD_VAR 0 1
5457: IN
5458: NOT
5459: OR
5460: IFFALSE 5464
// exit ;
5462: GO 5518
// for i = 1 to array do
5464: LD_ADDR_VAR 0 4
5468: PUSH
5469: DOUBLE
5470: LD_INT 1
5472: DEC
5473: ST_TO_ADDR
5474: LD_VAR 0 1
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5516
// if value = array [ i ] then
5482: LD_VAR 0 2
5486: PUSH
5487: LD_VAR 0 1
5491: PUSH
5492: LD_VAR 0 4
5496: ARRAY
5497: EQUAL
5498: IFFALSE 5514
// begin result := i ;
5500: LD_ADDR_VAR 0 3
5504: PUSH
5505: LD_VAR 0 4
5509: ST_TO_ADDR
// exit ;
5510: POP
5511: POP
5512: GO 5518
// end ;
5514: GO 5479
5516: POP
5517: POP
// end ;
5518: LD_VAR 0 3
5522: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5523: LD_INT 0
5525: PPUSH
// vc_chassis := chassis ;
5526: LD_ADDR_OWVAR 37
5530: PUSH
5531: LD_VAR 0 1
5535: ST_TO_ADDR
// vc_engine := engine ;
5536: LD_ADDR_OWVAR 39
5540: PUSH
5541: LD_VAR 0 2
5545: ST_TO_ADDR
// vc_control := control ;
5546: LD_ADDR_OWVAR 38
5550: PUSH
5551: LD_VAR 0 3
5555: ST_TO_ADDR
// vc_weapon := weapon ;
5556: LD_ADDR_OWVAR 40
5560: PUSH
5561: LD_VAR 0 4
5565: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5566: LD_ADDR_OWVAR 41
5570: PUSH
5571: LD_VAR 0 5
5575: ST_TO_ADDR
// end ;
5576: LD_VAR 0 6
5580: RET
// export function WantPlant ( unit ) ; var task ; begin
5581: LD_INT 0
5583: PPUSH
5584: PPUSH
// result := false ;
5585: LD_ADDR_VAR 0 2
5589: PUSH
5590: LD_INT 0
5592: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 1
5602: PPUSH
5603: CALL_OW 437
5607: ST_TO_ADDR
// if task then
5608: LD_VAR 0 3
5612: IFFALSE 5640
// if task [ 1 ] [ 1 ] = p then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 1
5621: ARRAY
5622: PUSH
5623: LD_INT 1
5625: ARRAY
5626: PUSH
5627: LD_STRING p
5629: EQUAL
5630: IFFALSE 5640
// result := true ;
5632: LD_ADDR_VAR 0 2
5636: PUSH
5637: LD_INT 1
5639: ST_TO_ADDR
// end ;
5640: LD_VAR 0 2
5644: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5645: LD_INT 0
5647: PPUSH
5648: PPUSH
5649: PPUSH
5650: PPUSH
// if pos < 1 then
5651: LD_VAR 0 2
5655: PUSH
5656: LD_INT 1
5658: LESS
5659: IFFALSE 5663
// exit ;
5661: GO 5966
// if pos = 1 then
5663: LD_VAR 0 2
5667: PUSH
5668: LD_INT 1
5670: EQUAL
5671: IFFALSE 5704
// result := Replace ( arr , pos [ 1 ] , value ) else
5673: LD_ADDR_VAR 0 4
5677: PUSH
5678: LD_VAR 0 1
5682: PPUSH
5683: LD_VAR 0 2
5687: PUSH
5688: LD_INT 1
5690: ARRAY
5691: PPUSH
5692: LD_VAR 0 3
5696: PPUSH
5697: CALL_OW 1
5701: ST_TO_ADDR
5702: GO 5966
// begin tmp := arr ;
5704: LD_ADDR_VAR 0 6
5708: PUSH
5709: LD_VAR 0 1
5713: ST_TO_ADDR
// s_arr := [ tmp ] ;
5714: LD_ADDR_VAR 0 7
5718: PUSH
5719: LD_VAR 0 6
5723: PUSH
5724: EMPTY
5725: LIST
5726: ST_TO_ADDR
// for i = 1 to pos - 1 do
5727: LD_ADDR_VAR 0 5
5731: PUSH
5732: DOUBLE
5733: LD_INT 1
5735: DEC
5736: ST_TO_ADDR
5737: LD_VAR 0 2
5741: PUSH
5742: LD_INT 1
5744: MINUS
5745: PUSH
5746: FOR_TO
5747: IFFALSE 5792
// begin tmp := tmp [ pos [ i ] ] ;
5749: LD_ADDR_VAR 0 6
5753: PUSH
5754: LD_VAR 0 6
5758: PUSH
5759: LD_VAR 0 2
5763: PUSH
5764: LD_VAR 0 5
5768: ARRAY
5769: ARRAY
5770: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5771: LD_ADDR_VAR 0 7
5775: PUSH
5776: LD_VAR 0 7
5780: PUSH
5781: LD_VAR 0 6
5785: PUSH
5786: EMPTY
5787: LIST
5788: ADD
5789: ST_TO_ADDR
// end ;
5790: GO 5746
5792: POP
5793: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5794: LD_ADDR_VAR 0 6
5798: PUSH
5799: LD_VAR 0 6
5803: PPUSH
5804: LD_VAR 0 2
5808: PUSH
5809: LD_VAR 0 2
5813: ARRAY
5814: PPUSH
5815: LD_VAR 0 3
5819: PPUSH
5820: CALL_OW 1
5824: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_VAR 0 7
5834: PPUSH
5835: LD_VAR 0 7
5839: PPUSH
5840: LD_VAR 0 6
5844: PPUSH
5845: CALL_OW 1
5849: ST_TO_ADDR
// for i = s_arr downto 2 do
5850: LD_ADDR_VAR 0 5
5854: PUSH
5855: DOUBLE
5856: LD_VAR 0 7
5860: INC
5861: ST_TO_ADDR
5862: LD_INT 2
5864: PUSH
5865: FOR_DOWNTO
5866: IFFALSE 5950
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5868: LD_ADDR_VAR 0 6
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_VAR 0 5
5882: PUSH
5883: LD_INT 1
5885: MINUS
5886: ARRAY
5887: PPUSH
5888: LD_VAR 0 2
5892: PUSH
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 1
5900: MINUS
5901: ARRAY
5902: PPUSH
5903: LD_VAR 0 7
5907: PUSH
5908: LD_VAR 0 5
5912: ARRAY
5913: PPUSH
5914: CALL_OW 1
5918: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5919: LD_ADDR_VAR 0 7
5923: PUSH
5924: LD_VAR 0 7
5928: PPUSH
5929: LD_VAR 0 5
5933: PUSH
5934: LD_INT 1
5936: MINUS
5937: PPUSH
5938: LD_VAR 0 6
5942: PPUSH
5943: CALL_OW 1
5947: ST_TO_ADDR
// end ;
5948: GO 5865
5950: POP
5951: POP
// result := s_arr [ 1 ] ;
5952: LD_ADDR_VAR 0 4
5956: PUSH
5957: LD_VAR 0 7
5961: PUSH
5962: LD_INT 1
5964: ARRAY
5965: ST_TO_ADDR
// end ; end ;
5966: LD_VAR 0 4
5970: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5971: LD_INT 0
5973: PPUSH
5974: PPUSH
// if not list then
5975: LD_VAR 0 1
5979: NOT
5980: IFFALSE 5984
// exit ;
5982: GO 6075
// i := list [ pos1 ] ;
5984: LD_ADDR_VAR 0 5
5988: PUSH
5989: LD_VAR 0 1
5993: PUSH
5994: LD_VAR 0 2
5998: ARRAY
5999: ST_TO_ADDR
// if not i then
6000: LD_VAR 0 5
6004: NOT
6005: IFFALSE 6009
// exit ;
6007: GO 6075
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6009: LD_ADDR_VAR 0 1
6013: PUSH
6014: LD_VAR 0 1
6018: PPUSH
6019: LD_VAR 0 2
6023: PPUSH
6024: LD_VAR 0 1
6028: PUSH
6029: LD_VAR 0 3
6033: ARRAY
6034: PPUSH
6035: CALL_OW 1
6039: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6040: LD_ADDR_VAR 0 1
6044: PUSH
6045: LD_VAR 0 1
6049: PPUSH
6050: LD_VAR 0 3
6054: PPUSH
6055: LD_VAR 0 5
6059: PPUSH
6060: CALL_OW 1
6064: ST_TO_ADDR
// result := list ;
6065: LD_ADDR_VAR 0 4
6069: PUSH
6070: LD_VAR 0 1
6074: ST_TO_ADDR
// end ;
6075: LD_VAR 0 4
6079: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6080: LD_INT 0
6082: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6083: LD_ADDR_VAR 0 5
6087: PUSH
6088: LD_VAR 0 1
6092: PPUSH
6093: CALL_OW 250
6097: PPUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 251
6107: PPUSH
6108: LD_VAR 0 2
6112: PPUSH
6113: LD_VAR 0 3
6117: PPUSH
6118: LD_VAR 0 4
6122: PPUSH
6123: CALL 6505 0 5
6127: ST_TO_ADDR
// end ;
6128: LD_VAR 0 5
6132: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6133: LD_INT 0
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
// if not list or not unit then
6139: LD_VAR 0 2
6143: NOT
6144: IFTRUE 6153
6146: PUSH
6147: LD_VAR 0 1
6151: NOT
6152: OR
6153: IFFALSE 6157
// exit ;
6155: GO 6500
// result := [ ] ;
6157: LD_ADDR_VAR 0 5
6161: PUSH
6162: EMPTY
6163: ST_TO_ADDR
// for i in list do
6164: LD_ADDR_VAR 0 6
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: FOR_IN
6175: IFFALSE 6393
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6177: LD_ADDR_VAR 0 8
6181: PUSH
6182: LD_VAR 0 1
6186: PPUSH
6187: LD_VAR 0 6
6191: PUSH
6192: LD_INT 1
6194: ARRAY
6195: PPUSH
6196: LD_VAR 0 6
6200: PUSH
6201: LD_INT 2
6203: ARRAY
6204: PPUSH
6205: CALL_OW 297
6209: ST_TO_ADDR
// if not Count ( result ) then
6210: LD_VAR 0 5
6214: PPUSH
6215: CALL 2761 0 1
6219: NOT
6220: IFFALSE 6253
// begin result := Join ( result , [ i , tmp ] ) ;
6222: LD_ADDR_VAR 0 5
6226: PUSH
6227: LD_VAR 0 5
6231: PPUSH
6232: LD_VAR 0 6
6236: PUSH
6237: LD_VAR 0 8
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL 38693 0 2
6250: ST_TO_ADDR
// continue ;
6251: GO 6174
// end ; if result [ result ] [ 2 ] <= tmp then
6253: LD_VAR 0 5
6257: PUSH
6258: LD_VAR 0 5
6262: ARRAY
6263: PUSH
6264: LD_INT 2
6266: ARRAY
6267: PUSH
6268: LD_VAR 0 8
6272: LESSEQUAL
6273: IFFALSE 6306
// result := Join ( result , [ i , tmp ] ) else
6275: LD_ADDR_VAR 0 5
6279: PUSH
6280: LD_VAR 0 5
6284: PPUSH
6285: LD_VAR 0 6
6289: PUSH
6290: LD_VAR 0 8
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PPUSH
6299: CALL 38693 0 2
6303: ST_TO_ADDR
6304: GO 6391
// begin for j := 1 to Count ( result ) do
6306: LD_ADDR_VAR 0 7
6310: PUSH
6311: DOUBLE
6312: LD_INT 1
6314: DEC
6315: ST_TO_ADDR
6316: LD_VAR 0 5
6320: PPUSH
6321: CALL 2761 0 1
6325: PUSH
6326: FOR_TO
6327: IFFALSE 6389
// begin if tmp < result [ j ] [ 2 ] then
6329: LD_VAR 0 8
6333: PUSH
6334: LD_VAR 0 5
6338: PUSH
6339: LD_VAR 0 7
6343: ARRAY
6344: PUSH
6345: LD_INT 2
6347: ARRAY
6348: LESS
6349: IFFALSE 6387
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6351: LD_ADDR_VAR 0 5
6355: PUSH
6356: LD_VAR 0 5
6360: PPUSH
6361: LD_VAR 0 7
6365: PPUSH
6366: LD_VAR 0 6
6370: PUSH
6371: LD_VAR 0 8
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 2
6384: ST_TO_ADDR
// break ;
6385: GO 6389
// end ; end ;
6387: GO 6326
6389: POP
6390: POP
// end ; end ;
6391: GO 6174
6393: POP
6394: POP
// if result and not asc then
6395: LD_VAR 0 5
6399: IFFALSE 6408
6401: PUSH
6402: LD_VAR 0 3
6406: NOT
6407: AND
6408: IFFALSE 6425
// result := ReverseArray ( result ) ;
6410: LD_ADDR_VAR 0 5
6414: PUSH
6415: LD_VAR 0 5
6419: PPUSH
6420: CALL 33783 0 1
6424: ST_TO_ADDR
// tmp := [ ] ;
6425: LD_ADDR_VAR 0 8
6429: PUSH
6430: EMPTY
6431: ST_TO_ADDR
// if mode then
6432: LD_VAR 0 4
6436: IFFALSE 6500
// begin for i := 1 to result do
6438: LD_ADDR_VAR 0 6
6442: PUSH
6443: DOUBLE
6444: LD_INT 1
6446: DEC
6447: ST_TO_ADDR
6448: LD_VAR 0 5
6452: PUSH
6453: FOR_TO
6454: IFFALSE 6488
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6456: LD_ADDR_VAR 0 8
6460: PUSH
6461: LD_VAR 0 8
6465: PPUSH
6466: LD_VAR 0 5
6470: PUSH
6471: LD_VAR 0 6
6475: ARRAY
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PPUSH
6481: CALL 38693 0 2
6485: ST_TO_ADDR
6486: GO 6453
6488: POP
6489: POP
// result := tmp ;
6490: LD_ADDR_VAR 0 5
6494: PUSH
6495: LD_VAR 0 8
6499: ST_TO_ADDR
// end ; end ;
6500: LD_VAR 0 5
6504: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6505: LD_INT 0
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
// if not list then
6511: LD_VAR 0 3
6515: NOT
6516: IFFALSE 6520
// exit ;
6518: GO 6910
// result := [ ] ;
6520: LD_ADDR_VAR 0 6
6524: PUSH
6525: EMPTY
6526: ST_TO_ADDR
// for i in list do
6527: LD_ADDR_VAR 0 7
6531: PUSH
6532: LD_VAR 0 3
6536: PUSH
6537: FOR_IN
6538: IFFALSE 6740
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6540: LD_ADDR_VAR 0 9
6544: PUSH
6545: LD_VAR 0 7
6549: PPUSH
6550: LD_VAR 0 1
6554: PPUSH
6555: LD_VAR 0 2
6559: PPUSH
6560: CALL_OW 297
6564: ST_TO_ADDR
// if not result then
6565: LD_VAR 0 6
6569: NOT
6570: IFFALSE 6596
// result := [ [ i , tmp ] ] else
6572: LD_ADDR_VAR 0 6
6576: PUSH
6577: LD_VAR 0 7
6581: PUSH
6582: LD_VAR 0 9
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: EMPTY
6592: LIST
6593: ST_TO_ADDR
6594: GO 6738
// begin if result [ result ] [ 2 ] <= tmp then
6596: LD_VAR 0 6
6600: PUSH
6601: LD_VAR 0 6
6605: ARRAY
6606: PUSH
6607: LD_INT 2
6609: ARRAY
6610: PUSH
6611: LD_VAR 0 9
6615: LESSEQUAL
6616: IFFALSE 6658
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_VAR 0 6
6627: PPUSH
6628: LD_VAR 0 6
6632: PUSH
6633: LD_INT 1
6635: PLUS
6636: PPUSH
6637: LD_VAR 0 7
6641: PUSH
6642: LD_VAR 0 9
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PPUSH
6651: CALL_OW 2
6655: ST_TO_ADDR
6656: GO 6738
// for j := 1 to result do
6658: LD_ADDR_VAR 0 8
6662: PUSH
6663: DOUBLE
6664: LD_INT 1
6666: DEC
6667: ST_TO_ADDR
6668: LD_VAR 0 6
6672: PUSH
6673: FOR_TO
6674: IFFALSE 6736
// begin if tmp < result [ j ] [ 2 ] then
6676: LD_VAR 0 9
6680: PUSH
6681: LD_VAR 0 6
6685: PUSH
6686: LD_VAR 0 8
6690: ARRAY
6691: PUSH
6692: LD_INT 2
6694: ARRAY
6695: LESS
6696: IFFALSE 6734
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6698: LD_ADDR_VAR 0 6
6702: PUSH
6703: LD_VAR 0 6
6707: PPUSH
6708: LD_VAR 0 8
6712: PPUSH
6713: LD_VAR 0 7
6717: PUSH
6718: LD_VAR 0 9
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PPUSH
6727: CALL_OW 2
6731: ST_TO_ADDR
// break ;
6732: GO 6736
// end ; end ;
6734: GO 6673
6736: POP
6737: POP
// end ; end ;
6738: GO 6537
6740: POP
6741: POP
// if result and not asc then
6742: LD_VAR 0 6
6746: IFFALSE 6755
6748: PUSH
6749: LD_VAR 0 4
6753: NOT
6754: AND
6755: IFFALSE 6830
// begin tmp := result ;
6757: LD_ADDR_VAR 0 9
6761: PUSH
6762: LD_VAR 0 6
6766: ST_TO_ADDR
// for i = tmp downto 1 do
6767: LD_ADDR_VAR 0 7
6771: PUSH
6772: DOUBLE
6773: LD_VAR 0 9
6777: INC
6778: ST_TO_ADDR
6779: LD_INT 1
6781: PUSH
6782: FOR_DOWNTO
6783: IFFALSE 6828
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 6
6794: PPUSH
6795: LD_VAR 0 9
6799: PUSH
6800: LD_VAR 0 7
6804: MINUS
6805: PUSH
6806: LD_INT 1
6808: PLUS
6809: PPUSH
6810: LD_VAR 0 9
6814: PUSH
6815: LD_VAR 0 7
6819: ARRAY
6820: PPUSH
6821: CALL_OW 1
6825: ST_TO_ADDR
6826: GO 6782
6828: POP
6829: POP
// end ; tmp := [ ] ;
6830: LD_ADDR_VAR 0 9
6834: PUSH
6835: EMPTY
6836: ST_TO_ADDR
// if mode then
6837: LD_VAR 0 5
6841: IFFALSE 6910
// begin for i = 1 to result do
6843: LD_ADDR_VAR 0 7
6847: PUSH
6848: DOUBLE
6849: LD_INT 1
6851: DEC
6852: ST_TO_ADDR
6853: LD_VAR 0 6
6857: PUSH
6858: FOR_TO
6859: IFFALSE 6898
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6861: LD_ADDR_VAR 0 9
6865: PUSH
6866: LD_VAR 0 9
6870: PPUSH
6871: LD_VAR 0 7
6875: PPUSH
6876: LD_VAR 0 6
6880: PUSH
6881: LD_VAR 0 7
6885: ARRAY
6886: PUSH
6887: LD_INT 1
6889: ARRAY
6890: PPUSH
6891: CALL_OW 1
6895: ST_TO_ADDR
6896: GO 6858
6898: POP
6899: POP
// result := tmp ;
6900: LD_ADDR_VAR 0 6
6904: PUSH
6905: LD_VAR 0 9
6909: ST_TO_ADDR
// end ; end ;
6910: LD_VAR 0 6
6914: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6915: LD_INT 0
6917: PPUSH
6918: PPUSH
6919: PPUSH
6920: PPUSH
6921: PPUSH
6922: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6923: LD_ADDR_VAR 0 5
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: LD_INT 0
6933: PUSH
6934: LD_INT 0
6936: PUSH
6937: EMPTY
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: ST_TO_ADDR
// if not x or not y then
6945: LD_VAR 0 2
6949: NOT
6950: IFTRUE 6959
6952: PUSH
6953: LD_VAR 0 3
6957: NOT
6958: OR
6959: IFFALSE 6963
// exit ;
6961: GO 8619
// if not range then
6963: LD_VAR 0 4
6967: NOT
6968: IFFALSE 6978
// range := 10 ;
6970: LD_ADDR_VAR 0 4
6974: PUSH
6975: LD_INT 10
6977: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_INT 81
6985: PUSH
6986: LD_VAR 0 1
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 92
6997: PUSH
6998: LD_VAR 0 2
7002: PUSH
7003: LD_VAR 0 3
7007: PUSH
7008: LD_VAR 0 4
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 3
7021: PUSH
7022: LD_INT 21
7024: PUSH
7025: LD_INT 3
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: PPUSH
7041: CALL_OW 69
7045: ST_TO_ADDR
// if not tmp then
7046: LD_VAR 0 8
7050: NOT
7051: IFFALSE 7055
// exit ;
7053: GO 8619
// for i in tmp do
7055: LD_ADDR_VAR 0 6
7059: PUSH
7060: LD_VAR 0 8
7064: PUSH
7065: FOR_IN
7066: IFFALSE 8594
// begin points := [ 0 , 0 , 0 ] ;
7068: LD_ADDR_VAR 0 9
7072: PUSH
7073: LD_INT 0
7075: PUSH
7076: LD_INT 0
7078: PUSH
7079: LD_INT 0
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: ST_TO_ADDR
// bpoints := 1 ;
7087: LD_ADDR_VAR 0 10
7091: PUSH
7092: LD_INT 1
7094: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7095: LD_VAR 0 6
7099: PPUSH
7100: CALL_OW 247
7104: PUSH
7105: LD_INT 1
7107: DOUBLE
7108: EQUAL
7109: IFTRUE 7113
7111: GO 7695
7113: POP
// begin if GetClass ( i ) = 1 then
7114: LD_VAR 0 6
7118: PPUSH
7119: CALL_OW 257
7123: PUSH
7124: LD_INT 1
7126: EQUAL
7127: IFFALSE 7148
// points := [ 10 , 5 , 3 ] ;
7129: LD_ADDR_VAR 0 9
7133: PUSH
7134: LD_INT 10
7136: PUSH
7137: LD_INT 5
7139: PUSH
7140: LD_INT 3
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7148: LD_VAR 0 6
7152: PPUSH
7153: CALL_OW 257
7157: PUSH
7158: LD_INT 2
7160: PUSH
7161: LD_INT 3
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: IN
7172: IFFALSE 7193
// points := [ 3 , 2 , 1 ] ;
7174: LD_ADDR_VAR 0 9
7178: PUSH
7179: LD_INT 3
7181: PUSH
7182: LD_INT 2
7184: PUSH
7185: LD_INT 1
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7193: LD_VAR 0 6
7197: PPUSH
7198: CALL_OW 257
7202: PUSH
7203: LD_INT 5
7205: EQUAL
7206: IFFALSE 7227
// points := [ 130 , 5 , 2 ] ;
7208: LD_ADDR_VAR 0 9
7212: PUSH
7213: LD_INT 130
7215: PUSH
7216: LD_INT 5
7218: PUSH
7219: LD_INT 2
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7227: LD_VAR 0 6
7231: PPUSH
7232: CALL_OW 257
7236: PUSH
7237: LD_INT 8
7239: EQUAL
7240: IFFALSE 7261
// points := [ 35 , 35 , 30 ] ;
7242: LD_ADDR_VAR 0 9
7246: PUSH
7247: LD_INT 35
7249: PUSH
7250: LD_INT 35
7252: PUSH
7253: LD_INT 30
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7261: LD_VAR 0 6
7265: PPUSH
7266: CALL_OW 257
7270: PUSH
7271: LD_INT 9
7273: EQUAL
7274: IFFALSE 7295
// points := [ 20 , 55 , 40 ] ;
7276: LD_ADDR_VAR 0 9
7280: PUSH
7281: LD_INT 20
7283: PUSH
7284: LD_INT 55
7286: PUSH
7287: LD_INT 40
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7295: LD_VAR 0 6
7299: PPUSH
7300: CALL_OW 257
7304: PUSH
7305: LD_INT 12
7307: PUSH
7308: LD_INT 16
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: IN
7315: IFFALSE 7336
// points := [ 5 , 3 , 2 ] ;
7317: LD_ADDR_VAR 0 9
7321: PUSH
7322: LD_INT 5
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: LD_INT 2
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7336: LD_VAR 0 6
7340: PPUSH
7341: CALL_OW 257
7345: PUSH
7346: LD_INT 17
7348: EQUAL
7349: IFFALSE 7370
// points := [ 100 , 50 , 75 ] ;
7351: LD_ADDR_VAR 0 9
7355: PUSH
7356: LD_INT 100
7358: PUSH
7359: LD_INT 50
7361: PUSH
7362: LD_INT 75
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7370: LD_VAR 0 6
7374: PPUSH
7375: CALL_OW 257
7379: PUSH
7380: LD_INT 15
7382: EQUAL
7383: IFFALSE 7404
// points := [ 10 , 5 , 3 ] ;
7385: LD_ADDR_VAR 0 9
7389: PUSH
7390: LD_INT 10
7392: PUSH
7393: LD_INT 5
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7404: LD_VAR 0 6
7408: PPUSH
7409: CALL_OW 257
7413: PUSH
7414: LD_INT 14
7416: EQUAL
7417: IFFALSE 7438
// points := [ 10 , 0 , 0 ] ;
7419: LD_ADDR_VAR 0 9
7423: PUSH
7424: LD_INT 10
7426: PUSH
7427: LD_INT 0
7429: PUSH
7430: LD_INT 0
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7438: LD_VAR 0 6
7442: PPUSH
7443: CALL_OW 257
7447: PUSH
7448: LD_INT 11
7450: EQUAL
7451: IFFALSE 7472
// points := [ 30 , 10 , 5 ] ;
7453: LD_ADDR_VAR 0 9
7457: PUSH
7458: LD_INT 30
7460: PUSH
7461: LD_INT 10
7463: PUSH
7464: LD_INT 5
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7472: LD_VAR 0 1
7476: PPUSH
7477: LD_INT 5
7479: PPUSH
7480: CALL_OW 321
7484: PUSH
7485: LD_INT 2
7487: EQUAL
7488: IFFALSE 7505
// bpoints := bpoints * 1.8 ;
7490: LD_ADDR_VAR 0 10
7494: PUSH
7495: LD_VAR 0 10
7499: PUSH
7500: LD_REAL  1.80000000000000E+0000
7503: MUL
7504: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7505: LD_VAR 0 6
7509: PPUSH
7510: CALL_OW 257
7514: PUSH
7515: LD_INT 1
7517: PUSH
7518: LD_INT 2
7520: PUSH
7521: LD_INT 3
7523: PUSH
7524: LD_INT 4
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: IN
7533: IFFALSE 7553
7535: PUSH
7536: LD_VAR 0 1
7540: PPUSH
7541: LD_INT 51
7543: PPUSH
7544: CALL_OW 321
7548: PUSH
7549: LD_INT 2
7551: EQUAL
7552: AND
7553: IFFALSE 7570
// bpoints := bpoints * 1.2 ;
7555: LD_ADDR_VAR 0 10
7559: PUSH
7560: LD_VAR 0 10
7564: PUSH
7565: LD_REAL  1.20000000000000E+0000
7568: MUL
7569: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL_OW 257
7579: PUSH
7580: LD_INT 5
7582: PUSH
7583: LD_INT 7
7585: PUSH
7586: LD_INT 9
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: IN
7594: IFFALSE 7614
7596: PUSH
7597: LD_VAR 0 1
7601: PPUSH
7602: LD_INT 52
7604: PPUSH
7605: CALL_OW 321
7609: PUSH
7610: LD_INT 2
7612: EQUAL
7613: AND
7614: IFFALSE 7631
// bpoints := bpoints * 1.5 ;
7616: LD_ADDR_VAR 0 10
7620: PUSH
7621: LD_VAR 0 10
7625: PUSH
7626: LD_REAL  1.50000000000000E+0000
7629: MUL
7630: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7631: LD_VAR 0 1
7635: PPUSH
7636: LD_INT 66
7638: PPUSH
7639: CALL_OW 321
7643: PUSH
7644: LD_INT 2
7646: EQUAL
7647: IFFALSE 7664
// bpoints := bpoints * 1.1 ;
7649: LD_ADDR_VAR 0 10
7653: PUSH
7654: LD_VAR 0 10
7658: PUSH
7659: LD_REAL  1.10000000000000E+0000
7662: MUL
7663: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7664: LD_ADDR_VAR 0 10
7668: PUSH
7669: LD_VAR 0 10
7673: PUSH
7674: LD_VAR 0 6
7678: PPUSH
7679: LD_INT 1
7681: PPUSH
7682: CALL_OW 259
7686: PUSH
7687: LD_REAL  1.15000000000000E+0000
7690: MUL
7691: MUL
7692: ST_TO_ADDR
// end ; unit_vehicle :
7693: GO 8523
7695: LD_INT 2
7697: DOUBLE
7698: EQUAL
7699: IFTRUE 7703
7701: GO 8511
7703: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7704: LD_VAR 0 6
7708: PPUSH
7709: CALL_OW 264
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: LD_INT 42
7719: PUSH
7720: LD_INT 24
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: IN
7728: IFFALSE 7749
// points := [ 25 , 5 , 3 ] ;
7730: LD_ADDR_VAR 0 9
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 5
7740: PUSH
7741: LD_INT 3
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: LIST
7748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7749: LD_VAR 0 6
7753: PPUSH
7754: CALL_OW 264
7758: PUSH
7759: LD_INT 4
7761: PUSH
7762: LD_INT 43
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: LIST
7772: IN
7773: IFFALSE 7794
// points := [ 40 , 15 , 5 ] ;
7775: LD_ADDR_VAR 0 9
7779: PUSH
7780: LD_INT 40
7782: PUSH
7783: LD_INT 15
7785: PUSH
7786: LD_INT 5
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: LIST
7793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7794: LD_VAR 0 6
7798: PPUSH
7799: CALL_OW 264
7803: PUSH
7804: LD_INT 3
7806: PUSH
7807: LD_INT 23
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: IN
7814: IFFALSE 7835
// points := [ 7 , 25 , 8 ] ;
7816: LD_ADDR_VAR 0 9
7820: PUSH
7821: LD_INT 7
7823: PUSH
7824: LD_INT 25
7826: PUSH
7827: LD_INT 8
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7835: LD_VAR 0 6
7839: PPUSH
7840: CALL_OW 264
7844: PUSH
7845: LD_INT 5
7847: PUSH
7848: LD_INT 27
7850: PUSH
7851: LD_INT 44
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: IN
7859: IFFALSE 7880
// points := [ 14 , 50 , 16 ] ;
7861: LD_ADDR_VAR 0 9
7865: PUSH
7866: LD_INT 14
7868: PUSH
7869: LD_INT 50
7871: PUSH
7872: LD_INT 16
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7880: LD_VAR 0 6
7884: PPUSH
7885: CALL_OW 264
7889: PUSH
7890: LD_INT 6
7892: PUSH
7893: LD_INT 46
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: IN
7900: IFFALSE 7921
// points := [ 32 , 120 , 70 ] ;
7902: LD_ADDR_VAR 0 9
7906: PUSH
7907: LD_INT 32
7909: PUSH
7910: LD_INT 120
7912: PUSH
7913: LD_INT 70
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7921: LD_VAR 0 6
7925: PPUSH
7926: CALL_OW 264
7930: PUSH
7931: LD_INT 7
7933: PUSH
7934: LD_INT 28
7936: PUSH
7937: LD_INT 45
7939: PUSH
7940: LD_INT 92
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: IN
7949: IFFALSE 7970
// points := [ 35 , 20 , 45 ] ;
7951: LD_ADDR_VAR 0 9
7955: PUSH
7956: LD_INT 35
7958: PUSH
7959: LD_INT 20
7961: PUSH
7962: LD_INT 45
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7970: LD_VAR 0 6
7974: PPUSH
7975: CALL_OW 264
7979: PUSH
7980: LD_INT 47
7982: PUSH
7983: EMPTY
7984: LIST
7985: IN
7986: IFFALSE 8007
// points := [ 67 , 45 , 75 ] ;
7988: LD_ADDR_VAR 0 9
7992: PUSH
7993: LD_INT 67
7995: PUSH
7996: LD_INT 45
7998: PUSH
7999: LD_INT 75
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8007: LD_VAR 0 6
8011: PPUSH
8012: CALL_OW 264
8016: PUSH
8017: LD_INT 26
8019: PUSH
8020: EMPTY
8021: LIST
8022: IN
8023: IFFALSE 8044
// points := [ 120 , 30 , 80 ] ;
8025: LD_ADDR_VAR 0 9
8029: PUSH
8030: LD_INT 120
8032: PUSH
8033: LD_INT 30
8035: PUSH
8036: LD_INT 80
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8044: LD_VAR 0 6
8048: PPUSH
8049: CALL_OW 264
8053: PUSH
8054: LD_INT 22
8056: PUSH
8057: EMPTY
8058: LIST
8059: IN
8060: IFFALSE 8081
// points := [ 40 , 1 , 1 ] ;
8062: LD_ADDR_VAR 0 9
8066: PUSH
8067: LD_INT 40
8069: PUSH
8070: LD_INT 1
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: LIST
8080: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8081: LD_VAR 0 6
8085: PPUSH
8086: CALL_OW 264
8090: PUSH
8091: LD_INT 29
8093: PUSH
8094: EMPTY
8095: LIST
8096: IN
8097: IFFALSE 8118
// points := [ 70 , 200 , 400 ] ;
8099: LD_ADDR_VAR 0 9
8103: PUSH
8104: LD_INT 70
8106: PUSH
8107: LD_INT 200
8109: PUSH
8110: LD_INT 400
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8118: LD_VAR 0 6
8122: PPUSH
8123: CALL_OW 264
8127: PUSH
8128: LD_INT 14
8130: PUSH
8131: LD_INT 53
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: IN
8138: IFFALSE 8159
// points := [ 40 , 10 , 20 ] ;
8140: LD_ADDR_VAR 0 9
8144: PUSH
8145: LD_INT 40
8147: PUSH
8148: LD_INT 10
8150: PUSH
8151: LD_INT 20
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8159: LD_VAR 0 6
8163: PPUSH
8164: CALL_OW 264
8168: PUSH
8169: LD_INT 9
8171: PUSH
8172: EMPTY
8173: LIST
8174: IN
8175: IFFALSE 8196
// points := [ 5 , 70 , 20 ] ;
8177: LD_ADDR_VAR 0 9
8181: PUSH
8182: LD_INT 5
8184: PUSH
8185: LD_INT 70
8187: PUSH
8188: LD_INT 20
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8196: LD_VAR 0 6
8200: PPUSH
8201: CALL_OW 264
8205: PUSH
8206: LD_INT 10
8208: PUSH
8209: EMPTY
8210: LIST
8211: IN
8212: IFFALSE 8233
// points := [ 35 , 110 , 70 ] ;
8214: LD_ADDR_VAR 0 9
8218: PUSH
8219: LD_INT 35
8221: PUSH
8222: LD_INT 110
8224: PUSH
8225: LD_INT 70
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8233: LD_VAR 0 6
8237: PPUSH
8238: CALL_OW 265
8242: PUSH
8243: LD_INT 25
8245: EQUAL
8246: IFFALSE 8267
// points := [ 80 , 65 , 100 ] ;
8248: LD_ADDR_VAR 0 9
8252: PUSH
8253: LD_INT 80
8255: PUSH
8256: LD_INT 65
8258: PUSH
8259: LD_INT 100
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8267: LD_VAR 0 6
8271: PPUSH
8272: CALL_OW 263
8276: PUSH
8277: LD_INT 1
8279: EQUAL
8280: IFFALSE 8315
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8282: LD_ADDR_VAR 0 10
8286: PUSH
8287: LD_VAR 0 10
8291: PUSH
8292: LD_VAR 0 6
8296: PPUSH
8297: CALL_OW 311
8301: PPUSH
8302: LD_INT 3
8304: PPUSH
8305: CALL_OW 259
8309: PUSH
8310: LD_INT 4
8312: MUL
8313: MUL
8314: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8315: LD_VAR 0 6
8319: PPUSH
8320: CALL_OW 263
8324: PUSH
8325: LD_INT 2
8327: EQUAL
8328: IFFALSE 8379
// begin j := IsControledBy ( i ) ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 6
8339: PPUSH
8340: CALL_OW 312
8344: ST_TO_ADDR
// if j then
8345: LD_VAR 0 7
8349: IFFALSE 8379
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8351: LD_ADDR_VAR 0 10
8355: PUSH
8356: LD_VAR 0 10
8360: PUSH
8361: LD_VAR 0 7
8365: PPUSH
8366: LD_INT 3
8368: PPUSH
8369: CALL_OW 259
8373: PUSH
8374: LD_INT 3
8376: MUL
8377: MUL
8378: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8379: LD_VAR 0 6
8383: PPUSH
8384: CALL_OW 264
8388: PUSH
8389: LD_INT 5
8391: PUSH
8392: LD_INT 6
8394: PUSH
8395: LD_INT 46
8397: PUSH
8398: LD_INT 44
8400: PUSH
8401: LD_INT 47
8403: PUSH
8404: LD_INT 45
8406: PUSH
8407: LD_INT 28
8409: PUSH
8410: LD_INT 7
8412: PUSH
8413: LD_INT 27
8415: PUSH
8416: LD_INT 29
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: IN
8431: IFFALSE 8451
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: LD_INT 52
8441: PPUSH
8442: CALL_OW 321
8446: PUSH
8447: LD_INT 2
8449: EQUAL
8450: AND
8451: IFFALSE 8468
// bpoints := bpoints * 1.2 ;
8453: LD_ADDR_VAR 0 10
8457: PUSH
8458: LD_VAR 0 10
8462: PUSH
8463: LD_REAL  1.20000000000000E+0000
8466: MUL
8467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8468: LD_VAR 0 6
8472: PPUSH
8473: CALL_OW 264
8477: PUSH
8478: LD_INT 6
8480: PUSH
8481: LD_INT 46
8483: PUSH
8484: LD_INT 47
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: LIST
8491: IN
8492: IFFALSE 8509
// bpoints := bpoints * 1.2 ;
8494: LD_ADDR_VAR 0 10
8498: PUSH
8499: LD_VAR 0 10
8503: PUSH
8504: LD_REAL  1.20000000000000E+0000
8507: MUL
8508: ST_TO_ADDR
// end ; unit_building :
8509: GO 8523
8511: LD_INT 3
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8519
8517: GO 8522
8519: POP
// ; end ;
8520: GO 8523
8522: POP
// for j = 1 to 3 do
8523: LD_ADDR_VAR 0 7
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_INT 3
8535: PUSH
8536: FOR_TO
8537: IFFALSE 8590
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8539: LD_ADDR_VAR 0 5
8543: PUSH
8544: LD_VAR 0 5
8548: PPUSH
8549: LD_VAR 0 7
8553: PPUSH
8554: LD_VAR 0 5
8558: PUSH
8559: LD_VAR 0 7
8563: ARRAY
8564: PUSH
8565: LD_VAR 0 9
8569: PUSH
8570: LD_VAR 0 7
8574: ARRAY
8575: PUSH
8576: LD_VAR 0 10
8580: MUL
8581: PLUS
8582: PPUSH
8583: CALL_OW 1
8587: ST_TO_ADDR
8588: GO 8536
8590: POP
8591: POP
// end ;
8592: GO 7065
8594: POP
8595: POP
// result := Replace ( result , 4 , tmp ) ;
8596: LD_ADDR_VAR 0 5
8600: PUSH
8601: LD_VAR 0 5
8605: PPUSH
8606: LD_INT 4
8608: PPUSH
8609: LD_VAR 0 8
8613: PPUSH
8614: CALL_OW 1
8618: ST_TO_ADDR
// end ;
8619: LD_VAR 0 5
8623: RET
// export function DangerAtRange ( unit , range ) ; begin
8624: LD_INT 0
8626: PPUSH
// if not unit then
8627: LD_VAR 0 1
8631: NOT
8632: IFFALSE 8636
// exit ;
8634: GO 8681
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8636: LD_ADDR_VAR 0 3
8640: PUSH
8641: LD_VAR 0 1
8645: PPUSH
8646: CALL_OW 255
8650: PPUSH
8651: LD_VAR 0 1
8655: PPUSH
8656: CALL_OW 250
8660: PPUSH
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 251
8670: PPUSH
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL 6915 0 4
8680: ST_TO_ADDR
// end ;
8681: LD_VAR 0 3
8685: RET
// export function DangerInArea ( side , area ) ; begin
8686: LD_INT 0
8688: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8689: LD_ADDR_VAR 0 3
8693: PUSH
8694: LD_VAR 0 2
8698: PPUSH
8699: LD_INT 81
8701: PUSH
8702: LD_VAR 0 1
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL_OW 70
8715: ST_TO_ADDR
// end ;
8716: LD_VAR 0 3
8720: RET
// export function IsExtension ( b ) ; begin
8721: LD_INT 0
8723: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 1
8733: PUSH
8734: LD_INT 23
8736: PUSH
8737: LD_INT 20
8739: PUSH
8740: LD_INT 22
8742: PUSH
8743: LD_INT 17
8745: PUSH
8746: LD_INT 24
8748: PUSH
8749: LD_INT 21
8751: PUSH
8752: LD_INT 19
8754: PUSH
8755: LD_INT 16
8757: PUSH
8758: LD_INT 25
8760: PUSH
8761: LD_INT 18
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: IN
8776: ST_TO_ADDR
// end ;
8777: LD_VAR 0 2
8781: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8782: LD_INT 0
8784: PPUSH
8785: PPUSH
8786: PPUSH
// result := [ ] ;
8787: LD_ADDR_VAR 0 4
8791: PUSH
8792: EMPTY
8793: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8794: LD_ADDR_VAR 0 5
8798: PUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: LD_INT 21
8806: PUSH
8807: LD_INT 3
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PPUSH
8814: CALL_OW 70
8818: ST_TO_ADDR
// if not tmp then
8819: LD_VAR 0 5
8823: NOT
8824: IFFALSE 8828
// exit ;
8826: GO 8892
// if checkLink then
8828: LD_VAR 0 3
8832: IFFALSE 8882
// begin for i in tmp do
8834: LD_ADDR_VAR 0 6
8838: PUSH
8839: LD_VAR 0 5
8843: PUSH
8844: FOR_IN
8845: IFFALSE 8880
// if GetBase ( i ) <> base then
8847: LD_VAR 0 6
8851: PPUSH
8852: CALL_OW 274
8856: PUSH
8857: LD_VAR 0 1
8861: NONEQUAL
8862: IFFALSE 8878
// ComLinkToBase ( base , i ) ;
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_VAR 0 6
8873: PPUSH
8874: CALL_OW 169
8878: GO 8844
8880: POP
8881: POP
// end ; result := tmp ;
8882: LD_ADDR_VAR 0 4
8886: PUSH
8887: LD_VAR 0 5
8891: ST_TO_ADDR
// end ;
8892: LD_VAR 0 4
8896: RET
// export function ComComplete ( units , b ) ; var i ; begin
8897: LD_INT 0
8899: PPUSH
8900: PPUSH
// if not units then
8901: LD_VAR 0 1
8905: NOT
8906: IFFALSE 8910
// exit ;
8908: GO 9000
// for i in units do
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: LD_VAR 0 1
8919: PUSH
8920: FOR_IN
8921: IFFALSE 8998
// if BuildingStatus ( b ) = bs_build then
8923: LD_VAR 0 2
8927: PPUSH
8928: CALL_OW 461
8932: PUSH
8933: LD_INT 1
8935: EQUAL
8936: IFFALSE 8996
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8938: LD_VAR 0 4
8942: PPUSH
8943: LD_STRING h
8945: PUSH
8946: LD_VAR 0 2
8950: PPUSH
8951: CALL_OW 250
8955: PUSH
8956: LD_VAR 0 2
8960: PPUSH
8961: CALL_OW 251
8965: PUSH
8966: LD_VAR 0 2
8970: PUSH
8971: LD_INT 0
8973: PUSH
8974: LD_INT 0
8976: PUSH
8977: LD_INT 0
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: PUSH
8989: EMPTY
8990: LIST
8991: PPUSH
8992: CALL_OW 446
8996: GO 8920
8998: POP
8999: POP
// end ;
9000: LD_VAR 0 3
9004: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9005: LD_INT 0
9007: PPUSH
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
9012: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9013: LD_VAR 0 1
9017: NOT
9018: IFTRUE 9035
9020: PUSH
9021: LD_VAR 0 1
9025: PPUSH
9026: CALL_OW 263
9030: PUSH
9031: LD_INT 2
9033: NONEQUAL
9034: OR
9035: IFFALSE 9039
// exit ;
9037: GO 9355
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9039: LD_ADDR_VAR 0 6
9043: PUSH
9044: LD_INT 22
9046: PUSH
9047: LD_VAR 0 1
9051: PPUSH
9052: CALL_OW 255
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 2
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_INT 36
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 34
9076: PUSH
9077: LD_INT 31
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 69
9097: ST_TO_ADDR
// if not tmp then
9098: LD_VAR 0 6
9102: NOT
9103: IFFALSE 9107
// exit ;
9105: GO 9355
// result := [ ] ;
9107: LD_ADDR_VAR 0 2
9111: PUSH
9112: EMPTY
9113: ST_TO_ADDR
// for i in tmp do
9114: LD_ADDR_VAR 0 3
9118: PUSH
9119: LD_VAR 0 6
9123: PUSH
9124: FOR_IN
9125: IFFALSE 9196
// begin t := UnitsInside ( i ) ;
9127: LD_ADDR_VAR 0 4
9131: PUSH
9132: LD_VAR 0 3
9136: PPUSH
9137: CALL_OW 313
9141: ST_TO_ADDR
// if t then
9142: LD_VAR 0 4
9146: IFFALSE 9194
// for j in t do
9148: LD_ADDR_VAR 0 7
9152: PUSH
9153: LD_VAR 0 4
9157: PUSH
9158: FOR_IN
9159: IFFALSE 9192
// result := Replace ( result , result + 1 , j ) ;
9161: LD_ADDR_VAR 0 2
9165: PUSH
9166: LD_VAR 0 2
9170: PPUSH
9171: LD_VAR 0 2
9175: PUSH
9176: LD_INT 1
9178: PLUS
9179: PPUSH
9180: LD_VAR 0 7
9184: PPUSH
9185: CALL_OW 1
9189: ST_TO_ADDR
9190: GO 9158
9192: POP
9193: POP
// end ;
9194: GO 9124
9196: POP
9197: POP
// if not result then
9198: LD_VAR 0 2
9202: NOT
9203: IFFALSE 9207
// exit ;
9205: GO 9355
// mech := result [ 1 ] ;
9207: LD_ADDR_VAR 0 5
9211: PUSH
9212: LD_VAR 0 2
9216: PUSH
9217: LD_INT 1
9219: ARRAY
9220: ST_TO_ADDR
// if result > 1 then
9221: LD_VAR 0 2
9225: PUSH
9226: LD_INT 1
9228: GREATER
9229: IFFALSE 9341
// begin for i = 2 to result do
9231: LD_ADDR_VAR 0 3
9235: PUSH
9236: DOUBLE
9237: LD_INT 2
9239: DEC
9240: ST_TO_ADDR
9241: LD_VAR 0 2
9245: PUSH
9246: FOR_TO
9247: IFFALSE 9339
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9249: LD_ADDR_VAR 0 4
9253: PUSH
9254: LD_VAR 0 2
9258: PUSH
9259: LD_VAR 0 3
9263: ARRAY
9264: PPUSH
9265: LD_INT 3
9267: PPUSH
9268: CALL_OW 259
9272: PUSH
9273: LD_VAR 0 2
9277: PUSH
9278: LD_VAR 0 3
9282: ARRAY
9283: PPUSH
9284: CALL_OW 432
9288: MINUS
9289: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9290: LD_VAR 0 4
9294: PUSH
9295: LD_VAR 0 5
9299: PPUSH
9300: LD_INT 3
9302: PPUSH
9303: CALL_OW 259
9307: PUSH
9308: LD_VAR 0 5
9312: PPUSH
9313: CALL_OW 432
9317: MINUS
9318: GREATEREQUAL
9319: IFFALSE 9337
// mech := result [ i ] ;
9321: LD_ADDR_VAR 0 5
9325: PUSH
9326: LD_VAR 0 2
9330: PUSH
9331: LD_VAR 0 3
9335: ARRAY
9336: ST_TO_ADDR
// end ;
9337: GO 9246
9339: POP
9340: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9341: LD_VAR 0 1
9345: PPUSH
9346: LD_VAR 0 5
9350: PPUSH
9351: CALL_OW 135
// end ;
9355: LD_VAR 0 2
9359: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9360: LD_INT 0
9362: PPUSH
9363: PPUSH
9364: PPUSH
9365: PPUSH
9366: PPUSH
9367: PPUSH
9368: PPUSH
9369: PPUSH
9370: PPUSH
9371: PPUSH
9372: PPUSH
9373: PPUSH
9374: PPUSH
// result := [ ] ;
9375: LD_ADDR_VAR 0 7
9379: PUSH
9380: EMPTY
9381: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 266
9391: PUSH
9392: LD_INT 0
9394: PUSH
9395: LD_INT 1
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: IN
9402: NOT
9403: IFFALSE 9407
// exit ;
9405: GO 11047
// if name then
9407: LD_VAR 0 3
9411: IFFALSE 9427
// SetBName ( base_dep , name ) ;
9413: LD_VAR 0 1
9417: PPUSH
9418: LD_VAR 0 3
9422: PPUSH
9423: CALL_OW 500
// base := GetBase ( base_dep ) ;
9427: LD_ADDR_VAR 0 15
9431: PUSH
9432: LD_VAR 0 1
9436: PPUSH
9437: CALL_OW 274
9441: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9442: LD_ADDR_VAR 0 16
9446: PUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 255
9456: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9457: LD_ADDR_VAR 0 17
9461: PUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 248
9471: ST_TO_ADDR
// if sources then
9472: LD_VAR 0 5
9476: IFFALSE 9523
// for i = 1 to 3 do
9478: LD_ADDR_VAR 0 8
9482: PUSH
9483: DOUBLE
9484: LD_INT 1
9486: DEC
9487: ST_TO_ADDR
9488: LD_INT 3
9490: PUSH
9491: FOR_TO
9492: IFFALSE 9521
// AddResourceType ( base , i , sources [ i ] ) ;
9494: LD_VAR 0 15
9498: PPUSH
9499: LD_VAR 0 8
9503: PPUSH
9504: LD_VAR 0 5
9508: PUSH
9509: LD_VAR 0 8
9513: ARRAY
9514: PPUSH
9515: CALL_OW 276
9519: GO 9491
9521: POP
9522: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9523: LD_ADDR_VAR 0 18
9527: PUSH
9528: LD_VAR 0 15
9532: PPUSH
9533: LD_VAR 0 2
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL 8782 0 3
9545: ST_TO_ADDR
// InitHc ;
9546: CALL_OW 19
// InitUc ;
9550: CALL_OW 18
// uc_side := side ;
9554: LD_ADDR_OWVAR 20
9558: PUSH
9559: LD_VAR 0 16
9563: ST_TO_ADDR
// uc_nation := nation ;
9564: LD_ADDR_OWVAR 21
9568: PUSH
9569: LD_VAR 0 17
9573: ST_TO_ADDR
// if buildings then
9574: LD_VAR 0 18
9578: IFFALSE 10906
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9580: LD_ADDR_VAR 0 19
9584: PUSH
9585: LD_VAR 0 18
9589: PPUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 30
9595: PUSH
9596: LD_INT 29
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 30
9605: PUSH
9606: LD_INT 30
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: PPUSH
9618: CALL_OW 72
9622: ST_TO_ADDR
// if tmp then
9623: LD_VAR 0 19
9627: IFFALSE 9675
// for i in tmp do
9629: LD_ADDR_VAR 0 8
9633: PUSH
9634: LD_VAR 0 19
9638: PUSH
9639: FOR_IN
9640: IFFALSE 9673
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9642: LD_VAR 0 8
9646: PPUSH
9647: CALL_OW 250
9651: PPUSH
9652: LD_VAR 0 8
9656: PPUSH
9657: CALL_OW 251
9661: PPUSH
9662: LD_VAR 0 16
9666: PPUSH
9667: CALL_OW 441
9671: GO 9639
9673: POP
9674: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9675: LD_VAR 0 18
9679: PPUSH
9680: LD_INT 2
9682: PUSH
9683: LD_INT 30
9685: PUSH
9686: LD_INT 32
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 30
9695: PUSH
9696: LD_INT 33
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: PPUSH
9708: CALL_OW 72
9712: IFFALSE 9800
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9714: LD_ADDR_VAR 0 8
9718: PUSH
9719: LD_VAR 0 18
9723: PPUSH
9724: LD_INT 2
9726: PUSH
9727: LD_INT 30
9729: PUSH
9730: LD_INT 32
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: LD_INT 30
9739: PUSH
9740: LD_INT 33
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 72
9756: PUSH
9757: FOR_IN
9758: IFFALSE 9798
// begin if not GetBWeapon ( i ) then
9760: LD_VAR 0 8
9764: PPUSH
9765: CALL_OW 269
9769: NOT
9770: IFFALSE 9796
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9772: LD_VAR 0 8
9776: PPUSH
9777: LD_VAR 0 8
9781: PPUSH
9782: LD_VAR 0 2
9786: PPUSH
9787: CALL 11052 0 2
9791: PPUSH
9792: CALL_OW 431
// end ;
9796: GO 9757
9798: POP
9799: POP
// end ; for i = 1 to personel do
9800: LD_ADDR_VAR 0 8
9804: PUSH
9805: DOUBLE
9806: LD_INT 1
9808: DEC
9809: ST_TO_ADDR
9810: LD_VAR 0 6
9814: PUSH
9815: FOR_TO
9816: IFFALSE 10886
// begin if i > 4 then
9818: LD_VAR 0 8
9822: PUSH
9823: LD_INT 4
9825: GREATER
9826: IFFALSE 9830
// break ;
9828: GO 10886
// case i of 1 :
9830: LD_VAR 0 8
9834: PUSH
9835: LD_INT 1
9837: DOUBLE
9838: EQUAL
9839: IFTRUE 9843
9841: GO 9923
9843: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9844: LD_ADDR_VAR 0 12
9848: PUSH
9849: LD_VAR 0 18
9853: PPUSH
9854: LD_INT 22
9856: PUSH
9857: LD_VAR 0 16
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 58
9868: PUSH
9869: EMPTY
9870: LIST
9871: PUSH
9872: LD_INT 2
9874: PUSH
9875: LD_INT 30
9877: PUSH
9878: LD_INT 32
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 30
9887: PUSH
9888: LD_INT 4
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 30
9897: PUSH
9898: LD_INT 5
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: ST_TO_ADDR
9921: GO 10145
9923: LD_INT 2
9925: DOUBLE
9926: EQUAL
9927: IFTRUE 9931
9929: GO 9993
9931: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9932: LD_ADDR_VAR 0 12
9936: PUSH
9937: LD_VAR 0 18
9941: PPUSH
9942: LD_INT 22
9944: PUSH
9945: LD_VAR 0 16
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: LD_INT 30
9959: PUSH
9960: LD_INT 0
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 30
9969: PUSH
9970: LD_INT 1
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 72
9990: ST_TO_ADDR
9991: GO 10145
9993: LD_INT 3
9995: DOUBLE
9996: EQUAL
9997: IFTRUE 10001
9999: GO 10063
10001: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10002: LD_ADDR_VAR 0 12
10006: PUSH
10007: LD_VAR 0 18
10011: PPUSH
10012: LD_INT 22
10014: PUSH
10015: LD_VAR 0 16
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PUSH
10024: LD_INT 2
10026: PUSH
10027: LD_INT 30
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 3
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 72
10060: ST_TO_ADDR
10061: GO 10145
10063: LD_INT 4
10065: DOUBLE
10066: EQUAL
10067: IFTRUE 10071
10069: GO 10144
10071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10072: LD_ADDR_VAR 0 12
10076: PUSH
10077: LD_VAR 0 18
10081: PPUSH
10082: LD_INT 22
10084: PUSH
10085: LD_VAR 0 16
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: LD_INT 2
10096: PUSH
10097: LD_INT 30
10099: PUSH
10100: LD_INT 6
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 30
10109: PUSH
10110: LD_INT 7
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 30
10119: PUSH
10120: LD_INT 8
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 72
10141: ST_TO_ADDR
10142: GO 10145
10144: POP
// if i = 1 then
10145: LD_VAR 0 8
10149: PUSH
10150: LD_INT 1
10152: EQUAL
10153: IFFALSE 10264
// begin tmp := [ ] ;
10155: LD_ADDR_VAR 0 19
10159: PUSH
10160: EMPTY
10161: ST_TO_ADDR
// for j in f do
10162: LD_ADDR_VAR 0 9
10166: PUSH
10167: LD_VAR 0 12
10171: PUSH
10172: FOR_IN
10173: IFFALSE 10246
// if GetBType ( j ) = b_bunker then
10175: LD_VAR 0 9
10179: PPUSH
10180: CALL_OW 266
10184: PUSH
10185: LD_INT 32
10187: EQUAL
10188: IFFALSE 10215
// tmp := Insert ( tmp , 1 , j ) else
10190: LD_ADDR_VAR 0 19
10194: PUSH
10195: LD_VAR 0 19
10199: PPUSH
10200: LD_INT 1
10202: PPUSH
10203: LD_VAR 0 9
10207: PPUSH
10208: CALL_OW 2
10212: ST_TO_ADDR
10213: GO 10244
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10215: LD_ADDR_VAR 0 19
10219: PUSH
10220: LD_VAR 0 19
10224: PPUSH
10225: LD_VAR 0 19
10229: PUSH
10230: LD_INT 1
10232: PLUS
10233: PPUSH
10234: LD_VAR 0 9
10238: PPUSH
10239: CALL_OW 2
10243: ST_TO_ADDR
10244: GO 10172
10246: POP
10247: POP
// if tmp then
10248: LD_VAR 0 19
10252: IFFALSE 10264
// f := tmp ;
10254: LD_ADDR_VAR 0 12
10258: PUSH
10259: LD_VAR 0 19
10263: ST_TO_ADDR
// end ; x := personel [ i ] ;
10264: LD_ADDR_VAR 0 13
10268: PUSH
10269: LD_VAR 0 6
10273: PUSH
10274: LD_VAR 0 8
10278: ARRAY
10279: ST_TO_ADDR
// if x = - 1 then
10280: LD_VAR 0 13
10284: PUSH
10285: LD_INT 1
10287: NEG
10288: EQUAL
10289: IFFALSE 10500
// begin for j in f do
10291: LD_ADDR_VAR 0 9
10295: PUSH
10296: LD_VAR 0 12
10300: PUSH
10301: FOR_IN
10302: IFFALSE 10496
// repeat InitHc ;
10304: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10308: LD_VAR 0 9
10312: PPUSH
10313: CALL_OW 266
10317: PUSH
10318: LD_INT 5
10320: EQUAL
10321: IFFALSE 10391
// begin if UnitsInside ( j ) < 3 then
10323: LD_VAR 0 9
10327: PPUSH
10328: CALL_OW 313
10332: PUSH
10333: LD_INT 3
10335: LESS
10336: IFFALSE 10372
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10338: LD_INT 0
10340: PPUSH
10341: LD_INT 5
10343: PUSH
10344: LD_INT 8
10346: PUSH
10347: LD_INT 9
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: PUSH
10355: LD_VAR 0 17
10359: ARRAY
10360: PPUSH
10361: LD_VAR 0 4
10365: PPUSH
10366: CALL_OW 380
10370: GO 10389
// PrepareHuman ( false , i , skill ) ;
10372: LD_INT 0
10374: PPUSH
10375: LD_VAR 0 8
10379: PPUSH
10380: LD_VAR 0 4
10384: PPUSH
10385: CALL_OW 380
// end else
10389: GO 10408
// PrepareHuman ( false , i , skill ) ;
10391: LD_INT 0
10393: PPUSH
10394: LD_VAR 0 8
10398: PPUSH
10399: LD_VAR 0 4
10403: PPUSH
10404: CALL_OW 380
// un := CreateHuman ;
10408: LD_ADDR_VAR 0 14
10412: PUSH
10413: CALL_OW 44
10417: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10418: LD_ADDR_VAR 0 7
10422: PUSH
10423: LD_VAR 0 7
10427: PPUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_VAR 0 14
10435: PPUSH
10436: CALL_OW 2
10440: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10441: LD_VAR 0 14
10445: PPUSH
10446: LD_VAR 0 9
10450: PPUSH
10451: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10455: LD_VAR 0 9
10459: PPUSH
10460: CALL_OW 313
10464: PUSH
10465: LD_INT 6
10467: EQUAL
10468: IFTRUE 10492
10470: PUSH
10471: LD_VAR 0 9
10475: PPUSH
10476: CALL_OW 266
10480: PUSH
10481: LD_INT 32
10483: PUSH
10484: LD_INT 31
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: IN
10491: OR
10492: IFFALSE 10304
10494: GO 10301
10496: POP
10497: POP
// end else
10498: GO 10884
// for j = 1 to x do
10500: LD_ADDR_VAR 0 9
10504: PUSH
10505: DOUBLE
10506: LD_INT 1
10508: DEC
10509: ST_TO_ADDR
10510: LD_VAR 0 13
10514: PUSH
10515: FOR_TO
10516: IFFALSE 10882
// begin InitHc ;
10518: CALL_OW 19
// if not f then
10522: LD_VAR 0 12
10526: NOT
10527: IFFALSE 10616
// begin PrepareHuman ( false , i , skill ) ;
10529: LD_INT 0
10531: PPUSH
10532: LD_VAR 0 8
10536: PPUSH
10537: LD_VAR 0 4
10541: PPUSH
10542: CALL_OW 380
// un := CreateHuman ;
10546: LD_ADDR_VAR 0 14
10550: PUSH
10551: CALL_OW 44
10555: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10556: LD_ADDR_VAR 0 7
10560: PUSH
10561: LD_VAR 0 7
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: LD_VAR 0 14
10573: PPUSH
10574: CALL_OW 2
10578: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10579: LD_VAR 0 14
10583: PPUSH
10584: LD_VAR 0 1
10588: PPUSH
10589: CALL_OW 250
10593: PPUSH
10594: LD_VAR 0 1
10598: PPUSH
10599: CALL_OW 251
10603: PPUSH
10604: LD_INT 10
10606: PPUSH
10607: LD_INT 0
10609: PPUSH
10610: CALL_OW 50
// continue ;
10614: GO 10515
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10616: LD_VAR 0 12
10620: PUSH
10621: LD_INT 1
10623: ARRAY
10624: PPUSH
10625: CALL_OW 313
10629: IFFALSE 10657
10631: PUSH
10632: LD_VAR 0 12
10636: PUSH
10637: LD_INT 1
10639: ARRAY
10640: PPUSH
10641: CALL_OW 266
10645: PUSH
10646: LD_INT 32
10648: PUSH
10649: LD_INT 31
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: IN
10656: AND
10657: IFTRUE 10678
10659: PUSH
10660: LD_VAR 0 12
10664: PUSH
10665: LD_INT 1
10667: ARRAY
10668: PPUSH
10669: CALL_OW 313
10673: PUSH
10674: LD_INT 6
10676: EQUAL
10677: OR
10678: IFFALSE 10698
// f := Delete ( f , 1 ) ;
10680: LD_ADDR_VAR 0 12
10684: PUSH
10685: LD_VAR 0 12
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: CALL_OW 3
10697: ST_TO_ADDR
// if not f then
10698: LD_VAR 0 12
10702: NOT
10703: IFFALSE 10721
// begin x := x + 2 ;
10705: LD_ADDR_VAR 0 13
10709: PUSH
10710: LD_VAR 0 13
10714: PUSH
10715: LD_INT 2
10717: PLUS
10718: ST_TO_ADDR
// continue ;
10719: GO 10515
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10721: LD_VAR 0 12
10725: PUSH
10726: LD_INT 1
10728: ARRAY
10729: PPUSH
10730: CALL_OW 266
10734: PUSH
10735: LD_INT 5
10737: EQUAL
10738: IFFALSE 10812
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10740: LD_VAR 0 12
10744: PUSH
10745: LD_INT 1
10747: ARRAY
10748: PPUSH
10749: CALL_OW 313
10753: PUSH
10754: LD_INT 3
10756: LESS
10757: IFFALSE 10793
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10759: LD_INT 0
10761: PPUSH
10762: LD_INT 5
10764: PUSH
10765: LD_INT 8
10767: PUSH
10768: LD_INT 9
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: PUSH
10776: LD_VAR 0 17
10780: ARRAY
10781: PPUSH
10782: LD_VAR 0 4
10786: PPUSH
10787: CALL_OW 380
10791: GO 10810
// PrepareHuman ( false , i , skill ) ;
10793: LD_INT 0
10795: PPUSH
10796: LD_VAR 0 8
10800: PPUSH
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 380
// end else
10810: GO 10829
// PrepareHuman ( false , i , skill ) ;
10812: LD_INT 0
10814: PPUSH
10815: LD_VAR 0 8
10819: PPUSH
10820: LD_VAR 0 4
10824: PPUSH
10825: CALL_OW 380
// un := CreateHuman ;
10829: LD_ADDR_VAR 0 14
10833: PUSH
10834: CALL_OW 44
10838: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10839: LD_ADDR_VAR 0 7
10843: PUSH
10844: LD_VAR 0 7
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: LD_VAR 0 14
10856: PPUSH
10857: CALL_OW 2
10861: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10862: LD_VAR 0 14
10866: PPUSH
10867: LD_VAR 0 12
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: PPUSH
10876: CALL_OW 52
// end ;
10880: GO 10515
10882: POP
10883: POP
// end ;
10884: GO 9815
10886: POP
10887: POP
// result := result ^ buildings ;
10888: LD_ADDR_VAR 0 7
10892: PUSH
10893: LD_VAR 0 7
10897: PUSH
10898: LD_VAR 0 18
10902: ADD
10903: ST_TO_ADDR
// end else
10904: GO 11047
// begin for i = 1 to personel do
10906: LD_ADDR_VAR 0 8
10910: PUSH
10911: DOUBLE
10912: LD_INT 1
10914: DEC
10915: ST_TO_ADDR
10916: LD_VAR 0 6
10920: PUSH
10921: FOR_TO
10922: IFFALSE 11045
// begin if i > 4 then
10924: LD_VAR 0 8
10928: PUSH
10929: LD_INT 4
10931: GREATER
10932: IFFALSE 10936
// break ;
10934: GO 11045
// x := personel [ i ] ;
10936: LD_ADDR_VAR 0 13
10940: PUSH
10941: LD_VAR 0 6
10945: PUSH
10946: LD_VAR 0 8
10950: ARRAY
10951: ST_TO_ADDR
// if x = - 1 then
10952: LD_VAR 0 13
10956: PUSH
10957: LD_INT 1
10959: NEG
10960: EQUAL
10961: IFFALSE 10965
// continue ;
10963: GO 10921
// PrepareHuman ( false , i , skill ) ;
10965: LD_INT 0
10967: PPUSH
10968: LD_VAR 0 8
10972: PPUSH
10973: LD_VAR 0 4
10977: PPUSH
10978: CALL_OW 380
// un := CreateHuman ;
10982: LD_ADDR_VAR 0 14
10986: PUSH
10987: CALL_OW 44
10991: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10992: LD_VAR 0 14
10996: PPUSH
10997: LD_VAR 0 1
11001: PPUSH
11002: CALL_OW 250
11006: PPUSH
11007: LD_VAR 0 1
11011: PPUSH
11012: CALL_OW 251
11016: PPUSH
11017: LD_INT 10
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 50
// result := result ^ un ;
11027: LD_ADDR_VAR 0 7
11031: PUSH
11032: LD_VAR 0 7
11036: PUSH
11037: LD_VAR 0 14
11041: ADD
11042: ST_TO_ADDR
// end ;
11043: GO 10921
11045: POP
11046: POP
// end ; end ;
11047: LD_VAR 0 7
11051: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11052: LD_INT 0
11054: PPUSH
11055: PPUSH
11056: PPUSH
11057: PPUSH
11058: PPUSH
11059: PPUSH
11060: PPUSH
11061: PPUSH
11062: PPUSH
11063: PPUSH
11064: PPUSH
11065: PPUSH
11066: PPUSH
11067: PPUSH
11068: PPUSH
11069: PPUSH
// result := false ;
11070: LD_ADDR_VAR 0 3
11074: PUSH
11075: LD_INT 0
11077: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11078: LD_VAR 0 1
11082: NOT
11083: IFTRUE 11108
11085: PUSH
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 266
11095: PUSH
11096: LD_INT 32
11098: PUSH
11099: LD_INT 33
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: IN
11106: NOT
11107: OR
11108: IFFALSE 11112
// exit ;
11110: GO 12247
// nat := GetNation ( tower ) ;
11112: LD_ADDR_VAR 0 12
11116: PUSH
11117: LD_VAR 0 1
11121: PPUSH
11122: CALL_OW 248
11126: ST_TO_ADDR
// side := GetSide ( tower ) ;
11127: LD_ADDR_VAR 0 16
11131: PUSH
11132: LD_VAR 0 1
11136: PPUSH
11137: CALL_OW 255
11141: ST_TO_ADDR
// x := GetX ( tower ) ;
11142: LD_ADDR_VAR 0 10
11146: PUSH
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 250
11156: ST_TO_ADDR
// y := GetY ( tower ) ;
11157: LD_ADDR_VAR 0 11
11161: PUSH
11162: LD_VAR 0 1
11166: PPUSH
11167: CALL_OW 251
11171: ST_TO_ADDR
// if not x or not y then
11172: LD_VAR 0 10
11176: NOT
11177: IFTRUE 11186
11179: PUSH
11180: LD_VAR 0 11
11184: NOT
11185: OR
11186: IFFALSE 11190
// exit ;
11188: GO 12247
// weapon := 0 ;
11190: LD_ADDR_VAR 0 18
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// fac_list := [ ] ;
11198: LD_ADDR_VAR 0 17
11202: PUSH
11203: EMPTY
11204: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11205: LD_ADDR_VAR 0 6
11209: PUSH
11210: LD_VAR 0 1
11214: PPUSH
11215: CALL_OW 274
11219: PPUSH
11220: LD_VAR 0 2
11224: PPUSH
11225: LD_INT 0
11227: PPUSH
11228: CALL 8782 0 3
11232: PPUSH
11233: LD_INT 30
11235: PUSH
11236: LD_INT 3
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 72
11247: ST_TO_ADDR
// if not factories then
11248: LD_VAR 0 6
11252: NOT
11253: IFFALSE 11257
// exit ;
11255: GO 12247
// for i in factories do
11257: LD_ADDR_VAR 0 8
11261: PUSH
11262: LD_VAR 0 6
11266: PUSH
11267: FOR_IN
11268: IFFALSE 11293
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11270: LD_ADDR_VAR 0 17
11274: PUSH
11275: LD_VAR 0 17
11279: PUSH
11280: LD_VAR 0 8
11284: PPUSH
11285: CALL_OW 478
11289: UNION
11290: ST_TO_ADDR
11291: GO 11267
11293: POP
11294: POP
// if not fac_list then
11295: LD_VAR 0 17
11299: NOT
11300: IFFALSE 11304
// exit ;
11302: GO 12247
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11304: LD_ADDR_VAR 0 5
11308: PUSH
11309: LD_INT 4
11311: PUSH
11312: LD_INT 5
11314: PUSH
11315: LD_INT 9
11317: PUSH
11318: LD_INT 10
11320: PUSH
11321: LD_INT 6
11323: PUSH
11324: LD_INT 7
11326: PUSH
11327: LD_INT 11
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 27
11341: PUSH
11342: LD_INT 28
11344: PUSH
11345: LD_INT 26
11347: PUSH
11348: LD_INT 30
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 43
11359: PUSH
11360: LD_INT 44
11362: PUSH
11363: LD_INT 46
11365: PUSH
11366: LD_INT 45
11368: PUSH
11369: LD_INT 47
11371: PUSH
11372: LD_INT 49
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: PUSH
11388: LD_VAR 0 12
11392: ARRAY
11393: ST_TO_ADDR
// list := list isect fac_list ;
11394: LD_ADDR_VAR 0 5
11398: PUSH
11399: LD_VAR 0 5
11403: PUSH
11404: LD_VAR 0 17
11408: ISECT
11409: ST_TO_ADDR
// if not list then
11410: LD_VAR 0 5
11414: NOT
11415: IFFALSE 11419
// exit ;
11417: GO 12247
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11419: LD_VAR 0 12
11423: PUSH
11424: LD_INT 3
11426: EQUAL
11427: IFFALSE 11439
11429: PUSH
11430: LD_INT 49
11432: PUSH
11433: LD_VAR 0 5
11437: IN
11438: AND
11439: IFFALSE 11459
11441: PUSH
11442: LD_INT 31
11444: PPUSH
11445: LD_VAR 0 16
11449: PPUSH
11450: CALL_OW 321
11454: PUSH
11455: LD_INT 2
11457: EQUAL
11458: AND
11459: IFFALSE 11519
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11461: LD_INT 22
11463: PUSH
11464: LD_VAR 0 16
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 35
11475: PUSH
11476: LD_INT 49
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 91
11485: PUSH
11486: LD_VAR 0 1
11490: PUSH
11491: LD_INT 10
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: PPUSH
11504: CALL_OW 69
11508: NOT
11509: IFFALSE 11519
// weapon := ru_time_lapser ;
11511: LD_ADDR_VAR 0 18
11515: PUSH
11516: LD_INT 49
11518: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11519: LD_VAR 0 12
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: IN
11534: IFFALSE 11558
11536: PUSH
11537: LD_INT 11
11539: PUSH
11540: LD_VAR 0 5
11544: IN
11545: IFTRUE 11557
11547: PUSH
11548: LD_INT 30
11550: PUSH
11551: LD_VAR 0 5
11555: IN
11556: OR
11557: AND
11558: IFFALSE 11578
11560: PUSH
11561: LD_INT 6
11563: PPUSH
11564: LD_VAR 0 16
11568: PPUSH
11569: CALL_OW 321
11573: PUSH
11574: LD_INT 2
11576: EQUAL
11577: AND
11578: IFFALSE 11745
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11580: LD_INT 22
11582: PUSH
11583: LD_VAR 0 16
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 2
11594: PUSH
11595: LD_INT 35
11597: PUSH
11598: LD_INT 11
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 35
11607: PUSH
11608: LD_INT 30
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 91
11622: PUSH
11623: LD_VAR 0 1
11627: PUSH
11628: LD_INT 18
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: NOT
11646: IFFALSE 11722
11648: PUSH
11649: LD_INT 22
11651: PUSH
11652: LD_VAR 0 16
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 2
11663: PUSH
11664: LD_INT 30
11666: PUSH
11667: LD_INT 32
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 30
11676: PUSH
11677: LD_INT 33
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 91
11691: PUSH
11692: LD_VAR 0 1
11696: PUSH
11697: LD_INT 12
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: EMPTY
11711: LIST
11712: PPUSH
11713: CALL_OW 69
11717: PUSH
11718: LD_INT 2
11720: GREATER
11721: AND
11722: IFFALSE 11745
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11724: LD_ADDR_VAR 0 18
11728: PUSH
11729: LD_INT 11
11731: PUSH
11732: LD_INT 30
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_VAR 0 12
11743: ARRAY
11744: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11745: LD_VAR 0 18
11749: NOT
11750: IFFALSE 11770
11752: PUSH
11753: LD_INT 40
11755: PPUSH
11756: LD_VAR 0 16
11760: PPUSH
11761: CALL_OW 321
11765: PUSH
11766: LD_INT 2
11768: EQUAL
11769: AND
11770: IFFALSE 11806
11772: PUSH
11773: LD_INT 7
11775: PUSH
11776: LD_VAR 0 5
11780: IN
11781: IFTRUE 11793
11783: PUSH
11784: LD_INT 28
11786: PUSH
11787: LD_VAR 0 5
11791: IN
11792: OR
11793: IFTRUE 11805
11795: PUSH
11796: LD_INT 45
11798: PUSH
11799: LD_VAR 0 5
11803: IN
11804: OR
11805: AND
11806: IFFALSE 12060
// begin hex := GetHexInfo ( x , y ) ;
11808: LD_ADDR_VAR 0 4
11812: PUSH
11813: LD_VAR 0 10
11817: PPUSH
11818: LD_VAR 0 11
11822: PPUSH
11823: CALL_OW 546
11827: ST_TO_ADDR
// if hex [ 1 ] then
11828: LD_VAR 0 4
11832: PUSH
11833: LD_INT 1
11835: ARRAY
11836: IFFALSE 11840
// exit ;
11838: GO 12247
// height := hex [ 2 ] ;
11840: LD_ADDR_VAR 0 15
11844: PUSH
11845: LD_VAR 0 4
11849: PUSH
11850: LD_INT 2
11852: ARRAY
11853: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11854: LD_ADDR_VAR 0 14
11858: PUSH
11859: LD_INT 0
11861: PUSH
11862: LD_INT 2
11864: PUSH
11865: LD_INT 3
11867: PUSH
11868: LD_INT 5
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: ST_TO_ADDR
// for i in tmp do
11877: LD_ADDR_VAR 0 8
11881: PUSH
11882: LD_VAR 0 14
11886: PUSH
11887: FOR_IN
11888: IFFALSE 12058
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11890: LD_ADDR_VAR 0 9
11894: PUSH
11895: LD_VAR 0 10
11899: PPUSH
11900: LD_VAR 0 8
11904: PPUSH
11905: LD_INT 5
11907: PPUSH
11908: CALL_OW 272
11912: PUSH
11913: LD_VAR 0 11
11917: PPUSH
11918: LD_VAR 0 8
11922: PPUSH
11923: LD_INT 5
11925: PPUSH
11926: CALL_OW 273
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11935: LD_VAR 0 9
11939: PUSH
11940: LD_INT 1
11942: ARRAY
11943: PPUSH
11944: LD_VAR 0 9
11948: PUSH
11949: LD_INT 2
11951: ARRAY
11952: PPUSH
11953: CALL_OW 488
11957: IFFALSE 12056
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11959: LD_ADDR_VAR 0 4
11963: PUSH
11964: LD_VAR 0 9
11968: PUSH
11969: LD_INT 1
11971: ARRAY
11972: PPUSH
11973: LD_VAR 0 9
11977: PUSH
11978: LD_INT 2
11980: ARRAY
11981: PPUSH
11982: CALL_OW 546
11986: ST_TO_ADDR
// if hex [ 1 ] then
11987: LD_VAR 0 4
11991: PUSH
11992: LD_INT 1
11994: ARRAY
11995: IFFALSE 11999
// continue ;
11997: GO 11887
// h := hex [ 2 ] ;
11999: LD_ADDR_VAR 0 13
12003: PUSH
12004: LD_VAR 0 4
12008: PUSH
12009: LD_INT 2
12011: ARRAY
12012: ST_TO_ADDR
// if h + 7 < height then
12013: LD_VAR 0 13
12017: PUSH
12018: LD_INT 7
12020: PLUS
12021: PUSH
12022: LD_VAR 0 15
12026: LESS
12027: IFFALSE 12056
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12029: LD_ADDR_VAR 0 18
12033: PUSH
12034: LD_INT 7
12036: PUSH
12037: LD_INT 28
12039: PUSH
12040: LD_INT 45
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: LD_VAR 0 12
12052: ARRAY
12053: ST_TO_ADDR
// break ;
12054: GO 12058
// end ; end ; end ;
12056: GO 11887
12058: POP
12059: POP
// end ; if not weapon then
12060: LD_VAR 0 18
12064: NOT
12065: IFFALSE 12125
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12067: LD_ADDR_VAR 0 5
12071: PUSH
12072: LD_VAR 0 5
12076: PUSH
12077: LD_INT 11
12079: PUSH
12080: LD_INT 30
12082: PUSH
12083: LD_INT 49
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: DIFF
12091: ST_TO_ADDR
// if not list then
12092: LD_VAR 0 5
12096: NOT
12097: IFFALSE 12101
// exit ;
12099: GO 12247
// weapon := list [ rand ( 1 , list ) ] ;
12101: LD_ADDR_VAR 0 18
12105: PUSH
12106: LD_VAR 0 5
12110: PUSH
12111: LD_INT 1
12113: PPUSH
12114: LD_VAR 0 5
12118: PPUSH
12119: CALL_OW 12
12123: ARRAY
12124: ST_TO_ADDR
// end ; if weapon then
12125: LD_VAR 0 18
12129: IFFALSE 12247
// begin tmp := CostOfWeapon ( weapon ) ;
12131: LD_ADDR_VAR 0 14
12135: PUSH
12136: LD_VAR 0 18
12140: PPUSH
12141: CALL_OW 451
12145: ST_TO_ADDR
// j := GetBase ( tower ) ;
12146: LD_ADDR_VAR 0 9
12150: PUSH
12151: LD_VAR 0 1
12155: PPUSH
12156: CALL_OW 274
12160: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12161: LD_VAR 0 9
12165: PPUSH
12166: LD_INT 1
12168: PPUSH
12169: CALL_OW 275
12173: PUSH
12174: LD_VAR 0 14
12178: PUSH
12179: LD_INT 1
12181: ARRAY
12182: GREATEREQUAL
12183: IFFALSE 12209
12185: PUSH
12186: LD_VAR 0 9
12190: PPUSH
12191: LD_INT 2
12193: PPUSH
12194: CALL_OW 275
12198: PUSH
12199: LD_VAR 0 14
12203: PUSH
12204: LD_INT 2
12206: ARRAY
12207: GREATEREQUAL
12208: AND
12209: IFFALSE 12235
12211: PUSH
12212: LD_VAR 0 9
12216: PPUSH
12217: LD_INT 3
12219: PPUSH
12220: CALL_OW 275
12224: PUSH
12225: LD_VAR 0 14
12229: PUSH
12230: LD_INT 3
12232: ARRAY
12233: GREATEREQUAL
12234: AND
12235: IFFALSE 12247
// result := weapon ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: LD_VAR 0 18
12246: ST_TO_ADDR
// end ; end ;
12247: LD_VAR 0 3
12251: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12252: LD_INT 0
12254: PPUSH
12255: PPUSH
// result := true ;
12256: LD_ADDR_VAR 0 3
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// if array1 = array2 then
12264: LD_VAR 0 1
12268: PUSH
12269: LD_VAR 0 2
12273: EQUAL
12274: IFFALSE 12334
// begin for i = 1 to array1 do
12276: LD_ADDR_VAR 0 4
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_VAR 0 1
12290: PUSH
12291: FOR_TO
12292: IFFALSE 12330
// if array1 [ i ] <> array2 [ i ] then
12294: LD_VAR 0 1
12298: PUSH
12299: LD_VAR 0 4
12303: ARRAY
12304: PUSH
12305: LD_VAR 0 2
12309: PUSH
12310: LD_VAR 0 4
12314: ARRAY
12315: NONEQUAL
12316: IFFALSE 12328
// begin result := false ;
12318: LD_ADDR_VAR 0 3
12322: PUSH
12323: LD_INT 0
12325: ST_TO_ADDR
// break ;
12326: GO 12330
// end ;
12328: GO 12291
12330: POP
12331: POP
// end else
12332: GO 12342
// result := false ;
12334: LD_ADDR_VAR 0 3
12338: PUSH
12339: LD_INT 0
12341: ST_TO_ADDR
// end ;
12342: LD_VAR 0 3
12346: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
// if not array1 or not array2 then
12351: LD_VAR 0 1
12355: NOT
12356: IFTRUE 12365
12358: PUSH
12359: LD_VAR 0 2
12363: NOT
12364: OR
12365: IFFALSE 12369
// exit ;
12367: GO 12433
// result := true ;
12369: LD_ADDR_VAR 0 3
12373: PUSH
12374: LD_INT 1
12376: ST_TO_ADDR
// for i = 1 to array1 do
12377: LD_ADDR_VAR 0 4
12381: PUSH
12382: DOUBLE
12383: LD_INT 1
12385: DEC
12386: ST_TO_ADDR
12387: LD_VAR 0 1
12391: PUSH
12392: FOR_TO
12393: IFFALSE 12431
// if array1 [ i ] <> array2 [ i ] then
12395: LD_VAR 0 1
12399: PUSH
12400: LD_VAR 0 4
12404: ARRAY
12405: PUSH
12406: LD_VAR 0 2
12410: PUSH
12411: LD_VAR 0 4
12415: ARRAY
12416: NONEQUAL
12417: IFFALSE 12429
// begin result := false ;
12419: LD_ADDR_VAR 0 3
12423: PUSH
12424: LD_INT 0
12426: ST_TO_ADDR
// break ;
12427: GO 12431
// end ;
12429: GO 12392
12431: POP
12432: POP
// end ;
12433: LD_VAR 0 3
12437: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12438: LD_INT 0
12440: PPUSH
12441: PPUSH
12442: PPUSH
// pom := GetBase ( fac ) ;
12443: LD_ADDR_VAR 0 5
12447: PUSH
12448: LD_VAR 0 1
12452: PPUSH
12453: CALL_OW 274
12457: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12458: LD_ADDR_VAR 0 4
12462: PUSH
12463: LD_VAR 0 2
12467: PUSH
12468: LD_INT 1
12470: ARRAY
12471: PPUSH
12472: LD_VAR 0 2
12476: PUSH
12477: LD_INT 2
12479: ARRAY
12480: PPUSH
12481: LD_VAR 0 2
12485: PUSH
12486: LD_INT 3
12488: ARRAY
12489: PPUSH
12490: LD_VAR 0 2
12494: PUSH
12495: LD_INT 4
12497: ARRAY
12498: PPUSH
12499: CALL_OW 449
12503: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12504: LD_ADDR_VAR 0 3
12508: PUSH
12509: LD_VAR 0 5
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 275
12521: PUSH
12522: LD_VAR 0 4
12526: PUSH
12527: LD_INT 1
12529: ARRAY
12530: GREATEREQUAL
12531: IFFALSE 12557
12533: PUSH
12534: LD_VAR 0 5
12538: PPUSH
12539: LD_INT 2
12541: PPUSH
12542: CALL_OW 275
12546: PUSH
12547: LD_VAR 0 4
12551: PUSH
12552: LD_INT 2
12554: ARRAY
12555: GREATEREQUAL
12556: AND
12557: IFFALSE 12583
12559: PUSH
12560: LD_VAR 0 5
12564: PPUSH
12565: LD_INT 3
12567: PPUSH
12568: CALL_OW 275
12572: PUSH
12573: LD_VAR 0 4
12577: PUSH
12578: LD_INT 3
12580: ARRAY
12581: GREATEREQUAL
12582: AND
12583: ST_TO_ADDR
// end ;
12584: LD_VAR 0 3
12588: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12589: LD_INT 0
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
// pom := GetBase ( building ) ;
12595: LD_ADDR_VAR 0 3
12599: PUSH
12600: LD_VAR 0 1
12604: PPUSH
12605: CALL_OW 274
12609: ST_TO_ADDR
// if not pom then
12610: LD_VAR 0 3
12614: NOT
12615: IFFALSE 12619
// exit ;
12617: GO 12793
// btype := GetBType ( building ) ;
12619: LD_ADDR_VAR 0 5
12623: PUSH
12624: LD_VAR 0 1
12628: PPUSH
12629: CALL_OW 266
12633: ST_TO_ADDR
// if btype = b_armoury then
12634: LD_VAR 0 5
12638: PUSH
12639: LD_INT 4
12641: EQUAL
12642: IFFALSE 12652
// btype := b_barracks ;
12644: LD_ADDR_VAR 0 5
12648: PUSH
12649: LD_INT 5
12651: ST_TO_ADDR
// if btype = b_depot then
12652: LD_VAR 0 5
12656: PUSH
12657: LD_INT 0
12659: EQUAL
12660: IFFALSE 12670
// btype := b_warehouse ;
12662: LD_ADDR_VAR 0 5
12666: PUSH
12667: LD_INT 1
12669: ST_TO_ADDR
// if btype = b_workshop then
12670: LD_VAR 0 5
12674: PUSH
12675: LD_INT 2
12677: EQUAL
12678: IFFALSE 12688
// btype := b_factory ;
12680: LD_ADDR_VAR 0 5
12684: PUSH
12685: LD_INT 3
12687: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12688: LD_ADDR_VAR 0 4
12692: PUSH
12693: LD_VAR 0 5
12697: PPUSH
12698: LD_VAR 0 1
12702: PPUSH
12703: CALL_OW 248
12707: PPUSH
12708: CALL_OW 450
12712: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12713: LD_ADDR_VAR 0 2
12717: PUSH
12718: LD_VAR 0 3
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: CALL_OW 275
12730: PUSH
12731: LD_VAR 0 4
12735: PUSH
12736: LD_INT 1
12738: ARRAY
12739: GREATEREQUAL
12740: IFFALSE 12766
12742: PUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: LD_INT 2
12750: PPUSH
12751: CALL_OW 275
12755: PUSH
12756: LD_VAR 0 4
12760: PUSH
12761: LD_INT 2
12763: ARRAY
12764: GREATEREQUAL
12765: AND
12766: IFFALSE 12792
12768: PUSH
12769: LD_VAR 0 3
12773: PPUSH
12774: LD_INT 3
12776: PPUSH
12777: CALL_OW 275
12781: PUSH
12782: LD_VAR 0 4
12786: PUSH
12787: LD_INT 3
12789: ARRAY
12790: GREATEREQUAL
12791: AND
12792: ST_TO_ADDR
// end ;
12793: LD_VAR 0 2
12797: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12798: LD_INT 0
12800: PPUSH
12801: PPUSH
12802: PPUSH
// pom := GetBase ( building ) ;
12803: LD_ADDR_VAR 0 4
12807: PUSH
12808: LD_VAR 0 1
12812: PPUSH
12813: CALL_OW 274
12817: ST_TO_ADDR
// if not pom then
12818: LD_VAR 0 4
12822: NOT
12823: IFFALSE 12827
// exit ;
12825: GO 12932
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12827: LD_ADDR_VAR 0 5
12831: PUSH
12832: LD_VAR 0 2
12836: PPUSH
12837: LD_VAR 0 1
12841: PPUSH
12842: CALL_OW 248
12846: PPUSH
12847: CALL_OW 450
12851: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12852: LD_ADDR_VAR 0 3
12856: PUSH
12857: LD_VAR 0 4
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 275
12869: PUSH
12870: LD_VAR 0 5
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: GREATEREQUAL
12879: IFFALSE 12905
12881: PUSH
12882: LD_VAR 0 4
12886: PPUSH
12887: LD_INT 2
12889: PPUSH
12890: CALL_OW 275
12894: PUSH
12895: LD_VAR 0 5
12899: PUSH
12900: LD_INT 2
12902: ARRAY
12903: GREATEREQUAL
12904: AND
12905: IFFALSE 12931
12907: PUSH
12908: LD_VAR 0 4
12912: PPUSH
12913: LD_INT 3
12915: PPUSH
12916: CALL_OW 275
12920: PUSH
12921: LD_VAR 0 5
12925: PUSH
12926: LD_INT 3
12928: ARRAY
12929: GREATEREQUAL
12930: AND
12931: ST_TO_ADDR
// end ;
12932: LD_VAR 0 3
12936: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12937: LD_INT 0
12939: PPUSH
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
12947: PPUSH
12948: PPUSH
12949: PPUSH
// result := false ;
12950: LD_ADDR_VAR 0 8
12954: PUSH
12955: LD_INT 0
12957: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12958: LD_VAR 0 5
12962: NOT
12963: IFTRUE 12972
12965: PUSH
12966: LD_VAR 0 1
12970: NOT
12971: OR
12972: IFTRUE 12981
12974: PUSH
12975: LD_VAR 0 2
12979: NOT
12980: OR
12981: IFTRUE 12990
12983: PUSH
12984: LD_VAR 0 3
12988: NOT
12989: OR
12990: IFFALSE 12994
// exit ;
12992: GO 13820
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12994: LD_ADDR_VAR 0 14
12998: PUSH
12999: LD_VAR 0 1
13003: PPUSH
13004: LD_VAR 0 2
13008: PPUSH
13009: LD_VAR 0 3
13013: PPUSH
13014: LD_VAR 0 4
13018: PPUSH
13019: LD_VAR 0 5
13023: PUSH
13024: LD_INT 1
13026: ARRAY
13027: PPUSH
13028: CALL_OW 248
13032: PPUSH
13033: LD_INT 0
13035: PPUSH
13036: CALL 15101 0 6
13040: ST_TO_ADDR
// if not hexes then
13041: LD_VAR 0 14
13045: NOT
13046: IFFALSE 13050
// exit ;
13048: GO 13820
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13050: LD_ADDR_VAR 0 17
13054: PUSH
13055: LD_VAR 0 5
13059: PPUSH
13060: LD_INT 22
13062: PUSH
13063: LD_VAR 0 13
13067: PPUSH
13068: CALL_OW 255
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: LD_INT 30
13082: PUSH
13083: LD_INT 0
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 30
13092: PUSH
13093: LD_INT 1
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: ST_TO_ADDR
// for i = 1 to hexes do
13114: LD_ADDR_VAR 0 9
13118: PUSH
13119: DOUBLE
13120: LD_INT 1
13122: DEC
13123: ST_TO_ADDR
13124: LD_VAR 0 14
13128: PUSH
13129: FOR_TO
13130: IFFALSE 13818
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13132: LD_ADDR_VAR 0 13
13136: PUSH
13137: LD_VAR 0 14
13141: PUSH
13142: LD_VAR 0 9
13146: ARRAY
13147: PUSH
13148: LD_INT 1
13150: ARRAY
13151: PPUSH
13152: LD_VAR 0 14
13156: PUSH
13157: LD_VAR 0 9
13161: ARRAY
13162: PUSH
13163: LD_INT 2
13165: ARRAY
13166: PPUSH
13167: CALL_OW 428
13171: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13172: LD_VAR 0 14
13176: PUSH
13177: LD_VAR 0 9
13181: ARRAY
13182: PUSH
13183: LD_INT 1
13185: ARRAY
13186: PPUSH
13187: LD_VAR 0 14
13191: PUSH
13192: LD_VAR 0 9
13196: ARRAY
13197: PUSH
13198: LD_INT 2
13200: ARRAY
13201: PPUSH
13202: CALL_OW 351
13206: IFTRUE 13245
13208: PUSH
13209: LD_VAR 0 14
13213: PUSH
13214: LD_VAR 0 9
13218: ARRAY
13219: PUSH
13220: LD_INT 1
13222: ARRAY
13223: PPUSH
13224: LD_VAR 0 14
13228: PUSH
13229: LD_VAR 0 9
13233: ARRAY
13234: PUSH
13235: LD_INT 2
13237: ARRAY
13238: PPUSH
13239: CALL_OW 488
13243: NOT
13244: OR
13245: IFTRUE 13262
13247: PUSH
13248: LD_VAR 0 13
13252: PPUSH
13253: CALL_OW 247
13257: PUSH
13258: LD_INT 3
13260: EQUAL
13261: OR
13262: IFFALSE 13268
// exit ;
13264: POP
13265: POP
13266: GO 13820
// if not tmp then
13268: LD_VAR 0 13
13272: NOT
13273: IFFALSE 13277
// continue ;
13275: GO 13129
// result := true ;
13277: LD_ADDR_VAR 0 8
13281: PUSH
13282: LD_INT 1
13284: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13285: LD_VAR 0 6
13289: IFFALSE 13306
13291: PUSH
13292: LD_VAR 0 13
13296: PPUSH
13297: CALL_OW 247
13301: PUSH
13302: LD_INT 2
13304: EQUAL
13305: AND
13306: IFFALSE 13323
13308: PUSH
13309: LD_VAR 0 13
13313: PPUSH
13314: CALL_OW 263
13318: PUSH
13319: LD_INT 1
13321: EQUAL
13322: AND
13323: IFFALSE 13487
// begin if IsDrivenBy ( tmp ) then
13325: LD_VAR 0 13
13329: PPUSH
13330: CALL_OW 311
13334: IFFALSE 13338
// continue ;
13336: GO 13129
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13338: LD_VAR 0 6
13342: PPUSH
13343: LD_INT 3
13345: PUSH
13346: LD_INT 60
13348: PUSH
13349: EMPTY
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 3
13358: PUSH
13359: LD_INT 55
13361: PUSH
13362: EMPTY
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 72
13377: IFFALSE 13485
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13379: LD_ADDR_VAR 0 18
13383: PUSH
13384: LD_VAR 0 6
13388: PPUSH
13389: LD_INT 3
13391: PUSH
13392: LD_INT 60
13394: PUSH
13395: EMPTY
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 3
13404: PUSH
13405: LD_INT 55
13407: PUSH
13408: EMPTY
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 72
13423: PUSH
13424: LD_INT 1
13426: ARRAY
13427: ST_TO_ADDR
// if IsInUnit ( driver ) then
13428: LD_VAR 0 18
13432: PPUSH
13433: CALL_OW 310
13437: IFFALSE 13448
// ComExit ( driver ) ;
13439: LD_VAR 0 18
13443: PPUSH
13444: CALL 39091 0 1
// AddComEnterUnit ( driver , tmp ) ;
13448: LD_VAR 0 18
13452: PPUSH
13453: LD_VAR 0 13
13457: PPUSH
13458: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13462: LD_VAR 0 18
13466: PPUSH
13467: LD_VAR 0 7
13471: PPUSH
13472: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13476: LD_VAR 0 18
13480: PPUSH
13481: CALL_OW 181
// end ; continue ;
13485: GO 13129
// end ; if not cleaners or not tmp in cleaners then
13487: LD_VAR 0 6
13491: NOT
13492: IFTRUE 13507
13494: PUSH
13495: LD_VAR 0 13
13499: PUSH
13500: LD_VAR 0 6
13504: IN
13505: NOT
13506: OR
13507: IFFALSE 13816
// begin if dep then
13509: LD_VAR 0 17
13513: IFFALSE 13649
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13515: LD_ADDR_VAR 0 16
13519: PUSH
13520: LD_VAR 0 17
13524: PUSH
13525: LD_INT 1
13527: ARRAY
13528: PPUSH
13529: CALL_OW 250
13533: PPUSH
13534: LD_VAR 0 17
13538: PUSH
13539: LD_INT 1
13541: ARRAY
13542: PPUSH
13543: CALL_OW 254
13547: PPUSH
13548: LD_INT 5
13550: PPUSH
13551: CALL_OW 272
13555: PUSH
13556: LD_VAR 0 17
13560: PUSH
13561: LD_INT 1
13563: ARRAY
13564: PPUSH
13565: CALL_OW 251
13569: PPUSH
13570: LD_VAR 0 17
13574: PUSH
13575: LD_INT 1
13577: ARRAY
13578: PPUSH
13579: CALL_OW 254
13583: PPUSH
13584: LD_INT 5
13586: PPUSH
13587: CALL_OW 273
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13596: LD_VAR 0 16
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_VAR 0 16
13609: PUSH
13610: LD_INT 2
13612: ARRAY
13613: PPUSH
13614: CALL_OW 488
13618: IFFALSE 13649
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13620: LD_VAR 0 13
13624: PPUSH
13625: LD_VAR 0 16
13629: PUSH
13630: LD_INT 1
13632: ARRAY
13633: PPUSH
13634: LD_VAR 0 16
13638: PUSH
13639: LD_INT 2
13641: ARRAY
13642: PPUSH
13643: CALL_OW 111
// continue ;
13647: GO 13129
// end ; end ; r := GetDir ( tmp ) ;
13649: LD_ADDR_VAR 0 15
13653: PUSH
13654: LD_VAR 0 13
13658: PPUSH
13659: CALL_OW 254
13663: ST_TO_ADDR
// if r = 5 then
13664: LD_VAR 0 15
13668: PUSH
13669: LD_INT 5
13671: EQUAL
13672: IFFALSE 13682
// r := 0 ;
13674: LD_ADDR_VAR 0 15
13678: PUSH
13679: LD_INT 0
13681: ST_TO_ADDR
// for j = r to 5 do
13682: LD_ADDR_VAR 0 10
13686: PUSH
13687: DOUBLE
13688: LD_VAR 0 15
13692: DEC
13693: ST_TO_ADDR
13694: LD_INT 5
13696: PUSH
13697: FOR_TO
13698: IFFALSE 13814
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13700: LD_ADDR_VAR 0 11
13704: PUSH
13705: LD_VAR 0 13
13709: PPUSH
13710: CALL_OW 250
13714: PPUSH
13715: LD_VAR 0 10
13719: PPUSH
13720: LD_INT 2
13722: PPUSH
13723: CALL_OW 272
13727: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13728: LD_ADDR_VAR 0 12
13732: PUSH
13733: LD_VAR 0 13
13737: PPUSH
13738: CALL_OW 251
13742: PPUSH
13743: LD_VAR 0 10
13747: PPUSH
13748: LD_INT 2
13750: PPUSH
13751: CALL_OW 273
13755: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13756: LD_VAR 0 11
13760: PPUSH
13761: LD_VAR 0 12
13765: PPUSH
13766: CALL_OW 488
13770: IFFALSE 13789
13772: PUSH
13773: LD_VAR 0 11
13777: PPUSH
13778: LD_VAR 0 12
13782: PPUSH
13783: CALL_OW 428
13787: NOT
13788: AND
13789: IFFALSE 13812
// begin ComMoveXY ( tmp , _x , _y ) ;
13791: LD_VAR 0 13
13795: PPUSH
13796: LD_VAR 0 11
13800: PPUSH
13801: LD_VAR 0 12
13805: PPUSH
13806: CALL_OW 111
// break ;
13810: GO 13814
// end ; end ;
13812: GO 13697
13814: POP
13815: POP
// end ; end ;
13816: GO 13129
13818: POP
13819: POP
// end ;
13820: LD_VAR 0 8
13824: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13825: LD_INT 0
13827: PPUSH
// result := true ;
13828: LD_ADDR_VAR 0 3
13832: PUSH
13833: LD_INT 1
13835: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13836: LD_VAR 0 2
13840: PUSH
13841: LD_INT 24
13843: DOUBLE
13844: EQUAL
13845: IFTRUE 13855
13847: LD_INT 33
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13880
13855: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_INT 32
13863: PPUSH
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 321
13873: PUSH
13874: LD_INT 2
13876: EQUAL
13877: ST_TO_ADDR
13878: GO 14196
13880: LD_INT 20
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 13913
13888: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13889: LD_ADDR_VAR 0 3
13893: PUSH
13894: LD_INT 6
13896: PPUSH
13897: LD_VAR 0 1
13901: PPUSH
13902: CALL_OW 321
13906: PUSH
13907: LD_INT 2
13909: EQUAL
13910: ST_TO_ADDR
13911: GO 14196
13913: LD_INT 22
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13927
13919: LD_INT 36
13921: DOUBLE
13922: EQUAL
13923: IFTRUE 13927
13925: GO 13952
13927: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13928: LD_ADDR_VAR 0 3
13932: PUSH
13933: LD_INT 15
13935: PPUSH
13936: LD_VAR 0 1
13940: PPUSH
13941: CALL_OW 321
13945: PUSH
13946: LD_INT 2
13948: EQUAL
13949: ST_TO_ADDR
13950: GO 14196
13952: LD_INT 30
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13985
13960: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: LD_INT 20
13968: PPUSH
13969: LD_VAR 0 1
13973: PPUSH
13974: CALL_OW 321
13978: PUSH
13979: LD_INT 2
13981: EQUAL
13982: ST_TO_ADDR
13983: GO 14196
13985: LD_INT 28
13987: DOUBLE
13988: EQUAL
13989: IFTRUE 13999
13991: LD_INT 21
13993: DOUBLE
13994: EQUAL
13995: IFTRUE 13999
13997: GO 14024
13999: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: LD_INT 21
14007: PPUSH
14008: LD_VAR 0 1
14012: PPUSH
14013: CALL_OW 321
14017: PUSH
14018: LD_INT 2
14020: EQUAL
14021: ST_TO_ADDR
14022: GO 14196
14024: LD_INT 16
14026: DOUBLE
14027: EQUAL
14028: IFTRUE 14032
14030: GO 14057
14032: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14033: LD_ADDR_VAR 0 3
14037: PUSH
14038: LD_INT 84
14040: PPUSH
14041: LD_VAR 0 1
14045: PPUSH
14046: CALL_OW 321
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: ST_TO_ADDR
14055: GO 14196
14057: LD_INT 19
14059: DOUBLE
14060: EQUAL
14061: IFTRUE 14071
14063: LD_INT 23
14065: DOUBLE
14066: EQUAL
14067: IFTRUE 14071
14069: GO 14096
14071: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14072: LD_ADDR_VAR 0 3
14076: PUSH
14077: LD_INT 83
14079: PPUSH
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 321
14089: PUSH
14090: LD_INT 2
14092: EQUAL
14093: ST_TO_ADDR
14094: GO 14196
14096: LD_INT 17
14098: DOUBLE
14099: EQUAL
14100: IFTRUE 14104
14102: GO 14129
14104: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14105: LD_ADDR_VAR 0 3
14109: PUSH
14110: LD_INT 39
14112: PPUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: CALL_OW 321
14122: PUSH
14123: LD_INT 2
14125: EQUAL
14126: ST_TO_ADDR
14127: GO 14196
14129: LD_INT 18
14131: DOUBLE
14132: EQUAL
14133: IFTRUE 14137
14135: GO 14162
14137: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14138: LD_ADDR_VAR 0 3
14142: PUSH
14143: LD_INT 40
14145: PPUSH
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 321
14155: PUSH
14156: LD_INT 2
14158: EQUAL
14159: ST_TO_ADDR
14160: GO 14196
14162: LD_INT 27
14164: DOUBLE
14165: EQUAL
14166: IFTRUE 14170
14168: GO 14195
14170: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14171: LD_ADDR_VAR 0 3
14175: PUSH
14176: LD_INT 35
14178: PPUSH
14179: LD_VAR 0 1
14183: PPUSH
14184: CALL_OW 321
14188: PUSH
14189: LD_INT 2
14191: EQUAL
14192: ST_TO_ADDR
14193: GO 14196
14195: POP
// end ;
14196: LD_VAR 0 3
14200: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14201: LD_INT 0
14203: PPUSH
14204: PPUSH
14205: PPUSH
14206: PPUSH
14207: PPUSH
14208: PPUSH
14209: PPUSH
14210: PPUSH
14211: PPUSH
14212: PPUSH
14213: PPUSH
// result := false ;
14214: LD_ADDR_VAR 0 6
14218: PUSH
14219: LD_INT 0
14221: ST_TO_ADDR
// if btype = b_depot then
14222: LD_VAR 0 2
14226: PUSH
14227: LD_INT 0
14229: EQUAL
14230: IFFALSE 14242
// begin result := true ;
14232: LD_ADDR_VAR 0 6
14236: PUSH
14237: LD_INT 1
14239: ST_TO_ADDR
// exit ;
14240: GO 15096
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14242: LD_VAR 0 1
14246: NOT
14247: IFTRUE 14272
14249: PUSH
14250: LD_VAR 0 1
14254: PPUSH
14255: CALL_OW 266
14259: PUSH
14260: LD_INT 0
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: IN
14270: NOT
14271: OR
14272: IFTRUE 14281
14274: PUSH
14275: LD_VAR 0 2
14279: NOT
14280: OR
14281: IFTRUE 14317
14283: PUSH
14284: LD_VAR 0 5
14288: PUSH
14289: LD_INT 0
14291: PUSH
14292: LD_INT 1
14294: PUSH
14295: LD_INT 2
14297: PUSH
14298: LD_INT 3
14300: PUSH
14301: LD_INT 4
14303: PUSH
14304: LD_INT 5
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: IN
14315: NOT
14316: OR
14317: IFTRUE 14336
14319: PUSH
14320: LD_VAR 0 3
14324: PPUSH
14325: LD_VAR 0 4
14329: PPUSH
14330: CALL_OW 488
14334: NOT
14335: OR
14336: IFFALSE 14340
// exit ;
14338: GO 15096
// side := GetSide ( depot ) ;
14340: LD_ADDR_VAR 0 9
14344: PUSH
14345: LD_VAR 0 1
14349: PPUSH
14350: CALL_OW 255
14354: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14355: LD_VAR 0 9
14359: PPUSH
14360: LD_VAR 0 2
14364: PPUSH
14365: CALL 13825 0 2
14369: NOT
14370: IFFALSE 14374
// exit ;
14372: GO 15096
// pom := GetBase ( depot ) ;
14374: LD_ADDR_VAR 0 10
14378: PUSH
14379: LD_VAR 0 1
14383: PPUSH
14384: CALL_OW 274
14388: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14389: LD_ADDR_VAR 0 11
14393: PUSH
14394: LD_VAR 0 2
14398: PPUSH
14399: LD_VAR 0 1
14403: PPUSH
14404: CALL_OW 248
14408: PPUSH
14409: CALL_OW 450
14413: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14414: LD_VAR 0 10
14418: PPUSH
14419: LD_INT 1
14421: PPUSH
14422: CALL_OW 275
14426: PUSH
14427: LD_VAR 0 11
14431: PUSH
14432: LD_INT 1
14434: ARRAY
14435: GREATEREQUAL
14436: IFFALSE 14462
14438: PUSH
14439: LD_VAR 0 10
14443: PPUSH
14444: LD_INT 2
14446: PPUSH
14447: CALL_OW 275
14451: PUSH
14452: LD_VAR 0 11
14456: PUSH
14457: LD_INT 2
14459: ARRAY
14460: GREATEREQUAL
14461: AND
14462: IFFALSE 14488
14464: PUSH
14465: LD_VAR 0 10
14469: PPUSH
14470: LD_INT 3
14472: PPUSH
14473: CALL_OW 275
14477: PUSH
14478: LD_VAR 0 11
14482: PUSH
14483: LD_INT 3
14485: ARRAY
14486: GREATEREQUAL
14487: AND
14488: NOT
14489: IFFALSE 14493
// exit ;
14491: GO 15096
// if GetBType ( depot ) = b_depot then
14493: LD_VAR 0 1
14497: PPUSH
14498: CALL_OW 266
14502: PUSH
14503: LD_INT 0
14505: EQUAL
14506: IFFALSE 14518
// dist := 28 else
14508: LD_ADDR_VAR 0 14
14512: PUSH
14513: LD_INT 28
14515: ST_TO_ADDR
14516: GO 14526
// dist := 36 ;
14518: LD_ADDR_VAR 0 14
14522: PUSH
14523: LD_INT 36
14525: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14526: LD_VAR 0 1
14530: PPUSH
14531: LD_VAR 0 3
14535: PPUSH
14536: LD_VAR 0 4
14540: PPUSH
14541: CALL_OW 297
14545: PUSH
14546: LD_VAR 0 14
14550: GREATER
14551: IFFALSE 14555
// exit ;
14553: GO 15096
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14555: LD_ADDR_VAR 0 12
14559: PUSH
14560: LD_VAR 0 2
14564: PPUSH
14565: LD_VAR 0 3
14569: PPUSH
14570: LD_VAR 0 4
14574: PPUSH
14575: LD_VAR 0 5
14579: PPUSH
14580: LD_VAR 0 1
14584: PPUSH
14585: CALL_OW 248
14589: PPUSH
14590: LD_INT 0
14592: PPUSH
14593: CALL 15101 0 6
14597: ST_TO_ADDR
// if not hexes then
14598: LD_VAR 0 12
14602: NOT
14603: IFFALSE 14607
// exit ;
14605: GO 15096
// hex := GetHexInfo ( x , y ) ;
14607: LD_ADDR_VAR 0 15
14611: PUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_VAR 0 4
14621: PPUSH
14622: CALL_OW 546
14626: ST_TO_ADDR
// if hex [ 1 ] then
14627: LD_VAR 0 15
14631: PUSH
14632: LD_INT 1
14634: ARRAY
14635: IFFALSE 14639
// exit ;
14637: GO 15096
// height := hex [ 2 ] ;
14639: LD_ADDR_VAR 0 13
14643: PUSH
14644: LD_VAR 0 15
14648: PUSH
14649: LD_INT 2
14651: ARRAY
14652: ST_TO_ADDR
// for i = 1 to hexes do
14653: LD_ADDR_VAR 0 7
14657: PUSH
14658: DOUBLE
14659: LD_INT 1
14661: DEC
14662: ST_TO_ADDR
14663: LD_VAR 0 12
14667: PUSH
14668: FOR_TO
14669: IFFALSE 15013
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14671: LD_VAR 0 12
14675: PUSH
14676: LD_VAR 0 7
14680: ARRAY
14681: PUSH
14682: LD_INT 1
14684: ARRAY
14685: PPUSH
14686: LD_VAR 0 12
14690: PUSH
14691: LD_VAR 0 7
14695: ARRAY
14696: PUSH
14697: LD_INT 2
14699: ARRAY
14700: PPUSH
14701: CALL_OW 488
14705: NOT
14706: IFTRUE 14748
14708: PUSH
14709: LD_VAR 0 12
14713: PUSH
14714: LD_VAR 0 7
14718: ARRAY
14719: PUSH
14720: LD_INT 1
14722: ARRAY
14723: PPUSH
14724: LD_VAR 0 12
14728: PUSH
14729: LD_VAR 0 7
14733: ARRAY
14734: PUSH
14735: LD_INT 2
14737: ARRAY
14738: PPUSH
14739: CALL_OW 428
14743: PUSH
14744: LD_INT 0
14746: GREATER
14747: OR
14748: IFTRUE 14786
14750: PUSH
14751: LD_VAR 0 12
14755: PUSH
14756: LD_VAR 0 7
14760: ARRAY
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: PPUSH
14766: LD_VAR 0 12
14770: PUSH
14771: LD_VAR 0 7
14775: ARRAY
14776: PUSH
14777: LD_INT 2
14779: ARRAY
14780: PPUSH
14781: CALL_OW 351
14785: OR
14786: IFFALSE 14792
// exit ;
14788: POP
14789: POP
14790: GO 15096
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14792: LD_ADDR_VAR 0 8
14796: PUSH
14797: LD_VAR 0 12
14801: PUSH
14802: LD_VAR 0 7
14806: ARRAY
14807: PUSH
14808: LD_INT 1
14810: ARRAY
14811: PPUSH
14812: LD_VAR 0 12
14816: PUSH
14817: LD_VAR 0 7
14821: ARRAY
14822: PUSH
14823: LD_INT 2
14825: ARRAY
14826: PPUSH
14827: CALL_OW 546
14831: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14832: LD_VAR 0 8
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: IFTRUE 14862
14842: PUSH
14843: LD_VAR 0 8
14847: PUSH
14848: LD_INT 2
14850: ARRAY
14851: PUSH
14852: LD_VAR 0 13
14856: PUSH
14857: LD_INT 2
14859: PLUS
14860: GREATER
14861: OR
14862: IFTRUE 14884
14864: PUSH
14865: LD_VAR 0 8
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PUSH
14874: LD_VAR 0 13
14878: PUSH
14879: LD_INT 2
14881: MINUS
14882: LESS
14883: OR
14884: IFTRUE 14952
14886: PUSH
14887: LD_VAR 0 8
14891: PUSH
14892: LD_INT 3
14894: ARRAY
14895: PUSH
14896: LD_INT 0
14898: PUSH
14899: LD_INT 8
14901: PUSH
14902: LD_INT 9
14904: PUSH
14905: LD_INT 10
14907: PUSH
14908: LD_INT 11
14910: PUSH
14911: LD_INT 12
14913: PUSH
14914: LD_INT 13
14916: PUSH
14917: LD_INT 16
14919: PUSH
14920: LD_INT 17
14922: PUSH
14923: LD_INT 18
14925: PUSH
14926: LD_INT 19
14928: PUSH
14929: LD_INT 20
14931: PUSH
14932: LD_INT 21
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: IN
14950: NOT
14951: OR
14952: IFTRUE 14965
14954: PUSH
14955: LD_VAR 0 8
14959: PUSH
14960: LD_INT 5
14962: ARRAY
14963: NOT
14964: OR
14965: IFTRUE 15005
14967: PUSH
14968: LD_VAR 0 8
14972: PUSH
14973: LD_INT 6
14975: ARRAY
14976: PUSH
14977: LD_INT 1
14979: PUSH
14980: LD_INT 2
14982: PUSH
14983: LD_INT 7
14985: PUSH
14986: LD_INT 9
14988: PUSH
14989: LD_INT 10
14991: PUSH
14992: LD_INT 11
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: IN
15003: NOT
15004: OR
15005: IFFALSE 15011
// exit ;
15007: POP
15008: POP
15009: GO 15096
// end ;
15011: GO 14668
15013: POP
15014: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15015: LD_VAR 0 9
15019: PPUSH
15020: LD_VAR 0 3
15024: PPUSH
15025: LD_VAR 0 4
15029: PPUSH
15030: LD_INT 20
15032: PPUSH
15033: CALL 6915 0 4
15037: PUSH
15038: LD_INT 4
15040: ARRAY
15041: IFFALSE 15045
// exit ;
15043: GO 15096
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15045: LD_VAR 0 2
15049: PUSH
15050: LD_INT 29
15052: PUSH
15053: LD_INT 30
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: IN
15060: IFFALSE 15084
15062: PUSH
15063: LD_VAR 0 3
15067: PPUSH
15068: LD_VAR 0 4
15072: PPUSH
15073: LD_VAR 0 9
15077: PPUSH
15078: CALL_OW 440
15082: NOT
15083: AND
15084: IFFALSE 15088
// exit ;
15086: GO 15096
// result := true ;
15088: LD_ADDR_VAR 0 6
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// end ;
15096: LD_VAR 0 6
15100: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15101: LD_INT 0
15103: PPUSH
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
15122: PPUSH
15123: PPUSH
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
15129: PPUSH
15130: PPUSH
15131: PPUSH
15132: PPUSH
15133: PPUSH
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
15153: PPUSH
15154: PPUSH
15155: PPUSH
15156: PPUSH
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
// result = [ ] ;
15161: LD_ADDR_VAR 0 7
15165: PUSH
15166: EMPTY
15167: ST_TO_ADDR
// temp_list = [ ] ;
15168: LD_ADDR_VAR 0 9
15172: PUSH
15173: EMPTY
15174: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15175: LD_VAR 0 4
15179: PUSH
15180: LD_INT 0
15182: PUSH
15183: LD_INT 1
15185: PUSH
15186: LD_INT 2
15188: PUSH
15189: LD_INT 3
15191: PUSH
15192: LD_INT 4
15194: PUSH
15195: LD_INT 5
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: IN
15206: NOT
15207: IFTRUE 15250
15209: PUSH
15210: LD_VAR 0 1
15214: PUSH
15215: LD_INT 0
15217: PUSH
15218: LD_INT 1
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: IN
15225: IFFALSE 15249
15227: PUSH
15228: LD_VAR 0 5
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: LD_INT 2
15238: PUSH
15239: LD_INT 3
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: IN
15247: NOT
15248: AND
15249: OR
15250: IFFALSE 15254
// exit ;
15252: GO 33653
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15254: LD_VAR 0 1
15258: PUSH
15259: LD_INT 6
15261: PUSH
15262: LD_INT 7
15264: PUSH
15265: LD_INT 8
15267: PUSH
15268: LD_INT 13
15270: PUSH
15271: LD_INT 12
15273: PUSH
15274: LD_INT 15
15276: PUSH
15277: LD_INT 11
15279: PUSH
15280: LD_INT 14
15282: PUSH
15283: LD_INT 10
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: IN
15297: IFFALSE 15307
// btype = b_lab ;
15299: LD_ADDR_VAR 0 1
15303: PUSH
15304: LD_INT 6
15306: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15307: LD_VAR 0 6
15311: PUSH
15312: LD_INT 0
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: LD_INT 2
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: LIST
15325: IN
15326: NOT
15327: IFTRUE 15395
15329: PUSH
15330: LD_VAR 0 1
15334: PUSH
15335: LD_INT 0
15337: PUSH
15338: LD_INT 1
15340: PUSH
15341: LD_INT 2
15343: PUSH
15344: LD_INT 3
15346: PUSH
15347: LD_INT 6
15349: PUSH
15350: LD_INT 36
15352: PUSH
15353: LD_INT 4
15355: PUSH
15356: LD_INT 5
15358: PUSH
15359: LD_INT 31
15361: PUSH
15362: LD_INT 32
15364: PUSH
15365: LD_INT 33
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: IN
15381: NOT
15382: IFFALSE 15394
15384: PUSH
15385: LD_VAR 0 6
15389: PUSH
15390: LD_INT 1
15392: EQUAL
15393: AND
15394: OR
15395: IFTRUE 15427
15397: PUSH
15398: LD_VAR 0 1
15402: PUSH
15403: LD_INT 2
15405: PUSH
15406: LD_INT 3
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: IN
15413: NOT
15414: IFFALSE 15426
15416: PUSH
15417: LD_VAR 0 6
15421: PUSH
15422: LD_INT 2
15424: EQUAL
15425: AND
15426: OR
15427: IFFALSE 15437
// mode = 0 ;
15429: LD_ADDR_VAR 0 6
15433: PUSH
15434: LD_INT 0
15436: ST_TO_ADDR
// case mode of 0 :
15437: LD_VAR 0 6
15441: PUSH
15442: LD_INT 0
15444: DOUBLE
15445: EQUAL
15446: IFTRUE 15450
15448: GO 26903
15450: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15451: LD_ADDR_VAR 0 11
15455: PUSH
15456: LD_INT 0
15458: PUSH
15459: LD_INT 0
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 0
15468: PUSH
15469: LD_INT 1
15471: NEG
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 1
15479: PUSH
15480: LD_INT 0
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 1
15489: PUSH
15490: LD_INT 1
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 0
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 1
15509: NEG
15510: PUSH
15511: LD_INT 0
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 1
15520: NEG
15521: PUSH
15522: LD_INT 1
15524: NEG
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 1
15532: NEG
15533: PUSH
15534: LD_INT 2
15536: NEG
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 0
15544: PUSH
15545: LD_INT 2
15547: NEG
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 1
15555: PUSH
15556: LD_INT 1
15558: NEG
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 0
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 1
15586: NEG
15587: PUSH
15588: LD_INT 1
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: LD_INT 3
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 0
15607: PUSH
15608: LD_INT 3
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 1
15617: NEG
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15644: LD_ADDR_VAR 0 12
15648: PUSH
15649: LD_INT 0
15651: PUSH
15652: LD_INT 0
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 0
15661: PUSH
15662: LD_INT 1
15664: NEG
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: LD_INT 0
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: LD_INT 1
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 0
15692: PUSH
15693: LD_INT 1
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 1
15702: NEG
15703: PUSH
15704: LD_INT 0
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 1
15713: NEG
15714: PUSH
15715: LD_INT 1
15717: NEG
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 1
15725: PUSH
15726: LD_INT 1
15728: NEG
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 2
15736: PUSH
15737: LD_INT 0
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: LD_INT 1
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 1
15756: NEG
15757: PUSH
15758: LD_INT 1
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 2
15767: NEG
15768: PUSH
15769: LD_INT 0
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 2
15778: NEG
15779: PUSH
15780: LD_INT 1
15782: NEG
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 2
15790: NEG
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 3
15801: NEG
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 3
15812: NEG
15813: PUSH
15814: LD_INT 1
15816: NEG
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15840: LD_ADDR_VAR 0 13
15844: PUSH
15845: LD_INT 0
15847: PUSH
15848: LD_INT 0
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 1
15860: NEG
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: LD_INT 0
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: LD_INT 1
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 0
15888: PUSH
15889: LD_INT 1
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 1
15898: NEG
15899: PUSH
15900: LD_INT 0
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 1
15909: NEG
15910: PUSH
15911: LD_INT 1
15913: NEG
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 1
15921: NEG
15922: PUSH
15923: LD_INT 2
15925: NEG
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: LD_INT 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 2
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 1
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 2
15963: NEG
15964: PUSH
15965: LD_INT 1
15967: NEG
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 2
15975: NEG
15976: PUSH
15977: LD_INT 2
15979: NEG
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 2
15987: NEG
15988: PUSH
15989: LD_INT 3
15991: NEG
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 3
15999: NEG
16000: PUSH
16001: LD_INT 2
16003: NEG
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 3
16011: NEG
16012: PUSH
16013: LD_INT 3
16015: NEG
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16039: LD_ADDR_VAR 0 14
16043: PUSH
16044: LD_INT 0
16046: PUSH
16047: LD_INT 0
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 0
16056: PUSH
16057: LD_INT 1
16059: NEG
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: LD_INT 0
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 1
16077: PUSH
16078: LD_INT 1
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 0
16087: PUSH
16088: LD_INT 1
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 1
16097: NEG
16098: PUSH
16099: LD_INT 0
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 1
16108: NEG
16109: PUSH
16110: LD_INT 1
16112: NEG
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 1
16120: NEG
16121: PUSH
16122: LD_INT 2
16124: NEG
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 0
16132: PUSH
16133: LD_INT 2
16135: NEG
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: LD_INT 1
16146: NEG
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: LD_INT 2
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 0
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 1
16174: NEG
16175: PUSH
16176: LD_INT 1
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 1
16185: NEG
16186: PUSH
16187: LD_INT 3
16189: NEG
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 0
16197: PUSH
16198: LD_INT 3
16200: NEG
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 1
16208: PUSH
16209: LD_INT 2
16211: NEG
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16235: LD_ADDR_VAR 0 15
16239: PUSH
16240: LD_INT 0
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 0
16252: PUSH
16253: LD_INT 1
16255: NEG
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 1
16263: PUSH
16264: LD_INT 0
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 1
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 0
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 1
16293: NEG
16294: PUSH
16295: LD_INT 0
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 1
16304: NEG
16305: PUSH
16306: LD_INT 1
16308: NEG
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 1
16316: PUSH
16317: LD_INT 1
16319: NEG
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: LD_INT 0
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 2
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 1
16347: NEG
16348: PUSH
16349: LD_INT 1
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 2
16358: NEG
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 2
16369: NEG
16370: PUSH
16371: LD_INT 1
16373: NEG
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 2
16381: PUSH
16382: LD_INT 1
16384: NEG
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 3
16392: PUSH
16393: LD_INT 0
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 3
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16428: LD_ADDR_VAR 0 16
16432: PUSH
16433: LD_INT 0
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 1
16456: PUSH
16457: LD_INT 0
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 0
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: LD_INT 0
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: NEG
16510: PUSH
16511: LD_INT 2
16513: NEG
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 2
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 2
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: LD_INT 2
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 2
16551: NEG
16552: PUSH
16553: LD_INT 1
16555: NEG
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 2
16563: NEG
16564: PUSH
16565: LD_INT 2
16567: NEG
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 3
16575: PUSH
16576: LD_INT 2
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 3
16585: PUSH
16586: LD_INT 3
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: LD_INT 3
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16621: LD_ADDR_VAR 0 17
16625: PUSH
16626: LD_INT 0
16628: PUSH
16629: LD_INT 0
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: LD_INT 1
16641: NEG
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: LD_INT 0
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: LD_INT 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 0
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: NEG
16680: PUSH
16681: LD_INT 0
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 1
16690: NEG
16691: PUSH
16692: LD_INT 1
16694: NEG
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 1
16702: NEG
16703: PUSH
16704: LD_INT 2
16706: NEG
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 0
16714: PUSH
16715: LD_INT 2
16717: NEG
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 1
16725: PUSH
16726: LD_INT 1
16728: NEG
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 2
16736: PUSH
16737: LD_INT 0
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 2
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 1
16766: PUSH
16767: LD_INT 2
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: LD_INT 2
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 1
16786: NEG
16787: PUSH
16788: LD_INT 1
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 2
16797: NEG
16798: PUSH
16799: LD_INT 0
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 2
16808: NEG
16809: PUSH
16810: LD_INT 1
16812: NEG
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 2
16820: NEG
16821: PUSH
16822: LD_INT 2
16824: NEG
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16851: LD_ADDR_VAR 0 18
16855: PUSH
16856: LD_INT 0
16858: PUSH
16859: LD_INT 0
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 0
16868: PUSH
16869: LD_INT 1
16871: NEG
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: LD_INT 0
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 0
16899: PUSH
16900: LD_INT 1
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 1
16909: NEG
16910: PUSH
16911: LD_INT 0
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 1
16920: NEG
16921: PUSH
16922: LD_INT 1
16924: NEG
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 1
16932: NEG
16933: PUSH
16934: LD_INT 2
16936: NEG
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 0
16944: PUSH
16945: LD_INT 2
16947: NEG
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 1
16955: PUSH
16956: LD_INT 1
16958: NEG
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: LD_INT 0
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 2
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 0
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 1
17016: NEG
17017: PUSH
17018: LD_INT 1
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 2
17027: NEG
17028: PUSH
17029: LD_INT 0
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 2
17038: NEG
17039: PUSH
17040: LD_INT 1
17042: NEG
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: NEG
17051: PUSH
17052: LD_INT 2
17054: NEG
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17081: LD_ADDR_VAR 0 19
17085: PUSH
17086: LD_INT 0
17088: PUSH
17089: LD_INT 0
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 0
17098: PUSH
17099: LD_INT 1
17101: NEG
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: LD_INT 0
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 0
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 1
17139: NEG
17140: PUSH
17141: LD_INT 0
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: LD_INT 1
17154: NEG
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 1
17162: NEG
17163: PUSH
17164: LD_INT 2
17166: NEG
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 0
17174: PUSH
17175: LD_INT 2
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 1
17185: PUSH
17186: LD_INT 1
17188: NEG
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 2
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 0
17236: PUSH
17237: LD_INT 2
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 1
17246: NEG
17247: PUSH
17248: LD_INT 1
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 2
17257: NEG
17258: PUSH
17259: LD_INT 0
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 2
17268: NEG
17269: PUSH
17270: LD_INT 1
17272: NEG
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 2
17280: NEG
17281: PUSH
17282: LD_INT 2
17284: NEG
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17311: LD_ADDR_VAR 0 20
17315: PUSH
17316: LD_INT 0
17318: PUSH
17319: LD_INT 0
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 0
17328: PUSH
17329: LD_INT 1
17331: NEG
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: LD_INT 0
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: LD_INT 1
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 1
17369: NEG
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 1
17380: NEG
17381: PUSH
17382: LD_INT 1
17384: NEG
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 1
17392: NEG
17393: PUSH
17394: LD_INT 2
17396: NEG
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 2
17407: NEG
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 1
17415: PUSH
17416: LD_INT 1
17418: NEG
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 2
17426: PUSH
17427: LD_INT 0
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 2
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 2
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: LD_INT 2
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: NEG
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 2
17487: NEG
17488: PUSH
17489: LD_INT 0
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 2
17498: NEG
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 2
17510: NEG
17511: PUSH
17512: LD_INT 2
17514: NEG
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17541: LD_ADDR_VAR 0 21
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 0
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 0
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: NEG
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: LD_INT 1
17614: NEG
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 1
17622: NEG
17623: PUSH
17624: LD_INT 2
17626: NEG
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: LD_INT 2
17637: NEG
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 1
17645: PUSH
17646: LD_INT 1
17648: NEG
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: LD_INT 0
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: LD_INT 1
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 2
17676: PUSH
17677: LD_INT 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: LD_INT 2
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 0
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 2
17717: NEG
17718: PUSH
17719: LD_INT 0
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 2
17728: NEG
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 2
17740: NEG
17741: PUSH
17742: LD_INT 2
17744: NEG
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17771: LD_ADDR_VAR 0 22
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 0
17788: PUSH
17789: LD_INT 1
17791: NEG
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 0
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 1
17829: NEG
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: LD_INT 1
17844: NEG
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: LD_INT 2
17856: NEG
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: LD_INT 0
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 2
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 2
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: NEG
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 2
17947: NEG
17948: PUSH
17949: LD_INT 0
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: NEG
17959: PUSH
17960: LD_INT 1
17962: NEG
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 2
17970: NEG
17971: PUSH
17972: LD_INT 2
17974: NEG
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18001: LD_ADDR_VAR 0 23
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: LD_INT 1
18021: NEG
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 1
18059: NEG
18060: PUSH
18061: LD_INT 0
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 1
18070: NEG
18071: PUSH
18072: LD_INT 1
18074: NEG
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 1
18082: NEG
18083: PUSH
18084: LD_INT 2
18086: NEG
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 0
18094: PUSH
18095: LD_INT 2
18097: NEG
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 1
18105: PUSH
18106: LD_INT 1
18108: NEG
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 2
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 2
18136: PUSH
18137: LD_INT 2
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 0
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 2
18177: NEG
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 2
18188: NEG
18189: PUSH
18190: LD_INT 1
18192: NEG
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: NEG
18201: PUSH
18202: LD_INT 2
18204: NEG
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: NEG
18213: PUSH
18214: LD_INT 3
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 1
18224: NEG
18225: PUSH
18226: LD_INT 3
18228: NEG
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 1
18236: PUSH
18237: LD_INT 2
18239: NEG
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 1
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18281: LD_ADDR_VAR 0 24
18285: PUSH
18286: LD_INT 0
18288: PUSH
18289: LD_INT 0
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: LD_INT 1
18301: NEG
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 1
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 1
18339: NEG
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: NEG
18351: PUSH
18352: LD_INT 1
18354: NEG
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 1
18362: NEG
18363: PUSH
18364: LD_INT 2
18366: NEG
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: LD_INT 2
18377: NEG
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: LD_INT 1
18388: NEG
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 2
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 2
18416: PUSH
18417: LD_INT 2
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 1
18446: NEG
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 2
18457: NEG
18458: PUSH
18459: LD_INT 0
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 2
18468: NEG
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 2
18480: NEG
18481: PUSH
18482: LD_INT 2
18484: NEG
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: LD_INT 2
18495: NEG
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 2
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 3
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 3
18524: PUSH
18525: LD_INT 2
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18557: LD_ADDR_VAR 0 25
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: LD_INT 1
18577: NEG
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: LD_INT 0
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: LD_INT 1
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 0
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 1
18615: NEG
18616: PUSH
18617: LD_INT 0
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 1
18626: NEG
18627: PUSH
18628: LD_INT 1
18630: NEG
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: NEG
18639: PUSH
18640: LD_INT 2
18642: NEG
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: LD_INT 2
18653: NEG
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: LD_INT 1
18664: NEG
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: LD_INT 1
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: LD_INT 2
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 1
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: LD_INT 2
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 1
18722: NEG
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 2
18733: NEG
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 2
18744: NEG
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: NEG
18757: PUSH
18758: LD_INT 2
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 3
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 3
18778: PUSH
18779: LD_INT 2
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 3
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: LD_INT 3
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18831: LD_ADDR_VAR 0 26
18835: PUSH
18836: LD_INT 0
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: LD_INT 1
18904: NEG
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: LD_INT 2
18916: NEG
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 2
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: NEG
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 2
19018: NEG
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: LD_INT 2
19034: NEG
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: LD_INT 3
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 1
19062: NEG
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 2
19073: NEG
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19107: LD_ADDR_VAR 0 27
19111: PUSH
19112: LD_INT 0
19114: PUSH
19115: LD_INT 0
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: LD_INT 0
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 1
19176: NEG
19177: PUSH
19178: LD_INT 1
19180: NEG
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: NEG
19189: PUSH
19190: LD_INT 2
19192: NEG
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: LD_INT 2
19203: NEG
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: LD_INT 1
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 1
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 2
19283: NEG
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 2
19294: NEG
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: NEG
19307: PUSH
19308: LD_INT 2
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: NEG
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: NEG
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 3
19340: NEG
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 3
19352: NEG
19353: PUSH
19354: LD_INT 2
19356: NEG
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19387: LD_ADDR_VAR 0 28
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: LD_INT 0
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: LD_INT 1
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: LD_INT 1
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 1
19456: NEG
19457: PUSH
19458: LD_INT 1
19460: NEG
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: LD_INT 2
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: LD_INT 2
19483: NEG
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 1
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 2
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 2
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 2
19522: PUSH
19523: LD_INT 2
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 1
19532: PUSH
19533: LD_INT 2
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 0
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 2
19563: NEG
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 2
19574: NEG
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 2
19586: NEG
19587: PUSH
19588: LD_INT 2
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: NEG
19599: PUSH
19600: LD_INT 3
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: LD_INT 3
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 3
19622: NEG
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 3
19634: NEG
19635: PUSH
19636: LD_INT 2
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19669: LD_ADDR_VAR 0 29
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: LD_INT 1
19689: NEG
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: LD_INT 0
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 1
19727: NEG
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: LD_INT 1
19742: NEG
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: NEG
19751: PUSH
19752: LD_INT 2
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: LD_INT 2
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 0
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 2
19835: NEG
19836: PUSH
19837: LD_INT 1
19839: NEG
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 2
19847: NEG
19848: PUSH
19849: LD_INT 2
19851: NEG
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: LD_INT 3
19863: NEG
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: LD_INT 1
19874: NEG
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 3
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: LD_INT 3
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: NEG
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 3
19913: NEG
19914: PUSH
19915: LD_INT 2
19917: NEG
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19948: LD_ADDR_VAR 0 30
19952: PUSH
19953: LD_INT 0
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 0
19965: PUSH
19966: LD_INT 1
19968: NEG
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 1
19976: PUSH
19977: LD_INT 0
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: LD_INT 1
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: LD_INT 1
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: NEG
20018: PUSH
20019: LD_INT 1
20021: NEG
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 1
20029: NEG
20030: PUSH
20031: LD_INT 2
20033: NEG
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: LD_INT 2
20044: NEG
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: LD_INT 1
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: LD_INT 2
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 2
20125: NEG
20126: PUSH
20127: LD_INT 1
20129: NEG
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: LD_INT 3
20141: NEG
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: LD_INT 2
20152: NEG
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 3
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 3
20191: NEG
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20226: LD_ADDR_VAR 0 31
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 0
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: LD_INT 0
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: NEG
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 2
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: LD_INT 2
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 2
20391: NEG
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: NEG
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: NEG
20416: PUSH
20417: LD_INT 3
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 1
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 3
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: LD_INT 3
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 1
20458: NEG
20459: PUSH
20460: LD_INT 2
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 3
20469: NEG
20470: PUSH
20471: LD_INT 2
20473: NEG
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20504: LD_ADDR_VAR 0 32
20508: PUSH
20509: LD_INT 0
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: LD_INT 1
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: LD_INT 1
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PUSH
20575: LD_INT 1
20577: NEG
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 1
20585: NEG
20586: PUSH
20587: LD_INT 2
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: LD_INT 2
20600: NEG
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: LD_INT 1
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 2
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: LD_INT 2
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 0
20649: PUSH
20650: LD_INT 2
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 1
20659: NEG
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: NEG
20671: PUSH
20672: LD_INT 0
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 2
20681: NEG
20682: PUSH
20683: LD_INT 1
20685: NEG
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: LD_INT 3
20697: NEG
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: LD_INT 2
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 3
20716: PUSH
20717: LD_INT 2
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: LD_INT 3
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: LD_INT 1
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 3
20747: NEG
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20782: LD_ADDR_VAR 0 33
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: LD_INT 0
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 0
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 1
20840: NEG
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 1
20863: NEG
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: LD_INT 2
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 2
20937: NEG
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 2
20948: NEG
20949: PUSH
20950: LD_INT 1
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 2
20960: NEG
20961: PUSH
20962: LD_INT 2
20964: NEG
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 3
20976: NEG
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 3
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: LD_INT 3
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: LD_INT 2
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 3
21026: NEG
21027: PUSH
21028: LD_INT 2
21030: NEG
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21061: LD_ADDR_VAR 0 34
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 0
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 1
21119: NEG
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: LD_INT 2
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 2
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 2
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: LD_INT 2
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: NEG
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 2
21217: NEG
21218: PUSH
21219: LD_INT 0
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 2
21228: NEG
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 2
21240: NEG
21241: PUSH
21242: LD_INT 2
21244: NEG
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: LD_INT 3
21256: NEG
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: PUSH
21265: LD_INT 2
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 3
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 3
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 2
21295: NEG
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 3
21306: NEG
21307: PUSH
21308: LD_INT 1
21310: NEG
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21341: LD_ADDR_VAR 0 35
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: LD_INT 1
21361: NEG
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: NEG
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: LD_INT 1
21414: NEG
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 2
21432: NEG
21433: PUSH
21434: LD_INT 1
21436: NEG
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21453: LD_ADDR_VAR 0 36
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: LD_INT 0
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: LD_INT 1
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: NEG
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: LD_INT 1
21526: NEG
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 1
21534: NEG
21535: PUSH
21536: LD_INT 2
21538: NEG
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: LD_INT 2
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21565: LD_ADDR_VAR 0 37
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: LD_INT 0
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 0
21582: PUSH
21583: LD_INT 1
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: LD_INT 0
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: LD_INT 1
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 1
21623: NEG
21624: PUSH
21625: LD_INT 0
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 1
21634: NEG
21635: PUSH
21636: LD_INT 1
21638: NEG
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: LD_INT 1
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21677: LD_ADDR_VAR 0 38
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: LD_INT 0
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: LD_INT 1
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 1
21735: NEG
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: LD_INT 1
21750: NEG
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: LD_INT 1
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21789: LD_ADDR_VAR 0 39
21793: PUSH
21794: LD_INT 0
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: LD_INT 0
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 1
21847: NEG
21848: PUSH
21849: LD_INT 0
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: LD_INT 1
21862: NEG
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 1
21870: NEG
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21901: LD_ADDR_VAR 0 40
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: LD_INT 0
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: LD_INT 1
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: LD_INT 1
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 0
21949: PUSH
21950: LD_INT 1
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22013: LD_ADDR_VAR 0 41
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 0
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 0
22061: PUSH
22062: LD_INT 1
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: LD_INT 0
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: LD_INT 1
22086: NEG
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: LD_INT 2
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: LD_INT 1
22109: NEG
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: LD_INT 1
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 2
22179: NEG
22180: PUSH
22181: LD_INT 1
22183: NEG
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 2
22191: NEG
22192: PUSH
22193: LD_INT 2
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 2
22203: NEG
22204: PUSH
22205: LD_INT 3
22207: NEG
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 2
22215: PUSH
22216: LD_INT 1
22218: NEG
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 3
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 3
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 3
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 3
22256: PUSH
22257: LD_INT 3
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 2
22266: PUSH
22267: LD_INT 3
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 2
22276: NEG
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 3
22287: NEG
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 3
22298: NEG
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 3
22310: NEG
22311: PUSH
22312: LD_INT 2
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 3
22322: NEG
22323: PUSH
22324: LD_INT 3
22326: NEG
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22363: LD_ADDR_VAR 0 42
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 1
22421: NEG
22422: PUSH
22423: LD_INT 0
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: LD_INT 2
22448: NEG
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: LD_INT 2
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 2
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 0
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 2
22529: NEG
22530: PUSH
22531: LD_INT 1
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 2
22541: NEG
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 2
22553: NEG
22554: PUSH
22555: LD_INT 3
22557: NEG
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: LD_INT 3
22569: NEG
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 0
22577: PUSH
22578: LD_INT 3
22580: NEG
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: LD_INT 2
22591: NEG
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 3
22599: PUSH
22600: LD_INT 2
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 3
22609: PUSH
22610: LD_INT 3
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: LD_INT 3
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: LD_INT 3
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: LD_INT 3
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 1
22649: NEG
22650: PUSH
22651: LD_INT 2
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 3
22660: NEG
22661: PUSH
22662: LD_INT 2
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 3
22672: NEG
22673: PUSH
22674: LD_INT 3
22676: NEG
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22713: LD_ADDR_VAR 0 43
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: LD_INT 0
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 0
22730: PUSH
22731: LD_INT 1
22733: NEG
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 1
22771: NEG
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: NEG
22795: PUSH
22796: LD_INT 2
22798: NEG
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: LD_INT 2
22809: NEG
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 2
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 2
22879: NEG
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: NEG
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 3
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: LD_INT 3
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: LD_INT 2
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 2
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: LD_INT 0
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 3
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 3
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 1
22987: NEG
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 3
23009: NEG
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 3
23020: NEG
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23061: LD_ADDR_VAR 0 44
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 0
23078: PUSH
23079: LD_INT 1
23081: NEG
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 1
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: LD_INT 2
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: LD_INT 0
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 2
23185: PUSH
23186: LD_INT 2
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 1
23195: PUSH
23196: LD_INT 2
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 1
23205: NEG
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 2
23216: NEG
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 2
23227: NEG
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 2
23239: NEG
23240: PUSH
23241: LD_INT 2
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 2
23251: NEG
23252: PUSH
23253: LD_INT 3
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 3
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 3
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 3
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 2
23314: PUSH
23315: LD_INT 3
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 2
23324: NEG
23325: PUSH
23326: LD_INT 1
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 3
23335: NEG
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 3
23346: NEG
23347: PUSH
23348: LD_INT 1
23350: NEG
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 3
23358: NEG
23359: PUSH
23360: LD_INT 2
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 3
23370: NEG
23371: PUSH
23372: LD_INT 3
23374: NEG
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23411: LD_ADDR_VAR 0 45
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 1
23480: NEG
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: LD_INT 2
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 0
23504: PUSH
23505: LD_INT 2
23507: NEG
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 2
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: LD_INT 2
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: NEG
23578: PUSH
23579: LD_INT 1
23581: NEG
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: LD_INT 2
23593: NEG
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: LD_INT 3
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: LD_INT 3
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: LD_INT 3
23628: NEG
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: LD_INT 2
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 3
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 3
23657: PUSH
23658: LD_INT 3
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 2
23667: PUSH
23668: LD_INT 3
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 3
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 3
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 3
23708: NEG
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 3
23720: NEG
23721: PUSH
23722: LD_INT 3
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23761: LD_ADDR_VAR 0 46
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: LD_INT 2
23857: NEG
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: LD_INT 2
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 2
23927: NEG
23928: PUSH
23929: LD_INT 0
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 2
23938: NEG
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 3
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: LD_INT 3
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 2
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 2
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 3
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 3
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: LD_INT 3
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: LD_INT 3
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: NEG
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 2
24046: NEG
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 3
24057: NEG
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 3
24068: NEG
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24109: LD_ADDR_VAR 0 47
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: NEG
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: LD_INT 1
24182: NEG
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: LD_INT 2
24194: NEG
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: LD_INT 2
24205: NEG
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 1
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: NEG
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 2
24236: NEG
24237: PUSH
24238: LD_INT 2
24240: NEG
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24260: LD_ADDR_VAR 0 48
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: LD_INT 2
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: LD_INT 2
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24407: LD_ADDR_VAR 0 49
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24551: LD_ADDR_VAR 0 50
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 2
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: LD_INT 2
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24695: LD_ADDR_VAR 0 51
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 2
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: LD_INT 2
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 2
24807: NEG
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 2
24818: NEG
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24842: LD_ADDR_VAR 0 52
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: LD_INT 1
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: LD_INT 1
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: LD_INT 2
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 2
24957: NEG
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 2
24969: NEG
24970: PUSH
24971: LD_INT 2
24973: NEG
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24993: LD_ADDR_VAR 0 53
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 0
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: LD_INT 2
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 2
25169: NEG
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 2
25180: NEG
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: NEG
25193: PUSH
25194: LD_INT 2
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25223: LD_ADDR_VAR 0 54
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: LD_INT 1
25243: NEG
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: NEG
25305: PUSH
25306: LD_INT 2
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 2
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: NEG
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25453: LD_ADDR_VAR 0 55
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: NEG
25535: PUSH
25536: LD_INT 2
25538: NEG
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 0
25546: PUSH
25547: LD_INT 2
25549: NEG
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: LD_INT 2
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 2
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: NEG
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: NEG
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 2
25652: NEG
25653: PUSH
25654: LD_INT 2
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25683: LD_ADDR_VAR 0 56
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 0
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: LD_INT 1
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: LD_INT 2
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: LD_INT 2
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 2
25818: PUSH
25819: LD_INT 2
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 2
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 1
25848: NEG
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 2
25859: NEG
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: NEG
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 2
25882: NEG
25883: PUSH
25884: LD_INT 2
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25913: LD_ADDR_VAR 0 57
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: NEG
25995: PUSH
25996: LD_INT 2
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 2
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: NEG
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 2
26100: NEG
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: NEG
26113: PUSH
26114: LD_INT 2
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26143: LD_ADDR_VAR 0 58
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: LD_INT 1
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: NEG
26225: PUSH
26226: LD_INT 2
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: LD_INT 2
26239: NEG
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 2
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 2
26330: NEG
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: LD_INT 2
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26373: LD_ADDR_VAR 0 59
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26461: LD_ADDR_VAR 0 60
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 1
26530: NEG
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26549: LD_ADDR_VAR 0 61
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26637: LD_ADDR_VAR 0 62
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 0
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26725: LD_ADDR_VAR 0 63
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26813: LD_ADDR_VAR 0 64
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: ST_TO_ADDR
// end ; 1 :
26901: GO 32798
26903: LD_INT 1
26905: DOUBLE
26906: EQUAL
26907: IFTRUE 26911
26909: GO 29534
26911: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26912: LD_ADDR_VAR 0 11
26916: PUSH
26917: LD_INT 1
26919: NEG
26920: PUSH
26921: LD_INT 3
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: LD_INT 3
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: LD_INT 2
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: LIST
26955: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26956: LD_ADDR_VAR 0 12
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: LD_INT 1
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 3
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: LIST
26996: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26997: LD_ADDR_VAR 0 13
27001: PUSH
27002: LD_INT 3
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: LD_INT 3
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27037: LD_ADDR_VAR 0 14
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: LD_INT 3
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 3
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: LIST
27077: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27078: LD_ADDR_VAR 0 15
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 3
27096: NEG
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 3
27107: NEG
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: LIST
27121: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27122: LD_ADDR_VAR 0 16
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: LD_INT 3
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 3
27141: NEG
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 3
27153: NEG
27154: PUSH
27155: LD_INT 3
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: LIST
27167: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27168: LD_ADDR_VAR 0 17
27172: PUSH
27173: LD_INT 1
27175: NEG
27176: PUSH
27177: LD_INT 3
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: LD_INT 3
27190: NEG
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: LD_INT 2
27201: NEG
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: LIST
27211: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27212: LD_ADDR_VAR 0 18
27216: PUSH
27217: LD_INT 2
27219: PUSH
27220: LD_INT 1
27222: NEG
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 3
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27253: LD_ADDR_VAR 0 19
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: LD_INT 2
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 3
27270: PUSH
27271: LD_INT 3
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 2
27280: PUSH
27281: LD_INT 3
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27293: LD_ADDR_VAR 0 20
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: LD_INT 3
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: LD_INT 3
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27334: LD_ADDR_VAR 0 21
27338: PUSH
27339: LD_INT 2
27341: NEG
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 3
27352: NEG
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 3
27363: NEG
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27378: LD_ADDR_VAR 0 22
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: LD_INT 3
27389: NEG
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 3
27397: NEG
27398: PUSH
27399: LD_INT 2
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 3
27409: NEG
27410: PUSH
27411: LD_INT 3
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: LIST
27423: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27424: LD_ADDR_VAR 0 23
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: LD_INT 3
27434: NEG
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: LD_INT 4
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: LD_INT 3
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27468: LD_ADDR_VAR 0 24
27472: PUSH
27473: LD_INT 3
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 3
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 4
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27509: LD_ADDR_VAR 0 25
27513: PUSH
27514: LD_INT 3
27516: PUSH
27517: LD_INT 3
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 4
27526: PUSH
27527: LD_INT 3
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 3
27536: PUSH
27537: LD_INT 4
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27549: LD_ADDR_VAR 0 26
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: LD_INT 3
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 4
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: LD_INT 3
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: LIST
27589: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27590: LD_ADDR_VAR 0 27
27594: PUSH
27595: LD_INT 3
27597: NEG
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 3
27608: NEG
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 4
27619: NEG
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27634: LD_ADDR_VAR 0 28
27638: PUSH
27639: LD_INT 3
27641: NEG
27642: PUSH
27643: LD_INT 3
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 3
27653: NEG
27654: PUSH
27655: LD_INT 4
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 4
27665: NEG
27666: PUSH
27667: LD_INT 3
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27680: LD_ADDR_VAR 0 29
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: LD_INT 3
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: LD_INT 3
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 4
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 4
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 3
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 5
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 5
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 4
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 6
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: LD_INT 6
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 5
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27835: LD_ADDR_VAR 0 30
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 3
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 3
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 4
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 4
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 4
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 5
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 5
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 5
27935: PUSH
27936: LD_INT 1
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 6
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 6
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27978: LD_ADDR_VAR 0 31
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 3
27995: PUSH
27996: LD_INT 3
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: LD_INT 3
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 4
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 4
28025: PUSH
28026: LD_INT 4
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 3
28035: PUSH
28036: LD_INT 4
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 5
28045: PUSH
28046: LD_INT 4
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 5
28055: PUSH
28056: LD_INT 5
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 4
28065: PUSH
28066: LD_INT 5
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 6
28075: PUSH
28076: LD_INT 5
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 6
28085: PUSH
28086: LD_INT 6
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 5
28095: PUSH
28096: LD_INT 6
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28117: LD_ADDR_VAR 0 32
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: LD_INT 3
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: LD_INT 3
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 1
28144: NEG
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: LD_INT 4
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 4
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: LD_INT 3
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: LD_INT 5
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: LD_INT 5
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: LD_INT 4
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: LD_INT 6
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: LD_INT 6
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: LD_INT 5
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28260: LD_ADDR_VAR 0 33
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 3
28278: NEG
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 3
28289: NEG
28290: PUSH
28291: LD_INT 1
28293: NEG
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 3
28301: NEG
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 4
28312: NEG
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 4
28323: NEG
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 4
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 5
28346: NEG
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 5
28357: NEG
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 5
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 6
28380: NEG
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 6
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28415: LD_ADDR_VAR 0 34
28419: PUSH
28420: LD_INT 2
28422: NEG
28423: PUSH
28424: LD_INT 3
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 3
28434: NEG
28435: PUSH
28436: LD_INT 2
28438: NEG
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 3
28446: NEG
28447: PUSH
28448: LD_INT 3
28450: NEG
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 3
28458: NEG
28459: PUSH
28460: LD_INT 4
28462: NEG
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 4
28470: NEG
28471: PUSH
28472: LD_INT 3
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 4
28482: NEG
28483: PUSH
28484: LD_INT 4
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 4
28494: NEG
28495: PUSH
28496: LD_INT 5
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 5
28506: NEG
28507: PUSH
28508: LD_INT 4
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 5
28518: NEG
28519: PUSH
28520: LD_INT 5
28522: NEG
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 5
28530: NEG
28531: PUSH
28532: LD_INT 6
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 6
28542: NEG
28543: PUSH
28544: LD_INT 5
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 6
28554: NEG
28555: PUSH
28556: LD_INT 6
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28578: LD_ADDR_VAR 0 41
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 3
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28622: LD_ADDR_VAR 0 42
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 3
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28663: LD_ADDR_VAR 0 43
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 3
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: LD_INT 3
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: LIST
28702: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28703: LD_ADDR_VAR 0 44
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 3
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28744: LD_ADDR_VAR 0 45
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 3
28773: NEG
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28788: LD_ADDR_VAR 0 46
28792: PUSH
28793: LD_INT 2
28795: NEG
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 2
28807: NEG
28808: PUSH
28809: LD_INT 3
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 3
28819: NEG
28820: PUSH
28821: LD_INT 2
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: LIST
28833: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28834: LD_ADDR_VAR 0 47
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: LD_INT 3
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: LD_INT 3
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28867: LD_ADDR_VAR 0 48
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 2
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: LD_INT 1
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28898: LD_ADDR_VAR 0 49
28902: PUSH
28903: LD_INT 3
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 3
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28927: LD_ADDR_VAR 0 50
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: LD_INT 3
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28956: LD_ADDR_VAR 0 51
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 2
28974: NEG
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28987: LD_ADDR_VAR 0 52
28991: PUSH
28992: LD_INT 3
28994: NEG
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 3
29006: NEG
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29020: LD_ADDR_VAR 0 53
29024: PUSH
29025: LD_INT 1
29027: NEG
29028: PUSH
29029: LD_INT 3
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: LD_INT 3
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: LD_INT 2
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: LIST
29063: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29064: LD_ADDR_VAR 0 54
29068: PUSH
29069: LD_INT 2
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 3
29092: PUSH
29093: LD_INT 1
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: LIST
29104: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29105: LD_ADDR_VAR 0 55
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: LD_INT 2
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 3
29122: PUSH
29123: LD_INT 3
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 2
29132: PUSH
29133: LD_INT 3
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29145: LD_ADDR_VAR 0 56
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 3
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 3
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: LD_INT 2
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: LIST
29185: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29186: LD_ADDR_VAR 0 57
29190: PUSH
29191: LD_INT 2
29193: NEG
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 3
29204: NEG
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 3
29215: NEG
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29230: LD_ADDR_VAR 0 58
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: LD_INT 3
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 3
29249: NEG
29250: PUSH
29251: LD_INT 2
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 3
29261: NEG
29262: PUSH
29263: LD_INT 3
29265: NEG
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29276: LD_ADDR_VAR 0 59
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 0
29295: PUSH
29296: LD_INT 2
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29320: LD_ADDR_VAR 0 60
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 2
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 2
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29361: LD_ADDR_VAR 0 61
29365: PUSH
29366: LD_INT 2
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: LD_INT 2
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29401: LD_ADDR_VAR 0 62
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: NEG
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29442: LD_ADDR_VAR 0 63
29446: PUSH
29447: LD_INT 1
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 2
29460: NEG
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29486: LD_ADDR_VAR 0 64
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: NEG
29518: PUSH
29519: LD_INT 2
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: ST_TO_ADDR
// end ; 2 :
29532: GO 32798
29534: LD_INT 2
29536: DOUBLE
29537: EQUAL
29538: IFTRUE 29542
29540: GO 32797
29542: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29543: LD_ADDR_VAR 0 29
29547: PUSH
29548: LD_INT 4
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 4
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 5
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 5
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 4
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 3
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 3
29622: PUSH
29623: LD_INT 2
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 5
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 4
29663: PUSH
29664: LD_INT 3
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 4
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 3
29683: PUSH
29684: LD_INT 4
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: LD_INT 2
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 4
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 2
29723: PUSH
29724: LD_INT 4
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 4
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 3
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: LD_INT 4
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: LD_INT 5
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 5
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 1
29783: NEG
29784: PUSH
29785: LD_INT 4
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: LD_INT 5
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 2
29815: NEG
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 3
29826: NEG
29827: PUSH
29828: LD_INT 0
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 3
29837: NEG
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 2
29849: NEG
29850: PUSH
29851: LD_INT 0
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 2
29860: NEG
29861: PUSH
29862: LD_INT 1
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 3
29871: NEG
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 4
29882: NEG
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 4
29893: NEG
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 4
29905: NEG
29906: PUSH
29907: LD_INT 2
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 2
29917: NEG
29918: PUSH
29919: LD_INT 2
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 4
29928: NEG
29929: PUSH
29930: LD_INT 4
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 4
29940: NEG
29941: PUSH
29942: LD_INT 5
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 3
29952: NEG
29953: PUSH
29954: LD_INT 4
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 3
29964: NEG
29965: PUSH
29966: LD_INT 3
29968: NEG
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 4
29976: NEG
29977: PUSH
29978: LD_INT 3
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 5
29988: NEG
29989: PUSH
29990: LD_INT 4
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 5
30000: NEG
30001: PUSH
30002: LD_INT 5
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 3
30012: NEG
30013: PUSH
30014: LD_INT 5
30016: NEG
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 5
30024: NEG
30025: PUSH
30026: LD_INT 3
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30081: LD_ADDR_VAR 0 30
30085: PUSH
30086: LD_INT 4
30088: PUSH
30089: LD_INT 4
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 4
30098: PUSH
30099: LD_INT 3
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 5
30108: PUSH
30109: LD_INT 4
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 5
30118: PUSH
30119: LD_INT 5
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 4
30128: PUSH
30129: LD_INT 5
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 3
30138: PUSH
30139: LD_INT 4
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 3
30148: PUSH
30149: LD_INT 3
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 5
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 3
30168: PUSH
30169: LD_INT 5
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 3
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: LD_INT 2
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: LD_INT 4
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 4
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: PUSH
30241: LD_INT 2
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 2
30250: PUSH
30251: LD_INT 4
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: NEG
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 4
30271: NEG
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 4
30282: NEG
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 3
30294: NEG
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: NEG
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 4
30316: NEG
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 5
30327: NEG
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 5
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 5
30350: NEG
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 3
30362: NEG
30363: PUSH
30364: LD_INT 2
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 3
30373: NEG
30374: PUSH
30375: LD_INT 3
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 3
30385: NEG
30386: PUSH
30387: LD_INT 4
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 2
30397: NEG
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 2
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 3
30421: NEG
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 4
30433: NEG
30434: PUSH
30435: LD_INT 3
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 4
30445: NEG
30446: PUSH
30447: LD_INT 4
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 2
30457: NEG
30458: PUSH
30459: LD_INT 4
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 4
30469: NEG
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: LD_INT 4
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: LD_INT 5
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: LD_INT 4
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: LD_INT 3
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: LD_INT 3
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: NEG
30537: PUSH
30538: LD_INT 4
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: LD_INT 5
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 2
30571: NEG
30572: PUSH
30573: LD_INT 5
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30628: LD_ADDR_VAR 0 31
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: LD_INT 4
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: LD_INT 3
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 5
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 5
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: LD_INT 4
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: NEG
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 2
30707: PUSH
30708: LD_INT 5
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: LD_INT 3
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 3
30728: NEG
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 3
30739: NEG
30740: PUSH
30741: LD_INT 1
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 2
30762: NEG
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 3
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 4
30784: NEG
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 4
30795: NEG
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 4
30807: NEG
30808: PUSH
30809: LD_INT 2
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 4
30830: NEG
30831: PUSH
30832: LD_INT 4
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 4
30842: NEG
30843: PUSH
30844: LD_INT 5
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 3
30854: NEG
30855: PUSH
30856: LD_INT 4
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 3
30866: NEG
30867: PUSH
30868: LD_INT 3
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 4
30878: NEG
30879: PUSH
30880: LD_INT 3
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 5
30890: NEG
30891: PUSH
30892: LD_INT 4
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 5
30902: NEG
30903: PUSH
30904: LD_INT 5
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 3
30914: NEG
30915: PUSH
30916: LD_INT 5
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 5
30926: NEG
30927: PUSH
30928: LD_INT 3
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: LD_INT 3
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 4
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: LD_INT 2
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 0
30982: PUSH
30983: LD_INT 2
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: PUSH
31007: LD_INT 4
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 2
31017: PUSH
31018: LD_INT 2
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 2
31028: NEG
31029: PUSH
31030: LD_INT 4
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 4
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 4
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 5
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 5
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 4
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 3
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 3
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 3
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 5
31123: PUSH
31124: LD_INT 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31178: LD_ADDR_VAR 0 32
31182: PUSH
31183: LD_INT 4
31185: NEG
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 4
31196: NEG
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: NEG
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: NEG
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 4
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 5
31241: NEG
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 5
31252: NEG
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 5
31264: NEG
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: NEG
31288: PUSH
31289: LD_INT 3
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 3
31299: NEG
31300: PUSH
31301: LD_INT 4
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: NEG
31312: PUSH
31313: LD_INT 3
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 2
31323: NEG
31324: PUSH
31325: LD_INT 2
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 3
31335: NEG
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 4
31347: NEG
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 4
31359: NEG
31360: PUSH
31361: LD_INT 4
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: LD_INT 4
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 4
31383: NEG
31384: PUSH
31385: LD_INT 2
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: LD_INT 4
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: LD_INT 5
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 4
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: LD_INT 3
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 5
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 3
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 2
31485: NEG
31486: PUSH
31487: LD_INT 5
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 3
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 3
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 4
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 4
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: LD_INT 2
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 4
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 4
31590: PUSH
31591: LD_INT 4
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 4
31600: PUSH
31601: LD_INT 3
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 5
31610: PUSH
31611: LD_INT 4
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 5
31620: PUSH
31621: LD_INT 5
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 4
31630: PUSH
31631: LD_INT 5
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: LD_INT 4
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: LD_INT 3
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 5
31660: PUSH
31661: LD_INT 3
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 3
31670: PUSH
31671: LD_INT 5
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31725: LD_ADDR_VAR 0 33
31729: PUSH
31730: LD_INT 4
31732: NEG
31733: PUSH
31734: LD_INT 4
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 4
31744: NEG
31745: PUSH
31746: LD_INT 5
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 3
31756: NEG
31757: PUSH
31758: LD_INT 4
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 3
31768: NEG
31769: PUSH
31770: LD_INT 3
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 4
31780: NEG
31781: PUSH
31782: LD_INT 3
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 5
31792: NEG
31793: PUSH
31794: LD_INT 4
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 5
31804: NEG
31805: PUSH
31806: LD_INT 5
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 3
31816: NEG
31817: PUSH
31818: LD_INT 5
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 5
31828: NEG
31829: PUSH
31830: LD_INT 3
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 4
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: LD_INT 2
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 4
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: LD_INT 2
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: LD_INT 4
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 4
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 4
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 5
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 5
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 4
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 3
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 3
32014: PUSH
32015: LD_INT 2
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 5
32025: PUSH
32026: LD_INT 2
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 3
32035: PUSH
32036: LD_INT 3
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: LD_INT 2
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 4
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 4
32065: PUSH
32066: LD_INT 4
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 3
32075: PUSH
32076: LD_INT 4
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: LD_INT 3
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 4
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 2
32115: PUSH
32116: LD_INT 4
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: LD_INT 4
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: LD_INT 5
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: LD_INT 4
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: LD_INT 3
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 5
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 2
32207: NEG
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32263: LD_ADDR_VAR 0 34
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: LD_INT 4
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 5
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: LD_INT 4
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 3
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: LD_INT 3
32317: NEG
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: LD_INT 4
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: NEG
32338: PUSH
32339: LD_INT 5
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 3
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: LD_INT 5
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 4
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 4
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 4
32455: PUSH
32456: LD_INT 2
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 4
32465: PUSH
32466: LD_INT 4
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 4
32475: PUSH
32476: LD_INT 3
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 5
32485: PUSH
32486: LD_INT 4
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 5
32495: PUSH
32496: LD_INT 5
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 4
32505: PUSH
32506: LD_INT 5
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: LD_INT 4
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 5
32535: PUSH
32536: LD_INT 3
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 3
32545: PUSH
32546: LD_INT 5
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 3
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: LD_INT 3
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: LD_INT 4
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: LD_INT 4
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: LD_INT 3
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: LD_INT 4
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 4
32648: NEG
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 4
32659: NEG
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 3
32671: NEG
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 3
32682: NEG
32683: PUSH
32684: LD_INT 1
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 4
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 5
32704: NEG
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 5
32715: NEG
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 5
32727: NEG
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 3
32739: NEG
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: ST_TO_ADDR
// end ; end ;
32795: GO 32798
32797: POP
// case btype of b_depot , b_warehouse :
32798: LD_VAR 0 1
32802: PUSH
32803: LD_INT 0
32805: DOUBLE
32806: EQUAL
32807: IFTRUE 32817
32809: LD_INT 1
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 33018
32817: POP
// case nation of nation_american :
32818: LD_VAR 0 5
32822: PUSH
32823: LD_INT 1
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32831
32829: GO 32887
32831: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32832: LD_ADDR_VAR 0 9
32836: PUSH
32837: LD_VAR 0 11
32841: PUSH
32842: LD_VAR 0 12
32846: PUSH
32847: LD_VAR 0 13
32851: PUSH
32852: LD_VAR 0 14
32856: PUSH
32857: LD_VAR 0 15
32861: PUSH
32862: LD_VAR 0 16
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: PUSH
32875: LD_VAR 0 4
32879: PUSH
32880: LD_INT 1
32882: PLUS
32883: ARRAY
32884: ST_TO_ADDR
32885: GO 33016
32887: LD_INT 2
32889: DOUBLE
32890: EQUAL
32891: IFTRUE 32895
32893: GO 32951
32895: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32896: LD_ADDR_VAR 0 9
32900: PUSH
32901: LD_VAR 0 17
32905: PUSH
32906: LD_VAR 0 18
32910: PUSH
32911: LD_VAR 0 19
32915: PUSH
32916: LD_VAR 0 20
32920: PUSH
32921: LD_VAR 0 21
32925: PUSH
32926: LD_VAR 0 22
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: PUSH
32939: LD_VAR 0 4
32943: PUSH
32944: LD_INT 1
32946: PLUS
32947: ARRAY
32948: ST_TO_ADDR
32949: GO 33016
32951: LD_INT 3
32953: DOUBLE
32954: EQUAL
32955: IFTRUE 32959
32957: GO 33015
32959: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32960: LD_ADDR_VAR 0 9
32964: PUSH
32965: LD_VAR 0 23
32969: PUSH
32970: LD_VAR 0 24
32974: PUSH
32975: LD_VAR 0 25
32979: PUSH
32980: LD_VAR 0 26
32984: PUSH
32985: LD_VAR 0 27
32989: PUSH
32990: LD_VAR 0 28
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: PUSH
33003: LD_VAR 0 4
33007: PUSH
33008: LD_INT 1
33010: PLUS
33011: ARRAY
33012: ST_TO_ADDR
33013: GO 33016
33015: POP
33016: GO 33571
33018: LD_INT 2
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33032
33024: LD_INT 3
33026: DOUBLE
33027: EQUAL
33028: IFTRUE 33032
33030: GO 33088
33032: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33033: LD_ADDR_VAR 0 9
33037: PUSH
33038: LD_VAR 0 29
33042: PUSH
33043: LD_VAR 0 30
33047: PUSH
33048: LD_VAR 0 31
33052: PUSH
33053: LD_VAR 0 32
33057: PUSH
33058: LD_VAR 0 33
33062: PUSH
33063: LD_VAR 0 34
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: PUSH
33076: LD_VAR 0 4
33080: PUSH
33081: LD_INT 1
33083: PLUS
33084: ARRAY
33085: ST_TO_ADDR
33086: GO 33571
33088: LD_INT 16
33090: DOUBLE
33091: EQUAL
33092: IFTRUE 33150
33094: LD_INT 17
33096: DOUBLE
33097: EQUAL
33098: IFTRUE 33150
33100: LD_INT 18
33102: DOUBLE
33103: EQUAL
33104: IFTRUE 33150
33106: LD_INT 19
33108: DOUBLE
33109: EQUAL
33110: IFTRUE 33150
33112: LD_INT 22
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33150
33118: LD_INT 20
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33150
33124: LD_INT 21
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33150
33130: LD_INT 23
33132: DOUBLE
33133: EQUAL
33134: IFTRUE 33150
33136: LD_INT 24
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33150
33142: LD_INT 25
33144: DOUBLE
33145: EQUAL
33146: IFTRUE 33150
33148: GO 33206
33150: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33151: LD_ADDR_VAR 0 9
33155: PUSH
33156: LD_VAR 0 35
33160: PUSH
33161: LD_VAR 0 36
33165: PUSH
33166: LD_VAR 0 37
33170: PUSH
33171: LD_VAR 0 38
33175: PUSH
33176: LD_VAR 0 39
33180: PUSH
33181: LD_VAR 0 40
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: PUSH
33194: LD_VAR 0 4
33198: PUSH
33199: LD_INT 1
33201: PLUS
33202: ARRAY
33203: ST_TO_ADDR
33204: GO 33571
33206: LD_INT 6
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33262
33212: LD_INT 7
33214: DOUBLE
33215: EQUAL
33216: IFTRUE 33262
33218: LD_INT 8
33220: DOUBLE
33221: EQUAL
33222: IFTRUE 33262
33224: LD_INT 13
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33262
33230: LD_INT 12
33232: DOUBLE
33233: EQUAL
33234: IFTRUE 33262
33236: LD_INT 15
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33262
33242: LD_INT 11
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33262
33248: LD_INT 14
33250: DOUBLE
33251: EQUAL
33252: IFTRUE 33262
33254: LD_INT 10
33256: DOUBLE
33257: EQUAL
33258: IFTRUE 33262
33260: GO 33318
33262: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33263: LD_ADDR_VAR 0 9
33267: PUSH
33268: LD_VAR 0 41
33272: PUSH
33273: LD_VAR 0 42
33277: PUSH
33278: LD_VAR 0 43
33282: PUSH
33283: LD_VAR 0 44
33287: PUSH
33288: LD_VAR 0 45
33292: PUSH
33293: LD_VAR 0 46
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: PUSH
33306: LD_VAR 0 4
33310: PUSH
33311: LD_INT 1
33313: PLUS
33314: ARRAY
33315: ST_TO_ADDR
33316: GO 33571
33318: LD_INT 36
33320: DOUBLE
33321: EQUAL
33322: IFTRUE 33326
33324: GO 33382
33326: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33327: LD_ADDR_VAR 0 9
33331: PUSH
33332: LD_VAR 0 47
33336: PUSH
33337: LD_VAR 0 48
33341: PUSH
33342: LD_VAR 0 49
33346: PUSH
33347: LD_VAR 0 50
33351: PUSH
33352: LD_VAR 0 51
33356: PUSH
33357: LD_VAR 0 52
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: PUSH
33370: LD_VAR 0 4
33374: PUSH
33375: LD_INT 1
33377: PLUS
33378: ARRAY
33379: ST_TO_ADDR
33380: GO 33571
33382: LD_INT 4
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33408
33388: LD_INT 5
33390: DOUBLE
33391: EQUAL
33392: IFTRUE 33408
33394: LD_INT 34
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33408
33400: LD_INT 37
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33408
33406: GO 33464
33408: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33409: LD_ADDR_VAR 0 9
33413: PUSH
33414: LD_VAR 0 53
33418: PUSH
33419: LD_VAR 0 54
33423: PUSH
33424: LD_VAR 0 55
33428: PUSH
33429: LD_VAR 0 56
33433: PUSH
33434: LD_VAR 0 57
33438: PUSH
33439: LD_VAR 0 58
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: PUSH
33452: LD_VAR 0 4
33456: PUSH
33457: LD_INT 1
33459: PLUS
33460: ARRAY
33461: ST_TO_ADDR
33462: GO 33571
33464: LD_INT 31
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33514
33470: LD_INT 32
33472: DOUBLE
33473: EQUAL
33474: IFTRUE 33514
33476: LD_INT 33
33478: DOUBLE
33479: EQUAL
33480: IFTRUE 33514
33482: LD_INT 27
33484: DOUBLE
33485: EQUAL
33486: IFTRUE 33514
33488: LD_INT 26
33490: DOUBLE
33491: EQUAL
33492: IFTRUE 33514
33494: LD_INT 28
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33514
33500: LD_INT 29
33502: DOUBLE
33503: EQUAL
33504: IFTRUE 33514
33506: LD_INT 30
33508: DOUBLE
33509: EQUAL
33510: IFTRUE 33514
33512: GO 33570
33514: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33515: LD_ADDR_VAR 0 9
33519: PUSH
33520: LD_VAR 0 59
33524: PUSH
33525: LD_VAR 0 60
33529: PUSH
33530: LD_VAR 0 61
33534: PUSH
33535: LD_VAR 0 62
33539: PUSH
33540: LD_VAR 0 63
33544: PUSH
33545: LD_VAR 0 64
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: PUSH
33558: LD_VAR 0 4
33562: PUSH
33563: LD_INT 1
33565: PLUS
33566: ARRAY
33567: ST_TO_ADDR
33568: GO 33571
33570: POP
// temp_list2 = [ ] ;
33571: LD_ADDR_VAR 0 10
33575: PUSH
33576: EMPTY
33577: ST_TO_ADDR
// for i in temp_list do
33578: LD_ADDR_VAR 0 8
33582: PUSH
33583: LD_VAR 0 9
33587: PUSH
33588: FOR_IN
33589: IFFALSE 33641
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33591: LD_ADDR_VAR 0 10
33595: PUSH
33596: LD_VAR 0 10
33600: PUSH
33601: LD_VAR 0 8
33605: PUSH
33606: LD_INT 1
33608: ARRAY
33609: PUSH
33610: LD_VAR 0 2
33614: PLUS
33615: PUSH
33616: LD_VAR 0 8
33620: PUSH
33621: LD_INT 2
33623: ARRAY
33624: PUSH
33625: LD_VAR 0 3
33629: PLUS
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: ADD
33638: ST_TO_ADDR
33639: GO 33588
33641: POP
33642: POP
// result = temp_list2 ;
33643: LD_ADDR_VAR 0 7
33647: PUSH
33648: LD_VAR 0 10
33652: ST_TO_ADDR
// end ;
33653: LD_VAR 0 7
33657: RET
// export function EnemyInRange ( unit , dist ) ; begin
33658: LD_INT 0
33660: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33661: LD_ADDR_VAR 0 3
33665: PUSH
33666: LD_VAR 0 1
33670: PPUSH
33671: CALL_OW 255
33675: PPUSH
33676: LD_VAR 0 1
33680: PPUSH
33681: CALL_OW 250
33685: PPUSH
33686: LD_VAR 0 1
33690: PPUSH
33691: CALL_OW 251
33695: PPUSH
33696: LD_VAR 0 2
33700: PPUSH
33701: CALL 6915 0 4
33705: PUSH
33706: LD_INT 4
33708: ARRAY
33709: ST_TO_ADDR
// end ;
33710: LD_VAR 0 3
33714: RET
// export function PlayerSeeMe ( unit ) ; begin
33715: LD_INT 0
33717: PPUSH
// result := See ( your_side , unit ) ;
33718: LD_ADDR_VAR 0 2
33722: PUSH
33723: LD_OWVAR 2
33727: PPUSH
33728: LD_VAR 0 1
33732: PPUSH
33733: CALL_OW 292
33737: ST_TO_ADDR
// end ;
33738: LD_VAR 0 2
33742: RET
// export function ReverseDir ( unit ) ; begin
33743: LD_INT 0
33745: PPUSH
// if not unit then
33746: LD_VAR 0 1
33750: NOT
33751: IFFALSE 33755
// exit ;
33753: GO 33778
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33755: LD_ADDR_VAR 0 2
33759: PUSH
33760: LD_VAR 0 1
33764: PPUSH
33765: CALL_OW 254
33769: PUSH
33770: LD_INT 3
33772: PLUS
33773: PUSH
33774: LD_INT 6
33776: MOD
33777: ST_TO_ADDR
// end ;
33778: LD_VAR 0 2
33782: RET
// export function ReverseArray ( array ) ; var i ; begin
33783: LD_INT 0
33785: PPUSH
33786: PPUSH
// if not array then
33787: LD_VAR 0 1
33791: NOT
33792: IFFALSE 33796
// exit ;
33794: GO 33851
// result := [ ] ;
33796: LD_ADDR_VAR 0 2
33800: PUSH
33801: EMPTY
33802: ST_TO_ADDR
// for i := array downto 1 do
33803: LD_ADDR_VAR 0 3
33807: PUSH
33808: DOUBLE
33809: LD_VAR 0 1
33813: INC
33814: ST_TO_ADDR
33815: LD_INT 1
33817: PUSH
33818: FOR_DOWNTO
33819: IFFALSE 33849
// result := Join ( result , array [ i ] ) ;
33821: LD_ADDR_VAR 0 2
33825: PUSH
33826: LD_VAR 0 2
33830: PPUSH
33831: LD_VAR 0 1
33835: PUSH
33836: LD_VAR 0 3
33840: ARRAY
33841: PPUSH
33842: CALL 38693 0 2
33846: ST_TO_ADDR
33847: GO 33818
33849: POP
33850: POP
// end ;
33851: LD_VAR 0 2
33855: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33856: LD_INT 0
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
33863: PPUSH
// if not unit or not hexes then
33864: LD_VAR 0 1
33868: NOT
33869: IFTRUE 33878
33871: PUSH
33872: LD_VAR 0 2
33876: NOT
33877: OR
33878: IFFALSE 33882
// exit ;
33880: GO 34005
// dist := 9999 ;
33882: LD_ADDR_VAR 0 5
33886: PUSH
33887: LD_INT 9999
33889: ST_TO_ADDR
// for i = 1 to hexes do
33890: LD_ADDR_VAR 0 4
33894: PUSH
33895: DOUBLE
33896: LD_INT 1
33898: DEC
33899: ST_TO_ADDR
33900: LD_VAR 0 2
33904: PUSH
33905: FOR_TO
33906: IFFALSE 33993
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33908: LD_ADDR_VAR 0 6
33912: PUSH
33913: LD_VAR 0 1
33917: PPUSH
33918: LD_VAR 0 2
33922: PUSH
33923: LD_VAR 0 4
33927: ARRAY
33928: PUSH
33929: LD_INT 1
33931: ARRAY
33932: PPUSH
33933: LD_VAR 0 2
33937: PUSH
33938: LD_VAR 0 4
33942: ARRAY
33943: PUSH
33944: LD_INT 2
33946: ARRAY
33947: PPUSH
33948: CALL_OW 297
33952: ST_TO_ADDR
// if tdist < dist then
33953: LD_VAR 0 6
33957: PUSH
33958: LD_VAR 0 5
33962: LESS
33963: IFFALSE 33991
// begin hex := hexes [ i ] ;
33965: LD_ADDR_VAR 0 8
33969: PUSH
33970: LD_VAR 0 2
33974: PUSH
33975: LD_VAR 0 4
33979: ARRAY
33980: ST_TO_ADDR
// dist := tdist ;
33981: LD_ADDR_VAR 0 5
33985: PUSH
33986: LD_VAR 0 6
33990: ST_TO_ADDR
// end ; end ;
33991: GO 33905
33993: POP
33994: POP
// result := hex ;
33995: LD_ADDR_VAR 0 3
33999: PUSH
34000: LD_VAR 0 8
34004: ST_TO_ADDR
// end ;
34005: LD_VAR 0 3
34009: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34010: LD_INT 0
34012: PPUSH
34013: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34014: LD_VAR 0 1
34018: NOT
34019: IFTRUE 34058
34021: PUSH
34022: LD_VAR 0 1
34026: PUSH
34027: LD_INT 21
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 23
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PPUSH
34051: CALL_OW 69
34055: IN
34056: NOT
34057: OR
34058: IFFALSE 34062
// exit ;
34060: GO 34109
// for i = 1 to 3 do
34062: LD_ADDR_VAR 0 3
34066: PUSH
34067: DOUBLE
34068: LD_INT 1
34070: DEC
34071: ST_TO_ADDR
34072: LD_INT 3
34074: PUSH
34075: FOR_TO
34076: IFFALSE 34107
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 250
34087: PPUSH
34088: LD_VAR 0 1
34092: PPUSH
34093: CALL_OW 251
34097: PPUSH
34098: LD_INT 1
34100: PPUSH
34101: CALL_OW 453
34105: GO 34075
34107: POP
34108: POP
// end ;
34109: LD_VAR 0 2
34113: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34114: LD_INT 0
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
// if not unit or not enemy_unit then
34122: LD_VAR 0 1
34126: NOT
34127: IFTRUE 34136
34129: PUSH
34130: LD_VAR 0 2
34134: NOT
34135: OR
34136: IFFALSE 34140
// exit ;
34138: GO 34611
// if GetLives ( i ) < 250 then
34140: LD_VAR 0 4
34144: PPUSH
34145: CALL_OW 256
34149: PUSH
34150: LD_INT 250
34152: LESS
34153: IFFALSE 34166
// begin ComAutodestruct ( i ) ;
34155: LD_VAR 0 4
34159: PPUSH
34160: CALL 34010 0 1
// exit ;
34164: GO 34611
// end ; x := GetX ( enemy_unit ) ;
34166: LD_ADDR_VAR 0 7
34170: PUSH
34171: LD_VAR 0 2
34175: PPUSH
34176: CALL_OW 250
34180: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34181: LD_ADDR_VAR 0 8
34185: PUSH
34186: LD_VAR 0 2
34190: PPUSH
34191: CALL_OW 251
34195: ST_TO_ADDR
// if not x or not y then
34196: LD_VAR 0 7
34200: NOT
34201: IFTRUE 34210
34203: PUSH
34204: LD_VAR 0 8
34208: NOT
34209: OR
34210: IFFALSE 34214
// exit ;
34212: GO 34611
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34214: LD_ADDR_VAR 0 6
34218: PUSH
34219: LD_VAR 0 7
34223: PPUSH
34224: LD_INT 0
34226: PPUSH
34227: LD_INT 4
34229: PPUSH
34230: CALL_OW 272
34234: PUSH
34235: LD_VAR 0 8
34239: PPUSH
34240: LD_INT 0
34242: PPUSH
34243: LD_INT 4
34245: PPUSH
34246: CALL_OW 273
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_VAR 0 7
34259: PPUSH
34260: LD_INT 1
34262: PPUSH
34263: LD_INT 4
34265: PPUSH
34266: CALL_OW 272
34270: PUSH
34271: LD_VAR 0 8
34275: PPUSH
34276: LD_INT 1
34278: PPUSH
34279: LD_INT 4
34281: PPUSH
34282: CALL_OW 273
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_VAR 0 7
34295: PPUSH
34296: LD_INT 2
34298: PPUSH
34299: LD_INT 4
34301: PPUSH
34302: CALL_OW 272
34306: PUSH
34307: LD_VAR 0 8
34311: PPUSH
34312: LD_INT 2
34314: PPUSH
34315: LD_INT 4
34317: PPUSH
34318: CALL_OW 273
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_VAR 0 7
34331: PPUSH
34332: LD_INT 3
34334: PPUSH
34335: LD_INT 4
34337: PPUSH
34338: CALL_OW 272
34342: PUSH
34343: LD_VAR 0 8
34347: PPUSH
34348: LD_INT 3
34350: PPUSH
34351: LD_INT 4
34353: PPUSH
34354: CALL_OW 273
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_VAR 0 7
34367: PPUSH
34368: LD_INT 4
34370: PPUSH
34371: LD_INT 4
34373: PPUSH
34374: CALL_OW 272
34378: PUSH
34379: LD_VAR 0 8
34383: PPUSH
34384: LD_INT 4
34386: PPUSH
34387: LD_INT 4
34389: PPUSH
34390: CALL_OW 273
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_VAR 0 7
34403: PPUSH
34404: LD_INT 5
34406: PPUSH
34407: LD_INT 4
34409: PPUSH
34410: CALL_OW 272
34414: PUSH
34415: LD_VAR 0 8
34419: PPUSH
34420: LD_INT 5
34422: PPUSH
34423: LD_INT 4
34425: PPUSH
34426: CALL_OW 273
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: ST_TO_ADDR
// for i = tmp downto 1 do
34443: LD_ADDR_VAR 0 4
34447: PUSH
34448: DOUBLE
34449: LD_VAR 0 6
34453: INC
34454: ST_TO_ADDR
34455: LD_INT 1
34457: PUSH
34458: FOR_DOWNTO
34459: IFFALSE 34562
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34461: LD_VAR 0 6
34465: PUSH
34466: LD_VAR 0 4
34470: ARRAY
34471: PUSH
34472: LD_INT 1
34474: ARRAY
34475: PPUSH
34476: LD_VAR 0 6
34480: PUSH
34481: LD_VAR 0 4
34485: ARRAY
34486: PUSH
34487: LD_INT 2
34489: ARRAY
34490: PPUSH
34491: CALL_OW 488
34495: NOT
34496: IFTRUE 34538
34498: PUSH
34499: LD_VAR 0 6
34503: PUSH
34504: LD_VAR 0 4
34508: ARRAY
34509: PUSH
34510: LD_INT 1
34512: ARRAY
34513: PPUSH
34514: LD_VAR 0 6
34518: PUSH
34519: LD_VAR 0 4
34523: ARRAY
34524: PUSH
34525: LD_INT 2
34527: ARRAY
34528: PPUSH
34529: CALL_OW 428
34533: PUSH
34534: LD_INT 0
34536: NONEQUAL
34537: OR
34538: IFFALSE 34560
// tmp := Delete ( tmp , i ) ;
34540: LD_ADDR_VAR 0 6
34544: PUSH
34545: LD_VAR 0 6
34549: PPUSH
34550: LD_VAR 0 4
34554: PPUSH
34555: CALL_OW 3
34559: ST_TO_ADDR
34560: GO 34458
34562: POP
34563: POP
// j := GetClosestHex ( unit , tmp ) ;
34564: LD_ADDR_VAR 0 5
34568: PUSH
34569: LD_VAR 0 1
34573: PPUSH
34574: LD_VAR 0 6
34578: PPUSH
34579: CALL 33856 0 2
34583: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34584: LD_VAR 0 1
34588: PPUSH
34589: LD_VAR 0 5
34593: PUSH
34594: LD_INT 1
34596: ARRAY
34597: PPUSH
34598: LD_VAR 0 5
34602: PUSH
34603: LD_INT 2
34605: ARRAY
34606: PPUSH
34607: CALL_OW 111
// end ;
34611: LD_VAR 0 3
34615: RET
// export function PrepareApemanSoldier ( ) ; begin
34616: LD_INT 0
34618: PPUSH
// uc_nation := 0 ;
34619: LD_ADDR_OWVAR 21
34623: PUSH
34624: LD_INT 0
34626: ST_TO_ADDR
// hc_sex := sex_male ;
34627: LD_ADDR_OWVAR 27
34631: PUSH
34632: LD_INT 1
34634: ST_TO_ADDR
// hc_name :=  ;
34635: LD_ADDR_OWVAR 26
34639: PUSH
34640: LD_STRING 
34642: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34643: LD_ADDR_OWVAR 28
34647: PUSH
34648: LD_INT 15
34650: ST_TO_ADDR
// hc_gallery :=  ;
34651: LD_ADDR_OWVAR 33
34655: PUSH
34656: LD_STRING 
34658: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34659: LD_ADDR_OWVAR 31
34663: PUSH
34664: LD_INT 0
34666: PPUSH
34667: LD_INT 3
34669: PPUSH
34670: CALL_OW 12
34674: PUSH
34675: LD_INT 0
34677: PPUSH
34678: LD_INT 3
34680: PPUSH
34681: CALL_OW 12
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34698: LD_ADDR_OWVAR 29
34702: PUSH
34703: LD_INT 12
34705: PUSH
34706: LD_INT 12
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: ST_TO_ADDR
// end ;
34713: LD_VAR 0 1
34717: RET
// export function PrepareApemanEngineer ( ) ; begin
34718: LD_INT 0
34720: PPUSH
// uc_nation := 0 ;
34721: LD_ADDR_OWVAR 21
34725: PUSH
34726: LD_INT 0
34728: ST_TO_ADDR
// hc_sex := sex_male ;
34729: LD_ADDR_OWVAR 27
34733: PUSH
34734: LD_INT 1
34736: ST_TO_ADDR
// hc_name :=  ;
34737: LD_ADDR_OWVAR 26
34741: PUSH
34742: LD_STRING 
34744: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34745: LD_ADDR_OWVAR 28
34749: PUSH
34750: LD_INT 16
34752: ST_TO_ADDR
// hc_gallery :=  ;
34753: LD_ADDR_OWVAR 33
34757: PUSH
34758: LD_STRING 
34760: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34761: LD_ADDR_OWVAR 31
34765: PUSH
34766: LD_INT 0
34768: PPUSH
34769: LD_INT 3
34771: PPUSH
34772: CALL_OW 12
34776: PUSH
34777: LD_INT 0
34779: PPUSH
34780: LD_INT 3
34782: PPUSH
34783: CALL_OW 12
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34800: LD_ADDR_OWVAR 29
34804: PUSH
34805: LD_INT 12
34807: PUSH
34808: LD_INT 12
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: ST_TO_ADDR
// end ;
34815: LD_VAR 0 1
34819: RET
// export function PrepareApeman ( agressivity ) ; begin
34820: LD_INT 0
34822: PPUSH
// uc_side := 0 ;
34823: LD_ADDR_OWVAR 20
34827: PUSH
34828: LD_INT 0
34830: ST_TO_ADDR
// uc_nation := 0 ;
34831: LD_ADDR_OWVAR 21
34835: PUSH
34836: LD_INT 0
34838: ST_TO_ADDR
// hc_sex := sex_male ;
34839: LD_ADDR_OWVAR 27
34843: PUSH
34844: LD_INT 1
34846: ST_TO_ADDR
// hc_class := class_apeman ;
34847: LD_ADDR_OWVAR 28
34851: PUSH
34852: LD_INT 12
34854: ST_TO_ADDR
// hc_gallery :=  ;
34855: LD_ADDR_OWVAR 33
34859: PUSH
34860: LD_STRING 
34862: ST_TO_ADDR
// hc_name :=  ;
34863: LD_ADDR_OWVAR 26
34867: PUSH
34868: LD_STRING 
34870: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34871: LD_ADDR_OWVAR 29
34875: PUSH
34876: LD_INT 12
34878: PUSH
34879: LD_INT 12
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: ST_TO_ADDR
// if agressivity = 0 then
34886: LD_VAR 0 1
34890: PUSH
34891: LD_INT 0
34893: EQUAL
34894: IFFALSE 34906
// hc_agressivity := 0 else
34896: LD_ADDR_OWVAR 35
34900: PUSH
34901: LD_INT 0
34903: ST_TO_ADDR
34904: GO 34927
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34906: LD_ADDR_OWVAR 35
34910: PUSH
34911: LD_VAR 0 1
34915: NEG
34916: PPUSH
34917: LD_VAR 0 1
34921: PPUSH
34922: CALL_OW 12
34926: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34927: LD_ADDR_OWVAR 31
34931: PUSH
34932: LD_INT 0
34934: PPUSH
34935: LD_INT 3
34937: PPUSH
34938: CALL_OW 12
34942: PUSH
34943: LD_INT 0
34945: PPUSH
34946: LD_INT 3
34948: PPUSH
34949: CALL_OW 12
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: ST_TO_ADDR
// end ;
34966: LD_VAR 0 2
34970: RET
// export function PrepareTiger ( agressivity ) ; begin
34971: LD_INT 0
34973: PPUSH
// uc_side := 0 ;
34974: LD_ADDR_OWVAR 20
34978: PUSH
34979: LD_INT 0
34981: ST_TO_ADDR
// uc_nation := 0 ;
34982: LD_ADDR_OWVAR 21
34986: PUSH
34987: LD_INT 0
34989: ST_TO_ADDR
// InitHc ;
34990: CALL_OW 19
// hc_class := class_tiger ;
34994: LD_ADDR_OWVAR 28
34998: PUSH
34999: LD_INT 14
35001: ST_TO_ADDR
// hc_gallery :=  ;
35002: LD_ADDR_OWVAR 33
35006: PUSH
35007: LD_STRING 
35009: ST_TO_ADDR
// hc_name :=  ;
35010: LD_ADDR_OWVAR 26
35014: PUSH
35015: LD_STRING 
35017: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35018: LD_ADDR_OWVAR 35
35022: PUSH
35023: LD_VAR 0 1
35027: NEG
35028: PPUSH
35029: LD_VAR 0 1
35033: PPUSH
35034: CALL_OW 12
35038: ST_TO_ADDR
// end ;
35039: LD_VAR 0 2
35043: RET
// export function PrepareEnchidna ( ) ; begin
35044: LD_INT 0
35046: PPUSH
// uc_side := 0 ;
35047: LD_ADDR_OWVAR 20
35051: PUSH
35052: LD_INT 0
35054: ST_TO_ADDR
// uc_nation := 0 ;
35055: LD_ADDR_OWVAR 21
35059: PUSH
35060: LD_INT 0
35062: ST_TO_ADDR
// InitHc ;
35063: CALL_OW 19
// hc_class := class_baggie ;
35067: LD_ADDR_OWVAR 28
35071: PUSH
35072: LD_INT 13
35074: ST_TO_ADDR
// hc_gallery :=  ;
35075: LD_ADDR_OWVAR 33
35079: PUSH
35080: LD_STRING 
35082: ST_TO_ADDR
// hc_name :=  ;
35083: LD_ADDR_OWVAR 26
35087: PUSH
35088: LD_STRING 
35090: ST_TO_ADDR
// end ;
35091: LD_VAR 0 1
35095: RET
// export function PrepareFrog ( ) ; begin
35096: LD_INT 0
35098: PPUSH
// uc_side := 0 ;
35099: LD_ADDR_OWVAR 20
35103: PUSH
35104: LD_INT 0
35106: ST_TO_ADDR
// uc_nation := 0 ;
35107: LD_ADDR_OWVAR 21
35111: PUSH
35112: LD_INT 0
35114: ST_TO_ADDR
// InitHc ;
35115: CALL_OW 19
// hc_class := class_frog ;
35119: LD_ADDR_OWVAR 28
35123: PUSH
35124: LD_INT 19
35126: ST_TO_ADDR
// hc_gallery :=  ;
35127: LD_ADDR_OWVAR 33
35131: PUSH
35132: LD_STRING 
35134: ST_TO_ADDR
// hc_name :=  ;
35135: LD_ADDR_OWVAR 26
35139: PUSH
35140: LD_STRING 
35142: ST_TO_ADDR
// end ;
35143: LD_VAR 0 1
35147: RET
// export function PrepareFish ( ) ; begin
35148: LD_INT 0
35150: PPUSH
// uc_side := 0 ;
35151: LD_ADDR_OWVAR 20
35155: PUSH
35156: LD_INT 0
35158: ST_TO_ADDR
// uc_nation := 0 ;
35159: LD_ADDR_OWVAR 21
35163: PUSH
35164: LD_INT 0
35166: ST_TO_ADDR
// InitHc ;
35167: CALL_OW 19
// hc_class := class_fish ;
35171: LD_ADDR_OWVAR 28
35175: PUSH
35176: LD_INT 20
35178: ST_TO_ADDR
// hc_gallery :=  ;
35179: LD_ADDR_OWVAR 33
35183: PUSH
35184: LD_STRING 
35186: ST_TO_ADDR
// hc_name :=  ;
35187: LD_ADDR_OWVAR 26
35191: PUSH
35192: LD_STRING 
35194: ST_TO_ADDR
// end ;
35195: LD_VAR 0 1
35199: RET
// export function PrepareBird ( ) ; begin
35200: LD_INT 0
35202: PPUSH
// uc_side := 0 ;
35203: LD_ADDR_OWVAR 20
35207: PUSH
35208: LD_INT 0
35210: ST_TO_ADDR
// uc_nation := 0 ;
35211: LD_ADDR_OWVAR 21
35215: PUSH
35216: LD_INT 0
35218: ST_TO_ADDR
// InitHc ;
35219: CALL_OW 19
// hc_class := class_phororhacos ;
35223: LD_ADDR_OWVAR 28
35227: PUSH
35228: LD_INT 18
35230: ST_TO_ADDR
// hc_gallery :=  ;
35231: LD_ADDR_OWVAR 33
35235: PUSH
35236: LD_STRING 
35238: ST_TO_ADDR
// hc_name :=  ;
35239: LD_ADDR_OWVAR 26
35243: PUSH
35244: LD_STRING 
35246: ST_TO_ADDR
// end ;
35247: LD_VAR 0 1
35251: RET
// export function PrepareHorse ( ) ; begin
35252: LD_INT 0
35254: PPUSH
// uc_side := 0 ;
35255: LD_ADDR_OWVAR 20
35259: PUSH
35260: LD_INT 0
35262: ST_TO_ADDR
// uc_nation := 0 ;
35263: LD_ADDR_OWVAR 21
35267: PUSH
35268: LD_INT 0
35270: ST_TO_ADDR
// InitHc ;
35271: CALL_OW 19
// hc_class := class_horse ;
35275: LD_ADDR_OWVAR 28
35279: PUSH
35280: LD_INT 21
35282: ST_TO_ADDR
// hc_gallery :=  ;
35283: LD_ADDR_OWVAR 33
35287: PUSH
35288: LD_STRING 
35290: ST_TO_ADDR
// hc_name :=  ;
35291: LD_ADDR_OWVAR 26
35295: PUSH
35296: LD_STRING 
35298: ST_TO_ADDR
// end ;
35299: LD_VAR 0 1
35303: RET
// export function PrepareMastodont ( ) ; begin
35304: LD_INT 0
35306: PPUSH
// uc_side := 0 ;
35307: LD_ADDR_OWVAR 20
35311: PUSH
35312: LD_INT 0
35314: ST_TO_ADDR
// uc_nation := 0 ;
35315: LD_ADDR_OWVAR 21
35319: PUSH
35320: LD_INT 0
35322: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35323: LD_ADDR_OWVAR 37
35327: PUSH
35328: LD_INT 31
35330: ST_TO_ADDR
// vc_control := control_rider ;
35331: LD_ADDR_OWVAR 38
35335: PUSH
35336: LD_INT 4
35338: ST_TO_ADDR
// end ;
35339: LD_VAR 0 1
35343: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35344: LD_INT 0
35346: PPUSH
35347: PPUSH
35348: PPUSH
// uc_side = 0 ;
35349: LD_ADDR_OWVAR 20
35353: PUSH
35354: LD_INT 0
35356: ST_TO_ADDR
// uc_nation = 0 ;
35357: LD_ADDR_OWVAR 21
35361: PUSH
35362: LD_INT 0
35364: ST_TO_ADDR
// InitHc_All ( ) ;
35365: CALL_OW 584
// InitVc ;
35369: CALL_OW 20
// if mastodonts then
35373: LD_VAR 0 6
35377: IFFALSE 35444
// for i = 1 to mastodonts do
35379: LD_ADDR_VAR 0 11
35383: PUSH
35384: DOUBLE
35385: LD_INT 1
35387: DEC
35388: ST_TO_ADDR
35389: LD_VAR 0 6
35393: PUSH
35394: FOR_TO
35395: IFFALSE 35442
// begin vc_chassis := 31 ;
35397: LD_ADDR_OWVAR 37
35401: PUSH
35402: LD_INT 31
35404: ST_TO_ADDR
// vc_control := control_rider ;
35405: LD_ADDR_OWVAR 38
35409: PUSH
35410: LD_INT 4
35412: ST_TO_ADDR
// animal := CreateVehicle ;
35413: LD_ADDR_VAR 0 12
35417: PUSH
35418: CALL_OW 45
35422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35423: LD_VAR 0 12
35427: PPUSH
35428: LD_VAR 0 8
35432: PPUSH
35433: LD_INT 0
35435: PPUSH
35436: CALL 37586 0 3
// end ;
35440: GO 35394
35442: POP
35443: POP
// if horses then
35444: LD_VAR 0 5
35448: IFFALSE 35515
// for i = 1 to horses do
35450: LD_ADDR_VAR 0 11
35454: PUSH
35455: DOUBLE
35456: LD_INT 1
35458: DEC
35459: ST_TO_ADDR
35460: LD_VAR 0 5
35464: PUSH
35465: FOR_TO
35466: IFFALSE 35513
// begin hc_class := 21 ;
35468: LD_ADDR_OWVAR 28
35472: PUSH
35473: LD_INT 21
35475: ST_TO_ADDR
// hc_gallery :=  ;
35476: LD_ADDR_OWVAR 33
35480: PUSH
35481: LD_STRING 
35483: ST_TO_ADDR
// animal := CreateHuman ;
35484: LD_ADDR_VAR 0 12
35488: PUSH
35489: CALL_OW 44
35493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35494: LD_VAR 0 12
35498: PPUSH
35499: LD_VAR 0 8
35503: PPUSH
35504: LD_INT 0
35506: PPUSH
35507: CALL 37586 0 3
// end ;
35511: GO 35465
35513: POP
35514: POP
// if birds then
35515: LD_VAR 0 1
35519: IFFALSE 35586
// for i = 1 to birds do
35521: LD_ADDR_VAR 0 11
35525: PUSH
35526: DOUBLE
35527: LD_INT 1
35529: DEC
35530: ST_TO_ADDR
35531: LD_VAR 0 1
35535: PUSH
35536: FOR_TO
35537: IFFALSE 35584
// begin hc_class := 18 ;
35539: LD_ADDR_OWVAR 28
35543: PUSH
35544: LD_INT 18
35546: ST_TO_ADDR
// hc_gallery =  ;
35547: LD_ADDR_OWVAR 33
35551: PUSH
35552: LD_STRING 
35554: ST_TO_ADDR
// animal := CreateHuman ;
35555: LD_ADDR_VAR 0 12
35559: PUSH
35560: CALL_OW 44
35564: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35565: LD_VAR 0 12
35569: PPUSH
35570: LD_VAR 0 8
35574: PPUSH
35575: LD_INT 0
35577: PPUSH
35578: CALL 37586 0 3
// end ;
35582: GO 35536
35584: POP
35585: POP
// if tigers then
35586: LD_VAR 0 2
35590: IFFALSE 35674
// for i = 1 to tigers do
35592: LD_ADDR_VAR 0 11
35596: PUSH
35597: DOUBLE
35598: LD_INT 1
35600: DEC
35601: ST_TO_ADDR
35602: LD_VAR 0 2
35606: PUSH
35607: FOR_TO
35608: IFFALSE 35672
// begin hc_class = class_tiger ;
35610: LD_ADDR_OWVAR 28
35614: PUSH
35615: LD_INT 14
35617: ST_TO_ADDR
// hc_gallery =  ;
35618: LD_ADDR_OWVAR 33
35622: PUSH
35623: LD_STRING 
35625: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35626: LD_ADDR_OWVAR 35
35630: PUSH
35631: LD_INT 7
35633: NEG
35634: PPUSH
35635: LD_INT 7
35637: PPUSH
35638: CALL_OW 12
35642: ST_TO_ADDR
// animal := CreateHuman ;
35643: LD_ADDR_VAR 0 12
35647: PUSH
35648: CALL_OW 44
35652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35653: LD_VAR 0 12
35657: PPUSH
35658: LD_VAR 0 8
35662: PPUSH
35663: LD_INT 0
35665: PPUSH
35666: CALL 37586 0 3
// end ;
35670: GO 35607
35672: POP
35673: POP
// if apemans then
35674: LD_VAR 0 3
35678: IFFALSE 35801
// for i = 1 to apemans do
35680: LD_ADDR_VAR 0 11
35684: PUSH
35685: DOUBLE
35686: LD_INT 1
35688: DEC
35689: ST_TO_ADDR
35690: LD_VAR 0 3
35694: PUSH
35695: FOR_TO
35696: IFFALSE 35799
// begin hc_class = class_apeman ;
35698: LD_ADDR_OWVAR 28
35702: PUSH
35703: LD_INT 12
35705: ST_TO_ADDR
// hc_gallery =  ;
35706: LD_ADDR_OWVAR 33
35710: PUSH
35711: LD_STRING 
35713: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35714: LD_ADDR_OWVAR 35
35718: PUSH
35719: LD_INT 2
35721: NEG
35722: PPUSH
35723: LD_INT 2
35725: PPUSH
35726: CALL_OW 12
35730: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35731: LD_ADDR_OWVAR 31
35735: PUSH
35736: LD_INT 1
35738: PPUSH
35739: LD_INT 3
35741: PPUSH
35742: CALL_OW 12
35746: PUSH
35747: LD_INT 1
35749: PPUSH
35750: LD_INT 3
35752: PPUSH
35753: CALL_OW 12
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: ST_TO_ADDR
// animal := CreateHuman ;
35770: LD_ADDR_VAR 0 12
35774: PUSH
35775: CALL_OW 44
35779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35780: LD_VAR 0 12
35784: PPUSH
35785: LD_VAR 0 8
35789: PPUSH
35790: LD_INT 0
35792: PPUSH
35793: CALL 37586 0 3
// end ;
35797: GO 35695
35799: POP
35800: POP
// if enchidnas then
35801: LD_VAR 0 4
35805: IFFALSE 35872
// for i = 1 to enchidnas do
35807: LD_ADDR_VAR 0 11
35811: PUSH
35812: DOUBLE
35813: LD_INT 1
35815: DEC
35816: ST_TO_ADDR
35817: LD_VAR 0 4
35821: PUSH
35822: FOR_TO
35823: IFFALSE 35870
// begin hc_class = 13 ;
35825: LD_ADDR_OWVAR 28
35829: PUSH
35830: LD_INT 13
35832: ST_TO_ADDR
// hc_gallery =  ;
35833: LD_ADDR_OWVAR 33
35837: PUSH
35838: LD_STRING 
35840: ST_TO_ADDR
// animal := CreateHuman ;
35841: LD_ADDR_VAR 0 12
35845: PUSH
35846: CALL_OW 44
35850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35851: LD_VAR 0 12
35855: PPUSH
35856: LD_VAR 0 8
35860: PPUSH
35861: LD_INT 0
35863: PPUSH
35864: CALL 37586 0 3
// end ;
35868: GO 35822
35870: POP
35871: POP
// if fishes then
35872: LD_VAR 0 7
35876: IFFALSE 35943
// for i = 1 to fishes do
35878: LD_ADDR_VAR 0 11
35882: PUSH
35883: DOUBLE
35884: LD_INT 1
35886: DEC
35887: ST_TO_ADDR
35888: LD_VAR 0 7
35892: PUSH
35893: FOR_TO
35894: IFFALSE 35941
// begin hc_class = 20 ;
35896: LD_ADDR_OWVAR 28
35900: PUSH
35901: LD_INT 20
35903: ST_TO_ADDR
// hc_gallery =  ;
35904: LD_ADDR_OWVAR 33
35908: PUSH
35909: LD_STRING 
35911: ST_TO_ADDR
// animal := CreateHuman ;
35912: LD_ADDR_VAR 0 12
35916: PUSH
35917: CALL_OW 44
35921: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35922: LD_VAR 0 12
35926: PPUSH
35927: LD_VAR 0 9
35931: PPUSH
35932: LD_INT 0
35934: PPUSH
35935: CALL 37586 0 3
// end ;
35939: GO 35893
35941: POP
35942: POP
// end ;
35943: LD_VAR 0 10
35947: RET
// export function WantHeal ( sci , unit ) ; begin
35948: LD_INT 0
35950: PPUSH
// if GetTaskList ( sci ) > 0 then
35951: LD_VAR 0 1
35955: PPUSH
35956: CALL_OW 437
35960: PUSH
35961: LD_INT 0
35963: GREATER
35964: IFFALSE 36036
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35966: LD_VAR 0 1
35970: PPUSH
35971: CALL_OW 437
35975: PUSH
35976: LD_INT 1
35978: ARRAY
35979: PUSH
35980: LD_INT 1
35982: ARRAY
35983: PUSH
35984: LD_STRING l
35986: EQUAL
35987: IFFALSE 36014
35989: PUSH
35990: LD_VAR 0 1
35994: PPUSH
35995: CALL_OW 437
35999: PUSH
36000: LD_INT 1
36002: ARRAY
36003: PUSH
36004: LD_INT 4
36006: ARRAY
36007: PUSH
36008: LD_VAR 0 2
36012: EQUAL
36013: AND
36014: IFFALSE 36026
// result := true else
36016: LD_ADDR_VAR 0 3
36020: PUSH
36021: LD_INT 1
36023: ST_TO_ADDR
36024: GO 36034
// result := false ;
36026: LD_ADDR_VAR 0 3
36030: PUSH
36031: LD_INT 0
36033: ST_TO_ADDR
// end else
36034: GO 36044
// result := false ;
36036: LD_ADDR_VAR 0 3
36040: PUSH
36041: LD_INT 0
36043: ST_TO_ADDR
// end ;
36044: LD_VAR 0 3
36048: RET
// export function HealTarget ( sci ) ; begin
36049: LD_INT 0
36051: PPUSH
// if not sci then
36052: LD_VAR 0 1
36056: NOT
36057: IFFALSE 36061
// exit ;
36059: GO 36126
// result := 0 ;
36061: LD_ADDR_VAR 0 2
36065: PUSH
36066: LD_INT 0
36068: ST_TO_ADDR
// if GetTaskList ( sci ) then
36069: LD_VAR 0 1
36073: PPUSH
36074: CALL_OW 437
36078: IFFALSE 36126
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36080: LD_VAR 0 1
36084: PPUSH
36085: CALL_OW 437
36089: PUSH
36090: LD_INT 1
36092: ARRAY
36093: PUSH
36094: LD_INT 1
36096: ARRAY
36097: PUSH
36098: LD_STRING l
36100: EQUAL
36101: IFFALSE 36126
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36103: LD_ADDR_VAR 0 2
36107: PUSH
36108: LD_VAR 0 1
36112: PPUSH
36113: CALL_OW 437
36117: PUSH
36118: LD_INT 1
36120: ARRAY
36121: PUSH
36122: LD_INT 4
36124: ARRAY
36125: ST_TO_ADDR
// end ;
36126: LD_VAR 0 2
36130: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36131: LD_INT 0
36133: PPUSH
36134: PPUSH
36135: PPUSH
36136: PPUSH
// if not base_units then
36137: LD_VAR 0 1
36141: NOT
36142: IFFALSE 36146
// exit ;
36144: GO 36233
// result := false ;
36146: LD_ADDR_VAR 0 2
36150: PUSH
36151: LD_INT 0
36153: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36154: LD_ADDR_VAR 0 5
36158: PUSH
36159: LD_VAR 0 1
36163: PPUSH
36164: LD_INT 21
36166: PUSH
36167: LD_INT 3
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PPUSH
36174: CALL_OW 72
36178: ST_TO_ADDR
// if not tmp then
36179: LD_VAR 0 5
36183: NOT
36184: IFFALSE 36188
// exit ;
36186: GO 36233
// for i in tmp do
36188: LD_ADDR_VAR 0 3
36192: PUSH
36193: LD_VAR 0 5
36197: PUSH
36198: FOR_IN
36199: IFFALSE 36231
// begin result := EnemyInRange ( i , 22 ) ;
36201: LD_ADDR_VAR 0 2
36205: PUSH
36206: LD_VAR 0 3
36210: PPUSH
36211: LD_INT 22
36213: PPUSH
36214: CALL 33658 0 2
36218: ST_TO_ADDR
// if result then
36219: LD_VAR 0 2
36223: IFFALSE 36229
// exit ;
36225: POP
36226: POP
36227: GO 36233
// end ;
36229: GO 36198
36231: POP
36232: POP
// end ;
36233: LD_VAR 0 2
36237: RET
// export function FilterByTag ( units , tag ) ; begin
36238: LD_INT 0
36240: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36241: LD_ADDR_VAR 0 3
36245: PUSH
36246: LD_VAR 0 1
36250: PPUSH
36251: LD_INT 120
36253: PUSH
36254: LD_VAR 0 2
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PPUSH
36263: CALL_OW 72
36267: ST_TO_ADDR
// end ;
36268: LD_VAR 0 3
36272: RET
// export function IsDriver ( un ) ; begin
36273: LD_INT 0
36275: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36276: LD_ADDR_VAR 0 2
36280: PUSH
36281: LD_VAR 0 1
36285: PUSH
36286: LD_INT 55
36288: PUSH
36289: EMPTY
36290: LIST
36291: PPUSH
36292: CALL_OW 69
36296: IN
36297: ST_TO_ADDR
// end ;
36298: LD_VAR 0 2
36302: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36303: LD_INT 0
36305: PPUSH
36306: PPUSH
// list := [ ] ;
36307: LD_ADDR_VAR 0 5
36311: PUSH
36312: EMPTY
36313: ST_TO_ADDR
// case d of 0 :
36314: LD_VAR 0 3
36318: PUSH
36319: LD_INT 0
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 36460
36327: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36328: LD_ADDR_VAR 0 5
36332: PUSH
36333: LD_VAR 0 1
36337: PUSH
36338: LD_INT 4
36340: MINUS
36341: PUSH
36342: LD_VAR 0 2
36346: PUSH
36347: LD_INT 4
36349: MINUS
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: PUSH
36359: LD_VAR 0 1
36363: PUSH
36364: LD_INT 3
36366: MINUS
36367: PUSH
36368: LD_VAR 0 2
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: PUSH
36381: LD_VAR 0 1
36385: PUSH
36386: LD_INT 4
36388: PLUS
36389: PUSH
36390: LD_VAR 0 2
36394: PUSH
36395: LD_INT 4
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: PUSH
36403: LD_VAR 0 1
36407: PUSH
36408: LD_INT 3
36410: PLUS
36411: PUSH
36412: LD_VAR 0 2
36416: PUSH
36417: LD_INT 3
36419: PLUS
36420: PUSH
36421: LD_INT 5
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: PUSH
36429: LD_VAR 0 1
36433: PUSH
36434: LD_VAR 0 2
36438: PUSH
36439: LD_INT 4
36441: PLUS
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: LIST
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: ST_TO_ADDR
// end ; 1 :
36458: GO 37158
36460: LD_INT 1
36462: DOUBLE
36463: EQUAL
36464: IFTRUE 36468
36466: GO 36601
36468: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36469: LD_ADDR_VAR 0 5
36473: PUSH
36474: LD_VAR 0 1
36478: PUSH
36479: LD_VAR 0 2
36483: PUSH
36484: LD_INT 4
36486: MINUS
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: PUSH
36496: LD_VAR 0 1
36500: PUSH
36501: LD_INT 3
36503: MINUS
36504: PUSH
36505: LD_VAR 0 2
36509: PUSH
36510: LD_INT 3
36512: MINUS
36513: PUSH
36514: LD_INT 2
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: PUSH
36522: LD_VAR 0 1
36526: PUSH
36527: LD_INT 4
36529: MINUS
36530: PUSH
36531: LD_VAR 0 2
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: PUSH
36544: LD_VAR 0 1
36548: PUSH
36549: LD_VAR 0 2
36553: PUSH
36554: LD_INT 3
36556: PLUS
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: PUSH
36566: LD_VAR 0 1
36570: PUSH
36571: LD_INT 4
36573: PLUS
36574: PUSH
36575: LD_VAR 0 2
36579: PUSH
36580: LD_INT 4
36582: PLUS
36583: PUSH
36584: LD_INT 5
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: ST_TO_ADDR
// end ; 2 :
36599: GO 37158
36601: LD_INT 2
36603: DOUBLE
36604: EQUAL
36605: IFTRUE 36609
36607: GO 36738
36609: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36610: LD_ADDR_VAR 0 5
36614: PUSH
36615: LD_VAR 0 1
36619: PUSH
36620: LD_VAR 0 2
36624: PUSH
36625: LD_INT 3
36627: MINUS
36628: PUSH
36629: LD_INT 3
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: PUSH
36637: LD_VAR 0 1
36641: PUSH
36642: LD_INT 4
36644: PLUS
36645: PUSH
36646: LD_VAR 0 2
36650: PUSH
36651: LD_INT 4
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: PUSH
36659: LD_VAR 0 1
36663: PUSH
36664: LD_VAR 0 2
36668: PUSH
36669: LD_INT 4
36671: PLUS
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: PUSH
36681: LD_VAR 0 1
36685: PUSH
36686: LD_INT 3
36688: MINUS
36689: PUSH
36690: LD_VAR 0 2
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: LD_VAR 0 1
36707: PUSH
36708: LD_INT 4
36710: MINUS
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_INT 4
36719: MINUS
36720: PUSH
36721: LD_INT 2
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: ST_TO_ADDR
// end ; 3 :
36736: GO 37158
36738: LD_INT 3
36740: DOUBLE
36741: EQUAL
36742: IFTRUE 36746
36744: GO 36879
36746: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36747: LD_ADDR_VAR 0 5
36751: PUSH
36752: LD_VAR 0 1
36756: PUSH
36757: LD_INT 3
36759: PLUS
36760: PUSH
36761: LD_VAR 0 2
36765: PUSH
36766: LD_INT 4
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: PUSH
36774: LD_VAR 0 1
36778: PUSH
36779: LD_INT 4
36781: PLUS
36782: PUSH
36783: LD_VAR 0 2
36787: PUSH
36788: LD_INT 4
36790: PLUS
36791: PUSH
36792: LD_INT 5
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: PUSH
36800: LD_VAR 0 1
36804: PUSH
36805: LD_INT 4
36807: MINUS
36808: PUSH
36809: LD_VAR 0 2
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: LIST
36821: PUSH
36822: LD_VAR 0 1
36826: PUSH
36827: LD_VAR 0 2
36831: PUSH
36832: LD_INT 4
36834: MINUS
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: LD_VAR 0 1
36848: PUSH
36849: LD_INT 3
36851: MINUS
36852: PUSH
36853: LD_VAR 0 2
36857: PUSH
36858: LD_INT 3
36860: MINUS
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: ST_TO_ADDR
// end ; 4 :
36877: GO 37158
36879: LD_INT 4
36881: DOUBLE
36882: EQUAL
36883: IFTRUE 36887
36885: GO 37020
36887: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36888: LD_ADDR_VAR 0 5
36892: PUSH
36893: LD_VAR 0 1
36897: PUSH
36898: LD_VAR 0 2
36902: PUSH
36903: LD_INT 4
36905: PLUS
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: PUSH
36915: LD_VAR 0 1
36919: PUSH
36920: LD_INT 3
36922: PLUS
36923: PUSH
36924: LD_VAR 0 2
36928: PUSH
36929: LD_INT 3
36931: PLUS
36932: PUSH
36933: LD_INT 5
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: PUSH
36941: LD_VAR 0 1
36945: PUSH
36946: LD_INT 4
36948: PLUS
36949: PUSH
36950: LD_VAR 0 2
36954: PUSH
36955: LD_INT 4
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: PUSH
36963: LD_VAR 0 1
36967: PUSH
36968: LD_VAR 0 2
36972: PUSH
36973: LD_INT 3
36975: MINUS
36976: PUSH
36977: LD_INT 3
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 4
36992: MINUS
36993: PUSH
36994: LD_VAR 0 2
36998: PUSH
36999: LD_INT 4
37001: MINUS
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: ST_TO_ADDR
// end ; 5 :
37018: GO 37158
37020: LD_INT 5
37022: DOUBLE
37023: EQUAL
37024: IFTRUE 37028
37026: GO 37157
37028: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37029: LD_ADDR_VAR 0 5
37033: PUSH
37034: LD_VAR 0 1
37038: PUSH
37039: LD_INT 4
37041: MINUS
37042: PUSH
37043: LD_VAR 0 2
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: PUSH
37056: LD_VAR 0 1
37060: PUSH
37061: LD_VAR 0 2
37065: PUSH
37066: LD_INT 4
37068: MINUS
37069: PUSH
37070: LD_INT 3
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: PUSH
37078: LD_VAR 0 1
37082: PUSH
37083: LD_INT 4
37085: PLUS
37086: PUSH
37087: LD_VAR 0 2
37091: PUSH
37092: LD_INT 4
37094: PLUS
37095: PUSH
37096: LD_INT 5
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: PUSH
37104: LD_VAR 0 1
37108: PUSH
37109: LD_INT 3
37111: PLUS
37112: PUSH
37113: LD_VAR 0 2
37117: PUSH
37118: LD_INT 4
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: LIST
37125: PUSH
37126: LD_VAR 0 1
37130: PUSH
37131: LD_VAR 0 2
37135: PUSH
37136: LD_INT 3
37138: PLUS
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: ST_TO_ADDR
// end ; end ;
37155: GO 37158
37157: POP
// result := list ;
37158: LD_ADDR_VAR 0 4
37162: PUSH
37163: LD_VAR 0 5
37167: ST_TO_ADDR
// end ;
37168: LD_VAR 0 4
37172: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37173: LD_INT 0
37175: PPUSH
37176: PPUSH
37177: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37178: LD_VAR 0 1
37182: NOT
37183: IFTRUE 37211
37185: PUSH
37186: LD_VAR 0 2
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: LD_INT 3
37199: PUSH
37200: LD_INT 4
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: IN
37209: NOT
37210: OR
37211: IFFALSE 37215
// exit ;
37213: GO 37298
// tmp := [ ] ;
37215: LD_ADDR_VAR 0 5
37219: PUSH
37220: EMPTY
37221: ST_TO_ADDR
// for i in units do
37222: LD_ADDR_VAR 0 4
37226: PUSH
37227: LD_VAR 0 1
37231: PUSH
37232: FOR_IN
37233: IFFALSE 37267
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37235: LD_ADDR_VAR 0 5
37239: PUSH
37240: LD_VAR 0 5
37244: PPUSH
37245: LD_VAR 0 4
37249: PPUSH
37250: LD_VAR 0 2
37254: PPUSH
37255: CALL_OW 259
37259: PPUSH
37260: CALL 38693 0 2
37264: ST_TO_ADDR
37265: GO 37232
37267: POP
37268: POP
// if not tmp then
37269: LD_VAR 0 5
37273: NOT
37274: IFFALSE 37278
// exit ;
37276: GO 37298
// result := SortListByListDesc ( units , tmp ) ;
37278: LD_ADDR_VAR 0 3
37282: PUSH
37283: LD_VAR 0 1
37287: PPUSH
37288: LD_VAR 0 5
37292: PPUSH
37293: CALL_OW 77
37297: ST_TO_ADDR
// end ;
37298: LD_VAR 0 3
37302: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37303: LD_INT 0
37305: PPUSH
37306: PPUSH
37307: PPUSH
// result := false ;
37308: LD_ADDR_VAR 0 3
37312: PUSH
37313: LD_INT 0
37315: ST_TO_ADDR
// if not building then
37316: LD_VAR 0 2
37320: NOT
37321: IFFALSE 37325
// exit ;
37323: GO 37469
// x := GetX ( building ) ;
37325: LD_ADDR_VAR 0 4
37329: PUSH
37330: LD_VAR 0 2
37334: PPUSH
37335: CALL_OW 250
37339: ST_TO_ADDR
// y := GetY ( building ) ;
37340: LD_ADDR_VAR 0 5
37344: PUSH
37345: LD_VAR 0 2
37349: PPUSH
37350: CALL_OW 251
37354: ST_TO_ADDR
// if not x or not y then
37355: LD_VAR 0 4
37359: NOT
37360: IFTRUE 37369
37362: PUSH
37363: LD_VAR 0 5
37367: NOT
37368: OR
37369: IFFALSE 37373
// exit ;
37371: GO 37469
// if GetTaskList ( unit ) then
37373: LD_VAR 0 1
37377: PPUSH
37378: CALL_OW 437
37382: IFFALSE 37469
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37384: LD_STRING e
37386: PUSH
37387: LD_VAR 0 1
37391: PPUSH
37392: CALL_OW 437
37396: PUSH
37397: LD_INT 1
37399: ARRAY
37400: PUSH
37401: LD_INT 1
37403: ARRAY
37404: EQUAL
37405: IFFALSE 37432
37407: PUSH
37408: LD_VAR 0 4
37412: PUSH
37413: LD_VAR 0 1
37417: PPUSH
37418: CALL_OW 437
37422: PUSH
37423: LD_INT 1
37425: ARRAY
37426: PUSH
37427: LD_INT 2
37429: ARRAY
37430: EQUAL
37431: AND
37432: IFFALSE 37459
37434: PUSH
37435: LD_VAR 0 5
37439: PUSH
37440: LD_VAR 0 1
37444: PPUSH
37445: CALL_OW 437
37449: PUSH
37450: LD_INT 1
37452: ARRAY
37453: PUSH
37454: LD_INT 3
37456: ARRAY
37457: EQUAL
37458: AND
37459: IFFALSE 37469
// result := true end ;
37461: LD_ADDR_VAR 0 3
37465: PUSH
37466: LD_INT 1
37468: ST_TO_ADDR
// end ;
37469: LD_VAR 0 3
37473: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37474: LD_INT 0
37476: PPUSH
// result := false ;
37477: LD_ADDR_VAR 0 4
37481: PUSH
37482: LD_INT 0
37484: ST_TO_ADDR
// if GetTaskList ( unit ) then
37485: LD_VAR 0 1
37489: PPUSH
37490: CALL_OW 437
37494: IFFALSE 37581
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37496: LD_STRING M
37498: PUSH
37499: LD_VAR 0 1
37503: PPUSH
37504: CALL_OW 437
37508: PUSH
37509: LD_INT 1
37511: ARRAY
37512: PUSH
37513: LD_INT 1
37515: ARRAY
37516: EQUAL
37517: IFFALSE 37544
37519: PUSH
37520: LD_VAR 0 2
37524: PUSH
37525: LD_VAR 0 1
37529: PPUSH
37530: CALL_OW 437
37534: PUSH
37535: LD_INT 1
37537: ARRAY
37538: PUSH
37539: LD_INT 2
37541: ARRAY
37542: EQUAL
37543: AND
37544: IFFALSE 37571
37546: PUSH
37547: LD_VAR 0 3
37551: PUSH
37552: LD_VAR 0 1
37556: PPUSH
37557: CALL_OW 437
37561: PUSH
37562: LD_INT 1
37564: ARRAY
37565: PUSH
37566: LD_INT 3
37568: ARRAY
37569: EQUAL
37570: AND
37571: IFFALSE 37581
// result := true ;
37573: LD_ADDR_VAR 0 4
37577: PUSH
37578: LD_INT 1
37580: ST_TO_ADDR
// end ; end ;
37581: LD_VAR 0 4
37585: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37586: LD_INT 0
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
// if not unit or not area then
37592: LD_VAR 0 1
37596: NOT
37597: IFTRUE 37606
37599: PUSH
37600: LD_VAR 0 2
37604: NOT
37605: OR
37606: IFFALSE 37610
// exit ;
37608: GO 37786
// tmp := AreaToList ( area , i ) ;
37610: LD_ADDR_VAR 0 6
37614: PUSH
37615: LD_VAR 0 2
37619: PPUSH
37620: LD_VAR 0 5
37624: PPUSH
37625: CALL_OW 517
37629: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37630: LD_ADDR_VAR 0 5
37634: PUSH
37635: DOUBLE
37636: LD_INT 1
37638: DEC
37639: ST_TO_ADDR
37640: LD_VAR 0 6
37644: PUSH
37645: LD_INT 1
37647: ARRAY
37648: PUSH
37649: FOR_TO
37650: IFFALSE 37784
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37652: LD_ADDR_VAR 0 7
37656: PUSH
37657: LD_VAR 0 6
37661: PUSH
37662: LD_INT 1
37664: ARRAY
37665: PUSH
37666: LD_VAR 0 5
37670: ARRAY
37671: PUSH
37672: LD_VAR 0 6
37676: PUSH
37677: LD_INT 2
37679: ARRAY
37680: PUSH
37681: LD_VAR 0 5
37685: ARRAY
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37691: LD_INT 92
37693: PUSH
37694: LD_VAR 0 7
37698: PUSH
37699: LD_INT 1
37701: ARRAY
37702: PUSH
37703: LD_VAR 0 7
37707: PUSH
37708: LD_INT 2
37710: ARRAY
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: PPUSH
37721: CALL_OW 69
37725: PUSH
37726: LD_INT 0
37728: EQUAL
37729: IFFALSE 37782
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37731: LD_VAR 0 1
37735: PPUSH
37736: LD_VAR 0 7
37740: PUSH
37741: LD_INT 1
37743: ARRAY
37744: PPUSH
37745: LD_VAR 0 7
37749: PUSH
37750: LD_INT 2
37752: ARRAY
37753: PPUSH
37754: LD_VAR 0 3
37758: PPUSH
37759: CALL_OW 48
// result := IsPlaced ( unit ) ;
37763: LD_ADDR_VAR 0 4
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 305
37777: ST_TO_ADDR
// exit ;
37778: POP
37779: POP
37780: GO 37786
// end ; end ;
37782: GO 37649
37784: POP
37785: POP
// end ;
37786: LD_VAR 0 4
37790: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37791: LD_INT 0
37793: PPUSH
37794: PPUSH
37795: PPUSH
// if not side or side > 8 then
37796: LD_VAR 0 1
37800: NOT
37801: IFTRUE 37813
37803: PUSH
37804: LD_VAR 0 1
37808: PUSH
37809: LD_INT 8
37811: GREATER
37812: OR
37813: IFFALSE 37817
// exit ;
37815: GO 38004
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37817: LD_ADDR_VAR 0 4
37821: PUSH
37822: LD_INT 22
37824: PUSH
37825: LD_VAR 0 1
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 21
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PPUSH
37848: CALL_OW 69
37852: ST_TO_ADDR
// if not tmp then
37853: LD_VAR 0 4
37857: NOT
37858: IFFALSE 37862
// exit ;
37860: GO 38004
// enable_addtolog := true ;
37862: LD_ADDR_OWVAR 81
37866: PUSH
37867: LD_INT 1
37869: ST_TO_ADDR
// AddToLog ( [ ) ;
37870: LD_STRING [
37872: PPUSH
37873: CALL_OW 561
// for i in tmp do
37877: LD_ADDR_VAR 0 3
37881: PUSH
37882: LD_VAR 0 4
37886: PUSH
37887: FOR_IN
37888: IFFALSE 37995
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37890: LD_STRING [
37892: PUSH
37893: LD_VAR 0 3
37897: PPUSH
37898: CALL_OW 266
37902: STR
37903: PUSH
37904: LD_STRING , 
37906: STR
37907: PUSH
37908: LD_VAR 0 3
37912: PPUSH
37913: CALL_OW 250
37917: STR
37918: PUSH
37919: LD_STRING , 
37921: STR
37922: PUSH
37923: LD_VAR 0 3
37927: PPUSH
37928: CALL_OW 251
37932: STR
37933: PUSH
37934: LD_STRING , 
37936: STR
37937: PUSH
37938: LD_VAR 0 3
37942: PPUSH
37943: CALL_OW 254
37947: STR
37948: PUSH
37949: LD_STRING , 
37951: STR
37952: PUSH
37953: LD_VAR 0 3
37957: PPUSH
37958: LD_INT 1
37960: PPUSH
37961: CALL_OW 268
37965: STR
37966: PUSH
37967: LD_STRING , 
37969: STR
37970: PUSH
37971: LD_VAR 0 3
37975: PPUSH
37976: LD_INT 2
37978: PPUSH
37979: CALL_OW 268
37983: STR
37984: PUSH
37985: LD_STRING ],
37987: STR
37988: PPUSH
37989: CALL_OW 561
// end ;
37993: GO 37887
37995: POP
37996: POP
// AddToLog ( ]; ) ;
37997: LD_STRING ];
37999: PPUSH
38000: CALL_OW 561
// end ;
38004: LD_VAR 0 2
38008: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38009: LD_INT 0
38011: PPUSH
38012: PPUSH
38013: PPUSH
38014: PPUSH
38015: PPUSH
// if not area or not rate or not max then
38016: LD_VAR 0 1
38020: NOT
38021: IFTRUE 38030
38023: PUSH
38024: LD_VAR 0 2
38028: NOT
38029: OR
38030: IFTRUE 38039
38032: PUSH
38033: LD_VAR 0 4
38037: NOT
38038: OR
38039: IFFALSE 38043
// exit ;
38041: GO 38232
// while 1 do
38043: LD_INT 1
38045: IFFALSE 38232
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38047: LD_ADDR_VAR 0 9
38051: PUSH
38052: LD_VAR 0 1
38056: PPUSH
38057: LD_INT 1
38059: PPUSH
38060: CALL_OW 287
38064: PUSH
38065: LD_INT 10
38067: MUL
38068: ST_TO_ADDR
// r := rate / 10 ;
38069: LD_ADDR_VAR 0 7
38073: PUSH
38074: LD_VAR 0 2
38078: PUSH
38079: LD_INT 10
38081: DIVREAL
38082: ST_TO_ADDR
// time := 1 1$00 ;
38083: LD_ADDR_VAR 0 8
38087: PUSH
38088: LD_INT 2100
38090: ST_TO_ADDR
// if amount < min then
38091: LD_VAR 0 9
38095: PUSH
38096: LD_VAR 0 3
38100: LESS
38101: IFFALSE 38119
// r := r * 2 else
38103: LD_ADDR_VAR 0 7
38107: PUSH
38108: LD_VAR 0 7
38112: PUSH
38113: LD_INT 2
38115: MUL
38116: ST_TO_ADDR
38117: GO 38145
// if amount > max then
38119: LD_VAR 0 9
38123: PUSH
38124: LD_VAR 0 4
38128: GREATER
38129: IFFALSE 38145
// r := r / 2 ;
38131: LD_ADDR_VAR 0 7
38135: PUSH
38136: LD_VAR 0 7
38140: PUSH
38141: LD_INT 2
38143: DIVREAL
38144: ST_TO_ADDR
// time := time / r ;
38145: LD_ADDR_VAR 0 8
38149: PUSH
38150: LD_VAR 0 8
38154: PUSH
38155: LD_VAR 0 7
38159: DIVREAL
38160: ST_TO_ADDR
// if time < 0 then
38161: LD_VAR 0 8
38165: PUSH
38166: LD_INT 0
38168: LESS
38169: IFFALSE 38186
// time := time * - 1 ;
38171: LD_ADDR_VAR 0 8
38175: PUSH
38176: LD_VAR 0 8
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: MUL
38185: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38186: LD_VAR 0 8
38190: PUSH
38191: LD_INT 35
38193: PPUSH
38194: LD_INT 875
38196: PPUSH
38197: CALL_OW 12
38201: PLUS
38202: PPUSH
38203: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38207: LD_INT 1
38209: PPUSH
38210: LD_INT 5
38212: PPUSH
38213: CALL_OW 12
38217: PPUSH
38218: LD_VAR 0 1
38222: PPUSH
38223: LD_INT 1
38225: PPUSH
38226: CALL_OW 55
// end ;
38230: GO 38043
// end ;
38232: LD_VAR 0 5
38236: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38237: LD_INT 0
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
38246: PPUSH
// if not turrets or not factories then
38247: LD_VAR 0 1
38251: NOT
38252: IFTRUE 38261
38254: PUSH
38255: LD_VAR 0 2
38259: NOT
38260: OR
38261: IFFALSE 38265
// exit ;
38263: GO 38572
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38265: LD_ADDR_VAR 0 10
38269: PUSH
38270: LD_INT 5
38272: PUSH
38273: LD_INT 6
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: LD_INT 4
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 3
38292: PUSH
38293: LD_INT 5
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 24
38307: PUSH
38308: LD_INT 25
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 23
38317: PUSH
38318: LD_INT 27
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 42
38331: PUSH
38332: LD_INT 43
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 44
38341: PUSH
38342: LD_INT 46
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 45
38351: PUSH
38352: LD_INT 47
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: LIST
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: ST_TO_ADDR
// result := [ ] ;
38369: LD_ADDR_VAR 0 3
38373: PUSH
38374: EMPTY
38375: ST_TO_ADDR
// for i in turrets do
38376: LD_ADDR_VAR 0 4
38380: PUSH
38381: LD_VAR 0 1
38385: PUSH
38386: FOR_IN
38387: IFFALSE 38570
// begin nat := GetNation ( i ) ;
38389: LD_ADDR_VAR 0 7
38393: PUSH
38394: LD_VAR 0 4
38398: PPUSH
38399: CALL_OW 248
38403: ST_TO_ADDR
// weapon := 0 ;
38404: LD_ADDR_VAR 0 8
38408: PUSH
38409: LD_INT 0
38411: ST_TO_ADDR
// if not nat then
38412: LD_VAR 0 7
38416: NOT
38417: IFFALSE 38421
// continue ;
38419: GO 38386
// for j in list [ nat ] do
38421: LD_ADDR_VAR 0 5
38425: PUSH
38426: LD_VAR 0 10
38430: PUSH
38431: LD_VAR 0 7
38435: ARRAY
38436: PUSH
38437: FOR_IN
38438: IFFALSE 38479
// if GetBWeapon ( i ) = j [ 1 ] then
38440: LD_VAR 0 4
38444: PPUSH
38445: CALL_OW 269
38449: PUSH
38450: LD_VAR 0 5
38454: PUSH
38455: LD_INT 1
38457: ARRAY
38458: EQUAL
38459: IFFALSE 38477
// begin weapon := j [ 2 ] ;
38461: LD_ADDR_VAR 0 8
38465: PUSH
38466: LD_VAR 0 5
38470: PUSH
38471: LD_INT 2
38473: ARRAY
38474: ST_TO_ADDR
// break ;
38475: GO 38479
// end ;
38477: GO 38437
38479: POP
38480: POP
// if not weapon then
38481: LD_VAR 0 8
38485: NOT
38486: IFFALSE 38490
// continue ;
38488: GO 38386
// for k in factories do
38490: LD_ADDR_VAR 0 6
38494: PUSH
38495: LD_VAR 0 2
38499: PUSH
38500: FOR_IN
38501: IFFALSE 38566
// begin weapons := AvailableWeaponList ( k ) ;
38503: LD_ADDR_VAR 0 9
38507: PUSH
38508: LD_VAR 0 6
38512: PPUSH
38513: CALL_OW 478
38517: ST_TO_ADDR
// if not weapons then
38518: LD_VAR 0 9
38522: NOT
38523: IFFALSE 38527
// continue ;
38525: GO 38500
// if weapon in weapons then
38527: LD_VAR 0 8
38531: PUSH
38532: LD_VAR 0 9
38536: IN
38537: IFFALSE 38564
// begin result := [ i , weapon ] ;
38539: LD_ADDR_VAR 0 3
38543: PUSH
38544: LD_VAR 0 4
38548: PUSH
38549: LD_VAR 0 8
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: ST_TO_ADDR
// exit ;
38558: POP
38559: POP
38560: POP
38561: POP
38562: GO 38572
// end ; end ;
38564: GO 38500
38566: POP
38567: POP
// end ;
38568: GO 38386
38570: POP
38571: POP
// end ;
38572: LD_VAR 0 3
38576: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38577: LD_INT 0
38579: PPUSH
// if not side or side > 8 then
38580: LD_VAR 0 3
38584: NOT
38585: IFTRUE 38597
38587: PUSH
38588: LD_VAR 0 3
38592: PUSH
38593: LD_INT 8
38595: GREATER
38596: OR
38597: IFFALSE 38601
// exit ;
38599: GO 38660
// if not range then
38601: LD_VAR 0 4
38605: NOT
38606: IFFALSE 38617
// range := - 12 ;
38608: LD_ADDR_VAR 0 4
38612: PUSH
38613: LD_INT 12
38615: NEG
38616: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38617: LD_VAR 0 1
38621: PPUSH
38622: LD_VAR 0 2
38626: PPUSH
38627: LD_VAR 0 3
38631: PPUSH
38632: LD_VAR 0 4
38636: PPUSH
38637: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38641: LD_VAR 0 1
38645: PPUSH
38646: LD_VAR 0 2
38650: PPUSH
38651: LD_VAR 0 3
38655: PPUSH
38656: CALL_OW 331
// end ;
38660: LD_VAR 0 5
38664: RET
// export function Video ( mode ) ; begin
38665: LD_INT 0
38667: PPUSH
// ingame_video = mode ;
38668: LD_ADDR_OWVAR 52
38672: PUSH
38673: LD_VAR 0 1
38677: ST_TO_ADDR
// interface_hidden = mode ;
38678: LD_ADDR_OWVAR 54
38682: PUSH
38683: LD_VAR 0 1
38687: ST_TO_ADDR
// end ;
38688: LD_VAR 0 2
38692: RET
// export function Join ( array , element ) ; begin
38693: LD_INT 0
38695: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_VAR 0 1
38705: PPUSH
38706: LD_VAR 0 1
38710: PUSH
38711: LD_INT 1
38713: PLUS
38714: PPUSH
38715: LD_VAR 0 2
38719: PPUSH
38720: CALL_OW 1
38724: ST_TO_ADDR
// end ;
38725: LD_VAR 0 3
38729: RET
// export function JoinUnion ( array , element ) ; begin
38730: LD_INT 0
38732: PPUSH
// result := array union element ;
38733: LD_ADDR_VAR 0 3
38737: PUSH
38738: LD_VAR 0 1
38742: PUSH
38743: LD_VAR 0 2
38747: UNION
38748: ST_TO_ADDR
// end ;
38749: LD_VAR 0 3
38753: RET
// export function GetBehemoths ( side ) ; begin
38754: LD_INT 0
38756: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38757: LD_ADDR_VAR 0 2
38761: PUSH
38762: LD_INT 22
38764: PUSH
38765: LD_VAR 0 1
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 31
38776: PUSH
38777: LD_INT 25
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PPUSH
38788: CALL_OW 69
38792: ST_TO_ADDR
// end ;
38793: LD_VAR 0 2
38797: RET
// export function Shuffle ( array ) ; var i , index ; begin
38798: LD_INT 0
38800: PPUSH
38801: PPUSH
38802: PPUSH
// result := [ ] ;
38803: LD_ADDR_VAR 0 2
38807: PUSH
38808: EMPTY
38809: ST_TO_ADDR
// if not array then
38810: LD_VAR 0 1
38814: NOT
38815: IFFALSE 38819
// exit ;
38817: GO 38918
// Randomize ;
38819: CALL_OW 10
// for i = array downto 1 do
38823: LD_ADDR_VAR 0 3
38827: PUSH
38828: DOUBLE
38829: LD_VAR 0 1
38833: INC
38834: ST_TO_ADDR
38835: LD_INT 1
38837: PUSH
38838: FOR_DOWNTO
38839: IFFALSE 38916
// begin index := rand ( 1 , array ) ;
38841: LD_ADDR_VAR 0 4
38845: PUSH
38846: LD_INT 1
38848: PPUSH
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 12
38858: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38859: LD_ADDR_VAR 0 2
38863: PUSH
38864: LD_VAR 0 2
38868: PPUSH
38869: LD_VAR 0 2
38873: PUSH
38874: LD_INT 1
38876: PLUS
38877: PPUSH
38878: LD_VAR 0 1
38882: PUSH
38883: LD_VAR 0 4
38887: ARRAY
38888: PPUSH
38889: CALL_OW 2
38893: ST_TO_ADDR
// array := Delete ( array , index ) ;
38894: LD_ADDR_VAR 0 1
38898: PUSH
38899: LD_VAR 0 1
38903: PPUSH
38904: LD_VAR 0 4
38908: PPUSH
38909: CALL_OW 3
38913: ST_TO_ADDR
// end ;
38914: GO 38838
38916: POP
38917: POP
// end ;
38918: LD_VAR 0 2
38922: RET
// export function GetBaseMaterials ( base ) ; begin
38923: LD_INT 0
38925: PPUSH
// result := [ 0 , 0 , 0 ] ;
38926: LD_ADDR_VAR 0 2
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: ST_TO_ADDR
// if not base then
38945: LD_VAR 0 1
38949: NOT
38950: IFFALSE 38954
// exit ;
38952: GO 39003
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38954: LD_ADDR_VAR 0 2
38958: PUSH
38959: LD_VAR 0 1
38963: PPUSH
38964: LD_INT 1
38966: PPUSH
38967: CALL_OW 275
38971: PUSH
38972: LD_VAR 0 1
38976: PPUSH
38977: LD_INT 2
38979: PPUSH
38980: CALL_OW 275
38984: PUSH
38985: LD_VAR 0 1
38989: PPUSH
38990: LD_INT 3
38992: PPUSH
38993: CALL_OW 275
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: ST_TO_ADDR
// end ;
39003: LD_VAR 0 2
39007: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39008: LD_INT 0
39010: PPUSH
39011: PPUSH
// result := array ;
39012: LD_ADDR_VAR 0 3
39016: PUSH
39017: LD_VAR 0 1
39021: ST_TO_ADDR
// if size >= result then
39022: LD_VAR 0 2
39026: PUSH
39027: LD_VAR 0 3
39031: GREATEREQUAL
39032: IFFALSE 39036
// exit ;
39034: GO 39086
// if size then
39036: LD_VAR 0 2
39040: IFFALSE 39086
// for i := array downto size do
39042: LD_ADDR_VAR 0 4
39046: PUSH
39047: DOUBLE
39048: LD_VAR 0 1
39052: INC
39053: ST_TO_ADDR
39054: LD_VAR 0 2
39058: PUSH
39059: FOR_DOWNTO
39060: IFFALSE 39084
// result := Delete ( result , result ) ;
39062: LD_ADDR_VAR 0 3
39066: PUSH
39067: LD_VAR 0 3
39071: PPUSH
39072: LD_VAR 0 3
39076: PPUSH
39077: CALL_OW 3
39081: ST_TO_ADDR
39082: GO 39059
39084: POP
39085: POP
// end ;
39086: LD_VAR 0 3
39090: RET
// export function ComExit ( unit ) ; var tmp ; begin
39091: LD_INT 0
39093: PPUSH
39094: PPUSH
// if not IsInUnit ( unit ) then
39095: LD_VAR 0 1
39099: PPUSH
39100: CALL_OW 310
39104: NOT
39105: IFFALSE 39109
// exit ;
39107: GO 39169
// tmp := IsInUnit ( unit ) ;
39109: LD_ADDR_VAR 0 3
39113: PUSH
39114: LD_VAR 0 1
39118: PPUSH
39119: CALL_OW 310
39123: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39124: LD_VAR 0 3
39128: PPUSH
39129: CALL_OW 247
39133: PUSH
39134: LD_INT 2
39136: EQUAL
39137: IFFALSE 39150
// ComExitVehicle ( unit ) else
39139: LD_VAR 0 1
39143: PPUSH
39144: CALL_OW 121
39148: GO 39159
// ComExitBuilding ( unit ) ;
39150: LD_VAR 0 1
39154: PPUSH
39155: CALL_OW 122
// result := tmp ;
39159: LD_ADDR_VAR 0 2
39163: PUSH
39164: LD_VAR 0 3
39168: ST_TO_ADDR
// end ;
39169: LD_VAR 0 2
39173: RET
// export function ComExitAll ( units ) ; var i ; begin
39174: LD_INT 0
39176: PPUSH
39177: PPUSH
// if not units then
39178: LD_VAR 0 1
39182: NOT
39183: IFFALSE 39187
// exit ;
39185: GO 39213
// for i in units do
39187: LD_ADDR_VAR 0 3
39191: PUSH
39192: LD_VAR 0 1
39196: PUSH
39197: FOR_IN
39198: IFFALSE 39211
// ComExit ( i ) ;
39200: LD_VAR 0 3
39204: PPUSH
39205: CALL 39091 0 1
39209: GO 39197
39211: POP
39212: POP
// end ;
39213: LD_VAR 0 2
39217: RET
// export function ResetHc ; begin
39218: LD_INT 0
39220: PPUSH
// InitHc ;
39221: CALL_OW 19
// hc_importance := 0 ;
39225: LD_ADDR_OWVAR 32
39229: PUSH
39230: LD_INT 0
39232: ST_TO_ADDR
// end ;
39233: LD_VAR 0 1
39237: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39238: LD_INT 0
39240: PPUSH
39241: PPUSH
39242: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39243: LD_ADDR_VAR 0 6
39247: PUSH
39248: LD_VAR 0 1
39252: PUSH
39253: LD_VAR 0 3
39257: PLUS
39258: PUSH
39259: LD_INT 2
39261: DIV
39262: ST_TO_ADDR
// if _x < 0 then
39263: LD_VAR 0 6
39267: PUSH
39268: LD_INT 0
39270: LESS
39271: IFFALSE 39288
// _x := _x * - 1 ;
39273: LD_ADDR_VAR 0 6
39277: PUSH
39278: LD_VAR 0 6
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: MUL
39287: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39288: LD_ADDR_VAR 0 7
39292: PUSH
39293: LD_VAR 0 2
39297: PUSH
39298: LD_VAR 0 4
39302: PLUS
39303: PUSH
39304: LD_INT 2
39306: DIV
39307: ST_TO_ADDR
// if _y < 0 then
39308: LD_VAR 0 7
39312: PUSH
39313: LD_INT 0
39315: LESS
39316: IFFALSE 39333
// _y := _y * - 1 ;
39318: LD_ADDR_VAR 0 7
39322: PUSH
39323: LD_VAR 0 7
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: MUL
39332: ST_TO_ADDR
// result := [ _x , _y ] ;
39333: LD_ADDR_VAR 0 5
39337: PUSH
39338: LD_VAR 0 6
39342: PUSH
39343: LD_VAR 0 7
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: ST_TO_ADDR
// end ;
39352: LD_VAR 0 5
39356: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39357: LD_INT 0
39359: PPUSH
39360: PPUSH
39361: PPUSH
39362: PPUSH
// task := GetTaskList ( unit ) ;
39363: LD_ADDR_VAR 0 7
39367: PUSH
39368: LD_VAR 0 1
39372: PPUSH
39373: CALL_OW 437
39377: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39378: LD_VAR 0 7
39382: NOT
39383: IFFALSE 39402
39385: PUSH
39386: LD_VAR 0 1
39390: PPUSH
39391: LD_VAR 0 2
39395: PPUSH
39396: CALL_OW 308
39400: NOT
39401: AND
39402: IFFALSE 39406
// exit ;
39404: GO 39524
// if IsInArea ( unit , area ) then
39406: LD_VAR 0 1
39410: PPUSH
39411: LD_VAR 0 2
39415: PPUSH
39416: CALL_OW 308
39420: IFFALSE 39438
// begin ComMoveToArea ( unit , goAway ) ;
39422: LD_VAR 0 1
39426: PPUSH
39427: LD_VAR 0 3
39431: PPUSH
39432: CALL_OW 113
// exit ;
39436: GO 39524
// end ; if task [ 1 ] [ 1 ] <> M then
39438: LD_VAR 0 7
39442: PUSH
39443: LD_INT 1
39445: ARRAY
39446: PUSH
39447: LD_INT 1
39449: ARRAY
39450: PUSH
39451: LD_STRING M
39453: NONEQUAL
39454: IFFALSE 39458
// exit ;
39456: GO 39524
// x := task [ 1 ] [ 2 ] ;
39458: LD_ADDR_VAR 0 5
39462: PUSH
39463: LD_VAR 0 7
39467: PUSH
39468: LD_INT 1
39470: ARRAY
39471: PUSH
39472: LD_INT 2
39474: ARRAY
39475: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39476: LD_ADDR_VAR 0 6
39480: PUSH
39481: LD_VAR 0 7
39485: PUSH
39486: LD_INT 1
39488: ARRAY
39489: PUSH
39490: LD_INT 3
39492: ARRAY
39493: ST_TO_ADDR
// if InArea ( x , y , area ) then
39494: LD_VAR 0 5
39498: PPUSH
39499: LD_VAR 0 6
39503: PPUSH
39504: LD_VAR 0 2
39508: PPUSH
39509: CALL_OW 309
39513: IFFALSE 39524
// ComStop ( unit ) ;
39515: LD_VAR 0 1
39519: PPUSH
39520: CALL_OW 141
// end ;
39524: LD_VAR 0 4
39528: RET
// export function Abs ( value ) ; begin
39529: LD_INT 0
39531: PPUSH
// result := value ;
39532: LD_ADDR_VAR 0 2
39536: PUSH
39537: LD_VAR 0 1
39541: ST_TO_ADDR
// if value < 0 then
39542: LD_VAR 0 1
39546: PUSH
39547: LD_INT 0
39549: LESS
39550: IFFALSE 39567
// result := value * - 1 ;
39552: LD_ADDR_VAR 0 2
39556: PUSH
39557: LD_VAR 0 1
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: MUL
39566: ST_TO_ADDR
// end ;
39567: LD_VAR 0 2
39571: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39572: LD_INT 0
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
// if not unit or not building then
39582: LD_VAR 0 1
39586: NOT
39587: IFTRUE 39596
39589: PUSH
39590: LD_VAR 0 2
39594: NOT
39595: OR
39596: IFFALSE 39600
// exit ;
39598: GO 39828
// x := GetX ( building ) ;
39600: LD_ADDR_VAR 0 4
39604: PUSH
39605: LD_VAR 0 2
39609: PPUSH
39610: CALL_OW 250
39614: ST_TO_ADDR
// y := GetY ( building ) ;
39615: LD_ADDR_VAR 0 6
39619: PUSH
39620: LD_VAR 0 2
39624: PPUSH
39625: CALL_OW 251
39629: ST_TO_ADDR
// d := GetDir ( building ) ;
39630: LD_ADDR_VAR 0 8
39634: PUSH
39635: LD_VAR 0 2
39639: PPUSH
39640: CALL_OW 254
39644: ST_TO_ADDR
// r := 4 ;
39645: LD_ADDR_VAR 0 9
39649: PUSH
39650: LD_INT 4
39652: ST_TO_ADDR
// for i := 1 to 5 do
39653: LD_ADDR_VAR 0 10
39657: PUSH
39658: DOUBLE
39659: LD_INT 1
39661: DEC
39662: ST_TO_ADDR
39663: LD_INT 5
39665: PUSH
39666: FOR_TO
39667: IFFALSE 39826
// begin _x := ShiftX ( x , d , r + i ) ;
39669: LD_ADDR_VAR 0 5
39673: PUSH
39674: LD_VAR 0 4
39678: PPUSH
39679: LD_VAR 0 8
39683: PPUSH
39684: LD_VAR 0 9
39688: PUSH
39689: LD_VAR 0 10
39693: PLUS
39694: PPUSH
39695: CALL_OW 272
39699: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39700: LD_ADDR_VAR 0 7
39704: PUSH
39705: LD_VAR 0 6
39709: PPUSH
39710: LD_VAR 0 8
39714: PPUSH
39715: LD_VAR 0 9
39719: PUSH
39720: LD_VAR 0 10
39724: PLUS
39725: PPUSH
39726: CALL_OW 273
39730: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39731: LD_VAR 0 5
39735: PPUSH
39736: LD_VAR 0 7
39740: PPUSH
39741: CALL_OW 488
39745: IFFALSE 39780
39747: PUSH
39748: LD_VAR 0 5
39752: PPUSH
39753: LD_VAR 0 7
39757: PPUSH
39758: CALL_OW 428
39762: PPUSH
39763: CALL_OW 247
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: IN
39778: NOT
39779: AND
39780: IFFALSE 39824
// begin ComMoveXY ( unit , _x , _y ) ;
39782: LD_VAR 0 1
39786: PPUSH
39787: LD_VAR 0 5
39791: PPUSH
39792: LD_VAR 0 7
39796: PPUSH
39797: CALL_OW 111
// result := [ _x , _y ] ;
39801: LD_ADDR_VAR 0 3
39805: PUSH
39806: LD_VAR 0 5
39810: PUSH
39811: LD_VAR 0 7
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: ST_TO_ADDR
// exit ;
39820: POP
39821: POP
39822: GO 39828
// end ; end ;
39824: GO 39666
39826: POP
39827: POP
// end ;
39828: LD_VAR 0 3
39832: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39833: LD_INT 0
39835: PPUSH
39836: PPUSH
39837: PPUSH
// result := 0 ;
39838: LD_ADDR_VAR 0 3
39842: PUSH
39843: LD_INT 0
39845: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39846: LD_VAR 0 1
39850: PUSH
39851: LD_INT 0
39853: LESS
39854: IFTRUE 39866
39856: PUSH
39857: LD_VAR 0 1
39861: PUSH
39862: LD_INT 8
39864: GREATER
39865: OR
39866: IFTRUE 39878
39868: PUSH
39869: LD_VAR 0 2
39873: PUSH
39874: LD_INT 0
39876: LESS
39877: OR
39878: IFTRUE 39890
39880: PUSH
39881: LD_VAR 0 2
39885: PUSH
39886: LD_INT 8
39888: GREATER
39889: OR
39890: IFFALSE 39894
// exit ;
39892: GO 39969
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39894: LD_ADDR_VAR 0 4
39898: PUSH
39899: LD_INT 22
39901: PUSH
39902: LD_VAR 0 2
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PPUSH
39911: CALL_OW 69
39915: PUSH
39916: FOR_IN
39917: IFFALSE 39967
// begin un := UnitShoot ( i ) ;
39919: LD_ADDR_VAR 0 5
39923: PUSH
39924: LD_VAR 0 4
39928: PPUSH
39929: CALL_OW 504
39933: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39934: LD_VAR 0 5
39938: PPUSH
39939: CALL_OW 255
39943: PUSH
39944: LD_VAR 0 1
39948: EQUAL
39949: IFFALSE 39965
// begin result := un ;
39951: LD_ADDR_VAR 0 3
39955: PUSH
39956: LD_VAR 0 5
39960: ST_TO_ADDR
// exit ;
39961: POP
39962: POP
39963: GO 39969
// end ; end ;
39965: GO 39916
39967: POP
39968: POP
// end ;
39969: LD_VAR 0 3
39973: RET
// export function GetCargoBay ( units ) ; begin
39974: LD_INT 0
39976: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39977: LD_ADDR_VAR 0 2
39981: PUSH
39982: LD_VAR 0 1
39986: PPUSH
39987: LD_INT 2
39989: PUSH
39990: LD_INT 34
39992: PUSH
39993: LD_INT 12
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 34
40002: PUSH
40003: LD_INT 51
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 34
40012: PUSH
40013: LD_INT 32
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 34
40022: PUSH
40023: LD_INT 89
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: PPUSH
40037: CALL_OW 72
40041: ST_TO_ADDR
// end ;
40042: LD_VAR 0 2
40046: RET
// export function Negate ( value ) ; begin
40047: LD_INT 0
40049: PPUSH
// result := not value ;
40050: LD_ADDR_VAR 0 2
40054: PUSH
40055: LD_VAR 0 1
40059: NOT
40060: ST_TO_ADDR
// end ;
40061: LD_VAR 0 2
40065: RET
// export function Inc ( value ) ; begin
40066: LD_INT 0
40068: PPUSH
// result := value + 1 ;
40069: LD_ADDR_VAR 0 2
40073: PUSH
40074: LD_VAR 0 1
40078: PUSH
40079: LD_INT 1
40081: PLUS
40082: ST_TO_ADDR
// end ;
40083: LD_VAR 0 2
40087: RET
// export function Dec ( value ) ; begin
40088: LD_INT 0
40090: PPUSH
// result := value - 1 ;
40091: LD_ADDR_VAR 0 2
40095: PUSH
40096: LD_VAR 0 1
40100: PUSH
40101: LD_INT 1
40103: MINUS
40104: ST_TO_ADDR
// end ;
40105: LD_VAR 0 2
40109: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40110: LD_INT 0
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
40118: PPUSH
40119: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40120: LD_VAR 0 1
40124: PPUSH
40125: LD_VAR 0 2
40129: PPUSH
40130: CALL_OW 488
40134: NOT
40135: IFTRUE 40154
40137: PUSH
40138: LD_VAR 0 3
40142: PPUSH
40143: LD_VAR 0 4
40147: PPUSH
40148: CALL_OW 488
40152: NOT
40153: OR
40154: IFFALSE 40167
// begin result := - 1 ;
40156: LD_ADDR_VAR 0 5
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: ST_TO_ADDR
// exit ;
40165: GO 40402
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40167: LD_ADDR_VAR 0 12
40171: PUSH
40172: LD_VAR 0 1
40176: PPUSH
40177: LD_VAR 0 2
40181: PPUSH
40182: LD_VAR 0 3
40186: PPUSH
40187: LD_VAR 0 4
40191: PPUSH
40192: CALL 39238 0 4
40196: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40197: LD_ADDR_VAR 0 11
40201: PUSH
40202: LD_VAR 0 1
40206: PPUSH
40207: LD_VAR 0 2
40211: PPUSH
40212: LD_VAR 0 12
40216: PUSH
40217: LD_INT 1
40219: ARRAY
40220: PPUSH
40221: LD_VAR 0 12
40225: PUSH
40226: LD_INT 2
40228: ARRAY
40229: PPUSH
40230: CALL_OW 298
40234: ST_TO_ADDR
// distance := 9999 ;
40235: LD_ADDR_VAR 0 10
40239: PUSH
40240: LD_INT 9999
40242: ST_TO_ADDR
// for i := 0 to 5 do
40243: LD_ADDR_VAR 0 6
40247: PUSH
40248: DOUBLE
40249: LD_INT 0
40251: DEC
40252: ST_TO_ADDR
40253: LD_INT 5
40255: PUSH
40256: FOR_TO
40257: IFFALSE 40400
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40259: LD_ADDR_VAR 0 7
40263: PUSH
40264: LD_VAR 0 1
40268: PPUSH
40269: LD_VAR 0 6
40273: PPUSH
40274: LD_VAR 0 11
40278: PPUSH
40279: CALL_OW 272
40283: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40284: LD_ADDR_VAR 0 8
40288: PUSH
40289: LD_VAR 0 2
40293: PPUSH
40294: LD_VAR 0 6
40298: PPUSH
40299: LD_VAR 0 11
40303: PPUSH
40304: CALL_OW 273
40308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40309: LD_VAR 0 7
40313: PPUSH
40314: LD_VAR 0 8
40318: PPUSH
40319: CALL_OW 488
40323: NOT
40324: IFFALSE 40328
// continue ;
40326: GO 40256
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40328: LD_ADDR_VAR 0 9
40332: PUSH
40333: LD_VAR 0 12
40337: PUSH
40338: LD_INT 1
40340: ARRAY
40341: PPUSH
40342: LD_VAR 0 12
40346: PUSH
40347: LD_INT 2
40349: ARRAY
40350: PPUSH
40351: LD_VAR 0 7
40355: PPUSH
40356: LD_VAR 0 8
40360: PPUSH
40361: CALL_OW 298
40365: ST_TO_ADDR
// if tmp < distance then
40366: LD_VAR 0 9
40370: PUSH
40371: LD_VAR 0 10
40375: LESS
40376: IFFALSE 40398
// begin result := i ;
40378: LD_ADDR_VAR 0 5
40382: PUSH
40383: LD_VAR 0 6
40387: ST_TO_ADDR
// distance := tmp ;
40388: LD_ADDR_VAR 0 10
40392: PUSH
40393: LD_VAR 0 9
40397: ST_TO_ADDR
// end ; end ;
40398: GO 40256
40400: POP
40401: POP
// end ;
40402: LD_VAR 0 5
40406: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40407: LD_INT 0
40409: PPUSH
40410: PPUSH
// if not driver or not IsInUnit ( driver ) then
40411: LD_VAR 0 1
40415: NOT
40416: IFTRUE 40430
40418: PUSH
40419: LD_VAR 0 1
40423: PPUSH
40424: CALL_OW 310
40428: NOT
40429: OR
40430: IFFALSE 40434
// exit ;
40432: GO 40524
// vehicle := IsInUnit ( driver ) ;
40434: LD_ADDR_VAR 0 3
40438: PUSH
40439: LD_VAR 0 1
40443: PPUSH
40444: CALL_OW 310
40448: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40449: LD_VAR 0 1
40453: PPUSH
40454: LD_STRING \
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: PUSH
40484: LD_STRING E
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_VAR 0 3
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PPUSH
40520: CALL_OW 446
// end ;
40524: LD_VAR 0 2
40528: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40529: LD_INT 0
40531: PPUSH
40532: PPUSH
// if not driver or not IsInUnit ( driver ) then
40533: LD_VAR 0 1
40537: NOT
40538: IFTRUE 40552
40540: PUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: CALL_OW 310
40550: NOT
40551: OR
40552: IFFALSE 40556
// exit ;
40554: GO 40646
// vehicle := IsInUnit ( driver ) ;
40556: LD_ADDR_VAR 0 3
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 310
40570: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40571: LD_VAR 0 1
40575: PPUSH
40576: LD_STRING \
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: PUSH
40606: LD_STRING E
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_VAR 0 3
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PPUSH
40642: CALL_OW 447
// end ;
40646: LD_VAR 0 2
40650: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40651: LD_INT 0
40653: PPUSH
40654: PPUSH
40655: PPUSH
// tmp := [ ] ;
40656: LD_ADDR_VAR 0 5
40660: PUSH
40661: EMPTY
40662: ST_TO_ADDR
// for i in units do
40663: LD_ADDR_VAR 0 4
40667: PUSH
40668: LD_VAR 0 1
40672: PUSH
40673: FOR_IN
40674: IFFALSE 40712
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40676: LD_ADDR_VAR 0 5
40680: PUSH
40681: LD_VAR 0 5
40685: PPUSH
40686: LD_VAR 0 5
40690: PUSH
40691: LD_INT 1
40693: PLUS
40694: PPUSH
40695: LD_VAR 0 4
40699: PPUSH
40700: CALL_OW 256
40704: PPUSH
40705: CALL_OW 2
40709: ST_TO_ADDR
40710: GO 40673
40712: POP
40713: POP
// if not tmp then
40714: LD_VAR 0 5
40718: NOT
40719: IFFALSE 40723
// exit ;
40721: GO 40771
// if asc then
40723: LD_VAR 0 2
40727: IFFALSE 40751
// result := SortListByListAsc ( units , tmp ) else
40729: LD_ADDR_VAR 0 3
40733: PUSH
40734: LD_VAR 0 1
40738: PPUSH
40739: LD_VAR 0 5
40743: PPUSH
40744: CALL_OW 76
40748: ST_TO_ADDR
40749: GO 40771
// result := SortListByListDesc ( units , tmp ) ;
40751: LD_ADDR_VAR 0 3
40755: PUSH
40756: LD_VAR 0 1
40760: PPUSH
40761: LD_VAR 0 5
40765: PPUSH
40766: CALL_OW 77
40770: ST_TO_ADDR
// end ;
40771: LD_VAR 0 3
40775: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40776: LD_INT 0
40778: PPUSH
40779: PPUSH
// task := GetTaskList ( mech ) ;
40780: LD_ADDR_VAR 0 4
40784: PUSH
40785: LD_VAR 0 1
40789: PPUSH
40790: CALL_OW 437
40794: ST_TO_ADDR
// if not task then
40795: LD_VAR 0 4
40799: NOT
40800: IFFALSE 40804
// exit ;
40802: GO 40848
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: LD_VAR 0 4
40813: PUSH
40814: LD_INT 1
40816: ARRAY
40817: PUSH
40818: LD_INT 1
40820: ARRAY
40821: PUSH
40822: LD_STRING r
40824: EQUAL
40825: IFFALSE 40847
40827: PUSH
40828: LD_VAR 0 4
40832: PUSH
40833: LD_INT 1
40835: ARRAY
40836: PUSH
40837: LD_INT 4
40839: ARRAY
40840: PUSH
40841: LD_VAR 0 2
40845: EQUAL
40846: AND
40847: ST_TO_ADDR
// end ;
40848: LD_VAR 0 3
40852: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40853: LD_INT 0
40855: PPUSH
// SetDir ( unit , d ) ;
40856: LD_VAR 0 1
40860: PPUSH
40861: LD_VAR 0 4
40865: PPUSH
40866: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40870: LD_ADDR_VAR 0 6
40874: PUSH
40875: LD_VAR 0 1
40879: PPUSH
40880: LD_VAR 0 2
40884: PPUSH
40885: LD_VAR 0 3
40889: PPUSH
40890: LD_VAR 0 5
40894: PPUSH
40895: CALL_OW 48
40899: ST_TO_ADDR
// end ;
40900: LD_VAR 0 6
40904: RET
// export function ToNaturalNumber ( number ) ; begin
40905: LD_INT 0
40907: PPUSH
// result := number div 1 ;
40908: LD_ADDR_VAR 0 2
40912: PUSH
40913: LD_VAR 0 1
40917: PUSH
40918: LD_INT 1
40920: DIV
40921: ST_TO_ADDR
// if number < 0 then
40922: LD_VAR 0 1
40926: PUSH
40927: LD_INT 0
40929: LESS
40930: IFFALSE 40940
// result := 0 ;
40932: LD_ADDR_VAR 0 2
40936: PUSH
40937: LD_INT 0
40939: ST_TO_ADDR
// end ;
40940: LD_VAR 0 2
40944: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
40945: LD_INT 0
40947: PPUSH
40948: PPUSH
40949: PPUSH
// if not buildings then
40950: LD_VAR 0 1
40954: NOT
40955: IFFALSE 40959
// exit ;
40957: GO 41074
// tmp := [ ] ;
40959: LD_ADDR_VAR 0 5
40963: PUSH
40964: EMPTY
40965: ST_TO_ADDR
// for b in buildings do
40966: LD_ADDR_VAR 0 4
40970: PUSH
40971: LD_VAR 0 1
40975: PUSH
40976: FOR_IN
40977: IFFALSE 41015
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
40979: LD_ADDR_VAR 0 5
40983: PUSH
40984: LD_VAR 0 5
40988: PPUSH
40989: LD_VAR 0 5
40993: PUSH
40994: LD_INT 1
40996: PLUS
40997: PPUSH
40998: LD_VAR 0 4
41002: PPUSH
41003: CALL_OW 266
41007: PPUSH
41008: CALL_OW 1
41012: ST_TO_ADDR
41013: GO 40976
41015: POP
41016: POP
// if not tmp then
41017: LD_VAR 0 5
41021: NOT
41022: IFFALSE 41026
// exit ;
41024: GO 41074
// if asc then
41026: LD_VAR 0 2
41030: IFFALSE 41054
// result := SortListByListAsc ( buildings , tmp ) else
41032: LD_ADDR_VAR 0 3
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: LD_VAR 0 5
41046: PPUSH
41047: CALL_OW 76
41051: ST_TO_ADDR
41052: GO 41074
// result := SortListByListDesc ( buildings , tmp ) ;
41054: LD_ADDR_VAR 0 3
41058: PUSH
41059: LD_VAR 0 1
41063: PPUSH
41064: LD_VAR 0 5
41068: PPUSH
41069: CALL_OW 77
41073: ST_TO_ADDR
// end ;
41074: LD_VAR 0 3
41078: RET
// export function SortByClass ( units , class ) ; var un ; begin
41079: LD_INT 0
41081: PPUSH
41082: PPUSH
// if not units or not class then
41083: LD_VAR 0 1
41087: NOT
41088: IFTRUE 41097
41090: PUSH
41091: LD_VAR 0 2
41095: NOT
41096: OR
41097: IFFALSE 41101
// exit ;
41099: GO 41196
// result := [ ] ;
41101: LD_ADDR_VAR 0 3
41105: PUSH
41106: EMPTY
41107: ST_TO_ADDR
// for un in units do
41108: LD_ADDR_VAR 0 4
41112: PUSH
41113: LD_VAR 0 1
41117: PUSH
41118: FOR_IN
41119: IFFALSE 41194
// if GetClass ( un ) = class then
41121: LD_VAR 0 4
41125: PPUSH
41126: CALL_OW 257
41130: PUSH
41131: LD_VAR 0 2
41135: EQUAL
41136: IFFALSE 41163
// result := Insert ( result , 1 , un ) else
41138: LD_ADDR_VAR 0 3
41142: PUSH
41143: LD_VAR 0 3
41147: PPUSH
41148: LD_INT 1
41150: PPUSH
41151: LD_VAR 0 4
41155: PPUSH
41156: CALL_OW 2
41160: ST_TO_ADDR
41161: GO 41192
// result := Replace ( result , result + 1 , un ) ;
41163: LD_ADDR_VAR 0 3
41167: PUSH
41168: LD_VAR 0 3
41172: PPUSH
41173: LD_VAR 0 3
41177: PUSH
41178: LD_INT 1
41180: PLUS
41181: PPUSH
41182: LD_VAR 0 4
41186: PPUSH
41187: CALL_OW 1
41191: ST_TO_ADDR
41192: GO 41118
41194: POP
41195: POP
// end ;
41196: LD_VAR 0 3
41200: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41201: LD_INT 0
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
// result := [ ] ;
41210: LD_ADDR_VAR 0 4
41214: PUSH
41215: EMPTY
41216: ST_TO_ADDR
// if x - r < 0 then
41217: LD_VAR 0 1
41221: PUSH
41222: LD_VAR 0 3
41226: MINUS
41227: PUSH
41228: LD_INT 0
41230: LESS
41231: IFFALSE 41243
// min_x := 0 else
41233: LD_ADDR_VAR 0 8
41237: PUSH
41238: LD_INT 0
41240: ST_TO_ADDR
41241: GO 41259
// min_x := x - r ;
41243: LD_ADDR_VAR 0 8
41247: PUSH
41248: LD_VAR 0 1
41252: PUSH
41253: LD_VAR 0 3
41257: MINUS
41258: ST_TO_ADDR
// if y - r < 0 then
41259: LD_VAR 0 2
41263: PUSH
41264: LD_VAR 0 3
41268: MINUS
41269: PUSH
41270: LD_INT 0
41272: LESS
41273: IFFALSE 41285
// min_y := 0 else
41275: LD_ADDR_VAR 0 7
41279: PUSH
41280: LD_INT 0
41282: ST_TO_ADDR
41283: GO 41301
// min_y := y - r ;
41285: LD_ADDR_VAR 0 7
41289: PUSH
41290: LD_VAR 0 2
41294: PUSH
41295: LD_VAR 0 3
41299: MINUS
41300: ST_TO_ADDR
// max_x := x + r ;
41301: LD_ADDR_VAR 0 9
41305: PUSH
41306: LD_VAR 0 1
41310: PUSH
41311: LD_VAR 0 3
41315: PLUS
41316: ST_TO_ADDR
// max_y := y + r ;
41317: LD_ADDR_VAR 0 10
41321: PUSH
41322: LD_VAR 0 2
41326: PUSH
41327: LD_VAR 0 3
41331: PLUS
41332: ST_TO_ADDR
// for _x = min_x to max_x do
41333: LD_ADDR_VAR 0 5
41337: PUSH
41338: DOUBLE
41339: LD_VAR 0 8
41343: DEC
41344: ST_TO_ADDR
41345: LD_VAR 0 9
41349: PUSH
41350: FOR_TO
41351: IFFALSE 41452
// for _y = min_y to max_y do
41353: LD_ADDR_VAR 0 6
41357: PUSH
41358: DOUBLE
41359: LD_VAR 0 7
41363: DEC
41364: ST_TO_ADDR
41365: LD_VAR 0 10
41369: PUSH
41370: FOR_TO
41371: IFFALSE 41448
// begin if not ValidHex ( _x , _y ) then
41373: LD_VAR 0 5
41377: PPUSH
41378: LD_VAR 0 6
41382: PPUSH
41383: CALL_OW 488
41387: NOT
41388: IFFALSE 41392
// continue ;
41390: GO 41370
// if GetResourceTypeXY ( _x , _y ) then
41392: LD_VAR 0 5
41396: PPUSH
41397: LD_VAR 0 6
41401: PPUSH
41402: CALL_OW 283
41406: IFFALSE 41446
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41408: LD_ADDR_VAR 0 4
41412: PUSH
41413: LD_VAR 0 4
41417: PPUSH
41418: LD_VAR 0 4
41422: PUSH
41423: LD_INT 1
41425: PLUS
41426: PPUSH
41427: LD_VAR 0 5
41431: PUSH
41432: LD_VAR 0 6
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PPUSH
41441: CALL_OW 1
41445: ST_TO_ADDR
// end ;
41446: GO 41370
41448: POP
41449: POP
41450: GO 41350
41452: POP
41453: POP
// end ;
41454: LD_VAR 0 4
41458: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41459: LD_INT 0
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
// if not units then
41469: LD_VAR 0 1
41473: NOT
41474: IFFALSE 41478
// exit ;
41476: GO 42010
// result := UnitFilter ( units , [ f_ok ] ) ;
41478: LD_ADDR_VAR 0 3
41482: PUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: LD_INT 50
41490: PUSH
41491: EMPTY
41492: LIST
41493: PPUSH
41494: CALL_OW 72
41498: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41499: LD_ADDR_VAR 0 8
41503: PUSH
41504: LD_VAR 0 1
41508: PUSH
41509: LD_INT 1
41511: ARRAY
41512: PPUSH
41513: CALL_OW 255
41517: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41518: LD_ADDR_VAR 0 10
41522: PUSH
41523: LD_INT 29
41525: PUSH
41526: LD_INT 91
41528: PUSH
41529: LD_INT 49
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: LIST
41536: ST_TO_ADDR
// if not result then
41537: LD_VAR 0 3
41541: NOT
41542: IFFALSE 41546
// exit ;
41544: GO 42010
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41546: LD_ADDR_VAR 0 5
41550: PUSH
41551: LD_INT 81
41553: PUSH
41554: LD_VAR 0 8
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PPUSH
41563: CALL_OW 69
41567: ST_TO_ADDR
// for i in result do
41568: LD_ADDR_VAR 0 4
41572: PUSH
41573: LD_VAR 0 3
41577: PUSH
41578: FOR_IN
41579: IFFALSE 42008
// begin tag := GetTag ( i ) + 1 ;
41581: LD_ADDR_VAR 0 9
41585: PUSH
41586: LD_VAR 0 4
41590: PPUSH
41591: CALL_OW 110
41595: PUSH
41596: LD_INT 1
41598: PLUS
41599: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41600: LD_ADDR_VAR 0 7
41604: PUSH
41605: LD_VAR 0 4
41609: PPUSH
41610: CALL_OW 250
41614: PPUSH
41615: LD_VAR 0 4
41619: PPUSH
41620: CALL_OW 251
41624: PPUSH
41625: LD_INT 4
41627: PPUSH
41628: CALL 41201 0 3
41632: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41633: LD_VAR 0 4
41637: PPUSH
41638: CALL_OW 247
41642: PUSH
41643: LD_INT 2
41645: EQUAL
41646: IFFALSE 41658
41648: PUSH
41649: LD_VAR 0 7
41653: PUSH
41654: LD_INT 2
41656: GREATER
41657: AND
41658: IFFALSE 41678
41660: PUSH
41661: LD_VAR 0 4
41665: PPUSH
41666: CALL_OW 264
41670: PUSH
41671: LD_VAR 0 10
41675: IN
41676: NOT
41677: AND
41678: IFFALSE 41717
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41680: LD_VAR 0 4
41684: PPUSH
41685: LD_VAR 0 7
41689: PUSH
41690: LD_INT 1
41692: ARRAY
41693: PUSH
41694: LD_INT 1
41696: ARRAY
41697: PPUSH
41698: LD_VAR 0 7
41702: PUSH
41703: LD_INT 1
41705: ARRAY
41706: PUSH
41707: LD_INT 2
41709: ARRAY
41710: PPUSH
41711: CALL_OW 116
41715: GO 42006
// if path > tag then
41717: LD_VAR 0 2
41721: PUSH
41722: LD_VAR 0 9
41726: GREATER
41727: IFFALSE 41935
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41729: LD_ADDR_VAR 0 6
41733: PUSH
41734: LD_VAR 0 5
41738: PPUSH
41739: LD_INT 91
41741: PUSH
41742: LD_VAR 0 4
41746: PUSH
41747: LD_INT 8
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: LIST
41754: PPUSH
41755: CALL_OW 72
41759: ST_TO_ADDR
// if nearEnemy then
41760: LD_VAR 0 6
41764: IFFALSE 41833
// begin if GetWeapon ( i ) = ru_time_lapser then
41766: LD_VAR 0 4
41770: PPUSH
41771: CALL_OW 264
41775: PUSH
41776: LD_INT 49
41778: EQUAL
41779: IFFALSE 41807
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41781: LD_VAR 0 4
41785: PPUSH
41786: LD_VAR 0 6
41790: PPUSH
41791: LD_VAR 0 4
41795: PPUSH
41796: CALL_OW 74
41800: PPUSH
41801: CALL_OW 112
41805: GO 41831
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41807: LD_VAR 0 4
41811: PPUSH
41812: LD_VAR 0 6
41816: PPUSH
41817: LD_VAR 0 4
41821: PPUSH
41822: CALL_OW 74
41826: PPUSH
41827: CALL 43091 0 2
// end else
41831: GO 41933
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41833: LD_VAR 0 4
41837: PPUSH
41838: LD_VAR 0 2
41842: PUSH
41843: LD_VAR 0 9
41847: ARRAY
41848: PUSH
41849: LD_INT 1
41851: ARRAY
41852: PPUSH
41853: LD_VAR 0 2
41857: PUSH
41858: LD_VAR 0 9
41862: ARRAY
41863: PUSH
41864: LD_INT 2
41866: ARRAY
41867: PPUSH
41868: CALL_OW 297
41872: PUSH
41873: LD_INT 6
41875: GREATER
41876: IFFALSE 41919
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41878: LD_VAR 0 4
41882: PPUSH
41883: LD_VAR 0 2
41887: PUSH
41888: LD_VAR 0 9
41892: ARRAY
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: PPUSH
41898: LD_VAR 0 2
41902: PUSH
41903: LD_VAR 0 9
41907: ARRAY
41908: PUSH
41909: LD_INT 2
41911: ARRAY
41912: PPUSH
41913: CALL_OW 114
41917: GO 41933
// SetTag ( i , tag ) ;
41919: LD_VAR 0 4
41923: PPUSH
41924: LD_VAR 0 9
41928: PPUSH
41929: CALL_OW 109
// end else
41933: GO 42006
// if enemy then
41935: LD_VAR 0 5
41939: IFFALSE 42006
// begin if GetWeapon ( i ) = ru_time_lapser then
41941: LD_VAR 0 4
41945: PPUSH
41946: CALL_OW 264
41950: PUSH
41951: LD_INT 49
41953: EQUAL
41954: IFFALSE 41982
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41956: LD_VAR 0 4
41960: PPUSH
41961: LD_VAR 0 5
41965: PPUSH
41966: LD_VAR 0 4
41970: PPUSH
41971: CALL_OW 74
41975: PPUSH
41976: CALL_OW 112
41980: GO 42006
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41982: LD_VAR 0 4
41986: PPUSH
41987: LD_VAR 0 5
41991: PPUSH
41992: LD_VAR 0 4
41996: PPUSH
41997: CALL_OW 74
42001: PPUSH
42002: CALL 43091 0 2
// end ; end ;
42006: GO 41578
42008: POP
42009: POP
// end ;
42010: LD_VAR 0 3
42014: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42015: LD_INT 0
42017: PPUSH
42018: PPUSH
42019: PPUSH
// if not unit or IsInUnit ( unit ) then
42020: LD_VAR 0 1
42024: NOT
42025: IFTRUE 42038
42027: PUSH
42028: LD_VAR 0 1
42032: PPUSH
42033: CALL_OW 310
42037: OR
42038: IFFALSE 42042
// exit ;
42040: GO 42133
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42042: LD_ADDR_VAR 0 4
42046: PUSH
42047: LD_VAR 0 1
42051: PPUSH
42052: CALL_OW 250
42056: PPUSH
42057: LD_VAR 0 2
42061: PPUSH
42062: LD_INT 1
42064: PPUSH
42065: CALL_OW 272
42069: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42070: LD_ADDR_VAR 0 5
42074: PUSH
42075: LD_VAR 0 1
42079: PPUSH
42080: CALL_OW 251
42084: PPUSH
42085: LD_VAR 0 2
42089: PPUSH
42090: LD_INT 1
42092: PPUSH
42093: CALL_OW 273
42097: ST_TO_ADDR
// if ValidHex ( x , y ) then
42098: LD_VAR 0 4
42102: PPUSH
42103: LD_VAR 0 5
42107: PPUSH
42108: CALL_OW 488
42112: IFFALSE 42133
// ComTurnXY ( unit , x , y ) ;
42114: LD_VAR 0 1
42118: PPUSH
42119: LD_VAR 0 4
42123: PPUSH
42124: LD_VAR 0 5
42128: PPUSH
42129: CALL_OW 118
// end ;
42133: LD_VAR 0 3
42137: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42138: LD_INT 0
42140: PPUSH
42141: PPUSH
// result := false ;
42142: LD_ADDR_VAR 0 3
42146: PUSH
42147: LD_INT 0
42149: ST_TO_ADDR
// if not units then
42150: LD_VAR 0 2
42154: NOT
42155: IFFALSE 42159
// exit ;
42157: GO 42204
// for i in units do
42159: LD_ADDR_VAR 0 4
42163: PUSH
42164: LD_VAR 0 2
42168: PUSH
42169: FOR_IN
42170: IFFALSE 42202
// if See ( side , i ) then
42172: LD_VAR 0 1
42176: PPUSH
42177: LD_VAR 0 4
42181: PPUSH
42182: CALL_OW 292
42186: IFFALSE 42200
// begin result := true ;
42188: LD_ADDR_VAR 0 3
42192: PUSH
42193: LD_INT 1
42195: ST_TO_ADDR
// exit ;
42196: POP
42197: POP
42198: GO 42204
// end ;
42200: GO 42169
42202: POP
42203: POP
// end ;
42204: LD_VAR 0 3
42208: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42209: LD_INT 0
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
// if not unit or not points then
42215: LD_VAR 0 1
42219: NOT
42220: IFTRUE 42229
42222: PUSH
42223: LD_VAR 0 2
42227: NOT
42228: OR
42229: IFFALSE 42233
// exit ;
42231: GO 42323
// dist := 99999 ;
42233: LD_ADDR_VAR 0 5
42237: PUSH
42238: LD_INT 99999
42240: ST_TO_ADDR
// for i in points do
42241: LD_ADDR_VAR 0 4
42245: PUSH
42246: LD_VAR 0 2
42250: PUSH
42251: FOR_IN
42252: IFFALSE 42321
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42254: LD_ADDR_VAR 0 6
42258: PUSH
42259: LD_VAR 0 1
42263: PPUSH
42264: LD_VAR 0 4
42268: PUSH
42269: LD_INT 1
42271: ARRAY
42272: PPUSH
42273: LD_VAR 0 4
42277: PUSH
42278: LD_INT 2
42280: ARRAY
42281: PPUSH
42282: CALL_OW 297
42286: ST_TO_ADDR
// if tmpDist < dist then
42287: LD_VAR 0 6
42291: PUSH
42292: LD_VAR 0 5
42296: LESS
42297: IFFALSE 42319
// begin result := i ;
42299: LD_ADDR_VAR 0 3
42303: PUSH
42304: LD_VAR 0 4
42308: ST_TO_ADDR
// dist := tmpDist ;
42309: LD_ADDR_VAR 0 5
42313: PUSH
42314: LD_VAR 0 6
42318: ST_TO_ADDR
// end ; end ;
42319: GO 42251
42321: POP
42322: POP
// end ;
42323: LD_VAR 0 3
42327: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42328: LD_INT 0
42330: PPUSH
// uc_side := side ;
42331: LD_ADDR_OWVAR 20
42335: PUSH
42336: LD_VAR 0 1
42340: ST_TO_ADDR
// uc_nation := 3 ;
42341: LD_ADDR_OWVAR 21
42345: PUSH
42346: LD_INT 3
42348: ST_TO_ADDR
// vc_chassis := 25 ;
42349: LD_ADDR_OWVAR 37
42353: PUSH
42354: LD_INT 25
42356: ST_TO_ADDR
// vc_engine := engine_siberite ;
42357: LD_ADDR_OWVAR 39
42361: PUSH
42362: LD_INT 3
42364: ST_TO_ADDR
// vc_control := control_computer ;
42365: LD_ADDR_OWVAR 38
42369: PUSH
42370: LD_INT 3
42372: ST_TO_ADDR
// vc_weapon := 59 ;
42373: LD_ADDR_OWVAR 40
42377: PUSH
42378: LD_INT 59
42380: ST_TO_ADDR
// result := CreateVehicle ;
42381: LD_ADDR_VAR 0 5
42385: PUSH
42386: CALL_OW 45
42390: ST_TO_ADDR
// SetDir ( result , d ) ;
42391: LD_VAR 0 5
42395: PPUSH
42396: LD_VAR 0 4
42400: PPUSH
42401: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42405: LD_VAR 0 5
42409: PPUSH
42410: LD_VAR 0 2
42414: PPUSH
42415: LD_VAR 0 3
42419: PPUSH
42420: LD_INT 0
42422: PPUSH
42423: CALL_OW 48
// end ;
42427: LD_VAR 0 5
42431: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42432: LD_INT 0
42434: PPUSH
42435: PPUSH
42436: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42437: LD_ADDR_VAR 0 2
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42460: LD_VAR 0 1
42464: NOT
42465: IFTRUE 42498
42467: PUSH
42468: LD_VAR 0 1
42472: PPUSH
42473: CALL_OW 264
42477: PUSH
42478: LD_INT 12
42480: PUSH
42481: LD_INT 51
42483: PUSH
42484: LD_INT 32
42486: PUSH
42487: LD_INT 89
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: IN
42496: NOT
42497: OR
42498: IFFALSE 42502
// exit ;
42500: GO 42600
// for i := 1 to 3 do
42502: LD_ADDR_VAR 0 3
42506: PUSH
42507: DOUBLE
42508: LD_INT 1
42510: DEC
42511: ST_TO_ADDR
42512: LD_INT 3
42514: PUSH
42515: FOR_TO
42516: IFFALSE 42598
// begin tmp := GetCargo ( cargo , i ) ;
42518: LD_ADDR_VAR 0 4
42522: PUSH
42523: LD_VAR 0 1
42527: PPUSH
42528: LD_VAR 0 3
42532: PPUSH
42533: CALL_OW 289
42537: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42538: LD_ADDR_VAR 0 2
42542: PUSH
42543: LD_VAR 0 2
42547: PPUSH
42548: LD_VAR 0 3
42552: PPUSH
42553: LD_VAR 0 4
42557: PPUSH
42558: CALL_OW 1
42562: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42563: LD_ADDR_VAR 0 2
42567: PUSH
42568: LD_VAR 0 2
42572: PPUSH
42573: LD_INT 4
42575: PPUSH
42576: LD_VAR 0 2
42580: PUSH
42581: LD_INT 4
42583: ARRAY
42584: PUSH
42585: LD_VAR 0 4
42589: PLUS
42590: PPUSH
42591: CALL_OW 1
42595: ST_TO_ADDR
// end ;
42596: GO 42515
42598: POP
42599: POP
// end ;
42600: LD_VAR 0 2
42604: RET
// export function Length ( array ) ; begin
42605: LD_INT 0
42607: PPUSH
// result := array + 0 ;
42608: LD_ADDR_VAR 0 2
42612: PUSH
42613: LD_VAR 0 1
42617: PUSH
42618: LD_INT 0
42620: PLUS
42621: ST_TO_ADDR
// end ;
42622: LD_VAR 0 2
42626: RET
// export function PrepareArray ( array ) ; begin
42627: LD_INT 0
42629: PPUSH
// result := array diff 0 ;
42630: LD_ADDR_VAR 0 2
42634: PUSH
42635: LD_VAR 0 1
42639: PUSH
42640: LD_INT 0
42642: DIFF
42643: ST_TO_ADDR
// if not result [ 1 ] then
42644: LD_VAR 0 2
42648: PUSH
42649: LD_INT 1
42651: ARRAY
42652: NOT
42653: IFFALSE 42673
// result := Delete ( result , 1 ) ;
42655: LD_ADDR_VAR 0 2
42659: PUSH
42660: LD_VAR 0 2
42664: PPUSH
42665: LD_INT 1
42667: PPUSH
42668: CALL_OW 3
42672: ST_TO_ADDR
// end ;
42673: LD_VAR 0 2
42677: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42678: LD_INT 0
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
// sibRocketRange := 25 ;
42684: LD_ADDR_VAR 0 6
42688: PUSH
42689: LD_INT 25
42691: ST_TO_ADDR
// result := false ;
42692: LD_ADDR_VAR 0 4
42696: PUSH
42697: LD_INT 0
42699: ST_TO_ADDR
// for i := 0 to 5 do
42700: LD_ADDR_VAR 0 5
42704: PUSH
42705: DOUBLE
42706: LD_INT 0
42708: DEC
42709: ST_TO_ADDR
42710: LD_INT 5
42712: PUSH
42713: FOR_TO
42714: IFFALSE 42781
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42716: LD_VAR 0 1
42720: PPUSH
42721: LD_VAR 0 5
42725: PPUSH
42726: LD_VAR 0 6
42730: PPUSH
42731: CALL_OW 272
42735: PPUSH
42736: LD_VAR 0 2
42740: PPUSH
42741: LD_VAR 0 5
42745: PPUSH
42746: LD_VAR 0 6
42750: PPUSH
42751: CALL_OW 273
42755: PPUSH
42756: LD_VAR 0 3
42760: PPUSH
42761: CALL_OW 309
42765: IFFALSE 42779
// begin result := true ;
42767: LD_ADDR_VAR 0 4
42771: PUSH
42772: LD_INT 1
42774: ST_TO_ADDR
// exit ;
42775: POP
42776: POP
42777: GO 42783
// end ;
42779: GO 42713
42781: POP
42782: POP
// end ;
42783: LD_VAR 0 4
42787: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42788: LD_INT 0
42790: PPUSH
42791: PPUSH
42792: PPUSH
// if btype = b_depot then
42793: LD_VAR 0 2
42797: PUSH
42798: LD_INT 0
42800: EQUAL
42801: IFFALSE 42813
// begin result := true ;
42803: LD_ADDR_VAR 0 3
42807: PUSH
42808: LD_INT 1
42810: ST_TO_ADDR
// exit ;
42811: GO 42933
// end ; pom := GetBase ( depot ) ;
42813: LD_ADDR_VAR 0 4
42817: PUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 274
42827: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42828: LD_ADDR_VAR 0 5
42832: PUSH
42833: LD_VAR 0 2
42837: PPUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 248
42847: PPUSH
42848: CALL_OW 450
42852: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42853: LD_ADDR_VAR 0 3
42857: PUSH
42858: LD_VAR 0 4
42862: PPUSH
42863: LD_INT 1
42865: PPUSH
42866: CALL_OW 275
42870: PUSH
42871: LD_VAR 0 5
42875: PUSH
42876: LD_INT 1
42878: ARRAY
42879: GREATEREQUAL
42880: IFFALSE 42906
42882: PUSH
42883: LD_VAR 0 4
42887: PPUSH
42888: LD_INT 2
42890: PPUSH
42891: CALL_OW 275
42895: PUSH
42896: LD_VAR 0 5
42900: PUSH
42901: LD_INT 2
42903: ARRAY
42904: GREATEREQUAL
42905: AND
42906: IFFALSE 42932
42908: PUSH
42909: LD_VAR 0 4
42913: PPUSH
42914: LD_INT 3
42916: PPUSH
42917: CALL_OW 275
42921: PUSH
42922: LD_VAR 0 5
42926: PUSH
42927: LD_INT 3
42929: ARRAY
42930: GREATEREQUAL
42931: AND
42932: ST_TO_ADDR
// end ;
42933: LD_VAR 0 3
42937: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42938: LD_INT 0
42940: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42941: LD_VAR 0 1
42945: PPUSH
42946: LD_VAR 0 2
42950: PPUSH
42951: LD_INT 0
42953: PPUSH
42954: LD_INT 0
42956: PPUSH
42957: LD_INT 1
42959: PPUSH
42960: LD_INT 0
42962: PPUSH
42963: CALL_OW 587
// end ;
42967: LD_VAR 0 3
42971: RET
// export function CenterOnNow ( unit ) ; begin
42972: LD_INT 0
42974: PPUSH
// result := IsInUnit ( unit ) ;
42975: LD_ADDR_VAR 0 2
42979: PUSH
42980: LD_VAR 0 1
42984: PPUSH
42985: CALL_OW 310
42989: ST_TO_ADDR
// if not result then
42990: LD_VAR 0 2
42994: NOT
42995: IFFALSE 43007
// result := unit ;
42997: LD_ADDR_VAR 0 2
43001: PUSH
43002: LD_VAR 0 1
43006: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43007: LD_VAR 0 1
43011: PPUSH
43012: CALL_OW 87
// end ;
43016: LD_VAR 0 2
43020: RET
// export function ComMoveHex ( unit , hex ) ; begin
43021: LD_INT 0
43023: PPUSH
// if not hex then
43024: LD_VAR 0 2
43028: NOT
43029: IFFALSE 43033
// exit ;
43031: GO 43086
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43033: LD_VAR 0 2
43037: PUSH
43038: LD_INT 1
43040: ARRAY
43041: PPUSH
43042: LD_VAR 0 2
43046: PUSH
43047: LD_INT 2
43049: ARRAY
43050: PPUSH
43051: CALL_OW 428
43055: IFFALSE 43059
// exit ;
43057: GO 43086
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43059: LD_VAR 0 1
43063: PPUSH
43064: LD_VAR 0 2
43068: PUSH
43069: LD_INT 1
43071: ARRAY
43072: PPUSH
43073: LD_VAR 0 2
43077: PUSH
43078: LD_INT 2
43080: ARRAY
43081: PPUSH
43082: CALL_OW 111
// end ;
43086: LD_VAR 0 3
43090: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43091: LD_INT 0
43093: PPUSH
43094: PPUSH
43095: PPUSH
// if not unit or not enemy then
43096: LD_VAR 0 1
43100: NOT
43101: IFTRUE 43110
43103: PUSH
43104: LD_VAR 0 2
43108: NOT
43109: OR
43110: IFFALSE 43114
// exit ;
43112: GO 43240
// x := GetX ( enemy ) ;
43114: LD_ADDR_VAR 0 4
43118: PUSH
43119: LD_VAR 0 2
43123: PPUSH
43124: CALL_OW 250
43128: ST_TO_ADDR
// y := GetY ( enemy ) ;
43129: LD_ADDR_VAR 0 5
43133: PUSH
43134: LD_VAR 0 2
43138: PPUSH
43139: CALL_OW 251
43143: ST_TO_ADDR
// if ValidHex ( x , y ) then
43144: LD_VAR 0 4
43148: PPUSH
43149: LD_VAR 0 5
43153: PPUSH
43154: CALL_OW 488
43158: IFFALSE 43240
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43160: LD_VAR 0 2
43164: PPUSH
43165: CALL_OW 247
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: IN
43180: IFTRUE 43203
43182: PUSH
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 255
43192: PPUSH
43193: LD_VAR 0 2
43197: PPUSH
43198: CALL_OW 292
43202: OR
43203: IFFALSE 43221
// ComAttackUnit ( unit , enemy ) else
43205: LD_VAR 0 1
43209: PPUSH
43210: LD_VAR 0 2
43214: PPUSH
43215: CALL_OW 115
43219: GO 43240
// ComAgressiveMove ( unit , x , y ) ;
43221: LD_VAR 0 1
43225: PPUSH
43226: LD_VAR 0 4
43230: PPUSH
43231: LD_VAR 0 5
43235: PPUSH
43236: CALL_OW 114
// end ;
43240: LD_VAR 0 3
43244: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43245: LD_INT 0
43247: PPUSH
43248: PPUSH
43249: PPUSH
// list := AreaToList ( area , 0 ) ;
43250: LD_ADDR_VAR 0 5
43254: PUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: LD_INT 0
43262: PPUSH
43263: CALL_OW 517
43267: ST_TO_ADDR
// if not list then
43268: LD_VAR 0 5
43272: NOT
43273: IFFALSE 43277
// exit ;
43275: GO 43407
// if all then
43277: LD_VAR 0 2
43281: IFFALSE 43369
// begin for i := 1 to list [ 1 ] do
43283: LD_ADDR_VAR 0 4
43287: PUSH
43288: DOUBLE
43289: LD_INT 1
43291: DEC
43292: ST_TO_ADDR
43293: LD_VAR 0 5
43297: PUSH
43298: LD_INT 1
43300: ARRAY
43301: PUSH
43302: FOR_TO
43303: IFFALSE 43365
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43305: LD_ADDR_VAR 0 3
43309: PUSH
43310: LD_VAR 0 3
43314: PPUSH
43315: LD_VAR 0 3
43319: PUSH
43320: LD_INT 1
43322: PLUS
43323: PPUSH
43324: LD_VAR 0 5
43328: PUSH
43329: LD_INT 1
43331: ARRAY
43332: PUSH
43333: LD_VAR 0 4
43337: ARRAY
43338: PUSH
43339: LD_VAR 0 5
43343: PUSH
43344: LD_INT 2
43346: ARRAY
43347: PUSH
43348: LD_VAR 0 4
43352: ARRAY
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PPUSH
43358: CALL_OW 1
43362: ST_TO_ADDR
43363: GO 43302
43365: POP
43366: POP
// exit ;
43367: GO 43407
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43369: LD_ADDR_VAR 0 3
43373: PUSH
43374: LD_VAR 0 5
43378: PUSH
43379: LD_INT 1
43381: ARRAY
43382: PUSH
43383: LD_INT 1
43385: ARRAY
43386: PUSH
43387: LD_VAR 0 5
43391: PUSH
43392: LD_INT 2
43394: ARRAY
43395: PUSH
43396: LD_INT 1
43398: ARRAY
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: EMPTY
43405: LIST
43406: ST_TO_ADDR
// end ;
43407: LD_VAR 0 3
43411: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43412: LD_INT 0
43414: PPUSH
43415: PPUSH
// list := AreaToList ( area , 0 ) ;
43416: LD_ADDR_VAR 0 4
43420: PUSH
43421: LD_VAR 0 1
43425: PPUSH
43426: LD_INT 0
43428: PPUSH
43429: CALL_OW 517
43433: ST_TO_ADDR
// if not list then
43434: LD_VAR 0 4
43438: NOT
43439: IFFALSE 43443
// exit ;
43441: GO 43484
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_VAR 0 4
43452: PUSH
43453: LD_INT 1
43455: ARRAY
43456: PUSH
43457: LD_INT 1
43459: ARRAY
43460: PUSH
43461: LD_VAR 0 4
43465: PUSH
43466: LD_INT 2
43468: ARRAY
43469: PUSH
43470: LD_INT 1
43472: ARRAY
43473: PUSH
43474: LD_VAR 0 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: LIST
43483: ST_TO_ADDR
// end ;
43484: LD_VAR 0 3
43488: RET
// export function First ( array ) ; begin
43489: LD_INT 0
43491: PPUSH
// if not array then
43492: LD_VAR 0 1
43496: NOT
43497: IFFALSE 43501
// exit ;
43499: GO 43515
// result := array [ 1 ] ;
43501: LD_ADDR_VAR 0 2
43505: PUSH
43506: LD_VAR 0 1
43510: PUSH
43511: LD_INT 1
43513: ARRAY
43514: ST_TO_ADDR
// end ;
43515: LD_VAR 0 2
43519: RET
// export function Last ( array ) ; begin
43520: LD_INT 0
43522: PPUSH
// if not array then
43523: LD_VAR 0 1
43527: NOT
43528: IFFALSE 43532
// exit ;
43530: GO 43548
// result := array [ array ] ;
43532: LD_ADDR_VAR 0 2
43536: PUSH
43537: LD_VAR 0 1
43541: PUSH
43542: LD_VAR 0 1
43546: ARRAY
43547: ST_TO_ADDR
// end ;
43548: LD_VAR 0 2
43552: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43553: LD_INT 0
43555: PPUSH
43556: PPUSH
// result := [ ] ;
43557: LD_ADDR_VAR 0 5
43561: PUSH
43562: EMPTY
43563: ST_TO_ADDR
// if not array then
43564: LD_VAR 0 1
43568: NOT
43569: IFFALSE 43573
// exit ;
43571: GO 43685
// for i := 1 to array do
43573: LD_ADDR_VAR 0 6
43577: PUSH
43578: DOUBLE
43579: LD_INT 1
43581: DEC
43582: ST_TO_ADDR
43583: LD_VAR 0 1
43587: PUSH
43588: FOR_TO
43589: IFFALSE 43683
// if array [ i ] [ index ] = value then
43591: LD_VAR 0 1
43595: PUSH
43596: LD_VAR 0 6
43600: ARRAY
43601: PUSH
43602: LD_VAR 0 2
43606: ARRAY
43607: PUSH
43608: LD_VAR 0 3
43612: EQUAL
43613: IFFALSE 43681
// begin if indexColumn then
43615: LD_VAR 0 4
43619: IFFALSE 43655
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43621: LD_ADDR_VAR 0 5
43625: PUSH
43626: LD_VAR 0 5
43630: PPUSH
43631: LD_VAR 0 1
43635: PUSH
43636: LD_VAR 0 6
43640: ARRAY
43641: PUSH
43642: LD_VAR 0 4
43646: ARRAY
43647: PPUSH
43648: CALL 38693 0 2
43652: ST_TO_ADDR
43653: GO 43681
// result := Join ( result , array [ i ] ) ;
43655: LD_ADDR_VAR 0 5
43659: PUSH
43660: LD_VAR 0 5
43664: PPUSH
43665: LD_VAR 0 1
43669: PUSH
43670: LD_VAR 0 6
43674: ARRAY
43675: PPUSH
43676: CALL 38693 0 2
43680: ST_TO_ADDR
// end ;
43681: GO 43588
43683: POP
43684: POP
// end ;
43685: LD_VAR 0 5
43689: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43690: LD_INT 0
43692: PPUSH
// if not vehicles or not parkingPoint then
43693: LD_VAR 0 1
43697: NOT
43698: IFTRUE 43707
43700: PUSH
43701: LD_VAR 0 2
43705: NOT
43706: OR
43707: IFFALSE 43711
// exit ;
43709: GO 43809
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43711: LD_ADDR_VAR 0 1
43715: PUSH
43716: LD_VAR 0 1
43720: PPUSH
43721: LD_INT 50
43723: PUSH
43724: EMPTY
43725: LIST
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: LD_INT 92
43732: PUSH
43733: LD_VAR 0 2
43737: PUSH
43738: LD_INT 1
43740: ARRAY
43741: PUSH
43742: LD_VAR 0 2
43746: PUSH
43747: LD_INT 2
43749: ARRAY
43750: PUSH
43751: LD_INT 8
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PPUSH
43768: CALL_OW 72
43772: ST_TO_ADDR
// if not vehicles then
43773: LD_VAR 0 1
43777: NOT
43778: IFFALSE 43782
// exit ;
43780: GO 43809
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43782: LD_VAR 0 1
43786: PPUSH
43787: LD_VAR 0 2
43791: PUSH
43792: LD_INT 1
43794: ARRAY
43795: PPUSH
43796: LD_VAR 0 2
43800: PUSH
43801: LD_INT 2
43803: ARRAY
43804: PPUSH
43805: CALL_OW 111
// end ;
43809: LD_VAR 0 3
43813: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43814: LD_INT 0
43816: PPUSH
43817: PPUSH
43818: PPUSH
// if not side or not area then
43819: LD_VAR 0 1
43823: NOT
43824: IFTRUE 43833
43826: PUSH
43827: LD_VAR 0 2
43831: NOT
43832: OR
43833: IFFALSE 43837
// exit ;
43835: GO 43956
// tmp := AreaToList ( area , 0 ) ;
43837: LD_ADDR_VAR 0 5
43841: PUSH
43842: LD_VAR 0 2
43846: PPUSH
43847: LD_INT 0
43849: PPUSH
43850: CALL_OW 517
43854: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43855: LD_ADDR_VAR 0 4
43859: PUSH
43860: DOUBLE
43861: LD_INT 1
43863: DEC
43864: ST_TO_ADDR
43865: LD_VAR 0 5
43869: PUSH
43870: LD_INT 1
43872: ARRAY
43873: PUSH
43874: FOR_TO
43875: IFFALSE 43954
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43877: LD_VAR 0 5
43881: PUSH
43882: LD_INT 1
43884: ARRAY
43885: PUSH
43886: LD_VAR 0 4
43890: ARRAY
43891: PPUSH
43892: LD_VAR 0 5
43896: PUSH
43897: LD_INT 2
43899: ARRAY
43900: PUSH
43901: LD_VAR 0 4
43905: ARRAY
43906: PPUSH
43907: CALL_OW 351
43911: IFFALSE 43952
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43913: LD_VAR 0 5
43917: PUSH
43918: LD_INT 1
43920: ARRAY
43921: PUSH
43922: LD_VAR 0 4
43926: ARRAY
43927: PPUSH
43928: LD_VAR 0 5
43932: PUSH
43933: LD_INT 2
43935: ARRAY
43936: PUSH
43937: LD_VAR 0 4
43941: ARRAY
43942: PPUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: CALL_OW 244
// end ;
43952: GO 43874
43954: POP
43955: POP
// end ;
43956: LD_VAR 0 3
43960: RET
// export function UniqueArray ( array ) ; var i ; begin
43961: LD_INT 0
43963: PPUSH
43964: PPUSH
// result := [ ] ;
43965: LD_ADDR_VAR 0 2
43969: PUSH
43970: EMPTY
43971: ST_TO_ADDR
// if not array then
43972: LD_VAR 0 1
43976: NOT
43977: IFFALSE 43981
// exit ;
43979: GO 44042
// for i := 1 to array do
43981: LD_ADDR_VAR 0 3
43985: PUSH
43986: DOUBLE
43987: LD_INT 1
43989: DEC
43990: ST_TO_ADDR
43991: LD_VAR 0 1
43995: PUSH
43996: FOR_TO
43997: IFFALSE 44040
// if not array [ i ] in result then
43999: LD_VAR 0 1
44003: PUSH
44004: LD_VAR 0 3
44008: ARRAY
44009: PUSH
44010: LD_VAR 0 2
44014: IN
44015: NOT
44016: IFFALSE 44038
// result := Join ( result , i ) ;
44018: LD_ADDR_VAR 0 2
44022: PUSH
44023: LD_VAR 0 2
44027: PPUSH
44028: LD_VAR 0 3
44032: PPUSH
44033: CALL 38693 0 2
44037: ST_TO_ADDR
44038: GO 43996
44040: POP
44041: POP
// end ;
44042: LD_VAR 0 2
44046: RET
