// starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Action ;
  11: CALL 16 0 0
// end ; end_of_file
  15: END
// export function Action ; var John , Roth , veh ; begin
  16: LD_INT 0
  18: PPUSH
  19: PPUSH
  20: PPUSH
  21: PPUSH
// Video ( true ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL 38304 0 1
// PlaceSeeing ( 58 , 14 , 7 , - 26 ) ;
  29: LD_INT 58
  31: PPUSH
  32: LD_INT 14
  34: PPUSH
  35: LD_INT 7
  37: PPUSH
  38: LD_INT 26
  40: NEG
  41: PPUSH
  42: CALL_OW 330
// uc_side := 7 ;
  46: LD_ADDR_OWVAR 20
  50: PUSH
  51: LD_INT 7
  53: ST_TO_ADDR
// uc_nation := 1 ;
  54: LD_ADDR_OWVAR 21
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// John := NewCharacter ( JMM ) ;
  62: LD_ADDR_VAR 0 2
  66: PUSH
  67: LD_STRING JMM
  69: PPUSH
  70: CALL_OW 25
  74: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
  75: LD_ADDR_VAR 0 3
  79: PUSH
  80: LD_STRING Roth
  82: PPUSH
  83: CALL_OW 25
  87: ST_TO_ADDR
// SetDir ( John , 1 ) ;
  88: LD_VAR 0 2
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: CALL_OW 233
// SetDir ( Roth , 4 ) ;
 100: LD_VAR 0 3
 104: PPUSH
 105: LD_INT 4
 107: PPUSH
 108: CALL_OW 233
// PlaceUnitXY ( John , 55 , 14 , false ) ;
 112: LD_VAR 0 2
 116: PPUSH
 117: LD_INT 55
 119: PPUSH
 120: LD_INT 14
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: CALL_OW 48
// PlaceUnitXY ( Roth , 58 , 14 , false ) ;
 130: LD_VAR 0 3
 134: PPUSH
 135: LD_INT 58
 137: PPUSH
 138: LD_INT 14
 140: PPUSH
 141: LD_INT 0
 143: PPUSH
 144: CALL_OW 48
// ComTurnUnit ( John , Roth ) ;
 148: LD_VAR 0 2
 152: PPUSH
 153: LD_VAR 0 3
 157: PPUSH
 158: CALL_OW 119
// ComTurnUnit ( Roth , John ) ;
 162: LD_VAR 0 3
 166: PPUSH
 167: LD_VAR 0 2
 171: PPUSH
 172: CALL_OW 119
// CenterNowonUnits ( [ John , Roth ] ) ;
 176: LD_VAR 0 2
 180: PUSH
 181: LD_VAR 0 3
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PPUSH
 190: CALL_OW 87
// wait ( 0 0$0.5 ) ;
 194: LD_INT 18
 196: PPUSH
 197: CALL_OW 67
// Say ( Roth , DStart-Roth-1 ) ;
 201: LD_VAR 0 3
 205: PPUSH
 206: LD_STRING DStart-Roth-1
 208: PPUSH
 209: CALL_OW 88
// Say ( John , DStart-JMM-1 ) ;
 213: LD_VAR 0 2
 217: PPUSH
 218: LD_STRING DStart-JMM-1
 220: PPUSH
 221: CALL_OW 88
// Say ( Roth , DStart-Roth-2 ) ;
 225: LD_VAR 0 3
 229: PPUSH
 230: LD_STRING DStart-Roth-2
 232: PPUSH
 233: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 237: LD_INT 18
 239: PPUSH
 240: CALL_OW 67
// Say ( John , DStart-JMM-2 ) ;
 244: LD_VAR 0 2
 248: PPUSH
 249: LD_STRING DStart-JMM-2
 251: PPUSH
 252: CALL_OW 88
// Say ( Roth , DStart-Roth-3 ) ;
 256: LD_VAR 0 3
 260: PPUSH
 261: LD_STRING DStart-Roth-3
 263: PPUSH
 264: CALL_OW 88
// Say ( John , DStart-JMM-3 ) ;
 268: LD_VAR 0 2
 272: PPUSH
 273: LD_STRING DStart-JMM-3
 275: PPUSH
 276: CALL_OW 88
// uc_side := 1 ;
 280: LD_ADDR_OWVAR 20
 284: PUSH
 285: LD_INT 1
 287: ST_TO_ADDR
// uc_nation := 1 ;
 288: LD_ADDR_OWVAR 21
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 296: LD_ADDR_OWVAR 37
 300: PUSH
 301: LD_INT 2
 303: ST_TO_ADDR
// vc_engine := engine_siberite ;
 304: LD_ADDR_OWVAR 39
 308: PUSH
 309: LD_INT 3
 311: ST_TO_ADDR
// vc_control := control_manual ;
 312: LD_ADDR_OWVAR 38
 316: PUSH
 317: LD_INT 1
 319: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 320: LD_ADDR_OWVAR 40
 324: PUSH
 325: LD_INT 4
 327: ST_TO_ADDR
// veh := CreateVehicle ;
 328: LD_ADDR_VAR 0 4
 332: PUSH
 333: CALL_OW 45
 337: ST_TO_ADDR
// PlaceUnitXY ( veh , 43 , 41 , false ) ;
 338: LD_VAR 0 4
 342: PPUSH
 343: LD_INT 43
 345: PPUSH
 346: LD_INT 41
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 48
// PrepareMechanic ( false , 10 ) ;
 356: LD_INT 0
 358: PPUSH
 359: LD_INT 10
 361: PPUSH
 362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
 366: CALL_OW 44
 370: PPUSH
 371: LD_VAR 0 4
 375: PPUSH
 376: CALL_OW 52
// ComMoveXY ( veh , 24 , 2 ) ;
 380: LD_VAR 0 4
 384: PPUSH
 385: LD_INT 24
 387: PPUSH
 388: LD_INT 2
 390: PPUSH
 391: CALL_OW 111
// Say ( Roth , DStart-Roth-4 ) ;
 395: LD_VAR 0 3
 399: PPUSH
 400: LD_STRING DStart-Roth-4
 402: PPUSH
 403: CALL_OW 88
// Say ( John , DStart-JMM-4 ) ;
 407: LD_VAR 0 2
 411: PPUSH
 412: LD_STRING DStart-JMM-4
 414: PPUSH
 415: CALL_OW 88
// Say ( Roth , DStart-Roth-5 ) ;
 419: LD_VAR 0 3
 423: PPUSH
 424: LD_STRING DStart-Roth-5
 426: PPUSH
 427: CALL_OW 88
// Say ( John , DStart-JMM-5 ) ;
 431: LD_VAR 0 2
 435: PPUSH
 436: LD_STRING DStart-JMM-5
 438: PPUSH
 439: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 443: LD_INT 10
 445: PPUSH
 446: CALL_OW 67
// Say ( Roth , DStart-Roth-6 ) ;
 450: LD_VAR 0 3
 454: PPUSH
 455: LD_STRING DStart-Roth-6
 457: PPUSH
 458: CALL_OW 88
// wait ( 0 0$0.1 ) ;
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 67
// ComMoveXY ( John , 32 , 14 ) ;
 469: LD_VAR 0 2
 473: PPUSH
 474: LD_INT 32
 476: PPUSH
 477: LD_INT 14
 479: PPUSH
 480: CALL_OW 111
// wait ( 0 0$2 ) ;
 484: LD_INT 70
 486: PPUSH
 487: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
 491: LD_INT 1
 493: PPUSH
 494: LD_STRING %_cont
 496: PPUSH
 497: CALL_OW 340
// end ;
 501: LD_VAR 0 1
 505: RET
// every 0 0$1 trigger HexInfo ( 24 , 2 ) do
 506: LD_INT 24
 508: PPUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 428
 516: IFFALSE 536
 518: GO 520
 520: DISABLE
// RemoveUnit ( HexInfo ( 24 , 2 ) ) ; end_of_file
 521: LD_INT 24
 523: PPUSH
 524: LD_INT 2
 526: PPUSH
 527: CALL_OW 428
 531: PPUSH
 532: CALL_OW 64
 536: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// if exist_mode then
 541: LD_VAR 0 2
 545: IFFALSE 591
// begin unit := CreateCharacter ( prefix & ident ) ;
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: LD_VAR 0 3
 556: PUSH
 557: LD_VAR 0 1
 561: STR
 562: PPUSH
 563: CALL_OW 34
 567: ST_TO_ADDR
// if unit then
 568: LD_VAR 0 5
 572: IFFALSE 589
// DeleteCharacters ( prefix & ident ) ;
 574: LD_VAR 0 3
 578: PUSH
 579: LD_VAR 0 1
 583: STR
 584: PPUSH
 585: CALL_OW 40
// end else
 589: GO 606
// unit := NewCharacter ( ident ) ;
 591: LD_ADDR_VAR 0 5
 595: PUSH
 596: LD_VAR 0 1
 600: PPUSH
 601: CALL_OW 25
 605: ST_TO_ADDR
// result := unit ;
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 5
 615: ST_TO_ADDR
// end ;
 616: LD_VAR 0 4
 620: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// if exist_mode then
 625: LD_VAR 0 2
 629: IFFALSE 654
// unit := CreateCharacter ( prefix & ident ) else
 631: LD_ADDR_VAR 0 5
 635: PUSH
 636: LD_VAR 0 3
 640: PUSH
 641: LD_VAR 0 1
 645: STR
 646: PPUSH
 647: CALL_OW 34
 651: ST_TO_ADDR
 652: GO 669
// unit := NewCharacter ( ident ) ;
 654: LD_ADDR_VAR 0 5
 658: PUSH
 659: LD_VAR 0 1
 663: PPUSH
 664: CALL_OW 25
 668: ST_TO_ADDR
// result := unit ;
 669: LD_ADDR_VAR 0 4
 673: PUSH
 674: LD_VAR 0 5
 678: ST_TO_ADDR
// end ;
 679: LD_VAR 0 4
 683: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 684: LD_INT 0
 686: PPUSH
 687: PPUSH
// if not side or not nation then
 688: LD_VAR 0 1
 692: NOT
 693: PUSH
 694: LD_VAR 0 2
 698: NOT
 699: OR
 700: IFFALSE 704
// exit ;
 702: GO 1472
// case nation of nation_american :
 704: LD_VAR 0 2
 708: PUSH
 709: LD_INT 1
 711: DOUBLE
 712: EQUAL
 713: IFTRUE 717
 715: GO 931
 717: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 718: LD_ADDR_VAR 0 4
 722: PUSH
 723: LD_INT 35
 725: PUSH
 726: LD_INT 45
 728: PUSH
 729: LD_INT 46
 731: PUSH
 732: LD_INT 47
 734: PUSH
 735: LD_INT 82
 737: PUSH
 738: LD_INT 83
 740: PUSH
 741: LD_INT 84
 743: PUSH
 744: LD_INT 85
 746: PUSH
 747: LD_INT 86
 749: PUSH
 750: LD_INT 1
 752: PUSH
 753: LD_INT 2
 755: PUSH
 756: LD_INT 6
 758: PUSH
 759: LD_INT 15
 761: PUSH
 762: LD_INT 16
 764: PUSH
 765: LD_INT 7
 767: PUSH
 768: LD_INT 12
 770: PUSH
 771: LD_INT 13
 773: PUSH
 774: LD_INT 10
 776: PUSH
 777: LD_INT 14
 779: PUSH
 780: LD_INT 20
 782: PUSH
 783: LD_INT 21
 785: PUSH
 786: LD_INT 22
 788: PUSH
 789: LD_INT 25
 791: PUSH
 792: LD_INT 32
 794: PUSH
 795: LD_INT 27
 797: PUSH
 798: LD_INT 36
 800: PUSH
 801: LD_INT 69
 803: PUSH
 804: LD_INT 39
 806: PUSH
 807: LD_INT 34
 809: PUSH
 810: LD_INT 40
 812: PUSH
 813: LD_INT 48
 815: PUSH
 816: LD_INT 49
 818: PUSH
 819: LD_INT 50
 821: PUSH
 822: LD_INT 51
 824: PUSH
 825: LD_INT 52
 827: PUSH
 828: LD_INT 53
 830: PUSH
 831: LD_INT 54
 833: PUSH
 834: LD_INT 55
 836: PUSH
 837: LD_INT 56
 839: PUSH
 840: LD_INT 57
 842: PUSH
 843: LD_INT 58
 845: PUSH
 846: LD_INT 59
 848: PUSH
 849: LD_INT 60
 851: PUSH
 852: LD_INT 61
 854: PUSH
 855: LD_INT 62
 857: PUSH
 858: LD_INT 80
 860: PUSH
 861: LD_INT 82
 863: PUSH
 864: LD_INT 83
 866: PUSH
 867: LD_INT 84
 869: PUSH
 870: LD_INT 85
 872: PUSH
 873: LD_INT 86
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: ST_TO_ADDR
 929: GO 1396
 931: LD_INT 2
 933: DOUBLE
 934: EQUAL
 935: IFTRUE 939
 937: GO 1165
 939: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 940: LD_ADDR_VAR 0 4
 944: PUSH
 945: LD_INT 35
 947: PUSH
 948: LD_INT 45
 950: PUSH
 951: LD_INT 46
 953: PUSH
 954: LD_INT 47
 956: PUSH
 957: LD_INT 82
 959: PUSH
 960: LD_INT 83
 962: PUSH
 963: LD_INT 84
 965: PUSH
 966: LD_INT 85
 968: PUSH
 969: LD_INT 87
 971: PUSH
 972: LD_INT 70
 974: PUSH
 975: LD_INT 1
 977: PUSH
 978: LD_INT 11
 980: PUSH
 981: LD_INT 3
 983: PUSH
 984: LD_INT 4
 986: PUSH
 987: LD_INT 5
 989: PUSH
 990: LD_INT 6
 992: PUSH
 993: LD_INT 15
 995: PUSH
 996: LD_INT 18
 998: PUSH
 999: LD_INT 7
1001: PUSH
1002: LD_INT 17
1004: PUSH
1005: LD_INT 8
1007: PUSH
1008: LD_INT 20
1010: PUSH
1011: LD_INT 21
1013: PUSH
1014: LD_INT 22
1016: PUSH
1017: LD_INT 72
1019: PUSH
1020: LD_INT 26
1022: PUSH
1023: LD_INT 69
1025: PUSH
1026: LD_INT 39
1028: PUSH
1029: LD_INT 40
1031: PUSH
1032: LD_INT 41
1034: PUSH
1035: LD_INT 42
1037: PUSH
1038: LD_INT 43
1040: PUSH
1041: LD_INT 48
1043: PUSH
1044: LD_INT 49
1046: PUSH
1047: LD_INT 50
1049: PUSH
1050: LD_INT 51
1052: PUSH
1053: LD_INT 52
1055: PUSH
1056: LD_INT 53
1058: PUSH
1059: LD_INT 54
1061: PUSH
1062: LD_INT 55
1064: PUSH
1065: LD_INT 56
1067: PUSH
1068: LD_INT 60
1070: PUSH
1071: LD_INT 61
1073: PUSH
1074: LD_INT 62
1076: PUSH
1077: LD_INT 66
1079: PUSH
1080: LD_INT 67
1082: PUSH
1083: LD_INT 68
1085: PUSH
1086: LD_INT 81
1088: PUSH
1089: LD_INT 82
1091: PUSH
1092: LD_INT 83
1094: PUSH
1095: LD_INT 84
1097: PUSH
1098: LD_INT 85
1100: PUSH
1101: LD_INT 87
1103: PUSH
1104: LD_INT 88
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: ST_TO_ADDR
1163: GO 1396
1165: LD_INT 3
1167: DOUBLE
1168: EQUAL
1169: IFTRUE 1173
1171: GO 1395
1173: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1174: LD_ADDR_VAR 0 4
1178: PUSH
1179: LD_INT 46
1181: PUSH
1182: LD_INT 47
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 2
1190: PUSH
1191: LD_INT 82
1193: PUSH
1194: LD_INT 83
1196: PUSH
1197: LD_INT 84
1199: PUSH
1200: LD_INT 85
1202: PUSH
1203: LD_INT 86
1205: PUSH
1206: LD_INT 11
1208: PUSH
1209: LD_INT 9
1211: PUSH
1212: LD_INT 20
1214: PUSH
1215: LD_INT 19
1217: PUSH
1218: LD_INT 21
1220: PUSH
1221: LD_INT 24
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_INT 25
1229: PUSH
1230: LD_INT 28
1232: PUSH
1233: LD_INT 29
1235: PUSH
1236: LD_INT 30
1238: PUSH
1239: LD_INT 31
1241: PUSH
1242: LD_INT 37
1244: PUSH
1245: LD_INT 38
1247: PUSH
1248: LD_INT 32
1250: PUSH
1251: LD_INT 27
1253: PUSH
1254: LD_INT 33
1256: PUSH
1257: LD_INT 69
1259: PUSH
1260: LD_INT 39
1262: PUSH
1263: LD_INT 34
1265: PUSH
1266: LD_INT 40
1268: PUSH
1269: LD_INT 71
1271: PUSH
1272: LD_INT 23
1274: PUSH
1275: LD_INT 44
1277: PUSH
1278: LD_INT 48
1280: PUSH
1281: LD_INT 49
1283: PUSH
1284: LD_INT 50
1286: PUSH
1287: LD_INT 51
1289: PUSH
1290: LD_INT 52
1292: PUSH
1293: LD_INT 53
1295: PUSH
1296: LD_INT 54
1298: PUSH
1299: LD_INT 55
1301: PUSH
1302: LD_INT 56
1304: PUSH
1305: LD_INT 57
1307: PUSH
1308: LD_INT 58
1310: PUSH
1311: LD_INT 59
1313: PUSH
1314: LD_INT 63
1316: PUSH
1317: LD_INT 64
1319: PUSH
1320: LD_INT 65
1322: PUSH
1323: LD_INT 82
1325: PUSH
1326: LD_INT 83
1328: PUSH
1329: LD_INT 84
1331: PUSH
1332: LD_INT 85
1334: PUSH
1335: LD_INT 86
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
1393: GO 1396
1395: POP
// if state > - 1 and state < 3 then
1396: LD_VAR 0 3
1400: PUSH
1401: LD_INT 1
1403: NEG
1404: GREATER
1405: PUSH
1406: LD_VAR 0 3
1410: PUSH
1411: LD_INT 3
1413: LESS
1414: AND
1415: IFFALSE 1472
// for i in result do
1417: LD_ADDR_VAR 0 5
1421: PUSH
1422: LD_VAR 0 4
1426: PUSH
1427: FOR_IN
1428: IFFALSE 1470
// if GetTech ( i , side ) <> state then
1430: LD_VAR 0 5
1434: PPUSH
1435: LD_VAR 0 1
1439: PPUSH
1440: CALL_OW 321
1444: PUSH
1445: LD_VAR 0 3
1449: NONEQUAL
1450: IFFALSE 1468
// result := result diff i ;
1452: LD_ADDR_VAR 0 4
1456: PUSH
1457: LD_VAR 0 4
1461: PUSH
1462: LD_VAR 0 5
1466: DIFF
1467: ST_TO_ADDR
1468: GO 1427
1470: POP
1471: POP
// end ;
1472: LD_VAR 0 4
1476: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1477: LD_INT 0
1479: PPUSH
1480: PPUSH
1481: PPUSH
// result := true ;
1482: LD_ADDR_VAR 0 3
1486: PUSH
1487: LD_INT 1
1489: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1490: LD_ADDR_VAR 0 5
1494: PUSH
1495: LD_VAR 0 2
1499: PPUSH
1500: CALL_OW 480
1504: ST_TO_ADDR
// if not tmp then
1505: LD_VAR 0 5
1509: NOT
1510: IFFALSE 1514
// exit ;
1512: GO 1563
// for i in tmp do
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_VAR 0 5
1523: PUSH
1524: FOR_IN
1525: IFFALSE 1561
// if GetTech ( i , side ) <> state_researched then
1527: LD_VAR 0 4
1531: PPUSH
1532: LD_VAR 0 1
1536: PPUSH
1537: CALL_OW 321
1541: PUSH
1542: LD_INT 2
1544: NONEQUAL
1545: IFFALSE 1559
// begin result := false ;
1547: LD_ADDR_VAR 0 3
1551: PUSH
1552: LD_INT 0
1554: ST_TO_ADDR
// exit ;
1555: POP
1556: POP
1557: GO 1563
// end ;
1559: GO 1524
1561: POP
1562: POP
// end ;
1563: LD_VAR 0 3
1567: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
1580: PPUSH
1581: PPUSH
1582: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1583: LD_VAR 0 1
1587: NOT
1588: PUSH
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 257
1598: PUSH
1599: LD_INT 9
1601: NONEQUAL
1602: OR
1603: IFFALSE 1607
// exit ;
1605: GO 2180
// side := GetSide ( unit ) ;
1607: LD_ADDR_VAR 0 9
1611: PUSH
1612: LD_VAR 0 1
1616: PPUSH
1617: CALL_OW 255
1621: ST_TO_ADDR
// tech_space := tech_spacanom ;
1622: LD_ADDR_VAR 0 12
1626: PUSH
1627: LD_INT 29
1629: ST_TO_ADDR
// tech_time := tech_taurad ;
1630: LD_ADDR_VAR 0 13
1634: PUSH
1635: LD_INT 28
1637: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1638: LD_ADDR_VAR 0 11
1642: PUSH
1643: LD_VAR 0 1
1647: PPUSH
1648: CALL_OW 310
1652: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1653: LD_VAR 0 11
1657: PPUSH
1658: CALL_OW 247
1662: PUSH
1663: LD_INT 2
1665: EQUAL
1666: IFFALSE 1670
// exit ;
1668: GO 2180
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1670: LD_ADDR_VAR 0 8
1674: PUSH
1675: LD_INT 81
1677: PUSH
1678: LD_VAR 0 9
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 3
1689: PUSH
1690: LD_INT 21
1692: PUSH
1693: LD_INT 3
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PPUSH
1708: CALL_OW 69
1712: ST_TO_ADDR
// if not tmp then
1713: LD_VAR 0 8
1717: NOT
1718: IFFALSE 1722
// exit ;
1720: GO 2180
// if in_unit then
1722: LD_VAR 0 11
1726: IFFALSE 1750
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1728: LD_ADDR_VAR 0 10
1732: PUSH
1733: LD_VAR 0 8
1737: PPUSH
1738: LD_VAR 0 11
1742: PPUSH
1743: CALL_OW 74
1747: ST_TO_ADDR
1748: GO 1770
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1750: LD_ADDR_VAR 0 10
1754: PUSH
1755: LD_VAR 0 8
1759: PPUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: CALL_OW 74
1769: ST_TO_ADDR
// if not enemy then
1770: LD_VAR 0 10
1774: NOT
1775: IFFALSE 1779
// exit ;
1777: GO 2180
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1779: LD_VAR 0 11
1783: PUSH
1784: LD_VAR 0 11
1788: PPUSH
1789: LD_VAR 0 10
1793: PPUSH
1794: CALL_OW 296
1798: PUSH
1799: LD_INT 13
1801: GREATER
1802: AND
1803: PUSH
1804: LD_VAR 0 1
1808: PPUSH
1809: LD_VAR 0 10
1813: PPUSH
1814: CALL_OW 296
1818: PUSH
1819: LD_INT 12
1821: GREATER
1822: OR
1823: IFFALSE 1827
// exit ;
1825: GO 2180
// missile := [ 1 ] ;
1827: LD_ADDR_VAR 0 14
1831: PUSH
1832: LD_INT 1
1834: PUSH
1835: EMPTY
1836: LIST
1837: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1838: LD_VAR 0 9
1842: PPUSH
1843: LD_VAR 0 12
1847: PPUSH
1848: CALL_OW 325
1852: IFFALSE 1881
// missile := Replace ( missile , missile + 1 , 2 ) ;
1854: LD_ADDR_VAR 0 14
1858: PUSH
1859: LD_VAR 0 14
1863: PPUSH
1864: LD_VAR 0 14
1868: PUSH
1869: LD_INT 1
1871: PLUS
1872: PPUSH
1873: LD_INT 2
1875: PPUSH
1876: CALL_OW 1
1880: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1881: LD_VAR 0 9
1885: PPUSH
1886: LD_VAR 0 13
1890: PPUSH
1891: CALL_OW 325
1895: PUSH
1896: LD_VAR 0 10
1900: PPUSH
1901: CALL_OW 255
1905: PPUSH
1906: LD_VAR 0 13
1910: PPUSH
1911: CALL_OW 325
1915: NOT
1916: AND
1917: IFFALSE 1946
// missile := Replace ( missile , missile + 1 , 3 ) ;
1919: LD_ADDR_VAR 0 14
1923: PUSH
1924: LD_VAR 0 14
1928: PPUSH
1929: LD_VAR 0 14
1933: PUSH
1934: LD_INT 1
1936: PLUS
1937: PPUSH
1938: LD_INT 3
1940: PPUSH
1941: CALL_OW 1
1945: ST_TO_ADDR
// if missile < 2 then
1946: LD_VAR 0 14
1950: PUSH
1951: LD_INT 2
1953: LESS
1954: IFFALSE 1958
// exit ;
1956: GO 2180
// x := GetX ( enemy ) ;
1958: LD_ADDR_VAR 0 4
1962: PUSH
1963: LD_VAR 0 10
1967: PPUSH
1968: CALL_OW 250
1972: ST_TO_ADDR
// y := GetY ( enemy ) ;
1973: LD_ADDR_VAR 0 5
1977: PUSH
1978: LD_VAR 0 10
1982: PPUSH
1983: CALL_OW 251
1987: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1988: LD_ADDR_VAR 0 6
1992: PUSH
1993: LD_VAR 0 4
1997: PUSH
1998: LD_INT 1
2000: NEG
2001: PPUSH
2002: LD_INT 1
2004: PPUSH
2005: CALL_OW 12
2009: PLUS
2010: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2011: LD_ADDR_VAR 0 7
2015: PUSH
2016: LD_VAR 0 5
2020: PUSH
2021: LD_INT 1
2023: NEG
2024: PPUSH
2025: LD_INT 1
2027: PPUSH
2028: CALL_OW 12
2032: PLUS
2033: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2034: LD_VAR 0 6
2038: PPUSH
2039: LD_VAR 0 7
2043: PPUSH
2044: CALL_OW 488
2048: NOT
2049: IFFALSE 2071
// begin _x := x ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 4
2060: ST_TO_ADDR
// _y := y ;
2061: LD_ADDR_VAR 0 7
2065: PUSH
2066: LD_VAR 0 5
2070: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: LD_INT 1
2078: PPUSH
2079: LD_VAR 0 14
2083: PPUSH
2084: CALL_OW 12
2088: ST_TO_ADDR
// case i of 1 :
2089: LD_VAR 0 3
2093: PUSH
2094: LD_INT 1
2096: DOUBLE
2097: EQUAL
2098: IFTRUE 2102
2100: GO 2119
2102: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2103: LD_VAR 0 1
2107: PPUSH
2108: LD_VAR 0 10
2112: PPUSH
2113: CALL_OW 115
2117: GO 2180
2119: LD_INT 2
2121: DOUBLE
2122: EQUAL
2123: IFTRUE 2127
2125: GO 2149
2127: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2128: LD_VAR 0 1
2132: PPUSH
2133: LD_VAR 0 6
2137: PPUSH
2138: LD_VAR 0 7
2142: PPUSH
2143: CALL_OW 153
2147: GO 2180
2149: LD_INT 3
2151: DOUBLE
2152: EQUAL
2153: IFTRUE 2157
2155: GO 2179
2157: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2158: LD_VAR 0 1
2162: PPUSH
2163: LD_VAR 0 6
2167: PPUSH
2168: LD_VAR 0 7
2172: PPUSH
2173: CALL_OW 154
2177: GO 2180
2179: POP
// end ;
2180: LD_VAR 0 2
2184: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2185: LD_INT 0
2187: PPUSH
2188: PPUSH
2189: PPUSH
2190: PPUSH
2191: PPUSH
2192: PPUSH
// if not unit or not building then
2193: LD_VAR 0 1
2197: NOT
2198: PUSH
2199: LD_VAR 0 2
2203: NOT
2204: OR
2205: IFFALSE 2209
// exit ;
2207: GO 2367
// x := GetX ( building ) ;
2209: LD_ADDR_VAR 0 5
2213: PUSH
2214: LD_VAR 0 2
2218: PPUSH
2219: CALL_OW 250
2223: ST_TO_ADDR
// y := GetY ( building ) ;
2224: LD_ADDR_VAR 0 6
2228: PUSH
2229: LD_VAR 0 2
2233: PPUSH
2234: CALL_OW 251
2238: ST_TO_ADDR
// for i = 0 to 5 do
2239: LD_ADDR_VAR 0 4
2243: PUSH
2244: DOUBLE
2245: LD_INT 0
2247: DEC
2248: ST_TO_ADDR
2249: LD_INT 5
2251: PUSH
2252: FOR_TO
2253: IFFALSE 2365
// begin _x := ShiftX ( x , i , 3 ) ;
2255: LD_ADDR_VAR 0 7
2259: PUSH
2260: LD_VAR 0 5
2264: PPUSH
2265: LD_VAR 0 4
2269: PPUSH
2270: LD_INT 3
2272: PPUSH
2273: CALL_OW 272
2277: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2278: LD_ADDR_VAR 0 8
2282: PUSH
2283: LD_VAR 0 6
2287: PPUSH
2288: LD_VAR 0 4
2292: PPUSH
2293: LD_INT 3
2295: PPUSH
2296: CALL_OW 273
2300: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2301: LD_VAR 0 7
2305: PPUSH
2306: LD_VAR 0 8
2310: PPUSH
2311: CALL_OW 488
2315: NOT
2316: IFFALSE 2320
// continue ;
2318: GO 2252
// if HexInfo ( _x , _y ) = 0 then
2320: LD_VAR 0 7
2324: PPUSH
2325: LD_VAR 0 8
2329: PPUSH
2330: CALL_OW 428
2334: PUSH
2335: LD_INT 0
2337: EQUAL
2338: IFFALSE 2363
// begin ComMoveXY ( unit , _x , _y ) ;
2340: LD_VAR 0 1
2344: PPUSH
2345: LD_VAR 0 7
2349: PPUSH
2350: LD_VAR 0 8
2354: PPUSH
2355: CALL_OW 111
// exit ;
2359: POP
2360: POP
2361: GO 2367
// end ; end ;
2363: GO 2252
2365: POP
2366: POP
// end ;
2367: LD_VAR 0 3
2371: RET
// export function ScanBase ( side , base_area ) ; begin
2372: LD_INT 0
2374: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2375: LD_ADDR_VAR 0 3
2379: PUSH
2380: LD_VAR 0 2
2384: PPUSH
2385: LD_INT 81
2387: PUSH
2388: LD_VAR 0 1
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PPUSH
2397: CALL_OW 70
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 3
2406: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
// result := false ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 0
2420: ST_TO_ADDR
// side := GetSide ( unit ) ;
2421: LD_ADDR_VAR 0 3
2425: PUSH
2426: LD_VAR 0 1
2430: PPUSH
2431: CALL_OW 255
2435: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2436: LD_ADDR_VAR 0 4
2440: PUSH
2441: LD_VAR 0 1
2445: PPUSH
2446: CALL_OW 248
2450: ST_TO_ADDR
// case nat of 1 :
2451: LD_VAR 0 4
2455: PUSH
2456: LD_INT 1
2458: DOUBLE
2459: EQUAL
2460: IFTRUE 2464
2462: GO 2475
2464: POP
// tech := tech_lassight ; 2 :
2465: LD_ADDR_VAR 0 5
2469: PUSH
2470: LD_INT 12
2472: ST_TO_ADDR
2473: GO 2514
2475: LD_INT 2
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2494
2483: POP
// tech := tech_mortar ; 3 :
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 41
2491: ST_TO_ADDR
2492: GO 2514
2494: LD_INT 3
2496: DOUBLE
2497: EQUAL
2498: IFTRUE 2502
2500: GO 2513
2502: POP
// tech := tech_bazooka ; end ;
2503: LD_ADDR_VAR 0 5
2507: PUSH
2508: LD_INT 44
2510: ST_TO_ADDR
2511: GO 2514
2513: POP
// if Researched ( side , tech ) then
2514: LD_VAR 0 3
2518: PPUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 325
2528: IFFALSE 2555
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2530: LD_ADDR_VAR 0 2
2534: PUSH
2535: LD_INT 5
2537: PUSH
2538: LD_INT 8
2540: PUSH
2541: LD_INT 9
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: PUSH
2549: LD_VAR 0 4
2553: ARRAY
2554: ST_TO_ADDR
// end ;
2555: LD_VAR 0 2
2559: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2560: LD_INT 0
2562: PPUSH
2563: PPUSH
2564: PPUSH
// if not mines then
2565: LD_VAR 0 2
2569: NOT
2570: IFFALSE 2574
// exit ;
2572: GO 2718
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2574: LD_ADDR_VAR 0 5
2578: PUSH
2579: LD_INT 81
2581: PUSH
2582: LD_VAR 0 1
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 3
2593: PUSH
2594: LD_INT 21
2596: PUSH
2597: LD_INT 3
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PPUSH
2612: CALL_OW 69
2616: ST_TO_ADDR
// for i in mines do
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 2
2626: PUSH
2627: FOR_IN
2628: IFFALSE 2716
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: LD_VAR 0 4
2643: PUSH
2644: LD_INT 2
2646: ARRAY
2647: PPUSH
2648: CALL_OW 458
2652: NOT
2653: IFFALSE 2657
// continue ;
2655: GO 2627
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2657: LD_VAR 0 4
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 2
2673: ARRAY
2674: PPUSH
2675: CALL_OW 428
2679: PUSH
2680: LD_VAR 0 5
2684: IN
2685: IFFALSE 2714
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2687: LD_VAR 0 4
2691: PUSH
2692: LD_INT 1
2694: ARRAY
2695: PPUSH
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 2
2703: ARRAY
2704: PPUSH
2705: LD_VAR 0 1
2709: PPUSH
2710: CALL_OW 456
// end ;
2714: GO 2627
2716: POP
2717: POP
// end ;
2718: LD_VAR 0 3
2722: RET
// export function Count ( array ) ; begin
2723: LD_INT 0
2725: PPUSH
// result := array + 0 ;
2726: LD_ADDR_VAR 0 2
2730: PUSH
2731: LD_VAR 0 1
2735: PUSH
2736: LD_INT 0
2738: PLUS
2739: ST_TO_ADDR
// end ;
2740: LD_VAR 0 2
2744: RET
// export function IsEmpty ( building ) ; begin
2745: LD_INT 0
2747: PPUSH
// if not building then
2748: LD_VAR 0 1
2752: NOT
2753: IFFALSE 2757
// exit ;
2755: GO 2800
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2757: LD_ADDR_VAR 0 2
2761: PUSH
2762: LD_VAR 0 1
2766: PUSH
2767: LD_INT 22
2769: PUSH
2770: LD_VAR 0 1
2774: PPUSH
2775: CALL_OW 255
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: LD_INT 58
2786: PUSH
2787: EMPTY
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 69
2798: IN
2799: ST_TO_ADDR
// end ;
2800: LD_VAR 0 2
2804: RET
// export function IsNotFull ( building ) ; var places ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// if not building then
2809: LD_VAR 0 1
2813: NOT
2814: IFFALSE 2818
// exit ;
2816: GO 2846
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_INT 3
2830: PUSH
2831: LD_INT 62
2833: PUSH
2834: EMPTY
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 72
2845: ST_TO_ADDR
// end ;
2846: LD_VAR 0 2
2850: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2851: LD_INT 0
2853: PPUSH
2854: PPUSH
2855: PPUSH
2856: PPUSH
// tmp := [ ] ;
2857: LD_ADDR_VAR 0 3
2861: PUSH
2862: EMPTY
2863: ST_TO_ADDR
// list := [ ] ;
2864: LD_ADDR_VAR 0 5
2868: PUSH
2869: EMPTY
2870: ST_TO_ADDR
// for i = 16 to 25 do
2871: LD_ADDR_VAR 0 4
2875: PUSH
2876: DOUBLE
2877: LD_INT 16
2879: DEC
2880: ST_TO_ADDR
2881: LD_INT 25
2883: PUSH
2884: FOR_TO
2885: IFFALSE 2958
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2887: LD_ADDR_VAR 0 3
2891: PUSH
2892: LD_VAR 0 3
2896: PUSH
2897: LD_INT 22
2899: PUSH
2900: LD_VAR 0 1
2904: PPUSH
2905: CALL_OW 255
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 91
2916: PUSH
2917: LD_VAR 0 1
2921: PUSH
2922: LD_INT 6
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 30
2932: PUSH
2933: LD_VAR 0 4
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: LIST
2946: PUSH
2947: EMPTY
2948: LIST
2949: PPUSH
2950: CALL_OW 69
2954: ADD
2955: ST_TO_ADDR
2956: GO 2884
2958: POP
2959: POP
// for i = 1 to tmp do
2960: LD_ADDR_VAR 0 4
2964: PUSH
2965: DOUBLE
2966: LD_INT 1
2968: DEC
2969: ST_TO_ADDR
2970: LD_VAR 0 3
2974: PUSH
2975: FOR_TO
2976: IFFALSE 3064
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2978: LD_ADDR_VAR 0 5
2982: PUSH
2983: LD_VAR 0 5
2987: PUSH
2988: LD_VAR 0 3
2992: PUSH
2993: LD_VAR 0 4
2997: ARRAY
2998: PPUSH
2999: CALL_OW 266
3003: PUSH
3004: LD_VAR 0 3
3008: PUSH
3009: LD_VAR 0 4
3013: ARRAY
3014: PPUSH
3015: CALL_OW 250
3019: PUSH
3020: LD_VAR 0 3
3024: PUSH
3025: LD_VAR 0 4
3029: ARRAY
3030: PPUSH
3031: CALL_OW 251
3035: PUSH
3036: LD_VAR 0 3
3040: PUSH
3041: LD_VAR 0 4
3045: ARRAY
3046: PPUSH
3047: CALL_OW 254
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: PUSH
3058: EMPTY
3059: LIST
3060: ADD
3061: ST_TO_ADDR
3062: GO 2975
3064: POP
3065: POP
// result := list ;
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: LD_VAR 0 5
3075: ST_TO_ADDR
// end ;
3076: LD_VAR 0 2
3080: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3081: LD_INT 0
3083: PPUSH
3084: PPUSH
3085: PPUSH
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
// if not factory then
3090: LD_VAR 0 1
3094: NOT
3095: IFFALSE 3099
// exit ;
3097: GO 3692
// if control = control_apeman then
3099: LD_VAR 0 4
3103: PUSH
3104: LD_INT 5
3106: EQUAL
3107: IFFALSE 3216
// begin tmp := UnitsInside ( factory ) ;
3109: LD_ADDR_VAR 0 8
3113: PUSH
3114: LD_VAR 0 1
3118: PPUSH
3119: CALL_OW 313
3123: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3124: LD_VAR 0 8
3128: PPUSH
3129: LD_INT 25
3131: PUSH
3132: LD_INT 12
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 72
3143: NOT
3144: IFFALSE 3154
// control := control_manual ;
3146: LD_ADDR_VAR 0 4
3150: PUSH
3151: LD_INT 1
3153: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3154: LD_ADDR_VAR 0 8
3158: PUSH
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL 2851 0 1
3168: ST_TO_ADDR
// if tmp then
3169: LD_VAR 0 8
3173: IFFALSE 3216
// begin for i in tmp do
3175: LD_ADDR_VAR 0 7
3179: PUSH
3180: LD_VAR 0 8
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3214
// if i [ 1 ] = b_ext_radio then
3188: LD_VAR 0 7
3192: PUSH
3193: LD_INT 1
3195: ARRAY
3196: PUSH
3197: LD_INT 22
3199: EQUAL
3200: IFFALSE 3212
// begin control := control_remote ;
3202: LD_ADDR_VAR 0 4
3206: PUSH
3207: LD_INT 2
3209: ST_TO_ADDR
// break ;
3210: GO 3214
// end ;
3212: GO 3185
3214: POP
3215: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3216: LD_VAR 0 1
3220: PPUSH
3221: LD_VAR 0 2
3225: PPUSH
3226: LD_VAR 0 3
3230: PPUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: LD_VAR 0 5
3240: PPUSH
3241: CALL_OW 448
3245: IFFALSE 3280
// begin result := [ chassis , engine , control , weapon ] ;
3247: LD_ADDR_VAR 0 6
3251: PUSH
3252: LD_VAR 0 2
3256: PUSH
3257: LD_VAR 0 3
3261: PUSH
3262: LD_VAR 0 4
3266: PUSH
3267: LD_VAR 0 5
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: ST_TO_ADDR
// exit ;
3278: GO 3692
// end ; _chassis := AvailableChassisList ( factory ) ;
3280: LD_ADDR_VAR 0 9
3284: PUSH
3285: LD_VAR 0 1
3289: PPUSH
3290: CALL_OW 475
3294: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3295: LD_ADDR_VAR 0 11
3299: PUSH
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 476
3309: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3310: LD_ADDR_VAR 0 12
3314: PUSH
3315: LD_VAR 0 1
3319: PPUSH
3320: CALL_OW 477
3324: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3325: LD_ADDR_VAR 0 10
3329: PUSH
3330: LD_VAR 0 1
3334: PPUSH
3335: CALL_OW 478
3339: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3340: LD_VAR 0 9
3344: NOT
3345: PUSH
3346: LD_VAR 0 11
3350: NOT
3351: OR
3352: PUSH
3353: LD_VAR 0 12
3357: NOT
3358: OR
3359: PUSH
3360: LD_VAR 0 10
3364: NOT
3365: OR
3366: IFFALSE 3401
// begin result := [ chassis , engine , control , weapon ] ;
3368: LD_ADDR_VAR 0 6
3372: PUSH
3373: LD_VAR 0 2
3377: PUSH
3378: LD_VAR 0 3
3382: PUSH
3383: LD_VAR 0 4
3387: PUSH
3388: LD_VAR 0 5
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: ST_TO_ADDR
// exit ;
3399: GO 3692
// end ; if not chassis in _chassis then
3401: LD_VAR 0 2
3405: PUSH
3406: LD_VAR 0 9
3410: IN
3411: NOT
3412: IFFALSE 3438
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: LD_VAR 0 9
3423: PUSH
3424: LD_INT 1
3426: PPUSH
3427: LD_VAR 0 9
3431: PPUSH
3432: CALL_OW 12
3436: ARRAY
3437: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_VAR 0 3
3447: PPUSH
3448: CALL 3697 0 2
3452: NOT
3453: IFFALSE 3512
// repeat engine := _engine [ 1 ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 11
3464: PUSH
3465: LD_INT 1
3467: ARRAY
3468: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3469: LD_ADDR_VAR 0 11
3473: PUSH
3474: LD_VAR 0 11
3478: PPUSH
3479: LD_INT 1
3481: PPUSH
3482: CALL_OW 3
3486: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3487: LD_VAR 0 2
3491: PPUSH
3492: LD_VAR 0 3
3496: PPUSH
3497: CALL 3697 0 2
3501: PUSH
3502: LD_VAR 0 11
3506: PUSH
3507: EMPTY
3508: EQUAL
3509: OR
3510: IFFALSE 3455
// if not control in _control then
3512: LD_VAR 0 4
3516: PUSH
3517: LD_VAR 0 12
3521: IN
3522: NOT
3523: IFFALSE 3549
// control := _control [ rand ( 1 , _control ) ] ;
3525: LD_ADDR_VAR 0 4
3529: PUSH
3530: LD_VAR 0 12
3534: PUSH
3535: LD_INT 1
3537: PPUSH
3538: LD_VAR 0 12
3542: PPUSH
3543: CALL_OW 12
3547: ARRAY
3548: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3549: LD_VAR 0 2
3553: PPUSH
3554: LD_VAR 0 5
3558: PPUSH
3559: CALL 3917 0 2
3563: NOT
3564: IFFALSE 3623
// repeat weapon := _weapon [ 1 ] ;
3566: LD_ADDR_VAR 0 5
3570: PUSH
3571: LD_VAR 0 10
3575: PUSH
3576: LD_INT 1
3578: ARRAY
3579: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3580: LD_ADDR_VAR 0 10
3584: PUSH
3585: LD_VAR 0 10
3589: PPUSH
3590: LD_INT 1
3592: PPUSH
3593: CALL_OW 3
3597: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3598: LD_VAR 0 2
3602: PPUSH
3603: LD_VAR 0 5
3607: PPUSH
3608: CALL 3917 0 2
3612: PUSH
3613: LD_VAR 0 10
3617: PUSH
3618: EMPTY
3619: EQUAL
3620: OR
3621: IFFALSE 3566
// result := [ ] ;
3623: LD_ADDR_VAR 0 6
3627: PUSH
3628: EMPTY
3629: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3630: LD_VAR 0 1
3634: PPUSH
3635: LD_VAR 0 2
3639: PPUSH
3640: LD_VAR 0 3
3644: PPUSH
3645: LD_VAR 0 4
3649: PPUSH
3650: LD_VAR 0 5
3654: PPUSH
3655: CALL_OW 448
3659: IFFALSE 3692
// result := [ chassis , engine , control , weapon ] ;
3661: LD_ADDR_VAR 0 6
3665: PUSH
3666: LD_VAR 0 2
3670: PUSH
3671: LD_VAR 0 3
3675: PUSH
3676: LD_VAR 0 4
3680: PUSH
3681: LD_VAR 0 5
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// end ;
3692: LD_VAR 0 6
3696: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3697: LD_INT 0
3699: PPUSH
// if not chassis or not engine then
3700: LD_VAR 0 1
3704: NOT
3705: PUSH
3706: LD_VAR 0 2
3710: NOT
3711: OR
3712: IFFALSE 3716
// exit ;
3714: GO 3912
// case engine of engine_solar :
3716: LD_VAR 0 2
3720: PUSH
3721: LD_INT 2
3723: DOUBLE
3724: EQUAL
3725: IFTRUE 3729
3727: GO 3767
3729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: LD_INT 11
3737: PUSH
3738: LD_INT 12
3740: PUSH
3741: LD_INT 13
3743: PUSH
3744: LD_INT 14
3746: PUSH
3747: LD_INT 1
3749: PUSH
3750: LD_INT 2
3752: PUSH
3753: LD_INT 3
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: ST_TO_ADDR
3765: GO 3896
3767: LD_INT 1
3769: DOUBLE
3770: EQUAL
3771: IFTRUE 3775
3773: GO 3837
3775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3776: LD_ADDR_VAR 0 3
3780: PUSH
3781: LD_INT 11
3783: PUSH
3784: LD_INT 12
3786: PUSH
3787: LD_INT 13
3789: PUSH
3790: LD_INT 14
3792: PUSH
3793: LD_INT 1
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 3
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: LD_INT 5
3807: PUSH
3808: LD_INT 21
3810: PUSH
3811: LD_INT 23
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 24
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: ST_TO_ADDR
3835: GO 3896
3837: LD_INT 3
3839: DOUBLE
3840: EQUAL
3841: IFTRUE 3845
3843: GO 3895
3845: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3846: LD_ADDR_VAR 0 3
3850: PUSH
3851: LD_INT 13
3853: PUSH
3854: LD_INT 14
3856: PUSH
3857: LD_INT 2
3859: PUSH
3860: LD_INT 3
3862: PUSH
3863: LD_INT 4
3865: PUSH
3866: LD_INT 5
3868: PUSH
3869: LD_INT 21
3871: PUSH
3872: LD_INT 22
3874: PUSH
3875: LD_INT 23
3877: PUSH
3878: LD_INT 24
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: ST_TO_ADDR
3893: GO 3896
3895: POP
// result := ( chassis in result ) ;
3896: LD_ADDR_VAR 0 3
3900: PUSH
3901: LD_VAR 0 1
3905: PUSH
3906: LD_VAR 0 3
3910: IN
3911: ST_TO_ADDR
// end ;
3912: LD_VAR 0 3
3916: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3917: LD_INT 0
3919: PPUSH
// if not chassis or not weapon then
3920: LD_VAR 0 1
3924: NOT
3925: PUSH
3926: LD_VAR 0 2
3930: NOT
3931: OR
3932: IFFALSE 3936
// exit ;
3934: GO 4996
// case weapon of us_machine_gun :
3936: LD_VAR 0 2
3940: PUSH
3941: LD_INT 2
3943: DOUBLE
3944: EQUAL
3945: IFTRUE 3949
3947: GO 3979
3949: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3950: LD_ADDR_VAR 0 3
3954: PUSH
3955: LD_INT 1
3957: PUSH
3958: LD_INT 2
3960: PUSH
3961: LD_INT 3
3963: PUSH
3964: LD_INT 4
3966: PUSH
3967: LD_INT 5
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: ST_TO_ADDR
3977: GO 4980
3979: LD_INT 3
3981: DOUBLE
3982: EQUAL
3983: IFTRUE 3987
3985: GO 4017
3987: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 2
3998: PUSH
3999: LD_INT 3
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: LD_INT 5
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: ST_TO_ADDR
4015: GO 4980
4017: LD_INT 11
4019: DOUBLE
4020: EQUAL
4021: IFTRUE 4025
4023: GO 4055
4025: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4026: LD_ADDR_VAR 0 3
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: LD_INT 2
4036: PUSH
4037: LD_INT 3
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: LD_INT 5
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: ST_TO_ADDR
4053: GO 4980
4055: LD_INT 4
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4089
4063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4064: LD_ADDR_VAR 0 3
4068: PUSH
4069: LD_INT 2
4071: PUSH
4072: LD_INT 3
4074: PUSH
4075: LD_INT 4
4077: PUSH
4078: LD_INT 5
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: ST_TO_ADDR
4087: GO 4980
4089: LD_INT 5
4091: DOUBLE
4092: EQUAL
4093: IFTRUE 4097
4095: GO 4123
4097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4098: LD_ADDR_VAR 0 3
4102: PUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 4
4111: PUSH
4112: LD_INT 5
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
4121: GO 4980
4123: LD_INT 9
4125: DOUBLE
4126: EQUAL
4127: IFTRUE 4131
4129: GO 4157
4131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4132: LD_ADDR_VAR 0 3
4136: PUSH
4137: LD_INT 2
4139: PUSH
4140: LD_INT 3
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: ST_TO_ADDR
4155: GO 4980
4157: LD_INT 7
4159: DOUBLE
4160: EQUAL
4161: IFTRUE 4165
4163: GO 4191
4165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4166: LD_ADDR_VAR 0 3
4170: PUSH
4171: LD_INT 2
4173: PUSH
4174: LD_INT 3
4176: PUSH
4177: LD_INT 4
4179: PUSH
4180: LD_INT 5
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
4189: GO 4980
4191: LD_INT 12
4193: DOUBLE
4194: EQUAL
4195: IFTRUE 4199
4197: GO 4225
4199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4200: LD_ADDR_VAR 0 3
4204: PUSH
4205: LD_INT 2
4207: PUSH
4208: LD_INT 3
4210: PUSH
4211: LD_INT 4
4213: PUSH
4214: LD_INT 5
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: ST_TO_ADDR
4223: GO 4980
4225: LD_INT 13
4227: DOUBLE
4228: EQUAL
4229: IFTRUE 4233
4231: GO 4259
4233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4234: LD_ADDR_VAR 0 3
4238: PUSH
4239: LD_INT 2
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: LD_INT 4
4247: PUSH
4248: LD_INT 5
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: ST_TO_ADDR
4257: GO 4980
4259: LD_INT 14
4261: DOUBLE
4262: EQUAL
4263: IFTRUE 4267
4265: GO 4285
4267: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4268: LD_ADDR_VAR 0 3
4272: PUSH
4273: LD_INT 4
4275: PUSH
4276: LD_INT 5
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: ST_TO_ADDR
4283: GO 4980
4285: LD_INT 6
4287: DOUBLE
4288: EQUAL
4289: IFTRUE 4293
4291: GO 4311
4293: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: LD_INT 5
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: ST_TO_ADDR
4309: GO 4980
4311: LD_INT 10
4313: DOUBLE
4314: EQUAL
4315: IFTRUE 4319
4317: GO 4337
4319: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4320: LD_ADDR_VAR 0 3
4324: PUSH
4325: LD_INT 4
4327: PUSH
4328: LD_INT 5
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: ST_TO_ADDR
4335: GO 4980
4337: LD_INT 22
4339: DOUBLE
4340: EQUAL
4341: IFTRUE 4345
4343: GO 4371
4345: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_INT 11
4353: PUSH
4354: LD_INT 12
4356: PUSH
4357: LD_INT 13
4359: PUSH
4360: LD_INT 14
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: ST_TO_ADDR
4369: GO 4980
4371: LD_INT 23
4373: DOUBLE
4374: EQUAL
4375: IFTRUE 4379
4377: GO 4405
4379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4380: LD_ADDR_VAR 0 3
4384: PUSH
4385: LD_INT 11
4387: PUSH
4388: LD_INT 12
4390: PUSH
4391: LD_INT 13
4393: PUSH
4394: LD_INT 14
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: ST_TO_ADDR
4403: GO 4980
4405: LD_INT 24
4407: DOUBLE
4408: EQUAL
4409: IFTRUE 4413
4411: GO 4439
4413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4414: LD_ADDR_VAR 0 3
4418: PUSH
4419: LD_INT 11
4421: PUSH
4422: LD_INT 12
4424: PUSH
4425: LD_INT 13
4427: PUSH
4428: LD_INT 14
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: ST_TO_ADDR
4437: GO 4980
4439: LD_INT 30
4441: DOUBLE
4442: EQUAL
4443: IFTRUE 4447
4445: GO 4473
4447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4448: LD_ADDR_VAR 0 3
4452: PUSH
4453: LD_INT 11
4455: PUSH
4456: LD_INT 12
4458: PUSH
4459: LD_INT 13
4461: PUSH
4462: LD_INT 14
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: ST_TO_ADDR
4471: GO 4980
4473: LD_INT 25
4475: DOUBLE
4476: EQUAL
4477: IFTRUE 4481
4479: GO 4499
4481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4482: LD_ADDR_VAR 0 3
4486: PUSH
4487: LD_INT 13
4489: PUSH
4490: LD_INT 14
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: ST_TO_ADDR
4497: GO 4980
4499: LD_INT 27
4501: DOUBLE
4502: EQUAL
4503: IFTRUE 4507
4505: GO 4525
4507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4508: LD_ADDR_VAR 0 3
4512: PUSH
4513: LD_INT 13
4515: PUSH
4516: LD_INT 14
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: ST_TO_ADDR
4523: GO 4980
4525: LD_INT 92
4527: DOUBLE
4528: EQUAL
4529: IFTRUE 4533
4531: GO 4559
4533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4534: LD_ADDR_VAR 0 3
4538: PUSH
4539: LD_INT 11
4541: PUSH
4542: LD_INT 12
4544: PUSH
4545: LD_INT 13
4547: PUSH
4548: LD_INT 14
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: ST_TO_ADDR
4557: GO 4980
4559: LD_INT 28
4561: DOUBLE
4562: EQUAL
4563: IFTRUE 4567
4565: GO 4585
4567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: LD_INT 13
4575: PUSH
4576: LD_INT 14
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: ST_TO_ADDR
4583: GO 4980
4585: LD_INT 29
4587: DOUBLE
4588: EQUAL
4589: IFTRUE 4593
4591: GO 4611
4593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4594: LD_ADDR_VAR 0 3
4598: PUSH
4599: LD_INT 13
4601: PUSH
4602: LD_INT 14
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: ST_TO_ADDR
4609: GO 4980
4611: LD_INT 31
4613: DOUBLE
4614: EQUAL
4615: IFTRUE 4619
4617: GO 4637
4619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_INT 13
4627: PUSH
4628: LD_INT 14
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: ST_TO_ADDR
4635: GO 4980
4637: LD_INT 26
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4663
4645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_INT 13
4653: PUSH
4654: LD_INT 14
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: ST_TO_ADDR
4661: GO 4980
4663: LD_INT 42
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4697
4671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4672: LD_ADDR_VAR 0 3
4676: PUSH
4677: LD_INT 21
4679: PUSH
4680: LD_INT 22
4682: PUSH
4683: LD_INT 23
4685: PUSH
4686: LD_INT 24
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: ST_TO_ADDR
4695: GO 4980
4697: LD_INT 43
4699: DOUBLE
4700: EQUAL
4701: IFTRUE 4705
4703: GO 4731
4705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: LD_INT 21
4713: PUSH
4714: LD_INT 22
4716: PUSH
4717: LD_INT 23
4719: PUSH
4720: LD_INT 24
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: ST_TO_ADDR
4729: GO 4980
4731: LD_INT 44
4733: DOUBLE
4734: EQUAL
4735: IFTRUE 4739
4737: GO 4765
4739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4740: LD_ADDR_VAR 0 3
4744: PUSH
4745: LD_INT 21
4747: PUSH
4748: LD_INT 22
4750: PUSH
4751: LD_INT 23
4753: PUSH
4754: LD_INT 24
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: ST_TO_ADDR
4763: GO 4980
4765: LD_INT 45
4767: DOUBLE
4768: EQUAL
4769: IFTRUE 4773
4771: GO 4799
4773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4774: LD_ADDR_VAR 0 3
4778: PUSH
4779: LD_INT 21
4781: PUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 23
4787: PUSH
4788: LD_INT 24
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: ST_TO_ADDR
4797: GO 4980
4799: LD_INT 49
4801: DOUBLE
4802: EQUAL
4803: IFTRUE 4807
4805: GO 4833
4807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4808: LD_ADDR_VAR 0 3
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 22
4818: PUSH
4819: LD_INT 23
4821: PUSH
4822: LD_INT 24
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: ST_TO_ADDR
4831: GO 4980
4833: LD_INT 51
4835: DOUBLE
4836: EQUAL
4837: IFTRUE 4841
4839: GO 4867
4841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4842: LD_ADDR_VAR 0 3
4846: PUSH
4847: LD_INT 21
4849: PUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 23
4855: PUSH
4856: LD_INT 24
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: ST_TO_ADDR
4865: GO 4980
4867: LD_INT 52
4869: DOUBLE
4870: EQUAL
4871: IFTRUE 4875
4873: GO 4901
4875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 22
4886: PUSH
4887: LD_INT 23
4889: PUSH
4890: LD_INT 24
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: ST_TO_ADDR
4899: GO 4980
4901: LD_INT 53
4903: DOUBLE
4904: EQUAL
4905: IFTRUE 4909
4907: GO 4927
4909: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4910: LD_ADDR_VAR 0 3
4914: PUSH
4915: LD_INT 23
4917: PUSH
4918: LD_INT 24
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: ST_TO_ADDR
4925: GO 4980
4927: LD_INT 46
4929: DOUBLE
4930: EQUAL
4931: IFTRUE 4935
4933: GO 4953
4935: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4936: LD_ADDR_VAR 0 3
4940: PUSH
4941: LD_INT 23
4943: PUSH
4944: LD_INT 24
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: ST_TO_ADDR
4951: GO 4980
4953: LD_INT 47
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4979
4961: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 23
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 4980
4979: POP
// result := ( chassis in result ) ;
4980: LD_ADDR_VAR 0 3
4984: PUSH
4985: LD_VAR 0 1
4989: PUSH
4990: LD_VAR 0 3
4994: IN
4995: ST_TO_ADDR
// end ;
4996: LD_VAR 0 3
5000: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5001: LD_INT 0
5003: PPUSH
5004: PPUSH
5005: PPUSH
5006: PPUSH
5007: PPUSH
5008: PPUSH
5009: PPUSH
// result := array ;
5010: LD_ADDR_VAR 0 5
5014: PUSH
5015: LD_VAR 0 1
5019: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5020: LD_VAR 0 1
5024: NOT
5025: PUSH
5026: LD_VAR 0 2
5030: NOT
5031: OR
5032: PUSH
5033: LD_VAR 0 3
5037: NOT
5038: OR
5039: PUSH
5040: LD_VAR 0 2
5044: PUSH
5045: LD_VAR 0 1
5049: GREATER
5050: OR
5051: PUSH
5052: LD_VAR 0 3
5056: PUSH
5057: LD_VAR 0 1
5061: GREATER
5062: OR
5063: IFFALSE 5067
// exit ;
5065: GO 5363
// if direction then
5067: LD_VAR 0 4
5071: IFFALSE 5135
// begin d := 1 ;
5073: LD_ADDR_VAR 0 9
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// if i_from > i_to then
5081: LD_VAR 0 2
5085: PUSH
5086: LD_VAR 0 3
5090: GREATER
5091: IFFALSE 5117
// length := ( array - i_from ) + i_to else
5093: LD_ADDR_VAR 0 11
5097: PUSH
5098: LD_VAR 0 1
5102: PUSH
5103: LD_VAR 0 2
5107: MINUS
5108: PUSH
5109: LD_VAR 0 3
5113: PLUS
5114: ST_TO_ADDR
5115: GO 5133
// length := i_to - i_from ;
5117: LD_ADDR_VAR 0 11
5121: PUSH
5122: LD_VAR 0 3
5126: PUSH
5127: LD_VAR 0 2
5131: MINUS
5132: ST_TO_ADDR
// end else
5133: GO 5196
// begin d := - 1 ;
5135: LD_ADDR_VAR 0 9
5139: PUSH
5140: LD_INT 1
5142: NEG
5143: ST_TO_ADDR
// if i_from > i_to then
5144: LD_VAR 0 2
5148: PUSH
5149: LD_VAR 0 3
5153: GREATER
5154: IFFALSE 5174
// length := i_from - i_to else
5156: LD_ADDR_VAR 0 11
5160: PUSH
5161: LD_VAR 0 2
5165: PUSH
5166: LD_VAR 0 3
5170: MINUS
5171: ST_TO_ADDR
5172: GO 5196
// length := ( array - i_to ) + i_from ;
5174: LD_ADDR_VAR 0 11
5178: PUSH
5179: LD_VAR 0 1
5183: PUSH
5184: LD_VAR 0 3
5188: MINUS
5189: PUSH
5190: LD_VAR 0 2
5194: PLUS
5195: ST_TO_ADDR
// end ; if not length then
5196: LD_VAR 0 11
5200: NOT
5201: IFFALSE 5205
// exit ;
5203: GO 5363
// tmp := array ;
5205: LD_ADDR_VAR 0 10
5209: PUSH
5210: LD_VAR 0 1
5214: ST_TO_ADDR
// for i = 1 to length do
5215: LD_ADDR_VAR 0 6
5219: PUSH
5220: DOUBLE
5221: LD_INT 1
5223: DEC
5224: ST_TO_ADDR
5225: LD_VAR 0 11
5229: PUSH
5230: FOR_TO
5231: IFFALSE 5351
// begin for j = 1 to array do
5233: LD_ADDR_VAR 0 7
5237: PUSH
5238: DOUBLE
5239: LD_INT 1
5241: DEC
5242: ST_TO_ADDR
5243: LD_VAR 0 1
5247: PUSH
5248: FOR_TO
5249: IFFALSE 5337
// begin k := j + d ;
5251: LD_ADDR_VAR 0 8
5255: PUSH
5256: LD_VAR 0 7
5260: PUSH
5261: LD_VAR 0 9
5265: PLUS
5266: ST_TO_ADDR
// if k > array then
5267: LD_VAR 0 8
5271: PUSH
5272: LD_VAR 0 1
5276: GREATER
5277: IFFALSE 5287
// k := 1 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_INT 1
5286: ST_TO_ADDR
// if not k then
5287: LD_VAR 0 8
5291: NOT
5292: IFFALSE 5304
// k := array ;
5294: LD_ADDR_VAR 0 8
5298: PUSH
5299: LD_VAR 0 1
5303: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5304: LD_ADDR_VAR 0 10
5308: PUSH
5309: LD_VAR 0 10
5313: PPUSH
5314: LD_VAR 0 8
5318: PPUSH
5319: LD_VAR 0 1
5323: PUSH
5324: LD_VAR 0 7
5328: ARRAY
5329: PPUSH
5330: CALL_OW 1
5334: ST_TO_ADDR
// end ;
5335: GO 5248
5337: POP
5338: POP
// array := tmp ;
5339: LD_ADDR_VAR 0 1
5343: PUSH
5344: LD_VAR 0 10
5348: ST_TO_ADDR
// end ;
5349: GO 5230
5351: POP
5352: POP
// result := array ;
5353: LD_ADDR_VAR 0 5
5357: PUSH
5358: LD_VAR 0 1
5362: ST_TO_ADDR
// end ;
5363: LD_VAR 0 5
5367: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5368: LD_INT 0
5370: PPUSH
5371: PPUSH
// result := 0 ;
5372: LD_ADDR_VAR 0 3
5376: PUSH
5377: LD_INT 0
5379: ST_TO_ADDR
// if not array or not value in array then
5380: LD_VAR 0 1
5384: NOT
5385: PUSH
5386: LD_VAR 0 2
5390: PUSH
5391: LD_VAR 0 1
5395: IN
5396: NOT
5397: OR
5398: IFFALSE 5402
// exit ;
5400: GO 5456
// for i = 1 to array do
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: DOUBLE
5408: LD_INT 1
5410: DEC
5411: ST_TO_ADDR
5412: LD_VAR 0 1
5416: PUSH
5417: FOR_TO
5418: IFFALSE 5454
// if value = array [ i ] then
5420: LD_VAR 0 2
5424: PUSH
5425: LD_VAR 0 1
5429: PUSH
5430: LD_VAR 0 4
5434: ARRAY
5435: EQUAL
5436: IFFALSE 5452
// begin result := i ;
5438: LD_ADDR_VAR 0 3
5442: PUSH
5443: LD_VAR 0 4
5447: ST_TO_ADDR
// exit ;
5448: POP
5449: POP
5450: GO 5456
// end ;
5452: GO 5417
5454: POP
5455: POP
// end ;
5456: LD_VAR 0 3
5460: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5461: LD_INT 0
5463: PPUSH
// vc_chassis := chassis ;
5464: LD_ADDR_OWVAR 37
5468: PUSH
5469: LD_VAR 0 1
5473: ST_TO_ADDR
// vc_engine := engine ;
5474: LD_ADDR_OWVAR 39
5478: PUSH
5479: LD_VAR 0 2
5483: ST_TO_ADDR
// vc_control := control ;
5484: LD_ADDR_OWVAR 38
5488: PUSH
5489: LD_VAR 0 3
5493: ST_TO_ADDR
// vc_weapon := weapon ;
5494: LD_ADDR_OWVAR 40
5498: PUSH
5499: LD_VAR 0 4
5503: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5504: LD_ADDR_OWVAR 41
5508: PUSH
5509: LD_VAR 0 5
5513: ST_TO_ADDR
// end ;
5514: LD_VAR 0 6
5518: RET
// export function WantPlant ( unit ) ; var task ; begin
5519: LD_INT 0
5521: PPUSH
5522: PPUSH
// result := false ;
5523: LD_ADDR_VAR 0 2
5527: PUSH
5528: LD_INT 0
5530: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5531: LD_ADDR_VAR 0 3
5535: PUSH
5536: LD_VAR 0 1
5540: PPUSH
5541: CALL_OW 437
5545: ST_TO_ADDR
// if task then
5546: LD_VAR 0 3
5550: IFFALSE 5578
// if task [ 1 ] [ 1 ] = p then
5552: LD_VAR 0 3
5556: PUSH
5557: LD_INT 1
5559: ARRAY
5560: PUSH
5561: LD_INT 1
5563: ARRAY
5564: PUSH
5565: LD_STRING p
5567: EQUAL
5568: IFFALSE 5578
// result := true ;
5570: LD_ADDR_VAR 0 2
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// end ;
5578: LD_VAR 0 2
5582: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5583: LD_INT 0
5585: PPUSH
5586: PPUSH
5587: PPUSH
5588: PPUSH
// if pos < 1 then
5589: LD_VAR 0 2
5593: PUSH
5594: LD_INT 1
5596: LESS
5597: IFFALSE 5601
// exit ;
5599: GO 5904
// if pos = 1 then
5601: LD_VAR 0 2
5605: PUSH
5606: LD_INT 1
5608: EQUAL
5609: IFFALSE 5642
// result := Replace ( arr , pos [ 1 ] , value ) else
5611: LD_ADDR_VAR 0 4
5615: PUSH
5616: LD_VAR 0 1
5620: PPUSH
5621: LD_VAR 0 2
5625: PUSH
5626: LD_INT 1
5628: ARRAY
5629: PPUSH
5630: LD_VAR 0 3
5634: PPUSH
5635: CALL_OW 1
5639: ST_TO_ADDR
5640: GO 5904
// begin tmp := arr ;
5642: LD_ADDR_VAR 0 6
5646: PUSH
5647: LD_VAR 0 1
5651: ST_TO_ADDR
// s_arr := [ tmp ] ;
5652: LD_ADDR_VAR 0 7
5656: PUSH
5657: LD_VAR 0 6
5661: PUSH
5662: EMPTY
5663: LIST
5664: ST_TO_ADDR
// for i = 1 to pos - 1 do
5665: LD_ADDR_VAR 0 5
5669: PUSH
5670: DOUBLE
5671: LD_INT 1
5673: DEC
5674: ST_TO_ADDR
5675: LD_VAR 0 2
5679: PUSH
5680: LD_INT 1
5682: MINUS
5683: PUSH
5684: FOR_TO
5685: IFFALSE 5730
// begin tmp := tmp [ pos [ i ] ] ;
5687: LD_ADDR_VAR 0 6
5691: PUSH
5692: LD_VAR 0 6
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: LD_VAR 0 5
5706: ARRAY
5707: ARRAY
5708: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5709: LD_ADDR_VAR 0 7
5713: PUSH
5714: LD_VAR 0 7
5718: PUSH
5719: LD_VAR 0 6
5723: PUSH
5724: EMPTY
5725: LIST
5726: ADD
5727: ST_TO_ADDR
// end ;
5728: GO 5684
5730: POP
5731: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5732: LD_ADDR_VAR 0 6
5736: PUSH
5737: LD_VAR 0 6
5741: PPUSH
5742: LD_VAR 0 2
5746: PUSH
5747: LD_VAR 0 2
5751: ARRAY
5752: PPUSH
5753: LD_VAR 0 3
5757: PPUSH
5758: CALL_OW 1
5762: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_VAR 0 7
5777: PPUSH
5778: LD_VAR 0 6
5782: PPUSH
5783: CALL_OW 1
5787: ST_TO_ADDR
// for i = s_arr downto 2 do
5788: LD_ADDR_VAR 0 5
5792: PUSH
5793: DOUBLE
5794: LD_VAR 0 7
5798: INC
5799: ST_TO_ADDR
5800: LD_INT 2
5802: PUSH
5803: FOR_DOWNTO
5804: IFFALSE 5888
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5806: LD_ADDR_VAR 0 6
5810: PUSH
5811: LD_VAR 0 7
5815: PUSH
5816: LD_VAR 0 5
5820: PUSH
5821: LD_INT 1
5823: MINUS
5824: ARRAY
5825: PPUSH
5826: LD_VAR 0 2
5830: PUSH
5831: LD_VAR 0 5
5835: PUSH
5836: LD_INT 1
5838: MINUS
5839: ARRAY
5840: PPUSH
5841: LD_VAR 0 7
5845: PUSH
5846: LD_VAR 0 5
5850: ARRAY
5851: PPUSH
5852: CALL_OW 1
5856: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_VAR 0 7
5866: PPUSH
5867: LD_VAR 0 5
5871: PUSH
5872: LD_INT 1
5874: MINUS
5875: PPUSH
5876: LD_VAR 0 6
5880: PPUSH
5881: CALL_OW 1
5885: ST_TO_ADDR
// end ;
5886: GO 5803
5888: POP
5889: POP
// result := s_arr [ 1 ] ;
5890: LD_ADDR_VAR 0 4
5894: PUSH
5895: LD_VAR 0 7
5899: PUSH
5900: LD_INT 1
5902: ARRAY
5903: ST_TO_ADDR
// end ; end ;
5904: LD_VAR 0 4
5908: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5909: LD_INT 0
5911: PPUSH
5912: PPUSH
// if not list then
5913: LD_VAR 0 1
5917: NOT
5918: IFFALSE 5922
// exit ;
5920: GO 6013
// i := list [ pos1 ] ;
5922: LD_ADDR_VAR 0 5
5926: PUSH
5927: LD_VAR 0 1
5931: PUSH
5932: LD_VAR 0 2
5936: ARRAY
5937: ST_TO_ADDR
// if not i then
5938: LD_VAR 0 5
5942: NOT
5943: IFFALSE 5947
// exit ;
5945: GO 6013
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5947: LD_ADDR_VAR 0 1
5951: PUSH
5952: LD_VAR 0 1
5956: PPUSH
5957: LD_VAR 0 2
5961: PPUSH
5962: LD_VAR 0 1
5966: PUSH
5967: LD_VAR 0 3
5971: ARRAY
5972: PPUSH
5973: CALL_OW 1
5977: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5978: LD_ADDR_VAR 0 1
5982: PUSH
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_VAR 0 3
5992: PPUSH
5993: LD_VAR 0 5
5997: PPUSH
5998: CALL_OW 1
6002: ST_TO_ADDR
// result := list ;
6003: LD_ADDR_VAR 0 4
6007: PUSH
6008: LD_VAR 0 1
6012: ST_TO_ADDR
// end ;
6013: LD_VAR 0 4
6017: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6018: LD_INT 0
6020: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6021: LD_ADDR_VAR 0 5
6025: PUSH
6026: LD_VAR 0 1
6030: PPUSH
6031: CALL_OW 250
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 251
6045: PPUSH
6046: LD_VAR 0 2
6050: PPUSH
6051: LD_VAR 0 3
6055: PPUSH
6056: LD_VAR 0 4
6060: PPUSH
6061: CALL 6439 0 5
6065: ST_TO_ADDR
// end ;
6066: LD_VAR 0 5
6070: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6071: LD_INT 0
6073: PPUSH
6074: PPUSH
6075: PPUSH
6076: PPUSH
// if not list or not unit then
6077: LD_VAR 0 2
6081: NOT
6082: PUSH
6083: LD_VAR 0 1
6087: NOT
6088: OR
6089: IFFALSE 6093
// exit ;
6091: GO 6434
// result := [ ] ;
6093: LD_ADDR_VAR 0 5
6097: PUSH
6098: EMPTY
6099: ST_TO_ADDR
// for i in list do
6100: LD_ADDR_VAR 0 6
6104: PUSH
6105: LD_VAR 0 2
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6329
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6113: LD_ADDR_VAR 0 8
6117: PUSH
6118: LD_VAR 0 1
6122: PPUSH
6123: LD_VAR 0 6
6127: PUSH
6128: LD_INT 1
6130: ARRAY
6131: PPUSH
6132: LD_VAR 0 6
6136: PUSH
6137: LD_INT 2
6139: ARRAY
6140: PPUSH
6141: CALL_OW 297
6145: ST_TO_ADDR
// if not Count ( result ) then
6146: LD_VAR 0 5
6150: PPUSH
6151: CALL 2723 0 1
6155: NOT
6156: IFFALSE 6189
// begin result := Join ( result , [ i , tmp ] ) ;
6158: LD_ADDR_VAR 0 5
6162: PUSH
6163: LD_VAR 0 5
6167: PPUSH
6168: LD_VAR 0 6
6172: PUSH
6173: LD_VAR 0 8
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PPUSH
6182: CALL 38332 0 2
6186: ST_TO_ADDR
// continue ;
6187: GO 6110
// end ; if result [ result ] [ 2 ] <= tmp then
6189: LD_VAR 0 5
6193: PUSH
6194: LD_VAR 0 5
6198: ARRAY
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PUSH
6204: LD_VAR 0 8
6208: LESSEQUAL
6209: IFFALSE 6242
// result := Join ( result , [ i , tmp ] ) else
6211: LD_ADDR_VAR 0 5
6215: PUSH
6216: LD_VAR 0 5
6220: PPUSH
6221: LD_VAR 0 6
6225: PUSH
6226: LD_VAR 0 8
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PPUSH
6235: CALL 38332 0 2
6239: ST_TO_ADDR
6240: GO 6327
// begin for j := 1 to Count ( result ) do
6242: LD_ADDR_VAR 0 7
6246: PUSH
6247: DOUBLE
6248: LD_INT 1
6250: DEC
6251: ST_TO_ADDR
6252: LD_VAR 0 5
6256: PPUSH
6257: CALL 2723 0 1
6261: PUSH
6262: FOR_TO
6263: IFFALSE 6325
// begin if tmp < result [ j ] [ 2 ] then
6265: LD_VAR 0 8
6269: PUSH
6270: LD_VAR 0 5
6274: PUSH
6275: LD_VAR 0 7
6279: ARRAY
6280: PUSH
6281: LD_INT 2
6283: ARRAY
6284: LESS
6285: IFFALSE 6323
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6287: LD_ADDR_VAR 0 5
6291: PUSH
6292: LD_VAR 0 5
6296: PPUSH
6297: LD_VAR 0 7
6301: PPUSH
6302: LD_VAR 0 6
6306: PUSH
6307: LD_VAR 0 8
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PPUSH
6316: CALL_OW 2
6320: ST_TO_ADDR
// break ;
6321: GO 6325
// end ; end ;
6323: GO 6262
6325: POP
6326: POP
// end ; end ;
6327: GO 6110
6329: POP
6330: POP
// if result and not asc then
6331: LD_VAR 0 5
6335: PUSH
6336: LD_VAR 0 3
6340: NOT
6341: AND
6342: IFFALSE 6359
// result := ReverseArray ( result ) ;
6344: LD_ADDR_VAR 0 5
6348: PUSH
6349: LD_VAR 0 5
6353: PPUSH
6354: CALL 33599 0 1
6358: ST_TO_ADDR
// tmp := [ ] ;
6359: LD_ADDR_VAR 0 8
6363: PUSH
6364: EMPTY
6365: ST_TO_ADDR
// if mode then
6366: LD_VAR 0 4
6370: IFFALSE 6434
// begin for i := 1 to result do
6372: LD_ADDR_VAR 0 6
6376: PUSH
6377: DOUBLE
6378: LD_INT 1
6380: DEC
6381: ST_TO_ADDR
6382: LD_VAR 0 5
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6422
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6390: LD_ADDR_VAR 0 8
6394: PUSH
6395: LD_VAR 0 8
6399: PPUSH
6400: LD_VAR 0 5
6404: PUSH
6405: LD_VAR 0 6
6409: ARRAY
6410: PUSH
6411: LD_INT 1
6413: ARRAY
6414: PPUSH
6415: CALL 38332 0 2
6419: ST_TO_ADDR
6420: GO 6387
6422: POP
6423: POP
// result := tmp ;
6424: LD_ADDR_VAR 0 5
6428: PUSH
6429: LD_VAR 0 8
6433: ST_TO_ADDR
// end ; end ;
6434: LD_VAR 0 5
6438: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
6443: PPUSH
6444: PPUSH
// if not list then
6445: LD_VAR 0 3
6449: NOT
6450: IFFALSE 6454
// exit ;
6452: GO 6842
// result := [ ] ;
6454: LD_ADDR_VAR 0 6
6458: PUSH
6459: EMPTY
6460: ST_TO_ADDR
// for i in list do
6461: LD_ADDR_VAR 0 7
6465: PUSH
6466: LD_VAR 0 3
6470: PUSH
6471: FOR_IN
6472: IFFALSE 6674
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6474: LD_ADDR_VAR 0 9
6478: PUSH
6479: LD_VAR 0 7
6483: PPUSH
6484: LD_VAR 0 1
6488: PPUSH
6489: LD_VAR 0 2
6493: PPUSH
6494: CALL_OW 297
6498: ST_TO_ADDR
// if not result then
6499: LD_VAR 0 6
6503: NOT
6504: IFFALSE 6530
// result := [ [ i , tmp ] ] else
6506: LD_ADDR_VAR 0 6
6510: PUSH
6511: LD_VAR 0 7
6515: PUSH
6516: LD_VAR 0 9
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: ST_TO_ADDR
6528: GO 6672
// begin if result [ result ] [ 2 ] <= tmp then
6530: LD_VAR 0 6
6534: PUSH
6535: LD_VAR 0 6
6539: ARRAY
6540: PUSH
6541: LD_INT 2
6543: ARRAY
6544: PUSH
6545: LD_VAR 0 9
6549: LESSEQUAL
6550: IFFALSE 6592
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6552: LD_ADDR_VAR 0 6
6556: PUSH
6557: LD_VAR 0 6
6561: PPUSH
6562: LD_VAR 0 6
6566: PUSH
6567: LD_INT 1
6569: PLUS
6570: PPUSH
6571: LD_VAR 0 7
6575: PUSH
6576: LD_VAR 0 9
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 2
6589: ST_TO_ADDR
6590: GO 6672
// for j := 1 to result do
6592: LD_ADDR_VAR 0 8
6596: PUSH
6597: DOUBLE
6598: LD_INT 1
6600: DEC
6601: ST_TO_ADDR
6602: LD_VAR 0 6
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6670
// begin if tmp < result [ j ] [ 2 ] then
6610: LD_VAR 0 9
6614: PUSH
6615: LD_VAR 0 6
6619: PUSH
6620: LD_VAR 0 8
6624: ARRAY
6625: PUSH
6626: LD_INT 2
6628: ARRAY
6629: LESS
6630: IFFALSE 6668
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6632: LD_ADDR_VAR 0 6
6636: PUSH
6637: LD_VAR 0 6
6641: PPUSH
6642: LD_VAR 0 8
6646: PPUSH
6647: LD_VAR 0 7
6651: PUSH
6652: LD_VAR 0 9
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 2
6665: ST_TO_ADDR
// break ;
6666: GO 6670
// end ; end ;
6668: GO 6607
6670: POP
6671: POP
// end ; end ;
6672: GO 6471
6674: POP
6675: POP
// if result and not asc then
6676: LD_VAR 0 6
6680: PUSH
6681: LD_VAR 0 4
6685: NOT
6686: AND
6687: IFFALSE 6762
// begin tmp := result ;
6689: LD_ADDR_VAR 0 9
6693: PUSH
6694: LD_VAR 0 6
6698: ST_TO_ADDR
// for i = tmp downto 1 do
6699: LD_ADDR_VAR 0 7
6703: PUSH
6704: DOUBLE
6705: LD_VAR 0 9
6709: INC
6710: ST_TO_ADDR
6711: LD_INT 1
6713: PUSH
6714: FOR_DOWNTO
6715: IFFALSE 6760
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6717: LD_ADDR_VAR 0 6
6721: PUSH
6722: LD_VAR 0 6
6726: PPUSH
6727: LD_VAR 0 9
6731: PUSH
6732: LD_VAR 0 7
6736: MINUS
6737: PUSH
6738: LD_INT 1
6740: PLUS
6741: PPUSH
6742: LD_VAR 0 9
6746: PUSH
6747: LD_VAR 0 7
6751: ARRAY
6752: PPUSH
6753: CALL_OW 1
6757: ST_TO_ADDR
6758: GO 6714
6760: POP
6761: POP
// end ; tmp := [ ] ;
6762: LD_ADDR_VAR 0 9
6766: PUSH
6767: EMPTY
6768: ST_TO_ADDR
// if mode then
6769: LD_VAR 0 5
6773: IFFALSE 6842
// begin for i = 1 to result do
6775: LD_ADDR_VAR 0 7
6779: PUSH
6780: DOUBLE
6781: LD_INT 1
6783: DEC
6784: ST_TO_ADDR
6785: LD_VAR 0 6
6789: PUSH
6790: FOR_TO
6791: IFFALSE 6830
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6793: LD_ADDR_VAR 0 9
6797: PUSH
6798: LD_VAR 0 9
6802: PPUSH
6803: LD_VAR 0 7
6807: PPUSH
6808: LD_VAR 0 6
6812: PUSH
6813: LD_VAR 0 7
6817: ARRAY
6818: PUSH
6819: LD_INT 1
6821: ARRAY
6822: PPUSH
6823: CALL_OW 1
6827: ST_TO_ADDR
6828: GO 6790
6830: POP
6831: POP
// result := tmp ;
6832: LD_ADDR_VAR 0 6
6836: PUSH
6837: LD_VAR 0 9
6841: ST_TO_ADDR
// end ; end ;
6842: LD_VAR 0 6
6846: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6847: LD_INT 0
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6855: LD_ADDR_VAR 0 5
6859: PUSH
6860: LD_INT 0
6862: PUSH
6863: LD_INT 0
6865: PUSH
6866: LD_INT 0
6868: PUSH
6869: EMPTY
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: ST_TO_ADDR
// if not x or not y then
6877: LD_VAR 0 2
6881: NOT
6882: PUSH
6883: LD_VAR 0 3
6887: NOT
6888: OR
6889: IFFALSE 6893
// exit ;
6891: GO 8543
// if not range then
6893: LD_VAR 0 4
6897: NOT
6898: IFFALSE 6908
// range := 10 ;
6900: LD_ADDR_VAR 0 4
6904: PUSH
6905: LD_INT 10
6907: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6908: LD_ADDR_VAR 0 8
6912: PUSH
6913: LD_INT 81
6915: PUSH
6916: LD_VAR 0 1
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 92
6927: PUSH
6928: LD_VAR 0 2
6932: PUSH
6933: LD_VAR 0 3
6937: PUSH
6938: LD_VAR 0 4
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 3
6951: PUSH
6952: LD_INT 21
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: PPUSH
6971: CALL_OW 69
6975: ST_TO_ADDR
// if not tmp then
6976: LD_VAR 0 8
6980: NOT
6981: IFFALSE 6985
// exit ;
6983: GO 8543
// for i in tmp do
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_VAR 0 8
6994: PUSH
6995: FOR_IN
6996: IFFALSE 8518
// begin points := [ 0 , 0 , 0 ] ;
6998: LD_ADDR_VAR 0 9
7002: PUSH
7003: LD_INT 0
7005: PUSH
7006: LD_INT 0
7008: PUSH
7009: LD_INT 0
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: ST_TO_ADDR
// bpoints := 1 ;
7017: LD_ADDR_VAR 0 10
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7025: LD_VAR 0 6
7029: PPUSH
7030: CALL_OW 247
7034: PUSH
7035: LD_INT 1
7037: DOUBLE
7038: EQUAL
7039: IFTRUE 7043
7041: GO 7621
7043: POP
// begin if GetClass ( i ) = 1 then
7044: LD_VAR 0 6
7048: PPUSH
7049: CALL_OW 257
7053: PUSH
7054: LD_INT 1
7056: EQUAL
7057: IFFALSE 7078
// points := [ 10 , 5 , 3 ] ;
7059: LD_ADDR_VAR 0 9
7063: PUSH
7064: LD_INT 10
7066: PUSH
7067: LD_INT 5
7069: PUSH
7070: LD_INT 3
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7078: LD_VAR 0 6
7082: PPUSH
7083: CALL_OW 257
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: LD_INT 4
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: LIST
7101: IN
7102: IFFALSE 7123
// points := [ 3 , 2 , 1 ] ;
7104: LD_ADDR_VAR 0 9
7108: PUSH
7109: LD_INT 3
7111: PUSH
7112: LD_INT 2
7114: PUSH
7115: LD_INT 1
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7123: LD_VAR 0 6
7127: PPUSH
7128: CALL_OW 257
7132: PUSH
7133: LD_INT 5
7135: EQUAL
7136: IFFALSE 7157
// points := [ 130 , 5 , 2 ] ;
7138: LD_ADDR_VAR 0 9
7142: PUSH
7143: LD_INT 130
7145: PUSH
7146: LD_INT 5
7148: PUSH
7149: LD_INT 2
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7157: LD_VAR 0 6
7161: PPUSH
7162: CALL_OW 257
7166: PUSH
7167: LD_INT 8
7169: EQUAL
7170: IFFALSE 7191
// points := [ 35 , 35 , 30 ] ;
7172: LD_ADDR_VAR 0 9
7176: PUSH
7177: LD_INT 35
7179: PUSH
7180: LD_INT 35
7182: PUSH
7183: LD_INT 30
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7191: LD_VAR 0 6
7195: PPUSH
7196: CALL_OW 257
7200: PUSH
7201: LD_INT 9
7203: EQUAL
7204: IFFALSE 7225
// points := [ 20 , 55 , 40 ] ;
7206: LD_ADDR_VAR 0 9
7210: PUSH
7211: LD_INT 20
7213: PUSH
7214: LD_INT 55
7216: PUSH
7217: LD_INT 40
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7225: LD_VAR 0 6
7229: PPUSH
7230: CALL_OW 257
7234: PUSH
7235: LD_INT 12
7237: PUSH
7238: LD_INT 16
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: IN
7245: IFFALSE 7266
// points := [ 5 , 3 , 2 ] ;
7247: LD_ADDR_VAR 0 9
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: LD_INT 3
7257: PUSH
7258: LD_INT 2
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7266: LD_VAR 0 6
7270: PPUSH
7271: CALL_OW 257
7275: PUSH
7276: LD_INT 17
7278: EQUAL
7279: IFFALSE 7300
// points := [ 100 , 50 , 75 ] ;
7281: LD_ADDR_VAR 0 9
7285: PUSH
7286: LD_INT 100
7288: PUSH
7289: LD_INT 50
7291: PUSH
7292: LD_INT 75
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7300: LD_VAR 0 6
7304: PPUSH
7305: CALL_OW 257
7309: PUSH
7310: LD_INT 15
7312: EQUAL
7313: IFFALSE 7334
// points := [ 10 , 5 , 3 ] ;
7315: LD_ADDR_VAR 0 9
7319: PUSH
7320: LD_INT 10
7322: PUSH
7323: LD_INT 5
7325: PUSH
7326: LD_INT 3
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7334: LD_VAR 0 6
7338: PPUSH
7339: CALL_OW 257
7343: PUSH
7344: LD_INT 14
7346: EQUAL
7347: IFFALSE 7368
// points := [ 10 , 0 , 0 ] ;
7349: LD_ADDR_VAR 0 9
7353: PUSH
7354: LD_INT 10
7356: PUSH
7357: LD_INT 0
7359: PUSH
7360: LD_INT 0
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: LIST
7367: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7368: LD_VAR 0 6
7372: PPUSH
7373: CALL_OW 257
7377: PUSH
7378: LD_INT 11
7380: EQUAL
7381: IFFALSE 7402
// points := [ 30 , 10 , 5 ] ;
7383: LD_ADDR_VAR 0 9
7387: PUSH
7388: LD_INT 30
7390: PUSH
7391: LD_INT 10
7393: PUSH
7394: LD_INT 5
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: LIST
7401: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7402: LD_VAR 0 1
7406: PPUSH
7407: LD_INT 5
7409: PPUSH
7410: CALL_OW 321
7414: PUSH
7415: LD_INT 2
7417: EQUAL
7418: IFFALSE 7435
// bpoints := bpoints * 1.8 ;
7420: LD_ADDR_VAR 0 10
7424: PUSH
7425: LD_VAR 0 10
7429: PUSH
7430: LD_REAL  1.80000000000000E+0000
7433: MUL
7434: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7435: LD_VAR 0 6
7439: PPUSH
7440: CALL_OW 257
7444: PUSH
7445: LD_INT 1
7447: PUSH
7448: LD_INT 2
7450: PUSH
7451: LD_INT 3
7453: PUSH
7454: LD_INT 4
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: IN
7463: PUSH
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_INT 51
7471: PPUSH
7472: CALL_OW 321
7476: PUSH
7477: LD_INT 2
7479: EQUAL
7480: AND
7481: IFFALSE 7498
// bpoints := bpoints * 1.2 ;
7483: LD_ADDR_VAR 0 10
7487: PUSH
7488: LD_VAR 0 10
7492: PUSH
7493: LD_REAL  1.20000000000000E+0000
7496: MUL
7497: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7498: LD_VAR 0 6
7502: PPUSH
7503: CALL_OW 257
7507: PUSH
7508: LD_INT 5
7510: PUSH
7511: LD_INT 7
7513: PUSH
7514: LD_INT 9
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: IN
7522: PUSH
7523: LD_VAR 0 1
7527: PPUSH
7528: LD_INT 52
7530: PPUSH
7531: CALL_OW 321
7535: PUSH
7536: LD_INT 2
7538: EQUAL
7539: AND
7540: IFFALSE 7557
// bpoints := bpoints * 1.5 ;
7542: LD_ADDR_VAR 0 10
7546: PUSH
7547: LD_VAR 0 10
7551: PUSH
7552: LD_REAL  1.50000000000000E+0000
7555: MUL
7556: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 66
7564: PPUSH
7565: CALL_OW 321
7569: PUSH
7570: LD_INT 2
7572: EQUAL
7573: IFFALSE 7590
// bpoints := bpoints * 1.1 ;
7575: LD_ADDR_VAR 0 10
7579: PUSH
7580: LD_VAR 0 10
7584: PUSH
7585: LD_REAL  1.10000000000000E+0000
7588: MUL
7589: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7590: LD_ADDR_VAR 0 10
7594: PUSH
7595: LD_VAR 0 10
7599: PUSH
7600: LD_VAR 0 6
7604: PPUSH
7605: LD_INT 1
7607: PPUSH
7608: CALL_OW 259
7612: PUSH
7613: LD_REAL  1.15000000000000E+0000
7616: MUL
7617: MUL
7618: ST_TO_ADDR
// end ; unit_vehicle :
7619: GO 8447
7621: LD_INT 2
7623: DOUBLE
7624: EQUAL
7625: IFTRUE 7629
7627: GO 8435
7629: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7630: LD_VAR 0 6
7634: PPUSH
7635: CALL_OW 264
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: LD_INT 42
7645: PUSH
7646: LD_INT 24
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: IN
7654: IFFALSE 7675
// points := [ 25 , 5 , 3 ] ;
7656: LD_ADDR_VAR 0 9
7660: PUSH
7661: LD_INT 25
7663: PUSH
7664: LD_INT 5
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7675: LD_VAR 0 6
7679: PPUSH
7680: CALL_OW 264
7684: PUSH
7685: LD_INT 4
7687: PUSH
7688: LD_INT 43
7690: PUSH
7691: LD_INT 25
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: IN
7699: IFFALSE 7720
// points := [ 40 , 15 , 5 ] ;
7701: LD_ADDR_VAR 0 9
7705: PUSH
7706: LD_INT 40
7708: PUSH
7709: LD_INT 15
7711: PUSH
7712: LD_INT 5
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: LIST
7719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7720: LD_VAR 0 6
7724: PPUSH
7725: CALL_OW 264
7729: PUSH
7730: LD_INT 3
7732: PUSH
7733: LD_INT 23
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: IN
7740: IFFALSE 7761
// points := [ 7 , 25 , 8 ] ;
7742: LD_ADDR_VAR 0 9
7746: PUSH
7747: LD_INT 7
7749: PUSH
7750: LD_INT 25
7752: PUSH
7753: LD_INT 8
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7761: LD_VAR 0 6
7765: PPUSH
7766: CALL_OW 264
7770: PUSH
7771: LD_INT 5
7773: PUSH
7774: LD_INT 27
7776: PUSH
7777: LD_INT 44
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: IN
7785: IFFALSE 7806
// points := [ 14 , 50 , 16 ] ;
7787: LD_ADDR_VAR 0 9
7791: PUSH
7792: LD_INT 14
7794: PUSH
7795: LD_INT 50
7797: PUSH
7798: LD_INT 16
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7806: LD_VAR 0 6
7810: PPUSH
7811: CALL_OW 264
7815: PUSH
7816: LD_INT 6
7818: PUSH
7819: LD_INT 46
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: IN
7826: IFFALSE 7847
// points := [ 32 , 120 , 70 ] ;
7828: LD_ADDR_VAR 0 9
7832: PUSH
7833: LD_INT 32
7835: PUSH
7836: LD_INT 120
7838: PUSH
7839: LD_INT 70
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7847: LD_VAR 0 6
7851: PPUSH
7852: CALL_OW 264
7856: PUSH
7857: LD_INT 7
7859: PUSH
7860: LD_INT 28
7862: PUSH
7863: LD_INT 45
7865: PUSH
7866: LD_INT 92
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: IN
7875: IFFALSE 7896
// points := [ 35 , 20 , 45 ] ;
7877: LD_ADDR_VAR 0 9
7881: PUSH
7882: LD_INT 35
7884: PUSH
7885: LD_INT 20
7887: PUSH
7888: LD_INT 45
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7896: LD_VAR 0 6
7900: PPUSH
7901: CALL_OW 264
7905: PUSH
7906: LD_INT 47
7908: PUSH
7909: EMPTY
7910: LIST
7911: IN
7912: IFFALSE 7933
// points := [ 67 , 45 , 75 ] ;
7914: LD_ADDR_VAR 0 9
7918: PUSH
7919: LD_INT 67
7921: PUSH
7922: LD_INT 45
7924: PUSH
7925: LD_INT 75
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7933: LD_VAR 0 6
7937: PPUSH
7938: CALL_OW 264
7942: PUSH
7943: LD_INT 26
7945: PUSH
7946: EMPTY
7947: LIST
7948: IN
7949: IFFALSE 7970
// points := [ 120 , 30 , 80 ] ;
7951: LD_ADDR_VAR 0 9
7955: PUSH
7956: LD_INT 120
7958: PUSH
7959: LD_INT 30
7961: PUSH
7962: LD_INT 80
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7970: LD_VAR 0 6
7974: PPUSH
7975: CALL_OW 264
7979: PUSH
7980: LD_INT 22
7982: PUSH
7983: EMPTY
7984: LIST
7985: IN
7986: IFFALSE 8007
// points := [ 40 , 1 , 1 ] ;
7988: LD_ADDR_VAR 0 9
7992: PUSH
7993: LD_INT 40
7995: PUSH
7996: LD_INT 1
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8007: LD_VAR 0 6
8011: PPUSH
8012: CALL_OW 264
8016: PUSH
8017: LD_INT 29
8019: PUSH
8020: EMPTY
8021: LIST
8022: IN
8023: IFFALSE 8044
// points := [ 70 , 200 , 400 ] ;
8025: LD_ADDR_VAR 0 9
8029: PUSH
8030: LD_INT 70
8032: PUSH
8033: LD_INT 200
8035: PUSH
8036: LD_INT 400
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8044: LD_VAR 0 6
8048: PPUSH
8049: CALL_OW 264
8053: PUSH
8054: LD_INT 14
8056: PUSH
8057: LD_INT 53
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: IN
8064: IFFALSE 8085
// points := [ 40 , 10 , 20 ] ;
8066: LD_ADDR_VAR 0 9
8070: PUSH
8071: LD_INT 40
8073: PUSH
8074: LD_INT 10
8076: PUSH
8077: LD_INT 20
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8085: LD_VAR 0 6
8089: PPUSH
8090: CALL_OW 264
8094: PUSH
8095: LD_INT 9
8097: PUSH
8098: EMPTY
8099: LIST
8100: IN
8101: IFFALSE 8122
// points := [ 5 , 70 , 20 ] ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_INT 5
8110: PUSH
8111: LD_INT 70
8113: PUSH
8114: LD_INT 20
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8122: LD_VAR 0 6
8126: PPUSH
8127: CALL_OW 264
8131: PUSH
8132: LD_INT 10
8134: PUSH
8135: EMPTY
8136: LIST
8137: IN
8138: IFFALSE 8159
// points := [ 35 , 110 , 70 ] ;
8140: LD_ADDR_VAR 0 9
8144: PUSH
8145: LD_INT 35
8147: PUSH
8148: LD_INT 110
8150: PUSH
8151: LD_INT 70
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8159: LD_VAR 0 6
8163: PPUSH
8164: CALL_OW 265
8168: PUSH
8169: LD_INT 25
8171: EQUAL
8172: IFFALSE 8193
// points := [ 80 , 65 , 100 ] ;
8174: LD_ADDR_VAR 0 9
8178: PUSH
8179: LD_INT 80
8181: PUSH
8182: LD_INT 65
8184: PUSH
8185: LD_INT 100
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8193: LD_VAR 0 6
8197: PPUSH
8198: CALL_OW 263
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8241
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8208: LD_ADDR_VAR 0 10
8212: PUSH
8213: LD_VAR 0 10
8217: PUSH
8218: LD_VAR 0 6
8222: PPUSH
8223: CALL_OW 311
8227: PPUSH
8228: LD_INT 3
8230: PPUSH
8231: CALL_OW 259
8235: PUSH
8236: LD_INT 4
8238: MUL
8239: MUL
8240: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8241: LD_VAR 0 6
8245: PPUSH
8246: CALL_OW 263
8250: PUSH
8251: LD_INT 2
8253: EQUAL
8254: IFFALSE 8305
// begin j := IsControledBy ( i ) ;
8256: LD_ADDR_VAR 0 7
8260: PUSH
8261: LD_VAR 0 6
8265: PPUSH
8266: CALL_OW 312
8270: ST_TO_ADDR
// if j then
8271: LD_VAR 0 7
8275: IFFALSE 8305
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8277: LD_ADDR_VAR 0 10
8281: PUSH
8282: LD_VAR 0 10
8286: PUSH
8287: LD_VAR 0 7
8291: PPUSH
8292: LD_INT 3
8294: PPUSH
8295: CALL_OW 259
8299: PUSH
8300: LD_INT 3
8302: MUL
8303: MUL
8304: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8305: LD_VAR 0 6
8309: PPUSH
8310: CALL_OW 264
8314: PUSH
8315: LD_INT 5
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 46
8323: PUSH
8324: LD_INT 44
8326: PUSH
8327: LD_INT 47
8329: PUSH
8330: LD_INT 45
8332: PUSH
8333: LD_INT 28
8335: PUSH
8336: LD_INT 7
8338: PUSH
8339: LD_INT 27
8341: PUSH
8342: LD_INT 29
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: IN
8357: PUSH
8358: LD_VAR 0 1
8362: PPUSH
8363: LD_INT 52
8365: PPUSH
8366: CALL_OW 321
8370: PUSH
8371: LD_INT 2
8373: EQUAL
8374: AND
8375: IFFALSE 8392
// bpoints := bpoints * 1.2 ;
8377: LD_ADDR_VAR 0 10
8381: PUSH
8382: LD_VAR 0 10
8386: PUSH
8387: LD_REAL  1.20000000000000E+0000
8390: MUL
8391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8392: LD_VAR 0 6
8396: PPUSH
8397: CALL_OW 264
8401: PUSH
8402: LD_INT 6
8404: PUSH
8405: LD_INT 46
8407: PUSH
8408: LD_INT 47
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: LIST
8415: IN
8416: IFFALSE 8433
// bpoints := bpoints * 1.2 ;
8418: LD_ADDR_VAR 0 10
8422: PUSH
8423: LD_VAR 0 10
8427: PUSH
8428: LD_REAL  1.20000000000000E+0000
8431: MUL
8432: ST_TO_ADDR
// end ; unit_building :
8433: GO 8447
8435: LD_INT 3
8437: DOUBLE
8438: EQUAL
8439: IFTRUE 8443
8441: GO 8446
8443: POP
// ; end ;
8444: GO 8447
8446: POP
// for j = 1 to 3 do
8447: LD_ADDR_VAR 0 7
8451: PUSH
8452: DOUBLE
8453: LD_INT 1
8455: DEC
8456: ST_TO_ADDR
8457: LD_INT 3
8459: PUSH
8460: FOR_TO
8461: IFFALSE 8514
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8463: LD_ADDR_VAR 0 5
8467: PUSH
8468: LD_VAR 0 5
8472: PPUSH
8473: LD_VAR 0 7
8477: PPUSH
8478: LD_VAR 0 5
8482: PUSH
8483: LD_VAR 0 7
8487: ARRAY
8488: PUSH
8489: LD_VAR 0 9
8493: PUSH
8494: LD_VAR 0 7
8498: ARRAY
8499: PUSH
8500: LD_VAR 0 10
8504: MUL
8505: PLUS
8506: PPUSH
8507: CALL_OW 1
8511: ST_TO_ADDR
8512: GO 8460
8514: POP
8515: POP
// end ;
8516: GO 6995
8518: POP
8519: POP
// result := Replace ( result , 4 , tmp ) ;
8520: LD_ADDR_VAR 0 5
8524: PUSH
8525: LD_VAR 0 5
8529: PPUSH
8530: LD_INT 4
8532: PPUSH
8533: LD_VAR 0 8
8537: PPUSH
8538: CALL_OW 1
8542: ST_TO_ADDR
// end ;
8543: LD_VAR 0 5
8547: RET
// export function DangerAtRange ( unit , range ) ; begin
8548: LD_INT 0
8550: PPUSH
// if not unit then
8551: LD_VAR 0 1
8555: NOT
8556: IFFALSE 8560
// exit ;
8558: GO 8605
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 255
8574: PPUSH
8575: LD_VAR 0 1
8579: PPUSH
8580: CALL_OW 250
8584: PPUSH
8585: LD_VAR 0 1
8589: PPUSH
8590: CALL_OW 251
8594: PPUSH
8595: LD_VAR 0 2
8599: PPUSH
8600: CALL 6847 0 4
8604: ST_TO_ADDR
// end ;
8605: LD_VAR 0 3
8609: RET
// export function DangerInArea ( side , area ) ; begin
8610: LD_INT 0
8612: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8613: LD_ADDR_VAR 0 3
8617: PUSH
8618: LD_VAR 0 2
8622: PPUSH
8623: LD_INT 81
8625: PUSH
8626: LD_VAR 0 1
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PPUSH
8635: CALL_OW 70
8639: ST_TO_ADDR
// end ;
8640: LD_VAR 0 3
8644: RET
// export function IsExtension ( b ) ; begin
8645: LD_INT 0
8647: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8648: LD_ADDR_VAR 0 2
8652: PUSH
8653: LD_VAR 0 1
8657: PUSH
8658: LD_INT 23
8660: PUSH
8661: LD_INT 20
8663: PUSH
8664: LD_INT 22
8666: PUSH
8667: LD_INT 17
8669: PUSH
8670: LD_INT 24
8672: PUSH
8673: LD_INT 21
8675: PUSH
8676: LD_INT 19
8678: PUSH
8679: LD_INT 16
8681: PUSH
8682: LD_INT 25
8684: PUSH
8685: LD_INT 18
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: IN
8700: ST_TO_ADDR
// end ;
8701: LD_VAR 0 2
8705: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8706: LD_INT 0
8708: PPUSH
8709: PPUSH
8710: PPUSH
// result := [ ] ;
8711: LD_ADDR_VAR 0 4
8715: PUSH
8716: EMPTY
8717: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8718: LD_ADDR_VAR 0 5
8722: PUSH
8723: LD_VAR 0 2
8727: PPUSH
8728: LD_INT 21
8730: PUSH
8731: LD_INT 3
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 70
8742: ST_TO_ADDR
// if not tmp then
8743: LD_VAR 0 5
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 8816
// if checkLink then
8752: LD_VAR 0 3
8756: IFFALSE 8806
// begin for i in tmp do
8758: LD_ADDR_VAR 0 6
8762: PUSH
8763: LD_VAR 0 5
8767: PUSH
8768: FOR_IN
8769: IFFALSE 8804
// if GetBase ( i ) <> base then
8771: LD_VAR 0 6
8775: PPUSH
8776: CALL_OW 274
8780: PUSH
8781: LD_VAR 0 1
8785: NONEQUAL
8786: IFFALSE 8802
// ComLinkToBase ( base , i ) ;
8788: LD_VAR 0 1
8792: PPUSH
8793: LD_VAR 0 6
8797: PPUSH
8798: CALL_OW 169
8802: GO 8768
8804: POP
8805: POP
// end ; result := tmp ;
8806: LD_ADDR_VAR 0 4
8810: PUSH
8811: LD_VAR 0 5
8815: ST_TO_ADDR
// end ;
8816: LD_VAR 0 4
8820: RET
// export function ComComplete ( units , b ) ; var i ; begin
8821: LD_INT 0
8823: PPUSH
8824: PPUSH
// if not units then
8825: LD_VAR 0 1
8829: NOT
8830: IFFALSE 8834
// exit ;
8832: GO 8924
// for i in units do
8834: LD_ADDR_VAR 0 4
8838: PUSH
8839: LD_VAR 0 1
8843: PUSH
8844: FOR_IN
8845: IFFALSE 8922
// if BuildingStatus ( b ) = bs_build then
8847: LD_VAR 0 2
8851: PPUSH
8852: CALL_OW 461
8856: PUSH
8857: LD_INT 1
8859: EQUAL
8860: IFFALSE 8920
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8862: LD_VAR 0 4
8866: PPUSH
8867: LD_STRING h
8869: PUSH
8870: LD_VAR 0 2
8874: PPUSH
8875: CALL_OW 250
8879: PUSH
8880: LD_VAR 0 2
8884: PPUSH
8885: CALL_OW 251
8889: PUSH
8890: LD_VAR 0 2
8894: PUSH
8895: LD_INT 0
8897: PUSH
8898: LD_INT 0
8900: PUSH
8901: LD_INT 0
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: PPUSH
8916: CALL_OW 446
8920: GO 8844
8922: POP
8923: POP
// end ;
8924: LD_VAR 0 3
8928: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8929: LD_INT 0
8931: PPUSH
8932: PPUSH
8933: PPUSH
8934: PPUSH
8935: PPUSH
8936: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8937: LD_VAR 0 1
8941: NOT
8942: PUSH
8943: LD_VAR 0 1
8947: PPUSH
8948: CALL_OW 263
8952: PUSH
8953: LD_INT 2
8955: NONEQUAL
8956: OR
8957: IFFALSE 8961
// exit ;
8959: GO 9277
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8961: LD_ADDR_VAR 0 6
8965: PUSH
8966: LD_INT 22
8968: PUSH
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 255
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 2
8985: PUSH
8986: LD_INT 30
8988: PUSH
8989: LD_INT 36
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 34
8998: PUSH
8999: LD_INT 31
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PPUSH
9015: CALL_OW 69
9019: ST_TO_ADDR
// if not tmp then
9020: LD_VAR 0 6
9024: NOT
9025: IFFALSE 9029
// exit ;
9027: GO 9277
// result := [ ] ;
9029: LD_ADDR_VAR 0 2
9033: PUSH
9034: EMPTY
9035: ST_TO_ADDR
// for i in tmp do
9036: LD_ADDR_VAR 0 3
9040: PUSH
9041: LD_VAR 0 6
9045: PUSH
9046: FOR_IN
9047: IFFALSE 9118
// begin t := UnitsInside ( i ) ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_VAR 0 3
9058: PPUSH
9059: CALL_OW 313
9063: ST_TO_ADDR
// if t then
9064: LD_VAR 0 4
9068: IFFALSE 9116
// for j in t do
9070: LD_ADDR_VAR 0 7
9074: PUSH
9075: LD_VAR 0 4
9079: PUSH
9080: FOR_IN
9081: IFFALSE 9114
// result := Replace ( result , result + 1 , j ) ;
9083: LD_ADDR_VAR 0 2
9087: PUSH
9088: LD_VAR 0 2
9092: PPUSH
9093: LD_VAR 0 2
9097: PUSH
9098: LD_INT 1
9100: PLUS
9101: PPUSH
9102: LD_VAR 0 7
9106: PPUSH
9107: CALL_OW 1
9111: ST_TO_ADDR
9112: GO 9080
9114: POP
9115: POP
// end ;
9116: GO 9046
9118: POP
9119: POP
// if not result then
9120: LD_VAR 0 2
9124: NOT
9125: IFFALSE 9129
// exit ;
9127: GO 9277
// mech := result [ 1 ] ;
9129: LD_ADDR_VAR 0 5
9133: PUSH
9134: LD_VAR 0 2
9138: PUSH
9139: LD_INT 1
9141: ARRAY
9142: ST_TO_ADDR
// if result > 1 then
9143: LD_VAR 0 2
9147: PUSH
9148: LD_INT 1
9150: GREATER
9151: IFFALSE 9263
// begin for i = 2 to result do
9153: LD_ADDR_VAR 0 3
9157: PUSH
9158: DOUBLE
9159: LD_INT 2
9161: DEC
9162: ST_TO_ADDR
9163: LD_VAR 0 2
9167: PUSH
9168: FOR_TO
9169: IFFALSE 9261
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9171: LD_ADDR_VAR 0 4
9175: PUSH
9176: LD_VAR 0 2
9180: PUSH
9181: LD_VAR 0 3
9185: ARRAY
9186: PPUSH
9187: LD_INT 3
9189: PPUSH
9190: CALL_OW 259
9194: PUSH
9195: LD_VAR 0 2
9199: PUSH
9200: LD_VAR 0 3
9204: ARRAY
9205: PPUSH
9206: CALL_OW 432
9210: MINUS
9211: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9212: LD_VAR 0 4
9216: PUSH
9217: LD_VAR 0 5
9221: PPUSH
9222: LD_INT 3
9224: PPUSH
9225: CALL_OW 259
9229: PUSH
9230: LD_VAR 0 5
9234: PPUSH
9235: CALL_OW 432
9239: MINUS
9240: GREATEREQUAL
9241: IFFALSE 9259
// mech := result [ i ] ;
9243: LD_ADDR_VAR 0 5
9247: PUSH
9248: LD_VAR 0 2
9252: PUSH
9253: LD_VAR 0 3
9257: ARRAY
9258: ST_TO_ADDR
// end ;
9259: GO 9168
9261: POP
9262: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9263: LD_VAR 0 1
9267: PPUSH
9268: LD_VAR 0 5
9272: PPUSH
9273: CALL_OW 135
// end ;
9277: LD_VAR 0 2
9281: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9282: LD_INT 0
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
9292: PPUSH
9293: PPUSH
9294: PPUSH
9295: PPUSH
9296: PPUSH
// result := [ ] ;
9297: LD_ADDR_VAR 0 7
9301: PUSH
9302: EMPTY
9303: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 266
9313: PUSH
9314: LD_INT 0
9316: PUSH
9317: LD_INT 1
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: IN
9324: NOT
9325: IFFALSE 9329
// exit ;
9327: GO 10963
// if name then
9329: LD_VAR 0 3
9333: IFFALSE 9349
// SetBName ( base_dep , name ) ;
9335: LD_VAR 0 1
9339: PPUSH
9340: LD_VAR 0 3
9344: PPUSH
9345: CALL_OW 500
// base := GetBase ( base_dep ) ;
9349: LD_ADDR_VAR 0 15
9353: PUSH
9354: LD_VAR 0 1
9358: PPUSH
9359: CALL_OW 274
9363: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9364: LD_ADDR_VAR 0 16
9368: PUSH
9369: LD_VAR 0 1
9373: PPUSH
9374: CALL_OW 255
9378: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9379: LD_ADDR_VAR 0 17
9383: PUSH
9384: LD_VAR 0 1
9388: PPUSH
9389: CALL_OW 248
9393: ST_TO_ADDR
// if sources then
9394: LD_VAR 0 5
9398: IFFALSE 9445
// for i = 1 to 3 do
9400: LD_ADDR_VAR 0 8
9404: PUSH
9405: DOUBLE
9406: LD_INT 1
9408: DEC
9409: ST_TO_ADDR
9410: LD_INT 3
9412: PUSH
9413: FOR_TO
9414: IFFALSE 9443
// AddResourceType ( base , i , sources [ i ] ) ;
9416: LD_VAR 0 15
9420: PPUSH
9421: LD_VAR 0 8
9425: PPUSH
9426: LD_VAR 0 5
9430: PUSH
9431: LD_VAR 0 8
9435: ARRAY
9436: PPUSH
9437: CALL_OW 276
9441: GO 9413
9443: POP
9444: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9445: LD_ADDR_VAR 0 18
9449: PUSH
9450: LD_VAR 0 15
9454: PPUSH
9455: LD_VAR 0 2
9459: PPUSH
9460: LD_INT 1
9462: PPUSH
9463: CALL 8706 0 3
9467: ST_TO_ADDR
// InitHc ;
9468: CALL_OW 19
// InitUc ;
9472: CALL_OW 18
// uc_side := side ;
9476: LD_ADDR_OWVAR 20
9480: PUSH
9481: LD_VAR 0 16
9485: ST_TO_ADDR
// uc_nation := nation ;
9486: LD_ADDR_OWVAR 21
9490: PUSH
9491: LD_VAR 0 17
9495: ST_TO_ADDR
// if buildings then
9496: LD_VAR 0 18
9500: IFFALSE 10822
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9502: LD_ADDR_VAR 0 19
9506: PUSH
9507: LD_VAR 0 18
9511: PPUSH
9512: LD_INT 2
9514: PUSH
9515: LD_INT 30
9517: PUSH
9518: LD_INT 29
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 30
9527: PUSH
9528: LD_INT 30
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: LIST
9539: PPUSH
9540: CALL_OW 72
9544: ST_TO_ADDR
// if tmp then
9545: LD_VAR 0 19
9549: IFFALSE 9597
// for i in tmp do
9551: LD_ADDR_VAR 0 8
9555: PUSH
9556: LD_VAR 0 19
9560: PUSH
9561: FOR_IN
9562: IFFALSE 9595
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9564: LD_VAR 0 8
9568: PPUSH
9569: CALL_OW 250
9573: PPUSH
9574: LD_VAR 0 8
9578: PPUSH
9579: CALL_OW 251
9583: PPUSH
9584: LD_VAR 0 16
9588: PPUSH
9589: CALL_OW 441
9593: GO 9561
9595: POP
9596: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9597: LD_VAR 0 18
9601: PPUSH
9602: LD_INT 2
9604: PUSH
9605: LD_INT 30
9607: PUSH
9608: LD_INT 32
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 30
9617: PUSH
9618: LD_INT 33
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: PPUSH
9630: CALL_OW 72
9634: IFFALSE 9722
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9636: LD_ADDR_VAR 0 8
9640: PUSH
9641: LD_VAR 0 18
9645: PPUSH
9646: LD_INT 2
9648: PUSH
9649: LD_INT 30
9651: PUSH
9652: LD_INT 32
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: LD_INT 30
9661: PUSH
9662: LD_INT 33
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: PPUSH
9674: CALL_OW 72
9678: PUSH
9679: FOR_IN
9680: IFFALSE 9720
// begin if not GetBWeapon ( i ) then
9682: LD_VAR 0 8
9686: PPUSH
9687: CALL_OW 269
9691: NOT
9692: IFFALSE 9718
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9694: LD_VAR 0 8
9698: PPUSH
9699: LD_VAR 0 8
9703: PPUSH
9704: LD_VAR 0 2
9708: PPUSH
9709: CALL 10968 0 2
9713: PPUSH
9714: CALL_OW 431
// end ;
9718: GO 9679
9720: POP
9721: POP
// end ; for i = 1 to personel do
9722: LD_ADDR_VAR 0 8
9726: PUSH
9727: DOUBLE
9728: LD_INT 1
9730: DEC
9731: ST_TO_ADDR
9732: LD_VAR 0 6
9736: PUSH
9737: FOR_TO
9738: IFFALSE 10802
// begin if i > 4 then
9740: LD_VAR 0 8
9744: PUSH
9745: LD_INT 4
9747: GREATER
9748: IFFALSE 9752
// break ;
9750: GO 10802
// case i of 1 :
9752: LD_VAR 0 8
9756: PUSH
9757: LD_INT 1
9759: DOUBLE
9760: EQUAL
9761: IFTRUE 9765
9763: GO 9845
9765: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9766: LD_ADDR_VAR 0 12
9770: PUSH
9771: LD_VAR 0 18
9775: PPUSH
9776: LD_INT 22
9778: PUSH
9779: LD_VAR 0 16
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 58
9790: PUSH
9791: EMPTY
9792: LIST
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: LD_INT 30
9799: PUSH
9800: LD_INT 32
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 30
9809: PUSH
9810: LD_INT 4
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 30
9819: PUSH
9820: LD_INT 5
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 72
9842: ST_TO_ADDR
9843: GO 10067
9845: LD_INT 2
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 9915
9853: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9854: LD_ADDR_VAR 0 12
9858: PUSH
9859: LD_VAR 0 18
9863: PPUSH
9864: LD_INT 22
9866: PUSH
9867: LD_VAR 0 16
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: LD_INT 30
9881: PUSH
9882: LD_INT 0
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 30
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 72
9912: ST_TO_ADDR
9913: GO 10067
9915: LD_INT 3
9917: DOUBLE
9918: EQUAL
9919: IFTRUE 9923
9921: GO 9985
9923: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9924: LD_ADDR_VAR 0 12
9928: PUSH
9929: LD_VAR 0 18
9933: PPUSH
9934: LD_INT 22
9936: PUSH
9937: LD_VAR 0 16
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 2
9948: PUSH
9949: LD_INT 30
9951: PUSH
9952: LD_INT 2
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 30
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: LIST
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PPUSH
9978: CALL_OW 72
9982: ST_TO_ADDR
9983: GO 10067
9985: LD_INT 4
9987: DOUBLE
9988: EQUAL
9989: IFTRUE 9993
9991: GO 10066
9993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9994: LD_ADDR_VAR 0 12
9998: PUSH
9999: LD_VAR 0 18
10003: PPUSH
10004: LD_INT 22
10006: PUSH
10007: LD_VAR 0 16
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 30
10021: PUSH
10022: LD_INT 6
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: LD_INT 30
10031: PUSH
10032: LD_INT 7
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 30
10041: PUSH
10042: LD_INT 8
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 72
10063: ST_TO_ADDR
10064: GO 10067
10066: POP
// if i = 1 then
10067: LD_VAR 0 8
10071: PUSH
10072: LD_INT 1
10074: EQUAL
10075: IFFALSE 10186
// begin tmp := [ ] ;
10077: LD_ADDR_VAR 0 19
10081: PUSH
10082: EMPTY
10083: ST_TO_ADDR
// for j in f do
10084: LD_ADDR_VAR 0 9
10088: PUSH
10089: LD_VAR 0 12
10093: PUSH
10094: FOR_IN
10095: IFFALSE 10168
// if GetBType ( j ) = b_bunker then
10097: LD_VAR 0 9
10101: PPUSH
10102: CALL_OW 266
10106: PUSH
10107: LD_INT 32
10109: EQUAL
10110: IFFALSE 10137
// tmp := Insert ( tmp , 1 , j ) else
10112: LD_ADDR_VAR 0 19
10116: PUSH
10117: LD_VAR 0 19
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: LD_VAR 0 9
10129: PPUSH
10130: CALL_OW 2
10134: ST_TO_ADDR
10135: GO 10166
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10137: LD_ADDR_VAR 0 19
10141: PUSH
10142: LD_VAR 0 19
10146: PPUSH
10147: LD_VAR 0 19
10151: PUSH
10152: LD_INT 1
10154: PLUS
10155: PPUSH
10156: LD_VAR 0 9
10160: PPUSH
10161: CALL_OW 2
10165: ST_TO_ADDR
10166: GO 10094
10168: POP
10169: POP
// if tmp then
10170: LD_VAR 0 19
10174: IFFALSE 10186
// f := tmp ;
10176: LD_ADDR_VAR 0 12
10180: PUSH
10181: LD_VAR 0 19
10185: ST_TO_ADDR
// end ; x := personel [ i ] ;
10186: LD_ADDR_VAR 0 13
10190: PUSH
10191: LD_VAR 0 6
10195: PUSH
10196: LD_VAR 0 8
10200: ARRAY
10201: ST_TO_ADDR
// if x = - 1 then
10202: LD_VAR 0 13
10206: PUSH
10207: LD_INT 1
10209: NEG
10210: EQUAL
10211: IFFALSE 10420
// begin for j in f do
10213: LD_ADDR_VAR 0 9
10217: PUSH
10218: LD_VAR 0 12
10222: PUSH
10223: FOR_IN
10224: IFFALSE 10416
// repeat InitHc ;
10226: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10230: LD_VAR 0 9
10234: PPUSH
10235: CALL_OW 266
10239: PUSH
10240: LD_INT 5
10242: EQUAL
10243: IFFALSE 10313
// begin if UnitsInside ( j ) < 3 then
10245: LD_VAR 0 9
10249: PPUSH
10250: CALL_OW 313
10254: PUSH
10255: LD_INT 3
10257: LESS
10258: IFFALSE 10294
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10260: LD_INT 0
10262: PPUSH
10263: LD_INT 5
10265: PUSH
10266: LD_INT 8
10268: PUSH
10269: LD_INT 9
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: PUSH
10277: LD_VAR 0 17
10281: ARRAY
10282: PPUSH
10283: LD_VAR 0 4
10287: PPUSH
10288: CALL_OW 380
10292: GO 10311
// PrepareHuman ( false , i , skill ) ;
10294: LD_INT 0
10296: PPUSH
10297: LD_VAR 0 8
10301: PPUSH
10302: LD_VAR 0 4
10306: PPUSH
10307: CALL_OW 380
// end else
10311: GO 10330
// PrepareHuman ( false , i , skill ) ;
10313: LD_INT 0
10315: PPUSH
10316: LD_VAR 0 8
10320: PPUSH
10321: LD_VAR 0 4
10325: PPUSH
10326: CALL_OW 380
// un := CreateHuman ;
10330: LD_ADDR_VAR 0 14
10334: PUSH
10335: CALL_OW 44
10339: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10340: LD_ADDR_VAR 0 7
10344: PUSH
10345: LD_VAR 0 7
10349: PPUSH
10350: LD_INT 1
10352: PPUSH
10353: LD_VAR 0 14
10357: PPUSH
10358: CALL_OW 2
10362: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10363: LD_VAR 0 14
10367: PPUSH
10368: LD_VAR 0 9
10372: PPUSH
10373: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10377: LD_VAR 0 9
10381: PPUSH
10382: CALL_OW 313
10386: PUSH
10387: LD_INT 6
10389: EQUAL
10390: PUSH
10391: LD_VAR 0 9
10395: PPUSH
10396: CALL_OW 266
10400: PUSH
10401: LD_INT 32
10403: PUSH
10404: LD_INT 31
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: IN
10411: OR
10412: IFFALSE 10226
10414: GO 10223
10416: POP
10417: POP
// end else
10418: GO 10800
// for j = 1 to x do
10420: LD_ADDR_VAR 0 9
10424: PUSH
10425: DOUBLE
10426: LD_INT 1
10428: DEC
10429: ST_TO_ADDR
10430: LD_VAR 0 13
10434: PUSH
10435: FOR_TO
10436: IFFALSE 10798
// begin InitHc ;
10438: CALL_OW 19
// if not f then
10442: LD_VAR 0 12
10446: NOT
10447: IFFALSE 10536
// begin PrepareHuman ( false , i , skill ) ;
10449: LD_INT 0
10451: PPUSH
10452: LD_VAR 0 8
10456: PPUSH
10457: LD_VAR 0 4
10461: PPUSH
10462: CALL_OW 380
// un := CreateHuman ;
10466: LD_ADDR_VAR 0 14
10470: PUSH
10471: CALL_OW 44
10475: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10476: LD_ADDR_VAR 0 7
10480: PUSH
10481: LD_VAR 0 7
10485: PPUSH
10486: LD_INT 1
10488: PPUSH
10489: LD_VAR 0 14
10493: PPUSH
10494: CALL_OW 2
10498: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10499: LD_VAR 0 14
10503: PPUSH
10504: LD_VAR 0 1
10508: PPUSH
10509: CALL_OW 250
10513: PPUSH
10514: LD_VAR 0 1
10518: PPUSH
10519: CALL_OW 251
10523: PPUSH
10524: LD_INT 10
10526: PPUSH
10527: LD_INT 0
10529: PPUSH
10530: CALL_OW 50
// continue ;
10534: GO 10435
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10536: LD_VAR 0 12
10540: PUSH
10541: LD_INT 1
10543: ARRAY
10544: PPUSH
10545: CALL_OW 313
10549: PUSH
10550: LD_VAR 0 12
10554: PUSH
10555: LD_INT 1
10557: ARRAY
10558: PPUSH
10559: CALL_OW 266
10563: PUSH
10564: LD_INT 32
10566: PUSH
10567: LD_INT 31
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: IN
10574: AND
10575: PUSH
10576: LD_VAR 0 12
10580: PUSH
10581: LD_INT 1
10583: ARRAY
10584: PPUSH
10585: CALL_OW 313
10589: PUSH
10590: LD_INT 6
10592: EQUAL
10593: OR
10594: IFFALSE 10614
// f := Delete ( f , 1 ) ;
10596: LD_ADDR_VAR 0 12
10600: PUSH
10601: LD_VAR 0 12
10605: PPUSH
10606: LD_INT 1
10608: PPUSH
10609: CALL_OW 3
10613: ST_TO_ADDR
// if not f then
10614: LD_VAR 0 12
10618: NOT
10619: IFFALSE 10637
// begin x := x + 2 ;
10621: LD_ADDR_VAR 0 13
10625: PUSH
10626: LD_VAR 0 13
10630: PUSH
10631: LD_INT 2
10633: PLUS
10634: ST_TO_ADDR
// continue ;
10635: GO 10435
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10637: LD_VAR 0 12
10641: PUSH
10642: LD_INT 1
10644: ARRAY
10645: PPUSH
10646: CALL_OW 266
10650: PUSH
10651: LD_INT 5
10653: EQUAL
10654: IFFALSE 10728
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10656: LD_VAR 0 12
10660: PUSH
10661: LD_INT 1
10663: ARRAY
10664: PPUSH
10665: CALL_OW 313
10669: PUSH
10670: LD_INT 3
10672: LESS
10673: IFFALSE 10709
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10675: LD_INT 0
10677: PPUSH
10678: LD_INT 5
10680: PUSH
10681: LD_INT 8
10683: PUSH
10684: LD_INT 9
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: PUSH
10692: LD_VAR 0 17
10696: ARRAY
10697: PPUSH
10698: LD_VAR 0 4
10702: PPUSH
10703: CALL_OW 380
10707: GO 10726
// PrepareHuman ( false , i , skill ) ;
10709: LD_INT 0
10711: PPUSH
10712: LD_VAR 0 8
10716: PPUSH
10717: LD_VAR 0 4
10721: PPUSH
10722: CALL_OW 380
// end else
10726: GO 10745
// PrepareHuman ( false , i , skill ) ;
10728: LD_INT 0
10730: PPUSH
10731: LD_VAR 0 8
10735: PPUSH
10736: LD_VAR 0 4
10740: PPUSH
10741: CALL_OW 380
// un := CreateHuman ;
10745: LD_ADDR_VAR 0 14
10749: PUSH
10750: CALL_OW 44
10754: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10755: LD_ADDR_VAR 0 7
10759: PUSH
10760: LD_VAR 0 7
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: LD_VAR 0 14
10772: PPUSH
10773: CALL_OW 2
10777: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10778: LD_VAR 0 14
10782: PPUSH
10783: LD_VAR 0 12
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: CALL_OW 52
// end ;
10796: GO 10435
10798: POP
10799: POP
// end ;
10800: GO 9737
10802: POP
10803: POP
// result := result ^ buildings ;
10804: LD_ADDR_VAR 0 7
10808: PUSH
10809: LD_VAR 0 7
10813: PUSH
10814: LD_VAR 0 18
10818: ADD
10819: ST_TO_ADDR
// end else
10820: GO 10963
// begin for i = 1 to personel do
10822: LD_ADDR_VAR 0 8
10826: PUSH
10827: DOUBLE
10828: LD_INT 1
10830: DEC
10831: ST_TO_ADDR
10832: LD_VAR 0 6
10836: PUSH
10837: FOR_TO
10838: IFFALSE 10961
// begin if i > 4 then
10840: LD_VAR 0 8
10844: PUSH
10845: LD_INT 4
10847: GREATER
10848: IFFALSE 10852
// break ;
10850: GO 10961
// x := personel [ i ] ;
10852: LD_ADDR_VAR 0 13
10856: PUSH
10857: LD_VAR 0 6
10861: PUSH
10862: LD_VAR 0 8
10866: ARRAY
10867: ST_TO_ADDR
// if x = - 1 then
10868: LD_VAR 0 13
10872: PUSH
10873: LD_INT 1
10875: NEG
10876: EQUAL
10877: IFFALSE 10881
// continue ;
10879: GO 10837
// PrepareHuman ( false , i , skill ) ;
10881: LD_INT 0
10883: PPUSH
10884: LD_VAR 0 8
10888: PPUSH
10889: LD_VAR 0 4
10893: PPUSH
10894: CALL_OW 380
// un := CreateHuman ;
10898: LD_ADDR_VAR 0 14
10902: PUSH
10903: CALL_OW 44
10907: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10908: LD_VAR 0 14
10912: PPUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 250
10922: PPUSH
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 251
10932: PPUSH
10933: LD_INT 10
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 50
// result := result ^ un ;
10943: LD_ADDR_VAR 0 7
10947: PUSH
10948: LD_VAR 0 7
10952: PUSH
10953: LD_VAR 0 14
10957: ADD
10958: ST_TO_ADDR
// end ;
10959: GO 10837
10961: POP
10962: POP
// end ; end ;
10963: LD_VAR 0 7
10967: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10968: LD_INT 0
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
10978: PPUSH
10979: PPUSH
10980: PPUSH
10981: PPUSH
10982: PPUSH
10983: PPUSH
10984: PPUSH
10985: PPUSH
// result := false ;
10986: LD_ADDR_VAR 0 3
10990: PUSH
10991: LD_INT 0
10993: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10994: LD_VAR 0 1
10998: NOT
10999: PUSH
11000: LD_VAR 0 1
11004: PPUSH
11005: CALL_OW 266
11009: PUSH
11010: LD_INT 32
11012: PUSH
11013: LD_INT 33
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: IN
11020: NOT
11021: OR
11022: IFFALSE 11026
// exit ;
11024: GO 12135
// nat := GetNation ( tower ) ;
11026: LD_ADDR_VAR 0 12
11030: PUSH
11031: LD_VAR 0 1
11035: PPUSH
11036: CALL_OW 248
11040: ST_TO_ADDR
// side := GetSide ( tower ) ;
11041: LD_ADDR_VAR 0 16
11045: PUSH
11046: LD_VAR 0 1
11050: PPUSH
11051: CALL_OW 255
11055: ST_TO_ADDR
// x := GetX ( tower ) ;
11056: LD_ADDR_VAR 0 10
11060: PUSH
11061: LD_VAR 0 1
11065: PPUSH
11066: CALL_OW 250
11070: ST_TO_ADDR
// y := GetY ( tower ) ;
11071: LD_ADDR_VAR 0 11
11075: PUSH
11076: LD_VAR 0 1
11080: PPUSH
11081: CALL_OW 251
11085: ST_TO_ADDR
// if not x or not y then
11086: LD_VAR 0 10
11090: NOT
11091: PUSH
11092: LD_VAR 0 11
11096: NOT
11097: OR
11098: IFFALSE 11102
// exit ;
11100: GO 12135
// weapon := 0 ;
11102: LD_ADDR_VAR 0 18
11106: PUSH
11107: LD_INT 0
11109: ST_TO_ADDR
// fac_list := [ ] ;
11110: LD_ADDR_VAR 0 17
11114: PUSH
11115: EMPTY
11116: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11117: LD_ADDR_VAR 0 6
11121: PUSH
11122: LD_VAR 0 1
11126: PPUSH
11127: CALL_OW 274
11131: PPUSH
11132: LD_VAR 0 2
11136: PPUSH
11137: LD_INT 0
11139: PPUSH
11140: CALL 8706 0 3
11144: PPUSH
11145: LD_INT 30
11147: PUSH
11148: LD_INT 3
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PPUSH
11155: CALL_OW 72
11159: ST_TO_ADDR
// if not factories then
11160: LD_VAR 0 6
11164: NOT
11165: IFFALSE 11169
// exit ;
11167: GO 12135
// for i in factories do
11169: LD_ADDR_VAR 0 8
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: FOR_IN
11180: IFFALSE 11205
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11182: LD_ADDR_VAR 0 17
11186: PUSH
11187: LD_VAR 0 17
11191: PUSH
11192: LD_VAR 0 8
11196: PPUSH
11197: CALL_OW 478
11201: UNION
11202: ST_TO_ADDR
11203: GO 11179
11205: POP
11206: POP
// if not fac_list then
11207: LD_VAR 0 17
11211: NOT
11212: IFFALSE 11216
// exit ;
11214: GO 12135
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11216: LD_ADDR_VAR 0 5
11220: PUSH
11221: LD_INT 4
11223: PUSH
11224: LD_INT 5
11226: PUSH
11227: LD_INT 9
11229: PUSH
11230: LD_INT 10
11232: PUSH
11233: LD_INT 6
11235: PUSH
11236: LD_INT 7
11238: PUSH
11239: LD_INT 11
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 27
11253: PUSH
11254: LD_INT 28
11256: PUSH
11257: LD_INT 26
11259: PUSH
11260: LD_INT 30
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 43
11271: PUSH
11272: LD_INT 44
11274: PUSH
11275: LD_INT 46
11277: PUSH
11278: LD_INT 45
11280: PUSH
11281: LD_INT 47
11283: PUSH
11284: LD_INT 49
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: PUSH
11300: LD_VAR 0 12
11304: ARRAY
11305: ST_TO_ADDR
// list := list isect fac_list ;
11306: LD_ADDR_VAR 0 5
11310: PUSH
11311: LD_VAR 0 5
11315: PUSH
11316: LD_VAR 0 17
11320: ISECT
11321: ST_TO_ADDR
// if not list then
11322: LD_VAR 0 5
11326: NOT
11327: IFFALSE 11331
// exit ;
11329: GO 12135
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11331: LD_VAR 0 12
11335: PUSH
11336: LD_INT 3
11338: EQUAL
11339: PUSH
11340: LD_INT 49
11342: PUSH
11343: LD_VAR 0 5
11347: IN
11348: AND
11349: PUSH
11350: LD_INT 31
11352: PPUSH
11353: LD_VAR 0 16
11357: PPUSH
11358: CALL_OW 321
11362: PUSH
11363: LD_INT 2
11365: EQUAL
11366: AND
11367: IFFALSE 11427
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11369: LD_INT 22
11371: PUSH
11372: LD_VAR 0 16
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 35
11383: PUSH
11384: LD_INT 49
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 91
11393: PUSH
11394: LD_VAR 0 1
11398: PUSH
11399: LD_INT 10
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: PPUSH
11412: CALL_OW 69
11416: NOT
11417: IFFALSE 11427
// weapon := ru_time_lapser ;
11419: LD_ADDR_VAR 0 18
11423: PUSH
11424: LD_INT 49
11426: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11427: LD_VAR 0 12
11431: PUSH
11432: LD_INT 1
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: IN
11442: PUSH
11443: LD_INT 11
11445: PUSH
11446: LD_VAR 0 5
11450: IN
11451: PUSH
11452: LD_INT 30
11454: PUSH
11455: LD_VAR 0 5
11459: IN
11460: OR
11461: AND
11462: PUSH
11463: LD_INT 6
11465: PPUSH
11466: LD_VAR 0 16
11470: PPUSH
11471: CALL_OW 321
11475: PUSH
11476: LD_INT 2
11478: EQUAL
11479: AND
11480: IFFALSE 11645
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11482: LD_INT 22
11484: PUSH
11485: LD_VAR 0 16
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 2
11496: PUSH
11497: LD_INT 35
11499: PUSH
11500: LD_INT 11
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 35
11509: PUSH
11510: LD_INT 30
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 91
11524: PUSH
11525: LD_VAR 0 1
11529: PUSH
11530: LD_INT 18
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: PPUSH
11543: CALL_OW 69
11547: NOT
11548: PUSH
11549: LD_INT 22
11551: PUSH
11552: LD_VAR 0 16
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: LD_INT 30
11566: PUSH
11567: LD_INT 32
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 30
11576: PUSH
11577: LD_INT 33
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 91
11591: PUSH
11592: LD_VAR 0 1
11596: PUSH
11597: LD_INT 12
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: PUSH
11610: EMPTY
11611: LIST
11612: PPUSH
11613: CALL_OW 69
11617: PUSH
11618: LD_INT 2
11620: GREATER
11621: AND
11622: IFFALSE 11645
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11624: LD_ADDR_VAR 0 18
11628: PUSH
11629: LD_INT 11
11631: PUSH
11632: LD_INT 30
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_VAR 0 12
11643: ARRAY
11644: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11645: LD_VAR 0 18
11649: NOT
11650: PUSH
11651: LD_INT 40
11653: PPUSH
11654: LD_VAR 0 16
11658: PPUSH
11659: CALL_OW 321
11663: PUSH
11664: LD_INT 2
11666: EQUAL
11667: AND
11668: PUSH
11669: LD_INT 7
11671: PUSH
11672: LD_VAR 0 5
11676: IN
11677: PUSH
11678: LD_INT 28
11680: PUSH
11681: LD_VAR 0 5
11685: IN
11686: OR
11687: PUSH
11688: LD_INT 45
11690: PUSH
11691: LD_VAR 0 5
11695: IN
11696: OR
11697: AND
11698: IFFALSE 11952
// begin hex := GetHexInfo ( x , y ) ;
11700: LD_ADDR_VAR 0 4
11704: PUSH
11705: LD_VAR 0 10
11709: PPUSH
11710: LD_VAR 0 11
11714: PPUSH
11715: CALL_OW 546
11719: ST_TO_ADDR
// if hex [ 1 ] then
11720: LD_VAR 0 4
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: IFFALSE 11732
// exit ;
11730: GO 12135
// height := hex [ 2 ] ;
11732: LD_ADDR_VAR 0 15
11736: PUSH
11737: LD_VAR 0 4
11741: PUSH
11742: LD_INT 2
11744: ARRAY
11745: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11746: LD_ADDR_VAR 0 14
11750: PUSH
11751: LD_INT 0
11753: PUSH
11754: LD_INT 2
11756: PUSH
11757: LD_INT 3
11759: PUSH
11760: LD_INT 5
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: ST_TO_ADDR
// for i in tmp do
11769: LD_ADDR_VAR 0 8
11773: PUSH
11774: LD_VAR 0 14
11778: PUSH
11779: FOR_IN
11780: IFFALSE 11950
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11782: LD_ADDR_VAR 0 9
11786: PUSH
11787: LD_VAR 0 10
11791: PPUSH
11792: LD_VAR 0 8
11796: PPUSH
11797: LD_INT 5
11799: PPUSH
11800: CALL_OW 272
11804: PUSH
11805: LD_VAR 0 11
11809: PPUSH
11810: LD_VAR 0 8
11814: PPUSH
11815: LD_INT 5
11817: PPUSH
11818: CALL_OW 273
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11827: LD_VAR 0 9
11831: PUSH
11832: LD_INT 1
11834: ARRAY
11835: PPUSH
11836: LD_VAR 0 9
11840: PUSH
11841: LD_INT 2
11843: ARRAY
11844: PPUSH
11845: CALL_OW 488
11849: IFFALSE 11948
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11851: LD_ADDR_VAR 0 4
11855: PUSH
11856: LD_VAR 0 9
11860: PUSH
11861: LD_INT 1
11863: ARRAY
11864: PPUSH
11865: LD_VAR 0 9
11869: PUSH
11870: LD_INT 2
11872: ARRAY
11873: PPUSH
11874: CALL_OW 546
11878: ST_TO_ADDR
// if hex [ 1 ] then
11879: LD_VAR 0 4
11883: PUSH
11884: LD_INT 1
11886: ARRAY
11887: IFFALSE 11891
// continue ;
11889: GO 11779
// h := hex [ 2 ] ;
11891: LD_ADDR_VAR 0 13
11895: PUSH
11896: LD_VAR 0 4
11900: PUSH
11901: LD_INT 2
11903: ARRAY
11904: ST_TO_ADDR
// if h + 7 < height then
11905: LD_VAR 0 13
11909: PUSH
11910: LD_INT 7
11912: PLUS
11913: PUSH
11914: LD_VAR 0 15
11918: LESS
11919: IFFALSE 11948
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11921: LD_ADDR_VAR 0 18
11925: PUSH
11926: LD_INT 7
11928: PUSH
11929: LD_INT 28
11931: PUSH
11932: LD_INT 45
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: PUSH
11940: LD_VAR 0 12
11944: ARRAY
11945: ST_TO_ADDR
// break ;
11946: GO 11950
// end ; end ; end ;
11948: GO 11779
11950: POP
11951: POP
// end ; if not weapon then
11952: LD_VAR 0 18
11956: NOT
11957: IFFALSE 12017
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11959: LD_ADDR_VAR 0 5
11963: PUSH
11964: LD_VAR 0 5
11968: PUSH
11969: LD_INT 11
11971: PUSH
11972: LD_INT 30
11974: PUSH
11975: LD_INT 49
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: DIFF
11983: ST_TO_ADDR
// if not list then
11984: LD_VAR 0 5
11988: NOT
11989: IFFALSE 11993
// exit ;
11991: GO 12135
// weapon := list [ rand ( 1 , list ) ] ;
11993: LD_ADDR_VAR 0 18
11997: PUSH
11998: LD_VAR 0 5
12002: PUSH
12003: LD_INT 1
12005: PPUSH
12006: LD_VAR 0 5
12010: PPUSH
12011: CALL_OW 12
12015: ARRAY
12016: ST_TO_ADDR
// end ; if weapon then
12017: LD_VAR 0 18
12021: IFFALSE 12135
// begin tmp := CostOfWeapon ( weapon ) ;
12023: LD_ADDR_VAR 0 14
12027: PUSH
12028: LD_VAR 0 18
12032: PPUSH
12033: CALL_OW 451
12037: ST_TO_ADDR
// j := GetBase ( tower ) ;
12038: LD_ADDR_VAR 0 9
12042: PUSH
12043: LD_VAR 0 1
12047: PPUSH
12048: CALL_OW 274
12052: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12053: LD_VAR 0 9
12057: PPUSH
12058: LD_INT 1
12060: PPUSH
12061: CALL_OW 275
12065: PUSH
12066: LD_VAR 0 14
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: GREATEREQUAL
12075: PUSH
12076: LD_VAR 0 9
12080: PPUSH
12081: LD_INT 2
12083: PPUSH
12084: CALL_OW 275
12088: PUSH
12089: LD_VAR 0 14
12093: PUSH
12094: LD_INT 2
12096: ARRAY
12097: GREATEREQUAL
12098: AND
12099: PUSH
12100: LD_VAR 0 9
12104: PPUSH
12105: LD_INT 3
12107: PPUSH
12108: CALL_OW 275
12112: PUSH
12113: LD_VAR 0 14
12117: PUSH
12118: LD_INT 3
12120: ARRAY
12121: GREATEREQUAL
12122: AND
12123: IFFALSE 12135
// result := weapon ;
12125: LD_ADDR_VAR 0 3
12129: PUSH
12130: LD_VAR 0 18
12134: ST_TO_ADDR
// end ; end ;
12135: LD_VAR 0 3
12139: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12140: LD_INT 0
12142: PPUSH
12143: PPUSH
// result := true ;
12144: LD_ADDR_VAR 0 3
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// if array1 = array2 then
12152: LD_VAR 0 1
12156: PUSH
12157: LD_VAR 0 2
12161: EQUAL
12162: IFFALSE 12222
// begin for i = 1 to array1 do
12164: LD_ADDR_VAR 0 4
12168: PUSH
12169: DOUBLE
12170: LD_INT 1
12172: DEC
12173: ST_TO_ADDR
12174: LD_VAR 0 1
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12218
// if array1 [ i ] <> array2 [ i ] then
12182: LD_VAR 0 1
12186: PUSH
12187: LD_VAR 0 4
12191: ARRAY
12192: PUSH
12193: LD_VAR 0 2
12197: PUSH
12198: LD_VAR 0 4
12202: ARRAY
12203: NONEQUAL
12204: IFFALSE 12216
// begin result := false ;
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: LD_INT 0
12213: ST_TO_ADDR
// break ;
12214: GO 12218
// end ;
12216: GO 12179
12218: POP
12219: POP
// end else
12220: GO 12230
// result := false ;
12222: LD_ADDR_VAR 0 3
12226: PUSH
12227: LD_INT 0
12229: ST_TO_ADDR
// end ;
12230: LD_VAR 0 3
12234: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12235: LD_INT 0
12237: PPUSH
12238: PPUSH
// if not array1 or not array2 then
12239: LD_VAR 0 1
12243: NOT
12244: PUSH
12245: LD_VAR 0 2
12249: NOT
12250: OR
12251: IFFALSE 12255
// exit ;
12253: GO 12319
// result := true ;
12255: LD_ADDR_VAR 0 3
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// for i = 1 to array1 do
12263: LD_ADDR_VAR 0 4
12267: PUSH
12268: DOUBLE
12269: LD_INT 1
12271: DEC
12272: ST_TO_ADDR
12273: LD_VAR 0 1
12277: PUSH
12278: FOR_TO
12279: IFFALSE 12317
// if array1 [ i ] <> array2 [ i ] then
12281: LD_VAR 0 1
12285: PUSH
12286: LD_VAR 0 4
12290: ARRAY
12291: PUSH
12292: LD_VAR 0 2
12296: PUSH
12297: LD_VAR 0 4
12301: ARRAY
12302: NONEQUAL
12303: IFFALSE 12315
// begin result := false ;
12305: LD_ADDR_VAR 0 3
12309: PUSH
12310: LD_INT 0
12312: ST_TO_ADDR
// break ;
12313: GO 12317
// end ;
12315: GO 12278
12317: POP
12318: POP
// end ;
12319: LD_VAR 0 3
12323: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12324: LD_INT 0
12326: PPUSH
12327: PPUSH
12328: PPUSH
// pom := GetBase ( fac ) ;
12329: LD_ADDR_VAR 0 5
12333: PUSH
12334: LD_VAR 0 1
12338: PPUSH
12339: CALL_OW 274
12343: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12344: LD_ADDR_VAR 0 4
12348: PUSH
12349: LD_VAR 0 2
12353: PUSH
12354: LD_INT 1
12356: ARRAY
12357: PPUSH
12358: LD_VAR 0 2
12362: PUSH
12363: LD_INT 2
12365: ARRAY
12366: PPUSH
12367: LD_VAR 0 2
12371: PUSH
12372: LD_INT 3
12374: ARRAY
12375: PPUSH
12376: LD_VAR 0 2
12380: PUSH
12381: LD_INT 4
12383: ARRAY
12384: PPUSH
12385: CALL_OW 449
12389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12390: LD_ADDR_VAR 0 3
12394: PUSH
12395: LD_VAR 0 5
12399: PPUSH
12400: LD_INT 1
12402: PPUSH
12403: CALL_OW 275
12407: PUSH
12408: LD_VAR 0 4
12412: PUSH
12413: LD_INT 1
12415: ARRAY
12416: GREATEREQUAL
12417: PUSH
12418: LD_VAR 0 5
12422: PPUSH
12423: LD_INT 2
12425: PPUSH
12426: CALL_OW 275
12430: PUSH
12431: LD_VAR 0 4
12435: PUSH
12436: LD_INT 2
12438: ARRAY
12439: GREATEREQUAL
12440: AND
12441: PUSH
12442: LD_VAR 0 5
12446: PPUSH
12447: LD_INT 3
12449: PPUSH
12450: CALL_OW 275
12454: PUSH
12455: LD_VAR 0 4
12459: PUSH
12460: LD_INT 3
12462: ARRAY
12463: GREATEREQUAL
12464: AND
12465: ST_TO_ADDR
// end ;
12466: LD_VAR 0 3
12470: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12471: LD_INT 0
12473: PPUSH
12474: PPUSH
12475: PPUSH
12476: PPUSH
// pom := GetBase ( building ) ;
12477: LD_ADDR_VAR 0 3
12481: PUSH
12482: LD_VAR 0 1
12486: PPUSH
12487: CALL_OW 274
12491: ST_TO_ADDR
// if not pom then
12492: LD_VAR 0 3
12496: NOT
12497: IFFALSE 12501
// exit ;
12499: GO 12671
// btype := GetBType ( building ) ;
12501: LD_ADDR_VAR 0 5
12505: PUSH
12506: LD_VAR 0 1
12510: PPUSH
12511: CALL_OW 266
12515: ST_TO_ADDR
// if btype = b_armoury then
12516: LD_VAR 0 5
12520: PUSH
12521: LD_INT 4
12523: EQUAL
12524: IFFALSE 12534
// btype := b_barracks ;
12526: LD_ADDR_VAR 0 5
12530: PUSH
12531: LD_INT 5
12533: ST_TO_ADDR
// if btype = b_depot then
12534: LD_VAR 0 5
12538: PUSH
12539: LD_INT 0
12541: EQUAL
12542: IFFALSE 12552
// btype := b_warehouse ;
12544: LD_ADDR_VAR 0 5
12548: PUSH
12549: LD_INT 1
12551: ST_TO_ADDR
// if btype = b_workshop then
12552: LD_VAR 0 5
12556: PUSH
12557: LD_INT 2
12559: EQUAL
12560: IFFALSE 12570
// btype := b_factory ;
12562: LD_ADDR_VAR 0 5
12566: PUSH
12567: LD_INT 3
12569: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12570: LD_ADDR_VAR 0 4
12574: PUSH
12575: LD_VAR 0 5
12579: PPUSH
12580: LD_VAR 0 1
12584: PPUSH
12585: CALL_OW 248
12589: PPUSH
12590: CALL_OW 450
12594: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12595: LD_ADDR_VAR 0 2
12599: PUSH
12600: LD_VAR 0 3
12604: PPUSH
12605: LD_INT 1
12607: PPUSH
12608: CALL_OW 275
12612: PUSH
12613: LD_VAR 0 4
12617: PUSH
12618: LD_INT 1
12620: ARRAY
12621: GREATEREQUAL
12622: PUSH
12623: LD_VAR 0 3
12627: PPUSH
12628: LD_INT 2
12630: PPUSH
12631: CALL_OW 275
12635: PUSH
12636: LD_VAR 0 4
12640: PUSH
12641: LD_INT 2
12643: ARRAY
12644: GREATEREQUAL
12645: AND
12646: PUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 3
12654: PPUSH
12655: CALL_OW 275
12659: PUSH
12660: LD_VAR 0 4
12664: PUSH
12665: LD_INT 3
12667: ARRAY
12668: GREATEREQUAL
12669: AND
12670: ST_TO_ADDR
// end ;
12671: LD_VAR 0 2
12675: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12676: LD_INT 0
12678: PPUSH
12679: PPUSH
12680: PPUSH
// pom := GetBase ( building ) ;
12681: LD_ADDR_VAR 0 4
12685: PUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL_OW 274
12695: ST_TO_ADDR
// if not pom then
12696: LD_VAR 0 4
12700: NOT
12701: IFFALSE 12705
// exit ;
12703: GO 12806
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12705: LD_ADDR_VAR 0 5
12709: PUSH
12710: LD_VAR 0 2
12714: PPUSH
12715: LD_VAR 0 1
12719: PPUSH
12720: CALL_OW 248
12724: PPUSH
12725: CALL_OW 450
12729: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12730: LD_ADDR_VAR 0 3
12734: PUSH
12735: LD_VAR 0 4
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 275
12747: PUSH
12748: LD_VAR 0 5
12752: PUSH
12753: LD_INT 1
12755: ARRAY
12756: GREATEREQUAL
12757: PUSH
12758: LD_VAR 0 4
12762: PPUSH
12763: LD_INT 2
12765: PPUSH
12766: CALL_OW 275
12770: PUSH
12771: LD_VAR 0 5
12775: PUSH
12776: LD_INT 2
12778: ARRAY
12779: GREATEREQUAL
12780: AND
12781: PUSH
12782: LD_VAR 0 4
12786: PPUSH
12787: LD_INT 3
12789: PPUSH
12790: CALL_OW 275
12794: PUSH
12795: LD_VAR 0 5
12799: PUSH
12800: LD_INT 3
12802: ARRAY
12803: GREATEREQUAL
12804: AND
12805: ST_TO_ADDR
// end ;
12806: LD_VAR 0 3
12810: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12811: LD_INT 0
12813: PPUSH
12814: PPUSH
12815: PPUSH
12816: PPUSH
12817: PPUSH
12818: PPUSH
12819: PPUSH
12820: PPUSH
12821: PPUSH
12822: PPUSH
12823: PPUSH
// result := false ;
12824: LD_ADDR_VAR 0 8
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12832: LD_VAR 0 5
12836: NOT
12837: PUSH
12838: LD_VAR 0 1
12842: NOT
12843: OR
12844: PUSH
12845: LD_VAR 0 2
12849: NOT
12850: OR
12851: PUSH
12852: LD_VAR 0 3
12856: NOT
12857: OR
12858: IFFALSE 12862
// exit ;
12860: GO 13676
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12862: LD_ADDR_VAR 0 14
12866: PUSH
12867: LD_VAR 0 1
12871: PPUSH
12872: LD_VAR 0 2
12876: PPUSH
12877: LD_VAR 0 3
12881: PPUSH
12882: LD_VAR 0 4
12886: PPUSH
12887: LD_VAR 0 5
12891: PUSH
12892: LD_INT 1
12894: ARRAY
12895: PPUSH
12896: CALL_OW 248
12900: PPUSH
12901: LD_INT 0
12903: PPUSH
12904: CALL 14929 0 6
12908: ST_TO_ADDR
// if not hexes then
12909: LD_VAR 0 14
12913: NOT
12914: IFFALSE 12918
// exit ;
12916: GO 13676
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12918: LD_ADDR_VAR 0 17
12922: PUSH
12923: LD_VAR 0 5
12927: PPUSH
12928: LD_INT 22
12930: PUSH
12931: LD_VAR 0 13
12935: PPUSH
12936: CALL_OW 255
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 2
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 0
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 30
12960: PUSH
12961: LD_INT 1
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 72
12981: ST_TO_ADDR
// for i = 1 to hexes do
12982: LD_ADDR_VAR 0 9
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_VAR 0 14
12996: PUSH
12997: FOR_TO
12998: IFFALSE 13674
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13000: LD_ADDR_VAR 0 13
13004: PUSH
13005: LD_VAR 0 14
13009: PUSH
13010: LD_VAR 0 9
13014: ARRAY
13015: PUSH
13016: LD_INT 1
13018: ARRAY
13019: PPUSH
13020: LD_VAR 0 14
13024: PUSH
13025: LD_VAR 0 9
13029: ARRAY
13030: PUSH
13031: LD_INT 2
13033: ARRAY
13034: PPUSH
13035: CALL_OW 428
13039: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13040: LD_VAR 0 14
13044: PUSH
13045: LD_VAR 0 9
13049: ARRAY
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PPUSH
13055: LD_VAR 0 14
13059: PUSH
13060: LD_VAR 0 9
13064: ARRAY
13065: PUSH
13066: LD_INT 2
13068: ARRAY
13069: PPUSH
13070: CALL_OW 351
13074: PUSH
13075: LD_VAR 0 14
13079: PUSH
13080: LD_VAR 0 9
13084: ARRAY
13085: PUSH
13086: LD_INT 1
13088: ARRAY
13089: PPUSH
13090: LD_VAR 0 14
13094: PUSH
13095: LD_VAR 0 9
13099: ARRAY
13100: PUSH
13101: LD_INT 2
13103: ARRAY
13104: PPUSH
13105: CALL_OW 488
13109: NOT
13110: OR
13111: PUSH
13112: LD_VAR 0 13
13116: PPUSH
13117: CALL_OW 247
13121: PUSH
13122: LD_INT 3
13124: EQUAL
13125: OR
13126: IFFALSE 13132
// exit ;
13128: POP
13129: POP
13130: GO 13676
// if not tmp then
13132: LD_VAR 0 13
13136: NOT
13137: IFFALSE 13141
// continue ;
13139: GO 12997
// result := true ;
13141: LD_ADDR_VAR 0 8
13145: PUSH
13146: LD_INT 1
13148: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13149: LD_VAR 0 6
13153: PUSH
13154: LD_VAR 0 13
13158: PPUSH
13159: CALL_OW 247
13163: PUSH
13164: LD_INT 2
13166: EQUAL
13167: AND
13168: PUSH
13169: LD_VAR 0 13
13173: PPUSH
13174: CALL_OW 263
13178: PUSH
13179: LD_INT 1
13181: EQUAL
13182: AND
13183: IFFALSE 13347
// begin if IsDrivenBy ( tmp ) then
13185: LD_VAR 0 13
13189: PPUSH
13190: CALL_OW 311
13194: IFFALSE 13198
// continue ;
13196: GO 12997
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13198: LD_VAR 0 6
13202: PPUSH
13203: LD_INT 3
13205: PUSH
13206: LD_INT 60
13208: PUSH
13209: EMPTY
13210: LIST
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: LD_INT 55
13221: PUSH
13222: EMPTY
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 72
13237: IFFALSE 13345
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13239: LD_ADDR_VAR 0 18
13243: PUSH
13244: LD_VAR 0 6
13248: PPUSH
13249: LD_INT 3
13251: PUSH
13252: LD_INT 60
13254: PUSH
13255: EMPTY
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 3
13264: PUSH
13265: LD_INT 55
13267: PUSH
13268: EMPTY
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PPUSH
13279: CALL_OW 72
13283: PUSH
13284: LD_INT 1
13286: ARRAY
13287: ST_TO_ADDR
// if IsInUnit ( driver ) then
13288: LD_VAR 0 18
13292: PPUSH
13293: CALL_OW 310
13297: IFFALSE 13308
// ComExit ( driver ) ;
13299: LD_VAR 0 18
13303: PPUSH
13304: CALL 38730 0 1
// AddComEnterUnit ( driver , tmp ) ;
13308: LD_VAR 0 18
13312: PPUSH
13313: LD_VAR 0 13
13317: PPUSH
13318: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13322: LD_VAR 0 18
13326: PPUSH
13327: LD_VAR 0 7
13331: PPUSH
13332: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13336: LD_VAR 0 18
13340: PPUSH
13341: CALL_OW 181
// end ; continue ;
13345: GO 12997
// end ; if not cleaners or not tmp in cleaners then
13347: LD_VAR 0 6
13351: NOT
13352: PUSH
13353: LD_VAR 0 13
13357: PUSH
13358: LD_VAR 0 6
13362: IN
13363: NOT
13364: OR
13365: IFFALSE 13672
// begin if dep then
13367: LD_VAR 0 17
13371: IFFALSE 13507
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13373: LD_ADDR_VAR 0 16
13377: PUSH
13378: LD_VAR 0 17
13382: PUSH
13383: LD_INT 1
13385: ARRAY
13386: PPUSH
13387: CALL_OW 250
13391: PPUSH
13392: LD_VAR 0 17
13396: PUSH
13397: LD_INT 1
13399: ARRAY
13400: PPUSH
13401: CALL_OW 254
13405: PPUSH
13406: LD_INT 5
13408: PPUSH
13409: CALL_OW 272
13413: PUSH
13414: LD_VAR 0 17
13418: PUSH
13419: LD_INT 1
13421: ARRAY
13422: PPUSH
13423: CALL_OW 251
13427: PPUSH
13428: LD_VAR 0 17
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PPUSH
13437: CALL_OW 254
13441: PPUSH
13442: LD_INT 5
13444: PPUSH
13445: CALL_OW 273
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13454: LD_VAR 0 16
13458: PUSH
13459: LD_INT 1
13461: ARRAY
13462: PPUSH
13463: LD_VAR 0 16
13467: PUSH
13468: LD_INT 2
13470: ARRAY
13471: PPUSH
13472: CALL_OW 488
13476: IFFALSE 13507
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13478: LD_VAR 0 13
13482: PPUSH
13483: LD_VAR 0 16
13487: PUSH
13488: LD_INT 1
13490: ARRAY
13491: PPUSH
13492: LD_VAR 0 16
13496: PUSH
13497: LD_INT 2
13499: ARRAY
13500: PPUSH
13501: CALL_OW 111
// continue ;
13505: GO 12997
// end ; end ; r := GetDir ( tmp ) ;
13507: LD_ADDR_VAR 0 15
13511: PUSH
13512: LD_VAR 0 13
13516: PPUSH
13517: CALL_OW 254
13521: ST_TO_ADDR
// if r = 5 then
13522: LD_VAR 0 15
13526: PUSH
13527: LD_INT 5
13529: EQUAL
13530: IFFALSE 13540
// r := 0 ;
13532: LD_ADDR_VAR 0 15
13536: PUSH
13537: LD_INT 0
13539: ST_TO_ADDR
// for j = r to 5 do
13540: LD_ADDR_VAR 0 10
13544: PUSH
13545: DOUBLE
13546: LD_VAR 0 15
13550: DEC
13551: ST_TO_ADDR
13552: LD_INT 5
13554: PUSH
13555: FOR_TO
13556: IFFALSE 13670
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13558: LD_ADDR_VAR 0 11
13562: PUSH
13563: LD_VAR 0 13
13567: PPUSH
13568: CALL_OW 250
13572: PPUSH
13573: LD_VAR 0 10
13577: PPUSH
13578: LD_INT 2
13580: PPUSH
13581: CALL_OW 272
13585: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13586: LD_ADDR_VAR 0 12
13590: PUSH
13591: LD_VAR 0 13
13595: PPUSH
13596: CALL_OW 251
13600: PPUSH
13601: LD_VAR 0 10
13605: PPUSH
13606: LD_INT 2
13608: PPUSH
13609: CALL_OW 273
13613: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13614: LD_VAR 0 11
13618: PPUSH
13619: LD_VAR 0 12
13623: PPUSH
13624: CALL_OW 488
13628: PUSH
13629: LD_VAR 0 11
13633: PPUSH
13634: LD_VAR 0 12
13638: PPUSH
13639: CALL_OW 428
13643: NOT
13644: AND
13645: IFFALSE 13668
// begin ComMoveXY ( tmp , _x , _y ) ;
13647: LD_VAR 0 13
13651: PPUSH
13652: LD_VAR 0 11
13656: PPUSH
13657: LD_VAR 0 12
13661: PPUSH
13662: CALL_OW 111
// break ;
13666: GO 13670
// end ; end ;
13668: GO 13555
13670: POP
13671: POP
// end ; end ;
13672: GO 12997
13674: POP
13675: POP
// end ;
13676: LD_VAR 0 8
13680: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13681: LD_INT 0
13683: PPUSH
// result := true ;
13684: LD_ADDR_VAR 0 3
13688: PUSH
13689: LD_INT 1
13691: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13692: LD_VAR 0 2
13696: PUSH
13697: LD_INT 24
13699: DOUBLE
13700: EQUAL
13701: IFTRUE 13711
13703: LD_INT 33
13705: DOUBLE
13706: EQUAL
13707: IFTRUE 13711
13709: GO 13736
13711: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13712: LD_ADDR_VAR 0 3
13716: PUSH
13717: LD_INT 32
13719: PPUSH
13720: LD_VAR 0 1
13724: PPUSH
13725: CALL_OW 321
13729: PUSH
13730: LD_INT 2
13732: EQUAL
13733: ST_TO_ADDR
13734: GO 14052
13736: LD_INT 20
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13769
13744: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13745: LD_ADDR_VAR 0 3
13749: PUSH
13750: LD_INT 6
13752: PPUSH
13753: LD_VAR 0 1
13757: PPUSH
13758: CALL_OW 321
13762: PUSH
13763: LD_INT 2
13765: EQUAL
13766: ST_TO_ADDR
13767: GO 14052
13769: LD_INT 22
13771: DOUBLE
13772: EQUAL
13773: IFTRUE 13783
13775: LD_INT 36
13777: DOUBLE
13778: EQUAL
13779: IFTRUE 13783
13781: GO 13808
13783: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13784: LD_ADDR_VAR 0 3
13788: PUSH
13789: LD_INT 15
13791: PPUSH
13792: LD_VAR 0 1
13796: PPUSH
13797: CALL_OW 321
13801: PUSH
13802: LD_INT 2
13804: EQUAL
13805: ST_TO_ADDR
13806: GO 14052
13808: LD_INT 30
13810: DOUBLE
13811: EQUAL
13812: IFTRUE 13816
13814: GO 13841
13816: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13817: LD_ADDR_VAR 0 3
13821: PUSH
13822: LD_INT 20
13824: PPUSH
13825: LD_VAR 0 1
13829: PPUSH
13830: CALL_OW 321
13834: PUSH
13835: LD_INT 2
13837: EQUAL
13838: ST_TO_ADDR
13839: GO 14052
13841: LD_INT 28
13843: DOUBLE
13844: EQUAL
13845: IFTRUE 13855
13847: LD_INT 21
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13880
13855: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_INT 21
13863: PPUSH
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 321
13873: PUSH
13874: LD_INT 2
13876: EQUAL
13877: ST_TO_ADDR
13878: GO 14052
13880: LD_INT 16
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 13913
13888: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13889: LD_ADDR_VAR 0 3
13893: PUSH
13894: LD_INT 84
13896: PPUSH
13897: LD_VAR 0 1
13901: PPUSH
13902: CALL_OW 321
13906: PUSH
13907: LD_INT 2
13909: EQUAL
13910: ST_TO_ADDR
13911: GO 14052
13913: LD_INT 19
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13927
13919: LD_INT 23
13921: DOUBLE
13922: EQUAL
13923: IFTRUE 13927
13925: GO 13952
13927: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13928: LD_ADDR_VAR 0 3
13932: PUSH
13933: LD_INT 83
13935: PPUSH
13936: LD_VAR 0 1
13940: PPUSH
13941: CALL_OW 321
13945: PUSH
13946: LD_INT 2
13948: EQUAL
13949: ST_TO_ADDR
13950: GO 14052
13952: LD_INT 17
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13985
13960: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: LD_INT 39
13968: PPUSH
13969: LD_VAR 0 1
13973: PPUSH
13974: CALL_OW 321
13978: PUSH
13979: LD_INT 2
13981: EQUAL
13982: ST_TO_ADDR
13983: GO 14052
13985: LD_INT 18
13987: DOUBLE
13988: EQUAL
13989: IFTRUE 13993
13991: GO 14018
13993: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13994: LD_ADDR_VAR 0 3
13998: PUSH
13999: LD_INT 40
14001: PPUSH
14002: LD_VAR 0 1
14006: PPUSH
14007: CALL_OW 321
14011: PUSH
14012: LD_INT 2
14014: EQUAL
14015: ST_TO_ADDR
14016: GO 14052
14018: LD_INT 27
14020: DOUBLE
14021: EQUAL
14022: IFTRUE 14026
14024: GO 14051
14026: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14027: LD_ADDR_VAR 0 3
14031: PUSH
14032: LD_INT 35
14034: PPUSH
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 321
14044: PUSH
14045: LD_INT 2
14047: EQUAL
14048: ST_TO_ADDR
14049: GO 14052
14051: POP
// end ;
14052: LD_VAR 0 3
14056: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14057: LD_INT 0
14059: PPUSH
14060: PPUSH
14061: PPUSH
14062: PPUSH
14063: PPUSH
14064: PPUSH
14065: PPUSH
14066: PPUSH
14067: PPUSH
14068: PPUSH
14069: PPUSH
// result := false ;
14070: LD_ADDR_VAR 0 6
14074: PUSH
14075: LD_INT 0
14077: ST_TO_ADDR
// if btype = b_depot then
14078: LD_VAR 0 2
14082: PUSH
14083: LD_INT 0
14085: EQUAL
14086: IFFALSE 14098
// begin result := true ;
14088: LD_ADDR_VAR 0 6
14092: PUSH
14093: LD_INT 1
14095: ST_TO_ADDR
// exit ;
14096: GO 14924
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14098: LD_VAR 0 1
14102: NOT
14103: PUSH
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 266
14113: PUSH
14114: LD_INT 0
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: IN
14124: NOT
14125: OR
14126: PUSH
14127: LD_VAR 0 2
14131: NOT
14132: OR
14133: PUSH
14134: LD_VAR 0 5
14138: PUSH
14139: LD_INT 0
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: LD_INT 2
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: LD_INT 4
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: IN
14165: NOT
14166: OR
14167: PUSH
14168: LD_VAR 0 3
14172: PPUSH
14173: LD_VAR 0 4
14177: PPUSH
14178: CALL_OW 488
14182: NOT
14183: OR
14184: IFFALSE 14188
// exit ;
14186: GO 14924
// side := GetSide ( depot ) ;
14188: LD_ADDR_VAR 0 9
14192: PUSH
14193: LD_VAR 0 1
14197: PPUSH
14198: CALL_OW 255
14202: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14203: LD_VAR 0 9
14207: PPUSH
14208: LD_VAR 0 2
14212: PPUSH
14213: CALL 13681 0 2
14217: NOT
14218: IFFALSE 14222
// exit ;
14220: GO 14924
// pom := GetBase ( depot ) ;
14222: LD_ADDR_VAR 0 10
14226: PUSH
14227: LD_VAR 0 1
14231: PPUSH
14232: CALL_OW 274
14236: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14237: LD_ADDR_VAR 0 11
14241: PUSH
14242: LD_VAR 0 2
14246: PPUSH
14247: LD_VAR 0 1
14251: PPUSH
14252: CALL_OW 248
14256: PPUSH
14257: CALL_OW 450
14261: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14262: LD_VAR 0 10
14266: PPUSH
14267: LD_INT 1
14269: PPUSH
14270: CALL_OW 275
14274: PUSH
14275: LD_VAR 0 11
14279: PUSH
14280: LD_INT 1
14282: ARRAY
14283: GREATEREQUAL
14284: PUSH
14285: LD_VAR 0 10
14289: PPUSH
14290: LD_INT 2
14292: PPUSH
14293: CALL_OW 275
14297: PUSH
14298: LD_VAR 0 11
14302: PUSH
14303: LD_INT 2
14305: ARRAY
14306: GREATEREQUAL
14307: AND
14308: PUSH
14309: LD_VAR 0 10
14313: PPUSH
14314: LD_INT 3
14316: PPUSH
14317: CALL_OW 275
14321: PUSH
14322: LD_VAR 0 11
14326: PUSH
14327: LD_INT 3
14329: ARRAY
14330: GREATEREQUAL
14331: AND
14332: NOT
14333: IFFALSE 14337
// exit ;
14335: GO 14924
// if GetBType ( depot ) = b_depot then
14337: LD_VAR 0 1
14341: PPUSH
14342: CALL_OW 266
14346: PUSH
14347: LD_INT 0
14349: EQUAL
14350: IFFALSE 14362
// dist := 28 else
14352: LD_ADDR_VAR 0 14
14356: PUSH
14357: LD_INT 28
14359: ST_TO_ADDR
14360: GO 14370
// dist := 36 ;
14362: LD_ADDR_VAR 0 14
14366: PUSH
14367: LD_INT 36
14369: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14370: LD_VAR 0 1
14374: PPUSH
14375: LD_VAR 0 3
14379: PPUSH
14380: LD_VAR 0 4
14384: PPUSH
14385: CALL_OW 297
14389: PUSH
14390: LD_VAR 0 14
14394: GREATER
14395: IFFALSE 14399
// exit ;
14397: GO 14924
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14399: LD_ADDR_VAR 0 12
14403: PUSH
14404: LD_VAR 0 2
14408: PPUSH
14409: LD_VAR 0 3
14413: PPUSH
14414: LD_VAR 0 4
14418: PPUSH
14419: LD_VAR 0 5
14423: PPUSH
14424: LD_VAR 0 1
14428: PPUSH
14429: CALL_OW 248
14433: PPUSH
14434: LD_INT 0
14436: PPUSH
14437: CALL 14929 0 6
14441: ST_TO_ADDR
// if not hexes then
14442: LD_VAR 0 12
14446: NOT
14447: IFFALSE 14451
// exit ;
14449: GO 14924
// hex := GetHexInfo ( x , y ) ;
14451: LD_ADDR_VAR 0 15
14455: PUSH
14456: LD_VAR 0 3
14460: PPUSH
14461: LD_VAR 0 4
14465: PPUSH
14466: CALL_OW 546
14470: ST_TO_ADDR
// if hex [ 1 ] then
14471: LD_VAR 0 15
14475: PUSH
14476: LD_INT 1
14478: ARRAY
14479: IFFALSE 14483
// exit ;
14481: GO 14924
// height := hex [ 2 ] ;
14483: LD_ADDR_VAR 0 13
14487: PUSH
14488: LD_VAR 0 15
14492: PUSH
14493: LD_INT 2
14495: ARRAY
14496: ST_TO_ADDR
// for i = 1 to hexes do
14497: LD_ADDR_VAR 0 7
14501: PUSH
14502: DOUBLE
14503: LD_INT 1
14505: DEC
14506: ST_TO_ADDR
14507: LD_VAR 0 12
14511: PUSH
14512: FOR_TO
14513: IFFALSE 14843
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14515: LD_VAR 0 12
14519: PUSH
14520: LD_VAR 0 7
14524: ARRAY
14525: PUSH
14526: LD_INT 1
14528: ARRAY
14529: PPUSH
14530: LD_VAR 0 12
14534: PUSH
14535: LD_VAR 0 7
14539: ARRAY
14540: PUSH
14541: LD_INT 2
14543: ARRAY
14544: PPUSH
14545: CALL_OW 488
14549: NOT
14550: PUSH
14551: LD_VAR 0 12
14555: PUSH
14556: LD_VAR 0 7
14560: ARRAY
14561: PUSH
14562: LD_INT 1
14564: ARRAY
14565: PPUSH
14566: LD_VAR 0 12
14570: PUSH
14571: LD_VAR 0 7
14575: ARRAY
14576: PUSH
14577: LD_INT 2
14579: ARRAY
14580: PPUSH
14581: CALL_OW 428
14585: PUSH
14586: LD_INT 0
14588: GREATER
14589: OR
14590: PUSH
14591: LD_VAR 0 12
14595: PUSH
14596: LD_VAR 0 7
14600: ARRAY
14601: PUSH
14602: LD_INT 1
14604: ARRAY
14605: PPUSH
14606: LD_VAR 0 12
14610: PUSH
14611: LD_VAR 0 7
14615: ARRAY
14616: PUSH
14617: LD_INT 2
14619: ARRAY
14620: PPUSH
14621: CALL_OW 351
14625: OR
14626: IFFALSE 14632
// exit ;
14628: POP
14629: POP
14630: GO 14924
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14632: LD_ADDR_VAR 0 8
14636: PUSH
14637: LD_VAR 0 12
14641: PUSH
14642: LD_VAR 0 7
14646: ARRAY
14647: PUSH
14648: LD_INT 1
14650: ARRAY
14651: PPUSH
14652: LD_VAR 0 12
14656: PUSH
14657: LD_VAR 0 7
14661: ARRAY
14662: PUSH
14663: LD_INT 2
14665: ARRAY
14666: PPUSH
14667: CALL_OW 546
14671: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14672: LD_VAR 0 8
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: PUSH
14681: LD_VAR 0 8
14685: PUSH
14686: LD_INT 2
14688: ARRAY
14689: PUSH
14690: LD_VAR 0 13
14694: PUSH
14695: LD_INT 2
14697: PLUS
14698: GREATER
14699: OR
14700: PUSH
14701: LD_VAR 0 8
14705: PUSH
14706: LD_INT 2
14708: ARRAY
14709: PUSH
14710: LD_VAR 0 13
14714: PUSH
14715: LD_INT 2
14717: MINUS
14718: LESS
14719: OR
14720: PUSH
14721: LD_VAR 0 8
14725: PUSH
14726: LD_INT 3
14728: ARRAY
14729: PUSH
14730: LD_INT 0
14732: PUSH
14733: LD_INT 8
14735: PUSH
14736: LD_INT 9
14738: PUSH
14739: LD_INT 10
14741: PUSH
14742: LD_INT 11
14744: PUSH
14745: LD_INT 12
14747: PUSH
14748: LD_INT 13
14750: PUSH
14751: LD_INT 16
14753: PUSH
14754: LD_INT 17
14756: PUSH
14757: LD_INT 18
14759: PUSH
14760: LD_INT 19
14762: PUSH
14763: LD_INT 20
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: IN
14784: NOT
14785: OR
14786: PUSH
14787: LD_VAR 0 8
14791: PUSH
14792: LD_INT 5
14794: ARRAY
14795: NOT
14796: OR
14797: PUSH
14798: LD_VAR 0 8
14802: PUSH
14803: LD_INT 6
14805: ARRAY
14806: PUSH
14807: LD_INT 1
14809: PUSH
14810: LD_INT 2
14812: PUSH
14813: LD_INT 7
14815: PUSH
14816: LD_INT 9
14818: PUSH
14819: LD_INT 10
14821: PUSH
14822: LD_INT 11
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: IN
14833: NOT
14834: OR
14835: IFFALSE 14841
// exit ;
14837: POP
14838: POP
14839: GO 14924
// end ;
14841: GO 14512
14843: POP
14844: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14845: LD_VAR 0 9
14849: PPUSH
14850: LD_VAR 0 3
14854: PPUSH
14855: LD_VAR 0 4
14859: PPUSH
14860: LD_INT 20
14862: PPUSH
14863: CALL 6847 0 4
14867: PUSH
14868: LD_INT 4
14870: ARRAY
14871: IFFALSE 14875
// exit ;
14873: GO 14924
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14875: LD_VAR 0 2
14879: PUSH
14880: LD_INT 29
14882: PUSH
14883: LD_INT 30
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: IN
14890: PUSH
14891: LD_VAR 0 3
14895: PPUSH
14896: LD_VAR 0 4
14900: PPUSH
14901: LD_VAR 0 9
14905: PPUSH
14906: CALL_OW 440
14910: NOT
14911: AND
14912: IFFALSE 14916
// exit ;
14914: GO 14924
// result := true ;
14916: LD_ADDR_VAR 0 6
14920: PUSH
14921: LD_INT 1
14923: ST_TO_ADDR
// end ;
14924: LD_VAR 0 6
14928: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14929: LD_INT 0
14931: PPUSH
14932: PPUSH
14933: PPUSH
14934: PPUSH
14935: PPUSH
14936: PPUSH
14937: PPUSH
14938: PPUSH
14939: PPUSH
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
14951: PPUSH
14952: PPUSH
14953: PPUSH
14954: PPUSH
14955: PPUSH
14956: PPUSH
14957: PPUSH
14958: PPUSH
14959: PPUSH
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
14967: PPUSH
14968: PPUSH
14969: PPUSH
14970: PPUSH
14971: PPUSH
14972: PPUSH
14973: PPUSH
14974: PPUSH
14975: PPUSH
14976: PPUSH
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
14982: PPUSH
14983: PPUSH
14984: PPUSH
14985: PPUSH
14986: PPUSH
14987: PPUSH
14988: PPUSH
// result = [ ] ;
14989: LD_ADDR_VAR 0 7
14993: PUSH
14994: EMPTY
14995: ST_TO_ADDR
// temp_list = [ ] ;
14996: LD_ADDR_VAR 0 9
15000: PUSH
15001: EMPTY
15002: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15003: LD_VAR 0 4
15007: PUSH
15008: LD_INT 0
15010: PUSH
15011: LD_INT 1
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: LD_INT 3
15019: PUSH
15020: LD_INT 4
15022: PUSH
15023: LD_INT 5
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: IN
15034: NOT
15035: PUSH
15036: LD_VAR 0 1
15040: PUSH
15041: LD_INT 0
15043: PUSH
15044: LD_INT 1
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: IN
15051: PUSH
15052: LD_VAR 0 5
15056: PUSH
15057: LD_INT 1
15059: PUSH
15060: LD_INT 2
15062: PUSH
15063: LD_INT 3
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: IN
15071: NOT
15072: AND
15073: OR
15074: IFFALSE 15078
// exit ;
15076: GO 33469
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15078: LD_VAR 0 1
15082: PUSH
15083: LD_INT 6
15085: PUSH
15086: LD_INT 7
15088: PUSH
15089: LD_INT 8
15091: PUSH
15092: LD_INT 13
15094: PUSH
15095: LD_INT 12
15097: PUSH
15098: LD_INT 15
15100: PUSH
15101: LD_INT 11
15103: PUSH
15104: LD_INT 14
15106: PUSH
15107: LD_INT 10
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: IN
15121: IFFALSE 15131
// btype = b_lab ;
15123: LD_ADDR_VAR 0 1
15127: PUSH
15128: LD_INT 6
15130: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15131: LD_VAR 0 6
15135: PUSH
15136: LD_INT 0
15138: PUSH
15139: LD_INT 1
15141: PUSH
15142: LD_INT 2
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: IN
15150: NOT
15151: PUSH
15152: LD_VAR 0 1
15156: PUSH
15157: LD_INT 0
15159: PUSH
15160: LD_INT 1
15162: PUSH
15163: LD_INT 2
15165: PUSH
15166: LD_INT 3
15168: PUSH
15169: LD_INT 6
15171: PUSH
15172: LD_INT 36
15174: PUSH
15175: LD_INT 4
15177: PUSH
15178: LD_INT 5
15180: PUSH
15181: LD_INT 31
15183: PUSH
15184: LD_INT 32
15186: PUSH
15187: LD_INT 33
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: IN
15203: NOT
15204: PUSH
15205: LD_VAR 0 6
15209: PUSH
15210: LD_INT 1
15212: EQUAL
15213: AND
15214: OR
15215: PUSH
15216: LD_VAR 0 1
15220: PUSH
15221: LD_INT 2
15223: PUSH
15224: LD_INT 3
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: IN
15231: NOT
15232: PUSH
15233: LD_VAR 0 6
15237: PUSH
15238: LD_INT 2
15240: EQUAL
15241: AND
15242: OR
15243: IFFALSE 15253
// mode = 0 ;
15245: LD_ADDR_VAR 0 6
15249: PUSH
15250: LD_INT 0
15252: ST_TO_ADDR
// case mode of 0 :
15253: LD_VAR 0 6
15257: PUSH
15258: LD_INT 0
15260: DOUBLE
15261: EQUAL
15262: IFTRUE 15266
15264: GO 26719
15266: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15267: LD_ADDR_VAR 0 11
15271: PUSH
15272: LD_INT 0
15274: PUSH
15275: LD_INT 0
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: LD_INT 0
15284: PUSH
15285: LD_INT 1
15287: NEG
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 1
15295: PUSH
15296: LD_INT 0
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 0
15315: PUSH
15316: LD_INT 1
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 1
15325: NEG
15326: PUSH
15327: LD_INT 0
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 1
15336: NEG
15337: PUSH
15338: LD_INT 1
15340: NEG
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 1
15348: NEG
15349: PUSH
15350: LD_INT 2
15352: NEG
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 0
15360: PUSH
15361: LD_INT 2
15363: NEG
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: LD_INT 1
15374: NEG
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: LD_INT 2
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 0
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 1
15402: NEG
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 0
15423: PUSH
15424: LD_INT 3
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 1
15433: NEG
15434: PUSH
15435: LD_INT 2
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15460: LD_ADDR_VAR 0 12
15464: PUSH
15465: LD_INT 0
15467: PUSH
15468: LD_INT 0
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 0
15477: PUSH
15478: LD_INT 1
15480: NEG
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 1
15488: PUSH
15489: LD_INT 0
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 1
15498: PUSH
15499: LD_INT 1
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 0
15508: PUSH
15509: LD_INT 1
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 1
15518: NEG
15519: PUSH
15520: LD_INT 0
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 1
15529: NEG
15530: PUSH
15531: LD_INT 1
15533: NEG
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 1
15541: PUSH
15542: LD_INT 1
15544: NEG
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 2
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: LD_INT 1
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 1
15572: NEG
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 2
15583: NEG
15584: PUSH
15585: LD_INT 0
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 2
15594: NEG
15595: PUSH
15596: LD_INT 1
15598: NEG
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 2
15606: NEG
15607: PUSH
15608: LD_INT 1
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 3
15617: NEG
15618: PUSH
15619: LD_INT 0
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 3
15628: NEG
15629: PUSH
15630: LD_INT 1
15632: NEG
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15656: LD_ADDR_VAR 0 13
15660: PUSH
15661: LD_INT 0
15663: PUSH
15664: LD_INT 0
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: LD_INT 1
15676: NEG
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 1
15684: PUSH
15685: LD_INT 0
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 1
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 0
15704: PUSH
15705: LD_INT 1
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 1
15714: NEG
15715: PUSH
15716: LD_INT 0
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 1
15725: NEG
15726: PUSH
15727: LD_INT 1
15729: NEG
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 1
15737: NEG
15738: PUSH
15739: LD_INT 2
15741: NEG
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 2
15749: PUSH
15750: LD_INT 1
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 2
15759: PUSH
15760: LD_INT 2
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 1
15769: PUSH
15770: LD_INT 2
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 2
15779: NEG
15780: PUSH
15781: LD_INT 1
15783: NEG
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 2
15791: NEG
15792: PUSH
15793: LD_INT 2
15795: NEG
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 2
15803: NEG
15804: PUSH
15805: LD_INT 3
15807: NEG
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 3
15815: NEG
15816: PUSH
15817: LD_INT 2
15819: NEG
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 3
15827: NEG
15828: PUSH
15829: LD_INT 3
15831: NEG
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15855: LD_ADDR_VAR 0 14
15859: PUSH
15860: LD_INT 0
15862: PUSH
15863: LD_INT 0
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 0
15872: PUSH
15873: LD_INT 1
15875: NEG
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 1
15883: PUSH
15884: LD_INT 0
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 0
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 1
15913: NEG
15914: PUSH
15915: LD_INT 0
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 1
15924: NEG
15925: PUSH
15926: LD_INT 1
15928: NEG
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 1
15936: NEG
15937: PUSH
15938: LD_INT 2
15940: NEG
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 0
15948: PUSH
15949: LD_INT 2
15951: NEG
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: LD_INT 1
15962: NEG
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: LD_INT 2
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 0
15980: PUSH
15981: LD_INT 2
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 1
15990: NEG
15991: PUSH
15992: LD_INT 1
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 1
16001: NEG
16002: PUSH
16003: LD_INT 3
16005: NEG
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 0
16013: PUSH
16014: LD_INT 3
16016: NEG
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: LD_INT 2
16027: NEG
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16051: LD_ADDR_VAR 0 15
16055: PUSH
16056: LD_INT 0
16058: PUSH
16059: LD_INT 0
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: LD_INT 1
16071: NEG
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 1
16079: PUSH
16080: LD_INT 0
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 1
16089: PUSH
16090: LD_INT 1
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 0
16099: PUSH
16100: LD_INT 1
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 1
16109: NEG
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 1
16120: NEG
16121: PUSH
16122: LD_INT 1
16124: NEG
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: LD_INT 1
16135: NEG
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 2
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 2
16153: PUSH
16154: LD_INT 1
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 1
16163: NEG
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 2
16174: NEG
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 2
16185: NEG
16186: PUSH
16187: LD_INT 1
16189: NEG
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: LD_INT 1
16200: NEG
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 3
16208: PUSH
16209: LD_INT 0
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 3
16218: PUSH
16219: LD_INT 1
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16244: LD_ADDR_VAR 0 16
16248: PUSH
16249: LD_INT 0
16251: PUSH
16252: LD_INT 0
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 0
16261: PUSH
16262: LD_INT 1
16264: NEG
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: LD_INT 0
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 1
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 0
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: NEG
16303: PUSH
16304: LD_INT 0
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 1
16313: NEG
16314: PUSH
16315: LD_INT 1
16317: NEG
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 1
16325: NEG
16326: PUSH
16327: LD_INT 2
16329: NEG
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 2
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 2
16347: PUSH
16348: LD_INT 2
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 1
16357: PUSH
16358: LD_INT 2
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 2
16367: NEG
16368: PUSH
16369: LD_INT 1
16371: NEG
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 2
16379: NEG
16380: PUSH
16381: LD_INT 2
16383: NEG
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 3
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 3
16401: PUSH
16402: LD_INT 3
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 2
16411: PUSH
16412: LD_INT 3
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16437: LD_ADDR_VAR 0 17
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: LD_INT 0
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 0
16454: PUSH
16455: LD_INT 1
16457: NEG
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 1
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: LD_INT 0
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 1
16495: NEG
16496: PUSH
16497: LD_INT 0
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 1
16506: NEG
16507: PUSH
16508: LD_INT 1
16510: NEG
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 1
16518: NEG
16519: PUSH
16520: LD_INT 2
16522: NEG
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 0
16530: PUSH
16531: LD_INT 2
16533: NEG
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: LD_INT 1
16544: NEG
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 2
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: LD_INT 1
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 2
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: LD_INT 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 0
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 1
16602: NEG
16603: PUSH
16604: LD_INT 1
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 2
16613: NEG
16614: PUSH
16615: LD_INT 0
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 2
16624: NEG
16625: PUSH
16626: LD_INT 1
16628: NEG
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 2
16636: NEG
16637: PUSH
16638: LD_INT 2
16640: NEG
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16667: LD_ADDR_VAR 0 18
16671: PUSH
16672: LD_INT 0
16674: PUSH
16675: LD_INT 0
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 0
16684: PUSH
16685: LD_INT 1
16687: NEG
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 1
16695: PUSH
16696: LD_INT 0
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 1
16705: PUSH
16706: LD_INT 1
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 0
16715: PUSH
16716: LD_INT 1
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 1
16725: NEG
16726: PUSH
16727: LD_INT 0
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 1
16736: NEG
16737: PUSH
16738: LD_INT 1
16740: NEG
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 1
16748: NEG
16749: PUSH
16750: LD_INT 2
16752: NEG
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 0
16760: PUSH
16761: LD_INT 2
16763: NEG
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: LD_INT 1
16774: NEG
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 2
16782: PUSH
16783: LD_INT 0
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 2
16802: PUSH
16803: LD_INT 2
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: LD_INT 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 0
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 1
16832: NEG
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 2
16843: NEG
16844: PUSH
16845: LD_INT 0
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 2
16854: NEG
16855: PUSH
16856: LD_INT 1
16858: NEG
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 2
16866: NEG
16867: PUSH
16868: LD_INT 2
16870: NEG
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16897: LD_ADDR_VAR 0 19
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: LD_INT 0
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: LD_INT 1
16917: NEG
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: LD_INT 0
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 1
16935: PUSH
16936: LD_INT 1
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 0
16945: PUSH
16946: LD_INT 1
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 1
16955: NEG
16956: PUSH
16957: LD_INT 0
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 1
16966: NEG
16967: PUSH
16968: LD_INT 1
16970: NEG
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: PUSH
16980: LD_INT 2
16982: NEG
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 0
16990: PUSH
16991: LD_INT 2
16993: NEG
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: LD_INT 1
17004: NEG
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 2
17012: PUSH
17013: LD_INT 0
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: LD_INT 2
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: LD_INT 2
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 1
17062: NEG
17063: PUSH
17064: LD_INT 1
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 2
17073: NEG
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 2
17084: NEG
17085: PUSH
17086: LD_INT 1
17088: NEG
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 2
17096: NEG
17097: PUSH
17098: LD_INT 2
17100: NEG
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17127: LD_ADDR_VAR 0 20
17131: PUSH
17132: LD_INT 0
17134: PUSH
17135: LD_INT 0
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: LD_INT 1
17147: NEG
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: LD_INT 0
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 1
17165: PUSH
17166: LD_INT 1
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 0
17175: PUSH
17176: LD_INT 1
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 1
17185: NEG
17186: PUSH
17187: LD_INT 0
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 1
17196: NEG
17197: PUSH
17198: LD_INT 1
17200: NEG
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 1
17208: NEG
17209: PUSH
17210: LD_INT 2
17212: NEG
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 0
17220: PUSH
17221: LD_INT 2
17223: NEG
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 2
17242: PUSH
17243: LD_INT 0
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 2
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: LD_INT 2
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: LD_INT 2
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 1
17292: NEG
17293: PUSH
17294: LD_INT 1
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 2
17303: NEG
17304: PUSH
17305: LD_INT 0
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: NEG
17315: PUSH
17316: LD_INT 1
17318: NEG
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 2
17326: NEG
17327: PUSH
17328: LD_INT 2
17330: NEG
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17357: LD_ADDR_VAR 0 21
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 0
17374: PUSH
17375: LD_INT 1
17377: NEG
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: LD_INT 0
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 1
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 0
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 1
17415: NEG
17416: PUSH
17417: LD_INT 0
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: NEG
17427: PUSH
17428: LD_INT 1
17430: NEG
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 1
17438: NEG
17439: PUSH
17440: LD_INT 2
17442: NEG
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 0
17450: PUSH
17451: LD_INT 2
17453: NEG
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: LD_INT 1
17464: NEG
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 2
17472: PUSH
17473: LD_INT 0
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 2
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 2
17492: PUSH
17493: LD_INT 2
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: LD_INT 2
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 1
17522: NEG
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: NEG
17534: PUSH
17535: LD_INT 0
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: NEG
17545: PUSH
17546: LD_INT 1
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 2
17556: NEG
17557: PUSH
17558: LD_INT 2
17560: NEG
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17587: LD_ADDR_VAR 0 22
17591: PUSH
17592: LD_INT 0
17594: PUSH
17595: LD_INT 0
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 0
17604: PUSH
17605: LD_INT 1
17607: NEG
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: LD_INT 0
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 0
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: LD_INT 0
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: LD_INT 1
17660: NEG
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 1
17668: NEG
17669: PUSH
17670: LD_INT 2
17672: NEG
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 0
17680: PUSH
17681: LD_INT 2
17683: NEG
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: LD_INT 1
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 2
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 1
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: LD_INT 2
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: LD_INT 2
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: LD_INT 2
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 1
17752: NEG
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 2
17763: NEG
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 2
17774: NEG
17775: PUSH
17776: LD_INT 1
17778: NEG
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 2
17786: NEG
17787: PUSH
17788: LD_INT 2
17790: NEG
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17817: LD_ADDR_VAR 0 23
17821: PUSH
17822: LD_INT 0
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 1
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 0
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: LD_INT 0
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 1
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: NEG
17899: PUSH
17900: LD_INT 2
17902: NEG
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: LD_INT 2
17913: NEG
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: LD_INT 0
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: LD_INT 2
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 1
17982: NEG
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: NEG
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: NEG
18005: PUSH
18006: LD_INT 1
18008: NEG
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 2
18016: NEG
18017: PUSH
18018: LD_INT 2
18020: NEG
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 2
18028: NEG
18029: PUSH
18030: LD_INT 3
18032: NEG
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 1
18040: NEG
18041: PUSH
18042: LD_INT 3
18044: NEG
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: LD_INT 2
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 2
18063: PUSH
18064: LD_INT 1
18066: NEG
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18097: LD_ADDR_VAR 0 24
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: LD_INT 0
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 0
18114: PUSH
18115: LD_INT 1
18117: NEG
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: NEG
18179: PUSH
18180: LD_INT 2
18182: NEG
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: LD_INT 2
18193: NEG
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: LD_INT 1
18204: NEG
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 2
18232: PUSH
18233: LD_INT 2
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: LD_INT 2
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 0
18252: PUSH
18253: LD_INT 2
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: NEG
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: LD_INT 2
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: LD_INT 2
18311: NEG
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 3
18340: PUSH
18341: LD_INT 2
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18373: LD_ADDR_VAR 0 25
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: LD_INT 0
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 0
18390: PUSH
18391: LD_INT 1
18393: NEG
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: NEG
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: NEG
18443: PUSH
18444: LD_INT 1
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 1
18454: NEG
18455: PUSH
18456: LD_INT 2
18458: NEG
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: LD_INT 2
18469: NEG
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 2
18488: PUSH
18489: LD_INT 0
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 2
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 2
18508: PUSH
18509: LD_INT 2
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 0
18528: PUSH
18529: LD_INT 2
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: NEG
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 2
18549: NEG
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 2
18560: NEG
18561: PUSH
18562: LD_INT 1
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: NEG
18573: PUSH
18574: LD_INT 2
18576: NEG
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 3
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 3
18594: PUSH
18595: LD_INT 2
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 2
18604: PUSH
18605: LD_INT 3
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18647: LD_ADDR_VAR 0 26
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 0
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: NEG
18717: PUSH
18718: LD_INT 1
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: LD_INT 2
18732: NEG
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: LD_INT 2
18743: NEG
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: NEG
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 2
18834: NEG
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 2
18846: NEG
18847: PUSH
18848: LD_INT 2
18850: NEG
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 2
18858: PUSH
18859: LD_INT 3
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: LD_INT 3
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 2
18889: NEG
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18923: LD_ADDR_VAR 0 27
18927: PUSH
18928: LD_INT 0
18930: PUSH
18931: LD_INT 0
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: LD_INT 1
18943: NEG
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 1
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: NEG
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 1
19004: NEG
19005: PUSH
19006: LD_INT 2
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: LD_INT 2
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 2
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 1
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: LD_INT 2
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 1
19088: NEG
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: NEG
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 2
19110: NEG
19111: PUSH
19112: LD_INT 1
19114: NEG
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: NEG
19123: PUSH
19124: LD_INT 2
19126: NEG
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 1
19134: NEG
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 2
19145: NEG
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 3
19156: NEG
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 3
19168: NEG
19169: PUSH
19170: LD_INT 2
19172: NEG
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19203: LD_ADDR_VAR 0 28
19207: PUSH
19208: LD_INT 0
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 1
19261: NEG
19262: PUSH
19263: LD_INT 0
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: LD_INT 2
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: LD_INT 2
19299: NEG
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 1
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 2
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 2
19338: PUSH
19339: LD_INT 2
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: LD_INT 2
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: LD_INT 2
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: NEG
19369: PUSH
19370: LD_INT 1
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 2
19379: NEG
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 2
19390: NEG
19391: PUSH
19392: LD_INT 1
19394: NEG
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 2
19402: NEG
19403: PUSH
19404: LD_INT 2
19406: NEG
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 2
19414: NEG
19415: PUSH
19416: LD_INT 3
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 3
19430: NEG
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 3
19438: NEG
19439: PUSH
19440: LD_INT 1
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 3
19450: NEG
19451: PUSH
19452: LD_INT 2
19454: NEG
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19485: LD_ADDR_VAR 0 29
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: LD_INT 0
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: LD_INT 0
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: LD_INT 1
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: LD_INT 0
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 1
19554: NEG
19555: PUSH
19556: LD_INT 1
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: NEG
19567: PUSH
19568: LD_INT 2
19570: NEG
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: LD_INT 2
19581: NEG
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: LD_INT 1
19592: NEG
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: PUSH
19621: LD_INT 2
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 0
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 1
19640: NEG
19641: PUSH
19642: LD_INT 1
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 2
19651: NEG
19652: PUSH
19653: LD_INT 1
19655: NEG
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 2
19663: NEG
19664: PUSH
19665: LD_INT 2
19667: NEG
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 2
19675: NEG
19676: PUSH
19677: LD_INT 3
19679: NEG
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 1
19690: NEG
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 3
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 1
19718: NEG
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 3
19729: NEG
19730: PUSH
19731: LD_INT 2
19733: NEG
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19764: LD_ADDR_VAR 0 30
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: LD_INT 0
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 1
19822: NEG
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: NEG
19846: PUSH
19847: LD_INT 2
19849: NEG
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: LD_INT 2
19860: NEG
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: LD_INT 1
19871: NEG
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: LD_INT 2
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 1
19919: NEG
19920: PUSH
19921: LD_INT 1
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 2
19930: NEG
19931: PUSH
19932: LD_INT 0
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 2
19941: NEG
19942: PUSH
19943: LD_INT 1
19945: NEG
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: LD_INT 3
19957: NEG
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 1
19965: PUSH
19966: LD_INT 2
19968: NEG
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 3
19976: PUSH
19977: LD_INT 2
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 3
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 2
19996: NEG
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 3
20007: NEG
20008: PUSH
20009: LD_INT 1
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20042: LD_ADDR_VAR 0 31
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 1
20100: NEG
20101: PUSH
20102: LD_INT 0
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: LD_INT 1
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 1
20123: NEG
20124: PUSH
20125: LD_INT 2
20127: NEG
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: LD_INT 1
20138: NEG
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: LD_INT 2
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 0
20186: PUSH
20187: LD_INT 2
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: NEG
20197: PUSH
20198: LD_INT 1
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 2
20219: NEG
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: LD_INT 3
20235: NEG
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 2
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 3
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 3
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 3
20285: NEG
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20320: LD_ADDR_VAR 0 32
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 0
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 2
20486: NEG
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: NEG
20498: PUSH
20499: LD_INT 1
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: LD_INT 3
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: LD_INT 2
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 3
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 3
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 2
20552: NEG
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 3
20563: NEG
20564: PUSH
20565: LD_INT 1
20567: NEG
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20598: LD_ADDR_VAR 0 33
20602: PUSH
20603: LD_INT 0
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: LD_INT 0
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 0
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 1
20656: NEG
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: NEG
20668: PUSH
20669: LD_INT 1
20671: NEG
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: NEG
20680: PUSH
20681: LD_INT 2
20683: NEG
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: LD_INT 1
20694: NEG
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 2
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 2
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 2
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: LD_INT 2
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: NEG
20743: PUSH
20744: LD_INT 1
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 2
20764: NEG
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 2
20776: NEG
20777: PUSH
20778: LD_INT 2
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: NEG
20789: PUSH
20790: LD_INT 3
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: LD_INT 1
20803: NEG
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 3
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: LD_INT 3
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 1
20831: NEG
20832: PUSH
20833: LD_INT 2
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 3
20842: NEG
20843: PUSH
20844: LD_INT 2
20846: NEG
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20877: LD_ADDR_VAR 0 34
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 1
20935: NEG
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: LD_INT 1
20950: NEG
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: LD_INT 2
20962: NEG
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: LD_INT 2
20973: NEG
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: LD_INT 1
20984: NEG
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 2
21044: NEG
21045: PUSH
21046: LD_INT 1
21048: NEG
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 2
21056: NEG
21057: PUSH
21058: LD_INT 2
21060: NEG
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 1
21068: NEG
21069: PUSH
21070: LD_INT 3
21072: NEG
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: LD_INT 2
21083: NEG
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 3
21091: PUSH
21092: LD_INT 2
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 2
21101: PUSH
21102: LD_INT 3
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 2
21111: NEG
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 3
21122: NEG
21123: PUSH
21124: LD_INT 1
21126: NEG
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21157: LD_ADDR_VAR 0 35
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: LD_INT 0
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 1
21226: NEG
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 2
21248: NEG
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21269: LD_ADDR_VAR 0 36
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: LD_INT 1
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 1
21327: NEG
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: LD_INT 2
21354: NEG
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: LD_INT 2
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21381: LD_ADDR_VAR 0 37
21385: PUSH
21386: LD_INT 0
21388: PUSH
21389: LD_INT 0
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: LD_INT 1
21401: NEG
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 1
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: LD_INT 1
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: NEG
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: LD_INT 1
21465: NEG
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21493: LD_ADDR_VAR 0 38
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: LD_INT 1
21513: NEG
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: LD_INT 0
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 1
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: LD_INT 1
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 1
21551: NEG
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 2
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 2
21584: NEG
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21605: LD_ADDR_VAR 0 39
21609: PUSH
21610: LD_INT 0
21612: PUSH
21613: LD_INT 0
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: LD_INT 1
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 1
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 1
21663: NEG
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: NEG
21675: PUSH
21676: LD_INT 1
21678: NEG
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: LD_INT 2
21690: NEG
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21717: LD_ADDR_VAR 0 40
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: LD_INT 1
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: LD_INT 0
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 1
21775: NEG
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 1
21786: NEG
21787: PUSH
21788: LD_INT 1
21790: NEG
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: LD_INT 1
21801: NEG
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: LD_INT 1
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21829: LD_ADDR_VAR 0 41
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 0
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: LD_INT 1
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 1
21898: NEG
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 1
21910: NEG
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 1
21922: PUSH
21923: LD_INT 1
21925: NEG
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 2
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: LD_INT 2
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: NEG
21974: PUSH
21975: LD_INT 1
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 2
21984: NEG
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 2
21995: NEG
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 2
22007: NEG
22008: PUSH
22009: LD_INT 2
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 2
22019: NEG
22020: PUSH
22021: LD_INT 3
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 3
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 3
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 3
22072: PUSH
22073: LD_INT 3
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 2
22082: PUSH
22083: LD_INT 3
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 2
22092: NEG
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 3
22103: NEG
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 3
22114: NEG
22115: PUSH
22116: LD_INT 1
22118: NEG
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 3
22126: NEG
22127: PUSH
22128: LD_INT 2
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 3
22138: NEG
22139: PUSH
22140: LD_INT 3
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22179: LD_ADDR_VAR 0 42
22183: PUSH
22184: LD_INT 0
22186: PUSH
22187: LD_INT 0
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 0
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: LD_INT 0
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 1
22248: NEG
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: LD_INT 2
22275: NEG
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: LD_INT 2
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 2
22345: NEG
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: LD_INT 2
22361: NEG
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 2
22369: NEG
22370: PUSH
22371: LD_INT 3
22373: NEG
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: NEG
22382: PUSH
22383: LD_INT 3
22385: NEG
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 0
22393: PUSH
22394: LD_INT 3
22396: NEG
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: LD_INT 2
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 3
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 3
22425: PUSH
22426: LD_INT 3
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 3
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: LD_INT 3
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: LD_INT 2
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 3
22476: NEG
22477: PUSH
22478: LD_INT 2
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 3
22488: NEG
22489: PUSH
22490: LD_INT 3
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22529: LD_ADDR_VAR 0 43
22533: PUSH
22534: LD_INT 0
22536: PUSH
22537: LD_INT 0
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 0
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: LD_INT 0
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 0
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 1
22598: NEG
22599: PUSH
22600: LD_INT 1
22602: NEG
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: LD_INT 2
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: LD_INT 2
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 1
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: LD_INT 1
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 2
22695: NEG
22696: PUSH
22697: LD_INT 0
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 2
22706: NEG
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: LD_INT 3
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 0
22730: PUSH
22731: LD_INT 3
22733: NEG
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 2
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 3
22763: PUSH
22764: LD_INT 0
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 3
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: LD_INT 3
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 0
22793: PUSH
22794: LD_INT 3
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: LD_INT 2
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 2
22814: NEG
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 3
22825: NEG
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 3
22836: NEG
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22877: LD_ADDR_VAR 0 44
22881: PUSH
22882: LD_INT 0
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: LD_INT 1
22897: NEG
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 1
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 0
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 2
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: LD_INT 2
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 1
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: NEG
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 2
23043: NEG
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: LD_INT 2
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: NEG
23068: PUSH
23069: LD_INT 3
23071: NEG
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 3
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 3
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 3
23120: PUSH
23121: LD_INT 3
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: LD_INT 3
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 2
23140: NEG
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 3
23151: NEG
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 3
23162: NEG
23163: PUSH
23164: LD_INT 1
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 3
23174: NEG
23175: PUSH
23176: LD_INT 2
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 3
23186: NEG
23187: PUSH
23188: LD_INT 3
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23227: LD_ADDR_VAR 0 45
23231: PUSH
23232: LD_INT 0
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: NEG
23286: PUSH
23287: LD_INT 0
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: NEG
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 0
23320: PUSH
23321: LD_INT 2
23323: NEG
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 2
23352: PUSH
23353: LD_INT 2
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: NEG
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 2
23393: NEG
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 2
23405: NEG
23406: PUSH
23407: LD_INT 2
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 2
23417: NEG
23418: PUSH
23419: LD_INT 3
23421: NEG
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 3
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 0
23441: PUSH
23442: LD_INT 3
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: LD_INT 2
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 3
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 3
23473: PUSH
23474: LD_INT 3
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: LD_INT 3
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 3
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: LD_INT 3
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 3
23524: NEG
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 3
23536: NEG
23537: PUSH
23538: LD_INT 3
23540: NEG
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23577: LD_ADDR_VAR 0 46
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 1
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 1
23635: NEG
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 1
23646: NEG
23647: PUSH
23648: LD_INT 1
23650: NEG
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 1
23658: NEG
23659: PUSH
23660: LD_INT 2
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: LD_INT 2
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 2
23692: PUSH
23693: LD_INT 0
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 2
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: NEG
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 2
23743: NEG
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 2
23754: NEG
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: PUSH
23768: LD_INT 3
23770: NEG
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 3
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 2
23792: NEG
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 3
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 3
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: LD_INT 3
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: LD_INT 3
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: NEG
23852: PUSH
23853: LD_INT 2
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 2
23862: NEG
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 3
23873: NEG
23874: PUSH
23875: LD_INT 0
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 3
23884: NEG
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23925: LD_ADDR_VAR 0 47
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: NEG
24007: PUSH
24008: LD_INT 2
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 0
24018: PUSH
24019: LD_INT 2
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 2
24040: NEG
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 2
24052: NEG
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24076: LD_ADDR_VAR 0 48
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 0
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: NEG
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: LD_INT 2
24161: NEG
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: LD_INT 2
24172: NEG
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24223: LD_ADDR_VAR 0 49
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 2
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24367: LD_ADDR_VAR 0 50
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: NEG
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: PUSH
24459: LD_INT 2
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24511: LD_ADDR_VAR 0 51
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: LD_INT 2
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 2
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 2
24623: NEG
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 2
24634: NEG
24635: PUSH
24636: LD_INT 1
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24658: LD_ADDR_VAR 0 52
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: LD_INT 1
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 0
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: NEG
24728: PUSH
24729: LD_INT 1
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: NEG
24740: PUSH
24741: LD_INT 2
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 2
24762: NEG
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 2
24773: NEG
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 2
24785: NEG
24786: PUSH
24787: LD_INT 2
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24809: LD_ADDR_VAR 0 53
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 2
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: LD_INT 1
24916: NEG
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 2
24944: PUSH
24945: LD_INT 2
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: LD_INT 2
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 2
24985: NEG
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: NEG
25009: PUSH
25010: LD_INT 2
25012: NEG
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25039: LD_ADDR_VAR 0 54
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: LD_INT 2
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: LD_INT 2
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 2
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 2
25174: PUSH
25175: LD_INT 2
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 2
25215: NEG
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: LD_INT 1
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 2
25238: NEG
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25269: LD_ADDR_VAR 0 55
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: LD_INT 1
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 2
25354: NEG
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: LD_INT 2
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 2
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: NEG
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 2
25468: NEG
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25499: LD_ADDR_VAR 0 56
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 0
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: LD_INT 2
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: LD_INT 2
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: LD_INT 2
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: NEG
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: LD_INT 2
25702: NEG
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25729: LD_ADDR_VAR 0 57
25733: PUSH
25734: LD_INT 0
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: LD_INT 0
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: LD_INT 0
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: LD_INT 2
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 2
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: LD_INT 0
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 2
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: LD_INT 2
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: LD_INT 2
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 2
25916: NEG
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 2
25928: NEG
25929: PUSH
25930: LD_INT 2
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25959: LD_ADDR_VAR 0 58
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 0
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: NEG
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: LD_INT 2
26044: NEG
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: LD_INT 2
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: LD_INT 0
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 1
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 2
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: NEG
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 2
26135: NEG
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: NEG
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 2
26158: NEG
26159: PUSH
26160: LD_INT 2
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26189: LD_ADDR_VAR 0 59
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: LD_INT 0
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26277: LD_ADDR_VAR 0 60
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26365: LD_ADDR_VAR 0 61
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 1
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26453: LD_ADDR_VAR 0 62
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: NEG
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26541: LD_ADDR_VAR 0 63
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 0
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26629: LD_ADDR_VAR 0 64
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: NEG
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: ST_TO_ADDR
// end ; 1 :
26717: GO 32614
26719: LD_INT 1
26721: DOUBLE
26722: EQUAL
26723: IFTRUE 26727
26725: GO 29350
26727: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26728: LD_ADDR_VAR 0 11
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: LD_INT 3
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: LD_INT 3
26750: NEG
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: LD_INT 2
26761: NEG
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: LIST
26771: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26772: LD_ADDR_VAR 0 12
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 3
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26813: LD_ADDR_VAR 0 13
26817: PUSH
26818: LD_INT 3
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 3
26830: PUSH
26831: LD_INT 3
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 3
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26853: LD_ADDR_VAR 0 14
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 3
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: LD_INT 3
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26894: LD_ADDR_VAR 0 15
26898: PUSH
26899: LD_INT 2
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 3
26912: NEG
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 3
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: LIST
26937: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26938: LD_ADDR_VAR 0 16
26942: PUSH
26943: LD_INT 2
26945: NEG
26946: PUSH
26947: LD_INT 3
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 3
26957: NEG
26958: PUSH
26959: LD_INT 2
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 3
26969: NEG
26970: PUSH
26971: LD_INT 3
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26984: LD_ADDR_VAR 0 17
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 3
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 3
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: LIST
27027: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27028: LD_ADDR_VAR 0 18
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 3
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 3
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: LIST
27068: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27069: LD_ADDR_VAR 0 19
27073: PUSH
27074: LD_INT 3
27076: PUSH
27077: LD_INT 2
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 3
27086: PUSH
27087: LD_INT 3
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 3
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27109: LD_ADDR_VAR 0 20
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 3
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 3
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27150: LD_ADDR_VAR 0 21
27154: PUSH
27155: LD_INT 2
27157: NEG
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 3
27168: NEG
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 3
27179: NEG
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27194: LD_ADDR_VAR 0 22
27198: PUSH
27199: LD_INT 2
27201: NEG
27202: PUSH
27203: LD_INT 3
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 3
27213: NEG
27214: PUSH
27215: LD_INT 2
27217: NEG
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 3
27225: NEG
27226: PUSH
27227: LD_INT 3
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27240: LD_ADDR_VAR 0 23
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 3
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: LD_INT 4
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: LD_INT 3
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27284: LD_ADDR_VAR 0 24
27288: PUSH
27289: LD_INT 3
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 3
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 4
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27325: LD_ADDR_VAR 0 25
27329: PUSH
27330: LD_INT 3
27332: PUSH
27333: LD_INT 3
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 4
27342: PUSH
27343: LD_INT 3
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: LD_INT 4
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27365: LD_ADDR_VAR 0 26
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 3
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: LD_INT 4
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27406: LD_ADDR_VAR 0 27
27410: PUSH
27411: LD_INT 3
27413: NEG
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 3
27424: NEG
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 4
27435: NEG
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27450: LD_ADDR_VAR 0 28
27454: PUSH
27455: LD_INT 3
27457: NEG
27458: PUSH
27459: LD_INT 3
27461: NEG
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 3
27469: NEG
27470: PUSH
27471: LD_INT 4
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 4
27481: NEG
27482: PUSH
27483: LD_INT 3
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: LIST
27495: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27496: LD_ADDR_VAR 0 29
27500: PUSH
27501: LD_INT 1
27503: NEG
27504: PUSH
27505: LD_INT 3
27507: NEG
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 3
27518: NEG
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: LD_INT 4
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 4
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 3
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: LD_INT 5
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: LD_INT 5
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: LD_INT 4
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: NEG
27606: PUSH
27607: LD_INT 6
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: LD_INT 6
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: LD_INT 5
27631: NEG
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27651: LD_ADDR_VAR 0 30
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 3
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 3
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 3
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 4
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 4
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 4
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 5
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 5
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 5
27751: PUSH
27752: LD_INT 1
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 6
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 6
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27794: LD_ADDR_VAR 0 31
27798: PUSH
27799: LD_INT 3
27801: PUSH
27802: LD_INT 2
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 3
27811: PUSH
27812: LD_INT 3
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 3
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 4
27831: PUSH
27832: LD_INT 3
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 4
27841: PUSH
27842: LD_INT 4
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 4
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 5
27861: PUSH
27862: LD_INT 4
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 5
27871: PUSH
27872: LD_INT 5
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 4
27881: PUSH
27882: LD_INT 5
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 6
27891: PUSH
27892: LD_INT 5
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 6
27901: PUSH
27902: LD_INT 6
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 5
27911: PUSH
27912: LD_INT 6
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27933: LD_ADDR_VAR 0 32
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: LD_INT 3
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: LD_INT 4
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: LD_INT 4
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: LD_INT 3
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: LD_INT 5
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: LD_INT 5
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: LD_INT 4
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: LD_INT 6
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: LD_INT 6
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: LD_INT 5
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28076: LD_ADDR_VAR 0 33
28080: PUSH
28081: LD_INT 2
28083: NEG
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 3
28094: NEG
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 3
28105: NEG
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 3
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 4
28128: NEG
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 4
28139: NEG
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 4
28151: NEG
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 5
28162: NEG
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 5
28173: NEG
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 5
28185: NEG
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 6
28196: NEG
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 6
28207: NEG
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28231: LD_ADDR_VAR 0 34
28235: PUSH
28236: LD_INT 2
28238: NEG
28239: PUSH
28240: LD_INT 3
28242: NEG
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 3
28250: NEG
28251: PUSH
28252: LD_INT 2
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 3
28262: NEG
28263: PUSH
28264: LD_INT 3
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 3
28274: NEG
28275: PUSH
28276: LD_INT 4
28278: NEG
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 4
28286: NEG
28287: PUSH
28288: LD_INT 3
28290: NEG
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 4
28298: NEG
28299: PUSH
28300: LD_INT 4
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 4
28310: NEG
28311: PUSH
28312: LD_INT 5
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 5
28322: NEG
28323: PUSH
28324: LD_INT 4
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 5
28334: NEG
28335: PUSH
28336: LD_INT 5
28338: NEG
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 5
28346: NEG
28347: PUSH
28348: LD_INT 6
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 6
28358: NEG
28359: PUSH
28360: LD_INT 5
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 6
28370: NEG
28371: PUSH
28372: LD_INT 6
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28394: LD_ADDR_VAR 0 41
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: LD_INT 2
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: LD_INT 3
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 2
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28438: LD_ADDR_VAR 0 42
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: LD_INT 1
28458: NEG
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 3
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28479: LD_ADDR_VAR 0 43
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: LD_INT 2
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 3
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: LD_INT 3
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28519: LD_ADDR_VAR 0 44
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: LD_INT 2
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: LD_INT 3
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 1
28546: NEG
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28560: LD_ADDR_VAR 0 45
28564: PUSH
28565: LD_INT 2
28567: NEG
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 2
28578: NEG
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 3
28589: NEG
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28604: LD_ADDR_VAR 0 46
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: LD_INT 2
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 2
28623: NEG
28624: PUSH
28625: LD_INT 3
28627: NEG
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 3
28635: NEG
28636: PUSH
28637: LD_INT 2
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: LIST
28649: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28650: LD_ADDR_VAR 0 47
28654: PUSH
28655: LD_INT 2
28657: NEG
28658: PUSH
28659: LD_INT 3
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: LD_INT 3
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28683: LD_ADDR_VAR 0 48
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: LD_INT 2
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28714: LD_ADDR_VAR 0 49
28718: PUSH
28719: LD_INT 3
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 3
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28743: LD_ADDR_VAR 0 50
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: LD_INT 3
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28772: LD_ADDR_VAR 0 51
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28803: LD_ADDR_VAR 0 52
28807: PUSH
28808: LD_INT 3
28810: NEG
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 3
28822: NEG
28823: PUSH
28824: LD_INT 2
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28836: LD_ADDR_VAR 0 53
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 3
28847: NEG
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: LD_INT 3
28858: NEG
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: LD_INT 2
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28880: LD_ADDR_VAR 0 54
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 3
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 3
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28921: LD_ADDR_VAR 0 55
28925: PUSH
28926: LD_INT 3
28928: PUSH
28929: LD_INT 2
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 3
28938: PUSH
28939: LD_INT 3
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 2
28948: PUSH
28949: LD_INT 3
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28961: LD_ADDR_VAR 0 56
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: LD_INT 3
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29002: LD_ADDR_VAR 0 57
29006: PUSH
29007: LD_INT 2
29009: NEG
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 3
29020: NEG
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 3
29031: NEG
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: LIST
29045: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29046: LD_ADDR_VAR 0 58
29050: PUSH
29051: LD_INT 2
29053: NEG
29054: PUSH
29055: LD_INT 3
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: LD_INT 2
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 3
29077: NEG
29078: PUSH
29079: LD_INT 3
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: LIST
29091: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29092: LD_ADDR_VAR 0 59
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: LD_INT 2
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 2
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29136: LD_ADDR_VAR 0 60
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 2
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29177: LD_ADDR_VAR 0 61
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29217: LD_ADDR_VAR 0 62
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: LD_INT 2
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: LD_INT 2
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29258: LD_ADDR_VAR 0 63
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 2
29276: NEG
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: LIST
29301: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29302: LD_ADDR_VAR 0 64
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 2
29333: NEG
29334: PUSH
29335: LD_INT 2
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: LIST
29347: ST_TO_ADDR
// end ; 2 :
29348: GO 32614
29350: LD_INT 2
29352: DOUBLE
29353: EQUAL
29354: IFTRUE 29358
29356: GO 32613
29358: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29359: LD_ADDR_VAR 0 29
29363: PUSH
29364: LD_INT 4
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 4
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 5
29387: PUSH
29388: LD_INT 0
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 5
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 4
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 3
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 5
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 3
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 3
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 4
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 4
29489: PUSH
29490: LD_INT 4
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 3
29499: PUSH
29500: LD_INT 4
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 4
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 4
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 4
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: LD_INT 4
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 5
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 5
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: LD_INT 4
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: LD_INT 3
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 2
29621: PUSH
29622: LD_INT 5
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: LD_INT 3
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 3
29642: NEG
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 3
29653: NEG
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 3
29687: NEG
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 4
29698: NEG
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 4
29709: NEG
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 4
29721: NEG
29722: PUSH
29723: LD_INT 2
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 2
29733: NEG
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 4
29744: NEG
29745: PUSH
29746: LD_INT 4
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 4
29756: NEG
29757: PUSH
29758: LD_INT 5
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 3
29768: NEG
29769: PUSH
29770: LD_INT 4
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 3
29780: NEG
29781: PUSH
29782: LD_INT 3
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 4
29792: NEG
29793: PUSH
29794: LD_INT 3
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 5
29804: NEG
29805: PUSH
29806: LD_INT 4
29808: NEG
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 5
29816: NEG
29817: PUSH
29818: LD_INT 5
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 3
29828: NEG
29829: PUSH
29830: LD_INT 5
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 5
29840: NEG
29841: PUSH
29842: LD_INT 3
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29897: LD_ADDR_VAR 0 30
29901: PUSH
29902: LD_INT 4
29904: PUSH
29905: LD_INT 4
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 4
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 5
29924: PUSH
29925: LD_INT 4
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 5
29934: PUSH
29935: LD_INT 5
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 4
29944: PUSH
29945: LD_INT 5
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 3
29954: PUSH
29955: LD_INT 4
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 5
29974: PUSH
29975: LD_INT 3
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: LD_INT 5
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: LD_INT 3
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: LD_INT 4
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 4
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: LD_INT 3
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 2
30066: PUSH
30067: LD_INT 4
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 2
30076: NEG
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 4
30087: NEG
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 4
30098: NEG
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 3
30110: NEG
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 3
30121: NEG
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 4
30132: NEG
30133: PUSH
30134: LD_INT 1
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 5
30143: NEG
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 5
30154: NEG
30155: PUSH
30156: LD_INT 1
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 5
30166: NEG
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 3
30178: NEG
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 3
30189: NEG
30190: PUSH
30191: LD_INT 3
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: NEG
30202: PUSH
30203: LD_INT 4
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 2
30213: NEG
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 2
30225: NEG
30226: PUSH
30227: LD_INT 2
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 3
30237: NEG
30238: PUSH
30239: LD_INT 2
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 4
30249: NEG
30250: PUSH
30251: LD_INT 3
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 4
30261: NEG
30262: PUSH
30263: LD_INT 4
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 2
30273: NEG
30274: PUSH
30275: LD_INT 4
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 4
30285: NEG
30286: PUSH
30287: LD_INT 2
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: LD_INT 4
30300: NEG
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: LD_INT 5
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: PUSH
30320: LD_INT 4
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: LD_INT 3
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 0
30341: PUSH
30342: LD_INT 3
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: LD_INT 4
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: LD_INT 5
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: LD_INT 3
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 2
30387: NEG
30388: PUSH
30389: LD_INT 5
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30444: LD_ADDR_VAR 0 31
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: LD_INT 4
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: LD_INT 3
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: LD_INT 4
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 5
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: LD_INT 5
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: NEG
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: NEG
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 2
30523: PUSH
30524: LD_INT 5
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: LD_INT 3
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 3
30544: NEG
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 3
30555: NEG
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 2
30567: NEG
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 2
30578: NEG
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 3
30589: NEG
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 4
30600: NEG
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 4
30611: NEG
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 4
30623: NEG
30624: PUSH
30625: LD_INT 2
30627: NEG
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 2
30635: NEG
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 4
30646: NEG
30647: PUSH
30648: LD_INT 4
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 4
30658: NEG
30659: PUSH
30660: LD_INT 5
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 3
30670: NEG
30671: PUSH
30672: LD_INT 4
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 3
30682: NEG
30683: PUSH
30684: LD_INT 3
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 4
30694: NEG
30695: PUSH
30696: LD_INT 3
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 5
30706: NEG
30707: PUSH
30708: LD_INT 4
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 5
30718: NEG
30719: PUSH
30720: LD_INT 5
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 3
30730: NEG
30731: PUSH
30732: LD_INT 5
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 5
30742: NEG
30743: PUSH
30744: LD_INT 3
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 3
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: LD_INT 4
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 1
30776: PUSH
30777: LD_INT 3
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: LD_INT 2
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: LD_INT 3
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: LD_INT 4
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 2
30833: PUSH
30834: LD_INT 2
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 2
30844: NEG
30845: PUSH
30846: LD_INT 4
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 4
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 4
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 5
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 5
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 4
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 3
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 3
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 3
30928: PUSH
30929: LD_INT 2
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 5
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30994: LD_ADDR_VAR 0 32
30998: PUSH
30999: LD_INT 4
31001: NEG
31002: PUSH
31003: LD_INT 0
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 4
31012: NEG
31013: PUSH
31014: LD_INT 1
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 3
31024: NEG
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 3
31035: NEG
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 4
31046: NEG
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 5
31057: NEG
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 5
31068: NEG
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 5
31080: NEG
31081: PUSH
31082: LD_INT 2
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 3
31092: NEG
31093: PUSH
31094: LD_INT 2
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 3
31103: NEG
31104: PUSH
31105: LD_INT 3
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 3
31115: NEG
31116: PUSH
31117: LD_INT 4
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: LD_INT 3
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: LD_INT 2
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 4
31163: NEG
31164: PUSH
31165: LD_INT 3
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 4
31175: NEG
31176: PUSH
31177: LD_INT 4
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 2
31187: NEG
31188: PUSH
31189: LD_INT 4
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 4
31199: NEG
31200: PUSH
31201: LD_INT 2
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: LD_INT 4
31214: NEG
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: LD_INT 5
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 4
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: LD_INT 3
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 3
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: LD_INT 4
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 5
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: LD_INT 5
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 3
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 4
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 4
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 2
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 4
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 4
31406: PUSH
31407: LD_INT 4
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 4
31416: PUSH
31417: LD_INT 3
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 5
31426: PUSH
31427: LD_INT 4
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 5
31436: PUSH
31437: LD_INT 5
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 4
31446: PUSH
31447: LD_INT 5
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 3
31456: PUSH
31457: LD_INT 4
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 3
31466: PUSH
31467: LD_INT 3
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 5
31476: PUSH
31477: LD_INT 3
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: LD_INT 5
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31541: LD_ADDR_VAR 0 33
31545: PUSH
31546: LD_INT 4
31548: NEG
31549: PUSH
31550: LD_INT 4
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 4
31560: NEG
31561: PUSH
31562: LD_INT 5
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: LD_INT 4
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 4
31596: NEG
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 5
31608: NEG
31609: PUSH
31610: LD_INT 4
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 5
31620: NEG
31621: PUSH
31622: LD_INT 5
31624: NEG
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 3
31632: NEG
31633: PUSH
31634: LD_INT 5
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 5
31644: NEG
31645: PUSH
31646: LD_INT 3
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: LD_INT 3
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 4
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: LD_INT 2
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: LD_INT 3
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: LD_INT 4
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: LD_INT 4
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 4
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 4
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 5
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 5
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 4
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 3
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 3
31830: PUSH
31831: LD_INT 2
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 5
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: LD_INT 3
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 4
31881: PUSH
31882: LD_INT 4
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: LD_INT 4
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 4
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: LD_INT 4
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 4
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 3
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 4
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 5
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 5
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: LD_INT 4
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 3
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 5
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32079: LD_ADDR_VAR 0 34
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: LD_INT 4
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: LD_INT 5
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: LD_INT 4
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: LD_INT 3
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: LD_INT 4
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: LD_INT 5
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 3
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: LD_INT 5
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 3
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 4
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 3
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 4
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 4
32281: PUSH
32282: LD_INT 4
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 4
32291: PUSH
32292: LD_INT 3
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 5
32301: PUSH
32302: LD_INT 4
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 5
32311: PUSH
32312: LD_INT 5
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 4
32321: PUSH
32322: LD_INT 5
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 3
32331: PUSH
32332: LD_INT 4
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 3
32341: PUSH
32342: LD_INT 3
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 5
32351: PUSH
32352: LD_INT 3
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 3
32361: PUSH
32362: LD_INT 5
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: LD_INT 3
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: LD_INT 3
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: LD_INT 4
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 4
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 4
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: NEG
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 4
32464: NEG
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 4
32475: NEG
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 3
32487: NEG
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 4
32509: NEG
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 5
32520: NEG
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 5
32531: NEG
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 5
32543: NEG
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 3
32555: NEG
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: ST_TO_ADDR
// end ; end ;
32611: GO 32614
32613: POP
// case btype of b_depot , b_warehouse :
32614: LD_VAR 0 1
32618: PUSH
32619: LD_INT 0
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32633
32625: LD_INT 1
32627: DOUBLE
32628: EQUAL
32629: IFTRUE 32633
32631: GO 32834
32633: POP
// case nation of nation_american :
32634: LD_VAR 0 5
32638: PUSH
32639: LD_INT 1
32641: DOUBLE
32642: EQUAL
32643: IFTRUE 32647
32645: GO 32703
32647: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32648: LD_ADDR_VAR 0 9
32652: PUSH
32653: LD_VAR 0 11
32657: PUSH
32658: LD_VAR 0 12
32662: PUSH
32663: LD_VAR 0 13
32667: PUSH
32668: LD_VAR 0 14
32672: PUSH
32673: LD_VAR 0 15
32677: PUSH
32678: LD_VAR 0 16
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: PUSH
32691: LD_VAR 0 4
32695: PUSH
32696: LD_INT 1
32698: PLUS
32699: ARRAY
32700: ST_TO_ADDR
32701: GO 32832
32703: LD_INT 2
32705: DOUBLE
32706: EQUAL
32707: IFTRUE 32711
32709: GO 32767
32711: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32712: LD_ADDR_VAR 0 9
32716: PUSH
32717: LD_VAR 0 17
32721: PUSH
32722: LD_VAR 0 18
32726: PUSH
32727: LD_VAR 0 19
32731: PUSH
32732: LD_VAR 0 20
32736: PUSH
32737: LD_VAR 0 21
32741: PUSH
32742: LD_VAR 0 22
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: PUSH
32755: LD_VAR 0 4
32759: PUSH
32760: LD_INT 1
32762: PLUS
32763: ARRAY
32764: ST_TO_ADDR
32765: GO 32832
32767: LD_INT 3
32769: DOUBLE
32770: EQUAL
32771: IFTRUE 32775
32773: GO 32831
32775: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32776: LD_ADDR_VAR 0 9
32780: PUSH
32781: LD_VAR 0 23
32785: PUSH
32786: LD_VAR 0 24
32790: PUSH
32791: LD_VAR 0 25
32795: PUSH
32796: LD_VAR 0 26
32800: PUSH
32801: LD_VAR 0 27
32805: PUSH
32806: LD_VAR 0 28
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: PUSH
32819: LD_VAR 0 4
32823: PUSH
32824: LD_INT 1
32826: PLUS
32827: ARRAY
32828: ST_TO_ADDR
32829: GO 32832
32831: POP
32832: GO 33387
32834: LD_INT 2
32836: DOUBLE
32837: EQUAL
32838: IFTRUE 32848
32840: LD_INT 3
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32848
32846: GO 32904
32848: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32849: LD_ADDR_VAR 0 9
32853: PUSH
32854: LD_VAR 0 29
32858: PUSH
32859: LD_VAR 0 30
32863: PUSH
32864: LD_VAR 0 31
32868: PUSH
32869: LD_VAR 0 32
32873: PUSH
32874: LD_VAR 0 33
32878: PUSH
32879: LD_VAR 0 34
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: PUSH
32892: LD_VAR 0 4
32896: PUSH
32897: LD_INT 1
32899: PLUS
32900: ARRAY
32901: ST_TO_ADDR
32902: GO 33387
32904: LD_INT 16
32906: DOUBLE
32907: EQUAL
32908: IFTRUE 32966
32910: LD_INT 17
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32966
32916: LD_INT 18
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32966
32922: LD_INT 19
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32966
32928: LD_INT 22
32930: DOUBLE
32931: EQUAL
32932: IFTRUE 32966
32934: LD_INT 20
32936: DOUBLE
32937: EQUAL
32938: IFTRUE 32966
32940: LD_INT 21
32942: DOUBLE
32943: EQUAL
32944: IFTRUE 32966
32946: LD_INT 23
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32966
32952: LD_INT 24
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32966
32958: LD_INT 25
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 33022
32966: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32967: LD_ADDR_VAR 0 9
32971: PUSH
32972: LD_VAR 0 35
32976: PUSH
32977: LD_VAR 0 36
32981: PUSH
32982: LD_VAR 0 37
32986: PUSH
32987: LD_VAR 0 38
32991: PUSH
32992: LD_VAR 0 39
32996: PUSH
32997: LD_VAR 0 40
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: PUSH
33010: LD_VAR 0 4
33014: PUSH
33015: LD_INT 1
33017: PLUS
33018: ARRAY
33019: ST_TO_ADDR
33020: GO 33387
33022: LD_INT 6
33024: DOUBLE
33025: EQUAL
33026: IFTRUE 33078
33028: LD_INT 7
33030: DOUBLE
33031: EQUAL
33032: IFTRUE 33078
33034: LD_INT 8
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33078
33040: LD_INT 13
33042: DOUBLE
33043: EQUAL
33044: IFTRUE 33078
33046: LD_INT 12
33048: DOUBLE
33049: EQUAL
33050: IFTRUE 33078
33052: LD_INT 15
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33078
33058: LD_INT 11
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33078
33064: LD_INT 14
33066: DOUBLE
33067: EQUAL
33068: IFTRUE 33078
33070: LD_INT 10
33072: DOUBLE
33073: EQUAL
33074: IFTRUE 33078
33076: GO 33134
33078: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33079: LD_ADDR_VAR 0 9
33083: PUSH
33084: LD_VAR 0 41
33088: PUSH
33089: LD_VAR 0 42
33093: PUSH
33094: LD_VAR 0 43
33098: PUSH
33099: LD_VAR 0 44
33103: PUSH
33104: LD_VAR 0 45
33108: PUSH
33109: LD_VAR 0 46
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: PUSH
33122: LD_VAR 0 4
33126: PUSH
33127: LD_INT 1
33129: PLUS
33130: ARRAY
33131: ST_TO_ADDR
33132: GO 33387
33134: LD_INT 36
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33142
33140: GO 33198
33142: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33143: LD_ADDR_VAR 0 9
33147: PUSH
33148: LD_VAR 0 47
33152: PUSH
33153: LD_VAR 0 48
33157: PUSH
33158: LD_VAR 0 49
33162: PUSH
33163: LD_VAR 0 50
33167: PUSH
33168: LD_VAR 0 51
33172: PUSH
33173: LD_VAR 0 52
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: PUSH
33186: LD_VAR 0 4
33190: PUSH
33191: LD_INT 1
33193: PLUS
33194: ARRAY
33195: ST_TO_ADDR
33196: GO 33387
33198: LD_INT 4
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33224
33204: LD_INT 5
33206: DOUBLE
33207: EQUAL
33208: IFTRUE 33224
33210: LD_INT 34
33212: DOUBLE
33213: EQUAL
33214: IFTRUE 33224
33216: LD_INT 37
33218: DOUBLE
33219: EQUAL
33220: IFTRUE 33224
33222: GO 33280
33224: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33225: LD_ADDR_VAR 0 9
33229: PUSH
33230: LD_VAR 0 53
33234: PUSH
33235: LD_VAR 0 54
33239: PUSH
33240: LD_VAR 0 55
33244: PUSH
33245: LD_VAR 0 56
33249: PUSH
33250: LD_VAR 0 57
33254: PUSH
33255: LD_VAR 0 58
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: PUSH
33268: LD_VAR 0 4
33272: PUSH
33273: LD_INT 1
33275: PLUS
33276: ARRAY
33277: ST_TO_ADDR
33278: GO 33387
33280: LD_INT 31
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33330
33286: LD_INT 32
33288: DOUBLE
33289: EQUAL
33290: IFTRUE 33330
33292: LD_INT 33
33294: DOUBLE
33295: EQUAL
33296: IFTRUE 33330
33298: LD_INT 27
33300: DOUBLE
33301: EQUAL
33302: IFTRUE 33330
33304: LD_INT 26
33306: DOUBLE
33307: EQUAL
33308: IFTRUE 33330
33310: LD_INT 28
33312: DOUBLE
33313: EQUAL
33314: IFTRUE 33330
33316: LD_INT 29
33318: DOUBLE
33319: EQUAL
33320: IFTRUE 33330
33322: LD_INT 30
33324: DOUBLE
33325: EQUAL
33326: IFTRUE 33330
33328: GO 33386
33330: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33331: LD_ADDR_VAR 0 9
33335: PUSH
33336: LD_VAR 0 59
33340: PUSH
33341: LD_VAR 0 60
33345: PUSH
33346: LD_VAR 0 61
33350: PUSH
33351: LD_VAR 0 62
33355: PUSH
33356: LD_VAR 0 63
33360: PUSH
33361: LD_VAR 0 64
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: PUSH
33374: LD_VAR 0 4
33378: PUSH
33379: LD_INT 1
33381: PLUS
33382: ARRAY
33383: ST_TO_ADDR
33384: GO 33387
33386: POP
// temp_list2 = [ ] ;
33387: LD_ADDR_VAR 0 10
33391: PUSH
33392: EMPTY
33393: ST_TO_ADDR
// for i in temp_list do
33394: LD_ADDR_VAR 0 8
33398: PUSH
33399: LD_VAR 0 9
33403: PUSH
33404: FOR_IN
33405: IFFALSE 33457
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33407: LD_ADDR_VAR 0 10
33411: PUSH
33412: LD_VAR 0 10
33416: PUSH
33417: LD_VAR 0 8
33421: PUSH
33422: LD_INT 1
33424: ARRAY
33425: PUSH
33426: LD_VAR 0 2
33430: PLUS
33431: PUSH
33432: LD_VAR 0 8
33436: PUSH
33437: LD_INT 2
33439: ARRAY
33440: PUSH
33441: LD_VAR 0 3
33445: PLUS
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: EMPTY
33452: LIST
33453: ADD
33454: ST_TO_ADDR
33455: GO 33404
33457: POP
33458: POP
// result = temp_list2 ;
33459: LD_ADDR_VAR 0 7
33463: PUSH
33464: LD_VAR 0 10
33468: ST_TO_ADDR
// end ;
33469: LD_VAR 0 7
33473: RET
// export function EnemyInRange ( unit , dist ) ; begin
33474: LD_INT 0
33476: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33477: LD_ADDR_VAR 0 3
33481: PUSH
33482: LD_VAR 0 1
33486: PPUSH
33487: CALL_OW 255
33491: PPUSH
33492: LD_VAR 0 1
33496: PPUSH
33497: CALL_OW 250
33501: PPUSH
33502: LD_VAR 0 1
33506: PPUSH
33507: CALL_OW 251
33511: PPUSH
33512: LD_VAR 0 2
33516: PPUSH
33517: CALL 6847 0 4
33521: PUSH
33522: LD_INT 4
33524: ARRAY
33525: ST_TO_ADDR
// end ;
33526: LD_VAR 0 3
33530: RET
// export function PlayerSeeMe ( unit ) ; begin
33531: LD_INT 0
33533: PPUSH
// result := See ( your_side , unit ) ;
33534: LD_ADDR_VAR 0 2
33538: PUSH
33539: LD_OWVAR 2
33543: PPUSH
33544: LD_VAR 0 1
33548: PPUSH
33549: CALL_OW 292
33553: ST_TO_ADDR
// end ;
33554: LD_VAR 0 2
33558: RET
// export function ReverseDir ( unit ) ; begin
33559: LD_INT 0
33561: PPUSH
// if not unit then
33562: LD_VAR 0 1
33566: NOT
33567: IFFALSE 33571
// exit ;
33569: GO 33594
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33571: LD_ADDR_VAR 0 2
33575: PUSH
33576: LD_VAR 0 1
33580: PPUSH
33581: CALL_OW 254
33585: PUSH
33586: LD_INT 3
33588: PLUS
33589: PUSH
33590: LD_INT 6
33592: MOD
33593: ST_TO_ADDR
// end ;
33594: LD_VAR 0 2
33598: RET
// export function ReverseArray ( array ) ; var i ; begin
33599: LD_INT 0
33601: PPUSH
33602: PPUSH
// if not array then
33603: LD_VAR 0 1
33607: NOT
33608: IFFALSE 33612
// exit ;
33610: GO 33667
// result := [ ] ;
33612: LD_ADDR_VAR 0 2
33616: PUSH
33617: EMPTY
33618: ST_TO_ADDR
// for i := array downto 1 do
33619: LD_ADDR_VAR 0 3
33623: PUSH
33624: DOUBLE
33625: LD_VAR 0 1
33629: INC
33630: ST_TO_ADDR
33631: LD_INT 1
33633: PUSH
33634: FOR_DOWNTO
33635: IFFALSE 33665
// result := Join ( result , array [ i ] ) ;
33637: LD_ADDR_VAR 0 2
33641: PUSH
33642: LD_VAR 0 2
33646: PPUSH
33647: LD_VAR 0 1
33651: PUSH
33652: LD_VAR 0 3
33656: ARRAY
33657: PPUSH
33658: CALL 38332 0 2
33662: ST_TO_ADDR
33663: GO 33634
33665: POP
33666: POP
// end ;
33667: LD_VAR 0 2
33671: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33672: LD_INT 0
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
// if not unit or not hexes then
33680: LD_VAR 0 1
33684: NOT
33685: PUSH
33686: LD_VAR 0 2
33690: NOT
33691: OR
33692: IFFALSE 33696
// exit ;
33694: GO 33819
// dist := 9999 ;
33696: LD_ADDR_VAR 0 5
33700: PUSH
33701: LD_INT 9999
33703: ST_TO_ADDR
// for i = 1 to hexes do
33704: LD_ADDR_VAR 0 4
33708: PUSH
33709: DOUBLE
33710: LD_INT 1
33712: DEC
33713: ST_TO_ADDR
33714: LD_VAR 0 2
33718: PUSH
33719: FOR_TO
33720: IFFALSE 33807
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33722: LD_ADDR_VAR 0 6
33726: PUSH
33727: LD_VAR 0 1
33731: PPUSH
33732: LD_VAR 0 2
33736: PUSH
33737: LD_VAR 0 4
33741: ARRAY
33742: PUSH
33743: LD_INT 1
33745: ARRAY
33746: PPUSH
33747: LD_VAR 0 2
33751: PUSH
33752: LD_VAR 0 4
33756: ARRAY
33757: PUSH
33758: LD_INT 2
33760: ARRAY
33761: PPUSH
33762: CALL_OW 297
33766: ST_TO_ADDR
// if tdist < dist then
33767: LD_VAR 0 6
33771: PUSH
33772: LD_VAR 0 5
33776: LESS
33777: IFFALSE 33805
// begin hex := hexes [ i ] ;
33779: LD_ADDR_VAR 0 8
33783: PUSH
33784: LD_VAR 0 2
33788: PUSH
33789: LD_VAR 0 4
33793: ARRAY
33794: ST_TO_ADDR
// dist := tdist ;
33795: LD_ADDR_VAR 0 5
33799: PUSH
33800: LD_VAR 0 6
33804: ST_TO_ADDR
// end ; end ;
33805: GO 33719
33807: POP
33808: POP
// result := hex ;
33809: LD_ADDR_VAR 0 3
33813: PUSH
33814: LD_VAR 0 8
33818: ST_TO_ADDR
// end ;
33819: LD_VAR 0 3
33823: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33824: LD_INT 0
33826: PPUSH
33827: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33828: LD_VAR 0 1
33832: NOT
33833: PUSH
33834: LD_VAR 0 1
33838: PUSH
33839: LD_INT 21
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 23
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PPUSH
33863: CALL_OW 69
33867: IN
33868: NOT
33869: OR
33870: IFFALSE 33874
// exit ;
33872: GO 33921
// for i = 1 to 3 do
33874: LD_ADDR_VAR 0 3
33878: PUSH
33879: DOUBLE
33880: LD_INT 1
33882: DEC
33883: ST_TO_ADDR
33884: LD_INT 3
33886: PUSH
33887: FOR_TO
33888: IFFALSE 33919
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33890: LD_VAR 0 1
33894: PPUSH
33895: CALL_OW 250
33899: PPUSH
33900: LD_VAR 0 1
33904: PPUSH
33905: CALL_OW 251
33909: PPUSH
33910: LD_INT 1
33912: PPUSH
33913: CALL_OW 453
33917: GO 33887
33919: POP
33920: POP
// end ;
33921: LD_VAR 0 2
33925: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33926: LD_INT 0
33928: PPUSH
33929: PPUSH
33930: PPUSH
33931: PPUSH
33932: PPUSH
33933: PPUSH
// if not unit or not enemy_unit then
33934: LD_VAR 0 1
33938: NOT
33939: PUSH
33940: LD_VAR 0 2
33944: NOT
33945: OR
33946: IFFALSE 33950
// exit ;
33948: GO 34417
// if GetLives ( i ) < 250 then
33950: LD_VAR 0 4
33954: PPUSH
33955: CALL_OW 256
33959: PUSH
33960: LD_INT 250
33962: LESS
33963: IFFALSE 33976
// begin ComAutodestruct ( i ) ;
33965: LD_VAR 0 4
33969: PPUSH
33970: CALL 33824 0 1
// exit ;
33974: GO 34417
// end ; x := GetX ( enemy_unit ) ;
33976: LD_ADDR_VAR 0 7
33980: PUSH
33981: LD_VAR 0 2
33985: PPUSH
33986: CALL_OW 250
33990: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33991: LD_ADDR_VAR 0 8
33995: PUSH
33996: LD_VAR 0 2
34000: PPUSH
34001: CALL_OW 251
34005: ST_TO_ADDR
// if not x or not y then
34006: LD_VAR 0 7
34010: NOT
34011: PUSH
34012: LD_VAR 0 8
34016: NOT
34017: OR
34018: IFFALSE 34022
// exit ;
34020: GO 34417
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34022: LD_ADDR_VAR 0 6
34026: PUSH
34027: LD_VAR 0 7
34031: PPUSH
34032: LD_INT 0
34034: PPUSH
34035: LD_INT 4
34037: PPUSH
34038: CALL_OW 272
34042: PUSH
34043: LD_VAR 0 8
34047: PPUSH
34048: LD_INT 0
34050: PPUSH
34051: LD_INT 4
34053: PPUSH
34054: CALL_OW 273
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_VAR 0 7
34067: PPUSH
34068: LD_INT 1
34070: PPUSH
34071: LD_INT 4
34073: PPUSH
34074: CALL_OW 272
34078: PUSH
34079: LD_VAR 0 8
34083: PPUSH
34084: LD_INT 1
34086: PPUSH
34087: LD_INT 4
34089: PPUSH
34090: CALL_OW 273
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_VAR 0 7
34103: PPUSH
34104: LD_INT 2
34106: PPUSH
34107: LD_INT 4
34109: PPUSH
34110: CALL_OW 272
34114: PUSH
34115: LD_VAR 0 8
34119: PPUSH
34120: LD_INT 2
34122: PPUSH
34123: LD_INT 4
34125: PPUSH
34126: CALL_OW 273
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_VAR 0 7
34139: PPUSH
34140: LD_INT 3
34142: PPUSH
34143: LD_INT 4
34145: PPUSH
34146: CALL_OW 272
34150: PUSH
34151: LD_VAR 0 8
34155: PPUSH
34156: LD_INT 3
34158: PPUSH
34159: LD_INT 4
34161: PPUSH
34162: CALL_OW 273
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_VAR 0 7
34175: PPUSH
34176: LD_INT 4
34178: PPUSH
34179: LD_INT 4
34181: PPUSH
34182: CALL_OW 272
34186: PUSH
34187: LD_VAR 0 8
34191: PPUSH
34192: LD_INT 4
34194: PPUSH
34195: LD_INT 4
34197: PPUSH
34198: CALL_OW 273
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_VAR 0 7
34211: PPUSH
34212: LD_INT 5
34214: PPUSH
34215: LD_INT 4
34217: PPUSH
34218: CALL_OW 272
34222: PUSH
34223: LD_VAR 0 8
34227: PPUSH
34228: LD_INT 5
34230: PPUSH
34231: LD_INT 4
34233: PPUSH
34234: CALL_OW 273
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: ST_TO_ADDR
// for i = tmp downto 1 do
34251: LD_ADDR_VAR 0 4
34255: PUSH
34256: DOUBLE
34257: LD_VAR 0 6
34261: INC
34262: ST_TO_ADDR
34263: LD_INT 1
34265: PUSH
34266: FOR_DOWNTO
34267: IFFALSE 34368
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34269: LD_VAR 0 6
34273: PUSH
34274: LD_VAR 0 4
34278: ARRAY
34279: PUSH
34280: LD_INT 1
34282: ARRAY
34283: PPUSH
34284: LD_VAR 0 6
34288: PUSH
34289: LD_VAR 0 4
34293: ARRAY
34294: PUSH
34295: LD_INT 2
34297: ARRAY
34298: PPUSH
34299: CALL_OW 488
34303: NOT
34304: PUSH
34305: LD_VAR 0 6
34309: PUSH
34310: LD_VAR 0 4
34314: ARRAY
34315: PUSH
34316: LD_INT 1
34318: ARRAY
34319: PPUSH
34320: LD_VAR 0 6
34324: PUSH
34325: LD_VAR 0 4
34329: ARRAY
34330: PUSH
34331: LD_INT 2
34333: ARRAY
34334: PPUSH
34335: CALL_OW 428
34339: PUSH
34340: LD_INT 0
34342: NONEQUAL
34343: OR
34344: IFFALSE 34366
// tmp := Delete ( tmp , i ) ;
34346: LD_ADDR_VAR 0 6
34350: PUSH
34351: LD_VAR 0 6
34355: PPUSH
34356: LD_VAR 0 4
34360: PPUSH
34361: CALL_OW 3
34365: ST_TO_ADDR
34366: GO 34266
34368: POP
34369: POP
// j := GetClosestHex ( unit , tmp ) ;
34370: LD_ADDR_VAR 0 5
34374: PUSH
34375: LD_VAR 0 1
34379: PPUSH
34380: LD_VAR 0 6
34384: PPUSH
34385: CALL 33672 0 2
34389: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34390: LD_VAR 0 1
34394: PPUSH
34395: LD_VAR 0 5
34399: PUSH
34400: LD_INT 1
34402: ARRAY
34403: PPUSH
34404: LD_VAR 0 5
34408: PUSH
34409: LD_INT 2
34411: ARRAY
34412: PPUSH
34413: CALL_OW 111
// end ;
34417: LD_VAR 0 3
34421: RET
// export function PrepareApemanSoldier ( ) ; begin
34422: LD_INT 0
34424: PPUSH
// uc_nation := 0 ;
34425: LD_ADDR_OWVAR 21
34429: PUSH
34430: LD_INT 0
34432: ST_TO_ADDR
// hc_sex := sex_male ;
34433: LD_ADDR_OWVAR 27
34437: PUSH
34438: LD_INT 1
34440: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34441: LD_ADDR_OWVAR 28
34445: PUSH
34446: LD_INT 15
34448: ST_TO_ADDR
// hc_gallery :=  ;
34449: LD_ADDR_OWVAR 33
34453: PUSH
34454: LD_STRING 
34456: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34457: LD_ADDR_OWVAR 31
34461: PUSH
34462: LD_INT 0
34464: PPUSH
34465: LD_INT 3
34467: PPUSH
34468: CALL_OW 12
34472: PUSH
34473: LD_INT 0
34475: PPUSH
34476: LD_INT 3
34478: PPUSH
34479: CALL_OW 12
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: ST_TO_ADDR
// end ;
34496: LD_VAR 0 1
34500: RET
// export function PrepareApemanEngineer ( ) ; begin
34501: LD_INT 0
34503: PPUSH
// uc_nation := 0 ;
34504: LD_ADDR_OWVAR 21
34508: PUSH
34509: LD_INT 0
34511: ST_TO_ADDR
// hc_sex := sex_male ;
34512: LD_ADDR_OWVAR 27
34516: PUSH
34517: LD_INT 1
34519: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34520: LD_ADDR_OWVAR 28
34524: PUSH
34525: LD_INT 16
34527: ST_TO_ADDR
// hc_gallery :=  ;
34528: LD_ADDR_OWVAR 33
34532: PUSH
34533: LD_STRING 
34535: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34536: LD_ADDR_OWVAR 31
34540: PUSH
34541: LD_INT 0
34543: PPUSH
34544: LD_INT 3
34546: PPUSH
34547: CALL_OW 12
34551: PUSH
34552: LD_INT 0
34554: PPUSH
34555: LD_INT 3
34557: PPUSH
34558: CALL_OW 12
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: ST_TO_ADDR
// end ;
34575: LD_VAR 0 1
34579: RET
// export function PrepareApeman ( agressivity ) ; begin
34580: LD_INT 0
34582: PPUSH
// uc_side := 0 ;
34583: LD_ADDR_OWVAR 20
34587: PUSH
34588: LD_INT 0
34590: ST_TO_ADDR
// uc_nation := 0 ;
34591: LD_ADDR_OWVAR 21
34595: PUSH
34596: LD_INT 0
34598: ST_TO_ADDR
// hc_sex := sex_male ;
34599: LD_ADDR_OWVAR 27
34603: PUSH
34604: LD_INT 1
34606: ST_TO_ADDR
// hc_class := class_apeman ;
34607: LD_ADDR_OWVAR 28
34611: PUSH
34612: LD_INT 12
34614: ST_TO_ADDR
// hc_gallery :=  ;
34615: LD_ADDR_OWVAR 33
34619: PUSH
34620: LD_STRING 
34622: ST_TO_ADDR
// if agressivity = 0 then
34623: LD_VAR 0 1
34627: PUSH
34628: LD_INT 0
34630: EQUAL
34631: IFFALSE 34643
// hc_agressivity := 0 else
34633: LD_ADDR_OWVAR 35
34637: PUSH
34638: LD_INT 0
34640: ST_TO_ADDR
34641: GO 34664
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34643: LD_ADDR_OWVAR 35
34647: PUSH
34648: LD_VAR 0 1
34652: NEG
34653: PPUSH
34654: LD_VAR 0 1
34658: PPUSH
34659: CALL_OW 12
34663: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34664: LD_ADDR_OWVAR 31
34668: PUSH
34669: LD_INT 0
34671: PPUSH
34672: LD_INT 3
34674: PPUSH
34675: CALL_OW 12
34679: PUSH
34680: LD_INT 0
34682: PPUSH
34683: LD_INT 3
34685: PPUSH
34686: CALL_OW 12
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: ST_TO_ADDR
// end ;
34703: LD_VAR 0 2
34707: RET
// export function PrepareTiger ( agressivity ) ; begin
34708: LD_INT 0
34710: PPUSH
// uc_side := 0 ;
34711: LD_ADDR_OWVAR 20
34715: PUSH
34716: LD_INT 0
34718: ST_TO_ADDR
// uc_nation := 0 ;
34719: LD_ADDR_OWVAR 21
34723: PUSH
34724: LD_INT 0
34726: ST_TO_ADDR
// hc_class := class_tiger ;
34727: LD_ADDR_OWVAR 28
34731: PUSH
34732: LD_INT 14
34734: ST_TO_ADDR
// hc_gallery :=  ;
34735: LD_ADDR_OWVAR 33
34739: PUSH
34740: LD_STRING 
34742: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34743: LD_ADDR_OWVAR 35
34747: PUSH
34748: LD_VAR 0 1
34752: NEG
34753: PPUSH
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL_OW 12
34763: ST_TO_ADDR
// end ;
34764: LD_VAR 0 2
34768: RET
// export function PrepareEnchidna ( ) ; begin
34769: LD_INT 0
34771: PPUSH
// uc_side := 0 ;
34772: LD_ADDR_OWVAR 20
34776: PUSH
34777: LD_INT 0
34779: ST_TO_ADDR
// uc_nation := 0 ;
34780: LD_ADDR_OWVAR 21
34784: PUSH
34785: LD_INT 0
34787: ST_TO_ADDR
// hc_class := class_baggie ;
34788: LD_ADDR_OWVAR 28
34792: PUSH
34793: LD_INT 13
34795: ST_TO_ADDR
// hc_gallery :=  ;
34796: LD_ADDR_OWVAR 33
34800: PUSH
34801: LD_STRING 
34803: ST_TO_ADDR
// end ;
34804: LD_VAR 0 1
34808: RET
// export function PrepareFrog ( ) ; begin
34809: LD_INT 0
34811: PPUSH
// uc_side := 0 ;
34812: LD_ADDR_OWVAR 20
34816: PUSH
34817: LD_INT 0
34819: ST_TO_ADDR
// uc_nation := 0 ;
34820: LD_ADDR_OWVAR 21
34824: PUSH
34825: LD_INT 0
34827: ST_TO_ADDR
// hc_class := class_frog ;
34828: LD_ADDR_OWVAR 28
34832: PUSH
34833: LD_INT 19
34835: ST_TO_ADDR
// hc_gallery :=  ;
34836: LD_ADDR_OWVAR 33
34840: PUSH
34841: LD_STRING 
34843: ST_TO_ADDR
// end ;
34844: LD_VAR 0 1
34848: RET
// export function PrepareFish ( ) ; begin
34849: LD_INT 0
34851: PPUSH
// uc_side := 0 ;
34852: LD_ADDR_OWVAR 20
34856: PUSH
34857: LD_INT 0
34859: ST_TO_ADDR
// uc_nation := 0 ;
34860: LD_ADDR_OWVAR 21
34864: PUSH
34865: LD_INT 0
34867: ST_TO_ADDR
// hc_class := class_fish ;
34868: LD_ADDR_OWVAR 28
34872: PUSH
34873: LD_INT 20
34875: ST_TO_ADDR
// hc_gallery :=  ;
34876: LD_ADDR_OWVAR 33
34880: PUSH
34881: LD_STRING 
34883: ST_TO_ADDR
// end ;
34884: LD_VAR 0 1
34888: RET
// export function PrepareBird ( ) ; begin
34889: LD_INT 0
34891: PPUSH
// uc_side := 0 ;
34892: LD_ADDR_OWVAR 20
34896: PUSH
34897: LD_INT 0
34899: ST_TO_ADDR
// uc_nation := 0 ;
34900: LD_ADDR_OWVAR 21
34904: PUSH
34905: LD_INT 0
34907: ST_TO_ADDR
// hc_class := class_phororhacos ;
34908: LD_ADDR_OWVAR 28
34912: PUSH
34913: LD_INT 18
34915: ST_TO_ADDR
// hc_gallery :=  ;
34916: LD_ADDR_OWVAR 33
34920: PUSH
34921: LD_STRING 
34923: ST_TO_ADDR
// end ;
34924: LD_VAR 0 1
34928: RET
// export function PrepareHorse ( ) ; begin
34929: LD_INT 0
34931: PPUSH
// uc_side := 0 ;
34932: LD_ADDR_OWVAR 20
34936: PUSH
34937: LD_INT 0
34939: ST_TO_ADDR
// uc_nation := 0 ;
34940: LD_ADDR_OWVAR 21
34944: PUSH
34945: LD_INT 0
34947: ST_TO_ADDR
// hc_class := class_horse ;
34948: LD_ADDR_OWVAR 28
34952: PUSH
34953: LD_INT 21
34955: ST_TO_ADDR
// hc_gallery :=  ;
34956: LD_ADDR_OWVAR 33
34960: PUSH
34961: LD_STRING 
34963: ST_TO_ADDR
// end ;
34964: LD_VAR 0 1
34968: RET
// export function PrepareMastodont ( ) ; begin
34969: LD_INT 0
34971: PPUSH
// uc_side := 0 ;
34972: LD_ADDR_OWVAR 20
34976: PUSH
34977: LD_INT 0
34979: ST_TO_ADDR
// uc_nation := 0 ;
34980: LD_ADDR_OWVAR 21
34984: PUSH
34985: LD_INT 0
34987: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34988: LD_ADDR_OWVAR 37
34992: PUSH
34993: LD_INT 31
34995: ST_TO_ADDR
// vc_control := control_rider ;
34996: LD_ADDR_OWVAR 38
35000: PUSH
35001: LD_INT 4
35003: ST_TO_ADDR
// end ;
35004: LD_VAR 0 1
35008: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35009: LD_INT 0
35011: PPUSH
35012: PPUSH
35013: PPUSH
// uc_side = 0 ;
35014: LD_ADDR_OWVAR 20
35018: PUSH
35019: LD_INT 0
35021: ST_TO_ADDR
// uc_nation = 0 ;
35022: LD_ADDR_OWVAR 21
35026: PUSH
35027: LD_INT 0
35029: ST_TO_ADDR
// InitHc_All ( ) ;
35030: CALL_OW 584
// InitVc ;
35034: CALL_OW 20
// if mastodonts then
35038: LD_VAR 0 6
35042: IFFALSE 35109
// for i = 1 to mastodonts do
35044: LD_ADDR_VAR 0 11
35048: PUSH
35049: DOUBLE
35050: LD_INT 1
35052: DEC
35053: ST_TO_ADDR
35054: LD_VAR 0 6
35058: PUSH
35059: FOR_TO
35060: IFFALSE 35107
// begin vc_chassis := 31 ;
35062: LD_ADDR_OWVAR 37
35066: PUSH
35067: LD_INT 31
35069: ST_TO_ADDR
// vc_control := control_rider ;
35070: LD_ADDR_OWVAR 38
35074: PUSH
35075: LD_INT 4
35077: ST_TO_ADDR
// animal := CreateVehicle ;
35078: LD_ADDR_VAR 0 12
35082: PUSH
35083: CALL_OW 45
35087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35088: LD_VAR 0 12
35092: PPUSH
35093: LD_VAR 0 8
35097: PPUSH
35098: LD_INT 0
35100: PPUSH
35101: CALL 37237 0 3
// end ;
35105: GO 35059
35107: POP
35108: POP
// if horses then
35109: LD_VAR 0 5
35113: IFFALSE 35180
// for i = 1 to horses do
35115: LD_ADDR_VAR 0 11
35119: PUSH
35120: DOUBLE
35121: LD_INT 1
35123: DEC
35124: ST_TO_ADDR
35125: LD_VAR 0 5
35129: PUSH
35130: FOR_TO
35131: IFFALSE 35178
// begin hc_class := 21 ;
35133: LD_ADDR_OWVAR 28
35137: PUSH
35138: LD_INT 21
35140: ST_TO_ADDR
// hc_gallery :=  ;
35141: LD_ADDR_OWVAR 33
35145: PUSH
35146: LD_STRING 
35148: ST_TO_ADDR
// animal := CreateHuman ;
35149: LD_ADDR_VAR 0 12
35153: PUSH
35154: CALL_OW 44
35158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35159: LD_VAR 0 12
35163: PPUSH
35164: LD_VAR 0 8
35168: PPUSH
35169: LD_INT 0
35171: PPUSH
35172: CALL 37237 0 3
// end ;
35176: GO 35130
35178: POP
35179: POP
// if birds then
35180: LD_VAR 0 1
35184: IFFALSE 35251
// for i = 1 to birds do
35186: LD_ADDR_VAR 0 11
35190: PUSH
35191: DOUBLE
35192: LD_INT 1
35194: DEC
35195: ST_TO_ADDR
35196: LD_VAR 0 1
35200: PUSH
35201: FOR_TO
35202: IFFALSE 35249
// begin hc_class := 18 ;
35204: LD_ADDR_OWVAR 28
35208: PUSH
35209: LD_INT 18
35211: ST_TO_ADDR
// hc_gallery =  ;
35212: LD_ADDR_OWVAR 33
35216: PUSH
35217: LD_STRING 
35219: ST_TO_ADDR
// animal := CreateHuman ;
35220: LD_ADDR_VAR 0 12
35224: PUSH
35225: CALL_OW 44
35229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35230: LD_VAR 0 12
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_INT 0
35242: PPUSH
35243: CALL 37237 0 3
// end ;
35247: GO 35201
35249: POP
35250: POP
// if tigers then
35251: LD_VAR 0 2
35255: IFFALSE 35339
// for i = 1 to tigers do
35257: LD_ADDR_VAR 0 11
35261: PUSH
35262: DOUBLE
35263: LD_INT 1
35265: DEC
35266: ST_TO_ADDR
35267: LD_VAR 0 2
35271: PUSH
35272: FOR_TO
35273: IFFALSE 35337
// begin hc_class = class_tiger ;
35275: LD_ADDR_OWVAR 28
35279: PUSH
35280: LD_INT 14
35282: ST_TO_ADDR
// hc_gallery =  ;
35283: LD_ADDR_OWVAR 33
35287: PUSH
35288: LD_STRING 
35290: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35291: LD_ADDR_OWVAR 35
35295: PUSH
35296: LD_INT 7
35298: NEG
35299: PPUSH
35300: LD_INT 7
35302: PPUSH
35303: CALL_OW 12
35307: ST_TO_ADDR
// animal := CreateHuman ;
35308: LD_ADDR_VAR 0 12
35312: PUSH
35313: CALL_OW 44
35317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35318: LD_VAR 0 12
35322: PPUSH
35323: LD_VAR 0 8
35327: PPUSH
35328: LD_INT 0
35330: PPUSH
35331: CALL 37237 0 3
// end ;
35335: GO 35272
35337: POP
35338: POP
// if apemans then
35339: LD_VAR 0 3
35343: IFFALSE 35466
// for i = 1 to apemans do
35345: LD_ADDR_VAR 0 11
35349: PUSH
35350: DOUBLE
35351: LD_INT 1
35353: DEC
35354: ST_TO_ADDR
35355: LD_VAR 0 3
35359: PUSH
35360: FOR_TO
35361: IFFALSE 35464
// begin hc_class = class_apeman ;
35363: LD_ADDR_OWVAR 28
35367: PUSH
35368: LD_INT 12
35370: ST_TO_ADDR
// hc_gallery =  ;
35371: LD_ADDR_OWVAR 33
35375: PUSH
35376: LD_STRING 
35378: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35379: LD_ADDR_OWVAR 35
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PPUSH
35388: LD_INT 2
35390: PPUSH
35391: CALL_OW 12
35395: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35396: LD_ADDR_OWVAR 31
35400: PUSH
35401: LD_INT 1
35403: PPUSH
35404: LD_INT 3
35406: PPUSH
35407: CALL_OW 12
35411: PUSH
35412: LD_INT 1
35414: PPUSH
35415: LD_INT 3
35417: PPUSH
35418: CALL_OW 12
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: ST_TO_ADDR
// animal := CreateHuman ;
35435: LD_ADDR_VAR 0 12
35439: PUSH
35440: CALL_OW 44
35444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35445: LD_VAR 0 12
35449: PPUSH
35450: LD_VAR 0 8
35454: PPUSH
35455: LD_INT 0
35457: PPUSH
35458: CALL 37237 0 3
// end ;
35462: GO 35360
35464: POP
35465: POP
// if enchidnas then
35466: LD_VAR 0 4
35470: IFFALSE 35537
// for i = 1 to enchidnas do
35472: LD_ADDR_VAR 0 11
35476: PUSH
35477: DOUBLE
35478: LD_INT 1
35480: DEC
35481: ST_TO_ADDR
35482: LD_VAR 0 4
35486: PUSH
35487: FOR_TO
35488: IFFALSE 35535
// begin hc_class = 13 ;
35490: LD_ADDR_OWVAR 28
35494: PUSH
35495: LD_INT 13
35497: ST_TO_ADDR
// hc_gallery =  ;
35498: LD_ADDR_OWVAR 33
35502: PUSH
35503: LD_STRING 
35505: ST_TO_ADDR
// animal := CreateHuman ;
35506: LD_ADDR_VAR 0 12
35510: PUSH
35511: CALL_OW 44
35515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35516: LD_VAR 0 12
35520: PPUSH
35521: LD_VAR 0 8
35525: PPUSH
35526: LD_INT 0
35528: PPUSH
35529: CALL 37237 0 3
// end ;
35533: GO 35487
35535: POP
35536: POP
// if fishes then
35537: LD_VAR 0 7
35541: IFFALSE 35608
// for i = 1 to fishes do
35543: LD_ADDR_VAR 0 11
35547: PUSH
35548: DOUBLE
35549: LD_INT 1
35551: DEC
35552: ST_TO_ADDR
35553: LD_VAR 0 7
35557: PUSH
35558: FOR_TO
35559: IFFALSE 35606
// begin hc_class = 20 ;
35561: LD_ADDR_OWVAR 28
35565: PUSH
35566: LD_INT 20
35568: ST_TO_ADDR
// hc_gallery =  ;
35569: LD_ADDR_OWVAR 33
35573: PUSH
35574: LD_STRING 
35576: ST_TO_ADDR
// animal := CreateHuman ;
35577: LD_ADDR_VAR 0 12
35581: PUSH
35582: CALL_OW 44
35586: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35587: LD_VAR 0 12
35591: PPUSH
35592: LD_VAR 0 9
35596: PPUSH
35597: LD_INT 0
35599: PPUSH
35600: CALL 37237 0 3
// end ;
35604: GO 35558
35606: POP
35607: POP
// end ;
35608: LD_VAR 0 10
35612: RET
// export function WantHeal ( sci , unit ) ; begin
35613: LD_INT 0
35615: PPUSH
// if GetTaskList ( sci ) > 0 then
35616: LD_VAR 0 1
35620: PPUSH
35621: CALL_OW 437
35625: PUSH
35626: LD_INT 0
35628: GREATER
35629: IFFALSE 35699
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35631: LD_VAR 0 1
35635: PPUSH
35636: CALL_OW 437
35640: PUSH
35641: LD_INT 1
35643: ARRAY
35644: PUSH
35645: LD_INT 1
35647: ARRAY
35648: PUSH
35649: LD_STRING l
35651: EQUAL
35652: PUSH
35653: LD_VAR 0 1
35657: PPUSH
35658: CALL_OW 437
35662: PUSH
35663: LD_INT 1
35665: ARRAY
35666: PUSH
35667: LD_INT 4
35669: ARRAY
35670: PUSH
35671: LD_VAR 0 2
35675: EQUAL
35676: AND
35677: IFFALSE 35689
// result := true else
35679: LD_ADDR_VAR 0 3
35683: PUSH
35684: LD_INT 1
35686: ST_TO_ADDR
35687: GO 35697
// result := false ;
35689: LD_ADDR_VAR 0 3
35693: PUSH
35694: LD_INT 0
35696: ST_TO_ADDR
// end else
35697: GO 35707
// result := false ;
35699: LD_ADDR_VAR 0 3
35703: PUSH
35704: LD_INT 0
35706: ST_TO_ADDR
// end ;
35707: LD_VAR 0 3
35711: RET
// export function HealTarget ( sci ) ; begin
35712: LD_INT 0
35714: PPUSH
// if not sci then
35715: LD_VAR 0 1
35719: NOT
35720: IFFALSE 35724
// exit ;
35722: GO 35789
// result := 0 ;
35724: LD_ADDR_VAR 0 2
35728: PUSH
35729: LD_INT 0
35731: ST_TO_ADDR
// if GetTaskList ( sci ) then
35732: LD_VAR 0 1
35736: PPUSH
35737: CALL_OW 437
35741: IFFALSE 35789
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35743: LD_VAR 0 1
35747: PPUSH
35748: CALL_OW 437
35752: PUSH
35753: LD_INT 1
35755: ARRAY
35756: PUSH
35757: LD_INT 1
35759: ARRAY
35760: PUSH
35761: LD_STRING l
35763: EQUAL
35764: IFFALSE 35789
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35766: LD_ADDR_VAR 0 2
35770: PUSH
35771: LD_VAR 0 1
35775: PPUSH
35776: CALL_OW 437
35780: PUSH
35781: LD_INT 1
35783: ARRAY
35784: PUSH
35785: LD_INT 4
35787: ARRAY
35788: ST_TO_ADDR
// end ;
35789: LD_VAR 0 2
35793: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35794: LD_INT 0
35796: PPUSH
35797: PPUSH
35798: PPUSH
35799: PPUSH
// if not base_units then
35800: LD_VAR 0 1
35804: NOT
35805: IFFALSE 35809
// exit ;
35807: GO 35896
// result := false ;
35809: LD_ADDR_VAR 0 2
35813: PUSH
35814: LD_INT 0
35816: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35817: LD_ADDR_VAR 0 5
35821: PUSH
35822: LD_VAR 0 1
35826: PPUSH
35827: LD_INT 21
35829: PUSH
35830: LD_INT 3
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PPUSH
35837: CALL_OW 72
35841: ST_TO_ADDR
// if not tmp then
35842: LD_VAR 0 5
35846: NOT
35847: IFFALSE 35851
// exit ;
35849: GO 35896
// for i in tmp do
35851: LD_ADDR_VAR 0 3
35855: PUSH
35856: LD_VAR 0 5
35860: PUSH
35861: FOR_IN
35862: IFFALSE 35894
// begin result := EnemyInRange ( i , 22 ) ;
35864: LD_ADDR_VAR 0 2
35868: PUSH
35869: LD_VAR 0 3
35873: PPUSH
35874: LD_INT 22
35876: PPUSH
35877: CALL 33474 0 2
35881: ST_TO_ADDR
// if result then
35882: LD_VAR 0 2
35886: IFFALSE 35892
// exit ;
35888: POP
35889: POP
35890: GO 35896
// end ;
35892: GO 35861
35894: POP
35895: POP
// end ;
35896: LD_VAR 0 2
35900: RET
// export function FilterByTag ( units , tag ) ; begin
35901: LD_INT 0
35903: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: LD_VAR 0 1
35913: PPUSH
35914: LD_INT 120
35916: PUSH
35917: LD_VAR 0 2
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PPUSH
35926: CALL_OW 72
35930: ST_TO_ADDR
// end ;
35931: LD_VAR 0 3
35935: RET
// export function IsDriver ( un ) ; begin
35936: LD_INT 0
35938: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35939: LD_ADDR_VAR 0 2
35943: PUSH
35944: LD_VAR 0 1
35948: PUSH
35949: LD_INT 55
35951: PUSH
35952: EMPTY
35953: LIST
35954: PPUSH
35955: CALL_OW 69
35959: IN
35960: ST_TO_ADDR
// end ;
35961: LD_VAR 0 2
35965: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35966: LD_INT 0
35968: PPUSH
35969: PPUSH
// list := [ ] ;
35970: LD_ADDR_VAR 0 5
35974: PUSH
35975: EMPTY
35976: ST_TO_ADDR
// case d of 0 :
35977: LD_VAR 0 3
35981: PUSH
35982: LD_INT 0
35984: DOUBLE
35985: EQUAL
35986: IFTRUE 35990
35988: GO 36123
35990: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35991: LD_ADDR_VAR 0 5
35995: PUSH
35996: LD_VAR 0 1
36000: PUSH
36001: LD_INT 4
36003: MINUS
36004: PUSH
36005: LD_VAR 0 2
36009: PUSH
36010: LD_INT 4
36012: MINUS
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: LIST
36021: PUSH
36022: LD_VAR 0 1
36026: PUSH
36027: LD_INT 3
36029: MINUS
36030: PUSH
36031: LD_VAR 0 2
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: PUSH
36044: LD_VAR 0 1
36048: PUSH
36049: LD_INT 4
36051: PLUS
36052: PUSH
36053: LD_VAR 0 2
36057: PUSH
36058: LD_INT 4
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: PUSH
36066: LD_VAR 0 1
36070: PUSH
36071: LD_INT 3
36073: PLUS
36074: PUSH
36075: LD_VAR 0 2
36079: PUSH
36080: LD_INT 3
36082: PLUS
36083: PUSH
36084: LD_INT 5
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: PUSH
36092: LD_VAR 0 1
36096: PUSH
36097: LD_VAR 0 2
36101: PUSH
36102: LD_INT 4
36104: PLUS
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: ST_TO_ADDR
// end ; 1 :
36121: GO 36821
36123: LD_INT 1
36125: DOUBLE
36126: EQUAL
36127: IFTRUE 36131
36129: GO 36264
36131: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36132: LD_ADDR_VAR 0 5
36136: PUSH
36137: LD_VAR 0 1
36141: PUSH
36142: LD_VAR 0 2
36146: PUSH
36147: LD_INT 4
36149: MINUS
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: PUSH
36159: LD_VAR 0 1
36163: PUSH
36164: LD_INT 3
36166: MINUS
36167: PUSH
36168: LD_VAR 0 2
36172: PUSH
36173: LD_INT 3
36175: MINUS
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: PUSH
36185: LD_VAR 0 1
36189: PUSH
36190: LD_INT 4
36192: MINUS
36193: PUSH
36194: LD_VAR 0 2
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: PUSH
36207: LD_VAR 0 1
36211: PUSH
36212: LD_VAR 0 2
36216: PUSH
36217: LD_INT 3
36219: PLUS
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: PUSH
36229: LD_VAR 0 1
36233: PUSH
36234: LD_INT 4
36236: PLUS
36237: PUSH
36238: LD_VAR 0 2
36242: PUSH
36243: LD_INT 4
36245: PLUS
36246: PUSH
36247: LD_INT 5
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: LIST
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: ST_TO_ADDR
// end ; 2 :
36262: GO 36821
36264: LD_INT 2
36266: DOUBLE
36267: EQUAL
36268: IFTRUE 36272
36270: GO 36401
36272: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36273: LD_ADDR_VAR 0 5
36277: PUSH
36278: LD_VAR 0 1
36282: PUSH
36283: LD_VAR 0 2
36287: PUSH
36288: LD_INT 3
36290: MINUS
36291: PUSH
36292: LD_INT 3
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: LIST
36299: PUSH
36300: LD_VAR 0 1
36304: PUSH
36305: LD_INT 4
36307: PLUS
36308: PUSH
36309: LD_VAR 0 2
36313: PUSH
36314: LD_INT 4
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: PUSH
36322: LD_VAR 0 1
36326: PUSH
36327: LD_VAR 0 2
36331: PUSH
36332: LD_INT 4
36334: PLUS
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: PUSH
36344: LD_VAR 0 1
36348: PUSH
36349: LD_INT 3
36351: MINUS
36352: PUSH
36353: LD_VAR 0 2
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: PUSH
36366: LD_VAR 0 1
36370: PUSH
36371: LD_INT 4
36373: MINUS
36374: PUSH
36375: LD_VAR 0 2
36379: PUSH
36380: LD_INT 4
36382: MINUS
36383: PUSH
36384: LD_INT 2
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: ST_TO_ADDR
// end ; 3 :
36399: GO 36821
36401: LD_INT 3
36403: DOUBLE
36404: EQUAL
36405: IFTRUE 36409
36407: GO 36542
36409: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36410: LD_ADDR_VAR 0 5
36414: PUSH
36415: LD_VAR 0 1
36419: PUSH
36420: LD_INT 3
36422: PLUS
36423: PUSH
36424: LD_VAR 0 2
36428: PUSH
36429: LD_INT 4
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: PUSH
36437: LD_VAR 0 1
36441: PUSH
36442: LD_INT 4
36444: PLUS
36445: PUSH
36446: LD_VAR 0 2
36450: PUSH
36451: LD_INT 4
36453: PLUS
36454: PUSH
36455: LD_INT 5
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: PUSH
36463: LD_VAR 0 1
36467: PUSH
36468: LD_INT 4
36470: MINUS
36471: PUSH
36472: LD_VAR 0 2
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: PUSH
36485: LD_VAR 0 1
36489: PUSH
36490: LD_VAR 0 2
36494: PUSH
36495: LD_INT 4
36497: MINUS
36498: PUSH
36499: LD_INT 3
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: PUSH
36507: LD_VAR 0 1
36511: PUSH
36512: LD_INT 3
36514: MINUS
36515: PUSH
36516: LD_VAR 0 2
36520: PUSH
36521: LD_INT 3
36523: MINUS
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// end ; 4 :
36540: GO 36821
36542: LD_INT 4
36544: DOUBLE
36545: EQUAL
36546: IFTRUE 36550
36548: GO 36683
36550: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36551: LD_ADDR_VAR 0 5
36555: PUSH
36556: LD_VAR 0 1
36560: PUSH
36561: LD_VAR 0 2
36565: PUSH
36566: LD_INT 4
36568: PLUS
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: PUSH
36578: LD_VAR 0 1
36582: PUSH
36583: LD_INT 3
36585: PLUS
36586: PUSH
36587: LD_VAR 0 2
36591: PUSH
36592: LD_INT 3
36594: PLUS
36595: PUSH
36596: LD_INT 5
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: PUSH
36604: LD_VAR 0 1
36608: PUSH
36609: LD_INT 4
36611: PLUS
36612: PUSH
36613: LD_VAR 0 2
36617: PUSH
36618: LD_INT 4
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: PUSH
36626: LD_VAR 0 1
36630: PUSH
36631: LD_VAR 0 2
36635: PUSH
36636: LD_INT 3
36638: MINUS
36639: PUSH
36640: LD_INT 3
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: PUSH
36648: LD_VAR 0 1
36652: PUSH
36653: LD_INT 4
36655: MINUS
36656: PUSH
36657: LD_VAR 0 2
36661: PUSH
36662: LD_INT 4
36664: MINUS
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: ST_TO_ADDR
// end ; 5 :
36681: GO 36821
36683: LD_INT 5
36685: DOUBLE
36686: EQUAL
36687: IFTRUE 36691
36689: GO 36820
36691: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36692: LD_ADDR_VAR 0 5
36696: PUSH
36697: LD_VAR 0 1
36701: PUSH
36702: LD_INT 4
36704: MINUS
36705: PUSH
36706: LD_VAR 0 2
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: PUSH
36719: LD_VAR 0 1
36723: PUSH
36724: LD_VAR 0 2
36728: PUSH
36729: LD_INT 4
36731: MINUS
36732: PUSH
36733: LD_INT 3
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: PUSH
36741: LD_VAR 0 1
36745: PUSH
36746: LD_INT 4
36748: PLUS
36749: PUSH
36750: LD_VAR 0 2
36754: PUSH
36755: LD_INT 4
36757: PLUS
36758: PUSH
36759: LD_INT 5
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: PUSH
36767: LD_VAR 0 1
36771: PUSH
36772: LD_INT 3
36774: PLUS
36775: PUSH
36776: LD_VAR 0 2
36780: PUSH
36781: LD_INT 4
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: PUSH
36789: LD_VAR 0 1
36793: PUSH
36794: LD_VAR 0 2
36798: PUSH
36799: LD_INT 3
36801: PLUS
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// end ; end ;
36818: GO 36821
36820: POP
// result := list ;
36821: LD_ADDR_VAR 0 4
36825: PUSH
36826: LD_VAR 0 5
36830: ST_TO_ADDR
// end ;
36831: LD_VAR 0 4
36835: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36836: LD_INT 0
36838: PPUSH
36839: PPUSH
36840: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36841: LD_VAR 0 1
36845: NOT
36846: PUSH
36847: LD_VAR 0 2
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: LD_INT 3
36860: PUSH
36861: LD_INT 4
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: IN
36870: NOT
36871: OR
36872: IFFALSE 36876
// exit ;
36874: GO 36959
// tmp := [ ] ;
36876: LD_ADDR_VAR 0 5
36880: PUSH
36881: EMPTY
36882: ST_TO_ADDR
// for i in units do
36883: LD_ADDR_VAR 0 4
36887: PUSH
36888: LD_VAR 0 1
36892: PUSH
36893: FOR_IN
36894: IFFALSE 36928
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36896: LD_ADDR_VAR 0 5
36900: PUSH
36901: LD_VAR 0 5
36905: PPUSH
36906: LD_VAR 0 4
36910: PPUSH
36911: LD_VAR 0 2
36915: PPUSH
36916: CALL_OW 259
36920: PPUSH
36921: CALL 38332 0 2
36925: ST_TO_ADDR
36926: GO 36893
36928: POP
36929: POP
// if not tmp then
36930: LD_VAR 0 5
36934: NOT
36935: IFFALSE 36939
// exit ;
36937: GO 36959
// result := SortListByListDesc ( units , tmp ) ;
36939: LD_ADDR_VAR 0 3
36943: PUSH
36944: LD_VAR 0 1
36948: PPUSH
36949: LD_VAR 0 5
36953: PPUSH
36954: CALL_OW 77
36958: ST_TO_ADDR
// end ;
36959: LD_VAR 0 3
36963: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36964: LD_INT 0
36966: PPUSH
36967: PPUSH
36968: PPUSH
// result := false ;
36969: LD_ADDR_VAR 0 3
36973: PUSH
36974: LD_INT 0
36976: ST_TO_ADDR
// if not building then
36977: LD_VAR 0 2
36981: NOT
36982: IFFALSE 36986
// exit ;
36984: GO 37124
// x := GetX ( building ) ;
36986: LD_ADDR_VAR 0 4
36990: PUSH
36991: LD_VAR 0 2
36995: PPUSH
36996: CALL_OW 250
37000: ST_TO_ADDR
// y := GetY ( building ) ;
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: LD_VAR 0 2
37010: PPUSH
37011: CALL_OW 251
37015: ST_TO_ADDR
// if not x or not y then
37016: LD_VAR 0 4
37020: NOT
37021: PUSH
37022: LD_VAR 0 5
37026: NOT
37027: OR
37028: IFFALSE 37032
// exit ;
37030: GO 37124
// if GetTaskList ( unit ) then
37032: LD_VAR 0 1
37036: PPUSH
37037: CALL_OW 437
37041: IFFALSE 37124
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37043: LD_STRING e
37045: PUSH
37046: LD_VAR 0 1
37050: PPUSH
37051: CALL_OW 437
37055: PUSH
37056: LD_INT 1
37058: ARRAY
37059: PUSH
37060: LD_INT 1
37062: ARRAY
37063: EQUAL
37064: PUSH
37065: LD_VAR 0 4
37069: PUSH
37070: LD_VAR 0 1
37074: PPUSH
37075: CALL_OW 437
37079: PUSH
37080: LD_INT 1
37082: ARRAY
37083: PUSH
37084: LD_INT 2
37086: ARRAY
37087: EQUAL
37088: AND
37089: PUSH
37090: LD_VAR 0 5
37094: PUSH
37095: LD_VAR 0 1
37099: PPUSH
37100: CALL_OW 437
37104: PUSH
37105: LD_INT 1
37107: ARRAY
37108: PUSH
37109: LD_INT 3
37111: ARRAY
37112: EQUAL
37113: AND
37114: IFFALSE 37124
// result := true end ;
37116: LD_ADDR_VAR 0 3
37120: PUSH
37121: LD_INT 1
37123: ST_TO_ADDR
// end ;
37124: LD_VAR 0 3
37128: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37129: LD_INT 0
37131: PPUSH
// result := false ;
37132: LD_ADDR_VAR 0 4
37136: PUSH
37137: LD_INT 0
37139: ST_TO_ADDR
// if GetTaskList ( unit ) then
37140: LD_VAR 0 1
37144: PPUSH
37145: CALL_OW 437
37149: IFFALSE 37232
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37151: LD_STRING M
37153: PUSH
37154: LD_VAR 0 1
37158: PPUSH
37159: CALL_OW 437
37163: PUSH
37164: LD_INT 1
37166: ARRAY
37167: PUSH
37168: LD_INT 1
37170: ARRAY
37171: EQUAL
37172: PUSH
37173: LD_VAR 0 2
37177: PUSH
37178: LD_VAR 0 1
37182: PPUSH
37183: CALL_OW 437
37187: PUSH
37188: LD_INT 1
37190: ARRAY
37191: PUSH
37192: LD_INT 2
37194: ARRAY
37195: EQUAL
37196: AND
37197: PUSH
37198: LD_VAR 0 3
37202: PUSH
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL_OW 437
37212: PUSH
37213: LD_INT 1
37215: ARRAY
37216: PUSH
37217: LD_INT 3
37219: ARRAY
37220: EQUAL
37221: AND
37222: IFFALSE 37232
// result := true ;
37224: LD_ADDR_VAR 0 4
37228: PUSH
37229: LD_INT 1
37231: ST_TO_ADDR
// end ; end ;
37232: LD_VAR 0 4
37236: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37237: LD_INT 0
37239: PPUSH
37240: PPUSH
37241: PPUSH
37242: PPUSH
// if not unit or not area then
37243: LD_VAR 0 1
37247: NOT
37248: PUSH
37249: LD_VAR 0 2
37253: NOT
37254: OR
37255: IFFALSE 37259
// exit ;
37257: GO 37435
// tmp := AreaToList ( area , i ) ;
37259: LD_ADDR_VAR 0 6
37263: PUSH
37264: LD_VAR 0 2
37268: PPUSH
37269: LD_VAR 0 5
37273: PPUSH
37274: CALL_OW 517
37278: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37279: LD_ADDR_VAR 0 5
37283: PUSH
37284: DOUBLE
37285: LD_INT 1
37287: DEC
37288: ST_TO_ADDR
37289: LD_VAR 0 6
37293: PUSH
37294: LD_INT 1
37296: ARRAY
37297: PUSH
37298: FOR_TO
37299: IFFALSE 37433
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37301: LD_ADDR_VAR 0 7
37305: PUSH
37306: LD_VAR 0 6
37310: PUSH
37311: LD_INT 1
37313: ARRAY
37314: PUSH
37315: LD_VAR 0 5
37319: ARRAY
37320: PUSH
37321: LD_VAR 0 6
37325: PUSH
37326: LD_INT 2
37328: ARRAY
37329: PUSH
37330: LD_VAR 0 5
37334: ARRAY
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37340: LD_INT 92
37342: PUSH
37343: LD_VAR 0 7
37347: PUSH
37348: LD_INT 1
37350: ARRAY
37351: PUSH
37352: LD_VAR 0 7
37356: PUSH
37357: LD_INT 2
37359: ARRAY
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: PPUSH
37370: CALL_OW 69
37374: PUSH
37375: LD_INT 0
37377: EQUAL
37378: IFFALSE 37431
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37380: LD_VAR 0 1
37384: PPUSH
37385: LD_VAR 0 7
37389: PUSH
37390: LD_INT 1
37392: ARRAY
37393: PPUSH
37394: LD_VAR 0 7
37398: PUSH
37399: LD_INT 2
37401: ARRAY
37402: PPUSH
37403: LD_VAR 0 3
37407: PPUSH
37408: CALL_OW 48
// result := IsPlaced ( unit ) ;
37412: LD_ADDR_VAR 0 4
37416: PUSH
37417: LD_VAR 0 1
37421: PPUSH
37422: CALL_OW 305
37426: ST_TO_ADDR
// exit ;
37427: POP
37428: POP
37429: GO 37435
// end ; end ;
37431: GO 37298
37433: POP
37434: POP
// end ;
37435: LD_VAR 0 4
37439: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37440: LD_INT 0
37442: PPUSH
37443: PPUSH
37444: PPUSH
// if not side or side > 8 then
37445: LD_VAR 0 1
37449: NOT
37450: PUSH
37451: LD_VAR 0 1
37455: PUSH
37456: LD_INT 8
37458: GREATER
37459: OR
37460: IFFALSE 37464
// exit ;
37462: GO 37651
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37464: LD_ADDR_VAR 0 4
37468: PUSH
37469: LD_INT 22
37471: PUSH
37472: LD_VAR 0 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 21
37483: PUSH
37484: LD_INT 3
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PPUSH
37495: CALL_OW 69
37499: ST_TO_ADDR
// if not tmp then
37500: LD_VAR 0 4
37504: NOT
37505: IFFALSE 37509
// exit ;
37507: GO 37651
// enable_addtolog := true ;
37509: LD_ADDR_OWVAR 81
37513: PUSH
37514: LD_INT 1
37516: ST_TO_ADDR
// AddToLog ( [ ) ;
37517: LD_STRING [
37519: PPUSH
37520: CALL_OW 561
// for i in tmp do
37524: LD_ADDR_VAR 0 3
37528: PUSH
37529: LD_VAR 0 4
37533: PUSH
37534: FOR_IN
37535: IFFALSE 37642
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37537: LD_STRING [
37539: PUSH
37540: LD_VAR 0 3
37544: PPUSH
37545: CALL_OW 266
37549: STR
37550: PUSH
37551: LD_STRING , 
37553: STR
37554: PUSH
37555: LD_VAR 0 3
37559: PPUSH
37560: CALL_OW 250
37564: STR
37565: PUSH
37566: LD_STRING , 
37568: STR
37569: PUSH
37570: LD_VAR 0 3
37574: PPUSH
37575: CALL_OW 251
37579: STR
37580: PUSH
37581: LD_STRING , 
37583: STR
37584: PUSH
37585: LD_VAR 0 3
37589: PPUSH
37590: CALL_OW 254
37594: STR
37595: PUSH
37596: LD_STRING , 
37598: STR
37599: PUSH
37600: LD_VAR 0 3
37604: PPUSH
37605: LD_INT 1
37607: PPUSH
37608: CALL_OW 268
37612: STR
37613: PUSH
37614: LD_STRING , 
37616: STR
37617: PUSH
37618: LD_VAR 0 3
37622: PPUSH
37623: LD_INT 2
37625: PPUSH
37626: CALL_OW 268
37630: STR
37631: PUSH
37632: LD_STRING ],
37634: STR
37635: PPUSH
37636: CALL_OW 561
// end ;
37640: GO 37534
37642: POP
37643: POP
// AddToLog ( ]; ) ;
37644: LD_STRING ];
37646: PPUSH
37647: CALL_OW 561
// end ;
37651: LD_VAR 0 2
37655: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37656: LD_INT 0
37658: PPUSH
37659: PPUSH
37660: PPUSH
37661: PPUSH
37662: PPUSH
// if not area or not rate or not max then
37663: LD_VAR 0 1
37667: NOT
37668: PUSH
37669: LD_VAR 0 2
37673: NOT
37674: OR
37675: PUSH
37676: LD_VAR 0 4
37680: NOT
37681: OR
37682: IFFALSE 37686
// exit ;
37684: GO 37875
// while 1 do
37686: LD_INT 1
37688: IFFALSE 37875
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37690: LD_ADDR_VAR 0 9
37694: PUSH
37695: LD_VAR 0 1
37699: PPUSH
37700: LD_INT 1
37702: PPUSH
37703: CALL_OW 287
37707: PUSH
37708: LD_INT 10
37710: MUL
37711: ST_TO_ADDR
// r := rate / 10 ;
37712: LD_ADDR_VAR 0 7
37716: PUSH
37717: LD_VAR 0 2
37721: PUSH
37722: LD_INT 10
37724: DIVREAL
37725: ST_TO_ADDR
// time := 1 1$00 ;
37726: LD_ADDR_VAR 0 8
37730: PUSH
37731: LD_INT 2100
37733: ST_TO_ADDR
// if amount < min then
37734: LD_VAR 0 9
37738: PUSH
37739: LD_VAR 0 3
37743: LESS
37744: IFFALSE 37762
// r := r * 2 else
37746: LD_ADDR_VAR 0 7
37750: PUSH
37751: LD_VAR 0 7
37755: PUSH
37756: LD_INT 2
37758: MUL
37759: ST_TO_ADDR
37760: GO 37788
// if amount > max then
37762: LD_VAR 0 9
37766: PUSH
37767: LD_VAR 0 4
37771: GREATER
37772: IFFALSE 37788
// r := r / 2 ;
37774: LD_ADDR_VAR 0 7
37778: PUSH
37779: LD_VAR 0 7
37783: PUSH
37784: LD_INT 2
37786: DIVREAL
37787: ST_TO_ADDR
// time := time / r ;
37788: LD_ADDR_VAR 0 8
37792: PUSH
37793: LD_VAR 0 8
37797: PUSH
37798: LD_VAR 0 7
37802: DIVREAL
37803: ST_TO_ADDR
// if time < 0 then
37804: LD_VAR 0 8
37808: PUSH
37809: LD_INT 0
37811: LESS
37812: IFFALSE 37829
// time := time * - 1 ;
37814: LD_ADDR_VAR 0 8
37818: PUSH
37819: LD_VAR 0 8
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: MUL
37828: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37829: LD_VAR 0 8
37833: PUSH
37834: LD_INT 35
37836: PPUSH
37837: LD_INT 875
37839: PPUSH
37840: CALL_OW 12
37844: PLUS
37845: PPUSH
37846: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37850: LD_INT 1
37852: PPUSH
37853: LD_INT 5
37855: PPUSH
37856: CALL_OW 12
37860: PPUSH
37861: LD_VAR 0 1
37865: PPUSH
37866: LD_INT 1
37868: PPUSH
37869: CALL_OW 55
// end ;
37873: GO 37686
// end ;
37875: LD_VAR 0 5
37879: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37880: LD_INT 0
37882: PPUSH
37883: PPUSH
37884: PPUSH
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
// if not turrets or not factories then
37890: LD_VAR 0 1
37894: NOT
37895: PUSH
37896: LD_VAR 0 2
37900: NOT
37901: OR
37902: IFFALSE 37906
// exit ;
37904: GO 38213
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37906: LD_ADDR_VAR 0 10
37910: PUSH
37911: LD_INT 5
37913: PUSH
37914: LD_INT 6
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 2
37923: PUSH
37924: LD_INT 4
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 3
37933: PUSH
37934: LD_INT 5
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 24
37948: PUSH
37949: LD_INT 25
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 23
37958: PUSH
37959: LD_INT 27
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 42
37972: PUSH
37973: LD_INT 43
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 44
37982: PUSH
37983: LD_INT 46
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 45
37992: PUSH
37993: LD_INT 47
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: ST_TO_ADDR
// result := [ ] ;
38010: LD_ADDR_VAR 0 3
38014: PUSH
38015: EMPTY
38016: ST_TO_ADDR
// for i in turrets do
38017: LD_ADDR_VAR 0 4
38021: PUSH
38022: LD_VAR 0 1
38026: PUSH
38027: FOR_IN
38028: IFFALSE 38211
// begin nat := GetNation ( i ) ;
38030: LD_ADDR_VAR 0 7
38034: PUSH
38035: LD_VAR 0 4
38039: PPUSH
38040: CALL_OW 248
38044: ST_TO_ADDR
// weapon := 0 ;
38045: LD_ADDR_VAR 0 8
38049: PUSH
38050: LD_INT 0
38052: ST_TO_ADDR
// if not nat then
38053: LD_VAR 0 7
38057: NOT
38058: IFFALSE 38062
// continue ;
38060: GO 38027
// for j in list [ nat ] do
38062: LD_ADDR_VAR 0 5
38066: PUSH
38067: LD_VAR 0 10
38071: PUSH
38072: LD_VAR 0 7
38076: ARRAY
38077: PUSH
38078: FOR_IN
38079: IFFALSE 38120
// if GetBWeapon ( i ) = j [ 1 ] then
38081: LD_VAR 0 4
38085: PPUSH
38086: CALL_OW 269
38090: PUSH
38091: LD_VAR 0 5
38095: PUSH
38096: LD_INT 1
38098: ARRAY
38099: EQUAL
38100: IFFALSE 38118
// begin weapon := j [ 2 ] ;
38102: LD_ADDR_VAR 0 8
38106: PUSH
38107: LD_VAR 0 5
38111: PUSH
38112: LD_INT 2
38114: ARRAY
38115: ST_TO_ADDR
// break ;
38116: GO 38120
// end ;
38118: GO 38078
38120: POP
38121: POP
// if not weapon then
38122: LD_VAR 0 8
38126: NOT
38127: IFFALSE 38131
// continue ;
38129: GO 38027
// for k in factories do
38131: LD_ADDR_VAR 0 6
38135: PUSH
38136: LD_VAR 0 2
38140: PUSH
38141: FOR_IN
38142: IFFALSE 38207
// begin weapons := AvailableWeaponList ( k ) ;
38144: LD_ADDR_VAR 0 9
38148: PUSH
38149: LD_VAR 0 6
38153: PPUSH
38154: CALL_OW 478
38158: ST_TO_ADDR
// if not weapons then
38159: LD_VAR 0 9
38163: NOT
38164: IFFALSE 38168
// continue ;
38166: GO 38141
// if weapon in weapons then
38168: LD_VAR 0 8
38172: PUSH
38173: LD_VAR 0 9
38177: IN
38178: IFFALSE 38205
// begin result := [ i , weapon ] ;
38180: LD_ADDR_VAR 0 3
38184: PUSH
38185: LD_VAR 0 4
38189: PUSH
38190: LD_VAR 0 8
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: ST_TO_ADDR
// exit ;
38199: POP
38200: POP
38201: POP
38202: POP
38203: GO 38213
// end ; end ;
38205: GO 38141
38207: POP
38208: POP
// end ;
38209: GO 38027
38211: POP
38212: POP
// end ;
38213: LD_VAR 0 3
38217: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38218: LD_INT 0
38220: PPUSH
// if not side or side > 8 then
38221: LD_VAR 0 3
38225: NOT
38226: PUSH
38227: LD_VAR 0 3
38231: PUSH
38232: LD_INT 8
38234: GREATER
38235: OR
38236: IFFALSE 38240
// exit ;
38238: GO 38299
// if not range then
38240: LD_VAR 0 4
38244: NOT
38245: IFFALSE 38256
// range := - 12 ;
38247: LD_ADDR_VAR 0 4
38251: PUSH
38252: LD_INT 12
38254: NEG
38255: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38256: LD_VAR 0 1
38260: PPUSH
38261: LD_VAR 0 2
38265: PPUSH
38266: LD_VAR 0 3
38270: PPUSH
38271: LD_VAR 0 4
38275: PPUSH
38276: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38280: LD_VAR 0 1
38284: PPUSH
38285: LD_VAR 0 2
38289: PPUSH
38290: LD_VAR 0 3
38294: PPUSH
38295: CALL_OW 331
// end ;
38299: LD_VAR 0 5
38303: RET
// export function Video ( mode ) ; begin
38304: LD_INT 0
38306: PPUSH
// ingame_video = mode ;
38307: LD_ADDR_OWVAR 52
38311: PUSH
38312: LD_VAR 0 1
38316: ST_TO_ADDR
// interface_hidden = mode ;
38317: LD_ADDR_OWVAR 54
38321: PUSH
38322: LD_VAR 0 1
38326: ST_TO_ADDR
// end ;
38327: LD_VAR 0 2
38331: RET
// export function Join ( array , element ) ; begin
38332: LD_INT 0
38334: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38335: LD_ADDR_VAR 0 3
38339: PUSH
38340: LD_VAR 0 1
38344: PPUSH
38345: LD_VAR 0 1
38349: PUSH
38350: LD_INT 1
38352: PLUS
38353: PPUSH
38354: LD_VAR 0 2
38358: PPUSH
38359: CALL_OW 1
38363: ST_TO_ADDR
// end ;
38364: LD_VAR 0 3
38368: RET
// export function JoinUnion ( array , element ) ; begin
38369: LD_INT 0
38371: PPUSH
// result := array union element ;
38372: LD_ADDR_VAR 0 3
38376: PUSH
38377: LD_VAR 0 1
38381: PUSH
38382: LD_VAR 0 2
38386: UNION
38387: ST_TO_ADDR
// end ;
38388: LD_VAR 0 3
38392: RET
// export function GetBehemoths ( side ) ; begin
38393: LD_INT 0
38395: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38396: LD_ADDR_VAR 0 2
38400: PUSH
38401: LD_INT 22
38403: PUSH
38404: LD_VAR 0 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 31
38415: PUSH
38416: LD_INT 25
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PPUSH
38427: CALL_OW 69
38431: ST_TO_ADDR
// end ;
38432: LD_VAR 0 2
38436: RET
// export function Shuffle ( array ) ; var i , index ; begin
38437: LD_INT 0
38439: PPUSH
38440: PPUSH
38441: PPUSH
// result := [ ] ;
38442: LD_ADDR_VAR 0 2
38446: PUSH
38447: EMPTY
38448: ST_TO_ADDR
// if not array then
38449: LD_VAR 0 1
38453: NOT
38454: IFFALSE 38458
// exit ;
38456: GO 38557
// Randomize ;
38458: CALL_OW 10
// for i = array downto 1 do
38462: LD_ADDR_VAR 0 3
38466: PUSH
38467: DOUBLE
38468: LD_VAR 0 1
38472: INC
38473: ST_TO_ADDR
38474: LD_INT 1
38476: PUSH
38477: FOR_DOWNTO
38478: IFFALSE 38555
// begin index := rand ( 1 , array ) ;
38480: LD_ADDR_VAR 0 4
38484: PUSH
38485: LD_INT 1
38487: PPUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 12
38497: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38498: LD_ADDR_VAR 0 2
38502: PUSH
38503: LD_VAR 0 2
38507: PPUSH
38508: LD_VAR 0 2
38512: PUSH
38513: LD_INT 1
38515: PLUS
38516: PPUSH
38517: LD_VAR 0 1
38521: PUSH
38522: LD_VAR 0 4
38526: ARRAY
38527: PPUSH
38528: CALL_OW 2
38532: ST_TO_ADDR
// array := Delete ( array , index ) ;
38533: LD_ADDR_VAR 0 1
38537: PUSH
38538: LD_VAR 0 1
38542: PPUSH
38543: LD_VAR 0 4
38547: PPUSH
38548: CALL_OW 3
38552: ST_TO_ADDR
// end ;
38553: GO 38477
38555: POP
38556: POP
// end ;
38557: LD_VAR 0 2
38561: RET
// export function GetBaseMaterials ( base ) ; begin
38562: LD_INT 0
38564: PPUSH
// result := [ 0 , 0 , 0 ] ;
38565: LD_ADDR_VAR 0 2
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: ST_TO_ADDR
// if not base then
38584: LD_VAR 0 1
38588: NOT
38589: IFFALSE 38593
// exit ;
38591: GO 38642
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38593: LD_ADDR_VAR 0 2
38597: PUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: LD_INT 1
38605: PPUSH
38606: CALL_OW 275
38610: PUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: LD_INT 2
38618: PPUSH
38619: CALL_OW 275
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: LD_INT 3
38631: PPUSH
38632: CALL_OW 275
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: ST_TO_ADDR
// end ;
38642: LD_VAR 0 2
38646: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38647: LD_INT 0
38649: PPUSH
38650: PPUSH
// result := array ;
38651: LD_ADDR_VAR 0 3
38655: PUSH
38656: LD_VAR 0 1
38660: ST_TO_ADDR
// if size >= result then
38661: LD_VAR 0 2
38665: PUSH
38666: LD_VAR 0 3
38670: GREATEREQUAL
38671: IFFALSE 38675
// exit ;
38673: GO 38725
// if size then
38675: LD_VAR 0 2
38679: IFFALSE 38725
// for i := array downto size do
38681: LD_ADDR_VAR 0 4
38685: PUSH
38686: DOUBLE
38687: LD_VAR 0 1
38691: INC
38692: ST_TO_ADDR
38693: LD_VAR 0 2
38697: PUSH
38698: FOR_DOWNTO
38699: IFFALSE 38723
// result := Delete ( result , result ) ;
38701: LD_ADDR_VAR 0 3
38705: PUSH
38706: LD_VAR 0 3
38710: PPUSH
38711: LD_VAR 0 3
38715: PPUSH
38716: CALL_OW 3
38720: ST_TO_ADDR
38721: GO 38698
38723: POP
38724: POP
// end ;
38725: LD_VAR 0 3
38729: RET
// export function ComExit ( unit ) ; var tmp ; begin
38730: LD_INT 0
38732: PPUSH
38733: PPUSH
// if not IsInUnit ( unit ) then
38734: LD_VAR 0 1
38738: PPUSH
38739: CALL_OW 310
38743: NOT
38744: IFFALSE 38748
// exit ;
38746: GO 38808
// tmp := IsInUnit ( unit ) ;
38748: LD_ADDR_VAR 0 3
38752: PUSH
38753: LD_VAR 0 1
38757: PPUSH
38758: CALL_OW 310
38762: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38763: LD_VAR 0 3
38767: PPUSH
38768: CALL_OW 247
38772: PUSH
38773: LD_INT 2
38775: EQUAL
38776: IFFALSE 38789
// ComExitVehicle ( unit ) else
38778: LD_VAR 0 1
38782: PPUSH
38783: CALL_OW 121
38787: GO 38798
// ComExitBuilding ( unit ) ;
38789: LD_VAR 0 1
38793: PPUSH
38794: CALL_OW 122
// result := tmp ;
38798: LD_ADDR_VAR 0 2
38802: PUSH
38803: LD_VAR 0 3
38807: ST_TO_ADDR
// end ;
38808: LD_VAR 0 2
38812: RET
// export function ComExitAll ( units ) ; var i ; begin
38813: LD_INT 0
38815: PPUSH
38816: PPUSH
// if not units then
38817: LD_VAR 0 1
38821: NOT
38822: IFFALSE 38826
// exit ;
38824: GO 38852
// for i in units do
38826: LD_ADDR_VAR 0 3
38830: PUSH
38831: LD_VAR 0 1
38835: PUSH
38836: FOR_IN
38837: IFFALSE 38850
// ComExit ( i ) ;
38839: LD_VAR 0 3
38843: PPUSH
38844: CALL 38730 0 1
38848: GO 38836
38850: POP
38851: POP
// end ;
38852: LD_VAR 0 2
38856: RET
// export function ResetHc ; begin
38857: LD_INT 0
38859: PPUSH
// InitHc ;
38860: CALL_OW 19
// hc_importance := 0 ;
38864: LD_ADDR_OWVAR 32
38868: PUSH
38869: LD_INT 0
38871: ST_TO_ADDR
// end ;
38872: LD_VAR 0 1
38876: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38877: LD_INT 0
38879: PPUSH
38880: PPUSH
38881: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38882: LD_ADDR_VAR 0 6
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_VAR 0 3
38896: PLUS
38897: PUSH
38898: LD_INT 2
38900: DIV
38901: ST_TO_ADDR
// if _x < 0 then
38902: LD_VAR 0 6
38906: PUSH
38907: LD_INT 0
38909: LESS
38910: IFFALSE 38927
// _x := _x * - 1 ;
38912: LD_ADDR_VAR 0 6
38916: PUSH
38917: LD_VAR 0 6
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: MUL
38926: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38927: LD_ADDR_VAR 0 7
38931: PUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_VAR 0 4
38941: PLUS
38942: PUSH
38943: LD_INT 2
38945: DIV
38946: ST_TO_ADDR
// if _y < 0 then
38947: LD_VAR 0 7
38951: PUSH
38952: LD_INT 0
38954: LESS
38955: IFFALSE 38972
// _y := _y * - 1 ;
38957: LD_ADDR_VAR 0 7
38961: PUSH
38962: LD_VAR 0 7
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: MUL
38971: ST_TO_ADDR
// result := [ _x , _y ] ;
38972: LD_ADDR_VAR 0 5
38976: PUSH
38977: LD_VAR 0 6
38981: PUSH
38982: LD_VAR 0 7
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// end ;
38991: LD_VAR 0 5
38995: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38996: LD_INT 0
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
// task := GetTaskList ( unit ) ;
39002: LD_ADDR_VAR 0 7
39006: PUSH
39007: LD_VAR 0 1
39011: PPUSH
39012: CALL_OW 437
39016: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39017: LD_VAR 0 7
39021: NOT
39022: PUSH
39023: LD_VAR 0 1
39027: PPUSH
39028: LD_VAR 0 2
39032: PPUSH
39033: CALL_OW 308
39037: NOT
39038: AND
39039: IFFALSE 39043
// exit ;
39041: GO 39161
// if IsInArea ( unit , area ) then
39043: LD_VAR 0 1
39047: PPUSH
39048: LD_VAR 0 2
39052: PPUSH
39053: CALL_OW 308
39057: IFFALSE 39075
// begin ComMoveToArea ( unit , goAway ) ;
39059: LD_VAR 0 1
39063: PPUSH
39064: LD_VAR 0 3
39068: PPUSH
39069: CALL_OW 113
// exit ;
39073: GO 39161
// end ; if task [ 1 ] [ 1 ] <> M then
39075: LD_VAR 0 7
39079: PUSH
39080: LD_INT 1
39082: ARRAY
39083: PUSH
39084: LD_INT 1
39086: ARRAY
39087: PUSH
39088: LD_STRING M
39090: NONEQUAL
39091: IFFALSE 39095
// exit ;
39093: GO 39161
// x := task [ 1 ] [ 2 ] ;
39095: LD_ADDR_VAR 0 5
39099: PUSH
39100: LD_VAR 0 7
39104: PUSH
39105: LD_INT 1
39107: ARRAY
39108: PUSH
39109: LD_INT 2
39111: ARRAY
39112: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39113: LD_ADDR_VAR 0 6
39117: PUSH
39118: LD_VAR 0 7
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PUSH
39127: LD_INT 3
39129: ARRAY
39130: ST_TO_ADDR
// if InArea ( x , y , area ) then
39131: LD_VAR 0 5
39135: PPUSH
39136: LD_VAR 0 6
39140: PPUSH
39141: LD_VAR 0 2
39145: PPUSH
39146: CALL_OW 309
39150: IFFALSE 39161
// ComStop ( unit ) ;
39152: LD_VAR 0 1
39156: PPUSH
39157: CALL_OW 141
// end ;
39161: LD_VAR 0 4
39165: RET
// export function Abs ( value ) ; begin
39166: LD_INT 0
39168: PPUSH
// result := value ;
39169: LD_ADDR_VAR 0 2
39173: PUSH
39174: LD_VAR 0 1
39178: ST_TO_ADDR
// if value < 0 then
39179: LD_VAR 0 1
39183: PUSH
39184: LD_INT 0
39186: LESS
39187: IFFALSE 39204
// result := value * - 1 ;
39189: LD_ADDR_VAR 0 2
39193: PUSH
39194: LD_VAR 0 1
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: MUL
39203: ST_TO_ADDR
// end ;
39204: LD_VAR 0 2
39208: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39209: LD_INT 0
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
// if not unit or not building then
39219: LD_VAR 0 1
39223: NOT
39224: PUSH
39225: LD_VAR 0 2
39229: NOT
39230: OR
39231: IFFALSE 39235
// exit ;
39233: GO 39461
// x := GetX ( building ) ;
39235: LD_ADDR_VAR 0 4
39239: PUSH
39240: LD_VAR 0 2
39244: PPUSH
39245: CALL_OW 250
39249: ST_TO_ADDR
// y := GetY ( building ) ;
39250: LD_ADDR_VAR 0 6
39254: PUSH
39255: LD_VAR 0 2
39259: PPUSH
39260: CALL_OW 251
39264: ST_TO_ADDR
// d := GetDir ( building ) ;
39265: LD_ADDR_VAR 0 8
39269: PUSH
39270: LD_VAR 0 2
39274: PPUSH
39275: CALL_OW 254
39279: ST_TO_ADDR
// r := 4 ;
39280: LD_ADDR_VAR 0 9
39284: PUSH
39285: LD_INT 4
39287: ST_TO_ADDR
// for i := 1 to 5 do
39288: LD_ADDR_VAR 0 10
39292: PUSH
39293: DOUBLE
39294: LD_INT 1
39296: DEC
39297: ST_TO_ADDR
39298: LD_INT 5
39300: PUSH
39301: FOR_TO
39302: IFFALSE 39459
// begin _x := ShiftX ( x , d , r + i ) ;
39304: LD_ADDR_VAR 0 5
39308: PUSH
39309: LD_VAR 0 4
39313: PPUSH
39314: LD_VAR 0 8
39318: PPUSH
39319: LD_VAR 0 9
39323: PUSH
39324: LD_VAR 0 10
39328: PLUS
39329: PPUSH
39330: CALL_OW 272
39334: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39335: LD_ADDR_VAR 0 7
39339: PUSH
39340: LD_VAR 0 6
39344: PPUSH
39345: LD_VAR 0 8
39349: PPUSH
39350: LD_VAR 0 9
39354: PUSH
39355: LD_VAR 0 10
39359: PLUS
39360: PPUSH
39361: CALL_OW 273
39365: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39366: LD_VAR 0 5
39370: PPUSH
39371: LD_VAR 0 7
39375: PPUSH
39376: CALL_OW 488
39380: PUSH
39381: LD_VAR 0 5
39385: PPUSH
39386: LD_VAR 0 7
39390: PPUSH
39391: CALL_OW 428
39395: PPUSH
39396: CALL_OW 247
39400: PUSH
39401: LD_INT 3
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: IN
39411: NOT
39412: AND
39413: IFFALSE 39457
// begin ComMoveXY ( unit , _x , _y ) ;
39415: LD_VAR 0 1
39419: PPUSH
39420: LD_VAR 0 5
39424: PPUSH
39425: LD_VAR 0 7
39429: PPUSH
39430: CALL_OW 111
// result := [ _x , _y ] ;
39434: LD_ADDR_VAR 0 3
39438: PUSH
39439: LD_VAR 0 5
39443: PUSH
39444: LD_VAR 0 7
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: ST_TO_ADDR
// exit ;
39453: POP
39454: POP
39455: GO 39461
// end ; end ;
39457: GO 39301
39459: POP
39460: POP
// end ;
39461: LD_VAR 0 3
39465: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39466: LD_INT 0
39468: PPUSH
39469: PPUSH
39470: PPUSH
// result := 0 ;
39471: LD_ADDR_VAR 0 3
39475: PUSH
39476: LD_INT 0
39478: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39479: LD_VAR 0 1
39483: PUSH
39484: LD_INT 0
39486: LESS
39487: PUSH
39488: LD_VAR 0 1
39492: PUSH
39493: LD_INT 8
39495: GREATER
39496: OR
39497: PUSH
39498: LD_VAR 0 2
39502: PUSH
39503: LD_INT 0
39505: LESS
39506: OR
39507: PUSH
39508: LD_VAR 0 2
39512: PUSH
39513: LD_INT 8
39515: GREATER
39516: OR
39517: IFFALSE 39521
// exit ;
39519: GO 39596
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39521: LD_ADDR_VAR 0 4
39525: PUSH
39526: LD_INT 22
39528: PUSH
39529: LD_VAR 0 2
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PPUSH
39538: CALL_OW 69
39542: PUSH
39543: FOR_IN
39544: IFFALSE 39594
// begin un := UnitShoot ( i ) ;
39546: LD_ADDR_VAR 0 5
39550: PUSH
39551: LD_VAR 0 4
39555: PPUSH
39556: CALL_OW 504
39560: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39561: LD_VAR 0 5
39565: PPUSH
39566: CALL_OW 255
39570: PUSH
39571: LD_VAR 0 1
39575: EQUAL
39576: IFFALSE 39592
// begin result := un ;
39578: LD_ADDR_VAR 0 3
39582: PUSH
39583: LD_VAR 0 5
39587: ST_TO_ADDR
// exit ;
39588: POP
39589: POP
39590: GO 39596
// end ; end ;
39592: GO 39543
39594: POP
39595: POP
// end ;
39596: LD_VAR 0 3
39600: RET
// export function GetCargoBay ( units ) ; begin
39601: LD_INT 0
39603: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39604: LD_ADDR_VAR 0 2
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: LD_INT 2
39616: PUSH
39617: LD_INT 34
39619: PUSH
39620: LD_INT 12
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 34
39629: PUSH
39630: LD_INT 51
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 34
39639: PUSH
39640: LD_INT 32
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 34
39649: PUSH
39650: LD_INT 89
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: PPUSH
39664: CALL_OW 72
39668: ST_TO_ADDR
// end ;
39669: LD_VAR 0 2
39673: RET
// export function Negate ( value ) ; begin
39674: LD_INT 0
39676: PPUSH
// result := not value ;
39677: LD_ADDR_VAR 0 2
39681: PUSH
39682: LD_VAR 0 1
39686: NOT
39687: ST_TO_ADDR
// end ;
39688: LD_VAR 0 2
39692: RET
// export function Inc ( value ) ; begin
39693: LD_INT 0
39695: PPUSH
// result := value + 1 ;
39696: LD_ADDR_VAR 0 2
39700: PUSH
39701: LD_VAR 0 1
39705: PUSH
39706: LD_INT 1
39708: PLUS
39709: ST_TO_ADDR
// end ;
39710: LD_VAR 0 2
39714: RET
// export function Dec ( value ) ; begin
39715: LD_INT 0
39717: PPUSH
// result := value - 1 ;
39718: LD_ADDR_VAR 0 2
39722: PUSH
39723: LD_VAR 0 1
39727: PUSH
39728: LD_INT 1
39730: MINUS
39731: ST_TO_ADDR
// end ;
39732: LD_VAR 0 2
39736: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39737: LD_INT 0
39739: PPUSH
39740: PPUSH
39741: PPUSH
39742: PPUSH
39743: PPUSH
39744: PPUSH
39745: PPUSH
39746: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39747: LD_VAR 0 1
39751: PPUSH
39752: LD_VAR 0 2
39756: PPUSH
39757: CALL_OW 488
39761: NOT
39762: PUSH
39763: LD_VAR 0 3
39767: PPUSH
39768: LD_VAR 0 4
39772: PPUSH
39773: CALL_OW 488
39777: NOT
39778: OR
39779: IFFALSE 39792
// begin result := - 1 ;
39781: LD_ADDR_VAR 0 5
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: ST_TO_ADDR
// exit ;
39790: GO 40027
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39792: LD_ADDR_VAR 0 12
39796: PUSH
39797: LD_VAR 0 1
39801: PPUSH
39802: LD_VAR 0 2
39806: PPUSH
39807: LD_VAR 0 3
39811: PPUSH
39812: LD_VAR 0 4
39816: PPUSH
39817: CALL 38877 0 4
39821: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39822: LD_ADDR_VAR 0 11
39826: PUSH
39827: LD_VAR 0 1
39831: PPUSH
39832: LD_VAR 0 2
39836: PPUSH
39837: LD_VAR 0 12
39841: PUSH
39842: LD_INT 1
39844: ARRAY
39845: PPUSH
39846: LD_VAR 0 12
39850: PUSH
39851: LD_INT 2
39853: ARRAY
39854: PPUSH
39855: CALL_OW 298
39859: ST_TO_ADDR
// distance := 9999 ;
39860: LD_ADDR_VAR 0 10
39864: PUSH
39865: LD_INT 9999
39867: ST_TO_ADDR
// for i := 0 to 5 do
39868: LD_ADDR_VAR 0 6
39872: PUSH
39873: DOUBLE
39874: LD_INT 0
39876: DEC
39877: ST_TO_ADDR
39878: LD_INT 5
39880: PUSH
39881: FOR_TO
39882: IFFALSE 40025
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39884: LD_ADDR_VAR 0 7
39888: PUSH
39889: LD_VAR 0 1
39893: PPUSH
39894: LD_VAR 0 6
39898: PPUSH
39899: LD_VAR 0 11
39903: PPUSH
39904: CALL_OW 272
39908: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39909: LD_ADDR_VAR 0 8
39913: PUSH
39914: LD_VAR 0 2
39918: PPUSH
39919: LD_VAR 0 6
39923: PPUSH
39924: LD_VAR 0 11
39928: PPUSH
39929: CALL_OW 273
39933: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39934: LD_VAR 0 7
39938: PPUSH
39939: LD_VAR 0 8
39943: PPUSH
39944: CALL_OW 488
39948: NOT
39949: IFFALSE 39953
// continue ;
39951: GO 39881
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39953: LD_ADDR_VAR 0 9
39957: PUSH
39958: LD_VAR 0 12
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PPUSH
39967: LD_VAR 0 12
39971: PUSH
39972: LD_INT 2
39974: ARRAY
39975: PPUSH
39976: LD_VAR 0 7
39980: PPUSH
39981: LD_VAR 0 8
39985: PPUSH
39986: CALL_OW 298
39990: ST_TO_ADDR
// if tmp < distance then
39991: LD_VAR 0 9
39995: PUSH
39996: LD_VAR 0 10
40000: LESS
40001: IFFALSE 40023
// begin result := i ;
40003: LD_ADDR_VAR 0 5
40007: PUSH
40008: LD_VAR 0 6
40012: ST_TO_ADDR
// distance := tmp ;
40013: LD_ADDR_VAR 0 10
40017: PUSH
40018: LD_VAR 0 9
40022: ST_TO_ADDR
// end ; end ;
40023: GO 39881
40025: POP
40026: POP
// end ;
40027: LD_VAR 0 5
40031: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40032: LD_INT 0
40034: PPUSH
40035: PPUSH
// if not driver or not IsInUnit ( driver ) then
40036: LD_VAR 0 1
40040: NOT
40041: PUSH
40042: LD_VAR 0 1
40046: PPUSH
40047: CALL_OW 310
40051: NOT
40052: OR
40053: IFFALSE 40057
// exit ;
40055: GO 40147
// vehicle := IsInUnit ( driver ) ;
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 310
40071: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40072: LD_VAR 0 1
40076: PPUSH
40077: LD_STRING \
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: PUSH
40107: LD_STRING E
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_VAR 0 3
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PPUSH
40143: CALL_OW 446
// end ;
40147: LD_VAR 0 2
40151: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40152: LD_INT 0
40154: PPUSH
40155: PPUSH
// if not driver or not IsInUnit ( driver ) then
40156: LD_VAR 0 1
40160: NOT
40161: PUSH
40162: LD_VAR 0 1
40166: PPUSH
40167: CALL_OW 310
40171: NOT
40172: OR
40173: IFFALSE 40177
// exit ;
40175: GO 40267
// vehicle := IsInUnit ( driver ) ;
40177: LD_ADDR_VAR 0 3
40181: PUSH
40182: LD_VAR 0 1
40186: PPUSH
40187: CALL_OW 310
40191: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40192: LD_VAR 0 1
40196: PPUSH
40197: LD_STRING \
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: PUSH
40227: LD_STRING E
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_VAR 0 3
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PPUSH
40263: CALL_OW 447
// end ;
40267: LD_VAR 0 2
40271: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40272: LD_INT 0
40274: PPUSH
40275: PPUSH
40276: PPUSH
// tmp := [ ] ;
40277: LD_ADDR_VAR 0 5
40281: PUSH
40282: EMPTY
40283: ST_TO_ADDR
// for i in units do
40284: LD_ADDR_VAR 0 4
40288: PUSH
40289: LD_VAR 0 1
40293: PUSH
40294: FOR_IN
40295: IFFALSE 40333
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40297: LD_ADDR_VAR 0 5
40301: PUSH
40302: LD_VAR 0 5
40306: PPUSH
40307: LD_VAR 0 5
40311: PUSH
40312: LD_INT 1
40314: PLUS
40315: PPUSH
40316: LD_VAR 0 4
40320: PPUSH
40321: CALL_OW 256
40325: PPUSH
40326: CALL_OW 2
40330: ST_TO_ADDR
40331: GO 40294
40333: POP
40334: POP
// if not tmp then
40335: LD_VAR 0 5
40339: NOT
40340: IFFALSE 40344
// exit ;
40342: GO 40392
// if asc then
40344: LD_VAR 0 2
40348: IFFALSE 40372
// result := SortListByListAsc ( units , tmp ) else
40350: LD_ADDR_VAR 0 3
40354: PUSH
40355: LD_VAR 0 1
40359: PPUSH
40360: LD_VAR 0 5
40364: PPUSH
40365: CALL_OW 76
40369: ST_TO_ADDR
40370: GO 40392
// result := SortListByListDesc ( units , tmp ) ;
40372: LD_ADDR_VAR 0 3
40376: PUSH
40377: LD_VAR 0 1
40381: PPUSH
40382: LD_VAR 0 5
40386: PPUSH
40387: CALL_OW 77
40391: ST_TO_ADDR
// end ;
40392: LD_VAR 0 3
40396: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40397: LD_INT 0
40399: PPUSH
40400: PPUSH
// task := GetTaskList ( mech ) ;
40401: LD_ADDR_VAR 0 4
40405: PUSH
40406: LD_VAR 0 1
40410: PPUSH
40411: CALL_OW 437
40415: ST_TO_ADDR
// if not task then
40416: LD_VAR 0 4
40420: NOT
40421: IFFALSE 40425
// exit ;
40423: GO 40467
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40425: LD_ADDR_VAR 0 3
40429: PUSH
40430: LD_VAR 0 4
40434: PUSH
40435: LD_INT 1
40437: ARRAY
40438: PUSH
40439: LD_INT 1
40441: ARRAY
40442: PUSH
40443: LD_STRING r
40445: EQUAL
40446: PUSH
40447: LD_VAR 0 4
40451: PUSH
40452: LD_INT 1
40454: ARRAY
40455: PUSH
40456: LD_INT 4
40458: ARRAY
40459: PUSH
40460: LD_VAR 0 2
40464: EQUAL
40465: AND
40466: ST_TO_ADDR
// end ;
40467: LD_VAR 0 3
40471: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40472: LD_INT 0
40474: PPUSH
// SetDir ( unit , d ) ;
40475: LD_VAR 0 1
40479: PPUSH
40480: LD_VAR 0 4
40484: PPUSH
40485: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40489: LD_ADDR_VAR 0 6
40493: PUSH
40494: LD_VAR 0 1
40498: PPUSH
40499: LD_VAR 0 2
40503: PPUSH
40504: LD_VAR 0 3
40508: PPUSH
40509: LD_VAR 0 5
40513: PPUSH
40514: CALL_OW 48
40518: ST_TO_ADDR
// end ;
40519: LD_VAR 0 6
40523: RET
// export function ToNaturalNumber ( number ) ; begin
40524: LD_INT 0
40526: PPUSH
// result := number div 1 ;
40527: LD_ADDR_VAR 0 2
40531: PUSH
40532: LD_VAR 0 1
40536: PUSH
40537: LD_INT 1
40539: DIV
40540: ST_TO_ADDR
// if number < 0 then
40541: LD_VAR 0 1
40545: PUSH
40546: LD_INT 0
40548: LESS
40549: IFFALSE 40559
// result := 0 ;
40551: LD_ADDR_VAR 0 2
40555: PUSH
40556: LD_INT 0
40558: ST_TO_ADDR
// end ;
40559: LD_VAR 0 2
40563: RET
// export function SortByClass ( units , class ) ; var un ; begin
40564: LD_INT 0
40566: PPUSH
40567: PPUSH
// if not units or not class then
40568: LD_VAR 0 1
40572: NOT
40573: PUSH
40574: LD_VAR 0 2
40578: NOT
40579: OR
40580: IFFALSE 40584
// exit ;
40582: GO 40679
// result := [ ] ;
40584: LD_ADDR_VAR 0 3
40588: PUSH
40589: EMPTY
40590: ST_TO_ADDR
// for un in units do
40591: LD_ADDR_VAR 0 4
40595: PUSH
40596: LD_VAR 0 1
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40677
// if GetClass ( un ) = class then
40604: LD_VAR 0 4
40608: PPUSH
40609: CALL_OW 257
40613: PUSH
40614: LD_VAR 0 2
40618: EQUAL
40619: IFFALSE 40646
// result := Insert ( result , 1 , un ) else
40621: LD_ADDR_VAR 0 3
40625: PUSH
40626: LD_VAR 0 3
40630: PPUSH
40631: LD_INT 1
40633: PPUSH
40634: LD_VAR 0 4
40638: PPUSH
40639: CALL_OW 2
40643: ST_TO_ADDR
40644: GO 40675
// result := Replace ( result , result + 1 , un ) ;
40646: LD_ADDR_VAR 0 3
40650: PUSH
40651: LD_VAR 0 3
40655: PPUSH
40656: LD_VAR 0 3
40660: PUSH
40661: LD_INT 1
40663: PLUS
40664: PPUSH
40665: LD_VAR 0 4
40669: PPUSH
40670: CALL_OW 1
40674: ST_TO_ADDR
40675: GO 40601
40677: POP
40678: POP
// end ;
40679: LD_VAR 0 3
40683: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40684: LD_INT 0
40686: PPUSH
40687: PPUSH
40688: PPUSH
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
// result := [ ] ;
40693: LD_ADDR_VAR 0 4
40697: PUSH
40698: EMPTY
40699: ST_TO_ADDR
// if x - r < 0 then
40700: LD_VAR 0 1
40704: PUSH
40705: LD_VAR 0 3
40709: MINUS
40710: PUSH
40711: LD_INT 0
40713: LESS
40714: IFFALSE 40726
// min_x := 0 else
40716: LD_ADDR_VAR 0 8
40720: PUSH
40721: LD_INT 0
40723: ST_TO_ADDR
40724: GO 40742
// min_x := x - r ;
40726: LD_ADDR_VAR 0 8
40730: PUSH
40731: LD_VAR 0 1
40735: PUSH
40736: LD_VAR 0 3
40740: MINUS
40741: ST_TO_ADDR
// if y - r < 0 then
40742: LD_VAR 0 2
40746: PUSH
40747: LD_VAR 0 3
40751: MINUS
40752: PUSH
40753: LD_INT 0
40755: LESS
40756: IFFALSE 40768
// min_y := 0 else
40758: LD_ADDR_VAR 0 7
40762: PUSH
40763: LD_INT 0
40765: ST_TO_ADDR
40766: GO 40784
// min_y := y - r ;
40768: LD_ADDR_VAR 0 7
40772: PUSH
40773: LD_VAR 0 2
40777: PUSH
40778: LD_VAR 0 3
40782: MINUS
40783: ST_TO_ADDR
// max_x := x + r ;
40784: LD_ADDR_VAR 0 9
40788: PUSH
40789: LD_VAR 0 1
40793: PUSH
40794: LD_VAR 0 3
40798: PLUS
40799: ST_TO_ADDR
// max_y := y + r ;
40800: LD_ADDR_VAR 0 10
40804: PUSH
40805: LD_VAR 0 2
40809: PUSH
40810: LD_VAR 0 3
40814: PLUS
40815: ST_TO_ADDR
// for _x = min_x to max_x do
40816: LD_ADDR_VAR 0 5
40820: PUSH
40821: DOUBLE
40822: LD_VAR 0 8
40826: DEC
40827: ST_TO_ADDR
40828: LD_VAR 0 9
40832: PUSH
40833: FOR_TO
40834: IFFALSE 40935
// for _y = min_y to max_y do
40836: LD_ADDR_VAR 0 6
40840: PUSH
40841: DOUBLE
40842: LD_VAR 0 7
40846: DEC
40847: ST_TO_ADDR
40848: LD_VAR 0 10
40852: PUSH
40853: FOR_TO
40854: IFFALSE 40931
// begin if not ValidHex ( _x , _y ) then
40856: LD_VAR 0 5
40860: PPUSH
40861: LD_VAR 0 6
40865: PPUSH
40866: CALL_OW 488
40870: NOT
40871: IFFALSE 40875
// continue ;
40873: GO 40853
// if GetResourceTypeXY ( _x , _y ) then
40875: LD_VAR 0 5
40879: PPUSH
40880: LD_VAR 0 6
40884: PPUSH
40885: CALL_OW 283
40889: IFFALSE 40929
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40891: LD_ADDR_VAR 0 4
40895: PUSH
40896: LD_VAR 0 4
40900: PPUSH
40901: LD_VAR 0 4
40905: PUSH
40906: LD_INT 1
40908: PLUS
40909: PPUSH
40910: LD_VAR 0 5
40914: PUSH
40915: LD_VAR 0 6
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PPUSH
40924: CALL_OW 1
40928: ST_TO_ADDR
// end ;
40929: GO 40853
40931: POP
40932: POP
40933: GO 40833
40935: POP
40936: POP
// end ;
40937: LD_VAR 0 4
40941: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40942: LD_INT 0
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
40951: PPUSH
// if not units then
40952: LD_VAR 0 1
40956: NOT
40957: IFFALSE 40961
// exit ;
40959: GO 41489
// result := UnitFilter ( units , [ f_ok ] ) ;
40961: LD_ADDR_VAR 0 3
40965: PUSH
40966: LD_VAR 0 1
40970: PPUSH
40971: LD_INT 50
40973: PUSH
40974: EMPTY
40975: LIST
40976: PPUSH
40977: CALL_OW 72
40981: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40982: LD_ADDR_VAR 0 8
40986: PUSH
40987: LD_VAR 0 1
40991: PUSH
40992: LD_INT 1
40994: ARRAY
40995: PPUSH
40996: CALL_OW 255
41000: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41001: LD_ADDR_VAR 0 10
41005: PUSH
41006: LD_INT 29
41008: PUSH
41009: LD_INT 91
41011: PUSH
41012: LD_INT 49
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: ST_TO_ADDR
// if not result then
41020: LD_VAR 0 3
41024: NOT
41025: IFFALSE 41029
// exit ;
41027: GO 41489
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41029: LD_ADDR_VAR 0 5
41033: PUSH
41034: LD_INT 81
41036: PUSH
41037: LD_VAR 0 8
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PPUSH
41046: CALL_OW 69
41050: ST_TO_ADDR
// for i in result do
41051: LD_ADDR_VAR 0 4
41055: PUSH
41056: LD_VAR 0 3
41060: PUSH
41061: FOR_IN
41062: IFFALSE 41487
// begin tag := GetTag ( i ) + 1 ;
41064: LD_ADDR_VAR 0 9
41068: PUSH
41069: LD_VAR 0 4
41073: PPUSH
41074: CALL_OW 110
41078: PUSH
41079: LD_INT 1
41081: PLUS
41082: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41083: LD_ADDR_VAR 0 7
41087: PUSH
41088: LD_VAR 0 4
41092: PPUSH
41093: CALL_OW 250
41097: PPUSH
41098: LD_VAR 0 4
41102: PPUSH
41103: CALL_OW 251
41107: PPUSH
41108: LD_INT 4
41110: PPUSH
41111: CALL 40684 0 3
41115: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41116: LD_VAR 0 4
41120: PPUSH
41121: CALL_OW 247
41125: PUSH
41126: LD_INT 2
41128: EQUAL
41129: PUSH
41130: LD_VAR 0 7
41134: PUSH
41135: LD_INT 2
41137: GREATER
41138: AND
41139: PUSH
41140: LD_VAR 0 4
41144: PPUSH
41145: CALL_OW 264
41149: PUSH
41150: LD_VAR 0 10
41154: IN
41155: NOT
41156: AND
41157: IFFALSE 41196
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41159: LD_VAR 0 4
41163: PPUSH
41164: LD_VAR 0 7
41168: PUSH
41169: LD_INT 1
41171: ARRAY
41172: PUSH
41173: LD_INT 1
41175: ARRAY
41176: PPUSH
41177: LD_VAR 0 7
41181: PUSH
41182: LD_INT 1
41184: ARRAY
41185: PUSH
41186: LD_INT 2
41188: ARRAY
41189: PPUSH
41190: CALL_OW 116
41194: GO 41485
// if path > tag then
41196: LD_VAR 0 2
41200: PUSH
41201: LD_VAR 0 9
41205: GREATER
41206: IFFALSE 41414
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41208: LD_ADDR_VAR 0 6
41212: PUSH
41213: LD_VAR 0 5
41217: PPUSH
41218: LD_INT 91
41220: PUSH
41221: LD_VAR 0 4
41225: PUSH
41226: LD_INT 8
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: PPUSH
41234: CALL_OW 72
41238: ST_TO_ADDR
// if nearEnemy then
41239: LD_VAR 0 6
41243: IFFALSE 41312
// begin if GetWeapon ( i ) = ru_time_lapser then
41245: LD_VAR 0 4
41249: PPUSH
41250: CALL_OW 264
41254: PUSH
41255: LD_INT 49
41257: EQUAL
41258: IFFALSE 41286
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41260: LD_VAR 0 4
41264: PPUSH
41265: LD_VAR 0 6
41269: PPUSH
41270: LD_VAR 0 4
41274: PPUSH
41275: CALL_OW 74
41279: PPUSH
41280: CALL_OW 112
41284: GO 41310
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41286: LD_VAR 0 4
41290: PPUSH
41291: LD_VAR 0 6
41295: PPUSH
41296: LD_VAR 0 4
41300: PPUSH
41301: CALL_OW 74
41305: PPUSH
41306: CALL 42560 0 2
// end else
41310: GO 41412
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41312: LD_VAR 0 4
41316: PPUSH
41317: LD_VAR 0 2
41321: PUSH
41322: LD_VAR 0 9
41326: ARRAY
41327: PUSH
41328: LD_INT 1
41330: ARRAY
41331: PPUSH
41332: LD_VAR 0 2
41336: PUSH
41337: LD_VAR 0 9
41341: ARRAY
41342: PUSH
41343: LD_INT 2
41345: ARRAY
41346: PPUSH
41347: CALL_OW 297
41351: PUSH
41352: LD_INT 6
41354: GREATER
41355: IFFALSE 41398
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41357: LD_VAR 0 4
41361: PPUSH
41362: LD_VAR 0 2
41366: PUSH
41367: LD_VAR 0 9
41371: ARRAY
41372: PUSH
41373: LD_INT 1
41375: ARRAY
41376: PPUSH
41377: LD_VAR 0 2
41381: PUSH
41382: LD_VAR 0 9
41386: ARRAY
41387: PUSH
41388: LD_INT 2
41390: ARRAY
41391: PPUSH
41392: CALL_OW 114
41396: GO 41412
// SetTag ( i , tag ) ;
41398: LD_VAR 0 4
41402: PPUSH
41403: LD_VAR 0 9
41407: PPUSH
41408: CALL_OW 109
// end else
41412: GO 41485
// if enemy then
41414: LD_VAR 0 5
41418: IFFALSE 41485
// begin if GetWeapon ( i ) = ru_time_lapser then
41420: LD_VAR 0 4
41424: PPUSH
41425: CALL_OW 264
41429: PUSH
41430: LD_INT 49
41432: EQUAL
41433: IFFALSE 41461
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41435: LD_VAR 0 4
41439: PPUSH
41440: LD_VAR 0 5
41444: PPUSH
41445: LD_VAR 0 4
41449: PPUSH
41450: CALL_OW 74
41454: PPUSH
41455: CALL_OW 112
41459: GO 41485
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41461: LD_VAR 0 4
41465: PPUSH
41466: LD_VAR 0 5
41470: PPUSH
41471: LD_VAR 0 4
41475: PPUSH
41476: CALL_OW 74
41480: PPUSH
41481: CALL 42560 0 2
// end ; end ;
41485: GO 41061
41487: POP
41488: POP
// end ;
41489: LD_VAR 0 3
41493: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41494: LD_INT 0
41496: PPUSH
41497: PPUSH
41498: PPUSH
// if not unit or IsInUnit ( unit ) then
41499: LD_VAR 0 1
41503: NOT
41504: PUSH
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL_OW 310
41514: OR
41515: IFFALSE 41519
// exit ;
41517: GO 41610
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41519: LD_ADDR_VAR 0 4
41523: PUSH
41524: LD_VAR 0 1
41528: PPUSH
41529: CALL_OW 250
41533: PPUSH
41534: LD_VAR 0 2
41538: PPUSH
41539: LD_INT 1
41541: PPUSH
41542: CALL_OW 272
41546: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41547: LD_ADDR_VAR 0 5
41551: PUSH
41552: LD_VAR 0 1
41556: PPUSH
41557: CALL_OW 251
41561: PPUSH
41562: LD_VAR 0 2
41566: PPUSH
41567: LD_INT 1
41569: PPUSH
41570: CALL_OW 273
41574: ST_TO_ADDR
// if ValidHex ( x , y ) then
41575: LD_VAR 0 4
41579: PPUSH
41580: LD_VAR 0 5
41584: PPUSH
41585: CALL_OW 488
41589: IFFALSE 41610
// ComTurnXY ( unit , x , y ) ;
41591: LD_VAR 0 1
41595: PPUSH
41596: LD_VAR 0 4
41600: PPUSH
41601: LD_VAR 0 5
41605: PPUSH
41606: CALL_OW 118
// end ;
41610: LD_VAR 0 3
41614: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41615: LD_INT 0
41617: PPUSH
41618: PPUSH
// result := false ;
41619: LD_ADDR_VAR 0 3
41623: PUSH
41624: LD_INT 0
41626: ST_TO_ADDR
// if not units then
41627: LD_VAR 0 2
41631: NOT
41632: IFFALSE 41636
// exit ;
41634: GO 41681
// for i in units do
41636: LD_ADDR_VAR 0 4
41640: PUSH
41641: LD_VAR 0 2
41645: PUSH
41646: FOR_IN
41647: IFFALSE 41679
// if See ( side , i ) then
41649: LD_VAR 0 1
41653: PPUSH
41654: LD_VAR 0 4
41658: PPUSH
41659: CALL_OW 292
41663: IFFALSE 41677
// begin result := true ;
41665: LD_ADDR_VAR 0 3
41669: PUSH
41670: LD_INT 1
41672: ST_TO_ADDR
// exit ;
41673: POP
41674: POP
41675: GO 41681
// end ;
41677: GO 41646
41679: POP
41680: POP
// end ;
41681: LD_VAR 0 3
41685: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41686: LD_INT 0
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
// if not unit or not points then
41692: LD_VAR 0 1
41696: NOT
41697: PUSH
41698: LD_VAR 0 2
41702: NOT
41703: OR
41704: IFFALSE 41708
// exit ;
41706: GO 41798
// dist := 99999 ;
41708: LD_ADDR_VAR 0 5
41712: PUSH
41713: LD_INT 99999
41715: ST_TO_ADDR
// for i in points do
41716: LD_ADDR_VAR 0 4
41720: PUSH
41721: LD_VAR 0 2
41725: PUSH
41726: FOR_IN
41727: IFFALSE 41796
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41729: LD_ADDR_VAR 0 6
41733: PUSH
41734: LD_VAR 0 1
41738: PPUSH
41739: LD_VAR 0 4
41743: PUSH
41744: LD_INT 1
41746: ARRAY
41747: PPUSH
41748: LD_VAR 0 4
41752: PUSH
41753: LD_INT 2
41755: ARRAY
41756: PPUSH
41757: CALL_OW 297
41761: ST_TO_ADDR
// if tmpDist < dist then
41762: LD_VAR 0 6
41766: PUSH
41767: LD_VAR 0 5
41771: LESS
41772: IFFALSE 41794
// begin result := i ;
41774: LD_ADDR_VAR 0 3
41778: PUSH
41779: LD_VAR 0 4
41783: ST_TO_ADDR
// dist := tmpDist ;
41784: LD_ADDR_VAR 0 5
41788: PUSH
41789: LD_VAR 0 6
41793: ST_TO_ADDR
// end ; end ;
41794: GO 41726
41796: POP
41797: POP
// end ;
41798: LD_VAR 0 3
41802: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41803: LD_INT 0
41805: PPUSH
// uc_side := side ;
41806: LD_ADDR_OWVAR 20
41810: PUSH
41811: LD_VAR 0 1
41815: ST_TO_ADDR
// uc_nation := 3 ;
41816: LD_ADDR_OWVAR 21
41820: PUSH
41821: LD_INT 3
41823: ST_TO_ADDR
// vc_chassis := 25 ;
41824: LD_ADDR_OWVAR 37
41828: PUSH
41829: LD_INT 25
41831: ST_TO_ADDR
// vc_engine := engine_siberite ;
41832: LD_ADDR_OWVAR 39
41836: PUSH
41837: LD_INT 3
41839: ST_TO_ADDR
// vc_control := control_computer ;
41840: LD_ADDR_OWVAR 38
41844: PUSH
41845: LD_INT 3
41847: ST_TO_ADDR
// vc_weapon := 59 ;
41848: LD_ADDR_OWVAR 40
41852: PUSH
41853: LD_INT 59
41855: ST_TO_ADDR
// result := CreateVehicle ;
41856: LD_ADDR_VAR 0 5
41860: PUSH
41861: CALL_OW 45
41865: ST_TO_ADDR
// SetDir ( result , d ) ;
41866: LD_VAR 0 5
41870: PPUSH
41871: LD_VAR 0 4
41875: PPUSH
41876: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41880: LD_VAR 0 5
41884: PPUSH
41885: LD_VAR 0 2
41889: PPUSH
41890: LD_VAR 0 3
41894: PPUSH
41895: LD_INT 0
41897: PPUSH
41898: CALL_OW 48
// end ;
41902: LD_VAR 0 5
41906: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41907: LD_INT 0
41909: PPUSH
41910: PPUSH
41911: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41912: LD_ADDR_VAR 0 2
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41935: LD_VAR 0 1
41939: NOT
41940: PUSH
41941: LD_VAR 0 1
41945: PPUSH
41946: CALL_OW 264
41950: PUSH
41951: LD_INT 12
41953: PUSH
41954: LD_INT 51
41956: PUSH
41957: LD_INT 32
41959: PUSH
41960: LD_INT 89
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: IN
41969: NOT
41970: OR
41971: IFFALSE 41975
// exit ;
41973: GO 42073
// for i := 1 to 3 do
41975: LD_ADDR_VAR 0 3
41979: PUSH
41980: DOUBLE
41981: LD_INT 1
41983: DEC
41984: ST_TO_ADDR
41985: LD_INT 3
41987: PUSH
41988: FOR_TO
41989: IFFALSE 42071
// begin tmp := GetCargo ( cargo , i ) ;
41991: LD_ADDR_VAR 0 4
41995: PUSH
41996: LD_VAR 0 1
42000: PPUSH
42001: LD_VAR 0 3
42005: PPUSH
42006: CALL_OW 289
42010: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42011: LD_ADDR_VAR 0 2
42015: PUSH
42016: LD_VAR 0 2
42020: PPUSH
42021: LD_VAR 0 3
42025: PPUSH
42026: LD_VAR 0 4
42030: PPUSH
42031: CALL_OW 1
42035: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42036: LD_ADDR_VAR 0 2
42040: PUSH
42041: LD_VAR 0 2
42045: PPUSH
42046: LD_INT 4
42048: PPUSH
42049: LD_VAR 0 2
42053: PUSH
42054: LD_INT 4
42056: ARRAY
42057: PUSH
42058: LD_VAR 0 4
42062: PLUS
42063: PPUSH
42064: CALL_OW 1
42068: ST_TO_ADDR
// end ;
42069: GO 41988
42071: POP
42072: POP
// end ;
42073: LD_VAR 0 2
42077: RET
// export function Length ( array ) ; begin
42078: LD_INT 0
42080: PPUSH
// result := array + 0 ;
42081: LD_ADDR_VAR 0 2
42085: PUSH
42086: LD_VAR 0 1
42090: PUSH
42091: LD_INT 0
42093: PLUS
42094: ST_TO_ADDR
// end ;
42095: LD_VAR 0 2
42099: RET
// export function PrepareArray ( array ) ; begin
42100: LD_INT 0
42102: PPUSH
// result := array diff 0 ;
42103: LD_ADDR_VAR 0 2
42107: PUSH
42108: LD_VAR 0 1
42112: PUSH
42113: LD_INT 0
42115: DIFF
42116: ST_TO_ADDR
// if not result [ 1 ] then
42117: LD_VAR 0 2
42121: PUSH
42122: LD_INT 1
42124: ARRAY
42125: NOT
42126: IFFALSE 42146
// result := Delete ( result , 1 ) ;
42128: LD_ADDR_VAR 0 2
42132: PUSH
42133: LD_VAR 0 2
42137: PPUSH
42138: LD_INT 1
42140: PPUSH
42141: CALL_OW 3
42145: ST_TO_ADDR
// end ;
42146: LD_VAR 0 2
42150: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42151: LD_INT 0
42153: PPUSH
42154: PPUSH
42155: PPUSH
42156: PPUSH
// sibRocketRange := 25 ;
42157: LD_ADDR_VAR 0 6
42161: PUSH
42162: LD_INT 25
42164: ST_TO_ADDR
// result := false ;
42165: LD_ADDR_VAR 0 4
42169: PUSH
42170: LD_INT 0
42172: ST_TO_ADDR
// for i := 0 to 5 do
42173: LD_ADDR_VAR 0 5
42177: PUSH
42178: DOUBLE
42179: LD_INT 0
42181: DEC
42182: ST_TO_ADDR
42183: LD_INT 5
42185: PUSH
42186: FOR_TO
42187: IFFALSE 42254
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42189: LD_VAR 0 1
42193: PPUSH
42194: LD_VAR 0 5
42198: PPUSH
42199: LD_VAR 0 6
42203: PPUSH
42204: CALL_OW 272
42208: PPUSH
42209: LD_VAR 0 2
42213: PPUSH
42214: LD_VAR 0 5
42218: PPUSH
42219: LD_VAR 0 6
42223: PPUSH
42224: CALL_OW 273
42228: PPUSH
42229: LD_VAR 0 3
42233: PPUSH
42234: CALL_OW 309
42238: IFFALSE 42252
// begin result := true ;
42240: LD_ADDR_VAR 0 4
42244: PUSH
42245: LD_INT 1
42247: ST_TO_ADDR
// exit ;
42248: POP
42249: POP
42250: GO 42256
// end ;
42252: GO 42186
42254: POP
42255: POP
// end ;
42256: LD_VAR 0 4
42260: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42261: LD_INT 0
42263: PPUSH
42264: PPUSH
42265: PPUSH
// if btype = b_depot then
42266: LD_VAR 0 2
42270: PUSH
42271: LD_INT 0
42273: EQUAL
42274: IFFALSE 42286
// begin result := true ;
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_INT 1
42283: ST_TO_ADDR
// exit ;
42284: GO 42402
// end ; pom := GetBase ( depot ) ;
42286: LD_ADDR_VAR 0 4
42290: PUSH
42291: LD_VAR 0 1
42295: PPUSH
42296: CALL_OW 274
42300: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42301: LD_ADDR_VAR 0 5
42305: PUSH
42306: LD_VAR 0 2
42310: PPUSH
42311: LD_VAR 0 1
42315: PPUSH
42316: CALL_OW 248
42320: PPUSH
42321: CALL_OW 450
42325: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42326: LD_ADDR_VAR 0 3
42330: PUSH
42331: LD_VAR 0 4
42335: PPUSH
42336: LD_INT 1
42338: PPUSH
42339: CALL_OW 275
42343: PUSH
42344: LD_VAR 0 5
42348: PUSH
42349: LD_INT 1
42351: ARRAY
42352: GREATEREQUAL
42353: PUSH
42354: LD_VAR 0 4
42358: PPUSH
42359: LD_INT 2
42361: PPUSH
42362: CALL_OW 275
42366: PUSH
42367: LD_VAR 0 5
42371: PUSH
42372: LD_INT 2
42374: ARRAY
42375: GREATEREQUAL
42376: AND
42377: PUSH
42378: LD_VAR 0 4
42382: PPUSH
42383: LD_INT 3
42385: PPUSH
42386: CALL_OW 275
42390: PUSH
42391: LD_VAR 0 5
42395: PUSH
42396: LD_INT 3
42398: ARRAY
42399: GREATEREQUAL
42400: AND
42401: ST_TO_ADDR
// end ;
42402: LD_VAR 0 3
42406: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42407: LD_INT 0
42409: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42410: LD_VAR 0 1
42414: PPUSH
42415: LD_VAR 0 2
42419: PPUSH
42420: LD_INT 0
42422: PPUSH
42423: LD_INT 0
42425: PPUSH
42426: LD_INT 1
42428: PPUSH
42429: LD_INT 0
42431: PPUSH
42432: CALL_OW 587
// end ;
42436: LD_VAR 0 3
42440: RET
// export function CenterOnNow ( unit ) ; begin
42441: LD_INT 0
42443: PPUSH
// result := IsInUnit ( unit ) ;
42444: LD_ADDR_VAR 0 2
42448: PUSH
42449: LD_VAR 0 1
42453: PPUSH
42454: CALL_OW 310
42458: ST_TO_ADDR
// if not result then
42459: LD_VAR 0 2
42463: NOT
42464: IFFALSE 42476
// result := unit ;
42466: LD_ADDR_VAR 0 2
42470: PUSH
42471: LD_VAR 0 1
42475: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42476: LD_VAR 0 1
42480: PPUSH
42481: CALL_OW 87
// end ;
42485: LD_VAR 0 2
42489: RET
// export function ComMoveHex ( unit , hex ) ; begin
42490: LD_INT 0
42492: PPUSH
// if not hex then
42493: LD_VAR 0 2
42497: NOT
42498: IFFALSE 42502
// exit ;
42500: GO 42555
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42502: LD_VAR 0 2
42506: PUSH
42507: LD_INT 1
42509: ARRAY
42510: PPUSH
42511: LD_VAR 0 2
42515: PUSH
42516: LD_INT 2
42518: ARRAY
42519: PPUSH
42520: CALL_OW 428
42524: IFFALSE 42528
// exit ;
42526: GO 42555
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42528: LD_VAR 0 1
42532: PPUSH
42533: LD_VAR 0 2
42537: PUSH
42538: LD_INT 1
42540: ARRAY
42541: PPUSH
42542: LD_VAR 0 2
42546: PUSH
42547: LD_INT 2
42549: ARRAY
42550: PPUSH
42551: CALL_OW 111
// end ;
42555: LD_VAR 0 3
42559: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42560: LD_INT 0
42562: PPUSH
42563: PPUSH
42564: PPUSH
// if not unit or not enemy then
42565: LD_VAR 0 1
42569: NOT
42570: PUSH
42571: LD_VAR 0 2
42575: NOT
42576: OR
42577: IFFALSE 42581
// exit ;
42579: GO 42705
// x := GetX ( enemy ) ;
42581: LD_ADDR_VAR 0 4
42585: PUSH
42586: LD_VAR 0 2
42590: PPUSH
42591: CALL_OW 250
42595: ST_TO_ADDR
// y := GetY ( enemy ) ;
42596: LD_ADDR_VAR 0 5
42600: PUSH
42601: LD_VAR 0 2
42605: PPUSH
42606: CALL_OW 251
42610: ST_TO_ADDR
// if ValidHex ( x , y ) then
42611: LD_VAR 0 4
42615: PPUSH
42616: LD_VAR 0 5
42620: PPUSH
42621: CALL_OW 488
42625: IFFALSE 42705
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
42627: LD_VAR 0 2
42631: PPUSH
42632: CALL_OW 247
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: IN
42647: PUSH
42648: LD_VAR 0 1
42652: PPUSH
42653: CALL_OW 255
42657: PPUSH
42658: LD_VAR 0 2
42662: PPUSH
42663: CALL_OW 292
42667: OR
42668: IFFALSE 42686
// ComAttackUnit ( unit , enemy ) else
42670: LD_VAR 0 1
42674: PPUSH
42675: LD_VAR 0 2
42679: PPUSH
42680: CALL_OW 115
42684: GO 42705
// ComAgressiveMove ( unit , x , y ) ;
42686: LD_VAR 0 1
42690: PPUSH
42691: LD_VAR 0 4
42695: PPUSH
42696: LD_VAR 0 5
42700: PPUSH
42701: CALL_OW 114
// end ;
42705: LD_VAR 0 3
42709: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
42710: LD_INT 0
42712: PPUSH
42713: PPUSH
42714: PPUSH
// list := AreaToList ( area , 0 ) ;
42715: LD_ADDR_VAR 0 5
42719: PUSH
42720: LD_VAR 0 1
42724: PPUSH
42725: LD_INT 0
42727: PPUSH
42728: CALL_OW 517
42732: ST_TO_ADDR
// if not list then
42733: LD_VAR 0 5
42737: NOT
42738: IFFALSE 42742
// exit ;
42740: GO 42872
// if all then
42742: LD_VAR 0 2
42746: IFFALSE 42834
// begin for i := 1 to list [ 1 ] do
42748: LD_ADDR_VAR 0 4
42752: PUSH
42753: DOUBLE
42754: LD_INT 1
42756: DEC
42757: ST_TO_ADDR
42758: LD_VAR 0 5
42762: PUSH
42763: LD_INT 1
42765: ARRAY
42766: PUSH
42767: FOR_TO
42768: IFFALSE 42830
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_VAR 0 3
42779: PPUSH
42780: LD_VAR 0 3
42784: PUSH
42785: LD_INT 1
42787: PLUS
42788: PPUSH
42789: LD_VAR 0 5
42793: PUSH
42794: LD_INT 1
42796: ARRAY
42797: PUSH
42798: LD_VAR 0 4
42802: ARRAY
42803: PUSH
42804: LD_VAR 0 5
42808: PUSH
42809: LD_INT 2
42811: ARRAY
42812: PUSH
42813: LD_VAR 0 4
42817: ARRAY
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PPUSH
42823: CALL_OW 1
42827: ST_TO_ADDR
42828: GO 42767
42830: POP
42831: POP
// exit ;
42832: GO 42872
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
42834: LD_ADDR_VAR 0 3
42838: PUSH
42839: LD_VAR 0 5
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: PUSH
42848: LD_INT 1
42850: ARRAY
42851: PUSH
42852: LD_VAR 0 5
42856: PUSH
42857: LD_INT 2
42859: ARRAY
42860: PUSH
42861: LD_INT 1
42863: ARRAY
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: EMPTY
42870: LIST
42871: ST_TO_ADDR
// end ;
42872: LD_VAR 0 3
42876: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
42877: LD_INT 0
42879: PPUSH
42880: PPUSH
// list := AreaToList ( area , 0 ) ;
42881: LD_ADDR_VAR 0 4
42885: PUSH
42886: LD_VAR 0 1
42890: PPUSH
42891: LD_INT 0
42893: PPUSH
42894: CALL_OW 517
42898: ST_TO_ADDR
// if not list then
42899: LD_VAR 0 4
42903: NOT
42904: IFFALSE 42908
// exit ;
42906: GO 42949
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
42908: LD_ADDR_VAR 0 3
42912: PUSH
42913: LD_VAR 0 4
42917: PUSH
42918: LD_INT 1
42920: ARRAY
42921: PUSH
42922: LD_INT 1
42924: ARRAY
42925: PUSH
42926: LD_VAR 0 4
42930: PUSH
42931: LD_INT 2
42933: ARRAY
42934: PUSH
42935: LD_INT 1
42937: ARRAY
42938: PUSH
42939: LD_VAR 0 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// end ;
42949: LD_VAR 0 3
42953: RET
// export function First ( array ) ; begin
42954: LD_INT 0
42956: PPUSH
// if not array then
42957: LD_VAR 0 1
42961: NOT
42962: IFFALSE 42966
// exit ;
42964: GO 42980
// result := array [ 1 ] ;
42966: LD_ADDR_VAR 0 2
42970: PUSH
42971: LD_VAR 0 1
42975: PUSH
42976: LD_INT 1
42978: ARRAY
42979: ST_TO_ADDR
// end ;
42980: LD_VAR 0 2
42984: RET
// export function Last ( array ) ; begin
42985: LD_INT 0
42987: PPUSH
// if not array then
42988: LD_VAR 0 1
42992: NOT
42993: IFFALSE 42997
// exit ;
42995: GO 43013
// result := array [ array ] ;
42997: LD_ADDR_VAR 0 2
43001: PUSH
43002: LD_VAR 0 1
43006: PUSH
43007: LD_VAR 0 1
43011: ARRAY
43012: ST_TO_ADDR
// end ;
43013: LD_VAR 0 2
43017: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43018: LD_INT 0
43020: PPUSH
43021: PPUSH
// result := [ ] ;
43022: LD_ADDR_VAR 0 5
43026: PUSH
43027: EMPTY
43028: ST_TO_ADDR
// if not array then
43029: LD_VAR 0 1
43033: NOT
43034: IFFALSE 43038
// exit ;
43036: GO 43150
// for i := 1 to array do
43038: LD_ADDR_VAR 0 6
43042: PUSH
43043: DOUBLE
43044: LD_INT 1
43046: DEC
43047: ST_TO_ADDR
43048: LD_VAR 0 1
43052: PUSH
43053: FOR_TO
43054: IFFALSE 43148
// if array [ i ] [ index ] = value then
43056: LD_VAR 0 1
43060: PUSH
43061: LD_VAR 0 6
43065: ARRAY
43066: PUSH
43067: LD_VAR 0 2
43071: ARRAY
43072: PUSH
43073: LD_VAR 0 3
43077: EQUAL
43078: IFFALSE 43146
// begin if indexColumn then
43080: LD_VAR 0 4
43084: IFFALSE 43120
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43086: LD_ADDR_VAR 0 5
43090: PUSH
43091: LD_VAR 0 5
43095: PPUSH
43096: LD_VAR 0 1
43100: PUSH
43101: LD_VAR 0 6
43105: ARRAY
43106: PUSH
43107: LD_VAR 0 4
43111: ARRAY
43112: PPUSH
43113: CALL 38332 0 2
43117: ST_TO_ADDR
43118: GO 43146
// result := Join ( result , array [ i ] ) ;
43120: LD_ADDR_VAR 0 5
43124: PUSH
43125: LD_VAR 0 5
43129: PPUSH
43130: LD_VAR 0 1
43134: PUSH
43135: LD_VAR 0 6
43139: ARRAY
43140: PPUSH
43141: CALL 38332 0 2
43145: ST_TO_ADDR
// end ;
43146: GO 43053
43148: POP
43149: POP
// end ;
43150: LD_VAR 0 5
43154: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43155: LD_INT 0
43157: PPUSH
// if not vehicles or not parkingPoint then
43158: LD_VAR 0 1
43162: NOT
43163: PUSH
43164: LD_VAR 0 2
43168: NOT
43169: OR
43170: IFFALSE 43174
// exit ;
43172: GO 43272
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43174: LD_ADDR_VAR 0 1
43178: PUSH
43179: LD_VAR 0 1
43183: PPUSH
43184: LD_INT 50
43186: PUSH
43187: EMPTY
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: PUSH
43193: LD_INT 92
43195: PUSH
43196: LD_VAR 0 2
43200: PUSH
43201: LD_INT 1
43203: ARRAY
43204: PUSH
43205: LD_VAR 0 2
43209: PUSH
43210: LD_INT 2
43212: ARRAY
43213: PUSH
43214: LD_INT 8
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PPUSH
43231: CALL_OW 72
43235: ST_TO_ADDR
// if not vehicles then
43236: LD_VAR 0 1
43240: NOT
43241: IFFALSE 43245
// exit ;
43243: GO 43272
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43245: LD_VAR 0 1
43249: PPUSH
43250: LD_VAR 0 2
43254: PUSH
43255: LD_INT 1
43257: ARRAY
43258: PPUSH
43259: LD_VAR 0 2
43263: PUSH
43264: LD_INT 2
43266: ARRAY
43267: PPUSH
43268: CALL_OW 111
// end ;
43272: LD_VAR 0 3
43276: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43277: LD_INT 0
43279: PPUSH
43280: PPUSH
43281: PPUSH
// if not side or not area then
43282: LD_VAR 0 1
43286: NOT
43287: PUSH
43288: LD_VAR 0 2
43292: NOT
43293: OR
43294: IFFALSE 43298
// exit ;
43296: GO 43417
// tmp := AreaToList ( area , 0 ) ;
43298: LD_ADDR_VAR 0 5
43302: PUSH
43303: LD_VAR 0 2
43307: PPUSH
43308: LD_INT 0
43310: PPUSH
43311: CALL_OW 517
43315: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43316: LD_ADDR_VAR 0 4
43320: PUSH
43321: DOUBLE
43322: LD_INT 1
43324: DEC
43325: ST_TO_ADDR
43326: LD_VAR 0 5
43330: PUSH
43331: LD_INT 1
43333: ARRAY
43334: PUSH
43335: FOR_TO
43336: IFFALSE 43415
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43338: LD_VAR 0 5
43342: PUSH
43343: LD_INT 1
43345: ARRAY
43346: PUSH
43347: LD_VAR 0 4
43351: ARRAY
43352: PPUSH
43353: LD_VAR 0 5
43357: PUSH
43358: LD_INT 2
43360: ARRAY
43361: PUSH
43362: LD_VAR 0 4
43366: ARRAY
43367: PPUSH
43368: CALL_OW 351
43372: IFFALSE 43413
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43374: LD_VAR 0 5
43378: PUSH
43379: LD_INT 1
43381: ARRAY
43382: PUSH
43383: LD_VAR 0 4
43387: ARRAY
43388: PPUSH
43389: LD_VAR 0 5
43393: PUSH
43394: LD_INT 2
43396: ARRAY
43397: PUSH
43398: LD_VAR 0 4
43402: ARRAY
43403: PPUSH
43404: LD_VAR 0 1
43408: PPUSH
43409: CALL_OW 244
// end ;
43413: GO 43335
43415: POP
43416: POP
// end ;
43417: LD_VAR 0 3
43421: RET
