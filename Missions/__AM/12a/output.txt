// starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Action ;
  11: CALL 16 0 0
// end ; end_of_file
  15: END
// export function Action ; var John , Roth , veh ; begin
  16: LD_INT 0
  18: PPUSH
  19: PPUSH
  20: PPUSH
  21: PPUSH
// Video ( true ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL 37830 0 1
// PlaceSeeing ( 58 , 14 , 7 , - 26 ) ;
  29: LD_INT 58
  31: PPUSH
  32: LD_INT 14
  34: PPUSH
  35: LD_INT 7
  37: PPUSH
  38: LD_INT 26
  40: NEG
  41: PPUSH
  42: CALL_OW 330
// uc_side := 7 ;
  46: LD_ADDR_OWVAR 20
  50: PUSH
  51: LD_INT 7
  53: ST_TO_ADDR
// uc_nation := 1 ;
  54: LD_ADDR_OWVAR 21
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// John := NewCharacter ( JMM ) ;
  62: LD_ADDR_VAR 0 2
  66: PUSH
  67: LD_STRING JMM
  69: PPUSH
  70: CALL_OW 25
  74: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
  75: LD_ADDR_VAR 0 3
  79: PUSH
  80: LD_STRING Roth
  82: PPUSH
  83: CALL_OW 25
  87: ST_TO_ADDR
// SetDir ( John , 1 ) ;
  88: LD_VAR 0 2
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: CALL_OW 233
// SetDir ( Roth , 4 ) ;
 100: LD_VAR 0 3
 104: PPUSH
 105: LD_INT 4
 107: PPUSH
 108: CALL_OW 233
// PlaceUnitXY ( John , 55 , 14 , false ) ;
 112: LD_VAR 0 2
 116: PPUSH
 117: LD_INT 55
 119: PPUSH
 120: LD_INT 14
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: CALL_OW 48
// PlaceUnitXY ( Roth , 58 , 14 , false ) ;
 130: LD_VAR 0 3
 134: PPUSH
 135: LD_INT 58
 137: PPUSH
 138: LD_INT 14
 140: PPUSH
 141: LD_INT 0
 143: PPUSH
 144: CALL_OW 48
// ComTurnUnit ( John , Roth ) ;
 148: LD_VAR 0 2
 152: PPUSH
 153: LD_VAR 0 3
 157: PPUSH
 158: CALL_OW 119
// ComTurnUnit ( Roth , John ) ;
 162: LD_VAR 0 3
 166: PPUSH
 167: LD_VAR 0 2
 171: PPUSH
 172: CALL_OW 119
// CenterNowonUnits ( [ John , Roth ] ) ;
 176: LD_VAR 0 2
 180: PUSH
 181: LD_VAR 0 3
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PPUSH
 190: CALL_OW 87
// wait ( 0 0$0.5 ) ;
 194: LD_INT 18
 196: PPUSH
 197: CALL_OW 67
// Say ( Roth , DStart-Roth-1 ) ;
 201: LD_VAR 0 3
 205: PPUSH
 206: LD_STRING DStart-Roth-1
 208: PPUSH
 209: CALL_OW 88
// Say ( John , DStart-JMM-1 ) ;
 213: LD_VAR 0 2
 217: PPUSH
 218: LD_STRING DStart-JMM-1
 220: PPUSH
 221: CALL_OW 88
// Say ( Roth , DStart-Roth-2 ) ;
 225: LD_VAR 0 3
 229: PPUSH
 230: LD_STRING DStart-Roth-2
 232: PPUSH
 233: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 237: LD_INT 18
 239: PPUSH
 240: CALL_OW 67
// Say ( John , DStart-JMM-2 ) ;
 244: LD_VAR 0 2
 248: PPUSH
 249: LD_STRING DStart-JMM-2
 251: PPUSH
 252: CALL_OW 88
// Say ( Roth , DStart-Roth-3 ) ;
 256: LD_VAR 0 3
 260: PPUSH
 261: LD_STRING DStart-Roth-3
 263: PPUSH
 264: CALL_OW 88
// Say ( John , DStart-JMM-3 ) ;
 268: LD_VAR 0 2
 272: PPUSH
 273: LD_STRING DStart-JMM-3
 275: PPUSH
 276: CALL_OW 88
// uc_side := 1 ;
 280: LD_ADDR_OWVAR 20
 284: PUSH
 285: LD_INT 1
 287: ST_TO_ADDR
// uc_nation := 1 ;
 288: LD_ADDR_OWVAR 21
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 296: LD_ADDR_OWVAR 37
 300: PUSH
 301: LD_INT 2
 303: ST_TO_ADDR
// vc_engine := engine_siberite ;
 304: LD_ADDR_OWVAR 39
 308: PUSH
 309: LD_INT 3
 311: ST_TO_ADDR
// vc_control := control_manual ;
 312: LD_ADDR_OWVAR 38
 316: PUSH
 317: LD_INT 1
 319: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 320: LD_ADDR_OWVAR 40
 324: PUSH
 325: LD_INT 4
 327: ST_TO_ADDR
// veh := CreateVehicle ;
 328: LD_ADDR_VAR 0 4
 332: PUSH
 333: CALL_OW 45
 337: ST_TO_ADDR
// PlaceUnitXY ( veh , 43 , 41 , false ) ;
 338: LD_VAR 0 4
 342: PPUSH
 343: LD_INT 43
 345: PPUSH
 346: LD_INT 41
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 48
// PrepareMechanic ( false , 10 ) ;
 356: LD_INT 0
 358: PPUSH
 359: LD_INT 10
 361: PPUSH
 362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
 366: CALL_OW 44
 370: PPUSH
 371: LD_VAR 0 4
 375: PPUSH
 376: CALL_OW 52
// ComMoveXY ( veh , 24 , 2 ) ;
 380: LD_VAR 0 4
 384: PPUSH
 385: LD_INT 24
 387: PPUSH
 388: LD_INT 2
 390: PPUSH
 391: CALL_OW 111
// Say ( Roth , DStart-Roth-4 ) ;
 395: LD_VAR 0 3
 399: PPUSH
 400: LD_STRING DStart-Roth-4
 402: PPUSH
 403: CALL_OW 88
// Say ( John , DStart-JMM-4 ) ;
 407: LD_VAR 0 2
 411: PPUSH
 412: LD_STRING DStart-JMM-4
 414: PPUSH
 415: CALL_OW 88
// Say ( Roth , DStart-Roth-5 ) ;
 419: LD_VAR 0 3
 423: PPUSH
 424: LD_STRING DStart-Roth-5
 426: PPUSH
 427: CALL_OW 88
// Say ( John , DStart-JMM-5 ) ;
 431: LD_VAR 0 2
 435: PPUSH
 436: LD_STRING DStart-JMM-5
 438: PPUSH
 439: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 443: LD_INT 10
 445: PPUSH
 446: CALL_OW 67
// Say ( Roth , DStart-Roth-6 ) ;
 450: LD_VAR 0 3
 454: PPUSH
 455: LD_STRING DStart-Roth-6
 457: PPUSH
 458: CALL_OW 88
// wait ( 0 0$0.1 ) ;
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 67
// ComMoveXY ( John , 32 , 14 ) ;
 469: LD_VAR 0 2
 473: PPUSH
 474: LD_INT 32
 476: PPUSH
 477: LD_INT 14
 479: PPUSH
 480: CALL_OW 111
// wait ( 0 0$2 ) ;
 484: LD_INT 70
 486: PPUSH
 487: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
 491: LD_INT 1
 493: PPUSH
 494: LD_STRING %_cont
 496: PPUSH
 497: CALL_OW 340
// end ;
 501: LD_VAR 0 1
 505: RET
// every 0 0$1 trigger HexInfo ( 24 , 2 ) do
 506: LD_INT 24
 508: PPUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 428
 516: IFFALSE 536
 518: GO 520
 520: DISABLE
// RemoveUnit ( HexInfo ( 24 , 2 ) ) ; end_of_file
 521: LD_INT 24
 523: PPUSH
 524: LD_INT 2
 526: PPUSH
 527: CALL_OW 428
 531: PPUSH
 532: CALL_OW 64
 536: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// if exist_mode then
 541: LD_VAR 0 2
 545: IFFALSE 570
// unit := CreateCharacter ( prefix & ident ) else
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: LD_VAR 0 3
 556: PUSH
 557: LD_VAR 0 1
 561: STR
 562: PPUSH
 563: CALL_OW 34
 567: ST_TO_ADDR
 568: GO 585
// unit := NewCharacter ( ident ) ;
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 25
 584: ST_TO_ADDR
// result := unit ;
 585: LD_ADDR_VAR 0 4
 589: PUSH
 590: LD_VAR 0 5
 594: ST_TO_ADDR
// end ;
 595: LD_VAR 0 4
 599: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 600: LD_INT 0
 602: PPUSH
 603: PPUSH
// if not side or not nation then
 604: LD_VAR 0 1
 608: NOT
 609: PUSH
 610: LD_VAR 0 2
 614: NOT
 615: OR
 616: IFFALSE 620
// exit ;
 618: GO 1388
// case nation of nation_american :
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 847
 633: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 35
 641: PUSH
 642: LD_INT 45
 644: PUSH
 645: LD_INT 46
 647: PUSH
 648: LD_INT 47
 650: PUSH
 651: LD_INT 82
 653: PUSH
 654: LD_INT 83
 656: PUSH
 657: LD_INT 84
 659: PUSH
 660: LD_INT 85
 662: PUSH
 663: LD_INT 86
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: LD_INT 2
 671: PUSH
 672: LD_INT 6
 674: PUSH
 675: LD_INT 15
 677: PUSH
 678: LD_INT 16
 680: PUSH
 681: LD_INT 7
 683: PUSH
 684: LD_INT 12
 686: PUSH
 687: LD_INT 13
 689: PUSH
 690: LD_INT 10
 692: PUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 20
 698: PUSH
 699: LD_INT 21
 701: PUSH
 702: LD_INT 22
 704: PUSH
 705: LD_INT 25
 707: PUSH
 708: LD_INT 32
 710: PUSH
 711: LD_INT 27
 713: PUSH
 714: LD_INT 36
 716: PUSH
 717: LD_INT 69
 719: PUSH
 720: LD_INT 39
 722: PUSH
 723: LD_INT 34
 725: PUSH
 726: LD_INT 40
 728: PUSH
 729: LD_INT 48
 731: PUSH
 732: LD_INT 49
 734: PUSH
 735: LD_INT 50
 737: PUSH
 738: LD_INT 51
 740: PUSH
 741: LD_INT 52
 743: PUSH
 744: LD_INT 53
 746: PUSH
 747: LD_INT 54
 749: PUSH
 750: LD_INT 55
 752: PUSH
 753: LD_INT 56
 755: PUSH
 756: LD_INT 57
 758: PUSH
 759: LD_INT 58
 761: PUSH
 762: LD_INT 59
 764: PUSH
 765: LD_INT 60
 767: PUSH
 768: LD_INT 61
 770: PUSH
 771: LD_INT 62
 773: PUSH
 774: LD_INT 80
 776: PUSH
 777: LD_INT 82
 779: PUSH
 780: LD_INT 83
 782: PUSH
 783: LD_INT 84
 785: PUSH
 786: LD_INT 85
 788: PUSH
 789: LD_INT 86
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: ST_TO_ADDR
 845: GO 1312
 847: LD_INT 2
 849: DOUBLE
 850: EQUAL
 851: IFTRUE 855
 853: GO 1081
 855: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 856: LD_ADDR_VAR 0 4
 860: PUSH
 861: LD_INT 35
 863: PUSH
 864: LD_INT 45
 866: PUSH
 867: LD_INT 46
 869: PUSH
 870: LD_INT 47
 872: PUSH
 873: LD_INT 82
 875: PUSH
 876: LD_INT 83
 878: PUSH
 879: LD_INT 84
 881: PUSH
 882: LD_INT 85
 884: PUSH
 885: LD_INT 87
 887: PUSH
 888: LD_INT 70
 890: PUSH
 891: LD_INT 1
 893: PUSH
 894: LD_INT 11
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 6
 908: PUSH
 909: LD_INT 15
 911: PUSH
 912: LD_INT 18
 914: PUSH
 915: LD_INT 7
 917: PUSH
 918: LD_INT 17
 920: PUSH
 921: LD_INT 8
 923: PUSH
 924: LD_INT 20
 926: PUSH
 927: LD_INT 21
 929: PUSH
 930: LD_INT 22
 932: PUSH
 933: LD_INT 72
 935: PUSH
 936: LD_INT 26
 938: PUSH
 939: LD_INT 69
 941: PUSH
 942: LD_INT 39
 944: PUSH
 945: LD_INT 40
 947: PUSH
 948: LD_INT 41
 950: PUSH
 951: LD_INT 42
 953: PUSH
 954: LD_INT 43
 956: PUSH
 957: LD_INT 48
 959: PUSH
 960: LD_INT 49
 962: PUSH
 963: LD_INT 50
 965: PUSH
 966: LD_INT 51
 968: PUSH
 969: LD_INT 52
 971: PUSH
 972: LD_INT 53
 974: PUSH
 975: LD_INT 54
 977: PUSH
 978: LD_INT 55
 980: PUSH
 981: LD_INT 56
 983: PUSH
 984: LD_INT 60
 986: PUSH
 987: LD_INT 61
 989: PUSH
 990: LD_INT 62
 992: PUSH
 993: LD_INT 66
 995: PUSH
 996: LD_INT 67
 998: PUSH
 999: LD_INT 68
1001: PUSH
1002: LD_INT 81
1004: PUSH
1005: LD_INT 82
1007: PUSH
1008: LD_INT 83
1010: PUSH
1011: LD_INT 84
1013: PUSH
1014: LD_INT 85
1016: PUSH
1017: LD_INT 87
1019: PUSH
1020: LD_INT 88
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: ST_TO_ADDR
1079: GO 1312
1081: LD_INT 3
1083: DOUBLE
1084: EQUAL
1085: IFTRUE 1089
1087: GO 1311
1089: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: LD_INT 46
1097: PUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 2
1106: PUSH
1107: LD_INT 82
1109: PUSH
1110: LD_INT 83
1112: PUSH
1113: LD_INT 84
1115: PUSH
1116: LD_INT 85
1118: PUSH
1119: LD_INT 86
1121: PUSH
1122: LD_INT 11
1124: PUSH
1125: LD_INT 9
1127: PUSH
1128: LD_INT 20
1130: PUSH
1131: LD_INT 19
1133: PUSH
1134: LD_INT 21
1136: PUSH
1137: LD_INT 24
1139: PUSH
1140: LD_INT 22
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 28
1148: PUSH
1149: LD_INT 29
1151: PUSH
1152: LD_INT 30
1154: PUSH
1155: LD_INT 31
1157: PUSH
1158: LD_INT 37
1160: PUSH
1161: LD_INT 38
1163: PUSH
1164: LD_INT 32
1166: PUSH
1167: LD_INT 27
1169: PUSH
1170: LD_INT 33
1172: PUSH
1173: LD_INT 69
1175: PUSH
1176: LD_INT 39
1178: PUSH
1179: LD_INT 34
1181: PUSH
1182: LD_INT 40
1184: PUSH
1185: LD_INT 71
1187: PUSH
1188: LD_INT 23
1190: PUSH
1191: LD_INT 44
1193: PUSH
1194: LD_INT 48
1196: PUSH
1197: LD_INT 49
1199: PUSH
1200: LD_INT 50
1202: PUSH
1203: LD_INT 51
1205: PUSH
1206: LD_INT 52
1208: PUSH
1209: LD_INT 53
1211: PUSH
1212: LD_INT 54
1214: PUSH
1215: LD_INT 55
1217: PUSH
1218: LD_INT 56
1220: PUSH
1221: LD_INT 57
1223: PUSH
1224: LD_INT 58
1226: PUSH
1227: LD_INT 59
1229: PUSH
1230: LD_INT 63
1232: PUSH
1233: LD_INT 64
1235: PUSH
1236: LD_INT 65
1238: PUSH
1239: LD_INT 82
1241: PUSH
1242: LD_INT 83
1244: PUSH
1245: LD_INT 84
1247: PUSH
1248: LD_INT 85
1250: PUSH
1251: LD_INT 86
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: ST_TO_ADDR
1309: GO 1312
1311: POP
// if state > - 1 and state < 3 then
1312: LD_VAR 0 3
1316: PUSH
1317: LD_INT 1
1319: NEG
1320: GREATER
1321: PUSH
1322: LD_VAR 0 3
1326: PUSH
1327: LD_INT 3
1329: LESS
1330: AND
1331: IFFALSE 1388
// for i in result do
1333: LD_ADDR_VAR 0 5
1337: PUSH
1338: LD_VAR 0 4
1342: PUSH
1343: FOR_IN
1344: IFFALSE 1386
// if GetTech ( i , side ) <> state then
1346: LD_VAR 0 5
1350: PPUSH
1351: LD_VAR 0 1
1355: PPUSH
1356: CALL_OW 321
1360: PUSH
1361: LD_VAR 0 3
1365: NONEQUAL
1366: IFFALSE 1384
// result := result diff i ;
1368: LD_ADDR_VAR 0 4
1372: PUSH
1373: LD_VAR 0 4
1377: PUSH
1378: LD_VAR 0 5
1382: DIFF
1383: ST_TO_ADDR
1384: GO 1343
1386: POP
1387: POP
// end ;
1388: LD_VAR 0 4
1392: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// result := true ;
1398: LD_ADDR_VAR 0 3
1402: PUSH
1403: LD_INT 1
1405: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1406: LD_ADDR_VAR 0 5
1410: PUSH
1411: LD_VAR 0 2
1415: PPUSH
1416: CALL_OW 480
1420: ST_TO_ADDR
// if not tmp then
1421: LD_VAR 0 5
1425: NOT
1426: IFFALSE 1430
// exit ;
1428: GO 1479
// for i in tmp do
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1477
// if GetTech ( i , side ) <> state_researched then
1443: LD_VAR 0 4
1447: PPUSH
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 321
1457: PUSH
1458: LD_INT 2
1460: NONEQUAL
1461: IFFALSE 1475
// begin result := false ;
1463: LD_ADDR_VAR 0 3
1467: PUSH
1468: LD_INT 0
1470: ST_TO_ADDR
// exit ;
1471: POP
1472: POP
1473: GO 1479
// end ;
1475: GO 1440
1477: POP
1478: POP
// end ;
1479: LD_VAR 0 3
1483: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1484: LD_INT 0
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
1490: PPUSH
1491: PPUSH
1492: PPUSH
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
1497: PPUSH
1498: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1499: LD_VAR 0 1
1503: NOT
1504: PUSH
1505: LD_VAR 0 1
1509: PPUSH
1510: CALL_OW 257
1514: PUSH
1515: LD_INT 9
1517: NONEQUAL
1518: OR
1519: IFFALSE 1523
// exit ;
1521: GO 2096
// side := GetSide ( unit ) ;
1523: LD_ADDR_VAR 0 9
1527: PUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 255
1537: ST_TO_ADDR
// tech_space := tech_spacanom ;
1538: LD_ADDR_VAR 0 12
1542: PUSH
1543: LD_INT 29
1545: ST_TO_ADDR
// tech_time := tech_taurad ;
1546: LD_ADDR_VAR 0 13
1550: PUSH
1551: LD_INT 28
1553: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1554: LD_ADDR_VAR 0 11
1558: PUSH
1559: LD_VAR 0 1
1563: PPUSH
1564: CALL_OW 310
1568: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1569: LD_VAR 0 11
1573: PPUSH
1574: CALL_OW 247
1578: PUSH
1579: LD_INT 2
1581: EQUAL
1582: IFFALSE 1586
// exit ;
1584: GO 2096
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1586: LD_ADDR_VAR 0 8
1590: PUSH
1591: LD_INT 81
1593: PUSH
1594: LD_VAR 0 9
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 3
1605: PUSH
1606: LD_INT 21
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PPUSH
1624: CALL_OW 69
1628: ST_TO_ADDR
// if not tmp then
1629: LD_VAR 0 8
1633: NOT
1634: IFFALSE 1638
// exit ;
1636: GO 2096
// if in_unit then
1638: LD_VAR 0 11
1642: IFFALSE 1666
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1644: LD_ADDR_VAR 0 10
1648: PUSH
1649: LD_VAR 0 8
1653: PPUSH
1654: LD_VAR 0 11
1658: PPUSH
1659: CALL_OW 74
1663: ST_TO_ADDR
1664: GO 1686
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1666: LD_ADDR_VAR 0 10
1670: PUSH
1671: LD_VAR 0 8
1675: PPUSH
1676: LD_VAR 0 1
1680: PPUSH
1681: CALL_OW 74
1685: ST_TO_ADDR
// if not enemy then
1686: LD_VAR 0 10
1690: NOT
1691: IFFALSE 1695
// exit ;
1693: GO 2096
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1695: LD_VAR 0 11
1699: PUSH
1700: LD_VAR 0 11
1704: PPUSH
1705: LD_VAR 0 10
1709: PPUSH
1710: CALL_OW 296
1714: PUSH
1715: LD_INT 13
1717: GREATER
1718: AND
1719: PUSH
1720: LD_VAR 0 1
1724: PPUSH
1725: LD_VAR 0 10
1729: PPUSH
1730: CALL_OW 296
1734: PUSH
1735: LD_INT 12
1737: GREATER
1738: OR
1739: IFFALSE 1743
// exit ;
1741: GO 2096
// missile := [ 1 ] ;
1743: LD_ADDR_VAR 0 14
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: EMPTY
1752: LIST
1753: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1754: LD_VAR 0 9
1758: PPUSH
1759: LD_VAR 0 12
1763: PPUSH
1764: CALL_OW 325
1768: IFFALSE 1797
// missile := Replace ( missile , missile + 1 , 2 ) ;
1770: LD_ADDR_VAR 0 14
1774: PUSH
1775: LD_VAR 0 14
1779: PPUSH
1780: LD_VAR 0 14
1784: PUSH
1785: LD_INT 1
1787: PLUS
1788: PPUSH
1789: LD_INT 2
1791: PPUSH
1792: CALL_OW 1
1796: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1797: LD_VAR 0 9
1801: PPUSH
1802: LD_VAR 0 13
1806: PPUSH
1807: CALL_OW 325
1811: PUSH
1812: LD_VAR 0 10
1816: PPUSH
1817: CALL_OW 255
1821: PPUSH
1822: LD_VAR 0 13
1826: PPUSH
1827: CALL_OW 325
1831: NOT
1832: AND
1833: IFFALSE 1862
// missile := Replace ( missile , missile + 1 , 3 ) ;
1835: LD_ADDR_VAR 0 14
1839: PUSH
1840: LD_VAR 0 14
1844: PPUSH
1845: LD_VAR 0 14
1849: PUSH
1850: LD_INT 1
1852: PLUS
1853: PPUSH
1854: LD_INT 3
1856: PPUSH
1857: CALL_OW 1
1861: ST_TO_ADDR
// if missile < 2 then
1862: LD_VAR 0 14
1866: PUSH
1867: LD_INT 2
1869: LESS
1870: IFFALSE 1874
// exit ;
1872: GO 2096
// x := GetX ( enemy ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_VAR 0 10
1883: PPUSH
1884: CALL_OW 250
1888: ST_TO_ADDR
// y := GetY ( enemy ) ;
1889: LD_ADDR_VAR 0 5
1893: PUSH
1894: LD_VAR 0 10
1898: PPUSH
1899: CALL_OW 251
1903: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1904: LD_ADDR_VAR 0 6
1908: PUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: NEG
1917: PPUSH
1918: LD_INT 1
1920: PPUSH
1921: CALL_OW 12
1925: PLUS
1926: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1927: LD_ADDR_VAR 0 7
1931: PUSH
1932: LD_VAR 0 5
1936: PUSH
1937: LD_INT 1
1939: NEG
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 12
1948: PLUS
1949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1950: LD_VAR 0 6
1954: PPUSH
1955: LD_VAR 0 7
1959: PPUSH
1960: CALL_OW 488
1964: NOT
1965: IFFALSE 1987
// begin _x := x ;
1967: LD_ADDR_VAR 0 6
1971: PUSH
1972: LD_VAR 0 4
1976: ST_TO_ADDR
// _y := y ;
1977: LD_ADDR_VAR 0 7
1981: PUSH
1982: LD_VAR 0 5
1986: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_INT 1
1994: PPUSH
1995: LD_VAR 0 14
1999: PPUSH
2000: CALL_OW 12
2004: ST_TO_ADDR
// case i of 1 :
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 1
2012: DOUBLE
2013: EQUAL
2014: IFTRUE 2018
2016: GO 2035
2018: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2019: LD_VAR 0 1
2023: PPUSH
2024: LD_VAR 0 10
2028: PPUSH
2029: CALL_OW 115
2033: GO 2096
2035: LD_INT 2
2037: DOUBLE
2038: EQUAL
2039: IFTRUE 2043
2041: GO 2065
2043: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_VAR 0 6
2053: PPUSH
2054: LD_VAR 0 7
2058: PPUSH
2059: CALL_OW 153
2063: GO 2096
2065: LD_INT 3
2067: DOUBLE
2068: EQUAL
2069: IFTRUE 2073
2071: GO 2095
2073: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2074: LD_VAR 0 1
2078: PPUSH
2079: LD_VAR 0 6
2083: PPUSH
2084: LD_VAR 0 7
2088: PPUSH
2089: CALL_OW 154
2093: GO 2096
2095: POP
// end ;
2096: LD_VAR 0 2
2100: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
// if not unit or not building then
2109: LD_VAR 0 1
2113: NOT
2114: PUSH
2115: LD_VAR 0 2
2119: NOT
2120: OR
2121: IFFALSE 2125
// exit ;
2123: GO 2283
// x := GetX ( building ) ;
2125: LD_ADDR_VAR 0 5
2129: PUSH
2130: LD_VAR 0 2
2134: PPUSH
2135: CALL_OW 250
2139: ST_TO_ADDR
// y := GetY ( building ) ;
2140: LD_ADDR_VAR 0 6
2144: PUSH
2145: LD_VAR 0 2
2149: PPUSH
2150: CALL_OW 251
2154: ST_TO_ADDR
// for i = 0 to 5 do
2155: LD_ADDR_VAR 0 4
2159: PUSH
2160: DOUBLE
2161: LD_INT 0
2163: DEC
2164: ST_TO_ADDR
2165: LD_INT 5
2167: PUSH
2168: FOR_TO
2169: IFFALSE 2281
// begin _x := ShiftX ( x , i , 3 ) ;
2171: LD_ADDR_VAR 0 7
2175: PUSH
2176: LD_VAR 0 5
2180: PPUSH
2181: LD_VAR 0 4
2185: PPUSH
2186: LD_INT 3
2188: PPUSH
2189: CALL_OW 272
2193: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: LD_VAR 0 6
2203: PPUSH
2204: LD_VAR 0 4
2208: PPUSH
2209: LD_INT 3
2211: PPUSH
2212: CALL_OW 273
2216: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2217: LD_VAR 0 7
2221: PPUSH
2222: LD_VAR 0 8
2226: PPUSH
2227: CALL_OW 488
2231: NOT
2232: IFFALSE 2236
// continue ;
2234: GO 2168
// if HexInfo ( _x , _y ) = 0 then
2236: LD_VAR 0 7
2240: PPUSH
2241: LD_VAR 0 8
2245: PPUSH
2246: CALL_OW 428
2250: PUSH
2251: LD_INT 0
2253: EQUAL
2254: IFFALSE 2279
// begin ComMoveXY ( unit , _x , _y ) ;
2256: LD_VAR 0 1
2260: PPUSH
2261: LD_VAR 0 7
2265: PPUSH
2266: LD_VAR 0 8
2270: PPUSH
2271: CALL_OW 111
// exit ;
2275: POP
2276: POP
2277: GO 2283
// end ; end ;
2279: GO 2168
2281: POP
2282: POP
// end ;
2283: LD_VAR 0 3
2287: RET
// export function ScanBase ( side , base_area ) ; begin
2288: LD_INT 0
2290: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 2
2300: PPUSH
2301: LD_INT 81
2303: PUSH
2304: LD_VAR 0 1
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PPUSH
2313: CALL_OW 70
2317: ST_TO_ADDR
// end ;
2318: LD_VAR 0 3
2322: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2323: LD_INT 0
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
// result := false ;
2329: LD_ADDR_VAR 0 2
2333: PUSH
2334: LD_INT 0
2336: ST_TO_ADDR
// side := GetSide ( unit ) ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: LD_VAR 0 1
2346: PPUSH
2347: CALL_OW 255
2351: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2352: LD_ADDR_VAR 0 4
2356: PUSH
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 248
2366: ST_TO_ADDR
// case nat of 1 :
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: DOUBLE
2375: EQUAL
2376: IFTRUE 2380
2378: GO 2391
2380: POP
// tech := tech_lassight ; 2 :
2381: LD_ADDR_VAR 0 5
2385: PUSH
2386: LD_INT 12
2388: ST_TO_ADDR
2389: GO 2430
2391: LD_INT 2
2393: DOUBLE
2394: EQUAL
2395: IFTRUE 2399
2397: GO 2410
2399: POP
// tech := tech_mortar ; 3 :
2400: LD_ADDR_VAR 0 5
2404: PUSH
2405: LD_INT 41
2407: ST_TO_ADDR
2408: GO 2430
2410: LD_INT 3
2412: DOUBLE
2413: EQUAL
2414: IFTRUE 2418
2416: GO 2429
2418: POP
// tech := tech_bazooka ; end ;
2419: LD_ADDR_VAR 0 5
2423: PUSH
2424: LD_INT 44
2426: ST_TO_ADDR
2427: GO 2430
2429: POP
// if Researched ( side , tech ) then
2430: LD_VAR 0 3
2434: PPUSH
2435: LD_VAR 0 5
2439: PPUSH
2440: CALL_OW 325
2444: IFFALSE 2471
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: LD_INT 8
2456: PUSH
2457: LD_INT 9
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_VAR 0 4
2469: ARRAY
2470: ST_TO_ADDR
// end ;
2471: LD_VAR 0 2
2475: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
2480: PPUSH
// if not mines then
2481: LD_VAR 0 2
2485: NOT
2486: IFFALSE 2490
// exit ;
2488: GO 2634
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_INT 81
2497: PUSH
2498: LD_VAR 0 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 3
2509: PUSH
2510: LD_INT 21
2512: PUSH
2513: LD_INT 3
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PPUSH
2528: CALL_OW 69
2532: ST_TO_ADDR
// for i in mines do
2533: LD_ADDR_VAR 0 4
2537: PUSH
2538: LD_VAR 0 2
2542: PUSH
2543: FOR_IN
2544: IFFALSE 2632
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2546: LD_VAR 0 4
2550: PUSH
2551: LD_INT 1
2553: ARRAY
2554: PPUSH
2555: LD_VAR 0 4
2559: PUSH
2560: LD_INT 2
2562: ARRAY
2563: PPUSH
2564: CALL_OW 458
2568: NOT
2569: IFFALSE 2573
// continue ;
2571: GO 2543
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2573: LD_VAR 0 4
2577: PUSH
2578: LD_INT 1
2580: ARRAY
2581: PPUSH
2582: LD_VAR 0 4
2586: PUSH
2587: LD_INT 2
2589: ARRAY
2590: PPUSH
2591: CALL_OW 428
2595: PUSH
2596: LD_VAR 0 5
2600: IN
2601: IFFALSE 2630
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2603: LD_VAR 0 4
2607: PUSH
2608: LD_INT 1
2610: ARRAY
2611: PPUSH
2612: LD_VAR 0 4
2616: PUSH
2617: LD_INT 2
2619: ARRAY
2620: PPUSH
2621: LD_VAR 0 1
2625: PPUSH
2626: CALL_OW 456
// end ;
2630: GO 2543
2632: POP
2633: POP
// end ;
2634: LD_VAR 0 3
2638: RET
// export function Count ( array ) ; begin
2639: LD_INT 0
2641: PPUSH
// result := array + 0 ;
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: LD_VAR 0 1
2651: PUSH
2652: LD_INT 0
2654: PLUS
2655: ST_TO_ADDR
// end ;
2656: LD_VAR 0 2
2660: RET
// export function IsEmpty ( building ) ; begin
2661: LD_INT 0
2663: PPUSH
// if not building then
2664: LD_VAR 0 1
2668: NOT
2669: IFFALSE 2673
// exit ;
2671: GO 2716
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2673: LD_ADDR_VAR 0 2
2677: PUSH
2678: LD_VAR 0 1
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_VAR 0 1
2690: PPUSH
2691: CALL_OW 255
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 58
2702: PUSH
2703: EMPTY
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 69
2714: IN
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 2
2720: RET
// export function IsNotFull ( building ) ; var places ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
// if not building then
2725: LD_VAR 0 1
2729: NOT
2730: IFFALSE 2734
// exit ;
2732: GO 2762
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2734: LD_ADDR_VAR 0 2
2738: PUSH
2739: LD_VAR 0 1
2743: PPUSH
2744: LD_INT 3
2746: PUSH
2747: LD_INT 62
2749: PUSH
2750: EMPTY
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 72
2761: ST_TO_ADDR
// end ;
2762: LD_VAR 0 2
2766: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2767: LD_INT 0
2769: PPUSH
2770: PPUSH
2771: PPUSH
2772: PPUSH
// tmp := [ ] ;
2773: LD_ADDR_VAR 0 3
2777: PUSH
2778: EMPTY
2779: ST_TO_ADDR
// list := [ ] ;
2780: LD_ADDR_VAR 0 5
2784: PUSH
2785: EMPTY
2786: ST_TO_ADDR
// for i = 16 to 25 do
2787: LD_ADDR_VAR 0 4
2791: PUSH
2792: DOUBLE
2793: LD_INT 16
2795: DEC
2796: ST_TO_ADDR
2797: LD_INT 25
2799: PUSH
2800: FOR_TO
2801: IFFALSE 2874
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2803: LD_ADDR_VAR 0 3
2807: PUSH
2808: LD_VAR 0 3
2812: PUSH
2813: LD_INT 22
2815: PUSH
2816: LD_VAR 0 1
2820: PPUSH
2821: CALL_OW 255
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 91
2832: PUSH
2833: LD_VAR 0 1
2837: PUSH
2838: LD_INT 6
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 30
2848: PUSH
2849: LD_VAR 0 4
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: PUSH
2863: EMPTY
2864: LIST
2865: PPUSH
2866: CALL_OW 69
2870: ADD
2871: ST_TO_ADDR
2872: GO 2800
2874: POP
2875: POP
// for i = 1 to tmp do
2876: LD_ADDR_VAR 0 4
2880: PUSH
2881: DOUBLE
2882: LD_INT 1
2884: DEC
2885: ST_TO_ADDR
2886: LD_VAR 0 3
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2980
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2894: LD_ADDR_VAR 0 5
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: LD_VAR 0 3
2908: PUSH
2909: LD_VAR 0 4
2913: ARRAY
2914: PPUSH
2915: CALL_OW 266
2919: PUSH
2920: LD_VAR 0 3
2924: PUSH
2925: LD_VAR 0 4
2929: ARRAY
2930: PPUSH
2931: CALL_OW 250
2935: PUSH
2936: LD_VAR 0 3
2940: PUSH
2941: LD_VAR 0 4
2945: ARRAY
2946: PPUSH
2947: CALL_OW 251
2951: PUSH
2952: LD_VAR 0 3
2956: PUSH
2957: LD_VAR 0 4
2961: ARRAY
2962: PPUSH
2963: CALL_OW 254
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: ADD
2977: ST_TO_ADDR
2978: GO 2891
2980: POP
2981: POP
// result := list ;
2982: LD_ADDR_VAR 0 2
2986: PUSH
2987: LD_VAR 0 5
2991: ST_TO_ADDR
// end ;
2992: LD_VAR 0 2
2996: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2997: LD_INT 0
2999: PPUSH
3000: PPUSH
3001: PPUSH
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
// if not factory then
3006: LD_VAR 0 1
3010: NOT
3011: IFFALSE 3015
// exit ;
3013: GO 3608
// if control = control_apeman then
3015: LD_VAR 0 4
3019: PUSH
3020: LD_INT 5
3022: EQUAL
3023: IFFALSE 3132
// begin tmp := UnitsInside ( factory ) ;
3025: LD_ADDR_VAR 0 8
3029: PUSH
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 313
3039: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3040: LD_VAR 0 8
3044: PPUSH
3045: LD_INT 25
3047: PUSH
3048: LD_INT 12
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 72
3059: NOT
3060: IFFALSE 3070
// control := control_manual ;
3062: LD_ADDR_VAR 0 4
3066: PUSH
3067: LD_INT 1
3069: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3070: LD_ADDR_VAR 0 8
3074: PUSH
3075: LD_VAR 0 1
3079: PPUSH
3080: CALL 2767 0 1
3084: ST_TO_ADDR
// if tmp then
3085: LD_VAR 0 8
3089: IFFALSE 3132
// begin for i in tmp do
3091: LD_ADDR_VAR 0 7
3095: PUSH
3096: LD_VAR 0 8
3100: PUSH
3101: FOR_IN
3102: IFFALSE 3130
// if i [ 1 ] = b_ext_radio then
3104: LD_VAR 0 7
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: PUSH
3113: LD_INT 22
3115: EQUAL
3116: IFFALSE 3128
// begin control := control_remote ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 2
3125: ST_TO_ADDR
// break ;
3126: GO 3130
// end ;
3128: GO 3101
3130: POP
3131: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3132: LD_VAR 0 1
3136: PPUSH
3137: LD_VAR 0 2
3141: PPUSH
3142: LD_VAR 0 3
3146: PPUSH
3147: LD_VAR 0 4
3151: PPUSH
3152: LD_VAR 0 5
3156: PPUSH
3157: CALL_OW 448
3161: IFFALSE 3196
// begin result := [ chassis , engine , control , weapon ] ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 2
3172: PUSH
3173: LD_VAR 0 3
3177: PUSH
3178: LD_VAR 0 4
3182: PUSH
3183: LD_VAR 0 5
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: ST_TO_ADDR
// exit ;
3194: GO 3608
// end ; _chassis := AvailableChassisList ( factory ) ;
3196: LD_ADDR_VAR 0 9
3200: PUSH
3201: LD_VAR 0 1
3205: PPUSH
3206: CALL_OW 475
3210: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3211: LD_ADDR_VAR 0 11
3215: PUSH
3216: LD_VAR 0 1
3220: PPUSH
3221: CALL_OW 476
3225: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3226: LD_ADDR_VAR 0 12
3230: PUSH
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 477
3240: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3241: LD_ADDR_VAR 0 10
3245: PUSH
3246: LD_VAR 0 1
3250: PPUSH
3251: CALL_OW 478
3255: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3256: LD_VAR 0 9
3260: NOT
3261: PUSH
3262: LD_VAR 0 11
3266: NOT
3267: OR
3268: PUSH
3269: LD_VAR 0 12
3273: NOT
3274: OR
3275: PUSH
3276: LD_VAR 0 10
3280: NOT
3281: OR
3282: IFFALSE 3317
// begin result := [ chassis , engine , control , weapon ] ;
3284: LD_ADDR_VAR 0 6
3288: PUSH
3289: LD_VAR 0 2
3293: PUSH
3294: LD_VAR 0 3
3298: PUSH
3299: LD_VAR 0 4
3303: PUSH
3304: LD_VAR 0 5
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: ST_TO_ADDR
// exit ;
3315: GO 3608
// end ; if not chassis in _chassis then
3317: LD_VAR 0 2
3321: PUSH
3322: LD_VAR 0 9
3326: IN
3327: NOT
3328: IFFALSE 3354
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: LD_VAR 0 9
3339: PUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_VAR 0 9
3347: PPUSH
3348: CALL_OW 12
3352: ARRAY
3353: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3354: LD_VAR 0 2
3358: PPUSH
3359: LD_VAR 0 3
3363: PPUSH
3364: CALL 3613 0 2
3368: NOT
3369: IFFALSE 3428
// repeat engine := _engine [ 1 ] ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: LD_VAR 0 11
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3385: LD_ADDR_VAR 0 11
3389: PUSH
3390: LD_VAR 0 11
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 3
3402: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3403: LD_VAR 0 2
3407: PPUSH
3408: LD_VAR 0 3
3412: PPUSH
3413: CALL 3613 0 2
3417: PUSH
3418: LD_VAR 0 11
3422: PUSH
3423: EMPTY
3424: EQUAL
3425: OR
3426: IFFALSE 3371
// if not control in _control then
3428: LD_VAR 0 4
3432: PUSH
3433: LD_VAR 0 12
3437: IN
3438: NOT
3439: IFFALSE 3465
// control := _control [ rand ( 1 , _control ) ] ;
3441: LD_ADDR_VAR 0 4
3445: PUSH
3446: LD_VAR 0 12
3450: PUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_VAR 0 12
3458: PPUSH
3459: CALL_OW 12
3463: ARRAY
3464: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3465: LD_VAR 0 2
3469: PPUSH
3470: LD_VAR 0 5
3474: PPUSH
3475: CALL 3833 0 2
3479: NOT
3480: IFFALSE 3539
// repeat weapon := _weapon [ 1 ] ;
3482: LD_ADDR_VAR 0 5
3486: PUSH
3487: LD_VAR 0 10
3491: PUSH
3492: LD_INT 1
3494: ARRAY
3495: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3496: LD_ADDR_VAR 0 10
3500: PUSH
3501: LD_VAR 0 10
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 3
3513: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: CALL 3833 0 2
3528: PUSH
3529: LD_VAR 0 10
3533: PUSH
3534: EMPTY
3535: EQUAL
3536: OR
3537: IFFALSE 3482
// result := [ ] ;
3539: LD_ADDR_VAR 0 6
3543: PUSH
3544: EMPTY
3545: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_VAR 0 2
3555: PPUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: LD_VAR 0 4
3565: PPUSH
3566: LD_VAR 0 5
3570: PPUSH
3571: CALL_OW 448
3575: IFFALSE 3608
// result := [ chassis , engine , control , weapon ] ;
3577: LD_ADDR_VAR 0 6
3581: PUSH
3582: LD_VAR 0 2
3586: PUSH
3587: LD_VAR 0 3
3591: PUSH
3592: LD_VAR 0 4
3596: PUSH
3597: LD_VAR 0 5
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: ST_TO_ADDR
// end ;
3608: LD_VAR 0 6
3612: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3613: LD_INT 0
3615: PPUSH
// if not chassis or not engine then
3616: LD_VAR 0 1
3620: NOT
3621: PUSH
3622: LD_VAR 0 2
3626: NOT
3627: OR
3628: IFFALSE 3632
// exit ;
3630: GO 3828
// case engine of engine_solar :
3632: LD_VAR 0 2
3636: PUSH
3637: LD_INT 2
3639: DOUBLE
3640: EQUAL
3641: IFTRUE 3645
3643: GO 3683
3645: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3646: LD_ADDR_VAR 0 3
3650: PUSH
3651: LD_INT 11
3653: PUSH
3654: LD_INT 12
3656: PUSH
3657: LD_INT 13
3659: PUSH
3660: LD_INT 14
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: LD_INT 2
3668: PUSH
3669: LD_INT 3
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: ST_TO_ADDR
3681: GO 3812
3683: LD_INT 1
3685: DOUBLE
3686: EQUAL
3687: IFTRUE 3691
3689: GO 3753
3691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3692: LD_ADDR_VAR 0 3
3696: PUSH
3697: LD_INT 11
3699: PUSH
3700: LD_INT 12
3702: PUSH
3703: LD_INT 13
3705: PUSH
3706: LD_INT 14
3708: PUSH
3709: LD_INT 1
3711: PUSH
3712: LD_INT 2
3714: PUSH
3715: LD_INT 3
3717: PUSH
3718: LD_INT 4
3720: PUSH
3721: LD_INT 5
3723: PUSH
3724: LD_INT 21
3726: PUSH
3727: LD_INT 23
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 24
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: ST_TO_ADDR
3751: GO 3812
3753: LD_INT 3
3755: DOUBLE
3756: EQUAL
3757: IFTRUE 3761
3759: GO 3811
3761: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: LD_INT 13
3769: PUSH
3770: LD_INT 14
3772: PUSH
3773: LD_INT 2
3775: PUSH
3776: LD_INT 3
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: LD_INT 5
3784: PUSH
3785: LD_INT 21
3787: PUSH
3788: LD_INT 22
3790: PUSH
3791: LD_INT 23
3793: PUSH
3794: LD_INT 24
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: ST_TO_ADDR
3809: GO 3812
3811: POP
// result := ( chassis in result ) ;
3812: LD_ADDR_VAR 0 3
3816: PUSH
3817: LD_VAR 0 1
3821: PUSH
3822: LD_VAR 0 3
3826: IN
3827: ST_TO_ADDR
// end ;
3828: LD_VAR 0 3
3832: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3833: LD_INT 0
3835: PPUSH
// if not chassis or not weapon then
3836: LD_VAR 0 1
3840: NOT
3841: PUSH
3842: LD_VAR 0 2
3846: NOT
3847: OR
3848: IFFALSE 3852
// exit ;
3850: GO 4912
// case weapon of us_machine_gun :
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 2
3859: DOUBLE
3860: EQUAL
3861: IFTRUE 3865
3863: GO 3895
3865: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_INT 2
3876: PUSH
3877: LD_INT 3
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: ST_TO_ADDR
3893: GO 4896
3895: LD_INT 3
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 3933
3903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 3
3917: PUSH
3918: LD_INT 4
3920: PUSH
3921: LD_INT 5
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: ST_TO_ADDR
3931: GO 4896
3933: LD_INT 11
3935: DOUBLE
3936: EQUAL
3937: IFTRUE 3941
3939: GO 3971
3941: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3942: LD_ADDR_VAR 0 3
3946: PUSH
3947: LD_INT 1
3949: PUSH
3950: LD_INT 2
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: LD_INT 4
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: ST_TO_ADDR
3969: GO 4896
3971: LD_INT 4
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4005
3979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: LD_INT 2
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: LD_INT 4
3993: PUSH
3994: LD_INT 5
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: ST_TO_ADDR
4003: GO 4896
4005: LD_INT 5
4007: DOUBLE
4008: EQUAL
4009: IFTRUE 4013
4011: GO 4039
4013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4014: LD_ADDR_VAR 0 3
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: LD_INT 3
4024: PUSH
4025: LD_INT 4
4027: PUSH
4028: LD_INT 5
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: ST_TO_ADDR
4037: GO 4896
4039: LD_INT 9
4041: DOUBLE
4042: EQUAL
4043: IFTRUE 4047
4045: GO 4073
4047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4048: LD_ADDR_VAR 0 3
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: LD_INT 4
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: ST_TO_ADDR
4071: GO 4896
4073: LD_INT 7
4075: DOUBLE
4076: EQUAL
4077: IFTRUE 4081
4079: GO 4107
4081: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: LD_INT 2
4089: PUSH
4090: LD_INT 3
4092: PUSH
4093: LD_INT 4
4095: PUSH
4096: LD_INT 5
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: ST_TO_ADDR
4105: GO 4896
4107: LD_INT 12
4109: DOUBLE
4110: EQUAL
4111: IFTRUE 4115
4113: GO 4141
4115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4116: LD_ADDR_VAR 0 3
4120: PUSH
4121: LD_INT 2
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: LD_INT 5
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: ST_TO_ADDR
4139: GO 4896
4141: LD_INT 13
4143: DOUBLE
4144: EQUAL
4145: IFTRUE 4149
4147: GO 4175
4149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4150: LD_ADDR_VAR 0 3
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 4896
4175: LD_INT 14
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4201
4183: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: LD_INT 4
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
4199: GO 4896
4201: LD_INT 6
4203: DOUBLE
4204: EQUAL
4205: IFTRUE 4209
4207: GO 4227
4209: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4210: LD_ADDR_VAR 0 3
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: ST_TO_ADDR
4225: GO 4896
4227: LD_INT 10
4229: DOUBLE
4230: EQUAL
4231: IFTRUE 4235
4233: GO 4253
4235: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: ST_TO_ADDR
4251: GO 4896
4253: LD_INT 22
4255: DOUBLE
4256: EQUAL
4257: IFTRUE 4261
4259: GO 4287
4261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: LD_INT 11
4269: PUSH
4270: LD_INT 12
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 14
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: ST_TO_ADDR
4285: GO 4896
4287: LD_INT 23
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4321
4295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: LD_INT 11
4303: PUSH
4304: LD_INT 12
4306: PUSH
4307: LD_INT 13
4309: PUSH
4310: LD_INT 14
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: ST_TO_ADDR
4319: GO 4896
4321: LD_INT 24
4323: DOUBLE
4324: EQUAL
4325: IFTRUE 4329
4327: GO 4355
4329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: LD_INT 11
4337: PUSH
4338: LD_INT 12
4340: PUSH
4341: LD_INT 13
4343: PUSH
4344: LD_INT 14
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: ST_TO_ADDR
4353: GO 4896
4355: LD_INT 30
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4389
4363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: LD_INT 11
4371: PUSH
4372: LD_INT 12
4374: PUSH
4375: LD_INT 13
4377: PUSH
4378: LD_INT 14
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: ST_TO_ADDR
4387: GO 4896
4389: LD_INT 25
4391: DOUBLE
4392: EQUAL
4393: IFTRUE 4397
4395: GO 4415
4397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4398: LD_ADDR_VAR 0 3
4402: PUSH
4403: LD_INT 13
4405: PUSH
4406: LD_INT 14
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: ST_TO_ADDR
4413: GO 4896
4415: LD_INT 27
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4441
4423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 13
4431: PUSH
4432: LD_INT 14
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: ST_TO_ADDR
4439: GO 4896
4441: LD_INT 92
4443: DOUBLE
4444: EQUAL
4445: IFTRUE 4449
4447: GO 4475
4449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: LD_INT 11
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: LD_INT 13
4463: PUSH
4464: LD_INT 14
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: ST_TO_ADDR
4473: GO 4896
4475: LD_INT 28
4477: DOUBLE
4478: EQUAL
4479: IFTRUE 4483
4481: GO 4501
4483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 13
4491: PUSH
4492: LD_INT 14
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: ST_TO_ADDR
4499: GO 4896
4501: LD_INT 29
4503: DOUBLE
4504: EQUAL
4505: IFTRUE 4509
4507: GO 4527
4509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4510: LD_ADDR_VAR 0 3
4514: PUSH
4515: LD_INT 13
4517: PUSH
4518: LD_INT 14
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: ST_TO_ADDR
4525: GO 4896
4527: LD_INT 31
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4553
4535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 13
4543: PUSH
4544: LD_INT 14
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: ST_TO_ADDR
4551: GO 4896
4553: LD_INT 26
4555: DOUBLE
4556: EQUAL
4557: IFTRUE 4561
4559: GO 4579
4561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_INT 13
4569: PUSH
4570: LD_INT 14
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: ST_TO_ADDR
4577: GO 4896
4579: LD_INT 42
4581: DOUBLE
4582: EQUAL
4583: IFTRUE 4587
4585: GO 4613
4587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_INT 21
4595: PUSH
4596: LD_INT 22
4598: PUSH
4599: LD_INT 23
4601: PUSH
4602: LD_INT 24
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: ST_TO_ADDR
4611: GO 4896
4613: LD_INT 43
4615: DOUBLE
4616: EQUAL
4617: IFTRUE 4621
4619: GO 4647
4621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_INT 21
4629: PUSH
4630: LD_INT 22
4632: PUSH
4633: LD_INT 23
4635: PUSH
4636: LD_INT 24
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
4645: GO 4896
4647: LD_INT 44
4649: DOUBLE
4650: EQUAL
4651: IFTRUE 4655
4653: GO 4681
4655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4656: LD_ADDR_VAR 0 3
4660: PUSH
4661: LD_INT 21
4663: PUSH
4664: LD_INT 22
4666: PUSH
4667: LD_INT 23
4669: PUSH
4670: LD_INT 24
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: ST_TO_ADDR
4679: GO 4896
4681: LD_INT 45
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4715
4689: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4690: LD_ADDR_VAR 0 3
4694: PUSH
4695: LD_INT 21
4697: PUSH
4698: LD_INT 22
4700: PUSH
4701: LD_INT 23
4703: PUSH
4704: LD_INT 24
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: ST_TO_ADDR
4713: GO 4896
4715: LD_INT 49
4717: DOUBLE
4718: EQUAL
4719: IFTRUE 4723
4721: GO 4749
4723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4724: LD_ADDR_VAR 0 3
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 22
4734: PUSH
4735: LD_INT 23
4737: PUSH
4738: LD_INT 24
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 4896
4749: LD_INT 51
4751: DOUBLE
4752: EQUAL
4753: IFTRUE 4757
4755: GO 4783
4757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 22
4768: PUSH
4769: LD_INT 23
4771: PUSH
4772: LD_INT 24
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 4896
4783: LD_INT 52
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4817
4791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 23
4805: PUSH
4806: LD_INT 24
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: ST_TO_ADDR
4815: GO 4896
4817: LD_INT 53
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4843
4825: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: LD_INT 23
4833: PUSH
4834: LD_INT 24
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: ST_TO_ADDR
4841: GO 4896
4843: LD_INT 46
4845: DOUBLE
4846: EQUAL
4847: IFTRUE 4851
4849: GO 4869
4851: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4852: LD_ADDR_VAR 0 3
4856: PUSH
4857: LD_INT 23
4859: PUSH
4860: LD_INT 24
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: ST_TO_ADDR
4867: GO 4896
4869: LD_INT 47
4871: DOUBLE
4872: EQUAL
4873: IFTRUE 4877
4875: GO 4895
4877: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4878: LD_ADDR_VAR 0 3
4882: PUSH
4883: LD_INT 23
4885: PUSH
4886: LD_INT 24
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: ST_TO_ADDR
4893: GO 4896
4895: POP
// result := ( chassis in result ) ;
4896: LD_ADDR_VAR 0 3
4900: PUSH
4901: LD_VAR 0 1
4905: PUSH
4906: LD_VAR 0 3
4910: IN
4911: ST_TO_ADDR
// end ;
4912: LD_VAR 0 3
4916: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4917: LD_INT 0
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
4923: PPUSH
4924: PPUSH
4925: PPUSH
// result := array ;
4926: LD_ADDR_VAR 0 5
4930: PUSH
4931: LD_VAR 0 1
4935: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4936: LD_VAR 0 1
4940: NOT
4941: PUSH
4942: LD_VAR 0 2
4946: NOT
4947: OR
4948: PUSH
4949: LD_VAR 0 3
4953: NOT
4954: OR
4955: PUSH
4956: LD_VAR 0 2
4960: PUSH
4961: LD_VAR 0 1
4965: GREATER
4966: OR
4967: PUSH
4968: LD_VAR 0 3
4972: PUSH
4973: LD_VAR 0 1
4977: GREATER
4978: OR
4979: IFFALSE 4983
// exit ;
4981: GO 5279
// if direction then
4983: LD_VAR 0 4
4987: IFFALSE 5051
// begin d := 1 ;
4989: LD_ADDR_VAR 0 9
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// if i_from > i_to then
4997: LD_VAR 0 2
5001: PUSH
5002: LD_VAR 0 3
5006: GREATER
5007: IFFALSE 5033
// length := ( array - i_from ) + i_to else
5009: LD_ADDR_VAR 0 11
5013: PUSH
5014: LD_VAR 0 1
5018: PUSH
5019: LD_VAR 0 2
5023: MINUS
5024: PUSH
5025: LD_VAR 0 3
5029: PLUS
5030: ST_TO_ADDR
5031: GO 5049
// length := i_to - i_from ;
5033: LD_ADDR_VAR 0 11
5037: PUSH
5038: LD_VAR 0 3
5042: PUSH
5043: LD_VAR 0 2
5047: MINUS
5048: ST_TO_ADDR
// end else
5049: GO 5112
// begin d := - 1 ;
5051: LD_ADDR_VAR 0 9
5055: PUSH
5056: LD_INT 1
5058: NEG
5059: ST_TO_ADDR
// if i_from > i_to then
5060: LD_VAR 0 2
5064: PUSH
5065: LD_VAR 0 3
5069: GREATER
5070: IFFALSE 5090
// length := i_from - i_to else
5072: LD_ADDR_VAR 0 11
5076: PUSH
5077: LD_VAR 0 2
5081: PUSH
5082: LD_VAR 0 3
5086: MINUS
5087: ST_TO_ADDR
5088: GO 5112
// length := ( array - i_to ) + i_from ;
5090: LD_ADDR_VAR 0 11
5094: PUSH
5095: LD_VAR 0 1
5099: PUSH
5100: LD_VAR 0 3
5104: MINUS
5105: PUSH
5106: LD_VAR 0 2
5110: PLUS
5111: ST_TO_ADDR
// end ; if not length then
5112: LD_VAR 0 11
5116: NOT
5117: IFFALSE 5121
// exit ;
5119: GO 5279
// tmp := array ;
5121: LD_ADDR_VAR 0 10
5125: PUSH
5126: LD_VAR 0 1
5130: ST_TO_ADDR
// for i = 1 to length do
5131: LD_ADDR_VAR 0 6
5135: PUSH
5136: DOUBLE
5137: LD_INT 1
5139: DEC
5140: ST_TO_ADDR
5141: LD_VAR 0 11
5145: PUSH
5146: FOR_TO
5147: IFFALSE 5267
// begin for j = 1 to array do
5149: LD_ADDR_VAR 0 7
5153: PUSH
5154: DOUBLE
5155: LD_INT 1
5157: DEC
5158: ST_TO_ADDR
5159: LD_VAR 0 1
5163: PUSH
5164: FOR_TO
5165: IFFALSE 5253
// begin k := j + d ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_VAR 0 7
5176: PUSH
5177: LD_VAR 0 9
5181: PLUS
5182: ST_TO_ADDR
// if k > array then
5183: LD_VAR 0 8
5187: PUSH
5188: LD_VAR 0 1
5192: GREATER
5193: IFFALSE 5203
// k := 1 ;
5195: LD_ADDR_VAR 0 8
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// if not k then
5203: LD_VAR 0 8
5207: NOT
5208: IFFALSE 5220
// k := array ;
5210: LD_ADDR_VAR 0 8
5214: PUSH
5215: LD_VAR 0 1
5219: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5220: LD_ADDR_VAR 0 10
5224: PUSH
5225: LD_VAR 0 10
5229: PPUSH
5230: LD_VAR 0 8
5234: PPUSH
5235: LD_VAR 0 1
5239: PUSH
5240: LD_VAR 0 7
5244: ARRAY
5245: PPUSH
5246: CALL_OW 1
5250: ST_TO_ADDR
// end ;
5251: GO 5164
5253: POP
5254: POP
// array := tmp ;
5255: LD_ADDR_VAR 0 1
5259: PUSH
5260: LD_VAR 0 10
5264: ST_TO_ADDR
// end ;
5265: GO 5146
5267: POP
5268: POP
// result := array ;
5269: LD_ADDR_VAR 0 5
5273: PUSH
5274: LD_VAR 0 1
5278: ST_TO_ADDR
// end ;
5279: LD_VAR 0 5
5283: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5284: LD_INT 0
5286: PPUSH
5287: PPUSH
// result := 0 ;
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_INT 0
5295: ST_TO_ADDR
// if not array or not value in array then
5296: LD_VAR 0 1
5300: NOT
5301: PUSH
5302: LD_VAR 0 2
5306: PUSH
5307: LD_VAR 0 1
5311: IN
5312: NOT
5313: OR
5314: IFFALSE 5318
// exit ;
5316: GO 5372
// for i = 1 to array do
5318: LD_ADDR_VAR 0 4
5322: PUSH
5323: DOUBLE
5324: LD_INT 1
5326: DEC
5327: ST_TO_ADDR
5328: LD_VAR 0 1
5332: PUSH
5333: FOR_TO
5334: IFFALSE 5370
// if value = array [ i ] then
5336: LD_VAR 0 2
5340: PUSH
5341: LD_VAR 0 1
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: EQUAL
5352: IFFALSE 5368
// begin result := i ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: LD_VAR 0 4
5363: ST_TO_ADDR
// exit ;
5364: POP
5365: POP
5366: GO 5372
// end ;
5368: GO 5333
5370: POP
5371: POP
// end ;
5372: LD_VAR 0 3
5376: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5377: LD_INT 0
5379: PPUSH
// vc_chassis := chassis ;
5380: LD_ADDR_OWVAR 37
5384: PUSH
5385: LD_VAR 0 1
5389: ST_TO_ADDR
// vc_engine := engine ;
5390: LD_ADDR_OWVAR 39
5394: PUSH
5395: LD_VAR 0 2
5399: ST_TO_ADDR
// vc_control := control ;
5400: LD_ADDR_OWVAR 38
5404: PUSH
5405: LD_VAR 0 3
5409: ST_TO_ADDR
// vc_weapon := weapon ;
5410: LD_ADDR_OWVAR 40
5414: PUSH
5415: LD_VAR 0 4
5419: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5420: LD_ADDR_OWVAR 41
5424: PUSH
5425: LD_VAR 0 5
5429: ST_TO_ADDR
// end ;
5430: LD_VAR 0 6
5434: RET
// export function WantPlant ( unit ) ; var task ; begin
5435: LD_INT 0
5437: PPUSH
5438: PPUSH
// result := false ;
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_INT 0
5446: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5447: LD_ADDR_VAR 0 3
5451: PUSH
5452: LD_VAR 0 1
5456: PPUSH
5457: CALL_OW 437
5461: ST_TO_ADDR
// if task then
5462: LD_VAR 0 3
5466: IFFALSE 5494
// if task [ 1 ] [ 1 ] = p then
5468: LD_VAR 0 3
5472: PUSH
5473: LD_INT 1
5475: ARRAY
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PUSH
5481: LD_STRING p
5483: EQUAL
5484: IFFALSE 5494
// result := true ;
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: LD_INT 1
5493: ST_TO_ADDR
// end ;
5494: LD_VAR 0 2
5498: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5499: LD_INT 0
5501: PPUSH
5502: PPUSH
5503: PPUSH
5504: PPUSH
// if pos < 1 then
5505: LD_VAR 0 2
5509: PUSH
5510: LD_INT 1
5512: LESS
5513: IFFALSE 5517
// exit ;
5515: GO 5820
// if pos = 1 then
5517: LD_VAR 0 2
5521: PUSH
5522: LD_INT 1
5524: EQUAL
5525: IFFALSE 5558
// result := Replace ( arr , pos [ 1 ] , value ) else
5527: LD_ADDR_VAR 0 4
5531: PUSH
5532: LD_VAR 0 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PUSH
5542: LD_INT 1
5544: ARRAY
5545: PPUSH
5546: LD_VAR 0 3
5550: PPUSH
5551: CALL_OW 1
5555: ST_TO_ADDR
5556: GO 5820
// begin tmp := arr ;
5558: LD_ADDR_VAR 0 6
5562: PUSH
5563: LD_VAR 0 1
5567: ST_TO_ADDR
// s_arr := [ tmp ] ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 6
5577: PUSH
5578: EMPTY
5579: LIST
5580: ST_TO_ADDR
// for i = 1 to pos - 1 do
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: DOUBLE
5587: LD_INT 1
5589: DEC
5590: ST_TO_ADDR
5591: LD_VAR 0 2
5595: PUSH
5596: LD_INT 1
5598: MINUS
5599: PUSH
5600: FOR_TO
5601: IFFALSE 5646
// begin tmp := tmp [ pos [ i ] ] ;
5603: LD_ADDR_VAR 0 6
5607: PUSH
5608: LD_VAR 0 6
5612: PUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 5
5622: ARRAY
5623: ARRAY
5624: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5625: LD_ADDR_VAR 0 7
5629: PUSH
5630: LD_VAR 0 7
5634: PUSH
5635: LD_VAR 0 6
5639: PUSH
5640: EMPTY
5641: LIST
5642: ADD
5643: ST_TO_ADDR
// end ;
5644: GO 5600
5646: POP
5647: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5648: LD_ADDR_VAR 0 6
5652: PUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: LD_VAR 0 2
5662: PUSH
5663: LD_VAR 0 2
5667: ARRAY
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 1
5678: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5679: LD_ADDR_VAR 0 7
5683: PUSH
5684: LD_VAR 0 7
5688: PPUSH
5689: LD_VAR 0 7
5693: PPUSH
5694: LD_VAR 0 6
5698: PPUSH
5699: CALL_OW 1
5703: ST_TO_ADDR
// for i = s_arr downto 2 do
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: DOUBLE
5710: LD_VAR 0 7
5714: INC
5715: ST_TO_ADDR
5716: LD_INT 2
5718: PUSH
5719: FOR_DOWNTO
5720: IFFALSE 5804
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5722: LD_ADDR_VAR 0 6
5726: PUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_VAR 0 5
5736: PUSH
5737: LD_INT 1
5739: MINUS
5740: ARRAY
5741: PPUSH
5742: LD_VAR 0 2
5746: PUSH
5747: LD_VAR 0 5
5751: PUSH
5752: LD_INT 1
5754: MINUS
5755: ARRAY
5756: PPUSH
5757: LD_VAR 0 7
5761: PUSH
5762: LD_VAR 0 5
5766: ARRAY
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5773: LD_ADDR_VAR 0 7
5777: PUSH
5778: LD_VAR 0 7
5782: PPUSH
5783: LD_VAR 0 5
5787: PUSH
5788: LD_INT 1
5790: MINUS
5791: PPUSH
5792: LD_VAR 0 6
5796: PPUSH
5797: CALL_OW 1
5801: ST_TO_ADDR
// end ;
5802: GO 5719
5804: POP
5805: POP
// result := s_arr [ 1 ] ;
5806: LD_ADDR_VAR 0 4
5810: PUSH
5811: LD_VAR 0 7
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: ST_TO_ADDR
// end ; end ;
5820: LD_VAR 0 4
5824: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5825: LD_INT 0
5827: PPUSH
5828: PPUSH
// if not list then
5829: LD_VAR 0 1
5833: NOT
5834: IFFALSE 5838
// exit ;
5836: GO 5929
// i := list [ pos1 ] ;
5838: LD_ADDR_VAR 0 5
5842: PUSH
5843: LD_VAR 0 1
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: ST_TO_ADDR
// if not i then
5854: LD_VAR 0 5
5858: NOT
5859: IFFALSE 5863
// exit ;
5861: GO 5929
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5863: LD_ADDR_VAR 0 1
5867: PUSH
5868: LD_VAR 0 1
5872: PPUSH
5873: LD_VAR 0 2
5877: PPUSH
5878: LD_VAR 0 1
5882: PUSH
5883: LD_VAR 0 3
5887: ARRAY
5888: PPUSH
5889: CALL_OW 1
5893: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5894: LD_ADDR_VAR 0 1
5898: PUSH
5899: LD_VAR 0 1
5903: PPUSH
5904: LD_VAR 0 3
5908: PPUSH
5909: LD_VAR 0 5
5913: PPUSH
5914: CALL_OW 1
5918: ST_TO_ADDR
// result := list ;
5919: LD_ADDR_VAR 0 4
5923: PUSH
5924: LD_VAR 0 1
5928: ST_TO_ADDR
// end ;
5929: LD_VAR 0 4
5933: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5934: LD_INT 0
5936: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5937: LD_ADDR_VAR 0 5
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 250
5951: PPUSH
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 251
5961: PPUSH
5962: LD_VAR 0 2
5966: PPUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: LD_VAR 0 4
5976: PPUSH
5977: CALL 5987 0 5
5981: ST_TO_ADDR
// end ;
5982: LD_VAR 0 5
5986: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5987: LD_INT 0
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
// if not list then
5993: LD_VAR 0 3
5997: NOT
5998: IFFALSE 6002
// exit ;
6000: GO 6390
// result := [ ] ;
6002: LD_ADDR_VAR 0 6
6006: PUSH
6007: EMPTY
6008: ST_TO_ADDR
// for i in list do
6009: LD_ADDR_VAR 0 7
6013: PUSH
6014: LD_VAR 0 3
6018: PUSH
6019: FOR_IN
6020: IFFALSE 6222
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6022: LD_ADDR_VAR 0 9
6026: PUSH
6027: LD_VAR 0 7
6031: PPUSH
6032: LD_VAR 0 1
6036: PPUSH
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 297
6046: ST_TO_ADDR
// if not result then
6047: LD_VAR 0 6
6051: NOT
6052: IFFALSE 6078
// result := [ [ i , tmp ] ] else
6054: LD_ADDR_VAR 0 6
6058: PUSH
6059: LD_VAR 0 7
6063: PUSH
6064: LD_VAR 0 9
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: EMPTY
6074: LIST
6075: ST_TO_ADDR
6076: GO 6220
// begin if result [ result ] [ 2 ] < tmp then
6078: LD_VAR 0 6
6082: PUSH
6083: LD_VAR 0 6
6087: ARRAY
6088: PUSH
6089: LD_INT 2
6091: ARRAY
6092: PUSH
6093: LD_VAR 0 9
6097: LESS
6098: IFFALSE 6140
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6100: LD_ADDR_VAR 0 6
6104: PUSH
6105: LD_VAR 0 6
6109: PPUSH
6110: LD_VAR 0 6
6114: PUSH
6115: LD_INT 1
6117: PLUS
6118: PPUSH
6119: LD_VAR 0 7
6123: PUSH
6124: LD_VAR 0 9
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 2
6137: ST_TO_ADDR
6138: GO 6220
// for j = 1 to result do
6140: LD_ADDR_VAR 0 8
6144: PUSH
6145: DOUBLE
6146: LD_INT 1
6148: DEC
6149: ST_TO_ADDR
6150: LD_VAR 0 6
6154: PUSH
6155: FOR_TO
6156: IFFALSE 6218
// begin if tmp < result [ j ] [ 2 ] then
6158: LD_VAR 0 9
6162: PUSH
6163: LD_VAR 0 6
6167: PUSH
6168: LD_VAR 0 8
6172: ARRAY
6173: PUSH
6174: LD_INT 2
6176: ARRAY
6177: LESS
6178: IFFALSE 6216
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6180: LD_ADDR_VAR 0 6
6184: PUSH
6185: LD_VAR 0 6
6189: PPUSH
6190: LD_VAR 0 8
6194: PPUSH
6195: LD_VAR 0 7
6199: PUSH
6200: LD_VAR 0 9
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PPUSH
6209: CALL_OW 2
6213: ST_TO_ADDR
// break ;
6214: GO 6218
// end ; end ;
6216: GO 6155
6218: POP
6219: POP
// end ; end ;
6220: GO 6019
6222: POP
6223: POP
// if result and not asc then
6224: LD_VAR 0 6
6228: PUSH
6229: LD_VAR 0 4
6233: NOT
6234: AND
6235: IFFALSE 6310
// begin tmp := result ;
6237: LD_ADDR_VAR 0 9
6241: PUSH
6242: LD_VAR 0 6
6246: ST_TO_ADDR
// for i = tmp downto 1 do
6247: LD_ADDR_VAR 0 7
6251: PUSH
6252: DOUBLE
6253: LD_VAR 0 9
6257: INC
6258: ST_TO_ADDR
6259: LD_INT 1
6261: PUSH
6262: FOR_DOWNTO
6263: IFFALSE 6308
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6265: LD_ADDR_VAR 0 6
6269: PUSH
6270: LD_VAR 0 6
6274: PPUSH
6275: LD_VAR 0 9
6279: PUSH
6280: LD_VAR 0 7
6284: MINUS
6285: PUSH
6286: LD_INT 1
6288: PLUS
6289: PPUSH
6290: LD_VAR 0 9
6294: PUSH
6295: LD_VAR 0 7
6299: ARRAY
6300: PPUSH
6301: CALL_OW 1
6305: ST_TO_ADDR
6306: GO 6262
6308: POP
6309: POP
// end ; tmp := [ ] ;
6310: LD_ADDR_VAR 0 9
6314: PUSH
6315: EMPTY
6316: ST_TO_ADDR
// if mode then
6317: LD_VAR 0 5
6321: IFFALSE 6390
// begin for i = 1 to result do
6323: LD_ADDR_VAR 0 7
6327: PUSH
6328: DOUBLE
6329: LD_INT 1
6331: DEC
6332: ST_TO_ADDR
6333: LD_VAR 0 6
6337: PUSH
6338: FOR_TO
6339: IFFALSE 6378
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6341: LD_ADDR_VAR 0 9
6345: PUSH
6346: LD_VAR 0 9
6350: PPUSH
6351: LD_VAR 0 7
6355: PPUSH
6356: LD_VAR 0 6
6360: PUSH
6361: LD_VAR 0 7
6365: ARRAY
6366: PUSH
6367: LD_INT 1
6369: ARRAY
6370: PPUSH
6371: CALL_OW 1
6375: ST_TO_ADDR
6376: GO 6338
6378: POP
6379: POP
// result := tmp ;
6380: LD_ADDR_VAR 0 6
6384: PUSH
6385: LD_VAR 0 9
6389: ST_TO_ADDR
// end ; end ;
6390: LD_VAR 0 6
6394: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6395: LD_INT 0
6397: PPUSH
6398: PPUSH
6399: PPUSH
6400: PPUSH
6401: PPUSH
6402: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6403: LD_ADDR_VAR 0 5
6407: PUSH
6408: LD_INT 0
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: LD_INT 0
6416: PUSH
6417: EMPTY
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: ST_TO_ADDR
// if not x or not y then
6425: LD_VAR 0 2
6429: NOT
6430: PUSH
6431: LD_VAR 0 3
6435: NOT
6436: OR
6437: IFFALSE 6441
// exit ;
6439: GO 8091
// if not range then
6441: LD_VAR 0 4
6445: NOT
6446: IFFALSE 6456
// range := 10 ;
6448: LD_ADDR_VAR 0 4
6452: PUSH
6453: LD_INT 10
6455: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6456: LD_ADDR_VAR 0 8
6460: PUSH
6461: LD_INT 81
6463: PUSH
6464: LD_VAR 0 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 92
6475: PUSH
6476: LD_VAR 0 2
6480: PUSH
6481: LD_VAR 0 3
6485: PUSH
6486: LD_VAR 0 4
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 21
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: PPUSH
6519: CALL_OW 69
6523: ST_TO_ADDR
// if not tmp then
6524: LD_VAR 0 8
6528: NOT
6529: IFFALSE 6533
// exit ;
6531: GO 8091
// for i in tmp do
6533: LD_ADDR_VAR 0 6
6537: PUSH
6538: LD_VAR 0 8
6542: PUSH
6543: FOR_IN
6544: IFFALSE 8066
// begin points := [ 0 , 0 , 0 ] ;
6546: LD_ADDR_VAR 0 9
6550: PUSH
6551: LD_INT 0
6553: PUSH
6554: LD_INT 0
6556: PUSH
6557: LD_INT 0
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: ST_TO_ADDR
// bpoints := 1 ;
6565: LD_ADDR_VAR 0 10
6569: PUSH
6570: LD_INT 1
6572: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6573: LD_VAR 0 6
6577: PPUSH
6578: CALL_OW 247
6582: PUSH
6583: LD_INT 1
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 7169
6591: POP
// begin if GetClass ( i ) = 1 then
6592: LD_VAR 0 6
6596: PPUSH
6597: CALL_OW 257
6601: PUSH
6602: LD_INT 1
6604: EQUAL
6605: IFFALSE 6626
// points := [ 10 , 5 , 3 ] ;
6607: LD_ADDR_VAR 0 9
6611: PUSH
6612: LD_INT 10
6614: PUSH
6615: LD_INT 5
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6626: LD_VAR 0 6
6630: PPUSH
6631: CALL_OW 257
6635: PUSH
6636: LD_INT 2
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: IN
6650: IFFALSE 6671
// points := [ 3 , 2 , 1 ] ;
6652: LD_ADDR_VAR 0 9
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 2
6662: PUSH
6663: LD_INT 1
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6671: LD_VAR 0 6
6675: PPUSH
6676: CALL_OW 257
6680: PUSH
6681: LD_INT 5
6683: EQUAL
6684: IFFALSE 6705
// points := [ 130 , 5 , 2 ] ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_INT 130
6693: PUSH
6694: LD_INT 5
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6705: LD_VAR 0 6
6709: PPUSH
6710: CALL_OW 257
6714: PUSH
6715: LD_INT 8
6717: EQUAL
6718: IFFALSE 6739
// points := [ 35 , 35 , 30 ] ;
6720: LD_ADDR_VAR 0 9
6724: PUSH
6725: LD_INT 35
6727: PUSH
6728: LD_INT 35
6730: PUSH
6731: LD_INT 30
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6739: LD_VAR 0 6
6743: PPUSH
6744: CALL_OW 257
6748: PUSH
6749: LD_INT 9
6751: EQUAL
6752: IFFALSE 6773
// points := [ 20 , 55 , 40 ] ;
6754: LD_ADDR_VAR 0 9
6758: PUSH
6759: LD_INT 20
6761: PUSH
6762: LD_INT 55
6764: PUSH
6765: LD_INT 40
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6773: LD_VAR 0 6
6777: PPUSH
6778: CALL_OW 257
6782: PUSH
6783: LD_INT 12
6785: PUSH
6786: LD_INT 16
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: IN
6793: IFFALSE 6814
// points := [ 5 , 3 , 2 ] ;
6795: LD_ADDR_VAR 0 9
6799: PUSH
6800: LD_INT 5
6802: PUSH
6803: LD_INT 3
6805: PUSH
6806: LD_INT 2
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 257
6823: PUSH
6824: LD_INT 17
6826: EQUAL
6827: IFFALSE 6848
// points := [ 100 , 50 , 75 ] ;
6829: LD_ADDR_VAR 0 9
6833: PUSH
6834: LD_INT 100
6836: PUSH
6837: LD_INT 50
6839: PUSH
6840: LD_INT 75
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: LIST
6847: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6848: LD_VAR 0 6
6852: PPUSH
6853: CALL_OW 257
6857: PUSH
6858: LD_INT 15
6860: EQUAL
6861: IFFALSE 6882
// points := [ 10 , 5 , 3 ] ;
6863: LD_ADDR_VAR 0 9
6867: PUSH
6868: LD_INT 10
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6882: LD_VAR 0 6
6886: PPUSH
6887: CALL_OW 257
6891: PUSH
6892: LD_INT 14
6894: EQUAL
6895: IFFALSE 6916
// points := [ 10 , 0 , 0 ] ;
6897: LD_ADDR_VAR 0 9
6901: PUSH
6902: LD_INT 10
6904: PUSH
6905: LD_INT 0
6907: PUSH
6908: LD_INT 0
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6916: LD_VAR 0 6
6920: PPUSH
6921: CALL_OW 257
6925: PUSH
6926: LD_INT 11
6928: EQUAL
6929: IFFALSE 6950
// points := [ 30 , 10 , 5 ] ;
6931: LD_ADDR_VAR 0 9
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 10
6941: PUSH
6942: LD_INT 5
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_INT 5
6957: PPUSH
6958: CALL_OW 321
6962: PUSH
6963: LD_INT 2
6965: EQUAL
6966: IFFALSE 6983
// bpoints := bpoints * 1.8 ;
6968: LD_ADDR_VAR 0 10
6972: PUSH
6973: LD_VAR 0 10
6977: PUSH
6978: LD_REAL  1.80000000000000E+0000
6981: MUL
6982: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6983: LD_VAR 0 6
6987: PPUSH
6988: CALL_OW 257
6992: PUSH
6993: LD_INT 1
6995: PUSH
6996: LD_INT 2
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: LD_INT 4
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: IN
7011: PUSH
7012: LD_VAR 0 1
7016: PPUSH
7017: LD_INT 51
7019: PPUSH
7020: CALL_OW 321
7024: PUSH
7025: LD_INT 2
7027: EQUAL
7028: AND
7029: IFFALSE 7046
// bpoints := bpoints * 1.2 ;
7031: LD_ADDR_VAR 0 10
7035: PUSH
7036: LD_VAR 0 10
7040: PUSH
7041: LD_REAL  1.20000000000000E+0000
7044: MUL
7045: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7046: LD_VAR 0 6
7050: PPUSH
7051: CALL_OW 257
7055: PUSH
7056: LD_INT 5
7058: PUSH
7059: LD_INT 7
7061: PUSH
7062: LD_INT 9
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: IN
7070: PUSH
7071: LD_VAR 0 1
7075: PPUSH
7076: LD_INT 52
7078: PPUSH
7079: CALL_OW 321
7083: PUSH
7084: LD_INT 2
7086: EQUAL
7087: AND
7088: IFFALSE 7105
// bpoints := bpoints * 1.5 ;
7090: LD_ADDR_VAR 0 10
7094: PUSH
7095: LD_VAR 0 10
7099: PUSH
7100: LD_REAL  1.50000000000000E+0000
7103: MUL
7104: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7105: LD_VAR 0 1
7109: PPUSH
7110: LD_INT 66
7112: PPUSH
7113: CALL_OW 321
7117: PUSH
7118: LD_INT 2
7120: EQUAL
7121: IFFALSE 7138
// bpoints := bpoints * 1.1 ;
7123: LD_ADDR_VAR 0 10
7127: PUSH
7128: LD_VAR 0 10
7132: PUSH
7133: LD_REAL  1.10000000000000E+0000
7136: MUL
7137: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7138: LD_ADDR_VAR 0 10
7142: PUSH
7143: LD_VAR 0 10
7147: PUSH
7148: LD_VAR 0 6
7152: PPUSH
7153: LD_INT 1
7155: PPUSH
7156: CALL_OW 259
7160: PUSH
7161: LD_REAL  1.15000000000000E+0000
7164: MUL
7165: MUL
7166: ST_TO_ADDR
// end ; unit_vehicle :
7167: GO 7995
7169: LD_INT 2
7171: DOUBLE
7172: EQUAL
7173: IFTRUE 7177
7175: GO 7983
7177: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7178: LD_VAR 0 6
7182: PPUSH
7183: CALL_OW 264
7187: PUSH
7188: LD_INT 2
7190: PUSH
7191: LD_INT 42
7193: PUSH
7194: LD_INT 24
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: IN
7202: IFFALSE 7223
// points := [ 25 , 5 , 3 ] ;
7204: LD_ADDR_VAR 0 9
7208: PUSH
7209: LD_INT 25
7211: PUSH
7212: LD_INT 5
7214: PUSH
7215: LD_INT 3
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7223: LD_VAR 0 6
7227: PPUSH
7228: CALL_OW 264
7232: PUSH
7233: LD_INT 4
7235: PUSH
7236: LD_INT 43
7238: PUSH
7239: LD_INT 25
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: IN
7247: IFFALSE 7268
// points := [ 40 , 15 , 5 ] ;
7249: LD_ADDR_VAR 0 9
7253: PUSH
7254: LD_INT 40
7256: PUSH
7257: LD_INT 15
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7268: LD_VAR 0 6
7272: PPUSH
7273: CALL_OW 264
7277: PUSH
7278: LD_INT 3
7280: PUSH
7281: LD_INT 23
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: IN
7288: IFFALSE 7309
// points := [ 7 , 25 , 8 ] ;
7290: LD_ADDR_VAR 0 9
7294: PUSH
7295: LD_INT 7
7297: PUSH
7298: LD_INT 25
7300: PUSH
7301: LD_INT 8
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7309: LD_VAR 0 6
7313: PPUSH
7314: CALL_OW 264
7318: PUSH
7319: LD_INT 5
7321: PUSH
7322: LD_INT 27
7324: PUSH
7325: LD_INT 44
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: IN
7333: IFFALSE 7354
// points := [ 14 , 50 , 16 ] ;
7335: LD_ADDR_VAR 0 9
7339: PUSH
7340: LD_INT 14
7342: PUSH
7343: LD_INT 50
7345: PUSH
7346: LD_INT 16
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7354: LD_VAR 0 6
7358: PPUSH
7359: CALL_OW 264
7363: PUSH
7364: LD_INT 6
7366: PUSH
7367: LD_INT 46
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: IN
7374: IFFALSE 7395
// points := [ 32 , 120 , 70 ] ;
7376: LD_ADDR_VAR 0 9
7380: PUSH
7381: LD_INT 32
7383: PUSH
7384: LD_INT 120
7386: PUSH
7387: LD_INT 70
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7395: LD_VAR 0 6
7399: PPUSH
7400: CALL_OW 264
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: LD_INT 28
7410: PUSH
7411: LD_INT 45
7413: PUSH
7414: LD_INT 92
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: IN
7423: IFFALSE 7444
// points := [ 35 , 20 , 45 ] ;
7425: LD_ADDR_VAR 0 9
7429: PUSH
7430: LD_INT 35
7432: PUSH
7433: LD_INT 20
7435: PUSH
7436: LD_INT 45
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7444: LD_VAR 0 6
7448: PPUSH
7449: CALL_OW 264
7453: PUSH
7454: LD_INT 47
7456: PUSH
7457: EMPTY
7458: LIST
7459: IN
7460: IFFALSE 7481
// points := [ 67 , 45 , 75 ] ;
7462: LD_ADDR_VAR 0 9
7466: PUSH
7467: LD_INT 67
7469: PUSH
7470: LD_INT 45
7472: PUSH
7473: LD_INT 75
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7481: LD_VAR 0 6
7485: PPUSH
7486: CALL_OW 264
7490: PUSH
7491: LD_INT 26
7493: PUSH
7494: EMPTY
7495: LIST
7496: IN
7497: IFFALSE 7518
// points := [ 120 , 30 , 80 ] ;
7499: LD_ADDR_VAR 0 9
7503: PUSH
7504: LD_INT 120
7506: PUSH
7507: LD_INT 30
7509: PUSH
7510: LD_INT 80
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7518: LD_VAR 0 6
7522: PPUSH
7523: CALL_OW 264
7527: PUSH
7528: LD_INT 22
7530: PUSH
7531: EMPTY
7532: LIST
7533: IN
7534: IFFALSE 7555
// points := [ 40 , 1 , 1 ] ;
7536: LD_ADDR_VAR 0 9
7540: PUSH
7541: LD_INT 40
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7555: LD_VAR 0 6
7559: PPUSH
7560: CALL_OW 264
7564: PUSH
7565: LD_INT 29
7567: PUSH
7568: EMPTY
7569: LIST
7570: IN
7571: IFFALSE 7592
// points := [ 70 , 200 , 400 ] ;
7573: LD_ADDR_VAR 0 9
7577: PUSH
7578: LD_INT 70
7580: PUSH
7581: LD_INT 200
7583: PUSH
7584: LD_INT 400
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7592: LD_VAR 0 6
7596: PPUSH
7597: CALL_OW 264
7601: PUSH
7602: LD_INT 14
7604: PUSH
7605: LD_INT 53
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: IN
7612: IFFALSE 7633
// points := [ 40 , 10 , 20 ] ;
7614: LD_ADDR_VAR 0 9
7618: PUSH
7619: LD_INT 40
7621: PUSH
7622: LD_INT 10
7624: PUSH
7625: LD_INT 20
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 264
7642: PUSH
7643: LD_INT 9
7645: PUSH
7646: EMPTY
7647: LIST
7648: IN
7649: IFFALSE 7670
// points := [ 5 , 70 , 20 ] ;
7651: LD_ADDR_VAR 0 9
7655: PUSH
7656: LD_INT 5
7658: PUSH
7659: LD_INT 70
7661: PUSH
7662: LD_INT 20
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: LIST
7669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7670: LD_VAR 0 6
7674: PPUSH
7675: CALL_OW 264
7679: PUSH
7680: LD_INT 10
7682: PUSH
7683: EMPTY
7684: LIST
7685: IN
7686: IFFALSE 7707
// points := [ 35 , 110 , 70 ] ;
7688: LD_ADDR_VAR 0 9
7692: PUSH
7693: LD_INT 35
7695: PUSH
7696: LD_INT 110
7698: PUSH
7699: LD_INT 70
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7707: LD_VAR 0 6
7711: PPUSH
7712: CALL_OW 265
7716: PUSH
7717: LD_INT 25
7719: EQUAL
7720: IFFALSE 7741
// points := [ 80 , 65 , 100 ] ;
7722: LD_ADDR_VAR 0 9
7726: PUSH
7727: LD_INT 80
7729: PUSH
7730: LD_INT 65
7732: PUSH
7733: LD_INT 100
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7741: LD_VAR 0 6
7745: PPUSH
7746: CALL_OW 263
7750: PUSH
7751: LD_INT 1
7753: EQUAL
7754: IFFALSE 7789
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7756: LD_ADDR_VAR 0 10
7760: PUSH
7761: LD_VAR 0 10
7765: PUSH
7766: LD_VAR 0 6
7770: PPUSH
7771: CALL_OW 311
7775: PPUSH
7776: LD_INT 3
7778: PPUSH
7779: CALL_OW 259
7783: PUSH
7784: LD_INT 4
7786: MUL
7787: MUL
7788: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7789: LD_VAR 0 6
7793: PPUSH
7794: CALL_OW 263
7798: PUSH
7799: LD_INT 2
7801: EQUAL
7802: IFFALSE 7853
// begin j := IsControledBy ( i ) ;
7804: LD_ADDR_VAR 0 7
7808: PUSH
7809: LD_VAR 0 6
7813: PPUSH
7814: CALL_OW 312
7818: ST_TO_ADDR
// if j then
7819: LD_VAR 0 7
7823: IFFALSE 7853
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7825: LD_ADDR_VAR 0 10
7829: PUSH
7830: LD_VAR 0 10
7834: PUSH
7835: LD_VAR 0 7
7839: PPUSH
7840: LD_INT 3
7842: PPUSH
7843: CALL_OW 259
7847: PUSH
7848: LD_INT 3
7850: MUL
7851: MUL
7852: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7853: LD_VAR 0 6
7857: PPUSH
7858: CALL_OW 264
7862: PUSH
7863: LD_INT 5
7865: PUSH
7866: LD_INT 6
7868: PUSH
7869: LD_INT 46
7871: PUSH
7872: LD_INT 44
7874: PUSH
7875: LD_INT 47
7877: PUSH
7878: LD_INT 45
7880: PUSH
7881: LD_INT 28
7883: PUSH
7884: LD_INT 7
7886: PUSH
7887: LD_INT 27
7889: PUSH
7890: LD_INT 29
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: IN
7905: PUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: LD_INT 52
7913: PPUSH
7914: CALL_OW 321
7918: PUSH
7919: LD_INT 2
7921: EQUAL
7922: AND
7923: IFFALSE 7940
// bpoints := bpoints * 1.2 ;
7925: LD_ADDR_VAR 0 10
7929: PUSH
7930: LD_VAR 0 10
7934: PUSH
7935: LD_REAL  1.20000000000000E+0000
7938: MUL
7939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7940: LD_VAR 0 6
7944: PPUSH
7945: CALL_OW 264
7949: PUSH
7950: LD_INT 6
7952: PUSH
7953: LD_INT 46
7955: PUSH
7956: LD_INT 47
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: IN
7964: IFFALSE 7981
// bpoints := bpoints * 1.2 ;
7966: LD_ADDR_VAR 0 10
7970: PUSH
7971: LD_VAR 0 10
7975: PUSH
7976: LD_REAL  1.20000000000000E+0000
7979: MUL
7980: ST_TO_ADDR
// end ; unit_building :
7981: GO 7995
7983: LD_INT 3
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 7994
7991: POP
// ; end ;
7992: GO 7995
7994: POP
// for j = 1 to 3 do
7995: LD_ADDR_VAR 0 7
7999: PUSH
8000: DOUBLE
8001: LD_INT 1
8003: DEC
8004: ST_TO_ADDR
8005: LD_INT 3
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8062
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8011: LD_ADDR_VAR 0 5
8015: PUSH
8016: LD_VAR 0 5
8020: PPUSH
8021: LD_VAR 0 7
8025: PPUSH
8026: LD_VAR 0 5
8030: PUSH
8031: LD_VAR 0 7
8035: ARRAY
8036: PUSH
8037: LD_VAR 0 9
8041: PUSH
8042: LD_VAR 0 7
8046: ARRAY
8047: PUSH
8048: LD_VAR 0 10
8052: MUL
8053: PLUS
8054: PPUSH
8055: CALL_OW 1
8059: ST_TO_ADDR
8060: GO 8008
8062: POP
8063: POP
// end ;
8064: GO 6543
8066: POP
8067: POP
// result := Replace ( result , 4 , tmp ) ;
8068: LD_ADDR_VAR 0 5
8072: PUSH
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 4
8080: PPUSH
8081: LD_VAR 0 8
8085: PPUSH
8086: CALL_OW 1
8090: ST_TO_ADDR
// end ;
8091: LD_VAR 0 5
8095: RET
// export function DangerAtRange ( unit , range ) ; begin
8096: LD_INT 0
8098: PPUSH
// if not unit then
8099: LD_VAR 0 1
8103: NOT
8104: IFFALSE 8108
// exit ;
8106: GO 8153
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_VAR 0 1
8117: PPUSH
8118: CALL_OW 255
8122: PPUSH
8123: LD_VAR 0 1
8127: PPUSH
8128: CALL_OW 250
8132: PPUSH
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL_OW 251
8142: PPUSH
8143: LD_VAR 0 2
8147: PPUSH
8148: CALL 6395 0 4
8152: ST_TO_ADDR
// end ;
8153: LD_VAR 0 3
8157: RET
// export function DangerInArea ( side , area ) ; begin
8158: LD_INT 0
8160: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8161: LD_ADDR_VAR 0 3
8165: PUSH
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 81
8173: PUSH
8174: LD_VAR 0 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PPUSH
8183: CALL_OW 70
8187: ST_TO_ADDR
// end ;
8188: LD_VAR 0 3
8192: RET
// export function IsExtension ( b ) ; begin
8193: LD_INT 0
8195: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8196: LD_ADDR_VAR 0 2
8200: PUSH
8201: LD_VAR 0 1
8205: PUSH
8206: LD_INT 23
8208: PUSH
8209: LD_INT 20
8211: PUSH
8212: LD_INT 22
8214: PUSH
8215: LD_INT 17
8217: PUSH
8218: LD_INT 24
8220: PUSH
8221: LD_INT 21
8223: PUSH
8224: LD_INT 19
8226: PUSH
8227: LD_INT 16
8229: PUSH
8230: LD_INT 25
8232: PUSH
8233: LD_INT 18
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: IN
8248: ST_TO_ADDR
// end ;
8249: LD_VAR 0 2
8253: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8254: LD_INT 0
8256: PPUSH
8257: PPUSH
8258: PPUSH
// result := [ ] ;
8259: LD_ADDR_VAR 0 4
8263: PUSH
8264: EMPTY
8265: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8266: LD_ADDR_VAR 0 5
8270: PUSH
8271: LD_VAR 0 2
8275: PPUSH
8276: LD_INT 21
8278: PUSH
8279: LD_INT 3
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PPUSH
8286: CALL_OW 70
8290: ST_TO_ADDR
// if not tmp then
8291: LD_VAR 0 5
8295: NOT
8296: IFFALSE 8300
// exit ;
8298: GO 8364
// if checkLink then
8300: LD_VAR 0 3
8304: IFFALSE 8354
// begin for i in tmp do
8306: LD_ADDR_VAR 0 6
8310: PUSH
8311: LD_VAR 0 5
8315: PUSH
8316: FOR_IN
8317: IFFALSE 8352
// if GetBase ( i ) <> base then
8319: LD_VAR 0 6
8323: PPUSH
8324: CALL_OW 274
8328: PUSH
8329: LD_VAR 0 1
8333: NONEQUAL
8334: IFFALSE 8350
// ComLinkToBase ( base , i ) ;
8336: LD_VAR 0 1
8340: PPUSH
8341: LD_VAR 0 6
8345: PPUSH
8346: CALL_OW 169
8350: GO 8316
8352: POP
8353: POP
// end ; result := tmp ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_VAR 0 5
8363: ST_TO_ADDR
// end ;
8364: LD_VAR 0 4
8368: RET
// export function ComComplete ( units , b ) ; var i ; begin
8369: LD_INT 0
8371: PPUSH
8372: PPUSH
// if not units then
8373: LD_VAR 0 1
8377: NOT
8378: IFFALSE 8382
// exit ;
8380: GO 8472
// for i in units do
8382: LD_ADDR_VAR 0 4
8386: PUSH
8387: LD_VAR 0 1
8391: PUSH
8392: FOR_IN
8393: IFFALSE 8470
// if BuildingStatus ( b ) = bs_build then
8395: LD_VAR 0 2
8399: PPUSH
8400: CALL_OW 461
8404: PUSH
8405: LD_INT 1
8407: EQUAL
8408: IFFALSE 8468
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8410: LD_VAR 0 4
8414: PPUSH
8415: LD_STRING h
8417: PUSH
8418: LD_VAR 0 2
8422: PPUSH
8423: CALL_OW 250
8427: PUSH
8428: LD_VAR 0 2
8432: PPUSH
8433: CALL_OW 251
8437: PUSH
8438: LD_VAR 0 2
8442: PUSH
8443: LD_INT 0
8445: PUSH
8446: LD_INT 0
8448: PUSH
8449: LD_INT 0
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: PPUSH
8464: CALL_OW 446
8468: GO 8392
8470: POP
8471: POP
// end ;
8472: LD_VAR 0 3
8476: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8477: LD_INT 0
8479: PPUSH
8480: PPUSH
8481: PPUSH
8482: PPUSH
8483: PPUSH
8484: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8485: LD_VAR 0 1
8489: NOT
8490: PUSH
8491: LD_VAR 0 1
8495: PPUSH
8496: CALL_OW 263
8500: PUSH
8501: LD_INT 2
8503: NONEQUAL
8504: OR
8505: IFFALSE 8509
// exit ;
8507: GO 8825
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8509: LD_ADDR_VAR 0 6
8513: PUSH
8514: LD_INT 22
8516: PUSH
8517: LD_VAR 0 1
8521: PPUSH
8522: CALL_OW 255
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 2
8533: PUSH
8534: LD_INT 30
8536: PUSH
8537: LD_INT 36
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 34
8546: PUSH
8547: LD_INT 31
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PPUSH
8563: CALL_OW 69
8567: ST_TO_ADDR
// if not tmp then
8568: LD_VAR 0 6
8572: NOT
8573: IFFALSE 8577
// exit ;
8575: GO 8825
// result := [ ] ;
8577: LD_ADDR_VAR 0 2
8581: PUSH
8582: EMPTY
8583: ST_TO_ADDR
// for i in tmp do
8584: LD_ADDR_VAR 0 3
8588: PUSH
8589: LD_VAR 0 6
8593: PUSH
8594: FOR_IN
8595: IFFALSE 8666
// begin t := UnitsInside ( i ) ;
8597: LD_ADDR_VAR 0 4
8601: PUSH
8602: LD_VAR 0 3
8606: PPUSH
8607: CALL_OW 313
8611: ST_TO_ADDR
// if t then
8612: LD_VAR 0 4
8616: IFFALSE 8664
// for j in t do
8618: LD_ADDR_VAR 0 7
8622: PUSH
8623: LD_VAR 0 4
8627: PUSH
8628: FOR_IN
8629: IFFALSE 8662
// result := Replace ( result , result + 1 , j ) ;
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_VAR 0 2
8640: PPUSH
8641: LD_VAR 0 2
8645: PUSH
8646: LD_INT 1
8648: PLUS
8649: PPUSH
8650: LD_VAR 0 7
8654: PPUSH
8655: CALL_OW 1
8659: ST_TO_ADDR
8660: GO 8628
8662: POP
8663: POP
// end ;
8664: GO 8594
8666: POP
8667: POP
// if not result then
8668: LD_VAR 0 2
8672: NOT
8673: IFFALSE 8677
// exit ;
8675: GO 8825
// mech := result [ 1 ] ;
8677: LD_ADDR_VAR 0 5
8681: PUSH
8682: LD_VAR 0 2
8686: PUSH
8687: LD_INT 1
8689: ARRAY
8690: ST_TO_ADDR
// if result > 1 then
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 1
8698: GREATER
8699: IFFALSE 8811
// begin for i = 2 to result do
8701: LD_ADDR_VAR 0 3
8705: PUSH
8706: DOUBLE
8707: LD_INT 2
8709: DEC
8710: ST_TO_ADDR
8711: LD_VAR 0 2
8715: PUSH
8716: FOR_TO
8717: IFFALSE 8809
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8719: LD_ADDR_VAR 0 4
8723: PUSH
8724: LD_VAR 0 2
8728: PUSH
8729: LD_VAR 0 3
8733: ARRAY
8734: PPUSH
8735: LD_INT 3
8737: PPUSH
8738: CALL_OW 259
8742: PUSH
8743: LD_VAR 0 2
8747: PUSH
8748: LD_VAR 0 3
8752: ARRAY
8753: PPUSH
8754: CALL_OW 432
8758: MINUS
8759: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8760: LD_VAR 0 4
8764: PUSH
8765: LD_VAR 0 5
8769: PPUSH
8770: LD_INT 3
8772: PPUSH
8773: CALL_OW 259
8777: PUSH
8778: LD_VAR 0 5
8782: PPUSH
8783: CALL_OW 432
8787: MINUS
8788: GREATEREQUAL
8789: IFFALSE 8807
// mech := result [ i ] ;
8791: LD_ADDR_VAR 0 5
8795: PUSH
8796: LD_VAR 0 2
8800: PUSH
8801: LD_VAR 0 3
8805: ARRAY
8806: ST_TO_ADDR
// end ;
8807: GO 8716
8809: POP
8810: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8811: LD_VAR 0 1
8815: PPUSH
8816: LD_VAR 0 5
8820: PPUSH
8821: CALL_OW 135
// end ;
8825: LD_VAR 0 2
8829: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8830: LD_INT 0
8832: PPUSH
8833: PPUSH
8834: PPUSH
8835: PPUSH
8836: PPUSH
8837: PPUSH
8838: PPUSH
8839: PPUSH
8840: PPUSH
8841: PPUSH
8842: PPUSH
8843: PPUSH
8844: PPUSH
// result := [ ] ;
8845: LD_ADDR_VAR 0 7
8849: PUSH
8850: EMPTY
8851: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8852: LD_VAR 0 1
8856: PPUSH
8857: CALL_OW 266
8861: PUSH
8862: LD_INT 0
8864: PUSH
8865: LD_INT 1
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: IN
8872: NOT
8873: IFFALSE 8877
// exit ;
8875: GO 10511
// if name then
8877: LD_VAR 0 3
8881: IFFALSE 8897
// SetBName ( base_dep , name ) ;
8883: LD_VAR 0 1
8887: PPUSH
8888: LD_VAR 0 3
8892: PPUSH
8893: CALL_OW 500
// base := GetBase ( base_dep ) ;
8897: LD_ADDR_VAR 0 15
8901: PUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 274
8911: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8912: LD_ADDR_VAR 0 16
8916: PUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: CALL_OW 255
8926: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8927: LD_ADDR_VAR 0 17
8931: PUSH
8932: LD_VAR 0 1
8936: PPUSH
8937: CALL_OW 248
8941: ST_TO_ADDR
// if sources then
8942: LD_VAR 0 5
8946: IFFALSE 8993
// for i = 1 to 3 do
8948: LD_ADDR_VAR 0 8
8952: PUSH
8953: DOUBLE
8954: LD_INT 1
8956: DEC
8957: ST_TO_ADDR
8958: LD_INT 3
8960: PUSH
8961: FOR_TO
8962: IFFALSE 8991
// AddResourceType ( base , i , sources [ i ] ) ;
8964: LD_VAR 0 15
8968: PPUSH
8969: LD_VAR 0 8
8973: PPUSH
8974: LD_VAR 0 5
8978: PUSH
8979: LD_VAR 0 8
8983: ARRAY
8984: PPUSH
8985: CALL_OW 276
8989: GO 8961
8991: POP
8992: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8993: LD_ADDR_VAR 0 18
8997: PUSH
8998: LD_VAR 0 15
9002: PPUSH
9003: LD_VAR 0 2
9007: PPUSH
9008: LD_INT 1
9010: PPUSH
9011: CALL 8254 0 3
9015: ST_TO_ADDR
// InitHc ;
9016: CALL_OW 19
// InitUc ;
9020: CALL_OW 18
// uc_side := side ;
9024: LD_ADDR_OWVAR 20
9028: PUSH
9029: LD_VAR 0 16
9033: ST_TO_ADDR
// uc_nation := nation ;
9034: LD_ADDR_OWVAR 21
9038: PUSH
9039: LD_VAR 0 17
9043: ST_TO_ADDR
// if buildings then
9044: LD_VAR 0 18
9048: IFFALSE 10370
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9050: LD_ADDR_VAR 0 19
9054: PUSH
9055: LD_VAR 0 18
9059: PPUSH
9060: LD_INT 2
9062: PUSH
9063: LD_INT 30
9065: PUSH
9066: LD_INT 29
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: LD_INT 30
9075: PUSH
9076: LD_INT 30
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 72
9092: ST_TO_ADDR
// if tmp then
9093: LD_VAR 0 19
9097: IFFALSE 9145
// for i in tmp do
9099: LD_ADDR_VAR 0 8
9103: PUSH
9104: LD_VAR 0 19
9108: PUSH
9109: FOR_IN
9110: IFFALSE 9143
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9112: LD_VAR 0 8
9116: PPUSH
9117: CALL_OW 250
9121: PPUSH
9122: LD_VAR 0 8
9126: PPUSH
9127: CALL_OW 251
9131: PPUSH
9132: LD_VAR 0 16
9136: PPUSH
9137: CALL_OW 441
9141: GO 9109
9143: POP
9144: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9145: LD_VAR 0 18
9149: PPUSH
9150: LD_INT 2
9152: PUSH
9153: LD_INT 30
9155: PUSH
9156: LD_INT 32
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 30
9165: PUSH
9166: LD_INT 33
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: LIST
9177: PPUSH
9178: CALL_OW 72
9182: IFFALSE 9270
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9184: LD_ADDR_VAR 0 8
9188: PUSH
9189: LD_VAR 0 18
9193: PPUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 30
9199: PUSH
9200: LD_INT 32
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 30
9209: PUSH
9210: LD_INT 33
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 72
9226: PUSH
9227: FOR_IN
9228: IFFALSE 9268
// begin if not GetBWeapon ( i ) then
9230: LD_VAR 0 8
9234: PPUSH
9235: CALL_OW 269
9239: NOT
9240: IFFALSE 9266
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9242: LD_VAR 0 8
9246: PPUSH
9247: LD_VAR 0 8
9251: PPUSH
9252: LD_VAR 0 2
9256: PPUSH
9257: CALL 10516 0 2
9261: PPUSH
9262: CALL_OW 431
// end ;
9266: GO 9227
9268: POP
9269: POP
// end ; for i = 1 to personel do
9270: LD_ADDR_VAR 0 8
9274: PUSH
9275: DOUBLE
9276: LD_INT 1
9278: DEC
9279: ST_TO_ADDR
9280: LD_VAR 0 6
9284: PUSH
9285: FOR_TO
9286: IFFALSE 10350
// begin if i > 4 then
9288: LD_VAR 0 8
9292: PUSH
9293: LD_INT 4
9295: GREATER
9296: IFFALSE 9300
// break ;
9298: GO 10350
// case i of 1 :
9300: LD_VAR 0 8
9304: PUSH
9305: LD_INT 1
9307: DOUBLE
9308: EQUAL
9309: IFTRUE 9313
9311: GO 9393
9313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9314: LD_ADDR_VAR 0 12
9318: PUSH
9319: LD_VAR 0 18
9323: PPUSH
9324: LD_INT 22
9326: PUSH
9327: LD_VAR 0 16
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 58
9338: PUSH
9339: EMPTY
9340: LIST
9341: PUSH
9342: LD_INT 2
9344: PUSH
9345: LD_INT 30
9347: PUSH
9348: LD_INT 32
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 30
9357: PUSH
9358: LD_INT 4
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PUSH
9365: LD_INT 30
9367: PUSH
9368: LD_INT 5
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: PPUSH
9386: CALL_OW 72
9390: ST_TO_ADDR
9391: GO 9615
9393: LD_INT 2
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9463
9401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9402: LD_ADDR_VAR 0 12
9406: PUSH
9407: LD_VAR 0 18
9411: PPUSH
9412: LD_INT 22
9414: PUSH
9415: LD_VAR 0 16
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: LD_INT 30
9429: PUSH
9430: LD_INT 0
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 30
9439: PUSH
9440: LD_INT 1
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PPUSH
9456: CALL_OW 72
9460: ST_TO_ADDR
9461: GO 9615
9463: LD_INT 3
9465: DOUBLE
9466: EQUAL
9467: IFTRUE 9471
9469: GO 9533
9471: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9472: LD_ADDR_VAR 0 12
9476: PUSH
9477: LD_VAR 0 18
9481: PPUSH
9482: LD_INT 22
9484: PUSH
9485: LD_VAR 0 16
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 2
9496: PUSH
9497: LD_INT 30
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 30
9509: PUSH
9510: LD_INT 3
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PPUSH
9526: CALL_OW 72
9530: ST_TO_ADDR
9531: GO 9615
9533: LD_INT 4
9535: DOUBLE
9536: EQUAL
9537: IFTRUE 9541
9539: GO 9614
9541: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9542: LD_ADDR_VAR 0 12
9546: PUSH
9547: LD_VAR 0 18
9551: PPUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 16
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: LD_INT 30
9569: PUSH
9570: LD_INT 6
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 30
9579: PUSH
9580: LD_INT 7
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 30
9589: PUSH
9590: LD_INT 8
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 72
9611: ST_TO_ADDR
9612: GO 9615
9614: POP
// if i = 1 then
9615: LD_VAR 0 8
9619: PUSH
9620: LD_INT 1
9622: EQUAL
9623: IFFALSE 9734
// begin tmp := [ ] ;
9625: LD_ADDR_VAR 0 19
9629: PUSH
9630: EMPTY
9631: ST_TO_ADDR
// for j in f do
9632: LD_ADDR_VAR 0 9
9636: PUSH
9637: LD_VAR 0 12
9641: PUSH
9642: FOR_IN
9643: IFFALSE 9716
// if GetBType ( j ) = b_bunker then
9645: LD_VAR 0 9
9649: PPUSH
9650: CALL_OW 266
9654: PUSH
9655: LD_INT 32
9657: EQUAL
9658: IFFALSE 9685
// tmp := Insert ( tmp , 1 , j ) else
9660: LD_ADDR_VAR 0 19
9664: PUSH
9665: LD_VAR 0 19
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: LD_VAR 0 9
9677: PPUSH
9678: CALL_OW 2
9682: ST_TO_ADDR
9683: GO 9714
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9685: LD_ADDR_VAR 0 19
9689: PUSH
9690: LD_VAR 0 19
9694: PPUSH
9695: LD_VAR 0 19
9699: PUSH
9700: LD_INT 1
9702: PLUS
9703: PPUSH
9704: LD_VAR 0 9
9708: PPUSH
9709: CALL_OW 2
9713: ST_TO_ADDR
9714: GO 9642
9716: POP
9717: POP
// if tmp then
9718: LD_VAR 0 19
9722: IFFALSE 9734
// f := tmp ;
9724: LD_ADDR_VAR 0 12
9728: PUSH
9729: LD_VAR 0 19
9733: ST_TO_ADDR
// end ; x := personel [ i ] ;
9734: LD_ADDR_VAR 0 13
9738: PUSH
9739: LD_VAR 0 6
9743: PUSH
9744: LD_VAR 0 8
9748: ARRAY
9749: ST_TO_ADDR
// if x = - 1 then
9750: LD_VAR 0 13
9754: PUSH
9755: LD_INT 1
9757: NEG
9758: EQUAL
9759: IFFALSE 9968
// begin for j in f do
9761: LD_ADDR_VAR 0 9
9765: PUSH
9766: LD_VAR 0 12
9770: PUSH
9771: FOR_IN
9772: IFFALSE 9964
// repeat InitHc ;
9774: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9778: LD_VAR 0 9
9782: PPUSH
9783: CALL_OW 266
9787: PUSH
9788: LD_INT 5
9790: EQUAL
9791: IFFALSE 9861
// begin if UnitsInside ( j ) < 3 then
9793: LD_VAR 0 9
9797: PPUSH
9798: CALL_OW 313
9802: PUSH
9803: LD_INT 3
9805: LESS
9806: IFFALSE 9842
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9808: LD_INT 0
9810: PPUSH
9811: LD_INT 5
9813: PUSH
9814: LD_INT 8
9816: PUSH
9817: LD_INT 9
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: PUSH
9825: LD_VAR 0 17
9829: ARRAY
9830: PPUSH
9831: LD_VAR 0 4
9835: PPUSH
9836: CALL_OW 380
9840: GO 9859
// PrepareHuman ( false , i , skill ) ;
9842: LD_INT 0
9844: PPUSH
9845: LD_VAR 0 8
9849: PPUSH
9850: LD_VAR 0 4
9854: PPUSH
9855: CALL_OW 380
// end else
9859: GO 9878
// PrepareHuman ( false , i , skill ) ;
9861: LD_INT 0
9863: PPUSH
9864: LD_VAR 0 8
9868: PPUSH
9869: LD_VAR 0 4
9873: PPUSH
9874: CALL_OW 380
// un := CreateHuman ;
9878: LD_ADDR_VAR 0 14
9882: PUSH
9883: CALL_OW 44
9887: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9888: LD_ADDR_VAR 0 7
9892: PUSH
9893: LD_VAR 0 7
9897: PPUSH
9898: LD_INT 1
9900: PPUSH
9901: LD_VAR 0 14
9905: PPUSH
9906: CALL_OW 2
9910: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9911: LD_VAR 0 14
9915: PPUSH
9916: LD_VAR 0 9
9920: PPUSH
9921: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9925: LD_VAR 0 9
9929: PPUSH
9930: CALL_OW 313
9934: PUSH
9935: LD_INT 6
9937: EQUAL
9938: PUSH
9939: LD_VAR 0 9
9943: PPUSH
9944: CALL_OW 266
9948: PUSH
9949: LD_INT 32
9951: PUSH
9952: LD_INT 31
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: IN
9959: OR
9960: IFFALSE 9774
9962: GO 9771
9964: POP
9965: POP
// end else
9966: GO 10348
// for j = 1 to x do
9968: LD_ADDR_VAR 0 9
9972: PUSH
9973: DOUBLE
9974: LD_INT 1
9976: DEC
9977: ST_TO_ADDR
9978: LD_VAR 0 13
9982: PUSH
9983: FOR_TO
9984: IFFALSE 10346
// begin InitHc ;
9986: CALL_OW 19
// if not f then
9990: LD_VAR 0 12
9994: NOT
9995: IFFALSE 10084
// begin PrepareHuman ( false , i , skill ) ;
9997: LD_INT 0
9999: PPUSH
10000: LD_VAR 0 8
10004: PPUSH
10005: LD_VAR 0 4
10009: PPUSH
10010: CALL_OW 380
// un := CreateHuman ;
10014: LD_ADDR_VAR 0 14
10018: PUSH
10019: CALL_OW 44
10023: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10024: LD_ADDR_VAR 0 7
10028: PUSH
10029: LD_VAR 0 7
10033: PPUSH
10034: LD_INT 1
10036: PPUSH
10037: LD_VAR 0 14
10041: PPUSH
10042: CALL_OW 2
10046: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10047: LD_VAR 0 14
10051: PPUSH
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 250
10061: PPUSH
10062: LD_VAR 0 1
10066: PPUSH
10067: CALL_OW 251
10071: PPUSH
10072: LD_INT 10
10074: PPUSH
10075: LD_INT 0
10077: PPUSH
10078: CALL_OW 50
// continue ;
10082: GO 9983
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10084: LD_VAR 0 12
10088: PUSH
10089: LD_INT 1
10091: ARRAY
10092: PPUSH
10093: CALL_OW 313
10097: PUSH
10098: LD_VAR 0 12
10102: PUSH
10103: LD_INT 1
10105: ARRAY
10106: PPUSH
10107: CALL_OW 266
10111: PUSH
10112: LD_INT 32
10114: PUSH
10115: LD_INT 31
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: IN
10122: AND
10123: PUSH
10124: LD_VAR 0 12
10128: PUSH
10129: LD_INT 1
10131: ARRAY
10132: PPUSH
10133: CALL_OW 313
10137: PUSH
10138: LD_INT 6
10140: EQUAL
10141: OR
10142: IFFALSE 10162
// f := Delete ( f , 1 ) ;
10144: LD_ADDR_VAR 0 12
10148: PUSH
10149: LD_VAR 0 12
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 3
10161: ST_TO_ADDR
// if not f then
10162: LD_VAR 0 12
10166: NOT
10167: IFFALSE 10185
// begin x := x + 2 ;
10169: LD_ADDR_VAR 0 13
10173: PUSH
10174: LD_VAR 0 13
10178: PUSH
10179: LD_INT 2
10181: PLUS
10182: ST_TO_ADDR
// continue ;
10183: GO 9983
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10185: LD_VAR 0 12
10189: PUSH
10190: LD_INT 1
10192: ARRAY
10193: PPUSH
10194: CALL_OW 266
10198: PUSH
10199: LD_INT 5
10201: EQUAL
10202: IFFALSE 10276
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10204: LD_VAR 0 12
10208: PUSH
10209: LD_INT 1
10211: ARRAY
10212: PPUSH
10213: CALL_OW 313
10217: PUSH
10218: LD_INT 3
10220: LESS
10221: IFFALSE 10257
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10223: LD_INT 0
10225: PPUSH
10226: LD_INT 5
10228: PUSH
10229: LD_INT 8
10231: PUSH
10232: LD_INT 9
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: PUSH
10240: LD_VAR 0 17
10244: ARRAY
10245: PPUSH
10246: LD_VAR 0 4
10250: PPUSH
10251: CALL_OW 380
10255: GO 10274
// PrepareHuman ( false , i , skill ) ;
10257: LD_INT 0
10259: PPUSH
10260: LD_VAR 0 8
10264: PPUSH
10265: LD_VAR 0 4
10269: PPUSH
10270: CALL_OW 380
// end else
10274: GO 10293
// PrepareHuman ( false , i , skill ) ;
10276: LD_INT 0
10278: PPUSH
10279: LD_VAR 0 8
10283: PPUSH
10284: LD_VAR 0 4
10288: PPUSH
10289: CALL_OW 380
// un := CreateHuman ;
10293: LD_ADDR_VAR 0 14
10297: PUSH
10298: CALL_OW 44
10302: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10303: LD_ADDR_VAR 0 7
10307: PUSH
10308: LD_VAR 0 7
10312: PPUSH
10313: LD_INT 1
10315: PPUSH
10316: LD_VAR 0 14
10320: PPUSH
10321: CALL_OW 2
10325: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10326: LD_VAR 0 14
10330: PPUSH
10331: LD_VAR 0 12
10335: PUSH
10336: LD_INT 1
10338: ARRAY
10339: PPUSH
10340: CALL_OW 52
// end ;
10344: GO 9983
10346: POP
10347: POP
// end ;
10348: GO 9285
10350: POP
10351: POP
// result := result ^ buildings ;
10352: LD_ADDR_VAR 0 7
10356: PUSH
10357: LD_VAR 0 7
10361: PUSH
10362: LD_VAR 0 18
10366: ADD
10367: ST_TO_ADDR
// end else
10368: GO 10511
// begin for i = 1 to personel do
10370: LD_ADDR_VAR 0 8
10374: PUSH
10375: DOUBLE
10376: LD_INT 1
10378: DEC
10379: ST_TO_ADDR
10380: LD_VAR 0 6
10384: PUSH
10385: FOR_TO
10386: IFFALSE 10509
// begin if i > 4 then
10388: LD_VAR 0 8
10392: PUSH
10393: LD_INT 4
10395: GREATER
10396: IFFALSE 10400
// break ;
10398: GO 10509
// x := personel [ i ] ;
10400: LD_ADDR_VAR 0 13
10404: PUSH
10405: LD_VAR 0 6
10409: PUSH
10410: LD_VAR 0 8
10414: ARRAY
10415: ST_TO_ADDR
// if x = - 1 then
10416: LD_VAR 0 13
10420: PUSH
10421: LD_INT 1
10423: NEG
10424: EQUAL
10425: IFFALSE 10429
// continue ;
10427: GO 10385
// PrepareHuman ( false , i , skill ) ;
10429: LD_INT 0
10431: PPUSH
10432: LD_VAR 0 8
10436: PPUSH
10437: LD_VAR 0 4
10441: PPUSH
10442: CALL_OW 380
// un := CreateHuman ;
10446: LD_ADDR_VAR 0 14
10450: PUSH
10451: CALL_OW 44
10455: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10456: LD_VAR 0 14
10460: PPUSH
10461: LD_VAR 0 1
10465: PPUSH
10466: CALL_OW 250
10470: PPUSH
10471: LD_VAR 0 1
10475: PPUSH
10476: CALL_OW 251
10480: PPUSH
10481: LD_INT 10
10483: PPUSH
10484: LD_INT 0
10486: PPUSH
10487: CALL_OW 50
// result := result ^ un ;
10491: LD_ADDR_VAR 0 7
10495: PUSH
10496: LD_VAR 0 7
10500: PUSH
10501: LD_VAR 0 14
10505: ADD
10506: ST_TO_ADDR
// end ;
10507: GO 10385
10509: POP
10510: POP
// end ; end ;
10511: LD_VAR 0 7
10515: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10516: LD_INT 0
10518: PPUSH
10519: PPUSH
10520: PPUSH
10521: PPUSH
10522: PPUSH
10523: PPUSH
10524: PPUSH
10525: PPUSH
10526: PPUSH
10527: PPUSH
10528: PPUSH
10529: PPUSH
10530: PPUSH
10531: PPUSH
10532: PPUSH
10533: PPUSH
// result := false ;
10534: LD_ADDR_VAR 0 3
10538: PUSH
10539: LD_INT 0
10541: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10542: LD_VAR 0 1
10546: NOT
10547: PUSH
10548: LD_VAR 0 1
10552: PPUSH
10553: CALL_OW 266
10557: PUSH
10558: LD_INT 32
10560: PUSH
10561: LD_INT 33
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: IN
10568: NOT
10569: OR
10570: IFFALSE 10574
// exit ;
10572: GO 11683
// nat := GetNation ( tower ) ;
10574: LD_ADDR_VAR 0 12
10578: PUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: CALL_OW 248
10588: ST_TO_ADDR
// side := GetSide ( tower ) ;
10589: LD_ADDR_VAR 0 16
10593: PUSH
10594: LD_VAR 0 1
10598: PPUSH
10599: CALL_OW 255
10603: ST_TO_ADDR
// x := GetX ( tower ) ;
10604: LD_ADDR_VAR 0 10
10608: PUSH
10609: LD_VAR 0 1
10613: PPUSH
10614: CALL_OW 250
10618: ST_TO_ADDR
// y := GetY ( tower ) ;
10619: LD_ADDR_VAR 0 11
10623: PUSH
10624: LD_VAR 0 1
10628: PPUSH
10629: CALL_OW 251
10633: ST_TO_ADDR
// if not x or not y then
10634: LD_VAR 0 10
10638: NOT
10639: PUSH
10640: LD_VAR 0 11
10644: NOT
10645: OR
10646: IFFALSE 10650
// exit ;
10648: GO 11683
// weapon := 0 ;
10650: LD_ADDR_VAR 0 18
10654: PUSH
10655: LD_INT 0
10657: ST_TO_ADDR
// fac_list := [ ] ;
10658: LD_ADDR_VAR 0 17
10662: PUSH
10663: EMPTY
10664: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10665: LD_ADDR_VAR 0 6
10669: PUSH
10670: LD_VAR 0 1
10674: PPUSH
10675: CALL_OW 274
10679: PPUSH
10680: LD_VAR 0 2
10684: PPUSH
10685: LD_INT 0
10687: PPUSH
10688: CALL 8254 0 3
10692: PPUSH
10693: LD_INT 30
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PPUSH
10703: CALL_OW 72
10707: ST_TO_ADDR
// if not factories then
10708: LD_VAR 0 6
10712: NOT
10713: IFFALSE 10717
// exit ;
10715: GO 11683
// for i in factories do
10717: LD_ADDR_VAR 0 8
10721: PUSH
10722: LD_VAR 0 6
10726: PUSH
10727: FOR_IN
10728: IFFALSE 10753
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10730: LD_ADDR_VAR 0 17
10734: PUSH
10735: LD_VAR 0 17
10739: PUSH
10740: LD_VAR 0 8
10744: PPUSH
10745: CALL_OW 478
10749: UNION
10750: ST_TO_ADDR
10751: GO 10727
10753: POP
10754: POP
// if not fac_list then
10755: LD_VAR 0 17
10759: NOT
10760: IFFALSE 10764
// exit ;
10762: GO 11683
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10764: LD_ADDR_VAR 0 5
10768: PUSH
10769: LD_INT 4
10771: PUSH
10772: LD_INT 5
10774: PUSH
10775: LD_INT 9
10777: PUSH
10778: LD_INT 10
10780: PUSH
10781: LD_INT 6
10783: PUSH
10784: LD_INT 7
10786: PUSH
10787: LD_INT 11
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 27
10801: PUSH
10802: LD_INT 28
10804: PUSH
10805: LD_INT 26
10807: PUSH
10808: LD_INT 30
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 43
10819: PUSH
10820: LD_INT 44
10822: PUSH
10823: LD_INT 46
10825: PUSH
10826: LD_INT 45
10828: PUSH
10829: LD_INT 47
10831: PUSH
10832: LD_INT 49
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: LIST
10847: PUSH
10848: LD_VAR 0 12
10852: ARRAY
10853: ST_TO_ADDR
// list := list isect fac_list ;
10854: LD_ADDR_VAR 0 5
10858: PUSH
10859: LD_VAR 0 5
10863: PUSH
10864: LD_VAR 0 17
10868: ISECT
10869: ST_TO_ADDR
// if not list then
10870: LD_VAR 0 5
10874: NOT
10875: IFFALSE 10879
// exit ;
10877: GO 11683
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10879: LD_VAR 0 12
10883: PUSH
10884: LD_INT 3
10886: EQUAL
10887: PUSH
10888: LD_INT 49
10890: PUSH
10891: LD_VAR 0 5
10895: IN
10896: AND
10897: PUSH
10898: LD_INT 31
10900: PPUSH
10901: LD_VAR 0 16
10905: PPUSH
10906: CALL_OW 321
10910: PUSH
10911: LD_INT 2
10913: EQUAL
10914: AND
10915: IFFALSE 10975
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10917: LD_INT 22
10919: PUSH
10920: LD_VAR 0 16
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PUSH
10929: LD_INT 35
10931: PUSH
10932: LD_INT 49
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 91
10941: PUSH
10942: LD_VAR 0 1
10946: PUSH
10947: LD_INT 10
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: PPUSH
10960: CALL_OW 69
10964: NOT
10965: IFFALSE 10975
// weapon := ru_time_lapser ;
10967: LD_ADDR_VAR 0 18
10971: PUSH
10972: LD_INT 49
10974: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10975: LD_VAR 0 12
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: LD_INT 2
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: IN
10990: PUSH
10991: LD_INT 11
10993: PUSH
10994: LD_VAR 0 5
10998: IN
10999: PUSH
11000: LD_INT 30
11002: PUSH
11003: LD_VAR 0 5
11007: IN
11008: OR
11009: AND
11010: PUSH
11011: LD_INT 6
11013: PPUSH
11014: LD_VAR 0 16
11018: PPUSH
11019: CALL_OW 321
11023: PUSH
11024: LD_INT 2
11026: EQUAL
11027: AND
11028: IFFALSE 11193
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11030: LD_INT 22
11032: PUSH
11033: LD_VAR 0 16
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 2
11044: PUSH
11045: LD_INT 35
11047: PUSH
11048: LD_INT 11
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 35
11057: PUSH
11058: LD_INT 30
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 91
11072: PUSH
11073: LD_VAR 0 1
11077: PUSH
11078: LD_INT 18
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: NOT
11096: PUSH
11097: LD_INT 22
11099: PUSH
11100: LD_VAR 0 16
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: LD_INT 30
11114: PUSH
11115: LD_INT 32
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 30
11124: PUSH
11125: LD_INT 33
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 91
11139: PUSH
11140: LD_VAR 0 1
11144: PUSH
11145: LD_INT 12
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: PPUSH
11161: CALL_OW 69
11165: PUSH
11166: LD_INT 2
11168: GREATER
11169: AND
11170: IFFALSE 11193
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11172: LD_ADDR_VAR 0 18
11176: PUSH
11177: LD_INT 11
11179: PUSH
11180: LD_INT 30
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_VAR 0 12
11191: ARRAY
11192: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11193: LD_VAR 0 18
11197: NOT
11198: PUSH
11199: LD_INT 40
11201: PPUSH
11202: LD_VAR 0 16
11206: PPUSH
11207: CALL_OW 321
11211: PUSH
11212: LD_INT 2
11214: EQUAL
11215: AND
11216: PUSH
11217: LD_INT 7
11219: PUSH
11220: LD_VAR 0 5
11224: IN
11225: PUSH
11226: LD_INT 28
11228: PUSH
11229: LD_VAR 0 5
11233: IN
11234: OR
11235: PUSH
11236: LD_INT 45
11238: PUSH
11239: LD_VAR 0 5
11243: IN
11244: OR
11245: AND
11246: IFFALSE 11500
// begin hex := GetHexInfo ( x , y ) ;
11248: LD_ADDR_VAR 0 4
11252: PUSH
11253: LD_VAR 0 10
11257: PPUSH
11258: LD_VAR 0 11
11262: PPUSH
11263: CALL_OW 546
11267: ST_TO_ADDR
// if hex [ 1 ] then
11268: LD_VAR 0 4
11272: PUSH
11273: LD_INT 1
11275: ARRAY
11276: IFFALSE 11280
// exit ;
11278: GO 11683
// height := hex [ 2 ] ;
11280: LD_ADDR_VAR 0 15
11284: PUSH
11285: LD_VAR 0 4
11289: PUSH
11290: LD_INT 2
11292: ARRAY
11293: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11294: LD_ADDR_VAR 0 14
11298: PUSH
11299: LD_INT 0
11301: PUSH
11302: LD_INT 2
11304: PUSH
11305: LD_INT 3
11307: PUSH
11308: LD_INT 5
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: ST_TO_ADDR
// for i in tmp do
11317: LD_ADDR_VAR 0 8
11321: PUSH
11322: LD_VAR 0 14
11326: PUSH
11327: FOR_IN
11328: IFFALSE 11498
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11330: LD_ADDR_VAR 0 9
11334: PUSH
11335: LD_VAR 0 10
11339: PPUSH
11340: LD_VAR 0 8
11344: PPUSH
11345: LD_INT 5
11347: PPUSH
11348: CALL_OW 272
11352: PUSH
11353: LD_VAR 0 11
11357: PPUSH
11358: LD_VAR 0 8
11362: PPUSH
11363: LD_INT 5
11365: PPUSH
11366: CALL_OW 273
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11375: LD_VAR 0 9
11379: PUSH
11380: LD_INT 1
11382: ARRAY
11383: PPUSH
11384: LD_VAR 0 9
11388: PUSH
11389: LD_INT 2
11391: ARRAY
11392: PPUSH
11393: CALL_OW 488
11397: IFFALSE 11496
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11399: LD_ADDR_VAR 0 4
11403: PUSH
11404: LD_VAR 0 9
11408: PUSH
11409: LD_INT 1
11411: ARRAY
11412: PPUSH
11413: LD_VAR 0 9
11417: PUSH
11418: LD_INT 2
11420: ARRAY
11421: PPUSH
11422: CALL_OW 546
11426: ST_TO_ADDR
// if hex [ 1 ] then
11427: LD_VAR 0 4
11431: PUSH
11432: LD_INT 1
11434: ARRAY
11435: IFFALSE 11439
// continue ;
11437: GO 11327
// h := hex [ 2 ] ;
11439: LD_ADDR_VAR 0 13
11443: PUSH
11444: LD_VAR 0 4
11448: PUSH
11449: LD_INT 2
11451: ARRAY
11452: ST_TO_ADDR
// if h + 7 < height then
11453: LD_VAR 0 13
11457: PUSH
11458: LD_INT 7
11460: PLUS
11461: PUSH
11462: LD_VAR 0 15
11466: LESS
11467: IFFALSE 11496
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11469: LD_ADDR_VAR 0 18
11473: PUSH
11474: LD_INT 7
11476: PUSH
11477: LD_INT 28
11479: PUSH
11480: LD_INT 45
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: LD_VAR 0 12
11492: ARRAY
11493: ST_TO_ADDR
// break ;
11494: GO 11498
// end ; end ; end ;
11496: GO 11327
11498: POP
11499: POP
// end ; if not weapon then
11500: LD_VAR 0 18
11504: NOT
11505: IFFALSE 11565
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11507: LD_ADDR_VAR 0 5
11511: PUSH
11512: LD_VAR 0 5
11516: PUSH
11517: LD_INT 11
11519: PUSH
11520: LD_INT 30
11522: PUSH
11523: LD_INT 49
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: DIFF
11531: ST_TO_ADDR
// if not list then
11532: LD_VAR 0 5
11536: NOT
11537: IFFALSE 11541
// exit ;
11539: GO 11683
// weapon := list [ rand ( 1 , list ) ] ;
11541: LD_ADDR_VAR 0 18
11545: PUSH
11546: LD_VAR 0 5
11550: PUSH
11551: LD_INT 1
11553: PPUSH
11554: LD_VAR 0 5
11558: PPUSH
11559: CALL_OW 12
11563: ARRAY
11564: ST_TO_ADDR
// end ; if weapon then
11565: LD_VAR 0 18
11569: IFFALSE 11683
// begin tmp := CostOfWeapon ( weapon ) ;
11571: LD_ADDR_VAR 0 14
11575: PUSH
11576: LD_VAR 0 18
11580: PPUSH
11581: CALL_OW 451
11585: ST_TO_ADDR
// j := GetBase ( tower ) ;
11586: LD_ADDR_VAR 0 9
11590: PUSH
11591: LD_VAR 0 1
11595: PPUSH
11596: CALL_OW 274
11600: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11601: LD_VAR 0 9
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: CALL_OW 275
11613: PUSH
11614: LD_VAR 0 14
11618: PUSH
11619: LD_INT 1
11621: ARRAY
11622: GREATEREQUAL
11623: PUSH
11624: LD_VAR 0 9
11628: PPUSH
11629: LD_INT 2
11631: PPUSH
11632: CALL_OW 275
11636: PUSH
11637: LD_VAR 0 14
11641: PUSH
11642: LD_INT 2
11644: ARRAY
11645: GREATEREQUAL
11646: AND
11647: PUSH
11648: LD_VAR 0 9
11652: PPUSH
11653: LD_INT 3
11655: PPUSH
11656: CALL_OW 275
11660: PUSH
11661: LD_VAR 0 14
11665: PUSH
11666: LD_INT 3
11668: ARRAY
11669: GREATEREQUAL
11670: AND
11671: IFFALSE 11683
// result := weapon ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_VAR 0 18
11682: ST_TO_ADDR
// end ; end ;
11683: LD_VAR 0 3
11687: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
// result := true ;
11692: LD_ADDR_VAR 0 3
11696: PUSH
11697: LD_INT 1
11699: ST_TO_ADDR
// if array1 = array2 then
11700: LD_VAR 0 1
11704: PUSH
11705: LD_VAR 0 2
11709: EQUAL
11710: IFFALSE 11770
// begin for i = 1 to array1 do
11712: LD_ADDR_VAR 0 4
11716: PUSH
11717: DOUBLE
11718: LD_INT 1
11720: DEC
11721: ST_TO_ADDR
11722: LD_VAR 0 1
11726: PUSH
11727: FOR_TO
11728: IFFALSE 11766
// if array1 [ i ] <> array2 [ i ] then
11730: LD_VAR 0 1
11734: PUSH
11735: LD_VAR 0 4
11739: ARRAY
11740: PUSH
11741: LD_VAR 0 2
11745: PUSH
11746: LD_VAR 0 4
11750: ARRAY
11751: NONEQUAL
11752: IFFALSE 11764
// begin result := false ;
11754: LD_ADDR_VAR 0 3
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// break ;
11762: GO 11766
// end ;
11764: GO 11727
11766: POP
11767: POP
// end else
11768: GO 11778
// result := false ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: LD_INT 0
11777: ST_TO_ADDR
// end ;
11778: LD_VAR 0 3
11782: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11783: LD_INT 0
11785: PPUSH
11786: PPUSH
// if not array1 or not array2 then
11787: LD_VAR 0 1
11791: NOT
11792: PUSH
11793: LD_VAR 0 2
11797: NOT
11798: OR
11799: IFFALSE 11803
// exit ;
11801: GO 11867
// result := true ;
11803: LD_ADDR_VAR 0 3
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// for i = 1 to array1 do
11811: LD_ADDR_VAR 0 4
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_VAR 0 1
11825: PUSH
11826: FOR_TO
11827: IFFALSE 11865
// if array1 [ i ] <> array2 [ i ] then
11829: LD_VAR 0 1
11833: PUSH
11834: LD_VAR 0 4
11838: ARRAY
11839: PUSH
11840: LD_VAR 0 2
11844: PUSH
11845: LD_VAR 0 4
11849: ARRAY
11850: NONEQUAL
11851: IFFALSE 11863
// begin result := false ;
11853: LD_ADDR_VAR 0 3
11857: PUSH
11858: LD_INT 0
11860: ST_TO_ADDR
// break ;
11861: GO 11865
// end ;
11863: GO 11826
11865: POP
11866: POP
// end ;
11867: LD_VAR 0 3
11871: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
11876: PPUSH
// pom := GetBase ( fac ) ;
11877: LD_ADDR_VAR 0 5
11881: PUSH
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 274
11891: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11892: LD_ADDR_VAR 0 4
11896: PUSH
11897: LD_VAR 0 2
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_VAR 0 2
11910: PUSH
11911: LD_INT 2
11913: ARRAY
11914: PPUSH
11915: LD_VAR 0 2
11919: PUSH
11920: LD_INT 3
11922: ARRAY
11923: PPUSH
11924: LD_VAR 0 2
11928: PUSH
11929: LD_INT 4
11931: ARRAY
11932: PPUSH
11933: CALL_OW 449
11937: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11938: LD_ADDR_VAR 0 3
11942: PUSH
11943: LD_VAR 0 5
11947: PPUSH
11948: LD_INT 1
11950: PPUSH
11951: CALL_OW 275
11955: PUSH
11956: LD_VAR 0 4
11960: PUSH
11961: LD_INT 1
11963: ARRAY
11964: GREATEREQUAL
11965: PUSH
11966: LD_VAR 0 5
11970: PPUSH
11971: LD_INT 2
11973: PPUSH
11974: CALL_OW 275
11978: PUSH
11979: LD_VAR 0 4
11983: PUSH
11984: LD_INT 2
11986: ARRAY
11987: GREATEREQUAL
11988: AND
11989: PUSH
11990: LD_VAR 0 5
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 275
12002: PUSH
12003: LD_VAR 0 4
12007: PUSH
12008: LD_INT 3
12010: ARRAY
12011: GREATEREQUAL
12012: AND
12013: ST_TO_ADDR
// end ;
12014: LD_VAR 0 3
12018: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12019: LD_INT 0
12021: PPUSH
12022: PPUSH
12023: PPUSH
12024: PPUSH
// pom := GetBase ( building ) ;
12025: LD_ADDR_VAR 0 3
12029: PUSH
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 274
12039: ST_TO_ADDR
// if not pom then
12040: LD_VAR 0 3
12044: NOT
12045: IFFALSE 12049
// exit ;
12047: GO 12219
// btype := GetBType ( building ) ;
12049: LD_ADDR_VAR 0 5
12053: PUSH
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL_OW 266
12063: ST_TO_ADDR
// if btype = b_armoury then
12064: LD_VAR 0 5
12068: PUSH
12069: LD_INT 4
12071: EQUAL
12072: IFFALSE 12082
// btype := b_barracks ;
12074: LD_ADDR_VAR 0 5
12078: PUSH
12079: LD_INT 5
12081: ST_TO_ADDR
// if btype = b_depot then
12082: LD_VAR 0 5
12086: PUSH
12087: LD_INT 0
12089: EQUAL
12090: IFFALSE 12100
// btype := b_warehouse ;
12092: LD_ADDR_VAR 0 5
12096: PUSH
12097: LD_INT 1
12099: ST_TO_ADDR
// if btype = b_workshop then
12100: LD_VAR 0 5
12104: PUSH
12105: LD_INT 2
12107: EQUAL
12108: IFFALSE 12118
// btype := b_factory ;
12110: LD_ADDR_VAR 0 5
12114: PUSH
12115: LD_INT 3
12117: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12118: LD_ADDR_VAR 0 4
12122: PUSH
12123: LD_VAR 0 5
12127: PPUSH
12128: LD_VAR 0 1
12132: PPUSH
12133: CALL_OW 248
12137: PPUSH
12138: CALL_OW 450
12142: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12143: LD_ADDR_VAR 0 2
12147: PUSH
12148: LD_VAR 0 3
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 275
12160: PUSH
12161: LD_VAR 0 4
12165: PUSH
12166: LD_INT 1
12168: ARRAY
12169: GREATEREQUAL
12170: PUSH
12171: LD_VAR 0 3
12175: PPUSH
12176: LD_INT 2
12178: PPUSH
12179: CALL_OW 275
12183: PUSH
12184: LD_VAR 0 4
12188: PUSH
12189: LD_INT 2
12191: ARRAY
12192: GREATEREQUAL
12193: AND
12194: PUSH
12195: LD_VAR 0 3
12199: PPUSH
12200: LD_INT 3
12202: PPUSH
12203: CALL_OW 275
12207: PUSH
12208: LD_VAR 0 4
12212: PUSH
12213: LD_INT 3
12215: ARRAY
12216: GREATEREQUAL
12217: AND
12218: ST_TO_ADDR
// end ;
12219: LD_VAR 0 2
12223: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12224: LD_INT 0
12226: PPUSH
12227: PPUSH
12228: PPUSH
// pom := GetBase ( building ) ;
12229: LD_ADDR_VAR 0 4
12233: PUSH
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 274
12243: ST_TO_ADDR
// if not pom then
12244: LD_VAR 0 4
12248: NOT
12249: IFFALSE 12253
// exit ;
12251: GO 12354
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12253: LD_ADDR_VAR 0 5
12257: PUSH
12258: LD_VAR 0 2
12262: PPUSH
12263: LD_VAR 0 1
12267: PPUSH
12268: CALL_OW 248
12272: PPUSH
12273: CALL_OW 450
12277: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12278: LD_ADDR_VAR 0 3
12282: PUSH
12283: LD_VAR 0 4
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: CALL_OW 275
12295: PUSH
12296: LD_VAR 0 5
12300: PUSH
12301: LD_INT 1
12303: ARRAY
12304: GREATEREQUAL
12305: PUSH
12306: LD_VAR 0 4
12310: PPUSH
12311: LD_INT 2
12313: PPUSH
12314: CALL_OW 275
12318: PUSH
12319: LD_VAR 0 5
12323: PUSH
12324: LD_INT 2
12326: ARRAY
12327: GREATEREQUAL
12328: AND
12329: PUSH
12330: LD_VAR 0 4
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: CALL_OW 275
12342: PUSH
12343: LD_VAR 0 5
12347: PUSH
12348: LD_INT 3
12350: ARRAY
12351: GREATEREQUAL
12352: AND
12353: ST_TO_ADDR
// end ;
12354: LD_VAR 0 3
12358: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12359: LD_INT 0
12361: PPUSH
12362: PPUSH
12363: PPUSH
12364: PPUSH
12365: PPUSH
12366: PPUSH
12367: PPUSH
12368: PPUSH
12369: PPUSH
12370: PPUSH
12371: PPUSH
// result := false ;
12372: LD_ADDR_VAR 0 8
12376: PUSH
12377: LD_INT 0
12379: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12380: LD_VAR 0 5
12384: NOT
12385: PUSH
12386: LD_VAR 0 1
12390: NOT
12391: OR
12392: PUSH
12393: LD_VAR 0 2
12397: NOT
12398: OR
12399: PUSH
12400: LD_VAR 0 3
12404: NOT
12405: OR
12406: IFFALSE 12410
// exit ;
12408: GO 13224
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12410: LD_ADDR_VAR 0 14
12414: PUSH
12415: LD_VAR 0 1
12419: PPUSH
12420: LD_VAR 0 2
12424: PPUSH
12425: LD_VAR 0 3
12429: PPUSH
12430: LD_VAR 0 4
12434: PPUSH
12435: LD_VAR 0 5
12439: PUSH
12440: LD_INT 1
12442: ARRAY
12443: PPUSH
12444: CALL_OW 248
12448: PPUSH
12449: LD_INT 0
12451: PPUSH
12452: CALL 14477 0 6
12456: ST_TO_ADDR
// if not hexes then
12457: LD_VAR 0 14
12461: NOT
12462: IFFALSE 12466
// exit ;
12464: GO 13224
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12466: LD_ADDR_VAR 0 17
12470: PUSH
12471: LD_VAR 0 5
12475: PPUSH
12476: LD_INT 22
12478: PUSH
12479: LD_VAR 0 13
12483: PPUSH
12484: CALL_OW 255
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 2
12495: PUSH
12496: LD_INT 30
12498: PUSH
12499: LD_INT 0
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 30
12508: PUSH
12509: LD_INT 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PPUSH
12525: CALL_OW 72
12529: ST_TO_ADDR
// for i = 1 to hexes do
12530: LD_ADDR_VAR 0 9
12534: PUSH
12535: DOUBLE
12536: LD_INT 1
12538: DEC
12539: ST_TO_ADDR
12540: LD_VAR 0 14
12544: PUSH
12545: FOR_TO
12546: IFFALSE 13222
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12548: LD_ADDR_VAR 0 13
12552: PUSH
12553: LD_VAR 0 14
12557: PUSH
12558: LD_VAR 0 9
12562: ARRAY
12563: PUSH
12564: LD_INT 1
12566: ARRAY
12567: PPUSH
12568: LD_VAR 0 14
12572: PUSH
12573: LD_VAR 0 9
12577: ARRAY
12578: PUSH
12579: LD_INT 2
12581: ARRAY
12582: PPUSH
12583: CALL_OW 428
12587: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12588: LD_VAR 0 14
12592: PUSH
12593: LD_VAR 0 9
12597: ARRAY
12598: PUSH
12599: LD_INT 1
12601: ARRAY
12602: PPUSH
12603: LD_VAR 0 14
12607: PUSH
12608: LD_VAR 0 9
12612: ARRAY
12613: PUSH
12614: LD_INT 2
12616: ARRAY
12617: PPUSH
12618: CALL_OW 351
12622: PUSH
12623: LD_VAR 0 14
12627: PUSH
12628: LD_VAR 0 9
12632: ARRAY
12633: PUSH
12634: LD_INT 1
12636: ARRAY
12637: PPUSH
12638: LD_VAR 0 14
12642: PUSH
12643: LD_VAR 0 9
12647: ARRAY
12648: PUSH
12649: LD_INT 2
12651: ARRAY
12652: PPUSH
12653: CALL_OW 488
12657: NOT
12658: OR
12659: PUSH
12660: LD_VAR 0 13
12664: PPUSH
12665: CALL_OW 247
12669: PUSH
12670: LD_INT 3
12672: EQUAL
12673: OR
12674: IFFALSE 12680
// exit ;
12676: POP
12677: POP
12678: GO 13224
// if not tmp then
12680: LD_VAR 0 13
12684: NOT
12685: IFFALSE 12689
// continue ;
12687: GO 12545
// result := true ;
12689: LD_ADDR_VAR 0 8
12693: PUSH
12694: LD_INT 1
12696: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12697: LD_VAR 0 6
12701: PUSH
12702: LD_VAR 0 13
12706: PPUSH
12707: CALL_OW 247
12711: PUSH
12712: LD_INT 2
12714: EQUAL
12715: AND
12716: PUSH
12717: LD_VAR 0 13
12721: PPUSH
12722: CALL_OW 263
12726: PUSH
12727: LD_INT 1
12729: EQUAL
12730: AND
12731: IFFALSE 12895
// begin if IsDrivenBy ( tmp ) then
12733: LD_VAR 0 13
12737: PPUSH
12738: CALL_OW 311
12742: IFFALSE 12746
// continue ;
12744: GO 12545
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12746: LD_VAR 0 6
12750: PPUSH
12751: LD_INT 3
12753: PUSH
12754: LD_INT 60
12756: PUSH
12757: EMPTY
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 3
12766: PUSH
12767: LD_INT 55
12769: PUSH
12770: EMPTY
12771: LIST
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PPUSH
12781: CALL_OW 72
12785: IFFALSE 12893
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12787: LD_ADDR_VAR 0 18
12791: PUSH
12792: LD_VAR 0 6
12796: PPUSH
12797: LD_INT 3
12799: PUSH
12800: LD_INT 60
12802: PUSH
12803: EMPTY
12804: LIST
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 3
12812: PUSH
12813: LD_INT 55
12815: PUSH
12816: EMPTY
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PPUSH
12827: CALL_OW 72
12831: PUSH
12832: LD_INT 1
12834: ARRAY
12835: ST_TO_ADDR
// if IsInUnit ( driver ) then
12836: LD_VAR 0 18
12840: PPUSH
12841: CALL_OW 310
12845: IFFALSE 12856
// ComExit ( driver ) ;
12847: LD_VAR 0 18
12851: PPUSH
12852: CALL 38256 0 1
// AddComEnterUnit ( driver , tmp ) ;
12856: LD_VAR 0 18
12860: PPUSH
12861: LD_VAR 0 13
12865: PPUSH
12866: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12870: LD_VAR 0 18
12874: PPUSH
12875: LD_VAR 0 7
12879: PPUSH
12880: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12884: LD_VAR 0 18
12888: PPUSH
12889: CALL_OW 181
// end ; continue ;
12893: GO 12545
// end ; if not cleaners or not tmp in cleaners then
12895: LD_VAR 0 6
12899: NOT
12900: PUSH
12901: LD_VAR 0 13
12905: PUSH
12906: LD_VAR 0 6
12910: IN
12911: NOT
12912: OR
12913: IFFALSE 13220
// begin if dep then
12915: LD_VAR 0 17
12919: IFFALSE 13055
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12921: LD_ADDR_VAR 0 16
12925: PUSH
12926: LD_VAR 0 17
12930: PUSH
12931: LD_INT 1
12933: ARRAY
12934: PPUSH
12935: CALL_OW 250
12939: PPUSH
12940: LD_VAR 0 17
12944: PUSH
12945: LD_INT 1
12947: ARRAY
12948: PPUSH
12949: CALL_OW 254
12953: PPUSH
12954: LD_INT 5
12956: PPUSH
12957: CALL_OW 272
12961: PUSH
12962: LD_VAR 0 17
12966: PUSH
12967: LD_INT 1
12969: ARRAY
12970: PPUSH
12971: CALL_OW 251
12975: PPUSH
12976: LD_VAR 0 17
12980: PUSH
12981: LD_INT 1
12983: ARRAY
12984: PPUSH
12985: CALL_OW 254
12989: PPUSH
12990: LD_INT 5
12992: PPUSH
12993: CALL_OW 273
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13002: LD_VAR 0 16
13006: PUSH
13007: LD_INT 1
13009: ARRAY
13010: PPUSH
13011: LD_VAR 0 16
13015: PUSH
13016: LD_INT 2
13018: ARRAY
13019: PPUSH
13020: CALL_OW 488
13024: IFFALSE 13055
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13026: LD_VAR 0 13
13030: PPUSH
13031: LD_VAR 0 16
13035: PUSH
13036: LD_INT 1
13038: ARRAY
13039: PPUSH
13040: LD_VAR 0 16
13044: PUSH
13045: LD_INT 2
13047: ARRAY
13048: PPUSH
13049: CALL_OW 111
// continue ;
13053: GO 12545
// end ; end ; r := GetDir ( tmp ) ;
13055: LD_ADDR_VAR 0 15
13059: PUSH
13060: LD_VAR 0 13
13064: PPUSH
13065: CALL_OW 254
13069: ST_TO_ADDR
// if r = 5 then
13070: LD_VAR 0 15
13074: PUSH
13075: LD_INT 5
13077: EQUAL
13078: IFFALSE 13088
// r := 0 ;
13080: LD_ADDR_VAR 0 15
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// for j = r to 5 do
13088: LD_ADDR_VAR 0 10
13092: PUSH
13093: DOUBLE
13094: LD_VAR 0 15
13098: DEC
13099: ST_TO_ADDR
13100: LD_INT 5
13102: PUSH
13103: FOR_TO
13104: IFFALSE 13218
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13106: LD_ADDR_VAR 0 11
13110: PUSH
13111: LD_VAR 0 13
13115: PPUSH
13116: CALL_OW 250
13120: PPUSH
13121: LD_VAR 0 10
13125: PPUSH
13126: LD_INT 2
13128: PPUSH
13129: CALL_OW 272
13133: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13134: LD_ADDR_VAR 0 12
13138: PUSH
13139: LD_VAR 0 13
13143: PPUSH
13144: CALL_OW 251
13148: PPUSH
13149: LD_VAR 0 10
13153: PPUSH
13154: LD_INT 2
13156: PPUSH
13157: CALL_OW 273
13161: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13162: LD_VAR 0 11
13166: PPUSH
13167: LD_VAR 0 12
13171: PPUSH
13172: CALL_OW 488
13176: PUSH
13177: LD_VAR 0 11
13181: PPUSH
13182: LD_VAR 0 12
13186: PPUSH
13187: CALL_OW 428
13191: NOT
13192: AND
13193: IFFALSE 13216
// begin ComMoveXY ( tmp , _x , _y ) ;
13195: LD_VAR 0 13
13199: PPUSH
13200: LD_VAR 0 11
13204: PPUSH
13205: LD_VAR 0 12
13209: PPUSH
13210: CALL_OW 111
// break ;
13214: GO 13218
// end ; end ;
13216: GO 13103
13218: POP
13219: POP
// end ; end ;
13220: GO 12545
13222: POP
13223: POP
// end ;
13224: LD_VAR 0 8
13228: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13229: LD_INT 0
13231: PPUSH
// result := true ;
13232: LD_ADDR_VAR 0 3
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13240: LD_VAR 0 2
13244: PUSH
13245: LD_INT 24
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13259
13251: LD_INT 33
13253: DOUBLE
13254: EQUAL
13255: IFTRUE 13259
13257: GO 13284
13259: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13260: LD_ADDR_VAR 0 3
13264: PUSH
13265: LD_INT 32
13267: PPUSH
13268: LD_VAR 0 1
13272: PPUSH
13273: CALL_OW 321
13277: PUSH
13278: LD_INT 2
13280: EQUAL
13281: ST_TO_ADDR
13282: GO 13600
13284: LD_INT 20
13286: DOUBLE
13287: EQUAL
13288: IFTRUE 13292
13290: GO 13317
13292: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13293: LD_ADDR_VAR 0 3
13297: PUSH
13298: LD_INT 6
13300: PPUSH
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 321
13310: PUSH
13311: LD_INT 2
13313: EQUAL
13314: ST_TO_ADDR
13315: GO 13600
13317: LD_INT 22
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13331
13323: LD_INT 36
13325: DOUBLE
13326: EQUAL
13327: IFTRUE 13331
13329: GO 13356
13331: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13332: LD_ADDR_VAR 0 3
13336: PUSH
13337: LD_INT 15
13339: PPUSH
13340: LD_VAR 0 1
13344: PPUSH
13345: CALL_OW 321
13349: PUSH
13350: LD_INT 2
13352: EQUAL
13353: ST_TO_ADDR
13354: GO 13600
13356: LD_INT 30
13358: DOUBLE
13359: EQUAL
13360: IFTRUE 13364
13362: GO 13389
13364: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13365: LD_ADDR_VAR 0 3
13369: PUSH
13370: LD_INT 20
13372: PPUSH
13373: LD_VAR 0 1
13377: PPUSH
13378: CALL_OW 321
13382: PUSH
13383: LD_INT 2
13385: EQUAL
13386: ST_TO_ADDR
13387: GO 13600
13389: LD_INT 28
13391: DOUBLE
13392: EQUAL
13393: IFTRUE 13403
13395: LD_INT 21
13397: DOUBLE
13398: EQUAL
13399: IFTRUE 13403
13401: GO 13428
13403: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13404: LD_ADDR_VAR 0 3
13408: PUSH
13409: LD_INT 21
13411: PPUSH
13412: LD_VAR 0 1
13416: PPUSH
13417: CALL_OW 321
13421: PUSH
13422: LD_INT 2
13424: EQUAL
13425: ST_TO_ADDR
13426: GO 13600
13428: LD_INT 16
13430: DOUBLE
13431: EQUAL
13432: IFTRUE 13436
13434: GO 13461
13436: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13437: LD_ADDR_VAR 0 3
13441: PUSH
13442: LD_INT 84
13444: PPUSH
13445: LD_VAR 0 1
13449: PPUSH
13450: CALL_OW 321
13454: PUSH
13455: LD_INT 2
13457: EQUAL
13458: ST_TO_ADDR
13459: GO 13600
13461: LD_INT 19
13463: DOUBLE
13464: EQUAL
13465: IFTRUE 13475
13467: LD_INT 23
13469: DOUBLE
13470: EQUAL
13471: IFTRUE 13475
13473: GO 13500
13475: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13476: LD_ADDR_VAR 0 3
13480: PUSH
13481: LD_INT 83
13483: PPUSH
13484: LD_VAR 0 1
13488: PPUSH
13489: CALL_OW 321
13493: PUSH
13494: LD_INT 2
13496: EQUAL
13497: ST_TO_ADDR
13498: GO 13600
13500: LD_INT 17
13502: DOUBLE
13503: EQUAL
13504: IFTRUE 13508
13506: GO 13533
13508: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13509: LD_ADDR_VAR 0 3
13513: PUSH
13514: LD_INT 39
13516: PPUSH
13517: LD_VAR 0 1
13521: PPUSH
13522: CALL_OW 321
13526: PUSH
13527: LD_INT 2
13529: EQUAL
13530: ST_TO_ADDR
13531: GO 13600
13533: LD_INT 18
13535: DOUBLE
13536: EQUAL
13537: IFTRUE 13541
13539: GO 13566
13541: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13542: LD_ADDR_VAR 0 3
13546: PUSH
13547: LD_INT 40
13549: PPUSH
13550: LD_VAR 0 1
13554: PPUSH
13555: CALL_OW 321
13559: PUSH
13560: LD_INT 2
13562: EQUAL
13563: ST_TO_ADDR
13564: GO 13600
13566: LD_INT 27
13568: DOUBLE
13569: EQUAL
13570: IFTRUE 13574
13572: GO 13599
13574: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13575: LD_ADDR_VAR 0 3
13579: PUSH
13580: LD_INT 35
13582: PPUSH
13583: LD_VAR 0 1
13587: PPUSH
13588: CALL_OW 321
13592: PUSH
13593: LD_INT 2
13595: EQUAL
13596: ST_TO_ADDR
13597: GO 13600
13599: POP
// end ;
13600: LD_VAR 0 3
13604: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13605: LD_INT 0
13607: PPUSH
13608: PPUSH
13609: PPUSH
13610: PPUSH
13611: PPUSH
13612: PPUSH
13613: PPUSH
13614: PPUSH
13615: PPUSH
13616: PPUSH
13617: PPUSH
// result := false ;
13618: LD_ADDR_VAR 0 6
13622: PUSH
13623: LD_INT 0
13625: ST_TO_ADDR
// if btype = b_depot then
13626: LD_VAR 0 2
13630: PUSH
13631: LD_INT 0
13633: EQUAL
13634: IFFALSE 13646
// begin result := true ;
13636: LD_ADDR_VAR 0 6
13640: PUSH
13641: LD_INT 1
13643: ST_TO_ADDR
// exit ;
13644: GO 14472
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13646: LD_VAR 0 1
13650: NOT
13651: PUSH
13652: LD_VAR 0 1
13656: PPUSH
13657: CALL_OW 266
13661: PUSH
13662: LD_INT 0
13664: PUSH
13665: LD_INT 1
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: IN
13672: NOT
13673: OR
13674: PUSH
13675: LD_VAR 0 2
13679: NOT
13680: OR
13681: PUSH
13682: LD_VAR 0 5
13686: PUSH
13687: LD_INT 0
13689: PUSH
13690: LD_INT 1
13692: PUSH
13693: LD_INT 2
13695: PUSH
13696: LD_INT 3
13698: PUSH
13699: LD_INT 4
13701: PUSH
13702: LD_INT 5
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: IN
13713: NOT
13714: OR
13715: PUSH
13716: LD_VAR 0 3
13720: PPUSH
13721: LD_VAR 0 4
13725: PPUSH
13726: CALL_OW 488
13730: NOT
13731: OR
13732: IFFALSE 13736
// exit ;
13734: GO 14472
// side := GetSide ( depot ) ;
13736: LD_ADDR_VAR 0 9
13740: PUSH
13741: LD_VAR 0 1
13745: PPUSH
13746: CALL_OW 255
13750: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13751: LD_VAR 0 9
13755: PPUSH
13756: LD_VAR 0 2
13760: PPUSH
13761: CALL 13229 0 2
13765: NOT
13766: IFFALSE 13770
// exit ;
13768: GO 14472
// pom := GetBase ( depot ) ;
13770: LD_ADDR_VAR 0 10
13774: PUSH
13775: LD_VAR 0 1
13779: PPUSH
13780: CALL_OW 274
13784: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13785: LD_ADDR_VAR 0 11
13789: PUSH
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 248
13804: PPUSH
13805: CALL_OW 450
13809: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13810: LD_VAR 0 10
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: CALL_OW 275
13822: PUSH
13823: LD_VAR 0 11
13827: PUSH
13828: LD_INT 1
13830: ARRAY
13831: GREATEREQUAL
13832: PUSH
13833: LD_VAR 0 10
13837: PPUSH
13838: LD_INT 2
13840: PPUSH
13841: CALL_OW 275
13845: PUSH
13846: LD_VAR 0 11
13850: PUSH
13851: LD_INT 2
13853: ARRAY
13854: GREATEREQUAL
13855: AND
13856: PUSH
13857: LD_VAR 0 10
13861: PPUSH
13862: LD_INT 3
13864: PPUSH
13865: CALL_OW 275
13869: PUSH
13870: LD_VAR 0 11
13874: PUSH
13875: LD_INT 3
13877: ARRAY
13878: GREATEREQUAL
13879: AND
13880: NOT
13881: IFFALSE 13885
// exit ;
13883: GO 14472
// if GetBType ( depot ) = b_depot then
13885: LD_VAR 0 1
13889: PPUSH
13890: CALL_OW 266
13894: PUSH
13895: LD_INT 0
13897: EQUAL
13898: IFFALSE 13910
// dist := 28 else
13900: LD_ADDR_VAR 0 14
13904: PUSH
13905: LD_INT 28
13907: ST_TO_ADDR
13908: GO 13918
// dist := 36 ;
13910: LD_ADDR_VAR 0 14
13914: PUSH
13915: LD_INT 36
13917: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13918: LD_VAR 0 1
13922: PPUSH
13923: LD_VAR 0 3
13927: PPUSH
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 297
13937: PUSH
13938: LD_VAR 0 14
13942: GREATER
13943: IFFALSE 13947
// exit ;
13945: GO 14472
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13947: LD_ADDR_VAR 0 12
13951: PUSH
13952: LD_VAR 0 2
13956: PPUSH
13957: LD_VAR 0 3
13961: PPUSH
13962: LD_VAR 0 4
13966: PPUSH
13967: LD_VAR 0 5
13971: PPUSH
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 248
13981: PPUSH
13982: LD_INT 0
13984: PPUSH
13985: CALL 14477 0 6
13989: ST_TO_ADDR
// if not hexes then
13990: LD_VAR 0 12
13994: NOT
13995: IFFALSE 13999
// exit ;
13997: GO 14472
// hex := GetHexInfo ( x , y ) ;
13999: LD_ADDR_VAR 0 15
14003: PUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: LD_VAR 0 4
14013: PPUSH
14014: CALL_OW 546
14018: ST_TO_ADDR
// if hex [ 1 ] then
14019: LD_VAR 0 15
14023: PUSH
14024: LD_INT 1
14026: ARRAY
14027: IFFALSE 14031
// exit ;
14029: GO 14472
// height := hex [ 2 ] ;
14031: LD_ADDR_VAR 0 13
14035: PUSH
14036: LD_VAR 0 15
14040: PUSH
14041: LD_INT 2
14043: ARRAY
14044: ST_TO_ADDR
// for i = 1 to hexes do
14045: LD_ADDR_VAR 0 7
14049: PUSH
14050: DOUBLE
14051: LD_INT 1
14053: DEC
14054: ST_TO_ADDR
14055: LD_VAR 0 12
14059: PUSH
14060: FOR_TO
14061: IFFALSE 14391
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14063: LD_VAR 0 12
14067: PUSH
14068: LD_VAR 0 7
14072: ARRAY
14073: PUSH
14074: LD_INT 1
14076: ARRAY
14077: PPUSH
14078: LD_VAR 0 12
14082: PUSH
14083: LD_VAR 0 7
14087: ARRAY
14088: PUSH
14089: LD_INT 2
14091: ARRAY
14092: PPUSH
14093: CALL_OW 488
14097: NOT
14098: PUSH
14099: LD_VAR 0 12
14103: PUSH
14104: LD_VAR 0 7
14108: ARRAY
14109: PUSH
14110: LD_INT 1
14112: ARRAY
14113: PPUSH
14114: LD_VAR 0 12
14118: PUSH
14119: LD_VAR 0 7
14123: ARRAY
14124: PUSH
14125: LD_INT 2
14127: ARRAY
14128: PPUSH
14129: CALL_OW 428
14133: PUSH
14134: LD_INT 0
14136: GREATER
14137: OR
14138: PUSH
14139: LD_VAR 0 12
14143: PUSH
14144: LD_VAR 0 7
14148: ARRAY
14149: PUSH
14150: LD_INT 1
14152: ARRAY
14153: PPUSH
14154: LD_VAR 0 12
14158: PUSH
14159: LD_VAR 0 7
14163: ARRAY
14164: PUSH
14165: LD_INT 2
14167: ARRAY
14168: PPUSH
14169: CALL_OW 351
14173: OR
14174: IFFALSE 14180
// exit ;
14176: POP
14177: POP
14178: GO 14472
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14180: LD_ADDR_VAR 0 8
14184: PUSH
14185: LD_VAR 0 12
14189: PUSH
14190: LD_VAR 0 7
14194: ARRAY
14195: PUSH
14196: LD_INT 1
14198: ARRAY
14199: PPUSH
14200: LD_VAR 0 12
14204: PUSH
14205: LD_VAR 0 7
14209: ARRAY
14210: PUSH
14211: LD_INT 2
14213: ARRAY
14214: PPUSH
14215: CALL_OW 546
14219: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14220: LD_VAR 0 8
14224: PUSH
14225: LD_INT 1
14227: ARRAY
14228: PUSH
14229: LD_VAR 0 8
14233: PUSH
14234: LD_INT 2
14236: ARRAY
14237: PUSH
14238: LD_VAR 0 13
14242: PUSH
14243: LD_INT 2
14245: PLUS
14246: GREATER
14247: OR
14248: PUSH
14249: LD_VAR 0 8
14253: PUSH
14254: LD_INT 2
14256: ARRAY
14257: PUSH
14258: LD_VAR 0 13
14262: PUSH
14263: LD_INT 2
14265: MINUS
14266: LESS
14267: OR
14268: PUSH
14269: LD_VAR 0 8
14273: PUSH
14274: LD_INT 3
14276: ARRAY
14277: PUSH
14278: LD_INT 0
14280: PUSH
14281: LD_INT 8
14283: PUSH
14284: LD_INT 9
14286: PUSH
14287: LD_INT 10
14289: PUSH
14290: LD_INT 11
14292: PUSH
14293: LD_INT 12
14295: PUSH
14296: LD_INT 13
14298: PUSH
14299: LD_INT 16
14301: PUSH
14302: LD_INT 17
14304: PUSH
14305: LD_INT 18
14307: PUSH
14308: LD_INT 19
14310: PUSH
14311: LD_INT 20
14313: PUSH
14314: LD_INT 21
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: IN
14332: NOT
14333: OR
14334: PUSH
14335: LD_VAR 0 8
14339: PUSH
14340: LD_INT 5
14342: ARRAY
14343: NOT
14344: OR
14345: PUSH
14346: LD_VAR 0 8
14350: PUSH
14351: LD_INT 6
14353: ARRAY
14354: PUSH
14355: LD_INT 1
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: LD_INT 7
14363: PUSH
14364: LD_INT 9
14366: PUSH
14367: LD_INT 10
14369: PUSH
14370: LD_INT 11
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: IN
14381: NOT
14382: OR
14383: IFFALSE 14389
// exit ;
14385: POP
14386: POP
14387: GO 14472
// end ;
14389: GO 14060
14391: POP
14392: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14393: LD_VAR 0 9
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: LD_VAR 0 4
14407: PPUSH
14408: LD_INT 20
14410: PPUSH
14411: CALL 6395 0 4
14415: PUSH
14416: LD_INT 4
14418: ARRAY
14419: IFFALSE 14423
// exit ;
14421: GO 14472
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14423: LD_VAR 0 2
14427: PUSH
14428: LD_INT 29
14430: PUSH
14431: LD_INT 30
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: IN
14438: PUSH
14439: LD_VAR 0 3
14443: PPUSH
14444: LD_VAR 0 4
14448: PPUSH
14449: LD_VAR 0 9
14453: PPUSH
14454: CALL_OW 440
14458: NOT
14459: AND
14460: IFFALSE 14464
// exit ;
14462: GO 14472
// result := true ;
14464: LD_ADDR_VAR 0 6
14468: PUSH
14469: LD_INT 1
14471: ST_TO_ADDR
// end ;
14472: LD_VAR 0 6
14476: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14477: LD_INT 0
14479: PPUSH
14480: PPUSH
14481: PPUSH
14482: PPUSH
14483: PPUSH
14484: PPUSH
14485: PPUSH
14486: PPUSH
14487: PPUSH
14488: PPUSH
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
14494: PPUSH
14495: PPUSH
14496: PPUSH
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
14501: PPUSH
14502: PPUSH
14503: PPUSH
14504: PPUSH
14505: PPUSH
14506: PPUSH
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
14517: PPUSH
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
14522: PPUSH
14523: PPUSH
14524: PPUSH
14525: PPUSH
14526: PPUSH
14527: PPUSH
14528: PPUSH
14529: PPUSH
14530: PPUSH
14531: PPUSH
14532: PPUSH
14533: PPUSH
14534: PPUSH
14535: PPUSH
14536: PPUSH
// result = [ ] ;
14537: LD_ADDR_VAR 0 7
14541: PUSH
14542: EMPTY
14543: ST_TO_ADDR
// temp_list = [ ] ;
14544: LD_ADDR_VAR 0 9
14548: PUSH
14549: EMPTY
14550: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14551: LD_VAR 0 4
14555: PUSH
14556: LD_INT 0
14558: PUSH
14559: LD_INT 1
14561: PUSH
14562: LD_INT 2
14564: PUSH
14565: LD_INT 3
14567: PUSH
14568: LD_INT 4
14570: PUSH
14571: LD_INT 5
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: IN
14582: NOT
14583: PUSH
14584: LD_VAR 0 1
14588: PUSH
14589: LD_INT 0
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: IN
14599: PUSH
14600: LD_VAR 0 5
14604: PUSH
14605: LD_INT 1
14607: PUSH
14608: LD_INT 2
14610: PUSH
14611: LD_INT 3
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: LIST
14618: IN
14619: NOT
14620: AND
14621: OR
14622: IFFALSE 14626
// exit ;
14624: GO 33017
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14626: LD_VAR 0 1
14630: PUSH
14631: LD_INT 6
14633: PUSH
14634: LD_INT 7
14636: PUSH
14637: LD_INT 8
14639: PUSH
14640: LD_INT 13
14642: PUSH
14643: LD_INT 12
14645: PUSH
14646: LD_INT 15
14648: PUSH
14649: LD_INT 11
14651: PUSH
14652: LD_INT 14
14654: PUSH
14655: LD_INT 10
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: IN
14669: IFFALSE 14679
// btype = b_lab ;
14671: LD_ADDR_VAR 0 1
14675: PUSH
14676: LD_INT 6
14678: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14679: LD_VAR 0 6
14683: PUSH
14684: LD_INT 0
14686: PUSH
14687: LD_INT 1
14689: PUSH
14690: LD_INT 2
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: IN
14698: NOT
14699: PUSH
14700: LD_VAR 0 1
14704: PUSH
14705: LD_INT 0
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 3
14716: PUSH
14717: LD_INT 6
14719: PUSH
14720: LD_INT 36
14722: PUSH
14723: LD_INT 4
14725: PUSH
14726: LD_INT 5
14728: PUSH
14729: LD_INT 31
14731: PUSH
14732: LD_INT 32
14734: PUSH
14735: LD_INT 33
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: IN
14751: NOT
14752: PUSH
14753: LD_VAR 0 6
14757: PUSH
14758: LD_INT 1
14760: EQUAL
14761: AND
14762: OR
14763: PUSH
14764: LD_VAR 0 1
14768: PUSH
14769: LD_INT 2
14771: PUSH
14772: LD_INT 3
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: IN
14779: NOT
14780: PUSH
14781: LD_VAR 0 6
14785: PUSH
14786: LD_INT 2
14788: EQUAL
14789: AND
14790: OR
14791: IFFALSE 14801
// mode = 0 ;
14793: LD_ADDR_VAR 0 6
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// case mode of 0 :
14801: LD_VAR 0 6
14805: PUSH
14806: LD_INT 0
14808: DOUBLE
14809: EQUAL
14810: IFTRUE 14814
14812: GO 26267
14814: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14815: LD_ADDR_VAR 0 11
14819: PUSH
14820: LD_INT 0
14822: PUSH
14823: LD_INT 0
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 0
14832: PUSH
14833: LD_INT 1
14835: NEG
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 1
14843: PUSH
14844: LD_INT 0
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 1
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 0
14863: PUSH
14864: LD_INT 1
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 1
14873: NEG
14874: PUSH
14875: LD_INT 0
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 1
14884: NEG
14885: PUSH
14886: LD_INT 1
14888: NEG
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 1
14896: NEG
14897: PUSH
14898: LD_INT 2
14900: NEG
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 0
14908: PUSH
14909: LD_INT 2
14911: NEG
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: LD_INT 1
14922: NEG
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 1
14930: PUSH
14931: LD_INT 2
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 0
14940: PUSH
14941: LD_INT 2
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 1
14950: NEG
14951: PUSH
14952: LD_INT 1
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: LD_INT 3
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 0
14971: PUSH
14972: LD_INT 3
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 1
14981: NEG
14982: PUSH
14983: LD_INT 2
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15008: LD_ADDR_VAR 0 12
15012: PUSH
15013: LD_INT 0
15015: PUSH
15016: LD_INT 0
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 0
15025: PUSH
15026: LD_INT 1
15028: NEG
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 1
15036: PUSH
15037: LD_INT 0
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 1
15046: PUSH
15047: LD_INT 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 0
15056: PUSH
15057: LD_INT 1
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 1
15066: NEG
15067: PUSH
15068: LD_INT 0
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 1
15077: NEG
15078: PUSH
15079: LD_INT 1
15081: NEG
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 1
15089: PUSH
15090: LD_INT 1
15092: NEG
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 2
15100: PUSH
15101: LD_INT 0
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 2
15110: PUSH
15111: LD_INT 1
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 1
15120: NEG
15121: PUSH
15122: LD_INT 1
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 2
15131: NEG
15132: PUSH
15133: LD_INT 0
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 2
15142: NEG
15143: PUSH
15144: LD_INT 1
15146: NEG
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 2
15154: NEG
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 3
15165: NEG
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 3
15176: NEG
15177: PUSH
15178: LD_INT 1
15180: NEG
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15204: LD_ADDR_VAR 0 13
15208: PUSH
15209: LD_INT 0
15211: PUSH
15212: LD_INT 0
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 0
15221: PUSH
15222: LD_INT 1
15224: NEG
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 1
15232: PUSH
15233: LD_INT 0
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 1
15242: PUSH
15243: LD_INT 1
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 0
15252: PUSH
15253: LD_INT 1
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 1
15262: NEG
15263: PUSH
15264: LD_INT 0
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 1
15273: NEG
15274: PUSH
15275: LD_INT 1
15277: NEG
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 1
15285: NEG
15286: PUSH
15287: LD_INT 2
15289: NEG
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 2
15297: PUSH
15298: LD_INT 1
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 2
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: LD_INT 2
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 2
15327: NEG
15328: PUSH
15329: LD_INT 1
15331: NEG
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 2
15339: NEG
15340: PUSH
15341: LD_INT 2
15343: NEG
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 2
15351: NEG
15352: PUSH
15353: LD_INT 3
15355: NEG
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 3
15363: NEG
15364: PUSH
15365: LD_INT 2
15367: NEG
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 3
15375: NEG
15376: PUSH
15377: LD_INT 3
15379: NEG
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15403: LD_ADDR_VAR 0 14
15407: PUSH
15408: LD_INT 0
15410: PUSH
15411: LD_INT 0
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 0
15420: PUSH
15421: LD_INT 1
15423: NEG
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 1
15431: PUSH
15432: LD_INT 0
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 1
15441: PUSH
15442: LD_INT 1
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 1
15461: NEG
15462: PUSH
15463: LD_INT 0
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 1
15472: NEG
15473: PUSH
15474: LD_INT 1
15476: NEG
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 1
15484: NEG
15485: PUSH
15486: LD_INT 2
15488: NEG
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 0
15496: PUSH
15497: LD_INT 2
15499: NEG
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 1
15507: PUSH
15508: LD_INT 1
15510: NEG
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 1
15518: PUSH
15519: LD_INT 2
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 0
15528: PUSH
15529: LD_INT 2
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 1
15538: NEG
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 1
15549: NEG
15550: PUSH
15551: LD_INT 3
15553: NEG
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 0
15561: PUSH
15562: LD_INT 3
15564: NEG
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 1
15572: PUSH
15573: LD_INT 2
15575: NEG
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15599: LD_ADDR_VAR 0 15
15603: PUSH
15604: LD_INT 0
15606: PUSH
15607: LD_INT 0
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 0
15616: PUSH
15617: LD_INT 1
15619: NEG
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: LD_INT 0
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 1
15637: PUSH
15638: LD_INT 1
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: LD_INT 0
15647: PUSH
15648: LD_INT 1
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 1
15657: NEG
15658: PUSH
15659: LD_INT 0
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 1
15668: NEG
15669: PUSH
15670: LD_INT 1
15672: NEG
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: LD_INT 1
15683: NEG
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 2
15691: PUSH
15692: LD_INT 0
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 1
15711: NEG
15712: PUSH
15713: LD_INT 1
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 2
15722: NEG
15723: PUSH
15724: LD_INT 0
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 2
15733: NEG
15734: PUSH
15735: LD_INT 1
15737: NEG
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 2
15745: PUSH
15746: LD_INT 1
15748: NEG
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 3
15756: PUSH
15757: LD_INT 0
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 3
15766: PUSH
15767: LD_INT 1
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15792: LD_ADDR_VAR 0 16
15796: PUSH
15797: LD_INT 0
15799: PUSH
15800: LD_INT 0
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 0
15809: PUSH
15810: LD_INT 1
15812: NEG
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 1
15820: PUSH
15821: LD_INT 0
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: LD_INT 1
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 0
15840: PUSH
15841: LD_INT 1
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 1
15850: NEG
15851: PUSH
15852: LD_INT 0
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 1
15861: NEG
15862: PUSH
15863: LD_INT 1
15865: NEG
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 1
15873: NEG
15874: PUSH
15875: LD_INT 2
15877: NEG
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 2
15885: PUSH
15886: LD_INT 1
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 2
15895: PUSH
15896: LD_INT 2
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 1
15905: PUSH
15906: LD_INT 2
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 2
15915: NEG
15916: PUSH
15917: LD_INT 1
15919: NEG
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 2
15927: NEG
15928: PUSH
15929: LD_INT 2
15931: NEG
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 3
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 3
15949: PUSH
15950: LD_INT 3
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: LD_INT 3
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15985: LD_ADDR_VAR 0 17
15989: PUSH
15990: LD_INT 0
15992: PUSH
15993: LD_INT 0
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 0
16002: PUSH
16003: LD_INT 1
16005: NEG
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: LD_INT 0
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: LD_INT 1
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 0
16033: PUSH
16034: LD_INT 1
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 1
16043: NEG
16044: PUSH
16045: LD_INT 0
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 1
16054: NEG
16055: PUSH
16056: LD_INT 1
16058: NEG
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 1
16066: NEG
16067: PUSH
16068: LD_INT 2
16070: NEG
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 0
16078: PUSH
16079: LD_INT 2
16081: NEG
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 1
16089: PUSH
16090: LD_INT 1
16092: NEG
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 2
16100: PUSH
16101: LD_INT 0
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 2
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: LD_INT 2
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: LD_INT 2
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 0
16140: PUSH
16141: LD_INT 2
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 1
16150: NEG
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 2
16161: NEG
16162: PUSH
16163: LD_INT 0
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 2
16172: NEG
16173: PUSH
16174: LD_INT 1
16176: NEG
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 2
16184: NEG
16185: PUSH
16186: LD_INT 2
16188: NEG
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16215: LD_ADDR_VAR 0 18
16219: PUSH
16220: LD_INT 0
16222: PUSH
16223: LD_INT 0
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 0
16232: PUSH
16233: LD_INT 1
16235: NEG
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: LD_INT 0
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 0
16263: PUSH
16264: LD_INT 1
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 1
16273: NEG
16274: PUSH
16275: LD_INT 0
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 1
16284: NEG
16285: PUSH
16286: LD_INT 1
16288: NEG
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 1
16296: NEG
16297: PUSH
16298: LD_INT 2
16300: NEG
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 0
16308: PUSH
16309: LD_INT 2
16311: NEG
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 1
16319: PUSH
16320: LD_INT 1
16322: NEG
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 2
16330: PUSH
16331: LD_INT 0
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 1
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 2
16350: PUSH
16351: LD_INT 2
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 1
16360: PUSH
16361: LD_INT 2
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 0
16370: PUSH
16371: LD_INT 2
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 1
16380: NEG
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 2
16391: NEG
16392: PUSH
16393: LD_INT 0
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 2
16402: NEG
16403: PUSH
16404: LD_INT 1
16406: NEG
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 2
16414: NEG
16415: PUSH
16416: LD_INT 2
16418: NEG
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16445: LD_ADDR_VAR 0 19
16449: PUSH
16450: LD_INT 0
16452: PUSH
16453: LD_INT 0
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 0
16462: PUSH
16463: LD_INT 1
16465: NEG
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 1
16473: PUSH
16474: LD_INT 0
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 1
16483: PUSH
16484: LD_INT 1
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 0
16493: PUSH
16494: LD_INT 1
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 1
16503: NEG
16504: PUSH
16505: LD_INT 0
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 1
16514: NEG
16515: PUSH
16516: LD_INT 1
16518: NEG
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 1
16526: NEG
16527: PUSH
16528: LD_INT 2
16530: NEG
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 0
16538: PUSH
16539: LD_INT 2
16541: NEG
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: LD_INT 1
16552: NEG
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 2
16560: PUSH
16561: LD_INT 0
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: LD_INT 2
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 2
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 0
16600: PUSH
16601: LD_INT 2
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: NEG
16611: PUSH
16612: LD_INT 1
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 2
16621: NEG
16622: PUSH
16623: LD_INT 0
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 2
16632: NEG
16633: PUSH
16634: LD_INT 1
16636: NEG
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: NEG
16645: PUSH
16646: LD_INT 2
16648: NEG
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16675: LD_ADDR_VAR 0 20
16679: PUSH
16680: LD_INT 0
16682: PUSH
16683: LD_INT 0
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 0
16692: PUSH
16693: LD_INT 1
16695: NEG
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 1
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 0
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 1
16733: NEG
16734: PUSH
16735: LD_INT 0
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 1
16744: NEG
16745: PUSH
16746: LD_INT 1
16748: NEG
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 1
16756: NEG
16757: PUSH
16758: LD_INT 2
16760: NEG
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 0
16768: PUSH
16769: LD_INT 2
16771: NEG
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 1
16779: PUSH
16780: LD_INT 1
16782: NEG
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: LD_INT 0
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 2
16800: PUSH
16801: LD_INT 1
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 2
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 0
16830: PUSH
16831: LD_INT 2
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 1
16840: NEG
16841: PUSH
16842: LD_INT 1
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 2
16851: NEG
16852: PUSH
16853: LD_INT 0
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 2
16862: NEG
16863: PUSH
16864: LD_INT 1
16866: NEG
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 2
16874: NEG
16875: PUSH
16876: LD_INT 2
16878: NEG
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16905: LD_ADDR_VAR 0 21
16909: PUSH
16910: LD_INT 0
16912: PUSH
16913: LD_INT 0
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: LD_INT 1
16925: NEG
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 1
16933: PUSH
16934: LD_INT 0
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 0
16953: PUSH
16954: LD_INT 1
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 1
16963: NEG
16964: PUSH
16965: LD_INT 0
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 1
16974: NEG
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 1
16986: NEG
16987: PUSH
16988: LD_INT 2
16990: NEG
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 0
16998: PUSH
16999: LD_INT 2
17001: NEG
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 1
17009: PUSH
17010: LD_INT 1
17012: NEG
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 2
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 2
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: LD_INT 2
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 0
17060: PUSH
17061: LD_INT 2
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: NEG
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 2
17081: NEG
17082: PUSH
17083: LD_INT 0
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 2
17092: NEG
17093: PUSH
17094: LD_INT 1
17096: NEG
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 2
17104: NEG
17105: PUSH
17106: LD_INT 2
17108: NEG
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17135: LD_ADDR_VAR 0 22
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: LD_INT 0
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 0
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 0
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 1
17193: NEG
17194: PUSH
17195: LD_INT 0
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 1
17204: NEG
17205: PUSH
17206: LD_INT 1
17208: NEG
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 1
17216: NEG
17217: PUSH
17218: LD_INT 2
17220: NEG
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 0
17228: PUSH
17229: LD_INT 2
17231: NEG
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: LD_INT 1
17242: NEG
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: LD_INT 0
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: LD_INT 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: LD_INT 2
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: LD_INT 1
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 2
17311: NEG
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 2
17322: NEG
17323: PUSH
17324: LD_INT 1
17326: NEG
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 2
17334: NEG
17335: PUSH
17336: LD_INT 2
17338: NEG
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17365: LD_ADDR_VAR 0 23
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 0
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 1
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 0
17413: PUSH
17414: LD_INT 1
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 1
17423: NEG
17424: PUSH
17425: LD_INT 0
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 1
17434: NEG
17435: PUSH
17436: LD_INT 1
17438: NEG
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 1
17446: NEG
17447: PUSH
17448: LD_INT 2
17450: NEG
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 0
17458: PUSH
17459: LD_INT 2
17461: NEG
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 1
17469: PUSH
17470: LD_INT 1
17472: NEG
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 2
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 2
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 2
17500: PUSH
17501: LD_INT 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: LD_INT 2
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: LD_INT 2
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 2
17541: NEG
17542: PUSH
17543: LD_INT 0
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 2
17552: NEG
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 2
17564: NEG
17565: PUSH
17566: LD_INT 2
17568: NEG
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 2
17576: NEG
17577: PUSH
17578: LD_INT 3
17580: NEG
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 1
17588: NEG
17589: PUSH
17590: LD_INT 3
17592: NEG
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 2
17603: NEG
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: PUSH
17612: LD_INT 1
17614: NEG
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17645: LD_ADDR_VAR 0 24
17649: PUSH
17650: LD_INT 0
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: LD_INT 1
17665: NEG
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 1
17673: PUSH
17674: LD_INT 0
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 1
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 0
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 1
17703: NEG
17704: PUSH
17705: LD_INT 0
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 1
17714: NEG
17715: PUSH
17716: LD_INT 1
17718: NEG
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 1
17726: NEG
17727: PUSH
17728: LD_INT 2
17730: NEG
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: LD_INT 2
17741: NEG
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: LD_INT 1
17752: NEG
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 2
17760: PUSH
17761: LD_INT 0
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 2
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 2
17780: PUSH
17781: LD_INT 2
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: LD_INT 2
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: LD_INT 2
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: NEG
17811: PUSH
17812: LD_INT 1
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 2
17821: NEG
17822: PUSH
17823: LD_INT 0
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 2
17832: NEG
17833: PUSH
17834: LD_INT 1
17836: NEG
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 2
17844: NEG
17845: PUSH
17846: LD_INT 2
17848: NEG
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 2
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 1
17870: NEG
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 3
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 3
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17921: LD_ADDR_VAR 0 25
17925: PUSH
17926: LD_INT 0
17928: PUSH
17929: LD_INT 0
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: LD_INT 1
17941: NEG
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: LD_INT 0
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 1
17979: NEG
17980: PUSH
17981: LD_INT 0
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 1
17990: NEG
17991: PUSH
17992: LD_INT 1
17994: NEG
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 1
18002: NEG
18003: PUSH
18004: LD_INT 2
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: LD_INT 2
18017: NEG
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: LD_INT 1
18028: NEG
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 2
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: LD_INT 2
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: LD_INT 2
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: NEG
18098: PUSH
18099: LD_INT 0
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 2
18108: NEG
18109: PUSH
18110: LD_INT 1
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 2
18120: NEG
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 3
18142: PUSH
18143: LD_INT 2
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 2
18152: PUSH
18153: LD_INT 3
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: LD_INT 3
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18195: LD_ADDR_VAR 0 26
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: LD_INT 1
18215: NEG
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 1
18223: PUSH
18224: LD_INT 0
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 1
18233: PUSH
18234: LD_INT 1
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: LD_INT 1
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 1
18253: NEG
18254: PUSH
18255: LD_INT 0
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 1
18264: NEG
18265: PUSH
18266: LD_INT 1
18268: NEG
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: NEG
18277: PUSH
18278: LD_INT 2
18280: NEG
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 0
18288: PUSH
18289: LD_INT 2
18291: NEG
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 1
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 2
18330: PUSH
18331: LD_INT 2
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: LD_INT 2
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: LD_INT 2
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: NEG
18372: PUSH
18373: LD_INT 0
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 2
18382: NEG
18383: PUSH
18384: LD_INT 1
18386: NEG
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 2
18394: NEG
18395: PUSH
18396: LD_INT 2
18398: NEG
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: LD_INT 3
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 1
18426: NEG
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 2
18437: NEG
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18471: LD_ADDR_VAR 0 27
18475: PUSH
18476: LD_INT 0
18478: PUSH
18479: LD_INT 0
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: LD_INT 1
18491: NEG
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 1
18499: PUSH
18500: LD_INT 0
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: NEG
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 1
18540: NEG
18541: PUSH
18542: LD_INT 1
18544: NEG
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PUSH
18554: LD_INT 2
18556: NEG
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: LD_INT 2
18567: NEG
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: LD_INT 1
18578: NEG
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 2
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 2
18606: PUSH
18607: LD_INT 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: LD_INT 2
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: LD_INT 2
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 2
18647: NEG
18648: PUSH
18649: LD_INT 0
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 2
18658: NEG
18659: PUSH
18660: LD_INT 1
18662: NEG
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 2
18670: NEG
18671: PUSH
18672: LD_INT 2
18674: NEG
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 2
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 3
18704: NEG
18705: PUSH
18706: LD_INT 1
18708: NEG
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 3
18716: NEG
18717: PUSH
18718: LD_INT 2
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18751: LD_ADDR_VAR 0 28
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: LD_INT 0
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: LD_INT 1
18771: NEG
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: NEG
18821: PUSH
18822: LD_INT 1
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: LD_INT 2
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: LD_INT 2
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: LD_INT 1
18858: NEG
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 2
18866: PUSH
18867: LD_INT 0
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: NEG
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 2
18938: NEG
18939: PUSH
18940: LD_INT 1
18942: NEG
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: LD_INT 2
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 2
18962: NEG
18963: PUSH
18964: LD_INT 3
18966: NEG
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: LD_INT 3
18978: NEG
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 3
18986: NEG
18987: PUSH
18988: LD_INT 1
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 3
18998: NEG
18999: PUSH
19000: LD_INT 2
19002: NEG
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19033: LD_ADDR_VAR 0 29
19037: PUSH
19038: LD_INT 0
19040: PUSH
19041: LD_INT 0
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: LD_INT 1
19106: NEG
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: NEG
19115: PUSH
19116: LD_INT 2
19118: NEG
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: LD_INT 2
19129: NEG
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 0
19178: PUSH
19179: LD_INT 2
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: NEG
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: NEG
19200: PUSH
19201: LD_INT 1
19203: NEG
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 2
19211: NEG
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: NEG
19224: PUSH
19225: LD_INT 3
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: LD_INT 1
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 3
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 1
19266: NEG
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 3
19277: NEG
19278: PUSH
19279: LD_INT 2
19281: NEG
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19312: LD_ADDR_VAR 0 30
19316: PUSH
19317: LD_INT 0
19319: PUSH
19320: LD_INT 0
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 1
19381: NEG
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: LD_INT 2
19397: NEG
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 2
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 2
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 2
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: PUSH
19458: LD_INT 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 2
19478: NEG
19479: PUSH
19480: LD_INT 0
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 2
19489: NEG
19490: PUSH
19491: LD_INT 1
19493: NEG
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: NEG
19502: PUSH
19503: LD_INT 3
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: LD_INT 2
19516: NEG
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 3
19524: PUSH
19525: LD_INT 2
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 3
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 3
19555: NEG
19556: PUSH
19557: LD_INT 1
19559: NEG
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19590: LD_ADDR_VAR 0 31
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: LD_INT 1
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: LD_INT 1
19663: NEG
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 1
19671: NEG
19672: PUSH
19673: LD_INT 2
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: LD_INT 1
19686: NEG
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: LD_INT 0
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: LD_INT 2
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: LD_INT 2
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: NEG
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: NEG
19756: PUSH
19757: LD_INT 1
19759: NEG
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: NEG
19768: PUSH
19769: LD_INT 2
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 2
19779: NEG
19780: PUSH
19781: LD_INT 3
19783: NEG
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 3
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: LD_INT 3
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 1
19822: NEG
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 3
19833: NEG
19834: PUSH
19835: LD_INT 2
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19868: LD_ADDR_VAR 0 32
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 0
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: NEG
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: NEG
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: LD_INT 2
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: LD_INT 2
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 1
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 2
20034: NEG
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 2
20045: NEG
20046: PUSH
20047: LD_INT 1
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: LD_INT 3
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: LD_INT 2
20072: NEG
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 3
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: LD_INT 3
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 3
20111: NEG
20112: PUSH
20113: LD_INT 1
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20146: LD_ADDR_VAR 0 33
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: LD_INT 1
20166: NEG
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 1
20290: NEG
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 2
20301: NEG
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 2
20312: NEG
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 2
20324: NEG
20325: PUSH
20326: LD_INT 2
20328: NEG
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 2
20336: NEG
20337: PUSH
20338: LD_INT 3
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 2
20348: PUSH
20349: LD_INT 1
20351: NEG
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 3
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: LD_INT 3
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 1
20379: NEG
20380: PUSH
20381: LD_INT 2
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 3
20390: NEG
20391: PUSH
20392: LD_INT 2
20394: NEG
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20425: LD_ADDR_VAR 0 34
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: LD_INT 1
20445: NEG
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 1
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 0
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 1
20483: NEG
20484: PUSH
20485: LD_INT 0
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: LD_INT 1
20498: NEG
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 1
20506: NEG
20507: PUSH
20508: LD_INT 2
20510: NEG
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: LD_INT 2
20521: NEG
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: LD_INT 1
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 2
20550: PUSH
20551: LD_INT 2
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 2
20592: NEG
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 2
20604: NEG
20605: PUSH
20606: LD_INT 2
20608: NEG
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PUSH
20618: LD_INT 3
20620: NEG
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 2
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 3
20639: PUSH
20640: LD_INT 2
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 2
20649: PUSH
20650: LD_INT 3
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 2
20659: NEG
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 3
20670: NEG
20671: PUSH
20672: LD_INT 1
20674: NEG
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20705: LD_ADDR_VAR 0 35
20709: PUSH
20710: LD_INT 0
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: PUSH
20734: LD_INT 0
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: LD_INT 1
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 0
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 1
20763: NEG
20764: PUSH
20765: LD_INT 0
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: NEG
20775: PUSH
20776: LD_INT 1
20778: NEG
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 2
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 2
20796: NEG
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20817: LD_ADDR_VAR 0 36
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: LD_INT 0
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: NEG
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 1
20886: NEG
20887: PUSH
20888: LD_INT 1
20890: NEG
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: LD_INT 2
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: LD_INT 2
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20929: LD_ADDR_VAR 0 37
20933: PUSH
20934: LD_INT 0
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: LD_INT 1
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: LD_INT 1
21013: NEG
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21041: LD_ADDR_VAR 0 38
21045: PUSH
21046: LD_INT 0
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 1
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 1
21079: PUSH
21080: LD_INT 1
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 0
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 2
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 2
21132: NEG
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21153: LD_ADDR_VAR 0 39
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 1
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: LD_INT 1
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: LD_INT 1
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: LD_INT 1
21226: NEG
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: NEG
21235: PUSH
21236: LD_INT 2
21238: NEG
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: LD_INT 2
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21265: LD_ADDR_VAR 0 40
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: NEG
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21377: LD_ADDR_VAR 0 41
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 1
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 1
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: LD_INT 1
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: NEG
21459: PUSH
21460: LD_INT 2
21462: NEG
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: LD_INT 2
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 1
21521: NEG
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 2
21532: NEG
21533: PUSH
21534: LD_INT 0
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 2
21543: NEG
21544: PUSH
21545: LD_INT 1
21547: NEG
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 2
21555: NEG
21556: PUSH
21557: LD_INT 2
21559: NEG
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 2
21567: NEG
21568: PUSH
21569: LD_INT 3
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 3
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 3
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 3
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: PUSH
21631: LD_INT 3
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 2
21640: NEG
21641: PUSH
21642: LD_INT 1
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 3
21651: NEG
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 3
21662: NEG
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 3
21674: NEG
21675: PUSH
21676: LD_INT 2
21678: NEG
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 3
21686: NEG
21687: PUSH
21688: LD_INT 3
21690: NEG
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21727: LD_ADDR_VAR 0 42
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: LD_INT 0
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 1
21785: NEG
21786: PUSH
21787: LD_INT 0
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 1
21796: NEG
21797: PUSH
21798: LD_INT 1
21800: NEG
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 1
21808: NEG
21809: PUSH
21810: LD_INT 2
21812: NEG
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 0
21820: PUSH
21821: LD_INT 2
21823: NEG
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: LD_INT 1
21834: NEG
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 2
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: LD_INT 2
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: LD_INT 2
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 1
21882: NEG
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 2
21893: NEG
21894: PUSH
21895: LD_INT 1
21897: NEG
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 2
21905: NEG
21906: PUSH
21907: LD_INT 2
21909: NEG
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 2
21917: NEG
21918: PUSH
21919: LD_INT 3
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: NEG
21930: PUSH
21931: LD_INT 3
21933: NEG
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: LD_INT 3
21944: NEG
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 1
21952: PUSH
21953: LD_INT 2
21955: NEG
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 3
21963: PUSH
21964: LD_INT 2
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 3
21973: PUSH
21974: LD_INT 3
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: LD_INT 3
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: LD_INT 3
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: LD_INT 3
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 3
22024: NEG
22025: PUSH
22026: LD_INT 2
22028: NEG
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 3
22036: NEG
22037: PUSH
22038: LD_INT 3
22040: NEG
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22077: LD_ADDR_VAR 0 43
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 0
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 1
22135: NEG
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: NEG
22159: PUSH
22160: LD_INT 2
22162: NEG
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 0
22170: PUSH
22171: LD_INT 2
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 2
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 1
22232: NEG
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 2
22243: NEG
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 2
22254: NEG
22255: PUSH
22256: LD_INT 1
22258: NEG
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: LD_INT 3
22270: NEG
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: LD_INT 3
22281: NEG
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 1
22289: PUSH
22290: LD_INT 2
22292: NEG
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 1
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 3
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 3
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 0
22341: PUSH
22342: LD_INT 3
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: NEG
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: NEG
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 3
22373: NEG
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 3
22384: NEG
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22425: LD_ADDR_VAR 0 44
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 0
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: NEG
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: NEG
22507: PUSH
22508: LD_INT 2
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 1
22521: NEG
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 0
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: LD_INT 2
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: NEG
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 2
22591: NEG
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 2
22603: NEG
22604: PUSH
22605: LD_INT 2
22607: NEG
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: NEG
22616: PUSH
22617: LD_INT 3
22619: NEG
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 3
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 3
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 3
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 2
22688: NEG
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 3
22699: NEG
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 3
22710: NEG
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 3
22722: NEG
22723: PUSH
22724: LD_INT 2
22726: NEG
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 3
22734: NEG
22735: PUSH
22736: LD_INT 3
22738: NEG
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22775: LD_ADDR_VAR 0 45
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: NEG
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: LD_INT 1
22848: NEG
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: LD_INT 2
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: LD_INT 2
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 1
22882: NEG
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: LD_INT 2
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: NEG
22931: PUSH
22932: LD_INT 1
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: NEG
22942: PUSH
22943: LD_INT 1
22945: NEG
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 2
22953: NEG
22954: PUSH
22955: LD_INT 2
22957: NEG
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 2
22965: NEG
22966: PUSH
22967: LD_INT 3
22969: NEG
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 3
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: LD_INT 3
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 3
23011: PUSH
23012: LD_INT 2
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 3
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: LD_INT 3
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 3
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 3
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: LD_INT 2
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 3
23072: NEG
23073: PUSH
23074: LD_INT 2
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 3
23084: NEG
23085: PUSH
23086: LD_INT 3
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23125: LD_ADDR_VAR 0 46
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: LD_INT 0
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: LD_INT 1
23145: NEG
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: LD_INT 1
23198: NEG
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 1
23206: NEG
23207: PUSH
23208: LD_INT 2
23210: NEG
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: LD_INT 2
23221: NEG
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: LD_INT 0
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 2
23291: NEG
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: NEG
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: NEG
23315: PUSH
23316: LD_INT 3
23318: NEG
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: LD_INT 3
23329: NEG
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: LD_INT 2
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 1
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 3
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 3
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 1
23379: PUSH
23380: LD_INT 3
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: LD_INT 3
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: NEG
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 2
23410: NEG
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 3
23421: NEG
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 3
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23473: LD_ADDR_VAR 0 47
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 1
23501: PUSH
23502: LD_INT 0
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: NEG
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: NEG
23555: PUSH
23556: LD_INT 2
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 2
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: NEG
23589: PUSH
23590: LD_INT 1
23592: NEG
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 2
23600: NEG
23601: PUSH
23602: LD_INT 2
23604: NEG
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23624: LD_ADDR_VAR 0 48
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: LD_INT 1
23644: NEG
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 1
23693: NEG
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 1
23705: NEG
23706: PUSH
23707: LD_INT 2
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: LD_INT 2
23720: NEG
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 2
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23771: LD_ADDR_VAR 0 49
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 0
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: PUSH
23831: LD_INT 0
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 2
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: LD_INT 2
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23915: LD_ADDR_VAR 0 50
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 1
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 2
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 2
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24059: LD_ADDR_VAR 0 51
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: NEG
24172: PUSH
24173: LD_INT 0
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 2
24182: NEG
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24206: LD_ADDR_VAR 0 52
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 1
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: LD_INT 2
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 2
24310: NEG
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 2
24321: NEG
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 2
24333: NEG
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24357: LD_ADDR_VAR 0 53
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: NEG
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: LD_INT 2
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 2
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 2
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 2
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: LD_INT 2
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: NEG
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 2
24544: NEG
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: LD_INT 2
24560: NEG
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24587: LD_ADDR_VAR 0 54
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: LD_INT 0
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: NEG
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: LD_INT 2
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: LD_INT 2
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 2
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: LD_INT 2
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 2
24763: NEG
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 2
24774: NEG
24775: PUSH
24776: LD_INT 1
24778: NEG
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 2
24786: NEG
24787: PUSH
24788: LD_INT 2
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24817: LD_ADDR_VAR 0 55
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: LD_INT 1
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: LD_INT 2
24902: NEG
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: LD_INT 2
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 2
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 2
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: NEG
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: NEG
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 2
25004: NEG
25005: PUSH
25006: LD_INT 1
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 2
25016: NEG
25017: PUSH
25018: LD_INT 2
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25047: LD_ADDR_VAR 0 56
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: LD_INT 2
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: LD_INT 2
25143: NEG
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: LD_INT 1
25154: NEG
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 2
25172: PUSH
25173: LD_INT 1
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 2
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 1
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 2
25223: NEG
25224: PUSH
25225: LD_INT 0
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 2
25234: NEG
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: LD_INT 2
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25277: LD_ADDR_VAR 0 57
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 0
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: NEG
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: LD_INT 2
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: LD_INT 2
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: LD_INT 1
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 2
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 2
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 2
25453: NEG
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 2
25464: NEG
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 2
25476: NEG
25477: PUSH
25478: LD_INT 2
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25507: LD_ADDR_VAR 0 58
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 0
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: NEG
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 2
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 2
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: NEG
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 2
25694: NEG
25695: PUSH
25696: LD_INT 1
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25737: LD_ADDR_VAR 0 59
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25825: LD_ADDR_VAR 0 60
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25913: LD_ADDR_VAR 0 61
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26001: LD_ADDR_VAR 0 62
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26089: LD_ADDR_VAR 0 63
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 1
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26177: LD_ADDR_VAR 0 64
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: ST_TO_ADDR
// end ; 1 :
26265: GO 32162
26267: LD_INT 1
26269: DOUBLE
26270: EQUAL
26271: IFTRUE 26275
26273: GO 28898
26275: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26276: LD_ADDR_VAR 0 11
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: LD_INT 3
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 3
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26320: LD_ADDR_VAR 0 12
26324: PUSH
26325: LD_INT 2
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 3
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 3
26348: PUSH
26349: LD_INT 1
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26361: LD_ADDR_VAR 0 13
26365: PUSH
26366: LD_INT 3
26368: PUSH
26369: LD_INT 2
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 3
26378: PUSH
26379: LD_INT 3
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: LD_INT 3
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26401: LD_ADDR_VAR 0 14
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: LD_INT 3
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: LD_INT 3
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 1
26428: NEG
26429: PUSH
26430: LD_INT 2
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26442: LD_ADDR_VAR 0 15
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 3
26460: NEG
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 3
26471: NEG
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26486: LD_ADDR_VAR 0 16
26490: PUSH
26491: LD_INT 2
26493: NEG
26494: PUSH
26495: LD_INT 3
26497: NEG
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 3
26505: NEG
26506: PUSH
26507: LD_INT 2
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 3
26517: NEG
26518: PUSH
26519: LD_INT 3
26521: NEG
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26532: LD_ADDR_VAR 0 17
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 3
26543: NEG
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 3
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 2
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26576: LD_ADDR_VAR 0 18
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 3
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 3
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: LIST
26616: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26617: LD_ADDR_VAR 0 19
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 3
26634: PUSH
26635: LD_INT 3
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 2
26644: PUSH
26645: LD_INT 3
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26657: LD_ADDR_VAR 0 20
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: LD_INT 3
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 3
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: LIST
26697: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26698: LD_ADDR_VAR 0 21
26702: PUSH
26703: LD_INT 2
26705: NEG
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 3
26716: NEG
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 3
26727: NEG
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: LIST
26741: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26742: LD_ADDR_VAR 0 22
26746: PUSH
26747: LD_INT 2
26749: NEG
26750: PUSH
26751: LD_INT 3
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 3
26761: NEG
26762: PUSH
26763: LD_INT 2
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 3
26773: NEG
26774: PUSH
26775: LD_INT 3
26777: NEG
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: LIST
26787: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26788: LD_ADDR_VAR 0 23
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: LD_INT 3
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: LD_INT 4
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: LD_INT 3
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26832: LD_ADDR_VAR 0 24
26836: PUSH
26837: LD_INT 3
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 3
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 4
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: LIST
26872: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26873: LD_ADDR_VAR 0 25
26877: PUSH
26878: LD_INT 3
26880: PUSH
26881: LD_INT 3
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 4
26890: PUSH
26891: LD_INT 3
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: LD_INT 4
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26913: LD_ADDR_VAR 0 26
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 3
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: PUSH
26931: LD_INT 4
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: LD_INT 3
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26954: LD_ADDR_VAR 0 27
26958: PUSH
26959: LD_INT 3
26961: NEG
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 3
26972: NEG
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 4
26983: NEG
26984: PUSH
26985: LD_INT 1
26987: NEG
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26998: LD_ADDR_VAR 0 28
27002: PUSH
27003: LD_INT 3
27005: NEG
27006: PUSH
27007: LD_INT 3
27009: NEG
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 3
27017: NEG
27018: PUSH
27019: LD_INT 4
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 4
27029: NEG
27030: PUSH
27031: LD_INT 3
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27044: LD_ADDR_VAR 0 29
27048: PUSH
27049: LD_INT 1
27051: NEG
27052: PUSH
27053: LD_INT 3
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: LD_INT 3
27066: NEG
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: LD_INT 4
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 4
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 3
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: LD_INT 5
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: LD_INT 5
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: LD_INT 4
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 6
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: LD_INT 6
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: LD_INT 5
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27199: LD_ADDR_VAR 0 30
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 3
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 3
27237: PUSH
27238: LD_INT 1
27240: NEG
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 4
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 4
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 4
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 5
27279: PUSH
27280: LD_INT 0
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 5
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 5
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 6
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 6
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27342: LD_ADDR_VAR 0 31
27346: PUSH
27347: LD_INT 3
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 3
27359: PUSH
27360: LD_INT 3
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: LD_INT 3
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 4
27379: PUSH
27380: LD_INT 3
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 4
27389: PUSH
27390: LD_INT 4
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 3
27399: PUSH
27400: LD_INT 4
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 5
27409: PUSH
27410: LD_INT 4
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 5
27419: PUSH
27420: LD_INT 5
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 4
27429: PUSH
27430: LD_INT 5
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 6
27439: PUSH
27440: LD_INT 5
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 6
27449: PUSH
27450: LD_INT 6
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 5
27459: PUSH
27460: LD_INT 6
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27481: LD_ADDR_VAR 0 32
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 3
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: LD_INT 3
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 2
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: LD_INT 4
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: LD_INT 4
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: LD_INT 3
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: LD_INT 5
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 5
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: LD_INT 4
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 6
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 6
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: LD_INT 5
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27624: LD_ADDR_VAR 0 33
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 3
27642: NEG
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 3
27653: NEG
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 3
27665: NEG
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 4
27676: NEG
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 4
27687: NEG
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 4
27699: NEG
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 5
27710: NEG
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 5
27721: NEG
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 5
27733: NEG
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 6
27744: NEG
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 6
27755: NEG
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27779: LD_ADDR_VAR 0 34
27783: PUSH
27784: LD_INT 2
27786: NEG
27787: PUSH
27788: LD_INT 3
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 3
27798: NEG
27799: PUSH
27800: LD_INT 2
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 3
27810: NEG
27811: PUSH
27812: LD_INT 3
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 3
27822: NEG
27823: PUSH
27824: LD_INT 4
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 4
27834: NEG
27835: PUSH
27836: LD_INT 3
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 4
27846: NEG
27847: PUSH
27848: LD_INT 4
27850: NEG
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 4
27858: NEG
27859: PUSH
27860: LD_INT 5
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 5
27870: NEG
27871: PUSH
27872: LD_INT 4
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 5
27882: NEG
27883: PUSH
27884: LD_INT 5
27886: NEG
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 5
27894: NEG
27895: PUSH
27896: LD_INT 6
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 6
27906: NEG
27907: PUSH
27908: LD_INT 5
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 6
27918: NEG
27919: PUSH
27920: LD_INT 6
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27942: LD_ADDR_VAR 0 41
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: LD_INT 2
27952: NEG
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 3
27964: NEG
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27986: LD_ADDR_VAR 0 42
27990: PUSH
27991: LD_INT 2
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 3
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28027: LD_ADDR_VAR 0 43
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 3
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 2
28054: PUSH
28055: LD_INT 3
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: LIST
28066: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28067: LD_ADDR_VAR 0 44
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: LD_INT 3
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: LIST
28107: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28108: LD_ADDR_VAR 0 45
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 3
28137: NEG
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28152: LD_ADDR_VAR 0 46
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: LD_INT 2
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 2
28171: NEG
28172: PUSH
28173: LD_INT 3
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 3
28183: NEG
28184: PUSH
28185: LD_INT 2
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: LIST
28197: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28198: LD_ADDR_VAR 0 47
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: LD_INT 3
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 1
28217: NEG
28218: PUSH
28219: LD_INT 3
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28231: LD_ADDR_VAR 0 48
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: LD_INT 2
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28262: LD_ADDR_VAR 0 49
28266: PUSH
28267: LD_INT 3
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 3
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28291: LD_ADDR_VAR 0 50
28295: PUSH
28296: LD_INT 2
28298: PUSH
28299: LD_INT 3
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: LD_INT 3
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28320: LD_ADDR_VAR 0 51
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 2
28338: NEG
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28351: LD_ADDR_VAR 0 52
28355: PUSH
28356: LD_INT 3
28358: NEG
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 3
28370: NEG
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28384: LD_ADDR_VAR 0 53
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 3
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 3
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 2
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: LIST
28427: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28428: LD_ADDR_VAR 0 54
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 3
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 3
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28469: LD_ADDR_VAR 0 55
28473: PUSH
28474: LD_INT 3
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 3
28486: PUSH
28487: LD_INT 3
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: LIST
28508: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28509: LD_ADDR_VAR 0 56
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: LD_INT 3
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: LD_INT 3
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 1
28536: NEG
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28550: LD_ADDR_VAR 0 57
28554: PUSH
28555: LD_INT 2
28557: NEG
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 3
28568: NEG
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 3
28579: NEG
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28594: LD_ADDR_VAR 0 58
28598: PUSH
28599: LD_INT 2
28601: NEG
28602: PUSH
28603: LD_INT 3
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 3
28613: NEG
28614: PUSH
28615: LD_INT 2
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 3
28625: NEG
28626: PUSH
28627: LD_INT 3
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28640: LD_ADDR_VAR 0 59
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: LD_INT 2
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: LIST
28683: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28684: LD_ADDR_VAR 0 60
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28725: LD_ADDR_VAR 0 61
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 2
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: LD_INT 2
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28765: LD_ADDR_VAR 0 62
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: LIST
28805: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28806: LD_ADDR_VAR 0 63
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 2
28824: NEG
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 2
28835: NEG
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28850: LD_ADDR_VAR 0 64
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: LD_INT 2
28861: NEG
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 2
28869: NEG
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 2
28881: NEG
28882: PUSH
28883: LD_INT 2
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: LIST
28895: ST_TO_ADDR
// end ; 2 :
28896: GO 32162
28898: LD_INT 2
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28906
28904: GO 32161
28906: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28907: LD_ADDR_VAR 0 29
28911: PUSH
28912: LD_INT 4
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 4
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 5
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 5
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 4
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 3
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 3
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 3
28986: PUSH
28987: LD_INT 2
28989: NEG
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 5
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 3
29007: PUSH
29008: LD_INT 3
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 3
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 4
29027: PUSH
29028: LD_INT 3
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 4
29037: PUSH
29038: LD_INT 4
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: LD_INT 4
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: PUSH
29058: LD_INT 3
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 4
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: PUSH
29088: LD_INT 4
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: LD_INT 4
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: LD_INT 4
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: LD_INT 5
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 5
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: LD_INT 4
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 3
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 2
29169: PUSH
29170: LD_INT 5
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: LD_INT 3
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 3
29190: NEG
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 3
29201: NEG
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 3
29235: NEG
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 4
29246: NEG
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 4
29257: NEG
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 4
29269: NEG
29270: PUSH
29271: LD_INT 2
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: NEG
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 4
29292: NEG
29293: PUSH
29294: LD_INT 4
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 4
29304: NEG
29305: PUSH
29306: LD_INT 5
29308: NEG
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 3
29316: NEG
29317: PUSH
29318: LD_INT 4
29320: NEG
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 3
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 4
29340: NEG
29341: PUSH
29342: LD_INT 3
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 5
29352: NEG
29353: PUSH
29354: LD_INT 4
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 5
29364: NEG
29365: PUSH
29366: LD_INT 5
29368: NEG
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 3
29376: NEG
29377: PUSH
29378: LD_INT 5
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 5
29388: NEG
29389: PUSH
29390: LD_INT 3
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29445: LD_ADDR_VAR 0 30
29449: PUSH
29450: LD_INT 4
29452: PUSH
29453: LD_INT 4
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 4
29462: PUSH
29463: LD_INT 3
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 5
29472: PUSH
29473: LD_INT 4
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 5
29482: PUSH
29483: LD_INT 5
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 4
29492: PUSH
29493: LD_INT 5
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: LD_INT 4
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: LD_INT 3
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 5
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: LD_INT 5
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 0
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: LD_INT 3
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 4
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: LD_INT 4
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: LD_INT 2
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 2
29614: PUSH
29615: LD_INT 4
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 2
29624: NEG
29625: PUSH
29626: LD_INT 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 4
29635: NEG
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 4
29646: NEG
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 3
29658: NEG
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 3
29669: NEG
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 4
29680: NEG
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 5
29691: NEG
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 5
29702: NEG
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 5
29714: NEG
29715: PUSH
29716: LD_INT 2
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 3
29726: NEG
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 3
29737: NEG
29738: PUSH
29739: LD_INT 3
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 3
29749: NEG
29750: PUSH
29751: LD_INT 4
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 2
29761: NEG
29762: PUSH
29763: LD_INT 3
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 2
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 3
29785: NEG
29786: PUSH
29787: LD_INT 2
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 4
29797: NEG
29798: PUSH
29799: LD_INT 3
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 4
29809: NEG
29810: PUSH
29811: LD_INT 4
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 2
29821: NEG
29822: PUSH
29823: LD_INT 4
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 4
29833: NEG
29834: PUSH
29835: LD_INT 2
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: LD_INT 4
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: LD_INT 5
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 4
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: LD_INT 3
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: LD_INT 3
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: LD_INT 4
29904: NEG
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: NEG
29913: PUSH
29914: LD_INT 5
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: LD_INT 3
29927: NEG
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 2
29935: NEG
29936: PUSH
29937: LD_INT 5
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29992: LD_ADDR_VAR 0 31
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: LD_INT 4
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 3
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: LD_INT 4
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 5
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 5
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: LD_INT 4
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: LD_INT 3
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: LD_INT 5
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 2
30081: NEG
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 3
30092: NEG
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 3
30103: NEG
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 2
30115: NEG
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 3
30137: NEG
30138: PUSH
30139: LD_INT 1
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 4
30148: NEG
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 4
30159: NEG
30160: PUSH
30161: LD_INT 1
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 4
30171: NEG
30172: PUSH
30173: LD_INT 2
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 2
30183: NEG
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 4
30194: NEG
30195: PUSH
30196: LD_INT 4
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 4
30206: NEG
30207: PUSH
30208: LD_INT 5
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: LD_INT 4
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 3
30230: NEG
30231: PUSH
30232: LD_INT 3
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 4
30242: NEG
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 5
30254: NEG
30255: PUSH
30256: LD_INT 4
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 5
30266: NEG
30267: PUSH
30268: LD_INT 5
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 3
30278: NEG
30279: PUSH
30280: LD_INT 5
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 5
30290: NEG
30291: PUSH
30292: LD_INT 3
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: LD_INT 3
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: LD_INT 4
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: LD_INT 3
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 2
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: NEG
30358: PUSH
30359: LD_INT 3
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: NEG
30370: PUSH
30371: LD_INT 4
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 2
30392: NEG
30393: PUSH
30394: LD_INT 4
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 4
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 4
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 5
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 5
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 4
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 3
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 5
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30542: LD_ADDR_VAR 0 32
30546: PUSH
30547: LD_INT 4
30549: NEG
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 4
30560: NEG
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 3
30572: NEG
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 4
30594: NEG
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 5
30605: NEG
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 5
30616: NEG
30617: PUSH
30618: LD_INT 1
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 5
30628: NEG
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 3
30651: NEG
30652: PUSH
30653: LD_INT 3
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 3
30663: NEG
30664: PUSH
30665: LD_INT 4
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 2
30675: NEG
30676: PUSH
30677: LD_INT 3
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 3
30699: NEG
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 4
30711: NEG
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 4
30723: NEG
30724: PUSH
30725: LD_INT 4
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: NEG
30736: PUSH
30737: LD_INT 4
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 4
30747: NEG
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 4
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: LD_INT 5
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: LD_INT 4
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 3
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: LD_INT 4
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 5
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: LD_INT 3
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: LD_INT 5
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 3
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 4
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 4
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 0
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 4
30944: PUSH
30945: LD_INT 2
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 4
30954: PUSH
30955: LD_INT 4
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 4
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 5
30974: PUSH
30975: LD_INT 4
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 5
30984: PUSH
30985: LD_INT 5
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 4
30994: PUSH
30995: LD_INT 5
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 3
31004: PUSH
31005: LD_INT 4
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 5
31024: PUSH
31025: LD_INT 3
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 3
31034: PUSH
31035: LD_INT 5
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31089: LD_ADDR_VAR 0 33
31093: PUSH
31094: LD_INT 4
31096: NEG
31097: PUSH
31098: LD_INT 4
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 4
31108: NEG
31109: PUSH
31110: LD_INT 5
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 3
31120: NEG
31121: PUSH
31122: LD_INT 4
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 3
31132: NEG
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 4
31144: NEG
31145: PUSH
31146: LD_INT 3
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 5
31156: NEG
31157: PUSH
31158: LD_INT 4
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 5
31168: NEG
31169: PUSH
31170: LD_INT 5
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: LD_INT 5
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 5
31192: NEG
31193: PUSH
31194: LD_INT 3
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 0
31204: PUSH
31205: LD_INT 3
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: LD_INT 4
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 3
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: LD_INT 2
31251: NEG
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: LD_INT 4
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: LD_INT 2
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 2
31294: NEG
31295: PUSH
31296: LD_INT 4
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 4
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 4
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 5
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 5
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 4
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 3
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 3
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 3
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 5
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 3
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 4
31419: PUSH
31420: LD_INT 3
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 4
31429: PUSH
31430: LD_INT 4
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 3
31439: PUSH
31440: LD_INT 4
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: LD_INT 3
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 4
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: LD_INT 4
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 4
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: LD_INT 3
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 4
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: LD_INT 5
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 5
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: LD_INT 4
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 1
31550: NEG
31551: PUSH
31552: LD_INT 3
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: PUSH
31562: LD_INT 5
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31627: LD_ADDR_VAR 0 34
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 4
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: LD_INT 5
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 4
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: LD_INT 3
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: LD_INT 4
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: LD_INT 5
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: LD_INT 3
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 2
31724: NEG
31725: PUSH
31726: LD_INT 5
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 3
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 4
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 4
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 2
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 4
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 4
31829: PUSH
31830: LD_INT 4
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 4
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 5
31849: PUSH
31850: LD_INT 4
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 5
31859: PUSH
31860: LD_INT 5
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 4
31869: PUSH
31870: LD_INT 5
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 3
31879: PUSH
31880: LD_INT 4
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 3
31889: PUSH
31890: LD_INT 3
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 5
31899: PUSH
31900: LD_INT 3
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 3
31909: PUSH
31910: LD_INT 5
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 2
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: LD_INT 3
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: LD_INT 4
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: LD_INT 4
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: LD_INT 3
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: NEG
32002: PUSH
32003: LD_INT 2
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 4
32012: NEG
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 4
32023: NEG
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 3
32035: NEG
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 3
32046: NEG
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 4
32057: NEG
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 5
32068: NEG
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 5
32079: NEG
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 5
32091: NEG
32092: PUSH
32093: LD_INT 2
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: NEG
32104: PUSH
32105: LD_INT 2
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: ST_TO_ADDR
// end ; end ;
32159: GO 32162
32161: POP
// case btype of b_depot , b_warehouse :
32162: LD_VAR 0 1
32166: PUSH
32167: LD_INT 0
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32181
32173: LD_INT 1
32175: DOUBLE
32176: EQUAL
32177: IFTRUE 32181
32179: GO 32382
32181: POP
// case nation of nation_american :
32182: LD_VAR 0 5
32186: PUSH
32187: LD_INT 1
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32251
32195: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32196: LD_ADDR_VAR 0 9
32200: PUSH
32201: LD_VAR 0 11
32205: PUSH
32206: LD_VAR 0 12
32210: PUSH
32211: LD_VAR 0 13
32215: PUSH
32216: LD_VAR 0 14
32220: PUSH
32221: LD_VAR 0 15
32225: PUSH
32226: LD_VAR 0 16
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: PUSH
32239: LD_VAR 0 4
32243: PUSH
32244: LD_INT 1
32246: PLUS
32247: ARRAY
32248: ST_TO_ADDR
32249: GO 32380
32251: LD_INT 2
32253: DOUBLE
32254: EQUAL
32255: IFTRUE 32259
32257: GO 32315
32259: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32260: LD_ADDR_VAR 0 9
32264: PUSH
32265: LD_VAR 0 17
32269: PUSH
32270: LD_VAR 0 18
32274: PUSH
32275: LD_VAR 0 19
32279: PUSH
32280: LD_VAR 0 20
32284: PUSH
32285: LD_VAR 0 21
32289: PUSH
32290: LD_VAR 0 22
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: PUSH
32303: LD_VAR 0 4
32307: PUSH
32308: LD_INT 1
32310: PLUS
32311: ARRAY
32312: ST_TO_ADDR
32313: GO 32380
32315: LD_INT 3
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32379
32323: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32324: LD_ADDR_VAR 0 9
32328: PUSH
32329: LD_VAR 0 23
32333: PUSH
32334: LD_VAR 0 24
32338: PUSH
32339: LD_VAR 0 25
32343: PUSH
32344: LD_VAR 0 26
32348: PUSH
32349: LD_VAR 0 27
32353: PUSH
32354: LD_VAR 0 28
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: PUSH
32367: LD_VAR 0 4
32371: PUSH
32372: LD_INT 1
32374: PLUS
32375: ARRAY
32376: ST_TO_ADDR
32377: GO 32380
32379: POP
32380: GO 32935
32382: LD_INT 2
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32396
32388: LD_INT 3
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32452
32396: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32397: LD_ADDR_VAR 0 9
32401: PUSH
32402: LD_VAR 0 29
32406: PUSH
32407: LD_VAR 0 30
32411: PUSH
32412: LD_VAR 0 31
32416: PUSH
32417: LD_VAR 0 32
32421: PUSH
32422: LD_VAR 0 33
32426: PUSH
32427: LD_VAR 0 34
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: PUSH
32440: LD_VAR 0 4
32444: PUSH
32445: LD_INT 1
32447: PLUS
32448: ARRAY
32449: ST_TO_ADDR
32450: GO 32935
32452: LD_INT 16
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32514
32458: LD_INT 17
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32514
32464: LD_INT 18
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32514
32470: LD_INT 19
32472: DOUBLE
32473: EQUAL
32474: IFTRUE 32514
32476: LD_INT 22
32478: DOUBLE
32479: EQUAL
32480: IFTRUE 32514
32482: LD_INT 20
32484: DOUBLE
32485: EQUAL
32486: IFTRUE 32514
32488: LD_INT 21
32490: DOUBLE
32491: EQUAL
32492: IFTRUE 32514
32494: LD_INT 23
32496: DOUBLE
32497: EQUAL
32498: IFTRUE 32514
32500: LD_INT 24
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32514
32506: LD_INT 25
32508: DOUBLE
32509: EQUAL
32510: IFTRUE 32514
32512: GO 32570
32514: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32515: LD_ADDR_VAR 0 9
32519: PUSH
32520: LD_VAR 0 35
32524: PUSH
32525: LD_VAR 0 36
32529: PUSH
32530: LD_VAR 0 37
32534: PUSH
32535: LD_VAR 0 38
32539: PUSH
32540: LD_VAR 0 39
32544: PUSH
32545: LD_VAR 0 40
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: PUSH
32558: LD_VAR 0 4
32562: PUSH
32563: LD_INT 1
32565: PLUS
32566: ARRAY
32567: ST_TO_ADDR
32568: GO 32935
32570: LD_INT 6
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32626
32576: LD_INT 7
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32626
32582: LD_INT 8
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32626
32588: LD_INT 13
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32626
32594: LD_INT 12
32596: DOUBLE
32597: EQUAL
32598: IFTRUE 32626
32600: LD_INT 15
32602: DOUBLE
32603: EQUAL
32604: IFTRUE 32626
32606: LD_INT 11
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32626
32612: LD_INT 14
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32626
32618: LD_INT 10
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32682
32626: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32627: LD_ADDR_VAR 0 9
32631: PUSH
32632: LD_VAR 0 41
32636: PUSH
32637: LD_VAR 0 42
32641: PUSH
32642: LD_VAR 0 43
32646: PUSH
32647: LD_VAR 0 44
32651: PUSH
32652: LD_VAR 0 45
32656: PUSH
32657: LD_VAR 0 46
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: PUSH
32670: LD_VAR 0 4
32674: PUSH
32675: LD_INT 1
32677: PLUS
32678: ARRAY
32679: ST_TO_ADDR
32680: GO 32935
32682: LD_INT 36
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32746
32690: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32691: LD_ADDR_VAR 0 9
32695: PUSH
32696: LD_VAR 0 47
32700: PUSH
32701: LD_VAR 0 48
32705: PUSH
32706: LD_VAR 0 49
32710: PUSH
32711: LD_VAR 0 50
32715: PUSH
32716: LD_VAR 0 51
32720: PUSH
32721: LD_VAR 0 52
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: PUSH
32734: LD_VAR 0 4
32738: PUSH
32739: LD_INT 1
32741: PLUS
32742: ARRAY
32743: ST_TO_ADDR
32744: GO 32935
32746: LD_INT 4
32748: DOUBLE
32749: EQUAL
32750: IFTRUE 32772
32752: LD_INT 5
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32772
32758: LD_INT 34
32760: DOUBLE
32761: EQUAL
32762: IFTRUE 32772
32764: LD_INT 37
32766: DOUBLE
32767: EQUAL
32768: IFTRUE 32772
32770: GO 32828
32772: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32773: LD_ADDR_VAR 0 9
32777: PUSH
32778: LD_VAR 0 53
32782: PUSH
32783: LD_VAR 0 54
32787: PUSH
32788: LD_VAR 0 55
32792: PUSH
32793: LD_VAR 0 56
32797: PUSH
32798: LD_VAR 0 57
32802: PUSH
32803: LD_VAR 0 58
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: PUSH
32816: LD_VAR 0 4
32820: PUSH
32821: LD_INT 1
32823: PLUS
32824: ARRAY
32825: ST_TO_ADDR
32826: GO 32935
32828: LD_INT 31
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32878
32834: LD_INT 32
32836: DOUBLE
32837: EQUAL
32838: IFTRUE 32878
32840: LD_INT 33
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32878
32846: LD_INT 27
32848: DOUBLE
32849: EQUAL
32850: IFTRUE 32878
32852: LD_INT 26
32854: DOUBLE
32855: EQUAL
32856: IFTRUE 32878
32858: LD_INT 28
32860: DOUBLE
32861: EQUAL
32862: IFTRUE 32878
32864: LD_INT 29
32866: DOUBLE
32867: EQUAL
32868: IFTRUE 32878
32870: LD_INT 30
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 32934
32878: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32879: LD_ADDR_VAR 0 9
32883: PUSH
32884: LD_VAR 0 59
32888: PUSH
32889: LD_VAR 0 60
32893: PUSH
32894: LD_VAR 0 61
32898: PUSH
32899: LD_VAR 0 62
32903: PUSH
32904: LD_VAR 0 63
32908: PUSH
32909: LD_VAR 0 64
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: PUSH
32922: LD_VAR 0 4
32926: PUSH
32927: LD_INT 1
32929: PLUS
32930: ARRAY
32931: ST_TO_ADDR
32932: GO 32935
32934: POP
// temp_list2 = [ ] ;
32935: LD_ADDR_VAR 0 10
32939: PUSH
32940: EMPTY
32941: ST_TO_ADDR
// for i in temp_list do
32942: LD_ADDR_VAR 0 8
32946: PUSH
32947: LD_VAR 0 9
32951: PUSH
32952: FOR_IN
32953: IFFALSE 33005
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32955: LD_ADDR_VAR 0 10
32959: PUSH
32960: LD_VAR 0 10
32964: PUSH
32965: LD_VAR 0 8
32969: PUSH
32970: LD_INT 1
32972: ARRAY
32973: PUSH
32974: LD_VAR 0 2
32978: PLUS
32979: PUSH
32980: LD_VAR 0 8
32984: PUSH
32985: LD_INT 2
32987: ARRAY
32988: PUSH
32989: LD_VAR 0 3
32993: PLUS
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: EMPTY
33000: LIST
33001: ADD
33002: ST_TO_ADDR
33003: GO 32952
33005: POP
33006: POP
// result = temp_list2 ;
33007: LD_ADDR_VAR 0 7
33011: PUSH
33012: LD_VAR 0 10
33016: ST_TO_ADDR
// end ;
33017: LD_VAR 0 7
33021: RET
// export function EnemyInRange ( unit , dist ) ; begin
33022: LD_INT 0
33024: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33025: LD_ADDR_VAR 0 3
33029: PUSH
33030: LD_VAR 0 1
33034: PPUSH
33035: CALL_OW 255
33039: PPUSH
33040: LD_VAR 0 1
33044: PPUSH
33045: CALL_OW 250
33049: PPUSH
33050: LD_VAR 0 1
33054: PPUSH
33055: CALL_OW 251
33059: PPUSH
33060: LD_VAR 0 2
33064: PPUSH
33065: CALL 6395 0 4
33069: PUSH
33070: LD_INT 4
33072: ARRAY
33073: ST_TO_ADDR
// end ;
33074: LD_VAR 0 3
33078: RET
// export function PlayerSeeMe ( unit ) ; begin
33079: LD_INT 0
33081: PPUSH
// result := See ( your_side , unit ) ;
33082: LD_ADDR_VAR 0 2
33086: PUSH
33087: LD_OWVAR 2
33091: PPUSH
33092: LD_VAR 0 1
33096: PPUSH
33097: CALL_OW 292
33101: ST_TO_ADDR
// end ;
33102: LD_VAR 0 2
33106: RET
// export function ReverseDir ( unit ) ; begin
33107: LD_INT 0
33109: PPUSH
// if not unit then
33110: LD_VAR 0 1
33114: NOT
33115: IFFALSE 33119
// exit ;
33117: GO 33142
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33119: LD_ADDR_VAR 0 2
33123: PUSH
33124: LD_VAR 0 1
33128: PPUSH
33129: CALL_OW 254
33133: PUSH
33134: LD_INT 3
33136: PLUS
33137: PUSH
33138: LD_INT 6
33140: MOD
33141: ST_TO_ADDR
// end ;
33142: LD_VAR 0 2
33146: RET
// export function ReverseArray ( array ) ; var i ; begin
33147: LD_INT 0
33149: PPUSH
33150: PPUSH
// if not array then
33151: LD_VAR 0 1
33155: NOT
33156: IFFALSE 33160
// exit ;
33158: GO 33215
// result := [ ] ;
33160: LD_ADDR_VAR 0 2
33164: PUSH
33165: EMPTY
33166: ST_TO_ADDR
// for i := array downto 1 do
33167: LD_ADDR_VAR 0 3
33171: PUSH
33172: DOUBLE
33173: LD_VAR 0 1
33177: INC
33178: ST_TO_ADDR
33179: LD_INT 1
33181: PUSH
33182: FOR_DOWNTO
33183: IFFALSE 33213
// result := Join ( result , array [ i ] ) ;
33185: LD_ADDR_VAR 0 2
33189: PUSH
33190: LD_VAR 0 2
33194: PPUSH
33195: LD_VAR 0 1
33199: PUSH
33200: LD_VAR 0 3
33204: ARRAY
33205: PPUSH
33206: CALL 37858 0 2
33210: ST_TO_ADDR
33211: GO 33182
33213: POP
33214: POP
// end ;
33215: LD_VAR 0 2
33219: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33220: LD_INT 0
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
33226: PPUSH
33227: PPUSH
// if not unit or not hexes then
33228: LD_VAR 0 1
33232: NOT
33233: PUSH
33234: LD_VAR 0 2
33238: NOT
33239: OR
33240: IFFALSE 33244
// exit ;
33242: GO 33367
// dist := 9999 ;
33244: LD_ADDR_VAR 0 5
33248: PUSH
33249: LD_INT 9999
33251: ST_TO_ADDR
// for i = 1 to hexes do
33252: LD_ADDR_VAR 0 4
33256: PUSH
33257: DOUBLE
33258: LD_INT 1
33260: DEC
33261: ST_TO_ADDR
33262: LD_VAR 0 2
33266: PUSH
33267: FOR_TO
33268: IFFALSE 33355
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33270: LD_ADDR_VAR 0 6
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: LD_VAR 0 2
33284: PUSH
33285: LD_VAR 0 4
33289: ARRAY
33290: PUSH
33291: LD_INT 1
33293: ARRAY
33294: PPUSH
33295: LD_VAR 0 2
33299: PUSH
33300: LD_VAR 0 4
33304: ARRAY
33305: PUSH
33306: LD_INT 2
33308: ARRAY
33309: PPUSH
33310: CALL_OW 297
33314: ST_TO_ADDR
// if tdist < dist then
33315: LD_VAR 0 6
33319: PUSH
33320: LD_VAR 0 5
33324: LESS
33325: IFFALSE 33353
// begin hex := hexes [ i ] ;
33327: LD_ADDR_VAR 0 8
33331: PUSH
33332: LD_VAR 0 2
33336: PUSH
33337: LD_VAR 0 4
33341: ARRAY
33342: ST_TO_ADDR
// dist := tdist ;
33343: LD_ADDR_VAR 0 5
33347: PUSH
33348: LD_VAR 0 6
33352: ST_TO_ADDR
// end ; end ;
33353: GO 33267
33355: POP
33356: POP
// result := hex ;
33357: LD_ADDR_VAR 0 3
33361: PUSH
33362: LD_VAR 0 8
33366: ST_TO_ADDR
// end ;
33367: LD_VAR 0 3
33371: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33372: LD_INT 0
33374: PPUSH
33375: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33376: LD_VAR 0 1
33380: NOT
33381: PUSH
33382: LD_VAR 0 1
33386: PUSH
33387: LD_INT 21
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 23
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PPUSH
33411: CALL_OW 69
33415: IN
33416: NOT
33417: OR
33418: IFFALSE 33422
// exit ;
33420: GO 33469
// for i = 1 to 3 do
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: DOUBLE
33428: LD_INT 1
33430: DEC
33431: ST_TO_ADDR
33432: LD_INT 3
33434: PUSH
33435: FOR_TO
33436: IFFALSE 33467
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33438: LD_VAR 0 1
33442: PPUSH
33443: CALL_OW 250
33447: PPUSH
33448: LD_VAR 0 1
33452: PPUSH
33453: CALL_OW 251
33457: PPUSH
33458: LD_INT 1
33460: PPUSH
33461: CALL_OW 453
33465: GO 33435
33467: POP
33468: POP
// end ;
33469: LD_VAR 0 2
33473: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33474: LD_INT 0
33476: PPUSH
33477: PPUSH
33478: PPUSH
33479: PPUSH
33480: PPUSH
33481: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33482: LD_VAR 0 1
33486: NOT
33487: PUSH
33488: LD_VAR 0 2
33492: NOT
33493: OR
33494: PUSH
33495: LD_VAR 0 1
33499: PPUSH
33500: CALL_OW 314
33504: OR
33505: IFFALSE 33509
// exit ;
33507: GO 33976
// if GetLives ( i ) < 250 then
33509: LD_VAR 0 4
33513: PPUSH
33514: CALL_OW 256
33518: PUSH
33519: LD_INT 250
33521: LESS
33522: IFFALSE 33535
// begin ComAutodestruct ( i ) ;
33524: LD_VAR 0 4
33528: PPUSH
33529: CALL 33372 0 1
// exit ;
33533: GO 33976
// end ; x := GetX ( enemy_unit ) ;
33535: LD_ADDR_VAR 0 7
33539: PUSH
33540: LD_VAR 0 2
33544: PPUSH
33545: CALL_OW 250
33549: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33550: LD_ADDR_VAR 0 8
33554: PUSH
33555: LD_VAR 0 2
33559: PPUSH
33560: CALL_OW 251
33564: ST_TO_ADDR
// if not x or not y then
33565: LD_VAR 0 7
33569: NOT
33570: PUSH
33571: LD_VAR 0 8
33575: NOT
33576: OR
33577: IFFALSE 33581
// exit ;
33579: GO 33976
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33581: LD_ADDR_VAR 0 6
33585: PUSH
33586: LD_VAR 0 7
33590: PPUSH
33591: LD_INT 0
33593: PPUSH
33594: LD_INT 4
33596: PPUSH
33597: CALL_OW 272
33601: PUSH
33602: LD_VAR 0 8
33606: PPUSH
33607: LD_INT 0
33609: PPUSH
33610: LD_INT 4
33612: PPUSH
33613: CALL_OW 273
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_VAR 0 7
33626: PPUSH
33627: LD_INT 1
33629: PPUSH
33630: LD_INT 4
33632: PPUSH
33633: CALL_OW 272
33637: PUSH
33638: LD_VAR 0 8
33642: PPUSH
33643: LD_INT 1
33645: PPUSH
33646: LD_INT 4
33648: PPUSH
33649: CALL_OW 273
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_VAR 0 7
33662: PPUSH
33663: LD_INT 2
33665: PPUSH
33666: LD_INT 4
33668: PPUSH
33669: CALL_OW 272
33673: PUSH
33674: LD_VAR 0 8
33678: PPUSH
33679: LD_INT 2
33681: PPUSH
33682: LD_INT 4
33684: PPUSH
33685: CALL_OW 273
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_VAR 0 7
33698: PPUSH
33699: LD_INT 3
33701: PPUSH
33702: LD_INT 4
33704: PPUSH
33705: CALL_OW 272
33709: PUSH
33710: LD_VAR 0 8
33714: PPUSH
33715: LD_INT 3
33717: PPUSH
33718: LD_INT 4
33720: PPUSH
33721: CALL_OW 273
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_VAR 0 7
33734: PPUSH
33735: LD_INT 4
33737: PPUSH
33738: LD_INT 4
33740: PPUSH
33741: CALL_OW 272
33745: PUSH
33746: LD_VAR 0 8
33750: PPUSH
33751: LD_INT 4
33753: PPUSH
33754: LD_INT 4
33756: PPUSH
33757: CALL_OW 273
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_VAR 0 7
33770: PPUSH
33771: LD_INT 5
33773: PPUSH
33774: LD_INT 4
33776: PPUSH
33777: CALL_OW 272
33781: PUSH
33782: LD_VAR 0 8
33786: PPUSH
33787: LD_INT 5
33789: PPUSH
33790: LD_INT 4
33792: PPUSH
33793: CALL_OW 273
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
// for i = tmp downto 1 do
33810: LD_ADDR_VAR 0 4
33814: PUSH
33815: DOUBLE
33816: LD_VAR 0 6
33820: INC
33821: ST_TO_ADDR
33822: LD_INT 1
33824: PUSH
33825: FOR_DOWNTO
33826: IFFALSE 33927
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33828: LD_VAR 0 6
33832: PUSH
33833: LD_VAR 0 4
33837: ARRAY
33838: PUSH
33839: LD_INT 1
33841: ARRAY
33842: PPUSH
33843: LD_VAR 0 6
33847: PUSH
33848: LD_VAR 0 4
33852: ARRAY
33853: PUSH
33854: LD_INT 2
33856: ARRAY
33857: PPUSH
33858: CALL_OW 488
33862: NOT
33863: PUSH
33864: LD_VAR 0 6
33868: PUSH
33869: LD_VAR 0 4
33873: ARRAY
33874: PUSH
33875: LD_INT 1
33877: ARRAY
33878: PPUSH
33879: LD_VAR 0 6
33883: PUSH
33884: LD_VAR 0 4
33888: ARRAY
33889: PUSH
33890: LD_INT 2
33892: ARRAY
33893: PPUSH
33894: CALL_OW 428
33898: PUSH
33899: LD_INT 0
33901: NONEQUAL
33902: OR
33903: IFFALSE 33925
// tmp := Delete ( tmp , i ) ;
33905: LD_ADDR_VAR 0 6
33909: PUSH
33910: LD_VAR 0 6
33914: PPUSH
33915: LD_VAR 0 4
33919: PPUSH
33920: CALL_OW 3
33924: ST_TO_ADDR
33925: GO 33825
33927: POP
33928: POP
// j := GetClosestHex ( unit , tmp ) ;
33929: LD_ADDR_VAR 0 5
33933: PUSH
33934: LD_VAR 0 1
33938: PPUSH
33939: LD_VAR 0 6
33943: PPUSH
33944: CALL 33220 0 2
33948: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33949: LD_VAR 0 1
33953: PPUSH
33954: LD_VAR 0 5
33958: PUSH
33959: LD_INT 1
33961: ARRAY
33962: PPUSH
33963: LD_VAR 0 5
33967: PUSH
33968: LD_INT 2
33970: ARRAY
33971: PPUSH
33972: CALL_OW 111
// end ;
33976: LD_VAR 0 3
33980: RET
// export function PrepareApemanSoldier ( ) ; begin
33981: LD_INT 0
33983: PPUSH
// uc_nation := 0 ;
33984: LD_ADDR_OWVAR 21
33988: PUSH
33989: LD_INT 0
33991: ST_TO_ADDR
// hc_sex := sex_male ;
33992: LD_ADDR_OWVAR 27
33996: PUSH
33997: LD_INT 1
33999: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34000: LD_ADDR_OWVAR 28
34004: PUSH
34005: LD_INT 15
34007: ST_TO_ADDR
// hc_gallery :=  ;
34008: LD_ADDR_OWVAR 33
34012: PUSH
34013: LD_STRING 
34015: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34016: LD_ADDR_OWVAR 31
34020: PUSH
34021: LD_INT 0
34023: PPUSH
34024: LD_INT 3
34026: PPUSH
34027: CALL_OW 12
34031: PUSH
34032: LD_INT 0
34034: PPUSH
34035: LD_INT 3
34037: PPUSH
34038: CALL_OW 12
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: ST_TO_ADDR
// end ;
34055: LD_VAR 0 1
34059: RET
// export function PrepareApemanEngineer ( ) ; begin
34060: LD_INT 0
34062: PPUSH
// uc_nation := 0 ;
34063: LD_ADDR_OWVAR 21
34067: PUSH
34068: LD_INT 0
34070: ST_TO_ADDR
// hc_sex := sex_male ;
34071: LD_ADDR_OWVAR 27
34075: PUSH
34076: LD_INT 1
34078: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34079: LD_ADDR_OWVAR 28
34083: PUSH
34084: LD_INT 16
34086: ST_TO_ADDR
// hc_gallery :=  ;
34087: LD_ADDR_OWVAR 33
34091: PUSH
34092: LD_STRING 
34094: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34095: LD_ADDR_OWVAR 31
34099: PUSH
34100: LD_INT 0
34102: PPUSH
34103: LD_INT 3
34105: PPUSH
34106: CALL_OW 12
34110: PUSH
34111: LD_INT 0
34113: PPUSH
34114: LD_INT 3
34116: PPUSH
34117: CALL_OW 12
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: ST_TO_ADDR
// end ;
34134: LD_VAR 0 1
34138: RET
// export function PrepareApeman ( agressivity ) ; begin
34139: LD_INT 0
34141: PPUSH
// uc_side := 0 ;
34142: LD_ADDR_OWVAR 20
34146: PUSH
34147: LD_INT 0
34149: ST_TO_ADDR
// uc_nation := 0 ;
34150: LD_ADDR_OWVAR 21
34154: PUSH
34155: LD_INT 0
34157: ST_TO_ADDR
// hc_sex := sex_male ;
34158: LD_ADDR_OWVAR 27
34162: PUSH
34163: LD_INT 1
34165: ST_TO_ADDR
// hc_class := class_apeman ;
34166: LD_ADDR_OWVAR 28
34170: PUSH
34171: LD_INT 12
34173: ST_TO_ADDR
// hc_gallery :=  ;
34174: LD_ADDR_OWVAR 33
34178: PUSH
34179: LD_STRING 
34181: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34182: LD_ADDR_OWVAR 35
34186: PUSH
34187: LD_VAR 0 1
34191: NEG
34192: PPUSH
34193: LD_VAR 0 1
34197: PPUSH
34198: CALL_OW 12
34202: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34203: LD_ADDR_OWVAR 31
34207: PUSH
34208: LD_INT 0
34210: PPUSH
34211: LD_INT 3
34213: PPUSH
34214: CALL_OW 12
34218: PUSH
34219: LD_INT 0
34221: PPUSH
34222: LD_INT 3
34224: PPUSH
34225: CALL_OW 12
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: ST_TO_ADDR
// end ;
34242: LD_VAR 0 2
34246: RET
// export function PrepareTiger ( agressivity ) ; begin
34247: LD_INT 0
34249: PPUSH
// uc_side := 0 ;
34250: LD_ADDR_OWVAR 20
34254: PUSH
34255: LD_INT 0
34257: ST_TO_ADDR
// uc_nation := 0 ;
34258: LD_ADDR_OWVAR 21
34262: PUSH
34263: LD_INT 0
34265: ST_TO_ADDR
// hc_class := class_tiger ;
34266: LD_ADDR_OWVAR 28
34270: PUSH
34271: LD_INT 14
34273: ST_TO_ADDR
// hc_gallery :=  ;
34274: LD_ADDR_OWVAR 33
34278: PUSH
34279: LD_STRING 
34281: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34282: LD_ADDR_OWVAR 35
34286: PUSH
34287: LD_VAR 0 1
34291: NEG
34292: PPUSH
34293: LD_VAR 0 1
34297: PPUSH
34298: CALL_OW 12
34302: ST_TO_ADDR
// end ;
34303: LD_VAR 0 2
34307: RET
// export function PrepareEnchidna ( ) ; begin
34308: LD_INT 0
34310: PPUSH
// uc_side := 0 ;
34311: LD_ADDR_OWVAR 20
34315: PUSH
34316: LD_INT 0
34318: ST_TO_ADDR
// uc_nation := 0 ;
34319: LD_ADDR_OWVAR 21
34323: PUSH
34324: LD_INT 0
34326: ST_TO_ADDR
// hc_class := class_baggie ;
34327: LD_ADDR_OWVAR 28
34331: PUSH
34332: LD_INT 13
34334: ST_TO_ADDR
// hc_gallery :=  ;
34335: LD_ADDR_OWVAR 33
34339: PUSH
34340: LD_STRING 
34342: ST_TO_ADDR
// end ;
34343: LD_VAR 0 1
34347: RET
// export function PrepareFrog ( ) ; begin
34348: LD_INT 0
34350: PPUSH
// uc_side := 0 ;
34351: LD_ADDR_OWVAR 20
34355: PUSH
34356: LD_INT 0
34358: ST_TO_ADDR
// uc_nation := 0 ;
34359: LD_ADDR_OWVAR 21
34363: PUSH
34364: LD_INT 0
34366: ST_TO_ADDR
// hc_class := class_frog ;
34367: LD_ADDR_OWVAR 28
34371: PUSH
34372: LD_INT 19
34374: ST_TO_ADDR
// hc_gallery :=  ;
34375: LD_ADDR_OWVAR 33
34379: PUSH
34380: LD_STRING 
34382: ST_TO_ADDR
// end ;
34383: LD_VAR 0 1
34387: RET
// export function PrepareFish ( ) ; begin
34388: LD_INT 0
34390: PPUSH
// uc_side := 0 ;
34391: LD_ADDR_OWVAR 20
34395: PUSH
34396: LD_INT 0
34398: ST_TO_ADDR
// uc_nation := 0 ;
34399: LD_ADDR_OWVAR 21
34403: PUSH
34404: LD_INT 0
34406: ST_TO_ADDR
// hc_class := class_fish ;
34407: LD_ADDR_OWVAR 28
34411: PUSH
34412: LD_INT 20
34414: ST_TO_ADDR
// hc_gallery :=  ;
34415: LD_ADDR_OWVAR 33
34419: PUSH
34420: LD_STRING 
34422: ST_TO_ADDR
// end ;
34423: LD_VAR 0 1
34427: RET
// export function PrepareBird ( ) ; begin
34428: LD_INT 0
34430: PPUSH
// uc_side := 0 ;
34431: LD_ADDR_OWVAR 20
34435: PUSH
34436: LD_INT 0
34438: ST_TO_ADDR
// uc_nation := 0 ;
34439: LD_ADDR_OWVAR 21
34443: PUSH
34444: LD_INT 0
34446: ST_TO_ADDR
// hc_class := class_phororhacos ;
34447: LD_ADDR_OWVAR 28
34451: PUSH
34452: LD_INT 18
34454: ST_TO_ADDR
// hc_gallery :=  ;
34455: LD_ADDR_OWVAR 33
34459: PUSH
34460: LD_STRING 
34462: ST_TO_ADDR
// end ;
34463: LD_VAR 0 1
34467: RET
// export function PrepareHorse ( ) ; begin
34468: LD_INT 0
34470: PPUSH
// uc_side := 0 ;
34471: LD_ADDR_OWVAR 20
34475: PUSH
34476: LD_INT 0
34478: ST_TO_ADDR
// uc_nation := 0 ;
34479: LD_ADDR_OWVAR 21
34483: PUSH
34484: LD_INT 0
34486: ST_TO_ADDR
// hc_class := class_horse ;
34487: LD_ADDR_OWVAR 28
34491: PUSH
34492: LD_INT 21
34494: ST_TO_ADDR
// hc_gallery :=  ;
34495: LD_ADDR_OWVAR 33
34499: PUSH
34500: LD_STRING 
34502: ST_TO_ADDR
// end ;
34503: LD_VAR 0 1
34507: RET
// export function PrepareMastodont ( ) ; begin
34508: LD_INT 0
34510: PPUSH
// uc_side := 0 ;
34511: LD_ADDR_OWVAR 20
34515: PUSH
34516: LD_INT 0
34518: ST_TO_ADDR
// uc_nation := 0 ;
34519: LD_ADDR_OWVAR 21
34523: PUSH
34524: LD_INT 0
34526: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34527: LD_ADDR_OWVAR 37
34531: PUSH
34532: LD_INT 31
34534: ST_TO_ADDR
// vc_control := control_rider ;
34535: LD_ADDR_OWVAR 38
34539: PUSH
34540: LD_INT 4
34542: ST_TO_ADDR
// end ;
34543: LD_VAR 0 1
34547: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34548: LD_INT 0
34550: PPUSH
34551: PPUSH
34552: PPUSH
// uc_side = 0 ;
34553: LD_ADDR_OWVAR 20
34557: PUSH
34558: LD_INT 0
34560: ST_TO_ADDR
// uc_nation = 0 ;
34561: LD_ADDR_OWVAR 21
34565: PUSH
34566: LD_INT 0
34568: ST_TO_ADDR
// InitHc_All ( ) ;
34569: CALL_OW 584
// InitVc ;
34573: CALL_OW 20
// if mastodonts then
34577: LD_VAR 0 6
34581: IFFALSE 34648
// for i = 1 to mastodonts do
34583: LD_ADDR_VAR 0 11
34587: PUSH
34588: DOUBLE
34589: LD_INT 1
34591: DEC
34592: ST_TO_ADDR
34593: LD_VAR 0 6
34597: PUSH
34598: FOR_TO
34599: IFFALSE 34646
// begin vc_chassis := 31 ;
34601: LD_ADDR_OWVAR 37
34605: PUSH
34606: LD_INT 31
34608: ST_TO_ADDR
// vc_control := control_rider ;
34609: LD_ADDR_OWVAR 38
34613: PUSH
34614: LD_INT 4
34616: ST_TO_ADDR
// animal := CreateVehicle ;
34617: LD_ADDR_VAR 0 12
34621: PUSH
34622: CALL_OW 45
34626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34627: LD_VAR 0 12
34631: PPUSH
34632: LD_VAR 0 8
34636: PPUSH
34637: LD_INT 0
34639: PPUSH
34640: CALL 36776 0 3
// end ;
34644: GO 34598
34646: POP
34647: POP
// if horses then
34648: LD_VAR 0 5
34652: IFFALSE 34719
// for i = 1 to horses do
34654: LD_ADDR_VAR 0 11
34658: PUSH
34659: DOUBLE
34660: LD_INT 1
34662: DEC
34663: ST_TO_ADDR
34664: LD_VAR 0 5
34668: PUSH
34669: FOR_TO
34670: IFFALSE 34717
// begin hc_class := 21 ;
34672: LD_ADDR_OWVAR 28
34676: PUSH
34677: LD_INT 21
34679: ST_TO_ADDR
// hc_gallery :=  ;
34680: LD_ADDR_OWVAR 33
34684: PUSH
34685: LD_STRING 
34687: ST_TO_ADDR
// animal := CreateHuman ;
34688: LD_ADDR_VAR 0 12
34692: PUSH
34693: CALL_OW 44
34697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34698: LD_VAR 0 12
34702: PPUSH
34703: LD_VAR 0 8
34707: PPUSH
34708: LD_INT 0
34710: PPUSH
34711: CALL 36776 0 3
// end ;
34715: GO 34669
34717: POP
34718: POP
// if birds then
34719: LD_VAR 0 1
34723: IFFALSE 34790
// for i = 1 to birds do
34725: LD_ADDR_VAR 0 11
34729: PUSH
34730: DOUBLE
34731: LD_INT 1
34733: DEC
34734: ST_TO_ADDR
34735: LD_VAR 0 1
34739: PUSH
34740: FOR_TO
34741: IFFALSE 34788
// begin hc_class := 18 ;
34743: LD_ADDR_OWVAR 28
34747: PUSH
34748: LD_INT 18
34750: ST_TO_ADDR
// hc_gallery =  ;
34751: LD_ADDR_OWVAR 33
34755: PUSH
34756: LD_STRING 
34758: ST_TO_ADDR
// animal := CreateHuman ;
34759: LD_ADDR_VAR 0 12
34763: PUSH
34764: CALL_OW 44
34768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34769: LD_VAR 0 12
34773: PPUSH
34774: LD_VAR 0 8
34778: PPUSH
34779: LD_INT 0
34781: PPUSH
34782: CALL 36776 0 3
// end ;
34786: GO 34740
34788: POP
34789: POP
// if tigers then
34790: LD_VAR 0 2
34794: IFFALSE 34878
// for i = 1 to tigers do
34796: LD_ADDR_VAR 0 11
34800: PUSH
34801: DOUBLE
34802: LD_INT 1
34804: DEC
34805: ST_TO_ADDR
34806: LD_VAR 0 2
34810: PUSH
34811: FOR_TO
34812: IFFALSE 34876
// begin hc_class = class_tiger ;
34814: LD_ADDR_OWVAR 28
34818: PUSH
34819: LD_INT 14
34821: ST_TO_ADDR
// hc_gallery =  ;
34822: LD_ADDR_OWVAR 33
34826: PUSH
34827: LD_STRING 
34829: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34830: LD_ADDR_OWVAR 35
34834: PUSH
34835: LD_INT 7
34837: NEG
34838: PPUSH
34839: LD_INT 7
34841: PPUSH
34842: CALL_OW 12
34846: ST_TO_ADDR
// animal := CreateHuman ;
34847: LD_ADDR_VAR 0 12
34851: PUSH
34852: CALL_OW 44
34856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34857: LD_VAR 0 12
34861: PPUSH
34862: LD_VAR 0 8
34866: PPUSH
34867: LD_INT 0
34869: PPUSH
34870: CALL 36776 0 3
// end ;
34874: GO 34811
34876: POP
34877: POP
// if apemans then
34878: LD_VAR 0 3
34882: IFFALSE 35005
// for i = 1 to apemans do
34884: LD_ADDR_VAR 0 11
34888: PUSH
34889: DOUBLE
34890: LD_INT 1
34892: DEC
34893: ST_TO_ADDR
34894: LD_VAR 0 3
34898: PUSH
34899: FOR_TO
34900: IFFALSE 35003
// begin hc_class = class_apeman ;
34902: LD_ADDR_OWVAR 28
34906: PUSH
34907: LD_INT 12
34909: ST_TO_ADDR
// hc_gallery =  ;
34910: LD_ADDR_OWVAR 33
34914: PUSH
34915: LD_STRING 
34917: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34918: LD_ADDR_OWVAR 35
34922: PUSH
34923: LD_INT 2
34925: NEG
34926: PPUSH
34927: LD_INT 2
34929: PPUSH
34930: CALL_OW 12
34934: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34935: LD_ADDR_OWVAR 31
34939: PUSH
34940: LD_INT 1
34942: PPUSH
34943: LD_INT 3
34945: PPUSH
34946: CALL_OW 12
34950: PUSH
34951: LD_INT 1
34953: PPUSH
34954: LD_INT 3
34956: PPUSH
34957: CALL_OW 12
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: ST_TO_ADDR
// animal := CreateHuman ;
34974: LD_ADDR_VAR 0 12
34978: PUSH
34979: CALL_OW 44
34983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34984: LD_VAR 0 12
34988: PPUSH
34989: LD_VAR 0 8
34993: PPUSH
34994: LD_INT 0
34996: PPUSH
34997: CALL 36776 0 3
// end ;
35001: GO 34899
35003: POP
35004: POP
// if enchidnas then
35005: LD_VAR 0 4
35009: IFFALSE 35076
// for i = 1 to enchidnas do
35011: LD_ADDR_VAR 0 11
35015: PUSH
35016: DOUBLE
35017: LD_INT 1
35019: DEC
35020: ST_TO_ADDR
35021: LD_VAR 0 4
35025: PUSH
35026: FOR_TO
35027: IFFALSE 35074
// begin hc_class = 13 ;
35029: LD_ADDR_OWVAR 28
35033: PUSH
35034: LD_INT 13
35036: ST_TO_ADDR
// hc_gallery =  ;
35037: LD_ADDR_OWVAR 33
35041: PUSH
35042: LD_STRING 
35044: ST_TO_ADDR
// animal := CreateHuman ;
35045: LD_ADDR_VAR 0 12
35049: PUSH
35050: CALL_OW 44
35054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35055: LD_VAR 0 12
35059: PPUSH
35060: LD_VAR 0 8
35064: PPUSH
35065: LD_INT 0
35067: PPUSH
35068: CALL 36776 0 3
// end ;
35072: GO 35026
35074: POP
35075: POP
// if fishes then
35076: LD_VAR 0 7
35080: IFFALSE 35147
// for i = 1 to fishes do
35082: LD_ADDR_VAR 0 11
35086: PUSH
35087: DOUBLE
35088: LD_INT 1
35090: DEC
35091: ST_TO_ADDR
35092: LD_VAR 0 7
35096: PUSH
35097: FOR_TO
35098: IFFALSE 35145
// begin hc_class = 20 ;
35100: LD_ADDR_OWVAR 28
35104: PUSH
35105: LD_INT 20
35107: ST_TO_ADDR
// hc_gallery =  ;
35108: LD_ADDR_OWVAR 33
35112: PUSH
35113: LD_STRING 
35115: ST_TO_ADDR
// animal := CreateHuman ;
35116: LD_ADDR_VAR 0 12
35120: PUSH
35121: CALL_OW 44
35125: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35126: LD_VAR 0 12
35130: PPUSH
35131: LD_VAR 0 9
35135: PPUSH
35136: LD_INT 0
35138: PPUSH
35139: CALL 36776 0 3
// end ;
35143: GO 35097
35145: POP
35146: POP
// end ;
35147: LD_VAR 0 10
35151: RET
// export function WantHeal ( sci , unit ) ; begin
35152: LD_INT 0
35154: PPUSH
// if GetTaskList ( sci ) > 0 then
35155: LD_VAR 0 1
35159: PPUSH
35160: CALL_OW 437
35164: PUSH
35165: LD_INT 0
35167: GREATER
35168: IFFALSE 35238
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35170: LD_VAR 0 1
35174: PPUSH
35175: CALL_OW 437
35179: PUSH
35180: LD_INT 1
35182: ARRAY
35183: PUSH
35184: LD_INT 1
35186: ARRAY
35187: PUSH
35188: LD_STRING l
35190: EQUAL
35191: PUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 437
35201: PUSH
35202: LD_INT 1
35204: ARRAY
35205: PUSH
35206: LD_INT 4
35208: ARRAY
35209: PUSH
35210: LD_VAR 0 2
35214: EQUAL
35215: AND
35216: IFFALSE 35228
// result := true else
35218: LD_ADDR_VAR 0 3
35222: PUSH
35223: LD_INT 1
35225: ST_TO_ADDR
35226: GO 35236
// result := false ;
35228: LD_ADDR_VAR 0 3
35232: PUSH
35233: LD_INT 0
35235: ST_TO_ADDR
// end else
35236: GO 35246
// result := false ;
35238: LD_ADDR_VAR 0 3
35242: PUSH
35243: LD_INT 0
35245: ST_TO_ADDR
// end ;
35246: LD_VAR 0 3
35250: RET
// export function HealTarget ( sci ) ; begin
35251: LD_INT 0
35253: PPUSH
// if not sci then
35254: LD_VAR 0 1
35258: NOT
35259: IFFALSE 35263
// exit ;
35261: GO 35328
// result := 0 ;
35263: LD_ADDR_VAR 0 2
35267: PUSH
35268: LD_INT 0
35270: ST_TO_ADDR
// if GetTaskList ( sci ) then
35271: LD_VAR 0 1
35275: PPUSH
35276: CALL_OW 437
35280: IFFALSE 35328
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 437
35291: PUSH
35292: LD_INT 1
35294: ARRAY
35295: PUSH
35296: LD_INT 1
35298: ARRAY
35299: PUSH
35300: LD_STRING l
35302: EQUAL
35303: IFFALSE 35328
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35305: LD_ADDR_VAR 0 2
35309: PUSH
35310: LD_VAR 0 1
35314: PPUSH
35315: CALL_OW 437
35319: PUSH
35320: LD_INT 1
35322: ARRAY
35323: PUSH
35324: LD_INT 4
35326: ARRAY
35327: ST_TO_ADDR
// end ;
35328: LD_VAR 0 2
35332: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35333: LD_INT 0
35335: PPUSH
35336: PPUSH
35337: PPUSH
35338: PPUSH
// if not base_units then
35339: LD_VAR 0 1
35343: NOT
35344: IFFALSE 35348
// exit ;
35346: GO 35435
// result := false ;
35348: LD_ADDR_VAR 0 2
35352: PUSH
35353: LD_INT 0
35355: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35356: LD_ADDR_VAR 0 5
35360: PUSH
35361: LD_VAR 0 1
35365: PPUSH
35366: LD_INT 21
35368: PUSH
35369: LD_INT 3
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PPUSH
35376: CALL_OW 72
35380: ST_TO_ADDR
// if not tmp then
35381: LD_VAR 0 5
35385: NOT
35386: IFFALSE 35390
// exit ;
35388: GO 35435
// for i in tmp do
35390: LD_ADDR_VAR 0 3
35394: PUSH
35395: LD_VAR 0 5
35399: PUSH
35400: FOR_IN
35401: IFFALSE 35433
// begin result := EnemyInRange ( i , 22 ) ;
35403: LD_ADDR_VAR 0 2
35407: PUSH
35408: LD_VAR 0 3
35412: PPUSH
35413: LD_INT 22
35415: PPUSH
35416: CALL 33022 0 2
35420: ST_TO_ADDR
// if result then
35421: LD_VAR 0 2
35425: IFFALSE 35431
// exit ;
35427: POP
35428: POP
35429: GO 35435
// end ;
35431: GO 35400
35433: POP
35434: POP
// end ;
35435: LD_VAR 0 2
35439: RET
// export function FilterByTag ( units , tag ) ; begin
35440: LD_INT 0
35442: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35443: LD_ADDR_VAR 0 3
35447: PUSH
35448: LD_VAR 0 1
35452: PPUSH
35453: LD_INT 120
35455: PUSH
35456: LD_VAR 0 2
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PPUSH
35465: CALL_OW 72
35469: ST_TO_ADDR
// end ;
35470: LD_VAR 0 3
35474: RET
// export function IsDriver ( un ) ; begin
35475: LD_INT 0
35477: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35478: LD_ADDR_VAR 0 2
35482: PUSH
35483: LD_VAR 0 1
35487: PUSH
35488: LD_INT 55
35490: PUSH
35491: EMPTY
35492: LIST
35493: PPUSH
35494: CALL_OW 69
35498: IN
35499: ST_TO_ADDR
// end ;
35500: LD_VAR 0 2
35504: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35505: LD_INT 0
35507: PPUSH
35508: PPUSH
// list := [ ] ;
35509: LD_ADDR_VAR 0 5
35513: PUSH
35514: EMPTY
35515: ST_TO_ADDR
// case d of 0 :
35516: LD_VAR 0 3
35520: PUSH
35521: LD_INT 0
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35662
35529: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35530: LD_ADDR_VAR 0 5
35534: PUSH
35535: LD_VAR 0 1
35539: PUSH
35540: LD_INT 4
35542: MINUS
35543: PUSH
35544: LD_VAR 0 2
35548: PUSH
35549: LD_INT 4
35551: MINUS
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: PUSH
35561: LD_VAR 0 1
35565: PUSH
35566: LD_INT 3
35568: MINUS
35569: PUSH
35570: LD_VAR 0 2
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: PUSH
35583: LD_VAR 0 1
35587: PUSH
35588: LD_INT 4
35590: PLUS
35591: PUSH
35592: LD_VAR 0 2
35596: PUSH
35597: LD_INT 4
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: LIST
35604: PUSH
35605: LD_VAR 0 1
35609: PUSH
35610: LD_INT 3
35612: PLUS
35613: PUSH
35614: LD_VAR 0 2
35618: PUSH
35619: LD_INT 3
35621: PLUS
35622: PUSH
35623: LD_INT 5
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: PUSH
35631: LD_VAR 0 1
35635: PUSH
35636: LD_VAR 0 2
35640: PUSH
35641: LD_INT 4
35643: PLUS
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: ST_TO_ADDR
// end ; 1 :
35660: GO 36360
35662: LD_INT 1
35664: DOUBLE
35665: EQUAL
35666: IFTRUE 35670
35668: GO 35803
35670: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35671: LD_ADDR_VAR 0 5
35675: PUSH
35676: LD_VAR 0 1
35680: PUSH
35681: LD_VAR 0 2
35685: PUSH
35686: LD_INT 4
35688: MINUS
35689: PUSH
35690: LD_INT 3
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: PUSH
35698: LD_VAR 0 1
35702: PUSH
35703: LD_INT 3
35705: MINUS
35706: PUSH
35707: LD_VAR 0 2
35711: PUSH
35712: LD_INT 3
35714: MINUS
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: PUSH
35724: LD_VAR 0 1
35728: PUSH
35729: LD_INT 4
35731: MINUS
35732: PUSH
35733: LD_VAR 0 2
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: PUSH
35746: LD_VAR 0 1
35750: PUSH
35751: LD_VAR 0 2
35755: PUSH
35756: LD_INT 3
35758: PLUS
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: PUSH
35768: LD_VAR 0 1
35772: PUSH
35773: LD_INT 4
35775: PLUS
35776: PUSH
35777: LD_VAR 0 2
35781: PUSH
35782: LD_INT 4
35784: PLUS
35785: PUSH
35786: LD_INT 5
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: LIST
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: ST_TO_ADDR
// end ; 2 :
35801: GO 36360
35803: LD_INT 2
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35811
35809: GO 35940
35811: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35812: LD_ADDR_VAR 0 5
35816: PUSH
35817: LD_VAR 0 1
35821: PUSH
35822: LD_VAR 0 2
35826: PUSH
35827: LD_INT 3
35829: MINUS
35830: PUSH
35831: LD_INT 3
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: PUSH
35839: LD_VAR 0 1
35843: PUSH
35844: LD_INT 4
35846: PLUS
35847: PUSH
35848: LD_VAR 0 2
35852: PUSH
35853: LD_INT 4
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: PUSH
35861: LD_VAR 0 1
35865: PUSH
35866: LD_VAR 0 2
35870: PUSH
35871: LD_INT 4
35873: PLUS
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: PUSH
35883: LD_VAR 0 1
35887: PUSH
35888: LD_INT 3
35890: MINUS
35891: PUSH
35892: LD_VAR 0 2
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: PUSH
35905: LD_VAR 0 1
35909: PUSH
35910: LD_INT 4
35912: MINUS
35913: PUSH
35914: LD_VAR 0 2
35918: PUSH
35919: LD_INT 4
35921: MINUS
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: ST_TO_ADDR
// end ; 3 :
35938: GO 36360
35940: LD_INT 3
35942: DOUBLE
35943: EQUAL
35944: IFTRUE 35948
35946: GO 36081
35948: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35949: LD_ADDR_VAR 0 5
35953: PUSH
35954: LD_VAR 0 1
35958: PUSH
35959: LD_INT 3
35961: PLUS
35962: PUSH
35963: LD_VAR 0 2
35967: PUSH
35968: LD_INT 4
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: PUSH
35976: LD_VAR 0 1
35980: PUSH
35981: LD_INT 4
35983: PLUS
35984: PUSH
35985: LD_VAR 0 2
35989: PUSH
35990: LD_INT 4
35992: PLUS
35993: PUSH
35994: LD_INT 5
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: PUSH
36002: LD_VAR 0 1
36006: PUSH
36007: LD_INT 4
36009: MINUS
36010: PUSH
36011: LD_VAR 0 2
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: LIST
36023: PUSH
36024: LD_VAR 0 1
36028: PUSH
36029: LD_VAR 0 2
36033: PUSH
36034: LD_INT 4
36036: MINUS
36037: PUSH
36038: LD_INT 3
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: LIST
36045: PUSH
36046: LD_VAR 0 1
36050: PUSH
36051: LD_INT 3
36053: MINUS
36054: PUSH
36055: LD_VAR 0 2
36059: PUSH
36060: LD_INT 3
36062: MINUS
36063: PUSH
36064: LD_INT 2
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: ST_TO_ADDR
// end ; 4 :
36079: GO 36360
36081: LD_INT 4
36083: DOUBLE
36084: EQUAL
36085: IFTRUE 36089
36087: GO 36222
36089: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36090: LD_ADDR_VAR 0 5
36094: PUSH
36095: LD_VAR 0 1
36099: PUSH
36100: LD_VAR 0 2
36104: PUSH
36105: LD_INT 4
36107: PLUS
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: PUSH
36117: LD_VAR 0 1
36121: PUSH
36122: LD_INT 3
36124: PLUS
36125: PUSH
36126: LD_VAR 0 2
36130: PUSH
36131: LD_INT 3
36133: PLUS
36134: PUSH
36135: LD_INT 5
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: PUSH
36143: LD_VAR 0 1
36147: PUSH
36148: LD_INT 4
36150: PLUS
36151: PUSH
36152: LD_VAR 0 2
36156: PUSH
36157: LD_INT 4
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: PUSH
36165: LD_VAR 0 1
36169: PUSH
36170: LD_VAR 0 2
36174: PUSH
36175: LD_INT 3
36177: MINUS
36178: PUSH
36179: LD_INT 3
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: PUSH
36187: LD_VAR 0 1
36191: PUSH
36192: LD_INT 4
36194: MINUS
36195: PUSH
36196: LD_VAR 0 2
36200: PUSH
36201: LD_INT 4
36203: MINUS
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: LIST
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: ST_TO_ADDR
// end ; 5 :
36220: GO 36360
36222: LD_INT 5
36224: DOUBLE
36225: EQUAL
36226: IFTRUE 36230
36228: GO 36359
36230: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36231: LD_ADDR_VAR 0 5
36235: PUSH
36236: LD_VAR 0 1
36240: PUSH
36241: LD_INT 4
36243: MINUS
36244: PUSH
36245: LD_VAR 0 2
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: PUSH
36258: LD_VAR 0 1
36262: PUSH
36263: LD_VAR 0 2
36267: PUSH
36268: LD_INT 4
36270: MINUS
36271: PUSH
36272: LD_INT 3
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: PUSH
36280: LD_VAR 0 1
36284: PUSH
36285: LD_INT 4
36287: PLUS
36288: PUSH
36289: LD_VAR 0 2
36293: PUSH
36294: LD_INT 4
36296: PLUS
36297: PUSH
36298: LD_INT 5
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: PUSH
36306: LD_VAR 0 1
36310: PUSH
36311: LD_INT 3
36313: PLUS
36314: PUSH
36315: LD_VAR 0 2
36319: PUSH
36320: LD_INT 4
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: PUSH
36328: LD_VAR 0 1
36332: PUSH
36333: LD_VAR 0 2
36337: PUSH
36338: LD_INT 3
36340: PLUS
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: ST_TO_ADDR
// end ; end ;
36357: GO 36360
36359: POP
// result := list ;
36360: LD_ADDR_VAR 0 4
36364: PUSH
36365: LD_VAR 0 5
36369: ST_TO_ADDR
// end ;
36370: LD_VAR 0 4
36374: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36375: LD_INT 0
36377: PPUSH
36378: PPUSH
36379: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36380: LD_VAR 0 1
36384: NOT
36385: PUSH
36386: LD_VAR 0 2
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 3
36399: PUSH
36400: LD_INT 4
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: IN
36409: NOT
36410: OR
36411: IFFALSE 36415
// exit ;
36413: GO 36498
// tmp := [ ] ;
36415: LD_ADDR_VAR 0 5
36419: PUSH
36420: EMPTY
36421: ST_TO_ADDR
// for i in units do
36422: LD_ADDR_VAR 0 4
36426: PUSH
36427: LD_VAR 0 1
36431: PUSH
36432: FOR_IN
36433: IFFALSE 36467
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36435: LD_ADDR_VAR 0 5
36439: PUSH
36440: LD_VAR 0 5
36444: PPUSH
36445: LD_VAR 0 4
36449: PPUSH
36450: LD_VAR 0 2
36454: PPUSH
36455: CALL_OW 259
36459: PPUSH
36460: CALL 37858 0 2
36464: ST_TO_ADDR
36465: GO 36432
36467: POP
36468: POP
// if not tmp then
36469: LD_VAR 0 5
36473: NOT
36474: IFFALSE 36478
// exit ;
36476: GO 36498
// result := SortListByListDesc ( units , tmp ) ;
36478: LD_ADDR_VAR 0 3
36482: PUSH
36483: LD_VAR 0 1
36487: PPUSH
36488: LD_VAR 0 5
36492: PPUSH
36493: CALL_OW 77
36497: ST_TO_ADDR
// end ;
36498: LD_VAR 0 3
36502: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36503: LD_INT 0
36505: PPUSH
36506: PPUSH
36507: PPUSH
// result := false ;
36508: LD_ADDR_VAR 0 3
36512: PUSH
36513: LD_INT 0
36515: ST_TO_ADDR
// if not building then
36516: LD_VAR 0 2
36520: NOT
36521: IFFALSE 36525
// exit ;
36523: GO 36663
// x := GetX ( building ) ;
36525: LD_ADDR_VAR 0 4
36529: PUSH
36530: LD_VAR 0 2
36534: PPUSH
36535: CALL_OW 250
36539: ST_TO_ADDR
// y := GetY ( building ) ;
36540: LD_ADDR_VAR 0 5
36544: PUSH
36545: LD_VAR 0 2
36549: PPUSH
36550: CALL_OW 251
36554: ST_TO_ADDR
// if not x or not y then
36555: LD_VAR 0 4
36559: NOT
36560: PUSH
36561: LD_VAR 0 5
36565: NOT
36566: OR
36567: IFFALSE 36571
// exit ;
36569: GO 36663
// if GetTaskList ( unit ) then
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL_OW 437
36580: IFFALSE 36663
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36582: LD_STRING e
36584: PUSH
36585: LD_VAR 0 1
36589: PPUSH
36590: CALL_OW 437
36594: PUSH
36595: LD_INT 1
36597: ARRAY
36598: PUSH
36599: LD_INT 1
36601: ARRAY
36602: EQUAL
36603: PUSH
36604: LD_VAR 0 4
36608: PUSH
36609: LD_VAR 0 1
36613: PPUSH
36614: CALL_OW 437
36618: PUSH
36619: LD_INT 1
36621: ARRAY
36622: PUSH
36623: LD_INT 2
36625: ARRAY
36626: EQUAL
36627: AND
36628: PUSH
36629: LD_VAR 0 5
36633: PUSH
36634: LD_VAR 0 1
36638: PPUSH
36639: CALL_OW 437
36643: PUSH
36644: LD_INT 1
36646: ARRAY
36647: PUSH
36648: LD_INT 3
36650: ARRAY
36651: EQUAL
36652: AND
36653: IFFALSE 36663
// result := true end ;
36655: LD_ADDR_VAR 0 3
36659: PUSH
36660: LD_INT 1
36662: ST_TO_ADDR
// end ;
36663: LD_VAR 0 3
36667: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36668: LD_INT 0
36670: PPUSH
// result := false ;
36671: LD_ADDR_VAR 0 4
36675: PUSH
36676: LD_INT 0
36678: ST_TO_ADDR
// if GetTaskList ( unit ) then
36679: LD_VAR 0 1
36683: PPUSH
36684: CALL_OW 437
36688: IFFALSE 36771
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36690: LD_STRING M
36692: PUSH
36693: LD_VAR 0 1
36697: PPUSH
36698: CALL_OW 437
36702: PUSH
36703: LD_INT 1
36705: ARRAY
36706: PUSH
36707: LD_INT 1
36709: ARRAY
36710: EQUAL
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_VAR 0 1
36721: PPUSH
36722: CALL_OW 437
36726: PUSH
36727: LD_INT 1
36729: ARRAY
36730: PUSH
36731: LD_INT 2
36733: ARRAY
36734: EQUAL
36735: AND
36736: PUSH
36737: LD_VAR 0 3
36741: PUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: CALL_OW 437
36751: PUSH
36752: LD_INT 1
36754: ARRAY
36755: PUSH
36756: LD_INT 3
36758: ARRAY
36759: EQUAL
36760: AND
36761: IFFALSE 36771
// result := true ;
36763: LD_ADDR_VAR 0 4
36767: PUSH
36768: LD_INT 1
36770: ST_TO_ADDR
// end ; end ;
36771: LD_VAR 0 4
36775: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36776: LD_INT 0
36778: PPUSH
36779: PPUSH
36780: PPUSH
36781: PPUSH
// if not unit or not area then
36782: LD_VAR 0 1
36786: NOT
36787: PUSH
36788: LD_VAR 0 2
36792: NOT
36793: OR
36794: IFFALSE 36798
// exit ;
36796: GO 36961
// tmp := AreaToList ( area , i ) ;
36798: LD_ADDR_VAR 0 6
36802: PUSH
36803: LD_VAR 0 2
36807: PPUSH
36808: LD_VAR 0 5
36812: PPUSH
36813: CALL_OW 517
36817: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36818: LD_ADDR_VAR 0 5
36822: PUSH
36823: DOUBLE
36824: LD_INT 1
36826: DEC
36827: ST_TO_ADDR
36828: LD_VAR 0 6
36832: PUSH
36833: LD_INT 1
36835: ARRAY
36836: PUSH
36837: FOR_TO
36838: IFFALSE 36959
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36840: LD_ADDR_VAR 0 7
36844: PUSH
36845: LD_VAR 0 6
36849: PUSH
36850: LD_INT 1
36852: ARRAY
36853: PUSH
36854: LD_VAR 0 5
36858: ARRAY
36859: PUSH
36860: LD_VAR 0 6
36864: PUSH
36865: LD_INT 2
36867: ARRAY
36868: PUSH
36869: LD_VAR 0 5
36873: ARRAY
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36879: LD_INT 92
36881: PUSH
36882: LD_VAR 0 7
36886: PUSH
36887: LD_INT 1
36889: ARRAY
36890: PUSH
36891: LD_VAR 0 7
36895: PUSH
36896: LD_INT 2
36898: ARRAY
36899: PUSH
36900: LD_INT 3
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: PPUSH
36909: CALL_OW 69
36913: PUSH
36914: LD_INT 0
36916: EQUAL
36917: IFFALSE 36957
// begin PlaceUnitArea ( unit , area , mode ) ;
36919: LD_VAR 0 1
36923: PPUSH
36924: LD_VAR 0 2
36928: PPUSH
36929: LD_VAR 0 3
36933: PPUSH
36934: CALL_OW 49
// result := IsPlaced ( unit ) ;
36938: LD_ADDR_VAR 0 4
36942: PUSH
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL_OW 305
36952: ST_TO_ADDR
// exit ;
36953: POP
36954: POP
36955: GO 36961
// end ; end ;
36957: GO 36837
36959: POP
36960: POP
// end ;
36961: LD_VAR 0 4
36965: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36966: LD_INT 0
36968: PPUSH
36969: PPUSH
36970: PPUSH
// if not side or side > 8 then
36971: LD_VAR 0 1
36975: NOT
36976: PUSH
36977: LD_VAR 0 1
36981: PUSH
36982: LD_INT 8
36984: GREATER
36985: OR
36986: IFFALSE 36990
// exit ;
36988: GO 37177
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36990: LD_ADDR_VAR 0 4
36994: PUSH
36995: LD_INT 22
36997: PUSH
36998: LD_VAR 0 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 21
37009: PUSH
37010: LD_INT 3
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PPUSH
37021: CALL_OW 69
37025: ST_TO_ADDR
// if not tmp then
37026: LD_VAR 0 4
37030: NOT
37031: IFFALSE 37035
// exit ;
37033: GO 37177
// enable_addtolog := true ;
37035: LD_ADDR_OWVAR 81
37039: PUSH
37040: LD_INT 1
37042: ST_TO_ADDR
// AddToLog ( [ ) ;
37043: LD_STRING [
37045: PPUSH
37046: CALL_OW 561
// for i in tmp do
37050: LD_ADDR_VAR 0 3
37054: PUSH
37055: LD_VAR 0 4
37059: PUSH
37060: FOR_IN
37061: IFFALSE 37168
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37063: LD_STRING [
37065: PUSH
37066: LD_VAR 0 3
37070: PPUSH
37071: CALL_OW 266
37075: STR
37076: PUSH
37077: LD_STRING , 
37079: STR
37080: PUSH
37081: LD_VAR 0 3
37085: PPUSH
37086: CALL_OW 250
37090: STR
37091: PUSH
37092: LD_STRING , 
37094: STR
37095: PUSH
37096: LD_VAR 0 3
37100: PPUSH
37101: CALL_OW 251
37105: STR
37106: PUSH
37107: LD_STRING , 
37109: STR
37110: PUSH
37111: LD_VAR 0 3
37115: PPUSH
37116: CALL_OW 254
37120: STR
37121: PUSH
37122: LD_STRING , 
37124: STR
37125: PUSH
37126: LD_VAR 0 3
37130: PPUSH
37131: LD_INT 1
37133: PPUSH
37134: CALL_OW 268
37138: STR
37139: PUSH
37140: LD_STRING , 
37142: STR
37143: PUSH
37144: LD_VAR 0 3
37148: PPUSH
37149: LD_INT 2
37151: PPUSH
37152: CALL_OW 268
37156: STR
37157: PUSH
37158: LD_STRING ],
37160: STR
37161: PPUSH
37162: CALL_OW 561
// end ;
37166: GO 37060
37168: POP
37169: POP
// AddToLog ( ]; ) ;
37170: LD_STRING ];
37172: PPUSH
37173: CALL_OW 561
// end ;
37177: LD_VAR 0 2
37181: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37182: LD_INT 0
37184: PPUSH
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
// if not area or not rate or not max then
37189: LD_VAR 0 1
37193: NOT
37194: PUSH
37195: LD_VAR 0 2
37199: NOT
37200: OR
37201: PUSH
37202: LD_VAR 0 4
37206: NOT
37207: OR
37208: IFFALSE 37212
// exit ;
37210: GO 37401
// while 1 do
37212: LD_INT 1
37214: IFFALSE 37401
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37216: LD_ADDR_VAR 0 9
37220: PUSH
37221: LD_VAR 0 1
37225: PPUSH
37226: LD_INT 1
37228: PPUSH
37229: CALL_OW 287
37233: PUSH
37234: LD_INT 10
37236: MUL
37237: ST_TO_ADDR
// r := rate / 10 ;
37238: LD_ADDR_VAR 0 7
37242: PUSH
37243: LD_VAR 0 2
37247: PUSH
37248: LD_INT 10
37250: DIVREAL
37251: ST_TO_ADDR
// time := 1 1$00 ;
37252: LD_ADDR_VAR 0 8
37256: PUSH
37257: LD_INT 2100
37259: ST_TO_ADDR
// if amount < min then
37260: LD_VAR 0 9
37264: PUSH
37265: LD_VAR 0 3
37269: LESS
37270: IFFALSE 37288
// r := r * 2 else
37272: LD_ADDR_VAR 0 7
37276: PUSH
37277: LD_VAR 0 7
37281: PUSH
37282: LD_INT 2
37284: MUL
37285: ST_TO_ADDR
37286: GO 37314
// if amount > max then
37288: LD_VAR 0 9
37292: PUSH
37293: LD_VAR 0 4
37297: GREATER
37298: IFFALSE 37314
// r := r / 2 ;
37300: LD_ADDR_VAR 0 7
37304: PUSH
37305: LD_VAR 0 7
37309: PUSH
37310: LD_INT 2
37312: DIVREAL
37313: ST_TO_ADDR
// time := time / r ;
37314: LD_ADDR_VAR 0 8
37318: PUSH
37319: LD_VAR 0 8
37323: PUSH
37324: LD_VAR 0 7
37328: DIVREAL
37329: ST_TO_ADDR
// if time < 0 then
37330: LD_VAR 0 8
37334: PUSH
37335: LD_INT 0
37337: LESS
37338: IFFALSE 37355
// time := time * - 1 ;
37340: LD_ADDR_VAR 0 8
37344: PUSH
37345: LD_VAR 0 8
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: MUL
37354: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37355: LD_VAR 0 8
37359: PUSH
37360: LD_INT 35
37362: PPUSH
37363: LD_INT 875
37365: PPUSH
37366: CALL_OW 12
37370: PLUS
37371: PPUSH
37372: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37376: LD_INT 1
37378: PPUSH
37379: LD_INT 5
37381: PPUSH
37382: CALL_OW 12
37386: PPUSH
37387: LD_VAR 0 1
37391: PPUSH
37392: LD_INT 1
37394: PPUSH
37395: CALL_OW 55
// end ;
37399: GO 37212
// end ;
37401: LD_VAR 0 5
37405: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37406: LD_INT 0
37408: PPUSH
37409: PPUSH
37410: PPUSH
37411: PPUSH
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
// if not turrets or not factories then
37416: LD_VAR 0 1
37420: NOT
37421: PUSH
37422: LD_VAR 0 2
37426: NOT
37427: OR
37428: IFFALSE 37432
// exit ;
37430: GO 37739
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37432: LD_ADDR_VAR 0 10
37436: PUSH
37437: LD_INT 5
37439: PUSH
37440: LD_INT 6
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: LD_INT 4
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 3
37459: PUSH
37460: LD_INT 5
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 24
37474: PUSH
37475: LD_INT 25
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 23
37484: PUSH
37485: LD_INT 27
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 42
37498: PUSH
37499: LD_INT 43
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 44
37508: PUSH
37509: LD_INT 46
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 45
37518: PUSH
37519: LD_INT 47
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: ST_TO_ADDR
// result := [ ] ;
37536: LD_ADDR_VAR 0 3
37540: PUSH
37541: EMPTY
37542: ST_TO_ADDR
// for i in turrets do
37543: LD_ADDR_VAR 0 4
37547: PUSH
37548: LD_VAR 0 1
37552: PUSH
37553: FOR_IN
37554: IFFALSE 37737
// begin nat := GetNation ( i ) ;
37556: LD_ADDR_VAR 0 7
37560: PUSH
37561: LD_VAR 0 4
37565: PPUSH
37566: CALL_OW 248
37570: ST_TO_ADDR
// weapon := 0 ;
37571: LD_ADDR_VAR 0 8
37575: PUSH
37576: LD_INT 0
37578: ST_TO_ADDR
// if not nat then
37579: LD_VAR 0 7
37583: NOT
37584: IFFALSE 37588
// continue ;
37586: GO 37553
// for j in list [ nat ] do
37588: LD_ADDR_VAR 0 5
37592: PUSH
37593: LD_VAR 0 10
37597: PUSH
37598: LD_VAR 0 7
37602: ARRAY
37603: PUSH
37604: FOR_IN
37605: IFFALSE 37646
// if GetBWeapon ( i ) = j [ 1 ] then
37607: LD_VAR 0 4
37611: PPUSH
37612: CALL_OW 269
37616: PUSH
37617: LD_VAR 0 5
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: EQUAL
37626: IFFALSE 37644
// begin weapon := j [ 2 ] ;
37628: LD_ADDR_VAR 0 8
37632: PUSH
37633: LD_VAR 0 5
37637: PUSH
37638: LD_INT 2
37640: ARRAY
37641: ST_TO_ADDR
// break ;
37642: GO 37646
// end ;
37644: GO 37604
37646: POP
37647: POP
// if not weapon then
37648: LD_VAR 0 8
37652: NOT
37653: IFFALSE 37657
// continue ;
37655: GO 37553
// for k in factories do
37657: LD_ADDR_VAR 0 6
37661: PUSH
37662: LD_VAR 0 2
37666: PUSH
37667: FOR_IN
37668: IFFALSE 37733
// begin weapons := AvailableWeaponList ( k ) ;
37670: LD_ADDR_VAR 0 9
37674: PUSH
37675: LD_VAR 0 6
37679: PPUSH
37680: CALL_OW 478
37684: ST_TO_ADDR
// if not weapons then
37685: LD_VAR 0 9
37689: NOT
37690: IFFALSE 37694
// continue ;
37692: GO 37667
// if weapon in weapons then
37694: LD_VAR 0 8
37698: PUSH
37699: LD_VAR 0 9
37703: IN
37704: IFFALSE 37731
// begin result := [ i , weapon ] ;
37706: LD_ADDR_VAR 0 3
37710: PUSH
37711: LD_VAR 0 4
37715: PUSH
37716: LD_VAR 0 8
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: ST_TO_ADDR
// exit ;
37725: POP
37726: POP
37727: POP
37728: POP
37729: GO 37739
// end ; end ;
37731: GO 37667
37733: POP
37734: POP
// end ;
37735: GO 37553
37737: POP
37738: POP
// end ;
37739: LD_VAR 0 3
37743: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37744: LD_INT 0
37746: PPUSH
// if not side or side > 8 then
37747: LD_VAR 0 3
37751: NOT
37752: PUSH
37753: LD_VAR 0 3
37757: PUSH
37758: LD_INT 8
37760: GREATER
37761: OR
37762: IFFALSE 37766
// exit ;
37764: GO 37825
// if not range then
37766: LD_VAR 0 4
37770: NOT
37771: IFFALSE 37782
// range := - 12 ;
37773: LD_ADDR_VAR 0 4
37777: PUSH
37778: LD_INT 12
37780: NEG
37781: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37782: LD_VAR 0 1
37786: PPUSH
37787: LD_VAR 0 2
37791: PPUSH
37792: LD_VAR 0 3
37796: PPUSH
37797: LD_VAR 0 4
37801: PPUSH
37802: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37806: LD_VAR 0 1
37810: PPUSH
37811: LD_VAR 0 2
37815: PPUSH
37816: LD_VAR 0 3
37820: PPUSH
37821: CALL_OW 331
// end ;
37825: LD_VAR 0 5
37829: RET
// export function Video ( mode ) ; begin
37830: LD_INT 0
37832: PPUSH
// ingame_video = mode ;
37833: LD_ADDR_OWVAR 52
37837: PUSH
37838: LD_VAR 0 1
37842: ST_TO_ADDR
// interface_hidden = mode ;
37843: LD_ADDR_OWVAR 54
37847: PUSH
37848: LD_VAR 0 1
37852: ST_TO_ADDR
// end ;
37853: LD_VAR 0 2
37857: RET
// export function Join ( array , element ) ; begin
37858: LD_INT 0
37860: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37861: LD_ADDR_VAR 0 3
37865: PUSH
37866: LD_VAR 0 1
37870: PPUSH
37871: LD_VAR 0 1
37875: PUSH
37876: LD_INT 1
37878: PLUS
37879: PPUSH
37880: LD_VAR 0 2
37884: PPUSH
37885: CALL_OW 1
37889: ST_TO_ADDR
// end ;
37890: LD_VAR 0 3
37894: RET
// export function JoinUnion ( array , element ) ; begin
37895: LD_INT 0
37897: PPUSH
// result := array union element ;
37898: LD_ADDR_VAR 0 3
37902: PUSH
37903: LD_VAR 0 1
37907: PUSH
37908: LD_VAR 0 2
37912: UNION
37913: ST_TO_ADDR
// end ;
37914: LD_VAR 0 3
37918: RET
// export function GetBehemoths ( side ) ; begin
37919: LD_INT 0
37921: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37922: LD_ADDR_VAR 0 2
37926: PUSH
37927: LD_INT 22
37929: PUSH
37930: LD_VAR 0 1
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 31
37941: PUSH
37942: LD_INT 25
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PPUSH
37953: CALL_OW 69
37957: ST_TO_ADDR
// end ;
37958: LD_VAR 0 2
37962: RET
// export function Shuffle ( array ) ; var i , index ; begin
37963: LD_INT 0
37965: PPUSH
37966: PPUSH
37967: PPUSH
// result := [ ] ;
37968: LD_ADDR_VAR 0 2
37972: PUSH
37973: EMPTY
37974: ST_TO_ADDR
// if not array then
37975: LD_VAR 0 1
37979: NOT
37980: IFFALSE 37984
// exit ;
37982: GO 38083
// Randomize ;
37984: CALL_OW 10
// for i = array downto 1 do
37988: LD_ADDR_VAR 0 3
37992: PUSH
37993: DOUBLE
37994: LD_VAR 0 1
37998: INC
37999: ST_TO_ADDR
38000: LD_INT 1
38002: PUSH
38003: FOR_DOWNTO
38004: IFFALSE 38081
// begin index := rand ( 1 , array ) ;
38006: LD_ADDR_VAR 0 4
38010: PUSH
38011: LD_INT 1
38013: PPUSH
38014: LD_VAR 0 1
38018: PPUSH
38019: CALL_OW 12
38023: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38024: LD_ADDR_VAR 0 2
38028: PUSH
38029: LD_VAR 0 2
38033: PPUSH
38034: LD_VAR 0 2
38038: PUSH
38039: LD_INT 1
38041: PLUS
38042: PPUSH
38043: LD_VAR 0 1
38047: PUSH
38048: LD_VAR 0 4
38052: ARRAY
38053: PPUSH
38054: CALL_OW 2
38058: ST_TO_ADDR
// array := Delete ( array , index ) ;
38059: LD_ADDR_VAR 0 1
38063: PUSH
38064: LD_VAR 0 1
38068: PPUSH
38069: LD_VAR 0 4
38073: PPUSH
38074: CALL_OW 3
38078: ST_TO_ADDR
// end ;
38079: GO 38003
38081: POP
38082: POP
// end ;
38083: LD_VAR 0 2
38087: RET
// export function GetBaseMaterials ( base ) ; begin
38088: LD_INT 0
38090: PPUSH
// result := [ 0 , 0 , 0 ] ;
38091: LD_ADDR_VAR 0 2
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// if not base then
38110: LD_VAR 0 1
38114: NOT
38115: IFFALSE 38119
// exit ;
38117: GO 38168
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38119: LD_ADDR_VAR 0 2
38123: PUSH
38124: LD_VAR 0 1
38128: PPUSH
38129: LD_INT 1
38131: PPUSH
38132: CALL_OW 275
38136: PUSH
38137: LD_VAR 0 1
38141: PPUSH
38142: LD_INT 2
38144: PPUSH
38145: CALL_OW 275
38149: PUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: LD_INT 3
38157: PPUSH
38158: CALL_OW 275
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: ST_TO_ADDR
// end ;
38168: LD_VAR 0 2
38172: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38173: LD_INT 0
38175: PPUSH
38176: PPUSH
// result := array ;
38177: LD_ADDR_VAR 0 3
38181: PUSH
38182: LD_VAR 0 1
38186: ST_TO_ADDR
// if size >= result then
38187: LD_VAR 0 2
38191: PUSH
38192: LD_VAR 0 3
38196: GREATEREQUAL
38197: IFFALSE 38201
// exit ;
38199: GO 38251
// if size then
38201: LD_VAR 0 2
38205: IFFALSE 38251
// for i := array downto size do
38207: LD_ADDR_VAR 0 4
38211: PUSH
38212: DOUBLE
38213: LD_VAR 0 1
38217: INC
38218: ST_TO_ADDR
38219: LD_VAR 0 2
38223: PUSH
38224: FOR_DOWNTO
38225: IFFALSE 38249
// result := Delete ( result , result ) ;
38227: LD_ADDR_VAR 0 3
38231: PUSH
38232: LD_VAR 0 3
38236: PPUSH
38237: LD_VAR 0 3
38241: PPUSH
38242: CALL_OW 3
38246: ST_TO_ADDR
38247: GO 38224
38249: POP
38250: POP
// end ;
38251: LD_VAR 0 3
38255: RET
// export function ComExit ( unit ) ; var tmp ; begin
38256: LD_INT 0
38258: PPUSH
38259: PPUSH
// if not IsInUnit ( unit ) then
38260: LD_VAR 0 1
38264: PPUSH
38265: CALL_OW 310
38269: NOT
38270: IFFALSE 38274
// exit ;
38272: GO 38334
// tmp := IsInUnit ( unit ) ;
38274: LD_ADDR_VAR 0 3
38278: PUSH
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 310
38288: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38289: LD_VAR 0 3
38293: PPUSH
38294: CALL_OW 247
38298: PUSH
38299: LD_INT 2
38301: EQUAL
38302: IFFALSE 38315
// ComExitVehicle ( unit ) else
38304: LD_VAR 0 1
38308: PPUSH
38309: CALL_OW 121
38313: GO 38324
// ComExitBuilding ( unit ) ;
38315: LD_VAR 0 1
38319: PPUSH
38320: CALL_OW 122
// result := tmp ;
38324: LD_ADDR_VAR 0 2
38328: PUSH
38329: LD_VAR 0 3
38333: ST_TO_ADDR
// end ;
38334: LD_VAR 0 2
38338: RET
// export function ComExitAll ( units ) ; var i ; begin
38339: LD_INT 0
38341: PPUSH
38342: PPUSH
// if not units then
38343: LD_VAR 0 1
38347: NOT
38348: IFFALSE 38352
// exit ;
38350: GO 38378
// for i in units do
38352: LD_ADDR_VAR 0 3
38356: PUSH
38357: LD_VAR 0 1
38361: PUSH
38362: FOR_IN
38363: IFFALSE 38376
// ComExit ( i ) ;
38365: LD_VAR 0 3
38369: PPUSH
38370: CALL 38256 0 1
38374: GO 38362
38376: POP
38377: POP
// end ;
38378: LD_VAR 0 2
38382: RET
// export function ResetHc ; begin
38383: LD_INT 0
38385: PPUSH
// InitHc ;
38386: CALL_OW 19
// hc_importance := 0 ;
38390: LD_ADDR_OWVAR 32
38394: PUSH
38395: LD_INT 0
38397: ST_TO_ADDR
// end ;
38398: LD_VAR 0 1
38402: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38403: LD_INT 0
38405: PPUSH
38406: PPUSH
38407: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38408: LD_ADDR_VAR 0 6
38412: PUSH
38413: LD_VAR 0 1
38417: PUSH
38418: LD_VAR 0 3
38422: PLUS
38423: PUSH
38424: LD_INT 2
38426: DIV
38427: ST_TO_ADDR
// if _x < 0 then
38428: LD_VAR 0 6
38432: PUSH
38433: LD_INT 0
38435: LESS
38436: IFFALSE 38453
// _x := _x * - 1 ;
38438: LD_ADDR_VAR 0 6
38442: PUSH
38443: LD_VAR 0 6
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: MUL
38452: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38453: LD_ADDR_VAR 0 7
38457: PUSH
38458: LD_VAR 0 2
38462: PUSH
38463: LD_VAR 0 4
38467: PLUS
38468: PUSH
38469: LD_INT 2
38471: DIV
38472: ST_TO_ADDR
// if _y < 0 then
38473: LD_VAR 0 7
38477: PUSH
38478: LD_INT 0
38480: LESS
38481: IFFALSE 38498
// _y := _y * - 1 ;
38483: LD_ADDR_VAR 0 7
38487: PUSH
38488: LD_VAR 0 7
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: MUL
38497: ST_TO_ADDR
// result := [ _x , _y ] ;
38498: LD_ADDR_VAR 0 5
38502: PUSH
38503: LD_VAR 0 6
38507: PUSH
38508: LD_VAR 0 7
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// end ;
38517: LD_VAR 0 5
38521: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38522: LD_INT 0
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
// task := GetTaskList ( unit ) ;
38528: LD_ADDR_VAR 0 7
38532: PUSH
38533: LD_VAR 0 1
38537: PPUSH
38538: CALL_OW 437
38542: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38543: LD_VAR 0 7
38547: NOT
38548: PUSH
38549: LD_VAR 0 1
38553: PPUSH
38554: LD_VAR 0 2
38558: PPUSH
38559: CALL_OW 308
38563: NOT
38564: AND
38565: IFFALSE 38569
// exit ;
38567: GO 38687
// if IsInArea ( unit , area ) then
38569: LD_VAR 0 1
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: CALL_OW 308
38583: IFFALSE 38601
// begin ComMoveToArea ( unit , goAway ) ;
38585: LD_VAR 0 1
38589: PPUSH
38590: LD_VAR 0 3
38594: PPUSH
38595: CALL_OW 113
// exit ;
38599: GO 38687
// end ; if task [ 1 ] [ 1 ] <> M then
38601: LD_VAR 0 7
38605: PUSH
38606: LD_INT 1
38608: ARRAY
38609: PUSH
38610: LD_INT 1
38612: ARRAY
38613: PUSH
38614: LD_STRING M
38616: NONEQUAL
38617: IFFALSE 38621
// exit ;
38619: GO 38687
// x := task [ 1 ] [ 2 ] ;
38621: LD_ADDR_VAR 0 5
38625: PUSH
38626: LD_VAR 0 7
38630: PUSH
38631: LD_INT 1
38633: ARRAY
38634: PUSH
38635: LD_INT 2
38637: ARRAY
38638: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38639: LD_ADDR_VAR 0 6
38643: PUSH
38644: LD_VAR 0 7
38648: PUSH
38649: LD_INT 1
38651: ARRAY
38652: PUSH
38653: LD_INT 3
38655: ARRAY
38656: ST_TO_ADDR
// if InArea ( x , y , area ) then
38657: LD_VAR 0 5
38661: PPUSH
38662: LD_VAR 0 6
38666: PPUSH
38667: LD_VAR 0 2
38671: PPUSH
38672: CALL_OW 309
38676: IFFALSE 38687
// ComStop ( unit ) ;
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 141
// end ;
38687: LD_VAR 0 4
38691: RET
// export function Abs ( value ) ; begin
38692: LD_INT 0
38694: PPUSH
// result := value ;
38695: LD_ADDR_VAR 0 2
38699: PUSH
38700: LD_VAR 0 1
38704: ST_TO_ADDR
// if value < 0 then
38705: LD_VAR 0 1
38709: PUSH
38710: LD_INT 0
38712: LESS
38713: IFFALSE 38730
// result := value * - 1 ;
38715: LD_ADDR_VAR 0 2
38719: PUSH
38720: LD_VAR 0 1
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: MUL
38729: ST_TO_ADDR
// end ;
38730: LD_VAR 0 2
38734: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38735: LD_INT 0
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
38741: PPUSH
38742: PPUSH
38743: PPUSH
38744: PPUSH
// if not unit or not building then
38745: LD_VAR 0 1
38749: NOT
38750: PUSH
38751: LD_VAR 0 2
38755: NOT
38756: OR
38757: IFFALSE 38761
// exit ;
38759: GO 38987
// x := GetX ( building ) ;
38761: LD_ADDR_VAR 0 4
38765: PUSH
38766: LD_VAR 0 2
38770: PPUSH
38771: CALL_OW 250
38775: ST_TO_ADDR
// y := GetY ( building ) ;
38776: LD_ADDR_VAR 0 6
38780: PUSH
38781: LD_VAR 0 2
38785: PPUSH
38786: CALL_OW 251
38790: ST_TO_ADDR
// d := GetDir ( building ) ;
38791: LD_ADDR_VAR 0 8
38795: PUSH
38796: LD_VAR 0 2
38800: PPUSH
38801: CALL_OW 254
38805: ST_TO_ADDR
// r := 4 ;
38806: LD_ADDR_VAR 0 9
38810: PUSH
38811: LD_INT 4
38813: ST_TO_ADDR
// for i := 1 to 5 do
38814: LD_ADDR_VAR 0 10
38818: PUSH
38819: DOUBLE
38820: LD_INT 1
38822: DEC
38823: ST_TO_ADDR
38824: LD_INT 5
38826: PUSH
38827: FOR_TO
38828: IFFALSE 38985
// begin _x := ShiftX ( x , d , r + i ) ;
38830: LD_ADDR_VAR 0 5
38834: PUSH
38835: LD_VAR 0 4
38839: PPUSH
38840: LD_VAR 0 8
38844: PPUSH
38845: LD_VAR 0 9
38849: PUSH
38850: LD_VAR 0 10
38854: PLUS
38855: PPUSH
38856: CALL_OW 272
38860: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38861: LD_ADDR_VAR 0 7
38865: PUSH
38866: LD_VAR 0 6
38870: PPUSH
38871: LD_VAR 0 8
38875: PPUSH
38876: LD_VAR 0 9
38880: PUSH
38881: LD_VAR 0 10
38885: PLUS
38886: PPUSH
38887: CALL_OW 273
38891: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38892: LD_VAR 0 5
38896: PPUSH
38897: LD_VAR 0 7
38901: PPUSH
38902: CALL_OW 488
38906: PUSH
38907: LD_VAR 0 5
38911: PPUSH
38912: LD_VAR 0 7
38916: PPUSH
38917: CALL_OW 428
38921: PPUSH
38922: CALL_OW 247
38926: PUSH
38927: LD_INT 3
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: IN
38937: NOT
38938: AND
38939: IFFALSE 38983
// begin ComMoveXY ( unit , _x , _y ) ;
38941: LD_VAR 0 1
38945: PPUSH
38946: LD_VAR 0 5
38950: PPUSH
38951: LD_VAR 0 7
38955: PPUSH
38956: CALL_OW 111
// result := [ _x , _y ] ;
38960: LD_ADDR_VAR 0 3
38964: PUSH
38965: LD_VAR 0 5
38969: PUSH
38970: LD_VAR 0 7
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: ST_TO_ADDR
// exit ;
38979: POP
38980: POP
38981: GO 38987
// end ; end ;
38983: GO 38827
38985: POP
38986: POP
// end ;
38987: LD_VAR 0 3
38991: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38992: LD_INT 0
38994: PPUSH
38995: PPUSH
38996: PPUSH
// result := 0 ;
38997: LD_ADDR_VAR 0 3
39001: PUSH
39002: LD_INT 0
39004: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39005: LD_VAR 0 1
39009: PUSH
39010: LD_INT 0
39012: LESS
39013: PUSH
39014: LD_VAR 0 1
39018: PUSH
39019: LD_INT 8
39021: GREATER
39022: OR
39023: PUSH
39024: LD_VAR 0 2
39028: PUSH
39029: LD_INT 0
39031: LESS
39032: OR
39033: PUSH
39034: LD_VAR 0 2
39038: PUSH
39039: LD_INT 8
39041: GREATER
39042: OR
39043: IFFALSE 39047
// exit ;
39045: GO 39122
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39047: LD_ADDR_VAR 0 4
39051: PUSH
39052: LD_INT 22
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PPUSH
39064: CALL_OW 69
39068: PUSH
39069: FOR_IN
39070: IFFALSE 39120
// begin un := UnitShoot ( i ) ;
39072: LD_ADDR_VAR 0 5
39076: PUSH
39077: LD_VAR 0 4
39081: PPUSH
39082: CALL_OW 504
39086: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39087: LD_VAR 0 5
39091: PPUSH
39092: CALL_OW 255
39096: PUSH
39097: LD_VAR 0 1
39101: EQUAL
39102: IFFALSE 39118
// begin result := un ;
39104: LD_ADDR_VAR 0 3
39108: PUSH
39109: LD_VAR 0 5
39113: ST_TO_ADDR
// exit ;
39114: POP
39115: POP
39116: GO 39122
// end ; end ;
39118: GO 39069
39120: POP
39121: POP
// end ;
39122: LD_VAR 0 3
39126: RET
// export function GetCargoBay ( units ) ; begin
39127: LD_INT 0
39129: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39130: LD_ADDR_VAR 0 2
39134: PUSH
39135: LD_VAR 0 1
39139: PPUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 34
39145: PUSH
39146: LD_INT 12
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 34
39155: PUSH
39156: LD_INT 51
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 34
39165: PUSH
39166: LD_INT 32
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 34
39175: PUSH
39176: LD_INT 89
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: PPUSH
39190: CALL_OW 72
39194: ST_TO_ADDR
// end ;
39195: LD_VAR 0 2
39199: RET
// export function Negate ( value ) ; begin
39200: LD_INT 0
39202: PPUSH
// result := not value ;
39203: LD_ADDR_VAR 0 2
39207: PUSH
39208: LD_VAR 0 1
39212: NOT
39213: ST_TO_ADDR
// end ;
39214: LD_VAR 0 2
39218: RET
// export function Inc ( value ) ; begin
39219: LD_INT 0
39221: PPUSH
// result := value + 1 ;
39222: LD_ADDR_VAR 0 2
39226: PUSH
39227: LD_VAR 0 1
39231: PUSH
39232: LD_INT 1
39234: PLUS
39235: ST_TO_ADDR
// end ;
39236: LD_VAR 0 2
39240: RET
// export function Dec ( value ) ; begin
39241: LD_INT 0
39243: PPUSH
// result := value - 1 ;
39244: LD_ADDR_VAR 0 2
39248: PUSH
39249: LD_VAR 0 1
39253: PUSH
39254: LD_INT 1
39256: MINUS
39257: ST_TO_ADDR
// end ;
39258: LD_VAR 0 2
39262: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39263: LD_INT 0
39265: PPUSH
39266: PPUSH
39267: PPUSH
39268: PPUSH
39269: PPUSH
39270: PPUSH
39271: PPUSH
39272: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39273: LD_VAR 0 1
39277: PPUSH
39278: LD_VAR 0 2
39282: PPUSH
39283: CALL_OW 488
39287: NOT
39288: PUSH
39289: LD_VAR 0 3
39293: PPUSH
39294: LD_VAR 0 4
39298: PPUSH
39299: CALL_OW 488
39303: NOT
39304: OR
39305: IFFALSE 39318
// begin result := - 1 ;
39307: LD_ADDR_VAR 0 5
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: ST_TO_ADDR
// exit ;
39316: GO 39553
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39318: LD_ADDR_VAR 0 12
39322: PUSH
39323: LD_VAR 0 1
39327: PPUSH
39328: LD_VAR 0 2
39332: PPUSH
39333: LD_VAR 0 3
39337: PPUSH
39338: LD_VAR 0 4
39342: PPUSH
39343: CALL 38403 0 4
39347: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39348: LD_ADDR_VAR 0 11
39352: PUSH
39353: LD_VAR 0 1
39357: PPUSH
39358: LD_VAR 0 2
39362: PPUSH
39363: LD_VAR 0 12
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PPUSH
39372: LD_VAR 0 12
39376: PUSH
39377: LD_INT 2
39379: ARRAY
39380: PPUSH
39381: CALL_OW 298
39385: ST_TO_ADDR
// distance := 9999 ;
39386: LD_ADDR_VAR 0 10
39390: PUSH
39391: LD_INT 9999
39393: ST_TO_ADDR
// for i := 0 to 5 do
39394: LD_ADDR_VAR 0 6
39398: PUSH
39399: DOUBLE
39400: LD_INT 0
39402: DEC
39403: ST_TO_ADDR
39404: LD_INT 5
39406: PUSH
39407: FOR_TO
39408: IFFALSE 39551
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39410: LD_ADDR_VAR 0 7
39414: PUSH
39415: LD_VAR 0 1
39419: PPUSH
39420: LD_VAR 0 6
39424: PPUSH
39425: LD_VAR 0 11
39429: PPUSH
39430: CALL_OW 272
39434: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39435: LD_ADDR_VAR 0 8
39439: PUSH
39440: LD_VAR 0 2
39444: PPUSH
39445: LD_VAR 0 6
39449: PPUSH
39450: LD_VAR 0 11
39454: PPUSH
39455: CALL_OW 273
39459: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39460: LD_VAR 0 7
39464: PPUSH
39465: LD_VAR 0 8
39469: PPUSH
39470: CALL_OW 488
39474: NOT
39475: IFFALSE 39479
// continue ;
39477: GO 39407
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39479: LD_ADDR_VAR 0 9
39483: PUSH
39484: LD_VAR 0 12
39488: PUSH
39489: LD_INT 1
39491: ARRAY
39492: PPUSH
39493: LD_VAR 0 12
39497: PUSH
39498: LD_INT 2
39500: ARRAY
39501: PPUSH
39502: LD_VAR 0 7
39506: PPUSH
39507: LD_VAR 0 8
39511: PPUSH
39512: CALL_OW 298
39516: ST_TO_ADDR
// if tmp < distance then
39517: LD_VAR 0 9
39521: PUSH
39522: LD_VAR 0 10
39526: LESS
39527: IFFALSE 39549
// begin result := i ;
39529: LD_ADDR_VAR 0 5
39533: PUSH
39534: LD_VAR 0 6
39538: ST_TO_ADDR
// distance := tmp ;
39539: LD_ADDR_VAR 0 10
39543: PUSH
39544: LD_VAR 0 9
39548: ST_TO_ADDR
// end ; end ;
39549: GO 39407
39551: POP
39552: POP
// end ;
39553: LD_VAR 0 5
39557: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39558: LD_INT 0
39560: PPUSH
39561: PPUSH
// if not driver or not IsInUnit ( driver ) then
39562: LD_VAR 0 1
39566: NOT
39567: PUSH
39568: LD_VAR 0 1
39572: PPUSH
39573: CALL_OW 310
39577: NOT
39578: OR
39579: IFFALSE 39583
// exit ;
39581: GO 39673
// vehicle := IsInUnit ( driver ) ;
39583: LD_ADDR_VAR 0 3
39587: PUSH
39588: LD_VAR 0 1
39592: PPUSH
39593: CALL_OW 310
39597: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39598: LD_VAR 0 1
39602: PPUSH
39603: LD_STRING \
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: PUSH
39633: LD_STRING E
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_VAR 0 3
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PPUSH
39669: CALL_OW 446
// end ;
39673: LD_VAR 0 2
39677: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39678: LD_INT 0
39680: PPUSH
39681: PPUSH
// if not driver or not IsInUnit ( driver ) then
39682: LD_VAR 0 1
39686: NOT
39687: PUSH
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL_OW 310
39697: NOT
39698: OR
39699: IFFALSE 39703
// exit ;
39701: GO 39793
// vehicle := IsInUnit ( driver ) ;
39703: LD_ADDR_VAR 0 3
39707: PUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 310
39717: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39718: LD_VAR 0 1
39722: PPUSH
39723: LD_STRING \
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: PUSH
39753: LD_STRING E
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: LD_VAR 0 3
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PPUSH
39789: CALL_OW 447
// end ;
39793: LD_VAR 0 2
39797: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39798: LD_INT 0
39800: PPUSH
39801: PPUSH
39802: PPUSH
// tmp := [ ] ;
39803: LD_ADDR_VAR 0 5
39807: PUSH
39808: EMPTY
39809: ST_TO_ADDR
// for i in units do
39810: LD_ADDR_VAR 0 4
39814: PUSH
39815: LD_VAR 0 1
39819: PUSH
39820: FOR_IN
39821: IFFALSE 39859
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39823: LD_ADDR_VAR 0 5
39827: PUSH
39828: LD_VAR 0 5
39832: PPUSH
39833: LD_VAR 0 5
39837: PUSH
39838: LD_INT 1
39840: PLUS
39841: PPUSH
39842: LD_VAR 0 4
39846: PPUSH
39847: CALL_OW 256
39851: PPUSH
39852: CALL_OW 2
39856: ST_TO_ADDR
39857: GO 39820
39859: POP
39860: POP
// if not tmp then
39861: LD_VAR 0 5
39865: NOT
39866: IFFALSE 39870
// exit ;
39868: GO 39918
// if asc then
39870: LD_VAR 0 2
39874: IFFALSE 39898
// result := SortListByListAsc ( units , tmp ) else
39876: LD_ADDR_VAR 0 3
39880: PUSH
39881: LD_VAR 0 1
39885: PPUSH
39886: LD_VAR 0 5
39890: PPUSH
39891: CALL_OW 76
39895: ST_TO_ADDR
39896: GO 39918
// result := SortListByListDesc ( units , tmp ) ;
39898: LD_ADDR_VAR 0 3
39902: PUSH
39903: LD_VAR 0 1
39907: PPUSH
39908: LD_VAR 0 5
39912: PPUSH
39913: CALL_OW 77
39917: ST_TO_ADDR
// end ;
39918: LD_VAR 0 3
39922: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39923: LD_INT 0
39925: PPUSH
39926: PPUSH
// task := GetTaskList ( mech ) ;
39927: LD_ADDR_VAR 0 4
39931: PUSH
39932: LD_VAR 0 1
39936: PPUSH
39937: CALL_OW 437
39941: ST_TO_ADDR
// if not task then
39942: LD_VAR 0 4
39946: NOT
39947: IFFALSE 39951
// exit ;
39949: GO 39993
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39951: LD_ADDR_VAR 0 3
39955: PUSH
39956: LD_VAR 0 4
39960: PUSH
39961: LD_INT 1
39963: ARRAY
39964: PUSH
39965: LD_INT 1
39967: ARRAY
39968: PUSH
39969: LD_STRING r
39971: EQUAL
39972: PUSH
39973: LD_VAR 0 4
39977: PUSH
39978: LD_INT 1
39980: ARRAY
39981: PUSH
39982: LD_INT 4
39984: ARRAY
39985: PUSH
39986: LD_VAR 0 2
39990: EQUAL
39991: AND
39992: ST_TO_ADDR
// end ;
39993: LD_VAR 0 3
39997: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39998: LD_INT 0
40000: PPUSH
// SetDir ( unit , d ) ;
40001: LD_VAR 0 1
40005: PPUSH
40006: LD_VAR 0 4
40010: PPUSH
40011: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40015: LD_VAR 0 1
40019: PPUSH
40020: LD_VAR 0 2
40024: PPUSH
40025: LD_VAR 0 3
40029: PPUSH
40030: LD_VAR 0 5
40034: PPUSH
40035: CALL_OW 48
// end ;
40039: LD_VAR 0 6
40043: RET
// export function ToNaturalNumber ( number ) ; begin
40044: LD_INT 0
40046: PPUSH
// result := number div 1 ;
40047: LD_ADDR_VAR 0 2
40051: PUSH
40052: LD_VAR 0 1
40056: PUSH
40057: LD_INT 1
40059: DIV
40060: ST_TO_ADDR
// if number < 0 then
40061: LD_VAR 0 1
40065: PUSH
40066: LD_INT 0
40068: LESS
40069: IFFALSE 40079
// result := 0 ;
40071: LD_ADDR_VAR 0 2
40075: PUSH
40076: LD_INT 0
40078: ST_TO_ADDR
// end ;
40079: LD_VAR 0 2
40083: RET
// export function SortByClass ( units , class ) ; var un ; begin
40084: LD_INT 0
40086: PPUSH
40087: PPUSH
// if not units or not class then
40088: LD_VAR 0 1
40092: NOT
40093: PUSH
40094: LD_VAR 0 2
40098: NOT
40099: OR
40100: IFFALSE 40104
// exit ;
40102: GO 40199
// result := [ ] ;
40104: LD_ADDR_VAR 0 3
40108: PUSH
40109: EMPTY
40110: ST_TO_ADDR
// for un in units do
40111: LD_ADDR_VAR 0 4
40115: PUSH
40116: LD_VAR 0 1
40120: PUSH
40121: FOR_IN
40122: IFFALSE 40197
// if GetClass ( un ) = class then
40124: LD_VAR 0 4
40128: PPUSH
40129: CALL_OW 257
40133: PUSH
40134: LD_VAR 0 2
40138: EQUAL
40139: IFFALSE 40166
// result := Insert ( result , 1 , un ) else
40141: LD_ADDR_VAR 0 3
40145: PUSH
40146: LD_VAR 0 3
40150: PPUSH
40151: LD_INT 1
40153: PPUSH
40154: LD_VAR 0 4
40158: PPUSH
40159: CALL_OW 2
40163: ST_TO_ADDR
40164: GO 40195
// result := Replace ( result , result + 1 , un ) ;
40166: LD_ADDR_VAR 0 3
40170: PUSH
40171: LD_VAR 0 3
40175: PPUSH
40176: LD_VAR 0 3
40180: PUSH
40181: LD_INT 1
40183: PLUS
40184: PPUSH
40185: LD_VAR 0 4
40189: PPUSH
40190: CALL_OW 1
40194: ST_TO_ADDR
40195: GO 40121
40197: POP
40198: POP
// end ;
40199: LD_VAR 0 3
40203: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40204: LD_INT 0
40206: PPUSH
40207: PPUSH
40208: PPUSH
40209: PPUSH
40210: PPUSH
40211: PPUSH
40212: PPUSH
// result := [ ] ;
40213: LD_ADDR_VAR 0 4
40217: PUSH
40218: EMPTY
40219: ST_TO_ADDR
// if x - r < 0 then
40220: LD_VAR 0 1
40224: PUSH
40225: LD_VAR 0 3
40229: MINUS
40230: PUSH
40231: LD_INT 0
40233: LESS
40234: IFFALSE 40246
// min_x := 0 else
40236: LD_ADDR_VAR 0 8
40240: PUSH
40241: LD_INT 0
40243: ST_TO_ADDR
40244: GO 40262
// min_x := x - r ;
40246: LD_ADDR_VAR 0 8
40250: PUSH
40251: LD_VAR 0 1
40255: PUSH
40256: LD_VAR 0 3
40260: MINUS
40261: ST_TO_ADDR
// if y - r < 0 then
40262: LD_VAR 0 2
40266: PUSH
40267: LD_VAR 0 3
40271: MINUS
40272: PUSH
40273: LD_INT 0
40275: LESS
40276: IFFALSE 40288
// min_y := 0 else
40278: LD_ADDR_VAR 0 7
40282: PUSH
40283: LD_INT 0
40285: ST_TO_ADDR
40286: GO 40304
// min_y := y - r ;
40288: LD_ADDR_VAR 0 7
40292: PUSH
40293: LD_VAR 0 2
40297: PUSH
40298: LD_VAR 0 3
40302: MINUS
40303: ST_TO_ADDR
// max_x := x + r ;
40304: LD_ADDR_VAR 0 9
40308: PUSH
40309: LD_VAR 0 1
40313: PUSH
40314: LD_VAR 0 3
40318: PLUS
40319: ST_TO_ADDR
// max_y := y + r ;
40320: LD_ADDR_VAR 0 10
40324: PUSH
40325: LD_VAR 0 2
40329: PUSH
40330: LD_VAR 0 3
40334: PLUS
40335: ST_TO_ADDR
// for _x = min_x to max_x do
40336: LD_ADDR_VAR 0 5
40340: PUSH
40341: DOUBLE
40342: LD_VAR 0 8
40346: DEC
40347: ST_TO_ADDR
40348: LD_VAR 0 9
40352: PUSH
40353: FOR_TO
40354: IFFALSE 40455
// for _y = min_y to max_y do
40356: LD_ADDR_VAR 0 6
40360: PUSH
40361: DOUBLE
40362: LD_VAR 0 7
40366: DEC
40367: ST_TO_ADDR
40368: LD_VAR 0 10
40372: PUSH
40373: FOR_TO
40374: IFFALSE 40451
// begin if not ValidHex ( _x , _y ) then
40376: LD_VAR 0 5
40380: PPUSH
40381: LD_VAR 0 6
40385: PPUSH
40386: CALL_OW 488
40390: NOT
40391: IFFALSE 40395
// continue ;
40393: GO 40373
// if GetResourceTypeXY ( _x , _y ) then
40395: LD_VAR 0 5
40399: PPUSH
40400: LD_VAR 0 6
40404: PPUSH
40405: CALL_OW 283
40409: IFFALSE 40449
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40411: LD_ADDR_VAR 0 4
40415: PUSH
40416: LD_VAR 0 4
40420: PPUSH
40421: LD_VAR 0 4
40425: PUSH
40426: LD_INT 1
40428: PLUS
40429: PPUSH
40430: LD_VAR 0 5
40434: PUSH
40435: LD_VAR 0 6
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PPUSH
40444: CALL_OW 1
40448: ST_TO_ADDR
// end ;
40449: GO 40373
40451: POP
40452: POP
40453: GO 40353
40455: POP
40456: POP
// end ;
40457: LD_VAR 0 4
40461: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40462: LD_INT 0
40464: PPUSH
40465: PPUSH
40466: PPUSH
40467: PPUSH
40468: PPUSH
40469: PPUSH
40470: PPUSH
40471: PPUSH
// if not units then
40472: LD_VAR 0 1
40476: NOT
40477: IFFALSE 40481
// exit ;
40479: GO 41005
// result := UnitFilter ( units , [ f_ok ] ) ;
40481: LD_ADDR_VAR 0 3
40485: PUSH
40486: LD_VAR 0 1
40490: PPUSH
40491: LD_INT 50
40493: PUSH
40494: EMPTY
40495: LIST
40496: PPUSH
40497: CALL_OW 72
40501: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40502: LD_ADDR_VAR 0 8
40506: PUSH
40507: LD_VAR 0 1
40511: PUSH
40512: LD_INT 1
40514: ARRAY
40515: PPUSH
40516: CALL_OW 255
40520: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40521: LD_ADDR_VAR 0 10
40525: PUSH
40526: LD_INT 29
40528: PUSH
40529: LD_INT 91
40531: PUSH
40532: LD_INT 49
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: ST_TO_ADDR
// if not result then
40540: LD_VAR 0 3
40544: NOT
40545: IFFALSE 40549
// exit ;
40547: GO 41005
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40549: LD_ADDR_VAR 0 5
40553: PUSH
40554: LD_INT 81
40556: PUSH
40557: LD_VAR 0 8
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PPUSH
40566: CALL_OW 69
40570: ST_TO_ADDR
// for i in result do
40571: LD_ADDR_VAR 0 4
40575: PUSH
40576: LD_VAR 0 3
40580: PUSH
40581: FOR_IN
40582: IFFALSE 41003
// begin tag := GetTag ( i ) + 1 ;
40584: LD_ADDR_VAR 0 9
40588: PUSH
40589: LD_VAR 0 4
40593: PPUSH
40594: CALL_OW 110
40598: PUSH
40599: LD_INT 1
40601: PLUS
40602: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40603: LD_ADDR_VAR 0 7
40607: PUSH
40608: LD_VAR 0 4
40612: PPUSH
40613: CALL_OW 250
40617: PPUSH
40618: LD_VAR 0 4
40622: PPUSH
40623: CALL_OW 251
40627: PPUSH
40628: LD_INT 6
40630: PPUSH
40631: CALL 40204 0 3
40635: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40636: LD_VAR 0 4
40640: PPUSH
40641: CALL_OW 247
40645: PUSH
40646: LD_INT 2
40648: EQUAL
40649: PUSH
40650: LD_VAR 0 7
40654: AND
40655: PUSH
40656: LD_VAR 0 4
40660: PPUSH
40661: CALL_OW 264
40665: PUSH
40666: LD_VAR 0 10
40670: IN
40671: NOT
40672: AND
40673: IFFALSE 40712
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40675: LD_VAR 0 4
40679: PPUSH
40680: LD_VAR 0 7
40684: PUSH
40685: LD_INT 1
40687: ARRAY
40688: PUSH
40689: LD_INT 1
40691: ARRAY
40692: PPUSH
40693: LD_VAR 0 7
40697: PUSH
40698: LD_INT 1
40700: ARRAY
40701: PUSH
40702: LD_INT 2
40704: ARRAY
40705: PPUSH
40706: CALL_OW 116
40710: GO 41001
// if path > tag then
40712: LD_VAR 0 2
40716: PUSH
40717: LD_VAR 0 9
40721: GREATER
40722: IFFALSE 40930
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40724: LD_ADDR_VAR 0 6
40728: PUSH
40729: LD_VAR 0 5
40733: PPUSH
40734: LD_INT 91
40736: PUSH
40737: LD_VAR 0 4
40741: PUSH
40742: LD_INT 8
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: LIST
40749: PPUSH
40750: CALL_OW 72
40754: ST_TO_ADDR
// if nearEnemy then
40755: LD_VAR 0 6
40759: IFFALSE 40828
// begin if GetWeapon ( i ) = ru_time_lapser then
40761: LD_VAR 0 4
40765: PPUSH
40766: CALL_OW 264
40770: PUSH
40771: LD_INT 49
40773: EQUAL
40774: IFFALSE 40802
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40776: LD_VAR 0 4
40780: PPUSH
40781: LD_VAR 0 6
40785: PPUSH
40786: LD_VAR 0 4
40790: PPUSH
40791: CALL_OW 74
40795: PPUSH
40796: CALL_OW 112
40800: GO 40826
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40802: LD_VAR 0 4
40806: PPUSH
40807: LD_VAR 0 6
40811: PPUSH
40812: LD_VAR 0 4
40816: PPUSH
40817: CALL_OW 74
40821: PPUSH
40822: CALL 41930 0 2
// end else
40826: GO 40928
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40828: LD_VAR 0 4
40832: PPUSH
40833: LD_VAR 0 2
40837: PUSH
40838: LD_VAR 0 9
40842: ARRAY
40843: PUSH
40844: LD_INT 1
40846: ARRAY
40847: PPUSH
40848: LD_VAR 0 2
40852: PUSH
40853: LD_VAR 0 9
40857: ARRAY
40858: PUSH
40859: LD_INT 2
40861: ARRAY
40862: PPUSH
40863: CALL_OW 297
40867: PUSH
40868: LD_INT 6
40870: GREATER
40871: IFFALSE 40914
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40873: LD_VAR 0 4
40877: PPUSH
40878: LD_VAR 0 2
40882: PUSH
40883: LD_VAR 0 9
40887: ARRAY
40888: PUSH
40889: LD_INT 1
40891: ARRAY
40892: PPUSH
40893: LD_VAR 0 2
40897: PUSH
40898: LD_VAR 0 9
40902: ARRAY
40903: PUSH
40904: LD_INT 2
40906: ARRAY
40907: PPUSH
40908: CALL_OW 114
40912: GO 40928
// SetTag ( i , tag ) ;
40914: LD_VAR 0 4
40918: PPUSH
40919: LD_VAR 0 9
40923: PPUSH
40924: CALL_OW 109
// end else
40928: GO 41001
// if enemy then
40930: LD_VAR 0 5
40934: IFFALSE 41001
// begin if GetWeapon ( i ) = ru_time_lapser then
40936: LD_VAR 0 4
40940: PPUSH
40941: CALL_OW 264
40945: PUSH
40946: LD_INT 49
40948: EQUAL
40949: IFFALSE 40977
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40951: LD_VAR 0 4
40955: PPUSH
40956: LD_VAR 0 5
40960: PPUSH
40961: LD_VAR 0 4
40965: PPUSH
40966: CALL_OW 74
40970: PPUSH
40971: CALL_OW 112
40975: GO 41001
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40977: LD_VAR 0 4
40981: PPUSH
40982: LD_VAR 0 5
40986: PPUSH
40987: LD_VAR 0 4
40991: PPUSH
40992: CALL_OW 74
40996: PPUSH
40997: CALL 41930 0 2
// end ; end ;
41001: GO 40581
41003: POP
41004: POP
// end ;
41005: LD_VAR 0 3
41009: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41010: LD_INT 0
41012: PPUSH
41013: PPUSH
41014: PPUSH
// if not unit or IsInUnit ( unit ) then
41015: LD_VAR 0 1
41019: NOT
41020: PUSH
41021: LD_VAR 0 1
41025: PPUSH
41026: CALL_OW 310
41030: OR
41031: IFFALSE 41035
// exit ;
41033: GO 41126
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41035: LD_ADDR_VAR 0 4
41039: PUSH
41040: LD_VAR 0 1
41044: PPUSH
41045: CALL_OW 250
41049: PPUSH
41050: LD_VAR 0 2
41054: PPUSH
41055: LD_INT 1
41057: PPUSH
41058: CALL_OW 272
41062: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: LD_VAR 0 1
41072: PPUSH
41073: CALL_OW 251
41077: PPUSH
41078: LD_VAR 0 2
41082: PPUSH
41083: LD_INT 1
41085: PPUSH
41086: CALL_OW 273
41090: ST_TO_ADDR
// if ValidHex ( x , y ) then
41091: LD_VAR 0 4
41095: PPUSH
41096: LD_VAR 0 5
41100: PPUSH
41101: CALL_OW 488
41105: IFFALSE 41126
// ComTurnXY ( unit , x , y ) ;
41107: LD_VAR 0 1
41111: PPUSH
41112: LD_VAR 0 4
41116: PPUSH
41117: LD_VAR 0 5
41121: PPUSH
41122: CALL_OW 118
// end ;
41126: LD_VAR 0 3
41130: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41131: LD_INT 0
41133: PPUSH
41134: PPUSH
// result := false ;
41135: LD_ADDR_VAR 0 3
41139: PUSH
41140: LD_INT 0
41142: ST_TO_ADDR
// if not units then
41143: LD_VAR 0 2
41147: NOT
41148: IFFALSE 41152
// exit ;
41150: GO 41197
// for i in units do
41152: LD_ADDR_VAR 0 4
41156: PUSH
41157: LD_VAR 0 2
41161: PUSH
41162: FOR_IN
41163: IFFALSE 41195
// if See ( side , i ) then
41165: LD_VAR 0 1
41169: PPUSH
41170: LD_VAR 0 4
41174: PPUSH
41175: CALL_OW 292
41179: IFFALSE 41193
// begin result := true ;
41181: LD_ADDR_VAR 0 3
41185: PUSH
41186: LD_INT 1
41188: ST_TO_ADDR
// exit ;
41189: POP
41190: POP
41191: GO 41197
// end ;
41193: GO 41162
41195: POP
41196: POP
// end ;
41197: LD_VAR 0 3
41201: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41202: LD_INT 0
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
// if not unit or not points then
41208: LD_VAR 0 1
41212: NOT
41213: PUSH
41214: LD_VAR 0 2
41218: NOT
41219: OR
41220: IFFALSE 41224
// exit ;
41222: GO 41314
// dist := 99999 ;
41224: LD_ADDR_VAR 0 5
41228: PUSH
41229: LD_INT 99999
41231: ST_TO_ADDR
// for i in points do
41232: LD_ADDR_VAR 0 4
41236: PUSH
41237: LD_VAR 0 2
41241: PUSH
41242: FOR_IN
41243: IFFALSE 41312
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41245: LD_ADDR_VAR 0 6
41249: PUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: LD_VAR 0 4
41259: PUSH
41260: LD_INT 1
41262: ARRAY
41263: PPUSH
41264: LD_VAR 0 4
41268: PUSH
41269: LD_INT 2
41271: ARRAY
41272: PPUSH
41273: CALL_OW 297
41277: ST_TO_ADDR
// if tmpDist < dist then
41278: LD_VAR 0 6
41282: PUSH
41283: LD_VAR 0 5
41287: LESS
41288: IFFALSE 41310
// begin result := i ;
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_VAR 0 4
41299: ST_TO_ADDR
// dist := tmpDist ;
41300: LD_ADDR_VAR 0 5
41304: PUSH
41305: LD_VAR 0 6
41309: ST_TO_ADDR
// end ; end ;
41310: GO 41242
41312: POP
41313: POP
// end ;
41314: LD_VAR 0 3
41318: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41319: LD_INT 0
41321: PPUSH
// uc_side := side ;
41322: LD_ADDR_OWVAR 20
41326: PUSH
41327: LD_VAR 0 1
41331: ST_TO_ADDR
// uc_nation := 3 ;
41332: LD_ADDR_OWVAR 21
41336: PUSH
41337: LD_INT 3
41339: ST_TO_ADDR
// vc_chassis := 25 ;
41340: LD_ADDR_OWVAR 37
41344: PUSH
41345: LD_INT 25
41347: ST_TO_ADDR
// vc_engine := engine_siberite ;
41348: LD_ADDR_OWVAR 39
41352: PUSH
41353: LD_INT 3
41355: ST_TO_ADDR
// vc_control := control_computer ;
41356: LD_ADDR_OWVAR 38
41360: PUSH
41361: LD_INT 3
41363: ST_TO_ADDR
// vc_weapon := 59 ;
41364: LD_ADDR_OWVAR 40
41368: PUSH
41369: LD_INT 59
41371: ST_TO_ADDR
// result := CreateVehicle ;
41372: LD_ADDR_VAR 0 5
41376: PUSH
41377: CALL_OW 45
41381: ST_TO_ADDR
// SetDir ( result , d ) ;
41382: LD_VAR 0 5
41386: PPUSH
41387: LD_VAR 0 4
41391: PPUSH
41392: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41396: LD_VAR 0 5
41400: PPUSH
41401: LD_VAR 0 2
41405: PPUSH
41406: LD_VAR 0 3
41410: PPUSH
41411: LD_INT 0
41413: PPUSH
41414: CALL_OW 48
// end ;
41418: LD_VAR 0 5
41422: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41423: LD_INT 0
41425: PPUSH
41426: PPUSH
41427: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41428: LD_ADDR_VAR 0 2
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41451: LD_VAR 0 1
41455: NOT
41456: PUSH
41457: LD_VAR 0 1
41461: PPUSH
41462: CALL_OW 264
41466: PUSH
41467: LD_INT 12
41469: PUSH
41470: LD_INT 51
41472: PUSH
41473: LD_INT 32
41475: PUSH
41476: LD_INT 89
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: IN
41485: NOT
41486: OR
41487: IFFALSE 41491
// exit ;
41489: GO 41589
// for i := 1 to 3 do
41491: LD_ADDR_VAR 0 3
41495: PUSH
41496: DOUBLE
41497: LD_INT 1
41499: DEC
41500: ST_TO_ADDR
41501: LD_INT 3
41503: PUSH
41504: FOR_TO
41505: IFFALSE 41587
// begin tmp := GetCargo ( cargo , i ) ;
41507: LD_ADDR_VAR 0 4
41511: PUSH
41512: LD_VAR 0 1
41516: PPUSH
41517: LD_VAR 0 3
41521: PPUSH
41522: CALL_OW 289
41526: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41527: LD_ADDR_VAR 0 2
41531: PUSH
41532: LD_VAR 0 2
41536: PPUSH
41537: LD_VAR 0 3
41541: PPUSH
41542: LD_VAR 0 4
41546: PPUSH
41547: CALL_OW 1
41551: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41552: LD_ADDR_VAR 0 2
41556: PUSH
41557: LD_VAR 0 2
41561: PPUSH
41562: LD_INT 4
41564: PPUSH
41565: LD_VAR 0 2
41569: PUSH
41570: LD_INT 4
41572: ARRAY
41573: PUSH
41574: LD_VAR 0 4
41578: PLUS
41579: PPUSH
41580: CALL_OW 1
41584: ST_TO_ADDR
// end ;
41585: GO 41504
41587: POP
41588: POP
// end ;
41589: LD_VAR 0 2
41593: RET
// export function Length ( array ) ; begin
41594: LD_INT 0
41596: PPUSH
// result := array + 0 ;
41597: LD_ADDR_VAR 0 2
41601: PUSH
41602: LD_VAR 0 1
41606: PUSH
41607: LD_INT 0
41609: PLUS
41610: ST_TO_ADDR
// end ;
41611: LD_VAR 0 2
41615: RET
// export function PrepareArray ( array ) ; begin
41616: LD_INT 0
41618: PPUSH
// result := array diff 0 ;
41619: LD_ADDR_VAR 0 2
41623: PUSH
41624: LD_VAR 0 1
41628: PUSH
41629: LD_INT 0
41631: DIFF
41632: ST_TO_ADDR
// if not result [ 1 ] then
41633: LD_VAR 0 2
41637: PUSH
41638: LD_INT 1
41640: ARRAY
41641: NOT
41642: IFFALSE 41662
// result := Delete ( result , 1 ) ;
41644: LD_ADDR_VAR 0 2
41648: PUSH
41649: LD_VAR 0 2
41653: PPUSH
41654: LD_INT 1
41656: PPUSH
41657: CALL_OW 3
41661: ST_TO_ADDR
// end ;
41662: LD_VAR 0 2
41666: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41667: LD_INT 0
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
// sibRocketRange := 25 ;
41673: LD_ADDR_VAR 0 6
41677: PUSH
41678: LD_INT 25
41680: ST_TO_ADDR
// result := false ;
41681: LD_ADDR_VAR 0 4
41685: PUSH
41686: LD_INT 0
41688: ST_TO_ADDR
// for i := 0 to 5 do
41689: LD_ADDR_VAR 0 5
41693: PUSH
41694: DOUBLE
41695: LD_INT 0
41697: DEC
41698: ST_TO_ADDR
41699: LD_INT 5
41701: PUSH
41702: FOR_TO
41703: IFFALSE 41770
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41705: LD_VAR 0 1
41709: PPUSH
41710: LD_VAR 0 5
41714: PPUSH
41715: LD_VAR 0 6
41719: PPUSH
41720: CALL_OW 272
41724: PPUSH
41725: LD_VAR 0 2
41729: PPUSH
41730: LD_VAR 0 5
41734: PPUSH
41735: LD_VAR 0 6
41739: PPUSH
41740: CALL_OW 273
41744: PPUSH
41745: LD_VAR 0 3
41749: PPUSH
41750: CALL_OW 309
41754: IFFALSE 41768
// begin result := true ;
41756: LD_ADDR_VAR 0 4
41760: PUSH
41761: LD_INT 1
41763: ST_TO_ADDR
// exit ;
41764: POP
41765: POP
41766: GO 41772
// end ;
41768: GO 41702
41770: POP
41771: POP
// end ;
41772: LD_VAR 0 4
41776: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41777: LD_INT 0
41779: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41780: LD_VAR 0 1
41784: PPUSH
41785: LD_VAR 0 2
41789: PPUSH
41790: LD_INT 0
41792: PPUSH
41793: LD_INT 0
41795: PPUSH
41796: LD_INT 1
41798: PPUSH
41799: LD_INT 0
41801: PPUSH
41802: CALL_OW 587
// end ;
41806: LD_VAR 0 3
41810: RET
// export function CenterOnNow ( unit ) ; begin
41811: LD_INT 0
41813: PPUSH
// result := IsInUnit ( unit ) ;
41814: LD_ADDR_VAR 0 2
41818: PUSH
41819: LD_VAR 0 1
41823: PPUSH
41824: CALL_OW 310
41828: ST_TO_ADDR
// if not result then
41829: LD_VAR 0 2
41833: NOT
41834: IFFALSE 41846
// result := unit ;
41836: LD_ADDR_VAR 0 2
41840: PUSH
41841: LD_VAR 0 1
41845: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41846: LD_VAR 0 1
41850: PPUSH
41851: CALL_OW 87
// end ;
41855: LD_VAR 0 2
41859: RET
// export function ComMoveHex ( unit , hex ) ; begin
41860: LD_INT 0
41862: PPUSH
// if not hex then
41863: LD_VAR 0 2
41867: NOT
41868: IFFALSE 41872
// exit ;
41870: GO 41925
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41872: LD_VAR 0 2
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: PPUSH
41881: LD_VAR 0 2
41885: PUSH
41886: LD_INT 2
41888: ARRAY
41889: PPUSH
41890: CALL_OW 428
41894: IFFALSE 41898
// exit ;
41896: GO 41925
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41898: LD_VAR 0 1
41902: PPUSH
41903: LD_VAR 0 2
41907: PUSH
41908: LD_INT 1
41910: ARRAY
41911: PPUSH
41912: LD_VAR 0 2
41916: PUSH
41917: LD_INT 2
41919: ARRAY
41920: PPUSH
41921: CALL_OW 111
// end ;
41925: LD_VAR 0 3
41929: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
41930: LD_INT 0
41932: PPUSH
41933: PPUSH
41934: PPUSH
// if not unit or not enemy then
41935: LD_VAR 0 1
41939: NOT
41940: PUSH
41941: LD_VAR 0 2
41945: NOT
41946: OR
41947: IFFALSE 41951
// exit ;
41949: GO 42075
// x := GetX ( enemy ) ;
41951: LD_ADDR_VAR 0 4
41955: PUSH
41956: LD_VAR 0 2
41960: PPUSH
41961: CALL_OW 250
41965: ST_TO_ADDR
// y := GetY ( enemy ) ;
41966: LD_ADDR_VAR 0 5
41970: PUSH
41971: LD_VAR 0 2
41975: PPUSH
41976: CALL_OW 251
41980: ST_TO_ADDR
// if ValidHex ( x , y ) then
41981: LD_VAR 0 4
41985: PPUSH
41986: LD_VAR 0 5
41990: PPUSH
41991: CALL_OW 488
41995: IFFALSE 42075
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
41997: LD_VAR 0 2
42001: PPUSH
42002: CALL_OW 247
42006: PUSH
42007: LD_INT 3
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: IN
42017: PUSH
42018: LD_VAR 0 1
42022: PPUSH
42023: CALL_OW 255
42027: PPUSH
42028: LD_VAR 0 2
42032: PPUSH
42033: CALL_OW 292
42037: AND
42038: IFFALSE 42056
// ComAttackUnit ( unit , enemy ) else
42040: LD_VAR 0 1
42044: PPUSH
42045: LD_VAR 0 2
42049: PPUSH
42050: CALL_OW 115
42054: GO 42075
// ComAgressiveMove ( unit , x , y ) ;
42056: LD_VAR 0 1
42060: PPUSH
42061: LD_VAR 0 4
42065: PPUSH
42066: LD_VAR 0 5
42070: PPUSH
42071: CALL_OW 114
// end ;
42075: LD_VAR 0 3
42079: RET
