// starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Action ;
  11: CALL 16 0 0
// end ; end_of_file
  15: END
// export function Action ; var John , Roth , veh ; begin
  16: LD_INT 0
  18: PPUSH
  19: PPUSH
  20: PPUSH
  21: PPUSH
// Video ( true ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL 37801 0 1
// PlaceSeeing ( 58 , 14 , 7 , - 26 ) ;
  29: LD_INT 58
  31: PPUSH
  32: LD_INT 14
  34: PPUSH
  35: LD_INT 7
  37: PPUSH
  38: LD_INT 26
  40: NEG
  41: PPUSH
  42: CALL_OW 330
// uc_side := 7 ;
  46: LD_ADDR_OWVAR 20
  50: PUSH
  51: LD_INT 7
  53: ST_TO_ADDR
// uc_nation := 1 ;
  54: LD_ADDR_OWVAR 21
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// John := NewCharacter ( JMM ) ;
  62: LD_ADDR_VAR 0 2
  66: PUSH
  67: LD_STRING JMM
  69: PPUSH
  70: CALL_OW 25
  74: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
  75: LD_ADDR_VAR 0 3
  79: PUSH
  80: LD_STRING Roth
  82: PPUSH
  83: CALL_OW 25
  87: ST_TO_ADDR
// SetDir ( John , 1 ) ;
  88: LD_VAR 0 2
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: CALL_OW 233
// SetDir ( Roth , 4 ) ;
 100: LD_VAR 0 3
 104: PPUSH
 105: LD_INT 4
 107: PPUSH
 108: CALL_OW 233
// PlaceUnitXY ( John , 55 , 14 , false ) ;
 112: LD_VAR 0 2
 116: PPUSH
 117: LD_INT 55
 119: PPUSH
 120: LD_INT 14
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: CALL_OW 48
// PlaceUnitXY ( Roth , 58 , 14 , false ) ;
 130: LD_VAR 0 3
 134: PPUSH
 135: LD_INT 58
 137: PPUSH
 138: LD_INT 14
 140: PPUSH
 141: LD_INT 0
 143: PPUSH
 144: CALL_OW 48
// ComTurnUnit ( John , Roth ) ;
 148: LD_VAR 0 2
 152: PPUSH
 153: LD_VAR 0 3
 157: PPUSH
 158: CALL_OW 119
// ComTurnUnit ( Roth , John ) ;
 162: LD_VAR 0 3
 166: PPUSH
 167: LD_VAR 0 2
 171: PPUSH
 172: CALL_OW 119
// CenterNowonUnits ( [ John , Roth ] ) ;
 176: LD_VAR 0 2
 180: PUSH
 181: LD_VAR 0 3
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PPUSH
 190: CALL_OW 87
// wait ( 0 0$0.5 ) ;
 194: LD_INT 18
 196: PPUSH
 197: CALL_OW 67
// Say ( Roth , DStart-Roth-1 ) ;
 201: LD_VAR 0 3
 205: PPUSH
 206: LD_STRING DStart-Roth-1
 208: PPUSH
 209: CALL_OW 88
// Say ( John , DStart-JMM-1 ) ;
 213: LD_VAR 0 2
 217: PPUSH
 218: LD_STRING DStart-JMM-1
 220: PPUSH
 221: CALL_OW 88
// Say ( Roth , DStart-Roth-2 ) ;
 225: LD_VAR 0 3
 229: PPUSH
 230: LD_STRING DStart-Roth-2
 232: PPUSH
 233: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 237: LD_INT 18
 239: PPUSH
 240: CALL_OW 67
// Say ( John , DStart-JMM-2 ) ;
 244: LD_VAR 0 2
 248: PPUSH
 249: LD_STRING DStart-JMM-2
 251: PPUSH
 252: CALL_OW 88
// Say ( Roth , DStart-Roth-3 ) ;
 256: LD_VAR 0 3
 260: PPUSH
 261: LD_STRING DStart-Roth-3
 263: PPUSH
 264: CALL_OW 88
// Say ( John , DStart-JMM-3 ) ;
 268: LD_VAR 0 2
 272: PPUSH
 273: LD_STRING DStart-JMM-3
 275: PPUSH
 276: CALL_OW 88
// uc_side := 1 ;
 280: LD_ADDR_OWVAR 20
 284: PUSH
 285: LD_INT 1
 287: ST_TO_ADDR
// uc_nation := 1 ;
 288: LD_ADDR_OWVAR 21
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 296: LD_ADDR_OWVAR 37
 300: PUSH
 301: LD_INT 2
 303: ST_TO_ADDR
// vc_engine := engine_siberite ;
 304: LD_ADDR_OWVAR 39
 308: PUSH
 309: LD_INT 3
 311: ST_TO_ADDR
// vc_control := control_manual ;
 312: LD_ADDR_OWVAR 38
 316: PUSH
 317: LD_INT 1
 319: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 320: LD_ADDR_OWVAR 40
 324: PUSH
 325: LD_INT 4
 327: ST_TO_ADDR
// veh := CreateVehicle ;
 328: LD_ADDR_VAR 0 4
 332: PUSH
 333: CALL_OW 45
 337: ST_TO_ADDR
// PlaceUnitXY ( veh , 43 , 41 , false ) ;
 338: LD_VAR 0 4
 342: PPUSH
 343: LD_INT 43
 345: PPUSH
 346: LD_INT 41
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 48
// PrepareMechanic ( false , 10 ) ;
 356: LD_INT 0
 358: PPUSH
 359: LD_INT 10
 361: PPUSH
 362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
 366: CALL_OW 44
 370: PPUSH
 371: LD_VAR 0 4
 375: PPUSH
 376: CALL_OW 52
// ComMoveXY ( veh , 24 , 2 ) ;
 380: LD_VAR 0 4
 384: PPUSH
 385: LD_INT 24
 387: PPUSH
 388: LD_INT 2
 390: PPUSH
 391: CALL_OW 111
// Say ( Roth , DStart-Roth-4 ) ;
 395: LD_VAR 0 3
 399: PPUSH
 400: LD_STRING DStart-Roth-4
 402: PPUSH
 403: CALL_OW 88
// Say ( John , DStart-JMM-4 ) ;
 407: LD_VAR 0 2
 411: PPUSH
 412: LD_STRING DStart-JMM-4
 414: PPUSH
 415: CALL_OW 88
// Say ( Roth , DStart-Roth-5 ) ;
 419: LD_VAR 0 3
 423: PPUSH
 424: LD_STRING DStart-Roth-5
 426: PPUSH
 427: CALL_OW 88
// Say ( John , DStart-JMM-5 ) ;
 431: LD_VAR 0 2
 435: PPUSH
 436: LD_STRING DStart-JMM-5
 438: PPUSH
 439: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 443: LD_INT 10
 445: PPUSH
 446: CALL_OW 67
// Say ( Roth , DStart-Roth-6 ) ;
 450: LD_VAR 0 3
 454: PPUSH
 455: LD_STRING DStart-Roth-6
 457: PPUSH
 458: CALL_OW 88
// wait ( 0 0$0.1 ) ;
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 67
// ComMoveXY ( John , 32 , 14 ) ;
 469: LD_VAR 0 2
 473: PPUSH
 474: LD_INT 32
 476: PPUSH
 477: LD_INT 14
 479: PPUSH
 480: CALL_OW 111
// wait ( 0 0$2 ) ;
 484: LD_INT 70
 486: PPUSH
 487: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
 491: LD_INT 1
 493: PPUSH
 494: LD_STRING %_cont
 496: PPUSH
 497: CALL_OW 340
// end ;
 501: LD_VAR 0 1
 505: RET
// every 0 0$1 trigger HexInfo ( 24 , 2 ) do
 506: LD_INT 24
 508: PPUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 428
 516: IFFALSE 536
 518: GO 520
 520: DISABLE
// RemoveUnit ( HexInfo ( 24 , 2 ) ) ; end_of_file
 521: LD_INT 24
 523: PPUSH
 524: LD_INT 2
 526: PPUSH
 527: CALL_OW 428
 531: PPUSH
 532: CALL_OW 64
 536: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// if exist_mode then
 541: LD_VAR 0 2
 545: IFFALSE 570
// unit := CreateCharacter ( prefix & ident ) else
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: LD_VAR 0 3
 556: PUSH
 557: LD_VAR 0 1
 561: STR
 562: PPUSH
 563: CALL_OW 34
 567: ST_TO_ADDR
 568: GO 585
// unit := NewCharacter ( ident ) ;
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 25
 584: ST_TO_ADDR
// result := unit ;
 585: LD_ADDR_VAR 0 4
 589: PUSH
 590: LD_VAR 0 5
 594: ST_TO_ADDR
// end ;
 595: LD_VAR 0 4
 599: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 600: LD_INT 0
 602: PPUSH
 603: PPUSH
// if not side or not nation then
 604: LD_VAR 0 1
 608: NOT
 609: PUSH
 610: LD_VAR 0 2
 614: NOT
 615: OR
 616: IFFALSE 620
// exit ;
 618: GO 1388
// case nation of nation_american :
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 847
 633: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 35
 641: PUSH
 642: LD_INT 45
 644: PUSH
 645: LD_INT 46
 647: PUSH
 648: LD_INT 47
 650: PUSH
 651: LD_INT 82
 653: PUSH
 654: LD_INT 83
 656: PUSH
 657: LD_INT 84
 659: PUSH
 660: LD_INT 85
 662: PUSH
 663: LD_INT 86
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: LD_INT 2
 671: PUSH
 672: LD_INT 6
 674: PUSH
 675: LD_INT 15
 677: PUSH
 678: LD_INT 16
 680: PUSH
 681: LD_INT 7
 683: PUSH
 684: LD_INT 12
 686: PUSH
 687: LD_INT 13
 689: PUSH
 690: LD_INT 10
 692: PUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 20
 698: PUSH
 699: LD_INT 21
 701: PUSH
 702: LD_INT 22
 704: PUSH
 705: LD_INT 25
 707: PUSH
 708: LD_INT 32
 710: PUSH
 711: LD_INT 27
 713: PUSH
 714: LD_INT 36
 716: PUSH
 717: LD_INT 69
 719: PUSH
 720: LD_INT 39
 722: PUSH
 723: LD_INT 34
 725: PUSH
 726: LD_INT 40
 728: PUSH
 729: LD_INT 48
 731: PUSH
 732: LD_INT 49
 734: PUSH
 735: LD_INT 50
 737: PUSH
 738: LD_INT 51
 740: PUSH
 741: LD_INT 52
 743: PUSH
 744: LD_INT 53
 746: PUSH
 747: LD_INT 54
 749: PUSH
 750: LD_INT 55
 752: PUSH
 753: LD_INT 56
 755: PUSH
 756: LD_INT 57
 758: PUSH
 759: LD_INT 58
 761: PUSH
 762: LD_INT 59
 764: PUSH
 765: LD_INT 60
 767: PUSH
 768: LD_INT 61
 770: PUSH
 771: LD_INT 62
 773: PUSH
 774: LD_INT 80
 776: PUSH
 777: LD_INT 82
 779: PUSH
 780: LD_INT 83
 782: PUSH
 783: LD_INT 84
 785: PUSH
 786: LD_INT 85
 788: PUSH
 789: LD_INT 86
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: ST_TO_ADDR
 845: GO 1312
 847: LD_INT 2
 849: DOUBLE
 850: EQUAL
 851: IFTRUE 855
 853: GO 1081
 855: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 856: LD_ADDR_VAR 0 4
 860: PUSH
 861: LD_INT 35
 863: PUSH
 864: LD_INT 45
 866: PUSH
 867: LD_INT 46
 869: PUSH
 870: LD_INT 47
 872: PUSH
 873: LD_INT 82
 875: PUSH
 876: LD_INT 83
 878: PUSH
 879: LD_INT 84
 881: PUSH
 882: LD_INT 85
 884: PUSH
 885: LD_INT 87
 887: PUSH
 888: LD_INT 70
 890: PUSH
 891: LD_INT 1
 893: PUSH
 894: LD_INT 11
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 6
 908: PUSH
 909: LD_INT 15
 911: PUSH
 912: LD_INT 18
 914: PUSH
 915: LD_INT 7
 917: PUSH
 918: LD_INT 17
 920: PUSH
 921: LD_INT 8
 923: PUSH
 924: LD_INT 20
 926: PUSH
 927: LD_INT 21
 929: PUSH
 930: LD_INT 22
 932: PUSH
 933: LD_INT 72
 935: PUSH
 936: LD_INT 26
 938: PUSH
 939: LD_INT 69
 941: PUSH
 942: LD_INT 39
 944: PUSH
 945: LD_INT 40
 947: PUSH
 948: LD_INT 41
 950: PUSH
 951: LD_INT 42
 953: PUSH
 954: LD_INT 43
 956: PUSH
 957: LD_INT 48
 959: PUSH
 960: LD_INT 49
 962: PUSH
 963: LD_INT 50
 965: PUSH
 966: LD_INT 51
 968: PUSH
 969: LD_INT 52
 971: PUSH
 972: LD_INT 53
 974: PUSH
 975: LD_INT 54
 977: PUSH
 978: LD_INT 55
 980: PUSH
 981: LD_INT 56
 983: PUSH
 984: LD_INT 60
 986: PUSH
 987: LD_INT 61
 989: PUSH
 990: LD_INT 62
 992: PUSH
 993: LD_INT 66
 995: PUSH
 996: LD_INT 67
 998: PUSH
 999: LD_INT 68
1001: PUSH
1002: LD_INT 81
1004: PUSH
1005: LD_INT 82
1007: PUSH
1008: LD_INT 83
1010: PUSH
1011: LD_INT 84
1013: PUSH
1014: LD_INT 85
1016: PUSH
1017: LD_INT 87
1019: PUSH
1020: LD_INT 88
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: ST_TO_ADDR
1079: GO 1312
1081: LD_INT 3
1083: DOUBLE
1084: EQUAL
1085: IFTRUE 1089
1087: GO 1311
1089: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: LD_INT 46
1097: PUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 2
1106: PUSH
1107: LD_INT 82
1109: PUSH
1110: LD_INT 83
1112: PUSH
1113: LD_INT 84
1115: PUSH
1116: LD_INT 85
1118: PUSH
1119: LD_INT 86
1121: PUSH
1122: LD_INT 11
1124: PUSH
1125: LD_INT 9
1127: PUSH
1128: LD_INT 20
1130: PUSH
1131: LD_INT 19
1133: PUSH
1134: LD_INT 21
1136: PUSH
1137: LD_INT 24
1139: PUSH
1140: LD_INT 22
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 28
1148: PUSH
1149: LD_INT 29
1151: PUSH
1152: LD_INT 30
1154: PUSH
1155: LD_INT 31
1157: PUSH
1158: LD_INT 37
1160: PUSH
1161: LD_INT 38
1163: PUSH
1164: LD_INT 32
1166: PUSH
1167: LD_INT 27
1169: PUSH
1170: LD_INT 33
1172: PUSH
1173: LD_INT 69
1175: PUSH
1176: LD_INT 39
1178: PUSH
1179: LD_INT 34
1181: PUSH
1182: LD_INT 40
1184: PUSH
1185: LD_INT 71
1187: PUSH
1188: LD_INT 23
1190: PUSH
1191: LD_INT 44
1193: PUSH
1194: LD_INT 48
1196: PUSH
1197: LD_INT 49
1199: PUSH
1200: LD_INT 50
1202: PUSH
1203: LD_INT 51
1205: PUSH
1206: LD_INT 52
1208: PUSH
1209: LD_INT 53
1211: PUSH
1212: LD_INT 54
1214: PUSH
1215: LD_INT 55
1217: PUSH
1218: LD_INT 56
1220: PUSH
1221: LD_INT 57
1223: PUSH
1224: LD_INT 58
1226: PUSH
1227: LD_INT 59
1229: PUSH
1230: LD_INT 63
1232: PUSH
1233: LD_INT 64
1235: PUSH
1236: LD_INT 65
1238: PUSH
1239: LD_INT 82
1241: PUSH
1242: LD_INT 83
1244: PUSH
1245: LD_INT 84
1247: PUSH
1248: LD_INT 85
1250: PUSH
1251: LD_INT 86
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: ST_TO_ADDR
1309: GO 1312
1311: POP
// if state > - 1 and state < 3 then
1312: LD_VAR 0 3
1316: PUSH
1317: LD_INT 1
1319: NEG
1320: GREATER
1321: PUSH
1322: LD_VAR 0 3
1326: PUSH
1327: LD_INT 3
1329: LESS
1330: AND
1331: IFFALSE 1388
// for i in result do
1333: LD_ADDR_VAR 0 5
1337: PUSH
1338: LD_VAR 0 4
1342: PUSH
1343: FOR_IN
1344: IFFALSE 1386
// if GetTech ( i , side ) <> state then
1346: LD_VAR 0 5
1350: PPUSH
1351: LD_VAR 0 1
1355: PPUSH
1356: CALL_OW 321
1360: PUSH
1361: LD_VAR 0 3
1365: NONEQUAL
1366: IFFALSE 1384
// result := result diff i ;
1368: LD_ADDR_VAR 0 4
1372: PUSH
1373: LD_VAR 0 4
1377: PUSH
1378: LD_VAR 0 5
1382: DIFF
1383: ST_TO_ADDR
1384: GO 1343
1386: POP
1387: POP
// end ;
1388: LD_VAR 0 4
1392: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// result := true ;
1398: LD_ADDR_VAR 0 3
1402: PUSH
1403: LD_INT 1
1405: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1406: LD_ADDR_VAR 0 5
1410: PUSH
1411: LD_VAR 0 2
1415: PPUSH
1416: CALL_OW 480
1420: ST_TO_ADDR
// if not tmp then
1421: LD_VAR 0 5
1425: NOT
1426: IFFALSE 1430
// exit ;
1428: GO 1479
// for i in tmp do
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1477
// if GetTech ( i , side ) <> state_researched then
1443: LD_VAR 0 4
1447: PPUSH
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 321
1457: PUSH
1458: LD_INT 2
1460: NONEQUAL
1461: IFFALSE 1475
// begin result := false ;
1463: LD_ADDR_VAR 0 3
1467: PUSH
1468: LD_INT 0
1470: ST_TO_ADDR
// exit ;
1471: POP
1472: POP
1473: GO 1479
// end ;
1475: GO 1440
1477: POP
1478: POP
// end ;
1479: LD_VAR 0 3
1483: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1484: LD_INT 0
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
1490: PPUSH
1491: PPUSH
1492: PPUSH
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
1497: PPUSH
1498: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1499: LD_VAR 0 1
1503: NOT
1504: PUSH
1505: LD_VAR 0 1
1509: PPUSH
1510: CALL_OW 257
1514: PUSH
1515: LD_INT 9
1517: NONEQUAL
1518: OR
1519: IFFALSE 1523
// exit ;
1521: GO 2096
// side := GetSide ( unit ) ;
1523: LD_ADDR_VAR 0 9
1527: PUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 255
1537: ST_TO_ADDR
// tech_space := tech_spacanom ;
1538: LD_ADDR_VAR 0 12
1542: PUSH
1543: LD_INT 29
1545: ST_TO_ADDR
// tech_time := tech_taurad ;
1546: LD_ADDR_VAR 0 13
1550: PUSH
1551: LD_INT 28
1553: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1554: LD_ADDR_VAR 0 11
1558: PUSH
1559: LD_VAR 0 1
1563: PPUSH
1564: CALL_OW 310
1568: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1569: LD_VAR 0 11
1573: PPUSH
1574: CALL_OW 247
1578: PUSH
1579: LD_INT 2
1581: EQUAL
1582: IFFALSE 1586
// exit ;
1584: GO 2096
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1586: LD_ADDR_VAR 0 8
1590: PUSH
1591: LD_INT 81
1593: PUSH
1594: LD_VAR 0 9
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 3
1605: PUSH
1606: LD_INT 21
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PPUSH
1624: CALL_OW 69
1628: ST_TO_ADDR
// if not tmp then
1629: LD_VAR 0 8
1633: NOT
1634: IFFALSE 1638
// exit ;
1636: GO 2096
// if in_unit then
1638: LD_VAR 0 11
1642: IFFALSE 1666
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1644: LD_ADDR_VAR 0 10
1648: PUSH
1649: LD_VAR 0 8
1653: PPUSH
1654: LD_VAR 0 11
1658: PPUSH
1659: CALL_OW 74
1663: ST_TO_ADDR
1664: GO 1686
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1666: LD_ADDR_VAR 0 10
1670: PUSH
1671: LD_VAR 0 8
1675: PPUSH
1676: LD_VAR 0 1
1680: PPUSH
1681: CALL_OW 74
1685: ST_TO_ADDR
// if not enemy then
1686: LD_VAR 0 10
1690: NOT
1691: IFFALSE 1695
// exit ;
1693: GO 2096
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1695: LD_VAR 0 11
1699: PUSH
1700: LD_VAR 0 11
1704: PPUSH
1705: LD_VAR 0 10
1709: PPUSH
1710: CALL_OW 296
1714: PUSH
1715: LD_INT 13
1717: GREATER
1718: AND
1719: PUSH
1720: LD_VAR 0 1
1724: PPUSH
1725: LD_VAR 0 10
1729: PPUSH
1730: CALL_OW 296
1734: PUSH
1735: LD_INT 12
1737: GREATER
1738: OR
1739: IFFALSE 1743
// exit ;
1741: GO 2096
// missile := [ 1 ] ;
1743: LD_ADDR_VAR 0 14
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: EMPTY
1752: LIST
1753: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1754: LD_VAR 0 9
1758: PPUSH
1759: LD_VAR 0 12
1763: PPUSH
1764: CALL_OW 325
1768: IFFALSE 1797
// missile := Replace ( missile , missile + 1 , 2 ) ;
1770: LD_ADDR_VAR 0 14
1774: PUSH
1775: LD_VAR 0 14
1779: PPUSH
1780: LD_VAR 0 14
1784: PUSH
1785: LD_INT 1
1787: PLUS
1788: PPUSH
1789: LD_INT 2
1791: PPUSH
1792: CALL_OW 1
1796: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1797: LD_VAR 0 9
1801: PPUSH
1802: LD_VAR 0 13
1806: PPUSH
1807: CALL_OW 325
1811: PUSH
1812: LD_VAR 0 10
1816: PPUSH
1817: CALL_OW 255
1821: PPUSH
1822: LD_VAR 0 13
1826: PPUSH
1827: CALL_OW 325
1831: NOT
1832: AND
1833: IFFALSE 1862
// missile := Replace ( missile , missile + 1 , 3 ) ;
1835: LD_ADDR_VAR 0 14
1839: PUSH
1840: LD_VAR 0 14
1844: PPUSH
1845: LD_VAR 0 14
1849: PUSH
1850: LD_INT 1
1852: PLUS
1853: PPUSH
1854: LD_INT 3
1856: PPUSH
1857: CALL_OW 1
1861: ST_TO_ADDR
// if missile < 2 then
1862: LD_VAR 0 14
1866: PUSH
1867: LD_INT 2
1869: LESS
1870: IFFALSE 1874
// exit ;
1872: GO 2096
// x := GetX ( enemy ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_VAR 0 10
1883: PPUSH
1884: CALL_OW 250
1888: ST_TO_ADDR
// y := GetY ( enemy ) ;
1889: LD_ADDR_VAR 0 5
1893: PUSH
1894: LD_VAR 0 10
1898: PPUSH
1899: CALL_OW 251
1903: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1904: LD_ADDR_VAR 0 6
1908: PUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: NEG
1917: PPUSH
1918: LD_INT 1
1920: PPUSH
1921: CALL_OW 12
1925: PLUS
1926: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1927: LD_ADDR_VAR 0 7
1931: PUSH
1932: LD_VAR 0 5
1936: PUSH
1937: LD_INT 1
1939: NEG
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 12
1948: PLUS
1949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1950: LD_VAR 0 6
1954: PPUSH
1955: LD_VAR 0 7
1959: PPUSH
1960: CALL_OW 488
1964: NOT
1965: IFFALSE 1987
// begin _x := x ;
1967: LD_ADDR_VAR 0 6
1971: PUSH
1972: LD_VAR 0 4
1976: ST_TO_ADDR
// _y := y ;
1977: LD_ADDR_VAR 0 7
1981: PUSH
1982: LD_VAR 0 5
1986: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_INT 1
1994: PPUSH
1995: LD_VAR 0 14
1999: PPUSH
2000: CALL_OW 12
2004: ST_TO_ADDR
// case i of 1 :
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 1
2012: DOUBLE
2013: EQUAL
2014: IFTRUE 2018
2016: GO 2035
2018: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2019: LD_VAR 0 1
2023: PPUSH
2024: LD_VAR 0 10
2028: PPUSH
2029: CALL_OW 115
2033: GO 2096
2035: LD_INT 2
2037: DOUBLE
2038: EQUAL
2039: IFTRUE 2043
2041: GO 2065
2043: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_VAR 0 6
2053: PPUSH
2054: LD_VAR 0 7
2058: PPUSH
2059: CALL_OW 153
2063: GO 2096
2065: LD_INT 3
2067: DOUBLE
2068: EQUAL
2069: IFTRUE 2073
2071: GO 2095
2073: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2074: LD_VAR 0 1
2078: PPUSH
2079: LD_VAR 0 6
2083: PPUSH
2084: LD_VAR 0 7
2088: PPUSH
2089: CALL_OW 154
2093: GO 2096
2095: POP
// end ;
2096: LD_VAR 0 2
2100: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
// if not unit or not building then
2109: LD_VAR 0 1
2113: NOT
2114: PUSH
2115: LD_VAR 0 2
2119: NOT
2120: OR
2121: IFFALSE 2125
// exit ;
2123: GO 2283
// x := GetX ( building ) ;
2125: LD_ADDR_VAR 0 5
2129: PUSH
2130: LD_VAR 0 2
2134: PPUSH
2135: CALL_OW 250
2139: ST_TO_ADDR
// y := GetY ( building ) ;
2140: LD_ADDR_VAR 0 6
2144: PUSH
2145: LD_VAR 0 2
2149: PPUSH
2150: CALL_OW 251
2154: ST_TO_ADDR
// for i = 0 to 5 do
2155: LD_ADDR_VAR 0 4
2159: PUSH
2160: DOUBLE
2161: LD_INT 0
2163: DEC
2164: ST_TO_ADDR
2165: LD_INT 5
2167: PUSH
2168: FOR_TO
2169: IFFALSE 2281
// begin _x := ShiftX ( x , i , 3 ) ;
2171: LD_ADDR_VAR 0 7
2175: PUSH
2176: LD_VAR 0 5
2180: PPUSH
2181: LD_VAR 0 4
2185: PPUSH
2186: LD_INT 3
2188: PPUSH
2189: CALL_OW 272
2193: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: LD_VAR 0 6
2203: PPUSH
2204: LD_VAR 0 4
2208: PPUSH
2209: LD_INT 3
2211: PPUSH
2212: CALL_OW 273
2216: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2217: LD_VAR 0 7
2221: PPUSH
2222: LD_VAR 0 8
2226: PPUSH
2227: CALL_OW 488
2231: NOT
2232: IFFALSE 2236
// continue ;
2234: GO 2168
// if HexInfo ( _x , _y ) = 0 then
2236: LD_VAR 0 7
2240: PPUSH
2241: LD_VAR 0 8
2245: PPUSH
2246: CALL_OW 428
2250: PUSH
2251: LD_INT 0
2253: EQUAL
2254: IFFALSE 2279
// begin ComMoveXY ( unit , _x , _y ) ;
2256: LD_VAR 0 1
2260: PPUSH
2261: LD_VAR 0 7
2265: PPUSH
2266: LD_VAR 0 8
2270: PPUSH
2271: CALL_OW 111
// exit ;
2275: POP
2276: POP
2277: GO 2283
// end ; end ;
2279: GO 2168
2281: POP
2282: POP
// end ;
2283: LD_VAR 0 3
2287: RET
// export function ScanBase ( side , base_area ) ; begin
2288: LD_INT 0
2290: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 2
2300: PPUSH
2301: LD_INT 81
2303: PUSH
2304: LD_VAR 0 1
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PPUSH
2313: CALL_OW 70
2317: ST_TO_ADDR
// end ;
2318: LD_VAR 0 3
2322: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2323: LD_INT 0
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
// result := false ;
2329: LD_ADDR_VAR 0 2
2333: PUSH
2334: LD_INT 0
2336: ST_TO_ADDR
// side := GetSide ( unit ) ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: LD_VAR 0 1
2346: PPUSH
2347: CALL_OW 255
2351: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2352: LD_ADDR_VAR 0 4
2356: PUSH
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 248
2366: ST_TO_ADDR
// case nat of 1 :
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: DOUBLE
2375: EQUAL
2376: IFTRUE 2380
2378: GO 2391
2380: POP
// tech := tech_lassight ; 2 :
2381: LD_ADDR_VAR 0 5
2385: PUSH
2386: LD_INT 12
2388: ST_TO_ADDR
2389: GO 2430
2391: LD_INT 2
2393: DOUBLE
2394: EQUAL
2395: IFTRUE 2399
2397: GO 2410
2399: POP
// tech := tech_mortar ; 3 :
2400: LD_ADDR_VAR 0 5
2404: PUSH
2405: LD_INT 41
2407: ST_TO_ADDR
2408: GO 2430
2410: LD_INT 3
2412: DOUBLE
2413: EQUAL
2414: IFTRUE 2418
2416: GO 2429
2418: POP
// tech := tech_bazooka ; end ;
2419: LD_ADDR_VAR 0 5
2423: PUSH
2424: LD_INT 44
2426: ST_TO_ADDR
2427: GO 2430
2429: POP
// if Researched ( side , tech ) then
2430: LD_VAR 0 3
2434: PPUSH
2435: LD_VAR 0 5
2439: PPUSH
2440: CALL_OW 325
2444: IFFALSE 2471
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: LD_INT 8
2456: PUSH
2457: LD_INT 9
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_VAR 0 4
2469: ARRAY
2470: ST_TO_ADDR
// end ;
2471: LD_VAR 0 2
2475: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
2480: PPUSH
// if not mines then
2481: LD_VAR 0 2
2485: NOT
2486: IFFALSE 2490
// exit ;
2488: GO 2634
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_INT 81
2497: PUSH
2498: LD_VAR 0 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 3
2509: PUSH
2510: LD_INT 21
2512: PUSH
2513: LD_INT 3
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PPUSH
2528: CALL_OW 69
2532: ST_TO_ADDR
// for i in mines do
2533: LD_ADDR_VAR 0 4
2537: PUSH
2538: LD_VAR 0 2
2542: PUSH
2543: FOR_IN
2544: IFFALSE 2632
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2546: LD_VAR 0 4
2550: PUSH
2551: LD_INT 1
2553: ARRAY
2554: PPUSH
2555: LD_VAR 0 4
2559: PUSH
2560: LD_INT 2
2562: ARRAY
2563: PPUSH
2564: CALL_OW 458
2568: NOT
2569: IFFALSE 2573
// continue ;
2571: GO 2543
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2573: LD_VAR 0 4
2577: PUSH
2578: LD_INT 1
2580: ARRAY
2581: PPUSH
2582: LD_VAR 0 4
2586: PUSH
2587: LD_INT 2
2589: ARRAY
2590: PPUSH
2591: CALL_OW 428
2595: PUSH
2596: LD_VAR 0 5
2600: IN
2601: IFFALSE 2630
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2603: LD_VAR 0 4
2607: PUSH
2608: LD_INT 1
2610: ARRAY
2611: PPUSH
2612: LD_VAR 0 4
2616: PUSH
2617: LD_INT 2
2619: ARRAY
2620: PPUSH
2621: LD_VAR 0 1
2625: PPUSH
2626: CALL_OW 456
// end ;
2630: GO 2543
2632: POP
2633: POP
// end ;
2634: LD_VAR 0 3
2638: RET
// export function Count ( array ) ; begin
2639: LD_INT 0
2641: PPUSH
// result := array + 0 ;
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: LD_VAR 0 1
2651: PUSH
2652: LD_INT 0
2654: PLUS
2655: ST_TO_ADDR
// end ;
2656: LD_VAR 0 2
2660: RET
// export function IsEmpty ( building ) ; begin
2661: LD_INT 0
2663: PPUSH
// if not building then
2664: LD_VAR 0 1
2668: NOT
2669: IFFALSE 2673
// exit ;
2671: GO 2716
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2673: LD_ADDR_VAR 0 2
2677: PUSH
2678: LD_VAR 0 1
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_VAR 0 1
2690: PPUSH
2691: CALL_OW 255
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 58
2702: PUSH
2703: EMPTY
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 69
2714: IN
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 2
2720: RET
// export function IsNotFull ( building ) ; var places ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
// if not building then
2725: LD_VAR 0 1
2729: NOT
2730: IFFALSE 2734
// exit ;
2732: GO 2762
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2734: LD_ADDR_VAR 0 2
2738: PUSH
2739: LD_VAR 0 1
2743: PPUSH
2744: LD_INT 3
2746: PUSH
2747: LD_INT 62
2749: PUSH
2750: EMPTY
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 72
2761: ST_TO_ADDR
// end ;
2762: LD_VAR 0 2
2766: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2767: LD_INT 0
2769: PPUSH
2770: PPUSH
2771: PPUSH
2772: PPUSH
// tmp := [ ] ;
2773: LD_ADDR_VAR 0 3
2777: PUSH
2778: EMPTY
2779: ST_TO_ADDR
// list := [ ] ;
2780: LD_ADDR_VAR 0 5
2784: PUSH
2785: EMPTY
2786: ST_TO_ADDR
// for i = 16 to 25 do
2787: LD_ADDR_VAR 0 4
2791: PUSH
2792: DOUBLE
2793: LD_INT 16
2795: DEC
2796: ST_TO_ADDR
2797: LD_INT 25
2799: PUSH
2800: FOR_TO
2801: IFFALSE 2874
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2803: LD_ADDR_VAR 0 3
2807: PUSH
2808: LD_VAR 0 3
2812: PUSH
2813: LD_INT 22
2815: PUSH
2816: LD_VAR 0 1
2820: PPUSH
2821: CALL_OW 255
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 91
2832: PUSH
2833: LD_VAR 0 1
2837: PUSH
2838: LD_INT 6
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 30
2848: PUSH
2849: LD_VAR 0 4
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: PUSH
2863: EMPTY
2864: LIST
2865: PPUSH
2866: CALL_OW 69
2870: ADD
2871: ST_TO_ADDR
2872: GO 2800
2874: POP
2875: POP
// for i = 1 to tmp do
2876: LD_ADDR_VAR 0 4
2880: PUSH
2881: DOUBLE
2882: LD_INT 1
2884: DEC
2885: ST_TO_ADDR
2886: LD_VAR 0 3
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2980
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2894: LD_ADDR_VAR 0 5
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: LD_VAR 0 3
2908: PUSH
2909: LD_VAR 0 4
2913: ARRAY
2914: PPUSH
2915: CALL_OW 266
2919: PUSH
2920: LD_VAR 0 3
2924: PUSH
2925: LD_VAR 0 4
2929: ARRAY
2930: PPUSH
2931: CALL_OW 250
2935: PUSH
2936: LD_VAR 0 3
2940: PUSH
2941: LD_VAR 0 4
2945: ARRAY
2946: PPUSH
2947: CALL_OW 251
2951: PUSH
2952: LD_VAR 0 3
2956: PUSH
2957: LD_VAR 0 4
2961: ARRAY
2962: PPUSH
2963: CALL_OW 254
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: ADD
2977: ST_TO_ADDR
2978: GO 2891
2980: POP
2981: POP
// result := list ;
2982: LD_ADDR_VAR 0 2
2986: PUSH
2987: LD_VAR 0 5
2991: ST_TO_ADDR
// end ;
2992: LD_VAR 0 2
2996: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2997: LD_INT 0
2999: PPUSH
3000: PPUSH
3001: PPUSH
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
// if not factory then
3006: LD_VAR 0 1
3010: NOT
3011: IFFALSE 3015
// exit ;
3013: GO 3608
// if control = control_apeman then
3015: LD_VAR 0 4
3019: PUSH
3020: LD_INT 5
3022: EQUAL
3023: IFFALSE 3132
// begin tmp := UnitsInside ( factory ) ;
3025: LD_ADDR_VAR 0 8
3029: PUSH
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 313
3039: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3040: LD_VAR 0 8
3044: PPUSH
3045: LD_INT 25
3047: PUSH
3048: LD_INT 12
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 72
3059: NOT
3060: IFFALSE 3070
// control := control_manual ;
3062: LD_ADDR_VAR 0 4
3066: PUSH
3067: LD_INT 1
3069: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3070: LD_ADDR_VAR 0 8
3074: PUSH
3075: LD_VAR 0 1
3079: PPUSH
3080: CALL 2767 0 1
3084: ST_TO_ADDR
// if tmp then
3085: LD_VAR 0 8
3089: IFFALSE 3132
// begin for i in tmp do
3091: LD_ADDR_VAR 0 7
3095: PUSH
3096: LD_VAR 0 8
3100: PUSH
3101: FOR_IN
3102: IFFALSE 3130
// if i [ 1 ] = b_ext_radio then
3104: LD_VAR 0 7
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: PUSH
3113: LD_INT 22
3115: EQUAL
3116: IFFALSE 3128
// begin control := control_remote ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 2
3125: ST_TO_ADDR
// break ;
3126: GO 3130
// end ;
3128: GO 3101
3130: POP
3131: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3132: LD_VAR 0 1
3136: PPUSH
3137: LD_VAR 0 2
3141: PPUSH
3142: LD_VAR 0 3
3146: PPUSH
3147: LD_VAR 0 4
3151: PPUSH
3152: LD_VAR 0 5
3156: PPUSH
3157: CALL_OW 448
3161: IFFALSE 3196
// begin result := [ chassis , engine , control , weapon ] ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 2
3172: PUSH
3173: LD_VAR 0 3
3177: PUSH
3178: LD_VAR 0 4
3182: PUSH
3183: LD_VAR 0 5
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: ST_TO_ADDR
// exit ;
3194: GO 3608
// end ; _chassis := AvailableChassisList ( factory ) ;
3196: LD_ADDR_VAR 0 9
3200: PUSH
3201: LD_VAR 0 1
3205: PPUSH
3206: CALL_OW 475
3210: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3211: LD_ADDR_VAR 0 11
3215: PUSH
3216: LD_VAR 0 1
3220: PPUSH
3221: CALL_OW 476
3225: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3226: LD_ADDR_VAR 0 12
3230: PUSH
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 477
3240: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3241: LD_ADDR_VAR 0 10
3245: PUSH
3246: LD_VAR 0 1
3250: PPUSH
3251: CALL_OW 478
3255: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3256: LD_VAR 0 9
3260: NOT
3261: PUSH
3262: LD_VAR 0 11
3266: NOT
3267: OR
3268: PUSH
3269: LD_VAR 0 12
3273: NOT
3274: OR
3275: PUSH
3276: LD_VAR 0 10
3280: NOT
3281: OR
3282: IFFALSE 3317
// begin result := [ chassis , engine , control , weapon ] ;
3284: LD_ADDR_VAR 0 6
3288: PUSH
3289: LD_VAR 0 2
3293: PUSH
3294: LD_VAR 0 3
3298: PUSH
3299: LD_VAR 0 4
3303: PUSH
3304: LD_VAR 0 5
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: ST_TO_ADDR
// exit ;
3315: GO 3608
// end ; if not chassis in _chassis then
3317: LD_VAR 0 2
3321: PUSH
3322: LD_VAR 0 9
3326: IN
3327: NOT
3328: IFFALSE 3354
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: LD_VAR 0 9
3339: PUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_VAR 0 9
3347: PPUSH
3348: CALL_OW 12
3352: ARRAY
3353: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3354: LD_VAR 0 2
3358: PPUSH
3359: LD_VAR 0 3
3363: PPUSH
3364: CALL 3613 0 2
3368: NOT
3369: IFFALSE 3428
// repeat engine := _engine [ 1 ] ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: LD_VAR 0 11
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3385: LD_ADDR_VAR 0 11
3389: PUSH
3390: LD_VAR 0 11
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 3
3402: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3403: LD_VAR 0 2
3407: PPUSH
3408: LD_VAR 0 3
3412: PPUSH
3413: CALL 3613 0 2
3417: PUSH
3418: LD_VAR 0 11
3422: PUSH
3423: EMPTY
3424: EQUAL
3425: OR
3426: IFFALSE 3371
// if not control in _control then
3428: LD_VAR 0 4
3432: PUSH
3433: LD_VAR 0 12
3437: IN
3438: NOT
3439: IFFALSE 3465
// control := _control [ rand ( 1 , _control ) ] ;
3441: LD_ADDR_VAR 0 4
3445: PUSH
3446: LD_VAR 0 12
3450: PUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_VAR 0 12
3458: PPUSH
3459: CALL_OW 12
3463: ARRAY
3464: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3465: LD_VAR 0 2
3469: PPUSH
3470: LD_VAR 0 5
3474: PPUSH
3475: CALL 3833 0 2
3479: NOT
3480: IFFALSE 3539
// repeat weapon := _weapon [ 1 ] ;
3482: LD_ADDR_VAR 0 5
3486: PUSH
3487: LD_VAR 0 10
3491: PUSH
3492: LD_INT 1
3494: ARRAY
3495: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3496: LD_ADDR_VAR 0 10
3500: PUSH
3501: LD_VAR 0 10
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 3
3513: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: CALL 3833 0 2
3528: PUSH
3529: LD_VAR 0 10
3533: PUSH
3534: EMPTY
3535: EQUAL
3536: OR
3537: IFFALSE 3482
// result := [ ] ;
3539: LD_ADDR_VAR 0 6
3543: PUSH
3544: EMPTY
3545: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_VAR 0 2
3555: PPUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: LD_VAR 0 4
3565: PPUSH
3566: LD_VAR 0 5
3570: PPUSH
3571: CALL_OW 448
3575: IFFALSE 3608
// result := [ chassis , engine , control , weapon ] ;
3577: LD_ADDR_VAR 0 6
3581: PUSH
3582: LD_VAR 0 2
3586: PUSH
3587: LD_VAR 0 3
3591: PUSH
3592: LD_VAR 0 4
3596: PUSH
3597: LD_VAR 0 5
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: ST_TO_ADDR
// end ;
3608: LD_VAR 0 6
3612: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3613: LD_INT 0
3615: PPUSH
// if not chassis or not engine then
3616: LD_VAR 0 1
3620: NOT
3621: PUSH
3622: LD_VAR 0 2
3626: NOT
3627: OR
3628: IFFALSE 3632
// exit ;
3630: GO 3828
// case engine of engine_solar :
3632: LD_VAR 0 2
3636: PUSH
3637: LD_INT 2
3639: DOUBLE
3640: EQUAL
3641: IFTRUE 3645
3643: GO 3683
3645: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3646: LD_ADDR_VAR 0 3
3650: PUSH
3651: LD_INT 11
3653: PUSH
3654: LD_INT 12
3656: PUSH
3657: LD_INT 13
3659: PUSH
3660: LD_INT 14
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: LD_INT 2
3668: PUSH
3669: LD_INT 3
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: ST_TO_ADDR
3681: GO 3812
3683: LD_INT 1
3685: DOUBLE
3686: EQUAL
3687: IFTRUE 3691
3689: GO 3753
3691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3692: LD_ADDR_VAR 0 3
3696: PUSH
3697: LD_INT 11
3699: PUSH
3700: LD_INT 12
3702: PUSH
3703: LD_INT 13
3705: PUSH
3706: LD_INT 14
3708: PUSH
3709: LD_INT 1
3711: PUSH
3712: LD_INT 2
3714: PUSH
3715: LD_INT 3
3717: PUSH
3718: LD_INT 4
3720: PUSH
3721: LD_INT 5
3723: PUSH
3724: LD_INT 21
3726: PUSH
3727: LD_INT 23
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 24
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: ST_TO_ADDR
3751: GO 3812
3753: LD_INT 3
3755: DOUBLE
3756: EQUAL
3757: IFTRUE 3761
3759: GO 3811
3761: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: LD_INT 13
3769: PUSH
3770: LD_INT 14
3772: PUSH
3773: LD_INT 2
3775: PUSH
3776: LD_INT 3
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: LD_INT 5
3784: PUSH
3785: LD_INT 21
3787: PUSH
3788: LD_INT 22
3790: PUSH
3791: LD_INT 23
3793: PUSH
3794: LD_INT 24
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: ST_TO_ADDR
3809: GO 3812
3811: POP
// result := ( chassis in result ) ;
3812: LD_ADDR_VAR 0 3
3816: PUSH
3817: LD_VAR 0 1
3821: PUSH
3822: LD_VAR 0 3
3826: IN
3827: ST_TO_ADDR
// end ;
3828: LD_VAR 0 3
3832: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3833: LD_INT 0
3835: PPUSH
// if not chassis or not weapon then
3836: LD_VAR 0 1
3840: NOT
3841: PUSH
3842: LD_VAR 0 2
3846: NOT
3847: OR
3848: IFFALSE 3852
// exit ;
3850: GO 4912
// case weapon of us_machine_gun :
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 2
3859: DOUBLE
3860: EQUAL
3861: IFTRUE 3865
3863: GO 3895
3865: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_INT 2
3876: PUSH
3877: LD_INT 3
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: ST_TO_ADDR
3893: GO 4896
3895: LD_INT 3
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 3933
3903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 3
3917: PUSH
3918: LD_INT 4
3920: PUSH
3921: LD_INT 5
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: ST_TO_ADDR
3931: GO 4896
3933: LD_INT 11
3935: DOUBLE
3936: EQUAL
3937: IFTRUE 3941
3939: GO 3971
3941: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3942: LD_ADDR_VAR 0 3
3946: PUSH
3947: LD_INT 1
3949: PUSH
3950: LD_INT 2
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: LD_INT 4
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: ST_TO_ADDR
3969: GO 4896
3971: LD_INT 4
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4005
3979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: LD_INT 2
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: LD_INT 4
3993: PUSH
3994: LD_INT 5
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: ST_TO_ADDR
4003: GO 4896
4005: LD_INT 5
4007: DOUBLE
4008: EQUAL
4009: IFTRUE 4013
4011: GO 4039
4013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4014: LD_ADDR_VAR 0 3
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: LD_INT 3
4024: PUSH
4025: LD_INT 4
4027: PUSH
4028: LD_INT 5
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: ST_TO_ADDR
4037: GO 4896
4039: LD_INT 9
4041: DOUBLE
4042: EQUAL
4043: IFTRUE 4047
4045: GO 4073
4047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4048: LD_ADDR_VAR 0 3
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: LD_INT 4
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: ST_TO_ADDR
4071: GO 4896
4073: LD_INT 7
4075: DOUBLE
4076: EQUAL
4077: IFTRUE 4081
4079: GO 4107
4081: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: LD_INT 2
4089: PUSH
4090: LD_INT 3
4092: PUSH
4093: LD_INT 4
4095: PUSH
4096: LD_INT 5
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: ST_TO_ADDR
4105: GO 4896
4107: LD_INT 12
4109: DOUBLE
4110: EQUAL
4111: IFTRUE 4115
4113: GO 4141
4115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4116: LD_ADDR_VAR 0 3
4120: PUSH
4121: LD_INT 2
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: LD_INT 5
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: ST_TO_ADDR
4139: GO 4896
4141: LD_INT 13
4143: DOUBLE
4144: EQUAL
4145: IFTRUE 4149
4147: GO 4175
4149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4150: LD_ADDR_VAR 0 3
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 4896
4175: LD_INT 14
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4201
4183: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: LD_INT 4
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
4199: GO 4896
4201: LD_INT 6
4203: DOUBLE
4204: EQUAL
4205: IFTRUE 4209
4207: GO 4227
4209: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4210: LD_ADDR_VAR 0 3
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: ST_TO_ADDR
4225: GO 4896
4227: LD_INT 10
4229: DOUBLE
4230: EQUAL
4231: IFTRUE 4235
4233: GO 4253
4235: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: ST_TO_ADDR
4251: GO 4896
4253: LD_INT 22
4255: DOUBLE
4256: EQUAL
4257: IFTRUE 4261
4259: GO 4287
4261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: LD_INT 11
4269: PUSH
4270: LD_INT 12
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 14
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: ST_TO_ADDR
4285: GO 4896
4287: LD_INT 23
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4321
4295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: LD_INT 11
4303: PUSH
4304: LD_INT 12
4306: PUSH
4307: LD_INT 13
4309: PUSH
4310: LD_INT 14
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: ST_TO_ADDR
4319: GO 4896
4321: LD_INT 24
4323: DOUBLE
4324: EQUAL
4325: IFTRUE 4329
4327: GO 4355
4329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: LD_INT 11
4337: PUSH
4338: LD_INT 12
4340: PUSH
4341: LD_INT 13
4343: PUSH
4344: LD_INT 14
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: ST_TO_ADDR
4353: GO 4896
4355: LD_INT 30
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4389
4363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: LD_INT 11
4371: PUSH
4372: LD_INT 12
4374: PUSH
4375: LD_INT 13
4377: PUSH
4378: LD_INT 14
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: ST_TO_ADDR
4387: GO 4896
4389: LD_INT 25
4391: DOUBLE
4392: EQUAL
4393: IFTRUE 4397
4395: GO 4415
4397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4398: LD_ADDR_VAR 0 3
4402: PUSH
4403: LD_INT 13
4405: PUSH
4406: LD_INT 14
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: ST_TO_ADDR
4413: GO 4896
4415: LD_INT 27
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4441
4423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 13
4431: PUSH
4432: LD_INT 14
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: ST_TO_ADDR
4439: GO 4896
4441: LD_INT 92
4443: DOUBLE
4444: EQUAL
4445: IFTRUE 4449
4447: GO 4475
4449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: LD_INT 11
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: LD_INT 13
4463: PUSH
4464: LD_INT 14
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: ST_TO_ADDR
4473: GO 4896
4475: LD_INT 28
4477: DOUBLE
4478: EQUAL
4479: IFTRUE 4483
4481: GO 4501
4483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 13
4491: PUSH
4492: LD_INT 14
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: ST_TO_ADDR
4499: GO 4896
4501: LD_INT 29
4503: DOUBLE
4504: EQUAL
4505: IFTRUE 4509
4507: GO 4527
4509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4510: LD_ADDR_VAR 0 3
4514: PUSH
4515: LD_INT 13
4517: PUSH
4518: LD_INT 14
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: ST_TO_ADDR
4525: GO 4896
4527: LD_INT 31
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4553
4535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 13
4543: PUSH
4544: LD_INT 14
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: ST_TO_ADDR
4551: GO 4896
4553: LD_INT 26
4555: DOUBLE
4556: EQUAL
4557: IFTRUE 4561
4559: GO 4579
4561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_INT 13
4569: PUSH
4570: LD_INT 14
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: ST_TO_ADDR
4577: GO 4896
4579: LD_INT 42
4581: DOUBLE
4582: EQUAL
4583: IFTRUE 4587
4585: GO 4613
4587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_INT 21
4595: PUSH
4596: LD_INT 22
4598: PUSH
4599: LD_INT 23
4601: PUSH
4602: LD_INT 24
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: ST_TO_ADDR
4611: GO 4896
4613: LD_INT 43
4615: DOUBLE
4616: EQUAL
4617: IFTRUE 4621
4619: GO 4647
4621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_INT 21
4629: PUSH
4630: LD_INT 22
4632: PUSH
4633: LD_INT 23
4635: PUSH
4636: LD_INT 24
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
4645: GO 4896
4647: LD_INT 44
4649: DOUBLE
4650: EQUAL
4651: IFTRUE 4655
4653: GO 4681
4655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4656: LD_ADDR_VAR 0 3
4660: PUSH
4661: LD_INT 21
4663: PUSH
4664: LD_INT 22
4666: PUSH
4667: LD_INT 23
4669: PUSH
4670: LD_INT 24
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: ST_TO_ADDR
4679: GO 4896
4681: LD_INT 45
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4715
4689: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4690: LD_ADDR_VAR 0 3
4694: PUSH
4695: LD_INT 21
4697: PUSH
4698: LD_INT 22
4700: PUSH
4701: LD_INT 23
4703: PUSH
4704: LD_INT 24
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: ST_TO_ADDR
4713: GO 4896
4715: LD_INT 49
4717: DOUBLE
4718: EQUAL
4719: IFTRUE 4723
4721: GO 4749
4723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4724: LD_ADDR_VAR 0 3
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 22
4734: PUSH
4735: LD_INT 23
4737: PUSH
4738: LD_INT 24
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 4896
4749: LD_INT 51
4751: DOUBLE
4752: EQUAL
4753: IFTRUE 4757
4755: GO 4783
4757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 22
4768: PUSH
4769: LD_INT 23
4771: PUSH
4772: LD_INT 24
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 4896
4783: LD_INT 52
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4817
4791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 23
4805: PUSH
4806: LD_INT 24
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: ST_TO_ADDR
4815: GO 4896
4817: LD_INT 53
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4843
4825: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: LD_INT 23
4833: PUSH
4834: LD_INT 24
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: ST_TO_ADDR
4841: GO 4896
4843: LD_INT 46
4845: DOUBLE
4846: EQUAL
4847: IFTRUE 4851
4849: GO 4869
4851: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4852: LD_ADDR_VAR 0 3
4856: PUSH
4857: LD_INT 23
4859: PUSH
4860: LD_INT 24
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: ST_TO_ADDR
4867: GO 4896
4869: LD_INT 47
4871: DOUBLE
4872: EQUAL
4873: IFTRUE 4877
4875: GO 4895
4877: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4878: LD_ADDR_VAR 0 3
4882: PUSH
4883: LD_INT 23
4885: PUSH
4886: LD_INT 24
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: ST_TO_ADDR
4893: GO 4896
4895: POP
// result := ( chassis in result ) ;
4896: LD_ADDR_VAR 0 3
4900: PUSH
4901: LD_VAR 0 1
4905: PUSH
4906: LD_VAR 0 3
4910: IN
4911: ST_TO_ADDR
// end ;
4912: LD_VAR 0 3
4916: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4917: LD_INT 0
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
4923: PPUSH
4924: PPUSH
4925: PPUSH
// result := array ;
4926: LD_ADDR_VAR 0 5
4930: PUSH
4931: LD_VAR 0 1
4935: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4936: LD_VAR 0 1
4940: NOT
4941: PUSH
4942: LD_VAR 0 2
4946: NOT
4947: OR
4948: PUSH
4949: LD_VAR 0 3
4953: NOT
4954: OR
4955: PUSH
4956: LD_VAR 0 2
4960: PUSH
4961: LD_VAR 0 1
4965: GREATER
4966: OR
4967: PUSH
4968: LD_VAR 0 3
4972: PUSH
4973: LD_VAR 0 1
4977: GREATER
4978: OR
4979: IFFALSE 4983
// exit ;
4981: GO 5279
// if direction then
4983: LD_VAR 0 4
4987: IFFALSE 5051
// begin d := 1 ;
4989: LD_ADDR_VAR 0 9
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// if i_from > i_to then
4997: LD_VAR 0 2
5001: PUSH
5002: LD_VAR 0 3
5006: GREATER
5007: IFFALSE 5033
// length := ( array - i_from ) + i_to else
5009: LD_ADDR_VAR 0 11
5013: PUSH
5014: LD_VAR 0 1
5018: PUSH
5019: LD_VAR 0 2
5023: MINUS
5024: PUSH
5025: LD_VAR 0 3
5029: PLUS
5030: ST_TO_ADDR
5031: GO 5049
// length := i_to - i_from ;
5033: LD_ADDR_VAR 0 11
5037: PUSH
5038: LD_VAR 0 3
5042: PUSH
5043: LD_VAR 0 2
5047: MINUS
5048: ST_TO_ADDR
// end else
5049: GO 5112
// begin d := - 1 ;
5051: LD_ADDR_VAR 0 9
5055: PUSH
5056: LD_INT 1
5058: NEG
5059: ST_TO_ADDR
// if i_from > i_to then
5060: LD_VAR 0 2
5064: PUSH
5065: LD_VAR 0 3
5069: GREATER
5070: IFFALSE 5090
// length := i_from - i_to else
5072: LD_ADDR_VAR 0 11
5076: PUSH
5077: LD_VAR 0 2
5081: PUSH
5082: LD_VAR 0 3
5086: MINUS
5087: ST_TO_ADDR
5088: GO 5112
// length := ( array - i_to ) + i_from ;
5090: LD_ADDR_VAR 0 11
5094: PUSH
5095: LD_VAR 0 1
5099: PUSH
5100: LD_VAR 0 3
5104: MINUS
5105: PUSH
5106: LD_VAR 0 2
5110: PLUS
5111: ST_TO_ADDR
// end ; if not length then
5112: LD_VAR 0 11
5116: NOT
5117: IFFALSE 5121
// exit ;
5119: GO 5279
// tmp := array ;
5121: LD_ADDR_VAR 0 10
5125: PUSH
5126: LD_VAR 0 1
5130: ST_TO_ADDR
// for i = 1 to length do
5131: LD_ADDR_VAR 0 6
5135: PUSH
5136: DOUBLE
5137: LD_INT 1
5139: DEC
5140: ST_TO_ADDR
5141: LD_VAR 0 11
5145: PUSH
5146: FOR_TO
5147: IFFALSE 5267
// begin for j = 1 to array do
5149: LD_ADDR_VAR 0 7
5153: PUSH
5154: DOUBLE
5155: LD_INT 1
5157: DEC
5158: ST_TO_ADDR
5159: LD_VAR 0 1
5163: PUSH
5164: FOR_TO
5165: IFFALSE 5253
// begin k := j + d ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_VAR 0 7
5176: PUSH
5177: LD_VAR 0 9
5181: PLUS
5182: ST_TO_ADDR
// if k > array then
5183: LD_VAR 0 8
5187: PUSH
5188: LD_VAR 0 1
5192: GREATER
5193: IFFALSE 5203
// k := 1 ;
5195: LD_ADDR_VAR 0 8
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// if not k then
5203: LD_VAR 0 8
5207: NOT
5208: IFFALSE 5220
// k := array ;
5210: LD_ADDR_VAR 0 8
5214: PUSH
5215: LD_VAR 0 1
5219: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5220: LD_ADDR_VAR 0 10
5224: PUSH
5225: LD_VAR 0 10
5229: PPUSH
5230: LD_VAR 0 8
5234: PPUSH
5235: LD_VAR 0 1
5239: PUSH
5240: LD_VAR 0 7
5244: ARRAY
5245: PPUSH
5246: CALL_OW 1
5250: ST_TO_ADDR
// end ;
5251: GO 5164
5253: POP
5254: POP
// array := tmp ;
5255: LD_ADDR_VAR 0 1
5259: PUSH
5260: LD_VAR 0 10
5264: ST_TO_ADDR
// end ;
5265: GO 5146
5267: POP
5268: POP
// result := array ;
5269: LD_ADDR_VAR 0 5
5273: PUSH
5274: LD_VAR 0 1
5278: ST_TO_ADDR
// end ;
5279: LD_VAR 0 5
5283: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5284: LD_INT 0
5286: PPUSH
5287: PPUSH
// result := 0 ;
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_INT 0
5295: ST_TO_ADDR
// if not array or not value in array then
5296: LD_VAR 0 1
5300: NOT
5301: PUSH
5302: LD_VAR 0 2
5306: PUSH
5307: LD_VAR 0 1
5311: IN
5312: NOT
5313: OR
5314: IFFALSE 5318
// exit ;
5316: GO 5372
// for i = 1 to array do
5318: LD_ADDR_VAR 0 4
5322: PUSH
5323: DOUBLE
5324: LD_INT 1
5326: DEC
5327: ST_TO_ADDR
5328: LD_VAR 0 1
5332: PUSH
5333: FOR_TO
5334: IFFALSE 5370
// if value = array [ i ] then
5336: LD_VAR 0 2
5340: PUSH
5341: LD_VAR 0 1
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: EQUAL
5352: IFFALSE 5368
// begin result := i ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: LD_VAR 0 4
5363: ST_TO_ADDR
// exit ;
5364: POP
5365: POP
5366: GO 5372
// end ;
5368: GO 5333
5370: POP
5371: POP
// end ;
5372: LD_VAR 0 3
5376: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5377: LD_INT 0
5379: PPUSH
// vc_chassis := chassis ;
5380: LD_ADDR_OWVAR 37
5384: PUSH
5385: LD_VAR 0 1
5389: ST_TO_ADDR
// vc_engine := engine ;
5390: LD_ADDR_OWVAR 39
5394: PUSH
5395: LD_VAR 0 2
5399: ST_TO_ADDR
// vc_control := control ;
5400: LD_ADDR_OWVAR 38
5404: PUSH
5405: LD_VAR 0 3
5409: ST_TO_ADDR
// vc_weapon := weapon ;
5410: LD_ADDR_OWVAR 40
5414: PUSH
5415: LD_VAR 0 4
5419: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5420: LD_ADDR_OWVAR 41
5424: PUSH
5425: LD_VAR 0 5
5429: ST_TO_ADDR
// end ;
5430: LD_VAR 0 6
5434: RET
// export function WantPlant ( unit ) ; var task ; begin
5435: LD_INT 0
5437: PPUSH
5438: PPUSH
// result := false ;
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_INT 0
5446: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5447: LD_ADDR_VAR 0 3
5451: PUSH
5452: LD_VAR 0 1
5456: PPUSH
5457: CALL_OW 437
5461: ST_TO_ADDR
// if task then
5462: LD_VAR 0 3
5466: IFFALSE 5494
// if task [ 1 ] [ 1 ] = p then
5468: LD_VAR 0 3
5472: PUSH
5473: LD_INT 1
5475: ARRAY
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PUSH
5481: LD_STRING p
5483: EQUAL
5484: IFFALSE 5494
// result := true ;
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: LD_INT 1
5493: ST_TO_ADDR
// end ;
5494: LD_VAR 0 2
5498: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5499: LD_INT 0
5501: PPUSH
5502: PPUSH
5503: PPUSH
5504: PPUSH
// if pos < 1 then
5505: LD_VAR 0 2
5509: PUSH
5510: LD_INT 1
5512: LESS
5513: IFFALSE 5517
// exit ;
5515: GO 5820
// if pos = 1 then
5517: LD_VAR 0 2
5521: PUSH
5522: LD_INT 1
5524: EQUAL
5525: IFFALSE 5558
// result := Replace ( arr , pos [ 1 ] , value ) else
5527: LD_ADDR_VAR 0 4
5531: PUSH
5532: LD_VAR 0 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PUSH
5542: LD_INT 1
5544: ARRAY
5545: PPUSH
5546: LD_VAR 0 3
5550: PPUSH
5551: CALL_OW 1
5555: ST_TO_ADDR
5556: GO 5820
// begin tmp := arr ;
5558: LD_ADDR_VAR 0 6
5562: PUSH
5563: LD_VAR 0 1
5567: ST_TO_ADDR
// s_arr := [ tmp ] ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 6
5577: PUSH
5578: EMPTY
5579: LIST
5580: ST_TO_ADDR
// for i = 1 to pos - 1 do
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: DOUBLE
5587: LD_INT 1
5589: DEC
5590: ST_TO_ADDR
5591: LD_VAR 0 2
5595: PUSH
5596: LD_INT 1
5598: MINUS
5599: PUSH
5600: FOR_TO
5601: IFFALSE 5646
// begin tmp := tmp [ pos [ i ] ] ;
5603: LD_ADDR_VAR 0 6
5607: PUSH
5608: LD_VAR 0 6
5612: PUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 5
5622: ARRAY
5623: ARRAY
5624: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5625: LD_ADDR_VAR 0 7
5629: PUSH
5630: LD_VAR 0 7
5634: PUSH
5635: LD_VAR 0 6
5639: PUSH
5640: EMPTY
5641: LIST
5642: ADD
5643: ST_TO_ADDR
// end ;
5644: GO 5600
5646: POP
5647: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5648: LD_ADDR_VAR 0 6
5652: PUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: LD_VAR 0 2
5662: PUSH
5663: LD_VAR 0 2
5667: ARRAY
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 1
5678: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5679: LD_ADDR_VAR 0 7
5683: PUSH
5684: LD_VAR 0 7
5688: PPUSH
5689: LD_VAR 0 7
5693: PPUSH
5694: LD_VAR 0 6
5698: PPUSH
5699: CALL_OW 1
5703: ST_TO_ADDR
// for i = s_arr downto 2 do
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: DOUBLE
5710: LD_VAR 0 7
5714: INC
5715: ST_TO_ADDR
5716: LD_INT 2
5718: PUSH
5719: FOR_DOWNTO
5720: IFFALSE 5804
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5722: LD_ADDR_VAR 0 6
5726: PUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_VAR 0 5
5736: PUSH
5737: LD_INT 1
5739: MINUS
5740: ARRAY
5741: PPUSH
5742: LD_VAR 0 2
5746: PUSH
5747: LD_VAR 0 5
5751: PUSH
5752: LD_INT 1
5754: MINUS
5755: ARRAY
5756: PPUSH
5757: LD_VAR 0 7
5761: PUSH
5762: LD_VAR 0 5
5766: ARRAY
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5773: LD_ADDR_VAR 0 7
5777: PUSH
5778: LD_VAR 0 7
5782: PPUSH
5783: LD_VAR 0 5
5787: PUSH
5788: LD_INT 1
5790: MINUS
5791: PPUSH
5792: LD_VAR 0 6
5796: PPUSH
5797: CALL_OW 1
5801: ST_TO_ADDR
// end ;
5802: GO 5719
5804: POP
5805: POP
// result := s_arr [ 1 ] ;
5806: LD_ADDR_VAR 0 4
5810: PUSH
5811: LD_VAR 0 7
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: ST_TO_ADDR
// end ; end ;
5820: LD_VAR 0 4
5824: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5825: LD_INT 0
5827: PPUSH
5828: PPUSH
// if not list then
5829: LD_VAR 0 1
5833: NOT
5834: IFFALSE 5838
// exit ;
5836: GO 5929
// i := list [ pos1 ] ;
5838: LD_ADDR_VAR 0 5
5842: PUSH
5843: LD_VAR 0 1
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: ST_TO_ADDR
// if not i then
5854: LD_VAR 0 5
5858: NOT
5859: IFFALSE 5863
// exit ;
5861: GO 5929
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5863: LD_ADDR_VAR 0 1
5867: PUSH
5868: LD_VAR 0 1
5872: PPUSH
5873: LD_VAR 0 2
5877: PPUSH
5878: LD_VAR 0 1
5882: PUSH
5883: LD_VAR 0 3
5887: ARRAY
5888: PPUSH
5889: CALL_OW 1
5893: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5894: LD_ADDR_VAR 0 1
5898: PUSH
5899: LD_VAR 0 1
5903: PPUSH
5904: LD_VAR 0 3
5908: PPUSH
5909: LD_VAR 0 5
5913: PPUSH
5914: CALL_OW 1
5918: ST_TO_ADDR
// result := list ;
5919: LD_ADDR_VAR 0 4
5923: PUSH
5924: LD_VAR 0 1
5928: ST_TO_ADDR
// end ;
5929: LD_VAR 0 4
5933: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5934: LD_INT 0
5936: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5937: LD_ADDR_VAR 0 5
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 250
5951: PPUSH
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 251
5961: PPUSH
5962: LD_VAR 0 2
5966: PPUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: LD_VAR 0 4
5976: PPUSH
5977: CALL 5987 0 5
5981: ST_TO_ADDR
// end ;
5982: LD_VAR 0 5
5986: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5987: LD_INT 0
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
// if not list then
5993: LD_VAR 0 3
5997: NOT
5998: IFFALSE 6002
// exit ;
6000: GO 6390
// result := [ ] ;
6002: LD_ADDR_VAR 0 6
6006: PUSH
6007: EMPTY
6008: ST_TO_ADDR
// for i in list do
6009: LD_ADDR_VAR 0 7
6013: PUSH
6014: LD_VAR 0 3
6018: PUSH
6019: FOR_IN
6020: IFFALSE 6222
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6022: LD_ADDR_VAR 0 9
6026: PUSH
6027: LD_VAR 0 7
6031: PPUSH
6032: LD_VAR 0 1
6036: PPUSH
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 297
6046: ST_TO_ADDR
// if not result then
6047: LD_VAR 0 6
6051: NOT
6052: IFFALSE 6078
// result := [ [ i , tmp ] ] else
6054: LD_ADDR_VAR 0 6
6058: PUSH
6059: LD_VAR 0 7
6063: PUSH
6064: LD_VAR 0 9
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: EMPTY
6074: LIST
6075: ST_TO_ADDR
6076: GO 6220
// begin if result [ result ] [ 2 ] < tmp then
6078: LD_VAR 0 6
6082: PUSH
6083: LD_VAR 0 6
6087: ARRAY
6088: PUSH
6089: LD_INT 2
6091: ARRAY
6092: PUSH
6093: LD_VAR 0 9
6097: LESS
6098: IFFALSE 6140
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6100: LD_ADDR_VAR 0 6
6104: PUSH
6105: LD_VAR 0 6
6109: PPUSH
6110: LD_VAR 0 6
6114: PUSH
6115: LD_INT 1
6117: PLUS
6118: PPUSH
6119: LD_VAR 0 7
6123: PUSH
6124: LD_VAR 0 9
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 2
6137: ST_TO_ADDR
6138: GO 6220
// for j = 1 to result do
6140: LD_ADDR_VAR 0 8
6144: PUSH
6145: DOUBLE
6146: LD_INT 1
6148: DEC
6149: ST_TO_ADDR
6150: LD_VAR 0 6
6154: PUSH
6155: FOR_TO
6156: IFFALSE 6218
// begin if tmp < result [ j ] [ 2 ] then
6158: LD_VAR 0 9
6162: PUSH
6163: LD_VAR 0 6
6167: PUSH
6168: LD_VAR 0 8
6172: ARRAY
6173: PUSH
6174: LD_INT 2
6176: ARRAY
6177: LESS
6178: IFFALSE 6216
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6180: LD_ADDR_VAR 0 6
6184: PUSH
6185: LD_VAR 0 6
6189: PPUSH
6190: LD_VAR 0 8
6194: PPUSH
6195: LD_VAR 0 7
6199: PUSH
6200: LD_VAR 0 9
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PPUSH
6209: CALL_OW 2
6213: ST_TO_ADDR
// break ;
6214: GO 6218
// end ; end ;
6216: GO 6155
6218: POP
6219: POP
// end ; end ;
6220: GO 6019
6222: POP
6223: POP
// if result and not asc then
6224: LD_VAR 0 6
6228: PUSH
6229: LD_VAR 0 4
6233: NOT
6234: AND
6235: IFFALSE 6310
// begin tmp := result ;
6237: LD_ADDR_VAR 0 9
6241: PUSH
6242: LD_VAR 0 6
6246: ST_TO_ADDR
// for i = tmp downto 1 do
6247: LD_ADDR_VAR 0 7
6251: PUSH
6252: DOUBLE
6253: LD_VAR 0 9
6257: INC
6258: ST_TO_ADDR
6259: LD_INT 1
6261: PUSH
6262: FOR_DOWNTO
6263: IFFALSE 6308
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6265: LD_ADDR_VAR 0 6
6269: PUSH
6270: LD_VAR 0 6
6274: PPUSH
6275: LD_VAR 0 9
6279: PUSH
6280: LD_VAR 0 7
6284: MINUS
6285: PUSH
6286: LD_INT 1
6288: PLUS
6289: PPUSH
6290: LD_VAR 0 9
6294: PUSH
6295: LD_VAR 0 7
6299: ARRAY
6300: PPUSH
6301: CALL_OW 1
6305: ST_TO_ADDR
6306: GO 6262
6308: POP
6309: POP
// end ; tmp := [ ] ;
6310: LD_ADDR_VAR 0 9
6314: PUSH
6315: EMPTY
6316: ST_TO_ADDR
// if mode then
6317: LD_VAR 0 5
6321: IFFALSE 6390
// begin for i = 1 to result do
6323: LD_ADDR_VAR 0 7
6327: PUSH
6328: DOUBLE
6329: LD_INT 1
6331: DEC
6332: ST_TO_ADDR
6333: LD_VAR 0 6
6337: PUSH
6338: FOR_TO
6339: IFFALSE 6378
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6341: LD_ADDR_VAR 0 9
6345: PUSH
6346: LD_VAR 0 9
6350: PPUSH
6351: LD_VAR 0 7
6355: PPUSH
6356: LD_VAR 0 6
6360: PUSH
6361: LD_VAR 0 7
6365: ARRAY
6366: PUSH
6367: LD_INT 1
6369: ARRAY
6370: PPUSH
6371: CALL_OW 1
6375: ST_TO_ADDR
6376: GO 6338
6378: POP
6379: POP
// result := tmp ;
6380: LD_ADDR_VAR 0 6
6384: PUSH
6385: LD_VAR 0 9
6389: ST_TO_ADDR
// end ; end ;
6390: LD_VAR 0 6
6394: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6395: LD_INT 0
6397: PPUSH
6398: PPUSH
6399: PPUSH
6400: PPUSH
6401: PPUSH
6402: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6403: LD_ADDR_VAR 0 5
6407: PUSH
6408: LD_INT 0
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: LD_INT 0
6416: PUSH
6417: EMPTY
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: ST_TO_ADDR
// if not x or not y then
6425: LD_VAR 0 2
6429: NOT
6430: PUSH
6431: LD_VAR 0 3
6435: NOT
6436: OR
6437: IFFALSE 6441
// exit ;
6439: GO 8091
// if not range then
6441: LD_VAR 0 4
6445: NOT
6446: IFFALSE 6456
// range := 10 ;
6448: LD_ADDR_VAR 0 4
6452: PUSH
6453: LD_INT 10
6455: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6456: LD_ADDR_VAR 0 8
6460: PUSH
6461: LD_INT 81
6463: PUSH
6464: LD_VAR 0 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 92
6475: PUSH
6476: LD_VAR 0 2
6480: PUSH
6481: LD_VAR 0 3
6485: PUSH
6486: LD_VAR 0 4
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 21
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: PPUSH
6519: CALL_OW 69
6523: ST_TO_ADDR
// if not tmp then
6524: LD_VAR 0 8
6528: NOT
6529: IFFALSE 6533
// exit ;
6531: GO 8091
// for i in tmp do
6533: LD_ADDR_VAR 0 6
6537: PUSH
6538: LD_VAR 0 8
6542: PUSH
6543: FOR_IN
6544: IFFALSE 8066
// begin points := [ 0 , 0 , 0 ] ;
6546: LD_ADDR_VAR 0 9
6550: PUSH
6551: LD_INT 0
6553: PUSH
6554: LD_INT 0
6556: PUSH
6557: LD_INT 0
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: ST_TO_ADDR
// bpoints := 1 ;
6565: LD_ADDR_VAR 0 10
6569: PUSH
6570: LD_INT 1
6572: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6573: LD_VAR 0 6
6577: PPUSH
6578: CALL_OW 247
6582: PUSH
6583: LD_INT 1
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 7169
6591: POP
// begin if GetClass ( i ) = 1 then
6592: LD_VAR 0 6
6596: PPUSH
6597: CALL_OW 257
6601: PUSH
6602: LD_INT 1
6604: EQUAL
6605: IFFALSE 6626
// points := [ 10 , 5 , 3 ] ;
6607: LD_ADDR_VAR 0 9
6611: PUSH
6612: LD_INT 10
6614: PUSH
6615: LD_INT 5
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6626: LD_VAR 0 6
6630: PPUSH
6631: CALL_OW 257
6635: PUSH
6636: LD_INT 2
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: IN
6650: IFFALSE 6671
// points := [ 3 , 2 , 1 ] ;
6652: LD_ADDR_VAR 0 9
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 2
6662: PUSH
6663: LD_INT 1
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6671: LD_VAR 0 6
6675: PPUSH
6676: CALL_OW 257
6680: PUSH
6681: LD_INT 5
6683: EQUAL
6684: IFFALSE 6705
// points := [ 130 , 5 , 2 ] ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_INT 130
6693: PUSH
6694: LD_INT 5
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6705: LD_VAR 0 6
6709: PPUSH
6710: CALL_OW 257
6714: PUSH
6715: LD_INT 8
6717: EQUAL
6718: IFFALSE 6739
// points := [ 35 , 35 , 30 ] ;
6720: LD_ADDR_VAR 0 9
6724: PUSH
6725: LD_INT 35
6727: PUSH
6728: LD_INT 35
6730: PUSH
6731: LD_INT 30
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6739: LD_VAR 0 6
6743: PPUSH
6744: CALL_OW 257
6748: PUSH
6749: LD_INT 9
6751: EQUAL
6752: IFFALSE 6773
// points := [ 20 , 55 , 40 ] ;
6754: LD_ADDR_VAR 0 9
6758: PUSH
6759: LD_INT 20
6761: PUSH
6762: LD_INT 55
6764: PUSH
6765: LD_INT 40
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6773: LD_VAR 0 6
6777: PPUSH
6778: CALL_OW 257
6782: PUSH
6783: LD_INT 12
6785: PUSH
6786: LD_INT 16
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: IN
6793: IFFALSE 6814
// points := [ 5 , 3 , 2 ] ;
6795: LD_ADDR_VAR 0 9
6799: PUSH
6800: LD_INT 5
6802: PUSH
6803: LD_INT 3
6805: PUSH
6806: LD_INT 2
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 257
6823: PUSH
6824: LD_INT 17
6826: EQUAL
6827: IFFALSE 6848
// points := [ 100 , 50 , 75 ] ;
6829: LD_ADDR_VAR 0 9
6833: PUSH
6834: LD_INT 100
6836: PUSH
6837: LD_INT 50
6839: PUSH
6840: LD_INT 75
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: LIST
6847: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6848: LD_VAR 0 6
6852: PPUSH
6853: CALL_OW 257
6857: PUSH
6858: LD_INT 15
6860: EQUAL
6861: IFFALSE 6882
// points := [ 10 , 5 , 3 ] ;
6863: LD_ADDR_VAR 0 9
6867: PUSH
6868: LD_INT 10
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6882: LD_VAR 0 6
6886: PPUSH
6887: CALL_OW 257
6891: PUSH
6892: LD_INT 14
6894: EQUAL
6895: IFFALSE 6916
// points := [ 10 , 0 , 0 ] ;
6897: LD_ADDR_VAR 0 9
6901: PUSH
6902: LD_INT 10
6904: PUSH
6905: LD_INT 0
6907: PUSH
6908: LD_INT 0
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6916: LD_VAR 0 6
6920: PPUSH
6921: CALL_OW 257
6925: PUSH
6926: LD_INT 11
6928: EQUAL
6929: IFFALSE 6950
// points := [ 30 , 10 , 5 ] ;
6931: LD_ADDR_VAR 0 9
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 10
6941: PUSH
6942: LD_INT 5
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_INT 5
6957: PPUSH
6958: CALL_OW 321
6962: PUSH
6963: LD_INT 2
6965: EQUAL
6966: IFFALSE 6983
// bpoints := bpoints * 1.8 ;
6968: LD_ADDR_VAR 0 10
6972: PUSH
6973: LD_VAR 0 10
6977: PUSH
6978: LD_REAL  1.80000000000000E+0000
6981: MUL
6982: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6983: LD_VAR 0 6
6987: PPUSH
6988: CALL_OW 257
6992: PUSH
6993: LD_INT 1
6995: PUSH
6996: LD_INT 2
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: LD_INT 4
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: IN
7011: PUSH
7012: LD_VAR 0 1
7016: PPUSH
7017: LD_INT 51
7019: PPUSH
7020: CALL_OW 321
7024: PUSH
7025: LD_INT 2
7027: EQUAL
7028: AND
7029: IFFALSE 7046
// bpoints := bpoints * 1.2 ;
7031: LD_ADDR_VAR 0 10
7035: PUSH
7036: LD_VAR 0 10
7040: PUSH
7041: LD_REAL  1.20000000000000E+0000
7044: MUL
7045: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7046: LD_VAR 0 6
7050: PPUSH
7051: CALL_OW 257
7055: PUSH
7056: LD_INT 5
7058: PUSH
7059: LD_INT 7
7061: PUSH
7062: LD_INT 9
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: IN
7070: PUSH
7071: LD_VAR 0 1
7075: PPUSH
7076: LD_INT 52
7078: PPUSH
7079: CALL_OW 321
7083: PUSH
7084: LD_INT 2
7086: EQUAL
7087: AND
7088: IFFALSE 7105
// bpoints := bpoints * 1.5 ;
7090: LD_ADDR_VAR 0 10
7094: PUSH
7095: LD_VAR 0 10
7099: PUSH
7100: LD_REAL  1.50000000000000E+0000
7103: MUL
7104: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7105: LD_VAR 0 1
7109: PPUSH
7110: LD_INT 66
7112: PPUSH
7113: CALL_OW 321
7117: PUSH
7118: LD_INT 2
7120: EQUAL
7121: IFFALSE 7138
// bpoints := bpoints * 1.1 ;
7123: LD_ADDR_VAR 0 10
7127: PUSH
7128: LD_VAR 0 10
7132: PUSH
7133: LD_REAL  1.10000000000000E+0000
7136: MUL
7137: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7138: LD_ADDR_VAR 0 10
7142: PUSH
7143: LD_VAR 0 10
7147: PUSH
7148: LD_VAR 0 6
7152: PPUSH
7153: LD_INT 1
7155: PPUSH
7156: CALL_OW 259
7160: PUSH
7161: LD_REAL  1.15000000000000E+0000
7164: MUL
7165: MUL
7166: ST_TO_ADDR
// end ; unit_vehicle :
7167: GO 7995
7169: LD_INT 2
7171: DOUBLE
7172: EQUAL
7173: IFTRUE 7177
7175: GO 7983
7177: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7178: LD_VAR 0 6
7182: PPUSH
7183: CALL_OW 264
7187: PUSH
7188: LD_INT 2
7190: PUSH
7191: LD_INT 42
7193: PUSH
7194: LD_INT 24
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: IN
7202: IFFALSE 7223
// points := [ 25 , 5 , 3 ] ;
7204: LD_ADDR_VAR 0 9
7208: PUSH
7209: LD_INT 25
7211: PUSH
7212: LD_INT 5
7214: PUSH
7215: LD_INT 3
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7223: LD_VAR 0 6
7227: PPUSH
7228: CALL_OW 264
7232: PUSH
7233: LD_INT 4
7235: PUSH
7236: LD_INT 43
7238: PUSH
7239: LD_INT 25
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: IN
7247: IFFALSE 7268
// points := [ 40 , 15 , 5 ] ;
7249: LD_ADDR_VAR 0 9
7253: PUSH
7254: LD_INT 40
7256: PUSH
7257: LD_INT 15
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7268: LD_VAR 0 6
7272: PPUSH
7273: CALL_OW 264
7277: PUSH
7278: LD_INT 3
7280: PUSH
7281: LD_INT 23
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: IN
7288: IFFALSE 7309
// points := [ 7 , 25 , 8 ] ;
7290: LD_ADDR_VAR 0 9
7294: PUSH
7295: LD_INT 7
7297: PUSH
7298: LD_INT 25
7300: PUSH
7301: LD_INT 8
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7309: LD_VAR 0 6
7313: PPUSH
7314: CALL_OW 264
7318: PUSH
7319: LD_INT 5
7321: PUSH
7322: LD_INT 27
7324: PUSH
7325: LD_INT 44
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: IN
7333: IFFALSE 7354
// points := [ 14 , 50 , 16 ] ;
7335: LD_ADDR_VAR 0 9
7339: PUSH
7340: LD_INT 14
7342: PUSH
7343: LD_INT 50
7345: PUSH
7346: LD_INT 16
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7354: LD_VAR 0 6
7358: PPUSH
7359: CALL_OW 264
7363: PUSH
7364: LD_INT 6
7366: PUSH
7367: LD_INT 46
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: IN
7374: IFFALSE 7395
// points := [ 32 , 120 , 70 ] ;
7376: LD_ADDR_VAR 0 9
7380: PUSH
7381: LD_INT 32
7383: PUSH
7384: LD_INT 120
7386: PUSH
7387: LD_INT 70
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7395: LD_VAR 0 6
7399: PPUSH
7400: CALL_OW 264
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: LD_INT 28
7410: PUSH
7411: LD_INT 45
7413: PUSH
7414: LD_INT 92
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: IN
7423: IFFALSE 7444
// points := [ 35 , 20 , 45 ] ;
7425: LD_ADDR_VAR 0 9
7429: PUSH
7430: LD_INT 35
7432: PUSH
7433: LD_INT 20
7435: PUSH
7436: LD_INT 45
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7444: LD_VAR 0 6
7448: PPUSH
7449: CALL_OW 264
7453: PUSH
7454: LD_INT 47
7456: PUSH
7457: EMPTY
7458: LIST
7459: IN
7460: IFFALSE 7481
// points := [ 67 , 45 , 75 ] ;
7462: LD_ADDR_VAR 0 9
7466: PUSH
7467: LD_INT 67
7469: PUSH
7470: LD_INT 45
7472: PUSH
7473: LD_INT 75
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7481: LD_VAR 0 6
7485: PPUSH
7486: CALL_OW 264
7490: PUSH
7491: LD_INT 26
7493: PUSH
7494: EMPTY
7495: LIST
7496: IN
7497: IFFALSE 7518
// points := [ 120 , 30 , 80 ] ;
7499: LD_ADDR_VAR 0 9
7503: PUSH
7504: LD_INT 120
7506: PUSH
7507: LD_INT 30
7509: PUSH
7510: LD_INT 80
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7518: LD_VAR 0 6
7522: PPUSH
7523: CALL_OW 264
7527: PUSH
7528: LD_INT 22
7530: PUSH
7531: EMPTY
7532: LIST
7533: IN
7534: IFFALSE 7555
// points := [ 40 , 1 , 1 ] ;
7536: LD_ADDR_VAR 0 9
7540: PUSH
7541: LD_INT 40
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7555: LD_VAR 0 6
7559: PPUSH
7560: CALL_OW 264
7564: PUSH
7565: LD_INT 29
7567: PUSH
7568: EMPTY
7569: LIST
7570: IN
7571: IFFALSE 7592
// points := [ 70 , 200 , 400 ] ;
7573: LD_ADDR_VAR 0 9
7577: PUSH
7578: LD_INT 70
7580: PUSH
7581: LD_INT 200
7583: PUSH
7584: LD_INT 400
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7592: LD_VAR 0 6
7596: PPUSH
7597: CALL_OW 264
7601: PUSH
7602: LD_INT 14
7604: PUSH
7605: LD_INT 53
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: IN
7612: IFFALSE 7633
// points := [ 40 , 10 , 20 ] ;
7614: LD_ADDR_VAR 0 9
7618: PUSH
7619: LD_INT 40
7621: PUSH
7622: LD_INT 10
7624: PUSH
7625: LD_INT 20
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 264
7642: PUSH
7643: LD_INT 9
7645: PUSH
7646: EMPTY
7647: LIST
7648: IN
7649: IFFALSE 7670
// points := [ 5 , 70 , 20 ] ;
7651: LD_ADDR_VAR 0 9
7655: PUSH
7656: LD_INT 5
7658: PUSH
7659: LD_INT 70
7661: PUSH
7662: LD_INT 20
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: LIST
7669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7670: LD_VAR 0 6
7674: PPUSH
7675: CALL_OW 264
7679: PUSH
7680: LD_INT 10
7682: PUSH
7683: EMPTY
7684: LIST
7685: IN
7686: IFFALSE 7707
// points := [ 35 , 110 , 70 ] ;
7688: LD_ADDR_VAR 0 9
7692: PUSH
7693: LD_INT 35
7695: PUSH
7696: LD_INT 110
7698: PUSH
7699: LD_INT 70
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7707: LD_VAR 0 6
7711: PPUSH
7712: CALL_OW 265
7716: PUSH
7717: LD_INT 25
7719: EQUAL
7720: IFFALSE 7741
// points := [ 80 , 65 , 100 ] ;
7722: LD_ADDR_VAR 0 9
7726: PUSH
7727: LD_INT 80
7729: PUSH
7730: LD_INT 65
7732: PUSH
7733: LD_INT 100
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7741: LD_VAR 0 6
7745: PPUSH
7746: CALL_OW 263
7750: PUSH
7751: LD_INT 1
7753: EQUAL
7754: IFFALSE 7789
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7756: LD_ADDR_VAR 0 10
7760: PUSH
7761: LD_VAR 0 10
7765: PUSH
7766: LD_VAR 0 6
7770: PPUSH
7771: CALL_OW 311
7775: PPUSH
7776: LD_INT 3
7778: PPUSH
7779: CALL_OW 259
7783: PUSH
7784: LD_INT 4
7786: MUL
7787: MUL
7788: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7789: LD_VAR 0 6
7793: PPUSH
7794: CALL_OW 263
7798: PUSH
7799: LD_INT 2
7801: EQUAL
7802: IFFALSE 7853
// begin j := IsControledBy ( i ) ;
7804: LD_ADDR_VAR 0 7
7808: PUSH
7809: LD_VAR 0 6
7813: PPUSH
7814: CALL_OW 312
7818: ST_TO_ADDR
// if j then
7819: LD_VAR 0 7
7823: IFFALSE 7853
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7825: LD_ADDR_VAR 0 10
7829: PUSH
7830: LD_VAR 0 10
7834: PUSH
7835: LD_VAR 0 7
7839: PPUSH
7840: LD_INT 3
7842: PPUSH
7843: CALL_OW 259
7847: PUSH
7848: LD_INT 3
7850: MUL
7851: MUL
7852: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7853: LD_VAR 0 6
7857: PPUSH
7858: CALL_OW 264
7862: PUSH
7863: LD_INT 5
7865: PUSH
7866: LD_INT 6
7868: PUSH
7869: LD_INT 46
7871: PUSH
7872: LD_INT 44
7874: PUSH
7875: LD_INT 47
7877: PUSH
7878: LD_INT 45
7880: PUSH
7881: LD_INT 28
7883: PUSH
7884: LD_INT 7
7886: PUSH
7887: LD_INT 27
7889: PUSH
7890: LD_INT 29
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: IN
7905: PUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: LD_INT 52
7913: PPUSH
7914: CALL_OW 321
7918: PUSH
7919: LD_INT 2
7921: EQUAL
7922: AND
7923: IFFALSE 7940
// bpoints := bpoints * 1.2 ;
7925: LD_ADDR_VAR 0 10
7929: PUSH
7930: LD_VAR 0 10
7934: PUSH
7935: LD_REAL  1.20000000000000E+0000
7938: MUL
7939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7940: LD_VAR 0 6
7944: PPUSH
7945: CALL_OW 264
7949: PUSH
7950: LD_INT 6
7952: PUSH
7953: LD_INT 46
7955: PUSH
7956: LD_INT 47
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: IN
7964: IFFALSE 7981
// bpoints := bpoints * 1.2 ;
7966: LD_ADDR_VAR 0 10
7970: PUSH
7971: LD_VAR 0 10
7975: PUSH
7976: LD_REAL  1.20000000000000E+0000
7979: MUL
7980: ST_TO_ADDR
// end ; unit_building :
7981: GO 7995
7983: LD_INT 3
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 7994
7991: POP
// ; end ;
7992: GO 7995
7994: POP
// for j = 1 to 3 do
7995: LD_ADDR_VAR 0 7
7999: PUSH
8000: DOUBLE
8001: LD_INT 1
8003: DEC
8004: ST_TO_ADDR
8005: LD_INT 3
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8062
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8011: LD_ADDR_VAR 0 5
8015: PUSH
8016: LD_VAR 0 5
8020: PPUSH
8021: LD_VAR 0 7
8025: PPUSH
8026: LD_VAR 0 5
8030: PUSH
8031: LD_VAR 0 7
8035: ARRAY
8036: PUSH
8037: LD_VAR 0 9
8041: PUSH
8042: LD_VAR 0 7
8046: ARRAY
8047: PUSH
8048: LD_VAR 0 10
8052: MUL
8053: PLUS
8054: PPUSH
8055: CALL_OW 1
8059: ST_TO_ADDR
8060: GO 8008
8062: POP
8063: POP
// end ;
8064: GO 6543
8066: POP
8067: POP
// result := Replace ( result , 4 , tmp ) ;
8068: LD_ADDR_VAR 0 5
8072: PUSH
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 4
8080: PPUSH
8081: LD_VAR 0 8
8085: PPUSH
8086: CALL_OW 1
8090: ST_TO_ADDR
// end ;
8091: LD_VAR 0 5
8095: RET
// export function DangerAtRange ( unit , range ) ; begin
8096: LD_INT 0
8098: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8099: LD_ADDR_VAR 0 3
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 255
8113: PPUSH
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 250
8123: PPUSH
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 251
8133: PPUSH
8134: LD_VAR 0 2
8138: PPUSH
8139: CALL 6395 0 4
8143: ST_TO_ADDR
// end ;
8144: LD_VAR 0 3
8148: RET
// export function DangerInArea ( side , area ) ; begin
8149: LD_INT 0
8151: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8152: LD_ADDR_VAR 0 3
8156: PUSH
8157: LD_VAR 0 2
8161: PPUSH
8162: LD_INT 81
8164: PUSH
8165: LD_VAR 0 1
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PPUSH
8174: CALL_OW 70
8178: ST_TO_ADDR
// end ;
8179: LD_VAR 0 3
8183: RET
// export function IsExtension ( b ) ; begin
8184: LD_INT 0
8186: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8187: LD_ADDR_VAR 0 2
8191: PUSH
8192: LD_VAR 0 1
8196: PUSH
8197: LD_INT 23
8199: PUSH
8200: LD_INT 20
8202: PUSH
8203: LD_INT 22
8205: PUSH
8206: LD_INT 17
8208: PUSH
8209: LD_INT 24
8211: PUSH
8212: LD_INT 21
8214: PUSH
8215: LD_INT 19
8217: PUSH
8218: LD_INT 16
8220: PUSH
8221: LD_INT 25
8223: PUSH
8224: LD_INT 18
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: IN
8239: ST_TO_ADDR
// end ;
8240: LD_VAR 0 2
8244: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8245: LD_INT 0
8247: PPUSH
8248: PPUSH
8249: PPUSH
// result := [ ] ;
8250: LD_ADDR_VAR 0 4
8254: PUSH
8255: EMPTY
8256: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8257: LD_ADDR_VAR 0 5
8261: PUSH
8262: LD_VAR 0 2
8266: PPUSH
8267: LD_INT 21
8269: PUSH
8270: LD_INT 3
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PPUSH
8277: CALL_OW 70
8281: ST_TO_ADDR
// if not tmp then
8282: LD_VAR 0 5
8286: NOT
8287: IFFALSE 8291
// exit ;
8289: GO 8355
// if checkLink then
8291: LD_VAR 0 3
8295: IFFALSE 8345
// begin for i in tmp do
8297: LD_ADDR_VAR 0 6
8301: PUSH
8302: LD_VAR 0 5
8306: PUSH
8307: FOR_IN
8308: IFFALSE 8343
// if GetBase ( i ) <> base then
8310: LD_VAR 0 6
8314: PPUSH
8315: CALL_OW 274
8319: PUSH
8320: LD_VAR 0 1
8324: NONEQUAL
8325: IFFALSE 8341
// ComLinkToBase ( base , i ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: LD_VAR 0 6
8336: PPUSH
8337: CALL_OW 169
8341: GO 8307
8343: POP
8344: POP
// end ; result := tmp ;
8345: LD_ADDR_VAR 0 4
8349: PUSH
8350: LD_VAR 0 5
8354: ST_TO_ADDR
// end ;
8355: LD_VAR 0 4
8359: RET
// export function ComComplete ( units , b ) ; var i ; begin
8360: LD_INT 0
8362: PPUSH
8363: PPUSH
// if not units then
8364: LD_VAR 0 1
8368: NOT
8369: IFFALSE 8373
// exit ;
8371: GO 8463
// for i in units do
8373: LD_ADDR_VAR 0 4
8377: PUSH
8378: LD_VAR 0 1
8382: PUSH
8383: FOR_IN
8384: IFFALSE 8461
// if BuildingStatus ( b ) = bs_build then
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 461
8395: PUSH
8396: LD_INT 1
8398: EQUAL
8399: IFFALSE 8459
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8401: LD_VAR 0 4
8405: PPUSH
8406: LD_STRING h
8408: PUSH
8409: LD_VAR 0 2
8413: PPUSH
8414: CALL_OW 250
8418: PUSH
8419: LD_VAR 0 2
8423: PPUSH
8424: CALL_OW 251
8428: PUSH
8429: LD_VAR 0 2
8433: PUSH
8434: LD_INT 0
8436: PUSH
8437: LD_INT 0
8439: PUSH
8440: LD_INT 0
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: PUSH
8452: EMPTY
8453: LIST
8454: PPUSH
8455: CALL_OW 446
8459: GO 8383
8461: POP
8462: POP
// end ;
8463: LD_VAR 0 3
8467: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8468: LD_INT 0
8470: PPUSH
8471: PPUSH
8472: PPUSH
8473: PPUSH
8474: PPUSH
8475: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8476: LD_VAR 0 1
8480: NOT
8481: PUSH
8482: LD_VAR 0 1
8486: PPUSH
8487: CALL_OW 263
8491: PUSH
8492: LD_INT 2
8494: NONEQUAL
8495: OR
8496: IFFALSE 8500
// exit ;
8498: GO 8816
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8500: LD_ADDR_VAR 0 6
8504: PUSH
8505: LD_INT 22
8507: PUSH
8508: LD_VAR 0 1
8512: PPUSH
8513: CALL_OW 255
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: LD_INT 2
8524: PUSH
8525: LD_INT 30
8527: PUSH
8528: LD_INT 36
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: LD_INT 34
8537: PUSH
8538: LD_INT 31
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PPUSH
8554: CALL_OW 69
8558: ST_TO_ADDR
// if not tmp then
8559: LD_VAR 0 6
8563: NOT
8564: IFFALSE 8568
// exit ;
8566: GO 8816
// result := [ ] ;
8568: LD_ADDR_VAR 0 2
8572: PUSH
8573: EMPTY
8574: ST_TO_ADDR
// for i in tmp do
8575: LD_ADDR_VAR 0 3
8579: PUSH
8580: LD_VAR 0 6
8584: PUSH
8585: FOR_IN
8586: IFFALSE 8657
// begin t := UnitsInside ( i ) ;
8588: LD_ADDR_VAR 0 4
8592: PUSH
8593: LD_VAR 0 3
8597: PPUSH
8598: CALL_OW 313
8602: ST_TO_ADDR
// if t then
8603: LD_VAR 0 4
8607: IFFALSE 8655
// for j in t do
8609: LD_ADDR_VAR 0 7
8613: PUSH
8614: LD_VAR 0 4
8618: PUSH
8619: FOR_IN
8620: IFFALSE 8653
// result := Replace ( result , result + 1 , j ) ;
8622: LD_ADDR_VAR 0 2
8626: PUSH
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_VAR 0 2
8636: PUSH
8637: LD_INT 1
8639: PLUS
8640: PPUSH
8641: LD_VAR 0 7
8645: PPUSH
8646: CALL_OW 1
8650: ST_TO_ADDR
8651: GO 8619
8653: POP
8654: POP
// end ;
8655: GO 8585
8657: POP
8658: POP
// if not result then
8659: LD_VAR 0 2
8663: NOT
8664: IFFALSE 8668
// exit ;
8666: GO 8816
// mech := result [ 1 ] ;
8668: LD_ADDR_VAR 0 5
8672: PUSH
8673: LD_VAR 0 2
8677: PUSH
8678: LD_INT 1
8680: ARRAY
8681: ST_TO_ADDR
// if result > 1 then
8682: LD_VAR 0 2
8686: PUSH
8687: LD_INT 1
8689: GREATER
8690: IFFALSE 8802
// begin for i = 2 to result do
8692: LD_ADDR_VAR 0 3
8696: PUSH
8697: DOUBLE
8698: LD_INT 2
8700: DEC
8701: ST_TO_ADDR
8702: LD_VAR 0 2
8706: PUSH
8707: FOR_TO
8708: IFFALSE 8800
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8710: LD_ADDR_VAR 0 4
8714: PUSH
8715: LD_VAR 0 2
8719: PUSH
8720: LD_VAR 0 3
8724: ARRAY
8725: PPUSH
8726: LD_INT 3
8728: PPUSH
8729: CALL_OW 259
8733: PUSH
8734: LD_VAR 0 2
8738: PUSH
8739: LD_VAR 0 3
8743: ARRAY
8744: PPUSH
8745: CALL_OW 432
8749: MINUS
8750: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8751: LD_VAR 0 4
8755: PUSH
8756: LD_VAR 0 5
8760: PPUSH
8761: LD_INT 3
8763: PPUSH
8764: CALL_OW 259
8768: PUSH
8769: LD_VAR 0 5
8773: PPUSH
8774: CALL_OW 432
8778: MINUS
8779: GREATEREQUAL
8780: IFFALSE 8798
// mech := result [ i ] ;
8782: LD_ADDR_VAR 0 5
8786: PUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 3
8796: ARRAY
8797: ST_TO_ADDR
// end ;
8798: GO 8707
8800: POP
8801: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8802: LD_VAR 0 1
8806: PPUSH
8807: LD_VAR 0 5
8811: PPUSH
8812: CALL_OW 135
// end ;
8816: LD_VAR 0 2
8820: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8821: LD_INT 0
8823: PPUSH
8824: PPUSH
8825: PPUSH
8826: PPUSH
8827: PPUSH
8828: PPUSH
8829: PPUSH
8830: PPUSH
8831: PPUSH
8832: PPUSH
8833: PPUSH
8834: PPUSH
8835: PPUSH
// result := [ ] ;
8836: LD_ADDR_VAR 0 7
8840: PUSH
8841: EMPTY
8842: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8843: LD_VAR 0 1
8847: PPUSH
8848: CALL_OW 266
8852: PUSH
8853: LD_INT 0
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: IN
8863: NOT
8864: IFFALSE 8868
// exit ;
8866: GO 10502
// if name then
8868: LD_VAR 0 3
8872: IFFALSE 8888
// SetBName ( base_dep , name ) ;
8874: LD_VAR 0 1
8878: PPUSH
8879: LD_VAR 0 3
8883: PPUSH
8884: CALL_OW 500
// base := GetBase ( base_dep ) ;
8888: LD_ADDR_VAR 0 15
8892: PUSH
8893: LD_VAR 0 1
8897: PPUSH
8898: CALL_OW 274
8902: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8903: LD_ADDR_VAR 0 16
8907: PUSH
8908: LD_VAR 0 1
8912: PPUSH
8913: CALL_OW 255
8917: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8918: LD_ADDR_VAR 0 17
8922: PUSH
8923: LD_VAR 0 1
8927: PPUSH
8928: CALL_OW 248
8932: ST_TO_ADDR
// if sources then
8933: LD_VAR 0 5
8937: IFFALSE 8984
// for i = 1 to 3 do
8939: LD_ADDR_VAR 0 8
8943: PUSH
8944: DOUBLE
8945: LD_INT 1
8947: DEC
8948: ST_TO_ADDR
8949: LD_INT 3
8951: PUSH
8952: FOR_TO
8953: IFFALSE 8982
// AddResourceType ( base , i , sources [ i ] ) ;
8955: LD_VAR 0 15
8959: PPUSH
8960: LD_VAR 0 8
8964: PPUSH
8965: LD_VAR 0 5
8969: PUSH
8970: LD_VAR 0 8
8974: ARRAY
8975: PPUSH
8976: CALL_OW 276
8980: GO 8952
8982: POP
8983: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8984: LD_ADDR_VAR 0 18
8988: PUSH
8989: LD_VAR 0 15
8993: PPUSH
8994: LD_VAR 0 2
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: CALL 8245 0 3
9006: ST_TO_ADDR
// InitHc ;
9007: CALL_OW 19
// InitUc ;
9011: CALL_OW 18
// uc_side := side ;
9015: LD_ADDR_OWVAR 20
9019: PUSH
9020: LD_VAR 0 16
9024: ST_TO_ADDR
// uc_nation := nation ;
9025: LD_ADDR_OWVAR 21
9029: PUSH
9030: LD_VAR 0 17
9034: ST_TO_ADDR
// if buildings then
9035: LD_VAR 0 18
9039: IFFALSE 10361
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9041: LD_ADDR_VAR 0 19
9045: PUSH
9046: LD_VAR 0 18
9050: PPUSH
9051: LD_INT 2
9053: PUSH
9054: LD_INT 30
9056: PUSH
9057: LD_INT 29
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_INT 30
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: LIST
9078: PPUSH
9079: CALL_OW 72
9083: ST_TO_ADDR
// if tmp then
9084: LD_VAR 0 19
9088: IFFALSE 9136
// for i in tmp do
9090: LD_ADDR_VAR 0 8
9094: PUSH
9095: LD_VAR 0 19
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9134
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9103: LD_VAR 0 8
9107: PPUSH
9108: CALL_OW 250
9112: PPUSH
9113: LD_VAR 0 8
9117: PPUSH
9118: CALL_OW 251
9122: PPUSH
9123: LD_VAR 0 16
9127: PPUSH
9128: CALL_OW 441
9132: GO 9100
9134: POP
9135: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9136: LD_VAR 0 18
9140: PPUSH
9141: LD_INT 2
9143: PUSH
9144: LD_INT 30
9146: PUSH
9147: LD_INT 32
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 30
9156: PUSH
9157: LD_INT 33
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: PPUSH
9169: CALL_OW 72
9173: IFFALSE 9261
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9175: LD_ADDR_VAR 0 8
9179: PUSH
9180: LD_VAR 0 18
9184: PPUSH
9185: LD_INT 2
9187: PUSH
9188: LD_INT 30
9190: PUSH
9191: LD_INT 32
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 30
9200: PUSH
9201: LD_INT 33
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 72
9217: PUSH
9218: FOR_IN
9219: IFFALSE 9259
// begin if not GetBWeapon ( i ) then
9221: LD_VAR 0 8
9225: PPUSH
9226: CALL_OW 269
9230: NOT
9231: IFFALSE 9257
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9233: LD_VAR 0 8
9237: PPUSH
9238: LD_VAR 0 8
9242: PPUSH
9243: LD_VAR 0 2
9247: PPUSH
9248: CALL 10507 0 2
9252: PPUSH
9253: CALL_OW 431
// end ;
9257: GO 9218
9259: POP
9260: POP
// end ; for i = 1 to personel do
9261: LD_ADDR_VAR 0 8
9265: PUSH
9266: DOUBLE
9267: LD_INT 1
9269: DEC
9270: ST_TO_ADDR
9271: LD_VAR 0 6
9275: PUSH
9276: FOR_TO
9277: IFFALSE 10341
// begin if i > 4 then
9279: LD_VAR 0 8
9283: PUSH
9284: LD_INT 4
9286: GREATER
9287: IFFALSE 9291
// break ;
9289: GO 10341
// case i of 1 :
9291: LD_VAR 0 8
9295: PUSH
9296: LD_INT 1
9298: DOUBLE
9299: EQUAL
9300: IFTRUE 9304
9302: GO 9384
9304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9305: LD_ADDR_VAR 0 12
9309: PUSH
9310: LD_VAR 0 18
9314: PPUSH
9315: LD_INT 22
9317: PUSH
9318: LD_VAR 0 16
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: LD_INT 58
9329: PUSH
9330: EMPTY
9331: LIST
9332: PUSH
9333: LD_INT 2
9335: PUSH
9336: LD_INT 30
9338: PUSH
9339: LD_INT 32
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 30
9348: PUSH
9349: LD_INT 4
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 30
9358: PUSH
9359: LD_INT 5
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 72
9381: ST_TO_ADDR
9382: GO 9606
9384: LD_INT 2
9386: DOUBLE
9387: EQUAL
9388: IFTRUE 9392
9390: GO 9454
9392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9393: LD_ADDR_VAR 0 12
9397: PUSH
9398: LD_VAR 0 18
9402: PPUSH
9403: LD_INT 22
9405: PUSH
9406: LD_VAR 0 16
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 2
9417: PUSH
9418: LD_INT 30
9420: PUSH
9421: LD_INT 0
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 30
9430: PUSH
9431: LD_INT 1
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PPUSH
9447: CALL_OW 72
9451: ST_TO_ADDR
9452: GO 9606
9454: LD_INT 3
9456: DOUBLE
9457: EQUAL
9458: IFTRUE 9462
9460: GO 9524
9462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9463: LD_ADDR_VAR 0 12
9467: PUSH
9468: LD_VAR 0 18
9472: PPUSH
9473: LD_INT 22
9475: PUSH
9476: LD_VAR 0 16
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 2
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: LD_INT 2
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 30
9500: PUSH
9501: LD_INT 3
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: LIST
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 72
9521: ST_TO_ADDR
9522: GO 9606
9524: LD_INT 4
9526: DOUBLE
9527: EQUAL
9528: IFTRUE 9532
9530: GO 9605
9532: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9533: LD_ADDR_VAR 0 12
9537: PUSH
9538: LD_VAR 0 18
9542: PPUSH
9543: LD_INT 22
9545: PUSH
9546: LD_VAR 0 16
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 2
9557: PUSH
9558: LD_INT 30
9560: PUSH
9561: LD_INT 6
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: LD_INT 30
9570: PUSH
9571: LD_INT 7
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 30
9580: PUSH
9581: LD_INT 8
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PPUSH
9598: CALL_OW 72
9602: ST_TO_ADDR
9603: GO 9606
9605: POP
// if i = 1 then
9606: LD_VAR 0 8
9610: PUSH
9611: LD_INT 1
9613: EQUAL
9614: IFFALSE 9725
// begin tmp := [ ] ;
9616: LD_ADDR_VAR 0 19
9620: PUSH
9621: EMPTY
9622: ST_TO_ADDR
// for j in f do
9623: LD_ADDR_VAR 0 9
9627: PUSH
9628: LD_VAR 0 12
9632: PUSH
9633: FOR_IN
9634: IFFALSE 9707
// if GetBType ( j ) = b_bunker then
9636: LD_VAR 0 9
9640: PPUSH
9641: CALL_OW 266
9645: PUSH
9646: LD_INT 32
9648: EQUAL
9649: IFFALSE 9676
// tmp := Insert ( tmp , 1 , j ) else
9651: LD_ADDR_VAR 0 19
9655: PUSH
9656: LD_VAR 0 19
9660: PPUSH
9661: LD_INT 1
9663: PPUSH
9664: LD_VAR 0 9
9668: PPUSH
9669: CALL_OW 2
9673: ST_TO_ADDR
9674: GO 9705
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9676: LD_ADDR_VAR 0 19
9680: PUSH
9681: LD_VAR 0 19
9685: PPUSH
9686: LD_VAR 0 19
9690: PUSH
9691: LD_INT 1
9693: PLUS
9694: PPUSH
9695: LD_VAR 0 9
9699: PPUSH
9700: CALL_OW 2
9704: ST_TO_ADDR
9705: GO 9633
9707: POP
9708: POP
// if tmp then
9709: LD_VAR 0 19
9713: IFFALSE 9725
// f := tmp ;
9715: LD_ADDR_VAR 0 12
9719: PUSH
9720: LD_VAR 0 19
9724: ST_TO_ADDR
// end ; x := personel [ i ] ;
9725: LD_ADDR_VAR 0 13
9729: PUSH
9730: LD_VAR 0 6
9734: PUSH
9735: LD_VAR 0 8
9739: ARRAY
9740: ST_TO_ADDR
// if x = - 1 then
9741: LD_VAR 0 13
9745: PUSH
9746: LD_INT 1
9748: NEG
9749: EQUAL
9750: IFFALSE 9959
// begin for j in f do
9752: LD_ADDR_VAR 0 9
9756: PUSH
9757: LD_VAR 0 12
9761: PUSH
9762: FOR_IN
9763: IFFALSE 9955
// repeat InitHc ;
9765: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9769: LD_VAR 0 9
9773: PPUSH
9774: CALL_OW 266
9778: PUSH
9779: LD_INT 5
9781: EQUAL
9782: IFFALSE 9852
// begin if UnitsInside ( j ) < 3 then
9784: LD_VAR 0 9
9788: PPUSH
9789: CALL_OW 313
9793: PUSH
9794: LD_INT 3
9796: LESS
9797: IFFALSE 9833
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9799: LD_INT 0
9801: PPUSH
9802: LD_INT 5
9804: PUSH
9805: LD_INT 8
9807: PUSH
9808: LD_INT 9
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: PUSH
9816: LD_VAR 0 17
9820: ARRAY
9821: PPUSH
9822: LD_VAR 0 4
9826: PPUSH
9827: CALL_OW 380
9831: GO 9850
// PrepareHuman ( false , i , skill ) ;
9833: LD_INT 0
9835: PPUSH
9836: LD_VAR 0 8
9840: PPUSH
9841: LD_VAR 0 4
9845: PPUSH
9846: CALL_OW 380
// end else
9850: GO 9869
// PrepareHuman ( false , i , skill ) ;
9852: LD_INT 0
9854: PPUSH
9855: LD_VAR 0 8
9859: PPUSH
9860: LD_VAR 0 4
9864: PPUSH
9865: CALL_OW 380
// un := CreateHuman ;
9869: LD_ADDR_VAR 0 14
9873: PUSH
9874: CALL_OW 44
9878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9879: LD_ADDR_VAR 0 7
9883: PUSH
9884: LD_VAR 0 7
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: LD_VAR 0 14
9896: PPUSH
9897: CALL_OW 2
9901: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9902: LD_VAR 0 14
9906: PPUSH
9907: LD_VAR 0 9
9911: PPUSH
9912: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9916: LD_VAR 0 9
9920: PPUSH
9921: CALL_OW 313
9925: PUSH
9926: LD_INT 6
9928: EQUAL
9929: PUSH
9930: LD_VAR 0 9
9934: PPUSH
9935: CALL_OW 266
9939: PUSH
9940: LD_INT 32
9942: PUSH
9943: LD_INT 31
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: IN
9950: OR
9951: IFFALSE 9765
9953: GO 9762
9955: POP
9956: POP
// end else
9957: GO 10339
// for j = 1 to x do
9959: LD_ADDR_VAR 0 9
9963: PUSH
9964: DOUBLE
9965: LD_INT 1
9967: DEC
9968: ST_TO_ADDR
9969: LD_VAR 0 13
9973: PUSH
9974: FOR_TO
9975: IFFALSE 10337
// begin InitHc ;
9977: CALL_OW 19
// if not f then
9981: LD_VAR 0 12
9985: NOT
9986: IFFALSE 10075
// begin PrepareHuman ( false , i , skill ) ;
9988: LD_INT 0
9990: PPUSH
9991: LD_VAR 0 8
9995: PPUSH
9996: LD_VAR 0 4
10000: PPUSH
10001: CALL_OW 380
// un := CreateHuman ;
10005: LD_ADDR_VAR 0 14
10009: PUSH
10010: CALL_OW 44
10014: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10015: LD_ADDR_VAR 0 7
10019: PUSH
10020: LD_VAR 0 7
10024: PPUSH
10025: LD_INT 1
10027: PPUSH
10028: LD_VAR 0 14
10032: PPUSH
10033: CALL_OW 2
10037: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10038: LD_VAR 0 14
10042: PPUSH
10043: LD_VAR 0 1
10047: PPUSH
10048: CALL_OW 250
10052: PPUSH
10053: LD_VAR 0 1
10057: PPUSH
10058: CALL_OW 251
10062: PPUSH
10063: LD_INT 10
10065: PPUSH
10066: LD_INT 0
10068: PPUSH
10069: CALL_OW 50
// continue ;
10073: GO 9974
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10075: LD_VAR 0 12
10079: PUSH
10080: LD_INT 1
10082: ARRAY
10083: PPUSH
10084: CALL_OW 313
10088: PUSH
10089: LD_VAR 0 12
10093: PUSH
10094: LD_INT 1
10096: ARRAY
10097: PPUSH
10098: CALL_OW 266
10102: PUSH
10103: LD_INT 32
10105: PUSH
10106: LD_INT 31
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: IN
10113: AND
10114: PUSH
10115: LD_VAR 0 12
10119: PUSH
10120: LD_INT 1
10122: ARRAY
10123: PPUSH
10124: CALL_OW 313
10128: PUSH
10129: LD_INT 6
10131: EQUAL
10132: OR
10133: IFFALSE 10153
// f := Delete ( f , 1 ) ;
10135: LD_ADDR_VAR 0 12
10139: PUSH
10140: LD_VAR 0 12
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 3
10152: ST_TO_ADDR
// if not f then
10153: LD_VAR 0 12
10157: NOT
10158: IFFALSE 10176
// begin x := x + 2 ;
10160: LD_ADDR_VAR 0 13
10164: PUSH
10165: LD_VAR 0 13
10169: PUSH
10170: LD_INT 2
10172: PLUS
10173: ST_TO_ADDR
// continue ;
10174: GO 9974
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10176: LD_VAR 0 12
10180: PUSH
10181: LD_INT 1
10183: ARRAY
10184: PPUSH
10185: CALL_OW 266
10189: PUSH
10190: LD_INT 5
10192: EQUAL
10193: IFFALSE 10267
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10195: LD_VAR 0 12
10199: PUSH
10200: LD_INT 1
10202: ARRAY
10203: PPUSH
10204: CALL_OW 313
10208: PUSH
10209: LD_INT 3
10211: LESS
10212: IFFALSE 10248
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10214: LD_INT 0
10216: PPUSH
10217: LD_INT 5
10219: PUSH
10220: LD_INT 8
10222: PUSH
10223: LD_INT 9
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: PUSH
10231: LD_VAR 0 17
10235: ARRAY
10236: PPUSH
10237: LD_VAR 0 4
10241: PPUSH
10242: CALL_OW 380
10246: GO 10265
// PrepareHuman ( false , i , skill ) ;
10248: LD_INT 0
10250: PPUSH
10251: LD_VAR 0 8
10255: PPUSH
10256: LD_VAR 0 4
10260: PPUSH
10261: CALL_OW 380
// end else
10265: GO 10284
// PrepareHuman ( false , i , skill ) ;
10267: LD_INT 0
10269: PPUSH
10270: LD_VAR 0 8
10274: PPUSH
10275: LD_VAR 0 4
10279: PPUSH
10280: CALL_OW 380
// un := CreateHuman ;
10284: LD_ADDR_VAR 0 14
10288: PUSH
10289: CALL_OW 44
10293: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10294: LD_ADDR_VAR 0 7
10298: PUSH
10299: LD_VAR 0 7
10303: PPUSH
10304: LD_INT 1
10306: PPUSH
10307: LD_VAR 0 14
10311: PPUSH
10312: CALL_OW 2
10316: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10317: LD_VAR 0 14
10321: PPUSH
10322: LD_VAR 0 12
10326: PUSH
10327: LD_INT 1
10329: ARRAY
10330: PPUSH
10331: CALL_OW 52
// end ;
10335: GO 9974
10337: POP
10338: POP
// end ;
10339: GO 9276
10341: POP
10342: POP
// result := result ^ buildings ;
10343: LD_ADDR_VAR 0 7
10347: PUSH
10348: LD_VAR 0 7
10352: PUSH
10353: LD_VAR 0 18
10357: ADD
10358: ST_TO_ADDR
// end else
10359: GO 10502
// begin for i = 1 to personel do
10361: LD_ADDR_VAR 0 8
10365: PUSH
10366: DOUBLE
10367: LD_INT 1
10369: DEC
10370: ST_TO_ADDR
10371: LD_VAR 0 6
10375: PUSH
10376: FOR_TO
10377: IFFALSE 10500
// begin if i > 4 then
10379: LD_VAR 0 8
10383: PUSH
10384: LD_INT 4
10386: GREATER
10387: IFFALSE 10391
// break ;
10389: GO 10500
// x := personel [ i ] ;
10391: LD_ADDR_VAR 0 13
10395: PUSH
10396: LD_VAR 0 6
10400: PUSH
10401: LD_VAR 0 8
10405: ARRAY
10406: ST_TO_ADDR
// if x = - 1 then
10407: LD_VAR 0 13
10411: PUSH
10412: LD_INT 1
10414: NEG
10415: EQUAL
10416: IFFALSE 10420
// continue ;
10418: GO 10376
// PrepareHuman ( false , i , skill ) ;
10420: LD_INT 0
10422: PPUSH
10423: LD_VAR 0 8
10427: PPUSH
10428: LD_VAR 0 4
10432: PPUSH
10433: CALL_OW 380
// un := CreateHuman ;
10437: LD_ADDR_VAR 0 14
10441: PUSH
10442: CALL_OW 44
10446: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10447: LD_VAR 0 14
10451: PPUSH
10452: LD_VAR 0 1
10456: PPUSH
10457: CALL_OW 250
10461: PPUSH
10462: LD_VAR 0 1
10466: PPUSH
10467: CALL_OW 251
10471: PPUSH
10472: LD_INT 10
10474: PPUSH
10475: LD_INT 0
10477: PPUSH
10478: CALL_OW 50
// result := result ^ un ;
10482: LD_ADDR_VAR 0 7
10486: PUSH
10487: LD_VAR 0 7
10491: PUSH
10492: LD_VAR 0 14
10496: ADD
10497: ST_TO_ADDR
// end ;
10498: GO 10376
10500: POP
10501: POP
// end ; end ;
10502: LD_VAR 0 7
10506: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10507: LD_INT 0
10509: PPUSH
10510: PPUSH
10511: PPUSH
10512: PPUSH
10513: PPUSH
10514: PPUSH
10515: PPUSH
10516: PPUSH
10517: PPUSH
10518: PPUSH
10519: PPUSH
10520: PPUSH
10521: PPUSH
10522: PPUSH
10523: PPUSH
10524: PPUSH
// result := false ;
10525: LD_ADDR_VAR 0 3
10529: PUSH
10530: LD_INT 0
10532: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10533: LD_VAR 0 1
10537: NOT
10538: PUSH
10539: LD_VAR 0 1
10543: PPUSH
10544: CALL_OW 266
10548: PUSH
10549: LD_INT 32
10551: PUSH
10552: LD_INT 33
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: IN
10559: NOT
10560: OR
10561: IFFALSE 10565
// exit ;
10563: GO 11674
// nat := GetNation ( tower ) ;
10565: LD_ADDR_VAR 0 12
10569: PUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: CALL_OW 248
10579: ST_TO_ADDR
// side := GetSide ( tower ) ;
10580: LD_ADDR_VAR 0 16
10584: PUSH
10585: LD_VAR 0 1
10589: PPUSH
10590: CALL_OW 255
10594: ST_TO_ADDR
// x := GetX ( tower ) ;
10595: LD_ADDR_VAR 0 10
10599: PUSH
10600: LD_VAR 0 1
10604: PPUSH
10605: CALL_OW 250
10609: ST_TO_ADDR
// y := GetY ( tower ) ;
10610: LD_ADDR_VAR 0 11
10614: PUSH
10615: LD_VAR 0 1
10619: PPUSH
10620: CALL_OW 251
10624: ST_TO_ADDR
// if not x or not y then
10625: LD_VAR 0 10
10629: NOT
10630: PUSH
10631: LD_VAR 0 11
10635: NOT
10636: OR
10637: IFFALSE 10641
// exit ;
10639: GO 11674
// weapon := 0 ;
10641: LD_ADDR_VAR 0 18
10645: PUSH
10646: LD_INT 0
10648: ST_TO_ADDR
// fac_list := [ ] ;
10649: LD_ADDR_VAR 0 17
10653: PUSH
10654: EMPTY
10655: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10656: LD_ADDR_VAR 0 6
10660: PUSH
10661: LD_VAR 0 1
10665: PPUSH
10666: CALL_OW 274
10670: PPUSH
10671: LD_VAR 0 2
10675: PPUSH
10676: LD_INT 0
10678: PPUSH
10679: CALL 8245 0 3
10683: PPUSH
10684: LD_INT 30
10686: PUSH
10687: LD_INT 3
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 72
10698: ST_TO_ADDR
// if not factories then
10699: LD_VAR 0 6
10703: NOT
10704: IFFALSE 10708
// exit ;
10706: GO 11674
// for i in factories do
10708: LD_ADDR_VAR 0 8
10712: PUSH
10713: LD_VAR 0 6
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10744
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10721: LD_ADDR_VAR 0 17
10725: PUSH
10726: LD_VAR 0 17
10730: PUSH
10731: LD_VAR 0 8
10735: PPUSH
10736: CALL_OW 478
10740: UNION
10741: ST_TO_ADDR
10742: GO 10718
10744: POP
10745: POP
// if not fac_list then
10746: LD_VAR 0 17
10750: NOT
10751: IFFALSE 10755
// exit ;
10753: GO 11674
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10755: LD_ADDR_VAR 0 5
10759: PUSH
10760: LD_INT 4
10762: PUSH
10763: LD_INT 5
10765: PUSH
10766: LD_INT 9
10768: PUSH
10769: LD_INT 10
10771: PUSH
10772: LD_INT 6
10774: PUSH
10775: LD_INT 7
10777: PUSH
10778: LD_INT 11
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 27
10792: PUSH
10793: LD_INT 28
10795: PUSH
10796: LD_INT 26
10798: PUSH
10799: LD_INT 30
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 43
10810: PUSH
10811: LD_INT 44
10813: PUSH
10814: LD_INT 46
10816: PUSH
10817: LD_INT 45
10819: PUSH
10820: LD_INT 47
10822: PUSH
10823: LD_INT 49
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: LIST
10838: PUSH
10839: LD_VAR 0 12
10843: ARRAY
10844: ST_TO_ADDR
// list := list isect fac_list ;
10845: LD_ADDR_VAR 0 5
10849: PUSH
10850: LD_VAR 0 5
10854: PUSH
10855: LD_VAR 0 17
10859: ISECT
10860: ST_TO_ADDR
// if not list then
10861: LD_VAR 0 5
10865: NOT
10866: IFFALSE 10870
// exit ;
10868: GO 11674
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10870: LD_VAR 0 12
10874: PUSH
10875: LD_INT 3
10877: EQUAL
10878: PUSH
10879: LD_INT 49
10881: PUSH
10882: LD_VAR 0 5
10886: IN
10887: AND
10888: PUSH
10889: LD_INT 31
10891: PPUSH
10892: LD_VAR 0 16
10896: PPUSH
10897: CALL_OW 321
10901: PUSH
10902: LD_INT 2
10904: EQUAL
10905: AND
10906: IFFALSE 10966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10908: LD_INT 22
10910: PUSH
10911: LD_VAR 0 16
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 35
10922: PUSH
10923: LD_INT 49
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 91
10932: PUSH
10933: LD_VAR 0 1
10937: PUSH
10938: LD_INT 10
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: PPUSH
10951: CALL_OW 69
10955: NOT
10956: IFFALSE 10966
// weapon := ru_time_lapser ;
10958: LD_ADDR_VAR 0 18
10962: PUSH
10963: LD_INT 49
10965: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10966: LD_VAR 0 12
10970: PUSH
10971: LD_INT 1
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: IN
10981: PUSH
10982: LD_INT 11
10984: PUSH
10985: LD_VAR 0 5
10989: IN
10990: PUSH
10991: LD_INT 30
10993: PUSH
10994: LD_VAR 0 5
10998: IN
10999: OR
11000: AND
11001: PUSH
11002: LD_INT 6
11004: PPUSH
11005: LD_VAR 0 16
11009: PPUSH
11010: CALL_OW 321
11014: PUSH
11015: LD_INT 2
11017: EQUAL
11018: AND
11019: IFFALSE 11184
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11021: LD_INT 22
11023: PUSH
11024: LD_VAR 0 16
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: LD_INT 35
11038: PUSH
11039: LD_INT 11
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 35
11048: PUSH
11049: LD_INT 30
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 91
11063: PUSH
11064: LD_VAR 0 1
11068: PUSH
11069: LD_INT 18
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 69
11086: NOT
11087: PUSH
11088: LD_INT 22
11090: PUSH
11091: LD_VAR 0 16
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: LD_INT 30
11105: PUSH
11106: LD_INT 32
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 30
11115: PUSH
11116: LD_INT 33
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 91
11130: PUSH
11131: LD_VAR 0 1
11135: PUSH
11136: LD_INT 12
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: PUSH
11149: EMPTY
11150: LIST
11151: PPUSH
11152: CALL_OW 69
11156: PUSH
11157: LD_INT 2
11159: GREATER
11160: AND
11161: IFFALSE 11184
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11163: LD_ADDR_VAR 0 18
11167: PUSH
11168: LD_INT 11
11170: PUSH
11171: LD_INT 30
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: LD_VAR 0 12
11182: ARRAY
11183: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11184: LD_VAR 0 18
11188: NOT
11189: PUSH
11190: LD_INT 40
11192: PPUSH
11193: LD_VAR 0 16
11197: PPUSH
11198: CALL_OW 321
11202: PUSH
11203: LD_INT 2
11205: EQUAL
11206: AND
11207: PUSH
11208: LD_INT 7
11210: PUSH
11211: LD_VAR 0 5
11215: IN
11216: PUSH
11217: LD_INT 28
11219: PUSH
11220: LD_VAR 0 5
11224: IN
11225: OR
11226: PUSH
11227: LD_INT 45
11229: PUSH
11230: LD_VAR 0 5
11234: IN
11235: OR
11236: AND
11237: IFFALSE 11491
// begin hex := GetHexInfo ( x , y ) ;
11239: LD_ADDR_VAR 0 4
11243: PUSH
11244: LD_VAR 0 10
11248: PPUSH
11249: LD_VAR 0 11
11253: PPUSH
11254: CALL_OW 546
11258: ST_TO_ADDR
// if hex [ 1 ] then
11259: LD_VAR 0 4
11263: PUSH
11264: LD_INT 1
11266: ARRAY
11267: IFFALSE 11271
// exit ;
11269: GO 11674
// height := hex [ 2 ] ;
11271: LD_ADDR_VAR 0 15
11275: PUSH
11276: LD_VAR 0 4
11280: PUSH
11281: LD_INT 2
11283: ARRAY
11284: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11285: LD_ADDR_VAR 0 14
11289: PUSH
11290: LD_INT 0
11292: PUSH
11293: LD_INT 2
11295: PUSH
11296: LD_INT 3
11298: PUSH
11299: LD_INT 5
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: ST_TO_ADDR
// for i in tmp do
11308: LD_ADDR_VAR 0 8
11312: PUSH
11313: LD_VAR 0 14
11317: PUSH
11318: FOR_IN
11319: IFFALSE 11489
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11321: LD_ADDR_VAR 0 9
11325: PUSH
11326: LD_VAR 0 10
11330: PPUSH
11331: LD_VAR 0 8
11335: PPUSH
11336: LD_INT 5
11338: PPUSH
11339: CALL_OW 272
11343: PUSH
11344: LD_VAR 0 11
11348: PPUSH
11349: LD_VAR 0 8
11353: PPUSH
11354: LD_INT 5
11356: PPUSH
11357: CALL_OW 273
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11366: LD_VAR 0 9
11370: PUSH
11371: LD_INT 1
11373: ARRAY
11374: PPUSH
11375: LD_VAR 0 9
11379: PUSH
11380: LD_INT 2
11382: ARRAY
11383: PPUSH
11384: CALL_OW 488
11388: IFFALSE 11487
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11390: LD_ADDR_VAR 0 4
11394: PUSH
11395: LD_VAR 0 9
11399: PUSH
11400: LD_INT 1
11402: ARRAY
11403: PPUSH
11404: LD_VAR 0 9
11408: PUSH
11409: LD_INT 2
11411: ARRAY
11412: PPUSH
11413: CALL_OW 546
11417: ST_TO_ADDR
// if hex [ 1 ] then
11418: LD_VAR 0 4
11422: PUSH
11423: LD_INT 1
11425: ARRAY
11426: IFFALSE 11430
// continue ;
11428: GO 11318
// h := hex [ 2 ] ;
11430: LD_ADDR_VAR 0 13
11434: PUSH
11435: LD_VAR 0 4
11439: PUSH
11440: LD_INT 2
11442: ARRAY
11443: ST_TO_ADDR
// if h + 7 < height then
11444: LD_VAR 0 13
11448: PUSH
11449: LD_INT 7
11451: PLUS
11452: PUSH
11453: LD_VAR 0 15
11457: LESS
11458: IFFALSE 11487
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11460: LD_ADDR_VAR 0 18
11464: PUSH
11465: LD_INT 7
11467: PUSH
11468: LD_INT 28
11470: PUSH
11471: LD_INT 45
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: PUSH
11479: LD_VAR 0 12
11483: ARRAY
11484: ST_TO_ADDR
// break ;
11485: GO 11489
// end ; end ; end ;
11487: GO 11318
11489: POP
11490: POP
// end ; if not weapon then
11491: LD_VAR 0 18
11495: NOT
11496: IFFALSE 11556
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11498: LD_ADDR_VAR 0 5
11502: PUSH
11503: LD_VAR 0 5
11507: PUSH
11508: LD_INT 11
11510: PUSH
11511: LD_INT 30
11513: PUSH
11514: LD_INT 49
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: LIST
11521: DIFF
11522: ST_TO_ADDR
// if not list then
11523: LD_VAR 0 5
11527: NOT
11528: IFFALSE 11532
// exit ;
11530: GO 11674
// weapon := list [ rand ( 1 , list ) ] ;
11532: LD_ADDR_VAR 0 18
11536: PUSH
11537: LD_VAR 0 5
11541: PUSH
11542: LD_INT 1
11544: PPUSH
11545: LD_VAR 0 5
11549: PPUSH
11550: CALL_OW 12
11554: ARRAY
11555: ST_TO_ADDR
// end ; if weapon then
11556: LD_VAR 0 18
11560: IFFALSE 11674
// begin tmp := CostOfWeapon ( weapon ) ;
11562: LD_ADDR_VAR 0 14
11566: PUSH
11567: LD_VAR 0 18
11571: PPUSH
11572: CALL_OW 451
11576: ST_TO_ADDR
// j := GetBase ( tower ) ;
11577: LD_ADDR_VAR 0 9
11581: PUSH
11582: LD_VAR 0 1
11586: PPUSH
11587: CALL_OW 274
11591: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11592: LD_VAR 0 9
11596: PPUSH
11597: LD_INT 1
11599: PPUSH
11600: CALL_OW 275
11604: PUSH
11605: LD_VAR 0 14
11609: PUSH
11610: LD_INT 1
11612: ARRAY
11613: GREATEREQUAL
11614: PUSH
11615: LD_VAR 0 9
11619: PPUSH
11620: LD_INT 2
11622: PPUSH
11623: CALL_OW 275
11627: PUSH
11628: LD_VAR 0 14
11632: PUSH
11633: LD_INT 2
11635: ARRAY
11636: GREATEREQUAL
11637: AND
11638: PUSH
11639: LD_VAR 0 9
11643: PPUSH
11644: LD_INT 3
11646: PPUSH
11647: CALL_OW 275
11651: PUSH
11652: LD_VAR 0 14
11656: PUSH
11657: LD_INT 3
11659: ARRAY
11660: GREATEREQUAL
11661: AND
11662: IFFALSE 11674
// result := weapon ;
11664: LD_ADDR_VAR 0 3
11668: PUSH
11669: LD_VAR 0 18
11673: ST_TO_ADDR
// end ; end ;
11674: LD_VAR 0 3
11678: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11679: LD_INT 0
11681: PPUSH
11682: PPUSH
// result := true ;
11683: LD_ADDR_VAR 0 3
11687: PUSH
11688: LD_INT 1
11690: ST_TO_ADDR
// if array1 = array2 then
11691: LD_VAR 0 1
11695: PUSH
11696: LD_VAR 0 2
11700: EQUAL
11701: IFFALSE 11761
// begin for i = 1 to array1 do
11703: LD_ADDR_VAR 0 4
11707: PUSH
11708: DOUBLE
11709: LD_INT 1
11711: DEC
11712: ST_TO_ADDR
11713: LD_VAR 0 1
11717: PUSH
11718: FOR_TO
11719: IFFALSE 11757
// if array1 [ i ] <> array2 [ i ] then
11721: LD_VAR 0 1
11725: PUSH
11726: LD_VAR 0 4
11730: ARRAY
11731: PUSH
11732: LD_VAR 0 2
11736: PUSH
11737: LD_VAR 0 4
11741: ARRAY
11742: NONEQUAL
11743: IFFALSE 11755
// begin result := false ;
11745: LD_ADDR_VAR 0 3
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// break ;
11753: GO 11757
// end ;
11755: GO 11718
11757: POP
11758: POP
// end else
11759: GO 11769
// result := false ;
11761: LD_ADDR_VAR 0 3
11765: PUSH
11766: LD_INT 0
11768: ST_TO_ADDR
// end ;
11769: LD_VAR 0 3
11773: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11774: LD_INT 0
11776: PPUSH
11777: PPUSH
// if not array1 or not array2 then
11778: LD_VAR 0 1
11782: NOT
11783: PUSH
11784: LD_VAR 0 2
11788: NOT
11789: OR
11790: IFFALSE 11794
// exit ;
11792: GO 11858
// result := true ;
11794: LD_ADDR_VAR 0 3
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// for i = 1 to array1 do
11802: LD_ADDR_VAR 0 4
11806: PUSH
11807: DOUBLE
11808: LD_INT 1
11810: DEC
11811: ST_TO_ADDR
11812: LD_VAR 0 1
11816: PUSH
11817: FOR_TO
11818: IFFALSE 11856
// if array1 [ i ] <> array2 [ i ] then
11820: LD_VAR 0 1
11824: PUSH
11825: LD_VAR 0 4
11829: ARRAY
11830: PUSH
11831: LD_VAR 0 2
11835: PUSH
11836: LD_VAR 0 4
11840: ARRAY
11841: NONEQUAL
11842: IFFALSE 11854
// begin result := false ;
11844: LD_ADDR_VAR 0 3
11848: PUSH
11849: LD_INT 0
11851: ST_TO_ADDR
// break ;
11852: GO 11856
// end ;
11854: GO 11817
11856: POP
11857: POP
// end ;
11858: LD_VAR 0 3
11862: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11863: LD_INT 0
11865: PPUSH
11866: PPUSH
11867: PPUSH
// pom := GetBase ( fac ) ;
11868: LD_ADDR_VAR 0 5
11872: PUSH
11873: LD_VAR 0 1
11877: PPUSH
11878: CALL_OW 274
11882: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11883: LD_ADDR_VAR 0 4
11887: PUSH
11888: LD_VAR 0 2
11892: PUSH
11893: LD_INT 1
11895: ARRAY
11896: PPUSH
11897: LD_VAR 0 2
11901: PUSH
11902: LD_INT 2
11904: ARRAY
11905: PPUSH
11906: LD_VAR 0 2
11910: PUSH
11911: LD_INT 3
11913: ARRAY
11914: PPUSH
11915: LD_VAR 0 2
11919: PUSH
11920: LD_INT 4
11922: ARRAY
11923: PPUSH
11924: CALL_OW 449
11928: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11929: LD_ADDR_VAR 0 3
11933: PUSH
11934: LD_VAR 0 5
11938: PPUSH
11939: LD_INT 1
11941: PPUSH
11942: CALL_OW 275
11946: PUSH
11947: LD_VAR 0 4
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: GREATEREQUAL
11956: PUSH
11957: LD_VAR 0 5
11961: PPUSH
11962: LD_INT 2
11964: PPUSH
11965: CALL_OW 275
11969: PUSH
11970: LD_VAR 0 4
11974: PUSH
11975: LD_INT 2
11977: ARRAY
11978: GREATEREQUAL
11979: AND
11980: PUSH
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_INT 3
11988: PPUSH
11989: CALL_OW 275
11993: PUSH
11994: LD_VAR 0 4
11998: PUSH
11999: LD_INT 3
12001: ARRAY
12002: GREATEREQUAL
12003: AND
12004: ST_TO_ADDR
// end ;
12005: LD_VAR 0 3
12009: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12010: LD_INT 0
12012: PPUSH
12013: PPUSH
12014: PPUSH
12015: PPUSH
// pom := GetBase ( building ) ;
12016: LD_ADDR_VAR 0 3
12020: PUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 274
12030: ST_TO_ADDR
// if not pom then
12031: LD_VAR 0 3
12035: NOT
12036: IFFALSE 12040
// exit ;
12038: GO 12210
// btype := GetBType ( building ) ;
12040: LD_ADDR_VAR 0 5
12044: PUSH
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 266
12054: ST_TO_ADDR
// if btype = b_armoury then
12055: LD_VAR 0 5
12059: PUSH
12060: LD_INT 4
12062: EQUAL
12063: IFFALSE 12073
// btype := b_barracks ;
12065: LD_ADDR_VAR 0 5
12069: PUSH
12070: LD_INT 5
12072: ST_TO_ADDR
// if btype = b_depot then
12073: LD_VAR 0 5
12077: PUSH
12078: LD_INT 0
12080: EQUAL
12081: IFFALSE 12091
// btype := b_warehouse ;
12083: LD_ADDR_VAR 0 5
12087: PUSH
12088: LD_INT 1
12090: ST_TO_ADDR
// if btype = b_workshop then
12091: LD_VAR 0 5
12095: PUSH
12096: LD_INT 2
12098: EQUAL
12099: IFFALSE 12109
// btype := b_factory ;
12101: LD_ADDR_VAR 0 5
12105: PUSH
12106: LD_INT 3
12108: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12109: LD_ADDR_VAR 0 4
12113: PUSH
12114: LD_VAR 0 5
12118: PPUSH
12119: LD_VAR 0 1
12123: PPUSH
12124: CALL_OW 248
12128: PPUSH
12129: CALL_OW 450
12133: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12134: LD_ADDR_VAR 0 2
12138: PUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: LD_INT 1
12146: PPUSH
12147: CALL_OW 275
12151: PUSH
12152: LD_VAR 0 4
12156: PUSH
12157: LD_INT 1
12159: ARRAY
12160: GREATEREQUAL
12161: PUSH
12162: LD_VAR 0 3
12166: PPUSH
12167: LD_INT 2
12169: PPUSH
12170: CALL_OW 275
12174: PUSH
12175: LD_VAR 0 4
12179: PUSH
12180: LD_INT 2
12182: ARRAY
12183: GREATEREQUAL
12184: AND
12185: PUSH
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 3
12193: PPUSH
12194: CALL_OW 275
12198: PUSH
12199: LD_VAR 0 4
12203: PUSH
12204: LD_INT 3
12206: ARRAY
12207: GREATEREQUAL
12208: AND
12209: ST_TO_ADDR
// end ;
12210: LD_VAR 0 2
12214: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12215: LD_INT 0
12217: PPUSH
12218: PPUSH
12219: PPUSH
// pom := GetBase ( building ) ;
12220: LD_ADDR_VAR 0 4
12224: PUSH
12225: LD_VAR 0 1
12229: PPUSH
12230: CALL_OW 274
12234: ST_TO_ADDR
// if not pom then
12235: LD_VAR 0 4
12239: NOT
12240: IFFALSE 12244
// exit ;
12242: GO 12345
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12244: LD_ADDR_VAR 0 5
12248: PUSH
12249: LD_VAR 0 2
12253: PPUSH
12254: LD_VAR 0 1
12258: PPUSH
12259: CALL_OW 248
12263: PPUSH
12264: CALL_OW 450
12268: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12269: LD_ADDR_VAR 0 3
12273: PUSH
12274: LD_VAR 0 4
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL_OW 275
12286: PUSH
12287: LD_VAR 0 5
12291: PUSH
12292: LD_INT 1
12294: ARRAY
12295: GREATEREQUAL
12296: PUSH
12297: LD_VAR 0 4
12301: PPUSH
12302: LD_INT 2
12304: PPUSH
12305: CALL_OW 275
12309: PUSH
12310: LD_VAR 0 5
12314: PUSH
12315: LD_INT 2
12317: ARRAY
12318: GREATEREQUAL
12319: AND
12320: PUSH
12321: LD_VAR 0 4
12325: PPUSH
12326: LD_INT 3
12328: PPUSH
12329: CALL_OW 275
12333: PUSH
12334: LD_VAR 0 5
12338: PUSH
12339: LD_INT 3
12341: ARRAY
12342: GREATEREQUAL
12343: AND
12344: ST_TO_ADDR
// end ;
12345: LD_VAR 0 3
12349: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12350: LD_INT 0
12352: PPUSH
12353: PPUSH
12354: PPUSH
12355: PPUSH
12356: PPUSH
12357: PPUSH
12358: PPUSH
12359: PPUSH
12360: PPUSH
12361: PPUSH
12362: PPUSH
// result := false ;
12363: LD_ADDR_VAR 0 8
12367: PUSH
12368: LD_INT 0
12370: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12371: LD_VAR 0 5
12375: NOT
12376: PUSH
12377: LD_VAR 0 1
12381: NOT
12382: OR
12383: PUSH
12384: LD_VAR 0 2
12388: NOT
12389: OR
12390: PUSH
12391: LD_VAR 0 3
12395: NOT
12396: OR
12397: IFFALSE 12401
// exit ;
12399: GO 13215
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12401: LD_ADDR_VAR 0 14
12405: PUSH
12406: LD_VAR 0 1
12410: PPUSH
12411: LD_VAR 0 2
12415: PPUSH
12416: LD_VAR 0 3
12420: PPUSH
12421: LD_VAR 0 4
12425: PPUSH
12426: LD_VAR 0 5
12430: PUSH
12431: LD_INT 1
12433: ARRAY
12434: PPUSH
12435: CALL_OW 248
12439: PPUSH
12440: LD_INT 0
12442: PPUSH
12443: CALL 14448 0 6
12447: ST_TO_ADDR
// if not hexes then
12448: LD_VAR 0 14
12452: NOT
12453: IFFALSE 12457
// exit ;
12455: GO 13215
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12457: LD_ADDR_VAR 0 17
12461: PUSH
12462: LD_VAR 0 5
12466: PPUSH
12467: LD_INT 22
12469: PUSH
12470: LD_VAR 0 13
12474: PPUSH
12475: CALL_OW 255
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: LD_INT 30
12489: PUSH
12490: LD_INT 0
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 30
12499: PUSH
12500: LD_INT 1
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 72
12520: ST_TO_ADDR
// for i = 1 to hexes do
12521: LD_ADDR_VAR 0 9
12525: PUSH
12526: DOUBLE
12527: LD_INT 1
12529: DEC
12530: ST_TO_ADDR
12531: LD_VAR 0 14
12535: PUSH
12536: FOR_TO
12537: IFFALSE 13213
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12539: LD_ADDR_VAR 0 13
12543: PUSH
12544: LD_VAR 0 14
12548: PUSH
12549: LD_VAR 0 9
12553: ARRAY
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: PPUSH
12559: LD_VAR 0 14
12563: PUSH
12564: LD_VAR 0 9
12568: ARRAY
12569: PUSH
12570: LD_INT 2
12572: ARRAY
12573: PPUSH
12574: CALL_OW 428
12578: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12579: LD_VAR 0 14
12583: PUSH
12584: LD_VAR 0 9
12588: ARRAY
12589: PUSH
12590: LD_INT 1
12592: ARRAY
12593: PPUSH
12594: LD_VAR 0 14
12598: PUSH
12599: LD_VAR 0 9
12603: ARRAY
12604: PUSH
12605: LD_INT 2
12607: ARRAY
12608: PPUSH
12609: CALL_OW 351
12613: PUSH
12614: LD_VAR 0 14
12618: PUSH
12619: LD_VAR 0 9
12623: ARRAY
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PPUSH
12629: LD_VAR 0 14
12633: PUSH
12634: LD_VAR 0 9
12638: ARRAY
12639: PUSH
12640: LD_INT 2
12642: ARRAY
12643: PPUSH
12644: CALL_OW 488
12648: NOT
12649: OR
12650: PUSH
12651: LD_VAR 0 13
12655: PPUSH
12656: CALL_OW 247
12660: PUSH
12661: LD_INT 3
12663: EQUAL
12664: OR
12665: IFFALSE 12671
// exit ;
12667: POP
12668: POP
12669: GO 13215
// if not tmp then
12671: LD_VAR 0 13
12675: NOT
12676: IFFALSE 12680
// continue ;
12678: GO 12536
// result := true ;
12680: LD_ADDR_VAR 0 8
12684: PUSH
12685: LD_INT 1
12687: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12688: LD_VAR 0 6
12692: PUSH
12693: LD_VAR 0 13
12697: PPUSH
12698: CALL_OW 247
12702: PUSH
12703: LD_INT 2
12705: EQUAL
12706: AND
12707: PUSH
12708: LD_VAR 0 13
12712: PPUSH
12713: CALL_OW 263
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: AND
12722: IFFALSE 12886
// begin if IsDrivenBy ( tmp ) then
12724: LD_VAR 0 13
12728: PPUSH
12729: CALL_OW 311
12733: IFFALSE 12737
// continue ;
12735: GO 12536
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12737: LD_VAR 0 6
12741: PPUSH
12742: LD_INT 3
12744: PUSH
12745: LD_INT 60
12747: PUSH
12748: EMPTY
12749: LIST
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 3
12757: PUSH
12758: LD_INT 55
12760: PUSH
12761: EMPTY
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PPUSH
12772: CALL_OW 72
12776: IFFALSE 12884
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12778: LD_ADDR_VAR 0 18
12782: PUSH
12783: LD_VAR 0 6
12787: PPUSH
12788: LD_INT 3
12790: PUSH
12791: LD_INT 60
12793: PUSH
12794: EMPTY
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 3
12803: PUSH
12804: LD_INT 55
12806: PUSH
12807: EMPTY
12808: LIST
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 72
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: ST_TO_ADDR
// if IsInUnit ( driver ) then
12827: LD_VAR 0 18
12831: PPUSH
12832: CALL_OW 310
12836: IFFALSE 12847
// ComExit ( driver ) ;
12838: LD_VAR 0 18
12842: PPUSH
12843: CALL 38227 0 1
// AddComEnterUnit ( driver , tmp ) ;
12847: LD_VAR 0 18
12851: PPUSH
12852: LD_VAR 0 13
12856: PPUSH
12857: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12861: LD_VAR 0 18
12865: PPUSH
12866: LD_VAR 0 7
12870: PPUSH
12871: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12875: LD_VAR 0 18
12879: PPUSH
12880: CALL_OW 181
// end ; continue ;
12884: GO 12536
// end ; if not cleaners or not tmp in cleaners then
12886: LD_VAR 0 6
12890: NOT
12891: PUSH
12892: LD_VAR 0 13
12896: PUSH
12897: LD_VAR 0 6
12901: IN
12902: NOT
12903: OR
12904: IFFALSE 13211
// begin if dep then
12906: LD_VAR 0 17
12910: IFFALSE 13046
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12912: LD_ADDR_VAR 0 16
12916: PUSH
12917: LD_VAR 0 17
12921: PUSH
12922: LD_INT 1
12924: ARRAY
12925: PPUSH
12926: CALL_OW 250
12930: PPUSH
12931: LD_VAR 0 17
12935: PUSH
12936: LD_INT 1
12938: ARRAY
12939: PPUSH
12940: CALL_OW 254
12944: PPUSH
12945: LD_INT 5
12947: PPUSH
12948: CALL_OW 272
12952: PUSH
12953: LD_VAR 0 17
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: PPUSH
12962: CALL_OW 251
12966: PPUSH
12967: LD_VAR 0 17
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: CALL_OW 254
12980: PPUSH
12981: LD_INT 5
12983: PPUSH
12984: CALL_OW 273
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12993: LD_VAR 0 16
12997: PUSH
12998: LD_INT 1
13000: ARRAY
13001: PPUSH
13002: LD_VAR 0 16
13006: PUSH
13007: LD_INT 2
13009: ARRAY
13010: PPUSH
13011: CALL_OW 488
13015: IFFALSE 13046
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13017: LD_VAR 0 13
13021: PPUSH
13022: LD_VAR 0 16
13026: PUSH
13027: LD_INT 1
13029: ARRAY
13030: PPUSH
13031: LD_VAR 0 16
13035: PUSH
13036: LD_INT 2
13038: ARRAY
13039: PPUSH
13040: CALL_OW 111
// continue ;
13044: GO 12536
// end ; end ; r := GetDir ( tmp ) ;
13046: LD_ADDR_VAR 0 15
13050: PUSH
13051: LD_VAR 0 13
13055: PPUSH
13056: CALL_OW 254
13060: ST_TO_ADDR
// if r = 5 then
13061: LD_VAR 0 15
13065: PUSH
13066: LD_INT 5
13068: EQUAL
13069: IFFALSE 13079
// r := 0 ;
13071: LD_ADDR_VAR 0 15
13075: PUSH
13076: LD_INT 0
13078: ST_TO_ADDR
// for j = r to 5 do
13079: LD_ADDR_VAR 0 10
13083: PUSH
13084: DOUBLE
13085: LD_VAR 0 15
13089: DEC
13090: ST_TO_ADDR
13091: LD_INT 5
13093: PUSH
13094: FOR_TO
13095: IFFALSE 13209
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13097: LD_ADDR_VAR 0 11
13101: PUSH
13102: LD_VAR 0 13
13106: PPUSH
13107: CALL_OW 250
13111: PPUSH
13112: LD_VAR 0 10
13116: PPUSH
13117: LD_INT 2
13119: PPUSH
13120: CALL_OW 272
13124: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13125: LD_ADDR_VAR 0 12
13129: PUSH
13130: LD_VAR 0 13
13134: PPUSH
13135: CALL_OW 251
13139: PPUSH
13140: LD_VAR 0 10
13144: PPUSH
13145: LD_INT 2
13147: PPUSH
13148: CALL_OW 273
13152: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13153: LD_VAR 0 11
13157: PPUSH
13158: LD_VAR 0 12
13162: PPUSH
13163: CALL_OW 488
13167: PUSH
13168: LD_VAR 0 11
13172: PPUSH
13173: LD_VAR 0 12
13177: PPUSH
13178: CALL_OW 428
13182: NOT
13183: AND
13184: IFFALSE 13207
// begin ComMoveXY ( tmp , _x , _y ) ;
13186: LD_VAR 0 13
13190: PPUSH
13191: LD_VAR 0 11
13195: PPUSH
13196: LD_VAR 0 12
13200: PPUSH
13201: CALL_OW 111
// break ;
13205: GO 13209
// end ; end ;
13207: GO 13094
13209: POP
13210: POP
// end ; end ;
13211: GO 12536
13213: POP
13214: POP
// end ;
13215: LD_VAR 0 8
13219: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13220: LD_INT 0
13222: PPUSH
// result := true ;
13223: LD_ADDR_VAR 0 3
13227: PUSH
13228: LD_INT 1
13230: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13231: LD_VAR 0 2
13235: PUSH
13236: LD_INT 24
13238: DOUBLE
13239: EQUAL
13240: IFTRUE 13250
13242: LD_INT 33
13244: DOUBLE
13245: EQUAL
13246: IFTRUE 13250
13248: GO 13275
13250: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13251: LD_ADDR_VAR 0 3
13255: PUSH
13256: LD_INT 32
13258: PPUSH
13259: LD_VAR 0 1
13263: PPUSH
13264: CALL_OW 321
13268: PUSH
13269: LD_INT 2
13271: EQUAL
13272: ST_TO_ADDR
13273: GO 13591
13275: LD_INT 20
13277: DOUBLE
13278: EQUAL
13279: IFTRUE 13283
13281: GO 13308
13283: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13284: LD_ADDR_VAR 0 3
13288: PUSH
13289: LD_INT 6
13291: PPUSH
13292: LD_VAR 0 1
13296: PPUSH
13297: CALL_OW 321
13301: PUSH
13302: LD_INT 2
13304: EQUAL
13305: ST_TO_ADDR
13306: GO 13591
13308: LD_INT 22
13310: DOUBLE
13311: EQUAL
13312: IFTRUE 13322
13314: LD_INT 36
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13347
13322: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13323: LD_ADDR_VAR 0 3
13327: PUSH
13328: LD_INT 15
13330: PPUSH
13331: LD_VAR 0 1
13335: PPUSH
13336: CALL_OW 321
13340: PUSH
13341: LD_INT 2
13343: EQUAL
13344: ST_TO_ADDR
13345: GO 13591
13347: LD_INT 30
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13380
13355: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13356: LD_ADDR_VAR 0 3
13360: PUSH
13361: LD_INT 20
13363: PPUSH
13364: LD_VAR 0 1
13368: PPUSH
13369: CALL_OW 321
13373: PUSH
13374: LD_INT 2
13376: EQUAL
13377: ST_TO_ADDR
13378: GO 13591
13380: LD_INT 28
13382: DOUBLE
13383: EQUAL
13384: IFTRUE 13394
13386: LD_INT 21
13388: DOUBLE
13389: EQUAL
13390: IFTRUE 13394
13392: GO 13419
13394: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13395: LD_ADDR_VAR 0 3
13399: PUSH
13400: LD_INT 21
13402: PPUSH
13403: LD_VAR 0 1
13407: PPUSH
13408: CALL_OW 321
13412: PUSH
13413: LD_INT 2
13415: EQUAL
13416: ST_TO_ADDR
13417: GO 13591
13419: LD_INT 16
13421: DOUBLE
13422: EQUAL
13423: IFTRUE 13427
13425: GO 13452
13427: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13428: LD_ADDR_VAR 0 3
13432: PUSH
13433: LD_INT 84
13435: PPUSH
13436: LD_VAR 0 1
13440: PPUSH
13441: CALL_OW 321
13445: PUSH
13446: LD_INT 2
13448: EQUAL
13449: ST_TO_ADDR
13450: GO 13591
13452: LD_INT 19
13454: DOUBLE
13455: EQUAL
13456: IFTRUE 13466
13458: LD_INT 23
13460: DOUBLE
13461: EQUAL
13462: IFTRUE 13466
13464: GO 13491
13466: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13467: LD_ADDR_VAR 0 3
13471: PUSH
13472: LD_INT 83
13474: PPUSH
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 321
13484: PUSH
13485: LD_INT 2
13487: EQUAL
13488: ST_TO_ADDR
13489: GO 13591
13491: LD_INT 17
13493: DOUBLE
13494: EQUAL
13495: IFTRUE 13499
13497: GO 13524
13499: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13500: LD_ADDR_VAR 0 3
13504: PUSH
13505: LD_INT 39
13507: PPUSH
13508: LD_VAR 0 1
13512: PPUSH
13513: CALL_OW 321
13517: PUSH
13518: LD_INT 2
13520: EQUAL
13521: ST_TO_ADDR
13522: GO 13591
13524: LD_INT 18
13526: DOUBLE
13527: EQUAL
13528: IFTRUE 13532
13530: GO 13557
13532: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13533: LD_ADDR_VAR 0 3
13537: PUSH
13538: LD_INT 40
13540: PPUSH
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 321
13550: PUSH
13551: LD_INT 2
13553: EQUAL
13554: ST_TO_ADDR
13555: GO 13591
13557: LD_INT 27
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 13590
13565: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13566: LD_ADDR_VAR 0 3
13570: PUSH
13571: LD_INT 35
13573: PPUSH
13574: LD_VAR 0 1
13578: PPUSH
13579: CALL_OW 321
13583: PUSH
13584: LD_INT 2
13586: EQUAL
13587: ST_TO_ADDR
13588: GO 13591
13590: POP
// end ;
13591: LD_VAR 0 3
13595: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13596: LD_INT 0
13598: PPUSH
13599: PPUSH
13600: PPUSH
13601: PPUSH
13602: PPUSH
13603: PPUSH
13604: PPUSH
13605: PPUSH
13606: PPUSH
13607: PPUSH
13608: PPUSH
// result := false ;
13609: LD_ADDR_VAR 0 6
13613: PUSH
13614: LD_INT 0
13616: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13617: LD_VAR 0 1
13621: NOT
13622: PUSH
13623: LD_VAR 0 1
13627: PPUSH
13628: CALL_OW 266
13632: PUSH
13633: LD_INT 0
13635: PUSH
13636: LD_INT 1
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: IN
13643: NOT
13644: OR
13645: PUSH
13646: LD_VAR 0 2
13650: NOT
13651: OR
13652: PUSH
13653: LD_VAR 0 5
13657: PUSH
13658: LD_INT 0
13660: PUSH
13661: LD_INT 1
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 3
13669: PUSH
13670: LD_INT 4
13672: PUSH
13673: LD_INT 5
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: IN
13684: NOT
13685: OR
13686: PUSH
13687: LD_VAR 0 3
13691: PPUSH
13692: LD_VAR 0 4
13696: PPUSH
13697: CALL_OW 488
13701: NOT
13702: OR
13703: IFFALSE 13707
// exit ;
13705: GO 14443
// side := GetSide ( depot ) ;
13707: LD_ADDR_VAR 0 9
13711: PUSH
13712: LD_VAR 0 1
13716: PPUSH
13717: CALL_OW 255
13721: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13722: LD_VAR 0 9
13726: PPUSH
13727: LD_VAR 0 2
13731: PPUSH
13732: CALL 13220 0 2
13736: NOT
13737: IFFALSE 13741
// exit ;
13739: GO 14443
// pom := GetBase ( depot ) ;
13741: LD_ADDR_VAR 0 10
13745: PUSH
13746: LD_VAR 0 1
13750: PPUSH
13751: CALL_OW 274
13755: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13756: LD_ADDR_VAR 0 11
13760: PUSH
13761: LD_VAR 0 2
13765: PPUSH
13766: LD_VAR 0 1
13770: PPUSH
13771: CALL_OW 248
13775: PPUSH
13776: CALL_OW 450
13780: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13781: LD_VAR 0 10
13785: PPUSH
13786: LD_INT 1
13788: PPUSH
13789: CALL_OW 275
13793: PUSH
13794: LD_VAR 0 11
13798: PUSH
13799: LD_INT 1
13801: ARRAY
13802: GREATEREQUAL
13803: PUSH
13804: LD_VAR 0 10
13808: PPUSH
13809: LD_INT 2
13811: PPUSH
13812: CALL_OW 275
13816: PUSH
13817: LD_VAR 0 11
13821: PUSH
13822: LD_INT 2
13824: ARRAY
13825: GREATEREQUAL
13826: AND
13827: PUSH
13828: LD_VAR 0 10
13832: PPUSH
13833: LD_INT 3
13835: PPUSH
13836: CALL_OW 275
13840: PUSH
13841: LD_VAR 0 11
13845: PUSH
13846: LD_INT 3
13848: ARRAY
13849: GREATEREQUAL
13850: AND
13851: NOT
13852: IFFALSE 13856
// exit ;
13854: GO 14443
// if GetBType ( depot ) = b_depot then
13856: LD_VAR 0 1
13860: PPUSH
13861: CALL_OW 266
13865: PUSH
13866: LD_INT 0
13868: EQUAL
13869: IFFALSE 13881
// dist := 28 else
13871: LD_ADDR_VAR 0 14
13875: PUSH
13876: LD_INT 28
13878: ST_TO_ADDR
13879: GO 13889
// dist := 36 ;
13881: LD_ADDR_VAR 0 14
13885: PUSH
13886: LD_INT 36
13888: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13889: LD_VAR 0 1
13893: PPUSH
13894: LD_VAR 0 3
13898: PPUSH
13899: LD_VAR 0 4
13903: PPUSH
13904: CALL_OW 297
13908: PUSH
13909: LD_VAR 0 14
13913: GREATER
13914: IFFALSE 13918
// exit ;
13916: GO 14443
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13918: LD_ADDR_VAR 0 12
13922: PUSH
13923: LD_VAR 0 2
13927: PPUSH
13928: LD_VAR 0 3
13932: PPUSH
13933: LD_VAR 0 4
13937: PPUSH
13938: LD_VAR 0 5
13942: PPUSH
13943: LD_VAR 0 1
13947: PPUSH
13948: CALL_OW 248
13952: PPUSH
13953: LD_INT 0
13955: PPUSH
13956: CALL 14448 0 6
13960: ST_TO_ADDR
// if not hexes then
13961: LD_VAR 0 12
13965: NOT
13966: IFFALSE 13970
// exit ;
13968: GO 14443
// hex := GetHexInfo ( x , y ) ;
13970: LD_ADDR_VAR 0 15
13974: PUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_VAR 0 4
13984: PPUSH
13985: CALL_OW 546
13989: ST_TO_ADDR
// if hex [ 1 ] then
13990: LD_VAR 0 15
13994: PUSH
13995: LD_INT 1
13997: ARRAY
13998: IFFALSE 14002
// exit ;
14000: GO 14443
// height := hex [ 2 ] ;
14002: LD_ADDR_VAR 0 13
14006: PUSH
14007: LD_VAR 0 15
14011: PUSH
14012: LD_INT 2
14014: ARRAY
14015: ST_TO_ADDR
// for i = 1 to hexes do
14016: LD_ADDR_VAR 0 7
14020: PUSH
14021: DOUBLE
14022: LD_INT 1
14024: DEC
14025: ST_TO_ADDR
14026: LD_VAR 0 12
14030: PUSH
14031: FOR_TO
14032: IFFALSE 14362
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14034: LD_VAR 0 12
14038: PUSH
14039: LD_VAR 0 7
14043: ARRAY
14044: PUSH
14045: LD_INT 1
14047: ARRAY
14048: PPUSH
14049: LD_VAR 0 12
14053: PUSH
14054: LD_VAR 0 7
14058: ARRAY
14059: PUSH
14060: LD_INT 2
14062: ARRAY
14063: PPUSH
14064: CALL_OW 488
14068: NOT
14069: PUSH
14070: LD_VAR 0 12
14074: PUSH
14075: LD_VAR 0 7
14079: ARRAY
14080: PUSH
14081: LD_INT 1
14083: ARRAY
14084: PPUSH
14085: LD_VAR 0 12
14089: PUSH
14090: LD_VAR 0 7
14094: ARRAY
14095: PUSH
14096: LD_INT 2
14098: ARRAY
14099: PPUSH
14100: CALL_OW 428
14104: PUSH
14105: LD_INT 0
14107: GREATER
14108: OR
14109: PUSH
14110: LD_VAR 0 12
14114: PUSH
14115: LD_VAR 0 7
14119: ARRAY
14120: PUSH
14121: LD_INT 1
14123: ARRAY
14124: PPUSH
14125: LD_VAR 0 12
14129: PUSH
14130: LD_VAR 0 7
14134: ARRAY
14135: PUSH
14136: LD_INT 2
14138: ARRAY
14139: PPUSH
14140: CALL_OW 351
14144: OR
14145: IFFALSE 14151
// exit ;
14147: POP
14148: POP
14149: GO 14443
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14151: LD_ADDR_VAR 0 8
14155: PUSH
14156: LD_VAR 0 12
14160: PUSH
14161: LD_VAR 0 7
14165: ARRAY
14166: PUSH
14167: LD_INT 1
14169: ARRAY
14170: PPUSH
14171: LD_VAR 0 12
14175: PUSH
14176: LD_VAR 0 7
14180: ARRAY
14181: PUSH
14182: LD_INT 2
14184: ARRAY
14185: PPUSH
14186: CALL_OW 546
14190: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14191: LD_VAR 0 8
14195: PUSH
14196: LD_INT 1
14198: ARRAY
14199: PUSH
14200: LD_VAR 0 8
14204: PUSH
14205: LD_INT 2
14207: ARRAY
14208: PUSH
14209: LD_VAR 0 13
14213: PUSH
14214: LD_INT 2
14216: PLUS
14217: GREATER
14218: OR
14219: PUSH
14220: LD_VAR 0 8
14224: PUSH
14225: LD_INT 2
14227: ARRAY
14228: PUSH
14229: LD_VAR 0 13
14233: PUSH
14234: LD_INT 2
14236: MINUS
14237: LESS
14238: OR
14239: PUSH
14240: LD_VAR 0 8
14244: PUSH
14245: LD_INT 3
14247: ARRAY
14248: PUSH
14249: LD_INT 0
14251: PUSH
14252: LD_INT 8
14254: PUSH
14255: LD_INT 9
14257: PUSH
14258: LD_INT 10
14260: PUSH
14261: LD_INT 11
14263: PUSH
14264: LD_INT 12
14266: PUSH
14267: LD_INT 13
14269: PUSH
14270: LD_INT 16
14272: PUSH
14273: LD_INT 17
14275: PUSH
14276: LD_INT 18
14278: PUSH
14279: LD_INT 19
14281: PUSH
14282: LD_INT 20
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: IN
14303: NOT
14304: OR
14305: PUSH
14306: LD_VAR 0 8
14310: PUSH
14311: LD_INT 5
14313: ARRAY
14314: NOT
14315: OR
14316: PUSH
14317: LD_VAR 0 8
14321: PUSH
14322: LD_INT 6
14324: ARRAY
14325: PUSH
14326: LD_INT 1
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 7
14334: PUSH
14335: LD_INT 9
14337: PUSH
14338: LD_INT 10
14340: PUSH
14341: LD_INT 11
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: IN
14352: NOT
14353: OR
14354: IFFALSE 14360
// exit ;
14356: POP
14357: POP
14358: GO 14443
// end ;
14360: GO 14031
14362: POP
14363: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14364: LD_VAR 0 9
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: LD_VAR 0 4
14378: PPUSH
14379: LD_INT 20
14381: PPUSH
14382: CALL 6395 0 4
14386: PUSH
14387: LD_INT 4
14389: ARRAY
14390: IFFALSE 14394
// exit ;
14392: GO 14443
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14394: LD_VAR 0 2
14398: PUSH
14399: LD_INT 29
14401: PUSH
14402: LD_INT 30
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: IN
14409: PUSH
14410: LD_VAR 0 3
14414: PPUSH
14415: LD_VAR 0 4
14419: PPUSH
14420: LD_VAR 0 9
14424: PPUSH
14425: CALL_OW 440
14429: NOT
14430: AND
14431: IFFALSE 14435
// exit ;
14433: GO 14443
// result := true ;
14435: LD_ADDR_VAR 0 6
14439: PUSH
14440: LD_INT 1
14442: ST_TO_ADDR
// end ;
14443: LD_VAR 0 6
14447: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14448: LD_INT 0
14450: PPUSH
14451: PPUSH
14452: PPUSH
14453: PPUSH
14454: PPUSH
14455: PPUSH
14456: PPUSH
14457: PPUSH
14458: PPUSH
14459: PPUSH
14460: PPUSH
14461: PPUSH
14462: PPUSH
14463: PPUSH
14464: PPUSH
14465: PPUSH
14466: PPUSH
14467: PPUSH
14468: PPUSH
14469: PPUSH
14470: PPUSH
14471: PPUSH
14472: PPUSH
14473: PPUSH
14474: PPUSH
14475: PPUSH
14476: PPUSH
14477: PPUSH
14478: PPUSH
14479: PPUSH
14480: PPUSH
14481: PPUSH
14482: PPUSH
14483: PPUSH
14484: PPUSH
14485: PPUSH
14486: PPUSH
14487: PPUSH
14488: PPUSH
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
14494: PPUSH
14495: PPUSH
14496: PPUSH
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
14501: PPUSH
14502: PPUSH
14503: PPUSH
14504: PPUSH
14505: PPUSH
14506: PPUSH
14507: PPUSH
// result = [ ] ;
14508: LD_ADDR_VAR 0 7
14512: PUSH
14513: EMPTY
14514: ST_TO_ADDR
// temp_list = [ ] ;
14515: LD_ADDR_VAR 0 9
14519: PUSH
14520: EMPTY
14521: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14522: LD_VAR 0 4
14526: PUSH
14527: LD_INT 0
14529: PUSH
14530: LD_INT 1
14532: PUSH
14533: LD_INT 2
14535: PUSH
14536: LD_INT 3
14538: PUSH
14539: LD_INT 4
14541: PUSH
14542: LD_INT 5
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: IN
14553: NOT
14554: PUSH
14555: LD_VAR 0 1
14559: PUSH
14560: LD_INT 0
14562: PUSH
14563: LD_INT 1
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: IN
14570: PUSH
14571: LD_VAR 0 5
14575: PUSH
14576: LD_INT 1
14578: PUSH
14579: LD_INT 2
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: IN
14590: NOT
14591: AND
14592: OR
14593: IFFALSE 14597
// exit ;
14595: GO 32988
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14597: LD_VAR 0 1
14601: PUSH
14602: LD_INT 6
14604: PUSH
14605: LD_INT 7
14607: PUSH
14608: LD_INT 8
14610: PUSH
14611: LD_INT 13
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: LD_INT 15
14619: PUSH
14620: LD_INT 11
14622: PUSH
14623: LD_INT 14
14625: PUSH
14626: LD_INT 10
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: IN
14640: IFFALSE 14650
// btype = b_lab ;
14642: LD_ADDR_VAR 0 1
14646: PUSH
14647: LD_INT 6
14649: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14650: LD_VAR 0 6
14654: PUSH
14655: LD_INT 0
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: LD_INT 2
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: IN
14669: NOT
14670: PUSH
14671: LD_VAR 0 1
14675: PUSH
14676: LD_INT 0
14678: PUSH
14679: LD_INT 1
14681: PUSH
14682: LD_INT 2
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: LD_INT 6
14690: PUSH
14691: LD_INT 36
14693: PUSH
14694: LD_INT 4
14696: PUSH
14697: LD_INT 5
14699: PUSH
14700: LD_INT 31
14702: PUSH
14703: LD_INT 32
14705: PUSH
14706: LD_INT 33
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: IN
14722: NOT
14723: PUSH
14724: LD_VAR 0 6
14728: PUSH
14729: LD_INT 1
14731: EQUAL
14732: AND
14733: OR
14734: PUSH
14735: LD_VAR 0 1
14739: PUSH
14740: LD_INT 2
14742: PUSH
14743: LD_INT 3
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: IN
14750: NOT
14751: PUSH
14752: LD_VAR 0 6
14756: PUSH
14757: LD_INT 2
14759: EQUAL
14760: AND
14761: OR
14762: IFFALSE 14772
// mode = 0 ;
14764: LD_ADDR_VAR 0 6
14768: PUSH
14769: LD_INT 0
14771: ST_TO_ADDR
// case mode of 0 :
14772: LD_VAR 0 6
14776: PUSH
14777: LD_INT 0
14779: DOUBLE
14780: EQUAL
14781: IFTRUE 14785
14783: GO 26238
14785: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14786: LD_ADDR_VAR 0 11
14790: PUSH
14791: LD_INT 0
14793: PUSH
14794: LD_INT 0
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 0
14803: PUSH
14804: LD_INT 1
14806: NEG
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: LD_INT 0
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 1
14824: PUSH
14825: LD_INT 1
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 0
14834: PUSH
14835: LD_INT 1
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 1
14844: NEG
14845: PUSH
14846: LD_INT 0
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 1
14855: NEG
14856: PUSH
14857: LD_INT 1
14859: NEG
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 1
14867: NEG
14868: PUSH
14869: LD_INT 2
14871: NEG
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: LD_INT 0
14879: PUSH
14880: LD_INT 2
14882: NEG
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: PUSH
14891: LD_INT 1
14893: NEG
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 1
14901: PUSH
14902: LD_INT 2
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 0
14911: PUSH
14912: LD_INT 2
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 1
14921: NEG
14922: PUSH
14923: LD_INT 1
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 1
14932: PUSH
14933: LD_INT 3
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 0
14942: PUSH
14943: LD_INT 3
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 1
14952: NEG
14953: PUSH
14954: LD_INT 2
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14979: LD_ADDR_VAR 0 12
14983: PUSH
14984: LD_INT 0
14986: PUSH
14987: LD_INT 0
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 0
14996: PUSH
14997: LD_INT 1
14999: NEG
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: LD_INT 0
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 0
15027: PUSH
15028: LD_INT 1
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 1
15037: NEG
15038: PUSH
15039: LD_INT 0
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 1
15048: NEG
15049: PUSH
15050: LD_INT 1
15052: NEG
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 1
15060: PUSH
15061: LD_INT 1
15063: NEG
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 2
15071: PUSH
15072: LD_INT 0
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: LD_INT 1
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 1
15091: NEG
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 2
15102: NEG
15103: PUSH
15104: LD_INT 0
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 2
15113: NEG
15114: PUSH
15115: LD_INT 1
15117: NEG
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 2
15125: NEG
15126: PUSH
15127: LD_INT 1
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT 3
15136: NEG
15137: PUSH
15138: LD_INT 0
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 3
15147: NEG
15148: PUSH
15149: LD_INT 1
15151: NEG
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15175: LD_ADDR_VAR 0 13
15179: PUSH
15180: LD_INT 0
15182: PUSH
15183: LD_INT 0
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 0
15192: PUSH
15193: LD_INT 1
15195: NEG
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: LD_INT 0
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 0
15223: PUSH
15224: LD_INT 1
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 1
15233: NEG
15234: PUSH
15235: LD_INT 0
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 1
15244: NEG
15245: PUSH
15246: LD_INT 1
15248: NEG
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 1
15256: NEG
15257: PUSH
15258: LD_INT 2
15260: NEG
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 2
15268: PUSH
15269: LD_INT 1
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 2
15278: PUSH
15279: LD_INT 2
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 1
15288: PUSH
15289: LD_INT 2
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 2
15298: NEG
15299: PUSH
15300: LD_INT 1
15302: NEG
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 2
15310: NEG
15311: PUSH
15312: LD_INT 2
15314: NEG
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 2
15322: NEG
15323: PUSH
15324: LD_INT 3
15326: NEG
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 3
15334: NEG
15335: PUSH
15336: LD_INT 2
15338: NEG
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 3
15346: NEG
15347: PUSH
15348: LD_INT 3
15350: NEG
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15374: LD_ADDR_VAR 0 14
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: LD_INT 0
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 0
15391: PUSH
15392: LD_INT 1
15394: NEG
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 1
15402: PUSH
15403: LD_INT 0
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 1
15412: PUSH
15413: LD_INT 1
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 0
15422: PUSH
15423: LD_INT 1
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 1
15432: NEG
15433: PUSH
15434: LD_INT 0
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 1
15443: NEG
15444: PUSH
15445: LD_INT 1
15447: NEG
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 1
15455: NEG
15456: PUSH
15457: LD_INT 2
15459: NEG
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 0
15467: PUSH
15468: LD_INT 2
15470: NEG
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 1
15478: PUSH
15479: LD_INT 1
15481: NEG
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 1
15489: PUSH
15490: LD_INT 2
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 0
15499: PUSH
15500: LD_INT 2
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 1
15509: NEG
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 1
15520: NEG
15521: PUSH
15522: LD_INT 3
15524: NEG
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 0
15532: PUSH
15533: LD_INT 3
15535: NEG
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: LD_INT 2
15546: NEG
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15570: LD_ADDR_VAR 0 15
15574: PUSH
15575: LD_INT 0
15577: PUSH
15578: LD_INT 0
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: LD_INT 0
15587: PUSH
15588: LD_INT 1
15590: NEG
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 1
15598: PUSH
15599: LD_INT 0
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 1
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 0
15618: PUSH
15619: LD_INT 1
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 1
15628: NEG
15629: PUSH
15630: LD_INT 0
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: NEG
15640: PUSH
15641: LD_INT 1
15643: NEG
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: LD_INT 1
15654: NEG
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 2
15662: PUSH
15663: LD_INT 0
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 2
15672: PUSH
15673: LD_INT 1
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 1
15682: NEG
15683: PUSH
15684: LD_INT 1
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 2
15693: NEG
15694: PUSH
15695: LD_INT 0
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 2
15704: NEG
15705: PUSH
15706: LD_INT 1
15708: NEG
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 2
15716: PUSH
15717: LD_INT 1
15719: NEG
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 3
15727: PUSH
15728: LD_INT 0
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 3
15737: PUSH
15738: LD_INT 1
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15763: LD_ADDR_VAR 0 16
15767: PUSH
15768: LD_INT 0
15770: PUSH
15771: LD_INT 0
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 0
15780: PUSH
15781: LD_INT 1
15783: NEG
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: LD_INT 0
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 1
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 0
15811: PUSH
15812: LD_INT 1
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 1
15821: NEG
15822: PUSH
15823: LD_INT 0
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 1
15832: NEG
15833: PUSH
15834: LD_INT 1
15836: NEG
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 1
15844: NEG
15845: PUSH
15846: LD_INT 2
15848: NEG
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 2
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 2
15866: PUSH
15867: LD_INT 2
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 1
15876: PUSH
15877: LD_INT 2
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 2
15886: NEG
15887: PUSH
15888: LD_INT 1
15890: NEG
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 2
15898: NEG
15899: PUSH
15900: LD_INT 2
15902: NEG
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 3
15920: PUSH
15921: LD_INT 3
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 2
15930: PUSH
15931: LD_INT 3
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15956: LD_ADDR_VAR 0 17
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: LD_INT 0
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 0
15973: PUSH
15974: LD_INT 1
15976: NEG
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: LD_INT 0
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 1
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 0
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 1
16014: NEG
16015: PUSH
16016: LD_INT 0
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 1
16025: NEG
16026: PUSH
16027: LD_INT 1
16029: NEG
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 1
16037: NEG
16038: PUSH
16039: LD_INT 2
16041: NEG
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 0
16049: PUSH
16050: LD_INT 2
16052: NEG
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 1
16060: PUSH
16061: LD_INT 1
16063: NEG
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 2
16071: PUSH
16072: LD_INT 0
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 2
16081: PUSH
16082: LD_INT 1
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 2
16091: PUSH
16092: LD_INT 2
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: LD_INT 2
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 0
16111: PUSH
16112: LD_INT 2
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 1
16121: NEG
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 2
16132: NEG
16133: PUSH
16134: LD_INT 0
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 2
16143: NEG
16144: PUSH
16145: LD_INT 1
16147: NEG
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 2
16155: NEG
16156: PUSH
16157: LD_INT 2
16159: NEG
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16186: LD_ADDR_VAR 0 18
16190: PUSH
16191: LD_INT 0
16193: PUSH
16194: LD_INT 0
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: LD_INT 1
16206: NEG
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 1
16214: PUSH
16215: LD_INT 0
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 0
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 1
16244: NEG
16245: PUSH
16246: LD_INT 0
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 1
16255: NEG
16256: PUSH
16257: LD_INT 1
16259: NEG
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: NEG
16268: PUSH
16269: LD_INT 2
16271: NEG
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 0
16279: PUSH
16280: LD_INT 2
16282: NEG
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: LD_INT 1
16293: NEG
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 2
16301: PUSH
16302: LD_INT 0
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 2
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: LD_INT 2
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 1
16331: PUSH
16332: LD_INT 2
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 0
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 1
16351: NEG
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 2
16362: NEG
16363: PUSH
16364: LD_INT 0
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 2
16373: NEG
16374: PUSH
16375: LD_INT 1
16377: NEG
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 2
16385: NEG
16386: PUSH
16387: LD_INT 2
16389: NEG
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16416: LD_ADDR_VAR 0 19
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: LD_INT 0
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 0
16433: PUSH
16434: LD_INT 1
16436: NEG
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 1
16444: PUSH
16445: LD_INT 0
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 0
16464: PUSH
16465: LD_INT 1
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 1
16474: NEG
16475: PUSH
16476: LD_INT 0
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: LD_INT 1
16485: NEG
16486: PUSH
16487: LD_INT 1
16489: NEG
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: LD_INT 2
16501: NEG
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 0
16509: PUSH
16510: LD_INT 2
16512: NEG
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: PUSH
16521: LD_INT 1
16523: NEG
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 2
16531: PUSH
16532: LD_INT 0
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 2
16541: PUSH
16542: LD_INT 1
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 2
16551: PUSH
16552: LD_INT 2
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 1
16561: PUSH
16562: LD_INT 2
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 2
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 1
16581: NEG
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 2
16592: NEG
16593: PUSH
16594: LD_INT 0
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 2
16603: NEG
16604: PUSH
16605: LD_INT 1
16607: NEG
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 2
16615: NEG
16616: PUSH
16617: LD_INT 2
16619: NEG
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16646: LD_ADDR_VAR 0 20
16650: PUSH
16651: LD_INT 0
16653: PUSH
16654: LD_INT 0
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 0
16663: PUSH
16664: LD_INT 1
16666: NEG
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 1
16674: PUSH
16675: LD_INT 0
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: LD_INT 1
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 0
16694: PUSH
16695: LD_INT 1
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 1
16704: NEG
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 1
16715: NEG
16716: PUSH
16717: LD_INT 1
16719: NEG
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 1
16727: NEG
16728: PUSH
16729: LD_INT 2
16731: NEG
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 0
16739: PUSH
16740: LD_INT 2
16742: NEG
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 1
16750: PUSH
16751: LD_INT 1
16753: NEG
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 2
16761: PUSH
16762: LD_INT 0
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 2
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 2
16781: PUSH
16782: LD_INT 2
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: LD_INT 2
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 0
16801: PUSH
16802: LD_INT 2
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 1
16811: NEG
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 2
16822: NEG
16823: PUSH
16824: LD_INT 0
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 2
16833: NEG
16834: PUSH
16835: LD_INT 1
16837: NEG
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 2
16845: NEG
16846: PUSH
16847: LD_INT 2
16849: NEG
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16876: LD_ADDR_VAR 0 21
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: LD_INT 0
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 0
16893: PUSH
16894: LD_INT 1
16896: NEG
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 1
16904: PUSH
16905: LD_INT 0
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 1
16914: PUSH
16915: LD_INT 1
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 0
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 1
16934: NEG
16935: PUSH
16936: LD_INT 0
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 1
16945: NEG
16946: PUSH
16947: LD_INT 1
16949: NEG
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 1
16957: NEG
16958: PUSH
16959: LD_INT 2
16961: NEG
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 0
16969: PUSH
16970: LD_INT 2
16972: NEG
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: LD_INT 0
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 2
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 2
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 1
17021: PUSH
17022: LD_INT 2
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 0
17031: PUSH
17032: LD_INT 2
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 1
17041: NEG
17042: PUSH
17043: LD_INT 1
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 2
17052: NEG
17053: PUSH
17054: LD_INT 0
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 2
17063: NEG
17064: PUSH
17065: LD_INT 1
17067: NEG
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 2
17075: NEG
17076: PUSH
17077: LD_INT 2
17079: NEG
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17106: LD_ADDR_VAR 0 22
17110: PUSH
17111: LD_INT 0
17113: PUSH
17114: LD_INT 0
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: LD_INT 1
17126: NEG
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 1
17134: PUSH
17135: LD_INT 0
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 1
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 0
17154: PUSH
17155: LD_INT 1
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 1
17164: NEG
17165: PUSH
17166: LD_INT 0
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 1
17175: NEG
17176: PUSH
17177: LD_INT 1
17179: NEG
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 1
17187: NEG
17188: PUSH
17189: LD_INT 2
17191: NEG
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 2
17202: NEG
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 1
17210: PUSH
17211: LD_INT 1
17213: NEG
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 2
17231: PUSH
17232: LD_INT 1
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 2
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 1
17251: PUSH
17252: LD_INT 2
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 0
17261: PUSH
17262: LD_INT 2
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 1
17271: NEG
17272: PUSH
17273: LD_INT 1
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 2
17282: NEG
17283: PUSH
17284: LD_INT 0
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 2
17293: NEG
17294: PUSH
17295: LD_INT 1
17297: NEG
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 2
17305: NEG
17306: PUSH
17307: LD_INT 2
17309: NEG
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17336: LD_ADDR_VAR 0 23
17340: PUSH
17341: LD_INT 0
17343: PUSH
17344: LD_INT 0
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 0
17353: PUSH
17354: LD_INT 1
17356: NEG
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 0
17384: PUSH
17385: LD_INT 1
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 1
17394: NEG
17395: PUSH
17396: LD_INT 0
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 1
17405: NEG
17406: PUSH
17407: LD_INT 1
17409: NEG
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: LD_INT 2
17421: NEG
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 0
17429: PUSH
17430: LD_INT 2
17432: NEG
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 1
17440: PUSH
17441: LD_INT 1
17443: NEG
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 2
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 2
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 2
17471: PUSH
17472: LD_INT 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: LD_INT 2
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 0
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 1
17501: NEG
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 2
17512: NEG
17513: PUSH
17514: LD_INT 0
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 2
17523: NEG
17524: PUSH
17525: LD_INT 1
17527: NEG
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 2
17535: NEG
17536: PUSH
17537: LD_INT 2
17539: NEG
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 2
17547: NEG
17548: PUSH
17549: LD_INT 3
17551: NEG
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 1
17559: NEG
17560: PUSH
17561: LD_INT 3
17563: NEG
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 1
17571: PUSH
17572: LD_INT 2
17574: NEG
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: LD_INT 1
17585: NEG
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17616: LD_ADDR_VAR 0 24
17620: PUSH
17621: LD_INT 0
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 0
17633: PUSH
17634: LD_INT 1
17636: NEG
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: LD_INT 0
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 1
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: NEG
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 1
17685: NEG
17686: PUSH
17687: LD_INT 1
17689: NEG
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 1
17697: NEG
17698: PUSH
17699: LD_INT 2
17701: NEG
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 2
17712: NEG
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 1
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 2
17731: PUSH
17732: LD_INT 0
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 2
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 2
17751: PUSH
17752: LD_INT 2
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: LD_INT 2
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: LD_INT 2
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: LD_INT 1
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 2
17792: NEG
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 2
17803: NEG
17804: PUSH
17805: LD_INT 1
17807: NEG
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 2
17815: NEG
17816: PUSH
17817: LD_INT 2
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: LD_INT 2
17830: NEG
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 2
17838: PUSH
17839: LD_INT 1
17841: NEG
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 3
17849: PUSH
17850: LD_INT 1
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 3
17859: PUSH
17860: LD_INT 2
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17892: LD_ADDR_VAR 0 25
17896: PUSH
17897: LD_INT 0
17899: PUSH
17900: LD_INT 0
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 1
17950: NEG
17951: PUSH
17952: LD_INT 0
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 1
17961: NEG
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: NEG
17974: PUSH
17975: LD_INT 2
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: LD_INT 2
17988: NEG
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: LD_INT 1
17999: NEG
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 2
18007: PUSH
18008: LD_INT 0
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 2
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: LD_INT 2
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: LD_INT 2
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 1
18057: NEG
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 2
18068: NEG
18069: PUSH
18070: LD_INT 0
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 2
18079: NEG
18080: PUSH
18081: LD_INT 1
18083: NEG
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 2
18091: NEG
18092: PUSH
18093: LD_INT 2
18095: NEG
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 3
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 2
18123: PUSH
18124: LD_INT 3
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: LD_INT 3
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18166: LD_ADDR_VAR 0 26
18170: PUSH
18171: LD_INT 0
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: LD_INT 1
18186: NEG
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 1
18194: PUSH
18195: LD_INT 0
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 1
18224: NEG
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 1
18235: NEG
18236: PUSH
18237: LD_INT 1
18239: NEG
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 1
18247: NEG
18248: PUSH
18249: LD_INT 2
18251: NEG
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: LD_INT 2
18262: NEG
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 2
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 0
18321: PUSH
18322: LD_INT 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 2
18342: NEG
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 2
18353: NEG
18354: PUSH
18355: LD_INT 1
18357: NEG
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 2
18365: NEG
18366: PUSH
18367: LD_INT 2
18369: NEG
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 2
18377: PUSH
18378: LD_INT 3
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: LD_INT 3
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 1
18397: NEG
18398: PUSH
18399: LD_INT 2
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 2
18408: NEG
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18442: LD_ADDR_VAR 0 27
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 1
18500: NEG
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: NEG
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 1
18523: NEG
18524: PUSH
18525: LD_INT 2
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: LD_INT 2
18538: NEG
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: LD_INT 1
18549: NEG
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: LD_INT 0
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: LD_INT 2
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 2
18618: NEG
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 2
18629: NEG
18630: PUSH
18631: LD_INT 1
18633: NEG
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: NEG
18642: PUSH
18643: LD_INT 2
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 1
18653: NEG
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 2
18664: NEG
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 3
18675: NEG
18676: PUSH
18677: LD_INT 1
18679: NEG
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 3
18687: NEG
18688: PUSH
18689: LD_INT 2
18691: NEG
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18722: LD_ADDR_VAR 0 28
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: LD_INT 0
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 0
18739: PUSH
18740: LD_INT 1
18742: NEG
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 1
18780: NEG
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 1
18791: NEG
18792: PUSH
18793: LD_INT 1
18795: NEG
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: NEG
18804: PUSH
18805: LD_INT 2
18807: NEG
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: LD_INT 2
18818: NEG
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 2
18898: NEG
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 2
18909: NEG
18910: PUSH
18911: LD_INT 1
18913: NEG
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 2
18921: NEG
18922: PUSH
18923: LD_INT 2
18925: NEG
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 2
18933: NEG
18934: PUSH
18935: LD_INT 3
18937: NEG
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: LD_INT 3
18949: NEG
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 3
18957: NEG
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 3
18969: NEG
18970: PUSH
18971: LD_INT 2
18973: NEG
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19004: LD_ADDR_VAR 0 29
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: LD_INT 0
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: LD_INT 1
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: LD_INT 0
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 0
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 1
19062: NEG
19063: PUSH
19064: LD_INT 0
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: NEG
19074: PUSH
19075: LD_INT 1
19077: NEG
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: LD_INT 2
19089: NEG
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: LD_INT 2
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 2
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: LD_INT 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: LD_INT 2
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 2
19170: NEG
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: NEG
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 2
19194: NEG
19195: PUSH
19196: LD_INT 3
19198: NEG
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 2
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 3
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: LD_INT 3
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 3
19248: NEG
19249: PUSH
19250: LD_INT 2
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19283: LD_ADDR_VAR 0 30
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 0
19300: PUSH
19301: LD_INT 1
19303: NEG
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: LD_INT 0
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 1
19341: NEG
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: LD_INT 1
19356: NEG
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 1
19364: NEG
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: LD_INT 2
19379: NEG
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: LD_INT 0
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 1
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 2
19449: NEG
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: LD_INT 3
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 2
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 3
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: LD_INT 3
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: NEG
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 3
19526: NEG
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19561: LD_ADDR_VAR 0 31
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: LD_INT 1
19581: NEG
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: LD_INT 1
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: NEG
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 1
19630: NEG
19631: PUSH
19632: LD_INT 1
19634: NEG
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 1
19642: NEG
19643: PUSH
19644: LD_INT 2
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: LD_INT 1
19657: NEG
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 0
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 2
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 1
19715: NEG
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: LD_INT 1
19730: NEG
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: NEG
19739: PUSH
19740: LD_INT 2
19742: NEG
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 2
19750: NEG
19751: PUSH
19752: LD_INT 3
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 2
19762: PUSH
19763: LD_INT 1
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 3
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: PUSH
19784: LD_INT 3
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 1
19793: NEG
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 3
19804: NEG
19805: PUSH
19806: LD_INT 2
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19839: LD_ADDR_VAR 0 32
19843: PUSH
19844: LD_INT 0
19846: PUSH
19847: LD_INT 0
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: LD_INT 1
19859: NEG
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 1
19897: NEG
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: LD_INT 2
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 1
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 1
19994: NEG
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 2
20005: NEG
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 2
20016: NEG
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: LD_INT 3
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: LD_INT 2
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 3
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 3
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 2
20071: NEG
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 3
20082: NEG
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20117: LD_ADDR_VAR 0 33
20121: PUSH
20122: LD_INT 0
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: NEG
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 1
20186: NEG
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: NEG
20199: PUSH
20200: LD_INT 2
20202: NEG
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 1
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 2
20221: PUSH
20222: LD_INT 0
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 0
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 1
20261: NEG
20262: PUSH
20263: LD_INT 1
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 2
20272: NEG
20273: PUSH
20274: LD_INT 0
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: NEG
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 2
20295: NEG
20296: PUSH
20297: LD_INT 2
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 2
20307: NEG
20308: PUSH
20309: LD_INT 3
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 3
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: LD_INT 3
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 3
20361: NEG
20362: PUSH
20363: LD_INT 2
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20396: LD_ADDR_VAR 0 34
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 1
20416: NEG
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 0
20444: PUSH
20445: LD_INT 1
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: LD_INT 1
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 1
20477: NEG
20478: PUSH
20479: LD_INT 2
20481: NEG
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 0
20489: PUSH
20490: LD_INT 2
20492: NEG
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 1
20500: PUSH
20501: LD_INT 1
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 2
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: LD_INT 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 1
20541: NEG
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 2
20552: NEG
20553: PUSH
20554: LD_INT 0
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: NEG
20564: PUSH
20565: LD_INT 1
20567: NEG
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 2
20575: NEG
20576: PUSH
20577: LD_INT 2
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: LD_INT 3
20591: NEG
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: LD_INT 2
20602: NEG
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 3
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: LD_INT 3
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 2
20630: NEG
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 3
20641: NEG
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20676: LD_ADDR_VAR 0 35
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: LD_INT 1
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 0
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: NEG
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PUSH
20747: LD_INT 1
20749: NEG
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 2
20757: PUSH
20758: LD_INT 1
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 2
20767: NEG
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20788: LD_ADDR_VAR 0 36
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: LD_INT 0
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: LD_INT 1
20808: NEG
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: LD_INT 0
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: LD_INT 1
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 1
20846: NEG
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: NEG
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: LD_INT 2
20873: NEG
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20900: LD_ADDR_VAR 0 37
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 0
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: LD_INT 0
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 1
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: NEG
20970: PUSH
20971: LD_INT 1
20973: NEG
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: LD_INT 1
20984: NEG
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 1
20992: NEG
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21012: LD_ADDR_VAR 0 38
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: LD_INT 1
21085: NEG
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: NEG
21104: PUSH
21105: LD_INT 1
21107: NEG
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21124: LD_ADDR_VAR 0 39
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 1
21182: NEG
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: LD_INT 1
21197: NEG
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: LD_INT 2
21209: NEG
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21236: LD_ADDR_VAR 0 40
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: LD_INT 0
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: LD_INT 1
21256: NEG
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: LD_INT 1
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 1
21294: NEG
21295: PUSH
21296: LD_INT 0
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 1
21305: NEG
21306: PUSH
21307: LD_INT 1
21309: NEG
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: NEG
21329: PUSH
21330: LD_INT 1
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21348: LD_ADDR_VAR 0 41
21352: PUSH
21353: LD_INT 0
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 0
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 1
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 0
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 1
21406: NEG
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: LD_INT 2
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: LD_INT 1
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 2
21503: NEG
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 2
21514: NEG
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 2
21526: NEG
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: NEG
21539: PUSH
21540: LD_INT 3
21542: NEG
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: LD_INT 1
21553: NEG
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 3
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 3
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 3
21591: PUSH
21592: LD_INT 3
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: LD_INT 3
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 2
21611: NEG
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 3
21622: NEG
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 3
21633: NEG
21634: PUSH
21635: LD_INT 1
21637: NEG
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 3
21645: NEG
21646: PUSH
21647: LD_INT 2
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 3
21657: NEG
21658: PUSH
21659: LD_INT 3
21661: NEG
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21698: LD_ADDR_VAR 0 42
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: LD_INT 2
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 1
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 0
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: NEG
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 2
21876: NEG
21877: PUSH
21878: LD_INT 2
21880: NEG
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 2
21888: NEG
21889: PUSH
21890: LD_INT 3
21892: NEG
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: NEG
21901: PUSH
21902: LD_INT 3
21904: NEG
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: LD_INT 3
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 1
21923: PUSH
21924: LD_INT 2
21926: NEG
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 3
21944: PUSH
21945: LD_INT 3
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 2
21954: PUSH
21955: LD_INT 3
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: LD_INT 3
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 0
21974: PUSH
21975: LD_INT 3
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: LD_INT 2
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 3
21995: NEG
21996: PUSH
21997: LD_INT 2
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 3
22007: NEG
22008: PUSH
22009: LD_INT 3
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22048: LD_ADDR_VAR 0 43
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: NEG
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: LD_INT 2
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 0
22141: PUSH
22142: LD_INT 2
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: LD_INT 0
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 1
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 1
22203: NEG
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 2
22214: NEG
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: NEG
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: LD_INT 3
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: LD_INT 3
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 2
22263: NEG
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 2
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 3
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 3
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: LD_INT 3
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 3
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: LD_INT 2
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 2
22333: NEG
22334: PUSH
22335: LD_INT 1
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 3
22344: NEG
22345: PUSH
22346: LD_INT 0
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 3
22355: NEG
22356: PUSH
22357: LD_INT 1
22359: NEG
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22396: LD_ADDR_VAR 0 44
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: NEG
22478: PUSH
22479: LD_INT 2
22481: NEG
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: LD_INT 0
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 2
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 2
22520: PUSH
22521: LD_INT 2
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 2
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 2
22551: NEG
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 2
22562: NEG
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 2
22574: NEG
22575: PUSH
22576: LD_INT 2
22578: NEG
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 2
22586: NEG
22587: PUSH
22588: LD_INT 3
22590: NEG
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 3
22609: PUSH
22610: LD_INT 0
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 3
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 3
22629: PUSH
22630: LD_INT 2
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 3
22639: PUSH
22640: LD_INT 3
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: PUSH
22650: LD_INT 3
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 3
22670: NEG
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 3
22681: NEG
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 3
22693: NEG
22694: PUSH
22695: LD_INT 2
22697: NEG
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 3
22705: NEG
22706: PUSH
22707: LD_INT 3
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22746: LD_ADDR_VAR 0 45
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: LD_INT 1
22766: NEG
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 1
22804: NEG
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: NEG
22816: PUSH
22817: LD_INT 1
22819: NEG
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: LD_INT 2
22831: NEG
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: LD_INT 2
22842: NEG
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: LD_INT 1
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 2
22912: NEG
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 2
22924: NEG
22925: PUSH
22926: LD_INT 2
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 2
22936: NEG
22937: PUSH
22938: LD_INT 3
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: NEG
22949: PUSH
22950: LD_INT 3
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: LD_INT 3
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: LD_INT 2
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 3
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 3
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: LD_INT 3
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 3
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 0
23022: PUSH
23023: LD_INT 3
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 3
23043: NEG
23044: PUSH
23045: LD_INT 2
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 3
23055: NEG
23056: PUSH
23057: LD_INT 3
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23096: LD_ADDR_VAR 0 46
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: LD_INT 1
23116: NEG
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 1
23124: PUSH
23125: LD_INT 0
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 1
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 0
23144: PUSH
23145: LD_INT 1
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: NEG
23155: PUSH
23156: LD_INT 0
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 1
23177: NEG
23178: PUSH
23179: LD_INT 2
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: LD_INT 2
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 2
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 2
23221: PUSH
23222: LD_INT 1
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: LD_INT 2
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 0
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 2
23262: NEG
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: NEG
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: NEG
23286: PUSH
23287: LD_INT 3
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: LD_INT 3
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: LD_INT 2
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 3
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 3
23340: PUSH
23341: LD_INT 1
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 3
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 3
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 2
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 3
23392: NEG
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 3
23403: NEG
23404: PUSH
23405: LD_INT 1
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23444: LD_ADDR_VAR 0 47
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: LD_INT 0
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: LD_INT 1
23517: NEG
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 1
23525: NEG
23526: PUSH
23527: LD_INT 2
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 1
23548: PUSH
23549: LD_INT 1
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: LD_INT 1
23563: NEG
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 2
23571: NEG
23572: PUSH
23573: LD_INT 2
23575: NEG
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23595: LD_ADDR_VAR 0 48
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: LD_INT 0
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: LD_INT 1
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: NEG
23677: PUSH
23678: LD_INT 2
23680: NEG
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 0
23688: PUSH
23689: LD_INT 2
23691: NEG
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23742: LD_ADDR_VAR 0 49
23746: PUSH
23747: LD_INT 0
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 2
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: LD_INT 2
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23886: LD_ADDR_VAR 0 50
23890: PUSH
23891: LD_INT 0
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 2
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 2
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: NEG
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24030: LD_ADDR_VAR 0 51
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: LD_INT 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 2
24142: NEG
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 2
24153: NEG
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24177: LD_ADDR_VAR 0 52
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 2
24281: NEG
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: NEG
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 2
24304: NEG
24305: PUSH
24306: LD_INT 2
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24328: LD_ADDR_VAR 0 53
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: NEG
24410: PUSH
24411: LD_INT 2
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 2
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 2
24443: PUSH
24444: LD_INT 0
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 2
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: LD_INT 2
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: NEG
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 2
24504: NEG
24505: PUSH
24506: LD_INT 0
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 2
24515: NEG
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: NEG
24528: PUSH
24529: LD_INT 2
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24558: LD_ADDR_VAR 0 54
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: LD_INT 1
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 1
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 1
24627: NEG
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: LD_INT 2
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: LD_INT 2
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 1
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 2
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 2
24734: NEG
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: NEG
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 2
24757: NEG
24758: PUSH
24759: LD_INT 2
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24788: LD_ADDR_VAR 0 55
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 0
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 1
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: NEG
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: NEG
24858: PUSH
24859: LD_INT 1
24861: NEG
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: LD_INT 2
24873: NEG
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 2
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: LD_INT 1
24895: NEG
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: LD_INT 2
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: LD_INT 2
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 1
24953: NEG
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 2
24964: NEG
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25018: LD_ADDR_VAR 0 56
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 0
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: LD_INT 1
25091: NEG
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 2
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: LD_INT 2
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: LD_INT 2
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: LD_INT 2
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: LD_INT 2
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: NEG
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 2
25217: NEG
25218: PUSH
25219: LD_INT 2
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25248: LD_ADDR_VAR 0 57
25252: PUSH
25253: LD_INT 0
25255: PUSH
25256: LD_INT 0
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: LD_INT 1
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 1
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 2
25333: NEG
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 2
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 2
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 2
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: LD_INT 2
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: LD_INT 2
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 1
25413: NEG
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: NEG
25425: PUSH
25426: LD_INT 0
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: NEG
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: NEG
25448: PUSH
25449: LD_INT 2
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25478: LD_ADDR_VAR 0 58
25482: PUSH
25483: LD_INT 0
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: LD_INT 1
25551: NEG
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: LD_INT 2
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: LD_INT 2
25574: NEG
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 2
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 2
25677: NEG
25678: PUSH
25679: LD_INT 2
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25708: LD_ADDR_VAR 0 59
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: LD_INT 0
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 0
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: NEG
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: PUSH
25779: LD_INT 1
25781: NEG
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25796: LD_ADDR_VAR 0 60
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 0
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: NEG
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25884: LD_ADDR_VAR 0 61
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25972: LD_ADDR_VAR 0 62
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 1
25992: NEG
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: NEG
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26060: LD_ADDR_VAR 0 63
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 0
26077: PUSH
26078: LD_INT 1
26080: NEG
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 0
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: NEG
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26148: LD_ADDR_VAR 0 64
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: LD_INT 1
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: ST_TO_ADDR
// end ; 1 :
26236: GO 32133
26238: LD_INT 1
26240: DOUBLE
26241: EQUAL
26242: IFTRUE 26246
26244: GO 28869
26246: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26247: LD_ADDR_VAR 0 11
26251: PUSH
26252: LD_INT 1
26254: NEG
26255: PUSH
26256: LD_INT 3
26258: NEG
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 3
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: LD_INT 2
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: LIST
26290: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26291: LD_ADDR_VAR 0 12
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 3
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 3
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: LIST
26331: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26332: LD_ADDR_VAR 0 13
26336: PUSH
26337: LD_INT 3
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: LD_INT 3
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 2
26359: PUSH
26360: LD_INT 3
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: LIST
26371: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26372: LD_ADDR_VAR 0 14
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: LD_INT 3
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 3
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: LIST
26412: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26413: LD_ADDR_VAR 0 15
26417: PUSH
26418: LD_INT 2
26420: NEG
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 3
26431: NEG
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 3
26442: NEG
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: LIST
26456: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26457: LD_ADDR_VAR 0 16
26461: PUSH
26462: LD_INT 2
26464: NEG
26465: PUSH
26466: LD_INT 3
26468: NEG
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 3
26476: NEG
26477: PUSH
26478: LD_INT 2
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 3
26488: NEG
26489: PUSH
26490: LD_INT 3
26492: NEG
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: LIST
26502: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26503: LD_ADDR_VAR 0 17
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: LD_INT 3
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 3
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: LIST
26546: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26547: LD_ADDR_VAR 0 18
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 3
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 3
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26588: LD_ADDR_VAR 0 19
26592: PUSH
26593: LD_INT 3
26595: PUSH
26596: LD_INT 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 3
26605: PUSH
26606: LD_INT 3
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: LD_INT 3
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: LIST
26627: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26628: LD_ADDR_VAR 0 20
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: LD_INT 3
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 3
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: LIST
26668: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26669: LD_ADDR_VAR 0 21
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 3
26687: NEG
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 3
26698: NEG
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26713: LD_ADDR_VAR 0 22
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: LD_INT 3
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 3
26732: NEG
26733: PUSH
26734: LD_INT 2
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 3
26744: NEG
26745: PUSH
26746: LD_INT 3
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: LIST
26758: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26759: LD_ADDR_VAR 0 23
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 3
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: LD_INT 4
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: LD_INT 3
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: LIST
26802: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26803: LD_ADDR_VAR 0 24
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 3
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 4
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: LIST
26843: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26844: LD_ADDR_VAR 0 25
26848: PUSH
26849: LD_INT 3
26851: PUSH
26852: LD_INT 3
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 4
26861: PUSH
26862: LD_INT 3
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: LD_INT 4
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26884: LD_ADDR_VAR 0 26
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 3
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: LD_INT 4
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 3
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26925: LD_ADDR_VAR 0 27
26929: PUSH
26930: LD_INT 3
26932: NEG
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 3
26943: NEG
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 4
26954: NEG
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: LIST
26968: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26969: LD_ADDR_VAR 0 28
26973: PUSH
26974: LD_INT 3
26976: NEG
26977: PUSH
26978: LD_INT 3
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 3
26988: NEG
26989: PUSH
26990: LD_INT 4
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 4
27000: NEG
27001: PUSH
27002: LD_INT 3
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27015: LD_ADDR_VAR 0 29
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: LD_INT 3
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: LD_INT 3
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: LD_INT 4
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: LD_INT 4
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: LD_INT 3
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: LD_INT 5
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 5
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: LD_INT 4
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: LD_INT 6
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: LD_INT 6
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 5
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27170: LD_ADDR_VAR 0 30
27174: PUSH
27175: LD_INT 2
27177: PUSH
27178: LD_INT 1
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 3
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 3
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 3
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 4
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 4
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 4
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 5
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 5
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 5
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 6
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 6
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27313: LD_ADDR_VAR 0 31
27317: PUSH
27318: LD_INT 3
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 3
27330: PUSH
27331: LD_INT 3
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: LD_INT 3
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 4
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 4
27360: PUSH
27361: LD_INT 4
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 3
27370: PUSH
27371: LD_INT 4
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 5
27380: PUSH
27381: LD_INT 4
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 5
27390: PUSH
27391: LD_INT 5
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 4
27400: PUSH
27401: LD_INT 5
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 6
27410: PUSH
27411: LD_INT 5
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 6
27420: PUSH
27421: LD_INT 6
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 5
27430: PUSH
27431: LD_INT 6
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27452: LD_ADDR_VAR 0 32
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 3
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 3
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 4
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: LD_INT 4
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: LD_INT 3
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: LD_INT 5
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: LD_INT 5
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: LD_INT 4
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: LD_INT 6
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: LD_INT 6
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: LD_INT 5
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27595: LD_ADDR_VAR 0 33
27599: PUSH
27600: LD_INT 2
27602: NEG
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 3
27613: NEG
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 3
27624: NEG
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 3
27636: NEG
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 4
27647: NEG
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 4
27658: NEG
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 4
27670: NEG
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 5
27681: NEG
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 5
27692: NEG
27693: PUSH
27694: LD_INT 1
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 5
27704: NEG
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 6
27715: NEG
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 6
27726: NEG
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27750: LD_ADDR_VAR 0 34
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: LD_INT 3
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 3
27769: NEG
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 3
27781: NEG
27782: PUSH
27783: LD_INT 3
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 3
27793: NEG
27794: PUSH
27795: LD_INT 4
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 4
27805: NEG
27806: PUSH
27807: LD_INT 3
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 4
27817: NEG
27818: PUSH
27819: LD_INT 4
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 4
27829: NEG
27830: PUSH
27831: LD_INT 5
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 5
27841: NEG
27842: PUSH
27843: LD_INT 4
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 5
27853: NEG
27854: PUSH
27855: LD_INT 5
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 5
27865: NEG
27866: PUSH
27867: LD_INT 6
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 6
27877: NEG
27878: PUSH
27879: LD_INT 5
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 6
27889: NEG
27890: PUSH
27891: LD_INT 6
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27913: LD_ADDR_VAR 0 41
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: LD_INT 3
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: LD_INT 2
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27957: LD_ADDR_VAR 0 42
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27998: LD_ADDR_VAR 0 43
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 3
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 3
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28038: LD_ADDR_VAR 0 44
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: LD_INT 3
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28079: LD_ADDR_VAR 0 45
28083: PUSH
28084: LD_INT 2
28086: NEG
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 2
28097: NEG
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 3
28108: NEG
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28123: LD_ADDR_VAR 0 46
28127: PUSH
28128: LD_INT 2
28130: NEG
28131: PUSH
28132: LD_INT 2
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 2
28142: NEG
28143: PUSH
28144: LD_INT 3
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 3
28154: NEG
28155: PUSH
28156: LD_INT 2
28158: NEG
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: LIST
28168: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28169: LD_ADDR_VAR 0 47
28173: PUSH
28174: LD_INT 2
28176: NEG
28177: PUSH
28178: LD_INT 3
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: LD_INT 3
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28202: LD_ADDR_VAR 0 48
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 2
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28233: LD_ADDR_VAR 0 49
28237: PUSH
28238: LD_INT 3
28240: PUSH
28241: LD_INT 1
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28262: LD_ADDR_VAR 0 50
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: LD_INT 3
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 3
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28291: LD_ADDR_VAR 0 51
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 2
28309: NEG
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28322: LD_ADDR_VAR 0 52
28326: PUSH
28327: LD_INT 3
28329: NEG
28330: PUSH
28331: LD_INT 1
28333: NEG
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 3
28341: NEG
28342: PUSH
28343: LD_INT 2
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28355: LD_ADDR_VAR 0 53
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: LD_INT 3
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 0
28374: PUSH
28375: LD_INT 3
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: LD_INT 2
28388: NEG
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28399: LD_ADDR_VAR 0 54
28403: PUSH
28404: LD_INT 2
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 3
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 3
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28440: LD_ADDR_VAR 0 55
28444: PUSH
28445: LD_INT 3
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 3
28457: PUSH
28458: LD_INT 3
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: LD_INT 3
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: LIST
28479: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28480: LD_ADDR_VAR 0 56
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: LD_INT 3
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: LD_INT 3
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28521: LD_ADDR_VAR 0 57
28525: PUSH
28526: LD_INT 2
28528: NEG
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 3
28539: NEG
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 3
28550: NEG
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28565: LD_ADDR_VAR 0 58
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: LD_INT 3
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 3
28584: NEG
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 3
28596: NEG
28597: PUSH
28598: LD_INT 3
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28611: LD_ADDR_VAR 0 59
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: LD_INT 2
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 2
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: LIST
28654: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28655: LD_ADDR_VAR 0 60
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: LD_INT 1
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28696: LD_ADDR_VAR 0 61
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: LD_INT 2
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: LIST
28735: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28736: LD_ADDR_VAR 0 62
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28777: LD_ADDR_VAR 0 63
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 2
28795: NEG
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 2
28806: NEG
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28821: LD_ADDR_VAR 0 64
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: LD_INT 1
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: LD_INT 2
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: LIST
28866: ST_TO_ADDR
// end ; 2 :
28867: GO 32133
28869: LD_INT 2
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 32132
28877: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28878: LD_ADDR_VAR 0 29
28882: PUSH
28883: LD_INT 4
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 4
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 5
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 5
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 4
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 3
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 3
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 3
28957: PUSH
28958: LD_INT 2
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 5
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: LD_INT 3
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 3
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 4
28998: PUSH
28999: LD_INT 3
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 4
29008: PUSH
29009: LD_INT 4
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: LD_INT 4
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 2
29028: PUSH
29029: LD_INT 3
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 2
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 4
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: LD_INT 4
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: LD_INT 4
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 0
29078: PUSH
29079: LD_INT 3
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 4
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 5
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: LD_INT 5
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: LD_INT 4
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: NEG
29130: PUSH
29131: LD_INT 3
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: LD_INT 5
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 2
29150: NEG
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: NEG
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 3
29172: NEG
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 2
29184: NEG
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 2
29195: NEG
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 3
29206: NEG
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 4
29217: NEG
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 4
29228: NEG
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 4
29240: NEG
29241: PUSH
29242: LD_INT 2
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 2
29252: NEG
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 4
29263: NEG
29264: PUSH
29265: LD_INT 4
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 4
29275: NEG
29276: PUSH
29277: LD_INT 5
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 3
29287: NEG
29288: PUSH
29289: LD_INT 4
29291: NEG
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: LD_INT 3
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 4
29311: NEG
29312: PUSH
29313: LD_INT 3
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 5
29323: NEG
29324: PUSH
29325: LD_INT 4
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 5
29335: NEG
29336: PUSH
29337: LD_INT 5
29339: NEG
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 3
29347: NEG
29348: PUSH
29349: LD_INT 5
29351: NEG
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 5
29359: NEG
29360: PUSH
29361: LD_INT 3
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29416: LD_ADDR_VAR 0 30
29420: PUSH
29421: LD_INT 4
29423: PUSH
29424: LD_INT 4
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 4
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 5
29443: PUSH
29444: LD_INT 4
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 5
29453: PUSH
29454: LD_INT 5
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 4
29463: PUSH
29464: LD_INT 5
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 3
29473: PUSH
29474: LD_INT 4
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 3
29483: PUSH
29484: LD_INT 3
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 5
29493: PUSH
29494: LD_INT 3
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 3
29503: PUSH
29504: LD_INT 5
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: LD_INT 3
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 4
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: LD_INT 4
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: LD_INT 3
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: LD_INT 2
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: LD_INT 4
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 2
29595: NEG
29596: PUSH
29597: LD_INT 2
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 4
29606: NEG
29607: PUSH
29608: LD_INT 0
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 4
29617: NEG
29618: PUSH
29619: LD_INT 1
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 3
29629: NEG
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 3
29640: NEG
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 4
29651: NEG
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 5
29662: NEG
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 5
29673: NEG
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 5
29685: NEG
29686: PUSH
29687: LD_INT 2
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 3
29697: NEG
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 3
29708: NEG
29709: PUSH
29710: LD_INT 3
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 3
29720: NEG
29721: PUSH
29722: LD_INT 4
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: LD_INT 3
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 2
29744: NEG
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 3
29756: NEG
29757: PUSH
29758: LD_INT 2
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 4
29768: NEG
29769: PUSH
29770: LD_INT 3
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 4
29780: NEG
29781: PUSH
29782: LD_INT 4
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 2
29792: NEG
29793: PUSH
29794: LD_INT 4
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 4
29804: NEG
29805: PUSH
29806: LD_INT 2
29808: NEG
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: LD_INT 4
29819: NEG
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: LD_INT 5
29830: NEG
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: LD_INT 4
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 3
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: LD_INT 4
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: LD_INT 5
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 2
29895: PUSH
29896: LD_INT 3
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 2
29906: NEG
29907: PUSH
29908: LD_INT 5
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29963: LD_ADDR_VAR 0 31
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: LD_INT 4
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 3
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: LD_INT 4
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 5
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 5
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 2
30042: PUSH
30043: LD_INT 5
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 2
30052: NEG
30053: PUSH
30054: LD_INT 3
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 3
30063: NEG
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 3
30074: NEG
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 2
30097: NEG
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 3
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 4
30119: NEG
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 4
30130: NEG
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 4
30142: NEG
30143: PUSH
30144: LD_INT 2
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 2
30154: NEG
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 4
30165: NEG
30166: PUSH
30167: LD_INT 4
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 4
30177: NEG
30178: PUSH
30179: LD_INT 5
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 3
30189: NEG
30190: PUSH
30191: LD_INT 4
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: NEG
30202: PUSH
30203: LD_INT 3
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 4
30213: NEG
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 5
30225: NEG
30226: PUSH
30227: LD_INT 4
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 5
30237: NEG
30238: PUSH
30239: LD_INT 5
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 3
30249: NEG
30250: PUSH
30251: LD_INT 5
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 5
30261: NEG
30262: PUSH
30263: LD_INT 3
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 3
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: LD_INT 4
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 3
30298: NEG
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 1
30306: PUSH
30307: LD_INT 2
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: NEG
30329: PUSH
30330: LD_INT 3
30332: NEG
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 1
30340: NEG
30341: PUSH
30342: LD_INT 4
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 2
30352: PUSH
30353: LD_INT 2
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: NEG
30364: PUSH
30365: LD_INT 4
30367: NEG
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 4
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 4
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 5
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 5
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 4
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 3
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: LD_INT 2
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 5
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30513: LD_ADDR_VAR 0 32
30517: PUSH
30518: LD_INT 4
30520: NEG
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 4
30531: NEG
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 3
30543: NEG
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 3
30554: NEG
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 4
30565: NEG
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 5
30576: NEG
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 5
30587: NEG
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 5
30599: NEG
30600: PUSH
30601: LD_INT 2
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 3
30611: NEG
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: NEG
30623: PUSH
30624: LD_INT 3
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 3
30634: NEG
30635: PUSH
30636: LD_INT 4
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: LD_INT 3
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: NEG
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 3
30670: NEG
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 4
30682: NEG
30683: PUSH
30684: LD_INT 3
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 4
30694: NEG
30695: PUSH
30696: LD_INT 4
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: NEG
30707: PUSH
30708: LD_INT 4
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 4
30718: NEG
30719: PUSH
30720: LD_INT 2
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 4
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: LD_INT 5
30744: NEG
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 4
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: LD_INT 3
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: LD_INT 3
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 1
30785: NEG
30786: PUSH
30787: LD_INT 4
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: LD_INT 5
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 2
30809: PUSH
30810: LD_INT 3
30812: NEG
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: NEG
30821: PUSH
30822: LD_INT 5
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 3
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 4
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 4
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 3
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 4
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 4
30925: PUSH
30926: LD_INT 4
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 4
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 5
30945: PUSH
30946: LD_INT 4
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 5
30955: PUSH
30956: LD_INT 5
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 4
30965: PUSH
30966: LD_INT 5
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 3
30975: PUSH
30976: LD_INT 4
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 5
30995: PUSH
30996: LD_INT 3
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 3
31005: PUSH
31006: LD_INT 5
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31060: LD_ADDR_VAR 0 33
31064: PUSH
31065: LD_INT 4
31067: NEG
31068: PUSH
31069: LD_INT 4
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 4
31079: NEG
31080: PUSH
31081: LD_INT 5
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 3
31091: NEG
31092: PUSH
31093: LD_INT 4
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 3
31103: NEG
31104: PUSH
31105: LD_INT 3
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 4
31115: NEG
31116: PUSH
31117: LD_INT 3
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 5
31127: NEG
31128: PUSH
31129: LD_INT 4
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 5
31139: NEG
31140: PUSH
31141: LD_INT 5
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: LD_INT 5
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 5
31163: NEG
31164: PUSH
31165: LD_INT 3
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 0
31175: PUSH
31176: LD_INT 3
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 4
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: LD_INT 3
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 2
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: LD_INT 3
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: LD_INT 4
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 2
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: LD_INT 4
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 4
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 4
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 5
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 5
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 4
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 3
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 3
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 3
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 5
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: LD_INT 3
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 3
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 4
31390: PUSH
31391: LD_INT 3
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 4
31400: PUSH
31401: LD_INT 4
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 3
31410: PUSH
31411: LD_INT 4
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: LD_INT 3
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 4
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 2
31450: PUSH
31451: LD_INT 4
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: LD_INT 4
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: LD_INT 3
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 4
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 5
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: LD_INT 5
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: LD_INT 4
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: LD_INT 5
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31598: LD_ADDR_VAR 0 34
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: LD_INT 4
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 5
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: PUSH
31628: LD_INT 4
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: LD_INT 3
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: LD_INT 3
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: LD_INT 4
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: LD_INT 5
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 3
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 2
31695: NEG
31696: PUSH
31697: LD_INT 5
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 3
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 4
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 4
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 2
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: LD_INT 2
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 4
31800: PUSH
31801: LD_INT 4
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 4
31810: PUSH
31811: LD_INT 3
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 5
31820: PUSH
31821: LD_INT 4
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 5
31830: PUSH
31831: LD_INT 5
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 4
31840: PUSH
31841: LD_INT 5
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: LD_INT 4
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 3
31860: PUSH
31861: LD_INT 3
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 5
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: LD_INT 5
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: LD_INT 3
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 3
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: LD_INT 4
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 4
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: NEG
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 4
31983: NEG
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 4
31994: NEG
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 3
32006: NEG
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 3
32017: NEG
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 4
32028: NEG
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 5
32039: NEG
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 5
32050: NEG
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 5
32062: NEG
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 3
32074: NEG
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: ST_TO_ADDR
// end ; end ;
32130: GO 32133
32132: POP
// case btype of b_depot , b_warehouse :
32133: LD_VAR 0 1
32137: PUSH
32138: LD_INT 0
32140: DOUBLE
32141: EQUAL
32142: IFTRUE 32152
32144: LD_INT 1
32146: DOUBLE
32147: EQUAL
32148: IFTRUE 32152
32150: GO 32353
32152: POP
// case nation of nation_american :
32153: LD_VAR 0 5
32157: PUSH
32158: LD_INT 1
32160: DOUBLE
32161: EQUAL
32162: IFTRUE 32166
32164: GO 32222
32166: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32167: LD_ADDR_VAR 0 9
32171: PUSH
32172: LD_VAR 0 11
32176: PUSH
32177: LD_VAR 0 12
32181: PUSH
32182: LD_VAR 0 13
32186: PUSH
32187: LD_VAR 0 14
32191: PUSH
32192: LD_VAR 0 15
32196: PUSH
32197: LD_VAR 0 16
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: PUSH
32210: LD_VAR 0 4
32214: PUSH
32215: LD_INT 1
32217: PLUS
32218: ARRAY
32219: ST_TO_ADDR
32220: GO 32351
32222: LD_INT 2
32224: DOUBLE
32225: EQUAL
32226: IFTRUE 32230
32228: GO 32286
32230: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32231: LD_ADDR_VAR 0 9
32235: PUSH
32236: LD_VAR 0 17
32240: PUSH
32241: LD_VAR 0 18
32245: PUSH
32246: LD_VAR 0 19
32250: PUSH
32251: LD_VAR 0 20
32255: PUSH
32256: LD_VAR 0 21
32260: PUSH
32261: LD_VAR 0 22
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: PUSH
32274: LD_VAR 0 4
32278: PUSH
32279: LD_INT 1
32281: PLUS
32282: ARRAY
32283: ST_TO_ADDR
32284: GO 32351
32286: LD_INT 3
32288: DOUBLE
32289: EQUAL
32290: IFTRUE 32294
32292: GO 32350
32294: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32295: LD_ADDR_VAR 0 9
32299: PUSH
32300: LD_VAR 0 23
32304: PUSH
32305: LD_VAR 0 24
32309: PUSH
32310: LD_VAR 0 25
32314: PUSH
32315: LD_VAR 0 26
32319: PUSH
32320: LD_VAR 0 27
32324: PUSH
32325: LD_VAR 0 28
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: PUSH
32338: LD_VAR 0 4
32342: PUSH
32343: LD_INT 1
32345: PLUS
32346: ARRAY
32347: ST_TO_ADDR
32348: GO 32351
32350: POP
32351: GO 32906
32353: LD_INT 2
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32367
32359: LD_INT 3
32361: DOUBLE
32362: EQUAL
32363: IFTRUE 32367
32365: GO 32423
32367: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32368: LD_ADDR_VAR 0 9
32372: PUSH
32373: LD_VAR 0 29
32377: PUSH
32378: LD_VAR 0 30
32382: PUSH
32383: LD_VAR 0 31
32387: PUSH
32388: LD_VAR 0 32
32392: PUSH
32393: LD_VAR 0 33
32397: PUSH
32398: LD_VAR 0 34
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: PUSH
32411: LD_VAR 0 4
32415: PUSH
32416: LD_INT 1
32418: PLUS
32419: ARRAY
32420: ST_TO_ADDR
32421: GO 32906
32423: LD_INT 16
32425: DOUBLE
32426: EQUAL
32427: IFTRUE 32485
32429: LD_INT 17
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32485
32435: LD_INT 18
32437: DOUBLE
32438: EQUAL
32439: IFTRUE 32485
32441: LD_INT 19
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32485
32447: LD_INT 22
32449: DOUBLE
32450: EQUAL
32451: IFTRUE 32485
32453: LD_INT 20
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32485
32459: LD_INT 21
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32485
32465: LD_INT 23
32467: DOUBLE
32468: EQUAL
32469: IFTRUE 32485
32471: LD_INT 24
32473: DOUBLE
32474: EQUAL
32475: IFTRUE 32485
32477: LD_INT 25
32479: DOUBLE
32480: EQUAL
32481: IFTRUE 32485
32483: GO 32541
32485: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32486: LD_ADDR_VAR 0 9
32490: PUSH
32491: LD_VAR 0 35
32495: PUSH
32496: LD_VAR 0 36
32500: PUSH
32501: LD_VAR 0 37
32505: PUSH
32506: LD_VAR 0 38
32510: PUSH
32511: LD_VAR 0 39
32515: PUSH
32516: LD_VAR 0 40
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: PUSH
32529: LD_VAR 0 4
32533: PUSH
32534: LD_INT 1
32536: PLUS
32537: ARRAY
32538: ST_TO_ADDR
32539: GO 32906
32541: LD_INT 6
32543: DOUBLE
32544: EQUAL
32545: IFTRUE 32597
32547: LD_INT 7
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32597
32553: LD_INT 8
32555: DOUBLE
32556: EQUAL
32557: IFTRUE 32597
32559: LD_INT 13
32561: DOUBLE
32562: EQUAL
32563: IFTRUE 32597
32565: LD_INT 12
32567: DOUBLE
32568: EQUAL
32569: IFTRUE 32597
32571: LD_INT 15
32573: DOUBLE
32574: EQUAL
32575: IFTRUE 32597
32577: LD_INT 11
32579: DOUBLE
32580: EQUAL
32581: IFTRUE 32597
32583: LD_INT 14
32585: DOUBLE
32586: EQUAL
32587: IFTRUE 32597
32589: LD_INT 10
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32653
32597: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32598: LD_ADDR_VAR 0 9
32602: PUSH
32603: LD_VAR 0 41
32607: PUSH
32608: LD_VAR 0 42
32612: PUSH
32613: LD_VAR 0 43
32617: PUSH
32618: LD_VAR 0 44
32622: PUSH
32623: LD_VAR 0 45
32627: PUSH
32628: LD_VAR 0 46
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: PUSH
32641: LD_VAR 0 4
32645: PUSH
32646: LD_INT 1
32648: PLUS
32649: ARRAY
32650: ST_TO_ADDR
32651: GO 32906
32653: LD_INT 36
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32717
32661: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32662: LD_ADDR_VAR 0 9
32666: PUSH
32667: LD_VAR 0 47
32671: PUSH
32672: LD_VAR 0 48
32676: PUSH
32677: LD_VAR 0 49
32681: PUSH
32682: LD_VAR 0 50
32686: PUSH
32687: LD_VAR 0 51
32691: PUSH
32692: LD_VAR 0 52
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: PUSH
32705: LD_VAR 0 4
32709: PUSH
32710: LD_INT 1
32712: PLUS
32713: ARRAY
32714: ST_TO_ADDR
32715: GO 32906
32717: LD_INT 4
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32743
32723: LD_INT 5
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32743
32729: LD_INT 34
32731: DOUBLE
32732: EQUAL
32733: IFTRUE 32743
32735: LD_INT 37
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32743
32741: GO 32799
32743: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32744: LD_ADDR_VAR 0 9
32748: PUSH
32749: LD_VAR 0 53
32753: PUSH
32754: LD_VAR 0 54
32758: PUSH
32759: LD_VAR 0 55
32763: PUSH
32764: LD_VAR 0 56
32768: PUSH
32769: LD_VAR 0 57
32773: PUSH
32774: LD_VAR 0 58
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: PUSH
32787: LD_VAR 0 4
32791: PUSH
32792: LD_INT 1
32794: PLUS
32795: ARRAY
32796: ST_TO_ADDR
32797: GO 32906
32799: LD_INT 31
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32849
32805: LD_INT 32
32807: DOUBLE
32808: EQUAL
32809: IFTRUE 32849
32811: LD_INT 33
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32849
32817: LD_INT 27
32819: DOUBLE
32820: EQUAL
32821: IFTRUE 32849
32823: LD_INT 26
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32849
32829: LD_INT 28
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32849
32835: LD_INT 29
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32849
32841: LD_INT 30
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32849
32847: GO 32905
32849: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32850: LD_ADDR_VAR 0 9
32854: PUSH
32855: LD_VAR 0 59
32859: PUSH
32860: LD_VAR 0 60
32864: PUSH
32865: LD_VAR 0 61
32869: PUSH
32870: LD_VAR 0 62
32874: PUSH
32875: LD_VAR 0 63
32879: PUSH
32880: LD_VAR 0 64
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: PUSH
32893: LD_VAR 0 4
32897: PUSH
32898: LD_INT 1
32900: PLUS
32901: ARRAY
32902: ST_TO_ADDR
32903: GO 32906
32905: POP
// temp_list2 = [ ] ;
32906: LD_ADDR_VAR 0 10
32910: PUSH
32911: EMPTY
32912: ST_TO_ADDR
// for i in temp_list do
32913: LD_ADDR_VAR 0 8
32917: PUSH
32918: LD_VAR 0 9
32922: PUSH
32923: FOR_IN
32924: IFFALSE 32976
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32926: LD_ADDR_VAR 0 10
32930: PUSH
32931: LD_VAR 0 10
32935: PUSH
32936: LD_VAR 0 8
32940: PUSH
32941: LD_INT 1
32943: ARRAY
32944: PUSH
32945: LD_VAR 0 2
32949: PLUS
32950: PUSH
32951: LD_VAR 0 8
32955: PUSH
32956: LD_INT 2
32958: ARRAY
32959: PUSH
32960: LD_VAR 0 3
32964: PLUS
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: EMPTY
32971: LIST
32972: ADD
32973: ST_TO_ADDR
32974: GO 32923
32976: POP
32977: POP
// result = temp_list2 ;
32978: LD_ADDR_VAR 0 7
32982: PUSH
32983: LD_VAR 0 10
32987: ST_TO_ADDR
// end ;
32988: LD_VAR 0 7
32992: RET
// export function EnemyInRange ( unit , dist ) ; begin
32993: LD_INT 0
32995: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32996: LD_ADDR_VAR 0 3
33000: PUSH
33001: LD_VAR 0 1
33005: PPUSH
33006: CALL_OW 255
33010: PPUSH
33011: LD_VAR 0 1
33015: PPUSH
33016: CALL_OW 250
33020: PPUSH
33021: LD_VAR 0 1
33025: PPUSH
33026: CALL_OW 251
33030: PPUSH
33031: LD_VAR 0 2
33035: PPUSH
33036: CALL 6395 0 4
33040: PUSH
33041: LD_INT 4
33043: ARRAY
33044: ST_TO_ADDR
// end ;
33045: LD_VAR 0 3
33049: RET
// export function PlayerSeeMe ( unit ) ; begin
33050: LD_INT 0
33052: PPUSH
// result := See ( your_side , unit ) ;
33053: LD_ADDR_VAR 0 2
33057: PUSH
33058: LD_OWVAR 2
33062: PPUSH
33063: LD_VAR 0 1
33067: PPUSH
33068: CALL_OW 292
33072: ST_TO_ADDR
// end ;
33073: LD_VAR 0 2
33077: RET
// export function ReverseDir ( unit ) ; begin
33078: LD_INT 0
33080: PPUSH
// if not unit then
33081: LD_VAR 0 1
33085: NOT
33086: IFFALSE 33090
// exit ;
33088: GO 33113
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33090: LD_ADDR_VAR 0 2
33094: PUSH
33095: LD_VAR 0 1
33099: PPUSH
33100: CALL_OW 254
33104: PUSH
33105: LD_INT 3
33107: PLUS
33108: PUSH
33109: LD_INT 6
33111: MOD
33112: ST_TO_ADDR
// end ;
33113: LD_VAR 0 2
33117: RET
// export function ReverseArray ( array ) ; var i ; begin
33118: LD_INT 0
33120: PPUSH
33121: PPUSH
// if not array then
33122: LD_VAR 0 1
33126: NOT
33127: IFFALSE 33131
// exit ;
33129: GO 33186
// result := [ ] ;
33131: LD_ADDR_VAR 0 2
33135: PUSH
33136: EMPTY
33137: ST_TO_ADDR
// for i := array downto 1 do
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: DOUBLE
33144: LD_VAR 0 1
33148: INC
33149: ST_TO_ADDR
33150: LD_INT 1
33152: PUSH
33153: FOR_DOWNTO
33154: IFFALSE 33184
// result := Join ( result , array [ i ] ) ;
33156: LD_ADDR_VAR 0 2
33160: PUSH
33161: LD_VAR 0 2
33165: PPUSH
33166: LD_VAR 0 1
33170: PUSH
33171: LD_VAR 0 3
33175: ARRAY
33176: PPUSH
33177: CALL 37829 0 2
33181: ST_TO_ADDR
33182: GO 33153
33184: POP
33185: POP
// end ;
33186: LD_VAR 0 2
33190: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33191: LD_INT 0
33193: PPUSH
33194: PPUSH
33195: PPUSH
33196: PPUSH
33197: PPUSH
33198: PPUSH
// if not unit or not hexes then
33199: LD_VAR 0 1
33203: NOT
33204: PUSH
33205: LD_VAR 0 2
33209: NOT
33210: OR
33211: IFFALSE 33215
// exit ;
33213: GO 33338
// dist := 9999 ;
33215: LD_ADDR_VAR 0 5
33219: PUSH
33220: LD_INT 9999
33222: ST_TO_ADDR
// for i = 1 to hexes do
33223: LD_ADDR_VAR 0 4
33227: PUSH
33228: DOUBLE
33229: LD_INT 1
33231: DEC
33232: ST_TO_ADDR
33233: LD_VAR 0 2
33237: PUSH
33238: FOR_TO
33239: IFFALSE 33326
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33241: LD_ADDR_VAR 0 6
33245: PUSH
33246: LD_VAR 0 1
33250: PPUSH
33251: LD_VAR 0 2
33255: PUSH
33256: LD_VAR 0 4
33260: ARRAY
33261: PUSH
33262: LD_INT 1
33264: ARRAY
33265: PPUSH
33266: LD_VAR 0 2
33270: PUSH
33271: LD_VAR 0 4
33275: ARRAY
33276: PUSH
33277: LD_INT 2
33279: ARRAY
33280: PPUSH
33281: CALL_OW 297
33285: ST_TO_ADDR
// if tdist < dist then
33286: LD_VAR 0 6
33290: PUSH
33291: LD_VAR 0 5
33295: LESS
33296: IFFALSE 33324
// begin hex := hexes [ i ] ;
33298: LD_ADDR_VAR 0 8
33302: PUSH
33303: LD_VAR 0 2
33307: PUSH
33308: LD_VAR 0 4
33312: ARRAY
33313: ST_TO_ADDR
// dist := tdist ;
33314: LD_ADDR_VAR 0 5
33318: PUSH
33319: LD_VAR 0 6
33323: ST_TO_ADDR
// end ; end ;
33324: GO 33238
33326: POP
33327: POP
// result := hex ;
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: LD_VAR 0 8
33337: ST_TO_ADDR
// end ;
33338: LD_VAR 0 3
33342: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33343: LD_INT 0
33345: PPUSH
33346: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33347: LD_VAR 0 1
33351: NOT
33352: PUSH
33353: LD_VAR 0 1
33357: PUSH
33358: LD_INT 21
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 23
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PPUSH
33382: CALL_OW 69
33386: IN
33387: NOT
33388: OR
33389: IFFALSE 33393
// exit ;
33391: GO 33440
// for i = 1 to 3 do
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: DOUBLE
33399: LD_INT 1
33401: DEC
33402: ST_TO_ADDR
33403: LD_INT 3
33405: PUSH
33406: FOR_TO
33407: IFFALSE 33438
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33409: LD_VAR 0 1
33413: PPUSH
33414: CALL_OW 250
33418: PPUSH
33419: LD_VAR 0 1
33423: PPUSH
33424: CALL_OW 251
33428: PPUSH
33429: LD_INT 1
33431: PPUSH
33432: CALL_OW 453
33436: GO 33406
33438: POP
33439: POP
// end ;
33440: LD_VAR 0 2
33444: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33445: LD_INT 0
33447: PPUSH
33448: PPUSH
33449: PPUSH
33450: PPUSH
33451: PPUSH
33452: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33453: LD_VAR 0 1
33457: NOT
33458: PUSH
33459: LD_VAR 0 2
33463: NOT
33464: OR
33465: PUSH
33466: LD_VAR 0 1
33470: PPUSH
33471: CALL_OW 314
33475: OR
33476: IFFALSE 33480
// exit ;
33478: GO 33947
// if GetLives ( i ) < 250 then
33480: LD_VAR 0 4
33484: PPUSH
33485: CALL_OW 256
33489: PUSH
33490: LD_INT 250
33492: LESS
33493: IFFALSE 33506
// begin ComAutodestruct ( i ) ;
33495: LD_VAR 0 4
33499: PPUSH
33500: CALL 33343 0 1
// exit ;
33504: GO 33947
// end ; x := GetX ( enemy_unit ) ;
33506: LD_ADDR_VAR 0 7
33510: PUSH
33511: LD_VAR 0 2
33515: PPUSH
33516: CALL_OW 250
33520: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33521: LD_ADDR_VAR 0 8
33525: PUSH
33526: LD_VAR 0 2
33530: PPUSH
33531: CALL_OW 251
33535: ST_TO_ADDR
// if not x or not y then
33536: LD_VAR 0 7
33540: NOT
33541: PUSH
33542: LD_VAR 0 8
33546: NOT
33547: OR
33548: IFFALSE 33552
// exit ;
33550: GO 33947
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33552: LD_ADDR_VAR 0 6
33556: PUSH
33557: LD_VAR 0 7
33561: PPUSH
33562: LD_INT 0
33564: PPUSH
33565: LD_INT 4
33567: PPUSH
33568: CALL_OW 272
33572: PUSH
33573: LD_VAR 0 8
33577: PPUSH
33578: LD_INT 0
33580: PPUSH
33581: LD_INT 4
33583: PPUSH
33584: CALL_OW 273
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_VAR 0 7
33597: PPUSH
33598: LD_INT 1
33600: PPUSH
33601: LD_INT 4
33603: PPUSH
33604: CALL_OW 272
33608: PUSH
33609: LD_VAR 0 8
33613: PPUSH
33614: LD_INT 1
33616: PPUSH
33617: LD_INT 4
33619: PPUSH
33620: CALL_OW 273
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_VAR 0 7
33633: PPUSH
33634: LD_INT 2
33636: PPUSH
33637: LD_INT 4
33639: PPUSH
33640: CALL_OW 272
33644: PUSH
33645: LD_VAR 0 8
33649: PPUSH
33650: LD_INT 2
33652: PPUSH
33653: LD_INT 4
33655: PPUSH
33656: CALL_OW 273
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_VAR 0 7
33669: PPUSH
33670: LD_INT 3
33672: PPUSH
33673: LD_INT 4
33675: PPUSH
33676: CALL_OW 272
33680: PUSH
33681: LD_VAR 0 8
33685: PPUSH
33686: LD_INT 3
33688: PPUSH
33689: LD_INT 4
33691: PPUSH
33692: CALL_OW 273
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_VAR 0 7
33705: PPUSH
33706: LD_INT 4
33708: PPUSH
33709: LD_INT 4
33711: PPUSH
33712: CALL_OW 272
33716: PUSH
33717: LD_VAR 0 8
33721: PPUSH
33722: LD_INT 4
33724: PPUSH
33725: LD_INT 4
33727: PPUSH
33728: CALL_OW 273
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_VAR 0 7
33741: PPUSH
33742: LD_INT 5
33744: PPUSH
33745: LD_INT 4
33747: PPUSH
33748: CALL_OW 272
33752: PUSH
33753: LD_VAR 0 8
33757: PPUSH
33758: LD_INT 5
33760: PPUSH
33761: LD_INT 4
33763: PPUSH
33764: CALL_OW 273
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
// for i = tmp downto 1 do
33781: LD_ADDR_VAR 0 4
33785: PUSH
33786: DOUBLE
33787: LD_VAR 0 6
33791: INC
33792: ST_TO_ADDR
33793: LD_INT 1
33795: PUSH
33796: FOR_DOWNTO
33797: IFFALSE 33898
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33799: LD_VAR 0 6
33803: PUSH
33804: LD_VAR 0 4
33808: ARRAY
33809: PUSH
33810: LD_INT 1
33812: ARRAY
33813: PPUSH
33814: LD_VAR 0 6
33818: PUSH
33819: LD_VAR 0 4
33823: ARRAY
33824: PUSH
33825: LD_INT 2
33827: ARRAY
33828: PPUSH
33829: CALL_OW 488
33833: NOT
33834: PUSH
33835: LD_VAR 0 6
33839: PUSH
33840: LD_VAR 0 4
33844: ARRAY
33845: PUSH
33846: LD_INT 1
33848: ARRAY
33849: PPUSH
33850: LD_VAR 0 6
33854: PUSH
33855: LD_VAR 0 4
33859: ARRAY
33860: PUSH
33861: LD_INT 2
33863: ARRAY
33864: PPUSH
33865: CALL_OW 428
33869: PUSH
33870: LD_INT 0
33872: NONEQUAL
33873: OR
33874: IFFALSE 33896
// tmp := Delete ( tmp , i ) ;
33876: LD_ADDR_VAR 0 6
33880: PUSH
33881: LD_VAR 0 6
33885: PPUSH
33886: LD_VAR 0 4
33890: PPUSH
33891: CALL_OW 3
33895: ST_TO_ADDR
33896: GO 33796
33898: POP
33899: POP
// j := GetClosestHex ( unit , tmp ) ;
33900: LD_ADDR_VAR 0 5
33904: PUSH
33905: LD_VAR 0 1
33909: PPUSH
33910: LD_VAR 0 6
33914: PPUSH
33915: CALL 33191 0 2
33919: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33920: LD_VAR 0 1
33924: PPUSH
33925: LD_VAR 0 5
33929: PUSH
33930: LD_INT 1
33932: ARRAY
33933: PPUSH
33934: LD_VAR 0 5
33938: PUSH
33939: LD_INT 2
33941: ARRAY
33942: PPUSH
33943: CALL_OW 111
// end ;
33947: LD_VAR 0 3
33951: RET
// export function PrepareApemanSoldier ( ) ; begin
33952: LD_INT 0
33954: PPUSH
// uc_nation := 0 ;
33955: LD_ADDR_OWVAR 21
33959: PUSH
33960: LD_INT 0
33962: ST_TO_ADDR
// hc_sex := sex_male ;
33963: LD_ADDR_OWVAR 27
33967: PUSH
33968: LD_INT 1
33970: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33971: LD_ADDR_OWVAR 28
33975: PUSH
33976: LD_INT 15
33978: ST_TO_ADDR
// hc_gallery :=  ;
33979: LD_ADDR_OWVAR 33
33983: PUSH
33984: LD_STRING 
33986: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33987: LD_ADDR_OWVAR 31
33991: PUSH
33992: LD_INT 0
33994: PPUSH
33995: LD_INT 3
33997: PPUSH
33998: CALL_OW 12
34002: PUSH
34003: LD_INT 0
34005: PPUSH
34006: LD_INT 3
34008: PPUSH
34009: CALL_OW 12
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: ST_TO_ADDR
// end ;
34026: LD_VAR 0 1
34030: RET
// export function PrepareApemanEngineer ( ) ; begin
34031: LD_INT 0
34033: PPUSH
// uc_nation := 0 ;
34034: LD_ADDR_OWVAR 21
34038: PUSH
34039: LD_INT 0
34041: ST_TO_ADDR
// hc_sex := sex_male ;
34042: LD_ADDR_OWVAR 27
34046: PUSH
34047: LD_INT 1
34049: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34050: LD_ADDR_OWVAR 28
34054: PUSH
34055: LD_INT 16
34057: ST_TO_ADDR
// hc_gallery :=  ;
34058: LD_ADDR_OWVAR 33
34062: PUSH
34063: LD_STRING 
34065: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34066: LD_ADDR_OWVAR 31
34070: PUSH
34071: LD_INT 0
34073: PPUSH
34074: LD_INT 3
34076: PPUSH
34077: CALL_OW 12
34081: PUSH
34082: LD_INT 0
34084: PPUSH
34085: LD_INT 3
34087: PPUSH
34088: CALL_OW 12
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: ST_TO_ADDR
// end ;
34105: LD_VAR 0 1
34109: RET
// export function PrepareApeman ( agressivity ) ; begin
34110: LD_INT 0
34112: PPUSH
// uc_side := 0 ;
34113: LD_ADDR_OWVAR 20
34117: PUSH
34118: LD_INT 0
34120: ST_TO_ADDR
// uc_nation := 0 ;
34121: LD_ADDR_OWVAR 21
34125: PUSH
34126: LD_INT 0
34128: ST_TO_ADDR
// hc_sex := sex_male ;
34129: LD_ADDR_OWVAR 27
34133: PUSH
34134: LD_INT 1
34136: ST_TO_ADDR
// hc_class := class_apeman ;
34137: LD_ADDR_OWVAR 28
34141: PUSH
34142: LD_INT 12
34144: ST_TO_ADDR
// hc_gallery :=  ;
34145: LD_ADDR_OWVAR 33
34149: PUSH
34150: LD_STRING 
34152: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34153: LD_ADDR_OWVAR 35
34157: PUSH
34158: LD_VAR 0 1
34162: NEG
34163: PPUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: CALL_OW 12
34173: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34174: LD_ADDR_OWVAR 31
34178: PUSH
34179: LD_INT 0
34181: PPUSH
34182: LD_INT 3
34184: PPUSH
34185: CALL_OW 12
34189: PUSH
34190: LD_INT 0
34192: PPUSH
34193: LD_INT 3
34195: PPUSH
34196: CALL_OW 12
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: ST_TO_ADDR
// end ;
34213: LD_VAR 0 2
34217: RET
// export function PrepareTiger ( agressivity ) ; begin
34218: LD_INT 0
34220: PPUSH
// uc_side := 0 ;
34221: LD_ADDR_OWVAR 20
34225: PUSH
34226: LD_INT 0
34228: ST_TO_ADDR
// uc_nation := 0 ;
34229: LD_ADDR_OWVAR 21
34233: PUSH
34234: LD_INT 0
34236: ST_TO_ADDR
// hc_class := class_tiger ;
34237: LD_ADDR_OWVAR 28
34241: PUSH
34242: LD_INT 14
34244: ST_TO_ADDR
// hc_gallery :=  ;
34245: LD_ADDR_OWVAR 33
34249: PUSH
34250: LD_STRING 
34252: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34253: LD_ADDR_OWVAR 35
34257: PUSH
34258: LD_VAR 0 1
34262: NEG
34263: PPUSH
34264: LD_VAR 0 1
34268: PPUSH
34269: CALL_OW 12
34273: ST_TO_ADDR
// end ;
34274: LD_VAR 0 2
34278: RET
// export function PrepareEnchidna ( ) ; begin
34279: LD_INT 0
34281: PPUSH
// uc_side := 0 ;
34282: LD_ADDR_OWVAR 20
34286: PUSH
34287: LD_INT 0
34289: ST_TO_ADDR
// uc_nation := 0 ;
34290: LD_ADDR_OWVAR 21
34294: PUSH
34295: LD_INT 0
34297: ST_TO_ADDR
// hc_class := class_baggie ;
34298: LD_ADDR_OWVAR 28
34302: PUSH
34303: LD_INT 13
34305: ST_TO_ADDR
// hc_gallery :=  ;
34306: LD_ADDR_OWVAR 33
34310: PUSH
34311: LD_STRING 
34313: ST_TO_ADDR
// end ;
34314: LD_VAR 0 1
34318: RET
// export function PrepareFrog ( ) ; begin
34319: LD_INT 0
34321: PPUSH
// uc_side := 0 ;
34322: LD_ADDR_OWVAR 20
34326: PUSH
34327: LD_INT 0
34329: ST_TO_ADDR
// uc_nation := 0 ;
34330: LD_ADDR_OWVAR 21
34334: PUSH
34335: LD_INT 0
34337: ST_TO_ADDR
// hc_class := class_frog ;
34338: LD_ADDR_OWVAR 28
34342: PUSH
34343: LD_INT 19
34345: ST_TO_ADDR
// hc_gallery :=  ;
34346: LD_ADDR_OWVAR 33
34350: PUSH
34351: LD_STRING 
34353: ST_TO_ADDR
// end ;
34354: LD_VAR 0 1
34358: RET
// export function PrepareFish ( ) ; begin
34359: LD_INT 0
34361: PPUSH
// uc_side := 0 ;
34362: LD_ADDR_OWVAR 20
34366: PUSH
34367: LD_INT 0
34369: ST_TO_ADDR
// uc_nation := 0 ;
34370: LD_ADDR_OWVAR 21
34374: PUSH
34375: LD_INT 0
34377: ST_TO_ADDR
// hc_class := class_fish ;
34378: LD_ADDR_OWVAR 28
34382: PUSH
34383: LD_INT 20
34385: ST_TO_ADDR
// hc_gallery :=  ;
34386: LD_ADDR_OWVAR 33
34390: PUSH
34391: LD_STRING 
34393: ST_TO_ADDR
// end ;
34394: LD_VAR 0 1
34398: RET
// export function PrepareBird ( ) ; begin
34399: LD_INT 0
34401: PPUSH
// uc_side := 0 ;
34402: LD_ADDR_OWVAR 20
34406: PUSH
34407: LD_INT 0
34409: ST_TO_ADDR
// uc_nation := 0 ;
34410: LD_ADDR_OWVAR 21
34414: PUSH
34415: LD_INT 0
34417: ST_TO_ADDR
// hc_class := class_phororhacos ;
34418: LD_ADDR_OWVAR 28
34422: PUSH
34423: LD_INT 18
34425: ST_TO_ADDR
// hc_gallery :=  ;
34426: LD_ADDR_OWVAR 33
34430: PUSH
34431: LD_STRING 
34433: ST_TO_ADDR
// end ;
34434: LD_VAR 0 1
34438: RET
// export function PrepareHorse ( ) ; begin
34439: LD_INT 0
34441: PPUSH
// uc_side := 0 ;
34442: LD_ADDR_OWVAR 20
34446: PUSH
34447: LD_INT 0
34449: ST_TO_ADDR
// uc_nation := 0 ;
34450: LD_ADDR_OWVAR 21
34454: PUSH
34455: LD_INT 0
34457: ST_TO_ADDR
// hc_class := class_horse ;
34458: LD_ADDR_OWVAR 28
34462: PUSH
34463: LD_INT 21
34465: ST_TO_ADDR
// hc_gallery :=  ;
34466: LD_ADDR_OWVAR 33
34470: PUSH
34471: LD_STRING 
34473: ST_TO_ADDR
// end ;
34474: LD_VAR 0 1
34478: RET
// export function PrepareMastodont ( ) ; begin
34479: LD_INT 0
34481: PPUSH
// uc_side := 0 ;
34482: LD_ADDR_OWVAR 20
34486: PUSH
34487: LD_INT 0
34489: ST_TO_ADDR
// uc_nation := 0 ;
34490: LD_ADDR_OWVAR 21
34494: PUSH
34495: LD_INT 0
34497: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34498: LD_ADDR_OWVAR 37
34502: PUSH
34503: LD_INT 31
34505: ST_TO_ADDR
// vc_control := control_rider ;
34506: LD_ADDR_OWVAR 38
34510: PUSH
34511: LD_INT 4
34513: ST_TO_ADDR
// end ;
34514: LD_VAR 0 1
34518: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34519: LD_INT 0
34521: PPUSH
34522: PPUSH
34523: PPUSH
// uc_side = 0 ;
34524: LD_ADDR_OWVAR 20
34528: PUSH
34529: LD_INT 0
34531: ST_TO_ADDR
// uc_nation = 0 ;
34532: LD_ADDR_OWVAR 21
34536: PUSH
34537: LD_INT 0
34539: ST_TO_ADDR
// InitHc_All ( ) ;
34540: CALL_OW 584
// InitVc ;
34544: CALL_OW 20
// if mastodonts then
34548: LD_VAR 0 6
34552: IFFALSE 34619
// for i = 1 to mastodonts do
34554: LD_ADDR_VAR 0 11
34558: PUSH
34559: DOUBLE
34560: LD_INT 1
34562: DEC
34563: ST_TO_ADDR
34564: LD_VAR 0 6
34568: PUSH
34569: FOR_TO
34570: IFFALSE 34617
// begin vc_chassis := 31 ;
34572: LD_ADDR_OWVAR 37
34576: PUSH
34577: LD_INT 31
34579: ST_TO_ADDR
// vc_control := control_rider ;
34580: LD_ADDR_OWVAR 38
34584: PUSH
34585: LD_INT 4
34587: ST_TO_ADDR
// animal := CreateVehicle ;
34588: LD_ADDR_VAR 0 12
34592: PUSH
34593: CALL_OW 45
34597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34598: LD_VAR 0 12
34602: PPUSH
34603: LD_VAR 0 8
34607: PPUSH
34608: LD_INT 0
34610: PPUSH
34611: CALL 36747 0 3
// end ;
34615: GO 34569
34617: POP
34618: POP
// if horses then
34619: LD_VAR 0 5
34623: IFFALSE 34690
// for i = 1 to horses do
34625: LD_ADDR_VAR 0 11
34629: PUSH
34630: DOUBLE
34631: LD_INT 1
34633: DEC
34634: ST_TO_ADDR
34635: LD_VAR 0 5
34639: PUSH
34640: FOR_TO
34641: IFFALSE 34688
// begin hc_class := 21 ;
34643: LD_ADDR_OWVAR 28
34647: PUSH
34648: LD_INT 21
34650: ST_TO_ADDR
// hc_gallery :=  ;
34651: LD_ADDR_OWVAR 33
34655: PUSH
34656: LD_STRING 
34658: ST_TO_ADDR
// animal := CreateHuman ;
34659: LD_ADDR_VAR 0 12
34663: PUSH
34664: CALL_OW 44
34668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34669: LD_VAR 0 12
34673: PPUSH
34674: LD_VAR 0 8
34678: PPUSH
34679: LD_INT 0
34681: PPUSH
34682: CALL 36747 0 3
// end ;
34686: GO 34640
34688: POP
34689: POP
// if birds then
34690: LD_VAR 0 1
34694: IFFALSE 34761
// for i = 1 to birds do
34696: LD_ADDR_VAR 0 11
34700: PUSH
34701: DOUBLE
34702: LD_INT 1
34704: DEC
34705: ST_TO_ADDR
34706: LD_VAR 0 1
34710: PUSH
34711: FOR_TO
34712: IFFALSE 34759
// begin hc_class = 18 ;
34714: LD_ADDR_OWVAR 28
34718: PUSH
34719: LD_INT 18
34721: ST_TO_ADDR
// hc_gallery =  ;
34722: LD_ADDR_OWVAR 33
34726: PUSH
34727: LD_STRING 
34729: ST_TO_ADDR
// animal := CreateHuman ;
34730: LD_ADDR_VAR 0 12
34734: PUSH
34735: CALL_OW 44
34739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34740: LD_VAR 0 12
34744: PPUSH
34745: LD_VAR 0 8
34749: PPUSH
34750: LD_INT 0
34752: PPUSH
34753: CALL 36747 0 3
// end ;
34757: GO 34711
34759: POP
34760: POP
// if tigers then
34761: LD_VAR 0 2
34765: IFFALSE 34849
// for i = 1 to tigers do
34767: LD_ADDR_VAR 0 11
34771: PUSH
34772: DOUBLE
34773: LD_INT 1
34775: DEC
34776: ST_TO_ADDR
34777: LD_VAR 0 2
34781: PUSH
34782: FOR_TO
34783: IFFALSE 34847
// begin hc_class = class_tiger ;
34785: LD_ADDR_OWVAR 28
34789: PUSH
34790: LD_INT 14
34792: ST_TO_ADDR
// hc_gallery =  ;
34793: LD_ADDR_OWVAR 33
34797: PUSH
34798: LD_STRING 
34800: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34801: LD_ADDR_OWVAR 35
34805: PUSH
34806: LD_INT 7
34808: NEG
34809: PPUSH
34810: LD_INT 7
34812: PPUSH
34813: CALL_OW 12
34817: ST_TO_ADDR
// animal := CreateHuman ;
34818: LD_ADDR_VAR 0 12
34822: PUSH
34823: CALL_OW 44
34827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34828: LD_VAR 0 12
34832: PPUSH
34833: LD_VAR 0 8
34837: PPUSH
34838: LD_INT 0
34840: PPUSH
34841: CALL 36747 0 3
// end ;
34845: GO 34782
34847: POP
34848: POP
// if apemans then
34849: LD_VAR 0 3
34853: IFFALSE 34976
// for i = 1 to apemans do
34855: LD_ADDR_VAR 0 11
34859: PUSH
34860: DOUBLE
34861: LD_INT 1
34863: DEC
34864: ST_TO_ADDR
34865: LD_VAR 0 3
34869: PUSH
34870: FOR_TO
34871: IFFALSE 34974
// begin hc_class = class_apeman ;
34873: LD_ADDR_OWVAR 28
34877: PUSH
34878: LD_INT 12
34880: ST_TO_ADDR
// hc_gallery =  ;
34881: LD_ADDR_OWVAR 33
34885: PUSH
34886: LD_STRING 
34888: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34889: LD_ADDR_OWVAR 35
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PPUSH
34898: LD_INT 2
34900: PPUSH
34901: CALL_OW 12
34905: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34906: LD_ADDR_OWVAR 31
34910: PUSH
34911: LD_INT 1
34913: PPUSH
34914: LD_INT 3
34916: PPUSH
34917: CALL_OW 12
34921: PUSH
34922: LD_INT 1
34924: PPUSH
34925: LD_INT 3
34927: PPUSH
34928: CALL_OW 12
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: ST_TO_ADDR
// animal := CreateHuman ;
34945: LD_ADDR_VAR 0 12
34949: PUSH
34950: CALL_OW 44
34954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34955: LD_VAR 0 12
34959: PPUSH
34960: LD_VAR 0 8
34964: PPUSH
34965: LD_INT 0
34967: PPUSH
34968: CALL 36747 0 3
// end ;
34972: GO 34870
34974: POP
34975: POP
// if enchidnas then
34976: LD_VAR 0 4
34980: IFFALSE 35047
// for i = 1 to enchidnas do
34982: LD_ADDR_VAR 0 11
34986: PUSH
34987: DOUBLE
34988: LD_INT 1
34990: DEC
34991: ST_TO_ADDR
34992: LD_VAR 0 4
34996: PUSH
34997: FOR_TO
34998: IFFALSE 35045
// begin hc_class = 13 ;
35000: LD_ADDR_OWVAR 28
35004: PUSH
35005: LD_INT 13
35007: ST_TO_ADDR
// hc_gallery =  ;
35008: LD_ADDR_OWVAR 33
35012: PUSH
35013: LD_STRING 
35015: ST_TO_ADDR
// animal := CreateHuman ;
35016: LD_ADDR_VAR 0 12
35020: PUSH
35021: CALL_OW 44
35025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35026: LD_VAR 0 12
35030: PPUSH
35031: LD_VAR 0 8
35035: PPUSH
35036: LD_INT 0
35038: PPUSH
35039: CALL 36747 0 3
// end ;
35043: GO 34997
35045: POP
35046: POP
// if fishes then
35047: LD_VAR 0 7
35051: IFFALSE 35118
// for i = 1 to fishes do
35053: LD_ADDR_VAR 0 11
35057: PUSH
35058: DOUBLE
35059: LD_INT 1
35061: DEC
35062: ST_TO_ADDR
35063: LD_VAR 0 7
35067: PUSH
35068: FOR_TO
35069: IFFALSE 35116
// begin hc_class = 20 ;
35071: LD_ADDR_OWVAR 28
35075: PUSH
35076: LD_INT 20
35078: ST_TO_ADDR
// hc_gallery =  ;
35079: LD_ADDR_OWVAR 33
35083: PUSH
35084: LD_STRING 
35086: ST_TO_ADDR
// animal := CreateHuman ;
35087: LD_ADDR_VAR 0 12
35091: PUSH
35092: CALL_OW 44
35096: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35097: LD_VAR 0 12
35101: PPUSH
35102: LD_VAR 0 9
35106: PPUSH
35107: LD_INT 0
35109: PPUSH
35110: CALL 36747 0 3
// end ;
35114: GO 35068
35116: POP
35117: POP
// end ;
35118: LD_VAR 0 10
35122: RET
// export function WantHeal ( sci , unit ) ; begin
35123: LD_INT 0
35125: PPUSH
// if GetTaskList ( sci ) > 0 then
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 437
35135: PUSH
35136: LD_INT 0
35138: GREATER
35139: IFFALSE 35209
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35141: LD_VAR 0 1
35145: PPUSH
35146: CALL_OW 437
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: PUSH
35155: LD_INT 1
35157: ARRAY
35158: PUSH
35159: LD_STRING l
35161: EQUAL
35162: PUSH
35163: LD_VAR 0 1
35167: PPUSH
35168: CALL_OW 437
35172: PUSH
35173: LD_INT 1
35175: ARRAY
35176: PUSH
35177: LD_INT 4
35179: ARRAY
35180: PUSH
35181: LD_VAR 0 2
35185: EQUAL
35186: AND
35187: IFFALSE 35199
// result := true else
35189: LD_ADDR_VAR 0 3
35193: PUSH
35194: LD_INT 1
35196: ST_TO_ADDR
35197: GO 35207
// result := false ;
35199: LD_ADDR_VAR 0 3
35203: PUSH
35204: LD_INT 0
35206: ST_TO_ADDR
// end else
35207: GO 35217
// result := false ;
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_INT 0
35216: ST_TO_ADDR
// end ;
35217: LD_VAR 0 3
35221: RET
// export function HealTarget ( sci ) ; begin
35222: LD_INT 0
35224: PPUSH
// if not sci then
35225: LD_VAR 0 1
35229: NOT
35230: IFFALSE 35234
// exit ;
35232: GO 35299
// result := 0 ;
35234: LD_ADDR_VAR 0 2
35238: PUSH
35239: LD_INT 0
35241: ST_TO_ADDR
// if GetTaskList ( sci ) then
35242: LD_VAR 0 1
35246: PPUSH
35247: CALL_OW 437
35251: IFFALSE 35299
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35253: LD_VAR 0 1
35257: PPUSH
35258: CALL_OW 437
35262: PUSH
35263: LD_INT 1
35265: ARRAY
35266: PUSH
35267: LD_INT 1
35269: ARRAY
35270: PUSH
35271: LD_STRING l
35273: EQUAL
35274: IFFALSE 35299
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35276: LD_ADDR_VAR 0 2
35280: PUSH
35281: LD_VAR 0 1
35285: PPUSH
35286: CALL_OW 437
35290: PUSH
35291: LD_INT 1
35293: ARRAY
35294: PUSH
35295: LD_INT 4
35297: ARRAY
35298: ST_TO_ADDR
// end ;
35299: LD_VAR 0 2
35303: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35304: LD_INT 0
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
// if not base_units then
35310: LD_VAR 0 1
35314: NOT
35315: IFFALSE 35319
// exit ;
35317: GO 35406
// result := false ;
35319: LD_ADDR_VAR 0 2
35323: PUSH
35324: LD_INT 0
35326: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35327: LD_ADDR_VAR 0 5
35331: PUSH
35332: LD_VAR 0 1
35336: PPUSH
35337: LD_INT 21
35339: PUSH
35340: LD_INT 3
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PPUSH
35347: CALL_OW 72
35351: ST_TO_ADDR
// if not tmp then
35352: LD_VAR 0 5
35356: NOT
35357: IFFALSE 35361
// exit ;
35359: GO 35406
// for i in tmp do
35361: LD_ADDR_VAR 0 3
35365: PUSH
35366: LD_VAR 0 5
35370: PUSH
35371: FOR_IN
35372: IFFALSE 35404
// begin result := EnemyInRange ( i , 22 ) ;
35374: LD_ADDR_VAR 0 2
35378: PUSH
35379: LD_VAR 0 3
35383: PPUSH
35384: LD_INT 22
35386: PPUSH
35387: CALL 32993 0 2
35391: ST_TO_ADDR
// if result then
35392: LD_VAR 0 2
35396: IFFALSE 35402
// exit ;
35398: POP
35399: POP
35400: GO 35406
// end ;
35402: GO 35371
35404: POP
35405: POP
// end ;
35406: LD_VAR 0 2
35410: RET
// export function FilterByTag ( units , tag ) ; begin
35411: LD_INT 0
35413: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35414: LD_ADDR_VAR 0 3
35418: PUSH
35419: LD_VAR 0 1
35423: PPUSH
35424: LD_INT 120
35426: PUSH
35427: LD_VAR 0 2
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PPUSH
35436: CALL_OW 72
35440: ST_TO_ADDR
// end ;
35441: LD_VAR 0 3
35445: RET
// export function IsDriver ( un ) ; begin
35446: LD_INT 0
35448: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35449: LD_ADDR_VAR 0 2
35453: PUSH
35454: LD_VAR 0 1
35458: PUSH
35459: LD_INT 55
35461: PUSH
35462: EMPTY
35463: LIST
35464: PPUSH
35465: CALL_OW 69
35469: IN
35470: ST_TO_ADDR
// end ;
35471: LD_VAR 0 2
35475: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35476: LD_INT 0
35478: PPUSH
35479: PPUSH
// list := [ ] ;
35480: LD_ADDR_VAR 0 5
35484: PUSH
35485: EMPTY
35486: ST_TO_ADDR
// case d of 0 :
35487: LD_VAR 0 3
35491: PUSH
35492: LD_INT 0
35494: DOUBLE
35495: EQUAL
35496: IFTRUE 35500
35498: GO 35633
35500: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35501: LD_ADDR_VAR 0 5
35505: PUSH
35506: LD_VAR 0 1
35510: PUSH
35511: LD_INT 4
35513: MINUS
35514: PUSH
35515: LD_VAR 0 2
35519: PUSH
35520: LD_INT 4
35522: MINUS
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: PUSH
35532: LD_VAR 0 1
35536: PUSH
35537: LD_INT 3
35539: MINUS
35540: PUSH
35541: LD_VAR 0 2
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: PUSH
35554: LD_VAR 0 1
35558: PUSH
35559: LD_INT 4
35561: PLUS
35562: PUSH
35563: LD_VAR 0 2
35567: PUSH
35568: LD_INT 4
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: PUSH
35576: LD_VAR 0 1
35580: PUSH
35581: LD_INT 3
35583: PLUS
35584: PUSH
35585: LD_VAR 0 2
35589: PUSH
35590: LD_INT 3
35592: PLUS
35593: PUSH
35594: LD_INT 5
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: PUSH
35602: LD_VAR 0 1
35606: PUSH
35607: LD_VAR 0 2
35611: PUSH
35612: LD_INT 4
35614: PLUS
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: ST_TO_ADDR
// end ; 1 :
35631: GO 36331
35633: LD_INT 1
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35641
35639: GO 35774
35641: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35642: LD_ADDR_VAR 0 5
35646: PUSH
35647: LD_VAR 0 1
35651: PUSH
35652: LD_VAR 0 2
35656: PUSH
35657: LD_INT 4
35659: MINUS
35660: PUSH
35661: LD_INT 3
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: PUSH
35669: LD_VAR 0 1
35673: PUSH
35674: LD_INT 3
35676: MINUS
35677: PUSH
35678: LD_VAR 0 2
35682: PUSH
35683: LD_INT 3
35685: MINUS
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: PUSH
35695: LD_VAR 0 1
35699: PUSH
35700: LD_INT 4
35702: MINUS
35703: PUSH
35704: LD_VAR 0 2
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: PUSH
35717: LD_VAR 0 1
35721: PUSH
35722: LD_VAR 0 2
35726: PUSH
35727: LD_INT 3
35729: PLUS
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: PUSH
35739: LD_VAR 0 1
35743: PUSH
35744: LD_INT 4
35746: PLUS
35747: PUSH
35748: LD_VAR 0 2
35752: PUSH
35753: LD_INT 4
35755: PLUS
35756: PUSH
35757: LD_INT 5
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: ST_TO_ADDR
// end ; 2 :
35772: GO 36331
35774: LD_INT 2
35776: DOUBLE
35777: EQUAL
35778: IFTRUE 35782
35780: GO 35911
35782: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35783: LD_ADDR_VAR 0 5
35787: PUSH
35788: LD_VAR 0 1
35792: PUSH
35793: LD_VAR 0 2
35797: PUSH
35798: LD_INT 3
35800: MINUS
35801: PUSH
35802: LD_INT 3
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: PUSH
35810: LD_VAR 0 1
35814: PUSH
35815: LD_INT 4
35817: PLUS
35818: PUSH
35819: LD_VAR 0 2
35823: PUSH
35824: LD_INT 4
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: PUSH
35832: LD_VAR 0 1
35836: PUSH
35837: LD_VAR 0 2
35841: PUSH
35842: LD_INT 4
35844: PLUS
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: PUSH
35854: LD_VAR 0 1
35858: PUSH
35859: LD_INT 3
35861: MINUS
35862: PUSH
35863: LD_VAR 0 2
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: LIST
35875: PUSH
35876: LD_VAR 0 1
35880: PUSH
35881: LD_INT 4
35883: MINUS
35884: PUSH
35885: LD_VAR 0 2
35889: PUSH
35890: LD_INT 4
35892: MINUS
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: ST_TO_ADDR
// end ; 3 :
35909: GO 36331
35911: LD_INT 3
35913: DOUBLE
35914: EQUAL
35915: IFTRUE 35919
35917: GO 36052
35919: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35920: LD_ADDR_VAR 0 5
35924: PUSH
35925: LD_VAR 0 1
35929: PUSH
35930: LD_INT 3
35932: PLUS
35933: PUSH
35934: LD_VAR 0 2
35938: PUSH
35939: LD_INT 4
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: PUSH
35947: LD_VAR 0 1
35951: PUSH
35952: LD_INT 4
35954: PLUS
35955: PUSH
35956: LD_VAR 0 2
35960: PUSH
35961: LD_INT 4
35963: PLUS
35964: PUSH
35965: LD_INT 5
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: PUSH
35973: LD_VAR 0 1
35977: PUSH
35978: LD_INT 4
35980: MINUS
35981: PUSH
35982: LD_VAR 0 2
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: PUSH
35995: LD_VAR 0 1
35999: PUSH
36000: LD_VAR 0 2
36004: PUSH
36005: LD_INT 4
36007: MINUS
36008: PUSH
36009: LD_INT 3
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: LIST
36016: PUSH
36017: LD_VAR 0 1
36021: PUSH
36022: LD_INT 3
36024: MINUS
36025: PUSH
36026: LD_VAR 0 2
36030: PUSH
36031: LD_INT 3
36033: MINUS
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: LIST
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: ST_TO_ADDR
// end ; 4 :
36050: GO 36331
36052: LD_INT 4
36054: DOUBLE
36055: EQUAL
36056: IFTRUE 36060
36058: GO 36193
36060: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36061: LD_ADDR_VAR 0 5
36065: PUSH
36066: LD_VAR 0 1
36070: PUSH
36071: LD_VAR 0 2
36075: PUSH
36076: LD_INT 4
36078: PLUS
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: PUSH
36088: LD_VAR 0 1
36092: PUSH
36093: LD_INT 3
36095: PLUS
36096: PUSH
36097: LD_VAR 0 2
36101: PUSH
36102: LD_INT 3
36104: PLUS
36105: PUSH
36106: LD_INT 5
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: PUSH
36114: LD_VAR 0 1
36118: PUSH
36119: LD_INT 4
36121: PLUS
36122: PUSH
36123: LD_VAR 0 2
36127: PUSH
36128: LD_INT 4
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: PUSH
36136: LD_VAR 0 1
36140: PUSH
36141: LD_VAR 0 2
36145: PUSH
36146: LD_INT 3
36148: MINUS
36149: PUSH
36150: LD_INT 3
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: PUSH
36158: LD_VAR 0 1
36162: PUSH
36163: LD_INT 4
36165: MINUS
36166: PUSH
36167: LD_VAR 0 2
36171: PUSH
36172: LD_INT 4
36174: MINUS
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: ST_TO_ADDR
// end ; 5 :
36191: GO 36331
36193: LD_INT 5
36195: DOUBLE
36196: EQUAL
36197: IFTRUE 36201
36199: GO 36330
36201: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36202: LD_ADDR_VAR 0 5
36206: PUSH
36207: LD_VAR 0 1
36211: PUSH
36212: LD_INT 4
36214: MINUS
36215: PUSH
36216: LD_VAR 0 2
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: PUSH
36229: LD_VAR 0 1
36233: PUSH
36234: LD_VAR 0 2
36238: PUSH
36239: LD_INT 4
36241: MINUS
36242: PUSH
36243: LD_INT 3
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: PUSH
36251: LD_VAR 0 1
36255: PUSH
36256: LD_INT 4
36258: PLUS
36259: PUSH
36260: LD_VAR 0 2
36264: PUSH
36265: LD_INT 4
36267: PLUS
36268: PUSH
36269: LD_INT 5
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: PUSH
36277: LD_VAR 0 1
36281: PUSH
36282: LD_INT 3
36284: PLUS
36285: PUSH
36286: LD_VAR 0 2
36290: PUSH
36291: LD_INT 4
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: PUSH
36299: LD_VAR 0 1
36303: PUSH
36304: LD_VAR 0 2
36308: PUSH
36309: LD_INT 3
36311: PLUS
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: ST_TO_ADDR
// end ; end ;
36328: GO 36331
36330: POP
// result := list ;
36331: LD_ADDR_VAR 0 4
36335: PUSH
36336: LD_VAR 0 5
36340: ST_TO_ADDR
// end ;
36341: LD_VAR 0 4
36345: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36346: LD_INT 0
36348: PPUSH
36349: PPUSH
36350: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36351: LD_VAR 0 1
36355: NOT
36356: PUSH
36357: LD_VAR 0 2
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 3
36370: PUSH
36371: LD_INT 4
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: IN
36380: NOT
36381: OR
36382: IFFALSE 36386
// exit ;
36384: GO 36469
// tmp := [ ] ;
36386: LD_ADDR_VAR 0 5
36390: PUSH
36391: EMPTY
36392: ST_TO_ADDR
// for i in units do
36393: LD_ADDR_VAR 0 4
36397: PUSH
36398: LD_VAR 0 1
36402: PUSH
36403: FOR_IN
36404: IFFALSE 36438
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36406: LD_ADDR_VAR 0 5
36410: PUSH
36411: LD_VAR 0 5
36415: PPUSH
36416: LD_VAR 0 4
36420: PPUSH
36421: LD_VAR 0 2
36425: PPUSH
36426: CALL_OW 259
36430: PPUSH
36431: CALL 37829 0 2
36435: ST_TO_ADDR
36436: GO 36403
36438: POP
36439: POP
// if not tmp then
36440: LD_VAR 0 5
36444: NOT
36445: IFFALSE 36449
// exit ;
36447: GO 36469
// result := SortListByListDesc ( units , tmp ) ;
36449: LD_ADDR_VAR 0 3
36453: PUSH
36454: LD_VAR 0 1
36458: PPUSH
36459: LD_VAR 0 5
36463: PPUSH
36464: CALL_OW 77
36468: ST_TO_ADDR
// end ;
36469: LD_VAR 0 3
36473: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36474: LD_INT 0
36476: PPUSH
36477: PPUSH
36478: PPUSH
// result := false ;
36479: LD_ADDR_VAR 0 3
36483: PUSH
36484: LD_INT 0
36486: ST_TO_ADDR
// if not building then
36487: LD_VAR 0 2
36491: NOT
36492: IFFALSE 36496
// exit ;
36494: GO 36634
// x := GetX ( building ) ;
36496: LD_ADDR_VAR 0 4
36500: PUSH
36501: LD_VAR 0 2
36505: PPUSH
36506: CALL_OW 250
36510: ST_TO_ADDR
// y := GetY ( building ) ;
36511: LD_ADDR_VAR 0 5
36515: PUSH
36516: LD_VAR 0 2
36520: PPUSH
36521: CALL_OW 251
36525: ST_TO_ADDR
// if not x or not y then
36526: LD_VAR 0 4
36530: NOT
36531: PUSH
36532: LD_VAR 0 5
36536: NOT
36537: OR
36538: IFFALSE 36542
// exit ;
36540: GO 36634
// if GetTaskList ( unit ) then
36542: LD_VAR 0 1
36546: PPUSH
36547: CALL_OW 437
36551: IFFALSE 36634
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36553: LD_STRING e
36555: PUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 437
36565: PUSH
36566: LD_INT 1
36568: ARRAY
36569: PUSH
36570: LD_INT 1
36572: ARRAY
36573: EQUAL
36574: PUSH
36575: LD_VAR 0 4
36579: PUSH
36580: LD_VAR 0 1
36584: PPUSH
36585: CALL_OW 437
36589: PUSH
36590: LD_INT 1
36592: ARRAY
36593: PUSH
36594: LD_INT 2
36596: ARRAY
36597: EQUAL
36598: AND
36599: PUSH
36600: LD_VAR 0 5
36604: PUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 437
36614: PUSH
36615: LD_INT 1
36617: ARRAY
36618: PUSH
36619: LD_INT 3
36621: ARRAY
36622: EQUAL
36623: AND
36624: IFFALSE 36634
// result := true end ;
36626: LD_ADDR_VAR 0 3
36630: PUSH
36631: LD_INT 1
36633: ST_TO_ADDR
// end ;
36634: LD_VAR 0 3
36638: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36639: LD_INT 0
36641: PPUSH
// result := false ;
36642: LD_ADDR_VAR 0 4
36646: PUSH
36647: LD_INT 0
36649: ST_TO_ADDR
// if GetTaskList ( unit ) then
36650: LD_VAR 0 1
36654: PPUSH
36655: CALL_OW 437
36659: IFFALSE 36742
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36661: LD_STRING M
36663: PUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL_OW 437
36673: PUSH
36674: LD_INT 1
36676: ARRAY
36677: PUSH
36678: LD_INT 1
36680: ARRAY
36681: EQUAL
36682: PUSH
36683: LD_VAR 0 2
36687: PUSH
36688: LD_VAR 0 1
36692: PPUSH
36693: CALL_OW 437
36697: PUSH
36698: LD_INT 1
36700: ARRAY
36701: PUSH
36702: LD_INT 2
36704: ARRAY
36705: EQUAL
36706: AND
36707: PUSH
36708: LD_VAR 0 3
36712: PUSH
36713: LD_VAR 0 1
36717: PPUSH
36718: CALL_OW 437
36722: PUSH
36723: LD_INT 1
36725: ARRAY
36726: PUSH
36727: LD_INT 3
36729: ARRAY
36730: EQUAL
36731: AND
36732: IFFALSE 36742
// result := true ;
36734: LD_ADDR_VAR 0 4
36738: PUSH
36739: LD_INT 1
36741: ST_TO_ADDR
// end ; end ;
36742: LD_VAR 0 4
36746: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36747: LD_INT 0
36749: PPUSH
36750: PPUSH
36751: PPUSH
36752: PPUSH
// if not unit or not area then
36753: LD_VAR 0 1
36757: NOT
36758: PUSH
36759: LD_VAR 0 2
36763: NOT
36764: OR
36765: IFFALSE 36769
// exit ;
36767: GO 36932
// tmp := AreaToList ( area , i ) ;
36769: LD_ADDR_VAR 0 6
36773: PUSH
36774: LD_VAR 0 2
36778: PPUSH
36779: LD_VAR 0 5
36783: PPUSH
36784: CALL_OW 517
36788: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36789: LD_ADDR_VAR 0 5
36793: PUSH
36794: DOUBLE
36795: LD_INT 1
36797: DEC
36798: ST_TO_ADDR
36799: LD_VAR 0 6
36803: PUSH
36804: LD_INT 1
36806: ARRAY
36807: PUSH
36808: FOR_TO
36809: IFFALSE 36930
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36811: LD_ADDR_VAR 0 7
36815: PUSH
36816: LD_VAR 0 6
36820: PUSH
36821: LD_INT 1
36823: ARRAY
36824: PUSH
36825: LD_VAR 0 5
36829: ARRAY
36830: PUSH
36831: LD_VAR 0 6
36835: PUSH
36836: LD_INT 2
36838: ARRAY
36839: PUSH
36840: LD_VAR 0 5
36844: ARRAY
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36850: LD_INT 92
36852: PUSH
36853: LD_VAR 0 7
36857: PUSH
36858: LD_INT 1
36860: ARRAY
36861: PUSH
36862: LD_VAR 0 7
36866: PUSH
36867: LD_INT 2
36869: ARRAY
36870: PUSH
36871: LD_INT 3
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: PPUSH
36880: CALL_OW 69
36884: PUSH
36885: LD_INT 0
36887: EQUAL
36888: IFFALSE 36928
// begin PlaceUnitArea ( unit , area , mode ) ;
36890: LD_VAR 0 1
36894: PPUSH
36895: LD_VAR 0 2
36899: PPUSH
36900: LD_VAR 0 3
36904: PPUSH
36905: CALL_OW 49
// result := IsPlaced ( unit ) ;
36909: LD_ADDR_VAR 0 4
36913: PUSH
36914: LD_VAR 0 1
36918: PPUSH
36919: CALL_OW 305
36923: ST_TO_ADDR
// exit ;
36924: POP
36925: POP
36926: GO 36932
// end ; end ;
36928: GO 36808
36930: POP
36931: POP
// end ;
36932: LD_VAR 0 4
36936: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36937: LD_INT 0
36939: PPUSH
36940: PPUSH
36941: PPUSH
// if not side or side > 8 then
36942: LD_VAR 0 1
36946: NOT
36947: PUSH
36948: LD_VAR 0 1
36952: PUSH
36953: LD_INT 8
36955: GREATER
36956: OR
36957: IFFALSE 36961
// exit ;
36959: GO 37148
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36961: LD_ADDR_VAR 0 4
36965: PUSH
36966: LD_INT 22
36968: PUSH
36969: LD_VAR 0 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 21
36980: PUSH
36981: LD_INT 3
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PPUSH
36992: CALL_OW 69
36996: ST_TO_ADDR
// if not tmp then
36997: LD_VAR 0 4
37001: NOT
37002: IFFALSE 37006
// exit ;
37004: GO 37148
// enable_addtolog := true ;
37006: LD_ADDR_OWVAR 81
37010: PUSH
37011: LD_INT 1
37013: ST_TO_ADDR
// AddToLog ( [ ) ;
37014: LD_STRING [
37016: PPUSH
37017: CALL_OW 561
// for i in tmp do
37021: LD_ADDR_VAR 0 3
37025: PUSH
37026: LD_VAR 0 4
37030: PUSH
37031: FOR_IN
37032: IFFALSE 37139
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37034: LD_STRING [
37036: PUSH
37037: LD_VAR 0 3
37041: PPUSH
37042: CALL_OW 266
37046: STR
37047: PUSH
37048: LD_STRING , 
37050: STR
37051: PUSH
37052: LD_VAR 0 3
37056: PPUSH
37057: CALL_OW 250
37061: STR
37062: PUSH
37063: LD_STRING , 
37065: STR
37066: PUSH
37067: LD_VAR 0 3
37071: PPUSH
37072: CALL_OW 251
37076: STR
37077: PUSH
37078: LD_STRING , 
37080: STR
37081: PUSH
37082: LD_VAR 0 3
37086: PPUSH
37087: CALL_OW 254
37091: STR
37092: PUSH
37093: LD_STRING , 
37095: STR
37096: PUSH
37097: LD_VAR 0 3
37101: PPUSH
37102: LD_INT 1
37104: PPUSH
37105: CALL_OW 268
37109: STR
37110: PUSH
37111: LD_STRING , 
37113: STR
37114: PUSH
37115: LD_VAR 0 3
37119: PPUSH
37120: LD_INT 2
37122: PPUSH
37123: CALL_OW 268
37127: STR
37128: PUSH
37129: LD_STRING ],
37131: STR
37132: PPUSH
37133: CALL_OW 561
// end ;
37137: GO 37031
37139: POP
37140: POP
// AddToLog ( ]; ) ;
37141: LD_STRING ];
37143: PPUSH
37144: CALL_OW 561
// end ;
37148: LD_VAR 0 2
37152: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37153: LD_INT 0
37155: PPUSH
37156: PPUSH
37157: PPUSH
37158: PPUSH
37159: PPUSH
// if not area or not rate or not max then
37160: LD_VAR 0 1
37164: NOT
37165: PUSH
37166: LD_VAR 0 2
37170: NOT
37171: OR
37172: PUSH
37173: LD_VAR 0 4
37177: NOT
37178: OR
37179: IFFALSE 37183
// exit ;
37181: GO 37372
// while 1 do
37183: LD_INT 1
37185: IFFALSE 37372
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37187: LD_ADDR_VAR 0 9
37191: PUSH
37192: LD_VAR 0 1
37196: PPUSH
37197: LD_INT 1
37199: PPUSH
37200: CALL_OW 287
37204: PUSH
37205: LD_INT 10
37207: MUL
37208: ST_TO_ADDR
// r := rate / 10 ;
37209: LD_ADDR_VAR 0 7
37213: PUSH
37214: LD_VAR 0 2
37218: PUSH
37219: LD_INT 10
37221: DIVREAL
37222: ST_TO_ADDR
// time := 1 1$00 ;
37223: LD_ADDR_VAR 0 8
37227: PUSH
37228: LD_INT 2100
37230: ST_TO_ADDR
// if amount < min then
37231: LD_VAR 0 9
37235: PUSH
37236: LD_VAR 0 3
37240: LESS
37241: IFFALSE 37259
// r := r * 2 else
37243: LD_ADDR_VAR 0 7
37247: PUSH
37248: LD_VAR 0 7
37252: PUSH
37253: LD_INT 2
37255: MUL
37256: ST_TO_ADDR
37257: GO 37285
// if amount > max then
37259: LD_VAR 0 9
37263: PUSH
37264: LD_VAR 0 4
37268: GREATER
37269: IFFALSE 37285
// r := r / 2 ;
37271: LD_ADDR_VAR 0 7
37275: PUSH
37276: LD_VAR 0 7
37280: PUSH
37281: LD_INT 2
37283: DIVREAL
37284: ST_TO_ADDR
// time := time / r ;
37285: LD_ADDR_VAR 0 8
37289: PUSH
37290: LD_VAR 0 8
37294: PUSH
37295: LD_VAR 0 7
37299: DIVREAL
37300: ST_TO_ADDR
// if time < 0 then
37301: LD_VAR 0 8
37305: PUSH
37306: LD_INT 0
37308: LESS
37309: IFFALSE 37326
// time := time * - 1 ;
37311: LD_ADDR_VAR 0 8
37315: PUSH
37316: LD_VAR 0 8
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: MUL
37325: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37326: LD_VAR 0 8
37330: PUSH
37331: LD_INT 35
37333: PPUSH
37334: LD_INT 875
37336: PPUSH
37337: CALL_OW 12
37341: PLUS
37342: PPUSH
37343: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37347: LD_INT 1
37349: PPUSH
37350: LD_INT 5
37352: PPUSH
37353: CALL_OW 12
37357: PPUSH
37358: LD_VAR 0 1
37362: PPUSH
37363: LD_INT 1
37365: PPUSH
37366: CALL_OW 55
// end ;
37370: GO 37183
// end ;
37372: LD_VAR 0 5
37376: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37377: LD_INT 0
37379: PPUSH
37380: PPUSH
37381: PPUSH
37382: PPUSH
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
// if not turrets or not factories then
37387: LD_VAR 0 1
37391: NOT
37392: PUSH
37393: LD_VAR 0 2
37397: NOT
37398: OR
37399: IFFALSE 37403
// exit ;
37401: GO 37710
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37403: LD_ADDR_VAR 0 10
37407: PUSH
37408: LD_INT 5
37410: PUSH
37411: LD_INT 6
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: LD_INT 4
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 3
37430: PUSH
37431: LD_INT 5
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 24
37445: PUSH
37446: LD_INT 25
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 23
37455: PUSH
37456: LD_INT 27
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 42
37469: PUSH
37470: LD_INT 43
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 44
37479: PUSH
37480: LD_INT 46
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 45
37489: PUSH
37490: LD_INT 47
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: ST_TO_ADDR
// result := [ ] ;
37507: LD_ADDR_VAR 0 3
37511: PUSH
37512: EMPTY
37513: ST_TO_ADDR
// for i in turrets do
37514: LD_ADDR_VAR 0 4
37518: PUSH
37519: LD_VAR 0 1
37523: PUSH
37524: FOR_IN
37525: IFFALSE 37708
// begin nat := GetNation ( i ) ;
37527: LD_ADDR_VAR 0 7
37531: PUSH
37532: LD_VAR 0 4
37536: PPUSH
37537: CALL_OW 248
37541: ST_TO_ADDR
// weapon := 0 ;
37542: LD_ADDR_VAR 0 8
37546: PUSH
37547: LD_INT 0
37549: ST_TO_ADDR
// if not nat then
37550: LD_VAR 0 7
37554: NOT
37555: IFFALSE 37559
// continue ;
37557: GO 37524
// for j in list [ nat ] do
37559: LD_ADDR_VAR 0 5
37563: PUSH
37564: LD_VAR 0 10
37568: PUSH
37569: LD_VAR 0 7
37573: ARRAY
37574: PUSH
37575: FOR_IN
37576: IFFALSE 37617
// if GetBWeapon ( i ) = j [ 1 ] then
37578: LD_VAR 0 4
37582: PPUSH
37583: CALL_OW 269
37587: PUSH
37588: LD_VAR 0 5
37592: PUSH
37593: LD_INT 1
37595: ARRAY
37596: EQUAL
37597: IFFALSE 37615
// begin weapon := j [ 2 ] ;
37599: LD_ADDR_VAR 0 8
37603: PUSH
37604: LD_VAR 0 5
37608: PUSH
37609: LD_INT 2
37611: ARRAY
37612: ST_TO_ADDR
// break ;
37613: GO 37617
// end ;
37615: GO 37575
37617: POP
37618: POP
// if not weapon then
37619: LD_VAR 0 8
37623: NOT
37624: IFFALSE 37628
// continue ;
37626: GO 37524
// for k in factories do
37628: LD_ADDR_VAR 0 6
37632: PUSH
37633: LD_VAR 0 2
37637: PUSH
37638: FOR_IN
37639: IFFALSE 37704
// begin weapons := AvailableWeaponList ( k ) ;
37641: LD_ADDR_VAR 0 9
37645: PUSH
37646: LD_VAR 0 6
37650: PPUSH
37651: CALL_OW 478
37655: ST_TO_ADDR
// if not weapons then
37656: LD_VAR 0 9
37660: NOT
37661: IFFALSE 37665
// continue ;
37663: GO 37638
// if weapon in weapons then
37665: LD_VAR 0 8
37669: PUSH
37670: LD_VAR 0 9
37674: IN
37675: IFFALSE 37702
// begin result := [ i , weapon ] ;
37677: LD_ADDR_VAR 0 3
37681: PUSH
37682: LD_VAR 0 4
37686: PUSH
37687: LD_VAR 0 8
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// exit ;
37696: POP
37697: POP
37698: POP
37699: POP
37700: GO 37710
// end ; end ;
37702: GO 37638
37704: POP
37705: POP
// end ;
37706: GO 37524
37708: POP
37709: POP
// end ;
37710: LD_VAR 0 3
37714: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37715: LD_INT 0
37717: PPUSH
// if not side or side > 8 then
37718: LD_VAR 0 3
37722: NOT
37723: PUSH
37724: LD_VAR 0 3
37728: PUSH
37729: LD_INT 8
37731: GREATER
37732: OR
37733: IFFALSE 37737
// exit ;
37735: GO 37796
// if not range then
37737: LD_VAR 0 4
37741: NOT
37742: IFFALSE 37753
// range := - 12 ;
37744: LD_ADDR_VAR 0 4
37748: PUSH
37749: LD_INT 12
37751: NEG
37752: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37753: LD_VAR 0 1
37757: PPUSH
37758: LD_VAR 0 2
37762: PPUSH
37763: LD_VAR 0 3
37767: PPUSH
37768: LD_VAR 0 4
37772: PPUSH
37773: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37777: LD_VAR 0 1
37781: PPUSH
37782: LD_VAR 0 2
37786: PPUSH
37787: LD_VAR 0 3
37791: PPUSH
37792: CALL_OW 331
// end ;
37796: LD_VAR 0 5
37800: RET
// export function Video ( mode ) ; begin
37801: LD_INT 0
37803: PPUSH
// ingame_video = mode ;
37804: LD_ADDR_OWVAR 52
37808: PUSH
37809: LD_VAR 0 1
37813: ST_TO_ADDR
// interface_hidden = mode ;
37814: LD_ADDR_OWVAR 54
37818: PUSH
37819: LD_VAR 0 1
37823: ST_TO_ADDR
// end ;
37824: LD_VAR 0 2
37828: RET
// export function Join ( array , element ) ; begin
37829: LD_INT 0
37831: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37832: LD_ADDR_VAR 0 3
37836: PUSH
37837: LD_VAR 0 1
37841: PPUSH
37842: LD_VAR 0 1
37846: PUSH
37847: LD_INT 1
37849: PLUS
37850: PPUSH
37851: LD_VAR 0 2
37855: PPUSH
37856: CALL_OW 1
37860: ST_TO_ADDR
// end ;
37861: LD_VAR 0 3
37865: RET
// export function JoinUnion ( array , element ) ; begin
37866: LD_INT 0
37868: PPUSH
// result := array union element ;
37869: LD_ADDR_VAR 0 3
37873: PUSH
37874: LD_VAR 0 1
37878: PUSH
37879: LD_VAR 0 2
37883: UNION
37884: ST_TO_ADDR
// end ;
37885: LD_VAR 0 3
37889: RET
// export function GetBehemoths ( side ) ; begin
37890: LD_INT 0
37892: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37893: LD_ADDR_VAR 0 2
37897: PUSH
37898: LD_INT 22
37900: PUSH
37901: LD_VAR 0 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 31
37912: PUSH
37913: LD_INT 25
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PPUSH
37924: CALL_OW 69
37928: ST_TO_ADDR
// end ;
37929: LD_VAR 0 2
37933: RET
// export function Shuffle ( array ) ; var i , index ; begin
37934: LD_INT 0
37936: PPUSH
37937: PPUSH
37938: PPUSH
// result := [ ] ;
37939: LD_ADDR_VAR 0 2
37943: PUSH
37944: EMPTY
37945: ST_TO_ADDR
// if not array then
37946: LD_VAR 0 1
37950: NOT
37951: IFFALSE 37955
// exit ;
37953: GO 38054
// Randomize ;
37955: CALL_OW 10
// for i = array downto 1 do
37959: LD_ADDR_VAR 0 3
37963: PUSH
37964: DOUBLE
37965: LD_VAR 0 1
37969: INC
37970: ST_TO_ADDR
37971: LD_INT 1
37973: PUSH
37974: FOR_DOWNTO
37975: IFFALSE 38052
// begin index := rand ( 1 , array ) ;
37977: LD_ADDR_VAR 0 4
37981: PUSH
37982: LD_INT 1
37984: PPUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 12
37994: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37995: LD_ADDR_VAR 0 2
37999: PUSH
38000: LD_VAR 0 2
38004: PPUSH
38005: LD_VAR 0 2
38009: PUSH
38010: LD_INT 1
38012: PLUS
38013: PPUSH
38014: LD_VAR 0 1
38018: PUSH
38019: LD_VAR 0 4
38023: ARRAY
38024: PPUSH
38025: CALL_OW 2
38029: ST_TO_ADDR
// array := Delete ( array , index ) ;
38030: LD_ADDR_VAR 0 1
38034: PUSH
38035: LD_VAR 0 1
38039: PPUSH
38040: LD_VAR 0 4
38044: PPUSH
38045: CALL_OW 3
38049: ST_TO_ADDR
// end ;
38050: GO 37974
38052: POP
38053: POP
// end ;
38054: LD_VAR 0 2
38058: RET
// export function GetBaseMaterials ( base ) ; begin
38059: LD_INT 0
38061: PPUSH
// result := [ 0 , 0 , 0 ] ;
38062: LD_ADDR_VAR 0 2
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: ST_TO_ADDR
// if not base then
38081: LD_VAR 0 1
38085: NOT
38086: IFFALSE 38090
// exit ;
38088: GO 38139
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38090: LD_ADDR_VAR 0 2
38094: PUSH
38095: LD_VAR 0 1
38099: PPUSH
38100: LD_INT 1
38102: PPUSH
38103: CALL_OW 275
38107: PUSH
38108: LD_VAR 0 1
38112: PPUSH
38113: LD_INT 2
38115: PPUSH
38116: CALL_OW 275
38120: PUSH
38121: LD_VAR 0 1
38125: PPUSH
38126: LD_INT 3
38128: PPUSH
38129: CALL_OW 275
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// end ;
38139: LD_VAR 0 2
38143: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38144: LD_INT 0
38146: PPUSH
38147: PPUSH
// result := array ;
38148: LD_ADDR_VAR 0 3
38152: PUSH
38153: LD_VAR 0 1
38157: ST_TO_ADDR
// if size >= result then
38158: LD_VAR 0 2
38162: PUSH
38163: LD_VAR 0 3
38167: GREATEREQUAL
38168: IFFALSE 38172
// exit ;
38170: GO 38222
// if size then
38172: LD_VAR 0 2
38176: IFFALSE 38222
// for i := array downto size do
38178: LD_ADDR_VAR 0 4
38182: PUSH
38183: DOUBLE
38184: LD_VAR 0 1
38188: INC
38189: ST_TO_ADDR
38190: LD_VAR 0 2
38194: PUSH
38195: FOR_DOWNTO
38196: IFFALSE 38220
// result := Delete ( result , result ) ;
38198: LD_ADDR_VAR 0 3
38202: PUSH
38203: LD_VAR 0 3
38207: PPUSH
38208: LD_VAR 0 3
38212: PPUSH
38213: CALL_OW 3
38217: ST_TO_ADDR
38218: GO 38195
38220: POP
38221: POP
// end ;
38222: LD_VAR 0 3
38226: RET
// export function ComExit ( unit ) ; var tmp ; begin
38227: LD_INT 0
38229: PPUSH
38230: PPUSH
// if not IsInUnit ( unit ) then
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 310
38240: NOT
38241: IFFALSE 38245
// exit ;
38243: GO 38305
// tmp := IsInUnit ( unit ) ;
38245: LD_ADDR_VAR 0 3
38249: PUSH
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL_OW 310
38259: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38260: LD_VAR 0 3
38264: PPUSH
38265: CALL_OW 247
38269: PUSH
38270: LD_INT 2
38272: EQUAL
38273: IFFALSE 38286
// ComExitVehicle ( unit ) else
38275: LD_VAR 0 1
38279: PPUSH
38280: CALL_OW 121
38284: GO 38295
// ComExitBuilding ( unit ) ;
38286: LD_VAR 0 1
38290: PPUSH
38291: CALL_OW 122
// result := tmp ;
38295: LD_ADDR_VAR 0 2
38299: PUSH
38300: LD_VAR 0 3
38304: ST_TO_ADDR
// end ;
38305: LD_VAR 0 2
38309: RET
// export function ComExitAll ( units ) ; var i ; begin
38310: LD_INT 0
38312: PPUSH
38313: PPUSH
// if not units then
38314: LD_VAR 0 1
38318: NOT
38319: IFFALSE 38323
// exit ;
38321: GO 38349
// for i in units do
38323: LD_ADDR_VAR 0 3
38327: PUSH
38328: LD_VAR 0 1
38332: PUSH
38333: FOR_IN
38334: IFFALSE 38347
// ComExit ( i ) ;
38336: LD_VAR 0 3
38340: PPUSH
38341: CALL 38227 0 1
38345: GO 38333
38347: POP
38348: POP
// end ;
38349: LD_VAR 0 2
38353: RET
// export function ResetHc ; begin
38354: LD_INT 0
38356: PPUSH
// InitHc ;
38357: CALL_OW 19
// hc_importance := 0 ;
38361: LD_ADDR_OWVAR 32
38365: PUSH
38366: LD_INT 0
38368: ST_TO_ADDR
// end ;
38369: LD_VAR 0 1
38373: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38374: LD_INT 0
38376: PPUSH
38377: PPUSH
38378: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38379: LD_ADDR_VAR 0 6
38383: PUSH
38384: LD_VAR 0 1
38388: PUSH
38389: LD_VAR 0 3
38393: PLUS
38394: PUSH
38395: LD_INT 2
38397: DIV
38398: ST_TO_ADDR
// if _x < 0 then
38399: LD_VAR 0 6
38403: PUSH
38404: LD_INT 0
38406: LESS
38407: IFFALSE 38424
// _x := _x * - 1 ;
38409: LD_ADDR_VAR 0 6
38413: PUSH
38414: LD_VAR 0 6
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: MUL
38423: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38424: LD_ADDR_VAR 0 7
38428: PUSH
38429: LD_VAR 0 2
38433: PUSH
38434: LD_VAR 0 4
38438: PLUS
38439: PUSH
38440: LD_INT 2
38442: DIV
38443: ST_TO_ADDR
// if _y < 0 then
38444: LD_VAR 0 7
38448: PUSH
38449: LD_INT 0
38451: LESS
38452: IFFALSE 38469
// _y := _y * - 1 ;
38454: LD_ADDR_VAR 0 7
38458: PUSH
38459: LD_VAR 0 7
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: MUL
38468: ST_TO_ADDR
// result := [ _x , _y ] ;
38469: LD_ADDR_VAR 0 5
38473: PUSH
38474: LD_VAR 0 6
38478: PUSH
38479: LD_VAR 0 7
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: ST_TO_ADDR
// end ;
38488: LD_VAR 0 5
38492: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38493: LD_INT 0
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
// task := GetTaskList ( unit ) ;
38499: LD_ADDR_VAR 0 7
38503: PUSH
38504: LD_VAR 0 1
38508: PPUSH
38509: CALL_OW 437
38513: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38514: LD_VAR 0 7
38518: NOT
38519: PUSH
38520: LD_VAR 0 1
38524: PPUSH
38525: LD_VAR 0 2
38529: PPUSH
38530: CALL_OW 308
38534: NOT
38535: AND
38536: IFFALSE 38540
// exit ;
38538: GO 38658
// if IsInArea ( unit , area ) then
38540: LD_VAR 0 1
38544: PPUSH
38545: LD_VAR 0 2
38549: PPUSH
38550: CALL_OW 308
38554: IFFALSE 38572
// begin ComMoveToArea ( unit , goAway ) ;
38556: LD_VAR 0 1
38560: PPUSH
38561: LD_VAR 0 3
38565: PPUSH
38566: CALL_OW 113
// exit ;
38570: GO 38658
// end ; if task [ 1 ] [ 1 ] <> M then
38572: LD_VAR 0 7
38576: PUSH
38577: LD_INT 1
38579: ARRAY
38580: PUSH
38581: LD_INT 1
38583: ARRAY
38584: PUSH
38585: LD_STRING M
38587: NONEQUAL
38588: IFFALSE 38592
// exit ;
38590: GO 38658
// x := task [ 1 ] [ 2 ] ;
38592: LD_ADDR_VAR 0 5
38596: PUSH
38597: LD_VAR 0 7
38601: PUSH
38602: LD_INT 1
38604: ARRAY
38605: PUSH
38606: LD_INT 2
38608: ARRAY
38609: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38610: LD_ADDR_VAR 0 6
38614: PUSH
38615: LD_VAR 0 7
38619: PUSH
38620: LD_INT 1
38622: ARRAY
38623: PUSH
38624: LD_INT 3
38626: ARRAY
38627: ST_TO_ADDR
// if InArea ( x , y , area ) then
38628: LD_VAR 0 5
38632: PPUSH
38633: LD_VAR 0 6
38637: PPUSH
38638: LD_VAR 0 2
38642: PPUSH
38643: CALL_OW 309
38647: IFFALSE 38658
// ComStop ( unit ) ;
38649: LD_VAR 0 1
38653: PPUSH
38654: CALL_OW 141
// end ;
38658: LD_VAR 0 4
38662: RET
// export function Abs ( value ) ; begin
38663: LD_INT 0
38665: PPUSH
// result := value ;
38666: LD_ADDR_VAR 0 2
38670: PUSH
38671: LD_VAR 0 1
38675: ST_TO_ADDR
// if value < 0 then
38676: LD_VAR 0 1
38680: PUSH
38681: LD_INT 0
38683: LESS
38684: IFFALSE 38701
// result := value * - 1 ;
38686: LD_ADDR_VAR 0 2
38690: PUSH
38691: LD_VAR 0 1
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: MUL
38700: ST_TO_ADDR
// end ;
38701: LD_VAR 0 2
38705: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38706: LD_INT 0
38708: PPUSH
38709: PPUSH
38710: PPUSH
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
// if not unit or not building then
38716: LD_VAR 0 1
38720: NOT
38721: PUSH
38722: LD_VAR 0 2
38726: NOT
38727: OR
38728: IFFALSE 38732
// exit ;
38730: GO 38958
// x := GetX ( building ) ;
38732: LD_ADDR_VAR 0 4
38736: PUSH
38737: LD_VAR 0 2
38741: PPUSH
38742: CALL_OW 250
38746: ST_TO_ADDR
// y := GetY ( building ) ;
38747: LD_ADDR_VAR 0 6
38751: PUSH
38752: LD_VAR 0 2
38756: PPUSH
38757: CALL_OW 251
38761: ST_TO_ADDR
// d := GetDir ( building ) ;
38762: LD_ADDR_VAR 0 8
38766: PUSH
38767: LD_VAR 0 2
38771: PPUSH
38772: CALL_OW 254
38776: ST_TO_ADDR
// r := 4 ;
38777: LD_ADDR_VAR 0 9
38781: PUSH
38782: LD_INT 4
38784: ST_TO_ADDR
// for i := 1 to 5 do
38785: LD_ADDR_VAR 0 10
38789: PUSH
38790: DOUBLE
38791: LD_INT 1
38793: DEC
38794: ST_TO_ADDR
38795: LD_INT 5
38797: PUSH
38798: FOR_TO
38799: IFFALSE 38956
// begin _x := ShiftX ( x , d , r + i ) ;
38801: LD_ADDR_VAR 0 5
38805: PUSH
38806: LD_VAR 0 4
38810: PPUSH
38811: LD_VAR 0 8
38815: PPUSH
38816: LD_VAR 0 9
38820: PUSH
38821: LD_VAR 0 10
38825: PLUS
38826: PPUSH
38827: CALL_OW 272
38831: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38832: LD_ADDR_VAR 0 7
38836: PUSH
38837: LD_VAR 0 6
38841: PPUSH
38842: LD_VAR 0 8
38846: PPUSH
38847: LD_VAR 0 9
38851: PUSH
38852: LD_VAR 0 10
38856: PLUS
38857: PPUSH
38858: CALL_OW 273
38862: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38863: LD_VAR 0 5
38867: PPUSH
38868: LD_VAR 0 7
38872: PPUSH
38873: CALL_OW 488
38877: PUSH
38878: LD_VAR 0 5
38882: PPUSH
38883: LD_VAR 0 7
38887: PPUSH
38888: CALL_OW 428
38892: PPUSH
38893: CALL_OW 247
38897: PUSH
38898: LD_INT 3
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: IN
38908: NOT
38909: AND
38910: IFFALSE 38954
// begin ComMoveXY ( unit , _x , _y ) ;
38912: LD_VAR 0 1
38916: PPUSH
38917: LD_VAR 0 5
38921: PPUSH
38922: LD_VAR 0 7
38926: PPUSH
38927: CALL_OW 111
// result := [ _x , _y ] ;
38931: LD_ADDR_VAR 0 3
38935: PUSH
38936: LD_VAR 0 5
38940: PUSH
38941: LD_VAR 0 7
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: ST_TO_ADDR
// exit ;
38950: POP
38951: POP
38952: GO 38958
// end ; end ;
38954: GO 38798
38956: POP
38957: POP
// end ;
38958: LD_VAR 0 3
38962: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38963: LD_INT 0
38965: PPUSH
38966: PPUSH
38967: PPUSH
// result := 0 ;
38968: LD_ADDR_VAR 0 3
38972: PUSH
38973: LD_INT 0
38975: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38976: LD_VAR 0 1
38980: PUSH
38981: LD_INT 0
38983: LESS
38984: PUSH
38985: LD_VAR 0 1
38989: PUSH
38990: LD_INT 8
38992: GREATER
38993: OR
38994: PUSH
38995: LD_VAR 0 2
38999: PUSH
39000: LD_INT 0
39002: LESS
39003: OR
39004: PUSH
39005: LD_VAR 0 2
39009: PUSH
39010: LD_INT 8
39012: GREATER
39013: OR
39014: IFFALSE 39018
// exit ;
39016: GO 39093
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39018: LD_ADDR_VAR 0 4
39022: PUSH
39023: LD_INT 22
39025: PUSH
39026: LD_VAR 0 2
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PPUSH
39035: CALL_OW 69
39039: PUSH
39040: FOR_IN
39041: IFFALSE 39091
// begin un := UnitShoot ( i ) ;
39043: LD_ADDR_VAR 0 5
39047: PUSH
39048: LD_VAR 0 4
39052: PPUSH
39053: CALL_OW 504
39057: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39058: LD_VAR 0 5
39062: PPUSH
39063: CALL_OW 255
39067: PUSH
39068: LD_VAR 0 1
39072: EQUAL
39073: IFFALSE 39089
// begin result := un ;
39075: LD_ADDR_VAR 0 3
39079: PUSH
39080: LD_VAR 0 5
39084: ST_TO_ADDR
// exit ;
39085: POP
39086: POP
39087: GO 39093
// end ; end ;
39089: GO 39040
39091: POP
39092: POP
// end ;
39093: LD_VAR 0 3
39097: RET
// export function GetCargoBay ( units ) ; begin
39098: LD_INT 0
39100: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39101: LD_ADDR_VAR 0 2
39105: PUSH
39106: LD_VAR 0 1
39110: PPUSH
39111: LD_INT 2
39113: PUSH
39114: LD_INT 34
39116: PUSH
39117: LD_INT 12
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 34
39126: PUSH
39127: LD_INT 51
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 34
39136: PUSH
39137: LD_INT 32
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 34
39146: PUSH
39147: LD_INT 89
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: PPUSH
39161: CALL_OW 72
39165: ST_TO_ADDR
// end ;
39166: LD_VAR 0 2
39170: RET
// export function Negate ( value ) ; begin
39171: LD_INT 0
39173: PPUSH
// result := not value ;
39174: LD_ADDR_VAR 0 2
39178: PUSH
39179: LD_VAR 0 1
39183: NOT
39184: ST_TO_ADDR
// end ;
39185: LD_VAR 0 2
39189: RET
// export function Inc ( value ) ; begin
39190: LD_INT 0
39192: PPUSH
// result := value + 1 ;
39193: LD_ADDR_VAR 0 2
39197: PUSH
39198: LD_VAR 0 1
39202: PUSH
39203: LD_INT 1
39205: PLUS
39206: ST_TO_ADDR
// end ;
39207: LD_VAR 0 2
39211: RET
// export function Dec ( value ) ; begin
39212: LD_INT 0
39214: PPUSH
// result := value - 1 ;
39215: LD_ADDR_VAR 0 2
39219: PUSH
39220: LD_VAR 0 1
39224: PUSH
39225: LD_INT 1
39227: MINUS
39228: ST_TO_ADDR
// end ;
39229: LD_VAR 0 2
39233: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39234: LD_INT 0
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
39240: PPUSH
39241: PPUSH
39242: PPUSH
39243: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39244: LD_VAR 0 1
39248: PPUSH
39249: LD_VAR 0 2
39253: PPUSH
39254: CALL_OW 488
39258: NOT
39259: PUSH
39260: LD_VAR 0 3
39264: PPUSH
39265: LD_VAR 0 4
39269: PPUSH
39270: CALL_OW 488
39274: NOT
39275: OR
39276: IFFALSE 39289
// begin result := - 1 ;
39278: LD_ADDR_VAR 0 5
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: ST_TO_ADDR
// exit ;
39287: GO 39524
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39289: LD_ADDR_VAR 0 12
39293: PUSH
39294: LD_VAR 0 1
39298: PPUSH
39299: LD_VAR 0 2
39303: PPUSH
39304: LD_VAR 0 3
39308: PPUSH
39309: LD_VAR 0 4
39313: PPUSH
39314: CALL 38374 0 4
39318: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39319: LD_ADDR_VAR 0 11
39323: PUSH
39324: LD_VAR 0 1
39328: PPUSH
39329: LD_VAR 0 2
39333: PPUSH
39334: LD_VAR 0 12
39338: PUSH
39339: LD_INT 1
39341: ARRAY
39342: PPUSH
39343: LD_VAR 0 12
39347: PUSH
39348: LD_INT 2
39350: ARRAY
39351: PPUSH
39352: CALL_OW 298
39356: ST_TO_ADDR
// distance := 9999 ;
39357: LD_ADDR_VAR 0 10
39361: PUSH
39362: LD_INT 9999
39364: ST_TO_ADDR
// for i := 0 to 5 do
39365: LD_ADDR_VAR 0 6
39369: PUSH
39370: DOUBLE
39371: LD_INT 0
39373: DEC
39374: ST_TO_ADDR
39375: LD_INT 5
39377: PUSH
39378: FOR_TO
39379: IFFALSE 39522
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39381: LD_ADDR_VAR 0 7
39385: PUSH
39386: LD_VAR 0 1
39390: PPUSH
39391: LD_VAR 0 6
39395: PPUSH
39396: LD_VAR 0 11
39400: PPUSH
39401: CALL_OW 272
39405: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39406: LD_ADDR_VAR 0 8
39410: PUSH
39411: LD_VAR 0 2
39415: PPUSH
39416: LD_VAR 0 6
39420: PPUSH
39421: LD_VAR 0 11
39425: PPUSH
39426: CALL_OW 273
39430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39431: LD_VAR 0 7
39435: PPUSH
39436: LD_VAR 0 8
39440: PPUSH
39441: CALL_OW 488
39445: NOT
39446: IFFALSE 39450
// continue ;
39448: GO 39378
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39450: LD_ADDR_VAR 0 9
39454: PUSH
39455: LD_VAR 0 12
39459: PUSH
39460: LD_INT 1
39462: ARRAY
39463: PPUSH
39464: LD_VAR 0 12
39468: PUSH
39469: LD_INT 2
39471: ARRAY
39472: PPUSH
39473: LD_VAR 0 7
39477: PPUSH
39478: LD_VAR 0 8
39482: PPUSH
39483: CALL_OW 298
39487: ST_TO_ADDR
// if tmp < distance then
39488: LD_VAR 0 9
39492: PUSH
39493: LD_VAR 0 10
39497: LESS
39498: IFFALSE 39520
// begin result := i ;
39500: LD_ADDR_VAR 0 5
39504: PUSH
39505: LD_VAR 0 6
39509: ST_TO_ADDR
// distance := tmp ;
39510: LD_ADDR_VAR 0 10
39514: PUSH
39515: LD_VAR 0 9
39519: ST_TO_ADDR
// end ; end ;
39520: GO 39378
39522: POP
39523: POP
// end ;
39524: LD_VAR 0 5
39528: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39529: LD_INT 0
39531: PPUSH
39532: PPUSH
// if not driver or not IsInUnit ( driver ) then
39533: LD_VAR 0 1
39537: NOT
39538: PUSH
39539: LD_VAR 0 1
39543: PPUSH
39544: CALL_OW 310
39548: NOT
39549: OR
39550: IFFALSE 39554
// exit ;
39552: GO 39644
// vehicle := IsInUnit ( driver ) ;
39554: LD_ADDR_VAR 0 3
39558: PUSH
39559: LD_VAR 0 1
39563: PPUSH
39564: CALL_OW 310
39568: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39569: LD_VAR 0 1
39573: PPUSH
39574: LD_STRING \
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: PUSH
39604: LD_STRING E
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_VAR 0 3
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PPUSH
39640: CALL_OW 446
// end ;
39644: LD_VAR 0 2
39648: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39649: LD_INT 0
39651: PPUSH
39652: PPUSH
// if not driver or not IsInUnit ( driver ) then
39653: LD_VAR 0 1
39657: NOT
39658: PUSH
39659: LD_VAR 0 1
39663: PPUSH
39664: CALL_OW 310
39668: NOT
39669: OR
39670: IFFALSE 39674
// exit ;
39672: GO 39764
// vehicle := IsInUnit ( driver ) ;
39674: LD_ADDR_VAR 0 3
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 310
39688: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39689: LD_VAR 0 1
39693: PPUSH
39694: LD_STRING \
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: PUSH
39724: LD_STRING E
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_VAR 0 3
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PPUSH
39760: CALL_OW 447
// end ;
39764: LD_VAR 0 2
39768: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39769: LD_INT 0
39771: PPUSH
39772: PPUSH
39773: PPUSH
// tmp := [ ] ;
39774: LD_ADDR_VAR 0 5
39778: PUSH
39779: EMPTY
39780: ST_TO_ADDR
// for i in units do
39781: LD_ADDR_VAR 0 4
39785: PUSH
39786: LD_VAR 0 1
39790: PUSH
39791: FOR_IN
39792: IFFALSE 39830
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39794: LD_ADDR_VAR 0 5
39798: PUSH
39799: LD_VAR 0 5
39803: PPUSH
39804: LD_VAR 0 5
39808: PUSH
39809: LD_INT 1
39811: PLUS
39812: PPUSH
39813: LD_VAR 0 4
39817: PPUSH
39818: CALL_OW 256
39822: PPUSH
39823: CALL_OW 2
39827: ST_TO_ADDR
39828: GO 39791
39830: POP
39831: POP
// if not tmp then
39832: LD_VAR 0 5
39836: NOT
39837: IFFALSE 39841
// exit ;
39839: GO 39889
// if asc then
39841: LD_VAR 0 2
39845: IFFALSE 39869
// result := SortListByListAsc ( units , tmp ) else
39847: LD_ADDR_VAR 0 3
39851: PUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: LD_VAR 0 5
39861: PPUSH
39862: CALL_OW 76
39866: ST_TO_ADDR
39867: GO 39889
// result := SortListByListDesc ( units , tmp ) ;
39869: LD_ADDR_VAR 0 3
39873: PUSH
39874: LD_VAR 0 1
39878: PPUSH
39879: LD_VAR 0 5
39883: PPUSH
39884: CALL_OW 77
39888: ST_TO_ADDR
// end ;
39889: LD_VAR 0 3
39893: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39894: LD_INT 0
39896: PPUSH
39897: PPUSH
// task := GetTaskList ( mech ) ;
39898: LD_ADDR_VAR 0 4
39902: PUSH
39903: LD_VAR 0 1
39907: PPUSH
39908: CALL_OW 437
39912: ST_TO_ADDR
// if not task then
39913: LD_VAR 0 4
39917: NOT
39918: IFFALSE 39922
// exit ;
39920: GO 39964
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39922: LD_ADDR_VAR 0 3
39926: PUSH
39927: LD_VAR 0 4
39931: PUSH
39932: LD_INT 1
39934: ARRAY
39935: PUSH
39936: LD_INT 1
39938: ARRAY
39939: PUSH
39940: LD_STRING r
39942: EQUAL
39943: PUSH
39944: LD_VAR 0 4
39948: PUSH
39949: LD_INT 1
39951: ARRAY
39952: PUSH
39953: LD_INT 4
39955: ARRAY
39956: PUSH
39957: LD_VAR 0 2
39961: EQUAL
39962: AND
39963: ST_TO_ADDR
// end ;
39964: LD_VAR 0 3
39968: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39969: LD_INT 0
39971: PPUSH
// SetDir ( unit , d ) ;
39972: LD_VAR 0 1
39976: PPUSH
39977: LD_VAR 0 4
39981: PPUSH
39982: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39986: LD_VAR 0 1
39990: PPUSH
39991: LD_VAR 0 2
39995: PPUSH
39996: LD_VAR 0 3
40000: PPUSH
40001: LD_VAR 0 5
40005: PPUSH
40006: CALL_OW 48
// end ;
40010: LD_VAR 0 6
40014: RET
// export function ToNaturalNumber ( number ) ; begin
40015: LD_INT 0
40017: PPUSH
// result := number div 1 ;
40018: LD_ADDR_VAR 0 2
40022: PUSH
40023: LD_VAR 0 1
40027: PUSH
40028: LD_INT 1
40030: DIV
40031: ST_TO_ADDR
// if number < 0 then
40032: LD_VAR 0 1
40036: PUSH
40037: LD_INT 0
40039: LESS
40040: IFFALSE 40050
// result := 0 ;
40042: LD_ADDR_VAR 0 2
40046: PUSH
40047: LD_INT 0
40049: ST_TO_ADDR
// end ;
40050: LD_VAR 0 2
40054: RET
// export function SortByClass ( units , class ) ; var un ; begin
40055: LD_INT 0
40057: PPUSH
40058: PPUSH
// if not units or not class then
40059: LD_VAR 0 1
40063: NOT
40064: PUSH
40065: LD_VAR 0 2
40069: NOT
40070: OR
40071: IFFALSE 40075
// exit ;
40073: GO 40170
// result := [ ] ;
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: EMPTY
40081: ST_TO_ADDR
// for un in units do
40082: LD_ADDR_VAR 0 4
40086: PUSH
40087: LD_VAR 0 1
40091: PUSH
40092: FOR_IN
40093: IFFALSE 40168
// if GetClass ( un ) = class then
40095: LD_VAR 0 4
40099: PPUSH
40100: CALL_OW 257
40104: PUSH
40105: LD_VAR 0 2
40109: EQUAL
40110: IFFALSE 40137
// result := Insert ( result , 1 , un ) else
40112: LD_ADDR_VAR 0 3
40116: PUSH
40117: LD_VAR 0 3
40121: PPUSH
40122: LD_INT 1
40124: PPUSH
40125: LD_VAR 0 4
40129: PPUSH
40130: CALL_OW 2
40134: ST_TO_ADDR
40135: GO 40166
// result := Replace ( result , result + 1 , un ) ;
40137: LD_ADDR_VAR 0 3
40141: PUSH
40142: LD_VAR 0 3
40146: PPUSH
40147: LD_VAR 0 3
40151: PUSH
40152: LD_INT 1
40154: PLUS
40155: PPUSH
40156: LD_VAR 0 4
40160: PPUSH
40161: CALL_OW 1
40165: ST_TO_ADDR
40166: GO 40092
40168: POP
40169: POP
// end ;
40170: LD_VAR 0 3
40174: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40175: LD_INT 0
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
40183: PPUSH
// result := [ ] ;
40184: LD_ADDR_VAR 0 4
40188: PUSH
40189: EMPTY
40190: ST_TO_ADDR
// if x - r < 0 then
40191: LD_VAR 0 1
40195: PUSH
40196: LD_VAR 0 3
40200: MINUS
40201: PUSH
40202: LD_INT 0
40204: LESS
40205: IFFALSE 40217
// min_x := 0 else
40207: LD_ADDR_VAR 0 8
40211: PUSH
40212: LD_INT 0
40214: ST_TO_ADDR
40215: GO 40233
// min_x := x - r ;
40217: LD_ADDR_VAR 0 8
40221: PUSH
40222: LD_VAR 0 1
40226: PUSH
40227: LD_VAR 0 3
40231: MINUS
40232: ST_TO_ADDR
// if y - r < 0 then
40233: LD_VAR 0 2
40237: PUSH
40238: LD_VAR 0 3
40242: MINUS
40243: PUSH
40244: LD_INT 0
40246: LESS
40247: IFFALSE 40259
// min_y := 0 else
40249: LD_ADDR_VAR 0 7
40253: PUSH
40254: LD_INT 0
40256: ST_TO_ADDR
40257: GO 40275
// min_y := y - r ;
40259: LD_ADDR_VAR 0 7
40263: PUSH
40264: LD_VAR 0 2
40268: PUSH
40269: LD_VAR 0 3
40273: MINUS
40274: ST_TO_ADDR
// max_x := x + r ;
40275: LD_ADDR_VAR 0 9
40279: PUSH
40280: LD_VAR 0 1
40284: PUSH
40285: LD_VAR 0 3
40289: PLUS
40290: ST_TO_ADDR
// max_y := y + r ;
40291: LD_ADDR_VAR 0 10
40295: PUSH
40296: LD_VAR 0 2
40300: PUSH
40301: LD_VAR 0 3
40305: PLUS
40306: ST_TO_ADDR
// for _x = min_x to max_x do
40307: LD_ADDR_VAR 0 5
40311: PUSH
40312: DOUBLE
40313: LD_VAR 0 8
40317: DEC
40318: ST_TO_ADDR
40319: LD_VAR 0 9
40323: PUSH
40324: FOR_TO
40325: IFFALSE 40426
// for _y = min_y to max_y do
40327: LD_ADDR_VAR 0 6
40331: PUSH
40332: DOUBLE
40333: LD_VAR 0 7
40337: DEC
40338: ST_TO_ADDR
40339: LD_VAR 0 10
40343: PUSH
40344: FOR_TO
40345: IFFALSE 40422
// begin if not ValidHex ( _x , _y ) then
40347: LD_VAR 0 5
40351: PPUSH
40352: LD_VAR 0 6
40356: PPUSH
40357: CALL_OW 488
40361: NOT
40362: IFFALSE 40366
// continue ;
40364: GO 40344
// if GetResourceTypeXY ( _x , _y ) then
40366: LD_VAR 0 5
40370: PPUSH
40371: LD_VAR 0 6
40375: PPUSH
40376: CALL_OW 283
40380: IFFALSE 40420
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40382: LD_ADDR_VAR 0 4
40386: PUSH
40387: LD_VAR 0 4
40391: PPUSH
40392: LD_VAR 0 4
40396: PUSH
40397: LD_INT 1
40399: PLUS
40400: PPUSH
40401: LD_VAR 0 5
40405: PUSH
40406: LD_VAR 0 6
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PPUSH
40415: CALL_OW 1
40419: ST_TO_ADDR
// end ;
40420: GO 40344
40422: POP
40423: POP
40424: GO 40324
40426: POP
40427: POP
// end ;
40428: LD_VAR 0 4
40432: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40433: LD_INT 0
40435: PPUSH
40436: PPUSH
40437: PPUSH
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
// if not units then
40443: LD_VAR 0 1
40447: NOT
40448: IFFALSE 40452
// exit ;
40450: GO 40976
// result := UnitFilter ( units , [ f_ok ] ) ;
40452: LD_ADDR_VAR 0 3
40456: PUSH
40457: LD_VAR 0 1
40461: PPUSH
40462: LD_INT 50
40464: PUSH
40465: EMPTY
40466: LIST
40467: PPUSH
40468: CALL_OW 72
40472: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40473: LD_ADDR_VAR 0 8
40477: PUSH
40478: LD_VAR 0 1
40482: PUSH
40483: LD_INT 1
40485: ARRAY
40486: PPUSH
40487: CALL_OW 255
40491: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40492: LD_ADDR_VAR 0 10
40496: PUSH
40497: LD_INT 29
40499: PUSH
40500: LD_INT 91
40502: PUSH
40503: LD_INT 49
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: LIST
40510: ST_TO_ADDR
// if not result then
40511: LD_VAR 0 3
40515: NOT
40516: IFFALSE 40520
// exit ;
40518: GO 40976
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40520: LD_ADDR_VAR 0 5
40524: PUSH
40525: LD_INT 81
40527: PUSH
40528: LD_VAR 0 8
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PPUSH
40537: CALL_OW 69
40541: ST_TO_ADDR
// for i in result do
40542: LD_ADDR_VAR 0 4
40546: PUSH
40547: LD_VAR 0 3
40551: PUSH
40552: FOR_IN
40553: IFFALSE 40974
// begin tag := GetTag ( i ) + 1 ;
40555: LD_ADDR_VAR 0 9
40559: PUSH
40560: LD_VAR 0 4
40564: PPUSH
40565: CALL_OW 110
40569: PUSH
40570: LD_INT 1
40572: PLUS
40573: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40574: LD_ADDR_VAR 0 7
40578: PUSH
40579: LD_VAR 0 4
40583: PPUSH
40584: CALL_OW 250
40588: PPUSH
40589: LD_VAR 0 4
40593: PPUSH
40594: CALL_OW 251
40598: PPUSH
40599: LD_INT 6
40601: PPUSH
40602: CALL 40175 0 3
40606: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40607: LD_VAR 0 4
40611: PPUSH
40612: CALL_OW 247
40616: PUSH
40617: LD_INT 2
40619: EQUAL
40620: PUSH
40621: LD_VAR 0 7
40625: AND
40626: PUSH
40627: LD_VAR 0 4
40631: PPUSH
40632: CALL_OW 264
40636: PUSH
40637: LD_VAR 0 10
40641: IN
40642: NOT
40643: AND
40644: IFFALSE 40683
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40646: LD_VAR 0 4
40650: PPUSH
40651: LD_VAR 0 7
40655: PUSH
40656: LD_INT 1
40658: ARRAY
40659: PUSH
40660: LD_INT 1
40662: ARRAY
40663: PPUSH
40664: LD_VAR 0 7
40668: PUSH
40669: LD_INT 1
40671: ARRAY
40672: PUSH
40673: LD_INT 2
40675: ARRAY
40676: PPUSH
40677: CALL_OW 116
40681: GO 40972
// if path > tag then
40683: LD_VAR 0 2
40687: PUSH
40688: LD_VAR 0 9
40692: GREATER
40693: IFFALSE 40901
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40695: LD_ADDR_VAR 0 6
40699: PUSH
40700: LD_VAR 0 5
40704: PPUSH
40705: LD_INT 91
40707: PUSH
40708: LD_VAR 0 4
40712: PUSH
40713: LD_INT 8
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: LIST
40720: PPUSH
40721: CALL_OW 72
40725: ST_TO_ADDR
// if nearEnemy then
40726: LD_VAR 0 6
40730: IFFALSE 40799
// begin if GetWeapon ( i ) = ru_time_lapser then
40732: LD_VAR 0 4
40736: PPUSH
40737: CALL_OW 264
40741: PUSH
40742: LD_INT 49
40744: EQUAL
40745: IFFALSE 40773
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40747: LD_VAR 0 4
40751: PPUSH
40752: LD_VAR 0 6
40756: PPUSH
40757: LD_VAR 0 4
40761: PPUSH
40762: CALL_OW 74
40766: PPUSH
40767: CALL_OW 112
40771: GO 40797
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40773: LD_VAR 0 4
40777: PPUSH
40778: LD_VAR 0 6
40782: PPUSH
40783: LD_VAR 0 4
40787: PPUSH
40788: CALL_OW 74
40792: PPUSH
40793: CALL_OW 115
// end else
40797: GO 40899
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40799: LD_VAR 0 4
40803: PPUSH
40804: LD_VAR 0 2
40808: PUSH
40809: LD_VAR 0 9
40813: ARRAY
40814: PUSH
40815: LD_INT 1
40817: ARRAY
40818: PPUSH
40819: LD_VAR 0 2
40823: PUSH
40824: LD_VAR 0 9
40828: ARRAY
40829: PUSH
40830: LD_INT 2
40832: ARRAY
40833: PPUSH
40834: CALL_OW 297
40838: PUSH
40839: LD_INT 6
40841: GREATER
40842: IFFALSE 40885
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40844: LD_VAR 0 4
40848: PPUSH
40849: LD_VAR 0 2
40853: PUSH
40854: LD_VAR 0 9
40858: ARRAY
40859: PUSH
40860: LD_INT 1
40862: ARRAY
40863: PPUSH
40864: LD_VAR 0 2
40868: PUSH
40869: LD_VAR 0 9
40873: ARRAY
40874: PUSH
40875: LD_INT 2
40877: ARRAY
40878: PPUSH
40879: CALL_OW 114
40883: GO 40899
// SetTag ( i , tag ) ;
40885: LD_VAR 0 4
40889: PPUSH
40890: LD_VAR 0 9
40894: PPUSH
40895: CALL_OW 109
// end else
40899: GO 40972
// if enemy then
40901: LD_VAR 0 5
40905: IFFALSE 40972
// begin if GetWeapon ( i ) = ru_time_lapser then
40907: LD_VAR 0 4
40911: PPUSH
40912: CALL_OW 264
40916: PUSH
40917: LD_INT 49
40919: EQUAL
40920: IFFALSE 40948
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40922: LD_VAR 0 4
40926: PPUSH
40927: LD_VAR 0 5
40931: PPUSH
40932: LD_VAR 0 4
40936: PPUSH
40937: CALL_OW 74
40941: PPUSH
40942: CALL_OW 112
40946: GO 40972
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40948: LD_VAR 0 4
40952: PPUSH
40953: LD_VAR 0 5
40957: PPUSH
40958: LD_VAR 0 4
40962: PPUSH
40963: CALL_OW 74
40967: PPUSH
40968: CALL_OW 115
// end ; end ;
40972: GO 40552
40974: POP
40975: POP
// end ;
40976: LD_VAR 0 3
40980: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40981: LD_INT 0
40983: PPUSH
40984: PPUSH
40985: PPUSH
// if not unit or IsInUnit ( unit ) then
40986: LD_VAR 0 1
40990: NOT
40991: PUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: CALL_OW 310
41001: OR
41002: IFFALSE 41006
// exit ;
41004: GO 41097
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41006: LD_ADDR_VAR 0 4
41010: PUSH
41011: LD_VAR 0 1
41015: PPUSH
41016: CALL_OW 250
41020: PPUSH
41021: LD_VAR 0 2
41025: PPUSH
41026: LD_INT 1
41028: PPUSH
41029: CALL_OW 272
41033: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41034: LD_ADDR_VAR 0 5
41038: PUSH
41039: LD_VAR 0 1
41043: PPUSH
41044: CALL_OW 251
41048: PPUSH
41049: LD_VAR 0 2
41053: PPUSH
41054: LD_INT 1
41056: PPUSH
41057: CALL_OW 273
41061: ST_TO_ADDR
// if ValidHex ( x , y ) then
41062: LD_VAR 0 4
41066: PPUSH
41067: LD_VAR 0 5
41071: PPUSH
41072: CALL_OW 488
41076: IFFALSE 41097
// ComTurnXY ( unit , x , y ) ;
41078: LD_VAR 0 1
41082: PPUSH
41083: LD_VAR 0 4
41087: PPUSH
41088: LD_VAR 0 5
41092: PPUSH
41093: CALL_OW 118
// end ;
41097: LD_VAR 0 3
41101: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41102: LD_INT 0
41104: PPUSH
41105: PPUSH
// result := false ;
41106: LD_ADDR_VAR 0 3
41110: PUSH
41111: LD_INT 0
41113: ST_TO_ADDR
// if not units then
41114: LD_VAR 0 2
41118: NOT
41119: IFFALSE 41123
// exit ;
41121: GO 41168
// for i in units do
41123: LD_ADDR_VAR 0 4
41127: PUSH
41128: LD_VAR 0 2
41132: PUSH
41133: FOR_IN
41134: IFFALSE 41166
// if See ( side , i ) then
41136: LD_VAR 0 1
41140: PPUSH
41141: LD_VAR 0 4
41145: PPUSH
41146: CALL_OW 292
41150: IFFALSE 41164
// begin result := true ;
41152: LD_ADDR_VAR 0 3
41156: PUSH
41157: LD_INT 1
41159: ST_TO_ADDR
// exit ;
41160: POP
41161: POP
41162: GO 41168
// end ;
41164: GO 41133
41166: POP
41167: POP
// end ;
41168: LD_VAR 0 3
41172: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41173: LD_INT 0
41175: PPUSH
41176: PPUSH
41177: PPUSH
41178: PPUSH
// if not unit or not points then
41179: LD_VAR 0 1
41183: NOT
41184: PUSH
41185: LD_VAR 0 2
41189: NOT
41190: OR
41191: IFFALSE 41195
// exit ;
41193: GO 41285
// dist := 99999 ;
41195: LD_ADDR_VAR 0 5
41199: PUSH
41200: LD_INT 99999
41202: ST_TO_ADDR
// for i in points do
41203: LD_ADDR_VAR 0 4
41207: PUSH
41208: LD_VAR 0 2
41212: PUSH
41213: FOR_IN
41214: IFFALSE 41283
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41216: LD_ADDR_VAR 0 6
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: LD_VAR 0 4
41230: PUSH
41231: LD_INT 1
41233: ARRAY
41234: PPUSH
41235: LD_VAR 0 4
41239: PUSH
41240: LD_INT 2
41242: ARRAY
41243: PPUSH
41244: CALL_OW 297
41248: ST_TO_ADDR
// if tmpDist < dist then
41249: LD_VAR 0 6
41253: PUSH
41254: LD_VAR 0 5
41258: LESS
41259: IFFALSE 41281
// begin result := i ;
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_VAR 0 4
41270: ST_TO_ADDR
// dist := tmpDist ;
41271: LD_ADDR_VAR 0 5
41275: PUSH
41276: LD_VAR 0 6
41280: ST_TO_ADDR
// end ; end ;
41281: GO 41213
41283: POP
41284: POP
// end ;
41285: LD_VAR 0 3
41289: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41290: LD_INT 0
41292: PPUSH
// uc_side := side ;
41293: LD_ADDR_OWVAR 20
41297: PUSH
41298: LD_VAR 0 1
41302: ST_TO_ADDR
// uc_nation := 3 ;
41303: LD_ADDR_OWVAR 21
41307: PUSH
41308: LD_INT 3
41310: ST_TO_ADDR
// vc_chassis := 25 ;
41311: LD_ADDR_OWVAR 37
41315: PUSH
41316: LD_INT 25
41318: ST_TO_ADDR
// vc_engine := engine_siberite ;
41319: LD_ADDR_OWVAR 39
41323: PUSH
41324: LD_INT 3
41326: ST_TO_ADDR
// vc_control := control_computer ;
41327: LD_ADDR_OWVAR 38
41331: PUSH
41332: LD_INT 3
41334: ST_TO_ADDR
// vc_weapon := 59 ;
41335: LD_ADDR_OWVAR 40
41339: PUSH
41340: LD_INT 59
41342: ST_TO_ADDR
// result := CreateVehicle ;
41343: LD_ADDR_VAR 0 5
41347: PUSH
41348: CALL_OW 45
41352: ST_TO_ADDR
// SetDir ( result , d ) ;
41353: LD_VAR 0 5
41357: PPUSH
41358: LD_VAR 0 4
41362: PPUSH
41363: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41367: LD_VAR 0 5
41371: PPUSH
41372: LD_VAR 0 2
41376: PPUSH
41377: LD_VAR 0 3
41381: PPUSH
41382: LD_INT 0
41384: PPUSH
41385: CALL_OW 48
// end ;
41389: LD_VAR 0 5
41393: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41394: LD_INT 0
41396: PPUSH
41397: PPUSH
41398: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41399: LD_ADDR_VAR 0 2
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41422: LD_VAR 0 1
41426: NOT
41427: PUSH
41428: LD_VAR 0 1
41432: PPUSH
41433: CALL_OW 264
41437: PUSH
41438: LD_INT 12
41440: PUSH
41441: LD_INT 51
41443: PUSH
41444: LD_INT 32
41446: PUSH
41447: LD_INT 89
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: IN
41456: NOT
41457: OR
41458: IFFALSE 41462
// exit ;
41460: GO 41560
// for i := 1 to 3 do
41462: LD_ADDR_VAR 0 3
41466: PUSH
41467: DOUBLE
41468: LD_INT 1
41470: DEC
41471: ST_TO_ADDR
41472: LD_INT 3
41474: PUSH
41475: FOR_TO
41476: IFFALSE 41558
// begin tmp := GetCargo ( cargo , i ) ;
41478: LD_ADDR_VAR 0 4
41482: PUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: LD_VAR 0 3
41492: PPUSH
41493: CALL_OW 289
41497: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41498: LD_ADDR_VAR 0 2
41502: PUSH
41503: LD_VAR 0 2
41507: PPUSH
41508: LD_VAR 0 3
41512: PPUSH
41513: LD_VAR 0 4
41517: PPUSH
41518: CALL_OW 1
41522: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41523: LD_ADDR_VAR 0 2
41527: PUSH
41528: LD_VAR 0 2
41532: PPUSH
41533: LD_INT 4
41535: PPUSH
41536: LD_VAR 0 2
41540: PUSH
41541: LD_INT 4
41543: ARRAY
41544: PUSH
41545: LD_VAR 0 4
41549: PLUS
41550: PPUSH
41551: CALL_OW 1
41555: ST_TO_ADDR
// end ;
41556: GO 41475
41558: POP
41559: POP
// end ;
41560: LD_VAR 0 2
41564: RET
// export function Length ( array ) ; begin
41565: LD_INT 0
41567: PPUSH
// result := array + 0 ;
41568: LD_ADDR_VAR 0 2
41572: PUSH
41573: LD_VAR 0 1
41577: PUSH
41578: LD_INT 0
41580: PLUS
41581: ST_TO_ADDR
// end ;
41582: LD_VAR 0 2
41586: RET
// export function PrepareArray ( array ) ; begin
41587: LD_INT 0
41589: PPUSH
// result := array diff 0 ;
41590: LD_ADDR_VAR 0 2
41594: PUSH
41595: LD_VAR 0 1
41599: PUSH
41600: LD_INT 0
41602: DIFF
41603: ST_TO_ADDR
// if not result [ 1 ] then
41604: LD_VAR 0 2
41608: PUSH
41609: LD_INT 1
41611: ARRAY
41612: NOT
41613: IFFALSE 41633
// result := Delete ( result , 1 ) ;
41615: LD_ADDR_VAR 0 2
41619: PUSH
41620: LD_VAR 0 2
41624: PPUSH
41625: LD_INT 1
41627: PPUSH
41628: CALL_OW 3
41632: ST_TO_ADDR
// end ;
41633: LD_VAR 0 2
41637: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41638: LD_INT 0
41640: PPUSH
41641: PPUSH
41642: PPUSH
41643: PPUSH
// sibRocketRange := 25 ;
41644: LD_ADDR_VAR 0 6
41648: PUSH
41649: LD_INT 25
41651: ST_TO_ADDR
// result := false ;
41652: LD_ADDR_VAR 0 4
41656: PUSH
41657: LD_INT 0
41659: ST_TO_ADDR
// for i := 0 to 5 do
41660: LD_ADDR_VAR 0 5
41664: PUSH
41665: DOUBLE
41666: LD_INT 0
41668: DEC
41669: ST_TO_ADDR
41670: LD_INT 5
41672: PUSH
41673: FOR_TO
41674: IFFALSE 41741
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41676: LD_VAR 0 1
41680: PPUSH
41681: LD_VAR 0 5
41685: PPUSH
41686: LD_VAR 0 6
41690: PPUSH
41691: CALL_OW 272
41695: PPUSH
41696: LD_VAR 0 2
41700: PPUSH
41701: LD_VAR 0 5
41705: PPUSH
41706: LD_VAR 0 6
41710: PPUSH
41711: CALL_OW 273
41715: PPUSH
41716: LD_VAR 0 3
41720: PPUSH
41721: CALL_OW 309
41725: IFFALSE 41739
// begin result := true ;
41727: LD_ADDR_VAR 0 4
41731: PUSH
41732: LD_INT 1
41734: ST_TO_ADDR
// exit ;
41735: POP
41736: POP
41737: GO 41743
// end ;
41739: GO 41673
41741: POP
41742: POP
// end ;
41743: LD_VAR 0 4
41747: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41748: LD_INT 0
41750: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41751: LD_VAR 0 1
41755: PPUSH
41756: LD_VAR 0 2
41760: PPUSH
41761: LD_INT 0
41763: PPUSH
41764: LD_INT 0
41766: PPUSH
41767: LD_INT 1
41769: PPUSH
41770: LD_INT 0
41772: PPUSH
41773: CALL_OW 587
// end ;
41777: LD_VAR 0 3
41781: RET
// export function CenterOnNow ( unit ) ; begin
41782: LD_INT 0
41784: PPUSH
// result := IsInUnit ( unit ) ;
41785: LD_ADDR_VAR 0 2
41789: PUSH
41790: LD_VAR 0 1
41794: PPUSH
41795: CALL_OW 310
41799: ST_TO_ADDR
// if not result then
41800: LD_VAR 0 2
41804: NOT
41805: IFFALSE 41817
// result := unit ;
41807: LD_ADDR_VAR 0 2
41811: PUSH
41812: LD_VAR 0 1
41816: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41817: LD_VAR 0 1
41821: PPUSH
41822: CALL_OW 87
// end ;
41826: LD_VAR 0 2
41830: RET
// export function ComMoveHex ( unit , hex ) ; begin
41831: LD_INT 0
41833: PPUSH
// if not hex then
41834: LD_VAR 0 2
41838: NOT
41839: IFFALSE 41843
// exit ;
41841: GO 41896
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41843: LD_VAR 0 2
41847: PUSH
41848: LD_INT 1
41850: ARRAY
41851: PPUSH
41852: LD_VAR 0 2
41856: PUSH
41857: LD_INT 2
41859: ARRAY
41860: PPUSH
41861: CALL_OW 428
41865: IFFALSE 41869
// exit ;
41867: GO 41896
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41869: LD_VAR 0 1
41873: PPUSH
41874: LD_VAR 0 2
41878: PUSH
41879: LD_INT 1
41881: ARRAY
41882: PPUSH
41883: LD_VAR 0 2
41887: PUSH
41888: LD_INT 2
41890: ARRAY
41891: PPUSH
41892: CALL_OW 111
// end ;
41896: LD_VAR 0 3
41900: RET
