// starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Action ;
  11: CALL 16 0 0
// end ; end_of_file
  15: END
// export function Action ; var John , Roth , veh ; begin
  16: LD_INT 0
  18: PPUSH
  19: PPUSH
  20: PPUSH
  21: PPUSH
// Video ( true ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL 38241 0 1
// PlaceSeeing ( 58 , 14 , 7 , - 26 ) ;
  29: LD_INT 58
  31: PPUSH
  32: LD_INT 14
  34: PPUSH
  35: LD_INT 7
  37: PPUSH
  38: LD_INT 26
  40: NEG
  41: PPUSH
  42: CALL_OW 330
// uc_side := 7 ;
  46: LD_ADDR_OWVAR 20
  50: PUSH
  51: LD_INT 7
  53: ST_TO_ADDR
// uc_nation := 1 ;
  54: LD_ADDR_OWVAR 21
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// John := NewCharacter ( JMM ) ;
  62: LD_ADDR_VAR 0 2
  66: PUSH
  67: LD_STRING JMM
  69: PPUSH
  70: CALL_OW 25
  74: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
  75: LD_ADDR_VAR 0 3
  79: PUSH
  80: LD_STRING Roth
  82: PPUSH
  83: CALL_OW 25
  87: ST_TO_ADDR
// SetDir ( John , 1 ) ;
  88: LD_VAR 0 2
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: CALL_OW 233
// SetDir ( Roth , 4 ) ;
 100: LD_VAR 0 3
 104: PPUSH
 105: LD_INT 4
 107: PPUSH
 108: CALL_OW 233
// PlaceUnitXY ( John , 55 , 14 , false ) ;
 112: LD_VAR 0 2
 116: PPUSH
 117: LD_INT 55
 119: PPUSH
 120: LD_INT 14
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: CALL_OW 48
// PlaceUnitXY ( Roth , 58 , 14 , false ) ;
 130: LD_VAR 0 3
 134: PPUSH
 135: LD_INT 58
 137: PPUSH
 138: LD_INT 14
 140: PPUSH
 141: LD_INT 0
 143: PPUSH
 144: CALL_OW 48
// ComTurnUnit ( John , Roth ) ;
 148: LD_VAR 0 2
 152: PPUSH
 153: LD_VAR 0 3
 157: PPUSH
 158: CALL_OW 119
// ComTurnUnit ( Roth , John ) ;
 162: LD_VAR 0 3
 166: PPUSH
 167: LD_VAR 0 2
 171: PPUSH
 172: CALL_OW 119
// CenterNowonUnits ( [ John , Roth ] ) ;
 176: LD_VAR 0 2
 180: PUSH
 181: LD_VAR 0 3
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PPUSH
 190: CALL_OW 87
// wait ( 0 0$0.5 ) ;
 194: LD_INT 18
 196: PPUSH
 197: CALL_OW 67
// Say ( Roth , DStart-Roth-1 ) ;
 201: LD_VAR 0 3
 205: PPUSH
 206: LD_STRING DStart-Roth-1
 208: PPUSH
 209: CALL_OW 88
// Say ( John , DStart-JMM-1 ) ;
 213: LD_VAR 0 2
 217: PPUSH
 218: LD_STRING DStart-JMM-1
 220: PPUSH
 221: CALL_OW 88
// Say ( Roth , DStart-Roth-2 ) ;
 225: LD_VAR 0 3
 229: PPUSH
 230: LD_STRING DStart-Roth-2
 232: PPUSH
 233: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 237: LD_INT 18
 239: PPUSH
 240: CALL_OW 67
// Say ( John , DStart-JMM-2 ) ;
 244: LD_VAR 0 2
 248: PPUSH
 249: LD_STRING DStart-JMM-2
 251: PPUSH
 252: CALL_OW 88
// Say ( Roth , DStart-Roth-3 ) ;
 256: LD_VAR 0 3
 260: PPUSH
 261: LD_STRING DStart-Roth-3
 263: PPUSH
 264: CALL_OW 88
// Say ( John , DStart-JMM-3 ) ;
 268: LD_VAR 0 2
 272: PPUSH
 273: LD_STRING DStart-JMM-3
 275: PPUSH
 276: CALL_OW 88
// uc_side := 1 ;
 280: LD_ADDR_OWVAR 20
 284: PUSH
 285: LD_INT 1
 287: ST_TO_ADDR
// uc_nation := 1 ;
 288: LD_ADDR_OWVAR 21
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 296: LD_ADDR_OWVAR 37
 300: PUSH
 301: LD_INT 2
 303: ST_TO_ADDR
// vc_engine := engine_siberite ;
 304: LD_ADDR_OWVAR 39
 308: PUSH
 309: LD_INT 3
 311: ST_TO_ADDR
// vc_control := control_manual ;
 312: LD_ADDR_OWVAR 38
 316: PUSH
 317: LD_INT 1
 319: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 320: LD_ADDR_OWVAR 40
 324: PUSH
 325: LD_INT 4
 327: ST_TO_ADDR
// veh := CreateVehicle ;
 328: LD_ADDR_VAR 0 4
 332: PUSH
 333: CALL_OW 45
 337: ST_TO_ADDR
// PlaceUnitXY ( veh , 43 , 41 , false ) ;
 338: LD_VAR 0 4
 342: PPUSH
 343: LD_INT 43
 345: PPUSH
 346: LD_INT 41
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 48
// PrepareMechanic ( false , 10 ) ;
 356: LD_INT 0
 358: PPUSH
 359: LD_INT 10
 361: PPUSH
 362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
 366: CALL_OW 44
 370: PPUSH
 371: LD_VAR 0 4
 375: PPUSH
 376: CALL_OW 52
// ComMoveXY ( veh , 24 , 2 ) ;
 380: LD_VAR 0 4
 384: PPUSH
 385: LD_INT 24
 387: PPUSH
 388: LD_INT 2
 390: PPUSH
 391: CALL_OW 111
// Say ( Roth , DStart-Roth-4 ) ;
 395: LD_VAR 0 3
 399: PPUSH
 400: LD_STRING DStart-Roth-4
 402: PPUSH
 403: CALL_OW 88
// Say ( John , DStart-JMM-4 ) ;
 407: LD_VAR 0 2
 411: PPUSH
 412: LD_STRING DStart-JMM-4
 414: PPUSH
 415: CALL_OW 88
// Say ( Roth , DStart-Roth-5 ) ;
 419: LD_VAR 0 3
 423: PPUSH
 424: LD_STRING DStart-Roth-5
 426: PPUSH
 427: CALL_OW 88
// Say ( John , DStart-JMM-5 ) ;
 431: LD_VAR 0 2
 435: PPUSH
 436: LD_STRING DStart-JMM-5
 438: PPUSH
 439: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 443: LD_INT 10
 445: PPUSH
 446: CALL_OW 67
// Say ( Roth , DStart-Roth-6 ) ;
 450: LD_VAR 0 3
 454: PPUSH
 455: LD_STRING DStart-Roth-6
 457: PPUSH
 458: CALL_OW 88
// wait ( 0 0$0.1 ) ;
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 67
// ComMoveXY ( John , 32 , 14 ) ;
 469: LD_VAR 0 2
 473: PPUSH
 474: LD_INT 32
 476: PPUSH
 477: LD_INT 14
 479: PPUSH
 480: CALL_OW 111
// wait ( 0 0$2 ) ;
 484: LD_INT 70
 486: PPUSH
 487: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
 491: LD_INT 1
 493: PPUSH
 494: LD_STRING %_cont
 496: PPUSH
 497: CALL_OW 340
// end ;
 501: LD_VAR 0 1
 505: RET
// every 0 0$1 trigger HexInfo ( 24 , 2 ) do
 506: LD_INT 24
 508: PPUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 428
 516: IFFALSE 536
 518: GO 520
 520: DISABLE
// RemoveUnit ( HexInfo ( 24 , 2 ) ) ; end_of_file
 521: LD_INT 24
 523: PPUSH
 524: LD_INT 2
 526: PPUSH
 527: CALL_OW 428
 531: PPUSH
 532: CALL_OW 64
 536: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// if exist_mode then
 541: LD_VAR 0 2
 545: IFFALSE 591
// begin unit := CreateCharacter ( prefix & ident ) ;
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: LD_VAR 0 3
 556: PUSH
 557: LD_VAR 0 1
 561: STR
 562: PPUSH
 563: CALL_OW 34
 567: ST_TO_ADDR
// if unit then
 568: LD_VAR 0 5
 572: IFFALSE 589
// DeleteCharacters ( prefix & ident ) ;
 574: LD_VAR 0 3
 578: PUSH
 579: LD_VAR 0 1
 583: STR
 584: PPUSH
 585: CALL_OW 40
// end else
 589: GO 606
// unit := NewCharacter ( ident ) ;
 591: LD_ADDR_VAR 0 5
 595: PUSH
 596: LD_VAR 0 1
 600: PPUSH
 601: CALL_OW 25
 605: ST_TO_ADDR
// result := unit ;
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 5
 615: ST_TO_ADDR
// end ;
 616: LD_VAR 0 4
 620: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// if not side or not nation then
 625: LD_VAR 0 1
 629: NOT
 630: PUSH
 631: LD_VAR 0 2
 635: NOT
 636: OR
 637: IFFALSE 641
// exit ;
 639: GO 1409
// case nation of nation_american :
 641: LD_VAR 0 2
 645: PUSH
 646: LD_INT 1
 648: DOUBLE
 649: EQUAL
 650: IFTRUE 654
 652: GO 868
 654: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 655: LD_ADDR_VAR 0 4
 659: PUSH
 660: LD_INT 35
 662: PUSH
 663: LD_INT 45
 665: PUSH
 666: LD_INT 46
 668: PUSH
 669: LD_INT 47
 671: PUSH
 672: LD_INT 82
 674: PUSH
 675: LD_INT 83
 677: PUSH
 678: LD_INT 84
 680: PUSH
 681: LD_INT 85
 683: PUSH
 684: LD_INT 86
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 6
 695: PUSH
 696: LD_INT 15
 698: PUSH
 699: LD_INT 16
 701: PUSH
 702: LD_INT 7
 704: PUSH
 705: LD_INT 12
 707: PUSH
 708: LD_INT 13
 710: PUSH
 711: LD_INT 10
 713: PUSH
 714: LD_INT 14
 716: PUSH
 717: LD_INT 20
 719: PUSH
 720: LD_INT 21
 722: PUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 25
 728: PUSH
 729: LD_INT 32
 731: PUSH
 732: LD_INT 27
 734: PUSH
 735: LD_INT 36
 737: PUSH
 738: LD_INT 69
 740: PUSH
 741: LD_INT 39
 743: PUSH
 744: LD_INT 34
 746: PUSH
 747: LD_INT 40
 749: PUSH
 750: LD_INT 48
 752: PUSH
 753: LD_INT 49
 755: PUSH
 756: LD_INT 50
 758: PUSH
 759: LD_INT 51
 761: PUSH
 762: LD_INT 52
 764: PUSH
 765: LD_INT 53
 767: PUSH
 768: LD_INT 54
 770: PUSH
 771: LD_INT 55
 773: PUSH
 774: LD_INT 56
 776: PUSH
 777: LD_INT 57
 779: PUSH
 780: LD_INT 58
 782: PUSH
 783: LD_INT 59
 785: PUSH
 786: LD_INT 60
 788: PUSH
 789: LD_INT 61
 791: PUSH
 792: LD_INT 62
 794: PUSH
 795: LD_INT 80
 797: PUSH
 798: LD_INT 82
 800: PUSH
 801: LD_INT 83
 803: PUSH
 804: LD_INT 84
 806: PUSH
 807: LD_INT 85
 809: PUSH
 810: LD_INT 86
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: ST_TO_ADDR
 866: GO 1333
 868: LD_INT 2
 870: DOUBLE
 871: EQUAL
 872: IFTRUE 876
 874: GO 1102
 876: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 877: LD_ADDR_VAR 0 4
 881: PUSH
 882: LD_INT 35
 884: PUSH
 885: LD_INT 45
 887: PUSH
 888: LD_INT 46
 890: PUSH
 891: LD_INT 47
 893: PUSH
 894: LD_INT 82
 896: PUSH
 897: LD_INT 83
 899: PUSH
 900: LD_INT 84
 902: PUSH
 903: LD_INT 85
 905: PUSH
 906: LD_INT 87
 908: PUSH
 909: LD_INT 70
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: LD_INT 11
 917: PUSH
 918: LD_INT 3
 920: PUSH
 921: LD_INT 4
 923: PUSH
 924: LD_INT 5
 926: PUSH
 927: LD_INT 6
 929: PUSH
 930: LD_INT 15
 932: PUSH
 933: LD_INT 18
 935: PUSH
 936: LD_INT 7
 938: PUSH
 939: LD_INT 17
 941: PUSH
 942: LD_INT 8
 944: PUSH
 945: LD_INT 20
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 72
 956: PUSH
 957: LD_INT 26
 959: PUSH
 960: LD_INT 69
 962: PUSH
 963: LD_INT 39
 965: PUSH
 966: LD_INT 40
 968: PUSH
 969: LD_INT 41
 971: PUSH
 972: LD_INT 42
 974: PUSH
 975: LD_INT 43
 977: PUSH
 978: LD_INT 48
 980: PUSH
 981: LD_INT 49
 983: PUSH
 984: LD_INT 50
 986: PUSH
 987: LD_INT 51
 989: PUSH
 990: LD_INT 52
 992: PUSH
 993: LD_INT 53
 995: PUSH
 996: LD_INT 54
 998: PUSH
 999: LD_INT 55
1001: PUSH
1002: LD_INT 56
1004: PUSH
1005: LD_INT 60
1007: PUSH
1008: LD_INT 61
1010: PUSH
1011: LD_INT 62
1013: PUSH
1014: LD_INT 66
1016: PUSH
1017: LD_INT 67
1019: PUSH
1020: LD_INT 68
1022: PUSH
1023: LD_INT 81
1025: PUSH
1026: LD_INT 82
1028: PUSH
1029: LD_INT 83
1031: PUSH
1032: LD_INT 84
1034: PUSH
1035: LD_INT 85
1037: PUSH
1038: LD_INT 87
1040: PUSH
1041: LD_INT 88
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: ST_TO_ADDR
1100: GO 1333
1102: LD_INT 3
1104: DOUBLE
1105: EQUAL
1106: IFTRUE 1110
1108: GO 1332
1110: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_INT 46
1118: PUSH
1119: LD_INT 47
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 2
1127: PUSH
1128: LD_INT 82
1130: PUSH
1131: LD_INT 83
1133: PUSH
1134: LD_INT 84
1136: PUSH
1137: LD_INT 85
1139: PUSH
1140: LD_INT 86
1142: PUSH
1143: LD_INT 11
1145: PUSH
1146: LD_INT 9
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: LD_INT 19
1154: PUSH
1155: LD_INT 21
1157: PUSH
1158: LD_INT 24
1160: PUSH
1161: LD_INT 22
1163: PUSH
1164: LD_INT 25
1166: PUSH
1167: LD_INT 28
1169: PUSH
1170: LD_INT 29
1172: PUSH
1173: LD_INT 30
1175: PUSH
1176: LD_INT 31
1178: PUSH
1179: LD_INT 37
1181: PUSH
1182: LD_INT 38
1184: PUSH
1185: LD_INT 32
1187: PUSH
1188: LD_INT 27
1190: PUSH
1191: LD_INT 33
1193: PUSH
1194: LD_INT 69
1196: PUSH
1197: LD_INT 39
1199: PUSH
1200: LD_INT 34
1202: PUSH
1203: LD_INT 40
1205: PUSH
1206: LD_INT 71
1208: PUSH
1209: LD_INT 23
1211: PUSH
1212: LD_INT 44
1214: PUSH
1215: LD_INT 48
1217: PUSH
1218: LD_INT 49
1220: PUSH
1221: LD_INT 50
1223: PUSH
1224: LD_INT 51
1226: PUSH
1227: LD_INT 52
1229: PUSH
1230: LD_INT 53
1232: PUSH
1233: LD_INT 54
1235: PUSH
1236: LD_INT 55
1238: PUSH
1239: LD_INT 56
1241: PUSH
1242: LD_INT 57
1244: PUSH
1245: LD_INT 58
1247: PUSH
1248: LD_INT 59
1250: PUSH
1251: LD_INT 63
1253: PUSH
1254: LD_INT 64
1256: PUSH
1257: LD_INT 65
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 83
1265: PUSH
1266: LD_INT 84
1268: PUSH
1269: LD_INT 85
1271: PUSH
1272: LD_INT 86
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
1330: GO 1333
1332: POP
// if state > - 1 and state < 3 then
1333: LD_VAR 0 3
1337: PUSH
1338: LD_INT 1
1340: NEG
1341: GREATER
1342: PUSH
1343: LD_VAR 0 3
1347: PUSH
1348: LD_INT 3
1350: LESS
1351: AND
1352: IFFALSE 1409
// for i in result do
1354: LD_ADDR_VAR 0 5
1358: PUSH
1359: LD_VAR 0 4
1363: PUSH
1364: FOR_IN
1365: IFFALSE 1407
// if GetTech ( i , side ) <> state then
1367: LD_VAR 0 5
1371: PPUSH
1372: LD_VAR 0 1
1376: PPUSH
1377: CALL_OW 321
1381: PUSH
1382: LD_VAR 0 3
1386: NONEQUAL
1387: IFFALSE 1405
// result := result diff i ;
1389: LD_ADDR_VAR 0 4
1393: PUSH
1394: LD_VAR 0 4
1398: PUSH
1399: LD_VAR 0 5
1403: DIFF
1404: ST_TO_ADDR
1405: GO 1364
1407: POP
1408: POP
// end ;
1409: LD_VAR 0 4
1413: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1414: LD_INT 0
1416: PPUSH
1417: PPUSH
1418: PPUSH
// result := true ;
1419: LD_ADDR_VAR 0 3
1423: PUSH
1424: LD_INT 1
1426: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1427: LD_ADDR_VAR 0 5
1431: PUSH
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 480
1441: ST_TO_ADDR
// if not tmp then
1442: LD_VAR 0 5
1446: NOT
1447: IFFALSE 1451
// exit ;
1449: GO 1500
// for i in tmp do
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: LD_VAR 0 5
1460: PUSH
1461: FOR_IN
1462: IFFALSE 1498
// if GetTech ( i , side ) <> state_researched then
1464: LD_VAR 0 4
1468: PPUSH
1469: LD_VAR 0 1
1473: PPUSH
1474: CALL_OW 321
1478: PUSH
1479: LD_INT 2
1481: NONEQUAL
1482: IFFALSE 1496
// begin result := false ;
1484: LD_ADDR_VAR 0 3
1488: PUSH
1489: LD_INT 0
1491: ST_TO_ADDR
// exit ;
1492: POP
1493: POP
1494: GO 1500
// end ;
1496: GO 1461
1498: POP
1499: POP
// end ;
1500: LD_VAR 0 3
1504: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
1510: PPUSH
1511: PPUSH
1512: PPUSH
1513: PPUSH
1514: PPUSH
1515: PPUSH
1516: PPUSH
1517: PPUSH
1518: PPUSH
1519: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1520: LD_VAR 0 1
1524: NOT
1525: PUSH
1526: LD_VAR 0 1
1530: PPUSH
1531: CALL_OW 257
1535: PUSH
1536: LD_INT 9
1538: NONEQUAL
1539: OR
1540: IFFALSE 1544
// exit ;
1542: GO 2117
// side := GetSide ( unit ) ;
1544: LD_ADDR_VAR 0 9
1548: PUSH
1549: LD_VAR 0 1
1553: PPUSH
1554: CALL_OW 255
1558: ST_TO_ADDR
// tech_space := tech_spacanom ;
1559: LD_ADDR_VAR 0 12
1563: PUSH
1564: LD_INT 29
1566: ST_TO_ADDR
// tech_time := tech_taurad ;
1567: LD_ADDR_VAR 0 13
1571: PUSH
1572: LD_INT 28
1574: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1575: LD_ADDR_VAR 0 11
1579: PUSH
1580: LD_VAR 0 1
1584: PPUSH
1585: CALL_OW 310
1589: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1590: LD_VAR 0 11
1594: PPUSH
1595: CALL_OW 247
1599: PUSH
1600: LD_INT 2
1602: EQUAL
1603: IFFALSE 1607
// exit ;
1605: GO 2117
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1607: LD_ADDR_VAR 0 8
1611: PUSH
1612: LD_INT 81
1614: PUSH
1615: LD_VAR 0 9
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 3
1626: PUSH
1627: LD_INT 21
1629: PUSH
1630: LD_INT 3
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL_OW 69
1649: ST_TO_ADDR
// if not tmp then
1650: LD_VAR 0 8
1654: NOT
1655: IFFALSE 1659
// exit ;
1657: GO 2117
// if in_unit then
1659: LD_VAR 0 11
1663: IFFALSE 1687
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1665: LD_ADDR_VAR 0 10
1669: PUSH
1670: LD_VAR 0 8
1674: PPUSH
1675: LD_VAR 0 11
1679: PPUSH
1680: CALL_OW 74
1684: ST_TO_ADDR
1685: GO 1707
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1687: LD_ADDR_VAR 0 10
1691: PUSH
1692: LD_VAR 0 8
1696: PPUSH
1697: LD_VAR 0 1
1701: PPUSH
1702: CALL_OW 74
1706: ST_TO_ADDR
// if not enemy then
1707: LD_VAR 0 10
1711: NOT
1712: IFFALSE 1716
// exit ;
1714: GO 2117
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1716: LD_VAR 0 11
1720: PUSH
1721: LD_VAR 0 11
1725: PPUSH
1726: LD_VAR 0 10
1730: PPUSH
1731: CALL_OW 296
1735: PUSH
1736: LD_INT 13
1738: GREATER
1739: AND
1740: PUSH
1741: LD_VAR 0 1
1745: PPUSH
1746: LD_VAR 0 10
1750: PPUSH
1751: CALL_OW 296
1755: PUSH
1756: LD_INT 12
1758: GREATER
1759: OR
1760: IFFALSE 1764
// exit ;
1762: GO 2117
// missile := [ 1 ] ;
1764: LD_ADDR_VAR 0 14
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: EMPTY
1773: LIST
1774: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1775: LD_VAR 0 9
1779: PPUSH
1780: LD_VAR 0 12
1784: PPUSH
1785: CALL_OW 325
1789: IFFALSE 1818
// missile := Replace ( missile , missile + 1 , 2 ) ;
1791: LD_ADDR_VAR 0 14
1795: PUSH
1796: LD_VAR 0 14
1800: PPUSH
1801: LD_VAR 0 14
1805: PUSH
1806: LD_INT 1
1808: PLUS
1809: PPUSH
1810: LD_INT 2
1812: PPUSH
1813: CALL_OW 1
1817: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1818: LD_VAR 0 9
1822: PPUSH
1823: LD_VAR 0 13
1827: PPUSH
1828: CALL_OW 325
1832: PUSH
1833: LD_VAR 0 10
1837: PPUSH
1838: CALL_OW 255
1842: PPUSH
1843: LD_VAR 0 13
1847: PPUSH
1848: CALL_OW 325
1852: NOT
1853: AND
1854: IFFALSE 1883
// missile := Replace ( missile , missile + 1 , 3 ) ;
1856: LD_ADDR_VAR 0 14
1860: PUSH
1861: LD_VAR 0 14
1865: PPUSH
1866: LD_VAR 0 14
1870: PUSH
1871: LD_INT 1
1873: PLUS
1874: PPUSH
1875: LD_INT 3
1877: PPUSH
1878: CALL_OW 1
1882: ST_TO_ADDR
// if missile < 2 then
1883: LD_VAR 0 14
1887: PUSH
1888: LD_INT 2
1890: LESS
1891: IFFALSE 1895
// exit ;
1893: GO 2117
// x := GetX ( enemy ) ;
1895: LD_ADDR_VAR 0 4
1899: PUSH
1900: LD_VAR 0 10
1904: PPUSH
1905: CALL_OW 250
1909: ST_TO_ADDR
// y := GetY ( enemy ) ;
1910: LD_ADDR_VAR 0 5
1914: PUSH
1915: LD_VAR 0 10
1919: PPUSH
1920: CALL_OW 251
1924: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1925: LD_ADDR_VAR 0 6
1929: PUSH
1930: LD_VAR 0 4
1934: PUSH
1935: LD_INT 1
1937: NEG
1938: PPUSH
1939: LD_INT 1
1941: PPUSH
1942: CALL_OW 12
1946: PLUS
1947: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1948: LD_ADDR_VAR 0 7
1952: PUSH
1953: LD_VAR 0 5
1957: PUSH
1958: LD_INT 1
1960: NEG
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: CALL_OW 12
1969: PLUS
1970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1971: LD_VAR 0 6
1975: PPUSH
1976: LD_VAR 0 7
1980: PPUSH
1981: CALL_OW 488
1985: NOT
1986: IFFALSE 2008
// begin _x := x ;
1988: LD_ADDR_VAR 0 6
1992: PUSH
1993: LD_VAR 0 4
1997: ST_TO_ADDR
// _y := y ;
1998: LD_ADDR_VAR 0 7
2002: PUSH
2003: LD_VAR 0 5
2007: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2008: LD_ADDR_VAR 0 3
2012: PUSH
2013: LD_INT 1
2015: PPUSH
2016: LD_VAR 0 14
2020: PPUSH
2021: CALL_OW 12
2025: ST_TO_ADDR
// case i of 1 :
2026: LD_VAR 0 3
2030: PUSH
2031: LD_INT 1
2033: DOUBLE
2034: EQUAL
2035: IFTRUE 2039
2037: GO 2056
2039: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2040: LD_VAR 0 1
2044: PPUSH
2045: LD_VAR 0 10
2049: PPUSH
2050: CALL_OW 115
2054: GO 2117
2056: LD_INT 2
2058: DOUBLE
2059: EQUAL
2060: IFTRUE 2064
2062: GO 2086
2064: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2065: LD_VAR 0 1
2069: PPUSH
2070: LD_VAR 0 6
2074: PPUSH
2075: LD_VAR 0 7
2079: PPUSH
2080: CALL_OW 153
2084: GO 2117
2086: LD_INT 3
2088: DOUBLE
2089: EQUAL
2090: IFTRUE 2094
2092: GO 2116
2094: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2095: LD_VAR 0 1
2099: PPUSH
2100: LD_VAR 0 6
2104: PPUSH
2105: LD_VAR 0 7
2109: PPUSH
2110: CALL_OW 154
2114: GO 2117
2116: POP
// end ;
2117: LD_VAR 0 2
2121: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
2127: PPUSH
2128: PPUSH
2129: PPUSH
// if not unit or not building then
2130: LD_VAR 0 1
2134: NOT
2135: PUSH
2136: LD_VAR 0 2
2140: NOT
2141: OR
2142: IFFALSE 2146
// exit ;
2144: GO 2304
// x := GetX ( building ) ;
2146: LD_ADDR_VAR 0 5
2150: PUSH
2151: LD_VAR 0 2
2155: PPUSH
2156: CALL_OW 250
2160: ST_TO_ADDR
// y := GetY ( building ) ;
2161: LD_ADDR_VAR 0 6
2165: PUSH
2166: LD_VAR 0 2
2170: PPUSH
2171: CALL_OW 251
2175: ST_TO_ADDR
// for i = 0 to 5 do
2176: LD_ADDR_VAR 0 4
2180: PUSH
2181: DOUBLE
2182: LD_INT 0
2184: DEC
2185: ST_TO_ADDR
2186: LD_INT 5
2188: PUSH
2189: FOR_TO
2190: IFFALSE 2302
// begin _x := ShiftX ( x , i , 3 ) ;
2192: LD_ADDR_VAR 0 7
2196: PUSH
2197: LD_VAR 0 5
2201: PPUSH
2202: LD_VAR 0 4
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: CALL_OW 272
2214: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2215: LD_ADDR_VAR 0 8
2219: PUSH
2220: LD_VAR 0 6
2224: PPUSH
2225: LD_VAR 0 4
2229: PPUSH
2230: LD_INT 3
2232: PPUSH
2233: CALL_OW 273
2237: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2238: LD_VAR 0 7
2242: PPUSH
2243: LD_VAR 0 8
2247: PPUSH
2248: CALL_OW 488
2252: NOT
2253: IFFALSE 2257
// continue ;
2255: GO 2189
// if HexInfo ( _x , _y ) = 0 then
2257: LD_VAR 0 7
2261: PPUSH
2262: LD_VAR 0 8
2266: PPUSH
2267: CALL_OW 428
2271: PUSH
2272: LD_INT 0
2274: EQUAL
2275: IFFALSE 2300
// begin ComMoveXY ( unit , _x , _y ) ;
2277: LD_VAR 0 1
2281: PPUSH
2282: LD_VAR 0 7
2286: PPUSH
2287: LD_VAR 0 8
2291: PPUSH
2292: CALL_OW 111
// exit ;
2296: POP
2297: POP
2298: GO 2304
// end ; end ;
2300: GO 2189
2302: POP
2303: POP
// end ;
2304: LD_VAR 0 3
2308: RET
// export function ScanBase ( side , base_area ) ; begin
2309: LD_INT 0
2311: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2312: LD_ADDR_VAR 0 3
2316: PUSH
2317: LD_VAR 0 2
2321: PPUSH
2322: LD_INT 81
2324: PUSH
2325: LD_VAR 0 1
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PPUSH
2334: CALL_OW 70
2338: ST_TO_ADDR
// end ;
2339: LD_VAR 0 3
2343: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2344: LD_INT 0
2346: PPUSH
2347: PPUSH
2348: PPUSH
2349: PPUSH
// result := false ;
2350: LD_ADDR_VAR 0 2
2354: PUSH
2355: LD_INT 0
2357: ST_TO_ADDR
// side := GetSide ( unit ) ;
2358: LD_ADDR_VAR 0 3
2362: PUSH
2363: LD_VAR 0 1
2367: PPUSH
2368: CALL_OW 255
2372: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2373: LD_ADDR_VAR 0 4
2377: PUSH
2378: LD_VAR 0 1
2382: PPUSH
2383: CALL_OW 248
2387: ST_TO_ADDR
// case nat of 1 :
2388: LD_VAR 0 4
2392: PUSH
2393: LD_INT 1
2395: DOUBLE
2396: EQUAL
2397: IFTRUE 2401
2399: GO 2412
2401: POP
// tech := tech_lassight ; 2 :
2402: LD_ADDR_VAR 0 5
2406: PUSH
2407: LD_INT 12
2409: ST_TO_ADDR
2410: GO 2451
2412: LD_INT 2
2414: DOUBLE
2415: EQUAL
2416: IFTRUE 2420
2418: GO 2431
2420: POP
// tech := tech_mortar ; 3 :
2421: LD_ADDR_VAR 0 5
2425: PUSH
2426: LD_INT 41
2428: ST_TO_ADDR
2429: GO 2451
2431: LD_INT 3
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2450
2439: POP
// tech := tech_bazooka ; end ;
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: LD_INT 44
2447: ST_TO_ADDR
2448: GO 2451
2450: POP
// if Researched ( side , tech ) then
2451: LD_VAR 0 3
2455: PPUSH
2456: LD_VAR 0 5
2460: PPUSH
2461: CALL_OW 325
2465: IFFALSE 2492
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2467: LD_ADDR_VAR 0 2
2471: PUSH
2472: LD_INT 5
2474: PUSH
2475: LD_INT 8
2477: PUSH
2478: LD_INT 9
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_VAR 0 4
2490: ARRAY
2491: ST_TO_ADDR
// end ;
2492: LD_VAR 0 2
2496: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2497: LD_INT 0
2499: PPUSH
2500: PPUSH
2501: PPUSH
// if not mines then
2502: LD_VAR 0 2
2506: NOT
2507: IFFALSE 2511
// exit ;
2509: GO 2655
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2511: LD_ADDR_VAR 0 5
2515: PUSH
2516: LD_INT 81
2518: PUSH
2519: LD_VAR 0 1
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 3
2530: PUSH
2531: LD_INT 21
2533: PUSH
2534: LD_INT 3
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 69
2553: ST_TO_ADDR
// for i in mines do
2554: LD_ADDR_VAR 0 4
2558: PUSH
2559: LD_VAR 0 2
2563: PUSH
2564: FOR_IN
2565: IFFALSE 2653
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2567: LD_VAR 0 4
2571: PUSH
2572: LD_INT 1
2574: ARRAY
2575: PPUSH
2576: LD_VAR 0 4
2580: PUSH
2581: LD_INT 2
2583: ARRAY
2584: PPUSH
2585: CALL_OW 458
2589: NOT
2590: IFFALSE 2594
// continue ;
2592: GO 2564
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2594: LD_VAR 0 4
2598: PUSH
2599: LD_INT 1
2601: ARRAY
2602: PPUSH
2603: LD_VAR 0 4
2607: PUSH
2608: LD_INT 2
2610: ARRAY
2611: PPUSH
2612: CALL_OW 428
2616: PUSH
2617: LD_VAR 0 5
2621: IN
2622: IFFALSE 2651
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2624: LD_VAR 0 4
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_VAR 0 4
2637: PUSH
2638: LD_INT 2
2640: ARRAY
2641: PPUSH
2642: LD_VAR 0 1
2646: PPUSH
2647: CALL_OW 456
// end ;
2651: GO 2564
2653: POP
2654: POP
// end ;
2655: LD_VAR 0 3
2659: RET
// export function Count ( array ) ; begin
2660: LD_INT 0
2662: PPUSH
// result := array + 0 ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_VAR 0 1
2672: PUSH
2673: LD_INT 0
2675: PLUS
2676: ST_TO_ADDR
// end ;
2677: LD_VAR 0 2
2681: RET
// export function IsEmpty ( building ) ; begin
2682: LD_INT 0
2684: PPUSH
// if not building then
2685: LD_VAR 0 1
2689: NOT
2690: IFFALSE 2694
// exit ;
2692: GO 2737
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: LD_VAR 0 1
2703: PUSH
2704: LD_INT 22
2706: PUSH
2707: LD_VAR 0 1
2711: PPUSH
2712: CALL_OW 255
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 58
2723: PUSH
2724: EMPTY
2725: LIST
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: IN
2736: ST_TO_ADDR
// end ;
2737: LD_VAR 0 2
2741: RET
// export function IsNotFull ( building ) ; var places ; begin
2742: LD_INT 0
2744: PPUSH
2745: PPUSH
// if not building then
2746: LD_VAR 0 1
2750: NOT
2751: IFFALSE 2755
// exit ;
2753: GO 2783
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2755: LD_ADDR_VAR 0 2
2759: PUSH
2760: LD_VAR 0 1
2764: PPUSH
2765: LD_INT 3
2767: PUSH
2768: LD_INT 62
2770: PUSH
2771: EMPTY
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PPUSH
2778: CALL_OW 72
2782: ST_TO_ADDR
// end ;
2783: LD_VAR 0 2
2787: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2788: LD_INT 0
2790: PPUSH
2791: PPUSH
2792: PPUSH
2793: PPUSH
// tmp := [ ] ;
2794: LD_ADDR_VAR 0 3
2798: PUSH
2799: EMPTY
2800: ST_TO_ADDR
// list := [ ] ;
2801: LD_ADDR_VAR 0 5
2805: PUSH
2806: EMPTY
2807: ST_TO_ADDR
// for i = 16 to 25 do
2808: LD_ADDR_VAR 0 4
2812: PUSH
2813: DOUBLE
2814: LD_INT 16
2816: DEC
2817: ST_TO_ADDR
2818: LD_INT 25
2820: PUSH
2821: FOR_TO
2822: IFFALSE 2895
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2824: LD_ADDR_VAR 0 3
2828: PUSH
2829: LD_VAR 0 3
2833: PUSH
2834: LD_INT 22
2836: PUSH
2837: LD_VAR 0 1
2841: PPUSH
2842: CALL_OW 255
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 91
2853: PUSH
2854: LD_VAR 0 1
2858: PUSH
2859: LD_INT 6
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 30
2869: PUSH
2870: LD_VAR 0 4
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: PPUSH
2887: CALL_OW 69
2891: ADD
2892: ST_TO_ADDR
2893: GO 2821
2895: POP
2896: POP
// for i = 1 to tmp do
2897: LD_ADDR_VAR 0 4
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_VAR 0 3
2911: PUSH
2912: FOR_TO
2913: IFFALSE 3001
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2915: LD_ADDR_VAR 0 5
2919: PUSH
2920: LD_VAR 0 5
2924: PUSH
2925: LD_VAR 0 3
2929: PUSH
2930: LD_VAR 0 4
2934: ARRAY
2935: PPUSH
2936: CALL_OW 266
2940: PUSH
2941: LD_VAR 0 3
2945: PUSH
2946: LD_VAR 0 4
2950: ARRAY
2951: PPUSH
2952: CALL_OW 250
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_VAR 0 4
2966: ARRAY
2967: PPUSH
2968: CALL_OW 251
2972: PUSH
2973: LD_VAR 0 3
2977: PUSH
2978: LD_VAR 0 4
2982: ARRAY
2983: PPUSH
2984: CALL_OW 254
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: PUSH
2995: EMPTY
2996: LIST
2997: ADD
2998: ST_TO_ADDR
2999: GO 2912
3001: POP
3002: POP
// result := list ;
3003: LD_ADDR_VAR 0 2
3007: PUSH
3008: LD_VAR 0 5
3012: ST_TO_ADDR
// end ;
3013: LD_VAR 0 2
3017: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3018: LD_INT 0
3020: PPUSH
3021: PPUSH
3022: PPUSH
3023: PPUSH
3024: PPUSH
3025: PPUSH
3026: PPUSH
// if not factory then
3027: LD_VAR 0 1
3031: NOT
3032: IFFALSE 3036
// exit ;
3034: GO 3629
// if control = control_apeman then
3036: LD_VAR 0 4
3040: PUSH
3041: LD_INT 5
3043: EQUAL
3044: IFFALSE 3153
// begin tmp := UnitsInside ( factory ) ;
3046: LD_ADDR_VAR 0 8
3050: PUSH
3051: LD_VAR 0 1
3055: PPUSH
3056: CALL_OW 313
3060: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3061: LD_VAR 0 8
3065: PPUSH
3066: LD_INT 25
3068: PUSH
3069: LD_INT 12
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: PPUSH
3076: CALL_OW 72
3080: NOT
3081: IFFALSE 3091
// control := control_manual ;
3083: LD_ADDR_VAR 0 4
3087: PUSH
3088: LD_INT 1
3090: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3091: LD_ADDR_VAR 0 8
3095: PUSH
3096: LD_VAR 0 1
3100: PPUSH
3101: CALL 2788 0 1
3105: ST_TO_ADDR
// if tmp then
3106: LD_VAR 0 8
3110: IFFALSE 3153
// begin for i in tmp do
3112: LD_ADDR_VAR 0 7
3116: PUSH
3117: LD_VAR 0 8
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3151
// if i [ 1 ] = b_ext_radio then
3125: LD_VAR 0 7
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PUSH
3134: LD_INT 22
3136: EQUAL
3137: IFFALSE 3149
// begin control := control_remote ;
3139: LD_ADDR_VAR 0 4
3143: PUSH
3144: LD_INT 2
3146: ST_TO_ADDR
// break ;
3147: GO 3151
// end ;
3149: GO 3122
3151: POP
3152: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3153: LD_VAR 0 1
3157: PPUSH
3158: LD_VAR 0 2
3162: PPUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: LD_VAR 0 4
3172: PPUSH
3173: LD_VAR 0 5
3177: PPUSH
3178: CALL_OW 448
3182: IFFALSE 3217
// begin result := [ chassis , engine , control , weapon ] ;
3184: LD_ADDR_VAR 0 6
3188: PUSH
3189: LD_VAR 0 2
3193: PUSH
3194: LD_VAR 0 3
3198: PUSH
3199: LD_VAR 0 4
3203: PUSH
3204: LD_VAR 0 5
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: ST_TO_ADDR
// exit ;
3215: GO 3629
// end ; _chassis := AvailableChassisList ( factory ) ;
3217: LD_ADDR_VAR 0 9
3221: PUSH
3222: LD_VAR 0 1
3226: PPUSH
3227: CALL_OW 475
3231: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3232: LD_ADDR_VAR 0 11
3236: PUSH
3237: LD_VAR 0 1
3241: PPUSH
3242: CALL_OW 476
3246: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3247: LD_ADDR_VAR 0 12
3251: PUSH
3252: LD_VAR 0 1
3256: PPUSH
3257: CALL_OW 477
3261: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3262: LD_ADDR_VAR 0 10
3266: PUSH
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 478
3276: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3277: LD_VAR 0 9
3281: NOT
3282: PUSH
3283: LD_VAR 0 11
3287: NOT
3288: OR
3289: PUSH
3290: LD_VAR 0 12
3294: NOT
3295: OR
3296: PUSH
3297: LD_VAR 0 10
3301: NOT
3302: OR
3303: IFFALSE 3338
// begin result := [ chassis , engine , control , weapon ] ;
3305: LD_ADDR_VAR 0 6
3309: PUSH
3310: LD_VAR 0 2
3314: PUSH
3315: LD_VAR 0 3
3319: PUSH
3320: LD_VAR 0 4
3324: PUSH
3325: LD_VAR 0 5
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: ST_TO_ADDR
// exit ;
3336: GO 3629
// end ; if not chassis in _chassis then
3338: LD_VAR 0 2
3342: PUSH
3343: LD_VAR 0 9
3347: IN
3348: NOT
3349: IFFALSE 3375
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3351: LD_ADDR_VAR 0 2
3355: PUSH
3356: LD_VAR 0 9
3360: PUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_VAR 0 9
3368: PPUSH
3369: CALL_OW 12
3373: ARRAY
3374: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3375: LD_VAR 0 2
3379: PPUSH
3380: LD_VAR 0 3
3384: PPUSH
3385: CALL 3634 0 2
3389: NOT
3390: IFFALSE 3449
// repeat engine := _engine [ 1 ] ;
3392: LD_ADDR_VAR 0 3
3396: PUSH
3397: LD_VAR 0 11
3401: PUSH
3402: LD_INT 1
3404: ARRAY
3405: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3406: LD_ADDR_VAR 0 11
3410: PUSH
3411: LD_VAR 0 11
3415: PPUSH
3416: LD_INT 1
3418: PPUSH
3419: CALL_OW 3
3423: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3424: LD_VAR 0 2
3428: PPUSH
3429: LD_VAR 0 3
3433: PPUSH
3434: CALL 3634 0 2
3438: PUSH
3439: LD_VAR 0 11
3443: PUSH
3444: EMPTY
3445: EQUAL
3446: OR
3447: IFFALSE 3392
// if not control in _control then
3449: LD_VAR 0 4
3453: PUSH
3454: LD_VAR 0 12
3458: IN
3459: NOT
3460: IFFALSE 3486
// control := _control [ rand ( 1 , _control ) ] ;
3462: LD_ADDR_VAR 0 4
3466: PUSH
3467: LD_VAR 0 12
3471: PUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_VAR 0 12
3479: PPUSH
3480: CALL_OW 12
3484: ARRAY
3485: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3486: LD_VAR 0 2
3490: PPUSH
3491: LD_VAR 0 5
3495: PPUSH
3496: CALL 3854 0 2
3500: NOT
3501: IFFALSE 3560
// repeat weapon := _weapon [ 1 ] ;
3503: LD_ADDR_VAR 0 5
3507: PUSH
3508: LD_VAR 0 10
3512: PUSH
3513: LD_INT 1
3515: ARRAY
3516: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3517: LD_ADDR_VAR 0 10
3521: PUSH
3522: LD_VAR 0 10
3526: PPUSH
3527: LD_INT 1
3529: PPUSH
3530: CALL_OW 3
3534: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3535: LD_VAR 0 2
3539: PPUSH
3540: LD_VAR 0 5
3544: PPUSH
3545: CALL 3854 0 2
3549: PUSH
3550: LD_VAR 0 10
3554: PUSH
3555: EMPTY
3556: EQUAL
3557: OR
3558: IFFALSE 3503
// result := [ ] ;
3560: LD_ADDR_VAR 0 6
3564: PUSH
3565: EMPTY
3566: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3567: LD_VAR 0 1
3571: PPUSH
3572: LD_VAR 0 2
3576: PPUSH
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_VAR 0 4
3586: PPUSH
3587: LD_VAR 0 5
3591: PPUSH
3592: CALL_OW 448
3596: IFFALSE 3629
// result := [ chassis , engine , control , weapon ] ;
3598: LD_ADDR_VAR 0 6
3602: PUSH
3603: LD_VAR 0 2
3607: PUSH
3608: LD_VAR 0 3
3612: PUSH
3613: LD_VAR 0 4
3617: PUSH
3618: LD_VAR 0 5
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: ST_TO_ADDR
// end ;
3629: LD_VAR 0 6
3633: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3634: LD_INT 0
3636: PPUSH
// if not chassis or not engine then
3637: LD_VAR 0 1
3641: NOT
3642: PUSH
3643: LD_VAR 0 2
3647: NOT
3648: OR
3649: IFFALSE 3653
// exit ;
3651: GO 3849
// case engine of engine_solar :
3653: LD_VAR 0 2
3657: PUSH
3658: LD_INT 2
3660: DOUBLE
3661: EQUAL
3662: IFTRUE 3666
3664: GO 3704
3666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3667: LD_ADDR_VAR 0 3
3671: PUSH
3672: LD_INT 11
3674: PUSH
3675: LD_INT 12
3677: PUSH
3678: LD_INT 13
3680: PUSH
3681: LD_INT 14
3683: PUSH
3684: LD_INT 1
3686: PUSH
3687: LD_INT 2
3689: PUSH
3690: LD_INT 3
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: ST_TO_ADDR
3702: GO 3833
3704: LD_INT 1
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3712
3710: GO 3774
3712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3713: LD_ADDR_VAR 0 3
3717: PUSH
3718: LD_INT 11
3720: PUSH
3721: LD_INT 12
3723: PUSH
3724: LD_INT 13
3726: PUSH
3727: LD_INT 14
3729: PUSH
3730: LD_INT 1
3732: PUSH
3733: LD_INT 2
3735: PUSH
3736: LD_INT 3
3738: PUSH
3739: LD_INT 4
3741: PUSH
3742: LD_INT 5
3744: PUSH
3745: LD_INT 21
3747: PUSH
3748: LD_INT 23
3750: PUSH
3751: LD_INT 22
3753: PUSH
3754: LD_INT 24
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: ST_TO_ADDR
3772: GO 3833
3774: LD_INT 3
3776: DOUBLE
3777: EQUAL
3778: IFTRUE 3782
3780: GO 3832
3782: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_INT 13
3790: PUSH
3791: LD_INT 14
3793: PUSH
3794: LD_INT 2
3796: PUSH
3797: LD_INT 3
3799: PUSH
3800: LD_INT 4
3802: PUSH
3803: LD_INT 5
3805: PUSH
3806: LD_INT 21
3808: PUSH
3809: LD_INT 22
3811: PUSH
3812: LD_INT 23
3814: PUSH
3815: LD_INT 24
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: ST_TO_ADDR
3830: GO 3833
3832: POP
// result := ( chassis in result ) ;
3833: LD_ADDR_VAR 0 3
3837: PUSH
3838: LD_VAR 0 1
3842: PUSH
3843: LD_VAR 0 3
3847: IN
3848: ST_TO_ADDR
// end ;
3849: LD_VAR 0 3
3853: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3854: LD_INT 0
3856: PPUSH
// if not chassis or not weapon then
3857: LD_VAR 0 1
3861: NOT
3862: PUSH
3863: LD_VAR 0 2
3867: NOT
3868: OR
3869: IFFALSE 3873
// exit ;
3871: GO 4933
// case weapon of us_machine_gun :
3873: LD_VAR 0 2
3877: PUSH
3878: LD_INT 2
3880: DOUBLE
3881: EQUAL
3882: IFTRUE 3886
3884: GO 3916
3886: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 1
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 5
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: ST_TO_ADDR
3914: GO 4917
3916: LD_INT 3
3918: DOUBLE
3919: EQUAL
3920: IFTRUE 3924
3922: GO 3954
3924: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3925: LD_ADDR_VAR 0 3
3929: PUSH
3930: LD_INT 1
3932: PUSH
3933: LD_INT 2
3935: PUSH
3936: LD_INT 3
3938: PUSH
3939: LD_INT 4
3941: PUSH
3942: LD_INT 5
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: ST_TO_ADDR
3952: GO 4917
3954: LD_INT 11
3956: DOUBLE
3957: EQUAL
3958: IFTRUE 3962
3960: GO 3992
3962: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3963: LD_ADDR_VAR 0 3
3967: PUSH
3968: LD_INT 1
3970: PUSH
3971: LD_INT 2
3973: PUSH
3974: LD_INT 3
3976: PUSH
3977: LD_INT 4
3979: PUSH
3980: LD_INT 5
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: ST_TO_ADDR
3990: GO 4917
3992: LD_INT 4
3994: DOUBLE
3995: EQUAL
3996: IFTRUE 4000
3998: GO 4026
4000: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4001: LD_ADDR_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 5
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: ST_TO_ADDR
4024: GO 4917
4026: LD_INT 5
4028: DOUBLE
4029: EQUAL
4030: IFTRUE 4034
4032: GO 4060
4034: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_INT 2
4042: PUSH
4043: LD_INT 3
4045: PUSH
4046: LD_INT 4
4048: PUSH
4049: LD_INT 5
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: ST_TO_ADDR
4058: GO 4917
4060: LD_INT 9
4062: DOUBLE
4063: EQUAL
4064: IFTRUE 4068
4066: GO 4094
4068: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4069: LD_ADDR_VAR 0 3
4073: PUSH
4074: LD_INT 2
4076: PUSH
4077: LD_INT 3
4079: PUSH
4080: LD_INT 4
4082: PUSH
4083: LD_INT 5
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: ST_TO_ADDR
4092: GO 4917
4094: LD_INT 7
4096: DOUBLE
4097: EQUAL
4098: IFTRUE 4102
4100: GO 4128
4102: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4103: LD_ADDR_VAR 0 3
4107: PUSH
4108: LD_INT 2
4110: PUSH
4111: LD_INT 3
4113: PUSH
4114: LD_INT 4
4116: PUSH
4117: LD_INT 5
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: ST_TO_ADDR
4126: GO 4917
4128: LD_INT 12
4130: DOUBLE
4131: EQUAL
4132: IFTRUE 4136
4134: GO 4162
4136: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4137: LD_ADDR_VAR 0 3
4141: PUSH
4142: LD_INT 2
4144: PUSH
4145: LD_INT 3
4147: PUSH
4148: LD_INT 4
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: ST_TO_ADDR
4160: GO 4917
4162: LD_INT 13
4164: DOUBLE
4165: EQUAL
4166: IFTRUE 4170
4168: GO 4196
4170: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4171: LD_ADDR_VAR 0 3
4175: PUSH
4176: LD_INT 2
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 4
4184: PUSH
4185: LD_INT 5
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: ST_TO_ADDR
4194: GO 4917
4196: LD_INT 14
4198: DOUBLE
4199: EQUAL
4200: IFTRUE 4204
4202: GO 4222
4204: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4205: LD_ADDR_VAR 0 3
4209: PUSH
4210: LD_INT 4
4212: PUSH
4213: LD_INT 5
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: ST_TO_ADDR
4220: GO 4917
4222: LD_INT 6
4224: DOUBLE
4225: EQUAL
4226: IFTRUE 4230
4228: GO 4248
4230: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4231: LD_ADDR_VAR 0 3
4235: PUSH
4236: LD_INT 4
4238: PUSH
4239: LD_INT 5
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: ST_TO_ADDR
4246: GO 4917
4248: LD_INT 10
4250: DOUBLE
4251: EQUAL
4252: IFTRUE 4256
4254: GO 4274
4256: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4257: LD_ADDR_VAR 0 3
4261: PUSH
4262: LD_INT 4
4264: PUSH
4265: LD_INT 5
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: ST_TO_ADDR
4272: GO 4917
4274: LD_INT 22
4276: DOUBLE
4277: EQUAL
4278: IFTRUE 4282
4280: GO 4308
4282: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4283: LD_ADDR_VAR 0 3
4287: PUSH
4288: LD_INT 11
4290: PUSH
4291: LD_INT 12
4293: PUSH
4294: LD_INT 13
4296: PUSH
4297: LD_INT 14
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: ST_TO_ADDR
4306: GO 4917
4308: LD_INT 23
4310: DOUBLE
4311: EQUAL
4312: IFTRUE 4316
4314: GO 4342
4316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_INT 11
4324: PUSH
4325: LD_INT 12
4327: PUSH
4328: LD_INT 13
4330: PUSH
4331: LD_INT 14
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: ST_TO_ADDR
4340: GO 4917
4342: LD_INT 24
4344: DOUBLE
4345: EQUAL
4346: IFTRUE 4350
4348: GO 4376
4350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4351: LD_ADDR_VAR 0 3
4355: PUSH
4356: LD_INT 11
4358: PUSH
4359: LD_INT 12
4361: PUSH
4362: LD_INT 13
4364: PUSH
4365: LD_INT 14
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: ST_TO_ADDR
4374: GO 4917
4376: LD_INT 30
4378: DOUBLE
4379: EQUAL
4380: IFTRUE 4384
4382: GO 4410
4384: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4385: LD_ADDR_VAR 0 3
4389: PUSH
4390: LD_INT 11
4392: PUSH
4393: LD_INT 12
4395: PUSH
4396: LD_INT 13
4398: PUSH
4399: LD_INT 14
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: ST_TO_ADDR
4408: GO 4917
4410: LD_INT 25
4412: DOUBLE
4413: EQUAL
4414: IFTRUE 4418
4416: GO 4436
4418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4419: LD_ADDR_VAR 0 3
4423: PUSH
4424: LD_INT 13
4426: PUSH
4427: LD_INT 14
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: ST_TO_ADDR
4434: GO 4917
4436: LD_INT 27
4438: DOUBLE
4439: EQUAL
4440: IFTRUE 4444
4442: GO 4462
4444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 13
4452: PUSH
4453: LD_INT 14
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: ST_TO_ADDR
4460: GO 4917
4462: LD_INT 92
4464: DOUBLE
4465: EQUAL
4466: IFTRUE 4470
4468: GO 4496
4470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: LD_INT 11
4478: PUSH
4479: LD_INT 12
4481: PUSH
4482: LD_INT 13
4484: PUSH
4485: LD_INT 14
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: ST_TO_ADDR
4494: GO 4917
4496: LD_INT 28
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4504
4502: GO 4522
4504: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: LD_INT 13
4512: PUSH
4513: LD_INT 14
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: ST_TO_ADDR
4520: GO 4917
4522: LD_INT 29
4524: DOUBLE
4525: EQUAL
4526: IFTRUE 4530
4528: GO 4548
4530: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4531: LD_ADDR_VAR 0 3
4535: PUSH
4536: LD_INT 13
4538: PUSH
4539: LD_INT 14
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: ST_TO_ADDR
4546: GO 4917
4548: LD_INT 31
4550: DOUBLE
4551: EQUAL
4552: IFTRUE 4556
4554: GO 4574
4556: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4557: LD_ADDR_VAR 0 3
4561: PUSH
4562: LD_INT 13
4564: PUSH
4565: LD_INT 14
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: ST_TO_ADDR
4572: GO 4917
4574: LD_INT 26
4576: DOUBLE
4577: EQUAL
4578: IFTRUE 4582
4580: GO 4600
4582: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4583: LD_ADDR_VAR 0 3
4587: PUSH
4588: LD_INT 13
4590: PUSH
4591: LD_INT 14
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: ST_TO_ADDR
4598: GO 4917
4600: LD_INT 42
4602: DOUBLE
4603: EQUAL
4604: IFTRUE 4608
4606: GO 4634
4608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4609: LD_ADDR_VAR 0 3
4613: PUSH
4614: LD_INT 21
4616: PUSH
4617: LD_INT 22
4619: PUSH
4620: LD_INT 23
4622: PUSH
4623: LD_INT 24
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: ST_TO_ADDR
4632: GO 4917
4634: LD_INT 43
4636: DOUBLE
4637: EQUAL
4638: IFTRUE 4642
4640: GO 4668
4642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4643: LD_ADDR_VAR 0 3
4647: PUSH
4648: LD_INT 21
4650: PUSH
4651: LD_INT 22
4653: PUSH
4654: LD_INT 23
4656: PUSH
4657: LD_INT 24
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: ST_TO_ADDR
4666: GO 4917
4668: LD_INT 44
4670: DOUBLE
4671: EQUAL
4672: IFTRUE 4676
4674: GO 4702
4676: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4677: LD_ADDR_VAR 0 3
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 22
4687: PUSH
4688: LD_INT 23
4690: PUSH
4691: LD_INT 24
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: ST_TO_ADDR
4700: GO 4917
4702: LD_INT 45
4704: DOUBLE
4705: EQUAL
4706: IFTRUE 4710
4708: GO 4736
4710: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4711: LD_ADDR_VAR 0 3
4715: PUSH
4716: LD_INT 21
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_INT 23
4724: PUSH
4725: LD_INT 24
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: ST_TO_ADDR
4734: GO 4917
4736: LD_INT 49
4738: DOUBLE
4739: EQUAL
4740: IFTRUE 4744
4742: GO 4770
4744: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4745: LD_ADDR_VAR 0 3
4749: PUSH
4750: LD_INT 21
4752: PUSH
4753: LD_INT 22
4755: PUSH
4756: LD_INT 23
4758: PUSH
4759: LD_INT 24
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
4768: GO 4917
4770: LD_INT 51
4772: DOUBLE
4773: EQUAL
4774: IFTRUE 4778
4776: GO 4804
4778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4779: LD_ADDR_VAR 0 3
4783: PUSH
4784: LD_INT 21
4786: PUSH
4787: LD_INT 22
4789: PUSH
4790: LD_INT 23
4792: PUSH
4793: LD_INT 24
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: ST_TO_ADDR
4802: GO 4917
4804: LD_INT 52
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4812
4810: GO 4838
4812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4813: LD_ADDR_VAR 0 3
4817: PUSH
4818: LD_INT 21
4820: PUSH
4821: LD_INT 22
4823: PUSH
4824: LD_INT 23
4826: PUSH
4827: LD_INT 24
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: ST_TO_ADDR
4836: GO 4917
4838: LD_INT 53
4840: DOUBLE
4841: EQUAL
4842: IFTRUE 4846
4844: GO 4864
4846: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4847: LD_ADDR_VAR 0 3
4851: PUSH
4852: LD_INT 23
4854: PUSH
4855: LD_INT 24
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: ST_TO_ADDR
4862: GO 4917
4864: LD_INT 46
4866: DOUBLE
4867: EQUAL
4868: IFTRUE 4872
4870: GO 4890
4872: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4873: LD_ADDR_VAR 0 3
4877: PUSH
4878: LD_INT 23
4880: PUSH
4881: LD_INT 24
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: ST_TO_ADDR
4888: GO 4917
4890: LD_INT 47
4892: DOUBLE
4893: EQUAL
4894: IFTRUE 4898
4896: GO 4916
4898: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: LD_INT 23
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: ST_TO_ADDR
4914: GO 4917
4916: POP
// result := ( chassis in result ) ;
4917: LD_ADDR_VAR 0 3
4921: PUSH
4922: LD_VAR 0 1
4926: PUSH
4927: LD_VAR 0 3
4931: IN
4932: ST_TO_ADDR
// end ;
4933: LD_VAR 0 3
4937: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4938: LD_INT 0
4940: PPUSH
4941: PPUSH
4942: PPUSH
4943: PPUSH
4944: PPUSH
4945: PPUSH
4946: PPUSH
// result := array ;
4947: LD_ADDR_VAR 0 5
4951: PUSH
4952: LD_VAR 0 1
4956: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4957: LD_VAR 0 1
4961: NOT
4962: PUSH
4963: LD_VAR 0 2
4967: NOT
4968: OR
4969: PUSH
4970: LD_VAR 0 3
4974: NOT
4975: OR
4976: PUSH
4977: LD_VAR 0 2
4981: PUSH
4982: LD_VAR 0 1
4986: GREATER
4987: OR
4988: PUSH
4989: LD_VAR 0 3
4993: PUSH
4994: LD_VAR 0 1
4998: GREATER
4999: OR
5000: IFFALSE 5004
// exit ;
5002: GO 5300
// if direction then
5004: LD_VAR 0 4
5008: IFFALSE 5072
// begin d := 1 ;
5010: LD_ADDR_VAR 0 9
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// if i_from > i_to then
5018: LD_VAR 0 2
5022: PUSH
5023: LD_VAR 0 3
5027: GREATER
5028: IFFALSE 5054
// length := ( array - i_from ) + i_to else
5030: LD_ADDR_VAR 0 11
5034: PUSH
5035: LD_VAR 0 1
5039: PUSH
5040: LD_VAR 0 2
5044: MINUS
5045: PUSH
5046: LD_VAR 0 3
5050: PLUS
5051: ST_TO_ADDR
5052: GO 5070
// length := i_to - i_from ;
5054: LD_ADDR_VAR 0 11
5058: PUSH
5059: LD_VAR 0 3
5063: PUSH
5064: LD_VAR 0 2
5068: MINUS
5069: ST_TO_ADDR
// end else
5070: GO 5133
// begin d := - 1 ;
5072: LD_ADDR_VAR 0 9
5076: PUSH
5077: LD_INT 1
5079: NEG
5080: ST_TO_ADDR
// if i_from > i_to then
5081: LD_VAR 0 2
5085: PUSH
5086: LD_VAR 0 3
5090: GREATER
5091: IFFALSE 5111
// length := i_from - i_to else
5093: LD_ADDR_VAR 0 11
5097: PUSH
5098: LD_VAR 0 2
5102: PUSH
5103: LD_VAR 0 3
5107: MINUS
5108: ST_TO_ADDR
5109: GO 5133
// length := ( array - i_to ) + i_from ;
5111: LD_ADDR_VAR 0 11
5115: PUSH
5116: LD_VAR 0 1
5120: PUSH
5121: LD_VAR 0 3
5125: MINUS
5126: PUSH
5127: LD_VAR 0 2
5131: PLUS
5132: ST_TO_ADDR
// end ; if not length then
5133: LD_VAR 0 11
5137: NOT
5138: IFFALSE 5142
// exit ;
5140: GO 5300
// tmp := array ;
5142: LD_ADDR_VAR 0 10
5146: PUSH
5147: LD_VAR 0 1
5151: ST_TO_ADDR
// for i = 1 to length do
5152: LD_ADDR_VAR 0 6
5156: PUSH
5157: DOUBLE
5158: LD_INT 1
5160: DEC
5161: ST_TO_ADDR
5162: LD_VAR 0 11
5166: PUSH
5167: FOR_TO
5168: IFFALSE 5288
// begin for j = 1 to array do
5170: LD_ADDR_VAR 0 7
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_VAR 0 1
5184: PUSH
5185: FOR_TO
5186: IFFALSE 5274
// begin k := j + d ;
5188: LD_ADDR_VAR 0 8
5192: PUSH
5193: LD_VAR 0 7
5197: PUSH
5198: LD_VAR 0 9
5202: PLUS
5203: ST_TO_ADDR
// if k > array then
5204: LD_VAR 0 8
5208: PUSH
5209: LD_VAR 0 1
5213: GREATER
5214: IFFALSE 5224
// k := 1 ;
5216: LD_ADDR_VAR 0 8
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// if not k then
5224: LD_VAR 0 8
5228: NOT
5229: IFFALSE 5241
// k := array ;
5231: LD_ADDR_VAR 0 8
5235: PUSH
5236: LD_VAR 0 1
5240: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5241: LD_ADDR_VAR 0 10
5245: PUSH
5246: LD_VAR 0 10
5250: PPUSH
5251: LD_VAR 0 8
5255: PPUSH
5256: LD_VAR 0 1
5260: PUSH
5261: LD_VAR 0 7
5265: ARRAY
5266: PPUSH
5267: CALL_OW 1
5271: ST_TO_ADDR
// end ;
5272: GO 5185
5274: POP
5275: POP
// array := tmp ;
5276: LD_ADDR_VAR 0 1
5280: PUSH
5281: LD_VAR 0 10
5285: ST_TO_ADDR
// end ;
5286: GO 5167
5288: POP
5289: POP
// result := array ;
5290: LD_ADDR_VAR 0 5
5294: PUSH
5295: LD_VAR 0 1
5299: ST_TO_ADDR
// end ;
5300: LD_VAR 0 5
5304: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5305: LD_INT 0
5307: PPUSH
5308: PPUSH
// result := 0 ;
5309: LD_ADDR_VAR 0 3
5313: PUSH
5314: LD_INT 0
5316: ST_TO_ADDR
// if not array or not value in array then
5317: LD_VAR 0 1
5321: NOT
5322: PUSH
5323: LD_VAR 0 2
5327: PUSH
5328: LD_VAR 0 1
5332: IN
5333: NOT
5334: OR
5335: IFFALSE 5339
// exit ;
5337: GO 5393
// for i = 1 to array do
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: DOUBLE
5345: LD_INT 1
5347: DEC
5348: ST_TO_ADDR
5349: LD_VAR 0 1
5353: PUSH
5354: FOR_TO
5355: IFFALSE 5391
// if value = array [ i ] then
5357: LD_VAR 0 2
5361: PUSH
5362: LD_VAR 0 1
5366: PUSH
5367: LD_VAR 0 4
5371: ARRAY
5372: EQUAL
5373: IFFALSE 5389
// begin result := i ;
5375: LD_ADDR_VAR 0 3
5379: PUSH
5380: LD_VAR 0 4
5384: ST_TO_ADDR
// exit ;
5385: POP
5386: POP
5387: GO 5393
// end ;
5389: GO 5354
5391: POP
5392: POP
// end ;
5393: LD_VAR 0 3
5397: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5398: LD_INT 0
5400: PPUSH
// vc_chassis := chassis ;
5401: LD_ADDR_OWVAR 37
5405: PUSH
5406: LD_VAR 0 1
5410: ST_TO_ADDR
// vc_engine := engine ;
5411: LD_ADDR_OWVAR 39
5415: PUSH
5416: LD_VAR 0 2
5420: ST_TO_ADDR
// vc_control := control ;
5421: LD_ADDR_OWVAR 38
5425: PUSH
5426: LD_VAR 0 3
5430: ST_TO_ADDR
// vc_weapon := weapon ;
5431: LD_ADDR_OWVAR 40
5435: PUSH
5436: LD_VAR 0 4
5440: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5441: LD_ADDR_OWVAR 41
5445: PUSH
5446: LD_VAR 0 5
5450: ST_TO_ADDR
// end ;
5451: LD_VAR 0 6
5455: RET
// export function WantPlant ( unit ) ; var task ; begin
5456: LD_INT 0
5458: PPUSH
5459: PPUSH
// result := false ;
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: LD_INT 0
5467: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5468: LD_ADDR_VAR 0 3
5472: PUSH
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL_OW 437
5482: ST_TO_ADDR
// if task then
5483: LD_VAR 0 3
5487: IFFALSE 5515
// if task [ 1 ] [ 1 ] = p then
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PUSH
5502: LD_STRING p
5504: EQUAL
5505: IFFALSE 5515
// result := true ;
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 1
5514: ST_TO_ADDR
// end ;
5515: LD_VAR 0 2
5519: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5520: LD_INT 0
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
// if pos < 1 then
5526: LD_VAR 0 2
5530: PUSH
5531: LD_INT 1
5533: LESS
5534: IFFALSE 5538
// exit ;
5536: GO 5841
// if pos = 1 then
5538: LD_VAR 0 2
5542: PUSH
5543: LD_INT 1
5545: EQUAL
5546: IFFALSE 5579
// result := Replace ( arr , pos [ 1 ] , value ) else
5548: LD_ADDR_VAR 0 4
5552: PUSH
5553: LD_VAR 0 1
5557: PPUSH
5558: LD_VAR 0 2
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 3
5571: PPUSH
5572: CALL_OW 1
5576: ST_TO_ADDR
5577: GO 5841
// begin tmp := arr ;
5579: LD_ADDR_VAR 0 6
5583: PUSH
5584: LD_VAR 0 1
5588: ST_TO_ADDR
// s_arr := [ tmp ] ;
5589: LD_ADDR_VAR 0 7
5593: PUSH
5594: LD_VAR 0 6
5598: PUSH
5599: EMPTY
5600: LIST
5601: ST_TO_ADDR
// for i = 1 to pos - 1 do
5602: LD_ADDR_VAR 0 5
5606: PUSH
5607: DOUBLE
5608: LD_INT 1
5610: DEC
5611: ST_TO_ADDR
5612: LD_VAR 0 2
5616: PUSH
5617: LD_INT 1
5619: MINUS
5620: PUSH
5621: FOR_TO
5622: IFFALSE 5667
// begin tmp := tmp [ pos [ i ] ] ;
5624: LD_ADDR_VAR 0 6
5628: PUSH
5629: LD_VAR 0 6
5633: PUSH
5634: LD_VAR 0 2
5638: PUSH
5639: LD_VAR 0 5
5643: ARRAY
5644: ARRAY
5645: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5646: LD_ADDR_VAR 0 7
5650: PUSH
5651: LD_VAR 0 7
5655: PUSH
5656: LD_VAR 0 6
5660: PUSH
5661: EMPTY
5662: LIST
5663: ADD
5664: ST_TO_ADDR
// end ;
5665: GO 5621
5667: POP
5668: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 2
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PPUSH
5690: LD_VAR 0 3
5694: PPUSH
5695: CALL_OW 1
5699: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5700: LD_ADDR_VAR 0 7
5704: PUSH
5705: LD_VAR 0 7
5709: PPUSH
5710: LD_VAR 0 7
5714: PPUSH
5715: LD_VAR 0 6
5719: PPUSH
5720: CALL_OW 1
5724: ST_TO_ADDR
// for i = s_arr downto 2 do
5725: LD_ADDR_VAR 0 5
5729: PUSH
5730: DOUBLE
5731: LD_VAR 0 7
5735: INC
5736: ST_TO_ADDR
5737: LD_INT 2
5739: PUSH
5740: FOR_DOWNTO
5741: IFFALSE 5825
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5743: LD_ADDR_VAR 0 6
5747: PUSH
5748: LD_VAR 0 7
5752: PUSH
5753: LD_VAR 0 5
5757: PUSH
5758: LD_INT 1
5760: MINUS
5761: ARRAY
5762: PPUSH
5763: LD_VAR 0 2
5767: PUSH
5768: LD_VAR 0 5
5772: PUSH
5773: LD_INT 1
5775: MINUS
5776: ARRAY
5777: PPUSH
5778: LD_VAR 0 7
5782: PUSH
5783: LD_VAR 0 5
5787: ARRAY
5788: PPUSH
5789: CALL_OW 1
5793: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5794: LD_ADDR_VAR 0 7
5798: PUSH
5799: LD_VAR 0 7
5803: PPUSH
5804: LD_VAR 0 5
5808: PUSH
5809: LD_INT 1
5811: MINUS
5812: PPUSH
5813: LD_VAR 0 6
5817: PPUSH
5818: CALL_OW 1
5822: ST_TO_ADDR
// end ;
5823: GO 5740
5825: POP
5826: POP
// result := s_arr [ 1 ] ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_VAR 0 7
5836: PUSH
5837: LD_INT 1
5839: ARRAY
5840: ST_TO_ADDR
// end ; end ;
5841: LD_VAR 0 4
5845: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5846: LD_INT 0
5848: PPUSH
5849: PPUSH
// if not list then
5850: LD_VAR 0 1
5854: NOT
5855: IFFALSE 5859
// exit ;
5857: GO 5950
// i := list [ pos1 ] ;
5859: LD_ADDR_VAR 0 5
5863: PUSH
5864: LD_VAR 0 1
5868: PUSH
5869: LD_VAR 0 2
5873: ARRAY
5874: ST_TO_ADDR
// if not i then
5875: LD_VAR 0 5
5879: NOT
5880: IFFALSE 5884
// exit ;
5882: GO 5950
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5884: LD_ADDR_VAR 0 1
5888: PUSH
5889: LD_VAR 0 1
5893: PPUSH
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_VAR 0 1
5903: PUSH
5904: LD_VAR 0 3
5908: ARRAY
5909: PPUSH
5910: CALL_OW 1
5914: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5915: LD_ADDR_VAR 0 1
5919: PUSH
5920: LD_VAR 0 1
5924: PPUSH
5925: LD_VAR 0 3
5929: PPUSH
5930: LD_VAR 0 5
5934: PPUSH
5935: CALL_OW 1
5939: ST_TO_ADDR
// result := list ;
5940: LD_ADDR_VAR 0 4
5944: PUSH
5945: LD_VAR 0 1
5949: ST_TO_ADDR
// end ;
5950: LD_VAR 0 4
5954: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5955: LD_INT 0
5957: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5958: LD_ADDR_VAR 0 5
5962: PUSH
5963: LD_VAR 0 1
5967: PPUSH
5968: CALL_OW 250
5972: PPUSH
5973: LD_VAR 0 1
5977: PPUSH
5978: CALL_OW 251
5982: PPUSH
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_VAR 0 3
5992: PPUSH
5993: LD_VAR 0 4
5997: PPUSH
5998: CALL 6376 0 5
6002: ST_TO_ADDR
// end ;
6003: LD_VAR 0 5
6007: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
// if not list or not unit then
6014: LD_VAR 0 2
6018: NOT
6019: PUSH
6020: LD_VAR 0 1
6024: NOT
6025: OR
6026: IFFALSE 6030
// exit ;
6028: GO 6371
// result := [ ] ;
6030: LD_ADDR_VAR 0 5
6034: PUSH
6035: EMPTY
6036: ST_TO_ADDR
// for i in list do
6037: LD_ADDR_VAR 0 6
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: FOR_IN
6048: IFFALSE 6266
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6050: LD_ADDR_VAR 0 8
6054: PUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_VAR 0 6
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PPUSH
6069: LD_VAR 0 6
6073: PUSH
6074: LD_INT 2
6076: ARRAY
6077: PPUSH
6078: CALL_OW 297
6082: ST_TO_ADDR
// if not Count ( result ) then
6083: LD_VAR 0 5
6087: PPUSH
6088: CALL 2660 0 1
6092: NOT
6093: IFFALSE 6126
// begin result := Join ( result , [ i , tmp ] ) ;
6095: LD_ADDR_VAR 0 5
6099: PUSH
6100: LD_VAR 0 5
6104: PPUSH
6105: LD_VAR 0 6
6109: PUSH
6110: LD_VAR 0 8
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PPUSH
6119: CALL 38269 0 2
6123: ST_TO_ADDR
// continue ;
6124: GO 6047
// end ; if result [ result ] [ 2 ] <= tmp then
6126: LD_VAR 0 5
6130: PUSH
6131: LD_VAR 0 5
6135: ARRAY
6136: PUSH
6137: LD_INT 2
6139: ARRAY
6140: PUSH
6141: LD_VAR 0 8
6145: LESSEQUAL
6146: IFFALSE 6179
// result := Join ( result , [ i , tmp ] ) else
6148: LD_ADDR_VAR 0 5
6152: PUSH
6153: LD_VAR 0 5
6157: PPUSH
6158: LD_VAR 0 6
6162: PUSH
6163: LD_VAR 0 8
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PPUSH
6172: CALL 38269 0 2
6176: ST_TO_ADDR
6177: GO 6264
// begin for j := 1 to Count ( result ) do
6179: LD_ADDR_VAR 0 7
6183: PUSH
6184: DOUBLE
6185: LD_INT 1
6187: DEC
6188: ST_TO_ADDR
6189: LD_VAR 0 5
6193: PPUSH
6194: CALL 2660 0 1
6198: PUSH
6199: FOR_TO
6200: IFFALSE 6262
// begin if tmp < result [ j ] [ 2 ] then
6202: LD_VAR 0 8
6206: PUSH
6207: LD_VAR 0 5
6211: PUSH
6212: LD_VAR 0 7
6216: ARRAY
6217: PUSH
6218: LD_INT 2
6220: ARRAY
6221: LESS
6222: IFFALSE 6260
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6224: LD_ADDR_VAR 0 5
6228: PUSH
6229: LD_VAR 0 5
6233: PPUSH
6234: LD_VAR 0 7
6238: PPUSH
6239: LD_VAR 0 6
6243: PUSH
6244: LD_VAR 0 8
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PPUSH
6253: CALL_OW 2
6257: ST_TO_ADDR
// break ;
6258: GO 6262
// end ; end ;
6260: GO 6199
6262: POP
6263: POP
// end ; end ;
6264: GO 6047
6266: POP
6267: POP
// if result and not asc then
6268: LD_VAR 0 5
6272: PUSH
6273: LD_VAR 0 3
6277: NOT
6278: AND
6279: IFFALSE 6296
// result := ReverseArray ( result ) ;
6281: LD_ADDR_VAR 0 5
6285: PUSH
6286: LD_VAR 0 5
6290: PPUSH
6291: CALL 33536 0 1
6295: ST_TO_ADDR
// tmp := [ ] ;
6296: LD_ADDR_VAR 0 8
6300: PUSH
6301: EMPTY
6302: ST_TO_ADDR
// if mode then
6303: LD_VAR 0 4
6307: IFFALSE 6371
// begin for i := 1 to result do
6309: LD_ADDR_VAR 0 6
6313: PUSH
6314: DOUBLE
6315: LD_INT 1
6317: DEC
6318: ST_TO_ADDR
6319: LD_VAR 0 5
6323: PUSH
6324: FOR_TO
6325: IFFALSE 6359
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6327: LD_ADDR_VAR 0 8
6331: PUSH
6332: LD_VAR 0 8
6336: PPUSH
6337: LD_VAR 0 5
6341: PUSH
6342: LD_VAR 0 6
6346: ARRAY
6347: PUSH
6348: LD_INT 1
6350: ARRAY
6351: PPUSH
6352: CALL 38269 0 2
6356: ST_TO_ADDR
6357: GO 6324
6359: POP
6360: POP
// result := tmp ;
6361: LD_ADDR_VAR 0 5
6365: PUSH
6366: LD_VAR 0 8
6370: ST_TO_ADDR
// end ; end ;
6371: LD_VAR 0 5
6375: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
// if not list then
6382: LD_VAR 0 3
6386: NOT
6387: IFFALSE 6391
// exit ;
6389: GO 6779
// result := [ ] ;
6391: LD_ADDR_VAR 0 6
6395: PUSH
6396: EMPTY
6397: ST_TO_ADDR
// for i in list do
6398: LD_ADDR_VAR 0 7
6402: PUSH
6403: LD_VAR 0 3
6407: PUSH
6408: FOR_IN
6409: IFFALSE 6611
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6411: LD_ADDR_VAR 0 9
6415: PUSH
6416: LD_VAR 0 7
6420: PPUSH
6421: LD_VAR 0 1
6425: PPUSH
6426: LD_VAR 0 2
6430: PPUSH
6431: CALL_OW 297
6435: ST_TO_ADDR
// if not result then
6436: LD_VAR 0 6
6440: NOT
6441: IFFALSE 6467
// result := [ [ i , tmp ] ] else
6443: LD_ADDR_VAR 0 6
6447: PUSH
6448: LD_VAR 0 7
6452: PUSH
6453: LD_VAR 0 9
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: EMPTY
6463: LIST
6464: ST_TO_ADDR
6465: GO 6609
// begin if result [ result ] [ 2 ] <= tmp then
6467: LD_VAR 0 6
6471: PUSH
6472: LD_VAR 0 6
6476: ARRAY
6477: PUSH
6478: LD_INT 2
6480: ARRAY
6481: PUSH
6482: LD_VAR 0 9
6486: LESSEQUAL
6487: IFFALSE 6529
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6489: LD_ADDR_VAR 0 6
6493: PUSH
6494: LD_VAR 0 6
6498: PPUSH
6499: LD_VAR 0 6
6503: PUSH
6504: LD_INT 1
6506: PLUS
6507: PPUSH
6508: LD_VAR 0 7
6512: PUSH
6513: LD_VAR 0 9
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PPUSH
6522: CALL_OW 2
6526: ST_TO_ADDR
6527: GO 6609
// for j := 1 to result do
6529: LD_ADDR_VAR 0 8
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_VAR 0 6
6543: PUSH
6544: FOR_TO
6545: IFFALSE 6607
// begin if tmp < result [ j ] [ 2 ] then
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 6
6556: PUSH
6557: LD_VAR 0 8
6561: ARRAY
6562: PUSH
6563: LD_INT 2
6565: ARRAY
6566: LESS
6567: IFFALSE 6605
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6569: LD_ADDR_VAR 0 6
6573: PUSH
6574: LD_VAR 0 6
6578: PPUSH
6579: LD_VAR 0 8
6583: PPUSH
6584: LD_VAR 0 7
6588: PUSH
6589: LD_VAR 0 9
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 2
6602: ST_TO_ADDR
// break ;
6603: GO 6607
// end ; end ;
6605: GO 6544
6607: POP
6608: POP
// end ; end ;
6609: GO 6408
6611: POP
6612: POP
// if result and not asc then
6613: LD_VAR 0 6
6617: PUSH
6618: LD_VAR 0 4
6622: NOT
6623: AND
6624: IFFALSE 6699
// begin tmp := result ;
6626: LD_ADDR_VAR 0 9
6630: PUSH
6631: LD_VAR 0 6
6635: ST_TO_ADDR
// for i = tmp downto 1 do
6636: LD_ADDR_VAR 0 7
6640: PUSH
6641: DOUBLE
6642: LD_VAR 0 9
6646: INC
6647: ST_TO_ADDR
6648: LD_INT 1
6650: PUSH
6651: FOR_DOWNTO
6652: IFFALSE 6697
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6654: LD_ADDR_VAR 0 6
6658: PUSH
6659: LD_VAR 0 6
6663: PPUSH
6664: LD_VAR 0 9
6668: PUSH
6669: LD_VAR 0 7
6673: MINUS
6674: PUSH
6675: LD_INT 1
6677: PLUS
6678: PPUSH
6679: LD_VAR 0 9
6683: PUSH
6684: LD_VAR 0 7
6688: ARRAY
6689: PPUSH
6690: CALL_OW 1
6694: ST_TO_ADDR
6695: GO 6651
6697: POP
6698: POP
// end ; tmp := [ ] ;
6699: LD_ADDR_VAR 0 9
6703: PUSH
6704: EMPTY
6705: ST_TO_ADDR
// if mode then
6706: LD_VAR 0 5
6710: IFFALSE 6779
// begin for i = 1 to result do
6712: LD_ADDR_VAR 0 7
6716: PUSH
6717: DOUBLE
6718: LD_INT 1
6720: DEC
6721: ST_TO_ADDR
6722: LD_VAR 0 6
6726: PUSH
6727: FOR_TO
6728: IFFALSE 6767
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6730: LD_ADDR_VAR 0 9
6734: PUSH
6735: LD_VAR 0 9
6739: PPUSH
6740: LD_VAR 0 7
6744: PPUSH
6745: LD_VAR 0 6
6749: PUSH
6750: LD_VAR 0 7
6754: ARRAY
6755: PUSH
6756: LD_INT 1
6758: ARRAY
6759: PPUSH
6760: CALL_OW 1
6764: ST_TO_ADDR
6765: GO 6727
6767: POP
6768: POP
// result := tmp ;
6769: LD_ADDR_VAR 0 6
6773: PUSH
6774: LD_VAR 0 9
6778: ST_TO_ADDR
// end ; end ;
6779: LD_VAR 0 6
6783: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6784: LD_INT 0
6786: PPUSH
6787: PPUSH
6788: PPUSH
6789: PPUSH
6790: PPUSH
6791: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6792: LD_ADDR_VAR 0 5
6796: PUSH
6797: LD_INT 0
6799: PUSH
6800: LD_INT 0
6802: PUSH
6803: LD_INT 0
6805: PUSH
6806: EMPTY
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: ST_TO_ADDR
// if not x or not y then
6814: LD_VAR 0 2
6818: NOT
6819: PUSH
6820: LD_VAR 0 3
6824: NOT
6825: OR
6826: IFFALSE 6830
// exit ;
6828: GO 8480
// if not range then
6830: LD_VAR 0 4
6834: NOT
6835: IFFALSE 6845
// range := 10 ;
6837: LD_ADDR_VAR 0 4
6841: PUSH
6842: LD_INT 10
6844: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6845: LD_ADDR_VAR 0 8
6849: PUSH
6850: LD_INT 81
6852: PUSH
6853: LD_VAR 0 1
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 92
6864: PUSH
6865: LD_VAR 0 2
6869: PUSH
6870: LD_VAR 0 3
6874: PUSH
6875: LD_VAR 0 4
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 3
6888: PUSH
6889: LD_INT 21
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: PPUSH
6908: CALL_OW 69
6912: ST_TO_ADDR
// if not tmp then
6913: LD_VAR 0 8
6917: NOT
6918: IFFALSE 6922
// exit ;
6920: GO 8480
// for i in tmp do
6922: LD_ADDR_VAR 0 6
6926: PUSH
6927: LD_VAR 0 8
6931: PUSH
6932: FOR_IN
6933: IFFALSE 8455
// begin points := [ 0 , 0 , 0 ] ;
6935: LD_ADDR_VAR 0 9
6939: PUSH
6940: LD_INT 0
6942: PUSH
6943: LD_INT 0
6945: PUSH
6946: LD_INT 0
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: ST_TO_ADDR
// bpoints := 1 ;
6954: LD_ADDR_VAR 0 10
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6962: LD_VAR 0 6
6966: PPUSH
6967: CALL_OW 247
6971: PUSH
6972: LD_INT 1
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6980
6978: GO 7558
6980: POP
// begin if GetClass ( i ) = 1 then
6981: LD_VAR 0 6
6985: PPUSH
6986: CALL_OW 257
6990: PUSH
6991: LD_INT 1
6993: EQUAL
6994: IFFALSE 7015
// points := [ 10 , 5 , 3 ] ;
6996: LD_ADDR_VAR 0 9
7000: PUSH
7001: LD_INT 10
7003: PUSH
7004: LD_INT 5
7006: PUSH
7007: LD_INT 3
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7015: LD_VAR 0 6
7019: PPUSH
7020: CALL_OW 257
7024: PUSH
7025: LD_INT 2
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 4
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: IN
7039: IFFALSE 7060
// points := [ 3 , 2 , 1 ] ;
7041: LD_ADDR_VAR 0 9
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: LD_INT 2
7051: PUSH
7052: LD_INT 1
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7060: LD_VAR 0 6
7064: PPUSH
7065: CALL_OW 257
7069: PUSH
7070: LD_INT 5
7072: EQUAL
7073: IFFALSE 7094
// points := [ 130 , 5 , 2 ] ;
7075: LD_ADDR_VAR 0 9
7079: PUSH
7080: LD_INT 130
7082: PUSH
7083: LD_INT 5
7085: PUSH
7086: LD_INT 2
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7094: LD_VAR 0 6
7098: PPUSH
7099: CALL_OW 257
7103: PUSH
7104: LD_INT 8
7106: EQUAL
7107: IFFALSE 7128
// points := [ 35 , 35 , 30 ] ;
7109: LD_ADDR_VAR 0 9
7113: PUSH
7114: LD_INT 35
7116: PUSH
7117: LD_INT 35
7119: PUSH
7120: LD_INT 30
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7128: LD_VAR 0 6
7132: PPUSH
7133: CALL_OW 257
7137: PUSH
7138: LD_INT 9
7140: EQUAL
7141: IFFALSE 7162
// points := [ 20 , 55 , 40 ] ;
7143: LD_ADDR_VAR 0 9
7147: PUSH
7148: LD_INT 20
7150: PUSH
7151: LD_INT 55
7153: PUSH
7154: LD_INT 40
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: LIST
7161: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7162: LD_VAR 0 6
7166: PPUSH
7167: CALL_OW 257
7171: PUSH
7172: LD_INT 12
7174: PUSH
7175: LD_INT 16
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: IN
7182: IFFALSE 7203
// points := [ 5 , 3 , 2 ] ;
7184: LD_ADDR_VAR 0 9
7188: PUSH
7189: LD_INT 5
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: LD_INT 2
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7203: LD_VAR 0 6
7207: PPUSH
7208: CALL_OW 257
7212: PUSH
7213: LD_INT 17
7215: EQUAL
7216: IFFALSE 7237
// points := [ 100 , 50 , 75 ] ;
7218: LD_ADDR_VAR 0 9
7222: PUSH
7223: LD_INT 100
7225: PUSH
7226: LD_INT 50
7228: PUSH
7229: LD_INT 75
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7237: LD_VAR 0 6
7241: PPUSH
7242: CALL_OW 257
7246: PUSH
7247: LD_INT 15
7249: EQUAL
7250: IFFALSE 7271
// points := [ 10 , 5 , 3 ] ;
7252: LD_ADDR_VAR 0 9
7256: PUSH
7257: LD_INT 10
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7271: LD_VAR 0 6
7275: PPUSH
7276: CALL_OW 257
7280: PUSH
7281: LD_INT 14
7283: EQUAL
7284: IFFALSE 7305
// points := [ 10 , 0 , 0 ] ;
7286: LD_ADDR_VAR 0 9
7290: PUSH
7291: LD_INT 10
7293: PUSH
7294: LD_INT 0
7296: PUSH
7297: LD_INT 0
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7305: LD_VAR 0 6
7309: PPUSH
7310: CALL_OW 257
7314: PUSH
7315: LD_INT 11
7317: EQUAL
7318: IFFALSE 7339
// points := [ 30 , 10 , 5 ] ;
7320: LD_ADDR_VAR 0 9
7324: PUSH
7325: LD_INT 30
7327: PUSH
7328: LD_INT 10
7330: PUSH
7331: LD_INT 5
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7339: LD_VAR 0 1
7343: PPUSH
7344: LD_INT 5
7346: PPUSH
7347: CALL_OW 321
7351: PUSH
7352: LD_INT 2
7354: EQUAL
7355: IFFALSE 7372
// bpoints := bpoints * 1.8 ;
7357: LD_ADDR_VAR 0 10
7361: PUSH
7362: LD_VAR 0 10
7366: PUSH
7367: LD_REAL  1.80000000000000E+0000
7370: MUL
7371: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7372: LD_VAR 0 6
7376: PPUSH
7377: CALL_OW 257
7381: PUSH
7382: LD_INT 1
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 3
7390: PUSH
7391: LD_INT 4
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: IN
7400: PUSH
7401: LD_VAR 0 1
7405: PPUSH
7406: LD_INT 51
7408: PPUSH
7409: CALL_OW 321
7413: PUSH
7414: LD_INT 2
7416: EQUAL
7417: AND
7418: IFFALSE 7435
// bpoints := bpoints * 1.2 ;
7420: LD_ADDR_VAR 0 10
7424: PUSH
7425: LD_VAR 0 10
7429: PUSH
7430: LD_REAL  1.20000000000000E+0000
7433: MUL
7434: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7435: LD_VAR 0 6
7439: PPUSH
7440: CALL_OW 257
7444: PUSH
7445: LD_INT 5
7447: PUSH
7448: LD_INT 7
7450: PUSH
7451: LD_INT 9
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: IN
7459: PUSH
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_INT 52
7467: PPUSH
7468: CALL_OW 321
7472: PUSH
7473: LD_INT 2
7475: EQUAL
7476: AND
7477: IFFALSE 7494
// bpoints := bpoints * 1.5 ;
7479: LD_ADDR_VAR 0 10
7483: PUSH
7484: LD_VAR 0 10
7488: PUSH
7489: LD_REAL  1.50000000000000E+0000
7492: MUL
7493: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7494: LD_VAR 0 1
7498: PPUSH
7499: LD_INT 66
7501: PPUSH
7502: CALL_OW 321
7506: PUSH
7507: LD_INT 2
7509: EQUAL
7510: IFFALSE 7527
// bpoints := bpoints * 1.1 ;
7512: LD_ADDR_VAR 0 10
7516: PUSH
7517: LD_VAR 0 10
7521: PUSH
7522: LD_REAL  1.10000000000000E+0000
7525: MUL
7526: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7527: LD_ADDR_VAR 0 10
7531: PUSH
7532: LD_VAR 0 10
7536: PUSH
7537: LD_VAR 0 6
7541: PPUSH
7542: LD_INT 1
7544: PPUSH
7545: CALL_OW 259
7549: PUSH
7550: LD_REAL  1.15000000000000E+0000
7553: MUL
7554: MUL
7555: ST_TO_ADDR
// end ; unit_vehicle :
7556: GO 8384
7558: LD_INT 2
7560: DOUBLE
7561: EQUAL
7562: IFTRUE 7566
7564: GO 8372
7566: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7567: LD_VAR 0 6
7571: PPUSH
7572: CALL_OW 264
7576: PUSH
7577: LD_INT 2
7579: PUSH
7580: LD_INT 42
7582: PUSH
7583: LD_INT 24
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: IN
7591: IFFALSE 7612
// points := [ 25 , 5 , 3 ] ;
7593: LD_ADDR_VAR 0 9
7597: PUSH
7598: LD_INT 25
7600: PUSH
7601: LD_INT 5
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7612: LD_VAR 0 6
7616: PPUSH
7617: CALL_OW 264
7621: PUSH
7622: LD_INT 4
7624: PUSH
7625: LD_INT 43
7627: PUSH
7628: LD_INT 25
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: IN
7636: IFFALSE 7657
// points := [ 40 , 15 , 5 ] ;
7638: LD_ADDR_VAR 0 9
7642: PUSH
7643: LD_INT 40
7645: PUSH
7646: LD_INT 15
7648: PUSH
7649: LD_INT 5
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7657: LD_VAR 0 6
7661: PPUSH
7662: CALL_OW 264
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: LD_INT 23
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: IN
7677: IFFALSE 7698
// points := [ 7 , 25 , 8 ] ;
7679: LD_ADDR_VAR 0 9
7683: PUSH
7684: LD_INT 7
7686: PUSH
7687: LD_INT 25
7689: PUSH
7690: LD_INT 8
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7698: LD_VAR 0 6
7702: PPUSH
7703: CALL_OW 264
7707: PUSH
7708: LD_INT 5
7710: PUSH
7711: LD_INT 27
7713: PUSH
7714: LD_INT 44
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: IN
7722: IFFALSE 7743
// points := [ 14 , 50 , 16 ] ;
7724: LD_ADDR_VAR 0 9
7728: PUSH
7729: LD_INT 14
7731: PUSH
7732: LD_INT 50
7734: PUSH
7735: LD_INT 16
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7743: LD_VAR 0 6
7747: PPUSH
7748: CALL_OW 264
7752: PUSH
7753: LD_INT 6
7755: PUSH
7756: LD_INT 46
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: IN
7763: IFFALSE 7784
// points := [ 32 , 120 , 70 ] ;
7765: LD_ADDR_VAR 0 9
7769: PUSH
7770: LD_INT 32
7772: PUSH
7773: LD_INT 120
7775: PUSH
7776: LD_INT 70
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7784: LD_VAR 0 6
7788: PPUSH
7789: CALL_OW 264
7793: PUSH
7794: LD_INT 7
7796: PUSH
7797: LD_INT 28
7799: PUSH
7800: LD_INT 45
7802: PUSH
7803: LD_INT 92
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: IN
7812: IFFALSE 7833
// points := [ 35 , 20 , 45 ] ;
7814: LD_ADDR_VAR 0 9
7818: PUSH
7819: LD_INT 35
7821: PUSH
7822: LD_INT 20
7824: PUSH
7825: LD_INT 45
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7833: LD_VAR 0 6
7837: PPUSH
7838: CALL_OW 264
7842: PUSH
7843: LD_INT 47
7845: PUSH
7846: EMPTY
7847: LIST
7848: IN
7849: IFFALSE 7870
// points := [ 67 , 45 , 75 ] ;
7851: LD_ADDR_VAR 0 9
7855: PUSH
7856: LD_INT 67
7858: PUSH
7859: LD_INT 45
7861: PUSH
7862: LD_INT 75
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7870: LD_VAR 0 6
7874: PPUSH
7875: CALL_OW 264
7879: PUSH
7880: LD_INT 26
7882: PUSH
7883: EMPTY
7884: LIST
7885: IN
7886: IFFALSE 7907
// points := [ 120 , 30 , 80 ] ;
7888: LD_ADDR_VAR 0 9
7892: PUSH
7893: LD_INT 120
7895: PUSH
7896: LD_INT 30
7898: PUSH
7899: LD_INT 80
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7907: LD_VAR 0 6
7911: PPUSH
7912: CALL_OW 264
7916: PUSH
7917: LD_INT 22
7919: PUSH
7920: EMPTY
7921: LIST
7922: IN
7923: IFFALSE 7944
// points := [ 40 , 1 , 1 ] ;
7925: LD_ADDR_VAR 0 9
7929: PUSH
7930: LD_INT 40
7932: PUSH
7933: LD_INT 1
7935: PUSH
7936: LD_INT 1
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7944: LD_VAR 0 6
7948: PPUSH
7949: CALL_OW 264
7953: PUSH
7954: LD_INT 29
7956: PUSH
7957: EMPTY
7958: LIST
7959: IN
7960: IFFALSE 7981
// points := [ 70 , 200 , 400 ] ;
7962: LD_ADDR_VAR 0 9
7966: PUSH
7967: LD_INT 70
7969: PUSH
7970: LD_INT 200
7972: PUSH
7973: LD_INT 400
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7981: LD_VAR 0 6
7985: PPUSH
7986: CALL_OW 264
7990: PUSH
7991: LD_INT 14
7993: PUSH
7994: LD_INT 53
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: IN
8001: IFFALSE 8022
// points := [ 40 , 10 , 20 ] ;
8003: LD_ADDR_VAR 0 9
8007: PUSH
8008: LD_INT 40
8010: PUSH
8011: LD_INT 10
8013: PUSH
8014: LD_INT 20
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8022: LD_VAR 0 6
8026: PPUSH
8027: CALL_OW 264
8031: PUSH
8032: LD_INT 9
8034: PUSH
8035: EMPTY
8036: LIST
8037: IN
8038: IFFALSE 8059
// points := [ 5 , 70 , 20 ] ;
8040: LD_ADDR_VAR 0 9
8044: PUSH
8045: LD_INT 5
8047: PUSH
8048: LD_INT 70
8050: PUSH
8051: LD_INT 20
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8059: LD_VAR 0 6
8063: PPUSH
8064: CALL_OW 264
8068: PUSH
8069: LD_INT 10
8071: PUSH
8072: EMPTY
8073: LIST
8074: IN
8075: IFFALSE 8096
// points := [ 35 , 110 , 70 ] ;
8077: LD_ADDR_VAR 0 9
8081: PUSH
8082: LD_INT 35
8084: PUSH
8085: LD_INT 110
8087: PUSH
8088: LD_INT 70
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8096: LD_VAR 0 6
8100: PPUSH
8101: CALL_OW 265
8105: PUSH
8106: LD_INT 25
8108: EQUAL
8109: IFFALSE 8130
// points := [ 80 , 65 , 100 ] ;
8111: LD_ADDR_VAR 0 9
8115: PUSH
8116: LD_INT 80
8118: PUSH
8119: LD_INT 65
8121: PUSH
8122: LD_INT 100
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8130: LD_VAR 0 6
8134: PPUSH
8135: CALL_OW 263
8139: PUSH
8140: LD_INT 1
8142: EQUAL
8143: IFFALSE 8178
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8145: LD_ADDR_VAR 0 10
8149: PUSH
8150: LD_VAR 0 10
8154: PUSH
8155: LD_VAR 0 6
8159: PPUSH
8160: CALL_OW 311
8164: PPUSH
8165: LD_INT 3
8167: PPUSH
8168: CALL_OW 259
8172: PUSH
8173: LD_INT 4
8175: MUL
8176: MUL
8177: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8178: LD_VAR 0 6
8182: PPUSH
8183: CALL_OW 263
8187: PUSH
8188: LD_INT 2
8190: EQUAL
8191: IFFALSE 8242
// begin j := IsControledBy ( i ) ;
8193: LD_ADDR_VAR 0 7
8197: PUSH
8198: LD_VAR 0 6
8202: PPUSH
8203: CALL_OW 312
8207: ST_TO_ADDR
// if j then
8208: LD_VAR 0 7
8212: IFFALSE 8242
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8214: LD_ADDR_VAR 0 10
8218: PUSH
8219: LD_VAR 0 10
8223: PUSH
8224: LD_VAR 0 7
8228: PPUSH
8229: LD_INT 3
8231: PPUSH
8232: CALL_OW 259
8236: PUSH
8237: LD_INT 3
8239: MUL
8240: MUL
8241: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8242: LD_VAR 0 6
8246: PPUSH
8247: CALL_OW 264
8251: PUSH
8252: LD_INT 5
8254: PUSH
8255: LD_INT 6
8257: PUSH
8258: LD_INT 46
8260: PUSH
8261: LD_INT 44
8263: PUSH
8264: LD_INT 47
8266: PUSH
8267: LD_INT 45
8269: PUSH
8270: LD_INT 28
8272: PUSH
8273: LD_INT 7
8275: PUSH
8276: LD_INT 27
8278: PUSH
8279: LD_INT 29
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: IN
8294: PUSH
8295: LD_VAR 0 1
8299: PPUSH
8300: LD_INT 52
8302: PPUSH
8303: CALL_OW 321
8307: PUSH
8308: LD_INT 2
8310: EQUAL
8311: AND
8312: IFFALSE 8329
// bpoints := bpoints * 1.2 ;
8314: LD_ADDR_VAR 0 10
8318: PUSH
8319: LD_VAR 0 10
8323: PUSH
8324: LD_REAL  1.20000000000000E+0000
8327: MUL
8328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8329: LD_VAR 0 6
8333: PPUSH
8334: CALL_OW 264
8338: PUSH
8339: LD_INT 6
8341: PUSH
8342: LD_INT 46
8344: PUSH
8345: LD_INT 47
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: IN
8353: IFFALSE 8370
// bpoints := bpoints * 1.2 ;
8355: LD_ADDR_VAR 0 10
8359: PUSH
8360: LD_VAR 0 10
8364: PUSH
8365: LD_REAL  1.20000000000000E+0000
8368: MUL
8369: ST_TO_ADDR
// end ; unit_building :
8370: GO 8384
8372: LD_INT 3
8374: DOUBLE
8375: EQUAL
8376: IFTRUE 8380
8378: GO 8383
8380: POP
// ; end ;
8381: GO 8384
8383: POP
// for j = 1 to 3 do
8384: LD_ADDR_VAR 0 7
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 3
8396: PUSH
8397: FOR_TO
8398: IFFALSE 8451
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8400: LD_ADDR_VAR 0 5
8404: PUSH
8405: LD_VAR 0 5
8409: PPUSH
8410: LD_VAR 0 7
8414: PPUSH
8415: LD_VAR 0 5
8419: PUSH
8420: LD_VAR 0 7
8424: ARRAY
8425: PUSH
8426: LD_VAR 0 9
8430: PUSH
8431: LD_VAR 0 7
8435: ARRAY
8436: PUSH
8437: LD_VAR 0 10
8441: MUL
8442: PLUS
8443: PPUSH
8444: CALL_OW 1
8448: ST_TO_ADDR
8449: GO 8397
8451: POP
8452: POP
// end ;
8453: GO 6932
8455: POP
8456: POP
// result := Replace ( result , 4 , tmp ) ;
8457: LD_ADDR_VAR 0 5
8461: PUSH
8462: LD_VAR 0 5
8466: PPUSH
8467: LD_INT 4
8469: PPUSH
8470: LD_VAR 0 8
8474: PPUSH
8475: CALL_OW 1
8479: ST_TO_ADDR
// end ;
8480: LD_VAR 0 5
8484: RET
// export function DangerAtRange ( unit , range ) ; begin
8485: LD_INT 0
8487: PPUSH
// if not unit then
8488: LD_VAR 0 1
8492: NOT
8493: IFFALSE 8497
// exit ;
8495: GO 8542
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8497: LD_ADDR_VAR 0 3
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 255
8511: PPUSH
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 250
8521: PPUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 251
8531: PPUSH
8532: LD_VAR 0 2
8536: PPUSH
8537: CALL 6784 0 4
8541: ST_TO_ADDR
// end ;
8542: LD_VAR 0 3
8546: RET
// export function DangerInArea ( side , area ) ; begin
8547: LD_INT 0
8549: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8550: LD_ADDR_VAR 0 3
8554: PUSH
8555: LD_VAR 0 2
8559: PPUSH
8560: LD_INT 81
8562: PUSH
8563: LD_VAR 0 1
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PPUSH
8572: CALL_OW 70
8576: ST_TO_ADDR
// end ;
8577: LD_VAR 0 3
8581: RET
// export function IsExtension ( b ) ; begin
8582: LD_INT 0
8584: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_VAR 0 1
8594: PUSH
8595: LD_INT 23
8597: PUSH
8598: LD_INT 20
8600: PUSH
8601: LD_INT 22
8603: PUSH
8604: LD_INT 17
8606: PUSH
8607: LD_INT 24
8609: PUSH
8610: LD_INT 21
8612: PUSH
8613: LD_INT 19
8615: PUSH
8616: LD_INT 16
8618: PUSH
8619: LD_INT 25
8621: PUSH
8622: LD_INT 18
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: IN
8637: ST_TO_ADDR
// end ;
8638: LD_VAR 0 2
8642: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
8647: PPUSH
// result := [ ] ;
8648: LD_ADDR_VAR 0 4
8652: PUSH
8653: EMPTY
8654: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8655: LD_ADDR_VAR 0 5
8659: PUSH
8660: LD_VAR 0 2
8664: PPUSH
8665: LD_INT 21
8667: PUSH
8668: LD_INT 3
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PPUSH
8675: CALL_OW 70
8679: ST_TO_ADDR
// if not tmp then
8680: LD_VAR 0 5
8684: NOT
8685: IFFALSE 8689
// exit ;
8687: GO 8753
// if checkLink then
8689: LD_VAR 0 3
8693: IFFALSE 8743
// begin for i in tmp do
8695: LD_ADDR_VAR 0 6
8699: PUSH
8700: LD_VAR 0 5
8704: PUSH
8705: FOR_IN
8706: IFFALSE 8741
// if GetBase ( i ) <> base then
8708: LD_VAR 0 6
8712: PPUSH
8713: CALL_OW 274
8717: PUSH
8718: LD_VAR 0 1
8722: NONEQUAL
8723: IFFALSE 8739
// ComLinkToBase ( base , i ) ;
8725: LD_VAR 0 1
8729: PPUSH
8730: LD_VAR 0 6
8734: PPUSH
8735: CALL_OW 169
8739: GO 8705
8741: POP
8742: POP
// end ; result := tmp ;
8743: LD_ADDR_VAR 0 4
8747: PUSH
8748: LD_VAR 0 5
8752: ST_TO_ADDR
// end ;
8753: LD_VAR 0 4
8757: RET
// export function ComComplete ( units , b ) ; var i ; begin
8758: LD_INT 0
8760: PPUSH
8761: PPUSH
// if not units then
8762: LD_VAR 0 1
8766: NOT
8767: IFFALSE 8771
// exit ;
8769: GO 8861
// for i in units do
8771: LD_ADDR_VAR 0 4
8775: PUSH
8776: LD_VAR 0 1
8780: PUSH
8781: FOR_IN
8782: IFFALSE 8859
// if BuildingStatus ( b ) = bs_build then
8784: LD_VAR 0 2
8788: PPUSH
8789: CALL_OW 461
8793: PUSH
8794: LD_INT 1
8796: EQUAL
8797: IFFALSE 8857
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8799: LD_VAR 0 4
8803: PPUSH
8804: LD_STRING h
8806: PUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 250
8816: PUSH
8817: LD_VAR 0 2
8821: PPUSH
8822: CALL_OW 251
8826: PUSH
8827: LD_VAR 0 2
8831: PUSH
8832: LD_INT 0
8834: PUSH
8835: LD_INT 0
8837: PUSH
8838: LD_INT 0
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: PUSH
8850: EMPTY
8851: LIST
8852: PPUSH
8853: CALL_OW 446
8857: GO 8781
8859: POP
8860: POP
// end ;
8861: LD_VAR 0 3
8865: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8866: LD_INT 0
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8874: LD_VAR 0 1
8878: NOT
8879: PUSH
8880: LD_VAR 0 1
8884: PPUSH
8885: CALL_OW 263
8889: PUSH
8890: LD_INT 2
8892: NONEQUAL
8893: OR
8894: IFFALSE 8898
// exit ;
8896: GO 9214
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8898: LD_ADDR_VAR 0 6
8902: PUSH
8903: LD_INT 22
8905: PUSH
8906: LD_VAR 0 1
8910: PPUSH
8911: CALL_OW 255
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 2
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 36
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 34
8935: PUSH
8936: LD_INT 31
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: ST_TO_ADDR
// if not tmp then
8957: LD_VAR 0 6
8961: NOT
8962: IFFALSE 8966
// exit ;
8964: GO 9214
// result := [ ] ;
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: EMPTY
8972: ST_TO_ADDR
// for i in tmp do
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_VAR 0 6
8982: PUSH
8983: FOR_IN
8984: IFFALSE 9055
// begin t := UnitsInside ( i ) ;
8986: LD_ADDR_VAR 0 4
8990: PUSH
8991: LD_VAR 0 3
8995: PPUSH
8996: CALL_OW 313
9000: ST_TO_ADDR
// if t then
9001: LD_VAR 0 4
9005: IFFALSE 9053
// for j in t do
9007: LD_ADDR_VAR 0 7
9011: PUSH
9012: LD_VAR 0 4
9016: PUSH
9017: FOR_IN
9018: IFFALSE 9051
// result := Replace ( result , result + 1 , j ) ;
9020: LD_ADDR_VAR 0 2
9024: PUSH
9025: LD_VAR 0 2
9029: PPUSH
9030: LD_VAR 0 2
9034: PUSH
9035: LD_INT 1
9037: PLUS
9038: PPUSH
9039: LD_VAR 0 7
9043: PPUSH
9044: CALL_OW 1
9048: ST_TO_ADDR
9049: GO 9017
9051: POP
9052: POP
// end ;
9053: GO 8983
9055: POP
9056: POP
// if not result then
9057: LD_VAR 0 2
9061: NOT
9062: IFFALSE 9066
// exit ;
9064: GO 9214
// mech := result [ 1 ] ;
9066: LD_ADDR_VAR 0 5
9070: PUSH
9071: LD_VAR 0 2
9075: PUSH
9076: LD_INT 1
9078: ARRAY
9079: ST_TO_ADDR
// if result > 1 then
9080: LD_VAR 0 2
9084: PUSH
9085: LD_INT 1
9087: GREATER
9088: IFFALSE 9200
// begin for i = 2 to result do
9090: LD_ADDR_VAR 0 3
9094: PUSH
9095: DOUBLE
9096: LD_INT 2
9098: DEC
9099: ST_TO_ADDR
9100: LD_VAR 0 2
9104: PUSH
9105: FOR_TO
9106: IFFALSE 9198
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9108: LD_ADDR_VAR 0 4
9112: PUSH
9113: LD_VAR 0 2
9117: PUSH
9118: LD_VAR 0 3
9122: ARRAY
9123: PPUSH
9124: LD_INT 3
9126: PPUSH
9127: CALL_OW 259
9131: PUSH
9132: LD_VAR 0 2
9136: PUSH
9137: LD_VAR 0 3
9141: ARRAY
9142: PPUSH
9143: CALL_OW 432
9147: MINUS
9148: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9149: LD_VAR 0 4
9153: PUSH
9154: LD_VAR 0 5
9158: PPUSH
9159: LD_INT 3
9161: PPUSH
9162: CALL_OW 259
9166: PUSH
9167: LD_VAR 0 5
9171: PPUSH
9172: CALL_OW 432
9176: MINUS
9177: GREATEREQUAL
9178: IFFALSE 9196
// mech := result [ i ] ;
9180: LD_ADDR_VAR 0 5
9184: PUSH
9185: LD_VAR 0 2
9189: PUSH
9190: LD_VAR 0 3
9194: ARRAY
9195: ST_TO_ADDR
// end ;
9196: GO 9105
9198: POP
9199: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9200: LD_VAR 0 1
9204: PPUSH
9205: LD_VAR 0 5
9209: PPUSH
9210: CALL_OW 135
// end ;
9214: LD_VAR 0 2
9218: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9219: LD_INT 0
9221: PPUSH
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
9229: PPUSH
9230: PPUSH
9231: PPUSH
9232: PPUSH
9233: PPUSH
// result := [ ] ;
9234: LD_ADDR_VAR 0 7
9238: PUSH
9239: EMPTY
9240: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9241: LD_VAR 0 1
9245: PPUSH
9246: CALL_OW 266
9250: PUSH
9251: LD_INT 0
9253: PUSH
9254: LD_INT 1
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: IN
9261: NOT
9262: IFFALSE 9266
// exit ;
9264: GO 10900
// if name then
9266: LD_VAR 0 3
9270: IFFALSE 9286
// SetBName ( base_dep , name ) ;
9272: LD_VAR 0 1
9276: PPUSH
9277: LD_VAR 0 3
9281: PPUSH
9282: CALL_OW 500
// base := GetBase ( base_dep ) ;
9286: LD_ADDR_VAR 0 15
9290: PUSH
9291: LD_VAR 0 1
9295: PPUSH
9296: CALL_OW 274
9300: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9301: LD_ADDR_VAR 0 16
9305: PUSH
9306: LD_VAR 0 1
9310: PPUSH
9311: CALL_OW 255
9315: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9316: LD_ADDR_VAR 0 17
9320: PUSH
9321: LD_VAR 0 1
9325: PPUSH
9326: CALL_OW 248
9330: ST_TO_ADDR
// if sources then
9331: LD_VAR 0 5
9335: IFFALSE 9382
// for i = 1 to 3 do
9337: LD_ADDR_VAR 0 8
9341: PUSH
9342: DOUBLE
9343: LD_INT 1
9345: DEC
9346: ST_TO_ADDR
9347: LD_INT 3
9349: PUSH
9350: FOR_TO
9351: IFFALSE 9380
// AddResourceType ( base , i , sources [ i ] ) ;
9353: LD_VAR 0 15
9357: PPUSH
9358: LD_VAR 0 8
9362: PPUSH
9363: LD_VAR 0 5
9367: PUSH
9368: LD_VAR 0 8
9372: ARRAY
9373: PPUSH
9374: CALL_OW 276
9378: GO 9350
9380: POP
9381: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9382: LD_ADDR_VAR 0 18
9386: PUSH
9387: LD_VAR 0 15
9391: PPUSH
9392: LD_VAR 0 2
9396: PPUSH
9397: LD_INT 1
9399: PPUSH
9400: CALL 8643 0 3
9404: ST_TO_ADDR
// InitHc ;
9405: CALL_OW 19
// InitUc ;
9409: CALL_OW 18
// uc_side := side ;
9413: LD_ADDR_OWVAR 20
9417: PUSH
9418: LD_VAR 0 16
9422: ST_TO_ADDR
// uc_nation := nation ;
9423: LD_ADDR_OWVAR 21
9427: PUSH
9428: LD_VAR 0 17
9432: ST_TO_ADDR
// if buildings then
9433: LD_VAR 0 18
9437: IFFALSE 10759
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9439: LD_ADDR_VAR 0 19
9443: PUSH
9444: LD_VAR 0 18
9448: PPUSH
9449: LD_INT 2
9451: PUSH
9452: LD_INT 30
9454: PUSH
9455: LD_INT 29
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 30
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 72
9481: ST_TO_ADDR
// if tmp then
9482: LD_VAR 0 19
9486: IFFALSE 9534
// for i in tmp do
9488: LD_ADDR_VAR 0 8
9492: PUSH
9493: LD_VAR 0 19
9497: PUSH
9498: FOR_IN
9499: IFFALSE 9532
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9501: LD_VAR 0 8
9505: PPUSH
9506: CALL_OW 250
9510: PPUSH
9511: LD_VAR 0 8
9515: PPUSH
9516: CALL_OW 251
9520: PPUSH
9521: LD_VAR 0 16
9525: PPUSH
9526: CALL_OW 441
9530: GO 9498
9532: POP
9533: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9534: LD_VAR 0 18
9538: PPUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 30
9544: PUSH
9545: LD_INT 32
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 30
9554: PUSH
9555: LD_INT 33
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: PPUSH
9567: CALL_OW 72
9571: IFFALSE 9659
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9573: LD_ADDR_VAR 0 8
9577: PUSH
9578: LD_VAR 0 18
9582: PPUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: LD_INT 32
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 30
9598: PUSH
9599: LD_INT 33
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 72
9615: PUSH
9616: FOR_IN
9617: IFFALSE 9657
// begin if not GetBWeapon ( i ) then
9619: LD_VAR 0 8
9623: PPUSH
9624: CALL_OW 269
9628: NOT
9629: IFFALSE 9655
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9631: LD_VAR 0 8
9635: PPUSH
9636: LD_VAR 0 8
9640: PPUSH
9641: LD_VAR 0 2
9645: PPUSH
9646: CALL 10905 0 2
9650: PPUSH
9651: CALL_OW 431
// end ;
9655: GO 9616
9657: POP
9658: POP
// end ; for i = 1 to personel do
9659: LD_ADDR_VAR 0 8
9663: PUSH
9664: DOUBLE
9665: LD_INT 1
9667: DEC
9668: ST_TO_ADDR
9669: LD_VAR 0 6
9673: PUSH
9674: FOR_TO
9675: IFFALSE 10739
// begin if i > 4 then
9677: LD_VAR 0 8
9681: PUSH
9682: LD_INT 4
9684: GREATER
9685: IFFALSE 9689
// break ;
9687: GO 10739
// case i of 1 :
9689: LD_VAR 0 8
9693: PUSH
9694: LD_INT 1
9696: DOUBLE
9697: EQUAL
9698: IFTRUE 9702
9700: GO 9782
9702: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9703: LD_ADDR_VAR 0 12
9707: PUSH
9708: LD_VAR 0 18
9712: PPUSH
9713: LD_INT 22
9715: PUSH
9716: LD_VAR 0 16
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: LD_INT 58
9727: PUSH
9728: EMPTY
9729: LIST
9730: PUSH
9731: LD_INT 2
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 32
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 30
9746: PUSH
9747: LD_INT 4
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 30
9756: PUSH
9757: LD_INT 5
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 72
9779: ST_TO_ADDR
9780: GO 10004
9782: LD_INT 2
9784: DOUBLE
9785: EQUAL
9786: IFTRUE 9790
9788: GO 9852
9790: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9791: LD_ADDR_VAR 0 12
9795: PUSH
9796: LD_VAR 0 18
9800: PPUSH
9801: LD_INT 22
9803: PUSH
9804: LD_VAR 0 16
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 2
9815: PUSH
9816: LD_INT 30
9818: PUSH
9819: LD_INT 0
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 30
9828: PUSH
9829: LD_INT 1
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PPUSH
9845: CALL_OW 72
9849: ST_TO_ADDR
9850: GO 10004
9852: LD_INT 3
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 9922
9860: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9861: LD_ADDR_VAR 0 12
9865: PUSH
9866: LD_VAR 0 18
9870: PPUSH
9871: LD_INT 22
9873: PUSH
9874: LD_VAR 0 16
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: LD_INT 30
9888: PUSH
9889: LD_INT 2
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 30
9898: PUSH
9899: LD_INT 3
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: CALL_OW 72
9919: ST_TO_ADDR
9920: GO 10004
9922: LD_INT 4
9924: DOUBLE
9925: EQUAL
9926: IFTRUE 9930
9928: GO 10003
9930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9931: LD_ADDR_VAR 0 12
9935: PUSH
9936: LD_VAR 0 18
9940: PPUSH
9941: LD_INT 22
9943: PUSH
9944: LD_VAR 0 16
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 2
9955: PUSH
9956: LD_INT 30
9958: PUSH
9959: LD_INT 6
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 30
9968: PUSH
9969: LD_INT 7
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 30
9978: PUSH
9979: LD_INT 8
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PPUSH
9996: CALL_OW 72
10000: ST_TO_ADDR
10001: GO 10004
10003: POP
// if i = 1 then
10004: LD_VAR 0 8
10008: PUSH
10009: LD_INT 1
10011: EQUAL
10012: IFFALSE 10123
// begin tmp := [ ] ;
10014: LD_ADDR_VAR 0 19
10018: PUSH
10019: EMPTY
10020: ST_TO_ADDR
// for j in f do
10021: LD_ADDR_VAR 0 9
10025: PUSH
10026: LD_VAR 0 12
10030: PUSH
10031: FOR_IN
10032: IFFALSE 10105
// if GetBType ( j ) = b_bunker then
10034: LD_VAR 0 9
10038: PPUSH
10039: CALL_OW 266
10043: PUSH
10044: LD_INT 32
10046: EQUAL
10047: IFFALSE 10074
// tmp := Insert ( tmp , 1 , j ) else
10049: LD_ADDR_VAR 0 19
10053: PUSH
10054: LD_VAR 0 19
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: LD_VAR 0 9
10066: PPUSH
10067: CALL_OW 2
10071: ST_TO_ADDR
10072: GO 10103
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10074: LD_ADDR_VAR 0 19
10078: PUSH
10079: LD_VAR 0 19
10083: PPUSH
10084: LD_VAR 0 19
10088: PUSH
10089: LD_INT 1
10091: PLUS
10092: PPUSH
10093: LD_VAR 0 9
10097: PPUSH
10098: CALL_OW 2
10102: ST_TO_ADDR
10103: GO 10031
10105: POP
10106: POP
// if tmp then
10107: LD_VAR 0 19
10111: IFFALSE 10123
// f := tmp ;
10113: LD_ADDR_VAR 0 12
10117: PUSH
10118: LD_VAR 0 19
10122: ST_TO_ADDR
// end ; x := personel [ i ] ;
10123: LD_ADDR_VAR 0 13
10127: PUSH
10128: LD_VAR 0 6
10132: PUSH
10133: LD_VAR 0 8
10137: ARRAY
10138: ST_TO_ADDR
// if x = - 1 then
10139: LD_VAR 0 13
10143: PUSH
10144: LD_INT 1
10146: NEG
10147: EQUAL
10148: IFFALSE 10357
// begin for j in f do
10150: LD_ADDR_VAR 0 9
10154: PUSH
10155: LD_VAR 0 12
10159: PUSH
10160: FOR_IN
10161: IFFALSE 10353
// repeat InitHc ;
10163: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10167: LD_VAR 0 9
10171: PPUSH
10172: CALL_OW 266
10176: PUSH
10177: LD_INT 5
10179: EQUAL
10180: IFFALSE 10250
// begin if UnitsInside ( j ) < 3 then
10182: LD_VAR 0 9
10186: PPUSH
10187: CALL_OW 313
10191: PUSH
10192: LD_INT 3
10194: LESS
10195: IFFALSE 10231
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10197: LD_INT 0
10199: PPUSH
10200: LD_INT 5
10202: PUSH
10203: LD_INT 8
10205: PUSH
10206: LD_INT 9
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: PUSH
10214: LD_VAR 0 17
10218: ARRAY
10219: PPUSH
10220: LD_VAR 0 4
10224: PPUSH
10225: CALL_OW 380
10229: GO 10248
// PrepareHuman ( false , i , skill ) ;
10231: LD_INT 0
10233: PPUSH
10234: LD_VAR 0 8
10238: PPUSH
10239: LD_VAR 0 4
10243: PPUSH
10244: CALL_OW 380
// end else
10248: GO 10267
// PrepareHuman ( false , i , skill ) ;
10250: LD_INT 0
10252: PPUSH
10253: LD_VAR 0 8
10257: PPUSH
10258: LD_VAR 0 4
10262: PPUSH
10263: CALL_OW 380
// un := CreateHuman ;
10267: LD_ADDR_VAR 0 14
10271: PUSH
10272: CALL_OW 44
10276: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10277: LD_ADDR_VAR 0 7
10281: PUSH
10282: LD_VAR 0 7
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: LD_VAR 0 14
10294: PPUSH
10295: CALL_OW 2
10299: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10300: LD_VAR 0 14
10304: PPUSH
10305: LD_VAR 0 9
10309: PPUSH
10310: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10314: LD_VAR 0 9
10318: PPUSH
10319: CALL_OW 313
10323: PUSH
10324: LD_INT 6
10326: EQUAL
10327: PUSH
10328: LD_VAR 0 9
10332: PPUSH
10333: CALL_OW 266
10337: PUSH
10338: LD_INT 32
10340: PUSH
10341: LD_INT 31
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: IN
10348: OR
10349: IFFALSE 10163
10351: GO 10160
10353: POP
10354: POP
// end else
10355: GO 10737
// for j = 1 to x do
10357: LD_ADDR_VAR 0 9
10361: PUSH
10362: DOUBLE
10363: LD_INT 1
10365: DEC
10366: ST_TO_ADDR
10367: LD_VAR 0 13
10371: PUSH
10372: FOR_TO
10373: IFFALSE 10735
// begin InitHc ;
10375: CALL_OW 19
// if not f then
10379: LD_VAR 0 12
10383: NOT
10384: IFFALSE 10473
// begin PrepareHuman ( false , i , skill ) ;
10386: LD_INT 0
10388: PPUSH
10389: LD_VAR 0 8
10393: PPUSH
10394: LD_VAR 0 4
10398: PPUSH
10399: CALL_OW 380
// un := CreateHuman ;
10403: LD_ADDR_VAR 0 14
10407: PUSH
10408: CALL_OW 44
10412: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10413: LD_ADDR_VAR 0 7
10417: PUSH
10418: LD_VAR 0 7
10422: PPUSH
10423: LD_INT 1
10425: PPUSH
10426: LD_VAR 0 14
10430: PPUSH
10431: CALL_OW 2
10435: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10436: LD_VAR 0 14
10440: PPUSH
10441: LD_VAR 0 1
10445: PPUSH
10446: CALL_OW 250
10450: PPUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 251
10460: PPUSH
10461: LD_INT 10
10463: PPUSH
10464: LD_INT 0
10466: PPUSH
10467: CALL_OW 50
// continue ;
10471: GO 10372
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10473: LD_VAR 0 12
10477: PUSH
10478: LD_INT 1
10480: ARRAY
10481: PPUSH
10482: CALL_OW 313
10486: PUSH
10487: LD_VAR 0 12
10491: PUSH
10492: LD_INT 1
10494: ARRAY
10495: PPUSH
10496: CALL_OW 266
10500: PUSH
10501: LD_INT 32
10503: PUSH
10504: LD_INT 31
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: IN
10511: AND
10512: PUSH
10513: LD_VAR 0 12
10517: PUSH
10518: LD_INT 1
10520: ARRAY
10521: PPUSH
10522: CALL_OW 313
10526: PUSH
10527: LD_INT 6
10529: EQUAL
10530: OR
10531: IFFALSE 10551
// f := Delete ( f , 1 ) ;
10533: LD_ADDR_VAR 0 12
10537: PUSH
10538: LD_VAR 0 12
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 3
10550: ST_TO_ADDR
// if not f then
10551: LD_VAR 0 12
10555: NOT
10556: IFFALSE 10574
// begin x := x + 2 ;
10558: LD_ADDR_VAR 0 13
10562: PUSH
10563: LD_VAR 0 13
10567: PUSH
10568: LD_INT 2
10570: PLUS
10571: ST_TO_ADDR
// continue ;
10572: GO 10372
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10574: LD_VAR 0 12
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: CALL_OW 266
10587: PUSH
10588: LD_INT 5
10590: EQUAL
10591: IFFALSE 10665
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10593: LD_VAR 0 12
10597: PUSH
10598: LD_INT 1
10600: ARRAY
10601: PPUSH
10602: CALL_OW 313
10606: PUSH
10607: LD_INT 3
10609: LESS
10610: IFFALSE 10646
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10612: LD_INT 0
10614: PPUSH
10615: LD_INT 5
10617: PUSH
10618: LD_INT 8
10620: PUSH
10621: LD_INT 9
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: PUSH
10629: LD_VAR 0 17
10633: ARRAY
10634: PPUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: CALL_OW 380
10644: GO 10663
// PrepareHuman ( false , i , skill ) ;
10646: LD_INT 0
10648: PPUSH
10649: LD_VAR 0 8
10653: PPUSH
10654: LD_VAR 0 4
10658: PPUSH
10659: CALL_OW 380
// end else
10663: GO 10682
// PrepareHuman ( false , i , skill ) ;
10665: LD_INT 0
10667: PPUSH
10668: LD_VAR 0 8
10672: PPUSH
10673: LD_VAR 0 4
10677: PPUSH
10678: CALL_OW 380
// un := CreateHuman ;
10682: LD_ADDR_VAR 0 14
10686: PUSH
10687: CALL_OW 44
10691: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10692: LD_ADDR_VAR 0 7
10696: PUSH
10697: LD_VAR 0 7
10701: PPUSH
10702: LD_INT 1
10704: PPUSH
10705: LD_VAR 0 14
10709: PPUSH
10710: CALL_OW 2
10714: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10715: LD_VAR 0 14
10719: PPUSH
10720: LD_VAR 0 12
10724: PUSH
10725: LD_INT 1
10727: ARRAY
10728: PPUSH
10729: CALL_OW 52
// end ;
10733: GO 10372
10735: POP
10736: POP
// end ;
10737: GO 9674
10739: POP
10740: POP
// result := result ^ buildings ;
10741: LD_ADDR_VAR 0 7
10745: PUSH
10746: LD_VAR 0 7
10750: PUSH
10751: LD_VAR 0 18
10755: ADD
10756: ST_TO_ADDR
// end else
10757: GO 10900
// begin for i = 1 to personel do
10759: LD_ADDR_VAR 0 8
10763: PUSH
10764: DOUBLE
10765: LD_INT 1
10767: DEC
10768: ST_TO_ADDR
10769: LD_VAR 0 6
10773: PUSH
10774: FOR_TO
10775: IFFALSE 10898
// begin if i > 4 then
10777: LD_VAR 0 8
10781: PUSH
10782: LD_INT 4
10784: GREATER
10785: IFFALSE 10789
// break ;
10787: GO 10898
// x := personel [ i ] ;
10789: LD_ADDR_VAR 0 13
10793: PUSH
10794: LD_VAR 0 6
10798: PUSH
10799: LD_VAR 0 8
10803: ARRAY
10804: ST_TO_ADDR
// if x = - 1 then
10805: LD_VAR 0 13
10809: PUSH
10810: LD_INT 1
10812: NEG
10813: EQUAL
10814: IFFALSE 10818
// continue ;
10816: GO 10774
// PrepareHuman ( false , i , skill ) ;
10818: LD_INT 0
10820: PPUSH
10821: LD_VAR 0 8
10825: PPUSH
10826: LD_VAR 0 4
10830: PPUSH
10831: CALL_OW 380
// un := CreateHuman ;
10835: LD_ADDR_VAR 0 14
10839: PUSH
10840: CALL_OW 44
10844: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10845: LD_VAR 0 14
10849: PPUSH
10850: LD_VAR 0 1
10854: PPUSH
10855: CALL_OW 250
10859: PPUSH
10860: LD_VAR 0 1
10864: PPUSH
10865: CALL_OW 251
10869: PPUSH
10870: LD_INT 10
10872: PPUSH
10873: LD_INT 0
10875: PPUSH
10876: CALL_OW 50
// result := result ^ un ;
10880: LD_ADDR_VAR 0 7
10884: PUSH
10885: LD_VAR 0 7
10889: PUSH
10890: LD_VAR 0 14
10894: ADD
10895: ST_TO_ADDR
// end ;
10896: GO 10774
10898: POP
10899: POP
// end ; end ;
10900: LD_VAR 0 7
10904: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10905: LD_INT 0
10907: PPUSH
10908: PPUSH
10909: PPUSH
10910: PPUSH
10911: PPUSH
10912: PPUSH
10913: PPUSH
10914: PPUSH
10915: PPUSH
10916: PPUSH
10917: PPUSH
10918: PPUSH
10919: PPUSH
10920: PPUSH
10921: PPUSH
10922: PPUSH
// result := false ;
10923: LD_ADDR_VAR 0 3
10927: PUSH
10928: LD_INT 0
10930: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10931: LD_VAR 0 1
10935: NOT
10936: PUSH
10937: LD_VAR 0 1
10941: PPUSH
10942: CALL_OW 266
10946: PUSH
10947: LD_INT 32
10949: PUSH
10950: LD_INT 33
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: IN
10957: NOT
10958: OR
10959: IFFALSE 10963
// exit ;
10961: GO 12072
// nat := GetNation ( tower ) ;
10963: LD_ADDR_VAR 0 12
10967: PUSH
10968: LD_VAR 0 1
10972: PPUSH
10973: CALL_OW 248
10977: ST_TO_ADDR
// side := GetSide ( tower ) ;
10978: LD_ADDR_VAR 0 16
10982: PUSH
10983: LD_VAR 0 1
10987: PPUSH
10988: CALL_OW 255
10992: ST_TO_ADDR
// x := GetX ( tower ) ;
10993: LD_ADDR_VAR 0 10
10997: PUSH
10998: LD_VAR 0 1
11002: PPUSH
11003: CALL_OW 250
11007: ST_TO_ADDR
// y := GetY ( tower ) ;
11008: LD_ADDR_VAR 0 11
11012: PUSH
11013: LD_VAR 0 1
11017: PPUSH
11018: CALL_OW 251
11022: ST_TO_ADDR
// if not x or not y then
11023: LD_VAR 0 10
11027: NOT
11028: PUSH
11029: LD_VAR 0 11
11033: NOT
11034: OR
11035: IFFALSE 11039
// exit ;
11037: GO 12072
// weapon := 0 ;
11039: LD_ADDR_VAR 0 18
11043: PUSH
11044: LD_INT 0
11046: ST_TO_ADDR
// fac_list := [ ] ;
11047: LD_ADDR_VAR 0 17
11051: PUSH
11052: EMPTY
11053: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11054: LD_ADDR_VAR 0 6
11058: PUSH
11059: LD_VAR 0 1
11063: PPUSH
11064: CALL_OW 274
11068: PPUSH
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_INT 0
11076: PPUSH
11077: CALL 8643 0 3
11081: PPUSH
11082: LD_INT 30
11084: PUSH
11085: LD_INT 3
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PPUSH
11092: CALL_OW 72
11096: ST_TO_ADDR
// if not factories then
11097: LD_VAR 0 6
11101: NOT
11102: IFFALSE 11106
// exit ;
11104: GO 12072
// for i in factories do
11106: LD_ADDR_VAR 0 8
11110: PUSH
11111: LD_VAR 0 6
11115: PUSH
11116: FOR_IN
11117: IFFALSE 11142
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11119: LD_ADDR_VAR 0 17
11123: PUSH
11124: LD_VAR 0 17
11128: PUSH
11129: LD_VAR 0 8
11133: PPUSH
11134: CALL_OW 478
11138: UNION
11139: ST_TO_ADDR
11140: GO 11116
11142: POP
11143: POP
// if not fac_list then
11144: LD_VAR 0 17
11148: NOT
11149: IFFALSE 11153
// exit ;
11151: GO 12072
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11153: LD_ADDR_VAR 0 5
11157: PUSH
11158: LD_INT 4
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: LD_INT 9
11166: PUSH
11167: LD_INT 10
11169: PUSH
11170: LD_INT 6
11172: PUSH
11173: LD_INT 7
11175: PUSH
11176: LD_INT 11
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: PUSH
11188: LD_INT 27
11190: PUSH
11191: LD_INT 28
11193: PUSH
11194: LD_INT 26
11196: PUSH
11197: LD_INT 30
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 43
11208: PUSH
11209: LD_INT 44
11211: PUSH
11212: LD_INT 46
11214: PUSH
11215: LD_INT 45
11217: PUSH
11218: LD_INT 47
11220: PUSH
11221: LD_INT 49
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: LIST
11236: PUSH
11237: LD_VAR 0 12
11241: ARRAY
11242: ST_TO_ADDR
// list := list isect fac_list ;
11243: LD_ADDR_VAR 0 5
11247: PUSH
11248: LD_VAR 0 5
11252: PUSH
11253: LD_VAR 0 17
11257: ISECT
11258: ST_TO_ADDR
// if not list then
11259: LD_VAR 0 5
11263: NOT
11264: IFFALSE 11268
// exit ;
11266: GO 12072
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11268: LD_VAR 0 12
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: PUSH
11277: LD_INT 49
11279: PUSH
11280: LD_VAR 0 5
11284: IN
11285: AND
11286: PUSH
11287: LD_INT 31
11289: PPUSH
11290: LD_VAR 0 16
11294: PPUSH
11295: CALL_OW 321
11299: PUSH
11300: LD_INT 2
11302: EQUAL
11303: AND
11304: IFFALSE 11364
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11306: LD_INT 22
11308: PUSH
11309: LD_VAR 0 16
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 35
11320: PUSH
11321: LD_INT 49
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 91
11330: PUSH
11331: LD_VAR 0 1
11335: PUSH
11336: LD_INT 10
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: PPUSH
11349: CALL_OW 69
11353: NOT
11354: IFFALSE 11364
// weapon := ru_time_lapser ;
11356: LD_ADDR_VAR 0 18
11360: PUSH
11361: LD_INT 49
11363: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11364: LD_VAR 0 12
11368: PUSH
11369: LD_INT 1
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: IN
11379: PUSH
11380: LD_INT 11
11382: PUSH
11383: LD_VAR 0 5
11387: IN
11388: PUSH
11389: LD_INT 30
11391: PUSH
11392: LD_VAR 0 5
11396: IN
11397: OR
11398: AND
11399: PUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_VAR 0 16
11407: PPUSH
11408: CALL_OW 321
11412: PUSH
11413: LD_INT 2
11415: EQUAL
11416: AND
11417: IFFALSE 11582
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11419: LD_INT 22
11421: PUSH
11422: LD_VAR 0 16
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: LD_INT 2
11433: PUSH
11434: LD_INT 35
11436: PUSH
11437: LD_INT 11
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 35
11446: PUSH
11447: LD_INT 30
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 91
11461: PUSH
11462: LD_VAR 0 1
11466: PUSH
11467: LD_INT 18
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: PPUSH
11480: CALL_OW 69
11484: NOT
11485: PUSH
11486: LD_INT 22
11488: PUSH
11489: LD_VAR 0 16
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: LD_INT 30
11503: PUSH
11504: LD_INT 32
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 30
11513: PUSH
11514: LD_INT 33
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 91
11528: PUSH
11529: LD_VAR 0 1
11533: PUSH
11534: LD_INT 12
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: LIST
11546: PUSH
11547: EMPTY
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: PUSH
11555: LD_INT 2
11557: GREATER
11558: AND
11559: IFFALSE 11582
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11561: LD_ADDR_VAR 0 18
11565: PUSH
11566: LD_INT 11
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_VAR 0 12
11580: ARRAY
11581: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11582: LD_VAR 0 18
11586: NOT
11587: PUSH
11588: LD_INT 40
11590: PPUSH
11591: LD_VAR 0 16
11595: PPUSH
11596: CALL_OW 321
11600: PUSH
11601: LD_INT 2
11603: EQUAL
11604: AND
11605: PUSH
11606: LD_INT 7
11608: PUSH
11609: LD_VAR 0 5
11613: IN
11614: PUSH
11615: LD_INT 28
11617: PUSH
11618: LD_VAR 0 5
11622: IN
11623: OR
11624: PUSH
11625: LD_INT 45
11627: PUSH
11628: LD_VAR 0 5
11632: IN
11633: OR
11634: AND
11635: IFFALSE 11889
// begin hex := GetHexInfo ( x , y ) ;
11637: LD_ADDR_VAR 0 4
11641: PUSH
11642: LD_VAR 0 10
11646: PPUSH
11647: LD_VAR 0 11
11651: PPUSH
11652: CALL_OW 546
11656: ST_TO_ADDR
// if hex [ 1 ] then
11657: LD_VAR 0 4
11661: PUSH
11662: LD_INT 1
11664: ARRAY
11665: IFFALSE 11669
// exit ;
11667: GO 12072
// height := hex [ 2 ] ;
11669: LD_ADDR_VAR 0 15
11673: PUSH
11674: LD_VAR 0 4
11678: PUSH
11679: LD_INT 2
11681: ARRAY
11682: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11683: LD_ADDR_VAR 0 14
11687: PUSH
11688: LD_INT 0
11690: PUSH
11691: LD_INT 2
11693: PUSH
11694: LD_INT 3
11696: PUSH
11697: LD_INT 5
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: ST_TO_ADDR
// for i in tmp do
11706: LD_ADDR_VAR 0 8
11710: PUSH
11711: LD_VAR 0 14
11715: PUSH
11716: FOR_IN
11717: IFFALSE 11887
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11719: LD_ADDR_VAR 0 9
11723: PUSH
11724: LD_VAR 0 10
11728: PPUSH
11729: LD_VAR 0 8
11733: PPUSH
11734: LD_INT 5
11736: PPUSH
11737: CALL_OW 272
11741: PUSH
11742: LD_VAR 0 11
11746: PPUSH
11747: LD_VAR 0 8
11751: PPUSH
11752: LD_INT 5
11754: PPUSH
11755: CALL_OW 273
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11764: LD_VAR 0 9
11768: PUSH
11769: LD_INT 1
11771: ARRAY
11772: PPUSH
11773: LD_VAR 0 9
11777: PUSH
11778: LD_INT 2
11780: ARRAY
11781: PPUSH
11782: CALL_OW 488
11786: IFFALSE 11885
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11788: LD_ADDR_VAR 0 4
11792: PUSH
11793: LD_VAR 0 9
11797: PUSH
11798: LD_INT 1
11800: ARRAY
11801: PPUSH
11802: LD_VAR 0 9
11806: PUSH
11807: LD_INT 2
11809: ARRAY
11810: PPUSH
11811: CALL_OW 546
11815: ST_TO_ADDR
// if hex [ 1 ] then
11816: LD_VAR 0 4
11820: PUSH
11821: LD_INT 1
11823: ARRAY
11824: IFFALSE 11828
// continue ;
11826: GO 11716
// h := hex [ 2 ] ;
11828: LD_ADDR_VAR 0 13
11832: PUSH
11833: LD_VAR 0 4
11837: PUSH
11838: LD_INT 2
11840: ARRAY
11841: ST_TO_ADDR
// if h + 7 < height then
11842: LD_VAR 0 13
11846: PUSH
11847: LD_INT 7
11849: PLUS
11850: PUSH
11851: LD_VAR 0 15
11855: LESS
11856: IFFALSE 11885
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11858: LD_ADDR_VAR 0 18
11862: PUSH
11863: LD_INT 7
11865: PUSH
11866: LD_INT 28
11868: PUSH
11869: LD_INT 45
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: LIST
11876: PUSH
11877: LD_VAR 0 12
11881: ARRAY
11882: ST_TO_ADDR
// break ;
11883: GO 11887
// end ; end ; end ;
11885: GO 11716
11887: POP
11888: POP
// end ; if not weapon then
11889: LD_VAR 0 18
11893: NOT
11894: IFFALSE 11954
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11896: LD_ADDR_VAR 0 5
11900: PUSH
11901: LD_VAR 0 5
11905: PUSH
11906: LD_INT 11
11908: PUSH
11909: LD_INT 30
11911: PUSH
11912: LD_INT 49
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: DIFF
11920: ST_TO_ADDR
// if not list then
11921: LD_VAR 0 5
11925: NOT
11926: IFFALSE 11930
// exit ;
11928: GO 12072
// weapon := list [ rand ( 1 , list ) ] ;
11930: LD_ADDR_VAR 0 18
11934: PUSH
11935: LD_VAR 0 5
11939: PUSH
11940: LD_INT 1
11942: PPUSH
11943: LD_VAR 0 5
11947: PPUSH
11948: CALL_OW 12
11952: ARRAY
11953: ST_TO_ADDR
// end ; if weapon then
11954: LD_VAR 0 18
11958: IFFALSE 12072
// begin tmp := CostOfWeapon ( weapon ) ;
11960: LD_ADDR_VAR 0 14
11964: PUSH
11965: LD_VAR 0 18
11969: PPUSH
11970: CALL_OW 451
11974: ST_TO_ADDR
// j := GetBase ( tower ) ;
11975: LD_ADDR_VAR 0 9
11979: PUSH
11980: LD_VAR 0 1
11984: PPUSH
11985: CALL_OW 274
11989: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11990: LD_VAR 0 9
11994: PPUSH
11995: LD_INT 1
11997: PPUSH
11998: CALL_OW 275
12002: PUSH
12003: LD_VAR 0 14
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: GREATEREQUAL
12012: PUSH
12013: LD_VAR 0 9
12017: PPUSH
12018: LD_INT 2
12020: PPUSH
12021: CALL_OW 275
12025: PUSH
12026: LD_VAR 0 14
12030: PUSH
12031: LD_INT 2
12033: ARRAY
12034: GREATEREQUAL
12035: AND
12036: PUSH
12037: LD_VAR 0 9
12041: PPUSH
12042: LD_INT 3
12044: PPUSH
12045: CALL_OW 275
12049: PUSH
12050: LD_VAR 0 14
12054: PUSH
12055: LD_INT 3
12057: ARRAY
12058: GREATEREQUAL
12059: AND
12060: IFFALSE 12072
// result := weapon ;
12062: LD_ADDR_VAR 0 3
12066: PUSH
12067: LD_VAR 0 18
12071: ST_TO_ADDR
// end ; end ;
12072: LD_VAR 0 3
12076: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12077: LD_INT 0
12079: PPUSH
12080: PPUSH
// result := true ;
12081: LD_ADDR_VAR 0 3
12085: PUSH
12086: LD_INT 1
12088: ST_TO_ADDR
// if array1 = array2 then
12089: LD_VAR 0 1
12093: PUSH
12094: LD_VAR 0 2
12098: EQUAL
12099: IFFALSE 12159
// begin for i = 1 to array1 do
12101: LD_ADDR_VAR 0 4
12105: PUSH
12106: DOUBLE
12107: LD_INT 1
12109: DEC
12110: ST_TO_ADDR
12111: LD_VAR 0 1
12115: PUSH
12116: FOR_TO
12117: IFFALSE 12155
// if array1 [ i ] <> array2 [ i ] then
12119: LD_VAR 0 1
12123: PUSH
12124: LD_VAR 0 4
12128: ARRAY
12129: PUSH
12130: LD_VAR 0 2
12134: PUSH
12135: LD_VAR 0 4
12139: ARRAY
12140: NONEQUAL
12141: IFFALSE 12153
// begin result := false ;
12143: LD_ADDR_VAR 0 3
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// break ;
12151: GO 12155
// end ;
12153: GO 12116
12155: POP
12156: POP
// end else
12157: GO 12167
// result := false ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: LD_INT 0
12166: ST_TO_ADDR
// end ;
12167: LD_VAR 0 3
12171: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// if not array1 or not array2 then
12176: LD_VAR 0 1
12180: NOT
12181: PUSH
12182: LD_VAR 0 2
12186: NOT
12187: OR
12188: IFFALSE 12192
// exit ;
12190: GO 12256
// result := true ;
12192: LD_ADDR_VAR 0 3
12196: PUSH
12197: LD_INT 1
12199: ST_TO_ADDR
// for i = 1 to array1 do
12200: LD_ADDR_VAR 0 4
12204: PUSH
12205: DOUBLE
12206: LD_INT 1
12208: DEC
12209: ST_TO_ADDR
12210: LD_VAR 0 1
12214: PUSH
12215: FOR_TO
12216: IFFALSE 12254
// if array1 [ i ] <> array2 [ i ] then
12218: LD_VAR 0 1
12222: PUSH
12223: LD_VAR 0 4
12227: ARRAY
12228: PUSH
12229: LD_VAR 0 2
12233: PUSH
12234: LD_VAR 0 4
12238: ARRAY
12239: NONEQUAL
12240: IFFALSE 12252
// begin result := false ;
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_INT 0
12249: ST_TO_ADDR
// break ;
12250: GO 12254
// end ;
12252: GO 12215
12254: POP
12255: POP
// end ;
12256: LD_VAR 0 3
12260: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12261: LD_INT 0
12263: PPUSH
12264: PPUSH
12265: PPUSH
// pom := GetBase ( fac ) ;
12266: LD_ADDR_VAR 0 5
12270: PUSH
12271: LD_VAR 0 1
12275: PPUSH
12276: CALL_OW 274
12280: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12281: LD_ADDR_VAR 0 4
12285: PUSH
12286: LD_VAR 0 2
12290: PUSH
12291: LD_INT 1
12293: ARRAY
12294: PPUSH
12295: LD_VAR 0 2
12299: PUSH
12300: LD_INT 2
12302: ARRAY
12303: PPUSH
12304: LD_VAR 0 2
12308: PUSH
12309: LD_INT 3
12311: ARRAY
12312: PPUSH
12313: LD_VAR 0 2
12317: PUSH
12318: LD_INT 4
12320: ARRAY
12321: PPUSH
12322: CALL_OW 449
12326: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12327: LD_ADDR_VAR 0 3
12331: PUSH
12332: LD_VAR 0 5
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 275
12344: PUSH
12345: LD_VAR 0 4
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: GREATEREQUAL
12354: PUSH
12355: LD_VAR 0 5
12359: PPUSH
12360: LD_INT 2
12362: PPUSH
12363: CALL_OW 275
12367: PUSH
12368: LD_VAR 0 4
12372: PUSH
12373: LD_INT 2
12375: ARRAY
12376: GREATEREQUAL
12377: AND
12378: PUSH
12379: LD_VAR 0 5
12383: PPUSH
12384: LD_INT 3
12386: PPUSH
12387: CALL_OW 275
12391: PUSH
12392: LD_VAR 0 4
12396: PUSH
12397: LD_INT 3
12399: ARRAY
12400: GREATEREQUAL
12401: AND
12402: ST_TO_ADDR
// end ;
12403: LD_VAR 0 3
12407: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12408: LD_INT 0
12410: PPUSH
12411: PPUSH
12412: PPUSH
12413: PPUSH
// pom := GetBase ( building ) ;
12414: LD_ADDR_VAR 0 3
12418: PUSH
12419: LD_VAR 0 1
12423: PPUSH
12424: CALL_OW 274
12428: ST_TO_ADDR
// if not pom then
12429: LD_VAR 0 3
12433: NOT
12434: IFFALSE 12438
// exit ;
12436: GO 12608
// btype := GetBType ( building ) ;
12438: LD_ADDR_VAR 0 5
12442: PUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 266
12452: ST_TO_ADDR
// if btype = b_armoury then
12453: LD_VAR 0 5
12457: PUSH
12458: LD_INT 4
12460: EQUAL
12461: IFFALSE 12471
// btype := b_barracks ;
12463: LD_ADDR_VAR 0 5
12467: PUSH
12468: LD_INT 5
12470: ST_TO_ADDR
// if btype = b_depot then
12471: LD_VAR 0 5
12475: PUSH
12476: LD_INT 0
12478: EQUAL
12479: IFFALSE 12489
// btype := b_warehouse ;
12481: LD_ADDR_VAR 0 5
12485: PUSH
12486: LD_INT 1
12488: ST_TO_ADDR
// if btype = b_workshop then
12489: LD_VAR 0 5
12493: PUSH
12494: LD_INT 2
12496: EQUAL
12497: IFFALSE 12507
// btype := b_factory ;
12499: LD_ADDR_VAR 0 5
12503: PUSH
12504: LD_INT 3
12506: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12507: LD_ADDR_VAR 0 4
12511: PUSH
12512: LD_VAR 0 5
12516: PPUSH
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL_OW 248
12526: PPUSH
12527: CALL_OW 450
12531: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12532: LD_ADDR_VAR 0 2
12536: PUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 275
12549: PUSH
12550: LD_VAR 0 4
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: GREATEREQUAL
12559: PUSH
12560: LD_VAR 0 3
12564: PPUSH
12565: LD_INT 2
12567: PPUSH
12568: CALL_OW 275
12572: PUSH
12573: LD_VAR 0 4
12577: PUSH
12578: LD_INT 2
12580: ARRAY
12581: GREATEREQUAL
12582: AND
12583: PUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: LD_INT 3
12591: PPUSH
12592: CALL_OW 275
12596: PUSH
12597: LD_VAR 0 4
12601: PUSH
12602: LD_INT 3
12604: ARRAY
12605: GREATEREQUAL
12606: AND
12607: ST_TO_ADDR
// end ;
12608: LD_VAR 0 2
12612: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12613: LD_INT 0
12615: PPUSH
12616: PPUSH
12617: PPUSH
// pom := GetBase ( building ) ;
12618: LD_ADDR_VAR 0 4
12622: PUSH
12623: LD_VAR 0 1
12627: PPUSH
12628: CALL_OW 274
12632: ST_TO_ADDR
// if not pom then
12633: LD_VAR 0 4
12637: NOT
12638: IFFALSE 12642
// exit ;
12640: GO 12743
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12642: LD_ADDR_VAR 0 5
12646: PUSH
12647: LD_VAR 0 2
12651: PPUSH
12652: LD_VAR 0 1
12656: PPUSH
12657: CALL_OW 248
12661: PPUSH
12662: CALL_OW 450
12666: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12667: LD_ADDR_VAR 0 3
12671: PUSH
12672: LD_VAR 0 4
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 275
12684: PUSH
12685: LD_VAR 0 5
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: GREATEREQUAL
12694: PUSH
12695: LD_VAR 0 4
12699: PPUSH
12700: LD_INT 2
12702: PPUSH
12703: CALL_OW 275
12707: PUSH
12708: LD_VAR 0 5
12712: PUSH
12713: LD_INT 2
12715: ARRAY
12716: GREATEREQUAL
12717: AND
12718: PUSH
12719: LD_VAR 0 4
12723: PPUSH
12724: LD_INT 3
12726: PPUSH
12727: CALL_OW 275
12731: PUSH
12732: LD_VAR 0 5
12736: PUSH
12737: LD_INT 3
12739: ARRAY
12740: GREATEREQUAL
12741: AND
12742: ST_TO_ADDR
// end ;
12743: LD_VAR 0 3
12747: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12748: LD_INT 0
12750: PPUSH
12751: PPUSH
12752: PPUSH
12753: PPUSH
12754: PPUSH
12755: PPUSH
12756: PPUSH
12757: PPUSH
12758: PPUSH
12759: PPUSH
12760: PPUSH
// result := false ;
12761: LD_ADDR_VAR 0 8
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12769: LD_VAR 0 5
12773: NOT
12774: PUSH
12775: LD_VAR 0 1
12779: NOT
12780: OR
12781: PUSH
12782: LD_VAR 0 2
12786: NOT
12787: OR
12788: PUSH
12789: LD_VAR 0 3
12793: NOT
12794: OR
12795: IFFALSE 12799
// exit ;
12797: GO 13613
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12799: LD_ADDR_VAR 0 14
12803: PUSH
12804: LD_VAR 0 1
12808: PPUSH
12809: LD_VAR 0 2
12813: PPUSH
12814: LD_VAR 0 3
12818: PPUSH
12819: LD_VAR 0 4
12823: PPUSH
12824: LD_VAR 0 5
12828: PUSH
12829: LD_INT 1
12831: ARRAY
12832: PPUSH
12833: CALL_OW 248
12837: PPUSH
12838: LD_INT 0
12840: PPUSH
12841: CALL 14866 0 6
12845: ST_TO_ADDR
// if not hexes then
12846: LD_VAR 0 14
12850: NOT
12851: IFFALSE 12855
// exit ;
12853: GO 13613
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12855: LD_ADDR_VAR 0 17
12859: PUSH
12860: LD_VAR 0 5
12864: PPUSH
12865: LD_INT 22
12867: PUSH
12868: LD_VAR 0 13
12872: PPUSH
12873: CALL_OW 255
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: LD_INT 30
12887: PUSH
12888: LD_INT 0
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 30
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 72
12918: ST_TO_ADDR
// for i = 1 to hexes do
12919: LD_ADDR_VAR 0 9
12923: PUSH
12924: DOUBLE
12925: LD_INT 1
12927: DEC
12928: ST_TO_ADDR
12929: LD_VAR 0 14
12933: PUSH
12934: FOR_TO
12935: IFFALSE 13611
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12937: LD_ADDR_VAR 0 13
12941: PUSH
12942: LD_VAR 0 14
12946: PUSH
12947: LD_VAR 0 9
12951: ARRAY
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: PPUSH
12957: LD_VAR 0 14
12961: PUSH
12962: LD_VAR 0 9
12966: ARRAY
12967: PUSH
12968: LD_INT 2
12970: ARRAY
12971: PPUSH
12972: CALL_OW 428
12976: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12977: LD_VAR 0 14
12981: PUSH
12982: LD_VAR 0 9
12986: ARRAY
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PPUSH
12992: LD_VAR 0 14
12996: PUSH
12997: LD_VAR 0 9
13001: ARRAY
13002: PUSH
13003: LD_INT 2
13005: ARRAY
13006: PPUSH
13007: CALL_OW 351
13011: PUSH
13012: LD_VAR 0 14
13016: PUSH
13017: LD_VAR 0 9
13021: ARRAY
13022: PUSH
13023: LD_INT 1
13025: ARRAY
13026: PPUSH
13027: LD_VAR 0 14
13031: PUSH
13032: LD_VAR 0 9
13036: ARRAY
13037: PUSH
13038: LD_INT 2
13040: ARRAY
13041: PPUSH
13042: CALL_OW 488
13046: NOT
13047: OR
13048: PUSH
13049: LD_VAR 0 13
13053: PPUSH
13054: CALL_OW 247
13058: PUSH
13059: LD_INT 3
13061: EQUAL
13062: OR
13063: IFFALSE 13069
// exit ;
13065: POP
13066: POP
13067: GO 13613
// if not tmp then
13069: LD_VAR 0 13
13073: NOT
13074: IFFALSE 13078
// continue ;
13076: GO 12934
// result := true ;
13078: LD_ADDR_VAR 0 8
13082: PUSH
13083: LD_INT 1
13085: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13086: LD_VAR 0 6
13090: PUSH
13091: LD_VAR 0 13
13095: PPUSH
13096: CALL_OW 247
13100: PUSH
13101: LD_INT 2
13103: EQUAL
13104: AND
13105: PUSH
13106: LD_VAR 0 13
13110: PPUSH
13111: CALL_OW 263
13115: PUSH
13116: LD_INT 1
13118: EQUAL
13119: AND
13120: IFFALSE 13284
// begin if IsDrivenBy ( tmp ) then
13122: LD_VAR 0 13
13126: PPUSH
13127: CALL_OW 311
13131: IFFALSE 13135
// continue ;
13133: GO 12934
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13135: LD_VAR 0 6
13139: PPUSH
13140: LD_INT 3
13142: PUSH
13143: LD_INT 60
13145: PUSH
13146: EMPTY
13147: LIST
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 3
13155: PUSH
13156: LD_INT 55
13158: PUSH
13159: EMPTY
13160: LIST
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PPUSH
13170: CALL_OW 72
13174: IFFALSE 13282
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13176: LD_ADDR_VAR 0 18
13180: PUSH
13181: LD_VAR 0 6
13185: PPUSH
13186: LD_INT 3
13188: PUSH
13189: LD_INT 60
13191: PUSH
13192: EMPTY
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: LD_INT 55
13204: PUSH
13205: EMPTY
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PPUSH
13216: CALL_OW 72
13220: PUSH
13221: LD_INT 1
13223: ARRAY
13224: ST_TO_ADDR
// if IsInUnit ( driver ) then
13225: LD_VAR 0 18
13229: PPUSH
13230: CALL_OW 310
13234: IFFALSE 13245
// ComExit ( driver ) ;
13236: LD_VAR 0 18
13240: PPUSH
13241: CALL 38667 0 1
// AddComEnterUnit ( driver , tmp ) ;
13245: LD_VAR 0 18
13249: PPUSH
13250: LD_VAR 0 13
13254: PPUSH
13255: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13259: LD_VAR 0 18
13263: PPUSH
13264: LD_VAR 0 7
13268: PPUSH
13269: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13273: LD_VAR 0 18
13277: PPUSH
13278: CALL_OW 181
// end ; continue ;
13282: GO 12934
// end ; if not cleaners or not tmp in cleaners then
13284: LD_VAR 0 6
13288: NOT
13289: PUSH
13290: LD_VAR 0 13
13294: PUSH
13295: LD_VAR 0 6
13299: IN
13300: NOT
13301: OR
13302: IFFALSE 13609
// begin if dep then
13304: LD_VAR 0 17
13308: IFFALSE 13444
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13310: LD_ADDR_VAR 0 16
13314: PUSH
13315: LD_VAR 0 17
13319: PUSH
13320: LD_INT 1
13322: ARRAY
13323: PPUSH
13324: CALL_OW 250
13328: PPUSH
13329: LD_VAR 0 17
13333: PUSH
13334: LD_INT 1
13336: ARRAY
13337: PPUSH
13338: CALL_OW 254
13342: PPUSH
13343: LD_INT 5
13345: PPUSH
13346: CALL_OW 272
13350: PUSH
13351: LD_VAR 0 17
13355: PUSH
13356: LD_INT 1
13358: ARRAY
13359: PPUSH
13360: CALL_OW 251
13364: PPUSH
13365: LD_VAR 0 17
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: PPUSH
13374: CALL_OW 254
13378: PPUSH
13379: LD_INT 5
13381: PPUSH
13382: CALL_OW 273
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13391: LD_VAR 0 16
13395: PUSH
13396: LD_INT 1
13398: ARRAY
13399: PPUSH
13400: LD_VAR 0 16
13404: PUSH
13405: LD_INT 2
13407: ARRAY
13408: PPUSH
13409: CALL_OW 488
13413: IFFALSE 13444
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13415: LD_VAR 0 13
13419: PPUSH
13420: LD_VAR 0 16
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: LD_VAR 0 16
13433: PUSH
13434: LD_INT 2
13436: ARRAY
13437: PPUSH
13438: CALL_OW 111
// continue ;
13442: GO 12934
// end ; end ; r := GetDir ( tmp ) ;
13444: LD_ADDR_VAR 0 15
13448: PUSH
13449: LD_VAR 0 13
13453: PPUSH
13454: CALL_OW 254
13458: ST_TO_ADDR
// if r = 5 then
13459: LD_VAR 0 15
13463: PUSH
13464: LD_INT 5
13466: EQUAL
13467: IFFALSE 13477
// r := 0 ;
13469: LD_ADDR_VAR 0 15
13473: PUSH
13474: LD_INT 0
13476: ST_TO_ADDR
// for j = r to 5 do
13477: LD_ADDR_VAR 0 10
13481: PUSH
13482: DOUBLE
13483: LD_VAR 0 15
13487: DEC
13488: ST_TO_ADDR
13489: LD_INT 5
13491: PUSH
13492: FOR_TO
13493: IFFALSE 13607
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13495: LD_ADDR_VAR 0 11
13499: PUSH
13500: LD_VAR 0 13
13504: PPUSH
13505: CALL_OW 250
13509: PPUSH
13510: LD_VAR 0 10
13514: PPUSH
13515: LD_INT 2
13517: PPUSH
13518: CALL_OW 272
13522: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13523: LD_ADDR_VAR 0 12
13527: PUSH
13528: LD_VAR 0 13
13532: PPUSH
13533: CALL_OW 251
13537: PPUSH
13538: LD_VAR 0 10
13542: PPUSH
13543: LD_INT 2
13545: PPUSH
13546: CALL_OW 273
13550: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13551: LD_VAR 0 11
13555: PPUSH
13556: LD_VAR 0 12
13560: PPUSH
13561: CALL_OW 488
13565: PUSH
13566: LD_VAR 0 11
13570: PPUSH
13571: LD_VAR 0 12
13575: PPUSH
13576: CALL_OW 428
13580: NOT
13581: AND
13582: IFFALSE 13605
// begin ComMoveXY ( tmp , _x , _y ) ;
13584: LD_VAR 0 13
13588: PPUSH
13589: LD_VAR 0 11
13593: PPUSH
13594: LD_VAR 0 12
13598: PPUSH
13599: CALL_OW 111
// break ;
13603: GO 13607
// end ; end ;
13605: GO 13492
13607: POP
13608: POP
// end ; end ;
13609: GO 12934
13611: POP
13612: POP
// end ;
13613: LD_VAR 0 8
13617: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13618: LD_INT 0
13620: PPUSH
// result := true ;
13621: LD_ADDR_VAR 0 3
13625: PUSH
13626: LD_INT 1
13628: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13629: LD_VAR 0 2
13633: PUSH
13634: LD_INT 24
13636: DOUBLE
13637: EQUAL
13638: IFTRUE 13648
13640: LD_INT 33
13642: DOUBLE
13643: EQUAL
13644: IFTRUE 13648
13646: GO 13673
13648: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13649: LD_ADDR_VAR 0 3
13653: PUSH
13654: LD_INT 32
13656: PPUSH
13657: LD_VAR 0 1
13661: PPUSH
13662: CALL_OW 321
13666: PUSH
13667: LD_INT 2
13669: EQUAL
13670: ST_TO_ADDR
13671: GO 13989
13673: LD_INT 20
13675: DOUBLE
13676: EQUAL
13677: IFTRUE 13681
13679: GO 13706
13681: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13682: LD_ADDR_VAR 0 3
13686: PUSH
13687: LD_INT 6
13689: PPUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 321
13699: PUSH
13700: LD_INT 2
13702: EQUAL
13703: ST_TO_ADDR
13704: GO 13989
13706: LD_INT 22
13708: DOUBLE
13709: EQUAL
13710: IFTRUE 13720
13712: LD_INT 36
13714: DOUBLE
13715: EQUAL
13716: IFTRUE 13720
13718: GO 13745
13720: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13721: LD_ADDR_VAR 0 3
13725: PUSH
13726: LD_INT 15
13728: PPUSH
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 321
13738: PUSH
13739: LD_INT 2
13741: EQUAL
13742: ST_TO_ADDR
13743: GO 13989
13745: LD_INT 30
13747: DOUBLE
13748: EQUAL
13749: IFTRUE 13753
13751: GO 13778
13753: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13754: LD_ADDR_VAR 0 3
13758: PUSH
13759: LD_INT 20
13761: PPUSH
13762: LD_VAR 0 1
13766: PPUSH
13767: CALL_OW 321
13771: PUSH
13772: LD_INT 2
13774: EQUAL
13775: ST_TO_ADDR
13776: GO 13989
13778: LD_INT 28
13780: DOUBLE
13781: EQUAL
13782: IFTRUE 13792
13784: LD_INT 21
13786: DOUBLE
13787: EQUAL
13788: IFTRUE 13792
13790: GO 13817
13792: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13793: LD_ADDR_VAR 0 3
13797: PUSH
13798: LD_INT 21
13800: PPUSH
13801: LD_VAR 0 1
13805: PPUSH
13806: CALL_OW 321
13810: PUSH
13811: LD_INT 2
13813: EQUAL
13814: ST_TO_ADDR
13815: GO 13989
13817: LD_INT 16
13819: DOUBLE
13820: EQUAL
13821: IFTRUE 13825
13823: GO 13850
13825: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13826: LD_ADDR_VAR 0 3
13830: PUSH
13831: LD_INT 84
13833: PPUSH
13834: LD_VAR 0 1
13838: PPUSH
13839: CALL_OW 321
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: ST_TO_ADDR
13848: GO 13989
13850: LD_INT 19
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13864
13856: LD_INT 23
13858: DOUBLE
13859: EQUAL
13860: IFTRUE 13864
13862: GO 13889
13864: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13865: LD_ADDR_VAR 0 3
13869: PUSH
13870: LD_INT 83
13872: PPUSH
13873: LD_VAR 0 1
13877: PPUSH
13878: CALL_OW 321
13882: PUSH
13883: LD_INT 2
13885: EQUAL
13886: ST_TO_ADDR
13887: GO 13989
13889: LD_INT 17
13891: DOUBLE
13892: EQUAL
13893: IFTRUE 13897
13895: GO 13922
13897: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13898: LD_ADDR_VAR 0 3
13902: PUSH
13903: LD_INT 39
13905: PPUSH
13906: LD_VAR 0 1
13910: PPUSH
13911: CALL_OW 321
13915: PUSH
13916: LD_INT 2
13918: EQUAL
13919: ST_TO_ADDR
13920: GO 13989
13922: LD_INT 18
13924: DOUBLE
13925: EQUAL
13926: IFTRUE 13930
13928: GO 13955
13930: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13931: LD_ADDR_VAR 0 3
13935: PUSH
13936: LD_INT 40
13938: PPUSH
13939: LD_VAR 0 1
13943: PPUSH
13944: CALL_OW 321
13948: PUSH
13949: LD_INT 2
13951: EQUAL
13952: ST_TO_ADDR
13953: GO 13989
13955: LD_INT 27
13957: DOUBLE
13958: EQUAL
13959: IFTRUE 13963
13961: GO 13988
13963: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13964: LD_ADDR_VAR 0 3
13968: PUSH
13969: LD_INT 35
13971: PPUSH
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 321
13981: PUSH
13982: LD_INT 2
13984: EQUAL
13985: ST_TO_ADDR
13986: GO 13989
13988: POP
// end ;
13989: LD_VAR 0 3
13993: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13994: LD_INT 0
13996: PPUSH
13997: PPUSH
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
14003: PPUSH
14004: PPUSH
14005: PPUSH
14006: PPUSH
// result := false ;
14007: LD_ADDR_VAR 0 6
14011: PUSH
14012: LD_INT 0
14014: ST_TO_ADDR
// if btype = b_depot then
14015: LD_VAR 0 2
14019: PUSH
14020: LD_INT 0
14022: EQUAL
14023: IFFALSE 14035
// begin result := true ;
14025: LD_ADDR_VAR 0 6
14029: PUSH
14030: LD_INT 1
14032: ST_TO_ADDR
// exit ;
14033: GO 14861
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14035: LD_VAR 0 1
14039: NOT
14040: PUSH
14041: LD_VAR 0 1
14045: PPUSH
14046: CALL_OW 266
14050: PUSH
14051: LD_INT 0
14053: PUSH
14054: LD_INT 1
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: IN
14061: NOT
14062: OR
14063: PUSH
14064: LD_VAR 0 2
14068: NOT
14069: OR
14070: PUSH
14071: LD_VAR 0 5
14075: PUSH
14076: LD_INT 0
14078: PUSH
14079: LD_INT 1
14081: PUSH
14082: LD_INT 2
14084: PUSH
14085: LD_INT 3
14087: PUSH
14088: LD_INT 4
14090: PUSH
14091: LD_INT 5
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: IN
14102: NOT
14103: OR
14104: PUSH
14105: LD_VAR 0 3
14109: PPUSH
14110: LD_VAR 0 4
14114: PPUSH
14115: CALL_OW 488
14119: NOT
14120: OR
14121: IFFALSE 14125
// exit ;
14123: GO 14861
// side := GetSide ( depot ) ;
14125: LD_ADDR_VAR 0 9
14129: PUSH
14130: LD_VAR 0 1
14134: PPUSH
14135: CALL_OW 255
14139: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14140: LD_VAR 0 9
14144: PPUSH
14145: LD_VAR 0 2
14149: PPUSH
14150: CALL 13618 0 2
14154: NOT
14155: IFFALSE 14159
// exit ;
14157: GO 14861
// pom := GetBase ( depot ) ;
14159: LD_ADDR_VAR 0 10
14163: PUSH
14164: LD_VAR 0 1
14168: PPUSH
14169: CALL_OW 274
14173: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14174: LD_ADDR_VAR 0 11
14178: PUSH
14179: LD_VAR 0 2
14183: PPUSH
14184: LD_VAR 0 1
14188: PPUSH
14189: CALL_OW 248
14193: PPUSH
14194: CALL_OW 450
14198: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14199: LD_VAR 0 10
14203: PPUSH
14204: LD_INT 1
14206: PPUSH
14207: CALL_OW 275
14211: PUSH
14212: LD_VAR 0 11
14216: PUSH
14217: LD_INT 1
14219: ARRAY
14220: GREATEREQUAL
14221: PUSH
14222: LD_VAR 0 10
14226: PPUSH
14227: LD_INT 2
14229: PPUSH
14230: CALL_OW 275
14234: PUSH
14235: LD_VAR 0 11
14239: PUSH
14240: LD_INT 2
14242: ARRAY
14243: GREATEREQUAL
14244: AND
14245: PUSH
14246: LD_VAR 0 10
14250: PPUSH
14251: LD_INT 3
14253: PPUSH
14254: CALL_OW 275
14258: PUSH
14259: LD_VAR 0 11
14263: PUSH
14264: LD_INT 3
14266: ARRAY
14267: GREATEREQUAL
14268: AND
14269: NOT
14270: IFFALSE 14274
// exit ;
14272: GO 14861
// if GetBType ( depot ) = b_depot then
14274: LD_VAR 0 1
14278: PPUSH
14279: CALL_OW 266
14283: PUSH
14284: LD_INT 0
14286: EQUAL
14287: IFFALSE 14299
// dist := 28 else
14289: LD_ADDR_VAR 0 14
14293: PUSH
14294: LD_INT 28
14296: ST_TO_ADDR
14297: GO 14307
// dist := 36 ;
14299: LD_ADDR_VAR 0 14
14303: PUSH
14304: LD_INT 36
14306: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14307: LD_VAR 0 1
14311: PPUSH
14312: LD_VAR 0 3
14316: PPUSH
14317: LD_VAR 0 4
14321: PPUSH
14322: CALL_OW 297
14326: PUSH
14327: LD_VAR 0 14
14331: GREATER
14332: IFFALSE 14336
// exit ;
14334: GO 14861
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14336: LD_ADDR_VAR 0 12
14340: PUSH
14341: LD_VAR 0 2
14345: PPUSH
14346: LD_VAR 0 3
14350: PPUSH
14351: LD_VAR 0 4
14355: PPUSH
14356: LD_VAR 0 5
14360: PPUSH
14361: LD_VAR 0 1
14365: PPUSH
14366: CALL_OW 248
14370: PPUSH
14371: LD_INT 0
14373: PPUSH
14374: CALL 14866 0 6
14378: ST_TO_ADDR
// if not hexes then
14379: LD_VAR 0 12
14383: NOT
14384: IFFALSE 14388
// exit ;
14386: GO 14861
// hex := GetHexInfo ( x , y ) ;
14388: LD_ADDR_VAR 0 15
14392: PUSH
14393: LD_VAR 0 3
14397: PPUSH
14398: LD_VAR 0 4
14402: PPUSH
14403: CALL_OW 546
14407: ST_TO_ADDR
// if hex [ 1 ] then
14408: LD_VAR 0 15
14412: PUSH
14413: LD_INT 1
14415: ARRAY
14416: IFFALSE 14420
// exit ;
14418: GO 14861
// height := hex [ 2 ] ;
14420: LD_ADDR_VAR 0 13
14424: PUSH
14425: LD_VAR 0 15
14429: PUSH
14430: LD_INT 2
14432: ARRAY
14433: ST_TO_ADDR
// for i = 1 to hexes do
14434: LD_ADDR_VAR 0 7
14438: PUSH
14439: DOUBLE
14440: LD_INT 1
14442: DEC
14443: ST_TO_ADDR
14444: LD_VAR 0 12
14448: PUSH
14449: FOR_TO
14450: IFFALSE 14780
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14452: LD_VAR 0 12
14456: PUSH
14457: LD_VAR 0 7
14461: ARRAY
14462: PUSH
14463: LD_INT 1
14465: ARRAY
14466: PPUSH
14467: LD_VAR 0 12
14471: PUSH
14472: LD_VAR 0 7
14476: ARRAY
14477: PUSH
14478: LD_INT 2
14480: ARRAY
14481: PPUSH
14482: CALL_OW 488
14486: NOT
14487: PUSH
14488: LD_VAR 0 12
14492: PUSH
14493: LD_VAR 0 7
14497: ARRAY
14498: PUSH
14499: LD_INT 1
14501: ARRAY
14502: PPUSH
14503: LD_VAR 0 12
14507: PUSH
14508: LD_VAR 0 7
14512: ARRAY
14513: PUSH
14514: LD_INT 2
14516: ARRAY
14517: PPUSH
14518: CALL_OW 428
14522: PUSH
14523: LD_INT 0
14525: GREATER
14526: OR
14527: PUSH
14528: LD_VAR 0 12
14532: PUSH
14533: LD_VAR 0 7
14537: ARRAY
14538: PUSH
14539: LD_INT 1
14541: ARRAY
14542: PPUSH
14543: LD_VAR 0 12
14547: PUSH
14548: LD_VAR 0 7
14552: ARRAY
14553: PUSH
14554: LD_INT 2
14556: ARRAY
14557: PPUSH
14558: CALL_OW 351
14562: OR
14563: IFFALSE 14569
// exit ;
14565: POP
14566: POP
14567: GO 14861
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14569: LD_ADDR_VAR 0 8
14573: PUSH
14574: LD_VAR 0 12
14578: PUSH
14579: LD_VAR 0 7
14583: ARRAY
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PPUSH
14589: LD_VAR 0 12
14593: PUSH
14594: LD_VAR 0 7
14598: ARRAY
14599: PUSH
14600: LD_INT 2
14602: ARRAY
14603: PPUSH
14604: CALL_OW 546
14608: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14609: LD_VAR 0 8
14613: PUSH
14614: LD_INT 1
14616: ARRAY
14617: PUSH
14618: LD_VAR 0 8
14622: PUSH
14623: LD_INT 2
14625: ARRAY
14626: PUSH
14627: LD_VAR 0 13
14631: PUSH
14632: LD_INT 2
14634: PLUS
14635: GREATER
14636: OR
14637: PUSH
14638: LD_VAR 0 8
14642: PUSH
14643: LD_INT 2
14645: ARRAY
14646: PUSH
14647: LD_VAR 0 13
14651: PUSH
14652: LD_INT 2
14654: MINUS
14655: LESS
14656: OR
14657: PUSH
14658: LD_VAR 0 8
14662: PUSH
14663: LD_INT 3
14665: ARRAY
14666: PUSH
14667: LD_INT 0
14669: PUSH
14670: LD_INT 8
14672: PUSH
14673: LD_INT 9
14675: PUSH
14676: LD_INT 10
14678: PUSH
14679: LD_INT 11
14681: PUSH
14682: LD_INT 12
14684: PUSH
14685: LD_INT 13
14687: PUSH
14688: LD_INT 16
14690: PUSH
14691: LD_INT 17
14693: PUSH
14694: LD_INT 18
14696: PUSH
14697: LD_INT 19
14699: PUSH
14700: LD_INT 20
14702: PUSH
14703: LD_INT 21
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: IN
14721: NOT
14722: OR
14723: PUSH
14724: LD_VAR 0 8
14728: PUSH
14729: LD_INT 5
14731: ARRAY
14732: NOT
14733: OR
14734: PUSH
14735: LD_VAR 0 8
14739: PUSH
14740: LD_INT 6
14742: ARRAY
14743: PUSH
14744: LD_INT 1
14746: PUSH
14747: LD_INT 2
14749: PUSH
14750: LD_INT 7
14752: PUSH
14753: LD_INT 9
14755: PUSH
14756: LD_INT 10
14758: PUSH
14759: LD_INT 11
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: IN
14770: NOT
14771: OR
14772: IFFALSE 14778
// exit ;
14774: POP
14775: POP
14776: GO 14861
// end ;
14778: GO 14449
14780: POP
14781: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14782: LD_VAR 0 9
14786: PPUSH
14787: LD_VAR 0 3
14791: PPUSH
14792: LD_VAR 0 4
14796: PPUSH
14797: LD_INT 20
14799: PPUSH
14800: CALL 6784 0 4
14804: PUSH
14805: LD_INT 4
14807: ARRAY
14808: IFFALSE 14812
// exit ;
14810: GO 14861
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14812: LD_VAR 0 2
14816: PUSH
14817: LD_INT 29
14819: PUSH
14820: LD_INT 30
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: IN
14827: PUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: LD_VAR 0 4
14837: PPUSH
14838: LD_VAR 0 9
14842: PPUSH
14843: CALL_OW 440
14847: NOT
14848: AND
14849: IFFALSE 14853
// exit ;
14851: GO 14861
// result := true ;
14853: LD_ADDR_VAR 0 6
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// end ;
14861: LD_VAR 0 6
14865: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14866: LD_INT 0
14868: PPUSH
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
14873: PPUSH
14874: PPUSH
14875: PPUSH
14876: PPUSH
14877: PPUSH
14878: PPUSH
14879: PPUSH
14880: PPUSH
14881: PPUSH
14882: PPUSH
14883: PPUSH
14884: PPUSH
14885: PPUSH
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
14890: PPUSH
14891: PPUSH
14892: PPUSH
14893: PPUSH
14894: PPUSH
14895: PPUSH
14896: PPUSH
14897: PPUSH
14898: PPUSH
14899: PPUSH
14900: PPUSH
14901: PPUSH
14902: PPUSH
14903: PPUSH
14904: PPUSH
14905: PPUSH
14906: PPUSH
14907: PPUSH
14908: PPUSH
14909: PPUSH
14910: PPUSH
14911: PPUSH
14912: PPUSH
14913: PPUSH
14914: PPUSH
14915: PPUSH
14916: PPUSH
14917: PPUSH
14918: PPUSH
14919: PPUSH
14920: PPUSH
14921: PPUSH
14922: PPUSH
14923: PPUSH
14924: PPUSH
14925: PPUSH
// result = [ ] ;
14926: LD_ADDR_VAR 0 7
14930: PUSH
14931: EMPTY
14932: ST_TO_ADDR
// temp_list = [ ] ;
14933: LD_ADDR_VAR 0 9
14937: PUSH
14938: EMPTY
14939: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14940: LD_VAR 0 4
14944: PUSH
14945: LD_INT 0
14947: PUSH
14948: LD_INT 1
14950: PUSH
14951: LD_INT 2
14953: PUSH
14954: LD_INT 3
14956: PUSH
14957: LD_INT 4
14959: PUSH
14960: LD_INT 5
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: IN
14971: NOT
14972: PUSH
14973: LD_VAR 0 1
14977: PUSH
14978: LD_INT 0
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: IN
14988: PUSH
14989: LD_VAR 0 5
14993: PUSH
14994: LD_INT 1
14996: PUSH
14997: LD_INT 2
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: IN
15008: NOT
15009: AND
15010: OR
15011: IFFALSE 15015
// exit ;
15013: GO 33406
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15015: LD_VAR 0 1
15019: PUSH
15020: LD_INT 6
15022: PUSH
15023: LD_INT 7
15025: PUSH
15026: LD_INT 8
15028: PUSH
15029: LD_INT 13
15031: PUSH
15032: LD_INT 12
15034: PUSH
15035: LD_INT 15
15037: PUSH
15038: LD_INT 11
15040: PUSH
15041: LD_INT 14
15043: PUSH
15044: LD_INT 10
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: IN
15058: IFFALSE 15068
// btype = b_lab ;
15060: LD_ADDR_VAR 0 1
15064: PUSH
15065: LD_INT 6
15067: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15068: LD_VAR 0 6
15072: PUSH
15073: LD_INT 0
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: IN
15087: NOT
15088: PUSH
15089: LD_VAR 0 1
15093: PUSH
15094: LD_INT 0
15096: PUSH
15097: LD_INT 1
15099: PUSH
15100: LD_INT 2
15102: PUSH
15103: LD_INT 3
15105: PUSH
15106: LD_INT 6
15108: PUSH
15109: LD_INT 36
15111: PUSH
15112: LD_INT 4
15114: PUSH
15115: LD_INT 5
15117: PUSH
15118: LD_INT 31
15120: PUSH
15121: LD_INT 32
15123: PUSH
15124: LD_INT 33
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: IN
15140: NOT
15141: PUSH
15142: LD_VAR 0 6
15146: PUSH
15147: LD_INT 1
15149: EQUAL
15150: AND
15151: OR
15152: PUSH
15153: LD_VAR 0 1
15157: PUSH
15158: LD_INT 2
15160: PUSH
15161: LD_INT 3
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: IN
15168: NOT
15169: PUSH
15170: LD_VAR 0 6
15174: PUSH
15175: LD_INT 2
15177: EQUAL
15178: AND
15179: OR
15180: IFFALSE 15190
// mode = 0 ;
15182: LD_ADDR_VAR 0 6
15186: PUSH
15187: LD_INT 0
15189: ST_TO_ADDR
// case mode of 0 :
15190: LD_VAR 0 6
15194: PUSH
15195: LD_INT 0
15197: DOUBLE
15198: EQUAL
15199: IFTRUE 15203
15201: GO 26656
15203: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15204: LD_ADDR_VAR 0 11
15208: PUSH
15209: LD_INT 0
15211: PUSH
15212: LD_INT 0
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 0
15221: PUSH
15222: LD_INT 1
15224: NEG
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 1
15232: PUSH
15233: LD_INT 0
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 1
15242: PUSH
15243: LD_INT 1
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 0
15252: PUSH
15253: LD_INT 1
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 1
15262: NEG
15263: PUSH
15264: LD_INT 0
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 1
15273: NEG
15274: PUSH
15275: LD_INT 1
15277: NEG
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 1
15285: NEG
15286: PUSH
15287: LD_INT 2
15289: NEG
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 0
15297: PUSH
15298: LD_INT 2
15300: NEG
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: LD_INT 1
15311: NEG
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 1
15319: PUSH
15320: LD_INT 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 0
15329: PUSH
15330: LD_INT 2
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 1
15339: NEG
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 1
15350: PUSH
15351: LD_INT 3
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 0
15360: PUSH
15361: LD_INT 3
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 1
15370: NEG
15371: PUSH
15372: LD_INT 2
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15397: LD_ADDR_VAR 0 12
15401: PUSH
15402: LD_INT 0
15404: PUSH
15405: LD_INT 0
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 0
15414: PUSH
15415: LD_INT 1
15417: NEG
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 1
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 1
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 0
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 1
15455: NEG
15456: PUSH
15457: LD_INT 0
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 1
15466: NEG
15467: PUSH
15468: LD_INT 1
15470: NEG
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 1
15478: PUSH
15479: LD_INT 1
15481: NEG
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: LD_INT 0
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 2
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 1
15509: NEG
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 2
15520: NEG
15521: PUSH
15522: LD_INT 0
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 2
15531: NEG
15532: PUSH
15533: LD_INT 1
15535: NEG
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 2
15543: NEG
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 3
15554: NEG
15555: PUSH
15556: LD_INT 0
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PUSH
15563: LD_INT 3
15565: NEG
15566: PUSH
15567: LD_INT 1
15569: NEG
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15593: LD_ADDR_VAR 0 13
15597: PUSH
15598: LD_INT 0
15600: PUSH
15601: LD_INT 0
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 0
15610: PUSH
15611: LD_INT 1
15613: NEG
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 1
15621: PUSH
15622: LD_INT 0
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 1
15631: PUSH
15632: LD_INT 1
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: LD_INT 1
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: NEG
15652: PUSH
15653: LD_INT 0
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 1
15662: NEG
15663: PUSH
15664: LD_INT 1
15666: NEG
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 1
15674: NEG
15675: PUSH
15676: LD_INT 2
15678: NEG
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 2
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 2
15696: PUSH
15697: LD_INT 2
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: LD_INT 2
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 2
15716: NEG
15717: PUSH
15718: LD_INT 1
15720: NEG
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 2
15728: NEG
15729: PUSH
15730: LD_INT 2
15732: NEG
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 2
15740: NEG
15741: PUSH
15742: LD_INT 3
15744: NEG
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 3
15752: NEG
15753: PUSH
15754: LD_INT 2
15756: NEG
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 3
15764: NEG
15765: PUSH
15766: LD_INT 3
15768: NEG
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15792: LD_ADDR_VAR 0 14
15796: PUSH
15797: LD_INT 0
15799: PUSH
15800: LD_INT 0
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 0
15809: PUSH
15810: LD_INT 1
15812: NEG
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 1
15820: PUSH
15821: LD_INT 0
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: LD_INT 1
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 0
15840: PUSH
15841: LD_INT 1
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 1
15850: NEG
15851: PUSH
15852: LD_INT 0
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 1
15861: NEG
15862: PUSH
15863: LD_INT 1
15865: NEG
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 1
15873: NEG
15874: PUSH
15875: LD_INT 2
15877: NEG
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 0
15885: PUSH
15886: LD_INT 2
15888: NEG
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: LD_INT 1
15899: NEG
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 0
15917: PUSH
15918: LD_INT 2
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 1
15927: NEG
15928: PUSH
15929: LD_INT 1
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 1
15938: NEG
15939: PUSH
15940: LD_INT 3
15942: NEG
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 0
15950: PUSH
15951: LD_INT 3
15953: NEG
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 1
15961: PUSH
15962: LD_INT 2
15964: NEG
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15988: LD_ADDR_VAR 0 15
15992: PUSH
15993: LD_INT 0
15995: PUSH
15996: LD_INT 0
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 0
16005: PUSH
16006: LD_INT 1
16008: NEG
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 1
16016: PUSH
16017: LD_INT 0
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 1
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 0
16036: PUSH
16037: LD_INT 1
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 1
16046: NEG
16047: PUSH
16048: LD_INT 0
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 1
16057: NEG
16058: PUSH
16059: LD_INT 1
16061: NEG
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 1
16069: PUSH
16070: LD_INT 1
16072: NEG
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 2
16080: PUSH
16081: LD_INT 0
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 2
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 1
16100: NEG
16101: PUSH
16102: LD_INT 1
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 2
16111: NEG
16112: PUSH
16113: LD_INT 0
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 2
16122: NEG
16123: PUSH
16124: LD_INT 1
16126: NEG
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 2
16134: PUSH
16135: LD_INT 1
16137: NEG
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 3
16145: PUSH
16146: LD_INT 0
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 3
16155: PUSH
16156: LD_INT 1
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16181: LD_ADDR_VAR 0 16
16185: PUSH
16186: LD_INT 0
16188: PUSH
16189: LD_INT 0
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 0
16198: PUSH
16199: LD_INT 1
16201: NEG
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 1
16209: PUSH
16210: LD_INT 0
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: LD_INT 1
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 0
16229: PUSH
16230: LD_INT 1
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 1
16239: NEG
16240: PUSH
16241: LD_INT 0
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 1
16250: NEG
16251: PUSH
16252: LD_INT 1
16254: NEG
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 1
16262: NEG
16263: PUSH
16264: LD_INT 2
16266: NEG
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: LD_INT 1
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: LD_INT 2
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 1
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 2
16304: NEG
16305: PUSH
16306: LD_INT 1
16308: NEG
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 2
16316: NEG
16317: PUSH
16318: LD_INT 2
16320: NEG
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: LD_INT 2
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 3
16338: PUSH
16339: LD_INT 3
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 2
16348: PUSH
16349: LD_INT 3
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16374: LD_ADDR_VAR 0 17
16378: PUSH
16379: LD_INT 0
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 0
16391: PUSH
16392: LD_INT 1
16394: NEG
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: LD_INT 0
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 1
16412: PUSH
16413: LD_INT 1
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 0
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 1
16432: NEG
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 1
16443: NEG
16444: PUSH
16445: LD_INT 1
16447: NEG
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: LD_INT 2
16459: NEG
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 0
16467: PUSH
16468: LD_INT 2
16470: NEG
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: LD_INT 1
16481: NEG
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 0
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 2
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 2
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 1
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 0
16529: PUSH
16530: LD_INT 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 1
16539: NEG
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 2
16550: NEG
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 2
16561: NEG
16562: PUSH
16563: LD_INT 1
16565: NEG
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 2
16573: NEG
16574: PUSH
16575: LD_INT 2
16577: NEG
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16604: LD_ADDR_VAR 0 18
16608: PUSH
16609: LD_INT 0
16611: PUSH
16612: LD_INT 0
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 0
16621: PUSH
16622: LD_INT 1
16624: NEG
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 1
16632: PUSH
16633: LD_INT 0
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 1
16642: PUSH
16643: LD_INT 1
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 0
16652: PUSH
16653: LD_INT 1
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 1
16662: NEG
16663: PUSH
16664: LD_INT 0
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 1
16673: NEG
16674: PUSH
16675: LD_INT 1
16677: NEG
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 1
16685: NEG
16686: PUSH
16687: LD_INT 2
16689: NEG
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 0
16697: PUSH
16698: LD_INT 2
16700: NEG
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 1
16708: PUSH
16709: LD_INT 1
16711: NEG
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 2
16719: PUSH
16720: LD_INT 0
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 2
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 2
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: LD_INT 2
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 0
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 1
16769: NEG
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: NEG
16781: PUSH
16782: LD_INT 0
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 2
16791: NEG
16792: PUSH
16793: LD_INT 1
16795: NEG
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 2
16803: NEG
16804: PUSH
16805: LD_INT 2
16807: NEG
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16834: LD_ADDR_VAR 0 19
16838: PUSH
16839: LD_INT 0
16841: PUSH
16842: LD_INT 0
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 0
16851: PUSH
16852: LD_INT 1
16854: NEG
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: LD_INT 0
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 1
16872: PUSH
16873: LD_INT 1
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 0
16882: PUSH
16883: LD_INT 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 1
16892: NEG
16893: PUSH
16894: LD_INT 0
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 1
16903: NEG
16904: PUSH
16905: LD_INT 1
16907: NEG
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 1
16915: NEG
16916: PUSH
16917: LD_INT 2
16919: NEG
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 0
16927: PUSH
16928: LD_INT 2
16930: NEG
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 1
16938: PUSH
16939: LD_INT 1
16941: NEG
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: LD_INT 0
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 2
16959: PUSH
16960: LD_INT 1
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: LD_INT 2
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 0
16989: PUSH
16990: LD_INT 2
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 1
16999: NEG
17000: PUSH
17001: LD_INT 1
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 2
17010: NEG
17011: PUSH
17012: LD_INT 0
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 2
17021: NEG
17022: PUSH
17023: LD_INT 1
17025: NEG
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 2
17033: NEG
17034: PUSH
17035: LD_INT 2
17037: NEG
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17064: LD_ADDR_VAR 0 20
17068: PUSH
17069: LD_INT 0
17071: PUSH
17072: LD_INT 0
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 0
17081: PUSH
17082: LD_INT 1
17084: NEG
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 1
17092: PUSH
17093: LD_INT 0
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 1
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 0
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 1
17122: NEG
17123: PUSH
17124: LD_INT 0
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 1
17133: NEG
17134: PUSH
17135: LD_INT 1
17137: NEG
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 1
17145: NEG
17146: PUSH
17147: LD_INT 2
17149: NEG
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 0
17157: PUSH
17158: LD_INT 2
17160: NEG
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 1
17168: PUSH
17169: LD_INT 1
17171: NEG
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 2
17179: PUSH
17180: LD_INT 0
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 2
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 2
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: LD_INT 2
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 0
17219: PUSH
17220: LD_INT 2
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 1
17229: NEG
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 2
17240: NEG
17241: PUSH
17242: LD_INT 0
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 2
17251: NEG
17252: PUSH
17253: LD_INT 1
17255: NEG
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 2
17263: NEG
17264: PUSH
17265: LD_INT 2
17267: NEG
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17294: LD_ADDR_VAR 0 21
17298: PUSH
17299: LD_INT 0
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 0
17311: PUSH
17312: LD_INT 1
17314: NEG
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: LD_INT 0
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 1
17332: PUSH
17333: LD_INT 1
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 0
17342: PUSH
17343: LD_INT 1
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 1
17352: NEG
17353: PUSH
17354: LD_INT 0
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 1
17363: NEG
17364: PUSH
17365: LD_INT 1
17367: NEG
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 1
17375: NEG
17376: PUSH
17377: LD_INT 2
17379: NEG
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 0
17387: PUSH
17388: LD_INT 2
17390: NEG
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: LD_INT 1
17401: NEG
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 2
17409: PUSH
17410: LD_INT 0
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 2
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 2
17429: PUSH
17430: LD_INT 2
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: LD_INT 2
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 0
17449: PUSH
17450: LD_INT 2
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: NEG
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 2
17470: NEG
17471: PUSH
17472: LD_INT 0
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 2
17481: NEG
17482: PUSH
17483: LD_INT 1
17485: NEG
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 2
17493: NEG
17494: PUSH
17495: LD_INT 2
17497: NEG
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17524: LD_ADDR_VAR 0 22
17528: PUSH
17529: LD_INT 0
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: LD_INT 0
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 1
17593: NEG
17594: PUSH
17595: LD_INT 1
17597: NEG
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 1
17605: NEG
17606: PUSH
17607: LD_INT 2
17609: NEG
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 0
17617: PUSH
17618: LD_INT 2
17620: NEG
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: LD_INT 1
17631: NEG
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: LD_INT 0
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: LD_INT 1
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 2
17659: PUSH
17660: LD_INT 2
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 1
17669: PUSH
17670: LD_INT 2
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: LD_INT 2
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 1
17689: NEG
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 2
17700: NEG
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 2
17711: NEG
17712: PUSH
17713: LD_INT 1
17715: NEG
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 2
17723: NEG
17724: PUSH
17725: LD_INT 2
17727: NEG
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17754: LD_ADDR_VAR 0 23
17758: PUSH
17759: LD_INT 0
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: LD_INT 1
17774: NEG
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: LD_INT 0
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 1
17812: NEG
17813: PUSH
17814: LD_INT 0
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: NEG
17824: PUSH
17825: LD_INT 1
17827: NEG
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 1
17835: NEG
17836: PUSH
17837: LD_INT 2
17839: NEG
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 0
17847: PUSH
17848: LD_INT 2
17850: NEG
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 1
17858: PUSH
17859: LD_INT 1
17861: NEG
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 2
17869: PUSH
17870: LD_INT 0
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 2
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: LD_INT 2
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 1
17919: NEG
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 2
17930: NEG
17931: PUSH
17932: LD_INT 0
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 2
17941: NEG
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 2
17953: NEG
17954: PUSH
17955: LD_INT 2
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 2
17965: NEG
17966: PUSH
17967: LD_INT 3
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: LD_INT 3
17981: NEG
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: LD_INT 2
17992: NEG
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 2
18000: PUSH
18001: LD_INT 1
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18034: LD_ADDR_VAR 0 24
18038: PUSH
18039: LD_INT 0
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 0
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: LD_INT 2
18119: NEG
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: LD_INT 2
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: PUSH
18170: LD_INT 2
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: NEG
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 2
18221: NEG
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: LD_INT 2
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: LD_INT 2
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 3
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 3
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18310: LD_ADDR_VAR 0 25
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: LD_INT 1
18330: NEG
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: LD_INT 0
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 0
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 1
18368: NEG
18369: PUSH
18370: LD_INT 0
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: NEG
18380: PUSH
18381: LD_INT 1
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: LD_INT 2
18395: NEG
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: LD_INT 2
18406: NEG
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 2
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: LD_INT 2
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: NEG
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 2
18497: NEG
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: NEG
18510: PUSH
18511: LD_INT 2
18513: NEG
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 3
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 3
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: LD_INT 3
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18584: LD_ADDR_VAR 0 26
18588: PUSH
18589: LD_INT 0
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: LD_INT 1
18604: NEG
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: PUSH
18613: LD_INT 0
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 1
18653: NEG
18654: PUSH
18655: LD_INT 1
18657: NEG
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 1
18665: NEG
18666: PUSH
18667: LD_INT 2
18669: NEG
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: LD_INT 2
18680: NEG
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: LD_INT 1
18691: NEG
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 2
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 2
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 0
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 1
18749: NEG
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: NEG
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 2
18771: NEG
18772: PUSH
18773: LD_INT 1
18775: NEG
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 2
18783: NEG
18784: PUSH
18785: LD_INT 2
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 3
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: LD_INT 3
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 2
18826: NEG
18827: PUSH
18828: LD_INT 1
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18860: LD_ADDR_VAR 0 27
18864: PUSH
18865: LD_INT 0
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: LD_INT 1
18880: NEG
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 1
18898: PUSH
18899: LD_INT 1
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 1
18918: NEG
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 1
18929: NEG
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 2
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 2
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 1
18967: NEG
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 2
18975: PUSH
18976: LD_INT 0
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 2
19036: NEG
19037: PUSH
19038: LD_INT 0
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 2
19047: NEG
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: NEG
19060: PUSH
19061: LD_INT 2
19063: NEG
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: NEG
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: NEG
19083: PUSH
19084: LD_INT 1
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 3
19093: NEG
19094: PUSH
19095: LD_INT 1
19097: NEG
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 3
19105: NEG
19106: PUSH
19107: LD_INT 2
19109: NEG
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19140: LD_ADDR_VAR 0 28
19144: PUSH
19145: LD_INT 0
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 0
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: NEG
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: LD_INT 1
19213: NEG
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: LD_INT 2
19225: NEG
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: LD_INT 2
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: LD_INT 1
19247: NEG
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: LD_INT 0
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: LD_INT 2
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 1
19305: NEG
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 2
19316: NEG
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: NEG
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 2
19339: NEG
19340: PUSH
19341: LD_INT 2
19343: NEG
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 2
19351: NEG
19352: PUSH
19353: LD_INT 3
19355: NEG
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 1
19363: NEG
19364: PUSH
19365: LD_INT 3
19367: NEG
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 3
19375: NEG
19376: PUSH
19377: LD_INT 1
19379: NEG
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 3
19387: NEG
19388: PUSH
19389: LD_INT 2
19391: NEG
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19422: LD_ADDR_VAR 0 29
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 1
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 0
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 1
19491: NEG
19492: PUSH
19493: LD_INT 1
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: LD_INT 2
19507: NEG
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: LD_INT 2
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: PUSH
19527: LD_INT 1
19529: NEG
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 2
19537: PUSH
19538: LD_INT 0
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: LD_INT 1
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: NEG
19578: PUSH
19579: LD_INT 1
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 2
19588: NEG
19589: PUSH
19590: LD_INT 1
19592: NEG
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 2
19600: NEG
19601: PUSH
19602: LD_INT 2
19604: NEG
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 2
19612: NEG
19613: PUSH
19614: LD_INT 3
19616: NEG
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 2
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 3
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: LD_INT 3
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: NEG
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 3
19666: NEG
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19701: LD_ADDR_VAR 0 30
19705: PUSH
19706: LD_INT 0
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: LD_INT 1
19721: NEG
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: LD_INT 1
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 0
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 1
19759: NEG
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 1
19770: NEG
19771: PUSH
19772: LD_INT 1
19774: NEG
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: LD_INT 2
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 2
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 2
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: LD_INT 2
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 1
19856: NEG
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 2
19867: NEG
19868: PUSH
19869: LD_INT 0
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: LD_INT 3
19894: NEG
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: LD_INT 2
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 3
19913: PUSH
19914: LD_INT 2
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 3
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: NEG
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 3
19944: NEG
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19979: LD_ADDR_VAR 0 31
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 1
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 0
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 1
20037: NEG
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: LD_INT 1
20052: NEG
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 1
20060: NEG
20061: PUSH
20062: LD_INT 2
20064: NEG
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 1
20072: PUSH
20073: LD_INT 1
20075: NEG
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 2
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: LD_INT 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: LD_INT 2
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 1
20133: NEG
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 2
20144: NEG
20145: PUSH
20146: LD_INT 1
20148: NEG
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 2
20156: NEG
20157: PUSH
20158: LD_INT 2
20160: NEG
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 2
20168: NEG
20169: PUSH
20170: LD_INT 3
20172: NEG
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 2
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 3
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 3
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 3
20222: NEG
20223: PUSH
20224: LD_INT 2
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20257: LD_ADDR_VAR 0 32
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: LD_INT 1
20277: NEG
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: LD_INT 0
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: LD_INT 1
20330: NEG
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: NEG
20339: PUSH
20340: LD_INT 2
20342: NEG
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 0
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 2
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: LD_INT 2
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 0
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 1
20412: NEG
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 2
20423: NEG
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 2
20434: NEG
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: LD_INT 3
20450: NEG
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 3
20469: PUSH
20470: LD_INT 2
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 3
20500: NEG
20501: PUSH
20502: LD_INT 1
20504: NEG
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20535: LD_ADDR_VAR 0 33
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: LD_INT 1
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 0
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: LD_INT 1
20608: NEG
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PUSH
20618: LD_INT 2
20620: NEG
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 2
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: LD_INT 2
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: NEG
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: NEG
20691: PUSH
20692: LD_INT 0
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 2
20701: NEG
20702: PUSH
20703: LD_INT 1
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 2
20713: NEG
20714: PUSH
20715: LD_INT 2
20717: NEG
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: LD_INT 3
20729: NEG
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 2
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 3
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: LD_INT 3
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 3
20779: NEG
20780: PUSH
20781: LD_INT 2
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20814: LD_ADDR_VAR 0 34
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: LD_INT 1
20834: NEG
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 0
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: LD_INT 1
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 1
20872: NEG
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: LD_INT 2
20899: NEG
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 2
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 2
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: PUSH
20940: LD_INT 2
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 2
20970: NEG
20971: PUSH
20972: LD_INT 0
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 2
20981: NEG
20982: PUSH
20983: LD_INT 1
20985: NEG
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 2
20993: NEG
20994: PUSH
20995: LD_INT 2
20997: NEG
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: LD_INT 3
21009: NEG
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: LD_INT 2
21020: NEG
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 3
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: LD_INT 3
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 2
21048: NEG
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 3
21059: NEG
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21094: LD_ADDR_VAR 0 35
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: LD_INT 1
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: NEG
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21206: LD_ADDR_VAR 0 36
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 0
21223: PUSH
21224: LD_INT 1
21226: NEG
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: LD_INT 0
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: NEG
21276: PUSH
21277: LD_INT 1
21279: NEG
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 1
21287: NEG
21288: PUSH
21289: LD_INT 2
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21318: LD_ADDR_VAR 0 37
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 0
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 1
21376: NEG
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 1
21387: NEG
21388: PUSH
21389: LD_INT 1
21391: NEG
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: LD_INT 1
21402: NEG
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21430: LD_ADDR_VAR 0 38
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: LD_INT 1
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: LD_INT 1
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: NEG
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 2
21511: PUSH
21512: LD_INT 1
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 2
21521: NEG
21522: PUSH
21523: LD_INT 1
21525: NEG
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21542: LD_ADDR_VAR 0 39
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: LD_INT 0
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 1
21600: NEG
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 1
21611: NEG
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 1
21623: NEG
21624: PUSH
21625: LD_INT 2
21627: NEG
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21654: LD_ADDR_VAR 0 40
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: LD_INT 0
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 0
21671: PUSH
21672: LD_INT 1
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 0
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: NEG
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 1
21723: NEG
21724: PUSH
21725: LD_INT 1
21727: NEG
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: LD_INT 1
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: LD_INT 1
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21766: LD_ADDR_VAR 0 41
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 0
21783: PUSH
21784: LD_INT 1
21786: NEG
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 0
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: NEG
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 1
21835: NEG
21836: PUSH
21837: LD_INT 1
21839: NEG
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 1
21847: NEG
21848: PUSH
21849: LD_INT 2
21851: NEG
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: LD_INT 1
21862: NEG
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 2
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 2
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 2
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 1
21910: NEG
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 2
21921: NEG
21922: PUSH
21923: LD_INT 0
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 2
21932: NEG
21933: PUSH
21934: LD_INT 1
21936: NEG
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 2
21944: NEG
21945: PUSH
21946: LD_INT 2
21948: NEG
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 2
21956: NEG
21957: PUSH
21958: LD_INT 3
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 3
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 3
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 3
21999: PUSH
22000: LD_INT 2
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 3
22009: PUSH
22010: LD_INT 3
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 2
22019: PUSH
22020: LD_INT 3
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 2
22029: NEG
22030: PUSH
22031: LD_INT 1
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 3
22040: NEG
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 3
22051: NEG
22052: PUSH
22053: LD_INT 1
22055: NEG
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 3
22063: NEG
22064: PUSH
22065: LD_INT 2
22067: NEG
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 3
22075: NEG
22076: PUSH
22077: LD_INT 3
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22116: LD_ADDR_VAR 0 42
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 1
22136: NEG
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 1
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: NEG
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 1
22197: NEG
22198: PUSH
22199: LD_INT 2
22201: NEG
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: LD_INT 1
22223: NEG
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: LD_INT 2
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: LD_INT 2
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 2
22282: NEG
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 2
22294: NEG
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 2
22306: NEG
22307: PUSH
22308: LD_INT 3
22310: NEG
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 1
22318: NEG
22319: PUSH
22320: LD_INT 3
22322: NEG
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: LD_INT 3
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 2
22344: NEG
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 3
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 3
22362: PUSH
22363: LD_INT 3
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 3
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 3
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: LD_INT 3
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 2
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 3
22413: NEG
22414: PUSH
22415: LD_INT 2
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 3
22425: NEG
22426: PUSH
22427: LD_INT 3
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22466: LD_ADDR_VAR 0 43
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: LD_INT 1
22486: NEG
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 1
22524: NEG
22525: PUSH
22526: LD_INT 0
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 1
22547: NEG
22548: PUSH
22549: LD_INT 2
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: LD_INT 2
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 2
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 0
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 2
22632: NEG
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 2
22643: NEG
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: LD_INT 3
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: LD_INT 3
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 2
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: LD_INT 1
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 3
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 3
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: LD_INT 3
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 0
22730: PUSH
22731: LD_INT 3
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 1
22740: NEG
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 2
22751: NEG
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 3
22762: NEG
22763: PUSH
22764: LD_INT 0
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 3
22773: NEG
22774: PUSH
22775: LD_INT 1
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22814: LD_ADDR_VAR 0 44
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 0
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: NEG
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 2
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 2
22969: NEG
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 2
22980: NEG
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: LD_INT 3
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 1
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 3
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 3
23057: PUSH
23058: LD_INT 3
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 3
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 2
23077: NEG
23078: PUSH
23079: LD_INT 1
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 3
23088: NEG
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 3
23099: NEG
23100: PUSH
23101: LD_INT 1
23103: NEG
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 3
23111: NEG
23112: PUSH
23113: LD_INT 2
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 3
23123: NEG
23124: PUSH
23125: LD_INT 3
23127: NEG
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23164: LD_ADDR_VAR 0 45
23168: PUSH
23169: LD_INT 0
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 1
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: NEG
23223: PUSH
23224: LD_INT 0
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: LD_INT 2
23249: NEG
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 2
23330: NEG
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 2
23342: NEG
23343: PUSH
23344: LD_INT 2
23346: NEG
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 2
23354: NEG
23355: PUSH
23356: LD_INT 3
23358: NEG
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 1
23366: NEG
23367: PUSH
23368: LD_INT 3
23370: NEG
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 0
23378: PUSH
23379: LD_INT 3
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: LD_INT 2
23392: NEG
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 3
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 3
23410: PUSH
23411: LD_INT 3
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: LD_INT 3
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: LD_INT 3
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: LD_INT 3
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 3
23461: NEG
23462: PUSH
23463: LD_INT 2
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 3
23473: NEG
23474: PUSH
23475: LD_INT 3
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23514: LD_ADDR_VAR 0 46
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: NEG
23596: PUSH
23597: LD_INT 2
23599: NEG
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: LD_INT 2
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 2
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 2
23680: NEG
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 2
23691: NEG
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: NEG
23704: PUSH
23705: LD_INT 3
23707: NEG
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 0
23715: PUSH
23716: LD_INT 3
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: LD_INT 2
23729: NEG
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 2
23737: PUSH
23738: LD_INT 1
23740: NEG
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 3
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 3
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: LD_INT 3
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 3
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 2
23799: NEG
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 3
23810: NEG
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 3
23821: NEG
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23862: LD_ADDR_VAR 0 47
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: LD_INT 0
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: LD_INT 1
23882: NEG
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: LD_INT 0
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 0
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 1
23920: NEG
23921: PUSH
23922: LD_INT 0
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: NEG
23944: PUSH
23945: LD_INT 2
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: LD_INT 2
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: LD_INT 1
23969: NEG
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 2
23977: NEG
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 2
23989: NEG
23990: PUSH
23991: LD_INT 2
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24013: LD_ADDR_VAR 0 48
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: LD_INT 2
24098: NEG
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: LD_INT 2
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 2
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24160: LD_ADDR_VAR 0 49
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 2
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 2
24272: PUSH
24273: LD_INT 2
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24304: LD_ADDR_VAR 0 50
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 0
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 1
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 0
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: NEG
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 2
24395: PUSH
24396: LD_INT 2
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: NEG
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24448: LD_ADDR_VAR 0 51
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 0
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 1
24506: NEG
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 2
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: NEG
24561: PUSH
24562: LD_INT 0
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 2
24571: NEG
24572: PUSH
24573: LD_INT 1
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24595: LD_ADDR_VAR 0 52
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 2
24710: NEG
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: NEG
24723: PUSH
24724: LD_INT 2
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24746: LD_ADDR_VAR 0 53
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 0
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: LD_INT 2
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: LD_INT 2
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: LD_INT 1
24853: NEG
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 2
24861: PUSH
24862: LD_INT 0
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 2
24922: NEG
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 2
24933: NEG
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: NEG
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24976: LD_ADDR_VAR 0 54
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 1
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: LD_INT 2
25061: NEG
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: LD_INT 2
25072: NEG
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: LD_INT 2
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 2
25175: NEG
25176: PUSH
25177: LD_INT 2
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25206: LD_ADDR_VAR 0 55
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: LD_INT 2
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 2
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 2
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: NEG
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 2
25393: NEG
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 2
25405: NEG
25406: PUSH
25407: LD_INT 2
25409: NEG
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25436: LD_ADDR_VAR 0 56
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: LD_INT 2
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: LD_INT 2
25532: NEG
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 2
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: NEG
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: LD_INT 2
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25666: LD_ADDR_VAR 0 57
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: LD_INT 0
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 2
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: LD_INT 0
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: LD_INT 2
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: NEG
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 2
25853: NEG
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: NEG
25866: PUSH
25867: LD_INT 2
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25896: LD_ADDR_VAR 0 58
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: LD_INT 2
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 2
25992: NEG
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26126: LD_ADDR_VAR 0 59
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 1
26184: NEG
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26214: LD_ADDR_VAR 0 60
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26302: LD_ADDR_VAR 0 61
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: LD_INT 1
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26390: LD_ADDR_VAR 0 62
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 1
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 1
26459: NEG
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26478: LD_ADDR_VAR 0 63
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26566: LD_ADDR_VAR 0 64
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: ST_TO_ADDR
// end ; 1 :
26654: GO 32551
26656: LD_INT 1
26658: DOUBLE
26659: EQUAL
26660: IFTRUE 26664
26662: GO 29287
26664: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26665: LD_ADDR_VAR 0 11
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: LD_INT 3
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 3
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: LIST
26708: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26709: LD_ADDR_VAR 0 12
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 3
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 3
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26750: LD_ADDR_VAR 0 13
26754: PUSH
26755: LD_INT 3
26757: PUSH
26758: LD_INT 2
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 3
26767: PUSH
26768: LD_INT 3
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: LD_INT 3
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26790: LD_ADDR_VAR 0 14
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: LIST
26830: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26831: LD_ADDR_VAR 0 15
26835: PUSH
26836: LD_INT 2
26838: NEG
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 3
26849: NEG
26850: PUSH
26851: LD_INT 0
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 3
26860: NEG
26861: PUSH
26862: LD_INT 1
26864: NEG
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26875: LD_ADDR_VAR 0 16
26879: PUSH
26880: LD_INT 2
26882: NEG
26883: PUSH
26884: LD_INT 3
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 3
26894: NEG
26895: PUSH
26896: LD_INT 2
26898: NEG
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 3
26906: NEG
26907: PUSH
26908: LD_INT 3
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: LIST
26920: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26921: LD_ADDR_VAR 0 17
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: LD_INT 3
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: LD_INT 3
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: LD_INT 2
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: LIST
26964: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26965: LD_ADDR_VAR 0 18
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 3
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 3
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27006: LD_ADDR_VAR 0 19
27010: PUSH
27011: LD_INT 3
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 3
27023: PUSH
27024: LD_INT 3
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 2
27033: PUSH
27034: LD_INT 3
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27046: LD_ADDR_VAR 0 20
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: LD_INT 3
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: LD_INT 3
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27087: LD_ADDR_VAR 0 21
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 3
27105: NEG
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 3
27116: NEG
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27131: LD_ADDR_VAR 0 22
27135: PUSH
27136: LD_INT 2
27138: NEG
27139: PUSH
27140: LD_INT 3
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 3
27150: NEG
27151: PUSH
27152: LD_INT 2
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 3
27162: NEG
27163: PUSH
27164: LD_INT 3
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: LIST
27176: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27177: LD_ADDR_VAR 0 23
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: LD_INT 3
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 4
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: LD_INT 3
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: LIST
27220: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27221: LD_ADDR_VAR 0 24
27225: PUSH
27226: LD_INT 3
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 3
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 4
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27262: LD_ADDR_VAR 0 25
27266: PUSH
27267: LD_INT 3
27269: PUSH
27270: LD_INT 3
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 4
27279: PUSH
27280: LD_INT 3
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 3
27289: PUSH
27290: LD_INT 4
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: LIST
27301: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27302: LD_ADDR_VAR 0 26
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: LD_INT 4
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: LD_INT 3
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27343: LD_ADDR_VAR 0 27
27347: PUSH
27348: LD_INT 3
27350: NEG
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 3
27361: NEG
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 4
27372: NEG
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: LIST
27386: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27387: LD_ADDR_VAR 0 28
27391: PUSH
27392: LD_INT 3
27394: NEG
27395: PUSH
27396: LD_INT 3
27398: NEG
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 3
27406: NEG
27407: PUSH
27408: LD_INT 4
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 4
27418: NEG
27419: PUSH
27420: LD_INT 3
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27433: LD_ADDR_VAR 0 29
27437: PUSH
27438: LD_INT 1
27440: NEG
27441: PUSH
27442: LD_INT 3
27444: NEG
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 3
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: LD_INT 4
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: LD_INT 4
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: LD_INT 3
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 5
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: LD_INT 5
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 4
27534: NEG
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: LD_INT 6
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: LD_INT 6
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: LD_INT 5
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27588: LD_ADDR_VAR 0 30
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 3
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 3
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 3
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 4
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 4
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 4
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 5
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 5
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 5
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 6
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 6
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27731: LD_ADDR_VAR 0 31
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 3
27748: PUSH
27749: LD_INT 3
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: LD_INT 3
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 4
27768: PUSH
27769: LD_INT 3
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 4
27778: PUSH
27779: LD_INT 4
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 3
27788: PUSH
27789: LD_INT 4
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 5
27798: PUSH
27799: LD_INT 4
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 5
27808: PUSH
27809: LD_INT 5
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 4
27818: PUSH
27819: LD_INT 5
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 6
27828: PUSH
27829: LD_INT 5
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 6
27838: PUSH
27839: LD_INT 6
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 5
27848: PUSH
27849: LD_INT 6
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27870: LD_ADDR_VAR 0 32
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: LD_INT 3
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: LD_INT 4
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: LD_INT 4
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: LD_INT 3
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 5
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: LD_INT 5
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: LD_INT 4
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 6
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 6
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 5
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28013: LD_ADDR_VAR 0 33
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 3
28031: NEG
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 3
28042: NEG
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 3
28054: NEG
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 4
28065: NEG
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 4
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 4
28088: NEG
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 5
28099: NEG
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 5
28110: NEG
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 5
28122: NEG
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 6
28133: NEG
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 6
28144: NEG
28145: PUSH
28146: LD_INT 1
28148: NEG
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28168: LD_ADDR_VAR 0 34
28172: PUSH
28173: LD_INT 2
28175: NEG
28176: PUSH
28177: LD_INT 3
28179: NEG
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 3
28187: NEG
28188: PUSH
28189: LD_INT 2
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 3
28199: NEG
28200: PUSH
28201: LD_INT 3
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 3
28211: NEG
28212: PUSH
28213: LD_INT 4
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 4
28223: NEG
28224: PUSH
28225: LD_INT 3
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 4
28235: NEG
28236: PUSH
28237: LD_INT 4
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 4
28247: NEG
28248: PUSH
28249: LD_INT 5
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 5
28259: NEG
28260: PUSH
28261: LD_INT 4
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 5
28271: NEG
28272: PUSH
28273: LD_INT 5
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 5
28283: NEG
28284: PUSH
28285: LD_INT 6
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 6
28295: NEG
28296: PUSH
28297: LD_INT 5
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 6
28307: NEG
28308: PUSH
28309: LD_INT 6
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28331: LD_ADDR_VAR 0 41
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 2
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: LD_INT 3
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28375: LD_ADDR_VAR 0 42
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 2
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 3
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28416: LD_ADDR_VAR 0 43
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 3
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28456: LD_ADDR_VAR 0 44
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: LD_INT 3
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: LD_INT 2
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28497: LD_ADDR_VAR 0 45
28501: PUSH
28502: LD_INT 2
28504: NEG
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: NEG
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 3
28526: NEG
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: LIST
28540: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28541: LD_ADDR_VAR 0 46
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: LD_INT 2
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: LD_INT 3
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 3
28572: NEG
28573: PUSH
28574: LD_INT 2
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28587: LD_ADDR_VAR 0 47
28591: PUSH
28592: LD_INT 2
28594: NEG
28595: PUSH
28596: LD_INT 3
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 1
28606: NEG
28607: PUSH
28608: LD_INT 3
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28620: LD_ADDR_VAR 0 48
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: LD_INT 2
28630: NEG
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 2
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28651: LD_ADDR_VAR 0 49
28655: PUSH
28656: LD_INT 3
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 3
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28680: LD_ADDR_VAR 0 50
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: LD_INT 3
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: LD_INT 3
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28709: LD_ADDR_VAR 0 51
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28740: LD_ADDR_VAR 0 52
28744: PUSH
28745: LD_INT 3
28747: NEG
28748: PUSH
28749: LD_INT 1
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 3
28759: NEG
28760: PUSH
28761: LD_INT 2
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28773: LD_ADDR_VAR 0 53
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: LD_INT 3
28784: NEG
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: LD_INT 3
28795: NEG
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: LD_INT 2
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28817: LD_ADDR_VAR 0 54
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 3
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 3
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: LIST
28857: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28858: LD_ADDR_VAR 0 55
28862: PUSH
28863: LD_INT 3
28865: PUSH
28866: LD_INT 2
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 3
28875: PUSH
28876: LD_INT 3
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: LD_INT 3
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28898: LD_ADDR_VAR 0 56
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: LD_INT 3
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: LD_INT 3
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28939: LD_ADDR_VAR 0 57
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 3
28957: NEG
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 3
28968: NEG
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28983: LD_ADDR_VAR 0 58
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: LD_INT 3
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 3
29002: NEG
29003: PUSH
29004: LD_INT 2
29006: NEG
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 3
29014: NEG
29015: PUSH
29016: LD_INT 3
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29029: LD_ADDR_VAR 0 59
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29073: LD_ADDR_VAR 0 60
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 2
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29114: LD_ADDR_VAR 0 61
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29154: LD_ADDR_VAR 0 62
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29195: LD_ADDR_VAR 0 63
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29239: LD_ADDR_VAR 0 64
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 2
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 2
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: NEG
29271: PUSH
29272: LD_INT 2
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: LIST
29284: ST_TO_ADDR
// end ; 2 :
29285: GO 32551
29287: LD_INT 2
29289: DOUBLE
29290: EQUAL
29291: IFTRUE 29295
29293: GO 32550
29295: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29296: LD_ADDR_VAR 0 29
29300: PUSH
29301: LD_INT 4
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 4
29313: PUSH
29314: LD_INT 1
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 5
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 5
29334: PUSH
29335: LD_INT 1
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 4
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 3
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 3
29375: PUSH
29376: LD_INT 2
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 5
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: PUSH
29397: LD_INT 3
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 4
29416: PUSH
29417: LD_INT 3
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 4
29426: PUSH
29427: LD_INT 4
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: LD_INT 4
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: LD_INT 3
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 2
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 4
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: LD_INT 4
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 4
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: LD_INT 3
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 4
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 5
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 5
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 4
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: LD_INT 5
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: NEG
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 3
29579: NEG
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 3
29590: NEG
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 2
29602: NEG
29603: PUSH
29604: LD_INT 0
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: NEG
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 3
29624: NEG
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 4
29635: NEG
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 4
29646: NEG
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 4
29658: NEG
29659: PUSH
29660: LD_INT 2
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 2
29670: NEG
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 4
29681: NEG
29682: PUSH
29683: LD_INT 4
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 4
29693: NEG
29694: PUSH
29695: LD_INT 5
29697: NEG
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 3
29705: NEG
29706: PUSH
29707: LD_INT 4
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 3
29717: NEG
29718: PUSH
29719: LD_INT 3
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 4
29729: NEG
29730: PUSH
29731: LD_INT 3
29733: NEG
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 5
29741: NEG
29742: PUSH
29743: LD_INT 4
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 5
29753: NEG
29754: PUSH
29755: LD_INT 5
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 3
29765: NEG
29766: PUSH
29767: LD_INT 5
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 5
29777: NEG
29778: PUSH
29779: LD_INT 3
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29834: LD_ADDR_VAR 0 30
29838: PUSH
29839: LD_INT 4
29841: PUSH
29842: LD_INT 4
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 4
29851: PUSH
29852: LD_INT 3
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 5
29861: PUSH
29862: LD_INT 4
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 5
29871: PUSH
29872: LD_INT 5
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 4
29881: PUSH
29882: LD_INT 5
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: LD_INT 4
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: LD_INT 3
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 5
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 3
29921: PUSH
29922: LD_INT 5
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: LD_INT 3
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 0
29941: PUSH
29942: LD_INT 2
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: LD_INT 3
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: LD_INT 4
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: LD_INT 4
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 3
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: LD_INT 4
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 2
30013: NEG
30014: PUSH
30015: LD_INT 2
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 4
30024: NEG
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 4
30035: NEG
30036: PUSH
30037: LD_INT 1
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 3
30047: NEG
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 3
30058: NEG
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 4
30069: NEG
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 5
30080: NEG
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 5
30091: NEG
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 5
30103: NEG
30104: PUSH
30105: LD_INT 2
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 3
30115: NEG
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 3
30126: NEG
30127: PUSH
30128: LD_INT 3
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 3
30138: NEG
30139: PUSH
30140: LD_INT 4
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 2
30150: NEG
30151: PUSH
30152: LD_INT 3
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 2
30162: NEG
30163: PUSH
30164: LD_INT 2
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 3
30174: NEG
30175: PUSH
30176: LD_INT 2
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 4
30186: NEG
30187: PUSH
30188: LD_INT 3
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 4
30198: NEG
30199: PUSH
30200: LD_INT 4
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: NEG
30211: PUSH
30212: LD_INT 4
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 4
30222: NEG
30223: PUSH
30224: LD_INT 2
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: LD_INT 4
30237: NEG
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: LD_INT 5
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 4
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 3
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 3
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: LD_INT 4
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: NEG
30302: PUSH
30303: LD_INT 5
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 2
30313: PUSH
30314: LD_INT 3
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 2
30324: NEG
30325: PUSH
30326: LD_INT 5
30328: NEG
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30381: LD_ADDR_VAR 0 31
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: LD_INT 4
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: LD_INT 4
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: LD_INT 5
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: LD_INT 5
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: PUSH
30440: LD_INT 4
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: LD_INT 3
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 2
30460: PUSH
30461: LD_INT 5
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: LD_INT 3
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 3
30481: NEG
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 3
30492: NEG
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 2
30504: NEG
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 2
30515: NEG
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 4
30537: NEG
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 4
30548: NEG
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 4
30560: NEG
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: NEG
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 4
30583: NEG
30584: PUSH
30585: LD_INT 4
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 4
30595: NEG
30596: PUSH
30597: LD_INT 5
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 3
30607: NEG
30608: PUSH
30609: LD_INT 4
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: NEG
30620: PUSH
30621: LD_INT 3
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 4
30631: NEG
30632: PUSH
30633: LD_INT 3
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 5
30643: NEG
30644: PUSH
30645: LD_INT 4
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 5
30655: NEG
30656: PUSH
30657: LD_INT 5
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 3
30667: NEG
30668: PUSH
30669: LD_INT 5
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 5
30679: NEG
30680: PUSH
30681: LD_INT 3
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: LD_INT 3
30694: NEG
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 4
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: LD_INT 3
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: LD_INT 3
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 4
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: LD_INT 4
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 4
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 4
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 5
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 5
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 4
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 3
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 5
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30931: LD_ADDR_VAR 0 32
30935: PUSH
30936: LD_INT 4
30938: NEG
30939: PUSH
30940: LD_INT 0
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 4
30949: NEG
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 3
30961: NEG
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: NEG
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 4
30983: NEG
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 5
30994: NEG
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 5
31005: NEG
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 5
31017: NEG
31018: PUSH
31019: LD_INT 2
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 3
31029: NEG
31030: PUSH
31031: LD_INT 2
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 3
31040: NEG
31041: PUSH
31042: LD_INT 3
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: NEG
31053: PUSH
31054: LD_INT 4
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 2
31064: NEG
31065: PUSH
31066: LD_INT 3
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 2
31076: NEG
31077: PUSH
31078: LD_INT 2
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 3
31088: NEG
31089: PUSH
31090: LD_INT 2
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 4
31100: NEG
31101: PUSH
31102: LD_INT 3
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 4
31112: NEG
31113: PUSH
31114: LD_INT 4
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: LD_INT 4
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 4
31136: NEG
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 4
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 5
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 4
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 3
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: LD_INT 3
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 4
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: LD_INT 5
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: LD_INT 3
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: LD_INT 5
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 3
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 4
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 4
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 3
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 2
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 4
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 4
31343: PUSH
31344: LD_INT 4
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 4
31353: PUSH
31354: LD_INT 3
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 5
31363: PUSH
31364: LD_INT 4
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 5
31373: PUSH
31374: LD_INT 5
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 4
31383: PUSH
31384: LD_INT 5
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 3
31393: PUSH
31394: LD_INT 4
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 3
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 5
31413: PUSH
31414: LD_INT 3
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 3
31423: PUSH
31424: LD_INT 5
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31478: LD_ADDR_VAR 0 33
31482: PUSH
31483: LD_INT 4
31485: NEG
31486: PUSH
31487: LD_INT 4
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 4
31497: NEG
31498: PUSH
31499: LD_INT 5
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 3
31509: NEG
31510: PUSH
31511: LD_INT 4
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 3
31521: NEG
31522: PUSH
31523: LD_INT 3
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 4
31533: NEG
31534: PUSH
31535: LD_INT 3
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 5
31545: NEG
31546: PUSH
31547: LD_INT 4
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 5
31557: NEG
31558: PUSH
31559: LD_INT 5
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 3
31569: NEG
31570: PUSH
31571: LD_INT 5
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 5
31581: NEG
31582: PUSH
31583: LD_INT 3
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 0
31593: PUSH
31594: LD_INT 3
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 4
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 3
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: LD_INT 3
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: LD_INT 4
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: LD_INT 4
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 4
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 4
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 5
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 5
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 4
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 5
31778: PUSH
31779: LD_INT 2
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 3
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 3
31798: PUSH
31799: LD_INT 2
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 4
31808: PUSH
31809: LD_INT 3
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 4
31818: PUSH
31819: LD_INT 4
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 3
31828: PUSH
31829: LD_INT 4
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 2
31838: PUSH
31839: LD_INT 3
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 2
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 4
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: LD_INT 4
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 4
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 5
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 5
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 4
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 3
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: LD_INT 5
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32016: LD_ADDR_VAR 0 34
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: LD_INT 4
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: LD_INT 5
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 4
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: LD_INT 3
32059: NEG
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: LD_INT 3
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: LD_INT 4
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: LD_INT 5
32094: NEG
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 2
32102: PUSH
32103: LD_INT 3
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 2
32113: NEG
32114: PUSH
32115: LD_INT 5
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 4
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 4
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: LD_INT 1
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 1
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 4
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: LD_INT 4
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 4
32228: PUSH
32229: LD_INT 3
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 5
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 5
32248: PUSH
32249: LD_INT 5
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 4
32258: PUSH
32259: LD_INT 5
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 3
32268: PUSH
32269: LD_INT 4
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: LD_INT 3
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 5
32288: PUSH
32289: LD_INT 3
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: LD_INT 5
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: LD_INT 3
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: LD_INT 2
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 3
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 4
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 4
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: LD_INT 3
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: LD_INT 2
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 4
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: LD_INT 2
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 4
32401: NEG
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 4
32412: NEG
32413: PUSH
32414: LD_INT 1
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 3
32435: NEG
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 4
32446: NEG
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 5
32457: NEG
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 5
32468: NEG
32469: PUSH
32470: LD_INT 1
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 5
32480: NEG
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 3
32492: NEG
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: ST_TO_ADDR
// end ; end ;
32548: GO 32551
32550: POP
// case btype of b_depot , b_warehouse :
32551: LD_VAR 0 1
32555: PUSH
32556: LD_INT 0
32558: DOUBLE
32559: EQUAL
32560: IFTRUE 32570
32562: LD_INT 1
32564: DOUBLE
32565: EQUAL
32566: IFTRUE 32570
32568: GO 32771
32570: POP
// case nation of nation_american :
32571: LD_VAR 0 5
32575: PUSH
32576: LD_INT 1
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32584
32582: GO 32640
32584: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32585: LD_ADDR_VAR 0 9
32589: PUSH
32590: LD_VAR 0 11
32594: PUSH
32595: LD_VAR 0 12
32599: PUSH
32600: LD_VAR 0 13
32604: PUSH
32605: LD_VAR 0 14
32609: PUSH
32610: LD_VAR 0 15
32614: PUSH
32615: LD_VAR 0 16
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: PUSH
32628: LD_VAR 0 4
32632: PUSH
32633: LD_INT 1
32635: PLUS
32636: ARRAY
32637: ST_TO_ADDR
32638: GO 32769
32640: LD_INT 2
32642: DOUBLE
32643: EQUAL
32644: IFTRUE 32648
32646: GO 32704
32648: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32649: LD_ADDR_VAR 0 9
32653: PUSH
32654: LD_VAR 0 17
32658: PUSH
32659: LD_VAR 0 18
32663: PUSH
32664: LD_VAR 0 19
32668: PUSH
32669: LD_VAR 0 20
32673: PUSH
32674: LD_VAR 0 21
32678: PUSH
32679: LD_VAR 0 22
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: PUSH
32692: LD_VAR 0 4
32696: PUSH
32697: LD_INT 1
32699: PLUS
32700: ARRAY
32701: ST_TO_ADDR
32702: GO 32769
32704: LD_INT 3
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32768
32712: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32713: LD_ADDR_VAR 0 9
32717: PUSH
32718: LD_VAR 0 23
32722: PUSH
32723: LD_VAR 0 24
32727: PUSH
32728: LD_VAR 0 25
32732: PUSH
32733: LD_VAR 0 26
32737: PUSH
32738: LD_VAR 0 27
32742: PUSH
32743: LD_VAR 0 28
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: PUSH
32756: LD_VAR 0 4
32760: PUSH
32761: LD_INT 1
32763: PLUS
32764: ARRAY
32765: ST_TO_ADDR
32766: GO 32769
32768: POP
32769: GO 33324
32771: LD_INT 2
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32785
32777: LD_INT 3
32779: DOUBLE
32780: EQUAL
32781: IFTRUE 32785
32783: GO 32841
32785: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32786: LD_ADDR_VAR 0 9
32790: PUSH
32791: LD_VAR 0 29
32795: PUSH
32796: LD_VAR 0 30
32800: PUSH
32801: LD_VAR 0 31
32805: PUSH
32806: LD_VAR 0 32
32810: PUSH
32811: LD_VAR 0 33
32815: PUSH
32816: LD_VAR 0 34
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: PUSH
32829: LD_VAR 0 4
32833: PUSH
32834: LD_INT 1
32836: PLUS
32837: ARRAY
32838: ST_TO_ADDR
32839: GO 33324
32841: LD_INT 16
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32903
32847: LD_INT 17
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32903
32853: LD_INT 18
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32903
32859: LD_INT 19
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32903
32865: LD_INT 22
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32903
32871: LD_INT 20
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32903
32877: LD_INT 21
32879: DOUBLE
32880: EQUAL
32881: IFTRUE 32903
32883: LD_INT 23
32885: DOUBLE
32886: EQUAL
32887: IFTRUE 32903
32889: LD_INT 24
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32903
32895: LD_INT 25
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32903
32901: GO 32959
32903: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32904: LD_ADDR_VAR 0 9
32908: PUSH
32909: LD_VAR 0 35
32913: PUSH
32914: LD_VAR 0 36
32918: PUSH
32919: LD_VAR 0 37
32923: PUSH
32924: LD_VAR 0 38
32928: PUSH
32929: LD_VAR 0 39
32933: PUSH
32934: LD_VAR 0 40
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: PUSH
32947: LD_VAR 0 4
32951: PUSH
32952: LD_INT 1
32954: PLUS
32955: ARRAY
32956: ST_TO_ADDR
32957: GO 33324
32959: LD_INT 6
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 33015
32965: LD_INT 7
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 33015
32971: LD_INT 8
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 33015
32977: LD_INT 13
32979: DOUBLE
32980: EQUAL
32981: IFTRUE 33015
32983: LD_INT 12
32985: DOUBLE
32986: EQUAL
32987: IFTRUE 33015
32989: LD_INT 15
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 33015
32995: LD_INT 11
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33015
33001: LD_INT 14
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33015
33007: LD_INT 10
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33071
33015: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33016: LD_ADDR_VAR 0 9
33020: PUSH
33021: LD_VAR 0 41
33025: PUSH
33026: LD_VAR 0 42
33030: PUSH
33031: LD_VAR 0 43
33035: PUSH
33036: LD_VAR 0 44
33040: PUSH
33041: LD_VAR 0 45
33045: PUSH
33046: LD_VAR 0 46
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: PUSH
33059: LD_VAR 0 4
33063: PUSH
33064: LD_INT 1
33066: PLUS
33067: ARRAY
33068: ST_TO_ADDR
33069: GO 33324
33071: LD_INT 36
33073: DOUBLE
33074: EQUAL
33075: IFTRUE 33079
33077: GO 33135
33079: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33080: LD_ADDR_VAR 0 9
33084: PUSH
33085: LD_VAR 0 47
33089: PUSH
33090: LD_VAR 0 48
33094: PUSH
33095: LD_VAR 0 49
33099: PUSH
33100: LD_VAR 0 50
33104: PUSH
33105: LD_VAR 0 51
33109: PUSH
33110: LD_VAR 0 52
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: PUSH
33123: LD_VAR 0 4
33127: PUSH
33128: LD_INT 1
33130: PLUS
33131: ARRAY
33132: ST_TO_ADDR
33133: GO 33324
33135: LD_INT 4
33137: DOUBLE
33138: EQUAL
33139: IFTRUE 33161
33141: LD_INT 5
33143: DOUBLE
33144: EQUAL
33145: IFTRUE 33161
33147: LD_INT 34
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33161
33153: LD_INT 37
33155: DOUBLE
33156: EQUAL
33157: IFTRUE 33161
33159: GO 33217
33161: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33162: LD_ADDR_VAR 0 9
33166: PUSH
33167: LD_VAR 0 53
33171: PUSH
33172: LD_VAR 0 54
33176: PUSH
33177: LD_VAR 0 55
33181: PUSH
33182: LD_VAR 0 56
33186: PUSH
33187: LD_VAR 0 57
33191: PUSH
33192: LD_VAR 0 58
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: PUSH
33205: LD_VAR 0 4
33209: PUSH
33210: LD_INT 1
33212: PLUS
33213: ARRAY
33214: ST_TO_ADDR
33215: GO 33324
33217: LD_INT 31
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33267
33223: LD_INT 32
33225: DOUBLE
33226: EQUAL
33227: IFTRUE 33267
33229: LD_INT 33
33231: DOUBLE
33232: EQUAL
33233: IFTRUE 33267
33235: LD_INT 27
33237: DOUBLE
33238: EQUAL
33239: IFTRUE 33267
33241: LD_INT 26
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33267
33247: LD_INT 28
33249: DOUBLE
33250: EQUAL
33251: IFTRUE 33267
33253: LD_INT 29
33255: DOUBLE
33256: EQUAL
33257: IFTRUE 33267
33259: LD_INT 30
33261: DOUBLE
33262: EQUAL
33263: IFTRUE 33267
33265: GO 33323
33267: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33268: LD_ADDR_VAR 0 9
33272: PUSH
33273: LD_VAR 0 59
33277: PUSH
33278: LD_VAR 0 60
33282: PUSH
33283: LD_VAR 0 61
33287: PUSH
33288: LD_VAR 0 62
33292: PUSH
33293: LD_VAR 0 63
33297: PUSH
33298: LD_VAR 0 64
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: PUSH
33311: LD_VAR 0 4
33315: PUSH
33316: LD_INT 1
33318: PLUS
33319: ARRAY
33320: ST_TO_ADDR
33321: GO 33324
33323: POP
// temp_list2 = [ ] ;
33324: LD_ADDR_VAR 0 10
33328: PUSH
33329: EMPTY
33330: ST_TO_ADDR
// for i in temp_list do
33331: LD_ADDR_VAR 0 8
33335: PUSH
33336: LD_VAR 0 9
33340: PUSH
33341: FOR_IN
33342: IFFALSE 33394
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33344: LD_ADDR_VAR 0 10
33348: PUSH
33349: LD_VAR 0 10
33353: PUSH
33354: LD_VAR 0 8
33358: PUSH
33359: LD_INT 1
33361: ARRAY
33362: PUSH
33363: LD_VAR 0 2
33367: PLUS
33368: PUSH
33369: LD_VAR 0 8
33373: PUSH
33374: LD_INT 2
33376: ARRAY
33377: PUSH
33378: LD_VAR 0 3
33382: PLUS
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: EMPTY
33389: LIST
33390: ADD
33391: ST_TO_ADDR
33392: GO 33341
33394: POP
33395: POP
// result = temp_list2 ;
33396: LD_ADDR_VAR 0 7
33400: PUSH
33401: LD_VAR 0 10
33405: ST_TO_ADDR
// end ;
33406: LD_VAR 0 7
33410: RET
// export function EnemyInRange ( unit , dist ) ; begin
33411: LD_INT 0
33413: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33414: LD_ADDR_VAR 0 3
33418: PUSH
33419: LD_VAR 0 1
33423: PPUSH
33424: CALL_OW 255
33428: PPUSH
33429: LD_VAR 0 1
33433: PPUSH
33434: CALL_OW 250
33438: PPUSH
33439: LD_VAR 0 1
33443: PPUSH
33444: CALL_OW 251
33448: PPUSH
33449: LD_VAR 0 2
33453: PPUSH
33454: CALL 6784 0 4
33458: PUSH
33459: LD_INT 4
33461: ARRAY
33462: ST_TO_ADDR
// end ;
33463: LD_VAR 0 3
33467: RET
// export function PlayerSeeMe ( unit ) ; begin
33468: LD_INT 0
33470: PPUSH
// result := See ( your_side , unit ) ;
33471: LD_ADDR_VAR 0 2
33475: PUSH
33476: LD_OWVAR 2
33480: PPUSH
33481: LD_VAR 0 1
33485: PPUSH
33486: CALL_OW 292
33490: ST_TO_ADDR
// end ;
33491: LD_VAR 0 2
33495: RET
// export function ReverseDir ( unit ) ; begin
33496: LD_INT 0
33498: PPUSH
// if not unit then
33499: LD_VAR 0 1
33503: NOT
33504: IFFALSE 33508
// exit ;
33506: GO 33531
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33508: LD_ADDR_VAR 0 2
33512: PUSH
33513: LD_VAR 0 1
33517: PPUSH
33518: CALL_OW 254
33522: PUSH
33523: LD_INT 3
33525: PLUS
33526: PUSH
33527: LD_INT 6
33529: MOD
33530: ST_TO_ADDR
// end ;
33531: LD_VAR 0 2
33535: RET
// export function ReverseArray ( array ) ; var i ; begin
33536: LD_INT 0
33538: PPUSH
33539: PPUSH
// if not array then
33540: LD_VAR 0 1
33544: NOT
33545: IFFALSE 33549
// exit ;
33547: GO 33604
// result := [ ] ;
33549: LD_ADDR_VAR 0 2
33553: PUSH
33554: EMPTY
33555: ST_TO_ADDR
// for i := array downto 1 do
33556: LD_ADDR_VAR 0 3
33560: PUSH
33561: DOUBLE
33562: LD_VAR 0 1
33566: INC
33567: ST_TO_ADDR
33568: LD_INT 1
33570: PUSH
33571: FOR_DOWNTO
33572: IFFALSE 33602
// result := Join ( result , array [ i ] ) ;
33574: LD_ADDR_VAR 0 2
33578: PUSH
33579: LD_VAR 0 2
33583: PPUSH
33584: LD_VAR 0 1
33588: PUSH
33589: LD_VAR 0 3
33593: ARRAY
33594: PPUSH
33595: CALL 38269 0 2
33599: ST_TO_ADDR
33600: GO 33571
33602: POP
33603: POP
// end ;
33604: LD_VAR 0 2
33608: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33609: LD_INT 0
33611: PPUSH
33612: PPUSH
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
// if not unit or not hexes then
33617: LD_VAR 0 1
33621: NOT
33622: PUSH
33623: LD_VAR 0 2
33627: NOT
33628: OR
33629: IFFALSE 33633
// exit ;
33631: GO 33756
// dist := 9999 ;
33633: LD_ADDR_VAR 0 5
33637: PUSH
33638: LD_INT 9999
33640: ST_TO_ADDR
// for i = 1 to hexes do
33641: LD_ADDR_VAR 0 4
33645: PUSH
33646: DOUBLE
33647: LD_INT 1
33649: DEC
33650: ST_TO_ADDR
33651: LD_VAR 0 2
33655: PUSH
33656: FOR_TO
33657: IFFALSE 33744
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33659: LD_ADDR_VAR 0 6
33663: PUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: LD_VAR 0 2
33673: PUSH
33674: LD_VAR 0 4
33678: ARRAY
33679: PUSH
33680: LD_INT 1
33682: ARRAY
33683: PPUSH
33684: LD_VAR 0 2
33688: PUSH
33689: LD_VAR 0 4
33693: ARRAY
33694: PUSH
33695: LD_INT 2
33697: ARRAY
33698: PPUSH
33699: CALL_OW 297
33703: ST_TO_ADDR
// if tdist < dist then
33704: LD_VAR 0 6
33708: PUSH
33709: LD_VAR 0 5
33713: LESS
33714: IFFALSE 33742
// begin hex := hexes [ i ] ;
33716: LD_ADDR_VAR 0 8
33720: PUSH
33721: LD_VAR 0 2
33725: PUSH
33726: LD_VAR 0 4
33730: ARRAY
33731: ST_TO_ADDR
// dist := tdist ;
33732: LD_ADDR_VAR 0 5
33736: PUSH
33737: LD_VAR 0 6
33741: ST_TO_ADDR
// end ; end ;
33742: GO 33656
33744: POP
33745: POP
// result := hex ;
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_VAR 0 8
33755: ST_TO_ADDR
// end ;
33756: LD_VAR 0 3
33760: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33761: LD_INT 0
33763: PPUSH
33764: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33765: LD_VAR 0 1
33769: NOT
33770: PUSH
33771: LD_VAR 0 1
33775: PUSH
33776: LD_INT 21
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 23
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PPUSH
33800: CALL_OW 69
33804: IN
33805: NOT
33806: OR
33807: IFFALSE 33811
// exit ;
33809: GO 33858
// for i = 1 to 3 do
33811: LD_ADDR_VAR 0 3
33815: PUSH
33816: DOUBLE
33817: LD_INT 1
33819: DEC
33820: ST_TO_ADDR
33821: LD_INT 3
33823: PUSH
33824: FOR_TO
33825: IFFALSE 33856
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33827: LD_VAR 0 1
33831: PPUSH
33832: CALL_OW 250
33836: PPUSH
33837: LD_VAR 0 1
33841: PPUSH
33842: CALL_OW 251
33846: PPUSH
33847: LD_INT 1
33849: PPUSH
33850: CALL_OW 453
33854: GO 33824
33856: POP
33857: POP
// end ;
33858: LD_VAR 0 2
33862: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33863: LD_INT 0
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
// if not unit or not enemy_unit then
33871: LD_VAR 0 1
33875: NOT
33876: PUSH
33877: LD_VAR 0 2
33881: NOT
33882: OR
33883: IFFALSE 33887
// exit ;
33885: GO 34354
// if GetLives ( i ) < 250 then
33887: LD_VAR 0 4
33891: PPUSH
33892: CALL_OW 256
33896: PUSH
33897: LD_INT 250
33899: LESS
33900: IFFALSE 33913
// begin ComAutodestruct ( i ) ;
33902: LD_VAR 0 4
33906: PPUSH
33907: CALL 33761 0 1
// exit ;
33911: GO 34354
// end ; x := GetX ( enemy_unit ) ;
33913: LD_ADDR_VAR 0 7
33917: PUSH
33918: LD_VAR 0 2
33922: PPUSH
33923: CALL_OW 250
33927: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33928: LD_ADDR_VAR 0 8
33932: PUSH
33933: LD_VAR 0 2
33937: PPUSH
33938: CALL_OW 251
33942: ST_TO_ADDR
// if not x or not y then
33943: LD_VAR 0 7
33947: NOT
33948: PUSH
33949: LD_VAR 0 8
33953: NOT
33954: OR
33955: IFFALSE 33959
// exit ;
33957: GO 34354
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33959: LD_ADDR_VAR 0 6
33963: PUSH
33964: LD_VAR 0 7
33968: PPUSH
33969: LD_INT 0
33971: PPUSH
33972: LD_INT 4
33974: PPUSH
33975: CALL_OW 272
33979: PUSH
33980: LD_VAR 0 8
33984: PPUSH
33985: LD_INT 0
33987: PPUSH
33988: LD_INT 4
33990: PPUSH
33991: CALL_OW 273
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_VAR 0 7
34004: PPUSH
34005: LD_INT 1
34007: PPUSH
34008: LD_INT 4
34010: PPUSH
34011: CALL_OW 272
34015: PUSH
34016: LD_VAR 0 8
34020: PPUSH
34021: LD_INT 1
34023: PPUSH
34024: LD_INT 4
34026: PPUSH
34027: CALL_OW 273
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_VAR 0 7
34040: PPUSH
34041: LD_INT 2
34043: PPUSH
34044: LD_INT 4
34046: PPUSH
34047: CALL_OW 272
34051: PUSH
34052: LD_VAR 0 8
34056: PPUSH
34057: LD_INT 2
34059: PPUSH
34060: LD_INT 4
34062: PPUSH
34063: CALL_OW 273
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_VAR 0 7
34076: PPUSH
34077: LD_INT 3
34079: PPUSH
34080: LD_INT 4
34082: PPUSH
34083: CALL_OW 272
34087: PUSH
34088: LD_VAR 0 8
34092: PPUSH
34093: LD_INT 3
34095: PPUSH
34096: LD_INT 4
34098: PPUSH
34099: CALL_OW 273
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_VAR 0 7
34112: PPUSH
34113: LD_INT 4
34115: PPUSH
34116: LD_INT 4
34118: PPUSH
34119: CALL_OW 272
34123: PUSH
34124: LD_VAR 0 8
34128: PPUSH
34129: LD_INT 4
34131: PPUSH
34132: LD_INT 4
34134: PPUSH
34135: CALL_OW 273
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_VAR 0 7
34148: PPUSH
34149: LD_INT 5
34151: PPUSH
34152: LD_INT 4
34154: PPUSH
34155: CALL_OW 272
34159: PUSH
34160: LD_VAR 0 8
34164: PPUSH
34165: LD_INT 5
34167: PPUSH
34168: LD_INT 4
34170: PPUSH
34171: CALL_OW 273
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
// for i = tmp downto 1 do
34188: LD_ADDR_VAR 0 4
34192: PUSH
34193: DOUBLE
34194: LD_VAR 0 6
34198: INC
34199: ST_TO_ADDR
34200: LD_INT 1
34202: PUSH
34203: FOR_DOWNTO
34204: IFFALSE 34305
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34206: LD_VAR 0 6
34210: PUSH
34211: LD_VAR 0 4
34215: ARRAY
34216: PUSH
34217: LD_INT 1
34219: ARRAY
34220: PPUSH
34221: LD_VAR 0 6
34225: PUSH
34226: LD_VAR 0 4
34230: ARRAY
34231: PUSH
34232: LD_INT 2
34234: ARRAY
34235: PPUSH
34236: CALL_OW 488
34240: NOT
34241: PUSH
34242: LD_VAR 0 6
34246: PUSH
34247: LD_VAR 0 4
34251: ARRAY
34252: PUSH
34253: LD_INT 1
34255: ARRAY
34256: PPUSH
34257: LD_VAR 0 6
34261: PUSH
34262: LD_VAR 0 4
34266: ARRAY
34267: PUSH
34268: LD_INT 2
34270: ARRAY
34271: PPUSH
34272: CALL_OW 428
34276: PUSH
34277: LD_INT 0
34279: NONEQUAL
34280: OR
34281: IFFALSE 34303
// tmp := Delete ( tmp , i ) ;
34283: LD_ADDR_VAR 0 6
34287: PUSH
34288: LD_VAR 0 6
34292: PPUSH
34293: LD_VAR 0 4
34297: PPUSH
34298: CALL_OW 3
34302: ST_TO_ADDR
34303: GO 34203
34305: POP
34306: POP
// j := GetClosestHex ( unit , tmp ) ;
34307: LD_ADDR_VAR 0 5
34311: PUSH
34312: LD_VAR 0 1
34316: PPUSH
34317: LD_VAR 0 6
34321: PPUSH
34322: CALL 33609 0 2
34326: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34327: LD_VAR 0 1
34331: PPUSH
34332: LD_VAR 0 5
34336: PUSH
34337: LD_INT 1
34339: ARRAY
34340: PPUSH
34341: LD_VAR 0 5
34345: PUSH
34346: LD_INT 2
34348: ARRAY
34349: PPUSH
34350: CALL_OW 111
// end ;
34354: LD_VAR 0 3
34358: RET
// export function PrepareApemanSoldier ( ) ; begin
34359: LD_INT 0
34361: PPUSH
// uc_nation := 0 ;
34362: LD_ADDR_OWVAR 21
34366: PUSH
34367: LD_INT 0
34369: ST_TO_ADDR
// hc_sex := sex_male ;
34370: LD_ADDR_OWVAR 27
34374: PUSH
34375: LD_INT 1
34377: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34378: LD_ADDR_OWVAR 28
34382: PUSH
34383: LD_INT 15
34385: ST_TO_ADDR
// hc_gallery :=  ;
34386: LD_ADDR_OWVAR 33
34390: PUSH
34391: LD_STRING 
34393: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34394: LD_ADDR_OWVAR 31
34398: PUSH
34399: LD_INT 0
34401: PPUSH
34402: LD_INT 3
34404: PPUSH
34405: CALL_OW 12
34409: PUSH
34410: LD_INT 0
34412: PPUSH
34413: LD_INT 3
34415: PPUSH
34416: CALL_OW 12
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: ST_TO_ADDR
// end ;
34433: LD_VAR 0 1
34437: RET
// export function PrepareApemanEngineer ( ) ; begin
34438: LD_INT 0
34440: PPUSH
// uc_nation := 0 ;
34441: LD_ADDR_OWVAR 21
34445: PUSH
34446: LD_INT 0
34448: ST_TO_ADDR
// hc_sex := sex_male ;
34449: LD_ADDR_OWVAR 27
34453: PUSH
34454: LD_INT 1
34456: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34457: LD_ADDR_OWVAR 28
34461: PUSH
34462: LD_INT 16
34464: ST_TO_ADDR
// hc_gallery :=  ;
34465: LD_ADDR_OWVAR 33
34469: PUSH
34470: LD_STRING 
34472: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34473: LD_ADDR_OWVAR 31
34477: PUSH
34478: LD_INT 0
34480: PPUSH
34481: LD_INT 3
34483: PPUSH
34484: CALL_OW 12
34488: PUSH
34489: LD_INT 0
34491: PPUSH
34492: LD_INT 3
34494: PPUSH
34495: CALL_OW 12
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: ST_TO_ADDR
// end ;
34512: LD_VAR 0 1
34516: RET
// export function PrepareApeman ( agressivity ) ; begin
34517: LD_INT 0
34519: PPUSH
// uc_side := 0 ;
34520: LD_ADDR_OWVAR 20
34524: PUSH
34525: LD_INT 0
34527: ST_TO_ADDR
// uc_nation := 0 ;
34528: LD_ADDR_OWVAR 21
34532: PUSH
34533: LD_INT 0
34535: ST_TO_ADDR
// hc_sex := sex_male ;
34536: LD_ADDR_OWVAR 27
34540: PUSH
34541: LD_INT 1
34543: ST_TO_ADDR
// hc_class := class_apeman ;
34544: LD_ADDR_OWVAR 28
34548: PUSH
34549: LD_INT 12
34551: ST_TO_ADDR
// hc_gallery :=  ;
34552: LD_ADDR_OWVAR 33
34556: PUSH
34557: LD_STRING 
34559: ST_TO_ADDR
// if agressivity = 0 then
34560: LD_VAR 0 1
34564: PUSH
34565: LD_INT 0
34567: EQUAL
34568: IFFALSE 34580
// hc_agressivity := 0 else
34570: LD_ADDR_OWVAR 35
34574: PUSH
34575: LD_INT 0
34577: ST_TO_ADDR
34578: GO 34601
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34580: LD_ADDR_OWVAR 35
34584: PUSH
34585: LD_VAR 0 1
34589: NEG
34590: PPUSH
34591: LD_VAR 0 1
34595: PPUSH
34596: CALL_OW 12
34600: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34601: LD_ADDR_OWVAR 31
34605: PUSH
34606: LD_INT 0
34608: PPUSH
34609: LD_INT 3
34611: PPUSH
34612: CALL_OW 12
34616: PUSH
34617: LD_INT 0
34619: PPUSH
34620: LD_INT 3
34622: PPUSH
34623: CALL_OW 12
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: ST_TO_ADDR
// end ;
34640: LD_VAR 0 2
34644: RET
// export function PrepareTiger ( agressivity ) ; begin
34645: LD_INT 0
34647: PPUSH
// uc_side := 0 ;
34648: LD_ADDR_OWVAR 20
34652: PUSH
34653: LD_INT 0
34655: ST_TO_ADDR
// uc_nation := 0 ;
34656: LD_ADDR_OWVAR 21
34660: PUSH
34661: LD_INT 0
34663: ST_TO_ADDR
// hc_class := class_tiger ;
34664: LD_ADDR_OWVAR 28
34668: PUSH
34669: LD_INT 14
34671: ST_TO_ADDR
// hc_gallery :=  ;
34672: LD_ADDR_OWVAR 33
34676: PUSH
34677: LD_STRING 
34679: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34680: LD_ADDR_OWVAR 35
34684: PUSH
34685: LD_VAR 0 1
34689: NEG
34690: PPUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 12
34700: ST_TO_ADDR
// end ;
34701: LD_VAR 0 2
34705: RET
// export function PrepareEnchidna ( ) ; begin
34706: LD_INT 0
34708: PPUSH
// uc_side := 0 ;
34709: LD_ADDR_OWVAR 20
34713: PUSH
34714: LD_INT 0
34716: ST_TO_ADDR
// uc_nation := 0 ;
34717: LD_ADDR_OWVAR 21
34721: PUSH
34722: LD_INT 0
34724: ST_TO_ADDR
// hc_class := class_baggie ;
34725: LD_ADDR_OWVAR 28
34729: PUSH
34730: LD_INT 13
34732: ST_TO_ADDR
// hc_gallery :=  ;
34733: LD_ADDR_OWVAR 33
34737: PUSH
34738: LD_STRING 
34740: ST_TO_ADDR
// end ;
34741: LD_VAR 0 1
34745: RET
// export function PrepareFrog ( ) ; begin
34746: LD_INT 0
34748: PPUSH
// uc_side := 0 ;
34749: LD_ADDR_OWVAR 20
34753: PUSH
34754: LD_INT 0
34756: ST_TO_ADDR
// uc_nation := 0 ;
34757: LD_ADDR_OWVAR 21
34761: PUSH
34762: LD_INT 0
34764: ST_TO_ADDR
// hc_class := class_frog ;
34765: LD_ADDR_OWVAR 28
34769: PUSH
34770: LD_INT 19
34772: ST_TO_ADDR
// hc_gallery :=  ;
34773: LD_ADDR_OWVAR 33
34777: PUSH
34778: LD_STRING 
34780: ST_TO_ADDR
// end ;
34781: LD_VAR 0 1
34785: RET
// export function PrepareFish ( ) ; begin
34786: LD_INT 0
34788: PPUSH
// uc_side := 0 ;
34789: LD_ADDR_OWVAR 20
34793: PUSH
34794: LD_INT 0
34796: ST_TO_ADDR
// uc_nation := 0 ;
34797: LD_ADDR_OWVAR 21
34801: PUSH
34802: LD_INT 0
34804: ST_TO_ADDR
// hc_class := class_fish ;
34805: LD_ADDR_OWVAR 28
34809: PUSH
34810: LD_INT 20
34812: ST_TO_ADDR
// hc_gallery :=  ;
34813: LD_ADDR_OWVAR 33
34817: PUSH
34818: LD_STRING 
34820: ST_TO_ADDR
// end ;
34821: LD_VAR 0 1
34825: RET
// export function PrepareBird ( ) ; begin
34826: LD_INT 0
34828: PPUSH
// uc_side := 0 ;
34829: LD_ADDR_OWVAR 20
34833: PUSH
34834: LD_INT 0
34836: ST_TO_ADDR
// uc_nation := 0 ;
34837: LD_ADDR_OWVAR 21
34841: PUSH
34842: LD_INT 0
34844: ST_TO_ADDR
// hc_class := class_phororhacos ;
34845: LD_ADDR_OWVAR 28
34849: PUSH
34850: LD_INT 18
34852: ST_TO_ADDR
// hc_gallery :=  ;
34853: LD_ADDR_OWVAR 33
34857: PUSH
34858: LD_STRING 
34860: ST_TO_ADDR
// end ;
34861: LD_VAR 0 1
34865: RET
// export function PrepareHorse ( ) ; begin
34866: LD_INT 0
34868: PPUSH
// uc_side := 0 ;
34869: LD_ADDR_OWVAR 20
34873: PUSH
34874: LD_INT 0
34876: ST_TO_ADDR
// uc_nation := 0 ;
34877: LD_ADDR_OWVAR 21
34881: PUSH
34882: LD_INT 0
34884: ST_TO_ADDR
// hc_class := class_horse ;
34885: LD_ADDR_OWVAR 28
34889: PUSH
34890: LD_INT 21
34892: ST_TO_ADDR
// hc_gallery :=  ;
34893: LD_ADDR_OWVAR 33
34897: PUSH
34898: LD_STRING 
34900: ST_TO_ADDR
// end ;
34901: LD_VAR 0 1
34905: RET
// export function PrepareMastodont ( ) ; begin
34906: LD_INT 0
34908: PPUSH
// uc_side := 0 ;
34909: LD_ADDR_OWVAR 20
34913: PUSH
34914: LD_INT 0
34916: ST_TO_ADDR
// uc_nation := 0 ;
34917: LD_ADDR_OWVAR 21
34921: PUSH
34922: LD_INT 0
34924: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34925: LD_ADDR_OWVAR 37
34929: PUSH
34930: LD_INT 31
34932: ST_TO_ADDR
// vc_control := control_rider ;
34933: LD_ADDR_OWVAR 38
34937: PUSH
34938: LD_INT 4
34940: ST_TO_ADDR
// end ;
34941: LD_VAR 0 1
34945: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34946: LD_INT 0
34948: PPUSH
34949: PPUSH
34950: PPUSH
// uc_side = 0 ;
34951: LD_ADDR_OWVAR 20
34955: PUSH
34956: LD_INT 0
34958: ST_TO_ADDR
// uc_nation = 0 ;
34959: LD_ADDR_OWVAR 21
34963: PUSH
34964: LD_INT 0
34966: ST_TO_ADDR
// InitHc_All ( ) ;
34967: CALL_OW 584
// InitVc ;
34971: CALL_OW 20
// if mastodonts then
34975: LD_VAR 0 6
34979: IFFALSE 35046
// for i = 1 to mastodonts do
34981: LD_ADDR_VAR 0 11
34985: PUSH
34986: DOUBLE
34987: LD_INT 1
34989: DEC
34990: ST_TO_ADDR
34991: LD_VAR 0 6
34995: PUSH
34996: FOR_TO
34997: IFFALSE 35044
// begin vc_chassis := 31 ;
34999: LD_ADDR_OWVAR 37
35003: PUSH
35004: LD_INT 31
35006: ST_TO_ADDR
// vc_control := control_rider ;
35007: LD_ADDR_OWVAR 38
35011: PUSH
35012: LD_INT 4
35014: ST_TO_ADDR
// animal := CreateVehicle ;
35015: LD_ADDR_VAR 0 12
35019: PUSH
35020: CALL_OW 45
35024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35025: LD_VAR 0 12
35029: PPUSH
35030: LD_VAR 0 8
35034: PPUSH
35035: LD_INT 0
35037: PPUSH
35038: CALL 37174 0 3
// end ;
35042: GO 34996
35044: POP
35045: POP
// if horses then
35046: LD_VAR 0 5
35050: IFFALSE 35117
// for i = 1 to horses do
35052: LD_ADDR_VAR 0 11
35056: PUSH
35057: DOUBLE
35058: LD_INT 1
35060: DEC
35061: ST_TO_ADDR
35062: LD_VAR 0 5
35066: PUSH
35067: FOR_TO
35068: IFFALSE 35115
// begin hc_class := 21 ;
35070: LD_ADDR_OWVAR 28
35074: PUSH
35075: LD_INT 21
35077: ST_TO_ADDR
// hc_gallery :=  ;
35078: LD_ADDR_OWVAR 33
35082: PUSH
35083: LD_STRING 
35085: ST_TO_ADDR
// animal := CreateHuman ;
35086: LD_ADDR_VAR 0 12
35090: PUSH
35091: CALL_OW 44
35095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35096: LD_VAR 0 12
35100: PPUSH
35101: LD_VAR 0 8
35105: PPUSH
35106: LD_INT 0
35108: PPUSH
35109: CALL 37174 0 3
// end ;
35113: GO 35067
35115: POP
35116: POP
// if birds then
35117: LD_VAR 0 1
35121: IFFALSE 35188
// for i = 1 to birds do
35123: LD_ADDR_VAR 0 11
35127: PUSH
35128: DOUBLE
35129: LD_INT 1
35131: DEC
35132: ST_TO_ADDR
35133: LD_VAR 0 1
35137: PUSH
35138: FOR_TO
35139: IFFALSE 35186
// begin hc_class := 18 ;
35141: LD_ADDR_OWVAR 28
35145: PUSH
35146: LD_INT 18
35148: ST_TO_ADDR
// hc_gallery =  ;
35149: LD_ADDR_OWVAR 33
35153: PUSH
35154: LD_STRING 
35156: ST_TO_ADDR
// animal := CreateHuman ;
35157: LD_ADDR_VAR 0 12
35161: PUSH
35162: CALL_OW 44
35166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35167: LD_VAR 0 12
35171: PPUSH
35172: LD_VAR 0 8
35176: PPUSH
35177: LD_INT 0
35179: PPUSH
35180: CALL 37174 0 3
// end ;
35184: GO 35138
35186: POP
35187: POP
// if tigers then
35188: LD_VAR 0 2
35192: IFFALSE 35276
// for i = 1 to tigers do
35194: LD_ADDR_VAR 0 11
35198: PUSH
35199: DOUBLE
35200: LD_INT 1
35202: DEC
35203: ST_TO_ADDR
35204: LD_VAR 0 2
35208: PUSH
35209: FOR_TO
35210: IFFALSE 35274
// begin hc_class = class_tiger ;
35212: LD_ADDR_OWVAR 28
35216: PUSH
35217: LD_INT 14
35219: ST_TO_ADDR
// hc_gallery =  ;
35220: LD_ADDR_OWVAR 33
35224: PUSH
35225: LD_STRING 
35227: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35228: LD_ADDR_OWVAR 35
35232: PUSH
35233: LD_INT 7
35235: NEG
35236: PPUSH
35237: LD_INT 7
35239: PPUSH
35240: CALL_OW 12
35244: ST_TO_ADDR
// animal := CreateHuman ;
35245: LD_ADDR_VAR 0 12
35249: PUSH
35250: CALL_OW 44
35254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35255: LD_VAR 0 12
35259: PPUSH
35260: LD_VAR 0 8
35264: PPUSH
35265: LD_INT 0
35267: PPUSH
35268: CALL 37174 0 3
// end ;
35272: GO 35209
35274: POP
35275: POP
// if apemans then
35276: LD_VAR 0 3
35280: IFFALSE 35403
// for i = 1 to apemans do
35282: LD_ADDR_VAR 0 11
35286: PUSH
35287: DOUBLE
35288: LD_INT 1
35290: DEC
35291: ST_TO_ADDR
35292: LD_VAR 0 3
35296: PUSH
35297: FOR_TO
35298: IFFALSE 35401
// begin hc_class = class_apeman ;
35300: LD_ADDR_OWVAR 28
35304: PUSH
35305: LD_INT 12
35307: ST_TO_ADDR
// hc_gallery =  ;
35308: LD_ADDR_OWVAR 33
35312: PUSH
35313: LD_STRING 
35315: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35316: LD_ADDR_OWVAR 35
35320: PUSH
35321: LD_INT 2
35323: NEG
35324: PPUSH
35325: LD_INT 2
35327: PPUSH
35328: CALL_OW 12
35332: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35333: LD_ADDR_OWVAR 31
35337: PUSH
35338: LD_INT 1
35340: PPUSH
35341: LD_INT 3
35343: PPUSH
35344: CALL_OW 12
35348: PUSH
35349: LD_INT 1
35351: PPUSH
35352: LD_INT 3
35354: PPUSH
35355: CALL_OW 12
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: ST_TO_ADDR
// animal := CreateHuman ;
35372: LD_ADDR_VAR 0 12
35376: PUSH
35377: CALL_OW 44
35381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35382: LD_VAR 0 12
35386: PPUSH
35387: LD_VAR 0 8
35391: PPUSH
35392: LD_INT 0
35394: PPUSH
35395: CALL 37174 0 3
// end ;
35399: GO 35297
35401: POP
35402: POP
// if enchidnas then
35403: LD_VAR 0 4
35407: IFFALSE 35474
// for i = 1 to enchidnas do
35409: LD_ADDR_VAR 0 11
35413: PUSH
35414: DOUBLE
35415: LD_INT 1
35417: DEC
35418: ST_TO_ADDR
35419: LD_VAR 0 4
35423: PUSH
35424: FOR_TO
35425: IFFALSE 35472
// begin hc_class = 13 ;
35427: LD_ADDR_OWVAR 28
35431: PUSH
35432: LD_INT 13
35434: ST_TO_ADDR
// hc_gallery =  ;
35435: LD_ADDR_OWVAR 33
35439: PUSH
35440: LD_STRING 
35442: ST_TO_ADDR
// animal := CreateHuman ;
35443: LD_ADDR_VAR 0 12
35447: PUSH
35448: CALL_OW 44
35452: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35453: LD_VAR 0 12
35457: PPUSH
35458: LD_VAR 0 8
35462: PPUSH
35463: LD_INT 0
35465: PPUSH
35466: CALL 37174 0 3
// end ;
35470: GO 35424
35472: POP
35473: POP
// if fishes then
35474: LD_VAR 0 7
35478: IFFALSE 35545
// for i = 1 to fishes do
35480: LD_ADDR_VAR 0 11
35484: PUSH
35485: DOUBLE
35486: LD_INT 1
35488: DEC
35489: ST_TO_ADDR
35490: LD_VAR 0 7
35494: PUSH
35495: FOR_TO
35496: IFFALSE 35543
// begin hc_class = 20 ;
35498: LD_ADDR_OWVAR 28
35502: PUSH
35503: LD_INT 20
35505: ST_TO_ADDR
// hc_gallery =  ;
35506: LD_ADDR_OWVAR 33
35510: PUSH
35511: LD_STRING 
35513: ST_TO_ADDR
// animal := CreateHuman ;
35514: LD_ADDR_VAR 0 12
35518: PUSH
35519: CALL_OW 44
35523: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35524: LD_VAR 0 12
35528: PPUSH
35529: LD_VAR 0 9
35533: PPUSH
35534: LD_INT 0
35536: PPUSH
35537: CALL 37174 0 3
// end ;
35541: GO 35495
35543: POP
35544: POP
// end ;
35545: LD_VAR 0 10
35549: RET
// export function WantHeal ( sci , unit ) ; begin
35550: LD_INT 0
35552: PPUSH
// if GetTaskList ( sci ) > 0 then
35553: LD_VAR 0 1
35557: PPUSH
35558: CALL_OW 437
35562: PUSH
35563: LD_INT 0
35565: GREATER
35566: IFFALSE 35636
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35568: LD_VAR 0 1
35572: PPUSH
35573: CALL_OW 437
35577: PUSH
35578: LD_INT 1
35580: ARRAY
35581: PUSH
35582: LD_INT 1
35584: ARRAY
35585: PUSH
35586: LD_STRING l
35588: EQUAL
35589: PUSH
35590: LD_VAR 0 1
35594: PPUSH
35595: CALL_OW 437
35599: PUSH
35600: LD_INT 1
35602: ARRAY
35603: PUSH
35604: LD_INT 4
35606: ARRAY
35607: PUSH
35608: LD_VAR 0 2
35612: EQUAL
35613: AND
35614: IFFALSE 35626
// result := true else
35616: LD_ADDR_VAR 0 3
35620: PUSH
35621: LD_INT 1
35623: ST_TO_ADDR
35624: GO 35634
// result := false ;
35626: LD_ADDR_VAR 0 3
35630: PUSH
35631: LD_INT 0
35633: ST_TO_ADDR
// end else
35634: GO 35644
// result := false ;
35636: LD_ADDR_VAR 0 3
35640: PUSH
35641: LD_INT 0
35643: ST_TO_ADDR
// end ;
35644: LD_VAR 0 3
35648: RET
// export function HealTarget ( sci ) ; begin
35649: LD_INT 0
35651: PPUSH
// if not sci then
35652: LD_VAR 0 1
35656: NOT
35657: IFFALSE 35661
// exit ;
35659: GO 35726
// result := 0 ;
35661: LD_ADDR_VAR 0 2
35665: PUSH
35666: LD_INT 0
35668: ST_TO_ADDR
// if GetTaskList ( sci ) then
35669: LD_VAR 0 1
35673: PPUSH
35674: CALL_OW 437
35678: IFFALSE 35726
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35680: LD_VAR 0 1
35684: PPUSH
35685: CALL_OW 437
35689: PUSH
35690: LD_INT 1
35692: ARRAY
35693: PUSH
35694: LD_INT 1
35696: ARRAY
35697: PUSH
35698: LD_STRING l
35700: EQUAL
35701: IFFALSE 35726
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35703: LD_ADDR_VAR 0 2
35707: PUSH
35708: LD_VAR 0 1
35712: PPUSH
35713: CALL_OW 437
35717: PUSH
35718: LD_INT 1
35720: ARRAY
35721: PUSH
35722: LD_INT 4
35724: ARRAY
35725: ST_TO_ADDR
// end ;
35726: LD_VAR 0 2
35730: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35731: LD_INT 0
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
// if not base_units then
35737: LD_VAR 0 1
35741: NOT
35742: IFFALSE 35746
// exit ;
35744: GO 35833
// result := false ;
35746: LD_ADDR_VAR 0 2
35750: PUSH
35751: LD_INT 0
35753: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35754: LD_ADDR_VAR 0 5
35758: PUSH
35759: LD_VAR 0 1
35763: PPUSH
35764: LD_INT 21
35766: PUSH
35767: LD_INT 3
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PPUSH
35774: CALL_OW 72
35778: ST_TO_ADDR
// if not tmp then
35779: LD_VAR 0 5
35783: NOT
35784: IFFALSE 35788
// exit ;
35786: GO 35833
// for i in tmp do
35788: LD_ADDR_VAR 0 3
35792: PUSH
35793: LD_VAR 0 5
35797: PUSH
35798: FOR_IN
35799: IFFALSE 35831
// begin result := EnemyInRange ( i , 22 ) ;
35801: LD_ADDR_VAR 0 2
35805: PUSH
35806: LD_VAR 0 3
35810: PPUSH
35811: LD_INT 22
35813: PPUSH
35814: CALL 33411 0 2
35818: ST_TO_ADDR
// if result then
35819: LD_VAR 0 2
35823: IFFALSE 35829
// exit ;
35825: POP
35826: POP
35827: GO 35833
// end ;
35829: GO 35798
35831: POP
35832: POP
// end ;
35833: LD_VAR 0 2
35837: RET
// export function FilterByTag ( units , tag ) ; begin
35838: LD_INT 0
35840: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35841: LD_ADDR_VAR 0 3
35845: PUSH
35846: LD_VAR 0 1
35850: PPUSH
35851: LD_INT 120
35853: PUSH
35854: LD_VAR 0 2
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PPUSH
35863: CALL_OW 72
35867: ST_TO_ADDR
// end ;
35868: LD_VAR 0 3
35872: RET
// export function IsDriver ( un ) ; begin
35873: LD_INT 0
35875: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35876: LD_ADDR_VAR 0 2
35880: PUSH
35881: LD_VAR 0 1
35885: PUSH
35886: LD_INT 55
35888: PUSH
35889: EMPTY
35890: LIST
35891: PPUSH
35892: CALL_OW 69
35896: IN
35897: ST_TO_ADDR
// end ;
35898: LD_VAR 0 2
35902: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35903: LD_INT 0
35905: PPUSH
35906: PPUSH
// list := [ ] ;
35907: LD_ADDR_VAR 0 5
35911: PUSH
35912: EMPTY
35913: ST_TO_ADDR
// case d of 0 :
35914: LD_VAR 0 3
35918: PUSH
35919: LD_INT 0
35921: DOUBLE
35922: EQUAL
35923: IFTRUE 35927
35925: GO 36060
35927: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35928: LD_ADDR_VAR 0 5
35932: PUSH
35933: LD_VAR 0 1
35937: PUSH
35938: LD_INT 4
35940: MINUS
35941: PUSH
35942: LD_VAR 0 2
35946: PUSH
35947: LD_INT 4
35949: MINUS
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: LIST
35958: PUSH
35959: LD_VAR 0 1
35963: PUSH
35964: LD_INT 3
35966: MINUS
35967: PUSH
35968: LD_VAR 0 2
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: PUSH
35981: LD_VAR 0 1
35985: PUSH
35986: LD_INT 4
35988: PLUS
35989: PUSH
35990: LD_VAR 0 2
35994: PUSH
35995: LD_INT 4
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: PUSH
36003: LD_VAR 0 1
36007: PUSH
36008: LD_INT 3
36010: PLUS
36011: PUSH
36012: LD_VAR 0 2
36016: PUSH
36017: LD_INT 3
36019: PLUS
36020: PUSH
36021: LD_INT 5
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: PUSH
36029: LD_VAR 0 1
36033: PUSH
36034: LD_VAR 0 2
36038: PUSH
36039: LD_INT 4
36041: PLUS
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: LIST
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: ST_TO_ADDR
// end ; 1 :
36058: GO 36758
36060: LD_INT 1
36062: DOUBLE
36063: EQUAL
36064: IFTRUE 36068
36066: GO 36201
36068: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36069: LD_ADDR_VAR 0 5
36073: PUSH
36074: LD_VAR 0 1
36078: PUSH
36079: LD_VAR 0 2
36083: PUSH
36084: LD_INT 4
36086: MINUS
36087: PUSH
36088: LD_INT 3
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: PUSH
36096: LD_VAR 0 1
36100: PUSH
36101: LD_INT 3
36103: MINUS
36104: PUSH
36105: LD_VAR 0 2
36109: PUSH
36110: LD_INT 3
36112: MINUS
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: PUSH
36122: LD_VAR 0 1
36126: PUSH
36127: LD_INT 4
36129: MINUS
36130: PUSH
36131: LD_VAR 0 2
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: PUSH
36144: LD_VAR 0 1
36148: PUSH
36149: LD_VAR 0 2
36153: PUSH
36154: LD_INT 3
36156: PLUS
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: PUSH
36166: LD_VAR 0 1
36170: PUSH
36171: LD_INT 4
36173: PLUS
36174: PUSH
36175: LD_VAR 0 2
36179: PUSH
36180: LD_INT 4
36182: PLUS
36183: PUSH
36184: LD_INT 5
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: ST_TO_ADDR
// end ; 2 :
36199: GO 36758
36201: LD_INT 2
36203: DOUBLE
36204: EQUAL
36205: IFTRUE 36209
36207: GO 36338
36209: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36210: LD_ADDR_VAR 0 5
36214: PUSH
36215: LD_VAR 0 1
36219: PUSH
36220: LD_VAR 0 2
36224: PUSH
36225: LD_INT 3
36227: MINUS
36228: PUSH
36229: LD_INT 3
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: PUSH
36237: LD_VAR 0 1
36241: PUSH
36242: LD_INT 4
36244: PLUS
36245: PUSH
36246: LD_VAR 0 2
36250: PUSH
36251: LD_INT 4
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: PUSH
36259: LD_VAR 0 1
36263: PUSH
36264: LD_VAR 0 2
36268: PUSH
36269: LD_INT 4
36271: PLUS
36272: PUSH
36273: LD_INT 0
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: LIST
36280: PUSH
36281: LD_VAR 0 1
36285: PUSH
36286: LD_INT 3
36288: MINUS
36289: PUSH
36290: LD_VAR 0 2
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: PUSH
36303: LD_VAR 0 1
36307: PUSH
36308: LD_INT 4
36310: MINUS
36311: PUSH
36312: LD_VAR 0 2
36316: PUSH
36317: LD_INT 4
36319: MINUS
36320: PUSH
36321: LD_INT 2
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: ST_TO_ADDR
// end ; 3 :
36336: GO 36758
36338: LD_INT 3
36340: DOUBLE
36341: EQUAL
36342: IFTRUE 36346
36344: GO 36479
36346: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36347: LD_ADDR_VAR 0 5
36351: PUSH
36352: LD_VAR 0 1
36356: PUSH
36357: LD_INT 3
36359: PLUS
36360: PUSH
36361: LD_VAR 0 2
36365: PUSH
36366: LD_INT 4
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: PUSH
36374: LD_VAR 0 1
36378: PUSH
36379: LD_INT 4
36381: PLUS
36382: PUSH
36383: LD_VAR 0 2
36387: PUSH
36388: LD_INT 4
36390: PLUS
36391: PUSH
36392: LD_INT 5
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: PUSH
36400: LD_VAR 0 1
36404: PUSH
36405: LD_INT 4
36407: MINUS
36408: PUSH
36409: LD_VAR 0 2
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: PUSH
36422: LD_VAR 0 1
36426: PUSH
36427: LD_VAR 0 2
36431: PUSH
36432: LD_INT 4
36434: MINUS
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: PUSH
36444: LD_VAR 0 1
36448: PUSH
36449: LD_INT 3
36451: MINUS
36452: PUSH
36453: LD_VAR 0 2
36457: PUSH
36458: LD_INT 3
36460: MINUS
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: ST_TO_ADDR
// end ; 4 :
36477: GO 36758
36479: LD_INT 4
36481: DOUBLE
36482: EQUAL
36483: IFTRUE 36487
36485: GO 36620
36487: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36488: LD_ADDR_VAR 0 5
36492: PUSH
36493: LD_VAR 0 1
36497: PUSH
36498: LD_VAR 0 2
36502: PUSH
36503: LD_INT 4
36505: PLUS
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: PUSH
36515: LD_VAR 0 1
36519: PUSH
36520: LD_INT 3
36522: PLUS
36523: PUSH
36524: LD_VAR 0 2
36528: PUSH
36529: LD_INT 3
36531: PLUS
36532: PUSH
36533: LD_INT 5
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: PUSH
36541: LD_VAR 0 1
36545: PUSH
36546: LD_INT 4
36548: PLUS
36549: PUSH
36550: LD_VAR 0 2
36554: PUSH
36555: LD_INT 4
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: LIST
36562: PUSH
36563: LD_VAR 0 1
36567: PUSH
36568: LD_VAR 0 2
36572: PUSH
36573: LD_INT 3
36575: MINUS
36576: PUSH
36577: LD_INT 3
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: PUSH
36585: LD_VAR 0 1
36589: PUSH
36590: LD_INT 4
36592: MINUS
36593: PUSH
36594: LD_VAR 0 2
36598: PUSH
36599: LD_INT 4
36601: MINUS
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: ST_TO_ADDR
// end ; 5 :
36618: GO 36758
36620: LD_INT 5
36622: DOUBLE
36623: EQUAL
36624: IFTRUE 36628
36626: GO 36757
36628: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36629: LD_ADDR_VAR 0 5
36633: PUSH
36634: LD_VAR 0 1
36638: PUSH
36639: LD_INT 4
36641: MINUS
36642: PUSH
36643: LD_VAR 0 2
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: PUSH
36656: LD_VAR 0 1
36660: PUSH
36661: LD_VAR 0 2
36665: PUSH
36666: LD_INT 4
36668: MINUS
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: PUSH
36678: LD_VAR 0 1
36682: PUSH
36683: LD_INT 4
36685: PLUS
36686: PUSH
36687: LD_VAR 0 2
36691: PUSH
36692: LD_INT 4
36694: PLUS
36695: PUSH
36696: LD_INT 5
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: PUSH
36704: LD_VAR 0 1
36708: PUSH
36709: LD_INT 3
36711: PLUS
36712: PUSH
36713: LD_VAR 0 2
36717: PUSH
36718: LD_INT 4
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: PUSH
36726: LD_VAR 0 1
36730: PUSH
36731: LD_VAR 0 2
36735: PUSH
36736: LD_INT 3
36738: PLUS
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// end ; end ;
36755: GO 36758
36757: POP
// result := list ;
36758: LD_ADDR_VAR 0 4
36762: PUSH
36763: LD_VAR 0 5
36767: ST_TO_ADDR
// end ;
36768: LD_VAR 0 4
36772: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36773: LD_INT 0
36775: PPUSH
36776: PPUSH
36777: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36778: LD_VAR 0 1
36782: NOT
36783: PUSH
36784: LD_VAR 0 2
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 3
36797: PUSH
36798: LD_INT 4
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: IN
36807: NOT
36808: OR
36809: IFFALSE 36813
// exit ;
36811: GO 36896
// tmp := [ ] ;
36813: LD_ADDR_VAR 0 5
36817: PUSH
36818: EMPTY
36819: ST_TO_ADDR
// for i in units do
36820: LD_ADDR_VAR 0 4
36824: PUSH
36825: LD_VAR 0 1
36829: PUSH
36830: FOR_IN
36831: IFFALSE 36865
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36833: LD_ADDR_VAR 0 5
36837: PUSH
36838: LD_VAR 0 5
36842: PPUSH
36843: LD_VAR 0 4
36847: PPUSH
36848: LD_VAR 0 2
36852: PPUSH
36853: CALL_OW 259
36857: PPUSH
36858: CALL 38269 0 2
36862: ST_TO_ADDR
36863: GO 36830
36865: POP
36866: POP
// if not tmp then
36867: LD_VAR 0 5
36871: NOT
36872: IFFALSE 36876
// exit ;
36874: GO 36896
// result := SortListByListDesc ( units , tmp ) ;
36876: LD_ADDR_VAR 0 3
36880: PUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: LD_VAR 0 5
36890: PPUSH
36891: CALL_OW 77
36895: ST_TO_ADDR
// end ;
36896: LD_VAR 0 3
36900: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36901: LD_INT 0
36903: PPUSH
36904: PPUSH
36905: PPUSH
// result := false ;
36906: LD_ADDR_VAR 0 3
36910: PUSH
36911: LD_INT 0
36913: ST_TO_ADDR
// if not building then
36914: LD_VAR 0 2
36918: NOT
36919: IFFALSE 36923
// exit ;
36921: GO 37061
// x := GetX ( building ) ;
36923: LD_ADDR_VAR 0 4
36927: PUSH
36928: LD_VAR 0 2
36932: PPUSH
36933: CALL_OW 250
36937: ST_TO_ADDR
// y := GetY ( building ) ;
36938: LD_ADDR_VAR 0 5
36942: PUSH
36943: LD_VAR 0 2
36947: PPUSH
36948: CALL_OW 251
36952: ST_TO_ADDR
// if not x or not y then
36953: LD_VAR 0 4
36957: NOT
36958: PUSH
36959: LD_VAR 0 5
36963: NOT
36964: OR
36965: IFFALSE 36969
// exit ;
36967: GO 37061
// if GetTaskList ( unit ) then
36969: LD_VAR 0 1
36973: PPUSH
36974: CALL_OW 437
36978: IFFALSE 37061
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36980: LD_STRING e
36982: PUSH
36983: LD_VAR 0 1
36987: PPUSH
36988: CALL_OW 437
36992: PUSH
36993: LD_INT 1
36995: ARRAY
36996: PUSH
36997: LD_INT 1
36999: ARRAY
37000: EQUAL
37001: PUSH
37002: LD_VAR 0 4
37006: PUSH
37007: LD_VAR 0 1
37011: PPUSH
37012: CALL_OW 437
37016: PUSH
37017: LD_INT 1
37019: ARRAY
37020: PUSH
37021: LD_INT 2
37023: ARRAY
37024: EQUAL
37025: AND
37026: PUSH
37027: LD_VAR 0 5
37031: PUSH
37032: LD_VAR 0 1
37036: PPUSH
37037: CALL_OW 437
37041: PUSH
37042: LD_INT 1
37044: ARRAY
37045: PUSH
37046: LD_INT 3
37048: ARRAY
37049: EQUAL
37050: AND
37051: IFFALSE 37061
// result := true end ;
37053: LD_ADDR_VAR 0 3
37057: PUSH
37058: LD_INT 1
37060: ST_TO_ADDR
// end ;
37061: LD_VAR 0 3
37065: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37066: LD_INT 0
37068: PPUSH
// result := false ;
37069: LD_ADDR_VAR 0 4
37073: PUSH
37074: LD_INT 0
37076: ST_TO_ADDR
// if GetTaskList ( unit ) then
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 437
37086: IFFALSE 37169
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37088: LD_STRING M
37090: PUSH
37091: LD_VAR 0 1
37095: PPUSH
37096: CALL_OW 437
37100: PUSH
37101: LD_INT 1
37103: ARRAY
37104: PUSH
37105: LD_INT 1
37107: ARRAY
37108: EQUAL
37109: PUSH
37110: LD_VAR 0 2
37114: PUSH
37115: LD_VAR 0 1
37119: PPUSH
37120: CALL_OW 437
37124: PUSH
37125: LD_INT 1
37127: ARRAY
37128: PUSH
37129: LD_INT 2
37131: ARRAY
37132: EQUAL
37133: AND
37134: PUSH
37135: LD_VAR 0 3
37139: PUSH
37140: LD_VAR 0 1
37144: PPUSH
37145: CALL_OW 437
37149: PUSH
37150: LD_INT 1
37152: ARRAY
37153: PUSH
37154: LD_INT 3
37156: ARRAY
37157: EQUAL
37158: AND
37159: IFFALSE 37169
// result := true ;
37161: LD_ADDR_VAR 0 4
37165: PUSH
37166: LD_INT 1
37168: ST_TO_ADDR
// end ; end ;
37169: LD_VAR 0 4
37173: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37174: LD_INT 0
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
// if not unit or not area then
37180: LD_VAR 0 1
37184: NOT
37185: PUSH
37186: LD_VAR 0 2
37190: NOT
37191: OR
37192: IFFALSE 37196
// exit ;
37194: GO 37372
// tmp := AreaToList ( area , i ) ;
37196: LD_ADDR_VAR 0 6
37200: PUSH
37201: LD_VAR 0 2
37205: PPUSH
37206: LD_VAR 0 5
37210: PPUSH
37211: CALL_OW 517
37215: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37216: LD_ADDR_VAR 0 5
37220: PUSH
37221: DOUBLE
37222: LD_INT 1
37224: DEC
37225: ST_TO_ADDR
37226: LD_VAR 0 6
37230: PUSH
37231: LD_INT 1
37233: ARRAY
37234: PUSH
37235: FOR_TO
37236: IFFALSE 37370
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37238: LD_ADDR_VAR 0 7
37242: PUSH
37243: LD_VAR 0 6
37247: PUSH
37248: LD_INT 1
37250: ARRAY
37251: PUSH
37252: LD_VAR 0 5
37256: ARRAY
37257: PUSH
37258: LD_VAR 0 6
37262: PUSH
37263: LD_INT 2
37265: ARRAY
37266: PUSH
37267: LD_VAR 0 5
37271: ARRAY
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37277: LD_INT 92
37279: PUSH
37280: LD_VAR 0 7
37284: PUSH
37285: LD_INT 1
37287: ARRAY
37288: PUSH
37289: LD_VAR 0 7
37293: PUSH
37294: LD_INT 2
37296: ARRAY
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: PPUSH
37307: CALL_OW 69
37311: PUSH
37312: LD_INT 0
37314: EQUAL
37315: IFFALSE 37368
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37317: LD_VAR 0 1
37321: PPUSH
37322: LD_VAR 0 7
37326: PUSH
37327: LD_INT 1
37329: ARRAY
37330: PPUSH
37331: LD_VAR 0 7
37335: PUSH
37336: LD_INT 2
37338: ARRAY
37339: PPUSH
37340: LD_VAR 0 3
37344: PPUSH
37345: CALL_OW 48
// result := IsPlaced ( unit ) ;
37349: LD_ADDR_VAR 0 4
37353: PUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL_OW 305
37363: ST_TO_ADDR
// exit ;
37364: POP
37365: POP
37366: GO 37372
// end ; end ;
37368: GO 37235
37370: POP
37371: POP
// end ;
37372: LD_VAR 0 4
37376: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37377: LD_INT 0
37379: PPUSH
37380: PPUSH
37381: PPUSH
// if not side or side > 8 then
37382: LD_VAR 0 1
37386: NOT
37387: PUSH
37388: LD_VAR 0 1
37392: PUSH
37393: LD_INT 8
37395: GREATER
37396: OR
37397: IFFALSE 37401
// exit ;
37399: GO 37588
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37401: LD_ADDR_VAR 0 4
37405: PUSH
37406: LD_INT 22
37408: PUSH
37409: LD_VAR 0 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 21
37420: PUSH
37421: LD_INT 3
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PPUSH
37432: CALL_OW 69
37436: ST_TO_ADDR
// if not tmp then
37437: LD_VAR 0 4
37441: NOT
37442: IFFALSE 37446
// exit ;
37444: GO 37588
// enable_addtolog := true ;
37446: LD_ADDR_OWVAR 81
37450: PUSH
37451: LD_INT 1
37453: ST_TO_ADDR
// AddToLog ( [ ) ;
37454: LD_STRING [
37456: PPUSH
37457: CALL_OW 561
// for i in tmp do
37461: LD_ADDR_VAR 0 3
37465: PUSH
37466: LD_VAR 0 4
37470: PUSH
37471: FOR_IN
37472: IFFALSE 37579
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37474: LD_STRING [
37476: PUSH
37477: LD_VAR 0 3
37481: PPUSH
37482: CALL_OW 266
37486: STR
37487: PUSH
37488: LD_STRING , 
37490: STR
37491: PUSH
37492: LD_VAR 0 3
37496: PPUSH
37497: CALL_OW 250
37501: STR
37502: PUSH
37503: LD_STRING , 
37505: STR
37506: PUSH
37507: LD_VAR 0 3
37511: PPUSH
37512: CALL_OW 251
37516: STR
37517: PUSH
37518: LD_STRING , 
37520: STR
37521: PUSH
37522: LD_VAR 0 3
37526: PPUSH
37527: CALL_OW 254
37531: STR
37532: PUSH
37533: LD_STRING , 
37535: STR
37536: PUSH
37537: LD_VAR 0 3
37541: PPUSH
37542: LD_INT 1
37544: PPUSH
37545: CALL_OW 268
37549: STR
37550: PUSH
37551: LD_STRING , 
37553: STR
37554: PUSH
37555: LD_VAR 0 3
37559: PPUSH
37560: LD_INT 2
37562: PPUSH
37563: CALL_OW 268
37567: STR
37568: PUSH
37569: LD_STRING ],
37571: STR
37572: PPUSH
37573: CALL_OW 561
// end ;
37577: GO 37471
37579: POP
37580: POP
// AddToLog ( ]; ) ;
37581: LD_STRING ];
37583: PPUSH
37584: CALL_OW 561
// end ;
37588: LD_VAR 0 2
37592: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37593: LD_INT 0
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
// if not area or not rate or not max then
37600: LD_VAR 0 1
37604: NOT
37605: PUSH
37606: LD_VAR 0 2
37610: NOT
37611: OR
37612: PUSH
37613: LD_VAR 0 4
37617: NOT
37618: OR
37619: IFFALSE 37623
// exit ;
37621: GO 37812
// while 1 do
37623: LD_INT 1
37625: IFFALSE 37812
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37627: LD_ADDR_VAR 0 9
37631: PUSH
37632: LD_VAR 0 1
37636: PPUSH
37637: LD_INT 1
37639: PPUSH
37640: CALL_OW 287
37644: PUSH
37645: LD_INT 10
37647: MUL
37648: ST_TO_ADDR
// r := rate / 10 ;
37649: LD_ADDR_VAR 0 7
37653: PUSH
37654: LD_VAR 0 2
37658: PUSH
37659: LD_INT 10
37661: DIVREAL
37662: ST_TO_ADDR
// time := 1 1$00 ;
37663: LD_ADDR_VAR 0 8
37667: PUSH
37668: LD_INT 2100
37670: ST_TO_ADDR
// if amount < min then
37671: LD_VAR 0 9
37675: PUSH
37676: LD_VAR 0 3
37680: LESS
37681: IFFALSE 37699
// r := r * 2 else
37683: LD_ADDR_VAR 0 7
37687: PUSH
37688: LD_VAR 0 7
37692: PUSH
37693: LD_INT 2
37695: MUL
37696: ST_TO_ADDR
37697: GO 37725
// if amount > max then
37699: LD_VAR 0 9
37703: PUSH
37704: LD_VAR 0 4
37708: GREATER
37709: IFFALSE 37725
// r := r / 2 ;
37711: LD_ADDR_VAR 0 7
37715: PUSH
37716: LD_VAR 0 7
37720: PUSH
37721: LD_INT 2
37723: DIVREAL
37724: ST_TO_ADDR
// time := time / r ;
37725: LD_ADDR_VAR 0 8
37729: PUSH
37730: LD_VAR 0 8
37734: PUSH
37735: LD_VAR 0 7
37739: DIVREAL
37740: ST_TO_ADDR
// if time < 0 then
37741: LD_VAR 0 8
37745: PUSH
37746: LD_INT 0
37748: LESS
37749: IFFALSE 37766
// time := time * - 1 ;
37751: LD_ADDR_VAR 0 8
37755: PUSH
37756: LD_VAR 0 8
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: MUL
37765: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37766: LD_VAR 0 8
37770: PUSH
37771: LD_INT 35
37773: PPUSH
37774: LD_INT 875
37776: PPUSH
37777: CALL_OW 12
37781: PLUS
37782: PPUSH
37783: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37787: LD_INT 1
37789: PPUSH
37790: LD_INT 5
37792: PPUSH
37793: CALL_OW 12
37797: PPUSH
37798: LD_VAR 0 1
37802: PPUSH
37803: LD_INT 1
37805: PPUSH
37806: CALL_OW 55
// end ;
37810: GO 37623
// end ;
37812: LD_VAR 0 5
37816: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37817: LD_INT 0
37819: PPUSH
37820: PPUSH
37821: PPUSH
37822: PPUSH
37823: PPUSH
37824: PPUSH
37825: PPUSH
37826: PPUSH
// if not turrets or not factories then
37827: LD_VAR 0 1
37831: NOT
37832: PUSH
37833: LD_VAR 0 2
37837: NOT
37838: OR
37839: IFFALSE 37843
// exit ;
37841: GO 38150
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37843: LD_ADDR_VAR 0 10
37847: PUSH
37848: LD_INT 5
37850: PUSH
37851: LD_INT 6
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 2
37860: PUSH
37861: LD_INT 4
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: LD_INT 5
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 24
37885: PUSH
37886: LD_INT 25
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 23
37895: PUSH
37896: LD_INT 27
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 42
37909: PUSH
37910: LD_INT 43
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 44
37919: PUSH
37920: LD_INT 46
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 45
37929: PUSH
37930: LD_INT 47
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// result := [ ] ;
37947: LD_ADDR_VAR 0 3
37951: PUSH
37952: EMPTY
37953: ST_TO_ADDR
// for i in turrets do
37954: LD_ADDR_VAR 0 4
37958: PUSH
37959: LD_VAR 0 1
37963: PUSH
37964: FOR_IN
37965: IFFALSE 38148
// begin nat := GetNation ( i ) ;
37967: LD_ADDR_VAR 0 7
37971: PUSH
37972: LD_VAR 0 4
37976: PPUSH
37977: CALL_OW 248
37981: ST_TO_ADDR
// weapon := 0 ;
37982: LD_ADDR_VAR 0 8
37986: PUSH
37987: LD_INT 0
37989: ST_TO_ADDR
// if not nat then
37990: LD_VAR 0 7
37994: NOT
37995: IFFALSE 37999
// continue ;
37997: GO 37964
// for j in list [ nat ] do
37999: LD_ADDR_VAR 0 5
38003: PUSH
38004: LD_VAR 0 10
38008: PUSH
38009: LD_VAR 0 7
38013: ARRAY
38014: PUSH
38015: FOR_IN
38016: IFFALSE 38057
// if GetBWeapon ( i ) = j [ 1 ] then
38018: LD_VAR 0 4
38022: PPUSH
38023: CALL_OW 269
38027: PUSH
38028: LD_VAR 0 5
38032: PUSH
38033: LD_INT 1
38035: ARRAY
38036: EQUAL
38037: IFFALSE 38055
// begin weapon := j [ 2 ] ;
38039: LD_ADDR_VAR 0 8
38043: PUSH
38044: LD_VAR 0 5
38048: PUSH
38049: LD_INT 2
38051: ARRAY
38052: ST_TO_ADDR
// break ;
38053: GO 38057
// end ;
38055: GO 38015
38057: POP
38058: POP
// if not weapon then
38059: LD_VAR 0 8
38063: NOT
38064: IFFALSE 38068
// continue ;
38066: GO 37964
// for k in factories do
38068: LD_ADDR_VAR 0 6
38072: PUSH
38073: LD_VAR 0 2
38077: PUSH
38078: FOR_IN
38079: IFFALSE 38144
// begin weapons := AvailableWeaponList ( k ) ;
38081: LD_ADDR_VAR 0 9
38085: PUSH
38086: LD_VAR 0 6
38090: PPUSH
38091: CALL_OW 478
38095: ST_TO_ADDR
// if not weapons then
38096: LD_VAR 0 9
38100: NOT
38101: IFFALSE 38105
// continue ;
38103: GO 38078
// if weapon in weapons then
38105: LD_VAR 0 8
38109: PUSH
38110: LD_VAR 0 9
38114: IN
38115: IFFALSE 38142
// begin result := [ i , weapon ] ;
38117: LD_ADDR_VAR 0 3
38121: PUSH
38122: LD_VAR 0 4
38126: PUSH
38127: LD_VAR 0 8
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: ST_TO_ADDR
// exit ;
38136: POP
38137: POP
38138: POP
38139: POP
38140: GO 38150
// end ; end ;
38142: GO 38078
38144: POP
38145: POP
// end ;
38146: GO 37964
38148: POP
38149: POP
// end ;
38150: LD_VAR 0 3
38154: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38155: LD_INT 0
38157: PPUSH
// if not side or side > 8 then
38158: LD_VAR 0 3
38162: NOT
38163: PUSH
38164: LD_VAR 0 3
38168: PUSH
38169: LD_INT 8
38171: GREATER
38172: OR
38173: IFFALSE 38177
// exit ;
38175: GO 38236
// if not range then
38177: LD_VAR 0 4
38181: NOT
38182: IFFALSE 38193
// range := - 12 ;
38184: LD_ADDR_VAR 0 4
38188: PUSH
38189: LD_INT 12
38191: NEG
38192: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38193: LD_VAR 0 1
38197: PPUSH
38198: LD_VAR 0 2
38202: PPUSH
38203: LD_VAR 0 3
38207: PPUSH
38208: LD_VAR 0 4
38212: PPUSH
38213: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38217: LD_VAR 0 1
38221: PPUSH
38222: LD_VAR 0 2
38226: PPUSH
38227: LD_VAR 0 3
38231: PPUSH
38232: CALL_OW 331
// end ;
38236: LD_VAR 0 5
38240: RET
// export function Video ( mode ) ; begin
38241: LD_INT 0
38243: PPUSH
// ingame_video = mode ;
38244: LD_ADDR_OWVAR 52
38248: PUSH
38249: LD_VAR 0 1
38253: ST_TO_ADDR
// interface_hidden = mode ;
38254: LD_ADDR_OWVAR 54
38258: PUSH
38259: LD_VAR 0 1
38263: ST_TO_ADDR
// end ;
38264: LD_VAR 0 2
38268: RET
// export function Join ( array , element ) ; begin
38269: LD_INT 0
38271: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38272: LD_ADDR_VAR 0 3
38276: PUSH
38277: LD_VAR 0 1
38281: PPUSH
38282: LD_VAR 0 1
38286: PUSH
38287: LD_INT 1
38289: PLUS
38290: PPUSH
38291: LD_VAR 0 2
38295: PPUSH
38296: CALL_OW 1
38300: ST_TO_ADDR
// end ;
38301: LD_VAR 0 3
38305: RET
// export function JoinUnion ( array , element ) ; begin
38306: LD_INT 0
38308: PPUSH
// result := array union element ;
38309: LD_ADDR_VAR 0 3
38313: PUSH
38314: LD_VAR 0 1
38318: PUSH
38319: LD_VAR 0 2
38323: UNION
38324: ST_TO_ADDR
// end ;
38325: LD_VAR 0 3
38329: RET
// export function GetBehemoths ( side ) ; begin
38330: LD_INT 0
38332: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38333: LD_ADDR_VAR 0 2
38337: PUSH
38338: LD_INT 22
38340: PUSH
38341: LD_VAR 0 1
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 31
38352: PUSH
38353: LD_INT 25
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PPUSH
38364: CALL_OW 69
38368: ST_TO_ADDR
// end ;
38369: LD_VAR 0 2
38373: RET
// export function Shuffle ( array ) ; var i , index ; begin
38374: LD_INT 0
38376: PPUSH
38377: PPUSH
38378: PPUSH
// result := [ ] ;
38379: LD_ADDR_VAR 0 2
38383: PUSH
38384: EMPTY
38385: ST_TO_ADDR
// if not array then
38386: LD_VAR 0 1
38390: NOT
38391: IFFALSE 38395
// exit ;
38393: GO 38494
// Randomize ;
38395: CALL_OW 10
// for i = array downto 1 do
38399: LD_ADDR_VAR 0 3
38403: PUSH
38404: DOUBLE
38405: LD_VAR 0 1
38409: INC
38410: ST_TO_ADDR
38411: LD_INT 1
38413: PUSH
38414: FOR_DOWNTO
38415: IFFALSE 38492
// begin index := rand ( 1 , array ) ;
38417: LD_ADDR_VAR 0 4
38421: PUSH
38422: LD_INT 1
38424: PPUSH
38425: LD_VAR 0 1
38429: PPUSH
38430: CALL_OW 12
38434: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38435: LD_ADDR_VAR 0 2
38439: PUSH
38440: LD_VAR 0 2
38444: PPUSH
38445: LD_VAR 0 2
38449: PUSH
38450: LD_INT 1
38452: PLUS
38453: PPUSH
38454: LD_VAR 0 1
38458: PUSH
38459: LD_VAR 0 4
38463: ARRAY
38464: PPUSH
38465: CALL_OW 2
38469: ST_TO_ADDR
// array := Delete ( array , index ) ;
38470: LD_ADDR_VAR 0 1
38474: PUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: LD_VAR 0 4
38484: PPUSH
38485: CALL_OW 3
38489: ST_TO_ADDR
// end ;
38490: GO 38414
38492: POP
38493: POP
// end ;
38494: LD_VAR 0 2
38498: RET
// export function GetBaseMaterials ( base ) ; begin
38499: LD_INT 0
38501: PPUSH
// result := [ 0 , 0 , 0 ] ;
38502: LD_ADDR_VAR 0 2
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
// if not base then
38521: LD_VAR 0 1
38525: NOT
38526: IFFALSE 38530
// exit ;
38528: GO 38579
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38530: LD_ADDR_VAR 0 2
38534: PUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: LD_INT 1
38542: PPUSH
38543: CALL_OW 275
38547: PUSH
38548: LD_VAR 0 1
38552: PPUSH
38553: LD_INT 2
38555: PPUSH
38556: CALL_OW 275
38560: PUSH
38561: LD_VAR 0 1
38565: PPUSH
38566: LD_INT 3
38568: PPUSH
38569: CALL_OW 275
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: ST_TO_ADDR
// end ;
38579: LD_VAR 0 2
38583: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38584: LD_INT 0
38586: PPUSH
38587: PPUSH
// result := array ;
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_VAR 0 1
38597: ST_TO_ADDR
// if size >= result then
38598: LD_VAR 0 2
38602: PUSH
38603: LD_VAR 0 3
38607: GREATEREQUAL
38608: IFFALSE 38612
// exit ;
38610: GO 38662
// if size then
38612: LD_VAR 0 2
38616: IFFALSE 38662
// for i := array downto size do
38618: LD_ADDR_VAR 0 4
38622: PUSH
38623: DOUBLE
38624: LD_VAR 0 1
38628: INC
38629: ST_TO_ADDR
38630: LD_VAR 0 2
38634: PUSH
38635: FOR_DOWNTO
38636: IFFALSE 38660
// result := Delete ( result , result ) ;
38638: LD_ADDR_VAR 0 3
38642: PUSH
38643: LD_VAR 0 3
38647: PPUSH
38648: LD_VAR 0 3
38652: PPUSH
38653: CALL_OW 3
38657: ST_TO_ADDR
38658: GO 38635
38660: POP
38661: POP
// end ;
38662: LD_VAR 0 3
38666: RET
// export function ComExit ( unit ) ; var tmp ; begin
38667: LD_INT 0
38669: PPUSH
38670: PPUSH
// if not IsInUnit ( unit ) then
38671: LD_VAR 0 1
38675: PPUSH
38676: CALL_OW 310
38680: NOT
38681: IFFALSE 38685
// exit ;
38683: GO 38745
// tmp := IsInUnit ( unit ) ;
38685: LD_ADDR_VAR 0 3
38689: PUSH
38690: LD_VAR 0 1
38694: PPUSH
38695: CALL_OW 310
38699: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38700: LD_VAR 0 3
38704: PPUSH
38705: CALL_OW 247
38709: PUSH
38710: LD_INT 2
38712: EQUAL
38713: IFFALSE 38726
// ComExitVehicle ( unit ) else
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 121
38724: GO 38735
// ComExitBuilding ( unit ) ;
38726: LD_VAR 0 1
38730: PPUSH
38731: CALL_OW 122
// result := tmp ;
38735: LD_ADDR_VAR 0 2
38739: PUSH
38740: LD_VAR 0 3
38744: ST_TO_ADDR
// end ;
38745: LD_VAR 0 2
38749: RET
// export function ComExitAll ( units ) ; var i ; begin
38750: LD_INT 0
38752: PPUSH
38753: PPUSH
// if not units then
38754: LD_VAR 0 1
38758: NOT
38759: IFFALSE 38763
// exit ;
38761: GO 38789
// for i in units do
38763: LD_ADDR_VAR 0 3
38767: PUSH
38768: LD_VAR 0 1
38772: PUSH
38773: FOR_IN
38774: IFFALSE 38787
// ComExit ( i ) ;
38776: LD_VAR 0 3
38780: PPUSH
38781: CALL 38667 0 1
38785: GO 38773
38787: POP
38788: POP
// end ;
38789: LD_VAR 0 2
38793: RET
// export function ResetHc ; begin
38794: LD_INT 0
38796: PPUSH
// InitHc ;
38797: CALL_OW 19
// hc_importance := 0 ;
38801: LD_ADDR_OWVAR 32
38805: PUSH
38806: LD_INT 0
38808: ST_TO_ADDR
// end ;
38809: LD_VAR 0 1
38813: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38814: LD_INT 0
38816: PPUSH
38817: PPUSH
38818: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38819: LD_ADDR_VAR 0 6
38823: PUSH
38824: LD_VAR 0 1
38828: PUSH
38829: LD_VAR 0 3
38833: PLUS
38834: PUSH
38835: LD_INT 2
38837: DIV
38838: ST_TO_ADDR
// if _x < 0 then
38839: LD_VAR 0 6
38843: PUSH
38844: LD_INT 0
38846: LESS
38847: IFFALSE 38864
// _x := _x * - 1 ;
38849: LD_ADDR_VAR 0 6
38853: PUSH
38854: LD_VAR 0 6
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: MUL
38863: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38864: LD_ADDR_VAR 0 7
38868: PUSH
38869: LD_VAR 0 2
38873: PUSH
38874: LD_VAR 0 4
38878: PLUS
38879: PUSH
38880: LD_INT 2
38882: DIV
38883: ST_TO_ADDR
// if _y < 0 then
38884: LD_VAR 0 7
38888: PUSH
38889: LD_INT 0
38891: LESS
38892: IFFALSE 38909
// _y := _y * - 1 ;
38894: LD_ADDR_VAR 0 7
38898: PUSH
38899: LD_VAR 0 7
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: MUL
38908: ST_TO_ADDR
// result := [ _x , _y ] ;
38909: LD_ADDR_VAR 0 5
38913: PUSH
38914: LD_VAR 0 6
38918: PUSH
38919: LD_VAR 0 7
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: ST_TO_ADDR
// end ;
38928: LD_VAR 0 5
38932: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38933: LD_INT 0
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
// task := GetTaskList ( unit ) ;
38939: LD_ADDR_VAR 0 7
38943: PUSH
38944: LD_VAR 0 1
38948: PPUSH
38949: CALL_OW 437
38953: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38954: LD_VAR 0 7
38958: NOT
38959: PUSH
38960: LD_VAR 0 1
38964: PPUSH
38965: LD_VAR 0 2
38969: PPUSH
38970: CALL_OW 308
38974: NOT
38975: AND
38976: IFFALSE 38980
// exit ;
38978: GO 39098
// if IsInArea ( unit , area ) then
38980: LD_VAR 0 1
38984: PPUSH
38985: LD_VAR 0 2
38989: PPUSH
38990: CALL_OW 308
38994: IFFALSE 39012
// begin ComMoveToArea ( unit , goAway ) ;
38996: LD_VAR 0 1
39000: PPUSH
39001: LD_VAR 0 3
39005: PPUSH
39006: CALL_OW 113
// exit ;
39010: GO 39098
// end ; if task [ 1 ] [ 1 ] <> M then
39012: LD_VAR 0 7
39016: PUSH
39017: LD_INT 1
39019: ARRAY
39020: PUSH
39021: LD_INT 1
39023: ARRAY
39024: PUSH
39025: LD_STRING M
39027: NONEQUAL
39028: IFFALSE 39032
// exit ;
39030: GO 39098
// x := task [ 1 ] [ 2 ] ;
39032: LD_ADDR_VAR 0 5
39036: PUSH
39037: LD_VAR 0 7
39041: PUSH
39042: LD_INT 1
39044: ARRAY
39045: PUSH
39046: LD_INT 2
39048: ARRAY
39049: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39050: LD_ADDR_VAR 0 6
39054: PUSH
39055: LD_VAR 0 7
39059: PUSH
39060: LD_INT 1
39062: ARRAY
39063: PUSH
39064: LD_INT 3
39066: ARRAY
39067: ST_TO_ADDR
// if InArea ( x , y , area ) then
39068: LD_VAR 0 5
39072: PPUSH
39073: LD_VAR 0 6
39077: PPUSH
39078: LD_VAR 0 2
39082: PPUSH
39083: CALL_OW 309
39087: IFFALSE 39098
// ComStop ( unit ) ;
39089: LD_VAR 0 1
39093: PPUSH
39094: CALL_OW 141
// end ;
39098: LD_VAR 0 4
39102: RET
// export function Abs ( value ) ; begin
39103: LD_INT 0
39105: PPUSH
// result := value ;
39106: LD_ADDR_VAR 0 2
39110: PUSH
39111: LD_VAR 0 1
39115: ST_TO_ADDR
// if value < 0 then
39116: LD_VAR 0 1
39120: PUSH
39121: LD_INT 0
39123: LESS
39124: IFFALSE 39141
// result := value * - 1 ;
39126: LD_ADDR_VAR 0 2
39130: PUSH
39131: LD_VAR 0 1
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: MUL
39140: ST_TO_ADDR
// end ;
39141: LD_VAR 0 2
39145: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39146: LD_INT 0
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
// if not unit or not building then
39156: LD_VAR 0 1
39160: NOT
39161: PUSH
39162: LD_VAR 0 2
39166: NOT
39167: OR
39168: IFFALSE 39172
// exit ;
39170: GO 39398
// x := GetX ( building ) ;
39172: LD_ADDR_VAR 0 4
39176: PUSH
39177: LD_VAR 0 2
39181: PPUSH
39182: CALL_OW 250
39186: ST_TO_ADDR
// y := GetY ( building ) ;
39187: LD_ADDR_VAR 0 6
39191: PUSH
39192: LD_VAR 0 2
39196: PPUSH
39197: CALL_OW 251
39201: ST_TO_ADDR
// d := GetDir ( building ) ;
39202: LD_ADDR_VAR 0 8
39206: PUSH
39207: LD_VAR 0 2
39211: PPUSH
39212: CALL_OW 254
39216: ST_TO_ADDR
// r := 4 ;
39217: LD_ADDR_VAR 0 9
39221: PUSH
39222: LD_INT 4
39224: ST_TO_ADDR
// for i := 1 to 5 do
39225: LD_ADDR_VAR 0 10
39229: PUSH
39230: DOUBLE
39231: LD_INT 1
39233: DEC
39234: ST_TO_ADDR
39235: LD_INT 5
39237: PUSH
39238: FOR_TO
39239: IFFALSE 39396
// begin _x := ShiftX ( x , d , r + i ) ;
39241: LD_ADDR_VAR 0 5
39245: PUSH
39246: LD_VAR 0 4
39250: PPUSH
39251: LD_VAR 0 8
39255: PPUSH
39256: LD_VAR 0 9
39260: PUSH
39261: LD_VAR 0 10
39265: PLUS
39266: PPUSH
39267: CALL_OW 272
39271: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39272: LD_ADDR_VAR 0 7
39276: PUSH
39277: LD_VAR 0 6
39281: PPUSH
39282: LD_VAR 0 8
39286: PPUSH
39287: LD_VAR 0 9
39291: PUSH
39292: LD_VAR 0 10
39296: PLUS
39297: PPUSH
39298: CALL_OW 273
39302: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39303: LD_VAR 0 5
39307: PPUSH
39308: LD_VAR 0 7
39312: PPUSH
39313: CALL_OW 488
39317: PUSH
39318: LD_VAR 0 5
39322: PPUSH
39323: LD_VAR 0 7
39327: PPUSH
39328: CALL_OW 428
39332: PPUSH
39333: CALL_OW 247
39337: PUSH
39338: LD_INT 3
39340: PUSH
39341: LD_INT 2
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: IN
39348: NOT
39349: AND
39350: IFFALSE 39394
// begin ComMoveXY ( unit , _x , _y ) ;
39352: LD_VAR 0 1
39356: PPUSH
39357: LD_VAR 0 5
39361: PPUSH
39362: LD_VAR 0 7
39366: PPUSH
39367: CALL_OW 111
// result := [ _x , _y ] ;
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_VAR 0 5
39380: PUSH
39381: LD_VAR 0 7
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: ST_TO_ADDR
// exit ;
39390: POP
39391: POP
39392: GO 39398
// end ; end ;
39394: GO 39238
39396: POP
39397: POP
// end ;
39398: LD_VAR 0 3
39402: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39403: LD_INT 0
39405: PPUSH
39406: PPUSH
39407: PPUSH
// result := 0 ;
39408: LD_ADDR_VAR 0 3
39412: PUSH
39413: LD_INT 0
39415: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39416: LD_VAR 0 1
39420: PUSH
39421: LD_INT 0
39423: LESS
39424: PUSH
39425: LD_VAR 0 1
39429: PUSH
39430: LD_INT 8
39432: GREATER
39433: OR
39434: PUSH
39435: LD_VAR 0 2
39439: PUSH
39440: LD_INT 0
39442: LESS
39443: OR
39444: PUSH
39445: LD_VAR 0 2
39449: PUSH
39450: LD_INT 8
39452: GREATER
39453: OR
39454: IFFALSE 39458
// exit ;
39456: GO 39533
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39458: LD_ADDR_VAR 0 4
39462: PUSH
39463: LD_INT 22
39465: PUSH
39466: LD_VAR 0 2
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PPUSH
39475: CALL_OW 69
39479: PUSH
39480: FOR_IN
39481: IFFALSE 39531
// begin un := UnitShoot ( i ) ;
39483: LD_ADDR_VAR 0 5
39487: PUSH
39488: LD_VAR 0 4
39492: PPUSH
39493: CALL_OW 504
39497: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39498: LD_VAR 0 5
39502: PPUSH
39503: CALL_OW 255
39507: PUSH
39508: LD_VAR 0 1
39512: EQUAL
39513: IFFALSE 39529
// begin result := un ;
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_VAR 0 5
39524: ST_TO_ADDR
// exit ;
39525: POP
39526: POP
39527: GO 39533
// end ; end ;
39529: GO 39480
39531: POP
39532: POP
// end ;
39533: LD_VAR 0 3
39537: RET
// export function GetCargoBay ( units ) ; begin
39538: LD_INT 0
39540: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39541: LD_ADDR_VAR 0 2
39545: PUSH
39546: LD_VAR 0 1
39550: PPUSH
39551: LD_INT 2
39553: PUSH
39554: LD_INT 34
39556: PUSH
39557: LD_INT 12
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 34
39566: PUSH
39567: LD_INT 51
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 34
39576: PUSH
39577: LD_INT 32
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 34
39586: PUSH
39587: LD_INT 89
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: PPUSH
39601: CALL_OW 72
39605: ST_TO_ADDR
// end ;
39606: LD_VAR 0 2
39610: RET
// export function Negate ( value ) ; begin
39611: LD_INT 0
39613: PPUSH
// result := not value ;
39614: LD_ADDR_VAR 0 2
39618: PUSH
39619: LD_VAR 0 1
39623: NOT
39624: ST_TO_ADDR
// end ;
39625: LD_VAR 0 2
39629: RET
// export function Inc ( value ) ; begin
39630: LD_INT 0
39632: PPUSH
// result := value + 1 ;
39633: LD_ADDR_VAR 0 2
39637: PUSH
39638: LD_VAR 0 1
39642: PUSH
39643: LD_INT 1
39645: PLUS
39646: ST_TO_ADDR
// end ;
39647: LD_VAR 0 2
39651: RET
// export function Dec ( value ) ; begin
39652: LD_INT 0
39654: PPUSH
// result := value - 1 ;
39655: LD_ADDR_VAR 0 2
39659: PUSH
39660: LD_VAR 0 1
39664: PUSH
39665: LD_INT 1
39667: MINUS
39668: ST_TO_ADDR
// end ;
39669: LD_VAR 0 2
39673: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39674: LD_INT 0
39676: PPUSH
39677: PPUSH
39678: PPUSH
39679: PPUSH
39680: PPUSH
39681: PPUSH
39682: PPUSH
39683: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39684: LD_VAR 0 1
39688: PPUSH
39689: LD_VAR 0 2
39693: PPUSH
39694: CALL_OW 488
39698: NOT
39699: PUSH
39700: LD_VAR 0 3
39704: PPUSH
39705: LD_VAR 0 4
39709: PPUSH
39710: CALL_OW 488
39714: NOT
39715: OR
39716: IFFALSE 39729
// begin result := - 1 ;
39718: LD_ADDR_VAR 0 5
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: ST_TO_ADDR
// exit ;
39727: GO 39964
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39729: LD_ADDR_VAR 0 12
39733: PUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: LD_VAR 0 2
39743: PPUSH
39744: LD_VAR 0 3
39748: PPUSH
39749: LD_VAR 0 4
39753: PPUSH
39754: CALL 38814 0 4
39758: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39759: LD_ADDR_VAR 0 11
39763: PUSH
39764: LD_VAR 0 1
39768: PPUSH
39769: LD_VAR 0 2
39773: PPUSH
39774: LD_VAR 0 12
39778: PUSH
39779: LD_INT 1
39781: ARRAY
39782: PPUSH
39783: LD_VAR 0 12
39787: PUSH
39788: LD_INT 2
39790: ARRAY
39791: PPUSH
39792: CALL_OW 298
39796: ST_TO_ADDR
// distance := 9999 ;
39797: LD_ADDR_VAR 0 10
39801: PUSH
39802: LD_INT 9999
39804: ST_TO_ADDR
// for i := 0 to 5 do
39805: LD_ADDR_VAR 0 6
39809: PUSH
39810: DOUBLE
39811: LD_INT 0
39813: DEC
39814: ST_TO_ADDR
39815: LD_INT 5
39817: PUSH
39818: FOR_TO
39819: IFFALSE 39962
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39821: LD_ADDR_VAR 0 7
39825: PUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: LD_VAR 0 6
39835: PPUSH
39836: LD_VAR 0 11
39840: PPUSH
39841: CALL_OW 272
39845: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39846: LD_ADDR_VAR 0 8
39850: PUSH
39851: LD_VAR 0 2
39855: PPUSH
39856: LD_VAR 0 6
39860: PPUSH
39861: LD_VAR 0 11
39865: PPUSH
39866: CALL_OW 273
39870: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39871: LD_VAR 0 7
39875: PPUSH
39876: LD_VAR 0 8
39880: PPUSH
39881: CALL_OW 488
39885: NOT
39886: IFFALSE 39890
// continue ;
39888: GO 39818
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39890: LD_ADDR_VAR 0 9
39894: PUSH
39895: LD_VAR 0 12
39899: PUSH
39900: LD_INT 1
39902: ARRAY
39903: PPUSH
39904: LD_VAR 0 12
39908: PUSH
39909: LD_INT 2
39911: ARRAY
39912: PPUSH
39913: LD_VAR 0 7
39917: PPUSH
39918: LD_VAR 0 8
39922: PPUSH
39923: CALL_OW 298
39927: ST_TO_ADDR
// if tmp < distance then
39928: LD_VAR 0 9
39932: PUSH
39933: LD_VAR 0 10
39937: LESS
39938: IFFALSE 39960
// begin result := i ;
39940: LD_ADDR_VAR 0 5
39944: PUSH
39945: LD_VAR 0 6
39949: ST_TO_ADDR
// distance := tmp ;
39950: LD_ADDR_VAR 0 10
39954: PUSH
39955: LD_VAR 0 9
39959: ST_TO_ADDR
// end ; end ;
39960: GO 39818
39962: POP
39963: POP
// end ;
39964: LD_VAR 0 5
39968: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39969: LD_INT 0
39971: PPUSH
39972: PPUSH
// if not driver or not IsInUnit ( driver ) then
39973: LD_VAR 0 1
39977: NOT
39978: PUSH
39979: LD_VAR 0 1
39983: PPUSH
39984: CALL_OW 310
39988: NOT
39989: OR
39990: IFFALSE 39994
// exit ;
39992: GO 40084
// vehicle := IsInUnit ( driver ) ;
39994: LD_ADDR_VAR 0 3
39998: PUSH
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 310
40008: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40009: LD_VAR 0 1
40013: PPUSH
40014: LD_STRING \
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: PUSH
40044: LD_STRING E
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: LD_VAR 0 3
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PPUSH
40080: CALL_OW 446
// end ;
40084: LD_VAR 0 2
40088: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40089: LD_INT 0
40091: PPUSH
40092: PPUSH
// if not driver or not IsInUnit ( driver ) then
40093: LD_VAR 0 1
40097: NOT
40098: PUSH
40099: LD_VAR 0 1
40103: PPUSH
40104: CALL_OW 310
40108: NOT
40109: OR
40110: IFFALSE 40114
// exit ;
40112: GO 40204
// vehicle := IsInUnit ( driver ) ;
40114: LD_ADDR_VAR 0 3
40118: PUSH
40119: LD_VAR 0 1
40123: PPUSH
40124: CALL_OW 310
40128: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40129: LD_VAR 0 1
40133: PPUSH
40134: LD_STRING \
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: PUSH
40164: LD_STRING E
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_VAR 0 3
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PPUSH
40200: CALL_OW 447
// end ;
40204: LD_VAR 0 2
40208: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40209: LD_INT 0
40211: PPUSH
40212: PPUSH
40213: PPUSH
// tmp := [ ] ;
40214: LD_ADDR_VAR 0 5
40218: PUSH
40219: EMPTY
40220: ST_TO_ADDR
// for i in units do
40221: LD_ADDR_VAR 0 4
40225: PUSH
40226: LD_VAR 0 1
40230: PUSH
40231: FOR_IN
40232: IFFALSE 40270
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40234: LD_ADDR_VAR 0 5
40238: PUSH
40239: LD_VAR 0 5
40243: PPUSH
40244: LD_VAR 0 5
40248: PUSH
40249: LD_INT 1
40251: PLUS
40252: PPUSH
40253: LD_VAR 0 4
40257: PPUSH
40258: CALL_OW 256
40262: PPUSH
40263: CALL_OW 2
40267: ST_TO_ADDR
40268: GO 40231
40270: POP
40271: POP
// if not tmp then
40272: LD_VAR 0 5
40276: NOT
40277: IFFALSE 40281
// exit ;
40279: GO 40329
// if asc then
40281: LD_VAR 0 2
40285: IFFALSE 40309
// result := SortListByListAsc ( units , tmp ) else
40287: LD_ADDR_VAR 0 3
40291: PUSH
40292: LD_VAR 0 1
40296: PPUSH
40297: LD_VAR 0 5
40301: PPUSH
40302: CALL_OW 76
40306: ST_TO_ADDR
40307: GO 40329
// result := SortListByListDesc ( units , tmp ) ;
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_VAR 0 5
40323: PPUSH
40324: CALL_OW 77
40328: ST_TO_ADDR
// end ;
40329: LD_VAR 0 3
40333: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40334: LD_INT 0
40336: PPUSH
40337: PPUSH
// task := GetTaskList ( mech ) ;
40338: LD_ADDR_VAR 0 4
40342: PUSH
40343: LD_VAR 0 1
40347: PPUSH
40348: CALL_OW 437
40352: ST_TO_ADDR
// if not task then
40353: LD_VAR 0 4
40357: NOT
40358: IFFALSE 40362
// exit ;
40360: GO 40404
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40362: LD_ADDR_VAR 0 3
40366: PUSH
40367: LD_VAR 0 4
40371: PUSH
40372: LD_INT 1
40374: ARRAY
40375: PUSH
40376: LD_INT 1
40378: ARRAY
40379: PUSH
40380: LD_STRING r
40382: EQUAL
40383: PUSH
40384: LD_VAR 0 4
40388: PUSH
40389: LD_INT 1
40391: ARRAY
40392: PUSH
40393: LD_INT 4
40395: ARRAY
40396: PUSH
40397: LD_VAR 0 2
40401: EQUAL
40402: AND
40403: ST_TO_ADDR
// end ;
40404: LD_VAR 0 3
40408: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40409: LD_INT 0
40411: PPUSH
// SetDir ( unit , d ) ;
40412: LD_VAR 0 1
40416: PPUSH
40417: LD_VAR 0 4
40421: PPUSH
40422: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40426: LD_VAR 0 1
40430: PPUSH
40431: LD_VAR 0 2
40435: PPUSH
40436: LD_VAR 0 3
40440: PPUSH
40441: LD_VAR 0 5
40445: PPUSH
40446: CALL_OW 48
// end ;
40450: LD_VAR 0 6
40454: RET
// export function ToNaturalNumber ( number ) ; begin
40455: LD_INT 0
40457: PPUSH
// result := number div 1 ;
40458: LD_ADDR_VAR 0 2
40462: PUSH
40463: LD_VAR 0 1
40467: PUSH
40468: LD_INT 1
40470: DIV
40471: ST_TO_ADDR
// if number < 0 then
40472: LD_VAR 0 1
40476: PUSH
40477: LD_INT 0
40479: LESS
40480: IFFALSE 40490
// result := 0 ;
40482: LD_ADDR_VAR 0 2
40486: PUSH
40487: LD_INT 0
40489: ST_TO_ADDR
// end ;
40490: LD_VAR 0 2
40494: RET
// export function SortByClass ( units , class ) ; var un ; begin
40495: LD_INT 0
40497: PPUSH
40498: PPUSH
// if not units or not class then
40499: LD_VAR 0 1
40503: NOT
40504: PUSH
40505: LD_VAR 0 2
40509: NOT
40510: OR
40511: IFFALSE 40515
// exit ;
40513: GO 40610
// result := [ ] ;
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: EMPTY
40521: ST_TO_ADDR
// for un in units do
40522: LD_ADDR_VAR 0 4
40526: PUSH
40527: LD_VAR 0 1
40531: PUSH
40532: FOR_IN
40533: IFFALSE 40608
// if GetClass ( un ) = class then
40535: LD_VAR 0 4
40539: PPUSH
40540: CALL_OW 257
40544: PUSH
40545: LD_VAR 0 2
40549: EQUAL
40550: IFFALSE 40577
// result := Insert ( result , 1 , un ) else
40552: LD_ADDR_VAR 0 3
40556: PUSH
40557: LD_VAR 0 3
40561: PPUSH
40562: LD_INT 1
40564: PPUSH
40565: LD_VAR 0 4
40569: PPUSH
40570: CALL_OW 2
40574: ST_TO_ADDR
40575: GO 40606
// result := Replace ( result , result + 1 , un ) ;
40577: LD_ADDR_VAR 0 3
40581: PUSH
40582: LD_VAR 0 3
40586: PPUSH
40587: LD_VAR 0 3
40591: PUSH
40592: LD_INT 1
40594: PLUS
40595: PPUSH
40596: LD_VAR 0 4
40600: PPUSH
40601: CALL_OW 1
40605: ST_TO_ADDR
40606: GO 40532
40608: POP
40609: POP
// end ;
40610: LD_VAR 0 3
40614: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40615: LD_INT 0
40617: PPUSH
40618: PPUSH
40619: PPUSH
40620: PPUSH
40621: PPUSH
40622: PPUSH
40623: PPUSH
// result := [ ] ;
40624: LD_ADDR_VAR 0 4
40628: PUSH
40629: EMPTY
40630: ST_TO_ADDR
// if x - r < 0 then
40631: LD_VAR 0 1
40635: PUSH
40636: LD_VAR 0 3
40640: MINUS
40641: PUSH
40642: LD_INT 0
40644: LESS
40645: IFFALSE 40657
// min_x := 0 else
40647: LD_ADDR_VAR 0 8
40651: PUSH
40652: LD_INT 0
40654: ST_TO_ADDR
40655: GO 40673
// min_x := x - r ;
40657: LD_ADDR_VAR 0 8
40661: PUSH
40662: LD_VAR 0 1
40666: PUSH
40667: LD_VAR 0 3
40671: MINUS
40672: ST_TO_ADDR
// if y - r < 0 then
40673: LD_VAR 0 2
40677: PUSH
40678: LD_VAR 0 3
40682: MINUS
40683: PUSH
40684: LD_INT 0
40686: LESS
40687: IFFALSE 40699
// min_y := 0 else
40689: LD_ADDR_VAR 0 7
40693: PUSH
40694: LD_INT 0
40696: ST_TO_ADDR
40697: GO 40715
// min_y := y - r ;
40699: LD_ADDR_VAR 0 7
40703: PUSH
40704: LD_VAR 0 2
40708: PUSH
40709: LD_VAR 0 3
40713: MINUS
40714: ST_TO_ADDR
// max_x := x + r ;
40715: LD_ADDR_VAR 0 9
40719: PUSH
40720: LD_VAR 0 1
40724: PUSH
40725: LD_VAR 0 3
40729: PLUS
40730: ST_TO_ADDR
// max_y := y + r ;
40731: LD_ADDR_VAR 0 10
40735: PUSH
40736: LD_VAR 0 2
40740: PUSH
40741: LD_VAR 0 3
40745: PLUS
40746: ST_TO_ADDR
// for _x = min_x to max_x do
40747: LD_ADDR_VAR 0 5
40751: PUSH
40752: DOUBLE
40753: LD_VAR 0 8
40757: DEC
40758: ST_TO_ADDR
40759: LD_VAR 0 9
40763: PUSH
40764: FOR_TO
40765: IFFALSE 40866
// for _y = min_y to max_y do
40767: LD_ADDR_VAR 0 6
40771: PUSH
40772: DOUBLE
40773: LD_VAR 0 7
40777: DEC
40778: ST_TO_ADDR
40779: LD_VAR 0 10
40783: PUSH
40784: FOR_TO
40785: IFFALSE 40862
// begin if not ValidHex ( _x , _y ) then
40787: LD_VAR 0 5
40791: PPUSH
40792: LD_VAR 0 6
40796: PPUSH
40797: CALL_OW 488
40801: NOT
40802: IFFALSE 40806
// continue ;
40804: GO 40784
// if GetResourceTypeXY ( _x , _y ) then
40806: LD_VAR 0 5
40810: PPUSH
40811: LD_VAR 0 6
40815: PPUSH
40816: CALL_OW 283
40820: IFFALSE 40860
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40822: LD_ADDR_VAR 0 4
40826: PUSH
40827: LD_VAR 0 4
40831: PPUSH
40832: LD_VAR 0 4
40836: PUSH
40837: LD_INT 1
40839: PLUS
40840: PPUSH
40841: LD_VAR 0 5
40845: PUSH
40846: LD_VAR 0 6
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PPUSH
40855: CALL_OW 1
40859: ST_TO_ADDR
// end ;
40860: GO 40784
40862: POP
40863: POP
40864: GO 40764
40866: POP
40867: POP
// end ;
40868: LD_VAR 0 4
40872: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40873: LD_INT 0
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
40879: PPUSH
40880: PPUSH
40881: PPUSH
40882: PPUSH
// if not units then
40883: LD_VAR 0 1
40887: NOT
40888: IFFALSE 40892
// exit ;
40890: GO 41420
// result := UnitFilter ( units , [ f_ok ] ) ;
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_VAR 0 1
40901: PPUSH
40902: LD_INT 50
40904: PUSH
40905: EMPTY
40906: LIST
40907: PPUSH
40908: CALL_OW 72
40912: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40913: LD_ADDR_VAR 0 8
40917: PUSH
40918: LD_VAR 0 1
40922: PUSH
40923: LD_INT 1
40925: ARRAY
40926: PPUSH
40927: CALL_OW 255
40931: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40932: LD_ADDR_VAR 0 10
40936: PUSH
40937: LD_INT 29
40939: PUSH
40940: LD_INT 91
40942: PUSH
40943: LD_INT 49
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: ST_TO_ADDR
// if not result then
40951: LD_VAR 0 3
40955: NOT
40956: IFFALSE 40960
// exit ;
40958: GO 41420
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40960: LD_ADDR_VAR 0 5
40964: PUSH
40965: LD_INT 81
40967: PUSH
40968: LD_VAR 0 8
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PPUSH
40977: CALL_OW 69
40981: ST_TO_ADDR
// for i in result do
40982: LD_ADDR_VAR 0 4
40986: PUSH
40987: LD_VAR 0 3
40991: PUSH
40992: FOR_IN
40993: IFFALSE 41418
// begin tag := GetTag ( i ) + 1 ;
40995: LD_ADDR_VAR 0 9
40999: PUSH
41000: LD_VAR 0 4
41004: PPUSH
41005: CALL_OW 110
41009: PUSH
41010: LD_INT 1
41012: PLUS
41013: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41014: LD_ADDR_VAR 0 7
41018: PUSH
41019: LD_VAR 0 4
41023: PPUSH
41024: CALL_OW 250
41028: PPUSH
41029: LD_VAR 0 4
41033: PPUSH
41034: CALL_OW 251
41038: PPUSH
41039: LD_INT 4
41041: PPUSH
41042: CALL 40615 0 3
41046: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41047: LD_VAR 0 4
41051: PPUSH
41052: CALL_OW 247
41056: PUSH
41057: LD_INT 2
41059: EQUAL
41060: PUSH
41061: LD_VAR 0 7
41065: PUSH
41066: LD_INT 2
41068: GREATER
41069: AND
41070: PUSH
41071: LD_VAR 0 4
41075: PPUSH
41076: CALL_OW 264
41080: PUSH
41081: LD_VAR 0 10
41085: IN
41086: NOT
41087: AND
41088: IFFALSE 41127
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41090: LD_VAR 0 4
41094: PPUSH
41095: LD_VAR 0 7
41099: PUSH
41100: LD_INT 1
41102: ARRAY
41103: PUSH
41104: LD_INT 1
41106: ARRAY
41107: PPUSH
41108: LD_VAR 0 7
41112: PUSH
41113: LD_INT 1
41115: ARRAY
41116: PUSH
41117: LD_INT 2
41119: ARRAY
41120: PPUSH
41121: CALL_OW 116
41125: GO 41416
// if path > tag then
41127: LD_VAR 0 2
41131: PUSH
41132: LD_VAR 0 9
41136: GREATER
41137: IFFALSE 41345
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41139: LD_ADDR_VAR 0 6
41143: PUSH
41144: LD_VAR 0 5
41148: PPUSH
41149: LD_INT 91
41151: PUSH
41152: LD_VAR 0 4
41156: PUSH
41157: LD_INT 8
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: LIST
41164: PPUSH
41165: CALL_OW 72
41169: ST_TO_ADDR
// if nearEnemy then
41170: LD_VAR 0 6
41174: IFFALSE 41243
// begin if GetWeapon ( i ) = ru_time_lapser then
41176: LD_VAR 0 4
41180: PPUSH
41181: CALL_OW 264
41185: PUSH
41186: LD_INT 49
41188: EQUAL
41189: IFFALSE 41217
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41191: LD_VAR 0 4
41195: PPUSH
41196: LD_VAR 0 6
41200: PPUSH
41201: LD_VAR 0 4
41205: PPUSH
41206: CALL_OW 74
41210: PPUSH
41211: CALL_OW 112
41215: GO 41241
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41217: LD_VAR 0 4
41221: PPUSH
41222: LD_VAR 0 6
41226: PPUSH
41227: LD_VAR 0 4
41231: PPUSH
41232: CALL_OW 74
41236: PPUSH
41237: CALL 42491 0 2
// end else
41241: GO 41343
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41243: LD_VAR 0 4
41247: PPUSH
41248: LD_VAR 0 2
41252: PUSH
41253: LD_VAR 0 9
41257: ARRAY
41258: PUSH
41259: LD_INT 1
41261: ARRAY
41262: PPUSH
41263: LD_VAR 0 2
41267: PUSH
41268: LD_VAR 0 9
41272: ARRAY
41273: PUSH
41274: LD_INT 2
41276: ARRAY
41277: PPUSH
41278: CALL_OW 297
41282: PUSH
41283: LD_INT 6
41285: GREATER
41286: IFFALSE 41329
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41288: LD_VAR 0 4
41292: PPUSH
41293: LD_VAR 0 2
41297: PUSH
41298: LD_VAR 0 9
41302: ARRAY
41303: PUSH
41304: LD_INT 1
41306: ARRAY
41307: PPUSH
41308: LD_VAR 0 2
41312: PUSH
41313: LD_VAR 0 9
41317: ARRAY
41318: PUSH
41319: LD_INT 2
41321: ARRAY
41322: PPUSH
41323: CALL_OW 114
41327: GO 41343
// SetTag ( i , tag ) ;
41329: LD_VAR 0 4
41333: PPUSH
41334: LD_VAR 0 9
41338: PPUSH
41339: CALL_OW 109
// end else
41343: GO 41416
// if enemy then
41345: LD_VAR 0 5
41349: IFFALSE 41416
// begin if GetWeapon ( i ) = ru_time_lapser then
41351: LD_VAR 0 4
41355: PPUSH
41356: CALL_OW 264
41360: PUSH
41361: LD_INT 49
41363: EQUAL
41364: IFFALSE 41392
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41366: LD_VAR 0 4
41370: PPUSH
41371: LD_VAR 0 5
41375: PPUSH
41376: LD_VAR 0 4
41380: PPUSH
41381: CALL_OW 74
41385: PPUSH
41386: CALL_OW 112
41390: GO 41416
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41392: LD_VAR 0 4
41396: PPUSH
41397: LD_VAR 0 5
41401: PPUSH
41402: LD_VAR 0 4
41406: PPUSH
41407: CALL_OW 74
41411: PPUSH
41412: CALL 42491 0 2
// end ; end ;
41416: GO 40992
41418: POP
41419: POP
// end ;
41420: LD_VAR 0 3
41424: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41425: LD_INT 0
41427: PPUSH
41428: PPUSH
41429: PPUSH
// if not unit or IsInUnit ( unit ) then
41430: LD_VAR 0 1
41434: NOT
41435: PUSH
41436: LD_VAR 0 1
41440: PPUSH
41441: CALL_OW 310
41445: OR
41446: IFFALSE 41450
// exit ;
41448: GO 41541
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41450: LD_ADDR_VAR 0 4
41454: PUSH
41455: LD_VAR 0 1
41459: PPUSH
41460: CALL_OW 250
41464: PPUSH
41465: LD_VAR 0 2
41469: PPUSH
41470: LD_INT 1
41472: PPUSH
41473: CALL_OW 272
41477: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41478: LD_ADDR_VAR 0 5
41482: PUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: CALL_OW 251
41492: PPUSH
41493: LD_VAR 0 2
41497: PPUSH
41498: LD_INT 1
41500: PPUSH
41501: CALL_OW 273
41505: ST_TO_ADDR
// if ValidHex ( x , y ) then
41506: LD_VAR 0 4
41510: PPUSH
41511: LD_VAR 0 5
41515: PPUSH
41516: CALL_OW 488
41520: IFFALSE 41541
// ComTurnXY ( unit , x , y ) ;
41522: LD_VAR 0 1
41526: PPUSH
41527: LD_VAR 0 4
41531: PPUSH
41532: LD_VAR 0 5
41536: PPUSH
41537: CALL_OW 118
// end ;
41541: LD_VAR 0 3
41545: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41546: LD_INT 0
41548: PPUSH
41549: PPUSH
// result := false ;
41550: LD_ADDR_VAR 0 3
41554: PUSH
41555: LD_INT 0
41557: ST_TO_ADDR
// if not units then
41558: LD_VAR 0 2
41562: NOT
41563: IFFALSE 41567
// exit ;
41565: GO 41612
// for i in units do
41567: LD_ADDR_VAR 0 4
41571: PUSH
41572: LD_VAR 0 2
41576: PUSH
41577: FOR_IN
41578: IFFALSE 41610
// if See ( side , i ) then
41580: LD_VAR 0 1
41584: PPUSH
41585: LD_VAR 0 4
41589: PPUSH
41590: CALL_OW 292
41594: IFFALSE 41608
// begin result := true ;
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_INT 1
41603: ST_TO_ADDR
// exit ;
41604: POP
41605: POP
41606: GO 41612
// end ;
41608: GO 41577
41610: POP
41611: POP
// end ;
41612: LD_VAR 0 3
41616: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41617: LD_INT 0
41619: PPUSH
41620: PPUSH
41621: PPUSH
41622: PPUSH
// if not unit or not points then
41623: LD_VAR 0 1
41627: NOT
41628: PUSH
41629: LD_VAR 0 2
41633: NOT
41634: OR
41635: IFFALSE 41639
// exit ;
41637: GO 41729
// dist := 99999 ;
41639: LD_ADDR_VAR 0 5
41643: PUSH
41644: LD_INT 99999
41646: ST_TO_ADDR
// for i in points do
41647: LD_ADDR_VAR 0 4
41651: PUSH
41652: LD_VAR 0 2
41656: PUSH
41657: FOR_IN
41658: IFFALSE 41727
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41660: LD_ADDR_VAR 0 6
41664: PUSH
41665: LD_VAR 0 1
41669: PPUSH
41670: LD_VAR 0 4
41674: PUSH
41675: LD_INT 1
41677: ARRAY
41678: PPUSH
41679: LD_VAR 0 4
41683: PUSH
41684: LD_INT 2
41686: ARRAY
41687: PPUSH
41688: CALL_OW 297
41692: ST_TO_ADDR
// if tmpDist < dist then
41693: LD_VAR 0 6
41697: PUSH
41698: LD_VAR 0 5
41702: LESS
41703: IFFALSE 41725
// begin result := i ;
41705: LD_ADDR_VAR 0 3
41709: PUSH
41710: LD_VAR 0 4
41714: ST_TO_ADDR
// dist := tmpDist ;
41715: LD_ADDR_VAR 0 5
41719: PUSH
41720: LD_VAR 0 6
41724: ST_TO_ADDR
// end ; end ;
41725: GO 41657
41727: POP
41728: POP
// end ;
41729: LD_VAR 0 3
41733: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41734: LD_INT 0
41736: PPUSH
// uc_side := side ;
41737: LD_ADDR_OWVAR 20
41741: PUSH
41742: LD_VAR 0 1
41746: ST_TO_ADDR
// uc_nation := 3 ;
41747: LD_ADDR_OWVAR 21
41751: PUSH
41752: LD_INT 3
41754: ST_TO_ADDR
// vc_chassis := 25 ;
41755: LD_ADDR_OWVAR 37
41759: PUSH
41760: LD_INT 25
41762: ST_TO_ADDR
// vc_engine := engine_siberite ;
41763: LD_ADDR_OWVAR 39
41767: PUSH
41768: LD_INT 3
41770: ST_TO_ADDR
// vc_control := control_computer ;
41771: LD_ADDR_OWVAR 38
41775: PUSH
41776: LD_INT 3
41778: ST_TO_ADDR
// vc_weapon := 59 ;
41779: LD_ADDR_OWVAR 40
41783: PUSH
41784: LD_INT 59
41786: ST_TO_ADDR
// result := CreateVehicle ;
41787: LD_ADDR_VAR 0 5
41791: PUSH
41792: CALL_OW 45
41796: ST_TO_ADDR
// SetDir ( result , d ) ;
41797: LD_VAR 0 5
41801: PPUSH
41802: LD_VAR 0 4
41806: PPUSH
41807: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41811: LD_VAR 0 5
41815: PPUSH
41816: LD_VAR 0 2
41820: PPUSH
41821: LD_VAR 0 3
41825: PPUSH
41826: LD_INT 0
41828: PPUSH
41829: CALL_OW 48
// end ;
41833: LD_VAR 0 5
41837: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41838: LD_INT 0
41840: PPUSH
41841: PPUSH
41842: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41843: LD_ADDR_VAR 0 2
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41866: LD_VAR 0 1
41870: NOT
41871: PUSH
41872: LD_VAR 0 1
41876: PPUSH
41877: CALL_OW 264
41881: PUSH
41882: LD_INT 12
41884: PUSH
41885: LD_INT 51
41887: PUSH
41888: LD_INT 32
41890: PUSH
41891: LD_INT 89
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: IN
41900: NOT
41901: OR
41902: IFFALSE 41906
// exit ;
41904: GO 42004
// for i := 1 to 3 do
41906: LD_ADDR_VAR 0 3
41910: PUSH
41911: DOUBLE
41912: LD_INT 1
41914: DEC
41915: ST_TO_ADDR
41916: LD_INT 3
41918: PUSH
41919: FOR_TO
41920: IFFALSE 42002
// begin tmp := GetCargo ( cargo , i ) ;
41922: LD_ADDR_VAR 0 4
41926: PUSH
41927: LD_VAR 0 1
41931: PPUSH
41932: LD_VAR 0 3
41936: PPUSH
41937: CALL_OW 289
41941: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41942: LD_ADDR_VAR 0 2
41946: PUSH
41947: LD_VAR 0 2
41951: PPUSH
41952: LD_VAR 0 3
41956: PPUSH
41957: LD_VAR 0 4
41961: PPUSH
41962: CALL_OW 1
41966: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41967: LD_ADDR_VAR 0 2
41971: PUSH
41972: LD_VAR 0 2
41976: PPUSH
41977: LD_INT 4
41979: PPUSH
41980: LD_VAR 0 2
41984: PUSH
41985: LD_INT 4
41987: ARRAY
41988: PUSH
41989: LD_VAR 0 4
41993: PLUS
41994: PPUSH
41995: CALL_OW 1
41999: ST_TO_ADDR
// end ;
42000: GO 41919
42002: POP
42003: POP
// end ;
42004: LD_VAR 0 2
42008: RET
// export function Length ( array ) ; begin
42009: LD_INT 0
42011: PPUSH
// result := array + 0 ;
42012: LD_ADDR_VAR 0 2
42016: PUSH
42017: LD_VAR 0 1
42021: PUSH
42022: LD_INT 0
42024: PLUS
42025: ST_TO_ADDR
// end ;
42026: LD_VAR 0 2
42030: RET
// export function PrepareArray ( array ) ; begin
42031: LD_INT 0
42033: PPUSH
// result := array diff 0 ;
42034: LD_ADDR_VAR 0 2
42038: PUSH
42039: LD_VAR 0 1
42043: PUSH
42044: LD_INT 0
42046: DIFF
42047: ST_TO_ADDR
// if not result [ 1 ] then
42048: LD_VAR 0 2
42052: PUSH
42053: LD_INT 1
42055: ARRAY
42056: NOT
42057: IFFALSE 42077
// result := Delete ( result , 1 ) ;
42059: LD_ADDR_VAR 0 2
42063: PUSH
42064: LD_VAR 0 2
42068: PPUSH
42069: LD_INT 1
42071: PPUSH
42072: CALL_OW 3
42076: ST_TO_ADDR
// end ;
42077: LD_VAR 0 2
42081: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42082: LD_INT 0
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
// sibRocketRange := 25 ;
42088: LD_ADDR_VAR 0 6
42092: PUSH
42093: LD_INT 25
42095: ST_TO_ADDR
// result := false ;
42096: LD_ADDR_VAR 0 4
42100: PUSH
42101: LD_INT 0
42103: ST_TO_ADDR
// for i := 0 to 5 do
42104: LD_ADDR_VAR 0 5
42108: PUSH
42109: DOUBLE
42110: LD_INT 0
42112: DEC
42113: ST_TO_ADDR
42114: LD_INT 5
42116: PUSH
42117: FOR_TO
42118: IFFALSE 42185
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42120: LD_VAR 0 1
42124: PPUSH
42125: LD_VAR 0 5
42129: PPUSH
42130: LD_VAR 0 6
42134: PPUSH
42135: CALL_OW 272
42139: PPUSH
42140: LD_VAR 0 2
42144: PPUSH
42145: LD_VAR 0 5
42149: PPUSH
42150: LD_VAR 0 6
42154: PPUSH
42155: CALL_OW 273
42159: PPUSH
42160: LD_VAR 0 3
42164: PPUSH
42165: CALL_OW 309
42169: IFFALSE 42183
// begin result := true ;
42171: LD_ADDR_VAR 0 4
42175: PUSH
42176: LD_INT 1
42178: ST_TO_ADDR
// exit ;
42179: POP
42180: POP
42181: GO 42187
// end ;
42183: GO 42117
42185: POP
42186: POP
// end ;
42187: LD_VAR 0 4
42191: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42192: LD_INT 0
42194: PPUSH
42195: PPUSH
42196: PPUSH
// if btype = b_depot then
42197: LD_VAR 0 2
42201: PUSH
42202: LD_INT 0
42204: EQUAL
42205: IFFALSE 42217
// begin result := true ;
42207: LD_ADDR_VAR 0 3
42211: PUSH
42212: LD_INT 1
42214: ST_TO_ADDR
// exit ;
42215: GO 42333
// end ; pom := GetBase ( depot ) ;
42217: LD_ADDR_VAR 0 4
42221: PUSH
42222: LD_VAR 0 1
42226: PPUSH
42227: CALL_OW 274
42231: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42232: LD_ADDR_VAR 0 5
42236: PUSH
42237: LD_VAR 0 2
42241: PPUSH
42242: LD_VAR 0 1
42246: PPUSH
42247: CALL_OW 248
42251: PPUSH
42252: CALL_OW 450
42256: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_VAR 0 4
42266: PPUSH
42267: LD_INT 1
42269: PPUSH
42270: CALL_OW 275
42274: PUSH
42275: LD_VAR 0 5
42279: PUSH
42280: LD_INT 1
42282: ARRAY
42283: GREATEREQUAL
42284: PUSH
42285: LD_VAR 0 4
42289: PPUSH
42290: LD_INT 2
42292: PPUSH
42293: CALL_OW 275
42297: PUSH
42298: LD_VAR 0 5
42302: PUSH
42303: LD_INT 2
42305: ARRAY
42306: GREATEREQUAL
42307: AND
42308: PUSH
42309: LD_VAR 0 4
42313: PPUSH
42314: LD_INT 3
42316: PPUSH
42317: CALL_OW 275
42321: PUSH
42322: LD_VAR 0 5
42326: PUSH
42327: LD_INT 3
42329: ARRAY
42330: GREATEREQUAL
42331: AND
42332: ST_TO_ADDR
// end ;
42333: LD_VAR 0 3
42337: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42338: LD_INT 0
42340: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42341: LD_VAR 0 1
42345: PPUSH
42346: LD_VAR 0 2
42350: PPUSH
42351: LD_INT 0
42353: PPUSH
42354: LD_INT 0
42356: PPUSH
42357: LD_INT 1
42359: PPUSH
42360: LD_INT 0
42362: PPUSH
42363: CALL_OW 587
// end ;
42367: LD_VAR 0 3
42371: RET
// export function CenterOnNow ( unit ) ; begin
42372: LD_INT 0
42374: PPUSH
// result := IsInUnit ( unit ) ;
42375: LD_ADDR_VAR 0 2
42379: PUSH
42380: LD_VAR 0 1
42384: PPUSH
42385: CALL_OW 310
42389: ST_TO_ADDR
// if not result then
42390: LD_VAR 0 2
42394: NOT
42395: IFFALSE 42407
// result := unit ;
42397: LD_ADDR_VAR 0 2
42401: PUSH
42402: LD_VAR 0 1
42406: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42407: LD_VAR 0 1
42411: PPUSH
42412: CALL_OW 87
// end ;
42416: LD_VAR 0 2
42420: RET
// export function ComMoveHex ( unit , hex ) ; begin
42421: LD_INT 0
42423: PPUSH
// if not hex then
42424: LD_VAR 0 2
42428: NOT
42429: IFFALSE 42433
// exit ;
42431: GO 42486
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42433: LD_VAR 0 2
42437: PUSH
42438: LD_INT 1
42440: ARRAY
42441: PPUSH
42442: LD_VAR 0 2
42446: PUSH
42447: LD_INT 2
42449: ARRAY
42450: PPUSH
42451: CALL_OW 428
42455: IFFALSE 42459
// exit ;
42457: GO 42486
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42459: LD_VAR 0 1
42463: PPUSH
42464: LD_VAR 0 2
42468: PUSH
42469: LD_INT 1
42471: ARRAY
42472: PPUSH
42473: LD_VAR 0 2
42477: PUSH
42478: LD_INT 2
42480: ARRAY
42481: PPUSH
42482: CALL_OW 111
// end ;
42486: LD_VAR 0 3
42490: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42491: LD_INT 0
42493: PPUSH
42494: PPUSH
42495: PPUSH
// if not unit or not enemy then
42496: LD_VAR 0 1
42500: NOT
42501: PUSH
42502: LD_VAR 0 2
42506: NOT
42507: OR
42508: IFFALSE 42512
// exit ;
42510: GO 42636
// x := GetX ( enemy ) ;
42512: LD_ADDR_VAR 0 4
42516: PUSH
42517: LD_VAR 0 2
42521: PPUSH
42522: CALL_OW 250
42526: ST_TO_ADDR
// y := GetY ( enemy ) ;
42527: LD_ADDR_VAR 0 5
42531: PUSH
42532: LD_VAR 0 2
42536: PPUSH
42537: CALL_OW 251
42541: ST_TO_ADDR
// if ValidHex ( x , y ) then
42542: LD_VAR 0 4
42546: PPUSH
42547: LD_VAR 0 5
42551: PPUSH
42552: CALL_OW 488
42556: IFFALSE 42636
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
42558: LD_VAR 0 2
42562: PPUSH
42563: CALL_OW 247
42567: PUSH
42568: LD_INT 3
42570: PUSH
42571: LD_INT 2
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: IN
42578: PUSH
42579: LD_VAR 0 1
42583: PPUSH
42584: CALL_OW 255
42588: PPUSH
42589: LD_VAR 0 2
42593: PPUSH
42594: CALL_OW 292
42598: OR
42599: IFFALSE 42617
// ComAttackUnit ( unit , enemy ) else
42601: LD_VAR 0 1
42605: PPUSH
42606: LD_VAR 0 2
42610: PPUSH
42611: CALL_OW 115
42615: GO 42636
// ComAgressiveMove ( unit , x , y ) ;
42617: LD_VAR 0 1
42621: PPUSH
42622: LD_VAR 0 4
42626: PPUSH
42627: LD_VAR 0 5
42631: PPUSH
42632: CALL_OW 114
// end ;
42636: LD_VAR 0 3
42640: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
42641: LD_INT 0
42643: PPUSH
42644: PPUSH
42645: PPUSH
// list := AreaToList ( area , 0 ) ;
42646: LD_ADDR_VAR 0 5
42650: PUSH
42651: LD_VAR 0 1
42655: PPUSH
42656: LD_INT 0
42658: PPUSH
42659: CALL_OW 517
42663: ST_TO_ADDR
// if not list then
42664: LD_VAR 0 5
42668: NOT
42669: IFFALSE 42673
// exit ;
42671: GO 42803
// if all then
42673: LD_VAR 0 2
42677: IFFALSE 42765
// begin for i := 1 to list [ 1 ] do
42679: LD_ADDR_VAR 0 4
42683: PUSH
42684: DOUBLE
42685: LD_INT 1
42687: DEC
42688: ST_TO_ADDR
42689: LD_VAR 0 5
42693: PUSH
42694: LD_INT 1
42696: ARRAY
42697: PUSH
42698: FOR_TO
42699: IFFALSE 42761
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
42701: LD_ADDR_VAR 0 3
42705: PUSH
42706: LD_VAR 0 3
42710: PPUSH
42711: LD_VAR 0 3
42715: PUSH
42716: LD_INT 1
42718: PLUS
42719: PPUSH
42720: LD_VAR 0 5
42724: PUSH
42725: LD_INT 1
42727: ARRAY
42728: PUSH
42729: LD_VAR 0 4
42733: ARRAY
42734: PUSH
42735: LD_VAR 0 5
42739: PUSH
42740: LD_INT 2
42742: ARRAY
42743: PUSH
42744: LD_VAR 0 4
42748: ARRAY
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PPUSH
42754: CALL_OW 1
42758: ST_TO_ADDR
42759: GO 42698
42761: POP
42762: POP
// exit ;
42763: GO 42803
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: LD_VAR 0 5
42774: PUSH
42775: LD_INT 1
42777: ARRAY
42778: PUSH
42779: LD_INT 1
42781: ARRAY
42782: PUSH
42783: LD_VAR 0 5
42787: PUSH
42788: LD_INT 2
42790: ARRAY
42791: PUSH
42792: LD_INT 1
42794: ARRAY
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: EMPTY
42801: LIST
42802: ST_TO_ADDR
// end ;
42803: LD_VAR 0 3
42807: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
42808: LD_INT 0
42810: PPUSH
42811: PPUSH
// list := AreaToList ( area , 0 ) ;
42812: LD_ADDR_VAR 0 4
42816: PUSH
42817: LD_VAR 0 1
42821: PPUSH
42822: LD_INT 0
42824: PPUSH
42825: CALL_OW 517
42829: ST_TO_ADDR
// if not list then
42830: LD_VAR 0 4
42834: NOT
42835: IFFALSE 42839
// exit ;
42837: GO 42880
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
42839: LD_ADDR_VAR 0 3
42843: PUSH
42844: LD_VAR 0 4
42848: PUSH
42849: LD_INT 1
42851: ARRAY
42852: PUSH
42853: LD_INT 1
42855: ARRAY
42856: PUSH
42857: LD_VAR 0 4
42861: PUSH
42862: LD_INT 2
42864: ARRAY
42865: PUSH
42866: LD_INT 1
42868: ARRAY
42869: PUSH
42870: LD_VAR 0 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: ST_TO_ADDR
// end ;
42880: LD_VAR 0 3
42884: RET
// export function First ( array ) ; begin
42885: LD_INT 0
42887: PPUSH
// if not array then
42888: LD_VAR 0 1
42892: NOT
42893: IFFALSE 42897
// exit ;
42895: GO 42911
// result := array [ 1 ] ;
42897: LD_ADDR_VAR 0 2
42901: PUSH
42902: LD_VAR 0 1
42906: PUSH
42907: LD_INT 1
42909: ARRAY
42910: ST_TO_ADDR
// end ;
42911: LD_VAR 0 2
42915: RET
// export function Last ( array ) ; begin
42916: LD_INT 0
42918: PPUSH
// if not array then
42919: LD_VAR 0 1
42923: NOT
42924: IFFALSE 42928
// exit ;
42926: GO 42944
// result := array [ array ] ;
42928: LD_ADDR_VAR 0 2
42932: PUSH
42933: LD_VAR 0 1
42937: PUSH
42938: LD_VAR 0 1
42942: ARRAY
42943: ST_TO_ADDR
// end ;
42944: LD_VAR 0 2
42948: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
42949: LD_INT 0
42951: PPUSH
42952: PPUSH
// result := [ ] ;
42953: LD_ADDR_VAR 0 5
42957: PUSH
42958: EMPTY
42959: ST_TO_ADDR
// if not array then
42960: LD_VAR 0 1
42964: NOT
42965: IFFALSE 42969
// exit ;
42967: GO 43081
// for i := 1 to array do
42969: LD_ADDR_VAR 0 6
42973: PUSH
42974: DOUBLE
42975: LD_INT 1
42977: DEC
42978: ST_TO_ADDR
42979: LD_VAR 0 1
42983: PUSH
42984: FOR_TO
42985: IFFALSE 43079
// if array [ i ] [ index ] = value then
42987: LD_VAR 0 1
42991: PUSH
42992: LD_VAR 0 6
42996: ARRAY
42997: PUSH
42998: LD_VAR 0 2
43002: ARRAY
43003: PUSH
43004: LD_VAR 0 3
43008: EQUAL
43009: IFFALSE 43077
// begin if indexColumn then
43011: LD_VAR 0 4
43015: IFFALSE 43051
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43017: LD_ADDR_VAR 0 5
43021: PUSH
43022: LD_VAR 0 5
43026: PPUSH
43027: LD_VAR 0 1
43031: PUSH
43032: LD_VAR 0 6
43036: ARRAY
43037: PUSH
43038: LD_VAR 0 4
43042: ARRAY
43043: PPUSH
43044: CALL 38269 0 2
43048: ST_TO_ADDR
43049: GO 43077
// result := Join ( result , array [ i ] ) ;
43051: LD_ADDR_VAR 0 5
43055: PUSH
43056: LD_VAR 0 5
43060: PPUSH
43061: LD_VAR 0 1
43065: PUSH
43066: LD_VAR 0 6
43070: ARRAY
43071: PPUSH
43072: CALL 38269 0 2
43076: ST_TO_ADDR
// end ;
43077: GO 42984
43079: POP
43080: POP
// end ;
43081: LD_VAR 0 5
43085: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43086: LD_INT 0
43088: PPUSH
// if not vehicles or not parkingPoint then
43089: LD_VAR 0 1
43093: NOT
43094: PUSH
43095: LD_VAR 0 2
43099: NOT
43100: OR
43101: IFFALSE 43105
// exit ;
43103: GO 43203
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43105: LD_ADDR_VAR 0 1
43109: PUSH
43110: LD_VAR 0 1
43114: PPUSH
43115: LD_INT 50
43117: PUSH
43118: EMPTY
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: LD_INT 92
43126: PUSH
43127: LD_VAR 0 2
43131: PUSH
43132: LD_INT 1
43134: ARRAY
43135: PUSH
43136: LD_VAR 0 2
43140: PUSH
43141: LD_INT 2
43143: ARRAY
43144: PUSH
43145: LD_INT 8
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PPUSH
43162: CALL_OW 72
43166: ST_TO_ADDR
// if not vehicles then
43167: LD_VAR 0 1
43171: NOT
43172: IFFALSE 43176
// exit ;
43174: GO 43203
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43176: LD_VAR 0 1
43180: PPUSH
43181: LD_VAR 0 2
43185: PUSH
43186: LD_INT 1
43188: ARRAY
43189: PPUSH
43190: LD_VAR 0 2
43194: PUSH
43195: LD_INT 2
43197: ARRAY
43198: PPUSH
43199: CALL_OW 111
// end ;
43203: LD_VAR 0 3
43207: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43208: LD_INT 0
43210: PPUSH
43211: PPUSH
43212: PPUSH
// if not side or not area then
43213: LD_VAR 0 1
43217: NOT
43218: PUSH
43219: LD_VAR 0 2
43223: NOT
43224: OR
43225: IFFALSE 43229
// exit ;
43227: GO 43348
// tmp := AreaToList ( area , 0 ) ;
43229: LD_ADDR_VAR 0 5
43233: PUSH
43234: LD_VAR 0 2
43238: PPUSH
43239: LD_INT 0
43241: PPUSH
43242: CALL_OW 517
43246: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43247: LD_ADDR_VAR 0 4
43251: PUSH
43252: DOUBLE
43253: LD_INT 1
43255: DEC
43256: ST_TO_ADDR
43257: LD_VAR 0 5
43261: PUSH
43262: LD_INT 1
43264: ARRAY
43265: PUSH
43266: FOR_TO
43267: IFFALSE 43346
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43269: LD_VAR 0 5
43273: PUSH
43274: LD_INT 1
43276: ARRAY
43277: PUSH
43278: LD_VAR 0 4
43282: ARRAY
43283: PPUSH
43284: LD_VAR 0 5
43288: PUSH
43289: LD_INT 2
43291: ARRAY
43292: PUSH
43293: LD_VAR 0 4
43297: ARRAY
43298: PPUSH
43299: CALL_OW 351
43303: IFFALSE 43344
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43305: LD_VAR 0 5
43309: PUSH
43310: LD_INT 1
43312: ARRAY
43313: PUSH
43314: LD_VAR 0 4
43318: ARRAY
43319: PPUSH
43320: LD_VAR 0 5
43324: PUSH
43325: LD_INT 2
43327: ARRAY
43328: PUSH
43329: LD_VAR 0 4
43333: ARRAY
43334: PPUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: CALL_OW 244
// end ;
43344: GO 43266
43346: POP
43347: POP
// end ;
43348: LD_VAR 0 3
43352: RET
