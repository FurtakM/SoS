// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// Init ;
   8: CALL 25 0 0
// DebugMode ;
  12: CALL 80 0 0
// PrepareAmerican ;
  16: CALL 104 0 0
// Action ;
  20: CALL 2106 0 0
// end ;
  24: END
// export debug ; export mission_prefix , mission_prefix_prev ; export donaldson_commander , brown_commander , save_group ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// mission_prefix := 05a_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 05a_
  43: ST_TO_ADDR
// mission_prefix_prev := 04_ ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_STRING 04_
  51: ST_TO_ADDR
// donaldson_commander := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// brown_commander := false ;
  60: LD_ADDR_EXP 5
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// save_group := [ ] ;
  68: LD_ADDR_EXP 6
  72: PUSH
  73: EMPTY
  74: ST_TO_ADDR
// end ;
  75: LD_VAR 0 1
  79: RET
// function DebugMode ; begin
  80: LD_INT 0
  82: PPUSH
// if not debug then
  83: LD_EXP 1
  87: NOT
  88: IFFALSE 92
// exit ;
  90: GO 99
// FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// end ; end_of_file
  99: LD_VAR 0 1
 103: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown ; export function PrepareAmerican ; var others3 , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , tmp ; begin
 104: LD_INT 0
 106: PPUSH
 107: PPUSH
 108: PPUSH
 109: PPUSH
 110: PPUSH
 111: PPUSH
 112: PPUSH
 113: PPUSH
 114: PPUSH
 115: PPUSH
 116: PPUSH
 117: PPUSH
 118: PPUSH
// PrepareBase ;
 119: CALL 1790 0 0
// uc_side := 1 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 1
 130: ST_TO_ADDR
// uc_nation := 1 ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 1
 138: ST_TO_ADDR
// team := [ ] ;
 139: LD_ADDR_VAR 0 5
 143: PUSH
 144: EMPTY
 145: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 146: LD_ADDR_EXP 7
 150: PUSH
 151: LD_STRING JMM
 153: PPUSH
 154: LD_EXP 1
 158: NOT
 159: PPUSH
 160: CALL 4437 0 2
 164: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ) ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_STRING Gladstone
 172: PPUSH
 173: LD_INT 0
 175: PPUSH
 176: CALL 4437 0 2
 180: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 181: LD_ADDR_EXP 9
 185: PUSH
 186: LD_STRING Frank
 188: PPUSH
 189: LD_EXP 1
 193: NOT
 194: PPUSH
 195: CALL 4437 0 2
 199: ST_TO_ADDR
// if Frank then
 200: LD_EXP 9
 204: IFFALSE 222
// team := team ^ Frank ;
 206: LD_ADDR_VAR 0 5
 210: PUSH
 211: LD_VAR 0 5
 215: PUSH
 216: LD_EXP 9
 220: ADD
 221: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 222: LD_ADDR_EXP 10
 226: PUSH
 227: LD_STRING Lisa
 229: PPUSH
 230: LD_EXP 1
 234: NOT
 235: PPUSH
 236: CALL 4437 0 2
 240: ST_TO_ADDR
// if Lisa then
 241: LD_EXP 10
 245: IFFALSE 263
// team := team ^ Lisa ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 5
 256: PUSH
 257: LD_EXP 10
 261: ADD
 262: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 263: LD_ADDR_EXP 13
 267: PUSH
 268: LD_STRING Donaldson
 270: PPUSH
 271: LD_EXP 1
 275: NOT
 276: PPUSH
 277: CALL 4437 0 2
 281: ST_TO_ADDR
// if Donaldson then
 282: LD_EXP 13
 286: IFFALSE 304
// team := team ^ Donaldson ;
 288: LD_ADDR_VAR 0 5
 292: PUSH
 293: LD_VAR 0 5
 297: PUSH
 298: LD_EXP 13
 302: ADD
 303: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_STRING Brown
 311: PPUSH
 312: LD_EXP 1
 316: NOT
 317: PPUSH
 318: CALL 4437 0 2
 322: ST_TO_ADDR
// if Brown then
 323: LD_EXP 14
 327: IFFALSE 345
// team := team ^ Brown ;
 329: LD_ADDR_VAR 0 5
 333: PUSH
 334: LD_VAR 0 5
 338: PUSH
 339: LD_EXP 14
 343: ADD
 344: ST_TO_ADDR
// others4 := CreateCharacterSet ( 04_other_survivors ) ;
 345: LD_ADDR_VAR 0 3
 349: PUSH
 350: LD_STRING 04_other_survivors
 352: PPUSH
 353: CALL_OW 31
 357: ST_TO_ADDR
// DeleteCharacters ( 04_other_survivors ) ;
 358: LD_STRING 04_other_survivors
 360: PPUSH
 361: CALL_OW 40
// if not Lisa then
 365: LD_EXP 10
 369: NOT
 370: IFFALSE 488
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 372: LD_ADDR_EXP 11
 376: PUSH
 377: LD_STRING Cyrus
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: CALL 4437 0 2
 390: ST_TO_ADDR
// if Cyrus then
 391: LD_EXP 11
 395: IFFALSE 413
// team := team ^ Cyrus ;
 397: LD_ADDR_VAR 0 5
 401: PUSH
 402: LD_VAR 0 5
 406: PUSH
 407: LD_EXP 11
 411: ADD
 412: ST_TO_ADDR
// if not Cyrus then
 413: LD_EXP 11
 417: NOT
 418: IFFALSE 488
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 420: LD_ADDR_EXP 12
 424: PUSH
 425: LD_STRING Bobby
 427: PPUSH
 428: LD_EXP 1
 432: NOT
 433: PPUSH
 434: CALL 4437 0 2
 438: ST_TO_ADDR
// if Bobby then
 439: LD_EXP 12
 443: IFFALSE 461
// team := team ^ Bobby ;
 445: LD_ADDR_VAR 0 5
 449: PUSH
 450: LD_VAR 0 5
 454: PUSH
 455: LD_EXP 12
 459: ADD
 460: ST_TO_ADDR
// if not Bobby then
 461: LD_EXP 12
 465: NOT
 466: IFFALSE 488
// begin others3 := CreateCharacterSet ( 03_others ) ;
 468: LD_ADDR_VAR 0 2
 472: PUSH
 473: LD_STRING 03_others
 475: PPUSH
 476: CALL_OW 31
 480: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 481: LD_STRING 03_others
 483: PPUSH
 484: CALL_OW 40
// end ; end ; end ; if others4 then
 488: LD_VAR 0 3
 492: IFFALSE 510
// team := team ^ others4 ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_VAR 0 5
 503: PUSH
 504: LD_VAR 0 3
 508: ADD
 509: ST_TO_ADDR
// if others3 then
 510: LD_VAR 0 2
 514: IFFALSE 532
// team := team ^ others3 ;
 516: LD_ADDR_VAR 0 5
 520: PUSH
 521: LD_VAR 0 5
 525: PUSH
 526: LD_VAR 0 2
 530: ADD
 531: ST_TO_ADDR
// if team < 9 then
 532: LD_VAR 0 5
 536: PUSH
 537: LD_INT 9
 539: LESS
 540: IFFALSE 589
// repeat PrepareHuman ( false , rand ( 1 , 4 ) , 4 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: LD_INT 4
 550: PPUSH
 551: CALL_OW 12
 555: PPUSH
 556: LD_INT 4
 558: PPUSH
 559: CALL_OW 380
// team := team ^ CreateHuman ;
 563: LD_ADDR_VAR 0 5
 567: PUSH
 568: LD_VAR 0 5
 572: PUSH
 573: CALL_OW 44
 577: ADD
 578: ST_TO_ADDR
// until team = 9 ;
 579: LD_VAR 0 5
 583: PUSH
 584: LD_INT 9
 586: EQUAL
 587: IFFALSE 542
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) [ 1 ] ;
 589: LD_ADDR_VAR 0 6
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PPUSH
 604: CALL_OW 69
 608: PUSH
 609: LD_INT 1
 611: ARRAY
 612: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
 613: LD_ADDR_VAR 0 7
 617: PUSH
 618: LD_INT 30
 620: PUSH
 621: LD_INT 4
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PPUSH
 628: CALL_OW 69
 632: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
 633: LD_ADDR_VAR 0 8
 637: PUSH
 638: LD_INT 2
 640: PUSH
 641: LD_INT 30
 643: PUSH
 644: LD_INT 7
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 30
 653: PUSH
 654: LD_INT 6
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: LIST
 665: PPUSH
 666: CALL_OW 69
 670: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
 671: LD_ADDR_VAR 0 9
 675: PUSH
 676: LD_INT 30
 678: PUSH
 679: LD_INT 3
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 69
 690: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
 691: LD_ADDR_VAR 0 10
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 30
 701: PUSH
 702: LD_INT 32
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: LD_INT 30
 711: PUSH
 712: LD_INT 31
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: LIST
 723: PPUSH
 724: CALL_OW 69
 728: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
 729: LD_VAR 0 6
 733: PPUSH
 734: LD_STRING Gamma
 736: PPUSH
 737: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
 741: LD_VAR 0 6
 745: PPUSH
 746: CALL_OW 274
 750: PPUSH
 751: LD_INT 2
 753: PPUSH
 754: LD_INT 10000
 756: PPUSH
 757: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
 761: LD_VAR 0 6
 765: PPUSH
 766: CALL_OW 274
 770: PPUSH
 771: LD_INT 1
 773: PPUSH
 774: LD_INT 10000
 776: PPUSH
 777: CALL_OW 277
// if dep then
 781: LD_VAR 0 6
 785: IFFALSE 867
// begin if Brown then
 787: LD_EXP 14
 791: IFFALSE 827
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
 793: LD_EXP 14
 797: PPUSH
 798: LD_VAR 0 6
 802: PUSH
 803: LD_INT 1
 805: ARRAY
 806: PPUSH
 807: CALL_OW 52
// team := team diff Brown ;
 811: LD_ADDR_VAR 0 5
 815: PUSH
 816: LD_VAR 0 5
 820: PUSH
 821: LD_EXP 14
 825: DIFF
 826: ST_TO_ADDR
// end ; if Donaldson then
 827: LD_EXP 13
 831: IFFALSE 867
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
 833: LD_EXP 13
 837: PPUSH
 838: LD_VAR 0 6
 842: PUSH
 843: LD_INT 1
 845: ARRAY
 846: PPUSH
 847: CALL_OW 52
// team := team diff Donaldson ;
 851: LD_ADDR_VAR 0 5
 855: PUSH
 856: LD_VAR 0 5
 860: PUSH
 861: LD_EXP 13
 865: DIFF
 866: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
 867: LD_VAR 0 10
 871: PUSH
 872: LD_VAR 0 5
 876: PPUSH
 877: LD_INT 25
 879: PUSH
 880: LD_INT 1
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: PPUSH
 887: CALL_OW 72
 891: AND
 892: IFFALSE 1001
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
 894: LD_ADDR_VAR 0 11
 898: PUSH
 899: LD_VAR 0 5
 903: PPUSH
 904: LD_INT 25
 906: PUSH
 907: LD_INT 1
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PPUSH
 914: CALL_OW 72
 918: ST_TO_ADDR
// for i in bun do
 919: LD_ADDR_VAR 0 12
 923: PUSH
 924: LD_VAR 0 10
 928: PUSH
 929: FOR_IN
 930: IFFALSE 999
// begin if not filter then
 932: LD_VAR 0 11
 936: NOT
 937: IFFALSE 941
// break ;
 939: GO 999
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
 941: LD_VAR 0 11
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 12
 954: PPUSH
 955: CALL_OW 52
// team := team diff filter [ 1 ] ;
 959: LD_ADDR_VAR 0 5
 963: PUSH
 964: LD_VAR 0 5
 968: PUSH
 969: LD_VAR 0 11
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: DIFF
 978: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
 979: LD_ADDR_VAR 0 11
 983: PUSH
 984: LD_VAR 0 11
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: CALL_OW 3
 996: ST_TO_ADDR
// end ;
 997: GO 929
 999: POP
1000: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1001: LD_VAR 0 7
1005: PUSH
1006: LD_VAR 0 5
1010: PPUSH
1011: LD_INT 25
1013: PUSH
1014: LD_INT 1
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PPUSH
1021: CALL_OW 72
1025: AND
1026: IFFALSE 1148
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1028: LD_ADDR_VAR 0 11
1032: PUSH
1033: LD_VAR 0 5
1037: PPUSH
1038: LD_INT 25
1040: PUSH
1041: LD_INT 1
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PPUSH
1048: CALL_OW 72
1052: ST_TO_ADDR
// for i = 1 to filter do
1053: LD_ADDR_VAR 0 12
1057: PUSH
1058: DOUBLE
1059: LD_INT 1
1061: DEC
1062: ST_TO_ADDR
1063: LD_VAR 0 11
1067: PUSH
1068: FOR_TO
1069: IFFALSE 1130
// begin if ( i <= 6 ) then
1071: LD_VAR 0 12
1075: PUSH
1076: LD_INT 6
1078: LESSEQUAL
1079: IFFALSE 1107
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1081: LD_VAR 0 11
1085: PUSH
1086: LD_VAR 0 12
1090: ARRAY
1091: PPUSH
1092: LD_VAR 0 7
1096: PUSH
1097: LD_INT 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
1105: GO 1128
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1107: LD_VAR 0 11
1111: PUSH
1112: LD_VAR 0 12
1116: ARRAY
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: LD_INT 0
1123: PPUSH
1124: CALL_OW 49
// end ;
1128: GO 1068
1130: POP
1131: POP
// team := team diff filter ;
1132: LD_ADDR_VAR 0 5
1136: PUSH
1137: LD_VAR 0 5
1141: PUSH
1142: LD_VAR 0 11
1146: DIFF
1147: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1148: LD_VAR 0 8
1152: PUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: LD_INT 25
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PPUSH
1168: CALL_OW 72
1172: AND
1173: IFFALSE 1295
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1175: LD_ADDR_VAR 0 11
1179: PUSH
1180: LD_VAR 0 5
1184: PPUSH
1185: LD_INT 25
1187: PUSH
1188: LD_INT 4
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 72
1199: ST_TO_ADDR
// for i = 1 to filter do
1200: LD_ADDR_VAR 0 12
1204: PUSH
1205: DOUBLE
1206: LD_INT 1
1208: DEC
1209: ST_TO_ADDR
1210: LD_VAR 0 11
1214: PUSH
1215: FOR_TO
1216: IFFALSE 1277
// begin if ( i <= 6 ) then
1218: LD_VAR 0 12
1222: PUSH
1223: LD_INT 6
1225: LESSEQUAL
1226: IFFALSE 1254
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1228: LD_VAR 0 11
1232: PUSH
1233: LD_VAR 0 12
1237: ARRAY
1238: PPUSH
1239: LD_VAR 0 8
1243: PUSH
1244: LD_INT 1
1246: ARRAY
1247: PPUSH
1248: CALL_OW 52
1252: GO 1275
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1254: LD_VAR 0 11
1258: PUSH
1259: LD_VAR 0 12
1263: ARRAY
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
// end ;
1275: GO 1215
1277: POP
1278: POP
// team := team diff filter ;
1279: LD_ADDR_VAR 0 5
1283: PUSH
1284: LD_VAR 0 5
1288: PUSH
1289: LD_VAR 0 11
1293: DIFF
1294: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
1295: LD_VAR 0 9
1299: PUSH
1300: LD_VAR 0 5
1304: PPUSH
1305: LD_INT 25
1307: PUSH
1308: LD_INT 3
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 72
1319: AND
1320: IFFALSE 1442
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
1322: LD_ADDR_VAR 0 11
1326: PUSH
1327: LD_VAR 0 5
1331: PPUSH
1332: LD_INT 25
1334: PUSH
1335: LD_INT 3
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PPUSH
1342: CALL_OW 72
1346: ST_TO_ADDR
// for i = 1 to filter do
1347: LD_ADDR_VAR 0 12
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_VAR 0 11
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1424
// begin if ( i <= 6 ) then
1365: LD_VAR 0 12
1369: PUSH
1370: LD_INT 6
1372: LESSEQUAL
1373: IFFALSE 1401
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
1375: LD_VAR 0 11
1379: PUSH
1380: LD_VAR 0 12
1384: ARRAY
1385: PPUSH
1386: LD_VAR 0 9
1390: PUSH
1391: LD_INT 1
1393: ARRAY
1394: PPUSH
1395: CALL_OW 52
1399: GO 1422
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1401: LD_VAR 0 11
1405: PUSH
1406: LD_VAR 0 12
1410: ARRAY
1411: PPUSH
1412: LD_INT 1
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1362
1424: POP
1425: POP
// team := team diff filter ;
1426: LD_ADDR_VAR 0 5
1430: PUSH
1431: LD_VAR 0 5
1435: PUSH
1436: LD_VAR 0 11
1440: DIFF
1441: ST_TO_ADDR
// end ; if team then
1442: LD_VAR 0 5
1446: IFFALSE 1489
// for i in team do
1448: LD_ADDR_VAR 0 12
1452: PUSH
1453: LD_VAR 0 5
1457: PUSH
1458: FOR_IN
1459: IFFALSE 1487
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
1461: LD_VAR 0 12
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 0
1471: PPUSH
1472: CALL_OW 49
// ComHold ( i ) ;
1476: LD_VAR 0 12
1480: PPUSH
1481: CALL_OW 140
// end ;
1485: GO 1458
1487: POP
1488: POP
// if fac then
1489: LD_VAR 0 9
1493: IFFALSE 1529
// if UnitsInside ( fac [ 1 ] ) then
1495: LD_VAR 0 9
1499: PUSH
1500: LD_INT 1
1502: ARRAY
1503: PPUSH
1504: CALL_OW 313
1508: IFFALSE 1529
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
1510: LD_VAR 0 9
1514: PUSH
1515: LD_INT 1
1517: ARRAY
1518: PPUSH
1519: LD_INT 10
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL_OW 486
// if lab then
1529: LD_VAR 0 8
1533: IFFALSE 1569
// if UnitsInside ( lab [ 1 ] ) then
1535: LD_VAR 0 8
1539: PUSH
1540: LD_INT 1
1542: ARRAY
1543: PPUSH
1544: CALL_OW 313
1548: IFFALSE 1569
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
1550: LD_VAR 0 8
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: LD_INT 10
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL_OW 486
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
1569: LD_ADDR_VAR 0 4
1573: PUSH
1574: LD_INT 1
1576: PPUSH
1577: LD_INT 1
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: LD_INT 2
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: LD_INT 3
1591: PPUSH
1592: LD_INT 100
1594: PPUSH
1595: CALL 4500 0 7
1599: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1600: LD_VAR 0 4
1604: PPUSH
1605: LD_INT 2
1607: PPUSH
1608: CALL_OW 233
// PlaceUnitXY ( veh , 21 , 8 , false ) ;
1612: LD_VAR 0 4
1616: PPUSH
1617: LD_INT 21
1619: PPUSH
1620: LD_INT 8
1622: PPUSH
1623: LD_INT 0
1625: PPUSH
1626: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
1630: LD_EXP 7
1634: PPUSH
1635: LD_VAR 0 4
1639: PPUSH
1640: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_INT 1
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 2
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 2
1666: PPUSH
1667: LD_INT 100
1669: PPUSH
1670: CALL 4500 0 7
1674: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1675: LD_VAR 0 4
1679: PPUSH
1680: LD_INT 2
1682: PPUSH
1683: CALL_OW 233
// PlaceUnitXY ( veh , 16 , 3 , false ) ;
1687: LD_VAR 0 4
1691: PPUSH
1692: LD_INT 16
1694: PPUSH
1695: LD_INT 3
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1705: LD_EXP 8
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 100 ) ;
1719: LD_ADDR_VAR 0 4
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 1
1729: PPUSH
1730: LD_INT 2
1732: PPUSH
1733: LD_INT 2
1735: PPUSH
1736: LD_INT 1
1738: PPUSH
1739: LD_INT 12
1741: PPUSH
1742: LD_INT 100
1744: PPUSH
1745: CALL 4500 0 7
1749: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1750: LD_VAR 0 4
1754: PPUSH
1755: LD_INT 0
1757: PPUSH
1758: LD_INT 5
1760: PPUSH
1761: CALL_OW 12
1765: PPUSH
1766: CALL_OW 233
// PlaceUnitArea ( veh , gammaBaseArea , false ) ;
1770: LD_VAR 0 4
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 49
// end ;
1785: LD_VAR 0 1
1789: RET
// function PrepareBase ; var blist , i , b ; begin
1790: LD_INT 0
1792: PPUSH
1793: PPUSH
1794: PPUSH
1795: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1796: LD_INT 71
1798: PPUSH
1799: LD_INT 5
1801: PPUSH
1802: LD_INT 1
1804: PPUSH
1805: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: LD_STRING GammaBase
1816: PPUSH
1817: EMPTY
1818: PPUSH
1819: CALL_OW 30
1823: ST_TO_ADDR
// if not blist then
1824: LD_VAR 0 2
1828: NOT
1829: IFFALSE 1869
// blist := [ [ b_depot , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
1831: LD_ADDR_VAR 0 2
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: LD_INT 52
1841: PUSH
1842: LD_INT 12
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: LD_INT 3
1850: PUSH
1851: LD_INT 0
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: PUSH
1866: EMPTY
1867: LIST
1868: ST_TO_ADDR
// uc_side := 1 ;
1869: LD_ADDR_OWVAR 20
1873: PUSH
1874: LD_INT 1
1876: ST_TO_ADDR
// uc_nation := 1 ;
1877: LD_ADDR_OWVAR 21
1881: PUSH
1882: LD_INT 1
1884: ST_TO_ADDR
// for i in blist do
1885: LD_ADDR_VAR 0 3
1889: PUSH
1890: LD_VAR 0 2
1894: PUSH
1895: FOR_IN
1896: IFFALSE 2047
// begin bc_type := i [ 1 ] ;
1898: LD_ADDR_OWVAR 42
1902: PUSH
1903: LD_VAR 0 3
1907: PUSH
1908: LD_INT 1
1910: ARRAY
1911: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1912: LD_ADDR_OWVAR 43
1916: PUSH
1917: LD_VAR 0 3
1921: PUSH
1922: LD_INT 5
1924: ARRAY
1925: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1926: LD_VAR 0 3
1930: PUSH
1931: LD_INT 1
1933: ARRAY
1934: PUSH
1935: LD_INT 7
1937: PUSH
1938: LD_INT 8
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: IN
1945: IFFALSE 1975
// begin bc_kind1 := i [ 7 ] ;
1947: LD_ADDR_OWVAR 44
1951: PUSH
1952: LD_VAR 0 3
1956: PUSH
1957: LD_INT 7
1959: ARRAY
1960: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
1961: LD_ADDR_OWVAR 45
1965: PUSH
1966: LD_VAR 0 3
1970: PUSH
1971: LD_INT 8
1973: ARRAY
1974: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1975: LD_ADDR_VAR 0 4
1979: PUSH
1980: LD_VAR 0 3
1984: PUSH
1985: LD_INT 2
1987: ARRAY
1988: PPUSH
1989: LD_VAR 0 3
1993: PUSH
1994: LD_INT 3
1996: ARRAY
1997: PPUSH
1998: LD_VAR 0 3
2002: PUSH
2003: LD_INT 4
2005: ARRAY
2006: PPUSH
2007: CALL_OW 47
2011: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2012: LD_VAR 0 4
2016: PPUSH
2017: CALL_OW 266
2021: PUSH
2022: LD_INT 32
2024: EQUAL
2025: IFFALSE 2045
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 7
2039: ARRAY
2040: PPUSH
2041: CALL_OW 431
// end ; end ;
2045: GO 1895
2047: POP
2048: POP
// if not FilterAllUnits ( [ f_btype , b_depot ] ) then
2049: LD_INT 30
2051: PUSH
2052: LD_INT 0
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 69
2063: NOT
2064: IFFALSE 2101
// begin bc_type := b_depot ;
2066: LD_ADDR_OWVAR 42
2070: PUSH
2071: LD_INT 0
2073: ST_TO_ADDR
// bc_level := 6 ;
2074: LD_ADDR_OWVAR 43
2078: PUSH
2079: LD_INT 6
2081: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2082: LD_ADDR_VAR 0 4
2086: PUSH
2087: LD_INT 52
2089: PPUSH
2090: LD_INT 12
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: CALL_OW 47
2100: ST_TO_ADDR
// end ; end ; end_of_file
2101: LD_VAR 0 1
2105: RET
// export function Action ; var points , i , sol , team , all , commander , filter ; begin
2106: LD_INT 0
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
// PlaceSeeing ( 0 , 0 , 1 , - 32976 ) ;
2116: LD_INT 0
2118: PPUSH
2119: LD_INT 0
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: LD_INT 32976
2127: NEG
2128: PPUSH
2129: CALL_OW 330
// InGameOn ;
2133: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2137: LD_INT 33
2139: PPUSH
2140: LD_INT 11
2142: PPUSH
2143: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2147: LD_ADDR_VAR 0 2
2151: PUSH
2152: LD_INT 29
2154: PUSH
2155: LD_INT 21
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 41
2164: PUSH
2165: LD_INT 28
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 52
2174: PUSH
2175: LD_INT 26
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: LD_INT 49
2184: PUSH
2185: LD_INT 16
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: ST_TO_ADDR
// for i in points do
2198: LD_ADDR_VAR 0 3
2202: PUSH
2203: LD_VAR 0 2
2207: PUSH
2208: FOR_IN
2209: IFFALSE 2249
// AddComMoveXY ( [ JMM , Gladstone ] , i [ 1 ] , i [ 2 ] ) ;
2211: LD_EXP 7
2215: PUSH
2216: LD_EXP 8
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: LD_VAR 0 3
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: LD_VAR 0 3
2238: PUSH
2239: LD_INT 2
2241: ARRAY
2242: PPUSH
2243: CALL_OW 171
2247: GO 2208
2249: POP
2250: POP
// AddComExitVehicle ( [ JMM , Gladstone ] ) ;
2251: LD_EXP 7
2255: PUSH
2256: LD_EXP 8
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PPUSH
2265: CALL_OW 181
// repeat wait ( 0 0$01 ) ;
2269: LD_INT 35
2271: PPUSH
2272: CALL_OW 67
// until not IsInUnit ( JMM ) and not IsInUnit ( Gladstone ) ;
2276: LD_EXP 7
2280: PPUSH
2281: CALL_OW 310
2285: NOT
2286: PUSH
2287: LD_EXP 8
2291: PPUSH
2292: CALL_OW 310
2296: NOT
2297: AND
2298: IFFALSE 2269
// ComTurnUnit ( JMM , Gladstone ) ;
2300: LD_EXP 7
2304: PPUSH
2305: LD_EXP 8
2309: PPUSH
2310: CALL_OW 119
// ComTurnUnit ( Gladstone , JMM ) ;
2314: LD_EXP 8
2318: PPUSH
2319: LD_EXP 7
2323: PPUSH
2324: CALL_OW 119
// sol := FilterAllUnits ( [ f_sex , sex_male ] ) diff [ JMM , Gladstone , Bobby , Cyrus , Frank , Brown ] ;
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_INT 26
2335: PUSH
2336: LD_INT 1
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PPUSH
2343: CALL_OW 69
2347: PUSH
2348: LD_EXP 7
2352: PUSH
2353: LD_EXP 8
2357: PUSH
2358: LD_EXP 12
2362: PUSH
2363: LD_EXP 11
2367: PUSH
2368: LD_EXP 9
2372: PUSH
2373: LD_EXP 14
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: DIFF
2386: ST_TO_ADDR
// if sol then
2387: LD_VAR 0 4
2391: IFFALSE 2407
// sol := sol [ 1 ] ;
2393: LD_ADDR_VAR 0 4
2397: PUSH
2398: LD_VAR 0 4
2402: PUSH
2403: LD_INT 1
2405: ARRAY
2406: ST_TO_ADDR
// team := [ ] ;
2407: LD_ADDR_VAR 0 5
2411: PUSH
2412: EMPTY
2413: ST_TO_ADDR
// if sol then
2414: LD_VAR 0 4
2418: IFFALSE 2436
// team := team ^ sol ;
2420: LD_ADDR_VAR 0 5
2424: PUSH
2425: LD_VAR 0 5
2429: PUSH
2430: LD_VAR 0 4
2434: ADD
2435: ST_TO_ADDR
// if Lisa then
2436: LD_EXP 10
2440: IFFALSE 2458
// team := team ^ Lisa ;
2442: LD_ADDR_VAR 0 5
2446: PUSH
2447: LD_VAR 0 5
2451: PUSH
2452: LD_EXP 10
2456: ADD
2457: ST_TO_ADDR
// if Donaldson then
2458: LD_EXP 13
2462: IFFALSE 2480
// team := team ^ Donaldson ;
2464: LD_ADDR_VAR 0 5
2468: PUSH
2469: LD_VAR 0 5
2473: PUSH
2474: LD_EXP 13
2478: ADD
2479: ST_TO_ADDR
// if Brown then
2480: LD_EXP 14
2484: IFFALSE 2502
// team := team ^ Brown ;
2486: LD_ADDR_VAR 0 5
2490: PUSH
2491: LD_VAR 0 5
2495: PUSH
2496: LD_EXP 14
2500: ADD
2501: ST_TO_ADDR
// if Bobby then
2502: LD_EXP 12
2506: IFFALSE 2524
// team := team ^ Bobby ;
2508: LD_ADDR_VAR 0 5
2512: PUSH
2513: LD_VAR 0 5
2517: PUSH
2518: LD_EXP 12
2522: ADD
2523: ST_TO_ADDR
// if Cyrus then
2524: LD_EXP 11
2528: IFFALSE 2546
// team := team ^ Cyrus ;
2530: LD_ADDR_VAR 0 5
2534: PUSH
2535: LD_VAR 0 5
2539: PUSH
2540: LD_EXP 11
2544: ADD
2545: ST_TO_ADDR
// if Frank then
2546: LD_EXP 9
2550: IFFALSE 2568
// team := team ^ Frank ;
2552: LD_ADDR_VAR 0 5
2556: PUSH
2557: LD_VAR 0 5
2561: PUSH
2562: LD_EXP 9
2566: ADD
2567: ST_TO_ADDR
// for i in [ FilterUnitsInArea ( gammaBaseArea , [ [ f_not , [ f_inside ] ] , [ f_type , unit_human ] ] ) diff [ JMM , Gladstone ] ] do
2568: LD_ADDR_VAR 0 3
2572: PUSH
2573: LD_INT 1
2575: PPUSH
2576: LD_INT 3
2578: PUSH
2579: LD_INT 54
2581: PUSH
2582: EMPTY
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: LD_INT 21
2591: PUSH
2592: LD_INT 1
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PPUSH
2603: CALL_OW 70
2607: PUSH
2608: LD_EXP 7
2612: PUSH
2613: LD_EXP 8
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: DIFF
2622: PUSH
2623: EMPTY
2624: LIST
2625: PUSH
2626: FOR_IN
2627: IFFALSE 2647
// team := team ^ i ;
2629: LD_ADDR_VAR 0 5
2633: PUSH
2634: LD_VAR 0 5
2638: PUSH
2639: LD_VAR 0 3
2643: ADD
2644: ST_TO_ADDR
2645: GO 2626
2647: POP
2648: POP
// if team then
2649: LD_VAR 0 5
2653: IFFALSE 2729
// begin ComExitBuilding ( team ) ;
2655: LD_VAR 0 5
2659: PPUSH
2660: CALL_OW 122
// AddComMoveUnit ( team , JMM ) ;
2664: LD_VAR 0 5
2668: PPUSH
2669: LD_EXP 7
2673: PPUSH
2674: CALL_OW 172
// repeat wait ( 1 ) ;
2678: LD_INT 1
2680: PPUSH
2681: CALL_OW 67
// until GetDistUnits ( JMM , NearestUnitToUnit ( team , JMM ) ) < 6 ;
2685: LD_EXP 7
2689: PPUSH
2690: LD_VAR 0 5
2694: PPUSH
2695: LD_EXP 7
2699: PPUSH
2700: CALL_OW 74
2704: PPUSH
2705: CALL_OW 296
2709: PUSH
2710: LD_INT 6
2712: LESS
2713: IFFALSE 2678
// ComTurnUnit ( team , JMM ) ;
2715: LD_VAR 0 5
2719: PPUSH
2720: LD_EXP 7
2724: PPUSH
2725: CALL_OW 119
// end ; if Lisa then
2729: LD_EXP 10
2733: IFFALSE 2761
// begin ComTurnUnit ( JMM , Lisa ) ;
2735: LD_EXP 7
2739: PPUSH
2740: LD_EXP 10
2744: PPUSH
2745: CALL_OW 119
// Say ( Lisa , D1-Lisa-1 ) ;
2749: LD_EXP 10
2753: PPUSH
2754: LD_STRING D1-Lisa-1
2756: PPUSH
2757: CALL_OW 88
// end ; if sol then
2761: LD_VAR 0 4
2765: IFFALSE 2793
// begin ComTurnUnit ( JMM , sol ) ;
2767: LD_EXP 7
2771: PPUSH
2772: LD_VAR 0 4
2776: PPUSH
2777: CALL_OW 119
// Say ( sol , D1-Sol1-1 ) ;
2781: LD_VAR 0 4
2785: PPUSH
2786: LD_STRING D1-Sol1-1
2788: PPUSH
2789: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
2793: LD_EXP 7
2797: PPUSH
2798: LD_STRING D1-JMM-1
2800: PPUSH
2801: CALL_OW 88
// Say ( JMM , D1-JMM-1a ) ;
2805: LD_EXP 7
2809: PPUSH
2810: LD_STRING D1-JMM-1a
2812: PPUSH
2813: CALL_OW 88
// ComTurnUnit ( JMM , Gladstone ) ;
2817: LD_EXP 7
2821: PPUSH
2822: LD_EXP 8
2826: PPUSH
2827: CALL_OW 119
// ComTurnUnit ( team , Gladstone ) ;
2831: LD_VAR 0 5
2835: PPUSH
2836: LD_EXP 8
2840: PPUSH
2841: CALL_OW 119
// if Frank then
2845: LD_EXP 9
2849: IFFALSE 2877
// begin Say ( Frank , D1-Frank-1 ) ;
2851: LD_EXP 9
2855: PPUSH
2856: LD_STRING D1-Frank-1
2858: PPUSH
2859: CALL_OW 88
// ComTurnUnit ( JMM , Frank ) ;
2863: LD_EXP 7
2867: PPUSH
2868: LD_EXP 9
2872: PPUSH
2873: CALL_OW 119
// end ; if Lisa then
2877: LD_EXP 10
2881: IFFALSE 2909
// begin ComTurnUnit ( JMM , Lisa ) ;
2883: LD_EXP 7
2887: PPUSH
2888: LD_EXP 10
2892: PPUSH
2893: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
2897: LD_EXP 10
2901: PPUSH
2902: LD_STRING D1-Lisa-2
2904: PPUSH
2905: CALL_OW 88
// end ; if sol then
2909: LD_VAR 0 4
2913: IFFALSE 2941
// begin ComTurnUnit ( JMM , sol ) ;
2915: LD_EXP 7
2919: PPUSH
2920: LD_VAR 0 4
2924: PPUSH
2925: CALL_OW 119
// Say ( sol , D1-Sol1-2 ) ;
2929: LD_VAR 0 4
2933: PPUSH
2934: LD_STRING D1-Sol1-2
2936: PPUSH
2937: CALL_OW 88
// end ; Say ( Gladstone , D1-Glad-2 ) ;
2941: LD_EXP 8
2945: PPUSH
2946: LD_STRING D1-Glad-2
2948: PPUSH
2949: CALL_OW 88
// ComTurnUnit ( team , JMM ) ;
2953: LD_VAR 0 5
2957: PPUSH
2958: LD_EXP 7
2962: PPUSH
2963: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
2967: LD_EXP 7
2971: PPUSH
2972: LD_STRING D1-JMM-2
2974: PPUSH
2975: CALL_OW 88
// ComTurnUnit ( JMM , Gladstone ) ;
2979: LD_EXP 7
2983: PPUSH
2984: LD_EXP 8
2988: PPUSH
2989: CALL_OW 119
// Say ( Gladstone , D1-Glad-3 ) ;
2993: LD_EXP 8
2997: PPUSH
2998: LD_STRING D1-Glad-3
3000: PPUSH
3001: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3005: LD_EXP 7
3009: PPUSH
3010: LD_STRING D1-JMM-3
3012: PPUSH
3013: CALL_OW 88
// Say ( Gladstone , D1-Glad-4 ) ;
3017: LD_EXP 8
3021: PPUSH
3022: LD_STRING D1-Glad-4
3024: PPUSH
3025: CALL_OW 88
// if Frank then
3029: LD_EXP 9
3033: IFFALSE 3061
// begin ComTurnUnit ( JMM , Frank ) ;
3035: LD_EXP 7
3039: PPUSH
3040: LD_EXP 9
3044: PPUSH
3045: CALL_OW 119
// Say ( Frank , D1-Frank-4 ) ;
3049: LD_EXP 9
3053: PPUSH
3054: LD_STRING D1-Frank-4
3056: PPUSH
3057: CALL_OW 88
// end ; ComTurnUnit ( JMM , Gladstone ) ;
3061: LD_EXP 7
3065: PPUSH
3066: LD_EXP 8
3070: PPUSH
3071: CALL_OW 119
// Say ( JMM , D1-JMM-4 ) ;
3075: LD_EXP 7
3079: PPUSH
3080: LD_STRING D1-JMM-4
3082: PPUSH
3083: CALL_OW 88
// if Lisa then
3087: LD_EXP 10
3091: IFFALSE 3158
// begin Say ( Lisa , D1-Lisa-4 ) ;
3093: LD_EXP 10
3097: PPUSH
3098: LD_STRING D1-Lisa-4
3100: PPUSH
3101: CALL_OW 88
// if Frank then
3105: LD_EXP 9
3109: IFFALSE 3158
// begin ComTurnUnit ( Frank , Lisa ) ;
3111: LD_EXP 9
3115: PPUSH
3116: LD_EXP 10
3120: PPUSH
3121: CALL_OW 119
// Say ( Frank , D1-Frank-5 ) ;
3125: LD_EXP 9
3129: PPUSH
3130: LD_STRING D1-Frank-5
3132: PPUSH
3133: CALL_OW 88
// Wait ( 3 ) ;
3137: LD_INT 3
3139: PPUSH
3140: CALL_OW 67
// AddComTurnUnit ( Frank , JMM ) ;
3144: LD_EXP 9
3148: PPUSH
3149: LD_EXP 7
3153: PPUSH
3154: CALL_OW 179
// end ; end ; if sol then
3158: LD_VAR 0 4
3162: IFFALSE 3176
// Say ( sol , D1-Sol1-5 ) ;
3164: LD_VAR 0 4
3168: PPUSH
3169: LD_STRING D1-Sol1-5
3171: PPUSH
3172: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3176: LD_EXP 7
3180: PPUSH
3181: LD_STRING D1-JMM-5
3183: PPUSH
3184: CALL_OW 88
// Say ( Gladstone , D1-Glad-5 ) ;
3188: LD_EXP 8
3192: PPUSH
3193: LD_STRING D1-Glad-5
3195: PPUSH
3196: CALL_OW 88
// if Frank then
3200: LD_EXP 9
3204: IFFALSE 3218
// Say ( Frank , D1-Frank-6 ) ;
3206: LD_EXP 9
3210: PPUSH
3211: LD_STRING D1-Frank-6
3213: PPUSH
3214: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3218: LD_EXP 7
3222: PPUSH
3223: LD_STRING D1-JMM-6
3225: PPUSH
3226: CALL_OW 88
// if Brown and Donaldson then
3230: LD_EXP 14
3234: PUSH
3235: LD_EXP 13
3239: AND
3240: IFFALSE 3289
// case Query ( QCommander ) of 1 :
3242: LD_STRING QCommander
3244: PPUSH
3245: CALL_OW 97
3249: PUSH
3250: LD_INT 1
3252: DOUBLE
3253: EQUAL
3254: IFTRUE 3258
3256: GO 3269
3258: POP
// donaldson_commander := true ; 2 :
3259: LD_ADDR_EXP 4
3263: PUSH
3264: LD_INT 1
3266: ST_TO_ADDR
3267: GO 3289
3269: LD_INT 2
3271: DOUBLE
3272: EQUAL
3273: IFTRUE 3277
3275: GO 3288
3277: POP
// brown_commander := true ; end ;
3278: LD_ADDR_EXP 5
3282: PUSH
3283: LD_INT 1
3285: ST_TO_ADDR
3286: GO 3289
3288: POP
// if not Brown and Donaldson then
3289: LD_EXP 14
3293: NOT
3294: PUSH
3295: LD_EXP 13
3299: AND
3300: IFFALSE 3310
// donaldson_commander := true ;
3302: LD_ADDR_EXP 4
3306: PUSH
3307: LD_INT 1
3309: ST_TO_ADDR
// if Brown and not Donaldson then
3310: LD_EXP 14
3314: PUSH
3315: LD_EXP 13
3319: NOT
3320: AND
3321: IFFALSE 3331
// brown_commander := true ;
3323: LD_ADDR_EXP 5
3327: PUSH
3328: LD_INT 1
3330: ST_TO_ADDR
// if donaldson_commander then
3331: LD_EXP 4
3335: IFFALSE 3482
// begin ComTurnUnit ( JMM , Donaldson ) ;
3337: LD_EXP 7
3341: PPUSH
3342: LD_EXP 13
3346: PPUSH
3347: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
3351: LD_EXP 7
3355: PPUSH
3356: LD_STRING D1a-JMM-1
3358: PPUSH
3359: CALL_OW 88
// ComMoveUnit ( Donaldson , JMM ) ;
3363: LD_EXP 13
3367: PPUSH
3368: LD_EXP 7
3372: PPUSH
3373: CALL_OW 112
// AddComTurnUnit ( Donaldson , JMM ) ;
3377: LD_EXP 13
3381: PPUSH
3382: LD_EXP 7
3386: PPUSH
3387: CALL_OW 179
// Wait ( 3 ) ;
3391: LD_INT 3
3393: PPUSH
3394: CALL_OW 67
// Say ( Donaldson , D1a-Don-1 ) ;
3398: LD_EXP 13
3402: PPUSH
3403: LD_STRING D1a-Don-1
3405: PPUSH
3406: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
3410: LD_EXP 7
3414: PPUSH
3415: LD_STRING D1b-JMM-2
3417: PPUSH
3418: CALL_OW 88
// Say ( Donaldson , D1a-Don-2 ) ;
3422: LD_EXP 13
3426: PPUSH
3427: LD_STRING D1a-Don-2
3429: PPUSH
3430: CALL_OW 88
// ComEnterUnit ( Donaldson , FilterAllUnits ( [ f_btype , b_depot ] ) [ 1 ] ) ;
3434: LD_EXP 13
3438: PPUSH
3439: LD_INT 30
3441: PUSH
3442: LD_INT 0
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: PUSH
3454: LD_INT 1
3456: ARRAY
3457: PPUSH
3458: CALL_OW 120
// SaveVariable ( 1 , GammaCommander ) ;
3462: LD_INT 1
3464: PPUSH
3465: LD_STRING GammaCommander
3467: PPUSH
3468: CALL_OW 39
// commander := Donaldson ;
3472: LD_ADDR_VAR 0 7
3476: PUSH
3477: LD_EXP 13
3481: ST_TO_ADDR
// end ; if brown_commander then
3482: LD_EXP 5
3486: IFFALSE 3633
// begin ComTurnUnit ( JMM , Brown ) ;
3488: LD_EXP 7
3492: PPUSH
3493: LD_EXP 14
3497: PPUSH
3498: CALL_OW 119
// Say ( JMM , D1b-JMM-1 ) ;
3502: LD_EXP 7
3506: PPUSH
3507: LD_STRING D1b-JMM-1
3509: PPUSH
3510: CALL_OW 88
// ComMoveUnit ( Brown , JMM ) ;
3514: LD_EXP 14
3518: PPUSH
3519: LD_EXP 7
3523: PPUSH
3524: CALL_OW 112
// AddComTurnUnit ( Brown , JMM ) ;
3528: LD_EXP 14
3532: PPUSH
3533: LD_EXP 7
3537: PPUSH
3538: CALL_OW 179
// Wait ( 3 ) ;
3542: LD_INT 3
3544: PPUSH
3545: CALL_OW 67
// Say ( Brown , D1b-Brown-1 ) ;
3549: LD_EXP 14
3553: PPUSH
3554: LD_STRING D1b-Brown-1
3556: PPUSH
3557: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
3561: LD_EXP 7
3565: PPUSH
3566: LD_STRING D1a-JMM-2
3568: PPUSH
3569: CALL_OW 88
// Say ( Brown , D1b-Brown-2 ) ;
3573: LD_EXP 14
3577: PPUSH
3578: LD_STRING D1b-Brown-2
3580: PPUSH
3581: CALL_OW 88
// ComEnterUnit ( Brown , FilterAllUnits ( [ f_btype , b_depot ] ) [ 1 ] ) ;
3585: LD_EXP 14
3589: PPUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 0
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 69
3604: PUSH
3605: LD_INT 1
3607: ARRAY
3608: PPUSH
3609: CALL_OW 120
// SaveVariable ( 2 , GammaCommander ) ;
3613: LD_INT 2
3615: PPUSH
3616: LD_STRING GammaCommander
3618: PPUSH
3619: CALL_OW 39
// commander := Brown ;
3623: LD_ADDR_VAR 0 7
3627: PUSH
3628: LD_EXP 14
3632: ST_TO_ADDR
// end ; ComTurnUnit ( JMM , Gladstone ) ;
3633: LD_EXP 7
3637: PPUSH
3638: LD_EXP 8
3642: PPUSH
3643: CALL_OW 119
// if not donaldson_commander and not brown_commander then
3647: LD_EXP 4
3651: NOT
3652: PUSH
3653: LD_EXP 5
3657: NOT
3658: AND
3659: IFFALSE 3683
// begin Say ( JMM , D1c-JMM-1 ) ;
3661: LD_EXP 7
3665: PPUSH
3666: LD_STRING D1c-JMM-1
3668: PPUSH
3669: CALL_OW 88
// SaveVariable ( 3 , GammaCommander ) ;
3673: LD_INT 3
3675: PPUSH
3676: LD_STRING GammaCommander
3678: PPUSH
3679: CALL_OW 39
// end ; Say ( JMM , D1d-JMM-1 ) ;
3683: LD_EXP 7
3687: PPUSH
3688: LD_STRING D1d-JMM-1
3690: PPUSH
3691: CALL_OW 88
// all := FilterAllUnits ( [ f_type , unit_human ] ) diff [ JMM , Gladstone , commander ] ;
3695: LD_ADDR_VAR 0 6
3699: PUSH
3700: LD_INT 21
3702: PUSH
3703: LD_INT 1
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PPUSH
3710: CALL_OW 69
3714: PUSH
3715: LD_EXP 7
3719: PUSH
3720: LD_EXP 8
3724: PUSH
3725: LD_VAR 0 7
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: DIFF
3735: ST_TO_ADDR
// save_group := CharacterSelection ( 1 , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , Gladstone , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable , commander ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
3736: LD_ADDR_EXP 6
3740: PUSH
3741: LD_STRING 1
3743: PPUSH
3744: LD_INT 5
3746: PPUSH
3747: LD_INT 5
3749: PPUSH
3750: LD_INT -5
3752: PUSH
3753: LD_EXP 7
3757: PUSH
3758: LD_INT -6
3760: PUSH
3761: LD_EXP 8
3765: PUSH
3766: LD_INT -2
3768: PUSH
3769: LD_INT -3
3771: PUSH
3772: LD_INT -5
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: PUSH
3784: LD_VAR 0 6
3788: ADD
3789: PUSH
3790: LD_INT -6
3792: PUSH
3793: LD_INT -4
3795: PUSH
3796: LD_VAR 0 7
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: ADD
3806: PPUSH
3807: LD_INT 1
3809: PUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: LD_INT 1
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 4
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PPUSH
3832: CALL_OW 42
3836: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
3837: LD_EXP 7
3841: PPUSH
3842: LD_EXP 2
3846: PUSH
3847: LD_STRING JMM
3849: STR
3850: PPUSH
3851: CALL_OW 38
// if Lisa in save_group then
3855: LD_EXP 10
3859: PUSH
3860: LD_EXP 6
3864: IN
3865: IFFALSE 3895
// begin SaveVariable ( true , LisaInDelta ) ;
3867: LD_INT 1
3869: PPUSH
3870: LD_STRING LisaInDelta
3872: PPUSH
3873: CALL_OW 39
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
3877: LD_EXP 10
3881: PPUSH
3882: LD_EXP 2
3886: PUSH
3887: LD_STRING Lisa
3889: STR
3890: PPUSH
3891: CALL_OW 38
// end ; if Bobby in save_group then
3895: LD_EXP 12
3899: PUSH
3900: LD_EXP 6
3904: IN
3905: IFFALSE 3935
// begin SaveVariable ( true , BobbyInDelta ) ;
3907: LD_INT 1
3909: PPUSH
3910: LD_STRING BobbyInDelta
3912: PPUSH
3913: CALL_OW 39
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
3917: LD_EXP 12
3921: PPUSH
3922: LD_EXP 2
3926: PUSH
3927: LD_STRING Bobby
3929: STR
3930: PPUSH
3931: CALL_OW 38
// end ; if Cyrus in save_group then
3935: LD_EXP 11
3939: PUSH
3940: LD_EXP 6
3944: IN
3945: IFFALSE 3975
// begin SaveVariable ( true , CyrusInDelta ) ;
3947: LD_INT 1
3949: PPUSH
3950: LD_STRING CyrusInDelta
3952: PPUSH
3953: CALL_OW 39
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
3957: LD_EXP 11
3961: PPUSH
3962: LD_EXP 2
3966: PUSH
3967: LD_STRING Cyrus
3969: STR
3970: PPUSH
3971: CALL_OW 38
// end ; if Frank in save_group then
3975: LD_EXP 9
3979: PUSH
3980: LD_EXP 6
3984: IN
3985: IFFALSE 4015
// begin SaveVariable ( true , FrankInDelta ) ;
3987: LD_INT 1
3989: PPUSH
3990: LD_STRING FrankInDelta
3992: PPUSH
3993: CALL_OW 39
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
3997: LD_EXP 9
4001: PPUSH
4002: LD_EXP 2
4006: PUSH
4007: LD_STRING Frank
4009: STR
4010: PPUSH
4011: CALL_OW 38
// end ; if Brown in save_group then
4015: LD_EXP 14
4019: PUSH
4020: LD_EXP 6
4024: IN
4025: IFFALSE 4055
// begin SaveVariable ( true , BrownInDelta ) ;
4027: LD_INT 1
4029: PPUSH
4030: LD_STRING BrownInDelta
4032: PPUSH
4033: CALL_OW 39
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
4037: LD_EXP 14
4041: PPUSH
4042: LD_EXP 2
4046: PUSH
4047: LD_STRING Brown
4049: STR
4050: PPUSH
4051: CALL_OW 38
// end ; if Donaldson in save_group then
4055: LD_EXP 13
4059: PUSH
4060: LD_EXP 6
4064: IN
4065: IFFALSE 4095
// begin SaveVariable ( true , DonaldsonInDelta ) ;
4067: LD_INT 1
4069: PPUSH
4070: LD_STRING DonaldsonInDelta
4072: PPUSH
4073: CALL_OW 39
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4077: LD_EXP 13
4081: PPUSH
4082: LD_EXP 2
4086: PUSH
4087: LD_STRING Donaldson
4089: STR
4090: PPUSH
4091: CALL_OW 38
// end ; SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , 0 ] ^ save_group , othersGamma ) ;
4095: LD_VAR 0 6
4099: PUSH
4100: LD_EXP 7
4104: PUSH
4105: LD_EXP 8
4109: PUSH
4110: LD_EXP 10
4114: PUSH
4115: LD_EXP 11
4119: PUSH
4120: LD_EXP 12
4124: PUSH
4125: LD_EXP 9
4129: PUSH
4130: LD_EXP 13
4134: PUSH
4135: LD_EXP 14
4139: PUSH
4140: LD_INT 0
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: PUSH
4154: LD_EXP 6
4158: ADD
4159: DIFF
4160: PPUSH
4161: LD_STRING othersGamma
4163: PPUSH
4164: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , 0 ] , othersDelta ) ;
4168: LD_EXP 6
4172: PUSH
4173: LD_EXP 7
4177: PUSH
4178: LD_EXP 8
4182: PUSH
4183: LD_EXP 10
4187: PUSH
4188: LD_EXP 11
4192: PUSH
4193: LD_EXP 12
4197: PUSH
4198: LD_EXP 9
4202: PUSH
4203: LD_EXP 13
4207: PUSH
4208: LD_EXP 14
4212: PUSH
4213: LD_INT 0
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: DIFF
4227: PPUSH
4228: LD_STRING othersDelta
4230: PPUSH
4231: CALL_OW 38
// Wait ( 3 ) ;
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 67
// for i in save_group do
4242: LD_ADDR_VAR 0 3
4246: PUSH
4247: LD_EXP 6
4251: PUSH
4252: FOR_IN
4253: IFFALSE 4284
// begin if IsInUnit ( i ) then
4255: LD_VAR 0 3
4259: PPUSH
4260: CALL_OW 310
4264: IFFALSE 4275
// ComExitBuilding ( i ) ;
4266: LD_VAR 0 3
4270: PPUSH
4271: CALL_OW 122
// Wait ( 3 ) ;
4275: LD_INT 3
4277: PPUSH
4278: CALL_OW 67
// end ;
4282: GO 4252
4284: POP
4285: POP
// save_group := Insert ( save_group , 1 , JMM ) ;
4286: LD_ADDR_EXP 6
4290: PUSH
4291: LD_EXP 6
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_EXP 7
4303: PPUSH
4304: CALL_OW 2
4308: ST_TO_ADDR
// save_group := Insert ( save_group , 2 , Gladstone ) ;
4309: LD_ADDR_EXP 6
4313: PUSH
4314: LD_EXP 6
4318: PPUSH
4319: LD_INT 2
4321: PPUSH
4322: LD_EXP 8
4326: PPUSH
4327: CALL_OW 2
4331: ST_TO_ADDR
// filter := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
4332: LD_ADDR_VAR 0 8
4336: PUSH
4337: LD_INT 21
4339: PUSH
4340: LD_INT 2
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PPUSH
4347: CALL_OW 69
4351: ST_TO_ADDR
// for i = 1 to filter do
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: DOUBLE
4358: LD_INT 1
4360: DEC
4361: ST_TO_ADDR
4362: LD_VAR 0 8
4366: PUSH
4367: FOR_TO
4368: IFFALSE 4398
// ComEnterUnit ( save_group [ i ] , filter [ i ] ) ;
4370: LD_EXP 6
4374: PUSH
4375: LD_VAR 0 3
4379: ARRAY
4380: PPUSH
4381: LD_VAR 0 8
4385: PUSH
4386: LD_VAR 0 3
4390: ARRAY
4391: PPUSH
4392: CALL_OW 120
4396: GO 4367
4398: POP
4399: POP
// AddComMoveXY ( save_group , 87 , 27 ) ;
4400: LD_EXP 6
4404: PPUSH
4405: LD_INT 87
4407: PPUSH
4408: LD_INT 27
4410: PPUSH
4411: CALL_OW 171
// Wait ( 0 0$05 ) ;
4415: LD_INT 175
4417: PPUSH
4418: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
4422: LD_INT 1
4424: PPUSH
4425: LD_STRING %_cont
4427: PPUSH
4428: CALL_OW 340
// end ; end_of_file
4432: LD_VAR 0 1
4436: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4437: LD_INT 0
4439: PPUSH
4440: PPUSH
// if exist_mode then
4441: LD_VAR 0 2
4445: IFFALSE 4470
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4447: LD_ADDR_VAR 0 4
4451: PUSH
4452: LD_EXP 3
4456: PUSH
4457: LD_VAR 0 1
4461: STR
4462: PPUSH
4463: CALL_OW 34
4467: ST_TO_ADDR
4468: GO 4485
// unit := NewCharacter ( ident ) ;
4470: LD_ADDR_VAR 0 4
4474: PUSH
4475: LD_VAR 0 1
4479: PPUSH
4480: CALL_OW 25
4484: ST_TO_ADDR
// result := unit ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: LD_VAR 0 4
4494: ST_TO_ADDR
// end ;
4495: LD_VAR 0 3
4499: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
4500: LD_INT 0
4502: PPUSH
// uc_side := side ;
4503: LD_ADDR_OWVAR 20
4507: PUSH
4508: LD_VAR 0 1
4512: ST_TO_ADDR
// uc_nation := nation ;
4513: LD_ADDR_OWVAR 21
4517: PUSH
4518: LD_VAR 0 2
4522: ST_TO_ADDR
// vc_chassis := chassis ;
4523: LD_ADDR_OWVAR 37
4527: PUSH
4528: LD_VAR 0 3
4532: ST_TO_ADDR
// vc_engine := engine ;
4533: LD_ADDR_OWVAR 39
4537: PUSH
4538: LD_VAR 0 4
4542: ST_TO_ADDR
// vc_control := control ;
4543: LD_ADDR_OWVAR 38
4547: PUSH
4548: LD_VAR 0 5
4552: ST_TO_ADDR
// vc_weapon := weapon ;
4553: LD_ADDR_OWVAR 40
4557: PUSH
4558: LD_VAR 0 6
4562: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4563: LD_ADDR_OWVAR 41
4567: PUSH
4568: LD_VAR 0 7
4572: ST_TO_ADDR
// result := CreateVehicle ;
4573: LD_ADDR_VAR 0 8
4577: PUSH
4578: CALL_OW 45
4582: ST_TO_ADDR
// end ;
4583: LD_VAR 0 8
4587: RET
// export function SayX ( units , ident ) ; var i ; begin
4588: LD_INT 0
4590: PPUSH
4591: PPUSH
// result := false ;
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: LD_INT 0
4599: ST_TO_ADDR
// if not units then
4600: LD_VAR 0 1
4604: NOT
4605: IFFALSE 4609
// exit ;
4607: GO 4663
// for i in units do
4609: LD_ADDR_VAR 0 4
4613: PUSH
4614: LD_VAR 0 1
4618: PUSH
4619: FOR_IN
4620: IFFALSE 4661
// if IsOk ( i ) then
4622: LD_VAR 0 4
4626: PPUSH
4627: CALL_OW 302
4631: IFFALSE 4659
// begin Say ( i , ident ) ;
4633: LD_VAR 0 4
4637: PPUSH
4638: LD_VAR 0 2
4642: PPUSH
4643: CALL_OW 88
// result := i ;
4647: LD_ADDR_VAR 0 3
4651: PUSH
4652: LD_VAR 0 4
4656: ST_TO_ADDR
// break ;
4657: GO 4661
// end ;
4659: GO 4619
4661: POP
4662: POP
// end ;
4663: LD_VAR 0 3
4667: RET
