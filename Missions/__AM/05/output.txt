// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// Init ;
   8: CALL 25 0 0
// DebugMode ;
  12: CALL 80 0 0
// PrepareAmerican ;
  16: CALL 104 0 0
// Action ;
  20: CALL 2428 0 0
// end ;
  24: END
// export debug ; export mission_prefix , mission_prefix_prev ; export donaldson_commander , brown_commander , save_group ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// mission_prefix := 05a_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 05a_
  43: ST_TO_ADDR
// mission_prefix_prev := 04_ ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_STRING 04_
  51: ST_TO_ADDR
// donaldson_commander := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// brown_commander := false ;
  60: LD_ADDR_EXP 5
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// save_group := [ ] ;
  68: LD_ADDR_EXP 6
  72: PUSH
  73: EMPTY
  74: ST_TO_ADDR
// end ;
  75: LD_VAR 0 1
  79: RET
// function DebugMode ; begin
  80: LD_INT 0
  82: PPUSH
// if not debug then
  83: LD_EXP 1
  87: NOT
  88: IFFALSE 92
// exit ;
  90: GO 99
// FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// end ; end_of_file
  99: LD_VAR 0 1
 103: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown ; export function PrepareAmerican ; var others3 , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , tmp ; begin
 104: LD_INT 0
 106: PPUSH
 107: PPUSH
 108: PPUSH
 109: PPUSH
 110: PPUSH
 111: PPUSH
 112: PPUSH
 113: PPUSH
 114: PPUSH
 115: PPUSH
 116: PPUSH
 117: PPUSH
 118: PPUSH
// PrepareBase ;
 119: CALL 2070 0 0
// uc_side := 1 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 1
 130: ST_TO_ADDR
// uc_nation := 1 ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 1
 138: ST_TO_ADDR
// team := [ ] ;
 139: LD_ADDR_VAR 0 5
 143: PUSH
 144: EMPTY
 145: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 146: LD_ADDR_EXP 7
 150: PUSH
 151: LD_STRING JMM
 153: PPUSH
 154: LD_EXP 1
 158: NOT
 159: PPUSH
 160: CALL 4769 0 2
 164: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ) ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_STRING Gladstone
 172: PPUSH
 173: LD_INT 0
 175: PPUSH
 176: CALL 4769 0 2
 180: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 181: LD_ADDR_EXP 9
 185: PUSH
 186: LD_STRING Frank
 188: PPUSH
 189: LD_EXP 1
 193: NOT
 194: PPUSH
 195: CALL 4769 0 2
 199: ST_TO_ADDR
// if Frank then
 200: LD_EXP 9
 204: IFFALSE 222
// team := team ^ Frank ;
 206: LD_ADDR_VAR 0 5
 210: PUSH
 211: LD_VAR 0 5
 215: PUSH
 216: LD_EXP 9
 220: ADD
 221: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 222: LD_ADDR_EXP 10
 226: PUSH
 227: LD_STRING Lisa
 229: PPUSH
 230: LD_EXP 1
 234: NOT
 235: PPUSH
 236: CALL 4769 0 2
 240: ST_TO_ADDR
// if Lisa then
 241: LD_EXP 10
 245: IFFALSE 263
// team := team ^ Lisa ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 5
 256: PUSH
 257: LD_EXP 10
 261: ADD
 262: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 263: LD_ADDR_EXP 13
 267: PUSH
 268: LD_STRING Donaldson
 270: PPUSH
 271: LD_EXP 1
 275: NOT
 276: PPUSH
 277: CALL 4769 0 2
 281: ST_TO_ADDR
// if Donaldson then
 282: LD_EXP 13
 286: IFFALSE 304
// team := team ^ Donaldson ;
 288: LD_ADDR_VAR 0 5
 292: PUSH
 293: LD_VAR 0 5
 297: PUSH
 298: LD_EXP 13
 302: ADD
 303: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_STRING Brown
 311: PPUSH
 312: LD_EXP 1
 316: NOT
 317: PPUSH
 318: CALL 4769 0 2
 322: ST_TO_ADDR
// if Brown then
 323: LD_EXP 14
 327: IFFALSE 345
// team := team ^ Brown ;
 329: LD_ADDR_VAR 0 5
 333: PUSH
 334: LD_VAR 0 5
 338: PUSH
 339: LD_EXP 14
 343: ADD
 344: ST_TO_ADDR
// others4 := CreateCharacterSet ( 04_other_survivors ) ;
 345: LD_ADDR_VAR 0 3
 349: PUSH
 350: LD_STRING 04_other_survivors
 352: PPUSH
 353: CALL_OW 31
 357: ST_TO_ADDR
// DeleteCharacters ( 04_other_survivors ) ;
 358: LD_STRING 04_other_survivors
 360: PPUSH
 361: CALL_OW 40
// if not Lisa then
 365: LD_EXP 10
 369: NOT
 370: IFFALSE 488
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 372: LD_ADDR_EXP 11
 376: PUSH
 377: LD_STRING Cyrus
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: CALL 4769 0 2
 390: ST_TO_ADDR
// if Cyrus then
 391: LD_EXP 11
 395: IFFALSE 413
// team := team ^ Cyrus ;
 397: LD_ADDR_VAR 0 5
 401: PUSH
 402: LD_VAR 0 5
 406: PUSH
 407: LD_EXP 11
 411: ADD
 412: ST_TO_ADDR
// if not Cyrus then
 413: LD_EXP 11
 417: NOT
 418: IFFALSE 488
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 420: LD_ADDR_EXP 12
 424: PUSH
 425: LD_STRING Bobby
 427: PPUSH
 428: LD_EXP 1
 432: NOT
 433: PPUSH
 434: CALL 4769 0 2
 438: ST_TO_ADDR
// if Bobby then
 439: LD_EXP 12
 443: IFFALSE 461
// team := team ^ Bobby ;
 445: LD_ADDR_VAR 0 5
 449: PUSH
 450: LD_VAR 0 5
 454: PUSH
 455: LD_EXP 12
 459: ADD
 460: ST_TO_ADDR
// if not Bobby then
 461: LD_EXP 12
 465: NOT
 466: IFFALSE 488
// begin others3 := CreateCharacterSet ( 03_others ) ;
 468: LD_ADDR_VAR 0 2
 472: PUSH
 473: LD_STRING 03_others
 475: PPUSH
 476: CALL_OW 31
 480: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 481: LD_STRING 03_others
 483: PPUSH
 484: CALL_OW 40
// end ; end ; end ; if others4 then
 488: LD_VAR 0 3
 492: IFFALSE 510
// team := team ^ others4 ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_VAR 0 5
 503: PUSH
 504: LD_VAR 0 3
 508: ADD
 509: ST_TO_ADDR
// if others3 then
 510: LD_VAR 0 2
 514: IFFALSE 532
// team := team ^ others3 ;
 516: LD_ADDR_VAR 0 5
 520: PUSH
 521: LD_VAR 0 5
 525: PUSH
 526: LD_VAR 0 2
 530: ADD
 531: ST_TO_ADDR
// hc_class := class_scientistic ;
 532: LD_ADDR_OWVAR 28
 536: PUSH
 537: LD_INT 4
 539: ST_TO_ADDR
// hc_name := Christopher Jenner ;
 540: LD_ADDR_OWVAR 26
 544: PUSH
 545: LD_STRING Christopher Jenner
 547: ST_TO_ADDR
// hc_sex := sex_male ;
 548: LD_ADDR_OWVAR 27
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 556: LD_ADDR_OWVAR 29
 560: PUSH
 561: LD_INT 10
 563: PUSH
 564: LD_INT 10
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING SecondCharsGal
 578: ST_TO_ADDR
// hc_face_number := 73 ;
 579: LD_ADDR_OWVAR 34
 583: PUSH
 584: LD_INT 73
 586: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 2 ] ;
 587: LD_ADDR_OWVAR 30
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 1
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 2
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 5 ] ;
 610: LD_ADDR_OWVAR 31
 614: PUSH
 615: LD_INT 1
 617: PUSH
 618: LD_INT 0
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 5
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: ST_TO_ADDR
// team := team ^ CreateHuman ;
 633: LD_ADDR_VAR 0 5
 637: PUSH
 638: LD_VAR 0 5
 642: PUSH
 643: CALL_OW 44
 647: ADD
 648: ST_TO_ADDR
// hc_name := Phil Higgins ;
 649: LD_ADDR_OWVAR 26
 653: PUSH
 654: LD_STRING Phil Higgins
 656: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 657: LD_ADDR_OWVAR 33
 661: PUSH
 662: LD_STRING SecondCharsGal
 664: ST_TO_ADDR
// hc_face_number := 72 ;
 665: LD_ADDR_OWVAR 34
 669: PUSH
 670: LD_INT 72
 672: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
 673: LD_ADDR_OWVAR 29
 677: PUSH
 678: LD_INT 12
 680: PUSH
 681: LD_INT 9
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 1 ] ;
 688: LD_ADDR_OWVAR 30
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 3 ] ;
 711: LD_ADDR_OWVAR 31
 715: PUSH
 716: LD_INT 3
 718: PUSH
 719: LD_INT 0
 721: PUSH
 722: LD_INT 0
 724: PUSH
 725: LD_INT 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// team := team ^ CreateHuman ;
 734: LD_ADDR_VAR 0 5
 738: PUSH
 739: LD_VAR 0 5
 743: PUSH
 744: CALL_OW 44
 748: ADD
 749: ST_TO_ADDR
// InitHc_All ( ) ;
 750: CALL_OW 584
// team := team diff 0 ;
 754: LD_ADDR_VAR 0 5
 758: PUSH
 759: LD_VAR 0 5
 763: PUSH
 764: LD_INT 0
 766: DIFF
 767: ST_TO_ADDR
// if team < 9 then
 768: LD_VAR 0 5
 772: PUSH
 773: LD_INT 9
 775: LESS
 776: IFFALSE 837
// for i := team to 9 do
 778: LD_ADDR_VAR 0 12
 782: PUSH
 783: DOUBLE
 784: LD_VAR 0 5
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 9
 792: PUSH
 793: FOR_TO
 794: IFFALSE 835
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 4 ) ;
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 1
 801: PPUSH
 802: LD_INT 4
 804: PPUSH
 805: CALL_OW 12
 809: PPUSH
 810: LD_INT 4
 812: PPUSH
 813: CALL_OW 380
// team := team ^ CreateHuman ;
 817: LD_ADDR_VAR 0 5
 821: PUSH
 822: LD_VAR 0 5
 826: PUSH
 827: CALL_OW 44
 831: ADD
 832: ST_TO_ADDR
// end ;
 833: GO 793
 835: POP
 836: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) [ 1 ] ;
 837: LD_ADDR_VAR 0 6
 841: PUSH
 842: LD_INT 30
 844: PUSH
 845: LD_INT 0
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PPUSH
 852: CALL_OW 69
 856: PUSH
 857: LD_INT 1
 859: ARRAY
 860: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
 861: LD_ADDR_VAR 0 7
 865: PUSH
 866: LD_INT 30
 868: PUSH
 869: LD_INT 4
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 69
 880: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
 881: LD_ADDR_VAR 0 8
 885: PUSH
 886: LD_INT 2
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 7
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 30
 901: PUSH
 902: LD_INT 6
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PPUSH
 914: CALL_OW 69
 918: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
 919: LD_ADDR_VAR 0 9
 923: PUSH
 924: LD_INT 30
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PPUSH
 934: CALL_OW 69
 938: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
 939: LD_ADDR_VAR 0 10
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: LD_INT 30
 949: PUSH
 950: LD_INT 32
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: PUSH
 957: LD_INT 30
 959: PUSH
 960: LD_INT 31
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 69
 976: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
 977: LD_VAR 0 6
 981: PPUSH
 982: LD_STRING Gamma
 984: PPUSH
 985: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
 989: LD_VAR 0 6
 993: PPUSH
 994: CALL_OW 274
 998: PPUSH
 999: LD_INT 2
1001: PPUSH
1002: LD_INT 10000
1004: PPUSH
1005: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1009: LD_VAR 0 6
1013: PPUSH
1014: CALL_OW 274
1018: PPUSH
1019: LD_INT 1
1021: PPUSH
1022: LD_INT 10000
1024: PPUSH
1025: CALL_OW 277
// if dep then
1029: LD_VAR 0 6
1033: IFFALSE 1115
// begin if Brown then
1035: LD_EXP 14
1039: IFFALSE 1075
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1041: LD_EXP 14
1045: PPUSH
1046: LD_VAR 0 6
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: CALL_OW 52
// team := team diff Brown ;
1059: LD_ADDR_VAR 0 5
1063: PUSH
1064: LD_VAR 0 5
1068: PUSH
1069: LD_EXP 14
1073: DIFF
1074: ST_TO_ADDR
// end ; if Donaldson then
1075: LD_EXP 13
1079: IFFALSE 1115
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1081: LD_EXP 13
1085: PPUSH
1086: LD_VAR 0 6
1090: PUSH
1091: LD_INT 1
1093: ARRAY
1094: PPUSH
1095: CALL_OW 52
// team := team diff Donaldson ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_VAR 0 5
1108: PUSH
1109: LD_EXP 13
1113: DIFF
1114: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1115: LD_VAR 0 10
1119: IFFALSE 1142
1121: PUSH
1122: LD_VAR 0 5
1126: PPUSH
1127: LD_INT 25
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 72
1141: AND
1142: IFFALSE 1251
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1144: LD_ADDR_VAR 0 11
1148: PUSH
1149: LD_VAR 0 5
1153: PPUSH
1154: LD_INT 25
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 72
1168: ST_TO_ADDR
// for i in bun do
1169: LD_ADDR_VAR 0 12
1173: PUSH
1174: LD_VAR 0 10
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1249
// begin if not filter then
1182: LD_VAR 0 11
1186: NOT
1187: IFFALSE 1191
// break ;
1189: GO 1249
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1191: LD_VAR 0 11
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 12
1204: PPUSH
1205: CALL_OW 52
// team := team diff filter [ 1 ] ;
1209: LD_ADDR_VAR 0 5
1213: PUSH
1214: LD_VAR 0 5
1218: PUSH
1219: LD_VAR 0 11
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: DIFF
1228: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1229: LD_ADDR_VAR 0 11
1233: PUSH
1234: LD_VAR 0 11
1238: PPUSH
1239: LD_INT 1
1241: PPUSH
1242: CALL_OW 3
1246: ST_TO_ADDR
// end ;
1247: GO 1179
1249: POP
1250: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1251: LD_VAR 0 7
1255: IFFALSE 1278
1257: PUSH
1258: LD_VAR 0 5
1262: PPUSH
1263: LD_INT 25
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL_OW 72
1277: AND
1278: IFFALSE 1400
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1280: LD_ADDR_VAR 0 11
1284: PUSH
1285: LD_VAR 0 5
1289: PPUSH
1290: LD_INT 25
1292: PUSH
1293: LD_INT 1
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: PPUSH
1300: CALL_OW 72
1304: ST_TO_ADDR
// for i = 1 to filter do
1305: LD_ADDR_VAR 0 12
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_VAR 0 11
1319: PUSH
1320: FOR_TO
1321: IFFALSE 1382
// begin if ( i <= 6 ) then
1323: LD_VAR 0 12
1327: PUSH
1328: LD_INT 6
1330: LESSEQUAL
1331: IFFALSE 1359
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1333: LD_VAR 0 11
1337: PUSH
1338: LD_VAR 0 12
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 7
1348: PUSH
1349: LD_INT 1
1351: ARRAY
1352: PPUSH
1353: CALL_OW 52
1357: GO 1380
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1359: LD_VAR 0 11
1363: PUSH
1364: LD_VAR 0 12
1368: ARRAY
1369: PPUSH
1370: LD_INT 1
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// end ;
1380: GO 1320
1382: POP
1383: POP
// team := team diff filter ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_VAR 0 5
1393: PUSH
1394: LD_VAR 0 11
1398: DIFF
1399: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1400: LD_VAR 0 8
1404: IFFALSE 1427
1406: PUSH
1407: LD_VAR 0 5
1411: PPUSH
1412: LD_INT 25
1414: PUSH
1415: LD_INT 4
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 72
1426: AND
1427: IFFALSE 1549
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1429: LD_ADDR_VAR 0 11
1433: PUSH
1434: LD_VAR 0 5
1438: PPUSH
1439: LD_INT 25
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 72
1453: ST_TO_ADDR
// for i = 1 to filter do
1454: LD_ADDR_VAR 0 12
1458: PUSH
1459: DOUBLE
1460: LD_INT 1
1462: DEC
1463: ST_TO_ADDR
1464: LD_VAR 0 11
1468: PUSH
1469: FOR_TO
1470: IFFALSE 1531
// begin if ( i <= 6 ) then
1472: LD_VAR 0 12
1476: PUSH
1477: LD_INT 6
1479: LESSEQUAL
1480: IFFALSE 1508
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1482: LD_VAR 0 11
1486: PUSH
1487: LD_VAR 0 12
1491: ARRAY
1492: PPUSH
1493: LD_VAR 0 8
1497: PUSH
1498: LD_INT 1
1500: ARRAY
1501: PPUSH
1502: CALL_OW 52
1506: GO 1529
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1508: LD_VAR 0 11
1512: PUSH
1513: LD_VAR 0 12
1517: ARRAY
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL_OW 49
// end ;
1529: GO 1469
1531: POP
1532: POP
// team := team diff filter ;
1533: LD_ADDR_VAR 0 5
1537: PUSH
1538: LD_VAR 0 5
1542: PUSH
1543: LD_VAR 0 11
1547: DIFF
1548: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
1549: LD_VAR 0 9
1553: IFFALSE 1576
1555: PUSH
1556: LD_VAR 0 5
1560: PPUSH
1561: LD_INT 25
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PPUSH
1571: CALL_OW 72
1575: AND
1576: IFFALSE 1698
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
1578: LD_ADDR_VAR 0 11
1582: PUSH
1583: LD_VAR 0 5
1587: PPUSH
1588: LD_INT 25
1590: PUSH
1591: LD_INT 3
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PPUSH
1598: CALL_OW 72
1602: ST_TO_ADDR
// for i = 1 to filter do
1603: LD_ADDR_VAR 0 12
1607: PUSH
1608: DOUBLE
1609: LD_INT 1
1611: DEC
1612: ST_TO_ADDR
1613: LD_VAR 0 11
1617: PUSH
1618: FOR_TO
1619: IFFALSE 1680
// begin if ( i <= 6 ) then
1621: LD_VAR 0 12
1625: PUSH
1626: LD_INT 6
1628: LESSEQUAL
1629: IFFALSE 1657
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
1631: LD_VAR 0 11
1635: PUSH
1636: LD_VAR 0 12
1640: ARRAY
1641: PPUSH
1642: LD_VAR 0 9
1646: PUSH
1647: LD_INT 1
1649: ARRAY
1650: PPUSH
1651: CALL_OW 52
1655: GO 1678
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1657: LD_VAR 0 11
1661: PUSH
1662: LD_VAR 0 12
1666: ARRAY
1667: PPUSH
1668: LD_INT 1
1670: PPUSH
1671: LD_INT 0
1673: PPUSH
1674: CALL_OW 49
// end ;
1678: GO 1618
1680: POP
1681: POP
// team := team diff filter ;
1682: LD_ADDR_VAR 0 5
1686: PUSH
1687: LD_VAR 0 5
1691: PUSH
1692: LD_VAR 0 11
1696: DIFF
1697: ST_TO_ADDR
// end ; if team then
1698: LD_VAR 0 5
1702: IFFALSE 1745
// for i in team do
1704: LD_ADDR_VAR 0 12
1708: PUSH
1709: LD_VAR 0 5
1713: PUSH
1714: FOR_IN
1715: IFFALSE 1743
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
1717: LD_VAR 0 12
1721: PPUSH
1722: LD_INT 1
1724: PPUSH
1725: LD_INT 0
1727: PPUSH
1728: CALL_OW 49
// ComHold ( i ) ;
1732: LD_VAR 0 12
1736: PPUSH
1737: CALL_OW 140
// end ;
1741: GO 1714
1743: POP
1744: POP
// if fac then
1745: LD_VAR 0 9
1749: IFFALSE 1785
// if UnitsInside ( fac [ 1 ] ) then
1751: LD_VAR 0 9
1755: PUSH
1756: LD_INT 1
1758: ARRAY
1759: PPUSH
1760: CALL_OW 313
1764: IFFALSE 1785
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
1766: LD_VAR 0 9
1770: PUSH
1771: LD_INT 1
1773: ARRAY
1774: PPUSH
1775: LD_INT 10
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 486
// if lab then
1785: LD_VAR 0 8
1789: IFFALSE 1825
// if UnitsInside ( lab [ 1 ] ) then
1791: LD_VAR 0 8
1795: PUSH
1796: LD_INT 1
1798: ARRAY
1799: PPUSH
1800: CALL_OW 313
1804: IFFALSE 1825
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
1806: LD_VAR 0 8
1810: PUSH
1811: LD_INT 1
1813: ARRAY
1814: PPUSH
1815: LD_INT 10
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL_OW 486
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
1825: LD_ADDR_VAR 0 4
1829: PUSH
1830: LD_INT 1
1832: PPUSH
1833: LD_INT 1
1835: PPUSH
1836: LD_INT 1
1838: PPUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_INT 3
1847: PPUSH
1848: LD_INT 100
1850: PPUSH
1851: CALL 4832 0 7
1855: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1856: LD_VAR 0 4
1860: PPUSH
1861: LD_INT 2
1863: PPUSH
1864: CALL_OW 233
// PlaceUnitXY ( veh , 21 , 8 , false ) ;
1868: LD_VAR 0 4
1872: PPUSH
1873: LD_INT 21
1875: PPUSH
1876: LD_INT 8
1878: PPUSH
1879: LD_INT 0
1881: PPUSH
1882: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
1886: LD_EXP 7
1890: PPUSH
1891: LD_VAR 0 4
1895: PPUSH
1896: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1900: LD_ADDR_VAR 0 4
1904: PUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: LD_INT 2
1916: PPUSH
1917: LD_INT 1
1919: PPUSH
1920: LD_INT 2
1922: PPUSH
1923: LD_INT 100
1925: PPUSH
1926: CALL 4832 0 7
1930: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1931: LD_VAR 0 4
1935: PPUSH
1936: LD_INT 2
1938: PPUSH
1939: CALL_OW 233
// PlaceUnitXY ( veh , 16 , 3 , false ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 16
1950: PPUSH
1951: LD_INT 3
1953: PPUSH
1954: LD_INT 0
1956: PPUSH
1957: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1961: LD_EXP 8
1965: PPUSH
1966: LD_VAR 0 4
1970: PPUSH
1971: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 100 ) ;
1975: LD_ADDR_VAR 0 4
1979: PUSH
1980: LD_INT 1
1982: PPUSH
1983: LD_INT 1
1985: PPUSH
1986: LD_INT 2
1988: PPUSH
1989: LD_INT 2
1991: PPUSH
1992: LD_INT 1
1994: PPUSH
1995: LD_INT 12
1997: PPUSH
1998: LD_INT 100
2000: PPUSH
2001: CALL 4832 0 7
2005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
2006: LD_VAR 0 4
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: LD_INT 5
2016: PPUSH
2017: CALL_OW 12
2021: PPUSH
2022: CALL_OW 233
// if not PlaceUnitArea ( veh , gammaBaseArea , false ) then
2026: LD_VAR 0 4
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL_OW 49
2041: NOT
2042: IFFALSE 2065
// PlaceUnitXYR ( veh , 71 , 24 , 5 , false ) ;
2044: LD_VAR 0 4
2048: PPUSH
2049: LD_INT 71
2051: PPUSH
2052: LD_INT 24
2054: PPUSH
2055: LD_INT 5
2057: PPUSH
2058: LD_INT 0
2060: PPUSH
2061: CALL_OW 50
// end ;
2065: LD_VAR 0 1
2069: RET
// function PrepareBase ; var blist , i , b ; begin
2070: LD_INT 0
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2076: LD_INT 71
2078: PPUSH
2079: LD_INT 5
2081: PPUSH
2082: LD_INT 1
2084: PPUSH
2085: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_STRING GammaBase
2096: PPUSH
2097: EMPTY
2098: PPUSH
2099: CALL_OW 30
2103: ST_TO_ADDR
// if not blist then
2104: LD_VAR 0 2
2108: NOT
2109: IFFALSE 2149
// blist := [ [ b_depot , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2111: LD_ADDR_VAR 0 2
2115: PUSH
2116: LD_INT 0
2118: PUSH
2119: LD_INT 52
2121: PUSH
2122: LD_INT 12
2124: PUSH
2125: LD_INT 3
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 0
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: PUSH
2146: EMPTY
2147: LIST
2148: ST_TO_ADDR
// uc_side := 1 ;
2149: LD_ADDR_OWVAR 20
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// uc_nation := 1 ;
2157: LD_ADDR_OWVAR 21
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// for i in blist do
2165: LD_ADDR_VAR 0 3
2169: PUSH
2170: LD_VAR 0 2
2174: PUSH
2175: FOR_IN
2176: IFFALSE 2369
// begin InitBc ;
2178: CALL_OW 21
// bc_type := i [ 1 ] ;
2182: LD_ADDR_OWVAR 42
2186: PUSH
2187: LD_VAR 0 3
2191: PUSH
2192: LD_INT 1
2194: ARRAY
2195: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2196: LD_ADDR_OWVAR 43
2200: PUSH
2201: LD_VAR 0 3
2205: PUSH
2206: LD_INT 5
2208: ARRAY
2209: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2210: LD_ADDR_OWVAR 44
2214: PUSH
2215: LD_INT 9
2217: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 9
2225: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2226: LD_VAR 0 3
2230: PUSH
2231: LD_INT 1
2233: ARRAY
2234: PUSH
2235: LD_INT 7
2237: PUSH
2238: LD_INT 8
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: IN
2245: IFFALSE 2297
// begin bc_kind1 := i [ 7 ] ;
2247: LD_ADDR_OWVAR 44
2251: PUSH
2252: LD_VAR 0 3
2256: PUSH
2257: LD_INT 7
2259: ARRAY
2260: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2261: LD_ADDR_OWVAR 45
2265: PUSH
2266: LD_INT 9
2268: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_INT 1
2276: ARRAY
2277: PUSH
2278: LD_INT 8
2280: EQUAL
2281: IFFALSE 2297
// bc_kind2 := i [ 8 ] ;
2283: LD_ADDR_OWVAR 45
2287: PUSH
2288: LD_VAR 0 3
2292: PUSH
2293: LD_INT 8
2295: ARRAY
2296: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2297: LD_ADDR_VAR 0 4
2301: PUSH
2302: LD_VAR 0 3
2306: PUSH
2307: LD_INT 2
2309: ARRAY
2310: PPUSH
2311: LD_VAR 0 3
2315: PUSH
2316: LD_INT 3
2318: ARRAY
2319: PPUSH
2320: LD_VAR 0 3
2324: PUSH
2325: LD_INT 4
2327: ARRAY
2328: PPUSH
2329: CALL_OW 47
2333: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2334: LD_VAR 0 4
2338: PPUSH
2339: CALL_OW 266
2343: PUSH
2344: LD_INT 32
2346: EQUAL
2347: IFFALSE 2367
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2349: LD_VAR 0 4
2353: PPUSH
2354: LD_VAR 0 3
2358: PUSH
2359: LD_INT 7
2361: ARRAY
2362: PPUSH
2363: CALL_OW 431
// end ; end ;
2367: GO 2175
2369: POP
2370: POP
// if not FilterAllUnits ( [ f_btype , b_depot ] ) then
2371: LD_INT 30
2373: PUSH
2374: LD_INT 0
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: CALL_OW 69
2385: NOT
2386: IFFALSE 2423
// begin bc_type := b_depot ;
2388: LD_ADDR_OWVAR 42
2392: PUSH
2393: LD_INT 0
2395: ST_TO_ADDR
// bc_level := 6 ;
2396: LD_ADDR_OWVAR 43
2400: PUSH
2401: LD_INT 6
2403: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: LD_INT 52
2411: PPUSH
2412: LD_INT 12
2414: PPUSH
2415: LD_INT 3
2417: PPUSH
2418: CALL_OW 47
2422: ST_TO_ADDR
// end ; end ; end_of_file
2423: LD_VAR 0 1
2427: RET
// export function Action ; var points , i , sol , team , all , commander , filter ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
2436: PPUSH
2437: PPUSH
// PlaceSeeing ( 0 , 0 , 1 , - 32976 ) ;
2438: LD_INT 0
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: LD_INT 32976
2449: NEG
2450: PPUSH
2451: CALL_OW 330
// InGameOn ;
2455: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2459: LD_INT 33
2461: PPUSH
2462: LD_INT 11
2464: PPUSH
2465: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2469: LD_ADDR_VAR 0 2
2473: PUSH
2474: LD_INT 29
2476: PUSH
2477: LD_INT 21
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 41
2486: PUSH
2487: LD_INT 28
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 52
2496: PUSH
2497: LD_INT 26
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 49
2506: PUSH
2507: LD_INT 16
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: ST_TO_ADDR
// for i in points do
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: LD_VAR 0 2
2529: PUSH
2530: FOR_IN
2531: IFFALSE 2571
// AddComMoveXY ( [ JMM , Gladstone ] , i [ 1 ] , i [ 2 ] ) ;
2533: LD_EXP 7
2537: PUSH
2538: LD_EXP 8
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: PPUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: PPUSH
2556: LD_VAR 0 3
2560: PUSH
2561: LD_INT 2
2563: ARRAY
2564: PPUSH
2565: CALL_OW 171
2569: GO 2530
2571: POP
2572: POP
// AddComExitVehicle ( [ JMM , Gladstone ] ) ;
2573: LD_EXP 7
2577: PUSH
2578: LD_EXP 8
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PPUSH
2587: CALL_OW 181
// repeat wait ( 0 0$01 ) ;
2591: LD_INT 35
2593: PPUSH
2594: CALL_OW 67
// until not IsInUnit ( JMM ) and not IsInUnit ( Gladstone ) ;
2598: LD_EXP 7
2602: PPUSH
2603: CALL_OW 310
2607: NOT
2608: IFFALSE 2622
2610: PUSH
2611: LD_EXP 8
2615: PPUSH
2616: CALL_OW 310
2620: NOT
2621: AND
2622: IFFALSE 2591
// ComTurnUnit ( JMM , Gladstone ) ;
2624: LD_EXP 7
2628: PPUSH
2629: LD_EXP 8
2633: PPUSH
2634: CALL_OW 119
// ComTurnUnit ( Gladstone , JMM ) ;
2638: LD_EXP 8
2642: PPUSH
2643: LD_EXP 7
2647: PPUSH
2648: CALL_OW 119
// sol := FilterAllUnits ( [ f_sex , sex_male ] ) diff [ JMM , Gladstone , Bobby , Cyrus , Frank , Brown ] ;
2652: LD_ADDR_VAR 0 4
2656: PUSH
2657: LD_INT 26
2659: PUSH
2660: LD_INT 1
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: PUSH
2672: LD_EXP 7
2676: PUSH
2677: LD_EXP 8
2681: PUSH
2682: LD_EXP 12
2686: PUSH
2687: LD_EXP 11
2691: PUSH
2692: LD_EXP 9
2696: PUSH
2697: LD_EXP 14
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: DIFF
2710: ST_TO_ADDR
// if sol then
2711: LD_VAR 0 4
2715: IFFALSE 2731
// sol := sol [ 1 ] ;
2717: LD_ADDR_VAR 0 4
2721: PUSH
2722: LD_VAR 0 4
2726: PUSH
2727: LD_INT 1
2729: ARRAY
2730: ST_TO_ADDR
// team := [ ] ;
2731: LD_ADDR_VAR 0 5
2735: PUSH
2736: EMPTY
2737: ST_TO_ADDR
// if sol then
2738: LD_VAR 0 4
2742: IFFALSE 2760
// team := team ^ sol ;
2744: LD_ADDR_VAR 0 5
2748: PUSH
2749: LD_VAR 0 5
2753: PUSH
2754: LD_VAR 0 4
2758: ADD
2759: ST_TO_ADDR
// if Lisa then
2760: LD_EXP 10
2764: IFFALSE 2782
// team := team ^ Lisa ;
2766: LD_ADDR_VAR 0 5
2770: PUSH
2771: LD_VAR 0 5
2775: PUSH
2776: LD_EXP 10
2780: ADD
2781: ST_TO_ADDR
// if Donaldson then
2782: LD_EXP 13
2786: IFFALSE 2804
// team := team ^ Donaldson ;
2788: LD_ADDR_VAR 0 5
2792: PUSH
2793: LD_VAR 0 5
2797: PUSH
2798: LD_EXP 13
2802: ADD
2803: ST_TO_ADDR
// if Brown then
2804: LD_EXP 14
2808: IFFALSE 2826
// team := team ^ Brown ;
2810: LD_ADDR_VAR 0 5
2814: PUSH
2815: LD_VAR 0 5
2819: PUSH
2820: LD_EXP 14
2824: ADD
2825: ST_TO_ADDR
// if Bobby then
2826: LD_EXP 12
2830: IFFALSE 2848
// team := team ^ Bobby ;
2832: LD_ADDR_VAR 0 5
2836: PUSH
2837: LD_VAR 0 5
2841: PUSH
2842: LD_EXP 12
2846: ADD
2847: ST_TO_ADDR
// if Cyrus then
2848: LD_EXP 11
2852: IFFALSE 2870
// team := team ^ Cyrus ;
2854: LD_ADDR_VAR 0 5
2858: PUSH
2859: LD_VAR 0 5
2863: PUSH
2864: LD_EXP 11
2868: ADD
2869: ST_TO_ADDR
// if Frank then
2870: LD_EXP 9
2874: IFFALSE 2892
// team := team ^ Frank ;
2876: LD_ADDR_VAR 0 5
2880: PUSH
2881: LD_VAR 0 5
2885: PUSH
2886: LD_EXP 9
2890: ADD
2891: ST_TO_ADDR
// for i in [ FilterUnitsInArea ( gammaBaseArea , [ [ f_not , [ f_inside ] ] , [ f_type , unit_human ] ] ) diff [ JMM , Gladstone ] ] do
2892: LD_ADDR_VAR 0 3
2896: PUSH
2897: LD_INT 1
2899: PPUSH
2900: LD_INT 3
2902: PUSH
2903: LD_INT 54
2905: PUSH
2906: EMPTY
2907: LIST
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 21
2915: PUSH
2916: LD_INT 1
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 70
2931: PUSH
2932: LD_EXP 7
2936: PUSH
2937: LD_EXP 8
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: DIFF
2946: PUSH
2947: EMPTY
2948: LIST
2949: PUSH
2950: FOR_IN
2951: IFFALSE 2971
// team := team ^ i ;
2953: LD_ADDR_VAR 0 5
2957: PUSH
2958: LD_VAR 0 5
2962: PUSH
2963: LD_VAR 0 3
2967: ADD
2968: ST_TO_ADDR
2969: GO 2950
2971: POP
2972: POP
// if team then
2973: LD_VAR 0 5
2977: IFFALSE 3053
// begin ComExitBuilding ( team ) ;
2979: LD_VAR 0 5
2983: PPUSH
2984: CALL_OW 122
// AddComMoveUnit ( team , JMM ) ;
2988: LD_VAR 0 5
2992: PPUSH
2993: LD_EXP 7
2997: PPUSH
2998: CALL_OW 172
// repeat wait ( 1 ) ;
3002: LD_INT 1
3004: PPUSH
3005: CALL_OW 67
// until GetDistUnits ( JMM , NearestUnitToUnit ( team , JMM ) ) < 6 ;
3009: LD_EXP 7
3013: PPUSH
3014: LD_VAR 0 5
3018: PPUSH
3019: LD_EXP 7
3023: PPUSH
3024: CALL_OW 74
3028: PPUSH
3029: CALL_OW 296
3033: PUSH
3034: LD_INT 6
3036: LESS
3037: IFFALSE 3002
// ComTurnUnit ( team , JMM ) ;
3039: LD_VAR 0 5
3043: PPUSH
3044: LD_EXP 7
3048: PPUSH
3049: CALL_OW 119
// end ; if Lisa then
3053: LD_EXP 10
3057: IFFALSE 3085
// begin ComTurnUnit ( JMM , Lisa ) ;
3059: LD_EXP 7
3063: PPUSH
3064: LD_EXP 10
3068: PPUSH
3069: CALL_OW 119
// Say ( Lisa , D1-Lisa-1 ) ;
3073: LD_EXP 10
3077: PPUSH
3078: LD_STRING D1-Lisa-1
3080: PPUSH
3081: CALL_OW 88
// end ; if sol then
3085: LD_VAR 0 4
3089: IFFALSE 3117
// begin ComTurnUnit ( JMM , sol ) ;
3091: LD_EXP 7
3095: PPUSH
3096: LD_VAR 0 4
3100: PPUSH
3101: CALL_OW 119
// Say ( sol , D1-Sol1-1 ) ;
3105: LD_VAR 0 4
3109: PPUSH
3110: LD_STRING D1-Sol1-1
3112: PPUSH
3113: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
3117: LD_EXP 7
3121: PPUSH
3122: LD_STRING D1-JMM-1
3124: PPUSH
3125: CALL_OW 88
// Say ( JMM , D1-JMM-1a ) ;
3129: LD_EXP 7
3133: PPUSH
3134: LD_STRING D1-JMM-1a
3136: PPUSH
3137: CALL_OW 88
// ComTurnUnit ( JMM , Gladstone ) ;
3141: LD_EXP 7
3145: PPUSH
3146: LD_EXP 8
3150: PPUSH
3151: CALL_OW 119
// ComTurnUnit ( team , Gladstone ) ;
3155: LD_VAR 0 5
3159: PPUSH
3160: LD_EXP 8
3164: PPUSH
3165: CALL_OW 119
// if Frank then
3169: LD_EXP 9
3173: IFFALSE 3201
// begin Say ( Frank , D1-Frank-1 ) ;
3175: LD_EXP 9
3179: PPUSH
3180: LD_STRING D1-Frank-1
3182: PPUSH
3183: CALL_OW 88
// ComTurnUnit ( JMM , Frank ) ;
3187: LD_EXP 7
3191: PPUSH
3192: LD_EXP 9
3196: PPUSH
3197: CALL_OW 119
// end ; if Lisa then
3201: LD_EXP 10
3205: IFFALSE 3233
// begin ComTurnUnit ( JMM , Lisa ) ;
3207: LD_EXP 7
3211: PPUSH
3212: LD_EXP 10
3216: PPUSH
3217: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
3221: LD_EXP 10
3225: PPUSH
3226: LD_STRING D1-Lisa-2
3228: PPUSH
3229: CALL_OW 88
// end ; if sol then
3233: LD_VAR 0 4
3237: IFFALSE 3265
// begin ComTurnUnit ( JMM , sol ) ;
3239: LD_EXP 7
3243: PPUSH
3244: LD_VAR 0 4
3248: PPUSH
3249: CALL_OW 119
// Say ( sol , D1-Sol1-2 ) ;
3253: LD_VAR 0 4
3257: PPUSH
3258: LD_STRING D1-Sol1-2
3260: PPUSH
3261: CALL_OW 88
// end ; Say ( Gladstone , D1-Glad-2 ) ;
3265: LD_EXP 8
3269: PPUSH
3270: LD_STRING D1-Glad-2
3272: PPUSH
3273: CALL_OW 88
// ComTurnUnit ( team , JMM ) ;
3277: LD_VAR 0 5
3281: PPUSH
3282: LD_EXP 7
3286: PPUSH
3287: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
3291: LD_EXP 7
3295: PPUSH
3296: LD_STRING D1-JMM-2
3298: PPUSH
3299: CALL_OW 88
// ComTurnUnit ( JMM , Gladstone ) ;
3303: LD_EXP 7
3307: PPUSH
3308: LD_EXP 8
3312: PPUSH
3313: CALL_OW 119
// Say ( Gladstone , D1-Glad-3 ) ;
3317: LD_EXP 8
3321: PPUSH
3322: LD_STRING D1-Glad-3
3324: PPUSH
3325: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3329: LD_EXP 7
3333: PPUSH
3334: LD_STRING D1-JMM-3
3336: PPUSH
3337: CALL_OW 88
// Say ( Gladstone , D1-Glad-4 ) ;
3341: LD_EXP 8
3345: PPUSH
3346: LD_STRING D1-Glad-4
3348: PPUSH
3349: CALL_OW 88
// if Frank then
3353: LD_EXP 9
3357: IFFALSE 3385
// begin ComTurnUnit ( JMM , Frank ) ;
3359: LD_EXP 7
3363: PPUSH
3364: LD_EXP 9
3368: PPUSH
3369: CALL_OW 119
// Say ( Frank , D1-Frank-4 ) ;
3373: LD_EXP 9
3377: PPUSH
3378: LD_STRING D1-Frank-4
3380: PPUSH
3381: CALL_OW 88
// end ; ComTurnUnit ( JMM , Gladstone ) ;
3385: LD_EXP 7
3389: PPUSH
3390: LD_EXP 8
3394: PPUSH
3395: CALL_OW 119
// Say ( JMM , D1-JMM-4 ) ;
3399: LD_EXP 7
3403: PPUSH
3404: LD_STRING D1-JMM-4
3406: PPUSH
3407: CALL_OW 88
// if Lisa then
3411: LD_EXP 10
3415: IFFALSE 3482
// begin Say ( Lisa , D1-Lisa-4 ) ;
3417: LD_EXP 10
3421: PPUSH
3422: LD_STRING D1-Lisa-4
3424: PPUSH
3425: CALL_OW 88
// if Frank then
3429: LD_EXP 9
3433: IFFALSE 3482
// begin ComTurnUnit ( Frank , Lisa ) ;
3435: LD_EXP 9
3439: PPUSH
3440: LD_EXP 10
3444: PPUSH
3445: CALL_OW 119
// Say ( Frank , D1-Frank-5 ) ;
3449: LD_EXP 9
3453: PPUSH
3454: LD_STRING D1-Frank-5
3456: PPUSH
3457: CALL_OW 88
// Wait ( 3 ) ;
3461: LD_INT 3
3463: PPUSH
3464: CALL_OW 67
// AddComTurnUnit ( Frank , JMM ) ;
3468: LD_EXP 9
3472: PPUSH
3473: LD_EXP 7
3477: PPUSH
3478: CALL_OW 179
// end ; end ; if sol then
3482: LD_VAR 0 4
3486: IFFALSE 3500
// Say ( sol , D1-Sol1-5 ) ;
3488: LD_VAR 0 4
3492: PPUSH
3493: LD_STRING D1-Sol1-5
3495: PPUSH
3496: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3500: LD_EXP 7
3504: PPUSH
3505: LD_STRING D1-JMM-5
3507: PPUSH
3508: CALL_OW 88
// Say ( Gladstone , D1-Glad-5 ) ;
3512: LD_EXP 8
3516: PPUSH
3517: LD_STRING D1-Glad-5
3519: PPUSH
3520: CALL_OW 88
// if Frank then
3524: LD_EXP 9
3528: IFFALSE 3542
// Say ( Frank , D1-Frank-6 ) ;
3530: LD_EXP 9
3534: PPUSH
3535: LD_STRING D1-Frank-6
3537: PPUSH
3538: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3542: LD_EXP 7
3546: PPUSH
3547: LD_STRING D1-JMM-6
3549: PPUSH
3550: CALL_OW 88
// if Brown and Donaldson then
3554: LD_EXP 14
3558: IFFALSE 3566
3560: PUSH
3561: LD_EXP 13
3565: AND
3566: IFFALSE 3615
// case Query ( QCommander ) of 1 :
3568: LD_STRING QCommander
3570: PPUSH
3571: CALL_OW 97
3575: PUSH
3576: LD_INT 1
3578: DOUBLE
3579: EQUAL
3580: IFTRUE 3584
3582: GO 3595
3584: POP
// donaldson_commander := true ; 2 :
3585: LD_ADDR_EXP 4
3589: PUSH
3590: LD_INT 1
3592: ST_TO_ADDR
3593: GO 3615
3595: LD_INT 2
3597: DOUBLE
3598: EQUAL
3599: IFTRUE 3603
3601: GO 3614
3603: POP
// brown_commander := true ; end ;
3604: LD_ADDR_EXP 5
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
3612: GO 3615
3614: POP
// if not Brown and Donaldson then
3615: LD_EXP 14
3619: NOT
3620: IFFALSE 3628
3622: PUSH
3623: LD_EXP 13
3627: AND
3628: IFFALSE 3638
// donaldson_commander := true ;
3630: LD_ADDR_EXP 4
3634: PUSH
3635: LD_INT 1
3637: ST_TO_ADDR
// if Brown and not Donaldson then
3638: LD_EXP 14
3642: IFFALSE 3651
3644: PUSH
3645: LD_EXP 13
3649: NOT
3650: AND
3651: IFFALSE 3661
// brown_commander := true ;
3653: LD_ADDR_EXP 5
3657: PUSH
3658: LD_INT 1
3660: ST_TO_ADDR
// if donaldson_commander then
3661: LD_EXP 4
3665: IFFALSE 3812
// begin ComTurnUnit ( JMM , Donaldson ) ;
3667: LD_EXP 7
3671: PPUSH
3672: LD_EXP 13
3676: PPUSH
3677: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
3681: LD_EXP 7
3685: PPUSH
3686: LD_STRING D1a-JMM-1
3688: PPUSH
3689: CALL_OW 88
// ComMoveUnit ( Donaldson , JMM ) ;
3693: LD_EXP 13
3697: PPUSH
3698: LD_EXP 7
3702: PPUSH
3703: CALL_OW 112
// AddComTurnUnit ( Donaldson , JMM ) ;
3707: LD_EXP 13
3711: PPUSH
3712: LD_EXP 7
3716: PPUSH
3717: CALL_OW 179
// Wait ( 3 ) ;
3721: LD_INT 3
3723: PPUSH
3724: CALL_OW 67
// Say ( Donaldson , D1a-Don-1 ) ;
3728: LD_EXP 13
3732: PPUSH
3733: LD_STRING D1a-Don-1
3735: PPUSH
3736: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
3740: LD_EXP 7
3744: PPUSH
3745: LD_STRING D1b-JMM-2
3747: PPUSH
3748: CALL_OW 88
// Say ( Donaldson , D1a-Don-2 ) ;
3752: LD_EXP 13
3756: PPUSH
3757: LD_STRING D1a-Don-2
3759: PPUSH
3760: CALL_OW 88
// ComEnterUnit ( Donaldson , FilterAllUnits ( [ f_btype , b_depot ] ) [ 1 ] ) ;
3764: LD_EXP 13
3768: PPUSH
3769: LD_INT 30
3771: PUSH
3772: LD_INT 0
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PPUSH
3779: CALL_OW 69
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PPUSH
3788: CALL_OW 120
// SaveVariable ( 1 , GammaCommander ) ;
3792: LD_INT 1
3794: PPUSH
3795: LD_STRING GammaCommander
3797: PPUSH
3798: CALL_OW 39
// commander := Donaldson ;
3802: LD_ADDR_VAR 0 7
3806: PUSH
3807: LD_EXP 13
3811: ST_TO_ADDR
// end ; if brown_commander then
3812: LD_EXP 5
3816: IFFALSE 3963
// begin ComTurnUnit ( JMM , Brown ) ;
3818: LD_EXP 7
3822: PPUSH
3823: LD_EXP 14
3827: PPUSH
3828: CALL_OW 119
// Say ( JMM , D1b-JMM-1 ) ;
3832: LD_EXP 7
3836: PPUSH
3837: LD_STRING D1b-JMM-1
3839: PPUSH
3840: CALL_OW 88
// ComMoveUnit ( Brown , JMM ) ;
3844: LD_EXP 14
3848: PPUSH
3849: LD_EXP 7
3853: PPUSH
3854: CALL_OW 112
// AddComTurnUnit ( Brown , JMM ) ;
3858: LD_EXP 14
3862: PPUSH
3863: LD_EXP 7
3867: PPUSH
3868: CALL_OW 179
// Wait ( 3 ) ;
3872: LD_INT 3
3874: PPUSH
3875: CALL_OW 67
// Say ( Brown , D1b-Brown-1 ) ;
3879: LD_EXP 14
3883: PPUSH
3884: LD_STRING D1b-Brown-1
3886: PPUSH
3887: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
3891: LD_EXP 7
3895: PPUSH
3896: LD_STRING D1a-JMM-2
3898: PPUSH
3899: CALL_OW 88
// Say ( Brown , D1b-Brown-2 ) ;
3903: LD_EXP 14
3907: PPUSH
3908: LD_STRING D1b-Brown-2
3910: PPUSH
3911: CALL_OW 88
// ComEnterUnit ( Brown , FilterAllUnits ( [ f_btype , b_depot ] ) [ 1 ] ) ;
3915: LD_EXP 14
3919: PPUSH
3920: LD_INT 30
3922: PUSH
3923: LD_INT 0
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PPUSH
3930: CALL_OW 69
3934: PUSH
3935: LD_INT 1
3937: ARRAY
3938: PPUSH
3939: CALL_OW 120
// SaveVariable ( 2 , GammaCommander ) ;
3943: LD_INT 2
3945: PPUSH
3946: LD_STRING GammaCommander
3948: PPUSH
3949: CALL_OW 39
// commander := Brown ;
3953: LD_ADDR_VAR 0 7
3957: PUSH
3958: LD_EXP 14
3962: ST_TO_ADDR
// end ; ComTurnUnit ( JMM , Gladstone ) ;
3963: LD_EXP 7
3967: PPUSH
3968: LD_EXP 8
3972: PPUSH
3973: CALL_OW 119
// if not donaldson_commander and not brown_commander then
3977: LD_EXP 4
3981: NOT
3982: IFFALSE 3991
3984: PUSH
3985: LD_EXP 5
3989: NOT
3990: AND
3991: IFFALSE 4015
// begin Say ( JMM , D1c-JMM-1 ) ;
3993: LD_EXP 7
3997: PPUSH
3998: LD_STRING D1c-JMM-1
4000: PPUSH
4001: CALL_OW 88
// SaveVariable ( 3 , GammaCommander ) ;
4005: LD_INT 3
4007: PPUSH
4008: LD_STRING GammaCommander
4010: PPUSH
4011: CALL_OW 39
// end ; Say ( JMM , D1d-JMM-1 ) ;
4015: LD_EXP 7
4019: PPUSH
4020: LD_STRING D1d-JMM-1
4022: PPUSH
4023: CALL_OW 88
// all := FilterAllUnits ( [ f_type , unit_human ] ) diff [ JMM , Gladstone , commander ] ;
4027: LD_ADDR_VAR 0 6
4031: PUSH
4032: LD_INT 21
4034: PUSH
4035: LD_INT 1
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PPUSH
4042: CALL_OW 69
4046: PUSH
4047: LD_EXP 7
4051: PUSH
4052: LD_EXP 8
4056: PUSH
4057: LD_VAR 0 7
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: DIFF
4067: ST_TO_ADDR
// save_group := CharacterSelection ( 1 , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , Gladstone , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable , commander ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4068: LD_ADDR_EXP 6
4072: PUSH
4073: LD_STRING 1
4075: PPUSH
4076: LD_INT 5
4078: PPUSH
4079: LD_INT 5
4081: PPUSH
4082: LD_INT -5
4084: PUSH
4085: LD_EXP 7
4089: PUSH
4090: LD_INT -6
4092: PUSH
4093: LD_EXP 8
4097: PUSH
4098: LD_INT -2
4100: PUSH
4101: LD_INT -3
4103: PUSH
4104: LD_INT -5
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: PUSH
4116: LD_VAR 0 6
4120: ADD
4121: PUSH
4122: LD_INT -6
4124: PUSH
4125: LD_INT -4
4127: PUSH
4128: LD_VAR 0 7
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: ADD
4138: PPUSH
4139: LD_INT 1
4141: PUSH
4142: LD_INT 3
4144: PUSH
4145: LD_INT 2
4147: PUSH
4148: LD_INT 1
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: LD_INT 4
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 42
4168: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4169: LD_EXP 7
4173: PPUSH
4174: LD_EXP 2
4178: PUSH
4179: LD_STRING JMM
4181: STR
4182: PPUSH
4183: CALL_OW 38
// if Lisa in save_group then
4187: LD_EXP 10
4191: PUSH
4192: LD_EXP 6
4196: IN
4197: IFFALSE 4227
// begin SaveVariable ( true , LisaInDelta ) ;
4199: LD_INT 1
4201: PPUSH
4202: LD_STRING LisaInDelta
4204: PPUSH
4205: CALL_OW 39
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4209: LD_EXP 10
4213: PPUSH
4214: LD_EXP 2
4218: PUSH
4219: LD_STRING Lisa
4221: STR
4222: PPUSH
4223: CALL_OW 38
// end ; if Bobby in save_group then
4227: LD_EXP 12
4231: PUSH
4232: LD_EXP 6
4236: IN
4237: IFFALSE 4267
// begin SaveVariable ( true , BobbyInDelta ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_STRING BobbyInDelta
4244: PPUSH
4245: CALL_OW 39
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4249: LD_EXP 12
4253: PPUSH
4254: LD_EXP 2
4258: PUSH
4259: LD_STRING Bobby
4261: STR
4262: PPUSH
4263: CALL_OW 38
// end ; if Cyrus in save_group then
4267: LD_EXP 11
4271: PUSH
4272: LD_EXP 6
4276: IN
4277: IFFALSE 4307
// begin SaveVariable ( true , CyrusInDelta ) ;
4279: LD_INT 1
4281: PPUSH
4282: LD_STRING CyrusInDelta
4284: PPUSH
4285: CALL_OW 39
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4289: LD_EXP 11
4293: PPUSH
4294: LD_EXP 2
4298: PUSH
4299: LD_STRING Cyrus
4301: STR
4302: PPUSH
4303: CALL_OW 38
// end ; if Frank in save_group then
4307: LD_EXP 9
4311: PUSH
4312: LD_EXP 6
4316: IN
4317: IFFALSE 4347
// begin SaveVariable ( true , FrankInDelta ) ;
4319: LD_INT 1
4321: PPUSH
4322: LD_STRING FrankInDelta
4324: PPUSH
4325: CALL_OW 39
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
4329: LD_EXP 9
4333: PPUSH
4334: LD_EXP 2
4338: PUSH
4339: LD_STRING Frank
4341: STR
4342: PPUSH
4343: CALL_OW 38
// end ; if Brown in save_group then
4347: LD_EXP 14
4351: PUSH
4352: LD_EXP 6
4356: IN
4357: IFFALSE 4387
// begin SaveVariable ( true , BrownInDelta ) ;
4359: LD_INT 1
4361: PPUSH
4362: LD_STRING BrownInDelta
4364: PPUSH
4365: CALL_OW 39
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
4369: LD_EXP 14
4373: PPUSH
4374: LD_EXP 2
4378: PUSH
4379: LD_STRING Brown
4381: STR
4382: PPUSH
4383: CALL_OW 38
// end ; if Donaldson in save_group then
4387: LD_EXP 13
4391: PUSH
4392: LD_EXP 6
4396: IN
4397: IFFALSE 4427
// begin SaveVariable ( true , DonaldsonInDelta ) ;
4399: LD_INT 1
4401: PPUSH
4402: LD_STRING DonaldsonInDelta
4404: PPUSH
4405: CALL_OW 39
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4409: LD_EXP 13
4413: PPUSH
4414: LD_EXP 2
4418: PUSH
4419: LD_STRING Donaldson
4421: STR
4422: PPUSH
4423: CALL_OW 38
// end ; SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , 0 ] ^ save_group , othersGamma ) ;
4427: LD_VAR 0 6
4431: PUSH
4432: LD_EXP 7
4436: PUSH
4437: LD_EXP 8
4441: PUSH
4442: LD_EXP 10
4446: PUSH
4447: LD_EXP 11
4451: PUSH
4452: LD_EXP 12
4456: PUSH
4457: LD_EXP 9
4461: PUSH
4462: LD_EXP 13
4466: PUSH
4467: LD_EXP 14
4471: PUSH
4472: LD_INT 0
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: PUSH
4486: LD_EXP 6
4490: ADD
4491: DIFF
4492: PPUSH
4493: LD_STRING othersGamma
4495: PPUSH
4496: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , 0 ] , othersDelta ) ;
4500: LD_EXP 6
4504: PUSH
4505: LD_EXP 7
4509: PUSH
4510: LD_EXP 8
4514: PUSH
4515: LD_EXP 10
4519: PUSH
4520: LD_EXP 11
4524: PUSH
4525: LD_EXP 12
4529: PUSH
4530: LD_EXP 9
4534: PUSH
4535: LD_EXP 13
4539: PUSH
4540: LD_EXP 14
4544: PUSH
4545: LD_INT 0
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: DIFF
4559: PPUSH
4560: LD_STRING othersDelta
4562: PPUSH
4563: CALL_OW 38
// Wait ( 3 ) ;
4567: LD_INT 3
4569: PPUSH
4570: CALL_OW 67
// for i in save_group do
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: LD_EXP 6
4583: PUSH
4584: FOR_IN
4585: IFFALSE 4616
// begin if IsInUnit ( i ) then
4587: LD_VAR 0 3
4591: PPUSH
4592: CALL_OW 310
4596: IFFALSE 4607
// ComExitBuilding ( i ) ;
4598: LD_VAR 0 3
4602: PPUSH
4603: CALL_OW 122
// Wait ( 3 ) ;
4607: LD_INT 3
4609: PPUSH
4610: CALL_OW 67
// end ;
4614: GO 4584
4616: POP
4617: POP
// save_group := Insert ( save_group , 1 , JMM ) ;
4618: LD_ADDR_EXP 6
4622: PUSH
4623: LD_EXP 6
4627: PPUSH
4628: LD_INT 1
4630: PPUSH
4631: LD_EXP 7
4635: PPUSH
4636: CALL_OW 2
4640: ST_TO_ADDR
// save_group := Insert ( save_group , 2 , Gladstone ) ;
4641: LD_ADDR_EXP 6
4645: PUSH
4646: LD_EXP 6
4650: PPUSH
4651: LD_INT 2
4653: PPUSH
4654: LD_EXP 8
4658: PPUSH
4659: CALL_OW 2
4663: ST_TO_ADDR
// filter := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
4664: LD_ADDR_VAR 0 8
4668: PUSH
4669: LD_INT 21
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PPUSH
4679: CALL_OW 69
4683: ST_TO_ADDR
// for i = 1 to filter do
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: DOUBLE
4690: LD_INT 1
4692: DEC
4693: ST_TO_ADDR
4694: LD_VAR 0 8
4698: PUSH
4699: FOR_TO
4700: IFFALSE 4730
// ComEnterUnit ( save_group [ i ] , filter [ i ] ) ;
4702: LD_EXP 6
4706: PUSH
4707: LD_VAR 0 3
4711: ARRAY
4712: PPUSH
4713: LD_VAR 0 8
4717: PUSH
4718: LD_VAR 0 3
4722: ARRAY
4723: PPUSH
4724: CALL_OW 120
4728: GO 4699
4730: POP
4731: POP
// AddComMoveXY ( save_group , 87 , 27 ) ;
4732: LD_EXP 6
4736: PPUSH
4737: LD_INT 87
4739: PPUSH
4740: LD_INT 27
4742: PPUSH
4743: CALL_OW 171
// Wait ( 0 0$05 ) ;
4747: LD_INT 175
4749: PPUSH
4750: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
4754: LD_INT 1
4756: PPUSH
4757: LD_STRING %_cont
4759: PPUSH
4760: CALL_OW 340
// end ; end_of_file
4764: LD_VAR 0 1
4768: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
// if exist_mode then
4773: LD_VAR 0 2
4777: IFFALSE 4802
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_EXP 3
4788: PUSH
4789: LD_VAR 0 1
4793: STR
4794: PPUSH
4795: CALL_OW 34
4799: ST_TO_ADDR
4800: GO 4817
// unit := NewCharacter ( ident ) ;
4802: LD_ADDR_VAR 0 4
4806: PUSH
4807: LD_VAR 0 1
4811: PPUSH
4812: CALL_OW 25
4816: ST_TO_ADDR
// result := unit ;
4817: LD_ADDR_VAR 0 3
4821: PUSH
4822: LD_VAR 0 4
4826: ST_TO_ADDR
// end ;
4827: LD_VAR 0 3
4831: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
4832: LD_INT 0
4834: PPUSH
// uc_side := side ;
4835: LD_ADDR_OWVAR 20
4839: PUSH
4840: LD_VAR 0 1
4844: ST_TO_ADDR
// uc_nation := nation ;
4845: LD_ADDR_OWVAR 21
4849: PUSH
4850: LD_VAR 0 2
4854: ST_TO_ADDR
// vc_chassis := chassis ;
4855: LD_ADDR_OWVAR 37
4859: PUSH
4860: LD_VAR 0 3
4864: ST_TO_ADDR
// vc_engine := engine ;
4865: LD_ADDR_OWVAR 39
4869: PUSH
4870: LD_VAR 0 4
4874: ST_TO_ADDR
// vc_control := control ;
4875: LD_ADDR_OWVAR 38
4879: PUSH
4880: LD_VAR 0 5
4884: ST_TO_ADDR
// vc_weapon := weapon ;
4885: LD_ADDR_OWVAR 40
4889: PUSH
4890: LD_VAR 0 6
4894: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4895: LD_ADDR_OWVAR 41
4899: PUSH
4900: LD_VAR 0 7
4904: ST_TO_ADDR
// result := CreateVehicle ;
4905: LD_ADDR_VAR 0 8
4909: PUSH
4910: CALL_OW 45
4914: ST_TO_ADDR
// end ;
4915: LD_VAR 0 8
4919: RET
// export function SayX ( units , ident ) ; var i ; begin
4920: LD_INT 0
4922: PPUSH
4923: PPUSH
// result := false ;
4924: LD_ADDR_VAR 0 3
4928: PUSH
4929: LD_INT 0
4931: ST_TO_ADDR
// if not units then
4932: LD_VAR 0 1
4936: NOT
4937: IFFALSE 4941
// exit ;
4939: GO 4995
// for i in units do
4941: LD_ADDR_VAR 0 4
4945: PUSH
4946: LD_VAR 0 1
4950: PUSH
4951: FOR_IN
4952: IFFALSE 4993
// if IsOk ( i ) then
4954: LD_VAR 0 4
4958: PPUSH
4959: CALL_OW 302
4963: IFFALSE 4991
// begin Say ( i , ident ) ;
4965: LD_VAR 0 4
4969: PPUSH
4970: LD_VAR 0 2
4974: PPUSH
4975: CALL_OW 88
// result := i ;
4979: LD_ADDR_VAR 0 3
4983: PUSH
4984: LD_VAR 0 4
4988: ST_TO_ADDR
// break ;
4989: GO 4993
// end ;
4991: GO 4951
4993: POP
4994: POP
// end ;
4995: LD_VAR 0 3
4999: RET
