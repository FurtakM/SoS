// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// Init ;
   8: CALL 25 0 0
// DebugMode ;
  12: CALL 80 0 0
// PrepareAmerican ;
  16: CALL 104 0 0
// Action ;
  20: CALL 2400 0 0
// end ;
  24: END
// export debug ; export mission_prefix , mission_prefix_prev ; export donaldson_commander , brown_commander , save_group ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// mission_prefix := 05a_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 05a_
  43: ST_TO_ADDR
// mission_prefix_prev := 04_ ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_STRING 04_
  51: ST_TO_ADDR
// donaldson_commander := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// brown_commander := false ;
  60: LD_ADDR_EXP 5
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// save_group := [ ] ;
  68: LD_ADDR_EXP 6
  72: PUSH
  73: EMPTY
  74: ST_TO_ADDR
// end ;
  75: LD_VAR 0 1
  79: RET
// function DebugMode ; begin
  80: LD_INT 0
  82: PPUSH
// if not debug then
  83: LD_EXP 1
  87: NOT
  88: IFFALSE 92
// exit ;
  90: GO 99
// FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// end ; end_of_file
  99: LD_VAR 0 1
 103: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown ; export function PrepareAmerican ; var others3 , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , tmp ; begin
 104: LD_INT 0
 106: PPUSH
 107: PPUSH
 108: PPUSH
 109: PPUSH
 110: PPUSH
 111: PPUSH
 112: PPUSH
 113: PPUSH
 114: PPUSH
 115: PPUSH
 116: PPUSH
 117: PPUSH
 118: PPUSH
// PrepareBase ;
 119: CALL 2070 0 0
// uc_side := 1 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 1
 130: ST_TO_ADDR
// uc_nation := 1 ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 1
 138: ST_TO_ADDR
// team := [ ] ;
 139: LD_ADDR_VAR 0 5
 143: PUSH
 144: EMPTY
 145: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 146: LD_ADDR_EXP 7
 150: PUSH
 151: LD_STRING JMM
 153: PPUSH
 154: LD_EXP 1
 158: NOT
 159: PPUSH
 160: CALL 4741 0 2
 164: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ) ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_STRING Gladstone
 172: PPUSH
 173: LD_INT 0
 175: PPUSH
 176: CALL 4741 0 2
 180: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 181: LD_ADDR_EXP 9
 185: PUSH
 186: LD_STRING Frank
 188: PPUSH
 189: LD_EXP 1
 193: NOT
 194: PPUSH
 195: CALL 4741 0 2
 199: ST_TO_ADDR
// if Frank then
 200: LD_EXP 9
 204: IFFALSE 222
// team := team ^ Frank ;
 206: LD_ADDR_VAR 0 5
 210: PUSH
 211: LD_VAR 0 5
 215: PUSH
 216: LD_EXP 9
 220: ADD
 221: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 222: LD_ADDR_EXP 10
 226: PUSH
 227: LD_STRING Lisa
 229: PPUSH
 230: LD_EXP 1
 234: NOT
 235: PPUSH
 236: CALL 4741 0 2
 240: ST_TO_ADDR
// if Lisa then
 241: LD_EXP 10
 245: IFFALSE 263
// team := team ^ Lisa ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 5
 256: PUSH
 257: LD_EXP 10
 261: ADD
 262: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 263: LD_ADDR_EXP 13
 267: PUSH
 268: LD_STRING Donaldson
 270: PPUSH
 271: LD_EXP 1
 275: NOT
 276: PPUSH
 277: CALL 4741 0 2
 281: ST_TO_ADDR
// if Donaldson then
 282: LD_EXP 13
 286: IFFALSE 304
// team := team ^ Donaldson ;
 288: LD_ADDR_VAR 0 5
 292: PUSH
 293: LD_VAR 0 5
 297: PUSH
 298: LD_EXP 13
 302: ADD
 303: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_STRING Brown
 311: PPUSH
 312: LD_EXP 1
 316: NOT
 317: PPUSH
 318: CALL 4741 0 2
 322: ST_TO_ADDR
// if Brown then
 323: LD_EXP 14
 327: IFFALSE 345
// team := team ^ Brown ;
 329: LD_ADDR_VAR 0 5
 333: PUSH
 334: LD_VAR 0 5
 338: PUSH
 339: LD_EXP 14
 343: ADD
 344: ST_TO_ADDR
// others4 := CreateCharacterSet ( 04_other_survivors ) ;
 345: LD_ADDR_VAR 0 3
 349: PUSH
 350: LD_STRING 04_other_survivors
 352: PPUSH
 353: CALL_OW 31
 357: ST_TO_ADDR
// DeleteCharacters ( 04_other_survivors ) ;
 358: LD_STRING 04_other_survivors
 360: PPUSH
 361: CALL_OW 40
// if not Lisa then
 365: LD_EXP 10
 369: NOT
 370: IFFALSE 488
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 372: LD_ADDR_EXP 11
 376: PUSH
 377: LD_STRING Cyrus
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: CALL 4741 0 2
 390: ST_TO_ADDR
// if Cyrus then
 391: LD_EXP 11
 395: IFFALSE 413
// team := team ^ Cyrus ;
 397: LD_ADDR_VAR 0 5
 401: PUSH
 402: LD_VAR 0 5
 406: PUSH
 407: LD_EXP 11
 411: ADD
 412: ST_TO_ADDR
// if not Cyrus then
 413: LD_EXP 11
 417: NOT
 418: IFFALSE 488
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 420: LD_ADDR_EXP 12
 424: PUSH
 425: LD_STRING Bobby
 427: PPUSH
 428: LD_EXP 1
 432: NOT
 433: PPUSH
 434: CALL 4741 0 2
 438: ST_TO_ADDR
// if Bobby then
 439: LD_EXP 12
 443: IFFALSE 461
// team := team ^ Bobby ;
 445: LD_ADDR_VAR 0 5
 449: PUSH
 450: LD_VAR 0 5
 454: PUSH
 455: LD_EXP 12
 459: ADD
 460: ST_TO_ADDR
// if not Bobby then
 461: LD_EXP 12
 465: NOT
 466: IFFALSE 488
// begin others3 := CreateCharacterSet ( 03_others ) ;
 468: LD_ADDR_VAR 0 2
 472: PUSH
 473: LD_STRING 03_others
 475: PPUSH
 476: CALL_OW 31
 480: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 481: LD_STRING 03_others
 483: PPUSH
 484: CALL_OW 40
// end ; end ; end ; if others4 then
 488: LD_VAR 0 3
 492: IFFALSE 510
// team := team ^ others4 ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_VAR 0 5
 503: PUSH
 504: LD_VAR 0 3
 508: ADD
 509: ST_TO_ADDR
// if others3 then
 510: LD_VAR 0 2
 514: IFFALSE 532
// team := team ^ others3 ;
 516: LD_ADDR_VAR 0 5
 520: PUSH
 521: LD_VAR 0 5
 525: PUSH
 526: LD_VAR 0 2
 530: ADD
 531: ST_TO_ADDR
// hc_class := class_scientistic ;
 532: LD_ADDR_OWVAR 28
 536: PUSH
 537: LD_INT 4
 539: ST_TO_ADDR
// hc_name := Christopher Jenner ;
 540: LD_ADDR_OWVAR 26
 544: PUSH
 545: LD_STRING Christopher Jenner
 547: ST_TO_ADDR
// hc_sex := sex_male ;
 548: LD_ADDR_OWVAR 27
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 556: LD_ADDR_OWVAR 29
 560: PUSH
 561: LD_INT 10
 563: PUSH
 564: LD_INT 10
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING SecondCharsGal
 578: ST_TO_ADDR
// hc_face_number := 73 ;
 579: LD_ADDR_OWVAR 34
 583: PUSH
 584: LD_INT 73
 586: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 2 ] ;
 587: LD_ADDR_OWVAR 30
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 1
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 2
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 5 ] ;
 610: LD_ADDR_OWVAR 31
 614: PUSH
 615: LD_INT 1
 617: PUSH
 618: LD_INT 0
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 5
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: ST_TO_ADDR
// team := team ^ CreateHuman ;
 633: LD_ADDR_VAR 0 5
 637: PUSH
 638: LD_VAR 0 5
 642: PUSH
 643: CALL_OW 44
 647: ADD
 648: ST_TO_ADDR
// hc_name := Phil Higgins ;
 649: LD_ADDR_OWVAR 26
 653: PUSH
 654: LD_STRING Phil Higgins
 656: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 657: LD_ADDR_OWVAR 33
 661: PUSH
 662: LD_STRING SecondCharsGal
 664: ST_TO_ADDR
// hc_face_number := 72 ;
 665: LD_ADDR_OWVAR 34
 669: PUSH
 670: LD_INT 72
 672: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
 673: LD_ADDR_OWVAR 29
 677: PUSH
 678: LD_INT 12
 680: PUSH
 681: LD_INT 9
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 1 ] ;
 688: LD_ADDR_OWVAR 30
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 3 ] ;
 711: LD_ADDR_OWVAR 31
 715: PUSH
 716: LD_INT 3
 718: PUSH
 719: LD_INT 0
 721: PUSH
 722: LD_INT 0
 724: PUSH
 725: LD_INT 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// team := team ^ CreateHuman ;
 734: LD_ADDR_VAR 0 5
 738: PUSH
 739: LD_VAR 0 5
 743: PUSH
 744: CALL_OW 44
 748: ADD
 749: ST_TO_ADDR
// InitHc_All ( ) ;
 750: CALL_OW 584
// team := team diff 0 ;
 754: LD_ADDR_VAR 0 5
 758: PUSH
 759: LD_VAR 0 5
 763: PUSH
 764: LD_INT 0
 766: DIFF
 767: ST_TO_ADDR
// if team < 9 then
 768: LD_VAR 0 5
 772: PUSH
 773: LD_INT 9
 775: LESS
 776: IFFALSE 837
// for i := team to 9 do
 778: LD_ADDR_VAR 0 12
 782: PUSH
 783: DOUBLE
 784: LD_VAR 0 5
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 9
 792: PUSH
 793: FOR_TO
 794: IFFALSE 835
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 4 ) ;
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 1
 801: PPUSH
 802: LD_INT 4
 804: PPUSH
 805: CALL_OW 12
 809: PPUSH
 810: LD_INT 4
 812: PPUSH
 813: CALL_OW 380
// team := team ^ CreateHuman ;
 817: LD_ADDR_VAR 0 5
 821: PUSH
 822: LD_VAR 0 5
 826: PUSH
 827: CALL_OW 44
 831: ADD
 832: ST_TO_ADDR
// end ;
 833: GO 793
 835: POP
 836: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) [ 1 ] ;
 837: LD_ADDR_VAR 0 6
 841: PUSH
 842: LD_INT 30
 844: PUSH
 845: LD_INT 0
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PPUSH
 852: CALL_OW 69
 856: PUSH
 857: LD_INT 1
 859: ARRAY
 860: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
 861: LD_ADDR_VAR 0 7
 865: PUSH
 866: LD_INT 30
 868: PUSH
 869: LD_INT 4
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 69
 880: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
 881: LD_ADDR_VAR 0 8
 885: PUSH
 886: LD_INT 2
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 7
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 30
 901: PUSH
 902: LD_INT 6
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PPUSH
 914: CALL_OW 69
 918: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
 919: LD_ADDR_VAR 0 9
 923: PUSH
 924: LD_INT 30
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PPUSH
 934: CALL_OW 69
 938: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
 939: LD_ADDR_VAR 0 10
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: LD_INT 30
 949: PUSH
 950: LD_INT 32
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: PUSH
 957: LD_INT 30
 959: PUSH
 960: LD_INT 31
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 69
 976: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
 977: LD_VAR 0 6
 981: PPUSH
 982: LD_STRING Gamma
 984: PPUSH
 985: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
 989: LD_VAR 0 6
 993: PPUSH
 994: CALL_OW 274
 998: PPUSH
 999: LD_INT 2
1001: PPUSH
1002: LD_INT 10000
1004: PPUSH
1005: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1009: LD_VAR 0 6
1013: PPUSH
1014: CALL_OW 274
1018: PPUSH
1019: LD_INT 1
1021: PPUSH
1022: LD_INT 10000
1024: PPUSH
1025: CALL_OW 277
// if dep then
1029: LD_VAR 0 6
1033: IFFALSE 1115
// begin if Brown then
1035: LD_EXP 14
1039: IFFALSE 1075
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1041: LD_EXP 14
1045: PPUSH
1046: LD_VAR 0 6
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: CALL_OW 52
// team := team diff Brown ;
1059: LD_ADDR_VAR 0 5
1063: PUSH
1064: LD_VAR 0 5
1068: PUSH
1069: LD_EXP 14
1073: DIFF
1074: ST_TO_ADDR
// end ; if Donaldson then
1075: LD_EXP 13
1079: IFFALSE 1115
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1081: LD_EXP 13
1085: PPUSH
1086: LD_VAR 0 6
1090: PUSH
1091: LD_INT 1
1093: ARRAY
1094: PPUSH
1095: CALL_OW 52
// team := team diff Donaldson ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_VAR 0 5
1108: PUSH
1109: LD_EXP 13
1113: DIFF
1114: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1115: LD_VAR 0 10
1119: IFFALSE 1142
1121: PUSH
1122: LD_VAR 0 5
1126: PPUSH
1127: LD_INT 25
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 72
1141: AND
1142: IFFALSE 1251
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1144: LD_ADDR_VAR 0 11
1148: PUSH
1149: LD_VAR 0 5
1153: PPUSH
1154: LD_INT 25
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 72
1168: ST_TO_ADDR
// for i in bun do
1169: LD_ADDR_VAR 0 12
1173: PUSH
1174: LD_VAR 0 10
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1249
// begin if not filter then
1182: LD_VAR 0 11
1186: NOT
1187: IFFALSE 1191
// break ;
1189: GO 1249
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1191: LD_VAR 0 11
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 12
1204: PPUSH
1205: CALL_OW 52
// team := team diff filter [ 1 ] ;
1209: LD_ADDR_VAR 0 5
1213: PUSH
1214: LD_VAR 0 5
1218: PUSH
1219: LD_VAR 0 11
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: DIFF
1228: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1229: LD_ADDR_VAR 0 11
1233: PUSH
1234: LD_VAR 0 11
1238: PPUSH
1239: LD_INT 1
1241: PPUSH
1242: CALL_OW 3
1246: ST_TO_ADDR
// end ;
1247: GO 1179
1249: POP
1250: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1251: LD_VAR 0 7
1255: IFFALSE 1278
1257: PUSH
1258: LD_VAR 0 5
1262: PPUSH
1263: LD_INT 25
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL_OW 72
1277: AND
1278: IFFALSE 1400
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1280: LD_ADDR_VAR 0 11
1284: PUSH
1285: LD_VAR 0 5
1289: PPUSH
1290: LD_INT 25
1292: PUSH
1293: LD_INT 1
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: PPUSH
1300: CALL_OW 72
1304: ST_TO_ADDR
// for i = 1 to filter do
1305: LD_ADDR_VAR 0 12
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_VAR 0 11
1319: PUSH
1320: FOR_TO
1321: IFFALSE 1382
// begin if ( i <= 6 ) then
1323: LD_VAR 0 12
1327: PUSH
1328: LD_INT 6
1330: LESSEQUAL
1331: IFFALSE 1359
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1333: LD_VAR 0 11
1337: PUSH
1338: LD_VAR 0 12
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 7
1348: PUSH
1349: LD_INT 1
1351: ARRAY
1352: PPUSH
1353: CALL_OW 52
1357: GO 1380
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1359: LD_VAR 0 11
1363: PUSH
1364: LD_VAR 0 12
1368: ARRAY
1369: PPUSH
1370: LD_INT 1
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// end ;
1380: GO 1320
1382: POP
1383: POP
// team := team diff filter ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_VAR 0 5
1393: PUSH
1394: LD_VAR 0 11
1398: DIFF
1399: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1400: LD_VAR 0 8
1404: IFFALSE 1427
1406: PUSH
1407: LD_VAR 0 5
1411: PPUSH
1412: LD_INT 25
1414: PUSH
1415: LD_INT 4
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 72
1426: AND
1427: IFFALSE 1549
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1429: LD_ADDR_VAR 0 11
1433: PUSH
1434: LD_VAR 0 5
1438: PPUSH
1439: LD_INT 25
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 72
1453: ST_TO_ADDR
// for i = 1 to filter do
1454: LD_ADDR_VAR 0 12
1458: PUSH
1459: DOUBLE
1460: LD_INT 1
1462: DEC
1463: ST_TO_ADDR
1464: LD_VAR 0 11
1468: PUSH
1469: FOR_TO
1470: IFFALSE 1531
// begin if ( i <= 6 ) then
1472: LD_VAR 0 12
1476: PUSH
1477: LD_INT 6
1479: LESSEQUAL
1480: IFFALSE 1508
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1482: LD_VAR 0 11
1486: PUSH
1487: LD_VAR 0 12
1491: ARRAY
1492: PPUSH
1493: LD_VAR 0 8
1497: PUSH
1498: LD_INT 1
1500: ARRAY
1501: PPUSH
1502: CALL_OW 52
1506: GO 1529
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1508: LD_VAR 0 11
1512: PUSH
1513: LD_VAR 0 12
1517: ARRAY
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL_OW 49
// end ;
1529: GO 1469
1531: POP
1532: POP
// team := team diff filter ;
1533: LD_ADDR_VAR 0 5
1537: PUSH
1538: LD_VAR 0 5
1542: PUSH
1543: LD_VAR 0 11
1547: DIFF
1548: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
1549: LD_VAR 0 9
1553: IFFALSE 1576
1555: PUSH
1556: LD_VAR 0 5
1560: PPUSH
1561: LD_INT 25
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PPUSH
1571: CALL_OW 72
1575: AND
1576: IFFALSE 1698
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
1578: LD_ADDR_VAR 0 11
1582: PUSH
1583: LD_VAR 0 5
1587: PPUSH
1588: LD_INT 25
1590: PUSH
1591: LD_INT 3
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PPUSH
1598: CALL_OW 72
1602: ST_TO_ADDR
// for i = 1 to filter do
1603: LD_ADDR_VAR 0 12
1607: PUSH
1608: DOUBLE
1609: LD_INT 1
1611: DEC
1612: ST_TO_ADDR
1613: LD_VAR 0 11
1617: PUSH
1618: FOR_TO
1619: IFFALSE 1680
// begin if ( i <= 6 ) then
1621: LD_VAR 0 12
1625: PUSH
1626: LD_INT 6
1628: LESSEQUAL
1629: IFFALSE 1657
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
1631: LD_VAR 0 11
1635: PUSH
1636: LD_VAR 0 12
1640: ARRAY
1641: PPUSH
1642: LD_VAR 0 9
1646: PUSH
1647: LD_INT 1
1649: ARRAY
1650: PPUSH
1651: CALL_OW 52
1655: GO 1678
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1657: LD_VAR 0 11
1661: PUSH
1662: LD_VAR 0 12
1666: ARRAY
1667: PPUSH
1668: LD_INT 1
1670: PPUSH
1671: LD_INT 0
1673: PPUSH
1674: CALL_OW 49
// end ;
1678: GO 1618
1680: POP
1681: POP
// team := team diff filter ;
1682: LD_ADDR_VAR 0 5
1686: PUSH
1687: LD_VAR 0 5
1691: PUSH
1692: LD_VAR 0 11
1696: DIFF
1697: ST_TO_ADDR
// end ; if team then
1698: LD_VAR 0 5
1702: IFFALSE 1745
// for i in team do
1704: LD_ADDR_VAR 0 12
1708: PUSH
1709: LD_VAR 0 5
1713: PUSH
1714: FOR_IN
1715: IFFALSE 1743
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
1717: LD_VAR 0 12
1721: PPUSH
1722: LD_INT 1
1724: PPUSH
1725: LD_INT 0
1727: PPUSH
1728: CALL_OW 49
// ComHold ( i ) ;
1732: LD_VAR 0 12
1736: PPUSH
1737: CALL_OW 140
// end ;
1741: GO 1714
1743: POP
1744: POP
// if fac then
1745: LD_VAR 0 9
1749: IFFALSE 1785
// if UnitsInside ( fac [ 1 ] ) then
1751: LD_VAR 0 9
1755: PUSH
1756: LD_INT 1
1758: ARRAY
1759: PPUSH
1760: CALL_OW 313
1764: IFFALSE 1785
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
1766: LD_VAR 0 9
1770: PUSH
1771: LD_INT 1
1773: ARRAY
1774: PPUSH
1775: LD_INT 10
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 486
// if lab then
1785: LD_VAR 0 8
1789: IFFALSE 1825
// if UnitsInside ( lab [ 1 ] ) then
1791: LD_VAR 0 8
1795: PUSH
1796: LD_INT 1
1798: ARRAY
1799: PPUSH
1800: CALL_OW 313
1804: IFFALSE 1825
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
1806: LD_VAR 0 8
1810: PUSH
1811: LD_INT 1
1813: ARRAY
1814: PPUSH
1815: LD_INT 10
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL_OW 486
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
1825: LD_ADDR_VAR 0 4
1829: PUSH
1830: LD_INT 1
1832: PPUSH
1833: LD_INT 1
1835: PPUSH
1836: LD_INT 1
1838: PPUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_INT 3
1847: PPUSH
1848: LD_INT 100
1850: PPUSH
1851: CALL 4804 0 7
1855: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1856: LD_VAR 0 4
1860: PPUSH
1861: LD_INT 2
1863: PPUSH
1864: CALL_OW 233
// PlaceUnitXY ( veh , 21 , 8 , false ) ;
1868: LD_VAR 0 4
1872: PPUSH
1873: LD_INT 21
1875: PPUSH
1876: LD_INT 8
1878: PPUSH
1879: LD_INT 0
1881: PPUSH
1882: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
1886: LD_EXP 7
1890: PPUSH
1891: LD_VAR 0 4
1895: PPUSH
1896: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1900: LD_ADDR_VAR 0 4
1904: PUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: LD_INT 2
1916: PPUSH
1917: LD_INT 1
1919: PPUSH
1920: LD_INT 2
1922: PPUSH
1923: LD_INT 100
1925: PPUSH
1926: CALL 4804 0 7
1930: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1931: LD_VAR 0 4
1935: PPUSH
1936: LD_INT 2
1938: PPUSH
1939: CALL_OW 233
// PlaceUnitXY ( veh , 16 , 3 , false ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 16
1950: PPUSH
1951: LD_INT 3
1953: PPUSH
1954: LD_INT 0
1956: PPUSH
1957: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1961: LD_EXP 8
1965: PPUSH
1966: LD_VAR 0 4
1970: PPUSH
1971: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 100 ) ;
1975: LD_ADDR_VAR 0 4
1979: PUSH
1980: LD_INT 1
1982: PPUSH
1983: LD_INT 1
1985: PPUSH
1986: LD_INT 2
1988: PPUSH
1989: LD_INT 2
1991: PPUSH
1992: LD_INT 1
1994: PPUSH
1995: LD_INT 12
1997: PPUSH
1998: LD_INT 100
2000: PPUSH
2001: CALL 4804 0 7
2005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
2006: LD_VAR 0 4
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: LD_INT 5
2016: PPUSH
2017: CALL_OW 12
2021: PPUSH
2022: CALL_OW 233
// if not PlaceUnitArea ( veh , gammaBaseArea , false ) then
2026: LD_VAR 0 4
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL_OW 49
2041: NOT
2042: IFFALSE 2065
// PlaceUnitXYR ( veh , 71 , 24 , 5 , false ) ;
2044: LD_VAR 0 4
2048: PPUSH
2049: LD_INT 71
2051: PPUSH
2052: LD_INT 24
2054: PPUSH
2055: LD_INT 5
2057: PPUSH
2058: LD_INT 0
2060: PPUSH
2061: CALL_OW 50
// end ;
2065: LD_VAR 0 1
2069: RET
// function PrepareBase ; var blist , i , b ; begin
2070: LD_INT 0
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2076: LD_INT 71
2078: PPUSH
2079: LD_INT 5
2081: PPUSH
2082: LD_INT 1
2084: PPUSH
2085: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_STRING GammaBase
2096: PPUSH
2097: EMPTY
2098: PPUSH
2099: CALL_OW 30
2103: ST_TO_ADDR
// if not blist then
2104: LD_VAR 0 2
2108: NOT
2109: IFFALSE 2149
// blist := [ [ b_depot , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2111: LD_ADDR_VAR 0 2
2115: PUSH
2116: LD_INT 0
2118: PUSH
2119: LD_INT 52
2121: PUSH
2122: LD_INT 12
2124: PUSH
2125: LD_INT 3
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 0
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: PUSH
2146: EMPTY
2147: LIST
2148: ST_TO_ADDR
// uc_side := 1 ;
2149: LD_ADDR_OWVAR 20
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// uc_nation := 1 ;
2157: LD_ADDR_OWVAR 21
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// for i in blist do
2165: LD_ADDR_VAR 0 3
2169: PUSH
2170: LD_VAR 0 2
2174: PUSH
2175: FOR_IN
2176: IFFALSE 2341
// begin InitBc ;
2178: CALL_OW 21
// bc_type := i [ 1 ] ;
2182: LD_ADDR_OWVAR 42
2186: PUSH
2187: LD_VAR 0 3
2191: PUSH
2192: LD_INT 1
2194: ARRAY
2195: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2196: LD_ADDR_OWVAR 43
2200: PUSH
2201: LD_VAR 0 3
2205: PUSH
2206: LD_INT 5
2208: ARRAY
2209: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2210: LD_ADDR_OWVAR 44
2214: PUSH
2215: LD_INT 9
2217: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 9
2225: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2226: LD_VAR 0 3
2230: PUSH
2231: LD_INT 1
2233: ARRAY
2234: PUSH
2235: LD_INT 7
2237: PUSH
2238: LD_INT 8
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: IN
2245: IFFALSE 2269
// begin bc_kind1 := i [ 7 ] ;
2247: LD_ADDR_OWVAR 44
2251: PUSH
2252: LD_VAR 0 3
2256: PUSH
2257: LD_INT 7
2259: ARRAY
2260: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2261: LD_ADDR_OWVAR 45
2265: PUSH
2266: LD_INT 9
2268: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: LD_VAR 0 3
2278: PUSH
2279: LD_INT 2
2281: ARRAY
2282: PPUSH
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 3
2290: ARRAY
2291: PPUSH
2292: LD_VAR 0 3
2296: PUSH
2297: LD_INT 4
2299: ARRAY
2300: PPUSH
2301: CALL_OW 47
2305: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2306: LD_VAR 0 4
2310: PPUSH
2311: CALL_OW 266
2315: PUSH
2316: LD_INT 32
2318: EQUAL
2319: IFFALSE 2339
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2321: LD_VAR 0 4
2325: PPUSH
2326: LD_VAR 0 3
2330: PUSH
2331: LD_INT 7
2333: ARRAY
2334: PPUSH
2335: CALL_OW 431
// end ; end ;
2339: GO 2175
2341: POP
2342: POP
// if not FilterAllUnits ( [ f_btype , b_depot ] ) then
2343: LD_INT 30
2345: PUSH
2346: LD_INT 0
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PPUSH
2353: CALL_OW 69
2357: NOT
2358: IFFALSE 2395
// begin bc_type := b_depot ;
2360: LD_ADDR_OWVAR 42
2364: PUSH
2365: LD_INT 0
2367: ST_TO_ADDR
// bc_level := 6 ;
2368: LD_ADDR_OWVAR 43
2372: PUSH
2373: LD_INT 6
2375: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2376: LD_ADDR_VAR 0 4
2380: PUSH
2381: LD_INT 52
2383: PPUSH
2384: LD_INT 12
2386: PPUSH
2387: LD_INT 3
2389: PPUSH
2390: CALL_OW 47
2394: ST_TO_ADDR
// end ; end ; end_of_file
2395: LD_VAR 0 1
2399: RET
// export function Action ; var points , i , sol , team , all , commander , filter ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
2405: PPUSH
2406: PPUSH
2407: PPUSH
2408: PPUSH
2409: PPUSH
// PlaceSeeing ( 0 , 0 , 1 , - 32976 ) ;
2410: LD_INT 0
2412: PPUSH
2413: LD_INT 0
2415: PPUSH
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 32976
2421: NEG
2422: PPUSH
2423: CALL_OW 330
// InGameOn ;
2427: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2431: LD_INT 33
2433: PPUSH
2434: LD_INT 11
2436: PPUSH
2437: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2441: LD_ADDR_VAR 0 2
2445: PUSH
2446: LD_INT 29
2448: PUSH
2449: LD_INT 21
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 41
2458: PUSH
2459: LD_INT 28
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 52
2468: PUSH
2469: LD_INT 26
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 49
2478: PUSH
2479: LD_INT 16
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: ST_TO_ADDR
// for i in points do
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: LD_VAR 0 2
2501: PUSH
2502: FOR_IN
2503: IFFALSE 2543
// AddComMoveXY ( [ JMM , Gladstone ] , i [ 1 ] , i [ 2 ] ) ;
2505: LD_EXP 7
2509: PUSH
2510: LD_EXP 8
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PPUSH
2519: LD_VAR 0 3
2523: PUSH
2524: LD_INT 1
2526: ARRAY
2527: PPUSH
2528: LD_VAR 0 3
2532: PUSH
2533: LD_INT 2
2535: ARRAY
2536: PPUSH
2537: CALL_OW 171
2541: GO 2502
2543: POP
2544: POP
// AddComExitVehicle ( [ JMM , Gladstone ] ) ;
2545: LD_EXP 7
2549: PUSH
2550: LD_EXP 8
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PPUSH
2559: CALL_OW 181
// repeat wait ( 0 0$01 ) ;
2563: LD_INT 35
2565: PPUSH
2566: CALL_OW 67
// until not IsInUnit ( JMM ) and not IsInUnit ( Gladstone ) ;
2570: LD_EXP 7
2574: PPUSH
2575: CALL_OW 310
2579: NOT
2580: IFFALSE 2594
2582: PUSH
2583: LD_EXP 8
2587: PPUSH
2588: CALL_OW 310
2592: NOT
2593: AND
2594: IFFALSE 2563
// ComTurnUnit ( JMM , Gladstone ) ;
2596: LD_EXP 7
2600: PPUSH
2601: LD_EXP 8
2605: PPUSH
2606: CALL_OW 119
// ComTurnUnit ( Gladstone , JMM ) ;
2610: LD_EXP 8
2614: PPUSH
2615: LD_EXP 7
2619: PPUSH
2620: CALL_OW 119
// sol := FilterAllUnits ( [ f_sex , sex_male ] ) diff [ JMM , Gladstone , Bobby , Cyrus , Frank , Brown ] ;
2624: LD_ADDR_VAR 0 4
2628: PUSH
2629: LD_INT 26
2631: PUSH
2632: LD_INT 1
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: LD_EXP 7
2648: PUSH
2649: LD_EXP 8
2653: PUSH
2654: LD_EXP 12
2658: PUSH
2659: LD_EXP 11
2663: PUSH
2664: LD_EXP 9
2668: PUSH
2669: LD_EXP 14
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: DIFF
2682: ST_TO_ADDR
// if sol then
2683: LD_VAR 0 4
2687: IFFALSE 2703
// sol := sol [ 1 ] ;
2689: LD_ADDR_VAR 0 4
2693: PUSH
2694: LD_VAR 0 4
2698: PUSH
2699: LD_INT 1
2701: ARRAY
2702: ST_TO_ADDR
// team := [ ] ;
2703: LD_ADDR_VAR 0 5
2707: PUSH
2708: EMPTY
2709: ST_TO_ADDR
// if sol then
2710: LD_VAR 0 4
2714: IFFALSE 2732
// team := team ^ sol ;
2716: LD_ADDR_VAR 0 5
2720: PUSH
2721: LD_VAR 0 5
2725: PUSH
2726: LD_VAR 0 4
2730: ADD
2731: ST_TO_ADDR
// if Lisa then
2732: LD_EXP 10
2736: IFFALSE 2754
// team := team ^ Lisa ;
2738: LD_ADDR_VAR 0 5
2742: PUSH
2743: LD_VAR 0 5
2747: PUSH
2748: LD_EXP 10
2752: ADD
2753: ST_TO_ADDR
// if Donaldson then
2754: LD_EXP 13
2758: IFFALSE 2776
// team := team ^ Donaldson ;
2760: LD_ADDR_VAR 0 5
2764: PUSH
2765: LD_VAR 0 5
2769: PUSH
2770: LD_EXP 13
2774: ADD
2775: ST_TO_ADDR
// if Brown then
2776: LD_EXP 14
2780: IFFALSE 2798
// team := team ^ Brown ;
2782: LD_ADDR_VAR 0 5
2786: PUSH
2787: LD_VAR 0 5
2791: PUSH
2792: LD_EXP 14
2796: ADD
2797: ST_TO_ADDR
// if Bobby then
2798: LD_EXP 12
2802: IFFALSE 2820
// team := team ^ Bobby ;
2804: LD_ADDR_VAR 0 5
2808: PUSH
2809: LD_VAR 0 5
2813: PUSH
2814: LD_EXP 12
2818: ADD
2819: ST_TO_ADDR
// if Cyrus then
2820: LD_EXP 11
2824: IFFALSE 2842
// team := team ^ Cyrus ;
2826: LD_ADDR_VAR 0 5
2830: PUSH
2831: LD_VAR 0 5
2835: PUSH
2836: LD_EXP 11
2840: ADD
2841: ST_TO_ADDR
// if Frank then
2842: LD_EXP 9
2846: IFFALSE 2864
// team := team ^ Frank ;
2848: LD_ADDR_VAR 0 5
2852: PUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_EXP 9
2862: ADD
2863: ST_TO_ADDR
// for i in [ FilterUnitsInArea ( gammaBaseArea , [ [ f_not , [ f_inside ] ] , [ f_type , unit_human ] ] ) diff [ JMM , Gladstone ] ] do
2864: LD_ADDR_VAR 0 3
2868: PUSH
2869: LD_INT 1
2871: PPUSH
2872: LD_INT 3
2874: PUSH
2875: LD_INT 54
2877: PUSH
2878: EMPTY
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 21
2887: PUSH
2888: LD_INT 1
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 70
2903: PUSH
2904: LD_EXP 7
2908: PUSH
2909: LD_EXP 8
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: DIFF
2918: PUSH
2919: EMPTY
2920: LIST
2921: PUSH
2922: FOR_IN
2923: IFFALSE 2943
// team := team ^ i ;
2925: LD_ADDR_VAR 0 5
2929: PUSH
2930: LD_VAR 0 5
2934: PUSH
2935: LD_VAR 0 3
2939: ADD
2940: ST_TO_ADDR
2941: GO 2922
2943: POP
2944: POP
// if team then
2945: LD_VAR 0 5
2949: IFFALSE 3025
// begin ComExitBuilding ( team ) ;
2951: LD_VAR 0 5
2955: PPUSH
2956: CALL_OW 122
// AddComMoveUnit ( team , JMM ) ;
2960: LD_VAR 0 5
2964: PPUSH
2965: LD_EXP 7
2969: PPUSH
2970: CALL_OW 172
// repeat wait ( 1 ) ;
2974: LD_INT 1
2976: PPUSH
2977: CALL_OW 67
// until GetDistUnits ( JMM , NearestUnitToUnit ( team , JMM ) ) < 6 ;
2981: LD_EXP 7
2985: PPUSH
2986: LD_VAR 0 5
2990: PPUSH
2991: LD_EXP 7
2995: PPUSH
2996: CALL_OW 74
3000: PPUSH
3001: CALL_OW 296
3005: PUSH
3006: LD_INT 6
3008: LESS
3009: IFFALSE 2974
// ComTurnUnit ( team , JMM ) ;
3011: LD_VAR 0 5
3015: PPUSH
3016: LD_EXP 7
3020: PPUSH
3021: CALL_OW 119
// end ; if Lisa then
3025: LD_EXP 10
3029: IFFALSE 3057
// begin ComTurnUnit ( JMM , Lisa ) ;
3031: LD_EXP 7
3035: PPUSH
3036: LD_EXP 10
3040: PPUSH
3041: CALL_OW 119
// Say ( Lisa , D1-Lisa-1 ) ;
3045: LD_EXP 10
3049: PPUSH
3050: LD_STRING D1-Lisa-1
3052: PPUSH
3053: CALL_OW 88
// end ; if sol then
3057: LD_VAR 0 4
3061: IFFALSE 3089
// begin ComTurnUnit ( JMM , sol ) ;
3063: LD_EXP 7
3067: PPUSH
3068: LD_VAR 0 4
3072: PPUSH
3073: CALL_OW 119
// Say ( sol , D1-Sol1-1 ) ;
3077: LD_VAR 0 4
3081: PPUSH
3082: LD_STRING D1-Sol1-1
3084: PPUSH
3085: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
3089: LD_EXP 7
3093: PPUSH
3094: LD_STRING D1-JMM-1
3096: PPUSH
3097: CALL_OW 88
// Say ( JMM , D1-JMM-1a ) ;
3101: LD_EXP 7
3105: PPUSH
3106: LD_STRING D1-JMM-1a
3108: PPUSH
3109: CALL_OW 88
// ComTurnUnit ( JMM , Gladstone ) ;
3113: LD_EXP 7
3117: PPUSH
3118: LD_EXP 8
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( team , Gladstone ) ;
3127: LD_VAR 0 5
3131: PPUSH
3132: LD_EXP 8
3136: PPUSH
3137: CALL_OW 119
// if Frank then
3141: LD_EXP 9
3145: IFFALSE 3173
// begin Say ( Frank , D1-Frank-1 ) ;
3147: LD_EXP 9
3151: PPUSH
3152: LD_STRING D1-Frank-1
3154: PPUSH
3155: CALL_OW 88
// ComTurnUnit ( JMM , Frank ) ;
3159: LD_EXP 7
3163: PPUSH
3164: LD_EXP 9
3168: PPUSH
3169: CALL_OW 119
// end ; if Lisa then
3173: LD_EXP 10
3177: IFFALSE 3205
// begin ComTurnUnit ( JMM , Lisa ) ;
3179: LD_EXP 7
3183: PPUSH
3184: LD_EXP 10
3188: PPUSH
3189: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
3193: LD_EXP 10
3197: PPUSH
3198: LD_STRING D1-Lisa-2
3200: PPUSH
3201: CALL_OW 88
// end ; if sol then
3205: LD_VAR 0 4
3209: IFFALSE 3237
// begin ComTurnUnit ( JMM , sol ) ;
3211: LD_EXP 7
3215: PPUSH
3216: LD_VAR 0 4
3220: PPUSH
3221: CALL_OW 119
// Say ( sol , D1-Sol1-2 ) ;
3225: LD_VAR 0 4
3229: PPUSH
3230: LD_STRING D1-Sol1-2
3232: PPUSH
3233: CALL_OW 88
// end ; Say ( Gladstone , D1-Glad-2 ) ;
3237: LD_EXP 8
3241: PPUSH
3242: LD_STRING D1-Glad-2
3244: PPUSH
3245: CALL_OW 88
// ComTurnUnit ( team , JMM ) ;
3249: LD_VAR 0 5
3253: PPUSH
3254: LD_EXP 7
3258: PPUSH
3259: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
3263: LD_EXP 7
3267: PPUSH
3268: LD_STRING D1-JMM-2
3270: PPUSH
3271: CALL_OW 88
// ComTurnUnit ( JMM , Gladstone ) ;
3275: LD_EXP 7
3279: PPUSH
3280: LD_EXP 8
3284: PPUSH
3285: CALL_OW 119
// Say ( Gladstone , D1-Glad-3 ) ;
3289: LD_EXP 8
3293: PPUSH
3294: LD_STRING D1-Glad-3
3296: PPUSH
3297: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3301: LD_EXP 7
3305: PPUSH
3306: LD_STRING D1-JMM-3
3308: PPUSH
3309: CALL_OW 88
// Say ( Gladstone , D1-Glad-4 ) ;
3313: LD_EXP 8
3317: PPUSH
3318: LD_STRING D1-Glad-4
3320: PPUSH
3321: CALL_OW 88
// if Frank then
3325: LD_EXP 9
3329: IFFALSE 3357
// begin ComTurnUnit ( JMM , Frank ) ;
3331: LD_EXP 7
3335: PPUSH
3336: LD_EXP 9
3340: PPUSH
3341: CALL_OW 119
// Say ( Frank , D1-Frank-4 ) ;
3345: LD_EXP 9
3349: PPUSH
3350: LD_STRING D1-Frank-4
3352: PPUSH
3353: CALL_OW 88
// end ; ComTurnUnit ( JMM , Gladstone ) ;
3357: LD_EXP 7
3361: PPUSH
3362: LD_EXP 8
3366: PPUSH
3367: CALL_OW 119
// Say ( JMM , D1-JMM-4 ) ;
3371: LD_EXP 7
3375: PPUSH
3376: LD_STRING D1-JMM-4
3378: PPUSH
3379: CALL_OW 88
// if Lisa then
3383: LD_EXP 10
3387: IFFALSE 3454
// begin Say ( Lisa , D1-Lisa-4 ) ;
3389: LD_EXP 10
3393: PPUSH
3394: LD_STRING D1-Lisa-4
3396: PPUSH
3397: CALL_OW 88
// if Frank then
3401: LD_EXP 9
3405: IFFALSE 3454
// begin ComTurnUnit ( Frank , Lisa ) ;
3407: LD_EXP 9
3411: PPUSH
3412: LD_EXP 10
3416: PPUSH
3417: CALL_OW 119
// Say ( Frank , D1-Frank-5 ) ;
3421: LD_EXP 9
3425: PPUSH
3426: LD_STRING D1-Frank-5
3428: PPUSH
3429: CALL_OW 88
// Wait ( 3 ) ;
3433: LD_INT 3
3435: PPUSH
3436: CALL_OW 67
// AddComTurnUnit ( Frank , JMM ) ;
3440: LD_EXP 9
3444: PPUSH
3445: LD_EXP 7
3449: PPUSH
3450: CALL_OW 179
// end ; end ; if sol then
3454: LD_VAR 0 4
3458: IFFALSE 3472
// Say ( sol , D1-Sol1-5 ) ;
3460: LD_VAR 0 4
3464: PPUSH
3465: LD_STRING D1-Sol1-5
3467: PPUSH
3468: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3472: LD_EXP 7
3476: PPUSH
3477: LD_STRING D1-JMM-5
3479: PPUSH
3480: CALL_OW 88
// Say ( Gladstone , D1-Glad-5 ) ;
3484: LD_EXP 8
3488: PPUSH
3489: LD_STRING D1-Glad-5
3491: PPUSH
3492: CALL_OW 88
// if Frank then
3496: LD_EXP 9
3500: IFFALSE 3514
// Say ( Frank , D1-Frank-6 ) ;
3502: LD_EXP 9
3506: PPUSH
3507: LD_STRING D1-Frank-6
3509: PPUSH
3510: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3514: LD_EXP 7
3518: PPUSH
3519: LD_STRING D1-JMM-6
3521: PPUSH
3522: CALL_OW 88
// if Brown and Donaldson then
3526: LD_EXP 14
3530: IFFALSE 3538
3532: PUSH
3533: LD_EXP 13
3537: AND
3538: IFFALSE 3587
// case Query ( QCommander ) of 1 :
3540: LD_STRING QCommander
3542: PPUSH
3543: CALL_OW 97
3547: PUSH
3548: LD_INT 1
3550: DOUBLE
3551: EQUAL
3552: IFTRUE 3556
3554: GO 3567
3556: POP
// donaldson_commander := true ; 2 :
3557: LD_ADDR_EXP 4
3561: PUSH
3562: LD_INT 1
3564: ST_TO_ADDR
3565: GO 3587
3567: LD_INT 2
3569: DOUBLE
3570: EQUAL
3571: IFTRUE 3575
3573: GO 3586
3575: POP
// brown_commander := true ; end ;
3576: LD_ADDR_EXP 5
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
3584: GO 3587
3586: POP
// if not Brown and Donaldson then
3587: LD_EXP 14
3591: NOT
3592: IFFALSE 3600
3594: PUSH
3595: LD_EXP 13
3599: AND
3600: IFFALSE 3610
// donaldson_commander := true ;
3602: LD_ADDR_EXP 4
3606: PUSH
3607: LD_INT 1
3609: ST_TO_ADDR
// if Brown and not Donaldson then
3610: LD_EXP 14
3614: IFFALSE 3623
3616: PUSH
3617: LD_EXP 13
3621: NOT
3622: AND
3623: IFFALSE 3633
// brown_commander := true ;
3625: LD_ADDR_EXP 5
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// if donaldson_commander then
3633: LD_EXP 4
3637: IFFALSE 3784
// begin ComTurnUnit ( JMM , Donaldson ) ;
3639: LD_EXP 7
3643: PPUSH
3644: LD_EXP 13
3648: PPUSH
3649: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
3653: LD_EXP 7
3657: PPUSH
3658: LD_STRING D1a-JMM-1
3660: PPUSH
3661: CALL_OW 88
// ComMoveUnit ( Donaldson , JMM ) ;
3665: LD_EXP 13
3669: PPUSH
3670: LD_EXP 7
3674: PPUSH
3675: CALL_OW 112
// AddComTurnUnit ( Donaldson , JMM ) ;
3679: LD_EXP 13
3683: PPUSH
3684: LD_EXP 7
3688: PPUSH
3689: CALL_OW 179
// Wait ( 3 ) ;
3693: LD_INT 3
3695: PPUSH
3696: CALL_OW 67
// Say ( Donaldson , D1a-Don-1 ) ;
3700: LD_EXP 13
3704: PPUSH
3705: LD_STRING D1a-Don-1
3707: PPUSH
3708: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
3712: LD_EXP 7
3716: PPUSH
3717: LD_STRING D1b-JMM-2
3719: PPUSH
3720: CALL_OW 88
// Say ( Donaldson , D1a-Don-2 ) ;
3724: LD_EXP 13
3728: PPUSH
3729: LD_STRING D1a-Don-2
3731: PPUSH
3732: CALL_OW 88
// ComEnterUnit ( Donaldson , FilterAllUnits ( [ f_btype , b_depot ] ) [ 1 ] ) ;
3736: LD_EXP 13
3740: PPUSH
3741: LD_INT 30
3743: PUSH
3744: LD_INT 0
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PPUSH
3751: CALL_OW 69
3755: PUSH
3756: LD_INT 1
3758: ARRAY
3759: PPUSH
3760: CALL_OW 120
// SaveVariable ( 1 , GammaCommander ) ;
3764: LD_INT 1
3766: PPUSH
3767: LD_STRING GammaCommander
3769: PPUSH
3770: CALL_OW 39
// commander := Donaldson ;
3774: LD_ADDR_VAR 0 7
3778: PUSH
3779: LD_EXP 13
3783: ST_TO_ADDR
// end ; if brown_commander then
3784: LD_EXP 5
3788: IFFALSE 3935
// begin ComTurnUnit ( JMM , Brown ) ;
3790: LD_EXP 7
3794: PPUSH
3795: LD_EXP 14
3799: PPUSH
3800: CALL_OW 119
// Say ( JMM , D1b-JMM-1 ) ;
3804: LD_EXP 7
3808: PPUSH
3809: LD_STRING D1b-JMM-1
3811: PPUSH
3812: CALL_OW 88
// ComMoveUnit ( Brown , JMM ) ;
3816: LD_EXP 14
3820: PPUSH
3821: LD_EXP 7
3825: PPUSH
3826: CALL_OW 112
// AddComTurnUnit ( Brown , JMM ) ;
3830: LD_EXP 14
3834: PPUSH
3835: LD_EXP 7
3839: PPUSH
3840: CALL_OW 179
// Wait ( 3 ) ;
3844: LD_INT 3
3846: PPUSH
3847: CALL_OW 67
// Say ( Brown , D1b-Brown-1 ) ;
3851: LD_EXP 14
3855: PPUSH
3856: LD_STRING D1b-Brown-1
3858: PPUSH
3859: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
3863: LD_EXP 7
3867: PPUSH
3868: LD_STRING D1a-JMM-2
3870: PPUSH
3871: CALL_OW 88
// Say ( Brown , D1b-Brown-2 ) ;
3875: LD_EXP 14
3879: PPUSH
3880: LD_STRING D1b-Brown-2
3882: PPUSH
3883: CALL_OW 88
// ComEnterUnit ( Brown , FilterAllUnits ( [ f_btype , b_depot ] ) [ 1 ] ) ;
3887: LD_EXP 14
3891: PPUSH
3892: LD_INT 30
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: PUSH
3907: LD_INT 1
3909: ARRAY
3910: PPUSH
3911: CALL_OW 120
// SaveVariable ( 2 , GammaCommander ) ;
3915: LD_INT 2
3917: PPUSH
3918: LD_STRING GammaCommander
3920: PPUSH
3921: CALL_OW 39
// commander := Brown ;
3925: LD_ADDR_VAR 0 7
3929: PUSH
3930: LD_EXP 14
3934: ST_TO_ADDR
// end ; ComTurnUnit ( JMM , Gladstone ) ;
3935: LD_EXP 7
3939: PPUSH
3940: LD_EXP 8
3944: PPUSH
3945: CALL_OW 119
// if not donaldson_commander and not brown_commander then
3949: LD_EXP 4
3953: NOT
3954: IFFALSE 3963
3956: PUSH
3957: LD_EXP 5
3961: NOT
3962: AND
3963: IFFALSE 3987
// begin Say ( JMM , D1c-JMM-1 ) ;
3965: LD_EXP 7
3969: PPUSH
3970: LD_STRING D1c-JMM-1
3972: PPUSH
3973: CALL_OW 88
// SaveVariable ( 3 , GammaCommander ) ;
3977: LD_INT 3
3979: PPUSH
3980: LD_STRING GammaCommander
3982: PPUSH
3983: CALL_OW 39
// end ; Say ( JMM , D1d-JMM-1 ) ;
3987: LD_EXP 7
3991: PPUSH
3992: LD_STRING D1d-JMM-1
3994: PPUSH
3995: CALL_OW 88
// all := FilterAllUnits ( [ f_type , unit_human ] ) diff [ JMM , Gladstone , commander ] ;
3999: LD_ADDR_VAR 0 6
4003: PUSH
4004: LD_INT 21
4006: PUSH
4007: LD_INT 1
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PPUSH
4014: CALL_OW 69
4018: PUSH
4019: LD_EXP 7
4023: PUSH
4024: LD_EXP 8
4028: PUSH
4029: LD_VAR 0 7
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: DIFF
4039: ST_TO_ADDR
// save_group := CharacterSelection ( 1 , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , Gladstone , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable , commander ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4040: LD_ADDR_EXP 6
4044: PUSH
4045: LD_STRING 1
4047: PPUSH
4048: LD_INT 5
4050: PPUSH
4051: LD_INT 5
4053: PPUSH
4054: LD_INT -5
4056: PUSH
4057: LD_EXP 7
4061: PUSH
4062: LD_INT -6
4064: PUSH
4065: LD_EXP 8
4069: PUSH
4070: LD_INT -2
4072: PUSH
4073: LD_INT -3
4075: PUSH
4076: LD_INT -5
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_VAR 0 6
4092: ADD
4093: PUSH
4094: LD_INT -6
4096: PUSH
4097: LD_INT -4
4099: PUSH
4100: LD_VAR 0 7
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: ADD
4110: PPUSH
4111: LD_INT 1
4113: PUSH
4114: LD_INT 3
4116: PUSH
4117: LD_INT 2
4119: PUSH
4120: LD_INT 1
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 42
4140: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4141: LD_EXP 7
4145: PPUSH
4146: LD_EXP 2
4150: PUSH
4151: LD_STRING JMM
4153: STR
4154: PPUSH
4155: CALL_OW 38
// if Lisa in save_group then
4159: LD_EXP 10
4163: PUSH
4164: LD_EXP 6
4168: IN
4169: IFFALSE 4199
// begin SaveVariable ( true , LisaInDelta ) ;
4171: LD_INT 1
4173: PPUSH
4174: LD_STRING LisaInDelta
4176: PPUSH
4177: CALL_OW 39
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4181: LD_EXP 10
4185: PPUSH
4186: LD_EXP 2
4190: PUSH
4191: LD_STRING Lisa
4193: STR
4194: PPUSH
4195: CALL_OW 38
// end ; if Bobby in save_group then
4199: LD_EXP 12
4203: PUSH
4204: LD_EXP 6
4208: IN
4209: IFFALSE 4239
// begin SaveVariable ( true , BobbyInDelta ) ;
4211: LD_INT 1
4213: PPUSH
4214: LD_STRING BobbyInDelta
4216: PPUSH
4217: CALL_OW 39
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4221: LD_EXP 12
4225: PPUSH
4226: LD_EXP 2
4230: PUSH
4231: LD_STRING Bobby
4233: STR
4234: PPUSH
4235: CALL_OW 38
// end ; if Cyrus in save_group then
4239: LD_EXP 11
4243: PUSH
4244: LD_EXP 6
4248: IN
4249: IFFALSE 4279
// begin SaveVariable ( true , CyrusInDelta ) ;
4251: LD_INT 1
4253: PPUSH
4254: LD_STRING CyrusInDelta
4256: PPUSH
4257: CALL_OW 39
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4261: LD_EXP 11
4265: PPUSH
4266: LD_EXP 2
4270: PUSH
4271: LD_STRING Cyrus
4273: STR
4274: PPUSH
4275: CALL_OW 38
// end ; if Frank in save_group then
4279: LD_EXP 9
4283: PUSH
4284: LD_EXP 6
4288: IN
4289: IFFALSE 4319
// begin SaveVariable ( true , FrankInDelta ) ;
4291: LD_INT 1
4293: PPUSH
4294: LD_STRING FrankInDelta
4296: PPUSH
4297: CALL_OW 39
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
4301: LD_EXP 9
4305: PPUSH
4306: LD_EXP 2
4310: PUSH
4311: LD_STRING Frank
4313: STR
4314: PPUSH
4315: CALL_OW 38
// end ; if Brown in save_group then
4319: LD_EXP 14
4323: PUSH
4324: LD_EXP 6
4328: IN
4329: IFFALSE 4359
// begin SaveVariable ( true , BrownInDelta ) ;
4331: LD_INT 1
4333: PPUSH
4334: LD_STRING BrownInDelta
4336: PPUSH
4337: CALL_OW 39
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
4341: LD_EXP 14
4345: PPUSH
4346: LD_EXP 2
4350: PUSH
4351: LD_STRING Brown
4353: STR
4354: PPUSH
4355: CALL_OW 38
// end ; if Donaldson in save_group then
4359: LD_EXP 13
4363: PUSH
4364: LD_EXP 6
4368: IN
4369: IFFALSE 4399
// begin SaveVariable ( true , DonaldsonInDelta ) ;
4371: LD_INT 1
4373: PPUSH
4374: LD_STRING DonaldsonInDelta
4376: PPUSH
4377: CALL_OW 39
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4381: LD_EXP 13
4385: PPUSH
4386: LD_EXP 2
4390: PUSH
4391: LD_STRING Donaldson
4393: STR
4394: PPUSH
4395: CALL_OW 38
// end ; SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , 0 ] ^ save_group , othersGamma ) ;
4399: LD_VAR 0 6
4403: PUSH
4404: LD_EXP 7
4408: PUSH
4409: LD_EXP 8
4413: PUSH
4414: LD_EXP 10
4418: PUSH
4419: LD_EXP 11
4423: PUSH
4424: LD_EXP 12
4428: PUSH
4429: LD_EXP 9
4433: PUSH
4434: LD_EXP 13
4438: PUSH
4439: LD_EXP 14
4443: PUSH
4444: LD_INT 0
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: PUSH
4458: LD_EXP 6
4462: ADD
4463: DIFF
4464: PPUSH
4465: LD_STRING othersGamma
4467: PPUSH
4468: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , 0 ] , othersDelta ) ;
4472: LD_EXP 6
4476: PUSH
4477: LD_EXP 7
4481: PUSH
4482: LD_EXP 8
4486: PUSH
4487: LD_EXP 10
4491: PUSH
4492: LD_EXP 11
4496: PUSH
4497: LD_EXP 12
4501: PUSH
4502: LD_EXP 9
4506: PUSH
4507: LD_EXP 13
4511: PUSH
4512: LD_EXP 14
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: DIFF
4531: PPUSH
4532: LD_STRING othersDelta
4534: PPUSH
4535: CALL_OW 38
// Wait ( 3 ) ;
4539: LD_INT 3
4541: PPUSH
4542: CALL_OW 67
// for i in save_group do
4546: LD_ADDR_VAR 0 3
4550: PUSH
4551: LD_EXP 6
4555: PUSH
4556: FOR_IN
4557: IFFALSE 4588
// begin if IsInUnit ( i ) then
4559: LD_VAR 0 3
4563: PPUSH
4564: CALL_OW 310
4568: IFFALSE 4579
// ComExitBuilding ( i ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: CALL_OW 122
// Wait ( 3 ) ;
4579: LD_INT 3
4581: PPUSH
4582: CALL_OW 67
// end ;
4586: GO 4556
4588: POP
4589: POP
// save_group := Insert ( save_group , 1 , JMM ) ;
4590: LD_ADDR_EXP 6
4594: PUSH
4595: LD_EXP 6
4599: PPUSH
4600: LD_INT 1
4602: PPUSH
4603: LD_EXP 7
4607: PPUSH
4608: CALL_OW 2
4612: ST_TO_ADDR
// save_group := Insert ( save_group , 2 , Gladstone ) ;
4613: LD_ADDR_EXP 6
4617: PUSH
4618: LD_EXP 6
4622: PPUSH
4623: LD_INT 2
4625: PPUSH
4626: LD_EXP 8
4630: PPUSH
4631: CALL_OW 2
4635: ST_TO_ADDR
// filter := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
4636: LD_ADDR_VAR 0 8
4640: PUSH
4641: LD_INT 21
4643: PUSH
4644: LD_INT 2
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PPUSH
4651: CALL_OW 69
4655: ST_TO_ADDR
// for i = 1 to filter do
4656: LD_ADDR_VAR 0 3
4660: PUSH
4661: DOUBLE
4662: LD_INT 1
4664: DEC
4665: ST_TO_ADDR
4666: LD_VAR 0 8
4670: PUSH
4671: FOR_TO
4672: IFFALSE 4702
// ComEnterUnit ( save_group [ i ] , filter [ i ] ) ;
4674: LD_EXP 6
4678: PUSH
4679: LD_VAR 0 3
4683: ARRAY
4684: PPUSH
4685: LD_VAR 0 8
4689: PUSH
4690: LD_VAR 0 3
4694: ARRAY
4695: PPUSH
4696: CALL_OW 120
4700: GO 4671
4702: POP
4703: POP
// AddComMoveXY ( save_group , 87 , 27 ) ;
4704: LD_EXP 6
4708: PPUSH
4709: LD_INT 87
4711: PPUSH
4712: LD_INT 27
4714: PPUSH
4715: CALL_OW 171
// Wait ( 0 0$05 ) ;
4719: LD_INT 175
4721: PPUSH
4722: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
4726: LD_INT 1
4728: PPUSH
4729: LD_STRING %_cont
4731: PPUSH
4732: CALL_OW 340
// end ; end_of_file
4736: LD_VAR 0 1
4740: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4741: LD_INT 0
4743: PPUSH
4744: PPUSH
// if exist_mode then
4745: LD_VAR 0 2
4749: IFFALSE 4774
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4751: LD_ADDR_VAR 0 4
4755: PUSH
4756: LD_EXP 3
4760: PUSH
4761: LD_VAR 0 1
4765: STR
4766: PPUSH
4767: CALL_OW 34
4771: ST_TO_ADDR
4772: GO 4789
// unit := NewCharacter ( ident ) ;
4774: LD_ADDR_VAR 0 4
4778: PUSH
4779: LD_VAR 0 1
4783: PPUSH
4784: CALL_OW 25
4788: ST_TO_ADDR
// result := unit ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: LD_VAR 0 4
4798: ST_TO_ADDR
// end ;
4799: LD_VAR 0 3
4803: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
4804: LD_INT 0
4806: PPUSH
// uc_side := side ;
4807: LD_ADDR_OWVAR 20
4811: PUSH
4812: LD_VAR 0 1
4816: ST_TO_ADDR
// uc_nation := nation ;
4817: LD_ADDR_OWVAR 21
4821: PUSH
4822: LD_VAR 0 2
4826: ST_TO_ADDR
// vc_chassis := chassis ;
4827: LD_ADDR_OWVAR 37
4831: PUSH
4832: LD_VAR 0 3
4836: ST_TO_ADDR
// vc_engine := engine ;
4837: LD_ADDR_OWVAR 39
4841: PUSH
4842: LD_VAR 0 4
4846: ST_TO_ADDR
// vc_control := control ;
4847: LD_ADDR_OWVAR 38
4851: PUSH
4852: LD_VAR 0 5
4856: ST_TO_ADDR
// vc_weapon := weapon ;
4857: LD_ADDR_OWVAR 40
4861: PUSH
4862: LD_VAR 0 6
4866: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4867: LD_ADDR_OWVAR 41
4871: PUSH
4872: LD_VAR 0 7
4876: ST_TO_ADDR
// result := CreateVehicle ;
4877: LD_ADDR_VAR 0 8
4881: PUSH
4882: CALL_OW 45
4886: ST_TO_ADDR
// end ;
4887: LD_VAR 0 8
4891: RET
// export function SayX ( units , ident ) ; var i ; begin
4892: LD_INT 0
4894: PPUSH
4895: PPUSH
// result := false ;
4896: LD_ADDR_VAR 0 3
4900: PUSH
4901: LD_INT 0
4903: ST_TO_ADDR
// if not units then
4904: LD_VAR 0 1
4908: NOT
4909: IFFALSE 4913
// exit ;
4911: GO 4967
// for i in units do
4913: LD_ADDR_VAR 0 4
4917: PUSH
4918: LD_VAR 0 1
4922: PUSH
4923: FOR_IN
4924: IFFALSE 4965
// if IsOk ( i ) then
4926: LD_VAR 0 4
4930: PPUSH
4931: CALL_OW 302
4935: IFFALSE 4963
// begin Say ( i , ident ) ;
4937: LD_VAR 0 4
4941: PPUSH
4942: LD_VAR 0 2
4946: PPUSH
4947: CALL_OW 88
// result := i ;
4951: LD_ADDR_VAR 0 3
4955: PUSH
4956: LD_VAR 0 4
4960: ST_TO_ADDR
// break ;
4961: GO 4965
// end ;
4963: GO 4923
4965: POP
4966: POP
// end ;
4967: LD_VAR 0 3
4971: RET
