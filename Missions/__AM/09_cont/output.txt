// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// Randomize ;
  11: CALL_OW 10
// Init ;
  15: CALL 32 0 0
// DebugMode ;
  19: CALL 56 0 0
// PrepareAmerican ;
  23: CALL 73 0 0
// Action ;
  27: CALL 2163 0 0
// end ;
  31: END
// export debug ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// debug := false ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// mission_prefix_prev := 08_ ;
  43: LD_ADDR_EXP 3
  47: PUSH
  48: LD_STRING 08_
  50: ST_TO_ADDR
// end ;
  51: LD_VAR 0 1
  55: RET
// function DebugMode ; begin
  56: LD_INT 0
  58: PPUSH
// if not debug then
  59: LD_EXP 1
  63: NOT
  64: IFFALSE 68
// exit ;
  66: GO 68
// end ; end_of_file
  68: LD_VAR 0 1
  72: RET
// export JMM , Gladstone , Frank , Lisa , Joan , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Powell ; export function PrepareAmerican ; var team , veh , dep , bar , lab , fac , bun , filter , i , j ; begin
  73: LD_INT 0
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
  84: PPUSH
  85: PPUSH
// PrepareBase ;
  86: CALL 1731 0 0
// uc_side := 1 ;
  90: LD_ADDR_OWVAR 20
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// uc_nation := 1 ;
  98: LD_ADDR_OWVAR 21
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// team := [ ] ;
 106: LD_ADDR_VAR 0 2
 110: PUSH
 111: EMPTY
 112: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 113: LD_ADDR_EXP 4
 117: PUSH
 118: LD_STRING JMM
 120: PPUSH
 121: LD_EXP 1
 125: NOT
 126: PPUSH
 127: CALL 2012 0 2
 131: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) ) ;
 132: LD_ADDR_EXP 8
 136: PUSH
 137: LD_STRING Joan
 139: PPUSH
 140: LD_EXP 1
 144: NOT
 145: PPUSH
 146: CALL 2012 0 2
 150: ST_TO_ADDR
// if Joan then
 151: LD_EXP 8
 155: IFFALSE 173
// team := team ^ Joan ;
 157: LD_ADDR_VAR 0 2
 161: PUSH
 162: LD_VAR 0 2
 166: PUSH
 167: LD_EXP 8
 171: ADD
 172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 173: LD_ADDR_EXP 11
 177: PUSH
 178: LD_STRING Donaldson
 180: PPUSH
 181: LD_EXP 1
 185: NOT
 186: PPUSH
 187: CALL 2012 0 2
 191: ST_TO_ADDR
// if Donaldson then
 192: LD_EXP 11
 196: IFFALSE 214
// team := team ^ Donaldson ;
 198: LD_ADDR_VAR 0 2
 202: PUSH
 203: LD_VAR 0 2
 207: PUSH
 208: LD_EXP 11
 212: ADD
 213: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 214: LD_ADDR_EXP 12
 218: PUSH
 219: LD_STRING Brown
 221: PPUSH
 222: LD_EXP 1
 226: NOT
 227: PPUSH
 228: CALL 2012 0 2
 232: ST_TO_ADDR
// if Brown then
 233: LD_EXP 12
 237: IFFALSE 255
// team := team ^ Brown ;
 239: LD_ADDR_VAR 0 2
 243: PUSH
 244: LD_VAR 0 2
 248: PUSH
 249: LD_EXP 12
 253: ADD
 254: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 255: LD_ADDR_EXP 13
 259: PUSH
 260: LD_STRING Houten
 262: PPUSH
 263: LD_EXP 1
 267: NOT
 268: PPUSH
 269: CALL 2012 0 2
 273: ST_TO_ADDR
// if Houten then
 274: LD_EXP 13
 278: IFFALSE 296
// team := team ^ Houten ;
 280: LD_ADDR_VAR 0 2
 284: PUSH
 285: LD_VAR 0 2
 289: PUSH
 290: LD_EXP 13
 294: ADD
 295: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 296: LD_ADDR_EXP 5
 300: PUSH
 301: LD_STRING Gladstone
 303: PPUSH
 304: LD_EXP 1
 308: NOT
 309: PPUSH
 310: CALL 2012 0 2
 314: ST_TO_ADDR
// if Gladstone then
 315: LD_EXP 5
 319: IFFALSE 337
// team := team ^ Gladstone ;
 321: LD_ADDR_VAR 0 2
 325: PUSH
 326: LD_VAR 0 2
 330: PUSH
 331: LD_EXP 5
 335: ADD
 336: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 337: LD_ADDR_EXP 6
 341: PUSH
 342: LD_STRING Frank
 344: PPUSH
 345: LD_EXP 1
 349: NOT
 350: PPUSH
 351: CALL 2012 0 2
 355: ST_TO_ADDR
// if Frank then
 356: LD_EXP 6
 360: IFFALSE 378
// team := team ^ Frank ;
 362: LD_ADDR_VAR 0 2
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: LD_EXP 6
 376: ADD
 377: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 378: LD_ADDR_EXP 7
 382: PUSH
 383: LD_STRING Lisa
 385: PPUSH
 386: LD_EXP 1
 390: NOT
 391: PPUSH
 392: CALL 2012 0 2
 396: ST_TO_ADDR
// if Lisa then
 397: LD_EXP 7
 401: IFFALSE 419
// team := team ^ Lisa ;
 403: LD_ADDR_VAR 0 2
 407: PUSH
 408: LD_VAR 0 2
 412: PUSH
 413: LD_EXP 7
 417: ADD
 418: ST_TO_ADDR
// team := team ^ CreateCharacterSet ( 08_other_survivors ) ;
 419: LD_ADDR_VAR 0 2
 423: PUSH
 424: LD_VAR 0 2
 428: PUSH
 429: LD_STRING 08_other_survivors
 431: PPUSH
 432: CALL_OW 31
 436: ADD
 437: ST_TO_ADDR
// dep := FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
 438: LD_ADDR_VAR 0 4
 442: PUSH
 443: LD_INT 2
 445: PUSH
 446: LD_INT 30
 448: PUSH
 449: LD_INT 0
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 30
 458: PUSH
 459: LD_INT 1
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: LIST
 470: PPUSH
 471: CALL_OW 69
 475: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
 476: LD_ADDR_VAR 0 5
 480: PUSH
 481: LD_INT 2
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 4
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: LD_INT 30
 496: PUSH
 497: LD_INT 5
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PPUSH
 509: CALL_OW 69
 513: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 8
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 30
 534: PUSH
 535: LD_INT 7
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 30
 544: PUSH
 545: LD_INT 6
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
 563: LD_ADDR_VAR 0 7
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 3
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL_OW 69
 582: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
 583: LD_ADDR_VAR 0 8
 587: PUSH
 588: LD_INT 2
 590: PUSH
 591: LD_INT 30
 593: PUSH
 594: LD_INT 32
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: LD_INT 30
 603: PUSH
 604: LD_INT 31
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 69
 620: ST_TO_ADDR
// SetBName ( dep [ 1 ] , Gamma ) ;
 621: LD_VAR 0 4
 625: PUSH
 626: LD_INT 1
 628: ARRAY
 629: PPUSH
 630: LD_STRING Gamma
 632: PPUSH
 633: CALL_OW 500
// SetResourceType ( GetBase ( dep [ 1 ] ) , mat_oil , 10000 ) ;
 637: LD_VAR 0 4
 641: PUSH
 642: LD_INT 1
 644: ARRAY
 645: PPUSH
 646: CALL_OW 274
 650: PPUSH
 651: LD_INT 2
 653: PPUSH
 654: LD_INT 10000
 656: PPUSH
 657: CALL_OW 277
// SetResourceType ( GetBase ( dep [ 1 ] ) , mat_cans , 10000 ) ;
 661: LD_VAR 0 4
 665: PUSH
 666: LD_INT 1
 668: ARRAY
 669: PPUSH
 670: CALL_OW 274
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_INT 10000
 680: PPUSH
 681: CALL_OW 277
// if dep then
 685: LD_VAR 0 4
 689: IFFALSE 791
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
 691: LD_EXP 4
 695: PPUSH
 696: LD_VAR 0 4
 700: PUSH
 701: LD_INT 1
 703: ARRAY
 704: PPUSH
 705: CALL_OW 52
// if Brown then
 709: LD_EXP 12
 713: IFFALSE 749
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
 715: LD_EXP 12
 719: PPUSH
 720: LD_VAR 0 4
 724: PUSH
 725: LD_INT 1
 727: ARRAY
 728: PPUSH
 729: CALL_OW 52
// team := team diff Brown ;
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: LD_VAR 0 2
 742: PUSH
 743: LD_EXP 12
 747: DIFF
 748: ST_TO_ADDR
// end ; if Donaldson then
 749: LD_EXP 11
 753: IFFALSE 789
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
 755: LD_EXP 11
 759: PPUSH
 760: LD_VAR 0 4
 764: PUSH
 765: LD_INT 1
 767: ARRAY
 768: PPUSH
 769: CALL_OW 52
// team := team diff Donaldson ;
 773: LD_ADDR_VAR 0 2
 777: PUSH
 778: LD_VAR 0 2
 782: PUSH
 783: LD_EXP 11
 787: DIFF
 788: ST_TO_ADDR
// end ; end else
 789: GO 898
// begin PlaceUnitXYR ( JMM , 52 , 16 , 10 , false ) ;
 791: LD_EXP 4
 795: PPUSH
 796: LD_INT 52
 798: PPUSH
 799: LD_INT 16
 801: PPUSH
 802: LD_INT 10
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 50
// if Brown then
 812: LD_EXP 12
 816: IFFALSE 855
// begin PlaceUnitXYR ( Brown , 52 , 16 , 10 , false ) ;
 818: LD_EXP 12
 822: PPUSH
 823: LD_INT 52
 825: PPUSH
 826: LD_INT 16
 828: PPUSH
 829: LD_INT 10
 831: PPUSH
 832: LD_INT 0
 834: PPUSH
 835: CALL_OW 50
// team := team diff Brown ;
 839: LD_ADDR_VAR 0 2
 843: PUSH
 844: LD_VAR 0 2
 848: PUSH
 849: LD_EXP 12
 853: DIFF
 854: ST_TO_ADDR
// end ; if Donaldson then
 855: LD_EXP 11
 859: IFFALSE 898
// begin PlaceUnitXYR ( Donaldson , 52 , 16 , 10 , false ) ;
 861: LD_EXP 11
 865: PPUSH
 866: LD_INT 52
 868: PPUSH
 869: LD_INT 16
 871: PPUSH
 872: LD_INT 10
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// team := team diff Donaldson ;
 882: LD_ADDR_VAR 0 2
 886: PUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_EXP 11
 896: DIFF
 897: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
 898: LD_VAR 0 8
 902: IFFALSE 925
 904: PUSH
 905: LD_VAR 0 2
 909: PPUSH
 910: LD_INT 25
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 72
 924: AND
 925: IFFALSE 1034
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
 927: LD_ADDR_VAR 0 9
 931: PUSH
 932: LD_VAR 0 2
 936: PPUSH
 937: LD_INT 25
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: EMPTY
 944: LIST
 945: LIST
 946: PPUSH
 947: CALL_OW 72
 951: ST_TO_ADDR
// for i in bun do
 952: LD_ADDR_VAR 0 10
 956: PUSH
 957: LD_VAR 0 8
 961: PUSH
 962: FOR_IN
 963: IFFALSE 1032
// begin if not filter then
 965: LD_VAR 0 9
 969: NOT
 970: IFFALSE 974
// break ;
 972: GO 1032
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
 974: LD_VAR 0 9
 978: PUSH
 979: LD_INT 1
 981: ARRAY
 982: PPUSH
 983: LD_VAR 0 10
 987: PPUSH
 988: CALL_OW 52
// team := team diff filter [ 1 ] ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_VAR 0 9
1006: PUSH
1007: LD_INT 1
1009: ARRAY
1010: DIFF
1011: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1012: LD_ADDR_VAR 0 9
1016: PUSH
1017: LD_VAR 0 9
1021: PPUSH
1022: LD_INT 1
1024: PPUSH
1025: CALL_OW 3
1029: ST_TO_ADDR
// end ;
1030: GO 962
1032: POP
1033: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1034: LD_VAR 0 5
1038: IFFALSE 1061
1040: PUSH
1041: LD_VAR 0 2
1045: PPUSH
1046: LD_INT 25
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PPUSH
1056: CALL_OW 72
1060: AND
1061: IFFALSE 1183
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1063: LD_ADDR_VAR 0 9
1067: PUSH
1068: LD_VAR 0 2
1072: PPUSH
1073: LD_INT 25
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: PPUSH
1083: CALL_OW 72
1087: ST_TO_ADDR
// for i = 1 to filter do
1088: LD_ADDR_VAR 0 10
1092: PUSH
1093: DOUBLE
1094: LD_INT 1
1096: DEC
1097: ST_TO_ADDR
1098: LD_VAR 0 9
1102: PUSH
1103: FOR_TO
1104: IFFALSE 1165
// begin if ( i <= 6 ) then
1106: LD_VAR 0 10
1110: PUSH
1111: LD_INT 6
1113: LESSEQUAL
1114: IFFALSE 1142
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1116: LD_VAR 0 9
1120: PUSH
1121: LD_VAR 0 10
1125: ARRAY
1126: PPUSH
1127: LD_VAR 0 5
1131: PUSH
1132: LD_INT 1
1134: ARRAY
1135: PPUSH
1136: CALL_OW 52
1140: GO 1163
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1142: LD_VAR 0 9
1146: PUSH
1147: LD_VAR 0 10
1151: ARRAY
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: LD_INT 0
1158: PPUSH
1159: CALL_OW 49
// end ;
1163: GO 1103
1165: POP
1166: POP
// team := team diff filter ;
1167: LD_ADDR_VAR 0 2
1171: PUSH
1172: LD_VAR 0 2
1176: PUSH
1177: LD_VAR 0 9
1181: DIFF
1182: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1183: LD_VAR 0 6
1187: IFFALSE 1210
1189: PUSH
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 25
1197: PUSH
1198: LD_INT 4
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: AND
1210: IFFALSE 1332
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1212: LD_ADDR_VAR 0 9
1216: PUSH
1217: LD_VAR 0 2
1221: PPUSH
1222: LD_INT 25
1224: PUSH
1225: LD_INT 4
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PPUSH
1232: CALL_OW 72
1236: ST_TO_ADDR
// for i = 1 to filter do
1237: LD_ADDR_VAR 0 10
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_VAR 0 9
1251: PUSH
1252: FOR_TO
1253: IFFALSE 1314
// begin if ( i <= 6 ) then
1255: LD_VAR 0 10
1259: PUSH
1260: LD_INT 6
1262: LESSEQUAL
1263: IFFALSE 1291
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1265: LD_VAR 0 9
1269: PUSH
1270: LD_VAR 0 10
1274: ARRAY
1275: PPUSH
1276: LD_VAR 0 6
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: CALL_OW 52
1289: GO 1312
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1291: LD_VAR 0 9
1295: PUSH
1296: LD_VAR 0 10
1300: ARRAY
1301: PPUSH
1302: LD_INT 1
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 49
// end ;
1312: GO 1252
1314: POP
1315: POP
// team := team diff filter ;
1316: LD_ADDR_VAR 0 2
1320: PUSH
1321: LD_VAR 0 2
1325: PUSH
1326: LD_VAR 0 9
1330: DIFF
1331: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
1332: LD_VAR 0 7
1336: IFFALSE 1359
1338: PUSH
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_INT 25
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PPUSH
1354: CALL_OW 72
1358: AND
1359: IFFALSE 1481
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
1361: LD_ADDR_VAR 0 9
1365: PUSH
1366: LD_VAR 0 2
1370: PPUSH
1371: LD_INT 25
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PPUSH
1381: CALL_OW 72
1385: ST_TO_ADDR
// for i = 1 to filter do
1386: LD_ADDR_VAR 0 10
1390: PUSH
1391: DOUBLE
1392: LD_INT 1
1394: DEC
1395: ST_TO_ADDR
1396: LD_VAR 0 9
1400: PUSH
1401: FOR_TO
1402: IFFALSE 1463
// begin if ( i <= 6 ) then
1404: LD_VAR 0 10
1408: PUSH
1409: LD_INT 6
1411: LESSEQUAL
1412: IFFALSE 1440
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
1414: LD_VAR 0 9
1418: PUSH
1419: LD_VAR 0 10
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 7
1429: PUSH
1430: LD_INT 1
1432: ARRAY
1433: PPUSH
1434: CALL_OW 52
1438: GO 1461
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1440: LD_VAR 0 9
1444: PUSH
1445: LD_VAR 0 10
1449: ARRAY
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// end ;
1461: GO 1401
1463: POP
1464: POP
// team := team diff filter ;
1465: LD_ADDR_VAR 0 2
1469: PUSH
1470: LD_VAR 0 2
1474: PUSH
1475: LD_VAR 0 9
1479: DIFF
1480: ST_TO_ADDR
// end ; if team then
1481: LD_VAR 0 2
1485: IFFALSE 1528
// for i in team do
1487: LD_ADDR_VAR 0 10
1491: PUSH
1492: LD_VAR 0 2
1496: PUSH
1497: FOR_IN
1498: IFFALSE 1526
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
1500: LD_VAR 0 10
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: LD_INT 0
1510: PPUSH
1511: CALL_OW 49
// ComHold ( i ) ;
1515: LD_VAR 0 10
1519: PPUSH
1520: CALL_OW 140
// end ;
1524: GO 1497
1526: POP
1527: POP
// if fac then
1528: LD_VAR 0 7
1532: IFFALSE 1568
// if UnitsInside ( fac [ 1 ] ) then
1534: LD_VAR 0 7
1538: PUSH
1539: LD_INT 1
1541: ARRAY
1542: PPUSH
1543: CALL_OW 313
1547: IFFALSE 1568
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
1549: LD_VAR 0 7
1553: PUSH
1554: LD_INT 1
1556: ARRAY
1557: PPUSH
1558: LD_INT 10
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 486
// if lab then
1568: LD_VAR 0 6
1572: IFFALSE 1608
// if UnitsInside ( lab [ 1 ] ) then
1574: LD_VAR 0 6
1578: PUSH
1579: LD_INT 1
1581: ARRAY
1582: PPUSH
1583: CALL_OW 313
1587: IFFALSE 1608
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
1589: LD_VAR 0 6
1593: PUSH
1594: LD_INT 1
1596: ARRAY
1597: PPUSH
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 486
// veh := PrepareTank ( 1 , 1 , us_medium_tracked , engine_solar , control_manual , us_double_gun , 100 ) ;
1608: LD_ADDR_VAR 0 3
1612: PUSH
1613: LD_INT 1
1615: PPUSH
1616: LD_INT 1
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 2
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: LD_INT 5
1630: PPUSH
1631: LD_INT 100
1633: PPUSH
1634: CALL 2075 0 7
1638: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1639: LD_VAR 0 3
1643: PPUSH
1644: LD_INT 0
1646: PPUSH
1647: LD_INT 5
1649: PPUSH
1650: CALL_OW 12
1654: PPUSH
1655: CALL_OW 233
// PlaceUnitXYR ( veh , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) , 15 , false ) ;
1659: LD_VAR 0 3
1663: PPUSH
1664: LD_VAR 0 4
1668: PUSH
1669: LD_INT 1
1671: ARRAY
1672: PPUSH
1673: CALL_OW 250
1677: PPUSH
1678: LD_VAR 0 4
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: PPUSH
1687: CALL_OW 251
1691: PPUSH
1692: LD_INT 15
1694: PPUSH
1695: LD_INT 0
1697: PPUSH
1698: CALL_OW 50
// uc_side := 4 ;
1702: LD_ADDR_OWVAR 20
1706: PUSH
1707: LD_INT 4
1709: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
1710: LD_ADDR_EXP 15
1714: PUSH
1715: LD_STRING Powell
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL 2012 0 2
1725: ST_TO_ADDR
// end ;
1726: LD_VAR 0 1
1730: RET
// function PrepareBase ; var blist , i , b ; begin
1731: LD_INT 0
1733: PPUSH
1734: PPUSH
1735: PPUSH
1736: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1737: LD_INT 71
1739: PPUSH
1740: LD_INT 5
1742: PPUSH
1743: LD_INT 1
1745: PPUSH
1746: CALL_OW 441
// blist := LoadVariable ( 08_GammaBase , [ ] ) ;
1750: LD_ADDR_VAR 0 2
1754: PUSH
1755: LD_STRING 08_GammaBase
1757: PPUSH
1758: EMPTY
1759: PPUSH
1760: CALL_OW 30
1764: ST_TO_ADDR
// if not blist and debug then
1765: LD_VAR 0 2
1769: NOT
1770: IFFALSE 1778
1772: PUSH
1773: LD_EXP 1
1777: AND
1778: IFFALSE 1818
// blist := [ [ b_depot , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
1780: LD_ADDR_VAR 0 2
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: LD_INT 51
1790: PUSH
1791: LD_INT 10
1793: PUSH
1794: LD_INT 3
1796: PUSH
1797: LD_INT 3
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: PUSH
1815: EMPTY
1816: LIST
1817: ST_TO_ADDR
// if not blist then
1818: LD_VAR 0 2
1822: NOT
1823: IFFALSE 1827
// exit ;
1825: GO 2007
// uc_side := 1 ;
1827: LD_ADDR_OWVAR 20
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// uc_nation := 1 ;
1835: LD_ADDR_OWVAR 21
1839: PUSH
1840: LD_INT 1
1842: ST_TO_ADDR
// for i in blist do
1843: LD_ADDR_VAR 0 3
1847: PUSH
1848: LD_VAR 0 2
1852: PUSH
1853: FOR_IN
1854: IFFALSE 2005
// begin bc_type := i [ 1 ] ;
1856: LD_ADDR_OWVAR 42
1860: PUSH
1861: LD_VAR 0 3
1865: PUSH
1866: LD_INT 1
1868: ARRAY
1869: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1870: LD_ADDR_OWVAR 43
1874: PUSH
1875: LD_VAR 0 3
1879: PUSH
1880: LD_INT 5
1882: ARRAY
1883: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1884: LD_VAR 0 3
1888: PUSH
1889: LD_INT 1
1891: ARRAY
1892: PUSH
1893: LD_INT 7
1895: PUSH
1896: LD_INT 8
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: IN
1903: IFFALSE 1933
// begin bc_kind1 := i [ 7 ] ;
1905: LD_ADDR_OWVAR 44
1909: PUSH
1910: LD_VAR 0 3
1914: PUSH
1915: LD_INT 7
1917: ARRAY
1918: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
1919: LD_ADDR_OWVAR 45
1923: PUSH
1924: LD_VAR 0 3
1928: PUSH
1929: LD_INT 8
1931: ARRAY
1932: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1933: LD_ADDR_VAR 0 4
1937: PUSH
1938: LD_VAR 0 3
1942: PUSH
1943: LD_INT 2
1945: ARRAY
1946: PPUSH
1947: LD_VAR 0 3
1951: PUSH
1952: LD_INT 3
1954: ARRAY
1955: PPUSH
1956: LD_VAR 0 3
1960: PUSH
1961: LD_INT 4
1963: ARRAY
1964: PPUSH
1965: CALL_OW 47
1969: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
1970: LD_VAR 0 4
1974: PPUSH
1975: CALL_OW 266
1979: PUSH
1980: LD_INT 32
1982: EQUAL
1983: IFFALSE 2003
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
1985: LD_VAR 0 4
1989: PPUSH
1990: LD_VAR 0 3
1994: PUSH
1995: LD_INT 7
1997: ARRAY
1998: PPUSH
1999: CALL_OW 431
// end ; end ;
2003: GO 1853
2005: POP
2006: POP
// end ; end_of_file
2007: LD_VAR 0 1
2011: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2012: LD_INT 0
2014: PPUSH
2015: PPUSH
// if exist_mode then
2016: LD_VAR 0 2
2020: IFFALSE 2045
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
2022: LD_ADDR_VAR 0 4
2026: PUSH
2027: LD_EXP 3
2031: PUSH
2032: LD_VAR 0 1
2036: STR
2037: PPUSH
2038: CALL_OW 34
2042: ST_TO_ADDR
2043: GO 2060
// unit := NewCharacter ( ident ) ;
2045: LD_ADDR_VAR 0 4
2049: PUSH
2050: LD_VAR 0 1
2054: PPUSH
2055: CALL_OW 25
2059: ST_TO_ADDR
// result := unit ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: LD_VAR 0 4
2069: ST_TO_ADDR
// end ;
2070: LD_VAR 0 3
2074: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
2075: LD_INT 0
2077: PPUSH
// uc_side := side ;
2078: LD_ADDR_OWVAR 20
2082: PUSH
2083: LD_VAR 0 1
2087: ST_TO_ADDR
// uc_nation := nation ;
2088: LD_ADDR_OWVAR 21
2092: PUSH
2093: LD_VAR 0 2
2097: ST_TO_ADDR
// vc_chassis := chassis ;
2098: LD_ADDR_OWVAR 37
2102: PUSH
2103: LD_VAR 0 3
2107: ST_TO_ADDR
// vc_engine := engine ;
2108: LD_ADDR_OWVAR 39
2112: PUSH
2113: LD_VAR 0 4
2117: ST_TO_ADDR
// vc_control := control ;
2118: LD_ADDR_OWVAR 38
2122: PUSH
2123: LD_VAR 0 5
2127: ST_TO_ADDR
// vc_weapon := weapon ;
2128: LD_ADDR_OWVAR 40
2132: PUSH
2133: LD_VAR 0 6
2137: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2138: LD_ADDR_OWVAR 41
2142: PUSH
2143: LD_VAR 0 7
2147: ST_TO_ADDR
// result := CreateVehicle ;
2148: LD_ADDR_VAR 0 8
2152: PUSH
2153: CALL_OW 45
2157: ST_TO_ADDR
// end ; end_of_file
2158: LD_VAR 0 8
2162: RET
// export function Action ; var i , tmp , fe , ma ; begin
2163: LD_INT 0
2165: PPUSH
2166: PPUSH
2167: PPUSH
2168: PPUSH
2169: PPUSH
// if Lisa then
2170: LD_EXP 7
2174: IFFALSE 2192
// tmp := tmp ^ Lisa ;
2176: LD_ADDR_VAR 0 3
2180: PUSH
2181: LD_VAR 0 3
2185: PUSH
2186: LD_EXP 7
2190: ADD
2191: ST_TO_ADDR
// if Frank then
2192: LD_EXP 6
2196: IFFALSE 2214
// tmp := tmp ^ Frank ;
2198: LD_ADDR_VAR 0 3
2202: PUSH
2203: LD_VAR 0 3
2207: PUSH
2208: LD_EXP 6
2212: ADD
2213: ST_TO_ADDR
// if Donaldson then
2214: LD_EXP 11
2218: IFFALSE 2236
// tmp := tmp ^ Donaldson ;
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: LD_VAR 0 3
2229: PUSH
2230: LD_EXP 11
2234: ADD
2235: ST_TO_ADDR
// if Joan then
2236: LD_EXP 8
2240: IFFALSE 2258
// tmp := tmp ^ Joan ;
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_VAR 0 3
2251: PUSH
2252: LD_EXP 8
2256: ADD
2257: ST_TO_ADDR
// if Gladstone then
2258: LD_EXP 5
2262: IFFALSE 2280
// tmp := tmp ^ Gladstone ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_VAR 0 3
2273: PUSH
2274: LD_EXP 5
2278: ADD
2279: ST_TO_ADDR
// tmp := tmp ^ FilterAllUnits ( [ [ f_type , unit_human ] , [ f_outside ] ] ) ;
2280: LD_ADDR_VAR 0 3
2284: PUSH
2285: LD_VAR 0 3
2289: PUSH
2290: LD_INT 21
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 56
2302: PUSH
2303: EMPTY
2304: LIST
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PPUSH
2310: CALL_OW 69
2314: ADD
2315: ST_TO_ADDR
// tmp := tmp diff 0 ;
2316: LD_ADDR_VAR 0 3
2320: PUSH
2321: LD_VAR 0 3
2325: PUSH
2326: LD_INT 0
2328: DIFF
2329: ST_TO_ADDR
// InGameOn ;
2330: CALL_OW 8
// CenterNowOnXY ( 50 , 14 ) ;
2334: LD_INT 50
2336: PPUSH
2337: LD_INT 14
2339: PPUSH
2340: CALL_OW 86
// SayRadio ( Powell , D1-Pow-1 ) ;
2344: LD_EXP 15
2348: PPUSH
2349: LD_STRING D1-Pow-1
2351: PPUSH
2352: CALL_OW 94
// ComExitBuilding ( JMM ) ;
2356: LD_EXP 4
2360: PPUSH
2361: CALL_OW 122
// AddComTurnXY ( JMM , 44 , 36 ) ;
2365: LD_EXP 4
2369: PPUSH
2370: LD_INT 44
2372: PPUSH
2373: LD_INT 36
2375: PPUSH
2376: CALL_OW 178
// Wait ( 0 0$0.3 ) ;
2380: LD_INT 10
2382: PPUSH
2383: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
2387: LD_EXP 4
2391: PPUSH
2392: LD_STRING D1-JMM-1
2394: PPUSH
2395: CALL_OW 88
// for i in tmp do
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_VAR 0 3
2408: PUSH
2409: FOR_IN
2410: IFFALSE 2484
// begin if IsInUnit ( i ) then
2412: LD_VAR 0 2
2416: PPUSH
2417: CALL_OW 310
2421: IFFALSE 2432
// ComExitBuilding ( i ) ;
2423: LD_VAR 0 2
2427: PPUSH
2428: CALL_OW 122
// AddComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_EXP 4
2441: PPUSH
2442: CALL_OW 250
2446: PPUSH
2447: LD_EXP 4
2451: PPUSH
2452: CALL_OW 251
2456: PPUSH
2457: CALL_OW 171
// wait ( 3 ) ;
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 67
// ComTurnUnit ( i , JMM ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_EXP 4
2477: PPUSH
2478: CALL_OW 119
// end ;
2482: GO 2409
2484: POP
2485: POP
// SayRadio ( Powell , D1-Pow-2 ) ;
2486: LD_EXP 15
2490: PPUSH
2491: LD_STRING D1-Pow-2
2493: PPUSH
2494: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2498: LD_EXP 4
2502: PPUSH
2503: LD_STRING D1-JMM-2
2505: PPUSH
2506: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2510: LD_EXP 15
2514: PPUSH
2515: LD_STRING D1-Pow-3
2517: PPUSH
2518: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2522: LD_EXP 4
2526: PPUSH
2527: LD_STRING D1-JMM-3
2529: PPUSH
2530: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
2534: LD_EXP 15
2538: PPUSH
2539: LD_STRING D1-Pow-4
2541: PPUSH
2542: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2546: LD_EXP 4
2550: PPUSH
2551: LD_STRING D1-JMM-4
2553: PPUSH
2554: CALL_OW 88
// SayRadio ( Powell , D1-Pow-5 ) ;
2558: LD_EXP 15
2562: PPUSH
2563: LD_STRING D1-Pow-5
2565: PPUSH
2566: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
2570: LD_EXP 4
2574: PPUSH
2575: LD_STRING D1-JMM-5
2577: PPUSH
2578: CALL_OW 88
// SayRadio ( Powell , D1-Pow-6 ) ;
2582: LD_EXP 15
2586: PPUSH
2587: LD_STRING D1-Pow-6
2589: PPUSH
2590: CALL_OW 94
// if LoadVariable ( 08_SikorskiStatus , false ) then
2594: LD_STRING 08_SikorskiStatus
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 30
2604: IFFALSE 2632
// begin SayRadio ( Powell , D1-Pow-6a ) ;
2606: LD_EXP 15
2610: PPUSH
2611: LD_STRING D1-Pow-6a
2613: PPUSH
2614: CALL_OW 94
// SayRadio ( Powell , D1-Pow-6b ) ;
2618: LD_EXP 15
2622: PPUSH
2623: LD_STRING D1-Pow-6b
2625: PPUSH
2626: CALL_OW 94
// end else
2630: GO 2656
// begin SayRadio ( Powell , D1-Pow-6c ) ;
2632: LD_EXP 15
2636: PPUSH
2637: LD_STRING D1-Pow-6c
2639: PPUSH
2640: CALL_OW 94
// SayRadio ( Powell , D1-Pow-6d ) ;
2644: LD_EXP 15
2648: PPUSH
2649: LD_STRING D1-Pow-6d
2651: PPUSH
2652: CALL_OW 94
// end ; Say ( JMM , D1-JMM-6 ) ;
2656: LD_EXP 4
2660: PPUSH
2661: LD_STRING D1-JMM-6
2663: PPUSH
2664: CALL_OW 88
// Say ( JMM , D1-JMM-6a ) ;
2668: LD_EXP 4
2672: PPUSH
2673: LD_STRING D1-JMM-6a
2675: PPUSH
2676: CALL_OW 88
// SayRadio ( Powell , D1-Pow-7 ) ;
2680: LD_EXP 15
2684: PPUSH
2685: LD_STRING D1-Pow-7
2687: PPUSH
2688: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
2692: LD_EXP 4
2696: PPUSH
2697: LD_STRING D1-JMM-7
2699: PPUSH
2700: CALL_OW 88
// SayRadio ( Powell , D1-Pow-8 ) ;
2704: LD_EXP 15
2708: PPUSH
2709: LD_STRING D1-Pow-8
2711: PPUSH
2712: CALL_OW 94
// Say ( JMM , D1-JMM-8 ) ;
2716: LD_EXP 4
2720: PPUSH
2721: LD_STRING D1-JMM-8
2723: PPUSH
2724: CALL_OW 88
// SayRadio ( Powell , D1-Pow-9 ) ;
2728: LD_EXP 15
2732: PPUSH
2733: LD_STRING D1-Pow-9
2735: PPUSH
2736: CALL_OW 94
// fe := UnitFilter ( FilterAllUnits ( [ f_side , 1 ] ) , [ f_sex , sex_female ] ) diff [ Joan , Lisa , Donaldson ] ;
2740: LD_ADDR_VAR 0 4
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 1
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PPUSH
2755: CALL_OW 69
2759: PPUSH
2760: LD_INT 26
2762: PUSH
2763: LD_INT 2
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PPUSH
2770: CALL_OW 72
2774: PUSH
2775: LD_EXP 8
2779: PUSH
2780: LD_EXP 7
2784: PUSH
2785: LD_EXP 11
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: LIST
2794: DIFF
2795: ST_TO_ADDR
// ma := UnitFilter ( FilterAllUnits ( [ f_side , 1 ] ) , [ f_sex , sex_male ] ) diff [ JMM , Bobby , Cyrus , Gladstone , Khatam , Houten , Brown , Frank , Powell ] ;
2796: LD_ADDR_VAR 0 5
2800: PUSH
2801: LD_INT 22
2803: PUSH
2804: LD_INT 1
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PPUSH
2811: CALL_OW 69
2815: PPUSH
2816: LD_INT 26
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PPUSH
2826: CALL_OW 72
2830: PUSH
2831: LD_EXP 4
2835: PUSH
2836: LD_EXP 10
2840: PUSH
2841: LD_EXP 9
2845: PUSH
2846: LD_EXP 5
2850: PUSH
2851: LD_EXP 14
2855: PUSH
2856: LD_EXP 13
2860: PUSH
2861: LD_EXP 12
2865: PUSH
2866: LD_EXP 6
2870: PUSH
2871: LD_EXP 15
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: LIST
2886: DIFF
2887: ST_TO_ADDR
// if Lisa then
2888: LD_EXP 7
2892: IFFALSE 2908
// Say ( Lisa , D1a-Lisa-1 ) else
2894: LD_EXP 7
2898: PPUSH
2899: LD_STRING D1a-Lisa-1
2901: PPUSH
2902: CALL_OW 88
2906: GO 2930
// if fe then
2908: LD_VAR 0 4
2912: IFFALSE 2930
// Say ( fe [ 1 ] , D1a-FSol1-1 ) ;
2914: LD_VAR 0 4
2918: PUSH
2919: LD_INT 1
2921: ARRAY
2922: PPUSH
2923: LD_STRING D1a-FSol1-1
2925: PPUSH
2926: CALL_OW 88
// if Lisa or fe then
2930: LD_EXP 7
2934: IFTRUE 2942
2936: PUSH
2937: LD_VAR 0 4
2941: OR
2942: IFFALSE 2978
// begin if Frank then
2944: LD_EXP 6
2948: IFFALSE 2962
// Say ( Frank , D1a-Frank-1 ) ;
2950: LD_EXP 6
2954: PPUSH
2955: LD_STRING D1a-Frank-1
2957: PPUSH
2958: CALL_OW 88
// Say ( ma [ 1 ] , D1a-Sol1-1 ) ;
2962: LD_VAR 0 5
2966: PUSH
2967: LD_INT 1
2969: ARRAY
2970: PPUSH
2971: LD_STRING D1a-Sol1-1
2973: PPUSH
2974: CALL_OW 88
// end ; if Lisa then
2978: LD_EXP 7
2982: IFFALSE 2998
// Say ( Lisa , D1a-Lisa-2 ) else
2984: LD_EXP 7
2988: PPUSH
2989: LD_STRING D1a-Lisa-2
2991: PPUSH
2992: CALL_OW 88
2996: GO 3020
// if fe then
2998: LD_VAR 0 4
3002: IFFALSE 3020
// Say ( fe [ 1 ] , D1a-FSol1-2 ) ;
3004: LD_VAR 0 4
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: PPUSH
3013: LD_STRING D1a-FSol1-2
3015: PPUSH
3016: CALL_OW 88
// if Lisa or fe then
3020: LD_EXP 7
3024: IFTRUE 3032
3026: PUSH
3027: LD_VAR 0 4
3031: OR
3032: IFFALSE 3070
// begin if Frank then
3034: LD_EXP 6
3038: IFFALSE 3054
// Say ( Frank , D1a-Frank-2 ) else
3040: LD_EXP 6
3044: PPUSH
3045: LD_STRING D1a-Frank-2
3047: PPUSH
3048: CALL_OW 88
3052: GO 3070
// Say ( ma [ 1 ] , D1a-Sol1-2 ) ;
3054: LD_VAR 0 5
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_STRING D1a-Sol1-2
3065: PPUSH
3066: CALL_OW 88
// end ; if Lisa then
3070: LD_EXP 7
3074: IFFALSE 3088
// Say ( Lisa , D1a-Lisa-3 ) ;
3076: LD_EXP 7
3080: PPUSH
3081: LD_STRING D1a-Lisa-3
3083: PPUSH
3084: CALL_OW 88
// if fe then
3088: LD_VAR 0 4
3092: IFFALSE 3110
// Say ( fe [ 1 ] , D1a-FSol1-3 ) ;
3094: LD_VAR 0 4
3098: PUSH
3099: LD_INT 1
3101: ARRAY
3102: PPUSH
3103: LD_STRING D1a-FSol1-3
3105: PPUSH
3106: CALL_OW 88
// if Lisa or fe then
3110: LD_EXP 7
3114: IFTRUE 3122
3116: PUSH
3117: LD_VAR 0 4
3121: OR
3122: IFFALSE 3136
// Say ( JMM , D1a-JMM-3 ) ;
3124: LD_EXP 4
3128: PPUSH
3129: LD_STRING D1a-JMM-3
3131: PPUSH
3132: CALL_OW 88
// if Lisa then
3136: LD_EXP 7
3140: IFFALSE 3168
// begin ComTurnUnit ( JMM , Lisa ) ;
3142: LD_EXP 4
3146: PPUSH
3147: LD_EXP 7
3151: PPUSH
3152: CALL_OW 119
// Say ( Lisa , D1b-Lisa-1 ) ;
3156: LD_EXP 7
3160: PPUSH
3161: LD_STRING D1b-Lisa-1
3163: PPUSH
3164: CALL_OW 88
// end ; if Gladstone then
3168: LD_EXP 5
3172: IFFALSE 3200
// begin ComTurnUnit ( JMM , Gladstone ) ;
3174: LD_EXP 4
3178: PPUSH
3179: LD_EXP 5
3183: PPUSH
3184: CALL_OW 119
// Say ( Gladstone , D1b-Glad-1 ) ;
3188: LD_EXP 5
3192: PPUSH
3193: LD_STRING D1b-Glad-1
3195: PPUSH
3196: CALL_OW 88
// end ; if Joan then
3200: LD_EXP 8
3204: IFFALSE 3232
// begin ComTurnUnit ( JMM , Joan ) ;
3206: LD_EXP 4
3210: PPUSH
3211: LD_EXP 8
3215: PPUSH
3216: CALL_OW 119
// Say ( Joan , D1b-Joan-1 ) ;
3220: LD_EXP 8
3224: PPUSH
3225: LD_STRING D1b-Joan-1
3227: PPUSH
3228: CALL_OW 88
// end ; if Donaldson then
3232: LD_EXP 11
3236: IFFALSE 3264
// begin ComTurnUnit ( JMM , Donaldson ) ;
3238: LD_EXP 4
3242: PPUSH
3243: LD_EXP 11
3247: PPUSH
3248: CALL_OW 119
// Say ( Donaldson , D1b-Don-1 ) ;
3252: LD_EXP 11
3256: PPUSH
3257: LD_STRING D1b-Don-1
3259: PPUSH
3260: CALL_OW 88
// end ; ComEnterUnit ( JMM , FilterAllUnits ( [ f_type , unit_vehicle ] ) [ 1 ] ) ;
3264: LD_EXP 4
3268: PPUSH
3269: LD_INT 21
3271: PUSH
3272: LD_INT 2
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: PUSH
3284: LD_INT 1
3286: ARRAY
3287: PPUSH
3288: CALL_OW 120
// AddComMoveXY ( JMM , 37 , 29 ) ;
3292: LD_EXP 4
3296: PPUSH
3297: LD_INT 37
3299: PPUSH
3300: LD_INT 29
3302: PPUSH
3303: CALL_OW 171
// Wait ( 0 0$04 ) ;
3307: LD_INT 140
3309: PPUSH
3310: CALL_OW 67
// ChangeMap ( 1 , __am\09_cont2 ) ;
3314: LD_INT 1
3316: PPUSH
3317: LD_STRING __am\09_cont2
3319: PPUSH
3320: CALL_OW 340
// end ;
3324: LD_VAR 0 1
3328: RET
