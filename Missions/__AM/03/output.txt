// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 378 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 466 0 0
// PrepareRussian ;
  29: CALL 3051 0 0
// PrepareAmerican ;
  33: CALL 1137 0 0
// PrepareCornell ;
  37: CALL 2265 0 0
// PrepareWesternBase ;
  41: CALL 2494 0 0
// Action ;
  45: CALL 5299 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_OWVAR 67
 220: ARRAY
 221: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 ] [ Difficulty ] ;
 222: LD_ADDR_EXP 20
 226: PUSH
 227: LD_INT 600
 229: PUSH
 230: LD_INT 500
 232: PUSH
 233: LD_INT 400
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_OWVAR 67
 245: ARRAY
 246: ST_TO_ADDR
// end_mission_allowed := false ;
 247: LD_ADDR_EXP 21
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// save_others := [ ] ;
 255: LD_ADDR_EXP 22
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// save_group := [ ] ;
 262: LD_ADDR_EXP 23
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// show_query := true ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// wait_for_them := false ;
 277: LD_ADDR_EXP 25
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// veh_on_meta := false ;
 285: LD_ADDR_EXP 28
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// send_spec_patrol := false ;
 293: LD_ADDR_EXP 30
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// prepare_siege := false ;
 301: LD_ADDR_EXP 31
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// send_attack_on_cornel := false ;
 309: LD_ADDR_EXP 32
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 317: LD_ADDR_EXP 26
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// game_end := false ;
 325: LD_ADDR_EXP 33
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// lose_counter := 0 ;
 333: LD_ADDR_EXP 34
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// powell_warn := 0 ;
 341: LD_ADDR_EXP 35
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// save_counter := 0 ;
 349: LD_ADDR_EXP 36
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// cornel_saved := false ;
 357: LD_ADDR_EXP 27
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// ach_counter := 0 ;
 365: LD_ADDR_EXP 13
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// end ;
 373: LD_VAR 0 1
 377: RET
// function SetDiplomacy ; begin
 378: LD_INT 0
 380: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 381: LD_INT 1
 383: PPUSH
 384: LD_INT 4
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 397: LD_INT 1
 399: PPUSH
 400: LD_INT 8
 402: PPUSH
 403: LD_INT 1
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 413: LD_INT 3
 415: PPUSH
 416: LD_INT 6
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 429: LD_INT 4
 431: PPUSH
 432: LD_INT 6
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: LD_INT 1
 440: PPUSH
 441: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 445: LD_INT 3
 447: PPUSH
 448: LD_INT 8
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: LD_INT 1
 456: PPUSH
 457: CALL_OW 80
// end ;
 461: LD_VAR 0 1
 465: RET
// export function DebugMode ; var i ; begin
 466: LD_INT 0
 468: PPUSH
 469: PPUSH
// FogOff ( 1 ) ;
 470: LD_INT 1
 472: PPUSH
 473: CALL_OW 344
// debug_strings := [ ] ;
 477: LD_ADDR_OWVAR 48
 481: PUSH
 482: EMPTY
 483: ST_TO_ADDR
// end ; end_of_file
 484: LD_VAR 0 1
 488: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 489: LD_INT 0
 491: PPUSH
// uc_side := side ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_VAR 0 1
 501: ST_TO_ADDR
// uc_nation := nation ;
 502: LD_ADDR_OWVAR 21
 506: PUSH
 507: LD_VAR 0 2
 511: ST_TO_ADDR
// vc_chassis := chassis ;
 512: LD_ADDR_OWVAR 37
 516: PUSH
 517: LD_VAR 0 3
 521: ST_TO_ADDR
// vc_engine := engine ;
 522: LD_ADDR_OWVAR 39
 526: PUSH
 527: LD_VAR 0 4
 531: ST_TO_ADDR
// vc_control := control ;
 532: LD_ADDR_OWVAR 38
 536: PUSH
 537: LD_VAR 0 5
 541: ST_TO_ADDR
// vc_weapon := weapon ;
 542: LD_ADDR_OWVAR 40
 546: PUSH
 547: LD_VAR 0 6
 551: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 552: LD_ADDR_OWVAR 41
 556: PUSH
 557: LD_VAR 0 7
 561: ST_TO_ADDR
// result := CreateVehicle ;
 562: LD_ADDR_VAR 0 8
 566: PUSH
 567: CALL_OW 45
 571: ST_TO_ADDR
// end ;
 572: LD_VAR 0 8
 576: RET
// export function SayX ( units , ident ) ; var i ; begin
 577: LD_INT 0
 579: PPUSH
 580: PPUSH
// result := false ;
 581: LD_ADDR_VAR 0 3
 585: PUSH
 586: LD_INT 0
 588: ST_TO_ADDR
// if not units then
 589: LD_VAR 0 1
 593: NOT
 594: IFFALSE 598
// exit ;
 596: GO 652
// for i in units do
 598: LD_ADDR_VAR 0 4
 602: PUSH
 603: LD_VAR 0 1
 607: PUSH
 608: FOR_IN
 609: IFFALSE 650
// if IsOk ( i ) then
 611: LD_VAR 0 4
 615: PPUSH
 616: CALL_OW 302
 620: IFFALSE 648
// begin Say ( i , ident ) ;
 622: LD_VAR 0 4
 626: PPUSH
 627: LD_VAR 0 2
 631: PPUSH
 632: CALL_OW 88
// result := i ;
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: LD_VAR 0 4
 645: ST_TO_ADDR
// break ;
 646: GO 650
// end ;
 648: GO 608
 650: POP
 651: POP
// end ;
 652: LD_VAR 0 3
 656: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 657: LD_INT 0
 659: PPUSH
 660: PPUSH
 661: PPUSH
 662: PPUSH
// for i = 1 to count do
 663: LD_ADDR_VAR 0 8
 667: PUSH
 668: DOUBLE
 669: LD_INT 1
 671: DEC
 672: ST_TO_ADDR
 673: LD_VAR 0 6
 677: PUSH
 678: FOR_TO
 679: IFFALSE 760
// begin uc_side = side ;
 681: LD_ADDR_OWVAR 20
 685: PUSH
 686: LD_VAR 0 1
 690: ST_TO_ADDR
// uc_nation = nation ;
 691: LD_ADDR_OWVAR 21
 695: PUSH
 696: LD_VAR 0 2
 700: ST_TO_ADDR
// hc_gallery =  ;
 701: LD_ADDR_OWVAR 33
 705: PUSH
 706: LD_STRING 
 708: ST_TO_ADDR
// hc_name =  ;
 709: LD_ADDR_OWVAR 26
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 717: LD_INT 0
 719: PPUSH
 720: LD_VAR 0 5
 724: PPUSH
 725: LD_VAR 0 4
 729: PPUSH
 730: CALL_OW 380
// un = CreateHuman ;
 734: LD_ADDR_VAR 0 10
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 744: LD_VAR 0 10
 748: PPUSH
 749: LD_VAR 0 3
 753: PPUSH
 754: CALL_OW 52
// end ;
 758: GO 678
 760: POP
 761: POP
// end ;
 762: LD_VAR 0 7
 766: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 767: LD_INT 0
 769: PPUSH
 770: PPUSH
 771: PPUSH
// uc_side := GetSide ( b ) ;
 772: LD_ADDR_OWVAR 20
 776: PUSH
 777: LD_VAR 0 2
 781: PPUSH
 782: CALL_OW 255
 786: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 787: LD_ADDR_OWVAR 21
 791: PUSH
 792: LD_VAR 0 2
 796: PPUSH
 797: CALL_OW 248
 801: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 802: LD_INT 0
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_VAR 0 1
 812: PPUSH
 813: CALL_OW 380
// un = CreateHuman ;
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: CALL_OW 44
 826: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 827: LD_ADDR_VAR 0 5
 831: PUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 254
 841: PUSH
 842: LD_INT 3
 844: MINUS
 845: ST_TO_ADDR
// if dir < 0 then
 846: LD_VAR 0 5
 850: PUSH
 851: LD_INT 0
 853: LESS
 854: IFFALSE 870
// dir := 6 + dir ;
 856: LD_ADDR_VAR 0 5
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: LD_VAR 0 5
 868: PLUS
 869: ST_TO_ADDR
// SetDir ( un , dir ) ;
 870: LD_VAR 0 4
 874: PPUSH
 875: LD_VAR 0 5
 879: PPUSH
 880: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 884: LD_VAR 0 4
 888: PPUSH
 889: LD_VAR 0 2
 893: PPUSH
 894: CALL_OW 52
// end ;
 898: LD_VAR 0 3
 902: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 903: LD_INT 0
 905: PPUSH
 906: PPUSH
 907: PPUSH
// result := false ;
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: LD_INT 0
 915: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 34
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 69
 949: ST_TO_ADDR
// for i in filter do
 950: LD_ADDR_VAR 0 4
 954: PUSH
 955: LD_VAR 0 3
 959: PUSH
 960: FOR_IN
 961: IFFALSE 992
// if IsDrivenBy ( i ) = unit then
 963: LD_VAR 0 4
 967: PPUSH
 968: CALL_OW 311
 972: PUSH
 973: LD_VAR 0 1
 977: EQUAL
 978: IFFALSE 990
// begin result := true ;
 980: LD_ADDR_VAR 0 2
 984: PUSH
 985: LD_INT 1
 987: ST_TO_ADDR
// break ;
 988: GO 992
// end ;
 990: GO 960
 992: POP
 993: POP
// end ;
 994: LD_VAR 0 2
 998: RET
// export function FindFreePlace ( blist ) ; var i ; begin
 999: LD_INT 0
1001: PPUSH
1002: PPUSH
// result := false ;
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_INT 0
1010: ST_TO_ADDR
// if not blist then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1064
// for i in blist do
1020: LD_ADDR_VAR 0 3
1024: PUSH
1025: LD_VAR 0 1
1029: PUSH
1030: FOR_IN
1031: IFFALSE 1062
// if UnitsInside ( i ) < 6 then
1033: LD_VAR 0 3
1037: PPUSH
1038: CALL_OW 313
1042: PUSH
1043: LD_INT 6
1045: LESS
1046: IFFALSE 1060
// begin result := i ;
1048: LD_ADDR_VAR 0 2
1052: PUSH
1053: LD_VAR 0 3
1057: ST_TO_ADDR
// break ;
1058: GO 1062
// end ;
1060: GO 1030
1062: POP
1063: POP
// end ;
1064: LD_VAR 0 2
1068: RET
// export function CountTime ( timer , mode ) ; begin
1069: LD_INT 0
1071: PPUSH
// if not timer then
1072: LD_VAR 0 1
1076: NOT
1077: IFFALSE 1081
// exit ;
1079: GO 1132
// if mode in [ asc , up , + ] then
1081: LD_VAR 0 2
1085: PUSH
1086: LD_STRING asc
1088: PUSH
1089: LD_STRING up
1091: PUSH
1092: LD_STRING +
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: IN
1100: IFFALSE 1118
// result := timer + 0 0$01 else
1102: LD_ADDR_VAR 0 3
1106: PUSH
1107: LD_VAR 0 1
1111: PUSH
1112: LD_INT 35
1114: PLUS
1115: ST_TO_ADDR
1116: GO 1132
// result := timer - 0 0$01 ;
1118: LD_ADDR_VAR 0 3
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: LD_INT 35
1130: MINUS
1131: ST_TO_ADDR
// end ; end_of_file
1132: LD_VAR 0 3
1136: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// uc_side := 4 ;
1147: LD_ADDR_OWVAR 20
1151: PUSH
1152: LD_INT 4
1154: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1155: LD_ADDR_EXP 46
1159: PUSH
1160: LD_STRING Powell
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: LD_STRING 
1168: PPUSH
1169: CALL 33625 0 3
1173: ST_TO_ADDR
// uc_side := 1 ;
1174: LD_ADDR_OWVAR 20
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// uc_nation := 1 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// if debug then
1190: LD_EXP 1
1194: IFFALSE 1324
// begin for i = 1 to 4 do
1196: LD_ADDR_VAR 0 2
1200: PUSH
1201: DOUBLE
1202: LD_INT 1
1204: DEC
1205: ST_TO_ADDR
1206: LD_INT 4
1208: PUSH
1209: FOR_TO
1210: IFFALSE 1261
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1212: LD_INT 0
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 12
1225: PPUSH
1226: LD_INT 3
1228: PPUSH
1229: CALL_OW 380
// un := CreateHuman ;
1233: LD_ADDR_VAR 0 3
1237: PUSH
1238: CALL_OW 44
1242: ST_TO_ADDR
// others := others ^ un ;
1243: LD_ADDR_VAR 0 5
1247: PUSH
1248: LD_VAR 0 5
1252: PUSH
1253: LD_VAR 0 3
1257: ADD
1258: ST_TO_ADDR
// end ;
1259: GO 1209
1261: POP
1262: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1263: LD_ADDR_VAR 0 6
1267: PUSH
1268: LD_INT 21
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 51
1279: PUSH
1280: LD_INT 90
1282: PUSH
1283: LD_INT 504
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 21
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 1
1302: PUSH
1303: LD_INT 51
1305: PUSH
1306: LD_INT 80
1308: PUSH
1309: LD_INT 750
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1324: LD_ADDR_EXP 37
1328: PUSH
1329: LD_STRING JMM
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 3
1342: PPUSH
1343: CALL 33625 0 3
1347: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1348: LD_ADDR_EXP 38
1352: PUSH
1353: LD_STRING Bobby
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 3
1366: PPUSH
1367: CALL 33625 0 3
1371: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1372: LD_ADDR_EXP 39
1376: PUSH
1377: LD_STRING Cyrus
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 3
1390: PPUSH
1391: CALL 33625 0 3
1395: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1396: LD_ADDR_EXP 40
1400: PUSH
1401: LD_STRING Lisa
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 3
1414: PPUSH
1415: CALL 33625 0 3
1419: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1420: LD_ADDR_EXP 41
1424: PUSH
1425: LD_STRING Khatam
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 3
1438: PPUSH
1439: CALL 33625 0 3
1443: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1444: LD_ADDR_EXP 42
1448: PUSH
1449: LD_STRING Brian
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 3
1462: PPUSH
1463: CALL 33625 0 3
1467: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1468: LD_ADDR_EXP 43
1472: PUSH
1473: LD_STRING Jerry
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 3
1486: PPUSH
1487: CALL 33625 0 3
1491: ST_TO_ADDR
// if Bobby then
1492: LD_EXP 38
1496: IFFALSE 1527
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1498: LD_ADDR_VAR 0 4
1502: PUSH
1503: LD_VAR 0 4
1507: PPUSH
1508: LD_VAR 0 4
1512: PUSH
1513: LD_INT 1
1515: PLUS
1516: PPUSH
1517: LD_EXP 38
1521: PPUSH
1522: CALL_OW 2
1526: ST_TO_ADDR
// if Cyrus then
1527: LD_EXP 39
1531: IFFALSE 1562
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: LD_VAR 0 4
1542: PPUSH
1543: LD_VAR 0 4
1547: PUSH
1548: LD_INT 1
1550: PLUS
1551: PPUSH
1552: LD_EXP 39
1556: PPUSH
1557: CALL_OW 2
1561: ST_TO_ADDR
// if Lisa then
1562: LD_EXP 40
1566: IFFALSE 1597
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1568: LD_ADDR_VAR 0 4
1572: PUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: LD_VAR 0 4
1582: PUSH
1583: LD_INT 1
1585: PLUS
1586: PPUSH
1587: LD_EXP 40
1591: PPUSH
1592: CALL_OW 2
1596: ST_TO_ADDR
// if Khatam then
1597: LD_EXP 41
1601: IFFALSE 1632
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1603: LD_ADDR_VAR 0 4
1607: PUSH
1608: LD_VAR 0 4
1612: PPUSH
1613: LD_VAR 0 4
1617: PUSH
1618: LD_INT 1
1620: PLUS
1621: PPUSH
1622: LD_EXP 41
1626: PPUSH
1627: CALL_OW 2
1631: ST_TO_ADDR
// if Brian then
1632: LD_EXP 42
1636: IFFALSE 1667
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1638: LD_ADDR_VAR 0 4
1642: PUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_VAR 0 4
1652: PUSH
1653: LD_INT 1
1655: PLUS
1656: PPUSH
1657: LD_EXP 42
1661: PPUSH
1662: CALL_OW 2
1666: ST_TO_ADDR
// if Jerry then
1667: LD_EXP 43
1671: IFFALSE 1702
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: LD_VAR 0 4
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: PPUSH
1692: LD_EXP 43
1696: PPUSH
1697: CALL_OW 2
1701: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1702: LD_STRING 02_other_survivors
1704: PPUSH
1705: CALL_OW 28
1709: IFFALSE 1724
// others := CreateCharacterSet ( 02_other_survivors ) ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: LD_STRING 02_other_survivors
1718: PPUSH
1719: CALL_OW 31
1723: ST_TO_ADDR
// if others then
1724: LD_VAR 0 5
1728: IFFALSE 1753
// begin tmp := tmp ^ others ;
1730: LD_ADDR_VAR 0 4
1734: PUSH
1735: LD_VAR 0 4
1739: PUSH
1740: LD_VAR 0 5
1744: ADD
1745: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1746: LD_STRING 02_other_survivors
1748: PPUSH
1749: CALL_OW 40
// end ; jmm_units := tmp ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_VAR 0 4
1762: ST_TO_ADDR
// if not vehicles then
1763: LD_VAR 0 6
1767: NOT
1768: IFFALSE 1786
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1770: LD_ADDR_VAR 0 6
1774: PUSH
1775: LD_STRING 02_tanks_1
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 30
1785: ST_TO_ADDR
// if vehicles then
1786: LD_VAR 0 6
1790: IFFALSE 1984
// begin got_mech := false ;
1792: LD_ADDR_VAR 0 7
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1800: LD_VAR 0 4
1804: PPUSH
1805: LD_INT 25
1807: PUSH
1808: LD_INT 3
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 72
1819: IFFALSE 1829
// got_mech := true ;
1821: LD_ADDR_VAR 0 7
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// for i = 1 to vehicles do
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: DOUBLE
1835: LD_INT 1
1837: DEC
1838: ST_TO_ADDR
1839: LD_VAR 0 6
1843: PUSH
1844: FOR_TO
1845: IFFALSE 1982
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1847: LD_ADDR_VAR 0 3
1851: PUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: LD_VAR 0 6
1862: PUSH
1863: LD_VAR 0 2
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: PPUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PUSH
1884: LD_INT 2
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 6
1892: PUSH
1893: LD_VAR 0 2
1897: ARRAY
1898: PUSH
1899: LD_INT 3
1901: ARRAY
1902: PPUSH
1903: LD_VAR 0 6
1907: PUSH
1908: LD_VAR 0 2
1912: ARRAY
1913: PUSH
1914: LD_INT 4
1916: ARRAY
1917: PPUSH
1918: LD_INT 40
1920: PPUSH
1921: CALL 489 0 7
1925: ST_TO_ADDR
// if not got_mech then
1926: LD_VAR 0 7
1930: NOT
1931: IFFALSE 1957
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1933: LD_VAR 0 3
1937: PPUSH
1938: LD_VAR 0 6
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PUSH
1949: LD_INT 6
1951: ARRAY
1952: PPUSH
1953: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1957: LD_ADDR_VAR 0 4
1961: PUSH
1962: LD_VAR 0 4
1966: PPUSH
1967: LD_INT 1
1969: PPUSH
1970: LD_VAR 0 3
1974: PPUSH
1975: CALL_OW 2
1979: ST_TO_ADDR
// end ;
1980: GO 1844
1982: POP
1983: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1984: LD_EXP 37
1988: PPUSH
1989: LD_INT 194
1991: PPUSH
1992: LD_INT 119
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 48
// if tmp then
2002: LD_VAR 0 4
2006: IFFALSE 2194
// begin for i in tmp do
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: LD_VAR 0 4
2017: PUSH
2018: FOR_IN
2019: IFFALSE 2192
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2021: LD_VAR 0 2
2025: PPUSH
2026: CALL_OW 257
2030: PUSH
2031: LD_INT 1
2033: NONEQUAL
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 41
2044: NONEQUAL
2045: AND
2046: IFFALSE 2060
// SetClass ( i , 1 ) ;
2048: LD_VAR 0 2
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 336
// if i = Khatam then
2060: LD_VAR 0 2
2064: PUSH
2065: LD_EXP 41
2069: EQUAL
2070: IFFALSE 2084
// SetClass ( i , 4 ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_INT 4
2079: PPUSH
2080: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2084: LD_ADDR_VAR 0 8
2088: PUSH
2089: LD_INT 22
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 2
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 58
2111: PUSH
2112: EMPTY
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PPUSH
2120: CALL_OW 69
2124: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2125: LD_VAR 0 2
2129: PPUSH
2130: CALL_OW 247
2134: PUSH
2135: LD_INT 1
2137: EQUAL
2138: PUSH
2139: LD_VAR 0 8
2143: AND
2144: IFFALSE 2166
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2146: LD_VAR 0 2
2150: PPUSH
2151: LD_VAR 0 8
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PPUSH
2160: CALL_OW 52
2164: GO 2181
// PlaceUnitArea ( i , startArea , false ) ;
2166: LD_VAR 0 2
2170: PPUSH
2171: LD_INT 1
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: CALL_OW 49
// ComHold ( i ) ;
2181: LD_VAR 0 2
2185: PPUSH
2186: CALL_OW 140
// end ;
2190: GO 2018
2192: POP
2193: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2194: LD_ADDR_EXP 7
2198: PUSH
2199: LD_STRING 02_mikhailStatus_1
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 30
2209: ST_TO_ADDR
// if not bierezov_exist and not debug then
2210: LD_EXP 7
2214: NOT
2215: PUSH
2216: LD_EXP 1
2220: NOT
2221: AND
2222: IFFALSE 2226
// exit ;
2224: GO 2260
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2226: LD_ADDR_EXP 45
2230: PUSH
2231: LD_STRING Mikhail
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 33625 0 3
2244: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2245: LD_EXP 45
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: LD_VAR 0 1
2264: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2265: LD_INT 0
2267: PPUSH
2268: PPUSH
2269: PPUSH
2270: PPUSH
// uc_side := 4 ;
2271: LD_ADDR_OWVAR 20
2275: PUSH
2276: LD_INT 4
2278: ST_TO_ADDR
// uc_nation := 1 ;
2279: LD_ADDR_OWVAR 21
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2287: LD_ADDR_EXP 44
2291: PUSH
2292: LD_STRING Cornell
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_STRING 
2300: PPUSH
2301: CALL 33625 0 3
2305: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2306: LD_ADDR_EXP 6
2310: PUSH
2311: LD_INT 9
2313: PUSH
2314: LD_EXP 4
2318: MINUS
2319: ST_TO_ADDR
// tmp := [ ] ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: EMPTY
2326: ST_TO_ADDR
// if cornel_units < 4 then
2327: LD_EXP 6
2331: PUSH
2332: LD_INT 4
2334: LESS
2335: IFFALSE 2345
// cornel_units := 4 ;
2337: LD_ADDR_EXP 6
2341: PUSH
2342: LD_INT 4
2344: ST_TO_ADDR
// for i = 1 to cornel_units do
2345: LD_ADDR_VAR 0 4
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_EXP 6
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2459
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2363: LD_INT 0
2365: PPUSH
2366: LD_INT 1
2368: PUSH
2369: LD_INT 1
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: LD_INT 2
2377: PUSH
2378: LD_INT 4
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: LD_VAR 0 4
2392: PUSH
2393: LD_INT 5
2395: MOD
2396: PUSH
2397: LD_INT 1
2399: PLUS
2400: ARRAY
2401: PPUSH
2402: LD_INT 2
2404: PPUSH
2405: CALL_OW 380
// un := CreateHuman ;
2409: LD_ADDR_VAR 0 3
2413: PUSH
2414: CALL_OW 44
2418: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: LD_INT 1
2431: PPUSH
2432: LD_VAR 0 3
2436: PPUSH
2437: CALL_OW 2
2441: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2442: LD_VAR 0 3
2446: PPUSH
2447: LD_INT 2
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: CALL_OW 49
// end ;
2457: GO 2360
2459: POP
2460: POP
// cornel_units := tmp ;
2461: LD_ADDR_EXP 6
2465: PUSH
2466: LD_VAR 0 2
2470: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2471: LD_EXP 44
2475: PPUSH
2476: LD_INT 191
2478: PPUSH
2479: LD_INT 106
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: CALL_OW 48
// end ;
2489: LD_VAR 0 1
2493: RET
// export function PrepareWesternBase ; var i ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
// uc_side := 8 ;
2498: LD_ADDR_OWVAR 20
2502: PUSH
2503: LD_INT 8
2505: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2506: LD_ADDR_EXP 47
2510: PUSH
2511: LD_STRING Lynch
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: LD_STRING 
2519: PPUSH
2520: CALL 33625 0 3
2524: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2525: LD_ADDR_EXP 48
2529: PUSH
2530: LD_STRING Walker
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 33625 0 3
2543: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2544: LD_ADDR_EXP 49
2548: PUSH
2549: LD_STRING Turner
2551: PPUSH
2552: LD_INT 0
2554: PPUSH
2555: LD_STRING 
2557: PPUSH
2558: CALL 33625 0 3
2562: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2563: LD_ADDR_EXP 50
2567: PUSH
2568: LD_STRING Jillian
2570: PPUSH
2571: LD_INT 0
2573: PPUSH
2574: LD_STRING 
2576: PPUSH
2577: CALL 33625 0 3
2581: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_EXP 47
2591: PUSH
2592: LD_EXP 48
2596: PUSH
2597: LD_EXP 49
2601: PUSH
2602: LD_EXP 50
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: FOR_IN
2614: IFFALSE 2642
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 3
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// ComHold ( i ) ;
2631: LD_VAR 0 2
2635: PPUSH
2636: CALL_OW 140
// end ;
2640: GO 2613
2642: POP
2643: POP
// end ;
2644: LD_VAR 0 1
2648: RET
// export function SelectGroup ; var units , selected , i ; begin
2649: LD_INT 0
2651: PPUSH
2652: PPUSH
2653: PPUSH
2654: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2655: LD_ADDR_VAR 0 2
2659: PUSH
2660: LD_EXP 37
2664: PUSH
2665: LD_INT -3
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_EXP 4
2676: ADD
2677: PUSH
2678: LD_INT -2
2680: PUSH
2681: LD_INT -4
2683: PUSH
2684: LD_EXP 44
2688: PUSH
2689: LD_EXP 45
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: ADD
2700: PUSH
2701: LD_INT -3
2703: PUSH
2704: EMPTY
2705: LIST
2706: ADD
2707: PUSH
2708: LD_EXP 6
2712: ADD
2713: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select five characters to go with you , 4 , 4 , units , [ ] ) ;
2714: LD_ADDR_VAR 0 3
2718: PUSH
2719: LD_EXP 37
2723: PUSH
2724: LD_STRING Select five characters to go with you
2726: PPUSH
2727: LD_INT 4
2729: PPUSH
2730: LD_INT 4
2732: PPUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: EMPTY
2739: PPUSH
2740: CALL_OW 42
2744: ADD
2745: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2746: LD_ADDR_EXP 6
2750: PUSH
2751: LD_EXP 4
2755: PUSH
2756: LD_EXP 6
2760: UNION
2761: PUSH
2762: LD_VAR 0 3
2766: DIFF
2767: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2768: LD_ADDR_VAR 0 4
2772: PUSH
2773: LD_EXP 6
2777: PUSH
2778: LD_EXP 45
2782: ADD
2783: PUSH
2784: FOR_IN
2785: IFFALSE 2816
// if GetSide ( i ) = 1 then
2787: LD_VAR 0 4
2791: PPUSH
2792: CALL_OW 255
2796: PUSH
2797: LD_INT 1
2799: EQUAL
2800: IFFALSE 2814
// SetSide ( i , 4 ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 4
2809: PPUSH
2810: CALL_OW 235
2814: GO 2784
2816: POP
2817: POP
// for i in selected do
2818: LD_ADDR_VAR 0 4
2822: PUSH
2823: LD_VAR 0 3
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2860
// if GetSide ( i ) = 4 then
2831: LD_VAR 0 4
2835: PPUSH
2836: CALL_OW 255
2840: PUSH
2841: LD_INT 4
2843: EQUAL
2844: IFFALSE 2858
// SetSide ( i , 1 ) ;
2846: LD_VAR 0 4
2850: PPUSH
2851: LD_INT 1
2853: PPUSH
2854: CALL_OW 235
2858: GO 2828
2860: POP
2861: POP
// jmm_units := jmm_units diff cornel_units ;
2862: LD_ADDR_EXP 4
2866: PUSH
2867: LD_EXP 4
2871: PUSH
2872: LD_EXP 6
2876: DIFF
2877: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2878: LD_EXP 38
2882: PPUSH
2883: CALL_OW 255
2887: PUSH
2888: LD_INT 4
2890: EQUAL
2891: IFFALSE 2906
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2893: LD_EXP 3
2897: PUSH
2898: LD_STRING Bobby
2900: STR
2901: PPUSH
2902: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2906: LD_EXP 39
2910: PPUSH
2911: CALL_OW 255
2915: PUSH
2916: LD_INT 4
2918: EQUAL
2919: IFFALSE 2934
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2921: LD_EXP 3
2925: PUSH
2926: LD_STRING Cyrus
2928: STR
2929: PPUSH
2930: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2934: LD_EXP 40
2938: PPUSH
2939: CALL_OW 255
2943: PUSH
2944: LD_INT 4
2946: EQUAL
2947: IFFALSE 2962
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2949: LD_EXP 3
2953: PUSH
2954: LD_STRING Lisa
2956: STR
2957: PPUSH
2958: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2962: LD_EXP 41
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 4
2974: EQUAL
2975: IFFALSE 2990
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2977: LD_EXP 3
2981: PUSH
2982: LD_STRING Khatam
2984: STR
2985: PPUSH
2986: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2990: LD_EXP 42
2994: PPUSH
2995: CALL_OW 255
2999: PUSH
3000: LD_INT 4
3002: EQUAL
3003: IFFALSE 3018
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3005: LD_EXP 3
3009: PUSH
3010: LD_STRING Brian
3012: STR
3013: PPUSH
3014: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3018: LD_EXP 43
3022: PPUSH
3023: CALL_OW 255
3027: PUSH
3028: LD_INT 4
3030: EQUAL
3031: IFFALSE 3046
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3033: LD_EXP 3
3037: PUSH
3038: LD_STRING Jerry
3040: STR
3041: PPUSH
3042: CALL_OW 40
// end ; end_of_file
3046: LD_VAR 0 1
3050: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3051: LD_INT 0
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
// ru_alert := false ;
3066: LD_ADDR_EXP 60
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// ru_produce_list := [ ] ;
3074: LD_ADDR_EXP 57
3078: PUSH
3079: EMPTY
3080: ST_TO_ADDR
// if Difficulty > 1 then
3081: LD_OWVAR 67
3085: PUSH
3086: LD_INT 1
3088: GREATER
3089: IFFALSE 3177
// begin uc_side := 3 ;
3091: LD_ADDR_OWVAR 20
3095: PUSH
3096: LD_INT 3
3098: ST_TO_ADDR
// uc_nation := 3 ;
3099: LD_ADDR_OWVAR 21
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// bc_type := b_breastwork ;
3107: LD_ADDR_OWVAR 42
3111: PUSH
3112: LD_INT 31
3114: ST_TO_ADDR
// bc_level := Difficulty ;
3115: LD_ADDR_OWVAR 43
3119: PUSH
3120: LD_OWVAR 67
3124: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3125: LD_INT 22
3127: PPUSH
3128: LD_INT 14
3130: PPUSH
3131: LD_INT 0
3133: PPUSH
3134: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3138: LD_INT 48
3140: PPUSH
3141: LD_INT 46
3143: PPUSH
3144: LD_INT 0
3146: PPUSH
3147: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3151: LD_INT 86
3153: PPUSH
3154: LD_INT 65
3156: PPUSH
3157: LD_INT 5
3159: PPUSH
3160: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3164: LD_INT 165
3166: PPUSH
3167: LD_INT 73
3169: PPUSH
3170: LD_INT 5
3172: PPUSH
3173: CALL_OW 47
// end ; if Difficulty = 3 then
3177: LD_OWVAR 67
3181: PUSH
3182: LD_INT 3
3184: EQUAL
3185: IFFALSE 3200
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3187: LD_INT 51
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 2
3195: PPUSH
3196: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3200: LD_ADDR_VAR 0 7
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 30
3220: PUSH
3221: LD_INT 31
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 30
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3252: LD_ADDR_VAR 0 8
3256: PUSH
3257: LD_INT 22
3259: PUSH
3260: LD_INT 3
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: LD_INT 30
3269: PUSH
3270: LD_INT 4
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PPUSH
3281: CALL_OW 69
3285: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3286: LD_ADDR_VAR 0 10
3290: PUSH
3291: LD_INT 22
3293: PUSH
3294: LD_INT 3
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 30
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PPUSH
3315: CALL_OW 69
3319: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3320: LD_ADDR_VAR 0 9
3324: PUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 30
3337: PUSH
3338: LD_INT 6
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 69
3353: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 30
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 69
3387: PUSH
3388: FOR_IN
3389: IFFALSE 3433
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3391: LD_VAR 0 2
3395: PPUSH
3396: CALL_OW 274
3400: PPUSH
3401: LD_INT 1
3403: PPUSH
3404: LD_INT 1000
3406: PPUSH
3407: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3411: LD_VAR 0 2
3415: PPUSH
3416: CALL_OW 274
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 300
3426: PPUSH
3427: CALL_OW 277
// end ;
3431: GO 3388
3433: POP
3434: POP
// uc_side := 3 ;
3435: LD_ADDR_OWVAR 20
3439: PUSH
3440: LD_INT 3
3442: ST_TO_ADDR
// uc_nation := 3 ;
3443: LD_ADDR_OWVAR 21
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// skill := [ 2 , 3 , 4 ] [ Difficulty ] ;
3451: LD_ADDR_VAR 0 11
3455: PUSH
3456: LD_INT 2
3458: PUSH
3459: LD_INT 3
3461: PUSH
3462: LD_INT 4
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: PUSH
3470: LD_OWVAR 67
3474: ARRAY
3475: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3476: LD_ADDR_EXP 52
3480: PUSH
3481: LD_STRING Pokryshkin
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: LD_STRING 
3489: PPUSH
3490: CALL 33625 0 3
3494: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3495: LD_EXP 52
3499: PPUSH
3500: LD_INT 63
3502: PPUSH
3503: LD_INT 21
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3513: LD_EXP 52
3517: PPUSH
3518: CALL_OW 140
// InitHc ;
3522: CALL_OW 19
// for i in fac do
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: LD_VAR 0 10
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3590
// begin for j = 1 to 6 do
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: DOUBLE
3545: LD_INT 1
3547: DEC
3548: ST_TO_ADDR
3549: LD_INT 6
3551: PUSH
3552: FOR_TO
3553: IFFALSE 3586
// begin PrepareHuman ( false , 3 , skill ) ;
3555: LD_INT 0
3557: PPUSH
3558: LD_INT 3
3560: PPUSH
3561: LD_VAR 0 11
3565: PPUSH
3566: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3570: CALL_OW 44
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 52
// end ;
3584: GO 3552
3586: POP
3587: POP
// end ;
3588: GO 3536
3590: POP
3591: POP
// for i in lab do
3592: LD_ADDR_VAR 0 2
3596: PUSH
3597: LD_VAR 0 9
3601: PUSH
3602: FOR_IN
3603: IFFALSE 3636
// begin PrepareHuman ( false , 4 , skill ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_VAR 0 11
3615: PPUSH
3616: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3620: CALL_OW 44
3624: PPUSH
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 52
// end ;
3634: GO 3602
3636: POP
3637: POP
// for i in tw do
3638: LD_ADDR_VAR 0 2
3642: PUSH
3643: LD_VAR 0 7
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3698
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3651: LD_VAR 0 2
3655: PPUSH
3656: LD_INT 42
3658: PUSH
3659: LD_INT 43
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 1
3668: PPUSH
3669: LD_INT 2
3671: PPUSH
3672: CALL_OW 12
3676: ARRAY
3677: PPUSH
3678: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3682: LD_VAR 0 11
3686: PPUSH
3687: LD_VAR 0 2
3691: PPUSH
3692: CALL 767 0 2
// end ;
3696: GO 3648
3698: POP
3699: POP
// for i in bar do
3700: LD_ADDR_VAR 0 2
3704: PUSH
3705: LD_VAR 0 8
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3744
// begin PrepareHuman ( false , 1 , skill ) ;
3713: LD_INT 0
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_VAR 0 11
3723: PPUSH
3724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3728: CALL_OW 44
3732: PPUSH
3733: LD_VAR 0 2
3737: PPUSH
3738: CALL_OW 52
// end ;
3742: GO 3710
3744: POP
3745: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3746: LD_ADDR_VAR 0 13
3750: PUSH
3751: LD_INT 100
3753: PUSH
3754: LD_INT 9
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 135
3763: PUSH
3764: LD_INT 60
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 41
3773: PUSH
3774: LD_INT 6
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 22
3783: PUSH
3784: LD_INT 9
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: LD_INT 84
3793: PUSH
3794: LD_INT 14
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// vehicles := [ ] ;
3808: LD_ADDR_VAR 0 12
3812: PUSH
3813: EMPTY
3814: ST_TO_ADDR
// for i in spot_xy do
3815: LD_ADDR_VAR 0 2
3819: PUSH
3820: LD_VAR 0 13
3824: PUSH
3825: FOR_IN
3826: IFFALSE 3984
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3828: LD_ADDR_VAR 0 6
3832: PUSH
3833: LD_INT 3
3835: PPUSH
3836: LD_INT 3
3838: PPUSH
3839: LD_INT 22
3841: PPUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 42
3850: PUSH
3851: LD_INT 43
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: CALL_OW 12
3872: ARRAY
3873: PPUSH
3874: LD_INT 100
3876: PPUSH
3877: CALL 489 0 7
3881: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3882: LD_ADDR_VAR 0 12
3886: PUSH
3887: LD_VAR 0 12
3891: PPUSH
3892: LD_VAR 0 12
3896: PUSH
3897: LD_INT 1
3899: PLUS
3900: PPUSH
3901: LD_VAR 0 6
3905: PPUSH
3906: CALL_OW 2
3910: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3911: LD_VAR 0 6
3915: PPUSH
3916: LD_INT 3
3918: PPUSH
3919: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_VAR 0 2
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 2
3944: ARRAY
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 3
3958: PPUSH
3959: LD_VAR 0 11
3963: PPUSH
3964: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3968: CALL_OW 44
3972: PPUSH
3973: LD_VAR 0 6
3977: PPUSH
3978: CALL_OW 52
// end ;
3982: GO 3825
3984: POP
3985: POP
// for i = 1 to [ 5 , 7 , 8 ] [ Difficulty ] do
3986: LD_ADDR_VAR 0 2
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 5
3998: PUSH
3999: LD_INT 7
4001: PUSH
4002: LD_INT 8
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_OWVAR 67
4014: ARRAY
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4077
// begin PrepareHuman ( false , 1 , skill ) ;
4019: LD_INT 0
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_VAR 0 11
4029: PPUSH
4030: CALL_OW 380
// un := CreateHuman ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: CALL_OW 44
4043: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4044: LD_VAR 0 5
4048: PPUSH
4049: LD_INT 11
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4059: LD_ADDR_EXP 55
4063: PUSH
4064: LD_EXP 55
4068: PUSH
4069: LD_VAR 0 5
4073: ADD
4074: ST_TO_ADDR
// end ;
4075: GO 4016
4077: POP
4078: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4079: LD_ADDR_VAR 0 2
4083: PUSH
4084: DOUBLE
4085: LD_INT 1
4087: DEC
4088: ST_TO_ADDR
4089: LD_INT 2
4091: PUSH
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PUSH
4103: LD_OWVAR 67
4107: ARRAY
4108: PUSH
4109: FOR_TO
4110: IFFALSE 4170
// begin PrepareHuman ( false , 1 , skill ) ;
4112: LD_INT 0
4114: PPUSH
4115: LD_INT 1
4117: PPUSH
4118: LD_VAR 0 11
4122: PPUSH
4123: CALL_OW 380
// un := CreateHuman ;
4127: LD_ADDR_VAR 0 5
4131: PUSH
4132: CALL_OW 44
4136: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4137: LD_VAR 0 5
4141: PPUSH
4142: LD_INT 12
4144: PPUSH
4145: LD_INT 0
4147: PPUSH
4148: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4152: LD_ADDR_EXP 53
4156: PUSH
4157: LD_EXP 53
4161: PUSH
4162: LD_VAR 0 5
4166: ADD
4167: ST_TO_ADDR
// end ;
4168: GO 4109
4170: POP
4171: POP
// for i = 1 to 2 do
4172: LD_ADDR_VAR 0 2
4176: PUSH
4177: DOUBLE
4178: LD_INT 1
4180: DEC
4181: ST_TO_ADDR
4182: LD_INT 2
4184: PUSH
4185: FOR_TO
4186: IFFALSE 4252
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4188: LD_INT 1
4190: PPUSH
4191: LD_INT 1
4193: PPUSH
4194: LD_VAR 0 11
4198: PPUSH
4199: CALL_OW 380
// un := CreateHuman ;
4203: LD_ADDR_VAR 0 5
4207: PUSH
4208: CALL_OW 44
4212: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4213: LD_VAR 0 5
4217: PPUSH
4218: LD_INT 39
4220: PPUSH
4221: LD_INT 12
4223: PPUSH
4224: LD_INT 3
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4234: LD_ADDR_EXP 54
4238: PUSH
4239: LD_EXP 54
4243: PUSH
4244: LD_VAR 0 5
4248: ADD
4249: ST_TO_ADDR
// end ;
4250: GO 4185
4252: POP
4253: POP
// for i = 1 to 3 do
4254: LD_ADDR_VAR 0 2
4258: PUSH
4259: DOUBLE
4260: LD_INT 1
4262: DEC
4263: ST_TO_ADDR
4264: LD_INT 3
4266: PUSH
4267: FOR_TO
4268: IFFALSE 4334
// begin PrepareHuman ( false , 1 , skill ) ;
4270: LD_INT 0
4272: PPUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_VAR 0 11
4280: PPUSH
4281: CALL_OW 380
// un := CreateHuman ;
4285: LD_ADDR_VAR 0 5
4289: PUSH
4290: CALL_OW 44
4294: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4295: LD_VAR 0 5
4299: PPUSH
4300: LD_INT 180
4302: PPUSH
4303: LD_INT 11
4305: PPUSH
4306: LD_INT 4
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4316: LD_ADDR_EXP 58
4320: PUSH
4321: LD_EXP 58
4325: PUSH
4326: LD_VAR 0 5
4330: ADD
4331: ST_TO_ADDR
// end ;
4332: GO 4267
4334: POP
4335: POP
// ru_vehicles := vehicles ;
4336: LD_ADDR_EXP 56
4340: PUSH
4341: LD_VAR 0 12
4345: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4346: LD_ADDR_EXP 59
4350: PUSH
4351: LD_INT 131
4353: PUSH
4354: LD_INT 121
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 113
4363: PUSH
4364: LD_INT 90
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 93
4373: PUSH
4374: LD_INT 62
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 106
4388: PUSH
4389: LD_INT 54
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 120
4398: PUSH
4399: LD_INT 80
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 143
4408: PUSH
4409: LD_INT 120
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: LIST
4420: PUSH
4421: LD_INT 154
4423: PUSH
4424: LD_INT 116
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 140
4433: PUSH
4434: LD_INT 93
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 130
4443: PUSH
4444: LD_INT 58
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 105
4458: PUSH
4459: LD_INT 106
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 134
4468: PUSH
4469: LD_INT 98
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 159
4478: PUSH
4479: LD_INT 113
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// if Difficulty = 1 then
4497: LD_OWVAR 67
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: IFFALSE 4509
// exit ;
4507: GO 4564
// for i = 1 to Difficulty - 1 do
4509: LD_ADDR_VAR 0 2
4513: PUSH
4514: DOUBLE
4515: LD_INT 1
4517: DEC
4518: ST_TO_ADDR
4519: LD_OWVAR 67
4523: PUSH
4524: LD_INT 1
4526: MINUS
4527: PUSH
4528: FOR_TO
4529: IFFALSE 4562
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4531: LD_ADDR_EXP 57
4535: PUSH
4536: LD_EXP 57
4540: PUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: LD_INT 43
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: ADD
4559: ST_TO_ADDR
4560: GO 4528
4562: POP
4563: POP
// end ;
4564: LD_VAR 0 1
4568: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4569: LD_INT 22
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 21
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: IFFALSE 4691
4599: GO 4601
4601: DISABLE
4602: LD_INT 0
4604: PPUSH
4605: PPUSH
// begin enable ;
4606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4607: LD_ADDR_VAR 0 2
4611: PUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 3
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 2
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PPUSH
4636: CALL_OW 69
4640: ST_TO_ADDR
// if filter then
4641: LD_VAR 0 2
4645: IFFALSE 4691
// for i in filter do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: LD_VAR 0 2
4656: PUSH
4657: FOR_IN
4658: IFFALSE 4689
// if GetFuel ( i ) < 20 then
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 261
4669: PUSH
4670: LD_INT 20
4672: LESS
4673: IFFALSE 4687
// SetFuel ( i , 20 ) ;
4675: LD_VAR 0 1
4679: PPUSH
4680: LD_INT 20
4682: PPUSH
4683: CALL_OW 240
4687: GO 4657
4689: POP
4690: POP
// end ;
4691: PPOPN 2
4693: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4694: LD_EXP 57
4698: IFFALSE 4917
4700: GO 4702
4702: DISABLE
4703: LD_INT 0
4705: PPUSH
4706: PPUSH
4707: PPUSH
// begin enable ;
4708: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4709: LD_ADDR_VAR 0 2
4713: PUSH
4714: LD_INT 22
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 30
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PPUSH
4738: CALL_OW 69
4742: ST_TO_ADDR
// can_produce := [ ] ;
4743: LD_ADDR_VAR 0 3
4747: PUSH
4748: EMPTY
4749: ST_TO_ADDR
// if not fac then
4750: LD_VAR 0 2
4754: NOT
4755: IFFALSE 4760
// begin disable ;
4757: DISABLE
// exit ;
4758: GO 4917
// end ; for i in fac do
4760: LD_ADDR_VAR 0 1
4764: PUSH
4765: LD_VAR 0 2
4769: PUSH
4770: FOR_IN
4771: IFFALSE 4809
// if UnitsInside ( i ) then
4773: LD_VAR 0 1
4777: PPUSH
4778: CALL_OW 313
4782: IFFALSE 4807
// can_produce := Insert ( can_produce , 1 , i ) ;
4784: LD_ADDR_VAR 0 3
4788: PUSH
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_INT 1
4796: PPUSH
4797: LD_VAR 0 1
4801: PPUSH
4802: CALL_OW 2
4806: ST_TO_ADDR
4807: GO 4770
4809: POP
4810: POP
// if not can_produce then
4811: LD_VAR 0 3
4815: NOT
4816: IFFALSE 4820
// exit ;
4818: GO 4917
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4820: LD_VAR 0 3
4824: PUSH
4825: LD_INT 1
4827: PPUSH
4828: LD_VAR 0 3
4832: PPUSH
4833: CALL_OW 12
4837: ARRAY
4838: PPUSH
4839: LD_EXP 57
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: LD_EXP 57
4852: PUSH
4853: LD_INT 2
4855: ARRAY
4856: PPUSH
4857: LD_EXP 57
4861: PUSH
4862: LD_INT 3
4864: ARRAY
4865: PPUSH
4866: LD_EXP 57
4870: PUSH
4871: LD_INT 4
4873: ARRAY
4874: PPUSH
4875: CALL_OW 125
// for i = 1 to 4 do
4879: LD_ADDR_VAR 0 1
4883: PUSH
4884: DOUBLE
4885: LD_INT 1
4887: DEC
4888: ST_TO_ADDR
4889: LD_INT 4
4891: PUSH
4892: FOR_TO
4893: IFFALSE 4915
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4895: LD_ADDR_EXP 57
4899: PUSH
4900: LD_EXP 57
4904: PPUSH
4905: LD_INT 1
4907: PPUSH
4908: CALL_OW 3
4912: ST_TO_ADDR
4913: GO 4892
4915: POP
4916: POP
// end ;
4917: PPOPN 3
4919: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4920: LD_INT 0
4922: PPUSH
4923: PPUSH
4924: PPUSH
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: DOUBLE
4931: LD_INT 1
4933: DEC
4934: ST_TO_ADDR
4935: LD_INT 2
4937: PUSH
4938: LD_INT 3
4940: PUSH
4941: LD_INT 4
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: LD_OWVAR 67
4953: ARRAY
4954: PUSH
4955: FOR_TO
4956: IFFALSE 5105
// begin PrepareHuman ( false , 3 , 3 ) ;
4958: LD_INT 0
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4971: LD_ADDR_VAR 0 3
4975: PUSH
4976: LD_INT 3
4978: PPUSH
4979: LD_INT 3
4981: PPUSH
4982: LD_INT 22
4984: PPUSH
4985: LD_INT 1
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: LD_INT 43
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 1
5003: PPUSH
5004: LD_INT 2
5006: PPUSH
5007: CALL_OW 12
5011: ARRAY
5012: PPUSH
5013: LD_INT 70
5015: PPUSH
5016: CALL 489 0 7
5020: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5021: LD_VAR 0 3
5025: PPUSH
5026: LD_INT 4
5028: PPUSH
5029: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5033: LD_VAR 0 3
5037: PPUSH
5038: LD_INT 229
5040: PPUSH
5041: LD_INT 44
5043: PPUSH
5044: LD_INT 0
5046: PPUSH
5047: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5051: CALL_OW 44
5055: PPUSH
5056: LD_VAR 0 3
5060: PPUSH
5061: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5065: LD_ADDR_EXP 56
5069: PUSH
5070: LD_EXP 56
5074: PUSH
5075: LD_VAR 0 3
5079: ADD
5080: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5081: LD_VAR 0 3
5085: PPUSH
5086: LD_INT 191
5088: PPUSH
5089: LD_INT 32
5091: PPUSH
5092: CALL_OW 111
// Wait ( 0 0$02 ) ;
5096: LD_INT 70
5098: PPUSH
5099: CALL_OW 67
// end ;
5103: GO 4955
5105: POP
5106: POP
// end ;
5107: LD_VAR 0 1
5111: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5112: LD_EXP 31
5116: PUSH
5117: LD_EXP 56
5121: AND
5122: IFFALSE 5296
5124: GO 5126
5126: DISABLE
5127: LD_INT 0
5129: PPUSH
5130: PPUSH
5131: PPUSH
// begin wait ( 0 0$50 ) ;
5132: LD_INT 1750
5134: PPUSH
5135: CALL_OW 67
// tmp := ru_vehicles ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_EXP 56
5148: ST_TO_ADDR
// if not tmp then
5149: LD_VAR 0 3
5153: NOT
5154: IFFALSE 5158
// exit ;
5156: GO 5296
// repeat wait ( 0 0$1 ) ;
5158: LD_INT 35
5160: PPUSH
5161: CALL_OW 67
// for i in tmp do
5165: LD_ADDR_VAR 0 1
5169: PUSH
5170: LD_VAR 0 3
5174: PUSH
5175: FOR_IN
5176: IFFALSE 5287
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5178: LD_ADDR_VAR 0 2
5182: PUSH
5183: LD_INT 22
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PPUSH
5193: LD_VAR 0 1
5197: PPUSH
5198: CALL_OW 74
5202: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 296
5217: PUSH
5218: LD_INT 10
5220: GREATER
5221: IFFALSE 5240
// ComAgressiveMove ( i , 69 , 101 ) else
5223: LD_VAR 0 1
5227: PPUSH
5228: LD_INT 69
5230: PPUSH
5231: LD_INT 101
5233: PPUSH
5234: CALL_OW 114
5238: GO 5254
// ComAttackUnit ( i , enemy ) ;
5240: LD_VAR 0 1
5244: PPUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: CALL_OW 115
// if GetLives ( i ) < 250 then
5254: LD_VAR 0 1
5258: PPUSH
5259: CALL_OW 256
5263: PUSH
5264: LD_INT 250
5266: LESS
5267: IFFALSE 5285
// tmp := tmp diff i ;
5269: LD_ADDR_VAR 0 3
5273: PUSH
5274: LD_VAR 0 3
5278: PUSH
5279: LD_VAR 0 1
5283: DIFF
5284: ST_TO_ADDR
// end ;
5285: GO 5175
5287: POP
5288: POP
// until not tmp ;
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 5158
// end ; end_of_file
5296: PPOPN 3
5298: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5299: LD_INT 0
5301: PPUSH
5302: PPUSH
5303: PPUSH
5304: PPUSH
5305: PPUSH
5306: PPUSH
5307: PPUSH
// InGameOn ;
5308: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5312: LD_EXP 37
5316: PPUSH
5317: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5321: LD_EXP 37
5325: PPUSH
5326: LD_EXP 44
5330: PPUSH
5331: CALL_OW 119
// if Bierezov then
5335: LD_EXP 45
5339: IFFALSE 5355
// ComTurnUnit ( Bierezov , Cornel ) ;
5341: LD_EXP 45
5345: PPUSH
5346: LD_EXP 44
5350: PPUSH
5351: CALL_OW 119
// for i in jmm_units do
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_EXP 4
5364: PUSH
5365: FOR_IN
5366: IFFALSE 5384
// ComTurnUnit ( i , Cornel ) ;
5368: LD_VAR 0 2
5372: PPUSH
5373: LD_EXP 44
5377: PPUSH
5378: CALL_OW 119
5382: GO 5365
5384: POP
5385: POP
// units := cornel_units union Cornel ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_EXP 6
5395: PUSH
5396: LD_EXP 44
5400: UNION
5401: ST_TO_ADDR
// repeat wait ( 1 ) ;
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 67
// for i in units do
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_VAR 0 3
5418: PUSH
5419: FOR_IN
5420: IFFALSE 5453
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5422: LD_VAR 0 2
5426: PPUSH
5427: LD_EXP 37
5431: PPUSH
5432: CALL_OW 250
5436: PPUSH
5437: LD_EXP 37
5441: PPUSH
5442: CALL_OW 251
5446: PPUSH
5447: CALL_OW 111
5451: GO 5419
5453: POP
5454: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5455: LD_VAR 0 3
5459: PPUSH
5460: LD_INT 92
5462: PUSH
5463: LD_EXP 37
5467: PPUSH
5468: CALL_OW 250
5472: PUSH
5473: LD_EXP 37
5477: PPUSH
5478: CALL_OW 251
5482: PUSH
5483: LD_INT 10
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL_OW 72
5496: PUSH
5497: LD_VAR 0 3
5501: EQUAL
5502: IFFALSE 5402
// for i in units do
5504: LD_ADDR_VAR 0 2
5508: PUSH
5509: LD_VAR 0 3
5513: PUSH
5514: FOR_IN
5515: IFFALSE 5533
// ComTurnUnit ( i , JMM ) ;
5517: LD_VAR 0 2
5521: PPUSH
5522: LD_EXP 37
5526: PPUSH
5527: CALL_OW 119
5531: GO 5514
5533: POP
5534: POP
// ComTurnUnit ( Cornel , JMM ) ;
5535: LD_EXP 44
5539: PPUSH
5540: LD_EXP 37
5544: PPUSH
5545: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5549: LD_EXP 37
5553: PPUSH
5554: LD_STRING D1-JMM-1
5556: PPUSH
5557: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_STRING D1-Corn-1
5568: PPUSH
5569: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_EXP 44
5582: PPUSH
5583: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5587: LD_EXP 44
5591: PPUSH
5592: LD_EXP 37
5596: PPUSH
5597: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5601: LD_INT 35
5603: PPUSH
5604: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5608: LD_EXP 37
5612: PPUSH
5613: LD_EXP 44
5617: PPUSH
5618: CALL_OW 296
5622: PUSH
5623: LD_INT 6
5625: LESS
5626: IFFALSE 5601
// ChangeSideFog ( 4 , 1 ) ;
5628: LD_INT 4
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5638: LD_EXP 37
5642: PPUSH
5643: LD_EXP 44
5647: PPUSH
5648: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5652: LD_EXP 44
5656: PPUSH
5657: LD_EXP 37
5661: PPUSH
5662: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5666: LD_EXP 37
5670: PPUSH
5671: LD_STRING D1-JMM-2
5673: PPUSH
5674: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5678: LD_EXP 37
5682: PPUSH
5683: LD_STRING D1-JMM-2a
5685: PPUSH
5686: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5690: LD_EXP 44
5694: PPUSH
5695: LD_STRING D1-Corn-2
5697: PPUSH
5698: CALL_OW 88
// if bierezov_exist or debug then
5702: LD_EXP 7
5706: PUSH
5707: LD_EXP 1
5711: OR
5712: IFFALSE 5953
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_EXP 45
5723: PPUSH
5724: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5728: LD_INT 10
5730: PPUSH
5731: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5735: LD_EXP 44
5739: PPUSH
5740: LD_STRING D1a-Corn-1
5742: PPUSH
5743: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5747: LD_EXP 37
5751: PPUSH
5752: LD_EXP 45
5756: PPUSH
5757: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5761: LD_EXP 45
5765: PPUSH
5766: LD_EXP 37
5770: PPUSH
5771: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5775: LD_EXP 37
5779: PPUSH
5780: LD_STRING D1a-JMM-1
5782: PPUSH
5783: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5787: LD_EXP 37
5791: PPUSH
5792: LD_EXP 44
5796: PPUSH
5797: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5801: LD_EXP 44
5805: PPUSH
5806: LD_EXP 37
5810: PPUSH
5811: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5815: LD_EXP 44
5819: PPUSH
5820: LD_STRING D1a-Corn-2
5822: PPUSH
5823: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5827: LD_EXP 37
5831: PPUSH
5832: LD_STRING D1a-JMM-2
5834: PPUSH
5835: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-3
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-3
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-4
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-4
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-5
5894: PPUSH
5895: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5899: LD_EXP 45
5903: PPUSH
5904: LD_EXP 44
5908: PPUSH
5909: CALL_OW 250
5913: PPUSH
5914: LD_EXP 44
5918: PPUSH
5919: CALL_OW 251
5923: PUSH
5924: LD_INT 2
5926: MINUS
5927: PPUSH
5928: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5932: LD_EXP 45
5936: PPUSH
5937: LD_EXP 44
5941: PPUSH
5942: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5946: LD_INT 10
5948: PPUSH
5949: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5953: LD_EXP 37
5957: PPUSH
5958: LD_STRING D1b-JMM-1
5960: PPUSH
5961: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5965: LD_EXP 44
5969: PPUSH
5970: LD_STRING D1b-Corn-1
5972: PPUSH
5973: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-2
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-2
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-3
6008: PPUSH
6009: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6013: LD_INT 10
6015: PPUSH
6016: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6020: LD_EXP 46
6024: PPUSH
6025: LD_STRING D1b-Pow-3
6027: PPUSH
6028: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6032: LD_EXP 37
6036: PPUSH
6037: LD_STRING D1b-JMM-4
6039: PPUSH
6040: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6044: LD_EXP 44
6048: PPUSH
6049: LD_STRING D1b-Corn-4
6051: PPUSH
6052: CALL_OW 88
// if Khatam then
6056: LD_EXP 41
6060: IFFALSE 6076
// Say ( Khatam , D1b-Khat-4 ) else
6062: LD_EXP 41
6066: PPUSH
6067: LD_STRING D1b-Khat-4
6069: PPUSH
6070: CALL_OW 88
6074: GO 6112
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6076: LD_EXP 6
6080: PPUSH
6081: LD_INT 26
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 72
6095: PUSH
6096: LD_EXP 44
6100: PUSH
6101: EMPTY
6102: LIST
6103: DIFF
6104: PPUSH
6105: LD_STRING D1b-Sol1-4
6107: PPUSH
6108: CALL 577 0 2
// if Cyrus then
6112: LD_EXP 39
6116: IFFALSE 6130
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6118: LD_EXP 39
6122: PPUSH
6123: LD_STRING D1b-Cyrus-4
6125: PPUSH
6126: CALL_OW 88
// if Lisa then
6130: LD_EXP 40
6134: IFFALSE 6192
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6136: LD_EXP 40
6140: PPUSH
6141: LD_STRING D1b-Lisa-4
6143: PPUSH
6144: CALL_OW 88
// if Cyrus then
6148: LD_EXP 39
6152: IFFALSE 6192
// begin if not IsInUnit ( Cyrus ) then
6154: LD_EXP 39
6158: PPUSH
6159: CALL_OW 310
6163: NOT
6164: IFFALSE 6180
// ComTurnUnit ( Cyrus , Lisa ) ;
6166: LD_EXP 39
6170: PPUSH
6171: LD_EXP 40
6175: PPUSH
6176: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6180: LD_EXP 39
6184: PPUSH
6185: LD_STRING D1b-Cyrus-5
6187: PPUSH
6188: CALL_OW 88
// end ; end ; SelectGroup ;
6192: CALL 2649 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6196: LD_EXP 37
6200: PPUSH
6201: LD_STRING D1d-JMM-1
6203: PPUSH
6204: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6208: LD_EXP 44
6212: PPUSH
6213: LD_STRING D1d-Corn-1
6215: PPUSH
6216: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6220: LD_ADDR_VAR 0 2
6224: PUSH
6225: LD_EXP 4
6229: PUSH
6230: LD_EXP 6
6234: ADD
6235: PUSH
6236: LD_EXP 37
6240: ADD
6241: PUSH
6242: FOR_IN
6243: IFFALSE 6256
// ComHold ( i ) ;
6245: LD_VAR 0 2
6249: PPUSH
6250: CALL_OW 140
6254: GO 6242
6256: POP
6257: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6258: LD_ADDR_VAR 0 4
6262: PUSH
6263: LD_INT 22
6265: PUSH
6266: LD_INT 1
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 21
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: ST_TO_ADDR
// if vehicles then
6292: LD_VAR 0 4
6296: IFFALSE 6634
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6298: LD_EXP 6
6302: PPUSH
6303: LD_INT 55
6305: PUSH
6306: EMPTY
6307: LIST
6308: PPUSH
6309: CALL_OW 72
6313: IFFALSE 6352
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6315: LD_ADDR_VAR 0 2
6319: PUSH
6320: LD_EXP 6
6324: PPUSH
6325: LD_INT 55
6327: PUSH
6328: EMPTY
6329: LIST
6330: PPUSH
6331: CALL_OW 72
6335: PUSH
6336: FOR_IN
6337: IFFALSE 6350
// ComExitVehicle ( i ) ;
6339: LD_VAR 0 2
6343: PPUSH
6344: CALL_OW 121
6348: GO 6336
6350: POP
6351: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6352: LD_ADDR_VAR 0 5
6356: PUSH
6357: LD_VAR 0 4
6361: PPUSH
6362: LD_INT 34
6364: PUSH
6365: LD_INT 51
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PPUSH
6372: CALL_OW 72
6376: ST_TO_ADDR
// if cargos then
6377: LD_VAR 0 5
6381: IFFALSE 6564
// begin vehicles := cargos ;
6383: LD_ADDR_VAR 0 4
6387: PUSH
6388: LD_VAR 0 5
6392: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_STRING 02_resources_4
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 30
6408: ST_TO_ADDR
// if debug and not resources then
6409: LD_EXP 1
6413: PUSH
6414: LD_VAR 0 6
6418: NOT
6419: AND
6420: IFFALSE 6430
// resources := 160 ;
6422: LD_ADDR_VAR 0 6
6426: PUSH
6427: LD_INT 160
6429: ST_TO_ADDR
// if resources mod 10 then
6430: LD_VAR 0 6
6434: PUSH
6435: LD_INT 10
6437: MOD
6438: IFFALSE 6460
// resources := resources - resources mod 10 ;
6440: LD_ADDR_VAR 0 6
6444: PUSH
6445: LD_VAR 0 6
6449: PUSH
6450: LD_VAR 0 6
6454: PUSH
6455: LD_INT 10
6457: MOD
6458: MINUS
6459: ST_TO_ADDR
// if resources then
6460: LD_VAR 0 6
6464: IFFALSE 6564
// for i in cargos do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: LD_VAR 0 5
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6562
// begin if resources < 100 then
6479: LD_VAR 0 6
6483: PUSH
6484: LD_INT 100
6486: LESS
6487: IFFALSE 6509
// begin cargo := resources ;
6489: LD_ADDR_VAR 0 7
6493: PUSH
6494: LD_VAR 0 6
6498: ST_TO_ADDR
// resources := 0 ;
6499: LD_ADDR_VAR 0 6
6503: PUSH
6504: LD_INT 0
6506: ST_TO_ADDR
// end else
6507: GO 6531
// begin cargo := 100 ;
6509: LD_ADDR_VAR 0 7
6513: PUSH
6514: LD_INT 100
6516: ST_TO_ADDR
// resources := resources - 100 ;
6517: LD_ADDR_VAR 0 6
6521: PUSH
6522: LD_VAR 0 6
6526: PUSH
6527: LD_INT 100
6529: MINUS
6530: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6531: LD_VAR 0 2
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_VAR 0 7
6543: PPUSH
6544: CALL_OW 290
// if resources = 0 then
6548: LD_VAR 0 6
6552: PUSH
6553: LD_INT 0
6555: EQUAL
6556: IFFALSE 6560
// break ;
6558: GO 6562
// end ;
6560: GO 6476
6562: POP
6563: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6564: LD_VAR 0 4
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: CALL_OW 311
6577: PPUSH
6578: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6582: LD_VAR 0 4
6586: PUSH
6587: LD_INT 1
6589: ARRAY
6590: PPUSH
6591: LD_INT 4
6593: PPUSH
6594: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6598: LD_EXP 44
6602: PPUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 1
6610: ARRAY
6611: PPUSH
6612: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6616: LD_INT 35
6618: PPUSH
6619: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6623: LD_EXP 44
6627: PPUSH
6628: CALL_OW 310
6632: IFFALSE 6616
// end ; InGameOff ;
6634: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6638: LD_STRING M1
6640: PPUSH
6641: CALL_OW 337
// SaveForQuickRestart ;
6645: CALL_OW 22
// cornel_active := true ;
6649: LD_ADDR_EXP 8
6653: PUSH
6654: LD_INT 1
6656: ST_TO_ADDR
// end ;
6657: LD_VAR 0 1
6661: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6662: LD_EXP 37
6666: PPUSH
6667: LD_EXP 47
6671: PPUSH
6672: CALL_OW 296
6676: PUSH
6677: LD_INT 10
6679: LESS
6680: IFFALSE 8063
6682: GO 6684
6684: DISABLE
6685: LD_INT 0
6687: PPUSH
6688: PPUSH
6689: PPUSH
6690: PPUSH
6691: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 89
6699: PUSH
6700: LD_INT 34
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 138
6709: PUSH
6710: LD_INT 63
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 196
6719: PUSH
6720: LD_INT 84
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 135
6729: PUSH
6730: LD_INT 52
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 103
6739: PUSH
6740: LD_INT 39
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 58
6749: PUSH
6750: LD_INT 30
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 38
6759: PUSH
6760: LD_INT 51
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: ST_TO_ADDR
// Video ( true ) ;
6776: LD_INT 1
6778: PPUSH
6779: CALL 69467 0 1
// if jmm_units then
6783: LD_EXP 4
6787: IFFALSE 6863
// for i in jmm_units do
6789: LD_ADDR_VAR 0 1
6793: PUSH
6794: LD_EXP 4
6798: PUSH
6799: FOR_IN
6800: IFFALSE 6861
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6802: LD_VAR 0 1
6806: PPUSH
6807: LD_EXP 37
6811: PPUSH
6812: CALL_OW 296
6816: PUSH
6817: LD_INT 10
6819: LESS
6820: PUSH
6821: LD_VAR 0 1
6825: PPUSH
6826: CALL_OW 310
6830: NOT
6831: AND
6832: IFFALSE 6850
// ComTurnUnit ( i , JMM ) else
6834: LD_VAR 0 1
6838: PPUSH
6839: LD_EXP 37
6843: PPUSH
6844: CALL_OW 119
6848: GO 6859
// ComHold ( i ) ;
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 140
// end ;
6859: GO 6799
6861: POP
6862: POP
// if IsInUnit ( JMM ) then
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 310
6872: IFFALSE 6897
// begin ComExitVehicle ( JMM ) ;
6874: LD_EXP 37
6878: PPUSH
6879: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6883: LD_EXP 37
6887: PPUSH
6888: LD_EXP 47
6892: PPUSH
6893: CALL_OW 172
// end ; Wait ( 10 ) ;
6897: LD_INT 10
6899: PPUSH
6900: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6904: LD_EXP 37
6908: PPUSH
6909: LD_EXP 47
6913: PPUSH
6914: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6918: LD_INT 35
6920: PPUSH
6921: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6925: LD_EXP 37
6929: PPUSH
6930: LD_EXP 47
6934: PPUSH
6935: CALL_OW 296
6939: PUSH
6940: LD_INT 6
6942: LESS
6943: IFFALSE 6918
// ComTurnUnit ( JMM , Lynch ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_EXP 47
6954: PPUSH
6955: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6959: LD_ADDR_VAR 0 1
6963: PUSH
6964: LD_EXP 47
6968: PUSH
6969: LD_EXP 48
6973: PUSH
6974: LD_EXP 49
6978: PUSH
6979: LD_EXP 50
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7009
// ComTurnUnit ( i , JMM ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: LD_EXP 37
7002: PPUSH
7003: CALL_OW 119
7007: GO 6990
7009: POP
7010: POP
// Wait ( 0 0$0.3 ) ;
7011: LD_INT 10
7013: PPUSH
7014: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7018: LD_EXP 37
7022: PPUSH
7023: LD_STRING D2-JMM-1
7025: PPUSH
7026: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7030: LD_EXP 47
7034: PPUSH
7035: LD_STRING D2-Sol1-1
7037: PPUSH
7038: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-2
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-2
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-3
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-3
7085: PPUSH
7086: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: LD_INT 22
7097: PUSH
7098: LD_INT 8
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PPUSH
7105: CALL_OW 69
7109: PUSH
7110: FOR_IN
7111: IFFALSE 7127
// SetSide ( i , 1 ) ;
7113: LD_VAR 0 1
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: CALL_OW 235
7125: GO 7110
7127: POP
7128: POP
// Say ( JMM , D2-JMM-4 ) ;
7129: LD_EXP 37
7133: PPUSH
7134: LD_STRING D2-JMM-4
7136: PPUSH
7137: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7141: LD_INT 1
7143: PPUSH
7144: LD_INT 5
7146: PPUSH
7147: CALL_OW 332
// for i = 1 to points do
7151: LD_ADDR_VAR 0 1
7155: PUSH
7156: DOUBLE
7157: LD_INT 1
7159: DEC
7160: ST_TO_ADDR
7161: LD_VAR 0 2
7165: PUSH
7166: FOR_TO
7167: IFFALSE 7342
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7169: LD_VAR 0 2
7173: PUSH
7174: LD_VAR 0 1
7178: ARRAY
7179: PUSH
7180: LD_INT 1
7182: ARRAY
7183: PPUSH
7184: LD_VAR 0 2
7188: PUSH
7189: LD_VAR 0 1
7193: ARRAY
7194: PUSH
7195: LD_INT 2
7197: ARRAY
7198: PPUSH
7199: CALL_OW 84
// if i = 1 then
7203: LD_VAR 0 1
7207: PUSH
7208: LD_INT 1
7210: EQUAL
7211: IFFALSE 7225
// Say ( Lynch , D2-Sol1-4 ) ;
7213: LD_EXP 47
7217: PPUSH
7218: LD_STRING D2-Sol1-4
7220: PPUSH
7221: CALL_OW 88
// if i = 2 then
7225: LD_VAR 0 1
7229: PUSH
7230: LD_INT 2
7232: EQUAL
7233: IFFALSE 7247
// Say ( JMM , D2-JMM-5 ) ;
7235: LD_EXP 37
7239: PPUSH
7240: LD_STRING D2-JMM-5
7242: PPUSH
7243: CALL_OW 88
// if i = 4 then
7247: LD_VAR 0 1
7251: PUSH
7252: LD_INT 4
7254: EQUAL
7255: IFFALSE 7279
// begin RevealFogArea ( 1 , troopsArea ) ;
7257: LD_INT 1
7259: PPUSH
7260: LD_INT 6
7262: PPUSH
7263: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7267: LD_EXP 47
7271: PPUSH
7272: LD_STRING D2-Sol1-5
7274: PPUSH
7275: CALL_OW 88
// end ; if i = 5 then
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 5
7286: EQUAL
7287: IFFALSE 7301
// Say ( JMM , D2-JMM-6 ) ;
7289: LD_EXP 37
7293: PPUSH
7294: LD_STRING D2-JMM-6
7296: PPUSH
7297: CALL_OW 88
// if i = 7 then
7301: LD_VAR 0 1
7305: PUSH
7306: LD_INT 7
7308: EQUAL
7309: IFFALSE 7333
// begin RevealFogArea ( 1 , forestArea ) ;
7311: LD_INT 1
7313: PPUSH
7314: LD_INT 7
7316: PPUSH
7317: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7321: LD_EXP 47
7325: PPUSH
7326: LD_STRING D2-Sol1-6
7328: PPUSH
7329: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7333: LD_INT 46
7335: PPUSH
7336: CALL_OW 67
// end ;
7340: GO 7166
7342: POP
7343: POP
// CenterNowOnUnits ( JMM ) ;
7344: LD_EXP 37
7348: PPUSH
7349: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7353: LD_EXP 37
7357: PPUSH
7358: LD_STRING D2-JMM-7
7360: PPUSH
7361: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7365: LD_EXP 47
7369: PPUSH
7370: LD_STRING D2-Sol1-7
7372: PPUSH
7373: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-8
7384: PPUSH
7385: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7389: LD_ADDR_VAR 0 4
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_INT 1
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 30
7406: PUSH
7407: LD_INT 31
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 69
7422: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7423: LD_EXP 47
7427: PPUSH
7428: LD_VAR 0 4
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7441: LD_INT 65
7443: PPUSH
7444: LD_INT 101
7446: PPUSH
7447: CALL_OW 428
7451: IFFALSE 7474
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7453: LD_INT 65
7455: PPUSH
7456: LD_INT 101
7458: PPUSH
7459: CALL_OW 428
7463: PPUSH
7464: LD_INT 75
7466: PPUSH
7467: LD_INT 100
7469: PPUSH
7470: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7474: LD_INT 66
7476: PPUSH
7477: LD_INT 103
7479: PPUSH
7480: CALL_OW 428
7484: IFFALSE 7507
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7486: LD_INT 66
7488: PPUSH
7489: LD_INT 103
7491: PPUSH
7492: CALL_OW 428
7496: PPUSH
7497: LD_INT 75
7499: PPUSH
7500: LD_INT 100
7502: PPUSH
7503: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7507: LD_ADDR_VAR 0 5
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 1
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 21
7524: PUSH
7525: LD_INT 2
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 91
7534: PUSH
7535: LD_EXP 37
7539: PUSH
7540: LD_INT 7
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 69
7557: ST_TO_ADDR
// if tmp then
7558: LD_VAR 0 5
7562: IFFALSE 7579
// ComMoveXY ( tmp , 75 , 100 ) ;
7564: LD_VAR 0 5
7568: PPUSH
7569: LD_INT 75
7571: PPUSH
7572: LD_INT 100
7574: PPUSH
7575: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7579: LD_ADDR_VAR 0 3
7583: PUSH
7584: LD_EXP 4
7588: PPUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 1
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PPUSH
7599: CALL_OW 72
7603: PPUSH
7604: LD_EXP 37
7608: PPUSH
7609: CALL_OW 74
7613: ST_TO_ADDR
// if sol then
7614: LD_VAR 0 3
7618: IFFALSE 7678
// if GetDistUnits ( JMM , sol ) < 10 then
7620: LD_EXP 37
7624: PPUSH
7625: LD_VAR 0 3
7629: PPUSH
7630: CALL_OW 296
7634: PUSH
7635: LD_INT 10
7637: LESS
7638: IFFALSE 7678
// begin if IsInUnit ( sol ) then
7640: LD_VAR 0 3
7644: PPUSH
7645: CALL_OW 310
7649: IFFALSE 7660
// ComExitVehicle ( sol ) ;
7651: LD_VAR 0 3
7655: PPUSH
7656: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7660: LD_VAR 0 3
7664: PPUSH
7665: LD_VAR 0 4
7669: PUSH
7670: LD_INT 2
7672: ARRAY
7673: PPUSH
7674: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7678: LD_INT 10
7680: PPUSH
7681: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7685: LD_EXP 37
7689: PPUSH
7690: LD_INT 65
7692: PPUSH
7693: LD_INT 101
7695: PPUSH
7696: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7700: LD_EXP 37
7704: PPUSH
7705: LD_INT 63
7707: PPUSH
7708: LD_INT 100
7710: PPUSH
7711: CALL_OW 178
// tmp := 0 0$0 ;
7715: LD_ADDR_VAR 0 5
7719: PUSH
7720: LD_INT 0
7722: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7723: LD_INT 35
7725: PPUSH
7726: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7730: LD_ADDR_VAR 0 5
7734: PUSH
7735: LD_VAR 0 5
7739: PUSH
7740: LD_INT 35
7742: PLUS
7743: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7744: LD_EXP 37
7748: PPUSH
7749: LD_INT 65
7751: PPUSH
7752: LD_INT 101
7754: PPUSH
7755: CALL_OW 307
7759: PUSH
7760: LD_VAR 0 5
7764: PUSH
7765: LD_INT 175
7767: GREATER
7768: OR
7769: IFFALSE 7723
// Say ( JMM , D2a-JMM-1 ) ;
7771: LD_EXP 37
7775: PPUSH
7776: LD_STRING D2a-JMM-1
7778: PPUSH
7779: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7783: LD_EXP 48
7787: PPUSH
7788: LD_INT 66
7790: PPUSH
7791: LD_INT 103
7793: PPUSH
7794: CALL_OW 111
// tmp := 0 0$0 ;
7798: LD_ADDR_VAR 0 5
7802: PUSH
7803: LD_INT 0
7805: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7806: LD_INT 35
7808: PPUSH
7809: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7813: LD_EXP 48
7817: PPUSH
7818: LD_INT 66
7820: PPUSH
7821: LD_INT 103
7823: PPUSH
7824: CALL_OW 307
7828: PUSH
7829: LD_VAR 0 5
7833: PUSH
7834: LD_INT 175
7836: GREATER
7837: OR
7838: IFFALSE 7806
// ComTurnUnit ( Walker , JMM ) ;
7840: LD_EXP 48
7844: PPUSH
7845: LD_EXP 37
7849: PPUSH
7850: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7854: LD_EXP 48
7858: PPUSH
7859: LD_STRING D2a-Sci1-1
7861: PPUSH
7862: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7866: LD_EXP 37
7870: PPUSH
7871: LD_EXP 48
7875: PPUSH
7876: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7880: LD_EXP 37
7884: PPUSH
7885: LD_STRING D2a-JMM-2
7887: PPUSH
7888: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7892: LD_EXP 48
7896: PPUSH
7897: LD_STRING D2a-Sci1-2
7899: PPUSH
7900: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-3
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-3
7923: PPUSH
7924: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7928: LD_ADDR_EXP 4
7932: PUSH
7933: LD_EXP 4
7937: PUSH
7938: LD_EXP 47
7942: PUSH
7943: LD_EXP 48
7947: PUSH
7948: LD_EXP 49
7952: PUSH
7953: LD_EXP 50
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: ADD
7964: ST_TO_ADDR
// for i in jmm_units do
7965: LD_ADDR_VAR 0 1
7969: PUSH
7970: LD_EXP 4
7974: PUSH
7975: FOR_IN
7976: IFFALSE 8001
// if not IsInUnit ( i ) then
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 310
7987: NOT
7988: IFFALSE 7999
// ComFree ( i ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 139
7999: GO 7975
8001: POP
8002: POP
// Video ( false ) ;
8003: LD_INT 0
8005: PPUSH
8006: CALL 69467 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8010: LD_STRING MSolar1
8012: PPUSH
8013: CALL_OW 337
// jmm_on_west := true ;
8017: LD_ADDR_EXP 5
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8025: LD_INT 1050
8027: PPUSH
8028: CALL_OW 67
// frank_can_return := true ;
8032: LD_ADDR_EXP 12
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8040: LD_INT 6300
8042: PPUSH
8043: LD_INT 8400
8045: PPUSH
8046: CALL_OW 12
8050: PPUSH
8051: CALL_OW 67
// send_spec_patrol := true ;
8055: LD_ADDR_EXP 30
8059: PUSH
8060: LD_INT 1
8062: ST_TO_ADDR
// end ;
8063: PPOPN 5
8065: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8066: LD_INT 22
8068: PUSH
8069: LD_INT 1
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 34
8078: PUSH
8079: LD_INT 51
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 92
8088: PUSH
8089: LD_INT 63
8091: PUSH
8092: LD_INT 100
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: PPUSH
8112: CALL_OW 69
8116: PUSH
8117: LD_EXP 5
8121: NOT
8122: AND
8123: IFFALSE 8236
8125: GO 8127
8127: DISABLE
8128: LD_INT 0
8130: PPUSH
8131: PPUSH
// begin enable ;
8132: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8133: LD_ADDR_VAR 0 2
8137: PUSH
8138: LD_INT 22
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 34
8150: PUSH
8151: LD_INT 51
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 92
8160: PUSH
8161: LD_INT 63
8163: PUSH
8164: LD_INT 100
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: ST_TO_ADDR
// if not filter then
8189: LD_VAR 0 2
8193: NOT
8194: IFFALSE 8198
// exit ;
8196: GO 8236
// for i in filter do
8198: LD_ADDR_VAR 0 1
8202: PUSH
8203: LD_VAR 0 2
8207: PUSH
8208: FOR_IN
8209: IFFALSE 8234
// begin SetFuel ( i , 0 ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 0
8218: PPUSH
8219: CALL_OW 240
// ComStop ( i ) ;
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 141
// end ;
8232: GO 8208
8234: POP
8235: POP
// end ;
8236: PPOPN 2
8238: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8239: LD_EXP 30
8243: IFFALSE 9340
8245: GO 8247
8247: DISABLE
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
8255: PPUSH
8256: PPUSH
// begin if not ru_spec_patrol then
8257: LD_EXP 54
8261: NOT
8262: IFFALSE 8266
// exit ;
8264: GO 9340
// dead1 := false ;
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_INT 0
8273: ST_TO_ADDR
// dead2 := false ;
8274: LD_ADDR_VAR 0 2
8278: PUSH
8279: LD_INT 0
8281: ST_TO_ADDR
// inarea1 := false ;
8282: LD_ADDR_VAR 0 3
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// inarea2 := false ;
8290: LD_ADDR_VAR 0 4
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// tmp := [ ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: EMPTY
8304: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8305: LD_EXP 54
8309: PPUSH
8310: LD_INT 75
8312: PPUSH
8313: LD_INT 101
8315: PPUSH
8316: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8320: LD_INT 35
8322: PPUSH
8323: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) ;
8327: LD_INT 1
8329: PPUSH
8330: LD_EXP 54
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: CALL_OW 292
8343: IFFALSE 8320
// ComStop ( ru_spec_patrol ) ;
8345: LD_EXP 54
8349: PPUSH
8350: CALL_OW 141
// Wait ( 0 0$02 ) ;
8354: LD_INT 70
8356: PPUSH
8357: CALL_OW 67
// DialogueOn ;
8361: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8365: LD_EXP 54
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_STRING D8-Rus1-1
8376: PPUSH
8377: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8381: LD_EXP 37
8385: PPUSH
8386: LD_STRING D8-JMM-1
8388: PPUSH
8389: CALL_OW 88
// DialogueOff ;
8393: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8397: LD_EXP 54
8401: PPUSH
8402: LD_INT 13
8404: PPUSH
8405: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8409: LD_INT 35
8411: PPUSH
8412: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8416: LD_VAR 0 1
8420: NOT
8421: PUSH
8422: LD_EXP 54
8426: PUSH
8427: LD_INT 1
8429: ARRAY
8430: PPUSH
8431: CALL_OW 301
8435: AND
8436: IFFALSE 8446
// dead1 := true ;
8438: LD_ADDR_VAR 0 1
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8446: LD_VAR 0 2
8450: NOT
8451: PUSH
8452: LD_EXP 54
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 301
8465: AND
8466: IFFALSE 8476
// dead2 := true ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8476: LD_VAR 0 3
8480: NOT
8481: PUSH
8482: LD_EXP 54
8486: PUSH
8487: LD_INT 1
8489: ARRAY
8490: PPUSH
8491: LD_INT 14
8493: PPUSH
8494: CALL_OW 308
8498: AND
8499: IFFALSE 8509
// inarea1 := true ;
8501: LD_ADDR_VAR 0 3
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8509: LD_VAR 0 4
8513: NOT
8514: PUSH
8515: LD_EXP 54
8519: PUSH
8520: LD_INT 2
8522: ARRAY
8523: PPUSH
8524: LD_INT 14
8526: PPUSH
8527: CALL_OW 308
8531: AND
8532: IFFALSE 8542
// inarea2 := true ;
8534: LD_ADDR_VAR 0 4
8538: PUSH
8539: LD_INT 1
8541: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8542: LD_VAR 0 1
8546: PUSH
8547: LD_VAR 0 2
8551: AND
8552: PUSH
8553: LD_VAR 0 1
8557: PUSH
8558: LD_VAR 0 4
8562: AND
8563: OR
8564: PUSH
8565: LD_VAR 0 2
8569: PUSH
8570: LD_VAR 0 3
8574: AND
8575: OR
8576: PUSH
8577: LD_VAR 0 3
8581: PUSH
8582: LD_VAR 0 4
8586: AND
8587: OR
8588: IFFALSE 8409
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: AND
8600: PUSH
8601: LD_VAR 0 1
8605: PUSH
8606: LD_VAR 0 4
8610: AND
8611: OR
8612: PUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_VAR 0 3
8622: AND
8623: OR
8624: IFFALSE 9320
// begin prepare_siege := true ;
8626: LD_ADDR_EXP 31
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// DialogueOn ;
8634: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_VAR 0 4
8647: AND
8648: IFFALSE 8664
// Say ( JMM , D8b-JMM-1a ) else
8650: LD_EXP 37
8654: PPUSH
8655: LD_STRING D8b-JMM-1a
8657: PPUSH
8658: CALL_OW 88
8662: GO 8676
// Say ( JMM , D8b-JMM-1 ) ;
8664: LD_EXP 37
8668: PPUSH
8669: LD_STRING D8b-JMM-1
8671: PPUSH
8672: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8676: LD_EXP 4
8680: PPUSH
8681: LD_INT 26
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 72
8695: PUSH
8696: LD_EXP 38
8700: PUSH
8701: LD_EXP 39
8705: PUSH
8706: LD_EXP 48
8710: PUSH
8711: LD_EXP 51
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: DIFF
8722: PPUSH
8723: LD_STRING D8b-Sol1-1
8725: PPUSH
8726: CALL 577 0 2
// if Cyrus and Cyrus in jmm_units then
8730: LD_EXP 39
8734: PUSH
8735: LD_EXP 39
8739: PUSH
8740: LD_EXP 4
8744: IN
8745: AND
8746: IFFALSE 8762
// Say ( Cyrus , D8b-Cyrus-1 ) else
8748: LD_EXP 39
8752: PPUSH
8753: LD_STRING D8b-Cyrus-1
8755: PPUSH
8756: CALL_OW 88
8760: GO 8774
// Say ( JMM , D8b-JMM-1a ) ;
8762: LD_EXP 37
8766: PPUSH
8767: LD_STRING D8b-JMM-1a
8769: PPUSH
8770: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8774: LD_EXP 40
8778: PUSH
8779: LD_EXP 40
8783: PUSH
8784: LD_EXP 4
8788: IN
8789: AND
8790: IFFALSE 8804
// Say ( Lisa , D8b-Lisa-2 ) ;
8792: LD_EXP 40
8796: PPUSH
8797: LD_STRING D8b-Lisa-2
8799: PPUSH
8800: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8804: LD_EXP 38
8808: PUSH
8809: LD_EXP 38
8813: PUSH
8814: LD_EXP 4
8818: IN
8819: AND
8820: IFFALSE 8836
// Say ( Bobby , D8b-Bobby-1 ) else
8822: LD_EXP 38
8826: PPUSH
8827: LD_STRING D8b-Bobby-1
8829: PPUSH
8830: CALL_OW 88
8834: GO 8896
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_EXP 4
8845: PPUSH
8846: LD_INT 26
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PPUSH
8856: CALL_OW 72
8860: PUSH
8861: LD_EXP 38
8865: PUSH
8866: LD_EXP 39
8870: PUSH
8871: LD_EXP 48
8875: PUSH
8876: LD_EXP 51
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: DIFF
8887: PPUSH
8888: LD_STRING D8b-Sol2-1
8890: PPUSH
8891: CALL 577 0 2
8895: ST_TO_ADDR
// DialogueOff ;
8896: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8900: LD_EXP 39
8904: PUSH
8905: LD_EXP 39
8909: PUSH
8910: LD_EXP 4
8914: IN
8915: AND
8916: IFFALSE 8941
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8918: LD_ADDR_VAR 0 6
8922: PUSH
8923: LD_VAR 0 6
8927: PPUSH
8928: LD_INT 1
8930: PPUSH
8931: LD_EXP 39
8935: PPUSH
8936: CALL_OW 2
8940: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8941: LD_EXP 38
8945: PUSH
8946: LD_EXP 38
8950: PUSH
8951: LD_EXP 4
8955: IN
8956: AND
8957: IFFALSE 8982
// tmp := Insert ( tmp , 1 , Bobby ) ;
8959: LD_ADDR_VAR 0 6
8963: PUSH
8964: LD_VAR 0 6
8968: PPUSH
8969: LD_INT 1
8971: PPUSH
8972: LD_EXP 38
8976: PPUSH
8977: CALL_OW 2
8981: ST_TO_ADDR
// if sol then
8982: LD_VAR 0 5
8986: IFFALSE 9011
// tmp := Insert ( tmp , 1 , sol ) ;
8988: LD_ADDR_VAR 0 6
8992: PUSH
8993: LD_VAR 0 6
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: LD_VAR 0 5
9005: PPUSH
9006: CALL_OW 2
9010: ST_TO_ADDR
// if tmp then
9011: LD_VAR 0 6
9015: IFFALSE 9279
// begin SetSide ( tmp , 8 ) ;
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 8
9024: PPUSH
9025: CALL_OW 235
// for i in tmp do
9029: LD_ADDR_VAR 0 7
9033: PUSH
9034: LD_VAR 0 6
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9131
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9042: LD_VAR 0 7
9046: PPUSH
9047: CALL_OW 310
9051: PUSH
9052: LD_VAR 0 7
9056: PPUSH
9057: CALL_OW 310
9061: PPUSH
9062: CALL_OW 266
9066: PUSH
9067: LD_INT 3
9069: EQUAL
9070: AND
9071: IFFALSE 9082
// ComExitBuilding ( i ) ;
9073: LD_VAR 0 7
9077: PPUSH
9078: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9082: LD_VAR 0 7
9086: PPUSH
9087: CALL_OW 310
9091: PUSH
9092: LD_VAR 0 7
9096: PPUSH
9097: CALL_OW 310
9101: PPUSH
9102: CALL_OW 266
9106: PUSH
9107: LD_INT 2
9109: EQUAL
9110: AND
9111: IFFALSE 9122
// ComExitVehicle ( i ) ;
9113: LD_VAR 0 7
9117: PPUSH
9118: CALL_OW 121
// wait ( 0 0$1 ) ;
9122: LD_INT 35
9124: PPUSH
9125: CALL_OW 67
// end ;
9129: GO 9039
9131: POP
9132: POP
// ComFree ( tmp ) ;
9133: LD_VAR 0 6
9137: PPUSH
9138: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9142: LD_VAR 0 6
9146: PPUSH
9147: LD_INT 15
9149: PPUSH
9150: CALL_OW 173
// AddComHold ( tmp ) ;
9154: LD_VAR 0 6
9158: PPUSH
9159: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9163: LD_INT 35
9165: PPUSH
9166: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9170: LD_VAR 0 6
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: CALL_OW 314
9183: NOT
9184: IFFALSE 9198
// ComMoveToArea ( tmp , cyrusEscape ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: LD_INT 15
9193: PPUSH
9194: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9198: LD_VAR 0 6
9202: PUSH
9203: LD_INT 1
9205: ARRAY
9206: PPUSH
9207: LD_INT 15
9209: PPUSH
9210: CALL_OW 308
9214: IFFALSE 9269
// begin RemoveUnit ( tmp [ 1 ] ) ;
9216: LD_VAR 0 6
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9229: LD_ADDR_EXP 4
9233: PUSH
9234: LD_EXP 4
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: DIFF
9248: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9249: LD_ADDR_VAR 0 6
9253: PUSH
9254: LD_VAR 0 6
9258: PUSH
9259: LD_VAR 0 6
9263: PUSH
9264: LD_INT 1
9266: ARRAY
9267: DIFF
9268: ST_TO_ADDR
// end ; until tmp = 0 ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 0
9276: EQUAL
9277: IFFALSE 9163
// end ; wait ( 0 0$30 ) ;
9279: LD_INT 1050
9281: PPUSH
9282: CALL_OW 67
// if ru_spec_patrol then
9286: LD_EXP 54
9290: IFFALSE 9318
// for i in ru_spec_patrol do
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_EXP 54
9301: PUSH
9302: FOR_IN
9303: IFFALSE 9316
// RemoveUnit ( i ) ;
9305: LD_VAR 0 7
9309: PPUSH
9310: CALL_OW 64
9314: GO 9302
9316: POP
9317: POP
// end else
9318: GO 9340
// begin prepare_siege := false ;
9320: LD_ADDR_EXP 31
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9328: LD_EXP 37
9332: PPUSH
9333: LD_STRING D8a-JMM-1
9335: PPUSH
9336: CALL_OW 88
// end ; end ;
9340: PPOPN 7
9342: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9343: LD_EXP 12
9347: IFFALSE 10567
9349: GO 9351
9351: DISABLE
9352: LD_INT 0
9354: PPUSH
9355: PPUSH
9356: PPUSH
// begin uc_side := 8 ;
9357: LD_ADDR_OWVAR 20
9361: PUSH
9362: LD_INT 8
9364: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9365: LD_ADDR_VAR 0 3
9369: PUSH
9370: LD_INT 59
9372: PUSH
9373: LD_INT 71
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 122
9382: PUSH
9383: LD_INT 117
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9394: LD_ADDR_EXP 51
9398: PUSH
9399: LD_STRING Frank
9401: PPUSH
9402: LD_INT 0
9404: PPUSH
9405: LD_STRING 
9407: PPUSH
9408: CALL 33625 0 3
9412: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9413: LD_ADDR_VAR 0 1
9417: PUSH
9418: LD_INT 1
9420: PPUSH
9421: LD_INT 2
9423: PPUSH
9424: CALL_OW 12
9428: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9429: LD_EXP 51
9433: PPUSH
9434: LD_VAR 0 3
9438: PUSH
9439: LD_VAR 0 1
9443: ARRAY
9444: PUSH
9445: LD_INT 1
9447: ARRAY
9448: PPUSH
9449: LD_VAR 0 3
9453: PUSH
9454: LD_VAR 0 1
9458: ARRAY
9459: PUSH
9460: LD_INT 2
9462: ARRAY
9463: PPUSH
9464: LD_INT 0
9466: PPUSH
9467: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9471: LD_EXP 51
9475: PPUSH
9476: LD_INT 1
9478: PPUSH
9479: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9483: LD_INT 35
9485: PPUSH
9486: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9490: LD_EXP 51
9494: PPUSH
9495: LD_EXP 37
9499: PPUSH
9500: CALL_OW 296
9504: PUSH
9505: LD_INT 8
9507: LESS
9508: PUSH
9509: LD_EXP 51
9513: PPUSH
9514: CALL_OW 256
9518: PUSH
9519: LD_INT 250
9521: GREATER
9522: AND
9523: IFFALSE 9483
// Video ( true ) ;
9525: LD_INT 1
9527: PPUSH
9528: CALL 69467 0 1
// CenterOnUnits ( JMM ) ;
9532: LD_EXP 37
9536: PPUSH
9537: CALL_OW 85
// if IsInUnit ( JMM ) then
9541: LD_EXP 37
9545: PPUSH
9546: CALL_OW 310
9550: IFFALSE 9561
// ComFree ( JMM ) ;
9552: LD_EXP 37
9556: PPUSH
9557: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9561: LD_EXP 37
9565: PPUSH
9566: LD_EXP 51
9570: PPUSH
9571: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9575: LD_EXP 51
9579: PPUSH
9580: LD_EXP 37
9584: PPUSH
9585: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9589: LD_EXP 37
9593: PPUSH
9594: LD_STRING D6-JMM-1
9596: PPUSH
9597: CALL_OW 88
// p := 0 ;
9601: LD_ADDR_VAR 0 2
9605: PUSH
9606: LD_INT 0
9608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9609: LD_INT 35
9611: PPUSH
9612: CALL_OW 67
// p := p + 1 ;
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_VAR 0 2
9625: PUSH
9626: LD_INT 1
9628: PLUS
9629: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9630: LD_EXP 37
9634: PPUSH
9635: LD_EXP 51
9639: PPUSH
9640: CALL_OW 296
9644: PUSH
9645: LD_INT 8
9647: LESS
9648: PUSH
9649: LD_VAR 0 2
9653: PUSH
9654: LD_INT 7
9656: GREATER
9657: OR
9658: IFFALSE 9609
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9660: LD_EXP 40
9664: PUSH
9665: LD_EXP 40
9669: PPUSH
9670: LD_EXP 51
9674: PPUSH
9675: CALL_OW 296
9679: PUSH
9680: LD_INT 20
9682: LESS
9683: AND
9684: IFFALSE 9709
// begin ComFree ( Lisa ) ;
9686: LD_EXP 40
9690: PPUSH
9691: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9695: LD_EXP 40
9699: PPUSH
9700: LD_EXP 51
9704: PPUSH
9705: CALL_OW 172
// end ; if Lynch then
9709: LD_EXP 47
9713: IFFALSE 9738
// begin ComFree ( Lynch ) ;
9715: LD_EXP 47
9719: PPUSH
9720: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9724: LD_EXP 47
9728: PPUSH
9729: LD_EXP 51
9733: PPUSH
9734: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9738: LD_EXP 37
9742: PPUSH
9743: LD_EXP 51
9747: PPUSH
9748: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9752: LD_EXP 51
9756: PPUSH
9757: LD_EXP 37
9761: PPUSH
9762: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9766: LD_EXP 51
9770: PPUSH
9771: LD_STRING D6-Frank-1
9773: PPUSH
9774: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9778: LD_INT 69
9780: PPUSH
9781: LD_INT 20
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 20
9789: NEG
9790: PPUSH
9791: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9795: LD_INT 69
9797: PPUSH
9798: LD_INT 20
9800: PPUSH
9801: LD_INT 1
9803: PPUSH
9804: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9808: LD_INT 190
9810: PPUSH
9811: LD_INT 31
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: LD_INT 20
9819: NEG
9820: PPUSH
9821: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9825: LD_INT 190
9827: PPUSH
9828: LD_INT 31
9830: PPUSH
9831: LD_INT 1
9833: PPUSH
9834: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9838: LD_INT 69
9840: PPUSH
9841: LD_INT 20
9843: PPUSH
9844: CALL_OW 84
// Wait ( 0 0$02 ) ;
9848: LD_INT 70
9850: PPUSH
9851: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9855: LD_EXP 37
9859: PPUSH
9860: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9864: LD_EXP 40
9868: PUSH
9869: LD_EXP 40
9873: PPUSH
9874: LD_EXP 51
9878: PPUSH
9879: CALL_OW 296
9883: PUSH
9884: LD_INT 20
9886: LESS
9887: AND
9888: PUSH
9889: LD_EXP 40
9893: PPUSH
9894: CALL_OW 302
9898: AND
9899: IFFALSE 10021
// begin ComFree ( Lisa ) ;
9901: LD_EXP 40
9905: PPUSH
9906: CALL_OW 139
// p := 0 ;
9910: LD_ADDR_VAR 0 2
9914: PUSH
9915: LD_INT 0
9917: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9918: LD_INT 35
9920: PPUSH
9921: CALL_OW 67
// p := p + 1 ;
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: LD_VAR 0 2
9934: PUSH
9935: LD_INT 1
9937: PLUS
9938: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9939: LD_EXP 40
9943: PPUSH
9944: LD_EXP 51
9948: PPUSH
9949: CALL_OW 296
9953: PUSH
9954: LD_INT 7
9956: LESS
9957: PUSH
9958: LD_VAR 0 2
9962: PUSH
9963: LD_INT 7
9965: GREATER
9966: OR
9967: IFFALSE 9918
// Say ( Lisa , D6-Lisa-1 ) ;
9969: LD_EXP 40
9973: PPUSH
9974: LD_STRING D6-Lisa-1
9976: PPUSH
9977: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
9981: LD_EXP 40
9985: PPUSH
9986: LD_EXP 51
9990: PPUSH
9991: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
9995: LD_EXP 51
9999: PPUSH
10000: LD_EXP 40
10004: PPUSH
10005: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10009: LD_EXP 51
10013: PPUSH
10014: LD_STRING D6-Frank-2
10016: PPUSH
10017: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10021: LD_EXP 47
10025: PUSH
10026: LD_EXP 47
10030: PPUSH
10031: LD_EXP 51
10035: PPUSH
10036: CALL_OW 296
10040: PUSH
10041: LD_INT 20
10043: LESS
10044: AND
10045: PUSH
10046: LD_EXP 47
10050: PPUSH
10051: CALL_OW 302
10055: AND
10056: IFFALSE 10237
// begin ComTurnUnit ( Lynch , JMM ) ;
10058: LD_EXP 47
10062: PPUSH
10063: LD_EXP 37
10067: PPUSH
10068: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10072: LD_EXP 51
10076: PPUSH
10077: LD_EXP 37
10081: PPUSH
10082: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10086: LD_EXP 47
10090: PPUSH
10091: LD_STRING D6-Sol1-2
10093: PPUSH
10094: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10098: LD_EXP 37
10102: PPUSH
10103: LD_STRING D6-JMM-2
10105: PPUSH
10106: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10110: LD_EXP 51
10114: PPUSH
10115: LD_STRING D6-Frank-3
10117: PPUSH
10118: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10122: LD_EXP 37
10126: PPUSH
10127: LD_STRING D6-JMM-3
10129: PPUSH
10130: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10134: LD_EXP 51
10138: PPUSH
10139: LD_STRING D6-Frank-4
10141: PPUSH
10142: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10146: LD_EXP 51
10150: PPUSH
10151: LD_STRING D6-Frank-4a
10153: PPUSH
10154: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10158: LD_EXP 37
10162: PPUSH
10163: LD_STRING D6-JMM-4
10165: PPUSH
10166: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10170: LD_EXP 51
10174: PPUSH
10175: LD_STRING D6-Frank-5
10177: PPUSH
10178: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10182: LD_EXP 40
10186: PUSH
10187: LD_EXP 40
10191: PPUSH
10192: CALL_OW 302
10196: AND
10197: IFFALSE 10211
// Say ( Lisa , D6-Lisa-5 ) ;
10199: LD_EXP 40
10203: PPUSH
10204: LD_STRING D6-Lisa-5
10206: PPUSH
10207: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10211: LD_EXP 51
10215: PPUSH
10216: LD_STRING D6-Frank-6
10218: PPUSH
10219: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10223: LD_EXP 37
10227: PPUSH
10228: LD_STRING D6-JMM-6
10230: PPUSH
10231: CALL_OW 88
// end else
10235: GO 10352
// begin ComTurnUnit ( Frank , JMM ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_EXP 37
10246: PPUSH
10247: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10251: LD_EXP 51
10255: PPUSH
10256: LD_STRING D6-Frank-4
10258: PPUSH
10259: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10263: LD_EXP 51
10267: PPUSH
10268: LD_STRING D6-Frank-4a
10270: PPUSH
10271: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10275: LD_EXP 37
10279: PPUSH
10280: LD_STRING D6-JMM-4
10282: PPUSH
10283: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10287: LD_EXP 51
10291: PPUSH
10292: LD_STRING D6-Frank-5
10294: PPUSH
10295: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10299: LD_EXP 40
10303: PUSH
10304: LD_EXP 40
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: IFFALSE 10328
// Say ( Lisa , D6-Lisa-5 ) ;
10316: LD_EXP 40
10320: PPUSH
10321: LD_STRING D6-Lisa-5
10323: PPUSH
10324: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10328: LD_EXP 51
10332: PPUSH
10333: LD_STRING D6-Frank-6
10335: PPUSH
10336: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10340: LD_EXP 37
10344: PPUSH
10345: LD_STRING D6-JMM-6
10347: PPUSH
10348: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10352: LD_STRING Q1
10354: PPUSH
10355: CALL_OW 97
10359: PUSH
10360: LD_INT 1
10362: DOUBLE
10363: EQUAL
10364: IFTRUE 10368
10366: GO 10379
10368: POP
// frank_send_to_scout := true ; 2 :
10369: LD_ADDR_EXP 15
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
10377: GO 10399
10379: LD_INT 2
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10398
10387: POP
// frank_send_to_scout := false ; end ;
10388: LD_ADDR_EXP 15
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
10396: GO 10399
10398: POP
// Video ( false ) ;
10399: LD_INT 0
10401: PPUSH
10402: CALL 69467 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10406: LD_EXP 37
10410: PUSH
10411: LD_EXP 40
10415: PUSH
10416: LD_EXP 47
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 139
// if frank_send_to_scout then
10430: LD_EXP 15
10434: IFFALSE 10488
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10436: LD_EXP 51
10440: PPUSH
10441: LD_INT 15
10443: PPUSH
10444: CALL_OW 113
// wait ( 0 0$01 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 67
// until not See ( 1 , Frank ) ;
10455: LD_INT 1
10457: PPUSH
10458: LD_EXP 51
10462: PPUSH
10463: CALL_OW 292
10467: NOT
10468: IFFALSE 10436
// wait ( 0 0$02 ) ;
10470: LD_INT 70
10472: PPUSH
10473: CALL_OW 67
// RemoveUnit ( Frank ) ;
10477: LD_EXP 51
10481: PPUSH
10482: CALL_OW 64
// end else
10486: GO 10500
// SetSide ( Frank , 1 ) ;
10488: LD_EXP 51
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 235
// send_attack_on_cornel_base := true ;
10500: LD_ADDR_EXP 26
10504: PUSH
10505: LD_INT 1
10507: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10508: LD_INT 35
10510: PPUSH
10511: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10515: LD_ADDR_EXP 29
10519: PUSH
10520: LD_EXP 29
10524: PPUSH
10525: LD_STRING -
10527: PPUSH
10528: CALL 1069 0 2
10532: ST_TO_ADDR
// if debug then
10533: LD_EXP 1
10537: IFFALSE 10549
// debug_strings := time_to_prepare ;
10539: LD_ADDR_OWVAR 48
10543: PUSH
10544: LD_EXP 29
10548: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10549: LD_EXP 29
10553: PUSH
10554: LD_INT 0
10556: EQUAL
10557: IFFALSE 10508
// cornel_prepared := true ;
10559: LD_ADDR_EXP 11
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// end ;
10567: PPOPN 3
10569: END
// every 0 0$01 trigger cornel_prepared do
10570: LD_EXP 11
10574: IFFALSE 10882
10576: GO 10578
10578: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10579: LD_EXP 44
10583: PPUSH
10584: LD_STRING D3-Corn-1
10586: PPUSH
10587: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10591: LD_STRING MOutWait
10593: PPUSH
10594: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10598: LD_INT 35
10600: PPUSH
10601: CALL_OW 67
// until cornel_counter = 0 ;
10605: LD_EXP 10
10609: PUSH
10610: LD_INT 0
10612: EQUAL
10613: IFFALSE 10598
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10615: LD_EXP 44
10619: PPUSH
10620: LD_STRING D3a-Corn-1
10622: PPUSH
10623: CALL_OW 94
// if IsOk ( Cornel ) then
10627: LD_EXP 44
10631: PPUSH
10632: CALL_OW 302
10636: IFFALSE 10650
// Say ( JMM , D3a-JMM-1 ) ;
10638: LD_EXP 37
10642: PPUSH
10643: LD_STRING D3a-JMM-1
10645: PPUSH
10646: CALL_OW 88
// end_mission_allowed := true ;
10650: LD_ADDR_EXP 21
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10658: LD_STRING M2
10660: PPUSH
10661: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10665: LD_INT 9
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 424
// Wait ( 0 0$05 ) ;
10675: LD_INT 175
10677: PPUSH
10678: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10682: LD_EXP 44
10686: PPUSH
10687: LD_STRING D3a-Corn-2
10689: PPUSH
10690: CALL_OW 94
// cornel_attack := true ;
10694: LD_ADDR_EXP 9
10698: PUSH
10699: LD_INT 1
10701: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10702: LD_INT 105
10704: PPUSH
10705: CALL_OW 67
// AddMoreTanks ( ) ;
10709: CALL 4920 0 0
// if frank_send_to_scout then
10713: LD_EXP 15
10717: IFFALSE 10882
// begin InitHc ;
10719: CALL_OW 19
// InitUc ;
10723: CALL_OW 18
// uc_side := 8 ;
10727: LD_ADDR_OWVAR 20
10731: PUSH
10732: LD_INT 8
10734: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10735: LD_ADDR_EXP 51
10739: PUSH
10740: LD_STRING Frank
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: LD_STRING 
10748: PPUSH
10749: CALL 33625 0 3
10753: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10754: LD_EXP 51
10758: PPUSH
10759: LD_INT 6
10761: PPUSH
10762: LD_INT 9
10764: PPUSH
10765: LD_INT 0
10767: PPUSH
10768: CALL_OW 48
// ComCrawl ( Frank ) ;
10772: LD_EXP 51
10776: PPUSH
10777: CALL_OW 137
// repeat wait ( 10 ) ;
10781: LD_INT 10
10783: PPUSH
10784: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10788: LD_EXP 37
10792: PPUSH
10793: LD_EXP 51
10797: PPUSH
10798: CALL_OW 296
10802: PUSH
10803: LD_INT 9
10805: LESS
10806: PUSH
10807: LD_INT 9
10809: PPUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 1
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 70
10824: OR
10825: IFFALSE 10781
// if IsDead ( Frank ) then
10827: LD_EXP 51
10831: PPUSH
10832: CALL_OW 301
10836: IFFALSE 10840
// exit ;
10838: GO 10882
// CenterOnUnits ( Frank ) ;
10840: LD_EXP 51
10844: PPUSH
10845: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10849: LD_EXP 51
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10861: LD_EXP 51
10865: PPUSH
10866: LD_STRING D6a-Frank-1
10868: PPUSH
10869: CALL_OW 88
// ComWalk ( Frank ) ;
10873: LD_EXP 51
10877: PPUSH
10878: CALL_OW 138
// end ; end ;
10882: END
// every 0 0$01 trigger solar_builded do
10883: LD_EXP 14
10887: IFFALSE 10991
10889: GO 10891
10891: DISABLE
// begin Wait ( 0 0$02 ) ;
10892: LD_INT 70
10894: PPUSH
10895: CALL_OW 67
// DialogueOn ;
10899: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10903: LD_EXP 37
10907: PPUSH
10908: LD_STRING D2b-JMM-1
10910: PPUSH
10911: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10915: LD_EXP 48
10919: PUSH
10920: LD_EXP 48
10924: PPUSH
10925: CALL_OW 302
10929: AND
10930: IFFALSE 10980
// begin Say ( Walker , D2b-Sci1-1 ) ;
10932: LD_EXP 48
10936: PPUSH
10937: LD_STRING D2b-Sci1-1
10939: PPUSH
10940: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10944: LD_EXP 37
10948: PPUSH
10949: LD_STRING D2b-JMM-2
10951: PPUSH
10952: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
10956: LD_EXP 48
10960: PPUSH
10961: LD_STRING D2b-Sci1-2
10963: PPUSH
10964: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
10968: LD_EXP 37
10972: PPUSH
10973: LD_STRING D2b-JMM-3
10975: PPUSH
10976: CALL_OW 88
// end ; DialogueOff ;
10980: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
10984: LD_STRING MOutSol
10986: PPUSH
10987: CALL_OW 337
// end ;
10991: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
10992: LD_EXP 14
10996: PUSH
10997: LD_EXP 37
11001: PPUSH
11002: CALL_OW 302
11006: AND
11007: PUSH
11008: LD_EXP 37
11012: PPUSH
11013: CALL 903 0 1
11017: AND
11018: PUSH
11019: LD_EXP 16
11023: NOT
11024: AND
11025: IFFALSE 11096
11027: GO 11029
11029: DISABLE
11030: LD_INT 0
11032: PPUSH
// begin jmm_in_veh := true ;
11033: LD_ADDR_EXP 16
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11041: LD_ADDR_VAR 0 1
11045: PUSH
11046: LD_INT 0
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 12
11056: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11057: LD_INT 70
11059: PPUSH
11060: CALL_OW 67
// if i then
11064: LD_VAR 0 1
11068: IFFALSE 11084
// Say ( JMM , D2c-JMM-1 ) else
11070: LD_EXP 37
11074: PPUSH
11075: LD_STRING D2c-JMM-1
11077: PPUSH
11078: CALL_OW 88
11082: GO 11096
// Say ( JMM , D2c-JMM-1a ) ;
11084: LD_EXP 37
11088: PPUSH
11089: LD_STRING D2c-JMM-1a
11091: PPUSH
11092: CALL_OW 88
// end ;
11096: PPOPN 1
11098: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11099: LD_EXP 14
11103: PUSH
11104: LD_EXP 38
11108: PPUSH
11109: CALL_OW 302
11113: AND
11114: PUSH
11115: LD_EXP 38
11119: PPUSH
11120: CALL 903 0 1
11124: AND
11125: PUSH
11126: LD_EXP 17
11130: NOT
11131: AND
11132: IFFALSE 11164
11134: GO 11136
11136: DISABLE
// begin bobby_in_veh := true ;
11137: LD_ADDR_EXP 17
11141: PUSH
11142: LD_INT 1
11144: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11145: LD_INT 70
11147: PPUSH
11148: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11152: LD_EXP 38
11156: PPUSH
11157: LD_STRING D2c-Bobby-1
11159: PPUSH
11160: CALL_OW 88
11164: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11165: LD_EXP 14
11169: PUSH
11170: LD_EXP 40
11174: PPUSH
11175: CALL_OW 302
11179: AND
11180: PUSH
11181: LD_EXP 40
11185: PPUSH
11186: CALL 903 0 1
11190: AND
11191: PUSH
11192: LD_EXP 19
11196: NOT
11197: AND
11198: IFFALSE 11230
11200: GO 11202
11202: DISABLE
// begin lisa_in_veh := true ;
11203: LD_ADDR_EXP 19
11207: PUSH
11208: LD_INT 1
11210: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11211: LD_INT 70
11213: PPUSH
11214: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11218: LD_EXP 40
11222: PPUSH
11223: LD_STRING D2c-Lisa-1
11225: PPUSH
11226: CALL_OW 88
11230: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11231: LD_EXP 14
11235: PUSH
11236: LD_EXP 39
11240: PPUSH
11241: CALL_OW 302
11245: AND
11246: PUSH
11247: LD_EXP 39
11251: PPUSH
11252: CALL 903 0 1
11256: AND
11257: PUSH
11258: LD_EXP 18
11262: NOT
11263: AND
11264: IFFALSE 11335
11266: GO 11268
11268: DISABLE
11269: LD_INT 0
11271: PPUSH
// begin cyrus_in_veh := true ;
11272: LD_ADDR_EXP 18
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11280: LD_ADDR_VAR 0 1
11284: PUSH
11285: LD_INT 0
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 12
11295: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11296: LD_INT 70
11298: PPUSH
11299: CALL_OW 67
// if i then
11303: LD_VAR 0 1
11307: IFFALSE 11323
// Say ( Cyrus , D2c-Cyrus-1 ) else
11309: LD_EXP 39
11313: PPUSH
11314: LD_STRING D2c-Cyrus-1
11316: PPUSH
11317: CALL_OW 88
11321: GO 11335
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11323: LD_EXP 39
11327: PPUSH
11328: LD_STRING D2c-Cyrus-1a
11330: PPUSH
11331: CALL_OW 88
// end ;
11335: PPOPN 1
11337: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11338: LD_EXP 44
11342: PPUSH
11343: LD_INT 16
11345: PPUSH
11346: CALL_OW 308
11350: IFFALSE 11631
11352: GO 11354
11354: DISABLE
11355: LD_INT 0
11357: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11358: LD_INT 3
11360: PPUSH
11361: LD_EXP 44
11365: PPUSH
11366: CALL_OW 471
// send_attack_on_cornel := true ;
11370: LD_ADDR_EXP 32
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if ru_vehicles then
11378: LD_EXP 56
11382: IFFALSE 11416
// for i in ru_vehicles do
11384: LD_ADDR_VAR 0 1
11388: PUSH
11389: LD_EXP 56
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11414
// ComAgressiveMove ( i , 215 , 69 ) ;
11397: LD_VAR 0 1
11401: PPUSH
11402: LD_INT 215
11404: PPUSH
11405: LD_INT 69
11407: PPUSH
11408: CALL_OW 114
11412: GO 11394
11414: POP
11415: POP
// if ru_patrol then
11416: LD_EXP 53
11420: IFFALSE 11454
// for i in ru_patrol do
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_EXP 53
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11452
// ComAgressiveMove ( i , 215 , 69 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 215
11442: PPUSH
11443: LD_INT 69
11445: PPUSH
11446: CALL_OW 114
11450: GO 11432
11452: POP
11453: POP
// if frank_send_to_scout then
11454: LD_EXP 15
11458: IFFALSE 11472
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11460: LD_EXP 51
11464: PPUSH
11465: LD_STRING D3b-Frank-1
11467: PPUSH
11468: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11472: LD_INT 105
11474: PPUSH
11475: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11479: LD_EXP 44
11483: PPUSH
11484: LD_STRING D4-Corn-1
11486: PPUSH
11487: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11491: LD_INT 35
11493: PPUSH
11494: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11498: LD_INT 22
11500: PUSH
11501: LD_INT 4
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 21
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 3
11520: PUSH
11521: LD_INT 24
11523: PUSH
11524: LD_INT 1000
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: PPUSH
11540: CALL_OW 69
11544: PUSH
11545: LD_INT 6
11547: LESS
11548: IFFALSE 11491
// if Cornel then
11550: LD_EXP 44
11554: IFFALSE 11594
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11556: LD_EXP 44
11560: PPUSH
11561: LD_STRING D5-Corn-1
11563: PPUSH
11564: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11568: LD_EXP 44
11572: PPUSH
11573: LD_EXP 2
11577: PUSH
11578: LD_STRING Cornel
11580: STR
11581: PPUSH
11582: CALL_OW 38
// cornel_saved := true ;
11586: LD_ADDR_EXP 27
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11594: LD_INT 4
11596: PPUSH
11597: LD_INT 8
11599: PPUSH
11600: CALL_OW 343
// Wait ( 0 0$01 ) ;
11604: LD_INT 35
11606: PPUSH
11607: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11611: LD_INT 3
11613: PPUSH
11614: LD_EXP 44
11618: PPUSH
11619: CALL_OW 472
// send_attack_on_cornel := false ;
11623: LD_ADDR_EXP 32
11627: PUSH
11628: LD_INT 0
11630: ST_TO_ADDR
// end ;
11631: PPOPN 1
11633: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11634: LD_INT 9
11636: PPUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 1
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 70
11651: PUSH
11652: LD_EXP 33
11656: OR
11657: IFFALSE 11878
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
// begin enable ;
11666: ENABLE
// if not jmm_on_west then
11667: LD_EXP 5
11671: NOT
11672: IFFALSE 11683
// begin YouLost ( 4 ) ;
11674: LD_STRING 4
11676: PPUSH
11677: CALL_OW 104
// exit ;
11681: GO 11878
// end ; if not game_end then
11683: LD_EXP 33
11687: NOT
11688: IFFALSE 11698
// game_end := true ;
11690: LD_ADDR_EXP 33
11694: PUSH
11695: LD_INT 1
11697: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_INT 9
11705: PPUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 70
11720: ST_TO_ADDR
// if not filter then
11721: LD_VAR 0 2
11725: NOT
11726: IFFALSE 11730
// exit ;
11728: GO 11878
// for i in filter do
11730: LD_ADDR_VAR 0 1
11734: PUSH
11735: LD_VAR 0 2
11739: PUSH
11740: FOR_IN
11741: IFFALSE 11876
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and GetNation ( i ) = nation_american then
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 302
11752: PUSH
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 247
11762: PUSH
11763: LD_INT 2
11765: EQUAL
11766: AND
11767: PUSH
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 248
11777: PUSH
11778: LD_INT 1
11780: EQUAL
11781: AND
11782: IFFALSE 11839
// begin if i = JMM and save_group < 4 then
11784: LD_VAR 0 1
11788: PUSH
11789: LD_EXP 37
11793: EQUAL
11794: PUSH
11795: LD_EXP 23
11799: PUSH
11800: LD_INT 4
11802: LESS
11803: AND
11804: IFFALSE 11808
// continue ;
11806: GO 11740
// veh_on_meta := true ;
11808: LD_ADDR_EXP 28
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11816: LD_VAR 0 1
11820: PPUSH
11821: CALL_OW 311
11825: PPUSH
11826: CALL 11881 0 1
// RemoveUnit ( i ) ;
11830: LD_VAR 0 1
11834: PPUSH
11835: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11839: LD_VAR 0 1
11843: PPUSH
11844: CALL_OW 302
11848: PUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 247
11858: PUSH
11859: LD_INT 1
11861: EQUAL
11862: AND
11863: IFFALSE 11874
// Save ( i ) ;
11865: LD_VAR 0 1
11869: PPUSH
11870: CALL 11881 0 1
// end ;
11874: GO 11740
11876: POP
11877: POP
// end ;
11878: PPOPN 2
11880: END
// export function Save ( i ) ; begin
11881: LD_INT 0
11883: PPUSH
// if i = JMM and save_group >= 4 then
11884: LD_VAR 0 1
11888: PUSH
11889: LD_EXP 37
11893: EQUAL
11894: PUSH
11895: LD_EXP 23
11899: PUSH
11900: LD_INT 4
11902: GREATEREQUAL
11903: AND
11904: IFFALSE 12040
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11906: LD_EXP 24
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: PUSH
11940: LD_INT 1
11942: GREATER
11943: AND
11944: IFFALSE 12001
// begin show_query := false ;
11946: LD_ADDR_EXP 24
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
11954: LD_STRING Q2
11956: PPUSH
11957: CALL_OW 97
11961: PUSH
11962: LD_INT 1
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 11981
11970: POP
// wait_for_them := true ; 2 :
11971: LD_ADDR_EXP 25
11975: PUSH
11976: LD_INT 1
11978: ST_TO_ADDR
11979: GO 12001
11981: LD_INT 2
11983: DOUBLE
11984: EQUAL
11985: IFTRUE 11989
11987: GO 12000
11989: POP
// wait_for_them := false ; end ;
11990: LD_ADDR_EXP 25
11994: PUSH
11995: LD_INT 0
11997: ST_TO_ADDR
11998: GO 12001
12000: POP
// end ; save_counter := save_counter + 1 ;
12001: LD_ADDR_EXP 36
12005: PUSH
12006: LD_EXP 36
12010: PUSH
12011: LD_INT 1
12013: PLUS
12014: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12015: LD_ADDR_EXP 23
12019: PUSH
12020: LD_EXP 23
12024: PUSH
12025: LD_EXP 37
12029: ADD
12030: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12031: LD_EXP 37
12035: PPUSH
12036: CALL_OW 64
// end ; if i = Lisa then
12040: LD_VAR 0 1
12044: PUSH
12045: LD_EXP 40
12049: EQUAL
12050: IFFALSE 12091
// begin save_counter := save_counter + 1 ;
12052: LD_ADDR_EXP 36
12056: PUSH
12057: LD_EXP 36
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12066: LD_ADDR_EXP 23
12070: PUSH
12071: LD_EXP 23
12075: PUSH
12076: LD_EXP 40
12080: ADD
12081: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12082: LD_EXP 40
12086: PPUSH
12087: CALL_OW 64
// end ; if i = Bobby then
12091: LD_VAR 0 1
12095: PUSH
12096: LD_EXP 38
12100: EQUAL
12101: IFFALSE 12142
// begin save_counter := save_counter + 1 ;
12103: LD_ADDR_EXP 36
12107: PUSH
12108: LD_EXP 36
12112: PUSH
12113: LD_INT 1
12115: PLUS
12116: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12117: LD_ADDR_EXP 23
12121: PUSH
12122: LD_EXP 23
12126: PUSH
12127: LD_EXP 38
12131: ADD
12132: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12133: LD_EXP 38
12137: PPUSH
12138: CALL_OW 64
// end ; if i = Cyrus then
12142: LD_VAR 0 1
12146: PUSH
12147: LD_EXP 39
12151: EQUAL
12152: IFFALSE 12193
// begin save_counter := save_counter + 1 ;
12154: LD_ADDR_EXP 36
12158: PUSH
12159: LD_EXP 36
12163: PUSH
12164: LD_INT 1
12166: PLUS
12167: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12168: LD_ADDR_EXP 23
12172: PUSH
12173: LD_EXP 23
12177: PUSH
12178: LD_EXP 39
12182: ADD
12183: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12184: LD_EXP 39
12188: PPUSH
12189: CALL_OW 64
// end ; if i = Khatam then
12193: LD_VAR 0 1
12197: PUSH
12198: LD_EXP 41
12202: EQUAL
12203: IFFALSE 12244
// begin save_counter := save_counter + 1 ;
12205: LD_ADDR_EXP 36
12209: PUSH
12210: LD_EXP 36
12214: PUSH
12215: LD_INT 1
12217: PLUS
12218: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12219: LD_ADDR_EXP 23
12223: PUSH
12224: LD_EXP 23
12228: PUSH
12229: LD_EXP 41
12233: ADD
12234: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12235: LD_EXP 41
12239: PPUSH
12240: CALL_OW 64
// end ; if i = Frank then
12244: LD_VAR 0 1
12248: PUSH
12249: LD_EXP 51
12253: EQUAL
12254: IFFALSE 12295
// begin save_counter := save_counter + 1 ;
12256: LD_ADDR_EXP 36
12260: PUSH
12261: LD_EXP 36
12265: PUSH
12266: LD_INT 1
12268: PLUS
12269: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12270: LD_ADDR_EXP 23
12274: PUSH
12275: LD_EXP 23
12279: PUSH
12280: LD_EXP 51
12284: ADD
12285: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12286: LD_EXP 51
12290: PPUSH
12291: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12295: LD_VAR 0 1
12299: PUSH
12300: LD_EXP 37
12304: NONEQUAL
12305: PUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 302
12315: AND
12316: PUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: CALL_OW 247
12326: PUSH
12327: LD_INT 1
12329: EQUAL
12330: AND
12331: PUSH
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 23
12341: IN
12342: NOT
12343: AND
12344: IFFALSE 12385
// begin save_counter := save_counter + 1 ;
12346: LD_ADDR_EXP 36
12350: PUSH
12351: LD_EXP 36
12355: PUSH
12356: LD_INT 1
12358: PLUS
12359: ST_TO_ADDR
// save_others := save_others ^ i ;
12360: LD_ADDR_EXP 22
12364: PUSH
12365: LD_EXP 22
12369: PUSH
12370: LD_VAR 0 1
12374: ADD
12375: ST_TO_ADDR
// RemoveUnit ( i ) ;
12376: LD_VAR 0 1
12380: PPUSH
12381: CALL_OW 64
// end ; end ;
12385: LD_VAR 0 2
12389: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12390: LD_EXP 24
12394: NOT
12395: PUSH
12396: LD_EXP 25
12400: NOT
12401: AND
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 0
12434: EQUAL
12435: OR
12436: IFFALSE 12445
12438: GO 12440
12440: DISABLE
// EndMission ;
12441: CALL 12446 0 0
12445: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
12450: PPUSH
12451: PPUSH
12452: PPUSH
// wait ( 0 0$01 ) ;
12453: LD_INT 35
12455: PPUSH
12456: CALL_OW 67
// if tick <= 12 12$00 then
12460: LD_OWVAR 1
12464: PUSH
12465: LD_INT 25200
12467: LESSEQUAL
12468: IFFALSE 12477
// SetAchievement ( ACH_ASPEED_3 ) ;
12470: LD_STRING ACH_ASPEED_3
12472: PPUSH
12473: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12477: LD_EXP 23
12481: PUSH
12482: LD_EXP 22
12486: ADD
12487: PPUSH
12488: LD_INT 25
12490: PUSH
12491: LD_INT 4
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 72
12502: PUSH
12503: LD_INT 0
12505: EQUAL
12506: IFFALSE 12522
// begin wait ( 3 ) ;
12508: LD_INT 3
12510: PPUSH
12511: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12515: LD_STRING ACH_NOSCI
12517: PPUSH
12518: CALL_OW 543
// end ; m1 := solar_builded ;
12522: LD_ADDR_VAR 0 3
12526: PUSH
12527: LD_EXP 14
12531: ST_TO_ADDR
// m2 := veh_on_meta ;
12532: LD_ADDR_VAR 0 4
12536: PUSH
12537: LD_EXP 28
12541: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12542: LD_ADDR_VAR 0 5
12546: PUSH
12547: LD_EXP 34
12551: PUSH
12552: LD_INT 0
12554: EQUAL
12555: ST_TO_ADDR
// if solar_builded then
12556: LD_EXP 14
12560: IFFALSE 12574
// AddMedal ( Solar1 , 1 ) else
12562: LD_STRING Solar1
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 101
12572: GO 12585
// AddMedal ( Solar1 , - 1 ) ;
12574: LD_STRING Solar1
12576: PPUSH
12577: LD_INT 1
12579: NEG
12580: PPUSH
12581: CALL_OW 101
// if veh_on_meta then
12585: LD_EXP 28
12589: IFFALSE 12603
// AddMedal ( Solar2 , 1 ) else
12591: LD_STRING Solar2
12593: PPUSH
12594: LD_INT 1
12596: PPUSH
12597: CALL_OW 101
12601: GO 12633
// if solar_builded then
12603: LD_EXP 14
12607: IFFALSE 12622
// AddMedal ( Solar2 , - 1 ) else
12609: LD_STRING Solar2
12611: PPUSH
12612: LD_INT 1
12614: NEG
12615: PPUSH
12616: CALL_OW 101
12620: GO 12633
// AddMedal ( Solar2 , - 2 ) ;
12622: LD_STRING Solar2
12624: PPUSH
12625: LD_INT 2
12627: NEG
12628: PPUSH
12629: CALL_OW 101
// if lose_counter = 0 then
12633: LD_EXP 34
12637: PUSH
12638: LD_INT 0
12640: EQUAL
12641: IFFALSE 12655
// AddMedal ( No , 1 ) else
12643: LD_STRING No
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 101
12653: GO 12699
// if lose_counter > 0 and lose_counter < 4 then
12655: LD_EXP 34
12659: PUSH
12660: LD_INT 0
12662: GREATER
12663: PUSH
12664: LD_EXP 34
12668: PUSH
12669: LD_INT 4
12671: LESS
12672: AND
12673: IFFALSE 12688
// AddMedal ( No , - 1 ) else
12675: LD_STRING No
12677: PPUSH
12678: LD_INT 1
12680: NEG
12681: PPUSH
12682: CALL_OW 101
12686: GO 12699
// AddMedal ( UpTo4 , - 1 ) ;
12688: LD_STRING UpTo4
12690: PPUSH
12691: LD_INT 1
12693: NEG
12694: PPUSH
12695: CALL_OW 101
// GiveMedals ( MAIN ) ;
12699: LD_STRING MAIN
12701: PPUSH
12702: CALL_OW 102
// if Difficulty = 3 and m1 and m2 and m3 then
12706: LD_OWVAR 67
12710: PUSH
12711: LD_INT 3
12713: EQUAL
12714: PUSH
12715: LD_VAR 0 3
12719: AND
12720: PUSH
12721: LD_VAR 0 4
12725: AND
12726: PUSH
12727: LD_VAR 0 5
12731: AND
12732: IFFALSE 12744
// SetAchievementEX ( ACH_AMER , 3 ) ;
12734: LD_STRING ACH_AMER
12736: PPUSH
12737: LD_INT 3
12739: PPUSH
12740: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12744: LD_EXP 52
12748: PPUSH
12749: CALL_OW 301
12753: IFFALSE 12809
// begin stop_talking := true ;
12755: LD_ADDR_OWVAR 56
12759: PUSH
12760: LD_INT 1
12762: ST_TO_ADDR
// for i in save_group ^ save_others do
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_EXP 23
12772: PUSH
12773: LD_EXP 22
12777: ADD
12778: PUSH
12779: FOR_IN
12780: IFFALSE 12799
// AddExperience ( i , skill_combat , 1500 ) ;
12782: LD_VAR 0 2
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: LD_INT 1500
12792: PPUSH
12793: CALL_OW 492
12797: GO 12779
12799: POP
12800: POP
// stop_talking := false ;
12801: LD_ADDR_OWVAR 56
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12809: LD_EXP 23
12813: PUSH
12814: LD_EXP 22
12818: ADD
12819: PPUSH
12820: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12824: LD_EXP 37
12828: PPUSH
12829: LD_EXP 2
12833: PUSH
12834: LD_STRING JMM
12836: STR
12837: PPUSH
12838: CALL_OW 38
// if Bobby in save_group then
12842: LD_EXP 38
12846: PUSH
12847: LD_EXP 23
12851: IN
12852: IFFALSE 12872
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12854: LD_EXP 38
12858: PPUSH
12859: LD_EXP 2
12863: PUSH
12864: LD_STRING Bobby
12866: STR
12867: PPUSH
12868: CALL_OW 38
// if Cyrus in save_group then
12872: LD_EXP 39
12876: PUSH
12877: LD_EXP 23
12881: IN
12882: IFFALSE 12902
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12884: LD_EXP 39
12888: PPUSH
12889: LD_EXP 2
12893: PUSH
12894: LD_STRING Cyrus
12896: STR
12897: PPUSH
12898: CALL_OW 38
// if Lisa in save_group then
12902: LD_EXP 40
12906: PUSH
12907: LD_EXP 23
12911: IN
12912: IFFALSE 12932
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12914: LD_EXP 40
12918: PPUSH
12919: LD_EXP 2
12923: PUSH
12924: LD_STRING Lisa
12926: STR
12927: PPUSH
12928: CALL_OW 38
// if Frank in save_group then
12932: LD_EXP 51
12936: PUSH
12937: LD_EXP 23
12941: IN
12942: IFFALSE 12962
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12944: LD_EXP 51
12948: PPUSH
12949: LD_EXP 2
12953: PUSH
12954: LD_STRING Frank
12956: STR
12957: PPUSH
12958: CALL_OW 38
// if Khatam in save_group then
12962: LD_EXP 41
12966: PUSH
12967: LD_EXP 23
12971: IN
12972: IFFALSE 12992
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
12974: LD_EXP 41
12978: PPUSH
12979: LD_EXP 2
12983: PUSH
12984: LD_STRING Khatam
12986: STR
12987: PPUSH
12988: CALL_OW 38
// if save_others then
12992: LD_EXP 22
12996: IFFALSE 13010
// SaveCharacters ( save_others , 03_others ) ;
12998: LD_EXP 22
13002: PPUSH
13003: LD_STRING 03_others
13005: PPUSH
13006: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13010: LD_EXP 45
13014: PUSH
13015: LD_EXP 45
13019: PPUSH
13020: CALL_OW 302
13024: AND
13025: PUSH
13026: LD_EXP 27
13030: AND
13031: IFFALSE 13043
// begin ResetFog ;
13033: CALL_OW 335
// DisplayEndingScene ;
13037: CALL 13065 0 0
// end else
13041: GO 13056
// DeleteCharacters ( mission_prefix & Cornel ) ;
13043: LD_EXP 2
13047: PUSH
13048: LD_STRING Cornel
13050: STR
13051: PPUSH
13052: CALL_OW 40
// YouWin ;
13056: CALL_OW 103
// end ;
13060: LD_VAR 0 1
13064: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
13069: PPUSH
13070: PPUSH
13071: PPUSH
13072: PPUSH
// InGameOn ;
13073: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13077: LD_INT 208
13079: PPUSH
13080: LD_INT 62
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: LD_INT 10
13088: NEG
13089: PPUSH
13090: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13094: LD_INT 208
13096: PPUSH
13097: LD_INT 62
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13107: LD_ADDR_VAR 0 3
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 2
13124: PUSH
13125: LD_INT 21
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 1
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 69
13158: ST_TO_ADDR
// if filter then
13159: LD_VAR 0 3
13163: IFFALSE 13191
// for i in filter do
13165: LD_ADDR_VAR 0 2
13169: PUSH
13170: LD_VAR 0 3
13174: PUSH
13175: FOR_IN
13176: IFFALSE 13189
// RemoveUnit ( i ) ;
13178: LD_VAR 0 2
13182: PPUSH
13183: CALL_OW 64
13187: GO 13175
13189: POP
13190: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13191: LD_ADDR_VAR 0 3
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_INT 4
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 21
13208: PUSH
13209: LD_INT 1
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: ST_TO_ADDR
// if filter then
13225: LD_VAR 0 3
13229: IFFALSE 13260
// for i in filter do
13231: LD_ADDR_VAR 0 2
13235: PUSH
13236: LD_VAR 0 3
13240: PUSH
13241: FOR_IN
13242: IFFALSE 13258
// SetLives ( i , 0 ) ;
13244: LD_VAR 0 2
13248: PPUSH
13249: LD_INT 0
13251: PPUSH
13252: CALL_OW 234
13256: GO 13241
13258: POP
13259: POP
// uc_side := 4 ;
13260: LD_ADDR_OWVAR 20
13264: PUSH
13265: LD_INT 4
13267: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13268: LD_ADDR_VAR 0 4
13272: PUSH
13273: LD_STRING Cornell
13275: PPUSH
13276: LD_INT 0
13278: PPUSH
13279: LD_STRING 
13281: PPUSH
13282: CALL 33625 0 3
13286: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13287: LD_VAR 0 4
13291: PPUSH
13292: LD_INT 208
13294: PPUSH
13295: LD_INT 62
13297: PPUSH
13298: LD_INT 0
13300: PPUSH
13301: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13305: LD_VAR 0 4
13309: PPUSH
13310: LD_INT 100
13312: PPUSH
13313: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13317: LD_INT 3
13319: PPUSH
13320: LD_VAR 0 4
13324: PPUSH
13325: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13329: LD_INT 4
13331: PPUSH
13332: LD_INT 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 80
// uc_side := 3 ;
13345: LD_ADDR_OWVAR 20
13349: PUSH
13350: LD_INT 3
13352: ST_TO_ADDR
// uc_nation := 3 ;
13353: LD_ADDR_OWVAR 21
13357: PUSH
13358: LD_INT 3
13360: ST_TO_ADDR
// InitHc ;
13361: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13365: LD_ADDR_VAR 0 5
13369: PUSH
13370: LD_STRING Mikhail
13372: PPUSH
13373: LD_INT 0
13375: PPUSH
13376: LD_STRING 
13378: PPUSH
13379: CALL 33625 0 3
13383: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13384: LD_INT 1
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: LD_INT 0
13392: PPUSH
13393: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13397: LD_ADDR_VAR 0 6
13401: PUSH
13402: LD_VAR 0 6
13406: PUSH
13407: CALL_OW 44
13411: ADD
13412: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13413: LD_ADDR_VAR 0 6
13417: PUSH
13418: LD_VAR 0 6
13422: PUSH
13423: CALL_OW 44
13427: ADD
13428: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13429: LD_INT 2
13431: PPUSH
13432: LD_INT 4
13434: PPUSH
13435: LD_INT 0
13437: PPUSH
13438: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13442: LD_ADDR_VAR 0 6
13446: PUSH
13447: LD_VAR 0 6
13451: PUSH
13452: CALL_OW 44
13456: ADD
13457: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13458: LD_VAR 0 5
13462: PPUSH
13463: LD_INT 17
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13473: LD_VAR 0 5
13477: PPUSH
13478: LD_INT 210
13480: PPUSH
13481: LD_INT 63
13483: PPUSH
13484: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13488: LD_VAR 0 5
13492: PPUSH
13493: LD_INT 208
13495: PPUSH
13496: LD_INT 62
13498: PPUSH
13499: CALL_OW 178
// for i in fake_russians do
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 6
13512: PUSH
13513: FOR_IN
13514: IFFALSE 13592
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13516: LD_VAR 0 2
13520: PPUSH
13521: LD_INT 17
13523: PPUSH
13524: LD_INT 0
13526: PPUSH
13527: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13531: LD_VAR 0 2
13535: PPUSH
13536: LD_INT 215
13538: PPUSH
13539: LD_INT 67
13541: PPUSH
13542: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_INT 208
13553: PPUSH
13554: LD_INT 62
13556: PPUSH
13557: CALL_OW 178
// if GetClass ( i ) = 4 then
13561: LD_VAR 0 2
13565: PPUSH
13566: CALL_OW 257
13570: PUSH
13571: LD_INT 4
13573: EQUAL
13574: IFFALSE 13590
// ComHeal ( i , fake_cornel ) ;
13576: LD_VAR 0 2
13580: PPUSH
13581: LD_VAR 0 4
13585: PPUSH
13586: CALL_OW 128
// end ;
13590: GO 13513
13592: POP
13593: POP
// Wait ( 0 0$01 ) ;
13594: LD_INT 35
13596: PPUSH
13597: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13611: LD_INT 208
13613: PPUSH
13614: LD_INT 62
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: LD_INT 10
13622: NEG
13623: PPUSH
13624: CALL_OW 330
// Wait ( 0 0$15 ) ;
13628: LD_INT 525
13630: PPUSH
13631: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13635: LD_INT 208
13637: PPUSH
13638: LD_INT 62
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 331
// ResetFog ;
13648: CALL_OW 335
// InGameOff ;
13652: CALL_OW 9
// end ;
13656: LD_VAR 0 1
13660: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13661: LD_INT 10
13663: PPUSH
13664: LD_INT 22
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 70
13678: PUSH
13679: LD_EXP 44
13683: PPUSH
13684: CALL_OW 302
13688: AND
13689: PUSH
13690: LD_INT 22
13692: PUSH
13693: LD_INT 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL_OW 69
13704: PPUSH
13705: LD_EXP 44
13709: PPUSH
13710: CALL_OW 74
13714: PPUSH
13715: LD_EXP 44
13719: PPUSH
13720: CALL_OW 296
13724: PUSH
13725: LD_INT 30
13727: LESS
13728: OR
13729: IFFALSE 13780
13731: GO 13733
13733: DISABLE
// begin enable ;
13734: ENABLE
// powell_warn := powell_warn + 1 ;
13735: LD_ADDR_EXP 35
13739: PUSH
13740: LD_EXP 35
13744: PUSH
13745: LD_INT 1
13747: PLUS
13748: ST_TO_ADDR
// if powell_warn = 3 then
13749: LD_EXP 35
13753: PUSH
13754: LD_INT 3
13756: EQUAL
13757: IFFALSE 13768
// begin YouLost ( 5 ) ;
13759: LD_STRING 5
13761: PPUSH
13762: CALL_OW 104
// exit ;
13766: GO 13780
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13768: LD_EXP 46
13772: PPUSH
13773: LD_STRING DWarn-Pow-1
13775: PPUSH
13776: CALL_OW 94
// end ; end_of_file
13780: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13781: LD_EXP 8
13785: IFFALSE 15622
13787: GO 13789
13789: DISABLE
13790: LD_INT 0
13792: PPUSH
13793: PPUSH
13794: PPUSH
13795: PPUSH
13796: PPUSH
13797: PPUSH
13798: PPUSH
13799: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13800: LD_EXP 44
13804: PUSH
13805: LD_EXP 45
13809: ADD
13810: PUSH
13811: LD_EXP 6
13815: ADD
13816: PPUSH
13817: LD_INT 250
13819: PPUSH
13820: LD_INT 120
13822: PPUSH
13823: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_EXP 6
13836: PPUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 72
13851: PUSH
13852: LD_EXP 45
13856: DIFF
13857: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13858: LD_ADDR_VAR 0 3
13862: PUSH
13863: LD_EXP 6
13867: PPUSH
13868: LD_INT 21
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PPUSH
13878: CALL_OW 72
13882: PUSH
13883: LD_VAR 0 2
13887: DIFF
13888: ST_TO_ADDR
// if not has_eng then
13889: LD_VAR 0 2
13893: NOT
13894: IFFALSE 13977
// begin uc_side := 4 ;
13896: LD_ADDR_OWVAR 20
13900: PUSH
13901: LD_INT 4
13903: ST_TO_ADDR
// uc_nation := 1 ;
13904: LD_ADDR_OWVAR 21
13908: PUSH
13909: LD_INT 1
13911: ST_TO_ADDR
// bc_type := b_depot ;
13912: LD_ADDR_OWVAR 42
13916: PUSH
13917: LD_INT 0
13919: ST_TO_ADDR
// bc_level := 2 ;
13920: LD_ADDR_OWVAR 43
13924: PUSH
13925: LD_INT 2
13927: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13928: LD_ADDR_VAR 0 4
13932: PUSH
13933: LD_INT 264
13935: PPUSH
13936: LD_INT 120
13938: PPUSH
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 47
13946: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
13947: LD_INT 264
13949: PPUSH
13950: LD_INT 120
13952: PPUSH
13953: LD_INT 4
13955: PPUSH
13956: LD_INT 10
13958: NEG
13959: PPUSH
13960: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
13964: LD_INT 264
13966: PPUSH
13967: LD_INT 120
13969: PPUSH
13970: LD_INT 4
13972: PPUSH
13973: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
13977: LD_INT 35
13979: PPUSH
13980: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
13984: LD_EXP 44
13988: PPUSH
13989: LD_INT 10
13991: PPUSH
13992: CALL_OW 308
13996: PUSH
13997: LD_EXP 44
14001: PPUSH
14002: CALL_OW 310
14006: PPUSH
14007: LD_INT 10
14009: PPUSH
14010: CALL_OW 308
14014: OR
14015: IFFALSE 13977
// if has_eng and not dep then
14017: LD_VAR 0 2
14021: PUSH
14022: LD_VAR 0 4
14026: NOT
14027: AND
14028: IFFALSE 14178
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14030: LD_VAR 0 2
14034: PPUSH
14035: LD_INT 0
14037: PPUSH
14038: LD_INT 264
14040: PPUSH
14041: LD_INT 120
14043: PPUSH
14044: LD_INT 4
14046: PPUSH
14047: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14051: LD_INT 35
14053: PPUSH
14054: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14058: LD_INT 22
14060: PUSH
14061: LD_INT 4
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 30
14070: PUSH
14071: LD_INT 0
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PPUSH
14082: CALL_OW 69
14086: IFFALSE 14051
// ComMoveXY ( filter , 264 , 120 ) ;
14088: LD_VAR 0 3
14092: PPUSH
14093: LD_INT 264
14095: PPUSH
14096: LD_INT 120
14098: PPUSH
14099: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14103: LD_INT 35
14105: PPUSH
14106: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14110: LD_INT 22
14112: PUSH
14113: LD_INT 4
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 30
14122: PUSH
14123: LD_INT 0
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 3
14132: PUSH
14133: LD_INT 57
14135: PUSH
14136: EMPTY
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: IFFALSE 14103
// ComMoveXY ( filter , 247 , 113 ) ;
14154: LD_VAR 0 3
14158: PPUSH
14159: LD_INT 247
14161: PPUSH
14162: LD_INT 113
14164: PPUSH
14165: CALL_OW 111
// Wait ( 0 0$2 ) ;
14169: LD_INT 70
14171: PPUSH
14172: CALL_OW 67
// end else
14176: GO 14190
// begin SetSide ( dep , 4 ) ;
14178: LD_VAR 0 4
14182: PPUSH
14183: LD_INT 4
14185: PPUSH
14186: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14190: LD_ADDR_VAR 0 4
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 4
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 30
14207: PUSH
14208: LD_INT 0
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: PUSH
14224: LD_INT 1
14226: ARRAY
14227: ST_TO_ADDR
// if not has_eng then
14228: LD_VAR 0 2
14232: NOT
14233: IFFALSE 14320
// for i = 1 to 2 do
14235: LD_ADDR_VAR 0 1
14239: PUSH
14240: DOUBLE
14241: LD_INT 1
14243: DEC
14244: ST_TO_ADDR
14245: LD_INT 2
14247: PUSH
14248: FOR_TO
14249: IFFALSE 14318
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14251: LD_VAR 0 3
14255: PUSH
14256: LD_INT 1
14258: ARRAY
14259: PPUSH
14260: LD_VAR 0 4
14264: PPUSH
14265: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14269: LD_VAR 0 3
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: LD_INT 2
14280: PPUSH
14281: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14285: LD_VAR 0 3
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14298: LD_ADDR_VAR 0 3
14302: PUSH
14303: LD_VAR 0 3
14307: PPUSH
14308: LD_INT 1
14310: PPUSH
14311: CALL_OW 3
14315: ST_TO_ADDR
// end ;
14316: GO 14248
14318: POP
14319: POP
// if IsInUnit ( Cornel ) then
14320: LD_EXP 44
14324: PPUSH
14325: CALL_OW 310
14329: IFFALSE 14407
// begin cargo := IsInUnit ( Cornel ) ;
14331: LD_ADDR_VAR 0 7
14335: PUSH
14336: LD_EXP 44
14340: PPUSH
14341: CALL_OW 310
14345: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14346: LD_VAR 0 7
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 289
14358: IFFALSE 14369
// ComUnload ( cargo ) ;
14360: LD_VAR 0 7
14364: PPUSH
14365: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14369: LD_EXP 44
14373: PPUSH
14374: LD_INT 235
14376: PPUSH
14377: LD_INT 122
14379: PPUSH
14380: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14384: LD_EXP 44
14388: PPUSH
14389: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14393: LD_EXP 44
14397: PPUSH
14398: LD_VAR 0 4
14402: PPUSH
14403: CALL_OW 180
// end ; if Bierezov then
14407: LD_EXP 45
14411: IFFALSE 14459
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14413: LD_EXP 45
14417: PPUSH
14418: LD_INT 260
14420: PPUSH
14421: LD_INT 120
14423: PPUSH
14424: CALL_OW 111
// if dep then
14428: LD_VAR 0 4
14432: IFFALSE 14450
// AddComEnterUnit ( Bierezov , dep ) else
14434: LD_EXP 45
14438: PPUSH
14439: LD_VAR 0 4
14443: PPUSH
14444: CALL_OW 180
14448: GO 14459
// AddComHold ( Bierezov ) ;
14450: LD_EXP 45
14454: PPUSH
14455: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14459: LD_INT 525
14461: PPUSH
14462: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14466: LD_ADDR_VAR 0 2
14470: PUSH
14471: LD_INT 22
14473: PUSH
14474: LD_INT 4
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 25
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PPUSH
14495: CALL_OW 69
14499: PUSH
14500: LD_EXP 45
14504: DIFF
14505: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14506: LD_INT 35
14508: PPUSH
14509: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14513: LD_ADDR_VAR 0 6
14517: PUSH
14518: LD_INT 10
14520: PPUSH
14521: CALL_OW 435
14525: ST_TO_ADDR
// if crates then
14526: LD_VAR 0 6
14530: IFFALSE 14559
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14532: LD_VAR 0 2
14536: PPUSH
14537: LD_VAR 0 6
14541: PUSH
14542: LD_INT 1
14544: ARRAY
14545: PPUSH
14546: LD_VAR 0 6
14550: PUSH
14551: LD_INT 2
14553: ARRAY
14554: PPUSH
14555: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14559: LD_VAR 0 4
14563: PPUSH
14564: CALL_OW 274
14568: PPUSH
14569: LD_INT 1
14571: PPUSH
14572: CALL_OW 275
14576: PUSH
14577: LD_INT 40
14579: GREATEREQUAL
14580: IFFALSE 14506
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14582: LD_ADDR_VAR 0 5
14586: PUSH
14587: LD_INT 4
14589: PUSH
14590: LD_INT 256
14592: PUSH
14593: LD_INT 111
14595: PUSH
14596: LD_INT 2
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 31
14607: PUSH
14608: LD_INT 243
14610: PUSH
14611: LD_INT 112
14613: PUSH
14614: LD_INT 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 31
14625: PUSH
14626: LD_INT 254
14628: PUSH
14629: LD_INT 114
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: ST_TO_ADDR
// for i in blist do
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_VAR 0 5
14655: PUSH
14656: FOR_IN
14657: IFFALSE 14706
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14659: LD_VAR 0 2
14663: PPUSH
14664: LD_VAR 0 1
14668: PUSH
14669: LD_INT 1
14671: ARRAY
14672: PPUSH
14673: LD_VAR 0 1
14677: PUSH
14678: LD_INT 2
14680: ARRAY
14681: PPUSH
14682: LD_VAR 0 1
14686: PUSH
14687: LD_INT 3
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 1
14695: PUSH
14696: LD_INT 4
14698: ARRAY
14699: PPUSH
14700: CALL_OW 205
14704: GO 14656
14706: POP
14707: POP
// repeat wait ( 0 0$01 ) ;
14708: LD_INT 35
14710: PPUSH
14711: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14715: LD_INT 22
14717: PUSH
14718: LD_INT 4
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 30
14727: PUSH
14728: LD_INT 4
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: LD_INT 57
14740: PUSH
14741: EMPTY
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 69
14757: IFFALSE 14708
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14759: LD_VAR 0 3
14763: PPUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 30
14776: PUSH
14777: LD_INT 4
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14801: LD_VAR 0 3
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 183
// if has_eng > 1 then
14813: LD_VAR 0 2
14817: PUSH
14818: LD_INT 1
14820: GREATER
14821: IFFALSE 14963
// for i = has_eng downto 2 do
14823: LD_ADDR_VAR 0 1
14827: PUSH
14828: DOUBLE
14829: LD_VAR 0 2
14833: INC
14834: ST_TO_ADDR
14835: LD_INT 2
14837: PUSH
14838: FOR_DOWNTO
14839: IFFALSE 14961
// begin if IsInUnit ( has_eng [ i ] ) then
14841: LD_VAR 0 2
14845: PUSH
14846: LD_VAR 0 1
14850: ARRAY
14851: PPUSH
14852: CALL_OW 310
14856: IFFALSE 14873
// ComExitBuilding ( has_eng [ i ] ) ;
14858: LD_VAR 0 2
14862: PUSH
14863: LD_VAR 0 1
14867: ARRAY
14868: PPUSH
14869: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14873: LD_VAR 0 2
14877: PUSH
14878: LD_VAR 0 1
14882: ARRAY
14883: PPUSH
14884: LD_INT 22
14886: PUSH
14887: LD_INT 4
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 30
14896: PUSH
14897: LD_INT 4
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: PPUSH
14917: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14921: LD_VAR 0 2
14925: PUSH
14926: LD_VAR 0 1
14930: ARRAY
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14939: LD_ADDR_VAR 0 2
14943: PUSH
14944: LD_VAR 0 2
14948: PPUSH
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 3
14958: ST_TO_ADDR
// end ;
14959: GO 14838
14961: POP
14962: POP
// repeat wait ( 0 0$01 ) ;
14963: LD_INT 35
14965: PPUSH
14966: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
14970: LD_INT 22
14972: PUSH
14973: LD_INT 4
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 30
14982: PUSH
14983: LD_INT 31
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 57
14995: PUSH
14996: EMPTY
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: PUSH
15013: LD_INT 1
15015: GREATER
15016: IFFALSE 14963
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15018: LD_ADDR_VAR 0 8
15022: PUSH
15023: LD_EXP 6
15027: PPUSH
15028: LD_INT 25
15030: PUSH
15031: LD_INT 1
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PPUSH
15038: CALL_OW 72
15042: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: DOUBLE
15049: LD_INT 1
15051: DEC
15052: ST_TO_ADDR
15053: LD_INT 22
15055: PUSH
15056: LD_INT 4
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 30
15065: PUSH
15066: LD_INT 31
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 3
15075: PUSH
15076: LD_INT 57
15078: PUSH
15079: EMPTY
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 69
15095: PUSH
15096: FOR_TO
15097: IFFALSE 15181
// begin if not sol [ i ] then
15099: LD_VAR 0 8
15103: PUSH
15104: LD_VAR 0 1
15108: ARRAY
15109: NOT
15110: IFFALSE 15114
// break ;
15112: GO 15181
// ComExitBuilding ( sol [ i ] ) ;
15114: LD_VAR 0 8
15118: PUSH
15119: LD_VAR 0 1
15123: ARRAY
15124: PPUSH
15125: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15129: LD_VAR 0 8
15133: PUSH
15134: LD_VAR 0 1
15138: ARRAY
15139: PPUSH
15140: LD_INT 22
15142: PUSH
15143: LD_INT 4
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 30
15152: PUSH
15153: LD_INT 31
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 69
15168: PUSH
15169: LD_VAR 0 1
15173: ARRAY
15174: PPUSH
15175: CALL_OW 180
// end ;
15179: GO 15096
15181: POP
15182: POP
// if sol > 3 then
15183: LD_VAR 0 8
15187: PUSH
15188: LD_INT 3
15190: GREATER
15191: IFFALSE 15308
// begin ComExitBuilding ( sol [ 3 ] ) ;
15193: LD_VAR 0 8
15197: PUSH
15198: LD_INT 3
15200: ARRAY
15201: PPUSH
15202: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15206: LD_VAR 0 8
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_INT 246
15217: PPUSH
15218: LD_INT 94
15220: PPUSH
15221: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15225: LD_VAR 0 8
15229: PUSH
15230: LD_INT 3
15232: ARRAY
15233: PPUSH
15234: LD_INT 175
15236: PPUSH
15237: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15241: LD_VAR 0 8
15245: PUSH
15246: LD_INT 3
15248: ARRAY
15249: PPUSH
15250: LD_INT 224
15252: PPUSH
15253: LD_INT 90
15255: PPUSH
15256: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15260: LD_VAR 0 8
15264: PUSH
15265: LD_INT 3
15267: ARRAY
15268: PPUSH
15269: LD_INT 245
15271: PPUSH
15272: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15276: LD_VAR 0 8
15280: PUSH
15281: LD_INT 3
15283: ARRAY
15284: PPUSH
15285: LD_INT 223
15287: PPUSH
15288: LD_INT 110
15290: PPUSH
15291: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15295: LD_VAR 0 8
15299: PUSH
15300: LD_INT 3
15302: ARRAY
15303: PPUSH
15304: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15308: LD_VAR 0 2
15312: PPUSH
15313: LD_VAR 0 4
15317: PPUSH
15318: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15322: LD_INT 22
15324: PUSH
15325: LD_INT 4
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 4
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 69
15350: PUSH
15351: LD_INT 1
15353: ARRAY
15354: PPUSH
15355: CALL_OW 313
15359: PUSH
15360: LD_INT 6
15362: LESS
15363: IFFALSE 15427
// begin if IsInUnit ( Cornel ) then
15365: LD_EXP 44
15369: PPUSH
15370: CALL_OW 310
15374: IFFALSE 15385
// ComExitBuilding ( Cornel ) ;
15376: LD_EXP 44
15380: PPUSH
15381: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15385: LD_EXP 44
15389: PPUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 4
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 30
15402: PUSH
15403: LD_INT 4
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: PPUSH
15423: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15427: LD_INT 35
15429: PPUSH
15430: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15434: LD_ADDR_VAR 0 3
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_INT 4
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 24
15464: PUSH
15465: LD_INT 1000
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: ST_TO_ADDR
// if filter and has_eng then
15486: LD_VAR 0 3
15490: PUSH
15491: LD_VAR 0 2
15495: AND
15496: IFFALSE 15562
// begin for i in has_eng do
15498: LD_ADDR_VAR 0 1
15502: PUSH
15503: LD_VAR 0 2
15507: PUSH
15508: FOR_IN
15509: IFFALSE 15558
// begin if IsInUnit ( i ) then
15511: LD_VAR 0 1
15515: PPUSH
15516: CALL_OW 310
15520: IFFALSE 15531
// ComExitBuilding ( i ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 122
// Wait ( 3 ) ;
15531: LD_INT 3
15533: PPUSH
15534: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_VAR 0 3
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: PPUSH
15552: CALL_OW 130
// end ;
15556: GO 15508
15558: POP
15559: POP
// end else
15560: GO 15616
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15562: LD_VAR 0 2
15566: PUSH
15567: LD_VAR 0 2
15571: PPUSH
15572: LD_INT 56
15574: PUSH
15575: EMPTY
15576: LIST
15577: PPUSH
15578: CALL_OW 72
15582: AND
15583: IFFALSE 15616
// for i in has_eng do
15585: LD_ADDR_VAR 0 1
15589: PUSH
15590: LD_VAR 0 2
15594: PUSH
15595: FOR_IN
15596: IFFALSE 15614
// ComEnterUnit ( i , dep ) ;
15598: LD_VAR 0 1
15602: PPUSH
15603: LD_VAR 0 4
15607: PPUSH
15608: CALL_OW 120
15612: GO 15595
15614: POP
15615: POP
// until cornel_prepared ;
15616: LD_EXP 11
15620: IFFALSE 15427
// end ;
15622: PPOPN 8
15624: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15625: LD_EXP 11
15629: IFFALSE 16028
15631: GO 15633
15633: DISABLE
15634: LD_INT 0
15636: PPUSH
15637: PPUSH
15638: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_INT 22
15646: PUSH
15647: LD_INT 4
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 30
15656: PUSH
15657: LD_INT 4
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 69
15672: PUSH
15673: LD_INT 1
15675: ARRAY
15676: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15677: LD_EXP 6
15681: PPUSH
15682: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15686: LD_EXP 45
15690: PUSH
15691: LD_EXP 45
15695: PPUSH
15696: CALL_OW 310
15700: AND
15701: IFFALSE 15712
// ComExitBuilding ( Bierezov ) ;
15703: LD_EXP 45
15707: PPUSH
15708: CALL_OW 122
// Wait ( 0 0$03 ) ;
15712: LD_INT 105
15714: PPUSH
15715: CALL_OW 67
// for i in cornel_units do
15719: LD_ADDR_VAR 0 1
15723: PUSH
15724: LD_EXP 6
15728: PUSH
15729: FOR_IN
15730: IFFALSE 15806
// begin if GetClass ( i ) in [ 2 , 3 ] then
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 257
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: IN
15752: IFFALSE 15789
// begin ComEnterUnit ( i , arm ) ;
15754: LD_VAR 0 1
15758: PPUSH
15759: LD_VAR 0 2
15763: PPUSH
15764: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15768: LD_VAR 0 1
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 183
// AddComExitBuilding ( i ) ;
15780: LD_VAR 0 1
15784: PPUSH
15785: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15789: LD_VAR 0 1
15793: PPUSH
15794: LD_INT 257
15796: PPUSH
15797: LD_INT 121
15799: PPUSH
15800: CALL_OW 171
// end ;
15804: GO 15729
15806: POP
15807: POP
// Wait ( 1 1$00 ) ;
15808: LD_INT 2100
15810: PPUSH
15811: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_EXP 44
15824: PUSH
15825: LD_EXP 45
15829: ADD
15830: PUSH
15831: LD_EXP 6
15835: ADD
15836: PUSH
15837: LD_EXP 6
15841: PPUSH
15842: LD_INT 21
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 72
15856: DIFF
15857: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15858: LD_VAR 0 3
15862: PPUSH
15863: LD_INT 248
15865: PPUSH
15866: LD_INT 85
15868: PPUSH
15869: CALL_OW 111
// AddComHold ( filter ) ;
15873: LD_VAR 0 3
15877: PPUSH
15878: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15882: LD_INT 35
15884: PPUSH
15885: CALL_OW 67
// until cornel_attack ;
15889: LD_EXP 9
15893: IFFALSE 15882
// ComAgressiveMove ( filter , 209 , 63 ) ;
15895: LD_VAR 0 3
15899: PPUSH
15900: LD_INT 209
15902: PPUSH
15903: LD_INT 63
15905: PPUSH
15906: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15910: LD_EXP 44
15914: PPUSH
15915: LD_INT 208
15917: PPUSH
15918: LD_INT 62
15920: PPUSH
15921: CALL_OW 114
// AddComHold ( Cornel ) ;
15925: LD_EXP 44
15929: PPUSH
15930: CALL_OW 200
// if Bierezov then
15934: LD_EXP 45
15938: IFFALSE 16028
// begin filter := filter diff Bierezov ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: LD_VAR 0 3
15949: PUSH
15950: LD_EXP 45
15954: DIFF
15955: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
15956: LD_EXP 45
15960: PPUSH
15961: LD_INT 6
15963: PPUSH
15964: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
15968: LD_EXP 45
15972: PPUSH
15973: LD_INT 235
15975: PPUSH
15976: LD_INT 60
15978: PPUSH
15979: CALL_OW 111
// AddComHold ( Bierezov ) ;
15983: LD_EXP 45
15987: PPUSH
15988: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
15992: LD_EXP 45
15996: PPUSH
15997: LD_INT 350
15999: PPUSH
16000: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16004: LD_EXP 45
16008: PPUSH
16009: LD_INT 198
16011: PPUSH
16012: LD_INT 28
16014: PPUSH
16015: CALL_OW 171
// AddComHold ( Bierezov ) ;
16019: LD_EXP 45
16023: PPUSH
16024: CALL_OW 200
// end ; end ; end_of_file
16028: PPOPN 3
16030: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16031: LD_EXP 53
16035: PUSH
16036: LD_EXP 31
16040: NOT
16041: AND
16042: PUSH
16043: LD_EXP 32
16047: NOT
16048: AND
16049: IFFALSE 16499
16051: GO 16053
16053: DISABLE
16054: LD_INT 0
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
// begin enable ;
16060: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16061: LD_ADDR_VAR 0 4
16065: PUSH
16066: LD_INT 81
16068: PUSH
16069: LD_INT 3
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 69
16080: ST_TO_ADDR
// for i = 1 to ru_patrol do
16081: LD_ADDR_VAR 0 2
16085: PUSH
16086: DOUBLE
16087: LD_INT 1
16089: DEC
16090: ST_TO_ADDR
16091: LD_EXP 53
16095: PUSH
16096: FOR_TO
16097: IFFALSE 16497
// begin un := ru_patrol [ i ] ;
16099: LD_ADDR_VAR 0 1
16103: PUSH
16104: LD_EXP 53
16108: PUSH
16109: LD_VAR 0 2
16113: ARRAY
16114: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16115: LD_VAR 0 1
16119: PPUSH
16120: LD_INT 13
16122: PPUSH
16123: CALL_OW 308
16127: IFFALSE 16232
// begin if not ru_alert then
16129: LD_EXP 60
16133: NOT
16134: IFFALSE 16144
// ru_alert := true ;
16136: LD_ADDR_EXP 60
16140: PUSH
16141: LD_INT 1
16143: ST_TO_ADDR
// if not See ( 1 , un ) then
16144: LD_INT 1
16146: PPUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL_OW 292
16156: NOT
16157: IFFALSE 16171
// SetLives ( un , 1000 ) ;
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_INT 1000
16166: PPUSH
16167: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16171: LD_ADDR_EXP 53
16175: PUSH
16176: LD_EXP 53
16180: PUSH
16181: LD_VAR 0 1
16185: DIFF
16186: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16187: LD_VAR 0 1
16191: PPUSH
16192: LD_INT 22
16194: PUSH
16195: LD_INT 3
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 30
16204: PUSH
16205: LD_INT 4
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 69
16220: PPUSH
16221: CALL 999 0 1
16225: PPUSH
16226: CALL_OW 120
// continue ;
16230: GO 16096
// end ; if IsOk ( un ) and not HasTask ( un ) then
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 302
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 314
16251: NOT
16252: AND
16253: IFFALSE 16346
// begin for j = 1 to ru_firepoints_south [ i ] do
16255: LD_ADDR_VAR 0 3
16259: PUSH
16260: DOUBLE
16261: LD_INT 1
16263: DEC
16264: ST_TO_ADDR
16265: LD_EXP 59
16269: PUSH
16270: LD_VAR 0 2
16274: ARRAY
16275: PUSH
16276: FOR_TO
16277: IFFALSE 16344
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16279: LD_VAR 0 1
16283: PPUSH
16284: LD_EXP 59
16288: PUSH
16289: LD_VAR 0 2
16293: ARRAY
16294: PUSH
16295: LD_VAR 0 3
16299: ARRAY
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: PPUSH
16305: LD_EXP 59
16309: PUSH
16310: LD_VAR 0 2
16314: ARRAY
16315: PUSH
16316: LD_VAR 0 3
16320: ARRAY
16321: PUSH
16322: LD_INT 2
16324: ARRAY
16325: PPUSH
16326: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16330: LD_VAR 0 1
16334: PPUSH
16335: LD_INT 70
16337: PPUSH
16338: CALL_OW 202
// end ;
16342: GO 16276
16344: POP
16345: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 256
16355: PUSH
16356: LD_INT 700
16358: LESS
16359: PUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: LD_INT 13
16367: PPUSH
16368: CALL_OW 308
16372: NOT
16373: AND
16374: IFFALSE 16426
// begin ComMoveToArea ( un , retreatArea ) ;
16376: LD_VAR 0 1
16380: PPUSH
16381: LD_INT 13
16383: PPUSH
16384: CALL_OW 113
// if not ru_alert_xy then
16388: LD_EXP 61
16392: NOT
16393: IFFALSE 16424
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16395: LD_ADDR_EXP 61
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 250
16409: PUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 251
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: ST_TO_ADDR
// end else
16424: GO 16495
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16426: LD_VAR 0 1
16430: PPUSH
16431: LD_VAR 0 4
16435: PPUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 74
16445: PPUSH
16446: CALL_OW 296
16450: PUSH
16451: LD_INT 9
16453: LESS
16454: PUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 256
16464: PUSH
16465: LD_INT 500
16467: GREATER
16468: AND
16469: IFFALSE 16495
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16471: LD_VAR 0 1
16475: PPUSH
16476: LD_VAR 0 4
16480: PPUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 74
16490: PPUSH
16491: CALL_OW 115
// end ;
16495: GO 16096
16497: POP
16498: POP
// end ;
16499: PPOPN 4
16501: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16502: LD_EXP 60
16506: PUSH
16507: LD_EXP 61
16511: AND
16512: PUSH
16513: LD_EXP 31
16517: NOT
16518: AND
16519: PUSH
16520: LD_EXP 32
16524: NOT
16525: AND
16526: IFFALSE 16736
16528: GO 16530
16530: DISABLE
16531: LD_INT 0
16533: PPUSH
16534: PPUSH
// begin enable ;
16535: ENABLE
// if not ru_vehicles then
16536: LD_EXP 56
16540: NOT
16541: IFFALSE 16545
// exit ;
16543: GO 16736
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16545: LD_ADDR_VAR 0 2
16549: PUSH
16550: LD_INT 81
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PPUSH
16560: CALL_OW 69
16564: ST_TO_ADDR
// if ru_vehicles then
16565: LD_EXP 56
16569: IFFALSE 16736
// begin for i in ru_vehicles do
16571: LD_ADDR_VAR 0 1
16575: PUSH
16576: LD_EXP 56
16580: PUSH
16581: FOR_IN
16582: IFFALSE 16734
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 302
16593: PUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 74
16613: PPUSH
16614: CALL_OW 296
16618: PUSH
16619: LD_INT 9
16621: LESS
16622: AND
16623: IFFALSE 16649
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_VAR 0 2
16634: PPUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 74
16644: PPUSH
16645: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 314
16658: NOT
16659: PUSH
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 302
16669: AND
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: LD_EXP 61
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: LD_EXP 61
16689: PUSH
16690: LD_INT 2
16692: ARRAY
16693: PPUSH
16694: CALL_OW 297
16698: PUSH
16699: LD_INT 10
16701: GREATER
16702: AND
16703: IFFALSE 16732
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: LD_EXP 61
16714: PUSH
16715: LD_INT 1
16717: ARRAY
16718: PPUSH
16719: LD_EXP 61
16723: PUSH
16724: LD_INT 2
16726: ARRAY
16727: PPUSH
16728: CALL_OW 114
// end ;
16732: GO 16581
16734: POP
16735: POP
// end ; end ;
16736: PPOPN 2
16738: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16739: LD_EXP 61
16743: PUSH
16744: LD_EXP 60
16748: AND
16749: PUSH
16750: LD_INT 3
16752: PPUSH
16753: CALL_OW 463
16757: NOT
16758: AND
16759: PUSH
16760: LD_EXP 31
16764: NOT
16765: AND
16766: PUSH
16767: LD_EXP 32
16771: NOT
16772: AND
16773: IFFALSE 16868
16775: GO 16777
16777: DISABLE
16778: LD_INT 0
16780: PPUSH
// begin enable ;
16781: ENABLE
// ru_alert_xy := false ;
16782: LD_ADDR_EXP 61
16786: PUSH
16787: LD_INT 0
16789: ST_TO_ADDR
// ru_alert := false ;
16790: LD_ADDR_EXP 60
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// if ru_vehicles then
16798: LD_EXP 56
16802: IFFALSE 16868
// for i in ru_vehicles do
16804: LD_ADDR_VAR 0 1
16808: PUSH
16809: LD_EXP 56
16813: PUSH
16814: FOR_IN
16815: IFFALSE 16866
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 302
16826: PUSH
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_INT 89
16834: PPUSH
16835: LD_INT 36
16837: PPUSH
16838: CALL_OW 297
16842: PUSH
16843: LD_INT 10
16845: GREATER
16846: AND
16847: IFFALSE 16864
// ComMoveXY ( i , 89 , 36 ) ;
16849: LD_VAR 0 1
16853: PPUSH
16854: LD_INT 89
16856: PPUSH
16857: LD_INT 36
16859: PPUSH
16860: CALL_OW 111
16864: GO 16814
16866: POP
16867: POP
// end ;
16868: PPOPN 1
16870: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16871: LD_EXP 55
16875: PUSH
16876: LD_EXP 31
16880: NOT
16881: AND
16882: PUSH
16883: LD_EXP 32
16887: NOT
16888: AND
16889: IFFALSE 17173
16891: GO 16893
16893: DISABLE
16894: LD_INT 0
16896: PPUSH
16897: PPUSH
16898: PPUSH
// begin enable ;
16899: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16900: LD_ADDR_VAR 0 3
16904: PUSH
16905: LD_INT 81
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PPUSH
16915: CALL_OW 69
16919: ST_TO_ADDR
// for i = 1 to ru_forest do
16920: LD_ADDR_VAR 0 1
16924: PUSH
16925: DOUBLE
16926: LD_INT 1
16928: DEC
16929: ST_TO_ADDR
16930: LD_EXP 55
16934: PUSH
16935: FOR_TO
16936: IFFALSE 17171
// begin un := ru_forest [ i ] ;
16938: LD_ADDR_VAR 0 2
16942: PUSH
16943: LD_EXP 55
16947: PUSH
16948: LD_VAR 0 1
16952: ARRAY
16953: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16954: LD_VAR 0 2
16958: PPUSH
16959: LD_INT 13
16961: PPUSH
16962: CALL_OW 308
16966: IFFALSE 17056
// begin if not See ( 1 , un ) then
16968: LD_INT 1
16970: PPUSH
16971: LD_VAR 0 2
16975: PPUSH
16976: CALL_OW 292
16980: NOT
16981: IFFALSE 16995
// SetLives ( un , 1000 ) ;
16983: LD_VAR 0 2
16987: PPUSH
16988: LD_INT 1000
16990: PPUSH
16991: CALL_OW 234
// ru_forest := ru_forest diff un ;
16995: LD_ADDR_EXP 55
16999: PUSH
17000: LD_EXP 55
17004: PUSH
17005: LD_VAR 0 2
17009: DIFF
17010: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17011: LD_VAR 0 2
17015: PPUSH
17016: LD_INT 22
17018: PUSH
17019: LD_INT 3
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 30
17028: PUSH
17029: LD_INT 4
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: PPUSH
17045: CALL 999 0 1
17049: PPUSH
17050: CALL_OW 120
// continue ;
17054: GO 16935
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17056: LD_VAR 0 2
17060: PPUSH
17061: CALL_OW 256
17065: PUSH
17066: LD_INT 700
17068: LESS
17069: PUSH
17070: LD_VAR 0 2
17074: PPUSH
17075: LD_INT 13
17077: PPUSH
17078: CALL_OW 308
17082: NOT
17083: AND
17084: IFFALSE 17100
// ComMoveToArea ( un , retreatArea ) else
17086: LD_VAR 0 2
17090: PPUSH
17091: LD_INT 13
17093: PPUSH
17094: CALL_OW 113
17098: GO 17169
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17100: LD_VAR 0 2
17104: PPUSH
17105: LD_VAR 0 3
17109: PPUSH
17110: LD_VAR 0 2
17114: PPUSH
17115: CALL_OW 74
17119: PPUSH
17120: CALL_OW 296
17124: PUSH
17125: LD_INT 9
17127: LESS
17128: PUSH
17129: LD_VAR 0 2
17133: PPUSH
17134: CALL_OW 256
17138: PUSH
17139: LD_INT 500
17141: GREATER
17142: AND
17143: IFFALSE 17169
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17145: LD_VAR 0 2
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_VAR 0 2
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
// end ;
17169: GO 16935
17171: POP
17172: POP
// end ;
17173: PPOPN 3
17175: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17176: LD_EXP 32
17180: NOT
17181: IFFALSE 17302
17183: GO 17185
17185: DISABLE
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
// begin enable ;
17190: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_INT 22
17198: PUSH
17199: LD_INT 3
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 21
17208: PUSH
17209: LD_INT 3
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: ST_TO_ADDR
// if filter then
17225: LD_VAR 0 2
17229: IFFALSE 17302
// for i in filter do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_VAR 0 2
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17300
// if GetLives ( i ) < 990 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 256
17253: PUSH
17254: LD_INT 990
17256: LESS
17257: IFFALSE 17298
// begin ru_alert := true ;
17259: LD_ADDR_EXP 60
17263: PUSH
17264: LD_INT 1
17266: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17267: LD_ADDR_EXP 61
17271: PUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 250
17281: PUSH
17282: LD_VAR 0 1
17286: PPUSH
17287: CALL_OW 251
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: ST_TO_ADDR
// break ;
17296: GO 17300
// end ;
17298: GO 17241
17300: POP
17301: POP
// end ;
17302: PPOPN 2
17304: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17305: LD_EXP 31
17309: IFFALSE 17458
17311: GO 17313
17313: DISABLE
17314: LD_INT 0
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17320: LD_ADDR_VAR 0 4
17324: PUSH
17325: LD_EXP 56
17329: PUSH
17330: LD_EXP 55
17334: ADD
17335: PUSH
17336: LD_EXP 53
17340: ADD
17341: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17342: LD_ADDR_VAR 0 3
17346: PUSH
17347: LD_INT 3
17349: PPUSH
17350: LD_INT 81
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PPUSH
17360: CALL_OW 70
17364: ST_TO_ADDR
// if filter and enemy then
17365: LD_VAR 0 4
17369: PUSH
17370: LD_VAR 0 3
17374: AND
17375: IFFALSE 17458
// repeat wait ( 0 0$01 ) ;
17377: LD_INT 35
17379: PPUSH
17380: CALL_OW 67
// for i in filter do
17384: LD_ADDR_VAR 0 1
17388: PUSH
17389: LD_VAR 0 4
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17423
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 74
17416: PPUSH
17417: CALL_OW 115
// end ;
17421: GO 17394
17423: POP
17424: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17425: LD_INT 3
17427: PPUSH
17428: LD_INT 81
17430: PUSH
17431: LD_INT 3
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PPUSH
17438: CALL_OW 70
17442: PUSH
17443: LD_INT 0
17445: EQUAL
17446: PUSH
17447: LD_VAR 0 4
17451: PUSH
17452: LD_INT 0
17454: EQUAL
17455: OR
17456: IFFALSE 17377
// end ;
17458: PPOPN 4
17460: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17461: LD_EXP 26
17465: PUSH
17466: LD_INT 22
17468: PUSH
17469: LD_INT 4
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 30
17478: PUSH
17479: LD_INT 4
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: LD_INT 57
17491: PUSH
17492: EMPTY
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: AND
17509: IFFALSE 17558
17511: GO 17513
17513: DISABLE
17514: LD_INT 0
17516: PPUSH
// begin if not ru_cornel_attack then
17517: LD_EXP 58
17521: NOT
17522: IFFALSE 17526
// exit ;
17524: GO 17558
// for i in ru_cornel_attack do
17526: LD_ADDR_VAR 0 1
17530: PUSH
17531: LD_EXP 58
17535: PUSH
17536: FOR_IN
17537: IFFALSE 17556
// ComAgressiveMove ( i , 258 , 119 ) ;
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_INT 258
17546: PPUSH
17547: LD_INT 119
17549: PPUSH
17550: CALL_OW 114
17554: GO 17536
17556: POP
17557: POP
// end ; end_of_file
17558: PPOPN 1
17560: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17561: LD_EXP 5
17565: PUSH
17566: LD_EXP 9
17570: NOT
17571: AND
17572: PUSH
17573: LD_EXP 20
17577: AND
17578: IFFALSE 17690
17580: GO 17582
17582: DISABLE
17583: LD_INT 0
17585: PPUSH
// begin enable ;
17586: ENABLE
// crates_counter := crates_counter - 50 ;
17587: LD_ADDR_EXP 20
17591: PUSH
17592: LD_EXP 20
17596: PUSH
17597: LD_INT 50
17599: MINUS
17600: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17601: LD_INT 8
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: LD_INT 5
17609: PPUSH
17610: CALL_OW 12
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17622: LD_INT 1785
17624: PPUSH
17625: LD_INT 2345
17627: PPUSH
17628: CALL_OW 12
17632: PPUSH
17633: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_INT 1
17644: PPUSH
17645: LD_OWVAR 67
17649: PUSH
17650: LD_INT 2
17652: PLUS
17653: PPUSH
17654: CALL_OW 12
17658: ST_TO_ADDR
// if r < 3 then
17659: LD_VAR 0 1
17663: PUSH
17664: LD_INT 3
17666: LESS
17667: IFFALSE 17690
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17669: LD_INT 4
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 5
17677: PPUSH
17678: CALL_OW 12
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 55
// end ;
17690: PPOPN 1
17692: END
// every 0 0$01 trigger cornel_active do
17693: LD_EXP 8
17697: IFFALSE 17786
17699: GO 17701
17701: DISABLE
// begin Wait ( 0 0$03 ) ;
17702: LD_INT 105
17704: PPUSH
17705: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17709: LD_INT 2
17711: PPUSH
17712: LD_INT 5
17714: PPUSH
17715: CALL_OW 12
17719: PPUSH
17720: LD_INT 10
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL_OW 55
// Wait ( 0 0$13 ) ;
17730: LD_INT 455
17732: PPUSH
17733: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17737: LD_INT 2
17739: PPUSH
17740: LD_INT 5
17742: PPUSH
17743: CALL_OW 12
17747: PPUSH
17748: LD_INT 10
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 55
// Wait ( 0 0$16 ) ;
17758: LD_INT 560
17760: PPUSH
17761: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17765: LD_INT 2
17767: PPUSH
17768: LD_INT 5
17770: PPUSH
17771: CALL_OW 12
17775: PPUSH
17776: LD_INT 10
17778: PPUSH
17779: LD_INT 1
17781: PPUSH
17782: CALL_OW 55
// end ; end_of_file
17786: END
// every 0 0$01 trigger cornel_prepared do
17787: LD_EXP 11
17791: IFFALSE 17850
17793: GO 17795
17795: DISABLE
// begin enable ;
17796: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17797: LD_ADDR_OWVAR 47
17801: PUSH
17802: LD_STRING #Am03-1
17804: PUSH
17805: LD_EXP 10
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17814: LD_ADDR_EXP 10
17818: PUSH
17819: LD_EXP 10
17823: PPUSH
17824: LD_STRING -
17826: PPUSH
17827: CALL 1069 0 2
17831: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17832: LD_EXP 10
17836: PUSH
17837: LD_INT 0
17839: EQUAL
17840: IFFALSE 17850
// begin Display_Strings := [ ] ;
17842: LD_ADDR_OWVAR 47
17846: PUSH
17847: EMPTY
17848: ST_TO_ADDR
// disable ;
17849: DISABLE
// end ; end ;
17850: END
// every 0 0$01 trigger debug and debug_strings do
17851: LD_EXP 1
17855: PUSH
17856: LD_OWVAR 48
17860: AND
17861: IFFALSE 17877
17863: GO 17865
17865: DISABLE
// begin enable ;
17866: ENABLE
// Display_Strings := debug_strings ;
17867: LD_ADDR_OWVAR 47
17871: PUSH
17872: LD_OWVAR 48
17876: ST_TO_ADDR
// end ; end_of_file
17877: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 255
17887: PUSH
17888: LD_INT 1
17890: EQUAL
17891: PUSH
17892: LD_EXP 14
17896: NOT
17897: AND
17898: IFFALSE 17908
// solar_builded := true ;
17900: LD_ADDR_EXP 14
17904: PUSH
17905: LD_INT 1
17907: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL_OW 255
17917: PUSH
17918: LD_INT 1
17920: EQUAL
17921: PUSH
17922: LD_EXP 29
17926: AND
17927: IFFALSE 17960
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ;
17929: LD_ADDR_EXP 29
17933: PUSH
17934: LD_EXP 29
17938: PUSH
17939: LD_INT 1750
17941: PUSH
17942: LD_INT 1400
17944: PUSH
17945: LD_INT 1225
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PUSH
17953: LD_OWVAR 67
17957: ARRAY
17958: PLUS
17959: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 255
17969: PUSH
17970: LD_INT 3
17972: EQUAL
17973: IFFALSE 17991
// ru_vehicles := ru_vehicles ^ veh ;
17975: LD_ADDR_EXP 56
17979: PUSH
17980: LD_EXP 56
17984: PUSH
17985: LD_VAR 0 1
17989: ADD
17990: ST_TO_ADDR
// end ;
17991: PPOPN 2
17993: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
17994: LD_VAR 0 1
17998: PUSH
17999: LD_EXP 53
18003: IN
18004: IFFALSE 18022
// ru_patrol := ru_patrol diff un ;
18006: LD_ADDR_EXP 53
18010: PUSH
18011: LD_EXP 53
18015: PUSH
18016: LD_VAR 0 1
18020: DIFF
18021: ST_TO_ADDR
// if un in ru_forest then
18022: LD_VAR 0 1
18026: PUSH
18027: LD_EXP 55
18031: IN
18032: IFFALSE 18050
// ru_forest := ru_forest diff un ;
18034: LD_ADDR_EXP 55
18038: PUSH
18039: LD_EXP 55
18043: PUSH
18044: LD_VAR 0 1
18048: DIFF
18049: ST_TO_ADDR
// if un in ru_vehicles then
18050: LD_VAR 0 1
18054: PUSH
18055: LD_EXP 56
18059: IN
18060: IFFALSE 18166
// begin ru_vehicles := ru_vehicles diff un ;
18062: LD_ADDR_EXP 56
18066: PUSH
18067: LD_EXP 56
18071: PUSH
18072: LD_VAR 0 1
18076: DIFF
18077: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18078: LD_ADDR_EXP 57
18082: PUSH
18083: LD_EXP 57
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 265
18097: PUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 262
18107: PUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL_OW 263
18117: PUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 264
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: ADD
18134: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18135: LD_ADDR_EXP 13
18139: PUSH
18140: LD_EXP 13
18144: PUSH
18145: LD_INT 1
18147: PLUS
18148: ST_TO_ADDR
// if ach_counter = 10 then
18149: LD_EXP 13
18153: PUSH
18154: LD_INT 10
18156: EQUAL
18157: IFFALSE 18166
// SetAchievement ( ACH_FAUST ) ;
18159: LD_STRING ACH_FAUST
18161: PPUSH
18162: CALL_OW 543
// end ; if un = Pokryshkin then
18166: LD_VAR 0 1
18170: PUSH
18171: LD_EXP 52
18175: EQUAL
18176: IFFALSE 18185
// SetAchievement ( ACH_POKR ) ;
18178: LD_STRING ACH_POKR
18180: PPUSH
18181: CALL_OW 543
// if un = JMM then
18185: LD_VAR 0 1
18189: PUSH
18190: LD_EXP 37
18194: EQUAL
18195: IFFALSE 18204
// YouLost ( 0 ) ;
18197: LD_STRING 0
18199: PPUSH
18200: CALL_OW 104
// if un = us_dep_west then
18204: LD_VAR 0 1
18208: PUSH
18209: LD_INT 1
18211: EQUAL
18212: IFFALSE 18221
// YouLost ( 2 ) ;
18214: LD_STRING 2
18216: PPUSH
18217: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18221: LD_VAR 0 1
18225: PPUSH
18226: CALL_OW 255
18230: PUSH
18231: LD_INT 8
18233: EQUAL
18234: PUSH
18235: LD_EXP 5
18239: NOT
18240: AND
18241: IFFALSE 18250
// YouLost ( 4 ) ;
18243: LD_STRING 4
18245: PPUSH
18246: CALL_OW 104
// if un in jmm_units then
18250: LD_VAR 0 1
18254: PUSH
18255: LD_EXP 4
18259: IN
18260: IFFALSE 18276
// lose_counter := lose_counter + 1 ;
18262: LD_ADDR_EXP 34
18266: PUSH
18267: LD_EXP 34
18271: PUSH
18272: LD_INT 1
18274: PLUS
18275: ST_TO_ADDR
// end ;
18276: PPOPN 1
18278: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
// begin if GetSide ( driver ) = 3 then
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 255
18292: PUSH
18293: LD_INT 3
18295: EQUAL
18296: IFFALSE 18374
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18298: LD_ADDR_VAR 0 6
18302: PUSH
18303: LD_INT 22
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 30
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 69
18331: PPUSH
18332: CALL 999 0 1
18336: ST_TO_ADDR
// if place then
18337: LD_VAR 0 6
18341: IFFALSE 18359
// ComEnterUnit ( driver , place ) else
18343: LD_VAR 0 1
18347: PPUSH
18348: LD_VAR 0 6
18352: PPUSH
18353: CALL_OW 120
18357: GO 18374
// ComMoveXY ( driver , 70 , 22 ) ;
18359: LD_VAR 0 1
18363: PPUSH
18364: LD_INT 70
18366: PPUSH
18367: LD_INT 22
18369: PPUSH
18370: CALL_OW 111
// end ; end ;
18374: PPOPN 6
18376: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 1
18384: EQUAL
18385: PUSH
18386: LD_VAR 0 2
18390: PUSH
18391: LD_INT 4
18393: EQUAL
18394: PUSH
18395: LD_VAR 0 2
18399: PUSH
18400: LD_INT 8
18402: EQUAL
18403: PUSH
18404: LD_EXP 5
18408: NOT
18409: AND
18410: OR
18411: AND
18412: IFFALSE 18421
// YouLost ( 5 ) ;
18414: LD_STRING 5
18416: PPUSH
18417: CALL_OW 104
// end ;
18421: PPOPN 2
18423: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18424: LD_EXP 36
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 21
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PPUSH
18453: CALL_OW 69
18457: PUSH
18458: LD_INT 22
18460: PUSH
18461: LD_INT 8
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 21
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PPUSH
18482: CALL_OW 69
18486: ADD
18487: PLUS
18488: PUSH
18489: LD_INT 5
18491: LESS
18492: IFFALSE 18504
18494: GO 18496
18496: DISABLE
// YouLost ( 1 ) ;
18497: LD_STRING 1
18499: PPUSH
18500: CALL_OW 104
18504: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18505: LD_INT 1
18507: PPUSH
18508: CALL_OW 255
18512: PUSH
18513: LD_INT 3
18515: EQUAL
18516: IFFALSE 18528
18518: GO 18520
18520: DISABLE
// YouLost ( 3 ) ; end_of_file
18521: LD_STRING 3
18523: PPUSH
18524: CALL_OW 104
18528: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18529: LD_INT 0
18531: PPUSH
// ar_crane := 88 ;
18532: LD_ADDR_EXP 68
18536: PUSH
18537: LD_INT 88
18539: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18540: LD_ADDR_EXP 63
18544: PUSH
18545: LD_INT 89
18547: ST_TO_ADDR
// us_hack := 99 ;
18548: LD_ADDR_EXP 64
18552: PUSH
18553: LD_INT 99
18555: ST_TO_ADDR
// us_artillery := 97 ;
18556: LD_ADDR_EXP 65
18560: PUSH
18561: LD_INT 97
18563: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18564: LD_ADDR_EXP 66
18568: PUSH
18569: LD_INT 91
18571: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18572: LD_ADDR_EXP 67
18576: PUSH
18577: LD_INT 92
18579: ST_TO_ADDR
// ru_radar := 98 ;
18580: LD_ADDR_EXP 62
18584: PUSH
18585: LD_INT 98
18587: ST_TO_ADDR
// tech_Artillery := 80 ;
18588: LD_ADDR_EXP 69
18592: PUSH
18593: LD_INT 80
18595: ST_TO_ADDR
// tech_RadMat := 81 ;
18596: LD_ADDR_EXP 70
18600: PUSH
18601: LD_INT 81
18603: ST_TO_ADDR
// tech_BasicTools := 82 ;
18604: LD_ADDR_EXP 71
18608: PUSH
18609: LD_INT 82
18611: ST_TO_ADDR
// tech_Cargo := 83 ;
18612: LD_ADDR_EXP 72
18616: PUSH
18617: LD_INT 83
18619: ST_TO_ADDR
// tech_Track := 84 ;
18620: LD_ADDR_EXP 73
18624: PUSH
18625: LD_INT 84
18627: ST_TO_ADDR
// tech_Crane := 85 ;
18628: LD_ADDR_EXP 74
18632: PUSH
18633: LD_INT 85
18635: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18636: LD_ADDR_EXP 75
18640: PUSH
18641: LD_INT 86
18643: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18644: LD_ADDR_EXP 76
18648: PUSH
18649: LD_INT 87
18651: ST_TO_ADDR
// end ;
18652: LD_VAR 0 1
18656: RET
// every 1 do
18657: GO 18659
18659: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18660: CALL 18529 0 0
18664: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18665: LD_VAR 0 2
18669: PUSH
18670: LD_INT 100
18672: EQUAL
18673: IFFALSE 19622
// begin if not StreamModeActive then
18675: LD_EXP 77
18679: NOT
18680: IFFALSE 18690
// StreamModeActive := true ;
18682: LD_ADDR_EXP 77
18686: PUSH
18687: LD_INT 1
18689: ST_TO_ADDR
// if p3 = 0 then
18690: LD_VAR 0 3
18694: PUSH
18695: LD_INT 0
18697: EQUAL
18698: IFFALSE 18704
// InitStreamMode ;
18700: CALL 19780 0 0
// if p3 = 1 then
18704: LD_VAR 0 3
18708: PUSH
18709: LD_INT 1
18711: EQUAL
18712: IFFALSE 18722
// sRocket := true ;
18714: LD_ADDR_EXP 82
18718: PUSH
18719: LD_INT 1
18721: ST_TO_ADDR
// if p3 = 2 then
18722: LD_VAR 0 3
18726: PUSH
18727: LD_INT 2
18729: EQUAL
18730: IFFALSE 18740
// sSpeed := true ;
18732: LD_ADDR_EXP 81
18736: PUSH
18737: LD_INT 1
18739: ST_TO_ADDR
// if p3 = 3 then
18740: LD_VAR 0 3
18744: PUSH
18745: LD_INT 3
18747: EQUAL
18748: IFFALSE 18758
// sEngine := true ;
18750: LD_ADDR_EXP 83
18754: PUSH
18755: LD_INT 1
18757: ST_TO_ADDR
// if p3 = 4 then
18758: LD_VAR 0 3
18762: PUSH
18763: LD_INT 4
18765: EQUAL
18766: IFFALSE 18776
// sSpec := true ;
18768: LD_ADDR_EXP 80
18772: PUSH
18773: LD_INT 1
18775: ST_TO_ADDR
// if p3 = 5 then
18776: LD_VAR 0 3
18780: PUSH
18781: LD_INT 5
18783: EQUAL
18784: IFFALSE 18794
// sLevel := true ;
18786: LD_ADDR_EXP 84
18790: PUSH
18791: LD_INT 1
18793: ST_TO_ADDR
// if p3 = 6 then
18794: LD_VAR 0 3
18798: PUSH
18799: LD_INT 6
18801: EQUAL
18802: IFFALSE 18812
// sArmoury := true ;
18804: LD_ADDR_EXP 85
18808: PUSH
18809: LD_INT 1
18811: ST_TO_ADDR
// if p3 = 7 then
18812: LD_VAR 0 3
18816: PUSH
18817: LD_INT 7
18819: EQUAL
18820: IFFALSE 18830
// sRadar := true ;
18822: LD_ADDR_EXP 86
18826: PUSH
18827: LD_INT 1
18829: ST_TO_ADDR
// if p3 = 8 then
18830: LD_VAR 0 3
18834: PUSH
18835: LD_INT 8
18837: EQUAL
18838: IFFALSE 18848
// sBunker := true ;
18840: LD_ADDR_EXP 87
18844: PUSH
18845: LD_INT 1
18847: ST_TO_ADDR
// if p3 = 9 then
18848: LD_VAR 0 3
18852: PUSH
18853: LD_INT 9
18855: EQUAL
18856: IFFALSE 18866
// sHack := true ;
18858: LD_ADDR_EXP 88
18862: PUSH
18863: LD_INT 1
18865: ST_TO_ADDR
// if p3 = 10 then
18866: LD_VAR 0 3
18870: PUSH
18871: LD_INT 10
18873: EQUAL
18874: IFFALSE 18884
// sFire := true ;
18876: LD_ADDR_EXP 89
18880: PUSH
18881: LD_INT 1
18883: ST_TO_ADDR
// if p3 = 11 then
18884: LD_VAR 0 3
18888: PUSH
18889: LD_INT 11
18891: EQUAL
18892: IFFALSE 18902
// sRefresh := true ;
18894: LD_ADDR_EXP 90
18898: PUSH
18899: LD_INT 1
18901: ST_TO_ADDR
// if p3 = 12 then
18902: LD_VAR 0 3
18906: PUSH
18907: LD_INT 12
18909: EQUAL
18910: IFFALSE 18920
// sExp := true ;
18912: LD_ADDR_EXP 91
18916: PUSH
18917: LD_INT 1
18919: ST_TO_ADDR
// if p3 = 13 then
18920: LD_VAR 0 3
18924: PUSH
18925: LD_INT 13
18927: EQUAL
18928: IFFALSE 18938
// sDepot := true ;
18930: LD_ADDR_EXP 92
18934: PUSH
18935: LD_INT 1
18937: ST_TO_ADDR
// if p3 = 14 then
18938: LD_VAR 0 3
18942: PUSH
18943: LD_INT 14
18945: EQUAL
18946: IFFALSE 18956
// sFlag := true ;
18948: LD_ADDR_EXP 93
18952: PUSH
18953: LD_INT 1
18955: ST_TO_ADDR
// if p3 = 15 then
18956: LD_VAR 0 3
18960: PUSH
18961: LD_INT 15
18963: EQUAL
18964: IFFALSE 18974
// sKamikadze := true ;
18966: LD_ADDR_EXP 101
18970: PUSH
18971: LD_INT 1
18973: ST_TO_ADDR
// if p3 = 16 then
18974: LD_VAR 0 3
18978: PUSH
18979: LD_INT 16
18981: EQUAL
18982: IFFALSE 18992
// sTroll := true ;
18984: LD_ADDR_EXP 102
18988: PUSH
18989: LD_INT 1
18991: ST_TO_ADDR
// if p3 = 17 then
18992: LD_VAR 0 3
18996: PUSH
18997: LD_INT 17
18999: EQUAL
19000: IFFALSE 19010
// sSlow := true ;
19002: LD_ADDR_EXP 103
19006: PUSH
19007: LD_INT 1
19009: ST_TO_ADDR
// if p3 = 18 then
19010: LD_VAR 0 3
19014: PUSH
19015: LD_INT 18
19017: EQUAL
19018: IFFALSE 19028
// sLack := true ;
19020: LD_ADDR_EXP 104
19024: PUSH
19025: LD_INT 1
19027: ST_TO_ADDR
// if p3 = 19 then
19028: LD_VAR 0 3
19032: PUSH
19033: LD_INT 19
19035: EQUAL
19036: IFFALSE 19046
// sTank := true ;
19038: LD_ADDR_EXP 106
19042: PUSH
19043: LD_INT 1
19045: ST_TO_ADDR
// if p3 = 20 then
19046: LD_VAR 0 3
19050: PUSH
19051: LD_INT 20
19053: EQUAL
19054: IFFALSE 19064
// sRemote := true ;
19056: LD_ADDR_EXP 107
19060: PUSH
19061: LD_INT 1
19063: ST_TO_ADDR
// if p3 = 21 then
19064: LD_VAR 0 3
19068: PUSH
19069: LD_INT 21
19071: EQUAL
19072: IFFALSE 19082
// sPowell := true ;
19074: LD_ADDR_EXP 108
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// if p3 = 22 then
19082: LD_VAR 0 3
19086: PUSH
19087: LD_INT 22
19089: EQUAL
19090: IFFALSE 19100
// sTeleport := true ;
19092: LD_ADDR_EXP 111
19096: PUSH
19097: LD_INT 1
19099: ST_TO_ADDR
// if p3 = 23 then
19100: LD_VAR 0 3
19104: PUSH
19105: LD_INT 23
19107: EQUAL
19108: IFFALSE 19118
// sOilTower := true ;
19110: LD_ADDR_EXP 113
19114: PUSH
19115: LD_INT 1
19117: ST_TO_ADDR
// if p3 = 24 then
19118: LD_VAR 0 3
19122: PUSH
19123: LD_INT 24
19125: EQUAL
19126: IFFALSE 19136
// sShovel := true ;
19128: LD_ADDR_EXP 114
19132: PUSH
19133: LD_INT 1
19135: ST_TO_ADDR
// if p3 = 25 then
19136: LD_VAR 0 3
19140: PUSH
19141: LD_INT 25
19143: EQUAL
19144: IFFALSE 19154
// sSheik := true ;
19146: LD_ADDR_EXP 115
19150: PUSH
19151: LD_INT 1
19153: ST_TO_ADDR
// if p3 = 26 then
19154: LD_VAR 0 3
19158: PUSH
19159: LD_INT 26
19161: EQUAL
19162: IFFALSE 19172
// sEarthquake := true ;
19164: LD_ADDR_EXP 117
19168: PUSH
19169: LD_INT 1
19171: ST_TO_ADDR
// if p3 = 27 then
19172: LD_VAR 0 3
19176: PUSH
19177: LD_INT 27
19179: EQUAL
19180: IFFALSE 19190
// sAI := true ;
19182: LD_ADDR_EXP 118
19186: PUSH
19187: LD_INT 1
19189: ST_TO_ADDR
// if p3 = 28 then
19190: LD_VAR 0 3
19194: PUSH
19195: LD_INT 28
19197: EQUAL
19198: IFFALSE 19208
// sCargo := true ;
19200: LD_ADDR_EXP 121
19204: PUSH
19205: LD_INT 1
19207: ST_TO_ADDR
// if p3 = 29 then
19208: LD_VAR 0 3
19212: PUSH
19213: LD_INT 29
19215: EQUAL
19216: IFFALSE 19226
// sDLaser := true ;
19218: LD_ADDR_EXP 122
19222: PUSH
19223: LD_INT 1
19225: ST_TO_ADDR
// if p3 = 30 then
19226: LD_VAR 0 3
19230: PUSH
19231: LD_INT 30
19233: EQUAL
19234: IFFALSE 19244
// sExchange := true ;
19236: LD_ADDR_EXP 123
19240: PUSH
19241: LD_INT 1
19243: ST_TO_ADDR
// if p3 = 31 then
19244: LD_VAR 0 3
19248: PUSH
19249: LD_INT 31
19251: EQUAL
19252: IFFALSE 19262
// sFac := true ;
19254: LD_ADDR_EXP 124
19258: PUSH
19259: LD_INT 1
19261: ST_TO_ADDR
// if p3 = 32 then
19262: LD_VAR 0 3
19266: PUSH
19267: LD_INT 32
19269: EQUAL
19270: IFFALSE 19280
// sPower := true ;
19272: LD_ADDR_EXP 125
19276: PUSH
19277: LD_INT 1
19279: ST_TO_ADDR
// if p3 = 33 then
19280: LD_VAR 0 3
19284: PUSH
19285: LD_INT 33
19287: EQUAL
19288: IFFALSE 19298
// sRandom := true ;
19290: LD_ADDR_EXP 126
19294: PUSH
19295: LD_INT 1
19297: ST_TO_ADDR
// if p3 = 34 then
19298: LD_VAR 0 3
19302: PUSH
19303: LD_INT 34
19305: EQUAL
19306: IFFALSE 19316
// sShield := true ;
19308: LD_ADDR_EXP 127
19312: PUSH
19313: LD_INT 1
19315: ST_TO_ADDR
// if p3 = 35 then
19316: LD_VAR 0 3
19320: PUSH
19321: LD_INT 35
19323: EQUAL
19324: IFFALSE 19334
// sTime := true ;
19326: LD_ADDR_EXP 128
19330: PUSH
19331: LD_INT 1
19333: ST_TO_ADDR
// if p3 = 36 then
19334: LD_VAR 0 3
19338: PUSH
19339: LD_INT 36
19341: EQUAL
19342: IFFALSE 19352
// sTools := true ;
19344: LD_ADDR_EXP 129
19348: PUSH
19349: LD_INT 1
19351: ST_TO_ADDR
// if p3 = 101 then
19352: LD_VAR 0 3
19356: PUSH
19357: LD_INT 101
19359: EQUAL
19360: IFFALSE 19370
// sSold := true ;
19362: LD_ADDR_EXP 94
19366: PUSH
19367: LD_INT 1
19369: ST_TO_ADDR
// if p3 = 102 then
19370: LD_VAR 0 3
19374: PUSH
19375: LD_INT 102
19377: EQUAL
19378: IFFALSE 19388
// sDiff := true ;
19380: LD_ADDR_EXP 95
19384: PUSH
19385: LD_INT 1
19387: ST_TO_ADDR
// if p3 = 103 then
19388: LD_VAR 0 3
19392: PUSH
19393: LD_INT 103
19395: EQUAL
19396: IFFALSE 19406
// sFog := true ;
19398: LD_ADDR_EXP 98
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
// if p3 = 104 then
19406: LD_VAR 0 3
19410: PUSH
19411: LD_INT 104
19413: EQUAL
19414: IFFALSE 19424
// sReset := true ;
19416: LD_ADDR_EXP 99
19420: PUSH
19421: LD_INT 1
19423: ST_TO_ADDR
// if p3 = 105 then
19424: LD_VAR 0 3
19428: PUSH
19429: LD_INT 105
19431: EQUAL
19432: IFFALSE 19442
// sSun := true ;
19434: LD_ADDR_EXP 100
19438: PUSH
19439: LD_INT 1
19441: ST_TO_ADDR
// if p3 = 106 then
19442: LD_VAR 0 3
19446: PUSH
19447: LD_INT 106
19449: EQUAL
19450: IFFALSE 19460
// sTiger := true ;
19452: LD_ADDR_EXP 96
19456: PUSH
19457: LD_INT 1
19459: ST_TO_ADDR
// if p3 = 107 then
19460: LD_VAR 0 3
19464: PUSH
19465: LD_INT 107
19467: EQUAL
19468: IFFALSE 19478
// sBomb := true ;
19470: LD_ADDR_EXP 97
19474: PUSH
19475: LD_INT 1
19477: ST_TO_ADDR
// if p3 = 108 then
19478: LD_VAR 0 3
19482: PUSH
19483: LD_INT 108
19485: EQUAL
19486: IFFALSE 19496
// sWound := true ;
19488: LD_ADDR_EXP 105
19492: PUSH
19493: LD_INT 1
19495: ST_TO_ADDR
// if p3 = 109 then
19496: LD_VAR 0 3
19500: PUSH
19501: LD_INT 109
19503: EQUAL
19504: IFFALSE 19514
// sBetray := true ;
19506: LD_ADDR_EXP 109
19510: PUSH
19511: LD_INT 1
19513: ST_TO_ADDR
// if p3 = 110 then
19514: LD_VAR 0 3
19518: PUSH
19519: LD_INT 110
19521: EQUAL
19522: IFFALSE 19532
// sContamin := true ;
19524: LD_ADDR_EXP 110
19528: PUSH
19529: LD_INT 1
19531: ST_TO_ADDR
// if p3 = 111 then
19532: LD_VAR 0 3
19536: PUSH
19537: LD_INT 111
19539: EQUAL
19540: IFFALSE 19550
// sOil := true ;
19542: LD_ADDR_EXP 112
19546: PUSH
19547: LD_INT 1
19549: ST_TO_ADDR
// if p3 = 112 then
19550: LD_VAR 0 3
19554: PUSH
19555: LD_INT 112
19557: EQUAL
19558: IFFALSE 19568
// sStu := true ;
19560: LD_ADDR_EXP 116
19564: PUSH
19565: LD_INT 1
19567: ST_TO_ADDR
// if p3 = 113 then
19568: LD_VAR 0 3
19572: PUSH
19573: LD_INT 113
19575: EQUAL
19576: IFFALSE 19586
// sBazooka := true ;
19578: LD_ADDR_EXP 119
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
// if p3 = 114 then
19586: LD_VAR 0 3
19590: PUSH
19591: LD_INT 114
19593: EQUAL
19594: IFFALSE 19604
// sMortar := true ;
19596: LD_ADDR_EXP 120
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// if p3 = 115 then
19604: LD_VAR 0 3
19608: PUSH
19609: LD_INT 115
19611: EQUAL
19612: IFFALSE 19622
// sRanger := true ;
19614: LD_ADDR_EXP 130
19618: PUSH
19619: LD_INT 1
19621: ST_TO_ADDR
// end ; if p2 = 101 then
19622: LD_VAR 0 2
19626: PUSH
19627: LD_INT 101
19629: EQUAL
19630: IFFALSE 19758
// begin case p3 of 1 :
19632: LD_VAR 0 3
19636: PUSH
19637: LD_INT 1
19639: DOUBLE
19640: EQUAL
19641: IFTRUE 19645
19643: GO 19652
19645: POP
// hHackUnlimitedResources ; 2 :
19646: CALL 30793 0 0
19650: GO 19758
19652: LD_INT 2
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19667
19660: POP
// hHackSetLevel10 ; 3 :
19661: CALL 30926 0 0
19665: GO 19758
19667: LD_INT 3
19669: DOUBLE
19670: EQUAL
19671: IFTRUE 19675
19673: GO 19682
19675: POP
// hHackSetLevel10YourUnits ; 4 :
19676: CALL 31011 0 0
19680: GO 19758
19682: LD_INT 4
19684: DOUBLE
19685: EQUAL
19686: IFTRUE 19690
19688: GO 19697
19690: POP
// hHackInvincible ; 5 :
19691: CALL 31459 0 0
19695: GO 19758
19697: LD_INT 5
19699: DOUBLE
19700: EQUAL
19701: IFTRUE 19705
19703: GO 19712
19705: POP
// hHackInvisible ; 6 :
19706: CALL 31570 0 0
19710: GO 19758
19712: LD_INT 6
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19727
19720: POP
// hHackChangeYourSide ; 7 :
19721: CALL 31627 0 0
19725: GO 19758
19727: LD_INT 7
19729: DOUBLE
19730: EQUAL
19731: IFTRUE 19735
19733: GO 19742
19735: POP
// hHackChangeUnitSide ; 8 :
19736: CALL 31669 0 0
19740: GO 19758
19742: LD_INT 8
19744: DOUBLE
19745: EQUAL
19746: IFTRUE 19750
19748: GO 19757
19750: POP
// hHackFog ; end ;
19751: CALL 31770 0 0
19755: GO 19758
19757: POP
// end ; end ;
19758: PPOPN 6
19760: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19761: GO 19763
19763: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19764: LD_STRING initStreamRollete();
19766: PPUSH
19767: CALL_OW 559
// InitStreamMode ;
19771: CALL 19780 0 0
// DefineStreamItems ( ) ;
19775: CALL 20220 0 0
// end ;
19779: END
// function InitStreamMode ; begin
19780: LD_INT 0
19782: PPUSH
// streamModeActive := false ;
19783: LD_ADDR_EXP 77
19787: PUSH
19788: LD_INT 0
19790: ST_TO_ADDR
// normalCounter := 36 ;
19791: LD_ADDR_EXP 78
19795: PUSH
19796: LD_INT 36
19798: ST_TO_ADDR
// hardcoreCounter := 16 ;
19799: LD_ADDR_EXP 79
19803: PUSH
19804: LD_INT 16
19806: ST_TO_ADDR
// sRocket := false ;
19807: LD_ADDR_EXP 82
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
// sSpeed := false ;
19815: LD_ADDR_EXP 81
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// sEngine := false ;
19823: LD_ADDR_EXP 83
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// sSpec := false ;
19831: LD_ADDR_EXP 80
19835: PUSH
19836: LD_INT 0
19838: ST_TO_ADDR
// sLevel := false ;
19839: LD_ADDR_EXP 84
19843: PUSH
19844: LD_INT 0
19846: ST_TO_ADDR
// sArmoury := false ;
19847: LD_ADDR_EXP 85
19851: PUSH
19852: LD_INT 0
19854: ST_TO_ADDR
// sRadar := false ;
19855: LD_ADDR_EXP 86
19859: PUSH
19860: LD_INT 0
19862: ST_TO_ADDR
// sBunker := false ;
19863: LD_ADDR_EXP 87
19867: PUSH
19868: LD_INT 0
19870: ST_TO_ADDR
// sHack := false ;
19871: LD_ADDR_EXP 88
19875: PUSH
19876: LD_INT 0
19878: ST_TO_ADDR
// sFire := false ;
19879: LD_ADDR_EXP 89
19883: PUSH
19884: LD_INT 0
19886: ST_TO_ADDR
// sRefresh := false ;
19887: LD_ADDR_EXP 90
19891: PUSH
19892: LD_INT 0
19894: ST_TO_ADDR
// sExp := false ;
19895: LD_ADDR_EXP 91
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
// sDepot := false ;
19903: LD_ADDR_EXP 92
19907: PUSH
19908: LD_INT 0
19910: ST_TO_ADDR
// sFlag := false ;
19911: LD_ADDR_EXP 93
19915: PUSH
19916: LD_INT 0
19918: ST_TO_ADDR
// sKamikadze := false ;
19919: LD_ADDR_EXP 101
19923: PUSH
19924: LD_INT 0
19926: ST_TO_ADDR
// sTroll := false ;
19927: LD_ADDR_EXP 102
19931: PUSH
19932: LD_INT 0
19934: ST_TO_ADDR
// sSlow := false ;
19935: LD_ADDR_EXP 103
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// sLack := false ;
19943: LD_ADDR_EXP 104
19947: PUSH
19948: LD_INT 0
19950: ST_TO_ADDR
// sTank := false ;
19951: LD_ADDR_EXP 106
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// sRemote := false ;
19959: LD_ADDR_EXP 107
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// sPowell := false ;
19967: LD_ADDR_EXP 108
19971: PUSH
19972: LD_INT 0
19974: ST_TO_ADDR
// sTeleport := false ;
19975: LD_ADDR_EXP 111
19979: PUSH
19980: LD_INT 0
19982: ST_TO_ADDR
// sOilTower := false ;
19983: LD_ADDR_EXP 113
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
// sShovel := false ;
19991: LD_ADDR_EXP 114
19995: PUSH
19996: LD_INT 0
19998: ST_TO_ADDR
// sSheik := false ;
19999: LD_ADDR_EXP 115
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
// sEarthquake := false ;
20007: LD_ADDR_EXP 117
20011: PUSH
20012: LD_INT 0
20014: ST_TO_ADDR
// sAI := false ;
20015: LD_ADDR_EXP 118
20019: PUSH
20020: LD_INT 0
20022: ST_TO_ADDR
// sCargo := false ;
20023: LD_ADDR_EXP 121
20027: PUSH
20028: LD_INT 0
20030: ST_TO_ADDR
// sDLaser := false ;
20031: LD_ADDR_EXP 122
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// sExchange := false ;
20039: LD_ADDR_EXP 123
20043: PUSH
20044: LD_INT 0
20046: ST_TO_ADDR
// sFac := false ;
20047: LD_ADDR_EXP 124
20051: PUSH
20052: LD_INT 0
20054: ST_TO_ADDR
// sPower := false ;
20055: LD_ADDR_EXP 125
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// sRandom := false ;
20063: LD_ADDR_EXP 126
20067: PUSH
20068: LD_INT 0
20070: ST_TO_ADDR
// sShield := false ;
20071: LD_ADDR_EXP 127
20075: PUSH
20076: LD_INT 0
20078: ST_TO_ADDR
// sTime := false ;
20079: LD_ADDR_EXP 128
20083: PUSH
20084: LD_INT 0
20086: ST_TO_ADDR
// sTools := false ;
20087: LD_ADDR_EXP 129
20091: PUSH
20092: LD_INT 0
20094: ST_TO_ADDR
// sSold := false ;
20095: LD_ADDR_EXP 94
20099: PUSH
20100: LD_INT 0
20102: ST_TO_ADDR
// sDiff := false ;
20103: LD_ADDR_EXP 95
20107: PUSH
20108: LD_INT 0
20110: ST_TO_ADDR
// sFog := false ;
20111: LD_ADDR_EXP 98
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// sReset := false ;
20119: LD_ADDR_EXP 99
20123: PUSH
20124: LD_INT 0
20126: ST_TO_ADDR
// sSun := false ;
20127: LD_ADDR_EXP 100
20131: PUSH
20132: LD_INT 0
20134: ST_TO_ADDR
// sTiger := false ;
20135: LD_ADDR_EXP 96
20139: PUSH
20140: LD_INT 0
20142: ST_TO_ADDR
// sBomb := false ;
20143: LD_ADDR_EXP 97
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// sWound := false ;
20151: LD_ADDR_EXP 105
20155: PUSH
20156: LD_INT 0
20158: ST_TO_ADDR
// sBetray := false ;
20159: LD_ADDR_EXP 109
20163: PUSH
20164: LD_INT 0
20166: ST_TO_ADDR
// sContamin := false ;
20167: LD_ADDR_EXP 110
20171: PUSH
20172: LD_INT 0
20174: ST_TO_ADDR
// sOil := false ;
20175: LD_ADDR_EXP 112
20179: PUSH
20180: LD_INT 0
20182: ST_TO_ADDR
// sStu := false ;
20183: LD_ADDR_EXP 116
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// sBazooka := false ;
20191: LD_ADDR_EXP 119
20195: PUSH
20196: LD_INT 0
20198: ST_TO_ADDR
// sMortar := false ;
20199: LD_ADDR_EXP 120
20203: PUSH
20204: LD_INT 0
20206: ST_TO_ADDR
// sRanger := false ;
20207: LD_ADDR_EXP 130
20211: PUSH
20212: LD_INT 0
20214: ST_TO_ADDR
// end ;
20215: LD_VAR 0 1
20219: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20220: LD_INT 0
20222: PPUSH
20223: PPUSH
20224: PPUSH
20225: PPUSH
20226: PPUSH
// result := [ ] ;
20227: LD_ADDR_VAR 0 1
20231: PUSH
20232: EMPTY
20233: ST_TO_ADDR
// if campaign_id = 1 then
20234: LD_OWVAR 69
20238: PUSH
20239: LD_INT 1
20241: EQUAL
20242: IFFALSE 23180
// begin case mission_number of 1 :
20244: LD_OWVAR 70
20248: PUSH
20249: LD_INT 1
20251: DOUBLE
20252: EQUAL
20253: IFTRUE 20257
20255: GO 20321
20257: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20258: LD_ADDR_VAR 0 1
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: LD_INT 4
20268: PUSH
20269: LD_INT 11
20271: PUSH
20272: LD_INT 12
20274: PUSH
20275: LD_INT 15
20277: PUSH
20278: LD_INT 16
20280: PUSH
20281: LD_INT 22
20283: PUSH
20284: LD_INT 23
20286: PUSH
20287: LD_INT 26
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 101
20303: PUSH
20304: LD_INT 102
20306: PUSH
20307: LD_INT 106
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: LIST
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: ST_TO_ADDR
20319: GO 23178
20321: LD_INT 2
20323: DOUBLE
20324: EQUAL
20325: IFTRUE 20329
20327: GO 20401
20329: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20330: LD_ADDR_VAR 0 1
20334: PUSH
20335: LD_INT 2
20337: PUSH
20338: LD_INT 4
20340: PUSH
20341: LD_INT 11
20343: PUSH
20344: LD_INT 12
20346: PUSH
20347: LD_INT 15
20349: PUSH
20350: LD_INT 16
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_INT 23
20358: PUSH
20359: LD_INT 26
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 101
20375: PUSH
20376: LD_INT 102
20378: PUSH
20379: LD_INT 105
20381: PUSH
20382: LD_INT 106
20384: PUSH
20385: LD_INT 108
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: ST_TO_ADDR
20399: GO 23178
20401: LD_INT 3
20403: DOUBLE
20404: EQUAL
20405: IFTRUE 20409
20407: GO 20485
20409: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20410: LD_ADDR_VAR 0 1
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: LD_INT 4
20420: PUSH
20421: LD_INT 5
20423: PUSH
20424: LD_INT 11
20426: PUSH
20427: LD_INT 12
20429: PUSH
20430: LD_INT 15
20432: PUSH
20433: LD_INT 16
20435: PUSH
20436: LD_INT 22
20438: PUSH
20439: LD_INT 26
20441: PUSH
20442: LD_INT 36
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 101
20459: PUSH
20460: LD_INT 102
20462: PUSH
20463: LD_INT 105
20465: PUSH
20466: LD_INT 106
20468: PUSH
20469: LD_INT 108
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: ST_TO_ADDR
20483: GO 23178
20485: LD_INT 4
20487: DOUBLE
20488: EQUAL
20489: IFTRUE 20493
20491: GO 20577
20493: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20494: LD_ADDR_VAR 0 1
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 4
20504: PUSH
20505: LD_INT 5
20507: PUSH
20508: LD_INT 8
20510: PUSH
20511: LD_INT 11
20513: PUSH
20514: LD_INT 12
20516: PUSH
20517: LD_INT 15
20519: PUSH
20520: LD_INT 16
20522: PUSH
20523: LD_INT 22
20525: PUSH
20526: LD_INT 23
20528: PUSH
20529: LD_INT 26
20531: PUSH
20532: LD_INT 36
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 101
20551: PUSH
20552: LD_INT 102
20554: PUSH
20555: LD_INT 105
20557: PUSH
20558: LD_INT 106
20560: PUSH
20561: LD_INT 108
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: ST_TO_ADDR
20575: GO 23178
20577: LD_INT 5
20579: DOUBLE
20580: EQUAL
20581: IFTRUE 20585
20583: GO 20685
20585: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20586: LD_ADDR_VAR 0 1
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 4
20596: PUSH
20597: LD_INT 5
20599: PUSH
20600: LD_INT 6
20602: PUSH
20603: LD_INT 8
20605: PUSH
20606: LD_INT 11
20608: PUSH
20609: LD_INT 12
20611: PUSH
20612: LD_INT 15
20614: PUSH
20615: LD_INT 16
20617: PUSH
20618: LD_INT 22
20620: PUSH
20621: LD_INT 23
20623: PUSH
20624: LD_INT 25
20626: PUSH
20627: LD_INT 26
20629: PUSH
20630: LD_INT 36
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 101
20651: PUSH
20652: LD_INT 102
20654: PUSH
20655: LD_INT 105
20657: PUSH
20658: LD_INT 106
20660: PUSH
20661: LD_INT 108
20663: PUSH
20664: LD_INT 109
20666: PUSH
20667: LD_INT 112
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: ST_TO_ADDR
20683: GO 23178
20685: LD_INT 6
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20813
20693: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20694: LD_ADDR_VAR 0 1
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: LD_INT 4
20704: PUSH
20705: LD_INT 5
20707: PUSH
20708: LD_INT 6
20710: PUSH
20711: LD_INT 8
20713: PUSH
20714: LD_INT 11
20716: PUSH
20717: LD_INT 12
20719: PUSH
20720: LD_INT 15
20722: PUSH
20723: LD_INT 16
20725: PUSH
20726: LD_INT 20
20728: PUSH
20729: LD_INT 21
20731: PUSH
20732: LD_INT 22
20734: PUSH
20735: LD_INT 23
20737: PUSH
20738: LD_INT 25
20740: PUSH
20741: LD_INT 26
20743: PUSH
20744: LD_INT 30
20746: PUSH
20747: LD_INT 31
20749: PUSH
20750: LD_INT 32
20752: PUSH
20753: LD_INT 36
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 101
20779: PUSH
20780: LD_INT 102
20782: PUSH
20783: LD_INT 105
20785: PUSH
20786: LD_INT 106
20788: PUSH
20789: LD_INT 108
20791: PUSH
20792: LD_INT 109
20794: PUSH
20795: LD_INT 112
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: ST_TO_ADDR
20811: GO 23178
20813: LD_INT 7
20815: DOUBLE
20816: EQUAL
20817: IFTRUE 20821
20819: GO 20921
20821: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20822: LD_ADDR_VAR 0 1
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 4
20832: PUSH
20833: LD_INT 5
20835: PUSH
20836: LD_INT 7
20838: PUSH
20839: LD_INT 11
20841: PUSH
20842: LD_INT 12
20844: PUSH
20845: LD_INT 15
20847: PUSH
20848: LD_INT 16
20850: PUSH
20851: LD_INT 20
20853: PUSH
20854: LD_INT 21
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_INT 23
20862: PUSH
20863: LD_INT 25
20865: PUSH
20866: LD_INT 26
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 101
20887: PUSH
20888: LD_INT 102
20890: PUSH
20891: LD_INT 103
20893: PUSH
20894: LD_INT 105
20896: PUSH
20897: LD_INT 106
20899: PUSH
20900: LD_INT 108
20902: PUSH
20903: LD_INT 112
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: ST_TO_ADDR
20919: GO 23178
20921: LD_INT 8
20923: DOUBLE
20924: EQUAL
20925: IFTRUE 20929
20927: GO 21057
20929: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20930: LD_ADDR_VAR 0 1
20934: PUSH
20935: LD_INT 2
20937: PUSH
20938: LD_INT 4
20940: PUSH
20941: LD_INT 5
20943: PUSH
20944: LD_INT 6
20946: PUSH
20947: LD_INT 7
20949: PUSH
20950: LD_INT 8
20952: PUSH
20953: LD_INT 11
20955: PUSH
20956: LD_INT 12
20958: PUSH
20959: LD_INT 15
20961: PUSH
20962: LD_INT 16
20964: PUSH
20965: LD_INT 20
20967: PUSH
20968: LD_INT 21
20970: PUSH
20971: LD_INT 22
20973: PUSH
20974: LD_INT 23
20976: PUSH
20977: LD_INT 25
20979: PUSH
20980: LD_INT 26
20982: PUSH
20983: LD_INT 30
20985: PUSH
20986: LD_INT 31
20988: PUSH
20989: LD_INT 32
20991: PUSH
20992: LD_INT 36
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 101
21019: PUSH
21020: LD_INT 102
21022: PUSH
21023: LD_INT 103
21025: PUSH
21026: LD_INT 105
21028: PUSH
21029: LD_INT 106
21031: PUSH
21032: LD_INT 108
21034: PUSH
21035: LD_INT 109
21037: PUSH
21038: LD_INT 112
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: ST_TO_ADDR
21055: GO 23178
21057: LD_INT 9
21059: DOUBLE
21060: EQUAL
21061: IFTRUE 21065
21063: GO 21201
21065: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21066: LD_ADDR_VAR 0 1
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 4
21076: PUSH
21077: LD_INT 5
21079: PUSH
21080: LD_INT 6
21082: PUSH
21083: LD_INT 7
21085: PUSH
21086: LD_INT 8
21088: PUSH
21089: LD_INT 11
21091: PUSH
21092: LD_INT 12
21094: PUSH
21095: LD_INT 15
21097: PUSH
21098: LD_INT 16
21100: PUSH
21101: LD_INT 20
21103: PUSH
21104: LD_INT 21
21106: PUSH
21107: LD_INT 22
21109: PUSH
21110: LD_INT 23
21112: PUSH
21113: LD_INT 25
21115: PUSH
21116: LD_INT 26
21118: PUSH
21119: LD_INT 28
21121: PUSH
21122: LD_INT 30
21124: PUSH
21125: LD_INT 31
21127: PUSH
21128: LD_INT 32
21130: PUSH
21131: LD_INT 36
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 101
21159: PUSH
21160: LD_INT 102
21162: PUSH
21163: LD_INT 103
21165: PUSH
21166: LD_INT 105
21168: PUSH
21169: LD_INT 106
21171: PUSH
21172: LD_INT 108
21174: PUSH
21175: LD_INT 109
21177: PUSH
21178: LD_INT 112
21180: PUSH
21181: LD_INT 114
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: ST_TO_ADDR
21199: GO 23178
21201: LD_INT 10
21203: DOUBLE
21204: EQUAL
21205: IFTRUE 21209
21207: GO 21393
21209: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21210: LD_ADDR_VAR 0 1
21214: PUSH
21215: LD_INT 2
21217: PUSH
21218: LD_INT 4
21220: PUSH
21221: LD_INT 5
21223: PUSH
21224: LD_INT 6
21226: PUSH
21227: LD_INT 7
21229: PUSH
21230: LD_INT 8
21232: PUSH
21233: LD_INT 9
21235: PUSH
21236: LD_INT 10
21238: PUSH
21239: LD_INT 11
21241: PUSH
21242: LD_INT 12
21244: PUSH
21245: LD_INT 13
21247: PUSH
21248: LD_INT 14
21250: PUSH
21251: LD_INT 15
21253: PUSH
21254: LD_INT 16
21256: PUSH
21257: LD_INT 17
21259: PUSH
21260: LD_INT 18
21262: PUSH
21263: LD_INT 19
21265: PUSH
21266: LD_INT 20
21268: PUSH
21269: LD_INT 21
21271: PUSH
21272: LD_INT 22
21274: PUSH
21275: LD_INT 23
21277: PUSH
21278: LD_INT 24
21280: PUSH
21281: LD_INT 25
21283: PUSH
21284: LD_INT 26
21286: PUSH
21287: LD_INT 28
21289: PUSH
21290: LD_INT 30
21292: PUSH
21293: LD_INT 31
21295: PUSH
21296: LD_INT 32
21298: PUSH
21299: LD_INT 36
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 101
21335: PUSH
21336: LD_INT 102
21338: PUSH
21339: LD_INT 103
21341: PUSH
21342: LD_INT 104
21344: PUSH
21345: LD_INT 105
21347: PUSH
21348: LD_INT 106
21350: PUSH
21351: LD_INT 107
21353: PUSH
21354: LD_INT 108
21356: PUSH
21357: LD_INT 109
21359: PUSH
21360: LD_INT 110
21362: PUSH
21363: LD_INT 111
21365: PUSH
21366: LD_INT 112
21368: PUSH
21369: LD_INT 114
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: ST_TO_ADDR
21391: GO 23178
21393: LD_INT 11
21395: DOUBLE
21396: EQUAL
21397: IFTRUE 21401
21399: GO 21593
21401: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21402: LD_ADDR_VAR 0 1
21406: PUSH
21407: LD_INT 2
21409: PUSH
21410: LD_INT 3
21412: PUSH
21413: LD_INT 4
21415: PUSH
21416: LD_INT 5
21418: PUSH
21419: LD_INT 6
21421: PUSH
21422: LD_INT 7
21424: PUSH
21425: LD_INT 8
21427: PUSH
21428: LD_INT 9
21430: PUSH
21431: LD_INT 10
21433: PUSH
21434: LD_INT 11
21436: PUSH
21437: LD_INT 12
21439: PUSH
21440: LD_INT 13
21442: PUSH
21443: LD_INT 14
21445: PUSH
21446: LD_INT 15
21448: PUSH
21449: LD_INT 16
21451: PUSH
21452: LD_INT 17
21454: PUSH
21455: LD_INT 18
21457: PUSH
21458: LD_INT 19
21460: PUSH
21461: LD_INT 20
21463: PUSH
21464: LD_INT 21
21466: PUSH
21467: LD_INT 22
21469: PUSH
21470: LD_INT 23
21472: PUSH
21473: LD_INT 24
21475: PUSH
21476: LD_INT 25
21478: PUSH
21479: LD_INT 26
21481: PUSH
21482: LD_INT 28
21484: PUSH
21485: LD_INT 30
21487: PUSH
21488: LD_INT 31
21490: PUSH
21491: LD_INT 32
21493: PUSH
21494: LD_INT 34
21496: PUSH
21497: LD_INT 36
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 101
21535: PUSH
21536: LD_INT 102
21538: PUSH
21539: LD_INT 103
21541: PUSH
21542: LD_INT 104
21544: PUSH
21545: LD_INT 105
21547: PUSH
21548: LD_INT 106
21550: PUSH
21551: LD_INT 107
21553: PUSH
21554: LD_INT 108
21556: PUSH
21557: LD_INT 109
21559: PUSH
21560: LD_INT 110
21562: PUSH
21563: LD_INT 111
21565: PUSH
21566: LD_INT 112
21568: PUSH
21569: LD_INT 114
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: ST_TO_ADDR
21591: GO 23178
21593: LD_INT 12
21595: DOUBLE
21596: EQUAL
21597: IFTRUE 21601
21599: GO 21809
21601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21602: LD_ADDR_VAR 0 1
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: LD_INT 2
21612: PUSH
21613: LD_INT 3
21615: PUSH
21616: LD_INT 4
21618: PUSH
21619: LD_INT 5
21621: PUSH
21622: LD_INT 6
21624: PUSH
21625: LD_INT 7
21627: PUSH
21628: LD_INT 8
21630: PUSH
21631: LD_INT 9
21633: PUSH
21634: LD_INT 10
21636: PUSH
21637: LD_INT 11
21639: PUSH
21640: LD_INT 12
21642: PUSH
21643: LD_INT 13
21645: PUSH
21646: LD_INT 14
21648: PUSH
21649: LD_INT 15
21651: PUSH
21652: LD_INT 16
21654: PUSH
21655: LD_INT 17
21657: PUSH
21658: LD_INT 18
21660: PUSH
21661: LD_INT 19
21663: PUSH
21664: LD_INT 20
21666: PUSH
21667: LD_INT 21
21669: PUSH
21670: LD_INT 22
21672: PUSH
21673: LD_INT 23
21675: PUSH
21676: LD_INT 24
21678: PUSH
21679: LD_INT 25
21681: PUSH
21682: LD_INT 26
21684: PUSH
21685: LD_INT 27
21687: PUSH
21688: LD_INT 28
21690: PUSH
21691: LD_INT 30
21693: PUSH
21694: LD_INT 31
21696: PUSH
21697: LD_INT 32
21699: PUSH
21700: LD_INT 33
21702: PUSH
21703: LD_INT 34
21705: PUSH
21706: LD_INT 36
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 101
21747: PUSH
21748: LD_INT 102
21750: PUSH
21751: LD_INT 103
21753: PUSH
21754: LD_INT 104
21756: PUSH
21757: LD_INT 105
21759: PUSH
21760: LD_INT 106
21762: PUSH
21763: LD_INT 107
21765: PUSH
21766: LD_INT 108
21768: PUSH
21769: LD_INT 109
21771: PUSH
21772: LD_INT 110
21774: PUSH
21775: LD_INT 111
21777: PUSH
21778: LD_INT 112
21780: PUSH
21781: LD_INT 113
21783: PUSH
21784: LD_INT 114
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: ST_TO_ADDR
21807: GO 23178
21809: LD_INT 13
21811: DOUBLE
21812: EQUAL
21813: IFTRUE 21817
21815: GO 22013
21817: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21818: LD_ADDR_VAR 0 1
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: LD_INT 3
21831: PUSH
21832: LD_INT 4
21834: PUSH
21835: LD_INT 5
21837: PUSH
21838: LD_INT 8
21840: PUSH
21841: LD_INT 9
21843: PUSH
21844: LD_INT 10
21846: PUSH
21847: LD_INT 11
21849: PUSH
21850: LD_INT 12
21852: PUSH
21853: LD_INT 14
21855: PUSH
21856: LD_INT 15
21858: PUSH
21859: LD_INT 16
21861: PUSH
21862: LD_INT 17
21864: PUSH
21865: LD_INT 18
21867: PUSH
21868: LD_INT 19
21870: PUSH
21871: LD_INT 20
21873: PUSH
21874: LD_INT 21
21876: PUSH
21877: LD_INT 22
21879: PUSH
21880: LD_INT 23
21882: PUSH
21883: LD_INT 24
21885: PUSH
21886: LD_INT 25
21888: PUSH
21889: LD_INT 26
21891: PUSH
21892: LD_INT 27
21894: PUSH
21895: LD_INT 28
21897: PUSH
21898: LD_INT 30
21900: PUSH
21901: LD_INT 31
21903: PUSH
21904: LD_INT 32
21906: PUSH
21907: LD_INT 33
21909: PUSH
21910: LD_INT 34
21912: PUSH
21913: LD_INT 36
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 101
21951: PUSH
21952: LD_INT 102
21954: PUSH
21955: LD_INT 103
21957: PUSH
21958: LD_INT 104
21960: PUSH
21961: LD_INT 105
21963: PUSH
21964: LD_INT 106
21966: PUSH
21967: LD_INT 107
21969: PUSH
21970: LD_INT 108
21972: PUSH
21973: LD_INT 109
21975: PUSH
21976: LD_INT 110
21978: PUSH
21979: LD_INT 111
21981: PUSH
21982: LD_INT 112
21984: PUSH
21985: LD_INT 113
21987: PUSH
21988: LD_INT 114
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: ST_TO_ADDR
22011: GO 23178
22013: LD_INT 14
22015: DOUBLE
22016: EQUAL
22017: IFTRUE 22021
22019: GO 22233
22021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22022: LD_ADDR_VAR 0 1
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 2
22032: PUSH
22033: LD_INT 3
22035: PUSH
22036: LD_INT 4
22038: PUSH
22039: LD_INT 5
22041: PUSH
22042: LD_INT 6
22044: PUSH
22045: LD_INT 7
22047: PUSH
22048: LD_INT 8
22050: PUSH
22051: LD_INT 9
22053: PUSH
22054: LD_INT 10
22056: PUSH
22057: LD_INT 11
22059: PUSH
22060: LD_INT 12
22062: PUSH
22063: LD_INT 13
22065: PUSH
22066: LD_INT 14
22068: PUSH
22069: LD_INT 15
22071: PUSH
22072: LD_INT 16
22074: PUSH
22075: LD_INT 17
22077: PUSH
22078: LD_INT 18
22080: PUSH
22081: LD_INT 19
22083: PUSH
22084: LD_INT 20
22086: PUSH
22087: LD_INT 21
22089: PUSH
22090: LD_INT 22
22092: PUSH
22093: LD_INT 23
22095: PUSH
22096: LD_INT 24
22098: PUSH
22099: LD_INT 25
22101: PUSH
22102: LD_INT 26
22104: PUSH
22105: LD_INT 27
22107: PUSH
22108: LD_INT 28
22110: PUSH
22111: LD_INT 29
22113: PUSH
22114: LD_INT 30
22116: PUSH
22117: LD_INT 31
22119: PUSH
22120: LD_INT 32
22122: PUSH
22123: LD_INT 33
22125: PUSH
22126: LD_INT 34
22128: PUSH
22129: LD_INT 36
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 101
22171: PUSH
22172: LD_INT 102
22174: PUSH
22175: LD_INT 103
22177: PUSH
22178: LD_INT 104
22180: PUSH
22181: LD_INT 105
22183: PUSH
22184: LD_INT 106
22186: PUSH
22187: LD_INT 107
22189: PUSH
22190: LD_INT 108
22192: PUSH
22193: LD_INT 109
22195: PUSH
22196: LD_INT 110
22198: PUSH
22199: LD_INT 111
22201: PUSH
22202: LD_INT 112
22204: PUSH
22205: LD_INT 113
22207: PUSH
22208: LD_INT 114
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: ST_TO_ADDR
22231: GO 23178
22233: LD_INT 15
22235: DOUBLE
22236: EQUAL
22237: IFTRUE 22241
22239: GO 22453
22241: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22242: LD_ADDR_VAR 0 1
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: LD_INT 3
22255: PUSH
22256: LD_INT 4
22258: PUSH
22259: LD_INT 5
22261: PUSH
22262: LD_INT 6
22264: PUSH
22265: LD_INT 7
22267: PUSH
22268: LD_INT 8
22270: PUSH
22271: LD_INT 9
22273: PUSH
22274: LD_INT 10
22276: PUSH
22277: LD_INT 11
22279: PUSH
22280: LD_INT 12
22282: PUSH
22283: LD_INT 13
22285: PUSH
22286: LD_INT 14
22288: PUSH
22289: LD_INT 15
22291: PUSH
22292: LD_INT 16
22294: PUSH
22295: LD_INT 17
22297: PUSH
22298: LD_INT 18
22300: PUSH
22301: LD_INT 19
22303: PUSH
22304: LD_INT 20
22306: PUSH
22307: LD_INT 21
22309: PUSH
22310: LD_INT 22
22312: PUSH
22313: LD_INT 23
22315: PUSH
22316: LD_INT 24
22318: PUSH
22319: LD_INT 25
22321: PUSH
22322: LD_INT 26
22324: PUSH
22325: LD_INT 27
22327: PUSH
22328: LD_INT 28
22330: PUSH
22331: LD_INT 29
22333: PUSH
22334: LD_INT 30
22336: PUSH
22337: LD_INT 31
22339: PUSH
22340: LD_INT 32
22342: PUSH
22343: LD_INT 33
22345: PUSH
22346: LD_INT 34
22348: PUSH
22349: LD_INT 36
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 101
22391: PUSH
22392: LD_INT 102
22394: PUSH
22395: LD_INT 103
22397: PUSH
22398: LD_INT 104
22400: PUSH
22401: LD_INT 105
22403: PUSH
22404: LD_INT 106
22406: PUSH
22407: LD_INT 107
22409: PUSH
22410: LD_INT 108
22412: PUSH
22413: LD_INT 109
22415: PUSH
22416: LD_INT 110
22418: PUSH
22419: LD_INT 111
22421: PUSH
22422: LD_INT 112
22424: PUSH
22425: LD_INT 113
22427: PUSH
22428: LD_INT 114
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: ST_TO_ADDR
22451: GO 23178
22453: LD_INT 16
22455: DOUBLE
22456: EQUAL
22457: IFTRUE 22461
22459: GO 22585
22461: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22462: LD_ADDR_VAR 0 1
22466: PUSH
22467: LD_INT 2
22469: PUSH
22470: LD_INT 4
22472: PUSH
22473: LD_INT 5
22475: PUSH
22476: LD_INT 7
22478: PUSH
22479: LD_INT 11
22481: PUSH
22482: LD_INT 12
22484: PUSH
22485: LD_INT 15
22487: PUSH
22488: LD_INT 16
22490: PUSH
22491: LD_INT 20
22493: PUSH
22494: LD_INT 21
22496: PUSH
22497: LD_INT 22
22499: PUSH
22500: LD_INT 23
22502: PUSH
22503: LD_INT 25
22505: PUSH
22506: LD_INT 26
22508: PUSH
22509: LD_INT 30
22511: PUSH
22512: LD_INT 31
22514: PUSH
22515: LD_INT 32
22517: PUSH
22518: LD_INT 33
22520: PUSH
22521: LD_INT 34
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 101
22547: PUSH
22548: LD_INT 102
22550: PUSH
22551: LD_INT 103
22553: PUSH
22554: LD_INT 106
22556: PUSH
22557: LD_INT 108
22559: PUSH
22560: LD_INT 112
22562: PUSH
22563: LD_INT 113
22565: PUSH
22566: LD_INT 114
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: ST_TO_ADDR
22583: GO 23178
22585: LD_INT 17
22587: DOUBLE
22588: EQUAL
22589: IFTRUE 22593
22591: GO 22805
22593: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22594: LD_ADDR_VAR 0 1
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: LD_INT 4
22610: PUSH
22611: LD_INT 5
22613: PUSH
22614: LD_INT 6
22616: PUSH
22617: LD_INT 7
22619: PUSH
22620: LD_INT 8
22622: PUSH
22623: LD_INT 9
22625: PUSH
22626: LD_INT 10
22628: PUSH
22629: LD_INT 11
22631: PUSH
22632: LD_INT 12
22634: PUSH
22635: LD_INT 13
22637: PUSH
22638: LD_INT 14
22640: PUSH
22641: LD_INT 15
22643: PUSH
22644: LD_INT 16
22646: PUSH
22647: LD_INT 17
22649: PUSH
22650: LD_INT 18
22652: PUSH
22653: LD_INT 19
22655: PUSH
22656: LD_INT 20
22658: PUSH
22659: LD_INT 21
22661: PUSH
22662: LD_INT 22
22664: PUSH
22665: LD_INT 23
22667: PUSH
22668: LD_INT 24
22670: PUSH
22671: LD_INT 25
22673: PUSH
22674: LD_INT 26
22676: PUSH
22677: LD_INT 27
22679: PUSH
22680: LD_INT 28
22682: PUSH
22683: LD_INT 29
22685: PUSH
22686: LD_INT 30
22688: PUSH
22689: LD_INT 31
22691: PUSH
22692: LD_INT 32
22694: PUSH
22695: LD_INT 33
22697: PUSH
22698: LD_INT 34
22700: PUSH
22701: LD_INT 36
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 101
22743: PUSH
22744: LD_INT 102
22746: PUSH
22747: LD_INT 103
22749: PUSH
22750: LD_INT 104
22752: PUSH
22753: LD_INT 105
22755: PUSH
22756: LD_INT 106
22758: PUSH
22759: LD_INT 107
22761: PUSH
22762: LD_INT 108
22764: PUSH
22765: LD_INT 109
22767: PUSH
22768: LD_INT 110
22770: PUSH
22771: LD_INT 111
22773: PUSH
22774: LD_INT 112
22776: PUSH
22777: LD_INT 113
22779: PUSH
22780: LD_INT 114
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: ST_TO_ADDR
22803: GO 23178
22805: LD_INT 18
22807: DOUBLE
22808: EQUAL
22809: IFTRUE 22813
22811: GO 22949
22813: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22814: LD_ADDR_VAR 0 1
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: LD_INT 4
22824: PUSH
22825: LD_INT 5
22827: PUSH
22828: LD_INT 7
22830: PUSH
22831: LD_INT 11
22833: PUSH
22834: LD_INT 12
22836: PUSH
22837: LD_INT 15
22839: PUSH
22840: LD_INT 16
22842: PUSH
22843: LD_INT 20
22845: PUSH
22846: LD_INT 21
22848: PUSH
22849: LD_INT 22
22851: PUSH
22852: LD_INT 23
22854: PUSH
22855: LD_INT 25
22857: PUSH
22858: LD_INT 26
22860: PUSH
22861: LD_INT 30
22863: PUSH
22864: LD_INT 31
22866: PUSH
22867: LD_INT 32
22869: PUSH
22870: LD_INT 33
22872: PUSH
22873: LD_INT 34
22875: PUSH
22876: LD_INT 35
22878: PUSH
22879: LD_INT 36
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 101
22907: PUSH
22908: LD_INT 102
22910: PUSH
22911: LD_INT 103
22913: PUSH
22914: LD_INT 106
22916: PUSH
22917: LD_INT 108
22919: PUSH
22920: LD_INT 112
22922: PUSH
22923: LD_INT 113
22925: PUSH
22926: LD_INT 114
22928: PUSH
22929: LD_INT 115
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: ST_TO_ADDR
22947: GO 23178
22949: LD_INT 19
22951: DOUBLE
22952: EQUAL
22953: IFTRUE 22957
22955: GO 23177
22957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22958: LD_ADDR_VAR 0 1
22962: PUSH
22963: LD_INT 1
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: LD_INT 4
22974: PUSH
22975: LD_INT 5
22977: PUSH
22978: LD_INT 6
22980: PUSH
22981: LD_INT 7
22983: PUSH
22984: LD_INT 8
22986: PUSH
22987: LD_INT 9
22989: PUSH
22990: LD_INT 10
22992: PUSH
22993: LD_INT 11
22995: PUSH
22996: LD_INT 12
22998: PUSH
22999: LD_INT 13
23001: PUSH
23002: LD_INT 14
23004: PUSH
23005: LD_INT 15
23007: PUSH
23008: LD_INT 16
23010: PUSH
23011: LD_INT 17
23013: PUSH
23014: LD_INT 18
23016: PUSH
23017: LD_INT 19
23019: PUSH
23020: LD_INT 20
23022: PUSH
23023: LD_INT 21
23025: PUSH
23026: LD_INT 22
23028: PUSH
23029: LD_INT 23
23031: PUSH
23032: LD_INT 24
23034: PUSH
23035: LD_INT 25
23037: PUSH
23038: LD_INT 26
23040: PUSH
23041: LD_INT 27
23043: PUSH
23044: LD_INT 28
23046: PUSH
23047: LD_INT 29
23049: PUSH
23050: LD_INT 30
23052: PUSH
23053: LD_INT 31
23055: PUSH
23056: LD_INT 32
23058: PUSH
23059: LD_INT 33
23061: PUSH
23062: LD_INT 34
23064: PUSH
23065: LD_INT 35
23067: PUSH
23068: LD_INT 36
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 101
23111: PUSH
23112: LD_INT 102
23114: PUSH
23115: LD_INT 103
23117: PUSH
23118: LD_INT 104
23120: PUSH
23121: LD_INT 105
23123: PUSH
23124: LD_INT 106
23126: PUSH
23127: LD_INT 107
23129: PUSH
23130: LD_INT 108
23132: PUSH
23133: LD_INT 109
23135: PUSH
23136: LD_INT 110
23138: PUSH
23139: LD_INT 111
23141: PUSH
23142: LD_INT 112
23144: PUSH
23145: LD_INT 113
23147: PUSH
23148: LD_INT 114
23150: PUSH
23151: LD_INT 115
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: ST_TO_ADDR
23175: GO 23178
23177: POP
// end else
23178: GO 23397
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23180: LD_ADDR_VAR 0 1
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: LD_INT 2
23190: PUSH
23191: LD_INT 3
23193: PUSH
23194: LD_INT 4
23196: PUSH
23197: LD_INT 5
23199: PUSH
23200: LD_INT 6
23202: PUSH
23203: LD_INT 7
23205: PUSH
23206: LD_INT 8
23208: PUSH
23209: LD_INT 9
23211: PUSH
23212: LD_INT 10
23214: PUSH
23215: LD_INT 11
23217: PUSH
23218: LD_INT 12
23220: PUSH
23221: LD_INT 13
23223: PUSH
23224: LD_INT 14
23226: PUSH
23227: LD_INT 15
23229: PUSH
23230: LD_INT 16
23232: PUSH
23233: LD_INT 17
23235: PUSH
23236: LD_INT 18
23238: PUSH
23239: LD_INT 19
23241: PUSH
23242: LD_INT 20
23244: PUSH
23245: LD_INT 21
23247: PUSH
23248: LD_INT 22
23250: PUSH
23251: LD_INT 23
23253: PUSH
23254: LD_INT 24
23256: PUSH
23257: LD_INT 25
23259: PUSH
23260: LD_INT 26
23262: PUSH
23263: LD_INT 27
23265: PUSH
23266: LD_INT 28
23268: PUSH
23269: LD_INT 29
23271: PUSH
23272: LD_INT 30
23274: PUSH
23275: LD_INT 31
23277: PUSH
23278: LD_INT 32
23280: PUSH
23281: LD_INT 33
23283: PUSH
23284: LD_INT 34
23286: PUSH
23287: LD_INT 35
23289: PUSH
23290: LD_INT 36
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 101
23333: PUSH
23334: LD_INT 102
23336: PUSH
23337: LD_INT 103
23339: PUSH
23340: LD_INT 104
23342: PUSH
23343: LD_INT 105
23345: PUSH
23346: LD_INT 106
23348: PUSH
23349: LD_INT 107
23351: PUSH
23352: LD_INT 108
23354: PUSH
23355: LD_INT 109
23357: PUSH
23358: LD_INT 110
23360: PUSH
23361: LD_INT 111
23363: PUSH
23364: LD_INT 112
23366: PUSH
23367: LD_INT 113
23369: PUSH
23370: LD_INT 114
23372: PUSH
23373: LD_INT 115
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: ST_TO_ADDR
// if result then
23397: LD_VAR 0 1
23401: IFFALSE 23690
// begin normal :=  ;
23403: LD_ADDR_VAR 0 3
23407: PUSH
23408: LD_STRING 
23410: ST_TO_ADDR
// hardcore :=  ;
23411: LD_ADDR_VAR 0 4
23415: PUSH
23416: LD_STRING 
23418: ST_TO_ADDR
// for i = 1 to normalCounter do
23419: LD_ADDR_VAR 0 5
23423: PUSH
23424: DOUBLE
23425: LD_INT 1
23427: DEC
23428: ST_TO_ADDR
23429: LD_EXP 78
23433: PUSH
23434: FOR_TO
23435: IFFALSE 23536
// begin tmp := 0 ;
23437: LD_ADDR_VAR 0 2
23441: PUSH
23442: LD_STRING 0
23444: ST_TO_ADDR
// if result [ 1 ] then
23445: LD_VAR 0 1
23449: PUSH
23450: LD_INT 1
23452: ARRAY
23453: IFFALSE 23518
// if result [ 1 ] [ 1 ] = i then
23455: LD_VAR 0 1
23459: PUSH
23460: LD_INT 1
23462: ARRAY
23463: PUSH
23464: LD_INT 1
23466: ARRAY
23467: PUSH
23468: LD_VAR 0 5
23472: EQUAL
23473: IFFALSE 23518
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23475: LD_ADDR_VAR 0 1
23479: PUSH
23480: LD_VAR 0 1
23484: PPUSH
23485: LD_INT 1
23487: PPUSH
23488: LD_VAR 0 1
23492: PUSH
23493: LD_INT 1
23495: ARRAY
23496: PPUSH
23497: LD_INT 1
23499: PPUSH
23500: CALL_OW 3
23504: PPUSH
23505: CALL_OW 1
23509: ST_TO_ADDR
// tmp := 1 ;
23510: LD_ADDR_VAR 0 2
23514: PUSH
23515: LD_STRING 1
23517: ST_TO_ADDR
// end ; normal := normal & tmp ;
23518: LD_ADDR_VAR 0 3
23522: PUSH
23523: LD_VAR 0 3
23527: PUSH
23528: LD_VAR 0 2
23532: STR
23533: ST_TO_ADDR
// end ;
23534: GO 23434
23536: POP
23537: POP
// for i = 1 to hardcoreCounter do
23538: LD_ADDR_VAR 0 5
23542: PUSH
23543: DOUBLE
23544: LD_INT 1
23546: DEC
23547: ST_TO_ADDR
23548: LD_EXP 79
23552: PUSH
23553: FOR_TO
23554: IFFALSE 23659
// begin tmp := 0 ;
23556: LD_ADDR_VAR 0 2
23560: PUSH
23561: LD_STRING 0
23563: ST_TO_ADDR
// if result [ 2 ] then
23564: LD_VAR 0 1
23568: PUSH
23569: LD_INT 2
23571: ARRAY
23572: IFFALSE 23641
// if result [ 2 ] [ 1 ] = 100 + i then
23574: LD_VAR 0 1
23578: PUSH
23579: LD_INT 2
23581: ARRAY
23582: PUSH
23583: LD_INT 1
23585: ARRAY
23586: PUSH
23587: LD_INT 100
23589: PUSH
23590: LD_VAR 0 5
23594: PLUS
23595: EQUAL
23596: IFFALSE 23641
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23598: LD_ADDR_VAR 0 1
23602: PUSH
23603: LD_VAR 0 1
23607: PPUSH
23608: LD_INT 2
23610: PPUSH
23611: LD_VAR 0 1
23615: PUSH
23616: LD_INT 2
23618: ARRAY
23619: PPUSH
23620: LD_INT 1
23622: PPUSH
23623: CALL_OW 3
23627: PPUSH
23628: CALL_OW 1
23632: ST_TO_ADDR
// tmp := 1 ;
23633: LD_ADDR_VAR 0 2
23637: PUSH
23638: LD_STRING 1
23640: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23641: LD_ADDR_VAR 0 4
23645: PUSH
23646: LD_VAR 0 4
23650: PUSH
23651: LD_VAR 0 2
23655: STR
23656: ST_TO_ADDR
// end ;
23657: GO 23553
23659: POP
23660: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23661: LD_STRING getStreamItemsFromMission("
23663: PUSH
23664: LD_VAR 0 3
23668: STR
23669: PUSH
23670: LD_STRING ","
23672: STR
23673: PUSH
23674: LD_VAR 0 4
23678: STR
23679: PUSH
23680: LD_STRING ")
23682: STR
23683: PPUSH
23684: CALL_OW 559
// end else
23688: GO 23697
// ToLua ( getStreamItemsFromMission("","") ) ;
23690: LD_STRING getStreamItemsFromMission("","")
23692: PPUSH
23693: CALL_OW 559
// end ;
23697: LD_VAR 0 1
23701: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23702: LD_EXP 77
23706: PUSH
23707: LD_EXP 82
23711: AND
23712: IFFALSE 23836
23714: GO 23716
23716: DISABLE
23717: LD_INT 0
23719: PPUSH
23720: PPUSH
// begin enable ;
23721: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23722: LD_ADDR_VAR 0 2
23726: PUSH
23727: LD_INT 22
23729: PUSH
23730: LD_OWVAR 2
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: LD_INT 34
23744: PUSH
23745: LD_INT 7
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 34
23754: PUSH
23755: LD_INT 45
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 34
23764: PUSH
23765: LD_INT 28
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 34
23774: PUSH
23775: LD_INT 47
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PPUSH
23793: CALL_OW 69
23797: ST_TO_ADDR
// if not tmp then
23798: LD_VAR 0 2
23802: NOT
23803: IFFALSE 23807
// exit ;
23805: GO 23836
// for i in tmp do
23807: LD_ADDR_VAR 0 1
23811: PUSH
23812: LD_VAR 0 2
23816: PUSH
23817: FOR_IN
23818: IFFALSE 23834
// begin SetLives ( i , 0 ) ;
23820: LD_VAR 0 1
23824: PPUSH
23825: LD_INT 0
23827: PPUSH
23828: CALL_OW 234
// end ;
23832: GO 23817
23834: POP
23835: POP
// end ;
23836: PPOPN 2
23838: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23839: LD_EXP 77
23843: PUSH
23844: LD_EXP 83
23848: AND
23849: IFFALSE 23933
23851: GO 23853
23853: DISABLE
23854: LD_INT 0
23856: PPUSH
23857: PPUSH
// begin enable ;
23858: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23859: LD_ADDR_VAR 0 2
23863: PUSH
23864: LD_INT 22
23866: PUSH
23867: LD_OWVAR 2
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 32
23878: PUSH
23879: LD_INT 3
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL_OW 69
23894: ST_TO_ADDR
// if not tmp then
23895: LD_VAR 0 2
23899: NOT
23900: IFFALSE 23904
// exit ;
23902: GO 23933
// for i in tmp do
23904: LD_ADDR_VAR 0 1
23908: PUSH
23909: LD_VAR 0 2
23913: PUSH
23914: FOR_IN
23915: IFFALSE 23931
// begin SetLives ( i , 0 ) ;
23917: LD_VAR 0 1
23921: PPUSH
23922: LD_INT 0
23924: PPUSH
23925: CALL_OW 234
// end ;
23929: GO 23914
23931: POP
23932: POP
// end ;
23933: PPOPN 2
23935: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23936: LD_EXP 77
23940: PUSH
23941: LD_EXP 80
23945: AND
23946: IFFALSE 24039
23948: GO 23950
23950: DISABLE
23951: LD_INT 0
23953: PPUSH
// begin enable ;
23954: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23955: LD_ADDR_VAR 0 1
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_OWVAR 2
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 2
23974: PUSH
23975: LD_INT 25
23977: PUSH
23978: LD_INT 5
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 25
23987: PUSH
23988: LD_INT 9
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 25
23997: PUSH
23998: LD_INT 8
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PPUSH
24015: CALL_OW 69
24019: PUSH
24020: FOR_IN
24021: IFFALSE 24037
// begin SetClass ( i , 1 ) ;
24023: LD_VAR 0 1
24027: PPUSH
24028: LD_INT 1
24030: PPUSH
24031: CALL_OW 336
// end ;
24035: GO 24020
24037: POP
24038: POP
// end ;
24039: PPOPN 1
24041: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24042: LD_EXP 77
24046: PUSH
24047: LD_EXP 81
24051: AND
24052: PUSH
24053: LD_OWVAR 65
24057: PUSH
24058: LD_INT 7
24060: LESS
24061: AND
24062: IFFALSE 24076
24064: GO 24066
24066: DISABLE
// begin enable ;
24067: ENABLE
// game_speed := 7 ;
24068: LD_ADDR_OWVAR 65
24072: PUSH
24073: LD_INT 7
24075: ST_TO_ADDR
// end ;
24076: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24077: LD_EXP 77
24081: PUSH
24082: LD_EXP 84
24086: AND
24087: IFFALSE 24289
24089: GO 24091
24091: DISABLE
24092: LD_INT 0
24094: PPUSH
24095: PPUSH
24096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24097: LD_ADDR_VAR 0 3
24101: PUSH
24102: LD_INT 81
24104: PUSH
24105: LD_OWVAR 2
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 21
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PPUSH
24128: CALL_OW 69
24132: ST_TO_ADDR
// if not tmp then
24133: LD_VAR 0 3
24137: NOT
24138: IFFALSE 24142
// exit ;
24140: GO 24289
// if tmp > 5 then
24142: LD_VAR 0 3
24146: PUSH
24147: LD_INT 5
24149: GREATER
24150: IFFALSE 24162
// k := 5 else
24152: LD_ADDR_VAR 0 2
24156: PUSH
24157: LD_INT 5
24159: ST_TO_ADDR
24160: GO 24172
// k := tmp ;
24162: LD_ADDR_VAR 0 2
24166: PUSH
24167: LD_VAR 0 3
24171: ST_TO_ADDR
// for i := 1 to k do
24172: LD_ADDR_VAR 0 1
24176: PUSH
24177: DOUBLE
24178: LD_INT 1
24180: DEC
24181: ST_TO_ADDR
24182: LD_VAR 0 2
24186: PUSH
24187: FOR_TO
24188: IFFALSE 24287
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24190: LD_VAR 0 3
24194: PUSH
24195: LD_VAR 0 1
24199: ARRAY
24200: PPUSH
24201: LD_VAR 0 1
24205: PUSH
24206: LD_INT 4
24208: MOD
24209: PUSH
24210: LD_INT 1
24212: PLUS
24213: PPUSH
24214: CALL_OW 259
24218: PUSH
24219: LD_INT 10
24221: LESS
24222: IFFALSE 24285
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24224: LD_VAR 0 3
24228: PUSH
24229: LD_VAR 0 1
24233: ARRAY
24234: PPUSH
24235: LD_VAR 0 1
24239: PUSH
24240: LD_INT 4
24242: MOD
24243: PUSH
24244: LD_INT 1
24246: PLUS
24247: PPUSH
24248: LD_VAR 0 3
24252: PUSH
24253: LD_VAR 0 1
24257: ARRAY
24258: PPUSH
24259: LD_VAR 0 1
24263: PUSH
24264: LD_INT 4
24266: MOD
24267: PUSH
24268: LD_INT 1
24270: PLUS
24271: PPUSH
24272: CALL_OW 259
24276: PUSH
24277: LD_INT 1
24279: PLUS
24280: PPUSH
24281: CALL_OW 237
24285: GO 24187
24287: POP
24288: POP
// end ;
24289: PPOPN 3
24291: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24292: LD_EXP 77
24296: PUSH
24297: LD_EXP 85
24301: AND
24302: IFFALSE 24322
24304: GO 24306
24306: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24307: LD_INT 4
24309: PPUSH
24310: LD_OWVAR 2
24314: PPUSH
24315: LD_INT 0
24317: PPUSH
24318: CALL_OW 324
24322: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24323: LD_EXP 77
24327: PUSH
24328: LD_EXP 114
24332: AND
24333: IFFALSE 24353
24335: GO 24337
24337: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24338: LD_INT 19
24340: PPUSH
24341: LD_OWVAR 2
24345: PPUSH
24346: LD_INT 0
24348: PPUSH
24349: CALL_OW 324
24353: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24354: LD_EXP 77
24358: PUSH
24359: LD_EXP 86
24363: AND
24364: IFFALSE 24466
24366: GO 24368
24368: DISABLE
24369: LD_INT 0
24371: PPUSH
24372: PPUSH
// begin enable ;
24373: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24374: LD_ADDR_VAR 0 2
24378: PUSH
24379: LD_INT 22
24381: PUSH
24382: LD_OWVAR 2
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: PUSH
24394: LD_INT 34
24396: PUSH
24397: LD_INT 11
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 34
24406: PUSH
24407: LD_INT 30
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PPUSH
24423: CALL_OW 69
24427: ST_TO_ADDR
// if not tmp then
24428: LD_VAR 0 2
24432: NOT
24433: IFFALSE 24437
// exit ;
24435: GO 24466
// for i in tmp do
24437: LD_ADDR_VAR 0 1
24441: PUSH
24442: LD_VAR 0 2
24446: PUSH
24447: FOR_IN
24448: IFFALSE 24464
// begin SetLives ( i , 0 ) ;
24450: LD_VAR 0 1
24454: PPUSH
24455: LD_INT 0
24457: PPUSH
24458: CALL_OW 234
// end ;
24462: GO 24447
24464: POP
24465: POP
// end ;
24466: PPOPN 2
24468: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24469: LD_EXP 77
24473: PUSH
24474: LD_EXP 87
24478: AND
24479: IFFALSE 24499
24481: GO 24483
24483: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24484: LD_INT 32
24486: PPUSH
24487: LD_OWVAR 2
24491: PPUSH
24492: LD_INT 0
24494: PPUSH
24495: CALL_OW 324
24499: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24500: LD_EXP 77
24504: PUSH
24505: LD_EXP 88
24509: AND
24510: IFFALSE 24691
24512: GO 24514
24514: DISABLE
24515: LD_INT 0
24517: PPUSH
24518: PPUSH
24519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24520: LD_ADDR_VAR 0 2
24524: PUSH
24525: LD_INT 22
24527: PUSH
24528: LD_OWVAR 2
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 33
24539: PUSH
24540: LD_INT 3
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PPUSH
24551: CALL_OW 69
24555: ST_TO_ADDR
// if not tmp then
24556: LD_VAR 0 2
24560: NOT
24561: IFFALSE 24565
// exit ;
24563: GO 24691
// side := 0 ;
24565: LD_ADDR_VAR 0 3
24569: PUSH
24570: LD_INT 0
24572: ST_TO_ADDR
// for i := 1 to 8 do
24573: LD_ADDR_VAR 0 1
24577: PUSH
24578: DOUBLE
24579: LD_INT 1
24581: DEC
24582: ST_TO_ADDR
24583: LD_INT 8
24585: PUSH
24586: FOR_TO
24587: IFFALSE 24635
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24589: LD_OWVAR 2
24593: PUSH
24594: LD_VAR 0 1
24598: NONEQUAL
24599: PUSH
24600: LD_OWVAR 2
24604: PPUSH
24605: LD_VAR 0 1
24609: PPUSH
24610: CALL_OW 81
24614: PUSH
24615: LD_INT 2
24617: EQUAL
24618: AND
24619: IFFALSE 24633
// begin side := i ;
24621: LD_ADDR_VAR 0 3
24625: PUSH
24626: LD_VAR 0 1
24630: ST_TO_ADDR
// break ;
24631: GO 24635
// end ;
24633: GO 24586
24635: POP
24636: POP
// if not side then
24637: LD_VAR 0 3
24641: NOT
24642: IFFALSE 24646
// exit ;
24644: GO 24691
// for i := 1 to tmp do
24646: LD_ADDR_VAR 0 1
24650: PUSH
24651: DOUBLE
24652: LD_INT 1
24654: DEC
24655: ST_TO_ADDR
24656: LD_VAR 0 2
24660: PUSH
24661: FOR_TO
24662: IFFALSE 24689
// if Prob ( 60 ) then
24664: LD_INT 60
24666: PPUSH
24667: CALL_OW 13
24671: IFFALSE 24687
// SetSide ( i , side ) ;
24673: LD_VAR 0 1
24677: PPUSH
24678: LD_VAR 0 3
24682: PPUSH
24683: CALL_OW 235
24687: GO 24661
24689: POP
24690: POP
// end ;
24691: PPOPN 3
24693: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24694: LD_EXP 77
24698: PUSH
24699: LD_EXP 90
24703: AND
24704: IFFALSE 24823
24706: GO 24708
24708: DISABLE
24709: LD_INT 0
24711: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24712: LD_ADDR_VAR 0 1
24716: PUSH
24717: LD_INT 22
24719: PUSH
24720: LD_OWVAR 2
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 21
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 3
24741: PUSH
24742: LD_INT 23
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: LIST
24760: PPUSH
24761: CALL_OW 69
24765: PUSH
24766: FOR_IN
24767: IFFALSE 24821
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24769: LD_VAR 0 1
24773: PPUSH
24774: CALL_OW 257
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: LD_INT 3
24787: PUSH
24788: LD_INT 4
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: IN
24797: IFFALSE 24819
// SetClass ( un , rand ( 1 , 4 ) ) ;
24799: LD_VAR 0 1
24803: PPUSH
24804: LD_INT 1
24806: PPUSH
24807: LD_INT 4
24809: PPUSH
24810: CALL_OW 12
24814: PPUSH
24815: CALL_OW 336
24819: GO 24766
24821: POP
24822: POP
// end ;
24823: PPOPN 1
24825: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24826: LD_EXP 77
24830: PUSH
24831: LD_EXP 89
24835: AND
24836: IFFALSE 24915
24838: GO 24840
24840: DISABLE
24841: LD_INT 0
24843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24844: LD_ADDR_VAR 0 1
24848: PUSH
24849: LD_INT 22
24851: PUSH
24852: LD_OWVAR 2
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 21
24863: PUSH
24864: LD_INT 3
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PPUSH
24875: CALL_OW 69
24879: ST_TO_ADDR
// if not tmp then
24880: LD_VAR 0 1
24884: NOT
24885: IFFALSE 24889
// exit ;
24887: GO 24915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24889: LD_VAR 0 1
24893: PUSH
24894: LD_INT 1
24896: PPUSH
24897: LD_VAR 0 1
24901: PPUSH
24902: CALL_OW 12
24906: ARRAY
24907: PPUSH
24908: LD_INT 100
24910: PPUSH
24911: CALL_OW 234
// end ;
24915: PPOPN 1
24917: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24918: LD_EXP 77
24922: PUSH
24923: LD_EXP 91
24927: AND
24928: IFFALSE 25026
24930: GO 24932
24932: DISABLE
24933: LD_INT 0
24935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24936: LD_ADDR_VAR 0 1
24940: PUSH
24941: LD_INT 22
24943: PUSH
24944: LD_OWVAR 2
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 21
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PPUSH
24967: CALL_OW 69
24971: ST_TO_ADDR
// if not tmp then
24972: LD_VAR 0 1
24976: NOT
24977: IFFALSE 24981
// exit ;
24979: GO 25026
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24981: LD_VAR 0 1
24985: PUSH
24986: LD_INT 1
24988: PPUSH
24989: LD_VAR 0 1
24993: PPUSH
24994: CALL_OW 12
24998: ARRAY
24999: PPUSH
25000: LD_INT 1
25002: PPUSH
25003: LD_INT 4
25005: PPUSH
25006: CALL_OW 12
25010: PPUSH
25011: LD_INT 3000
25013: PPUSH
25014: LD_INT 9000
25016: PPUSH
25017: CALL_OW 12
25021: PPUSH
25022: CALL_OW 492
// end ;
25026: PPOPN 1
25028: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25029: LD_EXP 77
25033: PUSH
25034: LD_EXP 92
25038: AND
25039: IFFALSE 25059
25041: GO 25043
25043: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25044: LD_INT 1
25046: PPUSH
25047: LD_OWVAR 2
25051: PPUSH
25052: LD_INT 0
25054: PPUSH
25055: CALL_OW 324
25059: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25060: LD_EXP 77
25064: PUSH
25065: LD_EXP 93
25069: AND
25070: IFFALSE 25153
25072: GO 25074
25074: DISABLE
25075: LD_INT 0
25077: PPUSH
25078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25079: LD_ADDR_VAR 0 2
25083: PUSH
25084: LD_INT 22
25086: PUSH
25087: LD_OWVAR 2
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 21
25098: PUSH
25099: LD_INT 3
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PPUSH
25110: CALL_OW 69
25114: ST_TO_ADDR
// if not tmp then
25115: LD_VAR 0 2
25119: NOT
25120: IFFALSE 25124
// exit ;
25122: GO 25153
// for i in tmp do
25124: LD_ADDR_VAR 0 1
25128: PUSH
25129: LD_VAR 0 2
25133: PUSH
25134: FOR_IN
25135: IFFALSE 25151
// SetBLevel ( i , 10 ) ;
25137: LD_VAR 0 1
25141: PPUSH
25142: LD_INT 10
25144: PPUSH
25145: CALL_OW 241
25149: GO 25134
25151: POP
25152: POP
// end ;
25153: PPOPN 2
25155: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25156: LD_EXP 77
25160: PUSH
25161: LD_EXP 94
25165: AND
25166: IFFALSE 25277
25168: GO 25170
25170: DISABLE
25171: LD_INT 0
25173: PPUSH
25174: PPUSH
25175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25176: LD_ADDR_VAR 0 3
25180: PUSH
25181: LD_INT 22
25183: PUSH
25184: LD_OWVAR 2
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 25
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PPUSH
25207: CALL_OW 69
25211: ST_TO_ADDR
// if not tmp then
25212: LD_VAR 0 3
25216: NOT
25217: IFFALSE 25221
// exit ;
25219: GO 25277
// un := tmp [ rand ( 1 , tmp ) ] ;
25221: LD_ADDR_VAR 0 2
25225: PUSH
25226: LD_VAR 0 3
25230: PUSH
25231: LD_INT 1
25233: PPUSH
25234: LD_VAR 0 3
25238: PPUSH
25239: CALL_OW 12
25243: ARRAY
25244: ST_TO_ADDR
// if Crawls ( un ) then
25245: LD_VAR 0 2
25249: PPUSH
25250: CALL_OW 318
25254: IFFALSE 25265
// ComWalk ( un ) ;
25256: LD_VAR 0 2
25260: PPUSH
25261: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25265: LD_VAR 0 2
25269: PPUSH
25270: LD_INT 5
25272: PPUSH
25273: CALL_OW 336
// end ;
25277: PPOPN 3
25279: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25280: LD_EXP 77
25284: PUSH
25285: LD_EXP 95
25289: AND
25290: PUSH
25291: LD_OWVAR 67
25295: PUSH
25296: LD_INT 3
25298: LESS
25299: AND
25300: IFFALSE 25319
25302: GO 25304
25304: DISABLE
// Difficulty := Difficulty + 1 ;
25305: LD_ADDR_OWVAR 67
25309: PUSH
25310: LD_OWVAR 67
25314: PUSH
25315: LD_INT 1
25317: PLUS
25318: ST_TO_ADDR
25319: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25320: LD_EXP 77
25324: PUSH
25325: LD_EXP 96
25329: AND
25330: IFFALSE 25433
25332: GO 25334
25334: DISABLE
25335: LD_INT 0
25337: PPUSH
// begin for i := 1 to 5 do
25338: LD_ADDR_VAR 0 1
25342: PUSH
25343: DOUBLE
25344: LD_INT 1
25346: DEC
25347: ST_TO_ADDR
25348: LD_INT 5
25350: PUSH
25351: FOR_TO
25352: IFFALSE 25431
// begin uc_nation := nation_nature ;
25354: LD_ADDR_OWVAR 21
25358: PUSH
25359: LD_INT 0
25361: ST_TO_ADDR
// uc_side := 0 ;
25362: LD_ADDR_OWVAR 20
25366: PUSH
25367: LD_INT 0
25369: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25370: LD_ADDR_OWVAR 29
25374: PUSH
25375: LD_INT 12
25377: PUSH
25378: LD_INT 12
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: ST_TO_ADDR
// hc_agressivity := 20 ;
25385: LD_ADDR_OWVAR 35
25389: PUSH
25390: LD_INT 20
25392: ST_TO_ADDR
// hc_class := class_tiger ;
25393: LD_ADDR_OWVAR 28
25397: PUSH
25398: LD_INT 14
25400: ST_TO_ADDR
// hc_gallery :=  ;
25401: LD_ADDR_OWVAR 33
25405: PUSH
25406: LD_STRING 
25408: ST_TO_ADDR
// hc_name :=  ;
25409: LD_ADDR_OWVAR 26
25413: PUSH
25414: LD_STRING 
25416: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25417: CALL_OW 44
25421: PPUSH
25422: LD_INT 0
25424: PPUSH
25425: CALL_OW 51
// end ;
25429: GO 25351
25431: POP
25432: POP
// end ;
25433: PPOPN 1
25435: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25436: LD_EXP 77
25440: PUSH
25441: LD_EXP 97
25445: AND
25446: IFFALSE 25455
25448: GO 25450
25450: DISABLE
// StreamSibBomb ;
25451: CALL 25456 0 0
25455: END
// export function StreamSibBomb ; var i , x , y ; begin
25456: LD_INT 0
25458: PPUSH
25459: PPUSH
25460: PPUSH
25461: PPUSH
// result := false ;
25462: LD_ADDR_VAR 0 1
25466: PUSH
25467: LD_INT 0
25469: ST_TO_ADDR
// for i := 1 to 16 do
25470: LD_ADDR_VAR 0 2
25474: PUSH
25475: DOUBLE
25476: LD_INT 1
25478: DEC
25479: ST_TO_ADDR
25480: LD_INT 16
25482: PUSH
25483: FOR_TO
25484: IFFALSE 25683
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: LD_INT 10
25493: PUSH
25494: LD_INT 20
25496: PUSH
25497: LD_INT 30
25499: PUSH
25500: LD_INT 40
25502: PUSH
25503: LD_INT 50
25505: PUSH
25506: LD_INT 60
25508: PUSH
25509: LD_INT 70
25511: PUSH
25512: LD_INT 80
25514: PUSH
25515: LD_INT 90
25517: PUSH
25518: LD_INT 100
25520: PUSH
25521: LD_INT 110
25523: PUSH
25524: LD_INT 120
25526: PUSH
25527: LD_INT 130
25529: PUSH
25530: LD_INT 140
25532: PUSH
25533: LD_INT 150
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: PPUSH
25556: LD_INT 15
25558: PPUSH
25559: CALL_OW 12
25563: ARRAY
25564: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25565: LD_ADDR_VAR 0 4
25569: PUSH
25570: LD_INT 10
25572: PUSH
25573: LD_INT 20
25575: PUSH
25576: LD_INT 30
25578: PUSH
25579: LD_INT 40
25581: PUSH
25582: LD_INT 50
25584: PUSH
25585: LD_INT 60
25587: PUSH
25588: LD_INT 70
25590: PUSH
25591: LD_INT 80
25593: PUSH
25594: LD_INT 90
25596: PUSH
25597: LD_INT 100
25599: PUSH
25600: LD_INT 110
25602: PUSH
25603: LD_INT 120
25605: PUSH
25606: LD_INT 130
25608: PUSH
25609: LD_INT 140
25611: PUSH
25612: LD_INT 150
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: PPUSH
25635: LD_INT 15
25637: PPUSH
25638: CALL_OW 12
25642: ARRAY
25643: ST_TO_ADDR
// if ValidHex ( x , y ) then
25644: LD_VAR 0 3
25648: PPUSH
25649: LD_VAR 0 4
25653: PPUSH
25654: CALL_OW 488
25658: IFFALSE 25681
// begin result := [ x , y ] ;
25660: LD_ADDR_VAR 0 1
25664: PUSH
25665: LD_VAR 0 3
25669: PUSH
25670: LD_VAR 0 4
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: ST_TO_ADDR
// break ;
25679: GO 25683
// end ; end ;
25681: GO 25483
25683: POP
25684: POP
// if result then
25685: LD_VAR 0 1
25689: IFFALSE 25749
// begin ToLua ( playSibBomb() ) ;
25691: LD_STRING playSibBomb()
25693: PPUSH
25694: CALL_OW 559
// wait ( 0 0$14 ) ;
25698: LD_INT 490
25700: PPUSH
25701: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25705: LD_VAR 0 1
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: PPUSH
25714: LD_VAR 0 1
25718: PUSH
25719: LD_INT 2
25721: ARRAY
25722: PPUSH
25723: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25727: LD_VAR 0 1
25731: PUSH
25732: LD_INT 1
25734: ARRAY
25735: PPUSH
25736: LD_VAR 0 1
25740: PUSH
25741: LD_INT 2
25743: ARRAY
25744: PPUSH
25745: CALL_OW 429
// end ; end ;
25749: LD_VAR 0 1
25753: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25754: LD_EXP 77
25758: PUSH
25759: LD_EXP 99
25763: AND
25764: IFFALSE 25776
25766: GO 25768
25768: DISABLE
// YouLost (  ) ;
25769: LD_STRING 
25771: PPUSH
25772: CALL_OW 104
25776: END
// every 0 0$1 trigger StreamModeActive and sFog do
25777: LD_EXP 77
25781: PUSH
25782: LD_EXP 98
25786: AND
25787: IFFALSE 25801
25789: GO 25791
25791: DISABLE
// FogOff ( your_side ) ;
25792: LD_OWVAR 2
25796: PPUSH
25797: CALL_OW 344
25801: END
// every 0 0$1 trigger StreamModeActive and sSun do
25802: LD_EXP 77
25806: PUSH
25807: LD_EXP 100
25811: AND
25812: IFFALSE 25840
25814: GO 25816
25816: DISABLE
// begin solar_recharge_percent := 0 ;
25817: LD_ADDR_OWVAR 79
25821: PUSH
25822: LD_INT 0
25824: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25825: LD_INT 10500
25827: PPUSH
25828: CALL_OW 67
// solar_recharge_percent := 100 ;
25832: LD_ADDR_OWVAR 79
25836: PUSH
25837: LD_INT 100
25839: ST_TO_ADDR
// end ;
25840: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25841: LD_EXP 77
25845: PUSH
25846: LD_EXP 101
25850: AND
25851: IFFALSE 26090
25853: GO 25855
25855: DISABLE
25856: LD_INT 0
25858: PPUSH
25859: PPUSH
25860: PPUSH
// begin tmp := [ ] ;
25861: LD_ADDR_VAR 0 3
25865: PUSH
25866: EMPTY
25867: ST_TO_ADDR
// for i := 1 to 6 do
25868: LD_ADDR_VAR 0 1
25872: PUSH
25873: DOUBLE
25874: LD_INT 1
25876: DEC
25877: ST_TO_ADDR
25878: LD_INT 6
25880: PUSH
25881: FOR_TO
25882: IFFALSE 25987
// begin uc_nation := nation_nature ;
25884: LD_ADDR_OWVAR 21
25888: PUSH
25889: LD_INT 0
25891: ST_TO_ADDR
// uc_side := 0 ;
25892: LD_ADDR_OWVAR 20
25896: PUSH
25897: LD_INT 0
25899: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25900: LD_ADDR_OWVAR 29
25904: PUSH
25905: LD_INT 12
25907: PUSH
25908: LD_INT 12
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: ST_TO_ADDR
// hc_agressivity := 20 ;
25915: LD_ADDR_OWVAR 35
25919: PUSH
25920: LD_INT 20
25922: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25923: LD_ADDR_OWVAR 28
25927: PUSH
25928: LD_INT 17
25930: ST_TO_ADDR
// hc_gallery :=  ;
25931: LD_ADDR_OWVAR 33
25935: PUSH
25936: LD_STRING 
25938: ST_TO_ADDR
// hc_name :=  ;
25939: LD_ADDR_OWVAR 26
25943: PUSH
25944: LD_STRING 
25946: ST_TO_ADDR
// un := CreateHuman ;
25947: LD_ADDR_VAR 0 2
25951: PUSH
25952: CALL_OW 44
25956: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25957: LD_VAR 0 2
25961: PPUSH
25962: LD_INT 1
25964: PPUSH
25965: CALL_OW 51
// tmp := tmp ^ un ;
25969: LD_ADDR_VAR 0 3
25973: PUSH
25974: LD_VAR 0 3
25978: PUSH
25979: LD_VAR 0 2
25983: ADD
25984: ST_TO_ADDR
// end ;
25985: GO 25881
25987: POP
25988: POP
// repeat wait ( 0 0$1 ) ;
25989: LD_INT 35
25991: PPUSH
25992: CALL_OW 67
// for un in tmp do
25996: LD_ADDR_VAR 0 2
26000: PUSH
26001: LD_VAR 0 3
26005: PUSH
26006: FOR_IN
26007: IFFALSE 26081
// begin if IsDead ( un ) then
26009: LD_VAR 0 2
26013: PPUSH
26014: CALL_OW 301
26018: IFFALSE 26038
// begin tmp := tmp diff un ;
26020: LD_ADDR_VAR 0 3
26024: PUSH
26025: LD_VAR 0 3
26029: PUSH
26030: LD_VAR 0 2
26034: DIFF
26035: ST_TO_ADDR
// continue ;
26036: GO 26006
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26038: LD_VAR 0 2
26042: PPUSH
26043: LD_INT 3
26045: PUSH
26046: LD_INT 22
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PPUSH
26060: CALL_OW 69
26064: PPUSH
26065: LD_VAR 0 2
26069: PPUSH
26070: CALL_OW 74
26074: PPUSH
26075: CALL_OW 115
// end ;
26079: GO 26006
26081: POP
26082: POP
// until not tmp ;
26083: LD_VAR 0 3
26087: NOT
26088: IFFALSE 25989
// end ;
26090: PPOPN 3
26092: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26093: LD_EXP 77
26097: PUSH
26098: LD_EXP 102
26102: AND
26103: IFFALSE 26157
26105: GO 26107
26107: DISABLE
// begin ToLua ( displayTroll(); ) ;
26108: LD_STRING displayTroll();
26110: PPUSH
26111: CALL_OW 559
// wait ( 3 3$00 ) ;
26115: LD_INT 6300
26117: PPUSH
26118: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26122: LD_STRING hideTroll();
26124: PPUSH
26125: CALL_OW 559
// wait ( 1 1$00 ) ;
26129: LD_INT 2100
26131: PPUSH
26132: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26136: LD_STRING displayTroll();
26138: PPUSH
26139: CALL_OW 559
// wait ( 1 1$00 ) ;
26143: LD_INT 2100
26145: PPUSH
26146: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26150: LD_STRING hideTroll();
26152: PPUSH
26153: CALL_OW 559
// end ;
26157: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26158: LD_EXP 77
26162: PUSH
26163: LD_EXP 103
26167: AND
26168: IFFALSE 26231
26170: GO 26172
26172: DISABLE
26173: LD_INT 0
26175: PPUSH
// begin p := 0 ;
26176: LD_ADDR_VAR 0 1
26180: PUSH
26181: LD_INT 0
26183: ST_TO_ADDR
// repeat game_speed := 1 ;
26184: LD_ADDR_OWVAR 65
26188: PUSH
26189: LD_INT 1
26191: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26192: LD_INT 35
26194: PPUSH
26195: CALL_OW 67
// p := p + 1 ;
26199: LD_ADDR_VAR 0 1
26203: PUSH
26204: LD_VAR 0 1
26208: PUSH
26209: LD_INT 1
26211: PLUS
26212: ST_TO_ADDR
// until p >= 60 ;
26213: LD_VAR 0 1
26217: PUSH
26218: LD_INT 60
26220: GREATEREQUAL
26221: IFFALSE 26184
// game_speed := 4 ;
26223: LD_ADDR_OWVAR 65
26227: PUSH
26228: LD_INT 4
26230: ST_TO_ADDR
// end ;
26231: PPOPN 1
26233: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26234: LD_EXP 77
26238: PUSH
26239: LD_EXP 104
26243: AND
26244: IFFALSE 26390
26246: GO 26248
26248: DISABLE
26249: LD_INT 0
26251: PPUSH
26252: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26253: LD_ADDR_VAR 0 1
26257: PUSH
26258: LD_INT 22
26260: PUSH
26261: LD_OWVAR 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: LD_INT 30
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 30
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL_OW 69
26306: ST_TO_ADDR
// if not depot then
26307: LD_VAR 0 1
26311: NOT
26312: IFFALSE 26316
// exit ;
26314: GO 26390
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26316: LD_ADDR_VAR 0 2
26320: PUSH
26321: LD_VAR 0 1
26325: PUSH
26326: LD_INT 1
26328: PPUSH
26329: LD_VAR 0 1
26333: PPUSH
26334: CALL_OW 12
26338: ARRAY
26339: PPUSH
26340: CALL_OW 274
26344: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26345: LD_VAR 0 2
26349: PPUSH
26350: LD_INT 1
26352: PPUSH
26353: LD_INT 0
26355: PPUSH
26356: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26360: LD_VAR 0 2
26364: PPUSH
26365: LD_INT 2
26367: PPUSH
26368: LD_INT 0
26370: PPUSH
26371: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26375: LD_VAR 0 2
26379: PPUSH
26380: LD_INT 3
26382: PPUSH
26383: LD_INT 0
26385: PPUSH
26386: CALL_OW 277
// end ;
26390: PPOPN 2
26392: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26393: LD_EXP 77
26397: PUSH
26398: LD_EXP 105
26402: AND
26403: IFFALSE 26500
26405: GO 26407
26407: DISABLE
26408: LD_INT 0
26410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26411: LD_ADDR_VAR 0 1
26415: PUSH
26416: LD_INT 22
26418: PUSH
26419: LD_OWVAR 2
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 21
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 3
26440: PUSH
26441: LD_INT 23
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: PPUSH
26460: CALL_OW 69
26464: ST_TO_ADDR
// if not tmp then
26465: LD_VAR 0 1
26469: NOT
26470: IFFALSE 26474
// exit ;
26472: GO 26500
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26474: LD_VAR 0 1
26478: PUSH
26479: LD_INT 1
26481: PPUSH
26482: LD_VAR 0 1
26486: PPUSH
26487: CALL_OW 12
26491: ARRAY
26492: PPUSH
26493: LD_INT 200
26495: PPUSH
26496: CALL_OW 234
// end ;
26500: PPOPN 1
26502: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26503: LD_EXP 77
26507: PUSH
26508: LD_EXP 106
26512: AND
26513: IFFALSE 26592
26515: GO 26517
26517: DISABLE
26518: LD_INT 0
26520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26521: LD_ADDR_VAR 0 1
26525: PUSH
26526: LD_INT 22
26528: PUSH
26529: LD_OWVAR 2
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 21
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PPUSH
26552: CALL_OW 69
26556: ST_TO_ADDR
// if not tmp then
26557: LD_VAR 0 1
26561: NOT
26562: IFFALSE 26566
// exit ;
26564: GO 26592
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26566: LD_VAR 0 1
26570: PUSH
26571: LD_INT 1
26573: PPUSH
26574: LD_VAR 0 1
26578: PPUSH
26579: CALL_OW 12
26583: ARRAY
26584: PPUSH
26585: LD_INT 60
26587: PPUSH
26588: CALL_OW 234
// end ;
26592: PPOPN 1
26594: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26595: LD_EXP 77
26599: PUSH
26600: LD_EXP 107
26604: AND
26605: IFFALSE 26704
26607: GO 26609
26609: DISABLE
26610: LD_INT 0
26612: PPUSH
26613: PPUSH
// begin enable ;
26614: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26615: LD_ADDR_VAR 0 1
26619: PUSH
26620: LD_INT 22
26622: PUSH
26623: LD_OWVAR 2
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 61
26634: PUSH
26635: EMPTY
26636: LIST
26637: PUSH
26638: LD_INT 33
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: LIST
26652: PPUSH
26653: CALL_OW 69
26657: ST_TO_ADDR
// if not tmp then
26658: LD_VAR 0 1
26662: NOT
26663: IFFALSE 26667
// exit ;
26665: GO 26704
// for i in tmp do
26667: LD_ADDR_VAR 0 2
26671: PUSH
26672: LD_VAR 0 1
26676: PUSH
26677: FOR_IN
26678: IFFALSE 26702
// if IsControledBy ( i ) then
26680: LD_VAR 0 2
26684: PPUSH
26685: CALL_OW 312
26689: IFFALSE 26700
// ComUnlink ( i ) ;
26691: LD_VAR 0 2
26695: PPUSH
26696: CALL_OW 136
26700: GO 26677
26702: POP
26703: POP
// end ;
26704: PPOPN 2
26706: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26707: LD_EXP 77
26711: PUSH
26712: LD_EXP 108
26716: AND
26717: IFFALSE 26857
26719: GO 26721
26721: DISABLE
26722: LD_INT 0
26724: PPUSH
26725: PPUSH
// begin ToLua ( displayPowell(); ) ;
26726: LD_STRING displayPowell();
26728: PPUSH
26729: CALL_OW 559
// uc_side := 0 ;
26733: LD_ADDR_OWVAR 20
26737: PUSH
26738: LD_INT 0
26740: ST_TO_ADDR
// uc_nation := 2 ;
26741: LD_ADDR_OWVAR 21
26745: PUSH
26746: LD_INT 2
26748: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26749: LD_ADDR_OWVAR 37
26753: PUSH
26754: LD_INT 14
26756: ST_TO_ADDR
// vc_engine := engine_siberite ;
26757: LD_ADDR_OWVAR 39
26761: PUSH
26762: LD_INT 3
26764: ST_TO_ADDR
// vc_control := control_apeman ;
26765: LD_ADDR_OWVAR 38
26769: PUSH
26770: LD_INT 5
26772: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26773: LD_ADDR_OWVAR 40
26777: PUSH
26778: LD_INT 29
26780: ST_TO_ADDR
// un := CreateVehicle ;
26781: LD_ADDR_VAR 0 2
26785: PUSH
26786: CALL_OW 45
26790: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26791: LD_VAR 0 2
26795: PPUSH
26796: LD_INT 1
26798: PPUSH
26799: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26803: LD_INT 35
26805: PPUSH
26806: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26810: LD_VAR 0 2
26814: PPUSH
26815: LD_INT 22
26817: PUSH
26818: LD_OWVAR 2
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PPUSH
26827: CALL_OW 69
26831: PPUSH
26832: LD_VAR 0 2
26836: PPUSH
26837: CALL_OW 74
26841: PPUSH
26842: CALL_OW 115
// until IsDead ( un ) ;
26846: LD_VAR 0 2
26850: PPUSH
26851: CALL_OW 301
26855: IFFALSE 26803
// end ;
26857: PPOPN 2
26859: END
// every 0 0$1 trigger StreamModeActive and sStu do
26860: LD_EXP 77
26864: PUSH
26865: LD_EXP 116
26869: AND
26870: IFFALSE 26886
26872: GO 26874
26874: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26875: LD_STRING displayStucuk();
26877: PPUSH
26878: CALL_OW 559
// ResetFog ;
26882: CALL_OW 335
// end ;
26886: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26887: LD_EXP 77
26891: PUSH
26892: LD_EXP 109
26896: AND
26897: IFFALSE 27038
26899: GO 26901
26901: DISABLE
26902: LD_INT 0
26904: PPUSH
26905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26906: LD_ADDR_VAR 0 2
26910: PUSH
26911: LD_INT 22
26913: PUSH
26914: LD_OWVAR 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 21
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 69
26941: ST_TO_ADDR
// if not tmp then
26942: LD_VAR 0 2
26946: NOT
26947: IFFALSE 26951
// exit ;
26949: GO 27038
// un := tmp [ rand ( 1 , tmp ) ] ;
26951: LD_ADDR_VAR 0 1
26955: PUSH
26956: LD_VAR 0 2
26960: PUSH
26961: LD_INT 1
26963: PPUSH
26964: LD_VAR 0 2
26968: PPUSH
26969: CALL_OW 12
26973: ARRAY
26974: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26975: LD_VAR 0 1
26979: PPUSH
26980: LD_INT 0
26982: PPUSH
26983: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26987: LD_VAR 0 1
26991: PPUSH
26992: LD_OWVAR 3
26996: PUSH
26997: LD_VAR 0 1
27001: DIFF
27002: PPUSH
27003: LD_VAR 0 1
27007: PPUSH
27008: CALL_OW 74
27012: PPUSH
27013: CALL_OW 115
// wait ( 0 0$20 ) ;
27017: LD_INT 700
27019: PPUSH
27020: CALL_OW 67
// SetSide ( un , your_side ) ;
27024: LD_VAR 0 1
27028: PPUSH
27029: LD_OWVAR 2
27033: PPUSH
27034: CALL_OW 235
// end ;
27038: PPOPN 2
27040: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27041: LD_EXP 77
27045: PUSH
27046: LD_EXP 110
27050: AND
27051: IFFALSE 27157
27053: GO 27055
27055: DISABLE
27056: LD_INT 0
27058: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27059: LD_ADDR_VAR 0 1
27063: PUSH
27064: LD_INT 22
27066: PUSH
27067: LD_OWVAR 2
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 2
27078: PUSH
27079: LD_INT 30
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 30
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PPUSH
27108: CALL_OW 69
27112: ST_TO_ADDR
// if not depot then
27113: LD_VAR 0 1
27117: NOT
27118: IFFALSE 27122
// exit ;
27120: GO 27157
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27122: LD_VAR 0 1
27126: PUSH
27127: LD_INT 1
27129: ARRAY
27130: PPUSH
27131: CALL_OW 250
27135: PPUSH
27136: LD_VAR 0 1
27140: PUSH
27141: LD_INT 1
27143: ARRAY
27144: PPUSH
27145: CALL_OW 251
27149: PPUSH
27150: LD_INT 70
27152: PPUSH
27153: CALL_OW 495
// end ;
27157: PPOPN 1
27159: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27160: LD_EXP 77
27164: PUSH
27165: LD_EXP 111
27169: AND
27170: IFFALSE 27381
27172: GO 27174
27174: DISABLE
27175: LD_INT 0
27177: PPUSH
27178: PPUSH
27179: PPUSH
27180: PPUSH
27181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27182: LD_ADDR_VAR 0 5
27186: PUSH
27187: LD_INT 22
27189: PUSH
27190: LD_OWVAR 2
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 21
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PPUSH
27213: CALL_OW 69
27217: ST_TO_ADDR
// if not tmp then
27218: LD_VAR 0 5
27222: NOT
27223: IFFALSE 27227
// exit ;
27225: GO 27381
// for i in tmp do
27227: LD_ADDR_VAR 0 1
27231: PUSH
27232: LD_VAR 0 5
27236: PUSH
27237: FOR_IN
27238: IFFALSE 27379
// begin d := rand ( 0 , 5 ) ;
27240: LD_ADDR_VAR 0 4
27244: PUSH
27245: LD_INT 0
27247: PPUSH
27248: LD_INT 5
27250: PPUSH
27251: CALL_OW 12
27255: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27256: LD_ADDR_VAR 0 2
27260: PUSH
27261: LD_VAR 0 1
27265: PPUSH
27266: CALL_OW 250
27270: PPUSH
27271: LD_VAR 0 4
27275: PPUSH
27276: LD_INT 3
27278: PPUSH
27279: LD_INT 12
27281: PPUSH
27282: CALL_OW 12
27286: PPUSH
27287: CALL_OW 272
27291: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27292: LD_ADDR_VAR 0 3
27296: PUSH
27297: LD_VAR 0 1
27301: PPUSH
27302: CALL_OW 251
27306: PPUSH
27307: LD_VAR 0 4
27311: PPUSH
27312: LD_INT 3
27314: PPUSH
27315: LD_INT 12
27317: PPUSH
27318: CALL_OW 12
27322: PPUSH
27323: CALL_OW 273
27327: ST_TO_ADDR
// if ValidHex ( x , y ) then
27328: LD_VAR 0 2
27332: PPUSH
27333: LD_VAR 0 3
27337: PPUSH
27338: CALL_OW 488
27342: IFFALSE 27377
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27344: LD_VAR 0 1
27348: PPUSH
27349: LD_VAR 0 2
27353: PPUSH
27354: LD_VAR 0 3
27358: PPUSH
27359: LD_INT 3
27361: PPUSH
27362: LD_INT 6
27364: PPUSH
27365: CALL_OW 12
27369: PPUSH
27370: LD_INT 1
27372: PPUSH
27373: CALL_OW 483
// end ;
27377: GO 27237
27379: POP
27380: POP
// end ;
27381: PPOPN 5
27383: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27384: LD_EXP 77
27388: PUSH
27389: LD_EXP 112
27393: AND
27394: IFFALSE 27488
27396: GO 27398
27398: DISABLE
27399: LD_INT 0
27401: PPUSH
27402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27403: LD_ADDR_VAR 0 2
27407: PUSH
27408: LD_INT 22
27410: PUSH
27411: LD_OWVAR 2
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 32
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 21
27432: PUSH
27433: LD_INT 2
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: PPUSH
27445: CALL_OW 69
27449: ST_TO_ADDR
// if not tmp then
27450: LD_VAR 0 2
27454: NOT
27455: IFFALSE 27459
// exit ;
27457: GO 27488
// for i in tmp do
27459: LD_ADDR_VAR 0 1
27463: PUSH
27464: LD_VAR 0 2
27468: PUSH
27469: FOR_IN
27470: IFFALSE 27486
// SetFuel ( i , 0 ) ;
27472: LD_VAR 0 1
27476: PPUSH
27477: LD_INT 0
27479: PPUSH
27480: CALL_OW 240
27484: GO 27469
27486: POP
27487: POP
// end ;
27488: PPOPN 2
27490: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27491: LD_EXP 77
27495: PUSH
27496: LD_EXP 113
27500: AND
27501: IFFALSE 27567
27503: GO 27505
27505: DISABLE
27506: LD_INT 0
27508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27509: LD_ADDR_VAR 0 1
27513: PUSH
27514: LD_INT 22
27516: PUSH
27517: LD_OWVAR 2
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 30
27528: PUSH
27529: LD_INT 29
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PPUSH
27540: CALL_OW 69
27544: ST_TO_ADDR
// if not tmp then
27545: LD_VAR 0 1
27549: NOT
27550: IFFALSE 27554
// exit ;
27552: GO 27567
// DestroyUnit ( tmp [ 1 ] ) ;
27554: LD_VAR 0 1
27558: PUSH
27559: LD_INT 1
27561: ARRAY
27562: PPUSH
27563: CALL_OW 65
// end ;
27567: PPOPN 1
27569: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27570: LD_EXP 77
27574: PUSH
27575: LD_EXP 115
27579: AND
27580: IFFALSE 27709
27582: GO 27584
27584: DISABLE
27585: LD_INT 0
27587: PPUSH
// begin uc_side := 0 ;
27588: LD_ADDR_OWVAR 20
27592: PUSH
27593: LD_INT 0
27595: ST_TO_ADDR
// uc_nation := nation_arabian ;
27596: LD_ADDR_OWVAR 21
27600: PUSH
27601: LD_INT 2
27603: ST_TO_ADDR
// hc_gallery :=  ;
27604: LD_ADDR_OWVAR 33
27608: PUSH
27609: LD_STRING 
27611: ST_TO_ADDR
// hc_name :=  ;
27612: LD_ADDR_OWVAR 26
27616: PUSH
27617: LD_STRING 
27619: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27620: LD_INT 1
27622: PPUSH
27623: LD_INT 11
27625: PPUSH
27626: LD_INT 10
27628: PPUSH
27629: CALL_OW 380
// un := CreateHuman ;
27633: LD_ADDR_VAR 0 1
27637: PUSH
27638: CALL_OW 44
27642: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 1
27650: PPUSH
27651: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27655: LD_INT 35
27657: PPUSH
27658: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27662: LD_VAR 0 1
27666: PPUSH
27667: LD_INT 22
27669: PUSH
27670: LD_OWVAR 2
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PPUSH
27679: CALL_OW 69
27683: PPUSH
27684: LD_VAR 0 1
27688: PPUSH
27689: CALL_OW 74
27693: PPUSH
27694: CALL_OW 115
// until IsDead ( un ) ;
27698: LD_VAR 0 1
27702: PPUSH
27703: CALL_OW 301
27707: IFFALSE 27655
// end ;
27709: PPOPN 1
27711: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27712: LD_EXP 77
27716: PUSH
27717: LD_EXP 117
27721: AND
27722: IFFALSE 27734
27724: GO 27726
27726: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27727: LD_STRING earthquake(getX(game), 0, 32)
27729: PPUSH
27730: CALL_OW 559
27734: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27735: LD_EXP 77
27739: PUSH
27740: LD_EXP 118
27744: AND
27745: IFFALSE 27836
27747: GO 27749
27749: DISABLE
27750: LD_INT 0
27752: PPUSH
// begin enable ;
27753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27754: LD_ADDR_VAR 0 1
27758: PUSH
27759: LD_INT 22
27761: PUSH
27762: LD_OWVAR 2
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 21
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 33
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: LIST
27795: PPUSH
27796: CALL_OW 69
27800: ST_TO_ADDR
// if not tmp then
27801: LD_VAR 0 1
27805: NOT
27806: IFFALSE 27810
// exit ;
27808: GO 27836
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27810: LD_VAR 0 1
27814: PUSH
27815: LD_INT 1
27817: PPUSH
27818: LD_VAR 0 1
27822: PPUSH
27823: CALL_OW 12
27827: ARRAY
27828: PPUSH
27829: LD_INT 1
27831: PPUSH
27832: CALL_OW 234
// end ;
27836: PPOPN 1
27838: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27839: LD_EXP 77
27843: PUSH
27844: LD_EXP 119
27848: AND
27849: IFFALSE 27990
27851: GO 27853
27853: DISABLE
27854: LD_INT 0
27856: PPUSH
27857: PPUSH
27858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27859: LD_ADDR_VAR 0 3
27863: PUSH
27864: LD_INT 22
27866: PUSH
27867: LD_OWVAR 2
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 25
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PPUSH
27890: CALL_OW 69
27894: ST_TO_ADDR
// if not tmp then
27895: LD_VAR 0 3
27899: NOT
27900: IFFALSE 27904
// exit ;
27902: GO 27990
// un := tmp [ rand ( 1 , tmp ) ] ;
27904: LD_ADDR_VAR 0 2
27908: PUSH
27909: LD_VAR 0 3
27913: PUSH
27914: LD_INT 1
27916: PPUSH
27917: LD_VAR 0 3
27921: PPUSH
27922: CALL_OW 12
27926: ARRAY
27927: ST_TO_ADDR
// if Crawls ( un ) then
27928: LD_VAR 0 2
27932: PPUSH
27933: CALL_OW 318
27937: IFFALSE 27948
// ComWalk ( un ) ;
27939: LD_VAR 0 2
27943: PPUSH
27944: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27948: LD_VAR 0 2
27952: PPUSH
27953: LD_INT 9
27955: PPUSH
27956: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27960: LD_INT 28
27962: PPUSH
27963: LD_OWVAR 2
27967: PPUSH
27968: LD_INT 2
27970: PPUSH
27971: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27975: LD_INT 29
27977: PPUSH
27978: LD_OWVAR 2
27982: PPUSH
27983: LD_INT 2
27985: PPUSH
27986: CALL_OW 322
// end ;
27990: PPOPN 3
27992: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27993: LD_EXP 77
27997: PUSH
27998: LD_EXP 120
28002: AND
28003: IFFALSE 28114
28005: GO 28007
28007: DISABLE
28008: LD_INT 0
28010: PPUSH
28011: PPUSH
28012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_INT 22
28020: PUSH
28021: LD_OWVAR 2
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 25
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PPUSH
28044: CALL_OW 69
28048: ST_TO_ADDR
// if not tmp then
28049: LD_VAR 0 3
28053: NOT
28054: IFFALSE 28058
// exit ;
28056: GO 28114
// un := tmp [ rand ( 1 , tmp ) ] ;
28058: LD_ADDR_VAR 0 2
28062: PUSH
28063: LD_VAR 0 3
28067: PUSH
28068: LD_INT 1
28070: PPUSH
28071: LD_VAR 0 3
28075: PPUSH
28076: CALL_OW 12
28080: ARRAY
28081: ST_TO_ADDR
// if Crawls ( un ) then
28082: LD_VAR 0 2
28086: PPUSH
28087: CALL_OW 318
28091: IFFALSE 28102
// ComWalk ( un ) ;
28093: LD_VAR 0 2
28097: PPUSH
28098: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28102: LD_VAR 0 2
28106: PPUSH
28107: LD_INT 8
28109: PPUSH
28110: CALL_OW 336
// end ;
28114: PPOPN 3
28116: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28117: LD_EXP 77
28121: PUSH
28122: LD_EXP 121
28126: AND
28127: IFFALSE 28271
28129: GO 28131
28131: DISABLE
28132: LD_INT 0
28134: PPUSH
28135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28136: LD_ADDR_VAR 0 2
28140: PUSH
28141: LD_INT 22
28143: PUSH
28144: LD_OWVAR 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 21
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 2
28165: PUSH
28166: LD_INT 34
28168: PUSH
28169: LD_INT 12
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 34
28178: PUSH
28179: LD_INT 51
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 34
28188: PUSH
28189: LD_INT 32
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: PPUSH
28207: CALL_OW 69
28211: ST_TO_ADDR
// if not tmp then
28212: LD_VAR 0 2
28216: NOT
28217: IFFALSE 28221
// exit ;
28219: GO 28271
// for i in tmp do
28221: LD_ADDR_VAR 0 1
28225: PUSH
28226: LD_VAR 0 2
28230: PUSH
28231: FOR_IN
28232: IFFALSE 28269
// if GetCargo ( i , mat_artifact ) = 0 then
28234: LD_VAR 0 1
28238: PPUSH
28239: LD_INT 4
28241: PPUSH
28242: CALL_OW 289
28246: PUSH
28247: LD_INT 0
28249: EQUAL
28250: IFFALSE 28267
// SetCargo ( i , mat_siberit , 100 ) ;
28252: LD_VAR 0 1
28256: PPUSH
28257: LD_INT 3
28259: PPUSH
28260: LD_INT 100
28262: PPUSH
28263: CALL_OW 290
28267: GO 28231
28269: POP
28270: POP
// end ;
28271: PPOPN 2
28273: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28274: LD_EXP 77
28278: PUSH
28279: LD_EXP 122
28283: AND
28284: IFFALSE 28467
28286: GO 28288
28288: DISABLE
28289: LD_INT 0
28291: PPUSH
28292: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28293: LD_ADDR_VAR 0 2
28297: PUSH
28298: LD_INT 22
28300: PUSH
28301: LD_OWVAR 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PPUSH
28310: CALL_OW 69
28314: ST_TO_ADDR
// if not tmp then
28315: LD_VAR 0 2
28319: NOT
28320: IFFALSE 28324
// exit ;
28322: GO 28467
// for i := 1 to 2 do
28324: LD_ADDR_VAR 0 1
28328: PUSH
28329: DOUBLE
28330: LD_INT 1
28332: DEC
28333: ST_TO_ADDR
28334: LD_INT 2
28336: PUSH
28337: FOR_TO
28338: IFFALSE 28465
// begin uc_side := your_side ;
28340: LD_ADDR_OWVAR 20
28344: PUSH
28345: LD_OWVAR 2
28349: ST_TO_ADDR
// uc_nation := nation_american ;
28350: LD_ADDR_OWVAR 21
28354: PUSH
28355: LD_INT 1
28357: ST_TO_ADDR
// vc_chassis := us_morphling ;
28358: LD_ADDR_OWVAR 37
28362: PUSH
28363: LD_INT 5
28365: ST_TO_ADDR
// vc_engine := engine_siberite ;
28366: LD_ADDR_OWVAR 39
28370: PUSH
28371: LD_INT 3
28373: ST_TO_ADDR
// vc_control := control_computer ;
28374: LD_ADDR_OWVAR 38
28378: PUSH
28379: LD_INT 3
28381: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28382: LD_ADDR_OWVAR 40
28386: PUSH
28387: LD_INT 10
28389: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28390: LD_VAR 0 2
28394: PUSH
28395: LD_INT 1
28397: ARRAY
28398: PPUSH
28399: CALL_OW 310
28403: NOT
28404: IFFALSE 28451
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28406: CALL_OW 45
28410: PPUSH
28411: LD_VAR 0 2
28415: PUSH
28416: LD_INT 1
28418: ARRAY
28419: PPUSH
28420: CALL_OW 250
28424: PPUSH
28425: LD_VAR 0 2
28429: PUSH
28430: LD_INT 1
28432: ARRAY
28433: PPUSH
28434: CALL_OW 251
28438: PPUSH
28439: LD_INT 12
28441: PPUSH
28442: LD_INT 1
28444: PPUSH
28445: CALL_OW 50
28449: GO 28463
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28451: CALL_OW 45
28455: PPUSH
28456: LD_INT 1
28458: PPUSH
28459: CALL_OW 51
// end ;
28463: GO 28337
28465: POP
28466: POP
// end ;
28467: PPOPN 2
28469: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28470: LD_EXP 77
28474: PUSH
28475: LD_EXP 123
28479: AND
28480: IFFALSE 28702
28482: GO 28484
28484: DISABLE
28485: LD_INT 0
28487: PPUSH
28488: PPUSH
28489: PPUSH
28490: PPUSH
28491: PPUSH
28492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28493: LD_ADDR_VAR 0 6
28497: PUSH
28498: LD_INT 22
28500: PUSH
28501: LD_OWVAR 2
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 21
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 3
28522: PUSH
28523: LD_INT 23
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: LIST
28541: PPUSH
28542: CALL_OW 69
28546: ST_TO_ADDR
// if not tmp then
28547: LD_VAR 0 6
28551: NOT
28552: IFFALSE 28556
// exit ;
28554: GO 28702
// s1 := rand ( 1 , 4 ) ;
28556: LD_ADDR_VAR 0 2
28560: PUSH
28561: LD_INT 1
28563: PPUSH
28564: LD_INT 4
28566: PPUSH
28567: CALL_OW 12
28571: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28572: LD_ADDR_VAR 0 4
28576: PUSH
28577: LD_VAR 0 6
28581: PUSH
28582: LD_INT 1
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 2
28590: PPUSH
28591: CALL_OW 259
28595: ST_TO_ADDR
// if s1 = 1 then
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: EQUAL
28604: IFFALSE 28624
// s2 := rand ( 2 , 4 ) else
28606: LD_ADDR_VAR 0 3
28610: PUSH
28611: LD_INT 2
28613: PPUSH
28614: LD_INT 4
28616: PPUSH
28617: CALL_OW 12
28621: ST_TO_ADDR
28622: GO 28632
// s2 := 1 ;
28624: LD_ADDR_VAR 0 3
28628: PUSH
28629: LD_INT 1
28631: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28632: LD_ADDR_VAR 0 5
28636: PUSH
28637: LD_VAR 0 6
28641: PUSH
28642: LD_INT 1
28644: ARRAY
28645: PPUSH
28646: LD_VAR 0 3
28650: PPUSH
28651: CALL_OW 259
28655: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28656: LD_VAR 0 6
28660: PUSH
28661: LD_INT 1
28663: ARRAY
28664: PPUSH
28665: LD_VAR 0 2
28669: PPUSH
28670: LD_VAR 0 5
28674: PPUSH
28675: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28679: LD_VAR 0 6
28683: PUSH
28684: LD_INT 1
28686: ARRAY
28687: PPUSH
28688: LD_VAR 0 3
28692: PPUSH
28693: LD_VAR 0 4
28697: PPUSH
28698: CALL_OW 237
// end ;
28702: PPOPN 6
28704: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28705: LD_EXP 77
28709: PUSH
28710: LD_EXP 124
28714: AND
28715: IFFALSE 28794
28717: GO 28719
28719: DISABLE
28720: LD_INT 0
28722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28723: LD_ADDR_VAR 0 1
28727: PUSH
28728: LD_INT 22
28730: PUSH
28731: LD_OWVAR 2
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 30
28742: PUSH
28743: LD_INT 3
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PPUSH
28754: CALL_OW 69
28758: ST_TO_ADDR
// if not tmp then
28759: LD_VAR 0 1
28763: NOT
28764: IFFALSE 28768
// exit ;
28766: GO 28794
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28768: LD_VAR 0 1
28772: PUSH
28773: LD_INT 1
28775: PPUSH
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 12
28785: ARRAY
28786: PPUSH
28787: LD_INT 1
28789: PPUSH
28790: CALL_OW 234
// end ;
28794: PPOPN 1
28796: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28797: LD_EXP 77
28801: PUSH
28802: LD_EXP 125
28806: AND
28807: IFFALSE 28919
28809: GO 28811
28811: DISABLE
28812: LD_INT 0
28814: PPUSH
28815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28816: LD_ADDR_VAR 0 2
28820: PUSH
28821: LD_INT 22
28823: PUSH
28824: LD_OWVAR 2
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: LD_INT 30
28838: PUSH
28839: LD_INT 27
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 30
28848: PUSH
28849: LD_INT 26
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 30
28858: PUSH
28859: LD_INT 28
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PPUSH
28876: CALL_OW 69
28880: ST_TO_ADDR
// if not tmp then
28881: LD_VAR 0 2
28885: NOT
28886: IFFALSE 28890
// exit ;
28888: GO 28919
// for i in tmp do
28890: LD_ADDR_VAR 0 1
28894: PUSH
28895: LD_VAR 0 2
28899: PUSH
28900: FOR_IN
28901: IFFALSE 28917
// SetLives ( i , 1 ) ;
28903: LD_VAR 0 1
28907: PPUSH
28908: LD_INT 1
28910: PPUSH
28911: CALL_OW 234
28915: GO 28900
28917: POP
28918: POP
// end ;
28919: PPOPN 2
28921: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28922: LD_EXP 77
28926: PUSH
28927: LD_EXP 126
28931: AND
28932: IFFALSE 29206
28934: GO 28936
28936: DISABLE
28937: LD_INT 0
28939: PPUSH
28940: PPUSH
28941: PPUSH
// begin i := rand ( 1 , 7 ) ;
28942: LD_ADDR_VAR 0 1
28946: PUSH
28947: LD_INT 1
28949: PPUSH
28950: LD_INT 7
28952: PPUSH
28953: CALL_OW 12
28957: ST_TO_ADDR
// case i of 1 :
28958: LD_VAR 0 1
28962: PUSH
28963: LD_INT 1
28965: DOUBLE
28966: EQUAL
28967: IFTRUE 28971
28969: GO 28981
28971: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28972: LD_STRING earthquake(getX(game), 0, 32)
28974: PPUSH
28975: CALL_OW 559
28979: GO 29206
28981: LD_INT 2
28983: DOUBLE
28984: EQUAL
28985: IFTRUE 28989
28987: GO 29003
28989: POP
// begin ToLua ( displayStucuk(); ) ;
28990: LD_STRING displayStucuk();
28992: PPUSH
28993: CALL_OW 559
// ResetFog ;
28997: CALL_OW 335
// end ; 3 :
29001: GO 29206
29003: LD_INT 3
29005: DOUBLE
29006: EQUAL
29007: IFTRUE 29011
29009: GO 29115
29011: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29012: LD_ADDR_VAR 0 2
29016: PUSH
29017: LD_INT 22
29019: PUSH
29020: LD_OWVAR 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 25
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PPUSH
29043: CALL_OW 69
29047: ST_TO_ADDR
// if not tmp then
29048: LD_VAR 0 2
29052: NOT
29053: IFFALSE 29057
// exit ;
29055: GO 29206
// un := tmp [ rand ( 1 , tmp ) ] ;
29057: LD_ADDR_VAR 0 3
29061: PUSH
29062: LD_VAR 0 2
29066: PUSH
29067: LD_INT 1
29069: PPUSH
29070: LD_VAR 0 2
29074: PPUSH
29075: CALL_OW 12
29079: ARRAY
29080: ST_TO_ADDR
// if Crawls ( un ) then
29081: LD_VAR 0 3
29085: PPUSH
29086: CALL_OW 318
29090: IFFALSE 29101
// ComWalk ( un ) ;
29092: LD_VAR 0 3
29096: PPUSH
29097: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29101: LD_VAR 0 3
29105: PPUSH
29106: LD_INT 8
29108: PPUSH
29109: CALL_OW 336
// end ; 4 :
29113: GO 29206
29115: LD_INT 4
29117: DOUBLE
29118: EQUAL
29119: IFTRUE 29123
29121: GO 29184
29123: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29124: LD_ADDR_VAR 0 2
29128: PUSH
29129: LD_INT 22
29131: PUSH
29132: LD_OWVAR 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 30
29143: PUSH
29144: LD_INT 29
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PPUSH
29155: CALL_OW 69
29159: ST_TO_ADDR
// if not tmp then
29160: LD_VAR 0 2
29164: NOT
29165: IFFALSE 29169
// exit ;
29167: GO 29206
// DestroyUnit ( tmp [ 1 ] ) ;
29169: LD_VAR 0 2
29173: PUSH
29174: LD_INT 1
29176: ARRAY
29177: PPUSH
29178: CALL_OW 65
// end ; 5 .. 7 :
29182: GO 29206
29184: LD_INT 5
29186: DOUBLE
29187: GREATEREQUAL
29188: IFFALSE 29196
29190: LD_INT 7
29192: DOUBLE
29193: LESSEQUAL
29194: IFTRUE 29198
29196: GO 29205
29198: POP
// StreamSibBomb ; end ;
29199: CALL 25456 0 0
29203: GO 29206
29205: POP
// end ;
29206: PPOPN 3
29208: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29209: LD_EXP 77
29213: PUSH
29214: LD_EXP 127
29218: AND
29219: IFFALSE 29375
29221: GO 29223
29223: DISABLE
29224: LD_INT 0
29226: PPUSH
29227: PPUSH
29228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29229: LD_ADDR_VAR 0 2
29233: PUSH
29234: LD_INT 81
29236: PUSH
29237: LD_OWVAR 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: LD_INT 21
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 21
29261: PUSH
29262: LD_INT 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: LIST
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PPUSH
29278: CALL_OW 69
29282: ST_TO_ADDR
// if not tmp then
29283: LD_VAR 0 2
29287: NOT
29288: IFFALSE 29292
// exit ;
29290: GO 29375
// p := 0 ;
29292: LD_ADDR_VAR 0 3
29296: PUSH
29297: LD_INT 0
29299: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29300: LD_INT 35
29302: PPUSH
29303: CALL_OW 67
// p := p + 1 ;
29307: LD_ADDR_VAR 0 3
29311: PUSH
29312: LD_VAR 0 3
29316: PUSH
29317: LD_INT 1
29319: PLUS
29320: ST_TO_ADDR
// for i in tmp do
29321: LD_ADDR_VAR 0 1
29325: PUSH
29326: LD_VAR 0 2
29330: PUSH
29331: FOR_IN
29332: IFFALSE 29363
// if GetLives ( i ) < 1000 then
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 256
29343: PUSH
29344: LD_INT 1000
29346: LESS
29347: IFFALSE 29361
// SetLives ( i , 1000 ) ;
29349: LD_VAR 0 1
29353: PPUSH
29354: LD_INT 1000
29356: PPUSH
29357: CALL_OW 234
29361: GO 29331
29363: POP
29364: POP
// until p > 20 ;
29365: LD_VAR 0 3
29369: PUSH
29370: LD_INT 20
29372: GREATER
29373: IFFALSE 29300
// end ;
29375: PPOPN 3
29377: END
// every 0 0$1 trigger StreamModeActive and sTime do
29378: LD_EXP 77
29382: PUSH
29383: LD_EXP 128
29387: AND
29388: IFFALSE 29423
29390: GO 29392
29392: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29393: LD_INT 28
29395: PPUSH
29396: LD_OWVAR 2
29400: PPUSH
29401: LD_INT 2
29403: PPUSH
29404: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29408: LD_INT 30
29410: PPUSH
29411: LD_OWVAR 2
29415: PPUSH
29416: LD_INT 2
29418: PPUSH
29419: CALL_OW 322
// end ;
29423: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29424: LD_EXP 77
29428: PUSH
29429: LD_EXP 129
29433: AND
29434: IFFALSE 29555
29436: GO 29438
29438: DISABLE
29439: LD_INT 0
29441: PPUSH
29442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29443: LD_ADDR_VAR 0 2
29447: PUSH
29448: LD_INT 22
29450: PUSH
29451: LD_OWVAR 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 21
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: LD_INT 23
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: PPUSH
29492: CALL_OW 69
29496: ST_TO_ADDR
// if not tmp then
29497: LD_VAR 0 2
29501: NOT
29502: IFFALSE 29506
// exit ;
29504: GO 29555
// for i in tmp do
29506: LD_ADDR_VAR 0 1
29510: PUSH
29511: LD_VAR 0 2
29515: PUSH
29516: FOR_IN
29517: IFFALSE 29553
// begin if Crawls ( i ) then
29519: LD_VAR 0 1
29523: PPUSH
29524: CALL_OW 318
29528: IFFALSE 29539
// ComWalk ( i ) ;
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL_OW 138
// SetClass ( i , 2 ) ;
29539: LD_VAR 0 1
29543: PPUSH
29544: LD_INT 2
29546: PPUSH
29547: CALL_OW 336
// end ;
29551: GO 29516
29553: POP
29554: POP
// end ;
29555: PPOPN 2
29557: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29558: LD_EXP 77
29562: PUSH
29563: LD_EXP 130
29567: AND
29568: IFFALSE 29849
29570: GO 29572
29572: DISABLE
29573: LD_INT 0
29575: PPUSH
29576: PPUSH
29577: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29578: LD_OWVAR 2
29582: PPUSH
29583: LD_INT 9
29585: PPUSH
29586: LD_INT 1
29588: PPUSH
29589: LD_INT 1
29591: PPUSH
29592: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29596: LD_INT 9
29598: PPUSH
29599: LD_OWVAR 2
29603: PPUSH
29604: CALL_OW 343
// uc_side := 9 ;
29608: LD_ADDR_OWVAR 20
29612: PUSH
29613: LD_INT 9
29615: ST_TO_ADDR
// uc_nation := 2 ;
29616: LD_ADDR_OWVAR 21
29620: PUSH
29621: LD_INT 2
29623: ST_TO_ADDR
// hc_name := Dark Warrior ;
29624: LD_ADDR_OWVAR 26
29628: PUSH
29629: LD_STRING Dark Warrior
29631: ST_TO_ADDR
// hc_gallery :=  ;
29632: LD_ADDR_OWVAR 33
29636: PUSH
29637: LD_STRING 
29639: ST_TO_ADDR
// hc_noskilllimit := true ;
29640: LD_ADDR_OWVAR 76
29644: PUSH
29645: LD_INT 1
29647: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29648: LD_ADDR_OWVAR 31
29652: PUSH
29653: LD_INT 30
29655: PUSH
29656: LD_INT 30
29658: PUSH
29659: LD_INT 30
29661: PUSH
29662: LD_INT 30
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: ST_TO_ADDR
// un := CreateHuman ;
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: CALL_OW 44
29680: ST_TO_ADDR
// hc_noskilllimit := false ;
29681: LD_ADDR_OWVAR 76
29685: PUSH
29686: LD_INT 0
29688: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29689: LD_VAR 0 3
29693: PPUSH
29694: LD_INT 1
29696: PPUSH
29697: CALL_OW 51
// p := 0 ;
29701: LD_ADDR_VAR 0 2
29705: PUSH
29706: LD_INT 0
29708: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29709: LD_INT 35
29711: PPUSH
29712: CALL_OW 67
// p := p + 1 ;
29716: LD_ADDR_VAR 0 2
29720: PUSH
29721: LD_VAR 0 2
29725: PUSH
29726: LD_INT 1
29728: PLUS
29729: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29730: LD_VAR 0 3
29734: PPUSH
29735: CALL_OW 256
29739: PUSH
29740: LD_INT 1000
29742: LESS
29743: IFFALSE 29757
// SetLives ( un , 1000 ) ;
29745: LD_VAR 0 3
29749: PPUSH
29750: LD_INT 1000
29752: PPUSH
29753: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29757: LD_VAR 0 3
29761: PPUSH
29762: LD_INT 81
29764: PUSH
29765: LD_OWVAR 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 91
29776: PUSH
29777: LD_VAR 0 3
29781: PUSH
29782: LD_INT 30
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: PPUSH
29799: LD_VAR 0 3
29803: PPUSH
29804: CALL_OW 74
29808: PPUSH
29809: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29813: LD_VAR 0 2
29817: PUSH
29818: LD_INT 60
29820: GREATER
29821: PUSH
29822: LD_VAR 0 3
29826: PPUSH
29827: CALL_OW 301
29831: OR
29832: IFFALSE 29709
// if un then
29834: LD_VAR 0 3
29838: IFFALSE 29849
// RemoveUnit ( un ) ;
29840: LD_VAR 0 3
29844: PPUSH
29845: CALL_OW 64
// end ;
29849: PPOPN 3
29851: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29852: LD_INT 0
29854: PPUSH
// case cmd of 301 :
29855: LD_VAR 0 1
29859: PUSH
29860: LD_INT 301
29862: DOUBLE
29863: EQUAL
29864: IFTRUE 29868
29866: GO 29900
29868: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29869: LD_VAR 0 6
29873: PPUSH
29874: LD_VAR 0 7
29878: PPUSH
29879: LD_VAR 0 8
29883: PPUSH
29884: LD_VAR 0 4
29888: PPUSH
29889: LD_VAR 0 5
29893: PPUSH
29894: CALL 31101 0 5
29898: GO 30021
29900: LD_INT 302
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 29945
29908: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29909: LD_VAR 0 6
29913: PPUSH
29914: LD_VAR 0 7
29918: PPUSH
29919: LD_VAR 0 8
29923: PPUSH
29924: LD_VAR 0 9
29928: PPUSH
29929: LD_VAR 0 4
29933: PPUSH
29934: LD_VAR 0 5
29938: PPUSH
29939: CALL 31192 0 6
29943: GO 30021
29945: LD_INT 303
29947: DOUBLE
29948: EQUAL
29949: IFTRUE 29953
29951: GO 29990
29953: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29954: LD_VAR 0 6
29958: PPUSH
29959: LD_VAR 0 7
29963: PPUSH
29964: LD_VAR 0 8
29968: PPUSH
29969: LD_VAR 0 9
29973: PPUSH
29974: LD_VAR 0 4
29978: PPUSH
29979: LD_VAR 0 5
29983: PPUSH
29984: CALL 30026 0 6
29988: GO 30021
29990: LD_INT 304
29992: DOUBLE
29993: EQUAL
29994: IFTRUE 29998
29996: GO 30020
29998: POP
// hHackTeleport ( unit , x , y ) ; end ;
29999: LD_VAR 0 2
30003: PPUSH
30004: LD_VAR 0 4
30008: PPUSH
30009: LD_VAR 0 5
30013: PPUSH
30014: CALL 31785 0 3
30018: GO 30021
30020: POP
// end ;
30021: LD_VAR 0 12
30025: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30026: LD_INT 0
30028: PPUSH
30029: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30030: LD_VAR 0 1
30034: PUSH
30035: LD_INT 1
30037: LESS
30038: PUSH
30039: LD_VAR 0 1
30043: PUSH
30044: LD_INT 3
30046: GREATER
30047: OR
30048: PUSH
30049: LD_VAR 0 5
30053: PPUSH
30054: LD_VAR 0 6
30058: PPUSH
30059: CALL_OW 428
30063: OR
30064: IFFALSE 30068
// exit ;
30066: GO 30788
// uc_side := your_side ;
30068: LD_ADDR_OWVAR 20
30072: PUSH
30073: LD_OWVAR 2
30077: ST_TO_ADDR
// uc_nation := nation ;
30078: LD_ADDR_OWVAR 21
30082: PUSH
30083: LD_VAR 0 1
30087: ST_TO_ADDR
// bc_level = 1 ;
30088: LD_ADDR_OWVAR 43
30092: PUSH
30093: LD_INT 1
30095: ST_TO_ADDR
// case btype of 1 :
30096: LD_VAR 0 2
30100: PUSH
30101: LD_INT 1
30103: DOUBLE
30104: EQUAL
30105: IFTRUE 30109
30107: GO 30120
30109: POP
// bc_type := b_depot ; 2 :
30110: LD_ADDR_OWVAR 42
30114: PUSH
30115: LD_INT 0
30117: ST_TO_ADDR
30118: GO 30732
30120: LD_INT 2
30122: DOUBLE
30123: EQUAL
30124: IFTRUE 30128
30126: GO 30139
30128: POP
// bc_type := b_warehouse ; 3 :
30129: LD_ADDR_OWVAR 42
30133: PUSH
30134: LD_INT 1
30136: ST_TO_ADDR
30137: GO 30732
30139: LD_INT 3
30141: DOUBLE
30142: EQUAL
30143: IFTRUE 30147
30145: GO 30158
30147: POP
// bc_type := b_lab ; 4 .. 9 :
30148: LD_ADDR_OWVAR 42
30152: PUSH
30153: LD_INT 6
30155: ST_TO_ADDR
30156: GO 30732
30158: LD_INT 4
30160: DOUBLE
30161: GREATEREQUAL
30162: IFFALSE 30170
30164: LD_INT 9
30166: DOUBLE
30167: LESSEQUAL
30168: IFTRUE 30172
30170: GO 30224
30172: POP
// begin bc_type := b_lab_half ;
30173: LD_ADDR_OWVAR 42
30177: PUSH
30178: LD_INT 7
30180: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30181: LD_ADDR_OWVAR 44
30185: PUSH
30186: LD_INT 10
30188: PUSH
30189: LD_INT 11
30191: PUSH
30192: LD_INT 12
30194: PUSH
30195: LD_INT 15
30197: PUSH
30198: LD_INT 14
30200: PUSH
30201: LD_INT 13
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: PUSH
30212: LD_VAR 0 2
30216: PUSH
30217: LD_INT 3
30219: MINUS
30220: ARRAY
30221: ST_TO_ADDR
// end ; 10 .. 13 :
30222: GO 30732
30224: LD_INT 10
30226: DOUBLE
30227: GREATEREQUAL
30228: IFFALSE 30236
30230: LD_INT 13
30232: DOUBLE
30233: LESSEQUAL
30234: IFTRUE 30238
30236: GO 30315
30238: POP
// begin bc_type := b_lab_full ;
30239: LD_ADDR_OWVAR 42
30243: PUSH
30244: LD_INT 8
30246: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30247: LD_ADDR_OWVAR 44
30251: PUSH
30252: LD_INT 10
30254: PUSH
30255: LD_INT 12
30257: PUSH
30258: LD_INT 14
30260: PUSH
30261: LD_INT 13
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: PUSH
30270: LD_VAR 0 2
30274: PUSH
30275: LD_INT 9
30277: MINUS
30278: ARRAY
30279: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30280: LD_ADDR_OWVAR 45
30284: PUSH
30285: LD_INT 11
30287: PUSH
30288: LD_INT 15
30290: PUSH
30291: LD_INT 12
30293: PUSH
30294: LD_INT 15
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: PUSH
30303: LD_VAR 0 2
30307: PUSH
30308: LD_INT 9
30310: MINUS
30311: ARRAY
30312: ST_TO_ADDR
// end ; 14 :
30313: GO 30732
30315: LD_INT 14
30317: DOUBLE
30318: EQUAL
30319: IFTRUE 30323
30321: GO 30334
30323: POP
// bc_type := b_workshop ; 15 :
30324: LD_ADDR_OWVAR 42
30328: PUSH
30329: LD_INT 2
30331: ST_TO_ADDR
30332: GO 30732
30334: LD_INT 15
30336: DOUBLE
30337: EQUAL
30338: IFTRUE 30342
30340: GO 30353
30342: POP
// bc_type := b_factory ; 16 :
30343: LD_ADDR_OWVAR 42
30347: PUSH
30348: LD_INT 3
30350: ST_TO_ADDR
30351: GO 30732
30353: LD_INT 16
30355: DOUBLE
30356: EQUAL
30357: IFTRUE 30361
30359: GO 30372
30361: POP
// bc_type := b_ext_gun ; 17 :
30362: LD_ADDR_OWVAR 42
30366: PUSH
30367: LD_INT 17
30369: ST_TO_ADDR
30370: GO 30732
30372: LD_INT 17
30374: DOUBLE
30375: EQUAL
30376: IFTRUE 30380
30378: GO 30408
30380: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30381: LD_ADDR_OWVAR 42
30385: PUSH
30386: LD_INT 19
30388: PUSH
30389: LD_INT 23
30391: PUSH
30392: LD_INT 19
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: PUSH
30400: LD_VAR 0 1
30404: ARRAY
30405: ST_TO_ADDR
30406: GO 30732
30408: LD_INT 18
30410: DOUBLE
30411: EQUAL
30412: IFTRUE 30416
30414: GO 30427
30416: POP
// bc_type := b_ext_radar ; 19 :
30417: LD_ADDR_OWVAR 42
30421: PUSH
30422: LD_INT 20
30424: ST_TO_ADDR
30425: GO 30732
30427: LD_INT 19
30429: DOUBLE
30430: EQUAL
30431: IFTRUE 30435
30433: GO 30446
30435: POP
// bc_type := b_ext_radio ; 20 :
30436: LD_ADDR_OWVAR 42
30440: PUSH
30441: LD_INT 22
30443: ST_TO_ADDR
30444: GO 30732
30446: LD_INT 20
30448: DOUBLE
30449: EQUAL
30450: IFTRUE 30454
30452: GO 30465
30454: POP
// bc_type := b_ext_siberium ; 21 :
30455: LD_ADDR_OWVAR 42
30459: PUSH
30460: LD_INT 21
30462: ST_TO_ADDR
30463: GO 30732
30465: LD_INT 21
30467: DOUBLE
30468: EQUAL
30469: IFTRUE 30473
30471: GO 30484
30473: POP
// bc_type := b_ext_computer ; 22 :
30474: LD_ADDR_OWVAR 42
30478: PUSH
30479: LD_INT 24
30481: ST_TO_ADDR
30482: GO 30732
30484: LD_INT 22
30486: DOUBLE
30487: EQUAL
30488: IFTRUE 30492
30490: GO 30503
30492: POP
// bc_type := b_ext_track ; 23 :
30493: LD_ADDR_OWVAR 42
30497: PUSH
30498: LD_INT 16
30500: ST_TO_ADDR
30501: GO 30732
30503: LD_INT 23
30505: DOUBLE
30506: EQUAL
30507: IFTRUE 30511
30509: GO 30522
30511: POP
// bc_type := b_ext_laser ; 24 :
30512: LD_ADDR_OWVAR 42
30516: PUSH
30517: LD_INT 25
30519: ST_TO_ADDR
30520: GO 30732
30522: LD_INT 24
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30541
30530: POP
// bc_type := b_control_tower ; 25 :
30531: LD_ADDR_OWVAR 42
30535: PUSH
30536: LD_INT 36
30538: ST_TO_ADDR
30539: GO 30732
30541: LD_INT 25
30543: DOUBLE
30544: EQUAL
30545: IFTRUE 30549
30547: GO 30560
30549: POP
// bc_type := b_breastwork ; 26 :
30550: LD_ADDR_OWVAR 42
30554: PUSH
30555: LD_INT 31
30557: ST_TO_ADDR
30558: GO 30732
30560: LD_INT 26
30562: DOUBLE
30563: EQUAL
30564: IFTRUE 30568
30566: GO 30579
30568: POP
// bc_type := b_bunker ; 27 :
30569: LD_ADDR_OWVAR 42
30573: PUSH
30574: LD_INT 32
30576: ST_TO_ADDR
30577: GO 30732
30579: LD_INT 27
30581: DOUBLE
30582: EQUAL
30583: IFTRUE 30587
30585: GO 30598
30587: POP
// bc_type := b_turret ; 28 :
30588: LD_ADDR_OWVAR 42
30592: PUSH
30593: LD_INT 33
30595: ST_TO_ADDR
30596: GO 30732
30598: LD_INT 28
30600: DOUBLE
30601: EQUAL
30602: IFTRUE 30606
30604: GO 30617
30606: POP
// bc_type := b_armoury ; 29 :
30607: LD_ADDR_OWVAR 42
30611: PUSH
30612: LD_INT 4
30614: ST_TO_ADDR
30615: GO 30732
30617: LD_INT 29
30619: DOUBLE
30620: EQUAL
30621: IFTRUE 30625
30623: GO 30636
30625: POP
// bc_type := b_barracks ; 30 :
30626: LD_ADDR_OWVAR 42
30630: PUSH
30631: LD_INT 5
30633: ST_TO_ADDR
30634: GO 30732
30636: LD_INT 30
30638: DOUBLE
30639: EQUAL
30640: IFTRUE 30644
30642: GO 30655
30644: POP
// bc_type := b_solar_power ; 31 :
30645: LD_ADDR_OWVAR 42
30649: PUSH
30650: LD_INT 27
30652: ST_TO_ADDR
30653: GO 30732
30655: LD_INT 31
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 30674
30663: POP
// bc_type := b_oil_power ; 32 :
30664: LD_ADDR_OWVAR 42
30668: PUSH
30669: LD_INT 26
30671: ST_TO_ADDR
30672: GO 30732
30674: LD_INT 32
30676: DOUBLE
30677: EQUAL
30678: IFTRUE 30682
30680: GO 30693
30682: POP
// bc_type := b_siberite_power ; 33 :
30683: LD_ADDR_OWVAR 42
30687: PUSH
30688: LD_INT 28
30690: ST_TO_ADDR
30691: GO 30732
30693: LD_INT 33
30695: DOUBLE
30696: EQUAL
30697: IFTRUE 30701
30699: GO 30712
30701: POP
// bc_type := b_oil_mine ; 34 :
30702: LD_ADDR_OWVAR 42
30706: PUSH
30707: LD_INT 29
30709: ST_TO_ADDR
30710: GO 30732
30712: LD_INT 34
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30731
30720: POP
// bc_type := b_siberite_mine ; end ;
30721: LD_ADDR_OWVAR 42
30725: PUSH
30726: LD_INT 30
30728: ST_TO_ADDR
30729: GO 30732
30731: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30732: LD_ADDR_VAR 0 8
30736: PUSH
30737: LD_VAR 0 5
30741: PPUSH
30742: LD_VAR 0 6
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: CALL_OW 47
30756: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30757: LD_OWVAR 42
30761: PUSH
30762: LD_INT 32
30764: PUSH
30765: LD_INT 33
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: IN
30772: IFFALSE 30788
// PlaceWeaponTurret ( b , weapon ) ;
30774: LD_VAR 0 8
30778: PPUSH
30779: LD_VAR 0 4
30783: PPUSH
30784: CALL_OW 431
// end ;
30788: LD_VAR 0 7
30792: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30793: LD_INT 0
30795: PPUSH
30796: PPUSH
30797: PPUSH
30798: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30799: LD_ADDR_VAR 0 4
30803: PUSH
30804: LD_INT 22
30806: PUSH
30807: LD_OWVAR 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 2
30818: PUSH
30819: LD_INT 30
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 30
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PPUSH
30848: CALL_OW 69
30852: ST_TO_ADDR
// if not tmp then
30853: LD_VAR 0 4
30857: NOT
30858: IFFALSE 30862
// exit ;
30860: GO 30921
// for i in tmp do
30862: LD_ADDR_VAR 0 2
30866: PUSH
30867: LD_VAR 0 4
30871: PUSH
30872: FOR_IN
30873: IFFALSE 30919
// for j = 1 to 3 do
30875: LD_ADDR_VAR 0 3
30879: PUSH
30880: DOUBLE
30881: LD_INT 1
30883: DEC
30884: ST_TO_ADDR
30885: LD_INT 3
30887: PUSH
30888: FOR_TO
30889: IFFALSE 30915
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30891: LD_VAR 0 2
30895: PPUSH
30896: CALL_OW 274
30900: PPUSH
30901: LD_VAR 0 3
30905: PPUSH
30906: LD_INT 99999
30908: PPUSH
30909: CALL_OW 277
30913: GO 30888
30915: POP
30916: POP
30917: GO 30872
30919: POP
30920: POP
// end ;
30921: LD_VAR 0 1
30925: RET
// export function hHackSetLevel10 ; var i , j ; begin
30926: LD_INT 0
30928: PPUSH
30929: PPUSH
30930: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30931: LD_ADDR_VAR 0 2
30935: PUSH
30936: LD_INT 21
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PPUSH
30946: CALL_OW 69
30950: PUSH
30951: FOR_IN
30952: IFFALSE 31004
// if IsSelected ( i ) then
30954: LD_VAR 0 2
30958: PPUSH
30959: CALL_OW 306
30963: IFFALSE 31002
// begin for j := 1 to 4 do
30965: LD_ADDR_VAR 0 3
30969: PUSH
30970: DOUBLE
30971: LD_INT 1
30973: DEC
30974: ST_TO_ADDR
30975: LD_INT 4
30977: PUSH
30978: FOR_TO
30979: IFFALSE 31000
// SetSkill ( i , j , 10 ) ;
30981: LD_VAR 0 2
30985: PPUSH
30986: LD_VAR 0 3
30990: PPUSH
30991: LD_INT 10
30993: PPUSH
30994: CALL_OW 237
30998: GO 30978
31000: POP
31001: POP
// end ;
31002: GO 30951
31004: POP
31005: POP
// end ;
31006: LD_VAR 0 1
31010: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31011: LD_INT 0
31013: PPUSH
31014: PPUSH
31015: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31016: LD_ADDR_VAR 0 2
31020: PUSH
31021: LD_INT 22
31023: PUSH
31024: LD_OWVAR 2
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 21
31035: PUSH
31036: LD_INT 1
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PPUSH
31047: CALL_OW 69
31051: PUSH
31052: FOR_IN
31053: IFFALSE 31094
// begin for j := 1 to 4 do
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: DOUBLE
31061: LD_INT 1
31063: DEC
31064: ST_TO_ADDR
31065: LD_INT 4
31067: PUSH
31068: FOR_TO
31069: IFFALSE 31090
// SetSkill ( i , j , 10 ) ;
31071: LD_VAR 0 2
31075: PPUSH
31076: LD_VAR 0 3
31080: PPUSH
31081: LD_INT 10
31083: PPUSH
31084: CALL_OW 237
31088: GO 31068
31090: POP
31091: POP
// end ;
31092: GO 31052
31094: POP
31095: POP
// end ;
31096: LD_VAR 0 1
31100: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31101: LD_INT 0
31103: PPUSH
// uc_side := your_side ;
31104: LD_ADDR_OWVAR 20
31108: PUSH
31109: LD_OWVAR 2
31113: ST_TO_ADDR
// uc_nation := nation ;
31114: LD_ADDR_OWVAR 21
31118: PUSH
31119: LD_VAR 0 1
31123: ST_TO_ADDR
// InitHc ;
31124: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31128: LD_INT 0
31130: PPUSH
31131: LD_VAR 0 2
31135: PPUSH
31136: LD_VAR 0 3
31140: PPUSH
31141: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31145: LD_VAR 0 4
31149: PPUSH
31150: LD_VAR 0 5
31154: PPUSH
31155: CALL_OW 428
31159: PUSH
31160: LD_INT 0
31162: EQUAL
31163: IFFALSE 31187
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31165: CALL_OW 44
31169: PPUSH
31170: LD_VAR 0 4
31174: PPUSH
31175: LD_VAR 0 5
31179: PPUSH
31180: LD_INT 1
31182: PPUSH
31183: CALL_OW 48
// end ;
31187: LD_VAR 0 6
31191: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31192: LD_INT 0
31194: PPUSH
31195: PPUSH
// uc_side := your_side ;
31196: LD_ADDR_OWVAR 20
31200: PUSH
31201: LD_OWVAR 2
31205: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31206: LD_VAR 0 1
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: LD_INT 4
31222: PUSH
31223: LD_INT 5
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: IN
31233: IFFALSE 31245
// uc_nation := nation_american else
31235: LD_ADDR_OWVAR 21
31239: PUSH
31240: LD_INT 1
31242: ST_TO_ADDR
31243: GO 31288
// if chassis in [ 11 , 12 , 13 , 14 ] then
31245: LD_VAR 0 1
31249: PUSH
31250: LD_INT 11
31252: PUSH
31253: LD_INT 12
31255: PUSH
31256: LD_INT 13
31258: PUSH
31259: LD_INT 14
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: IN
31268: IFFALSE 31280
// uc_nation := nation_arabian else
31270: LD_ADDR_OWVAR 21
31274: PUSH
31275: LD_INT 2
31277: ST_TO_ADDR
31278: GO 31288
// uc_nation := nation_russian ;
31280: LD_ADDR_OWVAR 21
31284: PUSH
31285: LD_INT 3
31287: ST_TO_ADDR
// vc_chassis := chassis ;
31288: LD_ADDR_OWVAR 37
31292: PUSH
31293: LD_VAR 0 1
31297: ST_TO_ADDR
// vc_engine := engine ;
31298: LD_ADDR_OWVAR 39
31302: PUSH
31303: LD_VAR 0 2
31307: ST_TO_ADDR
// vc_control := control ;
31308: LD_ADDR_OWVAR 38
31312: PUSH
31313: LD_VAR 0 3
31317: ST_TO_ADDR
// vc_weapon := weapon ;
31318: LD_ADDR_OWVAR 40
31322: PUSH
31323: LD_VAR 0 4
31327: ST_TO_ADDR
// un := CreateVehicle ;
31328: LD_ADDR_VAR 0 8
31332: PUSH
31333: CALL_OW 45
31337: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31338: LD_VAR 0 8
31342: PPUSH
31343: LD_INT 0
31345: PPUSH
31346: LD_INT 5
31348: PPUSH
31349: CALL_OW 12
31353: PPUSH
31354: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31358: LD_VAR 0 8
31362: PPUSH
31363: LD_VAR 0 5
31367: PPUSH
31368: LD_VAR 0 6
31372: PPUSH
31373: LD_INT 1
31375: PPUSH
31376: CALL_OW 48
// end ;
31380: LD_VAR 0 7
31384: RET
// export hInvincible ; every 1 do
31385: GO 31387
31387: DISABLE
// hInvincible := [ ] ;
31388: LD_ADDR_EXP 131
31392: PUSH
31393: EMPTY
31394: ST_TO_ADDR
31395: END
// every 10 do var i ;
31396: GO 31398
31398: DISABLE
31399: LD_INT 0
31401: PPUSH
// begin enable ;
31402: ENABLE
// if not hInvincible then
31403: LD_EXP 131
31407: NOT
31408: IFFALSE 31412
// exit ;
31410: GO 31456
// for i in hInvincible do
31412: LD_ADDR_VAR 0 1
31416: PUSH
31417: LD_EXP 131
31421: PUSH
31422: FOR_IN
31423: IFFALSE 31454
// if GetLives ( i ) < 1000 then
31425: LD_VAR 0 1
31429: PPUSH
31430: CALL_OW 256
31434: PUSH
31435: LD_INT 1000
31437: LESS
31438: IFFALSE 31452
// SetLives ( i , 1000 ) ;
31440: LD_VAR 0 1
31444: PPUSH
31445: LD_INT 1000
31447: PPUSH
31448: CALL_OW 234
31452: GO 31422
31454: POP
31455: POP
// end ;
31456: PPOPN 1
31458: END
// export function hHackInvincible ; var i ; begin
31459: LD_INT 0
31461: PPUSH
31462: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31463: LD_ADDR_VAR 0 2
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: LD_INT 21
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 21
31483: PUSH
31484: LD_INT 2
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: PPUSH
31496: CALL_OW 69
31500: PUSH
31501: FOR_IN
31502: IFFALSE 31563
// if IsSelected ( i ) then
31504: LD_VAR 0 2
31508: PPUSH
31509: CALL_OW 306
31513: IFFALSE 31561
// begin if i in hInvincible then
31515: LD_VAR 0 2
31519: PUSH
31520: LD_EXP 131
31524: IN
31525: IFFALSE 31545
// hInvincible := hInvincible diff i else
31527: LD_ADDR_EXP 131
31531: PUSH
31532: LD_EXP 131
31536: PUSH
31537: LD_VAR 0 2
31541: DIFF
31542: ST_TO_ADDR
31543: GO 31561
// hInvincible := hInvincible union i ;
31545: LD_ADDR_EXP 131
31549: PUSH
31550: LD_EXP 131
31554: PUSH
31555: LD_VAR 0 2
31559: UNION
31560: ST_TO_ADDR
// end ;
31561: GO 31501
31563: POP
31564: POP
// end ;
31565: LD_VAR 0 1
31569: RET
// export function hHackInvisible ; var i , j ; begin
31570: LD_INT 0
31572: PPUSH
31573: PPUSH
31574: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31575: LD_ADDR_VAR 0 2
31579: PUSH
31580: LD_INT 21
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PPUSH
31590: CALL_OW 69
31594: PUSH
31595: FOR_IN
31596: IFFALSE 31620
// if IsSelected ( i ) then
31598: LD_VAR 0 2
31602: PPUSH
31603: CALL_OW 306
31607: IFFALSE 31618
// ComForceInvisible ( i ) ;
31609: LD_VAR 0 2
31613: PPUSH
31614: CALL_OW 496
31618: GO 31595
31620: POP
31621: POP
// end ;
31622: LD_VAR 0 1
31626: RET
// export function hHackChangeYourSide ; begin
31627: LD_INT 0
31629: PPUSH
// if your_side = 8 then
31630: LD_OWVAR 2
31634: PUSH
31635: LD_INT 8
31637: EQUAL
31638: IFFALSE 31650
// your_side := 0 else
31640: LD_ADDR_OWVAR 2
31644: PUSH
31645: LD_INT 0
31647: ST_TO_ADDR
31648: GO 31664
// your_side := your_side + 1 ;
31650: LD_ADDR_OWVAR 2
31654: PUSH
31655: LD_OWVAR 2
31659: PUSH
31660: LD_INT 1
31662: PLUS
31663: ST_TO_ADDR
// end ;
31664: LD_VAR 0 1
31668: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31669: LD_INT 0
31671: PPUSH
31672: PPUSH
31673: PPUSH
// for i in all_units do
31674: LD_ADDR_VAR 0 2
31678: PUSH
31679: LD_OWVAR 3
31683: PUSH
31684: FOR_IN
31685: IFFALSE 31763
// if IsSelected ( i ) then
31687: LD_VAR 0 2
31691: PPUSH
31692: CALL_OW 306
31696: IFFALSE 31761
// begin j := GetSide ( i ) ;
31698: LD_ADDR_VAR 0 3
31702: PUSH
31703: LD_VAR 0 2
31707: PPUSH
31708: CALL_OW 255
31712: ST_TO_ADDR
// if j = 8 then
31713: LD_VAR 0 3
31717: PUSH
31718: LD_INT 8
31720: EQUAL
31721: IFFALSE 31733
// j := 0 else
31723: LD_ADDR_VAR 0 3
31727: PUSH
31728: LD_INT 0
31730: ST_TO_ADDR
31731: GO 31747
// j := j + 1 ;
31733: LD_ADDR_VAR 0 3
31737: PUSH
31738: LD_VAR 0 3
31742: PUSH
31743: LD_INT 1
31745: PLUS
31746: ST_TO_ADDR
// SetSide ( i , j ) ;
31747: LD_VAR 0 2
31751: PPUSH
31752: LD_VAR 0 3
31756: PPUSH
31757: CALL_OW 235
// end ;
31761: GO 31684
31763: POP
31764: POP
// end ;
31765: LD_VAR 0 1
31769: RET
// export function hHackFog ; begin
31770: LD_INT 0
31772: PPUSH
// FogOff ( true ) ;
31773: LD_INT 1
31775: PPUSH
31776: CALL_OW 344
// end ;
31780: LD_VAR 0 1
31784: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31785: LD_INT 0
31787: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31788: LD_VAR 0 1
31792: PPUSH
31793: LD_VAR 0 2
31797: PPUSH
31798: LD_VAR 0 3
31802: PPUSH
31803: LD_INT 1
31805: PPUSH
31806: LD_INT 1
31808: PPUSH
31809: CALL_OW 483
// CenterOnXY ( x , y ) ;
31813: LD_VAR 0 2
31817: PPUSH
31818: LD_VAR 0 3
31822: PPUSH
31823: CALL_OW 84
// end ; end_of_file
31827: LD_VAR 0 4
31831: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31832: LD_INT 0
31834: PPUSH
31835: PPUSH
31836: PPUSH
31837: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31838: LD_VAR 0 1
31842: PPUSH
31843: CALL_OW 264
31847: PUSH
31848: LD_EXP 66
31852: EQUAL
31853: IFFALSE 31925
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31855: LD_INT 68
31857: PPUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 255
31867: PPUSH
31868: CALL_OW 321
31872: PUSH
31873: LD_INT 2
31875: EQUAL
31876: IFFALSE 31888
// eff := 70 else
31878: LD_ADDR_VAR 0 4
31882: PUSH
31883: LD_INT 70
31885: ST_TO_ADDR
31886: GO 31896
// eff := 30 ;
31888: LD_ADDR_VAR 0 4
31892: PUSH
31893: LD_INT 30
31895: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31896: LD_VAR 0 1
31900: PPUSH
31901: CALL_OW 250
31905: PPUSH
31906: LD_VAR 0 1
31910: PPUSH
31911: CALL_OW 251
31915: PPUSH
31916: LD_VAR 0 4
31920: PPUSH
31921: CALL_OW 495
// end ; end ;
31925: LD_VAR 0 2
31929: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31930: LD_INT 0
31932: PPUSH
// end ;
31933: LD_VAR 0 4
31937: RET
// export function SOS_Command ( cmd ) ; begin
31938: LD_INT 0
31940: PPUSH
// end ;
31941: LD_VAR 0 2
31945: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31946: LD_INT 0
31948: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31949: LD_VAR 0 1
31953: PUSH
31954: LD_INT 254
31956: EQUAL
31957: PUSH
31958: LD_VAR 0 2
31962: PPUSH
31963: CALL_OW 264
31967: PUSH
31968: LD_EXP 64
31972: EQUAL
31973: AND
31974: PUSH
31975: LD_VAR 0 3
31979: PPUSH
31980: CALL_OW 263
31984: PUSH
31985: LD_INT 3
31987: EQUAL
31988: AND
31989: IFFALSE 32005
// HackDestroyVehicle ( unit , selectedUnit ) ;
31991: LD_VAR 0 2
31995: PPUSH
31996: LD_VAR 0 3
32000: PPUSH
32001: CALL 33514 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32005: LD_VAR 0 1
32009: PUSH
32010: LD_INT 255
32012: EQUAL
32013: PUSH
32014: LD_VAR 0 2
32018: PPUSH
32019: CALL_OW 264
32023: PUSH
32024: LD_INT 14
32026: PUSH
32027: LD_INT 53
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: IN
32034: AND
32035: PUSH
32036: LD_VAR 0 4
32040: PPUSH
32041: LD_VAR 0 5
32045: PPUSH
32046: CALL_OW 488
32050: AND
32051: IFFALSE 32075
// CutTreeXYR ( unit , x , y , 12 ) ;
32053: LD_VAR 0 2
32057: PPUSH
32058: LD_VAR 0 4
32062: PPUSH
32063: LD_VAR 0 5
32067: PPUSH
32068: LD_INT 12
32070: PPUSH
32071: CALL 32080 0 4
// end ;
32075: LD_VAR 0 6
32079: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32080: LD_INT 0
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
32086: PPUSH
32087: PPUSH
32088: PPUSH
32089: PPUSH
32090: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32091: LD_VAR 0 1
32095: NOT
32096: PUSH
32097: LD_VAR 0 2
32101: PPUSH
32102: LD_VAR 0 3
32106: PPUSH
32107: CALL_OW 488
32111: NOT
32112: OR
32113: PUSH
32114: LD_VAR 0 4
32118: NOT
32119: OR
32120: IFFALSE 32124
// exit ;
32122: GO 32464
// list := [ ] ;
32124: LD_ADDR_VAR 0 13
32128: PUSH
32129: EMPTY
32130: ST_TO_ADDR
// if x - r < 0 then
32131: LD_VAR 0 2
32135: PUSH
32136: LD_VAR 0 4
32140: MINUS
32141: PUSH
32142: LD_INT 0
32144: LESS
32145: IFFALSE 32157
// min_x := 0 else
32147: LD_ADDR_VAR 0 7
32151: PUSH
32152: LD_INT 0
32154: ST_TO_ADDR
32155: GO 32173
// min_x := x - r ;
32157: LD_ADDR_VAR 0 7
32161: PUSH
32162: LD_VAR 0 2
32166: PUSH
32167: LD_VAR 0 4
32171: MINUS
32172: ST_TO_ADDR
// if y - r < 0 then
32173: LD_VAR 0 3
32177: PUSH
32178: LD_VAR 0 4
32182: MINUS
32183: PUSH
32184: LD_INT 0
32186: LESS
32187: IFFALSE 32199
// min_y := 0 else
32189: LD_ADDR_VAR 0 8
32193: PUSH
32194: LD_INT 0
32196: ST_TO_ADDR
32197: GO 32215
// min_y := y - r ;
32199: LD_ADDR_VAR 0 8
32203: PUSH
32204: LD_VAR 0 3
32208: PUSH
32209: LD_VAR 0 4
32213: MINUS
32214: ST_TO_ADDR
// max_x := x + r ;
32215: LD_ADDR_VAR 0 9
32219: PUSH
32220: LD_VAR 0 2
32224: PUSH
32225: LD_VAR 0 4
32229: PLUS
32230: ST_TO_ADDR
// max_y := y + r ;
32231: LD_ADDR_VAR 0 10
32235: PUSH
32236: LD_VAR 0 3
32240: PUSH
32241: LD_VAR 0 4
32245: PLUS
32246: ST_TO_ADDR
// for _x = min_x to max_x do
32247: LD_ADDR_VAR 0 11
32251: PUSH
32252: DOUBLE
32253: LD_VAR 0 7
32257: DEC
32258: ST_TO_ADDR
32259: LD_VAR 0 9
32263: PUSH
32264: FOR_TO
32265: IFFALSE 32382
// for _y = min_y to max_y do
32267: LD_ADDR_VAR 0 12
32271: PUSH
32272: DOUBLE
32273: LD_VAR 0 8
32277: DEC
32278: ST_TO_ADDR
32279: LD_VAR 0 10
32283: PUSH
32284: FOR_TO
32285: IFFALSE 32378
// begin if not ValidHex ( _x , _y ) then
32287: LD_VAR 0 11
32291: PPUSH
32292: LD_VAR 0 12
32296: PPUSH
32297: CALL_OW 488
32301: NOT
32302: IFFALSE 32306
// continue ;
32304: GO 32284
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32306: LD_VAR 0 11
32310: PPUSH
32311: LD_VAR 0 12
32315: PPUSH
32316: CALL_OW 351
32320: PUSH
32321: LD_VAR 0 11
32325: PPUSH
32326: LD_VAR 0 12
32330: PPUSH
32331: CALL_OW 554
32335: AND
32336: IFFALSE 32376
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32338: LD_ADDR_VAR 0 13
32342: PUSH
32343: LD_VAR 0 13
32347: PPUSH
32348: LD_VAR 0 13
32352: PUSH
32353: LD_INT 1
32355: PLUS
32356: PPUSH
32357: LD_VAR 0 11
32361: PUSH
32362: LD_VAR 0 12
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PPUSH
32371: CALL_OW 2
32375: ST_TO_ADDR
// end ;
32376: GO 32284
32378: POP
32379: POP
32380: GO 32264
32382: POP
32383: POP
// if not list then
32384: LD_VAR 0 13
32388: NOT
32389: IFFALSE 32393
// exit ;
32391: GO 32464
// for i in list do
32393: LD_ADDR_VAR 0 6
32397: PUSH
32398: LD_VAR 0 13
32402: PUSH
32403: FOR_IN
32404: IFFALSE 32462
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32406: LD_VAR 0 1
32410: PPUSH
32411: LD_STRING M
32413: PUSH
32414: LD_VAR 0 6
32418: PUSH
32419: LD_INT 1
32421: ARRAY
32422: PUSH
32423: LD_VAR 0 6
32427: PUSH
32428: LD_INT 2
32430: ARRAY
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: PUSH
32453: EMPTY
32454: LIST
32455: PPUSH
32456: CALL_OW 447
32460: GO 32403
32462: POP
32463: POP
// end ;
32464: LD_VAR 0 5
32468: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32469: LD_EXP 132
32473: NOT
32474: IFFALSE 32524
32476: GO 32478
32478: DISABLE
// begin initHack := true ;
32479: LD_ADDR_EXP 132
32483: PUSH
32484: LD_INT 1
32486: ST_TO_ADDR
// hackTanks := [ ] ;
32487: LD_ADDR_EXP 133
32491: PUSH
32492: EMPTY
32493: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32494: LD_ADDR_EXP 134
32498: PUSH
32499: EMPTY
32500: ST_TO_ADDR
// hackLimit := 3 ;
32501: LD_ADDR_EXP 135
32505: PUSH
32506: LD_INT 3
32508: ST_TO_ADDR
// hackDist := 12 ;
32509: LD_ADDR_EXP 136
32513: PUSH
32514: LD_INT 12
32516: ST_TO_ADDR
// hackCounter := [ ] ;
32517: LD_ADDR_EXP 137
32521: PUSH
32522: EMPTY
32523: ST_TO_ADDR
// end ;
32524: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32525: LD_EXP 132
32529: PUSH
32530: LD_INT 34
32532: PUSH
32533: LD_EXP 64
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PPUSH
32542: CALL_OW 69
32546: AND
32547: IFFALSE 32802
32549: GO 32551
32551: DISABLE
32552: LD_INT 0
32554: PPUSH
32555: PPUSH
// begin enable ;
32556: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32557: LD_ADDR_VAR 0 1
32561: PUSH
32562: LD_INT 34
32564: PUSH
32565: LD_EXP 64
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PPUSH
32574: CALL_OW 69
32578: PUSH
32579: FOR_IN
32580: IFFALSE 32800
// begin if not i in hackTanks then
32582: LD_VAR 0 1
32586: PUSH
32587: LD_EXP 133
32591: IN
32592: NOT
32593: IFFALSE 32676
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32595: LD_ADDR_EXP 133
32599: PUSH
32600: LD_EXP 133
32604: PPUSH
32605: LD_EXP 133
32609: PUSH
32610: LD_INT 1
32612: PLUS
32613: PPUSH
32614: LD_VAR 0 1
32618: PPUSH
32619: CALL_OW 1
32623: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32624: LD_ADDR_EXP 134
32628: PUSH
32629: LD_EXP 134
32633: PPUSH
32634: LD_EXP 134
32638: PUSH
32639: LD_INT 1
32641: PLUS
32642: PPUSH
32643: EMPTY
32644: PPUSH
32645: CALL_OW 1
32649: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32650: LD_ADDR_EXP 137
32654: PUSH
32655: LD_EXP 137
32659: PPUSH
32660: LD_EXP 137
32664: PUSH
32665: LD_INT 1
32667: PLUS
32668: PPUSH
32669: EMPTY
32670: PPUSH
32671: CALL_OW 1
32675: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32676: LD_VAR 0 1
32680: PPUSH
32681: CALL_OW 302
32685: NOT
32686: IFFALSE 32699
// begin HackUnlinkAll ( i ) ;
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL 32805 0 1
// continue ;
32697: GO 32579
// end ; HackCheckCapturedStatus ( i ) ;
32699: LD_VAR 0 1
32703: PPUSH
32704: CALL 33248 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32708: LD_ADDR_VAR 0 2
32712: PUSH
32713: LD_INT 81
32715: PUSH
32716: LD_VAR 0 1
32720: PPUSH
32721: CALL_OW 255
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 33
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 91
32742: PUSH
32743: LD_VAR 0 1
32747: PUSH
32748: LD_EXP 136
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 50
32760: PUSH
32761: EMPTY
32762: LIST
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: PPUSH
32770: CALL_OW 69
32774: ST_TO_ADDR
// if not tmp then
32775: LD_VAR 0 2
32779: NOT
32780: IFFALSE 32784
// continue ;
32782: GO 32579
// HackLink ( i , tmp ) ;
32784: LD_VAR 0 1
32788: PPUSH
32789: LD_VAR 0 2
32793: PPUSH
32794: CALL 32941 0 2
// end ;
32798: GO 32579
32800: POP
32801: POP
// end ;
32802: PPOPN 2
32804: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32805: LD_INT 0
32807: PPUSH
32808: PPUSH
32809: PPUSH
// if not hack in hackTanks then
32810: LD_VAR 0 1
32814: PUSH
32815: LD_EXP 133
32819: IN
32820: NOT
32821: IFFALSE 32825
// exit ;
32823: GO 32936
// index := GetElementIndex ( hackTanks , hack ) ;
32825: LD_ADDR_VAR 0 4
32829: PUSH
32830: LD_EXP 133
32834: PPUSH
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL 38356 0 2
32844: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32845: LD_EXP 134
32849: PUSH
32850: LD_VAR 0 4
32854: ARRAY
32855: IFFALSE 32936
// begin for i in hackTanksCaptured [ index ] do
32857: LD_ADDR_VAR 0 3
32861: PUSH
32862: LD_EXP 134
32866: PUSH
32867: LD_VAR 0 4
32871: ARRAY
32872: PUSH
32873: FOR_IN
32874: IFFALSE 32900
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32876: LD_VAR 0 3
32880: PUSH
32881: LD_INT 1
32883: ARRAY
32884: PPUSH
32885: LD_VAR 0 3
32889: PUSH
32890: LD_INT 2
32892: ARRAY
32893: PPUSH
32894: CALL_OW 235
32898: GO 32873
32900: POP
32901: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32902: LD_ADDR_EXP 134
32906: PUSH
32907: LD_EXP 134
32911: PPUSH
32912: LD_VAR 0 4
32916: PPUSH
32917: EMPTY
32918: PPUSH
32919: CALL_OW 1
32923: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32924: LD_VAR 0 1
32928: PPUSH
32929: LD_INT 0
32931: PPUSH
32932: CALL_OW 505
// end ; end ;
32936: LD_VAR 0 2
32940: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32941: LD_INT 0
32943: PPUSH
32944: PPUSH
32945: PPUSH
// if not hack in hackTanks or not vehicles then
32946: LD_VAR 0 1
32950: PUSH
32951: LD_EXP 133
32955: IN
32956: NOT
32957: PUSH
32958: LD_VAR 0 2
32962: NOT
32963: OR
32964: IFFALSE 32968
// exit ;
32966: GO 33243
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32968: LD_ADDR_VAR 0 2
32972: PUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: LD_VAR 0 2
32982: PPUSH
32983: LD_INT 1
32985: PPUSH
32986: LD_INT 1
32988: PPUSH
32989: CALL 39006 0 4
32993: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32994: LD_ADDR_VAR 0 5
32998: PUSH
32999: LD_EXP 133
33003: PPUSH
33004: LD_VAR 0 1
33008: PPUSH
33009: CALL 38356 0 2
33013: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33014: LD_EXP 134
33018: PUSH
33019: LD_VAR 0 5
33023: ARRAY
33024: PUSH
33025: LD_EXP 135
33029: LESS
33030: IFFALSE 33219
// begin for i := 1 to vehicles do
33032: LD_ADDR_VAR 0 4
33036: PUSH
33037: DOUBLE
33038: LD_INT 1
33040: DEC
33041: ST_TO_ADDR
33042: LD_VAR 0 2
33046: PUSH
33047: FOR_TO
33048: IFFALSE 33217
// begin if hackTanksCaptured [ index ] = hackLimit then
33050: LD_EXP 134
33054: PUSH
33055: LD_VAR 0 5
33059: ARRAY
33060: PUSH
33061: LD_EXP 135
33065: EQUAL
33066: IFFALSE 33070
// break ;
33068: GO 33217
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33070: LD_ADDR_EXP 137
33074: PUSH
33075: LD_EXP 137
33079: PPUSH
33080: LD_VAR 0 5
33084: PPUSH
33085: LD_EXP 137
33089: PUSH
33090: LD_VAR 0 5
33094: ARRAY
33095: PUSH
33096: LD_INT 1
33098: PLUS
33099: PPUSH
33100: CALL_OW 1
33104: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33105: LD_ADDR_EXP 134
33109: PUSH
33110: LD_EXP 134
33114: PPUSH
33115: LD_VAR 0 5
33119: PUSH
33120: LD_EXP 134
33124: PUSH
33125: LD_VAR 0 5
33129: ARRAY
33130: PUSH
33131: LD_INT 1
33133: PLUS
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PPUSH
33139: LD_VAR 0 2
33143: PUSH
33144: LD_VAR 0 4
33148: ARRAY
33149: PUSH
33150: LD_VAR 0 2
33154: PUSH
33155: LD_VAR 0 4
33159: ARRAY
33160: PPUSH
33161: CALL_OW 255
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PPUSH
33170: CALL 38571 0 3
33174: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33175: LD_VAR 0 2
33179: PUSH
33180: LD_VAR 0 4
33184: ARRAY
33185: PPUSH
33186: LD_VAR 0 1
33190: PPUSH
33191: CALL_OW 255
33195: PPUSH
33196: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33200: LD_VAR 0 2
33204: PUSH
33205: LD_VAR 0 4
33209: ARRAY
33210: PPUSH
33211: CALL_OW 141
// end ;
33215: GO 33047
33217: POP
33218: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33219: LD_VAR 0 1
33223: PPUSH
33224: LD_EXP 134
33228: PUSH
33229: LD_VAR 0 5
33233: ARRAY
33234: PUSH
33235: LD_INT 0
33237: PLUS
33238: PPUSH
33239: CALL_OW 505
// end ;
33243: LD_VAR 0 3
33247: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33248: LD_INT 0
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
// if not hack in hackTanks then
33254: LD_VAR 0 1
33258: PUSH
33259: LD_EXP 133
33263: IN
33264: NOT
33265: IFFALSE 33269
// exit ;
33267: GO 33509
// index := GetElementIndex ( hackTanks , hack ) ;
33269: LD_ADDR_VAR 0 4
33273: PUSH
33274: LD_EXP 133
33278: PPUSH
33279: LD_VAR 0 1
33283: PPUSH
33284: CALL 38356 0 2
33288: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33289: LD_ADDR_VAR 0 3
33293: PUSH
33294: DOUBLE
33295: LD_EXP 134
33299: PUSH
33300: LD_VAR 0 4
33304: ARRAY
33305: INC
33306: ST_TO_ADDR
33307: LD_INT 1
33309: PUSH
33310: FOR_DOWNTO
33311: IFFALSE 33483
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33313: LD_ADDR_VAR 0 5
33317: PUSH
33318: LD_EXP 134
33322: PUSH
33323: LD_VAR 0 4
33327: ARRAY
33328: PUSH
33329: LD_VAR 0 3
33333: ARRAY
33334: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33335: LD_VAR 0 5
33339: PUSH
33340: LD_INT 1
33342: ARRAY
33343: PPUSH
33344: CALL_OW 302
33348: NOT
33349: PUSH
33350: LD_VAR 0 5
33354: PUSH
33355: LD_INT 1
33357: ARRAY
33358: PPUSH
33359: CALL_OW 255
33363: PUSH
33364: LD_VAR 0 1
33368: PPUSH
33369: CALL_OW 255
33373: NONEQUAL
33374: OR
33375: IFFALSE 33481
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33377: LD_VAR 0 5
33381: PUSH
33382: LD_INT 1
33384: ARRAY
33385: PPUSH
33386: CALL_OW 305
33390: PUSH
33391: LD_VAR 0 5
33395: PUSH
33396: LD_INT 1
33398: ARRAY
33399: PPUSH
33400: CALL_OW 255
33404: PUSH
33405: LD_VAR 0 1
33409: PPUSH
33410: CALL_OW 255
33414: EQUAL
33415: AND
33416: IFFALSE 33440
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33418: LD_VAR 0 5
33422: PUSH
33423: LD_INT 1
33425: ARRAY
33426: PPUSH
33427: LD_VAR 0 5
33431: PUSH
33432: LD_INT 2
33434: ARRAY
33435: PPUSH
33436: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33440: LD_ADDR_EXP 134
33444: PUSH
33445: LD_EXP 134
33449: PPUSH
33450: LD_VAR 0 4
33454: PPUSH
33455: LD_EXP 134
33459: PUSH
33460: LD_VAR 0 4
33464: ARRAY
33465: PPUSH
33466: LD_VAR 0 3
33470: PPUSH
33471: CALL_OW 3
33475: PPUSH
33476: CALL_OW 1
33480: ST_TO_ADDR
// end ; end ;
33481: GO 33310
33483: POP
33484: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33485: LD_VAR 0 1
33489: PPUSH
33490: LD_EXP 134
33494: PUSH
33495: LD_VAR 0 4
33499: ARRAY
33500: PUSH
33501: LD_INT 0
33503: PLUS
33504: PPUSH
33505: CALL_OW 505
// end ;
33509: LD_VAR 0 2
33513: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33514: LD_INT 0
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
// if not hack in hackTanks then
33520: LD_VAR 0 1
33524: PUSH
33525: LD_EXP 133
33529: IN
33530: NOT
33531: IFFALSE 33535
// exit ;
33533: GO 33620
// index := GetElementIndex ( hackTanks , hack ) ;
33535: LD_ADDR_VAR 0 5
33539: PUSH
33540: LD_EXP 133
33544: PPUSH
33545: LD_VAR 0 1
33549: PPUSH
33550: CALL 38356 0 2
33554: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33555: LD_ADDR_VAR 0 4
33559: PUSH
33560: DOUBLE
33561: LD_INT 1
33563: DEC
33564: ST_TO_ADDR
33565: LD_EXP 134
33569: PUSH
33570: LD_VAR 0 5
33574: ARRAY
33575: PUSH
33576: FOR_TO
33577: IFFALSE 33618
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33579: LD_EXP 134
33583: PUSH
33584: LD_VAR 0 5
33588: ARRAY
33589: PUSH
33590: LD_VAR 0 4
33594: ARRAY
33595: PUSH
33596: LD_INT 1
33598: ARRAY
33599: PUSH
33600: LD_VAR 0 2
33604: EQUAL
33605: IFFALSE 33616
// KillUnit ( vehicle ) ;
33607: LD_VAR 0 2
33611: PPUSH
33612: CALL_OW 66
33616: GO 33576
33618: POP
33619: POP
// end ; end_of_file
33620: LD_VAR 0 3
33624: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33625: LD_INT 0
33627: PPUSH
33628: PPUSH
// if exist_mode then
33629: LD_VAR 0 2
33633: IFFALSE 33658
// unit := CreateCharacter ( prefix & ident ) else
33635: LD_ADDR_VAR 0 5
33639: PUSH
33640: LD_VAR 0 3
33644: PUSH
33645: LD_VAR 0 1
33649: STR
33650: PPUSH
33651: CALL_OW 34
33655: ST_TO_ADDR
33656: GO 33673
// unit := NewCharacter ( ident ) ;
33658: LD_ADDR_VAR 0 5
33662: PUSH
33663: LD_VAR 0 1
33667: PPUSH
33668: CALL_OW 25
33672: ST_TO_ADDR
// result := unit ;
33673: LD_ADDR_VAR 0 4
33677: PUSH
33678: LD_VAR 0 5
33682: ST_TO_ADDR
// end ;
33683: LD_VAR 0 4
33687: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33688: LD_INT 0
33690: PPUSH
33691: PPUSH
// if not side or not nation then
33692: LD_VAR 0 1
33696: NOT
33697: PUSH
33698: LD_VAR 0 2
33702: NOT
33703: OR
33704: IFFALSE 33708
// exit ;
33706: GO 34472
// case nation of nation_american :
33708: LD_VAR 0 2
33712: PUSH
33713: LD_INT 1
33715: DOUBLE
33716: EQUAL
33717: IFTRUE 33721
33719: GO 33935
33721: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33722: LD_ADDR_VAR 0 4
33726: PUSH
33727: LD_INT 35
33729: PUSH
33730: LD_INT 45
33732: PUSH
33733: LD_INT 46
33735: PUSH
33736: LD_INT 47
33738: PUSH
33739: LD_INT 82
33741: PUSH
33742: LD_INT 83
33744: PUSH
33745: LD_INT 84
33747: PUSH
33748: LD_INT 85
33750: PUSH
33751: LD_INT 86
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 6
33762: PUSH
33763: LD_INT 15
33765: PUSH
33766: LD_INT 16
33768: PUSH
33769: LD_INT 7
33771: PUSH
33772: LD_INT 12
33774: PUSH
33775: LD_INT 13
33777: PUSH
33778: LD_INT 10
33780: PUSH
33781: LD_INT 14
33783: PUSH
33784: LD_INT 20
33786: PUSH
33787: LD_INT 21
33789: PUSH
33790: LD_INT 22
33792: PUSH
33793: LD_INT 25
33795: PUSH
33796: LD_INT 32
33798: PUSH
33799: LD_INT 27
33801: PUSH
33802: LD_INT 36
33804: PUSH
33805: LD_INT 69
33807: PUSH
33808: LD_INT 39
33810: PUSH
33811: LD_INT 34
33813: PUSH
33814: LD_INT 40
33816: PUSH
33817: LD_INT 48
33819: PUSH
33820: LD_INT 49
33822: PUSH
33823: LD_INT 50
33825: PUSH
33826: LD_INT 51
33828: PUSH
33829: LD_INT 52
33831: PUSH
33832: LD_INT 53
33834: PUSH
33835: LD_INT 54
33837: PUSH
33838: LD_INT 55
33840: PUSH
33841: LD_INT 56
33843: PUSH
33844: LD_INT 57
33846: PUSH
33847: LD_INT 58
33849: PUSH
33850: LD_INT 59
33852: PUSH
33853: LD_INT 60
33855: PUSH
33856: LD_INT 61
33858: PUSH
33859: LD_INT 62
33861: PUSH
33862: LD_INT 80
33864: PUSH
33865: LD_INT 82
33867: PUSH
33868: LD_INT 83
33870: PUSH
33871: LD_INT 84
33873: PUSH
33874: LD_INT 85
33876: PUSH
33877: LD_INT 86
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: ST_TO_ADDR
33933: GO 34396
33935: LD_INT 2
33937: DOUBLE
33938: EQUAL
33939: IFTRUE 33943
33941: GO 34165
33943: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
33944: LD_ADDR_VAR 0 4
33948: PUSH
33949: LD_INT 35
33951: PUSH
33952: LD_INT 45
33954: PUSH
33955: LD_INT 46
33957: PUSH
33958: LD_INT 47
33960: PUSH
33961: LD_INT 82
33963: PUSH
33964: LD_INT 83
33966: PUSH
33967: LD_INT 84
33969: PUSH
33970: LD_INT 85
33972: PUSH
33973: LD_INT 87
33975: PUSH
33976: LD_INT 70
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: LD_INT 11
33984: PUSH
33985: LD_INT 3
33987: PUSH
33988: LD_INT 4
33990: PUSH
33991: LD_INT 5
33993: PUSH
33994: LD_INT 6
33996: PUSH
33997: LD_INT 15
33999: PUSH
34000: LD_INT 18
34002: PUSH
34003: LD_INT 7
34005: PUSH
34006: LD_INT 17
34008: PUSH
34009: LD_INT 8
34011: PUSH
34012: LD_INT 20
34014: PUSH
34015: LD_INT 21
34017: PUSH
34018: LD_INT 22
34020: PUSH
34021: LD_INT 72
34023: PUSH
34024: LD_INT 26
34026: PUSH
34027: LD_INT 69
34029: PUSH
34030: LD_INT 39
34032: PUSH
34033: LD_INT 40
34035: PUSH
34036: LD_INT 41
34038: PUSH
34039: LD_INT 42
34041: PUSH
34042: LD_INT 43
34044: PUSH
34045: LD_INT 48
34047: PUSH
34048: LD_INT 49
34050: PUSH
34051: LD_INT 50
34053: PUSH
34054: LD_INT 51
34056: PUSH
34057: LD_INT 52
34059: PUSH
34060: LD_INT 53
34062: PUSH
34063: LD_INT 54
34065: PUSH
34066: LD_INT 55
34068: PUSH
34069: LD_INT 56
34071: PUSH
34072: LD_INT 60
34074: PUSH
34075: LD_INT 61
34077: PUSH
34078: LD_INT 62
34080: PUSH
34081: LD_INT 66
34083: PUSH
34084: LD_INT 67
34086: PUSH
34087: LD_INT 68
34089: PUSH
34090: LD_INT 81
34092: PUSH
34093: LD_INT 82
34095: PUSH
34096: LD_INT 83
34098: PUSH
34099: LD_INT 84
34101: PUSH
34102: LD_INT 85
34104: PUSH
34105: LD_INT 87
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: ST_TO_ADDR
34163: GO 34396
34165: LD_INT 3
34167: DOUBLE
34168: EQUAL
34169: IFTRUE 34173
34171: GO 34395
34173: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34174: LD_ADDR_VAR 0 4
34178: PUSH
34179: LD_INT 46
34181: PUSH
34182: LD_INT 47
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: LD_INT 82
34193: PUSH
34194: LD_INT 83
34196: PUSH
34197: LD_INT 84
34199: PUSH
34200: LD_INT 85
34202: PUSH
34203: LD_INT 86
34205: PUSH
34206: LD_INT 11
34208: PUSH
34209: LD_INT 9
34211: PUSH
34212: LD_INT 20
34214: PUSH
34215: LD_INT 19
34217: PUSH
34218: LD_INT 21
34220: PUSH
34221: LD_INT 24
34223: PUSH
34224: LD_INT 22
34226: PUSH
34227: LD_INT 25
34229: PUSH
34230: LD_INT 28
34232: PUSH
34233: LD_INT 29
34235: PUSH
34236: LD_INT 30
34238: PUSH
34239: LD_INT 31
34241: PUSH
34242: LD_INT 37
34244: PUSH
34245: LD_INT 38
34247: PUSH
34248: LD_INT 32
34250: PUSH
34251: LD_INT 27
34253: PUSH
34254: LD_INT 33
34256: PUSH
34257: LD_INT 69
34259: PUSH
34260: LD_INT 39
34262: PUSH
34263: LD_INT 34
34265: PUSH
34266: LD_INT 40
34268: PUSH
34269: LD_INT 71
34271: PUSH
34272: LD_INT 23
34274: PUSH
34275: LD_INT 44
34277: PUSH
34278: LD_INT 48
34280: PUSH
34281: LD_INT 49
34283: PUSH
34284: LD_INT 50
34286: PUSH
34287: LD_INT 51
34289: PUSH
34290: LD_INT 52
34292: PUSH
34293: LD_INT 53
34295: PUSH
34296: LD_INT 54
34298: PUSH
34299: LD_INT 55
34301: PUSH
34302: LD_INT 56
34304: PUSH
34305: LD_INT 57
34307: PUSH
34308: LD_INT 58
34310: PUSH
34311: LD_INT 59
34313: PUSH
34314: LD_INT 63
34316: PUSH
34317: LD_INT 64
34319: PUSH
34320: LD_INT 65
34322: PUSH
34323: LD_INT 82
34325: PUSH
34326: LD_INT 83
34328: PUSH
34329: LD_INT 84
34331: PUSH
34332: LD_INT 85
34334: PUSH
34335: LD_INT 86
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: ST_TO_ADDR
34393: GO 34396
34395: POP
// if state > - 1 and state < 3 then
34396: LD_VAR 0 3
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: GREATER
34405: PUSH
34406: LD_VAR 0 3
34410: PUSH
34411: LD_INT 3
34413: LESS
34414: AND
34415: IFFALSE 34472
// for i in result do
34417: LD_ADDR_VAR 0 5
34421: PUSH
34422: LD_VAR 0 4
34426: PUSH
34427: FOR_IN
34428: IFFALSE 34470
// if GetTech ( i , side ) <> state then
34430: LD_VAR 0 5
34434: PPUSH
34435: LD_VAR 0 1
34439: PPUSH
34440: CALL_OW 321
34444: PUSH
34445: LD_VAR 0 3
34449: NONEQUAL
34450: IFFALSE 34468
// result := result diff i ;
34452: LD_ADDR_VAR 0 4
34456: PUSH
34457: LD_VAR 0 4
34461: PUSH
34462: LD_VAR 0 5
34466: DIFF
34467: ST_TO_ADDR
34468: GO 34427
34470: POP
34471: POP
// end ;
34472: LD_VAR 0 4
34476: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34477: LD_INT 0
34479: PPUSH
34480: PPUSH
34481: PPUSH
// result := true ;
34482: LD_ADDR_VAR 0 3
34486: PUSH
34487: LD_INT 1
34489: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34490: LD_ADDR_VAR 0 5
34494: PUSH
34495: LD_VAR 0 2
34499: PPUSH
34500: CALL_OW 480
34504: ST_TO_ADDR
// if not tmp then
34505: LD_VAR 0 5
34509: NOT
34510: IFFALSE 34514
// exit ;
34512: GO 34563
// for i in tmp do
34514: LD_ADDR_VAR 0 4
34518: PUSH
34519: LD_VAR 0 5
34523: PUSH
34524: FOR_IN
34525: IFFALSE 34561
// if GetTech ( i , side ) <> state_researched then
34527: LD_VAR 0 4
34531: PPUSH
34532: LD_VAR 0 1
34536: PPUSH
34537: CALL_OW 321
34541: PUSH
34542: LD_INT 2
34544: NONEQUAL
34545: IFFALSE 34559
// begin result := false ;
34547: LD_ADDR_VAR 0 3
34551: PUSH
34552: LD_INT 0
34554: ST_TO_ADDR
// exit ;
34555: POP
34556: POP
34557: GO 34563
// end ;
34559: GO 34524
34561: POP
34562: POP
// end ;
34563: LD_VAR 0 3
34567: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34568: LD_INT 0
34570: PPUSH
34571: PPUSH
34572: PPUSH
34573: PPUSH
34574: PPUSH
34575: PPUSH
34576: PPUSH
34577: PPUSH
34578: PPUSH
34579: PPUSH
34580: PPUSH
34581: PPUSH
34582: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34583: LD_VAR 0 1
34587: NOT
34588: PUSH
34589: LD_VAR 0 1
34593: PPUSH
34594: CALL_OW 257
34598: PUSH
34599: LD_INT 9
34601: NONEQUAL
34602: OR
34603: IFFALSE 34607
// exit ;
34605: GO 35180
// side := GetSide ( unit ) ;
34607: LD_ADDR_VAR 0 9
34611: PUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 255
34621: ST_TO_ADDR
// tech_space := tech_spacanom ;
34622: LD_ADDR_VAR 0 12
34626: PUSH
34627: LD_INT 29
34629: ST_TO_ADDR
// tech_time := tech_taurad ;
34630: LD_ADDR_VAR 0 13
34634: PUSH
34635: LD_INT 28
34637: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34638: LD_ADDR_VAR 0 11
34642: PUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 310
34652: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34653: LD_VAR 0 11
34657: PPUSH
34658: CALL_OW 247
34662: PUSH
34663: LD_INT 2
34665: EQUAL
34666: IFFALSE 34670
// exit ;
34668: GO 35180
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34670: LD_ADDR_VAR 0 8
34674: PUSH
34675: LD_INT 81
34677: PUSH
34678: LD_VAR 0 9
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: LD_INT 21
34692: PUSH
34693: LD_INT 3
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PPUSH
34708: CALL_OW 69
34712: ST_TO_ADDR
// if not tmp then
34713: LD_VAR 0 8
34717: NOT
34718: IFFALSE 34722
// exit ;
34720: GO 35180
// if in_unit then
34722: LD_VAR 0 11
34726: IFFALSE 34750
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34728: LD_ADDR_VAR 0 10
34732: PUSH
34733: LD_VAR 0 8
34737: PPUSH
34738: LD_VAR 0 11
34742: PPUSH
34743: CALL_OW 74
34747: ST_TO_ADDR
34748: GO 34770
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34750: LD_ADDR_VAR 0 10
34754: PUSH
34755: LD_VAR 0 8
34759: PPUSH
34760: LD_VAR 0 1
34764: PPUSH
34765: CALL_OW 74
34769: ST_TO_ADDR
// if not enemy then
34770: LD_VAR 0 10
34774: NOT
34775: IFFALSE 34779
// exit ;
34777: GO 35180
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34779: LD_VAR 0 11
34783: PUSH
34784: LD_VAR 0 11
34788: PPUSH
34789: LD_VAR 0 10
34793: PPUSH
34794: CALL_OW 296
34798: PUSH
34799: LD_INT 13
34801: GREATER
34802: AND
34803: PUSH
34804: LD_VAR 0 1
34808: PPUSH
34809: LD_VAR 0 10
34813: PPUSH
34814: CALL_OW 296
34818: PUSH
34819: LD_INT 12
34821: GREATER
34822: OR
34823: IFFALSE 34827
// exit ;
34825: GO 35180
// missile := [ 1 ] ;
34827: LD_ADDR_VAR 0 14
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34838: LD_VAR 0 9
34842: PPUSH
34843: LD_VAR 0 12
34847: PPUSH
34848: CALL_OW 325
34852: IFFALSE 34881
// missile := Insert ( missile , missile + 1 , 2 ) ;
34854: LD_ADDR_VAR 0 14
34858: PUSH
34859: LD_VAR 0 14
34863: PPUSH
34864: LD_VAR 0 14
34868: PUSH
34869: LD_INT 1
34871: PLUS
34872: PPUSH
34873: LD_INT 2
34875: PPUSH
34876: CALL_OW 2
34880: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34881: LD_VAR 0 9
34885: PPUSH
34886: LD_VAR 0 13
34890: PPUSH
34891: CALL_OW 325
34895: PUSH
34896: LD_VAR 0 10
34900: PPUSH
34901: CALL_OW 255
34905: PPUSH
34906: LD_VAR 0 13
34910: PPUSH
34911: CALL_OW 325
34915: NOT
34916: AND
34917: IFFALSE 34946
// missile := Insert ( missile , missile + 1 , 3 ) ;
34919: LD_ADDR_VAR 0 14
34923: PUSH
34924: LD_VAR 0 14
34928: PPUSH
34929: LD_VAR 0 14
34933: PUSH
34934: LD_INT 1
34936: PLUS
34937: PPUSH
34938: LD_INT 3
34940: PPUSH
34941: CALL_OW 2
34945: ST_TO_ADDR
// if missile < 2 then
34946: LD_VAR 0 14
34950: PUSH
34951: LD_INT 2
34953: LESS
34954: IFFALSE 34958
// exit ;
34956: GO 35180
// x := GetX ( enemy ) ;
34958: LD_ADDR_VAR 0 4
34962: PUSH
34963: LD_VAR 0 10
34967: PPUSH
34968: CALL_OW 250
34972: ST_TO_ADDR
// y := GetY ( enemy ) ;
34973: LD_ADDR_VAR 0 5
34977: PUSH
34978: LD_VAR 0 10
34982: PPUSH
34983: CALL_OW 251
34987: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34988: LD_ADDR_VAR 0 6
34992: PUSH
34993: LD_VAR 0 4
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PPUSH
35002: LD_INT 1
35004: PPUSH
35005: CALL_OW 12
35009: PLUS
35010: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35011: LD_ADDR_VAR 0 7
35015: PUSH
35016: LD_VAR 0 5
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PPUSH
35025: LD_INT 1
35027: PPUSH
35028: CALL_OW 12
35032: PLUS
35033: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35034: LD_VAR 0 6
35038: PPUSH
35039: LD_VAR 0 7
35043: PPUSH
35044: CALL_OW 488
35048: NOT
35049: IFFALSE 35071
// begin _x := x ;
35051: LD_ADDR_VAR 0 6
35055: PUSH
35056: LD_VAR 0 4
35060: ST_TO_ADDR
// _y := y ;
35061: LD_ADDR_VAR 0 7
35065: PUSH
35066: LD_VAR 0 5
35070: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: LD_INT 1
35078: PPUSH
35079: LD_VAR 0 14
35083: PPUSH
35084: CALL_OW 12
35088: ST_TO_ADDR
// case i of 1 :
35089: LD_VAR 0 3
35093: PUSH
35094: LD_INT 1
35096: DOUBLE
35097: EQUAL
35098: IFTRUE 35102
35100: GO 35119
35102: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35103: LD_VAR 0 1
35107: PPUSH
35108: LD_VAR 0 10
35112: PPUSH
35113: CALL_OW 115
35117: GO 35180
35119: LD_INT 2
35121: DOUBLE
35122: EQUAL
35123: IFTRUE 35127
35125: GO 35149
35127: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35128: LD_VAR 0 1
35132: PPUSH
35133: LD_VAR 0 6
35137: PPUSH
35138: LD_VAR 0 7
35142: PPUSH
35143: CALL_OW 153
35147: GO 35180
35149: LD_INT 3
35151: DOUBLE
35152: EQUAL
35153: IFTRUE 35157
35155: GO 35179
35157: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35158: LD_VAR 0 1
35162: PPUSH
35163: LD_VAR 0 6
35167: PPUSH
35168: LD_VAR 0 7
35172: PPUSH
35173: CALL_OW 154
35177: GO 35180
35179: POP
// end ;
35180: LD_VAR 0 2
35184: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35185: LD_INT 0
35187: PPUSH
35188: PPUSH
35189: PPUSH
35190: PPUSH
35191: PPUSH
35192: PPUSH
// if not unit or not building then
35193: LD_VAR 0 1
35197: NOT
35198: PUSH
35199: LD_VAR 0 2
35203: NOT
35204: OR
35205: IFFALSE 35209
// exit ;
35207: GO 35367
// x := GetX ( building ) ;
35209: LD_ADDR_VAR 0 5
35213: PUSH
35214: LD_VAR 0 2
35218: PPUSH
35219: CALL_OW 250
35223: ST_TO_ADDR
// y := GetY ( building ) ;
35224: LD_ADDR_VAR 0 6
35228: PUSH
35229: LD_VAR 0 2
35233: PPUSH
35234: CALL_OW 251
35238: ST_TO_ADDR
// for i = 0 to 5 do
35239: LD_ADDR_VAR 0 4
35243: PUSH
35244: DOUBLE
35245: LD_INT 0
35247: DEC
35248: ST_TO_ADDR
35249: LD_INT 5
35251: PUSH
35252: FOR_TO
35253: IFFALSE 35365
// begin _x := ShiftX ( x , i , 3 ) ;
35255: LD_ADDR_VAR 0 7
35259: PUSH
35260: LD_VAR 0 5
35264: PPUSH
35265: LD_VAR 0 4
35269: PPUSH
35270: LD_INT 3
35272: PPUSH
35273: CALL_OW 272
35277: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35278: LD_ADDR_VAR 0 8
35282: PUSH
35283: LD_VAR 0 6
35287: PPUSH
35288: LD_VAR 0 4
35292: PPUSH
35293: LD_INT 3
35295: PPUSH
35296: CALL_OW 273
35300: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35301: LD_VAR 0 7
35305: PPUSH
35306: LD_VAR 0 8
35310: PPUSH
35311: CALL_OW 488
35315: NOT
35316: IFFALSE 35320
// continue ;
35318: GO 35252
// if HexInfo ( _x , _y ) = 0 then
35320: LD_VAR 0 7
35324: PPUSH
35325: LD_VAR 0 8
35329: PPUSH
35330: CALL_OW 428
35334: PUSH
35335: LD_INT 0
35337: EQUAL
35338: IFFALSE 35363
// begin ComMoveXY ( unit , _x , _y ) ;
35340: LD_VAR 0 1
35344: PPUSH
35345: LD_VAR 0 7
35349: PPUSH
35350: LD_VAR 0 8
35354: PPUSH
35355: CALL_OW 111
// exit ;
35359: POP
35360: POP
35361: GO 35367
// end ; end ;
35363: GO 35252
35365: POP
35366: POP
// end ;
35367: LD_VAR 0 3
35371: RET
// export function ScanBase ( side , base_area ) ; begin
35372: LD_INT 0
35374: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35375: LD_ADDR_VAR 0 3
35379: PUSH
35380: LD_VAR 0 2
35384: PPUSH
35385: LD_INT 81
35387: PUSH
35388: LD_VAR 0 1
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PPUSH
35397: CALL_OW 70
35401: ST_TO_ADDR
// end ;
35402: LD_VAR 0 3
35406: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35407: LD_INT 0
35409: PPUSH
35410: PPUSH
35411: PPUSH
35412: PPUSH
// result := false ;
35413: LD_ADDR_VAR 0 2
35417: PUSH
35418: LD_INT 0
35420: ST_TO_ADDR
// side := GetSide ( unit ) ;
35421: LD_ADDR_VAR 0 3
35425: PUSH
35426: LD_VAR 0 1
35430: PPUSH
35431: CALL_OW 255
35435: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35436: LD_ADDR_VAR 0 4
35440: PUSH
35441: LD_VAR 0 1
35445: PPUSH
35446: CALL_OW 248
35450: ST_TO_ADDR
// case nat of 1 :
35451: LD_VAR 0 4
35455: PUSH
35456: LD_INT 1
35458: DOUBLE
35459: EQUAL
35460: IFTRUE 35464
35462: GO 35475
35464: POP
// tech := tech_lassight ; 2 :
35465: LD_ADDR_VAR 0 5
35469: PUSH
35470: LD_INT 12
35472: ST_TO_ADDR
35473: GO 35514
35475: LD_INT 2
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35483
35481: GO 35494
35483: POP
// tech := tech_mortar ; 3 :
35484: LD_ADDR_VAR 0 5
35488: PUSH
35489: LD_INT 41
35491: ST_TO_ADDR
35492: GO 35514
35494: LD_INT 3
35496: DOUBLE
35497: EQUAL
35498: IFTRUE 35502
35500: GO 35513
35502: POP
// tech := tech_bazooka ; end ;
35503: LD_ADDR_VAR 0 5
35507: PUSH
35508: LD_INT 44
35510: ST_TO_ADDR
35511: GO 35514
35513: POP
// if Researched ( side , tech ) then
35514: LD_VAR 0 3
35518: PPUSH
35519: LD_VAR 0 5
35523: PPUSH
35524: CALL_OW 325
35528: IFFALSE 35555
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35530: LD_ADDR_VAR 0 2
35534: PUSH
35535: LD_INT 5
35537: PUSH
35538: LD_INT 8
35540: PUSH
35541: LD_INT 9
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: PUSH
35549: LD_VAR 0 4
35553: ARRAY
35554: ST_TO_ADDR
// end ;
35555: LD_VAR 0 2
35559: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35560: LD_INT 0
35562: PPUSH
35563: PPUSH
35564: PPUSH
// if not mines then
35565: LD_VAR 0 2
35569: NOT
35570: IFFALSE 35574
// exit ;
35572: GO 35718
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35574: LD_ADDR_VAR 0 5
35578: PUSH
35579: LD_INT 81
35581: PUSH
35582: LD_VAR 0 1
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: LD_INT 21
35596: PUSH
35597: LD_INT 3
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PPUSH
35612: CALL_OW 69
35616: ST_TO_ADDR
// for i in mines do
35617: LD_ADDR_VAR 0 4
35621: PUSH
35622: LD_VAR 0 2
35626: PUSH
35627: FOR_IN
35628: IFFALSE 35716
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35630: LD_VAR 0 4
35634: PUSH
35635: LD_INT 1
35637: ARRAY
35638: PPUSH
35639: LD_VAR 0 4
35643: PUSH
35644: LD_INT 2
35646: ARRAY
35647: PPUSH
35648: CALL_OW 458
35652: NOT
35653: IFFALSE 35657
// continue ;
35655: GO 35627
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35657: LD_VAR 0 4
35661: PUSH
35662: LD_INT 1
35664: ARRAY
35665: PPUSH
35666: LD_VAR 0 4
35670: PUSH
35671: LD_INT 2
35673: ARRAY
35674: PPUSH
35675: CALL_OW 428
35679: PUSH
35680: LD_VAR 0 5
35684: IN
35685: IFFALSE 35714
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35687: LD_VAR 0 4
35691: PUSH
35692: LD_INT 1
35694: ARRAY
35695: PPUSH
35696: LD_VAR 0 4
35700: PUSH
35701: LD_INT 2
35703: ARRAY
35704: PPUSH
35705: LD_VAR 0 1
35709: PPUSH
35710: CALL_OW 456
// end ;
35714: GO 35627
35716: POP
35717: POP
// end ;
35718: LD_VAR 0 3
35722: RET
// export function Count ( array ) ; var i ; begin
35723: LD_INT 0
35725: PPUSH
35726: PPUSH
// result := 0 ;
35727: LD_ADDR_VAR 0 2
35731: PUSH
35732: LD_INT 0
35734: ST_TO_ADDR
// for i in array do
35735: LD_ADDR_VAR 0 3
35739: PUSH
35740: LD_VAR 0 1
35744: PUSH
35745: FOR_IN
35746: IFFALSE 35770
// if i then
35748: LD_VAR 0 3
35752: IFFALSE 35768
// result := result + 1 ;
35754: LD_ADDR_VAR 0 2
35758: PUSH
35759: LD_VAR 0 2
35763: PUSH
35764: LD_INT 1
35766: PLUS
35767: ST_TO_ADDR
35768: GO 35745
35770: POP
35771: POP
// end ;
35772: LD_VAR 0 2
35776: RET
// export function IsEmpty ( building ) ; begin
35777: LD_INT 0
35779: PPUSH
// if not building then
35780: LD_VAR 0 1
35784: NOT
35785: IFFALSE 35789
// exit ;
35787: GO 35832
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35789: LD_ADDR_VAR 0 2
35793: PUSH
35794: LD_VAR 0 1
35798: PUSH
35799: LD_INT 22
35801: PUSH
35802: LD_VAR 0 1
35806: PPUSH
35807: CALL_OW 255
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 58
35818: PUSH
35819: EMPTY
35820: LIST
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PPUSH
35826: CALL_OW 69
35830: IN
35831: ST_TO_ADDR
// end ;
35832: LD_VAR 0 2
35836: RET
// export function IsNotFull ( building ) ; begin
35837: LD_INT 0
35839: PPUSH
// if not building then
35840: LD_VAR 0 1
35844: NOT
35845: IFFALSE 35849
// exit ;
35847: GO 35868
// result := UnitsInside ( building ) < 6 ;
35849: LD_ADDR_VAR 0 2
35853: PUSH
35854: LD_VAR 0 1
35858: PPUSH
35859: CALL_OW 313
35863: PUSH
35864: LD_INT 6
35866: LESS
35867: ST_TO_ADDR
// end ;
35868: LD_VAR 0 2
35872: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35873: LD_INT 0
35875: PPUSH
35876: PPUSH
35877: PPUSH
35878: PPUSH
// tmp := [ ] ;
35879: LD_ADDR_VAR 0 3
35883: PUSH
35884: EMPTY
35885: ST_TO_ADDR
// list := [ ] ;
35886: LD_ADDR_VAR 0 5
35890: PUSH
35891: EMPTY
35892: ST_TO_ADDR
// for i = 16 to 25 do
35893: LD_ADDR_VAR 0 4
35897: PUSH
35898: DOUBLE
35899: LD_INT 16
35901: DEC
35902: ST_TO_ADDR
35903: LD_INT 25
35905: PUSH
35906: FOR_TO
35907: IFFALSE 35980
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35909: LD_ADDR_VAR 0 3
35913: PUSH
35914: LD_VAR 0 3
35918: PUSH
35919: LD_INT 22
35921: PUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: CALL_OW 255
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 91
35938: PUSH
35939: LD_VAR 0 1
35943: PUSH
35944: LD_INT 6
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 30
35954: PUSH
35955: LD_VAR 0 4
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: LIST
35968: PUSH
35969: EMPTY
35970: LIST
35971: PPUSH
35972: CALL_OW 69
35976: ADD
35977: ST_TO_ADDR
35978: GO 35906
35980: POP
35981: POP
// for i = 1 to tmp do
35982: LD_ADDR_VAR 0 4
35986: PUSH
35987: DOUBLE
35988: LD_INT 1
35990: DEC
35991: ST_TO_ADDR
35992: LD_VAR 0 3
35996: PUSH
35997: FOR_TO
35998: IFFALSE 36086
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36000: LD_ADDR_VAR 0 5
36004: PUSH
36005: LD_VAR 0 5
36009: PUSH
36010: LD_VAR 0 3
36014: PUSH
36015: LD_VAR 0 4
36019: ARRAY
36020: PPUSH
36021: CALL_OW 266
36025: PUSH
36026: LD_VAR 0 3
36030: PUSH
36031: LD_VAR 0 4
36035: ARRAY
36036: PPUSH
36037: CALL_OW 250
36041: PUSH
36042: LD_VAR 0 3
36046: PUSH
36047: LD_VAR 0 4
36051: ARRAY
36052: PPUSH
36053: CALL_OW 251
36057: PUSH
36058: LD_VAR 0 3
36062: PUSH
36063: LD_VAR 0 4
36067: ARRAY
36068: PPUSH
36069: CALL_OW 254
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: PUSH
36080: EMPTY
36081: LIST
36082: ADD
36083: ST_TO_ADDR
36084: GO 35997
36086: POP
36087: POP
// result := list ;
36088: LD_ADDR_VAR 0 2
36092: PUSH
36093: LD_VAR 0 5
36097: ST_TO_ADDR
// end ;
36098: LD_VAR 0 2
36102: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36103: LD_INT 0
36105: PPUSH
36106: PPUSH
36107: PPUSH
36108: PPUSH
36109: PPUSH
36110: PPUSH
36111: PPUSH
// if not factory then
36112: LD_VAR 0 1
36116: NOT
36117: IFFALSE 36121
// exit ;
36119: GO 36714
// if control = control_apeman then
36121: LD_VAR 0 4
36125: PUSH
36126: LD_INT 5
36128: EQUAL
36129: IFFALSE 36238
// begin tmp := UnitsInside ( factory ) ;
36131: LD_ADDR_VAR 0 8
36135: PUSH
36136: LD_VAR 0 1
36140: PPUSH
36141: CALL_OW 313
36145: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36146: LD_VAR 0 8
36150: PPUSH
36151: LD_INT 25
36153: PUSH
36154: LD_INT 12
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PPUSH
36161: CALL_OW 72
36165: NOT
36166: IFFALSE 36176
// control := control_manual ;
36168: LD_ADDR_VAR 0 4
36172: PUSH
36173: LD_INT 1
36175: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36176: LD_ADDR_VAR 0 8
36180: PUSH
36181: LD_VAR 0 1
36185: PPUSH
36186: CALL 35873 0 1
36190: ST_TO_ADDR
// if tmp then
36191: LD_VAR 0 8
36195: IFFALSE 36238
// begin for i in tmp do
36197: LD_ADDR_VAR 0 7
36201: PUSH
36202: LD_VAR 0 8
36206: PUSH
36207: FOR_IN
36208: IFFALSE 36236
// if i [ 1 ] = b_ext_radio then
36210: LD_VAR 0 7
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: PUSH
36219: LD_INT 22
36221: EQUAL
36222: IFFALSE 36234
// begin control := control_remote ;
36224: LD_ADDR_VAR 0 4
36228: PUSH
36229: LD_INT 2
36231: ST_TO_ADDR
// break ;
36232: GO 36236
// end ;
36234: GO 36207
36236: POP
36237: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36238: LD_VAR 0 1
36242: PPUSH
36243: LD_VAR 0 2
36247: PPUSH
36248: LD_VAR 0 3
36252: PPUSH
36253: LD_VAR 0 4
36257: PPUSH
36258: LD_VAR 0 5
36262: PPUSH
36263: CALL_OW 448
36267: IFFALSE 36302
// begin result := [ chassis , engine , control , weapon ] ;
36269: LD_ADDR_VAR 0 6
36273: PUSH
36274: LD_VAR 0 2
36278: PUSH
36279: LD_VAR 0 3
36283: PUSH
36284: LD_VAR 0 4
36288: PUSH
36289: LD_VAR 0 5
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// exit ;
36300: GO 36714
// end ; _chassis := AvailableChassisList ( factory ) ;
36302: LD_ADDR_VAR 0 9
36306: PUSH
36307: LD_VAR 0 1
36311: PPUSH
36312: CALL_OW 475
36316: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36317: LD_ADDR_VAR 0 11
36321: PUSH
36322: LD_VAR 0 1
36326: PPUSH
36327: CALL_OW 476
36331: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36332: LD_ADDR_VAR 0 12
36336: PUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL_OW 477
36346: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36347: LD_ADDR_VAR 0 10
36351: PUSH
36352: LD_VAR 0 1
36356: PPUSH
36357: CALL_OW 478
36361: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36362: LD_VAR 0 9
36366: NOT
36367: PUSH
36368: LD_VAR 0 11
36372: NOT
36373: OR
36374: PUSH
36375: LD_VAR 0 12
36379: NOT
36380: OR
36381: PUSH
36382: LD_VAR 0 10
36386: NOT
36387: OR
36388: IFFALSE 36423
// begin result := [ chassis , engine , control , weapon ] ;
36390: LD_ADDR_VAR 0 6
36394: PUSH
36395: LD_VAR 0 2
36399: PUSH
36400: LD_VAR 0 3
36404: PUSH
36405: LD_VAR 0 4
36409: PUSH
36410: LD_VAR 0 5
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: ST_TO_ADDR
// exit ;
36421: GO 36714
// end ; if not chassis in _chassis then
36423: LD_VAR 0 2
36427: PUSH
36428: LD_VAR 0 9
36432: IN
36433: NOT
36434: IFFALSE 36460
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36436: LD_ADDR_VAR 0 2
36440: PUSH
36441: LD_VAR 0 9
36445: PUSH
36446: LD_INT 1
36448: PPUSH
36449: LD_VAR 0 9
36453: PPUSH
36454: CALL_OW 12
36458: ARRAY
36459: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36460: LD_VAR 0 2
36464: PPUSH
36465: LD_VAR 0 3
36469: PPUSH
36470: CALL 36719 0 2
36474: NOT
36475: IFFALSE 36534
// repeat engine := _engine [ 1 ] ;
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_VAR 0 11
36486: PUSH
36487: LD_INT 1
36489: ARRAY
36490: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36491: LD_ADDR_VAR 0 11
36495: PUSH
36496: LD_VAR 0 11
36500: PPUSH
36501: LD_INT 1
36503: PPUSH
36504: CALL_OW 3
36508: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36509: LD_VAR 0 2
36513: PPUSH
36514: LD_VAR 0 3
36518: PPUSH
36519: CALL 36719 0 2
36523: PUSH
36524: LD_VAR 0 11
36528: PUSH
36529: EMPTY
36530: EQUAL
36531: OR
36532: IFFALSE 36477
// if not control in _control then
36534: LD_VAR 0 4
36538: PUSH
36539: LD_VAR 0 12
36543: IN
36544: NOT
36545: IFFALSE 36571
// control := _control [ rand ( 1 , _control ) ] ;
36547: LD_ADDR_VAR 0 4
36551: PUSH
36552: LD_VAR 0 12
36556: PUSH
36557: LD_INT 1
36559: PPUSH
36560: LD_VAR 0 12
36564: PPUSH
36565: CALL_OW 12
36569: ARRAY
36570: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36571: LD_VAR 0 2
36575: PPUSH
36576: LD_VAR 0 5
36580: PPUSH
36581: CALL 36939 0 2
36585: NOT
36586: IFFALSE 36645
// repeat weapon := _weapon [ 1 ] ;
36588: LD_ADDR_VAR 0 5
36592: PUSH
36593: LD_VAR 0 10
36597: PUSH
36598: LD_INT 1
36600: ARRAY
36601: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36602: LD_ADDR_VAR 0 10
36606: PUSH
36607: LD_VAR 0 10
36611: PPUSH
36612: LD_INT 1
36614: PPUSH
36615: CALL_OW 3
36619: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36620: LD_VAR 0 2
36624: PPUSH
36625: LD_VAR 0 5
36629: PPUSH
36630: CALL 36939 0 2
36634: PUSH
36635: LD_VAR 0 10
36639: PUSH
36640: EMPTY
36641: EQUAL
36642: OR
36643: IFFALSE 36588
// result := [ ] ;
36645: LD_ADDR_VAR 0 6
36649: PUSH
36650: EMPTY
36651: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36652: LD_VAR 0 1
36656: PPUSH
36657: LD_VAR 0 2
36661: PPUSH
36662: LD_VAR 0 3
36666: PPUSH
36667: LD_VAR 0 4
36671: PPUSH
36672: LD_VAR 0 5
36676: PPUSH
36677: CALL_OW 448
36681: IFFALSE 36714
// result := [ chassis , engine , control , weapon ] ;
36683: LD_ADDR_VAR 0 6
36687: PUSH
36688: LD_VAR 0 2
36692: PUSH
36693: LD_VAR 0 3
36697: PUSH
36698: LD_VAR 0 4
36702: PUSH
36703: LD_VAR 0 5
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: ST_TO_ADDR
// end ;
36714: LD_VAR 0 6
36718: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36719: LD_INT 0
36721: PPUSH
// if not chassis or not engine then
36722: LD_VAR 0 1
36726: NOT
36727: PUSH
36728: LD_VAR 0 2
36732: NOT
36733: OR
36734: IFFALSE 36738
// exit ;
36736: GO 36934
// case engine of engine_solar :
36738: LD_VAR 0 2
36742: PUSH
36743: LD_INT 2
36745: DOUBLE
36746: EQUAL
36747: IFTRUE 36751
36749: GO 36789
36751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36752: LD_ADDR_VAR 0 3
36756: PUSH
36757: LD_INT 11
36759: PUSH
36760: LD_INT 12
36762: PUSH
36763: LD_INT 13
36765: PUSH
36766: LD_INT 14
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 3
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: ST_TO_ADDR
36787: GO 36918
36789: LD_INT 1
36791: DOUBLE
36792: EQUAL
36793: IFTRUE 36797
36795: GO 36859
36797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36798: LD_ADDR_VAR 0 3
36802: PUSH
36803: LD_INT 11
36805: PUSH
36806: LD_INT 12
36808: PUSH
36809: LD_INT 13
36811: PUSH
36812: LD_INT 14
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: LD_INT 4
36826: PUSH
36827: LD_INT 5
36829: PUSH
36830: LD_INT 21
36832: PUSH
36833: LD_INT 23
36835: PUSH
36836: LD_INT 22
36838: PUSH
36839: LD_INT 24
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
36857: GO 36918
36859: LD_INT 3
36861: DOUBLE
36862: EQUAL
36863: IFTRUE 36867
36865: GO 36917
36867: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: LD_INT 13
36875: PUSH
36876: LD_INT 14
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 3
36884: PUSH
36885: LD_INT 4
36887: PUSH
36888: LD_INT 5
36890: PUSH
36891: LD_INT 21
36893: PUSH
36894: LD_INT 22
36896: PUSH
36897: LD_INT 23
36899: PUSH
36900: LD_INT 24
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: ST_TO_ADDR
36915: GO 36918
36917: POP
// result := ( chassis in result ) ;
36918: LD_ADDR_VAR 0 3
36922: PUSH
36923: LD_VAR 0 1
36927: PUSH
36928: LD_VAR 0 3
36932: IN
36933: ST_TO_ADDR
// end ;
36934: LD_VAR 0 3
36938: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36939: LD_INT 0
36941: PPUSH
// if not chassis or not weapon then
36942: LD_VAR 0 1
36946: NOT
36947: PUSH
36948: LD_VAR 0 2
36952: NOT
36953: OR
36954: IFFALSE 36958
// exit ;
36956: GO 37984
// case weapon of us_machine_gun :
36958: LD_VAR 0 2
36962: PUSH
36963: LD_INT 2
36965: DOUBLE
36966: EQUAL
36967: IFTRUE 36971
36969: GO 37001
36971: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36972: LD_ADDR_VAR 0 3
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 3
36985: PUSH
36986: LD_INT 4
36988: PUSH
36989: LD_INT 5
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: ST_TO_ADDR
36999: GO 37968
37001: LD_INT 3
37003: DOUBLE
37004: EQUAL
37005: IFTRUE 37009
37007: GO 37039
37009: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37010: LD_ADDR_VAR 0 3
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: LD_INT 4
37026: PUSH
37027: LD_INT 5
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: ST_TO_ADDR
37037: GO 37968
37039: LD_INT 11
37041: DOUBLE
37042: EQUAL
37043: IFTRUE 37047
37045: GO 37077
37047: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37048: LD_ADDR_VAR 0 3
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: LD_INT 3
37061: PUSH
37062: LD_INT 4
37064: PUSH
37065: LD_INT 5
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: ST_TO_ADDR
37075: GO 37968
37077: LD_INT 4
37079: DOUBLE
37080: EQUAL
37081: IFTRUE 37085
37083: GO 37111
37085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37086: LD_ADDR_VAR 0 3
37090: PUSH
37091: LD_INT 2
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: LD_INT 4
37099: PUSH
37100: LD_INT 5
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
37109: GO 37968
37111: LD_INT 5
37113: DOUBLE
37114: EQUAL
37115: IFTRUE 37119
37117: GO 37145
37119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37120: LD_ADDR_VAR 0 3
37124: PUSH
37125: LD_INT 2
37127: PUSH
37128: LD_INT 3
37130: PUSH
37131: LD_INT 4
37133: PUSH
37134: LD_INT 5
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
37143: GO 37968
37145: LD_INT 9
37147: DOUBLE
37148: EQUAL
37149: IFTRUE 37153
37151: GO 37179
37153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37154: LD_ADDR_VAR 0 3
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 3
37164: PUSH
37165: LD_INT 4
37167: PUSH
37168: LD_INT 5
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
37177: GO 37968
37179: LD_INT 7
37181: DOUBLE
37182: EQUAL
37183: IFTRUE 37187
37185: GO 37213
37187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37188: LD_ADDR_VAR 0 3
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: LD_INT 4
37201: PUSH
37202: LD_INT 5
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: ST_TO_ADDR
37211: GO 37968
37213: LD_INT 12
37215: DOUBLE
37216: EQUAL
37217: IFTRUE 37221
37219: GO 37247
37221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37222: LD_ADDR_VAR 0 3
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 3
37232: PUSH
37233: LD_INT 4
37235: PUSH
37236: LD_INT 5
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: ST_TO_ADDR
37245: GO 37968
37247: LD_INT 13
37249: DOUBLE
37250: EQUAL
37251: IFTRUE 37255
37253: GO 37281
37255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37256: LD_ADDR_VAR 0 3
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: LD_INT 4
37269: PUSH
37270: LD_INT 5
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
37279: GO 37968
37281: LD_INT 14
37283: DOUBLE
37284: EQUAL
37285: IFTRUE 37289
37287: GO 37307
37289: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37290: LD_ADDR_VAR 0 3
37294: PUSH
37295: LD_INT 4
37297: PUSH
37298: LD_INT 5
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: ST_TO_ADDR
37305: GO 37968
37307: LD_INT 6
37309: DOUBLE
37310: EQUAL
37311: IFTRUE 37315
37313: GO 37333
37315: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37316: LD_ADDR_VAR 0 3
37320: PUSH
37321: LD_INT 4
37323: PUSH
37324: LD_INT 5
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: ST_TO_ADDR
37331: GO 37968
37333: LD_INT 10
37335: DOUBLE
37336: EQUAL
37337: IFTRUE 37341
37339: GO 37359
37341: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37342: LD_ADDR_VAR 0 3
37346: PUSH
37347: LD_INT 4
37349: PUSH
37350: LD_INT 5
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: ST_TO_ADDR
37357: GO 37968
37359: LD_INT 22
37361: DOUBLE
37362: EQUAL
37363: IFTRUE 37367
37365: GO 37393
37367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37368: LD_ADDR_VAR 0 3
37372: PUSH
37373: LD_INT 11
37375: PUSH
37376: LD_INT 12
37378: PUSH
37379: LD_INT 13
37381: PUSH
37382: LD_INT 14
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
37391: GO 37968
37393: LD_INT 23
37395: DOUBLE
37396: EQUAL
37397: IFTRUE 37401
37399: GO 37427
37401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37402: LD_ADDR_VAR 0 3
37406: PUSH
37407: LD_INT 11
37409: PUSH
37410: LD_INT 12
37412: PUSH
37413: LD_INT 13
37415: PUSH
37416: LD_INT 14
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
37425: GO 37968
37427: LD_INT 24
37429: DOUBLE
37430: EQUAL
37431: IFTRUE 37435
37433: GO 37461
37435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37436: LD_ADDR_VAR 0 3
37440: PUSH
37441: LD_INT 11
37443: PUSH
37444: LD_INT 12
37446: PUSH
37447: LD_INT 13
37449: PUSH
37450: LD_INT 14
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
37459: GO 37968
37461: LD_INT 30
37463: DOUBLE
37464: EQUAL
37465: IFTRUE 37469
37467: GO 37495
37469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37470: LD_ADDR_VAR 0 3
37474: PUSH
37475: LD_INT 11
37477: PUSH
37478: LD_INT 12
37480: PUSH
37481: LD_INT 13
37483: PUSH
37484: LD_INT 14
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: ST_TO_ADDR
37493: GO 37968
37495: LD_INT 25
37497: DOUBLE
37498: EQUAL
37499: IFTRUE 37503
37501: GO 37521
37503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37504: LD_ADDR_VAR 0 3
37508: PUSH
37509: LD_INT 13
37511: PUSH
37512: LD_INT 14
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: ST_TO_ADDR
37519: GO 37968
37521: LD_INT 27
37523: DOUBLE
37524: EQUAL
37525: IFTRUE 37529
37527: GO 37547
37529: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37530: LD_ADDR_VAR 0 3
37534: PUSH
37535: LD_INT 13
37537: PUSH
37538: LD_INT 14
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: ST_TO_ADDR
37545: GO 37968
37547: LD_INT 28
37549: DOUBLE
37550: EQUAL
37551: IFTRUE 37555
37553: GO 37573
37555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37556: LD_ADDR_VAR 0 3
37560: PUSH
37561: LD_INT 13
37563: PUSH
37564: LD_INT 14
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: ST_TO_ADDR
37571: GO 37968
37573: LD_INT 29
37575: DOUBLE
37576: EQUAL
37577: IFTRUE 37581
37579: GO 37599
37581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37582: LD_ADDR_VAR 0 3
37586: PUSH
37587: LD_INT 13
37589: PUSH
37590: LD_INT 14
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: ST_TO_ADDR
37597: GO 37968
37599: LD_INT 31
37601: DOUBLE
37602: EQUAL
37603: IFTRUE 37607
37605: GO 37625
37607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37608: LD_ADDR_VAR 0 3
37612: PUSH
37613: LD_INT 13
37615: PUSH
37616: LD_INT 14
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: ST_TO_ADDR
37623: GO 37968
37625: LD_INT 26
37627: DOUBLE
37628: EQUAL
37629: IFTRUE 37633
37631: GO 37651
37633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37634: LD_ADDR_VAR 0 3
37638: PUSH
37639: LD_INT 13
37641: PUSH
37642: LD_INT 14
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: ST_TO_ADDR
37649: GO 37968
37651: LD_INT 42
37653: DOUBLE
37654: EQUAL
37655: IFTRUE 37659
37657: GO 37685
37659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37660: LD_ADDR_VAR 0 3
37664: PUSH
37665: LD_INT 21
37667: PUSH
37668: LD_INT 22
37670: PUSH
37671: LD_INT 23
37673: PUSH
37674: LD_INT 24
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: ST_TO_ADDR
37683: GO 37968
37685: LD_INT 43
37687: DOUBLE
37688: EQUAL
37689: IFTRUE 37693
37691: GO 37719
37693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37694: LD_ADDR_VAR 0 3
37698: PUSH
37699: LD_INT 21
37701: PUSH
37702: LD_INT 22
37704: PUSH
37705: LD_INT 23
37707: PUSH
37708: LD_INT 24
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: ST_TO_ADDR
37717: GO 37968
37719: LD_INT 44
37721: DOUBLE
37722: EQUAL
37723: IFTRUE 37727
37725: GO 37753
37727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37728: LD_ADDR_VAR 0 3
37732: PUSH
37733: LD_INT 21
37735: PUSH
37736: LD_INT 22
37738: PUSH
37739: LD_INT 23
37741: PUSH
37742: LD_INT 24
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: ST_TO_ADDR
37751: GO 37968
37753: LD_INT 45
37755: DOUBLE
37756: EQUAL
37757: IFTRUE 37761
37759: GO 37787
37761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37762: LD_ADDR_VAR 0 3
37766: PUSH
37767: LD_INT 21
37769: PUSH
37770: LD_INT 22
37772: PUSH
37773: LD_INT 23
37775: PUSH
37776: LD_INT 24
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: ST_TO_ADDR
37785: GO 37968
37787: LD_INT 49
37789: DOUBLE
37790: EQUAL
37791: IFTRUE 37795
37793: GO 37821
37795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37796: LD_ADDR_VAR 0 3
37800: PUSH
37801: LD_INT 21
37803: PUSH
37804: LD_INT 22
37806: PUSH
37807: LD_INT 23
37809: PUSH
37810: LD_INT 24
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: ST_TO_ADDR
37819: GO 37968
37821: LD_INT 51
37823: DOUBLE
37824: EQUAL
37825: IFTRUE 37829
37827: GO 37855
37829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37830: LD_ADDR_VAR 0 3
37834: PUSH
37835: LD_INT 21
37837: PUSH
37838: LD_INT 22
37840: PUSH
37841: LD_INT 23
37843: PUSH
37844: LD_INT 24
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: ST_TO_ADDR
37853: GO 37968
37855: LD_INT 52
37857: DOUBLE
37858: EQUAL
37859: IFTRUE 37863
37861: GO 37889
37863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37864: LD_ADDR_VAR 0 3
37868: PUSH
37869: LD_INT 21
37871: PUSH
37872: LD_INT 22
37874: PUSH
37875: LD_INT 23
37877: PUSH
37878: LD_INT 24
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
37887: GO 37968
37889: LD_INT 53
37891: DOUBLE
37892: EQUAL
37893: IFTRUE 37897
37895: GO 37915
37897: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37898: LD_ADDR_VAR 0 3
37902: PUSH
37903: LD_INT 23
37905: PUSH
37906: LD_INT 24
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: ST_TO_ADDR
37913: GO 37968
37915: LD_INT 46
37917: DOUBLE
37918: EQUAL
37919: IFTRUE 37923
37921: GO 37941
37923: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: LD_INT 23
37931: PUSH
37932: LD_INT 24
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: ST_TO_ADDR
37939: GO 37968
37941: LD_INT 47
37943: DOUBLE
37944: EQUAL
37945: IFTRUE 37949
37947: GO 37967
37949: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37950: LD_ADDR_VAR 0 3
37954: PUSH
37955: LD_INT 23
37957: PUSH
37958: LD_INT 24
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: ST_TO_ADDR
37965: GO 37968
37967: POP
// result := ( chassis in result ) ;
37968: LD_ADDR_VAR 0 3
37972: PUSH
37973: LD_VAR 0 1
37977: PUSH
37978: LD_VAR 0 3
37982: IN
37983: ST_TO_ADDR
// end ;
37984: LD_VAR 0 3
37988: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37989: LD_INT 0
37991: PPUSH
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
37996: PPUSH
37997: PPUSH
// result := array ;
37998: LD_ADDR_VAR 0 5
38002: PUSH
38003: LD_VAR 0 1
38007: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38008: LD_VAR 0 1
38012: NOT
38013: PUSH
38014: LD_VAR 0 2
38018: NOT
38019: OR
38020: PUSH
38021: LD_VAR 0 3
38025: NOT
38026: OR
38027: PUSH
38028: LD_VAR 0 2
38032: PUSH
38033: LD_VAR 0 1
38037: GREATER
38038: OR
38039: PUSH
38040: LD_VAR 0 3
38044: PUSH
38045: LD_VAR 0 1
38049: GREATER
38050: OR
38051: IFFALSE 38055
// exit ;
38053: GO 38351
// if direction then
38055: LD_VAR 0 4
38059: IFFALSE 38123
// begin d := 1 ;
38061: LD_ADDR_VAR 0 9
38065: PUSH
38066: LD_INT 1
38068: ST_TO_ADDR
// if i_from > i_to then
38069: LD_VAR 0 2
38073: PUSH
38074: LD_VAR 0 3
38078: GREATER
38079: IFFALSE 38105
// length := ( array - i_from ) + i_to else
38081: LD_ADDR_VAR 0 11
38085: PUSH
38086: LD_VAR 0 1
38090: PUSH
38091: LD_VAR 0 2
38095: MINUS
38096: PUSH
38097: LD_VAR 0 3
38101: PLUS
38102: ST_TO_ADDR
38103: GO 38121
// length := i_to - i_from ;
38105: LD_ADDR_VAR 0 11
38109: PUSH
38110: LD_VAR 0 3
38114: PUSH
38115: LD_VAR 0 2
38119: MINUS
38120: ST_TO_ADDR
// end else
38121: GO 38184
// begin d := - 1 ;
38123: LD_ADDR_VAR 0 9
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: ST_TO_ADDR
// if i_from > i_to then
38132: LD_VAR 0 2
38136: PUSH
38137: LD_VAR 0 3
38141: GREATER
38142: IFFALSE 38162
// length := i_from - i_to else
38144: LD_ADDR_VAR 0 11
38148: PUSH
38149: LD_VAR 0 2
38153: PUSH
38154: LD_VAR 0 3
38158: MINUS
38159: ST_TO_ADDR
38160: GO 38184
// length := ( array - i_to ) + i_from ;
38162: LD_ADDR_VAR 0 11
38166: PUSH
38167: LD_VAR 0 1
38171: PUSH
38172: LD_VAR 0 3
38176: MINUS
38177: PUSH
38178: LD_VAR 0 2
38182: PLUS
38183: ST_TO_ADDR
// end ; if not length then
38184: LD_VAR 0 11
38188: NOT
38189: IFFALSE 38193
// exit ;
38191: GO 38351
// tmp := array ;
38193: LD_ADDR_VAR 0 10
38197: PUSH
38198: LD_VAR 0 1
38202: ST_TO_ADDR
// for i = 1 to length do
38203: LD_ADDR_VAR 0 6
38207: PUSH
38208: DOUBLE
38209: LD_INT 1
38211: DEC
38212: ST_TO_ADDR
38213: LD_VAR 0 11
38217: PUSH
38218: FOR_TO
38219: IFFALSE 38339
// begin for j = 1 to array do
38221: LD_ADDR_VAR 0 7
38225: PUSH
38226: DOUBLE
38227: LD_INT 1
38229: DEC
38230: ST_TO_ADDR
38231: LD_VAR 0 1
38235: PUSH
38236: FOR_TO
38237: IFFALSE 38325
// begin k := j + d ;
38239: LD_ADDR_VAR 0 8
38243: PUSH
38244: LD_VAR 0 7
38248: PUSH
38249: LD_VAR 0 9
38253: PLUS
38254: ST_TO_ADDR
// if k > array then
38255: LD_VAR 0 8
38259: PUSH
38260: LD_VAR 0 1
38264: GREATER
38265: IFFALSE 38275
// k := 1 ;
38267: LD_ADDR_VAR 0 8
38271: PUSH
38272: LD_INT 1
38274: ST_TO_ADDR
// if not k then
38275: LD_VAR 0 8
38279: NOT
38280: IFFALSE 38292
// k := array ;
38282: LD_ADDR_VAR 0 8
38286: PUSH
38287: LD_VAR 0 1
38291: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38292: LD_ADDR_VAR 0 10
38296: PUSH
38297: LD_VAR 0 10
38301: PPUSH
38302: LD_VAR 0 8
38306: PPUSH
38307: LD_VAR 0 1
38311: PUSH
38312: LD_VAR 0 7
38316: ARRAY
38317: PPUSH
38318: CALL_OW 1
38322: ST_TO_ADDR
// end ;
38323: GO 38236
38325: POP
38326: POP
// array := tmp ;
38327: LD_ADDR_VAR 0 1
38331: PUSH
38332: LD_VAR 0 10
38336: ST_TO_ADDR
// end ;
38337: GO 38218
38339: POP
38340: POP
// result := array ;
38341: LD_ADDR_VAR 0 5
38345: PUSH
38346: LD_VAR 0 1
38350: ST_TO_ADDR
// end ;
38351: LD_VAR 0 5
38355: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38356: LD_INT 0
38358: PPUSH
38359: PPUSH
// result := 0 ;
38360: LD_ADDR_VAR 0 3
38364: PUSH
38365: LD_INT 0
38367: ST_TO_ADDR
// if not array or not value in array then
38368: LD_VAR 0 1
38372: NOT
38373: PUSH
38374: LD_VAR 0 2
38378: PUSH
38379: LD_VAR 0 1
38383: IN
38384: NOT
38385: OR
38386: IFFALSE 38390
// exit ;
38388: GO 38444
// for i = 1 to array do
38390: LD_ADDR_VAR 0 4
38394: PUSH
38395: DOUBLE
38396: LD_INT 1
38398: DEC
38399: ST_TO_ADDR
38400: LD_VAR 0 1
38404: PUSH
38405: FOR_TO
38406: IFFALSE 38442
// if value = array [ i ] then
38408: LD_VAR 0 2
38412: PUSH
38413: LD_VAR 0 1
38417: PUSH
38418: LD_VAR 0 4
38422: ARRAY
38423: EQUAL
38424: IFFALSE 38440
// begin result := i ;
38426: LD_ADDR_VAR 0 3
38430: PUSH
38431: LD_VAR 0 4
38435: ST_TO_ADDR
// exit ;
38436: POP
38437: POP
38438: GO 38444
// end ;
38440: GO 38405
38442: POP
38443: POP
// end ;
38444: LD_VAR 0 3
38448: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38449: LD_INT 0
38451: PPUSH
// vc_chassis := chassis ;
38452: LD_ADDR_OWVAR 37
38456: PUSH
38457: LD_VAR 0 1
38461: ST_TO_ADDR
// vc_engine := engine ;
38462: LD_ADDR_OWVAR 39
38466: PUSH
38467: LD_VAR 0 2
38471: ST_TO_ADDR
// vc_control := control ;
38472: LD_ADDR_OWVAR 38
38476: PUSH
38477: LD_VAR 0 3
38481: ST_TO_ADDR
// vc_weapon := weapon ;
38482: LD_ADDR_OWVAR 40
38486: PUSH
38487: LD_VAR 0 4
38491: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38492: LD_ADDR_OWVAR 41
38496: PUSH
38497: LD_VAR 0 5
38501: ST_TO_ADDR
// end ;
38502: LD_VAR 0 6
38506: RET
// export function WantPlant ( unit ) ; var task ; begin
38507: LD_INT 0
38509: PPUSH
38510: PPUSH
// result := false ;
38511: LD_ADDR_VAR 0 2
38515: PUSH
38516: LD_INT 0
38518: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38519: LD_ADDR_VAR 0 3
38523: PUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: CALL_OW 437
38533: ST_TO_ADDR
// if task then
38534: LD_VAR 0 3
38538: IFFALSE 38566
// if task [ 1 ] [ 1 ] = p then
38540: LD_VAR 0 3
38544: PUSH
38545: LD_INT 1
38547: ARRAY
38548: PUSH
38549: LD_INT 1
38551: ARRAY
38552: PUSH
38553: LD_STRING p
38555: EQUAL
38556: IFFALSE 38566
// result := true ;
38558: LD_ADDR_VAR 0 2
38562: PUSH
38563: LD_INT 1
38565: ST_TO_ADDR
// end ;
38566: LD_VAR 0 2
38570: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38571: LD_INT 0
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
// if pos < 1 then
38577: LD_VAR 0 2
38581: PUSH
38582: LD_INT 1
38584: LESS
38585: IFFALSE 38589
// exit ;
38587: GO 38892
// if pos = 1 then
38589: LD_VAR 0 2
38593: PUSH
38594: LD_INT 1
38596: EQUAL
38597: IFFALSE 38630
// result := Replace ( arr , pos [ 1 ] , value ) else
38599: LD_ADDR_VAR 0 4
38603: PUSH
38604: LD_VAR 0 1
38608: PPUSH
38609: LD_VAR 0 2
38613: PUSH
38614: LD_INT 1
38616: ARRAY
38617: PPUSH
38618: LD_VAR 0 3
38622: PPUSH
38623: CALL_OW 1
38627: ST_TO_ADDR
38628: GO 38892
// begin tmp := arr ;
38630: LD_ADDR_VAR 0 6
38634: PUSH
38635: LD_VAR 0 1
38639: ST_TO_ADDR
// s_arr := [ tmp ] ;
38640: LD_ADDR_VAR 0 7
38644: PUSH
38645: LD_VAR 0 6
38649: PUSH
38650: EMPTY
38651: LIST
38652: ST_TO_ADDR
// for i = 1 to pos - 1 do
38653: LD_ADDR_VAR 0 5
38657: PUSH
38658: DOUBLE
38659: LD_INT 1
38661: DEC
38662: ST_TO_ADDR
38663: LD_VAR 0 2
38667: PUSH
38668: LD_INT 1
38670: MINUS
38671: PUSH
38672: FOR_TO
38673: IFFALSE 38718
// begin tmp := tmp [ pos [ i ] ] ;
38675: LD_ADDR_VAR 0 6
38679: PUSH
38680: LD_VAR 0 6
38684: PUSH
38685: LD_VAR 0 2
38689: PUSH
38690: LD_VAR 0 5
38694: ARRAY
38695: ARRAY
38696: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38697: LD_ADDR_VAR 0 7
38701: PUSH
38702: LD_VAR 0 7
38706: PUSH
38707: LD_VAR 0 6
38711: PUSH
38712: EMPTY
38713: LIST
38714: ADD
38715: ST_TO_ADDR
// end ;
38716: GO 38672
38718: POP
38719: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38720: LD_ADDR_VAR 0 6
38724: PUSH
38725: LD_VAR 0 6
38729: PPUSH
38730: LD_VAR 0 2
38734: PUSH
38735: LD_VAR 0 2
38739: ARRAY
38740: PPUSH
38741: LD_VAR 0 3
38745: PPUSH
38746: CALL_OW 1
38750: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38751: LD_ADDR_VAR 0 7
38755: PUSH
38756: LD_VAR 0 7
38760: PPUSH
38761: LD_VAR 0 7
38765: PPUSH
38766: LD_VAR 0 6
38770: PPUSH
38771: CALL_OW 1
38775: ST_TO_ADDR
// for i = s_arr downto 2 do
38776: LD_ADDR_VAR 0 5
38780: PUSH
38781: DOUBLE
38782: LD_VAR 0 7
38786: INC
38787: ST_TO_ADDR
38788: LD_INT 2
38790: PUSH
38791: FOR_DOWNTO
38792: IFFALSE 38876
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38794: LD_ADDR_VAR 0 6
38798: PUSH
38799: LD_VAR 0 7
38803: PUSH
38804: LD_VAR 0 5
38808: PUSH
38809: LD_INT 1
38811: MINUS
38812: ARRAY
38813: PPUSH
38814: LD_VAR 0 2
38818: PUSH
38819: LD_VAR 0 5
38823: PUSH
38824: LD_INT 1
38826: MINUS
38827: ARRAY
38828: PPUSH
38829: LD_VAR 0 7
38833: PUSH
38834: LD_VAR 0 5
38838: ARRAY
38839: PPUSH
38840: CALL_OW 1
38844: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38845: LD_ADDR_VAR 0 7
38849: PUSH
38850: LD_VAR 0 7
38854: PPUSH
38855: LD_VAR 0 5
38859: PUSH
38860: LD_INT 1
38862: MINUS
38863: PPUSH
38864: LD_VAR 0 6
38868: PPUSH
38869: CALL_OW 1
38873: ST_TO_ADDR
// end ;
38874: GO 38791
38876: POP
38877: POP
// result := s_arr [ 1 ] ;
38878: LD_ADDR_VAR 0 4
38882: PUSH
38883: LD_VAR 0 7
38887: PUSH
38888: LD_INT 1
38890: ARRAY
38891: ST_TO_ADDR
// end ; end ;
38892: LD_VAR 0 4
38896: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38897: LD_INT 0
38899: PPUSH
38900: PPUSH
// if not list then
38901: LD_VAR 0 1
38905: NOT
38906: IFFALSE 38910
// exit ;
38908: GO 39001
// i := list [ pos1 ] ;
38910: LD_ADDR_VAR 0 5
38914: PUSH
38915: LD_VAR 0 1
38919: PUSH
38920: LD_VAR 0 2
38924: ARRAY
38925: ST_TO_ADDR
// if not i then
38926: LD_VAR 0 5
38930: NOT
38931: IFFALSE 38935
// exit ;
38933: GO 39001
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38935: LD_ADDR_VAR 0 1
38939: PUSH
38940: LD_VAR 0 1
38944: PPUSH
38945: LD_VAR 0 2
38949: PPUSH
38950: LD_VAR 0 1
38954: PUSH
38955: LD_VAR 0 3
38959: ARRAY
38960: PPUSH
38961: CALL_OW 1
38965: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38966: LD_ADDR_VAR 0 1
38970: PUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: LD_VAR 0 3
38980: PPUSH
38981: LD_VAR 0 5
38985: PPUSH
38986: CALL_OW 1
38990: ST_TO_ADDR
// result := list ;
38991: LD_ADDR_VAR 0 4
38995: PUSH
38996: LD_VAR 0 1
39000: ST_TO_ADDR
// end ;
39001: LD_VAR 0 4
39005: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39006: LD_INT 0
39008: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39009: LD_ADDR_VAR 0 5
39013: PUSH
39014: LD_VAR 0 1
39018: PPUSH
39019: CALL_OW 250
39023: PPUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL_OW 251
39033: PPUSH
39034: LD_VAR 0 2
39038: PPUSH
39039: LD_VAR 0 3
39043: PPUSH
39044: LD_VAR 0 4
39048: PPUSH
39049: CALL 39059 0 5
39053: ST_TO_ADDR
// end ;
39054: LD_VAR 0 5
39058: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39059: LD_INT 0
39061: PPUSH
39062: PPUSH
39063: PPUSH
39064: PPUSH
// if not list then
39065: LD_VAR 0 3
39069: NOT
39070: IFFALSE 39074
// exit ;
39072: GO 39462
// result := [ ] ;
39074: LD_ADDR_VAR 0 6
39078: PUSH
39079: EMPTY
39080: ST_TO_ADDR
// for i in list do
39081: LD_ADDR_VAR 0 7
39085: PUSH
39086: LD_VAR 0 3
39090: PUSH
39091: FOR_IN
39092: IFFALSE 39294
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39094: LD_ADDR_VAR 0 9
39098: PUSH
39099: LD_VAR 0 7
39103: PPUSH
39104: LD_VAR 0 1
39108: PPUSH
39109: LD_VAR 0 2
39113: PPUSH
39114: CALL_OW 297
39118: ST_TO_ADDR
// if not result then
39119: LD_VAR 0 6
39123: NOT
39124: IFFALSE 39150
// result := [ [ i , tmp ] ] else
39126: LD_ADDR_VAR 0 6
39130: PUSH
39131: LD_VAR 0 7
39135: PUSH
39136: LD_VAR 0 9
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: ST_TO_ADDR
39148: GO 39292
// begin if result [ result ] [ 2 ] < tmp then
39150: LD_VAR 0 6
39154: PUSH
39155: LD_VAR 0 6
39159: ARRAY
39160: PUSH
39161: LD_INT 2
39163: ARRAY
39164: PUSH
39165: LD_VAR 0 9
39169: LESS
39170: IFFALSE 39212
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39172: LD_ADDR_VAR 0 6
39176: PUSH
39177: LD_VAR 0 6
39181: PPUSH
39182: LD_VAR 0 6
39186: PUSH
39187: LD_INT 1
39189: PLUS
39190: PPUSH
39191: LD_VAR 0 7
39195: PUSH
39196: LD_VAR 0 9
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PPUSH
39205: CALL_OW 2
39209: ST_TO_ADDR
39210: GO 39292
// for j = 1 to result do
39212: LD_ADDR_VAR 0 8
39216: PUSH
39217: DOUBLE
39218: LD_INT 1
39220: DEC
39221: ST_TO_ADDR
39222: LD_VAR 0 6
39226: PUSH
39227: FOR_TO
39228: IFFALSE 39290
// begin if tmp < result [ j ] [ 2 ] then
39230: LD_VAR 0 9
39234: PUSH
39235: LD_VAR 0 6
39239: PUSH
39240: LD_VAR 0 8
39244: ARRAY
39245: PUSH
39246: LD_INT 2
39248: ARRAY
39249: LESS
39250: IFFALSE 39288
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39252: LD_ADDR_VAR 0 6
39256: PUSH
39257: LD_VAR 0 6
39261: PPUSH
39262: LD_VAR 0 8
39266: PPUSH
39267: LD_VAR 0 7
39271: PUSH
39272: LD_VAR 0 9
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PPUSH
39281: CALL_OW 2
39285: ST_TO_ADDR
// break ;
39286: GO 39290
// end ; end ;
39288: GO 39227
39290: POP
39291: POP
// end ; end ;
39292: GO 39091
39294: POP
39295: POP
// if result and not asc then
39296: LD_VAR 0 6
39300: PUSH
39301: LD_VAR 0 4
39305: NOT
39306: AND
39307: IFFALSE 39382
// begin tmp := result ;
39309: LD_ADDR_VAR 0 9
39313: PUSH
39314: LD_VAR 0 6
39318: ST_TO_ADDR
// for i = tmp downto 1 do
39319: LD_ADDR_VAR 0 7
39323: PUSH
39324: DOUBLE
39325: LD_VAR 0 9
39329: INC
39330: ST_TO_ADDR
39331: LD_INT 1
39333: PUSH
39334: FOR_DOWNTO
39335: IFFALSE 39380
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39337: LD_ADDR_VAR 0 6
39341: PUSH
39342: LD_VAR 0 6
39346: PPUSH
39347: LD_VAR 0 9
39351: PUSH
39352: LD_VAR 0 7
39356: MINUS
39357: PUSH
39358: LD_INT 1
39360: PLUS
39361: PPUSH
39362: LD_VAR 0 9
39366: PUSH
39367: LD_VAR 0 7
39371: ARRAY
39372: PPUSH
39373: CALL_OW 1
39377: ST_TO_ADDR
39378: GO 39334
39380: POP
39381: POP
// end ; tmp := [ ] ;
39382: LD_ADDR_VAR 0 9
39386: PUSH
39387: EMPTY
39388: ST_TO_ADDR
// if mode then
39389: LD_VAR 0 5
39393: IFFALSE 39462
// begin for i = 1 to result do
39395: LD_ADDR_VAR 0 7
39399: PUSH
39400: DOUBLE
39401: LD_INT 1
39403: DEC
39404: ST_TO_ADDR
39405: LD_VAR 0 6
39409: PUSH
39410: FOR_TO
39411: IFFALSE 39450
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39413: LD_ADDR_VAR 0 9
39417: PUSH
39418: LD_VAR 0 9
39422: PPUSH
39423: LD_VAR 0 7
39427: PPUSH
39428: LD_VAR 0 6
39432: PUSH
39433: LD_VAR 0 7
39437: ARRAY
39438: PUSH
39439: LD_INT 1
39441: ARRAY
39442: PPUSH
39443: CALL_OW 1
39447: ST_TO_ADDR
39448: GO 39410
39450: POP
39451: POP
// result := tmp ;
39452: LD_ADDR_VAR 0 6
39456: PUSH
39457: LD_VAR 0 9
39461: ST_TO_ADDR
// end ; end ;
39462: LD_VAR 0 6
39466: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39467: LD_INT 0
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39475: LD_ADDR_VAR 0 5
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: ST_TO_ADDR
// if not x or not y then
39497: LD_VAR 0 2
39501: NOT
39502: PUSH
39503: LD_VAR 0 3
39507: NOT
39508: OR
39509: IFFALSE 39513
// exit ;
39511: GO 41159
// if not range then
39513: LD_VAR 0 4
39517: NOT
39518: IFFALSE 39528
// range := 10 ;
39520: LD_ADDR_VAR 0 4
39524: PUSH
39525: LD_INT 10
39527: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39528: LD_ADDR_VAR 0 8
39532: PUSH
39533: LD_INT 81
39535: PUSH
39536: LD_VAR 0 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 92
39547: PUSH
39548: LD_VAR 0 2
39552: PUSH
39553: LD_VAR 0 3
39557: PUSH
39558: LD_VAR 0 4
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: LD_INT 21
39574: PUSH
39575: LD_INT 3
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: PPUSH
39591: CALL_OW 69
39595: ST_TO_ADDR
// if not tmp then
39596: LD_VAR 0 8
39600: NOT
39601: IFFALSE 39605
// exit ;
39603: GO 41159
// for i in tmp do
39605: LD_ADDR_VAR 0 6
39609: PUSH
39610: LD_VAR 0 8
39614: PUSH
39615: FOR_IN
39616: IFFALSE 41134
// begin points := [ 0 , 0 , 0 ] ;
39618: LD_ADDR_VAR 0 9
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: ST_TO_ADDR
// bpoints := 1 ;
39637: LD_ADDR_VAR 0 10
39641: PUSH
39642: LD_INT 1
39644: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39645: LD_VAR 0 6
39649: PPUSH
39650: CALL_OW 247
39654: PUSH
39655: LD_INT 1
39657: DOUBLE
39658: EQUAL
39659: IFTRUE 39663
39661: GO 40241
39663: POP
// begin if GetClass ( i ) = 1 then
39664: LD_VAR 0 6
39668: PPUSH
39669: CALL_OW 257
39673: PUSH
39674: LD_INT 1
39676: EQUAL
39677: IFFALSE 39698
// points := [ 10 , 5 , 3 ] ;
39679: LD_ADDR_VAR 0 9
39683: PUSH
39684: LD_INT 10
39686: PUSH
39687: LD_INT 5
39689: PUSH
39690: LD_INT 3
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39698: LD_VAR 0 6
39702: PPUSH
39703: CALL_OW 257
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: LD_INT 3
39713: PUSH
39714: LD_INT 4
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: IN
39722: IFFALSE 39743
// points := [ 3 , 2 , 1 ] ;
39724: LD_ADDR_VAR 0 9
39728: PUSH
39729: LD_INT 3
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39743: LD_VAR 0 6
39747: PPUSH
39748: CALL_OW 257
39752: PUSH
39753: LD_INT 5
39755: EQUAL
39756: IFFALSE 39777
// points := [ 130 , 5 , 2 ] ;
39758: LD_ADDR_VAR 0 9
39762: PUSH
39763: LD_INT 130
39765: PUSH
39766: LD_INT 5
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39777: LD_VAR 0 6
39781: PPUSH
39782: CALL_OW 257
39786: PUSH
39787: LD_INT 8
39789: EQUAL
39790: IFFALSE 39811
// points := [ 35 , 35 , 30 ] ;
39792: LD_ADDR_VAR 0 9
39796: PUSH
39797: LD_INT 35
39799: PUSH
39800: LD_INT 35
39802: PUSH
39803: LD_INT 30
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39811: LD_VAR 0 6
39815: PPUSH
39816: CALL_OW 257
39820: PUSH
39821: LD_INT 9
39823: EQUAL
39824: IFFALSE 39845
// points := [ 20 , 55 , 40 ] ;
39826: LD_ADDR_VAR 0 9
39830: PUSH
39831: LD_INT 20
39833: PUSH
39834: LD_INT 55
39836: PUSH
39837: LD_INT 40
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39845: LD_VAR 0 6
39849: PPUSH
39850: CALL_OW 257
39854: PUSH
39855: LD_INT 12
39857: PUSH
39858: LD_INT 16
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: IN
39865: IFFALSE 39886
// points := [ 5 , 3 , 2 ] ;
39867: LD_ADDR_VAR 0 9
39871: PUSH
39872: LD_INT 5
39874: PUSH
39875: LD_INT 3
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39886: LD_VAR 0 6
39890: PPUSH
39891: CALL_OW 257
39895: PUSH
39896: LD_INT 17
39898: EQUAL
39899: IFFALSE 39920
// points := [ 100 , 50 , 75 ] ;
39901: LD_ADDR_VAR 0 9
39905: PUSH
39906: LD_INT 100
39908: PUSH
39909: LD_INT 50
39911: PUSH
39912: LD_INT 75
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39920: LD_VAR 0 6
39924: PPUSH
39925: CALL_OW 257
39929: PUSH
39930: LD_INT 15
39932: EQUAL
39933: IFFALSE 39954
// points := [ 10 , 5 , 3 ] ;
39935: LD_ADDR_VAR 0 9
39939: PUSH
39940: LD_INT 10
39942: PUSH
39943: LD_INT 5
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39954: LD_VAR 0 6
39958: PPUSH
39959: CALL_OW 257
39963: PUSH
39964: LD_INT 14
39966: EQUAL
39967: IFFALSE 39988
// points := [ 10 , 0 , 0 ] ;
39969: LD_ADDR_VAR 0 9
39973: PUSH
39974: LD_INT 10
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: LIST
39987: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39988: LD_VAR 0 6
39992: PPUSH
39993: CALL_OW 257
39997: PUSH
39998: LD_INT 11
40000: EQUAL
40001: IFFALSE 40022
// points := [ 30 , 10 , 5 ] ;
40003: LD_ADDR_VAR 0 9
40007: PUSH
40008: LD_INT 30
40010: PUSH
40011: LD_INT 10
40013: PUSH
40014: LD_INT 5
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: LIST
40021: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40022: LD_VAR 0 1
40026: PPUSH
40027: LD_INT 5
40029: PPUSH
40030: CALL_OW 321
40034: PUSH
40035: LD_INT 2
40037: EQUAL
40038: IFFALSE 40055
// bpoints := bpoints * 1.8 ;
40040: LD_ADDR_VAR 0 10
40044: PUSH
40045: LD_VAR 0 10
40049: PUSH
40050: LD_REAL  1.80000000000000E+0000
40053: MUL
40054: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40055: LD_VAR 0 6
40059: PPUSH
40060: CALL_OW 257
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: LD_INT 4
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: IN
40083: PUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: LD_INT 51
40091: PPUSH
40092: CALL_OW 321
40096: PUSH
40097: LD_INT 2
40099: EQUAL
40100: AND
40101: IFFALSE 40118
// bpoints := bpoints * 1.2 ;
40103: LD_ADDR_VAR 0 10
40107: PUSH
40108: LD_VAR 0 10
40112: PUSH
40113: LD_REAL  1.20000000000000E+0000
40116: MUL
40117: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40118: LD_VAR 0 6
40122: PPUSH
40123: CALL_OW 257
40127: PUSH
40128: LD_INT 5
40130: PUSH
40131: LD_INT 7
40133: PUSH
40134: LD_INT 9
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: IN
40142: PUSH
40143: LD_VAR 0 1
40147: PPUSH
40148: LD_INT 52
40150: PPUSH
40151: CALL_OW 321
40155: PUSH
40156: LD_INT 2
40158: EQUAL
40159: AND
40160: IFFALSE 40177
// bpoints := bpoints * 1.5 ;
40162: LD_ADDR_VAR 0 10
40166: PUSH
40167: LD_VAR 0 10
40171: PUSH
40172: LD_REAL  1.50000000000000E+0000
40175: MUL
40176: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40177: LD_VAR 0 1
40181: PPUSH
40182: LD_INT 66
40184: PPUSH
40185: CALL_OW 321
40189: PUSH
40190: LD_INT 2
40192: EQUAL
40193: IFFALSE 40210
// bpoints := bpoints * 1.1 ;
40195: LD_ADDR_VAR 0 10
40199: PUSH
40200: LD_VAR 0 10
40204: PUSH
40205: LD_REAL  1.10000000000000E+0000
40208: MUL
40209: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40210: LD_ADDR_VAR 0 10
40214: PUSH
40215: LD_VAR 0 10
40219: PUSH
40220: LD_VAR 0 6
40224: PPUSH
40225: LD_INT 1
40227: PPUSH
40228: CALL_OW 259
40232: PUSH
40233: LD_REAL  1.15000000000000E+0000
40236: MUL
40237: MUL
40238: ST_TO_ADDR
// end ; unit_vehicle :
40239: GO 41063
40241: LD_INT 2
40243: DOUBLE
40244: EQUAL
40245: IFTRUE 40249
40247: GO 41051
40249: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40250: LD_VAR 0 6
40254: PPUSH
40255: CALL_OW 264
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: LD_INT 42
40265: PUSH
40266: LD_INT 24
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: IN
40274: IFFALSE 40295
// points := [ 25 , 5 , 3 ] ;
40276: LD_ADDR_VAR 0 9
40280: PUSH
40281: LD_INT 25
40283: PUSH
40284: LD_INT 5
40286: PUSH
40287: LD_INT 3
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40295: LD_VAR 0 6
40299: PPUSH
40300: CALL_OW 264
40304: PUSH
40305: LD_INT 4
40307: PUSH
40308: LD_INT 43
40310: PUSH
40311: LD_INT 25
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: LIST
40318: IN
40319: IFFALSE 40340
// points := [ 40 , 15 , 5 ] ;
40321: LD_ADDR_VAR 0 9
40325: PUSH
40326: LD_INT 40
40328: PUSH
40329: LD_INT 15
40331: PUSH
40332: LD_INT 5
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40340: LD_VAR 0 6
40344: PPUSH
40345: CALL_OW 264
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: LD_INT 23
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: IN
40360: IFFALSE 40381
// points := [ 7 , 25 , 8 ] ;
40362: LD_ADDR_VAR 0 9
40366: PUSH
40367: LD_INT 7
40369: PUSH
40370: LD_INT 25
40372: PUSH
40373: LD_INT 8
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: LIST
40380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40381: LD_VAR 0 6
40385: PPUSH
40386: CALL_OW 264
40390: PUSH
40391: LD_INT 5
40393: PUSH
40394: LD_INT 27
40396: PUSH
40397: LD_INT 44
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: IN
40405: IFFALSE 40426
// points := [ 14 , 50 , 16 ] ;
40407: LD_ADDR_VAR 0 9
40411: PUSH
40412: LD_INT 14
40414: PUSH
40415: LD_INT 50
40417: PUSH
40418: LD_INT 16
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: LIST
40425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40426: LD_VAR 0 6
40430: PPUSH
40431: CALL_OW 264
40435: PUSH
40436: LD_INT 6
40438: PUSH
40439: LD_INT 46
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: IN
40446: IFFALSE 40467
// points := [ 32 , 120 , 70 ] ;
40448: LD_ADDR_VAR 0 9
40452: PUSH
40453: LD_INT 32
40455: PUSH
40456: LD_INT 120
40458: PUSH
40459: LD_INT 70
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
40467: LD_VAR 0 6
40471: PPUSH
40472: CALL_OW 264
40476: PUSH
40477: LD_INT 7
40479: PUSH
40480: LD_INT 28
40482: PUSH
40483: LD_INT 45
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: IN
40491: IFFALSE 40512
// points := [ 35 , 20 , 45 ] ;
40493: LD_ADDR_VAR 0 9
40497: PUSH
40498: LD_INT 35
40500: PUSH
40501: LD_INT 20
40503: PUSH
40504: LD_INT 45
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40512: LD_VAR 0 6
40516: PPUSH
40517: CALL_OW 264
40521: PUSH
40522: LD_INT 47
40524: PUSH
40525: EMPTY
40526: LIST
40527: IN
40528: IFFALSE 40549
// points := [ 67 , 45 , 75 ] ;
40530: LD_ADDR_VAR 0 9
40534: PUSH
40535: LD_INT 67
40537: PUSH
40538: LD_INT 45
40540: PUSH
40541: LD_INT 75
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40549: LD_VAR 0 6
40553: PPUSH
40554: CALL_OW 264
40558: PUSH
40559: LD_INT 26
40561: PUSH
40562: EMPTY
40563: LIST
40564: IN
40565: IFFALSE 40586
// points := [ 120 , 30 , 80 ] ;
40567: LD_ADDR_VAR 0 9
40571: PUSH
40572: LD_INT 120
40574: PUSH
40575: LD_INT 30
40577: PUSH
40578: LD_INT 80
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40586: LD_VAR 0 6
40590: PPUSH
40591: CALL_OW 264
40595: PUSH
40596: LD_INT 22
40598: PUSH
40599: EMPTY
40600: LIST
40601: IN
40602: IFFALSE 40623
// points := [ 40 , 1 , 1 ] ;
40604: LD_ADDR_VAR 0 9
40608: PUSH
40609: LD_INT 40
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40623: LD_VAR 0 6
40627: PPUSH
40628: CALL_OW 264
40632: PUSH
40633: LD_INT 29
40635: PUSH
40636: EMPTY
40637: LIST
40638: IN
40639: IFFALSE 40660
// points := [ 70 , 200 , 400 ] ;
40641: LD_ADDR_VAR 0 9
40645: PUSH
40646: LD_INT 70
40648: PUSH
40649: LD_INT 200
40651: PUSH
40652: LD_INT 400
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: LIST
40659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40660: LD_VAR 0 6
40664: PPUSH
40665: CALL_OW 264
40669: PUSH
40670: LD_INT 14
40672: PUSH
40673: LD_INT 53
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: IN
40680: IFFALSE 40701
// points := [ 40 , 10 , 20 ] ;
40682: LD_ADDR_VAR 0 9
40686: PUSH
40687: LD_INT 40
40689: PUSH
40690: LD_INT 10
40692: PUSH
40693: LD_INT 20
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40701: LD_VAR 0 6
40705: PPUSH
40706: CALL_OW 264
40710: PUSH
40711: LD_INT 9
40713: PUSH
40714: EMPTY
40715: LIST
40716: IN
40717: IFFALSE 40738
// points := [ 5 , 70 , 20 ] ;
40719: LD_ADDR_VAR 0 9
40723: PUSH
40724: LD_INT 5
40726: PUSH
40727: LD_INT 70
40729: PUSH
40730: LD_INT 20
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: LIST
40737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40738: LD_VAR 0 6
40742: PPUSH
40743: CALL_OW 264
40747: PUSH
40748: LD_INT 10
40750: PUSH
40751: EMPTY
40752: LIST
40753: IN
40754: IFFALSE 40775
// points := [ 35 , 110 , 70 ] ;
40756: LD_ADDR_VAR 0 9
40760: PUSH
40761: LD_INT 35
40763: PUSH
40764: LD_INT 110
40766: PUSH
40767: LD_INT 70
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: LIST
40774: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40775: LD_VAR 0 6
40779: PPUSH
40780: CALL_OW 265
40784: PUSH
40785: LD_INT 25
40787: EQUAL
40788: IFFALSE 40809
// points := [ 80 , 65 , 100 ] ;
40790: LD_ADDR_VAR 0 9
40794: PUSH
40795: LD_INT 80
40797: PUSH
40798: LD_INT 65
40800: PUSH
40801: LD_INT 100
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40809: LD_VAR 0 6
40813: PPUSH
40814: CALL_OW 263
40818: PUSH
40819: LD_INT 1
40821: EQUAL
40822: IFFALSE 40857
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40824: LD_ADDR_VAR 0 10
40828: PUSH
40829: LD_VAR 0 10
40833: PUSH
40834: LD_VAR 0 6
40838: PPUSH
40839: CALL_OW 311
40843: PPUSH
40844: LD_INT 3
40846: PPUSH
40847: CALL_OW 259
40851: PUSH
40852: LD_INT 4
40854: MUL
40855: MUL
40856: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40857: LD_VAR 0 6
40861: PPUSH
40862: CALL_OW 263
40866: PUSH
40867: LD_INT 2
40869: EQUAL
40870: IFFALSE 40921
// begin j := IsControledBy ( i ) ;
40872: LD_ADDR_VAR 0 7
40876: PUSH
40877: LD_VAR 0 6
40881: PPUSH
40882: CALL_OW 312
40886: ST_TO_ADDR
// if j then
40887: LD_VAR 0 7
40891: IFFALSE 40921
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40893: LD_ADDR_VAR 0 10
40897: PUSH
40898: LD_VAR 0 10
40902: PUSH
40903: LD_VAR 0 7
40907: PPUSH
40908: LD_INT 3
40910: PPUSH
40911: CALL_OW 259
40915: PUSH
40916: LD_INT 3
40918: MUL
40919: MUL
40920: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40921: LD_VAR 0 6
40925: PPUSH
40926: CALL_OW 264
40930: PUSH
40931: LD_INT 5
40933: PUSH
40934: LD_INT 6
40936: PUSH
40937: LD_INT 46
40939: PUSH
40940: LD_INT 44
40942: PUSH
40943: LD_INT 47
40945: PUSH
40946: LD_INT 45
40948: PUSH
40949: LD_INT 28
40951: PUSH
40952: LD_INT 7
40954: PUSH
40955: LD_INT 27
40957: PUSH
40958: LD_INT 29
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: IN
40973: PUSH
40974: LD_VAR 0 1
40978: PPUSH
40979: LD_INT 52
40981: PPUSH
40982: CALL_OW 321
40986: PUSH
40987: LD_INT 2
40989: EQUAL
40990: AND
40991: IFFALSE 41008
// bpoints := bpoints * 1.2 ;
40993: LD_ADDR_VAR 0 10
40997: PUSH
40998: LD_VAR 0 10
41002: PUSH
41003: LD_REAL  1.20000000000000E+0000
41006: MUL
41007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41008: LD_VAR 0 6
41012: PPUSH
41013: CALL_OW 264
41017: PUSH
41018: LD_INT 6
41020: PUSH
41021: LD_INT 46
41023: PUSH
41024: LD_INT 47
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: LIST
41031: IN
41032: IFFALSE 41049
// bpoints := bpoints * 1.2 ;
41034: LD_ADDR_VAR 0 10
41038: PUSH
41039: LD_VAR 0 10
41043: PUSH
41044: LD_REAL  1.20000000000000E+0000
41047: MUL
41048: ST_TO_ADDR
// end ; unit_building :
41049: GO 41063
41051: LD_INT 3
41053: DOUBLE
41054: EQUAL
41055: IFTRUE 41059
41057: GO 41062
41059: POP
// ; end ;
41060: GO 41063
41062: POP
// for j = 1 to 3 do
41063: LD_ADDR_VAR 0 7
41067: PUSH
41068: DOUBLE
41069: LD_INT 1
41071: DEC
41072: ST_TO_ADDR
41073: LD_INT 3
41075: PUSH
41076: FOR_TO
41077: IFFALSE 41130
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41079: LD_ADDR_VAR 0 5
41083: PUSH
41084: LD_VAR 0 5
41088: PPUSH
41089: LD_VAR 0 7
41093: PPUSH
41094: LD_VAR 0 5
41098: PUSH
41099: LD_VAR 0 7
41103: ARRAY
41104: PUSH
41105: LD_VAR 0 9
41109: PUSH
41110: LD_VAR 0 7
41114: ARRAY
41115: PUSH
41116: LD_VAR 0 10
41120: MUL
41121: PLUS
41122: PPUSH
41123: CALL_OW 1
41127: ST_TO_ADDR
41128: GO 41076
41130: POP
41131: POP
// end ;
41132: GO 39615
41134: POP
41135: POP
// result := Replace ( result , 4 , tmp ) ;
41136: LD_ADDR_VAR 0 5
41140: PUSH
41141: LD_VAR 0 5
41145: PPUSH
41146: LD_INT 4
41148: PPUSH
41149: LD_VAR 0 8
41153: PPUSH
41154: CALL_OW 1
41158: ST_TO_ADDR
// end ;
41159: LD_VAR 0 5
41163: RET
// export function DangerAtRange ( unit , range ) ; begin
41164: LD_INT 0
41166: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_VAR 0 1
41176: PPUSH
41177: CALL_OW 255
41181: PPUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 250
41191: PPUSH
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL_OW 251
41201: PPUSH
41202: LD_VAR 0 2
41206: PPUSH
41207: CALL 39467 0 4
41211: ST_TO_ADDR
// end ;
41212: LD_VAR 0 3
41216: RET
// export function DangerInArea ( side , area ) ; begin
41217: LD_INT 0
41219: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41220: LD_ADDR_VAR 0 3
41224: PUSH
41225: LD_VAR 0 2
41229: PPUSH
41230: LD_INT 81
41232: PUSH
41233: LD_VAR 0 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PPUSH
41242: CALL_OW 70
41246: ST_TO_ADDR
// end ;
41247: LD_VAR 0 3
41251: RET
// export function IsExtension ( b ) ; begin
41252: LD_INT 0
41254: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41255: LD_ADDR_VAR 0 2
41259: PUSH
41260: LD_VAR 0 1
41264: PUSH
41265: LD_INT 23
41267: PUSH
41268: LD_INT 20
41270: PUSH
41271: LD_INT 22
41273: PUSH
41274: LD_INT 17
41276: PUSH
41277: LD_INT 24
41279: PUSH
41280: LD_INT 21
41282: PUSH
41283: LD_INT 19
41285: PUSH
41286: LD_INT 16
41288: PUSH
41289: LD_INT 25
41291: PUSH
41292: LD_INT 18
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: IN
41307: ST_TO_ADDR
// end ;
41308: LD_VAR 0 2
41312: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
41313: LD_INT 0
41315: PPUSH
41316: PPUSH
41317: PPUSH
// result := [ ] ;
41318: LD_ADDR_VAR 0 3
41322: PUSH
41323: EMPTY
41324: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41325: LD_ADDR_VAR 0 4
41329: PUSH
41330: LD_VAR 0 2
41334: PPUSH
41335: LD_INT 21
41337: PUSH
41338: LD_INT 3
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PPUSH
41345: CALL_OW 70
41349: ST_TO_ADDR
// if not tmp then
41350: LD_VAR 0 4
41354: NOT
41355: IFFALSE 41359
// exit ;
41357: GO 41417
// for i in tmp do
41359: LD_ADDR_VAR 0 5
41363: PUSH
41364: LD_VAR 0 4
41368: PUSH
41369: FOR_IN
41370: IFFALSE 41405
// if GetBase ( i ) <> base then
41372: LD_VAR 0 5
41376: PPUSH
41377: CALL_OW 274
41381: PUSH
41382: LD_VAR 0 1
41386: NONEQUAL
41387: IFFALSE 41403
// ComLinkToBase ( base , i ) ;
41389: LD_VAR 0 1
41393: PPUSH
41394: LD_VAR 0 5
41398: PPUSH
41399: CALL_OW 169
41403: GO 41369
41405: POP
41406: POP
// result := tmp ;
41407: LD_ADDR_VAR 0 3
41411: PUSH
41412: LD_VAR 0 4
41416: ST_TO_ADDR
// end ;
41417: LD_VAR 0 3
41421: RET
// export function ComComplete ( unit , b ) ; var i ; begin
41422: LD_INT 0
41424: PPUSH
41425: PPUSH
// if BuildingStatus ( b ) = bs_build then
41426: LD_VAR 0 2
41430: PPUSH
41431: CALL_OW 461
41435: PUSH
41436: LD_INT 1
41438: EQUAL
41439: IFFALSE 41499
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41441: LD_VAR 0 1
41445: PPUSH
41446: LD_STRING h
41448: PUSH
41449: LD_VAR 0 2
41453: PPUSH
41454: CALL_OW 250
41458: PUSH
41459: LD_VAR 0 2
41463: PPUSH
41464: CALL_OW 251
41468: PUSH
41469: LD_VAR 0 2
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: PUSH
41492: EMPTY
41493: LIST
41494: PPUSH
41495: CALL_OW 446
// end ;
41499: LD_VAR 0 3
41503: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41504: LD_INT 0
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
41512: LD_VAR 0 1
41516: NOT
41517: PUSH
41518: LD_VAR 0 1
41522: PPUSH
41523: CALL_OW 263
41527: PUSH
41528: LD_INT 2
41530: EQUAL
41531: NOT
41532: OR
41533: IFFALSE 41537
// exit ;
41535: GO 41853
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41537: LD_ADDR_VAR 0 6
41541: PUSH
41542: LD_INT 22
41544: PUSH
41545: LD_VAR 0 1
41549: PPUSH
41550: CALL_OW 255
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 30
41564: PUSH
41565: LD_INT 36
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 34
41574: PUSH
41575: LD_INT 31
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PPUSH
41591: CALL_OW 69
41595: ST_TO_ADDR
// if not tmp then
41596: LD_VAR 0 6
41600: NOT
41601: IFFALSE 41605
// exit ;
41603: GO 41853
// result := [ ] ;
41605: LD_ADDR_VAR 0 2
41609: PUSH
41610: EMPTY
41611: ST_TO_ADDR
// for i in tmp do
41612: LD_ADDR_VAR 0 3
41616: PUSH
41617: LD_VAR 0 6
41621: PUSH
41622: FOR_IN
41623: IFFALSE 41694
// begin t := UnitsInside ( i ) ;
41625: LD_ADDR_VAR 0 4
41629: PUSH
41630: LD_VAR 0 3
41634: PPUSH
41635: CALL_OW 313
41639: ST_TO_ADDR
// if t then
41640: LD_VAR 0 4
41644: IFFALSE 41692
// for j in t do
41646: LD_ADDR_VAR 0 7
41650: PUSH
41651: LD_VAR 0 4
41655: PUSH
41656: FOR_IN
41657: IFFALSE 41690
// result := Insert ( result , result + 1 , j ) ;
41659: LD_ADDR_VAR 0 2
41663: PUSH
41664: LD_VAR 0 2
41668: PPUSH
41669: LD_VAR 0 2
41673: PUSH
41674: LD_INT 1
41676: PLUS
41677: PPUSH
41678: LD_VAR 0 7
41682: PPUSH
41683: CALL_OW 2
41687: ST_TO_ADDR
41688: GO 41656
41690: POP
41691: POP
// end ;
41692: GO 41622
41694: POP
41695: POP
// if not result then
41696: LD_VAR 0 2
41700: NOT
41701: IFFALSE 41705
// exit ;
41703: GO 41853
// mech := result [ 1 ] ;
41705: LD_ADDR_VAR 0 5
41709: PUSH
41710: LD_VAR 0 2
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: ST_TO_ADDR
// if result > 1 then
41719: LD_VAR 0 2
41723: PUSH
41724: LD_INT 1
41726: GREATER
41727: IFFALSE 41839
// for i = 2 to result do
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: DOUBLE
41735: LD_INT 2
41737: DEC
41738: ST_TO_ADDR
41739: LD_VAR 0 2
41743: PUSH
41744: FOR_TO
41745: IFFALSE 41837
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41747: LD_ADDR_VAR 0 4
41751: PUSH
41752: LD_VAR 0 2
41756: PUSH
41757: LD_VAR 0 3
41761: ARRAY
41762: PPUSH
41763: LD_INT 3
41765: PPUSH
41766: CALL_OW 259
41770: PUSH
41771: LD_VAR 0 2
41775: PUSH
41776: LD_VAR 0 3
41780: ARRAY
41781: PPUSH
41782: CALL_OW 432
41786: MINUS
41787: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41788: LD_VAR 0 4
41792: PUSH
41793: LD_VAR 0 5
41797: PPUSH
41798: LD_INT 3
41800: PPUSH
41801: CALL_OW 259
41805: PUSH
41806: LD_VAR 0 5
41810: PPUSH
41811: CALL_OW 432
41815: MINUS
41816: GREATEREQUAL
41817: IFFALSE 41835
// mech := result [ i ] ;
41819: LD_ADDR_VAR 0 5
41823: PUSH
41824: LD_VAR 0 2
41828: PUSH
41829: LD_VAR 0 3
41833: ARRAY
41834: ST_TO_ADDR
// end ;
41835: GO 41744
41837: POP
41838: POP
// ComLinkTo ( vehicle , mech ) ;
41839: LD_VAR 0 1
41843: PPUSH
41844: LD_VAR 0 5
41848: PPUSH
41849: CALL_OW 135
// end ;
41853: LD_VAR 0 2
41857: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41858: LD_INT 0
41860: PPUSH
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
41865: PPUSH
41866: PPUSH
41867: PPUSH
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
41872: PPUSH
// result := [ ] ;
41873: LD_ADDR_VAR 0 7
41877: PUSH
41878: EMPTY
41879: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41880: LD_VAR 0 1
41884: PPUSH
41885: CALL_OW 266
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: IN
41900: NOT
41901: IFFALSE 41905
// exit ;
41903: GO 43536
// if name then
41905: LD_VAR 0 3
41909: IFFALSE 41925
// SetBName ( base_dep , name ) ;
41911: LD_VAR 0 1
41915: PPUSH
41916: LD_VAR 0 3
41920: PPUSH
41921: CALL_OW 500
// base := GetBase ( base_dep ) ;
41925: LD_ADDR_VAR 0 15
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: CALL_OW 274
41939: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41940: LD_ADDR_VAR 0 16
41944: PUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: CALL_OW 255
41954: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41955: LD_ADDR_VAR 0 17
41959: PUSH
41960: LD_VAR 0 1
41964: PPUSH
41965: CALL_OW 248
41969: ST_TO_ADDR
// if sources then
41970: LD_VAR 0 5
41974: IFFALSE 42021
// for i = 1 to 3 do
41976: LD_ADDR_VAR 0 8
41980: PUSH
41981: DOUBLE
41982: LD_INT 1
41984: DEC
41985: ST_TO_ADDR
41986: LD_INT 3
41988: PUSH
41989: FOR_TO
41990: IFFALSE 42019
// AddResourceType ( base , i , sources [ i ] ) ;
41992: LD_VAR 0 15
41996: PPUSH
41997: LD_VAR 0 8
42001: PPUSH
42002: LD_VAR 0 5
42006: PUSH
42007: LD_VAR 0 8
42011: ARRAY
42012: PPUSH
42013: CALL_OW 276
42017: GO 41989
42019: POP
42020: POP
// buildings := GetBaseBuildings ( base , area ) ;
42021: LD_ADDR_VAR 0 18
42025: PUSH
42026: LD_VAR 0 15
42030: PPUSH
42031: LD_VAR 0 2
42035: PPUSH
42036: CALL 41313 0 2
42040: ST_TO_ADDR
// InitHc ;
42041: CALL_OW 19
// InitUc ;
42045: CALL_OW 18
// uc_side := side ;
42049: LD_ADDR_OWVAR 20
42053: PUSH
42054: LD_VAR 0 16
42058: ST_TO_ADDR
// uc_nation := nation ;
42059: LD_ADDR_OWVAR 21
42063: PUSH
42064: LD_VAR 0 17
42068: ST_TO_ADDR
// if buildings then
42069: LD_VAR 0 18
42073: IFFALSE 43395
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42075: LD_ADDR_VAR 0 19
42079: PUSH
42080: LD_VAR 0 18
42084: PPUSH
42085: LD_INT 2
42087: PUSH
42088: LD_INT 30
42090: PUSH
42091: LD_INT 29
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 30
42100: PUSH
42101: LD_INT 30
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: LIST
42112: PPUSH
42113: CALL_OW 72
42117: ST_TO_ADDR
// if tmp then
42118: LD_VAR 0 19
42122: IFFALSE 42170
// for i in tmp do
42124: LD_ADDR_VAR 0 8
42128: PUSH
42129: LD_VAR 0 19
42133: PUSH
42134: FOR_IN
42135: IFFALSE 42168
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42137: LD_VAR 0 8
42141: PPUSH
42142: CALL_OW 250
42146: PPUSH
42147: LD_VAR 0 8
42151: PPUSH
42152: CALL_OW 251
42156: PPUSH
42157: LD_VAR 0 16
42161: PPUSH
42162: CALL_OW 441
42166: GO 42134
42168: POP
42169: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42170: LD_VAR 0 18
42174: PPUSH
42175: LD_INT 2
42177: PUSH
42178: LD_INT 30
42180: PUSH
42181: LD_INT 32
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 30
42190: PUSH
42191: LD_INT 33
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: LIST
42202: PPUSH
42203: CALL_OW 72
42207: IFFALSE 42295
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42209: LD_ADDR_VAR 0 8
42213: PUSH
42214: LD_VAR 0 18
42218: PPUSH
42219: LD_INT 2
42221: PUSH
42222: LD_INT 30
42224: PUSH
42225: LD_INT 32
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 30
42234: PUSH
42235: LD_INT 33
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: PPUSH
42247: CALL_OW 72
42251: PUSH
42252: FOR_IN
42253: IFFALSE 42293
// begin if not GetBWeapon ( i ) then
42255: LD_VAR 0 8
42259: PPUSH
42260: CALL_OW 269
42264: NOT
42265: IFFALSE 42291
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42267: LD_VAR 0 8
42271: PPUSH
42272: LD_VAR 0 8
42276: PPUSH
42277: LD_VAR 0 2
42281: PPUSH
42282: CALL 43541 0 2
42286: PPUSH
42287: CALL_OW 431
// end ;
42291: GO 42252
42293: POP
42294: POP
// end ; for i = 1 to personel do
42295: LD_ADDR_VAR 0 8
42299: PUSH
42300: DOUBLE
42301: LD_INT 1
42303: DEC
42304: ST_TO_ADDR
42305: LD_VAR 0 6
42309: PUSH
42310: FOR_TO
42311: IFFALSE 43375
// begin if i > 4 then
42313: LD_VAR 0 8
42317: PUSH
42318: LD_INT 4
42320: GREATER
42321: IFFALSE 42325
// break ;
42323: GO 43375
// case i of 1 :
42325: LD_VAR 0 8
42329: PUSH
42330: LD_INT 1
42332: DOUBLE
42333: EQUAL
42334: IFTRUE 42338
42336: GO 42418
42338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42339: LD_ADDR_VAR 0 12
42343: PUSH
42344: LD_VAR 0 18
42348: PPUSH
42349: LD_INT 22
42351: PUSH
42352: LD_VAR 0 16
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 58
42363: PUSH
42364: EMPTY
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: LD_INT 30
42372: PUSH
42373: LD_INT 32
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 30
42382: PUSH
42383: LD_INT 4
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 30
42392: PUSH
42393: LD_INT 5
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: LIST
42410: PPUSH
42411: CALL_OW 72
42415: ST_TO_ADDR
42416: GO 42640
42418: LD_INT 2
42420: DOUBLE
42421: EQUAL
42422: IFTRUE 42426
42424: GO 42488
42426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42427: LD_ADDR_VAR 0 12
42431: PUSH
42432: LD_VAR 0 18
42436: PPUSH
42437: LD_INT 22
42439: PUSH
42440: LD_VAR 0 16
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 30
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 30
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PPUSH
42481: CALL_OW 72
42485: ST_TO_ADDR
42486: GO 42640
42488: LD_INT 3
42490: DOUBLE
42491: EQUAL
42492: IFTRUE 42496
42494: GO 42558
42496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42497: LD_ADDR_VAR 0 12
42501: PUSH
42502: LD_VAR 0 18
42506: PPUSH
42507: LD_INT 22
42509: PUSH
42510: LD_VAR 0 16
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 30
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 30
42534: PUSH
42535: LD_INT 3
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PPUSH
42551: CALL_OW 72
42555: ST_TO_ADDR
42556: GO 42640
42558: LD_INT 4
42560: DOUBLE
42561: EQUAL
42562: IFTRUE 42566
42564: GO 42639
42566: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42567: LD_ADDR_VAR 0 12
42571: PUSH
42572: LD_VAR 0 18
42576: PPUSH
42577: LD_INT 22
42579: PUSH
42580: LD_VAR 0 16
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 30
42594: PUSH
42595: LD_INT 6
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 30
42604: PUSH
42605: LD_INT 7
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 30
42614: PUSH
42615: LD_INT 8
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PPUSH
42632: CALL_OW 72
42636: ST_TO_ADDR
42637: GO 42640
42639: POP
// if i = 1 then
42640: LD_VAR 0 8
42644: PUSH
42645: LD_INT 1
42647: EQUAL
42648: IFFALSE 42759
// begin tmp := [ ] ;
42650: LD_ADDR_VAR 0 19
42654: PUSH
42655: EMPTY
42656: ST_TO_ADDR
// for j in f do
42657: LD_ADDR_VAR 0 9
42661: PUSH
42662: LD_VAR 0 12
42666: PUSH
42667: FOR_IN
42668: IFFALSE 42741
// if GetBType ( j ) = b_bunker then
42670: LD_VAR 0 9
42674: PPUSH
42675: CALL_OW 266
42679: PUSH
42680: LD_INT 32
42682: EQUAL
42683: IFFALSE 42710
// tmp := Insert ( tmp , 1 , j ) else
42685: LD_ADDR_VAR 0 19
42689: PUSH
42690: LD_VAR 0 19
42694: PPUSH
42695: LD_INT 1
42697: PPUSH
42698: LD_VAR 0 9
42702: PPUSH
42703: CALL_OW 2
42707: ST_TO_ADDR
42708: GO 42739
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42710: LD_ADDR_VAR 0 19
42714: PUSH
42715: LD_VAR 0 19
42719: PPUSH
42720: LD_VAR 0 19
42724: PUSH
42725: LD_INT 1
42727: PLUS
42728: PPUSH
42729: LD_VAR 0 9
42733: PPUSH
42734: CALL_OW 2
42738: ST_TO_ADDR
42739: GO 42667
42741: POP
42742: POP
// if tmp then
42743: LD_VAR 0 19
42747: IFFALSE 42759
// f := tmp ;
42749: LD_ADDR_VAR 0 12
42753: PUSH
42754: LD_VAR 0 19
42758: ST_TO_ADDR
// end ; x := personel [ i ] ;
42759: LD_ADDR_VAR 0 13
42763: PUSH
42764: LD_VAR 0 6
42768: PUSH
42769: LD_VAR 0 8
42773: ARRAY
42774: ST_TO_ADDR
// if x = - 1 then
42775: LD_VAR 0 13
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: EQUAL
42784: IFFALSE 42993
// begin for j in f do
42786: LD_ADDR_VAR 0 9
42790: PUSH
42791: LD_VAR 0 12
42795: PUSH
42796: FOR_IN
42797: IFFALSE 42989
// repeat InitHc ;
42799: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42803: LD_VAR 0 9
42807: PPUSH
42808: CALL_OW 266
42812: PUSH
42813: LD_INT 5
42815: EQUAL
42816: IFFALSE 42886
// begin if UnitsInside ( j ) < 3 then
42818: LD_VAR 0 9
42822: PPUSH
42823: CALL_OW 313
42827: PUSH
42828: LD_INT 3
42830: LESS
42831: IFFALSE 42867
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42833: LD_INT 0
42835: PPUSH
42836: LD_INT 5
42838: PUSH
42839: LD_INT 8
42841: PUSH
42842: LD_INT 9
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: PUSH
42850: LD_VAR 0 17
42854: ARRAY
42855: PPUSH
42856: LD_VAR 0 4
42860: PPUSH
42861: CALL_OW 380
42865: GO 42884
// PrepareHuman ( false , i , skill ) ;
42867: LD_INT 0
42869: PPUSH
42870: LD_VAR 0 8
42874: PPUSH
42875: LD_VAR 0 4
42879: PPUSH
42880: CALL_OW 380
// end else
42884: GO 42903
// PrepareHuman ( false , i , skill ) ;
42886: LD_INT 0
42888: PPUSH
42889: LD_VAR 0 8
42893: PPUSH
42894: LD_VAR 0 4
42898: PPUSH
42899: CALL_OW 380
// un := CreateHuman ;
42903: LD_ADDR_VAR 0 14
42907: PUSH
42908: CALL_OW 44
42912: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42913: LD_ADDR_VAR 0 7
42917: PUSH
42918: LD_VAR 0 7
42922: PPUSH
42923: LD_INT 1
42925: PPUSH
42926: LD_VAR 0 14
42930: PPUSH
42931: CALL_OW 2
42935: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42936: LD_VAR 0 14
42940: PPUSH
42941: LD_VAR 0 9
42945: PPUSH
42946: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42950: LD_VAR 0 9
42954: PPUSH
42955: CALL_OW 313
42959: PUSH
42960: LD_INT 6
42962: EQUAL
42963: PUSH
42964: LD_VAR 0 9
42968: PPUSH
42969: CALL_OW 266
42973: PUSH
42974: LD_INT 32
42976: PUSH
42977: LD_INT 31
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: IN
42984: OR
42985: IFFALSE 42799
42987: GO 42796
42989: POP
42990: POP
// end else
42991: GO 43373
// for j = 1 to x do
42993: LD_ADDR_VAR 0 9
42997: PUSH
42998: DOUBLE
42999: LD_INT 1
43001: DEC
43002: ST_TO_ADDR
43003: LD_VAR 0 13
43007: PUSH
43008: FOR_TO
43009: IFFALSE 43371
// begin InitHc ;
43011: CALL_OW 19
// if not f then
43015: LD_VAR 0 12
43019: NOT
43020: IFFALSE 43109
// begin PrepareHuman ( false , i , skill ) ;
43022: LD_INT 0
43024: PPUSH
43025: LD_VAR 0 8
43029: PPUSH
43030: LD_VAR 0 4
43034: PPUSH
43035: CALL_OW 380
// un := CreateHuman ;
43039: LD_ADDR_VAR 0 14
43043: PUSH
43044: CALL_OW 44
43048: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43049: LD_ADDR_VAR 0 7
43053: PUSH
43054: LD_VAR 0 7
43058: PPUSH
43059: LD_INT 1
43061: PPUSH
43062: LD_VAR 0 14
43066: PPUSH
43067: CALL_OW 2
43071: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43072: LD_VAR 0 14
43076: PPUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: CALL_OW 250
43086: PPUSH
43087: LD_VAR 0 1
43091: PPUSH
43092: CALL_OW 251
43096: PPUSH
43097: LD_INT 10
43099: PPUSH
43100: LD_INT 0
43102: PPUSH
43103: CALL_OW 50
// continue ;
43107: GO 43008
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43109: LD_VAR 0 12
43113: PUSH
43114: LD_INT 1
43116: ARRAY
43117: PPUSH
43118: CALL_OW 313
43122: PUSH
43123: LD_VAR 0 12
43127: PUSH
43128: LD_INT 1
43130: ARRAY
43131: PPUSH
43132: CALL_OW 266
43136: PUSH
43137: LD_INT 32
43139: PUSH
43140: LD_INT 31
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: IN
43147: AND
43148: PUSH
43149: LD_VAR 0 12
43153: PUSH
43154: LD_INT 1
43156: ARRAY
43157: PPUSH
43158: CALL_OW 313
43162: PUSH
43163: LD_INT 6
43165: EQUAL
43166: OR
43167: IFFALSE 43187
// f := Delete ( f , 1 ) ;
43169: LD_ADDR_VAR 0 12
43173: PUSH
43174: LD_VAR 0 12
43178: PPUSH
43179: LD_INT 1
43181: PPUSH
43182: CALL_OW 3
43186: ST_TO_ADDR
// if not f then
43187: LD_VAR 0 12
43191: NOT
43192: IFFALSE 43210
// begin x := x + 2 ;
43194: LD_ADDR_VAR 0 13
43198: PUSH
43199: LD_VAR 0 13
43203: PUSH
43204: LD_INT 2
43206: PLUS
43207: ST_TO_ADDR
// continue ;
43208: GO 43008
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43210: LD_VAR 0 12
43214: PUSH
43215: LD_INT 1
43217: ARRAY
43218: PPUSH
43219: CALL_OW 266
43223: PUSH
43224: LD_INT 5
43226: EQUAL
43227: IFFALSE 43301
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43229: LD_VAR 0 12
43233: PUSH
43234: LD_INT 1
43236: ARRAY
43237: PPUSH
43238: CALL_OW 313
43242: PUSH
43243: LD_INT 3
43245: LESS
43246: IFFALSE 43282
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43248: LD_INT 0
43250: PPUSH
43251: LD_INT 5
43253: PUSH
43254: LD_INT 8
43256: PUSH
43257: LD_INT 9
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: PUSH
43265: LD_VAR 0 17
43269: ARRAY
43270: PPUSH
43271: LD_VAR 0 4
43275: PPUSH
43276: CALL_OW 380
43280: GO 43299
// PrepareHuman ( false , i , skill ) ;
43282: LD_INT 0
43284: PPUSH
43285: LD_VAR 0 8
43289: PPUSH
43290: LD_VAR 0 4
43294: PPUSH
43295: CALL_OW 380
// end else
43299: GO 43318
// PrepareHuman ( false , i , skill ) ;
43301: LD_INT 0
43303: PPUSH
43304: LD_VAR 0 8
43308: PPUSH
43309: LD_VAR 0 4
43313: PPUSH
43314: CALL_OW 380
// un := CreateHuman ;
43318: LD_ADDR_VAR 0 14
43322: PUSH
43323: CALL_OW 44
43327: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43328: LD_ADDR_VAR 0 7
43332: PUSH
43333: LD_VAR 0 7
43337: PPUSH
43338: LD_INT 1
43340: PPUSH
43341: LD_VAR 0 14
43345: PPUSH
43346: CALL_OW 2
43350: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43351: LD_VAR 0 14
43355: PPUSH
43356: LD_VAR 0 12
43360: PUSH
43361: LD_INT 1
43363: ARRAY
43364: PPUSH
43365: CALL_OW 52
// end ;
43369: GO 43008
43371: POP
43372: POP
// end ;
43373: GO 42310
43375: POP
43376: POP
// result := result ^ buildings ;
43377: LD_ADDR_VAR 0 7
43381: PUSH
43382: LD_VAR 0 7
43386: PUSH
43387: LD_VAR 0 18
43391: ADD
43392: ST_TO_ADDR
// end else
43393: GO 43536
// begin for i = 1 to personel do
43395: LD_ADDR_VAR 0 8
43399: PUSH
43400: DOUBLE
43401: LD_INT 1
43403: DEC
43404: ST_TO_ADDR
43405: LD_VAR 0 6
43409: PUSH
43410: FOR_TO
43411: IFFALSE 43534
// begin if i > 4 then
43413: LD_VAR 0 8
43417: PUSH
43418: LD_INT 4
43420: GREATER
43421: IFFALSE 43425
// break ;
43423: GO 43534
// x := personel [ i ] ;
43425: LD_ADDR_VAR 0 13
43429: PUSH
43430: LD_VAR 0 6
43434: PUSH
43435: LD_VAR 0 8
43439: ARRAY
43440: ST_TO_ADDR
// if x = - 1 then
43441: LD_VAR 0 13
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: EQUAL
43450: IFFALSE 43454
// continue ;
43452: GO 43410
// PrepareHuman ( false , i , skill ) ;
43454: LD_INT 0
43456: PPUSH
43457: LD_VAR 0 8
43461: PPUSH
43462: LD_VAR 0 4
43466: PPUSH
43467: CALL_OW 380
// un := CreateHuman ;
43471: LD_ADDR_VAR 0 14
43475: PUSH
43476: CALL_OW 44
43480: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43481: LD_VAR 0 14
43485: PPUSH
43486: LD_VAR 0 1
43490: PPUSH
43491: CALL_OW 250
43495: PPUSH
43496: LD_VAR 0 1
43500: PPUSH
43501: CALL_OW 251
43505: PPUSH
43506: LD_INT 10
43508: PPUSH
43509: LD_INT 0
43511: PPUSH
43512: CALL_OW 50
// result := result ^ un ;
43516: LD_ADDR_VAR 0 7
43520: PUSH
43521: LD_VAR 0 7
43525: PUSH
43526: LD_VAR 0 14
43530: ADD
43531: ST_TO_ADDR
// end ;
43532: GO 43410
43534: POP
43535: POP
// end ; end ;
43536: LD_VAR 0 7
43540: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43541: LD_INT 0
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
43558: PPUSH
// result := false ;
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 0
43566: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43567: LD_VAR 0 1
43571: NOT
43572: PUSH
43573: LD_VAR 0 1
43577: PPUSH
43578: CALL_OW 266
43582: PUSH
43583: LD_INT 32
43585: PUSH
43586: LD_INT 33
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: IN
43593: NOT
43594: OR
43595: IFFALSE 43599
// exit ;
43597: GO 44735
// nat := GetNation ( tower ) ;
43599: LD_ADDR_VAR 0 12
43603: PUSH
43604: LD_VAR 0 1
43608: PPUSH
43609: CALL_OW 248
43613: ST_TO_ADDR
// side := GetSide ( tower ) ;
43614: LD_ADDR_VAR 0 16
43618: PUSH
43619: LD_VAR 0 1
43623: PPUSH
43624: CALL_OW 255
43628: ST_TO_ADDR
// x := GetX ( tower ) ;
43629: LD_ADDR_VAR 0 10
43633: PUSH
43634: LD_VAR 0 1
43638: PPUSH
43639: CALL_OW 250
43643: ST_TO_ADDR
// y := GetY ( tower ) ;
43644: LD_ADDR_VAR 0 11
43648: PUSH
43649: LD_VAR 0 1
43653: PPUSH
43654: CALL_OW 251
43658: ST_TO_ADDR
// if not x or not y then
43659: LD_VAR 0 10
43663: NOT
43664: PUSH
43665: LD_VAR 0 11
43669: NOT
43670: OR
43671: IFFALSE 43675
// exit ;
43673: GO 44735
// weapon := 0 ;
43675: LD_ADDR_VAR 0 18
43679: PUSH
43680: LD_INT 0
43682: ST_TO_ADDR
// fac_list := [ ] ;
43683: LD_ADDR_VAR 0 17
43687: PUSH
43688: EMPTY
43689: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
43690: LD_ADDR_VAR 0 6
43694: PUSH
43695: LD_VAR 0 1
43699: PPUSH
43700: CALL_OW 274
43704: PPUSH
43705: LD_VAR 0 2
43709: PPUSH
43710: CALL 41313 0 2
43714: PPUSH
43715: LD_INT 30
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PPUSH
43725: CALL_OW 72
43729: ST_TO_ADDR
// if not factories then
43730: LD_VAR 0 6
43734: NOT
43735: IFFALSE 43739
// exit ;
43737: GO 44735
// for i in factories do
43739: LD_ADDR_VAR 0 8
43743: PUSH
43744: LD_VAR 0 6
43748: PUSH
43749: FOR_IN
43750: IFFALSE 43775
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43752: LD_ADDR_VAR 0 17
43756: PUSH
43757: LD_VAR 0 17
43761: PUSH
43762: LD_VAR 0 8
43766: PPUSH
43767: CALL_OW 478
43771: UNION
43772: ST_TO_ADDR
43773: GO 43749
43775: POP
43776: POP
// if not fac_list then
43777: LD_VAR 0 17
43781: NOT
43782: IFFALSE 43786
// exit ;
43784: GO 44735
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43786: LD_ADDR_VAR 0 5
43790: PUSH
43791: LD_INT 4
43793: PUSH
43794: LD_INT 5
43796: PUSH
43797: LD_INT 9
43799: PUSH
43800: LD_INT 10
43802: PUSH
43803: LD_INT 6
43805: PUSH
43806: LD_INT 7
43808: PUSH
43809: LD_INT 11
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 27
43823: PUSH
43824: LD_INT 28
43826: PUSH
43827: LD_INT 26
43829: PUSH
43830: LD_INT 30
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 43
43841: PUSH
43842: LD_INT 44
43844: PUSH
43845: LD_INT 46
43847: PUSH
43848: LD_INT 45
43850: PUSH
43851: LD_INT 47
43853: PUSH
43854: LD_INT 49
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: PUSH
43870: LD_VAR 0 12
43874: ARRAY
43875: ST_TO_ADDR
// for i in list do
43876: LD_ADDR_VAR 0 8
43880: PUSH
43881: LD_VAR 0 5
43885: PUSH
43886: FOR_IN
43887: IFFALSE 43920
// if not i in fac_list then
43889: LD_VAR 0 8
43893: PUSH
43894: LD_VAR 0 17
43898: IN
43899: NOT
43900: IFFALSE 43918
// list := list diff i ;
43902: LD_ADDR_VAR 0 5
43906: PUSH
43907: LD_VAR 0 5
43911: PUSH
43912: LD_VAR 0 8
43916: DIFF
43917: ST_TO_ADDR
43918: GO 43886
43920: POP
43921: POP
// if not list then
43922: LD_VAR 0 5
43926: NOT
43927: IFFALSE 43931
// exit ;
43929: GO 44735
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43931: LD_VAR 0 12
43935: PUSH
43936: LD_INT 3
43938: EQUAL
43939: PUSH
43940: LD_INT 49
43942: PUSH
43943: LD_VAR 0 5
43947: IN
43948: AND
43949: PUSH
43950: LD_INT 31
43952: PPUSH
43953: LD_VAR 0 16
43957: PPUSH
43958: CALL_OW 321
43962: PUSH
43963: LD_INT 2
43965: EQUAL
43966: AND
43967: IFFALSE 44027
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43969: LD_INT 22
43971: PUSH
43972: LD_VAR 0 16
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 35
43983: PUSH
43984: LD_INT 49
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 91
43993: PUSH
43994: LD_VAR 0 1
43998: PUSH
43999: LD_INT 10
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: LIST
44011: PPUSH
44012: CALL_OW 69
44016: NOT
44017: IFFALSE 44027
// weapon := ru_time_lapser ;
44019: LD_ADDR_VAR 0 18
44023: PUSH
44024: LD_INT 49
44026: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44027: LD_VAR 0 12
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: LD_INT 2
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: IN
44042: PUSH
44043: LD_INT 11
44045: PUSH
44046: LD_VAR 0 5
44050: IN
44051: PUSH
44052: LD_INT 30
44054: PUSH
44055: LD_VAR 0 5
44059: IN
44060: OR
44061: AND
44062: PUSH
44063: LD_INT 6
44065: PPUSH
44066: LD_VAR 0 16
44070: PPUSH
44071: CALL_OW 321
44075: PUSH
44076: LD_INT 2
44078: EQUAL
44079: AND
44080: IFFALSE 44245
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44082: LD_INT 22
44084: PUSH
44085: LD_VAR 0 16
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: LD_INT 35
44099: PUSH
44100: LD_INT 11
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 35
44109: PUSH
44110: LD_INT 30
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 91
44124: PUSH
44125: LD_VAR 0 1
44129: PUSH
44130: LD_INT 18
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: LIST
44142: PPUSH
44143: CALL_OW 69
44147: NOT
44148: PUSH
44149: LD_INT 22
44151: PUSH
44152: LD_VAR 0 16
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: LD_INT 30
44166: PUSH
44167: LD_INT 32
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 30
44176: PUSH
44177: LD_INT 33
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 91
44191: PUSH
44192: LD_VAR 0 1
44196: PUSH
44197: LD_INT 12
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: PUSH
44210: EMPTY
44211: LIST
44212: PPUSH
44213: CALL_OW 69
44217: PUSH
44218: LD_INT 2
44220: GREATER
44221: AND
44222: IFFALSE 44245
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44224: LD_ADDR_VAR 0 18
44228: PUSH
44229: LD_INT 11
44231: PUSH
44232: LD_INT 30
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_VAR 0 12
44243: ARRAY
44244: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44245: LD_VAR 0 18
44249: NOT
44250: PUSH
44251: LD_INT 40
44253: PPUSH
44254: LD_VAR 0 16
44258: PPUSH
44259: CALL_OW 321
44263: PUSH
44264: LD_INT 2
44266: EQUAL
44267: AND
44268: PUSH
44269: LD_INT 7
44271: PUSH
44272: LD_VAR 0 5
44276: IN
44277: PUSH
44278: LD_INT 28
44280: PUSH
44281: LD_VAR 0 5
44285: IN
44286: OR
44287: PUSH
44288: LD_INT 45
44290: PUSH
44291: LD_VAR 0 5
44295: IN
44296: OR
44297: AND
44298: IFFALSE 44552
// begin hex := GetHexInfo ( x , y ) ;
44300: LD_ADDR_VAR 0 4
44304: PUSH
44305: LD_VAR 0 10
44309: PPUSH
44310: LD_VAR 0 11
44314: PPUSH
44315: CALL_OW 546
44319: ST_TO_ADDR
// if hex [ 1 ] then
44320: LD_VAR 0 4
44324: PUSH
44325: LD_INT 1
44327: ARRAY
44328: IFFALSE 44332
// exit ;
44330: GO 44735
// height := hex [ 2 ] ;
44332: LD_ADDR_VAR 0 15
44336: PUSH
44337: LD_VAR 0 4
44341: PUSH
44342: LD_INT 2
44344: ARRAY
44345: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44346: LD_ADDR_VAR 0 14
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: LD_INT 5
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: ST_TO_ADDR
// for i in tmp do
44369: LD_ADDR_VAR 0 8
44373: PUSH
44374: LD_VAR 0 14
44378: PUSH
44379: FOR_IN
44380: IFFALSE 44550
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44382: LD_ADDR_VAR 0 9
44386: PUSH
44387: LD_VAR 0 10
44391: PPUSH
44392: LD_VAR 0 8
44396: PPUSH
44397: LD_INT 5
44399: PPUSH
44400: CALL_OW 272
44404: PUSH
44405: LD_VAR 0 11
44409: PPUSH
44410: LD_VAR 0 8
44414: PPUSH
44415: LD_INT 5
44417: PPUSH
44418: CALL_OW 273
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44427: LD_VAR 0 9
44431: PUSH
44432: LD_INT 1
44434: ARRAY
44435: PPUSH
44436: LD_VAR 0 9
44440: PUSH
44441: LD_INT 2
44443: ARRAY
44444: PPUSH
44445: CALL_OW 488
44449: IFFALSE 44548
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44451: LD_ADDR_VAR 0 4
44455: PUSH
44456: LD_VAR 0 9
44460: PUSH
44461: LD_INT 1
44463: ARRAY
44464: PPUSH
44465: LD_VAR 0 9
44469: PUSH
44470: LD_INT 2
44472: ARRAY
44473: PPUSH
44474: CALL_OW 546
44478: ST_TO_ADDR
// if hex [ 1 ] then
44479: LD_VAR 0 4
44483: PUSH
44484: LD_INT 1
44486: ARRAY
44487: IFFALSE 44491
// continue ;
44489: GO 44379
// h := hex [ 2 ] ;
44491: LD_ADDR_VAR 0 13
44495: PUSH
44496: LD_VAR 0 4
44500: PUSH
44501: LD_INT 2
44503: ARRAY
44504: ST_TO_ADDR
// if h + 7 < height then
44505: LD_VAR 0 13
44509: PUSH
44510: LD_INT 7
44512: PLUS
44513: PUSH
44514: LD_VAR 0 15
44518: LESS
44519: IFFALSE 44548
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44521: LD_ADDR_VAR 0 18
44525: PUSH
44526: LD_INT 7
44528: PUSH
44529: LD_INT 28
44531: PUSH
44532: LD_INT 45
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: LIST
44539: PUSH
44540: LD_VAR 0 12
44544: ARRAY
44545: ST_TO_ADDR
// break ;
44546: GO 44550
// end ; end ; end ;
44548: GO 44379
44550: POP
44551: POP
// end ; if not weapon then
44552: LD_VAR 0 18
44556: NOT
44557: IFFALSE 44617
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44559: LD_ADDR_VAR 0 5
44563: PUSH
44564: LD_VAR 0 5
44568: PUSH
44569: LD_INT 11
44571: PUSH
44572: LD_INT 30
44574: PUSH
44575: LD_INT 49
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: DIFF
44583: ST_TO_ADDR
// if not list then
44584: LD_VAR 0 5
44588: NOT
44589: IFFALSE 44593
// exit ;
44591: GO 44735
// weapon := list [ rand ( 1 , list ) ] ;
44593: LD_ADDR_VAR 0 18
44597: PUSH
44598: LD_VAR 0 5
44602: PUSH
44603: LD_INT 1
44605: PPUSH
44606: LD_VAR 0 5
44610: PPUSH
44611: CALL_OW 12
44615: ARRAY
44616: ST_TO_ADDR
// end ; if weapon then
44617: LD_VAR 0 18
44621: IFFALSE 44735
// begin tmp := CostOfWeapon ( weapon ) ;
44623: LD_ADDR_VAR 0 14
44627: PUSH
44628: LD_VAR 0 18
44632: PPUSH
44633: CALL_OW 451
44637: ST_TO_ADDR
// j := GetBase ( tower ) ;
44638: LD_ADDR_VAR 0 9
44642: PUSH
44643: LD_VAR 0 1
44647: PPUSH
44648: CALL_OW 274
44652: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44653: LD_VAR 0 9
44657: PPUSH
44658: LD_INT 1
44660: PPUSH
44661: CALL_OW 275
44665: PUSH
44666: LD_VAR 0 14
44670: PUSH
44671: LD_INT 1
44673: ARRAY
44674: GREATEREQUAL
44675: PUSH
44676: LD_VAR 0 9
44680: PPUSH
44681: LD_INT 2
44683: PPUSH
44684: CALL_OW 275
44688: PUSH
44689: LD_VAR 0 14
44693: PUSH
44694: LD_INT 2
44696: ARRAY
44697: GREATEREQUAL
44698: AND
44699: PUSH
44700: LD_VAR 0 9
44704: PPUSH
44705: LD_INT 3
44707: PPUSH
44708: CALL_OW 275
44712: PUSH
44713: LD_VAR 0 14
44717: PUSH
44718: LD_INT 3
44720: ARRAY
44721: GREATEREQUAL
44722: AND
44723: IFFALSE 44735
// result := weapon ;
44725: LD_ADDR_VAR 0 3
44729: PUSH
44730: LD_VAR 0 18
44734: ST_TO_ADDR
// end ; end ;
44735: LD_VAR 0 3
44739: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44740: LD_INT 0
44742: PPUSH
44743: PPUSH
// result := true ;
44744: LD_ADDR_VAR 0 3
44748: PUSH
44749: LD_INT 1
44751: ST_TO_ADDR
// if array1 = array2 then
44752: LD_VAR 0 1
44756: PUSH
44757: LD_VAR 0 2
44761: EQUAL
44762: IFFALSE 44822
// begin for i = 1 to array1 do
44764: LD_ADDR_VAR 0 4
44768: PUSH
44769: DOUBLE
44770: LD_INT 1
44772: DEC
44773: ST_TO_ADDR
44774: LD_VAR 0 1
44778: PUSH
44779: FOR_TO
44780: IFFALSE 44818
// if array1 [ i ] <> array2 [ i ] then
44782: LD_VAR 0 1
44786: PUSH
44787: LD_VAR 0 4
44791: ARRAY
44792: PUSH
44793: LD_VAR 0 2
44797: PUSH
44798: LD_VAR 0 4
44802: ARRAY
44803: NONEQUAL
44804: IFFALSE 44816
// begin result := false ;
44806: LD_ADDR_VAR 0 3
44810: PUSH
44811: LD_INT 0
44813: ST_TO_ADDR
// break ;
44814: GO 44818
// end ;
44816: GO 44779
44818: POP
44819: POP
// end else
44820: GO 44830
// result := false ;
44822: LD_ADDR_VAR 0 3
44826: PUSH
44827: LD_INT 0
44829: ST_TO_ADDR
// end ;
44830: LD_VAR 0 3
44834: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44835: LD_INT 0
44837: PPUSH
44838: PPUSH
44839: PPUSH
// pom := GetBase ( fac ) ;
44840: LD_ADDR_VAR 0 5
44844: PUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: CALL_OW 274
44854: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44855: LD_ADDR_VAR 0 4
44859: PUSH
44860: LD_VAR 0 2
44864: PUSH
44865: LD_INT 1
44867: ARRAY
44868: PPUSH
44869: LD_VAR 0 2
44873: PUSH
44874: LD_INT 2
44876: ARRAY
44877: PPUSH
44878: LD_VAR 0 2
44882: PUSH
44883: LD_INT 3
44885: ARRAY
44886: PPUSH
44887: LD_VAR 0 2
44891: PUSH
44892: LD_INT 4
44894: ARRAY
44895: PPUSH
44896: CALL_OW 449
44900: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44901: LD_ADDR_VAR 0 3
44905: PUSH
44906: LD_VAR 0 5
44910: PPUSH
44911: LD_INT 1
44913: PPUSH
44914: CALL_OW 275
44918: PUSH
44919: LD_VAR 0 4
44923: PUSH
44924: LD_INT 1
44926: ARRAY
44927: GREATEREQUAL
44928: PUSH
44929: LD_VAR 0 5
44933: PPUSH
44934: LD_INT 2
44936: PPUSH
44937: CALL_OW 275
44941: PUSH
44942: LD_VAR 0 4
44946: PUSH
44947: LD_INT 2
44949: ARRAY
44950: GREATEREQUAL
44951: AND
44952: PUSH
44953: LD_VAR 0 5
44957: PPUSH
44958: LD_INT 3
44960: PPUSH
44961: CALL_OW 275
44965: PUSH
44966: LD_VAR 0 4
44970: PUSH
44971: LD_INT 3
44973: ARRAY
44974: GREATEREQUAL
44975: AND
44976: ST_TO_ADDR
// end ;
44977: LD_VAR 0 3
44981: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44982: LD_INT 0
44984: PPUSH
44985: PPUSH
44986: PPUSH
44987: PPUSH
// pom := GetBase ( building ) ;
44988: LD_ADDR_VAR 0 3
44992: PUSH
44993: LD_VAR 0 1
44997: PPUSH
44998: CALL_OW 274
45002: ST_TO_ADDR
// if not pom then
45003: LD_VAR 0 3
45007: NOT
45008: IFFALSE 45012
// exit ;
45010: GO 45182
// btype := GetBType ( building ) ;
45012: LD_ADDR_VAR 0 5
45016: PUSH
45017: LD_VAR 0 1
45021: PPUSH
45022: CALL_OW 266
45026: ST_TO_ADDR
// if btype = b_armoury then
45027: LD_VAR 0 5
45031: PUSH
45032: LD_INT 4
45034: EQUAL
45035: IFFALSE 45045
// btype := b_barracks ;
45037: LD_ADDR_VAR 0 5
45041: PUSH
45042: LD_INT 5
45044: ST_TO_ADDR
// if btype = b_depot then
45045: LD_VAR 0 5
45049: PUSH
45050: LD_INT 0
45052: EQUAL
45053: IFFALSE 45063
// btype := b_warehouse ;
45055: LD_ADDR_VAR 0 5
45059: PUSH
45060: LD_INT 1
45062: ST_TO_ADDR
// if btype = b_workshop then
45063: LD_VAR 0 5
45067: PUSH
45068: LD_INT 2
45070: EQUAL
45071: IFFALSE 45081
// btype := b_factory ;
45073: LD_ADDR_VAR 0 5
45077: PUSH
45078: LD_INT 3
45080: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45081: LD_ADDR_VAR 0 4
45085: PUSH
45086: LD_VAR 0 5
45090: PPUSH
45091: LD_VAR 0 1
45095: PPUSH
45096: CALL_OW 248
45100: PPUSH
45101: CALL_OW 450
45105: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45106: LD_ADDR_VAR 0 2
45110: PUSH
45111: LD_VAR 0 3
45115: PPUSH
45116: LD_INT 1
45118: PPUSH
45119: CALL_OW 275
45123: PUSH
45124: LD_VAR 0 4
45128: PUSH
45129: LD_INT 1
45131: ARRAY
45132: GREATEREQUAL
45133: PUSH
45134: LD_VAR 0 3
45138: PPUSH
45139: LD_INT 2
45141: PPUSH
45142: CALL_OW 275
45146: PUSH
45147: LD_VAR 0 4
45151: PUSH
45152: LD_INT 2
45154: ARRAY
45155: GREATEREQUAL
45156: AND
45157: PUSH
45158: LD_VAR 0 3
45162: PPUSH
45163: LD_INT 3
45165: PPUSH
45166: CALL_OW 275
45170: PUSH
45171: LD_VAR 0 4
45175: PUSH
45176: LD_INT 3
45178: ARRAY
45179: GREATEREQUAL
45180: AND
45181: ST_TO_ADDR
// end ;
45182: LD_VAR 0 2
45186: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45187: LD_INT 0
45189: PPUSH
45190: PPUSH
45191: PPUSH
// pom := GetBase ( building ) ;
45192: LD_ADDR_VAR 0 4
45196: PUSH
45197: LD_VAR 0 1
45201: PPUSH
45202: CALL_OW 274
45206: ST_TO_ADDR
// if not pom then
45207: LD_VAR 0 4
45211: NOT
45212: IFFALSE 45216
// exit ;
45214: GO 45317
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45216: LD_ADDR_VAR 0 5
45220: PUSH
45221: LD_VAR 0 2
45225: PPUSH
45226: LD_VAR 0 1
45230: PPUSH
45231: CALL_OW 248
45235: PPUSH
45236: CALL_OW 450
45240: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45241: LD_ADDR_VAR 0 3
45245: PUSH
45246: LD_VAR 0 4
45250: PPUSH
45251: LD_INT 1
45253: PPUSH
45254: CALL_OW 275
45258: PUSH
45259: LD_VAR 0 5
45263: PUSH
45264: LD_INT 1
45266: ARRAY
45267: GREATEREQUAL
45268: PUSH
45269: LD_VAR 0 4
45273: PPUSH
45274: LD_INT 2
45276: PPUSH
45277: CALL_OW 275
45281: PUSH
45282: LD_VAR 0 5
45286: PUSH
45287: LD_INT 2
45289: ARRAY
45290: GREATEREQUAL
45291: AND
45292: PUSH
45293: LD_VAR 0 4
45297: PPUSH
45298: LD_INT 3
45300: PPUSH
45301: CALL_OW 275
45305: PUSH
45306: LD_VAR 0 5
45310: PUSH
45311: LD_INT 3
45313: ARRAY
45314: GREATEREQUAL
45315: AND
45316: ST_TO_ADDR
// end ;
45317: LD_VAR 0 3
45321: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
45322: LD_INT 0
45324: PPUSH
45325: PPUSH
45326: PPUSH
45327: PPUSH
45328: PPUSH
45329: PPUSH
45330: PPUSH
45331: PPUSH
45332: PPUSH
45333: PPUSH
// result := false ;
45334: LD_ADDR_VAR 0 6
45338: PUSH
45339: LD_INT 0
45341: ST_TO_ADDR
// if not base or not btype or not x or not y then
45342: LD_VAR 0 1
45346: NOT
45347: PUSH
45348: LD_VAR 0 2
45352: NOT
45353: OR
45354: PUSH
45355: LD_VAR 0 3
45359: NOT
45360: OR
45361: PUSH
45362: LD_VAR 0 4
45366: NOT
45367: OR
45368: IFFALSE 45372
// exit ;
45370: GO 45981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
45372: LD_ADDR_VAR 0 12
45376: PUSH
45377: LD_VAR 0 2
45381: PPUSH
45382: LD_VAR 0 3
45386: PPUSH
45387: LD_VAR 0 4
45391: PPUSH
45392: LD_VAR 0 5
45396: PPUSH
45397: LD_VAR 0 1
45401: PUSH
45402: LD_INT 1
45404: ARRAY
45405: PPUSH
45406: CALL_OW 248
45410: PPUSH
45411: LD_INT 0
45413: PPUSH
45414: CALL 46818 0 6
45418: ST_TO_ADDR
// if not hexes then
45419: LD_VAR 0 12
45423: NOT
45424: IFFALSE 45428
// exit ;
45426: GO 45981
// for i = 1 to hexes do
45428: LD_ADDR_VAR 0 7
45432: PUSH
45433: DOUBLE
45434: LD_INT 1
45436: DEC
45437: ST_TO_ADDR
45438: LD_VAR 0 12
45442: PUSH
45443: FOR_TO
45444: IFFALSE 45979
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45446: LD_ADDR_VAR 0 11
45450: PUSH
45451: LD_VAR 0 12
45455: PUSH
45456: LD_VAR 0 7
45460: ARRAY
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: PPUSH
45466: LD_VAR 0 12
45470: PUSH
45471: LD_VAR 0 7
45475: ARRAY
45476: PUSH
45477: LD_INT 2
45479: ARRAY
45480: PPUSH
45481: CALL_OW 428
45485: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45486: LD_VAR 0 12
45490: PUSH
45491: LD_VAR 0 7
45495: ARRAY
45496: PUSH
45497: LD_INT 1
45499: ARRAY
45500: PPUSH
45501: LD_VAR 0 12
45505: PUSH
45506: LD_VAR 0 7
45510: ARRAY
45511: PUSH
45512: LD_INT 2
45514: ARRAY
45515: PPUSH
45516: CALL_OW 351
45520: PUSH
45521: LD_VAR 0 12
45525: PUSH
45526: LD_VAR 0 7
45530: ARRAY
45531: PUSH
45532: LD_INT 1
45534: ARRAY
45535: PPUSH
45536: LD_VAR 0 12
45540: PUSH
45541: LD_VAR 0 7
45545: ARRAY
45546: PUSH
45547: LD_INT 2
45549: ARRAY
45550: PPUSH
45551: CALL_OW 488
45555: NOT
45556: OR
45557: PUSH
45558: LD_VAR 0 11
45562: PPUSH
45563: CALL_OW 247
45567: PUSH
45568: LD_INT 3
45570: EQUAL
45571: OR
45572: IFFALSE 45578
// exit ;
45574: POP
45575: POP
45576: GO 45981
// if not tmp or not tmp in base then
45578: LD_VAR 0 11
45582: NOT
45583: PUSH
45584: LD_VAR 0 11
45588: PUSH
45589: LD_VAR 0 1
45593: IN
45594: NOT
45595: OR
45596: IFFALSE 45600
// continue ;
45598: GO 45443
// result := true ;
45600: LD_ADDR_VAR 0 6
45604: PUSH
45605: LD_INT 1
45607: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45608: LD_ADDR_VAR 0 15
45612: PUSH
45613: LD_VAR 0 1
45617: PPUSH
45618: LD_INT 22
45620: PUSH
45621: LD_VAR 0 11
45625: PPUSH
45626: CALL_OW 255
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 30
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 30
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: LIST
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PPUSH
45667: CALL_OW 72
45671: ST_TO_ADDR
// if dep then
45672: LD_VAR 0 15
45676: IFFALSE 45812
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45678: LD_ADDR_VAR 0 14
45682: PUSH
45683: LD_VAR 0 15
45687: PUSH
45688: LD_INT 1
45690: ARRAY
45691: PPUSH
45692: CALL_OW 250
45696: PPUSH
45697: LD_VAR 0 15
45701: PUSH
45702: LD_INT 1
45704: ARRAY
45705: PPUSH
45706: CALL_OW 254
45710: PPUSH
45711: LD_INT 5
45713: PPUSH
45714: CALL_OW 272
45718: PUSH
45719: LD_VAR 0 15
45723: PUSH
45724: LD_INT 1
45726: ARRAY
45727: PPUSH
45728: CALL_OW 251
45732: PPUSH
45733: LD_VAR 0 15
45737: PUSH
45738: LD_INT 1
45740: ARRAY
45741: PPUSH
45742: CALL_OW 254
45746: PPUSH
45747: LD_INT 5
45749: PPUSH
45750: CALL_OW 273
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45759: LD_VAR 0 14
45763: PUSH
45764: LD_INT 1
45766: ARRAY
45767: PPUSH
45768: LD_VAR 0 14
45772: PUSH
45773: LD_INT 2
45775: ARRAY
45776: PPUSH
45777: CALL_OW 488
45781: IFFALSE 45812
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45783: LD_VAR 0 11
45787: PPUSH
45788: LD_VAR 0 14
45792: PUSH
45793: LD_INT 1
45795: ARRAY
45796: PPUSH
45797: LD_VAR 0 14
45801: PUSH
45802: LD_INT 2
45804: ARRAY
45805: PPUSH
45806: CALL_OW 111
// continue ;
45810: GO 45443
// end ; end ; r := GetDir ( tmp ) ;
45812: LD_ADDR_VAR 0 13
45816: PUSH
45817: LD_VAR 0 11
45821: PPUSH
45822: CALL_OW 254
45826: ST_TO_ADDR
// if r = 5 then
45827: LD_VAR 0 13
45831: PUSH
45832: LD_INT 5
45834: EQUAL
45835: IFFALSE 45845
// r := 0 ;
45837: LD_ADDR_VAR 0 13
45841: PUSH
45842: LD_INT 0
45844: ST_TO_ADDR
// for j = r to 5 do
45845: LD_ADDR_VAR 0 8
45849: PUSH
45850: DOUBLE
45851: LD_VAR 0 13
45855: DEC
45856: ST_TO_ADDR
45857: LD_INT 5
45859: PUSH
45860: FOR_TO
45861: IFFALSE 45975
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45863: LD_ADDR_VAR 0 9
45867: PUSH
45868: LD_VAR 0 11
45872: PPUSH
45873: CALL_OW 250
45877: PPUSH
45878: LD_VAR 0 8
45882: PPUSH
45883: LD_INT 2
45885: PPUSH
45886: CALL_OW 272
45890: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45891: LD_ADDR_VAR 0 10
45895: PUSH
45896: LD_VAR 0 11
45900: PPUSH
45901: CALL_OW 251
45905: PPUSH
45906: LD_VAR 0 8
45910: PPUSH
45911: LD_INT 2
45913: PPUSH
45914: CALL_OW 273
45918: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45919: LD_VAR 0 9
45923: PPUSH
45924: LD_VAR 0 10
45928: PPUSH
45929: CALL_OW 488
45933: PUSH
45934: LD_VAR 0 9
45938: PPUSH
45939: LD_VAR 0 10
45943: PPUSH
45944: CALL_OW 428
45948: NOT
45949: AND
45950: IFFALSE 45973
// begin ComMoveXY ( tmp , _x , _y ) ;
45952: LD_VAR 0 11
45956: PPUSH
45957: LD_VAR 0 9
45961: PPUSH
45962: LD_VAR 0 10
45966: PPUSH
45967: CALL_OW 111
// break ;
45971: GO 45975
// end ; end ;
45973: GO 45860
45975: POP
45976: POP
// end ;
45977: GO 45443
45979: POP
45980: POP
// end ;
45981: LD_VAR 0 6
45985: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45986: LD_INT 0
45988: PPUSH
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
// result := false ;
45998: LD_ADDR_VAR 0 6
46002: PUSH
46003: LD_INT 0
46005: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46006: LD_VAR 0 1
46010: NOT
46011: PUSH
46012: LD_VAR 0 1
46016: PPUSH
46017: CALL_OW 266
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: IN
46032: NOT
46033: OR
46034: PUSH
46035: LD_VAR 0 2
46039: NOT
46040: OR
46041: PUSH
46042: LD_VAR 0 5
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: LD_INT 4
46061: PUSH
46062: LD_INT 5
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: IN
46073: NOT
46074: OR
46075: PUSH
46076: LD_VAR 0 3
46080: PPUSH
46081: LD_VAR 0 4
46085: PPUSH
46086: CALL_OW 488
46090: NOT
46091: OR
46092: IFFALSE 46096
// exit ;
46094: GO 46813
// pom := GetBase ( depot ) ;
46096: LD_ADDR_VAR 0 10
46100: PUSH
46101: LD_VAR 0 1
46105: PPUSH
46106: CALL_OW 274
46110: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46111: LD_ADDR_VAR 0 11
46115: PUSH
46116: LD_VAR 0 2
46120: PPUSH
46121: LD_VAR 0 1
46125: PPUSH
46126: CALL_OW 248
46130: PPUSH
46131: CALL_OW 450
46135: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46136: LD_VAR 0 10
46140: PPUSH
46141: LD_INT 1
46143: PPUSH
46144: CALL_OW 275
46148: PUSH
46149: LD_VAR 0 11
46153: PUSH
46154: LD_INT 1
46156: ARRAY
46157: GREATEREQUAL
46158: PUSH
46159: LD_VAR 0 10
46163: PPUSH
46164: LD_INT 2
46166: PPUSH
46167: CALL_OW 275
46171: PUSH
46172: LD_VAR 0 11
46176: PUSH
46177: LD_INT 2
46179: ARRAY
46180: GREATEREQUAL
46181: AND
46182: PUSH
46183: LD_VAR 0 10
46187: PPUSH
46188: LD_INT 3
46190: PPUSH
46191: CALL_OW 275
46195: PUSH
46196: LD_VAR 0 11
46200: PUSH
46201: LD_INT 3
46203: ARRAY
46204: GREATEREQUAL
46205: AND
46206: NOT
46207: IFFALSE 46211
// exit ;
46209: GO 46813
// if GetBType ( depot ) = b_depot then
46211: LD_VAR 0 1
46215: PPUSH
46216: CALL_OW 266
46220: PUSH
46221: LD_INT 0
46223: EQUAL
46224: IFFALSE 46236
// dist := 28 else
46226: LD_ADDR_VAR 0 14
46230: PUSH
46231: LD_INT 28
46233: ST_TO_ADDR
46234: GO 46244
// dist := 36 ;
46236: LD_ADDR_VAR 0 14
46240: PUSH
46241: LD_INT 36
46243: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46244: LD_VAR 0 1
46248: PPUSH
46249: LD_VAR 0 3
46253: PPUSH
46254: LD_VAR 0 4
46258: PPUSH
46259: CALL_OW 297
46263: PUSH
46264: LD_VAR 0 14
46268: GREATER
46269: IFFALSE 46273
// exit ;
46271: GO 46813
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46273: LD_ADDR_VAR 0 12
46277: PUSH
46278: LD_VAR 0 2
46282: PPUSH
46283: LD_VAR 0 3
46287: PPUSH
46288: LD_VAR 0 4
46292: PPUSH
46293: LD_VAR 0 5
46297: PPUSH
46298: LD_VAR 0 1
46302: PPUSH
46303: CALL_OW 248
46307: PPUSH
46308: LD_INT 0
46310: PPUSH
46311: CALL 46818 0 6
46315: ST_TO_ADDR
// if not hexes then
46316: LD_VAR 0 12
46320: NOT
46321: IFFALSE 46325
// exit ;
46323: GO 46813
// hex := GetHexInfo ( x , y ) ;
46325: LD_ADDR_VAR 0 15
46329: PUSH
46330: LD_VAR 0 3
46334: PPUSH
46335: LD_VAR 0 4
46339: PPUSH
46340: CALL_OW 546
46344: ST_TO_ADDR
// if hex [ 1 ] then
46345: LD_VAR 0 15
46349: PUSH
46350: LD_INT 1
46352: ARRAY
46353: IFFALSE 46357
// exit ;
46355: GO 46813
// height := hex [ 2 ] ;
46357: LD_ADDR_VAR 0 13
46361: PUSH
46362: LD_VAR 0 15
46366: PUSH
46367: LD_INT 2
46369: ARRAY
46370: ST_TO_ADDR
// for i = 1 to hexes do
46371: LD_ADDR_VAR 0 7
46375: PUSH
46376: DOUBLE
46377: LD_INT 1
46379: DEC
46380: ST_TO_ADDR
46381: LD_VAR 0 12
46385: PUSH
46386: FOR_TO
46387: IFFALSE 46717
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46389: LD_VAR 0 12
46393: PUSH
46394: LD_VAR 0 7
46398: ARRAY
46399: PUSH
46400: LD_INT 1
46402: ARRAY
46403: PPUSH
46404: LD_VAR 0 12
46408: PUSH
46409: LD_VAR 0 7
46413: ARRAY
46414: PUSH
46415: LD_INT 2
46417: ARRAY
46418: PPUSH
46419: CALL_OW 488
46423: NOT
46424: PUSH
46425: LD_VAR 0 12
46429: PUSH
46430: LD_VAR 0 7
46434: ARRAY
46435: PUSH
46436: LD_INT 1
46438: ARRAY
46439: PPUSH
46440: LD_VAR 0 12
46444: PUSH
46445: LD_VAR 0 7
46449: ARRAY
46450: PUSH
46451: LD_INT 2
46453: ARRAY
46454: PPUSH
46455: CALL_OW 428
46459: PUSH
46460: LD_INT 0
46462: GREATER
46463: OR
46464: PUSH
46465: LD_VAR 0 12
46469: PUSH
46470: LD_VAR 0 7
46474: ARRAY
46475: PUSH
46476: LD_INT 1
46478: ARRAY
46479: PPUSH
46480: LD_VAR 0 12
46484: PUSH
46485: LD_VAR 0 7
46489: ARRAY
46490: PUSH
46491: LD_INT 2
46493: ARRAY
46494: PPUSH
46495: CALL_OW 351
46499: OR
46500: IFFALSE 46506
// exit ;
46502: POP
46503: POP
46504: GO 46813
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46506: LD_ADDR_VAR 0 8
46510: PUSH
46511: LD_VAR 0 12
46515: PUSH
46516: LD_VAR 0 7
46520: ARRAY
46521: PUSH
46522: LD_INT 1
46524: ARRAY
46525: PPUSH
46526: LD_VAR 0 12
46530: PUSH
46531: LD_VAR 0 7
46535: ARRAY
46536: PUSH
46537: LD_INT 2
46539: ARRAY
46540: PPUSH
46541: CALL_OW 546
46545: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46546: LD_VAR 0 8
46550: PUSH
46551: LD_INT 1
46553: ARRAY
46554: PUSH
46555: LD_VAR 0 8
46559: PUSH
46560: LD_INT 2
46562: ARRAY
46563: PUSH
46564: LD_VAR 0 13
46568: PUSH
46569: LD_INT 2
46571: PLUS
46572: GREATER
46573: OR
46574: PUSH
46575: LD_VAR 0 8
46579: PUSH
46580: LD_INT 2
46582: ARRAY
46583: PUSH
46584: LD_VAR 0 13
46588: PUSH
46589: LD_INT 2
46591: MINUS
46592: LESS
46593: OR
46594: PUSH
46595: LD_VAR 0 8
46599: PUSH
46600: LD_INT 3
46602: ARRAY
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 8
46609: PUSH
46610: LD_INT 9
46612: PUSH
46613: LD_INT 10
46615: PUSH
46616: LD_INT 11
46618: PUSH
46619: LD_INT 12
46621: PUSH
46622: LD_INT 13
46624: PUSH
46625: LD_INT 16
46627: PUSH
46628: LD_INT 17
46630: PUSH
46631: LD_INT 18
46633: PUSH
46634: LD_INT 19
46636: PUSH
46637: LD_INT 20
46639: PUSH
46640: LD_INT 21
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: IN
46658: NOT
46659: OR
46660: PUSH
46661: LD_VAR 0 8
46665: PUSH
46666: LD_INT 5
46668: ARRAY
46669: NOT
46670: OR
46671: PUSH
46672: LD_VAR 0 8
46676: PUSH
46677: LD_INT 6
46679: ARRAY
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 7
46689: PUSH
46690: LD_INT 9
46692: PUSH
46693: LD_INT 10
46695: PUSH
46696: LD_INT 11
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: IN
46707: NOT
46708: OR
46709: IFFALSE 46715
// exit ;
46711: POP
46712: POP
46713: GO 46813
// end ;
46715: GO 46386
46717: POP
46718: POP
// side := GetSide ( depot ) ;
46719: LD_ADDR_VAR 0 9
46723: PUSH
46724: LD_VAR 0 1
46728: PPUSH
46729: CALL_OW 255
46733: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46734: LD_VAR 0 9
46738: PPUSH
46739: LD_VAR 0 3
46743: PPUSH
46744: LD_VAR 0 4
46748: PPUSH
46749: LD_INT 20
46751: PPUSH
46752: CALL 39467 0 4
46756: PUSH
46757: LD_INT 4
46759: ARRAY
46760: IFFALSE 46764
// exit ;
46762: GO 46813
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46764: LD_VAR 0 2
46768: PUSH
46769: LD_INT 29
46771: PUSH
46772: LD_INT 30
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: IN
46779: PUSH
46780: LD_VAR 0 3
46784: PPUSH
46785: LD_VAR 0 4
46789: PPUSH
46790: LD_VAR 0 9
46794: PPUSH
46795: CALL_OW 440
46799: NOT
46800: AND
46801: IFFALSE 46805
// exit ;
46803: GO 46813
// result := true ;
46805: LD_ADDR_VAR 0 6
46809: PUSH
46810: LD_INT 1
46812: ST_TO_ADDR
// end ;
46813: LD_VAR 0 6
46817: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46818: LD_INT 0
46820: PPUSH
46821: PPUSH
46822: PPUSH
46823: PPUSH
46824: PPUSH
46825: PPUSH
46826: PPUSH
46827: PPUSH
46828: PPUSH
46829: PPUSH
46830: PPUSH
46831: PPUSH
46832: PPUSH
46833: PPUSH
46834: PPUSH
46835: PPUSH
46836: PPUSH
46837: PPUSH
46838: PPUSH
46839: PPUSH
46840: PPUSH
46841: PPUSH
46842: PPUSH
46843: PPUSH
46844: PPUSH
46845: PPUSH
46846: PPUSH
46847: PPUSH
46848: PPUSH
46849: PPUSH
46850: PPUSH
46851: PPUSH
46852: PPUSH
46853: PPUSH
46854: PPUSH
46855: PPUSH
46856: PPUSH
46857: PPUSH
46858: PPUSH
46859: PPUSH
46860: PPUSH
46861: PPUSH
46862: PPUSH
46863: PPUSH
46864: PPUSH
46865: PPUSH
46866: PPUSH
46867: PPUSH
46868: PPUSH
46869: PPUSH
46870: PPUSH
46871: PPUSH
46872: PPUSH
46873: PPUSH
46874: PPUSH
46875: PPUSH
46876: PPUSH
46877: PPUSH
// result = [ ] ;
46878: LD_ADDR_VAR 0 7
46882: PUSH
46883: EMPTY
46884: ST_TO_ADDR
// temp_list = [ ] ;
46885: LD_ADDR_VAR 0 9
46889: PUSH
46890: EMPTY
46891: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46892: LD_VAR 0 4
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: LD_INT 4
46911: PUSH
46912: LD_INT 5
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: IN
46923: NOT
46924: PUSH
46925: LD_VAR 0 1
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: IN
46940: PUSH
46941: LD_VAR 0 5
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 3
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: IN
46960: NOT
46961: AND
46962: OR
46963: IFFALSE 46967
// exit ;
46965: GO 65358
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46967: LD_VAR 0 1
46971: PUSH
46972: LD_INT 6
46974: PUSH
46975: LD_INT 7
46977: PUSH
46978: LD_INT 8
46980: PUSH
46981: LD_INT 13
46983: PUSH
46984: LD_INT 12
46986: PUSH
46987: LD_INT 15
46989: PUSH
46990: LD_INT 11
46992: PUSH
46993: LD_INT 14
46995: PUSH
46996: LD_INT 10
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: IN
47010: IFFALSE 47020
// btype = b_lab ;
47012: LD_ADDR_VAR 0 1
47016: PUSH
47017: LD_INT 6
47019: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47020: LD_VAR 0 6
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: IN
47039: NOT
47040: PUSH
47041: LD_VAR 0 1
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: LD_INT 6
47060: PUSH
47061: LD_INT 36
47063: PUSH
47064: LD_INT 4
47066: PUSH
47067: LD_INT 5
47069: PUSH
47070: LD_INT 31
47072: PUSH
47073: LD_INT 32
47075: PUSH
47076: LD_INT 33
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: IN
47092: NOT
47093: PUSH
47094: LD_VAR 0 6
47098: PUSH
47099: LD_INT 1
47101: EQUAL
47102: AND
47103: OR
47104: PUSH
47105: LD_VAR 0 1
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 3
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: IN
47120: NOT
47121: PUSH
47122: LD_VAR 0 6
47126: PUSH
47127: LD_INT 2
47129: EQUAL
47130: AND
47131: OR
47132: IFFALSE 47142
// mode = 0 ;
47134: LD_ADDR_VAR 0 6
47138: PUSH
47139: LD_INT 0
47141: ST_TO_ADDR
// case mode of 0 :
47142: LD_VAR 0 6
47146: PUSH
47147: LD_INT 0
47149: DOUBLE
47150: EQUAL
47151: IFTRUE 47155
47153: GO 58608
47155: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47156: LD_ADDR_VAR 0 11
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47349: LD_ADDR_VAR 0 12
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 3
47517: NEG
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47545: LD_ADDR_VAR 0 13
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: NEG
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47744: LD_ADDR_VAR 0 14
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 3
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 3
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47940: LD_ADDR_VAR 0 15
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48133: LD_ADDR_VAR 0 16
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: LD_INT 3
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48326: LD_ADDR_VAR 0 17
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48556: LD_ADDR_VAR 0 18
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48786: LD_ADDR_VAR 0 19
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49016: LD_ADDR_VAR 0 20
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49246: LD_ADDR_VAR 0 21
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49476: LD_ADDR_VAR 0 22
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49706: LD_ADDR_VAR 0 23
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 3
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49986: LD_ADDR_VAR 0 24
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 2
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50262: LD_ADDR_VAR 0 25
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 2
50438: NEG
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 3
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50536: LD_ADDR_VAR 0 26
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50812: LD_ADDR_VAR 0 27
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: NEG
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: LD_INT 2
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51092: LD_ADDR_VAR 0 28
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 3
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51374: LD_ADDR_VAR 0 29
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 3
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 3
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51653: LD_ADDR_VAR 0 30
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 3
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 3
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 3
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51931: LD_ADDR_VAR 0 31
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52209: LD_ADDR_VAR 0 32
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 3
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 3
52452: NEG
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52487: LD_ADDR_VAR 0 33
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: LD_INT 3
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 3
52731: NEG
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52766: LD_ADDR_VAR 0 34
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 3
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 3
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: LD_INT 3
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 3
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53046: LD_ADDR_VAR 0 35
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53158: LD_ADDR_VAR 0 36
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53270: LD_ADDR_VAR 0 37
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53382: LD_ADDR_VAR 0 38
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53494: LD_ADDR_VAR 0 39
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53606: LD_ADDR_VAR 0 40
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53718: LD_ADDR_VAR 0 41
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: LD_INT 3
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 3
53992: NEG
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: NEG
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 3
54027: NEG
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54068: LD_ADDR_VAR 0 42
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 3
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 3
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 2
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 3
54365: NEG
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 3
54377: NEG
54378: PUSH
54379: LD_INT 3
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54418: LD_ADDR_VAR 0 43
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 3
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 3
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 3
54714: NEG
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54766: LD_ADDR_VAR 0 44
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: LD_INT 3
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 3
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 3
55009: PUSH
55010: LD_INT 3
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 3
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 3
55040: NEG
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: LD_INT 3
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55116: LD_ADDR_VAR 0 45
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 3
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 3
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55466: LD_ADDR_VAR 0 46
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 3
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 3
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 3
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55814: LD_ADDR_VAR 0 47
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55965: LD_ADDR_VAR 0 48
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56112: LD_ADDR_VAR 0 49
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56256: LD_ADDR_VAR 0 50
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56400: LD_ADDR_VAR 0 51
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56547: LD_ADDR_VAR 0 52
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56698: LD_ADDR_VAR 0 53
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56928: LD_ADDR_VAR 0 54
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 2
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57158: LD_ADDR_VAR 0 55
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57388: LD_ADDR_VAR 0 56
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57618: LD_ADDR_VAR 0 57
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57848: LD_ADDR_VAR 0 58
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58078: LD_ADDR_VAR 0 59
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58166: LD_ADDR_VAR 0 60
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58254: LD_ADDR_VAR 0 61
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58342: LD_ADDR_VAR 0 62
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58430: LD_ADDR_VAR 0 63
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58518: LD_ADDR_VAR 0 64
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: ST_TO_ADDR
// end ; 1 :
58606: GO 64503
58608: LD_INT 1
58610: DOUBLE
58611: EQUAL
58612: IFTRUE 58616
58614: GO 61239
58616: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58617: LD_ADDR_VAR 0 11
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58661: LD_ADDR_VAR 0 12
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58702: LD_ADDR_VAR 0 13
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: LD_INT 3
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58742: LD_ADDR_VAR 0 14
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: LD_INT 3
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 3
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58783: LD_ADDR_VAR 0 15
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: LIST
58826: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58827: LD_ADDR_VAR 0 16
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 3
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58873: LD_ADDR_VAR 0 17
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 3
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58917: LD_ADDR_VAR 0 18
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 3
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58958: LD_ADDR_VAR 0 19
58962: PUSH
58963: LD_INT 3
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: LD_INT 3
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: LIST
58997: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58998: LD_ADDR_VAR 0 20
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59039: LD_ADDR_VAR 0 21
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 3
59057: NEG
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: LIST
59082: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59083: LD_ADDR_VAR 0 22
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: LD_INT 3
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59129: LD_ADDR_VAR 0 23
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 3
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 4
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: LIST
59172: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59173: LD_ADDR_VAR 0 24
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 4
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59214: LD_ADDR_VAR 0 25
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 4
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: LD_INT 4
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: LIST
59253: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59254: LD_ADDR_VAR 0 26
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: LD_INT 4
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: LIST
59294: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59295: LD_ADDR_VAR 0 27
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: NEG
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 4
59324: NEG
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59339: LD_ADDR_VAR 0 28
59343: PUSH
59344: LD_INT 3
59346: NEG
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 3
59358: NEG
59359: PUSH
59360: LD_INT 4
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 4
59370: NEG
59371: PUSH
59372: LD_INT 3
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59385: LD_ADDR_VAR 0 29
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 4
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 4
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 3
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 5
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 5
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 4
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: LD_INT 6
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 6
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: LD_INT 5
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59540: LD_ADDR_VAR 0 30
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 3
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 4
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 4
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 5
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 5
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 5
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 6
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 6
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59683: LD_ADDR_VAR 0 31
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 4
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: LD_INT 4
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: LD_INT 4
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 5
59750: PUSH
59751: LD_INT 4
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 5
59760: PUSH
59761: LD_INT 5
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: LD_INT 5
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 6
59780: PUSH
59781: LD_INT 5
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 6
59790: PUSH
59791: LD_INT 6
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 5
59800: PUSH
59801: LD_INT 6
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59822: LD_ADDR_VAR 0 32
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: LD_INT 3
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: LD_INT 4
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 4
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 5
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 5
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 4
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: LD_INT 6
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 6
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 5
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59965: LD_ADDR_VAR 0 33
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: NEG
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 4
60028: NEG
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 4
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 5
60051: NEG
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 5
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 5
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 6
60085: NEG
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 6
60096: NEG
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60120: LD_ADDR_VAR 0 34
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 3
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 3
60151: NEG
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: NEG
60164: PUSH
60165: LD_INT 4
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 4
60175: NEG
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 4
60187: NEG
60188: PUSH
60189: LD_INT 4
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 4
60199: NEG
60200: PUSH
60201: LD_INT 5
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 5
60211: NEG
60212: PUSH
60213: LD_INT 4
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 5
60223: NEG
60224: PUSH
60225: LD_INT 5
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 5
60235: NEG
60236: PUSH
60237: LD_INT 6
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 6
60247: NEG
60248: PUSH
60249: LD_INT 5
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 6
60259: NEG
60260: PUSH
60261: LD_INT 6
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60283: LD_ADDR_VAR 0 41
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: LIST
60326: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60327: LD_ADDR_VAR 0 42
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 3
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60368: LD_ADDR_VAR 0 43
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 2
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: PUSH
60396: LD_INT 3
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60408: LD_ADDR_VAR 0 44
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 2
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 3
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: LD_INT 2
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60449: LD_ADDR_VAR 0 45
60453: PUSH
60454: LD_INT 2
60456: NEG
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 2
60467: NEG
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: NEG
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: LIST
60492: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60493: LD_ADDR_VAR 0 46
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: LD_INT 3
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60539: LD_ADDR_VAR 0 47
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 3
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60572: LD_ADDR_VAR 0 48
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60603: LD_ADDR_VAR 0 49
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60632: LD_ADDR_VAR 0 50
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 3
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 3
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60661: LD_ADDR_VAR 0 51
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60692: LD_ADDR_VAR 0 52
60696: PUSH
60697: LD_INT 3
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 3
60711: NEG
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60725: LD_ADDR_VAR 0 53
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: LIST
60768: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60769: LD_ADDR_VAR 0 54
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60810: LD_ADDR_VAR 0 55
60814: PUSH
60815: LD_INT 3
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60850: LD_ADDR_VAR 0 56
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 3
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 3
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: LIST
60890: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60891: LD_ADDR_VAR 0 57
60895: PUSH
60896: LD_INT 2
60898: NEG
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: NEG
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: LIST
60934: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60935: LD_ADDR_VAR 0 58
60939: PUSH
60940: LD_INT 2
60942: NEG
60943: PUSH
60944: LD_INT 3
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: LD_INT 3
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: LIST
60980: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60981: LD_ADDR_VAR 0 59
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 2
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: LIST
61024: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61025: LD_ADDR_VAR 0 60
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: LIST
61065: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61066: LD_ADDR_VAR 0 61
61070: PUSH
61071: LD_INT 2
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61106: LD_ADDR_VAR 0 62
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61147: LD_ADDR_VAR 0 63
61151: PUSH
61152: LD_INT 1
61154: NEG
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: NEG
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61191: LD_ADDR_VAR 0 64
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: LD_INT 2
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: LIST
61236: ST_TO_ADDR
// end ; 2 :
61237: GO 64503
61239: LD_INT 2
61241: DOUBLE
61242: EQUAL
61243: IFTRUE 61247
61245: GO 64502
61247: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61248: LD_ADDR_VAR 0 29
61252: PUSH
61253: LD_INT 4
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 4
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 5
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 5
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 3
61327: PUSH
61328: LD_INT 2
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 5
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 3
61348: PUSH
61349: LD_INT 3
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 4
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 4
61378: PUSH
61379: LD_INT 4
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: LD_INT 4
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 4
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: LD_INT 4
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 4
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 3
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 4
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: LD_INT 5
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 5
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: LD_INT 4
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 3
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: LD_INT 5
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 3
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 3
61531: NEG
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 3
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 3
61576: NEG
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 4
61587: NEG
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 4
61598: NEG
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 4
61610: NEG
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 4
61633: NEG
61634: PUSH
61635: LD_INT 4
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 4
61645: NEG
61646: PUSH
61647: LD_INT 5
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: LD_INT 4
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 4
61681: NEG
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 5
61693: NEG
61694: PUSH
61695: LD_INT 4
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 5
61705: NEG
61706: PUSH
61707: LD_INT 5
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 3
61717: NEG
61718: PUSH
61719: LD_INT 5
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 5
61729: NEG
61730: PUSH
61731: LD_INT 3
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61786: LD_ADDR_VAR 0 30
61790: PUSH
61791: LD_INT 4
61793: PUSH
61794: LD_INT 4
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 4
61803: PUSH
61804: LD_INT 3
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 5
61813: PUSH
61814: LD_INT 4
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 5
61823: PUSH
61824: LD_INT 5
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 4
61833: PUSH
61834: LD_INT 5
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 3
61843: PUSH
61844: LD_INT 4
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 5
61863: PUSH
61864: LD_INT 3
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 3
61873: PUSH
61874: LD_INT 5
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 3
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: LD_INT 3
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: LD_INT 4
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 4
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 4
61976: NEG
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 4
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: NEG
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 4
62021: NEG
62022: PUSH
62023: LD_INT 1
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 5
62032: NEG
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 5
62043: NEG
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 5
62055: NEG
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 3
62067: NEG
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 3
62078: NEG
62079: PUSH
62080: LD_INT 3
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 3
62090: NEG
62091: PUSH
62092: LD_INT 4
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: LD_INT 3
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 4
62138: NEG
62139: PUSH
62140: LD_INT 3
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 4
62150: NEG
62151: PUSH
62152: LD_INT 4
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: LD_INT 4
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 4
62174: NEG
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 4
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 5
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: LD_INT 4
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 3
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: LD_INT 4
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: LD_INT 5
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: LD_INT 5
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62333: LD_ADDR_VAR 0 31
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 4
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 3
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 4
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: LD_INT 5
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: LD_INT 5
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 4
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: LD_INT 5
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 3
62433: NEG
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 3
62478: NEG
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 4
62489: NEG
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 4
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 4
62512: NEG
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: NEG
62525: PUSH
62526: LD_INT 2
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 4
62535: NEG
62536: PUSH
62537: LD_INT 4
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 4
62547: NEG
62548: PUSH
62549: LD_INT 5
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: LD_INT 4
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 3
62571: NEG
62572: PUSH
62573: LD_INT 3
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 4
62583: NEG
62584: PUSH
62585: LD_INT 3
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 5
62595: NEG
62596: PUSH
62597: LD_INT 4
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 5
62607: NEG
62608: PUSH
62609: LD_INT 5
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 3
62619: NEG
62620: PUSH
62621: LD_INT 5
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 5
62631: NEG
62632: PUSH
62633: LD_INT 3
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 3
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 4
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 3
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: LD_INT 3
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 4
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: LD_INT 4
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 4
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 4
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 5
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 5
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 4
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 3
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 5
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62883: LD_ADDR_VAR 0 32
62887: PUSH
62888: LD_INT 4
62890: NEG
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 4
62901: NEG
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 3
62924: NEG
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 4
62935: NEG
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 5
62946: NEG
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 5
62957: NEG
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 5
62969: NEG
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 3
62981: NEG
62982: PUSH
62983: LD_INT 2
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 3
62992: NEG
62993: PUSH
62994: LD_INT 3
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 3
63004: NEG
63005: PUSH
63006: LD_INT 4
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 2
63016: NEG
63017: PUSH
63018: LD_INT 3
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 3
63040: NEG
63041: PUSH
63042: LD_INT 2
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 4
63052: NEG
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 4
63064: NEG
63065: PUSH
63066: LD_INT 4
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 2
63076: NEG
63077: PUSH
63078: LD_INT 4
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 4
63088: NEG
63089: PUSH
63090: LD_INT 2
63092: NEG
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 4
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 5
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: LD_INT 4
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 3
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: LD_INT 4
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: LD_INT 5
63171: NEG
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 2
63190: NEG
63191: PUSH
63192: LD_INT 5
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 3
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 3
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 4
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 4
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 3
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 2
63274: PUSH
63275: LD_INT 2
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 4
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 4
63295: PUSH
63296: LD_INT 4
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 4
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 5
63315: PUSH
63316: LD_INT 4
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 5
63325: PUSH
63326: LD_INT 5
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 4
63335: PUSH
63336: LD_INT 5
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: LD_INT 4
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 3
63355: PUSH
63356: LD_INT 3
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 5
63365: PUSH
63366: LD_INT 3
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 3
63375: PUSH
63376: LD_INT 5
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63430: LD_ADDR_VAR 0 33
63434: PUSH
63435: LD_INT 4
63437: NEG
63438: PUSH
63439: LD_INT 4
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 4
63449: NEG
63450: PUSH
63451: LD_INT 5
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 3
63461: NEG
63462: PUSH
63463: LD_INT 4
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 3
63473: NEG
63474: PUSH
63475: LD_INT 3
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 4
63485: NEG
63486: PUSH
63487: LD_INT 3
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 5
63497: NEG
63498: PUSH
63499: LD_INT 4
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 5
63509: NEG
63510: PUSH
63511: LD_INT 5
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 3
63521: NEG
63522: PUSH
63523: LD_INT 5
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 5
63533: NEG
63534: PUSH
63535: LD_INT 3
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 3
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 4
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: LD_INT 3
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 2
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: LD_INT 3
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: LD_INT 4
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: LD_INT 2
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 2
63635: NEG
63636: PUSH
63637: LD_INT 4
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 4
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 4
63657: PUSH
63658: LD_INT 1
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 5
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 5
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 4
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 3
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 3
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 3
63719: PUSH
63720: LD_INT 2
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 5
63730: PUSH
63731: LD_INT 2
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 3
63740: PUSH
63741: LD_INT 3
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 3
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 4
63760: PUSH
63761: LD_INT 3
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 4
63770: PUSH
63771: LD_INT 4
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 3
63780: PUSH
63781: LD_INT 4
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: LD_INT 3
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 4
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 2
63820: PUSH
63821: LD_INT 4
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 4
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: LD_INT 3
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: LD_INT 4
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: LD_INT 5
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: LD_INT 5
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: LD_INT 4
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: PUSH
63903: LD_INT 5
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: LD_INT 3
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63968: LD_ADDR_VAR 0 34
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 4
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: LD_INT 5
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: LD_INT 4
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: LD_INT 3
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 3
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: LD_INT 4
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: LD_INT 5
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: PUSH
64055: LD_INT 3
64057: NEG
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 2
64065: NEG
64066: PUSH
64067: LD_INT 5
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 3
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 3
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 4
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 4
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 3
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: LD_INT 1
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 4
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 4
64170: PUSH
64171: LD_INT 4
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 4
64180: PUSH
64181: LD_INT 3
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 5
64190: PUSH
64191: LD_INT 4
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 5
64200: PUSH
64201: LD_INT 5
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 4
64210: PUSH
64211: LD_INT 5
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: LD_INT 4
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 3
64230: PUSH
64231: LD_INT 3
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 5
64240: PUSH
64241: LD_INT 3
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 3
64250: PUSH
64251: LD_INT 5
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 3
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: LD_INT 3
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: LD_INT 4
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: LD_INT 4
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: LD_INT 3
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: LD_INT 2
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 4
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: NEG
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 4
64353: NEG
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 4
64364: NEG
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 3
64376: NEG
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 3
64387: NEG
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 4
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 5
64409: NEG
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 5
64420: NEG
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 5
64432: NEG
64433: PUSH
64434: LD_INT 2
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 3
64444: NEG
64445: PUSH
64446: LD_INT 2
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: ST_TO_ADDR
// end ; end ;
64500: GO 64503
64502: POP
// case btype of b_depot , b_warehouse :
64503: LD_VAR 0 1
64507: PUSH
64508: LD_INT 0
64510: DOUBLE
64511: EQUAL
64512: IFTRUE 64522
64514: LD_INT 1
64516: DOUBLE
64517: EQUAL
64518: IFTRUE 64522
64520: GO 64723
64522: POP
// case nation of nation_american :
64523: LD_VAR 0 5
64527: PUSH
64528: LD_INT 1
64530: DOUBLE
64531: EQUAL
64532: IFTRUE 64536
64534: GO 64592
64536: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64537: LD_ADDR_VAR 0 9
64541: PUSH
64542: LD_VAR 0 11
64546: PUSH
64547: LD_VAR 0 12
64551: PUSH
64552: LD_VAR 0 13
64556: PUSH
64557: LD_VAR 0 14
64561: PUSH
64562: LD_VAR 0 15
64566: PUSH
64567: LD_VAR 0 16
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: PUSH
64580: LD_VAR 0 4
64584: PUSH
64585: LD_INT 1
64587: PLUS
64588: ARRAY
64589: ST_TO_ADDR
64590: GO 64721
64592: LD_INT 2
64594: DOUBLE
64595: EQUAL
64596: IFTRUE 64600
64598: GO 64656
64600: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64601: LD_ADDR_VAR 0 9
64605: PUSH
64606: LD_VAR 0 17
64610: PUSH
64611: LD_VAR 0 18
64615: PUSH
64616: LD_VAR 0 19
64620: PUSH
64621: LD_VAR 0 20
64625: PUSH
64626: LD_VAR 0 21
64630: PUSH
64631: LD_VAR 0 22
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: PUSH
64644: LD_VAR 0 4
64648: PUSH
64649: LD_INT 1
64651: PLUS
64652: ARRAY
64653: ST_TO_ADDR
64654: GO 64721
64656: LD_INT 3
64658: DOUBLE
64659: EQUAL
64660: IFTRUE 64664
64662: GO 64720
64664: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64665: LD_ADDR_VAR 0 9
64669: PUSH
64670: LD_VAR 0 23
64674: PUSH
64675: LD_VAR 0 24
64679: PUSH
64680: LD_VAR 0 25
64684: PUSH
64685: LD_VAR 0 26
64689: PUSH
64690: LD_VAR 0 27
64694: PUSH
64695: LD_VAR 0 28
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: PUSH
64708: LD_VAR 0 4
64712: PUSH
64713: LD_INT 1
64715: PLUS
64716: ARRAY
64717: ST_TO_ADDR
64718: GO 64721
64720: POP
64721: GO 65276
64723: LD_INT 2
64725: DOUBLE
64726: EQUAL
64727: IFTRUE 64737
64729: LD_INT 3
64731: DOUBLE
64732: EQUAL
64733: IFTRUE 64737
64735: GO 64793
64737: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64738: LD_ADDR_VAR 0 9
64742: PUSH
64743: LD_VAR 0 29
64747: PUSH
64748: LD_VAR 0 30
64752: PUSH
64753: LD_VAR 0 31
64757: PUSH
64758: LD_VAR 0 32
64762: PUSH
64763: LD_VAR 0 33
64767: PUSH
64768: LD_VAR 0 34
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: PUSH
64781: LD_VAR 0 4
64785: PUSH
64786: LD_INT 1
64788: PLUS
64789: ARRAY
64790: ST_TO_ADDR
64791: GO 65276
64793: LD_INT 16
64795: DOUBLE
64796: EQUAL
64797: IFTRUE 64855
64799: LD_INT 17
64801: DOUBLE
64802: EQUAL
64803: IFTRUE 64855
64805: LD_INT 18
64807: DOUBLE
64808: EQUAL
64809: IFTRUE 64855
64811: LD_INT 19
64813: DOUBLE
64814: EQUAL
64815: IFTRUE 64855
64817: LD_INT 22
64819: DOUBLE
64820: EQUAL
64821: IFTRUE 64855
64823: LD_INT 20
64825: DOUBLE
64826: EQUAL
64827: IFTRUE 64855
64829: LD_INT 21
64831: DOUBLE
64832: EQUAL
64833: IFTRUE 64855
64835: LD_INT 23
64837: DOUBLE
64838: EQUAL
64839: IFTRUE 64855
64841: LD_INT 24
64843: DOUBLE
64844: EQUAL
64845: IFTRUE 64855
64847: LD_INT 25
64849: DOUBLE
64850: EQUAL
64851: IFTRUE 64855
64853: GO 64911
64855: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64856: LD_ADDR_VAR 0 9
64860: PUSH
64861: LD_VAR 0 35
64865: PUSH
64866: LD_VAR 0 36
64870: PUSH
64871: LD_VAR 0 37
64875: PUSH
64876: LD_VAR 0 38
64880: PUSH
64881: LD_VAR 0 39
64885: PUSH
64886: LD_VAR 0 40
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: PUSH
64899: LD_VAR 0 4
64903: PUSH
64904: LD_INT 1
64906: PLUS
64907: ARRAY
64908: ST_TO_ADDR
64909: GO 65276
64911: LD_INT 6
64913: DOUBLE
64914: EQUAL
64915: IFTRUE 64967
64917: LD_INT 7
64919: DOUBLE
64920: EQUAL
64921: IFTRUE 64967
64923: LD_INT 8
64925: DOUBLE
64926: EQUAL
64927: IFTRUE 64967
64929: LD_INT 13
64931: DOUBLE
64932: EQUAL
64933: IFTRUE 64967
64935: LD_INT 12
64937: DOUBLE
64938: EQUAL
64939: IFTRUE 64967
64941: LD_INT 15
64943: DOUBLE
64944: EQUAL
64945: IFTRUE 64967
64947: LD_INT 11
64949: DOUBLE
64950: EQUAL
64951: IFTRUE 64967
64953: LD_INT 14
64955: DOUBLE
64956: EQUAL
64957: IFTRUE 64967
64959: LD_INT 10
64961: DOUBLE
64962: EQUAL
64963: IFTRUE 64967
64965: GO 65023
64967: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64968: LD_ADDR_VAR 0 9
64972: PUSH
64973: LD_VAR 0 41
64977: PUSH
64978: LD_VAR 0 42
64982: PUSH
64983: LD_VAR 0 43
64987: PUSH
64988: LD_VAR 0 44
64992: PUSH
64993: LD_VAR 0 45
64997: PUSH
64998: LD_VAR 0 46
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: PUSH
65011: LD_VAR 0 4
65015: PUSH
65016: LD_INT 1
65018: PLUS
65019: ARRAY
65020: ST_TO_ADDR
65021: GO 65276
65023: LD_INT 36
65025: DOUBLE
65026: EQUAL
65027: IFTRUE 65031
65029: GO 65087
65031: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65032: LD_ADDR_VAR 0 9
65036: PUSH
65037: LD_VAR 0 47
65041: PUSH
65042: LD_VAR 0 48
65046: PUSH
65047: LD_VAR 0 49
65051: PUSH
65052: LD_VAR 0 50
65056: PUSH
65057: LD_VAR 0 51
65061: PUSH
65062: LD_VAR 0 52
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: PUSH
65075: LD_VAR 0 4
65079: PUSH
65080: LD_INT 1
65082: PLUS
65083: ARRAY
65084: ST_TO_ADDR
65085: GO 65276
65087: LD_INT 4
65089: DOUBLE
65090: EQUAL
65091: IFTRUE 65113
65093: LD_INT 5
65095: DOUBLE
65096: EQUAL
65097: IFTRUE 65113
65099: LD_INT 34
65101: DOUBLE
65102: EQUAL
65103: IFTRUE 65113
65105: LD_INT 37
65107: DOUBLE
65108: EQUAL
65109: IFTRUE 65113
65111: GO 65169
65113: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65114: LD_ADDR_VAR 0 9
65118: PUSH
65119: LD_VAR 0 53
65123: PUSH
65124: LD_VAR 0 54
65128: PUSH
65129: LD_VAR 0 55
65133: PUSH
65134: LD_VAR 0 56
65138: PUSH
65139: LD_VAR 0 57
65143: PUSH
65144: LD_VAR 0 58
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: PUSH
65157: LD_VAR 0 4
65161: PUSH
65162: LD_INT 1
65164: PLUS
65165: ARRAY
65166: ST_TO_ADDR
65167: GO 65276
65169: LD_INT 31
65171: DOUBLE
65172: EQUAL
65173: IFTRUE 65219
65175: LD_INT 32
65177: DOUBLE
65178: EQUAL
65179: IFTRUE 65219
65181: LD_INT 33
65183: DOUBLE
65184: EQUAL
65185: IFTRUE 65219
65187: LD_INT 27
65189: DOUBLE
65190: EQUAL
65191: IFTRUE 65219
65193: LD_INT 26
65195: DOUBLE
65196: EQUAL
65197: IFTRUE 65219
65199: LD_INT 28
65201: DOUBLE
65202: EQUAL
65203: IFTRUE 65219
65205: LD_INT 29
65207: DOUBLE
65208: EQUAL
65209: IFTRUE 65219
65211: LD_INT 30
65213: DOUBLE
65214: EQUAL
65215: IFTRUE 65219
65217: GO 65275
65219: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65220: LD_ADDR_VAR 0 9
65224: PUSH
65225: LD_VAR 0 59
65229: PUSH
65230: LD_VAR 0 60
65234: PUSH
65235: LD_VAR 0 61
65239: PUSH
65240: LD_VAR 0 62
65244: PUSH
65245: LD_VAR 0 63
65249: PUSH
65250: LD_VAR 0 64
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: PUSH
65263: LD_VAR 0 4
65267: PUSH
65268: LD_INT 1
65270: PLUS
65271: ARRAY
65272: ST_TO_ADDR
65273: GO 65276
65275: POP
// temp_list2 = [ ] ;
65276: LD_ADDR_VAR 0 10
65280: PUSH
65281: EMPTY
65282: ST_TO_ADDR
// for i in temp_list do
65283: LD_ADDR_VAR 0 8
65287: PUSH
65288: LD_VAR 0 9
65292: PUSH
65293: FOR_IN
65294: IFFALSE 65346
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65296: LD_ADDR_VAR 0 10
65300: PUSH
65301: LD_VAR 0 10
65305: PUSH
65306: LD_VAR 0 8
65310: PUSH
65311: LD_INT 1
65313: ARRAY
65314: PUSH
65315: LD_VAR 0 2
65319: PLUS
65320: PUSH
65321: LD_VAR 0 8
65325: PUSH
65326: LD_INT 2
65328: ARRAY
65329: PUSH
65330: LD_VAR 0 3
65334: PLUS
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: EMPTY
65341: LIST
65342: ADD
65343: ST_TO_ADDR
65344: GO 65293
65346: POP
65347: POP
// result = temp_list2 ;
65348: LD_ADDR_VAR 0 7
65352: PUSH
65353: LD_VAR 0 10
65357: ST_TO_ADDR
// end ;
65358: LD_VAR 0 7
65362: RET
// export function EnemyInRange ( unit , dist ) ; begin
65363: LD_INT 0
65365: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65366: LD_ADDR_VAR 0 3
65370: PUSH
65371: LD_VAR 0 1
65375: PPUSH
65376: CALL_OW 255
65380: PPUSH
65381: LD_VAR 0 1
65385: PPUSH
65386: CALL_OW 250
65390: PPUSH
65391: LD_VAR 0 1
65395: PPUSH
65396: CALL_OW 251
65400: PPUSH
65401: LD_VAR 0 2
65405: PPUSH
65406: CALL 39467 0 4
65410: PUSH
65411: LD_INT 4
65413: ARRAY
65414: ST_TO_ADDR
// end ;
65415: LD_VAR 0 3
65419: RET
// export function PlayerSeeMe ( unit ) ; begin
65420: LD_INT 0
65422: PPUSH
// result := See ( your_side , unit ) ;
65423: LD_ADDR_VAR 0 2
65427: PUSH
65428: LD_OWVAR 2
65432: PPUSH
65433: LD_VAR 0 1
65437: PPUSH
65438: CALL_OW 292
65442: ST_TO_ADDR
// end ;
65443: LD_VAR 0 2
65447: RET
// export function ReverseDir ( unit ) ; begin
65448: LD_INT 0
65450: PPUSH
// if not unit then
65451: LD_VAR 0 1
65455: NOT
65456: IFFALSE 65460
// exit ;
65458: GO 65483
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65460: LD_ADDR_VAR 0 2
65464: PUSH
65465: LD_VAR 0 1
65469: PPUSH
65470: CALL_OW 254
65474: PUSH
65475: LD_INT 3
65477: PLUS
65478: PUSH
65479: LD_INT 6
65481: MOD
65482: ST_TO_ADDR
// end ;
65483: LD_VAR 0 2
65487: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65488: LD_INT 0
65490: PPUSH
65491: PPUSH
65492: PPUSH
65493: PPUSH
65494: PPUSH
// if not hexes then
65495: LD_VAR 0 2
65499: NOT
65500: IFFALSE 65504
// exit ;
65502: GO 65652
// dist := 9999 ;
65504: LD_ADDR_VAR 0 5
65508: PUSH
65509: LD_INT 9999
65511: ST_TO_ADDR
// for i = 1 to hexes do
65512: LD_ADDR_VAR 0 4
65516: PUSH
65517: DOUBLE
65518: LD_INT 1
65520: DEC
65521: ST_TO_ADDR
65522: LD_VAR 0 2
65526: PUSH
65527: FOR_TO
65528: IFFALSE 65640
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65530: LD_VAR 0 1
65534: PPUSH
65535: LD_VAR 0 2
65539: PUSH
65540: LD_VAR 0 4
65544: ARRAY
65545: PUSH
65546: LD_INT 1
65548: ARRAY
65549: PPUSH
65550: LD_VAR 0 2
65554: PUSH
65555: LD_VAR 0 4
65559: ARRAY
65560: PUSH
65561: LD_INT 2
65563: ARRAY
65564: PPUSH
65565: CALL_OW 297
65569: PUSH
65570: LD_VAR 0 5
65574: LESS
65575: IFFALSE 65638
// begin hex := hexes [ i ] ;
65577: LD_ADDR_VAR 0 7
65581: PUSH
65582: LD_VAR 0 2
65586: PUSH
65587: LD_VAR 0 4
65591: ARRAY
65592: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65593: LD_ADDR_VAR 0 5
65597: PUSH
65598: LD_VAR 0 1
65602: PPUSH
65603: LD_VAR 0 2
65607: PUSH
65608: LD_VAR 0 4
65612: ARRAY
65613: PUSH
65614: LD_INT 1
65616: ARRAY
65617: PPUSH
65618: LD_VAR 0 2
65622: PUSH
65623: LD_VAR 0 4
65627: ARRAY
65628: PUSH
65629: LD_INT 2
65631: ARRAY
65632: PPUSH
65633: CALL_OW 297
65637: ST_TO_ADDR
// end ; end ;
65638: GO 65527
65640: POP
65641: POP
// result := hex ;
65642: LD_ADDR_VAR 0 3
65646: PUSH
65647: LD_VAR 0 7
65651: ST_TO_ADDR
// end ;
65652: LD_VAR 0 3
65656: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65657: LD_INT 0
65659: PPUSH
65660: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65661: LD_VAR 0 1
65665: NOT
65666: PUSH
65667: LD_VAR 0 1
65671: PUSH
65672: LD_INT 21
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 23
65684: PUSH
65685: LD_INT 2
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PPUSH
65696: CALL_OW 69
65700: IN
65701: NOT
65702: OR
65703: IFFALSE 65707
// exit ;
65705: GO 65754
// for i = 1 to 3 do
65707: LD_ADDR_VAR 0 3
65711: PUSH
65712: DOUBLE
65713: LD_INT 1
65715: DEC
65716: ST_TO_ADDR
65717: LD_INT 3
65719: PUSH
65720: FOR_TO
65721: IFFALSE 65752
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65723: LD_VAR 0 1
65727: PPUSH
65728: CALL_OW 250
65732: PPUSH
65733: LD_VAR 0 1
65737: PPUSH
65738: CALL_OW 251
65742: PPUSH
65743: LD_INT 1
65745: PPUSH
65746: CALL_OW 453
65750: GO 65720
65752: POP
65753: POP
// end ;
65754: LD_VAR 0 2
65758: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65759: LD_INT 0
65761: PPUSH
65762: PPUSH
65763: PPUSH
65764: PPUSH
65765: PPUSH
65766: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65767: LD_VAR 0 1
65771: NOT
65772: PUSH
65773: LD_VAR 0 2
65777: NOT
65778: OR
65779: PUSH
65780: LD_VAR 0 1
65784: PPUSH
65785: CALL_OW 314
65789: OR
65790: IFFALSE 65794
// exit ;
65792: GO 66235
// x := GetX ( enemy_unit ) ;
65794: LD_ADDR_VAR 0 7
65798: PUSH
65799: LD_VAR 0 2
65803: PPUSH
65804: CALL_OW 250
65808: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65809: LD_ADDR_VAR 0 8
65813: PUSH
65814: LD_VAR 0 2
65818: PPUSH
65819: CALL_OW 251
65823: ST_TO_ADDR
// if not x or not y then
65824: LD_VAR 0 7
65828: NOT
65829: PUSH
65830: LD_VAR 0 8
65834: NOT
65835: OR
65836: IFFALSE 65840
// exit ;
65838: GO 66235
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65840: LD_ADDR_VAR 0 6
65844: PUSH
65845: LD_VAR 0 7
65849: PPUSH
65850: LD_INT 0
65852: PPUSH
65853: LD_INT 4
65855: PPUSH
65856: CALL_OW 272
65860: PUSH
65861: LD_VAR 0 8
65865: PPUSH
65866: LD_INT 0
65868: PPUSH
65869: LD_INT 4
65871: PPUSH
65872: CALL_OW 273
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_VAR 0 7
65885: PPUSH
65886: LD_INT 1
65888: PPUSH
65889: LD_INT 4
65891: PPUSH
65892: CALL_OW 272
65896: PUSH
65897: LD_VAR 0 8
65901: PPUSH
65902: LD_INT 1
65904: PPUSH
65905: LD_INT 4
65907: PPUSH
65908: CALL_OW 273
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_VAR 0 7
65921: PPUSH
65922: LD_INT 2
65924: PPUSH
65925: LD_INT 4
65927: PPUSH
65928: CALL_OW 272
65932: PUSH
65933: LD_VAR 0 8
65937: PPUSH
65938: LD_INT 2
65940: PPUSH
65941: LD_INT 4
65943: PPUSH
65944: CALL_OW 273
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_VAR 0 7
65957: PPUSH
65958: LD_INT 3
65960: PPUSH
65961: LD_INT 4
65963: PPUSH
65964: CALL_OW 272
65968: PUSH
65969: LD_VAR 0 8
65973: PPUSH
65974: LD_INT 3
65976: PPUSH
65977: LD_INT 4
65979: PPUSH
65980: CALL_OW 273
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_VAR 0 7
65993: PPUSH
65994: LD_INT 4
65996: PPUSH
65997: LD_INT 4
65999: PPUSH
66000: CALL_OW 272
66004: PUSH
66005: LD_VAR 0 8
66009: PPUSH
66010: LD_INT 4
66012: PPUSH
66013: LD_INT 4
66015: PPUSH
66016: CALL_OW 273
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_VAR 0 7
66029: PPUSH
66030: LD_INT 5
66032: PPUSH
66033: LD_INT 4
66035: PPUSH
66036: CALL_OW 272
66040: PUSH
66041: LD_VAR 0 8
66045: PPUSH
66046: LD_INT 5
66048: PPUSH
66049: LD_INT 4
66051: PPUSH
66052: CALL_OW 273
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: ST_TO_ADDR
// for i = tmp downto 1 do
66069: LD_ADDR_VAR 0 4
66073: PUSH
66074: DOUBLE
66075: LD_VAR 0 6
66079: INC
66080: ST_TO_ADDR
66081: LD_INT 1
66083: PUSH
66084: FOR_DOWNTO
66085: IFFALSE 66186
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66087: LD_VAR 0 6
66091: PUSH
66092: LD_VAR 0 4
66096: ARRAY
66097: PUSH
66098: LD_INT 1
66100: ARRAY
66101: PPUSH
66102: LD_VAR 0 6
66106: PUSH
66107: LD_VAR 0 4
66111: ARRAY
66112: PUSH
66113: LD_INT 2
66115: ARRAY
66116: PPUSH
66117: CALL_OW 488
66121: NOT
66122: PUSH
66123: LD_VAR 0 6
66127: PUSH
66128: LD_VAR 0 4
66132: ARRAY
66133: PUSH
66134: LD_INT 1
66136: ARRAY
66137: PPUSH
66138: LD_VAR 0 6
66142: PUSH
66143: LD_VAR 0 4
66147: ARRAY
66148: PUSH
66149: LD_INT 2
66151: ARRAY
66152: PPUSH
66153: CALL_OW 428
66157: PUSH
66158: LD_INT 0
66160: NONEQUAL
66161: OR
66162: IFFALSE 66184
// tmp := Delete ( tmp , i ) ;
66164: LD_ADDR_VAR 0 6
66168: PUSH
66169: LD_VAR 0 6
66173: PPUSH
66174: LD_VAR 0 4
66178: PPUSH
66179: CALL_OW 3
66183: ST_TO_ADDR
66184: GO 66084
66186: POP
66187: POP
// j := GetClosestHex ( unit , tmp ) ;
66188: LD_ADDR_VAR 0 5
66192: PUSH
66193: LD_VAR 0 1
66197: PPUSH
66198: LD_VAR 0 6
66202: PPUSH
66203: CALL 65488 0 2
66207: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66208: LD_VAR 0 1
66212: PPUSH
66213: LD_VAR 0 5
66217: PUSH
66218: LD_INT 1
66220: ARRAY
66221: PPUSH
66222: LD_VAR 0 5
66226: PUSH
66227: LD_INT 2
66229: ARRAY
66230: PPUSH
66231: CALL_OW 111
// end ;
66235: LD_VAR 0 3
66239: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66240: LD_INT 0
66242: PPUSH
66243: PPUSH
66244: PPUSH
// uc_side = 0 ;
66245: LD_ADDR_OWVAR 20
66249: PUSH
66250: LD_INT 0
66252: ST_TO_ADDR
// uc_nation = 0 ;
66253: LD_ADDR_OWVAR 21
66257: PUSH
66258: LD_INT 0
66260: ST_TO_ADDR
// InitHc ;
66261: CALL_OW 19
// InitVc ;
66265: CALL_OW 20
// if mastodonts then
66269: LD_VAR 0 6
66273: IFFALSE 66340
// for i = 1 to mastodonts do
66275: LD_ADDR_VAR 0 11
66279: PUSH
66280: DOUBLE
66281: LD_INT 1
66283: DEC
66284: ST_TO_ADDR
66285: LD_VAR 0 6
66289: PUSH
66290: FOR_TO
66291: IFFALSE 66338
// begin vc_chassis := 31 ;
66293: LD_ADDR_OWVAR 37
66297: PUSH
66298: LD_INT 31
66300: ST_TO_ADDR
// vc_control := control_rider ;
66301: LD_ADDR_OWVAR 38
66305: PUSH
66306: LD_INT 4
66308: ST_TO_ADDR
// animal := CreateVehicle ;
66309: LD_ADDR_VAR 0 12
66313: PUSH
66314: CALL_OW 45
66318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66319: LD_VAR 0 12
66323: PPUSH
66324: LD_VAR 0 8
66328: PPUSH
66329: LD_INT 0
66331: PPUSH
66332: CALL 68409 0 3
// end ;
66336: GO 66290
66338: POP
66339: POP
// if horses then
66340: LD_VAR 0 5
66344: IFFALSE 66411
// for i = 1 to horses do
66346: LD_ADDR_VAR 0 11
66350: PUSH
66351: DOUBLE
66352: LD_INT 1
66354: DEC
66355: ST_TO_ADDR
66356: LD_VAR 0 5
66360: PUSH
66361: FOR_TO
66362: IFFALSE 66409
// begin hc_class := 21 ;
66364: LD_ADDR_OWVAR 28
66368: PUSH
66369: LD_INT 21
66371: ST_TO_ADDR
// hc_gallery :=  ;
66372: LD_ADDR_OWVAR 33
66376: PUSH
66377: LD_STRING 
66379: ST_TO_ADDR
// animal := CreateHuman ;
66380: LD_ADDR_VAR 0 12
66384: PUSH
66385: CALL_OW 44
66389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66390: LD_VAR 0 12
66394: PPUSH
66395: LD_VAR 0 8
66399: PPUSH
66400: LD_INT 0
66402: PPUSH
66403: CALL 68409 0 3
// end ;
66407: GO 66361
66409: POP
66410: POP
// if birds then
66411: LD_VAR 0 1
66415: IFFALSE 66482
// for i = 1 to birds do
66417: LD_ADDR_VAR 0 11
66421: PUSH
66422: DOUBLE
66423: LD_INT 1
66425: DEC
66426: ST_TO_ADDR
66427: LD_VAR 0 1
66431: PUSH
66432: FOR_TO
66433: IFFALSE 66480
// begin hc_class = 18 ;
66435: LD_ADDR_OWVAR 28
66439: PUSH
66440: LD_INT 18
66442: ST_TO_ADDR
// hc_gallery =  ;
66443: LD_ADDR_OWVAR 33
66447: PUSH
66448: LD_STRING 
66450: ST_TO_ADDR
// animal := CreateHuman ;
66451: LD_ADDR_VAR 0 12
66455: PUSH
66456: CALL_OW 44
66460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66461: LD_VAR 0 12
66465: PPUSH
66466: LD_VAR 0 8
66470: PPUSH
66471: LD_INT 0
66473: PPUSH
66474: CALL 68409 0 3
// end ;
66478: GO 66432
66480: POP
66481: POP
// if tigers then
66482: LD_VAR 0 2
66486: IFFALSE 66570
// for i = 1 to tigers do
66488: LD_ADDR_VAR 0 11
66492: PUSH
66493: DOUBLE
66494: LD_INT 1
66496: DEC
66497: ST_TO_ADDR
66498: LD_VAR 0 2
66502: PUSH
66503: FOR_TO
66504: IFFALSE 66568
// begin hc_class = class_tiger ;
66506: LD_ADDR_OWVAR 28
66510: PUSH
66511: LD_INT 14
66513: ST_TO_ADDR
// hc_gallery =  ;
66514: LD_ADDR_OWVAR 33
66518: PUSH
66519: LD_STRING 
66521: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66522: LD_ADDR_OWVAR 35
66526: PUSH
66527: LD_INT 7
66529: NEG
66530: PPUSH
66531: LD_INT 7
66533: PPUSH
66534: CALL_OW 12
66538: ST_TO_ADDR
// animal := CreateHuman ;
66539: LD_ADDR_VAR 0 12
66543: PUSH
66544: CALL_OW 44
66548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66549: LD_VAR 0 12
66553: PPUSH
66554: LD_VAR 0 8
66558: PPUSH
66559: LD_INT 0
66561: PPUSH
66562: CALL 68409 0 3
// end ;
66566: GO 66503
66568: POP
66569: POP
// if apemans then
66570: LD_VAR 0 3
66574: IFFALSE 66697
// for i = 1 to apemans do
66576: LD_ADDR_VAR 0 11
66580: PUSH
66581: DOUBLE
66582: LD_INT 1
66584: DEC
66585: ST_TO_ADDR
66586: LD_VAR 0 3
66590: PUSH
66591: FOR_TO
66592: IFFALSE 66695
// begin hc_class = class_apeman ;
66594: LD_ADDR_OWVAR 28
66598: PUSH
66599: LD_INT 12
66601: ST_TO_ADDR
// hc_gallery =  ;
66602: LD_ADDR_OWVAR 33
66606: PUSH
66607: LD_STRING 
66609: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
66610: LD_ADDR_OWVAR 35
66614: PUSH
66615: LD_INT 5
66617: NEG
66618: PPUSH
66619: LD_INT 5
66621: PPUSH
66622: CALL_OW 12
66626: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66627: LD_ADDR_OWVAR 31
66631: PUSH
66632: LD_INT 1
66634: PPUSH
66635: LD_INT 3
66637: PPUSH
66638: CALL_OW 12
66642: PUSH
66643: LD_INT 1
66645: PPUSH
66646: LD_INT 3
66648: PPUSH
66649: CALL_OW 12
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: ST_TO_ADDR
// animal := CreateHuman ;
66666: LD_ADDR_VAR 0 12
66670: PUSH
66671: CALL_OW 44
66675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66676: LD_VAR 0 12
66680: PPUSH
66681: LD_VAR 0 8
66685: PPUSH
66686: LD_INT 0
66688: PPUSH
66689: CALL 68409 0 3
// end ;
66693: GO 66591
66695: POP
66696: POP
// if enchidnas then
66697: LD_VAR 0 4
66701: IFFALSE 66768
// for i = 1 to enchidnas do
66703: LD_ADDR_VAR 0 11
66707: PUSH
66708: DOUBLE
66709: LD_INT 1
66711: DEC
66712: ST_TO_ADDR
66713: LD_VAR 0 4
66717: PUSH
66718: FOR_TO
66719: IFFALSE 66766
// begin hc_class = 13 ;
66721: LD_ADDR_OWVAR 28
66725: PUSH
66726: LD_INT 13
66728: ST_TO_ADDR
// hc_gallery =  ;
66729: LD_ADDR_OWVAR 33
66733: PUSH
66734: LD_STRING 
66736: ST_TO_ADDR
// animal := CreateHuman ;
66737: LD_ADDR_VAR 0 12
66741: PUSH
66742: CALL_OW 44
66746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66747: LD_VAR 0 12
66751: PPUSH
66752: LD_VAR 0 8
66756: PPUSH
66757: LD_INT 0
66759: PPUSH
66760: CALL 68409 0 3
// end ;
66764: GO 66718
66766: POP
66767: POP
// if fishes then
66768: LD_VAR 0 7
66772: IFFALSE 66839
// for i = 1 to fishes do
66774: LD_ADDR_VAR 0 11
66778: PUSH
66779: DOUBLE
66780: LD_INT 1
66782: DEC
66783: ST_TO_ADDR
66784: LD_VAR 0 7
66788: PUSH
66789: FOR_TO
66790: IFFALSE 66837
// begin hc_class = 20 ;
66792: LD_ADDR_OWVAR 28
66796: PUSH
66797: LD_INT 20
66799: ST_TO_ADDR
// hc_gallery =  ;
66800: LD_ADDR_OWVAR 33
66804: PUSH
66805: LD_STRING 
66807: ST_TO_ADDR
// animal := CreateHuman ;
66808: LD_ADDR_VAR 0 12
66812: PUSH
66813: CALL_OW 44
66817: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66818: LD_VAR 0 12
66822: PPUSH
66823: LD_VAR 0 9
66827: PPUSH
66828: LD_INT 0
66830: PPUSH
66831: CALL 68409 0 3
// end ;
66835: GO 66789
66837: POP
66838: POP
// end ;
66839: LD_VAR 0 10
66843: RET
// export function WantHeal ( sci , unit ) ; begin
66844: LD_INT 0
66846: PPUSH
// if GetTaskList ( sci ) > 0 then
66847: LD_VAR 0 1
66851: PPUSH
66852: CALL_OW 437
66856: PUSH
66857: LD_INT 0
66859: GREATER
66860: IFFALSE 66930
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66862: LD_VAR 0 1
66866: PPUSH
66867: CALL_OW 437
66871: PUSH
66872: LD_INT 1
66874: ARRAY
66875: PUSH
66876: LD_INT 1
66878: ARRAY
66879: PUSH
66880: LD_STRING l
66882: EQUAL
66883: PUSH
66884: LD_VAR 0 1
66888: PPUSH
66889: CALL_OW 437
66893: PUSH
66894: LD_INT 1
66896: ARRAY
66897: PUSH
66898: LD_INT 4
66900: ARRAY
66901: PUSH
66902: LD_VAR 0 2
66906: EQUAL
66907: AND
66908: IFFALSE 66920
// result := true else
66910: LD_ADDR_VAR 0 3
66914: PUSH
66915: LD_INT 1
66917: ST_TO_ADDR
66918: GO 66928
// result := false ;
66920: LD_ADDR_VAR 0 3
66924: PUSH
66925: LD_INT 0
66927: ST_TO_ADDR
// end else
66928: GO 66938
// result := false ;
66930: LD_ADDR_VAR 0 3
66934: PUSH
66935: LD_INT 0
66937: ST_TO_ADDR
// end ;
66938: LD_VAR 0 3
66942: RET
// export function HealTarget ( sci ) ; begin
66943: LD_INT 0
66945: PPUSH
// if not sci then
66946: LD_VAR 0 1
66950: NOT
66951: IFFALSE 66955
// exit ;
66953: GO 67020
// result := 0 ;
66955: LD_ADDR_VAR 0 2
66959: PUSH
66960: LD_INT 0
66962: ST_TO_ADDR
// if GetTaskList ( sci ) then
66963: LD_VAR 0 1
66967: PPUSH
66968: CALL_OW 437
66972: IFFALSE 67020
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66974: LD_VAR 0 1
66978: PPUSH
66979: CALL_OW 437
66983: PUSH
66984: LD_INT 1
66986: ARRAY
66987: PUSH
66988: LD_INT 1
66990: ARRAY
66991: PUSH
66992: LD_STRING l
66994: EQUAL
66995: IFFALSE 67020
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66997: LD_ADDR_VAR 0 2
67001: PUSH
67002: LD_VAR 0 1
67006: PPUSH
67007: CALL_OW 437
67011: PUSH
67012: LD_INT 1
67014: ARRAY
67015: PUSH
67016: LD_INT 4
67018: ARRAY
67019: ST_TO_ADDR
// end ;
67020: LD_VAR 0 2
67024: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67025: LD_INT 0
67027: PPUSH
67028: PPUSH
67029: PPUSH
67030: PPUSH
// if not base_units then
67031: LD_VAR 0 1
67035: NOT
67036: IFFALSE 67040
// exit ;
67038: GO 67127
// result := false ;
67040: LD_ADDR_VAR 0 2
67044: PUSH
67045: LD_INT 0
67047: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67048: LD_ADDR_VAR 0 5
67052: PUSH
67053: LD_VAR 0 1
67057: PPUSH
67058: LD_INT 21
67060: PUSH
67061: LD_INT 3
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PPUSH
67068: CALL_OW 72
67072: ST_TO_ADDR
// if not tmp then
67073: LD_VAR 0 5
67077: NOT
67078: IFFALSE 67082
// exit ;
67080: GO 67127
// for i in tmp do
67082: LD_ADDR_VAR 0 3
67086: PUSH
67087: LD_VAR 0 5
67091: PUSH
67092: FOR_IN
67093: IFFALSE 67125
// begin result := EnemyInRange ( i , 22 ) ;
67095: LD_ADDR_VAR 0 2
67099: PUSH
67100: LD_VAR 0 3
67104: PPUSH
67105: LD_INT 22
67107: PPUSH
67108: CALL 65363 0 2
67112: ST_TO_ADDR
// if result then
67113: LD_VAR 0 2
67117: IFFALSE 67123
// exit ;
67119: POP
67120: POP
67121: GO 67127
// end ;
67123: GO 67092
67125: POP
67126: POP
// end ;
67127: LD_VAR 0 2
67131: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67132: LD_INT 0
67134: PPUSH
67135: PPUSH
// if not units then
67136: LD_VAR 0 1
67140: NOT
67141: IFFALSE 67145
// exit ;
67143: GO 67215
// result := [ ] ;
67145: LD_ADDR_VAR 0 3
67149: PUSH
67150: EMPTY
67151: ST_TO_ADDR
// for i in units do
67152: LD_ADDR_VAR 0 4
67156: PUSH
67157: LD_VAR 0 1
67161: PUSH
67162: FOR_IN
67163: IFFALSE 67213
// if GetTag ( i ) = tag then
67165: LD_VAR 0 4
67169: PPUSH
67170: CALL_OW 110
67174: PUSH
67175: LD_VAR 0 2
67179: EQUAL
67180: IFFALSE 67211
// result := Insert ( result , result + 1 , i ) ;
67182: LD_ADDR_VAR 0 3
67186: PUSH
67187: LD_VAR 0 3
67191: PPUSH
67192: LD_VAR 0 3
67196: PUSH
67197: LD_INT 1
67199: PLUS
67200: PPUSH
67201: LD_VAR 0 4
67205: PPUSH
67206: CALL_OW 2
67210: ST_TO_ADDR
67211: GO 67162
67213: POP
67214: POP
// end ;
67215: LD_VAR 0 3
67219: RET
// export function IsDriver ( un ) ; begin
67220: LD_INT 0
67222: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67223: LD_ADDR_VAR 0 2
67227: PUSH
67228: LD_VAR 0 1
67232: PUSH
67233: LD_INT 55
67235: PUSH
67236: EMPTY
67237: LIST
67238: PPUSH
67239: CALL_OW 69
67243: IN
67244: ST_TO_ADDR
// end ;
67245: LD_VAR 0 2
67249: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67250: LD_INT 0
67252: PPUSH
67253: PPUSH
// list := [ ] ;
67254: LD_ADDR_VAR 0 5
67258: PUSH
67259: EMPTY
67260: ST_TO_ADDR
// case d of 0 :
67261: LD_VAR 0 3
67265: PUSH
67266: LD_INT 0
67268: DOUBLE
67269: EQUAL
67270: IFTRUE 67274
67272: GO 67407
67274: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67275: LD_ADDR_VAR 0 5
67279: PUSH
67280: LD_VAR 0 1
67284: PUSH
67285: LD_INT 4
67287: MINUS
67288: PUSH
67289: LD_VAR 0 2
67293: PUSH
67294: LD_INT 4
67296: MINUS
67297: PUSH
67298: LD_INT 2
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: LIST
67305: PUSH
67306: LD_VAR 0 1
67310: PUSH
67311: LD_INT 3
67313: MINUS
67314: PUSH
67315: LD_VAR 0 2
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: PUSH
67328: LD_VAR 0 1
67332: PUSH
67333: LD_INT 4
67335: PLUS
67336: PUSH
67337: LD_VAR 0 2
67341: PUSH
67342: LD_INT 4
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: PUSH
67350: LD_VAR 0 1
67354: PUSH
67355: LD_INT 3
67357: PLUS
67358: PUSH
67359: LD_VAR 0 2
67363: PUSH
67364: LD_INT 3
67366: PLUS
67367: PUSH
67368: LD_INT 5
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: PUSH
67376: LD_VAR 0 1
67380: PUSH
67381: LD_VAR 0 2
67385: PUSH
67386: LD_INT 4
67388: PLUS
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: LIST
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: ST_TO_ADDR
// end ; 1 :
67405: GO 68105
67407: LD_INT 1
67409: DOUBLE
67410: EQUAL
67411: IFTRUE 67415
67413: GO 67548
67415: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67416: LD_ADDR_VAR 0 5
67420: PUSH
67421: LD_VAR 0 1
67425: PUSH
67426: LD_VAR 0 2
67430: PUSH
67431: LD_INT 4
67433: MINUS
67434: PUSH
67435: LD_INT 3
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: PUSH
67443: LD_VAR 0 1
67447: PUSH
67448: LD_INT 3
67450: MINUS
67451: PUSH
67452: LD_VAR 0 2
67456: PUSH
67457: LD_INT 3
67459: MINUS
67460: PUSH
67461: LD_INT 2
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: PUSH
67469: LD_VAR 0 1
67473: PUSH
67474: LD_INT 4
67476: MINUS
67477: PUSH
67478: LD_VAR 0 2
67482: PUSH
67483: LD_INT 1
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: PUSH
67491: LD_VAR 0 1
67495: PUSH
67496: LD_VAR 0 2
67500: PUSH
67501: LD_INT 3
67503: PLUS
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: PUSH
67513: LD_VAR 0 1
67517: PUSH
67518: LD_INT 4
67520: PLUS
67521: PUSH
67522: LD_VAR 0 2
67526: PUSH
67527: LD_INT 4
67529: PLUS
67530: PUSH
67531: LD_INT 5
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: LIST
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: ST_TO_ADDR
// end ; 2 :
67546: GO 68105
67548: LD_INT 2
67550: DOUBLE
67551: EQUAL
67552: IFTRUE 67556
67554: GO 67685
67556: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67557: LD_ADDR_VAR 0 5
67561: PUSH
67562: LD_VAR 0 1
67566: PUSH
67567: LD_VAR 0 2
67571: PUSH
67572: LD_INT 3
67574: MINUS
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: LIST
67583: PUSH
67584: LD_VAR 0 1
67588: PUSH
67589: LD_INT 4
67591: PLUS
67592: PUSH
67593: LD_VAR 0 2
67597: PUSH
67598: LD_INT 4
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: PUSH
67606: LD_VAR 0 1
67610: PUSH
67611: LD_VAR 0 2
67615: PUSH
67616: LD_INT 4
67618: PLUS
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: PUSH
67628: LD_VAR 0 1
67632: PUSH
67633: LD_INT 3
67635: MINUS
67636: PUSH
67637: LD_VAR 0 2
67641: PUSH
67642: LD_INT 1
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: LIST
67649: PUSH
67650: LD_VAR 0 1
67654: PUSH
67655: LD_INT 4
67657: MINUS
67658: PUSH
67659: LD_VAR 0 2
67663: PUSH
67664: LD_INT 4
67666: MINUS
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: LIST
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: ST_TO_ADDR
// end ; 3 :
67683: GO 68105
67685: LD_INT 3
67687: DOUBLE
67688: EQUAL
67689: IFTRUE 67693
67691: GO 67826
67693: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67694: LD_ADDR_VAR 0 5
67698: PUSH
67699: LD_VAR 0 1
67703: PUSH
67704: LD_INT 3
67706: PLUS
67707: PUSH
67708: LD_VAR 0 2
67712: PUSH
67713: LD_INT 4
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: LIST
67720: PUSH
67721: LD_VAR 0 1
67725: PUSH
67726: LD_INT 4
67728: PLUS
67729: PUSH
67730: LD_VAR 0 2
67734: PUSH
67735: LD_INT 4
67737: PLUS
67738: PUSH
67739: LD_INT 5
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: LIST
67746: PUSH
67747: LD_VAR 0 1
67751: PUSH
67752: LD_INT 4
67754: MINUS
67755: PUSH
67756: LD_VAR 0 2
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: LIST
67768: PUSH
67769: LD_VAR 0 1
67773: PUSH
67774: LD_VAR 0 2
67778: PUSH
67779: LD_INT 4
67781: MINUS
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: LIST
67790: PUSH
67791: LD_VAR 0 1
67795: PUSH
67796: LD_INT 3
67798: MINUS
67799: PUSH
67800: LD_VAR 0 2
67804: PUSH
67805: LD_INT 3
67807: MINUS
67808: PUSH
67809: LD_INT 2
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: ST_TO_ADDR
// end ; 4 :
67824: GO 68105
67826: LD_INT 4
67828: DOUBLE
67829: EQUAL
67830: IFTRUE 67834
67832: GO 67967
67834: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67835: LD_ADDR_VAR 0 5
67839: PUSH
67840: LD_VAR 0 1
67844: PUSH
67845: LD_VAR 0 2
67849: PUSH
67850: LD_INT 4
67852: PLUS
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: LIST
67861: PUSH
67862: LD_VAR 0 1
67866: PUSH
67867: LD_INT 3
67869: PLUS
67870: PUSH
67871: LD_VAR 0 2
67875: PUSH
67876: LD_INT 3
67878: PLUS
67879: PUSH
67880: LD_INT 5
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: LIST
67887: PUSH
67888: LD_VAR 0 1
67892: PUSH
67893: LD_INT 4
67895: PLUS
67896: PUSH
67897: LD_VAR 0 2
67901: PUSH
67902: LD_INT 4
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: LIST
67909: PUSH
67910: LD_VAR 0 1
67914: PUSH
67915: LD_VAR 0 2
67919: PUSH
67920: LD_INT 3
67922: MINUS
67923: PUSH
67924: LD_INT 3
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: LIST
67931: PUSH
67932: LD_VAR 0 1
67936: PUSH
67937: LD_INT 4
67939: MINUS
67940: PUSH
67941: LD_VAR 0 2
67945: PUSH
67946: LD_INT 4
67948: MINUS
67949: PUSH
67950: LD_INT 2
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: LIST
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: ST_TO_ADDR
// end ; 5 :
67965: GO 68105
67967: LD_INT 5
67969: DOUBLE
67970: EQUAL
67971: IFTRUE 67975
67973: GO 68104
67975: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67976: LD_ADDR_VAR 0 5
67980: PUSH
67981: LD_VAR 0 1
67985: PUSH
67986: LD_INT 4
67988: MINUS
67989: PUSH
67990: LD_VAR 0 2
67994: PUSH
67995: LD_INT 1
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: LIST
68002: PUSH
68003: LD_VAR 0 1
68007: PUSH
68008: LD_VAR 0 2
68012: PUSH
68013: LD_INT 4
68015: MINUS
68016: PUSH
68017: LD_INT 3
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: LIST
68024: PUSH
68025: LD_VAR 0 1
68029: PUSH
68030: LD_INT 4
68032: PLUS
68033: PUSH
68034: LD_VAR 0 2
68038: PUSH
68039: LD_INT 4
68041: PLUS
68042: PUSH
68043: LD_INT 5
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: LIST
68050: PUSH
68051: LD_VAR 0 1
68055: PUSH
68056: LD_INT 3
68058: PLUS
68059: PUSH
68060: LD_VAR 0 2
68064: PUSH
68065: LD_INT 4
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: LIST
68072: PUSH
68073: LD_VAR 0 1
68077: PUSH
68078: LD_VAR 0 2
68082: PUSH
68083: LD_INT 3
68085: PLUS
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// end ; end ;
68102: GO 68105
68104: POP
// result := list ;
68105: LD_ADDR_VAR 0 4
68109: PUSH
68110: LD_VAR 0 5
68114: ST_TO_ADDR
// end ;
68115: LD_VAR 0 4
68119: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68120: LD_INT 0
68122: PPUSH
68123: PPUSH
68124: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68125: LD_VAR 0 1
68129: NOT
68130: PUSH
68131: LD_VAR 0 2
68135: PUSH
68136: LD_INT 1
68138: PUSH
68139: LD_INT 2
68141: PUSH
68142: LD_INT 3
68144: PUSH
68145: LD_INT 4
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: IN
68154: NOT
68155: OR
68156: IFFALSE 68160
// exit ;
68158: GO 68252
// tmp := [ ] ;
68160: LD_ADDR_VAR 0 5
68164: PUSH
68165: EMPTY
68166: ST_TO_ADDR
// for i in units do
68167: LD_ADDR_VAR 0 4
68171: PUSH
68172: LD_VAR 0 1
68176: PUSH
68177: FOR_IN
68178: IFFALSE 68221
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68180: LD_ADDR_VAR 0 5
68184: PUSH
68185: LD_VAR 0 5
68189: PPUSH
68190: LD_VAR 0 5
68194: PUSH
68195: LD_INT 1
68197: PLUS
68198: PPUSH
68199: LD_VAR 0 4
68203: PPUSH
68204: LD_VAR 0 2
68208: PPUSH
68209: CALL_OW 259
68213: PPUSH
68214: CALL_OW 2
68218: ST_TO_ADDR
68219: GO 68177
68221: POP
68222: POP
// if not tmp then
68223: LD_VAR 0 5
68227: NOT
68228: IFFALSE 68232
// exit ;
68230: GO 68252
// result := SortListByListDesc ( units , tmp ) ;
68232: LD_ADDR_VAR 0 3
68236: PUSH
68237: LD_VAR 0 1
68241: PPUSH
68242: LD_VAR 0 5
68246: PPUSH
68247: CALL_OW 77
68251: ST_TO_ADDR
// end ;
68252: LD_VAR 0 3
68256: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68257: LD_INT 0
68259: PPUSH
68260: PPUSH
68261: PPUSH
// x := GetX ( building ) ;
68262: LD_ADDR_VAR 0 4
68266: PUSH
68267: LD_VAR 0 2
68271: PPUSH
68272: CALL_OW 250
68276: ST_TO_ADDR
// y := GetY ( building ) ;
68277: LD_ADDR_VAR 0 5
68281: PUSH
68282: LD_VAR 0 2
68286: PPUSH
68287: CALL_OW 251
68291: ST_TO_ADDR
// if GetTaskList ( unit ) then
68292: LD_VAR 0 1
68296: PPUSH
68297: CALL_OW 437
68301: IFFALSE 68396
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68303: LD_STRING e
68305: PUSH
68306: LD_VAR 0 1
68310: PPUSH
68311: CALL_OW 437
68315: PUSH
68316: LD_INT 1
68318: ARRAY
68319: PUSH
68320: LD_INT 1
68322: ARRAY
68323: EQUAL
68324: PUSH
68325: LD_VAR 0 4
68329: PUSH
68330: LD_VAR 0 1
68334: PPUSH
68335: CALL_OW 437
68339: PUSH
68340: LD_INT 1
68342: ARRAY
68343: PUSH
68344: LD_INT 2
68346: ARRAY
68347: EQUAL
68348: AND
68349: PUSH
68350: LD_VAR 0 5
68354: PUSH
68355: LD_VAR 0 1
68359: PPUSH
68360: CALL_OW 437
68364: PUSH
68365: LD_INT 1
68367: ARRAY
68368: PUSH
68369: LD_INT 3
68371: ARRAY
68372: EQUAL
68373: AND
68374: IFFALSE 68386
// result := true else
68376: LD_ADDR_VAR 0 3
68380: PUSH
68381: LD_INT 1
68383: ST_TO_ADDR
68384: GO 68394
// result := false ;
68386: LD_ADDR_VAR 0 3
68390: PUSH
68391: LD_INT 0
68393: ST_TO_ADDR
// end else
68394: GO 68404
// result := false ;
68396: LD_ADDR_VAR 0 3
68400: PUSH
68401: LD_INT 0
68403: ST_TO_ADDR
// end ;
68404: LD_VAR 0 3
68408: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68409: LD_INT 0
68411: PPUSH
68412: PPUSH
68413: PPUSH
68414: PPUSH
// if not unit or not area then
68415: LD_VAR 0 1
68419: NOT
68420: PUSH
68421: LD_VAR 0 2
68425: NOT
68426: OR
68427: IFFALSE 68431
// exit ;
68429: GO 68595
// tmp := AreaToList ( area , i ) ;
68431: LD_ADDR_VAR 0 6
68435: PUSH
68436: LD_VAR 0 2
68440: PPUSH
68441: LD_VAR 0 5
68445: PPUSH
68446: CALL_OW 517
68450: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68451: LD_ADDR_VAR 0 5
68455: PUSH
68456: DOUBLE
68457: LD_INT 1
68459: DEC
68460: ST_TO_ADDR
68461: LD_VAR 0 6
68465: PUSH
68466: LD_INT 1
68468: ARRAY
68469: PUSH
68470: FOR_TO
68471: IFFALSE 68593
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68473: LD_ADDR_VAR 0 7
68477: PUSH
68478: LD_VAR 0 6
68482: PUSH
68483: LD_INT 1
68485: ARRAY
68486: PUSH
68487: LD_VAR 0 5
68491: ARRAY
68492: PUSH
68493: LD_VAR 0 6
68497: PUSH
68498: LD_INT 2
68500: ARRAY
68501: PUSH
68502: LD_VAR 0 5
68506: ARRAY
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68512: LD_VAR 0 7
68516: PUSH
68517: LD_INT 1
68519: ARRAY
68520: PPUSH
68521: LD_VAR 0 7
68525: PUSH
68526: LD_INT 2
68528: ARRAY
68529: PPUSH
68530: CALL_OW 428
68534: PUSH
68535: LD_INT 0
68537: EQUAL
68538: IFFALSE 68591
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68540: LD_VAR 0 1
68544: PPUSH
68545: LD_VAR 0 7
68549: PUSH
68550: LD_INT 1
68552: ARRAY
68553: PPUSH
68554: LD_VAR 0 7
68558: PUSH
68559: LD_INT 2
68561: ARRAY
68562: PPUSH
68563: LD_VAR 0 3
68567: PPUSH
68568: CALL_OW 48
// result := IsPlaced ( unit ) ;
68572: LD_ADDR_VAR 0 4
68576: PUSH
68577: LD_VAR 0 1
68581: PPUSH
68582: CALL_OW 305
68586: ST_TO_ADDR
// exit ;
68587: POP
68588: POP
68589: GO 68595
// end ; end ;
68591: GO 68470
68593: POP
68594: POP
// end ;
68595: LD_VAR 0 4
68599: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68600: LD_INT 0
68602: PPUSH
68603: PPUSH
68604: PPUSH
// if not side or side > 8 then
68605: LD_VAR 0 1
68609: NOT
68610: PUSH
68611: LD_VAR 0 1
68615: PUSH
68616: LD_INT 8
68618: GREATER
68619: OR
68620: IFFALSE 68624
// exit ;
68622: GO 68811
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68624: LD_ADDR_VAR 0 4
68628: PUSH
68629: LD_INT 22
68631: PUSH
68632: LD_VAR 0 1
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 21
68643: PUSH
68644: LD_INT 3
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PPUSH
68655: CALL_OW 69
68659: ST_TO_ADDR
// if not tmp then
68660: LD_VAR 0 4
68664: NOT
68665: IFFALSE 68669
// exit ;
68667: GO 68811
// enable_addtolog := true ;
68669: LD_ADDR_OWVAR 81
68673: PUSH
68674: LD_INT 1
68676: ST_TO_ADDR
// AddToLog ( [ ) ;
68677: LD_STRING [
68679: PPUSH
68680: CALL_OW 561
// for i in tmp do
68684: LD_ADDR_VAR 0 3
68688: PUSH
68689: LD_VAR 0 4
68693: PUSH
68694: FOR_IN
68695: IFFALSE 68802
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68697: LD_STRING [
68699: PUSH
68700: LD_VAR 0 3
68704: PPUSH
68705: CALL_OW 266
68709: STR
68710: PUSH
68711: LD_STRING , 
68713: STR
68714: PUSH
68715: LD_VAR 0 3
68719: PPUSH
68720: CALL_OW 250
68724: STR
68725: PUSH
68726: LD_STRING , 
68728: STR
68729: PUSH
68730: LD_VAR 0 3
68734: PPUSH
68735: CALL_OW 251
68739: STR
68740: PUSH
68741: LD_STRING , 
68743: STR
68744: PUSH
68745: LD_VAR 0 3
68749: PPUSH
68750: CALL_OW 254
68754: STR
68755: PUSH
68756: LD_STRING , 
68758: STR
68759: PUSH
68760: LD_VAR 0 3
68764: PPUSH
68765: LD_INT 1
68767: PPUSH
68768: CALL_OW 268
68772: STR
68773: PUSH
68774: LD_STRING , 
68776: STR
68777: PUSH
68778: LD_VAR 0 3
68782: PPUSH
68783: LD_INT 2
68785: PPUSH
68786: CALL_OW 268
68790: STR
68791: PUSH
68792: LD_STRING ],
68794: STR
68795: PPUSH
68796: CALL_OW 561
// end ;
68800: GO 68694
68802: POP
68803: POP
// AddToLog ( ]; ) ;
68804: LD_STRING ];
68806: PPUSH
68807: CALL_OW 561
// end ;
68811: LD_VAR 0 2
68815: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68816: LD_INT 0
68818: PPUSH
68819: PPUSH
68820: PPUSH
68821: PPUSH
68822: PPUSH
// if not area or not rate or not max then
68823: LD_VAR 0 1
68827: NOT
68828: PUSH
68829: LD_VAR 0 2
68833: NOT
68834: OR
68835: PUSH
68836: LD_VAR 0 4
68840: NOT
68841: OR
68842: IFFALSE 68846
// exit ;
68844: GO 69038
// while 1 do
68846: LD_INT 1
68848: IFFALSE 69038
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68850: LD_ADDR_VAR 0 9
68854: PUSH
68855: LD_VAR 0 1
68859: PPUSH
68860: LD_INT 1
68862: PPUSH
68863: CALL_OW 287
68867: PUSH
68868: LD_INT 10
68870: MUL
68871: ST_TO_ADDR
// r := rate / 10 ;
68872: LD_ADDR_VAR 0 7
68876: PUSH
68877: LD_VAR 0 2
68881: PUSH
68882: LD_INT 10
68884: DIVREAL
68885: ST_TO_ADDR
// time := 1 1$00 ;
68886: LD_ADDR_VAR 0 8
68890: PUSH
68891: LD_INT 2100
68893: ST_TO_ADDR
// if amount < min then
68894: LD_VAR 0 9
68898: PUSH
68899: LD_VAR 0 3
68903: LESS
68904: IFFALSE 68922
// r := r * 2 else
68906: LD_ADDR_VAR 0 7
68910: PUSH
68911: LD_VAR 0 7
68915: PUSH
68916: LD_INT 2
68918: MUL
68919: ST_TO_ADDR
68920: GO 68948
// if amount > max then
68922: LD_VAR 0 9
68926: PUSH
68927: LD_VAR 0 4
68931: GREATER
68932: IFFALSE 68948
// r := r / 2 ;
68934: LD_ADDR_VAR 0 7
68938: PUSH
68939: LD_VAR 0 7
68943: PUSH
68944: LD_INT 2
68946: DIVREAL
68947: ST_TO_ADDR
// time := time / r ;
68948: LD_ADDR_VAR 0 8
68952: PUSH
68953: LD_VAR 0 8
68957: PUSH
68958: LD_VAR 0 7
68962: DIVREAL
68963: ST_TO_ADDR
// if time < 0 then
68964: LD_VAR 0 8
68968: PUSH
68969: LD_INT 0
68971: LESS
68972: IFFALSE 68989
// time := time * - 1 ;
68974: LD_ADDR_VAR 0 8
68978: PUSH
68979: LD_VAR 0 8
68983: PUSH
68984: LD_INT 1
68986: NEG
68987: MUL
68988: ST_TO_ADDR
// wait ( time ) ;
68989: LD_VAR 0 8
68993: PPUSH
68994: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68998: LD_INT 35
69000: PPUSH
69001: LD_INT 875
69003: PPUSH
69004: CALL_OW 12
69008: PPUSH
69009: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69013: LD_INT 1
69015: PPUSH
69016: LD_INT 5
69018: PPUSH
69019: CALL_OW 12
69023: PPUSH
69024: LD_VAR 0 1
69028: PPUSH
69029: LD_INT 1
69031: PPUSH
69032: CALL_OW 55
// end ;
69036: GO 68846
// end ;
69038: LD_VAR 0 5
69042: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69043: LD_INT 0
69045: PPUSH
69046: PPUSH
69047: PPUSH
69048: PPUSH
69049: PPUSH
69050: PPUSH
69051: PPUSH
69052: PPUSH
// if not turrets or not factories then
69053: LD_VAR 0 1
69057: NOT
69058: PUSH
69059: LD_VAR 0 2
69063: NOT
69064: OR
69065: IFFALSE 69069
// exit ;
69067: GO 69376
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69069: LD_ADDR_VAR 0 10
69073: PUSH
69074: LD_INT 5
69076: PUSH
69077: LD_INT 6
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: LD_INT 4
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: PUSH
69097: LD_INT 5
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 24
69111: PUSH
69112: LD_INT 25
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 23
69121: PUSH
69122: LD_INT 27
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 42
69135: PUSH
69136: LD_INT 43
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 44
69145: PUSH
69146: LD_INT 46
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 45
69155: PUSH
69156: LD_INT 47
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: LIST
69172: ST_TO_ADDR
// result := [ ] ;
69173: LD_ADDR_VAR 0 3
69177: PUSH
69178: EMPTY
69179: ST_TO_ADDR
// for i in turrets do
69180: LD_ADDR_VAR 0 4
69184: PUSH
69185: LD_VAR 0 1
69189: PUSH
69190: FOR_IN
69191: IFFALSE 69374
// begin nat := GetNation ( i ) ;
69193: LD_ADDR_VAR 0 7
69197: PUSH
69198: LD_VAR 0 4
69202: PPUSH
69203: CALL_OW 248
69207: ST_TO_ADDR
// weapon := 0 ;
69208: LD_ADDR_VAR 0 8
69212: PUSH
69213: LD_INT 0
69215: ST_TO_ADDR
// if not nat then
69216: LD_VAR 0 7
69220: NOT
69221: IFFALSE 69225
// continue ;
69223: GO 69190
// for j in list [ nat ] do
69225: LD_ADDR_VAR 0 5
69229: PUSH
69230: LD_VAR 0 10
69234: PUSH
69235: LD_VAR 0 7
69239: ARRAY
69240: PUSH
69241: FOR_IN
69242: IFFALSE 69283
// if GetBWeapon ( i ) = j [ 1 ] then
69244: LD_VAR 0 4
69248: PPUSH
69249: CALL_OW 269
69253: PUSH
69254: LD_VAR 0 5
69258: PUSH
69259: LD_INT 1
69261: ARRAY
69262: EQUAL
69263: IFFALSE 69281
// begin weapon := j [ 2 ] ;
69265: LD_ADDR_VAR 0 8
69269: PUSH
69270: LD_VAR 0 5
69274: PUSH
69275: LD_INT 2
69277: ARRAY
69278: ST_TO_ADDR
// break ;
69279: GO 69283
// end ;
69281: GO 69241
69283: POP
69284: POP
// if not weapon then
69285: LD_VAR 0 8
69289: NOT
69290: IFFALSE 69294
// continue ;
69292: GO 69190
// for k in factories do
69294: LD_ADDR_VAR 0 6
69298: PUSH
69299: LD_VAR 0 2
69303: PUSH
69304: FOR_IN
69305: IFFALSE 69370
// begin weapons := AvailableWeaponList ( k ) ;
69307: LD_ADDR_VAR 0 9
69311: PUSH
69312: LD_VAR 0 6
69316: PPUSH
69317: CALL_OW 478
69321: ST_TO_ADDR
// if not weapons then
69322: LD_VAR 0 9
69326: NOT
69327: IFFALSE 69331
// continue ;
69329: GO 69304
// if weapon in weapons then
69331: LD_VAR 0 8
69335: PUSH
69336: LD_VAR 0 9
69340: IN
69341: IFFALSE 69368
// begin result := [ i , weapon ] ;
69343: LD_ADDR_VAR 0 3
69347: PUSH
69348: LD_VAR 0 4
69352: PUSH
69353: LD_VAR 0 8
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: ST_TO_ADDR
// exit ;
69362: POP
69363: POP
69364: POP
69365: POP
69366: GO 69376
// end ; end ;
69368: GO 69304
69370: POP
69371: POP
// end ;
69372: GO 69190
69374: POP
69375: POP
// end ;
69376: LD_VAR 0 3
69380: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69381: LD_INT 0
69383: PPUSH
// if not side or side > 8 then
69384: LD_VAR 0 3
69388: NOT
69389: PUSH
69390: LD_VAR 0 3
69394: PUSH
69395: LD_INT 8
69397: GREATER
69398: OR
69399: IFFALSE 69403
// exit ;
69401: GO 69462
// if not range then
69403: LD_VAR 0 4
69407: NOT
69408: IFFALSE 69419
// range := - 12 ;
69410: LD_ADDR_VAR 0 4
69414: PUSH
69415: LD_INT 12
69417: NEG
69418: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69419: LD_VAR 0 1
69423: PPUSH
69424: LD_VAR 0 2
69428: PPUSH
69429: LD_VAR 0 3
69433: PPUSH
69434: LD_VAR 0 4
69438: PPUSH
69439: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69443: LD_VAR 0 1
69447: PPUSH
69448: LD_VAR 0 2
69452: PPUSH
69453: LD_VAR 0 3
69457: PPUSH
69458: CALL_OW 331
// end ;
69462: LD_VAR 0 5
69466: RET
// export function Video ( mode ) ; begin
69467: LD_INT 0
69469: PPUSH
// ingame_video = mode ;
69470: LD_ADDR_OWVAR 52
69474: PUSH
69475: LD_VAR 0 1
69479: ST_TO_ADDR
// interface_hidden = mode ;
69480: LD_ADDR_OWVAR 54
69484: PUSH
69485: LD_VAR 0 1
69489: ST_TO_ADDR
// end ;
69490: LD_VAR 0 2
69494: RET
// export function Join ( array , element ) ; begin
69495: LD_INT 0
69497: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69498: LD_ADDR_VAR 0 3
69502: PUSH
69503: LD_VAR 0 1
69507: PPUSH
69508: LD_VAR 0 1
69512: PUSH
69513: LD_INT 1
69515: PLUS
69516: PPUSH
69517: LD_VAR 0 2
69521: PPUSH
69522: CALL_OW 1
69526: ST_TO_ADDR
// end ;
69527: LD_VAR 0 3
69531: RET
// export function JoinUnion ( array , element ) ; begin
69532: LD_INT 0
69534: PPUSH
// result := array union element ;
69535: LD_ADDR_VAR 0 3
69539: PUSH
69540: LD_VAR 0 1
69544: PUSH
69545: LD_VAR 0 2
69549: UNION
69550: ST_TO_ADDR
// end ;
69551: LD_VAR 0 3
69555: RET
// export function GetBehemoths ( side ) ; begin
69556: LD_INT 0
69558: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69559: LD_ADDR_VAR 0 2
69563: PUSH
69564: LD_INT 22
69566: PUSH
69567: LD_VAR 0 1
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 31
69578: PUSH
69579: LD_INT 25
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PPUSH
69590: CALL_OW 69
69594: ST_TO_ADDR
// end ;
69595: LD_VAR 0 2
69599: RET
// export function Shuffle ( array ) ; var i , index ; begin
69600: LD_INT 0
69602: PPUSH
69603: PPUSH
69604: PPUSH
// result := [ ] ;
69605: LD_ADDR_VAR 0 2
69609: PUSH
69610: EMPTY
69611: ST_TO_ADDR
// if not array then
69612: LD_VAR 0 1
69616: NOT
69617: IFFALSE 69621
// exit ;
69619: GO 69720
// Randomize ;
69621: CALL_OW 10
// for i = array downto 1 do
69625: LD_ADDR_VAR 0 3
69629: PUSH
69630: DOUBLE
69631: LD_VAR 0 1
69635: INC
69636: ST_TO_ADDR
69637: LD_INT 1
69639: PUSH
69640: FOR_DOWNTO
69641: IFFALSE 69718
// begin index := rand ( 1 , array ) ;
69643: LD_ADDR_VAR 0 4
69647: PUSH
69648: LD_INT 1
69650: PPUSH
69651: LD_VAR 0 1
69655: PPUSH
69656: CALL_OW 12
69660: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69661: LD_ADDR_VAR 0 2
69665: PUSH
69666: LD_VAR 0 2
69670: PPUSH
69671: LD_VAR 0 2
69675: PUSH
69676: LD_INT 1
69678: PLUS
69679: PPUSH
69680: LD_VAR 0 1
69684: PUSH
69685: LD_VAR 0 4
69689: ARRAY
69690: PPUSH
69691: CALL_OW 2
69695: ST_TO_ADDR
// array := Delete ( array , index ) ;
69696: LD_ADDR_VAR 0 1
69700: PUSH
69701: LD_VAR 0 1
69705: PPUSH
69706: LD_VAR 0 4
69710: PPUSH
69711: CALL_OW 3
69715: ST_TO_ADDR
// end ;
69716: GO 69640
69718: POP
69719: POP
// end ;
69720: LD_VAR 0 2
69724: RET
// export function GetBaseMaterials ( base ) ; begin
69725: LD_INT 0
69727: PPUSH
// result := [ 0 , 0 , 0 ] ;
69728: LD_ADDR_VAR 0 2
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: LD_INT 0
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: ST_TO_ADDR
// if not base then
69747: LD_VAR 0 1
69751: NOT
69752: IFFALSE 69756
// exit ;
69754: GO 69805
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69756: LD_ADDR_VAR 0 2
69760: PUSH
69761: LD_VAR 0 1
69765: PPUSH
69766: LD_INT 1
69768: PPUSH
69769: CALL_OW 275
69773: PUSH
69774: LD_VAR 0 1
69778: PPUSH
69779: LD_INT 2
69781: PPUSH
69782: CALL_OW 275
69786: PUSH
69787: LD_VAR 0 1
69791: PPUSH
69792: LD_INT 3
69794: PPUSH
69795: CALL_OW 275
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: LIST
69804: ST_TO_ADDR
// end ;
69805: LD_VAR 0 2
69809: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69810: LD_INT 0
69812: PPUSH
69813: PPUSH
// result := array ;
69814: LD_ADDR_VAR 0 3
69818: PUSH
69819: LD_VAR 0 1
69823: ST_TO_ADDR
// if size > 0 then
69824: LD_VAR 0 2
69828: PUSH
69829: LD_INT 0
69831: GREATER
69832: IFFALSE 69878
// for i := array downto size do
69834: LD_ADDR_VAR 0 4
69838: PUSH
69839: DOUBLE
69840: LD_VAR 0 1
69844: INC
69845: ST_TO_ADDR
69846: LD_VAR 0 2
69850: PUSH
69851: FOR_DOWNTO
69852: IFFALSE 69876
// result := Delete ( result , result ) ;
69854: LD_ADDR_VAR 0 3
69858: PUSH
69859: LD_VAR 0 3
69863: PPUSH
69864: LD_VAR 0 3
69868: PPUSH
69869: CALL_OW 3
69873: ST_TO_ADDR
69874: GO 69851
69876: POP
69877: POP
// end ;
69878: LD_VAR 0 3
69882: RET
// export function ComExit ( unit ) ; var tmp ; begin
69883: LD_INT 0
69885: PPUSH
69886: PPUSH
// if not IsInUnit ( unit ) then
69887: LD_VAR 0 1
69891: PPUSH
69892: CALL_OW 310
69896: NOT
69897: IFFALSE 69901
// exit ;
69899: GO 69961
// tmp := IsInUnit ( unit ) ;
69901: LD_ADDR_VAR 0 3
69905: PUSH
69906: LD_VAR 0 1
69910: PPUSH
69911: CALL_OW 310
69915: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69916: LD_VAR 0 3
69920: PPUSH
69921: CALL_OW 247
69925: PUSH
69926: LD_INT 2
69928: EQUAL
69929: IFFALSE 69942
// ComExitVehicle ( unit ) else
69931: LD_VAR 0 1
69935: PPUSH
69936: CALL_OW 121
69940: GO 69951
// ComExitBuilding ( unit ) ;
69942: LD_VAR 0 1
69946: PPUSH
69947: CALL_OW 122
// result := tmp ;
69951: LD_ADDR_VAR 0 2
69955: PUSH
69956: LD_VAR 0 3
69960: ST_TO_ADDR
// end ;
69961: LD_VAR 0 2
69965: RET
// export function ResetHc ; begin
69966: LD_INT 0
69968: PPUSH
// InitHc ;
69969: CALL_OW 19
// hc_importance := 0 ;
69973: LD_ADDR_OWVAR 32
69977: PUSH
69978: LD_INT 0
69980: ST_TO_ADDR
// end ;
69981: LD_VAR 0 1
69985: RET
