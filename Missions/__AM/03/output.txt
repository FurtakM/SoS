// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39116 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39116 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39116 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39116 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39116 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39116 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39116 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39116 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 41218 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39116 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39116 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39116 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39116 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39116 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39116 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39116 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 4
5425: PUSH
5426: LD_INT 4
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 76537 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 76537 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9855
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9855
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9835
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9794
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9646
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL_OW 310
9566: PUSH
9567: LD_VAR 0 7
9571: PPUSH
9572: CALL_OW 310
9576: PPUSH
9577: CALL_OW 266
9581: PUSH
9582: LD_INT 3
9584: EQUAL
9585: AND
9586: IFFALSE 9597
// ComExitBuilding ( i ) ;
9588: LD_VAR 0 7
9592: PPUSH
9593: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9597: LD_VAR 0 7
9601: PPUSH
9602: CALL_OW 310
9606: PUSH
9607: LD_VAR 0 7
9611: PPUSH
9612: CALL_OW 310
9616: PPUSH
9617: CALL_OW 266
9621: PUSH
9622: LD_INT 2
9624: EQUAL
9625: AND
9626: IFFALSE 9637
// ComExitVehicle ( i ) ;
9628: LD_VAR 0 7
9632: PPUSH
9633: CALL_OW 121
// wait ( 0 0$1 ) ;
9637: LD_INT 35
9639: PPUSH
9640: CALL_OW 67
// end ;
9644: GO 9554
9646: POP
9647: POP
// ComFree ( tmp ) ;
9648: LD_VAR 0 6
9652: PPUSH
9653: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9657: LD_VAR 0 6
9661: PPUSH
9662: LD_INT 15
9664: PPUSH
9665: CALL_OW 173
// AddComHold ( tmp ) ;
9669: LD_VAR 0 6
9673: PPUSH
9674: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9678: LD_INT 35
9680: PPUSH
9681: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9685: LD_VAR 0 6
9689: PUSH
9690: LD_INT 1
9692: ARRAY
9693: PPUSH
9694: CALL_OW 314
9698: NOT
9699: IFFALSE 9713
// ComMoveToArea ( tmp , cyrusEscape ) ;
9701: LD_VAR 0 6
9705: PPUSH
9706: LD_INT 15
9708: PPUSH
9709: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 1
9720: ARRAY
9721: PPUSH
9722: LD_INT 15
9724: PPUSH
9725: CALL_OW 308
9729: IFFALSE 9784
// begin RemoveUnit ( tmp [ 1 ] ) ;
9731: LD_VAR 0 6
9735: PUSH
9736: LD_INT 1
9738: ARRAY
9739: PPUSH
9740: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9744: LD_ADDR_EXP 4
9748: PUSH
9749: LD_EXP 4
9753: PUSH
9754: LD_VAR 0 6
9758: PUSH
9759: LD_INT 1
9761: ARRAY
9762: DIFF
9763: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9764: LD_ADDR_VAR 0 6
9768: PUSH
9769: LD_VAR 0 6
9773: PUSH
9774: LD_VAR 0 6
9778: PUSH
9779: LD_INT 1
9781: ARRAY
9782: DIFF
9783: ST_TO_ADDR
// end ; until tmp = 0 ;
9784: LD_VAR 0 6
9788: PUSH
9789: LD_INT 0
9791: EQUAL
9792: IFFALSE 9678
// end ; wait ( 0 0$30 ) ;
9794: LD_INT 1050
9796: PPUSH
9797: CALL_OW 67
// if ru_spec_patrol then
9801: LD_EXP 54
9805: IFFALSE 9833
// for i in ru_spec_patrol do
9807: LD_ADDR_VAR 0 7
9811: PUSH
9812: LD_EXP 54
9816: PUSH
9817: FOR_IN
9818: IFFALSE 9831
// RemoveUnit ( i ) ;
9820: LD_VAR 0 7
9824: PPUSH
9825: CALL_OW 64
9829: GO 9817
9831: POP
9832: POP
// end else
9833: GO 9855
// begin prepare_siege := false ;
9835: LD_ADDR_EXP 31
9839: PUSH
9840: LD_INT 0
9842: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9843: LD_EXP 37
9847: PPUSH
9848: LD_STRING D8a-JMM-1
9850: PPUSH
9851: CALL_OW 88
// end ; end ;
9855: PPOPN 7
9857: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9858: LD_EXP 12
9862: IFFALSE 11130
9864: GO 9866
9866: DISABLE
9867: LD_INT 0
9869: PPUSH
9870: PPUSH
9871: PPUSH
// begin uc_side := 8 ;
9872: LD_ADDR_OWVAR 20
9876: PUSH
9877: LD_INT 8
9879: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9880: LD_ADDR_VAR 0 3
9884: PUSH
9885: LD_INT 59
9887: PUSH
9888: LD_INT 71
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 122
9897: PUSH
9898: LD_INT 117
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9909: LD_ADDR_EXP 51
9913: PUSH
9914: LD_STRING Frank
9916: PPUSH
9917: LD_INT 0
9919: PPUSH
9920: LD_STRING 
9922: PPUSH
9923: CALL 39116 0 3
9927: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9928: LD_ADDR_VAR 0 1
9932: PUSH
9933: LD_INT 1
9935: PPUSH
9936: LD_INT 2
9938: PPUSH
9939: CALL_OW 12
9943: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9944: LD_EXP 51
9948: PPUSH
9949: LD_VAR 0 3
9953: PUSH
9954: LD_VAR 0 1
9958: ARRAY
9959: PUSH
9960: LD_INT 1
9962: ARRAY
9963: PPUSH
9964: LD_VAR 0 3
9968: PUSH
9969: LD_VAR 0 1
9973: ARRAY
9974: PUSH
9975: LD_INT 2
9977: ARRAY
9978: PPUSH
9979: LD_INT 0
9981: PPUSH
9982: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9986: LD_EXP 51
9990: PPUSH
9991: LD_INT 1
9993: PPUSH
9994: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
10005: LD_EXP 51
10009: PPUSH
10010: LD_EXP 37
10014: PPUSH
10015: CALL_OW 296
10019: PUSH
10020: LD_INT 8
10022: LESS
10023: PUSH
10024: LD_EXP 51
10028: PPUSH
10029: CALL_OW 256
10033: PUSH
10034: LD_INT 250
10036: GREATER
10037: AND
10038: IFFALSE 9998
// Video ( true ) ;
10040: LD_INT 1
10042: PPUSH
10043: CALL 76537 0 1
// CenterOnUnits ( JMM ) ;
10047: LD_EXP 37
10051: PPUSH
10052: CALL_OW 85
// if IsInUnit ( JMM ) then
10056: LD_EXP 37
10060: PPUSH
10061: CALL_OW 310
10065: IFFALSE 10076
// ComFree ( JMM ) ;
10067: LD_EXP 37
10071: PPUSH
10072: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10076: LD_EXP 37
10080: PPUSH
10081: LD_EXP 51
10085: PPUSH
10086: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10090: LD_EXP 51
10094: PPUSH
10095: LD_EXP 37
10099: PPUSH
10100: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10104: LD_EXP 37
10108: PPUSH
10109: LD_STRING D6-JMM-1
10111: PPUSH
10112: CALL_OW 88
// p := 0 ;
10116: LD_ADDR_VAR 0 2
10120: PUSH
10121: LD_INT 0
10123: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10124: LD_INT 35
10126: PPUSH
10127: CALL_OW 67
// p := p + 1 ;
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_VAR 0 2
10140: PUSH
10141: LD_INT 1
10143: PLUS
10144: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10145: LD_EXP 37
10149: PPUSH
10150: LD_EXP 51
10154: PPUSH
10155: CALL_OW 296
10159: PUSH
10160: LD_INT 8
10162: LESS
10163: PUSH
10164: LD_VAR 0 2
10168: PUSH
10169: LD_INT 7
10171: GREATER
10172: OR
10173: IFFALSE 10124
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10175: LD_EXP 40
10179: PUSH
10180: LD_EXP 40
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 296
10194: PUSH
10195: LD_INT 20
10197: LESS
10198: AND
10199: PUSH
10200: LD_EXP 40
10204: PUSH
10205: LD_EXP 4
10209: IN
10210: AND
10211: IFFALSE 10236
// begin ComFree ( Lisa ) ;
10213: LD_EXP 40
10217: PPUSH
10218: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10222: LD_EXP 40
10226: PPUSH
10227: LD_EXP 51
10231: PPUSH
10232: CALL_OW 172
// end ; if Lynch then
10236: LD_EXP 47
10240: IFFALSE 10265
// begin ComFree ( Lynch ) ;
10242: LD_EXP 47
10246: PPUSH
10247: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10251: LD_EXP 47
10255: PPUSH
10256: LD_EXP 51
10260: PPUSH
10261: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10265: LD_EXP 37
10269: PPUSH
10270: LD_EXP 51
10274: PPUSH
10275: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10279: LD_EXP 51
10283: PPUSH
10284: LD_EXP 37
10288: PPUSH
10289: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10293: LD_EXP 51
10297: PPUSH
10298: LD_STRING D6-Frank-1
10300: PPUSH
10301: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10305: LD_INT 69
10307: PPUSH
10308: LD_INT 20
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_INT 20
10316: NEG
10317: PPUSH
10318: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10322: LD_INT 69
10324: PPUSH
10325: LD_INT 20
10327: PPUSH
10328: LD_INT 1
10330: PPUSH
10331: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10335: LD_INT 190
10337: PPUSH
10338: LD_INT 31
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: LD_INT 20
10346: NEG
10347: PPUSH
10348: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10352: LD_INT 190
10354: PPUSH
10355: LD_INT 31
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10365: LD_INT 69
10367: PPUSH
10368: LD_INT 20
10370: PPUSH
10371: CALL_OW 84
// Wait ( 0 0$02 ) ;
10375: LD_INT 70
10377: PPUSH
10378: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10382: LD_EXP 37
10386: PPUSH
10387: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10391: LD_EXP 40
10395: PUSH
10396: LD_EXP 40
10400: PPUSH
10401: LD_EXP 51
10405: PPUSH
10406: CALL_OW 296
10410: PUSH
10411: LD_INT 20
10413: LESS
10414: AND
10415: PUSH
10416: LD_EXP 40
10420: PPUSH
10421: CALL_OW 302
10425: AND
10426: PUSH
10427: LD_EXP 40
10431: PUSH
10432: LD_EXP 4
10436: IN
10437: AND
10438: IFFALSE 10560
// begin ComFree ( Lisa ) ;
10440: LD_EXP 40
10444: PPUSH
10445: CALL_OW 139
// p := 0 ;
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: LD_INT 0
10456: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10457: LD_INT 35
10459: PPUSH
10460: CALL_OW 67
// p := p + 1 ;
10464: LD_ADDR_VAR 0 2
10468: PUSH
10469: LD_VAR 0 2
10473: PUSH
10474: LD_INT 1
10476: PLUS
10477: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10478: LD_EXP 40
10482: PPUSH
10483: LD_EXP 51
10487: PPUSH
10488: CALL_OW 296
10492: PUSH
10493: LD_INT 7
10495: LESS
10496: PUSH
10497: LD_VAR 0 2
10501: PUSH
10502: LD_INT 7
10504: GREATER
10505: OR
10506: IFFALSE 10457
// Say ( Lisa , D6-Lisa-1 ) ;
10508: LD_EXP 40
10512: PPUSH
10513: LD_STRING D6-Lisa-1
10515: PPUSH
10516: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10520: LD_EXP 40
10524: PPUSH
10525: LD_EXP 51
10529: PPUSH
10530: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10534: LD_EXP 51
10538: PPUSH
10539: LD_EXP 40
10543: PPUSH
10544: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10548: LD_EXP 51
10552: PPUSH
10553: LD_STRING D6-Frank-2
10555: PPUSH
10556: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10560: LD_EXP 47
10564: PUSH
10565: LD_EXP 47
10569: PPUSH
10570: LD_EXP 51
10574: PPUSH
10575: CALL_OW 296
10579: PUSH
10580: LD_INT 20
10582: LESS
10583: AND
10584: PUSH
10585: LD_EXP 47
10589: PPUSH
10590: CALL_OW 302
10594: AND
10595: IFFALSE 10788
// begin ComTurnUnit ( Lynch , JMM ) ;
10597: LD_EXP 47
10601: PPUSH
10602: LD_EXP 37
10606: PPUSH
10607: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10611: LD_EXP 51
10615: PPUSH
10616: LD_EXP 37
10620: PPUSH
10621: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10625: LD_EXP 47
10629: PPUSH
10630: LD_STRING D6-Sol1-2
10632: PPUSH
10633: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10637: LD_EXP 37
10641: PPUSH
10642: LD_STRING D6-JMM-2
10644: PPUSH
10645: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10649: LD_EXP 51
10653: PPUSH
10654: LD_STRING D6-Frank-3
10656: PPUSH
10657: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10661: LD_EXP 37
10665: PPUSH
10666: LD_STRING D6-JMM-3
10668: PPUSH
10669: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10673: LD_EXP 51
10677: PPUSH
10678: LD_STRING D6-Frank-4
10680: PPUSH
10681: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10685: LD_EXP 51
10689: PPUSH
10690: LD_STRING D6-Frank-4a
10692: PPUSH
10693: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10697: LD_EXP 37
10701: PPUSH
10702: LD_STRING D6-JMM-4
10704: PPUSH
10705: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10709: LD_EXP 51
10713: PPUSH
10714: LD_STRING D6-Frank-5
10716: PPUSH
10717: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10721: LD_EXP 40
10725: PUSH
10726: LD_EXP 40
10730: PPUSH
10731: CALL_OW 302
10735: AND
10736: PUSH
10737: LD_EXP 40
10741: PUSH
10742: LD_EXP 4
10746: IN
10747: AND
10748: IFFALSE 10762
// Say ( Lisa , D6-Lisa-5 ) ;
10750: LD_EXP 40
10754: PPUSH
10755: LD_STRING D6-Lisa-5
10757: PPUSH
10758: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10762: LD_EXP 51
10766: PPUSH
10767: LD_STRING D6-Frank-6
10769: PPUSH
10770: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10774: LD_EXP 37
10778: PPUSH
10779: LD_STRING D6-JMM-6
10781: PPUSH
10782: CALL_OW 88
// end else
10786: GO 10915
// begin ComTurnUnit ( Frank , JMM ) ;
10788: LD_EXP 51
10792: PPUSH
10793: LD_EXP 37
10797: PPUSH
10798: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10802: LD_EXP 51
10806: PPUSH
10807: LD_STRING D6-Frank-4
10809: PPUSH
10810: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10814: LD_EXP 51
10818: PPUSH
10819: LD_STRING D6-Frank-4a
10821: PPUSH
10822: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10826: LD_EXP 37
10830: PPUSH
10831: LD_STRING D6-JMM-4
10833: PPUSH
10834: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10838: LD_EXP 51
10842: PPUSH
10843: LD_STRING D6-Frank-5
10845: PPUSH
10846: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10850: LD_EXP 40
10854: PUSH
10855: LD_EXP 40
10859: PPUSH
10860: CALL_OW 302
10864: AND
10865: PUSH
10866: LD_EXP 40
10870: PUSH
10871: LD_EXP 4
10875: IN
10876: AND
10877: IFFALSE 10891
// Say ( Lisa , D6-Lisa-5 ) ;
10879: LD_EXP 40
10883: PPUSH
10884: LD_STRING D6-Lisa-5
10886: PPUSH
10887: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10891: LD_EXP 51
10895: PPUSH
10896: LD_STRING D6-Frank-6
10898: PPUSH
10899: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10903: LD_EXP 37
10907: PPUSH
10908: LD_STRING D6-JMM-6
10910: PPUSH
10911: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10915: LD_STRING Q1
10917: PPUSH
10918: CALL_OW 97
10922: PUSH
10923: LD_INT 1
10925: DOUBLE
10926: EQUAL
10927: IFTRUE 10931
10929: GO 10942
10931: POP
// frank_send_to_scout := true ; 2 :
10932: LD_ADDR_EXP 15
10936: PUSH
10937: LD_INT 1
10939: ST_TO_ADDR
10940: GO 10962
10942: LD_INT 2
10944: DOUBLE
10945: EQUAL
10946: IFTRUE 10950
10948: GO 10961
10950: POP
// frank_send_to_scout := false ; end ;
10951: LD_ADDR_EXP 15
10955: PUSH
10956: LD_INT 0
10958: ST_TO_ADDR
10959: GO 10962
10961: POP
// Video ( false ) ;
10962: LD_INT 0
10964: PPUSH
10965: CALL 76537 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10969: LD_EXP 37
10973: PUSH
10974: LD_EXP 40
10978: PUSH
10979: LD_EXP 47
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PPUSH
10989: CALL_OW 139
// if frank_send_to_scout then
10993: LD_EXP 15
10997: IFFALSE 11051
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10999: LD_EXP 51
11003: PPUSH
11004: LD_INT 15
11006: PPUSH
11007: CALL_OW 113
// wait ( 0 0$01 ) ;
11011: LD_INT 35
11013: PPUSH
11014: CALL_OW 67
// until not See ( 1 , Frank ) ;
11018: LD_INT 1
11020: PPUSH
11021: LD_EXP 51
11025: PPUSH
11026: CALL_OW 292
11030: NOT
11031: IFFALSE 10999
// wait ( 0 0$02 ) ;
11033: LD_INT 70
11035: PPUSH
11036: CALL_OW 67
// RemoveUnit ( Frank ) ;
11040: LD_EXP 51
11044: PPUSH
11045: CALL_OW 64
// end else
11049: GO 11063
// SetSide ( Frank , 1 ) ;
11051: LD_EXP 51
11055: PPUSH
11056: LD_INT 1
11058: PPUSH
11059: CALL_OW 235
// send_attack_on_cornel_base := true ;
11063: LD_ADDR_EXP 26
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11071: LD_INT 35
11073: PPUSH
11074: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11078: LD_ADDR_EXP 29
11082: PUSH
11083: LD_EXP 29
11087: PPUSH
11088: LD_STRING -
11090: PPUSH
11091: CALL 1077 0 2
11095: ST_TO_ADDR
// if debug then
11096: LD_EXP 1
11100: IFFALSE 11112
// debug_strings := time_to_prepare ;
11102: LD_ADDR_OWVAR 48
11106: PUSH
11107: LD_EXP 29
11111: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11112: LD_EXP 29
11116: PUSH
11117: LD_INT 0
11119: EQUAL
11120: IFFALSE 11071
// cornel_prepared := true ;
11122: LD_ADDR_EXP 11
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// end ;
11130: PPOPN 3
11132: END
// every 0 0$01 trigger cornel_prepared do
11133: LD_EXP 11
11137: IFFALSE 11445
11139: GO 11141
11141: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11142: LD_EXP 44
11146: PPUSH
11147: LD_STRING D3-Corn-1
11149: PPUSH
11150: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11154: LD_STRING MOutWait
11156: PPUSH
11157: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11161: LD_INT 35
11163: PPUSH
11164: CALL_OW 67
// until cornel_counter = 0 ;
11168: LD_EXP 10
11172: PUSH
11173: LD_INT 0
11175: EQUAL
11176: IFFALSE 11161
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11178: LD_EXP 44
11182: PPUSH
11183: LD_STRING D3a-Corn-1
11185: PPUSH
11186: CALL_OW 94
// if IsOk ( Cornel ) then
11190: LD_EXP 44
11194: PPUSH
11195: CALL_OW 302
11199: IFFALSE 11213
// Say ( JMM , D3a-JMM-1 ) ;
11201: LD_EXP 37
11205: PPUSH
11206: LD_STRING D3a-JMM-1
11208: PPUSH
11209: CALL_OW 88
// end_mission_allowed := true ;
11213: LD_ADDR_EXP 21
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11221: LD_STRING M2
11223: PPUSH
11224: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11228: LD_INT 9
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: CALL_OW 424
// Wait ( 0 0$05 ) ;
11238: LD_INT 175
11240: PPUSH
11241: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11245: LD_EXP 44
11249: PPUSH
11250: LD_STRING D3a-Corn-2
11252: PPUSH
11253: CALL_OW 94
// cornel_attack := true ;
11257: LD_ADDR_EXP 9
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11265: LD_INT 105
11267: PPUSH
11268: CALL_OW 67
// AddMoreTanks ( ) ;
11272: CALL 5402 0 0
// if frank_send_to_scout then
11276: LD_EXP 15
11280: IFFALSE 11445
// begin InitHc ;
11282: CALL_OW 19
// InitUc ;
11286: CALL_OW 18
// uc_side := 8 ;
11290: LD_ADDR_OWVAR 20
11294: PUSH
11295: LD_INT 8
11297: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11298: LD_ADDR_EXP 51
11302: PUSH
11303: LD_STRING Frank
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: LD_STRING 
11311: PPUSH
11312: CALL 39116 0 3
11316: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11317: LD_EXP 51
11321: PPUSH
11322: LD_INT 6
11324: PPUSH
11325: LD_INT 9
11327: PPUSH
11328: LD_INT 0
11330: PPUSH
11331: CALL_OW 48
// ComCrawl ( Frank ) ;
11335: LD_EXP 51
11339: PPUSH
11340: CALL_OW 137
// repeat wait ( 10 ) ;
11344: LD_INT 10
11346: PPUSH
11347: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_EXP 51
11360: PPUSH
11361: CALL_OW 296
11365: PUSH
11366: LD_INT 9
11368: LESS
11369: PUSH
11370: LD_INT 9
11372: PPUSH
11373: LD_INT 22
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PPUSH
11383: CALL_OW 70
11387: OR
11388: IFFALSE 11344
// if IsDead ( Frank ) then
11390: LD_EXP 51
11394: PPUSH
11395: CALL_OW 301
11399: IFFALSE 11403
// exit ;
11401: GO 11445
// CenterOnUnits ( Frank ) ;
11403: LD_EXP 51
11407: PPUSH
11408: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11412: LD_EXP 51
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11424: LD_EXP 51
11428: PPUSH
11429: LD_STRING D6a-Frank-1
11431: PPUSH
11432: CALL_OW 88
// ComWalk ( Frank ) ;
11436: LD_EXP 51
11440: PPUSH
11441: CALL_OW 138
// end ; end ;
11445: END
// every 0 0$01 trigger solar_builded do
11446: LD_EXP 14
11450: IFFALSE 11554
11452: GO 11454
11454: DISABLE
// begin Wait ( 0 0$02 ) ;
11455: LD_INT 70
11457: PPUSH
11458: CALL_OW 67
// DialogueOn ;
11462: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11466: LD_EXP 37
11470: PPUSH
11471: LD_STRING D2b-JMM-1
11473: PPUSH
11474: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11478: LD_EXP 48
11482: PUSH
11483: LD_EXP 48
11487: PPUSH
11488: CALL_OW 302
11492: AND
11493: IFFALSE 11543
// begin Say ( Walker , D2b-Sci1-1 ) ;
11495: LD_EXP 48
11499: PPUSH
11500: LD_STRING D2b-Sci1-1
11502: PPUSH
11503: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11507: LD_EXP 37
11511: PPUSH
11512: LD_STRING D2b-JMM-2
11514: PPUSH
11515: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11519: LD_EXP 48
11523: PPUSH
11524: LD_STRING D2b-Sci1-2
11526: PPUSH
11527: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11531: LD_EXP 37
11535: PPUSH
11536: LD_STRING D2b-JMM-3
11538: PPUSH
11539: CALL_OW 88
// end ; DialogueOff ;
11543: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11547: LD_STRING MOutSol
11549: PPUSH
11550: CALL_OW 337
// end ;
11554: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11555: LD_EXP 14
11559: PUSH
11560: LD_EXP 37
11564: PPUSH
11565: CALL_OW 302
11569: AND
11570: PUSH
11571: LD_EXP 37
11575: PPUSH
11576: CALL 911 0 1
11580: AND
11581: PUSH
11582: LD_EXP 16
11586: NOT
11587: AND
11588: IFFALSE 11659
11590: GO 11592
11592: DISABLE
11593: LD_INT 0
11595: PPUSH
// begin jmm_in_veh := true ;
11596: LD_ADDR_EXP 16
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11604: LD_ADDR_VAR 0 1
11608: PUSH
11609: LD_INT 0
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 12
11619: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11620: LD_INT 70
11622: PPUSH
11623: CALL_OW 67
// if i then
11627: LD_VAR 0 1
11631: IFFALSE 11647
// Say ( JMM , D2c-JMM-1 ) else
11633: LD_EXP 37
11637: PPUSH
11638: LD_STRING D2c-JMM-1
11640: PPUSH
11641: CALL_OW 88
11645: GO 11659
// Say ( JMM , D2c-JMM-1a ) ;
11647: LD_EXP 37
11651: PPUSH
11652: LD_STRING D2c-JMM-1a
11654: PPUSH
11655: CALL_OW 88
// end ;
11659: PPOPN 1
11661: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11662: LD_EXP 14
11666: PUSH
11667: LD_EXP 38
11671: PPUSH
11672: CALL_OW 302
11676: AND
11677: PUSH
11678: LD_EXP 38
11682: PPUSH
11683: CALL 911 0 1
11687: AND
11688: PUSH
11689: LD_EXP 17
11693: NOT
11694: AND
11695: IFFALSE 11727
11697: GO 11699
11699: DISABLE
// begin bobby_in_veh := true ;
11700: LD_ADDR_EXP 17
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11708: LD_INT 70
11710: PPUSH
11711: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11715: LD_EXP 38
11719: PPUSH
11720: LD_STRING D2c-Bobby-1
11722: PPUSH
11723: CALL_OW 88
11727: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11728: LD_EXP 14
11732: PUSH
11733: LD_EXP 40
11737: PPUSH
11738: CALL_OW 302
11742: AND
11743: PUSH
11744: LD_EXP 40
11748: PPUSH
11749: CALL 911 0 1
11753: AND
11754: PUSH
11755: LD_EXP 19
11759: NOT
11760: AND
11761: IFFALSE 11793
11763: GO 11765
11765: DISABLE
// begin lisa_in_veh := true ;
11766: LD_ADDR_EXP 19
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11774: LD_INT 70
11776: PPUSH
11777: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11781: LD_EXP 40
11785: PPUSH
11786: LD_STRING D2c-Lisa-1
11788: PPUSH
11789: CALL_OW 88
11793: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11794: LD_EXP 14
11798: PUSH
11799: LD_EXP 39
11803: PPUSH
11804: CALL_OW 302
11808: AND
11809: PUSH
11810: LD_EXP 39
11814: PPUSH
11815: CALL 911 0 1
11819: AND
11820: PUSH
11821: LD_EXP 18
11825: NOT
11826: AND
11827: IFFALSE 11898
11829: GO 11831
11831: DISABLE
11832: LD_INT 0
11834: PPUSH
// begin cyrus_in_veh := true ;
11835: LD_ADDR_EXP 18
11839: PUSH
11840: LD_INT 1
11842: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11843: LD_ADDR_VAR 0 1
11847: PUSH
11848: LD_INT 0
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: CALL_OW 12
11858: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11859: LD_INT 70
11861: PPUSH
11862: CALL_OW 67
// if i then
11866: LD_VAR 0 1
11870: IFFALSE 11886
// Say ( Cyrus , D2c-Cyrus-1 ) else
11872: LD_EXP 39
11876: PPUSH
11877: LD_STRING D2c-Cyrus-1
11879: PPUSH
11880: CALL_OW 88
11884: GO 11898
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11886: LD_EXP 39
11890: PPUSH
11891: LD_STRING D2c-Cyrus-1a
11893: PPUSH
11894: CALL_OW 88
// end ;
11898: PPOPN 1
11900: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11901: LD_EXP 44
11905: PPUSH
11906: LD_INT 16
11908: PPUSH
11909: CALL_OW 308
11913: IFFALSE 12194
11915: GO 11917
11917: DISABLE
11918: LD_INT 0
11920: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11921: LD_INT 3
11923: PPUSH
11924: LD_EXP 44
11928: PPUSH
11929: CALL_OW 471
// send_attack_on_cornel := true ;
11933: LD_ADDR_EXP 32
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if ru_vehicles then
11941: LD_EXP 56
11945: IFFALSE 11979
// for i in ru_vehicles do
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: LD_EXP 56
11956: PUSH
11957: FOR_IN
11958: IFFALSE 11977
// ComAgressiveMove ( i , 215 , 69 ) ;
11960: LD_VAR 0 1
11964: PPUSH
11965: LD_INT 215
11967: PPUSH
11968: LD_INT 69
11970: PPUSH
11971: CALL_OW 114
11975: GO 11957
11977: POP
11978: POP
// if ru_patrol then
11979: LD_EXP 53
11983: IFFALSE 12017
// for i in ru_patrol do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: LD_EXP 53
11994: PUSH
11995: FOR_IN
11996: IFFALSE 12015
// ComAgressiveMove ( i , 215 , 69 ) ;
11998: LD_VAR 0 1
12002: PPUSH
12003: LD_INT 215
12005: PPUSH
12006: LD_INT 69
12008: PPUSH
12009: CALL_OW 114
12013: GO 11995
12015: POP
12016: POP
// if frank_send_to_scout then
12017: LD_EXP 15
12021: IFFALSE 12035
// SayRadio ( Frank , D3b-Frank-1 ) ;
12023: LD_EXP 51
12027: PPUSH
12028: LD_STRING D3b-Frank-1
12030: PPUSH
12031: CALL_OW 94
// wait ( 0 0$03 ) ;
12035: LD_INT 105
12037: PPUSH
12038: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
12042: LD_EXP 44
12046: PPUSH
12047: LD_STRING D4-Corn-1
12049: PPUSH
12050: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
12054: LD_INT 35
12056: PPUSH
12057: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
12061: LD_INT 22
12063: PUSH
12064: LD_INT 4
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 21
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 3
12083: PUSH
12084: LD_INT 24
12086: PUSH
12087: LD_INT 1000
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 69
12107: PUSH
12108: LD_INT 6
12110: LESS
12111: IFFALSE 12054
// if Cornel then
12113: LD_EXP 44
12117: IFFALSE 12157
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12119: LD_EXP 44
12123: PPUSH
12124: LD_STRING D5-Corn-1
12126: PPUSH
12127: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12131: LD_EXP 44
12135: PPUSH
12136: LD_EXP 2
12140: PUSH
12141: LD_STRING Cornel
12143: STR
12144: PPUSH
12145: CALL_OW 38
// cornel_saved := true ;
12149: LD_ADDR_EXP 27
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12157: LD_INT 4
12159: PPUSH
12160: LD_INT 8
12162: PPUSH
12163: CALL_OW 343
// wait ( 0 0$01 ) ;
12167: LD_INT 35
12169: PPUSH
12170: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12174: LD_INT 3
12176: PPUSH
12177: LD_EXP 44
12181: PPUSH
12182: CALL_OW 472
// send_attack_on_cornel := false ;
12186: LD_ADDR_EXP 32
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// end ;
12194: PPOPN 1
12196: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12197: LD_INT 9
12199: PPUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 70
12214: PUSH
12215: LD_EXP 33
12219: OR
12220: IFFALSE 12441
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
// begin enable ;
12229: ENABLE
// if not jmm_on_west then
12230: LD_EXP 5
12234: NOT
12235: IFFALSE 12246
// begin YouLost ( 4 ) ;
12237: LD_STRING 4
12239: PPUSH
12240: CALL_OW 104
// exit ;
12244: GO 12441
// end ; if not game_end then
12246: LD_EXP 33
12250: NOT
12251: IFFALSE 12261
// game_end := true ;
12253: LD_ADDR_EXP 33
12257: PUSH
12258: LD_INT 1
12260: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12261: LD_ADDR_VAR 0 2
12265: PUSH
12266: LD_INT 9
12268: PPUSH
12269: LD_INT 22
12271: PUSH
12272: LD_INT 1
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 70
12283: ST_TO_ADDR
// if not filter then
12284: LD_VAR 0 2
12288: NOT
12289: IFFALSE 12293
// exit ;
12291: GO 12441
// for i in filter do
12293: LD_ADDR_VAR 0 1
12297: PUSH
12298: LD_VAR 0 2
12302: PUSH
12303: FOR_IN
12304: IFFALSE 12439
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 302
12315: PUSH
12316: LD_VAR 0 1
12320: PPUSH
12321: CALL_OW 247
12325: PUSH
12326: LD_INT 2
12328: EQUAL
12329: AND
12330: IFFALSE 12402
// begin if i = JMM and save_group < 4 then
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 37
12341: EQUAL
12342: PUSH
12343: LD_EXP 23
12347: PUSH
12348: LD_INT 4
12350: LESS
12351: AND
12352: IFFALSE 12356
// continue ;
12354: GO 12303
// if GetNation ( i ) = nation_american then
12356: LD_VAR 0 1
12360: PPUSH
12361: CALL_OW 248
12365: PUSH
12366: LD_INT 1
12368: EQUAL
12369: IFFALSE 12379
// veh_on_meta := true ;
12371: LD_ADDR_EXP 28
12375: PUSH
12376: LD_INT 1
12378: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: CALL_OW 311
12388: PPUSH
12389: CALL 12444 0 1
// RemoveUnit ( i ) ;
12393: LD_VAR 0 1
12397: PPUSH
12398: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 302
12411: PUSH
12412: LD_VAR 0 1
12416: PPUSH
12417: CALL_OW 247
12421: PUSH
12422: LD_INT 1
12424: EQUAL
12425: AND
12426: IFFALSE 12437
// Save ( i ) ;
12428: LD_VAR 0 1
12432: PPUSH
12433: CALL 12444 0 1
// end ;
12437: GO 12303
12439: POP
12440: POP
// end ;
12441: PPOPN 2
12443: END
// export function Save ( i ) ; begin
12444: LD_INT 0
12446: PPUSH
// if i = JMM and save_counter >= 4 then
12447: LD_VAR 0 1
12451: PUSH
12452: LD_EXP 37
12456: EQUAL
12457: PUSH
12458: LD_EXP 36
12462: PUSH
12463: LD_INT 4
12465: GREATEREQUAL
12466: AND
12467: IFFALSE 12603
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12469: LD_EXP 24
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 1
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 69
12502: PUSH
12503: LD_INT 1
12505: GREATER
12506: AND
12507: IFFALSE 12564
// begin show_query := false ;
12509: LD_ADDR_EXP 24
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12517: LD_STRING Q2
12519: PPUSH
12520: CALL_OW 97
12524: PUSH
12525: LD_INT 1
12527: DOUBLE
12528: EQUAL
12529: IFTRUE 12533
12531: GO 12544
12533: POP
// wait_for_them := true ; 2 :
12534: LD_ADDR_EXP 25
12538: PUSH
12539: LD_INT 1
12541: ST_TO_ADDR
12542: GO 12564
12544: LD_INT 2
12546: DOUBLE
12547: EQUAL
12548: IFTRUE 12552
12550: GO 12563
12552: POP
// wait_for_them := false ; end ;
12553: LD_ADDR_EXP 25
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
12561: GO 12564
12563: POP
// end ; save_counter := save_counter + 1 ;
12564: LD_ADDR_EXP 36
12568: PUSH
12569: LD_EXP 36
12573: PUSH
12574: LD_INT 1
12576: PLUS
12577: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12578: LD_ADDR_EXP 23
12582: PUSH
12583: LD_EXP 23
12587: PUSH
12588: LD_EXP 37
12592: ADD
12593: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12594: LD_EXP 37
12598: PPUSH
12599: CALL_OW 64
// end ; if i = Lisa then
12603: LD_VAR 0 1
12607: PUSH
12608: LD_EXP 40
12612: EQUAL
12613: IFFALSE 12654
// begin save_counter := save_counter + 1 ;
12615: LD_ADDR_EXP 36
12619: PUSH
12620: LD_EXP 36
12624: PUSH
12625: LD_INT 1
12627: PLUS
12628: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12629: LD_ADDR_EXP 23
12633: PUSH
12634: LD_EXP 23
12638: PUSH
12639: LD_EXP 40
12643: ADD
12644: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12645: LD_EXP 40
12649: PPUSH
12650: CALL_OW 64
// end ; if i = Bobby then
12654: LD_VAR 0 1
12658: PUSH
12659: LD_EXP 38
12663: EQUAL
12664: IFFALSE 12705
// begin save_counter := save_counter + 1 ;
12666: LD_ADDR_EXP 36
12670: PUSH
12671: LD_EXP 36
12675: PUSH
12676: LD_INT 1
12678: PLUS
12679: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12680: LD_ADDR_EXP 23
12684: PUSH
12685: LD_EXP 23
12689: PUSH
12690: LD_EXP 38
12694: ADD
12695: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12696: LD_EXP 38
12700: PPUSH
12701: CALL_OW 64
// end ; if i = Cyrus then
12705: LD_VAR 0 1
12709: PUSH
12710: LD_EXP 39
12714: EQUAL
12715: IFFALSE 12756
// begin save_counter := save_counter + 1 ;
12717: LD_ADDR_EXP 36
12721: PUSH
12722: LD_EXP 36
12726: PUSH
12727: LD_INT 1
12729: PLUS
12730: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12731: LD_ADDR_EXP 23
12735: PUSH
12736: LD_EXP 23
12740: PUSH
12741: LD_EXP 39
12745: ADD
12746: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12747: LD_EXP 39
12751: PPUSH
12752: CALL_OW 64
// end ; if i = Khatam then
12756: LD_VAR 0 1
12760: PUSH
12761: LD_EXP 41
12765: EQUAL
12766: IFFALSE 12807
// begin save_counter := save_counter + 1 ;
12768: LD_ADDR_EXP 36
12772: PUSH
12773: LD_EXP 36
12777: PUSH
12778: LD_INT 1
12780: PLUS
12781: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12782: LD_ADDR_EXP 23
12786: PUSH
12787: LD_EXP 23
12791: PUSH
12792: LD_EXP 41
12796: ADD
12797: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12798: LD_EXP 41
12802: PPUSH
12803: CALL_OW 64
// end ; if i = Frank then
12807: LD_VAR 0 1
12811: PUSH
12812: LD_EXP 51
12816: EQUAL
12817: IFFALSE 12858
// begin save_counter := save_counter + 1 ;
12819: LD_ADDR_EXP 36
12823: PUSH
12824: LD_EXP 36
12828: PUSH
12829: LD_INT 1
12831: PLUS
12832: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12833: LD_ADDR_EXP 23
12837: PUSH
12838: LD_EXP 23
12842: PUSH
12843: LD_EXP 51
12847: ADD
12848: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12849: LD_EXP 51
12853: PPUSH
12854: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12858: LD_VAR 0 1
12862: PUSH
12863: LD_EXP 37
12867: NONEQUAL
12868: PUSH
12869: LD_VAR 0 1
12873: PPUSH
12874: CALL_OW 302
12878: AND
12879: PUSH
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 247
12889: PUSH
12890: LD_INT 1
12892: EQUAL
12893: AND
12894: PUSH
12895: LD_VAR 0 1
12899: PUSH
12900: LD_EXP 23
12904: IN
12905: NOT
12906: AND
12907: IFFALSE 12948
// begin save_counter := save_counter + 1 ;
12909: LD_ADDR_EXP 36
12913: PUSH
12914: LD_EXP 36
12918: PUSH
12919: LD_INT 1
12921: PLUS
12922: ST_TO_ADDR
// save_others := save_others ^ i ;
12923: LD_ADDR_EXP 22
12927: PUSH
12928: LD_EXP 22
12932: PUSH
12933: LD_VAR 0 1
12937: ADD
12938: ST_TO_ADDR
// RemoveUnit ( i ) ;
12939: LD_VAR 0 1
12943: PPUSH
12944: CALL_OW 64
// end ; end ;
12948: LD_VAR 0 2
12952: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12953: LD_EXP 24
12957: NOT
12958: PUSH
12959: LD_EXP 25
12963: NOT
12964: AND
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 21
12978: PUSH
12979: LD_INT 1
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: OR
12999: IFFALSE 13008
13001: GO 13003
13003: DISABLE
// EndMission ;
13004: CALL 13009 0 0
13008: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
// wait ( 0 0$01 ) ;
13016: LD_INT 35
13018: PPUSH
13019: CALL_OW 67
// if tick <= 12 12$00 then
13023: LD_OWVAR 1
13027: PUSH
13028: LD_INT 25200
13030: LESSEQUAL
13031: IFFALSE 13040
// SetAchievement ( ACH_ASPEED_3 ) ;
13033: LD_STRING ACH_ASPEED_3
13035: PPUSH
13036: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
13040: LD_EXP 23
13044: PUSH
13045: LD_EXP 22
13049: ADD
13050: PPUSH
13051: LD_INT 25
13053: PUSH
13054: LD_INT 4
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 72
13065: PUSH
13066: LD_INT 0
13068: EQUAL
13069: IFFALSE 13085
// begin wait ( 3 ) ;
13071: LD_INT 3
13073: PPUSH
13074: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13078: LD_STRING ACH_NOSCI
13080: PPUSH
13081: CALL_OW 543
// end ; m1 := solar_builded ;
13085: LD_ADDR_VAR 0 3
13089: PUSH
13090: LD_EXP 14
13094: ST_TO_ADDR
// m2 := veh_on_meta ;
13095: LD_ADDR_VAR 0 4
13099: PUSH
13100: LD_EXP 28
13104: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13105: LD_ADDR_VAR 0 5
13109: PUSH
13110: LD_EXP 34
13114: PUSH
13115: LD_INT 0
13117: EQUAL
13118: ST_TO_ADDR
// if solar_builded then
13119: LD_EXP 14
13123: IFFALSE 13137
// AddMedal ( Solar1 , 1 ) else
13125: LD_STRING Solar1
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 101
13135: GO 13148
// AddMedal ( Solar1 , - 1 ) ;
13137: LD_STRING Solar1
13139: PPUSH
13140: LD_INT 1
13142: NEG
13143: PPUSH
13144: CALL_OW 101
// if veh_on_meta then
13148: LD_EXP 28
13152: IFFALSE 13166
// AddMedal ( Solar2 , 1 ) else
13154: LD_STRING Solar2
13156: PPUSH
13157: LD_INT 1
13159: PPUSH
13160: CALL_OW 101
13164: GO 13196
// if solar_builded then
13166: LD_EXP 14
13170: IFFALSE 13185
// AddMedal ( Solar2 , - 1 ) else
13172: LD_STRING Solar2
13174: PPUSH
13175: LD_INT 1
13177: NEG
13178: PPUSH
13179: CALL_OW 101
13183: GO 13196
// AddMedal ( Solar2 , - 2 ) ;
13185: LD_STRING Solar2
13187: PPUSH
13188: LD_INT 2
13190: NEG
13191: PPUSH
13192: CALL_OW 101
// if lose_counter = 0 then
13196: LD_EXP 34
13200: PUSH
13201: LD_INT 0
13203: EQUAL
13204: IFFALSE 13218
// AddMedal ( No , 1 ) else
13206: LD_STRING No
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: CALL_OW 101
13216: GO 13262
// if lose_counter > 0 and lose_counter < 4 then
13218: LD_EXP 34
13222: PUSH
13223: LD_INT 0
13225: GREATER
13226: PUSH
13227: LD_EXP 34
13231: PUSH
13232: LD_INT 4
13234: LESS
13235: AND
13236: IFFALSE 13251
// AddMedal ( No , - 1 ) else
13238: LD_STRING No
13240: PPUSH
13241: LD_INT 1
13243: NEG
13244: PPUSH
13245: CALL_OW 101
13249: GO 13262
// AddMedal ( UpTo4 , - 1 ) ;
13251: LD_STRING UpTo4
13253: PPUSH
13254: LD_INT 1
13256: NEG
13257: PPUSH
13258: CALL_OW 101
// GiveMedals ( MAIN ) ;
13262: LD_STRING MAIN
13264: PPUSH
13265: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13269: LD_OWVAR 67
13273: PUSH
13274: LD_INT 3
13276: GREATEREQUAL
13277: PUSH
13278: LD_VAR 0 3
13282: AND
13283: PUSH
13284: LD_VAR 0 4
13288: AND
13289: PUSH
13290: LD_VAR 0 5
13294: AND
13295: IFFALSE 13307
// SetAchievementEX ( ACH_AMER , 3 ) ;
13297: LD_STRING ACH_AMER
13299: PPUSH
13300: LD_INT 3
13302: PPUSH
13303: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13307: LD_EXP 52
13311: PPUSH
13312: CALL_OW 301
13316: IFFALSE 13372
// begin stop_talking := true ;
13318: LD_ADDR_OWVAR 56
13322: PUSH
13323: LD_INT 1
13325: ST_TO_ADDR
// for i in save_group union save_others do
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_EXP 23
13335: PUSH
13336: LD_EXP 22
13340: UNION
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13362
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13345: LD_VAR 0 2
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: LD_INT 1500
13355: PPUSH
13356: CALL_OW 591
13360: GO 13342
13362: POP
13363: POP
// stop_talking := false ;
13364: LD_ADDR_OWVAR 56
13368: PUSH
13369: LD_INT 0
13371: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
13372: LD_EXP 23
13376: PUSH
13377: LD_EXP 22
13381: ADD
13382: PPUSH
13383: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13387: LD_EXP 37
13391: PPUSH
13392: LD_EXP 2
13396: PUSH
13397: LD_STRING JMM
13399: STR
13400: PPUSH
13401: CALL_OW 38
// if Bobby in save_group then
13405: LD_EXP 38
13409: PUSH
13410: LD_EXP 23
13414: IN
13415: IFFALSE 13435
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13417: LD_EXP 38
13421: PPUSH
13422: LD_EXP 2
13426: PUSH
13427: LD_STRING Bobby
13429: STR
13430: PPUSH
13431: CALL_OW 38
// if Cyrus in save_group then
13435: LD_EXP 39
13439: PUSH
13440: LD_EXP 23
13444: IN
13445: IFFALSE 13465
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13447: LD_EXP 39
13451: PPUSH
13452: LD_EXP 2
13456: PUSH
13457: LD_STRING Cyrus
13459: STR
13460: PPUSH
13461: CALL_OW 38
// if Lisa in save_group then
13465: LD_EXP 40
13469: PUSH
13470: LD_EXP 23
13474: IN
13475: IFFALSE 13495
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13477: LD_EXP 40
13481: PPUSH
13482: LD_EXP 2
13486: PUSH
13487: LD_STRING Lisa
13489: STR
13490: PPUSH
13491: CALL_OW 38
// if Frank in save_group then
13495: LD_EXP 51
13499: PUSH
13500: LD_EXP 23
13504: IN
13505: IFFALSE 13525
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13507: LD_EXP 51
13511: PPUSH
13512: LD_EXP 2
13516: PUSH
13517: LD_STRING Frank
13519: STR
13520: PPUSH
13521: CALL_OW 38
// if Khatam in save_group then
13525: LD_EXP 41
13529: PUSH
13530: LD_EXP 23
13534: IN
13535: IFFALSE 13555
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13537: LD_EXP 41
13541: PPUSH
13542: LD_EXP 2
13546: PUSH
13547: LD_STRING Khatam
13549: STR
13550: PPUSH
13551: CALL_OW 38
// if save_others then
13555: LD_EXP 22
13559: IFFALSE 13573
// SaveCharacters ( save_others , 03_others ) ;
13561: LD_EXP 22
13565: PPUSH
13566: LD_STRING 03_others
13568: PPUSH
13569: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13573: LD_EXP 45
13577: PUSH
13578: LD_EXP 45
13582: PPUSH
13583: CALL_OW 302
13587: AND
13588: PUSH
13589: LD_EXP 27
13593: AND
13594: IFFALSE 13606
// begin ResetFog ;
13596: CALL_OW 335
// DisplayEndingScene ;
13600: CALL 13628 0 0
// end else
13604: GO 13619
// DeleteCharacters ( mission_prefix & Cornel ) ;
13606: LD_EXP 2
13610: PUSH
13611: LD_STRING Cornel
13613: STR
13614: PPUSH
13615: CALL_OW 40
// YouWin ;
13619: CALL_OW 103
// end ;
13623: LD_VAR 0 1
13627: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13628: LD_INT 0
13630: PPUSH
13631: PPUSH
13632: PPUSH
13633: PPUSH
13634: PPUSH
13635: PPUSH
// InGameOn ;
13636: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13640: LD_INT 208
13642: PPUSH
13643: LD_INT 62
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: LD_INT 10
13651: NEG
13652: PPUSH
13653: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13657: LD_INT 208
13659: PPUSH
13660: LD_INT 62
13662: PPUSH
13663: LD_INT 1
13665: PPUSH
13666: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13670: LD_ADDR_VAR 0 3
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 3
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 2
13687: PUSH
13688: LD_INT 21
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 21
13700: PUSH
13701: LD_INT 1
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 69
13721: ST_TO_ADDR
// if filter then
13722: LD_VAR 0 3
13726: IFFALSE 13754
// for i in filter do
13728: LD_ADDR_VAR 0 2
13732: PUSH
13733: LD_VAR 0 3
13737: PUSH
13738: FOR_IN
13739: IFFALSE 13752
// RemoveUnit ( i ) ;
13741: LD_VAR 0 2
13745: PPUSH
13746: CALL_OW 64
13750: GO 13738
13752: POP
13753: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13754: LD_ADDR_VAR 0 3
13758: PUSH
13759: LD_INT 22
13761: PUSH
13762: LD_INT 4
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 21
13771: PUSH
13772: LD_INT 1
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PPUSH
13783: CALL_OW 69
13787: ST_TO_ADDR
// if filter then
13788: LD_VAR 0 3
13792: IFFALSE 13823
// for i in filter do
13794: LD_ADDR_VAR 0 2
13798: PUSH
13799: LD_VAR 0 3
13803: PUSH
13804: FOR_IN
13805: IFFALSE 13821
// SetLives ( i , 0 ) ;
13807: LD_VAR 0 2
13811: PPUSH
13812: LD_INT 0
13814: PPUSH
13815: CALL_OW 234
13819: GO 13804
13821: POP
13822: POP
// uc_side := 4 ;
13823: LD_ADDR_OWVAR 20
13827: PUSH
13828: LD_INT 4
13830: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13831: LD_ADDR_VAR 0 4
13835: PUSH
13836: LD_STRING Cornell
13838: PPUSH
13839: LD_INT 0
13841: PPUSH
13842: LD_STRING 
13844: PPUSH
13845: CALL 39116 0 3
13849: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13850: LD_VAR 0 4
13854: PPUSH
13855: LD_INT 208
13857: PPUSH
13858: LD_INT 62
13860: PPUSH
13861: LD_INT 0
13863: PPUSH
13864: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13868: LD_VAR 0 4
13872: PPUSH
13873: LD_INT 100
13875: PPUSH
13876: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13880: LD_INT 3
13882: PPUSH
13883: LD_VAR 0 4
13887: PPUSH
13888: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13892: LD_INT 4
13894: PPUSH
13895: LD_INT 3
13897: PPUSH
13898: LD_INT 1
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 80
// uc_side := 3 ;
13908: LD_ADDR_OWVAR 20
13912: PUSH
13913: LD_INT 3
13915: ST_TO_ADDR
// uc_nation := 3 ;
13916: LD_ADDR_OWVAR 21
13920: PUSH
13921: LD_INT 3
13923: ST_TO_ADDR
// InitHc ;
13924: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13928: LD_ADDR_VAR 0 5
13932: PUSH
13933: LD_STRING Mikhail
13935: PPUSH
13936: LD_INT 0
13938: PPUSH
13939: LD_STRING 
13941: PPUSH
13942: CALL 39116 0 3
13946: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13947: LD_INT 1
13949: PPUSH
13950: LD_INT 1
13952: PPUSH
13953: LD_INT 0
13955: PPUSH
13956: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13960: LD_ADDR_VAR 0 6
13964: PUSH
13965: LD_VAR 0 6
13969: PUSH
13970: CALL_OW 44
13974: ADD
13975: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13976: LD_ADDR_VAR 0 6
13980: PUSH
13981: LD_VAR 0 6
13985: PUSH
13986: CALL_OW 44
13990: ADD
13991: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13992: LD_INT 2
13994: PPUSH
13995: LD_INT 4
13997: PPUSH
13998: LD_INT 0
14000: PPUSH
14001: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14005: LD_ADDR_VAR 0 6
14009: PUSH
14010: LD_VAR 0 6
14014: PUSH
14015: CALL_OW 44
14019: ADD
14020: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
14021: LD_VAR 0 5
14025: PPUSH
14026: LD_INT 17
14028: PPUSH
14029: LD_INT 0
14031: PPUSH
14032: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
14036: LD_VAR 0 5
14040: PPUSH
14041: LD_INT 210
14043: PPUSH
14044: LD_INT 63
14046: PPUSH
14047: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14051: LD_VAR 0 5
14055: PPUSH
14056: LD_INT 208
14058: PPUSH
14059: LD_INT 62
14061: PPUSH
14062: CALL_OW 178
// for i in fake_russians do
14066: LD_ADDR_VAR 0 2
14070: PUSH
14071: LD_VAR 0 6
14075: PUSH
14076: FOR_IN
14077: IFFALSE 14155
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14079: LD_VAR 0 2
14083: PPUSH
14084: LD_INT 17
14086: PPUSH
14087: LD_INT 0
14089: PPUSH
14090: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14094: LD_VAR 0 2
14098: PPUSH
14099: LD_INT 215
14101: PPUSH
14102: LD_INT 67
14104: PPUSH
14105: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14109: LD_VAR 0 2
14113: PPUSH
14114: LD_INT 208
14116: PPUSH
14117: LD_INT 62
14119: PPUSH
14120: CALL_OW 178
// if GetClass ( i ) = 4 then
14124: LD_VAR 0 2
14128: PPUSH
14129: CALL_OW 257
14133: PUSH
14134: LD_INT 4
14136: EQUAL
14137: IFFALSE 14153
// ComHeal ( i , fake_cornel ) ;
14139: LD_VAR 0 2
14143: PPUSH
14144: LD_VAR 0 4
14148: PPUSH
14149: CALL_OW 128
// end ;
14153: GO 14076
14155: POP
14156: POP
// Wait ( 0 0$01 ) ;
14157: LD_INT 35
14159: PPUSH
14160: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14164: LD_INT 208
14166: PPUSH
14167: LD_INT 62
14169: PPUSH
14170: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14174: LD_INT 208
14176: PPUSH
14177: LD_INT 62
14179: PPUSH
14180: LD_INT 1
14182: PPUSH
14183: LD_INT 10
14185: NEG
14186: PPUSH
14187: CALL_OW 330
// Wait ( 0 0$15 ) ;
14191: LD_INT 525
14193: PPUSH
14194: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14198: LD_INT 208
14200: PPUSH
14201: LD_INT 62
14203: PPUSH
14204: LD_INT 1
14206: PPUSH
14207: CALL_OW 331
// ResetFog ;
14211: CALL_OW 335
// InGameOff ;
14215: CALL_OW 9
// end ;
14219: LD_VAR 0 1
14223: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14224: LD_INT 10
14226: PPUSH
14227: LD_INT 22
14229: PUSH
14230: LD_INT 1
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 70
14241: PUSH
14242: LD_EXP 44
14246: PPUSH
14247: CALL_OW 302
14251: AND
14252: PUSH
14253: LD_INT 22
14255: PUSH
14256: LD_INT 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 69
14267: PPUSH
14268: LD_EXP 44
14272: PPUSH
14273: CALL_OW 74
14277: PPUSH
14278: LD_EXP 44
14282: PPUSH
14283: CALL_OW 296
14287: PUSH
14288: LD_INT 30
14290: LESS
14291: OR
14292: IFFALSE 14343
14294: GO 14296
14296: DISABLE
// begin enable ;
14297: ENABLE
// powell_warn := powell_warn + 1 ;
14298: LD_ADDR_EXP 35
14302: PUSH
14303: LD_EXP 35
14307: PUSH
14308: LD_INT 1
14310: PLUS
14311: ST_TO_ADDR
// if powell_warn = 3 then
14312: LD_EXP 35
14316: PUSH
14317: LD_INT 3
14319: EQUAL
14320: IFFALSE 14331
// begin YouLost ( 5 ) ;
14322: LD_STRING 5
14324: PPUSH
14325: CALL_OW 104
// exit ;
14329: GO 14343
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14331: LD_EXP 46
14335: PPUSH
14336: LD_STRING DWarn-Pow-1
14338: PPUSH
14339: CALL_OW 586
// end ; end_of_file
14343: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14344: LD_EXP 8
14348: IFFALSE 16185
14350: GO 14352
14352: DISABLE
14353: LD_INT 0
14355: PPUSH
14356: PPUSH
14357: PPUSH
14358: PPUSH
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14363: LD_EXP 44
14367: PUSH
14368: LD_EXP 45
14372: ADD
14373: PUSH
14374: LD_EXP 6
14378: ADD
14379: PPUSH
14380: LD_INT 250
14382: PPUSH
14383: LD_INT 120
14385: PPUSH
14386: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14390: LD_ADDR_VAR 0 2
14394: PUSH
14395: LD_EXP 6
14399: PPUSH
14400: LD_INT 25
14402: PUSH
14403: LD_INT 2
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 72
14414: PUSH
14415: LD_EXP 45
14419: DIFF
14420: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14421: LD_ADDR_VAR 0 3
14425: PUSH
14426: LD_EXP 6
14430: PPUSH
14431: LD_INT 21
14433: PUSH
14434: LD_INT 1
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PPUSH
14441: CALL_OW 72
14445: PUSH
14446: LD_VAR 0 2
14450: DIFF
14451: ST_TO_ADDR
// if not has_eng then
14452: LD_VAR 0 2
14456: NOT
14457: IFFALSE 14540
// begin uc_side := 4 ;
14459: LD_ADDR_OWVAR 20
14463: PUSH
14464: LD_INT 4
14466: ST_TO_ADDR
// uc_nation := 1 ;
14467: LD_ADDR_OWVAR 21
14471: PUSH
14472: LD_INT 1
14474: ST_TO_ADDR
// bc_type := b_depot ;
14475: LD_ADDR_OWVAR 42
14479: PUSH
14480: LD_INT 0
14482: ST_TO_ADDR
// bc_level := 2 ;
14483: LD_ADDR_OWVAR 43
14487: PUSH
14488: LD_INT 2
14490: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14491: LD_ADDR_VAR 0 4
14495: PUSH
14496: LD_INT 264
14498: PPUSH
14499: LD_INT 120
14501: PPUSH
14502: LD_INT 4
14504: PPUSH
14505: CALL_OW 47
14509: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14510: LD_INT 264
14512: PPUSH
14513: LD_INT 120
14515: PPUSH
14516: LD_INT 4
14518: PPUSH
14519: LD_INT 10
14521: NEG
14522: PPUSH
14523: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14527: LD_INT 264
14529: PPUSH
14530: LD_INT 120
14532: PPUSH
14533: LD_INT 4
14535: PPUSH
14536: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14540: LD_INT 35
14542: PPUSH
14543: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14547: LD_EXP 44
14551: PPUSH
14552: LD_INT 10
14554: PPUSH
14555: CALL_OW 308
14559: PUSH
14560: LD_EXP 44
14564: PPUSH
14565: CALL_OW 310
14569: PPUSH
14570: LD_INT 10
14572: PPUSH
14573: CALL_OW 308
14577: OR
14578: IFFALSE 14540
// if has_eng and not dep then
14580: LD_VAR 0 2
14584: PUSH
14585: LD_VAR 0 4
14589: NOT
14590: AND
14591: IFFALSE 14741
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14593: LD_VAR 0 2
14597: PPUSH
14598: LD_INT 0
14600: PPUSH
14601: LD_INT 264
14603: PPUSH
14604: LD_INT 120
14606: PPUSH
14607: LD_INT 4
14609: PPUSH
14610: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14614: LD_INT 35
14616: PPUSH
14617: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14621: LD_INT 22
14623: PUSH
14624: LD_INT 4
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 0
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PPUSH
14645: CALL_OW 69
14649: IFFALSE 14614
// ComMoveXY ( filter , 264 , 120 ) ;
14651: LD_VAR 0 3
14655: PPUSH
14656: LD_INT 264
14658: PPUSH
14659: LD_INT 120
14661: PPUSH
14662: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14666: LD_INT 35
14668: PPUSH
14669: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14673: LD_INT 22
14675: PUSH
14676: LD_INT 4
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 30
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 3
14695: PUSH
14696: LD_INT 57
14698: PUSH
14699: EMPTY
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: PPUSH
14711: CALL_OW 69
14715: IFFALSE 14666
// ComMoveXY ( filter , 247 , 113 ) ;
14717: LD_VAR 0 3
14721: PPUSH
14722: LD_INT 247
14724: PPUSH
14725: LD_INT 113
14727: PPUSH
14728: CALL_OW 111
// Wait ( 0 0$2 ) ;
14732: LD_INT 70
14734: PPUSH
14735: CALL_OW 67
// end else
14739: GO 14753
// begin SetSide ( dep , 4 ) ;
14741: LD_VAR 0 4
14745: PPUSH
14746: LD_INT 4
14748: PPUSH
14749: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14753: LD_ADDR_VAR 0 4
14757: PUSH
14758: LD_INT 22
14760: PUSH
14761: LD_INT 4
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 30
14770: PUSH
14771: LD_INT 0
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: PUSH
14787: LD_INT 1
14789: ARRAY
14790: ST_TO_ADDR
// if not has_eng then
14791: LD_VAR 0 2
14795: NOT
14796: IFFALSE 14883
// for i = 1 to 2 do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: DOUBLE
14804: LD_INT 1
14806: DEC
14807: ST_TO_ADDR
14808: LD_INT 2
14810: PUSH
14811: FOR_TO
14812: IFFALSE 14881
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14814: LD_VAR 0 3
14818: PUSH
14819: LD_INT 1
14821: ARRAY
14822: PPUSH
14823: LD_VAR 0 4
14827: PPUSH
14828: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14832: LD_VAR 0 3
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PPUSH
14841: LD_INT 2
14843: PPUSH
14844: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14848: LD_VAR 0 3
14852: PUSH
14853: LD_INT 1
14855: ARRAY
14856: PPUSH
14857: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14861: LD_ADDR_VAR 0 3
14865: PUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 3
14878: ST_TO_ADDR
// end ;
14879: GO 14811
14881: POP
14882: POP
// if IsInUnit ( Cornel ) then
14883: LD_EXP 44
14887: PPUSH
14888: CALL_OW 310
14892: IFFALSE 14970
// begin cargo := IsInUnit ( Cornel ) ;
14894: LD_ADDR_VAR 0 7
14898: PUSH
14899: LD_EXP 44
14903: PPUSH
14904: CALL_OW 310
14908: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14909: LD_VAR 0 7
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 289
14921: IFFALSE 14932
// ComUnload ( cargo ) ;
14923: LD_VAR 0 7
14927: PPUSH
14928: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14932: LD_EXP 44
14936: PPUSH
14937: LD_INT 235
14939: PPUSH
14940: LD_INT 122
14942: PPUSH
14943: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14947: LD_EXP 44
14951: PPUSH
14952: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14956: LD_EXP 44
14960: PPUSH
14961: LD_VAR 0 4
14965: PPUSH
14966: CALL_OW 180
// end ; if Bierezov then
14970: LD_EXP 45
14974: IFFALSE 15022
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14976: LD_EXP 45
14980: PPUSH
14981: LD_INT 260
14983: PPUSH
14984: LD_INT 120
14986: PPUSH
14987: CALL_OW 111
// if dep then
14991: LD_VAR 0 4
14995: IFFALSE 15013
// AddComEnterUnit ( Bierezov , dep ) else
14997: LD_EXP 45
15001: PPUSH
15002: LD_VAR 0 4
15006: PPUSH
15007: CALL_OW 180
15011: GO 15022
// AddComHold ( Bierezov ) ;
15013: LD_EXP 45
15017: PPUSH
15018: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
15022: LD_INT 525
15024: PPUSH
15025: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
15029: LD_ADDR_VAR 0 2
15033: PUSH
15034: LD_INT 22
15036: PUSH
15037: LD_INT 4
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 25
15046: PUSH
15047: LD_INT 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 69
15062: PUSH
15063: LD_EXP 45
15067: DIFF
15068: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15069: LD_INT 35
15071: PPUSH
15072: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15076: LD_ADDR_VAR 0 6
15080: PUSH
15081: LD_INT 10
15083: PPUSH
15084: CALL_OW 435
15088: ST_TO_ADDR
// if crates then
15089: LD_VAR 0 6
15093: IFFALSE 15122
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15095: LD_VAR 0 2
15099: PPUSH
15100: LD_VAR 0 6
15104: PUSH
15105: LD_INT 1
15107: ARRAY
15108: PPUSH
15109: LD_VAR 0 6
15113: PUSH
15114: LD_INT 2
15116: ARRAY
15117: PPUSH
15118: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15122: LD_VAR 0 4
15126: PPUSH
15127: CALL_OW 274
15131: PPUSH
15132: LD_INT 1
15134: PPUSH
15135: CALL_OW 275
15139: PUSH
15140: LD_INT 40
15142: GREATEREQUAL
15143: IFFALSE 15069
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15145: LD_ADDR_VAR 0 5
15149: PUSH
15150: LD_INT 4
15152: PUSH
15153: LD_INT 256
15155: PUSH
15156: LD_INT 111
15158: PUSH
15159: LD_INT 2
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: PUSH
15168: LD_INT 31
15170: PUSH
15171: LD_INT 243
15173: PUSH
15174: LD_INT 112
15176: PUSH
15177: LD_INT 2
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 31
15188: PUSH
15189: LD_INT 254
15191: PUSH
15192: LD_INT 114
15194: PUSH
15195: LD_INT 2
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: ST_TO_ADDR
// for i in blist do
15209: LD_ADDR_VAR 0 1
15213: PUSH
15214: LD_VAR 0 5
15218: PUSH
15219: FOR_IN
15220: IFFALSE 15269
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15222: LD_VAR 0 2
15226: PPUSH
15227: LD_VAR 0 1
15231: PUSH
15232: LD_INT 1
15234: ARRAY
15235: PPUSH
15236: LD_VAR 0 1
15240: PUSH
15241: LD_INT 2
15243: ARRAY
15244: PPUSH
15245: LD_VAR 0 1
15249: PUSH
15250: LD_INT 3
15252: ARRAY
15253: PPUSH
15254: LD_VAR 0 1
15258: PUSH
15259: LD_INT 4
15261: ARRAY
15262: PPUSH
15263: CALL_OW 205
15267: GO 15219
15269: POP
15270: POP
// repeat wait ( 0 0$01 ) ;
15271: LD_INT 35
15273: PPUSH
15274: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15278: LD_INT 22
15280: PUSH
15281: LD_INT 4
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 30
15290: PUSH
15291: LD_INT 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 3
15300: PUSH
15301: LD_INT 57
15303: PUSH
15304: EMPTY
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: PPUSH
15316: CALL_OW 69
15320: IFFALSE 15271
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15322: LD_VAR 0 3
15326: PPUSH
15327: LD_INT 22
15329: PUSH
15330: LD_INT 4
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 30
15339: PUSH
15340: LD_INT 4
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PPUSH
15351: CALL_OW 69
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15364: LD_VAR 0 3
15368: PPUSH
15369: LD_INT 1
15371: PPUSH
15372: CALL_OW 183
// if has_eng > 1 then
15376: LD_VAR 0 2
15380: PUSH
15381: LD_INT 1
15383: GREATER
15384: IFFALSE 15526
// for i = has_eng downto 2 do
15386: LD_ADDR_VAR 0 1
15390: PUSH
15391: DOUBLE
15392: LD_VAR 0 2
15396: INC
15397: ST_TO_ADDR
15398: LD_INT 2
15400: PUSH
15401: FOR_DOWNTO
15402: IFFALSE 15524
// begin if IsInUnit ( has_eng [ i ] ) then
15404: LD_VAR 0 2
15408: PUSH
15409: LD_VAR 0 1
15413: ARRAY
15414: PPUSH
15415: CALL_OW 310
15419: IFFALSE 15436
// ComExitBuilding ( has_eng [ i ] ) ;
15421: LD_VAR 0 2
15425: PUSH
15426: LD_VAR 0 1
15430: ARRAY
15431: PPUSH
15432: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15436: LD_VAR 0 2
15440: PUSH
15441: LD_VAR 0 1
15445: ARRAY
15446: PPUSH
15447: LD_INT 22
15449: PUSH
15450: LD_INT 4
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 4
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: PUSH
15476: LD_INT 1
15478: ARRAY
15479: PPUSH
15480: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15484: LD_VAR 0 2
15488: PUSH
15489: LD_VAR 0 1
15493: ARRAY
15494: PPUSH
15495: LD_INT 1
15497: PPUSH
15498: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15502: LD_ADDR_VAR 0 2
15506: PUSH
15507: LD_VAR 0 2
15511: PPUSH
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 3
15521: ST_TO_ADDR
// end ;
15522: GO 15401
15524: POP
15525: POP
// repeat wait ( 0 0$01 ) ;
15526: LD_INT 35
15528: PPUSH
15529: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15533: LD_INT 22
15535: PUSH
15536: LD_INT 4
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 30
15545: PUSH
15546: LD_INT 31
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 3
15555: PUSH
15556: LD_INT 57
15558: PUSH
15559: EMPTY
15560: LIST
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: LIST
15570: PPUSH
15571: CALL_OW 69
15575: PUSH
15576: LD_INT 1
15578: GREATER
15579: IFFALSE 15526
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15581: LD_ADDR_VAR 0 8
15585: PUSH
15586: LD_EXP 6
15590: PPUSH
15591: LD_INT 25
15593: PUSH
15594: LD_INT 1
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PPUSH
15601: CALL_OW 72
15605: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15606: LD_ADDR_VAR 0 1
15610: PUSH
15611: DOUBLE
15612: LD_INT 1
15614: DEC
15615: ST_TO_ADDR
15616: LD_INT 22
15618: PUSH
15619: LD_INT 4
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 30
15628: PUSH
15629: LD_INT 31
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 3
15638: PUSH
15639: LD_INT 57
15641: PUSH
15642: EMPTY
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: PUSH
15659: FOR_TO
15660: IFFALSE 15744
// begin if not sol [ i ] then
15662: LD_VAR 0 8
15666: PUSH
15667: LD_VAR 0 1
15671: ARRAY
15672: NOT
15673: IFFALSE 15677
// break ;
15675: GO 15744
// ComExitBuilding ( sol [ i ] ) ;
15677: LD_VAR 0 8
15681: PUSH
15682: LD_VAR 0 1
15686: ARRAY
15687: PPUSH
15688: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15692: LD_VAR 0 8
15696: PUSH
15697: LD_VAR 0 1
15701: ARRAY
15702: PPUSH
15703: LD_INT 22
15705: PUSH
15706: LD_INT 4
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 30
15715: PUSH
15716: LD_INT 31
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PPUSH
15727: CALL_OW 69
15731: PUSH
15732: LD_VAR 0 1
15736: ARRAY
15737: PPUSH
15738: CALL_OW 180
// end ;
15742: GO 15659
15744: POP
15745: POP
// if sol > 3 then
15746: LD_VAR 0 8
15750: PUSH
15751: LD_INT 3
15753: GREATER
15754: IFFALSE 15871
// begin ComExitBuilding ( sol [ 3 ] ) ;
15756: LD_VAR 0 8
15760: PUSH
15761: LD_INT 3
15763: ARRAY
15764: PPUSH
15765: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15769: LD_VAR 0 8
15773: PUSH
15774: LD_INT 3
15776: ARRAY
15777: PPUSH
15778: LD_INT 246
15780: PPUSH
15781: LD_INT 94
15783: PPUSH
15784: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15788: LD_VAR 0 8
15792: PUSH
15793: LD_INT 3
15795: ARRAY
15796: PPUSH
15797: LD_INT 175
15799: PPUSH
15800: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15804: LD_VAR 0 8
15808: PUSH
15809: LD_INT 3
15811: ARRAY
15812: PPUSH
15813: LD_INT 224
15815: PPUSH
15816: LD_INT 90
15818: PPUSH
15819: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15823: LD_VAR 0 8
15827: PUSH
15828: LD_INT 3
15830: ARRAY
15831: PPUSH
15832: LD_INT 245
15834: PPUSH
15835: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15839: LD_VAR 0 8
15843: PUSH
15844: LD_INT 3
15846: ARRAY
15847: PPUSH
15848: LD_INT 223
15850: PPUSH
15851: LD_INT 110
15853: PPUSH
15854: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15858: LD_VAR 0 8
15862: PUSH
15863: LD_INT 3
15865: ARRAY
15866: PPUSH
15867: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15871: LD_VAR 0 2
15875: PPUSH
15876: LD_VAR 0 4
15880: PPUSH
15881: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15885: LD_INT 22
15887: PUSH
15888: LD_INT 4
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 30
15897: PUSH
15898: LD_INT 4
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PPUSH
15909: CALL_OW 69
15913: PUSH
15914: LD_INT 1
15916: ARRAY
15917: PPUSH
15918: CALL_OW 313
15922: PUSH
15923: LD_INT 6
15925: LESS
15926: IFFALSE 15990
// begin if IsInUnit ( Cornel ) then
15928: LD_EXP 44
15932: PPUSH
15933: CALL_OW 310
15937: IFFALSE 15948
// ComExitBuilding ( Cornel ) ;
15939: LD_EXP 44
15943: PPUSH
15944: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15948: LD_EXP 44
15952: PPUSH
15953: LD_INT 22
15955: PUSH
15956: LD_INT 4
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 30
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PPUSH
15977: CALL_OW 69
15981: PUSH
15982: LD_INT 1
15984: ARRAY
15985: PPUSH
15986: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15990: LD_INT 35
15992: PPUSH
15993: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15997: LD_ADDR_VAR 0 3
16001: PUSH
16002: LD_INT 22
16004: PUSH
16005: LD_INT 4
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 21
16014: PUSH
16015: LD_INT 3
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 3
16024: PUSH
16025: LD_INT 24
16027: PUSH
16028: LD_INT 1000
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: PPUSH
16044: CALL_OW 69
16048: ST_TO_ADDR
// if filter and has_eng then
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 2
16058: AND
16059: IFFALSE 16125
// begin for i in has_eng do
16061: LD_ADDR_VAR 0 1
16065: PUSH
16066: LD_VAR 0 2
16070: PUSH
16071: FOR_IN
16072: IFFALSE 16121
// begin if IsInUnit ( i ) then
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL_OW 310
16083: IFFALSE 16094
// ComExitBuilding ( i ) ;
16085: LD_VAR 0 1
16089: PPUSH
16090: CALL_OW 122
// Wait ( 3 ) ;
16094: LD_INT 3
16096: PPUSH
16097: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16101: LD_VAR 0 1
16105: PPUSH
16106: LD_VAR 0 3
16110: PUSH
16111: LD_INT 1
16113: ARRAY
16114: PPUSH
16115: CALL_OW 130
// end ;
16119: GO 16071
16121: POP
16122: POP
// end else
16123: GO 16179
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16125: LD_VAR 0 2
16129: PUSH
16130: LD_VAR 0 2
16134: PPUSH
16135: LD_INT 56
16137: PUSH
16138: EMPTY
16139: LIST
16140: PPUSH
16141: CALL_OW 72
16145: AND
16146: IFFALSE 16179
// for i in has_eng do
16148: LD_ADDR_VAR 0 1
16152: PUSH
16153: LD_VAR 0 2
16157: PUSH
16158: FOR_IN
16159: IFFALSE 16177
// ComEnterUnit ( i , dep ) ;
16161: LD_VAR 0 1
16165: PPUSH
16166: LD_VAR 0 4
16170: PPUSH
16171: CALL_OW 120
16175: GO 16158
16177: POP
16178: POP
// until cornel_prepared ;
16179: LD_EXP 11
16183: IFFALSE 15990
// end ;
16185: PPOPN 8
16187: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16188: LD_EXP 11
16192: IFFALSE 16628
16194: GO 16196
16196: DISABLE
16197: LD_INT 0
16199: PPUSH
16200: PPUSH
16201: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16202: LD_ADDR_VAR 0 2
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 4
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 30
16219: PUSH
16220: LD_INT 4
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16240: LD_EXP 6
16244: PPUSH
16245: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16249: LD_EXP 45
16253: PUSH
16254: LD_EXP 45
16258: PPUSH
16259: CALL_OW 310
16263: AND
16264: IFFALSE 16275
// ComExitBuilding ( Bierezov ) ;
16266: LD_EXP 45
16270: PPUSH
16271: CALL_OW 122
// Wait ( 0 0$03 ) ;
16275: LD_INT 105
16277: PPUSH
16278: CALL_OW 67
// for i in cornel_units do
16282: LD_ADDR_VAR 0 1
16286: PUSH
16287: LD_EXP 6
16291: PUSH
16292: FOR_IN
16293: IFFALSE 16369
// begin if GetClass ( i ) in [ 2 , 3 ] then
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 257
16304: PUSH
16305: LD_INT 2
16307: PUSH
16308: LD_INT 3
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: IN
16315: IFFALSE 16352
// begin ComEnterUnit ( i , arm ) ;
16317: LD_VAR 0 1
16321: PPUSH
16322: LD_VAR 0 2
16326: PPUSH
16327: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16331: LD_VAR 0 1
16335: PPUSH
16336: LD_INT 1
16338: PPUSH
16339: CALL_OW 183
// AddComExitBuilding ( i ) ;
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16352: LD_VAR 0 1
16356: PPUSH
16357: LD_INT 257
16359: PPUSH
16360: LD_INT 121
16362: PPUSH
16363: CALL_OW 171
// end ;
16367: GO 16292
16369: POP
16370: POP
// Wait ( 1 1$00 ) ;
16371: LD_INT 2100
16373: PPUSH
16374: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16378: LD_ADDR_VAR 0 3
16382: PUSH
16383: LD_EXP 44
16387: PUSH
16388: LD_EXP 45
16392: ADD
16393: PUSH
16394: LD_EXP 6
16398: ADD
16399: PUSH
16400: LD_EXP 6
16404: PPUSH
16405: LD_INT 21
16407: PUSH
16408: LD_INT 2
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PPUSH
16415: CALL_OW 72
16419: DIFF
16420: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16421: LD_VAR 0 3
16425: PPUSH
16426: LD_INT 248
16428: PPUSH
16429: LD_INT 85
16431: PPUSH
16432: CALL_OW 111
// AddComHold ( filter ) ;
16436: LD_VAR 0 3
16440: PPUSH
16441: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16445: LD_INT 35
16447: PPUSH
16448: CALL_OW 67
// until cornel_attack ;
16452: LD_EXP 9
16456: IFFALSE 16445
// ComAgressiveMove ( filter , 209 , 63 ) ;
16458: LD_VAR 0 3
16462: PPUSH
16463: LD_INT 209
16465: PPUSH
16466: LD_INT 63
16468: PPUSH
16469: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16473: LD_EXP 44
16477: PPUSH
16478: LD_INT 208
16480: PPUSH
16481: LD_INT 62
16483: PPUSH
16484: CALL_OW 114
// AddComHold ( Cornel ) ;
16488: LD_EXP 44
16492: PPUSH
16493: CALL_OW 200
// if Bierezov then
16497: LD_EXP 45
16501: IFFALSE 16591
// begin filter := filter diff Bierezov ;
16503: LD_ADDR_VAR 0 3
16507: PUSH
16508: LD_VAR 0 3
16512: PUSH
16513: LD_EXP 45
16517: DIFF
16518: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16519: LD_EXP 45
16523: PPUSH
16524: LD_INT 6
16526: PPUSH
16527: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16531: LD_EXP 45
16535: PPUSH
16536: LD_INT 235
16538: PPUSH
16539: LD_INT 60
16541: PPUSH
16542: CALL_OW 111
// AddComHold ( Bierezov ) ;
16546: LD_EXP 45
16550: PPUSH
16551: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16555: LD_EXP 45
16559: PPUSH
16560: LD_INT 350
16562: PPUSH
16563: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16567: LD_EXP 45
16571: PPUSH
16572: LD_INT 198
16574: PPUSH
16575: LD_INT 28
16577: PPUSH
16578: CALL_OW 171
// AddComHold ( Bierezov ) ;
16582: LD_EXP 45
16586: PPUSH
16587: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16591: LD_INT 70
16593: PPUSH
16594: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16598: LD_EXP 44
16602: PPUSH
16603: LD_INT 208
16605: PPUSH
16606: LD_INT 62
16608: PPUSH
16609: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16613: LD_EXP 44
16617: PPUSH
16618: LD_INT 16
16620: PPUSH
16621: CALL_OW 308
16625: NOT
16626: IFFALSE 16591
// end ; end_of_file
16628: PPOPN 3
16630: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16631: LD_EXP 53
16635: PUSH
16636: LD_EXP 31
16640: NOT
16641: AND
16642: PUSH
16643: LD_EXP 32
16647: NOT
16648: AND
16649: IFFALSE 17099
16651: GO 16653
16653: DISABLE
16654: LD_INT 0
16656: PPUSH
16657: PPUSH
16658: PPUSH
16659: PPUSH
// begin enable ;
16660: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16661: LD_ADDR_VAR 0 4
16665: PUSH
16666: LD_INT 81
16668: PUSH
16669: LD_INT 3
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: ST_TO_ADDR
// for i = 1 to ru_patrol do
16681: LD_ADDR_VAR 0 2
16685: PUSH
16686: DOUBLE
16687: LD_INT 1
16689: DEC
16690: ST_TO_ADDR
16691: LD_EXP 53
16695: PUSH
16696: FOR_TO
16697: IFFALSE 17097
// begin un := ru_patrol [ i ] ;
16699: LD_ADDR_VAR 0 1
16703: PUSH
16704: LD_EXP 53
16708: PUSH
16709: LD_VAR 0 2
16713: ARRAY
16714: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16715: LD_VAR 0 1
16719: PPUSH
16720: LD_INT 13
16722: PPUSH
16723: CALL_OW 308
16727: IFFALSE 16832
// begin if not ru_alert then
16729: LD_EXP 60
16733: NOT
16734: IFFALSE 16744
// ru_alert := true ;
16736: LD_ADDR_EXP 60
16740: PUSH
16741: LD_INT 1
16743: ST_TO_ADDR
// if not See ( 1 , un ) then
16744: LD_INT 1
16746: PPUSH
16747: LD_VAR 0 1
16751: PPUSH
16752: CALL_OW 292
16756: NOT
16757: IFFALSE 16771
// SetLives ( un , 1000 ) ;
16759: LD_VAR 0 1
16763: PPUSH
16764: LD_INT 1000
16766: PPUSH
16767: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16771: LD_ADDR_EXP 53
16775: PUSH
16776: LD_EXP 53
16780: PUSH
16781: LD_VAR 0 1
16785: DIFF
16786: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16787: LD_VAR 0 1
16791: PPUSH
16792: LD_INT 22
16794: PUSH
16795: LD_INT 3
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 30
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: PPUSH
16821: CALL 1007 0 1
16825: PPUSH
16826: CALL_OW 120
// continue ;
16830: GO 16696
// end ; if IsOk ( un ) and not HasTask ( un ) then
16832: LD_VAR 0 1
16836: PPUSH
16837: CALL_OW 302
16841: PUSH
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 314
16851: NOT
16852: AND
16853: IFFALSE 16946
// begin for j = 1 to ru_firepoints_south [ i ] do
16855: LD_ADDR_VAR 0 3
16859: PUSH
16860: DOUBLE
16861: LD_INT 1
16863: DEC
16864: ST_TO_ADDR
16865: LD_EXP 59
16869: PUSH
16870: LD_VAR 0 2
16874: ARRAY
16875: PUSH
16876: FOR_TO
16877: IFFALSE 16944
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16879: LD_VAR 0 1
16883: PPUSH
16884: LD_EXP 59
16888: PUSH
16889: LD_VAR 0 2
16893: ARRAY
16894: PUSH
16895: LD_VAR 0 3
16899: ARRAY
16900: PUSH
16901: LD_INT 1
16903: ARRAY
16904: PPUSH
16905: LD_EXP 59
16909: PUSH
16910: LD_VAR 0 2
16914: ARRAY
16915: PUSH
16916: LD_VAR 0 3
16920: ARRAY
16921: PUSH
16922: LD_INT 2
16924: ARRAY
16925: PPUSH
16926: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16930: LD_VAR 0 1
16934: PPUSH
16935: LD_INT 70
16937: PPUSH
16938: CALL_OW 202
// end ;
16942: GO 16876
16944: POP
16945: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 256
16955: PUSH
16956: LD_INT 700
16958: LESS
16959: PUSH
16960: LD_VAR 0 1
16964: PPUSH
16965: LD_INT 13
16967: PPUSH
16968: CALL_OW 308
16972: NOT
16973: AND
16974: IFFALSE 17026
// begin ComMoveToArea ( un , retreatArea ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 13
16983: PPUSH
16984: CALL_OW 113
// if not ru_alert_xy then
16988: LD_EXP 61
16992: NOT
16993: IFFALSE 17024
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16995: LD_ADDR_EXP 61
16999: PUSH
17000: LD_VAR 0 1
17004: PPUSH
17005: CALL_OW 250
17009: PUSH
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 251
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: ST_TO_ADDR
// end else
17024: GO 17095
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17026: LD_VAR 0 1
17030: PPUSH
17031: LD_VAR 0 4
17035: PPUSH
17036: LD_VAR 0 1
17040: PPUSH
17041: CALL_OW 74
17045: PPUSH
17046: CALL_OW 296
17050: PUSH
17051: LD_INT 9
17053: LESS
17054: PUSH
17055: LD_VAR 0 1
17059: PPUSH
17060: CALL_OW 256
17064: PUSH
17065: LD_INT 500
17067: GREATER
17068: AND
17069: IFFALSE 17095
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_VAR 0 4
17080: PPUSH
17081: LD_VAR 0 1
17085: PPUSH
17086: CALL_OW 74
17090: PPUSH
17091: CALL_OW 115
// end ;
17095: GO 16696
17097: POP
17098: POP
// end ;
17099: PPOPN 4
17101: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17102: LD_EXP 60
17106: PUSH
17107: LD_EXP 61
17111: AND
17112: PUSH
17113: LD_EXP 31
17117: NOT
17118: AND
17119: PUSH
17120: LD_EXP 32
17124: NOT
17125: AND
17126: IFFALSE 17336
17128: GO 17130
17130: DISABLE
17131: LD_INT 0
17133: PPUSH
17134: PPUSH
// begin enable ;
17135: ENABLE
// if not ru_vehicles then
17136: LD_EXP 56
17140: NOT
17141: IFFALSE 17145
// exit ;
17143: GO 17336
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17145: LD_ADDR_VAR 0 2
17149: PUSH
17150: LD_INT 81
17152: PUSH
17153: LD_INT 3
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PPUSH
17160: CALL_OW 69
17164: ST_TO_ADDR
// if ru_vehicles then
17165: LD_EXP 56
17169: IFFALSE 17336
// begin for i in ru_vehicles do
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: LD_EXP 56
17180: PUSH
17181: FOR_IN
17182: IFFALSE 17334
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17184: LD_VAR 0 1
17188: PPUSH
17189: CALL_OW 302
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: LD_VAR 0 2
17203: PPUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 74
17213: PPUSH
17214: CALL_OW 296
17218: PUSH
17219: LD_INT 9
17221: LESS
17222: AND
17223: IFFALSE 17249
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17225: LD_VAR 0 1
17229: PPUSH
17230: LD_VAR 0 2
17234: PPUSH
17235: LD_VAR 0 1
17239: PPUSH
17240: CALL_OW 74
17244: PPUSH
17245: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17249: LD_VAR 0 1
17253: PPUSH
17254: CALL_OW 314
17258: NOT
17259: PUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: CALL_OW 302
17269: AND
17270: PUSH
17271: LD_VAR 0 1
17275: PPUSH
17276: LD_EXP 61
17280: PUSH
17281: LD_INT 1
17283: ARRAY
17284: PPUSH
17285: LD_EXP 61
17289: PUSH
17290: LD_INT 2
17292: ARRAY
17293: PPUSH
17294: CALL_OW 297
17298: PUSH
17299: LD_INT 10
17301: GREATER
17302: AND
17303: IFFALSE 17332
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17305: LD_VAR 0 1
17309: PPUSH
17310: LD_EXP 61
17314: PUSH
17315: LD_INT 1
17317: ARRAY
17318: PPUSH
17319: LD_EXP 61
17323: PUSH
17324: LD_INT 2
17326: ARRAY
17327: PPUSH
17328: CALL_OW 114
// end ;
17332: GO 17181
17334: POP
17335: POP
// end ; end ;
17336: PPOPN 2
17338: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17339: LD_EXP 61
17343: PUSH
17344: LD_EXP 60
17348: AND
17349: PUSH
17350: LD_INT 3
17352: PPUSH
17353: CALL_OW 463
17357: NOT
17358: AND
17359: PUSH
17360: LD_EXP 31
17364: NOT
17365: AND
17366: PUSH
17367: LD_EXP 32
17371: NOT
17372: AND
17373: IFFALSE 17468
17375: GO 17377
17377: DISABLE
17378: LD_INT 0
17380: PPUSH
// begin enable ;
17381: ENABLE
// ru_alert_xy := false ;
17382: LD_ADDR_EXP 61
17386: PUSH
17387: LD_INT 0
17389: ST_TO_ADDR
// ru_alert := false ;
17390: LD_ADDR_EXP 60
17394: PUSH
17395: LD_INT 0
17397: ST_TO_ADDR
// if ru_vehicles then
17398: LD_EXP 56
17402: IFFALSE 17468
// for i in ru_vehicles do
17404: LD_ADDR_VAR 0 1
17408: PUSH
17409: LD_EXP 56
17413: PUSH
17414: FOR_IN
17415: IFFALSE 17466
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17417: LD_VAR 0 1
17421: PPUSH
17422: CALL_OW 302
17426: PUSH
17427: LD_VAR 0 1
17431: PPUSH
17432: LD_INT 89
17434: PPUSH
17435: LD_INT 36
17437: PPUSH
17438: CALL_OW 297
17442: PUSH
17443: LD_INT 10
17445: GREATER
17446: AND
17447: IFFALSE 17464
// ComMoveXY ( i , 89 , 36 ) ;
17449: LD_VAR 0 1
17453: PPUSH
17454: LD_INT 89
17456: PPUSH
17457: LD_INT 36
17459: PPUSH
17460: CALL_OW 111
17464: GO 17414
17466: POP
17467: POP
// end ;
17468: PPOPN 1
17470: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17471: LD_EXP 55
17475: PUSH
17476: LD_EXP 31
17480: NOT
17481: AND
17482: PUSH
17483: LD_EXP 32
17487: NOT
17488: AND
17489: IFFALSE 17773
17491: GO 17493
17493: DISABLE
17494: LD_INT 0
17496: PPUSH
17497: PPUSH
17498: PPUSH
// begin enable ;
17499: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17500: LD_ADDR_VAR 0 3
17504: PUSH
17505: LD_INT 81
17507: PUSH
17508: LD_INT 3
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PPUSH
17515: CALL_OW 69
17519: ST_TO_ADDR
// for i = 1 to ru_forest do
17520: LD_ADDR_VAR 0 1
17524: PUSH
17525: DOUBLE
17526: LD_INT 1
17528: DEC
17529: ST_TO_ADDR
17530: LD_EXP 55
17534: PUSH
17535: FOR_TO
17536: IFFALSE 17771
// begin un := ru_forest [ i ] ;
17538: LD_ADDR_VAR 0 2
17542: PUSH
17543: LD_EXP 55
17547: PUSH
17548: LD_VAR 0 1
17552: ARRAY
17553: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17554: LD_VAR 0 2
17558: PPUSH
17559: LD_INT 13
17561: PPUSH
17562: CALL_OW 308
17566: IFFALSE 17656
// begin if not See ( 1 , un ) then
17568: LD_INT 1
17570: PPUSH
17571: LD_VAR 0 2
17575: PPUSH
17576: CALL_OW 292
17580: NOT
17581: IFFALSE 17595
// SetLives ( un , 1000 ) ;
17583: LD_VAR 0 2
17587: PPUSH
17588: LD_INT 1000
17590: PPUSH
17591: CALL_OW 234
// ru_forest := ru_forest diff un ;
17595: LD_ADDR_EXP 55
17599: PUSH
17600: LD_EXP 55
17604: PUSH
17605: LD_VAR 0 2
17609: DIFF
17610: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17611: LD_VAR 0 2
17615: PPUSH
17616: LD_INT 22
17618: PUSH
17619: LD_INT 3
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 30
17628: PUSH
17629: LD_INT 4
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: PPUSH
17645: CALL 1007 0 1
17649: PPUSH
17650: CALL_OW 120
// continue ;
17654: GO 17535
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17656: LD_VAR 0 2
17660: PPUSH
17661: CALL_OW 256
17665: PUSH
17666: LD_INT 700
17668: LESS
17669: PUSH
17670: LD_VAR 0 2
17674: PPUSH
17675: LD_INT 13
17677: PPUSH
17678: CALL_OW 308
17682: NOT
17683: AND
17684: IFFALSE 17700
// ComMoveToArea ( un , retreatArea ) else
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_INT 13
17693: PPUSH
17694: CALL_OW 113
17698: GO 17769
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17700: LD_VAR 0 2
17704: PPUSH
17705: LD_VAR 0 3
17709: PPUSH
17710: LD_VAR 0 2
17714: PPUSH
17715: CALL_OW 74
17719: PPUSH
17720: CALL_OW 296
17724: PUSH
17725: LD_INT 9
17727: LESS
17728: PUSH
17729: LD_VAR 0 2
17733: PPUSH
17734: CALL_OW 256
17738: PUSH
17739: LD_INT 500
17741: GREATER
17742: AND
17743: IFFALSE 17769
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17745: LD_VAR 0 2
17749: PPUSH
17750: LD_VAR 0 3
17754: PPUSH
17755: LD_VAR 0 2
17759: PPUSH
17760: CALL_OW 74
17764: PPUSH
17765: CALL_OW 115
// end ;
17769: GO 17535
17771: POP
17772: POP
// end ;
17773: PPOPN 3
17775: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17776: LD_EXP 32
17780: NOT
17781: IFFALSE 17924
17783: GO 17785
17785: DISABLE
17786: LD_INT 0
17788: PPUSH
17789: PPUSH
// begin enable ;
17790: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17791: LD_ADDR_VAR 0 2
17795: PUSH
17796: LD_INT 22
17798: PUSH
17799: LD_INT 3
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 21
17808: PUSH
17809: LD_INT 3
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 3
17818: PUSH
17819: LD_INT 24
17821: PUSH
17822: LD_INT 990
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: LIST
17837: PPUSH
17838: CALL_OW 69
17842: ST_TO_ADDR
// if filter then
17843: LD_VAR 0 2
17847: IFFALSE 17924
// for i in filter do
17849: LD_ADDR_VAR 0 1
17853: PUSH
17854: LD_VAR 0 2
17858: PUSH
17859: FOR_IN
17860: IFFALSE 17922
// if GetY ( i ) > 70 then
17862: LD_VAR 0 1
17866: PPUSH
17867: CALL_OW 251
17871: PUSH
17872: LD_INT 70
17874: GREATER
17875: IFFALSE 17881
// continue else
17877: GO 17859
17879: GO 17920
// begin ru_alert := true ;
17881: LD_ADDR_EXP 60
17885: PUSH
17886: LD_INT 1
17888: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17889: LD_ADDR_EXP 61
17893: PUSH
17894: LD_VAR 0 1
17898: PPUSH
17899: CALL_OW 250
17903: PUSH
17904: LD_VAR 0 1
17908: PPUSH
17909: CALL_OW 251
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: ST_TO_ADDR
// break ;
17918: GO 17922
// end ;
17920: GO 17859
17922: POP
17923: POP
// end ;
17924: PPOPN 2
17926: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17927: LD_EXP 31
17931: IFFALSE 18080
17933: GO 17935
17935: DISABLE
17936: LD_INT 0
17938: PPUSH
17939: PPUSH
17940: PPUSH
17941: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17942: LD_ADDR_VAR 0 4
17946: PUSH
17947: LD_EXP 56
17951: PUSH
17952: LD_EXP 55
17956: ADD
17957: PUSH
17958: LD_EXP 53
17962: ADD
17963: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: LD_INT 3
17971: PPUSH
17972: LD_INT 81
17974: PUSH
17975: LD_INT 3
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PPUSH
17982: CALL_OW 70
17986: ST_TO_ADDR
// if filter and enemy then
17987: LD_VAR 0 4
17991: PUSH
17992: LD_VAR 0 3
17996: AND
17997: IFFALSE 18080
// repeat wait ( 0 0$01 ) ;
17999: LD_INT 35
18001: PPUSH
18002: CALL_OW 67
// for i in filter do
18006: LD_ADDR_VAR 0 1
18010: PUSH
18011: LD_VAR 0 4
18015: PUSH
18016: FOR_IN
18017: IFFALSE 18045
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18019: LD_VAR 0 1
18023: PPUSH
18024: LD_VAR 0 3
18028: PPUSH
18029: LD_VAR 0 1
18033: PPUSH
18034: CALL_OW 74
18038: PPUSH
18039: CALL_OW 115
// end ;
18043: GO 18016
18045: POP
18046: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18047: LD_INT 3
18049: PPUSH
18050: LD_INT 81
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PPUSH
18060: CALL_OW 70
18064: PUSH
18065: LD_INT 0
18067: EQUAL
18068: PUSH
18069: LD_VAR 0 4
18073: PUSH
18074: LD_INT 0
18076: EQUAL
18077: OR
18078: IFFALSE 17999
// end ;
18080: PPOPN 4
18082: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18083: LD_EXP 26
18087: PUSH
18088: LD_INT 22
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 30
18100: PUSH
18101: LD_INT 4
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 3
18110: PUSH
18111: LD_INT 57
18113: PUSH
18114: EMPTY
18115: LIST
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: AND
18131: IFFALSE 18180
18133: GO 18135
18135: DISABLE
18136: LD_INT 0
18138: PPUSH
// begin if not ru_cornel_attack then
18139: LD_EXP 58
18143: NOT
18144: IFFALSE 18148
// exit ;
18146: GO 18180
// for i in ru_cornel_attack do
18148: LD_ADDR_VAR 0 1
18152: PUSH
18153: LD_EXP 58
18157: PUSH
18158: FOR_IN
18159: IFFALSE 18178
// ComAgressiveMove ( i , 258 , 119 ) ;
18161: LD_VAR 0 1
18165: PPUSH
18166: LD_INT 258
18168: PPUSH
18169: LD_INT 119
18171: PPUSH
18172: CALL_OW 114
18176: GO 18158
18178: POP
18179: POP
// end ; end_of_file
18180: PPOPN 1
18182: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18183: LD_EXP 5
18187: PUSH
18188: LD_EXP 9
18192: NOT
18193: AND
18194: PUSH
18195: LD_EXP 20
18199: AND
18200: IFFALSE 18312
18202: GO 18204
18204: DISABLE
18205: LD_INT 0
18207: PPUSH
// begin enable ;
18208: ENABLE
// crates_counter := crates_counter - 50 ;
18209: LD_ADDR_EXP 20
18213: PUSH
18214: LD_EXP 20
18218: PUSH
18219: LD_INT 50
18221: MINUS
18222: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18223: LD_INT 8
18225: PPUSH
18226: LD_INT 2
18228: PPUSH
18229: LD_INT 5
18231: PPUSH
18232: CALL_OW 12
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18244: LD_INT 1785
18246: PPUSH
18247: LD_INT 2345
18249: PPUSH
18250: CALL_OW 12
18254: PPUSH
18255: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18259: LD_ADDR_VAR 0 1
18263: PUSH
18264: LD_INT 1
18266: PPUSH
18267: LD_OWVAR 67
18271: PUSH
18272: LD_INT 2
18274: PLUS
18275: PPUSH
18276: CALL_OW 12
18280: ST_TO_ADDR
// if r < 3 then
18281: LD_VAR 0 1
18285: PUSH
18286: LD_INT 3
18288: LESS
18289: IFFALSE 18312
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18291: LD_INT 4
18293: PPUSH
18294: LD_INT 1
18296: PPUSH
18297: LD_INT 5
18299: PPUSH
18300: CALL_OW 12
18304: PPUSH
18305: LD_INT 1
18307: PPUSH
18308: CALL_OW 55
// end ;
18312: PPOPN 1
18314: END
// every 0 0$01 trigger cornel_active do
18315: LD_EXP 8
18319: IFFALSE 18408
18321: GO 18323
18323: DISABLE
// begin Wait ( 0 0$03 ) ;
18324: LD_INT 105
18326: PPUSH
18327: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18331: LD_INT 2
18333: PPUSH
18334: LD_INT 5
18336: PPUSH
18337: CALL_OW 12
18341: PPUSH
18342: LD_INT 10
18344: PPUSH
18345: LD_INT 1
18347: PPUSH
18348: CALL_OW 55
// Wait ( 0 0$13 ) ;
18352: LD_INT 455
18354: PPUSH
18355: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18359: LD_INT 2
18361: PPUSH
18362: LD_INT 5
18364: PPUSH
18365: CALL_OW 12
18369: PPUSH
18370: LD_INT 10
18372: PPUSH
18373: LD_INT 1
18375: PPUSH
18376: CALL_OW 55
// Wait ( 0 0$16 ) ;
18380: LD_INT 560
18382: PPUSH
18383: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18387: LD_INT 2
18389: PPUSH
18390: LD_INT 5
18392: PPUSH
18393: CALL_OW 12
18397: PPUSH
18398: LD_INT 10
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 55
// end ; end_of_file
18408: END
// every 0 0$01 trigger cornel_prepared do
18409: LD_EXP 11
18413: IFFALSE 18472
18415: GO 18417
18417: DISABLE
// begin enable ;
18418: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18419: LD_ADDR_OWVAR 47
18423: PUSH
18424: LD_STRING #Am03-1
18426: PUSH
18427: LD_EXP 10
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18436: LD_ADDR_EXP 10
18440: PUSH
18441: LD_EXP 10
18445: PPUSH
18446: LD_STRING -
18448: PPUSH
18449: CALL 1077 0 2
18453: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18454: LD_EXP 10
18458: PUSH
18459: LD_INT 0
18461: EQUAL
18462: IFFALSE 18472
// begin Display_Strings := [ ] ;
18464: LD_ADDR_OWVAR 47
18468: PUSH
18469: EMPTY
18470: ST_TO_ADDR
// disable ;
18471: DISABLE
// end ; end ;
18472: END
// every 0 0$01 trigger debug and debug_strings do
18473: LD_EXP 1
18477: PUSH
18478: LD_OWVAR 48
18482: AND
18483: IFFALSE 18499
18485: GO 18487
18487: DISABLE
// begin enable ;
18488: ENABLE
// Display_Strings := debug_strings ;
18489: LD_ADDR_OWVAR 47
18493: PUSH
18494: LD_OWVAR 48
18498: ST_TO_ADDR
// end ; end_of_file
18499: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18500: LD_VAR 0 1
18504: PPUSH
18505: LD_VAR 0 2
18509: PPUSH
18510: CALL 34947 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18514: LD_VAR 0 1
18518: PPUSH
18519: CALL_OW 255
18523: PUSH
18524: LD_INT 1
18526: EQUAL
18527: PUSH
18528: LD_EXP 14
18532: NOT
18533: AND
18534: IFFALSE 18544
// solar_builded := true ;
18536: LD_ADDR_EXP 14
18540: PUSH
18541: LD_INT 1
18543: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18544: LD_VAR 0 1
18548: PPUSH
18549: CALL_OW 255
18553: PUSH
18554: LD_INT 1
18556: EQUAL
18557: PUSH
18558: LD_EXP 29
18562: AND
18563: IFFALSE 18600
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18565: LD_ADDR_EXP 29
18569: PUSH
18570: LD_EXP 29
18574: PUSH
18575: LD_INT 1750
18577: PUSH
18578: LD_INT 1400
18580: PUSH
18581: LD_INT 1225
18583: PUSH
18584: LD_INT 1050
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: PUSH
18593: LD_OWVAR 67
18597: ARRAY
18598: PLUS
18599: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18600: LD_VAR 0 1
18604: PPUSH
18605: CALL_OW 255
18609: PUSH
18610: LD_INT 3
18612: EQUAL
18613: IFFALSE 18631
// ru_vehicles := ru_vehicles ^ veh ;
18615: LD_ADDR_EXP 56
18619: PUSH
18620: LD_EXP 56
18624: PUSH
18625: LD_VAR 0 1
18629: ADD
18630: ST_TO_ADDR
// end ;
18631: PPOPN 2
18633: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18634: LD_VAR 0 1
18638: PPUSH
18639: CALL 34827 0 1
// if un in ru_patrol then
18643: LD_VAR 0 1
18647: PUSH
18648: LD_EXP 53
18652: IN
18653: IFFALSE 18671
// ru_patrol := ru_patrol diff un ;
18655: LD_ADDR_EXP 53
18659: PUSH
18660: LD_EXP 53
18664: PUSH
18665: LD_VAR 0 1
18669: DIFF
18670: ST_TO_ADDR
// if un in ru_forest then
18671: LD_VAR 0 1
18675: PUSH
18676: LD_EXP 55
18680: IN
18681: IFFALSE 18699
// ru_forest := ru_forest diff un ;
18683: LD_ADDR_EXP 55
18687: PUSH
18688: LD_EXP 55
18692: PUSH
18693: LD_VAR 0 1
18697: DIFF
18698: ST_TO_ADDR
// if un in ru_vehicles then
18699: LD_VAR 0 1
18703: PUSH
18704: LD_EXP 56
18708: IN
18709: IFFALSE 18815
// begin ru_vehicles := ru_vehicles diff un ;
18711: LD_ADDR_EXP 56
18715: PUSH
18716: LD_EXP 56
18720: PUSH
18721: LD_VAR 0 1
18725: DIFF
18726: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18727: LD_ADDR_EXP 57
18731: PUSH
18732: LD_EXP 57
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 265
18746: PUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 262
18756: PUSH
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 263
18766: PUSH
18767: LD_VAR 0 1
18771: PPUSH
18772: CALL_OW 264
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: ADD
18783: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18784: LD_ADDR_EXP 13
18788: PUSH
18789: LD_EXP 13
18793: PUSH
18794: LD_INT 1
18796: PLUS
18797: ST_TO_ADDR
// if ach_counter = 10 then
18798: LD_EXP 13
18802: PUSH
18803: LD_INT 10
18805: EQUAL
18806: IFFALSE 18815
// SetAchievement ( ACH_FAUST ) ;
18808: LD_STRING ACH_FAUST
18810: PPUSH
18811: CALL_OW 543
// end ; if un = Pokryshkin then
18815: LD_VAR 0 1
18819: PUSH
18820: LD_EXP 52
18824: EQUAL
18825: IFFALSE 18834
// SetAchievement ( ACH_POKR ) ;
18827: LD_STRING ACH_POKR
18829: PPUSH
18830: CALL_OW 543
// if un = JMM then
18834: LD_VAR 0 1
18838: PUSH
18839: LD_EXP 37
18843: EQUAL
18844: IFFALSE 18853
// YouLost ( 0 ) ;
18846: LD_STRING 0
18848: PPUSH
18849: CALL_OW 104
// if un = us_dep_west then
18853: LD_VAR 0 1
18857: PUSH
18858: LD_INT 1
18860: EQUAL
18861: IFFALSE 18870
// YouLost ( 2 ) ;
18863: LD_STRING 2
18865: PPUSH
18866: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL_OW 255
18879: PUSH
18880: LD_INT 8
18882: EQUAL
18883: PUSH
18884: LD_EXP 5
18888: NOT
18889: AND
18890: IFFALSE 18899
// YouLost ( 4 ) ;
18892: LD_STRING 4
18894: PPUSH
18895: CALL_OW 104
// if un in jmm_units then
18899: LD_VAR 0 1
18903: PUSH
18904: LD_EXP 4
18908: IN
18909: IFFALSE 18925
// lose_counter := lose_counter + 1 ;
18911: LD_ADDR_EXP 34
18915: PUSH
18916: LD_EXP 34
18920: PUSH
18921: LD_INT 1
18923: PLUS
18924: ST_TO_ADDR
// end ;
18925: PPOPN 1
18927: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18928: LD_INT 0
18930: PPUSH
18931: PPUSH
// begin if GetSide ( driver ) = 3 then
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 255
18941: PUSH
18942: LD_INT 3
18944: EQUAL
18945: IFFALSE 19023
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18947: LD_ADDR_VAR 0 6
18951: PUSH
18952: LD_INT 22
18954: PUSH
18955: LD_INT 3
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 30
18964: PUSH
18965: LD_INT 3
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL_OW 69
18980: PPUSH
18981: CALL 1007 0 1
18985: ST_TO_ADDR
// if place then
18986: LD_VAR 0 6
18990: IFFALSE 19008
// ComEnterUnit ( driver , place ) else
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_VAR 0 6
19001: PPUSH
19002: CALL_OW 120
19006: GO 19023
// ComMoveXY ( driver , 70 , 22 ) ;
19008: LD_VAR 0 1
19012: PPUSH
19013: LD_INT 70
19015: PPUSH
19016: LD_INT 22
19018: PPUSH
19019: CALL_OW 111
// end ; end ;
19023: PPOPN 6
19025: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19026: LD_VAR 0 1
19030: PUSH
19031: LD_INT 1
19033: EQUAL
19034: PUSH
19035: LD_VAR 0 2
19039: PUSH
19040: LD_INT 4
19042: EQUAL
19043: PUSH
19044: LD_VAR 0 2
19048: PUSH
19049: LD_INT 8
19051: EQUAL
19052: PUSH
19053: LD_EXP 5
19057: NOT
19058: AND
19059: OR
19060: AND
19061: IFFALSE 19070
// YouLost ( 5 ) ;
19063: LD_STRING 5
19065: PPUSH
19066: CALL_OW 104
// end ;
19070: PPOPN 2
19072: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19073: LD_EXP 36
19077: PUSH
19078: LD_INT 22
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 21
19090: PUSH
19091: LD_INT 1
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PPUSH
19102: CALL_OW 69
19106: PUSH
19107: LD_INT 22
19109: PUSH
19110: LD_INT 8
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 21
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PPUSH
19131: CALL_OW 69
19135: ADD
19136: PLUS
19137: PUSH
19138: LD_INT 5
19140: LESS
19141: IFFALSE 19153
19143: GO 19145
19145: DISABLE
// YouLost ( 1 ) ;
19146: LD_STRING 1
19148: PPUSH
19149: CALL_OW 104
19153: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19154: LD_INT 1
19156: PPUSH
19157: CALL_OW 255
19161: PUSH
19162: LD_INT 3
19164: EQUAL
19165: IFFALSE 19177
19167: GO 19169
19169: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19170: LD_STRING 3
19172: PPUSH
19173: CALL_OW 104
19177: END
// every 0 0$1 do
19178: GO 19180
19180: DISABLE
// begin enable ;
19181: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19182: LD_STRING updateTimer(
19184: PUSH
19185: LD_OWVAR 1
19189: STR
19190: PUSH
19191: LD_STRING );
19193: STR
19194: PPUSH
19195: CALL_OW 559
// end ;
19199: END
// export function SOS_MapStart ( ) ; begin
19200: LD_INT 0
19202: PPUSH
// if streamModeActive then
19203: LD_EXP 62
19207: IFFALSE 19216
// DefineStreamItems ( true ) ;
19209: LD_INT 1
19211: PPUSH
19212: CALL 20870 0 1
// UpdateFactoryWaypoints ( ) ;
19216: CALL 33731 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19220: CALL 33988 0 0
// end ;
19224: LD_VAR 0 1
19228: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19229: LD_INT 0
19231: PPUSH
// if p2 = hack_mode then
19232: LD_VAR 0 2
19236: PUSH
19237: LD_INT 100
19239: EQUAL
19240: IFFALSE 20243
// begin if not StreamModeActive then
19242: LD_EXP 62
19246: NOT
19247: IFFALSE 19257
// StreamModeActive := true ;
19249: LD_ADDR_EXP 62
19253: PUSH
19254: LD_INT 1
19256: ST_TO_ADDR
// if p3 = 0 then
19257: LD_VAR 0 3
19261: PUSH
19262: LD_INT 0
19264: EQUAL
19265: IFFALSE 19271
// InitStreamMode ;
19267: CALL 20406 0 0
// if p3 = 1 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 1
19278: EQUAL
19279: IFFALSE 19289
// sRocket := true ;
19281: LD_ADDR_EXP 67
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 2 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 2
19296: EQUAL
19297: IFFALSE 19307
// sSpeed := true ;
19299: LD_ADDR_EXP 66
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 3 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 3
19314: EQUAL
19315: IFFALSE 19325
// sEngine := true ;
19317: LD_ADDR_EXP 68
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 4 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 4
19332: EQUAL
19333: IFFALSE 19343
// sSpec := true ;
19335: LD_ADDR_EXP 65
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 5 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 5
19350: EQUAL
19351: IFFALSE 19361
// sLevel := true ;
19353: LD_ADDR_EXP 69
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 6 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 6
19368: EQUAL
19369: IFFALSE 19379
// sArmoury := true ;
19371: LD_ADDR_EXP 70
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 7 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 7
19386: EQUAL
19387: IFFALSE 19397
// sRadar := true ;
19389: LD_ADDR_EXP 71
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 8 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 8
19404: EQUAL
19405: IFFALSE 19415
// sBunker := true ;
19407: LD_ADDR_EXP 72
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 9 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 9
19422: EQUAL
19423: IFFALSE 19433
// sHack := true ;
19425: LD_ADDR_EXP 73
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 10 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 10
19440: EQUAL
19441: IFFALSE 19451
// sFire := true ;
19443: LD_ADDR_EXP 74
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 11 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 11
19458: EQUAL
19459: IFFALSE 19469
// sRefresh := true ;
19461: LD_ADDR_EXP 75
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 12 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 12
19476: EQUAL
19477: IFFALSE 19487
// sExp := true ;
19479: LD_ADDR_EXP 76
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 13 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 13
19494: EQUAL
19495: IFFALSE 19505
// sDepot := true ;
19497: LD_ADDR_EXP 77
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 14 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 14
19512: EQUAL
19513: IFFALSE 19523
// sFlag := true ;
19515: LD_ADDR_EXP 78
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 15 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 15
19530: EQUAL
19531: IFFALSE 19541
// sKamikadze := true ;
19533: LD_ADDR_EXP 86
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 16 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 16
19548: EQUAL
19549: IFFALSE 19559
// sTroll := true ;
19551: LD_ADDR_EXP 87
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 17 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 17
19566: EQUAL
19567: IFFALSE 19577
// sSlow := true ;
19569: LD_ADDR_EXP 88
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 18 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 18
19584: EQUAL
19585: IFFALSE 19595
// sLack := true ;
19587: LD_ADDR_EXP 89
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 19 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 19
19602: EQUAL
19603: IFFALSE 19613
// sTank := true ;
19605: LD_ADDR_EXP 91
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 20 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 20
19620: EQUAL
19621: IFFALSE 19631
// sRemote := true ;
19623: LD_ADDR_EXP 92
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 21 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 21
19638: EQUAL
19639: IFFALSE 19649
// sPowell := true ;
19641: LD_ADDR_EXP 93
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 22 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 22
19656: EQUAL
19657: IFFALSE 19667
// sTeleport := true ;
19659: LD_ADDR_EXP 96
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 23 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 23
19674: EQUAL
19675: IFFALSE 19685
// sOilTower := true ;
19677: LD_ADDR_EXP 98
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 24 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 24
19692: EQUAL
19693: IFFALSE 19703
// sShovel := true ;
19695: LD_ADDR_EXP 99
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 25 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 25
19710: EQUAL
19711: IFFALSE 19721
// sSheik := true ;
19713: LD_ADDR_EXP 100
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 26 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 26
19728: EQUAL
19729: IFFALSE 19739
// sEarthquake := true ;
19731: LD_ADDR_EXP 102
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 27 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 27
19746: EQUAL
19747: IFFALSE 19757
// sAI := true ;
19749: LD_ADDR_EXP 103
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 28 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 28
19764: EQUAL
19765: IFFALSE 19775
// sCargo := true ;
19767: LD_ADDR_EXP 106
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 29 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 29
19782: EQUAL
19783: IFFALSE 19793
// sDLaser := true ;
19785: LD_ADDR_EXP 107
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 30 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 30
19800: EQUAL
19801: IFFALSE 19811
// sExchange := true ;
19803: LD_ADDR_EXP 108
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 31 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 31
19818: EQUAL
19819: IFFALSE 19829
// sFac := true ;
19821: LD_ADDR_EXP 109
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 32 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 32
19836: EQUAL
19837: IFFALSE 19847
// sPower := true ;
19839: LD_ADDR_EXP 110
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 33 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 33
19854: EQUAL
19855: IFFALSE 19865
// sRandom := true ;
19857: LD_ADDR_EXP 111
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 34 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 34
19872: EQUAL
19873: IFFALSE 19883
// sShield := true ;
19875: LD_ADDR_EXP 112
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 35 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 35
19890: EQUAL
19891: IFFALSE 19901
// sTime := true ;
19893: LD_ADDR_EXP 113
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 36 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 36
19908: EQUAL
19909: IFFALSE 19919
// sTools := true ;
19911: LD_ADDR_EXP 114
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 101 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 101
19926: EQUAL
19927: IFFALSE 19937
// sSold := true ;
19929: LD_ADDR_EXP 79
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 102 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 102
19944: EQUAL
19945: IFFALSE 19955
// sDiff := true ;
19947: LD_ADDR_EXP 80
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// if p3 = 103 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 103
19962: EQUAL
19963: IFFALSE 19973
// sFog := true ;
19965: LD_ADDR_EXP 83
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 104 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 104
19980: EQUAL
19981: IFFALSE 19991
// sReset := true ;
19983: LD_ADDR_EXP 84
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 105 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 105
19998: EQUAL
19999: IFFALSE 20009
// sSun := true ;
20001: LD_ADDR_EXP 85
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 106 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 106
20016: EQUAL
20017: IFFALSE 20027
// sTiger := true ;
20019: LD_ADDR_EXP 81
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// if p3 = 107 then
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 107
20034: EQUAL
20035: IFFALSE 20045
// sBomb := true ;
20037: LD_ADDR_EXP 82
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if p3 = 108 then
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 108
20052: EQUAL
20053: IFFALSE 20063
// sWound := true ;
20055: LD_ADDR_EXP 90
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// if p3 = 109 then
20063: LD_VAR 0 3
20067: PUSH
20068: LD_INT 109
20070: EQUAL
20071: IFFALSE 20081
// sBetray := true ;
20073: LD_ADDR_EXP 94
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// if p3 = 110 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 110
20088: EQUAL
20089: IFFALSE 20099
// sContamin := true ;
20091: LD_ADDR_EXP 95
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// if p3 = 111 then
20099: LD_VAR 0 3
20103: PUSH
20104: LD_INT 111
20106: EQUAL
20107: IFFALSE 20117
// sOil := true ;
20109: LD_ADDR_EXP 97
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// if p3 = 112 then
20117: LD_VAR 0 3
20121: PUSH
20122: LD_INT 112
20124: EQUAL
20125: IFFALSE 20135
// sStu := true ;
20127: LD_ADDR_EXP 101
20131: PUSH
20132: LD_INT 1
20134: ST_TO_ADDR
// if p3 = 113 then
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 113
20142: EQUAL
20143: IFFALSE 20153
// sBazooka := true ;
20145: LD_ADDR_EXP 104
20149: PUSH
20150: LD_INT 1
20152: ST_TO_ADDR
// if p3 = 114 then
20153: LD_VAR 0 3
20157: PUSH
20158: LD_INT 114
20160: EQUAL
20161: IFFALSE 20171
// sMortar := true ;
20163: LD_ADDR_EXP 105
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// if p3 = 115 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_INT 115
20178: EQUAL
20179: IFFALSE 20189
// sRanger := true ;
20181: LD_ADDR_EXP 115
20185: PUSH
20186: LD_INT 1
20188: ST_TO_ADDR
// if p3 = 116 then
20189: LD_VAR 0 3
20193: PUSH
20194: LD_INT 116
20196: EQUAL
20197: IFFALSE 20207
// sComputer := true ;
20199: LD_ADDR_EXP 116
20203: PUSH
20204: LD_INT 1
20206: ST_TO_ADDR
// if p3 = 117 then
20207: LD_VAR 0 3
20211: PUSH
20212: LD_INT 117
20214: EQUAL
20215: IFFALSE 20225
// s30 := true ;
20217: LD_ADDR_EXP 117
20221: PUSH
20222: LD_INT 1
20224: ST_TO_ADDR
// if p3 = 118 then
20225: LD_VAR 0 3
20229: PUSH
20230: LD_INT 118
20232: EQUAL
20233: IFFALSE 20243
// s60 := true ;
20235: LD_ADDR_EXP 118
20239: PUSH
20240: LD_INT 1
20242: ST_TO_ADDR
// end ; if p2 = stream_mode then
20243: LD_VAR 0 2
20247: PUSH
20248: LD_INT 101
20250: EQUAL
20251: IFFALSE 20379
// begin case p3 of 1 :
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 1
20260: DOUBLE
20261: EQUAL
20262: IFTRUE 20266
20264: GO 20273
20266: POP
// hHackUnlimitedResources ; 2 :
20267: CALL 32477 0 0
20271: GO 20379
20273: LD_INT 2
20275: DOUBLE
20276: EQUAL
20277: IFTRUE 20281
20279: GO 20288
20281: POP
// hHackSetLevel10 ; 3 :
20282: CALL 32610 0 0
20286: GO 20379
20288: LD_INT 3
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20303
20296: POP
// hHackSetLevel10YourUnits ; 4 :
20297: CALL 32695 0 0
20301: GO 20379
20303: LD_INT 4
20305: DOUBLE
20306: EQUAL
20307: IFTRUE 20311
20309: GO 20318
20311: POP
// hHackInvincible ; 5 :
20312: CALL 33143 0 0
20316: GO 20379
20318: LD_INT 5
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20333
20326: POP
// hHackInvisible ; 6 :
20327: CALL 33254 0 0
20331: GO 20379
20333: LD_INT 6
20335: DOUBLE
20336: EQUAL
20337: IFTRUE 20341
20339: GO 20348
20341: POP
// hHackChangeYourSide ; 7 :
20342: CALL 33311 0 0
20346: GO 20379
20348: LD_INT 7
20350: DOUBLE
20351: EQUAL
20352: IFTRUE 20356
20354: GO 20363
20356: POP
// hHackChangeUnitSide ; 8 :
20357: CALL 33353 0 0
20361: GO 20379
20363: LD_INT 8
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20378
20371: POP
// hHackFog ; end ;
20372: CALL 33454 0 0
20376: GO 20379
20378: POP
// end ; end ;
20379: LD_VAR 0 7
20383: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20384: GO 20386
20386: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20387: LD_STRING initStreamRollete();
20389: PPUSH
20390: CALL_OW 559
// InitStreamMode ;
20394: CALL 20406 0 0
// DefineStreamItems ( false ) ;
20398: LD_INT 0
20400: PPUSH
20401: CALL 20870 0 1
// end ;
20405: END
// function InitStreamMode ; begin
20406: LD_INT 0
20408: PPUSH
// streamModeActive := false ;
20409: LD_ADDR_EXP 62
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// normalCounter := 36 ;
20417: LD_ADDR_EXP 63
20421: PUSH
20422: LD_INT 36
20424: ST_TO_ADDR
// hardcoreCounter := 18 ;
20425: LD_ADDR_EXP 64
20429: PUSH
20430: LD_INT 18
20432: ST_TO_ADDR
// sRocket := false ;
20433: LD_ADDR_EXP 67
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sSpeed := false ;
20441: LD_ADDR_EXP 66
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sEngine := false ;
20449: LD_ADDR_EXP 68
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sSpec := false ;
20457: LD_ADDR_EXP 65
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sLevel := false ;
20465: LD_ADDR_EXP 69
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sArmoury := false ;
20473: LD_ADDR_EXP 70
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sRadar := false ;
20481: LD_ADDR_EXP 71
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sBunker := false ;
20489: LD_ADDR_EXP 72
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sHack := false ;
20497: LD_ADDR_EXP 73
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sFire := false ;
20505: LD_ADDR_EXP 74
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sRefresh := false ;
20513: LD_ADDR_EXP 75
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sExp := false ;
20521: LD_ADDR_EXP 76
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sDepot := false ;
20529: LD_ADDR_EXP 77
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sFlag := false ;
20537: LD_ADDR_EXP 78
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sKamikadze := false ;
20545: LD_ADDR_EXP 86
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sTroll := false ;
20553: LD_ADDR_EXP 87
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// sSlow := false ;
20561: LD_ADDR_EXP 88
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// sLack := false ;
20569: LD_ADDR_EXP 89
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// sTank := false ;
20577: LD_ADDR_EXP 91
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// sRemote := false ;
20585: LD_ADDR_EXP 92
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// sPowell := false ;
20593: LD_ADDR_EXP 93
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// sTeleport := false ;
20601: LD_ADDR_EXP 96
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sOilTower := false ;
20609: LD_ADDR_EXP 98
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sShovel := false ;
20617: LD_ADDR_EXP 99
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sSheik := false ;
20625: LD_ADDR_EXP 100
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sEarthquake := false ;
20633: LD_ADDR_EXP 102
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sAI := false ;
20641: LD_ADDR_EXP 103
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sCargo := false ;
20649: LD_ADDR_EXP 106
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sDLaser := false ;
20657: LD_ADDR_EXP 107
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sExchange := false ;
20665: LD_ADDR_EXP 108
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sFac := false ;
20673: LD_ADDR_EXP 109
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sPower := false ;
20681: LD_ADDR_EXP 110
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sRandom := false ;
20689: LD_ADDR_EXP 111
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sShield := false ;
20697: LD_ADDR_EXP 112
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sTime := false ;
20705: LD_ADDR_EXP 113
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sTools := false ;
20713: LD_ADDR_EXP 114
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// sSold := false ;
20721: LD_ADDR_EXP 79
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// sDiff := false ;
20729: LD_ADDR_EXP 80
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// sFog := false ;
20737: LD_ADDR_EXP 83
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sReset := false ;
20745: LD_ADDR_EXP 84
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sSun := false ;
20753: LD_ADDR_EXP 85
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sTiger := false ;
20761: LD_ADDR_EXP 81
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sBomb := false ;
20769: LD_ADDR_EXP 82
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sWound := false ;
20777: LD_ADDR_EXP 90
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sBetray := false ;
20785: LD_ADDR_EXP 94
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sContamin := false ;
20793: LD_ADDR_EXP 95
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sOil := false ;
20801: LD_ADDR_EXP 97
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sStu := false ;
20809: LD_ADDR_EXP 101
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sBazooka := false ;
20817: LD_ADDR_EXP 104
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sMortar := false ;
20825: LD_ADDR_EXP 105
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// sRanger := false ;
20833: LD_ADDR_EXP 115
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// sComputer := false ;
20841: LD_ADDR_EXP 116
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// s30 := false ;
20849: LD_ADDR_EXP 117
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// s60 := false ;
20857: LD_ADDR_EXP 118
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// end ;
20865: LD_VAR 0 1
20869: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20870: LD_INT 0
20872: PPUSH
20873: PPUSH
20874: PPUSH
20875: PPUSH
20876: PPUSH
20877: PPUSH
20878: PPUSH
// result := [ ] ;
20879: LD_ADDR_VAR 0 2
20883: PUSH
20884: EMPTY
20885: ST_TO_ADDR
// if campaign_id = 1 then
20886: LD_OWVAR 69
20890: PUSH
20891: LD_INT 1
20893: EQUAL
20894: IFFALSE 24060
// begin case mission_number of 1 :
20896: LD_OWVAR 70
20900: PUSH
20901: LD_INT 1
20903: DOUBLE
20904: EQUAL
20905: IFTRUE 20909
20907: GO 20985
20909: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20910: LD_ADDR_VAR 0 2
20914: PUSH
20915: LD_INT 2
20917: PUSH
20918: LD_INT 4
20920: PUSH
20921: LD_INT 11
20923: PUSH
20924: LD_INT 12
20926: PUSH
20927: LD_INT 15
20929: PUSH
20930: LD_INT 16
20932: PUSH
20933: LD_INT 22
20935: PUSH
20936: LD_INT 23
20938: PUSH
20939: LD_INT 26
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 101
20955: PUSH
20956: LD_INT 102
20958: PUSH
20959: LD_INT 106
20961: PUSH
20962: LD_INT 116
20964: PUSH
20965: LD_INT 117
20967: PUSH
20968: LD_INT 118
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: ST_TO_ADDR
20983: GO 24058
20985: LD_INT 2
20987: DOUBLE
20988: EQUAL
20989: IFTRUE 20993
20991: GO 21077
20993: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20994: LD_ADDR_VAR 0 2
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: LD_INT 4
21004: PUSH
21005: LD_INT 11
21007: PUSH
21008: LD_INT 12
21010: PUSH
21011: LD_INT 15
21013: PUSH
21014: LD_INT 16
21016: PUSH
21017: LD_INT 22
21019: PUSH
21020: LD_INT 23
21022: PUSH
21023: LD_INT 26
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 101
21039: PUSH
21040: LD_INT 102
21042: PUSH
21043: LD_INT 105
21045: PUSH
21046: LD_INT 106
21048: PUSH
21049: LD_INT 108
21051: PUSH
21052: LD_INT 116
21054: PUSH
21055: LD_INT 117
21057: PUSH
21058: LD_INT 118
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: ST_TO_ADDR
21075: GO 24058
21077: LD_INT 3
21079: DOUBLE
21080: EQUAL
21081: IFTRUE 21085
21083: GO 21173
21085: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21086: LD_ADDR_VAR 0 2
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 4
21096: PUSH
21097: LD_INT 5
21099: PUSH
21100: LD_INT 11
21102: PUSH
21103: LD_INT 12
21105: PUSH
21106: LD_INT 15
21108: PUSH
21109: LD_INT 16
21111: PUSH
21112: LD_INT 22
21114: PUSH
21115: LD_INT 26
21117: PUSH
21118: LD_INT 36
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 101
21135: PUSH
21136: LD_INT 102
21138: PUSH
21139: LD_INT 105
21141: PUSH
21142: LD_INT 106
21144: PUSH
21145: LD_INT 108
21147: PUSH
21148: LD_INT 116
21150: PUSH
21151: LD_INT 117
21153: PUSH
21154: LD_INT 118
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: ST_TO_ADDR
21171: GO 24058
21173: LD_INT 4
21175: DOUBLE
21176: EQUAL
21177: IFTRUE 21181
21179: GO 21277
21181: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21182: LD_ADDR_VAR 0 2
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 4
21192: PUSH
21193: LD_INT 5
21195: PUSH
21196: LD_INT 8
21198: PUSH
21199: LD_INT 11
21201: PUSH
21202: LD_INT 12
21204: PUSH
21205: LD_INT 15
21207: PUSH
21208: LD_INT 16
21210: PUSH
21211: LD_INT 22
21213: PUSH
21214: LD_INT 23
21216: PUSH
21217: LD_INT 26
21219: PUSH
21220: LD_INT 36
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 101
21239: PUSH
21240: LD_INT 102
21242: PUSH
21243: LD_INT 105
21245: PUSH
21246: LD_INT 106
21248: PUSH
21249: LD_INT 108
21251: PUSH
21252: LD_INT 116
21254: PUSH
21255: LD_INT 117
21257: PUSH
21258: LD_INT 118
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: ST_TO_ADDR
21275: GO 24058
21277: LD_INT 5
21279: DOUBLE
21280: EQUAL
21281: IFTRUE 21285
21283: GO 21397
21285: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21286: LD_ADDR_VAR 0 2
21290: PUSH
21291: LD_INT 2
21293: PUSH
21294: LD_INT 4
21296: PUSH
21297: LD_INT 5
21299: PUSH
21300: LD_INT 6
21302: PUSH
21303: LD_INT 8
21305: PUSH
21306: LD_INT 11
21308: PUSH
21309: LD_INT 12
21311: PUSH
21312: LD_INT 15
21314: PUSH
21315: LD_INT 16
21317: PUSH
21318: LD_INT 22
21320: PUSH
21321: LD_INT 23
21323: PUSH
21324: LD_INT 25
21326: PUSH
21327: LD_INT 26
21329: PUSH
21330: LD_INT 36
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 101
21351: PUSH
21352: LD_INT 102
21354: PUSH
21355: LD_INT 105
21357: PUSH
21358: LD_INT 106
21360: PUSH
21361: LD_INT 108
21363: PUSH
21364: LD_INT 109
21366: PUSH
21367: LD_INT 112
21369: PUSH
21370: LD_INT 116
21372: PUSH
21373: LD_INT 117
21375: PUSH
21376: LD_INT 118
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: ST_TO_ADDR
21395: GO 24058
21397: LD_INT 6
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21537
21405: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21406: LD_ADDR_VAR 0 2
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: LD_INT 4
21416: PUSH
21417: LD_INT 5
21419: PUSH
21420: LD_INT 6
21422: PUSH
21423: LD_INT 8
21425: PUSH
21426: LD_INT 11
21428: PUSH
21429: LD_INT 12
21431: PUSH
21432: LD_INT 15
21434: PUSH
21435: LD_INT 16
21437: PUSH
21438: LD_INT 20
21440: PUSH
21441: LD_INT 21
21443: PUSH
21444: LD_INT 22
21446: PUSH
21447: LD_INT 23
21449: PUSH
21450: LD_INT 25
21452: PUSH
21453: LD_INT 26
21455: PUSH
21456: LD_INT 30
21458: PUSH
21459: LD_INT 31
21461: PUSH
21462: LD_INT 32
21464: PUSH
21465: LD_INT 36
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 101
21491: PUSH
21492: LD_INT 102
21494: PUSH
21495: LD_INT 105
21497: PUSH
21498: LD_INT 106
21500: PUSH
21501: LD_INT 108
21503: PUSH
21504: LD_INT 109
21506: PUSH
21507: LD_INT 112
21509: PUSH
21510: LD_INT 116
21512: PUSH
21513: LD_INT 117
21515: PUSH
21516: LD_INT 118
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: ST_TO_ADDR
21535: GO 24058
21537: LD_INT 7
21539: DOUBLE
21540: EQUAL
21541: IFTRUE 21545
21543: GO 21657
21545: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21546: LD_ADDR_VAR 0 2
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 4
21556: PUSH
21557: LD_INT 5
21559: PUSH
21560: LD_INT 7
21562: PUSH
21563: LD_INT 11
21565: PUSH
21566: LD_INT 12
21568: PUSH
21569: LD_INT 15
21571: PUSH
21572: LD_INT 16
21574: PUSH
21575: LD_INT 20
21577: PUSH
21578: LD_INT 21
21580: PUSH
21581: LD_INT 22
21583: PUSH
21584: LD_INT 23
21586: PUSH
21587: LD_INT 25
21589: PUSH
21590: LD_INT 26
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 101
21611: PUSH
21612: LD_INT 102
21614: PUSH
21615: LD_INT 103
21617: PUSH
21618: LD_INT 105
21620: PUSH
21621: LD_INT 106
21623: PUSH
21624: LD_INT 108
21626: PUSH
21627: LD_INT 112
21629: PUSH
21630: LD_INT 116
21632: PUSH
21633: LD_INT 117
21635: PUSH
21636: LD_INT 118
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: ST_TO_ADDR
21655: GO 24058
21657: LD_INT 8
21659: DOUBLE
21660: EQUAL
21661: IFTRUE 21665
21663: GO 21805
21665: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21666: LD_ADDR_VAR 0 2
21670: PUSH
21671: LD_INT 2
21673: PUSH
21674: LD_INT 4
21676: PUSH
21677: LD_INT 5
21679: PUSH
21680: LD_INT 6
21682: PUSH
21683: LD_INT 7
21685: PUSH
21686: LD_INT 8
21688: PUSH
21689: LD_INT 11
21691: PUSH
21692: LD_INT 12
21694: PUSH
21695: LD_INT 15
21697: PUSH
21698: LD_INT 16
21700: PUSH
21701: LD_INT 20
21703: PUSH
21704: LD_INT 21
21706: PUSH
21707: LD_INT 22
21709: PUSH
21710: LD_INT 23
21712: PUSH
21713: LD_INT 25
21715: PUSH
21716: LD_INT 26
21718: PUSH
21719: LD_INT 30
21721: PUSH
21722: LD_INT 31
21724: PUSH
21725: LD_INT 32
21727: PUSH
21728: LD_INT 36
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 101
21755: PUSH
21756: LD_INT 102
21758: PUSH
21759: LD_INT 103
21761: PUSH
21762: LD_INT 105
21764: PUSH
21765: LD_INT 106
21767: PUSH
21768: LD_INT 108
21770: PUSH
21771: LD_INT 109
21773: PUSH
21774: LD_INT 112
21776: PUSH
21777: LD_INT 116
21779: PUSH
21780: LD_INT 117
21782: PUSH
21783: LD_INT 118
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: ST_TO_ADDR
21803: GO 24058
21805: LD_INT 9
21807: DOUBLE
21808: EQUAL
21809: IFTRUE 21813
21811: GO 21961
21813: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21814: LD_ADDR_VAR 0 2
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: LD_INT 4
21824: PUSH
21825: LD_INT 5
21827: PUSH
21828: LD_INT 6
21830: PUSH
21831: LD_INT 7
21833: PUSH
21834: LD_INT 8
21836: PUSH
21837: LD_INT 11
21839: PUSH
21840: LD_INT 12
21842: PUSH
21843: LD_INT 15
21845: PUSH
21846: LD_INT 16
21848: PUSH
21849: LD_INT 20
21851: PUSH
21852: LD_INT 21
21854: PUSH
21855: LD_INT 22
21857: PUSH
21858: LD_INT 23
21860: PUSH
21861: LD_INT 25
21863: PUSH
21864: LD_INT 26
21866: PUSH
21867: LD_INT 28
21869: PUSH
21870: LD_INT 30
21872: PUSH
21873: LD_INT 31
21875: PUSH
21876: LD_INT 32
21878: PUSH
21879: LD_INT 36
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 101
21907: PUSH
21908: LD_INT 102
21910: PUSH
21911: LD_INT 103
21913: PUSH
21914: LD_INT 105
21916: PUSH
21917: LD_INT 106
21919: PUSH
21920: LD_INT 108
21922: PUSH
21923: LD_INT 109
21925: PUSH
21926: LD_INT 112
21928: PUSH
21929: LD_INT 114
21931: PUSH
21932: LD_INT 116
21934: PUSH
21935: LD_INT 117
21937: PUSH
21938: LD_INT 118
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: ST_TO_ADDR
21959: GO 24058
21961: LD_INT 10
21963: DOUBLE
21964: EQUAL
21965: IFTRUE 21969
21967: GO 22165
21969: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21970: LD_ADDR_VAR 0 2
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: LD_INT 4
21980: PUSH
21981: LD_INT 5
21983: PUSH
21984: LD_INT 6
21986: PUSH
21987: LD_INT 7
21989: PUSH
21990: LD_INT 8
21992: PUSH
21993: LD_INT 9
21995: PUSH
21996: LD_INT 10
21998: PUSH
21999: LD_INT 11
22001: PUSH
22002: LD_INT 12
22004: PUSH
22005: LD_INT 13
22007: PUSH
22008: LD_INT 14
22010: PUSH
22011: LD_INT 15
22013: PUSH
22014: LD_INT 16
22016: PUSH
22017: LD_INT 17
22019: PUSH
22020: LD_INT 18
22022: PUSH
22023: LD_INT 19
22025: PUSH
22026: LD_INT 20
22028: PUSH
22029: LD_INT 21
22031: PUSH
22032: LD_INT 22
22034: PUSH
22035: LD_INT 23
22037: PUSH
22038: LD_INT 24
22040: PUSH
22041: LD_INT 25
22043: PUSH
22044: LD_INT 26
22046: PUSH
22047: LD_INT 28
22049: PUSH
22050: LD_INT 30
22052: PUSH
22053: LD_INT 31
22055: PUSH
22056: LD_INT 32
22058: PUSH
22059: LD_INT 36
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 101
22095: PUSH
22096: LD_INT 102
22098: PUSH
22099: LD_INT 103
22101: PUSH
22102: LD_INT 104
22104: PUSH
22105: LD_INT 105
22107: PUSH
22108: LD_INT 106
22110: PUSH
22111: LD_INT 107
22113: PUSH
22114: LD_INT 108
22116: PUSH
22117: LD_INT 109
22119: PUSH
22120: LD_INT 110
22122: PUSH
22123: LD_INT 111
22125: PUSH
22126: LD_INT 112
22128: PUSH
22129: LD_INT 114
22131: PUSH
22132: LD_INT 116
22134: PUSH
22135: LD_INT 117
22137: PUSH
22138: LD_INT 118
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: ST_TO_ADDR
22163: GO 24058
22165: LD_INT 11
22167: DOUBLE
22168: EQUAL
22169: IFTRUE 22173
22171: GO 22377
22173: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22174: LD_ADDR_VAR 0 2
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: LD_INT 4
22187: PUSH
22188: LD_INT 5
22190: PUSH
22191: LD_INT 6
22193: PUSH
22194: LD_INT 7
22196: PUSH
22197: LD_INT 8
22199: PUSH
22200: LD_INT 9
22202: PUSH
22203: LD_INT 10
22205: PUSH
22206: LD_INT 11
22208: PUSH
22209: LD_INT 12
22211: PUSH
22212: LD_INT 13
22214: PUSH
22215: LD_INT 14
22217: PUSH
22218: LD_INT 15
22220: PUSH
22221: LD_INT 16
22223: PUSH
22224: LD_INT 17
22226: PUSH
22227: LD_INT 18
22229: PUSH
22230: LD_INT 19
22232: PUSH
22233: LD_INT 20
22235: PUSH
22236: LD_INT 21
22238: PUSH
22239: LD_INT 22
22241: PUSH
22242: LD_INT 23
22244: PUSH
22245: LD_INT 24
22247: PUSH
22248: LD_INT 25
22250: PUSH
22251: LD_INT 26
22253: PUSH
22254: LD_INT 28
22256: PUSH
22257: LD_INT 30
22259: PUSH
22260: LD_INT 31
22262: PUSH
22263: LD_INT 32
22265: PUSH
22266: LD_INT 34
22268: PUSH
22269: LD_INT 36
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 101
22307: PUSH
22308: LD_INT 102
22310: PUSH
22311: LD_INT 103
22313: PUSH
22314: LD_INT 104
22316: PUSH
22317: LD_INT 105
22319: PUSH
22320: LD_INT 106
22322: PUSH
22323: LD_INT 107
22325: PUSH
22326: LD_INT 108
22328: PUSH
22329: LD_INT 109
22331: PUSH
22332: LD_INT 110
22334: PUSH
22335: LD_INT 111
22337: PUSH
22338: LD_INT 112
22340: PUSH
22341: LD_INT 114
22343: PUSH
22344: LD_INT 116
22346: PUSH
22347: LD_INT 117
22349: PUSH
22350: LD_INT 118
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: ST_TO_ADDR
22375: GO 24058
22377: LD_INT 12
22379: DOUBLE
22380: EQUAL
22381: IFTRUE 22385
22383: GO 22605
22385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22386: LD_ADDR_VAR 0 2
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: LD_INT 3
22399: PUSH
22400: LD_INT 4
22402: PUSH
22403: LD_INT 5
22405: PUSH
22406: LD_INT 6
22408: PUSH
22409: LD_INT 7
22411: PUSH
22412: LD_INT 8
22414: PUSH
22415: LD_INT 9
22417: PUSH
22418: LD_INT 10
22420: PUSH
22421: LD_INT 11
22423: PUSH
22424: LD_INT 12
22426: PUSH
22427: LD_INT 13
22429: PUSH
22430: LD_INT 14
22432: PUSH
22433: LD_INT 15
22435: PUSH
22436: LD_INT 16
22438: PUSH
22439: LD_INT 17
22441: PUSH
22442: LD_INT 18
22444: PUSH
22445: LD_INT 19
22447: PUSH
22448: LD_INT 20
22450: PUSH
22451: LD_INT 21
22453: PUSH
22454: LD_INT 22
22456: PUSH
22457: LD_INT 23
22459: PUSH
22460: LD_INT 24
22462: PUSH
22463: LD_INT 25
22465: PUSH
22466: LD_INT 26
22468: PUSH
22469: LD_INT 27
22471: PUSH
22472: LD_INT 28
22474: PUSH
22475: LD_INT 30
22477: PUSH
22478: LD_INT 31
22480: PUSH
22481: LD_INT 32
22483: PUSH
22484: LD_INT 33
22486: PUSH
22487: LD_INT 34
22489: PUSH
22490: LD_INT 36
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 101
22531: PUSH
22532: LD_INT 102
22534: PUSH
22535: LD_INT 103
22537: PUSH
22538: LD_INT 104
22540: PUSH
22541: LD_INT 105
22543: PUSH
22544: LD_INT 106
22546: PUSH
22547: LD_INT 107
22549: PUSH
22550: LD_INT 108
22552: PUSH
22553: LD_INT 109
22555: PUSH
22556: LD_INT 110
22558: PUSH
22559: LD_INT 111
22561: PUSH
22562: LD_INT 112
22564: PUSH
22565: LD_INT 113
22567: PUSH
22568: LD_INT 114
22570: PUSH
22571: LD_INT 116
22573: PUSH
22574: LD_INT 117
22576: PUSH
22577: LD_INT 118
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: ST_TO_ADDR
22603: GO 24058
22605: LD_INT 13
22607: DOUBLE
22608: EQUAL
22609: IFTRUE 22613
22611: GO 22821
22613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22614: LD_ADDR_VAR 0 2
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: LD_INT 3
22627: PUSH
22628: LD_INT 4
22630: PUSH
22631: LD_INT 5
22633: PUSH
22634: LD_INT 8
22636: PUSH
22637: LD_INT 9
22639: PUSH
22640: LD_INT 10
22642: PUSH
22643: LD_INT 11
22645: PUSH
22646: LD_INT 12
22648: PUSH
22649: LD_INT 14
22651: PUSH
22652: LD_INT 15
22654: PUSH
22655: LD_INT 16
22657: PUSH
22658: LD_INT 17
22660: PUSH
22661: LD_INT 18
22663: PUSH
22664: LD_INT 19
22666: PUSH
22667: LD_INT 20
22669: PUSH
22670: LD_INT 21
22672: PUSH
22673: LD_INT 22
22675: PUSH
22676: LD_INT 23
22678: PUSH
22679: LD_INT 24
22681: PUSH
22682: LD_INT 25
22684: PUSH
22685: LD_INT 26
22687: PUSH
22688: LD_INT 27
22690: PUSH
22691: LD_INT 28
22693: PUSH
22694: LD_INT 30
22696: PUSH
22697: LD_INT 31
22699: PUSH
22700: LD_INT 32
22702: PUSH
22703: LD_INT 33
22705: PUSH
22706: LD_INT 34
22708: PUSH
22709: LD_INT 36
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 101
22747: PUSH
22748: LD_INT 102
22750: PUSH
22751: LD_INT 103
22753: PUSH
22754: LD_INT 104
22756: PUSH
22757: LD_INT 105
22759: PUSH
22760: LD_INT 106
22762: PUSH
22763: LD_INT 107
22765: PUSH
22766: LD_INT 108
22768: PUSH
22769: LD_INT 109
22771: PUSH
22772: LD_INT 110
22774: PUSH
22775: LD_INT 111
22777: PUSH
22778: LD_INT 112
22780: PUSH
22781: LD_INT 113
22783: PUSH
22784: LD_INT 114
22786: PUSH
22787: LD_INT 116
22789: PUSH
22790: LD_INT 117
22792: PUSH
22793: LD_INT 118
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: ST_TO_ADDR
22819: GO 24058
22821: LD_INT 14
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 23053
22829: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22830: LD_ADDR_VAR 0 2
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: LD_INT 3
22843: PUSH
22844: LD_INT 4
22846: PUSH
22847: LD_INT 5
22849: PUSH
22850: LD_INT 6
22852: PUSH
22853: LD_INT 7
22855: PUSH
22856: LD_INT 8
22858: PUSH
22859: LD_INT 9
22861: PUSH
22862: LD_INT 10
22864: PUSH
22865: LD_INT 11
22867: PUSH
22868: LD_INT 12
22870: PUSH
22871: LD_INT 13
22873: PUSH
22874: LD_INT 14
22876: PUSH
22877: LD_INT 15
22879: PUSH
22880: LD_INT 16
22882: PUSH
22883: LD_INT 17
22885: PUSH
22886: LD_INT 18
22888: PUSH
22889: LD_INT 19
22891: PUSH
22892: LD_INT 20
22894: PUSH
22895: LD_INT 21
22897: PUSH
22898: LD_INT 22
22900: PUSH
22901: LD_INT 23
22903: PUSH
22904: LD_INT 24
22906: PUSH
22907: LD_INT 25
22909: PUSH
22910: LD_INT 26
22912: PUSH
22913: LD_INT 27
22915: PUSH
22916: LD_INT 28
22918: PUSH
22919: LD_INT 29
22921: PUSH
22922: LD_INT 30
22924: PUSH
22925: LD_INT 31
22927: PUSH
22928: LD_INT 32
22930: PUSH
22931: LD_INT 33
22933: PUSH
22934: LD_INT 34
22936: PUSH
22937: LD_INT 36
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 101
22979: PUSH
22980: LD_INT 102
22982: PUSH
22983: LD_INT 103
22985: PUSH
22986: LD_INT 104
22988: PUSH
22989: LD_INT 105
22991: PUSH
22992: LD_INT 106
22994: PUSH
22995: LD_INT 107
22997: PUSH
22998: LD_INT 108
23000: PUSH
23001: LD_INT 109
23003: PUSH
23004: LD_INT 110
23006: PUSH
23007: LD_INT 111
23009: PUSH
23010: LD_INT 112
23012: PUSH
23013: LD_INT 113
23015: PUSH
23016: LD_INT 114
23018: PUSH
23019: LD_INT 116
23021: PUSH
23022: LD_INT 117
23024: PUSH
23025: LD_INT 118
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: ST_TO_ADDR
23051: GO 24058
23053: LD_INT 15
23055: DOUBLE
23056: EQUAL
23057: IFTRUE 23061
23059: GO 23285
23061: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23062: LD_ADDR_VAR 0 2
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: LD_INT 2
23072: PUSH
23073: LD_INT 3
23075: PUSH
23076: LD_INT 4
23078: PUSH
23079: LD_INT 5
23081: PUSH
23082: LD_INT 6
23084: PUSH
23085: LD_INT 7
23087: PUSH
23088: LD_INT 8
23090: PUSH
23091: LD_INT 9
23093: PUSH
23094: LD_INT 10
23096: PUSH
23097: LD_INT 11
23099: PUSH
23100: LD_INT 12
23102: PUSH
23103: LD_INT 13
23105: PUSH
23106: LD_INT 14
23108: PUSH
23109: LD_INT 15
23111: PUSH
23112: LD_INT 16
23114: PUSH
23115: LD_INT 17
23117: PUSH
23118: LD_INT 18
23120: PUSH
23121: LD_INT 19
23123: PUSH
23124: LD_INT 20
23126: PUSH
23127: LD_INT 21
23129: PUSH
23130: LD_INT 22
23132: PUSH
23133: LD_INT 23
23135: PUSH
23136: LD_INT 24
23138: PUSH
23139: LD_INT 25
23141: PUSH
23142: LD_INT 26
23144: PUSH
23145: LD_INT 27
23147: PUSH
23148: LD_INT 28
23150: PUSH
23151: LD_INT 29
23153: PUSH
23154: LD_INT 30
23156: PUSH
23157: LD_INT 31
23159: PUSH
23160: LD_INT 32
23162: PUSH
23163: LD_INT 33
23165: PUSH
23166: LD_INT 34
23168: PUSH
23169: LD_INT 36
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 101
23211: PUSH
23212: LD_INT 102
23214: PUSH
23215: LD_INT 103
23217: PUSH
23218: LD_INT 104
23220: PUSH
23221: LD_INT 105
23223: PUSH
23224: LD_INT 106
23226: PUSH
23227: LD_INT 107
23229: PUSH
23230: LD_INT 108
23232: PUSH
23233: LD_INT 109
23235: PUSH
23236: LD_INT 110
23238: PUSH
23239: LD_INT 111
23241: PUSH
23242: LD_INT 112
23244: PUSH
23245: LD_INT 113
23247: PUSH
23248: LD_INT 114
23250: PUSH
23251: LD_INT 116
23253: PUSH
23254: LD_INT 117
23256: PUSH
23257: LD_INT 118
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: ST_TO_ADDR
23283: GO 24058
23285: LD_INT 16
23287: DOUBLE
23288: EQUAL
23289: IFTRUE 23293
23291: GO 23429
23293: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23294: LD_ADDR_VAR 0 2
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: LD_INT 4
23304: PUSH
23305: LD_INT 5
23307: PUSH
23308: LD_INT 7
23310: PUSH
23311: LD_INT 11
23313: PUSH
23314: LD_INT 12
23316: PUSH
23317: LD_INT 15
23319: PUSH
23320: LD_INT 16
23322: PUSH
23323: LD_INT 20
23325: PUSH
23326: LD_INT 21
23328: PUSH
23329: LD_INT 22
23331: PUSH
23332: LD_INT 23
23334: PUSH
23335: LD_INT 25
23337: PUSH
23338: LD_INT 26
23340: PUSH
23341: LD_INT 30
23343: PUSH
23344: LD_INT 31
23346: PUSH
23347: LD_INT 32
23349: PUSH
23350: LD_INT 33
23352: PUSH
23353: LD_INT 34
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 101
23379: PUSH
23380: LD_INT 102
23382: PUSH
23383: LD_INT 103
23385: PUSH
23386: LD_INT 106
23388: PUSH
23389: LD_INT 108
23391: PUSH
23392: LD_INT 112
23394: PUSH
23395: LD_INT 113
23397: PUSH
23398: LD_INT 114
23400: PUSH
23401: LD_INT 116
23403: PUSH
23404: LD_INT 117
23406: PUSH
23407: LD_INT 118
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: ST_TO_ADDR
23427: GO 24058
23429: LD_INT 17
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23661
23437: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23438: LD_ADDR_VAR 0 2
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: LD_INT 3
23451: PUSH
23452: LD_INT 4
23454: PUSH
23455: LD_INT 5
23457: PUSH
23458: LD_INT 6
23460: PUSH
23461: LD_INT 7
23463: PUSH
23464: LD_INT 8
23466: PUSH
23467: LD_INT 9
23469: PUSH
23470: LD_INT 10
23472: PUSH
23473: LD_INT 11
23475: PUSH
23476: LD_INT 12
23478: PUSH
23479: LD_INT 13
23481: PUSH
23482: LD_INT 14
23484: PUSH
23485: LD_INT 15
23487: PUSH
23488: LD_INT 16
23490: PUSH
23491: LD_INT 17
23493: PUSH
23494: LD_INT 18
23496: PUSH
23497: LD_INT 19
23499: PUSH
23500: LD_INT 20
23502: PUSH
23503: LD_INT 21
23505: PUSH
23506: LD_INT 22
23508: PUSH
23509: LD_INT 23
23511: PUSH
23512: LD_INT 24
23514: PUSH
23515: LD_INT 25
23517: PUSH
23518: LD_INT 26
23520: PUSH
23521: LD_INT 27
23523: PUSH
23524: LD_INT 28
23526: PUSH
23527: LD_INT 29
23529: PUSH
23530: LD_INT 30
23532: PUSH
23533: LD_INT 31
23535: PUSH
23536: LD_INT 32
23538: PUSH
23539: LD_INT 33
23541: PUSH
23542: LD_INT 34
23544: PUSH
23545: LD_INT 36
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 101
23587: PUSH
23588: LD_INT 102
23590: PUSH
23591: LD_INT 103
23593: PUSH
23594: LD_INT 104
23596: PUSH
23597: LD_INT 105
23599: PUSH
23600: LD_INT 106
23602: PUSH
23603: LD_INT 107
23605: PUSH
23606: LD_INT 108
23608: PUSH
23609: LD_INT 109
23611: PUSH
23612: LD_INT 110
23614: PUSH
23615: LD_INT 111
23617: PUSH
23618: LD_INT 112
23620: PUSH
23621: LD_INT 113
23623: PUSH
23624: LD_INT 114
23626: PUSH
23627: LD_INT 116
23629: PUSH
23630: LD_INT 117
23632: PUSH
23633: LD_INT 118
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: ST_TO_ADDR
23659: GO 24058
23661: LD_INT 18
23663: DOUBLE
23664: EQUAL
23665: IFTRUE 23669
23667: GO 23817
23669: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23670: LD_ADDR_VAR 0 2
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: LD_INT 4
23680: PUSH
23681: LD_INT 5
23683: PUSH
23684: LD_INT 7
23686: PUSH
23687: LD_INT 11
23689: PUSH
23690: LD_INT 12
23692: PUSH
23693: LD_INT 15
23695: PUSH
23696: LD_INT 16
23698: PUSH
23699: LD_INT 20
23701: PUSH
23702: LD_INT 21
23704: PUSH
23705: LD_INT 22
23707: PUSH
23708: LD_INT 23
23710: PUSH
23711: LD_INT 25
23713: PUSH
23714: LD_INT 26
23716: PUSH
23717: LD_INT 30
23719: PUSH
23720: LD_INT 31
23722: PUSH
23723: LD_INT 32
23725: PUSH
23726: LD_INT 33
23728: PUSH
23729: LD_INT 34
23731: PUSH
23732: LD_INT 35
23734: PUSH
23735: LD_INT 36
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 101
23763: PUSH
23764: LD_INT 102
23766: PUSH
23767: LD_INT 103
23769: PUSH
23770: LD_INT 106
23772: PUSH
23773: LD_INT 108
23775: PUSH
23776: LD_INT 112
23778: PUSH
23779: LD_INT 113
23781: PUSH
23782: LD_INT 114
23784: PUSH
23785: LD_INT 115
23787: PUSH
23788: LD_INT 116
23790: PUSH
23791: LD_INT 117
23793: PUSH
23794: LD_INT 118
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: ST_TO_ADDR
23815: GO 24058
23817: LD_INT 19
23819: DOUBLE
23820: EQUAL
23821: IFTRUE 23825
23823: GO 24057
23825: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23826: LD_ADDR_VAR 0 2
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: LD_INT 2
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: LD_INT 4
23842: PUSH
23843: LD_INT 5
23845: PUSH
23846: LD_INT 6
23848: PUSH
23849: LD_INT 7
23851: PUSH
23852: LD_INT 8
23854: PUSH
23855: LD_INT 9
23857: PUSH
23858: LD_INT 10
23860: PUSH
23861: LD_INT 11
23863: PUSH
23864: LD_INT 12
23866: PUSH
23867: LD_INT 13
23869: PUSH
23870: LD_INT 14
23872: PUSH
23873: LD_INT 15
23875: PUSH
23876: LD_INT 16
23878: PUSH
23879: LD_INT 17
23881: PUSH
23882: LD_INT 18
23884: PUSH
23885: LD_INT 19
23887: PUSH
23888: LD_INT 20
23890: PUSH
23891: LD_INT 21
23893: PUSH
23894: LD_INT 22
23896: PUSH
23897: LD_INT 23
23899: PUSH
23900: LD_INT 24
23902: PUSH
23903: LD_INT 25
23905: PUSH
23906: LD_INT 26
23908: PUSH
23909: LD_INT 27
23911: PUSH
23912: LD_INT 28
23914: PUSH
23915: LD_INT 29
23917: PUSH
23918: LD_INT 30
23920: PUSH
23921: LD_INT 31
23923: PUSH
23924: LD_INT 32
23926: PUSH
23927: LD_INT 33
23929: PUSH
23930: LD_INT 34
23932: PUSH
23933: LD_INT 35
23935: PUSH
23936: LD_INT 36
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 101
23979: PUSH
23980: LD_INT 102
23982: PUSH
23983: LD_INT 103
23985: PUSH
23986: LD_INT 104
23988: PUSH
23989: LD_INT 105
23991: PUSH
23992: LD_INT 106
23994: PUSH
23995: LD_INT 107
23997: PUSH
23998: LD_INT 108
24000: PUSH
24001: LD_INT 109
24003: PUSH
24004: LD_INT 110
24006: PUSH
24007: LD_INT 111
24009: PUSH
24010: LD_INT 112
24012: PUSH
24013: LD_INT 113
24015: PUSH
24016: LD_INT 114
24018: PUSH
24019: LD_INT 115
24021: PUSH
24022: LD_INT 116
24024: PUSH
24025: LD_INT 117
24027: PUSH
24028: LD_INT 118
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: ST_TO_ADDR
24055: GO 24058
24057: POP
// end else
24058: GO 24289
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24060: LD_ADDR_VAR 0 2
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: LD_INT 3
24073: PUSH
24074: LD_INT 4
24076: PUSH
24077: LD_INT 5
24079: PUSH
24080: LD_INT 6
24082: PUSH
24083: LD_INT 7
24085: PUSH
24086: LD_INT 8
24088: PUSH
24089: LD_INT 9
24091: PUSH
24092: LD_INT 10
24094: PUSH
24095: LD_INT 11
24097: PUSH
24098: LD_INT 12
24100: PUSH
24101: LD_INT 13
24103: PUSH
24104: LD_INT 14
24106: PUSH
24107: LD_INT 15
24109: PUSH
24110: LD_INT 16
24112: PUSH
24113: LD_INT 17
24115: PUSH
24116: LD_INT 18
24118: PUSH
24119: LD_INT 19
24121: PUSH
24122: LD_INT 20
24124: PUSH
24125: LD_INT 21
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_INT 23
24133: PUSH
24134: LD_INT 24
24136: PUSH
24137: LD_INT 25
24139: PUSH
24140: LD_INT 26
24142: PUSH
24143: LD_INT 27
24145: PUSH
24146: LD_INT 28
24148: PUSH
24149: LD_INT 29
24151: PUSH
24152: LD_INT 30
24154: PUSH
24155: LD_INT 31
24157: PUSH
24158: LD_INT 32
24160: PUSH
24161: LD_INT 33
24163: PUSH
24164: LD_INT 34
24166: PUSH
24167: LD_INT 35
24169: PUSH
24170: LD_INT 36
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 101
24213: PUSH
24214: LD_INT 102
24216: PUSH
24217: LD_INT 103
24219: PUSH
24220: LD_INT 104
24222: PUSH
24223: LD_INT 105
24225: PUSH
24226: LD_INT 106
24228: PUSH
24229: LD_INT 107
24231: PUSH
24232: LD_INT 108
24234: PUSH
24235: LD_INT 109
24237: PUSH
24238: LD_INT 110
24240: PUSH
24241: LD_INT 111
24243: PUSH
24244: LD_INT 112
24246: PUSH
24247: LD_INT 113
24249: PUSH
24250: LD_INT 114
24252: PUSH
24253: LD_INT 115
24255: PUSH
24256: LD_INT 116
24258: PUSH
24259: LD_INT 117
24261: PUSH
24262: LD_INT 118
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: ST_TO_ADDR
// if result then
24289: LD_VAR 0 2
24293: IFFALSE 25079
// begin normal :=  ;
24295: LD_ADDR_VAR 0 5
24299: PUSH
24300: LD_STRING 
24302: ST_TO_ADDR
// hardcore :=  ;
24303: LD_ADDR_VAR 0 6
24307: PUSH
24308: LD_STRING 
24310: ST_TO_ADDR
// active :=  ;
24311: LD_ADDR_VAR 0 7
24315: PUSH
24316: LD_STRING 
24318: ST_TO_ADDR
// for i = 1 to normalCounter do
24319: LD_ADDR_VAR 0 8
24323: PUSH
24324: DOUBLE
24325: LD_INT 1
24327: DEC
24328: ST_TO_ADDR
24329: LD_EXP 63
24333: PUSH
24334: FOR_TO
24335: IFFALSE 24436
// begin tmp := 0 ;
24337: LD_ADDR_VAR 0 3
24341: PUSH
24342: LD_STRING 0
24344: ST_TO_ADDR
// if result [ 1 ] then
24345: LD_VAR 0 2
24349: PUSH
24350: LD_INT 1
24352: ARRAY
24353: IFFALSE 24418
// if result [ 1 ] [ 1 ] = i then
24355: LD_VAR 0 2
24359: PUSH
24360: LD_INT 1
24362: ARRAY
24363: PUSH
24364: LD_INT 1
24366: ARRAY
24367: PUSH
24368: LD_VAR 0 8
24372: EQUAL
24373: IFFALSE 24418
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24375: LD_ADDR_VAR 0 2
24379: PUSH
24380: LD_VAR 0 2
24384: PPUSH
24385: LD_INT 1
24387: PPUSH
24388: LD_VAR 0 2
24392: PUSH
24393: LD_INT 1
24395: ARRAY
24396: PPUSH
24397: LD_INT 1
24399: PPUSH
24400: CALL_OW 3
24404: PPUSH
24405: CALL_OW 1
24409: ST_TO_ADDR
// tmp := 1 ;
24410: LD_ADDR_VAR 0 3
24414: PUSH
24415: LD_STRING 1
24417: ST_TO_ADDR
// end ; normal := normal & tmp ;
24418: LD_ADDR_VAR 0 5
24422: PUSH
24423: LD_VAR 0 5
24427: PUSH
24428: LD_VAR 0 3
24432: STR
24433: ST_TO_ADDR
// end ;
24434: GO 24334
24436: POP
24437: POP
// for i = 1 to hardcoreCounter do
24438: LD_ADDR_VAR 0 8
24442: PUSH
24443: DOUBLE
24444: LD_INT 1
24446: DEC
24447: ST_TO_ADDR
24448: LD_EXP 64
24452: PUSH
24453: FOR_TO
24454: IFFALSE 24559
// begin tmp := 0 ;
24456: LD_ADDR_VAR 0 3
24460: PUSH
24461: LD_STRING 0
24463: ST_TO_ADDR
// if result [ 2 ] then
24464: LD_VAR 0 2
24468: PUSH
24469: LD_INT 2
24471: ARRAY
24472: IFFALSE 24541
// if result [ 2 ] [ 1 ] = 100 + i then
24474: LD_VAR 0 2
24478: PUSH
24479: LD_INT 2
24481: ARRAY
24482: PUSH
24483: LD_INT 1
24485: ARRAY
24486: PUSH
24487: LD_INT 100
24489: PUSH
24490: LD_VAR 0 8
24494: PLUS
24495: EQUAL
24496: IFFALSE 24541
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24498: LD_ADDR_VAR 0 2
24502: PUSH
24503: LD_VAR 0 2
24507: PPUSH
24508: LD_INT 2
24510: PPUSH
24511: LD_VAR 0 2
24515: PUSH
24516: LD_INT 2
24518: ARRAY
24519: PPUSH
24520: LD_INT 1
24522: PPUSH
24523: CALL_OW 3
24527: PPUSH
24528: CALL_OW 1
24532: ST_TO_ADDR
// tmp := 1 ;
24533: LD_ADDR_VAR 0 3
24537: PUSH
24538: LD_STRING 1
24540: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24541: LD_ADDR_VAR 0 6
24545: PUSH
24546: LD_VAR 0 6
24550: PUSH
24551: LD_VAR 0 3
24555: STR
24556: ST_TO_ADDR
// end ;
24557: GO 24453
24559: POP
24560: POP
// if isGameLoad then
24561: LD_VAR 0 1
24565: IFFALSE 25040
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24567: LD_ADDR_VAR 0 4
24571: PUSH
24572: LD_EXP 67
24576: PUSH
24577: LD_EXP 66
24581: PUSH
24582: LD_EXP 68
24586: PUSH
24587: LD_EXP 65
24591: PUSH
24592: LD_EXP 69
24596: PUSH
24597: LD_EXP 70
24601: PUSH
24602: LD_EXP 71
24606: PUSH
24607: LD_EXP 72
24611: PUSH
24612: LD_EXP 73
24616: PUSH
24617: LD_EXP 74
24621: PUSH
24622: LD_EXP 75
24626: PUSH
24627: LD_EXP 76
24631: PUSH
24632: LD_EXP 77
24636: PUSH
24637: LD_EXP 78
24641: PUSH
24642: LD_EXP 86
24646: PUSH
24647: LD_EXP 87
24651: PUSH
24652: LD_EXP 88
24656: PUSH
24657: LD_EXP 89
24661: PUSH
24662: LD_EXP 91
24666: PUSH
24667: LD_EXP 92
24671: PUSH
24672: LD_EXP 93
24676: PUSH
24677: LD_EXP 96
24681: PUSH
24682: LD_EXP 98
24686: PUSH
24687: LD_EXP 99
24691: PUSH
24692: LD_EXP 100
24696: PUSH
24697: LD_EXP 102
24701: PUSH
24702: LD_EXP 103
24706: PUSH
24707: LD_EXP 106
24711: PUSH
24712: LD_EXP 107
24716: PUSH
24717: LD_EXP 108
24721: PUSH
24722: LD_EXP 109
24726: PUSH
24727: LD_EXP 110
24731: PUSH
24732: LD_EXP 111
24736: PUSH
24737: LD_EXP 112
24741: PUSH
24742: LD_EXP 113
24746: PUSH
24747: LD_EXP 114
24751: PUSH
24752: LD_EXP 79
24756: PUSH
24757: LD_EXP 80
24761: PUSH
24762: LD_EXP 83
24766: PUSH
24767: LD_EXP 84
24771: PUSH
24772: LD_EXP 85
24776: PUSH
24777: LD_EXP 81
24781: PUSH
24782: LD_EXP 82
24786: PUSH
24787: LD_EXP 90
24791: PUSH
24792: LD_EXP 94
24796: PUSH
24797: LD_EXP 95
24801: PUSH
24802: LD_EXP 97
24806: PUSH
24807: LD_EXP 101
24811: PUSH
24812: LD_EXP 104
24816: PUSH
24817: LD_EXP 105
24821: PUSH
24822: LD_EXP 115
24826: PUSH
24827: LD_EXP 116
24831: PUSH
24832: LD_EXP 117
24836: PUSH
24837: LD_EXP 118
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: ST_TO_ADDR
// tmp :=  ;
24898: LD_ADDR_VAR 0 3
24902: PUSH
24903: LD_STRING 
24905: ST_TO_ADDR
// for i = 1 to normalCounter do
24906: LD_ADDR_VAR 0 8
24910: PUSH
24911: DOUBLE
24912: LD_INT 1
24914: DEC
24915: ST_TO_ADDR
24916: LD_EXP 63
24920: PUSH
24921: FOR_TO
24922: IFFALSE 24958
// begin if flags [ i ] then
24924: LD_VAR 0 4
24928: PUSH
24929: LD_VAR 0 8
24933: ARRAY
24934: IFFALSE 24956
// tmp := tmp & i & ; ;
24936: LD_ADDR_VAR 0 3
24940: PUSH
24941: LD_VAR 0 3
24945: PUSH
24946: LD_VAR 0 8
24950: STR
24951: PUSH
24952: LD_STRING ;
24954: STR
24955: ST_TO_ADDR
// end ;
24956: GO 24921
24958: POP
24959: POP
// for i = 1 to hardcoreCounter do
24960: LD_ADDR_VAR 0 8
24964: PUSH
24965: DOUBLE
24966: LD_INT 1
24968: DEC
24969: ST_TO_ADDR
24970: LD_EXP 64
24974: PUSH
24975: FOR_TO
24976: IFFALSE 25022
// begin if flags [ normalCounter + i ] then
24978: LD_VAR 0 4
24982: PUSH
24983: LD_EXP 63
24987: PUSH
24988: LD_VAR 0 8
24992: PLUS
24993: ARRAY
24994: IFFALSE 25020
// tmp := tmp & ( 100 + i ) & ; ;
24996: LD_ADDR_VAR 0 3
25000: PUSH
25001: LD_VAR 0 3
25005: PUSH
25006: LD_INT 100
25008: PUSH
25009: LD_VAR 0 8
25013: PLUS
25014: STR
25015: PUSH
25016: LD_STRING ;
25018: STR
25019: ST_TO_ADDR
// end ;
25020: GO 24975
25022: POP
25023: POP
// if tmp then
25024: LD_VAR 0 3
25028: IFFALSE 25040
// active := tmp ;
25030: LD_ADDR_VAR 0 7
25034: PUSH
25035: LD_VAR 0 3
25039: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25040: LD_STRING getStreamItemsFromMission("
25042: PUSH
25043: LD_VAR 0 5
25047: STR
25048: PUSH
25049: LD_STRING ","
25051: STR
25052: PUSH
25053: LD_VAR 0 6
25057: STR
25058: PUSH
25059: LD_STRING ","
25061: STR
25062: PUSH
25063: LD_VAR 0 7
25067: STR
25068: PUSH
25069: LD_STRING ")
25071: STR
25072: PPUSH
25073: CALL_OW 559
// end else
25077: GO 25086
// ToLua ( getStreamItemsFromMission("","","") ) ;
25079: LD_STRING getStreamItemsFromMission("","","")
25081: PPUSH
25082: CALL_OW 559
// end ;
25086: LD_VAR 0 2
25090: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25091: LD_EXP 62
25095: PUSH
25096: LD_EXP 67
25100: AND
25101: IFFALSE 25225
25103: GO 25105
25105: DISABLE
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
// begin enable ;
25110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25111: LD_ADDR_VAR 0 2
25115: PUSH
25116: LD_INT 22
25118: PUSH
25119: LD_OWVAR 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 34
25133: PUSH
25134: LD_INT 7
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 34
25143: PUSH
25144: LD_INT 45
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 34
25153: PUSH
25154: LD_INT 28
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 34
25163: PUSH
25164: LD_INT 47
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PPUSH
25182: CALL_OW 69
25186: ST_TO_ADDR
// if not tmp then
25187: LD_VAR 0 2
25191: NOT
25192: IFFALSE 25196
// exit ;
25194: GO 25225
// for i in tmp do
25196: LD_ADDR_VAR 0 1
25200: PUSH
25201: LD_VAR 0 2
25205: PUSH
25206: FOR_IN
25207: IFFALSE 25223
// begin SetLives ( i , 0 ) ;
25209: LD_VAR 0 1
25213: PPUSH
25214: LD_INT 0
25216: PPUSH
25217: CALL_OW 234
// end ;
25221: GO 25206
25223: POP
25224: POP
// end ;
25225: PPOPN 2
25227: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25228: LD_EXP 62
25232: PUSH
25233: LD_EXP 68
25237: AND
25238: IFFALSE 25322
25240: GO 25242
25242: DISABLE
25243: LD_INT 0
25245: PPUSH
25246: PPUSH
// begin enable ;
25247: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25248: LD_ADDR_VAR 0 2
25252: PUSH
25253: LD_INT 22
25255: PUSH
25256: LD_OWVAR 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 32
25267: PUSH
25268: LD_INT 3
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PPUSH
25279: CALL_OW 69
25283: ST_TO_ADDR
// if not tmp then
25284: LD_VAR 0 2
25288: NOT
25289: IFFALSE 25293
// exit ;
25291: GO 25322
// for i in tmp do
25293: LD_ADDR_VAR 0 1
25297: PUSH
25298: LD_VAR 0 2
25302: PUSH
25303: FOR_IN
25304: IFFALSE 25320
// begin SetLives ( i , 0 ) ;
25306: LD_VAR 0 1
25310: PPUSH
25311: LD_INT 0
25313: PPUSH
25314: CALL_OW 234
// end ;
25318: GO 25303
25320: POP
25321: POP
// end ;
25322: PPOPN 2
25324: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25325: LD_EXP 62
25329: PUSH
25330: LD_EXP 65
25334: AND
25335: IFFALSE 25428
25337: GO 25339
25339: DISABLE
25340: LD_INT 0
25342: PPUSH
// begin enable ;
25343: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25344: LD_ADDR_VAR 0 1
25348: PUSH
25349: LD_INT 22
25351: PUSH
25352: LD_OWVAR 2
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: LD_INT 25
25366: PUSH
25367: LD_INT 5
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 25
25376: PUSH
25377: LD_INT 9
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 25
25386: PUSH
25387: LD_INT 8
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PPUSH
25404: CALL_OW 69
25408: PUSH
25409: FOR_IN
25410: IFFALSE 25426
// begin SetClass ( i , 1 ) ;
25412: LD_VAR 0 1
25416: PPUSH
25417: LD_INT 1
25419: PPUSH
25420: CALL_OW 336
// end ;
25424: GO 25409
25426: POP
25427: POP
// end ;
25428: PPOPN 1
25430: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25431: LD_EXP 62
25435: PUSH
25436: LD_EXP 66
25440: AND
25441: PUSH
25442: LD_OWVAR 65
25446: PUSH
25447: LD_INT 7
25449: LESS
25450: AND
25451: IFFALSE 25465
25453: GO 25455
25455: DISABLE
// begin enable ;
25456: ENABLE
// game_speed := 7 ;
25457: LD_ADDR_OWVAR 65
25461: PUSH
25462: LD_INT 7
25464: ST_TO_ADDR
// end ;
25465: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25466: LD_EXP 62
25470: PUSH
25471: LD_EXP 69
25475: AND
25476: IFFALSE 25678
25478: GO 25480
25480: DISABLE
25481: LD_INT 0
25483: PPUSH
25484: PPUSH
25485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: LD_INT 81
25493: PUSH
25494: LD_OWVAR 2
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 21
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PPUSH
25517: CALL_OW 69
25521: ST_TO_ADDR
// if not tmp then
25522: LD_VAR 0 3
25526: NOT
25527: IFFALSE 25531
// exit ;
25529: GO 25678
// if tmp > 5 then
25531: LD_VAR 0 3
25535: PUSH
25536: LD_INT 5
25538: GREATER
25539: IFFALSE 25551
// k := 5 else
25541: LD_ADDR_VAR 0 2
25545: PUSH
25546: LD_INT 5
25548: ST_TO_ADDR
25549: GO 25561
// k := tmp ;
25551: LD_ADDR_VAR 0 2
25555: PUSH
25556: LD_VAR 0 3
25560: ST_TO_ADDR
// for i := 1 to k do
25561: LD_ADDR_VAR 0 1
25565: PUSH
25566: DOUBLE
25567: LD_INT 1
25569: DEC
25570: ST_TO_ADDR
25571: LD_VAR 0 2
25575: PUSH
25576: FOR_TO
25577: IFFALSE 25676
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25579: LD_VAR 0 3
25583: PUSH
25584: LD_VAR 0 1
25588: ARRAY
25589: PPUSH
25590: LD_VAR 0 1
25594: PUSH
25595: LD_INT 4
25597: MOD
25598: PUSH
25599: LD_INT 1
25601: PLUS
25602: PPUSH
25603: CALL_OW 259
25607: PUSH
25608: LD_INT 10
25610: LESS
25611: IFFALSE 25674
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25613: LD_VAR 0 3
25617: PUSH
25618: LD_VAR 0 1
25622: ARRAY
25623: PPUSH
25624: LD_VAR 0 1
25628: PUSH
25629: LD_INT 4
25631: MOD
25632: PUSH
25633: LD_INT 1
25635: PLUS
25636: PPUSH
25637: LD_VAR 0 3
25641: PUSH
25642: LD_VAR 0 1
25646: ARRAY
25647: PPUSH
25648: LD_VAR 0 1
25652: PUSH
25653: LD_INT 4
25655: MOD
25656: PUSH
25657: LD_INT 1
25659: PLUS
25660: PPUSH
25661: CALL_OW 259
25665: PUSH
25666: LD_INT 1
25668: PLUS
25669: PPUSH
25670: CALL_OW 237
25674: GO 25576
25676: POP
25677: POP
// end ;
25678: PPOPN 3
25680: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25681: LD_EXP 62
25685: PUSH
25686: LD_EXP 70
25690: AND
25691: IFFALSE 25711
25693: GO 25695
25695: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25696: LD_INT 4
25698: PPUSH
25699: LD_OWVAR 2
25703: PPUSH
25704: LD_INT 0
25706: PPUSH
25707: CALL_OW 324
25711: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25712: LD_EXP 62
25716: PUSH
25717: LD_EXP 99
25721: AND
25722: IFFALSE 25742
25724: GO 25726
25726: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25727: LD_INT 19
25729: PPUSH
25730: LD_OWVAR 2
25734: PPUSH
25735: LD_INT 0
25737: PPUSH
25738: CALL_OW 324
25742: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25743: LD_EXP 62
25747: PUSH
25748: LD_EXP 71
25752: AND
25753: IFFALSE 25855
25755: GO 25757
25757: DISABLE
25758: LD_INT 0
25760: PPUSH
25761: PPUSH
// begin enable ;
25762: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25763: LD_ADDR_VAR 0 2
25767: PUSH
25768: LD_INT 22
25770: PUSH
25771: LD_OWVAR 2
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: LD_INT 34
25785: PUSH
25786: LD_INT 11
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 34
25795: PUSH
25796: LD_INT 30
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: LIST
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PPUSH
25812: CALL_OW 69
25816: ST_TO_ADDR
// if not tmp then
25817: LD_VAR 0 2
25821: NOT
25822: IFFALSE 25826
// exit ;
25824: GO 25855
// for i in tmp do
25826: LD_ADDR_VAR 0 1
25830: PUSH
25831: LD_VAR 0 2
25835: PUSH
25836: FOR_IN
25837: IFFALSE 25853
// begin SetLives ( i , 0 ) ;
25839: LD_VAR 0 1
25843: PPUSH
25844: LD_INT 0
25846: PPUSH
25847: CALL_OW 234
// end ;
25851: GO 25836
25853: POP
25854: POP
// end ;
25855: PPOPN 2
25857: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25858: LD_EXP 62
25862: PUSH
25863: LD_EXP 72
25867: AND
25868: IFFALSE 25888
25870: GO 25872
25872: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25873: LD_INT 32
25875: PPUSH
25876: LD_OWVAR 2
25880: PPUSH
25881: LD_INT 0
25883: PPUSH
25884: CALL_OW 324
25888: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25889: LD_EXP 62
25893: PUSH
25894: LD_EXP 73
25898: AND
25899: IFFALSE 26080
25901: GO 25903
25903: DISABLE
25904: LD_INT 0
25906: PPUSH
25907: PPUSH
25908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25909: LD_ADDR_VAR 0 2
25913: PUSH
25914: LD_INT 22
25916: PUSH
25917: LD_OWVAR 2
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 33
25928: PUSH
25929: LD_INT 3
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PPUSH
25940: CALL_OW 69
25944: ST_TO_ADDR
// if not tmp then
25945: LD_VAR 0 2
25949: NOT
25950: IFFALSE 25954
// exit ;
25952: GO 26080
// side := 0 ;
25954: LD_ADDR_VAR 0 3
25958: PUSH
25959: LD_INT 0
25961: ST_TO_ADDR
// for i := 1 to 8 do
25962: LD_ADDR_VAR 0 1
25966: PUSH
25967: DOUBLE
25968: LD_INT 1
25970: DEC
25971: ST_TO_ADDR
25972: LD_INT 8
25974: PUSH
25975: FOR_TO
25976: IFFALSE 26024
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25978: LD_OWVAR 2
25982: PUSH
25983: LD_VAR 0 1
25987: NONEQUAL
25988: PUSH
25989: LD_OWVAR 2
25993: PPUSH
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL_OW 81
26003: PUSH
26004: LD_INT 2
26006: EQUAL
26007: AND
26008: IFFALSE 26022
// begin side := i ;
26010: LD_ADDR_VAR 0 3
26014: PUSH
26015: LD_VAR 0 1
26019: ST_TO_ADDR
// break ;
26020: GO 26024
// end ;
26022: GO 25975
26024: POP
26025: POP
// if not side then
26026: LD_VAR 0 3
26030: NOT
26031: IFFALSE 26035
// exit ;
26033: GO 26080
// for i := 1 to tmp do
26035: LD_ADDR_VAR 0 1
26039: PUSH
26040: DOUBLE
26041: LD_INT 1
26043: DEC
26044: ST_TO_ADDR
26045: LD_VAR 0 2
26049: PUSH
26050: FOR_TO
26051: IFFALSE 26078
// if Prob ( 60 ) then
26053: LD_INT 60
26055: PPUSH
26056: CALL_OW 13
26060: IFFALSE 26076
// SetSide ( i , side ) ;
26062: LD_VAR 0 1
26066: PPUSH
26067: LD_VAR 0 3
26071: PPUSH
26072: CALL_OW 235
26076: GO 26050
26078: POP
26079: POP
// end ;
26080: PPOPN 3
26082: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26083: LD_EXP 62
26087: PUSH
26088: LD_EXP 75
26092: AND
26093: IFFALSE 26212
26095: GO 26097
26097: DISABLE
26098: LD_INT 0
26100: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26101: LD_ADDR_VAR 0 1
26105: PUSH
26106: LD_INT 22
26108: PUSH
26109: LD_OWVAR 2
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 21
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 3
26130: PUSH
26131: LD_INT 23
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: PPUSH
26150: CALL_OW 69
26154: PUSH
26155: FOR_IN
26156: IFFALSE 26210
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26158: LD_VAR 0 1
26162: PPUSH
26163: CALL_OW 257
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: LD_INT 3
26176: PUSH
26177: LD_INT 4
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: IN
26186: IFFALSE 26208
// SetClass ( un , rand ( 1 , 4 ) ) ;
26188: LD_VAR 0 1
26192: PPUSH
26193: LD_INT 1
26195: PPUSH
26196: LD_INT 4
26198: PPUSH
26199: CALL_OW 12
26203: PPUSH
26204: CALL_OW 336
26208: GO 26155
26210: POP
26211: POP
// end ;
26212: PPOPN 1
26214: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26215: LD_EXP 62
26219: PUSH
26220: LD_EXP 74
26224: AND
26225: IFFALSE 26304
26227: GO 26229
26229: DISABLE
26230: LD_INT 0
26232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26233: LD_ADDR_VAR 0 1
26237: PUSH
26238: LD_INT 22
26240: PUSH
26241: LD_OWVAR 2
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 21
26252: PUSH
26253: LD_INT 3
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PPUSH
26264: CALL_OW 69
26268: ST_TO_ADDR
// if not tmp then
26269: LD_VAR 0 1
26273: NOT
26274: IFFALSE 26278
// exit ;
26276: GO 26304
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26278: LD_VAR 0 1
26282: PUSH
26283: LD_INT 1
26285: PPUSH
26286: LD_VAR 0 1
26290: PPUSH
26291: CALL_OW 12
26295: ARRAY
26296: PPUSH
26297: LD_INT 100
26299: PPUSH
26300: CALL_OW 234
// end ;
26304: PPOPN 1
26306: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26307: LD_EXP 62
26311: PUSH
26312: LD_EXP 76
26316: AND
26317: IFFALSE 26415
26319: GO 26321
26321: DISABLE
26322: LD_INT 0
26324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26325: LD_ADDR_VAR 0 1
26329: PUSH
26330: LD_INT 22
26332: PUSH
26333: LD_OWVAR 2
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 21
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PPUSH
26356: CALL_OW 69
26360: ST_TO_ADDR
// if not tmp then
26361: LD_VAR 0 1
26365: NOT
26366: IFFALSE 26370
// exit ;
26368: GO 26415
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26370: LD_VAR 0 1
26374: PUSH
26375: LD_INT 1
26377: PPUSH
26378: LD_VAR 0 1
26382: PPUSH
26383: CALL_OW 12
26387: ARRAY
26388: PPUSH
26389: LD_INT 1
26391: PPUSH
26392: LD_INT 4
26394: PPUSH
26395: CALL_OW 12
26399: PPUSH
26400: LD_INT 3000
26402: PPUSH
26403: LD_INT 9000
26405: PPUSH
26406: CALL_OW 12
26410: PPUSH
26411: CALL_OW 492
// end ;
26415: PPOPN 1
26417: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26418: LD_EXP 62
26422: PUSH
26423: LD_EXP 77
26427: AND
26428: IFFALSE 26448
26430: GO 26432
26432: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26433: LD_INT 1
26435: PPUSH
26436: LD_OWVAR 2
26440: PPUSH
26441: LD_INT 0
26443: PPUSH
26444: CALL_OW 324
26448: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26449: LD_EXP 62
26453: PUSH
26454: LD_EXP 78
26458: AND
26459: IFFALSE 26542
26461: GO 26463
26463: DISABLE
26464: LD_INT 0
26466: PPUSH
26467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26468: LD_ADDR_VAR 0 2
26472: PUSH
26473: LD_INT 22
26475: PUSH
26476: LD_OWVAR 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 21
26487: PUSH
26488: LD_INT 3
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PPUSH
26499: CALL_OW 69
26503: ST_TO_ADDR
// if not tmp then
26504: LD_VAR 0 2
26508: NOT
26509: IFFALSE 26513
// exit ;
26511: GO 26542
// for i in tmp do
26513: LD_ADDR_VAR 0 1
26517: PUSH
26518: LD_VAR 0 2
26522: PUSH
26523: FOR_IN
26524: IFFALSE 26540
// SetBLevel ( i , 10 ) ;
26526: LD_VAR 0 1
26530: PPUSH
26531: LD_INT 10
26533: PPUSH
26534: CALL_OW 241
26538: GO 26523
26540: POP
26541: POP
// end ;
26542: PPOPN 2
26544: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26545: LD_EXP 62
26549: PUSH
26550: LD_EXP 79
26554: AND
26555: IFFALSE 26666
26557: GO 26559
26559: DISABLE
26560: LD_INT 0
26562: PPUSH
26563: PPUSH
26564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26565: LD_ADDR_VAR 0 3
26569: PUSH
26570: LD_INT 22
26572: PUSH
26573: LD_OWVAR 2
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 25
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PPUSH
26596: CALL_OW 69
26600: ST_TO_ADDR
// if not tmp then
26601: LD_VAR 0 3
26605: NOT
26606: IFFALSE 26610
// exit ;
26608: GO 26666
// un := tmp [ rand ( 1 , tmp ) ] ;
26610: LD_ADDR_VAR 0 2
26614: PUSH
26615: LD_VAR 0 3
26619: PUSH
26620: LD_INT 1
26622: PPUSH
26623: LD_VAR 0 3
26627: PPUSH
26628: CALL_OW 12
26632: ARRAY
26633: ST_TO_ADDR
// if Crawls ( un ) then
26634: LD_VAR 0 2
26638: PPUSH
26639: CALL_OW 318
26643: IFFALSE 26654
// ComWalk ( un ) ;
26645: LD_VAR 0 2
26649: PPUSH
26650: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26654: LD_VAR 0 2
26658: PPUSH
26659: LD_INT 5
26661: PPUSH
26662: CALL_OW 336
// end ;
26666: PPOPN 3
26668: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26669: LD_EXP 62
26673: PUSH
26674: LD_EXP 80
26678: AND
26679: PUSH
26680: LD_OWVAR 67
26684: PUSH
26685: LD_INT 4
26687: LESS
26688: AND
26689: IFFALSE 26708
26691: GO 26693
26693: DISABLE
// begin Difficulty := Difficulty + 1 ;
26694: LD_ADDR_OWVAR 67
26698: PUSH
26699: LD_OWVAR 67
26703: PUSH
26704: LD_INT 1
26706: PLUS
26707: ST_TO_ADDR
// end ;
26708: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26709: LD_EXP 62
26713: PUSH
26714: LD_EXP 81
26718: AND
26719: IFFALSE 26822
26721: GO 26723
26723: DISABLE
26724: LD_INT 0
26726: PPUSH
// begin for i := 1 to 5 do
26727: LD_ADDR_VAR 0 1
26731: PUSH
26732: DOUBLE
26733: LD_INT 1
26735: DEC
26736: ST_TO_ADDR
26737: LD_INT 5
26739: PUSH
26740: FOR_TO
26741: IFFALSE 26820
// begin uc_nation := nation_nature ;
26743: LD_ADDR_OWVAR 21
26747: PUSH
26748: LD_INT 0
26750: ST_TO_ADDR
// uc_side := 0 ;
26751: LD_ADDR_OWVAR 20
26755: PUSH
26756: LD_INT 0
26758: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26759: LD_ADDR_OWVAR 29
26763: PUSH
26764: LD_INT 12
26766: PUSH
26767: LD_INT 12
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: ST_TO_ADDR
// hc_agressivity := 20 ;
26774: LD_ADDR_OWVAR 35
26778: PUSH
26779: LD_INT 20
26781: ST_TO_ADDR
// hc_class := class_tiger ;
26782: LD_ADDR_OWVAR 28
26786: PUSH
26787: LD_INT 14
26789: ST_TO_ADDR
// hc_gallery :=  ;
26790: LD_ADDR_OWVAR 33
26794: PUSH
26795: LD_STRING 
26797: ST_TO_ADDR
// hc_name :=  ;
26798: LD_ADDR_OWVAR 26
26802: PUSH
26803: LD_STRING 
26805: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26806: CALL_OW 44
26810: PPUSH
26811: LD_INT 0
26813: PPUSH
26814: CALL_OW 51
// end ;
26818: GO 26740
26820: POP
26821: POP
// end ;
26822: PPOPN 1
26824: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26825: LD_EXP 62
26829: PUSH
26830: LD_EXP 82
26834: AND
26835: IFFALSE 26844
26837: GO 26839
26839: DISABLE
// StreamSibBomb ;
26840: CALL 26845 0 0
26844: END
// export function StreamSibBomb ; var i , x , y ; begin
26845: LD_INT 0
26847: PPUSH
26848: PPUSH
26849: PPUSH
26850: PPUSH
// result := false ;
26851: LD_ADDR_VAR 0 1
26855: PUSH
26856: LD_INT 0
26858: ST_TO_ADDR
// for i := 1 to 16 do
26859: LD_ADDR_VAR 0 2
26863: PUSH
26864: DOUBLE
26865: LD_INT 1
26867: DEC
26868: ST_TO_ADDR
26869: LD_INT 16
26871: PUSH
26872: FOR_TO
26873: IFFALSE 27072
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26875: LD_ADDR_VAR 0 3
26879: PUSH
26880: LD_INT 10
26882: PUSH
26883: LD_INT 20
26885: PUSH
26886: LD_INT 30
26888: PUSH
26889: LD_INT 40
26891: PUSH
26892: LD_INT 50
26894: PUSH
26895: LD_INT 60
26897: PUSH
26898: LD_INT 70
26900: PUSH
26901: LD_INT 80
26903: PUSH
26904: LD_INT 90
26906: PUSH
26907: LD_INT 100
26909: PUSH
26910: LD_INT 110
26912: PUSH
26913: LD_INT 120
26915: PUSH
26916: LD_INT 130
26918: PUSH
26919: LD_INT 140
26921: PUSH
26922: LD_INT 150
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: PPUSH
26945: LD_INT 15
26947: PPUSH
26948: CALL_OW 12
26952: ARRAY
26953: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26954: LD_ADDR_VAR 0 4
26958: PUSH
26959: LD_INT 10
26961: PUSH
26962: LD_INT 20
26964: PUSH
26965: LD_INT 30
26967: PUSH
26968: LD_INT 40
26970: PUSH
26971: LD_INT 50
26973: PUSH
26974: LD_INT 60
26976: PUSH
26977: LD_INT 70
26979: PUSH
26980: LD_INT 80
26982: PUSH
26983: LD_INT 90
26985: PUSH
26986: LD_INT 100
26988: PUSH
26989: LD_INT 110
26991: PUSH
26992: LD_INT 120
26994: PUSH
26995: LD_INT 130
26997: PUSH
26998: LD_INT 140
27000: PUSH
27001: LD_INT 150
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: PPUSH
27024: LD_INT 15
27026: PPUSH
27027: CALL_OW 12
27031: ARRAY
27032: ST_TO_ADDR
// if ValidHex ( x , y ) then
27033: LD_VAR 0 3
27037: PPUSH
27038: LD_VAR 0 4
27042: PPUSH
27043: CALL_OW 488
27047: IFFALSE 27070
// begin result := [ x , y ] ;
27049: LD_ADDR_VAR 0 1
27053: PUSH
27054: LD_VAR 0 3
27058: PUSH
27059: LD_VAR 0 4
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: ST_TO_ADDR
// break ;
27068: GO 27072
// end ; end ;
27070: GO 26872
27072: POP
27073: POP
// if result then
27074: LD_VAR 0 1
27078: IFFALSE 27138
// begin ToLua ( playSibBomb() ) ;
27080: LD_STRING playSibBomb()
27082: PPUSH
27083: CALL_OW 559
// wait ( 0 0$14 ) ;
27087: LD_INT 490
27089: PPUSH
27090: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27094: LD_VAR 0 1
27098: PUSH
27099: LD_INT 1
27101: ARRAY
27102: PPUSH
27103: LD_VAR 0 1
27107: PUSH
27108: LD_INT 2
27110: ARRAY
27111: PPUSH
27112: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27116: LD_VAR 0 1
27120: PUSH
27121: LD_INT 1
27123: ARRAY
27124: PPUSH
27125: LD_VAR 0 1
27129: PUSH
27130: LD_INT 2
27132: ARRAY
27133: PPUSH
27134: CALL_OW 429
// end ; end ;
27138: LD_VAR 0 1
27142: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27143: LD_EXP 62
27147: PUSH
27148: LD_EXP 84
27152: AND
27153: IFFALSE 27165
27155: GO 27157
27157: DISABLE
// YouLost (  ) ;
27158: LD_STRING 
27160: PPUSH
27161: CALL_OW 104
27165: END
// every 0 0$1 trigger StreamModeActive and sFog do
27166: LD_EXP 62
27170: PUSH
27171: LD_EXP 83
27175: AND
27176: IFFALSE 27190
27178: GO 27180
27180: DISABLE
// FogOff ( your_side ) ;
27181: LD_OWVAR 2
27185: PPUSH
27186: CALL_OW 344
27190: END
// every 0 0$1 trigger StreamModeActive and sSun do
27191: LD_EXP 62
27195: PUSH
27196: LD_EXP 85
27200: AND
27201: IFFALSE 27229
27203: GO 27205
27205: DISABLE
// begin solar_recharge_percent := 0 ;
27206: LD_ADDR_OWVAR 79
27210: PUSH
27211: LD_INT 0
27213: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27214: LD_INT 10500
27216: PPUSH
27217: CALL_OW 67
// solar_recharge_percent := 100 ;
27221: LD_ADDR_OWVAR 79
27225: PUSH
27226: LD_INT 100
27228: ST_TO_ADDR
// end ;
27229: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27230: LD_EXP 62
27234: PUSH
27235: LD_EXP 86
27239: AND
27240: IFFALSE 27479
27242: GO 27244
27244: DISABLE
27245: LD_INT 0
27247: PPUSH
27248: PPUSH
27249: PPUSH
// begin tmp := [ ] ;
27250: LD_ADDR_VAR 0 3
27254: PUSH
27255: EMPTY
27256: ST_TO_ADDR
// for i := 1 to 6 do
27257: LD_ADDR_VAR 0 1
27261: PUSH
27262: DOUBLE
27263: LD_INT 1
27265: DEC
27266: ST_TO_ADDR
27267: LD_INT 6
27269: PUSH
27270: FOR_TO
27271: IFFALSE 27376
// begin uc_nation := nation_nature ;
27273: LD_ADDR_OWVAR 21
27277: PUSH
27278: LD_INT 0
27280: ST_TO_ADDR
// uc_side := 0 ;
27281: LD_ADDR_OWVAR 20
27285: PUSH
27286: LD_INT 0
27288: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27289: LD_ADDR_OWVAR 29
27293: PUSH
27294: LD_INT 12
27296: PUSH
27297: LD_INT 12
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: ST_TO_ADDR
// hc_agressivity := 20 ;
27304: LD_ADDR_OWVAR 35
27308: PUSH
27309: LD_INT 20
27311: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27312: LD_ADDR_OWVAR 28
27316: PUSH
27317: LD_INT 17
27319: ST_TO_ADDR
// hc_gallery :=  ;
27320: LD_ADDR_OWVAR 33
27324: PUSH
27325: LD_STRING 
27327: ST_TO_ADDR
// hc_name :=  ;
27328: LD_ADDR_OWVAR 26
27332: PUSH
27333: LD_STRING 
27335: ST_TO_ADDR
// un := CreateHuman ;
27336: LD_ADDR_VAR 0 2
27340: PUSH
27341: CALL_OW 44
27345: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27346: LD_VAR 0 2
27350: PPUSH
27351: LD_INT 1
27353: PPUSH
27354: CALL_OW 51
// tmp := tmp ^ un ;
27358: LD_ADDR_VAR 0 3
27362: PUSH
27363: LD_VAR 0 3
27367: PUSH
27368: LD_VAR 0 2
27372: ADD
27373: ST_TO_ADDR
// end ;
27374: GO 27270
27376: POP
27377: POP
// repeat wait ( 0 0$1 ) ;
27378: LD_INT 35
27380: PPUSH
27381: CALL_OW 67
// for un in tmp do
27385: LD_ADDR_VAR 0 2
27389: PUSH
27390: LD_VAR 0 3
27394: PUSH
27395: FOR_IN
27396: IFFALSE 27470
// begin if IsDead ( un ) then
27398: LD_VAR 0 2
27402: PPUSH
27403: CALL_OW 301
27407: IFFALSE 27427
// begin tmp := tmp diff un ;
27409: LD_ADDR_VAR 0 3
27413: PUSH
27414: LD_VAR 0 3
27418: PUSH
27419: LD_VAR 0 2
27423: DIFF
27424: ST_TO_ADDR
// continue ;
27425: GO 27395
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27427: LD_VAR 0 2
27431: PPUSH
27432: LD_INT 3
27434: PUSH
27435: LD_INT 22
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PPUSH
27449: CALL_OW 69
27453: PPUSH
27454: LD_VAR 0 2
27458: PPUSH
27459: CALL_OW 74
27463: PPUSH
27464: CALL_OW 115
// end ;
27468: GO 27395
27470: POP
27471: POP
// until not tmp ;
27472: LD_VAR 0 3
27476: NOT
27477: IFFALSE 27378
// end ;
27479: PPOPN 3
27481: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27482: LD_EXP 62
27486: PUSH
27487: LD_EXP 87
27491: AND
27492: IFFALSE 27546
27494: GO 27496
27496: DISABLE
// begin ToLua ( displayTroll(); ) ;
27497: LD_STRING displayTroll();
27499: PPUSH
27500: CALL_OW 559
// wait ( 3 3$00 ) ;
27504: LD_INT 6300
27506: PPUSH
27507: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27511: LD_STRING hideTroll();
27513: PPUSH
27514: CALL_OW 559
// wait ( 1 1$00 ) ;
27518: LD_INT 2100
27520: PPUSH
27521: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27525: LD_STRING displayTroll();
27527: PPUSH
27528: CALL_OW 559
// wait ( 1 1$00 ) ;
27532: LD_INT 2100
27534: PPUSH
27535: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27539: LD_STRING hideTroll();
27541: PPUSH
27542: CALL_OW 559
// end ;
27546: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27547: LD_EXP 62
27551: PUSH
27552: LD_EXP 88
27556: AND
27557: IFFALSE 27620
27559: GO 27561
27561: DISABLE
27562: LD_INT 0
27564: PPUSH
// begin p := 0 ;
27565: LD_ADDR_VAR 0 1
27569: PUSH
27570: LD_INT 0
27572: ST_TO_ADDR
// repeat game_speed := 1 ;
27573: LD_ADDR_OWVAR 65
27577: PUSH
27578: LD_INT 1
27580: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27581: LD_INT 35
27583: PPUSH
27584: CALL_OW 67
// p := p + 1 ;
27588: LD_ADDR_VAR 0 1
27592: PUSH
27593: LD_VAR 0 1
27597: PUSH
27598: LD_INT 1
27600: PLUS
27601: ST_TO_ADDR
// until p >= 60 ;
27602: LD_VAR 0 1
27606: PUSH
27607: LD_INT 60
27609: GREATEREQUAL
27610: IFFALSE 27573
// game_speed := 4 ;
27612: LD_ADDR_OWVAR 65
27616: PUSH
27617: LD_INT 4
27619: ST_TO_ADDR
// end ;
27620: PPOPN 1
27622: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27623: LD_EXP 62
27627: PUSH
27628: LD_EXP 89
27632: AND
27633: IFFALSE 27779
27635: GO 27637
27637: DISABLE
27638: LD_INT 0
27640: PPUSH
27641: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27642: LD_ADDR_VAR 0 1
27646: PUSH
27647: LD_INT 22
27649: PUSH
27650: LD_OWVAR 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: LD_INT 30
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 30
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PPUSH
27691: CALL_OW 69
27695: ST_TO_ADDR
// if not depot then
27696: LD_VAR 0 1
27700: NOT
27701: IFFALSE 27705
// exit ;
27703: GO 27779
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27705: LD_ADDR_VAR 0 2
27709: PUSH
27710: LD_VAR 0 1
27714: PUSH
27715: LD_INT 1
27717: PPUSH
27718: LD_VAR 0 1
27722: PPUSH
27723: CALL_OW 12
27727: ARRAY
27728: PPUSH
27729: CALL_OW 274
27733: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27734: LD_VAR 0 2
27738: PPUSH
27739: LD_INT 1
27741: PPUSH
27742: LD_INT 0
27744: PPUSH
27745: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27749: LD_VAR 0 2
27753: PPUSH
27754: LD_INT 2
27756: PPUSH
27757: LD_INT 0
27759: PPUSH
27760: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27764: LD_VAR 0 2
27768: PPUSH
27769: LD_INT 3
27771: PPUSH
27772: LD_INT 0
27774: PPUSH
27775: CALL_OW 277
// end ;
27779: PPOPN 2
27781: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27782: LD_EXP 62
27786: PUSH
27787: LD_EXP 90
27791: AND
27792: IFFALSE 27889
27794: GO 27796
27796: DISABLE
27797: LD_INT 0
27799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27800: LD_ADDR_VAR 0 1
27804: PUSH
27805: LD_INT 22
27807: PUSH
27808: LD_OWVAR 2
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 21
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 3
27829: PUSH
27830: LD_INT 23
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: PPUSH
27849: CALL_OW 69
27853: ST_TO_ADDR
// if not tmp then
27854: LD_VAR 0 1
27858: NOT
27859: IFFALSE 27863
// exit ;
27861: GO 27889
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27863: LD_VAR 0 1
27867: PUSH
27868: LD_INT 1
27870: PPUSH
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL_OW 12
27880: ARRAY
27881: PPUSH
27882: LD_INT 200
27884: PPUSH
27885: CALL_OW 234
// end ;
27889: PPOPN 1
27891: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27892: LD_EXP 62
27896: PUSH
27897: LD_EXP 91
27901: AND
27902: IFFALSE 27981
27904: GO 27906
27906: DISABLE
27907: LD_INT 0
27909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27910: LD_ADDR_VAR 0 1
27914: PUSH
27915: LD_INT 22
27917: PUSH
27918: LD_OWVAR 2
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 21
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PPUSH
27941: CALL_OW 69
27945: ST_TO_ADDR
// if not tmp then
27946: LD_VAR 0 1
27950: NOT
27951: IFFALSE 27955
// exit ;
27953: GO 27981
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27955: LD_VAR 0 1
27959: PUSH
27960: LD_INT 1
27962: PPUSH
27963: LD_VAR 0 1
27967: PPUSH
27968: CALL_OW 12
27972: ARRAY
27973: PPUSH
27974: LD_INT 60
27976: PPUSH
27977: CALL_OW 234
// end ;
27981: PPOPN 1
27983: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27984: LD_EXP 62
27988: PUSH
27989: LD_EXP 92
27993: AND
27994: IFFALSE 28093
27996: GO 27998
27998: DISABLE
27999: LD_INT 0
28001: PPUSH
28002: PPUSH
// begin enable ;
28003: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28004: LD_ADDR_VAR 0 1
28008: PUSH
28009: LD_INT 22
28011: PUSH
28012: LD_OWVAR 2
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 61
28023: PUSH
28024: EMPTY
28025: LIST
28026: PUSH
28027: LD_INT 33
28029: PUSH
28030: LD_INT 2
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: PPUSH
28042: CALL_OW 69
28046: ST_TO_ADDR
// if not tmp then
28047: LD_VAR 0 1
28051: NOT
28052: IFFALSE 28056
// exit ;
28054: GO 28093
// for i in tmp do
28056: LD_ADDR_VAR 0 2
28060: PUSH
28061: LD_VAR 0 1
28065: PUSH
28066: FOR_IN
28067: IFFALSE 28091
// if IsControledBy ( i ) then
28069: LD_VAR 0 2
28073: PPUSH
28074: CALL_OW 312
28078: IFFALSE 28089
// ComUnlink ( i ) ;
28080: LD_VAR 0 2
28084: PPUSH
28085: CALL_OW 136
28089: GO 28066
28091: POP
28092: POP
// end ;
28093: PPOPN 2
28095: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28096: LD_EXP 62
28100: PUSH
28101: LD_EXP 93
28105: AND
28106: IFFALSE 28246
28108: GO 28110
28110: DISABLE
28111: LD_INT 0
28113: PPUSH
28114: PPUSH
// begin ToLua ( displayPowell(); ) ;
28115: LD_STRING displayPowell();
28117: PPUSH
28118: CALL_OW 559
// uc_side := 0 ;
28122: LD_ADDR_OWVAR 20
28126: PUSH
28127: LD_INT 0
28129: ST_TO_ADDR
// uc_nation := 2 ;
28130: LD_ADDR_OWVAR 21
28134: PUSH
28135: LD_INT 2
28137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28138: LD_ADDR_OWVAR 37
28142: PUSH
28143: LD_INT 14
28145: ST_TO_ADDR
// vc_engine := engine_siberite ;
28146: LD_ADDR_OWVAR 39
28150: PUSH
28151: LD_INT 3
28153: ST_TO_ADDR
// vc_control := control_apeman ;
28154: LD_ADDR_OWVAR 38
28158: PUSH
28159: LD_INT 5
28161: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28162: LD_ADDR_OWVAR 40
28166: PUSH
28167: LD_INT 29
28169: ST_TO_ADDR
// un := CreateVehicle ;
28170: LD_ADDR_VAR 0 2
28174: PUSH
28175: CALL_OW 45
28179: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28180: LD_VAR 0 2
28184: PPUSH
28185: LD_INT 1
28187: PPUSH
28188: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28192: LD_INT 35
28194: PPUSH
28195: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28199: LD_VAR 0 2
28203: PPUSH
28204: LD_INT 22
28206: PUSH
28207: LD_OWVAR 2
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PPUSH
28216: CALL_OW 69
28220: PPUSH
28221: LD_VAR 0 2
28225: PPUSH
28226: CALL_OW 74
28230: PPUSH
28231: CALL_OW 115
// until IsDead ( un ) ;
28235: LD_VAR 0 2
28239: PPUSH
28240: CALL_OW 301
28244: IFFALSE 28192
// end ;
28246: PPOPN 2
28248: END
// every 0 0$1 trigger StreamModeActive and sStu do
28249: LD_EXP 62
28253: PUSH
28254: LD_EXP 101
28258: AND
28259: IFFALSE 28275
28261: GO 28263
28263: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28264: LD_STRING displayStucuk();
28266: PPUSH
28267: CALL_OW 559
// ResetFog ;
28271: CALL_OW 335
// end ;
28275: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28276: LD_EXP 62
28280: PUSH
28281: LD_EXP 94
28285: AND
28286: IFFALSE 28427
28288: GO 28290
28290: DISABLE
28291: LD_INT 0
28293: PPUSH
28294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28295: LD_ADDR_VAR 0 2
28299: PUSH
28300: LD_INT 22
28302: PUSH
28303: LD_OWVAR 2
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 21
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PPUSH
28326: CALL_OW 69
28330: ST_TO_ADDR
// if not tmp then
28331: LD_VAR 0 2
28335: NOT
28336: IFFALSE 28340
// exit ;
28338: GO 28427
// un := tmp [ rand ( 1 , tmp ) ] ;
28340: LD_ADDR_VAR 0 1
28344: PUSH
28345: LD_VAR 0 2
28349: PUSH
28350: LD_INT 1
28352: PPUSH
28353: LD_VAR 0 2
28357: PPUSH
28358: CALL_OW 12
28362: ARRAY
28363: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28364: LD_VAR 0 1
28368: PPUSH
28369: LD_INT 0
28371: PPUSH
28372: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28376: LD_VAR 0 1
28380: PPUSH
28381: LD_OWVAR 3
28385: PUSH
28386: LD_VAR 0 1
28390: DIFF
28391: PPUSH
28392: LD_VAR 0 1
28396: PPUSH
28397: CALL_OW 74
28401: PPUSH
28402: CALL_OW 115
// wait ( 0 0$20 ) ;
28406: LD_INT 700
28408: PPUSH
28409: CALL_OW 67
// SetSide ( un , your_side ) ;
28413: LD_VAR 0 1
28417: PPUSH
28418: LD_OWVAR 2
28422: PPUSH
28423: CALL_OW 235
// end ;
28427: PPOPN 2
28429: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28430: LD_EXP 62
28434: PUSH
28435: LD_EXP 95
28439: AND
28440: IFFALSE 28546
28442: GO 28444
28444: DISABLE
28445: LD_INT 0
28447: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28448: LD_ADDR_VAR 0 1
28452: PUSH
28453: LD_INT 22
28455: PUSH
28456: LD_OWVAR 2
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: LD_INT 30
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 30
28480: PUSH
28481: LD_INT 1
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PPUSH
28497: CALL_OW 69
28501: ST_TO_ADDR
// if not depot then
28502: LD_VAR 0 1
28506: NOT
28507: IFFALSE 28511
// exit ;
28509: GO 28546
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28511: LD_VAR 0 1
28515: PUSH
28516: LD_INT 1
28518: ARRAY
28519: PPUSH
28520: CALL_OW 250
28524: PPUSH
28525: LD_VAR 0 1
28529: PUSH
28530: LD_INT 1
28532: ARRAY
28533: PPUSH
28534: CALL_OW 251
28538: PPUSH
28539: LD_INT 70
28541: PPUSH
28542: CALL_OW 495
// end ;
28546: PPOPN 1
28548: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28549: LD_EXP 62
28553: PUSH
28554: LD_EXP 96
28558: AND
28559: IFFALSE 28770
28561: GO 28563
28563: DISABLE
28564: LD_INT 0
28566: PPUSH
28567: PPUSH
28568: PPUSH
28569: PPUSH
28570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28571: LD_ADDR_VAR 0 5
28575: PUSH
28576: LD_INT 22
28578: PUSH
28579: LD_OWVAR 2
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 21
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PPUSH
28602: CALL_OW 69
28606: ST_TO_ADDR
// if not tmp then
28607: LD_VAR 0 5
28611: NOT
28612: IFFALSE 28616
// exit ;
28614: GO 28770
// for i in tmp do
28616: LD_ADDR_VAR 0 1
28620: PUSH
28621: LD_VAR 0 5
28625: PUSH
28626: FOR_IN
28627: IFFALSE 28768
// begin d := rand ( 0 , 5 ) ;
28629: LD_ADDR_VAR 0 4
28633: PUSH
28634: LD_INT 0
28636: PPUSH
28637: LD_INT 5
28639: PPUSH
28640: CALL_OW 12
28644: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28645: LD_ADDR_VAR 0 2
28649: PUSH
28650: LD_VAR 0 1
28654: PPUSH
28655: CALL_OW 250
28659: PPUSH
28660: LD_VAR 0 4
28664: PPUSH
28665: LD_INT 3
28667: PPUSH
28668: LD_INT 12
28670: PPUSH
28671: CALL_OW 12
28675: PPUSH
28676: CALL_OW 272
28680: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28681: LD_ADDR_VAR 0 3
28685: PUSH
28686: LD_VAR 0 1
28690: PPUSH
28691: CALL_OW 251
28695: PPUSH
28696: LD_VAR 0 4
28700: PPUSH
28701: LD_INT 3
28703: PPUSH
28704: LD_INT 12
28706: PPUSH
28707: CALL_OW 12
28711: PPUSH
28712: CALL_OW 273
28716: ST_TO_ADDR
// if ValidHex ( x , y ) then
28717: LD_VAR 0 2
28721: PPUSH
28722: LD_VAR 0 3
28726: PPUSH
28727: CALL_OW 488
28731: IFFALSE 28766
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28733: LD_VAR 0 1
28737: PPUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: LD_VAR 0 3
28747: PPUSH
28748: LD_INT 3
28750: PPUSH
28751: LD_INT 6
28753: PPUSH
28754: CALL_OW 12
28758: PPUSH
28759: LD_INT 1
28761: PPUSH
28762: CALL_OW 483
// end ;
28766: GO 28626
28768: POP
28769: POP
// end ;
28770: PPOPN 5
28772: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28773: LD_EXP 62
28777: PUSH
28778: LD_EXP 97
28782: AND
28783: IFFALSE 28877
28785: GO 28787
28787: DISABLE
28788: LD_INT 0
28790: PPUSH
28791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28792: LD_ADDR_VAR 0 2
28796: PUSH
28797: LD_INT 22
28799: PUSH
28800: LD_OWVAR 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 32
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 21
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: LIST
28833: PPUSH
28834: CALL_OW 69
28838: ST_TO_ADDR
// if not tmp then
28839: LD_VAR 0 2
28843: NOT
28844: IFFALSE 28848
// exit ;
28846: GO 28877
// for i in tmp do
28848: LD_ADDR_VAR 0 1
28852: PUSH
28853: LD_VAR 0 2
28857: PUSH
28858: FOR_IN
28859: IFFALSE 28875
// SetFuel ( i , 0 ) ;
28861: LD_VAR 0 1
28865: PPUSH
28866: LD_INT 0
28868: PPUSH
28869: CALL_OW 240
28873: GO 28858
28875: POP
28876: POP
// end ;
28877: PPOPN 2
28879: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28880: LD_EXP 62
28884: PUSH
28885: LD_EXP 98
28889: AND
28890: IFFALSE 28956
28892: GO 28894
28894: DISABLE
28895: LD_INT 0
28897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28898: LD_ADDR_VAR 0 1
28902: PUSH
28903: LD_INT 22
28905: PUSH
28906: LD_OWVAR 2
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 30
28917: PUSH
28918: LD_INT 29
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PPUSH
28929: CALL_OW 69
28933: ST_TO_ADDR
// if not tmp then
28934: LD_VAR 0 1
28938: NOT
28939: IFFALSE 28943
// exit ;
28941: GO 28956
// DestroyUnit ( tmp [ 1 ] ) ;
28943: LD_VAR 0 1
28947: PUSH
28948: LD_INT 1
28950: ARRAY
28951: PPUSH
28952: CALL_OW 65
// end ;
28956: PPOPN 1
28958: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28959: LD_EXP 62
28963: PUSH
28964: LD_EXP 100
28968: AND
28969: IFFALSE 29098
28971: GO 28973
28973: DISABLE
28974: LD_INT 0
28976: PPUSH
// begin uc_side := 0 ;
28977: LD_ADDR_OWVAR 20
28981: PUSH
28982: LD_INT 0
28984: ST_TO_ADDR
// uc_nation := nation_arabian ;
28985: LD_ADDR_OWVAR 21
28989: PUSH
28990: LD_INT 2
28992: ST_TO_ADDR
// hc_gallery :=  ;
28993: LD_ADDR_OWVAR 33
28997: PUSH
28998: LD_STRING 
29000: ST_TO_ADDR
// hc_name :=  ;
29001: LD_ADDR_OWVAR 26
29005: PUSH
29006: LD_STRING 
29008: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29009: LD_INT 1
29011: PPUSH
29012: LD_INT 11
29014: PPUSH
29015: LD_INT 10
29017: PPUSH
29018: CALL_OW 380
// un := CreateHuman ;
29022: LD_ADDR_VAR 0 1
29026: PUSH
29027: CALL_OW 44
29031: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29032: LD_VAR 0 1
29036: PPUSH
29037: LD_INT 1
29039: PPUSH
29040: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29044: LD_INT 35
29046: PPUSH
29047: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29051: LD_VAR 0 1
29055: PPUSH
29056: LD_INT 22
29058: PUSH
29059: LD_OWVAR 2
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PPUSH
29068: CALL_OW 69
29072: PPUSH
29073: LD_VAR 0 1
29077: PPUSH
29078: CALL_OW 74
29082: PPUSH
29083: CALL_OW 115
// until IsDead ( un ) ;
29087: LD_VAR 0 1
29091: PPUSH
29092: CALL_OW 301
29096: IFFALSE 29044
// end ;
29098: PPOPN 1
29100: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29101: LD_EXP 62
29105: PUSH
29106: LD_EXP 102
29110: AND
29111: IFFALSE 29123
29113: GO 29115
29115: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29116: LD_STRING earthquake(getX(game), 0, 32)
29118: PPUSH
29119: CALL_OW 559
29123: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29124: LD_EXP 62
29128: PUSH
29129: LD_EXP 103
29133: AND
29134: IFFALSE 29225
29136: GO 29138
29138: DISABLE
29139: LD_INT 0
29141: PPUSH
// begin enable ;
29142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29143: LD_ADDR_VAR 0 1
29147: PUSH
29148: LD_INT 22
29150: PUSH
29151: LD_OWVAR 2
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 21
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 33
29172: PUSH
29173: LD_INT 3
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: LIST
29184: PPUSH
29185: CALL_OW 69
29189: ST_TO_ADDR
// if not tmp then
29190: LD_VAR 0 1
29194: NOT
29195: IFFALSE 29199
// exit ;
29197: GO 29225
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29199: LD_VAR 0 1
29203: PUSH
29204: LD_INT 1
29206: PPUSH
29207: LD_VAR 0 1
29211: PPUSH
29212: CALL_OW 12
29216: ARRAY
29217: PPUSH
29218: LD_INT 1
29220: PPUSH
29221: CALL_OW 234
// end ;
29225: PPOPN 1
29227: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29228: LD_EXP 62
29232: PUSH
29233: LD_EXP 104
29237: AND
29238: IFFALSE 29379
29240: GO 29242
29242: DISABLE
29243: LD_INT 0
29245: PPUSH
29246: PPUSH
29247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: LD_INT 22
29255: PUSH
29256: LD_OWVAR 2
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 25
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PPUSH
29279: CALL_OW 69
29283: ST_TO_ADDR
// if not tmp then
29284: LD_VAR 0 3
29288: NOT
29289: IFFALSE 29293
// exit ;
29291: GO 29379
// un := tmp [ rand ( 1 , tmp ) ] ;
29293: LD_ADDR_VAR 0 2
29297: PUSH
29298: LD_VAR 0 3
29302: PUSH
29303: LD_INT 1
29305: PPUSH
29306: LD_VAR 0 3
29310: PPUSH
29311: CALL_OW 12
29315: ARRAY
29316: ST_TO_ADDR
// if Crawls ( un ) then
29317: LD_VAR 0 2
29321: PPUSH
29322: CALL_OW 318
29326: IFFALSE 29337
// ComWalk ( un ) ;
29328: LD_VAR 0 2
29332: PPUSH
29333: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29337: LD_VAR 0 2
29341: PPUSH
29342: LD_INT 9
29344: PPUSH
29345: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29349: LD_INT 28
29351: PPUSH
29352: LD_OWVAR 2
29356: PPUSH
29357: LD_INT 2
29359: PPUSH
29360: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29364: LD_INT 29
29366: PPUSH
29367: LD_OWVAR 2
29371: PPUSH
29372: LD_INT 2
29374: PPUSH
29375: CALL_OW 322
// end ;
29379: PPOPN 3
29381: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29382: LD_EXP 62
29386: PUSH
29387: LD_EXP 105
29391: AND
29392: IFFALSE 29503
29394: GO 29396
29396: DISABLE
29397: LD_INT 0
29399: PPUSH
29400: PPUSH
29401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29402: LD_ADDR_VAR 0 3
29406: PUSH
29407: LD_INT 22
29409: PUSH
29410: LD_OWVAR 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 25
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PPUSH
29433: CALL_OW 69
29437: ST_TO_ADDR
// if not tmp then
29438: LD_VAR 0 3
29442: NOT
29443: IFFALSE 29447
// exit ;
29445: GO 29503
// un := tmp [ rand ( 1 , tmp ) ] ;
29447: LD_ADDR_VAR 0 2
29451: PUSH
29452: LD_VAR 0 3
29456: PUSH
29457: LD_INT 1
29459: PPUSH
29460: LD_VAR 0 3
29464: PPUSH
29465: CALL_OW 12
29469: ARRAY
29470: ST_TO_ADDR
// if Crawls ( un ) then
29471: LD_VAR 0 2
29475: PPUSH
29476: CALL_OW 318
29480: IFFALSE 29491
// ComWalk ( un ) ;
29482: LD_VAR 0 2
29486: PPUSH
29487: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29491: LD_VAR 0 2
29495: PPUSH
29496: LD_INT 8
29498: PPUSH
29499: CALL_OW 336
// end ;
29503: PPOPN 3
29505: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29506: LD_EXP 62
29510: PUSH
29511: LD_EXP 106
29515: AND
29516: IFFALSE 29660
29518: GO 29520
29520: DISABLE
29521: LD_INT 0
29523: PPUSH
29524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29525: LD_ADDR_VAR 0 2
29529: PUSH
29530: LD_INT 22
29532: PUSH
29533: LD_OWVAR 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 21
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: LD_INT 34
29557: PUSH
29558: LD_INT 12
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 34
29567: PUSH
29568: LD_INT 51
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 34
29577: PUSH
29578: LD_INT 32
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: PPUSH
29596: CALL_OW 69
29600: ST_TO_ADDR
// if not tmp then
29601: LD_VAR 0 2
29605: NOT
29606: IFFALSE 29610
// exit ;
29608: GO 29660
// for i in tmp do
29610: LD_ADDR_VAR 0 1
29614: PUSH
29615: LD_VAR 0 2
29619: PUSH
29620: FOR_IN
29621: IFFALSE 29658
// if GetCargo ( i , mat_artifact ) = 0 then
29623: LD_VAR 0 1
29627: PPUSH
29628: LD_INT 4
29630: PPUSH
29631: CALL_OW 289
29635: PUSH
29636: LD_INT 0
29638: EQUAL
29639: IFFALSE 29656
// SetCargo ( i , mat_siberit , 100 ) ;
29641: LD_VAR 0 1
29645: PPUSH
29646: LD_INT 3
29648: PPUSH
29649: LD_INT 100
29651: PPUSH
29652: CALL_OW 290
29656: GO 29620
29658: POP
29659: POP
// end ;
29660: PPOPN 2
29662: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29663: LD_EXP 62
29667: PUSH
29668: LD_EXP 107
29672: AND
29673: IFFALSE 29856
29675: GO 29677
29677: DISABLE
29678: LD_INT 0
29680: PPUSH
29681: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29682: LD_ADDR_VAR 0 2
29686: PUSH
29687: LD_INT 22
29689: PUSH
29690: LD_OWVAR 2
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PPUSH
29699: CALL_OW 69
29703: ST_TO_ADDR
// if not tmp then
29704: LD_VAR 0 2
29708: NOT
29709: IFFALSE 29713
// exit ;
29711: GO 29856
// for i := 1 to 2 do
29713: LD_ADDR_VAR 0 1
29717: PUSH
29718: DOUBLE
29719: LD_INT 1
29721: DEC
29722: ST_TO_ADDR
29723: LD_INT 2
29725: PUSH
29726: FOR_TO
29727: IFFALSE 29854
// begin uc_side := your_side ;
29729: LD_ADDR_OWVAR 20
29733: PUSH
29734: LD_OWVAR 2
29738: ST_TO_ADDR
// uc_nation := nation_american ;
29739: LD_ADDR_OWVAR 21
29743: PUSH
29744: LD_INT 1
29746: ST_TO_ADDR
// vc_chassis := us_morphling ;
29747: LD_ADDR_OWVAR 37
29751: PUSH
29752: LD_INT 5
29754: ST_TO_ADDR
// vc_engine := engine_siberite ;
29755: LD_ADDR_OWVAR 39
29759: PUSH
29760: LD_INT 3
29762: ST_TO_ADDR
// vc_control := control_computer ;
29763: LD_ADDR_OWVAR 38
29767: PUSH
29768: LD_INT 3
29770: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29771: LD_ADDR_OWVAR 40
29775: PUSH
29776: LD_INT 10
29778: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29779: LD_VAR 0 2
29783: PUSH
29784: LD_INT 1
29786: ARRAY
29787: PPUSH
29788: CALL_OW 310
29792: NOT
29793: IFFALSE 29840
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29795: CALL_OW 45
29799: PPUSH
29800: LD_VAR 0 2
29804: PUSH
29805: LD_INT 1
29807: ARRAY
29808: PPUSH
29809: CALL_OW 250
29813: PPUSH
29814: LD_VAR 0 2
29818: PUSH
29819: LD_INT 1
29821: ARRAY
29822: PPUSH
29823: CALL_OW 251
29827: PPUSH
29828: LD_INT 12
29830: PPUSH
29831: LD_INT 1
29833: PPUSH
29834: CALL_OW 50
29838: GO 29852
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29840: CALL_OW 45
29844: PPUSH
29845: LD_INT 1
29847: PPUSH
29848: CALL_OW 51
// end ;
29852: GO 29726
29854: POP
29855: POP
// end ;
29856: PPOPN 2
29858: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29859: LD_EXP 62
29863: PUSH
29864: LD_EXP 108
29868: AND
29869: IFFALSE 30091
29871: GO 29873
29873: DISABLE
29874: LD_INT 0
29876: PPUSH
29877: PPUSH
29878: PPUSH
29879: PPUSH
29880: PPUSH
29881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29882: LD_ADDR_VAR 0 6
29886: PUSH
29887: LD_INT 22
29889: PUSH
29890: LD_OWVAR 2
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 21
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 3
29911: PUSH
29912: LD_INT 23
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: PPUSH
29931: CALL_OW 69
29935: ST_TO_ADDR
// if not tmp then
29936: LD_VAR 0 6
29940: NOT
29941: IFFALSE 29945
// exit ;
29943: GO 30091
// s1 := rand ( 1 , 4 ) ;
29945: LD_ADDR_VAR 0 2
29949: PUSH
29950: LD_INT 1
29952: PPUSH
29953: LD_INT 4
29955: PPUSH
29956: CALL_OW 12
29960: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29961: LD_ADDR_VAR 0 4
29965: PUSH
29966: LD_VAR 0 6
29970: PUSH
29971: LD_INT 1
29973: ARRAY
29974: PPUSH
29975: LD_VAR 0 2
29979: PPUSH
29980: CALL_OW 259
29984: ST_TO_ADDR
// if s1 = 1 then
29985: LD_VAR 0 2
29989: PUSH
29990: LD_INT 1
29992: EQUAL
29993: IFFALSE 30013
// s2 := rand ( 2 , 4 ) else
29995: LD_ADDR_VAR 0 3
29999: PUSH
30000: LD_INT 2
30002: PPUSH
30003: LD_INT 4
30005: PPUSH
30006: CALL_OW 12
30010: ST_TO_ADDR
30011: GO 30021
// s2 := 1 ;
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_INT 1
30020: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30021: LD_ADDR_VAR 0 5
30025: PUSH
30026: LD_VAR 0 6
30030: PUSH
30031: LD_INT 1
30033: ARRAY
30034: PPUSH
30035: LD_VAR 0 3
30039: PPUSH
30040: CALL_OW 259
30044: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30045: LD_VAR 0 6
30049: PUSH
30050: LD_INT 1
30052: ARRAY
30053: PPUSH
30054: LD_VAR 0 2
30058: PPUSH
30059: LD_VAR 0 5
30063: PPUSH
30064: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30068: LD_VAR 0 6
30072: PUSH
30073: LD_INT 1
30075: ARRAY
30076: PPUSH
30077: LD_VAR 0 3
30081: PPUSH
30082: LD_VAR 0 4
30086: PPUSH
30087: CALL_OW 237
// end ;
30091: PPOPN 6
30093: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30094: LD_EXP 62
30098: PUSH
30099: LD_EXP 109
30103: AND
30104: IFFALSE 30183
30106: GO 30108
30108: DISABLE
30109: LD_INT 0
30111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30112: LD_ADDR_VAR 0 1
30116: PUSH
30117: LD_INT 22
30119: PUSH
30120: LD_OWVAR 2
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 30
30131: PUSH
30132: LD_INT 3
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PPUSH
30143: CALL_OW 69
30147: ST_TO_ADDR
// if not tmp then
30148: LD_VAR 0 1
30152: NOT
30153: IFFALSE 30157
// exit ;
30155: GO 30183
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30157: LD_VAR 0 1
30161: PUSH
30162: LD_INT 1
30164: PPUSH
30165: LD_VAR 0 1
30169: PPUSH
30170: CALL_OW 12
30174: ARRAY
30175: PPUSH
30176: LD_INT 1
30178: PPUSH
30179: CALL_OW 234
// end ;
30183: PPOPN 1
30185: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30186: LD_EXP 62
30190: PUSH
30191: LD_EXP 110
30195: AND
30196: IFFALSE 30308
30198: GO 30200
30200: DISABLE
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30205: LD_ADDR_VAR 0 2
30209: PUSH
30210: LD_INT 22
30212: PUSH
30213: LD_OWVAR 2
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 30
30227: PUSH
30228: LD_INT 27
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 30
30237: PUSH
30238: LD_INT 26
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 30
30247: PUSH
30248: LD_INT 28
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PPUSH
30265: CALL_OW 69
30269: ST_TO_ADDR
// if not tmp then
30270: LD_VAR 0 2
30274: NOT
30275: IFFALSE 30279
// exit ;
30277: GO 30308
// for i in tmp do
30279: LD_ADDR_VAR 0 1
30283: PUSH
30284: LD_VAR 0 2
30288: PUSH
30289: FOR_IN
30290: IFFALSE 30306
// SetLives ( i , 1 ) ;
30292: LD_VAR 0 1
30296: PPUSH
30297: LD_INT 1
30299: PPUSH
30300: CALL_OW 234
30304: GO 30289
30306: POP
30307: POP
// end ;
30308: PPOPN 2
30310: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30311: LD_EXP 62
30315: PUSH
30316: LD_EXP 111
30320: AND
30321: IFFALSE 30608
30323: GO 30325
30325: DISABLE
30326: LD_INT 0
30328: PPUSH
30329: PPUSH
30330: PPUSH
// begin i := rand ( 1 , 7 ) ;
30331: LD_ADDR_VAR 0 1
30335: PUSH
30336: LD_INT 1
30338: PPUSH
30339: LD_INT 7
30341: PPUSH
30342: CALL_OW 12
30346: ST_TO_ADDR
// case i of 1 :
30347: LD_VAR 0 1
30351: PUSH
30352: LD_INT 1
30354: DOUBLE
30355: EQUAL
30356: IFTRUE 30360
30358: GO 30370
30360: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30361: LD_STRING earthquake(getX(game), 0, 32)
30363: PPUSH
30364: CALL_OW 559
30368: GO 30608
30370: LD_INT 2
30372: DOUBLE
30373: EQUAL
30374: IFTRUE 30378
30376: GO 30392
30378: POP
// begin ToLua ( displayStucuk(); ) ;
30379: LD_STRING displayStucuk();
30381: PPUSH
30382: CALL_OW 559
// ResetFog ;
30386: CALL_OW 335
// end ; 3 :
30390: GO 30608
30392: LD_INT 3
30394: DOUBLE
30395: EQUAL
30396: IFTRUE 30400
30398: GO 30504
30400: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30401: LD_ADDR_VAR 0 2
30405: PUSH
30406: LD_INT 22
30408: PUSH
30409: LD_OWVAR 2
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 25
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PPUSH
30432: CALL_OW 69
30436: ST_TO_ADDR
// if not tmp then
30437: LD_VAR 0 2
30441: NOT
30442: IFFALSE 30446
// exit ;
30444: GO 30608
// un := tmp [ rand ( 1 , tmp ) ] ;
30446: LD_ADDR_VAR 0 3
30450: PUSH
30451: LD_VAR 0 2
30455: PUSH
30456: LD_INT 1
30458: PPUSH
30459: LD_VAR 0 2
30463: PPUSH
30464: CALL_OW 12
30468: ARRAY
30469: ST_TO_ADDR
// if Crawls ( un ) then
30470: LD_VAR 0 3
30474: PPUSH
30475: CALL_OW 318
30479: IFFALSE 30490
// ComWalk ( un ) ;
30481: LD_VAR 0 3
30485: PPUSH
30486: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30490: LD_VAR 0 3
30494: PPUSH
30495: LD_INT 8
30497: PPUSH
30498: CALL_OW 336
// end ; 4 :
30502: GO 30608
30504: LD_INT 4
30506: DOUBLE
30507: EQUAL
30508: IFTRUE 30512
30510: GO 30586
30512: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30513: LD_ADDR_VAR 0 2
30517: PUSH
30518: LD_INT 22
30520: PUSH
30521: LD_OWVAR 2
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 30
30532: PUSH
30533: LD_INT 29
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PPUSH
30544: CALL_OW 69
30548: ST_TO_ADDR
// if not tmp then
30549: LD_VAR 0 2
30553: NOT
30554: IFFALSE 30558
// exit ;
30556: GO 30608
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30558: LD_VAR 0 2
30562: PUSH
30563: LD_INT 1
30565: ARRAY
30566: PPUSH
30567: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30571: LD_VAR 0 2
30575: PUSH
30576: LD_INT 1
30578: ARRAY
30579: PPUSH
30580: CALL_OW 65
// end ; 5 .. 7 :
30584: GO 30608
30586: LD_INT 5
30588: DOUBLE
30589: GREATEREQUAL
30590: IFFALSE 30598
30592: LD_INT 7
30594: DOUBLE
30595: LESSEQUAL
30596: IFTRUE 30600
30598: GO 30607
30600: POP
// StreamSibBomb ; end ;
30601: CALL 26845 0 0
30605: GO 30608
30607: POP
// end ;
30608: PPOPN 3
30610: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30611: LD_EXP 62
30615: PUSH
30616: LD_EXP 112
30620: AND
30621: IFFALSE 30777
30623: GO 30625
30625: DISABLE
30626: LD_INT 0
30628: PPUSH
30629: PPUSH
30630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30631: LD_ADDR_VAR 0 2
30635: PUSH
30636: LD_INT 81
30638: PUSH
30639: LD_OWVAR 2
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: LD_INT 21
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 21
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PPUSH
30680: CALL_OW 69
30684: ST_TO_ADDR
// if not tmp then
30685: LD_VAR 0 2
30689: NOT
30690: IFFALSE 30694
// exit ;
30692: GO 30777
// p := 0 ;
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_INT 0
30701: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30702: LD_INT 35
30704: PPUSH
30705: CALL_OW 67
// p := p + 1 ;
30709: LD_ADDR_VAR 0 3
30713: PUSH
30714: LD_VAR 0 3
30718: PUSH
30719: LD_INT 1
30721: PLUS
30722: ST_TO_ADDR
// for i in tmp do
30723: LD_ADDR_VAR 0 1
30727: PUSH
30728: LD_VAR 0 2
30732: PUSH
30733: FOR_IN
30734: IFFALSE 30765
// if GetLives ( i ) < 1000 then
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 256
30745: PUSH
30746: LD_INT 1000
30748: LESS
30749: IFFALSE 30763
// SetLives ( i , 1000 ) ;
30751: LD_VAR 0 1
30755: PPUSH
30756: LD_INT 1000
30758: PPUSH
30759: CALL_OW 234
30763: GO 30733
30765: POP
30766: POP
// until p > 20 ;
30767: LD_VAR 0 3
30771: PUSH
30772: LD_INT 20
30774: GREATER
30775: IFFALSE 30702
// end ;
30777: PPOPN 3
30779: END
// every 0 0$1 trigger StreamModeActive and sTime do
30780: LD_EXP 62
30784: PUSH
30785: LD_EXP 113
30789: AND
30790: IFFALSE 30825
30792: GO 30794
30794: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30795: LD_INT 28
30797: PPUSH
30798: LD_OWVAR 2
30802: PPUSH
30803: LD_INT 2
30805: PPUSH
30806: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30810: LD_INT 30
30812: PPUSH
30813: LD_OWVAR 2
30817: PPUSH
30818: LD_INT 2
30820: PPUSH
30821: CALL_OW 322
// end ;
30825: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30826: LD_EXP 62
30830: PUSH
30831: LD_EXP 114
30835: AND
30836: IFFALSE 30957
30838: GO 30840
30840: DISABLE
30841: LD_INT 0
30843: PPUSH
30844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30845: LD_ADDR_VAR 0 2
30849: PUSH
30850: LD_INT 22
30852: PUSH
30853: LD_OWVAR 2
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 21
30864: PUSH
30865: LD_INT 1
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 3
30874: PUSH
30875: LD_INT 23
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: PPUSH
30894: CALL_OW 69
30898: ST_TO_ADDR
// if not tmp then
30899: LD_VAR 0 2
30903: NOT
30904: IFFALSE 30908
// exit ;
30906: GO 30957
// for i in tmp do
30908: LD_ADDR_VAR 0 1
30912: PUSH
30913: LD_VAR 0 2
30917: PUSH
30918: FOR_IN
30919: IFFALSE 30955
// begin if Crawls ( i ) then
30921: LD_VAR 0 1
30925: PPUSH
30926: CALL_OW 318
30930: IFFALSE 30941
// ComWalk ( i ) ;
30932: LD_VAR 0 1
30936: PPUSH
30937: CALL_OW 138
// SetClass ( i , 2 ) ;
30941: LD_VAR 0 1
30945: PPUSH
30946: LD_INT 2
30948: PPUSH
30949: CALL_OW 336
// end ;
30953: GO 30918
30955: POP
30956: POP
// end ;
30957: PPOPN 2
30959: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30960: LD_EXP 62
30964: PUSH
30965: LD_EXP 115
30969: AND
30970: IFFALSE 31258
30972: GO 30974
30974: DISABLE
30975: LD_INT 0
30977: PPUSH
30978: PPUSH
30979: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30980: LD_OWVAR 2
30984: PPUSH
30985: LD_INT 9
30987: PPUSH
30988: LD_INT 1
30990: PPUSH
30991: LD_INT 1
30993: PPUSH
30994: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30998: LD_INT 9
31000: PPUSH
31001: LD_OWVAR 2
31005: PPUSH
31006: CALL_OW 343
// uc_side := 9 ;
31010: LD_ADDR_OWVAR 20
31014: PUSH
31015: LD_INT 9
31017: ST_TO_ADDR
// uc_nation := 2 ;
31018: LD_ADDR_OWVAR 21
31022: PUSH
31023: LD_INT 2
31025: ST_TO_ADDR
// hc_name := Dark Warrior ;
31026: LD_ADDR_OWVAR 26
31030: PUSH
31031: LD_STRING Dark Warrior
31033: ST_TO_ADDR
// hc_gallery :=  ;
31034: LD_ADDR_OWVAR 33
31038: PUSH
31039: LD_STRING 
31041: ST_TO_ADDR
// hc_noskilllimit := true ;
31042: LD_ADDR_OWVAR 76
31046: PUSH
31047: LD_INT 1
31049: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31050: LD_ADDR_OWVAR 31
31054: PUSH
31055: LD_INT 30
31057: PUSH
31058: LD_INT 30
31060: PUSH
31061: LD_INT 30
31063: PUSH
31064: LD_INT 30
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: ST_TO_ADDR
// un := CreateHuman ;
31073: LD_ADDR_VAR 0 3
31077: PUSH
31078: CALL_OW 44
31082: ST_TO_ADDR
// hc_noskilllimit := false ;
31083: LD_ADDR_OWVAR 76
31087: PUSH
31088: LD_INT 0
31090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31091: LD_VAR 0 3
31095: PPUSH
31096: LD_INT 1
31098: PPUSH
31099: CALL_OW 51
// ToLua ( playRanger() ) ;
31103: LD_STRING playRanger()
31105: PPUSH
31106: CALL_OW 559
// p := 0 ;
31110: LD_ADDR_VAR 0 2
31114: PUSH
31115: LD_INT 0
31117: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31118: LD_INT 35
31120: PPUSH
31121: CALL_OW 67
// p := p + 1 ;
31125: LD_ADDR_VAR 0 2
31129: PUSH
31130: LD_VAR 0 2
31134: PUSH
31135: LD_INT 1
31137: PLUS
31138: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31139: LD_VAR 0 3
31143: PPUSH
31144: CALL_OW 256
31148: PUSH
31149: LD_INT 1000
31151: LESS
31152: IFFALSE 31166
// SetLives ( un , 1000 ) ;
31154: LD_VAR 0 3
31158: PPUSH
31159: LD_INT 1000
31161: PPUSH
31162: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31166: LD_VAR 0 3
31170: PPUSH
31171: LD_INT 81
31173: PUSH
31174: LD_OWVAR 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 91
31185: PUSH
31186: LD_VAR 0 3
31190: PUSH
31191: LD_INT 30
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PPUSH
31203: CALL_OW 69
31207: PPUSH
31208: LD_VAR 0 3
31212: PPUSH
31213: CALL_OW 74
31217: PPUSH
31218: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31222: LD_VAR 0 2
31226: PUSH
31227: LD_INT 80
31229: GREATER
31230: PUSH
31231: LD_VAR 0 3
31235: PPUSH
31236: CALL_OW 301
31240: OR
31241: IFFALSE 31118
// if un then
31243: LD_VAR 0 3
31247: IFFALSE 31258
// RemoveUnit ( un ) ;
31249: LD_VAR 0 3
31253: PPUSH
31254: CALL_OW 64
// end ;
31258: PPOPN 3
31260: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31261: LD_EXP 116
31265: IFFALSE 31381
31267: GO 31269
31269: DISABLE
31270: LD_INT 0
31272: PPUSH
31273: PPUSH
31274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31275: LD_ADDR_VAR 0 2
31279: PUSH
31280: LD_INT 81
31282: PUSH
31283: LD_OWVAR 2
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 21
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PPUSH
31306: CALL_OW 69
31310: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31311: LD_STRING playComputer()
31313: PPUSH
31314: CALL_OW 559
// if not tmp then
31318: LD_VAR 0 2
31322: NOT
31323: IFFALSE 31327
// exit ;
31325: GO 31381
// for i in tmp do
31327: LD_ADDR_VAR 0 1
31331: PUSH
31332: LD_VAR 0 2
31336: PUSH
31337: FOR_IN
31338: IFFALSE 31379
// for j := 1 to 4 do
31340: LD_ADDR_VAR 0 3
31344: PUSH
31345: DOUBLE
31346: LD_INT 1
31348: DEC
31349: ST_TO_ADDR
31350: LD_INT 4
31352: PUSH
31353: FOR_TO
31354: IFFALSE 31375
// SetSkill ( i , j , 10 ) ;
31356: LD_VAR 0 1
31360: PPUSH
31361: LD_VAR 0 3
31365: PPUSH
31366: LD_INT 10
31368: PPUSH
31369: CALL_OW 237
31373: GO 31353
31375: POP
31376: POP
31377: GO 31337
31379: POP
31380: POP
// end ;
31381: PPOPN 3
31383: END
// every 0 0$1 trigger s30 do var i , tmp ;
31384: LD_EXP 117
31388: IFFALSE 31457
31390: GO 31392
31392: DISABLE
31393: LD_INT 0
31395: PPUSH
31396: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31397: LD_ADDR_VAR 0 2
31401: PUSH
31402: LD_INT 22
31404: PUSH
31405: LD_OWVAR 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PPUSH
31414: CALL_OW 69
31418: ST_TO_ADDR
// if not tmp then
31419: LD_VAR 0 2
31423: NOT
31424: IFFALSE 31428
// exit ;
31426: GO 31457
// for i in tmp do
31428: LD_ADDR_VAR 0 1
31432: PUSH
31433: LD_VAR 0 2
31437: PUSH
31438: FOR_IN
31439: IFFALSE 31455
// SetLives ( i , 300 ) ;
31441: LD_VAR 0 1
31445: PPUSH
31446: LD_INT 300
31448: PPUSH
31449: CALL_OW 234
31453: GO 31438
31455: POP
31456: POP
// end ;
31457: PPOPN 2
31459: END
// every 0 0$1 trigger s60 do var i , tmp ;
31460: LD_EXP 118
31464: IFFALSE 31533
31466: GO 31468
31468: DISABLE
31469: LD_INT 0
31471: PPUSH
31472: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31473: LD_ADDR_VAR 0 2
31477: PUSH
31478: LD_INT 22
31480: PUSH
31481: LD_OWVAR 2
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PPUSH
31490: CALL_OW 69
31494: ST_TO_ADDR
// if not tmp then
31495: LD_VAR 0 2
31499: NOT
31500: IFFALSE 31504
// exit ;
31502: GO 31533
// for i in tmp do
31504: LD_ADDR_VAR 0 1
31508: PUSH
31509: LD_VAR 0 2
31513: PUSH
31514: FOR_IN
31515: IFFALSE 31531
// SetLives ( i , 600 ) ;
31517: LD_VAR 0 1
31521: PPUSH
31522: LD_INT 600
31524: PPUSH
31525: CALL_OW 234
31529: GO 31514
31531: POP
31532: POP
// end ;
31533: PPOPN 2
31535: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31536: LD_INT 0
31538: PPUSH
// case cmd of 301 :
31539: LD_VAR 0 1
31543: PUSH
31544: LD_INT 301
31546: DOUBLE
31547: EQUAL
31548: IFTRUE 31552
31550: GO 31584
31552: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31553: LD_VAR 0 6
31557: PPUSH
31558: LD_VAR 0 7
31562: PPUSH
31563: LD_VAR 0 8
31567: PPUSH
31568: LD_VAR 0 4
31572: PPUSH
31573: LD_VAR 0 5
31577: PPUSH
31578: CALL 32785 0 5
31582: GO 31705
31584: LD_INT 302
31586: DOUBLE
31587: EQUAL
31588: IFTRUE 31592
31590: GO 31629
31592: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31593: LD_VAR 0 6
31597: PPUSH
31598: LD_VAR 0 7
31602: PPUSH
31603: LD_VAR 0 8
31607: PPUSH
31608: LD_VAR 0 9
31612: PPUSH
31613: LD_VAR 0 4
31617: PPUSH
31618: LD_VAR 0 5
31622: PPUSH
31623: CALL 32876 0 6
31627: GO 31705
31629: LD_INT 303
31631: DOUBLE
31632: EQUAL
31633: IFTRUE 31637
31635: GO 31674
31637: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31638: LD_VAR 0 6
31642: PPUSH
31643: LD_VAR 0 7
31647: PPUSH
31648: LD_VAR 0 8
31652: PPUSH
31653: LD_VAR 0 9
31657: PPUSH
31658: LD_VAR 0 4
31662: PPUSH
31663: LD_VAR 0 5
31667: PPUSH
31668: CALL 31710 0 6
31672: GO 31705
31674: LD_INT 304
31676: DOUBLE
31677: EQUAL
31678: IFTRUE 31682
31680: GO 31704
31682: POP
// hHackTeleport ( unit , x , y ) ; end ;
31683: LD_VAR 0 2
31687: PPUSH
31688: LD_VAR 0 4
31692: PPUSH
31693: LD_VAR 0 5
31697: PPUSH
31698: CALL 33469 0 3
31702: GO 31705
31704: POP
// end ;
31705: LD_VAR 0 12
31709: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31710: LD_INT 0
31712: PPUSH
31713: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31714: LD_VAR 0 1
31718: PUSH
31719: LD_INT 1
31721: LESS
31722: PUSH
31723: LD_VAR 0 1
31727: PUSH
31728: LD_INT 3
31730: GREATER
31731: OR
31732: PUSH
31733: LD_VAR 0 5
31737: PPUSH
31738: LD_VAR 0 6
31742: PPUSH
31743: CALL_OW 428
31747: OR
31748: IFFALSE 31752
// exit ;
31750: GO 32472
// uc_side := your_side ;
31752: LD_ADDR_OWVAR 20
31756: PUSH
31757: LD_OWVAR 2
31761: ST_TO_ADDR
// uc_nation := nation ;
31762: LD_ADDR_OWVAR 21
31766: PUSH
31767: LD_VAR 0 1
31771: ST_TO_ADDR
// bc_level = 1 ;
31772: LD_ADDR_OWVAR 43
31776: PUSH
31777: LD_INT 1
31779: ST_TO_ADDR
// case btype of 1 :
31780: LD_VAR 0 2
31784: PUSH
31785: LD_INT 1
31787: DOUBLE
31788: EQUAL
31789: IFTRUE 31793
31791: GO 31804
31793: POP
// bc_type := b_depot ; 2 :
31794: LD_ADDR_OWVAR 42
31798: PUSH
31799: LD_INT 0
31801: ST_TO_ADDR
31802: GO 32416
31804: LD_INT 2
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31812
31810: GO 31823
31812: POP
// bc_type := b_warehouse ; 3 :
31813: LD_ADDR_OWVAR 42
31817: PUSH
31818: LD_INT 1
31820: ST_TO_ADDR
31821: GO 32416
31823: LD_INT 3
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 31842
31831: POP
// bc_type := b_lab ; 4 .. 9 :
31832: LD_ADDR_OWVAR 42
31836: PUSH
31837: LD_INT 6
31839: ST_TO_ADDR
31840: GO 32416
31842: LD_INT 4
31844: DOUBLE
31845: GREATEREQUAL
31846: IFFALSE 31854
31848: LD_INT 9
31850: DOUBLE
31851: LESSEQUAL
31852: IFTRUE 31856
31854: GO 31908
31856: POP
// begin bc_type := b_lab_half ;
31857: LD_ADDR_OWVAR 42
31861: PUSH
31862: LD_INT 7
31864: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31865: LD_ADDR_OWVAR 44
31869: PUSH
31870: LD_INT 10
31872: PUSH
31873: LD_INT 11
31875: PUSH
31876: LD_INT 12
31878: PUSH
31879: LD_INT 15
31881: PUSH
31882: LD_INT 14
31884: PUSH
31885: LD_INT 13
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: PUSH
31896: LD_VAR 0 2
31900: PUSH
31901: LD_INT 3
31903: MINUS
31904: ARRAY
31905: ST_TO_ADDR
// end ; 10 .. 13 :
31906: GO 32416
31908: LD_INT 10
31910: DOUBLE
31911: GREATEREQUAL
31912: IFFALSE 31920
31914: LD_INT 13
31916: DOUBLE
31917: LESSEQUAL
31918: IFTRUE 31922
31920: GO 31999
31922: POP
// begin bc_type := b_lab_full ;
31923: LD_ADDR_OWVAR 42
31927: PUSH
31928: LD_INT 8
31930: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31931: LD_ADDR_OWVAR 44
31935: PUSH
31936: LD_INT 10
31938: PUSH
31939: LD_INT 12
31941: PUSH
31942: LD_INT 14
31944: PUSH
31945: LD_INT 13
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: PUSH
31954: LD_VAR 0 2
31958: PUSH
31959: LD_INT 9
31961: MINUS
31962: ARRAY
31963: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31964: LD_ADDR_OWVAR 45
31968: PUSH
31969: LD_INT 11
31971: PUSH
31972: LD_INT 15
31974: PUSH
31975: LD_INT 12
31977: PUSH
31978: LD_INT 15
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: PUSH
31987: LD_VAR 0 2
31991: PUSH
31992: LD_INT 9
31994: MINUS
31995: ARRAY
31996: ST_TO_ADDR
// end ; 14 :
31997: GO 32416
31999: LD_INT 14
32001: DOUBLE
32002: EQUAL
32003: IFTRUE 32007
32005: GO 32018
32007: POP
// bc_type := b_workshop ; 15 :
32008: LD_ADDR_OWVAR 42
32012: PUSH
32013: LD_INT 2
32015: ST_TO_ADDR
32016: GO 32416
32018: LD_INT 15
32020: DOUBLE
32021: EQUAL
32022: IFTRUE 32026
32024: GO 32037
32026: POP
// bc_type := b_factory ; 16 :
32027: LD_ADDR_OWVAR 42
32031: PUSH
32032: LD_INT 3
32034: ST_TO_ADDR
32035: GO 32416
32037: LD_INT 16
32039: DOUBLE
32040: EQUAL
32041: IFTRUE 32045
32043: GO 32056
32045: POP
// bc_type := b_ext_gun ; 17 :
32046: LD_ADDR_OWVAR 42
32050: PUSH
32051: LD_INT 17
32053: ST_TO_ADDR
32054: GO 32416
32056: LD_INT 17
32058: DOUBLE
32059: EQUAL
32060: IFTRUE 32064
32062: GO 32092
32064: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32065: LD_ADDR_OWVAR 42
32069: PUSH
32070: LD_INT 19
32072: PUSH
32073: LD_INT 23
32075: PUSH
32076: LD_INT 19
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: PUSH
32084: LD_VAR 0 1
32088: ARRAY
32089: ST_TO_ADDR
32090: GO 32416
32092: LD_INT 18
32094: DOUBLE
32095: EQUAL
32096: IFTRUE 32100
32098: GO 32111
32100: POP
// bc_type := b_ext_radar ; 19 :
32101: LD_ADDR_OWVAR 42
32105: PUSH
32106: LD_INT 20
32108: ST_TO_ADDR
32109: GO 32416
32111: LD_INT 19
32113: DOUBLE
32114: EQUAL
32115: IFTRUE 32119
32117: GO 32130
32119: POP
// bc_type := b_ext_radio ; 20 :
32120: LD_ADDR_OWVAR 42
32124: PUSH
32125: LD_INT 22
32127: ST_TO_ADDR
32128: GO 32416
32130: LD_INT 20
32132: DOUBLE
32133: EQUAL
32134: IFTRUE 32138
32136: GO 32149
32138: POP
// bc_type := b_ext_siberium ; 21 :
32139: LD_ADDR_OWVAR 42
32143: PUSH
32144: LD_INT 21
32146: ST_TO_ADDR
32147: GO 32416
32149: LD_INT 21
32151: DOUBLE
32152: EQUAL
32153: IFTRUE 32157
32155: GO 32168
32157: POP
// bc_type := b_ext_computer ; 22 :
32158: LD_ADDR_OWVAR 42
32162: PUSH
32163: LD_INT 24
32165: ST_TO_ADDR
32166: GO 32416
32168: LD_INT 22
32170: DOUBLE
32171: EQUAL
32172: IFTRUE 32176
32174: GO 32187
32176: POP
// bc_type := b_ext_track ; 23 :
32177: LD_ADDR_OWVAR 42
32181: PUSH
32182: LD_INT 16
32184: ST_TO_ADDR
32185: GO 32416
32187: LD_INT 23
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32206
32195: POP
// bc_type := b_ext_laser ; 24 :
32196: LD_ADDR_OWVAR 42
32200: PUSH
32201: LD_INT 25
32203: ST_TO_ADDR
32204: GO 32416
32206: LD_INT 24
32208: DOUBLE
32209: EQUAL
32210: IFTRUE 32214
32212: GO 32225
32214: POP
// bc_type := b_control_tower ; 25 :
32215: LD_ADDR_OWVAR 42
32219: PUSH
32220: LD_INT 36
32222: ST_TO_ADDR
32223: GO 32416
32225: LD_INT 25
32227: DOUBLE
32228: EQUAL
32229: IFTRUE 32233
32231: GO 32244
32233: POP
// bc_type := b_breastwork ; 26 :
32234: LD_ADDR_OWVAR 42
32238: PUSH
32239: LD_INT 31
32241: ST_TO_ADDR
32242: GO 32416
32244: LD_INT 26
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32263
32252: POP
// bc_type := b_bunker ; 27 :
32253: LD_ADDR_OWVAR 42
32257: PUSH
32258: LD_INT 32
32260: ST_TO_ADDR
32261: GO 32416
32263: LD_INT 27
32265: DOUBLE
32266: EQUAL
32267: IFTRUE 32271
32269: GO 32282
32271: POP
// bc_type := b_turret ; 28 :
32272: LD_ADDR_OWVAR 42
32276: PUSH
32277: LD_INT 33
32279: ST_TO_ADDR
32280: GO 32416
32282: LD_INT 28
32284: DOUBLE
32285: EQUAL
32286: IFTRUE 32290
32288: GO 32301
32290: POP
// bc_type := b_armoury ; 29 :
32291: LD_ADDR_OWVAR 42
32295: PUSH
32296: LD_INT 4
32298: ST_TO_ADDR
32299: GO 32416
32301: LD_INT 29
32303: DOUBLE
32304: EQUAL
32305: IFTRUE 32309
32307: GO 32320
32309: POP
// bc_type := b_barracks ; 30 :
32310: LD_ADDR_OWVAR 42
32314: PUSH
32315: LD_INT 5
32317: ST_TO_ADDR
32318: GO 32416
32320: LD_INT 30
32322: DOUBLE
32323: EQUAL
32324: IFTRUE 32328
32326: GO 32339
32328: POP
// bc_type := b_solar_power ; 31 :
32329: LD_ADDR_OWVAR 42
32333: PUSH
32334: LD_INT 27
32336: ST_TO_ADDR
32337: GO 32416
32339: LD_INT 31
32341: DOUBLE
32342: EQUAL
32343: IFTRUE 32347
32345: GO 32358
32347: POP
// bc_type := b_oil_power ; 32 :
32348: LD_ADDR_OWVAR 42
32352: PUSH
32353: LD_INT 26
32355: ST_TO_ADDR
32356: GO 32416
32358: LD_INT 32
32360: DOUBLE
32361: EQUAL
32362: IFTRUE 32366
32364: GO 32377
32366: POP
// bc_type := b_siberite_power ; 33 :
32367: LD_ADDR_OWVAR 42
32371: PUSH
32372: LD_INT 28
32374: ST_TO_ADDR
32375: GO 32416
32377: LD_INT 33
32379: DOUBLE
32380: EQUAL
32381: IFTRUE 32385
32383: GO 32396
32385: POP
// bc_type := b_oil_mine ; 34 :
32386: LD_ADDR_OWVAR 42
32390: PUSH
32391: LD_INT 29
32393: ST_TO_ADDR
32394: GO 32416
32396: LD_INT 34
32398: DOUBLE
32399: EQUAL
32400: IFTRUE 32404
32402: GO 32415
32404: POP
// bc_type := b_siberite_mine ; end ;
32405: LD_ADDR_OWVAR 42
32409: PUSH
32410: LD_INT 30
32412: ST_TO_ADDR
32413: GO 32416
32415: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32416: LD_ADDR_VAR 0 8
32420: PUSH
32421: LD_VAR 0 5
32425: PPUSH
32426: LD_VAR 0 6
32430: PPUSH
32431: LD_VAR 0 3
32435: PPUSH
32436: CALL_OW 47
32440: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32441: LD_OWVAR 42
32445: PUSH
32446: LD_INT 32
32448: PUSH
32449: LD_INT 33
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: IN
32456: IFFALSE 32472
// PlaceWeaponTurret ( b , weapon ) ;
32458: LD_VAR 0 8
32462: PPUSH
32463: LD_VAR 0 4
32467: PPUSH
32468: CALL_OW 431
// end ;
32472: LD_VAR 0 7
32476: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32477: LD_INT 0
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32483: LD_ADDR_VAR 0 4
32487: PUSH
32488: LD_INT 22
32490: PUSH
32491: LD_OWVAR 2
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: LD_INT 30
32505: PUSH
32506: LD_INT 0
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 30
32515: PUSH
32516: LD_INT 1
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: LIST
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PPUSH
32532: CALL_OW 69
32536: ST_TO_ADDR
// if not tmp then
32537: LD_VAR 0 4
32541: NOT
32542: IFFALSE 32546
// exit ;
32544: GO 32605
// for i in tmp do
32546: LD_ADDR_VAR 0 2
32550: PUSH
32551: LD_VAR 0 4
32555: PUSH
32556: FOR_IN
32557: IFFALSE 32603
// for j = 1 to 3 do
32559: LD_ADDR_VAR 0 3
32563: PUSH
32564: DOUBLE
32565: LD_INT 1
32567: DEC
32568: ST_TO_ADDR
32569: LD_INT 3
32571: PUSH
32572: FOR_TO
32573: IFFALSE 32599
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32575: LD_VAR 0 2
32579: PPUSH
32580: CALL_OW 274
32584: PPUSH
32585: LD_VAR 0 3
32589: PPUSH
32590: LD_INT 99999
32592: PPUSH
32593: CALL_OW 277
32597: GO 32572
32599: POP
32600: POP
32601: GO 32556
32603: POP
32604: POP
// end ;
32605: LD_VAR 0 1
32609: RET
// export function hHackSetLevel10 ; var i , j ; begin
32610: LD_INT 0
32612: PPUSH
32613: PPUSH
32614: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32615: LD_ADDR_VAR 0 2
32619: PUSH
32620: LD_INT 21
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PPUSH
32630: CALL_OW 69
32634: PUSH
32635: FOR_IN
32636: IFFALSE 32688
// if IsSelected ( i ) then
32638: LD_VAR 0 2
32642: PPUSH
32643: CALL_OW 306
32647: IFFALSE 32686
// begin for j := 1 to 4 do
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: DOUBLE
32655: LD_INT 1
32657: DEC
32658: ST_TO_ADDR
32659: LD_INT 4
32661: PUSH
32662: FOR_TO
32663: IFFALSE 32684
// SetSkill ( i , j , 10 ) ;
32665: LD_VAR 0 2
32669: PPUSH
32670: LD_VAR 0 3
32674: PPUSH
32675: LD_INT 10
32677: PPUSH
32678: CALL_OW 237
32682: GO 32662
32684: POP
32685: POP
// end ;
32686: GO 32635
32688: POP
32689: POP
// end ;
32690: LD_VAR 0 1
32694: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32695: LD_INT 0
32697: PPUSH
32698: PPUSH
32699: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32700: LD_ADDR_VAR 0 2
32704: PUSH
32705: LD_INT 22
32707: PUSH
32708: LD_OWVAR 2
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 21
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PPUSH
32731: CALL_OW 69
32735: PUSH
32736: FOR_IN
32737: IFFALSE 32778
// begin for j := 1 to 4 do
32739: LD_ADDR_VAR 0 3
32743: PUSH
32744: DOUBLE
32745: LD_INT 1
32747: DEC
32748: ST_TO_ADDR
32749: LD_INT 4
32751: PUSH
32752: FOR_TO
32753: IFFALSE 32774
// SetSkill ( i , j , 10 ) ;
32755: LD_VAR 0 2
32759: PPUSH
32760: LD_VAR 0 3
32764: PPUSH
32765: LD_INT 10
32767: PPUSH
32768: CALL_OW 237
32772: GO 32752
32774: POP
32775: POP
// end ;
32776: GO 32736
32778: POP
32779: POP
// end ;
32780: LD_VAR 0 1
32784: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32785: LD_INT 0
32787: PPUSH
// uc_side := your_side ;
32788: LD_ADDR_OWVAR 20
32792: PUSH
32793: LD_OWVAR 2
32797: ST_TO_ADDR
// uc_nation := nation ;
32798: LD_ADDR_OWVAR 21
32802: PUSH
32803: LD_VAR 0 1
32807: ST_TO_ADDR
// InitHc ;
32808: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32812: LD_INT 0
32814: PPUSH
32815: LD_VAR 0 2
32819: PPUSH
32820: LD_VAR 0 3
32824: PPUSH
32825: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32829: LD_VAR 0 4
32833: PPUSH
32834: LD_VAR 0 5
32838: PPUSH
32839: CALL_OW 428
32843: PUSH
32844: LD_INT 0
32846: EQUAL
32847: IFFALSE 32871
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32849: CALL_OW 44
32853: PPUSH
32854: LD_VAR 0 4
32858: PPUSH
32859: LD_VAR 0 5
32863: PPUSH
32864: LD_INT 1
32866: PPUSH
32867: CALL_OW 48
// end ;
32871: LD_VAR 0 6
32875: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32876: LD_INT 0
32878: PPUSH
32879: PPUSH
// uc_side := your_side ;
32880: LD_ADDR_OWVAR 20
32884: PUSH
32885: LD_OWVAR 2
32889: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32890: LD_VAR 0 1
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 3
32903: PUSH
32904: LD_INT 4
32906: PUSH
32907: LD_INT 5
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: IN
32917: IFFALSE 32929
// uc_nation := nation_american else
32919: LD_ADDR_OWVAR 21
32923: PUSH
32924: LD_INT 1
32926: ST_TO_ADDR
32927: GO 32972
// if chassis in [ 11 , 12 , 13 , 14 ] then
32929: LD_VAR 0 1
32933: PUSH
32934: LD_INT 11
32936: PUSH
32937: LD_INT 12
32939: PUSH
32940: LD_INT 13
32942: PUSH
32943: LD_INT 14
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: IN
32952: IFFALSE 32964
// uc_nation := nation_arabian else
32954: LD_ADDR_OWVAR 21
32958: PUSH
32959: LD_INT 2
32961: ST_TO_ADDR
32962: GO 32972
// uc_nation := nation_russian ;
32964: LD_ADDR_OWVAR 21
32968: PUSH
32969: LD_INT 3
32971: ST_TO_ADDR
// vc_chassis := chassis ;
32972: LD_ADDR_OWVAR 37
32976: PUSH
32977: LD_VAR 0 1
32981: ST_TO_ADDR
// vc_engine := engine ;
32982: LD_ADDR_OWVAR 39
32986: PUSH
32987: LD_VAR 0 2
32991: ST_TO_ADDR
// vc_control := control ;
32992: LD_ADDR_OWVAR 38
32996: PUSH
32997: LD_VAR 0 3
33001: ST_TO_ADDR
// vc_weapon := weapon ;
33002: LD_ADDR_OWVAR 40
33006: PUSH
33007: LD_VAR 0 4
33011: ST_TO_ADDR
// un := CreateVehicle ;
33012: LD_ADDR_VAR 0 8
33016: PUSH
33017: CALL_OW 45
33021: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33022: LD_VAR 0 8
33026: PPUSH
33027: LD_INT 0
33029: PPUSH
33030: LD_INT 5
33032: PPUSH
33033: CALL_OW 12
33037: PPUSH
33038: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33042: LD_VAR 0 8
33046: PPUSH
33047: LD_VAR 0 5
33051: PPUSH
33052: LD_VAR 0 6
33056: PPUSH
33057: LD_INT 1
33059: PPUSH
33060: CALL_OW 48
// end ;
33064: LD_VAR 0 7
33068: RET
// export hInvincible ; every 1 do
33069: GO 33071
33071: DISABLE
// hInvincible := [ ] ;
33072: LD_ADDR_EXP 119
33076: PUSH
33077: EMPTY
33078: ST_TO_ADDR
33079: END
// every 10 do var i ;
33080: GO 33082
33082: DISABLE
33083: LD_INT 0
33085: PPUSH
// begin enable ;
33086: ENABLE
// if not hInvincible then
33087: LD_EXP 119
33091: NOT
33092: IFFALSE 33096
// exit ;
33094: GO 33140
// for i in hInvincible do
33096: LD_ADDR_VAR 0 1
33100: PUSH
33101: LD_EXP 119
33105: PUSH
33106: FOR_IN
33107: IFFALSE 33138
// if GetLives ( i ) < 1000 then
33109: LD_VAR 0 1
33113: PPUSH
33114: CALL_OW 256
33118: PUSH
33119: LD_INT 1000
33121: LESS
33122: IFFALSE 33136
// SetLives ( i , 1000 ) ;
33124: LD_VAR 0 1
33128: PPUSH
33129: LD_INT 1000
33131: PPUSH
33132: CALL_OW 234
33136: GO 33106
33138: POP
33139: POP
// end ;
33140: PPOPN 1
33142: END
// export function hHackInvincible ; var i ; begin
33143: LD_INT 0
33145: PPUSH
33146: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33147: LD_ADDR_VAR 0 2
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 21
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 21
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: PPUSH
33180: CALL_OW 69
33184: PUSH
33185: FOR_IN
33186: IFFALSE 33247
// if IsSelected ( i ) then
33188: LD_VAR 0 2
33192: PPUSH
33193: CALL_OW 306
33197: IFFALSE 33245
// begin if i in hInvincible then
33199: LD_VAR 0 2
33203: PUSH
33204: LD_EXP 119
33208: IN
33209: IFFALSE 33229
// hInvincible := hInvincible diff i else
33211: LD_ADDR_EXP 119
33215: PUSH
33216: LD_EXP 119
33220: PUSH
33221: LD_VAR 0 2
33225: DIFF
33226: ST_TO_ADDR
33227: GO 33245
// hInvincible := hInvincible union i ;
33229: LD_ADDR_EXP 119
33233: PUSH
33234: LD_EXP 119
33238: PUSH
33239: LD_VAR 0 2
33243: UNION
33244: ST_TO_ADDR
// end ;
33245: GO 33185
33247: POP
33248: POP
// end ;
33249: LD_VAR 0 1
33253: RET
// export function hHackInvisible ; var i , j ; begin
33254: LD_INT 0
33256: PPUSH
33257: PPUSH
33258: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33259: LD_ADDR_VAR 0 2
33263: PUSH
33264: LD_INT 21
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PPUSH
33274: CALL_OW 69
33278: PUSH
33279: FOR_IN
33280: IFFALSE 33304
// if IsSelected ( i ) then
33282: LD_VAR 0 2
33286: PPUSH
33287: CALL_OW 306
33291: IFFALSE 33302
// ComForceInvisible ( i ) ;
33293: LD_VAR 0 2
33297: PPUSH
33298: CALL_OW 496
33302: GO 33279
33304: POP
33305: POP
// end ;
33306: LD_VAR 0 1
33310: RET
// export function hHackChangeYourSide ; begin
33311: LD_INT 0
33313: PPUSH
// if your_side = 8 then
33314: LD_OWVAR 2
33318: PUSH
33319: LD_INT 8
33321: EQUAL
33322: IFFALSE 33334
// your_side := 0 else
33324: LD_ADDR_OWVAR 2
33328: PUSH
33329: LD_INT 0
33331: ST_TO_ADDR
33332: GO 33348
// your_side := your_side + 1 ;
33334: LD_ADDR_OWVAR 2
33338: PUSH
33339: LD_OWVAR 2
33343: PUSH
33344: LD_INT 1
33346: PLUS
33347: ST_TO_ADDR
// end ;
33348: LD_VAR 0 1
33352: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33353: LD_INT 0
33355: PPUSH
33356: PPUSH
33357: PPUSH
// for i in all_units do
33358: LD_ADDR_VAR 0 2
33362: PUSH
33363: LD_OWVAR 3
33367: PUSH
33368: FOR_IN
33369: IFFALSE 33447
// if IsSelected ( i ) then
33371: LD_VAR 0 2
33375: PPUSH
33376: CALL_OW 306
33380: IFFALSE 33445
// begin j := GetSide ( i ) ;
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: LD_VAR 0 2
33391: PPUSH
33392: CALL_OW 255
33396: ST_TO_ADDR
// if j = 8 then
33397: LD_VAR 0 3
33401: PUSH
33402: LD_INT 8
33404: EQUAL
33405: IFFALSE 33417
// j := 0 else
33407: LD_ADDR_VAR 0 3
33411: PUSH
33412: LD_INT 0
33414: ST_TO_ADDR
33415: GO 33431
// j := j + 1 ;
33417: LD_ADDR_VAR 0 3
33421: PUSH
33422: LD_VAR 0 3
33426: PUSH
33427: LD_INT 1
33429: PLUS
33430: ST_TO_ADDR
// SetSide ( i , j ) ;
33431: LD_VAR 0 2
33435: PPUSH
33436: LD_VAR 0 3
33440: PPUSH
33441: CALL_OW 235
// end ;
33445: GO 33368
33447: POP
33448: POP
// end ;
33449: LD_VAR 0 1
33453: RET
// export function hHackFog ; begin
33454: LD_INT 0
33456: PPUSH
// FogOff ( true ) ;
33457: LD_INT 1
33459: PPUSH
33460: CALL_OW 344
// end ;
33464: LD_VAR 0 1
33468: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33469: LD_INT 0
33471: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33472: LD_VAR 0 1
33476: PPUSH
33477: LD_VAR 0 2
33481: PPUSH
33482: LD_VAR 0 3
33486: PPUSH
33487: LD_INT 1
33489: PPUSH
33490: LD_INT 1
33492: PPUSH
33493: CALL_OW 483
// CenterOnXY ( x , y ) ;
33497: LD_VAR 0 2
33501: PPUSH
33502: LD_VAR 0 3
33506: PPUSH
33507: CALL_OW 84
// end ;
33511: LD_VAR 0 4
33515: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33516: LD_INT 0
33518: PPUSH
33519: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33520: LD_VAR 0 1
33524: NOT
33525: PUSH
33526: LD_VAR 0 2
33530: PPUSH
33531: LD_VAR 0 3
33535: PPUSH
33536: CALL_OW 488
33540: NOT
33541: OR
33542: PUSH
33543: LD_VAR 0 1
33547: PPUSH
33548: CALL_OW 266
33552: PUSH
33553: LD_INT 3
33555: NONEQUAL
33556: PUSH
33557: LD_VAR 0 1
33561: PPUSH
33562: CALL_OW 247
33566: PUSH
33567: LD_INT 1
33569: EQUAL
33570: NOT
33571: AND
33572: OR
33573: IFFALSE 33577
// exit ;
33575: GO 33726
// if GetType ( factory ) = unit_human then
33577: LD_VAR 0 1
33581: PPUSH
33582: CALL_OW 247
33586: PUSH
33587: LD_INT 1
33589: EQUAL
33590: IFFALSE 33607
// factory := IsInUnit ( factory ) ;
33592: LD_ADDR_VAR 0 1
33596: PUSH
33597: LD_VAR 0 1
33601: PPUSH
33602: CALL_OW 310
33606: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33607: LD_VAR 0 1
33611: PPUSH
33612: CALL_OW 266
33616: PUSH
33617: LD_INT 3
33619: NONEQUAL
33620: IFFALSE 33624
// exit ;
33622: GO 33726
// if HexInfo ( x , y ) = factory then
33624: LD_VAR 0 2
33628: PPUSH
33629: LD_VAR 0 3
33633: PPUSH
33634: CALL_OW 428
33638: PUSH
33639: LD_VAR 0 1
33643: EQUAL
33644: IFFALSE 33671
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33646: LD_ADDR_EXP 120
33650: PUSH
33651: LD_EXP 120
33655: PPUSH
33656: LD_VAR 0 1
33660: PPUSH
33661: LD_INT 0
33663: PPUSH
33664: CALL_OW 1
33668: ST_TO_ADDR
33669: GO 33722
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33671: LD_ADDR_EXP 120
33675: PUSH
33676: LD_EXP 120
33680: PPUSH
33681: LD_VAR 0 1
33685: PPUSH
33686: LD_VAR 0 1
33690: PPUSH
33691: CALL_OW 255
33695: PUSH
33696: LD_VAR 0 1
33700: PUSH
33701: LD_VAR 0 2
33705: PUSH
33706: LD_VAR 0 3
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: PPUSH
33717: CALL_OW 1
33721: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33722: CALL 33731 0 0
// end ;
33726: LD_VAR 0 4
33730: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33731: LD_INT 0
33733: PPUSH
33734: PPUSH
33735: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33736: LD_STRING resetFactoryWaypoint();
33738: PPUSH
33739: CALL_OW 559
// if factoryWaypoints then
33743: LD_EXP 120
33747: IFFALSE 33873
// begin list := PrepareArray ( factoryWaypoints ) ;
33749: LD_ADDR_VAR 0 3
33753: PUSH
33754: LD_EXP 120
33758: PPUSH
33759: CALL 80323 0 1
33763: ST_TO_ADDR
// for i := 1 to list do
33764: LD_ADDR_VAR 0 2
33768: PUSH
33769: DOUBLE
33770: LD_INT 1
33772: DEC
33773: ST_TO_ADDR
33774: LD_VAR 0 3
33778: PUSH
33779: FOR_TO
33780: IFFALSE 33871
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33782: LD_STRING setFactoryWaypointXY(
33784: PUSH
33785: LD_VAR 0 3
33789: PUSH
33790: LD_VAR 0 2
33794: ARRAY
33795: PUSH
33796: LD_INT 1
33798: ARRAY
33799: STR
33800: PUSH
33801: LD_STRING ,
33803: STR
33804: PUSH
33805: LD_VAR 0 3
33809: PUSH
33810: LD_VAR 0 2
33814: ARRAY
33815: PUSH
33816: LD_INT 2
33818: ARRAY
33819: STR
33820: PUSH
33821: LD_STRING ,
33823: STR
33824: PUSH
33825: LD_VAR 0 3
33829: PUSH
33830: LD_VAR 0 2
33834: ARRAY
33835: PUSH
33836: LD_INT 3
33838: ARRAY
33839: STR
33840: PUSH
33841: LD_STRING ,
33843: STR
33844: PUSH
33845: LD_VAR 0 3
33849: PUSH
33850: LD_VAR 0 2
33854: ARRAY
33855: PUSH
33856: LD_INT 4
33858: ARRAY
33859: STR
33860: PUSH
33861: LD_STRING )
33863: STR
33864: PPUSH
33865: CALL_OW 559
33869: GO 33779
33871: POP
33872: POP
// end ; end ;
33873: LD_VAR 0 1
33877: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33878: LD_INT 0
33880: PPUSH
// if HexInfo ( x , y ) = warehouse then
33881: LD_VAR 0 2
33885: PPUSH
33886: LD_VAR 0 3
33890: PPUSH
33891: CALL_OW 428
33895: PUSH
33896: LD_VAR 0 1
33900: EQUAL
33901: IFFALSE 33928
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33903: LD_ADDR_EXP 121
33907: PUSH
33908: LD_EXP 121
33912: PPUSH
33913: LD_VAR 0 1
33917: PPUSH
33918: LD_INT 0
33920: PPUSH
33921: CALL_OW 1
33925: ST_TO_ADDR
33926: GO 33979
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33928: LD_ADDR_EXP 121
33932: PUSH
33933: LD_EXP 121
33937: PPUSH
33938: LD_VAR 0 1
33942: PPUSH
33943: LD_VAR 0 1
33947: PPUSH
33948: CALL_OW 255
33952: PUSH
33953: LD_VAR 0 1
33957: PUSH
33958: LD_VAR 0 2
33962: PUSH
33963: LD_VAR 0 3
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: PPUSH
33974: CALL_OW 1
33978: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33979: CALL 33988 0 0
// end ;
33983: LD_VAR 0 4
33987: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33988: LD_INT 0
33990: PPUSH
33991: PPUSH
33992: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33993: LD_STRING resetWarehouseGatheringPoints();
33995: PPUSH
33996: CALL_OW 559
// if warehouseGatheringPoints then
34000: LD_EXP 121
34004: IFFALSE 34130
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34006: LD_ADDR_VAR 0 3
34010: PUSH
34011: LD_EXP 121
34015: PPUSH
34016: CALL 80323 0 1
34020: ST_TO_ADDR
// for i := 1 to list do
34021: LD_ADDR_VAR 0 2
34025: PUSH
34026: DOUBLE
34027: LD_INT 1
34029: DEC
34030: ST_TO_ADDR
34031: LD_VAR 0 3
34035: PUSH
34036: FOR_TO
34037: IFFALSE 34128
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34039: LD_STRING setWarehouseGatheringPointXY(
34041: PUSH
34042: LD_VAR 0 3
34046: PUSH
34047: LD_VAR 0 2
34051: ARRAY
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: STR
34057: PUSH
34058: LD_STRING ,
34060: STR
34061: PUSH
34062: LD_VAR 0 3
34066: PUSH
34067: LD_VAR 0 2
34071: ARRAY
34072: PUSH
34073: LD_INT 2
34075: ARRAY
34076: STR
34077: PUSH
34078: LD_STRING ,
34080: STR
34081: PUSH
34082: LD_VAR 0 3
34086: PUSH
34087: LD_VAR 0 2
34091: ARRAY
34092: PUSH
34093: LD_INT 3
34095: ARRAY
34096: STR
34097: PUSH
34098: LD_STRING ,
34100: STR
34101: PUSH
34102: LD_VAR 0 3
34106: PUSH
34107: LD_VAR 0 2
34111: ARRAY
34112: PUSH
34113: LD_INT 4
34115: ARRAY
34116: STR
34117: PUSH
34118: LD_STRING )
34120: STR
34121: PPUSH
34122: CALL_OW 559
34126: GO 34036
34128: POP
34129: POP
// end ; end ;
34130: LD_VAR 0 1
34134: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34135: LD_EXP 121
34139: IFFALSE 34824
34141: GO 34143
34143: DISABLE
34144: LD_INT 0
34146: PPUSH
34147: PPUSH
34148: PPUSH
34149: PPUSH
34150: PPUSH
34151: PPUSH
34152: PPUSH
34153: PPUSH
34154: PPUSH
// begin enable ;
34155: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34156: LD_ADDR_VAR 0 3
34160: PUSH
34161: LD_EXP 121
34165: PPUSH
34166: CALL 80323 0 1
34170: ST_TO_ADDR
// if not list then
34171: LD_VAR 0 3
34175: NOT
34176: IFFALSE 34180
// exit ;
34178: GO 34824
// for i := 1 to list do
34180: LD_ADDR_VAR 0 1
34184: PUSH
34185: DOUBLE
34186: LD_INT 1
34188: DEC
34189: ST_TO_ADDR
34190: LD_VAR 0 3
34194: PUSH
34195: FOR_TO
34196: IFFALSE 34822
// begin depot := list [ i ] [ 2 ] ;
34198: LD_ADDR_VAR 0 8
34202: PUSH
34203: LD_VAR 0 3
34207: PUSH
34208: LD_VAR 0 1
34212: ARRAY
34213: PUSH
34214: LD_INT 2
34216: ARRAY
34217: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34218: LD_ADDR_VAR 0 5
34222: PUSH
34223: LD_VAR 0 3
34227: PUSH
34228: LD_VAR 0 1
34232: ARRAY
34233: PUSH
34234: LD_INT 1
34236: ARRAY
34237: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34238: LD_VAR 0 8
34242: PPUSH
34243: CALL_OW 301
34247: PUSH
34248: LD_VAR 0 5
34252: PUSH
34253: LD_VAR 0 8
34257: PPUSH
34258: CALL_OW 255
34262: NONEQUAL
34263: OR
34264: IFFALSE 34293
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34266: LD_ADDR_EXP 121
34270: PUSH
34271: LD_EXP 121
34275: PPUSH
34276: LD_VAR 0 8
34280: PPUSH
34281: LD_INT 0
34283: PPUSH
34284: CALL_OW 1
34288: ST_TO_ADDR
// exit ;
34289: POP
34290: POP
34291: GO 34824
// end ; x := list [ i ] [ 3 ] ;
34293: LD_ADDR_VAR 0 6
34297: PUSH
34298: LD_VAR 0 3
34302: PUSH
34303: LD_VAR 0 1
34307: ARRAY
34308: PUSH
34309: LD_INT 3
34311: ARRAY
34312: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34313: LD_ADDR_VAR 0 7
34317: PUSH
34318: LD_VAR 0 3
34322: PUSH
34323: LD_VAR 0 1
34327: ARRAY
34328: PUSH
34329: LD_INT 4
34331: ARRAY
34332: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34333: LD_ADDR_VAR 0 9
34337: PUSH
34338: LD_VAR 0 6
34342: PPUSH
34343: LD_VAR 0 7
34347: PPUSH
34348: LD_INT 16
34350: PPUSH
34351: CALL 78911 0 3
34355: ST_TO_ADDR
// if not cratesNearbyPoint then
34356: LD_VAR 0 9
34360: NOT
34361: IFFALSE 34367
// exit ;
34363: POP
34364: POP
34365: GO 34824
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34367: LD_ADDR_VAR 0 4
34371: PUSH
34372: LD_INT 22
34374: PUSH
34375: LD_VAR 0 5
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 3
34386: PUSH
34387: LD_INT 60
34389: PUSH
34390: EMPTY
34391: LIST
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 91
34399: PUSH
34400: LD_VAR 0 8
34404: PUSH
34405: LD_INT 6
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: LD_INT 25
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 25
34428: PUSH
34429: LD_INT 16
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: PPUSH
34447: CALL_OW 69
34451: PUSH
34452: LD_VAR 0 8
34456: PPUSH
34457: CALL_OW 313
34461: PPUSH
34462: LD_INT 3
34464: PUSH
34465: LD_INT 60
34467: PUSH
34468: EMPTY
34469: LIST
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: PUSH
34478: LD_INT 25
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 25
34490: PUSH
34491: LD_INT 16
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: LIST
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PPUSH
34507: CALL_OW 72
34511: UNION
34512: ST_TO_ADDR
// if tmp then
34513: LD_VAR 0 4
34517: IFFALSE 34597
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34519: LD_ADDR_VAR 0 4
34523: PUSH
34524: LD_VAR 0 4
34528: PPUSH
34529: LD_INT 3
34531: PPUSH
34532: CALL 76880 0 2
34536: ST_TO_ADDR
// for j in tmp do
34537: LD_ADDR_VAR 0 2
34541: PUSH
34542: LD_VAR 0 4
34546: PUSH
34547: FOR_IN
34548: IFFALSE 34591
// begin if IsInUnit ( j ) then
34550: LD_VAR 0 2
34554: PPUSH
34555: CALL_OW 310
34559: IFFALSE 34570
// ComExit ( j ) ;
34561: LD_VAR 0 2
34565: PPUSH
34566: CALL 76963 0 1
// AddComCollect ( j , x , y ) ;
34570: LD_VAR 0 2
34574: PPUSH
34575: LD_VAR 0 6
34579: PPUSH
34580: LD_VAR 0 7
34584: PPUSH
34585: CALL_OW 177
// end ;
34589: GO 34547
34591: POP
34592: POP
// exit ;
34593: POP
34594: POP
34595: GO 34824
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34597: LD_ADDR_VAR 0 4
34601: PUSH
34602: LD_INT 22
34604: PUSH
34605: LD_VAR 0 5
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 91
34616: PUSH
34617: LD_VAR 0 8
34621: PUSH
34622: LD_INT 8
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: LD_INT 34
34635: PUSH
34636: LD_INT 12
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 34
34645: PUSH
34646: LD_INT 51
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 34
34655: PUSH
34656: LD_INT 32
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 34
34665: PUSH
34666: LD_INT 89
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: PPUSH
34685: CALL_OW 69
34689: ST_TO_ADDR
// if tmp then
34690: LD_VAR 0 4
34694: IFFALSE 34820
// begin for j in tmp do
34696: LD_ADDR_VAR 0 2
34700: PUSH
34701: LD_VAR 0 4
34705: PUSH
34706: FOR_IN
34707: IFFALSE 34818
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34709: LD_VAR 0 2
34713: PPUSH
34714: CALL_OW 262
34718: PUSH
34719: LD_INT 3
34721: EQUAL
34722: PUSH
34723: LD_VAR 0 2
34727: PPUSH
34728: CALL_OW 261
34732: PUSH
34733: LD_INT 20
34735: GREATER
34736: OR
34737: PUSH
34738: LD_VAR 0 2
34742: PPUSH
34743: CALL_OW 314
34747: NOT
34748: AND
34749: PUSH
34750: LD_VAR 0 2
34754: PPUSH
34755: CALL_OW 263
34759: PUSH
34760: LD_INT 1
34762: NONEQUAL
34763: PUSH
34764: LD_VAR 0 2
34768: PPUSH
34769: CALL_OW 311
34773: OR
34774: AND
34775: IFFALSE 34816
// begin ComCollect ( j , x , y ) ;
34777: LD_VAR 0 2
34781: PPUSH
34782: LD_VAR 0 6
34786: PPUSH
34787: LD_VAR 0 7
34791: PPUSH
34792: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34796: LD_VAR 0 2
34800: PPUSH
34801: LD_VAR 0 8
34805: PPUSH
34806: CALL_OW 172
// exit ;
34810: POP
34811: POP
34812: POP
34813: POP
34814: GO 34824
// end ;
34816: GO 34706
34818: POP
34819: POP
// end ; end ;
34820: GO 34195
34822: POP
34823: POP
// end ; end_of_file
34824: PPOPN 9
34826: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34827: LD_INT 0
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34833: LD_VAR 0 1
34837: PPUSH
34838: CALL_OW 264
34842: PUSH
34843: LD_INT 91
34845: EQUAL
34846: IFFALSE 34918
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34848: LD_INT 68
34850: PPUSH
34851: LD_VAR 0 1
34855: PPUSH
34856: CALL_OW 255
34860: PPUSH
34861: CALL_OW 321
34865: PUSH
34866: LD_INT 2
34868: EQUAL
34869: IFFALSE 34881
// eff := 70 else
34871: LD_ADDR_VAR 0 4
34875: PUSH
34876: LD_INT 70
34878: ST_TO_ADDR
34879: GO 34889
// eff := 30 ;
34881: LD_ADDR_VAR 0 4
34885: PUSH
34886: LD_INT 30
34888: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34889: LD_VAR 0 1
34893: PPUSH
34894: CALL_OW 250
34898: PPUSH
34899: LD_VAR 0 1
34903: PPUSH
34904: CALL_OW 251
34908: PPUSH
34909: LD_VAR 0 4
34913: PPUSH
34914: CALL_OW 495
// end ; end ;
34918: LD_VAR 0 2
34922: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34923: LD_INT 0
34925: PPUSH
// end ;
34926: LD_VAR 0 4
34930: RET
// export function SOS_Command ( cmd ) ; begin
34931: LD_INT 0
34933: PPUSH
// end ;
34934: LD_VAR 0 2
34938: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34939: LD_INT 0
34941: PPUSH
// end ;
34942: LD_VAR 0 6
34946: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
// if not vehicle or not factory then
34951: LD_VAR 0 1
34955: NOT
34956: PUSH
34957: LD_VAR 0 2
34961: NOT
34962: OR
34963: IFFALSE 34967
// exit ;
34965: GO 35198
// if factoryWaypoints >= factory then
34967: LD_EXP 120
34971: PUSH
34972: LD_VAR 0 2
34976: GREATEREQUAL
34977: IFFALSE 35198
// if factoryWaypoints [ factory ] then
34979: LD_EXP 120
34983: PUSH
34984: LD_VAR 0 2
34988: ARRAY
34989: IFFALSE 35198
// begin if GetControl ( vehicle ) = control_manual then
34991: LD_VAR 0 1
34995: PPUSH
34996: CALL_OW 263
35000: PUSH
35001: LD_INT 1
35003: EQUAL
35004: IFFALSE 35085
// begin driver := IsDrivenBy ( vehicle ) ;
35006: LD_ADDR_VAR 0 4
35010: PUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: CALL_OW 311
35020: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35021: LD_VAR 0 4
35025: PPUSH
35026: LD_EXP 120
35030: PUSH
35031: LD_VAR 0 2
35035: ARRAY
35036: PUSH
35037: LD_INT 3
35039: ARRAY
35040: PPUSH
35041: LD_EXP 120
35045: PUSH
35046: LD_VAR 0 2
35050: ARRAY
35051: PUSH
35052: LD_INT 4
35054: ARRAY
35055: PPUSH
35056: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35060: LD_VAR 0 4
35064: PPUSH
35065: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35069: LD_VAR 0 4
35073: PPUSH
35074: LD_VAR 0 2
35078: PPUSH
35079: CALL_OW 180
// end else
35083: GO 35198
// if GetControl ( vehicle ) = control_remote then
35085: LD_VAR 0 1
35089: PPUSH
35090: CALL_OW 263
35094: PUSH
35095: LD_INT 2
35097: EQUAL
35098: IFFALSE 35159
// begin wait ( 0 0$2 ) ;
35100: LD_INT 70
35102: PPUSH
35103: CALL_OW 67
// if Connect ( vehicle ) then
35107: LD_VAR 0 1
35111: PPUSH
35112: CALL 47222 0 1
35116: IFFALSE 35157
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35118: LD_VAR 0 1
35122: PPUSH
35123: LD_EXP 120
35127: PUSH
35128: LD_VAR 0 2
35132: ARRAY
35133: PUSH
35134: LD_INT 3
35136: ARRAY
35137: PPUSH
35138: LD_EXP 120
35142: PUSH
35143: LD_VAR 0 2
35147: ARRAY
35148: PUSH
35149: LD_INT 4
35151: ARRAY
35152: PPUSH
35153: CALL_OW 171
// end else
35157: GO 35198
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35159: LD_VAR 0 1
35163: PPUSH
35164: LD_EXP 120
35168: PUSH
35169: LD_VAR 0 2
35173: ARRAY
35174: PUSH
35175: LD_INT 3
35177: ARRAY
35178: PPUSH
35179: LD_EXP 120
35183: PUSH
35184: LD_VAR 0 2
35188: ARRAY
35189: PUSH
35190: LD_INT 4
35192: ARRAY
35193: PPUSH
35194: CALL_OW 171
// end ; end ;
35198: LD_VAR 0 3
35202: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35203: LD_INT 0
35205: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35206: LD_VAR 0 1
35210: PUSH
35211: LD_INT 250
35213: EQUAL
35214: PUSH
35215: LD_VAR 0 2
35219: PPUSH
35220: CALL_OW 264
35224: PUSH
35225: LD_INT 81
35227: EQUAL
35228: AND
35229: IFFALSE 35250
// MinerPlaceMine ( unit , x , y ) ;
35231: LD_VAR 0 2
35235: PPUSH
35236: LD_VAR 0 4
35240: PPUSH
35241: LD_VAR 0 5
35245: PPUSH
35246: CALL 37635 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35250: LD_VAR 0 1
35254: PUSH
35255: LD_INT 251
35257: EQUAL
35258: PUSH
35259: LD_VAR 0 2
35263: PPUSH
35264: CALL_OW 264
35268: PUSH
35269: LD_INT 81
35271: EQUAL
35272: AND
35273: IFFALSE 35294
// MinerDetonateMine ( unit , x , y ) ;
35275: LD_VAR 0 2
35279: PPUSH
35280: LD_VAR 0 4
35284: PPUSH
35285: LD_VAR 0 5
35289: PPUSH
35290: CALL 37910 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35294: LD_VAR 0 1
35298: PUSH
35299: LD_INT 252
35301: EQUAL
35302: PUSH
35303: LD_VAR 0 2
35307: PPUSH
35308: CALL_OW 264
35312: PUSH
35313: LD_INT 81
35315: EQUAL
35316: AND
35317: IFFALSE 35338
// MinerCreateMinefield ( unit , x , y ) ;
35319: LD_VAR 0 2
35323: PPUSH
35324: LD_VAR 0 4
35328: PPUSH
35329: LD_VAR 0 5
35333: PPUSH
35334: CALL 38327 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35338: LD_VAR 0 1
35342: PUSH
35343: LD_INT 253
35345: EQUAL
35346: PUSH
35347: LD_VAR 0 2
35351: PPUSH
35352: CALL_OW 257
35356: PUSH
35357: LD_INT 5
35359: EQUAL
35360: AND
35361: IFFALSE 35382
// ComBinocular ( unit , x , y ) ;
35363: LD_VAR 0 2
35367: PPUSH
35368: LD_VAR 0 4
35372: PPUSH
35373: LD_VAR 0 5
35377: PPUSH
35378: CALL 38696 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35382: LD_VAR 0 1
35386: PUSH
35387: LD_INT 254
35389: EQUAL
35390: PUSH
35391: LD_VAR 0 2
35395: PPUSH
35396: CALL_OW 264
35400: PUSH
35401: LD_INT 99
35403: EQUAL
35404: AND
35405: PUSH
35406: LD_VAR 0 3
35410: PPUSH
35411: CALL_OW 263
35415: PUSH
35416: LD_INT 3
35418: EQUAL
35419: AND
35420: IFFALSE 35436
// HackDestroyVehicle ( unit , selectedUnit ) ;
35422: LD_VAR 0 2
35426: PPUSH
35427: LD_VAR 0 3
35431: PPUSH
35432: CALL 36999 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35436: LD_VAR 0 1
35440: PUSH
35441: LD_INT 255
35443: EQUAL
35444: PUSH
35445: LD_VAR 0 2
35449: PPUSH
35450: CALL_OW 264
35454: PUSH
35455: LD_INT 14
35457: PUSH
35458: LD_INT 53
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: IN
35465: AND
35466: PUSH
35467: LD_VAR 0 4
35471: PPUSH
35472: LD_VAR 0 5
35476: PPUSH
35477: CALL_OW 488
35481: AND
35482: IFFALSE 35506
// CutTreeXYR ( unit , x , y , 12 ) ;
35484: LD_VAR 0 2
35488: PPUSH
35489: LD_VAR 0 4
35493: PPUSH
35494: LD_VAR 0 5
35498: PPUSH
35499: LD_INT 12
35501: PPUSH
35502: CALL 35569 0 4
// if cmd = 256 then
35506: LD_VAR 0 1
35510: PUSH
35511: LD_INT 256
35513: EQUAL
35514: IFFALSE 35535
// SetFactoryWaypoint ( unit , x , y ) ;
35516: LD_VAR 0 2
35520: PPUSH
35521: LD_VAR 0 4
35525: PPUSH
35526: LD_VAR 0 5
35530: PPUSH
35531: CALL 33516 0 3
// if cmd = 257 then
35535: LD_VAR 0 1
35539: PUSH
35540: LD_INT 257
35542: EQUAL
35543: IFFALSE 35564
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35545: LD_VAR 0 2
35549: PPUSH
35550: LD_VAR 0 4
35554: PPUSH
35555: LD_VAR 0 5
35559: PPUSH
35560: CALL 33878 0 3
// end ;
35564: LD_VAR 0 6
35568: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35569: LD_INT 0
35571: PPUSH
35572: PPUSH
35573: PPUSH
35574: PPUSH
35575: PPUSH
35576: PPUSH
35577: PPUSH
35578: PPUSH
35579: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35580: LD_VAR 0 1
35584: NOT
35585: PUSH
35586: LD_VAR 0 2
35590: PPUSH
35591: LD_VAR 0 3
35595: PPUSH
35596: CALL_OW 488
35600: NOT
35601: OR
35602: PUSH
35603: LD_VAR 0 4
35607: NOT
35608: OR
35609: IFFALSE 35613
// exit ;
35611: GO 35953
// list := [ ] ;
35613: LD_ADDR_VAR 0 13
35617: PUSH
35618: EMPTY
35619: ST_TO_ADDR
// if x - r < 0 then
35620: LD_VAR 0 2
35624: PUSH
35625: LD_VAR 0 4
35629: MINUS
35630: PUSH
35631: LD_INT 0
35633: LESS
35634: IFFALSE 35646
// min_x := 0 else
35636: LD_ADDR_VAR 0 7
35640: PUSH
35641: LD_INT 0
35643: ST_TO_ADDR
35644: GO 35662
// min_x := x - r ;
35646: LD_ADDR_VAR 0 7
35650: PUSH
35651: LD_VAR 0 2
35655: PUSH
35656: LD_VAR 0 4
35660: MINUS
35661: ST_TO_ADDR
// if y - r < 0 then
35662: LD_VAR 0 3
35666: PUSH
35667: LD_VAR 0 4
35671: MINUS
35672: PUSH
35673: LD_INT 0
35675: LESS
35676: IFFALSE 35688
// min_y := 0 else
35678: LD_ADDR_VAR 0 8
35682: PUSH
35683: LD_INT 0
35685: ST_TO_ADDR
35686: GO 35704
// min_y := y - r ;
35688: LD_ADDR_VAR 0 8
35692: PUSH
35693: LD_VAR 0 3
35697: PUSH
35698: LD_VAR 0 4
35702: MINUS
35703: ST_TO_ADDR
// max_x := x + r ;
35704: LD_ADDR_VAR 0 9
35708: PUSH
35709: LD_VAR 0 2
35713: PUSH
35714: LD_VAR 0 4
35718: PLUS
35719: ST_TO_ADDR
// max_y := y + r ;
35720: LD_ADDR_VAR 0 10
35724: PUSH
35725: LD_VAR 0 3
35729: PUSH
35730: LD_VAR 0 4
35734: PLUS
35735: ST_TO_ADDR
// for _x = min_x to max_x do
35736: LD_ADDR_VAR 0 11
35740: PUSH
35741: DOUBLE
35742: LD_VAR 0 7
35746: DEC
35747: ST_TO_ADDR
35748: LD_VAR 0 9
35752: PUSH
35753: FOR_TO
35754: IFFALSE 35871
// for _y = min_y to max_y do
35756: LD_ADDR_VAR 0 12
35760: PUSH
35761: DOUBLE
35762: LD_VAR 0 8
35766: DEC
35767: ST_TO_ADDR
35768: LD_VAR 0 10
35772: PUSH
35773: FOR_TO
35774: IFFALSE 35867
// begin if not ValidHex ( _x , _y ) then
35776: LD_VAR 0 11
35780: PPUSH
35781: LD_VAR 0 12
35785: PPUSH
35786: CALL_OW 488
35790: NOT
35791: IFFALSE 35795
// continue ;
35793: GO 35773
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35795: LD_VAR 0 11
35799: PPUSH
35800: LD_VAR 0 12
35804: PPUSH
35805: CALL_OW 351
35809: PUSH
35810: LD_VAR 0 11
35814: PPUSH
35815: LD_VAR 0 12
35819: PPUSH
35820: CALL_OW 554
35824: AND
35825: IFFALSE 35865
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35827: LD_ADDR_VAR 0 13
35831: PUSH
35832: LD_VAR 0 13
35836: PPUSH
35837: LD_VAR 0 13
35841: PUSH
35842: LD_INT 1
35844: PLUS
35845: PPUSH
35846: LD_VAR 0 11
35850: PUSH
35851: LD_VAR 0 12
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PPUSH
35860: CALL_OW 2
35864: ST_TO_ADDR
// end ;
35865: GO 35773
35867: POP
35868: POP
35869: GO 35753
35871: POP
35872: POP
// if not list then
35873: LD_VAR 0 13
35877: NOT
35878: IFFALSE 35882
// exit ;
35880: GO 35953
// for i in list do
35882: LD_ADDR_VAR 0 6
35886: PUSH
35887: LD_VAR 0 13
35891: PUSH
35892: FOR_IN
35893: IFFALSE 35951
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35895: LD_VAR 0 1
35899: PPUSH
35900: LD_STRING M
35902: PUSH
35903: LD_VAR 0 6
35907: PUSH
35908: LD_INT 1
35910: ARRAY
35911: PUSH
35912: LD_VAR 0 6
35916: PUSH
35917: LD_INT 2
35919: ARRAY
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: PUSH
35942: EMPTY
35943: LIST
35944: PPUSH
35945: CALL_OW 447
35949: GO 35892
35951: POP
35952: POP
// end ;
35953: LD_VAR 0 5
35957: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35958: LD_EXP 123
35962: NOT
35963: IFFALSE 36013
35965: GO 35967
35967: DISABLE
// begin initHack := true ;
35968: LD_ADDR_EXP 123
35972: PUSH
35973: LD_INT 1
35975: ST_TO_ADDR
// hackTanks := [ ] ;
35976: LD_ADDR_EXP 124
35980: PUSH
35981: EMPTY
35982: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35983: LD_ADDR_EXP 125
35987: PUSH
35988: EMPTY
35989: ST_TO_ADDR
// hackLimit := 3 ;
35990: LD_ADDR_EXP 126
35994: PUSH
35995: LD_INT 3
35997: ST_TO_ADDR
// hackDist := 12 ;
35998: LD_ADDR_EXP 127
36002: PUSH
36003: LD_INT 12
36005: ST_TO_ADDR
// hackCounter := [ ] ;
36006: LD_ADDR_EXP 128
36010: PUSH
36011: EMPTY
36012: ST_TO_ADDR
// end ;
36013: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36014: LD_EXP 123
36018: PUSH
36019: LD_INT 34
36021: PUSH
36022: LD_INT 99
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PPUSH
36029: CALL_OW 69
36033: AND
36034: IFFALSE 36287
36036: GO 36038
36038: DISABLE
36039: LD_INT 0
36041: PPUSH
36042: PPUSH
// begin enable ;
36043: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36044: LD_ADDR_VAR 0 1
36048: PUSH
36049: LD_INT 34
36051: PUSH
36052: LD_INT 99
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PPUSH
36059: CALL_OW 69
36063: PUSH
36064: FOR_IN
36065: IFFALSE 36285
// begin if not i in hackTanks then
36067: LD_VAR 0 1
36071: PUSH
36072: LD_EXP 124
36076: IN
36077: NOT
36078: IFFALSE 36161
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36080: LD_ADDR_EXP 124
36084: PUSH
36085: LD_EXP 124
36089: PPUSH
36090: LD_EXP 124
36094: PUSH
36095: LD_INT 1
36097: PLUS
36098: PPUSH
36099: LD_VAR 0 1
36103: PPUSH
36104: CALL_OW 1
36108: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36109: LD_ADDR_EXP 125
36113: PUSH
36114: LD_EXP 125
36118: PPUSH
36119: LD_EXP 125
36123: PUSH
36124: LD_INT 1
36126: PLUS
36127: PPUSH
36128: EMPTY
36129: PPUSH
36130: CALL_OW 1
36134: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36135: LD_ADDR_EXP 128
36139: PUSH
36140: LD_EXP 128
36144: PPUSH
36145: LD_EXP 128
36149: PUSH
36150: LD_INT 1
36152: PLUS
36153: PPUSH
36154: EMPTY
36155: PPUSH
36156: CALL_OW 1
36160: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36161: LD_VAR 0 1
36165: PPUSH
36166: CALL_OW 302
36170: NOT
36171: IFFALSE 36184
// begin HackUnlinkAll ( i ) ;
36173: LD_VAR 0 1
36177: PPUSH
36178: CALL 36290 0 1
// continue ;
36182: GO 36064
// end ; HackCheckCapturedStatus ( i ) ;
36184: LD_VAR 0 1
36188: PPUSH
36189: CALL 36733 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_INT 81
36200: PUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: CALL_OW 255
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 33
36217: PUSH
36218: LD_INT 3
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 91
36227: PUSH
36228: LD_VAR 0 1
36232: PUSH
36233: LD_EXP 127
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 50
36245: PUSH
36246: EMPTY
36247: LIST
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: PPUSH
36255: CALL_OW 69
36259: ST_TO_ADDR
// if not tmp then
36260: LD_VAR 0 2
36264: NOT
36265: IFFALSE 36269
// continue ;
36267: GO 36064
// HackLink ( i , tmp ) ;
36269: LD_VAR 0 1
36273: PPUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: CALL 36426 0 2
// end ;
36283: GO 36064
36285: POP
36286: POP
// end ;
36287: PPOPN 2
36289: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36290: LD_INT 0
36292: PPUSH
36293: PPUSH
36294: PPUSH
// if not hack in hackTanks then
36295: LD_VAR 0 1
36299: PUSH
36300: LD_EXP 124
36304: IN
36305: NOT
36306: IFFALSE 36310
// exit ;
36308: GO 36421
// index := GetElementIndex ( hackTanks , hack ) ;
36310: LD_ADDR_VAR 0 4
36314: PUSH
36315: LD_EXP 124
36319: PPUSH
36320: LD_VAR 0 1
36324: PPUSH
36325: CALL 44038 0 2
36329: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36330: LD_EXP 125
36334: PUSH
36335: LD_VAR 0 4
36339: ARRAY
36340: IFFALSE 36421
// begin for i in hackTanksCaptured [ index ] do
36342: LD_ADDR_VAR 0 3
36346: PUSH
36347: LD_EXP 125
36351: PUSH
36352: LD_VAR 0 4
36356: ARRAY
36357: PUSH
36358: FOR_IN
36359: IFFALSE 36385
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36361: LD_VAR 0 3
36365: PUSH
36366: LD_INT 1
36368: ARRAY
36369: PPUSH
36370: LD_VAR 0 3
36374: PUSH
36375: LD_INT 2
36377: ARRAY
36378: PPUSH
36379: CALL_OW 235
36383: GO 36358
36385: POP
36386: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36387: LD_ADDR_EXP 125
36391: PUSH
36392: LD_EXP 125
36396: PPUSH
36397: LD_VAR 0 4
36401: PPUSH
36402: EMPTY
36403: PPUSH
36404: CALL_OW 1
36408: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36409: LD_VAR 0 1
36413: PPUSH
36414: LD_INT 0
36416: PPUSH
36417: CALL_OW 505
// end ; end ;
36421: LD_VAR 0 2
36425: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36426: LD_INT 0
36428: PPUSH
36429: PPUSH
36430: PPUSH
// if not hack in hackTanks or not vehicles then
36431: LD_VAR 0 1
36435: PUSH
36436: LD_EXP 124
36440: IN
36441: NOT
36442: PUSH
36443: LD_VAR 0 2
36447: NOT
36448: OR
36449: IFFALSE 36453
// exit ;
36451: GO 36728
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36453: LD_ADDR_VAR 0 2
36457: PUSH
36458: LD_VAR 0 1
36462: PPUSH
36463: LD_VAR 0 2
36467: PPUSH
36468: LD_INT 1
36470: PPUSH
36471: LD_INT 1
36473: PPUSH
36474: CALL 44688 0 4
36478: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36479: LD_ADDR_VAR 0 5
36483: PUSH
36484: LD_EXP 124
36488: PPUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL 44038 0 2
36498: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36499: LD_EXP 125
36503: PUSH
36504: LD_VAR 0 5
36508: ARRAY
36509: PUSH
36510: LD_EXP 126
36514: LESS
36515: IFFALSE 36704
// begin for i := 1 to vehicles do
36517: LD_ADDR_VAR 0 4
36521: PUSH
36522: DOUBLE
36523: LD_INT 1
36525: DEC
36526: ST_TO_ADDR
36527: LD_VAR 0 2
36531: PUSH
36532: FOR_TO
36533: IFFALSE 36702
// begin if hackTanksCaptured [ index ] = hackLimit then
36535: LD_EXP 125
36539: PUSH
36540: LD_VAR 0 5
36544: ARRAY
36545: PUSH
36546: LD_EXP 126
36550: EQUAL
36551: IFFALSE 36555
// break ;
36553: GO 36702
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36555: LD_ADDR_EXP 128
36559: PUSH
36560: LD_EXP 128
36564: PPUSH
36565: LD_VAR 0 5
36569: PPUSH
36570: LD_EXP 128
36574: PUSH
36575: LD_VAR 0 5
36579: ARRAY
36580: PUSH
36581: LD_INT 1
36583: PLUS
36584: PPUSH
36585: CALL_OW 1
36589: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36590: LD_ADDR_EXP 125
36594: PUSH
36595: LD_EXP 125
36599: PPUSH
36600: LD_VAR 0 5
36604: PUSH
36605: LD_EXP 125
36609: PUSH
36610: LD_VAR 0 5
36614: ARRAY
36615: PUSH
36616: LD_INT 1
36618: PLUS
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PPUSH
36624: LD_VAR 0 2
36628: PUSH
36629: LD_VAR 0 4
36633: ARRAY
36634: PUSH
36635: LD_VAR 0 2
36639: PUSH
36640: LD_VAR 0 4
36644: ARRAY
36645: PPUSH
36646: CALL_OW 255
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PPUSH
36655: CALL 44253 0 3
36659: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36660: LD_VAR 0 2
36664: PUSH
36665: LD_VAR 0 4
36669: ARRAY
36670: PPUSH
36671: LD_VAR 0 1
36675: PPUSH
36676: CALL_OW 255
36680: PPUSH
36681: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36685: LD_VAR 0 2
36689: PUSH
36690: LD_VAR 0 4
36694: ARRAY
36695: PPUSH
36696: CALL_OW 141
// end ;
36700: GO 36532
36702: POP
36703: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36704: LD_VAR 0 1
36708: PPUSH
36709: LD_EXP 125
36713: PUSH
36714: LD_VAR 0 5
36718: ARRAY
36719: PUSH
36720: LD_INT 0
36722: PLUS
36723: PPUSH
36724: CALL_OW 505
// end ;
36728: LD_VAR 0 3
36732: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36733: LD_INT 0
36735: PPUSH
36736: PPUSH
36737: PPUSH
36738: PPUSH
// if not hack in hackTanks then
36739: LD_VAR 0 1
36743: PUSH
36744: LD_EXP 124
36748: IN
36749: NOT
36750: IFFALSE 36754
// exit ;
36752: GO 36994
// index := GetElementIndex ( hackTanks , hack ) ;
36754: LD_ADDR_VAR 0 4
36758: PUSH
36759: LD_EXP 124
36763: PPUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL 44038 0 2
36773: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: DOUBLE
36780: LD_EXP 125
36784: PUSH
36785: LD_VAR 0 4
36789: ARRAY
36790: INC
36791: ST_TO_ADDR
36792: LD_INT 1
36794: PUSH
36795: FOR_DOWNTO
36796: IFFALSE 36968
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36798: LD_ADDR_VAR 0 5
36802: PUSH
36803: LD_EXP 125
36807: PUSH
36808: LD_VAR 0 4
36812: ARRAY
36813: PUSH
36814: LD_VAR 0 3
36818: ARRAY
36819: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36820: LD_VAR 0 5
36824: PUSH
36825: LD_INT 1
36827: ARRAY
36828: PPUSH
36829: CALL_OW 302
36833: NOT
36834: PUSH
36835: LD_VAR 0 5
36839: PUSH
36840: LD_INT 1
36842: ARRAY
36843: PPUSH
36844: CALL_OW 255
36848: PUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: CALL_OW 255
36858: NONEQUAL
36859: OR
36860: IFFALSE 36966
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36862: LD_VAR 0 5
36866: PUSH
36867: LD_INT 1
36869: ARRAY
36870: PPUSH
36871: CALL_OW 305
36875: PUSH
36876: LD_VAR 0 5
36880: PUSH
36881: LD_INT 1
36883: ARRAY
36884: PPUSH
36885: CALL_OW 255
36889: PUSH
36890: LD_VAR 0 1
36894: PPUSH
36895: CALL_OW 255
36899: EQUAL
36900: AND
36901: IFFALSE 36925
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36903: LD_VAR 0 5
36907: PUSH
36908: LD_INT 1
36910: ARRAY
36911: PPUSH
36912: LD_VAR 0 5
36916: PUSH
36917: LD_INT 2
36919: ARRAY
36920: PPUSH
36921: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36925: LD_ADDR_EXP 125
36929: PUSH
36930: LD_EXP 125
36934: PPUSH
36935: LD_VAR 0 4
36939: PPUSH
36940: LD_EXP 125
36944: PUSH
36945: LD_VAR 0 4
36949: ARRAY
36950: PPUSH
36951: LD_VAR 0 3
36955: PPUSH
36956: CALL_OW 3
36960: PPUSH
36961: CALL_OW 1
36965: ST_TO_ADDR
// end ; end ;
36966: GO 36795
36968: POP
36969: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36970: LD_VAR 0 1
36974: PPUSH
36975: LD_EXP 125
36979: PUSH
36980: LD_VAR 0 4
36984: ARRAY
36985: PUSH
36986: LD_INT 0
36988: PLUS
36989: PPUSH
36990: CALL_OW 505
// end ;
36994: LD_VAR 0 2
36998: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36999: LD_INT 0
37001: PPUSH
37002: PPUSH
37003: PPUSH
37004: PPUSH
// if not hack in hackTanks then
37005: LD_VAR 0 1
37009: PUSH
37010: LD_EXP 124
37014: IN
37015: NOT
37016: IFFALSE 37020
// exit ;
37018: GO 37105
// index := GetElementIndex ( hackTanks , hack ) ;
37020: LD_ADDR_VAR 0 5
37024: PUSH
37025: LD_EXP 124
37029: PPUSH
37030: LD_VAR 0 1
37034: PPUSH
37035: CALL 44038 0 2
37039: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37040: LD_ADDR_VAR 0 4
37044: PUSH
37045: DOUBLE
37046: LD_INT 1
37048: DEC
37049: ST_TO_ADDR
37050: LD_EXP 125
37054: PUSH
37055: LD_VAR 0 5
37059: ARRAY
37060: PUSH
37061: FOR_TO
37062: IFFALSE 37103
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37064: LD_EXP 125
37068: PUSH
37069: LD_VAR 0 5
37073: ARRAY
37074: PUSH
37075: LD_VAR 0 4
37079: ARRAY
37080: PUSH
37081: LD_INT 1
37083: ARRAY
37084: PUSH
37085: LD_VAR 0 2
37089: EQUAL
37090: IFFALSE 37101
// KillUnit ( vehicle ) ;
37092: LD_VAR 0 2
37096: PPUSH
37097: CALL_OW 66
37101: GO 37061
37103: POP
37104: POP
// end ;
37105: LD_VAR 0 3
37109: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37110: LD_EXP 129
37114: NOT
37115: IFFALSE 37150
37117: GO 37119
37119: DISABLE
// begin initMiner := true ;
37120: LD_ADDR_EXP 129
37124: PUSH
37125: LD_INT 1
37127: ST_TO_ADDR
// minersList := [ ] ;
37128: LD_ADDR_EXP 130
37132: PUSH
37133: EMPTY
37134: ST_TO_ADDR
// minerMinesList := [ ] ;
37135: LD_ADDR_EXP 131
37139: PUSH
37140: EMPTY
37141: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37142: LD_ADDR_EXP 132
37146: PUSH
37147: LD_INT 5
37149: ST_TO_ADDR
// end ;
37150: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37151: LD_EXP 129
37155: PUSH
37156: LD_INT 34
37158: PUSH
37159: LD_INT 81
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PPUSH
37166: CALL_OW 69
37170: AND
37171: IFFALSE 37632
37173: GO 37175
37175: DISABLE
37176: LD_INT 0
37178: PPUSH
37179: PPUSH
37180: PPUSH
37181: PPUSH
// begin enable ;
37182: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37183: LD_ADDR_VAR 0 1
37187: PUSH
37188: LD_INT 34
37190: PUSH
37191: LD_INT 81
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PPUSH
37198: CALL_OW 69
37202: PUSH
37203: FOR_IN
37204: IFFALSE 37276
// begin if not i in minersList then
37206: LD_VAR 0 1
37210: PUSH
37211: LD_EXP 130
37215: IN
37216: NOT
37217: IFFALSE 37274
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37219: LD_ADDR_EXP 130
37223: PUSH
37224: LD_EXP 130
37228: PPUSH
37229: LD_EXP 130
37233: PUSH
37234: LD_INT 1
37236: PLUS
37237: PPUSH
37238: LD_VAR 0 1
37242: PPUSH
37243: CALL_OW 1
37247: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37248: LD_ADDR_EXP 131
37252: PUSH
37253: LD_EXP 131
37257: PPUSH
37258: LD_EXP 131
37262: PUSH
37263: LD_INT 1
37265: PLUS
37266: PPUSH
37267: EMPTY
37268: PPUSH
37269: CALL_OW 1
37273: ST_TO_ADDR
// end end ;
37274: GO 37203
37276: POP
37277: POP
// for i := minerMinesList downto 1 do
37278: LD_ADDR_VAR 0 1
37282: PUSH
37283: DOUBLE
37284: LD_EXP 131
37288: INC
37289: ST_TO_ADDR
37290: LD_INT 1
37292: PUSH
37293: FOR_DOWNTO
37294: IFFALSE 37630
// begin if IsLive ( minersList [ i ] ) then
37296: LD_EXP 130
37300: PUSH
37301: LD_VAR 0 1
37305: ARRAY
37306: PPUSH
37307: CALL_OW 300
37311: IFFALSE 37339
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37313: LD_EXP 130
37317: PUSH
37318: LD_VAR 0 1
37322: ARRAY
37323: PPUSH
37324: LD_EXP 131
37328: PUSH
37329: LD_VAR 0 1
37333: ARRAY
37334: PPUSH
37335: CALL_OW 505
// if not minerMinesList [ i ] then
37339: LD_EXP 131
37343: PUSH
37344: LD_VAR 0 1
37348: ARRAY
37349: NOT
37350: IFFALSE 37354
// continue ;
37352: GO 37293
// for j := minerMinesList [ i ] downto 1 do
37354: LD_ADDR_VAR 0 2
37358: PUSH
37359: DOUBLE
37360: LD_EXP 131
37364: PUSH
37365: LD_VAR 0 1
37369: ARRAY
37370: INC
37371: ST_TO_ADDR
37372: LD_INT 1
37374: PUSH
37375: FOR_DOWNTO
37376: IFFALSE 37626
// begin side := GetSide ( minersList [ i ] ) ;
37378: LD_ADDR_VAR 0 3
37382: PUSH
37383: LD_EXP 130
37387: PUSH
37388: LD_VAR 0 1
37392: ARRAY
37393: PPUSH
37394: CALL_OW 255
37398: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37399: LD_ADDR_VAR 0 4
37403: PUSH
37404: LD_EXP 131
37408: PUSH
37409: LD_VAR 0 1
37413: ARRAY
37414: PUSH
37415: LD_VAR 0 2
37419: ARRAY
37420: PUSH
37421: LD_INT 1
37423: ARRAY
37424: PPUSH
37425: LD_EXP 131
37429: PUSH
37430: LD_VAR 0 1
37434: ARRAY
37435: PUSH
37436: LD_VAR 0 2
37440: ARRAY
37441: PUSH
37442: LD_INT 2
37444: ARRAY
37445: PPUSH
37446: CALL_OW 428
37450: ST_TO_ADDR
// if not tmp then
37451: LD_VAR 0 4
37455: NOT
37456: IFFALSE 37460
// continue ;
37458: GO 37375
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37460: LD_VAR 0 4
37464: PUSH
37465: LD_INT 81
37467: PUSH
37468: LD_VAR 0 3
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PPUSH
37477: CALL_OW 69
37481: IN
37482: PUSH
37483: LD_EXP 131
37487: PUSH
37488: LD_VAR 0 1
37492: ARRAY
37493: PUSH
37494: LD_VAR 0 2
37498: ARRAY
37499: PUSH
37500: LD_INT 1
37502: ARRAY
37503: PPUSH
37504: LD_EXP 131
37508: PUSH
37509: LD_VAR 0 1
37513: ARRAY
37514: PUSH
37515: LD_VAR 0 2
37519: ARRAY
37520: PUSH
37521: LD_INT 2
37523: ARRAY
37524: PPUSH
37525: CALL_OW 458
37529: AND
37530: IFFALSE 37624
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37532: LD_EXP 131
37536: PUSH
37537: LD_VAR 0 1
37541: ARRAY
37542: PUSH
37543: LD_VAR 0 2
37547: ARRAY
37548: PUSH
37549: LD_INT 1
37551: ARRAY
37552: PPUSH
37553: LD_EXP 131
37557: PUSH
37558: LD_VAR 0 1
37562: ARRAY
37563: PUSH
37564: LD_VAR 0 2
37568: ARRAY
37569: PUSH
37570: LD_INT 2
37572: ARRAY
37573: PPUSH
37574: LD_VAR 0 3
37578: PPUSH
37579: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37583: LD_ADDR_EXP 131
37587: PUSH
37588: LD_EXP 131
37592: PPUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: LD_EXP 131
37602: PUSH
37603: LD_VAR 0 1
37607: ARRAY
37608: PPUSH
37609: LD_VAR 0 2
37613: PPUSH
37614: CALL_OW 3
37618: PPUSH
37619: CALL_OW 1
37623: ST_TO_ADDR
// end ; end ;
37624: GO 37375
37626: POP
37627: POP
// end ;
37628: GO 37293
37630: POP
37631: POP
// end ;
37632: PPOPN 4
37634: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37635: LD_INT 0
37637: PPUSH
37638: PPUSH
// result := false ;
37639: LD_ADDR_VAR 0 4
37643: PUSH
37644: LD_INT 0
37646: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37647: LD_VAR 0 1
37651: PPUSH
37652: CALL_OW 264
37656: PUSH
37657: LD_INT 81
37659: EQUAL
37660: NOT
37661: IFFALSE 37665
// exit ;
37663: GO 37905
// index := GetElementIndex ( minersList , unit ) ;
37665: LD_ADDR_VAR 0 5
37669: PUSH
37670: LD_EXP 130
37674: PPUSH
37675: LD_VAR 0 1
37679: PPUSH
37680: CALL 44038 0 2
37684: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37685: LD_EXP 131
37689: PUSH
37690: LD_VAR 0 5
37694: ARRAY
37695: PUSH
37696: LD_EXP 132
37700: GREATEREQUAL
37701: IFFALSE 37705
// exit ;
37703: GO 37905
// ComMoveXY ( unit , x , y ) ;
37705: LD_VAR 0 1
37709: PPUSH
37710: LD_VAR 0 2
37714: PPUSH
37715: LD_VAR 0 3
37719: PPUSH
37720: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37724: LD_INT 35
37726: PPUSH
37727: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37731: LD_VAR 0 1
37735: PPUSH
37736: LD_VAR 0 2
37740: PPUSH
37741: LD_VAR 0 3
37745: PPUSH
37746: CALL 75374 0 3
37750: NOT
37751: PUSH
37752: LD_VAR 0 1
37756: PPUSH
37757: CALL_OW 314
37761: AND
37762: IFFALSE 37766
// exit ;
37764: GO 37905
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37766: LD_VAR 0 2
37770: PPUSH
37771: LD_VAR 0 3
37775: PPUSH
37776: CALL_OW 428
37780: PUSH
37781: LD_VAR 0 1
37785: EQUAL
37786: PUSH
37787: LD_VAR 0 1
37791: PPUSH
37792: CALL_OW 314
37796: NOT
37797: AND
37798: IFFALSE 37724
// PlaySoundXY ( x , y , PlantMine ) ;
37800: LD_VAR 0 2
37804: PPUSH
37805: LD_VAR 0 3
37809: PPUSH
37810: LD_STRING PlantMine
37812: PPUSH
37813: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37817: LD_VAR 0 2
37821: PPUSH
37822: LD_VAR 0 3
37826: PPUSH
37827: LD_VAR 0 1
37831: PPUSH
37832: CALL_OW 255
37836: PPUSH
37837: LD_INT 0
37839: PPUSH
37840: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37844: LD_ADDR_EXP 131
37848: PUSH
37849: LD_EXP 131
37853: PPUSH
37854: LD_VAR 0 5
37858: PUSH
37859: LD_EXP 131
37863: PUSH
37864: LD_VAR 0 5
37868: ARRAY
37869: PUSH
37870: LD_INT 1
37872: PLUS
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PPUSH
37878: LD_VAR 0 2
37882: PUSH
37883: LD_VAR 0 3
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PPUSH
37892: CALL 44253 0 3
37896: ST_TO_ADDR
// result := true ;
37897: LD_ADDR_VAR 0 4
37901: PUSH
37902: LD_INT 1
37904: ST_TO_ADDR
// end ;
37905: LD_VAR 0 4
37909: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37910: LD_INT 0
37912: PPUSH
37913: PPUSH
37914: PPUSH
// if not unit in minersList then
37915: LD_VAR 0 1
37919: PUSH
37920: LD_EXP 130
37924: IN
37925: NOT
37926: IFFALSE 37930
// exit ;
37928: GO 38322
// index := GetElementIndex ( minersList , unit ) ;
37930: LD_ADDR_VAR 0 6
37934: PUSH
37935: LD_EXP 130
37939: PPUSH
37940: LD_VAR 0 1
37944: PPUSH
37945: CALL 44038 0 2
37949: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37950: LD_ADDR_VAR 0 5
37954: PUSH
37955: DOUBLE
37956: LD_EXP 131
37960: PUSH
37961: LD_VAR 0 6
37965: ARRAY
37966: INC
37967: ST_TO_ADDR
37968: LD_INT 1
37970: PUSH
37971: FOR_DOWNTO
37972: IFFALSE 38133
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37974: LD_EXP 131
37978: PUSH
37979: LD_VAR 0 6
37983: ARRAY
37984: PUSH
37985: LD_VAR 0 5
37989: ARRAY
37990: PUSH
37991: LD_INT 1
37993: ARRAY
37994: PUSH
37995: LD_VAR 0 2
37999: EQUAL
38000: PUSH
38001: LD_EXP 131
38005: PUSH
38006: LD_VAR 0 6
38010: ARRAY
38011: PUSH
38012: LD_VAR 0 5
38016: ARRAY
38017: PUSH
38018: LD_INT 2
38020: ARRAY
38021: PUSH
38022: LD_VAR 0 3
38026: EQUAL
38027: AND
38028: IFFALSE 38131
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38030: LD_EXP 131
38034: PUSH
38035: LD_VAR 0 6
38039: ARRAY
38040: PUSH
38041: LD_VAR 0 5
38045: ARRAY
38046: PUSH
38047: LD_INT 1
38049: ARRAY
38050: PPUSH
38051: LD_EXP 131
38055: PUSH
38056: LD_VAR 0 6
38060: ARRAY
38061: PUSH
38062: LD_VAR 0 5
38066: ARRAY
38067: PUSH
38068: LD_INT 2
38070: ARRAY
38071: PPUSH
38072: LD_VAR 0 1
38076: PPUSH
38077: CALL_OW 255
38081: PPUSH
38082: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38086: LD_ADDR_EXP 131
38090: PUSH
38091: LD_EXP 131
38095: PPUSH
38096: LD_VAR 0 6
38100: PPUSH
38101: LD_EXP 131
38105: PUSH
38106: LD_VAR 0 6
38110: ARRAY
38111: PPUSH
38112: LD_VAR 0 5
38116: PPUSH
38117: CALL_OW 3
38121: PPUSH
38122: CALL_OW 1
38126: ST_TO_ADDR
// exit ;
38127: POP
38128: POP
38129: GO 38322
// end ; end ;
38131: GO 37971
38133: POP
38134: POP
// for i := minerMinesList [ index ] downto 1 do
38135: LD_ADDR_VAR 0 5
38139: PUSH
38140: DOUBLE
38141: LD_EXP 131
38145: PUSH
38146: LD_VAR 0 6
38150: ARRAY
38151: INC
38152: ST_TO_ADDR
38153: LD_INT 1
38155: PUSH
38156: FOR_DOWNTO
38157: IFFALSE 38320
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38159: LD_EXP 131
38163: PUSH
38164: LD_VAR 0 6
38168: ARRAY
38169: PUSH
38170: LD_VAR 0 5
38174: ARRAY
38175: PUSH
38176: LD_INT 1
38178: ARRAY
38179: PPUSH
38180: LD_EXP 131
38184: PUSH
38185: LD_VAR 0 6
38189: ARRAY
38190: PUSH
38191: LD_VAR 0 5
38195: ARRAY
38196: PUSH
38197: LD_INT 2
38199: ARRAY
38200: PPUSH
38201: LD_VAR 0 2
38205: PPUSH
38206: LD_VAR 0 3
38210: PPUSH
38211: CALL_OW 298
38215: PUSH
38216: LD_INT 6
38218: LESS
38219: IFFALSE 38318
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38221: LD_EXP 131
38225: PUSH
38226: LD_VAR 0 6
38230: ARRAY
38231: PUSH
38232: LD_VAR 0 5
38236: ARRAY
38237: PUSH
38238: LD_INT 1
38240: ARRAY
38241: PPUSH
38242: LD_EXP 131
38246: PUSH
38247: LD_VAR 0 6
38251: ARRAY
38252: PUSH
38253: LD_VAR 0 5
38257: ARRAY
38258: PUSH
38259: LD_INT 2
38261: ARRAY
38262: PPUSH
38263: LD_VAR 0 1
38267: PPUSH
38268: CALL_OW 255
38272: PPUSH
38273: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38277: LD_ADDR_EXP 131
38281: PUSH
38282: LD_EXP 131
38286: PPUSH
38287: LD_VAR 0 6
38291: PPUSH
38292: LD_EXP 131
38296: PUSH
38297: LD_VAR 0 6
38301: ARRAY
38302: PPUSH
38303: LD_VAR 0 5
38307: PPUSH
38308: CALL_OW 3
38312: PPUSH
38313: CALL_OW 1
38317: ST_TO_ADDR
// end ; end ;
38318: GO 38156
38320: POP
38321: POP
// end ;
38322: LD_VAR 0 4
38326: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38327: LD_INT 0
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38338: LD_VAR 0 1
38342: PPUSH
38343: CALL_OW 264
38347: PUSH
38348: LD_INT 81
38350: EQUAL
38351: NOT
38352: PUSH
38353: LD_VAR 0 1
38357: PUSH
38358: LD_EXP 130
38362: IN
38363: NOT
38364: OR
38365: IFFALSE 38369
// exit ;
38367: GO 38691
// index := GetElementIndex ( minersList , unit ) ;
38369: LD_ADDR_VAR 0 6
38373: PUSH
38374: LD_EXP 130
38378: PPUSH
38379: LD_VAR 0 1
38383: PPUSH
38384: CALL 44038 0 2
38388: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38389: LD_ADDR_VAR 0 8
38393: PUSH
38394: LD_EXP 132
38398: PUSH
38399: LD_EXP 131
38403: PUSH
38404: LD_VAR 0 6
38408: ARRAY
38409: MINUS
38410: ST_TO_ADDR
// if not minesFreeAmount then
38411: LD_VAR 0 8
38415: NOT
38416: IFFALSE 38420
// exit ;
38418: GO 38691
// tmp := [ ] ;
38420: LD_ADDR_VAR 0 7
38424: PUSH
38425: EMPTY
38426: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38427: LD_ADDR_VAR 0 5
38431: PUSH
38432: DOUBLE
38433: LD_INT 1
38435: DEC
38436: ST_TO_ADDR
38437: LD_VAR 0 8
38441: PUSH
38442: FOR_TO
38443: IFFALSE 38638
// begin _d := rand ( 0 , 5 ) ;
38445: LD_ADDR_VAR 0 11
38449: PUSH
38450: LD_INT 0
38452: PPUSH
38453: LD_INT 5
38455: PPUSH
38456: CALL_OW 12
38460: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38461: LD_ADDR_VAR 0 12
38465: PUSH
38466: LD_INT 2
38468: PPUSH
38469: LD_INT 6
38471: PPUSH
38472: CALL_OW 12
38476: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38477: LD_ADDR_VAR 0 9
38481: PUSH
38482: LD_VAR 0 2
38486: PPUSH
38487: LD_VAR 0 11
38491: PPUSH
38492: LD_VAR 0 12
38496: PPUSH
38497: CALL_OW 272
38501: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38502: LD_ADDR_VAR 0 10
38506: PUSH
38507: LD_VAR 0 3
38511: PPUSH
38512: LD_VAR 0 11
38516: PPUSH
38517: LD_VAR 0 12
38521: PPUSH
38522: CALL_OW 273
38526: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38527: LD_VAR 0 9
38531: PPUSH
38532: LD_VAR 0 10
38536: PPUSH
38537: CALL_OW 488
38541: PUSH
38542: LD_VAR 0 9
38546: PUSH
38547: LD_VAR 0 10
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_VAR 0 7
38560: IN
38561: NOT
38562: AND
38563: PUSH
38564: LD_VAR 0 9
38568: PPUSH
38569: LD_VAR 0 10
38573: PPUSH
38574: CALL_OW 458
38578: NOT
38579: AND
38580: IFFALSE 38622
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38582: LD_ADDR_VAR 0 7
38586: PUSH
38587: LD_VAR 0 7
38591: PPUSH
38592: LD_VAR 0 7
38596: PUSH
38597: LD_INT 1
38599: PLUS
38600: PPUSH
38601: LD_VAR 0 9
38605: PUSH
38606: LD_VAR 0 10
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PPUSH
38615: CALL_OW 1
38619: ST_TO_ADDR
38620: GO 38636
// i := i - 1 ;
38622: LD_ADDR_VAR 0 5
38626: PUSH
38627: LD_VAR 0 5
38631: PUSH
38632: LD_INT 1
38634: MINUS
38635: ST_TO_ADDR
// end ;
38636: GO 38442
38638: POP
38639: POP
// for i in tmp do
38640: LD_ADDR_VAR 0 5
38644: PUSH
38645: LD_VAR 0 7
38649: PUSH
38650: FOR_IN
38651: IFFALSE 38689
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38653: LD_VAR 0 1
38657: PPUSH
38658: LD_VAR 0 5
38662: PUSH
38663: LD_INT 1
38665: ARRAY
38666: PPUSH
38667: LD_VAR 0 5
38671: PUSH
38672: LD_INT 2
38674: ARRAY
38675: PPUSH
38676: CALL 37635 0 3
38680: NOT
38681: IFFALSE 38687
// exit ;
38683: POP
38684: POP
38685: GO 38691
38687: GO 38650
38689: POP
38690: POP
// end ;
38691: LD_VAR 0 4
38695: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38696: LD_INT 0
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
// if not GetClass ( unit ) = class_sniper then
38705: LD_VAR 0 1
38709: PPUSH
38710: CALL_OW 257
38714: PUSH
38715: LD_INT 5
38717: EQUAL
38718: NOT
38719: IFFALSE 38723
// exit ;
38721: GO 39111
// dist := 8 ;
38723: LD_ADDR_VAR 0 5
38727: PUSH
38728: LD_INT 8
38730: ST_TO_ADDR
// viewRange := 12 ;
38731: LD_ADDR_VAR 0 7
38735: PUSH
38736: LD_INT 12
38738: ST_TO_ADDR
// side := GetSide ( unit ) ;
38739: LD_ADDR_VAR 0 6
38743: PUSH
38744: LD_VAR 0 1
38748: PPUSH
38749: CALL_OW 255
38753: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38754: LD_INT 61
38756: PPUSH
38757: LD_VAR 0 6
38761: PPUSH
38762: CALL_OW 321
38766: PUSH
38767: LD_INT 2
38769: EQUAL
38770: IFFALSE 38780
// viewRange := 16 ;
38772: LD_ADDR_VAR 0 7
38776: PUSH
38777: LD_INT 16
38779: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38780: LD_VAR 0 1
38784: PPUSH
38785: LD_VAR 0 2
38789: PPUSH
38790: LD_VAR 0 3
38794: PPUSH
38795: CALL_OW 297
38799: PUSH
38800: LD_VAR 0 5
38804: GREATER
38805: IFFALSE 38884
// begin ComMoveXY ( unit , x , y ) ;
38807: LD_VAR 0 1
38811: PPUSH
38812: LD_VAR 0 2
38816: PPUSH
38817: LD_VAR 0 3
38821: PPUSH
38822: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38826: LD_INT 35
38828: PPUSH
38829: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38833: LD_VAR 0 1
38837: PPUSH
38838: LD_VAR 0 2
38842: PPUSH
38843: LD_VAR 0 3
38847: PPUSH
38848: CALL 75374 0 3
38852: NOT
38853: IFFALSE 38857
// exit ;
38855: GO 39111
// until GetDistUnitXY ( unit , x , y ) < dist ;
38857: LD_VAR 0 1
38861: PPUSH
38862: LD_VAR 0 2
38866: PPUSH
38867: LD_VAR 0 3
38871: PPUSH
38872: CALL_OW 297
38876: PUSH
38877: LD_VAR 0 5
38881: LESS
38882: IFFALSE 38826
// end ; ComTurnXY ( unit , x , y ) ;
38884: LD_VAR 0 1
38888: PPUSH
38889: LD_VAR 0 2
38893: PPUSH
38894: LD_VAR 0 3
38898: PPUSH
38899: CALL_OW 118
// wait ( 5 ) ;
38903: LD_INT 5
38905: PPUSH
38906: CALL_OW 67
// _d := GetDir ( unit ) ;
38910: LD_ADDR_VAR 0 10
38914: PUSH
38915: LD_VAR 0 1
38919: PPUSH
38920: CALL_OW 254
38924: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38925: LD_ADDR_VAR 0 8
38929: PUSH
38930: LD_VAR 0 1
38934: PPUSH
38935: CALL_OW 250
38939: PPUSH
38940: LD_VAR 0 10
38944: PPUSH
38945: LD_VAR 0 5
38949: PPUSH
38950: CALL_OW 272
38954: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38955: LD_ADDR_VAR 0 9
38959: PUSH
38960: LD_VAR 0 1
38964: PPUSH
38965: CALL_OW 251
38969: PPUSH
38970: LD_VAR 0 10
38974: PPUSH
38975: LD_VAR 0 5
38979: PPUSH
38980: CALL_OW 273
38984: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38985: LD_VAR 0 8
38989: PPUSH
38990: LD_VAR 0 9
38994: PPUSH
38995: CALL_OW 488
38999: NOT
39000: IFFALSE 39004
// exit ;
39002: GO 39111
// ComAnimCustom ( unit , 1 ) ;
39004: LD_VAR 0 1
39008: PPUSH
39009: LD_INT 1
39011: PPUSH
39012: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39016: LD_VAR 0 8
39020: PPUSH
39021: LD_VAR 0 9
39025: PPUSH
39026: LD_VAR 0 6
39030: PPUSH
39031: LD_VAR 0 7
39035: PPUSH
39036: CALL_OW 330
// repeat wait ( 1 ) ;
39040: LD_INT 1
39042: PPUSH
39043: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39047: LD_VAR 0 1
39051: PPUSH
39052: CALL_OW 316
39056: PUSH
39057: LD_VAR 0 1
39061: PPUSH
39062: CALL_OW 314
39066: OR
39067: PUSH
39068: LD_VAR 0 1
39072: PPUSH
39073: CALL_OW 302
39077: NOT
39078: OR
39079: PUSH
39080: LD_VAR 0 1
39084: PPUSH
39085: CALL_OW 301
39089: OR
39090: IFFALSE 39040
// RemoveSeeing ( _x , _y , side ) ;
39092: LD_VAR 0 8
39096: PPUSH
39097: LD_VAR 0 9
39101: PPUSH
39102: LD_VAR 0 6
39106: PPUSH
39107: CALL_OW 331
// end ; end_of_file
39111: LD_VAR 0 4
39115: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39116: LD_INT 0
39118: PPUSH
39119: PPUSH
// if exist_mode then
39120: LD_VAR 0 2
39124: IFFALSE 39149
// unit := CreateCharacter ( prefix & ident ) else
39126: LD_ADDR_VAR 0 5
39130: PUSH
39131: LD_VAR 0 3
39135: PUSH
39136: LD_VAR 0 1
39140: STR
39141: PPUSH
39142: CALL_OW 34
39146: ST_TO_ADDR
39147: GO 39164
// unit := NewCharacter ( ident ) ;
39149: LD_ADDR_VAR 0 5
39153: PUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: CALL_OW 25
39163: ST_TO_ADDR
// result := unit ;
39164: LD_ADDR_VAR 0 4
39168: PUSH
39169: LD_VAR 0 5
39173: ST_TO_ADDR
// end ;
39174: LD_VAR 0 4
39178: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39179: LD_INT 0
39181: PPUSH
39182: PPUSH
// if not side or not nation then
39183: LD_VAR 0 1
39187: NOT
39188: PUSH
39189: LD_VAR 0 2
39193: NOT
39194: OR
39195: IFFALSE 39199
// exit ;
39197: GO 39967
// case nation of nation_american :
39199: LD_VAR 0 2
39203: PUSH
39204: LD_INT 1
39206: DOUBLE
39207: EQUAL
39208: IFTRUE 39212
39210: GO 39426
39212: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39213: LD_ADDR_VAR 0 4
39217: PUSH
39218: LD_INT 35
39220: PUSH
39221: LD_INT 45
39223: PUSH
39224: LD_INT 46
39226: PUSH
39227: LD_INT 47
39229: PUSH
39230: LD_INT 82
39232: PUSH
39233: LD_INT 83
39235: PUSH
39236: LD_INT 84
39238: PUSH
39239: LD_INT 85
39241: PUSH
39242: LD_INT 86
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 6
39253: PUSH
39254: LD_INT 15
39256: PUSH
39257: LD_INT 16
39259: PUSH
39260: LD_INT 7
39262: PUSH
39263: LD_INT 12
39265: PUSH
39266: LD_INT 13
39268: PUSH
39269: LD_INT 10
39271: PUSH
39272: LD_INT 14
39274: PUSH
39275: LD_INT 20
39277: PUSH
39278: LD_INT 21
39280: PUSH
39281: LD_INT 22
39283: PUSH
39284: LD_INT 25
39286: PUSH
39287: LD_INT 32
39289: PUSH
39290: LD_INT 27
39292: PUSH
39293: LD_INT 36
39295: PUSH
39296: LD_INT 69
39298: PUSH
39299: LD_INT 39
39301: PUSH
39302: LD_INT 34
39304: PUSH
39305: LD_INT 40
39307: PUSH
39308: LD_INT 48
39310: PUSH
39311: LD_INT 49
39313: PUSH
39314: LD_INT 50
39316: PUSH
39317: LD_INT 51
39319: PUSH
39320: LD_INT 52
39322: PUSH
39323: LD_INT 53
39325: PUSH
39326: LD_INT 54
39328: PUSH
39329: LD_INT 55
39331: PUSH
39332: LD_INT 56
39334: PUSH
39335: LD_INT 57
39337: PUSH
39338: LD_INT 58
39340: PUSH
39341: LD_INT 59
39343: PUSH
39344: LD_INT 60
39346: PUSH
39347: LD_INT 61
39349: PUSH
39350: LD_INT 62
39352: PUSH
39353: LD_INT 80
39355: PUSH
39356: LD_INT 82
39358: PUSH
39359: LD_INT 83
39361: PUSH
39362: LD_INT 84
39364: PUSH
39365: LD_INT 85
39367: PUSH
39368: LD_INT 86
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: ST_TO_ADDR
39424: GO 39891
39426: LD_INT 2
39428: DOUBLE
39429: EQUAL
39430: IFTRUE 39434
39432: GO 39660
39434: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39435: LD_ADDR_VAR 0 4
39439: PUSH
39440: LD_INT 35
39442: PUSH
39443: LD_INT 45
39445: PUSH
39446: LD_INT 46
39448: PUSH
39449: LD_INT 47
39451: PUSH
39452: LD_INT 82
39454: PUSH
39455: LD_INT 83
39457: PUSH
39458: LD_INT 84
39460: PUSH
39461: LD_INT 85
39463: PUSH
39464: LD_INT 87
39466: PUSH
39467: LD_INT 70
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: LD_INT 11
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 4
39481: PUSH
39482: LD_INT 5
39484: PUSH
39485: LD_INT 6
39487: PUSH
39488: LD_INT 15
39490: PUSH
39491: LD_INT 18
39493: PUSH
39494: LD_INT 7
39496: PUSH
39497: LD_INT 17
39499: PUSH
39500: LD_INT 8
39502: PUSH
39503: LD_INT 20
39505: PUSH
39506: LD_INT 21
39508: PUSH
39509: LD_INT 22
39511: PUSH
39512: LD_INT 72
39514: PUSH
39515: LD_INT 26
39517: PUSH
39518: LD_INT 69
39520: PUSH
39521: LD_INT 39
39523: PUSH
39524: LD_INT 40
39526: PUSH
39527: LD_INT 41
39529: PUSH
39530: LD_INT 42
39532: PUSH
39533: LD_INT 43
39535: PUSH
39536: LD_INT 48
39538: PUSH
39539: LD_INT 49
39541: PUSH
39542: LD_INT 50
39544: PUSH
39545: LD_INT 51
39547: PUSH
39548: LD_INT 52
39550: PUSH
39551: LD_INT 53
39553: PUSH
39554: LD_INT 54
39556: PUSH
39557: LD_INT 55
39559: PUSH
39560: LD_INT 56
39562: PUSH
39563: LD_INT 60
39565: PUSH
39566: LD_INT 61
39568: PUSH
39569: LD_INT 62
39571: PUSH
39572: LD_INT 66
39574: PUSH
39575: LD_INT 67
39577: PUSH
39578: LD_INT 68
39580: PUSH
39581: LD_INT 81
39583: PUSH
39584: LD_INT 82
39586: PUSH
39587: LD_INT 83
39589: PUSH
39590: LD_INT 84
39592: PUSH
39593: LD_INT 85
39595: PUSH
39596: LD_INT 87
39598: PUSH
39599: LD_INT 88
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: ST_TO_ADDR
39658: GO 39891
39660: LD_INT 3
39662: DOUBLE
39663: EQUAL
39664: IFTRUE 39668
39666: GO 39890
39668: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39669: LD_ADDR_VAR 0 4
39673: PUSH
39674: LD_INT 46
39676: PUSH
39677: LD_INT 47
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: LD_INT 82
39688: PUSH
39689: LD_INT 83
39691: PUSH
39692: LD_INT 84
39694: PUSH
39695: LD_INT 85
39697: PUSH
39698: LD_INT 86
39700: PUSH
39701: LD_INT 11
39703: PUSH
39704: LD_INT 9
39706: PUSH
39707: LD_INT 20
39709: PUSH
39710: LD_INT 19
39712: PUSH
39713: LD_INT 21
39715: PUSH
39716: LD_INT 24
39718: PUSH
39719: LD_INT 22
39721: PUSH
39722: LD_INT 25
39724: PUSH
39725: LD_INT 28
39727: PUSH
39728: LD_INT 29
39730: PUSH
39731: LD_INT 30
39733: PUSH
39734: LD_INT 31
39736: PUSH
39737: LD_INT 37
39739: PUSH
39740: LD_INT 38
39742: PUSH
39743: LD_INT 32
39745: PUSH
39746: LD_INT 27
39748: PUSH
39749: LD_INT 33
39751: PUSH
39752: LD_INT 69
39754: PUSH
39755: LD_INT 39
39757: PUSH
39758: LD_INT 34
39760: PUSH
39761: LD_INT 40
39763: PUSH
39764: LD_INT 71
39766: PUSH
39767: LD_INT 23
39769: PUSH
39770: LD_INT 44
39772: PUSH
39773: LD_INT 48
39775: PUSH
39776: LD_INT 49
39778: PUSH
39779: LD_INT 50
39781: PUSH
39782: LD_INT 51
39784: PUSH
39785: LD_INT 52
39787: PUSH
39788: LD_INT 53
39790: PUSH
39791: LD_INT 54
39793: PUSH
39794: LD_INT 55
39796: PUSH
39797: LD_INT 56
39799: PUSH
39800: LD_INT 57
39802: PUSH
39803: LD_INT 58
39805: PUSH
39806: LD_INT 59
39808: PUSH
39809: LD_INT 63
39811: PUSH
39812: LD_INT 64
39814: PUSH
39815: LD_INT 65
39817: PUSH
39818: LD_INT 82
39820: PUSH
39821: LD_INT 83
39823: PUSH
39824: LD_INT 84
39826: PUSH
39827: LD_INT 85
39829: PUSH
39830: LD_INT 86
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: ST_TO_ADDR
39888: GO 39891
39890: POP
// if state > - 1 and state < 3 then
39891: LD_VAR 0 3
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: GREATER
39900: PUSH
39901: LD_VAR 0 3
39905: PUSH
39906: LD_INT 3
39908: LESS
39909: AND
39910: IFFALSE 39967
// for i in result do
39912: LD_ADDR_VAR 0 5
39916: PUSH
39917: LD_VAR 0 4
39921: PUSH
39922: FOR_IN
39923: IFFALSE 39965
// if GetTech ( i , side ) <> state then
39925: LD_VAR 0 5
39929: PPUSH
39930: LD_VAR 0 1
39934: PPUSH
39935: CALL_OW 321
39939: PUSH
39940: LD_VAR 0 3
39944: NONEQUAL
39945: IFFALSE 39963
// result := result diff i ;
39947: LD_ADDR_VAR 0 4
39951: PUSH
39952: LD_VAR 0 4
39956: PUSH
39957: LD_VAR 0 5
39961: DIFF
39962: ST_TO_ADDR
39963: GO 39922
39965: POP
39966: POP
// end ;
39967: LD_VAR 0 4
39971: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39972: LD_INT 0
39974: PPUSH
39975: PPUSH
39976: PPUSH
// result := true ;
39977: LD_ADDR_VAR 0 3
39981: PUSH
39982: LD_INT 1
39984: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39985: LD_ADDR_VAR 0 5
39989: PUSH
39990: LD_VAR 0 2
39994: PPUSH
39995: CALL_OW 480
39999: ST_TO_ADDR
// if not tmp then
40000: LD_VAR 0 5
40004: NOT
40005: IFFALSE 40009
// exit ;
40007: GO 40058
// for i in tmp do
40009: LD_ADDR_VAR 0 4
40013: PUSH
40014: LD_VAR 0 5
40018: PUSH
40019: FOR_IN
40020: IFFALSE 40056
// if GetTech ( i , side ) <> state_researched then
40022: LD_VAR 0 4
40026: PPUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 321
40036: PUSH
40037: LD_INT 2
40039: NONEQUAL
40040: IFFALSE 40054
// begin result := false ;
40042: LD_ADDR_VAR 0 3
40046: PUSH
40047: LD_INT 0
40049: ST_TO_ADDR
// exit ;
40050: POP
40051: POP
40052: GO 40058
// end ;
40054: GO 40019
40056: POP
40057: POP
// end ;
40058: LD_VAR 0 3
40062: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40063: LD_INT 0
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40078: LD_VAR 0 1
40082: NOT
40083: PUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: CALL_OW 257
40093: PUSH
40094: LD_INT 9
40096: NONEQUAL
40097: OR
40098: IFFALSE 40102
// exit ;
40100: GO 40675
// side := GetSide ( unit ) ;
40102: LD_ADDR_VAR 0 9
40106: PUSH
40107: LD_VAR 0 1
40111: PPUSH
40112: CALL_OW 255
40116: ST_TO_ADDR
// tech_space := tech_spacanom ;
40117: LD_ADDR_VAR 0 12
40121: PUSH
40122: LD_INT 29
40124: ST_TO_ADDR
// tech_time := tech_taurad ;
40125: LD_ADDR_VAR 0 13
40129: PUSH
40130: LD_INT 28
40132: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40133: LD_ADDR_VAR 0 11
40137: PUSH
40138: LD_VAR 0 1
40142: PPUSH
40143: CALL_OW 310
40147: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40148: LD_VAR 0 11
40152: PPUSH
40153: CALL_OW 247
40157: PUSH
40158: LD_INT 2
40160: EQUAL
40161: IFFALSE 40165
// exit ;
40163: GO 40675
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40165: LD_ADDR_VAR 0 8
40169: PUSH
40170: LD_INT 81
40172: PUSH
40173: LD_VAR 0 9
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: LD_INT 21
40187: PUSH
40188: LD_INT 3
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PPUSH
40203: CALL_OW 69
40207: ST_TO_ADDR
// if not tmp then
40208: LD_VAR 0 8
40212: NOT
40213: IFFALSE 40217
// exit ;
40215: GO 40675
// if in_unit then
40217: LD_VAR 0 11
40221: IFFALSE 40245
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40223: LD_ADDR_VAR 0 10
40227: PUSH
40228: LD_VAR 0 8
40232: PPUSH
40233: LD_VAR 0 11
40237: PPUSH
40238: CALL_OW 74
40242: ST_TO_ADDR
40243: GO 40265
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40245: LD_ADDR_VAR 0 10
40249: PUSH
40250: LD_VAR 0 8
40254: PPUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: CALL_OW 74
40264: ST_TO_ADDR
// if not enemy then
40265: LD_VAR 0 10
40269: NOT
40270: IFFALSE 40274
// exit ;
40272: GO 40675
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40274: LD_VAR 0 11
40278: PUSH
40279: LD_VAR 0 11
40283: PPUSH
40284: LD_VAR 0 10
40288: PPUSH
40289: CALL_OW 296
40293: PUSH
40294: LD_INT 13
40296: GREATER
40297: AND
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: LD_VAR 0 10
40308: PPUSH
40309: CALL_OW 296
40313: PUSH
40314: LD_INT 12
40316: GREATER
40317: OR
40318: IFFALSE 40322
// exit ;
40320: GO 40675
// missile := [ 1 ] ;
40322: LD_ADDR_VAR 0 14
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40333: LD_VAR 0 9
40337: PPUSH
40338: LD_VAR 0 12
40342: PPUSH
40343: CALL_OW 325
40347: IFFALSE 40376
// missile := Replace ( missile , missile + 1 , 2 ) ;
40349: LD_ADDR_VAR 0 14
40353: PUSH
40354: LD_VAR 0 14
40358: PPUSH
40359: LD_VAR 0 14
40363: PUSH
40364: LD_INT 1
40366: PLUS
40367: PPUSH
40368: LD_INT 2
40370: PPUSH
40371: CALL_OW 1
40375: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40376: LD_VAR 0 9
40380: PPUSH
40381: LD_VAR 0 13
40385: PPUSH
40386: CALL_OW 325
40390: PUSH
40391: LD_VAR 0 10
40395: PPUSH
40396: CALL_OW 255
40400: PPUSH
40401: LD_VAR 0 13
40405: PPUSH
40406: CALL_OW 325
40410: NOT
40411: AND
40412: IFFALSE 40441
// missile := Replace ( missile , missile + 1 , 3 ) ;
40414: LD_ADDR_VAR 0 14
40418: PUSH
40419: LD_VAR 0 14
40423: PPUSH
40424: LD_VAR 0 14
40428: PUSH
40429: LD_INT 1
40431: PLUS
40432: PPUSH
40433: LD_INT 3
40435: PPUSH
40436: CALL_OW 1
40440: ST_TO_ADDR
// if missile < 2 then
40441: LD_VAR 0 14
40445: PUSH
40446: LD_INT 2
40448: LESS
40449: IFFALSE 40453
// exit ;
40451: GO 40675
// x := GetX ( enemy ) ;
40453: LD_ADDR_VAR 0 4
40457: PUSH
40458: LD_VAR 0 10
40462: PPUSH
40463: CALL_OW 250
40467: ST_TO_ADDR
// y := GetY ( enemy ) ;
40468: LD_ADDR_VAR 0 5
40472: PUSH
40473: LD_VAR 0 10
40477: PPUSH
40478: CALL_OW 251
40482: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40483: LD_ADDR_VAR 0 6
40487: PUSH
40488: LD_VAR 0 4
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PPUSH
40497: LD_INT 1
40499: PPUSH
40500: CALL_OW 12
40504: PLUS
40505: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40506: LD_ADDR_VAR 0 7
40510: PUSH
40511: LD_VAR 0 5
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PPUSH
40520: LD_INT 1
40522: PPUSH
40523: CALL_OW 12
40527: PLUS
40528: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40529: LD_VAR 0 6
40533: PPUSH
40534: LD_VAR 0 7
40538: PPUSH
40539: CALL_OW 488
40543: NOT
40544: IFFALSE 40566
// begin _x := x ;
40546: LD_ADDR_VAR 0 6
40550: PUSH
40551: LD_VAR 0 4
40555: ST_TO_ADDR
// _y := y ;
40556: LD_ADDR_VAR 0 7
40560: PUSH
40561: LD_VAR 0 5
40565: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40566: LD_ADDR_VAR 0 3
40570: PUSH
40571: LD_INT 1
40573: PPUSH
40574: LD_VAR 0 14
40578: PPUSH
40579: CALL_OW 12
40583: ST_TO_ADDR
// case i of 1 :
40584: LD_VAR 0 3
40588: PUSH
40589: LD_INT 1
40591: DOUBLE
40592: EQUAL
40593: IFTRUE 40597
40595: GO 40614
40597: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40598: LD_VAR 0 1
40602: PPUSH
40603: LD_VAR 0 10
40607: PPUSH
40608: CALL_OW 115
40612: GO 40675
40614: LD_INT 2
40616: DOUBLE
40617: EQUAL
40618: IFTRUE 40622
40620: GO 40644
40622: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40623: LD_VAR 0 1
40627: PPUSH
40628: LD_VAR 0 6
40632: PPUSH
40633: LD_VAR 0 7
40637: PPUSH
40638: CALL_OW 153
40642: GO 40675
40644: LD_INT 3
40646: DOUBLE
40647: EQUAL
40648: IFTRUE 40652
40650: GO 40674
40652: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40653: LD_VAR 0 1
40657: PPUSH
40658: LD_VAR 0 6
40662: PPUSH
40663: LD_VAR 0 7
40667: PPUSH
40668: CALL_OW 154
40672: GO 40675
40674: POP
// end ;
40675: LD_VAR 0 2
40679: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40680: LD_INT 0
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
// if not unit or not building then
40688: LD_VAR 0 1
40692: NOT
40693: PUSH
40694: LD_VAR 0 2
40698: NOT
40699: OR
40700: IFFALSE 40704
// exit ;
40702: GO 40862
// x := GetX ( building ) ;
40704: LD_ADDR_VAR 0 5
40708: PUSH
40709: LD_VAR 0 2
40713: PPUSH
40714: CALL_OW 250
40718: ST_TO_ADDR
// y := GetY ( building ) ;
40719: LD_ADDR_VAR 0 6
40723: PUSH
40724: LD_VAR 0 2
40728: PPUSH
40729: CALL_OW 251
40733: ST_TO_ADDR
// for i = 0 to 5 do
40734: LD_ADDR_VAR 0 4
40738: PUSH
40739: DOUBLE
40740: LD_INT 0
40742: DEC
40743: ST_TO_ADDR
40744: LD_INT 5
40746: PUSH
40747: FOR_TO
40748: IFFALSE 40860
// begin _x := ShiftX ( x , i , 3 ) ;
40750: LD_ADDR_VAR 0 7
40754: PUSH
40755: LD_VAR 0 5
40759: PPUSH
40760: LD_VAR 0 4
40764: PPUSH
40765: LD_INT 3
40767: PPUSH
40768: CALL_OW 272
40772: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40773: LD_ADDR_VAR 0 8
40777: PUSH
40778: LD_VAR 0 6
40782: PPUSH
40783: LD_VAR 0 4
40787: PPUSH
40788: LD_INT 3
40790: PPUSH
40791: CALL_OW 273
40795: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40796: LD_VAR 0 7
40800: PPUSH
40801: LD_VAR 0 8
40805: PPUSH
40806: CALL_OW 488
40810: NOT
40811: IFFALSE 40815
// continue ;
40813: GO 40747
// if HexInfo ( _x , _y ) = 0 then
40815: LD_VAR 0 7
40819: PPUSH
40820: LD_VAR 0 8
40824: PPUSH
40825: CALL_OW 428
40829: PUSH
40830: LD_INT 0
40832: EQUAL
40833: IFFALSE 40858
// begin ComMoveXY ( unit , _x , _y ) ;
40835: LD_VAR 0 1
40839: PPUSH
40840: LD_VAR 0 7
40844: PPUSH
40845: LD_VAR 0 8
40849: PPUSH
40850: CALL_OW 111
// exit ;
40854: POP
40855: POP
40856: GO 40862
// end ; end ;
40858: GO 40747
40860: POP
40861: POP
// end ;
40862: LD_VAR 0 3
40866: RET
// export function ScanBase ( side , base_area ) ; begin
40867: LD_INT 0
40869: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40870: LD_ADDR_VAR 0 3
40874: PUSH
40875: LD_VAR 0 2
40879: PPUSH
40880: LD_INT 81
40882: PUSH
40883: LD_VAR 0 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PPUSH
40892: CALL_OW 70
40896: ST_TO_ADDR
// end ;
40897: LD_VAR 0 3
40901: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40902: LD_INT 0
40904: PPUSH
40905: PPUSH
40906: PPUSH
40907: PPUSH
// result := false ;
40908: LD_ADDR_VAR 0 2
40912: PUSH
40913: LD_INT 0
40915: ST_TO_ADDR
// side := GetSide ( unit ) ;
40916: LD_ADDR_VAR 0 3
40920: PUSH
40921: LD_VAR 0 1
40925: PPUSH
40926: CALL_OW 255
40930: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40931: LD_ADDR_VAR 0 4
40935: PUSH
40936: LD_VAR 0 1
40940: PPUSH
40941: CALL_OW 248
40945: ST_TO_ADDR
// case nat of 1 :
40946: LD_VAR 0 4
40950: PUSH
40951: LD_INT 1
40953: DOUBLE
40954: EQUAL
40955: IFTRUE 40959
40957: GO 40970
40959: POP
// tech := tech_lassight ; 2 :
40960: LD_ADDR_VAR 0 5
40964: PUSH
40965: LD_INT 12
40967: ST_TO_ADDR
40968: GO 41009
40970: LD_INT 2
40972: DOUBLE
40973: EQUAL
40974: IFTRUE 40978
40976: GO 40989
40978: POP
// tech := tech_mortar ; 3 :
40979: LD_ADDR_VAR 0 5
40983: PUSH
40984: LD_INT 41
40986: ST_TO_ADDR
40987: GO 41009
40989: LD_INT 3
40991: DOUBLE
40992: EQUAL
40993: IFTRUE 40997
40995: GO 41008
40997: POP
// tech := tech_bazooka ; end ;
40998: LD_ADDR_VAR 0 5
41002: PUSH
41003: LD_INT 44
41005: ST_TO_ADDR
41006: GO 41009
41008: POP
// if Researched ( side , tech ) then
41009: LD_VAR 0 3
41013: PPUSH
41014: LD_VAR 0 5
41018: PPUSH
41019: CALL_OW 325
41023: IFFALSE 41050
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41025: LD_ADDR_VAR 0 2
41029: PUSH
41030: LD_INT 5
41032: PUSH
41033: LD_INT 8
41035: PUSH
41036: LD_INT 9
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: PUSH
41044: LD_VAR 0 4
41048: ARRAY
41049: ST_TO_ADDR
// end ;
41050: LD_VAR 0 2
41054: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41055: LD_INT 0
41057: PPUSH
41058: PPUSH
41059: PPUSH
// if not mines then
41060: LD_VAR 0 2
41064: NOT
41065: IFFALSE 41069
// exit ;
41067: GO 41213
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41069: LD_ADDR_VAR 0 5
41073: PUSH
41074: LD_INT 81
41076: PUSH
41077: LD_VAR 0 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: LD_INT 21
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PPUSH
41107: CALL_OW 69
41111: ST_TO_ADDR
// for i in mines do
41112: LD_ADDR_VAR 0 4
41116: PUSH
41117: LD_VAR 0 2
41121: PUSH
41122: FOR_IN
41123: IFFALSE 41211
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41125: LD_VAR 0 4
41129: PUSH
41130: LD_INT 1
41132: ARRAY
41133: PPUSH
41134: LD_VAR 0 4
41138: PUSH
41139: LD_INT 2
41141: ARRAY
41142: PPUSH
41143: CALL_OW 458
41147: NOT
41148: IFFALSE 41152
// continue ;
41150: GO 41122
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41152: LD_VAR 0 4
41156: PUSH
41157: LD_INT 1
41159: ARRAY
41160: PPUSH
41161: LD_VAR 0 4
41165: PUSH
41166: LD_INT 2
41168: ARRAY
41169: PPUSH
41170: CALL_OW 428
41174: PUSH
41175: LD_VAR 0 5
41179: IN
41180: IFFALSE 41209
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41182: LD_VAR 0 4
41186: PUSH
41187: LD_INT 1
41189: ARRAY
41190: PPUSH
41191: LD_VAR 0 4
41195: PUSH
41196: LD_INT 2
41198: ARRAY
41199: PPUSH
41200: LD_VAR 0 1
41204: PPUSH
41205: CALL_OW 456
// end ;
41209: GO 41122
41211: POP
41212: POP
// end ;
41213: LD_VAR 0 3
41217: RET
// export function Count ( array ) ; var i ; begin
41218: LD_INT 0
41220: PPUSH
41221: PPUSH
// result := 0 ;
41222: LD_ADDR_VAR 0 2
41226: PUSH
41227: LD_INT 0
41229: ST_TO_ADDR
// for i in array do
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_VAR 0 1
41239: PUSH
41240: FOR_IN
41241: IFFALSE 41265
// if i then
41243: LD_VAR 0 3
41247: IFFALSE 41263
// result := result + 1 ;
41249: LD_ADDR_VAR 0 2
41253: PUSH
41254: LD_VAR 0 2
41258: PUSH
41259: LD_INT 1
41261: PLUS
41262: ST_TO_ADDR
41263: GO 41240
41265: POP
41266: POP
// end ;
41267: LD_VAR 0 2
41271: RET
// export function IsEmpty ( building ) ; begin
41272: LD_INT 0
41274: PPUSH
// if not building then
41275: LD_VAR 0 1
41279: NOT
41280: IFFALSE 41284
// exit ;
41282: GO 41327
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41284: LD_ADDR_VAR 0 2
41288: PUSH
41289: LD_VAR 0 1
41293: PUSH
41294: LD_INT 22
41296: PUSH
41297: LD_VAR 0 1
41301: PPUSH
41302: CALL_OW 255
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 58
41313: PUSH
41314: EMPTY
41315: LIST
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PPUSH
41321: CALL_OW 69
41325: IN
41326: ST_TO_ADDR
// end ;
41327: LD_VAR 0 2
41331: RET
// export function IsNotFull ( building ) ; var places ; begin
41332: LD_INT 0
41334: PPUSH
41335: PPUSH
// if not building then
41336: LD_VAR 0 1
41340: NOT
41341: IFFALSE 41345
// exit ;
41343: GO 41516
// result := false ;
41345: LD_ADDR_VAR 0 2
41349: PUSH
41350: LD_INT 0
41352: ST_TO_ADDR
// places := 0 ;
41353: LD_ADDR_VAR 0 3
41357: PUSH
41358: LD_INT 0
41360: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41361: LD_VAR 0 1
41365: PPUSH
41366: CALL_OW 266
41370: PUSH
41371: LD_INT 0
41373: DOUBLE
41374: EQUAL
41375: IFTRUE 41433
41377: LD_INT 1
41379: DOUBLE
41380: EQUAL
41381: IFTRUE 41433
41383: LD_INT 6
41385: DOUBLE
41386: EQUAL
41387: IFTRUE 41433
41389: LD_INT 7
41391: DOUBLE
41392: EQUAL
41393: IFTRUE 41433
41395: LD_INT 8
41397: DOUBLE
41398: EQUAL
41399: IFTRUE 41433
41401: LD_INT 4
41403: DOUBLE
41404: EQUAL
41405: IFTRUE 41433
41407: LD_INT 5
41409: DOUBLE
41410: EQUAL
41411: IFTRUE 41433
41413: LD_INT 2
41415: DOUBLE
41416: EQUAL
41417: IFTRUE 41433
41419: LD_INT 3
41421: DOUBLE
41422: EQUAL
41423: IFTRUE 41433
41425: LD_INT 35
41427: DOUBLE
41428: EQUAL
41429: IFTRUE 41433
41431: GO 41444
41433: POP
// places := 6 ; b_bunker , b_breastwork :
41434: LD_ADDR_VAR 0 3
41438: PUSH
41439: LD_INT 6
41441: ST_TO_ADDR
41442: GO 41489
41444: LD_INT 32
41446: DOUBLE
41447: EQUAL
41448: IFTRUE 41458
41450: LD_INT 31
41452: DOUBLE
41453: EQUAL
41454: IFTRUE 41458
41456: GO 41469
41458: POP
// places := 1 ; b_control_tower :
41459: LD_ADDR_VAR 0 3
41463: PUSH
41464: LD_INT 1
41466: ST_TO_ADDR
41467: GO 41489
41469: LD_INT 36
41471: DOUBLE
41472: EQUAL
41473: IFTRUE 41477
41475: GO 41488
41477: POP
// places := 3 ; end ;
41478: LD_ADDR_VAR 0 3
41482: PUSH
41483: LD_INT 3
41485: ST_TO_ADDR
41486: GO 41489
41488: POP
// if places then
41489: LD_VAR 0 3
41493: IFFALSE 41516
// result := UnitsInside ( building ) < places ;
41495: LD_ADDR_VAR 0 2
41499: PUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 313
41509: PUSH
41510: LD_VAR 0 3
41514: LESS
41515: ST_TO_ADDR
// end ;
41516: LD_VAR 0 2
41520: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41521: LD_INT 0
41523: PPUSH
41524: PPUSH
41525: PPUSH
41526: PPUSH
// tmp := [ ] ;
41527: LD_ADDR_VAR 0 3
41531: PUSH
41532: EMPTY
41533: ST_TO_ADDR
// list := [ ] ;
41534: LD_ADDR_VAR 0 5
41538: PUSH
41539: EMPTY
41540: ST_TO_ADDR
// for i = 16 to 25 do
41541: LD_ADDR_VAR 0 4
41545: PUSH
41546: DOUBLE
41547: LD_INT 16
41549: DEC
41550: ST_TO_ADDR
41551: LD_INT 25
41553: PUSH
41554: FOR_TO
41555: IFFALSE 41628
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41557: LD_ADDR_VAR 0 3
41561: PUSH
41562: LD_VAR 0 3
41566: PUSH
41567: LD_INT 22
41569: PUSH
41570: LD_VAR 0 1
41574: PPUSH
41575: CALL_OW 255
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 91
41586: PUSH
41587: LD_VAR 0 1
41591: PUSH
41592: LD_INT 6
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 30
41602: PUSH
41603: LD_VAR 0 4
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: PUSH
41617: EMPTY
41618: LIST
41619: PPUSH
41620: CALL_OW 69
41624: ADD
41625: ST_TO_ADDR
41626: GO 41554
41628: POP
41629: POP
// for i = 1 to tmp do
41630: LD_ADDR_VAR 0 4
41634: PUSH
41635: DOUBLE
41636: LD_INT 1
41638: DEC
41639: ST_TO_ADDR
41640: LD_VAR 0 3
41644: PUSH
41645: FOR_TO
41646: IFFALSE 41734
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41648: LD_ADDR_VAR 0 5
41652: PUSH
41653: LD_VAR 0 5
41657: PUSH
41658: LD_VAR 0 3
41662: PUSH
41663: LD_VAR 0 4
41667: ARRAY
41668: PPUSH
41669: CALL_OW 266
41673: PUSH
41674: LD_VAR 0 3
41678: PUSH
41679: LD_VAR 0 4
41683: ARRAY
41684: PPUSH
41685: CALL_OW 250
41689: PUSH
41690: LD_VAR 0 3
41694: PUSH
41695: LD_VAR 0 4
41699: ARRAY
41700: PPUSH
41701: CALL_OW 251
41705: PUSH
41706: LD_VAR 0 3
41710: PUSH
41711: LD_VAR 0 4
41715: ARRAY
41716: PPUSH
41717: CALL_OW 254
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: PUSH
41728: EMPTY
41729: LIST
41730: ADD
41731: ST_TO_ADDR
41732: GO 41645
41734: POP
41735: POP
// result := list ;
41736: LD_ADDR_VAR 0 2
41740: PUSH
41741: LD_VAR 0 5
41745: ST_TO_ADDR
// end ;
41746: LD_VAR 0 2
41750: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41751: LD_INT 0
41753: PPUSH
41754: PPUSH
41755: PPUSH
41756: PPUSH
41757: PPUSH
41758: PPUSH
41759: PPUSH
// if not factory then
41760: LD_VAR 0 1
41764: NOT
41765: IFFALSE 41769
// exit ;
41767: GO 42362
// if control = control_apeman then
41769: LD_VAR 0 4
41773: PUSH
41774: LD_INT 5
41776: EQUAL
41777: IFFALSE 41886
// begin tmp := UnitsInside ( factory ) ;
41779: LD_ADDR_VAR 0 8
41783: PUSH
41784: LD_VAR 0 1
41788: PPUSH
41789: CALL_OW 313
41793: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41794: LD_VAR 0 8
41798: PPUSH
41799: LD_INT 25
41801: PUSH
41802: LD_INT 12
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PPUSH
41809: CALL_OW 72
41813: NOT
41814: IFFALSE 41824
// control := control_manual ;
41816: LD_ADDR_VAR 0 4
41820: PUSH
41821: LD_INT 1
41823: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41824: LD_ADDR_VAR 0 8
41828: PUSH
41829: LD_VAR 0 1
41833: PPUSH
41834: CALL 41521 0 1
41838: ST_TO_ADDR
// if tmp then
41839: LD_VAR 0 8
41843: IFFALSE 41886
// begin for i in tmp do
41845: LD_ADDR_VAR 0 7
41849: PUSH
41850: LD_VAR 0 8
41854: PUSH
41855: FOR_IN
41856: IFFALSE 41884
// if i [ 1 ] = b_ext_radio then
41858: LD_VAR 0 7
41862: PUSH
41863: LD_INT 1
41865: ARRAY
41866: PUSH
41867: LD_INT 22
41869: EQUAL
41870: IFFALSE 41882
// begin control := control_remote ;
41872: LD_ADDR_VAR 0 4
41876: PUSH
41877: LD_INT 2
41879: ST_TO_ADDR
// break ;
41880: GO 41884
// end ;
41882: GO 41855
41884: POP
41885: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41886: LD_VAR 0 1
41890: PPUSH
41891: LD_VAR 0 2
41895: PPUSH
41896: LD_VAR 0 3
41900: PPUSH
41901: LD_VAR 0 4
41905: PPUSH
41906: LD_VAR 0 5
41910: PPUSH
41911: CALL_OW 448
41915: IFFALSE 41950
// begin result := [ chassis , engine , control , weapon ] ;
41917: LD_ADDR_VAR 0 6
41921: PUSH
41922: LD_VAR 0 2
41926: PUSH
41927: LD_VAR 0 3
41931: PUSH
41932: LD_VAR 0 4
41936: PUSH
41937: LD_VAR 0 5
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: ST_TO_ADDR
// exit ;
41948: GO 42362
// end ; _chassis := AvailableChassisList ( factory ) ;
41950: LD_ADDR_VAR 0 9
41954: PUSH
41955: LD_VAR 0 1
41959: PPUSH
41960: CALL_OW 475
41964: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41965: LD_ADDR_VAR 0 11
41969: PUSH
41970: LD_VAR 0 1
41974: PPUSH
41975: CALL_OW 476
41979: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41980: LD_ADDR_VAR 0 12
41984: PUSH
41985: LD_VAR 0 1
41989: PPUSH
41990: CALL_OW 477
41994: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41995: LD_ADDR_VAR 0 10
41999: PUSH
42000: LD_VAR 0 1
42004: PPUSH
42005: CALL_OW 478
42009: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42010: LD_VAR 0 9
42014: NOT
42015: PUSH
42016: LD_VAR 0 11
42020: NOT
42021: OR
42022: PUSH
42023: LD_VAR 0 12
42027: NOT
42028: OR
42029: PUSH
42030: LD_VAR 0 10
42034: NOT
42035: OR
42036: IFFALSE 42071
// begin result := [ chassis , engine , control , weapon ] ;
42038: LD_ADDR_VAR 0 6
42042: PUSH
42043: LD_VAR 0 2
42047: PUSH
42048: LD_VAR 0 3
42052: PUSH
42053: LD_VAR 0 4
42057: PUSH
42058: LD_VAR 0 5
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// exit ;
42069: GO 42362
// end ; if not chassis in _chassis then
42071: LD_VAR 0 2
42075: PUSH
42076: LD_VAR 0 9
42080: IN
42081: NOT
42082: IFFALSE 42108
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42084: LD_ADDR_VAR 0 2
42088: PUSH
42089: LD_VAR 0 9
42093: PUSH
42094: LD_INT 1
42096: PPUSH
42097: LD_VAR 0 9
42101: PPUSH
42102: CALL_OW 12
42106: ARRAY
42107: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42108: LD_VAR 0 2
42112: PPUSH
42113: LD_VAR 0 3
42117: PPUSH
42118: CALL 42367 0 2
42122: NOT
42123: IFFALSE 42182
// repeat engine := _engine [ 1 ] ;
42125: LD_ADDR_VAR 0 3
42129: PUSH
42130: LD_VAR 0 11
42134: PUSH
42135: LD_INT 1
42137: ARRAY
42138: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42139: LD_ADDR_VAR 0 11
42143: PUSH
42144: LD_VAR 0 11
42148: PPUSH
42149: LD_INT 1
42151: PPUSH
42152: CALL_OW 3
42156: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42157: LD_VAR 0 2
42161: PPUSH
42162: LD_VAR 0 3
42166: PPUSH
42167: CALL 42367 0 2
42171: PUSH
42172: LD_VAR 0 11
42176: PUSH
42177: EMPTY
42178: EQUAL
42179: OR
42180: IFFALSE 42125
// if not control in _control then
42182: LD_VAR 0 4
42186: PUSH
42187: LD_VAR 0 12
42191: IN
42192: NOT
42193: IFFALSE 42219
// control := _control [ rand ( 1 , _control ) ] ;
42195: LD_ADDR_VAR 0 4
42199: PUSH
42200: LD_VAR 0 12
42204: PUSH
42205: LD_INT 1
42207: PPUSH
42208: LD_VAR 0 12
42212: PPUSH
42213: CALL_OW 12
42217: ARRAY
42218: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42219: LD_VAR 0 2
42223: PPUSH
42224: LD_VAR 0 5
42228: PPUSH
42229: CALL 42587 0 2
42233: NOT
42234: IFFALSE 42293
// repeat weapon := _weapon [ 1 ] ;
42236: LD_ADDR_VAR 0 5
42240: PUSH
42241: LD_VAR 0 10
42245: PUSH
42246: LD_INT 1
42248: ARRAY
42249: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42250: LD_ADDR_VAR 0 10
42254: PUSH
42255: LD_VAR 0 10
42259: PPUSH
42260: LD_INT 1
42262: PPUSH
42263: CALL_OW 3
42267: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42268: LD_VAR 0 2
42272: PPUSH
42273: LD_VAR 0 5
42277: PPUSH
42278: CALL 42587 0 2
42282: PUSH
42283: LD_VAR 0 10
42287: PUSH
42288: EMPTY
42289: EQUAL
42290: OR
42291: IFFALSE 42236
// result := [ ] ;
42293: LD_ADDR_VAR 0 6
42297: PUSH
42298: EMPTY
42299: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42300: LD_VAR 0 1
42304: PPUSH
42305: LD_VAR 0 2
42309: PPUSH
42310: LD_VAR 0 3
42314: PPUSH
42315: LD_VAR 0 4
42319: PPUSH
42320: LD_VAR 0 5
42324: PPUSH
42325: CALL_OW 448
42329: IFFALSE 42362
// result := [ chassis , engine , control , weapon ] ;
42331: LD_ADDR_VAR 0 6
42335: PUSH
42336: LD_VAR 0 2
42340: PUSH
42341: LD_VAR 0 3
42345: PUSH
42346: LD_VAR 0 4
42350: PUSH
42351: LD_VAR 0 5
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: ST_TO_ADDR
// end ;
42362: LD_VAR 0 6
42366: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42367: LD_INT 0
42369: PPUSH
// if not chassis or not engine then
42370: LD_VAR 0 1
42374: NOT
42375: PUSH
42376: LD_VAR 0 2
42380: NOT
42381: OR
42382: IFFALSE 42386
// exit ;
42384: GO 42582
// case engine of engine_solar :
42386: LD_VAR 0 2
42390: PUSH
42391: LD_INT 2
42393: DOUBLE
42394: EQUAL
42395: IFTRUE 42399
42397: GO 42437
42399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42400: LD_ADDR_VAR 0 3
42404: PUSH
42405: LD_INT 11
42407: PUSH
42408: LD_INT 12
42410: PUSH
42411: LD_INT 13
42413: PUSH
42414: LD_INT 14
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: LD_INT 3
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: ST_TO_ADDR
42435: GO 42566
42437: LD_INT 1
42439: DOUBLE
42440: EQUAL
42441: IFTRUE 42445
42443: GO 42507
42445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42446: LD_ADDR_VAR 0 3
42450: PUSH
42451: LD_INT 11
42453: PUSH
42454: LD_INT 12
42456: PUSH
42457: LD_INT 13
42459: PUSH
42460: LD_INT 14
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: LD_INT 4
42474: PUSH
42475: LD_INT 5
42477: PUSH
42478: LD_INT 21
42480: PUSH
42481: LD_INT 23
42483: PUSH
42484: LD_INT 22
42486: PUSH
42487: LD_INT 24
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
42505: GO 42566
42507: LD_INT 3
42509: DOUBLE
42510: EQUAL
42511: IFTRUE 42515
42513: GO 42565
42515: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42516: LD_ADDR_VAR 0 3
42520: PUSH
42521: LD_INT 13
42523: PUSH
42524: LD_INT 14
42526: PUSH
42527: LD_INT 2
42529: PUSH
42530: LD_INT 3
42532: PUSH
42533: LD_INT 4
42535: PUSH
42536: LD_INT 5
42538: PUSH
42539: LD_INT 21
42541: PUSH
42542: LD_INT 22
42544: PUSH
42545: LD_INT 23
42547: PUSH
42548: LD_INT 24
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: ST_TO_ADDR
42563: GO 42566
42565: POP
// result := ( chassis in result ) ;
42566: LD_ADDR_VAR 0 3
42570: PUSH
42571: LD_VAR 0 1
42575: PUSH
42576: LD_VAR 0 3
42580: IN
42581: ST_TO_ADDR
// end ;
42582: LD_VAR 0 3
42586: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42587: LD_INT 0
42589: PPUSH
// if not chassis or not weapon then
42590: LD_VAR 0 1
42594: NOT
42595: PUSH
42596: LD_VAR 0 2
42600: NOT
42601: OR
42602: IFFALSE 42606
// exit ;
42604: GO 43666
// case weapon of us_machine_gun :
42606: LD_VAR 0 2
42610: PUSH
42611: LD_INT 2
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42619
42617: GO 42649
42619: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42620: LD_ADDR_VAR 0 3
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: LD_INT 4
42636: PUSH
42637: LD_INT 5
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: ST_TO_ADDR
42647: GO 43650
42649: LD_INT 3
42651: DOUBLE
42652: EQUAL
42653: IFTRUE 42657
42655: GO 42687
42657: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42658: LD_ADDR_VAR 0 3
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: LD_INT 3
42671: PUSH
42672: LD_INT 4
42674: PUSH
42675: LD_INT 5
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: ST_TO_ADDR
42685: GO 43650
42687: LD_INT 11
42689: DOUBLE
42690: EQUAL
42691: IFTRUE 42695
42693: GO 42725
42695: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42696: LD_ADDR_VAR 0 3
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: LD_INT 4
42712: PUSH
42713: LD_INT 5
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: ST_TO_ADDR
42723: GO 43650
42725: LD_INT 4
42727: DOUBLE
42728: EQUAL
42729: IFTRUE 42733
42731: GO 42759
42733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42734: LD_ADDR_VAR 0 3
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 3
42744: PUSH
42745: LD_INT 4
42747: PUSH
42748: LD_INT 5
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: ST_TO_ADDR
42757: GO 43650
42759: LD_INT 5
42761: DOUBLE
42762: EQUAL
42763: IFTRUE 42767
42765: GO 42793
42767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42768: LD_ADDR_VAR 0 3
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: LD_INT 4
42781: PUSH
42782: LD_INT 5
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: ST_TO_ADDR
42791: GO 43650
42793: LD_INT 9
42795: DOUBLE
42796: EQUAL
42797: IFTRUE 42801
42799: GO 42827
42801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42802: LD_ADDR_VAR 0 3
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: LD_INT 4
42815: PUSH
42816: LD_INT 5
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
42825: GO 43650
42827: LD_INT 7
42829: DOUBLE
42830: EQUAL
42831: IFTRUE 42835
42833: GO 42861
42835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42836: LD_ADDR_VAR 0 3
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 3
42846: PUSH
42847: LD_INT 4
42849: PUSH
42850: LD_INT 5
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: ST_TO_ADDR
42859: GO 43650
42861: LD_INT 12
42863: DOUBLE
42864: EQUAL
42865: IFTRUE 42869
42867: GO 42895
42869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42870: LD_ADDR_VAR 0 3
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: LD_INT 4
42883: PUSH
42884: LD_INT 5
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: ST_TO_ADDR
42893: GO 43650
42895: LD_INT 13
42897: DOUBLE
42898: EQUAL
42899: IFTRUE 42903
42901: GO 42929
42903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42904: LD_ADDR_VAR 0 3
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: LD_INT 4
42917: PUSH
42918: LD_INT 5
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
42927: GO 43650
42929: LD_INT 14
42931: DOUBLE
42932: EQUAL
42933: IFTRUE 42937
42935: GO 42955
42937: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42938: LD_ADDR_VAR 0 3
42942: PUSH
42943: LD_INT 4
42945: PUSH
42946: LD_INT 5
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: ST_TO_ADDR
42953: GO 43650
42955: LD_INT 6
42957: DOUBLE
42958: EQUAL
42959: IFTRUE 42963
42961: GO 42981
42963: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42964: LD_ADDR_VAR 0 3
42968: PUSH
42969: LD_INT 4
42971: PUSH
42972: LD_INT 5
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: ST_TO_ADDR
42979: GO 43650
42981: LD_INT 10
42983: DOUBLE
42984: EQUAL
42985: IFTRUE 42989
42987: GO 43007
42989: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42990: LD_ADDR_VAR 0 3
42994: PUSH
42995: LD_INT 4
42997: PUSH
42998: LD_INT 5
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: ST_TO_ADDR
43005: GO 43650
43007: LD_INT 22
43009: DOUBLE
43010: EQUAL
43011: IFTRUE 43015
43013: GO 43041
43015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43016: LD_ADDR_VAR 0 3
43020: PUSH
43021: LD_INT 11
43023: PUSH
43024: LD_INT 12
43026: PUSH
43027: LD_INT 13
43029: PUSH
43030: LD_INT 14
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: ST_TO_ADDR
43039: GO 43650
43041: LD_INT 23
43043: DOUBLE
43044: EQUAL
43045: IFTRUE 43049
43047: GO 43075
43049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43050: LD_ADDR_VAR 0 3
43054: PUSH
43055: LD_INT 11
43057: PUSH
43058: LD_INT 12
43060: PUSH
43061: LD_INT 13
43063: PUSH
43064: LD_INT 14
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: ST_TO_ADDR
43073: GO 43650
43075: LD_INT 24
43077: DOUBLE
43078: EQUAL
43079: IFTRUE 43083
43081: GO 43109
43083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43084: LD_ADDR_VAR 0 3
43088: PUSH
43089: LD_INT 11
43091: PUSH
43092: LD_INT 12
43094: PUSH
43095: LD_INT 13
43097: PUSH
43098: LD_INT 14
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: ST_TO_ADDR
43107: GO 43650
43109: LD_INT 30
43111: DOUBLE
43112: EQUAL
43113: IFTRUE 43117
43115: GO 43143
43117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43118: LD_ADDR_VAR 0 3
43122: PUSH
43123: LD_INT 11
43125: PUSH
43126: LD_INT 12
43128: PUSH
43129: LD_INT 13
43131: PUSH
43132: LD_INT 14
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: ST_TO_ADDR
43141: GO 43650
43143: LD_INT 25
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 43169
43151: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43152: LD_ADDR_VAR 0 3
43156: PUSH
43157: LD_INT 13
43159: PUSH
43160: LD_INT 14
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: ST_TO_ADDR
43167: GO 43650
43169: LD_INT 27
43171: DOUBLE
43172: EQUAL
43173: IFTRUE 43177
43175: GO 43195
43177: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43178: LD_ADDR_VAR 0 3
43182: PUSH
43183: LD_INT 13
43185: PUSH
43186: LD_INT 14
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: ST_TO_ADDR
43193: GO 43650
43195: LD_INT 92
43197: DOUBLE
43198: EQUAL
43199: IFTRUE 43203
43201: GO 43229
43203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43204: LD_ADDR_VAR 0 3
43208: PUSH
43209: LD_INT 11
43211: PUSH
43212: LD_INT 12
43214: PUSH
43215: LD_INT 13
43217: PUSH
43218: LD_INT 14
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: ST_TO_ADDR
43227: GO 43650
43229: LD_INT 28
43231: DOUBLE
43232: EQUAL
43233: IFTRUE 43237
43235: GO 43255
43237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43238: LD_ADDR_VAR 0 3
43242: PUSH
43243: LD_INT 13
43245: PUSH
43246: LD_INT 14
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: ST_TO_ADDR
43253: GO 43650
43255: LD_INT 29
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43281
43263: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43264: LD_ADDR_VAR 0 3
43268: PUSH
43269: LD_INT 13
43271: PUSH
43272: LD_INT 14
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: ST_TO_ADDR
43279: GO 43650
43281: LD_INT 31
43283: DOUBLE
43284: EQUAL
43285: IFTRUE 43289
43287: GO 43307
43289: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43290: LD_ADDR_VAR 0 3
43294: PUSH
43295: LD_INT 13
43297: PUSH
43298: LD_INT 14
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: ST_TO_ADDR
43305: GO 43650
43307: LD_INT 26
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43333
43315: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_INT 13
43323: PUSH
43324: LD_INT 14
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: ST_TO_ADDR
43331: GO 43650
43333: LD_INT 42
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43341
43339: GO 43367
43341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43342: LD_ADDR_VAR 0 3
43346: PUSH
43347: LD_INT 21
43349: PUSH
43350: LD_INT 22
43352: PUSH
43353: LD_INT 23
43355: PUSH
43356: LD_INT 24
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
43365: GO 43650
43367: LD_INT 43
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43375
43373: GO 43401
43375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43376: LD_ADDR_VAR 0 3
43380: PUSH
43381: LD_INT 21
43383: PUSH
43384: LD_INT 22
43386: PUSH
43387: LD_INT 23
43389: PUSH
43390: LD_INT 24
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
43399: GO 43650
43401: LD_INT 44
43403: DOUBLE
43404: EQUAL
43405: IFTRUE 43409
43407: GO 43435
43409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_INT 21
43417: PUSH
43418: LD_INT 22
43420: PUSH
43421: LD_INT 23
43423: PUSH
43424: LD_INT 24
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: ST_TO_ADDR
43433: GO 43650
43435: LD_INT 45
43437: DOUBLE
43438: EQUAL
43439: IFTRUE 43443
43441: GO 43469
43443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43444: LD_ADDR_VAR 0 3
43448: PUSH
43449: LD_INT 21
43451: PUSH
43452: LD_INT 22
43454: PUSH
43455: LD_INT 23
43457: PUSH
43458: LD_INT 24
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: ST_TO_ADDR
43467: GO 43650
43469: LD_INT 49
43471: DOUBLE
43472: EQUAL
43473: IFTRUE 43477
43475: GO 43503
43477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43478: LD_ADDR_VAR 0 3
43482: PUSH
43483: LD_INT 21
43485: PUSH
43486: LD_INT 22
43488: PUSH
43489: LD_INT 23
43491: PUSH
43492: LD_INT 24
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: ST_TO_ADDR
43501: GO 43650
43503: LD_INT 51
43505: DOUBLE
43506: EQUAL
43507: IFTRUE 43511
43509: GO 43537
43511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43512: LD_ADDR_VAR 0 3
43516: PUSH
43517: LD_INT 21
43519: PUSH
43520: LD_INT 22
43522: PUSH
43523: LD_INT 23
43525: PUSH
43526: LD_INT 24
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: ST_TO_ADDR
43535: GO 43650
43537: LD_INT 52
43539: DOUBLE
43540: EQUAL
43541: IFTRUE 43545
43543: GO 43571
43545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43546: LD_ADDR_VAR 0 3
43550: PUSH
43551: LD_INT 21
43553: PUSH
43554: LD_INT 22
43556: PUSH
43557: LD_INT 23
43559: PUSH
43560: LD_INT 24
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: ST_TO_ADDR
43569: GO 43650
43571: LD_INT 53
43573: DOUBLE
43574: EQUAL
43575: IFTRUE 43579
43577: GO 43597
43579: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43580: LD_ADDR_VAR 0 3
43584: PUSH
43585: LD_INT 23
43587: PUSH
43588: LD_INT 24
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: ST_TO_ADDR
43595: GO 43650
43597: LD_INT 46
43599: DOUBLE
43600: EQUAL
43601: IFTRUE 43605
43603: GO 43623
43605: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43606: LD_ADDR_VAR 0 3
43610: PUSH
43611: LD_INT 23
43613: PUSH
43614: LD_INT 24
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: ST_TO_ADDR
43621: GO 43650
43623: LD_INT 47
43625: DOUBLE
43626: EQUAL
43627: IFTRUE 43631
43629: GO 43649
43631: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43632: LD_ADDR_VAR 0 3
43636: PUSH
43637: LD_INT 23
43639: PUSH
43640: LD_INT 24
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: ST_TO_ADDR
43647: GO 43650
43649: POP
// result := ( chassis in result ) ;
43650: LD_ADDR_VAR 0 3
43654: PUSH
43655: LD_VAR 0 1
43659: PUSH
43660: LD_VAR 0 3
43664: IN
43665: ST_TO_ADDR
// end ;
43666: LD_VAR 0 3
43670: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43671: LD_INT 0
43673: PPUSH
43674: PPUSH
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
// result := array ;
43680: LD_ADDR_VAR 0 5
43684: PUSH
43685: LD_VAR 0 1
43689: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43690: LD_VAR 0 1
43694: NOT
43695: PUSH
43696: LD_VAR 0 2
43700: NOT
43701: OR
43702: PUSH
43703: LD_VAR 0 3
43707: NOT
43708: OR
43709: PUSH
43710: LD_VAR 0 2
43714: PUSH
43715: LD_VAR 0 1
43719: GREATER
43720: OR
43721: PUSH
43722: LD_VAR 0 3
43726: PUSH
43727: LD_VAR 0 1
43731: GREATER
43732: OR
43733: IFFALSE 43737
// exit ;
43735: GO 44033
// if direction then
43737: LD_VAR 0 4
43741: IFFALSE 43805
// begin d := 1 ;
43743: LD_ADDR_VAR 0 9
43747: PUSH
43748: LD_INT 1
43750: ST_TO_ADDR
// if i_from > i_to then
43751: LD_VAR 0 2
43755: PUSH
43756: LD_VAR 0 3
43760: GREATER
43761: IFFALSE 43787
// length := ( array - i_from ) + i_to else
43763: LD_ADDR_VAR 0 11
43767: PUSH
43768: LD_VAR 0 1
43772: PUSH
43773: LD_VAR 0 2
43777: MINUS
43778: PUSH
43779: LD_VAR 0 3
43783: PLUS
43784: ST_TO_ADDR
43785: GO 43803
// length := i_to - i_from ;
43787: LD_ADDR_VAR 0 11
43791: PUSH
43792: LD_VAR 0 3
43796: PUSH
43797: LD_VAR 0 2
43801: MINUS
43802: ST_TO_ADDR
// end else
43803: GO 43866
// begin d := - 1 ;
43805: LD_ADDR_VAR 0 9
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: ST_TO_ADDR
// if i_from > i_to then
43814: LD_VAR 0 2
43818: PUSH
43819: LD_VAR 0 3
43823: GREATER
43824: IFFALSE 43844
// length := i_from - i_to else
43826: LD_ADDR_VAR 0 11
43830: PUSH
43831: LD_VAR 0 2
43835: PUSH
43836: LD_VAR 0 3
43840: MINUS
43841: ST_TO_ADDR
43842: GO 43866
// length := ( array - i_to ) + i_from ;
43844: LD_ADDR_VAR 0 11
43848: PUSH
43849: LD_VAR 0 1
43853: PUSH
43854: LD_VAR 0 3
43858: MINUS
43859: PUSH
43860: LD_VAR 0 2
43864: PLUS
43865: ST_TO_ADDR
// end ; if not length then
43866: LD_VAR 0 11
43870: NOT
43871: IFFALSE 43875
// exit ;
43873: GO 44033
// tmp := array ;
43875: LD_ADDR_VAR 0 10
43879: PUSH
43880: LD_VAR 0 1
43884: ST_TO_ADDR
// for i = 1 to length do
43885: LD_ADDR_VAR 0 6
43889: PUSH
43890: DOUBLE
43891: LD_INT 1
43893: DEC
43894: ST_TO_ADDR
43895: LD_VAR 0 11
43899: PUSH
43900: FOR_TO
43901: IFFALSE 44021
// begin for j = 1 to array do
43903: LD_ADDR_VAR 0 7
43907: PUSH
43908: DOUBLE
43909: LD_INT 1
43911: DEC
43912: ST_TO_ADDR
43913: LD_VAR 0 1
43917: PUSH
43918: FOR_TO
43919: IFFALSE 44007
// begin k := j + d ;
43921: LD_ADDR_VAR 0 8
43925: PUSH
43926: LD_VAR 0 7
43930: PUSH
43931: LD_VAR 0 9
43935: PLUS
43936: ST_TO_ADDR
// if k > array then
43937: LD_VAR 0 8
43941: PUSH
43942: LD_VAR 0 1
43946: GREATER
43947: IFFALSE 43957
// k := 1 ;
43949: LD_ADDR_VAR 0 8
43953: PUSH
43954: LD_INT 1
43956: ST_TO_ADDR
// if not k then
43957: LD_VAR 0 8
43961: NOT
43962: IFFALSE 43974
// k := array ;
43964: LD_ADDR_VAR 0 8
43968: PUSH
43969: LD_VAR 0 1
43973: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43974: LD_ADDR_VAR 0 10
43978: PUSH
43979: LD_VAR 0 10
43983: PPUSH
43984: LD_VAR 0 8
43988: PPUSH
43989: LD_VAR 0 1
43993: PUSH
43994: LD_VAR 0 7
43998: ARRAY
43999: PPUSH
44000: CALL_OW 1
44004: ST_TO_ADDR
// end ;
44005: GO 43918
44007: POP
44008: POP
// array := tmp ;
44009: LD_ADDR_VAR 0 1
44013: PUSH
44014: LD_VAR 0 10
44018: ST_TO_ADDR
// end ;
44019: GO 43900
44021: POP
44022: POP
// result := array ;
44023: LD_ADDR_VAR 0 5
44027: PUSH
44028: LD_VAR 0 1
44032: ST_TO_ADDR
// end ;
44033: LD_VAR 0 5
44037: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44038: LD_INT 0
44040: PPUSH
44041: PPUSH
// result := 0 ;
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_INT 0
44049: ST_TO_ADDR
// if not array or not value in array then
44050: LD_VAR 0 1
44054: NOT
44055: PUSH
44056: LD_VAR 0 2
44060: PUSH
44061: LD_VAR 0 1
44065: IN
44066: NOT
44067: OR
44068: IFFALSE 44072
// exit ;
44070: GO 44126
// for i = 1 to array do
44072: LD_ADDR_VAR 0 4
44076: PUSH
44077: DOUBLE
44078: LD_INT 1
44080: DEC
44081: ST_TO_ADDR
44082: LD_VAR 0 1
44086: PUSH
44087: FOR_TO
44088: IFFALSE 44124
// if value = array [ i ] then
44090: LD_VAR 0 2
44094: PUSH
44095: LD_VAR 0 1
44099: PUSH
44100: LD_VAR 0 4
44104: ARRAY
44105: EQUAL
44106: IFFALSE 44122
// begin result := i ;
44108: LD_ADDR_VAR 0 3
44112: PUSH
44113: LD_VAR 0 4
44117: ST_TO_ADDR
// exit ;
44118: POP
44119: POP
44120: GO 44126
// end ;
44122: GO 44087
44124: POP
44125: POP
// end ;
44126: LD_VAR 0 3
44130: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44131: LD_INT 0
44133: PPUSH
// vc_chassis := chassis ;
44134: LD_ADDR_OWVAR 37
44138: PUSH
44139: LD_VAR 0 1
44143: ST_TO_ADDR
// vc_engine := engine ;
44144: LD_ADDR_OWVAR 39
44148: PUSH
44149: LD_VAR 0 2
44153: ST_TO_ADDR
// vc_control := control ;
44154: LD_ADDR_OWVAR 38
44158: PUSH
44159: LD_VAR 0 3
44163: ST_TO_ADDR
// vc_weapon := weapon ;
44164: LD_ADDR_OWVAR 40
44168: PUSH
44169: LD_VAR 0 4
44173: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44174: LD_ADDR_OWVAR 41
44178: PUSH
44179: LD_VAR 0 5
44183: ST_TO_ADDR
// end ;
44184: LD_VAR 0 6
44188: RET
// export function WantPlant ( unit ) ; var task ; begin
44189: LD_INT 0
44191: PPUSH
44192: PPUSH
// result := false ;
44193: LD_ADDR_VAR 0 2
44197: PUSH
44198: LD_INT 0
44200: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44201: LD_ADDR_VAR 0 3
44205: PUSH
44206: LD_VAR 0 1
44210: PPUSH
44211: CALL_OW 437
44215: ST_TO_ADDR
// if task then
44216: LD_VAR 0 3
44220: IFFALSE 44248
// if task [ 1 ] [ 1 ] = p then
44222: LD_VAR 0 3
44226: PUSH
44227: LD_INT 1
44229: ARRAY
44230: PUSH
44231: LD_INT 1
44233: ARRAY
44234: PUSH
44235: LD_STRING p
44237: EQUAL
44238: IFFALSE 44248
// result := true ;
44240: LD_ADDR_VAR 0 2
44244: PUSH
44245: LD_INT 1
44247: ST_TO_ADDR
// end ;
44248: LD_VAR 0 2
44252: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44253: LD_INT 0
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
// if pos < 1 then
44259: LD_VAR 0 2
44263: PUSH
44264: LD_INT 1
44266: LESS
44267: IFFALSE 44271
// exit ;
44269: GO 44574
// if pos = 1 then
44271: LD_VAR 0 2
44275: PUSH
44276: LD_INT 1
44278: EQUAL
44279: IFFALSE 44312
// result := Replace ( arr , pos [ 1 ] , value ) else
44281: LD_ADDR_VAR 0 4
44285: PUSH
44286: LD_VAR 0 1
44290: PPUSH
44291: LD_VAR 0 2
44295: PUSH
44296: LD_INT 1
44298: ARRAY
44299: PPUSH
44300: LD_VAR 0 3
44304: PPUSH
44305: CALL_OW 1
44309: ST_TO_ADDR
44310: GO 44574
// begin tmp := arr ;
44312: LD_ADDR_VAR 0 6
44316: PUSH
44317: LD_VAR 0 1
44321: ST_TO_ADDR
// s_arr := [ tmp ] ;
44322: LD_ADDR_VAR 0 7
44326: PUSH
44327: LD_VAR 0 6
44331: PUSH
44332: EMPTY
44333: LIST
44334: ST_TO_ADDR
// for i = 1 to pos - 1 do
44335: LD_ADDR_VAR 0 5
44339: PUSH
44340: DOUBLE
44341: LD_INT 1
44343: DEC
44344: ST_TO_ADDR
44345: LD_VAR 0 2
44349: PUSH
44350: LD_INT 1
44352: MINUS
44353: PUSH
44354: FOR_TO
44355: IFFALSE 44400
// begin tmp := tmp [ pos [ i ] ] ;
44357: LD_ADDR_VAR 0 6
44361: PUSH
44362: LD_VAR 0 6
44366: PUSH
44367: LD_VAR 0 2
44371: PUSH
44372: LD_VAR 0 5
44376: ARRAY
44377: ARRAY
44378: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44379: LD_ADDR_VAR 0 7
44383: PUSH
44384: LD_VAR 0 7
44388: PUSH
44389: LD_VAR 0 6
44393: PUSH
44394: EMPTY
44395: LIST
44396: ADD
44397: ST_TO_ADDR
// end ;
44398: GO 44354
44400: POP
44401: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44402: LD_ADDR_VAR 0 6
44406: PUSH
44407: LD_VAR 0 6
44411: PPUSH
44412: LD_VAR 0 2
44416: PUSH
44417: LD_VAR 0 2
44421: ARRAY
44422: PPUSH
44423: LD_VAR 0 3
44427: PPUSH
44428: CALL_OW 1
44432: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44433: LD_ADDR_VAR 0 7
44437: PUSH
44438: LD_VAR 0 7
44442: PPUSH
44443: LD_VAR 0 7
44447: PPUSH
44448: LD_VAR 0 6
44452: PPUSH
44453: CALL_OW 1
44457: ST_TO_ADDR
// for i = s_arr downto 2 do
44458: LD_ADDR_VAR 0 5
44462: PUSH
44463: DOUBLE
44464: LD_VAR 0 7
44468: INC
44469: ST_TO_ADDR
44470: LD_INT 2
44472: PUSH
44473: FOR_DOWNTO
44474: IFFALSE 44558
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44476: LD_ADDR_VAR 0 6
44480: PUSH
44481: LD_VAR 0 7
44485: PUSH
44486: LD_VAR 0 5
44490: PUSH
44491: LD_INT 1
44493: MINUS
44494: ARRAY
44495: PPUSH
44496: LD_VAR 0 2
44500: PUSH
44501: LD_VAR 0 5
44505: PUSH
44506: LD_INT 1
44508: MINUS
44509: ARRAY
44510: PPUSH
44511: LD_VAR 0 7
44515: PUSH
44516: LD_VAR 0 5
44520: ARRAY
44521: PPUSH
44522: CALL_OW 1
44526: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44527: LD_ADDR_VAR 0 7
44531: PUSH
44532: LD_VAR 0 7
44536: PPUSH
44537: LD_VAR 0 5
44541: PUSH
44542: LD_INT 1
44544: MINUS
44545: PPUSH
44546: LD_VAR 0 6
44550: PPUSH
44551: CALL_OW 1
44555: ST_TO_ADDR
// end ;
44556: GO 44473
44558: POP
44559: POP
// result := s_arr [ 1 ] ;
44560: LD_ADDR_VAR 0 4
44564: PUSH
44565: LD_VAR 0 7
44569: PUSH
44570: LD_INT 1
44572: ARRAY
44573: ST_TO_ADDR
// end ; end ;
44574: LD_VAR 0 4
44578: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44579: LD_INT 0
44581: PPUSH
44582: PPUSH
// if not list then
44583: LD_VAR 0 1
44587: NOT
44588: IFFALSE 44592
// exit ;
44590: GO 44683
// i := list [ pos1 ] ;
44592: LD_ADDR_VAR 0 5
44596: PUSH
44597: LD_VAR 0 1
44601: PUSH
44602: LD_VAR 0 2
44606: ARRAY
44607: ST_TO_ADDR
// if not i then
44608: LD_VAR 0 5
44612: NOT
44613: IFFALSE 44617
// exit ;
44615: GO 44683
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44617: LD_ADDR_VAR 0 1
44621: PUSH
44622: LD_VAR 0 1
44626: PPUSH
44627: LD_VAR 0 2
44631: PPUSH
44632: LD_VAR 0 1
44636: PUSH
44637: LD_VAR 0 3
44641: ARRAY
44642: PPUSH
44643: CALL_OW 1
44647: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44648: LD_ADDR_VAR 0 1
44652: PUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: LD_VAR 0 3
44662: PPUSH
44663: LD_VAR 0 5
44667: PPUSH
44668: CALL_OW 1
44672: ST_TO_ADDR
// result := list ;
44673: LD_ADDR_VAR 0 4
44677: PUSH
44678: LD_VAR 0 1
44682: ST_TO_ADDR
// end ;
44683: LD_VAR 0 4
44687: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44688: LD_INT 0
44690: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44691: LD_ADDR_VAR 0 5
44695: PUSH
44696: LD_VAR 0 1
44700: PPUSH
44701: CALL_OW 250
44705: PPUSH
44706: LD_VAR 0 1
44710: PPUSH
44711: CALL_OW 251
44715: PPUSH
44716: LD_VAR 0 2
44720: PPUSH
44721: LD_VAR 0 3
44725: PPUSH
44726: LD_VAR 0 4
44730: PPUSH
44731: CALL 44741 0 5
44735: ST_TO_ADDR
// end ;
44736: LD_VAR 0 5
44740: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44741: LD_INT 0
44743: PPUSH
44744: PPUSH
44745: PPUSH
44746: PPUSH
// if not list then
44747: LD_VAR 0 3
44751: NOT
44752: IFFALSE 44756
// exit ;
44754: GO 45144
// result := [ ] ;
44756: LD_ADDR_VAR 0 6
44760: PUSH
44761: EMPTY
44762: ST_TO_ADDR
// for i in list do
44763: LD_ADDR_VAR 0 7
44767: PUSH
44768: LD_VAR 0 3
44772: PUSH
44773: FOR_IN
44774: IFFALSE 44976
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44776: LD_ADDR_VAR 0 9
44780: PUSH
44781: LD_VAR 0 7
44785: PPUSH
44786: LD_VAR 0 1
44790: PPUSH
44791: LD_VAR 0 2
44795: PPUSH
44796: CALL_OW 297
44800: ST_TO_ADDR
// if not result then
44801: LD_VAR 0 6
44805: NOT
44806: IFFALSE 44832
// result := [ [ i , tmp ] ] else
44808: LD_ADDR_VAR 0 6
44812: PUSH
44813: LD_VAR 0 7
44817: PUSH
44818: LD_VAR 0 9
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: ST_TO_ADDR
44830: GO 44974
// begin if result [ result ] [ 2 ] < tmp then
44832: LD_VAR 0 6
44836: PUSH
44837: LD_VAR 0 6
44841: ARRAY
44842: PUSH
44843: LD_INT 2
44845: ARRAY
44846: PUSH
44847: LD_VAR 0 9
44851: LESS
44852: IFFALSE 44894
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44854: LD_ADDR_VAR 0 6
44858: PUSH
44859: LD_VAR 0 6
44863: PPUSH
44864: LD_VAR 0 6
44868: PUSH
44869: LD_INT 1
44871: PLUS
44872: PPUSH
44873: LD_VAR 0 7
44877: PUSH
44878: LD_VAR 0 9
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PPUSH
44887: CALL_OW 2
44891: ST_TO_ADDR
44892: GO 44974
// for j = 1 to result do
44894: LD_ADDR_VAR 0 8
44898: PUSH
44899: DOUBLE
44900: LD_INT 1
44902: DEC
44903: ST_TO_ADDR
44904: LD_VAR 0 6
44908: PUSH
44909: FOR_TO
44910: IFFALSE 44972
// begin if tmp < result [ j ] [ 2 ] then
44912: LD_VAR 0 9
44916: PUSH
44917: LD_VAR 0 6
44921: PUSH
44922: LD_VAR 0 8
44926: ARRAY
44927: PUSH
44928: LD_INT 2
44930: ARRAY
44931: LESS
44932: IFFALSE 44970
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44934: LD_ADDR_VAR 0 6
44938: PUSH
44939: LD_VAR 0 6
44943: PPUSH
44944: LD_VAR 0 8
44948: PPUSH
44949: LD_VAR 0 7
44953: PUSH
44954: LD_VAR 0 9
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PPUSH
44963: CALL_OW 2
44967: ST_TO_ADDR
// break ;
44968: GO 44972
// end ; end ;
44970: GO 44909
44972: POP
44973: POP
// end ; end ;
44974: GO 44773
44976: POP
44977: POP
// if result and not asc then
44978: LD_VAR 0 6
44982: PUSH
44983: LD_VAR 0 4
44987: NOT
44988: AND
44989: IFFALSE 45064
// begin tmp := result ;
44991: LD_ADDR_VAR 0 9
44995: PUSH
44996: LD_VAR 0 6
45000: ST_TO_ADDR
// for i = tmp downto 1 do
45001: LD_ADDR_VAR 0 7
45005: PUSH
45006: DOUBLE
45007: LD_VAR 0 9
45011: INC
45012: ST_TO_ADDR
45013: LD_INT 1
45015: PUSH
45016: FOR_DOWNTO
45017: IFFALSE 45062
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45019: LD_ADDR_VAR 0 6
45023: PUSH
45024: LD_VAR 0 6
45028: PPUSH
45029: LD_VAR 0 9
45033: PUSH
45034: LD_VAR 0 7
45038: MINUS
45039: PUSH
45040: LD_INT 1
45042: PLUS
45043: PPUSH
45044: LD_VAR 0 9
45048: PUSH
45049: LD_VAR 0 7
45053: ARRAY
45054: PPUSH
45055: CALL_OW 1
45059: ST_TO_ADDR
45060: GO 45016
45062: POP
45063: POP
// end ; tmp := [ ] ;
45064: LD_ADDR_VAR 0 9
45068: PUSH
45069: EMPTY
45070: ST_TO_ADDR
// if mode then
45071: LD_VAR 0 5
45075: IFFALSE 45144
// begin for i = 1 to result do
45077: LD_ADDR_VAR 0 7
45081: PUSH
45082: DOUBLE
45083: LD_INT 1
45085: DEC
45086: ST_TO_ADDR
45087: LD_VAR 0 6
45091: PUSH
45092: FOR_TO
45093: IFFALSE 45132
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45095: LD_ADDR_VAR 0 9
45099: PUSH
45100: LD_VAR 0 9
45104: PPUSH
45105: LD_VAR 0 7
45109: PPUSH
45110: LD_VAR 0 6
45114: PUSH
45115: LD_VAR 0 7
45119: ARRAY
45120: PUSH
45121: LD_INT 1
45123: ARRAY
45124: PPUSH
45125: CALL_OW 1
45129: ST_TO_ADDR
45130: GO 45092
45132: POP
45133: POP
// result := tmp ;
45134: LD_ADDR_VAR 0 6
45138: PUSH
45139: LD_VAR 0 9
45143: ST_TO_ADDR
// end ; end ;
45144: LD_VAR 0 6
45148: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45149: LD_INT 0
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45157: LD_ADDR_VAR 0 5
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// if not x or not y then
45179: LD_VAR 0 2
45183: NOT
45184: PUSH
45185: LD_VAR 0 3
45189: NOT
45190: OR
45191: IFFALSE 45195
// exit ;
45193: GO 46845
// if not range then
45195: LD_VAR 0 4
45199: NOT
45200: IFFALSE 45210
// range := 10 ;
45202: LD_ADDR_VAR 0 4
45206: PUSH
45207: LD_INT 10
45209: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45210: LD_ADDR_VAR 0 8
45214: PUSH
45215: LD_INT 81
45217: PUSH
45218: LD_VAR 0 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 92
45229: PUSH
45230: LD_VAR 0 2
45234: PUSH
45235: LD_VAR 0 3
45239: PUSH
45240: LD_VAR 0 4
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 3
45253: PUSH
45254: LD_INT 21
45256: PUSH
45257: LD_INT 3
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: PPUSH
45273: CALL_OW 69
45277: ST_TO_ADDR
// if not tmp then
45278: LD_VAR 0 8
45282: NOT
45283: IFFALSE 45287
// exit ;
45285: GO 46845
// for i in tmp do
45287: LD_ADDR_VAR 0 6
45291: PUSH
45292: LD_VAR 0 8
45296: PUSH
45297: FOR_IN
45298: IFFALSE 46820
// begin points := [ 0 , 0 , 0 ] ;
45300: LD_ADDR_VAR 0 9
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
// bpoints := 1 ;
45319: LD_ADDR_VAR 0 10
45323: PUSH
45324: LD_INT 1
45326: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45327: LD_VAR 0 6
45331: PPUSH
45332: CALL_OW 247
45336: PUSH
45337: LD_INT 1
45339: DOUBLE
45340: EQUAL
45341: IFTRUE 45345
45343: GO 45923
45345: POP
// begin if GetClass ( i ) = 1 then
45346: LD_VAR 0 6
45350: PPUSH
45351: CALL_OW 257
45355: PUSH
45356: LD_INT 1
45358: EQUAL
45359: IFFALSE 45380
// points := [ 10 , 5 , 3 ] ;
45361: LD_ADDR_VAR 0 9
45365: PUSH
45366: LD_INT 10
45368: PUSH
45369: LD_INT 5
45371: PUSH
45372: LD_INT 3
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: LIST
45379: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45380: LD_VAR 0 6
45384: PPUSH
45385: CALL_OW 257
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 3
45395: PUSH
45396: LD_INT 4
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: IN
45404: IFFALSE 45425
// points := [ 3 , 2 , 1 ] ;
45406: LD_ADDR_VAR 0 9
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45425: LD_VAR 0 6
45429: PPUSH
45430: CALL_OW 257
45434: PUSH
45435: LD_INT 5
45437: EQUAL
45438: IFFALSE 45459
// points := [ 130 , 5 , 2 ] ;
45440: LD_ADDR_VAR 0 9
45444: PUSH
45445: LD_INT 130
45447: PUSH
45448: LD_INT 5
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45459: LD_VAR 0 6
45463: PPUSH
45464: CALL_OW 257
45468: PUSH
45469: LD_INT 8
45471: EQUAL
45472: IFFALSE 45493
// points := [ 35 , 35 , 30 ] ;
45474: LD_ADDR_VAR 0 9
45478: PUSH
45479: LD_INT 35
45481: PUSH
45482: LD_INT 35
45484: PUSH
45485: LD_INT 30
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45493: LD_VAR 0 6
45497: PPUSH
45498: CALL_OW 257
45502: PUSH
45503: LD_INT 9
45505: EQUAL
45506: IFFALSE 45527
// points := [ 20 , 55 , 40 ] ;
45508: LD_ADDR_VAR 0 9
45512: PUSH
45513: LD_INT 20
45515: PUSH
45516: LD_INT 55
45518: PUSH
45519: LD_INT 40
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45527: LD_VAR 0 6
45531: PPUSH
45532: CALL_OW 257
45536: PUSH
45537: LD_INT 12
45539: PUSH
45540: LD_INT 16
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: IN
45547: IFFALSE 45568
// points := [ 5 , 3 , 2 ] ;
45549: LD_ADDR_VAR 0 9
45553: PUSH
45554: LD_INT 5
45556: PUSH
45557: LD_INT 3
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45568: LD_VAR 0 6
45572: PPUSH
45573: CALL_OW 257
45577: PUSH
45578: LD_INT 17
45580: EQUAL
45581: IFFALSE 45602
// points := [ 100 , 50 , 75 ] ;
45583: LD_ADDR_VAR 0 9
45587: PUSH
45588: LD_INT 100
45590: PUSH
45591: LD_INT 50
45593: PUSH
45594: LD_INT 75
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45602: LD_VAR 0 6
45606: PPUSH
45607: CALL_OW 257
45611: PUSH
45612: LD_INT 15
45614: EQUAL
45615: IFFALSE 45636
// points := [ 10 , 5 , 3 ] ;
45617: LD_ADDR_VAR 0 9
45621: PUSH
45622: LD_INT 10
45624: PUSH
45625: LD_INT 5
45627: PUSH
45628: LD_INT 3
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45636: LD_VAR 0 6
45640: PPUSH
45641: CALL_OW 257
45645: PUSH
45646: LD_INT 14
45648: EQUAL
45649: IFFALSE 45670
// points := [ 10 , 0 , 0 ] ;
45651: LD_ADDR_VAR 0 9
45655: PUSH
45656: LD_INT 10
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45670: LD_VAR 0 6
45674: PPUSH
45675: CALL_OW 257
45679: PUSH
45680: LD_INT 11
45682: EQUAL
45683: IFFALSE 45704
// points := [ 30 , 10 , 5 ] ;
45685: LD_ADDR_VAR 0 9
45689: PUSH
45690: LD_INT 30
45692: PUSH
45693: LD_INT 10
45695: PUSH
45696: LD_INT 5
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: LIST
45703: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45704: LD_VAR 0 1
45708: PPUSH
45709: LD_INT 5
45711: PPUSH
45712: CALL_OW 321
45716: PUSH
45717: LD_INT 2
45719: EQUAL
45720: IFFALSE 45737
// bpoints := bpoints * 1.8 ;
45722: LD_ADDR_VAR 0 10
45726: PUSH
45727: LD_VAR 0 10
45731: PUSH
45732: LD_REAL  1.80000000000000E+0000
45735: MUL
45736: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45737: LD_VAR 0 6
45741: PPUSH
45742: CALL_OW 257
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: LD_INT 4
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: IN
45765: PUSH
45766: LD_VAR 0 1
45770: PPUSH
45771: LD_INT 51
45773: PPUSH
45774: CALL_OW 321
45778: PUSH
45779: LD_INT 2
45781: EQUAL
45782: AND
45783: IFFALSE 45800
// bpoints := bpoints * 1.2 ;
45785: LD_ADDR_VAR 0 10
45789: PUSH
45790: LD_VAR 0 10
45794: PUSH
45795: LD_REAL  1.20000000000000E+0000
45798: MUL
45799: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45800: LD_VAR 0 6
45804: PPUSH
45805: CALL_OW 257
45809: PUSH
45810: LD_INT 5
45812: PUSH
45813: LD_INT 7
45815: PUSH
45816: LD_INT 9
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: LIST
45823: IN
45824: PUSH
45825: LD_VAR 0 1
45829: PPUSH
45830: LD_INT 52
45832: PPUSH
45833: CALL_OW 321
45837: PUSH
45838: LD_INT 2
45840: EQUAL
45841: AND
45842: IFFALSE 45859
// bpoints := bpoints * 1.5 ;
45844: LD_ADDR_VAR 0 10
45848: PUSH
45849: LD_VAR 0 10
45853: PUSH
45854: LD_REAL  1.50000000000000E+0000
45857: MUL
45858: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45859: LD_VAR 0 1
45863: PPUSH
45864: LD_INT 66
45866: PPUSH
45867: CALL_OW 321
45871: PUSH
45872: LD_INT 2
45874: EQUAL
45875: IFFALSE 45892
// bpoints := bpoints * 1.1 ;
45877: LD_ADDR_VAR 0 10
45881: PUSH
45882: LD_VAR 0 10
45886: PUSH
45887: LD_REAL  1.10000000000000E+0000
45890: MUL
45891: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45892: LD_ADDR_VAR 0 10
45896: PUSH
45897: LD_VAR 0 10
45901: PUSH
45902: LD_VAR 0 6
45906: PPUSH
45907: LD_INT 1
45909: PPUSH
45910: CALL_OW 259
45914: PUSH
45915: LD_REAL  1.15000000000000E+0000
45918: MUL
45919: MUL
45920: ST_TO_ADDR
// end ; unit_vehicle :
45921: GO 46749
45923: LD_INT 2
45925: DOUBLE
45926: EQUAL
45927: IFTRUE 45931
45929: GO 46737
45931: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45932: LD_VAR 0 6
45936: PPUSH
45937: CALL_OW 264
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 42
45947: PUSH
45948: LD_INT 24
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: IN
45956: IFFALSE 45977
// points := [ 25 , 5 , 3 ] ;
45958: LD_ADDR_VAR 0 9
45962: PUSH
45963: LD_INT 25
45965: PUSH
45966: LD_INT 5
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45977: LD_VAR 0 6
45981: PPUSH
45982: CALL_OW 264
45986: PUSH
45987: LD_INT 4
45989: PUSH
45990: LD_INT 43
45992: PUSH
45993: LD_INT 25
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: IN
46001: IFFALSE 46022
// points := [ 40 , 15 , 5 ] ;
46003: LD_ADDR_VAR 0 9
46007: PUSH
46008: LD_INT 40
46010: PUSH
46011: LD_INT 15
46013: PUSH
46014: LD_INT 5
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46022: LD_VAR 0 6
46026: PPUSH
46027: CALL_OW 264
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: LD_INT 23
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: IN
46042: IFFALSE 46063
// points := [ 7 , 25 , 8 ] ;
46044: LD_ADDR_VAR 0 9
46048: PUSH
46049: LD_INT 7
46051: PUSH
46052: LD_INT 25
46054: PUSH
46055: LD_INT 8
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46063: LD_VAR 0 6
46067: PPUSH
46068: CALL_OW 264
46072: PUSH
46073: LD_INT 5
46075: PUSH
46076: LD_INT 27
46078: PUSH
46079: LD_INT 44
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: IN
46087: IFFALSE 46108
// points := [ 14 , 50 , 16 ] ;
46089: LD_ADDR_VAR 0 9
46093: PUSH
46094: LD_INT 14
46096: PUSH
46097: LD_INT 50
46099: PUSH
46100: LD_INT 16
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46108: LD_VAR 0 6
46112: PPUSH
46113: CALL_OW 264
46117: PUSH
46118: LD_INT 6
46120: PUSH
46121: LD_INT 46
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: IN
46128: IFFALSE 46149
// points := [ 32 , 120 , 70 ] ;
46130: LD_ADDR_VAR 0 9
46134: PUSH
46135: LD_INT 32
46137: PUSH
46138: LD_INT 120
46140: PUSH
46141: LD_INT 70
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: LIST
46148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46149: LD_VAR 0 6
46153: PPUSH
46154: CALL_OW 264
46158: PUSH
46159: LD_INT 7
46161: PUSH
46162: LD_INT 28
46164: PUSH
46165: LD_INT 45
46167: PUSH
46168: LD_INT 92
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: IN
46177: IFFALSE 46198
// points := [ 35 , 20 , 45 ] ;
46179: LD_ADDR_VAR 0 9
46183: PUSH
46184: LD_INT 35
46186: PUSH
46187: LD_INT 20
46189: PUSH
46190: LD_INT 45
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46198: LD_VAR 0 6
46202: PPUSH
46203: CALL_OW 264
46207: PUSH
46208: LD_INT 47
46210: PUSH
46211: EMPTY
46212: LIST
46213: IN
46214: IFFALSE 46235
// points := [ 67 , 45 , 75 ] ;
46216: LD_ADDR_VAR 0 9
46220: PUSH
46221: LD_INT 67
46223: PUSH
46224: LD_INT 45
46226: PUSH
46227: LD_INT 75
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46235: LD_VAR 0 6
46239: PPUSH
46240: CALL_OW 264
46244: PUSH
46245: LD_INT 26
46247: PUSH
46248: EMPTY
46249: LIST
46250: IN
46251: IFFALSE 46272
// points := [ 120 , 30 , 80 ] ;
46253: LD_ADDR_VAR 0 9
46257: PUSH
46258: LD_INT 120
46260: PUSH
46261: LD_INT 30
46263: PUSH
46264: LD_INT 80
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: LIST
46271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46272: LD_VAR 0 6
46276: PPUSH
46277: CALL_OW 264
46281: PUSH
46282: LD_INT 22
46284: PUSH
46285: EMPTY
46286: LIST
46287: IN
46288: IFFALSE 46309
// points := [ 40 , 1 , 1 ] ;
46290: LD_ADDR_VAR 0 9
46294: PUSH
46295: LD_INT 40
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46309: LD_VAR 0 6
46313: PPUSH
46314: CALL_OW 264
46318: PUSH
46319: LD_INT 29
46321: PUSH
46322: EMPTY
46323: LIST
46324: IN
46325: IFFALSE 46346
// points := [ 70 , 200 , 400 ] ;
46327: LD_ADDR_VAR 0 9
46331: PUSH
46332: LD_INT 70
46334: PUSH
46335: LD_INT 200
46337: PUSH
46338: LD_INT 400
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46346: LD_VAR 0 6
46350: PPUSH
46351: CALL_OW 264
46355: PUSH
46356: LD_INT 14
46358: PUSH
46359: LD_INT 53
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: IN
46366: IFFALSE 46387
// points := [ 40 , 10 , 20 ] ;
46368: LD_ADDR_VAR 0 9
46372: PUSH
46373: LD_INT 40
46375: PUSH
46376: LD_INT 10
46378: PUSH
46379: LD_INT 20
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46387: LD_VAR 0 6
46391: PPUSH
46392: CALL_OW 264
46396: PUSH
46397: LD_INT 9
46399: PUSH
46400: EMPTY
46401: LIST
46402: IN
46403: IFFALSE 46424
// points := [ 5 , 70 , 20 ] ;
46405: LD_ADDR_VAR 0 9
46409: PUSH
46410: LD_INT 5
46412: PUSH
46413: LD_INT 70
46415: PUSH
46416: LD_INT 20
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46424: LD_VAR 0 6
46428: PPUSH
46429: CALL_OW 264
46433: PUSH
46434: LD_INT 10
46436: PUSH
46437: EMPTY
46438: LIST
46439: IN
46440: IFFALSE 46461
// points := [ 35 , 110 , 70 ] ;
46442: LD_ADDR_VAR 0 9
46446: PUSH
46447: LD_INT 35
46449: PUSH
46450: LD_INT 110
46452: PUSH
46453: LD_INT 70
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46461: LD_VAR 0 6
46465: PPUSH
46466: CALL_OW 265
46470: PUSH
46471: LD_INT 25
46473: EQUAL
46474: IFFALSE 46495
// points := [ 80 , 65 , 100 ] ;
46476: LD_ADDR_VAR 0 9
46480: PUSH
46481: LD_INT 80
46483: PUSH
46484: LD_INT 65
46486: PUSH
46487: LD_INT 100
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: LIST
46494: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46495: LD_VAR 0 6
46499: PPUSH
46500: CALL_OW 263
46504: PUSH
46505: LD_INT 1
46507: EQUAL
46508: IFFALSE 46543
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46510: LD_ADDR_VAR 0 10
46514: PUSH
46515: LD_VAR 0 10
46519: PUSH
46520: LD_VAR 0 6
46524: PPUSH
46525: CALL_OW 311
46529: PPUSH
46530: LD_INT 3
46532: PPUSH
46533: CALL_OW 259
46537: PUSH
46538: LD_INT 4
46540: MUL
46541: MUL
46542: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46543: LD_VAR 0 6
46547: PPUSH
46548: CALL_OW 263
46552: PUSH
46553: LD_INT 2
46555: EQUAL
46556: IFFALSE 46607
// begin j := IsControledBy ( i ) ;
46558: LD_ADDR_VAR 0 7
46562: PUSH
46563: LD_VAR 0 6
46567: PPUSH
46568: CALL_OW 312
46572: ST_TO_ADDR
// if j then
46573: LD_VAR 0 7
46577: IFFALSE 46607
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46579: LD_ADDR_VAR 0 10
46583: PUSH
46584: LD_VAR 0 10
46588: PUSH
46589: LD_VAR 0 7
46593: PPUSH
46594: LD_INT 3
46596: PPUSH
46597: CALL_OW 259
46601: PUSH
46602: LD_INT 3
46604: MUL
46605: MUL
46606: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46607: LD_VAR 0 6
46611: PPUSH
46612: CALL_OW 264
46616: PUSH
46617: LD_INT 5
46619: PUSH
46620: LD_INT 6
46622: PUSH
46623: LD_INT 46
46625: PUSH
46626: LD_INT 44
46628: PUSH
46629: LD_INT 47
46631: PUSH
46632: LD_INT 45
46634: PUSH
46635: LD_INT 28
46637: PUSH
46638: LD_INT 7
46640: PUSH
46641: LD_INT 27
46643: PUSH
46644: LD_INT 29
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: IN
46659: PUSH
46660: LD_VAR 0 1
46664: PPUSH
46665: LD_INT 52
46667: PPUSH
46668: CALL_OW 321
46672: PUSH
46673: LD_INT 2
46675: EQUAL
46676: AND
46677: IFFALSE 46694
// bpoints := bpoints * 1.2 ;
46679: LD_ADDR_VAR 0 10
46683: PUSH
46684: LD_VAR 0 10
46688: PUSH
46689: LD_REAL  1.20000000000000E+0000
46692: MUL
46693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46694: LD_VAR 0 6
46698: PPUSH
46699: CALL_OW 264
46703: PUSH
46704: LD_INT 6
46706: PUSH
46707: LD_INT 46
46709: PUSH
46710: LD_INT 47
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: LIST
46717: IN
46718: IFFALSE 46735
// bpoints := bpoints * 1.2 ;
46720: LD_ADDR_VAR 0 10
46724: PUSH
46725: LD_VAR 0 10
46729: PUSH
46730: LD_REAL  1.20000000000000E+0000
46733: MUL
46734: ST_TO_ADDR
// end ; unit_building :
46735: GO 46749
46737: LD_INT 3
46739: DOUBLE
46740: EQUAL
46741: IFTRUE 46745
46743: GO 46748
46745: POP
// ; end ;
46746: GO 46749
46748: POP
// for j = 1 to 3 do
46749: LD_ADDR_VAR 0 7
46753: PUSH
46754: DOUBLE
46755: LD_INT 1
46757: DEC
46758: ST_TO_ADDR
46759: LD_INT 3
46761: PUSH
46762: FOR_TO
46763: IFFALSE 46816
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46765: LD_ADDR_VAR 0 5
46769: PUSH
46770: LD_VAR 0 5
46774: PPUSH
46775: LD_VAR 0 7
46779: PPUSH
46780: LD_VAR 0 5
46784: PUSH
46785: LD_VAR 0 7
46789: ARRAY
46790: PUSH
46791: LD_VAR 0 9
46795: PUSH
46796: LD_VAR 0 7
46800: ARRAY
46801: PUSH
46802: LD_VAR 0 10
46806: MUL
46807: PLUS
46808: PPUSH
46809: CALL_OW 1
46813: ST_TO_ADDR
46814: GO 46762
46816: POP
46817: POP
// end ;
46818: GO 45297
46820: POP
46821: POP
// result := Replace ( result , 4 , tmp ) ;
46822: LD_ADDR_VAR 0 5
46826: PUSH
46827: LD_VAR 0 5
46831: PPUSH
46832: LD_INT 4
46834: PPUSH
46835: LD_VAR 0 8
46839: PPUSH
46840: CALL_OW 1
46844: ST_TO_ADDR
// end ;
46845: LD_VAR 0 5
46849: RET
// export function DangerAtRange ( unit , range ) ; begin
46850: LD_INT 0
46852: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46853: LD_ADDR_VAR 0 3
46857: PUSH
46858: LD_VAR 0 1
46862: PPUSH
46863: CALL_OW 255
46867: PPUSH
46868: LD_VAR 0 1
46872: PPUSH
46873: CALL_OW 250
46877: PPUSH
46878: LD_VAR 0 1
46882: PPUSH
46883: CALL_OW 251
46887: PPUSH
46888: LD_VAR 0 2
46892: PPUSH
46893: CALL 45149 0 4
46897: ST_TO_ADDR
// end ;
46898: LD_VAR 0 3
46902: RET
// export function DangerInArea ( side , area ) ; begin
46903: LD_INT 0
46905: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46906: LD_ADDR_VAR 0 3
46910: PUSH
46911: LD_VAR 0 2
46915: PPUSH
46916: LD_INT 81
46918: PUSH
46919: LD_VAR 0 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PPUSH
46928: CALL_OW 70
46932: ST_TO_ADDR
// end ;
46933: LD_VAR 0 3
46937: RET
// export function IsExtension ( b ) ; begin
46938: LD_INT 0
46940: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46941: LD_ADDR_VAR 0 2
46945: PUSH
46946: LD_VAR 0 1
46950: PUSH
46951: LD_INT 23
46953: PUSH
46954: LD_INT 20
46956: PUSH
46957: LD_INT 22
46959: PUSH
46960: LD_INT 17
46962: PUSH
46963: LD_INT 24
46965: PUSH
46966: LD_INT 21
46968: PUSH
46969: LD_INT 19
46971: PUSH
46972: LD_INT 16
46974: PUSH
46975: LD_INT 25
46977: PUSH
46978: LD_INT 18
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: IN
46993: ST_TO_ADDR
// end ;
46994: LD_VAR 0 2
46998: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46999: LD_INT 0
47001: PPUSH
47002: PPUSH
47003: PPUSH
// result := [ ] ;
47004: LD_ADDR_VAR 0 4
47008: PUSH
47009: EMPTY
47010: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47011: LD_ADDR_VAR 0 5
47015: PUSH
47016: LD_VAR 0 2
47020: PPUSH
47021: LD_INT 21
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PPUSH
47031: CALL_OW 70
47035: ST_TO_ADDR
// if not tmp then
47036: LD_VAR 0 5
47040: NOT
47041: IFFALSE 47045
// exit ;
47043: GO 47109
// if checkLink then
47045: LD_VAR 0 3
47049: IFFALSE 47099
// begin for i in tmp do
47051: LD_ADDR_VAR 0 6
47055: PUSH
47056: LD_VAR 0 5
47060: PUSH
47061: FOR_IN
47062: IFFALSE 47097
// if GetBase ( i ) <> base then
47064: LD_VAR 0 6
47068: PPUSH
47069: CALL_OW 274
47073: PUSH
47074: LD_VAR 0 1
47078: NONEQUAL
47079: IFFALSE 47095
// ComLinkToBase ( base , i ) ;
47081: LD_VAR 0 1
47085: PPUSH
47086: LD_VAR 0 6
47090: PPUSH
47091: CALL_OW 169
47095: GO 47061
47097: POP
47098: POP
// end ; result := tmp ;
47099: LD_ADDR_VAR 0 4
47103: PUSH
47104: LD_VAR 0 5
47108: ST_TO_ADDR
// end ;
47109: LD_VAR 0 4
47113: RET
// export function ComComplete ( units , b ) ; var i ; begin
47114: LD_INT 0
47116: PPUSH
47117: PPUSH
// if not units then
47118: LD_VAR 0 1
47122: NOT
47123: IFFALSE 47127
// exit ;
47125: GO 47217
// for i in units do
47127: LD_ADDR_VAR 0 4
47131: PUSH
47132: LD_VAR 0 1
47136: PUSH
47137: FOR_IN
47138: IFFALSE 47215
// if BuildingStatus ( b ) = bs_build then
47140: LD_VAR 0 2
47144: PPUSH
47145: CALL_OW 461
47149: PUSH
47150: LD_INT 1
47152: EQUAL
47153: IFFALSE 47213
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47155: LD_VAR 0 4
47159: PPUSH
47160: LD_STRING h
47162: PUSH
47163: LD_VAR 0 2
47167: PPUSH
47168: CALL_OW 250
47172: PUSH
47173: LD_VAR 0 2
47177: PPUSH
47178: CALL_OW 251
47182: PUSH
47183: LD_VAR 0 2
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: PUSH
47206: EMPTY
47207: LIST
47208: PPUSH
47209: CALL_OW 446
47213: GO 47137
47215: POP
47216: POP
// end ;
47217: LD_VAR 0 3
47221: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47222: LD_INT 0
47224: PPUSH
47225: PPUSH
47226: PPUSH
47227: PPUSH
47228: PPUSH
47229: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47230: LD_VAR 0 1
47234: NOT
47235: PUSH
47236: LD_VAR 0 1
47240: PPUSH
47241: CALL_OW 263
47245: PUSH
47246: LD_INT 2
47248: NONEQUAL
47249: OR
47250: IFFALSE 47254
// exit ;
47252: GO 47570
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47254: LD_ADDR_VAR 0 6
47258: PUSH
47259: LD_INT 22
47261: PUSH
47262: LD_VAR 0 1
47266: PPUSH
47267: CALL_OW 255
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 30
47281: PUSH
47282: LD_INT 36
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 34
47291: PUSH
47292: LD_INT 31
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PPUSH
47308: CALL_OW 69
47312: ST_TO_ADDR
// if not tmp then
47313: LD_VAR 0 6
47317: NOT
47318: IFFALSE 47322
// exit ;
47320: GO 47570
// result := [ ] ;
47322: LD_ADDR_VAR 0 2
47326: PUSH
47327: EMPTY
47328: ST_TO_ADDR
// for i in tmp do
47329: LD_ADDR_VAR 0 3
47333: PUSH
47334: LD_VAR 0 6
47338: PUSH
47339: FOR_IN
47340: IFFALSE 47411
// begin t := UnitsInside ( i ) ;
47342: LD_ADDR_VAR 0 4
47346: PUSH
47347: LD_VAR 0 3
47351: PPUSH
47352: CALL_OW 313
47356: ST_TO_ADDR
// if t then
47357: LD_VAR 0 4
47361: IFFALSE 47409
// for j in t do
47363: LD_ADDR_VAR 0 7
47367: PUSH
47368: LD_VAR 0 4
47372: PUSH
47373: FOR_IN
47374: IFFALSE 47407
// result := Replace ( result , result + 1 , j ) ;
47376: LD_ADDR_VAR 0 2
47380: PUSH
47381: LD_VAR 0 2
47385: PPUSH
47386: LD_VAR 0 2
47390: PUSH
47391: LD_INT 1
47393: PLUS
47394: PPUSH
47395: LD_VAR 0 7
47399: PPUSH
47400: CALL_OW 1
47404: ST_TO_ADDR
47405: GO 47373
47407: POP
47408: POP
// end ;
47409: GO 47339
47411: POP
47412: POP
// if not result then
47413: LD_VAR 0 2
47417: NOT
47418: IFFALSE 47422
// exit ;
47420: GO 47570
// mech := result [ 1 ] ;
47422: LD_ADDR_VAR 0 5
47426: PUSH
47427: LD_VAR 0 2
47431: PUSH
47432: LD_INT 1
47434: ARRAY
47435: ST_TO_ADDR
// if result > 1 then
47436: LD_VAR 0 2
47440: PUSH
47441: LD_INT 1
47443: GREATER
47444: IFFALSE 47556
// begin for i = 2 to result do
47446: LD_ADDR_VAR 0 3
47450: PUSH
47451: DOUBLE
47452: LD_INT 2
47454: DEC
47455: ST_TO_ADDR
47456: LD_VAR 0 2
47460: PUSH
47461: FOR_TO
47462: IFFALSE 47554
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47464: LD_ADDR_VAR 0 4
47468: PUSH
47469: LD_VAR 0 2
47473: PUSH
47474: LD_VAR 0 3
47478: ARRAY
47479: PPUSH
47480: LD_INT 3
47482: PPUSH
47483: CALL_OW 259
47487: PUSH
47488: LD_VAR 0 2
47492: PUSH
47493: LD_VAR 0 3
47497: ARRAY
47498: PPUSH
47499: CALL_OW 432
47503: MINUS
47504: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47505: LD_VAR 0 4
47509: PUSH
47510: LD_VAR 0 5
47514: PPUSH
47515: LD_INT 3
47517: PPUSH
47518: CALL_OW 259
47522: PUSH
47523: LD_VAR 0 5
47527: PPUSH
47528: CALL_OW 432
47532: MINUS
47533: GREATEREQUAL
47534: IFFALSE 47552
// mech := result [ i ] ;
47536: LD_ADDR_VAR 0 5
47540: PUSH
47541: LD_VAR 0 2
47545: PUSH
47546: LD_VAR 0 3
47550: ARRAY
47551: ST_TO_ADDR
// end ;
47552: GO 47461
47554: POP
47555: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47556: LD_VAR 0 1
47560: PPUSH
47561: LD_VAR 0 5
47565: PPUSH
47566: CALL_OW 135
// end ;
47570: LD_VAR 0 2
47574: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47575: LD_INT 0
47577: PPUSH
47578: PPUSH
47579: PPUSH
47580: PPUSH
47581: PPUSH
47582: PPUSH
47583: PPUSH
47584: PPUSH
47585: PPUSH
47586: PPUSH
47587: PPUSH
47588: PPUSH
47589: PPUSH
// result := [ ] ;
47590: LD_ADDR_VAR 0 7
47594: PUSH
47595: EMPTY
47596: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47597: LD_VAR 0 1
47601: PPUSH
47602: CALL_OW 266
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: IN
47617: NOT
47618: IFFALSE 47622
// exit ;
47620: GO 49256
// if name then
47622: LD_VAR 0 3
47626: IFFALSE 47642
// SetBName ( base_dep , name ) ;
47628: LD_VAR 0 1
47632: PPUSH
47633: LD_VAR 0 3
47637: PPUSH
47638: CALL_OW 500
// base := GetBase ( base_dep ) ;
47642: LD_ADDR_VAR 0 15
47646: PUSH
47647: LD_VAR 0 1
47651: PPUSH
47652: CALL_OW 274
47656: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47657: LD_ADDR_VAR 0 16
47661: PUSH
47662: LD_VAR 0 1
47666: PPUSH
47667: CALL_OW 255
47671: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47672: LD_ADDR_VAR 0 17
47676: PUSH
47677: LD_VAR 0 1
47681: PPUSH
47682: CALL_OW 248
47686: ST_TO_ADDR
// if sources then
47687: LD_VAR 0 5
47691: IFFALSE 47738
// for i = 1 to 3 do
47693: LD_ADDR_VAR 0 8
47697: PUSH
47698: DOUBLE
47699: LD_INT 1
47701: DEC
47702: ST_TO_ADDR
47703: LD_INT 3
47705: PUSH
47706: FOR_TO
47707: IFFALSE 47736
// AddResourceType ( base , i , sources [ i ] ) ;
47709: LD_VAR 0 15
47713: PPUSH
47714: LD_VAR 0 8
47718: PPUSH
47719: LD_VAR 0 5
47723: PUSH
47724: LD_VAR 0 8
47728: ARRAY
47729: PPUSH
47730: CALL_OW 276
47734: GO 47706
47736: POP
47737: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47738: LD_ADDR_VAR 0 18
47742: PUSH
47743: LD_VAR 0 15
47747: PPUSH
47748: LD_VAR 0 2
47752: PPUSH
47753: LD_INT 1
47755: PPUSH
47756: CALL 46999 0 3
47760: ST_TO_ADDR
// InitHc ;
47761: CALL_OW 19
// InitUc ;
47765: CALL_OW 18
// uc_side := side ;
47769: LD_ADDR_OWVAR 20
47773: PUSH
47774: LD_VAR 0 16
47778: ST_TO_ADDR
// uc_nation := nation ;
47779: LD_ADDR_OWVAR 21
47783: PUSH
47784: LD_VAR 0 17
47788: ST_TO_ADDR
// if buildings then
47789: LD_VAR 0 18
47793: IFFALSE 49115
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47795: LD_ADDR_VAR 0 19
47799: PUSH
47800: LD_VAR 0 18
47804: PPUSH
47805: LD_INT 2
47807: PUSH
47808: LD_INT 30
47810: PUSH
47811: LD_INT 29
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 30
47820: PUSH
47821: LD_INT 30
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: PPUSH
47833: CALL_OW 72
47837: ST_TO_ADDR
// if tmp then
47838: LD_VAR 0 19
47842: IFFALSE 47890
// for i in tmp do
47844: LD_ADDR_VAR 0 8
47848: PUSH
47849: LD_VAR 0 19
47853: PUSH
47854: FOR_IN
47855: IFFALSE 47888
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47857: LD_VAR 0 8
47861: PPUSH
47862: CALL_OW 250
47866: PPUSH
47867: LD_VAR 0 8
47871: PPUSH
47872: CALL_OW 251
47876: PPUSH
47877: LD_VAR 0 16
47881: PPUSH
47882: CALL_OW 441
47886: GO 47854
47888: POP
47889: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47890: LD_VAR 0 18
47894: PPUSH
47895: LD_INT 2
47897: PUSH
47898: LD_INT 30
47900: PUSH
47901: LD_INT 32
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 30
47910: PUSH
47911: LD_INT 33
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: PPUSH
47923: CALL_OW 72
47927: IFFALSE 48015
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47929: LD_ADDR_VAR 0 8
47933: PUSH
47934: LD_VAR 0 18
47938: PPUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 30
47944: PUSH
47945: LD_INT 32
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 30
47954: PUSH
47955: LD_INT 33
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: LIST
47966: PPUSH
47967: CALL_OW 72
47971: PUSH
47972: FOR_IN
47973: IFFALSE 48013
// begin if not GetBWeapon ( i ) then
47975: LD_VAR 0 8
47979: PPUSH
47980: CALL_OW 269
47984: NOT
47985: IFFALSE 48011
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47987: LD_VAR 0 8
47991: PPUSH
47992: LD_VAR 0 8
47996: PPUSH
47997: LD_VAR 0 2
48001: PPUSH
48002: CALL 49261 0 2
48006: PPUSH
48007: CALL_OW 431
// end ;
48011: GO 47972
48013: POP
48014: POP
// end ; for i = 1 to personel do
48015: LD_ADDR_VAR 0 8
48019: PUSH
48020: DOUBLE
48021: LD_INT 1
48023: DEC
48024: ST_TO_ADDR
48025: LD_VAR 0 6
48029: PUSH
48030: FOR_TO
48031: IFFALSE 49095
// begin if i > 4 then
48033: LD_VAR 0 8
48037: PUSH
48038: LD_INT 4
48040: GREATER
48041: IFFALSE 48045
// break ;
48043: GO 49095
// case i of 1 :
48045: LD_VAR 0 8
48049: PUSH
48050: LD_INT 1
48052: DOUBLE
48053: EQUAL
48054: IFTRUE 48058
48056: GO 48138
48058: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48059: LD_ADDR_VAR 0 12
48063: PUSH
48064: LD_VAR 0 18
48068: PPUSH
48069: LD_INT 22
48071: PUSH
48072: LD_VAR 0 16
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 58
48083: PUSH
48084: EMPTY
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 30
48092: PUSH
48093: LD_INT 32
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 30
48102: PUSH
48103: LD_INT 4
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 30
48112: PUSH
48113: LD_INT 5
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: PPUSH
48131: CALL_OW 72
48135: ST_TO_ADDR
48136: GO 48360
48138: LD_INT 2
48140: DOUBLE
48141: EQUAL
48142: IFTRUE 48146
48144: GO 48208
48146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48147: LD_ADDR_VAR 0 12
48151: PUSH
48152: LD_VAR 0 18
48156: PPUSH
48157: LD_INT 22
48159: PUSH
48160: LD_VAR 0 16
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 30
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 30
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PPUSH
48201: CALL_OW 72
48205: ST_TO_ADDR
48206: GO 48360
48208: LD_INT 3
48210: DOUBLE
48211: EQUAL
48212: IFTRUE 48216
48214: GO 48278
48216: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48217: LD_ADDR_VAR 0 12
48221: PUSH
48222: LD_VAR 0 18
48226: PPUSH
48227: LD_INT 22
48229: PUSH
48230: LD_VAR 0 16
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 30
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 30
48254: PUSH
48255: LD_INT 3
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PPUSH
48271: CALL_OW 72
48275: ST_TO_ADDR
48276: GO 48360
48278: LD_INT 4
48280: DOUBLE
48281: EQUAL
48282: IFTRUE 48286
48284: GO 48359
48286: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48287: LD_ADDR_VAR 0 12
48291: PUSH
48292: LD_VAR 0 18
48296: PPUSH
48297: LD_INT 22
48299: PUSH
48300: LD_VAR 0 16
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: LD_INT 30
48314: PUSH
48315: LD_INT 6
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 30
48324: PUSH
48325: LD_INT 7
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 30
48334: PUSH
48335: LD_INT 8
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PPUSH
48352: CALL_OW 72
48356: ST_TO_ADDR
48357: GO 48360
48359: POP
// if i = 1 then
48360: LD_VAR 0 8
48364: PUSH
48365: LD_INT 1
48367: EQUAL
48368: IFFALSE 48479
// begin tmp := [ ] ;
48370: LD_ADDR_VAR 0 19
48374: PUSH
48375: EMPTY
48376: ST_TO_ADDR
// for j in f do
48377: LD_ADDR_VAR 0 9
48381: PUSH
48382: LD_VAR 0 12
48386: PUSH
48387: FOR_IN
48388: IFFALSE 48461
// if GetBType ( j ) = b_bunker then
48390: LD_VAR 0 9
48394: PPUSH
48395: CALL_OW 266
48399: PUSH
48400: LD_INT 32
48402: EQUAL
48403: IFFALSE 48430
// tmp := Insert ( tmp , 1 , j ) else
48405: LD_ADDR_VAR 0 19
48409: PUSH
48410: LD_VAR 0 19
48414: PPUSH
48415: LD_INT 1
48417: PPUSH
48418: LD_VAR 0 9
48422: PPUSH
48423: CALL_OW 2
48427: ST_TO_ADDR
48428: GO 48459
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48430: LD_ADDR_VAR 0 19
48434: PUSH
48435: LD_VAR 0 19
48439: PPUSH
48440: LD_VAR 0 19
48444: PUSH
48445: LD_INT 1
48447: PLUS
48448: PPUSH
48449: LD_VAR 0 9
48453: PPUSH
48454: CALL_OW 2
48458: ST_TO_ADDR
48459: GO 48387
48461: POP
48462: POP
// if tmp then
48463: LD_VAR 0 19
48467: IFFALSE 48479
// f := tmp ;
48469: LD_ADDR_VAR 0 12
48473: PUSH
48474: LD_VAR 0 19
48478: ST_TO_ADDR
// end ; x := personel [ i ] ;
48479: LD_ADDR_VAR 0 13
48483: PUSH
48484: LD_VAR 0 6
48488: PUSH
48489: LD_VAR 0 8
48493: ARRAY
48494: ST_TO_ADDR
// if x = - 1 then
48495: LD_VAR 0 13
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: EQUAL
48504: IFFALSE 48713
// begin for j in f do
48506: LD_ADDR_VAR 0 9
48510: PUSH
48511: LD_VAR 0 12
48515: PUSH
48516: FOR_IN
48517: IFFALSE 48709
// repeat InitHc ;
48519: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48523: LD_VAR 0 9
48527: PPUSH
48528: CALL_OW 266
48532: PUSH
48533: LD_INT 5
48535: EQUAL
48536: IFFALSE 48606
// begin if UnitsInside ( j ) < 3 then
48538: LD_VAR 0 9
48542: PPUSH
48543: CALL_OW 313
48547: PUSH
48548: LD_INT 3
48550: LESS
48551: IFFALSE 48587
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48553: LD_INT 0
48555: PPUSH
48556: LD_INT 5
48558: PUSH
48559: LD_INT 8
48561: PUSH
48562: LD_INT 9
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: PUSH
48570: LD_VAR 0 17
48574: ARRAY
48575: PPUSH
48576: LD_VAR 0 4
48580: PPUSH
48581: CALL_OW 380
48585: GO 48604
// PrepareHuman ( false , i , skill ) ;
48587: LD_INT 0
48589: PPUSH
48590: LD_VAR 0 8
48594: PPUSH
48595: LD_VAR 0 4
48599: PPUSH
48600: CALL_OW 380
// end else
48604: GO 48623
// PrepareHuman ( false , i , skill ) ;
48606: LD_INT 0
48608: PPUSH
48609: LD_VAR 0 8
48613: PPUSH
48614: LD_VAR 0 4
48618: PPUSH
48619: CALL_OW 380
// un := CreateHuman ;
48623: LD_ADDR_VAR 0 14
48627: PUSH
48628: CALL_OW 44
48632: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48633: LD_ADDR_VAR 0 7
48637: PUSH
48638: LD_VAR 0 7
48642: PPUSH
48643: LD_INT 1
48645: PPUSH
48646: LD_VAR 0 14
48650: PPUSH
48651: CALL_OW 2
48655: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48656: LD_VAR 0 14
48660: PPUSH
48661: LD_VAR 0 9
48665: PPUSH
48666: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48670: LD_VAR 0 9
48674: PPUSH
48675: CALL_OW 313
48679: PUSH
48680: LD_INT 6
48682: EQUAL
48683: PUSH
48684: LD_VAR 0 9
48688: PPUSH
48689: CALL_OW 266
48693: PUSH
48694: LD_INT 32
48696: PUSH
48697: LD_INT 31
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: IN
48704: OR
48705: IFFALSE 48519
48707: GO 48516
48709: POP
48710: POP
// end else
48711: GO 49093
// for j = 1 to x do
48713: LD_ADDR_VAR 0 9
48717: PUSH
48718: DOUBLE
48719: LD_INT 1
48721: DEC
48722: ST_TO_ADDR
48723: LD_VAR 0 13
48727: PUSH
48728: FOR_TO
48729: IFFALSE 49091
// begin InitHc ;
48731: CALL_OW 19
// if not f then
48735: LD_VAR 0 12
48739: NOT
48740: IFFALSE 48829
// begin PrepareHuman ( false , i , skill ) ;
48742: LD_INT 0
48744: PPUSH
48745: LD_VAR 0 8
48749: PPUSH
48750: LD_VAR 0 4
48754: PPUSH
48755: CALL_OW 380
// un := CreateHuman ;
48759: LD_ADDR_VAR 0 14
48763: PUSH
48764: CALL_OW 44
48768: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48769: LD_ADDR_VAR 0 7
48773: PUSH
48774: LD_VAR 0 7
48778: PPUSH
48779: LD_INT 1
48781: PPUSH
48782: LD_VAR 0 14
48786: PPUSH
48787: CALL_OW 2
48791: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48792: LD_VAR 0 14
48796: PPUSH
48797: LD_VAR 0 1
48801: PPUSH
48802: CALL_OW 250
48806: PPUSH
48807: LD_VAR 0 1
48811: PPUSH
48812: CALL_OW 251
48816: PPUSH
48817: LD_INT 10
48819: PPUSH
48820: LD_INT 0
48822: PPUSH
48823: CALL_OW 50
// continue ;
48827: GO 48728
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48829: LD_VAR 0 12
48833: PUSH
48834: LD_INT 1
48836: ARRAY
48837: PPUSH
48838: CALL_OW 313
48842: PUSH
48843: LD_VAR 0 12
48847: PUSH
48848: LD_INT 1
48850: ARRAY
48851: PPUSH
48852: CALL_OW 266
48856: PUSH
48857: LD_INT 32
48859: PUSH
48860: LD_INT 31
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: IN
48867: AND
48868: PUSH
48869: LD_VAR 0 12
48873: PUSH
48874: LD_INT 1
48876: ARRAY
48877: PPUSH
48878: CALL_OW 313
48882: PUSH
48883: LD_INT 6
48885: EQUAL
48886: OR
48887: IFFALSE 48907
// f := Delete ( f , 1 ) ;
48889: LD_ADDR_VAR 0 12
48893: PUSH
48894: LD_VAR 0 12
48898: PPUSH
48899: LD_INT 1
48901: PPUSH
48902: CALL_OW 3
48906: ST_TO_ADDR
// if not f then
48907: LD_VAR 0 12
48911: NOT
48912: IFFALSE 48930
// begin x := x + 2 ;
48914: LD_ADDR_VAR 0 13
48918: PUSH
48919: LD_VAR 0 13
48923: PUSH
48924: LD_INT 2
48926: PLUS
48927: ST_TO_ADDR
// continue ;
48928: GO 48728
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48930: LD_VAR 0 12
48934: PUSH
48935: LD_INT 1
48937: ARRAY
48938: PPUSH
48939: CALL_OW 266
48943: PUSH
48944: LD_INT 5
48946: EQUAL
48947: IFFALSE 49021
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48949: LD_VAR 0 12
48953: PUSH
48954: LD_INT 1
48956: ARRAY
48957: PPUSH
48958: CALL_OW 313
48962: PUSH
48963: LD_INT 3
48965: LESS
48966: IFFALSE 49002
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48968: LD_INT 0
48970: PPUSH
48971: LD_INT 5
48973: PUSH
48974: LD_INT 8
48976: PUSH
48977: LD_INT 9
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: LIST
48984: PUSH
48985: LD_VAR 0 17
48989: ARRAY
48990: PPUSH
48991: LD_VAR 0 4
48995: PPUSH
48996: CALL_OW 380
49000: GO 49019
// PrepareHuman ( false , i , skill ) ;
49002: LD_INT 0
49004: PPUSH
49005: LD_VAR 0 8
49009: PPUSH
49010: LD_VAR 0 4
49014: PPUSH
49015: CALL_OW 380
// end else
49019: GO 49038
// PrepareHuman ( false , i , skill ) ;
49021: LD_INT 0
49023: PPUSH
49024: LD_VAR 0 8
49028: PPUSH
49029: LD_VAR 0 4
49033: PPUSH
49034: CALL_OW 380
// un := CreateHuman ;
49038: LD_ADDR_VAR 0 14
49042: PUSH
49043: CALL_OW 44
49047: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49048: LD_ADDR_VAR 0 7
49052: PUSH
49053: LD_VAR 0 7
49057: PPUSH
49058: LD_INT 1
49060: PPUSH
49061: LD_VAR 0 14
49065: PPUSH
49066: CALL_OW 2
49070: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49071: LD_VAR 0 14
49075: PPUSH
49076: LD_VAR 0 12
49080: PUSH
49081: LD_INT 1
49083: ARRAY
49084: PPUSH
49085: CALL_OW 52
// end ;
49089: GO 48728
49091: POP
49092: POP
// end ;
49093: GO 48030
49095: POP
49096: POP
// result := result ^ buildings ;
49097: LD_ADDR_VAR 0 7
49101: PUSH
49102: LD_VAR 0 7
49106: PUSH
49107: LD_VAR 0 18
49111: ADD
49112: ST_TO_ADDR
// end else
49113: GO 49256
// begin for i = 1 to personel do
49115: LD_ADDR_VAR 0 8
49119: PUSH
49120: DOUBLE
49121: LD_INT 1
49123: DEC
49124: ST_TO_ADDR
49125: LD_VAR 0 6
49129: PUSH
49130: FOR_TO
49131: IFFALSE 49254
// begin if i > 4 then
49133: LD_VAR 0 8
49137: PUSH
49138: LD_INT 4
49140: GREATER
49141: IFFALSE 49145
// break ;
49143: GO 49254
// x := personel [ i ] ;
49145: LD_ADDR_VAR 0 13
49149: PUSH
49150: LD_VAR 0 6
49154: PUSH
49155: LD_VAR 0 8
49159: ARRAY
49160: ST_TO_ADDR
// if x = - 1 then
49161: LD_VAR 0 13
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: EQUAL
49170: IFFALSE 49174
// continue ;
49172: GO 49130
// PrepareHuman ( false , i , skill ) ;
49174: LD_INT 0
49176: PPUSH
49177: LD_VAR 0 8
49181: PPUSH
49182: LD_VAR 0 4
49186: PPUSH
49187: CALL_OW 380
// un := CreateHuman ;
49191: LD_ADDR_VAR 0 14
49195: PUSH
49196: CALL_OW 44
49200: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49201: LD_VAR 0 14
49205: PPUSH
49206: LD_VAR 0 1
49210: PPUSH
49211: CALL_OW 250
49215: PPUSH
49216: LD_VAR 0 1
49220: PPUSH
49221: CALL_OW 251
49225: PPUSH
49226: LD_INT 10
49228: PPUSH
49229: LD_INT 0
49231: PPUSH
49232: CALL_OW 50
// result := result ^ un ;
49236: LD_ADDR_VAR 0 7
49240: PUSH
49241: LD_VAR 0 7
49245: PUSH
49246: LD_VAR 0 14
49250: ADD
49251: ST_TO_ADDR
// end ;
49252: GO 49130
49254: POP
49255: POP
// end ; end ;
49256: LD_VAR 0 7
49260: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49261: LD_INT 0
49263: PPUSH
49264: PPUSH
49265: PPUSH
49266: PPUSH
49267: PPUSH
49268: PPUSH
49269: PPUSH
49270: PPUSH
49271: PPUSH
49272: PPUSH
49273: PPUSH
49274: PPUSH
49275: PPUSH
49276: PPUSH
49277: PPUSH
49278: PPUSH
// result := false ;
49279: LD_ADDR_VAR 0 3
49283: PUSH
49284: LD_INT 0
49286: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49287: LD_VAR 0 1
49291: NOT
49292: PUSH
49293: LD_VAR 0 1
49297: PPUSH
49298: CALL_OW 266
49302: PUSH
49303: LD_INT 32
49305: PUSH
49306: LD_INT 33
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: IN
49313: NOT
49314: OR
49315: IFFALSE 49319
// exit ;
49317: GO 50428
// nat := GetNation ( tower ) ;
49319: LD_ADDR_VAR 0 12
49323: PUSH
49324: LD_VAR 0 1
49328: PPUSH
49329: CALL_OW 248
49333: ST_TO_ADDR
// side := GetSide ( tower ) ;
49334: LD_ADDR_VAR 0 16
49338: PUSH
49339: LD_VAR 0 1
49343: PPUSH
49344: CALL_OW 255
49348: ST_TO_ADDR
// x := GetX ( tower ) ;
49349: LD_ADDR_VAR 0 10
49353: PUSH
49354: LD_VAR 0 1
49358: PPUSH
49359: CALL_OW 250
49363: ST_TO_ADDR
// y := GetY ( tower ) ;
49364: LD_ADDR_VAR 0 11
49368: PUSH
49369: LD_VAR 0 1
49373: PPUSH
49374: CALL_OW 251
49378: ST_TO_ADDR
// if not x or not y then
49379: LD_VAR 0 10
49383: NOT
49384: PUSH
49385: LD_VAR 0 11
49389: NOT
49390: OR
49391: IFFALSE 49395
// exit ;
49393: GO 50428
// weapon := 0 ;
49395: LD_ADDR_VAR 0 18
49399: PUSH
49400: LD_INT 0
49402: ST_TO_ADDR
// fac_list := [ ] ;
49403: LD_ADDR_VAR 0 17
49407: PUSH
49408: EMPTY
49409: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49410: LD_ADDR_VAR 0 6
49414: PUSH
49415: LD_VAR 0 1
49419: PPUSH
49420: CALL_OW 274
49424: PPUSH
49425: LD_VAR 0 2
49429: PPUSH
49430: LD_INT 0
49432: PPUSH
49433: CALL 46999 0 3
49437: PPUSH
49438: LD_INT 30
49440: PUSH
49441: LD_INT 3
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PPUSH
49448: CALL_OW 72
49452: ST_TO_ADDR
// if not factories then
49453: LD_VAR 0 6
49457: NOT
49458: IFFALSE 49462
// exit ;
49460: GO 50428
// for i in factories do
49462: LD_ADDR_VAR 0 8
49466: PUSH
49467: LD_VAR 0 6
49471: PUSH
49472: FOR_IN
49473: IFFALSE 49498
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49475: LD_ADDR_VAR 0 17
49479: PUSH
49480: LD_VAR 0 17
49484: PUSH
49485: LD_VAR 0 8
49489: PPUSH
49490: CALL_OW 478
49494: UNION
49495: ST_TO_ADDR
49496: GO 49472
49498: POP
49499: POP
// if not fac_list then
49500: LD_VAR 0 17
49504: NOT
49505: IFFALSE 49509
// exit ;
49507: GO 50428
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49509: LD_ADDR_VAR 0 5
49513: PUSH
49514: LD_INT 4
49516: PUSH
49517: LD_INT 5
49519: PUSH
49520: LD_INT 9
49522: PUSH
49523: LD_INT 10
49525: PUSH
49526: LD_INT 6
49528: PUSH
49529: LD_INT 7
49531: PUSH
49532: LD_INT 11
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 27
49546: PUSH
49547: LD_INT 28
49549: PUSH
49550: LD_INT 26
49552: PUSH
49553: LD_INT 30
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 43
49564: PUSH
49565: LD_INT 44
49567: PUSH
49568: LD_INT 46
49570: PUSH
49571: LD_INT 45
49573: PUSH
49574: LD_INT 47
49576: PUSH
49577: LD_INT 49
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: LIST
49592: PUSH
49593: LD_VAR 0 12
49597: ARRAY
49598: ST_TO_ADDR
// list := list isect fac_list ;
49599: LD_ADDR_VAR 0 5
49603: PUSH
49604: LD_VAR 0 5
49608: PUSH
49609: LD_VAR 0 17
49613: ISECT
49614: ST_TO_ADDR
// if not list then
49615: LD_VAR 0 5
49619: NOT
49620: IFFALSE 49624
// exit ;
49622: GO 50428
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49624: LD_VAR 0 12
49628: PUSH
49629: LD_INT 3
49631: EQUAL
49632: PUSH
49633: LD_INT 49
49635: PUSH
49636: LD_VAR 0 5
49640: IN
49641: AND
49642: PUSH
49643: LD_INT 31
49645: PPUSH
49646: LD_VAR 0 16
49650: PPUSH
49651: CALL_OW 321
49655: PUSH
49656: LD_INT 2
49658: EQUAL
49659: AND
49660: IFFALSE 49720
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49662: LD_INT 22
49664: PUSH
49665: LD_VAR 0 16
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 35
49676: PUSH
49677: LD_INT 49
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 91
49686: PUSH
49687: LD_VAR 0 1
49691: PUSH
49692: LD_INT 10
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: PPUSH
49705: CALL_OW 69
49709: NOT
49710: IFFALSE 49720
// weapon := ru_time_lapser ;
49712: LD_ADDR_VAR 0 18
49716: PUSH
49717: LD_INT 49
49719: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49720: LD_VAR 0 12
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: IN
49735: PUSH
49736: LD_INT 11
49738: PUSH
49739: LD_VAR 0 5
49743: IN
49744: PUSH
49745: LD_INT 30
49747: PUSH
49748: LD_VAR 0 5
49752: IN
49753: OR
49754: AND
49755: PUSH
49756: LD_INT 6
49758: PPUSH
49759: LD_VAR 0 16
49763: PPUSH
49764: CALL_OW 321
49768: PUSH
49769: LD_INT 2
49771: EQUAL
49772: AND
49773: IFFALSE 49938
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49775: LD_INT 22
49777: PUSH
49778: LD_VAR 0 16
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: LD_INT 35
49792: PUSH
49793: LD_INT 11
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 35
49802: PUSH
49803: LD_INT 30
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 91
49817: PUSH
49818: LD_VAR 0 1
49822: PUSH
49823: LD_INT 18
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: PPUSH
49836: CALL_OW 69
49840: NOT
49841: PUSH
49842: LD_INT 22
49844: PUSH
49845: LD_VAR 0 16
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: LD_INT 30
49859: PUSH
49860: LD_INT 32
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 30
49869: PUSH
49870: LD_INT 33
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 91
49884: PUSH
49885: LD_VAR 0 1
49889: PUSH
49890: LD_INT 12
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: LIST
49902: PUSH
49903: EMPTY
49904: LIST
49905: PPUSH
49906: CALL_OW 69
49910: PUSH
49911: LD_INT 2
49913: GREATER
49914: AND
49915: IFFALSE 49938
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49917: LD_ADDR_VAR 0 18
49921: PUSH
49922: LD_INT 11
49924: PUSH
49925: LD_INT 30
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_VAR 0 12
49936: ARRAY
49937: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49938: LD_VAR 0 18
49942: NOT
49943: PUSH
49944: LD_INT 40
49946: PPUSH
49947: LD_VAR 0 16
49951: PPUSH
49952: CALL_OW 321
49956: PUSH
49957: LD_INT 2
49959: EQUAL
49960: AND
49961: PUSH
49962: LD_INT 7
49964: PUSH
49965: LD_VAR 0 5
49969: IN
49970: PUSH
49971: LD_INT 28
49973: PUSH
49974: LD_VAR 0 5
49978: IN
49979: OR
49980: PUSH
49981: LD_INT 45
49983: PUSH
49984: LD_VAR 0 5
49988: IN
49989: OR
49990: AND
49991: IFFALSE 50245
// begin hex := GetHexInfo ( x , y ) ;
49993: LD_ADDR_VAR 0 4
49997: PUSH
49998: LD_VAR 0 10
50002: PPUSH
50003: LD_VAR 0 11
50007: PPUSH
50008: CALL_OW 546
50012: ST_TO_ADDR
// if hex [ 1 ] then
50013: LD_VAR 0 4
50017: PUSH
50018: LD_INT 1
50020: ARRAY
50021: IFFALSE 50025
// exit ;
50023: GO 50428
// height := hex [ 2 ] ;
50025: LD_ADDR_VAR 0 15
50029: PUSH
50030: LD_VAR 0 4
50034: PUSH
50035: LD_INT 2
50037: ARRAY
50038: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50039: LD_ADDR_VAR 0 14
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: LD_INT 5
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: ST_TO_ADDR
// for i in tmp do
50062: LD_ADDR_VAR 0 8
50066: PUSH
50067: LD_VAR 0 14
50071: PUSH
50072: FOR_IN
50073: IFFALSE 50243
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50075: LD_ADDR_VAR 0 9
50079: PUSH
50080: LD_VAR 0 10
50084: PPUSH
50085: LD_VAR 0 8
50089: PPUSH
50090: LD_INT 5
50092: PPUSH
50093: CALL_OW 272
50097: PUSH
50098: LD_VAR 0 11
50102: PPUSH
50103: LD_VAR 0 8
50107: PPUSH
50108: LD_INT 5
50110: PPUSH
50111: CALL_OW 273
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50120: LD_VAR 0 9
50124: PUSH
50125: LD_INT 1
50127: ARRAY
50128: PPUSH
50129: LD_VAR 0 9
50133: PUSH
50134: LD_INT 2
50136: ARRAY
50137: PPUSH
50138: CALL_OW 488
50142: IFFALSE 50241
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50144: LD_ADDR_VAR 0 4
50148: PUSH
50149: LD_VAR 0 9
50153: PUSH
50154: LD_INT 1
50156: ARRAY
50157: PPUSH
50158: LD_VAR 0 9
50162: PUSH
50163: LD_INT 2
50165: ARRAY
50166: PPUSH
50167: CALL_OW 546
50171: ST_TO_ADDR
// if hex [ 1 ] then
50172: LD_VAR 0 4
50176: PUSH
50177: LD_INT 1
50179: ARRAY
50180: IFFALSE 50184
// continue ;
50182: GO 50072
// h := hex [ 2 ] ;
50184: LD_ADDR_VAR 0 13
50188: PUSH
50189: LD_VAR 0 4
50193: PUSH
50194: LD_INT 2
50196: ARRAY
50197: ST_TO_ADDR
// if h + 7 < height then
50198: LD_VAR 0 13
50202: PUSH
50203: LD_INT 7
50205: PLUS
50206: PUSH
50207: LD_VAR 0 15
50211: LESS
50212: IFFALSE 50241
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50214: LD_ADDR_VAR 0 18
50218: PUSH
50219: LD_INT 7
50221: PUSH
50222: LD_INT 28
50224: PUSH
50225: LD_INT 45
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: LIST
50232: PUSH
50233: LD_VAR 0 12
50237: ARRAY
50238: ST_TO_ADDR
// break ;
50239: GO 50243
// end ; end ; end ;
50241: GO 50072
50243: POP
50244: POP
// end ; if not weapon then
50245: LD_VAR 0 18
50249: NOT
50250: IFFALSE 50310
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50252: LD_ADDR_VAR 0 5
50256: PUSH
50257: LD_VAR 0 5
50261: PUSH
50262: LD_INT 11
50264: PUSH
50265: LD_INT 30
50267: PUSH
50268: LD_INT 49
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: LIST
50275: DIFF
50276: ST_TO_ADDR
// if not list then
50277: LD_VAR 0 5
50281: NOT
50282: IFFALSE 50286
// exit ;
50284: GO 50428
// weapon := list [ rand ( 1 , list ) ] ;
50286: LD_ADDR_VAR 0 18
50290: PUSH
50291: LD_VAR 0 5
50295: PUSH
50296: LD_INT 1
50298: PPUSH
50299: LD_VAR 0 5
50303: PPUSH
50304: CALL_OW 12
50308: ARRAY
50309: ST_TO_ADDR
// end ; if weapon then
50310: LD_VAR 0 18
50314: IFFALSE 50428
// begin tmp := CostOfWeapon ( weapon ) ;
50316: LD_ADDR_VAR 0 14
50320: PUSH
50321: LD_VAR 0 18
50325: PPUSH
50326: CALL_OW 451
50330: ST_TO_ADDR
// j := GetBase ( tower ) ;
50331: LD_ADDR_VAR 0 9
50335: PUSH
50336: LD_VAR 0 1
50340: PPUSH
50341: CALL_OW 274
50345: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50346: LD_VAR 0 9
50350: PPUSH
50351: LD_INT 1
50353: PPUSH
50354: CALL_OW 275
50358: PUSH
50359: LD_VAR 0 14
50363: PUSH
50364: LD_INT 1
50366: ARRAY
50367: GREATEREQUAL
50368: PUSH
50369: LD_VAR 0 9
50373: PPUSH
50374: LD_INT 2
50376: PPUSH
50377: CALL_OW 275
50381: PUSH
50382: LD_VAR 0 14
50386: PUSH
50387: LD_INT 2
50389: ARRAY
50390: GREATEREQUAL
50391: AND
50392: PUSH
50393: LD_VAR 0 9
50397: PPUSH
50398: LD_INT 3
50400: PPUSH
50401: CALL_OW 275
50405: PUSH
50406: LD_VAR 0 14
50410: PUSH
50411: LD_INT 3
50413: ARRAY
50414: GREATEREQUAL
50415: AND
50416: IFFALSE 50428
// result := weapon ;
50418: LD_ADDR_VAR 0 3
50422: PUSH
50423: LD_VAR 0 18
50427: ST_TO_ADDR
// end ; end ;
50428: LD_VAR 0 3
50432: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50433: LD_INT 0
50435: PPUSH
50436: PPUSH
// result := true ;
50437: LD_ADDR_VAR 0 3
50441: PUSH
50442: LD_INT 1
50444: ST_TO_ADDR
// if array1 = array2 then
50445: LD_VAR 0 1
50449: PUSH
50450: LD_VAR 0 2
50454: EQUAL
50455: IFFALSE 50515
// begin for i = 1 to array1 do
50457: LD_ADDR_VAR 0 4
50461: PUSH
50462: DOUBLE
50463: LD_INT 1
50465: DEC
50466: ST_TO_ADDR
50467: LD_VAR 0 1
50471: PUSH
50472: FOR_TO
50473: IFFALSE 50511
// if array1 [ i ] <> array2 [ i ] then
50475: LD_VAR 0 1
50479: PUSH
50480: LD_VAR 0 4
50484: ARRAY
50485: PUSH
50486: LD_VAR 0 2
50490: PUSH
50491: LD_VAR 0 4
50495: ARRAY
50496: NONEQUAL
50497: IFFALSE 50509
// begin result := false ;
50499: LD_ADDR_VAR 0 3
50503: PUSH
50504: LD_INT 0
50506: ST_TO_ADDR
// break ;
50507: GO 50511
// end ;
50509: GO 50472
50511: POP
50512: POP
// end else
50513: GO 50523
// result := false ;
50515: LD_ADDR_VAR 0 3
50519: PUSH
50520: LD_INT 0
50522: ST_TO_ADDR
// end ;
50523: LD_VAR 0 3
50527: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50528: LD_INT 0
50530: PPUSH
50531: PPUSH
// if not array1 or not array2 then
50532: LD_VAR 0 1
50536: NOT
50537: PUSH
50538: LD_VAR 0 2
50542: NOT
50543: OR
50544: IFFALSE 50548
// exit ;
50546: GO 50612
// result := true ;
50548: LD_ADDR_VAR 0 3
50552: PUSH
50553: LD_INT 1
50555: ST_TO_ADDR
// for i = 1 to array1 do
50556: LD_ADDR_VAR 0 4
50560: PUSH
50561: DOUBLE
50562: LD_INT 1
50564: DEC
50565: ST_TO_ADDR
50566: LD_VAR 0 1
50570: PUSH
50571: FOR_TO
50572: IFFALSE 50610
// if array1 [ i ] <> array2 [ i ] then
50574: LD_VAR 0 1
50578: PUSH
50579: LD_VAR 0 4
50583: ARRAY
50584: PUSH
50585: LD_VAR 0 2
50589: PUSH
50590: LD_VAR 0 4
50594: ARRAY
50595: NONEQUAL
50596: IFFALSE 50608
// begin result := false ;
50598: LD_ADDR_VAR 0 3
50602: PUSH
50603: LD_INT 0
50605: ST_TO_ADDR
// break ;
50606: GO 50610
// end ;
50608: GO 50571
50610: POP
50611: POP
// end ;
50612: LD_VAR 0 3
50616: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50617: LD_INT 0
50619: PPUSH
50620: PPUSH
50621: PPUSH
// pom := GetBase ( fac ) ;
50622: LD_ADDR_VAR 0 5
50626: PUSH
50627: LD_VAR 0 1
50631: PPUSH
50632: CALL_OW 274
50636: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50637: LD_ADDR_VAR 0 4
50641: PUSH
50642: LD_VAR 0 2
50646: PUSH
50647: LD_INT 1
50649: ARRAY
50650: PPUSH
50651: LD_VAR 0 2
50655: PUSH
50656: LD_INT 2
50658: ARRAY
50659: PPUSH
50660: LD_VAR 0 2
50664: PUSH
50665: LD_INT 3
50667: ARRAY
50668: PPUSH
50669: LD_VAR 0 2
50673: PUSH
50674: LD_INT 4
50676: ARRAY
50677: PPUSH
50678: CALL_OW 449
50682: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50683: LD_ADDR_VAR 0 3
50687: PUSH
50688: LD_VAR 0 5
50692: PPUSH
50693: LD_INT 1
50695: PPUSH
50696: CALL_OW 275
50700: PUSH
50701: LD_VAR 0 4
50705: PUSH
50706: LD_INT 1
50708: ARRAY
50709: GREATEREQUAL
50710: PUSH
50711: LD_VAR 0 5
50715: PPUSH
50716: LD_INT 2
50718: PPUSH
50719: CALL_OW 275
50723: PUSH
50724: LD_VAR 0 4
50728: PUSH
50729: LD_INT 2
50731: ARRAY
50732: GREATEREQUAL
50733: AND
50734: PUSH
50735: LD_VAR 0 5
50739: PPUSH
50740: LD_INT 3
50742: PPUSH
50743: CALL_OW 275
50747: PUSH
50748: LD_VAR 0 4
50752: PUSH
50753: LD_INT 3
50755: ARRAY
50756: GREATEREQUAL
50757: AND
50758: ST_TO_ADDR
// end ;
50759: LD_VAR 0 3
50763: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50764: LD_INT 0
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
// pom := GetBase ( building ) ;
50770: LD_ADDR_VAR 0 3
50774: PUSH
50775: LD_VAR 0 1
50779: PPUSH
50780: CALL_OW 274
50784: ST_TO_ADDR
// if not pom then
50785: LD_VAR 0 3
50789: NOT
50790: IFFALSE 50794
// exit ;
50792: GO 50964
// btype := GetBType ( building ) ;
50794: LD_ADDR_VAR 0 5
50798: PUSH
50799: LD_VAR 0 1
50803: PPUSH
50804: CALL_OW 266
50808: ST_TO_ADDR
// if btype = b_armoury then
50809: LD_VAR 0 5
50813: PUSH
50814: LD_INT 4
50816: EQUAL
50817: IFFALSE 50827
// btype := b_barracks ;
50819: LD_ADDR_VAR 0 5
50823: PUSH
50824: LD_INT 5
50826: ST_TO_ADDR
// if btype = b_depot then
50827: LD_VAR 0 5
50831: PUSH
50832: LD_INT 0
50834: EQUAL
50835: IFFALSE 50845
// btype := b_warehouse ;
50837: LD_ADDR_VAR 0 5
50841: PUSH
50842: LD_INT 1
50844: ST_TO_ADDR
// if btype = b_workshop then
50845: LD_VAR 0 5
50849: PUSH
50850: LD_INT 2
50852: EQUAL
50853: IFFALSE 50863
// btype := b_factory ;
50855: LD_ADDR_VAR 0 5
50859: PUSH
50860: LD_INT 3
50862: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50863: LD_ADDR_VAR 0 4
50867: PUSH
50868: LD_VAR 0 5
50872: PPUSH
50873: LD_VAR 0 1
50877: PPUSH
50878: CALL_OW 248
50882: PPUSH
50883: CALL_OW 450
50887: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50888: LD_ADDR_VAR 0 2
50892: PUSH
50893: LD_VAR 0 3
50897: PPUSH
50898: LD_INT 1
50900: PPUSH
50901: CALL_OW 275
50905: PUSH
50906: LD_VAR 0 4
50910: PUSH
50911: LD_INT 1
50913: ARRAY
50914: GREATEREQUAL
50915: PUSH
50916: LD_VAR 0 3
50920: PPUSH
50921: LD_INT 2
50923: PPUSH
50924: CALL_OW 275
50928: PUSH
50929: LD_VAR 0 4
50933: PUSH
50934: LD_INT 2
50936: ARRAY
50937: GREATEREQUAL
50938: AND
50939: PUSH
50940: LD_VAR 0 3
50944: PPUSH
50945: LD_INT 3
50947: PPUSH
50948: CALL_OW 275
50952: PUSH
50953: LD_VAR 0 4
50957: PUSH
50958: LD_INT 3
50960: ARRAY
50961: GREATEREQUAL
50962: AND
50963: ST_TO_ADDR
// end ;
50964: LD_VAR 0 2
50968: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50969: LD_INT 0
50971: PPUSH
50972: PPUSH
50973: PPUSH
// pom := GetBase ( building ) ;
50974: LD_ADDR_VAR 0 4
50978: PUSH
50979: LD_VAR 0 1
50983: PPUSH
50984: CALL_OW 274
50988: ST_TO_ADDR
// if not pom then
50989: LD_VAR 0 4
50993: NOT
50994: IFFALSE 50998
// exit ;
50996: GO 51099
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50998: LD_ADDR_VAR 0 5
51002: PUSH
51003: LD_VAR 0 2
51007: PPUSH
51008: LD_VAR 0 1
51012: PPUSH
51013: CALL_OW 248
51017: PPUSH
51018: CALL_OW 450
51022: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51023: LD_ADDR_VAR 0 3
51027: PUSH
51028: LD_VAR 0 4
51032: PPUSH
51033: LD_INT 1
51035: PPUSH
51036: CALL_OW 275
51040: PUSH
51041: LD_VAR 0 5
51045: PUSH
51046: LD_INT 1
51048: ARRAY
51049: GREATEREQUAL
51050: PUSH
51051: LD_VAR 0 4
51055: PPUSH
51056: LD_INT 2
51058: PPUSH
51059: CALL_OW 275
51063: PUSH
51064: LD_VAR 0 5
51068: PUSH
51069: LD_INT 2
51071: ARRAY
51072: GREATEREQUAL
51073: AND
51074: PUSH
51075: LD_VAR 0 4
51079: PPUSH
51080: LD_INT 3
51082: PPUSH
51083: CALL_OW 275
51087: PUSH
51088: LD_VAR 0 5
51092: PUSH
51093: LD_INT 3
51095: ARRAY
51096: GREATEREQUAL
51097: AND
51098: ST_TO_ADDR
// end ;
51099: LD_VAR 0 3
51103: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51104: LD_INT 0
51106: PPUSH
51107: PPUSH
51108: PPUSH
51109: PPUSH
51110: PPUSH
51111: PPUSH
51112: PPUSH
51113: PPUSH
51114: PPUSH
51115: PPUSH
51116: PPUSH
// result := false ;
51117: LD_ADDR_VAR 0 8
51121: PUSH
51122: LD_INT 0
51124: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51125: LD_VAR 0 5
51129: NOT
51130: PUSH
51131: LD_VAR 0 1
51135: NOT
51136: OR
51137: PUSH
51138: LD_VAR 0 2
51142: NOT
51143: OR
51144: PUSH
51145: LD_VAR 0 3
51149: NOT
51150: OR
51151: IFFALSE 51155
// exit ;
51153: GO 51969
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51155: LD_ADDR_VAR 0 14
51159: PUSH
51160: LD_VAR 0 1
51164: PPUSH
51165: LD_VAR 0 2
51169: PPUSH
51170: LD_VAR 0 3
51174: PPUSH
51175: LD_VAR 0 4
51179: PPUSH
51180: LD_VAR 0 5
51184: PUSH
51185: LD_INT 1
51187: ARRAY
51188: PPUSH
51189: CALL_OW 248
51193: PPUSH
51194: LD_INT 0
51196: PPUSH
51197: CALL 53202 0 6
51201: ST_TO_ADDR
// if not hexes then
51202: LD_VAR 0 14
51206: NOT
51207: IFFALSE 51211
// exit ;
51209: GO 51969
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51211: LD_ADDR_VAR 0 17
51215: PUSH
51216: LD_VAR 0 5
51220: PPUSH
51221: LD_INT 22
51223: PUSH
51224: LD_VAR 0 13
51228: PPUSH
51229: CALL_OW 255
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 30
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 30
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PPUSH
51270: CALL_OW 72
51274: ST_TO_ADDR
// for i = 1 to hexes do
51275: LD_ADDR_VAR 0 9
51279: PUSH
51280: DOUBLE
51281: LD_INT 1
51283: DEC
51284: ST_TO_ADDR
51285: LD_VAR 0 14
51289: PUSH
51290: FOR_TO
51291: IFFALSE 51967
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51293: LD_ADDR_VAR 0 13
51297: PUSH
51298: LD_VAR 0 14
51302: PUSH
51303: LD_VAR 0 9
51307: ARRAY
51308: PUSH
51309: LD_INT 1
51311: ARRAY
51312: PPUSH
51313: LD_VAR 0 14
51317: PUSH
51318: LD_VAR 0 9
51322: ARRAY
51323: PUSH
51324: LD_INT 2
51326: ARRAY
51327: PPUSH
51328: CALL_OW 428
51332: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51333: LD_VAR 0 14
51337: PUSH
51338: LD_VAR 0 9
51342: ARRAY
51343: PUSH
51344: LD_INT 1
51346: ARRAY
51347: PPUSH
51348: LD_VAR 0 14
51352: PUSH
51353: LD_VAR 0 9
51357: ARRAY
51358: PUSH
51359: LD_INT 2
51361: ARRAY
51362: PPUSH
51363: CALL_OW 351
51367: PUSH
51368: LD_VAR 0 14
51372: PUSH
51373: LD_VAR 0 9
51377: ARRAY
51378: PUSH
51379: LD_INT 1
51381: ARRAY
51382: PPUSH
51383: LD_VAR 0 14
51387: PUSH
51388: LD_VAR 0 9
51392: ARRAY
51393: PUSH
51394: LD_INT 2
51396: ARRAY
51397: PPUSH
51398: CALL_OW 488
51402: NOT
51403: OR
51404: PUSH
51405: LD_VAR 0 13
51409: PPUSH
51410: CALL_OW 247
51414: PUSH
51415: LD_INT 3
51417: EQUAL
51418: OR
51419: IFFALSE 51425
// exit ;
51421: POP
51422: POP
51423: GO 51969
// if not tmp then
51425: LD_VAR 0 13
51429: NOT
51430: IFFALSE 51434
// continue ;
51432: GO 51290
// result := true ;
51434: LD_ADDR_VAR 0 8
51438: PUSH
51439: LD_INT 1
51441: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51442: LD_VAR 0 6
51446: PUSH
51447: LD_VAR 0 13
51451: PPUSH
51452: CALL_OW 247
51456: PUSH
51457: LD_INT 2
51459: EQUAL
51460: AND
51461: PUSH
51462: LD_VAR 0 13
51466: PPUSH
51467: CALL_OW 263
51471: PUSH
51472: LD_INT 1
51474: EQUAL
51475: AND
51476: IFFALSE 51640
// begin if IsDrivenBy ( tmp ) then
51478: LD_VAR 0 13
51482: PPUSH
51483: CALL_OW 311
51487: IFFALSE 51491
// continue ;
51489: GO 51290
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51491: LD_VAR 0 6
51495: PPUSH
51496: LD_INT 3
51498: PUSH
51499: LD_INT 60
51501: PUSH
51502: EMPTY
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: LD_INT 55
51514: PUSH
51515: EMPTY
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PPUSH
51526: CALL_OW 72
51530: IFFALSE 51638
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51532: LD_ADDR_VAR 0 18
51536: PUSH
51537: LD_VAR 0 6
51541: PPUSH
51542: LD_INT 3
51544: PUSH
51545: LD_INT 60
51547: PUSH
51548: EMPTY
51549: LIST
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: LD_INT 55
51560: PUSH
51561: EMPTY
51562: LIST
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PPUSH
51572: CALL_OW 72
51576: PUSH
51577: LD_INT 1
51579: ARRAY
51580: ST_TO_ADDR
// if IsInUnit ( driver ) then
51581: LD_VAR 0 18
51585: PPUSH
51586: CALL_OW 310
51590: IFFALSE 51601
// ComExit ( driver ) ;
51592: LD_VAR 0 18
51596: PPUSH
51597: CALL 76963 0 1
// AddComEnterUnit ( driver , tmp ) ;
51601: LD_VAR 0 18
51605: PPUSH
51606: LD_VAR 0 13
51610: PPUSH
51611: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51615: LD_VAR 0 18
51619: PPUSH
51620: LD_VAR 0 7
51624: PPUSH
51625: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51629: LD_VAR 0 18
51633: PPUSH
51634: CALL_OW 181
// end ; continue ;
51638: GO 51290
// end ; if not cleaners or not tmp in cleaners then
51640: LD_VAR 0 6
51644: NOT
51645: PUSH
51646: LD_VAR 0 13
51650: PUSH
51651: LD_VAR 0 6
51655: IN
51656: NOT
51657: OR
51658: IFFALSE 51965
// begin if dep then
51660: LD_VAR 0 17
51664: IFFALSE 51800
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51666: LD_ADDR_VAR 0 16
51670: PUSH
51671: LD_VAR 0 17
51675: PUSH
51676: LD_INT 1
51678: ARRAY
51679: PPUSH
51680: CALL_OW 250
51684: PPUSH
51685: LD_VAR 0 17
51689: PUSH
51690: LD_INT 1
51692: ARRAY
51693: PPUSH
51694: CALL_OW 254
51698: PPUSH
51699: LD_INT 5
51701: PPUSH
51702: CALL_OW 272
51706: PUSH
51707: LD_VAR 0 17
51711: PUSH
51712: LD_INT 1
51714: ARRAY
51715: PPUSH
51716: CALL_OW 251
51720: PPUSH
51721: LD_VAR 0 17
51725: PUSH
51726: LD_INT 1
51728: ARRAY
51729: PPUSH
51730: CALL_OW 254
51734: PPUSH
51735: LD_INT 5
51737: PPUSH
51738: CALL_OW 273
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51747: LD_VAR 0 16
51751: PUSH
51752: LD_INT 1
51754: ARRAY
51755: PPUSH
51756: LD_VAR 0 16
51760: PUSH
51761: LD_INT 2
51763: ARRAY
51764: PPUSH
51765: CALL_OW 488
51769: IFFALSE 51800
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51771: LD_VAR 0 13
51775: PPUSH
51776: LD_VAR 0 16
51780: PUSH
51781: LD_INT 1
51783: ARRAY
51784: PPUSH
51785: LD_VAR 0 16
51789: PUSH
51790: LD_INT 2
51792: ARRAY
51793: PPUSH
51794: CALL_OW 111
// continue ;
51798: GO 51290
// end ; end ; r := GetDir ( tmp ) ;
51800: LD_ADDR_VAR 0 15
51804: PUSH
51805: LD_VAR 0 13
51809: PPUSH
51810: CALL_OW 254
51814: ST_TO_ADDR
// if r = 5 then
51815: LD_VAR 0 15
51819: PUSH
51820: LD_INT 5
51822: EQUAL
51823: IFFALSE 51833
// r := 0 ;
51825: LD_ADDR_VAR 0 15
51829: PUSH
51830: LD_INT 0
51832: ST_TO_ADDR
// for j = r to 5 do
51833: LD_ADDR_VAR 0 10
51837: PUSH
51838: DOUBLE
51839: LD_VAR 0 15
51843: DEC
51844: ST_TO_ADDR
51845: LD_INT 5
51847: PUSH
51848: FOR_TO
51849: IFFALSE 51963
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51851: LD_ADDR_VAR 0 11
51855: PUSH
51856: LD_VAR 0 13
51860: PPUSH
51861: CALL_OW 250
51865: PPUSH
51866: LD_VAR 0 10
51870: PPUSH
51871: LD_INT 2
51873: PPUSH
51874: CALL_OW 272
51878: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51879: LD_ADDR_VAR 0 12
51883: PUSH
51884: LD_VAR 0 13
51888: PPUSH
51889: CALL_OW 251
51893: PPUSH
51894: LD_VAR 0 10
51898: PPUSH
51899: LD_INT 2
51901: PPUSH
51902: CALL_OW 273
51906: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51907: LD_VAR 0 11
51911: PPUSH
51912: LD_VAR 0 12
51916: PPUSH
51917: CALL_OW 488
51921: PUSH
51922: LD_VAR 0 11
51926: PPUSH
51927: LD_VAR 0 12
51931: PPUSH
51932: CALL_OW 428
51936: NOT
51937: AND
51938: IFFALSE 51961
// begin ComMoveXY ( tmp , _x , _y ) ;
51940: LD_VAR 0 13
51944: PPUSH
51945: LD_VAR 0 11
51949: PPUSH
51950: LD_VAR 0 12
51954: PPUSH
51955: CALL_OW 111
// break ;
51959: GO 51963
// end ; end ;
51961: GO 51848
51963: POP
51964: POP
// end ; end ;
51965: GO 51290
51967: POP
51968: POP
// end ;
51969: LD_VAR 0 8
51973: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51974: LD_INT 0
51976: PPUSH
// result := true ;
51977: LD_ADDR_VAR 0 3
51981: PUSH
51982: LD_INT 1
51984: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51985: LD_VAR 0 2
51989: PUSH
51990: LD_INT 24
51992: DOUBLE
51993: EQUAL
51994: IFTRUE 52004
51996: LD_INT 33
51998: DOUBLE
51999: EQUAL
52000: IFTRUE 52004
52002: GO 52029
52004: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52005: LD_ADDR_VAR 0 3
52009: PUSH
52010: LD_INT 32
52012: PPUSH
52013: LD_VAR 0 1
52017: PPUSH
52018: CALL_OW 321
52022: PUSH
52023: LD_INT 2
52025: EQUAL
52026: ST_TO_ADDR
52027: GO 52345
52029: LD_INT 20
52031: DOUBLE
52032: EQUAL
52033: IFTRUE 52037
52035: GO 52062
52037: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52038: LD_ADDR_VAR 0 3
52042: PUSH
52043: LD_INT 6
52045: PPUSH
52046: LD_VAR 0 1
52050: PPUSH
52051: CALL_OW 321
52055: PUSH
52056: LD_INT 2
52058: EQUAL
52059: ST_TO_ADDR
52060: GO 52345
52062: LD_INT 22
52064: DOUBLE
52065: EQUAL
52066: IFTRUE 52076
52068: LD_INT 36
52070: DOUBLE
52071: EQUAL
52072: IFTRUE 52076
52074: GO 52101
52076: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52077: LD_ADDR_VAR 0 3
52081: PUSH
52082: LD_INT 15
52084: PPUSH
52085: LD_VAR 0 1
52089: PPUSH
52090: CALL_OW 321
52094: PUSH
52095: LD_INT 2
52097: EQUAL
52098: ST_TO_ADDR
52099: GO 52345
52101: LD_INT 30
52103: DOUBLE
52104: EQUAL
52105: IFTRUE 52109
52107: GO 52134
52109: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52110: LD_ADDR_VAR 0 3
52114: PUSH
52115: LD_INT 20
52117: PPUSH
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL_OW 321
52127: PUSH
52128: LD_INT 2
52130: EQUAL
52131: ST_TO_ADDR
52132: GO 52345
52134: LD_INT 28
52136: DOUBLE
52137: EQUAL
52138: IFTRUE 52148
52140: LD_INT 21
52142: DOUBLE
52143: EQUAL
52144: IFTRUE 52148
52146: GO 52173
52148: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52149: LD_ADDR_VAR 0 3
52153: PUSH
52154: LD_INT 21
52156: PPUSH
52157: LD_VAR 0 1
52161: PPUSH
52162: CALL_OW 321
52166: PUSH
52167: LD_INT 2
52169: EQUAL
52170: ST_TO_ADDR
52171: GO 52345
52173: LD_INT 16
52175: DOUBLE
52176: EQUAL
52177: IFTRUE 52181
52179: GO 52206
52181: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52182: LD_ADDR_VAR 0 3
52186: PUSH
52187: LD_INT 84
52189: PPUSH
52190: LD_VAR 0 1
52194: PPUSH
52195: CALL_OW 321
52199: PUSH
52200: LD_INT 2
52202: EQUAL
52203: ST_TO_ADDR
52204: GO 52345
52206: LD_INT 19
52208: DOUBLE
52209: EQUAL
52210: IFTRUE 52220
52212: LD_INT 23
52214: DOUBLE
52215: EQUAL
52216: IFTRUE 52220
52218: GO 52245
52220: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52221: LD_ADDR_VAR 0 3
52225: PUSH
52226: LD_INT 83
52228: PPUSH
52229: LD_VAR 0 1
52233: PPUSH
52234: CALL_OW 321
52238: PUSH
52239: LD_INT 2
52241: EQUAL
52242: ST_TO_ADDR
52243: GO 52345
52245: LD_INT 17
52247: DOUBLE
52248: EQUAL
52249: IFTRUE 52253
52251: GO 52278
52253: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52254: LD_ADDR_VAR 0 3
52258: PUSH
52259: LD_INT 39
52261: PPUSH
52262: LD_VAR 0 1
52266: PPUSH
52267: CALL_OW 321
52271: PUSH
52272: LD_INT 2
52274: EQUAL
52275: ST_TO_ADDR
52276: GO 52345
52278: LD_INT 18
52280: DOUBLE
52281: EQUAL
52282: IFTRUE 52286
52284: GO 52311
52286: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52287: LD_ADDR_VAR 0 3
52291: PUSH
52292: LD_INT 40
52294: PPUSH
52295: LD_VAR 0 1
52299: PPUSH
52300: CALL_OW 321
52304: PUSH
52305: LD_INT 2
52307: EQUAL
52308: ST_TO_ADDR
52309: GO 52345
52311: LD_INT 27
52313: DOUBLE
52314: EQUAL
52315: IFTRUE 52319
52317: GO 52344
52319: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52320: LD_ADDR_VAR 0 3
52324: PUSH
52325: LD_INT 35
52327: PPUSH
52328: LD_VAR 0 1
52332: PPUSH
52333: CALL_OW 321
52337: PUSH
52338: LD_INT 2
52340: EQUAL
52341: ST_TO_ADDR
52342: GO 52345
52344: POP
// end ;
52345: LD_VAR 0 3
52349: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52350: LD_INT 0
52352: PPUSH
52353: PPUSH
52354: PPUSH
52355: PPUSH
52356: PPUSH
52357: PPUSH
52358: PPUSH
52359: PPUSH
52360: PPUSH
52361: PPUSH
52362: PPUSH
// result := false ;
52363: LD_ADDR_VAR 0 6
52367: PUSH
52368: LD_INT 0
52370: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52371: LD_VAR 0 1
52375: NOT
52376: PUSH
52377: LD_VAR 0 1
52381: PPUSH
52382: CALL_OW 266
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: IN
52397: NOT
52398: OR
52399: PUSH
52400: LD_VAR 0 2
52404: NOT
52405: OR
52406: PUSH
52407: LD_VAR 0 5
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: LD_INT 4
52426: PUSH
52427: LD_INT 5
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: IN
52438: NOT
52439: OR
52440: PUSH
52441: LD_VAR 0 3
52445: PPUSH
52446: LD_VAR 0 4
52450: PPUSH
52451: CALL_OW 488
52455: NOT
52456: OR
52457: IFFALSE 52461
// exit ;
52459: GO 53197
// side := GetSide ( depot ) ;
52461: LD_ADDR_VAR 0 9
52465: PUSH
52466: LD_VAR 0 1
52470: PPUSH
52471: CALL_OW 255
52475: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52476: LD_VAR 0 9
52480: PPUSH
52481: LD_VAR 0 2
52485: PPUSH
52486: CALL 51974 0 2
52490: NOT
52491: IFFALSE 52495
// exit ;
52493: GO 53197
// pom := GetBase ( depot ) ;
52495: LD_ADDR_VAR 0 10
52499: PUSH
52500: LD_VAR 0 1
52504: PPUSH
52505: CALL_OW 274
52509: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52510: LD_ADDR_VAR 0 11
52514: PUSH
52515: LD_VAR 0 2
52519: PPUSH
52520: LD_VAR 0 1
52524: PPUSH
52525: CALL_OW 248
52529: PPUSH
52530: CALL_OW 450
52534: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52535: LD_VAR 0 10
52539: PPUSH
52540: LD_INT 1
52542: PPUSH
52543: CALL_OW 275
52547: PUSH
52548: LD_VAR 0 11
52552: PUSH
52553: LD_INT 1
52555: ARRAY
52556: GREATEREQUAL
52557: PUSH
52558: LD_VAR 0 10
52562: PPUSH
52563: LD_INT 2
52565: PPUSH
52566: CALL_OW 275
52570: PUSH
52571: LD_VAR 0 11
52575: PUSH
52576: LD_INT 2
52578: ARRAY
52579: GREATEREQUAL
52580: AND
52581: PUSH
52582: LD_VAR 0 10
52586: PPUSH
52587: LD_INT 3
52589: PPUSH
52590: CALL_OW 275
52594: PUSH
52595: LD_VAR 0 11
52599: PUSH
52600: LD_INT 3
52602: ARRAY
52603: GREATEREQUAL
52604: AND
52605: NOT
52606: IFFALSE 52610
// exit ;
52608: GO 53197
// if GetBType ( depot ) = b_depot then
52610: LD_VAR 0 1
52614: PPUSH
52615: CALL_OW 266
52619: PUSH
52620: LD_INT 0
52622: EQUAL
52623: IFFALSE 52635
// dist := 28 else
52625: LD_ADDR_VAR 0 14
52629: PUSH
52630: LD_INT 28
52632: ST_TO_ADDR
52633: GO 52643
// dist := 36 ;
52635: LD_ADDR_VAR 0 14
52639: PUSH
52640: LD_INT 36
52642: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52643: LD_VAR 0 1
52647: PPUSH
52648: LD_VAR 0 3
52652: PPUSH
52653: LD_VAR 0 4
52657: PPUSH
52658: CALL_OW 297
52662: PUSH
52663: LD_VAR 0 14
52667: GREATER
52668: IFFALSE 52672
// exit ;
52670: GO 53197
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52672: LD_ADDR_VAR 0 12
52676: PUSH
52677: LD_VAR 0 2
52681: PPUSH
52682: LD_VAR 0 3
52686: PPUSH
52687: LD_VAR 0 4
52691: PPUSH
52692: LD_VAR 0 5
52696: PPUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 248
52706: PPUSH
52707: LD_INT 0
52709: PPUSH
52710: CALL 53202 0 6
52714: ST_TO_ADDR
// if not hexes then
52715: LD_VAR 0 12
52719: NOT
52720: IFFALSE 52724
// exit ;
52722: GO 53197
// hex := GetHexInfo ( x , y ) ;
52724: LD_ADDR_VAR 0 15
52728: PUSH
52729: LD_VAR 0 3
52733: PPUSH
52734: LD_VAR 0 4
52738: PPUSH
52739: CALL_OW 546
52743: ST_TO_ADDR
// if hex [ 1 ] then
52744: LD_VAR 0 15
52748: PUSH
52749: LD_INT 1
52751: ARRAY
52752: IFFALSE 52756
// exit ;
52754: GO 53197
// height := hex [ 2 ] ;
52756: LD_ADDR_VAR 0 13
52760: PUSH
52761: LD_VAR 0 15
52765: PUSH
52766: LD_INT 2
52768: ARRAY
52769: ST_TO_ADDR
// for i = 1 to hexes do
52770: LD_ADDR_VAR 0 7
52774: PUSH
52775: DOUBLE
52776: LD_INT 1
52778: DEC
52779: ST_TO_ADDR
52780: LD_VAR 0 12
52784: PUSH
52785: FOR_TO
52786: IFFALSE 53116
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52788: LD_VAR 0 12
52792: PUSH
52793: LD_VAR 0 7
52797: ARRAY
52798: PUSH
52799: LD_INT 1
52801: ARRAY
52802: PPUSH
52803: LD_VAR 0 12
52807: PUSH
52808: LD_VAR 0 7
52812: ARRAY
52813: PUSH
52814: LD_INT 2
52816: ARRAY
52817: PPUSH
52818: CALL_OW 488
52822: NOT
52823: PUSH
52824: LD_VAR 0 12
52828: PUSH
52829: LD_VAR 0 7
52833: ARRAY
52834: PUSH
52835: LD_INT 1
52837: ARRAY
52838: PPUSH
52839: LD_VAR 0 12
52843: PUSH
52844: LD_VAR 0 7
52848: ARRAY
52849: PUSH
52850: LD_INT 2
52852: ARRAY
52853: PPUSH
52854: CALL_OW 428
52858: PUSH
52859: LD_INT 0
52861: GREATER
52862: OR
52863: PUSH
52864: LD_VAR 0 12
52868: PUSH
52869: LD_VAR 0 7
52873: ARRAY
52874: PUSH
52875: LD_INT 1
52877: ARRAY
52878: PPUSH
52879: LD_VAR 0 12
52883: PUSH
52884: LD_VAR 0 7
52888: ARRAY
52889: PUSH
52890: LD_INT 2
52892: ARRAY
52893: PPUSH
52894: CALL_OW 351
52898: OR
52899: IFFALSE 52905
// exit ;
52901: POP
52902: POP
52903: GO 53197
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52905: LD_ADDR_VAR 0 8
52909: PUSH
52910: LD_VAR 0 12
52914: PUSH
52915: LD_VAR 0 7
52919: ARRAY
52920: PUSH
52921: LD_INT 1
52923: ARRAY
52924: PPUSH
52925: LD_VAR 0 12
52929: PUSH
52930: LD_VAR 0 7
52934: ARRAY
52935: PUSH
52936: LD_INT 2
52938: ARRAY
52939: PPUSH
52940: CALL_OW 546
52944: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52945: LD_VAR 0 8
52949: PUSH
52950: LD_INT 1
52952: ARRAY
52953: PUSH
52954: LD_VAR 0 8
52958: PUSH
52959: LD_INT 2
52961: ARRAY
52962: PUSH
52963: LD_VAR 0 13
52967: PUSH
52968: LD_INT 2
52970: PLUS
52971: GREATER
52972: OR
52973: PUSH
52974: LD_VAR 0 8
52978: PUSH
52979: LD_INT 2
52981: ARRAY
52982: PUSH
52983: LD_VAR 0 13
52987: PUSH
52988: LD_INT 2
52990: MINUS
52991: LESS
52992: OR
52993: PUSH
52994: LD_VAR 0 8
52998: PUSH
52999: LD_INT 3
53001: ARRAY
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 8
53008: PUSH
53009: LD_INT 9
53011: PUSH
53012: LD_INT 10
53014: PUSH
53015: LD_INT 11
53017: PUSH
53018: LD_INT 12
53020: PUSH
53021: LD_INT 13
53023: PUSH
53024: LD_INT 16
53026: PUSH
53027: LD_INT 17
53029: PUSH
53030: LD_INT 18
53032: PUSH
53033: LD_INT 19
53035: PUSH
53036: LD_INT 20
53038: PUSH
53039: LD_INT 21
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: IN
53057: NOT
53058: OR
53059: PUSH
53060: LD_VAR 0 8
53064: PUSH
53065: LD_INT 5
53067: ARRAY
53068: NOT
53069: OR
53070: PUSH
53071: LD_VAR 0 8
53075: PUSH
53076: LD_INT 6
53078: ARRAY
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: LD_INT 7
53088: PUSH
53089: LD_INT 9
53091: PUSH
53092: LD_INT 10
53094: PUSH
53095: LD_INT 11
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: IN
53106: NOT
53107: OR
53108: IFFALSE 53114
// exit ;
53110: POP
53111: POP
53112: GO 53197
// end ;
53114: GO 52785
53116: POP
53117: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53118: LD_VAR 0 9
53122: PPUSH
53123: LD_VAR 0 3
53127: PPUSH
53128: LD_VAR 0 4
53132: PPUSH
53133: LD_INT 20
53135: PPUSH
53136: CALL 45149 0 4
53140: PUSH
53141: LD_INT 4
53143: ARRAY
53144: IFFALSE 53148
// exit ;
53146: GO 53197
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53148: LD_VAR 0 2
53152: PUSH
53153: LD_INT 29
53155: PUSH
53156: LD_INT 30
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: IN
53163: PUSH
53164: LD_VAR 0 3
53168: PPUSH
53169: LD_VAR 0 4
53173: PPUSH
53174: LD_VAR 0 9
53178: PPUSH
53179: CALL_OW 440
53183: NOT
53184: AND
53185: IFFALSE 53189
// exit ;
53187: GO 53197
// result := true ;
53189: LD_ADDR_VAR 0 6
53193: PUSH
53194: LD_INT 1
53196: ST_TO_ADDR
// end ;
53197: LD_VAR 0 6
53201: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53202: LD_INT 0
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
53229: PPUSH
53230: PPUSH
53231: PPUSH
53232: PPUSH
53233: PPUSH
53234: PPUSH
53235: PPUSH
53236: PPUSH
53237: PPUSH
53238: PPUSH
53239: PPUSH
53240: PPUSH
53241: PPUSH
53242: PPUSH
53243: PPUSH
53244: PPUSH
53245: PPUSH
53246: PPUSH
53247: PPUSH
53248: PPUSH
53249: PPUSH
53250: PPUSH
53251: PPUSH
53252: PPUSH
53253: PPUSH
53254: PPUSH
53255: PPUSH
53256: PPUSH
53257: PPUSH
53258: PPUSH
53259: PPUSH
53260: PPUSH
53261: PPUSH
// result = [ ] ;
53262: LD_ADDR_VAR 0 7
53266: PUSH
53267: EMPTY
53268: ST_TO_ADDR
// temp_list = [ ] ;
53269: LD_ADDR_VAR 0 9
53273: PUSH
53274: EMPTY
53275: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53276: LD_VAR 0 4
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: LD_INT 4
53295: PUSH
53296: LD_INT 5
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: IN
53307: NOT
53308: PUSH
53309: LD_VAR 0 1
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: IN
53324: PUSH
53325: LD_VAR 0 5
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: IN
53344: NOT
53345: AND
53346: OR
53347: IFFALSE 53351
// exit ;
53349: GO 71742
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53351: LD_VAR 0 1
53355: PUSH
53356: LD_INT 6
53358: PUSH
53359: LD_INT 7
53361: PUSH
53362: LD_INT 8
53364: PUSH
53365: LD_INT 13
53367: PUSH
53368: LD_INT 12
53370: PUSH
53371: LD_INT 15
53373: PUSH
53374: LD_INT 11
53376: PUSH
53377: LD_INT 14
53379: PUSH
53380: LD_INT 10
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: IN
53394: IFFALSE 53404
// btype = b_lab ;
53396: LD_ADDR_VAR 0 1
53400: PUSH
53401: LD_INT 6
53403: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53404: LD_VAR 0 6
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: IN
53423: NOT
53424: PUSH
53425: LD_VAR 0 1
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: LD_INT 6
53444: PUSH
53445: LD_INT 36
53447: PUSH
53448: LD_INT 4
53450: PUSH
53451: LD_INT 5
53453: PUSH
53454: LD_INT 31
53456: PUSH
53457: LD_INT 32
53459: PUSH
53460: LD_INT 33
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: IN
53476: NOT
53477: PUSH
53478: LD_VAR 0 6
53482: PUSH
53483: LD_INT 1
53485: EQUAL
53486: AND
53487: OR
53488: PUSH
53489: LD_VAR 0 1
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: IN
53504: NOT
53505: PUSH
53506: LD_VAR 0 6
53510: PUSH
53511: LD_INT 2
53513: EQUAL
53514: AND
53515: OR
53516: IFFALSE 53526
// mode = 0 ;
53518: LD_ADDR_VAR 0 6
53522: PUSH
53523: LD_INT 0
53525: ST_TO_ADDR
// case mode of 0 :
53526: LD_VAR 0 6
53530: PUSH
53531: LD_INT 0
53533: DOUBLE
53534: EQUAL
53535: IFTRUE 53539
53537: GO 64992
53539: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53540: LD_ADDR_VAR 0 11
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53733: LD_ADDR_VAR 0 12
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 3
53890: NEG
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53929: LD_ADDR_VAR 0 13
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: LD_INT 3
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 3
54088: NEG
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54128: LD_ADDR_VAR 0 14
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 3
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 3
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54324: LD_ADDR_VAR 0 15
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54517: LD_ADDR_VAR 0 16
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: LD_INT 3
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54710: LD_ADDR_VAR 0 17
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54940: LD_ADDR_VAR 0 18
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55170: LD_ADDR_VAR 0 19
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55400: LD_ADDR_VAR 0 20
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55630: LD_ADDR_VAR 0 21
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55860: LD_ADDR_VAR 0 22
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56090: LD_ADDR_VAR 0 23
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: LD_INT 3
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 3
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56370: LD_ADDR_VAR 0 24
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: LD_INT 2
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56646: LD_ADDR_VAR 0 25
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 3
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56920: LD_ADDR_VAR 0 26
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 3
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57196: LD_ADDR_VAR 0 27
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: NEG
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57476: LD_ADDR_VAR 0 28
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 2
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 3
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 3
57711: NEG
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57758: LD_ADDR_VAR 0 29
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58037: LD_ADDR_VAR 0 30
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 2
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58315: LD_ADDR_VAR 0 31
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58593: LD_ADDR_VAR 0 32
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 2
58825: NEG
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58871: LD_ADDR_VAR 0 33
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 3
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 3
59115: NEG
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59150: LD_ADDR_VAR 0 34
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 2
59306: NEG
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: LD_INT 3
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 3
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59430: LD_ADDR_VAR 0 35
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59542: LD_ADDR_VAR 0 36
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59654: LD_ADDR_VAR 0 37
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59766: LD_ADDR_VAR 0 38
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59878: LD_ADDR_VAR 0 39
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59990: LD_ADDR_VAR 0 40
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60102: LD_ADDR_VAR 0 41
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 3
60345: PUSH
60346: LD_INT 3
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: LD_INT 3
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 2
60365: NEG
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60452: LD_ADDR_VAR 0 42
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: LD_INT 2
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: LD_INT 3
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 3
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 2
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 3
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 3
60698: PUSH
60699: LD_INT 3
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: LD_INT 3
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 3
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 3
60749: NEG
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 3
60761: NEG
60762: PUSH
60763: LD_INT 3
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60802: LD_ADDR_VAR 0 43
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 2
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 3
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 3
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: NEG
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 3
61098: NEG
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 3
61109: NEG
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61150: LD_ADDR_VAR 0 44
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 2
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: NEG
61341: PUSH
61342: LD_INT 3
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 3
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 3
61393: PUSH
61394: LD_INT 3
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 3
61424: NEG
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 3
61435: NEG
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: NEG
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 3
61459: NEG
61460: PUSH
61461: LD_INT 3
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61500: LD_ADDR_VAR 0 45
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: LD_INT 2
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: LD_INT 2
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: LD_INT 3
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: LD_INT 3
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 3
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 3
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 3
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 3
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 3
61797: NEG
61798: PUSH
61799: LD_INT 2
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61850: LD_ADDR_VAR 0 46
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: LD_INT 1
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: LD_INT 2
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: LD_INT 2
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 2
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 2
62027: NEG
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 3
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 3
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 2
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 3
62146: NEG
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62198: LD_ADDR_VAR 0 47
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: NEG
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62349: LD_ADDR_VAR 0 48
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: LD_INT 2
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62496: LD_ADDR_VAR 0 49
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: LD_INT 2
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: LD_INT 2
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62640: LD_ADDR_VAR 0 50
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62784: LD_ADDR_VAR 0 51
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 2
62896: NEG
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62931: LD_ADDR_VAR 0 52
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 2
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 2
63035: NEG
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 2
63046: NEG
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: NEG
63059: PUSH
63060: LD_INT 2
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63082: LD_ADDR_VAR 0 53
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: LD_INT 2
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 2
63281: NEG
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63312: LD_ADDR_VAR 0 54
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 1
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 2
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 2
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 2
63488: NEG
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 2
63499: NEG
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 2
63511: NEG
63512: PUSH
63513: LD_INT 2
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63542: LD_ADDR_VAR 0 55
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 2
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 2
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 2
63741: NEG
63742: PUSH
63743: LD_INT 2
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63772: LD_ADDR_VAR 0 56
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 2
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 2
63959: NEG
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 2
63971: NEG
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64002: LD_ADDR_VAR 0 57
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: NEG
64084: PUSH
64085: LD_INT 2
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 2
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: PUSH
64128: LD_INT 1
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 2
64178: NEG
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: LD_INT 2
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64232: LD_ADDR_VAR 0 58
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: NEG
64314: PUSH
64315: LD_INT 2
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: LD_INT 2
64328: NEG
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 2
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 2
64367: PUSH
64368: LD_INT 2
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: LD_INT 2
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 2
64408: NEG
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 2
64419: NEG
64420: PUSH
64421: LD_INT 1
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 2
64431: NEG
64432: PUSH
64433: LD_INT 2
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64462: LD_ADDR_VAR 0 59
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: NEG
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64550: LD_ADDR_VAR 0 60
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64638: LD_ADDR_VAR 0 61
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 1
64696: NEG
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64726: LD_ADDR_VAR 0 62
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 0
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64814: LD_ADDR_VAR 0 63
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 1
64834: NEG
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64902: LD_ADDR_VAR 0 64
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 1
64971: NEG
64972: PUSH
64973: LD_INT 1
64975: NEG
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: ST_TO_ADDR
// end ; 1 :
64990: GO 70887
64992: LD_INT 1
64994: DOUBLE
64995: EQUAL
64996: IFTRUE 65000
64998: GO 67623
65000: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65001: LD_ADDR_VAR 0 11
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: LD_INT 3
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 3
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 2
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: LIST
65044: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65045: LD_ADDR_VAR 0 12
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 3
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 3
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65086: LD_ADDR_VAR 0 13
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: PUSH
65114: LD_INT 3
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65126: LD_ADDR_VAR 0 14
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: LD_INT 3
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: LD_INT 3
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: LIST
65166: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65167: LD_ADDR_VAR 0 15
65171: PUSH
65172: LD_INT 2
65174: NEG
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 3
65185: NEG
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 3
65196: NEG
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: LIST
65210: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65211: LD_ADDR_VAR 0 16
65215: PUSH
65216: LD_INT 2
65218: NEG
65219: PUSH
65220: LD_INT 3
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 3
65230: NEG
65231: PUSH
65232: LD_INT 2
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 3
65242: NEG
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65257: LD_ADDR_VAR 0 17
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: LD_INT 3
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: LD_INT 3
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65301: LD_ADDR_VAR 0 18
65305: PUSH
65306: LD_INT 2
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 3
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 3
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65342: LD_ADDR_VAR 0 19
65346: PUSH
65347: LD_INT 3
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: LD_INT 3
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: LD_INT 3
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65382: LD_ADDR_VAR 0 20
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: LD_INT 3
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: NEG
65410: PUSH
65411: LD_INT 2
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: LIST
65422: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65423: LD_ADDR_VAR 0 21
65427: PUSH
65428: LD_INT 2
65430: NEG
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 3
65441: NEG
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 3
65452: NEG
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: LIST
65466: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65467: LD_ADDR_VAR 0 22
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: LD_INT 3
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 3
65486: NEG
65487: PUSH
65488: LD_INT 2
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 3
65498: NEG
65499: PUSH
65500: LD_INT 3
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65513: LD_ADDR_VAR 0 23
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 3
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: LD_INT 4
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: LD_INT 3
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65557: LD_ADDR_VAR 0 24
65561: PUSH
65562: LD_INT 3
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 3
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 4
65585: PUSH
65586: LD_INT 1
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65598: LD_ADDR_VAR 0 25
65602: PUSH
65603: LD_INT 3
65605: PUSH
65606: LD_INT 3
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 4
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 3
65625: PUSH
65626: LD_INT 4
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65638: LD_ADDR_VAR 0 26
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 4
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: NEG
65666: PUSH
65667: LD_INT 3
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: LIST
65678: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65679: LD_ADDR_VAR 0 27
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 3
65697: NEG
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 4
65708: NEG
65709: PUSH
65710: LD_INT 1
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65723: LD_ADDR_VAR 0 28
65727: PUSH
65728: LD_INT 3
65730: NEG
65731: PUSH
65732: LD_INT 3
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 3
65742: NEG
65743: PUSH
65744: LD_INT 4
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 4
65754: NEG
65755: PUSH
65756: LD_INT 3
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65769: LD_ADDR_VAR 0 29
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: LD_INT 3
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 3
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: LD_INT 2
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 1
65810: NEG
65811: PUSH
65812: LD_INT 4
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 4
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 3
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: LD_INT 5
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 5
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: LD_INT 4
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: LD_INT 6
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 6
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: LD_INT 5
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65924: LD_ADDR_VAR 0 30
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 3
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 4
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 4
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 4
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 5
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 5
66014: PUSH
66015: LD_INT 1
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 5
66024: PUSH
66025: LD_INT 1
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 6
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 6
66045: PUSH
66046: LD_INT 1
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66067: LD_ADDR_VAR 0 31
66071: PUSH
66072: LD_INT 3
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: LD_INT 3
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 2
66094: PUSH
66095: LD_INT 3
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 4
66104: PUSH
66105: LD_INT 3
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 4
66114: PUSH
66115: LD_INT 4
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: LD_INT 4
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 5
66134: PUSH
66135: LD_INT 4
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 5
66144: PUSH
66145: LD_INT 5
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 4
66154: PUSH
66155: LD_INT 5
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 6
66164: PUSH
66165: LD_INT 5
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 6
66174: PUSH
66175: LD_INT 6
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 5
66184: PUSH
66185: LD_INT 6
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66206: LD_ADDR_VAR 0 32
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: LD_INT 3
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 3
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: LD_INT 2
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: LD_INT 4
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 4
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: LD_INT 3
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: LD_INT 5
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: LD_INT 5
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: LD_INT 4
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: LD_INT 6
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: LD_INT 6
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 1
66326: NEG
66327: PUSH
66328: LD_INT 5
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66349: LD_ADDR_VAR 0 33
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 3
66367: NEG
66368: PUSH
66369: LD_INT 0
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: LD_INT 1
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 3
66390: NEG
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 4
66401: NEG
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 4
66412: NEG
66413: PUSH
66414: LD_INT 1
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 4
66424: NEG
66425: PUSH
66426: LD_INT 1
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 5
66435: NEG
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 5
66446: NEG
66447: PUSH
66448: LD_INT 1
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 5
66458: NEG
66459: PUSH
66460: LD_INT 1
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 6
66469: NEG
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 6
66480: NEG
66481: PUSH
66482: LD_INT 1
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66504: LD_ADDR_VAR 0 34
66508: PUSH
66509: LD_INT 2
66511: NEG
66512: PUSH
66513: LD_INT 3
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 3
66523: NEG
66524: PUSH
66525: LD_INT 2
66527: NEG
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 3
66535: NEG
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 3
66547: NEG
66548: PUSH
66549: LD_INT 4
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 4
66559: NEG
66560: PUSH
66561: LD_INT 3
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 4
66571: NEG
66572: PUSH
66573: LD_INT 4
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 4
66583: NEG
66584: PUSH
66585: LD_INT 5
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 5
66595: NEG
66596: PUSH
66597: LD_INT 4
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 5
66607: NEG
66608: PUSH
66609: LD_INT 5
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 5
66619: NEG
66620: PUSH
66621: LD_INT 6
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 6
66631: NEG
66632: PUSH
66633: LD_INT 5
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 6
66643: NEG
66644: PUSH
66645: LD_INT 6
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66667: LD_ADDR_VAR 0 41
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: LD_INT 2
66677: NEG
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: LD_INT 3
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: PUSH
66698: LD_INT 2
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: LIST
66710: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66711: LD_ADDR_VAR 0 42
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: LD_INT 1
66731: NEG
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 3
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66752: LD_ADDR_VAR 0 43
66756: PUSH
66757: LD_INT 2
66759: PUSH
66760: LD_INT 2
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: LD_INT 2
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 2
66779: PUSH
66780: LD_INT 3
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66792: LD_ADDR_VAR 0 44
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: PUSH
66810: LD_INT 3
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: NEG
66820: PUSH
66821: LD_INT 2
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66833: LD_ADDR_VAR 0 45
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 2
66851: NEG
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 3
66862: NEG
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: LIST
66876: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66877: LD_ADDR_VAR 0 46
66881: PUSH
66882: LD_INT 2
66884: NEG
66885: PUSH
66886: LD_INT 2
66888: NEG
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 2
66896: NEG
66897: PUSH
66898: LD_INT 3
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 3
66908: NEG
66909: PUSH
66910: LD_INT 2
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: LIST
66922: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66923: LD_ADDR_VAR 0 47
66927: PUSH
66928: LD_INT 2
66930: NEG
66931: PUSH
66932: LD_INT 3
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 1
66942: NEG
66943: PUSH
66944: LD_INT 3
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66956: LD_ADDR_VAR 0 48
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: LD_INT 2
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 2
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66987: LD_ADDR_VAR 0 49
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: LD_INT 2
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67016: LD_ADDR_VAR 0 50
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: LD_INT 3
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: LD_INT 3
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67045: LD_ADDR_VAR 0 51
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: LD_INT 2
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 2
67063: NEG
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67076: LD_ADDR_VAR 0 52
67080: PUSH
67081: LD_INT 3
67083: NEG
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 3
67095: NEG
67096: PUSH
67097: LD_INT 2
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67109: LD_ADDR_VAR 0 53
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: LD_INT 3
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: LD_INT 3
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 1
67139: PUSH
67140: LD_INT 2
67142: NEG
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: LIST
67152: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67153: LD_ADDR_VAR 0 54
67157: PUSH
67158: LD_INT 2
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 3
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 3
67181: PUSH
67182: LD_INT 1
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: LIST
67193: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67194: LD_ADDR_VAR 0 55
67198: PUSH
67199: LD_INT 3
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 3
67211: PUSH
67212: LD_INT 3
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 2
67221: PUSH
67222: LD_INT 3
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: LIST
67233: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67234: LD_ADDR_VAR 0 56
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: LD_INT 3
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: LD_INT 3
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: NEG
67262: PUSH
67263: LD_INT 2
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67275: LD_ADDR_VAR 0 57
67279: PUSH
67280: LD_INT 2
67282: NEG
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 3
67293: NEG
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 3
67304: NEG
67305: PUSH
67306: LD_INT 1
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: LIST
67318: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67319: LD_ADDR_VAR 0 58
67323: PUSH
67324: LD_INT 2
67326: NEG
67327: PUSH
67328: LD_INT 3
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 3
67338: NEG
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 3
67350: NEG
67351: PUSH
67352: LD_INT 3
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: LIST
67364: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67365: LD_ADDR_VAR 0 59
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: LD_INT 2
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 2
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: LD_INT 1
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67409: LD_ADDR_VAR 0 60
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 2
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 2
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: LIST
67449: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67450: LD_ADDR_VAR 0 61
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: LD_INT 2
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: PUSH
67478: LD_INT 2
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67490: LD_ADDR_VAR 0 62
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: LD_INT 2
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 2
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 1
67517: NEG
67518: PUSH
67519: LD_INT 1
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: LIST
67530: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67531: LD_ADDR_VAR 0 63
67535: PUSH
67536: LD_INT 1
67538: NEG
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 2
67549: NEG
67550: PUSH
67551: LD_INT 0
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 2
67560: NEG
67561: PUSH
67562: LD_INT 1
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: LIST
67574: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67575: LD_ADDR_VAR 0 64
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 2
67594: NEG
67595: PUSH
67596: LD_INT 1
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 2
67606: NEG
67607: PUSH
67608: LD_INT 2
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// end ; 2 :
67621: GO 70887
67623: LD_INT 2
67625: DOUBLE
67626: EQUAL
67627: IFTRUE 67631
67629: GO 70886
67631: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67632: LD_ADDR_VAR 0 29
67636: PUSH
67637: LD_INT 4
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 4
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 5
67660: PUSH
67661: LD_INT 0
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 5
67670: PUSH
67671: LD_INT 1
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 4
67680: PUSH
67681: LD_INT 1
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 3
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 3
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 3
67711: PUSH
67712: LD_INT 2
67714: NEG
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 5
67722: PUSH
67723: LD_INT 2
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 3
67732: PUSH
67733: LD_INT 3
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 3
67742: PUSH
67743: LD_INT 2
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 4
67752: PUSH
67753: LD_INT 3
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 4
67762: PUSH
67763: LD_INT 4
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 3
67772: PUSH
67773: LD_INT 4
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 2
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 2
67792: PUSH
67793: LD_INT 2
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 4
67802: PUSH
67803: LD_INT 2
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 2
67812: PUSH
67813: LD_INT 4
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 0
67822: PUSH
67823: LD_INT 4
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 0
67832: PUSH
67833: LD_INT 3
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 1
67842: PUSH
67843: LD_INT 4
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: LD_INT 5
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: LD_INT 5
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 1
67872: NEG
67873: PUSH
67874: LD_INT 4
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 1
67883: NEG
67884: PUSH
67885: LD_INT 3
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 2
67894: PUSH
67895: LD_INT 5
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: NEG
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 2
67938: NEG
67939: PUSH
67940: LD_INT 0
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 2
67949: NEG
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 3
67960: NEG
67961: PUSH
67962: LD_INT 1
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 4
67971: NEG
67972: PUSH
67973: LD_INT 0
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 4
67982: NEG
67983: PUSH
67984: LD_INT 1
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 4
67994: NEG
67995: PUSH
67996: LD_INT 2
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 2
68006: NEG
68007: PUSH
68008: LD_INT 2
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 4
68017: NEG
68018: PUSH
68019: LD_INT 4
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 4
68029: NEG
68030: PUSH
68031: LD_INT 5
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 3
68041: NEG
68042: PUSH
68043: LD_INT 4
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 3
68053: NEG
68054: PUSH
68055: LD_INT 3
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 4
68065: NEG
68066: PUSH
68067: LD_INT 3
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 5
68077: NEG
68078: PUSH
68079: LD_INT 4
68081: NEG
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 5
68089: NEG
68090: PUSH
68091: LD_INT 5
68093: NEG
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 3
68101: NEG
68102: PUSH
68103: LD_INT 5
68105: NEG
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 5
68113: NEG
68114: PUSH
68115: LD_INT 3
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68170: LD_ADDR_VAR 0 30
68174: PUSH
68175: LD_INT 4
68177: PUSH
68178: LD_INT 4
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 4
68187: PUSH
68188: LD_INT 3
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 5
68197: PUSH
68198: LD_INT 4
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 5
68207: PUSH
68208: LD_INT 5
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 4
68217: PUSH
68218: LD_INT 5
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 3
68227: PUSH
68228: LD_INT 4
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 3
68237: PUSH
68238: LD_INT 3
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 5
68247: PUSH
68248: LD_INT 3
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 3
68257: PUSH
68258: LD_INT 5
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: LD_INT 3
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: LD_INT 2
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: LD_INT 3
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: LD_INT 4
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 0
68307: PUSH
68308: LD_INT 4
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 1
68317: NEG
68318: PUSH
68319: LD_INT 3
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: LD_INT 4
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 2
68349: NEG
68350: PUSH
68351: LD_INT 2
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 4
68360: NEG
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 4
68371: NEG
68372: PUSH
68373: LD_INT 1
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 3
68383: NEG
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 3
68394: NEG
68395: PUSH
68396: LD_INT 1
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 4
68405: NEG
68406: PUSH
68407: LD_INT 1
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 5
68416: NEG
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 5
68427: NEG
68428: PUSH
68429: LD_INT 1
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 5
68439: NEG
68440: PUSH
68441: LD_INT 2
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 3
68451: NEG
68452: PUSH
68453: LD_INT 2
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 3
68462: NEG
68463: PUSH
68464: LD_INT 3
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 3
68474: NEG
68475: PUSH
68476: LD_INT 4
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 2
68486: NEG
68487: PUSH
68488: LD_INT 3
68490: NEG
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 2
68498: NEG
68499: PUSH
68500: LD_INT 2
68502: NEG
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 3
68510: NEG
68511: PUSH
68512: LD_INT 2
68514: NEG
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 4
68522: NEG
68523: PUSH
68524: LD_INT 3
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 4
68534: NEG
68535: PUSH
68536: LD_INT 4
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 2
68546: NEG
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 4
68558: NEG
68559: PUSH
68560: LD_INT 2
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 0
68570: PUSH
68571: LD_INT 4
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: LD_INT 5
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 1
68592: PUSH
68593: LD_INT 4
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: PUSH
68604: LD_INT 3
68606: NEG
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 0
68614: PUSH
68615: LD_INT 3
68617: NEG
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 1
68625: NEG
68626: PUSH
68627: LD_INT 4
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: LD_INT 5
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 2
68649: PUSH
68650: LD_INT 3
68652: NEG
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 2
68660: NEG
68661: PUSH
68662: LD_INT 5
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68717: LD_ADDR_VAR 0 31
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 4
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 0
68734: PUSH
68735: LD_INT 3
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 1
68744: PUSH
68745: LD_INT 4
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 1
68754: PUSH
68755: LD_INT 5
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: LD_INT 5
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 1
68774: NEG
68775: PUSH
68776: LD_INT 4
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 1
68785: NEG
68786: PUSH
68787: LD_INT 3
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: LD_INT 5
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 2
68806: NEG
68807: PUSH
68808: LD_INT 3
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 3
68817: NEG
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 3
68828: NEG
68829: PUSH
68830: LD_INT 1
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 2
68840: NEG
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 2
68851: NEG
68852: PUSH
68853: LD_INT 1
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 3
68862: NEG
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 4
68873: NEG
68874: PUSH
68875: LD_INT 0
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 4
68884: NEG
68885: PUSH
68886: LD_INT 1
68888: NEG
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 4
68896: NEG
68897: PUSH
68898: LD_INT 2
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 2
68908: NEG
68909: PUSH
68910: LD_INT 2
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 4
68919: NEG
68920: PUSH
68921: LD_INT 4
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 4
68931: NEG
68932: PUSH
68933: LD_INT 5
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 3
68943: NEG
68944: PUSH
68945: LD_INT 4
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 3
68955: NEG
68956: PUSH
68957: LD_INT 3
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 4
68967: NEG
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 5
68979: NEG
68980: PUSH
68981: LD_INT 4
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 5
68991: NEG
68992: PUSH
68993: LD_INT 5
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 3
69003: NEG
69004: PUSH
69005: LD_INT 5
69007: NEG
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 5
69015: NEG
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: LD_INT 4
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 1
69049: PUSH
69050: LD_INT 3
69052: NEG
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 1
69060: PUSH
69061: LD_INT 2
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: LD_INT 2
69074: NEG
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 1
69082: NEG
69083: PUSH
69084: LD_INT 3
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 1
69094: NEG
69095: PUSH
69096: LD_INT 4
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 2
69106: PUSH
69107: LD_INT 2
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 2
69117: NEG
69118: PUSH
69119: LD_INT 4
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 4
69129: PUSH
69130: LD_INT 0
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 4
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 5
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 5
69160: PUSH
69161: LD_INT 1
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 4
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 3
69180: PUSH
69181: LD_INT 0
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 3
69190: PUSH
69191: LD_INT 1
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 3
69201: PUSH
69202: LD_INT 2
69204: NEG
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 5
69212: PUSH
69213: LD_INT 2
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69267: LD_ADDR_VAR 0 32
69271: PUSH
69272: LD_INT 4
69274: NEG
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 4
69285: NEG
69286: PUSH
69287: LD_INT 1
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 3
69297: NEG
69298: PUSH
69299: LD_INT 0
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 3
69308: NEG
69309: PUSH
69310: LD_INT 1
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 4
69319: NEG
69320: PUSH
69321: LD_INT 1
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 5
69330: NEG
69331: PUSH
69332: LD_INT 0
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 5
69341: NEG
69342: PUSH
69343: LD_INT 1
69345: NEG
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 5
69353: NEG
69354: PUSH
69355: LD_INT 2
69357: NEG
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 3
69365: NEG
69366: PUSH
69367: LD_INT 2
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: LD_INT 3
69380: NEG
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 3
69388: NEG
69389: PUSH
69390: LD_INT 4
69392: NEG
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 2
69400: NEG
69401: PUSH
69402: LD_INT 3
69404: NEG
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 2
69412: NEG
69413: PUSH
69414: LD_INT 2
69416: NEG
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 3
69424: NEG
69425: PUSH
69426: LD_INT 2
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 4
69436: NEG
69437: PUSH
69438: LD_INT 3
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 4
69448: NEG
69449: PUSH
69450: LD_INT 4
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 2
69460: NEG
69461: PUSH
69462: LD_INT 4
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 4
69472: NEG
69473: PUSH
69474: LD_INT 2
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: LD_INT 4
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 0
69495: PUSH
69496: LD_INT 5
69498: NEG
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 1
69506: PUSH
69507: LD_INT 4
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 1
69517: PUSH
69518: LD_INT 3
69520: NEG
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 0
69528: PUSH
69529: LD_INT 3
69531: NEG
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 1
69539: NEG
69540: PUSH
69541: LD_INT 4
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 1
69551: NEG
69552: PUSH
69553: LD_INT 5
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 2
69563: PUSH
69564: LD_INT 3
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: LD_INT 5
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 3
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 3
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 4
69607: PUSH
69608: LD_INT 0
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 4
69617: PUSH
69618: LD_INT 1
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 3
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 2
69637: PUSH
69638: LD_INT 0
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 2
69647: PUSH
69648: LD_INT 1
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: LD_INT 2
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 4
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 4
69679: PUSH
69680: LD_INT 4
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 4
69689: PUSH
69690: LD_INT 3
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 5
69699: PUSH
69700: LD_INT 4
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 5
69709: PUSH
69710: LD_INT 5
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 4
69719: PUSH
69720: LD_INT 5
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 3
69729: PUSH
69730: LD_INT 4
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 3
69739: PUSH
69740: LD_INT 3
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 5
69749: PUSH
69750: LD_INT 3
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 3
69759: PUSH
69760: LD_INT 5
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69814: LD_ADDR_VAR 0 33
69818: PUSH
69819: LD_INT 4
69821: NEG
69822: PUSH
69823: LD_INT 4
69825: NEG
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 4
69833: NEG
69834: PUSH
69835: LD_INT 5
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 3
69845: NEG
69846: PUSH
69847: LD_INT 4
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 3
69857: NEG
69858: PUSH
69859: LD_INT 3
69861: NEG
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 4
69869: NEG
69870: PUSH
69871: LD_INT 3
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 5
69881: NEG
69882: PUSH
69883: LD_INT 4
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 5
69893: NEG
69894: PUSH
69895: LD_INT 5
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 3
69905: NEG
69906: PUSH
69907: LD_INT 5
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 5
69917: NEG
69918: PUSH
69919: LD_INT 3
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: LD_INT 3
69932: NEG
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 0
69940: PUSH
69941: LD_INT 4
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: LD_INT 3
69954: NEG
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 1
69962: PUSH
69963: LD_INT 2
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: LD_INT 2
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: PUSH
69986: LD_INT 3
69988: NEG
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 1
69996: NEG
69997: PUSH
69998: LD_INT 4
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 2
70008: PUSH
70009: LD_INT 2
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 2
70019: NEG
70020: PUSH
70021: LD_INT 4
70023: NEG
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 4
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 4
70041: PUSH
70042: LD_INT 1
70044: NEG
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 5
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 5
70062: PUSH
70063: LD_INT 1
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 4
70072: PUSH
70073: LD_INT 1
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 3
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 3
70092: PUSH
70093: LD_INT 1
70095: NEG
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 3
70103: PUSH
70104: LD_INT 2
70106: NEG
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 5
70114: PUSH
70115: LD_INT 2
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 3
70124: PUSH
70125: LD_INT 3
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 3
70134: PUSH
70135: LD_INT 2
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 4
70144: PUSH
70145: LD_INT 3
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 4
70154: PUSH
70155: LD_INT 4
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 3
70164: PUSH
70165: LD_INT 4
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 2
70174: PUSH
70175: LD_INT 3
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 2
70184: PUSH
70185: LD_INT 2
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 4
70194: PUSH
70195: LD_INT 2
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 2
70204: PUSH
70205: LD_INT 4
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 0
70214: PUSH
70215: LD_INT 4
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 0
70224: PUSH
70225: LD_INT 3
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 1
70234: PUSH
70235: LD_INT 4
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 1
70244: PUSH
70245: LD_INT 5
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: LD_INT 5
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 1
70264: NEG
70265: PUSH
70266: LD_INT 4
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 1
70275: NEG
70276: PUSH
70277: LD_INT 3
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 2
70286: PUSH
70287: LD_INT 5
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 2
70296: NEG
70297: PUSH
70298: LD_INT 3
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70352: LD_ADDR_VAR 0 34
70356: PUSH
70357: LD_INT 0
70359: PUSH
70360: LD_INT 4
70362: NEG
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 0
70370: PUSH
70371: LD_INT 5
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 1
70381: PUSH
70382: LD_INT 4
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: LD_INT 3
70395: NEG
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: LD_INT 3
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 1
70414: NEG
70415: PUSH
70416: LD_INT 4
70418: NEG
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 1
70426: NEG
70427: PUSH
70428: LD_INT 5
70430: NEG
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: LD_INT 3
70441: NEG
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 2
70449: NEG
70450: PUSH
70451: LD_INT 5
70453: NEG
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 3
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 3
70471: PUSH
70472: LD_INT 1
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 4
70482: PUSH
70483: LD_INT 0
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 4
70492: PUSH
70493: LD_INT 1
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 3
70502: PUSH
70503: LD_INT 1
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 2
70512: PUSH
70513: LD_INT 0
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 2
70522: PUSH
70523: LD_INT 1
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 2
70533: PUSH
70534: LD_INT 2
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 4
70544: PUSH
70545: LD_INT 2
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 4
70554: PUSH
70555: LD_INT 4
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 4
70564: PUSH
70565: LD_INT 3
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 5
70574: PUSH
70575: LD_INT 4
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 5
70584: PUSH
70585: LD_INT 5
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 4
70594: PUSH
70595: LD_INT 5
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 3
70604: PUSH
70605: LD_INT 4
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 3
70614: PUSH
70615: LD_INT 3
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 5
70624: PUSH
70625: LD_INT 3
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 3
70634: PUSH
70635: LD_INT 5
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 0
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: LD_INT 2
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 1
70664: PUSH
70665: LD_INT 3
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 1
70674: PUSH
70675: LD_INT 4
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 0
70684: PUSH
70685: LD_INT 4
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 1
70694: NEG
70695: PUSH
70696: LD_INT 3
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 1
70705: NEG
70706: PUSH
70707: LD_INT 2
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 2
70716: PUSH
70717: LD_INT 4
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 2
70726: NEG
70727: PUSH
70728: LD_INT 2
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 4
70737: NEG
70738: PUSH
70739: LD_INT 0
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 4
70748: NEG
70749: PUSH
70750: LD_INT 1
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 3
70760: NEG
70761: PUSH
70762: LD_INT 0
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 3
70771: NEG
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 4
70782: NEG
70783: PUSH
70784: LD_INT 1
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 5
70793: NEG
70794: PUSH
70795: LD_INT 0
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 5
70804: NEG
70805: PUSH
70806: LD_INT 1
70808: NEG
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 5
70816: NEG
70817: PUSH
70818: LD_INT 2
70820: NEG
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 3
70828: NEG
70829: PUSH
70830: LD_INT 2
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: ST_TO_ADDR
// end ; end ;
70884: GO 70887
70886: POP
// case btype of b_depot , b_warehouse :
70887: LD_VAR 0 1
70891: PUSH
70892: LD_INT 0
70894: DOUBLE
70895: EQUAL
70896: IFTRUE 70906
70898: LD_INT 1
70900: DOUBLE
70901: EQUAL
70902: IFTRUE 70906
70904: GO 71107
70906: POP
// case nation of nation_american :
70907: LD_VAR 0 5
70911: PUSH
70912: LD_INT 1
70914: DOUBLE
70915: EQUAL
70916: IFTRUE 70920
70918: GO 70976
70920: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70921: LD_ADDR_VAR 0 9
70925: PUSH
70926: LD_VAR 0 11
70930: PUSH
70931: LD_VAR 0 12
70935: PUSH
70936: LD_VAR 0 13
70940: PUSH
70941: LD_VAR 0 14
70945: PUSH
70946: LD_VAR 0 15
70950: PUSH
70951: LD_VAR 0 16
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: PUSH
70964: LD_VAR 0 4
70968: PUSH
70969: LD_INT 1
70971: PLUS
70972: ARRAY
70973: ST_TO_ADDR
70974: GO 71105
70976: LD_INT 2
70978: DOUBLE
70979: EQUAL
70980: IFTRUE 70984
70982: GO 71040
70984: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70985: LD_ADDR_VAR 0 9
70989: PUSH
70990: LD_VAR 0 17
70994: PUSH
70995: LD_VAR 0 18
70999: PUSH
71000: LD_VAR 0 19
71004: PUSH
71005: LD_VAR 0 20
71009: PUSH
71010: LD_VAR 0 21
71014: PUSH
71015: LD_VAR 0 22
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: PUSH
71028: LD_VAR 0 4
71032: PUSH
71033: LD_INT 1
71035: PLUS
71036: ARRAY
71037: ST_TO_ADDR
71038: GO 71105
71040: LD_INT 3
71042: DOUBLE
71043: EQUAL
71044: IFTRUE 71048
71046: GO 71104
71048: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71049: LD_ADDR_VAR 0 9
71053: PUSH
71054: LD_VAR 0 23
71058: PUSH
71059: LD_VAR 0 24
71063: PUSH
71064: LD_VAR 0 25
71068: PUSH
71069: LD_VAR 0 26
71073: PUSH
71074: LD_VAR 0 27
71078: PUSH
71079: LD_VAR 0 28
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: PUSH
71092: LD_VAR 0 4
71096: PUSH
71097: LD_INT 1
71099: PLUS
71100: ARRAY
71101: ST_TO_ADDR
71102: GO 71105
71104: POP
71105: GO 71660
71107: LD_INT 2
71109: DOUBLE
71110: EQUAL
71111: IFTRUE 71121
71113: LD_INT 3
71115: DOUBLE
71116: EQUAL
71117: IFTRUE 71121
71119: GO 71177
71121: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71122: LD_ADDR_VAR 0 9
71126: PUSH
71127: LD_VAR 0 29
71131: PUSH
71132: LD_VAR 0 30
71136: PUSH
71137: LD_VAR 0 31
71141: PUSH
71142: LD_VAR 0 32
71146: PUSH
71147: LD_VAR 0 33
71151: PUSH
71152: LD_VAR 0 34
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: PUSH
71165: LD_VAR 0 4
71169: PUSH
71170: LD_INT 1
71172: PLUS
71173: ARRAY
71174: ST_TO_ADDR
71175: GO 71660
71177: LD_INT 16
71179: DOUBLE
71180: EQUAL
71181: IFTRUE 71239
71183: LD_INT 17
71185: DOUBLE
71186: EQUAL
71187: IFTRUE 71239
71189: LD_INT 18
71191: DOUBLE
71192: EQUAL
71193: IFTRUE 71239
71195: LD_INT 19
71197: DOUBLE
71198: EQUAL
71199: IFTRUE 71239
71201: LD_INT 22
71203: DOUBLE
71204: EQUAL
71205: IFTRUE 71239
71207: LD_INT 20
71209: DOUBLE
71210: EQUAL
71211: IFTRUE 71239
71213: LD_INT 21
71215: DOUBLE
71216: EQUAL
71217: IFTRUE 71239
71219: LD_INT 23
71221: DOUBLE
71222: EQUAL
71223: IFTRUE 71239
71225: LD_INT 24
71227: DOUBLE
71228: EQUAL
71229: IFTRUE 71239
71231: LD_INT 25
71233: DOUBLE
71234: EQUAL
71235: IFTRUE 71239
71237: GO 71295
71239: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71240: LD_ADDR_VAR 0 9
71244: PUSH
71245: LD_VAR 0 35
71249: PUSH
71250: LD_VAR 0 36
71254: PUSH
71255: LD_VAR 0 37
71259: PUSH
71260: LD_VAR 0 38
71264: PUSH
71265: LD_VAR 0 39
71269: PUSH
71270: LD_VAR 0 40
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: PUSH
71283: LD_VAR 0 4
71287: PUSH
71288: LD_INT 1
71290: PLUS
71291: ARRAY
71292: ST_TO_ADDR
71293: GO 71660
71295: LD_INT 6
71297: DOUBLE
71298: EQUAL
71299: IFTRUE 71351
71301: LD_INT 7
71303: DOUBLE
71304: EQUAL
71305: IFTRUE 71351
71307: LD_INT 8
71309: DOUBLE
71310: EQUAL
71311: IFTRUE 71351
71313: LD_INT 13
71315: DOUBLE
71316: EQUAL
71317: IFTRUE 71351
71319: LD_INT 12
71321: DOUBLE
71322: EQUAL
71323: IFTRUE 71351
71325: LD_INT 15
71327: DOUBLE
71328: EQUAL
71329: IFTRUE 71351
71331: LD_INT 11
71333: DOUBLE
71334: EQUAL
71335: IFTRUE 71351
71337: LD_INT 14
71339: DOUBLE
71340: EQUAL
71341: IFTRUE 71351
71343: LD_INT 10
71345: DOUBLE
71346: EQUAL
71347: IFTRUE 71351
71349: GO 71407
71351: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71352: LD_ADDR_VAR 0 9
71356: PUSH
71357: LD_VAR 0 41
71361: PUSH
71362: LD_VAR 0 42
71366: PUSH
71367: LD_VAR 0 43
71371: PUSH
71372: LD_VAR 0 44
71376: PUSH
71377: LD_VAR 0 45
71381: PUSH
71382: LD_VAR 0 46
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: PUSH
71395: LD_VAR 0 4
71399: PUSH
71400: LD_INT 1
71402: PLUS
71403: ARRAY
71404: ST_TO_ADDR
71405: GO 71660
71407: LD_INT 36
71409: DOUBLE
71410: EQUAL
71411: IFTRUE 71415
71413: GO 71471
71415: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71416: LD_ADDR_VAR 0 9
71420: PUSH
71421: LD_VAR 0 47
71425: PUSH
71426: LD_VAR 0 48
71430: PUSH
71431: LD_VAR 0 49
71435: PUSH
71436: LD_VAR 0 50
71440: PUSH
71441: LD_VAR 0 51
71445: PUSH
71446: LD_VAR 0 52
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: PUSH
71459: LD_VAR 0 4
71463: PUSH
71464: LD_INT 1
71466: PLUS
71467: ARRAY
71468: ST_TO_ADDR
71469: GO 71660
71471: LD_INT 4
71473: DOUBLE
71474: EQUAL
71475: IFTRUE 71497
71477: LD_INT 5
71479: DOUBLE
71480: EQUAL
71481: IFTRUE 71497
71483: LD_INT 34
71485: DOUBLE
71486: EQUAL
71487: IFTRUE 71497
71489: LD_INT 37
71491: DOUBLE
71492: EQUAL
71493: IFTRUE 71497
71495: GO 71553
71497: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71498: LD_ADDR_VAR 0 9
71502: PUSH
71503: LD_VAR 0 53
71507: PUSH
71508: LD_VAR 0 54
71512: PUSH
71513: LD_VAR 0 55
71517: PUSH
71518: LD_VAR 0 56
71522: PUSH
71523: LD_VAR 0 57
71527: PUSH
71528: LD_VAR 0 58
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: PUSH
71541: LD_VAR 0 4
71545: PUSH
71546: LD_INT 1
71548: PLUS
71549: ARRAY
71550: ST_TO_ADDR
71551: GO 71660
71553: LD_INT 31
71555: DOUBLE
71556: EQUAL
71557: IFTRUE 71603
71559: LD_INT 32
71561: DOUBLE
71562: EQUAL
71563: IFTRUE 71603
71565: LD_INT 33
71567: DOUBLE
71568: EQUAL
71569: IFTRUE 71603
71571: LD_INT 27
71573: DOUBLE
71574: EQUAL
71575: IFTRUE 71603
71577: LD_INT 26
71579: DOUBLE
71580: EQUAL
71581: IFTRUE 71603
71583: LD_INT 28
71585: DOUBLE
71586: EQUAL
71587: IFTRUE 71603
71589: LD_INT 29
71591: DOUBLE
71592: EQUAL
71593: IFTRUE 71603
71595: LD_INT 30
71597: DOUBLE
71598: EQUAL
71599: IFTRUE 71603
71601: GO 71659
71603: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71604: LD_ADDR_VAR 0 9
71608: PUSH
71609: LD_VAR 0 59
71613: PUSH
71614: LD_VAR 0 60
71618: PUSH
71619: LD_VAR 0 61
71623: PUSH
71624: LD_VAR 0 62
71628: PUSH
71629: LD_VAR 0 63
71633: PUSH
71634: LD_VAR 0 64
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: PUSH
71647: LD_VAR 0 4
71651: PUSH
71652: LD_INT 1
71654: PLUS
71655: ARRAY
71656: ST_TO_ADDR
71657: GO 71660
71659: POP
// temp_list2 = [ ] ;
71660: LD_ADDR_VAR 0 10
71664: PUSH
71665: EMPTY
71666: ST_TO_ADDR
// for i in temp_list do
71667: LD_ADDR_VAR 0 8
71671: PUSH
71672: LD_VAR 0 9
71676: PUSH
71677: FOR_IN
71678: IFFALSE 71730
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71680: LD_ADDR_VAR 0 10
71684: PUSH
71685: LD_VAR 0 10
71689: PUSH
71690: LD_VAR 0 8
71694: PUSH
71695: LD_INT 1
71697: ARRAY
71698: PUSH
71699: LD_VAR 0 2
71703: PLUS
71704: PUSH
71705: LD_VAR 0 8
71709: PUSH
71710: LD_INT 2
71712: ARRAY
71713: PUSH
71714: LD_VAR 0 3
71718: PLUS
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: PUSH
71724: EMPTY
71725: LIST
71726: ADD
71727: ST_TO_ADDR
71728: GO 71677
71730: POP
71731: POP
// result = temp_list2 ;
71732: LD_ADDR_VAR 0 7
71736: PUSH
71737: LD_VAR 0 10
71741: ST_TO_ADDR
// end ;
71742: LD_VAR 0 7
71746: RET
// export function EnemyInRange ( unit , dist ) ; begin
71747: LD_INT 0
71749: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71750: LD_ADDR_VAR 0 3
71754: PUSH
71755: LD_VAR 0 1
71759: PPUSH
71760: CALL_OW 255
71764: PPUSH
71765: LD_VAR 0 1
71769: PPUSH
71770: CALL_OW 250
71774: PPUSH
71775: LD_VAR 0 1
71779: PPUSH
71780: CALL_OW 251
71784: PPUSH
71785: LD_VAR 0 2
71789: PPUSH
71790: CALL 45149 0 4
71794: PUSH
71795: LD_INT 4
71797: ARRAY
71798: ST_TO_ADDR
// end ;
71799: LD_VAR 0 3
71803: RET
// export function PlayerSeeMe ( unit ) ; begin
71804: LD_INT 0
71806: PPUSH
// result := See ( your_side , unit ) ;
71807: LD_ADDR_VAR 0 2
71811: PUSH
71812: LD_OWVAR 2
71816: PPUSH
71817: LD_VAR 0 1
71821: PPUSH
71822: CALL_OW 292
71826: ST_TO_ADDR
// end ;
71827: LD_VAR 0 2
71831: RET
// export function ReverseDir ( unit ) ; begin
71832: LD_INT 0
71834: PPUSH
// if not unit then
71835: LD_VAR 0 1
71839: NOT
71840: IFFALSE 71844
// exit ;
71842: GO 71867
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71844: LD_ADDR_VAR 0 2
71848: PUSH
71849: LD_VAR 0 1
71853: PPUSH
71854: CALL_OW 254
71858: PUSH
71859: LD_INT 3
71861: PLUS
71862: PUSH
71863: LD_INT 6
71865: MOD
71866: ST_TO_ADDR
// end ;
71867: LD_VAR 0 2
71871: RET
// export function ReverseArray ( array ) ; var i ; begin
71872: LD_INT 0
71874: PPUSH
71875: PPUSH
// if not array then
71876: LD_VAR 0 1
71880: NOT
71881: IFFALSE 71885
// exit ;
71883: GO 71940
// result := [ ] ;
71885: LD_ADDR_VAR 0 2
71889: PUSH
71890: EMPTY
71891: ST_TO_ADDR
// for i := array downto 1 do
71892: LD_ADDR_VAR 0 3
71896: PUSH
71897: DOUBLE
71898: LD_VAR 0 1
71902: INC
71903: ST_TO_ADDR
71904: LD_INT 1
71906: PUSH
71907: FOR_DOWNTO
71908: IFFALSE 71938
// result := Join ( result , array [ i ] ) ;
71910: LD_ADDR_VAR 0 2
71914: PUSH
71915: LD_VAR 0 2
71919: PPUSH
71920: LD_VAR 0 1
71924: PUSH
71925: LD_VAR 0 3
71929: ARRAY
71930: PPUSH
71931: CALL 76565 0 2
71935: ST_TO_ADDR
71936: GO 71907
71938: POP
71939: POP
// end ;
71940: LD_VAR 0 2
71944: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71945: LD_INT 0
71947: PPUSH
71948: PPUSH
71949: PPUSH
71950: PPUSH
71951: PPUSH
71952: PPUSH
// if not unit or not hexes then
71953: LD_VAR 0 1
71957: NOT
71958: PUSH
71959: LD_VAR 0 2
71963: NOT
71964: OR
71965: IFFALSE 71969
// exit ;
71967: GO 72092
// dist := 9999 ;
71969: LD_ADDR_VAR 0 5
71973: PUSH
71974: LD_INT 9999
71976: ST_TO_ADDR
// for i = 1 to hexes do
71977: LD_ADDR_VAR 0 4
71981: PUSH
71982: DOUBLE
71983: LD_INT 1
71985: DEC
71986: ST_TO_ADDR
71987: LD_VAR 0 2
71991: PUSH
71992: FOR_TO
71993: IFFALSE 72080
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71995: LD_ADDR_VAR 0 6
71999: PUSH
72000: LD_VAR 0 1
72004: PPUSH
72005: LD_VAR 0 2
72009: PUSH
72010: LD_VAR 0 4
72014: ARRAY
72015: PUSH
72016: LD_INT 1
72018: ARRAY
72019: PPUSH
72020: LD_VAR 0 2
72024: PUSH
72025: LD_VAR 0 4
72029: ARRAY
72030: PUSH
72031: LD_INT 2
72033: ARRAY
72034: PPUSH
72035: CALL_OW 297
72039: ST_TO_ADDR
// if tdist < dist then
72040: LD_VAR 0 6
72044: PUSH
72045: LD_VAR 0 5
72049: LESS
72050: IFFALSE 72078
// begin hex := hexes [ i ] ;
72052: LD_ADDR_VAR 0 8
72056: PUSH
72057: LD_VAR 0 2
72061: PUSH
72062: LD_VAR 0 4
72066: ARRAY
72067: ST_TO_ADDR
// dist := tdist ;
72068: LD_ADDR_VAR 0 5
72072: PUSH
72073: LD_VAR 0 6
72077: ST_TO_ADDR
// end ; end ;
72078: GO 71992
72080: POP
72081: POP
// result := hex ;
72082: LD_ADDR_VAR 0 3
72086: PUSH
72087: LD_VAR 0 8
72091: ST_TO_ADDR
// end ;
72092: LD_VAR 0 3
72096: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72097: LD_INT 0
72099: PPUSH
72100: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72101: LD_VAR 0 1
72105: NOT
72106: PUSH
72107: LD_VAR 0 1
72111: PUSH
72112: LD_INT 21
72114: PUSH
72115: LD_INT 2
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 23
72124: PUSH
72125: LD_INT 2
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PPUSH
72136: CALL_OW 69
72140: IN
72141: NOT
72142: OR
72143: IFFALSE 72147
// exit ;
72145: GO 72194
// for i = 1 to 3 do
72147: LD_ADDR_VAR 0 3
72151: PUSH
72152: DOUBLE
72153: LD_INT 1
72155: DEC
72156: ST_TO_ADDR
72157: LD_INT 3
72159: PUSH
72160: FOR_TO
72161: IFFALSE 72192
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72163: LD_VAR 0 1
72167: PPUSH
72168: CALL_OW 250
72172: PPUSH
72173: LD_VAR 0 1
72177: PPUSH
72178: CALL_OW 251
72182: PPUSH
72183: LD_INT 1
72185: PPUSH
72186: CALL_OW 453
72190: GO 72160
72192: POP
72193: POP
// end ;
72194: LD_VAR 0 2
72198: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72199: LD_INT 0
72201: PPUSH
72202: PPUSH
72203: PPUSH
72204: PPUSH
72205: PPUSH
72206: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72207: LD_VAR 0 1
72211: NOT
72212: PUSH
72213: LD_VAR 0 2
72217: NOT
72218: OR
72219: PUSH
72220: LD_VAR 0 1
72224: PPUSH
72225: CALL_OW 314
72229: OR
72230: IFFALSE 72234
// exit ;
72232: GO 72675
// x := GetX ( enemy_unit ) ;
72234: LD_ADDR_VAR 0 7
72238: PUSH
72239: LD_VAR 0 2
72243: PPUSH
72244: CALL_OW 250
72248: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72249: LD_ADDR_VAR 0 8
72253: PUSH
72254: LD_VAR 0 2
72258: PPUSH
72259: CALL_OW 251
72263: ST_TO_ADDR
// if not x or not y then
72264: LD_VAR 0 7
72268: NOT
72269: PUSH
72270: LD_VAR 0 8
72274: NOT
72275: OR
72276: IFFALSE 72280
// exit ;
72278: GO 72675
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72280: LD_ADDR_VAR 0 6
72284: PUSH
72285: LD_VAR 0 7
72289: PPUSH
72290: LD_INT 0
72292: PPUSH
72293: LD_INT 4
72295: PPUSH
72296: CALL_OW 272
72300: PUSH
72301: LD_VAR 0 8
72305: PPUSH
72306: LD_INT 0
72308: PPUSH
72309: LD_INT 4
72311: PPUSH
72312: CALL_OW 273
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_VAR 0 7
72325: PPUSH
72326: LD_INT 1
72328: PPUSH
72329: LD_INT 4
72331: PPUSH
72332: CALL_OW 272
72336: PUSH
72337: LD_VAR 0 8
72341: PPUSH
72342: LD_INT 1
72344: PPUSH
72345: LD_INT 4
72347: PPUSH
72348: CALL_OW 273
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_VAR 0 7
72361: PPUSH
72362: LD_INT 2
72364: PPUSH
72365: LD_INT 4
72367: PPUSH
72368: CALL_OW 272
72372: PUSH
72373: LD_VAR 0 8
72377: PPUSH
72378: LD_INT 2
72380: PPUSH
72381: LD_INT 4
72383: PPUSH
72384: CALL_OW 273
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: LD_VAR 0 7
72397: PPUSH
72398: LD_INT 3
72400: PPUSH
72401: LD_INT 4
72403: PPUSH
72404: CALL_OW 272
72408: PUSH
72409: LD_VAR 0 8
72413: PPUSH
72414: LD_INT 3
72416: PPUSH
72417: LD_INT 4
72419: PPUSH
72420: CALL_OW 273
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_VAR 0 7
72433: PPUSH
72434: LD_INT 4
72436: PPUSH
72437: LD_INT 4
72439: PPUSH
72440: CALL_OW 272
72444: PUSH
72445: LD_VAR 0 8
72449: PPUSH
72450: LD_INT 4
72452: PPUSH
72453: LD_INT 4
72455: PPUSH
72456: CALL_OW 273
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_VAR 0 7
72469: PPUSH
72470: LD_INT 5
72472: PPUSH
72473: LD_INT 4
72475: PPUSH
72476: CALL_OW 272
72480: PUSH
72481: LD_VAR 0 8
72485: PPUSH
72486: LD_INT 5
72488: PPUSH
72489: LD_INT 4
72491: PPUSH
72492: CALL_OW 273
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: ST_TO_ADDR
// for i = tmp downto 1 do
72509: LD_ADDR_VAR 0 4
72513: PUSH
72514: DOUBLE
72515: LD_VAR 0 6
72519: INC
72520: ST_TO_ADDR
72521: LD_INT 1
72523: PUSH
72524: FOR_DOWNTO
72525: IFFALSE 72626
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72527: LD_VAR 0 6
72531: PUSH
72532: LD_VAR 0 4
72536: ARRAY
72537: PUSH
72538: LD_INT 1
72540: ARRAY
72541: PPUSH
72542: LD_VAR 0 6
72546: PUSH
72547: LD_VAR 0 4
72551: ARRAY
72552: PUSH
72553: LD_INT 2
72555: ARRAY
72556: PPUSH
72557: CALL_OW 488
72561: NOT
72562: PUSH
72563: LD_VAR 0 6
72567: PUSH
72568: LD_VAR 0 4
72572: ARRAY
72573: PUSH
72574: LD_INT 1
72576: ARRAY
72577: PPUSH
72578: LD_VAR 0 6
72582: PUSH
72583: LD_VAR 0 4
72587: ARRAY
72588: PUSH
72589: LD_INT 2
72591: ARRAY
72592: PPUSH
72593: CALL_OW 428
72597: PUSH
72598: LD_INT 0
72600: NONEQUAL
72601: OR
72602: IFFALSE 72624
// tmp := Delete ( tmp , i ) ;
72604: LD_ADDR_VAR 0 6
72608: PUSH
72609: LD_VAR 0 6
72613: PPUSH
72614: LD_VAR 0 4
72618: PPUSH
72619: CALL_OW 3
72623: ST_TO_ADDR
72624: GO 72524
72626: POP
72627: POP
// j := GetClosestHex ( unit , tmp ) ;
72628: LD_ADDR_VAR 0 5
72632: PUSH
72633: LD_VAR 0 1
72637: PPUSH
72638: LD_VAR 0 6
72642: PPUSH
72643: CALL 71945 0 2
72647: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72648: LD_VAR 0 1
72652: PPUSH
72653: LD_VAR 0 5
72657: PUSH
72658: LD_INT 1
72660: ARRAY
72661: PPUSH
72662: LD_VAR 0 5
72666: PUSH
72667: LD_INT 2
72669: ARRAY
72670: PPUSH
72671: CALL_OW 111
// end ;
72675: LD_VAR 0 3
72679: RET
// export function PrepareApemanSoldier ( ) ; begin
72680: LD_INT 0
72682: PPUSH
// uc_nation := 0 ;
72683: LD_ADDR_OWVAR 21
72687: PUSH
72688: LD_INT 0
72690: ST_TO_ADDR
// hc_sex := sex_male ;
72691: LD_ADDR_OWVAR 27
72695: PUSH
72696: LD_INT 1
72698: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72699: LD_ADDR_OWVAR 28
72703: PUSH
72704: LD_INT 15
72706: ST_TO_ADDR
// hc_gallery :=  ;
72707: LD_ADDR_OWVAR 33
72711: PUSH
72712: LD_STRING 
72714: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72715: LD_ADDR_OWVAR 31
72719: PUSH
72720: LD_INT 0
72722: PPUSH
72723: LD_INT 3
72725: PPUSH
72726: CALL_OW 12
72730: PUSH
72731: LD_INT 0
72733: PPUSH
72734: LD_INT 3
72736: PPUSH
72737: CALL_OW 12
72741: PUSH
72742: LD_INT 0
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: ST_TO_ADDR
// end ;
72754: LD_VAR 0 1
72758: RET
// export function PrepareApemanEngineer ( ) ; begin
72759: LD_INT 0
72761: PPUSH
// uc_nation := 0 ;
72762: LD_ADDR_OWVAR 21
72766: PUSH
72767: LD_INT 0
72769: ST_TO_ADDR
// hc_sex := sex_male ;
72770: LD_ADDR_OWVAR 27
72774: PUSH
72775: LD_INT 1
72777: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72778: LD_ADDR_OWVAR 28
72782: PUSH
72783: LD_INT 16
72785: ST_TO_ADDR
// hc_gallery :=  ;
72786: LD_ADDR_OWVAR 33
72790: PUSH
72791: LD_STRING 
72793: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72794: LD_ADDR_OWVAR 31
72798: PUSH
72799: LD_INT 0
72801: PPUSH
72802: LD_INT 3
72804: PPUSH
72805: CALL_OW 12
72809: PUSH
72810: LD_INT 0
72812: PPUSH
72813: LD_INT 3
72815: PPUSH
72816: CALL_OW 12
72820: PUSH
72821: LD_INT 0
72823: PUSH
72824: LD_INT 0
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: ST_TO_ADDR
// end ;
72833: LD_VAR 0 1
72837: RET
// export function PrepareApeman ( agressivity ) ; begin
72838: LD_INT 0
72840: PPUSH
// uc_side := 0 ;
72841: LD_ADDR_OWVAR 20
72845: PUSH
72846: LD_INT 0
72848: ST_TO_ADDR
// uc_nation := 0 ;
72849: LD_ADDR_OWVAR 21
72853: PUSH
72854: LD_INT 0
72856: ST_TO_ADDR
// hc_sex := sex_male ;
72857: LD_ADDR_OWVAR 27
72861: PUSH
72862: LD_INT 1
72864: ST_TO_ADDR
// hc_class := class_apeman ;
72865: LD_ADDR_OWVAR 28
72869: PUSH
72870: LD_INT 12
72872: ST_TO_ADDR
// hc_gallery :=  ;
72873: LD_ADDR_OWVAR 33
72877: PUSH
72878: LD_STRING 
72880: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72881: LD_ADDR_OWVAR 35
72885: PUSH
72886: LD_VAR 0 1
72890: NEG
72891: PPUSH
72892: LD_VAR 0 1
72896: PPUSH
72897: CALL_OW 12
72901: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72902: LD_ADDR_OWVAR 31
72906: PUSH
72907: LD_INT 0
72909: PPUSH
72910: LD_INT 3
72912: PPUSH
72913: CALL_OW 12
72917: PUSH
72918: LD_INT 0
72920: PPUSH
72921: LD_INT 3
72923: PPUSH
72924: CALL_OW 12
72928: PUSH
72929: LD_INT 0
72931: PUSH
72932: LD_INT 0
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: ST_TO_ADDR
// end ;
72941: LD_VAR 0 2
72945: RET
// export function PrepareTiger ( agressivity ) ; begin
72946: LD_INT 0
72948: PPUSH
// uc_side := 0 ;
72949: LD_ADDR_OWVAR 20
72953: PUSH
72954: LD_INT 0
72956: ST_TO_ADDR
// uc_nation := 0 ;
72957: LD_ADDR_OWVAR 21
72961: PUSH
72962: LD_INT 0
72964: ST_TO_ADDR
// hc_class := class_tiger ;
72965: LD_ADDR_OWVAR 28
72969: PUSH
72970: LD_INT 14
72972: ST_TO_ADDR
// hc_gallery :=  ;
72973: LD_ADDR_OWVAR 33
72977: PUSH
72978: LD_STRING 
72980: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72981: LD_ADDR_OWVAR 35
72985: PUSH
72986: LD_VAR 0 1
72990: NEG
72991: PPUSH
72992: LD_VAR 0 1
72996: PPUSH
72997: CALL_OW 12
73001: ST_TO_ADDR
// end ;
73002: LD_VAR 0 2
73006: RET
// export function PrepareEnchidna ( ) ; begin
73007: LD_INT 0
73009: PPUSH
// uc_side := 0 ;
73010: LD_ADDR_OWVAR 20
73014: PUSH
73015: LD_INT 0
73017: ST_TO_ADDR
// uc_nation := 0 ;
73018: LD_ADDR_OWVAR 21
73022: PUSH
73023: LD_INT 0
73025: ST_TO_ADDR
// hc_class := class_baggie ;
73026: LD_ADDR_OWVAR 28
73030: PUSH
73031: LD_INT 13
73033: ST_TO_ADDR
// hc_gallery :=  ;
73034: LD_ADDR_OWVAR 33
73038: PUSH
73039: LD_STRING 
73041: ST_TO_ADDR
// end ;
73042: LD_VAR 0 1
73046: RET
// export function PrepareFrog ( ) ; begin
73047: LD_INT 0
73049: PPUSH
// uc_side := 0 ;
73050: LD_ADDR_OWVAR 20
73054: PUSH
73055: LD_INT 0
73057: ST_TO_ADDR
// uc_nation := 0 ;
73058: LD_ADDR_OWVAR 21
73062: PUSH
73063: LD_INT 0
73065: ST_TO_ADDR
// hc_class := class_frog ;
73066: LD_ADDR_OWVAR 28
73070: PUSH
73071: LD_INT 19
73073: ST_TO_ADDR
// hc_gallery :=  ;
73074: LD_ADDR_OWVAR 33
73078: PUSH
73079: LD_STRING 
73081: ST_TO_ADDR
// end ;
73082: LD_VAR 0 1
73086: RET
// export function PrepareFish ( ) ; begin
73087: LD_INT 0
73089: PPUSH
// uc_side := 0 ;
73090: LD_ADDR_OWVAR 20
73094: PUSH
73095: LD_INT 0
73097: ST_TO_ADDR
// uc_nation := 0 ;
73098: LD_ADDR_OWVAR 21
73102: PUSH
73103: LD_INT 0
73105: ST_TO_ADDR
// hc_class := class_fish ;
73106: LD_ADDR_OWVAR 28
73110: PUSH
73111: LD_INT 20
73113: ST_TO_ADDR
// hc_gallery :=  ;
73114: LD_ADDR_OWVAR 33
73118: PUSH
73119: LD_STRING 
73121: ST_TO_ADDR
// end ;
73122: LD_VAR 0 1
73126: RET
// export function PrepareBird ( ) ; begin
73127: LD_INT 0
73129: PPUSH
// uc_side := 0 ;
73130: LD_ADDR_OWVAR 20
73134: PUSH
73135: LD_INT 0
73137: ST_TO_ADDR
// uc_nation := 0 ;
73138: LD_ADDR_OWVAR 21
73142: PUSH
73143: LD_INT 0
73145: ST_TO_ADDR
// hc_class := class_phororhacos ;
73146: LD_ADDR_OWVAR 28
73150: PUSH
73151: LD_INT 18
73153: ST_TO_ADDR
// hc_gallery :=  ;
73154: LD_ADDR_OWVAR 33
73158: PUSH
73159: LD_STRING 
73161: ST_TO_ADDR
// end ;
73162: LD_VAR 0 1
73166: RET
// export function PrepareHorse ( ) ; begin
73167: LD_INT 0
73169: PPUSH
// uc_side := 0 ;
73170: LD_ADDR_OWVAR 20
73174: PUSH
73175: LD_INT 0
73177: ST_TO_ADDR
// uc_nation := 0 ;
73178: LD_ADDR_OWVAR 21
73182: PUSH
73183: LD_INT 0
73185: ST_TO_ADDR
// hc_class := class_horse ;
73186: LD_ADDR_OWVAR 28
73190: PUSH
73191: LD_INT 21
73193: ST_TO_ADDR
// hc_gallery :=  ;
73194: LD_ADDR_OWVAR 33
73198: PUSH
73199: LD_STRING 
73201: ST_TO_ADDR
// end ;
73202: LD_VAR 0 1
73206: RET
// export function PrepareMastodont ( ) ; begin
73207: LD_INT 0
73209: PPUSH
// uc_side := 0 ;
73210: LD_ADDR_OWVAR 20
73214: PUSH
73215: LD_INT 0
73217: ST_TO_ADDR
// uc_nation := 0 ;
73218: LD_ADDR_OWVAR 21
73222: PUSH
73223: LD_INT 0
73225: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73226: LD_ADDR_OWVAR 37
73230: PUSH
73231: LD_INT 31
73233: ST_TO_ADDR
// vc_control := control_rider ;
73234: LD_ADDR_OWVAR 38
73238: PUSH
73239: LD_INT 4
73241: ST_TO_ADDR
// end ;
73242: LD_VAR 0 1
73246: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73247: LD_INT 0
73249: PPUSH
73250: PPUSH
73251: PPUSH
// uc_side = 0 ;
73252: LD_ADDR_OWVAR 20
73256: PUSH
73257: LD_INT 0
73259: ST_TO_ADDR
// uc_nation = 0 ;
73260: LD_ADDR_OWVAR 21
73264: PUSH
73265: LD_INT 0
73267: ST_TO_ADDR
// InitHc_All ( ) ;
73268: CALL_OW 584
// InitVc ;
73272: CALL_OW 20
// if mastodonts then
73276: LD_VAR 0 6
73280: IFFALSE 73347
// for i = 1 to mastodonts do
73282: LD_ADDR_VAR 0 11
73286: PUSH
73287: DOUBLE
73288: LD_INT 1
73290: DEC
73291: ST_TO_ADDR
73292: LD_VAR 0 6
73296: PUSH
73297: FOR_TO
73298: IFFALSE 73345
// begin vc_chassis := 31 ;
73300: LD_ADDR_OWVAR 37
73304: PUSH
73305: LD_INT 31
73307: ST_TO_ADDR
// vc_control := control_rider ;
73308: LD_ADDR_OWVAR 38
73312: PUSH
73313: LD_INT 4
73315: ST_TO_ADDR
// animal := CreateVehicle ;
73316: LD_ADDR_VAR 0 12
73320: PUSH
73321: CALL_OW 45
73325: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73326: LD_VAR 0 12
73330: PPUSH
73331: LD_VAR 0 8
73335: PPUSH
73336: LD_INT 0
73338: PPUSH
73339: CALL 75482 0 3
// end ;
73343: GO 73297
73345: POP
73346: POP
// if horses then
73347: LD_VAR 0 5
73351: IFFALSE 73418
// for i = 1 to horses do
73353: LD_ADDR_VAR 0 11
73357: PUSH
73358: DOUBLE
73359: LD_INT 1
73361: DEC
73362: ST_TO_ADDR
73363: LD_VAR 0 5
73367: PUSH
73368: FOR_TO
73369: IFFALSE 73416
// begin hc_class := 21 ;
73371: LD_ADDR_OWVAR 28
73375: PUSH
73376: LD_INT 21
73378: ST_TO_ADDR
// hc_gallery :=  ;
73379: LD_ADDR_OWVAR 33
73383: PUSH
73384: LD_STRING 
73386: ST_TO_ADDR
// animal := CreateHuman ;
73387: LD_ADDR_VAR 0 12
73391: PUSH
73392: CALL_OW 44
73396: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73397: LD_VAR 0 12
73401: PPUSH
73402: LD_VAR 0 8
73406: PPUSH
73407: LD_INT 0
73409: PPUSH
73410: CALL 75482 0 3
// end ;
73414: GO 73368
73416: POP
73417: POP
// if birds then
73418: LD_VAR 0 1
73422: IFFALSE 73489
// for i = 1 to birds do
73424: LD_ADDR_VAR 0 11
73428: PUSH
73429: DOUBLE
73430: LD_INT 1
73432: DEC
73433: ST_TO_ADDR
73434: LD_VAR 0 1
73438: PUSH
73439: FOR_TO
73440: IFFALSE 73487
// begin hc_class = 18 ;
73442: LD_ADDR_OWVAR 28
73446: PUSH
73447: LD_INT 18
73449: ST_TO_ADDR
// hc_gallery =  ;
73450: LD_ADDR_OWVAR 33
73454: PUSH
73455: LD_STRING 
73457: ST_TO_ADDR
// animal := CreateHuman ;
73458: LD_ADDR_VAR 0 12
73462: PUSH
73463: CALL_OW 44
73467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73468: LD_VAR 0 12
73472: PPUSH
73473: LD_VAR 0 8
73477: PPUSH
73478: LD_INT 0
73480: PPUSH
73481: CALL 75482 0 3
// end ;
73485: GO 73439
73487: POP
73488: POP
// if tigers then
73489: LD_VAR 0 2
73493: IFFALSE 73577
// for i = 1 to tigers do
73495: LD_ADDR_VAR 0 11
73499: PUSH
73500: DOUBLE
73501: LD_INT 1
73503: DEC
73504: ST_TO_ADDR
73505: LD_VAR 0 2
73509: PUSH
73510: FOR_TO
73511: IFFALSE 73575
// begin hc_class = class_tiger ;
73513: LD_ADDR_OWVAR 28
73517: PUSH
73518: LD_INT 14
73520: ST_TO_ADDR
// hc_gallery =  ;
73521: LD_ADDR_OWVAR 33
73525: PUSH
73526: LD_STRING 
73528: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73529: LD_ADDR_OWVAR 35
73533: PUSH
73534: LD_INT 7
73536: NEG
73537: PPUSH
73538: LD_INT 7
73540: PPUSH
73541: CALL_OW 12
73545: ST_TO_ADDR
// animal := CreateHuman ;
73546: LD_ADDR_VAR 0 12
73550: PUSH
73551: CALL_OW 44
73555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73556: LD_VAR 0 12
73560: PPUSH
73561: LD_VAR 0 8
73565: PPUSH
73566: LD_INT 0
73568: PPUSH
73569: CALL 75482 0 3
// end ;
73573: GO 73510
73575: POP
73576: POP
// if apemans then
73577: LD_VAR 0 3
73581: IFFALSE 73704
// for i = 1 to apemans do
73583: LD_ADDR_VAR 0 11
73587: PUSH
73588: DOUBLE
73589: LD_INT 1
73591: DEC
73592: ST_TO_ADDR
73593: LD_VAR 0 3
73597: PUSH
73598: FOR_TO
73599: IFFALSE 73702
// begin hc_class = class_apeman ;
73601: LD_ADDR_OWVAR 28
73605: PUSH
73606: LD_INT 12
73608: ST_TO_ADDR
// hc_gallery =  ;
73609: LD_ADDR_OWVAR 33
73613: PUSH
73614: LD_STRING 
73616: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73617: LD_ADDR_OWVAR 35
73621: PUSH
73622: LD_INT 2
73624: NEG
73625: PPUSH
73626: LD_INT 2
73628: PPUSH
73629: CALL_OW 12
73633: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73634: LD_ADDR_OWVAR 31
73638: PUSH
73639: LD_INT 1
73641: PPUSH
73642: LD_INT 3
73644: PPUSH
73645: CALL_OW 12
73649: PUSH
73650: LD_INT 1
73652: PPUSH
73653: LD_INT 3
73655: PPUSH
73656: CALL_OW 12
73660: PUSH
73661: LD_INT 0
73663: PUSH
73664: LD_INT 0
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: ST_TO_ADDR
// animal := CreateHuman ;
73673: LD_ADDR_VAR 0 12
73677: PUSH
73678: CALL_OW 44
73682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73683: LD_VAR 0 12
73687: PPUSH
73688: LD_VAR 0 8
73692: PPUSH
73693: LD_INT 0
73695: PPUSH
73696: CALL 75482 0 3
// end ;
73700: GO 73598
73702: POP
73703: POP
// if enchidnas then
73704: LD_VAR 0 4
73708: IFFALSE 73775
// for i = 1 to enchidnas do
73710: LD_ADDR_VAR 0 11
73714: PUSH
73715: DOUBLE
73716: LD_INT 1
73718: DEC
73719: ST_TO_ADDR
73720: LD_VAR 0 4
73724: PUSH
73725: FOR_TO
73726: IFFALSE 73773
// begin hc_class = 13 ;
73728: LD_ADDR_OWVAR 28
73732: PUSH
73733: LD_INT 13
73735: ST_TO_ADDR
// hc_gallery =  ;
73736: LD_ADDR_OWVAR 33
73740: PUSH
73741: LD_STRING 
73743: ST_TO_ADDR
// animal := CreateHuman ;
73744: LD_ADDR_VAR 0 12
73748: PUSH
73749: CALL_OW 44
73753: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73754: LD_VAR 0 12
73758: PPUSH
73759: LD_VAR 0 8
73763: PPUSH
73764: LD_INT 0
73766: PPUSH
73767: CALL 75482 0 3
// end ;
73771: GO 73725
73773: POP
73774: POP
// if fishes then
73775: LD_VAR 0 7
73779: IFFALSE 73846
// for i = 1 to fishes do
73781: LD_ADDR_VAR 0 11
73785: PUSH
73786: DOUBLE
73787: LD_INT 1
73789: DEC
73790: ST_TO_ADDR
73791: LD_VAR 0 7
73795: PUSH
73796: FOR_TO
73797: IFFALSE 73844
// begin hc_class = 20 ;
73799: LD_ADDR_OWVAR 28
73803: PUSH
73804: LD_INT 20
73806: ST_TO_ADDR
// hc_gallery =  ;
73807: LD_ADDR_OWVAR 33
73811: PUSH
73812: LD_STRING 
73814: ST_TO_ADDR
// animal := CreateHuman ;
73815: LD_ADDR_VAR 0 12
73819: PUSH
73820: CALL_OW 44
73824: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73825: LD_VAR 0 12
73829: PPUSH
73830: LD_VAR 0 9
73834: PPUSH
73835: LD_INT 0
73837: PPUSH
73838: CALL 75482 0 3
// end ;
73842: GO 73796
73844: POP
73845: POP
// end ;
73846: LD_VAR 0 10
73850: RET
// export function WantHeal ( sci , unit ) ; begin
73851: LD_INT 0
73853: PPUSH
// if GetTaskList ( sci ) > 0 then
73854: LD_VAR 0 1
73858: PPUSH
73859: CALL_OW 437
73863: PUSH
73864: LD_INT 0
73866: GREATER
73867: IFFALSE 73937
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73869: LD_VAR 0 1
73873: PPUSH
73874: CALL_OW 437
73878: PUSH
73879: LD_INT 1
73881: ARRAY
73882: PUSH
73883: LD_INT 1
73885: ARRAY
73886: PUSH
73887: LD_STRING l
73889: EQUAL
73890: PUSH
73891: LD_VAR 0 1
73895: PPUSH
73896: CALL_OW 437
73900: PUSH
73901: LD_INT 1
73903: ARRAY
73904: PUSH
73905: LD_INT 4
73907: ARRAY
73908: PUSH
73909: LD_VAR 0 2
73913: EQUAL
73914: AND
73915: IFFALSE 73927
// result := true else
73917: LD_ADDR_VAR 0 3
73921: PUSH
73922: LD_INT 1
73924: ST_TO_ADDR
73925: GO 73935
// result := false ;
73927: LD_ADDR_VAR 0 3
73931: PUSH
73932: LD_INT 0
73934: ST_TO_ADDR
// end else
73935: GO 73945
// result := false ;
73937: LD_ADDR_VAR 0 3
73941: PUSH
73942: LD_INT 0
73944: ST_TO_ADDR
// end ;
73945: LD_VAR 0 3
73949: RET
// export function HealTarget ( sci ) ; begin
73950: LD_INT 0
73952: PPUSH
// if not sci then
73953: LD_VAR 0 1
73957: NOT
73958: IFFALSE 73962
// exit ;
73960: GO 74027
// result := 0 ;
73962: LD_ADDR_VAR 0 2
73966: PUSH
73967: LD_INT 0
73969: ST_TO_ADDR
// if GetTaskList ( sci ) then
73970: LD_VAR 0 1
73974: PPUSH
73975: CALL_OW 437
73979: IFFALSE 74027
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73981: LD_VAR 0 1
73985: PPUSH
73986: CALL_OW 437
73990: PUSH
73991: LD_INT 1
73993: ARRAY
73994: PUSH
73995: LD_INT 1
73997: ARRAY
73998: PUSH
73999: LD_STRING l
74001: EQUAL
74002: IFFALSE 74027
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74004: LD_ADDR_VAR 0 2
74008: PUSH
74009: LD_VAR 0 1
74013: PPUSH
74014: CALL_OW 437
74018: PUSH
74019: LD_INT 1
74021: ARRAY
74022: PUSH
74023: LD_INT 4
74025: ARRAY
74026: ST_TO_ADDR
// end ;
74027: LD_VAR 0 2
74031: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74032: LD_INT 0
74034: PPUSH
74035: PPUSH
74036: PPUSH
74037: PPUSH
// if not base_units then
74038: LD_VAR 0 1
74042: NOT
74043: IFFALSE 74047
// exit ;
74045: GO 74134
// result := false ;
74047: LD_ADDR_VAR 0 2
74051: PUSH
74052: LD_INT 0
74054: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74055: LD_ADDR_VAR 0 5
74059: PUSH
74060: LD_VAR 0 1
74064: PPUSH
74065: LD_INT 21
74067: PUSH
74068: LD_INT 3
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PPUSH
74075: CALL_OW 72
74079: ST_TO_ADDR
// if not tmp then
74080: LD_VAR 0 5
74084: NOT
74085: IFFALSE 74089
// exit ;
74087: GO 74134
// for i in tmp do
74089: LD_ADDR_VAR 0 3
74093: PUSH
74094: LD_VAR 0 5
74098: PUSH
74099: FOR_IN
74100: IFFALSE 74132
// begin result := EnemyInRange ( i , 22 ) ;
74102: LD_ADDR_VAR 0 2
74106: PUSH
74107: LD_VAR 0 3
74111: PPUSH
74112: LD_INT 22
74114: PPUSH
74115: CALL 71747 0 2
74119: ST_TO_ADDR
// if result then
74120: LD_VAR 0 2
74124: IFFALSE 74130
// exit ;
74126: POP
74127: POP
74128: GO 74134
// end ;
74130: GO 74099
74132: POP
74133: POP
// end ;
74134: LD_VAR 0 2
74138: RET
// export function FilterByTag ( units , tag ) ; begin
74139: LD_INT 0
74141: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74142: LD_ADDR_VAR 0 3
74146: PUSH
74147: LD_VAR 0 1
74151: PPUSH
74152: LD_INT 120
74154: PUSH
74155: LD_VAR 0 2
74159: PUSH
74160: EMPTY
74161: LIST
74162: LIST
74163: PPUSH
74164: CALL_OW 72
74168: ST_TO_ADDR
// end ;
74169: LD_VAR 0 3
74173: RET
// export function IsDriver ( un ) ; begin
74174: LD_INT 0
74176: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74177: LD_ADDR_VAR 0 2
74181: PUSH
74182: LD_VAR 0 1
74186: PUSH
74187: LD_INT 55
74189: PUSH
74190: EMPTY
74191: LIST
74192: PPUSH
74193: CALL_OW 69
74197: IN
74198: ST_TO_ADDR
// end ;
74199: LD_VAR 0 2
74203: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74204: LD_INT 0
74206: PPUSH
74207: PPUSH
// list := [ ] ;
74208: LD_ADDR_VAR 0 5
74212: PUSH
74213: EMPTY
74214: ST_TO_ADDR
// case d of 0 :
74215: LD_VAR 0 3
74219: PUSH
74220: LD_INT 0
74222: DOUBLE
74223: EQUAL
74224: IFTRUE 74228
74226: GO 74361
74228: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74229: LD_ADDR_VAR 0 5
74233: PUSH
74234: LD_VAR 0 1
74238: PUSH
74239: LD_INT 4
74241: MINUS
74242: PUSH
74243: LD_VAR 0 2
74247: PUSH
74248: LD_INT 4
74250: MINUS
74251: PUSH
74252: LD_INT 2
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: LIST
74259: PUSH
74260: LD_VAR 0 1
74264: PUSH
74265: LD_INT 3
74267: MINUS
74268: PUSH
74269: LD_VAR 0 2
74273: PUSH
74274: LD_INT 1
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: LIST
74281: PUSH
74282: LD_VAR 0 1
74286: PUSH
74287: LD_INT 4
74289: PLUS
74290: PUSH
74291: LD_VAR 0 2
74295: PUSH
74296: LD_INT 4
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: LIST
74303: PUSH
74304: LD_VAR 0 1
74308: PUSH
74309: LD_INT 3
74311: PLUS
74312: PUSH
74313: LD_VAR 0 2
74317: PUSH
74318: LD_INT 3
74320: PLUS
74321: PUSH
74322: LD_INT 5
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: LIST
74329: PUSH
74330: LD_VAR 0 1
74334: PUSH
74335: LD_VAR 0 2
74339: PUSH
74340: LD_INT 4
74342: PLUS
74343: PUSH
74344: LD_INT 0
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: LIST
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: ST_TO_ADDR
// end ; 1 :
74359: GO 75059
74361: LD_INT 1
74363: DOUBLE
74364: EQUAL
74365: IFTRUE 74369
74367: GO 74502
74369: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74370: LD_ADDR_VAR 0 5
74374: PUSH
74375: LD_VAR 0 1
74379: PUSH
74380: LD_VAR 0 2
74384: PUSH
74385: LD_INT 4
74387: MINUS
74388: PUSH
74389: LD_INT 3
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: LIST
74396: PUSH
74397: LD_VAR 0 1
74401: PUSH
74402: LD_INT 3
74404: MINUS
74405: PUSH
74406: LD_VAR 0 2
74410: PUSH
74411: LD_INT 3
74413: MINUS
74414: PUSH
74415: LD_INT 2
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: LIST
74422: PUSH
74423: LD_VAR 0 1
74427: PUSH
74428: LD_INT 4
74430: MINUS
74431: PUSH
74432: LD_VAR 0 2
74436: PUSH
74437: LD_INT 1
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: LIST
74444: PUSH
74445: LD_VAR 0 1
74449: PUSH
74450: LD_VAR 0 2
74454: PUSH
74455: LD_INT 3
74457: PLUS
74458: PUSH
74459: LD_INT 0
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: LIST
74466: PUSH
74467: LD_VAR 0 1
74471: PUSH
74472: LD_INT 4
74474: PLUS
74475: PUSH
74476: LD_VAR 0 2
74480: PUSH
74481: LD_INT 4
74483: PLUS
74484: PUSH
74485: LD_INT 5
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: LIST
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: ST_TO_ADDR
// end ; 2 :
74500: GO 75059
74502: LD_INT 2
74504: DOUBLE
74505: EQUAL
74506: IFTRUE 74510
74508: GO 74639
74510: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74511: LD_ADDR_VAR 0 5
74515: PUSH
74516: LD_VAR 0 1
74520: PUSH
74521: LD_VAR 0 2
74525: PUSH
74526: LD_INT 3
74528: MINUS
74529: PUSH
74530: LD_INT 3
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: LIST
74537: PUSH
74538: LD_VAR 0 1
74542: PUSH
74543: LD_INT 4
74545: PLUS
74546: PUSH
74547: LD_VAR 0 2
74551: PUSH
74552: LD_INT 4
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: LIST
74559: PUSH
74560: LD_VAR 0 1
74564: PUSH
74565: LD_VAR 0 2
74569: PUSH
74570: LD_INT 4
74572: PLUS
74573: PUSH
74574: LD_INT 0
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: LIST
74581: PUSH
74582: LD_VAR 0 1
74586: PUSH
74587: LD_INT 3
74589: MINUS
74590: PUSH
74591: LD_VAR 0 2
74595: PUSH
74596: LD_INT 1
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: LIST
74603: PUSH
74604: LD_VAR 0 1
74608: PUSH
74609: LD_INT 4
74611: MINUS
74612: PUSH
74613: LD_VAR 0 2
74617: PUSH
74618: LD_INT 4
74620: MINUS
74621: PUSH
74622: LD_INT 2
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: LIST
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: ST_TO_ADDR
// end ; 3 :
74637: GO 75059
74639: LD_INT 3
74641: DOUBLE
74642: EQUAL
74643: IFTRUE 74647
74645: GO 74780
74647: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74648: LD_ADDR_VAR 0 5
74652: PUSH
74653: LD_VAR 0 1
74657: PUSH
74658: LD_INT 3
74660: PLUS
74661: PUSH
74662: LD_VAR 0 2
74666: PUSH
74667: LD_INT 4
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: LIST
74674: PUSH
74675: LD_VAR 0 1
74679: PUSH
74680: LD_INT 4
74682: PLUS
74683: PUSH
74684: LD_VAR 0 2
74688: PUSH
74689: LD_INT 4
74691: PLUS
74692: PUSH
74693: LD_INT 5
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: LIST
74700: PUSH
74701: LD_VAR 0 1
74705: PUSH
74706: LD_INT 4
74708: MINUS
74709: PUSH
74710: LD_VAR 0 2
74714: PUSH
74715: LD_INT 1
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: LIST
74722: PUSH
74723: LD_VAR 0 1
74727: PUSH
74728: LD_VAR 0 2
74732: PUSH
74733: LD_INT 4
74735: MINUS
74736: PUSH
74737: LD_INT 3
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: LIST
74744: PUSH
74745: LD_VAR 0 1
74749: PUSH
74750: LD_INT 3
74752: MINUS
74753: PUSH
74754: LD_VAR 0 2
74758: PUSH
74759: LD_INT 3
74761: MINUS
74762: PUSH
74763: LD_INT 2
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: LIST
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: LIST
74775: LIST
74776: LIST
74777: ST_TO_ADDR
// end ; 4 :
74778: GO 75059
74780: LD_INT 4
74782: DOUBLE
74783: EQUAL
74784: IFTRUE 74788
74786: GO 74921
74788: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74789: LD_ADDR_VAR 0 5
74793: PUSH
74794: LD_VAR 0 1
74798: PUSH
74799: LD_VAR 0 2
74803: PUSH
74804: LD_INT 4
74806: PLUS
74807: PUSH
74808: LD_INT 0
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: LIST
74815: PUSH
74816: LD_VAR 0 1
74820: PUSH
74821: LD_INT 3
74823: PLUS
74824: PUSH
74825: LD_VAR 0 2
74829: PUSH
74830: LD_INT 3
74832: PLUS
74833: PUSH
74834: LD_INT 5
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: LIST
74841: PUSH
74842: LD_VAR 0 1
74846: PUSH
74847: LD_INT 4
74849: PLUS
74850: PUSH
74851: LD_VAR 0 2
74855: PUSH
74856: LD_INT 4
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: LIST
74863: PUSH
74864: LD_VAR 0 1
74868: PUSH
74869: LD_VAR 0 2
74873: PUSH
74874: LD_INT 3
74876: MINUS
74877: PUSH
74878: LD_INT 3
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: LIST
74885: PUSH
74886: LD_VAR 0 1
74890: PUSH
74891: LD_INT 4
74893: MINUS
74894: PUSH
74895: LD_VAR 0 2
74899: PUSH
74900: LD_INT 4
74902: MINUS
74903: PUSH
74904: LD_INT 2
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: LIST
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: ST_TO_ADDR
// end ; 5 :
74919: GO 75059
74921: LD_INT 5
74923: DOUBLE
74924: EQUAL
74925: IFTRUE 74929
74927: GO 75058
74929: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74930: LD_ADDR_VAR 0 5
74934: PUSH
74935: LD_VAR 0 1
74939: PUSH
74940: LD_INT 4
74942: MINUS
74943: PUSH
74944: LD_VAR 0 2
74948: PUSH
74949: LD_INT 1
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: LIST
74956: PUSH
74957: LD_VAR 0 1
74961: PUSH
74962: LD_VAR 0 2
74966: PUSH
74967: LD_INT 4
74969: MINUS
74970: PUSH
74971: LD_INT 3
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: LIST
74978: PUSH
74979: LD_VAR 0 1
74983: PUSH
74984: LD_INT 4
74986: PLUS
74987: PUSH
74988: LD_VAR 0 2
74992: PUSH
74993: LD_INT 4
74995: PLUS
74996: PUSH
74997: LD_INT 5
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: LIST
75004: PUSH
75005: LD_VAR 0 1
75009: PUSH
75010: LD_INT 3
75012: PLUS
75013: PUSH
75014: LD_VAR 0 2
75018: PUSH
75019: LD_INT 4
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: LIST
75026: PUSH
75027: LD_VAR 0 1
75031: PUSH
75032: LD_VAR 0 2
75036: PUSH
75037: LD_INT 3
75039: PLUS
75040: PUSH
75041: LD_INT 0
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: LIST
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: ST_TO_ADDR
// end ; end ;
75056: GO 75059
75058: POP
// result := list ;
75059: LD_ADDR_VAR 0 4
75063: PUSH
75064: LD_VAR 0 5
75068: ST_TO_ADDR
// end ;
75069: LD_VAR 0 4
75073: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75074: LD_INT 0
75076: PPUSH
75077: PPUSH
75078: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75079: LD_VAR 0 1
75083: NOT
75084: PUSH
75085: LD_VAR 0 2
75089: PUSH
75090: LD_INT 1
75092: PUSH
75093: LD_INT 2
75095: PUSH
75096: LD_INT 3
75098: PUSH
75099: LD_INT 4
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: LIST
75106: LIST
75107: IN
75108: NOT
75109: OR
75110: IFFALSE 75114
// exit ;
75112: GO 75206
// tmp := [ ] ;
75114: LD_ADDR_VAR 0 5
75118: PUSH
75119: EMPTY
75120: ST_TO_ADDR
// for i in units do
75121: LD_ADDR_VAR 0 4
75125: PUSH
75126: LD_VAR 0 1
75130: PUSH
75131: FOR_IN
75132: IFFALSE 75175
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75134: LD_ADDR_VAR 0 5
75138: PUSH
75139: LD_VAR 0 5
75143: PPUSH
75144: LD_VAR 0 5
75148: PUSH
75149: LD_INT 1
75151: PLUS
75152: PPUSH
75153: LD_VAR 0 4
75157: PPUSH
75158: LD_VAR 0 2
75162: PPUSH
75163: CALL_OW 259
75167: PPUSH
75168: CALL_OW 2
75172: ST_TO_ADDR
75173: GO 75131
75175: POP
75176: POP
// if not tmp then
75177: LD_VAR 0 5
75181: NOT
75182: IFFALSE 75186
// exit ;
75184: GO 75206
// result := SortListByListDesc ( units , tmp ) ;
75186: LD_ADDR_VAR 0 3
75190: PUSH
75191: LD_VAR 0 1
75195: PPUSH
75196: LD_VAR 0 5
75200: PPUSH
75201: CALL_OW 77
75205: ST_TO_ADDR
// end ;
75206: LD_VAR 0 3
75210: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75211: LD_INT 0
75213: PPUSH
75214: PPUSH
75215: PPUSH
// result := false ;
75216: LD_ADDR_VAR 0 3
75220: PUSH
75221: LD_INT 0
75223: ST_TO_ADDR
// x := GetX ( building ) ;
75224: LD_ADDR_VAR 0 4
75228: PUSH
75229: LD_VAR 0 2
75233: PPUSH
75234: CALL_OW 250
75238: ST_TO_ADDR
// y := GetY ( building ) ;
75239: LD_ADDR_VAR 0 5
75243: PUSH
75244: LD_VAR 0 2
75248: PPUSH
75249: CALL_OW 251
75253: ST_TO_ADDR
// if not building or not x or not y then
75254: LD_VAR 0 2
75258: NOT
75259: PUSH
75260: LD_VAR 0 4
75264: NOT
75265: OR
75266: PUSH
75267: LD_VAR 0 5
75271: NOT
75272: OR
75273: IFFALSE 75277
// exit ;
75275: GO 75369
// if GetTaskList ( unit ) then
75277: LD_VAR 0 1
75281: PPUSH
75282: CALL_OW 437
75286: IFFALSE 75369
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75288: LD_STRING e
75290: PUSH
75291: LD_VAR 0 1
75295: PPUSH
75296: CALL_OW 437
75300: PUSH
75301: LD_INT 1
75303: ARRAY
75304: PUSH
75305: LD_INT 1
75307: ARRAY
75308: EQUAL
75309: PUSH
75310: LD_VAR 0 4
75314: PUSH
75315: LD_VAR 0 1
75319: PPUSH
75320: CALL_OW 437
75324: PUSH
75325: LD_INT 1
75327: ARRAY
75328: PUSH
75329: LD_INT 2
75331: ARRAY
75332: EQUAL
75333: AND
75334: PUSH
75335: LD_VAR 0 5
75339: PUSH
75340: LD_VAR 0 1
75344: PPUSH
75345: CALL_OW 437
75349: PUSH
75350: LD_INT 1
75352: ARRAY
75353: PUSH
75354: LD_INT 3
75356: ARRAY
75357: EQUAL
75358: AND
75359: IFFALSE 75369
// result := true end ;
75361: LD_ADDR_VAR 0 3
75365: PUSH
75366: LD_INT 1
75368: ST_TO_ADDR
// end ;
75369: LD_VAR 0 3
75373: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75374: LD_INT 0
75376: PPUSH
// result := false ;
75377: LD_ADDR_VAR 0 4
75381: PUSH
75382: LD_INT 0
75384: ST_TO_ADDR
// if GetTaskList ( unit ) then
75385: LD_VAR 0 1
75389: PPUSH
75390: CALL_OW 437
75394: IFFALSE 75477
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75396: LD_STRING M
75398: PUSH
75399: LD_VAR 0 1
75403: PPUSH
75404: CALL_OW 437
75408: PUSH
75409: LD_INT 1
75411: ARRAY
75412: PUSH
75413: LD_INT 1
75415: ARRAY
75416: EQUAL
75417: PUSH
75418: LD_VAR 0 2
75422: PUSH
75423: LD_VAR 0 1
75427: PPUSH
75428: CALL_OW 437
75432: PUSH
75433: LD_INT 1
75435: ARRAY
75436: PUSH
75437: LD_INT 2
75439: ARRAY
75440: EQUAL
75441: AND
75442: PUSH
75443: LD_VAR 0 3
75447: PUSH
75448: LD_VAR 0 1
75452: PPUSH
75453: CALL_OW 437
75457: PUSH
75458: LD_INT 1
75460: ARRAY
75461: PUSH
75462: LD_INT 3
75464: ARRAY
75465: EQUAL
75466: AND
75467: IFFALSE 75477
// result := true ;
75469: LD_ADDR_VAR 0 4
75473: PUSH
75474: LD_INT 1
75476: ST_TO_ADDR
// end ; end ;
75477: LD_VAR 0 4
75481: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75482: LD_INT 0
75484: PPUSH
75485: PPUSH
75486: PPUSH
75487: PPUSH
// if not unit or not area then
75488: LD_VAR 0 1
75492: NOT
75493: PUSH
75494: LD_VAR 0 2
75498: NOT
75499: OR
75500: IFFALSE 75504
// exit ;
75502: GO 75668
// tmp := AreaToList ( area , i ) ;
75504: LD_ADDR_VAR 0 6
75508: PUSH
75509: LD_VAR 0 2
75513: PPUSH
75514: LD_VAR 0 5
75518: PPUSH
75519: CALL_OW 517
75523: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75524: LD_ADDR_VAR 0 5
75528: PUSH
75529: DOUBLE
75530: LD_INT 1
75532: DEC
75533: ST_TO_ADDR
75534: LD_VAR 0 6
75538: PUSH
75539: LD_INT 1
75541: ARRAY
75542: PUSH
75543: FOR_TO
75544: IFFALSE 75666
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75546: LD_ADDR_VAR 0 7
75550: PUSH
75551: LD_VAR 0 6
75555: PUSH
75556: LD_INT 1
75558: ARRAY
75559: PUSH
75560: LD_VAR 0 5
75564: ARRAY
75565: PUSH
75566: LD_VAR 0 6
75570: PUSH
75571: LD_INT 2
75573: ARRAY
75574: PUSH
75575: LD_VAR 0 5
75579: ARRAY
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75585: LD_VAR 0 7
75589: PUSH
75590: LD_INT 1
75592: ARRAY
75593: PPUSH
75594: LD_VAR 0 7
75598: PUSH
75599: LD_INT 2
75601: ARRAY
75602: PPUSH
75603: CALL_OW 428
75607: PUSH
75608: LD_INT 0
75610: EQUAL
75611: IFFALSE 75664
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75613: LD_VAR 0 1
75617: PPUSH
75618: LD_VAR 0 7
75622: PUSH
75623: LD_INT 1
75625: ARRAY
75626: PPUSH
75627: LD_VAR 0 7
75631: PUSH
75632: LD_INT 2
75634: ARRAY
75635: PPUSH
75636: LD_VAR 0 3
75640: PPUSH
75641: CALL_OW 48
// result := IsPlaced ( unit ) ;
75645: LD_ADDR_VAR 0 4
75649: PUSH
75650: LD_VAR 0 1
75654: PPUSH
75655: CALL_OW 305
75659: ST_TO_ADDR
// exit ;
75660: POP
75661: POP
75662: GO 75668
// end ; end ;
75664: GO 75543
75666: POP
75667: POP
// end ;
75668: LD_VAR 0 4
75672: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75673: LD_INT 0
75675: PPUSH
75676: PPUSH
75677: PPUSH
// if not side or side > 8 then
75678: LD_VAR 0 1
75682: NOT
75683: PUSH
75684: LD_VAR 0 1
75688: PUSH
75689: LD_INT 8
75691: GREATER
75692: OR
75693: IFFALSE 75697
// exit ;
75695: GO 75884
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75697: LD_ADDR_VAR 0 4
75701: PUSH
75702: LD_INT 22
75704: PUSH
75705: LD_VAR 0 1
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: LD_INT 21
75716: PUSH
75717: LD_INT 3
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PPUSH
75728: CALL_OW 69
75732: ST_TO_ADDR
// if not tmp then
75733: LD_VAR 0 4
75737: NOT
75738: IFFALSE 75742
// exit ;
75740: GO 75884
// enable_addtolog := true ;
75742: LD_ADDR_OWVAR 81
75746: PUSH
75747: LD_INT 1
75749: ST_TO_ADDR
// AddToLog ( [ ) ;
75750: LD_STRING [
75752: PPUSH
75753: CALL_OW 561
// for i in tmp do
75757: LD_ADDR_VAR 0 3
75761: PUSH
75762: LD_VAR 0 4
75766: PUSH
75767: FOR_IN
75768: IFFALSE 75875
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75770: LD_STRING [
75772: PUSH
75773: LD_VAR 0 3
75777: PPUSH
75778: CALL_OW 266
75782: STR
75783: PUSH
75784: LD_STRING , 
75786: STR
75787: PUSH
75788: LD_VAR 0 3
75792: PPUSH
75793: CALL_OW 250
75797: STR
75798: PUSH
75799: LD_STRING , 
75801: STR
75802: PUSH
75803: LD_VAR 0 3
75807: PPUSH
75808: CALL_OW 251
75812: STR
75813: PUSH
75814: LD_STRING , 
75816: STR
75817: PUSH
75818: LD_VAR 0 3
75822: PPUSH
75823: CALL_OW 254
75827: STR
75828: PUSH
75829: LD_STRING , 
75831: STR
75832: PUSH
75833: LD_VAR 0 3
75837: PPUSH
75838: LD_INT 1
75840: PPUSH
75841: CALL_OW 268
75845: STR
75846: PUSH
75847: LD_STRING , 
75849: STR
75850: PUSH
75851: LD_VAR 0 3
75855: PPUSH
75856: LD_INT 2
75858: PPUSH
75859: CALL_OW 268
75863: STR
75864: PUSH
75865: LD_STRING ],
75867: STR
75868: PPUSH
75869: CALL_OW 561
// end ;
75873: GO 75767
75875: POP
75876: POP
// AddToLog ( ]; ) ;
75877: LD_STRING ];
75879: PPUSH
75880: CALL_OW 561
// end ;
75884: LD_VAR 0 2
75888: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75889: LD_INT 0
75891: PPUSH
75892: PPUSH
75893: PPUSH
75894: PPUSH
75895: PPUSH
// if not area or not rate or not max then
75896: LD_VAR 0 1
75900: NOT
75901: PUSH
75902: LD_VAR 0 2
75906: NOT
75907: OR
75908: PUSH
75909: LD_VAR 0 4
75913: NOT
75914: OR
75915: IFFALSE 75919
// exit ;
75917: GO 76108
// while 1 do
75919: LD_INT 1
75921: IFFALSE 76108
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75923: LD_ADDR_VAR 0 9
75927: PUSH
75928: LD_VAR 0 1
75932: PPUSH
75933: LD_INT 1
75935: PPUSH
75936: CALL_OW 287
75940: PUSH
75941: LD_INT 10
75943: MUL
75944: ST_TO_ADDR
// r := rate / 10 ;
75945: LD_ADDR_VAR 0 7
75949: PUSH
75950: LD_VAR 0 2
75954: PUSH
75955: LD_INT 10
75957: DIVREAL
75958: ST_TO_ADDR
// time := 1 1$00 ;
75959: LD_ADDR_VAR 0 8
75963: PUSH
75964: LD_INT 2100
75966: ST_TO_ADDR
// if amount < min then
75967: LD_VAR 0 9
75971: PUSH
75972: LD_VAR 0 3
75976: LESS
75977: IFFALSE 75995
// r := r * 2 else
75979: LD_ADDR_VAR 0 7
75983: PUSH
75984: LD_VAR 0 7
75988: PUSH
75989: LD_INT 2
75991: MUL
75992: ST_TO_ADDR
75993: GO 76021
// if amount > max then
75995: LD_VAR 0 9
75999: PUSH
76000: LD_VAR 0 4
76004: GREATER
76005: IFFALSE 76021
// r := r / 2 ;
76007: LD_ADDR_VAR 0 7
76011: PUSH
76012: LD_VAR 0 7
76016: PUSH
76017: LD_INT 2
76019: DIVREAL
76020: ST_TO_ADDR
// time := time / r ;
76021: LD_ADDR_VAR 0 8
76025: PUSH
76026: LD_VAR 0 8
76030: PUSH
76031: LD_VAR 0 7
76035: DIVREAL
76036: ST_TO_ADDR
// if time < 0 then
76037: LD_VAR 0 8
76041: PUSH
76042: LD_INT 0
76044: LESS
76045: IFFALSE 76062
// time := time * - 1 ;
76047: LD_ADDR_VAR 0 8
76051: PUSH
76052: LD_VAR 0 8
76056: PUSH
76057: LD_INT 1
76059: NEG
76060: MUL
76061: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76062: LD_VAR 0 8
76066: PUSH
76067: LD_INT 35
76069: PPUSH
76070: LD_INT 875
76072: PPUSH
76073: CALL_OW 12
76077: PLUS
76078: PPUSH
76079: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76083: LD_INT 1
76085: PPUSH
76086: LD_INT 5
76088: PPUSH
76089: CALL_OW 12
76093: PPUSH
76094: LD_VAR 0 1
76098: PPUSH
76099: LD_INT 1
76101: PPUSH
76102: CALL_OW 55
// end ;
76106: GO 75919
// end ;
76108: LD_VAR 0 5
76112: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76113: LD_INT 0
76115: PPUSH
76116: PPUSH
76117: PPUSH
76118: PPUSH
76119: PPUSH
76120: PPUSH
76121: PPUSH
76122: PPUSH
// if not turrets or not factories then
76123: LD_VAR 0 1
76127: NOT
76128: PUSH
76129: LD_VAR 0 2
76133: NOT
76134: OR
76135: IFFALSE 76139
// exit ;
76137: GO 76446
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76139: LD_ADDR_VAR 0 10
76143: PUSH
76144: LD_INT 5
76146: PUSH
76147: LD_INT 6
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PUSH
76154: LD_INT 2
76156: PUSH
76157: LD_INT 4
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: PUSH
76164: LD_INT 3
76166: PUSH
76167: LD_INT 5
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: LIST
76178: PUSH
76179: LD_INT 24
76181: PUSH
76182: LD_INT 25
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: LD_INT 23
76191: PUSH
76192: LD_INT 27
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: LD_INT 42
76205: PUSH
76206: LD_INT 43
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: PUSH
76213: LD_INT 44
76215: PUSH
76216: LD_INT 46
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: PUSH
76223: LD_INT 45
76225: PUSH
76226: LD_INT 47
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: LIST
76237: PUSH
76238: EMPTY
76239: LIST
76240: LIST
76241: LIST
76242: ST_TO_ADDR
// result := [ ] ;
76243: LD_ADDR_VAR 0 3
76247: PUSH
76248: EMPTY
76249: ST_TO_ADDR
// for i in turrets do
76250: LD_ADDR_VAR 0 4
76254: PUSH
76255: LD_VAR 0 1
76259: PUSH
76260: FOR_IN
76261: IFFALSE 76444
// begin nat := GetNation ( i ) ;
76263: LD_ADDR_VAR 0 7
76267: PUSH
76268: LD_VAR 0 4
76272: PPUSH
76273: CALL_OW 248
76277: ST_TO_ADDR
// weapon := 0 ;
76278: LD_ADDR_VAR 0 8
76282: PUSH
76283: LD_INT 0
76285: ST_TO_ADDR
// if not nat then
76286: LD_VAR 0 7
76290: NOT
76291: IFFALSE 76295
// continue ;
76293: GO 76260
// for j in list [ nat ] do
76295: LD_ADDR_VAR 0 5
76299: PUSH
76300: LD_VAR 0 10
76304: PUSH
76305: LD_VAR 0 7
76309: ARRAY
76310: PUSH
76311: FOR_IN
76312: IFFALSE 76353
// if GetBWeapon ( i ) = j [ 1 ] then
76314: LD_VAR 0 4
76318: PPUSH
76319: CALL_OW 269
76323: PUSH
76324: LD_VAR 0 5
76328: PUSH
76329: LD_INT 1
76331: ARRAY
76332: EQUAL
76333: IFFALSE 76351
// begin weapon := j [ 2 ] ;
76335: LD_ADDR_VAR 0 8
76339: PUSH
76340: LD_VAR 0 5
76344: PUSH
76345: LD_INT 2
76347: ARRAY
76348: ST_TO_ADDR
// break ;
76349: GO 76353
// end ;
76351: GO 76311
76353: POP
76354: POP
// if not weapon then
76355: LD_VAR 0 8
76359: NOT
76360: IFFALSE 76364
// continue ;
76362: GO 76260
// for k in factories do
76364: LD_ADDR_VAR 0 6
76368: PUSH
76369: LD_VAR 0 2
76373: PUSH
76374: FOR_IN
76375: IFFALSE 76440
// begin weapons := AvailableWeaponList ( k ) ;
76377: LD_ADDR_VAR 0 9
76381: PUSH
76382: LD_VAR 0 6
76386: PPUSH
76387: CALL_OW 478
76391: ST_TO_ADDR
// if not weapons then
76392: LD_VAR 0 9
76396: NOT
76397: IFFALSE 76401
// continue ;
76399: GO 76374
// if weapon in weapons then
76401: LD_VAR 0 8
76405: PUSH
76406: LD_VAR 0 9
76410: IN
76411: IFFALSE 76438
// begin result := [ i , weapon ] ;
76413: LD_ADDR_VAR 0 3
76417: PUSH
76418: LD_VAR 0 4
76422: PUSH
76423: LD_VAR 0 8
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: ST_TO_ADDR
// exit ;
76432: POP
76433: POP
76434: POP
76435: POP
76436: GO 76446
// end ; end ;
76438: GO 76374
76440: POP
76441: POP
// end ;
76442: GO 76260
76444: POP
76445: POP
// end ;
76446: LD_VAR 0 3
76450: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76451: LD_INT 0
76453: PPUSH
// if not side or side > 8 then
76454: LD_VAR 0 3
76458: NOT
76459: PUSH
76460: LD_VAR 0 3
76464: PUSH
76465: LD_INT 8
76467: GREATER
76468: OR
76469: IFFALSE 76473
// exit ;
76471: GO 76532
// if not range then
76473: LD_VAR 0 4
76477: NOT
76478: IFFALSE 76489
// range := - 12 ;
76480: LD_ADDR_VAR 0 4
76484: PUSH
76485: LD_INT 12
76487: NEG
76488: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76489: LD_VAR 0 1
76493: PPUSH
76494: LD_VAR 0 2
76498: PPUSH
76499: LD_VAR 0 3
76503: PPUSH
76504: LD_VAR 0 4
76508: PPUSH
76509: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76513: LD_VAR 0 1
76517: PPUSH
76518: LD_VAR 0 2
76522: PPUSH
76523: LD_VAR 0 3
76527: PPUSH
76528: CALL_OW 331
// end ;
76532: LD_VAR 0 5
76536: RET
// export function Video ( mode ) ; begin
76537: LD_INT 0
76539: PPUSH
// ingame_video = mode ;
76540: LD_ADDR_OWVAR 52
76544: PUSH
76545: LD_VAR 0 1
76549: ST_TO_ADDR
// interface_hidden = mode ;
76550: LD_ADDR_OWVAR 54
76554: PUSH
76555: LD_VAR 0 1
76559: ST_TO_ADDR
// end ;
76560: LD_VAR 0 2
76564: RET
// export function Join ( array , element ) ; begin
76565: LD_INT 0
76567: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76568: LD_ADDR_VAR 0 3
76572: PUSH
76573: LD_VAR 0 1
76577: PPUSH
76578: LD_VAR 0 1
76582: PUSH
76583: LD_INT 1
76585: PLUS
76586: PPUSH
76587: LD_VAR 0 2
76591: PPUSH
76592: CALL_OW 1
76596: ST_TO_ADDR
// end ;
76597: LD_VAR 0 3
76601: RET
// export function JoinUnion ( array , element ) ; begin
76602: LD_INT 0
76604: PPUSH
// result := array union element ;
76605: LD_ADDR_VAR 0 3
76609: PUSH
76610: LD_VAR 0 1
76614: PUSH
76615: LD_VAR 0 2
76619: UNION
76620: ST_TO_ADDR
// end ;
76621: LD_VAR 0 3
76625: RET
// export function GetBehemoths ( side ) ; begin
76626: LD_INT 0
76628: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76629: LD_ADDR_VAR 0 2
76633: PUSH
76634: LD_INT 22
76636: PUSH
76637: LD_VAR 0 1
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 31
76648: PUSH
76649: LD_INT 25
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: PPUSH
76660: CALL_OW 69
76664: ST_TO_ADDR
// end ;
76665: LD_VAR 0 2
76669: RET
// export function Shuffle ( array ) ; var i , index ; begin
76670: LD_INT 0
76672: PPUSH
76673: PPUSH
76674: PPUSH
// result := [ ] ;
76675: LD_ADDR_VAR 0 2
76679: PUSH
76680: EMPTY
76681: ST_TO_ADDR
// if not array then
76682: LD_VAR 0 1
76686: NOT
76687: IFFALSE 76691
// exit ;
76689: GO 76790
// Randomize ;
76691: CALL_OW 10
// for i = array downto 1 do
76695: LD_ADDR_VAR 0 3
76699: PUSH
76700: DOUBLE
76701: LD_VAR 0 1
76705: INC
76706: ST_TO_ADDR
76707: LD_INT 1
76709: PUSH
76710: FOR_DOWNTO
76711: IFFALSE 76788
// begin index := rand ( 1 , array ) ;
76713: LD_ADDR_VAR 0 4
76717: PUSH
76718: LD_INT 1
76720: PPUSH
76721: LD_VAR 0 1
76725: PPUSH
76726: CALL_OW 12
76730: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76731: LD_ADDR_VAR 0 2
76735: PUSH
76736: LD_VAR 0 2
76740: PPUSH
76741: LD_VAR 0 2
76745: PUSH
76746: LD_INT 1
76748: PLUS
76749: PPUSH
76750: LD_VAR 0 1
76754: PUSH
76755: LD_VAR 0 4
76759: ARRAY
76760: PPUSH
76761: CALL_OW 2
76765: ST_TO_ADDR
// array := Delete ( array , index ) ;
76766: LD_ADDR_VAR 0 1
76770: PUSH
76771: LD_VAR 0 1
76775: PPUSH
76776: LD_VAR 0 4
76780: PPUSH
76781: CALL_OW 3
76785: ST_TO_ADDR
// end ;
76786: GO 76710
76788: POP
76789: POP
// end ;
76790: LD_VAR 0 2
76794: RET
// export function GetBaseMaterials ( base ) ; begin
76795: LD_INT 0
76797: PPUSH
// result := [ 0 , 0 , 0 ] ;
76798: LD_ADDR_VAR 0 2
76802: PUSH
76803: LD_INT 0
76805: PUSH
76806: LD_INT 0
76808: PUSH
76809: LD_INT 0
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: LIST
76816: ST_TO_ADDR
// if not base then
76817: LD_VAR 0 1
76821: NOT
76822: IFFALSE 76826
// exit ;
76824: GO 76875
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76826: LD_ADDR_VAR 0 2
76830: PUSH
76831: LD_VAR 0 1
76835: PPUSH
76836: LD_INT 1
76838: PPUSH
76839: CALL_OW 275
76843: PUSH
76844: LD_VAR 0 1
76848: PPUSH
76849: LD_INT 2
76851: PPUSH
76852: CALL_OW 275
76856: PUSH
76857: LD_VAR 0 1
76861: PPUSH
76862: LD_INT 3
76864: PPUSH
76865: CALL_OW 275
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: LIST
76874: ST_TO_ADDR
// end ;
76875: LD_VAR 0 2
76879: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76880: LD_INT 0
76882: PPUSH
76883: PPUSH
// result := array ;
76884: LD_ADDR_VAR 0 3
76888: PUSH
76889: LD_VAR 0 1
76893: ST_TO_ADDR
// if size >= result then
76894: LD_VAR 0 2
76898: PUSH
76899: LD_VAR 0 3
76903: GREATEREQUAL
76904: IFFALSE 76908
// exit ;
76906: GO 76958
// if size then
76908: LD_VAR 0 2
76912: IFFALSE 76958
// for i := array downto size do
76914: LD_ADDR_VAR 0 4
76918: PUSH
76919: DOUBLE
76920: LD_VAR 0 1
76924: INC
76925: ST_TO_ADDR
76926: LD_VAR 0 2
76930: PUSH
76931: FOR_DOWNTO
76932: IFFALSE 76956
// result := Delete ( result , result ) ;
76934: LD_ADDR_VAR 0 3
76938: PUSH
76939: LD_VAR 0 3
76943: PPUSH
76944: LD_VAR 0 3
76948: PPUSH
76949: CALL_OW 3
76953: ST_TO_ADDR
76954: GO 76931
76956: POP
76957: POP
// end ;
76958: LD_VAR 0 3
76962: RET
// export function ComExit ( unit ) ; var tmp ; begin
76963: LD_INT 0
76965: PPUSH
76966: PPUSH
// if not IsInUnit ( unit ) then
76967: LD_VAR 0 1
76971: PPUSH
76972: CALL_OW 310
76976: NOT
76977: IFFALSE 76981
// exit ;
76979: GO 77041
// tmp := IsInUnit ( unit ) ;
76981: LD_ADDR_VAR 0 3
76985: PUSH
76986: LD_VAR 0 1
76990: PPUSH
76991: CALL_OW 310
76995: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76996: LD_VAR 0 3
77000: PPUSH
77001: CALL_OW 247
77005: PUSH
77006: LD_INT 2
77008: EQUAL
77009: IFFALSE 77022
// ComExitVehicle ( unit ) else
77011: LD_VAR 0 1
77015: PPUSH
77016: CALL_OW 121
77020: GO 77031
// ComExitBuilding ( unit ) ;
77022: LD_VAR 0 1
77026: PPUSH
77027: CALL_OW 122
// result := tmp ;
77031: LD_ADDR_VAR 0 2
77035: PUSH
77036: LD_VAR 0 3
77040: ST_TO_ADDR
// end ;
77041: LD_VAR 0 2
77045: RET
// export function ComExitAll ( units ) ; var i ; begin
77046: LD_INT 0
77048: PPUSH
77049: PPUSH
// if not units then
77050: LD_VAR 0 1
77054: NOT
77055: IFFALSE 77059
// exit ;
77057: GO 77085
// for i in units do
77059: LD_ADDR_VAR 0 3
77063: PUSH
77064: LD_VAR 0 1
77068: PUSH
77069: FOR_IN
77070: IFFALSE 77083
// ComExit ( i ) ;
77072: LD_VAR 0 3
77076: PPUSH
77077: CALL 76963 0 1
77081: GO 77069
77083: POP
77084: POP
// end ;
77085: LD_VAR 0 2
77089: RET
// export function ResetHc ; begin
77090: LD_INT 0
77092: PPUSH
// InitHc ;
77093: CALL_OW 19
// hc_importance := 0 ;
77097: LD_ADDR_OWVAR 32
77101: PUSH
77102: LD_INT 0
77104: ST_TO_ADDR
// end ;
77105: LD_VAR 0 1
77109: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77110: LD_INT 0
77112: PPUSH
77113: PPUSH
77114: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77115: LD_ADDR_VAR 0 6
77119: PUSH
77120: LD_VAR 0 1
77124: PUSH
77125: LD_VAR 0 3
77129: PLUS
77130: PUSH
77131: LD_INT 2
77133: DIV
77134: ST_TO_ADDR
// if _x < 0 then
77135: LD_VAR 0 6
77139: PUSH
77140: LD_INT 0
77142: LESS
77143: IFFALSE 77160
// _x := _x * - 1 ;
77145: LD_ADDR_VAR 0 6
77149: PUSH
77150: LD_VAR 0 6
77154: PUSH
77155: LD_INT 1
77157: NEG
77158: MUL
77159: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77160: LD_ADDR_VAR 0 7
77164: PUSH
77165: LD_VAR 0 2
77169: PUSH
77170: LD_VAR 0 4
77174: PLUS
77175: PUSH
77176: LD_INT 2
77178: DIV
77179: ST_TO_ADDR
// if _y < 0 then
77180: LD_VAR 0 7
77184: PUSH
77185: LD_INT 0
77187: LESS
77188: IFFALSE 77205
// _y := _y * - 1 ;
77190: LD_ADDR_VAR 0 7
77194: PUSH
77195: LD_VAR 0 7
77199: PUSH
77200: LD_INT 1
77202: NEG
77203: MUL
77204: ST_TO_ADDR
// result := [ _x , _y ] ;
77205: LD_ADDR_VAR 0 5
77209: PUSH
77210: LD_VAR 0 6
77214: PUSH
77215: LD_VAR 0 7
77219: PUSH
77220: EMPTY
77221: LIST
77222: LIST
77223: ST_TO_ADDR
// end ;
77224: LD_VAR 0 5
77228: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77229: LD_INT 0
77231: PPUSH
77232: PPUSH
77233: PPUSH
77234: PPUSH
// task := GetTaskList ( unit ) ;
77235: LD_ADDR_VAR 0 7
77239: PUSH
77240: LD_VAR 0 1
77244: PPUSH
77245: CALL_OW 437
77249: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77250: LD_VAR 0 7
77254: NOT
77255: PUSH
77256: LD_VAR 0 1
77260: PPUSH
77261: LD_VAR 0 2
77265: PPUSH
77266: CALL_OW 308
77270: NOT
77271: AND
77272: IFFALSE 77276
// exit ;
77274: GO 77394
// if IsInArea ( unit , area ) then
77276: LD_VAR 0 1
77280: PPUSH
77281: LD_VAR 0 2
77285: PPUSH
77286: CALL_OW 308
77290: IFFALSE 77308
// begin ComMoveToArea ( unit , goAway ) ;
77292: LD_VAR 0 1
77296: PPUSH
77297: LD_VAR 0 3
77301: PPUSH
77302: CALL_OW 113
// exit ;
77306: GO 77394
// end ; if task [ 1 ] [ 1 ] <> M then
77308: LD_VAR 0 7
77312: PUSH
77313: LD_INT 1
77315: ARRAY
77316: PUSH
77317: LD_INT 1
77319: ARRAY
77320: PUSH
77321: LD_STRING M
77323: NONEQUAL
77324: IFFALSE 77328
// exit ;
77326: GO 77394
// x := task [ 1 ] [ 2 ] ;
77328: LD_ADDR_VAR 0 5
77332: PUSH
77333: LD_VAR 0 7
77337: PUSH
77338: LD_INT 1
77340: ARRAY
77341: PUSH
77342: LD_INT 2
77344: ARRAY
77345: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77346: LD_ADDR_VAR 0 6
77350: PUSH
77351: LD_VAR 0 7
77355: PUSH
77356: LD_INT 1
77358: ARRAY
77359: PUSH
77360: LD_INT 3
77362: ARRAY
77363: ST_TO_ADDR
// if InArea ( x , y , area ) then
77364: LD_VAR 0 5
77368: PPUSH
77369: LD_VAR 0 6
77373: PPUSH
77374: LD_VAR 0 2
77378: PPUSH
77379: CALL_OW 309
77383: IFFALSE 77394
// ComStop ( unit ) ;
77385: LD_VAR 0 1
77389: PPUSH
77390: CALL_OW 141
// end ;
77394: LD_VAR 0 4
77398: RET
// export function Abs ( value ) ; begin
77399: LD_INT 0
77401: PPUSH
// result := value ;
77402: LD_ADDR_VAR 0 2
77406: PUSH
77407: LD_VAR 0 1
77411: ST_TO_ADDR
// if value < 0 then
77412: LD_VAR 0 1
77416: PUSH
77417: LD_INT 0
77419: LESS
77420: IFFALSE 77437
// result := value * - 1 ;
77422: LD_ADDR_VAR 0 2
77426: PUSH
77427: LD_VAR 0 1
77431: PUSH
77432: LD_INT 1
77434: NEG
77435: MUL
77436: ST_TO_ADDR
// end ;
77437: LD_VAR 0 2
77441: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77442: LD_INT 0
77444: PPUSH
77445: PPUSH
77446: PPUSH
77447: PPUSH
77448: PPUSH
77449: PPUSH
77450: PPUSH
77451: PPUSH
// if not unit or not building then
77452: LD_VAR 0 1
77456: NOT
77457: PUSH
77458: LD_VAR 0 2
77462: NOT
77463: OR
77464: IFFALSE 77468
// exit ;
77466: GO 77694
// x := GetX ( building ) ;
77468: LD_ADDR_VAR 0 4
77472: PUSH
77473: LD_VAR 0 2
77477: PPUSH
77478: CALL_OW 250
77482: ST_TO_ADDR
// y := GetY ( building ) ;
77483: LD_ADDR_VAR 0 6
77487: PUSH
77488: LD_VAR 0 2
77492: PPUSH
77493: CALL_OW 251
77497: ST_TO_ADDR
// d := GetDir ( building ) ;
77498: LD_ADDR_VAR 0 8
77502: PUSH
77503: LD_VAR 0 2
77507: PPUSH
77508: CALL_OW 254
77512: ST_TO_ADDR
// r := 4 ;
77513: LD_ADDR_VAR 0 9
77517: PUSH
77518: LD_INT 4
77520: ST_TO_ADDR
// for i := 1 to 5 do
77521: LD_ADDR_VAR 0 10
77525: PUSH
77526: DOUBLE
77527: LD_INT 1
77529: DEC
77530: ST_TO_ADDR
77531: LD_INT 5
77533: PUSH
77534: FOR_TO
77535: IFFALSE 77692
// begin _x := ShiftX ( x , d , r + i ) ;
77537: LD_ADDR_VAR 0 5
77541: PUSH
77542: LD_VAR 0 4
77546: PPUSH
77547: LD_VAR 0 8
77551: PPUSH
77552: LD_VAR 0 9
77556: PUSH
77557: LD_VAR 0 10
77561: PLUS
77562: PPUSH
77563: CALL_OW 272
77567: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77568: LD_ADDR_VAR 0 7
77572: PUSH
77573: LD_VAR 0 6
77577: PPUSH
77578: LD_VAR 0 8
77582: PPUSH
77583: LD_VAR 0 9
77587: PUSH
77588: LD_VAR 0 10
77592: PLUS
77593: PPUSH
77594: CALL_OW 273
77598: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77599: LD_VAR 0 5
77603: PPUSH
77604: LD_VAR 0 7
77608: PPUSH
77609: CALL_OW 488
77613: PUSH
77614: LD_VAR 0 5
77618: PPUSH
77619: LD_VAR 0 7
77623: PPUSH
77624: CALL_OW 428
77628: PPUSH
77629: CALL_OW 247
77633: PUSH
77634: LD_INT 3
77636: PUSH
77637: LD_INT 2
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: IN
77644: NOT
77645: AND
77646: IFFALSE 77690
// begin ComMoveXY ( unit , _x , _y ) ;
77648: LD_VAR 0 1
77652: PPUSH
77653: LD_VAR 0 5
77657: PPUSH
77658: LD_VAR 0 7
77662: PPUSH
77663: CALL_OW 111
// result := [ _x , _y ] ;
77667: LD_ADDR_VAR 0 3
77671: PUSH
77672: LD_VAR 0 5
77676: PUSH
77677: LD_VAR 0 7
77681: PUSH
77682: EMPTY
77683: LIST
77684: LIST
77685: ST_TO_ADDR
// exit ;
77686: POP
77687: POP
77688: GO 77694
// end ; end ;
77690: GO 77534
77692: POP
77693: POP
// end ;
77694: LD_VAR 0 3
77698: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77699: LD_INT 0
77701: PPUSH
77702: PPUSH
77703: PPUSH
// result := 0 ;
77704: LD_ADDR_VAR 0 3
77708: PUSH
77709: LD_INT 0
77711: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77712: LD_VAR 0 1
77716: PUSH
77717: LD_INT 0
77719: LESS
77720: PUSH
77721: LD_VAR 0 1
77725: PUSH
77726: LD_INT 8
77728: GREATER
77729: OR
77730: PUSH
77731: LD_VAR 0 2
77735: PUSH
77736: LD_INT 0
77738: LESS
77739: OR
77740: PUSH
77741: LD_VAR 0 2
77745: PUSH
77746: LD_INT 8
77748: GREATER
77749: OR
77750: IFFALSE 77754
// exit ;
77752: GO 77829
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77754: LD_ADDR_VAR 0 4
77758: PUSH
77759: LD_INT 22
77761: PUSH
77762: LD_VAR 0 2
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PPUSH
77771: CALL_OW 69
77775: PUSH
77776: FOR_IN
77777: IFFALSE 77827
// begin un := UnitShoot ( i ) ;
77779: LD_ADDR_VAR 0 5
77783: PUSH
77784: LD_VAR 0 4
77788: PPUSH
77789: CALL_OW 504
77793: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77794: LD_VAR 0 5
77798: PPUSH
77799: CALL_OW 255
77803: PUSH
77804: LD_VAR 0 1
77808: EQUAL
77809: IFFALSE 77825
// begin result := un ;
77811: LD_ADDR_VAR 0 3
77815: PUSH
77816: LD_VAR 0 5
77820: ST_TO_ADDR
// exit ;
77821: POP
77822: POP
77823: GO 77829
// end ; end ;
77825: GO 77776
77827: POP
77828: POP
// end ;
77829: LD_VAR 0 3
77833: RET
// export function GetCargoBay ( units ) ; begin
77834: LD_INT 0
77836: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77837: LD_ADDR_VAR 0 2
77841: PUSH
77842: LD_VAR 0 1
77846: PPUSH
77847: LD_INT 2
77849: PUSH
77850: LD_INT 34
77852: PUSH
77853: LD_INT 12
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: PUSH
77860: LD_INT 34
77862: PUSH
77863: LD_INT 51
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: PUSH
77870: LD_INT 34
77872: PUSH
77873: LD_INT 32
77875: PUSH
77876: EMPTY
77877: LIST
77878: LIST
77879: PUSH
77880: LD_INT 34
77882: PUSH
77883: LD_INT 89
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: PUSH
77890: EMPTY
77891: LIST
77892: LIST
77893: LIST
77894: LIST
77895: LIST
77896: PPUSH
77897: CALL_OW 72
77901: ST_TO_ADDR
// end ;
77902: LD_VAR 0 2
77906: RET
// export function Negate ( value ) ; begin
77907: LD_INT 0
77909: PPUSH
// result := not value ;
77910: LD_ADDR_VAR 0 2
77914: PUSH
77915: LD_VAR 0 1
77919: NOT
77920: ST_TO_ADDR
// end ;
77921: LD_VAR 0 2
77925: RET
// export function Inc ( value ) ; begin
77926: LD_INT 0
77928: PPUSH
// result := value + 1 ;
77929: LD_ADDR_VAR 0 2
77933: PUSH
77934: LD_VAR 0 1
77938: PUSH
77939: LD_INT 1
77941: PLUS
77942: ST_TO_ADDR
// end ;
77943: LD_VAR 0 2
77947: RET
// export function Dec ( value ) ; begin
77948: LD_INT 0
77950: PPUSH
// result := value - 1 ;
77951: LD_ADDR_VAR 0 2
77955: PUSH
77956: LD_VAR 0 1
77960: PUSH
77961: LD_INT 1
77963: MINUS
77964: ST_TO_ADDR
// end ;
77965: LD_VAR 0 2
77969: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77970: LD_INT 0
77972: PPUSH
77973: PPUSH
77974: PPUSH
77975: PPUSH
77976: PPUSH
77977: PPUSH
77978: PPUSH
77979: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77980: LD_VAR 0 1
77984: PPUSH
77985: LD_VAR 0 2
77989: PPUSH
77990: CALL_OW 488
77994: NOT
77995: PUSH
77996: LD_VAR 0 3
78000: PPUSH
78001: LD_VAR 0 4
78005: PPUSH
78006: CALL_OW 488
78010: NOT
78011: OR
78012: IFFALSE 78025
// begin result := - 1 ;
78014: LD_ADDR_VAR 0 5
78018: PUSH
78019: LD_INT 1
78021: NEG
78022: ST_TO_ADDR
// exit ;
78023: GO 78260
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78025: LD_ADDR_VAR 0 12
78029: PUSH
78030: LD_VAR 0 1
78034: PPUSH
78035: LD_VAR 0 2
78039: PPUSH
78040: LD_VAR 0 3
78044: PPUSH
78045: LD_VAR 0 4
78049: PPUSH
78050: CALL 77110 0 4
78054: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78055: LD_ADDR_VAR 0 11
78059: PUSH
78060: LD_VAR 0 1
78064: PPUSH
78065: LD_VAR 0 2
78069: PPUSH
78070: LD_VAR 0 12
78074: PUSH
78075: LD_INT 1
78077: ARRAY
78078: PPUSH
78079: LD_VAR 0 12
78083: PUSH
78084: LD_INT 2
78086: ARRAY
78087: PPUSH
78088: CALL_OW 298
78092: ST_TO_ADDR
// distance := 9999 ;
78093: LD_ADDR_VAR 0 10
78097: PUSH
78098: LD_INT 9999
78100: ST_TO_ADDR
// for i := 0 to 5 do
78101: LD_ADDR_VAR 0 6
78105: PUSH
78106: DOUBLE
78107: LD_INT 0
78109: DEC
78110: ST_TO_ADDR
78111: LD_INT 5
78113: PUSH
78114: FOR_TO
78115: IFFALSE 78258
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78117: LD_ADDR_VAR 0 7
78121: PUSH
78122: LD_VAR 0 1
78126: PPUSH
78127: LD_VAR 0 6
78131: PPUSH
78132: LD_VAR 0 11
78136: PPUSH
78137: CALL_OW 272
78141: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78142: LD_ADDR_VAR 0 8
78146: PUSH
78147: LD_VAR 0 2
78151: PPUSH
78152: LD_VAR 0 6
78156: PPUSH
78157: LD_VAR 0 11
78161: PPUSH
78162: CALL_OW 273
78166: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78167: LD_VAR 0 7
78171: PPUSH
78172: LD_VAR 0 8
78176: PPUSH
78177: CALL_OW 488
78181: NOT
78182: IFFALSE 78186
// continue ;
78184: GO 78114
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78186: LD_ADDR_VAR 0 9
78190: PUSH
78191: LD_VAR 0 12
78195: PUSH
78196: LD_INT 1
78198: ARRAY
78199: PPUSH
78200: LD_VAR 0 12
78204: PUSH
78205: LD_INT 2
78207: ARRAY
78208: PPUSH
78209: LD_VAR 0 7
78213: PPUSH
78214: LD_VAR 0 8
78218: PPUSH
78219: CALL_OW 298
78223: ST_TO_ADDR
// if tmp < distance then
78224: LD_VAR 0 9
78228: PUSH
78229: LD_VAR 0 10
78233: LESS
78234: IFFALSE 78256
// begin result := i ;
78236: LD_ADDR_VAR 0 5
78240: PUSH
78241: LD_VAR 0 6
78245: ST_TO_ADDR
// distance := tmp ;
78246: LD_ADDR_VAR 0 10
78250: PUSH
78251: LD_VAR 0 9
78255: ST_TO_ADDR
// end ; end ;
78256: GO 78114
78258: POP
78259: POP
// end ;
78260: LD_VAR 0 5
78264: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78265: LD_INT 0
78267: PPUSH
78268: PPUSH
// if not driver or not IsInUnit ( driver ) then
78269: LD_VAR 0 1
78273: NOT
78274: PUSH
78275: LD_VAR 0 1
78279: PPUSH
78280: CALL_OW 310
78284: NOT
78285: OR
78286: IFFALSE 78290
// exit ;
78288: GO 78380
// vehicle := IsInUnit ( driver ) ;
78290: LD_ADDR_VAR 0 3
78294: PUSH
78295: LD_VAR 0 1
78299: PPUSH
78300: CALL_OW 310
78304: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78305: LD_VAR 0 1
78309: PPUSH
78310: LD_STRING \
78312: PUSH
78313: LD_INT 0
78315: PUSH
78316: LD_INT 0
78318: PUSH
78319: LD_INT 0
78321: PUSH
78322: LD_INT 0
78324: PUSH
78325: LD_INT 0
78327: PUSH
78328: LD_INT 0
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: LIST
78338: LIST
78339: PUSH
78340: LD_STRING E
78342: PUSH
78343: LD_INT 0
78345: PUSH
78346: LD_INT 0
78348: PUSH
78349: LD_VAR 0 3
78353: PUSH
78354: LD_INT 0
78356: PUSH
78357: LD_INT 0
78359: PUSH
78360: LD_INT 0
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: LIST
78367: LIST
78368: LIST
78369: LIST
78370: LIST
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PPUSH
78376: CALL_OW 446
// end ;
78380: LD_VAR 0 2
78384: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78385: LD_INT 0
78387: PPUSH
78388: PPUSH
// if not driver or not IsInUnit ( driver ) then
78389: LD_VAR 0 1
78393: NOT
78394: PUSH
78395: LD_VAR 0 1
78399: PPUSH
78400: CALL_OW 310
78404: NOT
78405: OR
78406: IFFALSE 78410
// exit ;
78408: GO 78500
// vehicle := IsInUnit ( driver ) ;
78410: LD_ADDR_VAR 0 3
78414: PUSH
78415: LD_VAR 0 1
78419: PPUSH
78420: CALL_OW 310
78424: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78425: LD_VAR 0 1
78429: PPUSH
78430: LD_STRING \
78432: PUSH
78433: LD_INT 0
78435: PUSH
78436: LD_INT 0
78438: PUSH
78439: LD_INT 0
78441: PUSH
78442: LD_INT 0
78444: PUSH
78445: LD_INT 0
78447: PUSH
78448: LD_INT 0
78450: PUSH
78451: EMPTY
78452: LIST
78453: LIST
78454: LIST
78455: LIST
78456: LIST
78457: LIST
78458: LIST
78459: PUSH
78460: LD_STRING E
78462: PUSH
78463: LD_INT 0
78465: PUSH
78466: LD_INT 0
78468: PUSH
78469: LD_VAR 0 3
78473: PUSH
78474: LD_INT 0
78476: PUSH
78477: LD_INT 0
78479: PUSH
78480: LD_INT 0
78482: PUSH
78483: EMPTY
78484: LIST
78485: LIST
78486: LIST
78487: LIST
78488: LIST
78489: LIST
78490: LIST
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: PPUSH
78496: CALL_OW 447
// end ;
78500: LD_VAR 0 2
78504: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78505: LD_INT 0
78507: PPUSH
78508: PPUSH
78509: PPUSH
// tmp := [ ] ;
78510: LD_ADDR_VAR 0 5
78514: PUSH
78515: EMPTY
78516: ST_TO_ADDR
// for i in units do
78517: LD_ADDR_VAR 0 4
78521: PUSH
78522: LD_VAR 0 1
78526: PUSH
78527: FOR_IN
78528: IFFALSE 78566
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78530: LD_ADDR_VAR 0 5
78534: PUSH
78535: LD_VAR 0 5
78539: PPUSH
78540: LD_VAR 0 5
78544: PUSH
78545: LD_INT 1
78547: PLUS
78548: PPUSH
78549: LD_VAR 0 4
78553: PPUSH
78554: CALL_OW 256
78558: PPUSH
78559: CALL_OW 2
78563: ST_TO_ADDR
78564: GO 78527
78566: POP
78567: POP
// if not tmp then
78568: LD_VAR 0 5
78572: NOT
78573: IFFALSE 78577
// exit ;
78575: GO 78625
// if asc then
78577: LD_VAR 0 2
78581: IFFALSE 78605
// result := SortListByListAsc ( units , tmp ) else
78583: LD_ADDR_VAR 0 3
78587: PUSH
78588: LD_VAR 0 1
78592: PPUSH
78593: LD_VAR 0 5
78597: PPUSH
78598: CALL_OW 76
78602: ST_TO_ADDR
78603: GO 78625
// result := SortListByListDesc ( units , tmp ) ;
78605: LD_ADDR_VAR 0 3
78609: PUSH
78610: LD_VAR 0 1
78614: PPUSH
78615: LD_VAR 0 5
78619: PPUSH
78620: CALL_OW 77
78624: ST_TO_ADDR
// end ;
78625: LD_VAR 0 3
78629: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78630: LD_INT 0
78632: PPUSH
78633: PPUSH
// task := GetTaskList ( mech ) ;
78634: LD_ADDR_VAR 0 4
78638: PUSH
78639: LD_VAR 0 1
78643: PPUSH
78644: CALL_OW 437
78648: ST_TO_ADDR
// if not task then
78649: LD_VAR 0 4
78653: NOT
78654: IFFALSE 78658
// exit ;
78656: GO 78700
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78658: LD_ADDR_VAR 0 3
78662: PUSH
78663: LD_VAR 0 4
78667: PUSH
78668: LD_INT 1
78670: ARRAY
78671: PUSH
78672: LD_INT 1
78674: ARRAY
78675: PUSH
78676: LD_STRING r
78678: EQUAL
78679: PUSH
78680: LD_VAR 0 4
78684: PUSH
78685: LD_INT 1
78687: ARRAY
78688: PUSH
78689: LD_INT 4
78691: ARRAY
78692: PUSH
78693: LD_VAR 0 2
78697: EQUAL
78698: AND
78699: ST_TO_ADDR
// end ;
78700: LD_VAR 0 3
78704: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78705: LD_INT 0
78707: PPUSH
// SetDir ( unit , d ) ;
78708: LD_VAR 0 1
78712: PPUSH
78713: LD_VAR 0 4
78717: PPUSH
78718: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78722: LD_VAR 0 1
78726: PPUSH
78727: LD_VAR 0 2
78731: PPUSH
78732: LD_VAR 0 3
78736: PPUSH
78737: LD_VAR 0 5
78741: PPUSH
78742: CALL_OW 48
// end ;
78746: LD_VAR 0 6
78750: RET
// export function ToNaturalNumber ( number ) ; begin
78751: LD_INT 0
78753: PPUSH
// result := number div 1 ;
78754: LD_ADDR_VAR 0 2
78758: PUSH
78759: LD_VAR 0 1
78763: PUSH
78764: LD_INT 1
78766: DIV
78767: ST_TO_ADDR
// if number < 0 then
78768: LD_VAR 0 1
78772: PUSH
78773: LD_INT 0
78775: LESS
78776: IFFALSE 78786
// result := 0 ;
78778: LD_ADDR_VAR 0 2
78782: PUSH
78783: LD_INT 0
78785: ST_TO_ADDR
// end ;
78786: LD_VAR 0 2
78790: RET
// export function SortByClass ( units , class ) ; var un ; begin
78791: LD_INT 0
78793: PPUSH
78794: PPUSH
// if not units or not class then
78795: LD_VAR 0 1
78799: NOT
78800: PUSH
78801: LD_VAR 0 2
78805: NOT
78806: OR
78807: IFFALSE 78811
// exit ;
78809: GO 78906
// result := [ ] ;
78811: LD_ADDR_VAR 0 3
78815: PUSH
78816: EMPTY
78817: ST_TO_ADDR
// for un in units do
78818: LD_ADDR_VAR 0 4
78822: PUSH
78823: LD_VAR 0 1
78827: PUSH
78828: FOR_IN
78829: IFFALSE 78904
// if GetClass ( un ) = class then
78831: LD_VAR 0 4
78835: PPUSH
78836: CALL_OW 257
78840: PUSH
78841: LD_VAR 0 2
78845: EQUAL
78846: IFFALSE 78873
// result := Insert ( result , 1 , un ) else
78848: LD_ADDR_VAR 0 3
78852: PUSH
78853: LD_VAR 0 3
78857: PPUSH
78858: LD_INT 1
78860: PPUSH
78861: LD_VAR 0 4
78865: PPUSH
78866: CALL_OW 2
78870: ST_TO_ADDR
78871: GO 78902
// result := Replace ( result , result + 1 , un ) ;
78873: LD_ADDR_VAR 0 3
78877: PUSH
78878: LD_VAR 0 3
78882: PPUSH
78883: LD_VAR 0 3
78887: PUSH
78888: LD_INT 1
78890: PLUS
78891: PPUSH
78892: LD_VAR 0 4
78896: PPUSH
78897: CALL_OW 1
78901: ST_TO_ADDR
78902: GO 78828
78904: POP
78905: POP
// end ;
78906: LD_VAR 0 3
78910: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78911: LD_INT 0
78913: PPUSH
78914: PPUSH
78915: PPUSH
78916: PPUSH
78917: PPUSH
78918: PPUSH
78919: PPUSH
// result := [ ] ;
78920: LD_ADDR_VAR 0 4
78924: PUSH
78925: EMPTY
78926: ST_TO_ADDR
// if x - r < 0 then
78927: LD_VAR 0 1
78931: PUSH
78932: LD_VAR 0 3
78936: MINUS
78937: PUSH
78938: LD_INT 0
78940: LESS
78941: IFFALSE 78953
// min_x := 0 else
78943: LD_ADDR_VAR 0 8
78947: PUSH
78948: LD_INT 0
78950: ST_TO_ADDR
78951: GO 78969
// min_x := x - r ;
78953: LD_ADDR_VAR 0 8
78957: PUSH
78958: LD_VAR 0 1
78962: PUSH
78963: LD_VAR 0 3
78967: MINUS
78968: ST_TO_ADDR
// if y - r < 0 then
78969: LD_VAR 0 2
78973: PUSH
78974: LD_VAR 0 3
78978: MINUS
78979: PUSH
78980: LD_INT 0
78982: LESS
78983: IFFALSE 78995
// min_y := 0 else
78985: LD_ADDR_VAR 0 7
78989: PUSH
78990: LD_INT 0
78992: ST_TO_ADDR
78993: GO 79011
// min_y := y - r ;
78995: LD_ADDR_VAR 0 7
78999: PUSH
79000: LD_VAR 0 2
79004: PUSH
79005: LD_VAR 0 3
79009: MINUS
79010: ST_TO_ADDR
// max_x := x + r ;
79011: LD_ADDR_VAR 0 9
79015: PUSH
79016: LD_VAR 0 1
79020: PUSH
79021: LD_VAR 0 3
79025: PLUS
79026: ST_TO_ADDR
// max_y := y + r ;
79027: LD_ADDR_VAR 0 10
79031: PUSH
79032: LD_VAR 0 2
79036: PUSH
79037: LD_VAR 0 3
79041: PLUS
79042: ST_TO_ADDR
// for _x = min_x to max_x do
79043: LD_ADDR_VAR 0 5
79047: PUSH
79048: DOUBLE
79049: LD_VAR 0 8
79053: DEC
79054: ST_TO_ADDR
79055: LD_VAR 0 9
79059: PUSH
79060: FOR_TO
79061: IFFALSE 79162
// for _y = min_y to max_y do
79063: LD_ADDR_VAR 0 6
79067: PUSH
79068: DOUBLE
79069: LD_VAR 0 7
79073: DEC
79074: ST_TO_ADDR
79075: LD_VAR 0 10
79079: PUSH
79080: FOR_TO
79081: IFFALSE 79158
// begin if not ValidHex ( _x , _y ) then
79083: LD_VAR 0 5
79087: PPUSH
79088: LD_VAR 0 6
79092: PPUSH
79093: CALL_OW 488
79097: NOT
79098: IFFALSE 79102
// continue ;
79100: GO 79080
// if GetResourceTypeXY ( _x , _y ) then
79102: LD_VAR 0 5
79106: PPUSH
79107: LD_VAR 0 6
79111: PPUSH
79112: CALL_OW 283
79116: IFFALSE 79156
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79118: LD_ADDR_VAR 0 4
79122: PUSH
79123: LD_VAR 0 4
79127: PPUSH
79128: LD_VAR 0 4
79132: PUSH
79133: LD_INT 1
79135: PLUS
79136: PPUSH
79137: LD_VAR 0 5
79141: PUSH
79142: LD_VAR 0 6
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: PPUSH
79151: CALL_OW 1
79155: ST_TO_ADDR
// end ;
79156: GO 79080
79158: POP
79159: POP
79160: GO 79060
79162: POP
79163: POP
// end ;
79164: LD_VAR 0 4
79168: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79169: LD_INT 0
79171: PPUSH
79172: PPUSH
79173: PPUSH
79174: PPUSH
79175: PPUSH
79176: PPUSH
79177: PPUSH
79178: PPUSH
// if not units then
79179: LD_VAR 0 1
79183: NOT
79184: IFFALSE 79188
// exit ;
79186: GO 79712
// result := UnitFilter ( units , [ f_ok ] ) ;
79188: LD_ADDR_VAR 0 3
79192: PUSH
79193: LD_VAR 0 1
79197: PPUSH
79198: LD_INT 50
79200: PUSH
79201: EMPTY
79202: LIST
79203: PPUSH
79204: CALL_OW 72
79208: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79209: LD_ADDR_VAR 0 8
79213: PUSH
79214: LD_VAR 0 1
79218: PUSH
79219: LD_INT 1
79221: ARRAY
79222: PPUSH
79223: CALL_OW 255
79227: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79228: LD_ADDR_VAR 0 10
79232: PUSH
79233: LD_INT 29
79235: PUSH
79236: LD_INT 91
79238: PUSH
79239: LD_INT 49
79241: PUSH
79242: EMPTY
79243: LIST
79244: LIST
79245: LIST
79246: ST_TO_ADDR
// if not result then
79247: LD_VAR 0 3
79251: NOT
79252: IFFALSE 79256
// exit ;
79254: GO 79712
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79256: LD_ADDR_VAR 0 5
79260: PUSH
79261: LD_INT 81
79263: PUSH
79264: LD_VAR 0 8
79268: PUSH
79269: EMPTY
79270: LIST
79271: LIST
79272: PPUSH
79273: CALL_OW 69
79277: ST_TO_ADDR
// for i in result do
79278: LD_ADDR_VAR 0 4
79282: PUSH
79283: LD_VAR 0 3
79287: PUSH
79288: FOR_IN
79289: IFFALSE 79710
// begin tag := GetTag ( i ) + 1 ;
79291: LD_ADDR_VAR 0 9
79295: PUSH
79296: LD_VAR 0 4
79300: PPUSH
79301: CALL_OW 110
79305: PUSH
79306: LD_INT 1
79308: PLUS
79309: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79310: LD_ADDR_VAR 0 7
79314: PUSH
79315: LD_VAR 0 4
79319: PPUSH
79320: CALL_OW 250
79324: PPUSH
79325: LD_VAR 0 4
79329: PPUSH
79330: CALL_OW 251
79334: PPUSH
79335: LD_INT 6
79337: PPUSH
79338: CALL 78911 0 3
79342: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79343: LD_VAR 0 4
79347: PPUSH
79348: CALL_OW 247
79352: PUSH
79353: LD_INT 2
79355: EQUAL
79356: PUSH
79357: LD_VAR 0 7
79361: AND
79362: PUSH
79363: LD_VAR 0 4
79367: PPUSH
79368: CALL_OW 264
79372: PUSH
79373: LD_VAR 0 10
79377: IN
79378: NOT
79379: AND
79380: IFFALSE 79419
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79382: LD_VAR 0 4
79386: PPUSH
79387: LD_VAR 0 7
79391: PUSH
79392: LD_INT 1
79394: ARRAY
79395: PUSH
79396: LD_INT 1
79398: ARRAY
79399: PPUSH
79400: LD_VAR 0 7
79404: PUSH
79405: LD_INT 1
79407: ARRAY
79408: PUSH
79409: LD_INT 2
79411: ARRAY
79412: PPUSH
79413: CALL_OW 116
79417: GO 79708
// if path > tag then
79419: LD_VAR 0 2
79423: PUSH
79424: LD_VAR 0 9
79428: GREATER
79429: IFFALSE 79637
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79431: LD_ADDR_VAR 0 6
79435: PUSH
79436: LD_VAR 0 5
79440: PPUSH
79441: LD_INT 91
79443: PUSH
79444: LD_VAR 0 4
79448: PUSH
79449: LD_INT 8
79451: PUSH
79452: EMPTY
79453: LIST
79454: LIST
79455: LIST
79456: PPUSH
79457: CALL_OW 72
79461: ST_TO_ADDR
// if nearEnemy then
79462: LD_VAR 0 6
79466: IFFALSE 79535
// begin if GetWeapon ( i ) = ru_time_lapser then
79468: LD_VAR 0 4
79472: PPUSH
79473: CALL_OW 264
79477: PUSH
79478: LD_INT 49
79480: EQUAL
79481: IFFALSE 79509
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79483: LD_VAR 0 4
79487: PPUSH
79488: LD_VAR 0 6
79492: PPUSH
79493: LD_VAR 0 4
79497: PPUSH
79498: CALL_OW 74
79502: PPUSH
79503: CALL_OW 112
79507: GO 79533
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79509: LD_VAR 0 4
79513: PPUSH
79514: LD_VAR 0 6
79518: PPUSH
79519: LD_VAR 0 4
79523: PPUSH
79524: CALL_OW 74
79528: PPUSH
79529: CALL_OW 115
// end else
79533: GO 79635
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79535: LD_VAR 0 4
79539: PPUSH
79540: LD_VAR 0 2
79544: PUSH
79545: LD_VAR 0 9
79549: ARRAY
79550: PUSH
79551: LD_INT 1
79553: ARRAY
79554: PPUSH
79555: LD_VAR 0 2
79559: PUSH
79560: LD_VAR 0 9
79564: ARRAY
79565: PUSH
79566: LD_INT 2
79568: ARRAY
79569: PPUSH
79570: CALL_OW 297
79574: PUSH
79575: LD_INT 6
79577: GREATER
79578: IFFALSE 79621
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79580: LD_VAR 0 4
79584: PPUSH
79585: LD_VAR 0 2
79589: PUSH
79590: LD_VAR 0 9
79594: ARRAY
79595: PUSH
79596: LD_INT 1
79598: ARRAY
79599: PPUSH
79600: LD_VAR 0 2
79604: PUSH
79605: LD_VAR 0 9
79609: ARRAY
79610: PUSH
79611: LD_INT 2
79613: ARRAY
79614: PPUSH
79615: CALL_OW 114
79619: GO 79635
// SetTag ( i , tag ) ;
79621: LD_VAR 0 4
79625: PPUSH
79626: LD_VAR 0 9
79630: PPUSH
79631: CALL_OW 109
// end else
79635: GO 79708
// if enemy then
79637: LD_VAR 0 5
79641: IFFALSE 79708
// begin if GetWeapon ( i ) = ru_time_lapser then
79643: LD_VAR 0 4
79647: PPUSH
79648: CALL_OW 264
79652: PUSH
79653: LD_INT 49
79655: EQUAL
79656: IFFALSE 79684
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79658: LD_VAR 0 4
79662: PPUSH
79663: LD_VAR 0 5
79667: PPUSH
79668: LD_VAR 0 4
79672: PPUSH
79673: CALL_OW 74
79677: PPUSH
79678: CALL_OW 112
79682: GO 79708
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79684: LD_VAR 0 4
79688: PPUSH
79689: LD_VAR 0 5
79693: PPUSH
79694: LD_VAR 0 4
79698: PPUSH
79699: CALL_OW 74
79703: PPUSH
79704: CALL_OW 115
// end ; end ;
79708: GO 79288
79710: POP
79711: POP
// end ;
79712: LD_VAR 0 3
79716: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79717: LD_INT 0
79719: PPUSH
79720: PPUSH
79721: PPUSH
// if not unit or IsInUnit ( unit ) then
79722: LD_VAR 0 1
79726: NOT
79727: PUSH
79728: LD_VAR 0 1
79732: PPUSH
79733: CALL_OW 310
79737: OR
79738: IFFALSE 79742
// exit ;
79740: GO 79833
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79742: LD_ADDR_VAR 0 4
79746: PUSH
79747: LD_VAR 0 1
79751: PPUSH
79752: CALL_OW 250
79756: PPUSH
79757: LD_VAR 0 2
79761: PPUSH
79762: LD_INT 1
79764: PPUSH
79765: CALL_OW 272
79769: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79770: LD_ADDR_VAR 0 5
79774: PUSH
79775: LD_VAR 0 1
79779: PPUSH
79780: CALL_OW 251
79784: PPUSH
79785: LD_VAR 0 2
79789: PPUSH
79790: LD_INT 1
79792: PPUSH
79793: CALL_OW 273
79797: ST_TO_ADDR
// if ValidHex ( x , y ) then
79798: LD_VAR 0 4
79802: PPUSH
79803: LD_VAR 0 5
79807: PPUSH
79808: CALL_OW 488
79812: IFFALSE 79833
// ComTurnXY ( unit , x , y ) ;
79814: LD_VAR 0 1
79818: PPUSH
79819: LD_VAR 0 4
79823: PPUSH
79824: LD_VAR 0 5
79828: PPUSH
79829: CALL_OW 118
// end ;
79833: LD_VAR 0 3
79837: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79838: LD_INT 0
79840: PPUSH
79841: PPUSH
// result := false ;
79842: LD_ADDR_VAR 0 3
79846: PUSH
79847: LD_INT 0
79849: ST_TO_ADDR
// if not units then
79850: LD_VAR 0 2
79854: NOT
79855: IFFALSE 79859
// exit ;
79857: GO 79904
// for i in units do
79859: LD_ADDR_VAR 0 4
79863: PUSH
79864: LD_VAR 0 2
79868: PUSH
79869: FOR_IN
79870: IFFALSE 79902
// if See ( side , i ) then
79872: LD_VAR 0 1
79876: PPUSH
79877: LD_VAR 0 4
79881: PPUSH
79882: CALL_OW 292
79886: IFFALSE 79900
// begin result := true ;
79888: LD_ADDR_VAR 0 3
79892: PUSH
79893: LD_INT 1
79895: ST_TO_ADDR
// exit ;
79896: POP
79897: POP
79898: GO 79904
// end ;
79900: GO 79869
79902: POP
79903: POP
// end ;
79904: LD_VAR 0 3
79908: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79909: LD_INT 0
79911: PPUSH
79912: PPUSH
79913: PPUSH
79914: PPUSH
// if not unit or not points then
79915: LD_VAR 0 1
79919: NOT
79920: PUSH
79921: LD_VAR 0 2
79925: NOT
79926: OR
79927: IFFALSE 79931
// exit ;
79929: GO 80021
// dist := 99999 ;
79931: LD_ADDR_VAR 0 5
79935: PUSH
79936: LD_INT 99999
79938: ST_TO_ADDR
// for i in points do
79939: LD_ADDR_VAR 0 4
79943: PUSH
79944: LD_VAR 0 2
79948: PUSH
79949: FOR_IN
79950: IFFALSE 80019
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79952: LD_ADDR_VAR 0 6
79956: PUSH
79957: LD_VAR 0 1
79961: PPUSH
79962: LD_VAR 0 4
79966: PUSH
79967: LD_INT 1
79969: ARRAY
79970: PPUSH
79971: LD_VAR 0 4
79975: PUSH
79976: LD_INT 2
79978: ARRAY
79979: PPUSH
79980: CALL_OW 297
79984: ST_TO_ADDR
// if tmpDist < dist then
79985: LD_VAR 0 6
79989: PUSH
79990: LD_VAR 0 5
79994: LESS
79995: IFFALSE 80017
// begin result := i ;
79997: LD_ADDR_VAR 0 3
80001: PUSH
80002: LD_VAR 0 4
80006: ST_TO_ADDR
// dist := tmpDist ;
80007: LD_ADDR_VAR 0 5
80011: PUSH
80012: LD_VAR 0 6
80016: ST_TO_ADDR
// end ; end ;
80017: GO 79949
80019: POP
80020: POP
// end ;
80021: LD_VAR 0 3
80025: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80026: LD_INT 0
80028: PPUSH
// uc_side := side ;
80029: LD_ADDR_OWVAR 20
80033: PUSH
80034: LD_VAR 0 1
80038: ST_TO_ADDR
// uc_nation := 3 ;
80039: LD_ADDR_OWVAR 21
80043: PUSH
80044: LD_INT 3
80046: ST_TO_ADDR
// vc_chassis := 25 ;
80047: LD_ADDR_OWVAR 37
80051: PUSH
80052: LD_INT 25
80054: ST_TO_ADDR
// vc_engine := engine_siberite ;
80055: LD_ADDR_OWVAR 39
80059: PUSH
80060: LD_INT 3
80062: ST_TO_ADDR
// vc_control := control_computer ;
80063: LD_ADDR_OWVAR 38
80067: PUSH
80068: LD_INT 3
80070: ST_TO_ADDR
// vc_weapon := 59 ;
80071: LD_ADDR_OWVAR 40
80075: PUSH
80076: LD_INT 59
80078: ST_TO_ADDR
// result := CreateVehicle ;
80079: LD_ADDR_VAR 0 5
80083: PUSH
80084: CALL_OW 45
80088: ST_TO_ADDR
// SetDir ( result , d ) ;
80089: LD_VAR 0 5
80093: PPUSH
80094: LD_VAR 0 4
80098: PPUSH
80099: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80103: LD_VAR 0 5
80107: PPUSH
80108: LD_VAR 0 2
80112: PPUSH
80113: LD_VAR 0 3
80117: PPUSH
80118: LD_INT 0
80120: PPUSH
80121: CALL_OW 48
// end ;
80125: LD_VAR 0 5
80129: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80130: LD_INT 0
80132: PPUSH
80133: PPUSH
80134: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80135: LD_ADDR_VAR 0 2
80139: PUSH
80140: LD_INT 0
80142: PUSH
80143: LD_INT 0
80145: PUSH
80146: LD_INT 0
80148: PUSH
80149: LD_INT 0
80151: PUSH
80152: EMPTY
80153: LIST
80154: LIST
80155: LIST
80156: LIST
80157: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80158: LD_VAR 0 1
80162: NOT
80163: PUSH
80164: LD_VAR 0 1
80168: PPUSH
80169: CALL_OW 264
80173: PUSH
80174: LD_INT 12
80176: PUSH
80177: LD_INT 51
80179: PUSH
80180: LD_INT 32
80182: PUSH
80183: LD_INT 89
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: LIST
80190: LIST
80191: IN
80192: NOT
80193: OR
80194: IFFALSE 80198
// exit ;
80196: GO 80296
// for i := 1 to 3 do
80198: LD_ADDR_VAR 0 3
80202: PUSH
80203: DOUBLE
80204: LD_INT 1
80206: DEC
80207: ST_TO_ADDR
80208: LD_INT 3
80210: PUSH
80211: FOR_TO
80212: IFFALSE 80294
// begin tmp := GetCargo ( cargo , i ) ;
80214: LD_ADDR_VAR 0 4
80218: PUSH
80219: LD_VAR 0 1
80223: PPUSH
80224: LD_VAR 0 3
80228: PPUSH
80229: CALL_OW 289
80233: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80234: LD_ADDR_VAR 0 2
80238: PUSH
80239: LD_VAR 0 2
80243: PPUSH
80244: LD_VAR 0 3
80248: PPUSH
80249: LD_VAR 0 4
80253: PPUSH
80254: CALL_OW 1
80258: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80259: LD_ADDR_VAR 0 2
80263: PUSH
80264: LD_VAR 0 2
80268: PPUSH
80269: LD_INT 4
80271: PPUSH
80272: LD_VAR 0 2
80276: PUSH
80277: LD_INT 4
80279: ARRAY
80280: PUSH
80281: LD_VAR 0 4
80285: PLUS
80286: PPUSH
80287: CALL_OW 1
80291: ST_TO_ADDR
// end ;
80292: GO 80211
80294: POP
80295: POP
// end ;
80296: LD_VAR 0 2
80300: RET
// export function Length ( array ) ; begin
80301: LD_INT 0
80303: PPUSH
// result := array + 0 ;
80304: LD_ADDR_VAR 0 2
80308: PUSH
80309: LD_VAR 0 1
80313: PUSH
80314: LD_INT 0
80316: PLUS
80317: ST_TO_ADDR
// end ;
80318: LD_VAR 0 2
80322: RET
// export function PrepareArray ( array ) ; begin
80323: LD_INT 0
80325: PPUSH
// result := array diff 0 ;
80326: LD_ADDR_VAR 0 2
80330: PUSH
80331: LD_VAR 0 1
80335: PUSH
80336: LD_INT 0
80338: DIFF
80339: ST_TO_ADDR
// if not result [ 1 ] then
80340: LD_VAR 0 2
80344: PUSH
80345: LD_INT 1
80347: ARRAY
80348: NOT
80349: IFFALSE 80369
// result := Delete ( result , 1 ) ;
80351: LD_ADDR_VAR 0 2
80355: PUSH
80356: LD_VAR 0 2
80360: PPUSH
80361: LD_INT 1
80363: PPUSH
80364: CALL_OW 3
80368: ST_TO_ADDR
// end ;
80369: LD_VAR 0 2
80373: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80374: LD_INT 0
80376: PPUSH
80377: PPUSH
80378: PPUSH
80379: PPUSH
// sibRocketRange := 25 ;
80380: LD_ADDR_VAR 0 6
80384: PUSH
80385: LD_INT 25
80387: ST_TO_ADDR
// result := false ;
80388: LD_ADDR_VAR 0 4
80392: PUSH
80393: LD_INT 0
80395: ST_TO_ADDR
// for i := 0 to 5 do
80396: LD_ADDR_VAR 0 5
80400: PUSH
80401: DOUBLE
80402: LD_INT 0
80404: DEC
80405: ST_TO_ADDR
80406: LD_INT 5
80408: PUSH
80409: FOR_TO
80410: IFFALSE 80477
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80412: LD_VAR 0 1
80416: PPUSH
80417: LD_VAR 0 5
80421: PPUSH
80422: LD_VAR 0 6
80426: PPUSH
80427: CALL_OW 272
80431: PPUSH
80432: LD_VAR 0 2
80436: PPUSH
80437: LD_VAR 0 5
80441: PPUSH
80442: LD_VAR 0 6
80446: PPUSH
80447: CALL_OW 273
80451: PPUSH
80452: LD_VAR 0 3
80456: PPUSH
80457: CALL_OW 309
80461: IFFALSE 80475
// begin result := true ;
80463: LD_ADDR_VAR 0 4
80467: PUSH
80468: LD_INT 1
80470: ST_TO_ADDR
// exit ;
80471: POP
80472: POP
80473: GO 80479
// end ;
80475: GO 80409
80477: POP
80478: POP
// end ;
80479: LD_VAR 0 4
80483: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80484: LD_INT 0
80486: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80487: LD_VAR 0 1
80491: PPUSH
80492: LD_VAR 0 2
80496: PPUSH
80497: LD_INT 0
80499: PPUSH
80500: LD_INT 0
80502: PPUSH
80503: LD_INT 1
80505: PPUSH
80506: LD_INT 0
80508: PPUSH
80509: CALL_OW 587
// end ; end_of_file
80513: LD_VAR 0 3
80517: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80518: LD_VAR 0 1
80522: PUSH
80523: LD_INT 200
80525: DOUBLE
80526: GREATEREQUAL
80527: IFFALSE 80535
80529: LD_INT 299
80531: DOUBLE
80532: LESSEQUAL
80533: IFTRUE 80537
80535: GO 80569
80537: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80538: LD_VAR 0 1
80542: PPUSH
80543: LD_VAR 0 2
80547: PPUSH
80548: LD_VAR 0 3
80552: PPUSH
80553: LD_VAR 0 4
80557: PPUSH
80558: LD_VAR 0 5
80562: PPUSH
80563: CALL 35203 0 5
80567: GO 80646
80569: LD_INT 300
80571: DOUBLE
80572: GREATEREQUAL
80573: IFFALSE 80581
80575: LD_INT 399
80577: DOUBLE
80578: LESSEQUAL
80579: IFTRUE 80583
80581: GO 80645
80583: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80584: LD_VAR 0 1
80588: PPUSH
80589: LD_VAR 0 2
80593: PPUSH
80594: LD_VAR 0 3
80598: PPUSH
80599: LD_VAR 0 4
80603: PPUSH
80604: LD_VAR 0 5
80608: PPUSH
80609: LD_VAR 0 6
80613: PPUSH
80614: LD_VAR 0 7
80618: PPUSH
80619: LD_VAR 0 8
80623: PPUSH
80624: LD_VAR 0 9
80628: PPUSH
80629: LD_VAR 0 10
80633: PPUSH
80634: LD_VAR 0 11
80638: PPUSH
80639: CALL 31536 0 11
80643: GO 80646
80645: POP
// end ;
80646: PPOPN 11
80648: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80649: LD_VAR 0 1
80653: PPUSH
80654: LD_VAR 0 2
80658: PPUSH
80659: LD_VAR 0 3
80663: PPUSH
80664: LD_VAR 0 4
80668: PPUSH
80669: LD_VAR 0 5
80673: PPUSH
80674: CALL 34939 0 5
// end ; end_of_file
80678: PPOPN 5
80680: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80681: LD_VAR 0 1
80685: PPUSH
80686: LD_VAR 0 2
80690: PPUSH
80691: LD_VAR 0 3
80695: PPUSH
80696: LD_VAR 0 4
80700: PPUSH
80701: LD_VAR 0 5
80705: PPUSH
80706: LD_VAR 0 6
80710: PPUSH
80711: CALL 19229 0 6
// end ;
80715: PPOPN 6
80717: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80718: LD_INT 0
80720: PPUSH
// begin if not units then
80721: LD_VAR 0 1
80725: NOT
80726: IFFALSE 80730
// exit ;
80728: GO 80730
// end ;
80730: PPOPN 7
80732: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80733: CALL 19200 0 0
// end ;
80737: PPOPN 1
80739: END
