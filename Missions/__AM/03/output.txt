// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 40498 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 40498 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 40498 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 40498 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 40498 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 40498 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 40498 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 40498 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 42621 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 40498 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 40498 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 40498 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 40498 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 40498 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 40498 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 40498 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 78202 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 78202 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9784
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9784
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9764
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9723
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9568
// ComExit ( i ) ;
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL 78628 0 1
9566: GO 9554
9568: POP
9569: POP
// wait ( 0 0$0.3 ) ;
9570: LD_INT 10
9572: PPUSH
9573: CALL_OW 67
// ComFree ( tmp ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9586: LD_VAR 0 6
9590: PPUSH
9591: LD_INT 15
9593: PPUSH
9594: CALL_OW 173
// AddComHold ( tmp ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9607: LD_INT 35
9609: PPUSH
9610: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9614: LD_VAR 0 6
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 314
9627: NOT
9628: IFFALSE 9642
// ComMoveToArea ( tmp , cyrusEscape ) ;
9630: LD_VAR 0 6
9634: PPUSH
9635: LD_INT 15
9637: PPUSH
9638: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9642: LD_VAR 0 6
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_INT 15
9653: PPUSH
9654: CALL_OW 308
9658: IFFALSE 9713
// begin RemoveUnit ( tmp [ 1 ] ) ;
9660: LD_VAR 0 6
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PPUSH
9669: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9673: LD_ADDR_EXP 4
9677: PUSH
9678: LD_EXP 4
9682: PUSH
9683: LD_VAR 0 6
9687: PUSH
9688: LD_INT 1
9690: ARRAY
9691: DIFF
9692: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 6
9702: PUSH
9703: LD_VAR 0 6
9707: PUSH
9708: LD_INT 1
9710: ARRAY
9711: DIFF
9712: ST_TO_ADDR
// end ; until tmp = 0 ;
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: IFFALSE 9607
// end ; wait ( 0 0$30 ) ;
9723: LD_INT 1050
9725: PPUSH
9726: CALL_OW 67
// if ru_spec_patrol then
9730: LD_EXP 54
9734: IFFALSE 9762
// for i in ru_spec_patrol do
9736: LD_ADDR_VAR 0 7
9740: PUSH
9741: LD_EXP 54
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9760
// RemoveUnit ( i ) ;
9749: LD_VAR 0 7
9753: PPUSH
9754: CALL_OW 64
9758: GO 9746
9760: POP
9761: POP
// end else
9762: GO 9784
// begin prepare_siege := false ;
9764: LD_ADDR_EXP 31
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9772: LD_EXP 37
9776: PPUSH
9777: LD_STRING D8a-JMM-1
9779: PPUSH
9780: CALL_OW 88
// end ; end ;
9784: PPOPN 7
9786: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9787: LD_EXP 12
9791: IFFALSE 11059
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// begin uc_side := 8 ;
9801: LD_ADDR_OWVAR 20
9805: PUSH
9806: LD_INT 8
9808: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_INT 59
9816: PUSH
9817: LD_INT 71
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 122
9826: PUSH
9827: LD_INT 117
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9838: LD_ADDR_EXP 51
9842: PUSH
9843: LD_STRING Frank
9845: PPUSH
9846: LD_INT 0
9848: PPUSH
9849: LD_STRING 
9851: PPUSH
9852: CALL 40498 0 3
9856: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9873: LD_EXP 51
9877: PPUSH
9878: LD_VAR 0 3
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: PPUSH
9893: LD_VAR 0 3
9897: PUSH
9898: LD_VAR 0 1
9902: ARRAY
9903: PUSH
9904: LD_INT 2
9906: ARRAY
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9915: LD_EXP 51
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9934: LD_EXP 51
9938: PPUSH
9939: LD_EXP 37
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 8
9951: LESS
9952: PUSH
9953: LD_EXP 51
9957: PPUSH
9958: CALL_OW 256
9962: PUSH
9963: LD_INT 250
9965: GREATER
9966: AND
9967: IFFALSE 9927
// Video ( true ) ;
9969: LD_INT 1
9971: PPUSH
9972: CALL 78202 0 1
// CenterOnUnits ( JMM ) ;
9976: LD_EXP 37
9980: PPUSH
9981: CALL_OW 85
// if IsInUnit ( JMM ) then
9985: LD_EXP 37
9989: PPUSH
9990: CALL_OW 310
9994: IFFALSE 10005
// ComFree ( JMM ) ;
9996: LD_EXP 37
10000: PPUSH
10001: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10005: LD_EXP 37
10009: PPUSH
10010: LD_EXP 51
10014: PPUSH
10015: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10019: LD_EXP 51
10023: PPUSH
10024: LD_EXP 37
10028: PPUSH
10029: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10033: LD_EXP 37
10037: PPUSH
10038: LD_STRING D6-JMM-1
10040: PPUSH
10041: CALL_OW 88
// p := 0 ;
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10053: LD_INT 35
10055: PPUSH
10056: CALL_OW 67
// p := p + 1 ;
10060: LD_ADDR_VAR 0 2
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10074: LD_EXP 37
10078: PPUSH
10079: LD_EXP 51
10083: PPUSH
10084: CALL_OW 296
10088: PUSH
10089: LD_INT 8
10091: LESS
10092: PUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 7
10100: GREATER
10101: OR
10102: IFFALSE 10053
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10104: LD_EXP 40
10108: PUSH
10109: LD_EXP 40
10113: PPUSH
10114: LD_EXP 51
10118: PPUSH
10119: CALL_OW 296
10123: PUSH
10124: LD_INT 20
10126: LESS
10127: AND
10128: PUSH
10129: LD_EXP 40
10133: PUSH
10134: LD_EXP 4
10138: IN
10139: AND
10140: IFFALSE 10165
// begin ComFree ( Lisa ) ;
10142: LD_EXP 40
10146: PPUSH
10147: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10151: LD_EXP 40
10155: PPUSH
10156: LD_EXP 51
10160: PPUSH
10161: CALL_OW 172
// end ; if Lynch then
10165: LD_EXP 47
10169: IFFALSE 10194
// begin ComFree ( Lynch ) ;
10171: LD_EXP 47
10175: PPUSH
10176: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10180: LD_EXP 47
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10194: LD_EXP 37
10198: PPUSH
10199: LD_EXP 51
10203: PPUSH
10204: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10208: LD_EXP 51
10212: PPUSH
10213: LD_EXP 37
10217: PPUSH
10218: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10222: LD_EXP 51
10226: PPUSH
10227: LD_STRING D6-Frank-1
10229: PPUSH
10230: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10234: LD_INT 69
10236: PPUSH
10237: LD_INT 20
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: LD_INT 20
10245: NEG
10246: PPUSH
10247: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10251: LD_INT 69
10253: PPUSH
10254: LD_INT 20
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10264: LD_INT 190
10266: PPUSH
10267: LD_INT 31
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_INT 20
10275: NEG
10276: PPUSH
10277: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10281: LD_INT 190
10283: PPUSH
10284: LD_INT 31
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10294: LD_INT 69
10296: PPUSH
10297: LD_INT 20
10299: PPUSH
10300: CALL_OW 84
// Wait ( 0 0$02 ) ;
10304: LD_INT 70
10306: PPUSH
10307: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10311: LD_EXP 37
10315: PPUSH
10316: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10320: LD_EXP 40
10324: PUSH
10325: LD_EXP 40
10329: PPUSH
10330: LD_EXP 51
10334: PPUSH
10335: CALL_OW 296
10339: PUSH
10340: LD_INT 20
10342: LESS
10343: AND
10344: PUSH
10345: LD_EXP 40
10349: PPUSH
10350: CALL_OW 302
10354: AND
10355: PUSH
10356: LD_EXP 40
10360: PUSH
10361: LD_EXP 4
10365: IN
10366: AND
10367: IFFALSE 10489
// begin ComFree ( Lisa ) ;
10369: LD_EXP 40
10373: PPUSH
10374: CALL_OW 139
// p := 0 ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// p := p + 1 ;
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PLUS
10406: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10407: LD_EXP 40
10411: PPUSH
10412: LD_EXP 51
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 7
10424: LESS
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 7
10433: GREATER
10434: OR
10435: IFFALSE 10386
// Say ( Lisa , D6-Lisa-1 ) ;
10437: LD_EXP 40
10441: PPUSH
10442: LD_STRING D6-Lisa-1
10444: PPUSH
10445: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10449: LD_EXP 40
10453: PPUSH
10454: LD_EXP 51
10458: PPUSH
10459: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10463: LD_EXP 51
10467: PPUSH
10468: LD_EXP 40
10472: PPUSH
10473: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10477: LD_EXP 51
10481: PPUSH
10482: LD_STRING D6-Frank-2
10484: PPUSH
10485: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10489: LD_EXP 47
10493: PUSH
10494: LD_EXP 47
10498: PPUSH
10499: LD_EXP 51
10503: PPUSH
10504: CALL_OW 296
10508: PUSH
10509: LD_INT 20
10511: LESS
10512: AND
10513: PUSH
10514: LD_EXP 47
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10717
// begin ComTurnUnit ( Lynch , JMM ) ;
10526: LD_EXP 47
10530: PPUSH
10531: LD_EXP 37
10535: PPUSH
10536: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10540: LD_EXP 51
10544: PPUSH
10545: LD_EXP 37
10549: PPUSH
10550: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10554: LD_EXP 47
10558: PPUSH
10559: LD_STRING D6-Sol1-2
10561: PPUSH
10562: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10566: LD_EXP 37
10570: PPUSH
10571: LD_STRING D6-JMM-2
10573: PPUSH
10574: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10578: LD_EXP 51
10582: PPUSH
10583: LD_STRING D6-Frank-3
10585: PPUSH
10586: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10590: LD_EXP 37
10594: PPUSH
10595: LD_STRING D6-JMM-3
10597: PPUSH
10598: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10602: LD_EXP 51
10606: PPUSH
10607: LD_STRING D6-Frank-4
10609: PPUSH
10610: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10614: LD_EXP 51
10618: PPUSH
10619: LD_STRING D6-Frank-4a
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10626: LD_EXP 37
10630: PPUSH
10631: LD_STRING D6-JMM-4
10633: PPUSH
10634: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10638: LD_EXP 51
10642: PPUSH
10643: LD_STRING D6-Frank-5
10645: PPUSH
10646: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10650: LD_EXP 40
10654: PUSH
10655: LD_EXP 40
10659: PPUSH
10660: CALL_OW 302
10664: AND
10665: PUSH
10666: LD_EXP 40
10670: PUSH
10671: LD_EXP 4
10675: IN
10676: AND
10677: IFFALSE 10691
// Say ( Lisa , D6-Lisa-5 ) ;
10679: LD_EXP 40
10683: PPUSH
10684: LD_STRING D6-Lisa-5
10686: PPUSH
10687: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10691: LD_EXP 51
10695: PPUSH
10696: LD_STRING D6-Frank-6
10698: PPUSH
10699: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10703: LD_EXP 37
10707: PPUSH
10708: LD_STRING D6-JMM-6
10710: PPUSH
10711: CALL_OW 88
// end else
10715: GO 10844
// begin ComTurnUnit ( Frank , JMM ) ;
10717: LD_EXP 51
10721: PPUSH
10722: LD_EXP 37
10726: PPUSH
10727: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10731: LD_EXP 51
10735: PPUSH
10736: LD_STRING D6-Frank-4
10738: PPUSH
10739: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10743: LD_EXP 51
10747: PPUSH
10748: LD_STRING D6-Frank-4a
10750: PPUSH
10751: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10755: LD_EXP 37
10759: PPUSH
10760: LD_STRING D6-JMM-4
10762: PPUSH
10763: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10767: LD_EXP 51
10771: PPUSH
10772: LD_STRING D6-Frank-5
10774: PPUSH
10775: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10779: LD_EXP 40
10783: PUSH
10784: LD_EXP 40
10788: PPUSH
10789: CALL_OW 302
10793: AND
10794: PUSH
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 4
10804: IN
10805: AND
10806: IFFALSE 10820
// Say ( Lisa , D6-Lisa-5 ) ;
10808: LD_EXP 40
10812: PPUSH
10813: LD_STRING D6-Lisa-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10820: LD_EXP 51
10824: PPUSH
10825: LD_STRING D6-Frank-6
10827: PPUSH
10828: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10832: LD_EXP 37
10836: PPUSH
10837: LD_STRING D6-JMM-6
10839: PPUSH
10840: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10844: LD_STRING Q1
10846: PPUSH
10847: CALL_OW 97
10851: PUSH
10852: LD_INT 1
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10871
10860: POP
// frank_send_to_scout := true ; 2 :
10861: LD_ADDR_EXP 15
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
10869: GO 10891
10871: LD_INT 2
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10890
10879: POP
// frank_send_to_scout := false ; end ;
10880: LD_ADDR_EXP 15
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
10888: GO 10891
10890: POP
// Video ( false ) ;
10891: LD_INT 0
10893: PPUSH
10894: CALL 78202 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10898: LD_EXP 37
10902: PUSH
10903: LD_EXP 40
10907: PUSH
10908: LD_EXP 47
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 139
// if frank_send_to_scout then
10922: LD_EXP 15
10926: IFFALSE 10980
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10928: LD_EXP 51
10932: PPUSH
10933: LD_INT 15
10935: PPUSH
10936: CALL_OW 113
// wait ( 0 0$01 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// until not See ( 1 , Frank ) ;
10947: LD_INT 1
10949: PPUSH
10950: LD_EXP 51
10954: PPUSH
10955: CALL_OW 292
10959: NOT
10960: IFFALSE 10928
// wait ( 0 0$02 ) ;
10962: LD_INT 70
10964: PPUSH
10965: CALL_OW 67
// RemoveUnit ( Frank ) ;
10969: LD_EXP 51
10973: PPUSH
10974: CALL_OW 64
// end else
10978: GO 10992
// SetSide ( Frank , 1 ) ;
10980: LD_EXP 51
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 235
// send_attack_on_cornel_base := true ;
10992: LD_ADDR_EXP 26
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11000: LD_INT 35
11002: PPUSH
11003: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11007: LD_ADDR_EXP 29
11011: PUSH
11012: LD_EXP 29
11016: PPUSH
11017: LD_STRING -
11019: PPUSH
11020: CALL 1077 0 2
11024: ST_TO_ADDR
// if debug then
11025: LD_EXP 1
11029: IFFALSE 11041
// debug_strings := time_to_prepare ;
11031: LD_ADDR_OWVAR 48
11035: PUSH
11036: LD_EXP 29
11040: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11041: LD_EXP 29
11045: PUSH
11046: LD_INT 0
11048: EQUAL
11049: IFFALSE 11000
// cornel_prepared := true ;
11051: LD_ADDR_EXP 11
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// end ;
11059: PPOPN 3
11061: END
// every 0 0$01 trigger cornel_prepared do
11062: LD_EXP 11
11066: IFFALSE 11374
11068: GO 11070
11070: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11071: LD_EXP 44
11075: PPUSH
11076: LD_STRING D3-Corn-1
11078: PPUSH
11079: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11083: LD_STRING MOutWait
11085: PPUSH
11086: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// until cornel_counter = 0 ;
11097: LD_EXP 10
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11090
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11107: LD_EXP 44
11111: PPUSH
11112: LD_STRING D3a-Corn-1
11114: PPUSH
11115: CALL_OW 94
// if IsOk ( Cornel ) then
11119: LD_EXP 44
11123: PPUSH
11124: CALL_OW 302
11128: IFFALSE 11142
// Say ( JMM , D3a-JMM-1 ) ;
11130: LD_EXP 37
11134: PPUSH
11135: LD_STRING D3a-JMM-1
11137: PPUSH
11138: CALL_OW 88
// end_mission_allowed := true ;
11142: LD_ADDR_EXP 21
11146: PUSH
11147: LD_INT 1
11149: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11150: LD_STRING M2
11152: PPUSH
11153: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11157: LD_INT 9
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 424
// Wait ( 0 0$05 ) ;
11167: LD_INT 175
11169: PPUSH
11170: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11174: LD_EXP 44
11178: PPUSH
11179: LD_STRING D3a-Corn-2
11181: PPUSH
11182: CALL_OW 94
// cornel_attack := true ;
11186: LD_ADDR_EXP 9
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11194: LD_INT 105
11196: PPUSH
11197: CALL_OW 67
// AddMoreTanks ( ) ;
11201: CALL 5402 0 0
// if frank_send_to_scout then
11205: LD_EXP 15
11209: IFFALSE 11374
// begin InitHc ;
11211: CALL_OW 19
// InitUc ;
11215: CALL_OW 18
// uc_side := 8 ;
11219: LD_ADDR_OWVAR 20
11223: PUSH
11224: LD_INT 8
11226: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_STRING Frank
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: LD_STRING 
11240: PPUSH
11241: CALL 40498 0 3
11245: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11246: LD_EXP 51
11250: PPUSH
11251: LD_INT 6
11253: PPUSH
11254: LD_INT 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 48
// ComCrawl ( Frank ) ;
11264: LD_EXP 51
11268: PPUSH
11269: CALL_OW 137
// repeat wait ( 10 ) ;
11273: LD_INT 10
11275: PPUSH
11276: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11280: LD_EXP 37
11284: PPUSH
11285: LD_EXP 51
11289: PPUSH
11290: CALL_OW 296
11294: PUSH
11295: LD_INT 9
11297: LESS
11298: PUSH
11299: LD_INT 9
11301: PPUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 70
11316: OR
11317: IFFALSE 11273
// if IsDead ( Frank ) then
11319: LD_EXP 51
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11332
// exit ;
11330: GO 11374
// CenterOnUnits ( Frank ) ;
11332: LD_EXP 51
11336: PPUSH
11337: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11341: LD_EXP 51
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11353: LD_EXP 51
11357: PPUSH
11358: LD_STRING D6a-Frank-1
11360: PPUSH
11361: CALL_OW 88
// ComWalk ( Frank ) ;
11365: LD_EXP 51
11369: PPUSH
11370: CALL_OW 138
// end ; end ;
11374: END
// every 0 0$01 trigger solar_builded do
11375: LD_EXP 14
11379: IFFALSE 11483
11381: GO 11383
11383: DISABLE
// begin Wait ( 0 0$02 ) ;
11384: LD_INT 70
11386: PPUSH
11387: CALL_OW 67
// DialogueOn ;
11391: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11395: LD_EXP 37
11399: PPUSH
11400: LD_STRING D2b-JMM-1
11402: PPUSH
11403: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11407: LD_EXP 48
11411: PUSH
11412: LD_EXP 48
11416: PPUSH
11417: CALL_OW 302
11421: AND
11422: IFFALSE 11472
// begin Say ( Walker , D2b-Sci1-1 ) ;
11424: LD_EXP 48
11428: PPUSH
11429: LD_STRING D2b-Sci1-1
11431: PPUSH
11432: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11436: LD_EXP 37
11440: PPUSH
11441: LD_STRING D2b-JMM-2
11443: PPUSH
11444: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11448: LD_EXP 48
11452: PPUSH
11453: LD_STRING D2b-Sci1-2
11455: PPUSH
11456: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11460: LD_EXP 37
11464: PPUSH
11465: LD_STRING D2b-JMM-3
11467: PPUSH
11468: CALL_OW 88
// end ; DialogueOff ;
11472: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11476: LD_STRING MOutSol
11478: PPUSH
11479: CALL_OW 337
// end ;
11483: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11484: LD_EXP 14
11488: PUSH
11489: LD_EXP 37
11493: PPUSH
11494: CALL_OW 302
11498: AND
11499: PUSH
11500: LD_EXP 37
11504: PPUSH
11505: CALL 911 0 1
11509: AND
11510: PUSH
11511: LD_EXP 16
11515: NOT
11516: AND
11517: IFFALSE 11588
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin jmm_in_veh := true ;
11525: LD_ADDR_EXP 16
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 0
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 12
11548: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11549: LD_INT 70
11551: PPUSH
11552: CALL_OW 67
// if i then
11556: LD_VAR 0 1
11560: IFFALSE 11576
// Say ( JMM , D2c-JMM-1 ) else
11562: LD_EXP 37
11566: PPUSH
11567: LD_STRING D2c-JMM-1
11569: PPUSH
11570: CALL_OW 88
11574: GO 11588
// Say ( JMM , D2c-JMM-1a ) ;
11576: LD_EXP 37
11580: PPUSH
11581: LD_STRING D2c-JMM-1a
11583: PPUSH
11584: CALL_OW 88
// end ;
11588: PPOPN 1
11590: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11591: LD_EXP 14
11595: PUSH
11596: LD_EXP 38
11600: PPUSH
11601: CALL_OW 302
11605: AND
11606: PUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL 911 0 1
11616: AND
11617: PUSH
11618: LD_EXP 17
11622: NOT
11623: AND
11624: IFFALSE 11656
11626: GO 11628
11628: DISABLE
// begin bobby_in_veh := true ;
11629: LD_ADDR_EXP 17
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11637: LD_INT 70
11639: PPUSH
11640: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11644: LD_EXP 38
11648: PPUSH
11649: LD_STRING D2c-Bobby-1
11651: PPUSH
11652: CALL_OW 88
11656: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11657: LD_EXP 14
11661: PUSH
11662: LD_EXP 40
11666: PPUSH
11667: CALL_OW 302
11671: AND
11672: PUSH
11673: LD_EXP 40
11677: PPUSH
11678: CALL 911 0 1
11682: AND
11683: PUSH
11684: LD_EXP 19
11688: NOT
11689: AND
11690: IFFALSE 11722
11692: GO 11694
11694: DISABLE
// begin lisa_in_veh := true ;
11695: LD_ADDR_EXP 19
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11703: LD_INT 70
11705: PPUSH
11706: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11710: LD_EXP 40
11714: PPUSH
11715: LD_STRING D2c-Lisa-1
11717: PPUSH
11718: CALL_OW 88
11722: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11723: LD_EXP 14
11727: PUSH
11728: LD_EXP 39
11732: PPUSH
11733: CALL_OW 302
11737: AND
11738: PUSH
11739: LD_EXP 39
11743: PPUSH
11744: CALL 911 0 1
11748: AND
11749: PUSH
11750: LD_EXP 18
11754: NOT
11755: AND
11756: IFFALSE 11827
11758: GO 11760
11760: DISABLE
11761: LD_INT 0
11763: PPUSH
// begin cyrus_in_veh := true ;
11764: LD_ADDR_EXP 18
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 0
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 12
11787: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11788: LD_INT 70
11790: PPUSH
11791: CALL_OW 67
// if i then
11795: LD_VAR 0 1
11799: IFFALSE 11815
// Say ( Cyrus , D2c-Cyrus-1 ) else
11801: LD_EXP 39
11805: PPUSH
11806: LD_STRING D2c-Cyrus-1
11808: PPUSH
11809: CALL_OW 88
11813: GO 11827
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11815: LD_EXP 39
11819: PPUSH
11820: LD_STRING D2c-Cyrus-1a
11822: PPUSH
11823: CALL_OW 88
// end ;
11827: PPOPN 1
11829: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11830: LD_EXP 44
11834: PPUSH
11835: LD_INT 16
11837: PPUSH
11838: CALL_OW 308
11842: IFFALSE 12123
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11850: LD_INT 3
11852: PPUSH
11853: LD_EXP 44
11857: PPUSH
11858: CALL_OW 471
// send_attack_on_cornel := true ;
11862: LD_ADDR_EXP 32
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if ru_vehicles then
11870: LD_EXP 56
11874: IFFALSE 11908
// for i in ru_vehicles do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_EXP 56
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11906
// ComAgressiveMove ( i , 215 , 69 ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: LD_INT 215
11896: PPUSH
11897: LD_INT 69
11899: PPUSH
11900: CALL_OW 114
11904: GO 11886
11906: POP
11907: POP
// if ru_patrol then
11908: LD_EXP 53
11912: IFFALSE 11946
// for i in ru_patrol do
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_EXP 53
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11944
// ComAgressiveMove ( i , 215 , 69 ) ;
11927: LD_VAR 0 1
11931: PPUSH
11932: LD_INT 215
11934: PPUSH
11935: LD_INT 69
11937: PPUSH
11938: CALL_OW 114
11942: GO 11924
11944: POP
11945: POP
// if frank_send_to_scout then
11946: LD_EXP 15
11950: IFFALSE 11964
// SayRadio ( Frank , D3b-Frank-1 ) ;
11952: LD_EXP 51
11956: PPUSH
11957: LD_STRING D3b-Frank-1
11959: PPUSH
11960: CALL_OW 94
// wait ( 0 0$03 ) ;
11964: LD_INT 105
11966: PPUSH
11967: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11971: LD_EXP 44
11975: PPUSH
11976: LD_STRING D4-Corn-1
11978: PPUSH
11979: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11983: LD_INT 35
11985: PPUSH
11986: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11990: LD_INT 22
11992: PUSH
11993: LD_INT 4
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: LD_INT 1000
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: LD_INT 6
12039: LESS
12040: IFFALSE 11983
// if Cornel then
12042: LD_EXP 44
12046: IFFALSE 12086
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12048: LD_EXP 44
12052: PPUSH
12053: LD_STRING D5-Corn-1
12055: PPUSH
12056: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12060: LD_EXP 44
12064: PPUSH
12065: LD_EXP 2
12069: PUSH
12070: LD_STRING Cornel
12072: STR
12073: PPUSH
12074: CALL_OW 38
// cornel_saved := true ;
12078: LD_ADDR_EXP 27
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12086: LD_INT 4
12088: PPUSH
12089: LD_INT 8
12091: PPUSH
12092: CALL_OW 343
// wait ( 0 0$01 ) ;
12096: LD_INT 35
12098: PPUSH
12099: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12103: LD_INT 3
12105: PPUSH
12106: LD_EXP 44
12110: PPUSH
12111: CALL_OW 472
// send_attack_on_cornel := false ;
12115: LD_ADDR_EXP 32
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// end ;
12123: PPOPN 1
12125: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12126: LD_INT 9
12128: PPUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 70
12143: PUSH
12144: LD_EXP 33
12148: OR
12149: IFFALSE 12370
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
// begin enable ;
12158: ENABLE
// if not jmm_on_west then
12159: LD_EXP 5
12163: NOT
12164: IFFALSE 12175
// begin YouLost ( 4 ) ;
12166: LD_STRING 4
12168: PPUSH
12169: CALL_OW 104
// exit ;
12173: GO 12370
// end ; if not game_end then
12175: LD_EXP 33
12179: NOT
12180: IFFALSE 12190
// game_end := true ;
12182: LD_ADDR_EXP 33
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12190: LD_ADDR_VAR 0 2
12194: PUSH
12195: LD_INT 9
12197: PPUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 70
12212: ST_TO_ADDR
// if not filter then
12213: LD_VAR 0 2
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 12370
// for i in filter do
12222: LD_ADDR_VAR 0 1
12226: PUSH
12227: LD_VAR 0 2
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12368
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 247
12254: PUSH
12255: LD_INT 2
12257: EQUAL
12258: AND
12259: IFFALSE 12331
// begin if i = JMM and save_group < 4 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_EXP 37
12270: EQUAL
12271: PUSH
12272: LD_EXP 23
12276: PUSH
12277: LD_INT 4
12279: LESS
12280: AND
12281: IFFALSE 12285
// continue ;
12283: GO 12232
// if GetNation ( i ) = nation_american then
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 248
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: IFFALSE 12308
// veh_on_meta := true ;
12300: LD_ADDR_EXP 28
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 311
12317: PPUSH
12318: CALL 12373 0 1
// RemoveUnit ( i ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12331: LD_VAR 0 1
12335: PPUSH
12336: CALL_OW 302
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 247
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: AND
12355: IFFALSE 12366
// Save ( i ) ;
12357: LD_VAR 0 1
12361: PPUSH
12362: CALL 12373 0 1
// end ;
12366: GO 12232
12368: POP
12369: POP
// end ;
12370: PPOPN 2
12372: END
// export function Save ( i ) ; begin
12373: LD_INT 0
12375: PPUSH
// if i = JMM and save_counter >= 4 then
12376: LD_VAR 0 1
12380: PUSH
12381: LD_EXP 37
12385: EQUAL
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_INT 4
12394: GREATEREQUAL
12395: AND
12396: IFFALSE 12532
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12398: LD_EXP 24
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 1
12434: GREATER
12435: AND
12436: IFFALSE 12493
// begin show_query := false ;
12438: LD_ADDR_EXP 24
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12446: LD_STRING Q2
12448: PPUSH
12449: CALL_OW 97
12453: PUSH
12454: LD_INT 1
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12473
12462: POP
// wait_for_them := true ; 2 :
12463: LD_ADDR_EXP 25
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
12471: GO 12493
12473: LD_INT 2
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12492
12481: POP
// wait_for_them := false ; end ;
12482: LD_ADDR_EXP 25
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
12490: GO 12493
12492: POP
// end ; save_counter := save_counter + 1 ;
12493: LD_ADDR_EXP 36
12497: PUSH
12498: LD_EXP 36
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_EXP 23
12516: PUSH
12517: LD_EXP 37
12521: ADD
12522: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12523: LD_EXP 37
12527: PPUSH
12528: CALL_OW 64
// end ; if i = Lisa then
12532: LD_VAR 0 1
12536: PUSH
12537: LD_EXP 40
12541: EQUAL
12542: IFFALSE 12583
// begin save_counter := save_counter + 1 ;
12544: LD_ADDR_EXP 36
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 1
12556: PLUS
12557: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12558: LD_ADDR_EXP 23
12562: PUSH
12563: LD_EXP 23
12567: PUSH
12568: LD_EXP 40
12572: ADD
12573: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12574: LD_EXP 40
12578: PPUSH
12579: CALL_OW 64
// end ; if i = Bobby then
12583: LD_VAR 0 1
12587: PUSH
12588: LD_EXP 38
12592: EQUAL
12593: IFFALSE 12634
// begin save_counter := save_counter + 1 ;
12595: LD_ADDR_EXP 36
12599: PUSH
12600: LD_EXP 36
12604: PUSH
12605: LD_INT 1
12607: PLUS
12608: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12609: LD_ADDR_EXP 23
12613: PUSH
12614: LD_EXP 23
12618: PUSH
12619: LD_EXP 38
12623: ADD
12624: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12625: LD_EXP 38
12629: PPUSH
12630: CALL_OW 64
// end ; if i = Cyrus then
12634: LD_VAR 0 1
12638: PUSH
12639: LD_EXP 39
12643: EQUAL
12644: IFFALSE 12685
// begin save_counter := save_counter + 1 ;
12646: LD_ADDR_EXP 36
12650: PUSH
12651: LD_EXP 36
12655: PUSH
12656: LD_INT 1
12658: PLUS
12659: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12660: LD_ADDR_EXP 23
12664: PUSH
12665: LD_EXP 23
12669: PUSH
12670: LD_EXP 39
12674: ADD
12675: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 64
// end ; if i = Khatam then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_EXP 41
12694: EQUAL
12695: IFFALSE 12736
// begin save_counter := save_counter + 1 ;
12697: LD_ADDR_EXP 36
12701: PUSH
12702: LD_EXP 36
12706: PUSH
12707: LD_INT 1
12709: PLUS
12710: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12711: LD_ADDR_EXP 23
12715: PUSH
12716: LD_EXP 23
12720: PUSH
12721: LD_EXP 41
12725: ADD
12726: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12727: LD_EXP 41
12731: PPUSH
12732: CALL_OW 64
// end ; if i = Frank then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 51
12745: EQUAL
12746: IFFALSE 12787
// begin save_counter := save_counter + 1 ;
12748: LD_ADDR_EXP 36
12752: PUSH
12753: LD_EXP 36
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12762: LD_ADDR_EXP 23
12766: PUSH
12767: LD_EXP 23
12771: PUSH
12772: LD_EXP 51
12776: ADD
12777: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12778: LD_EXP 51
12782: PPUSH
12783: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12787: LD_VAR 0 1
12791: PUSH
12792: LD_EXP 37
12796: NONEQUAL
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 302
12807: AND
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 247
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: AND
12823: PUSH
12824: LD_VAR 0 1
12828: PUSH
12829: LD_EXP 23
12833: IN
12834: NOT
12835: AND
12836: IFFALSE 12877
// begin save_counter := save_counter + 1 ;
12838: LD_ADDR_EXP 36
12842: PUSH
12843: LD_EXP 36
12847: PUSH
12848: LD_INT 1
12850: PLUS
12851: ST_TO_ADDR
// save_others := save_others ^ i ;
12852: LD_ADDR_EXP 22
12856: PUSH
12857: LD_EXP 22
12861: PUSH
12862: LD_VAR 0 1
12866: ADD
12867: ST_TO_ADDR
// RemoveUnit ( i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 64
// end ; end ;
12877: LD_VAR 0 2
12881: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12882: LD_EXP 24
12886: NOT
12887: PUSH
12888: LD_EXP 25
12892: NOT
12893: AND
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: PUSH
12924: LD_INT 0
12926: EQUAL
12927: OR
12928: IFFALSE 12937
12930: GO 12932
12932: DISABLE
// EndMission ;
12933: CALL 12938 0 0
12937: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// wait ( 0 0$01 ) ;
12945: LD_INT 35
12947: PPUSH
12948: CALL_OW 67
// if tick <= 12 12$00 then
12952: LD_OWVAR 1
12956: PUSH
12957: LD_INT 25200
12959: LESSEQUAL
12960: IFFALSE 12969
// SetAchievement ( ACH_ASPEED_3 ) ;
12962: LD_STRING ACH_ASPEED_3
12964: PPUSH
12965: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12969: LD_EXP 23
12973: PUSH
12974: LD_EXP 22
12978: ADD
12979: PPUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 72
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: IFFALSE 13014
// begin wait ( 3 ) ;
13000: LD_INT 3
13002: PPUSH
13003: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13007: LD_STRING ACH_NOSCI
13009: PPUSH
13010: CALL_OW 543
// end ; m1 := solar_builded ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_EXP 14
13023: ST_TO_ADDR
// m2 := veh_on_meta ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 28
13033: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: LD_EXP 34
13043: PUSH
13044: LD_INT 0
13046: EQUAL
13047: ST_TO_ADDR
// if solar_builded then
13048: LD_EXP 14
13052: IFFALSE 13066
// AddMedal ( Solar1 , 1 ) else
13054: LD_STRING Solar1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 101
13064: GO 13077
// AddMedal ( Solar1 , - 1 ) ;
13066: LD_STRING Solar1
13068: PPUSH
13069: LD_INT 1
13071: NEG
13072: PPUSH
13073: CALL_OW 101
// if veh_on_meta then
13077: LD_EXP 28
13081: IFFALSE 13095
// AddMedal ( Solar2 , 1 ) else
13083: LD_STRING Solar2
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 101
13093: GO 13125
// if solar_builded then
13095: LD_EXP 14
13099: IFFALSE 13114
// AddMedal ( Solar2 , - 1 ) else
13101: LD_STRING Solar2
13103: PPUSH
13104: LD_INT 1
13106: NEG
13107: PPUSH
13108: CALL_OW 101
13112: GO 13125
// AddMedal ( Solar2 , - 2 ) ;
13114: LD_STRING Solar2
13116: PPUSH
13117: LD_INT 2
13119: NEG
13120: PPUSH
13121: CALL_OW 101
// if lose_counter = 0 then
13125: LD_EXP 34
13129: PUSH
13130: LD_INT 0
13132: EQUAL
13133: IFFALSE 13147
// AddMedal ( No , 1 ) else
13135: LD_STRING No
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 101
13145: GO 13191
// if lose_counter > 0 and lose_counter < 5 then
13147: LD_EXP 34
13151: PUSH
13152: LD_INT 0
13154: GREATER
13155: PUSH
13156: LD_EXP 34
13160: PUSH
13161: LD_INT 5
13163: LESS
13164: AND
13165: IFFALSE 13180
// AddMedal ( No , - 1 ) else
13167: LD_STRING No
13169: PPUSH
13170: LD_INT 1
13172: NEG
13173: PPUSH
13174: CALL_OW 101
13178: GO 13191
// AddMedal ( UpTo4 , - 1 ) ;
13180: LD_STRING UpTo4
13182: PPUSH
13183: LD_INT 1
13185: NEG
13186: PPUSH
13187: CALL_OW 101
// GiveMedals ( MAIN ) ;
13191: LD_STRING MAIN
13193: PPUSH
13194: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13198: LD_OWVAR 67
13202: PUSH
13203: LD_INT 3
13205: GREATEREQUAL
13206: PUSH
13207: LD_VAR 0 3
13211: AND
13212: PUSH
13213: LD_VAR 0 4
13217: AND
13218: PUSH
13219: LD_VAR 0 5
13223: AND
13224: IFFALSE 13236
// SetAchievementEX ( ACH_AMER , 3 ) ;
13226: LD_STRING ACH_AMER
13228: PPUSH
13229: LD_INT 3
13231: PPUSH
13232: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13236: LD_EXP 52
13240: PPUSH
13241: CALL_OW 301
13245: IFFALSE 13301
// begin stop_talking := true ;
13247: LD_ADDR_OWVAR 56
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// for i in save_group union save_others do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_EXP 23
13264: PUSH
13265: LD_EXP 22
13269: UNION
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13291
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_INT 1500
13284: PPUSH
13285: CALL_OW 591
13289: GO 13271
13291: POP
13292: POP
// stop_talking := false ;
13293: LD_ADDR_OWVAR 56
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13301: LD_INT 22
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 23
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PPUSH
13330: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13334: LD_EXP 37
13338: PPUSH
13339: LD_EXP 2
13343: PUSH
13344: LD_STRING JMM
13346: STR
13347: PPUSH
13348: CALL_OW 38
// if Bobby in save_group then
13352: LD_EXP 38
13356: PUSH
13357: LD_EXP 23
13361: IN
13362: IFFALSE 13382
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13364: LD_EXP 38
13368: PPUSH
13369: LD_EXP 2
13373: PUSH
13374: LD_STRING Bobby
13376: STR
13377: PPUSH
13378: CALL_OW 38
// if Cyrus in save_group then
13382: LD_EXP 39
13386: PUSH
13387: LD_EXP 23
13391: IN
13392: IFFALSE 13412
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13394: LD_EXP 39
13398: PPUSH
13399: LD_EXP 2
13403: PUSH
13404: LD_STRING Cyrus
13406: STR
13407: PPUSH
13408: CALL_OW 38
// if Lisa in save_group then
13412: LD_EXP 40
13416: PUSH
13417: LD_EXP 23
13421: IN
13422: IFFALSE 13442
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13424: LD_EXP 40
13428: PPUSH
13429: LD_EXP 2
13433: PUSH
13434: LD_STRING Lisa
13436: STR
13437: PPUSH
13438: CALL_OW 38
// if Frank in save_group then
13442: LD_EXP 51
13446: PUSH
13447: LD_EXP 23
13451: IN
13452: IFFALSE 13479
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13454: LD_STRING enableBioCharacter(BIO_FRANK)
13456: PPUSH
13457: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13461: LD_EXP 51
13465: PPUSH
13466: LD_EXP 2
13470: PUSH
13471: LD_STRING Frank
13473: STR
13474: PPUSH
13475: CALL_OW 38
// end ; if Khatam in save_group then
13479: LD_EXP 41
13483: PUSH
13484: LD_EXP 23
13488: IN
13489: IFFALSE 13509
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13491: LD_EXP 41
13495: PPUSH
13496: LD_EXP 2
13500: PUSH
13501: LD_STRING Khatam
13503: STR
13504: PPUSH
13505: CALL_OW 38
// if save_others then
13509: LD_EXP 22
13513: IFFALSE 13527
// SaveCharacters ( save_others , 03_others ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING 03_others
13522: PPUSH
13523: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13527: LD_STRING enableBioCharacter(BIO_ANDY)
13529: PPUSH
13530: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13534: LD_EXP 45
13538: PUSH
13539: LD_EXP 45
13543: PPUSH
13544: CALL_OW 302
13548: AND
13549: PUSH
13550: LD_EXP 27
13554: AND
13555: IFFALSE 13567
// begin ResetFog ;
13557: CALL_OW 335
// DisplayEndingScene ;
13561: CALL 13589 0 0
// end else
13565: GO 13580
// DeleteCharacters ( mission_prefix & Cornel ) ;
13567: LD_EXP 2
13571: PUSH
13572: LD_STRING Cornel
13574: STR
13575: PPUSH
13576: CALL_OW 40
// YouWin ;
13580: CALL_OW 103
// end ;
13584: LD_VAR 0 1
13588: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13589: LD_INT 0
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// InGameOn ;
13597: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_INT 10
13612: NEG
13613: PPUSH
13614: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13618: LD_INT 208
13620: PPUSH
13621: LD_INT 62
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 3
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: LD_INT 21
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 21
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 69
13682: ST_TO_ADDR
// if filter then
13683: LD_VAR 0 3
13687: IFFALSE 13715
// for i in filter do
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_VAR 0 3
13698: PUSH
13699: FOR_IN
13700: IFFALSE 13713
// RemoveUnit ( i ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: CALL_OW 64
13711: GO 13699
13713: POP
13714: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 4
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: ST_TO_ADDR
// if filter then
13749: LD_VAR 0 3
13753: IFFALSE 13784
// for i in filter do
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 3
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13782
// SetLives ( i , 0 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 234
13780: GO 13765
13782: POP
13783: POP
// uc_side := 4 ;
13784: LD_ADDR_OWVAR 20
13788: PUSH
13789: LD_INT 4
13791: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_STRING Cornell
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: LD_STRING 
13805: PPUSH
13806: CALL 40498 0 3
13810: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13811: LD_VAR 0 4
13815: PPUSH
13816: LD_INT 208
13818: PPUSH
13819: LD_INT 62
13821: PPUSH
13822: LD_INT 0
13824: PPUSH
13825: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13829: LD_VAR 0 4
13833: PPUSH
13834: LD_INT 100
13836: PPUSH
13837: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13841: LD_INT 3
13843: PPUSH
13844: LD_VAR 0 4
13848: PPUSH
13849: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13853: LD_INT 4
13855: PPUSH
13856: LD_INT 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 80
// uc_side := 3 ;
13869: LD_ADDR_OWVAR 20
13873: PUSH
13874: LD_INT 3
13876: ST_TO_ADDR
// uc_nation := 3 ;
13877: LD_ADDR_OWVAR 21
13881: PUSH
13882: LD_INT 3
13884: ST_TO_ADDR
// InitHc ;
13885: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13889: LD_ADDR_VAR 0 5
13893: PUSH
13894: LD_STRING Mikhail
13896: PPUSH
13897: LD_INT 0
13899: PPUSH
13900: LD_STRING 
13902: PPUSH
13903: CALL 40498 0 3
13907: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: LD_INT 0
13916: PPUSH
13917: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13921: LD_ADDR_VAR 0 6
13925: PUSH
13926: LD_VAR 0 6
13930: PUSH
13931: CALL_OW 44
13935: ADD
13936: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13937: LD_ADDR_VAR 0 6
13941: PUSH
13942: LD_VAR 0 6
13946: PUSH
13947: CALL_OW 44
13951: ADD
13952: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13953: LD_INT 2
13955: PPUSH
13956: LD_INT 4
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: LD_VAR 0 6
13975: PUSH
13976: CALL_OW 44
13980: ADD
13981: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13982: LD_VAR 0 5
13986: PPUSH
13987: LD_INT 17
13989: PPUSH
13990: LD_INT 0
13992: PPUSH
13993: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13997: LD_VAR 0 5
14001: PPUSH
14002: LD_INT 210
14004: PPUSH
14005: LD_INT 63
14007: PPUSH
14008: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14012: LD_VAR 0 5
14016: PPUSH
14017: LD_INT 208
14019: PPUSH
14020: LD_INT 62
14022: PPUSH
14023: CALL_OW 178
// for i in fake_russians do
14027: LD_ADDR_VAR 0 2
14031: PUSH
14032: LD_VAR 0 6
14036: PUSH
14037: FOR_IN
14038: IFFALSE 14116
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14040: LD_VAR 0 2
14044: PPUSH
14045: LD_INT 17
14047: PPUSH
14048: LD_INT 0
14050: PPUSH
14051: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_INT 215
14062: PPUSH
14063: LD_INT 67
14065: PPUSH
14066: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 208
14077: PPUSH
14078: LD_INT 62
14080: PPUSH
14081: CALL_OW 178
// if GetClass ( i ) = 4 then
14085: LD_VAR 0 2
14089: PPUSH
14090: CALL_OW 257
14094: PUSH
14095: LD_INT 4
14097: EQUAL
14098: IFFALSE 14114
// ComHeal ( i , fake_cornel ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: LD_VAR 0 4
14109: PPUSH
14110: CALL_OW 128
// end ;
14114: GO 14037
14116: POP
14117: POP
// Wait ( 0 0$01 ) ;
14118: LD_INT 35
14120: PPUSH
14121: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14125: LD_INT 208
14127: PPUSH
14128: LD_INT 62
14130: PPUSH
14131: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14135: LD_INT 208
14137: PPUSH
14138: LD_INT 62
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_INT 10
14146: NEG
14147: PPUSH
14148: CALL_OW 330
// Wait ( 0 0$15 ) ;
14152: LD_INT 525
14154: PPUSH
14155: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14159: LD_INT 208
14161: PPUSH
14162: LD_INT 62
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 331
// ResetFog ;
14172: CALL_OW 335
// InGameOff ;
14176: CALL_OW 9
// end ;
14180: LD_VAR 0 1
14184: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14185: LD_INT 10
14187: PPUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 70
14202: PUSH
14203: LD_EXP 44
14207: PPUSH
14208: CALL_OW 302
14212: AND
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: PPUSH
14229: LD_EXP 44
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: LD_EXP 44
14243: PPUSH
14244: CALL_OW 296
14248: PUSH
14249: LD_INT 30
14251: LESS
14252: OR
14253: IFFALSE 14304
14255: GO 14257
14257: DISABLE
// begin enable ;
14258: ENABLE
// powell_warn := powell_warn + 1 ;
14259: LD_ADDR_EXP 35
14263: PUSH
14264: LD_EXP 35
14268: PUSH
14269: LD_INT 1
14271: PLUS
14272: ST_TO_ADDR
// if powell_warn = 3 then
14273: LD_EXP 35
14277: PUSH
14278: LD_INT 3
14280: EQUAL
14281: IFFALSE 14292
// begin YouLost ( 5 ) ;
14283: LD_STRING 5
14285: PPUSH
14286: CALL_OW 104
// exit ;
14290: GO 14304
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14292: LD_EXP 46
14296: PPUSH
14297: LD_STRING DWarn-Pow-1
14299: PPUSH
14300: CALL_OW 586
// end ; end_of_file
14304: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14305: LD_EXP 8
14309: IFFALSE 16146
14311: GO 14313
14313: DISABLE
14314: LD_INT 0
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14324: LD_EXP 44
14328: PUSH
14329: LD_EXP 45
14333: ADD
14334: PUSH
14335: LD_EXP 6
14339: ADD
14340: PPUSH
14341: LD_INT 250
14343: PPUSH
14344: LD_INT 120
14346: PPUSH
14347: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_EXP 6
14360: PPUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 72
14375: PUSH
14376: LD_EXP 45
14380: DIFF
14381: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_EXP 6
14391: PPUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 72
14406: PUSH
14407: LD_VAR 0 2
14411: DIFF
14412: ST_TO_ADDR
// if not has_eng then
14413: LD_VAR 0 2
14417: NOT
14418: IFFALSE 14501
// begin uc_side := 4 ;
14420: LD_ADDR_OWVAR 20
14424: PUSH
14425: LD_INT 4
14427: ST_TO_ADDR
// uc_nation := 1 ;
14428: LD_ADDR_OWVAR 21
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// bc_type := b_depot ;
14436: LD_ADDR_OWVAR 42
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// bc_level := 2 ;
14444: LD_ADDR_OWVAR 43
14448: PUSH
14449: LD_INT 2
14451: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_INT 264
14459: PPUSH
14460: LD_INT 120
14462: PPUSH
14463: LD_INT 4
14465: PPUSH
14466: CALL_OW 47
14470: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14471: LD_INT 264
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: LD_INT 10
14482: NEG
14483: PPUSH
14484: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14488: LD_INT 264
14490: PPUSH
14491: LD_INT 120
14493: PPUSH
14494: LD_INT 4
14496: PPUSH
14497: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14501: LD_INT 35
14503: PPUSH
14504: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14508: LD_EXP 44
14512: PPUSH
14513: LD_INT 10
14515: PPUSH
14516: CALL_OW 308
14520: PUSH
14521: LD_EXP 44
14525: PPUSH
14526: CALL_OW 310
14530: PPUSH
14531: LD_INT 10
14533: PPUSH
14534: CALL_OW 308
14538: OR
14539: IFFALSE 14501
// if has_eng and not dep then
14541: LD_VAR 0 2
14545: PUSH
14546: LD_VAR 0 4
14550: NOT
14551: AND
14552: IFFALSE 14702
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14554: LD_VAR 0 2
14558: PPUSH
14559: LD_INT 0
14561: PPUSH
14562: LD_INT 264
14564: PPUSH
14565: LD_INT 120
14567: PPUSH
14568: LD_INT 4
14570: PPUSH
14571: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14575: LD_INT 35
14577: PPUSH
14578: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14582: LD_INT 22
14584: PUSH
14585: LD_INT 4
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 30
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: IFFALSE 14575
// ComMoveXY ( filter , 264 , 120 ) ;
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 264
14619: PPUSH
14620: LD_INT 120
14622: PPUSH
14623: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14627: LD_INT 35
14629: PPUSH
14630: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14634: LD_INT 22
14636: PUSH
14637: LD_INT 4
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 0
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 57
14659: PUSH
14660: EMPTY
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: IFFALSE 14627
// ComMoveXY ( filter , 247 , 113 ) ;
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 247
14685: PPUSH
14686: LD_INT 113
14688: PPUSH
14689: CALL_OW 111
// Wait ( 0 0$2 ) ;
14693: LD_INT 70
14695: PPUSH
14696: CALL_OW 67
// end else
14700: GO 14714
// begin SetSide ( dep , 4 ) ;
14702: LD_VAR 0 4
14706: PPUSH
14707: LD_INT 4
14709: PPUSH
14710: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: ST_TO_ADDR
// if not has_eng then
14752: LD_VAR 0 2
14756: NOT
14757: IFFALSE 14844
// for i = 1 to 2 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 2
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14842
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_VAR 0 4
14788: PPUSH
14789: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14809: LD_VAR 0 3
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 3
14839: ST_TO_ADDR
// end ;
14840: GO 14772
14842: POP
14843: POP
// if IsInUnit ( Cornel ) then
14844: LD_EXP 44
14848: PPUSH
14849: CALL_OW 310
14853: IFFALSE 14931
// begin cargo := IsInUnit ( Cornel ) ;
14855: LD_ADDR_VAR 0 7
14859: PUSH
14860: LD_EXP 44
14864: PPUSH
14865: CALL_OW 310
14869: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14870: LD_VAR 0 7
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 289
14882: IFFALSE 14893
// ComUnload ( cargo ) ;
14884: LD_VAR 0 7
14888: PPUSH
14889: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14893: LD_EXP 44
14897: PPUSH
14898: LD_INT 235
14900: PPUSH
14901: LD_INT 122
14903: PPUSH
14904: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14908: LD_EXP 44
14912: PPUSH
14913: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14917: LD_EXP 44
14921: PPUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: CALL_OW 180
// end ; if Bierezov then
14931: LD_EXP 45
14935: IFFALSE 14983
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14937: LD_EXP 45
14941: PPUSH
14942: LD_INT 260
14944: PPUSH
14945: LD_INT 120
14947: PPUSH
14948: CALL_OW 111
// if dep then
14952: LD_VAR 0 4
14956: IFFALSE 14974
// AddComEnterUnit ( Bierezov , dep ) else
14958: LD_EXP 45
14962: PPUSH
14963: LD_VAR 0 4
14967: PPUSH
14968: CALL_OW 180
14972: GO 14983
// AddComHold ( Bierezov ) ;
14974: LD_EXP 45
14978: PPUSH
14979: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14983: LD_INT 525
14985: PPUSH
14986: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14990: LD_ADDR_VAR 0 2
14994: PUSH
14995: LD_INT 22
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 69
15023: PUSH
15024: LD_EXP 45
15028: DIFF
15029: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_INT 10
15044: PPUSH
15045: CALL_OW 435
15049: ST_TO_ADDR
// if crates then
15050: LD_VAR 0 6
15054: IFFALSE 15083
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_VAR 0 6
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: LD_VAR 0 6
15074: PUSH
15075: LD_INT 2
15077: ARRAY
15078: PPUSH
15079: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15083: LD_VAR 0 4
15087: PPUSH
15088: CALL_OW 274
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 275
15100: PUSH
15101: LD_INT 40
15103: GREATEREQUAL
15104: IFFALSE 15030
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15106: LD_ADDR_VAR 0 5
15110: PUSH
15111: LD_INT 4
15113: PUSH
15114: LD_INT 256
15116: PUSH
15117: LD_INT 111
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 31
15131: PUSH
15132: LD_INT 243
15134: PUSH
15135: LD_INT 112
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PUSH
15147: LD_INT 31
15149: PUSH
15150: LD_INT 254
15152: PUSH
15153: LD_INT 114
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// for i in blist do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_VAR 0 5
15179: PUSH
15180: FOR_IN
15181: IFFALSE 15230
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15183: LD_VAR 0 2
15187: PPUSH
15188: LD_VAR 0 1
15192: PUSH
15193: LD_INT 1
15195: ARRAY
15196: PPUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 2
15204: ARRAY
15205: PPUSH
15206: LD_VAR 0 1
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_VAR 0 1
15219: PUSH
15220: LD_INT 4
15222: ARRAY
15223: PPUSH
15224: CALL_OW 205
15228: GO 15180
15230: POP
15231: POP
// repeat wait ( 0 0$01 ) ;
15232: LD_INT 35
15234: PPUSH
15235: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15239: LD_INT 22
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: LD_INT 57
15264: PUSH
15265: EMPTY
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL_OW 69
15281: IFFALSE 15232
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 22
15290: PUSH
15291: LD_INT 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 30
15300: PUSH
15301: LD_INT 4
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 183
// if has_eng > 1 then
15337: LD_VAR 0 2
15341: PUSH
15342: LD_INT 1
15344: GREATER
15345: IFFALSE 15487
// for i = has_eng downto 2 do
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: DOUBLE
15353: LD_VAR 0 2
15357: INC
15358: ST_TO_ADDR
15359: LD_INT 2
15361: PUSH
15362: FOR_DOWNTO
15363: IFFALSE 15485
// begin if IsInUnit ( has_eng [ i ] ) then
15365: LD_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: ARRAY
15375: PPUSH
15376: CALL_OW 310
15380: IFFALSE 15397
// ComExitBuilding ( has_eng [ i ] ) ;
15382: LD_VAR 0 2
15386: PUSH
15387: LD_VAR 0 1
15391: ARRAY
15392: PPUSH
15393: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15397: LD_VAR 0 2
15401: PUSH
15402: LD_VAR 0 1
15406: ARRAY
15407: PPUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 4
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 1
15454: ARRAY
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: LD_VAR 0 2
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: CALL_OW 3
15482: ST_TO_ADDR
// end ;
15483: GO 15362
15485: POP
15486: POP
// repeat wait ( 0 0$01 ) ;
15487: LD_INT 35
15489: PPUSH
15490: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15494: LD_INT 22
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: LD_INT 31
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 57
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_INT 1
15539: GREATER
15540: IFFALSE 15487
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15542: LD_ADDR_VAR 0 8
15546: PUSH
15547: LD_EXP 6
15551: PPUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 72
15566: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: DOUBLE
15573: LD_INT 1
15575: DEC
15576: ST_TO_ADDR
15577: LD_INT 22
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 30
15589: PUSH
15590: LD_INT 31
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 3
15599: PUSH
15600: LD_INT 57
15602: PUSH
15603: EMPTY
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15705
// begin if not sol [ i ] then
15623: LD_VAR 0 8
15627: PUSH
15628: LD_VAR 0 1
15632: ARRAY
15633: NOT
15634: IFFALSE 15638
// break ;
15636: GO 15705
// ComExitBuilding ( sol [ i ] ) ;
15638: LD_VAR 0 8
15642: PUSH
15643: LD_VAR 0 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15653: LD_VAR 0 8
15657: PUSH
15658: LD_VAR 0 1
15662: ARRAY
15663: PPUSH
15664: LD_INT 22
15666: PUSH
15667: LD_INT 4
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 31
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: PUSH
15693: LD_VAR 0 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 180
// end ;
15703: GO 15620
15705: POP
15706: POP
// if sol > 3 then
15707: LD_VAR 0 8
15711: PUSH
15712: LD_INT 3
15714: GREATER
15715: IFFALSE 15832
// begin ComExitBuilding ( sol [ 3 ] ) ;
15717: LD_VAR 0 8
15721: PUSH
15722: LD_INT 3
15724: ARRAY
15725: PPUSH
15726: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15730: LD_VAR 0 8
15734: PUSH
15735: LD_INT 3
15737: ARRAY
15738: PPUSH
15739: LD_INT 246
15741: PPUSH
15742: LD_INT 94
15744: PPUSH
15745: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15749: LD_VAR 0 8
15753: PUSH
15754: LD_INT 3
15756: ARRAY
15757: PPUSH
15758: LD_INT 175
15760: PPUSH
15761: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15765: LD_VAR 0 8
15769: PUSH
15770: LD_INT 3
15772: ARRAY
15773: PPUSH
15774: LD_INT 224
15776: PPUSH
15777: LD_INT 90
15779: PPUSH
15780: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15784: LD_VAR 0 8
15788: PUSH
15789: LD_INT 3
15791: ARRAY
15792: PPUSH
15793: LD_INT 245
15795: PPUSH
15796: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15800: LD_VAR 0 8
15804: PUSH
15805: LD_INT 3
15807: ARRAY
15808: PPUSH
15809: LD_INT 223
15811: PPUSH
15812: LD_INT 110
15814: PPUSH
15815: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 3
15826: ARRAY
15827: PPUSH
15828: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15832: LD_VAR 0 2
15836: PPUSH
15837: LD_VAR 0 4
15841: PPUSH
15842: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15846: LD_INT 22
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 4
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: CALL_OW 313
15883: PUSH
15884: LD_INT 6
15886: LESS
15887: IFFALSE 15951
// begin if IsInUnit ( Cornel ) then
15889: LD_EXP 44
15893: PPUSH
15894: CALL_OW 310
15898: IFFALSE 15909
// ComExitBuilding ( Cornel ) ;
15900: LD_EXP 44
15904: PPUSH
15905: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15909: LD_EXP 44
15913: PPUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 4
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 30
15926: PUSH
15927: LD_INT 4
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PUSH
15943: LD_INT 1
15945: ARRAY
15946: PPUSH
15947: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15951: LD_INT 35
15953: PPUSH
15954: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15958: LD_ADDR_VAR 0 3
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 21
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 24
15988: PUSH
15989: LD_INT 1000
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if filter and has_eng then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_VAR 0 2
16019: AND
16020: IFFALSE 16086
// begin for i in has_eng do
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16082
// begin if IsInUnit ( i ) then
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 310
16044: IFFALSE 16055
// ComExitBuilding ( i ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 122
// Wait ( 3 ) ;
16055: LD_INT 3
16057: PPUSH
16058: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16062: LD_VAR 0 1
16066: PPUSH
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 1
16074: ARRAY
16075: PPUSH
16076: CALL_OW 130
// end ;
16080: GO 16032
16082: POP
16083: POP
// end else
16084: GO 16140
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16086: LD_VAR 0 2
16090: PUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_INT 56
16098: PUSH
16099: EMPTY
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: AND
16107: IFFALSE 16140
// for i in has_eng do
16109: LD_ADDR_VAR 0 1
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16138
// ComEnterUnit ( i , dep ) ;
16122: LD_VAR 0 1
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: CALL_OW 120
16136: GO 16119
16138: POP
16139: POP
// until cornel_prepared ;
16140: LD_EXP 11
16144: IFFALSE 15951
// end ;
16146: PPOPN 8
16148: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16149: LD_EXP 11
16153: IFFALSE 16688
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
16162: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 4
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 4
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16201: LD_EXP 6
16205: PPUSH
16206: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16210: LD_EXP 45
16214: PUSH
16215: LD_EXP 45
16219: PPUSH
16220: CALL_OW 310
16224: AND
16225: IFFALSE 16236
// ComExitBuilding ( Bierezov ) ;
16227: LD_EXP 45
16231: PPUSH
16232: CALL_OW 122
// Wait ( 0 0$03 ) ;
16236: LD_INT 105
16238: PPUSH
16239: CALL_OW 67
// for i in cornel_units do
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_EXP 6
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16330
// begin if GetClass ( i ) in [ 2 , 3 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 257
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: IN
16276: IFFALSE 16313
// begin ComEnterUnit ( i , arm ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16292: LD_VAR 0 1
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 183
// AddComExitBuilding ( i ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_INT 257
16320: PPUSH
16321: LD_INT 121
16323: PPUSH
16324: CALL_OW 171
// end ;
16328: GO 16253
16330: POP
16331: POP
// Wait ( 1 1$00 ) ;
16332: LD_INT 2100
16334: PPUSH
16335: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_EXP 44
16348: PUSH
16349: LD_EXP 45
16353: ADD
16354: PUSH
16355: LD_EXP 6
16359: ADD
16360: PUSH
16361: LD_EXP 6
16365: PPUSH
16366: LD_INT 21
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: DIFF
16381: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 248
16389: PPUSH
16390: LD_INT 85
16392: PPUSH
16393: CALL_OW 111
// AddComHold ( filter ) ;
16397: LD_VAR 0 3
16401: PPUSH
16402: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16406: LD_INT 35
16408: PPUSH
16409: CALL_OW 67
// until cornel_attack ;
16413: LD_EXP 9
16417: IFFALSE 16406
// ComAgressiveMove ( filter , 209 , 63 ) ;
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 209
16426: PPUSH
16427: LD_INT 63
16429: PPUSH
16430: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16434: LD_EXP 44
16438: PPUSH
16439: LD_INT 208
16441: PPUSH
16442: LD_INT 62
16444: PPUSH
16445: CALL_OW 114
// AddComHold ( Cornel ) ;
16449: LD_EXP 44
16453: PPUSH
16454: CALL_OW 200
// if Bierezov then
16458: LD_EXP 45
16462: IFFALSE 16552
// begin filter := filter diff Bierezov ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_EXP 45
16478: DIFF
16479: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16480: LD_EXP 45
16484: PPUSH
16485: LD_INT 6
16487: PPUSH
16488: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16492: LD_EXP 45
16496: PPUSH
16497: LD_INT 235
16499: PPUSH
16500: LD_INT 60
16502: PPUSH
16503: CALL_OW 111
// AddComHold ( Bierezov ) ;
16507: LD_EXP 45
16511: PPUSH
16512: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16516: LD_EXP 45
16520: PPUSH
16521: LD_INT 350
16523: PPUSH
16524: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16528: LD_EXP 45
16532: PPUSH
16533: LD_INT 198
16535: PPUSH
16536: LD_INT 28
16538: PPUSH
16539: CALL_OW 171
// AddComHold ( Bierezov ) ;
16543: LD_EXP 45
16547: PPUSH
16548: CALL_OW 200
// end ; filter := filter diff Cornel ;
16552: LD_ADDR_VAR 0 3
16556: PUSH
16557: LD_VAR 0 3
16561: PUSH
16562: LD_EXP 44
16566: DIFF
16567: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16568: LD_INT 70
16570: PPUSH
16571: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16575: LD_EXP 44
16579: PPUSH
16580: LD_INT 208
16582: PPUSH
16583: LD_INT 62
16585: PPUSH
16586: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16590: LD_EXP 44
16594: PPUSH
16595: LD_INT 16
16597: PPUSH
16598: CALL_OW 308
16602: NOT
16603: IFFALSE 16568
// wait ( 0 0$2 ) ;
16605: LD_INT 70
16607: PPUSH
16608: CALL_OW 67
// ComMoveXY ( filter [ 1 ] , 195 , 57 ) ;
16612: LD_VAR 0 3
16616: PUSH
16617: LD_INT 1
16619: ARRAY
16620: PPUSH
16621: LD_INT 195
16623: PPUSH
16624: LD_INT 57
16626: PPUSH
16627: CALL_OW 111
// ComMoveXY ( filter [ 2 ] , 217 , 53 ) ;
16631: LD_VAR 0 3
16635: PUSH
16636: LD_INT 2
16638: ARRAY
16639: PPUSH
16640: LD_INT 217
16642: PPUSH
16643: LD_INT 53
16645: PPUSH
16646: CALL_OW 111
// ComMoveXY ( filter [ 3 ] , 199 , 48 ) ;
16650: LD_VAR 0 3
16654: PUSH
16655: LD_INT 3
16657: ARRAY
16658: PPUSH
16659: LD_INT 199
16661: PPUSH
16662: LD_INT 48
16664: PPUSH
16665: CALL_OW 111
// ComMoveXY ( filter [ 4 ] , 179 , 48 ) ;
16669: LD_VAR 0 3
16673: PUSH
16674: LD_INT 4
16676: ARRAY
16677: PPUSH
16678: LD_INT 179
16680: PPUSH
16681: LD_INT 48
16683: PPUSH
16684: CALL_OW 111
// end ; end_of_file
16688: PPOPN 3
16690: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16691: LD_EXP 53
16695: PUSH
16696: LD_EXP 31
16700: NOT
16701: AND
16702: PUSH
16703: LD_EXP 32
16707: NOT
16708: AND
16709: IFFALSE 17159
16711: GO 16713
16713: DISABLE
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// begin enable ;
16720: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16721: LD_ADDR_VAR 0 4
16725: PUSH
16726: LD_INT 81
16728: PUSH
16729: LD_INT 3
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PPUSH
16736: CALL_OW 69
16740: ST_TO_ADDR
// for i = 1 to ru_patrol do
16741: LD_ADDR_VAR 0 2
16745: PUSH
16746: DOUBLE
16747: LD_INT 1
16749: DEC
16750: ST_TO_ADDR
16751: LD_EXP 53
16755: PUSH
16756: FOR_TO
16757: IFFALSE 17157
// begin un := ru_patrol [ i ] ;
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_EXP 53
16768: PUSH
16769: LD_VAR 0 2
16773: ARRAY
16774: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16775: LD_VAR 0 1
16779: PPUSH
16780: LD_INT 13
16782: PPUSH
16783: CALL_OW 308
16787: IFFALSE 16892
// begin if not ru_alert then
16789: LD_EXP 60
16793: NOT
16794: IFFALSE 16804
// ru_alert := true ;
16796: LD_ADDR_EXP 60
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// if not See ( 1 , un ) then
16804: LD_INT 1
16806: PPUSH
16807: LD_VAR 0 1
16811: PPUSH
16812: CALL_OW 292
16816: NOT
16817: IFFALSE 16831
// SetLives ( un , 1000 ) ;
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_INT 1000
16826: PPUSH
16827: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16831: LD_ADDR_EXP 53
16835: PUSH
16836: LD_EXP 53
16840: PUSH
16841: LD_VAR 0 1
16845: DIFF
16846: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_INT 22
16854: PUSH
16855: LD_INT 3
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 30
16864: PUSH
16865: LD_INT 4
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 69
16880: PPUSH
16881: CALL 1007 0 1
16885: PPUSH
16886: CALL_OW 120
// continue ;
16890: GO 16756
// end ; if IsOk ( un ) and not HasTask ( un ) then
16892: LD_VAR 0 1
16896: PPUSH
16897: CALL_OW 302
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 314
16911: NOT
16912: AND
16913: IFFALSE 17006
// begin for j = 1 to ru_firepoints_south [ i ] do
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: DOUBLE
16921: LD_INT 1
16923: DEC
16924: ST_TO_ADDR
16925: LD_EXP 59
16929: PUSH
16930: LD_VAR 0 2
16934: ARRAY
16935: PUSH
16936: FOR_TO
16937: IFFALSE 17004
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: LD_EXP 59
16948: PUSH
16949: LD_VAR 0 2
16953: ARRAY
16954: PUSH
16955: LD_VAR 0 3
16959: ARRAY
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PPUSH
16965: LD_EXP 59
16969: PUSH
16970: LD_VAR 0 2
16974: ARRAY
16975: PUSH
16976: LD_VAR 0 3
16980: ARRAY
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: PPUSH
16986: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16990: LD_VAR 0 1
16994: PPUSH
16995: LD_INT 70
16997: PPUSH
16998: CALL_OW 202
// end ;
17002: GO 16936
17004: POP
17005: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17006: LD_VAR 0 1
17010: PPUSH
17011: CALL_OW 256
17015: PUSH
17016: LD_INT 700
17018: LESS
17019: PUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: LD_INT 13
17027: PPUSH
17028: CALL_OW 308
17032: NOT
17033: AND
17034: IFFALSE 17086
// begin ComMoveToArea ( un , retreatArea ) ;
17036: LD_VAR 0 1
17040: PPUSH
17041: LD_INT 13
17043: PPUSH
17044: CALL_OW 113
// if not ru_alert_xy then
17048: LD_EXP 61
17052: NOT
17053: IFFALSE 17084
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17055: LD_ADDR_EXP 61
17059: PUSH
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 250
17069: PUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 251
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: ST_TO_ADDR
// end else
17084: GO 17155
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_VAR 0 4
17095: PPUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 74
17105: PPUSH
17106: CALL_OW 296
17110: PUSH
17111: LD_INT 9
17113: LESS
17114: PUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 256
17124: PUSH
17125: LD_INT 500
17127: GREATER
17128: AND
17129: IFFALSE 17155
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17131: LD_VAR 0 1
17135: PPUSH
17136: LD_VAR 0 4
17140: PPUSH
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 74
17150: PPUSH
17151: CALL_OW 115
// end ;
17155: GO 16756
17157: POP
17158: POP
// end ;
17159: PPOPN 4
17161: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17162: LD_EXP 60
17166: PUSH
17167: LD_EXP 61
17171: AND
17172: PUSH
17173: LD_EXP 31
17177: NOT
17178: AND
17179: PUSH
17180: LD_EXP 32
17184: NOT
17185: AND
17186: IFFALSE 17396
17188: GO 17190
17190: DISABLE
17191: LD_INT 0
17193: PPUSH
17194: PPUSH
// begin enable ;
17195: ENABLE
// if not ru_vehicles then
17196: LD_EXP 56
17200: NOT
17201: IFFALSE 17205
// exit ;
17203: GO 17396
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_INT 3
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: ST_TO_ADDR
// if ru_vehicles then
17225: LD_EXP 56
17229: IFFALSE 17396
// begin for i in ru_vehicles do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_EXP 56
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17394
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 302
17253: PUSH
17254: LD_VAR 0 1
17258: PPUSH
17259: LD_VAR 0 2
17263: PPUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 74
17273: PPUSH
17274: CALL_OW 296
17278: PUSH
17279: LD_INT 9
17281: LESS
17282: AND
17283: IFFALSE 17309
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17285: LD_VAR 0 1
17289: PPUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: LD_VAR 0 1
17299: PPUSH
17300: CALL_OW 74
17304: PPUSH
17305: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 314
17318: NOT
17319: PUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: CALL_OW 302
17329: AND
17330: PUSH
17331: LD_VAR 0 1
17335: PPUSH
17336: LD_EXP 61
17340: PUSH
17341: LD_INT 1
17343: ARRAY
17344: PPUSH
17345: LD_EXP 61
17349: PUSH
17350: LD_INT 2
17352: ARRAY
17353: PPUSH
17354: CALL_OW 297
17358: PUSH
17359: LD_INT 10
17361: GREATER
17362: AND
17363: IFFALSE 17392
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17365: LD_VAR 0 1
17369: PPUSH
17370: LD_EXP 61
17374: PUSH
17375: LD_INT 1
17377: ARRAY
17378: PPUSH
17379: LD_EXP 61
17383: PUSH
17384: LD_INT 2
17386: ARRAY
17387: PPUSH
17388: CALL_OW 114
// end ;
17392: GO 17241
17394: POP
17395: POP
// end ; end ;
17396: PPOPN 2
17398: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17399: LD_EXP 61
17403: PUSH
17404: LD_EXP 60
17408: AND
17409: PUSH
17410: LD_INT 3
17412: PPUSH
17413: CALL_OW 463
17417: NOT
17418: AND
17419: PUSH
17420: LD_EXP 31
17424: NOT
17425: AND
17426: PUSH
17427: LD_EXP 32
17431: NOT
17432: AND
17433: IFFALSE 17528
17435: GO 17437
17437: DISABLE
17438: LD_INT 0
17440: PPUSH
// begin enable ;
17441: ENABLE
// ru_alert_xy := false ;
17442: LD_ADDR_EXP 61
17446: PUSH
17447: LD_INT 0
17449: ST_TO_ADDR
// ru_alert := false ;
17450: LD_ADDR_EXP 60
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
// if ru_vehicles then
17458: LD_EXP 56
17462: IFFALSE 17528
// for i in ru_vehicles do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_EXP 56
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17526
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17477: LD_VAR 0 1
17481: PPUSH
17482: CALL_OW 302
17486: PUSH
17487: LD_VAR 0 1
17491: PPUSH
17492: LD_INT 89
17494: PPUSH
17495: LD_INT 36
17497: PPUSH
17498: CALL_OW 297
17502: PUSH
17503: LD_INT 10
17505: GREATER
17506: AND
17507: IFFALSE 17524
// ComMoveXY ( i , 89 , 36 ) ;
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_INT 89
17516: PPUSH
17517: LD_INT 36
17519: PPUSH
17520: CALL_OW 111
17524: GO 17474
17526: POP
17527: POP
// end ;
17528: PPOPN 1
17530: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17531: LD_EXP 55
17535: PUSH
17536: LD_EXP 31
17540: NOT
17541: AND
17542: PUSH
17543: LD_EXP 32
17547: NOT
17548: AND
17549: IFFALSE 17833
17551: GO 17553
17553: DISABLE
17554: LD_INT 0
17556: PPUSH
17557: PPUSH
17558: PPUSH
// begin enable ;
17559: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_INT 81
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PPUSH
17575: CALL_OW 69
17579: ST_TO_ADDR
// for i = 1 to ru_forest do
17580: LD_ADDR_VAR 0 1
17584: PUSH
17585: DOUBLE
17586: LD_INT 1
17588: DEC
17589: ST_TO_ADDR
17590: LD_EXP 55
17594: PUSH
17595: FOR_TO
17596: IFFALSE 17831
// begin un := ru_forest [ i ] ;
17598: LD_ADDR_VAR 0 2
17602: PUSH
17603: LD_EXP 55
17607: PUSH
17608: LD_VAR 0 1
17612: ARRAY
17613: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17614: LD_VAR 0 2
17618: PPUSH
17619: LD_INT 13
17621: PPUSH
17622: CALL_OW 308
17626: IFFALSE 17716
// begin if not See ( 1 , un ) then
17628: LD_INT 1
17630: PPUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: CALL_OW 292
17640: NOT
17641: IFFALSE 17655
// SetLives ( un , 1000 ) ;
17643: LD_VAR 0 2
17647: PPUSH
17648: LD_INT 1000
17650: PPUSH
17651: CALL_OW 234
// ru_forest := ru_forest diff un ;
17655: LD_ADDR_EXP 55
17659: PUSH
17660: LD_EXP 55
17664: PUSH
17665: LD_VAR 0 2
17669: DIFF
17670: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17671: LD_VAR 0 2
17675: PPUSH
17676: LD_INT 22
17678: PUSH
17679: LD_INT 3
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 30
17688: PUSH
17689: LD_INT 4
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: PPUSH
17705: CALL 1007 0 1
17709: PPUSH
17710: CALL_OW 120
// continue ;
17714: GO 17595
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17716: LD_VAR 0 2
17720: PPUSH
17721: CALL_OW 256
17725: PUSH
17726: LD_INT 700
17728: LESS
17729: PUSH
17730: LD_VAR 0 2
17734: PPUSH
17735: LD_INT 13
17737: PPUSH
17738: CALL_OW 308
17742: NOT
17743: AND
17744: IFFALSE 17760
// ComMoveToArea ( un , retreatArea ) else
17746: LD_VAR 0 2
17750: PPUSH
17751: LD_INT 13
17753: PPUSH
17754: CALL_OW 113
17758: GO 17829
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17760: LD_VAR 0 2
17764: PPUSH
17765: LD_VAR 0 3
17769: PPUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: CALL_OW 74
17779: PPUSH
17780: CALL_OW 296
17784: PUSH
17785: LD_INT 9
17787: LESS
17788: PUSH
17789: LD_VAR 0 2
17793: PPUSH
17794: CALL_OW 256
17798: PUSH
17799: LD_INT 500
17801: GREATER
17802: AND
17803: IFFALSE 17829
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17805: LD_VAR 0 2
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: LD_VAR 0 2
17819: PPUSH
17820: CALL_OW 74
17824: PPUSH
17825: CALL_OW 115
// end ;
17829: GO 17595
17831: POP
17832: POP
// end ;
17833: PPOPN 3
17835: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
17836: LD_EXP 32
17840: NOT
17841: PUSH
17842: LD_EXP 44
17846: PPUSH
17847: CALL_OW 301
17851: OR
17852: IFFALSE 18013
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
17860: PPUSH
// begin enable ;
17861: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17862: LD_ADDR_VAR 0 2
17866: PUSH
17867: LD_INT 22
17869: PUSH
17870: LD_INT 3
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 3
17879: PUSH
17880: LD_INT 95
17882: PUSH
17883: LD_INT 18
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 21
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 3
17906: PUSH
17907: LD_INT 24
17909: PUSH
17910: LD_INT 990
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: PPUSH
17927: CALL_OW 69
17931: ST_TO_ADDR
// if filter then
17932: LD_VAR 0 2
17936: IFFALSE 18013
// for i in filter do
17938: LD_ADDR_VAR 0 1
17942: PUSH
17943: LD_VAR 0 2
17947: PUSH
17948: FOR_IN
17949: IFFALSE 18011
// if GetY ( i ) > 70 then
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 251
17960: PUSH
17961: LD_INT 70
17963: GREATER
17964: IFFALSE 17970
// continue else
17966: GO 17948
17968: GO 18009
// begin ru_alert := true ;
17970: LD_ADDR_EXP 60
17974: PUSH
17975: LD_INT 1
17977: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17978: LD_ADDR_EXP 61
17982: PUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 250
17992: PUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 251
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: ST_TO_ADDR
// break ;
18007: GO 18011
// end ;
18009: GO 17948
18011: POP
18012: POP
// end ;
18013: PPOPN 2
18015: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
18016: LD_EXP 31
18020: IFFALSE 18169
18022: GO 18024
18024: DISABLE
18025: LD_INT 0
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
18031: LD_ADDR_VAR 0 4
18035: PUSH
18036: LD_EXP 56
18040: PUSH
18041: LD_EXP 55
18045: ADD
18046: PUSH
18047: LD_EXP 53
18051: ADD
18052: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
18053: LD_ADDR_VAR 0 3
18057: PUSH
18058: LD_INT 3
18060: PPUSH
18061: LD_INT 81
18063: PUSH
18064: LD_INT 3
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 70
18075: ST_TO_ADDR
// if filter and enemy then
18076: LD_VAR 0 4
18080: PUSH
18081: LD_VAR 0 3
18085: AND
18086: IFFALSE 18169
// repeat wait ( 0 0$01 ) ;
18088: LD_INT 35
18090: PPUSH
18091: CALL_OW 67
// for i in filter do
18095: LD_ADDR_VAR 0 1
18099: PUSH
18100: LD_VAR 0 4
18104: PUSH
18105: FOR_IN
18106: IFFALSE 18134
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_VAR 0 3
18117: PPUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 74
18127: PPUSH
18128: CALL_OW 115
// end ;
18132: GO 18105
18134: POP
18135: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18136: LD_INT 3
18138: PPUSH
18139: LD_INT 81
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 70
18153: PUSH
18154: LD_INT 0
18156: EQUAL
18157: PUSH
18158: LD_VAR 0 4
18162: PUSH
18163: LD_INT 0
18165: EQUAL
18166: OR
18167: IFFALSE 18088
// end ;
18169: PPOPN 4
18171: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18172: LD_EXP 26
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_INT 4
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 30
18189: PUSH
18190: LD_INT 4
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 3
18199: PUSH
18200: LD_INT 57
18202: PUSH
18203: EMPTY
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 69
18219: AND
18220: IFFALSE 18269
18222: GO 18224
18224: DISABLE
18225: LD_INT 0
18227: PPUSH
// begin if not ru_cornel_attack then
18228: LD_EXP 58
18232: NOT
18233: IFFALSE 18237
// exit ;
18235: GO 18269
// for i in ru_cornel_attack do
18237: LD_ADDR_VAR 0 1
18241: PUSH
18242: LD_EXP 58
18246: PUSH
18247: FOR_IN
18248: IFFALSE 18267
// ComAgressiveMove ( i , 258 , 119 ) ;
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_INT 258
18257: PPUSH
18258: LD_INT 119
18260: PPUSH
18261: CALL_OW 114
18265: GO 18247
18267: POP
18268: POP
// end ; end_of_file
18269: PPOPN 1
18271: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18272: LD_EXP 5
18276: PUSH
18277: LD_EXP 9
18281: NOT
18282: AND
18283: PUSH
18284: LD_EXP 20
18288: AND
18289: IFFALSE 18401
18291: GO 18293
18293: DISABLE
18294: LD_INT 0
18296: PPUSH
// begin enable ;
18297: ENABLE
// crates_counter := crates_counter - 50 ;
18298: LD_ADDR_EXP 20
18302: PUSH
18303: LD_EXP 20
18307: PUSH
18308: LD_INT 50
18310: MINUS
18311: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18312: LD_INT 8
18314: PPUSH
18315: LD_INT 2
18317: PPUSH
18318: LD_INT 5
18320: PPUSH
18321: CALL_OW 12
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18333: LD_INT 1785
18335: PPUSH
18336: LD_INT 2345
18338: PPUSH
18339: CALL_OW 12
18343: PPUSH
18344: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: LD_INT 1
18355: PPUSH
18356: LD_OWVAR 67
18360: PUSH
18361: LD_INT 2
18363: PLUS
18364: PPUSH
18365: CALL_OW 12
18369: ST_TO_ADDR
// if r < 3 then
18370: LD_VAR 0 1
18374: PUSH
18375: LD_INT 3
18377: LESS
18378: IFFALSE 18401
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18380: LD_INT 4
18382: PPUSH
18383: LD_INT 1
18385: PPUSH
18386: LD_INT 5
18388: PPUSH
18389: CALL_OW 12
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: CALL_OW 55
// end ;
18401: PPOPN 1
18403: END
// every 0 0$01 trigger cornel_active do
18404: LD_EXP 8
18408: IFFALSE 18497
18410: GO 18412
18412: DISABLE
// begin Wait ( 0 0$03 ) ;
18413: LD_INT 105
18415: PPUSH
18416: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18420: LD_INT 2
18422: PPUSH
18423: LD_INT 5
18425: PPUSH
18426: CALL_OW 12
18430: PPUSH
18431: LD_INT 10
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 55
// Wait ( 0 0$13 ) ;
18441: LD_INT 455
18443: PPUSH
18444: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18448: LD_INT 2
18450: PPUSH
18451: LD_INT 5
18453: PPUSH
18454: CALL_OW 12
18458: PPUSH
18459: LD_INT 10
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: CALL_OW 55
// Wait ( 0 0$16 ) ;
18469: LD_INT 560
18471: PPUSH
18472: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18476: LD_INT 2
18478: PPUSH
18479: LD_INT 5
18481: PPUSH
18482: CALL_OW 12
18486: PPUSH
18487: LD_INT 10
18489: PPUSH
18490: LD_INT 1
18492: PPUSH
18493: CALL_OW 55
// end ; end_of_file
18497: END
// every 0 0$01 trigger cornel_prepared do
18498: LD_EXP 11
18502: IFFALSE 18561
18504: GO 18506
18506: DISABLE
// begin enable ;
18507: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18508: LD_ADDR_OWVAR 47
18512: PUSH
18513: LD_STRING #Am03-1
18515: PUSH
18516: LD_EXP 10
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18525: LD_ADDR_EXP 10
18529: PUSH
18530: LD_EXP 10
18534: PPUSH
18535: LD_STRING -
18537: PPUSH
18538: CALL 1077 0 2
18542: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18543: LD_EXP 10
18547: PUSH
18548: LD_INT 0
18550: EQUAL
18551: IFFALSE 18561
// begin Display_Strings := [ ] ;
18553: LD_ADDR_OWVAR 47
18557: PUSH
18558: EMPTY
18559: ST_TO_ADDR
// disable ;
18560: DISABLE
// end ; end ;
18561: END
// every 0 0$01 trigger debug and debug_strings do
18562: LD_EXP 1
18566: PUSH
18567: LD_OWVAR 48
18571: AND
18572: IFFALSE 18588
18574: GO 18576
18576: DISABLE
// begin enable ;
18577: ENABLE
// Display_Strings := debug_strings ;
18578: LD_ADDR_OWVAR 47
18582: PUSH
18583: LD_OWVAR 48
18587: ST_TO_ADDR
// end ; end_of_file
18588: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: LD_VAR 0 2
18598: PPUSH
18599: CALL 35272 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 255
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: PUSH
18617: LD_EXP 14
18621: NOT
18622: AND
18623: IFFALSE 18633
// solar_builded := true ;
18625: LD_ADDR_EXP 14
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18633: LD_VAR 0 1
18637: PPUSH
18638: CALL_OW 255
18642: PUSH
18643: LD_INT 1
18645: EQUAL
18646: PUSH
18647: LD_EXP 29
18651: AND
18652: IFFALSE 18689
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18654: LD_ADDR_EXP 29
18658: PUSH
18659: LD_EXP 29
18663: PUSH
18664: LD_INT 1750
18666: PUSH
18667: LD_INT 1400
18669: PUSH
18670: LD_INT 1225
18672: PUSH
18673: LD_INT 1050
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: LD_OWVAR 67
18686: ARRAY
18687: PLUS
18688: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 255
18698: PUSH
18699: LD_INT 3
18701: EQUAL
18702: IFFALSE 18720
// ru_vehicles := ru_vehicles ^ veh ;
18704: LD_ADDR_EXP 56
18708: PUSH
18709: LD_EXP 56
18713: PUSH
18714: LD_VAR 0 1
18718: ADD
18719: ST_TO_ADDR
// end ;
18720: PPOPN 2
18722: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL 35214 0 1
// if un in ru_patrol then
18732: LD_VAR 0 1
18736: PUSH
18737: LD_EXP 53
18741: IN
18742: IFFALSE 18760
// ru_patrol := ru_patrol diff un ;
18744: LD_ADDR_EXP 53
18748: PUSH
18749: LD_EXP 53
18753: PUSH
18754: LD_VAR 0 1
18758: DIFF
18759: ST_TO_ADDR
// if un in ru_forest then
18760: LD_VAR 0 1
18764: PUSH
18765: LD_EXP 55
18769: IN
18770: IFFALSE 18788
// ru_forest := ru_forest diff un ;
18772: LD_ADDR_EXP 55
18776: PUSH
18777: LD_EXP 55
18781: PUSH
18782: LD_VAR 0 1
18786: DIFF
18787: ST_TO_ADDR
// if un in ru_vehicles then
18788: LD_VAR 0 1
18792: PUSH
18793: LD_EXP 56
18797: IN
18798: IFFALSE 18904
// begin ru_vehicles := ru_vehicles diff un ;
18800: LD_ADDR_EXP 56
18804: PUSH
18805: LD_EXP 56
18809: PUSH
18810: LD_VAR 0 1
18814: DIFF
18815: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18816: LD_ADDR_EXP 57
18820: PUSH
18821: LD_EXP 57
18825: PUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 265
18835: PUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 262
18845: PUSH
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 263
18855: PUSH
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL_OW 264
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: ADD
18872: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18873: LD_ADDR_EXP 13
18877: PUSH
18878: LD_EXP 13
18882: PUSH
18883: LD_INT 1
18885: PLUS
18886: ST_TO_ADDR
// if ach_counter = 10 then
18887: LD_EXP 13
18891: PUSH
18892: LD_INT 10
18894: EQUAL
18895: IFFALSE 18904
// SetAchievement ( ACH_FAUST ) ;
18897: LD_STRING ACH_FAUST
18899: PPUSH
18900: CALL_OW 543
// end ; if un = Pokryshkin then
18904: LD_VAR 0 1
18908: PUSH
18909: LD_EXP 52
18913: EQUAL
18914: IFFALSE 18923
// SetAchievement ( ACH_POKR ) ;
18916: LD_STRING ACH_POKR
18918: PPUSH
18919: CALL_OW 543
// if un = JMM then
18923: LD_VAR 0 1
18927: PUSH
18928: LD_EXP 37
18932: EQUAL
18933: IFFALSE 18942
// YouLost ( 0 ) ;
18935: LD_STRING 0
18937: PPUSH
18938: CALL_OW 104
// if un = us_dep_west then
18942: LD_VAR 0 1
18946: PUSH
18947: LD_INT 1
18949: EQUAL
18950: IFFALSE 18959
// YouLost ( 2 ) ;
18952: LD_STRING 2
18954: PPUSH
18955: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18959: LD_VAR 0 1
18963: PPUSH
18964: CALL_OW 255
18968: PUSH
18969: LD_INT 8
18971: EQUAL
18972: PUSH
18973: LD_EXP 5
18977: NOT
18978: AND
18979: IFFALSE 18988
// YouLost ( 4 ) ;
18981: LD_STRING 4
18983: PPUSH
18984: CALL_OW 104
// if un in jmm_units then
18988: LD_VAR 0 1
18992: PUSH
18993: LD_EXP 4
18997: IN
18998: IFFALSE 19014
// lose_counter := lose_counter + 1 ;
19000: LD_ADDR_EXP 34
19004: PUSH
19005: LD_EXP 34
19009: PUSH
19010: LD_INT 1
19012: PLUS
19013: ST_TO_ADDR
// end ;
19014: PPOPN 1
19016: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
// begin if GetSide ( driver ) = 3 then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 255
19030: PUSH
19031: LD_INT 3
19033: EQUAL
19034: IFFALSE 19112
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
19036: LD_ADDR_VAR 0 6
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_INT 3
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 30
19053: PUSH
19054: LD_INT 3
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: PPUSH
19070: CALL 1007 0 1
19074: ST_TO_ADDR
// if place then
19075: LD_VAR 0 6
19079: IFFALSE 19097
// ComEnterUnit ( driver , place ) else
19081: LD_VAR 0 1
19085: PPUSH
19086: LD_VAR 0 6
19090: PPUSH
19091: CALL_OW 120
19095: GO 19112
// ComMoveXY ( driver , 70 , 22 ) ;
19097: LD_VAR 0 1
19101: PPUSH
19102: LD_INT 70
19104: PPUSH
19105: LD_INT 22
19107: PPUSH
19108: CALL_OW 111
// end ; end ;
19112: PPOPN 6
19114: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19115: LD_VAR 0 1
19119: PUSH
19120: LD_INT 1
19122: EQUAL
19123: PUSH
19124: LD_VAR 0 2
19128: PUSH
19129: LD_INT 4
19131: EQUAL
19132: PUSH
19133: LD_VAR 0 2
19137: PUSH
19138: LD_INT 8
19140: EQUAL
19141: PUSH
19142: LD_EXP 5
19146: NOT
19147: AND
19148: OR
19149: AND
19150: IFFALSE 19159
// YouLost ( 5 ) ;
19152: LD_STRING 5
19154: PPUSH
19155: CALL_OW 104
// end ;
19159: PPOPN 2
19161: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19162: LD_EXP 36
19166: PUSH
19167: LD_INT 22
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: PUSH
19196: LD_INT 22
19198: PUSH
19199: LD_INT 8
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 69
19224: ADD
19225: PLUS
19226: PUSH
19227: LD_INT 5
19229: LESS
19230: IFFALSE 19242
19232: GO 19234
19234: DISABLE
// YouLost ( 1 ) ;
19235: LD_STRING 1
19237: PPUSH
19238: CALL_OW 104
19242: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 255
19250: PUSH
19251: LD_INT 3
19253: EQUAL
19254: IFFALSE 19266
19256: GO 19258
19258: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19259: LD_STRING 3
19261: PPUSH
19262: CALL_OW 104
19266: END
// export globalGameSaveCounter ; every 0 0$1 do
19267: GO 19269
19269: DISABLE
// begin enable ;
19270: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19271: LD_STRING updateTimer(
19273: PUSH
19274: LD_OWVAR 1
19278: STR
19279: PUSH
19280: LD_STRING );
19282: STR
19283: PPUSH
19284: CALL_OW 559
// end ;
19288: END
// every 0 0$1 do
19289: GO 19291
19291: DISABLE
// begin globalGameSaveCounter := 0 ;
19292: LD_ADDR_EXP 62
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19300: LD_STRING setGameSaveCounter(0)
19302: PPUSH
19303: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19307: LD_STRING initStreamRollete();
19309: PPUSH
19310: CALL_OW 559
// InitStreamMode ;
19314: CALL 20657 0 0
// DefineStreamItems ( false ) ;
19318: LD_INT 0
19320: PPUSH
19321: CALL 21121 0 1
// end ;
19325: END
// export function SOS_MapStart ( ) ; begin
19326: LD_INT 0
19328: PPUSH
// if streamModeActive then
19329: LD_EXP 63
19333: IFFALSE 19342
// DefineStreamItems ( true ) ;
19335: LD_INT 1
19337: PPUSH
19338: CALL 21121 0 1
// UpdateLuaVariables ( ) ;
19342: CALL 19359 0 0
// UpdateFactoryWaypoints ( ) ;
19346: CALL 34123 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19350: CALL 34375 0 0
// end ;
19354: LD_VAR 0 1
19358: RET
// function UpdateLuaVariables ( ) ; begin
19359: LD_INT 0
19361: PPUSH
// if globalGameSaveCounter then
19362: LD_EXP 62
19366: IFFALSE 19400
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19368: LD_ADDR_EXP 62
19372: PUSH
19373: LD_EXP 62
19377: PPUSH
19378: CALL 79591 0 1
19382: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19383: LD_STRING setGameSaveCounter(
19385: PUSH
19386: LD_EXP 62
19390: STR
19391: PUSH
19392: LD_STRING )
19394: STR
19395: PPUSH
19396: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19400: LD_STRING setGameDifficulty(
19402: PUSH
19403: LD_OWVAR 67
19407: STR
19408: PUSH
19409: LD_STRING )
19411: STR
19412: PPUSH
19413: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19417: LD_STRING displayDifficulty(
19419: PUSH
19420: LD_OWVAR 67
19424: STR
19425: PUSH
19426: LD_STRING )
19428: STR
19429: PPUSH
19430: CALL_OW 559
// end ;
19434: LD_VAR 0 1
19438: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19439: LD_INT 0
19441: PPUSH
// if p2 = stream_mode then
19442: LD_VAR 0 2
19446: PUSH
19447: LD_INT 100
19449: EQUAL
19450: IFFALSE 20453
// begin if not StreamModeActive then
19452: LD_EXP 63
19456: NOT
19457: IFFALSE 19467
// StreamModeActive := true ;
19459: LD_ADDR_EXP 63
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 0 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 0
19474: EQUAL
19475: IFFALSE 19481
// InitStreamMode ;
19477: CALL 20657 0 0
// if p3 = 1 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 1
19488: EQUAL
19489: IFFALSE 19499
// sRocket := true ;
19491: LD_ADDR_EXP 68
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 2 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 2
19506: EQUAL
19507: IFFALSE 19517
// sSpeed := true ;
19509: LD_ADDR_EXP 67
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 3 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 3
19524: EQUAL
19525: IFFALSE 19535
// sEngine := true ;
19527: LD_ADDR_EXP 69
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 4 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 4
19542: EQUAL
19543: IFFALSE 19553
// sSpec := true ;
19545: LD_ADDR_EXP 66
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 5 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 5
19560: EQUAL
19561: IFFALSE 19571
// sLevel := true ;
19563: LD_ADDR_EXP 70
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 6 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 6
19578: EQUAL
19579: IFFALSE 19589
// sArmoury := true ;
19581: LD_ADDR_EXP 71
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 7 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 7
19596: EQUAL
19597: IFFALSE 19607
// sRadar := true ;
19599: LD_ADDR_EXP 72
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 8 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 8
19614: EQUAL
19615: IFFALSE 19625
// sBunker := true ;
19617: LD_ADDR_EXP 73
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 9 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 9
19632: EQUAL
19633: IFFALSE 19643
// sHack := true ;
19635: LD_ADDR_EXP 74
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 10 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 10
19650: EQUAL
19651: IFFALSE 19661
// sFire := true ;
19653: LD_ADDR_EXP 75
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 11 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 11
19668: EQUAL
19669: IFFALSE 19679
// sRefresh := true ;
19671: LD_ADDR_EXP 76
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 12 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 12
19686: EQUAL
19687: IFFALSE 19697
// sExp := true ;
19689: LD_ADDR_EXP 77
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 13 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 13
19704: EQUAL
19705: IFFALSE 19715
// sDepot := true ;
19707: LD_ADDR_EXP 78
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 14 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 14
19722: EQUAL
19723: IFFALSE 19733
// sFlag := true ;
19725: LD_ADDR_EXP 79
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 15 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 15
19740: EQUAL
19741: IFFALSE 19751
// sKamikadze := true ;
19743: LD_ADDR_EXP 87
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 16 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 16
19758: EQUAL
19759: IFFALSE 19769
// sTroll := true ;
19761: LD_ADDR_EXP 88
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 17 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 17
19776: EQUAL
19777: IFFALSE 19787
// sSlow := true ;
19779: LD_ADDR_EXP 89
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 18 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 18
19794: EQUAL
19795: IFFALSE 19805
// sLack := true ;
19797: LD_ADDR_EXP 90
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 19 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 19
19812: EQUAL
19813: IFFALSE 19823
// sTank := true ;
19815: LD_ADDR_EXP 92
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 20 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 20
19830: EQUAL
19831: IFFALSE 19841
// sRemote := true ;
19833: LD_ADDR_EXP 93
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 21 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 21
19848: EQUAL
19849: IFFALSE 19859
// sPowell := true ;
19851: LD_ADDR_EXP 94
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 22 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 22
19866: EQUAL
19867: IFFALSE 19877
// sTeleport := true ;
19869: LD_ADDR_EXP 97
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 23 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 23
19884: EQUAL
19885: IFFALSE 19895
// sOilTower := true ;
19887: LD_ADDR_EXP 99
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 24 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 24
19902: EQUAL
19903: IFFALSE 19913
// sShovel := true ;
19905: LD_ADDR_EXP 100
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 25 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 25
19920: EQUAL
19921: IFFALSE 19931
// sSheik := true ;
19923: LD_ADDR_EXP 101
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// if p3 = 26 then
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 26
19938: EQUAL
19939: IFFALSE 19949
// sEarthquake := true ;
19941: LD_ADDR_EXP 103
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// if p3 = 27 then
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 27
19956: EQUAL
19957: IFFALSE 19967
// sAI := true ;
19959: LD_ADDR_EXP 104
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// if p3 = 28 then
19967: LD_VAR 0 3
19971: PUSH
19972: LD_INT 28
19974: EQUAL
19975: IFFALSE 19985
// sCargo := true ;
19977: LD_ADDR_EXP 107
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// if p3 = 29 then
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 29
19992: EQUAL
19993: IFFALSE 20003
// sDLaser := true ;
19995: LD_ADDR_EXP 108
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// if p3 = 30 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 30
20010: EQUAL
20011: IFFALSE 20021
// sExchange := true ;
20013: LD_ADDR_EXP 109
20017: PUSH
20018: LD_INT 1
20020: ST_TO_ADDR
// if p3 = 31 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 31
20028: EQUAL
20029: IFFALSE 20039
// sFac := true ;
20031: LD_ADDR_EXP 110
20035: PUSH
20036: LD_INT 1
20038: ST_TO_ADDR
// if p3 = 32 then
20039: LD_VAR 0 3
20043: PUSH
20044: LD_INT 32
20046: EQUAL
20047: IFFALSE 20057
// sPower := true ;
20049: LD_ADDR_EXP 111
20053: PUSH
20054: LD_INT 1
20056: ST_TO_ADDR
// if p3 = 33 then
20057: LD_VAR 0 3
20061: PUSH
20062: LD_INT 33
20064: EQUAL
20065: IFFALSE 20075
// sRandom := true ;
20067: LD_ADDR_EXP 112
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// if p3 = 34 then
20075: LD_VAR 0 3
20079: PUSH
20080: LD_INT 34
20082: EQUAL
20083: IFFALSE 20093
// sShield := true ;
20085: LD_ADDR_EXP 113
20089: PUSH
20090: LD_INT 1
20092: ST_TO_ADDR
// if p3 = 35 then
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 35
20100: EQUAL
20101: IFFALSE 20111
// sTime := true ;
20103: LD_ADDR_EXP 114
20107: PUSH
20108: LD_INT 1
20110: ST_TO_ADDR
// if p3 = 36 then
20111: LD_VAR 0 3
20115: PUSH
20116: LD_INT 36
20118: EQUAL
20119: IFFALSE 20129
// sTools := true ;
20121: LD_ADDR_EXP 115
20125: PUSH
20126: LD_INT 1
20128: ST_TO_ADDR
// if p3 = 101 then
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 101
20136: EQUAL
20137: IFFALSE 20147
// sSold := true ;
20139: LD_ADDR_EXP 80
20143: PUSH
20144: LD_INT 1
20146: ST_TO_ADDR
// if p3 = 102 then
20147: LD_VAR 0 3
20151: PUSH
20152: LD_INT 102
20154: EQUAL
20155: IFFALSE 20165
// sDiff := true ;
20157: LD_ADDR_EXP 81
20161: PUSH
20162: LD_INT 1
20164: ST_TO_ADDR
// if p3 = 103 then
20165: LD_VAR 0 3
20169: PUSH
20170: LD_INT 103
20172: EQUAL
20173: IFFALSE 20183
// sFog := true ;
20175: LD_ADDR_EXP 84
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// if p3 = 104 then
20183: LD_VAR 0 3
20187: PUSH
20188: LD_INT 104
20190: EQUAL
20191: IFFALSE 20201
// sReset := true ;
20193: LD_ADDR_EXP 85
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// if p3 = 105 then
20201: LD_VAR 0 3
20205: PUSH
20206: LD_INT 105
20208: EQUAL
20209: IFFALSE 20219
// sSun := true ;
20211: LD_ADDR_EXP 86
20215: PUSH
20216: LD_INT 1
20218: ST_TO_ADDR
// if p3 = 106 then
20219: LD_VAR 0 3
20223: PUSH
20224: LD_INT 106
20226: EQUAL
20227: IFFALSE 20237
// sTiger := true ;
20229: LD_ADDR_EXP 82
20233: PUSH
20234: LD_INT 1
20236: ST_TO_ADDR
// if p3 = 107 then
20237: LD_VAR 0 3
20241: PUSH
20242: LD_INT 107
20244: EQUAL
20245: IFFALSE 20255
// sBomb := true ;
20247: LD_ADDR_EXP 83
20251: PUSH
20252: LD_INT 1
20254: ST_TO_ADDR
// if p3 = 108 then
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 108
20262: EQUAL
20263: IFFALSE 20273
// sWound := true ;
20265: LD_ADDR_EXP 91
20269: PUSH
20270: LD_INT 1
20272: ST_TO_ADDR
// if p3 = 109 then
20273: LD_VAR 0 3
20277: PUSH
20278: LD_INT 109
20280: EQUAL
20281: IFFALSE 20291
// sBetray := true ;
20283: LD_ADDR_EXP 95
20287: PUSH
20288: LD_INT 1
20290: ST_TO_ADDR
// if p3 = 110 then
20291: LD_VAR 0 3
20295: PUSH
20296: LD_INT 110
20298: EQUAL
20299: IFFALSE 20309
// sContamin := true ;
20301: LD_ADDR_EXP 96
20305: PUSH
20306: LD_INT 1
20308: ST_TO_ADDR
// if p3 = 111 then
20309: LD_VAR 0 3
20313: PUSH
20314: LD_INT 111
20316: EQUAL
20317: IFFALSE 20327
// sOil := true ;
20319: LD_ADDR_EXP 98
20323: PUSH
20324: LD_INT 1
20326: ST_TO_ADDR
// if p3 = 112 then
20327: LD_VAR 0 3
20331: PUSH
20332: LD_INT 112
20334: EQUAL
20335: IFFALSE 20345
// sStu := true ;
20337: LD_ADDR_EXP 102
20341: PUSH
20342: LD_INT 1
20344: ST_TO_ADDR
// if p3 = 113 then
20345: LD_VAR 0 3
20349: PUSH
20350: LD_INT 113
20352: EQUAL
20353: IFFALSE 20363
// sBazooka := true ;
20355: LD_ADDR_EXP 105
20359: PUSH
20360: LD_INT 1
20362: ST_TO_ADDR
// if p3 = 114 then
20363: LD_VAR 0 3
20367: PUSH
20368: LD_INT 114
20370: EQUAL
20371: IFFALSE 20381
// sMortar := true ;
20373: LD_ADDR_EXP 106
20377: PUSH
20378: LD_INT 1
20380: ST_TO_ADDR
// if p3 = 115 then
20381: LD_VAR 0 3
20385: PUSH
20386: LD_INT 115
20388: EQUAL
20389: IFFALSE 20399
// sRanger := true ;
20391: LD_ADDR_EXP 116
20395: PUSH
20396: LD_INT 1
20398: ST_TO_ADDR
// if p3 = 116 then
20399: LD_VAR 0 3
20403: PUSH
20404: LD_INT 116
20406: EQUAL
20407: IFFALSE 20417
// sComputer := true ;
20409: LD_ADDR_EXP 117
20413: PUSH
20414: LD_INT 1
20416: ST_TO_ADDR
// if p3 = 117 then
20417: LD_VAR 0 3
20421: PUSH
20422: LD_INT 117
20424: EQUAL
20425: IFFALSE 20435
// s30 := true ;
20427: LD_ADDR_EXP 118
20431: PUSH
20432: LD_INT 1
20434: ST_TO_ADDR
// if p3 = 118 then
20435: LD_VAR 0 3
20439: PUSH
20440: LD_INT 118
20442: EQUAL
20443: IFFALSE 20453
// s60 := true ;
20445: LD_ADDR_EXP 119
20449: PUSH
20450: LD_INT 1
20452: ST_TO_ADDR
// end ; if p2 = hack_mode then
20453: LD_VAR 0 2
20457: PUSH
20458: LD_INT 101
20460: EQUAL
20461: IFFALSE 20589
// begin case p3 of 1 :
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 1
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20483
20476: POP
// hHackUnlimitedResources ; 2 :
20477: CALL 32736 0 0
20481: GO 20589
20483: LD_INT 2
20485: DOUBLE
20486: EQUAL
20487: IFTRUE 20491
20489: GO 20498
20491: POP
// hHackSetLevel10 ; 3 :
20492: CALL 32869 0 0
20496: GO 20589
20498: LD_INT 3
20500: DOUBLE
20501: EQUAL
20502: IFTRUE 20506
20504: GO 20513
20506: POP
// hHackSetLevel10YourUnits ; 4 :
20507: CALL 32954 0 0
20511: GO 20589
20513: LD_INT 4
20515: DOUBLE
20516: EQUAL
20517: IFTRUE 20521
20519: GO 20528
20521: POP
// hHackInvincible ; 5 :
20522: CALL 33402 0 0
20526: GO 20589
20528: LD_INT 5
20530: DOUBLE
20531: EQUAL
20532: IFTRUE 20536
20534: GO 20543
20536: POP
// hHackInvisible ; 6 :
20537: CALL 33513 0 0
20541: GO 20589
20543: LD_INT 6
20545: DOUBLE
20546: EQUAL
20547: IFTRUE 20551
20549: GO 20558
20551: POP
// hHackChangeYourSide ; 7 :
20552: CALL 33570 0 0
20556: GO 20589
20558: LD_INT 7
20560: DOUBLE
20561: EQUAL
20562: IFTRUE 20566
20564: GO 20573
20566: POP
// hHackChangeUnitSide ; 8 :
20567: CALL 33612 0 0
20571: GO 20589
20573: LD_INT 8
20575: DOUBLE
20576: EQUAL
20577: IFTRUE 20581
20579: GO 20588
20581: POP
// hHackFog ; end ;
20582: CALL 33713 0 0
20586: GO 20589
20588: POP
// end ; if p2 = game_save_mode then
20589: LD_VAR 0 2
20593: PUSH
20594: LD_INT 102
20596: EQUAL
20597: IFFALSE 20652
// begin if p3 = 1 then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: IFFALSE 20619
// globalGameSaveCounter := p4 ;
20609: LD_ADDR_EXP 62
20613: PUSH
20614: LD_VAR 0 4
20618: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 2
20626: EQUAL
20627: PUSH
20628: LD_EXP 62
20632: AND
20633: IFFALSE 20652
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20635: LD_STRING setGameSaveCounter(
20637: PUSH
20638: LD_EXP 62
20642: STR
20643: PUSH
20644: LD_STRING )
20646: STR
20647: PPUSH
20648: CALL_OW 559
// end ; end ;
20652: LD_VAR 0 7
20656: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20657: LD_INT 0
20659: PPUSH
// streamModeActive := false ;
20660: LD_ADDR_EXP 63
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// normalCounter := 36 ;
20668: LD_ADDR_EXP 64
20672: PUSH
20673: LD_INT 36
20675: ST_TO_ADDR
// hardcoreCounter := 18 ;
20676: LD_ADDR_EXP 65
20680: PUSH
20681: LD_INT 18
20683: ST_TO_ADDR
// sRocket := false ;
20684: LD_ADDR_EXP 68
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sSpeed := false ;
20692: LD_ADDR_EXP 67
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sEngine := false ;
20700: LD_ADDR_EXP 69
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sSpec := false ;
20708: LD_ADDR_EXP 66
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sLevel := false ;
20716: LD_ADDR_EXP 70
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sArmoury := false ;
20724: LD_ADDR_EXP 71
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sRadar := false ;
20732: LD_ADDR_EXP 72
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sBunker := false ;
20740: LD_ADDR_EXP 73
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sHack := false ;
20748: LD_ADDR_EXP 74
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sFire := false ;
20756: LD_ADDR_EXP 75
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// sRefresh := false ;
20764: LD_ADDR_EXP 76
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// sExp := false ;
20772: LD_ADDR_EXP 77
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
// sDepot := false ;
20780: LD_ADDR_EXP 78
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// sFlag := false ;
20788: LD_ADDR_EXP 79
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sKamikadze := false ;
20796: LD_ADDR_EXP 87
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sTroll := false ;
20804: LD_ADDR_EXP 88
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sSlow := false ;
20812: LD_ADDR_EXP 89
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sLack := false ;
20820: LD_ADDR_EXP 90
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sTank := false ;
20828: LD_ADDR_EXP 92
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sRemote := false ;
20836: LD_ADDR_EXP 93
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sPowell := false ;
20844: LD_ADDR_EXP 94
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sTeleport := false ;
20852: LD_ADDR_EXP 97
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sOilTower := false ;
20860: LD_ADDR_EXP 99
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sShovel := false ;
20868: LD_ADDR_EXP 100
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sSheik := false ;
20876: LD_ADDR_EXP 101
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sEarthquake := false ;
20884: LD_ADDR_EXP 103
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sAI := false ;
20892: LD_ADDR_EXP 104
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sCargo := false ;
20900: LD_ADDR_EXP 107
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sDLaser := false ;
20908: LD_ADDR_EXP 108
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sExchange := false ;
20916: LD_ADDR_EXP 109
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sFac := false ;
20924: LD_ADDR_EXP 110
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sPower := false ;
20932: LD_ADDR_EXP 111
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sRandom := false ;
20940: LD_ADDR_EXP 112
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sShield := false ;
20948: LD_ADDR_EXP 113
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sTime := false ;
20956: LD_ADDR_EXP 114
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sTools := false ;
20964: LD_ADDR_EXP 115
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sSold := false ;
20972: LD_ADDR_EXP 80
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sDiff := false ;
20980: LD_ADDR_EXP 81
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sFog := false ;
20988: LD_ADDR_EXP 84
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sReset := false ;
20996: LD_ADDR_EXP 85
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sSun := false ;
21004: LD_ADDR_EXP 86
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sTiger := false ;
21012: LD_ADDR_EXP 82
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sBomb := false ;
21020: LD_ADDR_EXP 83
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sWound := false ;
21028: LD_ADDR_EXP 91
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// sBetray := false ;
21036: LD_ADDR_EXP 95
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// sContamin := false ;
21044: LD_ADDR_EXP 96
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// sOil := false ;
21052: LD_ADDR_EXP 98
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// sStu := false ;
21060: LD_ADDR_EXP 102
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// sBazooka := false ;
21068: LD_ADDR_EXP 105
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sMortar := false ;
21076: LD_ADDR_EXP 106
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sRanger := false ;
21084: LD_ADDR_EXP 116
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sComputer := false ;
21092: LD_ADDR_EXP 117
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// s30 := false ;
21100: LD_ADDR_EXP 118
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// s60 := false ;
21108: LD_ADDR_EXP 119
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// end ;
21116: LD_VAR 0 1
21120: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21121: LD_INT 0
21123: PPUSH
21124: PPUSH
21125: PPUSH
21126: PPUSH
21127: PPUSH
21128: PPUSH
21129: PPUSH
// result := [ ] ;
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: EMPTY
21136: ST_TO_ADDR
// if campaign_id = 1 then
21137: LD_OWVAR 69
21141: PUSH
21142: LD_INT 1
21144: EQUAL
21145: IFFALSE 24311
// begin case mission_number of 1 :
21147: LD_OWVAR 70
21151: PUSH
21152: LD_INT 1
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21236
21160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: LD_INT 4
21171: PUSH
21172: LD_INT 11
21174: PUSH
21175: LD_INT 12
21177: PUSH
21178: LD_INT 15
21180: PUSH
21181: LD_INT 16
21183: PUSH
21184: LD_INT 22
21186: PUSH
21187: LD_INT 23
21189: PUSH
21190: LD_INT 26
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 101
21206: PUSH
21207: LD_INT 102
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 116
21215: PUSH
21216: LD_INT 117
21218: PUSH
21219: LD_INT 118
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: ST_TO_ADDR
21234: GO 24309
21236: LD_INT 2
21238: DOUBLE
21239: EQUAL
21240: IFTRUE 21244
21242: GO 21328
21244: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: LD_INT 11
21258: PUSH
21259: LD_INT 12
21261: PUSH
21262: LD_INT 15
21264: PUSH
21265: LD_INT 16
21267: PUSH
21268: LD_INT 22
21270: PUSH
21271: LD_INT 23
21273: PUSH
21274: LD_INT 26
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 101
21290: PUSH
21291: LD_INT 102
21293: PUSH
21294: LD_INT 105
21296: PUSH
21297: LD_INT 106
21299: PUSH
21300: LD_INT 108
21302: PUSH
21303: LD_INT 116
21305: PUSH
21306: LD_INT 117
21308: PUSH
21309: LD_INT 118
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: ST_TO_ADDR
21326: GO 24309
21328: LD_INT 3
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 21424
21336: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21337: LD_ADDR_VAR 0 2
21341: PUSH
21342: LD_INT 2
21344: PUSH
21345: LD_INT 4
21347: PUSH
21348: LD_INT 5
21350: PUSH
21351: LD_INT 11
21353: PUSH
21354: LD_INT 12
21356: PUSH
21357: LD_INT 15
21359: PUSH
21360: LD_INT 16
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_INT 26
21368: PUSH
21369: LD_INT 36
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 101
21386: PUSH
21387: LD_INT 102
21389: PUSH
21390: LD_INT 105
21392: PUSH
21393: LD_INT 106
21395: PUSH
21396: LD_INT 108
21398: PUSH
21399: LD_INT 116
21401: PUSH
21402: LD_INT 117
21404: PUSH
21405: LD_INT 118
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: ST_TO_ADDR
21422: GO 24309
21424: LD_INT 4
21426: DOUBLE
21427: EQUAL
21428: IFTRUE 21432
21430: GO 21528
21432: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: LD_INT 4
21443: PUSH
21444: LD_INT 5
21446: PUSH
21447: LD_INT 8
21449: PUSH
21450: LD_INT 11
21452: PUSH
21453: LD_INT 12
21455: PUSH
21456: LD_INT 15
21458: PUSH
21459: LD_INT 16
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_INT 23
21467: PUSH
21468: LD_INT 26
21470: PUSH
21471: LD_INT 36
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 101
21490: PUSH
21491: LD_INT 102
21493: PUSH
21494: LD_INT 105
21496: PUSH
21497: LD_INT 106
21499: PUSH
21500: LD_INT 108
21502: PUSH
21503: LD_INT 116
21505: PUSH
21506: LD_INT 117
21508: PUSH
21509: LD_INT 118
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: ST_TO_ADDR
21526: GO 24309
21528: LD_INT 5
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21648
21536: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 4
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 6
21553: PUSH
21554: LD_INT 8
21556: PUSH
21557: LD_INT 11
21559: PUSH
21560: LD_INT 12
21562: PUSH
21563: LD_INT 15
21565: PUSH
21566: LD_INT 16
21568: PUSH
21569: LD_INT 22
21571: PUSH
21572: LD_INT 23
21574: PUSH
21575: LD_INT 25
21577: PUSH
21578: LD_INT 26
21580: PUSH
21581: LD_INT 36
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 101
21602: PUSH
21603: LD_INT 102
21605: PUSH
21606: LD_INT 105
21608: PUSH
21609: LD_INT 106
21611: PUSH
21612: LD_INT 108
21614: PUSH
21615: LD_INT 109
21617: PUSH
21618: LD_INT 112
21620: PUSH
21621: LD_INT 116
21623: PUSH
21624: LD_INT 117
21626: PUSH
21627: LD_INT 118
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: ST_TO_ADDR
21646: GO 24309
21648: LD_INT 6
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21788
21656: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21657: LD_ADDR_VAR 0 2
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: LD_INT 5
21670: PUSH
21671: LD_INT 6
21673: PUSH
21674: LD_INT 8
21676: PUSH
21677: LD_INT 11
21679: PUSH
21680: LD_INT 12
21682: PUSH
21683: LD_INT 15
21685: PUSH
21686: LD_INT 16
21688: PUSH
21689: LD_INT 20
21691: PUSH
21692: LD_INT 21
21694: PUSH
21695: LD_INT 22
21697: PUSH
21698: LD_INT 23
21700: PUSH
21701: LD_INT 25
21703: PUSH
21704: LD_INT 26
21706: PUSH
21707: LD_INT 30
21709: PUSH
21710: LD_INT 31
21712: PUSH
21713: LD_INT 32
21715: PUSH
21716: LD_INT 36
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 101
21742: PUSH
21743: LD_INT 102
21745: PUSH
21746: LD_INT 105
21748: PUSH
21749: LD_INT 106
21751: PUSH
21752: LD_INT 108
21754: PUSH
21755: LD_INT 109
21757: PUSH
21758: LD_INT 112
21760: PUSH
21761: LD_INT 116
21763: PUSH
21764: LD_INT 117
21766: PUSH
21767: LD_INT 118
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: ST_TO_ADDR
21786: GO 24309
21788: LD_INT 7
21790: DOUBLE
21791: EQUAL
21792: IFTRUE 21796
21794: GO 21908
21796: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21797: LD_ADDR_VAR 0 2
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: LD_INT 4
21807: PUSH
21808: LD_INT 5
21810: PUSH
21811: LD_INT 7
21813: PUSH
21814: LD_INT 11
21816: PUSH
21817: LD_INT 12
21819: PUSH
21820: LD_INT 15
21822: PUSH
21823: LD_INT 16
21825: PUSH
21826: LD_INT 20
21828: PUSH
21829: LD_INT 21
21831: PUSH
21832: LD_INT 22
21834: PUSH
21835: LD_INT 23
21837: PUSH
21838: LD_INT 25
21840: PUSH
21841: LD_INT 26
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 101
21862: PUSH
21863: LD_INT 102
21865: PUSH
21866: LD_INT 103
21868: PUSH
21869: LD_INT 105
21871: PUSH
21872: LD_INT 106
21874: PUSH
21875: LD_INT 108
21877: PUSH
21878: LD_INT 112
21880: PUSH
21881: LD_INT 116
21883: PUSH
21884: LD_INT 117
21886: PUSH
21887: LD_INT 118
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: ST_TO_ADDR
21906: GO 24309
21908: LD_INT 8
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 22056
21916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21917: LD_ADDR_VAR 0 2
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: LD_INT 4
21927: PUSH
21928: LD_INT 5
21930: PUSH
21931: LD_INT 6
21933: PUSH
21934: LD_INT 7
21936: PUSH
21937: LD_INT 8
21939: PUSH
21940: LD_INT 11
21942: PUSH
21943: LD_INT 12
21945: PUSH
21946: LD_INT 15
21948: PUSH
21949: LD_INT 16
21951: PUSH
21952: LD_INT 20
21954: PUSH
21955: LD_INT 21
21957: PUSH
21958: LD_INT 22
21960: PUSH
21961: LD_INT 23
21963: PUSH
21964: LD_INT 25
21966: PUSH
21967: LD_INT 26
21969: PUSH
21970: LD_INT 30
21972: PUSH
21973: LD_INT 31
21975: PUSH
21976: LD_INT 32
21978: PUSH
21979: LD_INT 36
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 103
22012: PUSH
22013: LD_INT 105
22015: PUSH
22016: LD_INT 106
22018: PUSH
22019: LD_INT 108
22021: PUSH
22022: LD_INT 109
22024: PUSH
22025: LD_INT 112
22027: PUSH
22028: LD_INT 116
22030: PUSH
22031: LD_INT 117
22033: PUSH
22034: LD_INT 118
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: ST_TO_ADDR
22054: GO 24309
22056: LD_INT 9
22058: DOUBLE
22059: EQUAL
22060: IFTRUE 22064
22062: GO 22212
22064: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22065: LD_ADDR_VAR 0 2
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 4
22075: PUSH
22076: LD_INT 5
22078: PUSH
22079: LD_INT 6
22081: PUSH
22082: LD_INT 7
22084: PUSH
22085: LD_INT 8
22087: PUSH
22088: LD_INT 11
22090: PUSH
22091: LD_INT 12
22093: PUSH
22094: LD_INT 15
22096: PUSH
22097: LD_INT 16
22099: PUSH
22100: LD_INT 20
22102: PUSH
22103: LD_INT 21
22105: PUSH
22106: LD_INT 22
22108: PUSH
22109: LD_INT 23
22111: PUSH
22112: LD_INT 25
22114: PUSH
22115: LD_INT 26
22117: PUSH
22118: LD_INT 28
22120: PUSH
22121: LD_INT 30
22123: PUSH
22124: LD_INT 31
22126: PUSH
22127: LD_INT 32
22129: PUSH
22130: LD_INT 36
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 101
22158: PUSH
22159: LD_INT 102
22161: PUSH
22162: LD_INT 103
22164: PUSH
22165: LD_INT 105
22167: PUSH
22168: LD_INT 106
22170: PUSH
22171: LD_INT 108
22173: PUSH
22174: LD_INT 109
22176: PUSH
22177: LD_INT 112
22179: PUSH
22180: LD_INT 114
22182: PUSH
22183: LD_INT 116
22185: PUSH
22186: LD_INT 117
22188: PUSH
22189: LD_INT 118
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 24309
22212: LD_INT 10
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22416
22220: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 6
22237: PUSH
22238: LD_INT 7
22240: PUSH
22241: LD_INT 8
22243: PUSH
22244: LD_INT 9
22246: PUSH
22247: LD_INT 10
22249: PUSH
22250: LD_INT 11
22252: PUSH
22253: LD_INT 12
22255: PUSH
22256: LD_INT 13
22258: PUSH
22259: LD_INT 14
22261: PUSH
22262: LD_INT 15
22264: PUSH
22265: LD_INT 16
22267: PUSH
22268: LD_INT 17
22270: PUSH
22271: LD_INT 18
22273: PUSH
22274: LD_INT 19
22276: PUSH
22277: LD_INT 20
22279: PUSH
22280: LD_INT 21
22282: PUSH
22283: LD_INT 22
22285: PUSH
22286: LD_INT 23
22288: PUSH
22289: LD_INT 24
22291: PUSH
22292: LD_INT 25
22294: PUSH
22295: LD_INT 26
22297: PUSH
22298: LD_INT 28
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 31
22306: PUSH
22307: LD_INT 32
22309: PUSH
22310: LD_INT 36
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 101
22346: PUSH
22347: LD_INT 102
22349: PUSH
22350: LD_INT 103
22352: PUSH
22353: LD_INT 104
22355: PUSH
22356: LD_INT 105
22358: PUSH
22359: LD_INT 106
22361: PUSH
22362: LD_INT 107
22364: PUSH
22365: LD_INT 108
22367: PUSH
22368: LD_INT 109
22370: PUSH
22371: LD_INT 110
22373: PUSH
22374: LD_INT 111
22376: PUSH
22377: LD_INT 112
22379: PUSH
22380: LD_INT 114
22382: PUSH
22383: LD_INT 116
22385: PUSH
22386: LD_INT 117
22388: PUSH
22389: LD_INT 118
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: ST_TO_ADDR
22414: GO 24309
22416: LD_INT 11
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22628
22424: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: LD_INT 3
22435: PUSH
22436: LD_INT 4
22438: PUSH
22439: LD_INT 5
22441: PUSH
22442: LD_INT 6
22444: PUSH
22445: LD_INT 7
22447: PUSH
22448: LD_INT 8
22450: PUSH
22451: LD_INT 9
22453: PUSH
22454: LD_INT 10
22456: PUSH
22457: LD_INT 11
22459: PUSH
22460: LD_INT 12
22462: PUSH
22463: LD_INT 13
22465: PUSH
22466: LD_INT 14
22468: PUSH
22469: LD_INT 15
22471: PUSH
22472: LD_INT 16
22474: PUSH
22475: LD_INT 17
22477: PUSH
22478: LD_INT 18
22480: PUSH
22481: LD_INT 19
22483: PUSH
22484: LD_INT 20
22486: PUSH
22487: LD_INT 21
22489: PUSH
22490: LD_INT 22
22492: PUSH
22493: LD_INT 23
22495: PUSH
22496: LD_INT 24
22498: PUSH
22499: LD_INT 25
22501: PUSH
22502: LD_INT 26
22504: PUSH
22505: LD_INT 28
22507: PUSH
22508: LD_INT 30
22510: PUSH
22511: LD_INT 31
22513: PUSH
22514: LD_INT 32
22516: PUSH
22517: LD_INT 34
22519: PUSH
22520: LD_INT 36
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 101
22558: PUSH
22559: LD_INT 102
22561: PUSH
22562: LD_INT 103
22564: PUSH
22565: LD_INT 104
22567: PUSH
22568: LD_INT 105
22570: PUSH
22571: LD_INT 106
22573: PUSH
22574: LD_INT 107
22576: PUSH
22577: LD_INT 108
22579: PUSH
22580: LD_INT 109
22582: PUSH
22583: LD_INT 110
22585: PUSH
22586: LD_INT 111
22588: PUSH
22589: LD_INT 112
22591: PUSH
22592: LD_INT 114
22594: PUSH
22595: LD_INT 116
22597: PUSH
22598: LD_INT 117
22600: PUSH
22601: LD_INT 118
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 24309
22628: LD_INT 12
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22856
22636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: LD_INT 4
22653: PUSH
22654: LD_INT 5
22656: PUSH
22657: LD_INT 6
22659: PUSH
22660: LD_INT 7
22662: PUSH
22663: LD_INT 8
22665: PUSH
22666: LD_INT 9
22668: PUSH
22669: LD_INT 10
22671: PUSH
22672: LD_INT 11
22674: PUSH
22675: LD_INT 12
22677: PUSH
22678: LD_INT 13
22680: PUSH
22681: LD_INT 14
22683: PUSH
22684: LD_INT 15
22686: PUSH
22687: LD_INT 16
22689: PUSH
22690: LD_INT 17
22692: PUSH
22693: LD_INT 18
22695: PUSH
22696: LD_INT 19
22698: PUSH
22699: LD_INT 20
22701: PUSH
22702: LD_INT 21
22704: PUSH
22705: LD_INT 22
22707: PUSH
22708: LD_INT 23
22710: PUSH
22711: LD_INT 24
22713: PUSH
22714: LD_INT 25
22716: PUSH
22717: LD_INT 26
22719: PUSH
22720: LD_INT 27
22722: PUSH
22723: LD_INT 28
22725: PUSH
22726: LD_INT 30
22728: PUSH
22729: LD_INT 31
22731: PUSH
22732: LD_INT 32
22734: PUSH
22735: LD_INT 33
22737: PUSH
22738: LD_INT 34
22740: PUSH
22741: LD_INT 36
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 101
22782: PUSH
22783: LD_INT 102
22785: PUSH
22786: LD_INT 103
22788: PUSH
22789: LD_INT 104
22791: PUSH
22792: LD_INT 105
22794: PUSH
22795: LD_INT 106
22797: PUSH
22798: LD_INT 107
22800: PUSH
22801: LD_INT 108
22803: PUSH
22804: LD_INT 109
22806: PUSH
22807: LD_INT 110
22809: PUSH
22810: LD_INT 111
22812: PUSH
22813: LD_INT 112
22815: PUSH
22816: LD_INT 113
22818: PUSH
22819: LD_INT 114
22821: PUSH
22822: LD_INT 116
22824: PUSH
22825: LD_INT 117
22827: PUSH
22828: LD_INT 118
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: ST_TO_ADDR
22854: GO 24309
22856: LD_INT 13
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 23072
22864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22865: LD_ADDR_VAR 0 2
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 4
22881: PUSH
22882: LD_INT 5
22884: PUSH
22885: LD_INT 8
22887: PUSH
22888: LD_INT 9
22890: PUSH
22891: LD_INT 10
22893: PUSH
22894: LD_INT 11
22896: PUSH
22897: LD_INT 12
22899: PUSH
22900: LD_INT 14
22902: PUSH
22903: LD_INT 15
22905: PUSH
22906: LD_INT 16
22908: PUSH
22909: LD_INT 17
22911: PUSH
22912: LD_INT 18
22914: PUSH
22915: LD_INT 19
22917: PUSH
22918: LD_INT 20
22920: PUSH
22921: LD_INT 21
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 23
22929: PUSH
22930: LD_INT 24
22932: PUSH
22933: LD_INT 25
22935: PUSH
22936: LD_INT 26
22938: PUSH
22939: LD_INT 27
22941: PUSH
22942: LD_INT 28
22944: PUSH
22945: LD_INT 30
22947: PUSH
22948: LD_INT 31
22950: PUSH
22951: LD_INT 32
22953: PUSH
22954: LD_INT 33
22956: PUSH
22957: LD_INT 34
22959: PUSH
22960: LD_INT 36
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 101
22998: PUSH
22999: LD_INT 102
23001: PUSH
23002: LD_INT 103
23004: PUSH
23005: LD_INT 104
23007: PUSH
23008: LD_INT 105
23010: PUSH
23011: LD_INT 106
23013: PUSH
23014: LD_INT 107
23016: PUSH
23017: LD_INT 108
23019: PUSH
23020: LD_INT 109
23022: PUSH
23023: LD_INT 110
23025: PUSH
23026: LD_INT 111
23028: PUSH
23029: LD_INT 112
23031: PUSH
23032: LD_INT 113
23034: PUSH
23035: LD_INT 114
23037: PUSH
23038: LD_INT 116
23040: PUSH
23041: LD_INT 117
23043: PUSH
23044: LD_INT 118
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: ST_TO_ADDR
23070: GO 24309
23072: LD_INT 14
23074: DOUBLE
23075: EQUAL
23076: IFTRUE 23080
23078: GO 23304
23080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 3
23094: PUSH
23095: LD_INT 4
23097: PUSH
23098: LD_INT 5
23100: PUSH
23101: LD_INT 6
23103: PUSH
23104: LD_INT 7
23106: PUSH
23107: LD_INT 8
23109: PUSH
23110: LD_INT 9
23112: PUSH
23113: LD_INT 10
23115: PUSH
23116: LD_INT 11
23118: PUSH
23119: LD_INT 12
23121: PUSH
23122: LD_INT 13
23124: PUSH
23125: LD_INT 14
23127: PUSH
23128: LD_INT 15
23130: PUSH
23131: LD_INT 16
23133: PUSH
23134: LD_INT 17
23136: PUSH
23137: LD_INT 18
23139: PUSH
23140: LD_INT 19
23142: PUSH
23143: LD_INT 20
23145: PUSH
23146: LD_INT 21
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 23
23154: PUSH
23155: LD_INT 24
23157: PUSH
23158: LD_INT 25
23160: PUSH
23161: LD_INT 26
23163: PUSH
23164: LD_INT 27
23166: PUSH
23167: LD_INT 28
23169: PUSH
23170: LD_INT 29
23172: PUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 31
23178: PUSH
23179: LD_INT 32
23181: PUSH
23182: LD_INT 33
23184: PUSH
23185: LD_INT 34
23187: PUSH
23188: LD_INT 36
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 101
23230: PUSH
23231: LD_INT 102
23233: PUSH
23234: LD_INT 103
23236: PUSH
23237: LD_INT 104
23239: PUSH
23240: LD_INT 105
23242: PUSH
23243: LD_INT 106
23245: PUSH
23246: LD_INT 107
23248: PUSH
23249: LD_INT 108
23251: PUSH
23252: LD_INT 109
23254: PUSH
23255: LD_INT 110
23257: PUSH
23258: LD_INT 111
23260: PUSH
23261: LD_INT 112
23263: PUSH
23264: LD_INT 113
23266: PUSH
23267: LD_INT 114
23269: PUSH
23270: LD_INT 116
23272: PUSH
23273: LD_INT 117
23275: PUSH
23276: LD_INT 118
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: ST_TO_ADDR
23302: GO 24309
23304: LD_INT 15
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23536
23312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: LD_INT 4
23329: PUSH
23330: LD_INT 5
23332: PUSH
23333: LD_INT 6
23335: PUSH
23336: LD_INT 7
23338: PUSH
23339: LD_INT 8
23341: PUSH
23342: LD_INT 9
23344: PUSH
23345: LD_INT 10
23347: PUSH
23348: LD_INT 11
23350: PUSH
23351: LD_INT 12
23353: PUSH
23354: LD_INT 13
23356: PUSH
23357: LD_INT 14
23359: PUSH
23360: LD_INT 15
23362: PUSH
23363: LD_INT 16
23365: PUSH
23366: LD_INT 17
23368: PUSH
23369: LD_INT 18
23371: PUSH
23372: LD_INT 19
23374: PUSH
23375: LD_INT 20
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 22
23383: PUSH
23384: LD_INT 23
23386: PUSH
23387: LD_INT 24
23389: PUSH
23390: LD_INT 25
23392: PUSH
23393: LD_INT 26
23395: PUSH
23396: LD_INT 27
23398: PUSH
23399: LD_INT 28
23401: PUSH
23402: LD_INT 29
23404: PUSH
23405: LD_INT 30
23407: PUSH
23408: LD_INT 31
23410: PUSH
23411: LD_INT 32
23413: PUSH
23414: LD_INT 33
23416: PUSH
23417: LD_INT 34
23419: PUSH
23420: LD_INT 36
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 101
23462: PUSH
23463: LD_INT 102
23465: PUSH
23466: LD_INT 103
23468: PUSH
23469: LD_INT 104
23471: PUSH
23472: LD_INT 105
23474: PUSH
23475: LD_INT 106
23477: PUSH
23478: LD_INT 107
23480: PUSH
23481: LD_INT 108
23483: PUSH
23484: LD_INT 109
23486: PUSH
23487: LD_INT 110
23489: PUSH
23490: LD_INT 111
23492: PUSH
23493: LD_INT 112
23495: PUSH
23496: LD_INT 113
23498: PUSH
23499: LD_INT 114
23501: PUSH
23502: LD_INT 116
23504: PUSH
23505: LD_INT 117
23507: PUSH
23508: LD_INT 118
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: ST_TO_ADDR
23534: GO 24309
23536: LD_INT 16
23538: DOUBLE
23539: EQUAL
23540: IFTRUE 23544
23542: GO 23680
23544: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23545: LD_ADDR_VAR 0 2
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 4
23555: PUSH
23556: LD_INT 5
23558: PUSH
23559: LD_INT 7
23561: PUSH
23562: LD_INT 11
23564: PUSH
23565: LD_INT 12
23567: PUSH
23568: LD_INT 15
23570: PUSH
23571: LD_INT 16
23573: PUSH
23574: LD_INT 20
23576: PUSH
23577: LD_INT 21
23579: PUSH
23580: LD_INT 22
23582: PUSH
23583: LD_INT 23
23585: PUSH
23586: LD_INT 25
23588: PUSH
23589: LD_INT 26
23591: PUSH
23592: LD_INT 30
23594: PUSH
23595: LD_INT 31
23597: PUSH
23598: LD_INT 32
23600: PUSH
23601: LD_INT 33
23603: PUSH
23604: LD_INT 34
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 101
23630: PUSH
23631: LD_INT 102
23633: PUSH
23634: LD_INT 103
23636: PUSH
23637: LD_INT 106
23639: PUSH
23640: LD_INT 108
23642: PUSH
23643: LD_INT 112
23645: PUSH
23646: LD_INT 113
23648: PUSH
23649: LD_INT 114
23651: PUSH
23652: LD_INT 116
23654: PUSH
23655: LD_INT 117
23657: PUSH
23658: LD_INT 118
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: ST_TO_ADDR
23678: GO 24309
23680: LD_INT 17
23682: DOUBLE
23683: EQUAL
23684: IFTRUE 23688
23686: GO 23912
23688: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: LD_INT 2
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: LD_INT 4
23705: PUSH
23706: LD_INT 5
23708: PUSH
23709: LD_INT 6
23711: PUSH
23712: LD_INT 7
23714: PUSH
23715: LD_INT 8
23717: PUSH
23718: LD_INT 9
23720: PUSH
23721: LD_INT 10
23723: PUSH
23724: LD_INT 11
23726: PUSH
23727: LD_INT 12
23729: PUSH
23730: LD_INT 13
23732: PUSH
23733: LD_INT 14
23735: PUSH
23736: LD_INT 15
23738: PUSH
23739: LD_INT 16
23741: PUSH
23742: LD_INT 17
23744: PUSH
23745: LD_INT 18
23747: PUSH
23748: LD_INT 19
23750: PUSH
23751: LD_INT 20
23753: PUSH
23754: LD_INT 21
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_INT 23
23762: PUSH
23763: LD_INT 24
23765: PUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 26
23771: PUSH
23772: LD_INT 27
23774: PUSH
23775: LD_INT 28
23777: PUSH
23778: LD_INT 29
23780: PUSH
23781: LD_INT 30
23783: PUSH
23784: LD_INT 31
23786: PUSH
23787: LD_INT 32
23789: PUSH
23790: LD_INT 33
23792: PUSH
23793: LD_INT 34
23795: PUSH
23796: LD_INT 36
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 101
23838: PUSH
23839: LD_INT 102
23841: PUSH
23842: LD_INT 103
23844: PUSH
23845: LD_INT 104
23847: PUSH
23848: LD_INT 105
23850: PUSH
23851: LD_INT 106
23853: PUSH
23854: LD_INT 107
23856: PUSH
23857: LD_INT 108
23859: PUSH
23860: LD_INT 109
23862: PUSH
23863: LD_INT 110
23865: PUSH
23866: LD_INT 111
23868: PUSH
23869: LD_INT 112
23871: PUSH
23872: LD_INT 113
23874: PUSH
23875: LD_INT 114
23877: PUSH
23878: LD_INT 116
23880: PUSH
23881: LD_INT 117
23883: PUSH
23884: LD_INT 118
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: ST_TO_ADDR
23910: GO 24309
23912: LD_INT 18
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 24068
23920: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23921: LD_ADDR_VAR 0 2
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 4
23931: PUSH
23932: LD_INT 5
23934: PUSH
23935: LD_INT 7
23937: PUSH
23938: LD_INT 11
23940: PUSH
23941: LD_INT 12
23943: PUSH
23944: LD_INT 15
23946: PUSH
23947: LD_INT 16
23949: PUSH
23950: LD_INT 20
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 22
23958: PUSH
23959: LD_INT 23
23961: PUSH
23962: LD_INT 25
23964: PUSH
23965: LD_INT 26
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 31
23973: PUSH
23974: LD_INT 32
23976: PUSH
23977: LD_INT 33
23979: PUSH
23980: LD_INT 34
23982: PUSH
23983: LD_INT 35
23985: PUSH
23986: LD_INT 36
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 101
24014: PUSH
24015: LD_INT 102
24017: PUSH
24018: LD_INT 103
24020: PUSH
24021: LD_INT 106
24023: PUSH
24024: LD_INT 108
24026: PUSH
24027: LD_INT 112
24029: PUSH
24030: LD_INT 113
24032: PUSH
24033: LD_INT 114
24035: PUSH
24036: LD_INT 115
24038: PUSH
24039: LD_INT 116
24041: PUSH
24042: LD_INT 117
24044: PUSH
24045: LD_INT 118
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: ST_TO_ADDR
24066: GO 24309
24068: LD_INT 19
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24308
24076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24077: LD_ADDR_VAR 0 2
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 3
24090: PUSH
24091: LD_INT 4
24093: PUSH
24094: LD_INT 5
24096: PUSH
24097: LD_INT 6
24099: PUSH
24100: LD_INT 7
24102: PUSH
24103: LD_INT 8
24105: PUSH
24106: LD_INT 9
24108: PUSH
24109: LD_INT 10
24111: PUSH
24112: LD_INT 11
24114: PUSH
24115: LD_INT 12
24117: PUSH
24118: LD_INT 13
24120: PUSH
24121: LD_INT 14
24123: PUSH
24124: LD_INT 15
24126: PUSH
24127: LD_INT 16
24129: PUSH
24130: LD_INT 17
24132: PUSH
24133: LD_INT 18
24135: PUSH
24136: LD_INT 19
24138: PUSH
24139: LD_INT 20
24141: PUSH
24142: LD_INT 21
24144: PUSH
24145: LD_INT 22
24147: PUSH
24148: LD_INT 23
24150: PUSH
24151: LD_INT 24
24153: PUSH
24154: LD_INT 25
24156: PUSH
24157: LD_INT 26
24159: PUSH
24160: LD_INT 27
24162: PUSH
24163: LD_INT 28
24165: PUSH
24166: LD_INT 29
24168: PUSH
24169: LD_INT 30
24171: PUSH
24172: LD_INT 31
24174: PUSH
24175: LD_INT 32
24177: PUSH
24178: LD_INT 33
24180: PUSH
24181: LD_INT 34
24183: PUSH
24184: LD_INT 35
24186: PUSH
24187: LD_INT 36
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 101
24230: PUSH
24231: LD_INT 102
24233: PUSH
24234: LD_INT 103
24236: PUSH
24237: LD_INT 104
24239: PUSH
24240: LD_INT 105
24242: PUSH
24243: LD_INT 106
24245: PUSH
24246: LD_INT 107
24248: PUSH
24249: LD_INT 108
24251: PUSH
24252: LD_INT 109
24254: PUSH
24255: LD_INT 110
24257: PUSH
24258: LD_INT 111
24260: PUSH
24261: LD_INT 112
24263: PUSH
24264: LD_INT 113
24266: PUSH
24267: LD_INT 114
24269: PUSH
24270: LD_INT 115
24272: PUSH
24273: LD_INT 116
24275: PUSH
24276: LD_INT 117
24278: PUSH
24279: LD_INT 118
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: ST_TO_ADDR
24306: GO 24309
24308: POP
// end else
24309: GO 24540
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24311: LD_ADDR_VAR 0 2
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: LD_INT 3
24324: PUSH
24325: LD_INT 4
24327: PUSH
24328: LD_INT 5
24330: PUSH
24331: LD_INT 6
24333: PUSH
24334: LD_INT 7
24336: PUSH
24337: LD_INT 8
24339: PUSH
24340: LD_INT 9
24342: PUSH
24343: LD_INT 10
24345: PUSH
24346: LD_INT 11
24348: PUSH
24349: LD_INT 12
24351: PUSH
24352: LD_INT 13
24354: PUSH
24355: LD_INT 14
24357: PUSH
24358: LD_INT 15
24360: PUSH
24361: LD_INT 16
24363: PUSH
24364: LD_INT 17
24366: PUSH
24367: LD_INT 18
24369: PUSH
24370: LD_INT 19
24372: PUSH
24373: LD_INT 20
24375: PUSH
24376: LD_INT 21
24378: PUSH
24379: LD_INT 22
24381: PUSH
24382: LD_INT 23
24384: PUSH
24385: LD_INT 24
24387: PUSH
24388: LD_INT 25
24390: PUSH
24391: LD_INT 26
24393: PUSH
24394: LD_INT 27
24396: PUSH
24397: LD_INT 28
24399: PUSH
24400: LD_INT 29
24402: PUSH
24403: LD_INT 30
24405: PUSH
24406: LD_INT 31
24408: PUSH
24409: LD_INT 32
24411: PUSH
24412: LD_INT 33
24414: PUSH
24415: LD_INT 34
24417: PUSH
24418: LD_INT 35
24420: PUSH
24421: LD_INT 36
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 101
24464: PUSH
24465: LD_INT 102
24467: PUSH
24468: LD_INT 103
24470: PUSH
24471: LD_INT 104
24473: PUSH
24474: LD_INT 105
24476: PUSH
24477: LD_INT 106
24479: PUSH
24480: LD_INT 107
24482: PUSH
24483: LD_INT 108
24485: PUSH
24486: LD_INT 109
24488: PUSH
24489: LD_INT 110
24491: PUSH
24492: LD_INT 111
24494: PUSH
24495: LD_INT 112
24497: PUSH
24498: LD_INT 113
24500: PUSH
24501: LD_INT 114
24503: PUSH
24504: LD_INT 115
24506: PUSH
24507: LD_INT 116
24509: PUSH
24510: LD_INT 117
24512: PUSH
24513: LD_INT 118
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: ST_TO_ADDR
// if result then
24540: LD_VAR 0 2
24544: IFFALSE 25330
// begin normal :=  ;
24546: LD_ADDR_VAR 0 5
24550: PUSH
24551: LD_STRING 
24553: ST_TO_ADDR
// hardcore :=  ;
24554: LD_ADDR_VAR 0 6
24558: PUSH
24559: LD_STRING 
24561: ST_TO_ADDR
// active :=  ;
24562: LD_ADDR_VAR 0 7
24566: PUSH
24567: LD_STRING 
24569: ST_TO_ADDR
// for i = 1 to normalCounter do
24570: LD_ADDR_VAR 0 8
24574: PUSH
24575: DOUBLE
24576: LD_INT 1
24578: DEC
24579: ST_TO_ADDR
24580: LD_EXP 64
24584: PUSH
24585: FOR_TO
24586: IFFALSE 24687
// begin tmp := 0 ;
24588: LD_ADDR_VAR 0 3
24592: PUSH
24593: LD_STRING 0
24595: ST_TO_ADDR
// if result [ 1 ] then
24596: LD_VAR 0 2
24600: PUSH
24601: LD_INT 1
24603: ARRAY
24604: IFFALSE 24669
// if result [ 1 ] [ 1 ] = i then
24606: LD_VAR 0 2
24610: PUSH
24611: LD_INT 1
24613: ARRAY
24614: PUSH
24615: LD_INT 1
24617: ARRAY
24618: PUSH
24619: LD_VAR 0 8
24623: EQUAL
24624: IFFALSE 24669
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24626: LD_ADDR_VAR 0 2
24630: PUSH
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_INT 1
24638: PPUSH
24639: LD_VAR 0 2
24643: PUSH
24644: LD_INT 1
24646: ARRAY
24647: PPUSH
24648: LD_INT 1
24650: PPUSH
24651: CALL_OW 3
24655: PPUSH
24656: CALL_OW 1
24660: ST_TO_ADDR
// tmp := 1 ;
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_STRING 1
24668: ST_TO_ADDR
// end ; normal := normal & tmp ;
24669: LD_ADDR_VAR 0 5
24673: PUSH
24674: LD_VAR 0 5
24678: PUSH
24679: LD_VAR 0 3
24683: STR
24684: ST_TO_ADDR
// end ;
24685: GO 24585
24687: POP
24688: POP
// for i = 1 to hardcoreCounter do
24689: LD_ADDR_VAR 0 8
24693: PUSH
24694: DOUBLE
24695: LD_INT 1
24697: DEC
24698: ST_TO_ADDR
24699: LD_EXP 65
24703: PUSH
24704: FOR_TO
24705: IFFALSE 24810
// begin tmp := 0 ;
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: LD_STRING 0
24714: ST_TO_ADDR
// if result [ 2 ] then
24715: LD_VAR 0 2
24719: PUSH
24720: LD_INT 2
24722: ARRAY
24723: IFFALSE 24792
// if result [ 2 ] [ 1 ] = 100 + i then
24725: LD_VAR 0 2
24729: PUSH
24730: LD_INT 2
24732: ARRAY
24733: PUSH
24734: LD_INT 1
24736: ARRAY
24737: PUSH
24738: LD_INT 100
24740: PUSH
24741: LD_VAR 0 8
24745: PLUS
24746: EQUAL
24747: IFFALSE 24792
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24749: LD_ADDR_VAR 0 2
24753: PUSH
24754: LD_VAR 0 2
24758: PPUSH
24759: LD_INT 2
24761: PPUSH
24762: LD_VAR 0 2
24766: PUSH
24767: LD_INT 2
24769: ARRAY
24770: PPUSH
24771: LD_INT 1
24773: PPUSH
24774: CALL_OW 3
24778: PPUSH
24779: CALL_OW 1
24783: ST_TO_ADDR
// tmp := 1 ;
24784: LD_ADDR_VAR 0 3
24788: PUSH
24789: LD_STRING 1
24791: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24792: LD_ADDR_VAR 0 6
24796: PUSH
24797: LD_VAR 0 6
24801: PUSH
24802: LD_VAR 0 3
24806: STR
24807: ST_TO_ADDR
// end ;
24808: GO 24704
24810: POP
24811: POP
// if isGameLoad then
24812: LD_VAR 0 1
24816: IFFALSE 25291
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24818: LD_ADDR_VAR 0 4
24822: PUSH
24823: LD_EXP 68
24827: PUSH
24828: LD_EXP 67
24832: PUSH
24833: LD_EXP 69
24837: PUSH
24838: LD_EXP 66
24842: PUSH
24843: LD_EXP 70
24847: PUSH
24848: LD_EXP 71
24852: PUSH
24853: LD_EXP 72
24857: PUSH
24858: LD_EXP 73
24862: PUSH
24863: LD_EXP 74
24867: PUSH
24868: LD_EXP 75
24872: PUSH
24873: LD_EXP 76
24877: PUSH
24878: LD_EXP 77
24882: PUSH
24883: LD_EXP 78
24887: PUSH
24888: LD_EXP 79
24892: PUSH
24893: LD_EXP 87
24897: PUSH
24898: LD_EXP 88
24902: PUSH
24903: LD_EXP 89
24907: PUSH
24908: LD_EXP 90
24912: PUSH
24913: LD_EXP 92
24917: PUSH
24918: LD_EXP 93
24922: PUSH
24923: LD_EXP 94
24927: PUSH
24928: LD_EXP 97
24932: PUSH
24933: LD_EXP 99
24937: PUSH
24938: LD_EXP 100
24942: PUSH
24943: LD_EXP 101
24947: PUSH
24948: LD_EXP 103
24952: PUSH
24953: LD_EXP 104
24957: PUSH
24958: LD_EXP 107
24962: PUSH
24963: LD_EXP 108
24967: PUSH
24968: LD_EXP 109
24972: PUSH
24973: LD_EXP 110
24977: PUSH
24978: LD_EXP 111
24982: PUSH
24983: LD_EXP 112
24987: PUSH
24988: LD_EXP 113
24992: PUSH
24993: LD_EXP 114
24997: PUSH
24998: LD_EXP 115
25002: PUSH
25003: LD_EXP 80
25007: PUSH
25008: LD_EXP 81
25012: PUSH
25013: LD_EXP 84
25017: PUSH
25018: LD_EXP 85
25022: PUSH
25023: LD_EXP 86
25027: PUSH
25028: LD_EXP 82
25032: PUSH
25033: LD_EXP 83
25037: PUSH
25038: LD_EXP 91
25042: PUSH
25043: LD_EXP 95
25047: PUSH
25048: LD_EXP 96
25052: PUSH
25053: LD_EXP 98
25057: PUSH
25058: LD_EXP 102
25062: PUSH
25063: LD_EXP 105
25067: PUSH
25068: LD_EXP 106
25072: PUSH
25073: LD_EXP 116
25077: PUSH
25078: LD_EXP 117
25082: PUSH
25083: LD_EXP 118
25087: PUSH
25088: LD_EXP 119
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: ST_TO_ADDR
// tmp :=  ;
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: LD_STRING 
25156: ST_TO_ADDR
// for i = 1 to normalCounter do
25157: LD_ADDR_VAR 0 8
25161: PUSH
25162: DOUBLE
25163: LD_INT 1
25165: DEC
25166: ST_TO_ADDR
25167: LD_EXP 64
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25209
// begin if flags [ i ] then
25175: LD_VAR 0 4
25179: PUSH
25180: LD_VAR 0 8
25184: ARRAY
25185: IFFALSE 25207
// tmp := tmp & i & ; ;
25187: LD_ADDR_VAR 0 3
25191: PUSH
25192: LD_VAR 0 3
25196: PUSH
25197: LD_VAR 0 8
25201: STR
25202: PUSH
25203: LD_STRING ;
25205: STR
25206: ST_TO_ADDR
// end ;
25207: GO 25172
25209: POP
25210: POP
// for i = 1 to hardcoreCounter do
25211: LD_ADDR_VAR 0 8
25215: PUSH
25216: DOUBLE
25217: LD_INT 1
25219: DEC
25220: ST_TO_ADDR
25221: LD_EXP 65
25225: PUSH
25226: FOR_TO
25227: IFFALSE 25273
// begin if flags [ normalCounter + i ] then
25229: LD_VAR 0 4
25233: PUSH
25234: LD_EXP 64
25238: PUSH
25239: LD_VAR 0 8
25243: PLUS
25244: ARRAY
25245: IFFALSE 25271
// tmp := tmp & ( 100 + i ) & ; ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_VAR 0 3
25256: PUSH
25257: LD_INT 100
25259: PUSH
25260: LD_VAR 0 8
25264: PLUS
25265: STR
25266: PUSH
25267: LD_STRING ;
25269: STR
25270: ST_TO_ADDR
// end ;
25271: GO 25226
25273: POP
25274: POP
// if tmp then
25275: LD_VAR 0 3
25279: IFFALSE 25291
// active := tmp ;
25281: LD_ADDR_VAR 0 7
25285: PUSH
25286: LD_VAR 0 3
25290: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25291: LD_STRING getStreamItemsFromMission("
25293: PUSH
25294: LD_VAR 0 5
25298: STR
25299: PUSH
25300: LD_STRING ","
25302: STR
25303: PUSH
25304: LD_VAR 0 6
25308: STR
25309: PUSH
25310: LD_STRING ","
25312: STR
25313: PUSH
25314: LD_VAR 0 7
25318: STR
25319: PUSH
25320: LD_STRING ")
25322: STR
25323: PPUSH
25324: CALL_OW 559
// end else
25328: GO 25337
// ToLua ( getStreamItemsFromMission("","","") ) ;
25330: LD_STRING getStreamItemsFromMission("","","")
25332: PPUSH
25333: CALL_OW 559
// end ;
25337: LD_VAR 0 2
25341: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25342: LD_EXP 63
25346: PUSH
25347: LD_EXP 68
25351: AND
25352: IFFALSE 25476
25354: GO 25356
25356: DISABLE
25357: LD_INT 0
25359: PPUSH
25360: PPUSH
// begin enable ;
25361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25362: LD_ADDR_VAR 0 2
25366: PUSH
25367: LD_INT 22
25369: PUSH
25370: LD_OWVAR 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 34
25384: PUSH
25385: LD_INT 7
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 34
25394: PUSH
25395: LD_INT 45
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 34
25404: PUSH
25405: LD_INT 28
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 34
25414: PUSH
25415: LD_INT 47
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PPUSH
25433: CALL_OW 69
25437: ST_TO_ADDR
// if not tmp then
25438: LD_VAR 0 2
25442: NOT
25443: IFFALSE 25447
// exit ;
25445: GO 25476
// for i in tmp do
25447: LD_ADDR_VAR 0 1
25451: PUSH
25452: LD_VAR 0 2
25456: PUSH
25457: FOR_IN
25458: IFFALSE 25474
// begin SetLives ( i , 0 ) ;
25460: LD_VAR 0 1
25464: PPUSH
25465: LD_INT 0
25467: PPUSH
25468: CALL_OW 234
// end ;
25472: GO 25457
25474: POP
25475: POP
// end ;
25476: PPOPN 2
25478: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25479: LD_EXP 63
25483: PUSH
25484: LD_EXP 69
25488: AND
25489: IFFALSE 25573
25491: GO 25493
25493: DISABLE
25494: LD_INT 0
25496: PPUSH
25497: PPUSH
// begin enable ;
25498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25499: LD_ADDR_VAR 0 2
25503: PUSH
25504: LD_INT 22
25506: PUSH
25507: LD_OWVAR 2
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 32
25518: PUSH
25519: LD_INT 3
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 69
25534: ST_TO_ADDR
// if not tmp then
25535: LD_VAR 0 2
25539: NOT
25540: IFFALSE 25544
// exit ;
25542: GO 25573
// for i in tmp do
25544: LD_ADDR_VAR 0 1
25548: PUSH
25549: LD_VAR 0 2
25553: PUSH
25554: FOR_IN
25555: IFFALSE 25571
// begin SetLives ( i , 0 ) ;
25557: LD_VAR 0 1
25561: PPUSH
25562: LD_INT 0
25564: PPUSH
25565: CALL_OW 234
// end ;
25569: GO 25554
25571: POP
25572: POP
// end ;
25573: PPOPN 2
25575: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25576: LD_EXP 63
25580: PUSH
25581: LD_EXP 66
25585: AND
25586: IFFALSE 25679
25588: GO 25590
25590: DISABLE
25591: LD_INT 0
25593: PPUSH
// begin enable ;
25594: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25595: LD_ADDR_VAR 0 1
25599: PUSH
25600: LD_INT 22
25602: PUSH
25603: LD_OWVAR 2
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: LD_INT 25
25617: PUSH
25618: LD_INT 5
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 25
25627: PUSH
25628: LD_INT 9
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 25
25637: PUSH
25638: LD_INT 8
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PPUSH
25655: CALL_OW 69
25659: PUSH
25660: FOR_IN
25661: IFFALSE 25677
// begin SetClass ( i , 1 ) ;
25663: LD_VAR 0 1
25667: PPUSH
25668: LD_INT 1
25670: PPUSH
25671: CALL_OW 336
// end ;
25675: GO 25660
25677: POP
25678: POP
// end ;
25679: PPOPN 1
25681: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25682: LD_EXP 63
25686: PUSH
25687: LD_EXP 67
25691: AND
25692: PUSH
25693: LD_OWVAR 65
25697: PUSH
25698: LD_INT 7
25700: LESS
25701: AND
25702: IFFALSE 25716
25704: GO 25706
25706: DISABLE
// begin enable ;
25707: ENABLE
// game_speed := 7 ;
25708: LD_ADDR_OWVAR 65
25712: PUSH
25713: LD_INT 7
25715: ST_TO_ADDR
// end ;
25716: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25717: LD_EXP 63
25721: PUSH
25722: LD_EXP 70
25726: AND
25727: IFFALSE 25929
25729: GO 25731
25731: DISABLE
25732: LD_INT 0
25734: PPUSH
25735: PPUSH
25736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25737: LD_ADDR_VAR 0 3
25741: PUSH
25742: LD_INT 81
25744: PUSH
25745: LD_OWVAR 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 21
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 69
25772: ST_TO_ADDR
// if not tmp then
25773: LD_VAR 0 3
25777: NOT
25778: IFFALSE 25782
// exit ;
25780: GO 25929
// if tmp > 5 then
25782: LD_VAR 0 3
25786: PUSH
25787: LD_INT 5
25789: GREATER
25790: IFFALSE 25802
// k := 5 else
25792: LD_ADDR_VAR 0 2
25796: PUSH
25797: LD_INT 5
25799: ST_TO_ADDR
25800: GO 25812
// k := tmp ;
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_VAR 0 3
25811: ST_TO_ADDR
// for i := 1 to k do
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: DOUBLE
25818: LD_INT 1
25820: DEC
25821: ST_TO_ADDR
25822: LD_VAR 0 2
25826: PUSH
25827: FOR_TO
25828: IFFALSE 25927
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25830: LD_VAR 0 3
25834: PUSH
25835: LD_VAR 0 1
25839: ARRAY
25840: PPUSH
25841: LD_VAR 0 1
25845: PUSH
25846: LD_INT 4
25848: MOD
25849: PUSH
25850: LD_INT 1
25852: PLUS
25853: PPUSH
25854: CALL_OW 259
25858: PUSH
25859: LD_INT 10
25861: LESS
25862: IFFALSE 25925
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25864: LD_VAR 0 3
25868: PUSH
25869: LD_VAR 0 1
25873: ARRAY
25874: PPUSH
25875: LD_VAR 0 1
25879: PUSH
25880: LD_INT 4
25882: MOD
25883: PUSH
25884: LD_INT 1
25886: PLUS
25887: PPUSH
25888: LD_VAR 0 3
25892: PUSH
25893: LD_VAR 0 1
25897: ARRAY
25898: PPUSH
25899: LD_VAR 0 1
25903: PUSH
25904: LD_INT 4
25906: MOD
25907: PUSH
25908: LD_INT 1
25910: PLUS
25911: PPUSH
25912: CALL_OW 259
25916: PUSH
25917: LD_INT 1
25919: PLUS
25920: PPUSH
25921: CALL_OW 237
25925: GO 25827
25927: POP
25928: POP
// end ;
25929: PPOPN 3
25931: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25932: LD_EXP 63
25936: PUSH
25937: LD_EXP 71
25941: AND
25942: IFFALSE 25962
25944: GO 25946
25946: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25947: LD_INT 4
25949: PPUSH
25950: LD_OWVAR 2
25954: PPUSH
25955: LD_INT 0
25957: PPUSH
25958: CALL_OW 324
25962: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25963: LD_EXP 63
25967: PUSH
25968: LD_EXP 100
25972: AND
25973: IFFALSE 25993
25975: GO 25977
25977: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25978: LD_INT 19
25980: PPUSH
25981: LD_OWVAR 2
25985: PPUSH
25986: LD_INT 0
25988: PPUSH
25989: CALL_OW 324
25993: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25994: LD_EXP 63
25998: PUSH
25999: LD_EXP 72
26003: AND
26004: IFFALSE 26106
26006: GO 26008
26008: DISABLE
26009: LD_INT 0
26011: PPUSH
26012: PPUSH
// begin enable ;
26013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26014: LD_ADDR_VAR 0 2
26018: PUSH
26019: LD_INT 22
26021: PUSH
26022: LD_OWVAR 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 34
26036: PUSH
26037: LD_INT 11
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 34
26046: PUSH
26047: LD_INT 30
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PPUSH
26063: CALL_OW 69
26067: ST_TO_ADDR
// if not tmp then
26068: LD_VAR 0 2
26072: NOT
26073: IFFALSE 26077
// exit ;
26075: GO 26106
// for i in tmp do
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: LD_VAR 0 2
26086: PUSH
26087: FOR_IN
26088: IFFALSE 26104
// begin SetLives ( i , 0 ) ;
26090: LD_VAR 0 1
26094: PPUSH
26095: LD_INT 0
26097: PPUSH
26098: CALL_OW 234
// end ;
26102: GO 26087
26104: POP
26105: POP
// end ;
26106: PPOPN 2
26108: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26109: LD_EXP 63
26113: PUSH
26114: LD_EXP 73
26118: AND
26119: IFFALSE 26139
26121: GO 26123
26123: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26124: LD_INT 32
26126: PPUSH
26127: LD_OWVAR 2
26131: PPUSH
26132: LD_INT 0
26134: PPUSH
26135: CALL_OW 324
26139: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26140: LD_EXP 63
26144: PUSH
26145: LD_EXP 74
26149: AND
26150: IFFALSE 26331
26152: GO 26154
26154: DISABLE
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
26159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26160: LD_ADDR_VAR 0 2
26164: PUSH
26165: LD_INT 22
26167: PUSH
26168: LD_OWVAR 2
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 33
26179: PUSH
26180: LD_INT 3
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 69
26195: ST_TO_ADDR
// if not tmp then
26196: LD_VAR 0 2
26200: NOT
26201: IFFALSE 26205
// exit ;
26203: GO 26331
// side := 0 ;
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_INT 0
26212: ST_TO_ADDR
// for i := 1 to 8 do
26213: LD_ADDR_VAR 0 1
26217: PUSH
26218: DOUBLE
26219: LD_INT 1
26221: DEC
26222: ST_TO_ADDR
26223: LD_INT 8
26225: PUSH
26226: FOR_TO
26227: IFFALSE 26275
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26229: LD_OWVAR 2
26233: PUSH
26234: LD_VAR 0 1
26238: NONEQUAL
26239: PUSH
26240: LD_OWVAR 2
26244: PPUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 81
26254: PUSH
26255: LD_INT 2
26257: EQUAL
26258: AND
26259: IFFALSE 26273
// begin side := i ;
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: LD_VAR 0 1
26270: ST_TO_ADDR
// break ;
26271: GO 26275
// end ;
26273: GO 26226
26275: POP
26276: POP
// if not side then
26277: LD_VAR 0 3
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26331
// for i := 1 to tmp do
26286: LD_ADDR_VAR 0 1
26290: PUSH
26291: DOUBLE
26292: LD_INT 1
26294: DEC
26295: ST_TO_ADDR
26296: LD_VAR 0 2
26300: PUSH
26301: FOR_TO
26302: IFFALSE 26329
// if Prob ( 60 ) then
26304: LD_INT 60
26306: PPUSH
26307: CALL_OW 13
26311: IFFALSE 26327
// SetSide ( i , side ) ;
26313: LD_VAR 0 1
26317: PPUSH
26318: LD_VAR 0 3
26322: PPUSH
26323: CALL_OW 235
26327: GO 26301
26329: POP
26330: POP
// end ;
26331: PPOPN 3
26333: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26334: LD_EXP 63
26338: PUSH
26339: LD_EXP 76
26343: AND
26344: IFFALSE 26463
26346: GO 26348
26348: DISABLE
26349: LD_INT 0
26351: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26352: LD_ADDR_VAR 0 1
26356: PUSH
26357: LD_INT 22
26359: PUSH
26360: LD_OWVAR 2
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 21
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 3
26381: PUSH
26382: LD_INT 23
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26461
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 257
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 3
26427: PUSH
26428: LD_INT 4
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: IN
26437: IFFALSE 26459
// SetClass ( un , rand ( 1 , 4 ) ) ;
26439: LD_VAR 0 1
26443: PPUSH
26444: LD_INT 1
26446: PPUSH
26447: LD_INT 4
26449: PPUSH
26450: CALL_OW 12
26454: PPUSH
26455: CALL_OW 336
26459: GO 26406
26461: POP
26462: POP
// end ;
26463: PPOPN 1
26465: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26466: LD_EXP 63
26470: PUSH
26471: LD_EXP 75
26475: AND
26476: IFFALSE 26555
26478: GO 26480
26480: DISABLE
26481: LD_INT 0
26483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26484: LD_ADDR_VAR 0 1
26488: PUSH
26489: LD_INT 22
26491: PUSH
26492: LD_OWVAR 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 21
26503: PUSH
26504: LD_INT 3
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PPUSH
26515: CALL_OW 69
26519: ST_TO_ADDR
// if not tmp then
26520: LD_VAR 0 1
26524: NOT
26525: IFFALSE 26529
// exit ;
26527: GO 26555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26529: LD_VAR 0 1
26533: PUSH
26534: LD_INT 1
26536: PPUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 12
26546: ARRAY
26547: PPUSH
26548: LD_INT 100
26550: PPUSH
26551: CALL_OW 234
// end ;
26555: PPOPN 1
26557: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26558: LD_EXP 63
26562: PUSH
26563: LD_EXP 77
26567: AND
26568: IFFALSE 26666
26570: GO 26572
26572: DISABLE
26573: LD_INT 0
26575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26576: LD_ADDR_VAR 0 1
26580: PUSH
26581: LD_INT 22
26583: PUSH
26584: LD_OWVAR 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 21
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PPUSH
26607: CALL_OW 69
26611: ST_TO_ADDR
// if not tmp then
26612: LD_VAR 0 1
26616: NOT
26617: IFFALSE 26621
// exit ;
26619: GO 26666
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26621: LD_VAR 0 1
26625: PUSH
26626: LD_INT 1
26628: PPUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 12
26638: ARRAY
26639: PPUSH
26640: LD_INT 1
26642: PPUSH
26643: LD_INT 4
26645: PPUSH
26646: CALL_OW 12
26650: PPUSH
26651: LD_INT 3000
26653: PPUSH
26654: LD_INT 9000
26656: PPUSH
26657: CALL_OW 12
26661: PPUSH
26662: CALL_OW 492
// end ;
26666: PPOPN 1
26668: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26669: LD_EXP 63
26673: PUSH
26674: LD_EXP 78
26678: AND
26679: IFFALSE 26699
26681: GO 26683
26683: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26684: LD_INT 1
26686: PPUSH
26687: LD_OWVAR 2
26691: PPUSH
26692: LD_INT 0
26694: PPUSH
26695: CALL_OW 324
26699: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26700: LD_EXP 63
26704: PUSH
26705: LD_EXP 79
26709: AND
26710: IFFALSE 26793
26712: GO 26714
26714: DISABLE
26715: LD_INT 0
26717: PPUSH
26718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26719: LD_ADDR_VAR 0 2
26723: PUSH
26724: LD_INT 22
26726: PUSH
26727: LD_OWVAR 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 21
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PPUSH
26750: CALL_OW 69
26754: ST_TO_ADDR
// if not tmp then
26755: LD_VAR 0 2
26759: NOT
26760: IFFALSE 26764
// exit ;
26762: GO 26793
// for i in tmp do
26764: LD_ADDR_VAR 0 1
26768: PUSH
26769: LD_VAR 0 2
26773: PUSH
26774: FOR_IN
26775: IFFALSE 26791
// SetBLevel ( i , 10 ) ;
26777: LD_VAR 0 1
26781: PPUSH
26782: LD_INT 10
26784: PPUSH
26785: CALL_OW 241
26789: GO 26774
26791: POP
26792: POP
// end ;
26793: PPOPN 2
26795: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26796: LD_EXP 63
26800: PUSH
26801: LD_EXP 80
26805: AND
26806: IFFALSE 26917
26808: GO 26810
26810: DISABLE
26811: LD_INT 0
26813: PPUSH
26814: PPUSH
26815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_INT 22
26823: PUSH
26824: LD_OWVAR 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 25
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 69
26851: ST_TO_ADDR
// if not tmp then
26852: LD_VAR 0 3
26856: NOT
26857: IFFALSE 26861
// exit ;
26859: GO 26917
// un := tmp [ rand ( 1 , tmp ) ] ;
26861: LD_ADDR_VAR 0 2
26865: PUSH
26866: LD_VAR 0 3
26870: PUSH
26871: LD_INT 1
26873: PPUSH
26874: LD_VAR 0 3
26878: PPUSH
26879: CALL_OW 12
26883: ARRAY
26884: ST_TO_ADDR
// if Crawls ( un ) then
26885: LD_VAR 0 2
26889: PPUSH
26890: CALL_OW 318
26894: IFFALSE 26905
// ComWalk ( un ) ;
26896: LD_VAR 0 2
26900: PPUSH
26901: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26905: LD_VAR 0 2
26909: PPUSH
26910: LD_INT 5
26912: PPUSH
26913: CALL_OW 336
// end ;
26917: PPOPN 3
26919: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26920: LD_EXP 63
26924: PUSH
26925: LD_EXP 81
26929: AND
26930: PUSH
26931: LD_OWVAR 67
26935: PUSH
26936: LD_INT 4
26938: LESS
26939: AND
26940: IFFALSE 26959
26942: GO 26944
26944: DISABLE
// begin Difficulty := Difficulty + 1 ;
26945: LD_ADDR_OWVAR 67
26949: PUSH
26950: LD_OWVAR 67
26954: PUSH
26955: LD_INT 1
26957: PLUS
26958: ST_TO_ADDR
// end ;
26959: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26960: LD_EXP 63
26964: PUSH
26965: LD_EXP 82
26969: AND
26970: IFFALSE 27073
26972: GO 26974
26974: DISABLE
26975: LD_INT 0
26977: PPUSH
// begin for i := 1 to 5 do
26978: LD_ADDR_VAR 0 1
26982: PUSH
26983: DOUBLE
26984: LD_INT 1
26986: DEC
26987: ST_TO_ADDR
26988: LD_INT 5
26990: PUSH
26991: FOR_TO
26992: IFFALSE 27071
// begin uc_nation := nation_nature ;
26994: LD_ADDR_OWVAR 21
26998: PUSH
26999: LD_INT 0
27001: ST_TO_ADDR
// uc_side := 0 ;
27002: LD_ADDR_OWVAR 20
27006: PUSH
27007: LD_INT 0
27009: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27010: LD_ADDR_OWVAR 29
27014: PUSH
27015: LD_INT 12
27017: PUSH
27018: LD_INT 12
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: ST_TO_ADDR
// hc_agressivity := 20 ;
27025: LD_ADDR_OWVAR 35
27029: PUSH
27030: LD_INT 20
27032: ST_TO_ADDR
// hc_class := class_tiger ;
27033: LD_ADDR_OWVAR 28
27037: PUSH
27038: LD_INT 14
27040: ST_TO_ADDR
// hc_gallery :=  ;
27041: LD_ADDR_OWVAR 33
27045: PUSH
27046: LD_STRING 
27048: ST_TO_ADDR
// hc_name :=  ;
27049: LD_ADDR_OWVAR 26
27053: PUSH
27054: LD_STRING 
27056: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27057: CALL_OW 44
27061: PPUSH
27062: LD_INT 0
27064: PPUSH
27065: CALL_OW 51
// end ;
27069: GO 26991
27071: POP
27072: POP
// end ;
27073: PPOPN 1
27075: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27076: LD_EXP 63
27080: PUSH
27081: LD_EXP 83
27085: AND
27086: IFFALSE 27095
27088: GO 27090
27090: DISABLE
// StreamSibBomb ;
27091: CALL 27096 0 0
27095: END
// export function StreamSibBomb ; var i , x , y ; begin
27096: LD_INT 0
27098: PPUSH
27099: PPUSH
27100: PPUSH
27101: PPUSH
// result := false ;
27102: LD_ADDR_VAR 0 1
27106: PUSH
27107: LD_INT 0
27109: ST_TO_ADDR
// for i := 1 to 16 do
27110: LD_ADDR_VAR 0 2
27114: PUSH
27115: DOUBLE
27116: LD_INT 1
27118: DEC
27119: ST_TO_ADDR
27120: LD_INT 16
27122: PUSH
27123: FOR_TO
27124: IFFALSE 27323
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27126: LD_ADDR_VAR 0 3
27130: PUSH
27131: LD_INT 10
27133: PUSH
27134: LD_INT 20
27136: PUSH
27137: LD_INT 30
27139: PUSH
27140: LD_INT 40
27142: PUSH
27143: LD_INT 50
27145: PUSH
27146: LD_INT 60
27148: PUSH
27149: LD_INT 70
27151: PUSH
27152: LD_INT 80
27154: PUSH
27155: LD_INT 90
27157: PUSH
27158: LD_INT 100
27160: PUSH
27161: LD_INT 110
27163: PUSH
27164: LD_INT 120
27166: PUSH
27167: LD_INT 130
27169: PUSH
27170: LD_INT 140
27172: PUSH
27173: LD_INT 150
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PPUSH
27196: LD_INT 15
27198: PPUSH
27199: CALL_OW 12
27203: ARRAY
27204: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27205: LD_ADDR_VAR 0 4
27209: PUSH
27210: LD_INT 10
27212: PUSH
27213: LD_INT 20
27215: PUSH
27216: LD_INT 30
27218: PUSH
27219: LD_INT 40
27221: PUSH
27222: LD_INT 50
27224: PUSH
27225: LD_INT 60
27227: PUSH
27228: LD_INT 70
27230: PUSH
27231: LD_INT 80
27233: PUSH
27234: LD_INT 90
27236: PUSH
27237: LD_INT 100
27239: PUSH
27240: LD_INT 110
27242: PUSH
27243: LD_INT 120
27245: PUSH
27246: LD_INT 130
27248: PUSH
27249: LD_INT 140
27251: PUSH
27252: LD_INT 150
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PPUSH
27275: LD_INT 15
27277: PPUSH
27278: CALL_OW 12
27282: ARRAY
27283: ST_TO_ADDR
// if ValidHex ( x , y ) then
27284: LD_VAR 0 3
27288: PPUSH
27289: LD_VAR 0 4
27293: PPUSH
27294: CALL_OW 488
27298: IFFALSE 27321
// begin result := [ x , y ] ;
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_VAR 0 3
27309: PUSH
27310: LD_VAR 0 4
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: ST_TO_ADDR
// break ;
27319: GO 27323
// end ; end ;
27321: GO 27123
27323: POP
27324: POP
// if result then
27325: LD_VAR 0 1
27329: IFFALSE 27389
// begin ToLua ( playSibBomb() ) ;
27331: LD_STRING playSibBomb()
27333: PPUSH
27334: CALL_OW 559
// wait ( 0 0$14 ) ;
27338: LD_INT 490
27340: PPUSH
27341: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27345: LD_VAR 0 1
27349: PUSH
27350: LD_INT 1
27352: ARRAY
27353: PPUSH
27354: LD_VAR 0 1
27358: PUSH
27359: LD_INT 2
27361: ARRAY
27362: PPUSH
27363: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27367: LD_VAR 0 1
27371: PUSH
27372: LD_INT 1
27374: ARRAY
27375: PPUSH
27376: LD_VAR 0 1
27380: PUSH
27381: LD_INT 2
27383: ARRAY
27384: PPUSH
27385: CALL_OW 429
// end ; end ;
27389: LD_VAR 0 1
27393: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27394: LD_EXP 63
27398: PUSH
27399: LD_EXP 85
27403: AND
27404: IFFALSE 27416
27406: GO 27408
27408: DISABLE
// YouLost (  ) ;
27409: LD_STRING 
27411: PPUSH
27412: CALL_OW 104
27416: END
// every 0 0$1 trigger StreamModeActive and sFog do
27417: LD_EXP 63
27421: PUSH
27422: LD_EXP 84
27426: AND
27427: IFFALSE 27441
27429: GO 27431
27431: DISABLE
// FogOff ( your_side ) ;
27432: LD_OWVAR 2
27436: PPUSH
27437: CALL_OW 344
27441: END
// every 0 0$1 trigger StreamModeActive and sSun do
27442: LD_EXP 63
27446: PUSH
27447: LD_EXP 86
27451: AND
27452: IFFALSE 27480
27454: GO 27456
27456: DISABLE
// begin solar_recharge_percent := 0 ;
27457: LD_ADDR_OWVAR 79
27461: PUSH
27462: LD_INT 0
27464: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27465: LD_INT 10500
27467: PPUSH
27468: CALL_OW 67
// solar_recharge_percent := 100 ;
27472: LD_ADDR_OWVAR 79
27476: PUSH
27477: LD_INT 100
27479: ST_TO_ADDR
// end ;
27480: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27481: LD_EXP 63
27485: PUSH
27486: LD_EXP 87
27490: AND
27491: IFFALSE 27730
27493: GO 27495
27495: DISABLE
27496: LD_INT 0
27498: PPUSH
27499: PPUSH
27500: PPUSH
// begin tmp := [ ] ;
27501: LD_ADDR_VAR 0 3
27505: PUSH
27506: EMPTY
27507: ST_TO_ADDR
// for i := 1 to 6 do
27508: LD_ADDR_VAR 0 1
27512: PUSH
27513: DOUBLE
27514: LD_INT 1
27516: DEC
27517: ST_TO_ADDR
27518: LD_INT 6
27520: PUSH
27521: FOR_TO
27522: IFFALSE 27627
// begin uc_nation := nation_nature ;
27524: LD_ADDR_OWVAR 21
27528: PUSH
27529: LD_INT 0
27531: ST_TO_ADDR
// uc_side := 0 ;
27532: LD_ADDR_OWVAR 20
27536: PUSH
27537: LD_INT 0
27539: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27540: LD_ADDR_OWVAR 29
27544: PUSH
27545: LD_INT 12
27547: PUSH
27548: LD_INT 12
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: ST_TO_ADDR
// hc_agressivity := 20 ;
27555: LD_ADDR_OWVAR 35
27559: PUSH
27560: LD_INT 20
27562: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27563: LD_ADDR_OWVAR 28
27567: PUSH
27568: LD_INT 17
27570: ST_TO_ADDR
// hc_gallery :=  ;
27571: LD_ADDR_OWVAR 33
27575: PUSH
27576: LD_STRING 
27578: ST_TO_ADDR
// hc_name :=  ;
27579: LD_ADDR_OWVAR 26
27583: PUSH
27584: LD_STRING 
27586: ST_TO_ADDR
// un := CreateHuman ;
27587: LD_ADDR_VAR 0 2
27591: PUSH
27592: CALL_OW 44
27596: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_INT 1
27604: PPUSH
27605: CALL_OW 51
// tmp := tmp ^ un ;
27609: LD_ADDR_VAR 0 3
27613: PUSH
27614: LD_VAR 0 3
27618: PUSH
27619: LD_VAR 0 2
27623: ADD
27624: ST_TO_ADDR
// end ;
27625: GO 27521
27627: POP
27628: POP
// repeat wait ( 0 0$1 ) ;
27629: LD_INT 35
27631: PPUSH
27632: CALL_OW 67
// for un in tmp do
27636: LD_ADDR_VAR 0 2
27640: PUSH
27641: LD_VAR 0 3
27645: PUSH
27646: FOR_IN
27647: IFFALSE 27721
// begin if IsDead ( un ) then
27649: LD_VAR 0 2
27653: PPUSH
27654: CALL_OW 301
27658: IFFALSE 27678
// begin tmp := tmp diff un ;
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: LD_VAR 0 3
27669: PUSH
27670: LD_VAR 0 2
27674: DIFF
27675: ST_TO_ADDR
// continue ;
27676: GO 27646
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27678: LD_VAR 0 2
27682: PPUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PPUSH
27700: CALL_OW 69
27704: PPUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: CALL_OW 74
27714: PPUSH
27715: CALL_OW 115
// end ;
27719: GO 27646
27721: POP
27722: POP
// until not tmp ;
27723: LD_VAR 0 3
27727: NOT
27728: IFFALSE 27629
// end ;
27730: PPOPN 3
27732: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27733: LD_EXP 63
27737: PUSH
27738: LD_EXP 88
27742: AND
27743: IFFALSE 27797
27745: GO 27747
27747: DISABLE
// begin ToLua ( displayTroll(); ) ;
27748: LD_STRING displayTroll();
27750: PPUSH
27751: CALL_OW 559
// wait ( 3 3$00 ) ;
27755: LD_INT 6300
27757: PPUSH
27758: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27762: LD_STRING hideTroll();
27764: PPUSH
27765: CALL_OW 559
// wait ( 1 1$00 ) ;
27769: LD_INT 2100
27771: PPUSH
27772: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27776: LD_STRING displayTroll();
27778: PPUSH
27779: CALL_OW 559
// wait ( 1 1$00 ) ;
27783: LD_INT 2100
27785: PPUSH
27786: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27790: LD_STRING hideTroll();
27792: PPUSH
27793: CALL_OW 559
// end ;
27797: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27798: LD_EXP 63
27802: PUSH
27803: LD_EXP 89
27807: AND
27808: IFFALSE 27871
27810: GO 27812
27812: DISABLE
27813: LD_INT 0
27815: PPUSH
// begin p := 0 ;
27816: LD_ADDR_VAR 0 1
27820: PUSH
27821: LD_INT 0
27823: ST_TO_ADDR
// repeat game_speed := 1 ;
27824: LD_ADDR_OWVAR 65
27828: PUSH
27829: LD_INT 1
27831: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27832: LD_INT 35
27834: PPUSH
27835: CALL_OW 67
// p := p + 1 ;
27839: LD_ADDR_VAR 0 1
27843: PUSH
27844: LD_VAR 0 1
27848: PUSH
27849: LD_INT 1
27851: PLUS
27852: ST_TO_ADDR
// until p >= 60 ;
27853: LD_VAR 0 1
27857: PUSH
27858: LD_INT 60
27860: GREATEREQUAL
27861: IFFALSE 27824
// game_speed := 4 ;
27863: LD_ADDR_OWVAR 65
27867: PUSH
27868: LD_INT 4
27870: ST_TO_ADDR
// end ;
27871: PPOPN 1
27873: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27874: LD_EXP 63
27878: PUSH
27879: LD_EXP 90
27883: AND
27884: IFFALSE 28030
27886: GO 27888
27888: DISABLE
27889: LD_INT 0
27891: PPUSH
27892: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27893: LD_ADDR_VAR 0 1
27897: PUSH
27898: LD_INT 22
27900: PUSH
27901: LD_OWVAR 2
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 30
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 30
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PPUSH
27942: CALL_OW 69
27946: ST_TO_ADDR
// if not depot then
27947: LD_VAR 0 1
27951: NOT
27952: IFFALSE 27956
// exit ;
27954: GO 28030
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27956: LD_ADDR_VAR 0 2
27960: PUSH
27961: LD_VAR 0 1
27965: PUSH
27966: LD_INT 1
27968: PPUSH
27969: LD_VAR 0 1
27973: PPUSH
27974: CALL_OW 12
27978: ARRAY
27979: PPUSH
27980: CALL_OW 274
27984: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_INT 1
27992: PPUSH
27993: LD_INT 0
27995: PPUSH
27996: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28000: LD_VAR 0 2
28004: PPUSH
28005: LD_INT 2
28007: PPUSH
28008: LD_INT 0
28010: PPUSH
28011: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28015: LD_VAR 0 2
28019: PPUSH
28020: LD_INT 3
28022: PPUSH
28023: LD_INT 0
28025: PPUSH
28026: CALL_OW 277
// end ;
28030: PPOPN 2
28032: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28033: LD_EXP 63
28037: PUSH
28038: LD_EXP 91
28042: AND
28043: IFFALSE 28140
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28051: LD_ADDR_VAR 0 1
28055: PUSH
28056: LD_INT 22
28058: PUSH
28059: LD_OWVAR 2
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 21
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 3
28080: PUSH
28081: LD_INT 23
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: PPUSH
28100: CALL_OW 69
28104: ST_TO_ADDR
// if not tmp then
28105: LD_VAR 0 1
28109: NOT
28110: IFFALSE 28114
// exit ;
28112: GO 28140
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28114: LD_VAR 0 1
28118: PUSH
28119: LD_INT 1
28121: PPUSH
28122: LD_VAR 0 1
28126: PPUSH
28127: CALL_OW 12
28131: ARRAY
28132: PPUSH
28133: LD_INT 200
28135: PPUSH
28136: CALL_OW 234
// end ;
28140: PPOPN 1
28142: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28143: LD_EXP 63
28147: PUSH
28148: LD_EXP 92
28152: AND
28153: IFFALSE 28232
28155: GO 28157
28157: DISABLE
28158: LD_INT 0
28160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28161: LD_ADDR_VAR 0 1
28165: PUSH
28166: LD_INT 22
28168: PUSH
28169: LD_OWVAR 2
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 21
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PPUSH
28192: CALL_OW 69
28196: ST_TO_ADDR
// if not tmp then
28197: LD_VAR 0 1
28201: NOT
28202: IFFALSE 28206
// exit ;
28204: GO 28232
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28206: LD_VAR 0 1
28210: PUSH
28211: LD_INT 1
28213: PPUSH
28214: LD_VAR 0 1
28218: PPUSH
28219: CALL_OW 12
28223: ARRAY
28224: PPUSH
28225: LD_INT 60
28227: PPUSH
28228: CALL_OW 234
// end ;
28232: PPOPN 1
28234: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28235: LD_EXP 63
28239: PUSH
28240: LD_EXP 93
28244: AND
28245: IFFALSE 28344
28247: GO 28249
28249: DISABLE
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
// begin enable ;
28254: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28255: LD_ADDR_VAR 0 1
28259: PUSH
28260: LD_INT 22
28262: PUSH
28263: LD_OWVAR 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 61
28274: PUSH
28275: EMPTY
28276: LIST
28277: PUSH
28278: LD_INT 33
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: PPUSH
28293: CALL_OW 69
28297: ST_TO_ADDR
// if not tmp then
28298: LD_VAR 0 1
28302: NOT
28303: IFFALSE 28307
// exit ;
28305: GO 28344
// for i in tmp do
28307: LD_ADDR_VAR 0 2
28311: PUSH
28312: LD_VAR 0 1
28316: PUSH
28317: FOR_IN
28318: IFFALSE 28342
// if IsControledBy ( i ) then
28320: LD_VAR 0 2
28324: PPUSH
28325: CALL_OW 312
28329: IFFALSE 28340
// ComUnlink ( i ) ;
28331: LD_VAR 0 2
28335: PPUSH
28336: CALL_OW 136
28340: GO 28317
28342: POP
28343: POP
// end ;
28344: PPOPN 2
28346: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28347: LD_EXP 63
28351: PUSH
28352: LD_EXP 94
28356: AND
28357: IFFALSE 28497
28359: GO 28361
28361: DISABLE
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
// begin ToLua ( displayPowell(); ) ;
28366: LD_STRING displayPowell();
28368: PPUSH
28369: CALL_OW 559
// uc_side := 0 ;
28373: LD_ADDR_OWVAR 20
28377: PUSH
28378: LD_INT 0
28380: ST_TO_ADDR
// uc_nation := 2 ;
28381: LD_ADDR_OWVAR 21
28385: PUSH
28386: LD_INT 2
28388: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28389: LD_ADDR_OWVAR 37
28393: PUSH
28394: LD_INT 14
28396: ST_TO_ADDR
// vc_engine := engine_siberite ;
28397: LD_ADDR_OWVAR 39
28401: PUSH
28402: LD_INT 3
28404: ST_TO_ADDR
// vc_control := control_apeman ;
28405: LD_ADDR_OWVAR 38
28409: PUSH
28410: LD_INT 5
28412: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28413: LD_ADDR_OWVAR 40
28417: PUSH
28418: LD_INT 29
28420: ST_TO_ADDR
// un := CreateVehicle ;
28421: LD_ADDR_VAR 0 2
28425: PUSH
28426: CALL_OW 45
28430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28431: LD_VAR 0 2
28435: PPUSH
28436: LD_INT 1
28438: PPUSH
28439: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28443: LD_INT 35
28445: PPUSH
28446: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_INT 22
28457: PUSH
28458: LD_OWVAR 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PPUSH
28467: CALL_OW 69
28471: PPUSH
28472: LD_VAR 0 2
28476: PPUSH
28477: CALL_OW 74
28481: PPUSH
28482: CALL_OW 115
// until IsDead ( un ) ;
28486: LD_VAR 0 2
28490: PPUSH
28491: CALL_OW 301
28495: IFFALSE 28443
// end ;
28497: PPOPN 2
28499: END
// every 0 0$1 trigger StreamModeActive and sStu do
28500: LD_EXP 63
28504: PUSH
28505: LD_EXP 102
28509: AND
28510: IFFALSE 28526
28512: GO 28514
28514: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28515: LD_STRING displayStucuk();
28517: PPUSH
28518: CALL_OW 559
// ResetFog ;
28522: CALL_OW 335
// end ;
28526: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28527: LD_EXP 63
28531: PUSH
28532: LD_EXP 95
28536: AND
28537: IFFALSE 28678
28539: GO 28541
28541: DISABLE
28542: LD_INT 0
28544: PPUSH
28545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28546: LD_ADDR_VAR 0 2
28550: PUSH
28551: LD_INT 22
28553: PUSH
28554: LD_OWVAR 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 21
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PPUSH
28577: CALL_OW 69
28581: ST_TO_ADDR
// if not tmp then
28582: LD_VAR 0 2
28586: NOT
28587: IFFALSE 28591
// exit ;
28589: GO 28678
// un := tmp [ rand ( 1 , tmp ) ] ;
28591: LD_ADDR_VAR 0 1
28595: PUSH
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL_OW 12
28613: ARRAY
28614: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28615: LD_VAR 0 1
28619: PPUSH
28620: LD_INT 0
28622: PPUSH
28623: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28627: LD_VAR 0 1
28631: PPUSH
28632: LD_OWVAR 3
28636: PUSH
28637: LD_VAR 0 1
28641: DIFF
28642: PPUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 74
28652: PPUSH
28653: CALL_OW 115
// wait ( 0 0$20 ) ;
28657: LD_INT 700
28659: PPUSH
28660: CALL_OW 67
// SetSide ( un , your_side ) ;
28664: LD_VAR 0 1
28668: PPUSH
28669: LD_OWVAR 2
28673: PPUSH
28674: CALL_OW 235
// end ;
28678: PPOPN 2
28680: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28681: LD_EXP 63
28685: PUSH
28686: LD_EXP 96
28690: AND
28691: IFFALSE 28797
28693: GO 28695
28695: DISABLE
28696: LD_INT 0
28698: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28699: LD_ADDR_VAR 0 1
28703: PUSH
28704: LD_INT 22
28706: PUSH
28707: LD_OWVAR 2
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: LD_INT 30
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 30
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PPUSH
28748: CALL_OW 69
28752: ST_TO_ADDR
// if not depot then
28753: LD_VAR 0 1
28757: NOT
28758: IFFALSE 28762
// exit ;
28760: GO 28797
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28762: LD_VAR 0 1
28766: PUSH
28767: LD_INT 1
28769: ARRAY
28770: PPUSH
28771: CALL_OW 250
28775: PPUSH
28776: LD_VAR 0 1
28780: PUSH
28781: LD_INT 1
28783: ARRAY
28784: PPUSH
28785: CALL_OW 251
28789: PPUSH
28790: LD_INT 70
28792: PPUSH
28793: CALL_OW 495
// end ;
28797: PPOPN 1
28799: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28800: LD_EXP 63
28804: PUSH
28805: LD_EXP 97
28809: AND
28810: IFFALSE 29021
28812: GO 28814
28814: DISABLE
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
28819: PPUSH
28820: PPUSH
28821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28822: LD_ADDR_VAR 0 5
28826: PUSH
28827: LD_INT 22
28829: PUSH
28830: LD_OWVAR 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 21
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PPUSH
28853: CALL_OW 69
28857: ST_TO_ADDR
// if not tmp then
28858: LD_VAR 0 5
28862: NOT
28863: IFFALSE 28867
// exit ;
28865: GO 29021
// for i in tmp do
28867: LD_ADDR_VAR 0 1
28871: PUSH
28872: LD_VAR 0 5
28876: PUSH
28877: FOR_IN
28878: IFFALSE 29019
// begin d := rand ( 0 , 5 ) ;
28880: LD_ADDR_VAR 0 4
28884: PUSH
28885: LD_INT 0
28887: PPUSH
28888: LD_INT 5
28890: PPUSH
28891: CALL_OW 12
28895: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28896: LD_ADDR_VAR 0 2
28900: PUSH
28901: LD_VAR 0 1
28905: PPUSH
28906: CALL_OW 250
28910: PPUSH
28911: LD_VAR 0 4
28915: PPUSH
28916: LD_INT 3
28918: PPUSH
28919: LD_INT 12
28921: PPUSH
28922: CALL_OW 12
28926: PPUSH
28927: CALL_OW 272
28931: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28932: LD_ADDR_VAR 0 3
28936: PUSH
28937: LD_VAR 0 1
28941: PPUSH
28942: CALL_OW 251
28946: PPUSH
28947: LD_VAR 0 4
28951: PPUSH
28952: LD_INT 3
28954: PPUSH
28955: LD_INT 12
28957: PPUSH
28958: CALL_OW 12
28962: PPUSH
28963: CALL_OW 273
28967: ST_TO_ADDR
// if ValidHex ( x , y ) then
28968: LD_VAR 0 2
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: CALL_OW 488
28982: IFFALSE 29017
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28984: LD_VAR 0 1
28988: PPUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: LD_INT 3
29001: PPUSH
29002: LD_INT 6
29004: PPUSH
29005: CALL_OW 12
29009: PPUSH
29010: LD_INT 1
29012: PPUSH
29013: CALL_OW 483
// end ;
29017: GO 28877
29019: POP
29020: POP
// end ;
29021: PPOPN 5
29023: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29024: LD_EXP 63
29028: PUSH
29029: LD_EXP 98
29033: AND
29034: IFFALSE 29128
29036: GO 29038
29038: DISABLE
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29043: LD_ADDR_VAR 0 2
29047: PUSH
29048: LD_INT 22
29050: PUSH
29051: LD_OWVAR 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 32
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 21
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 69
29089: ST_TO_ADDR
// if not tmp then
29090: LD_VAR 0 2
29094: NOT
29095: IFFALSE 29099
// exit ;
29097: GO 29128
// for i in tmp do
29099: LD_ADDR_VAR 0 1
29103: PUSH
29104: LD_VAR 0 2
29108: PUSH
29109: FOR_IN
29110: IFFALSE 29126
// SetFuel ( i , 0 ) ;
29112: LD_VAR 0 1
29116: PPUSH
29117: LD_INT 0
29119: PPUSH
29120: CALL_OW 240
29124: GO 29109
29126: POP
29127: POP
// end ;
29128: PPOPN 2
29130: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29131: LD_EXP 63
29135: PUSH
29136: LD_EXP 99
29140: AND
29141: IFFALSE 29207
29143: GO 29145
29145: DISABLE
29146: LD_INT 0
29148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29149: LD_ADDR_VAR 0 1
29153: PUSH
29154: LD_INT 22
29156: PUSH
29157: LD_OWVAR 2
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 30
29168: PUSH
29169: LD_INT 29
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PPUSH
29180: CALL_OW 69
29184: ST_TO_ADDR
// if not tmp then
29185: LD_VAR 0 1
29189: NOT
29190: IFFALSE 29194
// exit ;
29192: GO 29207
// DestroyUnit ( tmp [ 1 ] ) ;
29194: LD_VAR 0 1
29198: PUSH
29199: LD_INT 1
29201: ARRAY
29202: PPUSH
29203: CALL_OW 65
// end ;
29207: PPOPN 1
29209: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29210: LD_EXP 63
29214: PUSH
29215: LD_EXP 101
29219: AND
29220: IFFALSE 29349
29222: GO 29224
29224: DISABLE
29225: LD_INT 0
29227: PPUSH
// begin uc_side := 0 ;
29228: LD_ADDR_OWVAR 20
29232: PUSH
29233: LD_INT 0
29235: ST_TO_ADDR
// uc_nation := nation_arabian ;
29236: LD_ADDR_OWVAR 21
29240: PUSH
29241: LD_INT 2
29243: ST_TO_ADDR
// hc_gallery :=  ;
29244: LD_ADDR_OWVAR 33
29248: PUSH
29249: LD_STRING 
29251: ST_TO_ADDR
// hc_name :=  ;
29252: LD_ADDR_OWVAR 26
29256: PUSH
29257: LD_STRING 
29259: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29260: LD_INT 1
29262: PPUSH
29263: LD_INT 11
29265: PPUSH
29266: LD_INT 10
29268: PPUSH
29269: CALL_OW 380
// un := CreateHuman ;
29273: LD_ADDR_VAR 0 1
29277: PUSH
29278: CALL_OW 44
29282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29283: LD_VAR 0 1
29287: PPUSH
29288: LD_INT 1
29290: PPUSH
29291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29295: LD_INT 35
29297: PPUSH
29298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29302: LD_VAR 0 1
29306: PPUSH
29307: LD_INT 22
29309: PUSH
29310: LD_OWVAR 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PPUSH
29319: CALL_OW 69
29323: PPUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 74
29333: PPUSH
29334: CALL_OW 115
// until IsDead ( un ) ;
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 301
29347: IFFALSE 29295
// end ;
29349: PPOPN 1
29351: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29352: LD_EXP 63
29356: PUSH
29357: LD_EXP 103
29361: AND
29362: IFFALSE 29374
29364: GO 29366
29366: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29367: LD_STRING earthquake(getX(game), 0, 32)
29369: PPUSH
29370: CALL_OW 559
29374: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29375: LD_EXP 63
29379: PUSH
29380: LD_EXP 104
29384: AND
29385: IFFALSE 29476
29387: GO 29389
29389: DISABLE
29390: LD_INT 0
29392: PPUSH
// begin enable ;
29393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29394: LD_ADDR_VAR 0 1
29398: PUSH
29399: LD_INT 22
29401: PUSH
29402: LD_OWVAR 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 21
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 33
29423: PUSH
29424: LD_INT 3
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: PPUSH
29436: CALL_OW 69
29440: ST_TO_ADDR
// if not tmp then
29441: LD_VAR 0 1
29445: NOT
29446: IFFALSE 29450
// exit ;
29448: GO 29476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29450: LD_VAR 0 1
29454: PUSH
29455: LD_INT 1
29457: PPUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 12
29467: ARRAY
29468: PPUSH
29469: LD_INT 1
29471: PPUSH
29472: CALL_OW 234
// end ;
29476: PPOPN 1
29478: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29479: LD_EXP 63
29483: PUSH
29484: LD_EXP 105
29488: AND
29489: IFFALSE 29630
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
29497: PPUSH
29498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29499: LD_ADDR_VAR 0 3
29503: PUSH
29504: LD_INT 22
29506: PUSH
29507: LD_OWVAR 2
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 25
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PPUSH
29530: CALL_OW 69
29534: ST_TO_ADDR
// if not tmp then
29535: LD_VAR 0 3
29539: NOT
29540: IFFALSE 29544
// exit ;
29542: GO 29630
// un := tmp [ rand ( 1 , tmp ) ] ;
29544: LD_ADDR_VAR 0 2
29548: PUSH
29549: LD_VAR 0 3
29553: PUSH
29554: LD_INT 1
29556: PPUSH
29557: LD_VAR 0 3
29561: PPUSH
29562: CALL_OW 12
29566: ARRAY
29567: ST_TO_ADDR
// if Crawls ( un ) then
29568: LD_VAR 0 2
29572: PPUSH
29573: CALL_OW 318
29577: IFFALSE 29588
// ComWalk ( un ) ;
29579: LD_VAR 0 2
29583: PPUSH
29584: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29588: LD_VAR 0 2
29592: PPUSH
29593: LD_INT 9
29595: PPUSH
29596: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29600: LD_INT 28
29602: PPUSH
29603: LD_OWVAR 2
29607: PPUSH
29608: LD_INT 2
29610: PPUSH
29611: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29615: LD_INT 29
29617: PPUSH
29618: LD_OWVAR 2
29622: PPUSH
29623: LD_INT 2
29625: PPUSH
29626: CALL_OW 322
// end ;
29630: PPOPN 3
29632: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29633: LD_EXP 63
29637: PUSH
29638: LD_EXP 106
29642: AND
29643: IFFALSE 29754
29645: GO 29647
29647: DISABLE
29648: LD_INT 0
29650: PPUSH
29651: PPUSH
29652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29653: LD_ADDR_VAR 0 3
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_OWVAR 2
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 25
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 3
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29754
// un := tmp [ rand ( 1 , tmp ) ] ;
29698: LD_ADDR_VAR 0 2
29702: PUSH
29703: LD_VAR 0 3
29707: PUSH
29708: LD_INT 1
29710: PPUSH
29711: LD_VAR 0 3
29715: PPUSH
29716: CALL_OW 12
29720: ARRAY
29721: ST_TO_ADDR
// if Crawls ( un ) then
29722: LD_VAR 0 2
29726: PPUSH
29727: CALL_OW 318
29731: IFFALSE 29742
// ComWalk ( un ) ;
29733: LD_VAR 0 2
29737: PPUSH
29738: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29742: LD_VAR 0 2
29746: PPUSH
29747: LD_INT 8
29749: PPUSH
29750: CALL_OW 336
// end ;
29754: PPOPN 3
29756: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29757: LD_EXP 63
29761: PUSH
29762: LD_EXP 107
29766: AND
29767: IFFALSE 29911
29769: GO 29771
29771: DISABLE
29772: LD_INT 0
29774: PPUSH
29775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29776: LD_ADDR_VAR 0 2
29780: PUSH
29781: LD_INT 22
29783: PUSH
29784: LD_OWVAR 2
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 21
29795: PUSH
29796: LD_INT 2
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: LD_INT 34
29808: PUSH
29809: LD_INT 12
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 34
29818: PUSH
29819: LD_INT 51
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 34
29828: PUSH
29829: LD_INT 32
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: PPUSH
29847: CALL_OW 69
29851: ST_TO_ADDR
// if not tmp then
29852: LD_VAR 0 2
29856: NOT
29857: IFFALSE 29861
// exit ;
29859: GO 29911
// for i in tmp do
29861: LD_ADDR_VAR 0 1
29865: PUSH
29866: LD_VAR 0 2
29870: PUSH
29871: FOR_IN
29872: IFFALSE 29909
// if GetCargo ( i , mat_artifact ) = 0 then
29874: LD_VAR 0 1
29878: PPUSH
29879: LD_INT 4
29881: PPUSH
29882: CALL_OW 289
29886: PUSH
29887: LD_INT 0
29889: EQUAL
29890: IFFALSE 29907
// SetCargo ( i , mat_siberit , 100 ) ;
29892: LD_VAR 0 1
29896: PPUSH
29897: LD_INT 3
29899: PPUSH
29900: LD_INT 100
29902: PPUSH
29903: CALL_OW 290
29907: GO 29871
29909: POP
29910: POP
// end ;
29911: PPOPN 2
29913: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29914: LD_EXP 63
29918: PUSH
29919: LD_EXP 108
29923: AND
29924: IFFALSE 30107
29926: GO 29928
29928: DISABLE
29929: LD_INT 0
29931: PPUSH
29932: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29933: LD_ADDR_VAR 0 2
29937: PUSH
29938: LD_INT 22
29940: PUSH
29941: LD_OWVAR 2
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 69
29954: ST_TO_ADDR
// if not tmp then
29955: LD_VAR 0 2
29959: NOT
29960: IFFALSE 29964
// exit ;
29962: GO 30107
// for i := 1 to 2 do
29964: LD_ADDR_VAR 0 1
29968: PUSH
29969: DOUBLE
29970: LD_INT 1
29972: DEC
29973: ST_TO_ADDR
29974: LD_INT 2
29976: PUSH
29977: FOR_TO
29978: IFFALSE 30105
// begin uc_side := your_side ;
29980: LD_ADDR_OWVAR 20
29984: PUSH
29985: LD_OWVAR 2
29989: ST_TO_ADDR
// uc_nation := nation_american ;
29990: LD_ADDR_OWVAR 21
29994: PUSH
29995: LD_INT 1
29997: ST_TO_ADDR
// vc_chassis := us_morphling ;
29998: LD_ADDR_OWVAR 37
30002: PUSH
30003: LD_INT 5
30005: ST_TO_ADDR
// vc_engine := engine_siberite ;
30006: LD_ADDR_OWVAR 39
30010: PUSH
30011: LD_INT 3
30013: ST_TO_ADDR
// vc_control := control_computer ;
30014: LD_ADDR_OWVAR 38
30018: PUSH
30019: LD_INT 3
30021: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30022: LD_ADDR_OWVAR 40
30026: PUSH
30027: LD_INT 10
30029: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30030: LD_VAR 0 2
30034: PUSH
30035: LD_INT 1
30037: ARRAY
30038: PPUSH
30039: CALL_OW 310
30043: NOT
30044: IFFALSE 30091
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30046: CALL_OW 45
30050: PPUSH
30051: LD_VAR 0 2
30055: PUSH
30056: LD_INT 1
30058: ARRAY
30059: PPUSH
30060: CALL_OW 250
30064: PPUSH
30065: LD_VAR 0 2
30069: PUSH
30070: LD_INT 1
30072: ARRAY
30073: PPUSH
30074: CALL_OW 251
30078: PPUSH
30079: LD_INT 12
30081: PPUSH
30082: LD_INT 1
30084: PPUSH
30085: CALL_OW 50
30089: GO 30103
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30091: CALL_OW 45
30095: PPUSH
30096: LD_INT 1
30098: PPUSH
30099: CALL_OW 51
// end ;
30103: GO 29977
30105: POP
30106: POP
// end ;
30107: PPOPN 2
30109: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30110: LD_EXP 63
30114: PUSH
30115: LD_EXP 109
30119: AND
30120: IFFALSE 30342
30122: GO 30124
30124: DISABLE
30125: LD_INT 0
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
30132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30133: LD_ADDR_VAR 0 6
30137: PUSH
30138: LD_INT 22
30140: PUSH
30141: LD_OWVAR 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 21
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: LD_INT 23
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: PPUSH
30182: CALL_OW 69
30186: ST_TO_ADDR
// if not tmp then
30187: LD_VAR 0 6
30191: NOT
30192: IFFALSE 30196
// exit ;
30194: GO 30342
// s1 := rand ( 1 , 4 ) ;
30196: LD_ADDR_VAR 0 2
30200: PUSH
30201: LD_INT 1
30203: PPUSH
30204: LD_INT 4
30206: PPUSH
30207: CALL_OW 12
30211: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: LD_VAR 0 6
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 259
30235: ST_TO_ADDR
// if s1 = 1 then
30236: LD_VAR 0 2
30240: PUSH
30241: LD_INT 1
30243: EQUAL
30244: IFFALSE 30264
// s2 := rand ( 2 , 4 ) else
30246: LD_ADDR_VAR 0 3
30250: PUSH
30251: LD_INT 2
30253: PPUSH
30254: LD_INT 4
30256: PPUSH
30257: CALL_OW 12
30261: ST_TO_ADDR
30262: GO 30272
// s2 := 1 ;
30264: LD_ADDR_VAR 0 3
30268: PUSH
30269: LD_INT 1
30271: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30272: LD_ADDR_VAR 0 5
30276: PUSH
30277: LD_VAR 0 6
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: PPUSH
30286: LD_VAR 0 3
30290: PPUSH
30291: CALL_OW 259
30295: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30296: LD_VAR 0 6
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PPUSH
30305: LD_VAR 0 2
30309: PPUSH
30310: LD_VAR 0 5
30314: PPUSH
30315: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30319: LD_VAR 0 6
30323: PUSH
30324: LD_INT 1
30326: ARRAY
30327: PPUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: LD_VAR 0 4
30337: PPUSH
30338: CALL_OW 237
// end ;
30342: PPOPN 6
30344: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30345: LD_EXP 63
30349: PUSH
30350: LD_EXP 110
30354: AND
30355: IFFALSE 30434
30357: GO 30359
30359: DISABLE
30360: LD_INT 0
30362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30363: LD_ADDR_VAR 0 1
30367: PUSH
30368: LD_INT 22
30370: PUSH
30371: LD_OWVAR 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 30
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PPUSH
30394: CALL_OW 69
30398: ST_TO_ADDR
// if not tmp then
30399: LD_VAR 0 1
30403: NOT
30404: IFFALSE 30408
// exit ;
30406: GO 30434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30408: LD_VAR 0 1
30412: PUSH
30413: LD_INT 1
30415: PPUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 12
30425: ARRAY
30426: PPUSH
30427: LD_INT 1
30429: PPUSH
30430: CALL_OW 234
// end ;
30434: PPOPN 1
30436: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30437: LD_EXP 63
30441: PUSH
30442: LD_EXP 111
30446: AND
30447: IFFALSE 30559
30449: GO 30451
30451: DISABLE
30452: LD_INT 0
30454: PPUSH
30455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30456: LD_ADDR_VAR 0 2
30460: PUSH
30461: LD_INT 22
30463: PUSH
30464: LD_OWVAR 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 30
30478: PUSH
30479: LD_INT 27
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 30
30488: PUSH
30489: LD_INT 26
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 30
30498: PUSH
30499: LD_INT 28
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PPUSH
30516: CALL_OW 69
30520: ST_TO_ADDR
// if not tmp then
30521: LD_VAR 0 2
30525: NOT
30526: IFFALSE 30530
// exit ;
30528: GO 30559
// for i in tmp do
30530: LD_ADDR_VAR 0 1
30534: PUSH
30535: LD_VAR 0 2
30539: PUSH
30540: FOR_IN
30541: IFFALSE 30557
// SetLives ( i , 1 ) ;
30543: LD_VAR 0 1
30547: PPUSH
30548: LD_INT 1
30550: PPUSH
30551: CALL_OW 234
30555: GO 30540
30557: POP
30558: POP
// end ;
30559: PPOPN 2
30561: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30562: LD_EXP 63
30566: PUSH
30567: LD_EXP 112
30571: AND
30572: IFFALSE 30859
30574: GO 30576
30576: DISABLE
30577: LD_INT 0
30579: PPUSH
30580: PPUSH
30581: PPUSH
// begin i := rand ( 1 , 7 ) ;
30582: LD_ADDR_VAR 0 1
30586: PUSH
30587: LD_INT 1
30589: PPUSH
30590: LD_INT 7
30592: PPUSH
30593: CALL_OW 12
30597: ST_TO_ADDR
// case i of 1 :
30598: LD_VAR 0 1
30602: PUSH
30603: LD_INT 1
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 30621
30611: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30612: LD_STRING earthquake(getX(game), 0, 32)
30614: PPUSH
30615: CALL_OW 559
30619: GO 30859
30621: LD_INT 2
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30643
30629: POP
// begin ToLua ( displayStucuk(); ) ;
30630: LD_STRING displayStucuk();
30632: PPUSH
30633: CALL_OW 559
// ResetFog ;
30637: CALL_OW 335
// end ; 3 :
30641: GO 30859
30643: LD_INT 3
30645: DOUBLE
30646: EQUAL
30647: IFTRUE 30651
30649: GO 30755
30651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30652: LD_ADDR_VAR 0 2
30656: PUSH
30657: LD_INT 22
30659: PUSH
30660: LD_OWVAR 2
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 25
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PPUSH
30683: CALL_OW 69
30687: ST_TO_ADDR
// if not tmp then
30688: LD_VAR 0 2
30692: NOT
30693: IFFALSE 30697
// exit ;
30695: GO 30859
// un := tmp [ rand ( 1 , tmp ) ] ;
30697: LD_ADDR_VAR 0 3
30701: PUSH
30702: LD_VAR 0 2
30706: PUSH
30707: LD_INT 1
30709: PPUSH
30710: LD_VAR 0 2
30714: PPUSH
30715: CALL_OW 12
30719: ARRAY
30720: ST_TO_ADDR
// if Crawls ( un ) then
30721: LD_VAR 0 3
30725: PPUSH
30726: CALL_OW 318
30730: IFFALSE 30741
// ComWalk ( un ) ;
30732: LD_VAR 0 3
30736: PPUSH
30737: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30741: LD_VAR 0 3
30745: PPUSH
30746: LD_INT 8
30748: PPUSH
30749: CALL_OW 336
// end ; 4 :
30753: GO 30859
30755: LD_INT 4
30757: DOUBLE
30758: EQUAL
30759: IFTRUE 30763
30761: GO 30837
30763: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30764: LD_ADDR_VAR 0 2
30768: PUSH
30769: LD_INT 22
30771: PUSH
30772: LD_OWVAR 2
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 30
30783: PUSH
30784: LD_INT 29
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PPUSH
30795: CALL_OW 69
30799: ST_TO_ADDR
// if not tmp then
30800: LD_VAR 0 2
30804: NOT
30805: IFFALSE 30809
// exit ;
30807: GO 30859
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30809: LD_VAR 0 2
30813: PUSH
30814: LD_INT 1
30816: ARRAY
30817: PPUSH
30818: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30822: LD_VAR 0 2
30826: PUSH
30827: LD_INT 1
30829: ARRAY
30830: PPUSH
30831: CALL_OW 65
// end ; 5 .. 7 :
30835: GO 30859
30837: LD_INT 5
30839: DOUBLE
30840: GREATEREQUAL
30841: IFFALSE 30849
30843: LD_INT 7
30845: DOUBLE
30846: LESSEQUAL
30847: IFTRUE 30851
30849: GO 30858
30851: POP
// StreamSibBomb ; end ;
30852: CALL 27096 0 0
30856: GO 30859
30858: POP
// end ;
30859: PPOPN 3
30861: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30862: LD_EXP 63
30866: PUSH
30867: LD_EXP 113
30871: AND
30872: IFFALSE 31028
30874: GO 30876
30876: DISABLE
30877: LD_INT 0
30879: PPUSH
30880: PPUSH
30881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30882: LD_ADDR_VAR 0 2
30886: PUSH
30887: LD_INT 81
30889: PUSH
30890: LD_OWVAR 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 21
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 21
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: ST_TO_ADDR
// if not tmp then
30936: LD_VAR 0 2
30940: NOT
30941: IFFALSE 30945
// exit ;
30943: GO 31028
// p := 0 ;
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: LD_INT 0
30952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30953: LD_INT 35
30955: PPUSH
30956: CALL_OW 67
// p := p + 1 ;
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_VAR 0 3
30969: PUSH
30970: LD_INT 1
30972: PLUS
30973: ST_TO_ADDR
// for i in tmp do
30974: LD_ADDR_VAR 0 1
30978: PUSH
30979: LD_VAR 0 2
30983: PUSH
30984: FOR_IN
30985: IFFALSE 31016
// if GetLives ( i ) < 1000 then
30987: LD_VAR 0 1
30991: PPUSH
30992: CALL_OW 256
30996: PUSH
30997: LD_INT 1000
30999: LESS
31000: IFFALSE 31014
// SetLives ( i , 1000 ) ;
31002: LD_VAR 0 1
31006: PPUSH
31007: LD_INT 1000
31009: PPUSH
31010: CALL_OW 234
31014: GO 30984
31016: POP
31017: POP
// until p > 20 ;
31018: LD_VAR 0 3
31022: PUSH
31023: LD_INT 20
31025: GREATER
31026: IFFALSE 30953
// end ;
31028: PPOPN 3
31030: END
// every 0 0$1 trigger StreamModeActive and sTime do
31031: LD_EXP 63
31035: PUSH
31036: LD_EXP 114
31040: AND
31041: IFFALSE 31076
31043: GO 31045
31045: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31046: LD_INT 28
31048: PPUSH
31049: LD_OWVAR 2
31053: PPUSH
31054: LD_INT 2
31056: PPUSH
31057: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31061: LD_INT 30
31063: PPUSH
31064: LD_OWVAR 2
31068: PPUSH
31069: LD_INT 2
31071: PPUSH
31072: CALL_OW 322
// end ;
31076: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31077: LD_EXP 63
31081: PUSH
31082: LD_EXP 115
31086: AND
31087: IFFALSE 31208
31089: GO 31091
31091: DISABLE
31092: LD_INT 0
31094: PPUSH
31095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31096: LD_ADDR_VAR 0 2
31100: PUSH
31101: LD_INT 22
31103: PUSH
31104: LD_OWVAR 2
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 21
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 23
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: PPUSH
31145: CALL_OW 69
31149: ST_TO_ADDR
// if not tmp then
31150: LD_VAR 0 2
31154: NOT
31155: IFFALSE 31159
// exit ;
31157: GO 31208
// for i in tmp do
31159: LD_ADDR_VAR 0 1
31163: PUSH
31164: LD_VAR 0 2
31168: PUSH
31169: FOR_IN
31170: IFFALSE 31206
// begin if Crawls ( i ) then
31172: LD_VAR 0 1
31176: PPUSH
31177: CALL_OW 318
31181: IFFALSE 31192
// ComWalk ( i ) ;
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 138
// SetClass ( i , 2 ) ;
31192: LD_VAR 0 1
31196: PPUSH
31197: LD_INT 2
31199: PPUSH
31200: CALL_OW 336
// end ;
31204: GO 31169
31206: POP
31207: POP
// end ;
31208: PPOPN 2
31210: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31211: LD_EXP 63
31215: PUSH
31216: LD_EXP 116
31220: AND
31221: IFFALSE 31509
31223: GO 31225
31225: DISABLE
31226: LD_INT 0
31228: PPUSH
31229: PPUSH
31230: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31231: LD_OWVAR 2
31235: PPUSH
31236: LD_INT 9
31238: PPUSH
31239: LD_INT 1
31241: PPUSH
31242: LD_INT 1
31244: PPUSH
31245: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31249: LD_INT 9
31251: PPUSH
31252: LD_OWVAR 2
31256: PPUSH
31257: CALL_OW 343
// uc_side := 9 ;
31261: LD_ADDR_OWVAR 20
31265: PUSH
31266: LD_INT 9
31268: ST_TO_ADDR
// uc_nation := 2 ;
31269: LD_ADDR_OWVAR 21
31273: PUSH
31274: LD_INT 2
31276: ST_TO_ADDR
// hc_name := Dark Warrior ;
31277: LD_ADDR_OWVAR 26
31281: PUSH
31282: LD_STRING Dark Warrior
31284: ST_TO_ADDR
// hc_gallery :=  ;
31285: LD_ADDR_OWVAR 33
31289: PUSH
31290: LD_STRING 
31292: ST_TO_ADDR
// hc_noskilllimit := true ;
31293: LD_ADDR_OWVAR 76
31297: PUSH
31298: LD_INT 1
31300: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31301: LD_ADDR_OWVAR 31
31305: PUSH
31306: LD_INT 30
31308: PUSH
31309: LD_INT 30
31311: PUSH
31312: LD_INT 30
31314: PUSH
31315: LD_INT 30
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// un := CreateHuman ;
31324: LD_ADDR_VAR 0 3
31328: PUSH
31329: CALL_OW 44
31333: ST_TO_ADDR
// hc_noskilllimit := false ;
31334: LD_ADDR_OWVAR 76
31338: PUSH
31339: LD_INT 0
31341: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31342: LD_VAR 0 3
31346: PPUSH
31347: LD_INT 1
31349: PPUSH
31350: CALL_OW 51
// ToLua ( playRanger() ) ;
31354: LD_STRING playRanger()
31356: PPUSH
31357: CALL_OW 559
// p := 0 ;
31361: LD_ADDR_VAR 0 2
31365: PUSH
31366: LD_INT 0
31368: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31369: LD_INT 35
31371: PPUSH
31372: CALL_OW 67
// p := p + 1 ;
31376: LD_ADDR_VAR 0 2
31380: PUSH
31381: LD_VAR 0 2
31385: PUSH
31386: LD_INT 1
31388: PLUS
31389: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31390: LD_VAR 0 3
31394: PPUSH
31395: CALL_OW 256
31399: PUSH
31400: LD_INT 1000
31402: LESS
31403: IFFALSE 31417
// SetLives ( un , 1000 ) ;
31405: LD_VAR 0 3
31409: PPUSH
31410: LD_INT 1000
31412: PPUSH
31413: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31417: LD_VAR 0 3
31421: PPUSH
31422: LD_INT 81
31424: PUSH
31425: LD_OWVAR 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 91
31436: PUSH
31437: LD_VAR 0 3
31441: PUSH
31442: LD_INT 30
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: LIST
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PPUSH
31454: CALL_OW 69
31458: PPUSH
31459: LD_VAR 0 3
31463: PPUSH
31464: CALL_OW 74
31468: PPUSH
31469: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31473: LD_VAR 0 2
31477: PUSH
31478: LD_INT 80
31480: GREATER
31481: PUSH
31482: LD_VAR 0 3
31486: PPUSH
31487: CALL_OW 301
31491: OR
31492: IFFALSE 31369
// if un then
31494: LD_VAR 0 3
31498: IFFALSE 31509
// RemoveUnit ( un ) ;
31500: LD_VAR 0 3
31504: PPUSH
31505: CALL_OW 64
// end ;
31509: PPOPN 3
31511: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31512: LD_EXP 117
31516: IFFALSE 31632
31518: GO 31520
31520: DISABLE
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
31525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31526: LD_ADDR_VAR 0 2
31530: PUSH
31531: LD_INT 81
31533: PUSH
31534: LD_OWVAR 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 21
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PPUSH
31557: CALL_OW 69
31561: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31562: LD_STRING playComputer()
31564: PPUSH
31565: CALL_OW 559
// if not tmp then
31569: LD_VAR 0 2
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 31632
// for i in tmp do
31578: LD_ADDR_VAR 0 1
31582: PUSH
31583: LD_VAR 0 2
31587: PUSH
31588: FOR_IN
31589: IFFALSE 31630
// for j := 1 to 4 do
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: DOUBLE
31597: LD_INT 1
31599: DEC
31600: ST_TO_ADDR
31601: LD_INT 4
31603: PUSH
31604: FOR_TO
31605: IFFALSE 31626
// SetSkill ( i , j , 10 ) ;
31607: LD_VAR 0 1
31611: PPUSH
31612: LD_VAR 0 3
31616: PPUSH
31617: LD_INT 10
31619: PPUSH
31620: CALL_OW 237
31624: GO 31604
31626: POP
31627: POP
31628: GO 31588
31630: POP
31631: POP
// end ;
31632: PPOPN 3
31634: END
// every 0 0$1 trigger s30 do var i , tmp ;
31635: LD_EXP 118
31639: IFFALSE 31708
31641: GO 31643
31643: DISABLE
31644: LD_INT 0
31646: PPUSH
31647: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31648: LD_ADDR_VAR 0 2
31652: PUSH
31653: LD_INT 22
31655: PUSH
31656: LD_OWVAR 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 69
31669: ST_TO_ADDR
// if not tmp then
31670: LD_VAR 0 2
31674: NOT
31675: IFFALSE 31679
// exit ;
31677: GO 31708
// for i in tmp do
31679: LD_ADDR_VAR 0 1
31683: PUSH
31684: LD_VAR 0 2
31688: PUSH
31689: FOR_IN
31690: IFFALSE 31706
// SetLives ( i , 300 ) ;
31692: LD_VAR 0 1
31696: PPUSH
31697: LD_INT 300
31699: PPUSH
31700: CALL_OW 234
31704: GO 31689
31706: POP
31707: POP
// end ;
31708: PPOPN 2
31710: END
// every 0 0$1 trigger s60 do var i , tmp ;
31711: LD_EXP 119
31715: IFFALSE 31784
31717: GO 31719
31719: DISABLE
31720: LD_INT 0
31722: PPUSH
31723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31724: LD_ADDR_VAR 0 2
31728: PUSH
31729: LD_INT 22
31731: PUSH
31732: LD_OWVAR 2
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PPUSH
31741: CALL_OW 69
31745: ST_TO_ADDR
// if not tmp then
31746: LD_VAR 0 2
31750: NOT
31751: IFFALSE 31755
// exit ;
31753: GO 31784
// for i in tmp do
31755: LD_ADDR_VAR 0 1
31759: PUSH
31760: LD_VAR 0 2
31764: PUSH
31765: FOR_IN
31766: IFFALSE 31782
// SetLives ( i , 600 ) ;
31768: LD_VAR 0 1
31772: PPUSH
31773: LD_INT 600
31775: PPUSH
31776: CALL_OW 234
31780: GO 31765
31782: POP
31783: POP
// end ;
31784: PPOPN 2
31786: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31787: LD_INT 0
31789: PPUSH
// case cmd of 301 :
31790: LD_VAR 0 1
31794: PUSH
31795: LD_INT 301
31797: DOUBLE
31798: EQUAL
31799: IFTRUE 31803
31801: GO 31835
31803: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31804: LD_VAR 0 6
31808: PPUSH
31809: LD_VAR 0 7
31813: PPUSH
31814: LD_VAR 0 8
31818: PPUSH
31819: LD_VAR 0 4
31823: PPUSH
31824: LD_VAR 0 5
31828: PPUSH
31829: CALL 33044 0 5
31833: GO 31956
31835: LD_INT 302
31837: DOUBLE
31838: EQUAL
31839: IFTRUE 31843
31841: GO 31880
31843: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31844: LD_VAR 0 6
31848: PPUSH
31849: LD_VAR 0 7
31853: PPUSH
31854: LD_VAR 0 8
31858: PPUSH
31859: LD_VAR 0 9
31863: PPUSH
31864: LD_VAR 0 4
31868: PPUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: CALL 33135 0 6
31878: GO 31956
31880: LD_INT 303
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31925
31888: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31889: LD_VAR 0 6
31893: PPUSH
31894: LD_VAR 0 7
31898: PPUSH
31899: LD_VAR 0 8
31903: PPUSH
31904: LD_VAR 0 9
31908: PPUSH
31909: LD_VAR 0 4
31913: PPUSH
31914: LD_VAR 0 5
31918: PPUSH
31919: CALL 31961 0 6
31923: GO 31956
31925: LD_INT 304
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31955
31933: POP
// hHackTeleport ( unit , x , y ) ; end ;
31934: LD_VAR 0 2
31938: PPUSH
31939: LD_VAR 0 4
31943: PPUSH
31944: LD_VAR 0 5
31948: PPUSH
31949: CALL 33728 0 3
31953: GO 31956
31955: POP
// end ;
31956: LD_VAR 0 12
31960: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31961: LD_INT 0
31963: PPUSH
31964: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31965: LD_VAR 0 1
31969: PUSH
31970: LD_INT 1
31972: LESS
31973: PUSH
31974: LD_VAR 0 1
31978: PUSH
31979: LD_INT 3
31981: GREATER
31982: OR
31983: PUSH
31984: LD_VAR 0 5
31988: PPUSH
31989: LD_VAR 0 6
31993: PPUSH
31994: CALL_OW 428
31998: OR
31999: IFFALSE 32003
// exit ;
32001: GO 32731
// uc_side := your_side ;
32003: LD_ADDR_OWVAR 20
32007: PUSH
32008: LD_OWVAR 2
32012: ST_TO_ADDR
// uc_nation := nation ;
32013: LD_ADDR_OWVAR 21
32017: PUSH
32018: LD_VAR 0 1
32022: ST_TO_ADDR
// bc_level = 1 ;
32023: LD_ADDR_OWVAR 43
32027: PUSH
32028: LD_INT 1
32030: ST_TO_ADDR
// case btype of 1 :
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 1
32038: DOUBLE
32039: EQUAL
32040: IFTRUE 32044
32042: GO 32055
32044: POP
// bc_type := b_depot ; 2 :
32045: LD_ADDR_OWVAR 42
32049: PUSH
32050: LD_INT 0
32052: ST_TO_ADDR
32053: GO 32675
32055: LD_INT 2
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32074
32063: POP
// bc_type := b_warehouse ; 3 :
32064: LD_ADDR_OWVAR 42
32068: PUSH
32069: LD_INT 1
32071: ST_TO_ADDR
32072: GO 32675
32074: LD_INT 3
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32093
32082: POP
// bc_type := b_lab ; 4 .. 9 :
32083: LD_ADDR_OWVAR 42
32087: PUSH
32088: LD_INT 6
32090: ST_TO_ADDR
32091: GO 32675
32093: LD_INT 4
32095: DOUBLE
32096: GREATEREQUAL
32097: IFFALSE 32105
32099: LD_INT 9
32101: DOUBLE
32102: LESSEQUAL
32103: IFTRUE 32107
32105: GO 32167
32107: POP
// begin bc_type := b_lab_half ;
32108: LD_ADDR_OWVAR 42
32112: PUSH
32113: LD_INT 7
32115: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32116: LD_ADDR_OWVAR 44
32120: PUSH
32121: LD_INT 10
32123: PUSH
32124: LD_INT 11
32126: PUSH
32127: LD_INT 12
32129: PUSH
32130: LD_INT 15
32132: PUSH
32133: LD_INT 14
32135: PUSH
32136: LD_INT 13
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: PUSH
32147: LD_VAR 0 2
32151: PUSH
32152: LD_INT 3
32154: MINUS
32155: ARRAY
32156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32157: LD_ADDR_OWVAR 45
32161: PUSH
32162: LD_INT 9
32164: ST_TO_ADDR
// end ; 10 .. 13 :
32165: GO 32675
32167: LD_INT 10
32169: DOUBLE
32170: GREATEREQUAL
32171: IFFALSE 32179
32173: LD_INT 13
32175: DOUBLE
32176: LESSEQUAL
32177: IFTRUE 32181
32179: GO 32258
32181: POP
// begin bc_type := b_lab_full ;
32182: LD_ADDR_OWVAR 42
32186: PUSH
32187: LD_INT 8
32189: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32190: LD_ADDR_OWVAR 44
32194: PUSH
32195: LD_INT 10
32197: PUSH
32198: LD_INT 12
32200: PUSH
32201: LD_INT 14
32203: PUSH
32204: LD_INT 13
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: PUSH
32213: LD_VAR 0 2
32217: PUSH
32218: LD_INT 9
32220: MINUS
32221: ARRAY
32222: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32223: LD_ADDR_OWVAR 45
32227: PUSH
32228: LD_INT 11
32230: PUSH
32231: LD_INT 15
32233: PUSH
32234: LD_INT 12
32236: PUSH
32237: LD_INT 15
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: PUSH
32246: LD_VAR 0 2
32250: PUSH
32251: LD_INT 9
32253: MINUS
32254: ARRAY
32255: ST_TO_ADDR
// end ; 14 :
32256: GO 32675
32258: LD_INT 14
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32277
32266: POP
// bc_type := b_workshop ; 15 :
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 2
32274: ST_TO_ADDR
32275: GO 32675
32277: LD_INT 15
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32296
32285: POP
// bc_type := b_factory ; 16 :
32286: LD_ADDR_OWVAR 42
32290: PUSH
32291: LD_INT 3
32293: ST_TO_ADDR
32294: GO 32675
32296: LD_INT 16
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32315
32304: POP
// bc_type := b_ext_gun ; 17 :
32305: LD_ADDR_OWVAR 42
32309: PUSH
32310: LD_INT 17
32312: ST_TO_ADDR
32313: GO 32675
32315: LD_INT 17
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32351
32323: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32324: LD_ADDR_OWVAR 42
32328: PUSH
32329: LD_INT 19
32331: PUSH
32332: LD_INT 23
32334: PUSH
32335: LD_INT 19
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: PUSH
32343: LD_VAR 0 1
32347: ARRAY
32348: ST_TO_ADDR
32349: GO 32675
32351: LD_INT 18
32353: DOUBLE
32354: EQUAL
32355: IFTRUE 32359
32357: GO 32370
32359: POP
// bc_type := b_ext_radar ; 19 :
32360: LD_ADDR_OWVAR 42
32364: PUSH
32365: LD_INT 20
32367: ST_TO_ADDR
32368: GO 32675
32370: LD_INT 19
32372: DOUBLE
32373: EQUAL
32374: IFTRUE 32378
32376: GO 32389
32378: POP
// bc_type := b_ext_radio ; 20 :
32379: LD_ADDR_OWVAR 42
32383: PUSH
32384: LD_INT 22
32386: ST_TO_ADDR
32387: GO 32675
32389: LD_INT 20
32391: DOUBLE
32392: EQUAL
32393: IFTRUE 32397
32395: GO 32408
32397: POP
// bc_type := b_ext_siberium ; 21 :
32398: LD_ADDR_OWVAR 42
32402: PUSH
32403: LD_INT 21
32405: ST_TO_ADDR
32406: GO 32675
32408: LD_INT 21
32410: DOUBLE
32411: EQUAL
32412: IFTRUE 32416
32414: GO 32427
32416: POP
// bc_type := b_ext_computer ; 22 :
32417: LD_ADDR_OWVAR 42
32421: PUSH
32422: LD_INT 24
32424: ST_TO_ADDR
32425: GO 32675
32427: LD_INT 22
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32446
32435: POP
// bc_type := b_ext_track ; 23 :
32436: LD_ADDR_OWVAR 42
32440: PUSH
32441: LD_INT 16
32443: ST_TO_ADDR
32444: GO 32675
32446: LD_INT 23
32448: DOUBLE
32449: EQUAL
32450: IFTRUE 32454
32452: GO 32465
32454: POP
// bc_type := b_ext_laser ; 24 :
32455: LD_ADDR_OWVAR 42
32459: PUSH
32460: LD_INT 25
32462: ST_TO_ADDR
32463: GO 32675
32465: LD_INT 24
32467: DOUBLE
32468: EQUAL
32469: IFTRUE 32473
32471: GO 32484
32473: POP
// bc_type := b_control_tower ; 25 :
32474: LD_ADDR_OWVAR 42
32478: PUSH
32479: LD_INT 36
32481: ST_TO_ADDR
32482: GO 32675
32484: LD_INT 25
32486: DOUBLE
32487: EQUAL
32488: IFTRUE 32492
32490: GO 32503
32492: POP
// bc_type := b_breastwork ; 26 :
32493: LD_ADDR_OWVAR 42
32497: PUSH
32498: LD_INT 31
32500: ST_TO_ADDR
32501: GO 32675
32503: LD_INT 26
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32522
32511: POP
// bc_type := b_bunker ; 27 :
32512: LD_ADDR_OWVAR 42
32516: PUSH
32517: LD_INT 32
32519: ST_TO_ADDR
32520: GO 32675
32522: LD_INT 27
32524: DOUBLE
32525: EQUAL
32526: IFTRUE 32530
32528: GO 32541
32530: POP
// bc_type := b_turret ; 28 :
32531: LD_ADDR_OWVAR 42
32535: PUSH
32536: LD_INT 33
32538: ST_TO_ADDR
32539: GO 32675
32541: LD_INT 28
32543: DOUBLE
32544: EQUAL
32545: IFTRUE 32549
32547: GO 32560
32549: POP
// bc_type := b_armoury ; 29 :
32550: LD_ADDR_OWVAR 42
32554: PUSH
32555: LD_INT 4
32557: ST_TO_ADDR
32558: GO 32675
32560: LD_INT 29
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 32579
32568: POP
// bc_type := b_barracks ; 30 :
32569: LD_ADDR_OWVAR 42
32573: PUSH
32574: LD_INT 5
32576: ST_TO_ADDR
32577: GO 32675
32579: LD_INT 30
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32587
32585: GO 32598
32587: POP
// bc_type := b_solar_power ; 31 :
32588: LD_ADDR_OWVAR 42
32592: PUSH
32593: LD_INT 27
32595: ST_TO_ADDR
32596: GO 32675
32598: LD_INT 31
32600: DOUBLE
32601: EQUAL
32602: IFTRUE 32606
32604: GO 32617
32606: POP
// bc_type := b_oil_power ; 32 :
32607: LD_ADDR_OWVAR 42
32611: PUSH
32612: LD_INT 26
32614: ST_TO_ADDR
32615: GO 32675
32617: LD_INT 32
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32636
32625: POP
// bc_type := b_siberite_power ; 33 :
32626: LD_ADDR_OWVAR 42
32630: PUSH
32631: LD_INT 28
32633: ST_TO_ADDR
32634: GO 32675
32636: LD_INT 33
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32655
32644: POP
// bc_type := b_oil_mine ; 34 :
32645: LD_ADDR_OWVAR 42
32649: PUSH
32650: LD_INT 29
32652: ST_TO_ADDR
32653: GO 32675
32655: LD_INT 34
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32674
32663: POP
// bc_type := b_siberite_mine ; end ;
32664: LD_ADDR_OWVAR 42
32668: PUSH
32669: LD_INT 30
32671: ST_TO_ADDR
32672: GO 32675
32674: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32675: LD_ADDR_VAR 0 8
32679: PUSH
32680: LD_VAR 0 5
32684: PPUSH
32685: LD_VAR 0 6
32689: PPUSH
32690: LD_VAR 0 3
32694: PPUSH
32695: CALL_OW 47
32699: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32700: LD_OWVAR 42
32704: PUSH
32705: LD_INT 32
32707: PUSH
32708: LD_INT 33
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: IN
32715: IFFALSE 32731
// PlaceWeaponTurret ( b , weapon ) ;
32717: LD_VAR 0 8
32721: PPUSH
32722: LD_VAR 0 4
32726: PPUSH
32727: CALL_OW 431
// end ;
32731: LD_VAR 0 7
32735: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32736: LD_INT 0
32738: PPUSH
32739: PPUSH
32740: PPUSH
32741: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32742: LD_ADDR_VAR 0 4
32746: PUSH
32747: LD_INT 22
32749: PUSH
32750: LD_OWVAR 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 30
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 30
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PPUSH
32791: CALL_OW 69
32795: ST_TO_ADDR
// if not tmp then
32796: LD_VAR 0 4
32800: NOT
32801: IFFALSE 32805
// exit ;
32803: GO 32864
// for i in tmp do
32805: LD_ADDR_VAR 0 2
32809: PUSH
32810: LD_VAR 0 4
32814: PUSH
32815: FOR_IN
32816: IFFALSE 32862
// for j = 1 to 3 do
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: DOUBLE
32824: LD_INT 1
32826: DEC
32827: ST_TO_ADDR
32828: LD_INT 3
32830: PUSH
32831: FOR_TO
32832: IFFALSE 32858
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32834: LD_VAR 0 2
32838: PPUSH
32839: CALL_OW 274
32843: PPUSH
32844: LD_VAR 0 3
32848: PPUSH
32849: LD_INT 99999
32851: PPUSH
32852: CALL_OW 277
32856: GO 32831
32858: POP
32859: POP
32860: GO 32815
32862: POP
32863: POP
// end ;
32864: LD_VAR 0 1
32868: RET
// export function hHackSetLevel10 ; var i , j ; begin
32869: LD_INT 0
32871: PPUSH
32872: PPUSH
32873: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32874: LD_ADDR_VAR 0 2
32878: PUSH
32879: LD_INT 21
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PPUSH
32889: CALL_OW 69
32893: PUSH
32894: FOR_IN
32895: IFFALSE 32947
// if IsSelected ( i ) then
32897: LD_VAR 0 2
32901: PPUSH
32902: CALL_OW 306
32906: IFFALSE 32945
// begin for j := 1 to 4 do
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: DOUBLE
32914: LD_INT 1
32916: DEC
32917: ST_TO_ADDR
32918: LD_INT 4
32920: PUSH
32921: FOR_TO
32922: IFFALSE 32943
// SetSkill ( i , j , 10 ) ;
32924: LD_VAR 0 2
32928: PPUSH
32929: LD_VAR 0 3
32933: PPUSH
32934: LD_INT 10
32936: PPUSH
32937: CALL_OW 237
32941: GO 32921
32943: POP
32944: POP
// end ;
32945: GO 32894
32947: POP
32948: POP
// end ;
32949: LD_VAR 0 1
32953: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32954: LD_INT 0
32956: PPUSH
32957: PPUSH
32958: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32959: LD_ADDR_VAR 0 2
32963: PUSH
32964: LD_INT 22
32966: PUSH
32967: LD_OWVAR 2
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 21
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PPUSH
32990: CALL_OW 69
32994: PUSH
32995: FOR_IN
32996: IFFALSE 33037
// begin for j := 1 to 4 do
32998: LD_ADDR_VAR 0 3
33002: PUSH
33003: DOUBLE
33004: LD_INT 1
33006: DEC
33007: ST_TO_ADDR
33008: LD_INT 4
33010: PUSH
33011: FOR_TO
33012: IFFALSE 33033
// SetSkill ( i , j , 10 ) ;
33014: LD_VAR 0 2
33018: PPUSH
33019: LD_VAR 0 3
33023: PPUSH
33024: LD_INT 10
33026: PPUSH
33027: CALL_OW 237
33031: GO 33011
33033: POP
33034: POP
// end ;
33035: GO 32995
33037: POP
33038: POP
// end ;
33039: LD_VAR 0 1
33043: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33044: LD_INT 0
33046: PPUSH
// uc_side := your_side ;
33047: LD_ADDR_OWVAR 20
33051: PUSH
33052: LD_OWVAR 2
33056: ST_TO_ADDR
// uc_nation := nation ;
33057: LD_ADDR_OWVAR 21
33061: PUSH
33062: LD_VAR 0 1
33066: ST_TO_ADDR
// InitHc ;
33067: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33071: LD_INT 0
33073: PPUSH
33074: LD_VAR 0 2
33078: PPUSH
33079: LD_VAR 0 3
33083: PPUSH
33084: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33088: LD_VAR 0 4
33092: PPUSH
33093: LD_VAR 0 5
33097: PPUSH
33098: CALL_OW 428
33102: PUSH
33103: LD_INT 0
33105: EQUAL
33106: IFFALSE 33130
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33108: CALL_OW 44
33112: PPUSH
33113: LD_VAR 0 4
33117: PPUSH
33118: LD_VAR 0 5
33122: PPUSH
33123: LD_INT 1
33125: PPUSH
33126: CALL_OW 48
// end ;
33130: LD_VAR 0 6
33134: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
// uc_side := your_side ;
33139: LD_ADDR_OWVAR 20
33143: PUSH
33144: LD_OWVAR 2
33148: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33149: LD_VAR 0 1
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: LD_INT 4
33165: PUSH
33166: LD_INT 5
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: IN
33176: IFFALSE 33188
// uc_nation := nation_american else
33178: LD_ADDR_OWVAR 21
33182: PUSH
33183: LD_INT 1
33185: ST_TO_ADDR
33186: GO 33231
// if chassis in [ 11 , 12 , 13 , 14 ] then
33188: LD_VAR 0 1
33192: PUSH
33193: LD_INT 11
33195: PUSH
33196: LD_INT 12
33198: PUSH
33199: LD_INT 13
33201: PUSH
33202: LD_INT 14
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: IN
33211: IFFALSE 33223
// uc_nation := nation_arabian else
33213: LD_ADDR_OWVAR 21
33217: PUSH
33218: LD_INT 2
33220: ST_TO_ADDR
33221: GO 33231
// uc_nation := nation_russian ;
33223: LD_ADDR_OWVAR 21
33227: PUSH
33228: LD_INT 3
33230: ST_TO_ADDR
// vc_chassis := chassis ;
33231: LD_ADDR_OWVAR 37
33235: PUSH
33236: LD_VAR 0 1
33240: ST_TO_ADDR
// vc_engine := engine ;
33241: LD_ADDR_OWVAR 39
33245: PUSH
33246: LD_VAR 0 2
33250: ST_TO_ADDR
// vc_control := control ;
33251: LD_ADDR_OWVAR 38
33255: PUSH
33256: LD_VAR 0 3
33260: ST_TO_ADDR
// vc_weapon := weapon ;
33261: LD_ADDR_OWVAR 40
33265: PUSH
33266: LD_VAR 0 4
33270: ST_TO_ADDR
// un := CreateVehicle ;
33271: LD_ADDR_VAR 0 8
33275: PUSH
33276: CALL_OW 45
33280: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33281: LD_VAR 0 8
33285: PPUSH
33286: LD_INT 0
33288: PPUSH
33289: LD_INT 5
33291: PPUSH
33292: CALL_OW 12
33296: PPUSH
33297: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33301: LD_VAR 0 8
33305: PPUSH
33306: LD_VAR 0 5
33310: PPUSH
33311: LD_VAR 0 6
33315: PPUSH
33316: LD_INT 1
33318: PPUSH
33319: CALL_OW 48
// end ;
33323: LD_VAR 0 7
33327: RET
// export hInvincible ; every 1 do
33328: GO 33330
33330: DISABLE
// hInvincible := [ ] ;
33331: LD_ADDR_EXP 120
33335: PUSH
33336: EMPTY
33337: ST_TO_ADDR
33338: END
// every 10 do var i ;
33339: GO 33341
33341: DISABLE
33342: LD_INT 0
33344: PPUSH
// begin enable ;
33345: ENABLE
// if not hInvincible then
33346: LD_EXP 120
33350: NOT
33351: IFFALSE 33355
// exit ;
33353: GO 33399
// for i in hInvincible do
33355: LD_ADDR_VAR 0 1
33359: PUSH
33360: LD_EXP 120
33364: PUSH
33365: FOR_IN
33366: IFFALSE 33397
// if GetLives ( i ) < 1000 then
33368: LD_VAR 0 1
33372: PPUSH
33373: CALL_OW 256
33377: PUSH
33378: LD_INT 1000
33380: LESS
33381: IFFALSE 33395
// SetLives ( i , 1000 ) ;
33383: LD_VAR 0 1
33387: PPUSH
33388: LD_INT 1000
33390: PPUSH
33391: CALL_OW 234
33395: GO 33365
33397: POP
33398: POP
// end ;
33399: PPOPN 1
33401: END
// export function hHackInvincible ; var i ; begin
33402: LD_INT 0
33404: PPUSH
33405: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33406: LD_ADDR_VAR 0 2
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: LD_INT 21
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 21
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 69
33443: PUSH
33444: FOR_IN
33445: IFFALSE 33506
// if IsSelected ( i ) then
33447: LD_VAR 0 2
33451: PPUSH
33452: CALL_OW 306
33456: IFFALSE 33504
// begin if i in hInvincible then
33458: LD_VAR 0 2
33462: PUSH
33463: LD_EXP 120
33467: IN
33468: IFFALSE 33488
// hInvincible := hInvincible diff i else
33470: LD_ADDR_EXP 120
33474: PUSH
33475: LD_EXP 120
33479: PUSH
33480: LD_VAR 0 2
33484: DIFF
33485: ST_TO_ADDR
33486: GO 33504
// hInvincible := hInvincible union i ;
33488: LD_ADDR_EXP 120
33492: PUSH
33493: LD_EXP 120
33497: PUSH
33498: LD_VAR 0 2
33502: UNION
33503: ST_TO_ADDR
// end ;
33504: GO 33444
33506: POP
33507: POP
// end ;
33508: LD_VAR 0 1
33512: RET
// export function hHackInvisible ; var i , j ; begin
33513: LD_INT 0
33515: PPUSH
33516: PPUSH
33517: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33518: LD_ADDR_VAR 0 2
33522: PUSH
33523: LD_INT 21
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PPUSH
33533: CALL_OW 69
33537: PUSH
33538: FOR_IN
33539: IFFALSE 33563
// if IsSelected ( i ) then
33541: LD_VAR 0 2
33545: PPUSH
33546: CALL_OW 306
33550: IFFALSE 33561
// ComForceInvisible ( i ) ;
33552: LD_VAR 0 2
33556: PPUSH
33557: CALL_OW 496
33561: GO 33538
33563: POP
33564: POP
// end ;
33565: LD_VAR 0 1
33569: RET
// export function hHackChangeYourSide ; begin
33570: LD_INT 0
33572: PPUSH
// if your_side = 8 then
33573: LD_OWVAR 2
33577: PUSH
33578: LD_INT 8
33580: EQUAL
33581: IFFALSE 33593
// your_side := 0 else
33583: LD_ADDR_OWVAR 2
33587: PUSH
33588: LD_INT 0
33590: ST_TO_ADDR
33591: GO 33607
// your_side := your_side + 1 ;
33593: LD_ADDR_OWVAR 2
33597: PUSH
33598: LD_OWVAR 2
33602: PUSH
33603: LD_INT 1
33605: PLUS
33606: ST_TO_ADDR
// end ;
33607: LD_VAR 0 1
33611: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33612: LD_INT 0
33614: PPUSH
33615: PPUSH
33616: PPUSH
// for i in all_units do
33617: LD_ADDR_VAR 0 2
33621: PUSH
33622: LD_OWVAR 3
33626: PUSH
33627: FOR_IN
33628: IFFALSE 33706
// if IsSelected ( i ) then
33630: LD_VAR 0 2
33634: PPUSH
33635: CALL_OW 306
33639: IFFALSE 33704
// begin j := GetSide ( i ) ;
33641: LD_ADDR_VAR 0 3
33645: PUSH
33646: LD_VAR 0 2
33650: PPUSH
33651: CALL_OW 255
33655: ST_TO_ADDR
// if j = 8 then
33656: LD_VAR 0 3
33660: PUSH
33661: LD_INT 8
33663: EQUAL
33664: IFFALSE 33676
// j := 0 else
33666: LD_ADDR_VAR 0 3
33670: PUSH
33671: LD_INT 0
33673: ST_TO_ADDR
33674: GO 33690
// j := j + 1 ;
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_VAR 0 3
33685: PUSH
33686: LD_INT 1
33688: PLUS
33689: ST_TO_ADDR
// SetSide ( i , j ) ;
33690: LD_VAR 0 2
33694: PPUSH
33695: LD_VAR 0 3
33699: PPUSH
33700: CALL_OW 235
// end ;
33704: GO 33627
33706: POP
33707: POP
// end ;
33708: LD_VAR 0 1
33712: RET
// export function hHackFog ; begin
33713: LD_INT 0
33715: PPUSH
// FogOff ( true ) ;
33716: LD_INT 1
33718: PPUSH
33719: CALL_OW 344
// end ;
33723: LD_VAR 0 1
33727: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33728: LD_INT 0
33730: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33731: LD_VAR 0 1
33735: PPUSH
33736: LD_VAR 0 2
33740: PPUSH
33741: LD_VAR 0 3
33745: PPUSH
33746: LD_INT 1
33748: PPUSH
33749: LD_INT 1
33751: PPUSH
33752: CALL_OW 483
// CenterOnXY ( x , y ) ;
33756: LD_VAR 0 2
33760: PPUSH
33761: LD_VAR 0 3
33765: PPUSH
33766: CALL_OW 84
// end ;
33770: LD_VAR 0 4
33774: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33775: LD_INT 0
33777: PPUSH
33778: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33779: LD_VAR 0 1
33783: NOT
33784: PUSH
33785: LD_VAR 0 2
33789: PPUSH
33790: LD_VAR 0 3
33794: PPUSH
33795: CALL_OW 488
33799: NOT
33800: OR
33801: PUSH
33802: LD_VAR 0 1
33806: PPUSH
33807: CALL_OW 266
33811: PUSH
33812: LD_INT 3
33814: NONEQUAL
33815: PUSH
33816: LD_VAR 0 1
33820: PPUSH
33821: CALL_OW 247
33825: PUSH
33826: LD_INT 1
33828: EQUAL
33829: NOT
33830: AND
33831: OR
33832: IFFALSE 33836
// exit ;
33834: GO 34118
// if GetType ( factory ) = unit_human then
33836: LD_VAR 0 1
33840: PPUSH
33841: CALL_OW 247
33845: PUSH
33846: LD_INT 1
33848: EQUAL
33849: IFFALSE 33866
// factory := IsInUnit ( factory ) ;
33851: LD_ADDR_VAR 0 1
33855: PUSH
33856: LD_VAR 0 1
33860: PPUSH
33861: CALL_OW 310
33865: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33866: LD_VAR 0 1
33870: PPUSH
33871: CALL_OW 266
33875: PUSH
33876: LD_INT 3
33878: NONEQUAL
33879: IFFALSE 33883
// exit ;
33881: GO 34118
// for i := 1 to Count ( factoryWaypoints ) do
33883: LD_ADDR_VAR 0 5
33887: PUSH
33888: DOUBLE
33889: LD_INT 1
33891: DEC
33892: ST_TO_ADDR
33893: LD_EXP 121
33897: PPUSH
33898: CALL 42621 0 1
33902: PUSH
33903: FOR_TO
33904: IFFALSE 34066
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
33906: LD_VAR 0 2
33910: PPUSH
33911: LD_VAR 0 3
33915: PPUSH
33916: CALL_OW 428
33920: PUSH
33921: LD_EXP 121
33925: PUSH
33926: LD_VAR 0 5
33930: ARRAY
33931: PUSH
33932: LD_INT 2
33934: ARRAY
33935: EQUAL
33936: IFFALSE 33968
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
33938: LD_ADDR_EXP 121
33942: PUSH
33943: LD_EXP 121
33947: PPUSH
33948: LD_VAR 0 5
33952: PPUSH
33953: CALL_OW 3
33957: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33958: CALL 34123 0 0
// exit ;
33962: POP
33963: POP
33964: GO 34118
// end else
33966: GO 34064
// if factory = factoryWaypoints [ i ] [ 2 ] then
33968: LD_VAR 0 1
33972: PUSH
33973: LD_EXP 121
33977: PUSH
33978: LD_VAR 0 5
33982: ARRAY
33983: PUSH
33984: LD_INT 2
33986: ARRAY
33987: EQUAL
33988: IFFALSE 34064
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
33990: LD_ADDR_EXP 121
33994: PUSH
33995: LD_EXP 121
33999: PPUSH
34000: LD_VAR 0 5
34004: PPUSH
34005: CALL_OW 3
34009: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34010: LD_ADDR_EXP 121
34014: PUSH
34015: LD_EXP 121
34019: PPUSH
34020: LD_VAR 0 1
34024: PPUSH
34025: CALL_OW 255
34029: PUSH
34030: LD_VAR 0 1
34034: PUSH
34035: LD_VAR 0 2
34039: PUSH
34040: LD_VAR 0 3
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: PPUSH
34051: CALL 78230 0 2
34055: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34056: CALL 34123 0 0
// exit ;
34060: POP
34061: POP
34062: GO 34118
// end ; end ;
34064: GO 33903
34066: POP
34067: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34068: LD_ADDR_EXP 121
34072: PUSH
34073: LD_EXP 121
34077: PPUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 255
34087: PUSH
34088: LD_VAR 0 1
34092: PUSH
34093: LD_VAR 0 2
34097: PUSH
34098: LD_VAR 0 3
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: PPUSH
34109: CALL 78230 0 2
34113: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34114: CALL 34123 0 0
// end ;
34118: LD_VAR 0 4
34122: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34123: LD_INT 0
34125: PPUSH
34126: PPUSH
34127: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34128: LD_STRING resetFactoryWaypoint();
34130: PPUSH
34131: CALL_OW 559
// if factoryWaypoints then
34135: LD_EXP 121
34139: IFFALSE 34260
// begin list := factoryWaypoints ;
34141: LD_ADDR_VAR 0 3
34145: PUSH
34146: LD_EXP 121
34150: ST_TO_ADDR
// for i := 1 to list do
34151: LD_ADDR_VAR 0 2
34155: PUSH
34156: DOUBLE
34157: LD_INT 1
34159: DEC
34160: ST_TO_ADDR
34161: LD_VAR 0 3
34165: PUSH
34166: FOR_TO
34167: IFFALSE 34258
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34169: LD_STRING setFactoryWaypointXY(
34171: PUSH
34172: LD_VAR 0 3
34176: PUSH
34177: LD_VAR 0 2
34181: ARRAY
34182: PUSH
34183: LD_INT 1
34185: ARRAY
34186: STR
34187: PUSH
34188: LD_STRING ,
34190: STR
34191: PUSH
34192: LD_VAR 0 3
34196: PUSH
34197: LD_VAR 0 2
34201: ARRAY
34202: PUSH
34203: LD_INT 2
34205: ARRAY
34206: STR
34207: PUSH
34208: LD_STRING ,
34210: STR
34211: PUSH
34212: LD_VAR 0 3
34216: PUSH
34217: LD_VAR 0 2
34221: ARRAY
34222: PUSH
34223: LD_INT 3
34225: ARRAY
34226: STR
34227: PUSH
34228: LD_STRING ,
34230: STR
34231: PUSH
34232: LD_VAR 0 3
34236: PUSH
34237: LD_VAR 0 2
34241: ARRAY
34242: PUSH
34243: LD_INT 4
34245: ARRAY
34246: STR
34247: PUSH
34248: LD_STRING )
34250: STR
34251: PPUSH
34252: CALL_OW 559
34256: GO 34166
34258: POP
34259: POP
// end ; end ;
34260: LD_VAR 0 1
34264: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34265: LD_INT 0
34267: PPUSH
// if HexInfo ( x , y ) = warehouse then
34268: LD_VAR 0 2
34272: PPUSH
34273: LD_VAR 0 3
34277: PPUSH
34278: CALL_OW 428
34282: PUSH
34283: LD_VAR 0 1
34287: EQUAL
34288: IFFALSE 34315
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34290: LD_ADDR_EXP 122
34294: PUSH
34295: LD_EXP 122
34299: PPUSH
34300: LD_VAR 0 1
34304: PPUSH
34305: LD_INT 0
34307: PPUSH
34308: CALL_OW 1
34312: ST_TO_ADDR
34313: GO 34366
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34315: LD_ADDR_EXP 122
34319: PUSH
34320: LD_EXP 122
34324: PPUSH
34325: LD_VAR 0 1
34329: PPUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 255
34339: PUSH
34340: LD_VAR 0 1
34344: PUSH
34345: LD_VAR 0 2
34349: PUSH
34350: LD_VAR 0 3
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: PPUSH
34361: CALL_OW 1
34365: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34366: CALL 34375 0 0
// end ;
34370: LD_VAR 0 4
34374: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34375: LD_INT 0
34377: PPUSH
34378: PPUSH
34379: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34380: LD_STRING resetWarehouseGatheringPoints();
34382: PPUSH
34383: CALL_OW 559
// if warehouseGatheringPoints then
34387: LD_EXP 122
34391: IFFALSE 34517
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_EXP 122
34402: PPUSH
34403: CALL 81992 0 1
34407: ST_TO_ADDR
// for i := 1 to list do
34408: LD_ADDR_VAR 0 2
34412: PUSH
34413: DOUBLE
34414: LD_INT 1
34416: DEC
34417: ST_TO_ADDR
34418: LD_VAR 0 3
34422: PUSH
34423: FOR_TO
34424: IFFALSE 34515
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34426: LD_STRING setWarehouseGatheringPointXY(
34428: PUSH
34429: LD_VAR 0 3
34433: PUSH
34434: LD_VAR 0 2
34438: ARRAY
34439: PUSH
34440: LD_INT 1
34442: ARRAY
34443: STR
34444: PUSH
34445: LD_STRING ,
34447: STR
34448: PUSH
34449: LD_VAR 0 3
34453: PUSH
34454: LD_VAR 0 2
34458: ARRAY
34459: PUSH
34460: LD_INT 2
34462: ARRAY
34463: STR
34464: PUSH
34465: LD_STRING ,
34467: STR
34468: PUSH
34469: LD_VAR 0 3
34473: PUSH
34474: LD_VAR 0 2
34478: ARRAY
34479: PUSH
34480: LD_INT 3
34482: ARRAY
34483: STR
34484: PUSH
34485: LD_STRING ,
34487: STR
34488: PUSH
34489: LD_VAR 0 3
34493: PUSH
34494: LD_VAR 0 2
34498: ARRAY
34499: PUSH
34500: LD_INT 4
34502: ARRAY
34503: STR
34504: PUSH
34505: LD_STRING )
34507: STR
34508: PPUSH
34509: CALL_OW 559
34513: GO 34423
34515: POP
34516: POP
// end ; end ;
34517: LD_VAR 0 1
34521: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34522: LD_EXP 122
34526: IFFALSE 35211
34528: GO 34530
34530: DISABLE
34531: LD_INT 0
34533: PPUSH
34534: PPUSH
34535: PPUSH
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
// begin enable ;
34542: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_EXP 122
34552: PPUSH
34553: CALL 81992 0 1
34557: ST_TO_ADDR
// if not list then
34558: LD_VAR 0 3
34562: NOT
34563: IFFALSE 34567
// exit ;
34565: GO 35211
// for i := 1 to list do
34567: LD_ADDR_VAR 0 1
34571: PUSH
34572: DOUBLE
34573: LD_INT 1
34575: DEC
34576: ST_TO_ADDR
34577: LD_VAR 0 3
34581: PUSH
34582: FOR_TO
34583: IFFALSE 35209
// begin depot := list [ i ] [ 2 ] ;
34585: LD_ADDR_VAR 0 8
34589: PUSH
34590: LD_VAR 0 3
34594: PUSH
34595: LD_VAR 0 1
34599: ARRAY
34600: PUSH
34601: LD_INT 2
34603: ARRAY
34604: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34605: LD_ADDR_VAR 0 5
34609: PUSH
34610: LD_VAR 0 3
34614: PUSH
34615: LD_VAR 0 1
34619: ARRAY
34620: PUSH
34621: LD_INT 1
34623: ARRAY
34624: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34625: LD_VAR 0 8
34629: PPUSH
34630: CALL_OW 301
34634: PUSH
34635: LD_VAR 0 5
34639: PUSH
34640: LD_VAR 0 8
34644: PPUSH
34645: CALL_OW 255
34649: NONEQUAL
34650: OR
34651: IFFALSE 34680
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34653: LD_ADDR_EXP 122
34657: PUSH
34658: LD_EXP 122
34662: PPUSH
34663: LD_VAR 0 8
34667: PPUSH
34668: LD_INT 0
34670: PPUSH
34671: CALL_OW 1
34675: ST_TO_ADDR
// exit ;
34676: POP
34677: POP
34678: GO 35211
// end ; x := list [ i ] [ 3 ] ;
34680: LD_ADDR_VAR 0 6
34684: PUSH
34685: LD_VAR 0 3
34689: PUSH
34690: LD_VAR 0 1
34694: ARRAY
34695: PUSH
34696: LD_INT 3
34698: ARRAY
34699: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34700: LD_ADDR_VAR 0 7
34704: PUSH
34705: LD_VAR 0 3
34709: PUSH
34710: LD_VAR 0 1
34714: ARRAY
34715: PUSH
34716: LD_INT 4
34718: ARRAY
34719: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34720: LD_ADDR_VAR 0 9
34724: PUSH
34725: LD_VAR 0 6
34729: PPUSH
34730: LD_VAR 0 7
34734: PPUSH
34735: LD_INT 16
34737: PPUSH
34738: CALL 80576 0 3
34742: ST_TO_ADDR
// if not cratesNearbyPoint then
34743: LD_VAR 0 9
34747: NOT
34748: IFFALSE 34754
// exit ;
34750: POP
34751: POP
34752: GO 35211
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34754: LD_ADDR_VAR 0 4
34758: PUSH
34759: LD_INT 22
34761: PUSH
34762: LD_VAR 0 5
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: LD_INT 60
34776: PUSH
34777: EMPTY
34778: LIST
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 91
34786: PUSH
34787: LD_VAR 0 8
34791: PUSH
34792: LD_INT 6
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: LD_INT 25
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 25
34815: PUSH
34816: LD_INT 16
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: PPUSH
34834: CALL_OW 69
34838: PUSH
34839: LD_VAR 0 8
34843: PPUSH
34844: CALL_OW 313
34848: PPUSH
34849: LD_INT 3
34851: PUSH
34852: LD_INT 60
34854: PUSH
34855: EMPTY
34856: LIST
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 25
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 25
34877: PUSH
34878: LD_INT 16
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PPUSH
34894: CALL_OW 72
34898: UNION
34899: ST_TO_ADDR
// if tmp then
34900: LD_VAR 0 4
34904: IFFALSE 34984
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34906: LD_ADDR_VAR 0 4
34910: PUSH
34911: LD_VAR 0 4
34915: PPUSH
34916: LD_INT 3
34918: PPUSH
34919: CALL 78545 0 2
34923: ST_TO_ADDR
// for j in tmp do
34924: LD_ADDR_VAR 0 2
34928: PUSH
34929: LD_VAR 0 4
34933: PUSH
34934: FOR_IN
34935: IFFALSE 34978
// begin if IsInUnit ( j ) then
34937: LD_VAR 0 2
34941: PPUSH
34942: CALL_OW 310
34946: IFFALSE 34957
// ComExit ( j ) ;
34948: LD_VAR 0 2
34952: PPUSH
34953: CALL 78628 0 1
// AddComCollect ( j , x , y ) ;
34957: LD_VAR 0 2
34961: PPUSH
34962: LD_VAR 0 6
34966: PPUSH
34967: LD_VAR 0 7
34971: PPUSH
34972: CALL_OW 177
// end ;
34976: GO 34934
34978: POP
34979: POP
// exit ;
34980: POP
34981: POP
34982: GO 35211
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34984: LD_ADDR_VAR 0 4
34988: PUSH
34989: LD_INT 22
34991: PUSH
34992: LD_VAR 0 5
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 91
35003: PUSH
35004: LD_VAR 0 8
35008: PUSH
35009: LD_INT 8
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: LD_INT 34
35022: PUSH
35023: LD_INT 12
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 34
35032: PUSH
35033: LD_INT 51
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 34
35042: PUSH
35043: LD_INT 32
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 34
35052: PUSH
35053: LD_INT 89
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: PPUSH
35072: CALL_OW 69
35076: ST_TO_ADDR
// if tmp then
35077: LD_VAR 0 4
35081: IFFALSE 35207
// begin for j in tmp do
35083: LD_ADDR_VAR 0 2
35087: PUSH
35088: LD_VAR 0 4
35092: PUSH
35093: FOR_IN
35094: IFFALSE 35205
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35096: LD_VAR 0 2
35100: PPUSH
35101: CALL_OW 262
35105: PUSH
35106: LD_INT 3
35108: EQUAL
35109: PUSH
35110: LD_VAR 0 2
35114: PPUSH
35115: CALL_OW 261
35119: PUSH
35120: LD_INT 20
35122: GREATER
35123: OR
35124: PUSH
35125: LD_VAR 0 2
35129: PPUSH
35130: CALL_OW 314
35134: NOT
35135: AND
35136: PUSH
35137: LD_VAR 0 2
35141: PPUSH
35142: CALL_OW 263
35146: PUSH
35147: LD_INT 1
35149: NONEQUAL
35150: PUSH
35151: LD_VAR 0 2
35155: PPUSH
35156: CALL_OW 311
35160: OR
35161: AND
35162: IFFALSE 35203
// begin ComCollect ( j , x , y ) ;
35164: LD_VAR 0 2
35168: PPUSH
35169: LD_VAR 0 6
35173: PPUSH
35174: LD_VAR 0 7
35178: PPUSH
35179: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35183: LD_VAR 0 2
35187: PPUSH
35188: LD_VAR 0 8
35192: PPUSH
35193: CALL_OW 172
// exit ;
35197: POP
35198: POP
35199: POP
35200: POP
35201: GO 35211
// end ;
35203: GO 35093
35205: POP
35206: POP
// end ; end ;
35207: GO 34582
35209: POP
35210: POP
// end ; end_of_file
35211: PPOPN 9
35213: END
// export function SOS_UnitDestroyed ( un ) ; begin
35214: LD_INT 0
35216: PPUSH
// ComRadiation ( un ) ;
35217: LD_VAR 0 1
35221: PPUSH
35222: CALL 36203 0 1
// end ;
35226: LD_VAR 0 2
35230: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35231: LD_INT 0
35233: PPUSH
// ComRadiation ( un ) ;
35234: LD_VAR 0 1
35238: PPUSH
35239: CALL 36203 0 1
// end ;
35243: LD_VAR 0 2
35247: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35248: LD_INT 0
35250: PPUSH
// end ;
35251: LD_VAR 0 4
35255: RET
// export function SOS_Command ( cmd ) ; begin
35256: LD_INT 0
35258: PPUSH
// end ;
35259: LD_VAR 0 2
35263: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35264: LD_INT 0
35266: PPUSH
// end ;
35267: LD_VAR 0 6
35271: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
35272: LD_INT 0
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
// if not vehicle or not factory then
35279: LD_VAR 0 1
35283: NOT
35284: PUSH
35285: LD_VAR 0 2
35289: NOT
35290: OR
35291: IFFALSE 35295
// exit ;
35293: GO 35794
// if not factoryWaypoints then
35295: LD_EXP 121
35299: NOT
35300: IFFALSE 35304
// exit ;
35302: GO 35794
// for i := 1 to Count ( factoryWaypoints ) do
35304: LD_ADDR_VAR 0 4
35308: PUSH
35309: DOUBLE
35310: LD_INT 1
35312: DEC
35313: ST_TO_ADDR
35314: LD_EXP 121
35318: PPUSH
35319: CALL 42621 0 1
35323: PUSH
35324: FOR_TO
35325: IFFALSE 35792
// if factoryWaypoints [ i ] [ 2 ] = factory then
35327: LD_EXP 121
35331: PUSH
35332: LD_VAR 0 4
35336: ARRAY
35337: PUSH
35338: LD_INT 2
35340: ARRAY
35341: PUSH
35342: LD_VAR 0 2
35346: EQUAL
35347: IFFALSE 35790
// begin if GetControl ( vehicle ) = control_manual then
35349: LD_VAR 0 1
35353: PPUSH
35354: CALL_OW 263
35358: PUSH
35359: LD_INT 1
35361: EQUAL
35362: IFFALSE 35673
// begin driver := IsDrivenBy ( vehicle ) ;
35364: LD_ADDR_VAR 0 6
35368: PUSH
35369: LD_VAR 0 1
35373: PPUSH
35374: CALL_OW 311
35378: ST_TO_ADDR
// tag := GetTag ( driver ) ;
35379: LD_ADDR_VAR 0 5
35383: PUSH
35384: LD_VAR 0 6
35388: PPUSH
35389: CALL_OW 110
35393: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
35394: LD_VAR 0 5
35398: PUSH
35399: LD_INT 501
35401: EQUAL
35402: PUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 110
35412: PUSH
35413: LD_INT 501
35415: EQUAL
35416: OR
35417: IFFALSE 35423
// exit ;
35419: POP
35420: POP
35421: GO 35794
// if not HasTask ( driver ) then
35423: LD_VAR 0 6
35427: PPUSH
35428: CALL_OW 314
35432: NOT
35433: IFFALSE 35671
// begin SetTag ( driver , tDriver ) ;
35435: LD_VAR 0 6
35439: PPUSH
35440: LD_INT 501
35442: PPUSH
35443: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
35447: LD_VAR 0 1
35451: PPUSH
35452: LD_INT 501
35454: PPUSH
35455: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35459: LD_ADDR_VAR 0 7
35463: PUSH
35464: LD_EXP 121
35468: PUSH
35469: LD_VAR 0 4
35473: ARRAY
35474: PUSH
35475: LD_INT 3
35477: ARRAY
35478: PPUSH
35479: LD_EXP 121
35483: PUSH
35484: LD_VAR 0 4
35488: ARRAY
35489: PUSH
35490: LD_INT 4
35492: ARRAY
35493: PPUSH
35494: CALL_OW 428
35498: ST_TO_ADDR
// if hex then
35499: LD_VAR 0 7
35503: IFFALSE 35521
// ComMoveUnit ( driver , hex ) else
35505: LD_VAR 0 6
35509: PPUSH
35510: LD_VAR 0 7
35514: PPUSH
35515: CALL_OW 112
35519: GO 35560
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35521: LD_VAR 0 6
35525: PPUSH
35526: LD_EXP 121
35530: PUSH
35531: LD_VAR 0 4
35535: ARRAY
35536: PUSH
35537: LD_INT 3
35539: ARRAY
35540: PPUSH
35541: LD_EXP 121
35545: PUSH
35546: LD_VAR 0 4
35550: ARRAY
35551: PUSH
35552: LD_INT 4
35554: ARRAY
35555: PPUSH
35556: CALL_OW 111
// AddComExitVehicle ( driver ) ;
35560: LD_VAR 0 6
35564: PPUSH
35565: CALL_OW 181
// if Multiplayer then
35569: LD_OWVAR 4
35573: IFFALSE 35622
// begin repeat wait ( 10 ) ;
35575: LD_INT 10
35577: PPUSH
35578: CALL_OW 67
// until not IsInUnit ( driver ) ;
35582: LD_VAR 0 6
35586: PPUSH
35587: CALL_OW 310
35591: NOT
35592: IFFALSE 35575
// if not HasTask ( driver ) then
35594: LD_VAR 0 6
35598: PPUSH
35599: CALL_OW 314
35603: NOT
35604: IFFALSE 35620
// ComEnterUnit ( driver , factory ) ;
35606: LD_VAR 0 6
35610: PPUSH
35611: LD_VAR 0 2
35615: PPUSH
35616: CALL_OW 120
// end else
35620: GO 35636
// AddComEnterUnit ( driver , factory ) ;
35622: LD_VAR 0 6
35626: PPUSH
35627: LD_VAR 0 2
35631: PPUSH
35632: CALL_OW 180
// wait ( 0 0$1 ) ;
35636: LD_INT 35
35638: PPUSH
35639: CALL_OW 67
// SetTag ( driver , tag ) ;
35643: LD_VAR 0 6
35647: PPUSH
35648: LD_VAR 0 5
35652: PPUSH
35653: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
35657: LD_VAR 0 1
35661: PPUSH
35662: LD_INT 0
35664: PPUSH
35665: CALL_OW 109
// break ;
35669: GO 35792
// end ; end else
35671: GO 35790
// if GetControl ( vehicle ) = control_remote then
35673: LD_VAR 0 1
35677: PPUSH
35678: CALL_OW 263
35682: PUSH
35683: LD_INT 2
35685: EQUAL
35686: IFFALSE 35749
// begin wait ( 0 0$2 ) ;
35688: LD_INT 70
35690: PPUSH
35691: CALL_OW 67
// if Connect ( vehicle ) then
35695: LD_VAR 0 1
35699: PPUSH
35700: CALL 48827 0 1
35704: IFFALSE 35745
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35706: LD_VAR 0 1
35710: PPUSH
35711: LD_EXP 121
35715: PUSH
35716: LD_VAR 0 4
35720: ARRAY
35721: PUSH
35722: LD_INT 3
35724: ARRAY
35725: PPUSH
35726: LD_EXP 121
35730: PUSH
35731: LD_VAR 0 4
35735: ARRAY
35736: PUSH
35737: LD_INT 4
35739: ARRAY
35740: PPUSH
35741: CALL_OW 171
// break ;
35745: GO 35792
// end else
35747: GO 35790
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35749: LD_VAR 0 1
35753: PPUSH
35754: LD_EXP 121
35758: PUSH
35759: LD_VAR 0 4
35763: ARRAY
35764: PUSH
35765: LD_INT 3
35767: ARRAY
35768: PPUSH
35769: LD_EXP 121
35773: PUSH
35774: LD_VAR 0 4
35778: ARRAY
35779: PUSH
35780: LD_INT 4
35782: ARRAY
35783: PPUSH
35784: CALL_OW 171
// break ;
35788: GO 35792
// end ; end ;
35790: GO 35324
35792: POP
35793: POP
// end ;
35794: LD_VAR 0 3
35798: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35799: LD_INT 0
35801: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35802: LD_VAR 0 1
35806: PUSH
35807: LD_INT 250
35809: EQUAL
35810: PUSH
35811: LD_VAR 0 2
35815: PPUSH
35816: CALL_OW 264
35820: PUSH
35821: LD_INT 81
35823: EQUAL
35824: AND
35825: IFFALSE 35846
// MinerPlaceMine ( unit , x , y ) ;
35827: LD_VAR 0 2
35831: PPUSH
35832: LD_VAR 0 4
35836: PPUSH
35837: LD_VAR 0 5
35841: PPUSH
35842: CALL 38938 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35846: LD_VAR 0 1
35850: PUSH
35851: LD_INT 251
35853: EQUAL
35854: PUSH
35855: LD_VAR 0 2
35859: PPUSH
35860: CALL_OW 264
35864: PUSH
35865: LD_INT 81
35867: EQUAL
35868: AND
35869: IFFALSE 35890
// MinerDetonateMine ( unit , x , y ) ;
35871: LD_VAR 0 2
35875: PPUSH
35876: LD_VAR 0 4
35880: PPUSH
35881: LD_VAR 0 5
35885: PPUSH
35886: CALL 39213 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35890: LD_VAR 0 1
35894: PUSH
35895: LD_INT 252
35897: EQUAL
35898: PUSH
35899: LD_VAR 0 2
35903: PPUSH
35904: CALL_OW 264
35908: PUSH
35909: LD_INT 81
35911: EQUAL
35912: AND
35913: IFFALSE 35934
// MinerCreateMinefield ( unit , x , y ) ;
35915: LD_VAR 0 2
35919: PPUSH
35920: LD_VAR 0 4
35924: PPUSH
35925: LD_VAR 0 5
35929: PPUSH
35930: CALL 39630 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35934: LD_VAR 0 1
35938: PUSH
35939: LD_INT 253
35941: EQUAL
35942: PUSH
35943: LD_VAR 0 2
35947: PPUSH
35948: CALL_OW 257
35952: PUSH
35953: LD_INT 5
35955: EQUAL
35956: AND
35957: IFFALSE 35978
// ComBinocular ( unit , x , y ) ;
35959: LD_VAR 0 2
35963: PPUSH
35964: LD_VAR 0 4
35968: PPUSH
35969: LD_VAR 0 5
35973: PPUSH
35974: CALL 39999 0 3
// if selectedUnit then
35978: LD_VAR 0 3
35982: IFFALSE 36038
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35984: LD_VAR 0 1
35988: PUSH
35989: LD_INT 254
35991: EQUAL
35992: PUSH
35993: LD_VAR 0 2
35997: PPUSH
35998: CALL_OW 264
36002: PUSH
36003: LD_INT 99
36005: EQUAL
36006: AND
36007: PUSH
36008: LD_VAR 0 3
36012: PPUSH
36013: CALL_OW 263
36017: PUSH
36018: LD_INT 3
36020: EQUAL
36021: AND
36022: IFFALSE 36038
// HackDestroyVehicle ( unit , selectedUnit ) ;
36024: LD_VAR 0 2
36028: PPUSH
36029: LD_VAR 0 3
36033: PPUSH
36034: CALL 38302 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36038: LD_VAR 0 1
36042: PUSH
36043: LD_INT 255
36045: EQUAL
36046: PUSH
36047: LD_VAR 0 2
36051: PPUSH
36052: CALL_OW 264
36056: PUSH
36057: LD_INT 14
36059: PUSH
36060: LD_INT 53
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: IN
36067: AND
36068: PUSH
36069: LD_VAR 0 4
36073: PPUSH
36074: LD_VAR 0 5
36078: PPUSH
36079: CALL_OW 488
36083: AND
36084: IFFALSE 36108
// CutTreeXYR ( unit , x , y , 12 ) ;
36086: LD_VAR 0 2
36090: PPUSH
36091: LD_VAR 0 4
36095: PPUSH
36096: LD_VAR 0 5
36100: PPUSH
36101: LD_INT 12
36103: PPUSH
36104: CALL 36299 0 4
// if cmd = 256 then
36108: LD_VAR 0 1
36112: PUSH
36113: LD_INT 256
36115: EQUAL
36116: IFFALSE 36137
// SetFactoryWaypoint ( unit , x , y ) ;
36118: LD_VAR 0 2
36122: PPUSH
36123: LD_VAR 0 4
36127: PPUSH
36128: LD_VAR 0 5
36132: PPUSH
36133: CALL 33775 0 3
// if cmd = 257 then
36137: LD_VAR 0 1
36141: PUSH
36142: LD_INT 257
36144: EQUAL
36145: IFFALSE 36166
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36147: LD_VAR 0 2
36151: PPUSH
36152: LD_VAR 0 4
36156: PPUSH
36157: LD_VAR 0 5
36161: PPUSH
36162: CALL 34265 0 3
// if cmd = 258 then
36166: LD_VAR 0 1
36170: PUSH
36171: LD_INT 258
36173: EQUAL
36174: IFFALSE 36198
// BurnTreeXYR ( unit , x , y , 8 ) ;
36176: LD_VAR 0 2
36180: PPUSH
36181: LD_VAR 0 4
36185: PPUSH
36186: LD_VAR 0 5
36190: PPUSH
36191: LD_INT 8
36193: PPUSH
36194: CALL 36693 0 4
// end ;
36198: LD_VAR 0 6
36202: RET
// export function ComRadiation ( un ) ; var eff ; begin
36203: LD_INT 0
36205: PPUSH
36206: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36207: LD_VAR 0 1
36211: PPUSH
36212: CALL_OW 264
36216: PUSH
36217: LD_INT 91
36219: NONEQUAL
36220: IFFALSE 36224
// exit ;
36222: GO 36294
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36224: LD_INT 68
36226: PPUSH
36227: LD_VAR 0 1
36231: PPUSH
36232: CALL_OW 255
36236: PPUSH
36237: CALL_OW 321
36241: PUSH
36242: LD_INT 2
36244: EQUAL
36245: IFFALSE 36257
// eff := 70 else
36247: LD_ADDR_VAR 0 3
36251: PUSH
36252: LD_INT 70
36254: ST_TO_ADDR
36255: GO 36265
// eff := 30 ;
36257: LD_ADDR_VAR 0 3
36261: PUSH
36262: LD_INT 30
36264: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL_OW 250
36274: PPUSH
36275: LD_VAR 0 1
36279: PPUSH
36280: CALL_OW 251
36284: PPUSH
36285: LD_VAR 0 3
36289: PPUSH
36290: CALL_OW 495
// end ;
36294: LD_VAR 0 2
36298: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36299: LD_INT 0
36301: PPUSH
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36310: LD_VAR 0 1
36314: PPUSH
36315: CALL_OW 302
36319: NOT
36320: PUSH
36321: LD_VAR 0 2
36325: PPUSH
36326: LD_VAR 0 3
36330: PPUSH
36331: CALL_OW 488
36335: NOT
36336: OR
36337: PUSH
36338: LD_VAR 0 4
36342: NOT
36343: OR
36344: IFFALSE 36348
// exit ;
36346: GO 36688
// list := [ ] ;
36348: LD_ADDR_VAR 0 13
36352: PUSH
36353: EMPTY
36354: ST_TO_ADDR
// if x - r < 0 then
36355: LD_VAR 0 2
36359: PUSH
36360: LD_VAR 0 4
36364: MINUS
36365: PUSH
36366: LD_INT 0
36368: LESS
36369: IFFALSE 36381
// min_x := 0 else
36371: LD_ADDR_VAR 0 7
36375: PUSH
36376: LD_INT 0
36378: ST_TO_ADDR
36379: GO 36397
// min_x := x - r ;
36381: LD_ADDR_VAR 0 7
36385: PUSH
36386: LD_VAR 0 2
36390: PUSH
36391: LD_VAR 0 4
36395: MINUS
36396: ST_TO_ADDR
// if y - r < 0 then
36397: LD_VAR 0 3
36401: PUSH
36402: LD_VAR 0 4
36406: MINUS
36407: PUSH
36408: LD_INT 0
36410: LESS
36411: IFFALSE 36423
// min_y := 0 else
36413: LD_ADDR_VAR 0 8
36417: PUSH
36418: LD_INT 0
36420: ST_TO_ADDR
36421: GO 36439
// min_y := y - r ;
36423: LD_ADDR_VAR 0 8
36427: PUSH
36428: LD_VAR 0 3
36432: PUSH
36433: LD_VAR 0 4
36437: MINUS
36438: ST_TO_ADDR
// max_x := x + r ;
36439: LD_ADDR_VAR 0 9
36443: PUSH
36444: LD_VAR 0 2
36448: PUSH
36449: LD_VAR 0 4
36453: PLUS
36454: ST_TO_ADDR
// max_y := y + r ;
36455: LD_ADDR_VAR 0 10
36459: PUSH
36460: LD_VAR 0 3
36464: PUSH
36465: LD_VAR 0 4
36469: PLUS
36470: ST_TO_ADDR
// for _x = min_x to max_x do
36471: LD_ADDR_VAR 0 11
36475: PUSH
36476: DOUBLE
36477: LD_VAR 0 7
36481: DEC
36482: ST_TO_ADDR
36483: LD_VAR 0 9
36487: PUSH
36488: FOR_TO
36489: IFFALSE 36606
// for _y = min_y to max_y do
36491: LD_ADDR_VAR 0 12
36495: PUSH
36496: DOUBLE
36497: LD_VAR 0 8
36501: DEC
36502: ST_TO_ADDR
36503: LD_VAR 0 10
36507: PUSH
36508: FOR_TO
36509: IFFALSE 36602
// begin if not ValidHex ( _x , _y ) then
36511: LD_VAR 0 11
36515: PPUSH
36516: LD_VAR 0 12
36520: PPUSH
36521: CALL_OW 488
36525: NOT
36526: IFFALSE 36530
// continue ;
36528: GO 36508
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36530: LD_VAR 0 11
36534: PPUSH
36535: LD_VAR 0 12
36539: PPUSH
36540: CALL_OW 351
36544: PUSH
36545: LD_VAR 0 11
36549: PPUSH
36550: LD_VAR 0 12
36554: PPUSH
36555: CALL_OW 554
36559: AND
36560: IFFALSE 36600
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36562: LD_ADDR_VAR 0 13
36566: PUSH
36567: LD_VAR 0 13
36571: PPUSH
36572: LD_VAR 0 13
36576: PUSH
36577: LD_INT 1
36579: PLUS
36580: PPUSH
36581: LD_VAR 0 11
36585: PUSH
36586: LD_VAR 0 12
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PPUSH
36595: CALL_OW 2
36599: ST_TO_ADDR
// end ;
36600: GO 36508
36602: POP
36603: POP
36604: GO 36488
36606: POP
36607: POP
// if not list then
36608: LD_VAR 0 13
36612: NOT
36613: IFFALSE 36617
// exit ;
36615: GO 36688
// for i in list do
36617: LD_ADDR_VAR 0 6
36621: PUSH
36622: LD_VAR 0 13
36626: PUSH
36627: FOR_IN
36628: IFFALSE 36686
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36630: LD_VAR 0 1
36634: PPUSH
36635: LD_STRING M
36637: PUSH
36638: LD_VAR 0 6
36642: PUSH
36643: LD_INT 1
36645: ARRAY
36646: PUSH
36647: LD_VAR 0 6
36651: PUSH
36652: LD_INT 2
36654: ARRAY
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: PUSH
36677: EMPTY
36678: LIST
36679: PPUSH
36680: CALL_OW 447
36684: GO 36627
36686: POP
36687: POP
// end ;
36688: LD_VAR 0 5
36692: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36693: LD_INT 0
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36705: LD_VAR 0 1
36709: PPUSH
36710: CALL_OW 302
36714: NOT
36715: PUSH
36716: LD_VAR 0 2
36720: PPUSH
36721: LD_VAR 0 3
36725: PPUSH
36726: CALL_OW 488
36730: NOT
36731: OR
36732: PUSH
36733: LD_VAR 0 4
36737: NOT
36738: OR
36739: IFFALSE 36743
// exit ;
36741: GO 37256
// list := [ ] ;
36743: LD_ADDR_VAR 0 13
36747: PUSH
36748: EMPTY
36749: ST_TO_ADDR
// if x - r < 0 then
36750: LD_VAR 0 2
36754: PUSH
36755: LD_VAR 0 4
36759: MINUS
36760: PUSH
36761: LD_INT 0
36763: LESS
36764: IFFALSE 36776
// min_x := 0 else
36766: LD_ADDR_VAR 0 7
36770: PUSH
36771: LD_INT 0
36773: ST_TO_ADDR
36774: GO 36792
// min_x := x - r ;
36776: LD_ADDR_VAR 0 7
36780: PUSH
36781: LD_VAR 0 2
36785: PUSH
36786: LD_VAR 0 4
36790: MINUS
36791: ST_TO_ADDR
// if y - r < 0 then
36792: LD_VAR 0 3
36796: PUSH
36797: LD_VAR 0 4
36801: MINUS
36802: PUSH
36803: LD_INT 0
36805: LESS
36806: IFFALSE 36818
// min_y := 0 else
36808: LD_ADDR_VAR 0 8
36812: PUSH
36813: LD_INT 0
36815: ST_TO_ADDR
36816: GO 36834
// min_y := y - r ;
36818: LD_ADDR_VAR 0 8
36822: PUSH
36823: LD_VAR 0 3
36827: PUSH
36828: LD_VAR 0 4
36832: MINUS
36833: ST_TO_ADDR
// max_x := x + r ;
36834: LD_ADDR_VAR 0 9
36838: PUSH
36839: LD_VAR 0 2
36843: PUSH
36844: LD_VAR 0 4
36848: PLUS
36849: ST_TO_ADDR
// max_y := y + r ;
36850: LD_ADDR_VAR 0 10
36854: PUSH
36855: LD_VAR 0 3
36859: PUSH
36860: LD_VAR 0 4
36864: PLUS
36865: ST_TO_ADDR
// for _x = min_x to max_x do
36866: LD_ADDR_VAR 0 11
36870: PUSH
36871: DOUBLE
36872: LD_VAR 0 7
36876: DEC
36877: ST_TO_ADDR
36878: LD_VAR 0 9
36882: PUSH
36883: FOR_TO
36884: IFFALSE 37001
// for _y = min_y to max_y do
36886: LD_ADDR_VAR 0 12
36890: PUSH
36891: DOUBLE
36892: LD_VAR 0 8
36896: DEC
36897: ST_TO_ADDR
36898: LD_VAR 0 10
36902: PUSH
36903: FOR_TO
36904: IFFALSE 36997
// begin if not ValidHex ( _x , _y ) then
36906: LD_VAR 0 11
36910: PPUSH
36911: LD_VAR 0 12
36915: PPUSH
36916: CALL_OW 488
36920: NOT
36921: IFFALSE 36925
// continue ;
36923: GO 36903
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36925: LD_VAR 0 11
36929: PPUSH
36930: LD_VAR 0 12
36934: PPUSH
36935: CALL_OW 351
36939: PUSH
36940: LD_VAR 0 11
36944: PPUSH
36945: LD_VAR 0 12
36949: PPUSH
36950: CALL_OW 554
36954: AND
36955: IFFALSE 36995
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36957: LD_ADDR_VAR 0 13
36961: PUSH
36962: LD_VAR 0 13
36966: PPUSH
36967: LD_VAR 0 13
36971: PUSH
36972: LD_INT 1
36974: PLUS
36975: PPUSH
36976: LD_VAR 0 11
36980: PUSH
36981: LD_VAR 0 12
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PPUSH
36990: CALL_OW 2
36994: ST_TO_ADDR
// end ;
36995: GO 36903
36997: POP
36998: POP
36999: GO 36883
37001: POP
37002: POP
// if not list then
37003: LD_VAR 0 13
37007: NOT
37008: IFFALSE 37012
// exit ;
37010: GO 37256
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37012: LD_ADDR_VAR 0 13
37016: PUSH
37017: LD_VAR 0 1
37021: PPUSH
37022: LD_VAR 0 13
37026: PPUSH
37027: LD_INT 1
37029: PPUSH
37030: LD_INT 1
37032: PPUSH
37033: CALL 45969 0 4
37037: ST_TO_ADDR
// ComStop ( flame ) ;
37038: LD_VAR 0 1
37042: PPUSH
37043: CALL_OW 141
// for i in list do
37047: LD_ADDR_VAR 0 6
37051: PUSH
37052: LD_VAR 0 13
37056: PUSH
37057: FOR_IN
37058: IFFALSE 37089
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37060: LD_VAR 0 1
37064: PPUSH
37065: LD_VAR 0 6
37069: PUSH
37070: LD_INT 1
37072: ARRAY
37073: PPUSH
37074: LD_VAR 0 6
37078: PUSH
37079: LD_INT 2
37081: ARRAY
37082: PPUSH
37083: CALL_OW 176
37087: GO 37057
37089: POP
37090: POP
// repeat wait ( 0 0$1 ) ;
37091: LD_INT 35
37093: PPUSH
37094: CALL_OW 67
// task := GetTaskList ( flame ) ;
37098: LD_ADDR_VAR 0 14
37102: PUSH
37103: LD_VAR 0 1
37107: PPUSH
37108: CALL_OW 437
37112: ST_TO_ADDR
// if not task then
37113: LD_VAR 0 14
37117: NOT
37118: IFFALSE 37122
// exit ;
37120: GO 37256
// if task [ 1 ] [ 1 ] <> | then
37122: LD_VAR 0 14
37126: PUSH
37127: LD_INT 1
37129: ARRAY
37130: PUSH
37131: LD_INT 1
37133: ARRAY
37134: PUSH
37135: LD_STRING |
37137: NONEQUAL
37138: IFFALSE 37142
// exit ;
37140: GO 37256
// _x := task [ 1 ] [ 2 ] ;
37142: LD_ADDR_VAR 0 11
37146: PUSH
37147: LD_VAR 0 14
37151: PUSH
37152: LD_INT 1
37154: ARRAY
37155: PUSH
37156: LD_INT 2
37158: ARRAY
37159: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37160: LD_ADDR_VAR 0 12
37164: PUSH
37165: LD_VAR 0 14
37169: PUSH
37170: LD_INT 1
37172: ARRAY
37173: PUSH
37174: LD_INT 3
37176: ARRAY
37177: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37178: LD_VAR 0 11
37182: PPUSH
37183: LD_VAR 0 12
37187: PPUSH
37188: CALL_OW 351
37192: NOT
37193: PUSH
37194: LD_VAR 0 11
37198: PPUSH
37199: LD_VAR 0 12
37203: PPUSH
37204: CALL_OW 554
37208: NOT
37209: OR
37210: IFFALSE 37244
// begin task := Delete ( task , 1 ) ;
37212: LD_ADDR_VAR 0 14
37216: PUSH
37217: LD_VAR 0 14
37221: PPUSH
37222: LD_INT 1
37224: PPUSH
37225: CALL_OW 3
37229: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37230: LD_VAR 0 1
37234: PPUSH
37235: LD_VAR 0 14
37239: PPUSH
37240: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37244: LD_VAR 0 1
37248: PPUSH
37249: CALL_OW 314
37253: NOT
37254: IFFALSE 37091
// end ;
37256: LD_VAR 0 5
37260: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37261: LD_EXP 124
37265: NOT
37266: IFFALSE 37316
37268: GO 37270
37270: DISABLE
// begin initHack := true ;
37271: LD_ADDR_EXP 124
37275: PUSH
37276: LD_INT 1
37278: ST_TO_ADDR
// hackTanks := [ ] ;
37279: LD_ADDR_EXP 125
37283: PUSH
37284: EMPTY
37285: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37286: LD_ADDR_EXP 126
37290: PUSH
37291: EMPTY
37292: ST_TO_ADDR
// hackLimit := 3 ;
37293: LD_ADDR_EXP 127
37297: PUSH
37298: LD_INT 3
37300: ST_TO_ADDR
// hackDist := 12 ;
37301: LD_ADDR_EXP 128
37305: PUSH
37306: LD_INT 12
37308: ST_TO_ADDR
// hackCounter := [ ] ;
37309: LD_ADDR_EXP 129
37313: PUSH
37314: EMPTY
37315: ST_TO_ADDR
// end ;
37316: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37317: LD_EXP 124
37321: PUSH
37322: LD_INT 34
37324: PUSH
37325: LD_INT 99
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PPUSH
37332: CALL_OW 69
37336: AND
37337: IFFALSE 37590
37339: GO 37341
37341: DISABLE
37342: LD_INT 0
37344: PPUSH
37345: PPUSH
// begin enable ;
37346: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37347: LD_ADDR_VAR 0 1
37351: PUSH
37352: LD_INT 34
37354: PUSH
37355: LD_INT 99
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PPUSH
37362: CALL_OW 69
37366: PUSH
37367: FOR_IN
37368: IFFALSE 37588
// begin if not i in hackTanks then
37370: LD_VAR 0 1
37374: PUSH
37375: LD_EXP 125
37379: IN
37380: NOT
37381: IFFALSE 37464
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37383: LD_ADDR_EXP 125
37387: PUSH
37388: LD_EXP 125
37392: PPUSH
37393: LD_EXP 125
37397: PUSH
37398: LD_INT 1
37400: PLUS
37401: PPUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 1
37411: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37412: LD_ADDR_EXP 126
37416: PUSH
37417: LD_EXP 126
37421: PPUSH
37422: LD_EXP 126
37426: PUSH
37427: LD_INT 1
37429: PLUS
37430: PPUSH
37431: EMPTY
37432: PPUSH
37433: CALL_OW 1
37437: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37438: LD_ADDR_EXP 129
37442: PUSH
37443: LD_EXP 129
37447: PPUSH
37448: LD_EXP 129
37452: PUSH
37453: LD_INT 1
37455: PLUS
37456: PPUSH
37457: EMPTY
37458: PPUSH
37459: CALL_OW 1
37463: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 302
37473: NOT
37474: IFFALSE 37487
// begin HackUnlinkAll ( i ) ;
37476: LD_VAR 0 1
37480: PPUSH
37481: CALL 37593 0 1
// continue ;
37485: GO 37367
// end ; HackCheckCapturedStatus ( i ) ;
37487: LD_VAR 0 1
37491: PPUSH
37492: CALL 38036 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37496: LD_ADDR_VAR 0 2
37500: PUSH
37501: LD_INT 81
37503: PUSH
37504: LD_VAR 0 1
37508: PPUSH
37509: CALL_OW 255
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 33
37520: PUSH
37521: LD_INT 3
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 91
37530: PUSH
37531: LD_VAR 0 1
37535: PUSH
37536: LD_EXP 128
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 50
37548: PUSH
37549: EMPTY
37550: LIST
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: PPUSH
37558: CALL_OW 69
37562: ST_TO_ADDR
// if not tmp then
37563: LD_VAR 0 2
37567: NOT
37568: IFFALSE 37572
// continue ;
37570: GO 37367
// HackLink ( i , tmp ) ;
37572: LD_VAR 0 1
37576: PPUSH
37577: LD_VAR 0 2
37581: PPUSH
37582: CALL 37729 0 2
// end ;
37586: GO 37367
37588: POP
37589: POP
// end ;
37590: PPOPN 2
37592: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37593: LD_INT 0
37595: PPUSH
37596: PPUSH
37597: PPUSH
// if not hack in hackTanks then
37598: LD_VAR 0 1
37602: PUSH
37603: LD_EXP 125
37607: IN
37608: NOT
37609: IFFALSE 37613
// exit ;
37611: GO 37724
// index := GetElementIndex ( hackTanks , hack ) ;
37613: LD_ADDR_VAR 0 4
37617: PUSH
37618: LD_EXP 125
37622: PPUSH
37623: LD_VAR 0 1
37627: PPUSH
37628: CALL 45266 0 2
37632: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37633: LD_EXP 126
37637: PUSH
37638: LD_VAR 0 4
37642: ARRAY
37643: IFFALSE 37724
// begin for i in hackTanksCaptured [ index ] do
37645: LD_ADDR_VAR 0 3
37649: PUSH
37650: LD_EXP 126
37654: PUSH
37655: LD_VAR 0 4
37659: ARRAY
37660: PUSH
37661: FOR_IN
37662: IFFALSE 37688
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37664: LD_VAR 0 3
37668: PUSH
37669: LD_INT 1
37671: ARRAY
37672: PPUSH
37673: LD_VAR 0 3
37677: PUSH
37678: LD_INT 2
37680: ARRAY
37681: PPUSH
37682: CALL_OW 235
37686: GO 37661
37688: POP
37689: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37690: LD_ADDR_EXP 126
37694: PUSH
37695: LD_EXP 126
37699: PPUSH
37700: LD_VAR 0 4
37704: PPUSH
37705: EMPTY
37706: PPUSH
37707: CALL_OW 1
37711: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37712: LD_VAR 0 1
37716: PPUSH
37717: LD_INT 0
37719: PPUSH
37720: CALL_OW 505
// end ; end ;
37724: LD_VAR 0 2
37728: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37729: LD_INT 0
37731: PPUSH
37732: PPUSH
37733: PPUSH
// if not hack in hackTanks or not vehicles then
37734: LD_VAR 0 1
37738: PUSH
37739: LD_EXP 125
37743: IN
37744: NOT
37745: PUSH
37746: LD_VAR 0 2
37750: NOT
37751: OR
37752: IFFALSE 37756
// exit ;
37754: GO 38031
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37756: LD_ADDR_VAR 0 2
37760: PUSH
37761: LD_VAR 0 1
37765: PPUSH
37766: LD_VAR 0 2
37770: PPUSH
37771: LD_INT 1
37773: PPUSH
37774: LD_INT 1
37776: PPUSH
37777: CALL 45916 0 4
37781: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37782: LD_ADDR_VAR 0 5
37786: PUSH
37787: LD_EXP 125
37791: PPUSH
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL 45266 0 2
37801: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37802: LD_EXP 126
37806: PUSH
37807: LD_VAR 0 5
37811: ARRAY
37812: PUSH
37813: LD_EXP 127
37817: LESS
37818: IFFALSE 38007
// begin for i := 1 to vehicles do
37820: LD_ADDR_VAR 0 4
37824: PUSH
37825: DOUBLE
37826: LD_INT 1
37828: DEC
37829: ST_TO_ADDR
37830: LD_VAR 0 2
37834: PUSH
37835: FOR_TO
37836: IFFALSE 38005
// begin if hackTanksCaptured [ index ] = hackLimit then
37838: LD_EXP 126
37842: PUSH
37843: LD_VAR 0 5
37847: ARRAY
37848: PUSH
37849: LD_EXP 127
37853: EQUAL
37854: IFFALSE 37858
// break ;
37856: GO 38005
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37858: LD_ADDR_EXP 129
37862: PUSH
37863: LD_EXP 129
37867: PPUSH
37868: LD_VAR 0 5
37872: PPUSH
37873: LD_EXP 129
37877: PUSH
37878: LD_VAR 0 5
37882: ARRAY
37883: PUSH
37884: LD_INT 1
37886: PLUS
37887: PPUSH
37888: CALL_OW 1
37892: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37893: LD_ADDR_EXP 126
37897: PUSH
37898: LD_EXP 126
37902: PPUSH
37903: LD_VAR 0 5
37907: PUSH
37908: LD_EXP 126
37912: PUSH
37913: LD_VAR 0 5
37917: ARRAY
37918: PUSH
37919: LD_INT 1
37921: PLUS
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PPUSH
37927: LD_VAR 0 2
37931: PUSH
37932: LD_VAR 0 4
37936: ARRAY
37937: PUSH
37938: LD_VAR 0 2
37942: PUSH
37943: LD_VAR 0 4
37947: ARRAY
37948: PPUSH
37949: CALL_OW 255
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PPUSH
37958: CALL 45481 0 3
37962: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37963: LD_VAR 0 2
37967: PUSH
37968: LD_VAR 0 4
37972: ARRAY
37973: PPUSH
37974: LD_VAR 0 1
37978: PPUSH
37979: CALL_OW 255
37983: PPUSH
37984: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37988: LD_VAR 0 2
37992: PUSH
37993: LD_VAR 0 4
37997: ARRAY
37998: PPUSH
37999: CALL_OW 141
// end ;
38003: GO 37835
38005: POP
38006: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38007: LD_VAR 0 1
38011: PPUSH
38012: LD_EXP 126
38016: PUSH
38017: LD_VAR 0 5
38021: ARRAY
38022: PUSH
38023: LD_INT 0
38025: PLUS
38026: PPUSH
38027: CALL_OW 505
// end ;
38031: LD_VAR 0 3
38035: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38036: LD_INT 0
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
// if not hack in hackTanks then
38042: LD_VAR 0 1
38046: PUSH
38047: LD_EXP 125
38051: IN
38052: NOT
38053: IFFALSE 38057
// exit ;
38055: GO 38297
// index := GetElementIndex ( hackTanks , hack ) ;
38057: LD_ADDR_VAR 0 4
38061: PUSH
38062: LD_EXP 125
38066: PPUSH
38067: LD_VAR 0 1
38071: PPUSH
38072: CALL 45266 0 2
38076: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38077: LD_ADDR_VAR 0 3
38081: PUSH
38082: DOUBLE
38083: LD_EXP 126
38087: PUSH
38088: LD_VAR 0 4
38092: ARRAY
38093: INC
38094: ST_TO_ADDR
38095: LD_INT 1
38097: PUSH
38098: FOR_DOWNTO
38099: IFFALSE 38271
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38101: LD_ADDR_VAR 0 5
38105: PUSH
38106: LD_EXP 126
38110: PUSH
38111: LD_VAR 0 4
38115: ARRAY
38116: PUSH
38117: LD_VAR 0 3
38121: ARRAY
38122: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38123: LD_VAR 0 5
38127: PUSH
38128: LD_INT 1
38130: ARRAY
38131: PPUSH
38132: CALL_OW 302
38136: NOT
38137: PUSH
38138: LD_VAR 0 5
38142: PUSH
38143: LD_INT 1
38145: ARRAY
38146: PPUSH
38147: CALL_OW 255
38151: PUSH
38152: LD_VAR 0 1
38156: PPUSH
38157: CALL_OW 255
38161: NONEQUAL
38162: OR
38163: IFFALSE 38269
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38165: LD_VAR 0 5
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: PPUSH
38174: CALL_OW 305
38178: PUSH
38179: LD_VAR 0 5
38183: PUSH
38184: LD_INT 1
38186: ARRAY
38187: PPUSH
38188: CALL_OW 255
38192: PUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 255
38202: EQUAL
38203: AND
38204: IFFALSE 38228
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38206: LD_VAR 0 5
38210: PUSH
38211: LD_INT 1
38213: ARRAY
38214: PPUSH
38215: LD_VAR 0 5
38219: PUSH
38220: LD_INT 2
38222: ARRAY
38223: PPUSH
38224: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38228: LD_ADDR_EXP 126
38232: PUSH
38233: LD_EXP 126
38237: PPUSH
38238: LD_VAR 0 4
38242: PPUSH
38243: LD_EXP 126
38247: PUSH
38248: LD_VAR 0 4
38252: ARRAY
38253: PPUSH
38254: LD_VAR 0 3
38258: PPUSH
38259: CALL_OW 3
38263: PPUSH
38264: CALL_OW 1
38268: ST_TO_ADDR
// end ; end ;
38269: GO 38098
38271: POP
38272: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38273: LD_VAR 0 1
38277: PPUSH
38278: LD_EXP 126
38282: PUSH
38283: LD_VAR 0 4
38287: ARRAY
38288: PUSH
38289: LD_INT 0
38291: PLUS
38292: PPUSH
38293: CALL_OW 505
// end ;
38297: LD_VAR 0 2
38301: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38302: LD_INT 0
38304: PPUSH
38305: PPUSH
38306: PPUSH
38307: PPUSH
// if not hack in hackTanks then
38308: LD_VAR 0 1
38312: PUSH
38313: LD_EXP 125
38317: IN
38318: NOT
38319: IFFALSE 38323
// exit ;
38321: GO 38408
// index := GetElementIndex ( hackTanks , hack ) ;
38323: LD_ADDR_VAR 0 5
38327: PUSH
38328: LD_EXP 125
38332: PPUSH
38333: LD_VAR 0 1
38337: PPUSH
38338: CALL 45266 0 2
38342: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38343: LD_ADDR_VAR 0 4
38347: PUSH
38348: DOUBLE
38349: LD_INT 1
38351: DEC
38352: ST_TO_ADDR
38353: LD_EXP 126
38357: PUSH
38358: LD_VAR 0 5
38362: ARRAY
38363: PUSH
38364: FOR_TO
38365: IFFALSE 38406
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38367: LD_EXP 126
38371: PUSH
38372: LD_VAR 0 5
38376: ARRAY
38377: PUSH
38378: LD_VAR 0 4
38382: ARRAY
38383: PUSH
38384: LD_INT 1
38386: ARRAY
38387: PUSH
38388: LD_VAR 0 2
38392: EQUAL
38393: IFFALSE 38404
// KillUnit ( vehicle ) ;
38395: LD_VAR 0 2
38399: PPUSH
38400: CALL_OW 66
38404: GO 38364
38406: POP
38407: POP
// end ;
38408: LD_VAR 0 3
38412: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38413: LD_EXP 130
38417: NOT
38418: IFFALSE 38453
38420: GO 38422
38422: DISABLE
// begin initMiner := true ;
38423: LD_ADDR_EXP 130
38427: PUSH
38428: LD_INT 1
38430: ST_TO_ADDR
// minersList := [ ] ;
38431: LD_ADDR_EXP 131
38435: PUSH
38436: EMPTY
38437: ST_TO_ADDR
// minerMinesList := [ ] ;
38438: LD_ADDR_EXP 132
38442: PUSH
38443: EMPTY
38444: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38445: LD_ADDR_EXP 133
38449: PUSH
38450: LD_INT 5
38452: ST_TO_ADDR
// end ;
38453: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38454: LD_EXP 130
38458: PUSH
38459: LD_INT 34
38461: PUSH
38462: LD_INT 81
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PPUSH
38469: CALL_OW 69
38473: AND
38474: IFFALSE 38935
38476: GO 38478
38478: DISABLE
38479: LD_INT 0
38481: PPUSH
38482: PPUSH
38483: PPUSH
38484: PPUSH
// begin enable ;
38485: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38486: LD_ADDR_VAR 0 1
38490: PUSH
38491: LD_INT 34
38493: PUSH
38494: LD_INT 81
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PPUSH
38501: CALL_OW 69
38505: PUSH
38506: FOR_IN
38507: IFFALSE 38579
// begin if not i in minersList then
38509: LD_VAR 0 1
38513: PUSH
38514: LD_EXP 131
38518: IN
38519: NOT
38520: IFFALSE 38577
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38522: LD_ADDR_EXP 131
38526: PUSH
38527: LD_EXP 131
38531: PPUSH
38532: LD_EXP 131
38536: PUSH
38537: LD_INT 1
38539: PLUS
38540: PPUSH
38541: LD_VAR 0 1
38545: PPUSH
38546: CALL_OW 1
38550: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38551: LD_ADDR_EXP 132
38555: PUSH
38556: LD_EXP 132
38560: PPUSH
38561: LD_EXP 132
38565: PUSH
38566: LD_INT 1
38568: PLUS
38569: PPUSH
38570: EMPTY
38571: PPUSH
38572: CALL_OW 1
38576: ST_TO_ADDR
// end end ;
38577: GO 38506
38579: POP
38580: POP
// for i := minerMinesList downto 1 do
38581: LD_ADDR_VAR 0 1
38585: PUSH
38586: DOUBLE
38587: LD_EXP 132
38591: INC
38592: ST_TO_ADDR
38593: LD_INT 1
38595: PUSH
38596: FOR_DOWNTO
38597: IFFALSE 38933
// begin if IsLive ( minersList [ i ] ) then
38599: LD_EXP 131
38603: PUSH
38604: LD_VAR 0 1
38608: ARRAY
38609: PPUSH
38610: CALL_OW 300
38614: IFFALSE 38642
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38616: LD_EXP 131
38620: PUSH
38621: LD_VAR 0 1
38625: ARRAY
38626: PPUSH
38627: LD_EXP 132
38631: PUSH
38632: LD_VAR 0 1
38636: ARRAY
38637: PPUSH
38638: CALL_OW 505
// if not minerMinesList [ i ] then
38642: LD_EXP 132
38646: PUSH
38647: LD_VAR 0 1
38651: ARRAY
38652: NOT
38653: IFFALSE 38657
// continue ;
38655: GO 38596
// for j := minerMinesList [ i ] downto 1 do
38657: LD_ADDR_VAR 0 2
38661: PUSH
38662: DOUBLE
38663: LD_EXP 132
38667: PUSH
38668: LD_VAR 0 1
38672: ARRAY
38673: INC
38674: ST_TO_ADDR
38675: LD_INT 1
38677: PUSH
38678: FOR_DOWNTO
38679: IFFALSE 38929
// begin side := GetSide ( minersList [ i ] ) ;
38681: LD_ADDR_VAR 0 3
38685: PUSH
38686: LD_EXP 131
38690: PUSH
38691: LD_VAR 0 1
38695: ARRAY
38696: PPUSH
38697: CALL_OW 255
38701: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38702: LD_ADDR_VAR 0 4
38706: PUSH
38707: LD_EXP 132
38711: PUSH
38712: LD_VAR 0 1
38716: ARRAY
38717: PUSH
38718: LD_VAR 0 2
38722: ARRAY
38723: PUSH
38724: LD_INT 1
38726: ARRAY
38727: PPUSH
38728: LD_EXP 132
38732: PUSH
38733: LD_VAR 0 1
38737: ARRAY
38738: PUSH
38739: LD_VAR 0 2
38743: ARRAY
38744: PUSH
38745: LD_INT 2
38747: ARRAY
38748: PPUSH
38749: CALL_OW 428
38753: ST_TO_ADDR
// if not tmp then
38754: LD_VAR 0 4
38758: NOT
38759: IFFALSE 38763
// continue ;
38761: GO 38678
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38763: LD_VAR 0 4
38767: PUSH
38768: LD_INT 81
38770: PUSH
38771: LD_VAR 0 3
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PPUSH
38780: CALL_OW 69
38784: IN
38785: PUSH
38786: LD_EXP 132
38790: PUSH
38791: LD_VAR 0 1
38795: ARRAY
38796: PUSH
38797: LD_VAR 0 2
38801: ARRAY
38802: PUSH
38803: LD_INT 1
38805: ARRAY
38806: PPUSH
38807: LD_EXP 132
38811: PUSH
38812: LD_VAR 0 1
38816: ARRAY
38817: PUSH
38818: LD_VAR 0 2
38822: ARRAY
38823: PUSH
38824: LD_INT 2
38826: ARRAY
38827: PPUSH
38828: CALL_OW 458
38832: AND
38833: IFFALSE 38927
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38835: LD_EXP 132
38839: PUSH
38840: LD_VAR 0 1
38844: ARRAY
38845: PUSH
38846: LD_VAR 0 2
38850: ARRAY
38851: PUSH
38852: LD_INT 1
38854: ARRAY
38855: PPUSH
38856: LD_EXP 132
38860: PUSH
38861: LD_VAR 0 1
38865: ARRAY
38866: PUSH
38867: LD_VAR 0 2
38871: ARRAY
38872: PUSH
38873: LD_INT 2
38875: ARRAY
38876: PPUSH
38877: LD_VAR 0 3
38881: PPUSH
38882: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38886: LD_ADDR_EXP 132
38890: PUSH
38891: LD_EXP 132
38895: PPUSH
38896: LD_VAR 0 1
38900: PPUSH
38901: LD_EXP 132
38905: PUSH
38906: LD_VAR 0 1
38910: ARRAY
38911: PPUSH
38912: LD_VAR 0 2
38916: PPUSH
38917: CALL_OW 3
38921: PPUSH
38922: CALL_OW 1
38926: ST_TO_ADDR
// end ; end ;
38927: GO 38678
38929: POP
38930: POP
// end ;
38931: GO 38596
38933: POP
38934: POP
// end ;
38935: PPOPN 4
38937: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38938: LD_INT 0
38940: PPUSH
38941: PPUSH
// result := false ;
38942: LD_ADDR_VAR 0 4
38946: PUSH
38947: LD_INT 0
38949: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38950: LD_VAR 0 1
38954: PPUSH
38955: CALL_OW 264
38959: PUSH
38960: LD_INT 81
38962: EQUAL
38963: NOT
38964: IFFALSE 38968
// exit ;
38966: GO 39208
// index := GetElementIndex ( minersList , unit ) ;
38968: LD_ADDR_VAR 0 5
38972: PUSH
38973: LD_EXP 131
38977: PPUSH
38978: LD_VAR 0 1
38982: PPUSH
38983: CALL 45266 0 2
38987: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38988: LD_EXP 132
38992: PUSH
38993: LD_VAR 0 5
38997: ARRAY
38998: PUSH
38999: LD_EXP 133
39003: GREATEREQUAL
39004: IFFALSE 39008
// exit ;
39006: GO 39208
// ComMoveXY ( unit , x , y ) ;
39008: LD_VAR 0 1
39012: PPUSH
39013: LD_VAR 0 2
39017: PPUSH
39018: LD_VAR 0 3
39022: PPUSH
39023: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39027: LD_INT 35
39029: PPUSH
39030: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39034: LD_VAR 0 1
39038: PPUSH
39039: LD_VAR 0 2
39043: PPUSH
39044: LD_VAR 0 3
39048: PPUSH
39049: CALL 77027 0 3
39053: NOT
39054: PUSH
39055: LD_VAR 0 1
39059: PPUSH
39060: CALL_OW 314
39064: AND
39065: IFFALSE 39069
// exit ;
39067: GO 39208
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39069: LD_VAR 0 2
39073: PPUSH
39074: LD_VAR 0 3
39078: PPUSH
39079: CALL_OW 428
39083: PUSH
39084: LD_VAR 0 1
39088: EQUAL
39089: PUSH
39090: LD_VAR 0 1
39094: PPUSH
39095: CALL_OW 314
39099: NOT
39100: AND
39101: IFFALSE 39027
// PlaySoundXY ( x , y , PlantMine ) ;
39103: LD_VAR 0 2
39107: PPUSH
39108: LD_VAR 0 3
39112: PPUSH
39113: LD_STRING PlantMine
39115: PPUSH
39116: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39120: LD_VAR 0 2
39124: PPUSH
39125: LD_VAR 0 3
39129: PPUSH
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL_OW 255
39139: PPUSH
39140: LD_INT 0
39142: PPUSH
39143: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39147: LD_ADDR_EXP 132
39151: PUSH
39152: LD_EXP 132
39156: PPUSH
39157: LD_VAR 0 5
39161: PUSH
39162: LD_EXP 132
39166: PUSH
39167: LD_VAR 0 5
39171: ARRAY
39172: PUSH
39173: LD_INT 1
39175: PLUS
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PPUSH
39181: LD_VAR 0 2
39185: PUSH
39186: LD_VAR 0 3
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PPUSH
39195: CALL 45481 0 3
39199: ST_TO_ADDR
// result := true ;
39200: LD_ADDR_VAR 0 4
39204: PUSH
39205: LD_INT 1
39207: ST_TO_ADDR
// end ;
39208: LD_VAR 0 4
39212: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39213: LD_INT 0
39215: PPUSH
39216: PPUSH
39217: PPUSH
// if not unit in minersList then
39218: LD_VAR 0 1
39222: PUSH
39223: LD_EXP 131
39227: IN
39228: NOT
39229: IFFALSE 39233
// exit ;
39231: GO 39625
// index := GetElementIndex ( minersList , unit ) ;
39233: LD_ADDR_VAR 0 6
39237: PUSH
39238: LD_EXP 131
39242: PPUSH
39243: LD_VAR 0 1
39247: PPUSH
39248: CALL 45266 0 2
39252: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39253: LD_ADDR_VAR 0 5
39257: PUSH
39258: DOUBLE
39259: LD_EXP 132
39263: PUSH
39264: LD_VAR 0 6
39268: ARRAY
39269: INC
39270: ST_TO_ADDR
39271: LD_INT 1
39273: PUSH
39274: FOR_DOWNTO
39275: IFFALSE 39436
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39277: LD_EXP 132
39281: PUSH
39282: LD_VAR 0 6
39286: ARRAY
39287: PUSH
39288: LD_VAR 0 5
39292: ARRAY
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: PUSH
39298: LD_VAR 0 2
39302: EQUAL
39303: PUSH
39304: LD_EXP 132
39308: PUSH
39309: LD_VAR 0 6
39313: ARRAY
39314: PUSH
39315: LD_VAR 0 5
39319: ARRAY
39320: PUSH
39321: LD_INT 2
39323: ARRAY
39324: PUSH
39325: LD_VAR 0 3
39329: EQUAL
39330: AND
39331: IFFALSE 39434
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39333: LD_EXP 132
39337: PUSH
39338: LD_VAR 0 6
39342: ARRAY
39343: PUSH
39344: LD_VAR 0 5
39348: ARRAY
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PPUSH
39354: LD_EXP 132
39358: PUSH
39359: LD_VAR 0 6
39363: ARRAY
39364: PUSH
39365: LD_VAR 0 5
39369: ARRAY
39370: PUSH
39371: LD_INT 2
39373: ARRAY
39374: PPUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 255
39384: PPUSH
39385: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39389: LD_ADDR_EXP 132
39393: PUSH
39394: LD_EXP 132
39398: PPUSH
39399: LD_VAR 0 6
39403: PPUSH
39404: LD_EXP 132
39408: PUSH
39409: LD_VAR 0 6
39413: ARRAY
39414: PPUSH
39415: LD_VAR 0 5
39419: PPUSH
39420: CALL_OW 3
39424: PPUSH
39425: CALL_OW 1
39429: ST_TO_ADDR
// exit ;
39430: POP
39431: POP
39432: GO 39625
// end ; end ;
39434: GO 39274
39436: POP
39437: POP
// for i := minerMinesList [ index ] downto 1 do
39438: LD_ADDR_VAR 0 5
39442: PUSH
39443: DOUBLE
39444: LD_EXP 132
39448: PUSH
39449: LD_VAR 0 6
39453: ARRAY
39454: INC
39455: ST_TO_ADDR
39456: LD_INT 1
39458: PUSH
39459: FOR_DOWNTO
39460: IFFALSE 39623
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39462: LD_EXP 132
39466: PUSH
39467: LD_VAR 0 6
39471: ARRAY
39472: PUSH
39473: LD_VAR 0 5
39477: ARRAY
39478: PUSH
39479: LD_INT 1
39481: ARRAY
39482: PPUSH
39483: LD_EXP 132
39487: PUSH
39488: LD_VAR 0 6
39492: ARRAY
39493: PUSH
39494: LD_VAR 0 5
39498: ARRAY
39499: PUSH
39500: LD_INT 2
39502: ARRAY
39503: PPUSH
39504: LD_VAR 0 2
39508: PPUSH
39509: LD_VAR 0 3
39513: PPUSH
39514: CALL_OW 298
39518: PUSH
39519: LD_INT 6
39521: LESS
39522: IFFALSE 39621
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39524: LD_EXP 132
39528: PUSH
39529: LD_VAR 0 6
39533: ARRAY
39534: PUSH
39535: LD_VAR 0 5
39539: ARRAY
39540: PUSH
39541: LD_INT 1
39543: ARRAY
39544: PPUSH
39545: LD_EXP 132
39549: PUSH
39550: LD_VAR 0 6
39554: ARRAY
39555: PUSH
39556: LD_VAR 0 5
39560: ARRAY
39561: PUSH
39562: LD_INT 2
39564: ARRAY
39565: PPUSH
39566: LD_VAR 0 1
39570: PPUSH
39571: CALL_OW 255
39575: PPUSH
39576: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39580: LD_ADDR_EXP 132
39584: PUSH
39585: LD_EXP 132
39589: PPUSH
39590: LD_VAR 0 6
39594: PPUSH
39595: LD_EXP 132
39599: PUSH
39600: LD_VAR 0 6
39604: ARRAY
39605: PPUSH
39606: LD_VAR 0 5
39610: PPUSH
39611: CALL_OW 3
39615: PPUSH
39616: CALL_OW 1
39620: ST_TO_ADDR
// end ; end ;
39621: GO 39459
39623: POP
39624: POP
// end ;
39625: LD_VAR 0 4
39629: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39630: LD_INT 0
39632: PPUSH
39633: PPUSH
39634: PPUSH
39635: PPUSH
39636: PPUSH
39637: PPUSH
39638: PPUSH
39639: PPUSH
39640: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39641: LD_VAR 0 1
39645: PPUSH
39646: CALL_OW 264
39650: PUSH
39651: LD_INT 81
39653: EQUAL
39654: NOT
39655: PUSH
39656: LD_VAR 0 1
39660: PUSH
39661: LD_EXP 131
39665: IN
39666: NOT
39667: OR
39668: IFFALSE 39672
// exit ;
39670: GO 39994
// index := GetElementIndex ( minersList , unit ) ;
39672: LD_ADDR_VAR 0 6
39676: PUSH
39677: LD_EXP 131
39681: PPUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL 45266 0 2
39691: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39692: LD_ADDR_VAR 0 8
39696: PUSH
39697: LD_EXP 133
39701: PUSH
39702: LD_EXP 132
39706: PUSH
39707: LD_VAR 0 6
39711: ARRAY
39712: MINUS
39713: ST_TO_ADDR
// if not minesFreeAmount then
39714: LD_VAR 0 8
39718: NOT
39719: IFFALSE 39723
// exit ;
39721: GO 39994
// tmp := [ ] ;
39723: LD_ADDR_VAR 0 7
39727: PUSH
39728: EMPTY
39729: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39730: LD_ADDR_VAR 0 5
39734: PUSH
39735: DOUBLE
39736: LD_INT 1
39738: DEC
39739: ST_TO_ADDR
39740: LD_VAR 0 8
39744: PUSH
39745: FOR_TO
39746: IFFALSE 39941
// begin _d := rand ( 0 , 5 ) ;
39748: LD_ADDR_VAR 0 11
39752: PUSH
39753: LD_INT 0
39755: PPUSH
39756: LD_INT 5
39758: PPUSH
39759: CALL_OW 12
39763: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39764: LD_ADDR_VAR 0 12
39768: PUSH
39769: LD_INT 2
39771: PPUSH
39772: LD_INT 6
39774: PPUSH
39775: CALL_OW 12
39779: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39780: LD_ADDR_VAR 0 9
39784: PUSH
39785: LD_VAR 0 2
39789: PPUSH
39790: LD_VAR 0 11
39794: PPUSH
39795: LD_VAR 0 12
39799: PPUSH
39800: CALL_OW 272
39804: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39805: LD_ADDR_VAR 0 10
39809: PUSH
39810: LD_VAR 0 3
39814: PPUSH
39815: LD_VAR 0 11
39819: PPUSH
39820: LD_VAR 0 12
39824: PPUSH
39825: CALL_OW 273
39829: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39830: LD_VAR 0 9
39834: PPUSH
39835: LD_VAR 0 10
39839: PPUSH
39840: CALL_OW 488
39844: PUSH
39845: LD_VAR 0 9
39849: PUSH
39850: LD_VAR 0 10
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_VAR 0 7
39863: IN
39864: NOT
39865: AND
39866: PUSH
39867: LD_VAR 0 9
39871: PPUSH
39872: LD_VAR 0 10
39876: PPUSH
39877: CALL_OW 458
39881: NOT
39882: AND
39883: IFFALSE 39925
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39885: LD_ADDR_VAR 0 7
39889: PUSH
39890: LD_VAR 0 7
39894: PPUSH
39895: LD_VAR 0 7
39899: PUSH
39900: LD_INT 1
39902: PLUS
39903: PPUSH
39904: LD_VAR 0 9
39908: PUSH
39909: LD_VAR 0 10
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PPUSH
39918: CALL_OW 1
39922: ST_TO_ADDR
39923: GO 39939
// i := i - 1 ;
39925: LD_ADDR_VAR 0 5
39929: PUSH
39930: LD_VAR 0 5
39934: PUSH
39935: LD_INT 1
39937: MINUS
39938: ST_TO_ADDR
// end ;
39939: GO 39745
39941: POP
39942: POP
// for i in tmp do
39943: LD_ADDR_VAR 0 5
39947: PUSH
39948: LD_VAR 0 7
39952: PUSH
39953: FOR_IN
39954: IFFALSE 39992
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39956: LD_VAR 0 1
39960: PPUSH
39961: LD_VAR 0 5
39965: PUSH
39966: LD_INT 1
39968: ARRAY
39969: PPUSH
39970: LD_VAR 0 5
39974: PUSH
39975: LD_INT 2
39977: ARRAY
39978: PPUSH
39979: CALL 38938 0 3
39983: NOT
39984: IFFALSE 39990
// exit ;
39986: POP
39987: POP
39988: GO 39994
39990: GO 39953
39992: POP
39993: POP
// end ;
39994: LD_VAR 0 4
39998: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
// if GetClass ( unit ) <> class_sniper then
40010: LD_VAR 0 1
40014: PPUSH
40015: CALL_OW 257
40019: PUSH
40020: LD_INT 5
40022: NONEQUAL
40023: IFFALSE 40027
// exit ;
40025: GO 40493
// dist := 8 ;
40027: LD_ADDR_VAR 0 5
40031: PUSH
40032: LD_INT 8
40034: ST_TO_ADDR
// viewRange := 12 ;
40035: LD_ADDR_VAR 0 8
40039: PUSH
40040: LD_INT 12
40042: ST_TO_ADDR
// side := GetSide ( unit ) ;
40043: LD_ADDR_VAR 0 6
40047: PUSH
40048: LD_VAR 0 1
40052: PPUSH
40053: CALL_OW 255
40057: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40058: LD_INT 61
40060: PPUSH
40061: LD_VAR 0 6
40065: PPUSH
40066: CALL_OW 321
40070: PUSH
40071: LD_INT 2
40073: EQUAL
40074: IFFALSE 40084
// viewRange := 16 ;
40076: LD_ADDR_VAR 0 8
40080: PUSH
40081: LD_INT 16
40083: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40084: LD_VAR 0 1
40088: PPUSH
40089: LD_VAR 0 2
40093: PPUSH
40094: LD_VAR 0 3
40098: PPUSH
40099: CALL_OW 297
40103: PUSH
40104: LD_VAR 0 5
40108: GREATER
40109: IFFALSE 40188
// begin ComMoveXY ( unit , x , y ) ;
40111: LD_VAR 0 1
40115: PPUSH
40116: LD_VAR 0 2
40120: PPUSH
40121: LD_VAR 0 3
40125: PPUSH
40126: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40130: LD_INT 35
40132: PPUSH
40133: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40137: LD_VAR 0 1
40141: PPUSH
40142: LD_VAR 0 2
40146: PPUSH
40147: LD_VAR 0 3
40151: PPUSH
40152: CALL 77027 0 3
40156: NOT
40157: IFFALSE 40161
// exit ;
40159: GO 40493
// until GetDistUnitXY ( unit , x , y ) < dist ;
40161: LD_VAR 0 1
40165: PPUSH
40166: LD_VAR 0 2
40170: PPUSH
40171: LD_VAR 0 3
40175: PPUSH
40176: CALL_OW 297
40180: PUSH
40181: LD_VAR 0 5
40185: LESS
40186: IFFALSE 40130
// end ; ComTurnXY ( unit , x , y ) ;
40188: LD_VAR 0 1
40192: PPUSH
40193: LD_VAR 0 2
40197: PPUSH
40198: LD_VAR 0 3
40202: PPUSH
40203: CALL_OW 118
// repeat if Multiplayer then
40207: LD_OWVAR 4
40211: IFFALSE 40222
// wait ( 35 ) else
40213: LD_INT 35
40215: PPUSH
40216: CALL_OW 67
40220: GO 40229
// wait ( 5 ) ;
40222: LD_INT 5
40224: PPUSH
40225: CALL_OW 67
// _d := GetDir ( unit ) ;
40229: LD_ADDR_VAR 0 11
40233: PUSH
40234: LD_VAR 0 1
40238: PPUSH
40239: CALL_OW 254
40243: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40244: LD_ADDR_VAR 0 7
40248: PUSH
40249: LD_VAR 0 1
40253: PPUSH
40254: CALL_OW 250
40258: PPUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL_OW 251
40268: PPUSH
40269: LD_VAR 0 2
40273: PPUSH
40274: LD_VAR 0 3
40278: PPUSH
40279: CALL 79635 0 4
40283: ST_TO_ADDR
// until dir = _d ;
40284: LD_VAR 0 7
40288: PUSH
40289: LD_VAR 0 11
40293: EQUAL
40294: IFFALSE 40207
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40296: LD_ADDR_VAR 0 9
40300: PUSH
40301: LD_VAR 0 1
40305: PPUSH
40306: CALL_OW 250
40310: PPUSH
40311: LD_VAR 0 7
40315: PPUSH
40316: LD_VAR 0 5
40320: PPUSH
40321: CALL_OW 272
40325: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
40326: LD_ADDR_VAR 0 10
40330: PUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 251
40340: PPUSH
40341: LD_VAR 0 7
40345: PPUSH
40346: LD_VAR 0 5
40350: PPUSH
40351: CALL_OW 273
40355: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40356: LD_VAR 0 9
40360: PPUSH
40361: LD_VAR 0 10
40365: PPUSH
40366: CALL_OW 488
40370: NOT
40371: IFFALSE 40375
// exit ;
40373: GO 40493
// ComAnimCustom ( unit , 1 ) ;
40375: LD_VAR 0 1
40379: PPUSH
40380: LD_INT 1
40382: PPUSH
40383: CALL_OW 592
// p := 0 ;
40387: LD_ADDR_VAR 0 12
40391: PUSH
40392: LD_INT 0
40394: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40395: LD_VAR 0 9
40399: PPUSH
40400: LD_VAR 0 10
40404: PPUSH
40405: LD_VAR 0 6
40409: PPUSH
40410: LD_VAR 0 8
40414: PPUSH
40415: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
40419: LD_INT 35
40421: PPUSH
40422: CALL_OW 67
// p := Inc ( p ) ;
40426: LD_ADDR_VAR 0 12
40430: PUSH
40431: LD_VAR 0 12
40435: PPUSH
40436: CALL 79591 0 1
40440: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
40441: LD_VAR 0 12
40445: PUSH
40446: LD_INT 3
40448: EQUAL
40449: PUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: CALL_OW 302
40459: NOT
40460: OR
40461: PUSH
40462: LD_VAR 0 1
40466: PPUSH
40467: CALL_OW 301
40471: OR
40472: IFFALSE 40419
// RemoveSeeing ( _x , _y , side ) ;
40474: LD_VAR 0 9
40478: PPUSH
40479: LD_VAR 0 10
40483: PPUSH
40484: LD_VAR 0 6
40488: PPUSH
40489: CALL_OW 331
// end ; end_of_file
40493: LD_VAR 0 4
40497: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40498: LD_INT 0
40500: PPUSH
40501: PPUSH
// if exist_mode then
40502: LD_VAR 0 2
40506: IFFALSE 40552
// begin unit := CreateCharacter ( prefix & ident ) ;
40508: LD_ADDR_VAR 0 5
40512: PUSH
40513: LD_VAR 0 3
40517: PUSH
40518: LD_VAR 0 1
40522: STR
40523: PPUSH
40524: CALL_OW 34
40528: ST_TO_ADDR
// if unit then
40529: LD_VAR 0 5
40533: IFFALSE 40550
// DeleteCharacters ( prefix & ident ) ;
40535: LD_VAR 0 3
40539: PUSH
40540: LD_VAR 0 1
40544: STR
40545: PPUSH
40546: CALL_OW 40
// end else
40550: GO 40567
// unit := NewCharacter ( ident ) ;
40552: LD_ADDR_VAR 0 5
40556: PUSH
40557: LD_VAR 0 1
40561: PPUSH
40562: CALL_OW 25
40566: ST_TO_ADDR
// result := unit ;
40567: LD_ADDR_VAR 0 4
40571: PUSH
40572: LD_VAR 0 5
40576: ST_TO_ADDR
// end ;
40577: LD_VAR 0 4
40581: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40582: LD_INT 0
40584: PPUSH
40585: PPUSH
// if not side or not nation then
40586: LD_VAR 0 1
40590: NOT
40591: PUSH
40592: LD_VAR 0 2
40596: NOT
40597: OR
40598: IFFALSE 40602
// exit ;
40600: GO 41370
// case nation of nation_american :
40602: LD_VAR 0 2
40606: PUSH
40607: LD_INT 1
40609: DOUBLE
40610: EQUAL
40611: IFTRUE 40615
40613: GO 40829
40615: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40616: LD_ADDR_VAR 0 4
40620: PUSH
40621: LD_INT 35
40623: PUSH
40624: LD_INT 45
40626: PUSH
40627: LD_INT 46
40629: PUSH
40630: LD_INT 47
40632: PUSH
40633: LD_INT 82
40635: PUSH
40636: LD_INT 83
40638: PUSH
40639: LD_INT 84
40641: PUSH
40642: LD_INT 85
40644: PUSH
40645: LD_INT 86
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 6
40656: PUSH
40657: LD_INT 15
40659: PUSH
40660: LD_INT 16
40662: PUSH
40663: LD_INT 7
40665: PUSH
40666: LD_INT 12
40668: PUSH
40669: LD_INT 13
40671: PUSH
40672: LD_INT 10
40674: PUSH
40675: LD_INT 14
40677: PUSH
40678: LD_INT 20
40680: PUSH
40681: LD_INT 21
40683: PUSH
40684: LD_INT 22
40686: PUSH
40687: LD_INT 25
40689: PUSH
40690: LD_INT 32
40692: PUSH
40693: LD_INT 27
40695: PUSH
40696: LD_INT 36
40698: PUSH
40699: LD_INT 69
40701: PUSH
40702: LD_INT 39
40704: PUSH
40705: LD_INT 34
40707: PUSH
40708: LD_INT 40
40710: PUSH
40711: LD_INT 48
40713: PUSH
40714: LD_INT 49
40716: PUSH
40717: LD_INT 50
40719: PUSH
40720: LD_INT 51
40722: PUSH
40723: LD_INT 52
40725: PUSH
40726: LD_INT 53
40728: PUSH
40729: LD_INT 54
40731: PUSH
40732: LD_INT 55
40734: PUSH
40735: LD_INT 56
40737: PUSH
40738: LD_INT 57
40740: PUSH
40741: LD_INT 58
40743: PUSH
40744: LD_INT 59
40746: PUSH
40747: LD_INT 60
40749: PUSH
40750: LD_INT 61
40752: PUSH
40753: LD_INT 62
40755: PUSH
40756: LD_INT 80
40758: PUSH
40759: LD_INT 82
40761: PUSH
40762: LD_INT 83
40764: PUSH
40765: LD_INT 84
40767: PUSH
40768: LD_INT 85
40770: PUSH
40771: LD_INT 86
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: ST_TO_ADDR
40827: GO 41294
40829: LD_INT 2
40831: DOUBLE
40832: EQUAL
40833: IFTRUE 40837
40835: GO 41063
40837: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40838: LD_ADDR_VAR 0 4
40842: PUSH
40843: LD_INT 35
40845: PUSH
40846: LD_INT 45
40848: PUSH
40849: LD_INT 46
40851: PUSH
40852: LD_INT 47
40854: PUSH
40855: LD_INT 82
40857: PUSH
40858: LD_INT 83
40860: PUSH
40861: LD_INT 84
40863: PUSH
40864: LD_INT 85
40866: PUSH
40867: LD_INT 87
40869: PUSH
40870: LD_INT 70
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 11
40878: PUSH
40879: LD_INT 3
40881: PUSH
40882: LD_INT 4
40884: PUSH
40885: LD_INT 5
40887: PUSH
40888: LD_INT 6
40890: PUSH
40891: LD_INT 15
40893: PUSH
40894: LD_INT 18
40896: PUSH
40897: LD_INT 7
40899: PUSH
40900: LD_INT 17
40902: PUSH
40903: LD_INT 8
40905: PUSH
40906: LD_INT 20
40908: PUSH
40909: LD_INT 21
40911: PUSH
40912: LD_INT 22
40914: PUSH
40915: LD_INT 72
40917: PUSH
40918: LD_INT 26
40920: PUSH
40921: LD_INT 69
40923: PUSH
40924: LD_INT 39
40926: PUSH
40927: LD_INT 40
40929: PUSH
40930: LD_INT 41
40932: PUSH
40933: LD_INT 42
40935: PUSH
40936: LD_INT 43
40938: PUSH
40939: LD_INT 48
40941: PUSH
40942: LD_INT 49
40944: PUSH
40945: LD_INT 50
40947: PUSH
40948: LD_INT 51
40950: PUSH
40951: LD_INT 52
40953: PUSH
40954: LD_INT 53
40956: PUSH
40957: LD_INT 54
40959: PUSH
40960: LD_INT 55
40962: PUSH
40963: LD_INT 56
40965: PUSH
40966: LD_INT 60
40968: PUSH
40969: LD_INT 61
40971: PUSH
40972: LD_INT 62
40974: PUSH
40975: LD_INT 66
40977: PUSH
40978: LD_INT 67
40980: PUSH
40981: LD_INT 68
40983: PUSH
40984: LD_INT 81
40986: PUSH
40987: LD_INT 82
40989: PUSH
40990: LD_INT 83
40992: PUSH
40993: LD_INT 84
40995: PUSH
40996: LD_INT 85
40998: PUSH
40999: LD_INT 87
41001: PUSH
41002: LD_INT 88
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: ST_TO_ADDR
41061: GO 41294
41063: LD_INT 3
41065: DOUBLE
41066: EQUAL
41067: IFTRUE 41071
41069: GO 41293
41071: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41072: LD_ADDR_VAR 0 4
41076: PUSH
41077: LD_INT 46
41079: PUSH
41080: LD_INT 47
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 82
41091: PUSH
41092: LD_INT 83
41094: PUSH
41095: LD_INT 84
41097: PUSH
41098: LD_INT 85
41100: PUSH
41101: LD_INT 86
41103: PUSH
41104: LD_INT 11
41106: PUSH
41107: LD_INT 9
41109: PUSH
41110: LD_INT 20
41112: PUSH
41113: LD_INT 19
41115: PUSH
41116: LD_INT 21
41118: PUSH
41119: LD_INT 24
41121: PUSH
41122: LD_INT 22
41124: PUSH
41125: LD_INT 25
41127: PUSH
41128: LD_INT 28
41130: PUSH
41131: LD_INT 29
41133: PUSH
41134: LD_INT 30
41136: PUSH
41137: LD_INT 31
41139: PUSH
41140: LD_INT 37
41142: PUSH
41143: LD_INT 38
41145: PUSH
41146: LD_INT 32
41148: PUSH
41149: LD_INT 27
41151: PUSH
41152: LD_INT 33
41154: PUSH
41155: LD_INT 69
41157: PUSH
41158: LD_INT 39
41160: PUSH
41161: LD_INT 34
41163: PUSH
41164: LD_INT 40
41166: PUSH
41167: LD_INT 71
41169: PUSH
41170: LD_INT 23
41172: PUSH
41173: LD_INT 44
41175: PUSH
41176: LD_INT 48
41178: PUSH
41179: LD_INT 49
41181: PUSH
41182: LD_INT 50
41184: PUSH
41185: LD_INT 51
41187: PUSH
41188: LD_INT 52
41190: PUSH
41191: LD_INT 53
41193: PUSH
41194: LD_INT 54
41196: PUSH
41197: LD_INT 55
41199: PUSH
41200: LD_INT 56
41202: PUSH
41203: LD_INT 57
41205: PUSH
41206: LD_INT 58
41208: PUSH
41209: LD_INT 59
41211: PUSH
41212: LD_INT 63
41214: PUSH
41215: LD_INT 64
41217: PUSH
41218: LD_INT 65
41220: PUSH
41221: LD_INT 82
41223: PUSH
41224: LD_INT 83
41226: PUSH
41227: LD_INT 84
41229: PUSH
41230: LD_INT 85
41232: PUSH
41233: LD_INT 86
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: ST_TO_ADDR
41291: GO 41294
41293: POP
// if state > - 1 and state < 3 then
41294: LD_VAR 0 3
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: GREATER
41303: PUSH
41304: LD_VAR 0 3
41308: PUSH
41309: LD_INT 3
41311: LESS
41312: AND
41313: IFFALSE 41370
// for i in result do
41315: LD_ADDR_VAR 0 5
41319: PUSH
41320: LD_VAR 0 4
41324: PUSH
41325: FOR_IN
41326: IFFALSE 41368
// if GetTech ( i , side ) <> state then
41328: LD_VAR 0 5
41332: PPUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: CALL_OW 321
41342: PUSH
41343: LD_VAR 0 3
41347: NONEQUAL
41348: IFFALSE 41366
// result := result diff i ;
41350: LD_ADDR_VAR 0 4
41354: PUSH
41355: LD_VAR 0 4
41359: PUSH
41360: LD_VAR 0 5
41364: DIFF
41365: ST_TO_ADDR
41366: GO 41325
41368: POP
41369: POP
// end ;
41370: LD_VAR 0 4
41374: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41375: LD_INT 0
41377: PPUSH
41378: PPUSH
41379: PPUSH
// result := true ;
41380: LD_ADDR_VAR 0 3
41384: PUSH
41385: LD_INT 1
41387: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41388: LD_ADDR_VAR 0 5
41392: PUSH
41393: LD_VAR 0 2
41397: PPUSH
41398: CALL_OW 480
41402: ST_TO_ADDR
// if not tmp then
41403: LD_VAR 0 5
41407: NOT
41408: IFFALSE 41412
// exit ;
41410: GO 41461
// for i in tmp do
41412: LD_ADDR_VAR 0 4
41416: PUSH
41417: LD_VAR 0 5
41421: PUSH
41422: FOR_IN
41423: IFFALSE 41459
// if GetTech ( i , side ) <> state_researched then
41425: LD_VAR 0 4
41429: PPUSH
41430: LD_VAR 0 1
41434: PPUSH
41435: CALL_OW 321
41439: PUSH
41440: LD_INT 2
41442: NONEQUAL
41443: IFFALSE 41457
// begin result := false ;
41445: LD_ADDR_VAR 0 3
41449: PUSH
41450: LD_INT 0
41452: ST_TO_ADDR
// exit ;
41453: POP
41454: POP
41455: GO 41461
// end ;
41457: GO 41422
41459: POP
41460: POP
// end ;
41461: LD_VAR 0 3
41465: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41466: LD_INT 0
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41481: LD_VAR 0 1
41485: NOT
41486: PUSH
41487: LD_VAR 0 1
41491: PPUSH
41492: CALL_OW 257
41496: PUSH
41497: LD_INT 9
41499: NONEQUAL
41500: OR
41501: IFFALSE 41505
// exit ;
41503: GO 42078
// side := GetSide ( unit ) ;
41505: LD_ADDR_VAR 0 9
41509: PUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: CALL_OW 255
41519: ST_TO_ADDR
// tech_space := tech_spacanom ;
41520: LD_ADDR_VAR 0 12
41524: PUSH
41525: LD_INT 29
41527: ST_TO_ADDR
// tech_time := tech_taurad ;
41528: LD_ADDR_VAR 0 13
41532: PUSH
41533: LD_INT 28
41535: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41536: LD_ADDR_VAR 0 11
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 310
41550: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41551: LD_VAR 0 11
41555: PPUSH
41556: CALL_OW 247
41560: PUSH
41561: LD_INT 2
41563: EQUAL
41564: IFFALSE 41568
// exit ;
41566: GO 42078
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41568: LD_ADDR_VAR 0 8
41572: PUSH
41573: LD_INT 81
41575: PUSH
41576: LD_VAR 0 9
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: LD_INT 21
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PPUSH
41606: CALL_OW 69
41610: ST_TO_ADDR
// if not tmp then
41611: LD_VAR 0 8
41615: NOT
41616: IFFALSE 41620
// exit ;
41618: GO 42078
// if in_unit then
41620: LD_VAR 0 11
41624: IFFALSE 41648
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41626: LD_ADDR_VAR 0 10
41630: PUSH
41631: LD_VAR 0 8
41635: PPUSH
41636: LD_VAR 0 11
41640: PPUSH
41641: CALL_OW 74
41645: ST_TO_ADDR
41646: GO 41668
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41648: LD_ADDR_VAR 0 10
41652: PUSH
41653: LD_VAR 0 8
41657: PPUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 74
41667: ST_TO_ADDR
// if not enemy then
41668: LD_VAR 0 10
41672: NOT
41673: IFFALSE 41677
// exit ;
41675: GO 42078
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41677: LD_VAR 0 11
41681: PUSH
41682: LD_VAR 0 11
41686: PPUSH
41687: LD_VAR 0 10
41691: PPUSH
41692: CALL_OW 296
41696: PUSH
41697: LD_INT 13
41699: GREATER
41700: AND
41701: PUSH
41702: LD_VAR 0 1
41706: PPUSH
41707: LD_VAR 0 10
41711: PPUSH
41712: CALL_OW 296
41716: PUSH
41717: LD_INT 12
41719: GREATER
41720: OR
41721: IFFALSE 41725
// exit ;
41723: GO 42078
// missile := [ 1 ] ;
41725: LD_ADDR_VAR 0 14
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41736: LD_VAR 0 9
41740: PPUSH
41741: LD_VAR 0 12
41745: PPUSH
41746: CALL_OW 325
41750: IFFALSE 41779
// missile := Replace ( missile , missile + 1 , 2 ) ;
41752: LD_ADDR_VAR 0 14
41756: PUSH
41757: LD_VAR 0 14
41761: PPUSH
41762: LD_VAR 0 14
41766: PUSH
41767: LD_INT 1
41769: PLUS
41770: PPUSH
41771: LD_INT 2
41773: PPUSH
41774: CALL_OW 1
41778: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41779: LD_VAR 0 9
41783: PPUSH
41784: LD_VAR 0 13
41788: PPUSH
41789: CALL_OW 325
41793: PUSH
41794: LD_VAR 0 10
41798: PPUSH
41799: CALL_OW 255
41803: PPUSH
41804: LD_VAR 0 13
41808: PPUSH
41809: CALL_OW 325
41813: NOT
41814: AND
41815: IFFALSE 41844
// missile := Replace ( missile , missile + 1 , 3 ) ;
41817: LD_ADDR_VAR 0 14
41821: PUSH
41822: LD_VAR 0 14
41826: PPUSH
41827: LD_VAR 0 14
41831: PUSH
41832: LD_INT 1
41834: PLUS
41835: PPUSH
41836: LD_INT 3
41838: PPUSH
41839: CALL_OW 1
41843: ST_TO_ADDR
// if missile < 2 then
41844: LD_VAR 0 14
41848: PUSH
41849: LD_INT 2
41851: LESS
41852: IFFALSE 41856
// exit ;
41854: GO 42078
// x := GetX ( enemy ) ;
41856: LD_ADDR_VAR 0 4
41860: PUSH
41861: LD_VAR 0 10
41865: PPUSH
41866: CALL_OW 250
41870: ST_TO_ADDR
// y := GetY ( enemy ) ;
41871: LD_ADDR_VAR 0 5
41875: PUSH
41876: LD_VAR 0 10
41880: PPUSH
41881: CALL_OW 251
41885: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41886: LD_ADDR_VAR 0 6
41890: PUSH
41891: LD_VAR 0 4
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PPUSH
41900: LD_INT 1
41902: PPUSH
41903: CALL_OW 12
41907: PLUS
41908: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41909: LD_ADDR_VAR 0 7
41913: PUSH
41914: LD_VAR 0 5
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PPUSH
41923: LD_INT 1
41925: PPUSH
41926: CALL_OW 12
41930: PLUS
41931: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41932: LD_VAR 0 6
41936: PPUSH
41937: LD_VAR 0 7
41941: PPUSH
41942: CALL_OW 488
41946: NOT
41947: IFFALSE 41969
// begin _x := x ;
41949: LD_ADDR_VAR 0 6
41953: PUSH
41954: LD_VAR 0 4
41958: ST_TO_ADDR
// _y := y ;
41959: LD_ADDR_VAR 0 7
41963: PUSH
41964: LD_VAR 0 5
41968: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41969: LD_ADDR_VAR 0 3
41973: PUSH
41974: LD_INT 1
41976: PPUSH
41977: LD_VAR 0 14
41981: PPUSH
41982: CALL_OW 12
41986: ST_TO_ADDR
// case i of 1 :
41987: LD_VAR 0 3
41991: PUSH
41992: LD_INT 1
41994: DOUBLE
41995: EQUAL
41996: IFTRUE 42000
41998: GO 42017
42000: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42001: LD_VAR 0 1
42005: PPUSH
42006: LD_VAR 0 10
42010: PPUSH
42011: CALL_OW 115
42015: GO 42078
42017: LD_INT 2
42019: DOUBLE
42020: EQUAL
42021: IFTRUE 42025
42023: GO 42047
42025: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42026: LD_VAR 0 1
42030: PPUSH
42031: LD_VAR 0 6
42035: PPUSH
42036: LD_VAR 0 7
42040: PPUSH
42041: CALL_OW 153
42045: GO 42078
42047: LD_INT 3
42049: DOUBLE
42050: EQUAL
42051: IFTRUE 42055
42053: GO 42077
42055: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42056: LD_VAR 0 1
42060: PPUSH
42061: LD_VAR 0 6
42065: PPUSH
42066: LD_VAR 0 7
42070: PPUSH
42071: CALL_OW 154
42075: GO 42078
42077: POP
// end ;
42078: LD_VAR 0 2
42082: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42083: LD_INT 0
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
// if not unit or not building then
42091: LD_VAR 0 1
42095: NOT
42096: PUSH
42097: LD_VAR 0 2
42101: NOT
42102: OR
42103: IFFALSE 42107
// exit ;
42105: GO 42265
// x := GetX ( building ) ;
42107: LD_ADDR_VAR 0 5
42111: PUSH
42112: LD_VAR 0 2
42116: PPUSH
42117: CALL_OW 250
42121: ST_TO_ADDR
// y := GetY ( building ) ;
42122: LD_ADDR_VAR 0 6
42126: PUSH
42127: LD_VAR 0 2
42131: PPUSH
42132: CALL_OW 251
42136: ST_TO_ADDR
// for i = 0 to 5 do
42137: LD_ADDR_VAR 0 4
42141: PUSH
42142: DOUBLE
42143: LD_INT 0
42145: DEC
42146: ST_TO_ADDR
42147: LD_INT 5
42149: PUSH
42150: FOR_TO
42151: IFFALSE 42263
// begin _x := ShiftX ( x , i , 3 ) ;
42153: LD_ADDR_VAR 0 7
42157: PUSH
42158: LD_VAR 0 5
42162: PPUSH
42163: LD_VAR 0 4
42167: PPUSH
42168: LD_INT 3
42170: PPUSH
42171: CALL_OW 272
42175: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42176: LD_ADDR_VAR 0 8
42180: PUSH
42181: LD_VAR 0 6
42185: PPUSH
42186: LD_VAR 0 4
42190: PPUSH
42191: LD_INT 3
42193: PPUSH
42194: CALL_OW 273
42198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42199: LD_VAR 0 7
42203: PPUSH
42204: LD_VAR 0 8
42208: PPUSH
42209: CALL_OW 488
42213: NOT
42214: IFFALSE 42218
// continue ;
42216: GO 42150
// if HexInfo ( _x , _y ) = 0 then
42218: LD_VAR 0 7
42222: PPUSH
42223: LD_VAR 0 8
42227: PPUSH
42228: CALL_OW 428
42232: PUSH
42233: LD_INT 0
42235: EQUAL
42236: IFFALSE 42261
// begin ComMoveXY ( unit , _x , _y ) ;
42238: LD_VAR 0 1
42242: PPUSH
42243: LD_VAR 0 7
42247: PPUSH
42248: LD_VAR 0 8
42252: PPUSH
42253: CALL_OW 111
// exit ;
42257: POP
42258: POP
42259: GO 42265
// end ; end ;
42261: GO 42150
42263: POP
42264: POP
// end ;
42265: LD_VAR 0 3
42269: RET
// export function ScanBase ( side , base_area ) ; begin
42270: LD_INT 0
42272: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42273: LD_ADDR_VAR 0 3
42277: PUSH
42278: LD_VAR 0 2
42282: PPUSH
42283: LD_INT 81
42285: PUSH
42286: LD_VAR 0 1
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PPUSH
42295: CALL_OW 70
42299: ST_TO_ADDR
// end ;
42300: LD_VAR 0 3
42304: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42305: LD_INT 0
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
// result := false ;
42311: LD_ADDR_VAR 0 2
42315: PUSH
42316: LD_INT 0
42318: ST_TO_ADDR
// side := GetSide ( unit ) ;
42319: LD_ADDR_VAR 0 3
42323: PUSH
42324: LD_VAR 0 1
42328: PPUSH
42329: CALL_OW 255
42333: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42334: LD_ADDR_VAR 0 4
42338: PUSH
42339: LD_VAR 0 1
42343: PPUSH
42344: CALL_OW 248
42348: ST_TO_ADDR
// case nat of 1 :
42349: LD_VAR 0 4
42353: PUSH
42354: LD_INT 1
42356: DOUBLE
42357: EQUAL
42358: IFTRUE 42362
42360: GO 42373
42362: POP
// tech := tech_lassight ; 2 :
42363: LD_ADDR_VAR 0 5
42367: PUSH
42368: LD_INT 12
42370: ST_TO_ADDR
42371: GO 42412
42373: LD_INT 2
42375: DOUBLE
42376: EQUAL
42377: IFTRUE 42381
42379: GO 42392
42381: POP
// tech := tech_mortar ; 3 :
42382: LD_ADDR_VAR 0 5
42386: PUSH
42387: LD_INT 41
42389: ST_TO_ADDR
42390: GO 42412
42392: LD_INT 3
42394: DOUBLE
42395: EQUAL
42396: IFTRUE 42400
42398: GO 42411
42400: POP
// tech := tech_bazooka ; end ;
42401: LD_ADDR_VAR 0 5
42405: PUSH
42406: LD_INT 44
42408: ST_TO_ADDR
42409: GO 42412
42411: POP
// if Researched ( side , tech ) then
42412: LD_VAR 0 3
42416: PPUSH
42417: LD_VAR 0 5
42421: PPUSH
42422: CALL_OW 325
42426: IFFALSE 42453
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42428: LD_ADDR_VAR 0 2
42432: PUSH
42433: LD_INT 5
42435: PUSH
42436: LD_INT 8
42438: PUSH
42439: LD_INT 9
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: PUSH
42447: LD_VAR 0 4
42451: ARRAY
42452: ST_TO_ADDR
// end ;
42453: LD_VAR 0 2
42457: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42458: LD_INT 0
42460: PPUSH
42461: PPUSH
42462: PPUSH
// if not mines then
42463: LD_VAR 0 2
42467: NOT
42468: IFFALSE 42472
// exit ;
42470: GO 42616
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42472: LD_ADDR_VAR 0 5
42476: PUSH
42477: LD_INT 81
42479: PUSH
42480: LD_VAR 0 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 3
42491: PUSH
42492: LD_INT 21
42494: PUSH
42495: LD_INT 3
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PPUSH
42510: CALL_OW 69
42514: ST_TO_ADDR
// for i in mines do
42515: LD_ADDR_VAR 0 4
42519: PUSH
42520: LD_VAR 0 2
42524: PUSH
42525: FOR_IN
42526: IFFALSE 42614
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42528: LD_VAR 0 4
42532: PUSH
42533: LD_INT 1
42535: ARRAY
42536: PPUSH
42537: LD_VAR 0 4
42541: PUSH
42542: LD_INT 2
42544: ARRAY
42545: PPUSH
42546: CALL_OW 458
42550: NOT
42551: IFFALSE 42555
// continue ;
42553: GO 42525
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42555: LD_VAR 0 4
42559: PUSH
42560: LD_INT 1
42562: ARRAY
42563: PPUSH
42564: LD_VAR 0 4
42568: PUSH
42569: LD_INT 2
42571: ARRAY
42572: PPUSH
42573: CALL_OW 428
42577: PUSH
42578: LD_VAR 0 5
42582: IN
42583: IFFALSE 42612
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42585: LD_VAR 0 4
42589: PUSH
42590: LD_INT 1
42592: ARRAY
42593: PPUSH
42594: LD_VAR 0 4
42598: PUSH
42599: LD_INT 2
42601: ARRAY
42602: PPUSH
42603: LD_VAR 0 1
42607: PPUSH
42608: CALL_OW 456
// end ;
42612: GO 42525
42614: POP
42615: POP
// end ;
42616: LD_VAR 0 3
42620: RET
// export function Count ( array ) ; begin
42621: LD_INT 0
42623: PPUSH
// result := array + 0 ;
42624: LD_ADDR_VAR 0 2
42628: PUSH
42629: LD_VAR 0 1
42633: PUSH
42634: LD_INT 0
42636: PLUS
42637: ST_TO_ADDR
// end ;
42638: LD_VAR 0 2
42642: RET
// export function IsEmpty ( building ) ; begin
42643: LD_INT 0
42645: PPUSH
// if not building then
42646: LD_VAR 0 1
42650: NOT
42651: IFFALSE 42655
// exit ;
42653: GO 42698
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42655: LD_ADDR_VAR 0 2
42659: PUSH
42660: LD_VAR 0 1
42664: PUSH
42665: LD_INT 22
42667: PUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 255
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 58
42684: PUSH
42685: EMPTY
42686: LIST
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PPUSH
42692: CALL_OW 69
42696: IN
42697: ST_TO_ADDR
// end ;
42698: LD_VAR 0 2
42702: RET
// export function IsNotFull ( building ) ; var places ; begin
42703: LD_INT 0
42705: PPUSH
42706: PPUSH
// if not building then
42707: LD_VAR 0 1
42711: NOT
42712: IFFALSE 42716
// exit ;
42714: GO 42744
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42716: LD_ADDR_VAR 0 2
42720: PUSH
42721: LD_VAR 0 1
42725: PPUSH
42726: LD_INT 3
42728: PUSH
42729: LD_INT 62
42731: PUSH
42732: EMPTY
42733: LIST
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PPUSH
42739: CALL_OW 72
42743: ST_TO_ADDR
// end ;
42744: LD_VAR 0 2
42748: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42749: LD_INT 0
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
// tmp := [ ] ;
42755: LD_ADDR_VAR 0 3
42759: PUSH
42760: EMPTY
42761: ST_TO_ADDR
// list := [ ] ;
42762: LD_ADDR_VAR 0 5
42766: PUSH
42767: EMPTY
42768: ST_TO_ADDR
// for i = 16 to 25 do
42769: LD_ADDR_VAR 0 4
42773: PUSH
42774: DOUBLE
42775: LD_INT 16
42777: DEC
42778: ST_TO_ADDR
42779: LD_INT 25
42781: PUSH
42782: FOR_TO
42783: IFFALSE 42856
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42785: LD_ADDR_VAR 0 3
42789: PUSH
42790: LD_VAR 0 3
42794: PUSH
42795: LD_INT 22
42797: PUSH
42798: LD_VAR 0 1
42802: PPUSH
42803: CALL_OW 255
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 91
42814: PUSH
42815: LD_VAR 0 1
42819: PUSH
42820: LD_INT 6
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 30
42830: PUSH
42831: LD_VAR 0 4
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: PUSH
42845: EMPTY
42846: LIST
42847: PPUSH
42848: CALL_OW 69
42852: ADD
42853: ST_TO_ADDR
42854: GO 42782
42856: POP
42857: POP
// for i = 1 to tmp do
42858: LD_ADDR_VAR 0 4
42862: PUSH
42863: DOUBLE
42864: LD_INT 1
42866: DEC
42867: ST_TO_ADDR
42868: LD_VAR 0 3
42872: PUSH
42873: FOR_TO
42874: IFFALSE 42962
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42876: LD_ADDR_VAR 0 5
42880: PUSH
42881: LD_VAR 0 5
42885: PUSH
42886: LD_VAR 0 3
42890: PUSH
42891: LD_VAR 0 4
42895: ARRAY
42896: PPUSH
42897: CALL_OW 266
42901: PUSH
42902: LD_VAR 0 3
42906: PUSH
42907: LD_VAR 0 4
42911: ARRAY
42912: PPUSH
42913: CALL_OW 250
42917: PUSH
42918: LD_VAR 0 3
42922: PUSH
42923: LD_VAR 0 4
42927: ARRAY
42928: PPUSH
42929: CALL_OW 251
42933: PUSH
42934: LD_VAR 0 3
42938: PUSH
42939: LD_VAR 0 4
42943: ARRAY
42944: PPUSH
42945: CALL_OW 254
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: ADD
42959: ST_TO_ADDR
42960: GO 42873
42962: POP
42963: POP
// result := list ;
42964: LD_ADDR_VAR 0 2
42968: PUSH
42969: LD_VAR 0 5
42973: ST_TO_ADDR
// end ;
42974: LD_VAR 0 2
42978: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42979: LD_INT 0
42981: PPUSH
42982: PPUSH
42983: PPUSH
42984: PPUSH
42985: PPUSH
42986: PPUSH
42987: PPUSH
// if not factory then
42988: LD_VAR 0 1
42992: NOT
42993: IFFALSE 42997
// exit ;
42995: GO 43590
// if control = control_apeman then
42997: LD_VAR 0 4
43001: PUSH
43002: LD_INT 5
43004: EQUAL
43005: IFFALSE 43114
// begin tmp := UnitsInside ( factory ) ;
43007: LD_ADDR_VAR 0 8
43011: PUSH
43012: LD_VAR 0 1
43016: PPUSH
43017: CALL_OW 313
43021: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43022: LD_VAR 0 8
43026: PPUSH
43027: LD_INT 25
43029: PUSH
43030: LD_INT 12
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PPUSH
43037: CALL_OW 72
43041: NOT
43042: IFFALSE 43052
// control := control_manual ;
43044: LD_ADDR_VAR 0 4
43048: PUSH
43049: LD_INT 1
43051: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43052: LD_ADDR_VAR 0 8
43056: PUSH
43057: LD_VAR 0 1
43061: PPUSH
43062: CALL 42749 0 1
43066: ST_TO_ADDR
// if tmp then
43067: LD_VAR 0 8
43071: IFFALSE 43114
// begin for i in tmp do
43073: LD_ADDR_VAR 0 7
43077: PUSH
43078: LD_VAR 0 8
43082: PUSH
43083: FOR_IN
43084: IFFALSE 43112
// if i [ 1 ] = b_ext_radio then
43086: LD_VAR 0 7
43090: PUSH
43091: LD_INT 1
43093: ARRAY
43094: PUSH
43095: LD_INT 22
43097: EQUAL
43098: IFFALSE 43110
// begin control := control_remote ;
43100: LD_ADDR_VAR 0 4
43104: PUSH
43105: LD_INT 2
43107: ST_TO_ADDR
// break ;
43108: GO 43112
// end ;
43110: GO 43083
43112: POP
43113: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43114: LD_VAR 0 1
43118: PPUSH
43119: LD_VAR 0 2
43123: PPUSH
43124: LD_VAR 0 3
43128: PPUSH
43129: LD_VAR 0 4
43133: PPUSH
43134: LD_VAR 0 5
43138: PPUSH
43139: CALL_OW 448
43143: IFFALSE 43178
// begin result := [ chassis , engine , control , weapon ] ;
43145: LD_ADDR_VAR 0 6
43149: PUSH
43150: LD_VAR 0 2
43154: PUSH
43155: LD_VAR 0 3
43159: PUSH
43160: LD_VAR 0 4
43164: PUSH
43165: LD_VAR 0 5
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
// exit ;
43176: GO 43590
// end ; _chassis := AvailableChassisList ( factory ) ;
43178: LD_ADDR_VAR 0 9
43182: PUSH
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 475
43192: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43193: LD_ADDR_VAR 0 11
43197: PUSH
43198: LD_VAR 0 1
43202: PPUSH
43203: CALL_OW 476
43207: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43208: LD_ADDR_VAR 0 12
43212: PUSH
43213: LD_VAR 0 1
43217: PPUSH
43218: CALL_OW 477
43222: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43223: LD_ADDR_VAR 0 10
43227: PUSH
43228: LD_VAR 0 1
43232: PPUSH
43233: CALL_OW 478
43237: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43238: LD_VAR 0 9
43242: NOT
43243: PUSH
43244: LD_VAR 0 11
43248: NOT
43249: OR
43250: PUSH
43251: LD_VAR 0 12
43255: NOT
43256: OR
43257: PUSH
43258: LD_VAR 0 10
43262: NOT
43263: OR
43264: IFFALSE 43299
// begin result := [ chassis , engine , control , weapon ] ;
43266: LD_ADDR_VAR 0 6
43270: PUSH
43271: LD_VAR 0 2
43275: PUSH
43276: LD_VAR 0 3
43280: PUSH
43281: LD_VAR 0 4
43285: PUSH
43286: LD_VAR 0 5
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: ST_TO_ADDR
// exit ;
43297: GO 43590
// end ; if not chassis in _chassis then
43299: LD_VAR 0 2
43303: PUSH
43304: LD_VAR 0 9
43308: IN
43309: NOT
43310: IFFALSE 43336
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43312: LD_ADDR_VAR 0 2
43316: PUSH
43317: LD_VAR 0 9
43321: PUSH
43322: LD_INT 1
43324: PPUSH
43325: LD_VAR 0 9
43329: PPUSH
43330: CALL_OW 12
43334: ARRAY
43335: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43336: LD_VAR 0 2
43340: PPUSH
43341: LD_VAR 0 3
43345: PPUSH
43346: CALL 43595 0 2
43350: NOT
43351: IFFALSE 43410
// repeat engine := _engine [ 1 ] ;
43353: LD_ADDR_VAR 0 3
43357: PUSH
43358: LD_VAR 0 11
43362: PUSH
43363: LD_INT 1
43365: ARRAY
43366: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43367: LD_ADDR_VAR 0 11
43371: PUSH
43372: LD_VAR 0 11
43376: PPUSH
43377: LD_INT 1
43379: PPUSH
43380: CALL_OW 3
43384: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43385: LD_VAR 0 2
43389: PPUSH
43390: LD_VAR 0 3
43394: PPUSH
43395: CALL 43595 0 2
43399: PUSH
43400: LD_VAR 0 11
43404: PUSH
43405: EMPTY
43406: EQUAL
43407: OR
43408: IFFALSE 43353
// if not control in _control then
43410: LD_VAR 0 4
43414: PUSH
43415: LD_VAR 0 12
43419: IN
43420: NOT
43421: IFFALSE 43447
// control := _control [ rand ( 1 , _control ) ] ;
43423: LD_ADDR_VAR 0 4
43427: PUSH
43428: LD_VAR 0 12
43432: PUSH
43433: LD_INT 1
43435: PPUSH
43436: LD_VAR 0 12
43440: PPUSH
43441: CALL_OW 12
43445: ARRAY
43446: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43447: LD_VAR 0 2
43451: PPUSH
43452: LD_VAR 0 5
43456: PPUSH
43457: CALL 43815 0 2
43461: NOT
43462: IFFALSE 43521
// repeat weapon := _weapon [ 1 ] ;
43464: LD_ADDR_VAR 0 5
43468: PUSH
43469: LD_VAR 0 10
43473: PUSH
43474: LD_INT 1
43476: ARRAY
43477: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43478: LD_ADDR_VAR 0 10
43482: PUSH
43483: LD_VAR 0 10
43487: PPUSH
43488: LD_INT 1
43490: PPUSH
43491: CALL_OW 3
43495: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43496: LD_VAR 0 2
43500: PPUSH
43501: LD_VAR 0 5
43505: PPUSH
43506: CALL 43815 0 2
43510: PUSH
43511: LD_VAR 0 10
43515: PUSH
43516: EMPTY
43517: EQUAL
43518: OR
43519: IFFALSE 43464
// result := [ ] ;
43521: LD_ADDR_VAR 0 6
43525: PUSH
43526: EMPTY
43527: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43528: LD_VAR 0 1
43532: PPUSH
43533: LD_VAR 0 2
43537: PPUSH
43538: LD_VAR 0 3
43542: PPUSH
43543: LD_VAR 0 4
43547: PPUSH
43548: LD_VAR 0 5
43552: PPUSH
43553: CALL_OW 448
43557: IFFALSE 43590
// result := [ chassis , engine , control , weapon ] ;
43559: LD_ADDR_VAR 0 6
43563: PUSH
43564: LD_VAR 0 2
43568: PUSH
43569: LD_VAR 0 3
43573: PUSH
43574: LD_VAR 0 4
43578: PUSH
43579: LD_VAR 0 5
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// end ;
43590: LD_VAR 0 6
43594: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43595: LD_INT 0
43597: PPUSH
// if not chassis or not engine then
43598: LD_VAR 0 1
43602: NOT
43603: PUSH
43604: LD_VAR 0 2
43608: NOT
43609: OR
43610: IFFALSE 43614
// exit ;
43612: GO 43810
// case engine of engine_solar :
43614: LD_VAR 0 2
43618: PUSH
43619: LD_INT 2
43621: DOUBLE
43622: EQUAL
43623: IFTRUE 43627
43625: GO 43665
43627: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43628: LD_ADDR_VAR 0 3
43632: PUSH
43633: LD_INT 11
43635: PUSH
43636: LD_INT 12
43638: PUSH
43639: LD_INT 13
43641: PUSH
43642: LD_INT 14
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: LD_INT 3
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
43663: GO 43794
43665: LD_INT 1
43667: DOUBLE
43668: EQUAL
43669: IFTRUE 43673
43671: GO 43735
43673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43674: LD_ADDR_VAR 0 3
43678: PUSH
43679: LD_INT 11
43681: PUSH
43682: LD_INT 12
43684: PUSH
43685: LD_INT 13
43687: PUSH
43688: LD_INT 14
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 3
43699: PUSH
43700: LD_INT 4
43702: PUSH
43703: LD_INT 5
43705: PUSH
43706: LD_INT 21
43708: PUSH
43709: LD_INT 23
43711: PUSH
43712: LD_INT 22
43714: PUSH
43715: LD_INT 24
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
43733: GO 43794
43735: LD_INT 3
43737: DOUBLE
43738: EQUAL
43739: IFTRUE 43743
43741: GO 43793
43743: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43744: LD_ADDR_VAR 0 3
43748: PUSH
43749: LD_INT 13
43751: PUSH
43752: LD_INT 14
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 3
43760: PUSH
43761: LD_INT 4
43763: PUSH
43764: LD_INT 5
43766: PUSH
43767: LD_INT 21
43769: PUSH
43770: LD_INT 22
43772: PUSH
43773: LD_INT 23
43775: PUSH
43776: LD_INT 24
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: ST_TO_ADDR
43791: GO 43794
43793: POP
// result := ( chassis in result ) ;
43794: LD_ADDR_VAR 0 3
43798: PUSH
43799: LD_VAR 0 1
43803: PUSH
43804: LD_VAR 0 3
43808: IN
43809: ST_TO_ADDR
// end ;
43810: LD_VAR 0 3
43814: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43815: LD_INT 0
43817: PPUSH
// if not chassis or not weapon then
43818: LD_VAR 0 1
43822: NOT
43823: PUSH
43824: LD_VAR 0 2
43828: NOT
43829: OR
43830: IFFALSE 43834
// exit ;
43832: GO 44894
// case weapon of us_machine_gun :
43834: LD_VAR 0 2
43838: PUSH
43839: LD_INT 2
43841: DOUBLE
43842: EQUAL
43843: IFTRUE 43847
43845: GO 43877
43847: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: LD_INT 3
43861: PUSH
43862: LD_INT 4
43864: PUSH
43865: LD_INT 5
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: ST_TO_ADDR
43875: GO 44878
43877: LD_INT 3
43879: DOUBLE
43880: EQUAL
43881: IFTRUE 43885
43883: GO 43915
43885: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43886: LD_ADDR_VAR 0 3
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: LD_INT 4
43902: PUSH
43903: LD_INT 5
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: ST_TO_ADDR
43913: GO 44878
43915: LD_INT 11
43917: DOUBLE
43918: EQUAL
43919: IFTRUE 43923
43921: GO 43953
43923: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43924: LD_ADDR_VAR 0 3
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: LD_INT 4
43940: PUSH
43941: LD_INT 5
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: ST_TO_ADDR
43951: GO 44878
43953: LD_INT 4
43955: DOUBLE
43956: EQUAL
43957: IFTRUE 43961
43959: GO 43987
43961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43962: LD_ADDR_VAR 0 3
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 3
43972: PUSH
43973: LD_INT 4
43975: PUSH
43976: LD_INT 5
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
43985: GO 44878
43987: LD_INT 5
43989: DOUBLE
43990: EQUAL
43991: IFTRUE 43995
43993: GO 44021
43995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43996: LD_ADDR_VAR 0 3
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 3
44006: PUSH
44007: LD_INT 4
44009: PUSH
44010: LD_INT 5
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
44019: GO 44878
44021: LD_INT 9
44023: DOUBLE
44024: EQUAL
44025: IFTRUE 44029
44027: GO 44055
44029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44030: LD_ADDR_VAR 0 3
44034: PUSH
44035: LD_INT 2
44037: PUSH
44038: LD_INT 3
44040: PUSH
44041: LD_INT 4
44043: PUSH
44044: LD_INT 5
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: ST_TO_ADDR
44053: GO 44878
44055: LD_INT 7
44057: DOUBLE
44058: EQUAL
44059: IFTRUE 44063
44061: GO 44089
44063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44064: LD_ADDR_VAR 0 3
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: LD_INT 4
44077: PUSH
44078: LD_INT 5
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: ST_TO_ADDR
44087: GO 44878
44089: LD_INT 12
44091: DOUBLE
44092: EQUAL
44093: IFTRUE 44097
44095: GO 44123
44097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44098: LD_ADDR_VAR 0 3
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: LD_INT 4
44111: PUSH
44112: LD_INT 5
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
44121: GO 44878
44123: LD_INT 13
44125: DOUBLE
44126: EQUAL
44127: IFTRUE 44131
44129: GO 44157
44131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44132: LD_ADDR_VAR 0 3
44136: PUSH
44137: LD_INT 2
44139: PUSH
44140: LD_INT 3
44142: PUSH
44143: LD_INT 4
44145: PUSH
44146: LD_INT 5
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
44155: GO 44878
44157: LD_INT 14
44159: DOUBLE
44160: EQUAL
44161: IFTRUE 44165
44163: GO 44183
44165: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44166: LD_ADDR_VAR 0 3
44170: PUSH
44171: LD_INT 4
44173: PUSH
44174: LD_INT 5
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: ST_TO_ADDR
44181: GO 44878
44183: LD_INT 6
44185: DOUBLE
44186: EQUAL
44187: IFTRUE 44191
44189: GO 44209
44191: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44192: LD_ADDR_VAR 0 3
44196: PUSH
44197: LD_INT 4
44199: PUSH
44200: LD_INT 5
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: ST_TO_ADDR
44207: GO 44878
44209: LD_INT 10
44211: DOUBLE
44212: EQUAL
44213: IFTRUE 44217
44215: GO 44235
44217: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44218: LD_ADDR_VAR 0 3
44222: PUSH
44223: LD_INT 4
44225: PUSH
44226: LD_INT 5
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: ST_TO_ADDR
44233: GO 44878
44235: LD_INT 22
44237: DOUBLE
44238: EQUAL
44239: IFTRUE 44243
44241: GO 44269
44243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44244: LD_ADDR_VAR 0 3
44248: PUSH
44249: LD_INT 11
44251: PUSH
44252: LD_INT 12
44254: PUSH
44255: LD_INT 13
44257: PUSH
44258: LD_INT 14
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: ST_TO_ADDR
44267: GO 44878
44269: LD_INT 23
44271: DOUBLE
44272: EQUAL
44273: IFTRUE 44277
44275: GO 44303
44277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44278: LD_ADDR_VAR 0 3
44282: PUSH
44283: LD_INT 11
44285: PUSH
44286: LD_INT 12
44288: PUSH
44289: LD_INT 13
44291: PUSH
44292: LD_INT 14
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
44301: GO 44878
44303: LD_INT 24
44305: DOUBLE
44306: EQUAL
44307: IFTRUE 44311
44309: GO 44337
44311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44312: LD_ADDR_VAR 0 3
44316: PUSH
44317: LD_INT 11
44319: PUSH
44320: LD_INT 12
44322: PUSH
44323: LD_INT 13
44325: PUSH
44326: LD_INT 14
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
44335: GO 44878
44337: LD_INT 30
44339: DOUBLE
44340: EQUAL
44341: IFTRUE 44345
44343: GO 44371
44345: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44346: LD_ADDR_VAR 0 3
44350: PUSH
44351: LD_INT 11
44353: PUSH
44354: LD_INT 12
44356: PUSH
44357: LD_INT 13
44359: PUSH
44360: LD_INT 14
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: ST_TO_ADDR
44369: GO 44878
44371: LD_INT 25
44373: DOUBLE
44374: EQUAL
44375: IFTRUE 44379
44377: GO 44397
44379: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44380: LD_ADDR_VAR 0 3
44384: PUSH
44385: LD_INT 13
44387: PUSH
44388: LD_INT 14
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: ST_TO_ADDR
44395: GO 44878
44397: LD_INT 27
44399: DOUBLE
44400: EQUAL
44401: IFTRUE 44405
44403: GO 44423
44405: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44406: LD_ADDR_VAR 0 3
44410: PUSH
44411: LD_INT 13
44413: PUSH
44414: LD_INT 14
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: ST_TO_ADDR
44421: GO 44878
44423: LD_INT 92
44425: DOUBLE
44426: EQUAL
44427: IFTRUE 44431
44429: GO 44457
44431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44432: LD_ADDR_VAR 0 3
44436: PUSH
44437: LD_INT 11
44439: PUSH
44440: LD_INT 12
44442: PUSH
44443: LD_INT 13
44445: PUSH
44446: LD_INT 14
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: ST_TO_ADDR
44455: GO 44878
44457: LD_INT 28
44459: DOUBLE
44460: EQUAL
44461: IFTRUE 44465
44463: GO 44483
44465: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44466: LD_ADDR_VAR 0 3
44470: PUSH
44471: LD_INT 13
44473: PUSH
44474: LD_INT 14
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: ST_TO_ADDR
44481: GO 44878
44483: LD_INT 29
44485: DOUBLE
44486: EQUAL
44487: IFTRUE 44491
44489: GO 44509
44491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44492: LD_ADDR_VAR 0 3
44496: PUSH
44497: LD_INT 13
44499: PUSH
44500: LD_INT 14
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: ST_TO_ADDR
44507: GO 44878
44509: LD_INT 31
44511: DOUBLE
44512: EQUAL
44513: IFTRUE 44517
44515: GO 44535
44517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44518: LD_ADDR_VAR 0 3
44522: PUSH
44523: LD_INT 13
44525: PUSH
44526: LD_INT 14
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: ST_TO_ADDR
44533: GO 44878
44535: LD_INT 26
44537: DOUBLE
44538: EQUAL
44539: IFTRUE 44543
44541: GO 44561
44543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44544: LD_ADDR_VAR 0 3
44548: PUSH
44549: LD_INT 13
44551: PUSH
44552: LD_INT 14
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: ST_TO_ADDR
44559: GO 44878
44561: LD_INT 42
44563: DOUBLE
44564: EQUAL
44565: IFTRUE 44569
44567: GO 44595
44569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44570: LD_ADDR_VAR 0 3
44574: PUSH
44575: LD_INT 21
44577: PUSH
44578: LD_INT 22
44580: PUSH
44581: LD_INT 23
44583: PUSH
44584: LD_INT 24
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
44593: GO 44878
44595: LD_INT 43
44597: DOUBLE
44598: EQUAL
44599: IFTRUE 44603
44601: GO 44629
44603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44604: LD_ADDR_VAR 0 3
44608: PUSH
44609: LD_INT 21
44611: PUSH
44612: LD_INT 22
44614: PUSH
44615: LD_INT 23
44617: PUSH
44618: LD_INT 24
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
44627: GO 44878
44629: LD_INT 44
44631: DOUBLE
44632: EQUAL
44633: IFTRUE 44637
44635: GO 44663
44637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44638: LD_ADDR_VAR 0 3
44642: PUSH
44643: LD_INT 21
44645: PUSH
44646: LD_INT 22
44648: PUSH
44649: LD_INT 23
44651: PUSH
44652: LD_INT 24
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: ST_TO_ADDR
44661: GO 44878
44663: LD_INT 45
44665: DOUBLE
44666: EQUAL
44667: IFTRUE 44671
44669: GO 44697
44671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44672: LD_ADDR_VAR 0 3
44676: PUSH
44677: LD_INT 21
44679: PUSH
44680: LD_INT 22
44682: PUSH
44683: LD_INT 23
44685: PUSH
44686: LD_INT 24
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: ST_TO_ADDR
44695: GO 44878
44697: LD_INT 49
44699: DOUBLE
44700: EQUAL
44701: IFTRUE 44705
44703: GO 44731
44705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44706: LD_ADDR_VAR 0 3
44710: PUSH
44711: LD_INT 21
44713: PUSH
44714: LD_INT 22
44716: PUSH
44717: LD_INT 23
44719: PUSH
44720: LD_INT 24
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: ST_TO_ADDR
44729: GO 44878
44731: LD_INT 51
44733: DOUBLE
44734: EQUAL
44735: IFTRUE 44739
44737: GO 44765
44739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44740: LD_ADDR_VAR 0 3
44744: PUSH
44745: LD_INT 21
44747: PUSH
44748: LD_INT 22
44750: PUSH
44751: LD_INT 23
44753: PUSH
44754: LD_INT 24
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: ST_TO_ADDR
44763: GO 44878
44765: LD_INT 52
44767: DOUBLE
44768: EQUAL
44769: IFTRUE 44773
44771: GO 44799
44773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_INT 21
44781: PUSH
44782: LD_INT 22
44784: PUSH
44785: LD_INT 23
44787: PUSH
44788: LD_INT 24
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: ST_TO_ADDR
44797: GO 44878
44799: LD_INT 53
44801: DOUBLE
44802: EQUAL
44803: IFTRUE 44807
44805: GO 44825
44807: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44808: LD_ADDR_VAR 0 3
44812: PUSH
44813: LD_INT 23
44815: PUSH
44816: LD_INT 24
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: ST_TO_ADDR
44823: GO 44878
44825: LD_INT 46
44827: DOUBLE
44828: EQUAL
44829: IFTRUE 44833
44831: GO 44851
44833: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44834: LD_ADDR_VAR 0 3
44838: PUSH
44839: LD_INT 23
44841: PUSH
44842: LD_INT 24
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: ST_TO_ADDR
44849: GO 44878
44851: LD_INT 47
44853: DOUBLE
44854: EQUAL
44855: IFTRUE 44859
44857: GO 44877
44859: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44860: LD_ADDR_VAR 0 3
44864: PUSH
44865: LD_INT 23
44867: PUSH
44868: LD_INT 24
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: ST_TO_ADDR
44875: GO 44878
44877: POP
// result := ( chassis in result ) ;
44878: LD_ADDR_VAR 0 3
44882: PUSH
44883: LD_VAR 0 1
44887: PUSH
44888: LD_VAR 0 3
44892: IN
44893: ST_TO_ADDR
// end ;
44894: LD_VAR 0 3
44898: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44899: LD_INT 0
44901: PPUSH
44902: PPUSH
44903: PPUSH
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
// result := array ;
44908: LD_ADDR_VAR 0 5
44912: PUSH
44913: LD_VAR 0 1
44917: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44918: LD_VAR 0 1
44922: NOT
44923: PUSH
44924: LD_VAR 0 2
44928: NOT
44929: OR
44930: PUSH
44931: LD_VAR 0 3
44935: NOT
44936: OR
44937: PUSH
44938: LD_VAR 0 2
44942: PUSH
44943: LD_VAR 0 1
44947: GREATER
44948: OR
44949: PUSH
44950: LD_VAR 0 3
44954: PUSH
44955: LD_VAR 0 1
44959: GREATER
44960: OR
44961: IFFALSE 44965
// exit ;
44963: GO 45261
// if direction then
44965: LD_VAR 0 4
44969: IFFALSE 45033
// begin d := 1 ;
44971: LD_ADDR_VAR 0 9
44975: PUSH
44976: LD_INT 1
44978: ST_TO_ADDR
// if i_from > i_to then
44979: LD_VAR 0 2
44983: PUSH
44984: LD_VAR 0 3
44988: GREATER
44989: IFFALSE 45015
// length := ( array - i_from ) + i_to else
44991: LD_ADDR_VAR 0 11
44995: PUSH
44996: LD_VAR 0 1
45000: PUSH
45001: LD_VAR 0 2
45005: MINUS
45006: PUSH
45007: LD_VAR 0 3
45011: PLUS
45012: ST_TO_ADDR
45013: GO 45031
// length := i_to - i_from ;
45015: LD_ADDR_VAR 0 11
45019: PUSH
45020: LD_VAR 0 3
45024: PUSH
45025: LD_VAR 0 2
45029: MINUS
45030: ST_TO_ADDR
// end else
45031: GO 45094
// begin d := - 1 ;
45033: LD_ADDR_VAR 0 9
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: ST_TO_ADDR
// if i_from > i_to then
45042: LD_VAR 0 2
45046: PUSH
45047: LD_VAR 0 3
45051: GREATER
45052: IFFALSE 45072
// length := i_from - i_to else
45054: LD_ADDR_VAR 0 11
45058: PUSH
45059: LD_VAR 0 2
45063: PUSH
45064: LD_VAR 0 3
45068: MINUS
45069: ST_TO_ADDR
45070: GO 45094
// length := ( array - i_to ) + i_from ;
45072: LD_ADDR_VAR 0 11
45076: PUSH
45077: LD_VAR 0 1
45081: PUSH
45082: LD_VAR 0 3
45086: MINUS
45087: PUSH
45088: LD_VAR 0 2
45092: PLUS
45093: ST_TO_ADDR
// end ; if not length then
45094: LD_VAR 0 11
45098: NOT
45099: IFFALSE 45103
// exit ;
45101: GO 45261
// tmp := array ;
45103: LD_ADDR_VAR 0 10
45107: PUSH
45108: LD_VAR 0 1
45112: ST_TO_ADDR
// for i = 1 to length do
45113: LD_ADDR_VAR 0 6
45117: PUSH
45118: DOUBLE
45119: LD_INT 1
45121: DEC
45122: ST_TO_ADDR
45123: LD_VAR 0 11
45127: PUSH
45128: FOR_TO
45129: IFFALSE 45249
// begin for j = 1 to array do
45131: LD_ADDR_VAR 0 7
45135: PUSH
45136: DOUBLE
45137: LD_INT 1
45139: DEC
45140: ST_TO_ADDR
45141: LD_VAR 0 1
45145: PUSH
45146: FOR_TO
45147: IFFALSE 45235
// begin k := j + d ;
45149: LD_ADDR_VAR 0 8
45153: PUSH
45154: LD_VAR 0 7
45158: PUSH
45159: LD_VAR 0 9
45163: PLUS
45164: ST_TO_ADDR
// if k > array then
45165: LD_VAR 0 8
45169: PUSH
45170: LD_VAR 0 1
45174: GREATER
45175: IFFALSE 45185
// k := 1 ;
45177: LD_ADDR_VAR 0 8
45181: PUSH
45182: LD_INT 1
45184: ST_TO_ADDR
// if not k then
45185: LD_VAR 0 8
45189: NOT
45190: IFFALSE 45202
// k := array ;
45192: LD_ADDR_VAR 0 8
45196: PUSH
45197: LD_VAR 0 1
45201: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45202: LD_ADDR_VAR 0 10
45206: PUSH
45207: LD_VAR 0 10
45211: PPUSH
45212: LD_VAR 0 8
45216: PPUSH
45217: LD_VAR 0 1
45221: PUSH
45222: LD_VAR 0 7
45226: ARRAY
45227: PPUSH
45228: CALL_OW 1
45232: ST_TO_ADDR
// end ;
45233: GO 45146
45235: POP
45236: POP
// array := tmp ;
45237: LD_ADDR_VAR 0 1
45241: PUSH
45242: LD_VAR 0 10
45246: ST_TO_ADDR
// end ;
45247: GO 45128
45249: POP
45250: POP
// result := array ;
45251: LD_ADDR_VAR 0 5
45255: PUSH
45256: LD_VAR 0 1
45260: ST_TO_ADDR
// end ;
45261: LD_VAR 0 5
45265: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45266: LD_INT 0
45268: PPUSH
45269: PPUSH
// result := 0 ;
45270: LD_ADDR_VAR 0 3
45274: PUSH
45275: LD_INT 0
45277: ST_TO_ADDR
// if not array or not value in array then
45278: LD_VAR 0 1
45282: NOT
45283: PUSH
45284: LD_VAR 0 2
45288: PUSH
45289: LD_VAR 0 1
45293: IN
45294: NOT
45295: OR
45296: IFFALSE 45300
// exit ;
45298: GO 45354
// for i = 1 to array do
45300: LD_ADDR_VAR 0 4
45304: PUSH
45305: DOUBLE
45306: LD_INT 1
45308: DEC
45309: ST_TO_ADDR
45310: LD_VAR 0 1
45314: PUSH
45315: FOR_TO
45316: IFFALSE 45352
// if value = array [ i ] then
45318: LD_VAR 0 2
45322: PUSH
45323: LD_VAR 0 1
45327: PUSH
45328: LD_VAR 0 4
45332: ARRAY
45333: EQUAL
45334: IFFALSE 45350
// begin result := i ;
45336: LD_ADDR_VAR 0 3
45340: PUSH
45341: LD_VAR 0 4
45345: ST_TO_ADDR
// exit ;
45346: POP
45347: POP
45348: GO 45354
// end ;
45350: GO 45315
45352: POP
45353: POP
// end ;
45354: LD_VAR 0 3
45358: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45359: LD_INT 0
45361: PPUSH
// vc_chassis := chassis ;
45362: LD_ADDR_OWVAR 37
45366: PUSH
45367: LD_VAR 0 1
45371: ST_TO_ADDR
// vc_engine := engine ;
45372: LD_ADDR_OWVAR 39
45376: PUSH
45377: LD_VAR 0 2
45381: ST_TO_ADDR
// vc_control := control ;
45382: LD_ADDR_OWVAR 38
45386: PUSH
45387: LD_VAR 0 3
45391: ST_TO_ADDR
// vc_weapon := weapon ;
45392: LD_ADDR_OWVAR 40
45396: PUSH
45397: LD_VAR 0 4
45401: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45402: LD_ADDR_OWVAR 41
45406: PUSH
45407: LD_VAR 0 5
45411: ST_TO_ADDR
// end ;
45412: LD_VAR 0 6
45416: RET
// export function WantPlant ( unit ) ; var task ; begin
45417: LD_INT 0
45419: PPUSH
45420: PPUSH
// result := false ;
45421: LD_ADDR_VAR 0 2
45425: PUSH
45426: LD_INT 0
45428: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45429: LD_ADDR_VAR 0 3
45433: PUSH
45434: LD_VAR 0 1
45438: PPUSH
45439: CALL_OW 437
45443: ST_TO_ADDR
// if task then
45444: LD_VAR 0 3
45448: IFFALSE 45476
// if task [ 1 ] [ 1 ] = p then
45450: LD_VAR 0 3
45454: PUSH
45455: LD_INT 1
45457: ARRAY
45458: PUSH
45459: LD_INT 1
45461: ARRAY
45462: PUSH
45463: LD_STRING p
45465: EQUAL
45466: IFFALSE 45476
// result := true ;
45468: LD_ADDR_VAR 0 2
45472: PUSH
45473: LD_INT 1
45475: ST_TO_ADDR
// end ;
45476: LD_VAR 0 2
45480: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45481: LD_INT 0
45483: PPUSH
45484: PPUSH
45485: PPUSH
45486: PPUSH
// if pos < 1 then
45487: LD_VAR 0 2
45491: PUSH
45492: LD_INT 1
45494: LESS
45495: IFFALSE 45499
// exit ;
45497: GO 45802
// if pos = 1 then
45499: LD_VAR 0 2
45503: PUSH
45504: LD_INT 1
45506: EQUAL
45507: IFFALSE 45540
// result := Replace ( arr , pos [ 1 ] , value ) else
45509: LD_ADDR_VAR 0 4
45513: PUSH
45514: LD_VAR 0 1
45518: PPUSH
45519: LD_VAR 0 2
45523: PUSH
45524: LD_INT 1
45526: ARRAY
45527: PPUSH
45528: LD_VAR 0 3
45532: PPUSH
45533: CALL_OW 1
45537: ST_TO_ADDR
45538: GO 45802
// begin tmp := arr ;
45540: LD_ADDR_VAR 0 6
45544: PUSH
45545: LD_VAR 0 1
45549: ST_TO_ADDR
// s_arr := [ tmp ] ;
45550: LD_ADDR_VAR 0 7
45554: PUSH
45555: LD_VAR 0 6
45559: PUSH
45560: EMPTY
45561: LIST
45562: ST_TO_ADDR
// for i = 1 to pos - 1 do
45563: LD_ADDR_VAR 0 5
45567: PUSH
45568: DOUBLE
45569: LD_INT 1
45571: DEC
45572: ST_TO_ADDR
45573: LD_VAR 0 2
45577: PUSH
45578: LD_INT 1
45580: MINUS
45581: PUSH
45582: FOR_TO
45583: IFFALSE 45628
// begin tmp := tmp [ pos [ i ] ] ;
45585: LD_ADDR_VAR 0 6
45589: PUSH
45590: LD_VAR 0 6
45594: PUSH
45595: LD_VAR 0 2
45599: PUSH
45600: LD_VAR 0 5
45604: ARRAY
45605: ARRAY
45606: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45607: LD_ADDR_VAR 0 7
45611: PUSH
45612: LD_VAR 0 7
45616: PUSH
45617: LD_VAR 0 6
45621: PUSH
45622: EMPTY
45623: LIST
45624: ADD
45625: ST_TO_ADDR
// end ;
45626: GO 45582
45628: POP
45629: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45630: LD_ADDR_VAR 0 6
45634: PUSH
45635: LD_VAR 0 6
45639: PPUSH
45640: LD_VAR 0 2
45644: PUSH
45645: LD_VAR 0 2
45649: ARRAY
45650: PPUSH
45651: LD_VAR 0 3
45655: PPUSH
45656: CALL_OW 1
45660: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45661: LD_ADDR_VAR 0 7
45665: PUSH
45666: LD_VAR 0 7
45670: PPUSH
45671: LD_VAR 0 7
45675: PPUSH
45676: LD_VAR 0 6
45680: PPUSH
45681: CALL_OW 1
45685: ST_TO_ADDR
// for i = s_arr downto 2 do
45686: LD_ADDR_VAR 0 5
45690: PUSH
45691: DOUBLE
45692: LD_VAR 0 7
45696: INC
45697: ST_TO_ADDR
45698: LD_INT 2
45700: PUSH
45701: FOR_DOWNTO
45702: IFFALSE 45786
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45704: LD_ADDR_VAR 0 6
45708: PUSH
45709: LD_VAR 0 7
45713: PUSH
45714: LD_VAR 0 5
45718: PUSH
45719: LD_INT 1
45721: MINUS
45722: ARRAY
45723: PPUSH
45724: LD_VAR 0 2
45728: PUSH
45729: LD_VAR 0 5
45733: PUSH
45734: LD_INT 1
45736: MINUS
45737: ARRAY
45738: PPUSH
45739: LD_VAR 0 7
45743: PUSH
45744: LD_VAR 0 5
45748: ARRAY
45749: PPUSH
45750: CALL_OW 1
45754: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45755: LD_ADDR_VAR 0 7
45759: PUSH
45760: LD_VAR 0 7
45764: PPUSH
45765: LD_VAR 0 5
45769: PUSH
45770: LD_INT 1
45772: MINUS
45773: PPUSH
45774: LD_VAR 0 6
45778: PPUSH
45779: CALL_OW 1
45783: ST_TO_ADDR
// end ;
45784: GO 45701
45786: POP
45787: POP
// result := s_arr [ 1 ] ;
45788: LD_ADDR_VAR 0 4
45792: PUSH
45793: LD_VAR 0 7
45797: PUSH
45798: LD_INT 1
45800: ARRAY
45801: ST_TO_ADDR
// end ; end ;
45802: LD_VAR 0 4
45806: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45807: LD_INT 0
45809: PPUSH
45810: PPUSH
// if not list then
45811: LD_VAR 0 1
45815: NOT
45816: IFFALSE 45820
// exit ;
45818: GO 45911
// i := list [ pos1 ] ;
45820: LD_ADDR_VAR 0 5
45824: PUSH
45825: LD_VAR 0 1
45829: PUSH
45830: LD_VAR 0 2
45834: ARRAY
45835: ST_TO_ADDR
// if not i then
45836: LD_VAR 0 5
45840: NOT
45841: IFFALSE 45845
// exit ;
45843: GO 45911
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45845: LD_ADDR_VAR 0 1
45849: PUSH
45850: LD_VAR 0 1
45854: PPUSH
45855: LD_VAR 0 2
45859: PPUSH
45860: LD_VAR 0 1
45864: PUSH
45865: LD_VAR 0 3
45869: ARRAY
45870: PPUSH
45871: CALL_OW 1
45875: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45876: LD_ADDR_VAR 0 1
45880: PUSH
45881: LD_VAR 0 1
45885: PPUSH
45886: LD_VAR 0 3
45890: PPUSH
45891: LD_VAR 0 5
45895: PPUSH
45896: CALL_OW 1
45900: ST_TO_ADDR
// result := list ;
45901: LD_ADDR_VAR 0 4
45905: PUSH
45906: LD_VAR 0 1
45910: ST_TO_ADDR
// end ;
45911: LD_VAR 0 4
45915: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45916: LD_INT 0
45918: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45919: LD_ADDR_VAR 0 5
45923: PUSH
45924: LD_VAR 0 1
45928: PPUSH
45929: CALL_OW 250
45933: PPUSH
45934: LD_VAR 0 1
45938: PPUSH
45939: CALL_OW 251
45943: PPUSH
45944: LD_VAR 0 2
45948: PPUSH
45949: LD_VAR 0 3
45953: PPUSH
45954: LD_VAR 0 4
45958: PPUSH
45959: CALL 46337 0 5
45963: ST_TO_ADDR
// end ;
45964: LD_VAR 0 5
45968: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45969: LD_INT 0
45971: PPUSH
45972: PPUSH
45973: PPUSH
45974: PPUSH
// if not list or not unit then
45975: LD_VAR 0 2
45979: NOT
45980: PUSH
45981: LD_VAR 0 1
45985: NOT
45986: OR
45987: IFFALSE 45991
// exit ;
45989: GO 46332
// result := [ ] ;
45991: LD_ADDR_VAR 0 5
45995: PUSH
45996: EMPTY
45997: ST_TO_ADDR
// for i in list do
45998: LD_ADDR_VAR 0 6
46002: PUSH
46003: LD_VAR 0 2
46007: PUSH
46008: FOR_IN
46009: IFFALSE 46227
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46011: LD_ADDR_VAR 0 8
46015: PUSH
46016: LD_VAR 0 1
46020: PPUSH
46021: LD_VAR 0 6
46025: PUSH
46026: LD_INT 1
46028: ARRAY
46029: PPUSH
46030: LD_VAR 0 6
46034: PUSH
46035: LD_INT 2
46037: ARRAY
46038: PPUSH
46039: CALL_OW 297
46043: ST_TO_ADDR
// if not Count ( result ) then
46044: LD_VAR 0 5
46048: PPUSH
46049: CALL 42621 0 1
46053: NOT
46054: IFFALSE 46087
// begin result := Join ( result , [ i , tmp ] ) ;
46056: LD_ADDR_VAR 0 5
46060: PUSH
46061: LD_VAR 0 5
46065: PPUSH
46066: LD_VAR 0 6
46070: PUSH
46071: LD_VAR 0 8
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PPUSH
46080: CALL 78230 0 2
46084: ST_TO_ADDR
// continue ;
46085: GO 46008
// end ; if result [ result ] [ 2 ] <= tmp then
46087: LD_VAR 0 5
46091: PUSH
46092: LD_VAR 0 5
46096: ARRAY
46097: PUSH
46098: LD_INT 2
46100: ARRAY
46101: PUSH
46102: LD_VAR 0 8
46106: LESSEQUAL
46107: IFFALSE 46140
// result := Join ( result , [ i , tmp ] ) else
46109: LD_ADDR_VAR 0 5
46113: PUSH
46114: LD_VAR 0 5
46118: PPUSH
46119: LD_VAR 0 6
46123: PUSH
46124: LD_VAR 0 8
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PPUSH
46133: CALL 78230 0 2
46137: ST_TO_ADDR
46138: GO 46225
// begin for j := 1 to Count ( result ) do
46140: LD_ADDR_VAR 0 7
46144: PUSH
46145: DOUBLE
46146: LD_INT 1
46148: DEC
46149: ST_TO_ADDR
46150: LD_VAR 0 5
46154: PPUSH
46155: CALL 42621 0 1
46159: PUSH
46160: FOR_TO
46161: IFFALSE 46223
// begin if tmp < result [ j ] [ 2 ] then
46163: LD_VAR 0 8
46167: PUSH
46168: LD_VAR 0 5
46172: PUSH
46173: LD_VAR 0 7
46177: ARRAY
46178: PUSH
46179: LD_INT 2
46181: ARRAY
46182: LESS
46183: IFFALSE 46221
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46185: LD_ADDR_VAR 0 5
46189: PUSH
46190: LD_VAR 0 5
46194: PPUSH
46195: LD_VAR 0 7
46199: PPUSH
46200: LD_VAR 0 6
46204: PUSH
46205: LD_VAR 0 8
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PPUSH
46214: CALL_OW 2
46218: ST_TO_ADDR
// break ;
46219: GO 46223
// end ; end ;
46221: GO 46160
46223: POP
46224: POP
// end ; end ;
46225: GO 46008
46227: POP
46228: POP
// if result and not asc then
46229: LD_VAR 0 5
46233: PUSH
46234: LD_VAR 0 3
46238: NOT
46239: AND
46240: IFFALSE 46257
// result := ReverseArray ( result ) ;
46242: LD_ADDR_VAR 0 5
46246: PUSH
46247: LD_VAR 0 5
46251: PPUSH
46252: CALL 73497 0 1
46256: ST_TO_ADDR
// tmp := [ ] ;
46257: LD_ADDR_VAR 0 8
46261: PUSH
46262: EMPTY
46263: ST_TO_ADDR
// if mode then
46264: LD_VAR 0 4
46268: IFFALSE 46332
// begin for i := 1 to result do
46270: LD_ADDR_VAR 0 6
46274: PUSH
46275: DOUBLE
46276: LD_INT 1
46278: DEC
46279: ST_TO_ADDR
46280: LD_VAR 0 5
46284: PUSH
46285: FOR_TO
46286: IFFALSE 46320
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46288: LD_ADDR_VAR 0 8
46292: PUSH
46293: LD_VAR 0 8
46297: PPUSH
46298: LD_VAR 0 5
46302: PUSH
46303: LD_VAR 0 6
46307: ARRAY
46308: PUSH
46309: LD_INT 1
46311: ARRAY
46312: PPUSH
46313: CALL 78230 0 2
46317: ST_TO_ADDR
46318: GO 46285
46320: POP
46321: POP
// result := tmp ;
46322: LD_ADDR_VAR 0 5
46326: PUSH
46327: LD_VAR 0 8
46331: ST_TO_ADDR
// end ; end ;
46332: LD_VAR 0 5
46336: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46337: LD_INT 0
46339: PPUSH
46340: PPUSH
46341: PPUSH
46342: PPUSH
// if not list then
46343: LD_VAR 0 3
46347: NOT
46348: IFFALSE 46352
// exit ;
46350: GO 46740
// result := [ ] ;
46352: LD_ADDR_VAR 0 6
46356: PUSH
46357: EMPTY
46358: ST_TO_ADDR
// for i in list do
46359: LD_ADDR_VAR 0 7
46363: PUSH
46364: LD_VAR 0 3
46368: PUSH
46369: FOR_IN
46370: IFFALSE 46572
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46372: LD_ADDR_VAR 0 9
46376: PUSH
46377: LD_VAR 0 7
46381: PPUSH
46382: LD_VAR 0 1
46386: PPUSH
46387: LD_VAR 0 2
46391: PPUSH
46392: CALL_OW 297
46396: ST_TO_ADDR
// if not result then
46397: LD_VAR 0 6
46401: NOT
46402: IFFALSE 46428
// result := [ [ i , tmp ] ] else
46404: LD_ADDR_VAR 0 6
46408: PUSH
46409: LD_VAR 0 7
46413: PUSH
46414: LD_VAR 0 9
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: EMPTY
46424: LIST
46425: ST_TO_ADDR
46426: GO 46570
// begin if result [ result ] [ 2 ] <= tmp then
46428: LD_VAR 0 6
46432: PUSH
46433: LD_VAR 0 6
46437: ARRAY
46438: PUSH
46439: LD_INT 2
46441: ARRAY
46442: PUSH
46443: LD_VAR 0 9
46447: LESSEQUAL
46448: IFFALSE 46490
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46450: LD_ADDR_VAR 0 6
46454: PUSH
46455: LD_VAR 0 6
46459: PPUSH
46460: LD_VAR 0 6
46464: PUSH
46465: LD_INT 1
46467: PLUS
46468: PPUSH
46469: LD_VAR 0 7
46473: PUSH
46474: LD_VAR 0 9
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PPUSH
46483: CALL_OW 2
46487: ST_TO_ADDR
46488: GO 46570
// for j := 1 to result do
46490: LD_ADDR_VAR 0 8
46494: PUSH
46495: DOUBLE
46496: LD_INT 1
46498: DEC
46499: ST_TO_ADDR
46500: LD_VAR 0 6
46504: PUSH
46505: FOR_TO
46506: IFFALSE 46568
// begin if tmp < result [ j ] [ 2 ] then
46508: LD_VAR 0 9
46512: PUSH
46513: LD_VAR 0 6
46517: PUSH
46518: LD_VAR 0 8
46522: ARRAY
46523: PUSH
46524: LD_INT 2
46526: ARRAY
46527: LESS
46528: IFFALSE 46566
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46530: LD_ADDR_VAR 0 6
46534: PUSH
46535: LD_VAR 0 6
46539: PPUSH
46540: LD_VAR 0 8
46544: PPUSH
46545: LD_VAR 0 7
46549: PUSH
46550: LD_VAR 0 9
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PPUSH
46559: CALL_OW 2
46563: ST_TO_ADDR
// break ;
46564: GO 46568
// end ; end ;
46566: GO 46505
46568: POP
46569: POP
// end ; end ;
46570: GO 46369
46572: POP
46573: POP
// if result and not asc then
46574: LD_VAR 0 6
46578: PUSH
46579: LD_VAR 0 4
46583: NOT
46584: AND
46585: IFFALSE 46660
// begin tmp := result ;
46587: LD_ADDR_VAR 0 9
46591: PUSH
46592: LD_VAR 0 6
46596: ST_TO_ADDR
// for i = tmp downto 1 do
46597: LD_ADDR_VAR 0 7
46601: PUSH
46602: DOUBLE
46603: LD_VAR 0 9
46607: INC
46608: ST_TO_ADDR
46609: LD_INT 1
46611: PUSH
46612: FOR_DOWNTO
46613: IFFALSE 46658
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46615: LD_ADDR_VAR 0 6
46619: PUSH
46620: LD_VAR 0 6
46624: PPUSH
46625: LD_VAR 0 9
46629: PUSH
46630: LD_VAR 0 7
46634: MINUS
46635: PUSH
46636: LD_INT 1
46638: PLUS
46639: PPUSH
46640: LD_VAR 0 9
46644: PUSH
46645: LD_VAR 0 7
46649: ARRAY
46650: PPUSH
46651: CALL_OW 1
46655: ST_TO_ADDR
46656: GO 46612
46658: POP
46659: POP
// end ; tmp := [ ] ;
46660: LD_ADDR_VAR 0 9
46664: PUSH
46665: EMPTY
46666: ST_TO_ADDR
// if mode then
46667: LD_VAR 0 5
46671: IFFALSE 46740
// begin for i = 1 to result do
46673: LD_ADDR_VAR 0 7
46677: PUSH
46678: DOUBLE
46679: LD_INT 1
46681: DEC
46682: ST_TO_ADDR
46683: LD_VAR 0 6
46687: PUSH
46688: FOR_TO
46689: IFFALSE 46728
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46691: LD_ADDR_VAR 0 9
46695: PUSH
46696: LD_VAR 0 9
46700: PPUSH
46701: LD_VAR 0 7
46705: PPUSH
46706: LD_VAR 0 6
46710: PUSH
46711: LD_VAR 0 7
46715: ARRAY
46716: PUSH
46717: LD_INT 1
46719: ARRAY
46720: PPUSH
46721: CALL_OW 1
46725: ST_TO_ADDR
46726: GO 46688
46728: POP
46729: POP
// result := tmp ;
46730: LD_ADDR_VAR 0 6
46734: PUSH
46735: LD_VAR 0 9
46739: ST_TO_ADDR
// end ; end ;
46740: LD_VAR 0 6
46744: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46745: LD_INT 0
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46753: LD_ADDR_VAR 0 5
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: ST_TO_ADDR
// if not x or not y then
46775: LD_VAR 0 2
46779: NOT
46780: PUSH
46781: LD_VAR 0 3
46785: NOT
46786: OR
46787: IFFALSE 46791
// exit ;
46789: GO 48441
// if not range then
46791: LD_VAR 0 4
46795: NOT
46796: IFFALSE 46806
// range := 10 ;
46798: LD_ADDR_VAR 0 4
46802: PUSH
46803: LD_INT 10
46805: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46806: LD_ADDR_VAR 0 8
46810: PUSH
46811: LD_INT 81
46813: PUSH
46814: LD_VAR 0 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 92
46825: PUSH
46826: LD_VAR 0 2
46830: PUSH
46831: LD_VAR 0 3
46835: PUSH
46836: LD_VAR 0 4
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: LD_INT 21
46852: PUSH
46853: LD_INT 3
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: LIST
46868: PPUSH
46869: CALL_OW 69
46873: ST_TO_ADDR
// if not tmp then
46874: LD_VAR 0 8
46878: NOT
46879: IFFALSE 46883
// exit ;
46881: GO 48441
// for i in tmp do
46883: LD_ADDR_VAR 0 6
46887: PUSH
46888: LD_VAR 0 8
46892: PUSH
46893: FOR_IN
46894: IFFALSE 48416
// begin points := [ 0 , 0 , 0 ] ;
46896: LD_ADDR_VAR 0 9
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// bpoints := 1 ;
46915: LD_ADDR_VAR 0 10
46919: PUSH
46920: LD_INT 1
46922: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46923: LD_VAR 0 6
46927: PPUSH
46928: CALL_OW 247
46932: PUSH
46933: LD_INT 1
46935: DOUBLE
46936: EQUAL
46937: IFTRUE 46941
46939: GO 47519
46941: POP
// begin if GetClass ( i ) = 1 then
46942: LD_VAR 0 6
46946: PPUSH
46947: CALL_OW 257
46951: PUSH
46952: LD_INT 1
46954: EQUAL
46955: IFFALSE 46976
// points := [ 10 , 5 , 3 ] ;
46957: LD_ADDR_VAR 0 9
46961: PUSH
46962: LD_INT 10
46964: PUSH
46965: LD_INT 5
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46976: LD_VAR 0 6
46980: PPUSH
46981: CALL_OW 257
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: LD_INT 4
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: IN
47000: IFFALSE 47021
// points := [ 3 , 2 , 1 ] ;
47002: LD_ADDR_VAR 0 9
47006: PUSH
47007: LD_INT 3
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: LIST
47020: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47021: LD_VAR 0 6
47025: PPUSH
47026: CALL_OW 257
47030: PUSH
47031: LD_INT 5
47033: EQUAL
47034: IFFALSE 47055
// points := [ 130 , 5 , 2 ] ;
47036: LD_ADDR_VAR 0 9
47040: PUSH
47041: LD_INT 130
47043: PUSH
47044: LD_INT 5
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47055: LD_VAR 0 6
47059: PPUSH
47060: CALL_OW 257
47064: PUSH
47065: LD_INT 8
47067: EQUAL
47068: IFFALSE 47089
// points := [ 35 , 35 , 30 ] ;
47070: LD_ADDR_VAR 0 9
47074: PUSH
47075: LD_INT 35
47077: PUSH
47078: LD_INT 35
47080: PUSH
47081: LD_INT 30
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47089: LD_VAR 0 6
47093: PPUSH
47094: CALL_OW 257
47098: PUSH
47099: LD_INT 9
47101: EQUAL
47102: IFFALSE 47123
// points := [ 20 , 55 , 40 ] ;
47104: LD_ADDR_VAR 0 9
47108: PUSH
47109: LD_INT 20
47111: PUSH
47112: LD_INT 55
47114: PUSH
47115: LD_INT 40
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47123: LD_VAR 0 6
47127: PPUSH
47128: CALL_OW 257
47132: PUSH
47133: LD_INT 12
47135: PUSH
47136: LD_INT 16
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: IN
47143: IFFALSE 47164
// points := [ 5 , 3 , 2 ] ;
47145: LD_ADDR_VAR 0 9
47149: PUSH
47150: LD_INT 5
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47164: LD_VAR 0 6
47168: PPUSH
47169: CALL_OW 257
47173: PUSH
47174: LD_INT 17
47176: EQUAL
47177: IFFALSE 47198
// points := [ 100 , 50 , 75 ] ;
47179: LD_ADDR_VAR 0 9
47183: PUSH
47184: LD_INT 100
47186: PUSH
47187: LD_INT 50
47189: PUSH
47190: LD_INT 75
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47198: LD_VAR 0 6
47202: PPUSH
47203: CALL_OW 257
47207: PUSH
47208: LD_INT 15
47210: EQUAL
47211: IFFALSE 47232
// points := [ 10 , 5 , 3 ] ;
47213: LD_ADDR_VAR 0 9
47217: PUSH
47218: LD_INT 10
47220: PUSH
47221: LD_INT 5
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: LIST
47231: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47232: LD_VAR 0 6
47236: PPUSH
47237: CALL_OW 257
47241: PUSH
47242: LD_INT 14
47244: EQUAL
47245: IFFALSE 47266
// points := [ 10 , 0 , 0 ] ;
47247: LD_ADDR_VAR 0 9
47251: PUSH
47252: LD_INT 10
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: LIST
47265: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47266: LD_VAR 0 6
47270: PPUSH
47271: CALL_OW 257
47275: PUSH
47276: LD_INT 11
47278: EQUAL
47279: IFFALSE 47300
// points := [ 30 , 10 , 5 ] ;
47281: LD_ADDR_VAR 0 9
47285: PUSH
47286: LD_INT 30
47288: PUSH
47289: LD_INT 10
47291: PUSH
47292: LD_INT 5
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47300: LD_VAR 0 1
47304: PPUSH
47305: LD_INT 5
47307: PPUSH
47308: CALL_OW 321
47312: PUSH
47313: LD_INT 2
47315: EQUAL
47316: IFFALSE 47333
// bpoints := bpoints * 1.8 ;
47318: LD_ADDR_VAR 0 10
47322: PUSH
47323: LD_VAR 0 10
47327: PUSH
47328: LD_REAL  1.80000000000000E+0000
47331: MUL
47332: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47333: LD_VAR 0 6
47337: PPUSH
47338: CALL_OW 257
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: LD_INT 3
47351: PUSH
47352: LD_INT 4
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: IN
47361: PUSH
47362: LD_VAR 0 1
47366: PPUSH
47367: LD_INT 51
47369: PPUSH
47370: CALL_OW 321
47374: PUSH
47375: LD_INT 2
47377: EQUAL
47378: AND
47379: IFFALSE 47396
// bpoints := bpoints * 1.2 ;
47381: LD_ADDR_VAR 0 10
47385: PUSH
47386: LD_VAR 0 10
47390: PUSH
47391: LD_REAL  1.20000000000000E+0000
47394: MUL
47395: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47396: LD_VAR 0 6
47400: PPUSH
47401: CALL_OW 257
47405: PUSH
47406: LD_INT 5
47408: PUSH
47409: LD_INT 7
47411: PUSH
47412: LD_INT 9
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: IN
47420: PUSH
47421: LD_VAR 0 1
47425: PPUSH
47426: LD_INT 52
47428: PPUSH
47429: CALL_OW 321
47433: PUSH
47434: LD_INT 2
47436: EQUAL
47437: AND
47438: IFFALSE 47455
// bpoints := bpoints * 1.5 ;
47440: LD_ADDR_VAR 0 10
47444: PUSH
47445: LD_VAR 0 10
47449: PUSH
47450: LD_REAL  1.50000000000000E+0000
47453: MUL
47454: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47455: LD_VAR 0 1
47459: PPUSH
47460: LD_INT 66
47462: PPUSH
47463: CALL_OW 321
47467: PUSH
47468: LD_INT 2
47470: EQUAL
47471: IFFALSE 47488
// bpoints := bpoints * 1.1 ;
47473: LD_ADDR_VAR 0 10
47477: PUSH
47478: LD_VAR 0 10
47482: PUSH
47483: LD_REAL  1.10000000000000E+0000
47486: MUL
47487: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47488: LD_ADDR_VAR 0 10
47492: PUSH
47493: LD_VAR 0 10
47497: PUSH
47498: LD_VAR 0 6
47502: PPUSH
47503: LD_INT 1
47505: PPUSH
47506: CALL_OW 259
47510: PUSH
47511: LD_REAL  1.15000000000000E+0000
47514: MUL
47515: MUL
47516: ST_TO_ADDR
// end ; unit_vehicle :
47517: GO 48345
47519: LD_INT 2
47521: DOUBLE
47522: EQUAL
47523: IFTRUE 47527
47525: GO 48333
47527: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47528: LD_VAR 0 6
47532: PPUSH
47533: CALL_OW 264
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 42
47543: PUSH
47544: LD_INT 24
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: IN
47552: IFFALSE 47573
// points := [ 25 , 5 , 3 ] ;
47554: LD_ADDR_VAR 0 9
47558: PUSH
47559: LD_INT 25
47561: PUSH
47562: LD_INT 5
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47573: LD_VAR 0 6
47577: PPUSH
47578: CALL_OW 264
47582: PUSH
47583: LD_INT 4
47585: PUSH
47586: LD_INT 43
47588: PUSH
47589: LD_INT 25
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: IN
47597: IFFALSE 47618
// points := [ 40 , 15 , 5 ] ;
47599: LD_ADDR_VAR 0 9
47603: PUSH
47604: LD_INT 40
47606: PUSH
47607: LD_INT 15
47609: PUSH
47610: LD_INT 5
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47618: LD_VAR 0 6
47622: PPUSH
47623: CALL_OW 264
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: LD_INT 23
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: IN
47638: IFFALSE 47659
// points := [ 7 , 25 , 8 ] ;
47640: LD_ADDR_VAR 0 9
47644: PUSH
47645: LD_INT 7
47647: PUSH
47648: LD_INT 25
47650: PUSH
47651: LD_INT 8
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47659: LD_VAR 0 6
47663: PPUSH
47664: CALL_OW 264
47668: PUSH
47669: LD_INT 5
47671: PUSH
47672: LD_INT 27
47674: PUSH
47675: LD_INT 44
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: IN
47683: IFFALSE 47704
// points := [ 14 , 50 , 16 ] ;
47685: LD_ADDR_VAR 0 9
47689: PUSH
47690: LD_INT 14
47692: PUSH
47693: LD_INT 50
47695: PUSH
47696: LD_INT 16
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47704: LD_VAR 0 6
47708: PPUSH
47709: CALL_OW 264
47713: PUSH
47714: LD_INT 6
47716: PUSH
47717: LD_INT 46
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: IN
47724: IFFALSE 47745
// points := [ 32 , 120 , 70 ] ;
47726: LD_ADDR_VAR 0 9
47730: PUSH
47731: LD_INT 32
47733: PUSH
47734: LD_INT 120
47736: PUSH
47737: LD_INT 70
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47745: LD_VAR 0 6
47749: PPUSH
47750: CALL_OW 264
47754: PUSH
47755: LD_INT 7
47757: PUSH
47758: LD_INT 28
47760: PUSH
47761: LD_INT 45
47763: PUSH
47764: LD_INT 92
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: IN
47773: IFFALSE 47794
// points := [ 35 , 20 , 45 ] ;
47775: LD_ADDR_VAR 0 9
47779: PUSH
47780: LD_INT 35
47782: PUSH
47783: LD_INT 20
47785: PUSH
47786: LD_INT 45
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47794: LD_VAR 0 6
47798: PPUSH
47799: CALL_OW 264
47803: PUSH
47804: LD_INT 47
47806: PUSH
47807: EMPTY
47808: LIST
47809: IN
47810: IFFALSE 47831
// points := [ 67 , 45 , 75 ] ;
47812: LD_ADDR_VAR 0 9
47816: PUSH
47817: LD_INT 67
47819: PUSH
47820: LD_INT 45
47822: PUSH
47823: LD_INT 75
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47831: LD_VAR 0 6
47835: PPUSH
47836: CALL_OW 264
47840: PUSH
47841: LD_INT 26
47843: PUSH
47844: EMPTY
47845: LIST
47846: IN
47847: IFFALSE 47868
// points := [ 120 , 30 , 80 ] ;
47849: LD_ADDR_VAR 0 9
47853: PUSH
47854: LD_INT 120
47856: PUSH
47857: LD_INT 30
47859: PUSH
47860: LD_INT 80
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47868: LD_VAR 0 6
47872: PPUSH
47873: CALL_OW 264
47877: PUSH
47878: LD_INT 22
47880: PUSH
47881: EMPTY
47882: LIST
47883: IN
47884: IFFALSE 47905
// points := [ 40 , 1 , 1 ] ;
47886: LD_ADDR_VAR 0 9
47890: PUSH
47891: LD_INT 40
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47905: LD_VAR 0 6
47909: PPUSH
47910: CALL_OW 264
47914: PUSH
47915: LD_INT 29
47917: PUSH
47918: EMPTY
47919: LIST
47920: IN
47921: IFFALSE 47942
// points := [ 70 , 200 , 400 ] ;
47923: LD_ADDR_VAR 0 9
47927: PUSH
47928: LD_INT 70
47930: PUSH
47931: LD_INT 200
47933: PUSH
47934: LD_INT 400
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47942: LD_VAR 0 6
47946: PPUSH
47947: CALL_OW 264
47951: PUSH
47952: LD_INT 14
47954: PUSH
47955: LD_INT 53
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: IN
47962: IFFALSE 47983
// points := [ 40 , 10 , 20 ] ;
47964: LD_ADDR_VAR 0 9
47968: PUSH
47969: LD_INT 40
47971: PUSH
47972: LD_INT 10
47974: PUSH
47975: LD_INT 20
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47983: LD_VAR 0 6
47987: PPUSH
47988: CALL_OW 264
47992: PUSH
47993: LD_INT 9
47995: PUSH
47996: EMPTY
47997: LIST
47998: IN
47999: IFFALSE 48020
// points := [ 5 , 70 , 20 ] ;
48001: LD_ADDR_VAR 0 9
48005: PUSH
48006: LD_INT 5
48008: PUSH
48009: LD_INT 70
48011: PUSH
48012: LD_INT 20
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48020: LD_VAR 0 6
48024: PPUSH
48025: CALL_OW 264
48029: PUSH
48030: LD_INT 10
48032: PUSH
48033: EMPTY
48034: LIST
48035: IN
48036: IFFALSE 48057
// points := [ 35 , 110 , 70 ] ;
48038: LD_ADDR_VAR 0 9
48042: PUSH
48043: LD_INT 35
48045: PUSH
48046: LD_INT 110
48048: PUSH
48049: LD_INT 70
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48057: LD_VAR 0 6
48061: PPUSH
48062: CALL_OW 265
48066: PUSH
48067: LD_INT 25
48069: EQUAL
48070: IFFALSE 48091
// points := [ 80 , 65 , 100 ] ;
48072: LD_ADDR_VAR 0 9
48076: PUSH
48077: LD_INT 80
48079: PUSH
48080: LD_INT 65
48082: PUSH
48083: LD_INT 100
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48091: LD_VAR 0 6
48095: PPUSH
48096: CALL_OW 263
48100: PUSH
48101: LD_INT 1
48103: EQUAL
48104: IFFALSE 48139
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48106: LD_ADDR_VAR 0 10
48110: PUSH
48111: LD_VAR 0 10
48115: PUSH
48116: LD_VAR 0 6
48120: PPUSH
48121: CALL_OW 311
48125: PPUSH
48126: LD_INT 3
48128: PPUSH
48129: CALL_OW 259
48133: PUSH
48134: LD_INT 4
48136: MUL
48137: MUL
48138: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48139: LD_VAR 0 6
48143: PPUSH
48144: CALL_OW 263
48148: PUSH
48149: LD_INT 2
48151: EQUAL
48152: IFFALSE 48203
// begin j := IsControledBy ( i ) ;
48154: LD_ADDR_VAR 0 7
48158: PUSH
48159: LD_VAR 0 6
48163: PPUSH
48164: CALL_OW 312
48168: ST_TO_ADDR
// if j then
48169: LD_VAR 0 7
48173: IFFALSE 48203
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48175: LD_ADDR_VAR 0 10
48179: PUSH
48180: LD_VAR 0 10
48184: PUSH
48185: LD_VAR 0 7
48189: PPUSH
48190: LD_INT 3
48192: PPUSH
48193: CALL_OW 259
48197: PUSH
48198: LD_INT 3
48200: MUL
48201: MUL
48202: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48203: LD_VAR 0 6
48207: PPUSH
48208: CALL_OW 264
48212: PUSH
48213: LD_INT 5
48215: PUSH
48216: LD_INT 6
48218: PUSH
48219: LD_INT 46
48221: PUSH
48222: LD_INT 44
48224: PUSH
48225: LD_INT 47
48227: PUSH
48228: LD_INT 45
48230: PUSH
48231: LD_INT 28
48233: PUSH
48234: LD_INT 7
48236: PUSH
48237: LD_INT 27
48239: PUSH
48240: LD_INT 29
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: IN
48255: PUSH
48256: LD_VAR 0 1
48260: PPUSH
48261: LD_INT 52
48263: PPUSH
48264: CALL_OW 321
48268: PUSH
48269: LD_INT 2
48271: EQUAL
48272: AND
48273: IFFALSE 48290
// bpoints := bpoints * 1.2 ;
48275: LD_ADDR_VAR 0 10
48279: PUSH
48280: LD_VAR 0 10
48284: PUSH
48285: LD_REAL  1.20000000000000E+0000
48288: MUL
48289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48290: LD_VAR 0 6
48294: PPUSH
48295: CALL_OW 264
48299: PUSH
48300: LD_INT 6
48302: PUSH
48303: LD_INT 46
48305: PUSH
48306: LD_INT 47
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: IN
48314: IFFALSE 48331
// bpoints := bpoints * 1.2 ;
48316: LD_ADDR_VAR 0 10
48320: PUSH
48321: LD_VAR 0 10
48325: PUSH
48326: LD_REAL  1.20000000000000E+0000
48329: MUL
48330: ST_TO_ADDR
// end ; unit_building :
48331: GO 48345
48333: LD_INT 3
48335: DOUBLE
48336: EQUAL
48337: IFTRUE 48341
48339: GO 48344
48341: POP
// ; end ;
48342: GO 48345
48344: POP
// for j = 1 to 3 do
48345: LD_ADDR_VAR 0 7
48349: PUSH
48350: DOUBLE
48351: LD_INT 1
48353: DEC
48354: ST_TO_ADDR
48355: LD_INT 3
48357: PUSH
48358: FOR_TO
48359: IFFALSE 48412
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48361: LD_ADDR_VAR 0 5
48365: PUSH
48366: LD_VAR 0 5
48370: PPUSH
48371: LD_VAR 0 7
48375: PPUSH
48376: LD_VAR 0 5
48380: PUSH
48381: LD_VAR 0 7
48385: ARRAY
48386: PUSH
48387: LD_VAR 0 9
48391: PUSH
48392: LD_VAR 0 7
48396: ARRAY
48397: PUSH
48398: LD_VAR 0 10
48402: MUL
48403: PLUS
48404: PPUSH
48405: CALL_OW 1
48409: ST_TO_ADDR
48410: GO 48358
48412: POP
48413: POP
// end ;
48414: GO 46893
48416: POP
48417: POP
// result := Replace ( result , 4 , tmp ) ;
48418: LD_ADDR_VAR 0 5
48422: PUSH
48423: LD_VAR 0 5
48427: PPUSH
48428: LD_INT 4
48430: PPUSH
48431: LD_VAR 0 8
48435: PPUSH
48436: CALL_OW 1
48440: ST_TO_ADDR
// end ;
48441: LD_VAR 0 5
48445: RET
// export function DangerAtRange ( unit , range ) ; begin
48446: LD_INT 0
48448: PPUSH
// if not unit then
48449: LD_VAR 0 1
48453: NOT
48454: IFFALSE 48458
// exit ;
48456: GO 48503
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48458: LD_ADDR_VAR 0 3
48462: PUSH
48463: LD_VAR 0 1
48467: PPUSH
48468: CALL_OW 255
48472: PPUSH
48473: LD_VAR 0 1
48477: PPUSH
48478: CALL_OW 250
48482: PPUSH
48483: LD_VAR 0 1
48487: PPUSH
48488: CALL_OW 251
48492: PPUSH
48493: LD_VAR 0 2
48497: PPUSH
48498: CALL 46745 0 4
48502: ST_TO_ADDR
// end ;
48503: LD_VAR 0 3
48507: RET
// export function DangerInArea ( side , area ) ; begin
48508: LD_INT 0
48510: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48511: LD_ADDR_VAR 0 3
48515: PUSH
48516: LD_VAR 0 2
48520: PPUSH
48521: LD_INT 81
48523: PUSH
48524: LD_VAR 0 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PPUSH
48533: CALL_OW 70
48537: ST_TO_ADDR
// end ;
48538: LD_VAR 0 3
48542: RET
// export function IsExtension ( b ) ; begin
48543: LD_INT 0
48545: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48546: LD_ADDR_VAR 0 2
48550: PUSH
48551: LD_VAR 0 1
48555: PUSH
48556: LD_INT 23
48558: PUSH
48559: LD_INT 20
48561: PUSH
48562: LD_INT 22
48564: PUSH
48565: LD_INT 17
48567: PUSH
48568: LD_INT 24
48570: PUSH
48571: LD_INT 21
48573: PUSH
48574: LD_INT 19
48576: PUSH
48577: LD_INT 16
48579: PUSH
48580: LD_INT 25
48582: PUSH
48583: LD_INT 18
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: IN
48598: ST_TO_ADDR
// end ;
48599: LD_VAR 0 2
48603: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48604: LD_INT 0
48606: PPUSH
48607: PPUSH
48608: PPUSH
// result := [ ] ;
48609: LD_ADDR_VAR 0 4
48613: PUSH
48614: EMPTY
48615: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48616: LD_ADDR_VAR 0 5
48620: PUSH
48621: LD_VAR 0 2
48625: PPUSH
48626: LD_INT 21
48628: PUSH
48629: LD_INT 3
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PPUSH
48636: CALL_OW 70
48640: ST_TO_ADDR
// if not tmp then
48641: LD_VAR 0 5
48645: NOT
48646: IFFALSE 48650
// exit ;
48648: GO 48714
// if checkLink then
48650: LD_VAR 0 3
48654: IFFALSE 48704
// begin for i in tmp do
48656: LD_ADDR_VAR 0 6
48660: PUSH
48661: LD_VAR 0 5
48665: PUSH
48666: FOR_IN
48667: IFFALSE 48702
// if GetBase ( i ) <> base then
48669: LD_VAR 0 6
48673: PPUSH
48674: CALL_OW 274
48678: PUSH
48679: LD_VAR 0 1
48683: NONEQUAL
48684: IFFALSE 48700
// ComLinkToBase ( base , i ) ;
48686: LD_VAR 0 1
48690: PPUSH
48691: LD_VAR 0 6
48695: PPUSH
48696: CALL_OW 169
48700: GO 48666
48702: POP
48703: POP
// end ; result := tmp ;
48704: LD_ADDR_VAR 0 4
48708: PUSH
48709: LD_VAR 0 5
48713: ST_TO_ADDR
// end ;
48714: LD_VAR 0 4
48718: RET
// export function ComComplete ( units , b ) ; var i ; begin
48719: LD_INT 0
48721: PPUSH
48722: PPUSH
// if not units then
48723: LD_VAR 0 1
48727: NOT
48728: IFFALSE 48732
// exit ;
48730: GO 48822
// for i in units do
48732: LD_ADDR_VAR 0 4
48736: PUSH
48737: LD_VAR 0 1
48741: PUSH
48742: FOR_IN
48743: IFFALSE 48820
// if BuildingStatus ( b ) = bs_build then
48745: LD_VAR 0 2
48749: PPUSH
48750: CALL_OW 461
48754: PUSH
48755: LD_INT 1
48757: EQUAL
48758: IFFALSE 48818
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48760: LD_VAR 0 4
48764: PPUSH
48765: LD_STRING h
48767: PUSH
48768: LD_VAR 0 2
48772: PPUSH
48773: CALL_OW 250
48777: PUSH
48778: LD_VAR 0 2
48782: PPUSH
48783: CALL_OW 251
48787: PUSH
48788: LD_VAR 0 2
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: PUSH
48811: EMPTY
48812: LIST
48813: PPUSH
48814: CALL_OW 446
48818: GO 48742
48820: POP
48821: POP
// end ;
48822: LD_VAR 0 3
48826: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48827: LD_INT 0
48829: PPUSH
48830: PPUSH
48831: PPUSH
48832: PPUSH
48833: PPUSH
48834: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48835: LD_VAR 0 1
48839: NOT
48840: PUSH
48841: LD_VAR 0 1
48845: PPUSH
48846: CALL_OW 263
48850: PUSH
48851: LD_INT 2
48853: NONEQUAL
48854: OR
48855: IFFALSE 48859
// exit ;
48857: GO 49175
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48859: LD_ADDR_VAR 0 6
48863: PUSH
48864: LD_INT 22
48866: PUSH
48867: LD_VAR 0 1
48871: PPUSH
48872: CALL_OW 255
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: LD_INT 30
48886: PUSH
48887: LD_INT 36
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 34
48896: PUSH
48897: LD_INT 31
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: LIST
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PPUSH
48913: CALL_OW 69
48917: ST_TO_ADDR
// if not tmp then
48918: LD_VAR 0 6
48922: NOT
48923: IFFALSE 48927
// exit ;
48925: GO 49175
// result := [ ] ;
48927: LD_ADDR_VAR 0 2
48931: PUSH
48932: EMPTY
48933: ST_TO_ADDR
// for i in tmp do
48934: LD_ADDR_VAR 0 3
48938: PUSH
48939: LD_VAR 0 6
48943: PUSH
48944: FOR_IN
48945: IFFALSE 49016
// begin t := UnitsInside ( i ) ;
48947: LD_ADDR_VAR 0 4
48951: PUSH
48952: LD_VAR 0 3
48956: PPUSH
48957: CALL_OW 313
48961: ST_TO_ADDR
// if t then
48962: LD_VAR 0 4
48966: IFFALSE 49014
// for j in t do
48968: LD_ADDR_VAR 0 7
48972: PUSH
48973: LD_VAR 0 4
48977: PUSH
48978: FOR_IN
48979: IFFALSE 49012
// result := Replace ( result , result + 1 , j ) ;
48981: LD_ADDR_VAR 0 2
48985: PUSH
48986: LD_VAR 0 2
48990: PPUSH
48991: LD_VAR 0 2
48995: PUSH
48996: LD_INT 1
48998: PLUS
48999: PPUSH
49000: LD_VAR 0 7
49004: PPUSH
49005: CALL_OW 1
49009: ST_TO_ADDR
49010: GO 48978
49012: POP
49013: POP
// end ;
49014: GO 48944
49016: POP
49017: POP
// if not result then
49018: LD_VAR 0 2
49022: NOT
49023: IFFALSE 49027
// exit ;
49025: GO 49175
// mech := result [ 1 ] ;
49027: LD_ADDR_VAR 0 5
49031: PUSH
49032: LD_VAR 0 2
49036: PUSH
49037: LD_INT 1
49039: ARRAY
49040: ST_TO_ADDR
// if result > 1 then
49041: LD_VAR 0 2
49045: PUSH
49046: LD_INT 1
49048: GREATER
49049: IFFALSE 49161
// begin for i = 2 to result do
49051: LD_ADDR_VAR 0 3
49055: PUSH
49056: DOUBLE
49057: LD_INT 2
49059: DEC
49060: ST_TO_ADDR
49061: LD_VAR 0 2
49065: PUSH
49066: FOR_TO
49067: IFFALSE 49159
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49069: LD_ADDR_VAR 0 4
49073: PUSH
49074: LD_VAR 0 2
49078: PUSH
49079: LD_VAR 0 3
49083: ARRAY
49084: PPUSH
49085: LD_INT 3
49087: PPUSH
49088: CALL_OW 259
49092: PUSH
49093: LD_VAR 0 2
49097: PUSH
49098: LD_VAR 0 3
49102: ARRAY
49103: PPUSH
49104: CALL_OW 432
49108: MINUS
49109: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49110: LD_VAR 0 4
49114: PUSH
49115: LD_VAR 0 5
49119: PPUSH
49120: LD_INT 3
49122: PPUSH
49123: CALL_OW 259
49127: PUSH
49128: LD_VAR 0 5
49132: PPUSH
49133: CALL_OW 432
49137: MINUS
49138: GREATEREQUAL
49139: IFFALSE 49157
// mech := result [ i ] ;
49141: LD_ADDR_VAR 0 5
49145: PUSH
49146: LD_VAR 0 2
49150: PUSH
49151: LD_VAR 0 3
49155: ARRAY
49156: ST_TO_ADDR
// end ;
49157: GO 49066
49159: POP
49160: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49161: LD_VAR 0 1
49165: PPUSH
49166: LD_VAR 0 5
49170: PPUSH
49171: CALL_OW 135
// end ;
49175: LD_VAR 0 2
49179: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49180: LD_INT 0
49182: PPUSH
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
49188: PPUSH
49189: PPUSH
49190: PPUSH
49191: PPUSH
49192: PPUSH
49193: PPUSH
49194: PPUSH
// result := [ ] ;
49195: LD_ADDR_VAR 0 7
49199: PUSH
49200: EMPTY
49201: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49202: LD_VAR 0 1
49206: PPUSH
49207: CALL_OW 266
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: IN
49222: NOT
49223: IFFALSE 49227
// exit ;
49225: GO 50861
// if name then
49227: LD_VAR 0 3
49231: IFFALSE 49247
// SetBName ( base_dep , name ) ;
49233: LD_VAR 0 1
49237: PPUSH
49238: LD_VAR 0 3
49242: PPUSH
49243: CALL_OW 500
// base := GetBase ( base_dep ) ;
49247: LD_ADDR_VAR 0 15
49251: PUSH
49252: LD_VAR 0 1
49256: PPUSH
49257: CALL_OW 274
49261: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49262: LD_ADDR_VAR 0 16
49266: PUSH
49267: LD_VAR 0 1
49271: PPUSH
49272: CALL_OW 255
49276: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49277: LD_ADDR_VAR 0 17
49281: PUSH
49282: LD_VAR 0 1
49286: PPUSH
49287: CALL_OW 248
49291: ST_TO_ADDR
// if sources then
49292: LD_VAR 0 5
49296: IFFALSE 49343
// for i = 1 to 3 do
49298: LD_ADDR_VAR 0 8
49302: PUSH
49303: DOUBLE
49304: LD_INT 1
49306: DEC
49307: ST_TO_ADDR
49308: LD_INT 3
49310: PUSH
49311: FOR_TO
49312: IFFALSE 49341
// AddResourceType ( base , i , sources [ i ] ) ;
49314: LD_VAR 0 15
49318: PPUSH
49319: LD_VAR 0 8
49323: PPUSH
49324: LD_VAR 0 5
49328: PUSH
49329: LD_VAR 0 8
49333: ARRAY
49334: PPUSH
49335: CALL_OW 276
49339: GO 49311
49341: POP
49342: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49343: LD_ADDR_VAR 0 18
49347: PUSH
49348: LD_VAR 0 15
49352: PPUSH
49353: LD_VAR 0 2
49357: PPUSH
49358: LD_INT 1
49360: PPUSH
49361: CALL 48604 0 3
49365: ST_TO_ADDR
// InitHc ;
49366: CALL_OW 19
// InitUc ;
49370: CALL_OW 18
// uc_side := side ;
49374: LD_ADDR_OWVAR 20
49378: PUSH
49379: LD_VAR 0 16
49383: ST_TO_ADDR
// uc_nation := nation ;
49384: LD_ADDR_OWVAR 21
49388: PUSH
49389: LD_VAR 0 17
49393: ST_TO_ADDR
// if buildings then
49394: LD_VAR 0 18
49398: IFFALSE 50720
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49400: LD_ADDR_VAR 0 19
49404: PUSH
49405: LD_VAR 0 18
49409: PPUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 30
49415: PUSH
49416: LD_INT 29
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 30
49425: PUSH
49426: LD_INT 30
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: LIST
49437: PPUSH
49438: CALL_OW 72
49442: ST_TO_ADDR
// if tmp then
49443: LD_VAR 0 19
49447: IFFALSE 49495
// for i in tmp do
49449: LD_ADDR_VAR 0 8
49453: PUSH
49454: LD_VAR 0 19
49458: PUSH
49459: FOR_IN
49460: IFFALSE 49493
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49462: LD_VAR 0 8
49466: PPUSH
49467: CALL_OW 250
49471: PPUSH
49472: LD_VAR 0 8
49476: PPUSH
49477: CALL_OW 251
49481: PPUSH
49482: LD_VAR 0 16
49486: PPUSH
49487: CALL_OW 441
49491: GO 49459
49493: POP
49494: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49495: LD_VAR 0 18
49499: PPUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 30
49505: PUSH
49506: LD_INT 32
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 30
49515: PUSH
49516: LD_INT 33
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: PPUSH
49528: CALL_OW 72
49532: IFFALSE 49620
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49534: LD_ADDR_VAR 0 8
49538: PUSH
49539: LD_VAR 0 18
49543: PPUSH
49544: LD_INT 2
49546: PUSH
49547: LD_INT 30
49549: PUSH
49550: LD_INT 32
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 30
49559: PUSH
49560: LD_INT 33
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: PPUSH
49572: CALL_OW 72
49576: PUSH
49577: FOR_IN
49578: IFFALSE 49618
// begin if not GetBWeapon ( i ) then
49580: LD_VAR 0 8
49584: PPUSH
49585: CALL_OW 269
49589: NOT
49590: IFFALSE 49616
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49592: LD_VAR 0 8
49596: PPUSH
49597: LD_VAR 0 8
49601: PPUSH
49602: LD_VAR 0 2
49606: PPUSH
49607: CALL 50866 0 2
49611: PPUSH
49612: CALL_OW 431
// end ;
49616: GO 49577
49618: POP
49619: POP
// end ; for i = 1 to personel do
49620: LD_ADDR_VAR 0 8
49624: PUSH
49625: DOUBLE
49626: LD_INT 1
49628: DEC
49629: ST_TO_ADDR
49630: LD_VAR 0 6
49634: PUSH
49635: FOR_TO
49636: IFFALSE 50700
// begin if i > 4 then
49638: LD_VAR 0 8
49642: PUSH
49643: LD_INT 4
49645: GREATER
49646: IFFALSE 49650
// break ;
49648: GO 50700
// case i of 1 :
49650: LD_VAR 0 8
49654: PUSH
49655: LD_INT 1
49657: DOUBLE
49658: EQUAL
49659: IFTRUE 49663
49661: GO 49743
49663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49664: LD_ADDR_VAR 0 12
49668: PUSH
49669: LD_VAR 0 18
49673: PPUSH
49674: LD_INT 22
49676: PUSH
49677: LD_VAR 0 16
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 58
49688: PUSH
49689: EMPTY
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 30
49697: PUSH
49698: LD_INT 32
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 30
49707: PUSH
49708: LD_INT 4
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 30
49717: PUSH
49718: LD_INT 5
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: LIST
49735: PPUSH
49736: CALL_OW 72
49740: ST_TO_ADDR
49741: GO 49965
49743: LD_INT 2
49745: DOUBLE
49746: EQUAL
49747: IFTRUE 49751
49749: GO 49813
49751: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49752: LD_ADDR_VAR 0 12
49756: PUSH
49757: LD_VAR 0 18
49761: PPUSH
49762: LD_INT 22
49764: PUSH
49765: LD_VAR 0 16
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 30
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 30
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PPUSH
49806: CALL_OW 72
49810: ST_TO_ADDR
49811: GO 49965
49813: LD_INT 3
49815: DOUBLE
49816: EQUAL
49817: IFTRUE 49821
49819: GO 49883
49821: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49822: LD_ADDR_VAR 0 12
49826: PUSH
49827: LD_VAR 0 18
49831: PPUSH
49832: LD_INT 22
49834: PUSH
49835: LD_VAR 0 16
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: LD_INT 30
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 30
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PPUSH
49876: CALL_OW 72
49880: ST_TO_ADDR
49881: GO 49965
49883: LD_INT 4
49885: DOUBLE
49886: EQUAL
49887: IFTRUE 49891
49889: GO 49964
49891: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49892: LD_ADDR_VAR 0 12
49896: PUSH
49897: LD_VAR 0 18
49901: PPUSH
49902: LD_INT 22
49904: PUSH
49905: LD_VAR 0 16
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 30
49919: PUSH
49920: LD_INT 6
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 30
49929: PUSH
49930: LD_INT 7
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 30
49939: PUSH
49940: LD_INT 8
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PPUSH
49957: CALL_OW 72
49961: ST_TO_ADDR
49962: GO 49965
49964: POP
// if i = 1 then
49965: LD_VAR 0 8
49969: PUSH
49970: LD_INT 1
49972: EQUAL
49973: IFFALSE 50084
// begin tmp := [ ] ;
49975: LD_ADDR_VAR 0 19
49979: PUSH
49980: EMPTY
49981: ST_TO_ADDR
// for j in f do
49982: LD_ADDR_VAR 0 9
49986: PUSH
49987: LD_VAR 0 12
49991: PUSH
49992: FOR_IN
49993: IFFALSE 50066
// if GetBType ( j ) = b_bunker then
49995: LD_VAR 0 9
49999: PPUSH
50000: CALL_OW 266
50004: PUSH
50005: LD_INT 32
50007: EQUAL
50008: IFFALSE 50035
// tmp := Insert ( tmp , 1 , j ) else
50010: LD_ADDR_VAR 0 19
50014: PUSH
50015: LD_VAR 0 19
50019: PPUSH
50020: LD_INT 1
50022: PPUSH
50023: LD_VAR 0 9
50027: PPUSH
50028: CALL_OW 2
50032: ST_TO_ADDR
50033: GO 50064
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50035: LD_ADDR_VAR 0 19
50039: PUSH
50040: LD_VAR 0 19
50044: PPUSH
50045: LD_VAR 0 19
50049: PUSH
50050: LD_INT 1
50052: PLUS
50053: PPUSH
50054: LD_VAR 0 9
50058: PPUSH
50059: CALL_OW 2
50063: ST_TO_ADDR
50064: GO 49992
50066: POP
50067: POP
// if tmp then
50068: LD_VAR 0 19
50072: IFFALSE 50084
// f := tmp ;
50074: LD_ADDR_VAR 0 12
50078: PUSH
50079: LD_VAR 0 19
50083: ST_TO_ADDR
// end ; x := personel [ i ] ;
50084: LD_ADDR_VAR 0 13
50088: PUSH
50089: LD_VAR 0 6
50093: PUSH
50094: LD_VAR 0 8
50098: ARRAY
50099: ST_TO_ADDR
// if x = - 1 then
50100: LD_VAR 0 13
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: EQUAL
50109: IFFALSE 50318
// begin for j in f do
50111: LD_ADDR_VAR 0 9
50115: PUSH
50116: LD_VAR 0 12
50120: PUSH
50121: FOR_IN
50122: IFFALSE 50314
// repeat InitHc ;
50124: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50128: LD_VAR 0 9
50132: PPUSH
50133: CALL_OW 266
50137: PUSH
50138: LD_INT 5
50140: EQUAL
50141: IFFALSE 50211
// begin if UnitsInside ( j ) < 3 then
50143: LD_VAR 0 9
50147: PPUSH
50148: CALL_OW 313
50152: PUSH
50153: LD_INT 3
50155: LESS
50156: IFFALSE 50192
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50158: LD_INT 0
50160: PPUSH
50161: LD_INT 5
50163: PUSH
50164: LD_INT 8
50166: PUSH
50167: LD_INT 9
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: PUSH
50175: LD_VAR 0 17
50179: ARRAY
50180: PPUSH
50181: LD_VAR 0 4
50185: PPUSH
50186: CALL_OW 380
50190: GO 50209
// PrepareHuman ( false , i , skill ) ;
50192: LD_INT 0
50194: PPUSH
50195: LD_VAR 0 8
50199: PPUSH
50200: LD_VAR 0 4
50204: PPUSH
50205: CALL_OW 380
// end else
50209: GO 50228
// PrepareHuman ( false , i , skill ) ;
50211: LD_INT 0
50213: PPUSH
50214: LD_VAR 0 8
50218: PPUSH
50219: LD_VAR 0 4
50223: PPUSH
50224: CALL_OW 380
// un := CreateHuman ;
50228: LD_ADDR_VAR 0 14
50232: PUSH
50233: CALL_OW 44
50237: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50238: LD_ADDR_VAR 0 7
50242: PUSH
50243: LD_VAR 0 7
50247: PPUSH
50248: LD_INT 1
50250: PPUSH
50251: LD_VAR 0 14
50255: PPUSH
50256: CALL_OW 2
50260: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50261: LD_VAR 0 14
50265: PPUSH
50266: LD_VAR 0 9
50270: PPUSH
50271: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50275: LD_VAR 0 9
50279: PPUSH
50280: CALL_OW 313
50284: PUSH
50285: LD_INT 6
50287: EQUAL
50288: PUSH
50289: LD_VAR 0 9
50293: PPUSH
50294: CALL_OW 266
50298: PUSH
50299: LD_INT 32
50301: PUSH
50302: LD_INT 31
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: IN
50309: OR
50310: IFFALSE 50124
50312: GO 50121
50314: POP
50315: POP
// end else
50316: GO 50698
// for j = 1 to x do
50318: LD_ADDR_VAR 0 9
50322: PUSH
50323: DOUBLE
50324: LD_INT 1
50326: DEC
50327: ST_TO_ADDR
50328: LD_VAR 0 13
50332: PUSH
50333: FOR_TO
50334: IFFALSE 50696
// begin InitHc ;
50336: CALL_OW 19
// if not f then
50340: LD_VAR 0 12
50344: NOT
50345: IFFALSE 50434
// begin PrepareHuman ( false , i , skill ) ;
50347: LD_INT 0
50349: PPUSH
50350: LD_VAR 0 8
50354: PPUSH
50355: LD_VAR 0 4
50359: PPUSH
50360: CALL_OW 380
// un := CreateHuman ;
50364: LD_ADDR_VAR 0 14
50368: PUSH
50369: CALL_OW 44
50373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50374: LD_ADDR_VAR 0 7
50378: PUSH
50379: LD_VAR 0 7
50383: PPUSH
50384: LD_INT 1
50386: PPUSH
50387: LD_VAR 0 14
50391: PPUSH
50392: CALL_OW 2
50396: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50397: LD_VAR 0 14
50401: PPUSH
50402: LD_VAR 0 1
50406: PPUSH
50407: CALL_OW 250
50411: PPUSH
50412: LD_VAR 0 1
50416: PPUSH
50417: CALL_OW 251
50421: PPUSH
50422: LD_INT 10
50424: PPUSH
50425: LD_INT 0
50427: PPUSH
50428: CALL_OW 50
// continue ;
50432: GO 50333
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50434: LD_VAR 0 12
50438: PUSH
50439: LD_INT 1
50441: ARRAY
50442: PPUSH
50443: CALL_OW 313
50447: PUSH
50448: LD_VAR 0 12
50452: PUSH
50453: LD_INT 1
50455: ARRAY
50456: PPUSH
50457: CALL_OW 266
50461: PUSH
50462: LD_INT 32
50464: PUSH
50465: LD_INT 31
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: IN
50472: AND
50473: PUSH
50474: LD_VAR 0 12
50478: PUSH
50479: LD_INT 1
50481: ARRAY
50482: PPUSH
50483: CALL_OW 313
50487: PUSH
50488: LD_INT 6
50490: EQUAL
50491: OR
50492: IFFALSE 50512
// f := Delete ( f , 1 ) ;
50494: LD_ADDR_VAR 0 12
50498: PUSH
50499: LD_VAR 0 12
50503: PPUSH
50504: LD_INT 1
50506: PPUSH
50507: CALL_OW 3
50511: ST_TO_ADDR
// if not f then
50512: LD_VAR 0 12
50516: NOT
50517: IFFALSE 50535
// begin x := x + 2 ;
50519: LD_ADDR_VAR 0 13
50523: PUSH
50524: LD_VAR 0 13
50528: PUSH
50529: LD_INT 2
50531: PLUS
50532: ST_TO_ADDR
// continue ;
50533: GO 50333
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50535: LD_VAR 0 12
50539: PUSH
50540: LD_INT 1
50542: ARRAY
50543: PPUSH
50544: CALL_OW 266
50548: PUSH
50549: LD_INT 5
50551: EQUAL
50552: IFFALSE 50626
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50554: LD_VAR 0 12
50558: PUSH
50559: LD_INT 1
50561: ARRAY
50562: PPUSH
50563: CALL_OW 313
50567: PUSH
50568: LD_INT 3
50570: LESS
50571: IFFALSE 50607
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50573: LD_INT 0
50575: PPUSH
50576: LD_INT 5
50578: PUSH
50579: LD_INT 8
50581: PUSH
50582: LD_INT 9
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: PUSH
50590: LD_VAR 0 17
50594: ARRAY
50595: PPUSH
50596: LD_VAR 0 4
50600: PPUSH
50601: CALL_OW 380
50605: GO 50624
// PrepareHuman ( false , i , skill ) ;
50607: LD_INT 0
50609: PPUSH
50610: LD_VAR 0 8
50614: PPUSH
50615: LD_VAR 0 4
50619: PPUSH
50620: CALL_OW 380
// end else
50624: GO 50643
// PrepareHuman ( false , i , skill ) ;
50626: LD_INT 0
50628: PPUSH
50629: LD_VAR 0 8
50633: PPUSH
50634: LD_VAR 0 4
50638: PPUSH
50639: CALL_OW 380
// un := CreateHuman ;
50643: LD_ADDR_VAR 0 14
50647: PUSH
50648: CALL_OW 44
50652: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50653: LD_ADDR_VAR 0 7
50657: PUSH
50658: LD_VAR 0 7
50662: PPUSH
50663: LD_INT 1
50665: PPUSH
50666: LD_VAR 0 14
50670: PPUSH
50671: CALL_OW 2
50675: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50676: LD_VAR 0 14
50680: PPUSH
50681: LD_VAR 0 12
50685: PUSH
50686: LD_INT 1
50688: ARRAY
50689: PPUSH
50690: CALL_OW 52
// end ;
50694: GO 50333
50696: POP
50697: POP
// end ;
50698: GO 49635
50700: POP
50701: POP
// result := result ^ buildings ;
50702: LD_ADDR_VAR 0 7
50706: PUSH
50707: LD_VAR 0 7
50711: PUSH
50712: LD_VAR 0 18
50716: ADD
50717: ST_TO_ADDR
// end else
50718: GO 50861
// begin for i = 1 to personel do
50720: LD_ADDR_VAR 0 8
50724: PUSH
50725: DOUBLE
50726: LD_INT 1
50728: DEC
50729: ST_TO_ADDR
50730: LD_VAR 0 6
50734: PUSH
50735: FOR_TO
50736: IFFALSE 50859
// begin if i > 4 then
50738: LD_VAR 0 8
50742: PUSH
50743: LD_INT 4
50745: GREATER
50746: IFFALSE 50750
// break ;
50748: GO 50859
// x := personel [ i ] ;
50750: LD_ADDR_VAR 0 13
50754: PUSH
50755: LD_VAR 0 6
50759: PUSH
50760: LD_VAR 0 8
50764: ARRAY
50765: ST_TO_ADDR
// if x = - 1 then
50766: LD_VAR 0 13
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: EQUAL
50775: IFFALSE 50779
// continue ;
50777: GO 50735
// PrepareHuman ( false , i , skill ) ;
50779: LD_INT 0
50781: PPUSH
50782: LD_VAR 0 8
50786: PPUSH
50787: LD_VAR 0 4
50791: PPUSH
50792: CALL_OW 380
// un := CreateHuman ;
50796: LD_ADDR_VAR 0 14
50800: PUSH
50801: CALL_OW 44
50805: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50806: LD_VAR 0 14
50810: PPUSH
50811: LD_VAR 0 1
50815: PPUSH
50816: CALL_OW 250
50820: PPUSH
50821: LD_VAR 0 1
50825: PPUSH
50826: CALL_OW 251
50830: PPUSH
50831: LD_INT 10
50833: PPUSH
50834: LD_INT 0
50836: PPUSH
50837: CALL_OW 50
// result := result ^ un ;
50841: LD_ADDR_VAR 0 7
50845: PUSH
50846: LD_VAR 0 7
50850: PUSH
50851: LD_VAR 0 14
50855: ADD
50856: ST_TO_ADDR
// end ;
50857: GO 50735
50859: POP
50860: POP
// end ; end ;
50861: LD_VAR 0 7
50865: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50866: LD_INT 0
50868: PPUSH
50869: PPUSH
50870: PPUSH
50871: PPUSH
50872: PPUSH
50873: PPUSH
50874: PPUSH
50875: PPUSH
50876: PPUSH
50877: PPUSH
50878: PPUSH
50879: PPUSH
50880: PPUSH
50881: PPUSH
50882: PPUSH
50883: PPUSH
// result := false ;
50884: LD_ADDR_VAR 0 3
50888: PUSH
50889: LD_INT 0
50891: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50892: LD_VAR 0 1
50896: NOT
50897: PUSH
50898: LD_VAR 0 1
50902: PPUSH
50903: CALL_OW 266
50907: PUSH
50908: LD_INT 32
50910: PUSH
50911: LD_INT 33
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: IN
50918: NOT
50919: OR
50920: IFFALSE 50924
// exit ;
50922: GO 52033
// nat := GetNation ( tower ) ;
50924: LD_ADDR_VAR 0 12
50928: PUSH
50929: LD_VAR 0 1
50933: PPUSH
50934: CALL_OW 248
50938: ST_TO_ADDR
// side := GetSide ( tower ) ;
50939: LD_ADDR_VAR 0 16
50943: PUSH
50944: LD_VAR 0 1
50948: PPUSH
50949: CALL_OW 255
50953: ST_TO_ADDR
// x := GetX ( tower ) ;
50954: LD_ADDR_VAR 0 10
50958: PUSH
50959: LD_VAR 0 1
50963: PPUSH
50964: CALL_OW 250
50968: ST_TO_ADDR
// y := GetY ( tower ) ;
50969: LD_ADDR_VAR 0 11
50973: PUSH
50974: LD_VAR 0 1
50978: PPUSH
50979: CALL_OW 251
50983: ST_TO_ADDR
// if not x or not y then
50984: LD_VAR 0 10
50988: NOT
50989: PUSH
50990: LD_VAR 0 11
50994: NOT
50995: OR
50996: IFFALSE 51000
// exit ;
50998: GO 52033
// weapon := 0 ;
51000: LD_ADDR_VAR 0 18
51004: PUSH
51005: LD_INT 0
51007: ST_TO_ADDR
// fac_list := [ ] ;
51008: LD_ADDR_VAR 0 17
51012: PUSH
51013: EMPTY
51014: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51015: LD_ADDR_VAR 0 6
51019: PUSH
51020: LD_VAR 0 1
51024: PPUSH
51025: CALL_OW 274
51029: PPUSH
51030: LD_VAR 0 2
51034: PPUSH
51035: LD_INT 0
51037: PPUSH
51038: CALL 48604 0 3
51042: PPUSH
51043: LD_INT 30
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PPUSH
51053: CALL_OW 72
51057: ST_TO_ADDR
// if not factories then
51058: LD_VAR 0 6
51062: NOT
51063: IFFALSE 51067
// exit ;
51065: GO 52033
// for i in factories do
51067: LD_ADDR_VAR 0 8
51071: PUSH
51072: LD_VAR 0 6
51076: PUSH
51077: FOR_IN
51078: IFFALSE 51103
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51080: LD_ADDR_VAR 0 17
51084: PUSH
51085: LD_VAR 0 17
51089: PUSH
51090: LD_VAR 0 8
51094: PPUSH
51095: CALL_OW 478
51099: UNION
51100: ST_TO_ADDR
51101: GO 51077
51103: POP
51104: POP
// if not fac_list then
51105: LD_VAR 0 17
51109: NOT
51110: IFFALSE 51114
// exit ;
51112: GO 52033
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51114: LD_ADDR_VAR 0 5
51118: PUSH
51119: LD_INT 4
51121: PUSH
51122: LD_INT 5
51124: PUSH
51125: LD_INT 9
51127: PUSH
51128: LD_INT 10
51130: PUSH
51131: LD_INT 6
51133: PUSH
51134: LD_INT 7
51136: PUSH
51137: LD_INT 11
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 27
51151: PUSH
51152: LD_INT 28
51154: PUSH
51155: LD_INT 26
51157: PUSH
51158: LD_INT 30
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 43
51169: PUSH
51170: LD_INT 44
51172: PUSH
51173: LD_INT 46
51175: PUSH
51176: LD_INT 45
51178: PUSH
51179: LD_INT 47
51181: PUSH
51182: LD_INT 49
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: PUSH
51198: LD_VAR 0 12
51202: ARRAY
51203: ST_TO_ADDR
// list := list isect fac_list ;
51204: LD_ADDR_VAR 0 5
51208: PUSH
51209: LD_VAR 0 5
51213: PUSH
51214: LD_VAR 0 17
51218: ISECT
51219: ST_TO_ADDR
// if not list then
51220: LD_VAR 0 5
51224: NOT
51225: IFFALSE 51229
// exit ;
51227: GO 52033
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51229: LD_VAR 0 12
51233: PUSH
51234: LD_INT 3
51236: EQUAL
51237: PUSH
51238: LD_INT 49
51240: PUSH
51241: LD_VAR 0 5
51245: IN
51246: AND
51247: PUSH
51248: LD_INT 31
51250: PPUSH
51251: LD_VAR 0 16
51255: PPUSH
51256: CALL_OW 321
51260: PUSH
51261: LD_INT 2
51263: EQUAL
51264: AND
51265: IFFALSE 51325
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51267: LD_INT 22
51269: PUSH
51270: LD_VAR 0 16
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 35
51281: PUSH
51282: LD_INT 49
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 91
51291: PUSH
51292: LD_VAR 0 1
51296: PUSH
51297: LD_INT 10
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: PPUSH
51310: CALL_OW 69
51314: NOT
51315: IFFALSE 51325
// weapon := ru_time_lapser ;
51317: LD_ADDR_VAR 0 18
51321: PUSH
51322: LD_INT 49
51324: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51325: LD_VAR 0 12
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: IN
51340: PUSH
51341: LD_INT 11
51343: PUSH
51344: LD_VAR 0 5
51348: IN
51349: PUSH
51350: LD_INT 30
51352: PUSH
51353: LD_VAR 0 5
51357: IN
51358: OR
51359: AND
51360: PUSH
51361: LD_INT 6
51363: PPUSH
51364: LD_VAR 0 16
51368: PPUSH
51369: CALL_OW 321
51373: PUSH
51374: LD_INT 2
51376: EQUAL
51377: AND
51378: IFFALSE 51543
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51380: LD_INT 22
51382: PUSH
51383: LD_VAR 0 16
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 35
51397: PUSH
51398: LD_INT 11
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 35
51407: PUSH
51408: LD_INT 30
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 91
51422: PUSH
51423: LD_VAR 0 1
51427: PUSH
51428: LD_INT 18
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: PPUSH
51441: CALL_OW 69
51445: NOT
51446: PUSH
51447: LD_INT 22
51449: PUSH
51450: LD_VAR 0 16
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: LD_INT 30
51464: PUSH
51465: LD_INT 32
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 30
51474: PUSH
51475: LD_INT 33
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 91
51489: PUSH
51490: LD_VAR 0 1
51494: PUSH
51495: LD_INT 12
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: PPUSH
51511: CALL_OW 69
51515: PUSH
51516: LD_INT 2
51518: GREATER
51519: AND
51520: IFFALSE 51543
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51522: LD_ADDR_VAR 0 18
51526: PUSH
51527: LD_INT 11
51529: PUSH
51530: LD_INT 30
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_VAR 0 12
51541: ARRAY
51542: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51543: LD_VAR 0 18
51547: NOT
51548: PUSH
51549: LD_INT 40
51551: PPUSH
51552: LD_VAR 0 16
51556: PPUSH
51557: CALL_OW 321
51561: PUSH
51562: LD_INT 2
51564: EQUAL
51565: AND
51566: PUSH
51567: LD_INT 7
51569: PUSH
51570: LD_VAR 0 5
51574: IN
51575: PUSH
51576: LD_INT 28
51578: PUSH
51579: LD_VAR 0 5
51583: IN
51584: OR
51585: PUSH
51586: LD_INT 45
51588: PUSH
51589: LD_VAR 0 5
51593: IN
51594: OR
51595: AND
51596: IFFALSE 51850
// begin hex := GetHexInfo ( x , y ) ;
51598: LD_ADDR_VAR 0 4
51602: PUSH
51603: LD_VAR 0 10
51607: PPUSH
51608: LD_VAR 0 11
51612: PPUSH
51613: CALL_OW 546
51617: ST_TO_ADDR
// if hex [ 1 ] then
51618: LD_VAR 0 4
51622: PUSH
51623: LD_INT 1
51625: ARRAY
51626: IFFALSE 51630
// exit ;
51628: GO 52033
// height := hex [ 2 ] ;
51630: LD_ADDR_VAR 0 15
51634: PUSH
51635: LD_VAR 0 4
51639: PUSH
51640: LD_INT 2
51642: ARRAY
51643: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51644: LD_ADDR_VAR 0 14
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: LD_INT 5
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: ST_TO_ADDR
// for i in tmp do
51667: LD_ADDR_VAR 0 8
51671: PUSH
51672: LD_VAR 0 14
51676: PUSH
51677: FOR_IN
51678: IFFALSE 51848
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51680: LD_ADDR_VAR 0 9
51684: PUSH
51685: LD_VAR 0 10
51689: PPUSH
51690: LD_VAR 0 8
51694: PPUSH
51695: LD_INT 5
51697: PPUSH
51698: CALL_OW 272
51702: PUSH
51703: LD_VAR 0 11
51707: PPUSH
51708: LD_VAR 0 8
51712: PPUSH
51713: LD_INT 5
51715: PPUSH
51716: CALL_OW 273
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51725: LD_VAR 0 9
51729: PUSH
51730: LD_INT 1
51732: ARRAY
51733: PPUSH
51734: LD_VAR 0 9
51738: PUSH
51739: LD_INT 2
51741: ARRAY
51742: PPUSH
51743: CALL_OW 488
51747: IFFALSE 51846
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51749: LD_ADDR_VAR 0 4
51753: PUSH
51754: LD_VAR 0 9
51758: PUSH
51759: LD_INT 1
51761: ARRAY
51762: PPUSH
51763: LD_VAR 0 9
51767: PUSH
51768: LD_INT 2
51770: ARRAY
51771: PPUSH
51772: CALL_OW 546
51776: ST_TO_ADDR
// if hex [ 1 ] then
51777: LD_VAR 0 4
51781: PUSH
51782: LD_INT 1
51784: ARRAY
51785: IFFALSE 51789
// continue ;
51787: GO 51677
// h := hex [ 2 ] ;
51789: LD_ADDR_VAR 0 13
51793: PUSH
51794: LD_VAR 0 4
51798: PUSH
51799: LD_INT 2
51801: ARRAY
51802: ST_TO_ADDR
// if h + 7 < height then
51803: LD_VAR 0 13
51807: PUSH
51808: LD_INT 7
51810: PLUS
51811: PUSH
51812: LD_VAR 0 15
51816: LESS
51817: IFFALSE 51846
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51819: LD_ADDR_VAR 0 18
51823: PUSH
51824: LD_INT 7
51826: PUSH
51827: LD_INT 28
51829: PUSH
51830: LD_INT 45
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: PUSH
51838: LD_VAR 0 12
51842: ARRAY
51843: ST_TO_ADDR
// break ;
51844: GO 51848
// end ; end ; end ;
51846: GO 51677
51848: POP
51849: POP
// end ; if not weapon then
51850: LD_VAR 0 18
51854: NOT
51855: IFFALSE 51915
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51857: LD_ADDR_VAR 0 5
51861: PUSH
51862: LD_VAR 0 5
51866: PUSH
51867: LD_INT 11
51869: PUSH
51870: LD_INT 30
51872: PUSH
51873: LD_INT 49
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: DIFF
51881: ST_TO_ADDR
// if not list then
51882: LD_VAR 0 5
51886: NOT
51887: IFFALSE 51891
// exit ;
51889: GO 52033
// weapon := list [ rand ( 1 , list ) ] ;
51891: LD_ADDR_VAR 0 18
51895: PUSH
51896: LD_VAR 0 5
51900: PUSH
51901: LD_INT 1
51903: PPUSH
51904: LD_VAR 0 5
51908: PPUSH
51909: CALL_OW 12
51913: ARRAY
51914: ST_TO_ADDR
// end ; if weapon then
51915: LD_VAR 0 18
51919: IFFALSE 52033
// begin tmp := CostOfWeapon ( weapon ) ;
51921: LD_ADDR_VAR 0 14
51925: PUSH
51926: LD_VAR 0 18
51930: PPUSH
51931: CALL_OW 451
51935: ST_TO_ADDR
// j := GetBase ( tower ) ;
51936: LD_ADDR_VAR 0 9
51940: PUSH
51941: LD_VAR 0 1
51945: PPUSH
51946: CALL_OW 274
51950: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51951: LD_VAR 0 9
51955: PPUSH
51956: LD_INT 1
51958: PPUSH
51959: CALL_OW 275
51963: PUSH
51964: LD_VAR 0 14
51968: PUSH
51969: LD_INT 1
51971: ARRAY
51972: GREATEREQUAL
51973: PUSH
51974: LD_VAR 0 9
51978: PPUSH
51979: LD_INT 2
51981: PPUSH
51982: CALL_OW 275
51986: PUSH
51987: LD_VAR 0 14
51991: PUSH
51992: LD_INT 2
51994: ARRAY
51995: GREATEREQUAL
51996: AND
51997: PUSH
51998: LD_VAR 0 9
52002: PPUSH
52003: LD_INT 3
52005: PPUSH
52006: CALL_OW 275
52010: PUSH
52011: LD_VAR 0 14
52015: PUSH
52016: LD_INT 3
52018: ARRAY
52019: GREATEREQUAL
52020: AND
52021: IFFALSE 52033
// result := weapon ;
52023: LD_ADDR_VAR 0 3
52027: PUSH
52028: LD_VAR 0 18
52032: ST_TO_ADDR
// end ; end ;
52033: LD_VAR 0 3
52037: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52038: LD_INT 0
52040: PPUSH
52041: PPUSH
// result := true ;
52042: LD_ADDR_VAR 0 3
52046: PUSH
52047: LD_INT 1
52049: ST_TO_ADDR
// if array1 = array2 then
52050: LD_VAR 0 1
52054: PUSH
52055: LD_VAR 0 2
52059: EQUAL
52060: IFFALSE 52120
// begin for i = 1 to array1 do
52062: LD_ADDR_VAR 0 4
52066: PUSH
52067: DOUBLE
52068: LD_INT 1
52070: DEC
52071: ST_TO_ADDR
52072: LD_VAR 0 1
52076: PUSH
52077: FOR_TO
52078: IFFALSE 52116
// if array1 [ i ] <> array2 [ i ] then
52080: LD_VAR 0 1
52084: PUSH
52085: LD_VAR 0 4
52089: ARRAY
52090: PUSH
52091: LD_VAR 0 2
52095: PUSH
52096: LD_VAR 0 4
52100: ARRAY
52101: NONEQUAL
52102: IFFALSE 52114
// begin result := false ;
52104: LD_ADDR_VAR 0 3
52108: PUSH
52109: LD_INT 0
52111: ST_TO_ADDR
// break ;
52112: GO 52116
// end ;
52114: GO 52077
52116: POP
52117: POP
// end else
52118: GO 52128
// result := false ;
52120: LD_ADDR_VAR 0 3
52124: PUSH
52125: LD_INT 0
52127: ST_TO_ADDR
// end ;
52128: LD_VAR 0 3
52132: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52133: LD_INT 0
52135: PPUSH
52136: PPUSH
// if not array1 or not array2 then
52137: LD_VAR 0 1
52141: NOT
52142: PUSH
52143: LD_VAR 0 2
52147: NOT
52148: OR
52149: IFFALSE 52153
// exit ;
52151: GO 52217
// result := true ;
52153: LD_ADDR_VAR 0 3
52157: PUSH
52158: LD_INT 1
52160: ST_TO_ADDR
// for i = 1 to array1 do
52161: LD_ADDR_VAR 0 4
52165: PUSH
52166: DOUBLE
52167: LD_INT 1
52169: DEC
52170: ST_TO_ADDR
52171: LD_VAR 0 1
52175: PUSH
52176: FOR_TO
52177: IFFALSE 52215
// if array1 [ i ] <> array2 [ i ] then
52179: LD_VAR 0 1
52183: PUSH
52184: LD_VAR 0 4
52188: ARRAY
52189: PUSH
52190: LD_VAR 0 2
52194: PUSH
52195: LD_VAR 0 4
52199: ARRAY
52200: NONEQUAL
52201: IFFALSE 52213
// begin result := false ;
52203: LD_ADDR_VAR 0 3
52207: PUSH
52208: LD_INT 0
52210: ST_TO_ADDR
// break ;
52211: GO 52215
// end ;
52213: GO 52176
52215: POP
52216: POP
// end ;
52217: LD_VAR 0 3
52221: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52222: LD_INT 0
52224: PPUSH
52225: PPUSH
52226: PPUSH
// pom := GetBase ( fac ) ;
52227: LD_ADDR_VAR 0 5
52231: PUSH
52232: LD_VAR 0 1
52236: PPUSH
52237: CALL_OW 274
52241: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52242: LD_ADDR_VAR 0 4
52246: PUSH
52247: LD_VAR 0 2
52251: PUSH
52252: LD_INT 1
52254: ARRAY
52255: PPUSH
52256: LD_VAR 0 2
52260: PUSH
52261: LD_INT 2
52263: ARRAY
52264: PPUSH
52265: LD_VAR 0 2
52269: PUSH
52270: LD_INT 3
52272: ARRAY
52273: PPUSH
52274: LD_VAR 0 2
52278: PUSH
52279: LD_INT 4
52281: ARRAY
52282: PPUSH
52283: CALL_OW 449
52287: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52288: LD_ADDR_VAR 0 3
52292: PUSH
52293: LD_VAR 0 5
52297: PPUSH
52298: LD_INT 1
52300: PPUSH
52301: CALL_OW 275
52305: PUSH
52306: LD_VAR 0 4
52310: PUSH
52311: LD_INT 1
52313: ARRAY
52314: GREATEREQUAL
52315: PUSH
52316: LD_VAR 0 5
52320: PPUSH
52321: LD_INT 2
52323: PPUSH
52324: CALL_OW 275
52328: PUSH
52329: LD_VAR 0 4
52333: PUSH
52334: LD_INT 2
52336: ARRAY
52337: GREATEREQUAL
52338: AND
52339: PUSH
52340: LD_VAR 0 5
52344: PPUSH
52345: LD_INT 3
52347: PPUSH
52348: CALL_OW 275
52352: PUSH
52353: LD_VAR 0 4
52357: PUSH
52358: LD_INT 3
52360: ARRAY
52361: GREATEREQUAL
52362: AND
52363: ST_TO_ADDR
// end ;
52364: LD_VAR 0 3
52368: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52369: LD_INT 0
52371: PPUSH
52372: PPUSH
52373: PPUSH
52374: PPUSH
// pom := GetBase ( building ) ;
52375: LD_ADDR_VAR 0 3
52379: PUSH
52380: LD_VAR 0 1
52384: PPUSH
52385: CALL_OW 274
52389: ST_TO_ADDR
// if not pom then
52390: LD_VAR 0 3
52394: NOT
52395: IFFALSE 52399
// exit ;
52397: GO 52569
// btype := GetBType ( building ) ;
52399: LD_ADDR_VAR 0 5
52403: PUSH
52404: LD_VAR 0 1
52408: PPUSH
52409: CALL_OW 266
52413: ST_TO_ADDR
// if btype = b_armoury then
52414: LD_VAR 0 5
52418: PUSH
52419: LD_INT 4
52421: EQUAL
52422: IFFALSE 52432
// btype := b_barracks ;
52424: LD_ADDR_VAR 0 5
52428: PUSH
52429: LD_INT 5
52431: ST_TO_ADDR
// if btype = b_depot then
52432: LD_VAR 0 5
52436: PUSH
52437: LD_INT 0
52439: EQUAL
52440: IFFALSE 52450
// btype := b_warehouse ;
52442: LD_ADDR_VAR 0 5
52446: PUSH
52447: LD_INT 1
52449: ST_TO_ADDR
// if btype = b_workshop then
52450: LD_VAR 0 5
52454: PUSH
52455: LD_INT 2
52457: EQUAL
52458: IFFALSE 52468
// btype := b_factory ;
52460: LD_ADDR_VAR 0 5
52464: PUSH
52465: LD_INT 3
52467: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52468: LD_ADDR_VAR 0 4
52472: PUSH
52473: LD_VAR 0 5
52477: PPUSH
52478: LD_VAR 0 1
52482: PPUSH
52483: CALL_OW 248
52487: PPUSH
52488: CALL_OW 450
52492: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52493: LD_ADDR_VAR 0 2
52497: PUSH
52498: LD_VAR 0 3
52502: PPUSH
52503: LD_INT 1
52505: PPUSH
52506: CALL_OW 275
52510: PUSH
52511: LD_VAR 0 4
52515: PUSH
52516: LD_INT 1
52518: ARRAY
52519: GREATEREQUAL
52520: PUSH
52521: LD_VAR 0 3
52525: PPUSH
52526: LD_INT 2
52528: PPUSH
52529: CALL_OW 275
52533: PUSH
52534: LD_VAR 0 4
52538: PUSH
52539: LD_INT 2
52541: ARRAY
52542: GREATEREQUAL
52543: AND
52544: PUSH
52545: LD_VAR 0 3
52549: PPUSH
52550: LD_INT 3
52552: PPUSH
52553: CALL_OW 275
52557: PUSH
52558: LD_VAR 0 4
52562: PUSH
52563: LD_INT 3
52565: ARRAY
52566: GREATEREQUAL
52567: AND
52568: ST_TO_ADDR
// end ;
52569: LD_VAR 0 2
52573: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52574: LD_INT 0
52576: PPUSH
52577: PPUSH
52578: PPUSH
// pom := GetBase ( building ) ;
52579: LD_ADDR_VAR 0 4
52583: PUSH
52584: LD_VAR 0 1
52588: PPUSH
52589: CALL_OW 274
52593: ST_TO_ADDR
// if not pom then
52594: LD_VAR 0 4
52598: NOT
52599: IFFALSE 52603
// exit ;
52601: GO 52704
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52603: LD_ADDR_VAR 0 5
52607: PUSH
52608: LD_VAR 0 2
52612: PPUSH
52613: LD_VAR 0 1
52617: PPUSH
52618: CALL_OW 248
52622: PPUSH
52623: CALL_OW 450
52627: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52628: LD_ADDR_VAR 0 3
52632: PUSH
52633: LD_VAR 0 4
52637: PPUSH
52638: LD_INT 1
52640: PPUSH
52641: CALL_OW 275
52645: PUSH
52646: LD_VAR 0 5
52650: PUSH
52651: LD_INT 1
52653: ARRAY
52654: GREATEREQUAL
52655: PUSH
52656: LD_VAR 0 4
52660: PPUSH
52661: LD_INT 2
52663: PPUSH
52664: CALL_OW 275
52668: PUSH
52669: LD_VAR 0 5
52673: PUSH
52674: LD_INT 2
52676: ARRAY
52677: GREATEREQUAL
52678: AND
52679: PUSH
52680: LD_VAR 0 4
52684: PPUSH
52685: LD_INT 3
52687: PPUSH
52688: CALL_OW 275
52692: PUSH
52693: LD_VAR 0 5
52697: PUSH
52698: LD_INT 3
52700: ARRAY
52701: GREATEREQUAL
52702: AND
52703: ST_TO_ADDR
// end ;
52704: LD_VAR 0 3
52708: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52709: LD_INT 0
52711: PPUSH
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
// result := false ;
52722: LD_ADDR_VAR 0 8
52726: PUSH
52727: LD_INT 0
52729: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52730: LD_VAR 0 5
52734: NOT
52735: PUSH
52736: LD_VAR 0 1
52740: NOT
52741: OR
52742: PUSH
52743: LD_VAR 0 2
52747: NOT
52748: OR
52749: PUSH
52750: LD_VAR 0 3
52754: NOT
52755: OR
52756: IFFALSE 52760
// exit ;
52758: GO 53574
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52760: LD_ADDR_VAR 0 14
52764: PUSH
52765: LD_VAR 0 1
52769: PPUSH
52770: LD_VAR 0 2
52774: PPUSH
52775: LD_VAR 0 3
52779: PPUSH
52780: LD_VAR 0 4
52784: PPUSH
52785: LD_VAR 0 5
52789: PUSH
52790: LD_INT 1
52792: ARRAY
52793: PPUSH
52794: CALL_OW 248
52798: PPUSH
52799: LD_INT 0
52801: PPUSH
52802: CALL 54827 0 6
52806: ST_TO_ADDR
// if not hexes then
52807: LD_VAR 0 14
52811: NOT
52812: IFFALSE 52816
// exit ;
52814: GO 53574
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52816: LD_ADDR_VAR 0 17
52820: PUSH
52821: LD_VAR 0 5
52825: PPUSH
52826: LD_INT 22
52828: PUSH
52829: LD_VAR 0 13
52833: PPUSH
52834: CALL_OW 255
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 30
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 30
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: LIST
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PPUSH
52875: CALL_OW 72
52879: ST_TO_ADDR
// for i = 1 to hexes do
52880: LD_ADDR_VAR 0 9
52884: PUSH
52885: DOUBLE
52886: LD_INT 1
52888: DEC
52889: ST_TO_ADDR
52890: LD_VAR 0 14
52894: PUSH
52895: FOR_TO
52896: IFFALSE 53572
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52898: LD_ADDR_VAR 0 13
52902: PUSH
52903: LD_VAR 0 14
52907: PUSH
52908: LD_VAR 0 9
52912: ARRAY
52913: PUSH
52914: LD_INT 1
52916: ARRAY
52917: PPUSH
52918: LD_VAR 0 14
52922: PUSH
52923: LD_VAR 0 9
52927: ARRAY
52928: PUSH
52929: LD_INT 2
52931: ARRAY
52932: PPUSH
52933: CALL_OW 428
52937: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52938: LD_VAR 0 14
52942: PUSH
52943: LD_VAR 0 9
52947: ARRAY
52948: PUSH
52949: LD_INT 1
52951: ARRAY
52952: PPUSH
52953: LD_VAR 0 14
52957: PUSH
52958: LD_VAR 0 9
52962: ARRAY
52963: PUSH
52964: LD_INT 2
52966: ARRAY
52967: PPUSH
52968: CALL_OW 351
52972: PUSH
52973: LD_VAR 0 14
52977: PUSH
52978: LD_VAR 0 9
52982: ARRAY
52983: PUSH
52984: LD_INT 1
52986: ARRAY
52987: PPUSH
52988: LD_VAR 0 14
52992: PUSH
52993: LD_VAR 0 9
52997: ARRAY
52998: PUSH
52999: LD_INT 2
53001: ARRAY
53002: PPUSH
53003: CALL_OW 488
53007: NOT
53008: OR
53009: PUSH
53010: LD_VAR 0 13
53014: PPUSH
53015: CALL_OW 247
53019: PUSH
53020: LD_INT 3
53022: EQUAL
53023: OR
53024: IFFALSE 53030
// exit ;
53026: POP
53027: POP
53028: GO 53574
// if not tmp then
53030: LD_VAR 0 13
53034: NOT
53035: IFFALSE 53039
// continue ;
53037: GO 52895
// result := true ;
53039: LD_ADDR_VAR 0 8
53043: PUSH
53044: LD_INT 1
53046: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53047: LD_VAR 0 6
53051: PUSH
53052: LD_VAR 0 13
53056: PPUSH
53057: CALL_OW 247
53061: PUSH
53062: LD_INT 2
53064: EQUAL
53065: AND
53066: PUSH
53067: LD_VAR 0 13
53071: PPUSH
53072: CALL_OW 263
53076: PUSH
53077: LD_INT 1
53079: EQUAL
53080: AND
53081: IFFALSE 53245
// begin if IsDrivenBy ( tmp ) then
53083: LD_VAR 0 13
53087: PPUSH
53088: CALL_OW 311
53092: IFFALSE 53096
// continue ;
53094: GO 52895
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53096: LD_VAR 0 6
53100: PPUSH
53101: LD_INT 3
53103: PUSH
53104: LD_INT 60
53106: PUSH
53107: EMPTY
53108: LIST
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 3
53116: PUSH
53117: LD_INT 55
53119: PUSH
53120: EMPTY
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PPUSH
53131: CALL_OW 72
53135: IFFALSE 53243
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53137: LD_ADDR_VAR 0 18
53141: PUSH
53142: LD_VAR 0 6
53146: PPUSH
53147: LD_INT 3
53149: PUSH
53150: LD_INT 60
53152: PUSH
53153: EMPTY
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: LD_INT 55
53165: PUSH
53166: EMPTY
53167: LIST
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PPUSH
53177: CALL_OW 72
53181: PUSH
53182: LD_INT 1
53184: ARRAY
53185: ST_TO_ADDR
// if IsInUnit ( driver ) then
53186: LD_VAR 0 18
53190: PPUSH
53191: CALL_OW 310
53195: IFFALSE 53206
// ComExit ( driver ) ;
53197: LD_VAR 0 18
53201: PPUSH
53202: CALL 78628 0 1
// AddComEnterUnit ( driver , tmp ) ;
53206: LD_VAR 0 18
53210: PPUSH
53211: LD_VAR 0 13
53215: PPUSH
53216: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53220: LD_VAR 0 18
53224: PPUSH
53225: LD_VAR 0 7
53229: PPUSH
53230: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53234: LD_VAR 0 18
53238: PPUSH
53239: CALL_OW 181
// end ; continue ;
53243: GO 52895
// end ; if not cleaners or not tmp in cleaners then
53245: LD_VAR 0 6
53249: NOT
53250: PUSH
53251: LD_VAR 0 13
53255: PUSH
53256: LD_VAR 0 6
53260: IN
53261: NOT
53262: OR
53263: IFFALSE 53570
// begin if dep then
53265: LD_VAR 0 17
53269: IFFALSE 53405
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53271: LD_ADDR_VAR 0 16
53275: PUSH
53276: LD_VAR 0 17
53280: PUSH
53281: LD_INT 1
53283: ARRAY
53284: PPUSH
53285: CALL_OW 250
53289: PPUSH
53290: LD_VAR 0 17
53294: PUSH
53295: LD_INT 1
53297: ARRAY
53298: PPUSH
53299: CALL_OW 254
53303: PPUSH
53304: LD_INT 5
53306: PPUSH
53307: CALL_OW 272
53311: PUSH
53312: LD_VAR 0 17
53316: PUSH
53317: LD_INT 1
53319: ARRAY
53320: PPUSH
53321: CALL_OW 251
53325: PPUSH
53326: LD_VAR 0 17
53330: PUSH
53331: LD_INT 1
53333: ARRAY
53334: PPUSH
53335: CALL_OW 254
53339: PPUSH
53340: LD_INT 5
53342: PPUSH
53343: CALL_OW 273
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53352: LD_VAR 0 16
53356: PUSH
53357: LD_INT 1
53359: ARRAY
53360: PPUSH
53361: LD_VAR 0 16
53365: PUSH
53366: LD_INT 2
53368: ARRAY
53369: PPUSH
53370: CALL_OW 488
53374: IFFALSE 53405
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53376: LD_VAR 0 13
53380: PPUSH
53381: LD_VAR 0 16
53385: PUSH
53386: LD_INT 1
53388: ARRAY
53389: PPUSH
53390: LD_VAR 0 16
53394: PUSH
53395: LD_INT 2
53397: ARRAY
53398: PPUSH
53399: CALL_OW 111
// continue ;
53403: GO 52895
// end ; end ; r := GetDir ( tmp ) ;
53405: LD_ADDR_VAR 0 15
53409: PUSH
53410: LD_VAR 0 13
53414: PPUSH
53415: CALL_OW 254
53419: ST_TO_ADDR
// if r = 5 then
53420: LD_VAR 0 15
53424: PUSH
53425: LD_INT 5
53427: EQUAL
53428: IFFALSE 53438
// r := 0 ;
53430: LD_ADDR_VAR 0 15
53434: PUSH
53435: LD_INT 0
53437: ST_TO_ADDR
// for j = r to 5 do
53438: LD_ADDR_VAR 0 10
53442: PUSH
53443: DOUBLE
53444: LD_VAR 0 15
53448: DEC
53449: ST_TO_ADDR
53450: LD_INT 5
53452: PUSH
53453: FOR_TO
53454: IFFALSE 53568
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53456: LD_ADDR_VAR 0 11
53460: PUSH
53461: LD_VAR 0 13
53465: PPUSH
53466: CALL_OW 250
53470: PPUSH
53471: LD_VAR 0 10
53475: PPUSH
53476: LD_INT 2
53478: PPUSH
53479: CALL_OW 272
53483: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53484: LD_ADDR_VAR 0 12
53488: PUSH
53489: LD_VAR 0 13
53493: PPUSH
53494: CALL_OW 251
53498: PPUSH
53499: LD_VAR 0 10
53503: PPUSH
53504: LD_INT 2
53506: PPUSH
53507: CALL_OW 273
53511: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53512: LD_VAR 0 11
53516: PPUSH
53517: LD_VAR 0 12
53521: PPUSH
53522: CALL_OW 488
53526: PUSH
53527: LD_VAR 0 11
53531: PPUSH
53532: LD_VAR 0 12
53536: PPUSH
53537: CALL_OW 428
53541: NOT
53542: AND
53543: IFFALSE 53566
// begin ComMoveXY ( tmp , _x , _y ) ;
53545: LD_VAR 0 13
53549: PPUSH
53550: LD_VAR 0 11
53554: PPUSH
53555: LD_VAR 0 12
53559: PPUSH
53560: CALL_OW 111
// break ;
53564: GO 53568
// end ; end ;
53566: GO 53453
53568: POP
53569: POP
// end ; end ;
53570: GO 52895
53572: POP
53573: POP
// end ;
53574: LD_VAR 0 8
53578: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53579: LD_INT 0
53581: PPUSH
// result := true ;
53582: LD_ADDR_VAR 0 3
53586: PUSH
53587: LD_INT 1
53589: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53590: LD_VAR 0 2
53594: PUSH
53595: LD_INT 24
53597: DOUBLE
53598: EQUAL
53599: IFTRUE 53609
53601: LD_INT 33
53603: DOUBLE
53604: EQUAL
53605: IFTRUE 53609
53607: GO 53634
53609: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53610: LD_ADDR_VAR 0 3
53614: PUSH
53615: LD_INT 32
53617: PPUSH
53618: LD_VAR 0 1
53622: PPUSH
53623: CALL_OW 321
53627: PUSH
53628: LD_INT 2
53630: EQUAL
53631: ST_TO_ADDR
53632: GO 53950
53634: LD_INT 20
53636: DOUBLE
53637: EQUAL
53638: IFTRUE 53642
53640: GO 53667
53642: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53643: LD_ADDR_VAR 0 3
53647: PUSH
53648: LD_INT 6
53650: PPUSH
53651: LD_VAR 0 1
53655: PPUSH
53656: CALL_OW 321
53660: PUSH
53661: LD_INT 2
53663: EQUAL
53664: ST_TO_ADDR
53665: GO 53950
53667: LD_INT 22
53669: DOUBLE
53670: EQUAL
53671: IFTRUE 53681
53673: LD_INT 36
53675: DOUBLE
53676: EQUAL
53677: IFTRUE 53681
53679: GO 53706
53681: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53682: LD_ADDR_VAR 0 3
53686: PUSH
53687: LD_INT 15
53689: PPUSH
53690: LD_VAR 0 1
53694: PPUSH
53695: CALL_OW 321
53699: PUSH
53700: LD_INT 2
53702: EQUAL
53703: ST_TO_ADDR
53704: GO 53950
53706: LD_INT 30
53708: DOUBLE
53709: EQUAL
53710: IFTRUE 53714
53712: GO 53739
53714: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53715: LD_ADDR_VAR 0 3
53719: PUSH
53720: LD_INT 20
53722: PPUSH
53723: LD_VAR 0 1
53727: PPUSH
53728: CALL_OW 321
53732: PUSH
53733: LD_INT 2
53735: EQUAL
53736: ST_TO_ADDR
53737: GO 53950
53739: LD_INT 28
53741: DOUBLE
53742: EQUAL
53743: IFTRUE 53753
53745: LD_INT 21
53747: DOUBLE
53748: EQUAL
53749: IFTRUE 53753
53751: GO 53778
53753: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53754: LD_ADDR_VAR 0 3
53758: PUSH
53759: LD_INT 21
53761: PPUSH
53762: LD_VAR 0 1
53766: PPUSH
53767: CALL_OW 321
53771: PUSH
53772: LD_INT 2
53774: EQUAL
53775: ST_TO_ADDR
53776: GO 53950
53778: LD_INT 16
53780: DOUBLE
53781: EQUAL
53782: IFTRUE 53786
53784: GO 53811
53786: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53787: LD_ADDR_VAR 0 3
53791: PUSH
53792: LD_INT 84
53794: PPUSH
53795: LD_VAR 0 1
53799: PPUSH
53800: CALL_OW 321
53804: PUSH
53805: LD_INT 2
53807: EQUAL
53808: ST_TO_ADDR
53809: GO 53950
53811: LD_INT 19
53813: DOUBLE
53814: EQUAL
53815: IFTRUE 53825
53817: LD_INT 23
53819: DOUBLE
53820: EQUAL
53821: IFTRUE 53825
53823: GO 53850
53825: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53826: LD_ADDR_VAR 0 3
53830: PUSH
53831: LD_INT 83
53833: PPUSH
53834: LD_VAR 0 1
53838: PPUSH
53839: CALL_OW 321
53843: PUSH
53844: LD_INT 2
53846: EQUAL
53847: ST_TO_ADDR
53848: GO 53950
53850: LD_INT 17
53852: DOUBLE
53853: EQUAL
53854: IFTRUE 53858
53856: GO 53883
53858: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53859: LD_ADDR_VAR 0 3
53863: PUSH
53864: LD_INT 39
53866: PPUSH
53867: LD_VAR 0 1
53871: PPUSH
53872: CALL_OW 321
53876: PUSH
53877: LD_INT 2
53879: EQUAL
53880: ST_TO_ADDR
53881: GO 53950
53883: LD_INT 18
53885: DOUBLE
53886: EQUAL
53887: IFTRUE 53891
53889: GO 53916
53891: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53892: LD_ADDR_VAR 0 3
53896: PUSH
53897: LD_INT 40
53899: PPUSH
53900: LD_VAR 0 1
53904: PPUSH
53905: CALL_OW 321
53909: PUSH
53910: LD_INT 2
53912: EQUAL
53913: ST_TO_ADDR
53914: GO 53950
53916: LD_INT 27
53918: DOUBLE
53919: EQUAL
53920: IFTRUE 53924
53922: GO 53949
53924: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53925: LD_ADDR_VAR 0 3
53929: PUSH
53930: LD_INT 35
53932: PPUSH
53933: LD_VAR 0 1
53937: PPUSH
53938: CALL_OW 321
53942: PUSH
53943: LD_INT 2
53945: EQUAL
53946: ST_TO_ADDR
53947: GO 53950
53949: POP
// end ;
53950: LD_VAR 0 3
53954: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53955: LD_INT 0
53957: PPUSH
53958: PPUSH
53959: PPUSH
53960: PPUSH
53961: PPUSH
53962: PPUSH
53963: PPUSH
53964: PPUSH
53965: PPUSH
53966: PPUSH
53967: PPUSH
// result := false ;
53968: LD_ADDR_VAR 0 6
53972: PUSH
53973: LD_INT 0
53975: ST_TO_ADDR
// if btype = b_depot then
53976: LD_VAR 0 2
53980: PUSH
53981: LD_INT 0
53983: EQUAL
53984: IFFALSE 53996
// begin result := true ;
53986: LD_ADDR_VAR 0 6
53990: PUSH
53991: LD_INT 1
53993: ST_TO_ADDR
// exit ;
53994: GO 54822
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53996: LD_VAR 0 1
54000: NOT
54001: PUSH
54002: LD_VAR 0 1
54006: PPUSH
54007: CALL_OW 266
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: IN
54022: NOT
54023: OR
54024: PUSH
54025: LD_VAR 0 2
54029: NOT
54030: OR
54031: PUSH
54032: LD_VAR 0 5
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: LD_INT 4
54051: PUSH
54052: LD_INT 5
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: IN
54063: NOT
54064: OR
54065: PUSH
54066: LD_VAR 0 3
54070: PPUSH
54071: LD_VAR 0 4
54075: PPUSH
54076: CALL_OW 488
54080: NOT
54081: OR
54082: IFFALSE 54086
// exit ;
54084: GO 54822
// side := GetSide ( depot ) ;
54086: LD_ADDR_VAR 0 9
54090: PUSH
54091: LD_VAR 0 1
54095: PPUSH
54096: CALL_OW 255
54100: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54101: LD_VAR 0 9
54105: PPUSH
54106: LD_VAR 0 2
54110: PPUSH
54111: CALL 53579 0 2
54115: NOT
54116: IFFALSE 54120
// exit ;
54118: GO 54822
// pom := GetBase ( depot ) ;
54120: LD_ADDR_VAR 0 10
54124: PUSH
54125: LD_VAR 0 1
54129: PPUSH
54130: CALL_OW 274
54134: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54135: LD_ADDR_VAR 0 11
54139: PUSH
54140: LD_VAR 0 2
54144: PPUSH
54145: LD_VAR 0 1
54149: PPUSH
54150: CALL_OW 248
54154: PPUSH
54155: CALL_OW 450
54159: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54160: LD_VAR 0 10
54164: PPUSH
54165: LD_INT 1
54167: PPUSH
54168: CALL_OW 275
54172: PUSH
54173: LD_VAR 0 11
54177: PUSH
54178: LD_INT 1
54180: ARRAY
54181: GREATEREQUAL
54182: PUSH
54183: LD_VAR 0 10
54187: PPUSH
54188: LD_INT 2
54190: PPUSH
54191: CALL_OW 275
54195: PUSH
54196: LD_VAR 0 11
54200: PUSH
54201: LD_INT 2
54203: ARRAY
54204: GREATEREQUAL
54205: AND
54206: PUSH
54207: LD_VAR 0 10
54211: PPUSH
54212: LD_INT 3
54214: PPUSH
54215: CALL_OW 275
54219: PUSH
54220: LD_VAR 0 11
54224: PUSH
54225: LD_INT 3
54227: ARRAY
54228: GREATEREQUAL
54229: AND
54230: NOT
54231: IFFALSE 54235
// exit ;
54233: GO 54822
// if GetBType ( depot ) = b_depot then
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL_OW 266
54244: PUSH
54245: LD_INT 0
54247: EQUAL
54248: IFFALSE 54260
// dist := 28 else
54250: LD_ADDR_VAR 0 14
54254: PUSH
54255: LD_INT 28
54257: ST_TO_ADDR
54258: GO 54268
// dist := 36 ;
54260: LD_ADDR_VAR 0 14
54264: PUSH
54265: LD_INT 36
54267: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54268: LD_VAR 0 1
54272: PPUSH
54273: LD_VAR 0 3
54277: PPUSH
54278: LD_VAR 0 4
54282: PPUSH
54283: CALL_OW 297
54287: PUSH
54288: LD_VAR 0 14
54292: GREATER
54293: IFFALSE 54297
// exit ;
54295: GO 54822
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54297: LD_ADDR_VAR 0 12
54301: PUSH
54302: LD_VAR 0 2
54306: PPUSH
54307: LD_VAR 0 3
54311: PPUSH
54312: LD_VAR 0 4
54316: PPUSH
54317: LD_VAR 0 5
54321: PPUSH
54322: LD_VAR 0 1
54326: PPUSH
54327: CALL_OW 248
54331: PPUSH
54332: LD_INT 0
54334: PPUSH
54335: CALL 54827 0 6
54339: ST_TO_ADDR
// if not hexes then
54340: LD_VAR 0 12
54344: NOT
54345: IFFALSE 54349
// exit ;
54347: GO 54822
// hex := GetHexInfo ( x , y ) ;
54349: LD_ADDR_VAR 0 15
54353: PUSH
54354: LD_VAR 0 3
54358: PPUSH
54359: LD_VAR 0 4
54363: PPUSH
54364: CALL_OW 546
54368: ST_TO_ADDR
// if hex [ 1 ] then
54369: LD_VAR 0 15
54373: PUSH
54374: LD_INT 1
54376: ARRAY
54377: IFFALSE 54381
// exit ;
54379: GO 54822
// height := hex [ 2 ] ;
54381: LD_ADDR_VAR 0 13
54385: PUSH
54386: LD_VAR 0 15
54390: PUSH
54391: LD_INT 2
54393: ARRAY
54394: ST_TO_ADDR
// for i = 1 to hexes do
54395: LD_ADDR_VAR 0 7
54399: PUSH
54400: DOUBLE
54401: LD_INT 1
54403: DEC
54404: ST_TO_ADDR
54405: LD_VAR 0 12
54409: PUSH
54410: FOR_TO
54411: IFFALSE 54741
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54413: LD_VAR 0 12
54417: PUSH
54418: LD_VAR 0 7
54422: ARRAY
54423: PUSH
54424: LD_INT 1
54426: ARRAY
54427: PPUSH
54428: LD_VAR 0 12
54432: PUSH
54433: LD_VAR 0 7
54437: ARRAY
54438: PUSH
54439: LD_INT 2
54441: ARRAY
54442: PPUSH
54443: CALL_OW 488
54447: NOT
54448: PUSH
54449: LD_VAR 0 12
54453: PUSH
54454: LD_VAR 0 7
54458: ARRAY
54459: PUSH
54460: LD_INT 1
54462: ARRAY
54463: PPUSH
54464: LD_VAR 0 12
54468: PUSH
54469: LD_VAR 0 7
54473: ARRAY
54474: PUSH
54475: LD_INT 2
54477: ARRAY
54478: PPUSH
54479: CALL_OW 428
54483: PUSH
54484: LD_INT 0
54486: GREATER
54487: OR
54488: PUSH
54489: LD_VAR 0 12
54493: PUSH
54494: LD_VAR 0 7
54498: ARRAY
54499: PUSH
54500: LD_INT 1
54502: ARRAY
54503: PPUSH
54504: LD_VAR 0 12
54508: PUSH
54509: LD_VAR 0 7
54513: ARRAY
54514: PUSH
54515: LD_INT 2
54517: ARRAY
54518: PPUSH
54519: CALL_OW 351
54523: OR
54524: IFFALSE 54530
// exit ;
54526: POP
54527: POP
54528: GO 54822
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54530: LD_ADDR_VAR 0 8
54534: PUSH
54535: LD_VAR 0 12
54539: PUSH
54540: LD_VAR 0 7
54544: ARRAY
54545: PUSH
54546: LD_INT 1
54548: ARRAY
54549: PPUSH
54550: LD_VAR 0 12
54554: PUSH
54555: LD_VAR 0 7
54559: ARRAY
54560: PUSH
54561: LD_INT 2
54563: ARRAY
54564: PPUSH
54565: CALL_OW 546
54569: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54570: LD_VAR 0 8
54574: PUSH
54575: LD_INT 1
54577: ARRAY
54578: PUSH
54579: LD_VAR 0 8
54583: PUSH
54584: LD_INT 2
54586: ARRAY
54587: PUSH
54588: LD_VAR 0 13
54592: PUSH
54593: LD_INT 2
54595: PLUS
54596: GREATER
54597: OR
54598: PUSH
54599: LD_VAR 0 8
54603: PUSH
54604: LD_INT 2
54606: ARRAY
54607: PUSH
54608: LD_VAR 0 13
54612: PUSH
54613: LD_INT 2
54615: MINUS
54616: LESS
54617: OR
54618: PUSH
54619: LD_VAR 0 8
54623: PUSH
54624: LD_INT 3
54626: ARRAY
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 8
54633: PUSH
54634: LD_INT 9
54636: PUSH
54637: LD_INT 10
54639: PUSH
54640: LD_INT 11
54642: PUSH
54643: LD_INT 12
54645: PUSH
54646: LD_INT 13
54648: PUSH
54649: LD_INT 16
54651: PUSH
54652: LD_INT 17
54654: PUSH
54655: LD_INT 18
54657: PUSH
54658: LD_INT 19
54660: PUSH
54661: LD_INT 20
54663: PUSH
54664: LD_INT 21
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: IN
54682: NOT
54683: OR
54684: PUSH
54685: LD_VAR 0 8
54689: PUSH
54690: LD_INT 5
54692: ARRAY
54693: NOT
54694: OR
54695: PUSH
54696: LD_VAR 0 8
54700: PUSH
54701: LD_INT 6
54703: ARRAY
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: LD_INT 7
54713: PUSH
54714: LD_INT 9
54716: PUSH
54717: LD_INT 10
54719: PUSH
54720: LD_INT 11
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: IN
54731: NOT
54732: OR
54733: IFFALSE 54739
// exit ;
54735: POP
54736: POP
54737: GO 54822
// end ;
54739: GO 54410
54741: POP
54742: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54743: LD_VAR 0 9
54747: PPUSH
54748: LD_VAR 0 3
54752: PPUSH
54753: LD_VAR 0 4
54757: PPUSH
54758: LD_INT 20
54760: PPUSH
54761: CALL 46745 0 4
54765: PUSH
54766: LD_INT 4
54768: ARRAY
54769: IFFALSE 54773
// exit ;
54771: GO 54822
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54773: LD_VAR 0 2
54777: PUSH
54778: LD_INT 29
54780: PUSH
54781: LD_INT 30
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: IN
54788: PUSH
54789: LD_VAR 0 3
54793: PPUSH
54794: LD_VAR 0 4
54798: PPUSH
54799: LD_VAR 0 9
54803: PPUSH
54804: CALL_OW 440
54808: NOT
54809: AND
54810: IFFALSE 54814
// exit ;
54812: GO 54822
// result := true ;
54814: LD_ADDR_VAR 0 6
54818: PUSH
54819: LD_INT 1
54821: ST_TO_ADDR
// end ;
54822: LD_VAR 0 6
54826: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54827: LD_INT 0
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
54833: PPUSH
54834: PPUSH
54835: PPUSH
54836: PPUSH
54837: PPUSH
54838: PPUSH
54839: PPUSH
54840: PPUSH
54841: PPUSH
54842: PPUSH
54843: PPUSH
54844: PPUSH
54845: PPUSH
54846: PPUSH
54847: PPUSH
54848: PPUSH
54849: PPUSH
54850: PPUSH
54851: PPUSH
54852: PPUSH
54853: PPUSH
54854: PPUSH
54855: PPUSH
54856: PPUSH
54857: PPUSH
54858: PPUSH
54859: PPUSH
54860: PPUSH
54861: PPUSH
54862: PPUSH
54863: PPUSH
54864: PPUSH
54865: PPUSH
54866: PPUSH
54867: PPUSH
54868: PPUSH
54869: PPUSH
54870: PPUSH
54871: PPUSH
54872: PPUSH
54873: PPUSH
54874: PPUSH
54875: PPUSH
54876: PPUSH
54877: PPUSH
54878: PPUSH
54879: PPUSH
54880: PPUSH
54881: PPUSH
54882: PPUSH
54883: PPUSH
54884: PPUSH
54885: PPUSH
54886: PPUSH
// result = [ ] ;
54887: LD_ADDR_VAR 0 7
54891: PUSH
54892: EMPTY
54893: ST_TO_ADDR
// temp_list = [ ] ;
54894: LD_ADDR_VAR 0 9
54898: PUSH
54899: EMPTY
54900: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54901: LD_VAR 0 4
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: LD_INT 3
54917: PUSH
54918: LD_INT 4
54920: PUSH
54921: LD_INT 5
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: IN
54932: NOT
54933: PUSH
54934: LD_VAR 0 1
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: IN
54949: PUSH
54950: LD_VAR 0 5
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: IN
54969: NOT
54970: AND
54971: OR
54972: IFFALSE 54976
// exit ;
54974: GO 73367
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54976: LD_VAR 0 1
54980: PUSH
54981: LD_INT 6
54983: PUSH
54984: LD_INT 7
54986: PUSH
54987: LD_INT 8
54989: PUSH
54990: LD_INT 13
54992: PUSH
54993: LD_INT 12
54995: PUSH
54996: LD_INT 15
54998: PUSH
54999: LD_INT 11
55001: PUSH
55002: LD_INT 14
55004: PUSH
55005: LD_INT 10
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: IN
55019: IFFALSE 55029
// btype = b_lab ;
55021: LD_ADDR_VAR 0 1
55025: PUSH
55026: LD_INT 6
55028: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55029: LD_VAR 0 6
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: IN
55048: NOT
55049: PUSH
55050: LD_VAR 0 1
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 3
55066: PUSH
55067: LD_INT 6
55069: PUSH
55070: LD_INT 36
55072: PUSH
55073: LD_INT 4
55075: PUSH
55076: LD_INT 5
55078: PUSH
55079: LD_INT 31
55081: PUSH
55082: LD_INT 32
55084: PUSH
55085: LD_INT 33
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: IN
55101: NOT
55102: PUSH
55103: LD_VAR 0 6
55107: PUSH
55108: LD_INT 1
55110: EQUAL
55111: AND
55112: OR
55113: PUSH
55114: LD_VAR 0 1
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: LD_INT 3
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: IN
55129: NOT
55130: PUSH
55131: LD_VAR 0 6
55135: PUSH
55136: LD_INT 2
55138: EQUAL
55139: AND
55140: OR
55141: IFFALSE 55151
// mode = 0 ;
55143: LD_ADDR_VAR 0 6
55147: PUSH
55148: LD_INT 0
55150: ST_TO_ADDR
// case mode of 0 :
55151: LD_VAR 0 6
55155: PUSH
55156: LD_INT 0
55158: DOUBLE
55159: EQUAL
55160: IFTRUE 55164
55162: GO 66617
55164: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55165: LD_ADDR_VAR 0 11
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 3
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 3
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55358: LD_ADDR_VAR 0 12
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 3
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 3
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55554: LD_ADDR_VAR 0 13
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 3
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 3
55713: NEG
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: LD_INT 3
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55753: LD_ADDR_VAR 0 14
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55949: LD_ADDR_VAR 0 15
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 3
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56142: LD_ADDR_VAR 0 16
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56335: LD_ADDR_VAR 0 17
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56565: LD_ADDR_VAR 0 18
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56795: LD_ADDR_VAR 0 19
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57025: LD_ADDR_VAR 0 20
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57255: LD_ADDR_VAR 0 21
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57485: LD_ADDR_VAR 0 22
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57715: LD_ADDR_VAR 0 23
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 3
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 3
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57995: LD_ADDR_VAR 0 24
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58271: LD_ADDR_VAR 0 25
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 2
58458: NEG
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 3
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 3
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 3
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58545: LD_ADDR_VAR 0 26
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58821: LD_ADDR_VAR 0 27
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59101: LD_ADDR_VAR 0 28
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: LD_INT 2
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59383: LD_ADDR_VAR 0 29
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59662: LD_ADDR_VAR 0 30
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 2
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 3
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 3
59905: NEG
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59940: LD_ADDR_VAR 0 31
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: NEG
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: LD_INT 3
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60218: LD_ADDR_VAR 0 32
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 1
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 3
60430: PUSH
60431: LD_INT 2
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60496: LD_ADDR_VAR 0 33
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: NEG
60687: PUSH
60688: LD_INT 3
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: NEG
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60775: LD_ADDR_VAR 0 34
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 2
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 3
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: LD_INT 2
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61055: LD_ADDR_VAR 0 35
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61167: LD_ADDR_VAR 0 36
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61279: LD_ADDR_VAR 0 37
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61391: LD_ADDR_VAR 0 38
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61503: LD_ADDR_VAR 0 39
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61615: LD_ADDR_VAR 0 40
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61727: LD_ADDR_VAR 0 41
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: NEG
61906: PUSH
61907: LD_INT 2
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: LD_INT 3
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 3
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: NEG
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 3
62036: NEG
62037: PUSH
62038: LD_INT 3
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62077: LD_ADDR_VAR 0 42
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: LD_INT 2
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 2
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 2
62243: NEG
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: LD_INT 3
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 3
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 3
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 3
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 3
62323: PUSH
62324: LD_INT 3
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: LD_INT 3
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 3
62374: NEG
62375: PUSH
62376: LD_INT 2
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 3
62386: NEG
62387: PUSH
62388: LD_INT 3
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62427: LD_ADDR_VAR 0 43
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: LD_INT 2
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 3
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: LD_INT 3
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 3
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 3
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: LD_INT 3
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: LD_INT 3
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: NEG
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 3
62723: NEG
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 3
62734: NEG
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62775: LD_ADDR_VAR 0 44
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: LD_INT 1
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 2
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 2
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 2
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: PUSH
62900: LD_INT 2
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: LD_INT 2
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 2
62930: NEG
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: NEG
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: LD_INT 2
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 2
62965: NEG
62966: PUSH
62967: LD_INT 3
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 3
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 3
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 3
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 3
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 3
63049: NEG
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 3
63060: NEG
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 3
63072: NEG
63073: PUSH
63074: LD_INT 2
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 3
63084: NEG
63085: PUSH
63086: LD_INT 3
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63125: LD_ADDR_VAR 0 45
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: NEG
63207: PUSH
63208: LD_INT 2
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: LD_INT 2
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 2
63291: NEG
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 2
63303: NEG
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: NEG
63316: PUSH
63317: LD_INT 3
63319: NEG
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: LD_INT 3
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: LD_INT 3
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: PUSH
63362: LD_INT 2
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: LD_INT 3
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: LD_INT 3
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: LD_INT 3
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 3
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 3
63422: NEG
63423: PUSH
63424: LD_INT 2
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 3
63434: NEG
63435: PUSH
63436: LD_INT 3
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63475: LD_ADDR_VAR 0 46
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 2
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 2
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 2
63641: NEG
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: NEG
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: LD_INT 3
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: LD_INT 2
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 3
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 3
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: LD_INT 3
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: LD_INT 3
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: NEG
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 3
63782: NEG
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63823: LD_ADDR_VAR 0 47
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: NEG
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: LD_INT 2
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 2
63938: NEG
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: LD_INT 2
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63974: LD_ADDR_VAR 0 48
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 1
64012: PUSH
64013: LD_INT 1
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: LD_INT 2
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 2
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64121: LD_ADDR_VAR 0 49
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: LD_INT 1
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 2
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: LD_INT 2
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 2
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64265: LD_ADDR_VAR 0 50
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: LD_INT 1
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: LD_INT 2
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64409: LD_ADDR_VAR 0 51
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 2
64521: NEG
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: NEG
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64556: LD_ADDR_VAR 0 52
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 1
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: NEG
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: LD_INT 2
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 2
64660: NEG
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: LD_INT 1
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 2
64683: NEG
64684: PUSH
64685: LD_INT 2
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64707: LD_ADDR_VAR 0 53
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64937: LD_ADDR_VAR 0 54
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: LD_INT 2
65022: NEG
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 2
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 2
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 2
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: LD_INT 2
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: NEG
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 2
65136: NEG
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65167: LD_ADDR_VAR 0 55
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: LD_INT 2
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: LD_INT 2
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: LD_INT 2
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: LD_INT 2
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 2
65343: NEG
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: NEG
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: LD_INT 2
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65397: LD_ADDR_VAR 0 56
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: LD_INT 1
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: NEG
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: LD_INT 2
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: LD_INT 1
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 2
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: LD_INT 2
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: NEG
65563: PUSH
65564: LD_INT 1
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: NEG
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 2
65584: NEG
65585: PUSH
65586: LD_INT 1
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 2
65596: NEG
65597: PUSH
65598: LD_INT 2
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65627: LD_ADDR_VAR 0 57
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: LD_INT 1
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 2
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: LD_INT 2
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 1
65772: PUSH
65773: LD_INT 2
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 2
65803: NEG
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 2
65814: NEG
65815: PUSH
65816: LD_INT 1
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 2
65826: NEG
65827: PUSH
65828: LD_INT 2
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65857: LD_ADDR_VAR 0 58
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 1
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: LD_INT 1
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 0
65950: PUSH
65951: LD_INT 2
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 2
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 2
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 2
66033: NEG
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 2
66044: NEG
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 2
66056: NEG
66057: PUSH
66058: LD_INT 2
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66087: LD_ADDR_VAR 0 59
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: LD_INT 1
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 1
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 1
66145: NEG
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: LD_INT 1
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66175: LD_ADDR_VAR 0 60
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66263: LD_ADDR_VAR 0 61
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: LD_INT 1
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66351: LD_ADDR_VAR 0 62
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 0
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: LD_INT 1
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 0
66399: PUSH
66400: LD_INT 1
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: NEG
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: LD_INT 1
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66439: LD_ADDR_VAR 0 63
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 1
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: LD_INT 1
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: LD_INT 1
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 1
66508: NEG
66509: PUSH
66510: LD_INT 1
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66527: LD_ADDR_VAR 0 64
66531: PUSH
66532: LD_INT 0
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: LD_INT 1
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 1
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 0
66575: PUSH
66576: LD_INT 1
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 1
66585: NEG
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: NEG
66597: PUSH
66598: LD_INT 1
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: ST_TO_ADDR
// end ; 1 :
66615: GO 72512
66617: LD_INT 1
66619: DOUBLE
66620: EQUAL
66621: IFTRUE 66625
66623: GO 69248
66625: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66626: LD_ADDR_VAR 0 11
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: LD_INT 3
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 3
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: PUSH
66657: LD_INT 2
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66670: LD_ADDR_VAR 0 12
66674: PUSH
66675: LD_INT 2
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 3
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 3
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: LIST
66710: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66711: LD_ADDR_VAR 0 13
66715: PUSH
66716: LD_INT 3
66718: PUSH
66719: LD_INT 2
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 3
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 2
66738: PUSH
66739: LD_INT 3
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: LIST
66750: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66751: LD_ADDR_VAR 0 14
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: LD_INT 3
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: LD_INT 3
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66792: LD_ADDR_VAR 0 15
66796: PUSH
66797: LD_INT 2
66799: NEG
66800: PUSH
66801: LD_INT 1
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 3
66810: NEG
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 3
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: LIST
66835: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66836: LD_ADDR_VAR 0 16
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: LD_INT 3
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 3
66855: NEG
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 3
66867: NEG
66868: PUSH
66869: LD_INT 3
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66882: LD_ADDR_VAR 0 17
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: LD_INT 3
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 0
66901: PUSH
66902: LD_INT 3
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: LD_INT 2
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66926: LD_ADDR_VAR 0 18
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66967: LD_ADDR_VAR 0 19
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: LD_INT 2
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: LD_INT 3
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: LIST
67006: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67007: LD_ADDR_VAR 0 20
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: LD_INT 3
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: LD_INT 3
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: LD_INT 2
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67048: LD_ADDR_VAR 0 21
67052: PUSH
67053: LD_INT 2
67055: NEG
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 3
67066: NEG
67067: PUSH
67068: LD_INT 0
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 3
67077: NEG
67078: PUSH
67079: LD_INT 1
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: LIST
67091: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67092: LD_ADDR_VAR 0 22
67096: PUSH
67097: LD_INT 2
67099: NEG
67100: PUSH
67101: LD_INT 3
67103: NEG
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 3
67111: NEG
67112: PUSH
67113: LD_INT 2
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 3
67123: NEG
67124: PUSH
67125: LD_INT 3
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: LIST
67137: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67138: LD_ADDR_VAR 0 23
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: LD_INT 4
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 1
67168: PUSH
67169: LD_INT 3
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: LIST
67181: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67182: LD_ADDR_VAR 0 24
67186: PUSH
67187: LD_INT 3
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 3
67199: PUSH
67200: LD_INT 1
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 4
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: LIST
67222: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67223: LD_ADDR_VAR 0 25
67227: PUSH
67228: LD_INT 3
67230: PUSH
67231: LD_INT 3
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 4
67240: PUSH
67241: LD_INT 3
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 3
67250: PUSH
67251: LD_INT 4
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: LIST
67262: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67263: LD_ADDR_VAR 0 26
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: LD_INT 3
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: LD_INT 4
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: PUSH
67292: LD_INT 3
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67304: LD_ADDR_VAR 0 27
67308: PUSH
67309: LD_INT 3
67311: NEG
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 3
67322: NEG
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 4
67333: NEG
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: LIST
67347: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67348: LD_ADDR_VAR 0 28
67352: PUSH
67353: LD_INT 3
67355: NEG
67356: PUSH
67357: LD_INT 3
67359: NEG
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 3
67367: NEG
67368: PUSH
67369: LD_INT 4
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 4
67379: NEG
67380: PUSH
67381: LD_INT 3
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67394: LD_ADDR_VAR 0 29
67398: PUSH
67399: LD_INT 1
67401: NEG
67402: PUSH
67403: LD_INT 3
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: LD_INT 3
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: LD_INT 2
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: LD_INT 4
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: LD_INT 4
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: LD_INT 3
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: LD_INT 5
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 5
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 1
67492: PUSH
67493: LD_INT 4
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: LD_INT 6
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: LD_INT 6
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 1
67526: PUSH
67527: LD_INT 5
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67549: LD_ADDR_VAR 0 30
67553: PUSH
67554: LD_INT 2
67556: PUSH
67557: LD_INT 1
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 3
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 3
67577: PUSH
67578: LD_INT 1
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: PUSH
67588: LD_INT 1
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 4
67598: PUSH
67599: LD_INT 0
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 4
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 5
67629: PUSH
67630: LD_INT 0
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 5
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 5
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 6
67660: PUSH
67661: LD_INT 0
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 6
67670: PUSH
67671: LD_INT 1
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67692: LD_ADDR_VAR 0 31
67696: PUSH
67697: LD_INT 3
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 3
67709: PUSH
67710: LD_INT 3
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 2
67719: PUSH
67720: LD_INT 3
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 4
67729: PUSH
67730: LD_INT 3
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 4
67739: PUSH
67740: LD_INT 4
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 3
67749: PUSH
67750: LD_INT 4
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 5
67759: PUSH
67760: LD_INT 4
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 5
67769: PUSH
67770: LD_INT 5
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 4
67779: PUSH
67780: LD_INT 5
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 6
67789: PUSH
67790: LD_INT 5
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 6
67799: PUSH
67800: LD_INT 6
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 5
67809: PUSH
67810: LD_INT 6
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67831: LD_ADDR_VAR 0 32
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: LD_INT 3
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: LD_INT 3
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: LD_INT 2
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: LD_INT 4
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: LD_INT 4
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 1
67889: NEG
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: LD_INT 5
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: LD_INT 5
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: LD_INT 4
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 1
67931: PUSH
67932: LD_INT 6
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: LD_INT 6
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 1
67951: NEG
67952: PUSH
67953: LD_INT 5
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67974: LD_ADDR_VAR 0 33
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: NEG
67993: PUSH
67994: LD_INT 0
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 3
68003: NEG
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 3
68015: NEG
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 4
68026: NEG
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 4
68037: NEG
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 4
68049: NEG
68050: PUSH
68051: LD_INT 1
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 5
68060: NEG
68061: PUSH
68062: LD_INT 0
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 5
68071: NEG
68072: PUSH
68073: LD_INT 1
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 5
68083: NEG
68084: PUSH
68085: LD_INT 1
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 6
68094: NEG
68095: PUSH
68096: LD_INT 0
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 6
68105: NEG
68106: PUSH
68107: LD_INT 1
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68129: LD_ADDR_VAR 0 34
68133: PUSH
68134: LD_INT 2
68136: NEG
68137: PUSH
68138: LD_INT 3
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 3
68148: NEG
68149: PUSH
68150: LD_INT 2
68152: NEG
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 3
68160: NEG
68161: PUSH
68162: LD_INT 3
68164: NEG
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 3
68172: NEG
68173: PUSH
68174: LD_INT 4
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 4
68184: NEG
68185: PUSH
68186: LD_INT 3
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 4
68196: NEG
68197: PUSH
68198: LD_INT 4
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 4
68208: NEG
68209: PUSH
68210: LD_INT 5
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 5
68220: NEG
68221: PUSH
68222: LD_INT 4
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 5
68232: NEG
68233: PUSH
68234: LD_INT 5
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 5
68244: NEG
68245: PUSH
68246: LD_INT 6
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 6
68256: NEG
68257: PUSH
68258: LD_INT 5
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 6
68268: NEG
68269: PUSH
68270: LD_INT 6
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68292: LD_ADDR_VAR 0 41
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: LD_INT 2
68302: NEG
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 1
68310: NEG
68311: PUSH
68312: LD_INT 3
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 1
68322: PUSH
68323: LD_INT 2
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: LIST
68335: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68336: LD_ADDR_VAR 0 42
68340: PUSH
68341: LD_INT 2
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 2
68353: PUSH
68354: LD_INT 1
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 3
68364: PUSH
68365: LD_INT 1
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: LIST
68376: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68377: LD_ADDR_VAR 0 43
68381: PUSH
68382: LD_INT 2
68384: PUSH
68385: LD_INT 2
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 3
68394: PUSH
68395: LD_INT 2
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 2
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: LIST
68416: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68417: LD_ADDR_VAR 0 44
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: LD_INT 2
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 1
68434: PUSH
68435: LD_INT 3
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 1
68444: NEG
68445: PUSH
68446: LD_INT 2
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: LIST
68457: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68458: LD_ADDR_VAR 0 45
68462: PUSH
68463: LD_INT 2
68465: NEG
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 2
68476: NEG
68477: PUSH
68478: LD_INT 1
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 3
68487: NEG
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68502: LD_ADDR_VAR 0 46
68506: PUSH
68507: LD_INT 2
68509: NEG
68510: PUSH
68511: LD_INT 2
68513: NEG
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 2
68521: NEG
68522: PUSH
68523: LD_INT 3
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 3
68533: NEG
68534: PUSH
68535: LD_INT 2
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: LIST
68547: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68548: LD_ADDR_VAR 0 47
68552: PUSH
68553: LD_INT 2
68555: NEG
68556: PUSH
68557: LD_INT 3
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 1
68567: NEG
68568: PUSH
68569: LD_INT 3
68571: NEG
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68581: LD_ADDR_VAR 0 48
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: LD_INT 2
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: LD_INT 1
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68612: LD_ADDR_VAR 0 49
68616: PUSH
68617: LD_INT 3
68619: PUSH
68620: LD_INT 1
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 3
68629: PUSH
68630: LD_INT 2
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68641: LD_ADDR_VAR 0 50
68645: PUSH
68646: LD_INT 2
68648: PUSH
68649: LD_INT 3
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68670: LD_ADDR_VAR 0 51
68674: PUSH
68675: LD_INT 1
68677: NEG
68678: PUSH
68679: LD_INT 2
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 2
68688: NEG
68689: PUSH
68690: LD_INT 1
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68701: LD_ADDR_VAR 0 52
68705: PUSH
68706: LD_INT 3
68708: NEG
68709: PUSH
68710: LD_INT 1
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: LD_INT 2
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68734: LD_ADDR_VAR 0 53
68738: PUSH
68739: LD_INT 1
68741: NEG
68742: PUSH
68743: LD_INT 3
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 3
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 1
68764: PUSH
68765: LD_INT 2
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: LIST
68777: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68778: LD_ADDR_VAR 0 54
68782: PUSH
68783: LD_INT 2
68785: PUSH
68786: LD_INT 1
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: LD_INT 0
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: PUSH
68807: LD_INT 1
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68819: LD_ADDR_VAR 0 55
68823: PUSH
68824: LD_INT 3
68826: PUSH
68827: LD_INT 2
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 3
68836: PUSH
68837: LD_INT 3
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 2
68846: PUSH
68847: LD_INT 3
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: LIST
68858: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68859: LD_ADDR_VAR 0 56
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: LD_INT 3
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_INT 3
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 1
68886: NEG
68887: PUSH
68888: LD_INT 2
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: LIST
68899: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68900: LD_ADDR_VAR 0 57
68904: PUSH
68905: LD_INT 2
68907: NEG
68908: PUSH
68909: LD_INT 1
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 3
68918: NEG
68919: PUSH
68920: LD_INT 0
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 3
68929: NEG
68930: PUSH
68931: LD_INT 1
68933: NEG
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: LIST
68943: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68944: LD_ADDR_VAR 0 58
68948: PUSH
68949: LD_INT 2
68951: NEG
68952: PUSH
68953: LD_INT 3
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 3
68963: NEG
68964: PUSH
68965: LD_INT 2
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 3
68975: NEG
68976: PUSH
68977: LD_INT 3
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: LIST
68989: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68990: LD_ADDR_VAR 0 59
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: LD_INT 2
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 2
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: LD_INT 1
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: LIST
69033: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69034: LD_ADDR_VAR 0 60
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: LD_INT 1
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 2
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 2
69062: PUSH
69063: LD_INT 1
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: LIST
69074: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69075: LD_ADDR_VAR 0 61
69079: PUSH
69080: LD_INT 2
69082: PUSH
69083: LD_INT 1
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 2
69092: PUSH
69093: LD_INT 2
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: LD_INT 2
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: LIST
69114: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69115: LD_ADDR_VAR 0 62
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: LD_INT 2
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 0
69132: PUSH
69133: LD_INT 2
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: LD_INT 1
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69156: LD_ADDR_VAR 0 63
69160: PUSH
69161: LD_INT 1
69163: NEG
69164: PUSH
69165: LD_INT 1
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 2
69174: NEG
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 2
69185: NEG
69186: PUSH
69187: LD_INT 1
69189: NEG
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: LIST
69199: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69200: LD_ADDR_VAR 0 64
69204: PUSH
69205: LD_INT 1
69207: NEG
69208: PUSH
69209: LD_INT 2
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 2
69219: NEG
69220: PUSH
69221: LD_INT 1
69223: NEG
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 2
69231: NEG
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: LIST
69245: ST_TO_ADDR
// end ; 2 :
69246: GO 72512
69248: LD_INT 2
69250: DOUBLE
69251: EQUAL
69252: IFTRUE 69256
69254: GO 72511
69256: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69257: LD_ADDR_VAR 0 29
69261: PUSH
69262: LD_INT 4
69264: PUSH
69265: LD_INT 0
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 4
69274: PUSH
69275: LD_INT 1
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 5
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 5
69295: PUSH
69296: LD_INT 1
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 4
69305: PUSH
69306: LD_INT 1
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 3
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 3
69325: PUSH
69326: LD_INT 1
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 3
69336: PUSH
69337: LD_INT 2
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 5
69347: PUSH
69348: LD_INT 2
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 3
69357: PUSH
69358: LD_INT 3
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 3
69367: PUSH
69368: LD_INT 2
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 4
69377: PUSH
69378: LD_INT 3
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 4
69387: PUSH
69388: LD_INT 4
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 3
69397: PUSH
69398: LD_INT 4
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 2
69407: PUSH
69408: LD_INT 3
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: LD_INT 2
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 4
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 2
69437: PUSH
69438: LD_INT 4
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 0
69447: PUSH
69448: LD_INT 4
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 0
69457: PUSH
69458: LD_INT 3
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 1
69467: PUSH
69468: LD_INT 4
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 1
69477: PUSH
69478: LD_INT 5
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 0
69487: PUSH
69488: LD_INT 5
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 1
69497: NEG
69498: PUSH
69499: LD_INT 4
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 1
69508: NEG
69509: PUSH
69510: LD_INT 3
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 2
69519: PUSH
69520: LD_INT 5
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 2
69529: NEG
69530: PUSH
69531: LD_INT 3
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 3
69540: NEG
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 3
69551: NEG
69552: PUSH
69553: LD_INT 1
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 2
69563: NEG
69564: PUSH
69565: LD_INT 0
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: LD_INT 1
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 3
69585: NEG
69586: PUSH
69587: LD_INT 1
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 4
69596: NEG
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 4
69607: NEG
69608: PUSH
69609: LD_INT 1
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 4
69619: NEG
69620: PUSH
69621: LD_INT 2
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 2
69631: NEG
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 4
69642: NEG
69643: PUSH
69644: LD_INT 4
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 4
69654: NEG
69655: PUSH
69656: LD_INT 5
69658: NEG
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 3
69666: NEG
69667: PUSH
69668: LD_INT 4
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 3
69678: NEG
69679: PUSH
69680: LD_INT 3
69682: NEG
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 4
69690: NEG
69691: PUSH
69692: LD_INT 3
69694: NEG
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 5
69702: NEG
69703: PUSH
69704: LD_INT 4
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 5
69714: NEG
69715: PUSH
69716: LD_INT 5
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 3
69726: NEG
69727: PUSH
69728: LD_INT 5
69730: NEG
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 5
69738: NEG
69739: PUSH
69740: LD_INT 3
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69795: LD_ADDR_VAR 0 30
69799: PUSH
69800: LD_INT 4
69802: PUSH
69803: LD_INT 4
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 4
69812: PUSH
69813: LD_INT 3
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 5
69822: PUSH
69823: LD_INT 4
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 5
69832: PUSH
69833: LD_INT 5
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 4
69842: PUSH
69843: LD_INT 5
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 3
69852: PUSH
69853: LD_INT 4
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 3
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 5
69872: PUSH
69873: LD_INT 3
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 3
69882: PUSH
69883: LD_INT 5
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 0
69892: PUSH
69893: LD_INT 3
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 0
69902: PUSH
69903: LD_INT 2
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 1
69912: PUSH
69913: LD_INT 3
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: LD_INT 4
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 0
69932: PUSH
69933: LD_INT 4
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 1
69942: NEG
69943: PUSH
69944: LD_INT 3
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 1
69953: NEG
69954: PUSH
69955: LD_INT 2
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: LD_INT 4
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 2
69974: NEG
69975: PUSH
69976: LD_INT 2
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 4
69985: NEG
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 4
69996: NEG
69997: PUSH
69998: LD_INT 1
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: NEG
70009: PUSH
70010: LD_INT 0
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 3
70019: NEG
70020: PUSH
70021: LD_INT 1
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 4
70030: NEG
70031: PUSH
70032: LD_INT 1
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 5
70041: NEG
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 5
70052: NEG
70053: PUSH
70054: LD_INT 1
70056: NEG
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 5
70064: NEG
70065: PUSH
70066: LD_INT 2
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: NEG
70077: PUSH
70078: LD_INT 2
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 3
70087: NEG
70088: PUSH
70089: LD_INT 3
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 3
70099: NEG
70100: PUSH
70101: LD_INT 4
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 2
70111: NEG
70112: PUSH
70113: LD_INT 3
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 2
70123: NEG
70124: PUSH
70125: LD_INT 2
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 3
70135: NEG
70136: PUSH
70137: LD_INT 2
70139: NEG
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 4
70147: NEG
70148: PUSH
70149: LD_INT 3
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 4
70159: NEG
70160: PUSH
70161: LD_INT 4
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 2
70171: NEG
70172: PUSH
70173: LD_INT 4
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 4
70183: NEG
70184: PUSH
70185: LD_INT 2
70187: NEG
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: LD_INT 4
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: LD_INT 5
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: LD_INT 4
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 1
70228: PUSH
70229: LD_INT 3
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: LD_INT 3
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 1
70250: NEG
70251: PUSH
70252: LD_INT 4
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 1
70262: NEG
70263: PUSH
70264: LD_INT 5
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 2
70274: PUSH
70275: LD_INT 3
70277: NEG
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 2
70285: NEG
70286: PUSH
70287: LD_INT 5
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70342: LD_ADDR_VAR 0 31
70346: PUSH
70347: LD_INT 0
70349: PUSH
70350: LD_INT 4
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 0
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 1
70369: PUSH
70370: LD_INT 4
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 1
70379: PUSH
70380: LD_INT 5
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 0
70389: PUSH
70390: LD_INT 5
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 1
70399: NEG
70400: PUSH
70401: LD_INT 4
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: NEG
70411: PUSH
70412: LD_INT 3
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 2
70421: PUSH
70422: LD_INT 5
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 2
70431: NEG
70432: PUSH
70433: LD_INT 3
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 3
70442: NEG
70443: PUSH
70444: LD_INT 0
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 3
70453: NEG
70454: PUSH
70455: LD_INT 1
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 2
70465: NEG
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 2
70476: NEG
70477: PUSH
70478: LD_INT 1
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 3
70487: NEG
70488: PUSH
70489: LD_INT 1
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 4
70498: NEG
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 4
70509: NEG
70510: PUSH
70511: LD_INT 1
70513: NEG
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 4
70521: NEG
70522: PUSH
70523: LD_INT 2
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 2
70533: NEG
70534: PUSH
70535: LD_INT 2
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 4
70544: NEG
70545: PUSH
70546: LD_INT 4
70548: NEG
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 4
70556: NEG
70557: PUSH
70558: LD_INT 5
70560: NEG
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 3
70568: NEG
70569: PUSH
70570: LD_INT 4
70572: NEG
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 3
70580: NEG
70581: PUSH
70582: LD_INT 3
70584: NEG
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 4
70592: NEG
70593: PUSH
70594: LD_INT 3
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 5
70604: NEG
70605: PUSH
70606: LD_INT 4
70608: NEG
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 5
70616: NEG
70617: PUSH
70618: LD_INT 5
70620: NEG
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 3
70628: NEG
70629: PUSH
70630: LD_INT 5
70632: NEG
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 5
70640: NEG
70641: PUSH
70642: LD_INT 3
70644: NEG
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: LD_INT 3
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: LD_INT 4
70666: NEG
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 1
70674: PUSH
70675: LD_INT 3
70677: NEG
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: LD_INT 2
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 0
70696: PUSH
70697: LD_INT 2
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 1
70707: NEG
70708: PUSH
70709: LD_INT 3
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 1
70719: NEG
70720: PUSH
70721: LD_INT 4
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 2
70731: PUSH
70732: LD_INT 2
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 2
70742: NEG
70743: PUSH
70744: LD_INT 4
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 4
70754: PUSH
70755: LD_INT 0
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 4
70764: PUSH
70765: LD_INT 1
70767: NEG
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 5
70775: PUSH
70776: LD_INT 0
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 5
70785: PUSH
70786: LD_INT 1
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 4
70795: PUSH
70796: LD_INT 1
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 3
70805: PUSH
70806: LD_INT 0
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 3
70815: PUSH
70816: LD_INT 1
70818: NEG
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 3
70826: PUSH
70827: LD_INT 2
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 5
70837: PUSH
70838: LD_INT 2
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70892: LD_ADDR_VAR 0 32
70896: PUSH
70897: LD_INT 4
70899: NEG
70900: PUSH
70901: LD_INT 0
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 4
70910: NEG
70911: PUSH
70912: LD_INT 1
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 3
70922: NEG
70923: PUSH
70924: LD_INT 0
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 3
70933: NEG
70934: PUSH
70935: LD_INT 1
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 4
70944: NEG
70945: PUSH
70946: LD_INT 1
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 5
70955: NEG
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 5
70966: NEG
70967: PUSH
70968: LD_INT 1
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 5
70978: NEG
70979: PUSH
70980: LD_INT 2
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 3
70990: NEG
70991: PUSH
70992: LD_INT 2
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 3
71001: NEG
71002: PUSH
71003: LD_INT 3
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 3
71013: NEG
71014: PUSH
71015: LD_INT 4
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 2
71025: NEG
71026: PUSH
71027: LD_INT 3
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 2
71037: NEG
71038: PUSH
71039: LD_INT 2
71041: NEG
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 3
71049: NEG
71050: PUSH
71051: LD_INT 2
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 4
71061: NEG
71062: PUSH
71063: LD_INT 3
71065: NEG
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 4
71073: NEG
71074: PUSH
71075: LD_INT 4
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 2
71085: NEG
71086: PUSH
71087: LD_INT 4
71089: NEG
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 4
71097: NEG
71098: PUSH
71099: LD_INT 2
71101: NEG
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: LD_INT 4
71112: NEG
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 0
71120: PUSH
71121: LD_INT 5
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 1
71131: PUSH
71132: LD_INT 4
71134: NEG
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 1
71142: PUSH
71143: LD_INT 3
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 0
71153: PUSH
71154: LD_INT 3
71156: NEG
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 1
71164: NEG
71165: PUSH
71166: LD_INT 4
71168: NEG
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 1
71176: NEG
71177: PUSH
71178: LD_INT 5
71180: NEG
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 2
71188: PUSH
71189: LD_INT 3
71191: NEG
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 2
71199: NEG
71200: PUSH
71201: LD_INT 5
71203: NEG
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 3
71211: PUSH
71212: LD_INT 0
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 3
71221: PUSH
71222: LD_INT 1
71224: NEG
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 4
71232: PUSH
71233: LD_INT 0
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 4
71242: PUSH
71243: LD_INT 1
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 3
71252: PUSH
71253: LD_INT 1
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 2
71262: PUSH
71263: LD_INT 0
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 2
71272: PUSH
71273: LD_INT 1
71275: NEG
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 2
71283: PUSH
71284: LD_INT 2
71286: NEG
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 4
71294: PUSH
71295: LD_INT 2
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 4
71304: PUSH
71305: LD_INT 4
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 4
71314: PUSH
71315: LD_INT 3
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 5
71324: PUSH
71325: LD_INT 4
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 5
71334: PUSH
71335: LD_INT 5
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 4
71344: PUSH
71345: LD_INT 5
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 3
71354: PUSH
71355: LD_INT 4
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 3
71364: PUSH
71365: LD_INT 3
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 5
71374: PUSH
71375: LD_INT 3
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 3
71384: PUSH
71385: LD_INT 5
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71439: LD_ADDR_VAR 0 33
71443: PUSH
71444: LD_INT 4
71446: NEG
71447: PUSH
71448: LD_INT 4
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 4
71458: NEG
71459: PUSH
71460: LD_INT 5
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 3
71470: NEG
71471: PUSH
71472: LD_INT 4
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 3
71482: NEG
71483: PUSH
71484: LD_INT 3
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 4
71494: NEG
71495: PUSH
71496: LD_INT 3
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 5
71506: NEG
71507: PUSH
71508: LD_INT 4
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 5
71518: NEG
71519: PUSH
71520: LD_INT 5
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 3
71530: NEG
71531: PUSH
71532: LD_INT 5
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 5
71542: NEG
71543: PUSH
71544: LD_INT 3
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: LD_INT 3
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 0
71565: PUSH
71566: LD_INT 4
71568: NEG
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 1
71576: PUSH
71577: LD_INT 3
71579: NEG
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 1
71587: PUSH
71588: LD_INT 2
71590: NEG
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 0
71598: PUSH
71599: LD_INT 2
71601: NEG
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 1
71609: NEG
71610: PUSH
71611: LD_INT 3
71613: NEG
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 1
71621: NEG
71622: PUSH
71623: LD_INT 4
71625: NEG
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 2
71633: PUSH
71634: LD_INT 2
71636: NEG
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 2
71644: NEG
71645: PUSH
71646: LD_INT 4
71648: NEG
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 4
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 4
71666: PUSH
71667: LD_INT 1
71669: NEG
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 5
71677: PUSH
71678: LD_INT 0
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 5
71687: PUSH
71688: LD_INT 1
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 4
71697: PUSH
71698: LD_INT 1
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 3
71707: PUSH
71708: LD_INT 0
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 3
71717: PUSH
71718: LD_INT 1
71720: NEG
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 3
71728: PUSH
71729: LD_INT 2
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 5
71739: PUSH
71740: LD_INT 2
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 3
71749: PUSH
71750: LD_INT 3
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 3
71759: PUSH
71760: LD_INT 2
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 4
71769: PUSH
71770: LD_INT 3
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 4
71779: PUSH
71780: LD_INT 4
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 3
71789: PUSH
71790: LD_INT 4
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 2
71799: PUSH
71800: LD_INT 3
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 2
71809: PUSH
71810: LD_INT 2
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 4
71819: PUSH
71820: LD_INT 2
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 2
71829: PUSH
71830: LD_INT 4
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 0
71839: PUSH
71840: LD_INT 4
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: LD_INT 3
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 1
71859: PUSH
71860: LD_INT 4
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 1
71869: PUSH
71870: LD_INT 5
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 0
71879: PUSH
71880: LD_INT 5
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 1
71889: NEG
71890: PUSH
71891: LD_INT 4
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 1
71900: NEG
71901: PUSH
71902: LD_INT 3
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 2
71911: PUSH
71912: LD_INT 5
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 2
71921: NEG
71922: PUSH
71923: LD_INT 3
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71977: LD_ADDR_VAR 0 34
71981: PUSH
71982: LD_INT 0
71984: PUSH
71985: LD_INT 4
71987: NEG
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 0
71995: PUSH
71996: LD_INT 5
71998: NEG
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 1
72006: PUSH
72007: LD_INT 4
72009: NEG
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 1
72017: PUSH
72018: LD_INT 3
72020: NEG
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 0
72028: PUSH
72029: LD_INT 3
72031: NEG
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 1
72039: NEG
72040: PUSH
72041: LD_INT 4
72043: NEG
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 1
72051: NEG
72052: PUSH
72053: LD_INT 5
72055: NEG
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 2
72063: PUSH
72064: LD_INT 3
72066: NEG
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 2
72074: NEG
72075: PUSH
72076: LD_INT 5
72078: NEG
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 3
72086: PUSH
72087: LD_INT 0
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 3
72096: PUSH
72097: LD_INT 1
72099: NEG
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 4
72107: PUSH
72108: LD_INT 0
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 4
72117: PUSH
72118: LD_INT 1
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 3
72127: PUSH
72128: LD_INT 1
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 2
72137: PUSH
72138: LD_INT 0
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 2
72147: PUSH
72148: LD_INT 1
72150: NEG
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 2
72158: PUSH
72159: LD_INT 2
72161: NEG
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 4
72169: PUSH
72170: LD_INT 2
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PUSH
72177: LD_INT 4
72179: PUSH
72180: LD_INT 4
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 4
72189: PUSH
72190: LD_INT 3
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 5
72199: PUSH
72200: LD_INT 4
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 5
72209: PUSH
72210: LD_INT 5
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: LD_INT 4
72219: PUSH
72220: LD_INT 5
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 3
72229: PUSH
72230: LD_INT 4
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 3
72239: PUSH
72240: LD_INT 3
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 5
72249: PUSH
72250: LD_INT 3
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 3
72259: PUSH
72260: LD_INT 5
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: LD_INT 3
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 0
72279: PUSH
72280: LD_INT 2
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 1
72289: PUSH
72290: LD_INT 3
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 1
72299: PUSH
72300: LD_INT 4
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 0
72309: PUSH
72310: LD_INT 4
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 1
72319: NEG
72320: PUSH
72321: LD_INT 3
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 1
72330: NEG
72331: PUSH
72332: LD_INT 2
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 2
72341: PUSH
72342: LD_INT 4
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 2
72351: NEG
72352: PUSH
72353: LD_INT 2
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 4
72362: NEG
72363: PUSH
72364: LD_INT 0
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: LD_INT 4
72373: NEG
72374: PUSH
72375: LD_INT 1
72377: NEG
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 3
72385: NEG
72386: PUSH
72387: LD_INT 0
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 3
72396: NEG
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 4
72407: NEG
72408: PUSH
72409: LD_INT 1
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 5
72418: NEG
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 5
72429: NEG
72430: PUSH
72431: LD_INT 1
72433: NEG
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 5
72441: NEG
72442: PUSH
72443: LD_INT 2
72445: NEG
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 3
72453: NEG
72454: PUSH
72455: LD_INT 2
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: ST_TO_ADDR
// end ; end ;
72509: GO 72512
72511: POP
// case btype of b_depot , b_warehouse :
72512: LD_VAR 0 1
72516: PUSH
72517: LD_INT 0
72519: DOUBLE
72520: EQUAL
72521: IFTRUE 72531
72523: LD_INT 1
72525: DOUBLE
72526: EQUAL
72527: IFTRUE 72531
72529: GO 72732
72531: POP
// case nation of nation_american :
72532: LD_VAR 0 5
72536: PUSH
72537: LD_INT 1
72539: DOUBLE
72540: EQUAL
72541: IFTRUE 72545
72543: GO 72601
72545: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72546: LD_ADDR_VAR 0 9
72550: PUSH
72551: LD_VAR 0 11
72555: PUSH
72556: LD_VAR 0 12
72560: PUSH
72561: LD_VAR 0 13
72565: PUSH
72566: LD_VAR 0 14
72570: PUSH
72571: LD_VAR 0 15
72575: PUSH
72576: LD_VAR 0 16
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: PUSH
72589: LD_VAR 0 4
72593: PUSH
72594: LD_INT 1
72596: PLUS
72597: ARRAY
72598: ST_TO_ADDR
72599: GO 72730
72601: LD_INT 2
72603: DOUBLE
72604: EQUAL
72605: IFTRUE 72609
72607: GO 72665
72609: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72610: LD_ADDR_VAR 0 9
72614: PUSH
72615: LD_VAR 0 17
72619: PUSH
72620: LD_VAR 0 18
72624: PUSH
72625: LD_VAR 0 19
72629: PUSH
72630: LD_VAR 0 20
72634: PUSH
72635: LD_VAR 0 21
72639: PUSH
72640: LD_VAR 0 22
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: PUSH
72653: LD_VAR 0 4
72657: PUSH
72658: LD_INT 1
72660: PLUS
72661: ARRAY
72662: ST_TO_ADDR
72663: GO 72730
72665: LD_INT 3
72667: DOUBLE
72668: EQUAL
72669: IFTRUE 72673
72671: GO 72729
72673: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72674: LD_ADDR_VAR 0 9
72678: PUSH
72679: LD_VAR 0 23
72683: PUSH
72684: LD_VAR 0 24
72688: PUSH
72689: LD_VAR 0 25
72693: PUSH
72694: LD_VAR 0 26
72698: PUSH
72699: LD_VAR 0 27
72703: PUSH
72704: LD_VAR 0 28
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: PUSH
72717: LD_VAR 0 4
72721: PUSH
72722: LD_INT 1
72724: PLUS
72725: ARRAY
72726: ST_TO_ADDR
72727: GO 72730
72729: POP
72730: GO 73285
72732: LD_INT 2
72734: DOUBLE
72735: EQUAL
72736: IFTRUE 72746
72738: LD_INT 3
72740: DOUBLE
72741: EQUAL
72742: IFTRUE 72746
72744: GO 72802
72746: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72747: LD_ADDR_VAR 0 9
72751: PUSH
72752: LD_VAR 0 29
72756: PUSH
72757: LD_VAR 0 30
72761: PUSH
72762: LD_VAR 0 31
72766: PUSH
72767: LD_VAR 0 32
72771: PUSH
72772: LD_VAR 0 33
72776: PUSH
72777: LD_VAR 0 34
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: PUSH
72790: LD_VAR 0 4
72794: PUSH
72795: LD_INT 1
72797: PLUS
72798: ARRAY
72799: ST_TO_ADDR
72800: GO 73285
72802: LD_INT 16
72804: DOUBLE
72805: EQUAL
72806: IFTRUE 72864
72808: LD_INT 17
72810: DOUBLE
72811: EQUAL
72812: IFTRUE 72864
72814: LD_INT 18
72816: DOUBLE
72817: EQUAL
72818: IFTRUE 72864
72820: LD_INT 19
72822: DOUBLE
72823: EQUAL
72824: IFTRUE 72864
72826: LD_INT 22
72828: DOUBLE
72829: EQUAL
72830: IFTRUE 72864
72832: LD_INT 20
72834: DOUBLE
72835: EQUAL
72836: IFTRUE 72864
72838: LD_INT 21
72840: DOUBLE
72841: EQUAL
72842: IFTRUE 72864
72844: LD_INT 23
72846: DOUBLE
72847: EQUAL
72848: IFTRUE 72864
72850: LD_INT 24
72852: DOUBLE
72853: EQUAL
72854: IFTRUE 72864
72856: LD_INT 25
72858: DOUBLE
72859: EQUAL
72860: IFTRUE 72864
72862: GO 72920
72864: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72865: LD_ADDR_VAR 0 9
72869: PUSH
72870: LD_VAR 0 35
72874: PUSH
72875: LD_VAR 0 36
72879: PUSH
72880: LD_VAR 0 37
72884: PUSH
72885: LD_VAR 0 38
72889: PUSH
72890: LD_VAR 0 39
72894: PUSH
72895: LD_VAR 0 40
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: PUSH
72908: LD_VAR 0 4
72912: PUSH
72913: LD_INT 1
72915: PLUS
72916: ARRAY
72917: ST_TO_ADDR
72918: GO 73285
72920: LD_INT 6
72922: DOUBLE
72923: EQUAL
72924: IFTRUE 72976
72926: LD_INT 7
72928: DOUBLE
72929: EQUAL
72930: IFTRUE 72976
72932: LD_INT 8
72934: DOUBLE
72935: EQUAL
72936: IFTRUE 72976
72938: LD_INT 13
72940: DOUBLE
72941: EQUAL
72942: IFTRUE 72976
72944: LD_INT 12
72946: DOUBLE
72947: EQUAL
72948: IFTRUE 72976
72950: LD_INT 15
72952: DOUBLE
72953: EQUAL
72954: IFTRUE 72976
72956: LD_INT 11
72958: DOUBLE
72959: EQUAL
72960: IFTRUE 72976
72962: LD_INT 14
72964: DOUBLE
72965: EQUAL
72966: IFTRUE 72976
72968: LD_INT 10
72970: DOUBLE
72971: EQUAL
72972: IFTRUE 72976
72974: GO 73032
72976: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72977: LD_ADDR_VAR 0 9
72981: PUSH
72982: LD_VAR 0 41
72986: PUSH
72987: LD_VAR 0 42
72991: PUSH
72992: LD_VAR 0 43
72996: PUSH
72997: LD_VAR 0 44
73001: PUSH
73002: LD_VAR 0 45
73006: PUSH
73007: LD_VAR 0 46
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: PUSH
73020: LD_VAR 0 4
73024: PUSH
73025: LD_INT 1
73027: PLUS
73028: ARRAY
73029: ST_TO_ADDR
73030: GO 73285
73032: LD_INT 36
73034: DOUBLE
73035: EQUAL
73036: IFTRUE 73040
73038: GO 73096
73040: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73041: LD_ADDR_VAR 0 9
73045: PUSH
73046: LD_VAR 0 47
73050: PUSH
73051: LD_VAR 0 48
73055: PUSH
73056: LD_VAR 0 49
73060: PUSH
73061: LD_VAR 0 50
73065: PUSH
73066: LD_VAR 0 51
73070: PUSH
73071: LD_VAR 0 52
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: PUSH
73084: LD_VAR 0 4
73088: PUSH
73089: LD_INT 1
73091: PLUS
73092: ARRAY
73093: ST_TO_ADDR
73094: GO 73285
73096: LD_INT 4
73098: DOUBLE
73099: EQUAL
73100: IFTRUE 73122
73102: LD_INT 5
73104: DOUBLE
73105: EQUAL
73106: IFTRUE 73122
73108: LD_INT 34
73110: DOUBLE
73111: EQUAL
73112: IFTRUE 73122
73114: LD_INT 37
73116: DOUBLE
73117: EQUAL
73118: IFTRUE 73122
73120: GO 73178
73122: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73123: LD_ADDR_VAR 0 9
73127: PUSH
73128: LD_VAR 0 53
73132: PUSH
73133: LD_VAR 0 54
73137: PUSH
73138: LD_VAR 0 55
73142: PUSH
73143: LD_VAR 0 56
73147: PUSH
73148: LD_VAR 0 57
73152: PUSH
73153: LD_VAR 0 58
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: PUSH
73166: LD_VAR 0 4
73170: PUSH
73171: LD_INT 1
73173: PLUS
73174: ARRAY
73175: ST_TO_ADDR
73176: GO 73285
73178: LD_INT 31
73180: DOUBLE
73181: EQUAL
73182: IFTRUE 73228
73184: LD_INT 32
73186: DOUBLE
73187: EQUAL
73188: IFTRUE 73228
73190: LD_INT 33
73192: DOUBLE
73193: EQUAL
73194: IFTRUE 73228
73196: LD_INT 27
73198: DOUBLE
73199: EQUAL
73200: IFTRUE 73228
73202: LD_INT 26
73204: DOUBLE
73205: EQUAL
73206: IFTRUE 73228
73208: LD_INT 28
73210: DOUBLE
73211: EQUAL
73212: IFTRUE 73228
73214: LD_INT 29
73216: DOUBLE
73217: EQUAL
73218: IFTRUE 73228
73220: LD_INT 30
73222: DOUBLE
73223: EQUAL
73224: IFTRUE 73228
73226: GO 73284
73228: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73229: LD_ADDR_VAR 0 9
73233: PUSH
73234: LD_VAR 0 59
73238: PUSH
73239: LD_VAR 0 60
73243: PUSH
73244: LD_VAR 0 61
73248: PUSH
73249: LD_VAR 0 62
73253: PUSH
73254: LD_VAR 0 63
73258: PUSH
73259: LD_VAR 0 64
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: PUSH
73272: LD_VAR 0 4
73276: PUSH
73277: LD_INT 1
73279: PLUS
73280: ARRAY
73281: ST_TO_ADDR
73282: GO 73285
73284: POP
// temp_list2 = [ ] ;
73285: LD_ADDR_VAR 0 10
73289: PUSH
73290: EMPTY
73291: ST_TO_ADDR
// for i in temp_list do
73292: LD_ADDR_VAR 0 8
73296: PUSH
73297: LD_VAR 0 9
73301: PUSH
73302: FOR_IN
73303: IFFALSE 73355
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73305: LD_ADDR_VAR 0 10
73309: PUSH
73310: LD_VAR 0 10
73314: PUSH
73315: LD_VAR 0 8
73319: PUSH
73320: LD_INT 1
73322: ARRAY
73323: PUSH
73324: LD_VAR 0 2
73328: PLUS
73329: PUSH
73330: LD_VAR 0 8
73334: PUSH
73335: LD_INT 2
73337: ARRAY
73338: PUSH
73339: LD_VAR 0 3
73343: PLUS
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: EMPTY
73350: LIST
73351: ADD
73352: ST_TO_ADDR
73353: GO 73302
73355: POP
73356: POP
// result = temp_list2 ;
73357: LD_ADDR_VAR 0 7
73361: PUSH
73362: LD_VAR 0 10
73366: ST_TO_ADDR
// end ;
73367: LD_VAR 0 7
73371: RET
// export function EnemyInRange ( unit , dist ) ; begin
73372: LD_INT 0
73374: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73375: LD_ADDR_VAR 0 3
73379: PUSH
73380: LD_VAR 0 1
73384: PPUSH
73385: CALL_OW 255
73389: PPUSH
73390: LD_VAR 0 1
73394: PPUSH
73395: CALL_OW 250
73399: PPUSH
73400: LD_VAR 0 1
73404: PPUSH
73405: CALL_OW 251
73409: PPUSH
73410: LD_VAR 0 2
73414: PPUSH
73415: CALL 46745 0 4
73419: PUSH
73420: LD_INT 4
73422: ARRAY
73423: ST_TO_ADDR
// end ;
73424: LD_VAR 0 3
73428: RET
// export function PlayerSeeMe ( unit ) ; begin
73429: LD_INT 0
73431: PPUSH
// result := See ( your_side , unit ) ;
73432: LD_ADDR_VAR 0 2
73436: PUSH
73437: LD_OWVAR 2
73441: PPUSH
73442: LD_VAR 0 1
73446: PPUSH
73447: CALL_OW 292
73451: ST_TO_ADDR
// end ;
73452: LD_VAR 0 2
73456: RET
// export function ReverseDir ( unit ) ; begin
73457: LD_INT 0
73459: PPUSH
// if not unit then
73460: LD_VAR 0 1
73464: NOT
73465: IFFALSE 73469
// exit ;
73467: GO 73492
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73469: LD_ADDR_VAR 0 2
73473: PUSH
73474: LD_VAR 0 1
73478: PPUSH
73479: CALL_OW 254
73483: PUSH
73484: LD_INT 3
73486: PLUS
73487: PUSH
73488: LD_INT 6
73490: MOD
73491: ST_TO_ADDR
// end ;
73492: LD_VAR 0 2
73496: RET
// export function ReverseArray ( array ) ; var i ; begin
73497: LD_INT 0
73499: PPUSH
73500: PPUSH
// if not array then
73501: LD_VAR 0 1
73505: NOT
73506: IFFALSE 73510
// exit ;
73508: GO 73565
// result := [ ] ;
73510: LD_ADDR_VAR 0 2
73514: PUSH
73515: EMPTY
73516: ST_TO_ADDR
// for i := array downto 1 do
73517: LD_ADDR_VAR 0 3
73521: PUSH
73522: DOUBLE
73523: LD_VAR 0 1
73527: INC
73528: ST_TO_ADDR
73529: LD_INT 1
73531: PUSH
73532: FOR_DOWNTO
73533: IFFALSE 73563
// result := Join ( result , array [ i ] ) ;
73535: LD_ADDR_VAR 0 2
73539: PUSH
73540: LD_VAR 0 2
73544: PPUSH
73545: LD_VAR 0 1
73549: PUSH
73550: LD_VAR 0 3
73554: ARRAY
73555: PPUSH
73556: CALL 78230 0 2
73560: ST_TO_ADDR
73561: GO 73532
73563: POP
73564: POP
// end ;
73565: LD_VAR 0 2
73569: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73570: LD_INT 0
73572: PPUSH
73573: PPUSH
73574: PPUSH
73575: PPUSH
73576: PPUSH
73577: PPUSH
// if not unit or not hexes then
73578: LD_VAR 0 1
73582: NOT
73583: PUSH
73584: LD_VAR 0 2
73588: NOT
73589: OR
73590: IFFALSE 73594
// exit ;
73592: GO 73717
// dist := 9999 ;
73594: LD_ADDR_VAR 0 5
73598: PUSH
73599: LD_INT 9999
73601: ST_TO_ADDR
// for i = 1 to hexes do
73602: LD_ADDR_VAR 0 4
73606: PUSH
73607: DOUBLE
73608: LD_INT 1
73610: DEC
73611: ST_TO_ADDR
73612: LD_VAR 0 2
73616: PUSH
73617: FOR_TO
73618: IFFALSE 73705
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73620: LD_ADDR_VAR 0 6
73624: PUSH
73625: LD_VAR 0 1
73629: PPUSH
73630: LD_VAR 0 2
73634: PUSH
73635: LD_VAR 0 4
73639: ARRAY
73640: PUSH
73641: LD_INT 1
73643: ARRAY
73644: PPUSH
73645: LD_VAR 0 2
73649: PUSH
73650: LD_VAR 0 4
73654: ARRAY
73655: PUSH
73656: LD_INT 2
73658: ARRAY
73659: PPUSH
73660: CALL_OW 297
73664: ST_TO_ADDR
// if tdist < dist then
73665: LD_VAR 0 6
73669: PUSH
73670: LD_VAR 0 5
73674: LESS
73675: IFFALSE 73703
// begin hex := hexes [ i ] ;
73677: LD_ADDR_VAR 0 8
73681: PUSH
73682: LD_VAR 0 2
73686: PUSH
73687: LD_VAR 0 4
73691: ARRAY
73692: ST_TO_ADDR
// dist := tdist ;
73693: LD_ADDR_VAR 0 5
73697: PUSH
73698: LD_VAR 0 6
73702: ST_TO_ADDR
// end ; end ;
73703: GO 73617
73705: POP
73706: POP
// result := hex ;
73707: LD_ADDR_VAR 0 3
73711: PUSH
73712: LD_VAR 0 8
73716: ST_TO_ADDR
// end ;
73717: LD_VAR 0 3
73721: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73722: LD_INT 0
73724: PPUSH
73725: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73726: LD_VAR 0 1
73730: NOT
73731: PUSH
73732: LD_VAR 0 1
73736: PUSH
73737: LD_INT 21
73739: PUSH
73740: LD_INT 2
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: LD_INT 23
73749: PUSH
73750: LD_INT 2
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PPUSH
73761: CALL_OW 69
73765: IN
73766: NOT
73767: OR
73768: IFFALSE 73772
// exit ;
73770: GO 73819
// for i = 1 to 3 do
73772: LD_ADDR_VAR 0 3
73776: PUSH
73777: DOUBLE
73778: LD_INT 1
73780: DEC
73781: ST_TO_ADDR
73782: LD_INT 3
73784: PUSH
73785: FOR_TO
73786: IFFALSE 73817
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73788: LD_VAR 0 1
73792: PPUSH
73793: CALL_OW 250
73797: PPUSH
73798: LD_VAR 0 1
73802: PPUSH
73803: CALL_OW 251
73807: PPUSH
73808: LD_INT 1
73810: PPUSH
73811: CALL_OW 453
73815: GO 73785
73817: POP
73818: POP
// end ;
73819: LD_VAR 0 2
73823: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73824: LD_INT 0
73826: PPUSH
73827: PPUSH
73828: PPUSH
73829: PPUSH
73830: PPUSH
73831: PPUSH
// if not unit or not enemy_unit then
73832: LD_VAR 0 1
73836: NOT
73837: PUSH
73838: LD_VAR 0 2
73842: NOT
73843: OR
73844: IFFALSE 73848
// exit ;
73846: GO 74315
// if GetLives ( i ) < 250 then
73848: LD_VAR 0 4
73852: PPUSH
73853: CALL_OW 256
73857: PUSH
73858: LD_INT 250
73860: LESS
73861: IFFALSE 73874
// begin ComAutodestruct ( i ) ;
73863: LD_VAR 0 4
73867: PPUSH
73868: CALL 73722 0 1
// exit ;
73872: GO 74315
// end ; x := GetX ( enemy_unit ) ;
73874: LD_ADDR_VAR 0 7
73878: PUSH
73879: LD_VAR 0 2
73883: PPUSH
73884: CALL_OW 250
73888: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73889: LD_ADDR_VAR 0 8
73893: PUSH
73894: LD_VAR 0 2
73898: PPUSH
73899: CALL_OW 251
73903: ST_TO_ADDR
// if not x or not y then
73904: LD_VAR 0 7
73908: NOT
73909: PUSH
73910: LD_VAR 0 8
73914: NOT
73915: OR
73916: IFFALSE 73920
// exit ;
73918: GO 74315
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73920: LD_ADDR_VAR 0 6
73924: PUSH
73925: LD_VAR 0 7
73929: PPUSH
73930: LD_INT 0
73932: PPUSH
73933: LD_INT 4
73935: PPUSH
73936: CALL_OW 272
73940: PUSH
73941: LD_VAR 0 8
73945: PPUSH
73946: LD_INT 0
73948: PPUSH
73949: LD_INT 4
73951: PPUSH
73952: CALL_OW 273
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_VAR 0 7
73965: PPUSH
73966: LD_INT 1
73968: PPUSH
73969: LD_INT 4
73971: PPUSH
73972: CALL_OW 272
73976: PUSH
73977: LD_VAR 0 8
73981: PPUSH
73982: LD_INT 1
73984: PPUSH
73985: LD_INT 4
73987: PPUSH
73988: CALL_OW 273
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_VAR 0 7
74001: PPUSH
74002: LD_INT 2
74004: PPUSH
74005: LD_INT 4
74007: PPUSH
74008: CALL_OW 272
74012: PUSH
74013: LD_VAR 0 8
74017: PPUSH
74018: LD_INT 2
74020: PPUSH
74021: LD_INT 4
74023: PPUSH
74024: CALL_OW 273
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PUSH
74033: LD_VAR 0 7
74037: PPUSH
74038: LD_INT 3
74040: PPUSH
74041: LD_INT 4
74043: PPUSH
74044: CALL_OW 272
74048: PUSH
74049: LD_VAR 0 8
74053: PPUSH
74054: LD_INT 3
74056: PPUSH
74057: LD_INT 4
74059: PPUSH
74060: CALL_OW 273
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PUSH
74069: LD_VAR 0 7
74073: PPUSH
74074: LD_INT 4
74076: PPUSH
74077: LD_INT 4
74079: PPUSH
74080: CALL_OW 272
74084: PUSH
74085: LD_VAR 0 8
74089: PPUSH
74090: LD_INT 4
74092: PPUSH
74093: LD_INT 4
74095: PPUSH
74096: CALL_OW 273
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_VAR 0 7
74109: PPUSH
74110: LD_INT 5
74112: PPUSH
74113: LD_INT 4
74115: PPUSH
74116: CALL_OW 272
74120: PUSH
74121: LD_VAR 0 8
74125: PPUSH
74126: LD_INT 5
74128: PPUSH
74129: LD_INT 4
74131: PPUSH
74132: CALL_OW 273
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: ST_TO_ADDR
// for i = tmp downto 1 do
74149: LD_ADDR_VAR 0 4
74153: PUSH
74154: DOUBLE
74155: LD_VAR 0 6
74159: INC
74160: ST_TO_ADDR
74161: LD_INT 1
74163: PUSH
74164: FOR_DOWNTO
74165: IFFALSE 74266
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74167: LD_VAR 0 6
74171: PUSH
74172: LD_VAR 0 4
74176: ARRAY
74177: PUSH
74178: LD_INT 1
74180: ARRAY
74181: PPUSH
74182: LD_VAR 0 6
74186: PUSH
74187: LD_VAR 0 4
74191: ARRAY
74192: PUSH
74193: LD_INT 2
74195: ARRAY
74196: PPUSH
74197: CALL_OW 488
74201: NOT
74202: PUSH
74203: LD_VAR 0 6
74207: PUSH
74208: LD_VAR 0 4
74212: ARRAY
74213: PUSH
74214: LD_INT 1
74216: ARRAY
74217: PPUSH
74218: LD_VAR 0 6
74222: PUSH
74223: LD_VAR 0 4
74227: ARRAY
74228: PUSH
74229: LD_INT 2
74231: ARRAY
74232: PPUSH
74233: CALL_OW 428
74237: PUSH
74238: LD_INT 0
74240: NONEQUAL
74241: OR
74242: IFFALSE 74264
// tmp := Delete ( tmp , i ) ;
74244: LD_ADDR_VAR 0 6
74248: PUSH
74249: LD_VAR 0 6
74253: PPUSH
74254: LD_VAR 0 4
74258: PPUSH
74259: CALL_OW 3
74263: ST_TO_ADDR
74264: GO 74164
74266: POP
74267: POP
// j := GetClosestHex ( unit , tmp ) ;
74268: LD_ADDR_VAR 0 5
74272: PUSH
74273: LD_VAR 0 1
74277: PPUSH
74278: LD_VAR 0 6
74282: PPUSH
74283: CALL 73570 0 2
74287: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74288: LD_VAR 0 1
74292: PPUSH
74293: LD_VAR 0 5
74297: PUSH
74298: LD_INT 1
74300: ARRAY
74301: PPUSH
74302: LD_VAR 0 5
74306: PUSH
74307: LD_INT 2
74309: ARRAY
74310: PPUSH
74311: CALL_OW 111
// end ;
74315: LD_VAR 0 3
74319: RET
// export function PrepareApemanSoldier ( ) ; begin
74320: LD_INT 0
74322: PPUSH
// uc_nation := 0 ;
74323: LD_ADDR_OWVAR 21
74327: PUSH
74328: LD_INT 0
74330: ST_TO_ADDR
// hc_sex := sex_male ;
74331: LD_ADDR_OWVAR 27
74335: PUSH
74336: LD_INT 1
74338: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74339: LD_ADDR_OWVAR 28
74343: PUSH
74344: LD_INT 15
74346: ST_TO_ADDR
// hc_gallery :=  ;
74347: LD_ADDR_OWVAR 33
74351: PUSH
74352: LD_STRING 
74354: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74355: LD_ADDR_OWVAR 31
74359: PUSH
74360: LD_INT 0
74362: PPUSH
74363: LD_INT 3
74365: PPUSH
74366: CALL_OW 12
74370: PUSH
74371: LD_INT 0
74373: PPUSH
74374: LD_INT 3
74376: PPUSH
74377: CALL_OW 12
74381: PUSH
74382: LD_INT 0
74384: PUSH
74385: LD_INT 0
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: ST_TO_ADDR
// end ;
74394: LD_VAR 0 1
74398: RET
// export function PrepareApemanEngineer ( ) ; begin
74399: LD_INT 0
74401: PPUSH
// uc_nation := 0 ;
74402: LD_ADDR_OWVAR 21
74406: PUSH
74407: LD_INT 0
74409: ST_TO_ADDR
// hc_sex := sex_male ;
74410: LD_ADDR_OWVAR 27
74414: PUSH
74415: LD_INT 1
74417: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74418: LD_ADDR_OWVAR 28
74422: PUSH
74423: LD_INT 16
74425: ST_TO_ADDR
// hc_gallery :=  ;
74426: LD_ADDR_OWVAR 33
74430: PUSH
74431: LD_STRING 
74433: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74434: LD_ADDR_OWVAR 31
74438: PUSH
74439: LD_INT 0
74441: PPUSH
74442: LD_INT 3
74444: PPUSH
74445: CALL_OW 12
74449: PUSH
74450: LD_INT 0
74452: PPUSH
74453: LD_INT 3
74455: PPUSH
74456: CALL_OW 12
74460: PUSH
74461: LD_INT 0
74463: PUSH
74464: LD_INT 0
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: ST_TO_ADDR
// end ;
74473: LD_VAR 0 1
74477: RET
// export function PrepareApeman ( agressivity ) ; begin
74478: LD_INT 0
74480: PPUSH
// uc_side := 0 ;
74481: LD_ADDR_OWVAR 20
74485: PUSH
74486: LD_INT 0
74488: ST_TO_ADDR
// uc_nation := 0 ;
74489: LD_ADDR_OWVAR 21
74493: PUSH
74494: LD_INT 0
74496: ST_TO_ADDR
// hc_sex := sex_male ;
74497: LD_ADDR_OWVAR 27
74501: PUSH
74502: LD_INT 1
74504: ST_TO_ADDR
// hc_class := class_apeman ;
74505: LD_ADDR_OWVAR 28
74509: PUSH
74510: LD_INT 12
74512: ST_TO_ADDR
// hc_gallery :=  ;
74513: LD_ADDR_OWVAR 33
74517: PUSH
74518: LD_STRING 
74520: ST_TO_ADDR
// if agressivity = 0 then
74521: LD_VAR 0 1
74525: PUSH
74526: LD_INT 0
74528: EQUAL
74529: IFFALSE 74541
// hc_agressivity := 0 else
74531: LD_ADDR_OWVAR 35
74535: PUSH
74536: LD_INT 0
74538: ST_TO_ADDR
74539: GO 74562
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74541: LD_ADDR_OWVAR 35
74545: PUSH
74546: LD_VAR 0 1
74550: NEG
74551: PPUSH
74552: LD_VAR 0 1
74556: PPUSH
74557: CALL_OW 12
74561: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74562: LD_ADDR_OWVAR 31
74566: PUSH
74567: LD_INT 0
74569: PPUSH
74570: LD_INT 3
74572: PPUSH
74573: CALL_OW 12
74577: PUSH
74578: LD_INT 0
74580: PPUSH
74581: LD_INT 3
74583: PPUSH
74584: CALL_OW 12
74588: PUSH
74589: LD_INT 0
74591: PUSH
74592: LD_INT 0
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: LIST
74599: LIST
74600: ST_TO_ADDR
// end ;
74601: LD_VAR 0 2
74605: RET
// export function PrepareTiger ( agressivity ) ; begin
74606: LD_INT 0
74608: PPUSH
// uc_side := 0 ;
74609: LD_ADDR_OWVAR 20
74613: PUSH
74614: LD_INT 0
74616: ST_TO_ADDR
// uc_nation := 0 ;
74617: LD_ADDR_OWVAR 21
74621: PUSH
74622: LD_INT 0
74624: ST_TO_ADDR
// hc_class := class_tiger ;
74625: LD_ADDR_OWVAR 28
74629: PUSH
74630: LD_INT 14
74632: ST_TO_ADDR
// hc_gallery :=  ;
74633: LD_ADDR_OWVAR 33
74637: PUSH
74638: LD_STRING 
74640: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74641: LD_ADDR_OWVAR 35
74645: PUSH
74646: LD_VAR 0 1
74650: NEG
74651: PPUSH
74652: LD_VAR 0 1
74656: PPUSH
74657: CALL_OW 12
74661: ST_TO_ADDR
// end ;
74662: LD_VAR 0 2
74666: RET
// export function PrepareEnchidna ( ) ; begin
74667: LD_INT 0
74669: PPUSH
// uc_side := 0 ;
74670: LD_ADDR_OWVAR 20
74674: PUSH
74675: LD_INT 0
74677: ST_TO_ADDR
// uc_nation := 0 ;
74678: LD_ADDR_OWVAR 21
74682: PUSH
74683: LD_INT 0
74685: ST_TO_ADDR
// hc_class := class_baggie ;
74686: LD_ADDR_OWVAR 28
74690: PUSH
74691: LD_INT 13
74693: ST_TO_ADDR
// hc_gallery :=  ;
74694: LD_ADDR_OWVAR 33
74698: PUSH
74699: LD_STRING 
74701: ST_TO_ADDR
// end ;
74702: LD_VAR 0 1
74706: RET
// export function PrepareFrog ( ) ; begin
74707: LD_INT 0
74709: PPUSH
// uc_side := 0 ;
74710: LD_ADDR_OWVAR 20
74714: PUSH
74715: LD_INT 0
74717: ST_TO_ADDR
// uc_nation := 0 ;
74718: LD_ADDR_OWVAR 21
74722: PUSH
74723: LD_INT 0
74725: ST_TO_ADDR
// hc_class := class_frog ;
74726: LD_ADDR_OWVAR 28
74730: PUSH
74731: LD_INT 19
74733: ST_TO_ADDR
// hc_gallery :=  ;
74734: LD_ADDR_OWVAR 33
74738: PUSH
74739: LD_STRING 
74741: ST_TO_ADDR
// end ;
74742: LD_VAR 0 1
74746: RET
// export function PrepareFish ( ) ; begin
74747: LD_INT 0
74749: PPUSH
// uc_side := 0 ;
74750: LD_ADDR_OWVAR 20
74754: PUSH
74755: LD_INT 0
74757: ST_TO_ADDR
// uc_nation := 0 ;
74758: LD_ADDR_OWVAR 21
74762: PUSH
74763: LD_INT 0
74765: ST_TO_ADDR
// hc_class := class_fish ;
74766: LD_ADDR_OWVAR 28
74770: PUSH
74771: LD_INT 20
74773: ST_TO_ADDR
// hc_gallery :=  ;
74774: LD_ADDR_OWVAR 33
74778: PUSH
74779: LD_STRING 
74781: ST_TO_ADDR
// end ;
74782: LD_VAR 0 1
74786: RET
// export function PrepareBird ( ) ; begin
74787: LD_INT 0
74789: PPUSH
// uc_side := 0 ;
74790: LD_ADDR_OWVAR 20
74794: PUSH
74795: LD_INT 0
74797: ST_TO_ADDR
// uc_nation := 0 ;
74798: LD_ADDR_OWVAR 21
74802: PUSH
74803: LD_INT 0
74805: ST_TO_ADDR
// hc_class := class_phororhacos ;
74806: LD_ADDR_OWVAR 28
74810: PUSH
74811: LD_INT 18
74813: ST_TO_ADDR
// hc_gallery :=  ;
74814: LD_ADDR_OWVAR 33
74818: PUSH
74819: LD_STRING 
74821: ST_TO_ADDR
// end ;
74822: LD_VAR 0 1
74826: RET
// export function PrepareHorse ( ) ; begin
74827: LD_INT 0
74829: PPUSH
// uc_side := 0 ;
74830: LD_ADDR_OWVAR 20
74834: PUSH
74835: LD_INT 0
74837: ST_TO_ADDR
// uc_nation := 0 ;
74838: LD_ADDR_OWVAR 21
74842: PUSH
74843: LD_INT 0
74845: ST_TO_ADDR
// hc_class := class_horse ;
74846: LD_ADDR_OWVAR 28
74850: PUSH
74851: LD_INT 21
74853: ST_TO_ADDR
// hc_gallery :=  ;
74854: LD_ADDR_OWVAR 33
74858: PUSH
74859: LD_STRING 
74861: ST_TO_ADDR
// end ;
74862: LD_VAR 0 1
74866: RET
// export function PrepareMastodont ( ) ; begin
74867: LD_INT 0
74869: PPUSH
// uc_side := 0 ;
74870: LD_ADDR_OWVAR 20
74874: PUSH
74875: LD_INT 0
74877: ST_TO_ADDR
// uc_nation := 0 ;
74878: LD_ADDR_OWVAR 21
74882: PUSH
74883: LD_INT 0
74885: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74886: LD_ADDR_OWVAR 37
74890: PUSH
74891: LD_INT 31
74893: ST_TO_ADDR
// vc_control := control_rider ;
74894: LD_ADDR_OWVAR 38
74898: PUSH
74899: LD_INT 4
74901: ST_TO_ADDR
// end ;
74902: LD_VAR 0 1
74906: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74907: LD_INT 0
74909: PPUSH
74910: PPUSH
74911: PPUSH
// uc_side = 0 ;
74912: LD_ADDR_OWVAR 20
74916: PUSH
74917: LD_INT 0
74919: ST_TO_ADDR
// uc_nation = 0 ;
74920: LD_ADDR_OWVAR 21
74924: PUSH
74925: LD_INT 0
74927: ST_TO_ADDR
// InitHc_All ( ) ;
74928: CALL_OW 584
// InitVc ;
74932: CALL_OW 20
// if mastodonts then
74936: LD_VAR 0 6
74940: IFFALSE 75007
// for i = 1 to mastodonts do
74942: LD_ADDR_VAR 0 11
74946: PUSH
74947: DOUBLE
74948: LD_INT 1
74950: DEC
74951: ST_TO_ADDR
74952: LD_VAR 0 6
74956: PUSH
74957: FOR_TO
74958: IFFALSE 75005
// begin vc_chassis := 31 ;
74960: LD_ADDR_OWVAR 37
74964: PUSH
74965: LD_INT 31
74967: ST_TO_ADDR
// vc_control := control_rider ;
74968: LD_ADDR_OWVAR 38
74972: PUSH
74973: LD_INT 4
74975: ST_TO_ADDR
// animal := CreateVehicle ;
74976: LD_ADDR_VAR 0 12
74980: PUSH
74981: CALL_OW 45
74985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74986: LD_VAR 0 12
74990: PPUSH
74991: LD_VAR 0 8
74995: PPUSH
74996: LD_INT 0
74998: PPUSH
74999: CALL 77135 0 3
// end ;
75003: GO 74957
75005: POP
75006: POP
// if horses then
75007: LD_VAR 0 5
75011: IFFALSE 75078
// for i = 1 to horses do
75013: LD_ADDR_VAR 0 11
75017: PUSH
75018: DOUBLE
75019: LD_INT 1
75021: DEC
75022: ST_TO_ADDR
75023: LD_VAR 0 5
75027: PUSH
75028: FOR_TO
75029: IFFALSE 75076
// begin hc_class := 21 ;
75031: LD_ADDR_OWVAR 28
75035: PUSH
75036: LD_INT 21
75038: ST_TO_ADDR
// hc_gallery :=  ;
75039: LD_ADDR_OWVAR 33
75043: PUSH
75044: LD_STRING 
75046: ST_TO_ADDR
// animal := CreateHuman ;
75047: LD_ADDR_VAR 0 12
75051: PUSH
75052: CALL_OW 44
75056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75057: LD_VAR 0 12
75061: PPUSH
75062: LD_VAR 0 8
75066: PPUSH
75067: LD_INT 0
75069: PPUSH
75070: CALL 77135 0 3
// end ;
75074: GO 75028
75076: POP
75077: POP
// if birds then
75078: LD_VAR 0 1
75082: IFFALSE 75149
// for i = 1 to birds do
75084: LD_ADDR_VAR 0 11
75088: PUSH
75089: DOUBLE
75090: LD_INT 1
75092: DEC
75093: ST_TO_ADDR
75094: LD_VAR 0 1
75098: PUSH
75099: FOR_TO
75100: IFFALSE 75147
// begin hc_class := 18 ;
75102: LD_ADDR_OWVAR 28
75106: PUSH
75107: LD_INT 18
75109: ST_TO_ADDR
// hc_gallery =  ;
75110: LD_ADDR_OWVAR 33
75114: PUSH
75115: LD_STRING 
75117: ST_TO_ADDR
// animal := CreateHuman ;
75118: LD_ADDR_VAR 0 12
75122: PUSH
75123: CALL_OW 44
75127: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75128: LD_VAR 0 12
75132: PPUSH
75133: LD_VAR 0 8
75137: PPUSH
75138: LD_INT 0
75140: PPUSH
75141: CALL 77135 0 3
// end ;
75145: GO 75099
75147: POP
75148: POP
// if tigers then
75149: LD_VAR 0 2
75153: IFFALSE 75237
// for i = 1 to tigers do
75155: LD_ADDR_VAR 0 11
75159: PUSH
75160: DOUBLE
75161: LD_INT 1
75163: DEC
75164: ST_TO_ADDR
75165: LD_VAR 0 2
75169: PUSH
75170: FOR_TO
75171: IFFALSE 75235
// begin hc_class = class_tiger ;
75173: LD_ADDR_OWVAR 28
75177: PUSH
75178: LD_INT 14
75180: ST_TO_ADDR
// hc_gallery =  ;
75181: LD_ADDR_OWVAR 33
75185: PUSH
75186: LD_STRING 
75188: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75189: LD_ADDR_OWVAR 35
75193: PUSH
75194: LD_INT 7
75196: NEG
75197: PPUSH
75198: LD_INT 7
75200: PPUSH
75201: CALL_OW 12
75205: ST_TO_ADDR
// animal := CreateHuman ;
75206: LD_ADDR_VAR 0 12
75210: PUSH
75211: CALL_OW 44
75215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75216: LD_VAR 0 12
75220: PPUSH
75221: LD_VAR 0 8
75225: PPUSH
75226: LD_INT 0
75228: PPUSH
75229: CALL 77135 0 3
// end ;
75233: GO 75170
75235: POP
75236: POP
// if apemans then
75237: LD_VAR 0 3
75241: IFFALSE 75364
// for i = 1 to apemans do
75243: LD_ADDR_VAR 0 11
75247: PUSH
75248: DOUBLE
75249: LD_INT 1
75251: DEC
75252: ST_TO_ADDR
75253: LD_VAR 0 3
75257: PUSH
75258: FOR_TO
75259: IFFALSE 75362
// begin hc_class = class_apeman ;
75261: LD_ADDR_OWVAR 28
75265: PUSH
75266: LD_INT 12
75268: ST_TO_ADDR
// hc_gallery =  ;
75269: LD_ADDR_OWVAR 33
75273: PUSH
75274: LD_STRING 
75276: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75277: LD_ADDR_OWVAR 35
75281: PUSH
75282: LD_INT 2
75284: NEG
75285: PPUSH
75286: LD_INT 2
75288: PPUSH
75289: CALL_OW 12
75293: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75294: LD_ADDR_OWVAR 31
75298: PUSH
75299: LD_INT 1
75301: PPUSH
75302: LD_INT 3
75304: PPUSH
75305: CALL_OW 12
75309: PUSH
75310: LD_INT 1
75312: PPUSH
75313: LD_INT 3
75315: PPUSH
75316: CALL_OW 12
75320: PUSH
75321: LD_INT 0
75323: PUSH
75324: LD_INT 0
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: ST_TO_ADDR
// animal := CreateHuman ;
75333: LD_ADDR_VAR 0 12
75337: PUSH
75338: CALL_OW 44
75342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75343: LD_VAR 0 12
75347: PPUSH
75348: LD_VAR 0 8
75352: PPUSH
75353: LD_INT 0
75355: PPUSH
75356: CALL 77135 0 3
// end ;
75360: GO 75258
75362: POP
75363: POP
// if enchidnas then
75364: LD_VAR 0 4
75368: IFFALSE 75435
// for i = 1 to enchidnas do
75370: LD_ADDR_VAR 0 11
75374: PUSH
75375: DOUBLE
75376: LD_INT 1
75378: DEC
75379: ST_TO_ADDR
75380: LD_VAR 0 4
75384: PUSH
75385: FOR_TO
75386: IFFALSE 75433
// begin hc_class = 13 ;
75388: LD_ADDR_OWVAR 28
75392: PUSH
75393: LD_INT 13
75395: ST_TO_ADDR
// hc_gallery =  ;
75396: LD_ADDR_OWVAR 33
75400: PUSH
75401: LD_STRING 
75403: ST_TO_ADDR
// animal := CreateHuman ;
75404: LD_ADDR_VAR 0 12
75408: PUSH
75409: CALL_OW 44
75413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75414: LD_VAR 0 12
75418: PPUSH
75419: LD_VAR 0 8
75423: PPUSH
75424: LD_INT 0
75426: PPUSH
75427: CALL 77135 0 3
// end ;
75431: GO 75385
75433: POP
75434: POP
// if fishes then
75435: LD_VAR 0 7
75439: IFFALSE 75506
// for i = 1 to fishes do
75441: LD_ADDR_VAR 0 11
75445: PUSH
75446: DOUBLE
75447: LD_INT 1
75449: DEC
75450: ST_TO_ADDR
75451: LD_VAR 0 7
75455: PUSH
75456: FOR_TO
75457: IFFALSE 75504
// begin hc_class = 20 ;
75459: LD_ADDR_OWVAR 28
75463: PUSH
75464: LD_INT 20
75466: ST_TO_ADDR
// hc_gallery =  ;
75467: LD_ADDR_OWVAR 33
75471: PUSH
75472: LD_STRING 
75474: ST_TO_ADDR
// animal := CreateHuman ;
75475: LD_ADDR_VAR 0 12
75479: PUSH
75480: CALL_OW 44
75484: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75485: LD_VAR 0 12
75489: PPUSH
75490: LD_VAR 0 9
75494: PPUSH
75495: LD_INT 0
75497: PPUSH
75498: CALL 77135 0 3
// end ;
75502: GO 75456
75504: POP
75505: POP
// end ;
75506: LD_VAR 0 10
75510: RET
// export function WantHeal ( sci , unit ) ; begin
75511: LD_INT 0
75513: PPUSH
// if GetTaskList ( sci ) > 0 then
75514: LD_VAR 0 1
75518: PPUSH
75519: CALL_OW 437
75523: PUSH
75524: LD_INT 0
75526: GREATER
75527: IFFALSE 75597
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75529: LD_VAR 0 1
75533: PPUSH
75534: CALL_OW 437
75538: PUSH
75539: LD_INT 1
75541: ARRAY
75542: PUSH
75543: LD_INT 1
75545: ARRAY
75546: PUSH
75547: LD_STRING l
75549: EQUAL
75550: PUSH
75551: LD_VAR 0 1
75555: PPUSH
75556: CALL_OW 437
75560: PUSH
75561: LD_INT 1
75563: ARRAY
75564: PUSH
75565: LD_INT 4
75567: ARRAY
75568: PUSH
75569: LD_VAR 0 2
75573: EQUAL
75574: AND
75575: IFFALSE 75587
// result := true else
75577: LD_ADDR_VAR 0 3
75581: PUSH
75582: LD_INT 1
75584: ST_TO_ADDR
75585: GO 75595
// result := false ;
75587: LD_ADDR_VAR 0 3
75591: PUSH
75592: LD_INT 0
75594: ST_TO_ADDR
// end else
75595: GO 75605
// result := false ;
75597: LD_ADDR_VAR 0 3
75601: PUSH
75602: LD_INT 0
75604: ST_TO_ADDR
// end ;
75605: LD_VAR 0 3
75609: RET
// export function HealTarget ( sci ) ; begin
75610: LD_INT 0
75612: PPUSH
// if not sci then
75613: LD_VAR 0 1
75617: NOT
75618: IFFALSE 75622
// exit ;
75620: GO 75687
// result := 0 ;
75622: LD_ADDR_VAR 0 2
75626: PUSH
75627: LD_INT 0
75629: ST_TO_ADDR
// if GetTaskList ( sci ) then
75630: LD_VAR 0 1
75634: PPUSH
75635: CALL_OW 437
75639: IFFALSE 75687
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75641: LD_VAR 0 1
75645: PPUSH
75646: CALL_OW 437
75650: PUSH
75651: LD_INT 1
75653: ARRAY
75654: PUSH
75655: LD_INT 1
75657: ARRAY
75658: PUSH
75659: LD_STRING l
75661: EQUAL
75662: IFFALSE 75687
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75664: LD_ADDR_VAR 0 2
75668: PUSH
75669: LD_VAR 0 1
75673: PPUSH
75674: CALL_OW 437
75678: PUSH
75679: LD_INT 1
75681: ARRAY
75682: PUSH
75683: LD_INT 4
75685: ARRAY
75686: ST_TO_ADDR
// end ;
75687: LD_VAR 0 2
75691: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75692: LD_INT 0
75694: PPUSH
75695: PPUSH
75696: PPUSH
75697: PPUSH
// if not base_units then
75698: LD_VAR 0 1
75702: NOT
75703: IFFALSE 75707
// exit ;
75705: GO 75794
// result := false ;
75707: LD_ADDR_VAR 0 2
75711: PUSH
75712: LD_INT 0
75714: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75715: LD_ADDR_VAR 0 5
75719: PUSH
75720: LD_VAR 0 1
75724: PPUSH
75725: LD_INT 21
75727: PUSH
75728: LD_INT 3
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: PPUSH
75735: CALL_OW 72
75739: ST_TO_ADDR
// if not tmp then
75740: LD_VAR 0 5
75744: NOT
75745: IFFALSE 75749
// exit ;
75747: GO 75794
// for i in tmp do
75749: LD_ADDR_VAR 0 3
75753: PUSH
75754: LD_VAR 0 5
75758: PUSH
75759: FOR_IN
75760: IFFALSE 75792
// begin result := EnemyInRange ( i , 22 ) ;
75762: LD_ADDR_VAR 0 2
75766: PUSH
75767: LD_VAR 0 3
75771: PPUSH
75772: LD_INT 22
75774: PPUSH
75775: CALL 73372 0 2
75779: ST_TO_ADDR
// if result then
75780: LD_VAR 0 2
75784: IFFALSE 75790
// exit ;
75786: POP
75787: POP
75788: GO 75794
// end ;
75790: GO 75759
75792: POP
75793: POP
// end ;
75794: LD_VAR 0 2
75798: RET
// export function FilterByTag ( units , tag ) ; begin
75799: LD_INT 0
75801: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75802: LD_ADDR_VAR 0 3
75806: PUSH
75807: LD_VAR 0 1
75811: PPUSH
75812: LD_INT 120
75814: PUSH
75815: LD_VAR 0 2
75819: PUSH
75820: EMPTY
75821: LIST
75822: LIST
75823: PPUSH
75824: CALL_OW 72
75828: ST_TO_ADDR
// end ;
75829: LD_VAR 0 3
75833: RET
// export function IsDriver ( un ) ; begin
75834: LD_INT 0
75836: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75837: LD_ADDR_VAR 0 2
75841: PUSH
75842: LD_VAR 0 1
75846: PUSH
75847: LD_INT 55
75849: PUSH
75850: EMPTY
75851: LIST
75852: PPUSH
75853: CALL_OW 69
75857: IN
75858: ST_TO_ADDR
// end ;
75859: LD_VAR 0 2
75863: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75864: LD_INT 0
75866: PPUSH
75867: PPUSH
// list := [ ] ;
75868: LD_ADDR_VAR 0 5
75872: PUSH
75873: EMPTY
75874: ST_TO_ADDR
// case d of 0 :
75875: LD_VAR 0 3
75879: PUSH
75880: LD_INT 0
75882: DOUBLE
75883: EQUAL
75884: IFTRUE 75888
75886: GO 76021
75888: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75889: LD_ADDR_VAR 0 5
75893: PUSH
75894: LD_VAR 0 1
75898: PUSH
75899: LD_INT 4
75901: MINUS
75902: PUSH
75903: LD_VAR 0 2
75907: PUSH
75908: LD_INT 4
75910: MINUS
75911: PUSH
75912: LD_INT 2
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: LIST
75919: PUSH
75920: LD_VAR 0 1
75924: PUSH
75925: LD_INT 3
75927: MINUS
75928: PUSH
75929: LD_VAR 0 2
75933: PUSH
75934: LD_INT 1
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: LIST
75941: PUSH
75942: LD_VAR 0 1
75946: PUSH
75947: LD_INT 4
75949: PLUS
75950: PUSH
75951: LD_VAR 0 2
75955: PUSH
75956: LD_INT 4
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: LIST
75963: PUSH
75964: LD_VAR 0 1
75968: PUSH
75969: LD_INT 3
75971: PLUS
75972: PUSH
75973: LD_VAR 0 2
75977: PUSH
75978: LD_INT 3
75980: PLUS
75981: PUSH
75982: LD_INT 5
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: LIST
75989: PUSH
75990: LD_VAR 0 1
75994: PUSH
75995: LD_VAR 0 2
75999: PUSH
76000: LD_INT 4
76002: PLUS
76003: PUSH
76004: LD_INT 0
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: LIST
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: ST_TO_ADDR
// end ; 1 :
76019: GO 76719
76021: LD_INT 1
76023: DOUBLE
76024: EQUAL
76025: IFTRUE 76029
76027: GO 76162
76029: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76030: LD_ADDR_VAR 0 5
76034: PUSH
76035: LD_VAR 0 1
76039: PUSH
76040: LD_VAR 0 2
76044: PUSH
76045: LD_INT 4
76047: MINUS
76048: PUSH
76049: LD_INT 3
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: LIST
76056: PUSH
76057: LD_VAR 0 1
76061: PUSH
76062: LD_INT 3
76064: MINUS
76065: PUSH
76066: LD_VAR 0 2
76070: PUSH
76071: LD_INT 3
76073: MINUS
76074: PUSH
76075: LD_INT 2
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: LIST
76082: PUSH
76083: LD_VAR 0 1
76087: PUSH
76088: LD_INT 4
76090: MINUS
76091: PUSH
76092: LD_VAR 0 2
76096: PUSH
76097: LD_INT 1
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: LIST
76104: PUSH
76105: LD_VAR 0 1
76109: PUSH
76110: LD_VAR 0 2
76114: PUSH
76115: LD_INT 3
76117: PLUS
76118: PUSH
76119: LD_INT 0
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: LIST
76126: PUSH
76127: LD_VAR 0 1
76131: PUSH
76132: LD_INT 4
76134: PLUS
76135: PUSH
76136: LD_VAR 0 2
76140: PUSH
76141: LD_INT 4
76143: PLUS
76144: PUSH
76145: LD_INT 5
76147: PUSH
76148: EMPTY
76149: LIST
76150: LIST
76151: LIST
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: LIST
76157: LIST
76158: LIST
76159: ST_TO_ADDR
// end ; 2 :
76160: GO 76719
76162: LD_INT 2
76164: DOUBLE
76165: EQUAL
76166: IFTRUE 76170
76168: GO 76299
76170: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76171: LD_ADDR_VAR 0 5
76175: PUSH
76176: LD_VAR 0 1
76180: PUSH
76181: LD_VAR 0 2
76185: PUSH
76186: LD_INT 3
76188: MINUS
76189: PUSH
76190: LD_INT 3
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: LIST
76197: PUSH
76198: LD_VAR 0 1
76202: PUSH
76203: LD_INT 4
76205: PLUS
76206: PUSH
76207: LD_VAR 0 2
76211: PUSH
76212: LD_INT 4
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: LIST
76219: PUSH
76220: LD_VAR 0 1
76224: PUSH
76225: LD_VAR 0 2
76229: PUSH
76230: LD_INT 4
76232: PLUS
76233: PUSH
76234: LD_INT 0
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: LIST
76241: PUSH
76242: LD_VAR 0 1
76246: PUSH
76247: LD_INT 3
76249: MINUS
76250: PUSH
76251: LD_VAR 0 2
76255: PUSH
76256: LD_INT 1
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: LIST
76263: PUSH
76264: LD_VAR 0 1
76268: PUSH
76269: LD_INT 4
76271: MINUS
76272: PUSH
76273: LD_VAR 0 2
76277: PUSH
76278: LD_INT 4
76280: MINUS
76281: PUSH
76282: LD_INT 2
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: LIST
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: LIST
76296: ST_TO_ADDR
// end ; 3 :
76297: GO 76719
76299: LD_INT 3
76301: DOUBLE
76302: EQUAL
76303: IFTRUE 76307
76305: GO 76440
76307: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76308: LD_ADDR_VAR 0 5
76312: PUSH
76313: LD_VAR 0 1
76317: PUSH
76318: LD_INT 3
76320: PLUS
76321: PUSH
76322: LD_VAR 0 2
76326: PUSH
76327: LD_INT 4
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: LIST
76334: PUSH
76335: LD_VAR 0 1
76339: PUSH
76340: LD_INT 4
76342: PLUS
76343: PUSH
76344: LD_VAR 0 2
76348: PUSH
76349: LD_INT 4
76351: PLUS
76352: PUSH
76353: LD_INT 5
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: LIST
76360: PUSH
76361: LD_VAR 0 1
76365: PUSH
76366: LD_INT 4
76368: MINUS
76369: PUSH
76370: LD_VAR 0 2
76374: PUSH
76375: LD_INT 1
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: LIST
76382: PUSH
76383: LD_VAR 0 1
76387: PUSH
76388: LD_VAR 0 2
76392: PUSH
76393: LD_INT 4
76395: MINUS
76396: PUSH
76397: LD_INT 3
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: LIST
76404: PUSH
76405: LD_VAR 0 1
76409: PUSH
76410: LD_INT 3
76412: MINUS
76413: PUSH
76414: LD_VAR 0 2
76418: PUSH
76419: LD_INT 3
76421: MINUS
76422: PUSH
76423: LD_INT 2
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: LIST
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: ST_TO_ADDR
// end ; 4 :
76438: GO 76719
76440: LD_INT 4
76442: DOUBLE
76443: EQUAL
76444: IFTRUE 76448
76446: GO 76581
76448: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76449: LD_ADDR_VAR 0 5
76453: PUSH
76454: LD_VAR 0 1
76458: PUSH
76459: LD_VAR 0 2
76463: PUSH
76464: LD_INT 4
76466: PLUS
76467: PUSH
76468: LD_INT 0
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: LIST
76475: PUSH
76476: LD_VAR 0 1
76480: PUSH
76481: LD_INT 3
76483: PLUS
76484: PUSH
76485: LD_VAR 0 2
76489: PUSH
76490: LD_INT 3
76492: PLUS
76493: PUSH
76494: LD_INT 5
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: LIST
76501: PUSH
76502: LD_VAR 0 1
76506: PUSH
76507: LD_INT 4
76509: PLUS
76510: PUSH
76511: LD_VAR 0 2
76515: PUSH
76516: LD_INT 4
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: LIST
76523: PUSH
76524: LD_VAR 0 1
76528: PUSH
76529: LD_VAR 0 2
76533: PUSH
76534: LD_INT 3
76536: MINUS
76537: PUSH
76538: LD_INT 3
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: LIST
76545: PUSH
76546: LD_VAR 0 1
76550: PUSH
76551: LD_INT 4
76553: MINUS
76554: PUSH
76555: LD_VAR 0 2
76559: PUSH
76560: LD_INT 4
76562: MINUS
76563: PUSH
76564: LD_INT 2
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: LIST
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: ST_TO_ADDR
// end ; 5 :
76579: GO 76719
76581: LD_INT 5
76583: DOUBLE
76584: EQUAL
76585: IFTRUE 76589
76587: GO 76718
76589: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76590: LD_ADDR_VAR 0 5
76594: PUSH
76595: LD_VAR 0 1
76599: PUSH
76600: LD_INT 4
76602: MINUS
76603: PUSH
76604: LD_VAR 0 2
76608: PUSH
76609: LD_INT 1
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: LIST
76616: PUSH
76617: LD_VAR 0 1
76621: PUSH
76622: LD_VAR 0 2
76626: PUSH
76627: LD_INT 4
76629: MINUS
76630: PUSH
76631: LD_INT 3
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: LIST
76638: PUSH
76639: LD_VAR 0 1
76643: PUSH
76644: LD_INT 4
76646: PLUS
76647: PUSH
76648: LD_VAR 0 2
76652: PUSH
76653: LD_INT 4
76655: PLUS
76656: PUSH
76657: LD_INT 5
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: LIST
76664: PUSH
76665: LD_VAR 0 1
76669: PUSH
76670: LD_INT 3
76672: PLUS
76673: PUSH
76674: LD_VAR 0 2
76678: PUSH
76679: LD_INT 4
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: LIST
76686: PUSH
76687: LD_VAR 0 1
76691: PUSH
76692: LD_VAR 0 2
76696: PUSH
76697: LD_INT 3
76699: PLUS
76700: PUSH
76701: LD_INT 0
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: LIST
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: LIST
76713: LIST
76714: LIST
76715: ST_TO_ADDR
// end ; end ;
76716: GO 76719
76718: POP
// result := list ;
76719: LD_ADDR_VAR 0 4
76723: PUSH
76724: LD_VAR 0 5
76728: ST_TO_ADDR
// end ;
76729: LD_VAR 0 4
76733: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76734: LD_INT 0
76736: PPUSH
76737: PPUSH
76738: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76739: LD_VAR 0 1
76743: NOT
76744: PUSH
76745: LD_VAR 0 2
76749: PUSH
76750: LD_INT 1
76752: PUSH
76753: LD_INT 2
76755: PUSH
76756: LD_INT 3
76758: PUSH
76759: LD_INT 4
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: IN
76768: NOT
76769: OR
76770: IFFALSE 76774
// exit ;
76772: GO 76857
// tmp := [ ] ;
76774: LD_ADDR_VAR 0 5
76778: PUSH
76779: EMPTY
76780: ST_TO_ADDR
// for i in units do
76781: LD_ADDR_VAR 0 4
76785: PUSH
76786: LD_VAR 0 1
76790: PUSH
76791: FOR_IN
76792: IFFALSE 76826
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76794: LD_ADDR_VAR 0 5
76798: PUSH
76799: LD_VAR 0 5
76803: PPUSH
76804: LD_VAR 0 4
76808: PPUSH
76809: LD_VAR 0 2
76813: PPUSH
76814: CALL_OW 259
76818: PPUSH
76819: CALL 78230 0 2
76823: ST_TO_ADDR
76824: GO 76791
76826: POP
76827: POP
// if not tmp then
76828: LD_VAR 0 5
76832: NOT
76833: IFFALSE 76837
// exit ;
76835: GO 76857
// result := SortListByListDesc ( units , tmp ) ;
76837: LD_ADDR_VAR 0 3
76841: PUSH
76842: LD_VAR 0 1
76846: PPUSH
76847: LD_VAR 0 5
76851: PPUSH
76852: CALL_OW 77
76856: ST_TO_ADDR
// end ;
76857: LD_VAR 0 3
76861: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76862: LD_INT 0
76864: PPUSH
76865: PPUSH
76866: PPUSH
// result := false ;
76867: LD_ADDR_VAR 0 3
76871: PUSH
76872: LD_INT 0
76874: ST_TO_ADDR
// if not building then
76875: LD_VAR 0 2
76879: NOT
76880: IFFALSE 76884
// exit ;
76882: GO 77022
// x := GetX ( building ) ;
76884: LD_ADDR_VAR 0 4
76888: PUSH
76889: LD_VAR 0 2
76893: PPUSH
76894: CALL_OW 250
76898: ST_TO_ADDR
// y := GetY ( building ) ;
76899: LD_ADDR_VAR 0 5
76903: PUSH
76904: LD_VAR 0 2
76908: PPUSH
76909: CALL_OW 251
76913: ST_TO_ADDR
// if not x or not y then
76914: LD_VAR 0 4
76918: NOT
76919: PUSH
76920: LD_VAR 0 5
76924: NOT
76925: OR
76926: IFFALSE 76930
// exit ;
76928: GO 77022
// if GetTaskList ( unit ) then
76930: LD_VAR 0 1
76934: PPUSH
76935: CALL_OW 437
76939: IFFALSE 77022
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76941: LD_STRING e
76943: PUSH
76944: LD_VAR 0 1
76948: PPUSH
76949: CALL_OW 437
76953: PUSH
76954: LD_INT 1
76956: ARRAY
76957: PUSH
76958: LD_INT 1
76960: ARRAY
76961: EQUAL
76962: PUSH
76963: LD_VAR 0 4
76967: PUSH
76968: LD_VAR 0 1
76972: PPUSH
76973: CALL_OW 437
76977: PUSH
76978: LD_INT 1
76980: ARRAY
76981: PUSH
76982: LD_INT 2
76984: ARRAY
76985: EQUAL
76986: AND
76987: PUSH
76988: LD_VAR 0 5
76992: PUSH
76993: LD_VAR 0 1
76997: PPUSH
76998: CALL_OW 437
77002: PUSH
77003: LD_INT 1
77005: ARRAY
77006: PUSH
77007: LD_INT 3
77009: ARRAY
77010: EQUAL
77011: AND
77012: IFFALSE 77022
// result := true end ;
77014: LD_ADDR_VAR 0 3
77018: PUSH
77019: LD_INT 1
77021: ST_TO_ADDR
// end ;
77022: LD_VAR 0 3
77026: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77027: LD_INT 0
77029: PPUSH
// result := false ;
77030: LD_ADDR_VAR 0 4
77034: PUSH
77035: LD_INT 0
77037: ST_TO_ADDR
// if GetTaskList ( unit ) then
77038: LD_VAR 0 1
77042: PPUSH
77043: CALL_OW 437
77047: IFFALSE 77130
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77049: LD_STRING M
77051: PUSH
77052: LD_VAR 0 1
77056: PPUSH
77057: CALL_OW 437
77061: PUSH
77062: LD_INT 1
77064: ARRAY
77065: PUSH
77066: LD_INT 1
77068: ARRAY
77069: EQUAL
77070: PUSH
77071: LD_VAR 0 2
77075: PUSH
77076: LD_VAR 0 1
77080: PPUSH
77081: CALL_OW 437
77085: PUSH
77086: LD_INT 1
77088: ARRAY
77089: PUSH
77090: LD_INT 2
77092: ARRAY
77093: EQUAL
77094: AND
77095: PUSH
77096: LD_VAR 0 3
77100: PUSH
77101: LD_VAR 0 1
77105: PPUSH
77106: CALL_OW 437
77110: PUSH
77111: LD_INT 1
77113: ARRAY
77114: PUSH
77115: LD_INT 3
77117: ARRAY
77118: EQUAL
77119: AND
77120: IFFALSE 77130
// result := true ;
77122: LD_ADDR_VAR 0 4
77126: PUSH
77127: LD_INT 1
77129: ST_TO_ADDR
// end ; end ;
77130: LD_VAR 0 4
77134: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77135: LD_INT 0
77137: PPUSH
77138: PPUSH
77139: PPUSH
77140: PPUSH
// if not unit or not area then
77141: LD_VAR 0 1
77145: NOT
77146: PUSH
77147: LD_VAR 0 2
77151: NOT
77152: OR
77153: IFFALSE 77157
// exit ;
77155: GO 77333
// tmp := AreaToList ( area , i ) ;
77157: LD_ADDR_VAR 0 6
77161: PUSH
77162: LD_VAR 0 2
77166: PPUSH
77167: LD_VAR 0 5
77171: PPUSH
77172: CALL_OW 517
77176: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77177: LD_ADDR_VAR 0 5
77181: PUSH
77182: DOUBLE
77183: LD_INT 1
77185: DEC
77186: ST_TO_ADDR
77187: LD_VAR 0 6
77191: PUSH
77192: LD_INT 1
77194: ARRAY
77195: PUSH
77196: FOR_TO
77197: IFFALSE 77331
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77199: LD_ADDR_VAR 0 7
77203: PUSH
77204: LD_VAR 0 6
77208: PUSH
77209: LD_INT 1
77211: ARRAY
77212: PUSH
77213: LD_VAR 0 5
77217: ARRAY
77218: PUSH
77219: LD_VAR 0 6
77223: PUSH
77224: LD_INT 2
77226: ARRAY
77227: PUSH
77228: LD_VAR 0 5
77232: ARRAY
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77238: LD_INT 92
77240: PUSH
77241: LD_VAR 0 7
77245: PUSH
77246: LD_INT 1
77248: ARRAY
77249: PUSH
77250: LD_VAR 0 7
77254: PUSH
77255: LD_INT 2
77257: ARRAY
77258: PUSH
77259: LD_INT 2
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: PPUSH
77268: CALL_OW 69
77272: PUSH
77273: LD_INT 0
77275: EQUAL
77276: IFFALSE 77329
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77278: LD_VAR 0 1
77282: PPUSH
77283: LD_VAR 0 7
77287: PUSH
77288: LD_INT 1
77290: ARRAY
77291: PPUSH
77292: LD_VAR 0 7
77296: PUSH
77297: LD_INT 2
77299: ARRAY
77300: PPUSH
77301: LD_VAR 0 3
77305: PPUSH
77306: CALL_OW 48
// result := IsPlaced ( unit ) ;
77310: LD_ADDR_VAR 0 4
77314: PUSH
77315: LD_VAR 0 1
77319: PPUSH
77320: CALL_OW 305
77324: ST_TO_ADDR
// exit ;
77325: POP
77326: POP
77327: GO 77333
// end ; end ;
77329: GO 77196
77331: POP
77332: POP
// end ;
77333: LD_VAR 0 4
77337: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77338: LD_INT 0
77340: PPUSH
77341: PPUSH
77342: PPUSH
// if not side or side > 8 then
77343: LD_VAR 0 1
77347: NOT
77348: PUSH
77349: LD_VAR 0 1
77353: PUSH
77354: LD_INT 8
77356: GREATER
77357: OR
77358: IFFALSE 77362
// exit ;
77360: GO 77549
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77362: LD_ADDR_VAR 0 4
77366: PUSH
77367: LD_INT 22
77369: PUSH
77370: LD_VAR 0 1
77374: PUSH
77375: EMPTY
77376: LIST
77377: LIST
77378: PUSH
77379: LD_INT 21
77381: PUSH
77382: LD_INT 3
77384: PUSH
77385: EMPTY
77386: LIST
77387: LIST
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: PPUSH
77393: CALL_OW 69
77397: ST_TO_ADDR
// if not tmp then
77398: LD_VAR 0 4
77402: NOT
77403: IFFALSE 77407
// exit ;
77405: GO 77549
// enable_addtolog := true ;
77407: LD_ADDR_OWVAR 81
77411: PUSH
77412: LD_INT 1
77414: ST_TO_ADDR
// AddToLog ( [ ) ;
77415: LD_STRING [
77417: PPUSH
77418: CALL_OW 561
// for i in tmp do
77422: LD_ADDR_VAR 0 3
77426: PUSH
77427: LD_VAR 0 4
77431: PUSH
77432: FOR_IN
77433: IFFALSE 77540
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77435: LD_STRING [
77437: PUSH
77438: LD_VAR 0 3
77442: PPUSH
77443: CALL_OW 266
77447: STR
77448: PUSH
77449: LD_STRING , 
77451: STR
77452: PUSH
77453: LD_VAR 0 3
77457: PPUSH
77458: CALL_OW 250
77462: STR
77463: PUSH
77464: LD_STRING , 
77466: STR
77467: PUSH
77468: LD_VAR 0 3
77472: PPUSH
77473: CALL_OW 251
77477: STR
77478: PUSH
77479: LD_STRING , 
77481: STR
77482: PUSH
77483: LD_VAR 0 3
77487: PPUSH
77488: CALL_OW 254
77492: STR
77493: PUSH
77494: LD_STRING , 
77496: STR
77497: PUSH
77498: LD_VAR 0 3
77502: PPUSH
77503: LD_INT 1
77505: PPUSH
77506: CALL_OW 268
77510: STR
77511: PUSH
77512: LD_STRING , 
77514: STR
77515: PUSH
77516: LD_VAR 0 3
77520: PPUSH
77521: LD_INT 2
77523: PPUSH
77524: CALL_OW 268
77528: STR
77529: PUSH
77530: LD_STRING ],
77532: STR
77533: PPUSH
77534: CALL_OW 561
// end ;
77538: GO 77432
77540: POP
77541: POP
// AddToLog ( ]; ) ;
77542: LD_STRING ];
77544: PPUSH
77545: CALL_OW 561
// end ;
77549: LD_VAR 0 2
77553: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77554: LD_INT 0
77556: PPUSH
77557: PPUSH
77558: PPUSH
77559: PPUSH
77560: PPUSH
// if not area or not rate or not max then
77561: LD_VAR 0 1
77565: NOT
77566: PUSH
77567: LD_VAR 0 2
77571: NOT
77572: OR
77573: PUSH
77574: LD_VAR 0 4
77578: NOT
77579: OR
77580: IFFALSE 77584
// exit ;
77582: GO 77773
// while 1 do
77584: LD_INT 1
77586: IFFALSE 77773
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77588: LD_ADDR_VAR 0 9
77592: PUSH
77593: LD_VAR 0 1
77597: PPUSH
77598: LD_INT 1
77600: PPUSH
77601: CALL_OW 287
77605: PUSH
77606: LD_INT 10
77608: MUL
77609: ST_TO_ADDR
// r := rate / 10 ;
77610: LD_ADDR_VAR 0 7
77614: PUSH
77615: LD_VAR 0 2
77619: PUSH
77620: LD_INT 10
77622: DIVREAL
77623: ST_TO_ADDR
// time := 1 1$00 ;
77624: LD_ADDR_VAR 0 8
77628: PUSH
77629: LD_INT 2100
77631: ST_TO_ADDR
// if amount < min then
77632: LD_VAR 0 9
77636: PUSH
77637: LD_VAR 0 3
77641: LESS
77642: IFFALSE 77660
// r := r * 2 else
77644: LD_ADDR_VAR 0 7
77648: PUSH
77649: LD_VAR 0 7
77653: PUSH
77654: LD_INT 2
77656: MUL
77657: ST_TO_ADDR
77658: GO 77686
// if amount > max then
77660: LD_VAR 0 9
77664: PUSH
77665: LD_VAR 0 4
77669: GREATER
77670: IFFALSE 77686
// r := r / 2 ;
77672: LD_ADDR_VAR 0 7
77676: PUSH
77677: LD_VAR 0 7
77681: PUSH
77682: LD_INT 2
77684: DIVREAL
77685: ST_TO_ADDR
// time := time / r ;
77686: LD_ADDR_VAR 0 8
77690: PUSH
77691: LD_VAR 0 8
77695: PUSH
77696: LD_VAR 0 7
77700: DIVREAL
77701: ST_TO_ADDR
// if time < 0 then
77702: LD_VAR 0 8
77706: PUSH
77707: LD_INT 0
77709: LESS
77710: IFFALSE 77727
// time := time * - 1 ;
77712: LD_ADDR_VAR 0 8
77716: PUSH
77717: LD_VAR 0 8
77721: PUSH
77722: LD_INT 1
77724: NEG
77725: MUL
77726: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77727: LD_VAR 0 8
77731: PUSH
77732: LD_INT 35
77734: PPUSH
77735: LD_INT 875
77737: PPUSH
77738: CALL_OW 12
77742: PLUS
77743: PPUSH
77744: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77748: LD_INT 1
77750: PPUSH
77751: LD_INT 5
77753: PPUSH
77754: CALL_OW 12
77758: PPUSH
77759: LD_VAR 0 1
77763: PPUSH
77764: LD_INT 1
77766: PPUSH
77767: CALL_OW 55
// end ;
77771: GO 77584
// end ;
77773: LD_VAR 0 5
77777: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77778: LD_INT 0
77780: PPUSH
77781: PPUSH
77782: PPUSH
77783: PPUSH
77784: PPUSH
77785: PPUSH
77786: PPUSH
77787: PPUSH
// if not turrets or not factories then
77788: LD_VAR 0 1
77792: NOT
77793: PUSH
77794: LD_VAR 0 2
77798: NOT
77799: OR
77800: IFFALSE 77804
// exit ;
77802: GO 78111
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77804: LD_ADDR_VAR 0 10
77808: PUSH
77809: LD_INT 5
77811: PUSH
77812: LD_INT 6
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: PUSH
77819: LD_INT 2
77821: PUSH
77822: LD_INT 4
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PUSH
77829: LD_INT 3
77831: PUSH
77832: LD_INT 5
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: LIST
77843: PUSH
77844: LD_INT 24
77846: PUSH
77847: LD_INT 25
77849: PUSH
77850: EMPTY
77851: LIST
77852: LIST
77853: PUSH
77854: LD_INT 23
77856: PUSH
77857: LD_INT 27
77859: PUSH
77860: EMPTY
77861: LIST
77862: LIST
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: PUSH
77868: LD_INT 42
77870: PUSH
77871: LD_INT 43
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: PUSH
77878: LD_INT 44
77880: PUSH
77881: LD_INT 46
77883: PUSH
77884: EMPTY
77885: LIST
77886: LIST
77887: PUSH
77888: LD_INT 45
77890: PUSH
77891: LD_INT 47
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: PUSH
77898: EMPTY
77899: LIST
77900: LIST
77901: LIST
77902: PUSH
77903: EMPTY
77904: LIST
77905: LIST
77906: LIST
77907: ST_TO_ADDR
// result := [ ] ;
77908: LD_ADDR_VAR 0 3
77912: PUSH
77913: EMPTY
77914: ST_TO_ADDR
// for i in turrets do
77915: LD_ADDR_VAR 0 4
77919: PUSH
77920: LD_VAR 0 1
77924: PUSH
77925: FOR_IN
77926: IFFALSE 78109
// begin nat := GetNation ( i ) ;
77928: LD_ADDR_VAR 0 7
77932: PUSH
77933: LD_VAR 0 4
77937: PPUSH
77938: CALL_OW 248
77942: ST_TO_ADDR
// weapon := 0 ;
77943: LD_ADDR_VAR 0 8
77947: PUSH
77948: LD_INT 0
77950: ST_TO_ADDR
// if not nat then
77951: LD_VAR 0 7
77955: NOT
77956: IFFALSE 77960
// continue ;
77958: GO 77925
// for j in list [ nat ] do
77960: LD_ADDR_VAR 0 5
77964: PUSH
77965: LD_VAR 0 10
77969: PUSH
77970: LD_VAR 0 7
77974: ARRAY
77975: PUSH
77976: FOR_IN
77977: IFFALSE 78018
// if GetBWeapon ( i ) = j [ 1 ] then
77979: LD_VAR 0 4
77983: PPUSH
77984: CALL_OW 269
77988: PUSH
77989: LD_VAR 0 5
77993: PUSH
77994: LD_INT 1
77996: ARRAY
77997: EQUAL
77998: IFFALSE 78016
// begin weapon := j [ 2 ] ;
78000: LD_ADDR_VAR 0 8
78004: PUSH
78005: LD_VAR 0 5
78009: PUSH
78010: LD_INT 2
78012: ARRAY
78013: ST_TO_ADDR
// break ;
78014: GO 78018
// end ;
78016: GO 77976
78018: POP
78019: POP
// if not weapon then
78020: LD_VAR 0 8
78024: NOT
78025: IFFALSE 78029
// continue ;
78027: GO 77925
// for k in factories do
78029: LD_ADDR_VAR 0 6
78033: PUSH
78034: LD_VAR 0 2
78038: PUSH
78039: FOR_IN
78040: IFFALSE 78105
// begin weapons := AvailableWeaponList ( k ) ;
78042: LD_ADDR_VAR 0 9
78046: PUSH
78047: LD_VAR 0 6
78051: PPUSH
78052: CALL_OW 478
78056: ST_TO_ADDR
// if not weapons then
78057: LD_VAR 0 9
78061: NOT
78062: IFFALSE 78066
// continue ;
78064: GO 78039
// if weapon in weapons then
78066: LD_VAR 0 8
78070: PUSH
78071: LD_VAR 0 9
78075: IN
78076: IFFALSE 78103
// begin result := [ i , weapon ] ;
78078: LD_ADDR_VAR 0 3
78082: PUSH
78083: LD_VAR 0 4
78087: PUSH
78088: LD_VAR 0 8
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: ST_TO_ADDR
// exit ;
78097: POP
78098: POP
78099: POP
78100: POP
78101: GO 78111
// end ; end ;
78103: GO 78039
78105: POP
78106: POP
// end ;
78107: GO 77925
78109: POP
78110: POP
// end ;
78111: LD_VAR 0 3
78115: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78116: LD_INT 0
78118: PPUSH
// if not side or side > 8 then
78119: LD_VAR 0 3
78123: NOT
78124: PUSH
78125: LD_VAR 0 3
78129: PUSH
78130: LD_INT 8
78132: GREATER
78133: OR
78134: IFFALSE 78138
// exit ;
78136: GO 78197
// if not range then
78138: LD_VAR 0 4
78142: NOT
78143: IFFALSE 78154
// range := - 12 ;
78145: LD_ADDR_VAR 0 4
78149: PUSH
78150: LD_INT 12
78152: NEG
78153: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78154: LD_VAR 0 1
78158: PPUSH
78159: LD_VAR 0 2
78163: PPUSH
78164: LD_VAR 0 3
78168: PPUSH
78169: LD_VAR 0 4
78173: PPUSH
78174: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78178: LD_VAR 0 1
78182: PPUSH
78183: LD_VAR 0 2
78187: PPUSH
78188: LD_VAR 0 3
78192: PPUSH
78193: CALL_OW 331
// end ;
78197: LD_VAR 0 5
78201: RET
// export function Video ( mode ) ; begin
78202: LD_INT 0
78204: PPUSH
// ingame_video = mode ;
78205: LD_ADDR_OWVAR 52
78209: PUSH
78210: LD_VAR 0 1
78214: ST_TO_ADDR
// interface_hidden = mode ;
78215: LD_ADDR_OWVAR 54
78219: PUSH
78220: LD_VAR 0 1
78224: ST_TO_ADDR
// end ;
78225: LD_VAR 0 2
78229: RET
// export function Join ( array , element ) ; begin
78230: LD_INT 0
78232: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78233: LD_ADDR_VAR 0 3
78237: PUSH
78238: LD_VAR 0 1
78242: PPUSH
78243: LD_VAR 0 1
78247: PUSH
78248: LD_INT 1
78250: PLUS
78251: PPUSH
78252: LD_VAR 0 2
78256: PPUSH
78257: CALL_OW 1
78261: ST_TO_ADDR
// end ;
78262: LD_VAR 0 3
78266: RET
// export function JoinUnion ( array , element ) ; begin
78267: LD_INT 0
78269: PPUSH
// result := array union element ;
78270: LD_ADDR_VAR 0 3
78274: PUSH
78275: LD_VAR 0 1
78279: PUSH
78280: LD_VAR 0 2
78284: UNION
78285: ST_TO_ADDR
// end ;
78286: LD_VAR 0 3
78290: RET
// export function GetBehemoths ( side ) ; begin
78291: LD_INT 0
78293: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78294: LD_ADDR_VAR 0 2
78298: PUSH
78299: LD_INT 22
78301: PUSH
78302: LD_VAR 0 1
78306: PUSH
78307: EMPTY
78308: LIST
78309: LIST
78310: PUSH
78311: LD_INT 31
78313: PUSH
78314: LD_INT 25
78316: PUSH
78317: EMPTY
78318: LIST
78319: LIST
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: PPUSH
78325: CALL_OW 69
78329: ST_TO_ADDR
// end ;
78330: LD_VAR 0 2
78334: RET
// export function Shuffle ( array ) ; var i , index ; begin
78335: LD_INT 0
78337: PPUSH
78338: PPUSH
78339: PPUSH
// result := [ ] ;
78340: LD_ADDR_VAR 0 2
78344: PUSH
78345: EMPTY
78346: ST_TO_ADDR
// if not array then
78347: LD_VAR 0 1
78351: NOT
78352: IFFALSE 78356
// exit ;
78354: GO 78455
// Randomize ;
78356: CALL_OW 10
// for i = array downto 1 do
78360: LD_ADDR_VAR 0 3
78364: PUSH
78365: DOUBLE
78366: LD_VAR 0 1
78370: INC
78371: ST_TO_ADDR
78372: LD_INT 1
78374: PUSH
78375: FOR_DOWNTO
78376: IFFALSE 78453
// begin index := rand ( 1 , array ) ;
78378: LD_ADDR_VAR 0 4
78382: PUSH
78383: LD_INT 1
78385: PPUSH
78386: LD_VAR 0 1
78390: PPUSH
78391: CALL_OW 12
78395: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78396: LD_ADDR_VAR 0 2
78400: PUSH
78401: LD_VAR 0 2
78405: PPUSH
78406: LD_VAR 0 2
78410: PUSH
78411: LD_INT 1
78413: PLUS
78414: PPUSH
78415: LD_VAR 0 1
78419: PUSH
78420: LD_VAR 0 4
78424: ARRAY
78425: PPUSH
78426: CALL_OW 2
78430: ST_TO_ADDR
// array := Delete ( array , index ) ;
78431: LD_ADDR_VAR 0 1
78435: PUSH
78436: LD_VAR 0 1
78440: PPUSH
78441: LD_VAR 0 4
78445: PPUSH
78446: CALL_OW 3
78450: ST_TO_ADDR
// end ;
78451: GO 78375
78453: POP
78454: POP
// end ;
78455: LD_VAR 0 2
78459: RET
// export function GetBaseMaterials ( base ) ; begin
78460: LD_INT 0
78462: PPUSH
// result := [ 0 , 0 , 0 ] ;
78463: LD_ADDR_VAR 0 2
78467: PUSH
78468: LD_INT 0
78470: PUSH
78471: LD_INT 0
78473: PUSH
78474: LD_INT 0
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: LIST
78481: ST_TO_ADDR
// if not base then
78482: LD_VAR 0 1
78486: NOT
78487: IFFALSE 78491
// exit ;
78489: GO 78540
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78491: LD_ADDR_VAR 0 2
78495: PUSH
78496: LD_VAR 0 1
78500: PPUSH
78501: LD_INT 1
78503: PPUSH
78504: CALL_OW 275
78508: PUSH
78509: LD_VAR 0 1
78513: PPUSH
78514: LD_INT 2
78516: PPUSH
78517: CALL_OW 275
78521: PUSH
78522: LD_VAR 0 1
78526: PPUSH
78527: LD_INT 3
78529: PPUSH
78530: CALL_OW 275
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: LIST
78539: ST_TO_ADDR
// end ;
78540: LD_VAR 0 2
78544: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78545: LD_INT 0
78547: PPUSH
78548: PPUSH
// result := array ;
78549: LD_ADDR_VAR 0 3
78553: PUSH
78554: LD_VAR 0 1
78558: ST_TO_ADDR
// if size >= result then
78559: LD_VAR 0 2
78563: PUSH
78564: LD_VAR 0 3
78568: GREATEREQUAL
78569: IFFALSE 78573
// exit ;
78571: GO 78623
// if size then
78573: LD_VAR 0 2
78577: IFFALSE 78623
// for i := array downto size do
78579: LD_ADDR_VAR 0 4
78583: PUSH
78584: DOUBLE
78585: LD_VAR 0 1
78589: INC
78590: ST_TO_ADDR
78591: LD_VAR 0 2
78595: PUSH
78596: FOR_DOWNTO
78597: IFFALSE 78621
// result := Delete ( result , result ) ;
78599: LD_ADDR_VAR 0 3
78603: PUSH
78604: LD_VAR 0 3
78608: PPUSH
78609: LD_VAR 0 3
78613: PPUSH
78614: CALL_OW 3
78618: ST_TO_ADDR
78619: GO 78596
78621: POP
78622: POP
// end ;
78623: LD_VAR 0 3
78627: RET
// export function ComExit ( unit ) ; var tmp ; begin
78628: LD_INT 0
78630: PPUSH
78631: PPUSH
// if not IsInUnit ( unit ) then
78632: LD_VAR 0 1
78636: PPUSH
78637: CALL_OW 310
78641: NOT
78642: IFFALSE 78646
// exit ;
78644: GO 78706
// tmp := IsInUnit ( unit ) ;
78646: LD_ADDR_VAR 0 3
78650: PUSH
78651: LD_VAR 0 1
78655: PPUSH
78656: CALL_OW 310
78660: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78661: LD_VAR 0 3
78665: PPUSH
78666: CALL_OW 247
78670: PUSH
78671: LD_INT 2
78673: EQUAL
78674: IFFALSE 78687
// ComExitVehicle ( unit ) else
78676: LD_VAR 0 1
78680: PPUSH
78681: CALL_OW 121
78685: GO 78696
// ComExitBuilding ( unit ) ;
78687: LD_VAR 0 1
78691: PPUSH
78692: CALL_OW 122
// result := tmp ;
78696: LD_ADDR_VAR 0 2
78700: PUSH
78701: LD_VAR 0 3
78705: ST_TO_ADDR
// end ;
78706: LD_VAR 0 2
78710: RET
// export function ComExitAll ( units ) ; var i ; begin
78711: LD_INT 0
78713: PPUSH
78714: PPUSH
// if not units then
78715: LD_VAR 0 1
78719: NOT
78720: IFFALSE 78724
// exit ;
78722: GO 78750
// for i in units do
78724: LD_ADDR_VAR 0 3
78728: PUSH
78729: LD_VAR 0 1
78733: PUSH
78734: FOR_IN
78735: IFFALSE 78748
// ComExit ( i ) ;
78737: LD_VAR 0 3
78741: PPUSH
78742: CALL 78628 0 1
78746: GO 78734
78748: POP
78749: POP
// end ;
78750: LD_VAR 0 2
78754: RET
// export function ResetHc ; begin
78755: LD_INT 0
78757: PPUSH
// InitHc ;
78758: CALL_OW 19
// hc_importance := 0 ;
78762: LD_ADDR_OWVAR 32
78766: PUSH
78767: LD_INT 0
78769: ST_TO_ADDR
// end ;
78770: LD_VAR 0 1
78774: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78775: LD_INT 0
78777: PPUSH
78778: PPUSH
78779: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78780: LD_ADDR_VAR 0 6
78784: PUSH
78785: LD_VAR 0 1
78789: PUSH
78790: LD_VAR 0 3
78794: PLUS
78795: PUSH
78796: LD_INT 2
78798: DIV
78799: ST_TO_ADDR
// if _x < 0 then
78800: LD_VAR 0 6
78804: PUSH
78805: LD_INT 0
78807: LESS
78808: IFFALSE 78825
// _x := _x * - 1 ;
78810: LD_ADDR_VAR 0 6
78814: PUSH
78815: LD_VAR 0 6
78819: PUSH
78820: LD_INT 1
78822: NEG
78823: MUL
78824: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78825: LD_ADDR_VAR 0 7
78829: PUSH
78830: LD_VAR 0 2
78834: PUSH
78835: LD_VAR 0 4
78839: PLUS
78840: PUSH
78841: LD_INT 2
78843: DIV
78844: ST_TO_ADDR
// if _y < 0 then
78845: LD_VAR 0 7
78849: PUSH
78850: LD_INT 0
78852: LESS
78853: IFFALSE 78870
// _y := _y * - 1 ;
78855: LD_ADDR_VAR 0 7
78859: PUSH
78860: LD_VAR 0 7
78864: PUSH
78865: LD_INT 1
78867: NEG
78868: MUL
78869: ST_TO_ADDR
// result := [ _x , _y ] ;
78870: LD_ADDR_VAR 0 5
78874: PUSH
78875: LD_VAR 0 6
78879: PUSH
78880: LD_VAR 0 7
78884: PUSH
78885: EMPTY
78886: LIST
78887: LIST
78888: ST_TO_ADDR
// end ;
78889: LD_VAR 0 5
78893: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78894: LD_INT 0
78896: PPUSH
78897: PPUSH
78898: PPUSH
78899: PPUSH
// task := GetTaskList ( unit ) ;
78900: LD_ADDR_VAR 0 7
78904: PUSH
78905: LD_VAR 0 1
78909: PPUSH
78910: CALL_OW 437
78914: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78915: LD_VAR 0 7
78919: NOT
78920: PUSH
78921: LD_VAR 0 1
78925: PPUSH
78926: LD_VAR 0 2
78930: PPUSH
78931: CALL_OW 308
78935: NOT
78936: AND
78937: IFFALSE 78941
// exit ;
78939: GO 79059
// if IsInArea ( unit , area ) then
78941: LD_VAR 0 1
78945: PPUSH
78946: LD_VAR 0 2
78950: PPUSH
78951: CALL_OW 308
78955: IFFALSE 78973
// begin ComMoveToArea ( unit , goAway ) ;
78957: LD_VAR 0 1
78961: PPUSH
78962: LD_VAR 0 3
78966: PPUSH
78967: CALL_OW 113
// exit ;
78971: GO 79059
// end ; if task [ 1 ] [ 1 ] <> M then
78973: LD_VAR 0 7
78977: PUSH
78978: LD_INT 1
78980: ARRAY
78981: PUSH
78982: LD_INT 1
78984: ARRAY
78985: PUSH
78986: LD_STRING M
78988: NONEQUAL
78989: IFFALSE 78993
// exit ;
78991: GO 79059
// x := task [ 1 ] [ 2 ] ;
78993: LD_ADDR_VAR 0 5
78997: PUSH
78998: LD_VAR 0 7
79002: PUSH
79003: LD_INT 1
79005: ARRAY
79006: PUSH
79007: LD_INT 2
79009: ARRAY
79010: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79011: LD_ADDR_VAR 0 6
79015: PUSH
79016: LD_VAR 0 7
79020: PUSH
79021: LD_INT 1
79023: ARRAY
79024: PUSH
79025: LD_INT 3
79027: ARRAY
79028: ST_TO_ADDR
// if InArea ( x , y , area ) then
79029: LD_VAR 0 5
79033: PPUSH
79034: LD_VAR 0 6
79038: PPUSH
79039: LD_VAR 0 2
79043: PPUSH
79044: CALL_OW 309
79048: IFFALSE 79059
// ComStop ( unit ) ;
79050: LD_VAR 0 1
79054: PPUSH
79055: CALL_OW 141
// end ;
79059: LD_VAR 0 4
79063: RET
// export function Abs ( value ) ; begin
79064: LD_INT 0
79066: PPUSH
// result := value ;
79067: LD_ADDR_VAR 0 2
79071: PUSH
79072: LD_VAR 0 1
79076: ST_TO_ADDR
// if value < 0 then
79077: LD_VAR 0 1
79081: PUSH
79082: LD_INT 0
79084: LESS
79085: IFFALSE 79102
// result := value * - 1 ;
79087: LD_ADDR_VAR 0 2
79091: PUSH
79092: LD_VAR 0 1
79096: PUSH
79097: LD_INT 1
79099: NEG
79100: MUL
79101: ST_TO_ADDR
// end ;
79102: LD_VAR 0 2
79106: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79107: LD_INT 0
79109: PPUSH
79110: PPUSH
79111: PPUSH
79112: PPUSH
79113: PPUSH
79114: PPUSH
79115: PPUSH
79116: PPUSH
// if not unit or not building then
79117: LD_VAR 0 1
79121: NOT
79122: PUSH
79123: LD_VAR 0 2
79127: NOT
79128: OR
79129: IFFALSE 79133
// exit ;
79131: GO 79359
// x := GetX ( building ) ;
79133: LD_ADDR_VAR 0 4
79137: PUSH
79138: LD_VAR 0 2
79142: PPUSH
79143: CALL_OW 250
79147: ST_TO_ADDR
// y := GetY ( building ) ;
79148: LD_ADDR_VAR 0 6
79152: PUSH
79153: LD_VAR 0 2
79157: PPUSH
79158: CALL_OW 251
79162: ST_TO_ADDR
// d := GetDir ( building ) ;
79163: LD_ADDR_VAR 0 8
79167: PUSH
79168: LD_VAR 0 2
79172: PPUSH
79173: CALL_OW 254
79177: ST_TO_ADDR
// r := 4 ;
79178: LD_ADDR_VAR 0 9
79182: PUSH
79183: LD_INT 4
79185: ST_TO_ADDR
// for i := 1 to 5 do
79186: LD_ADDR_VAR 0 10
79190: PUSH
79191: DOUBLE
79192: LD_INT 1
79194: DEC
79195: ST_TO_ADDR
79196: LD_INT 5
79198: PUSH
79199: FOR_TO
79200: IFFALSE 79357
// begin _x := ShiftX ( x , d , r + i ) ;
79202: LD_ADDR_VAR 0 5
79206: PUSH
79207: LD_VAR 0 4
79211: PPUSH
79212: LD_VAR 0 8
79216: PPUSH
79217: LD_VAR 0 9
79221: PUSH
79222: LD_VAR 0 10
79226: PLUS
79227: PPUSH
79228: CALL_OW 272
79232: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79233: LD_ADDR_VAR 0 7
79237: PUSH
79238: LD_VAR 0 6
79242: PPUSH
79243: LD_VAR 0 8
79247: PPUSH
79248: LD_VAR 0 9
79252: PUSH
79253: LD_VAR 0 10
79257: PLUS
79258: PPUSH
79259: CALL_OW 273
79263: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79264: LD_VAR 0 5
79268: PPUSH
79269: LD_VAR 0 7
79273: PPUSH
79274: CALL_OW 488
79278: PUSH
79279: LD_VAR 0 5
79283: PPUSH
79284: LD_VAR 0 7
79288: PPUSH
79289: CALL_OW 428
79293: PPUSH
79294: CALL_OW 247
79298: PUSH
79299: LD_INT 3
79301: PUSH
79302: LD_INT 2
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: IN
79309: NOT
79310: AND
79311: IFFALSE 79355
// begin ComMoveXY ( unit , _x , _y ) ;
79313: LD_VAR 0 1
79317: PPUSH
79318: LD_VAR 0 5
79322: PPUSH
79323: LD_VAR 0 7
79327: PPUSH
79328: CALL_OW 111
// result := [ _x , _y ] ;
79332: LD_ADDR_VAR 0 3
79336: PUSH
79337: LD_VAR 0 5
79341: PUSH
79342: LD_VAR 0 7
79346: PUSH
79347: EMPTY
79348: LIST
79349: LIST
79350: ST_TO_ADDR
// exit ;
79351: POP
79352: POP
79353: GO 79359
// end ; end ;
79355: GO 79199
79357: POP
79358: POP
// end ;
79359: LD_VAR 0 3
79363: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79364: LD_INT 0
79366: PPUSH
79367: PPUSH
79368: PPUSH
// result := 0 ;
79369: LD_ADDR_VAR 0 3
79373: PUSH
79374: LD_INT 0
79376: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79377: LD_VAR 0 1
79381: PUSH
79382: LD_INT 0
79384: LESS
79385: PUSH
79386: LD_VAR 0 1
79390: PUSH
79391: LD_INT 8
79393: GREATER
79394: OR
79395: PUSH
79396: LD_VAR 0 2
79400: PUSH
79401: LD_INT 0
79403: LESS
79404: OR
79405: PUSH
79406: LD_VAR 0 2
79410: PUSH
79411: LD_INT 8
79413: GREATER
79414: OR
79415: IFFALSE 79419
// exit ;
79417: GO 79494
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79419: LD_ADDR_VAR 0 4
79423: PUSH
79424: LD_INT 22
79426: PUSH
79427: LD_VAR 0 2
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: PPUSH
79436: CALL_OW 69
79440: PUSH
79441: FOR_IN
79442: IFFALSE 79492
// begin un := UnitShoot ( i ) ;
79444: LD_ADDR_VAR 0 5
79448: PUSH
79449: LD_VAR 0 4
79453: PPUSH
79454: CALL_OW 504
79458: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79459: LD_VAR 0 5
79463: PPUSH
79464: CALL_OW 255
79468: PUSH
79469: LD_VAR 0 1
79473: EQUAL
79474: IFFALSE 79490
// begin result := un ;
79476: LD_ADDR_VAR 0 3
79480: PUSH
79481: LD_VAR 0 5
79485: ST_TO_ADDR
// exit ;
79486: POP
79487: POP
79488: GO 79494
// end ; end ;
79490: GO 79441
79492: POP
79493: POP
// end ;
79494: LD_VAR 0 3
79498: RET
// export function GetCargoBay ( units ) ; begin
79499: LD_INT 0
79501: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79502: LD_ADDR_VAR 0 2
79506: PUSH
79507: LD_VAR 0 1
79511: PPUSH
79512: LD_INT 2
79514: PUSH
79515: LD_INT 34
79517: PUSH
79518: LD_INT 12
79520: PUSH
79521: EMPTY
79522: LIST
79523: LIST
79524: PUSH
79525: LD_INT 34
79527: PUSH
79528: LD_INT 51
79530: PUSH
79531: EMPTY
79532: LIST
79533: LIST
79534: PUSH
79535: LD_INT 34
79537: PUSH
79538: LD_INT 32
79540: PUSH
79541: EMPTY
79542: LIST
79543: LIST
79544: PUSH
79545: LD_INT 34
79547: PUSH
79548: LD_INT 89
79550: PUSH
79551: EMPTY
79552: LIST
79553: LIST
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: LIST
79559: LIST
79560: LIST
79561: PPUSH
79562: CALL_OW 72
79566: ST_TO_ADDR
// end ;
79567: LD_VAR 0 2
79571: RET
// export function Negate ( value ) ; begin
79572: LD_INT 0
79574: PPUSH
// result := not value ;
79575: LD_ADDR_VAR 0 2
79579: PUSH
79580: LD_VAR 0 1
79584: NOT
79585: ST_TO_ADDR
// end ;
79586: LD_VAR 0 2
79590: RET
// export function Inc ( value ) ; begin
79591: LD_INT 0
79593: PPUSH
// result := value + 1 ;
79594: LD_ADDR_VAR 0 2
79598: PUSH
79599: LD_VAR 0 1
79603: PUSH
79604: LD_INT 1
79606: PLUS
79607: ST_TO_ADDR
// end ;
79608: LD_VAR 0 2
79612: RET
// export function Dec ( value ) ; begin
79613: LD_INT 0
79615: PPUSH
// result := value - 1 ;
79616: LD_ADDR_VAR 0 2
79620: PUSH
79621: LD_VAR 0 1
79625: PUSH
79626: LD_INT 1
79628: MINUS
79629: ST_TO_ADDR
// end ;
79630: LD_VAR 0 2
79634: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79635: LD_INT 0
79637: PPUSH
79638: PPUSH
79639: PPUSH
79640: PPUSH
79641: PPUSH
79642: PPUSH
79643: PPUSH
79644: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79645: LD_VAR 0 1
79649: PPUSH
79650: LD_VAR 0 2
79654: PPUSH
79655: CALL_OW 488
79659: NOT
79660: PUSH
79661: LD_VAR 0 3
79665: PPUSH
79666: LD_VAR 0 4
79670: PPUSH
79671: CALL_OW 488
79675: NOT
79676: OR
79677: IFFALSE 79690
// begin result := - 1 ;
79679: LD_ADDR_VAR 0 5
79683: PUSH
79684: LD_INT 1
79686: NEG
79687: ST_TO_ADDR
// exit ;
79688: GO 79925
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79690: LD_ADDR_VAR 0 12
79694: PUSH
79695: LD_VAR 0 1
79699: PPUSH
79700: LD_VAR 0 2
79704: PPUSH
79705: LD_VAR 0 3
79709: PPUSH
79710: LD_VAR 0 4
79714: PPUSH
79715: CALL 78775 0 4
79719: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79720: LD_ADDR_VAR 0 11
79724: PUSH
79725: LD_VAR 0 1
79729: PPUSH
79730: LD_VAR 0 2
79734: PPUSH
79735: LD_VAR 0 12
79739: PUSH
79740: LD_INT 1
79742: ARRAY
79743: PPUSH
79744: LD_VAR 0 12
79748: PUSH
79749: LD_INT 2
79751: ARRAY
79752: PPUSH
79753: CALL_OW 298
79757: ST_TO_ADDR
// distance := 9999 ;
79758: LD_ADDR_VAR 0 10
79762: PUSH
79763: LD_INT 9999
79765: ST_TO_ADDR
// for i := 0 to 5 do
79766: LD_ADDR_VAR 0 6
79770: PUSH
79771: DOUBLE
79772: LD_INT 0
79774: DEC
79775: ST_TO_ADDR
79776: LD_INT 5
79778: PUSH
79779: FOR_TO
79780: IFFALSE 79923
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79782: LD_ADDR_VAR 0 7
79786: PUSH
79787: LD_VAR 0 1
79791: PPUSH
79792: LD_VAR 0 6
79796: PPUSH
79797: LD_VAR 0 11
79801: PPUSH
79802: CALL_OW 272
79806: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79807: LD_ADDR_VAR 0 8
79811: PUSH
79812: LD_VAR 0 2
79816: PPUSH
79817: LD_VAR 0 6
79821: PPUSH
79822: LD_VAR 0 11
79826: PPUSH
79827: CALL_OW 273
79831: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79832: LD_VAR 0 7
79836: PPUSH
79837: LD_VAR 0 8
79841: PPUSH
79842: CALL_OW 488
79846: NOT
79847: IFFALSE 79851
// continue ;
79849: GO 79779
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79851: LD_ADDR_VAR 0 9
79855: PUSH
79856: LD_VAR 0 12
79860: PUSH
79861: LD_INT 1
79863: ARRAY
79864: PPUSH
79865: LD_VAR 0 12
79869: PUSH
79870: LD_INT 2
79872: ARRAY
79873: PPUSH
79874: LD_VAR 0 7
79878: PPUSH
79879: LD_VAR 0 8
79883: PPUSH
79884: CALL_OW 298
79888: ST_TO_ADDR
// if tmp < distance then
79889: LD_VAR 0 9
79893: PUSH
79894: LD_VAR 0 10
79898: LESS
79899: IFFALSE 79921
// begin result := i ;
79901: LD_ADDR_VAR 0 5
79905: PUSH
79906: LD_VAR 0 6
79910: ST_TO_ADDR
// distance := tmp ;
79911: LD_ADDR_VAR 0 10
79915: PUSH
79916: LD_VAR 0 9
79920: ST_TO_ADDR
// end ; end ;
79921: GO 79779
79923: POP
79924: POP
// end ;
79925: LD_VAR 0 5
79929: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79930: LD_INT 0
79932: PPUSH
79933: PPUSH
// if not driver or not IsInUnit ( driver ) then
79934: LD_VAR 0 1
79938: NOT
79939: PUSH
79940: LD_VAR 0 1
79944: PPUSH
79945: CALL_OW 310
79949: NOT
79950: OR
79951: IFFALSE 79955
// exit ;
79953: GO 80045
// vehicle := IsInUnit ( driver ) ;
79955: LD_ADDR_VAR 0 3
79959: PUSH
79960: LD_VAR 0 1
79964: PPUSH
79965: CALL_OW 310
79969: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79970: LD_VAR 0 1
79974: PPUSH
79975: LD_STRING \
79977: PUSH
79978: LD_INT 0
79980: PUSH
79981: LD_INT 0
79983: PUSH
79984: LD_INT 0
79986: PUSH
79987: LD_INT 0
79989: PUSH
79990: LD_INT 0
79992: PUSH
79993: LD_INT 0
79995: PUSH
79996: EMPTY
79997: LIST
79998: LIST
79999: LIST
80000: LIST
80001: LIST
80002: LIST
80003: LIST
80004: PUSH
80005: LD_STRING E
80007: PUSH
80008: LD_INT 0
80010: PUSH
80011: LD_INT 0
80013: PUSH
80014: LD_VAR 0 3
80018: PUSH
80019: LD_INT 0
80021: PUSH
80022: LD_INT 0
80024: PUSH
80025: LD_INT 0
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: LIST
80032: LIST
80033: LIST
80034: LIST
80035: LIST
80036: PUSH
80037: EMPTY
80038: LIST
80039: LIST
80040: PPUSH
80041: CALL_OW 446
// end ;
80045: LD_VAR 0 2
80049: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80050: LD_INT 0
80052: PPUSH
80053: PPUSH
// if not driver or not IsInUnit ( driver ) then
80054: LD_VAR 0 1
80058: NOT
80059: PUSH
80060: LD_VAR 0 1
80064: PPUSH
80065: CALL_OW 310
80069: NOT
80070: OR
80071: IFFALSE 80075
// exit ;
80073: GO 80165
// vehicle := IsInUnit ( driver ) ;
80075: LD_ADDR_VAR 0 3
80079: PUSH
80080: LD_VAR 0 1
80084: PPUSH
80085: CALL_OW 310
80089: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80090: LD_VAR 0 1
80094: PPUSH
80095: LD_STRING \
80097: PUSH
80098: LD_INT 0
80100: PUSH
80101: LD_INT 0
80103: PUSH
80104: LD_INT 0
80106: PUSH
80107: LD_INT 0
80109: PUSH
80110: LD_INT 0
80112: PUSH
80113: LD_INT 0
80115: PUSH
80116: EMPTY
80117: LIST
80118: LIST
80119: LIST
80120: LIST
80121: LIST
80122: LIST
80123: LIST
80124: PUSH
80125: LD_STRING E
80127: PUSH
80128: LD_INT 0
80130: PUSH
80131: LD_INT 0
80133: PUSH
80134: LD_VAR 0 3
80138: PUSH
80139: LD_INT 0
80141: PUSH
80142: LD_INT 0
80144: PUSH
80145: LD_INT 0
80147: PUSH
80148: EMPTY
80149: LIST
80150: LIST
80151: LIST
80152: LIST
80153: LIST
80154: LIST
80155: LIST
80156: PUSH
80157: EMPTY
80158: LIST
80159: LIST
80160: PPUSH
80161: CALL_OW 447
// end ;
80165: LD_VAR 0 2
80169: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80170: LD_INT 0
80172: PPUSH
80173: PPUSH
80174: PPUSH
// tmp := [ ] ;
80175: LD_ADDR_VAR 0 5
80179: PUSH
80180: EMPTY
80181: ST_TO_ADDR
// for i in units do
80182: LD_ADDR_VAR 0 4
80186: PUSH
80187: LD_VAR 0 1
80191: PUSH
80192: FOR_IN
80193: IFFALSE 80231
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80195: LD_ADDR_VAR 0 5
80199: PUSH
80200: LD_VAR 0 5
80204: PPUSH
80205: LD_VAR 0 5
80209: PUSH
80210: LD_INT 1
80212: PLUS
80213: PPUSH
80214: LD_VAR 0 4
80218: PPUSH
80219: CALL_OW 256
80223: PPUSH
80224: CALL_OW 2
80228: ST_TO_ADDR
80229: GO 80192
80231: POP
80232: POP
// if not tmp then
80233: LD_VAR 0 5
80237: NOT
80238: IFFALSE 80242
// exit ;
80240: GO 80290
// if asc then
80242: LD_VAR 0 2
80246: IFFALSE 80270
// result := SortListByListAsc ( units , tmp ) else
80248: LD_ADDR_VAR 0 3
80252: PUSH
80253: LD_VAR 0 1
80257: PPUSH
80258: LD_VAR 0 5
80262: PPUSH
80263: CALL_OW 76
80267: ST_TO_ADDR
80268: GO 80290
// result := SortListByListDesc ( units , tmp ) ;
80270: LD_ADDR_VAR 0 3
80274: PUSH
80275: LD_VAR 0 1
80279: PPUSH
80280: LD_VAR 0 5
80284: PPUSH
80285: CALL_OW 77
80289: ST_TO_ADDR
// end ;
80290: LD_VAR 0 3
80294: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80295: LD_INT 0
80297: PPUSH
80298: PPUSH
// task := GetTaskList ( mech ) ;
80299: LD_ADDR_VAR 0 4
80303: PUSH
80304: LD_VAR 0 1
80308: PPUSH
80309: CALL_OW 437
80313: ST_TO_ADDR
// if not task then
80314: LD_VAR 0 4
80318: NOT
80319: IFFALSE 80323
// exit ;
80321: GO 80365
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80323: LD_ADDR_VAR 0 3
80327: PUSH
80328: LD_VAR 0 4
80332: PUSH
80333: LD_INT 1
80335: ARRAY
80336: PUSH
80337: LD_INT 1
80339: ARRAY
80340: PUSH
80341: LD_STRING r
80343: EQUAL
80344: PUSH
80345: LD_VAR 0 4
80349: PUSH
80350: LD_INT 1
80352: ARRAY
80353: PUSH
80354: LD_INT 4
80356: ARRAY
80357: PUSH
80358: LD_VAR 0 2
80362: EQUAL
80363: AND
80364: ST_TO_ADDR
// end ;
80365: LD_VAR 0 3
80369: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80370: LD_INT 0
80372: PPUSH
// SetDir ( unit , d ) ;
80373: LD_VAR 0 1
80377: PPUSH
80378: LD_VAR 0 4
80382: PPUSH
80383: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80387: LD_VAR 0 1
80391: PPUSH
80392: LD_VAR 0 2
80396: PPUSH
80397: LD_VAR 0 3
80401: PPUSH
80402: LD_VAR 0 5
80406: PPUSH
80407: CALL_OW 48
// end ;
80411: LD_VAR 0 6
80415: RET
// export function ToNaturalNumber ( number ) ; begin
80416: LD_INT 0
80418: PPUSH
// result := number div 1 ;
80419: LD_ADDR_VAR 0 2
80423: PUSH
80424: LD_VAR 0 1
80428: PUSH
80429: LD_INT 1
80431: DIV
80432: ST_TO_ADDR
// if number < 0 then
80433: LD_VAR 0 1
80437: PUSH
80438: LD_INT 0
80440: LESS
80441: IFFALSE 80451
// result := 0 ;
80443: LD_ADDR_VAR 0 2
80447: PUSH
80448: LD_INT 0
80450: ST_TO_ADDR
// end ;
80451: LD_VAR 0 2
80455: RET
// export function SortByClass ( units , class ) ; var un ; begin
80456: LD_INT 0
80458: PPUSH
80459: PPUSH
// if not units or not class then
80460: LD_VAR 0 1
80464: NOT
80465: PUSH
80466: LD_VAR 0 2
80470: NOT
80471: OR
80472: IFFALSE 80476
// exit ;
80474: GO 80571
// result := [ ] ;
80476: LD_ADDR_VAR 0 3
80480: PUSH
80481: EMPTY
80482: ST_TO_ADDR
// for un in units do
80483: LD_ADDR_VAR 0 4
80487: PUSH
80488: LD_VAR 0 1
80492: PUSH
80493: FOR_IN
80494: IFFALSE 80569
// if GetClass ( un ) = class then
80496: LD_VAR 0 4
80500: PPUSH
80501: CALL_OW 257
80505: PUSH
80506: LD_VAR 0 2
80510: EQUAL
80511: IFFALSE 80538
// result := Insert ( result , 1 , un ) else
80513: LD_ADDR_VAR 0 3
80517: PUSH
80518: LD_VAR 0 3
80522: PPUSH
80523: LD_INT 1
80525: PPUSH
80526: LD_VAR 0 4
80530: PPUSH
80531: CALL_OW 2
80535: ST_TO_ADDR
80536: GO 80567
// result := Replace ( result , result + 1 , un ) ;
80538: LD_ADDR_VAR 0 3
80542: PUSH
80543: LD_VAR 0 3
80547: PPUSH
80548: LD_VAR 0 3
80552: PUSH
80553: LD_INT 1
80555: PLUS
80556: PPUSH
80557: LD_VAR 0 4
80561: PPUSH
80562: CALL_OW 1
80566: ST_TO_ADDR
80567: GO 80493
80569: POP
80570: POP
// end ;
80571: LD_VAR 0 3
80575: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80576: LD_INT 0
80578: PPUSH
80579: PPUSH
80580: PPUSH
80581: PPUSH
80582: PPUSH
80583: PPUSH
80584: PPUSH
// result := [ ] ;
80585: LD_ADDR_VAR 0 4
80589: PUSH
80590: EMPTY
80591: ST_TO_ADDR
// if x - r < 0 then
80592: LD_VAR 0 1
80596: PUSH
80597: LD_VAR 0 3
80601: MINUS
80602: PUSH
80603: LD_INT 0
80605: LESS
80606: IFFALSE 80618
// min_x := 0 else
80608: LD_ADDR_VAR 0 8
80612: PUSH
80613: LD_INT 0
80615: ST_TO_ADDR
80616: GO 80634
// min_x := x - r ;
80618: LD_ADDR_VAR 0 8
80622: PUSH
80623: LD_VAR 0 1
80627: PUSH
80628: LD_VAR 0 3
80632: MINUS
80633: ST_TO_ADDR
// if y - r < 0 then
80634: LD_VAR 0 2
80638: PUSH
80639: LD_VAR 0 3
80643: MINUS
80644: PUSH
80645: LD_INT 0
80647: LESS
80648: IFFALSE 80660
// min_y := 0 else
80650: LD_ADDR_VAR 0 7
80654: PUSH
80655: LD_INT 0
80657: ST_TO_ADDR
80658: GO 80676
// min_y := y - r ;
80660: LD_ADDR_VAR 0 7
80664: PUSH
80665: LD_VAR 0 2
80669: PUSH
80670: LD_VAR 0 3
80674: MINUS
80675: ST_TO_ADDR
// max_x := x + r ;
80676: LD_ADDR_VAR 0 9
80680: PUSH
80681: LD_VAR 0 1
80685: PUSH
80686: LD_VAR 0 3
80690: PLUS
80691: ST_TO_ADDR
// max_y := y + r ;
80692: LD_ADDR_VAR 0 10
80696: PUSH
80697: LD_VAR 0 2
80701: PUSH
80702: LD_VAR 0 3
80706: PLUS
80707: ST_TO_ADDR
// for _x = min_x to max_x do
80708: LD_ADDR_VAR 0 5
80712: PUSH
80713: DOUBLE
80714: LD_VAR 0 8
80718: DEC
80719: ST_TO_ADDR
80720: LD_VAR 0 9
80724: PUSH
80725: FOR_TO
80726: IFFALSE 80827
// for _y = min_y to max_y do
80728: LD_ADDR_VAR 0 6
80732: PUSH
80733: DOUBLE
80734: LD_VAR 0 7
80738: DEC
80739: ST_TO_ADDR
80740: LD_VAR 0 10
80744: PUSH
80745: FOR_TO
80746: IFFALSE 80823
// begin if not ValidHex ( _x , _y ) then
80748: LD_VAR 0 5
80752: PPUSH
80753: LD_VAR 0 6
80757: PPUSH
80758: CALL_OW 488
80762: NOT
80763: IFFALSE 80767
// continue ;
80765: GO 80745
// if GetResourceTypeXY ( _x , _y ) then
80767: LD_VAR 0 5
80771: PPUSH
80772: LD_VAR 0 6
80776: PPUSH
80777: CALL_OW 283
80781: IFFALSE 80821
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80783: LD_ADDR_VAR 0 4
80787: PUSH
80788: LD_VAR 0 4
80792: PPUSH
80793: LD_VAR 0 4
80797: PUSH
80798: LD_INT 1
80800: PLUS
80801: PPUSH
80802: LD_VAR 0 5
80806: PUSH
80807: LD_VAR 0 6
80811: PUSH
80812: EMPTY
80813: LIST
80814: LIST
80815: PPUSH
80816: CALL_OW 1
80820: ST_TO_ADDR
// end ;
80821: GO 80745
80823: POP
80824: POP
80825: GO 80725
80827: POP
80828: POP
// end ;
80829: LD_VAR 0 4
80833: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80834: LD_INT 0
80836: PPUSH
80837: PPUSH
80838: PPUSH
80839: PPUSH
80840: PPUSH
80841: PPUSH
80842: PPUSH
80843: PPUSH
// if not units then
80844: LD_VAR 0 1
80848: NOT
80849: IFFALSE 80853
// exit ;
80851: GO 81381
// result := UnitFilter ( units , [ f_ok ] ) ;
80853: LD_ADDR_VAR 0 3
80857: PUSH
80858: LD_VAR 0 1
80862: PPUSH
80863: LD_INT 50
80865: PUSH
80866: EMPTY
80867: LIST
80868: PPUSH
80869: CALL_OW 72
80873: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80874: LD_ADDR_VAR 0 8
80878: PUSH
80879: LD_VAR 0 1
80883: PUSH
80884: LD_INT 1
80886: ARRAY
80887: PPUSH
80888: CALL_OW 255
80892: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80893: LD_ADDR_VAR 0 10
80897: PUSH
80898: LD_INT 29
80900: PUSH
80901: LD_INT 91
80903: PUSH
80904: LD_INT 49
80906: PUSH
80907: EMPTY
80908: LIST
80909: LIST
80910: LIST
80911: ST_TO_ADDR
// if not result then
80912: LD_VAR 0 3
80916: NOT
80917: IFFALSE 80921
// exit ;
80919: GO 81381
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80921: LD_ADDR_VAR 0 5
80925: PUSH
80926: LD_INT 81
80928: PUSH
80929: LD_VAR 0 8
80933: PUSH
80934: EMPTY
80935: LIST
80936: LIST
80937: PPUSH
80938: CALL_OW 69
80942: ST_TO_ADDR
// for i in result do
80943: LD_ADDR_VAR 0 4
80947: PUSH
80948: LD_VAR 0 3
80952: PUSH
80953: FOR_IN
80954: IFFALSE 81379
// begin tag := GetTag ( i ) + 1 ;
80956: LD_ADDR_VAR 0 9
80960: PUSH
80961: LD_VAR 0 4
80965: PPUSH
80966: CALL_OW 110
80970: PUSH
80971: LD_INT 1
80973: PLUS
80974: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
80975: LD_ADDR_VAR 0 7
80979: PUSH
80980: LD_VAR 0 4
80984: PPUSH
80985: CALL_OW 250
80989: PPUSH
80990: LD_VAR 0 4
80994: PPUSH
80995: CALL_OW 251
80999: PPUSH
81000: LD_INT 4
81002: PPUSH
81003: CALL 80576 0 3
81007: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81008: LD_VAR 0 4
81012: PPUSH
81013: CALL_OW 247
81017: PUSH
81018: LD_INT 2
81020: EQUAL
81021: PUSH
81022: LD_VAR 0 7
81026: PUSH
81027: LD_INT 2
81029: GREATER
81030: AND
81031: PUSH
81032: LD_VAR 0 4
81036: PPUSH
81037: CALL_OW 264
81041: PUSH
81042: LD_VAR 0 10
81046: IN
81047: NOT
81048: AND
81049: IFFALSE 81088
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81051: LD_VAR 0 4
81055: PPUSH
81056: LD_VAR 0 7
81060: PUSH
81061: LD_INT 1
81063: ARRAY
81064: PUSH
81065: LD_INT 1
81067: ARRAY
81068: PPUSH
81069: LD_VAR 0 7
81073: PUSH
81074: LD_INT 1
81076: ARRAY
81077: PUSH
81078: LD_INT 2
81080: ARRAY
81081: PPUSH
81082: CALL_OW 116
81086: GO 81377
// if path > tag then
81088: LD_VAR 0 2
81092: PUSH
81093: LD_VAR 0 9
81097: GREATER
81098: IFFALSE 81306
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81100: LD_ADDR_VAR 0 6
81104: PUSH
81105: LD_VAR 0 5
81109: PPUSH
81110: LD_INT 91
81112: PUSH
81113: LD_VAR 0 4
81117: PUSH
81118: LD_INT 8
81120: PUSH
81121: EMPTY
81122: LIST
81123: LIST
81124: LIST
81125: PPUSH
81126: CALL_OW 72
81130: ST_TO_ADDR
// if nearEnemy then
81131: LD_VAR 0 6
81135: IFFALSE 81204
// begin if GetWeapon ( i ) = ru_time_lapser then
81137: LD_VAR 0 4
81141: PPUSH
81142: CALL_OW 264
81146: PUSH
81147: LD_INT 49
81149: EQUAL
81150: IFFALSE 81178
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81152: LD_VAR 0 4
81156: PPUSH
81157: LD_VAR 0 6
81161: PPUSH
81162: LD_VAR 0 4
81166: PPUSH
81167: CALL_OW 74
81171: PPUSH
81172: CALL_OW 112
81176: GO 81202
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81178: LD_VAR 0 4
81182: PPUSH
81183: LD_VAR 0 6
81187: PPUSH
81188: LD_VAR 0 4
81192: PPUSH
81193: CALL_OW 74
81197: PPUSH
81198: CALL 82452 0 2
// end else
81202: GO 81304
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81204: LD_VAR 0 4
81208: PPUSH
81209: LD_VAR 0 2
81213: PUSH
81214: LD_VAR 0 9
81218: ARRAY
81219: PUSH
81220: LD_INT 1
81222: ARRAY
81223: PPUSH
81224: LD_VAR 0 2
81228: PUSH
81229: LD_VAR 0 9
81233: ARRAY
81234: PUSH
81235: LD_INT 2
81237: ARRAY
81238: PPUSH
81239: CALL_OW 297
81243: PUSH
81244: LD_INT 6
81246: GREATER
81247: IFFALSE 81290
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81249: LD_VAR 0 4
81253: PPUSH
81254: LD_VAR 0 2
81258: PUSH
81259: LD_VAR 0 9
81263: ARRAY
81264: PUSH
81265: LD_INT 1
81267: ARRAY
81268: PPUSH
81269: LD_VAR 0 2
81273: PUSH
81274: LD_VAR 0 9
81278: ARRAY
81279: PUSH
81280: LD_INT 2
81282: ARRAY
81283: PPUSH
81284: CALL_OW 114
81288: GO 81304
// SetTag ( i , tag ) ;
81290: LD_VAR 0 4
81294: PPUSH
81295: LD_VAR 0 9
81299: PPUSH
81300: CALL_OW 109
// end else
81304: GO 81377
// if enemy then
81306: LD_VAR 0 5
81310: IFFALSE 81377
// begin if GetWeapon ( i ) = ru_time_lapser then
81312: LD_VAR 0 4
81316: PPUSH
81317: CALL_OW 264
81321: PUSH
81322: LD_INT 49
81324: EQUAL
81325: IFFALSE 81353
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81327: LD_VAR 0 4
81331: PPUSH
81332: LD_VAR 0 5
81336: PPUSH
81337: LD_VAR 0 4
81341: PPUSH
81342: CALL_OW 74
81346: PPUSH
81347: CALL_OW 112
81351: GO 81377
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81353: LD_VAR 0 4
81357: PPUSH
81358: LD_VAR 0 5
81362: PPUSH
81363: LD_VAR 0 4
81367: PPUSH
81368: CALL_OW 74
81372: PPUSH
81373: CALL 82452 0 2
// end ; end ;
81377: GO 80953
81379: POP
81380: POP
// end ;
81381: LD_VAR 0 3
81385: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81386: LD_INT 0
81388: PPUSH
81389: PPUSH
81390: PPUSH
// if not unit or IsInUnit ( unit ) then
81391: LD_VAR 0 1
81395: NOT
81396: PUSH
81397: LD_VAR 0 1
81401: PPUSH
81402: CALL_OW 310
81406: OR
81407: IFFALSE 81411
// exit ;
81409: GO 81502
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81411: LD_ADDR_VAR 0 4
81415: PUSH
81416: LD_VAR 0 1
81420: PPUSH
81421: CALL_OW 250
81425: PPUSH
81426: LD_VAR 0 2
81430: PPUSH
81431: LD_INT 1
81433: PPUSH
81434: CALL_OW 272
81438: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81439: LD_ADDR_VAR 0 5
81443: PUSH
81444: LD_VAR 0 1
81448: PPUSH
81449: CALL_OW 251
81453: PPUSH
81454: LD_VAR 0 2
81458: PPUSH
81459: LD_INT 1
81461: PPUSH
81462: CALL_OW 273
81466: ST_TO_ADDR
// if ValidHex ( x , y ) then
81467: LD_VAR 0 4
81471: PPUSH
81472: LD_VAR 0 5
81476: PPUSH
81477: CALL_OW 488
81481: IFFALSE 81502
// ComTurnXY ( unit , x , y ) ;
81483: LD_VAR 0 1
81487: PPUSH
81488: LD_VAR 0 4
81492: PPUSH
81493: LD_VAR 0 5
81497: PPUSH
81498: CALL_OW 118
// end ;
81502: LD_VAR 0 3
81506: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81507: LD_INT 0
81509: PPUSH
81510: PPUSH
// result := false ;
81511: LD_ADDR_VAR 0 3
81515: PUSH
81516: LD_INT 0
81518: ST_TO_ADDR
// if not units then
81519: LD_VAR 0 2
81523: NOT
81524: IFFALSE 81528
// exit ;
81526: GO 81573
// for i in units do
81528: LD_ADDR_VAR 0 4
81532: PUSH
81533: LD_VAR 0 2
81537: PUSH
81538: FOR_IN
81539: IFFALSE 81571
// if See ( side , i ) then
81541: LD_VAR 0 1
81545: PPUSH
81546: LD_VAR 0 4
81550: PPUSH
81551: CALL_OW 292
81555: IFFALSE 81569
// begin result := true ;
81557: LD_ADDR_VAR 0 3
81561: PUSH
81562: LD_INT 1
81564: ST_TO_ADDR
// exit ;
81565: POP
81566: POP
81567: GO 81573
// end ;
81569: GO 81538
81571: POP
81572: POP
// end ;
81573: LD_VAR 0 3
81577: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81578: LD_INT 0
81580: PPUSH
81581: PPUSH
81582: PPUSH
81583: PPUSH
// if not unit or not points then
81584: LD_VAR 0 1
81588: NOT
81589: PUSH
81590: LD_VAR 0 2
81594: NOT
81595: OR
81596: IFFALSE 81600
// exit ;
81598: GO 81690
// dist := 99999 ;
81600: LD_ADDR_VAR 0 5
81604: PUSH
81605: LD_INT 99999
81607: ST_TO_ADDR
// for i in points do
81608: LD_ADDR_VAR 0 4
81612: PUSH
81613: LD_VAR 0 2
81617: PUSH
81618: FOR_IN
81619: IFFALSE 81688
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81621: LD_ADDR_VAR 0 6
81625: PUSH
81626: LD_VAR 0 1
81630: PPUSH
81631: LD_VAR 0 4
81635: PUSH
81636: LD_INT 1
81638: ARRAY
81639: PPUSH
81640: LD_VAR 0 4
81644: PUSH
81645: LD_INT 2
81647: ARRAY
81648: PPUSH
81649: CALL_OW 297
81653: ST_TO_ADDR
// if tmpDist < dist then
81654: LD_VAR 0 6
81658: PUSH
81659: LD_VAR 0 5
81663: LESS
81664: IFFALSE 81686
// begin result := i ;
81666: LD_ADDR_VAR 0 3
81670: PUSH
81671: LD_VAR 0 4
81675: ST_TO_ADDR
// dist := tmpDist ;
81676: LD_ADDR_VAR 0 5
81680: PUSH
81681: LD_VAR 0 6
81685: ST_TO_ADDR
// end ; end ;
81686: GO 81618
81688: POP
81689: POP
// end ;
81690: LD_VAR 0 3
81694: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81695: LD_INT 0
81697: PPUSH
// uc_side := side ;
81698: LD_ADDR_OWVAR 20
81702: PUSH
81703: LD_VAR 0 1
81707: ST_TO_ADDR
// uc_nation := 3 ;
81708: LD_ADDR_OWVAR 21
81712: PUSH
81713: LD_INT 3
81715: ST_TO_ADDR
// vc_chassis := 25 ;
81716: LD_ADDR_OWVAR 37
81720: PUSH
81721: LD_INT 25
81723: ST_TO_ADDR
// vc_engine := engine_siberite ;
81724: LD_ADDR_OWVAR 39
81728: PUSH
81729: LD_INT 3
81731: ST_TO_ADDR
// vc_control := control_computer ;
81732: LD_ADDR_OWVAR 38
81736: PUSH
81737: LD_INT 3
81739: ST_TO_ADDR
// vc_weapon := 59 ;
81740: LD_ADDR_OWVAR 40
81744: PUSH
81745: LD_INT 59
81747: ST_TO_ADDR
// result := CreateVehicle ;
81748: LD_ADDR_VAR 0 5
81752: PUSH
81753: CALL_OW 45
81757: ST_TO_ADDR
// SetDir ( result , d ) ;
81758: LD_VAR 0 5
81762: PPUSH
81763: LD_VAR 0 4
81767: PPUSH
81768: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81772: LD_VAR 0 5
81776: PPUSH
81777: LD_VAR 0 2
81781: PPUSH
81782: LD_VAR 0 3
81786: PPUSH
81787: LD_INT 0
81789: PPUSH
81790: CALL_OW 48
// end ;
81794: LD_VAR 0 5
81798: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81799: LD_INT 0
81801: PPUSH
81802: PPUSH
81803: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81804: LD_ADDR_VAR 0 2
81808: PUSH
81809: LD_INT 0
81811: PUSH
81812: LD_INT 0
81814: PUSH
81815: LD_INT 0
81817: PUSH
81818: LD_INT 0
81820: PUSH
81821: EMPTY
81822: LIST
81823: LIST
81824: LIST
81825: LIST
81826: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81827: LD_VAR 0 1
81831: NOT
81832: PUSH
81833: LD_VAR 0 1
81837: PPUSH
81838: CALL_OW 264
81842: PUSH
81843: LD_INT 12
81845: PUSH
81846: LD_INT 51
81848: PUSH
81849: LD_INT 32
81851: PUSH
81852: LD_INT 89
81854: PUSH
81855: EMPTY
81856: LIST
81857: LIST
81858: LIST
81859: LIST
81860: IN
81861: NOT
81862: OR
81863: IFFALSE 81867
// exit ;
81865: GO 81965
// for i := 1 to 3 do
81867: LD_ADDR_VAR 0 3
81871: PUSH
81872: DOUBLE
81873: LD_INT 1
81875: DEC
81876: ST_TO_ADDR
81877: LD_INT 3
81879: PUSH
81880: FOR_TO
81881: IFFALSE 81963
// begin tmp := GetCargo ( cargo , i ) ;
81883: LD_ADDR_VAR 0 4
81887: PUSH
81888: LD_VAR 0 1
81892: PPUSH
81893: LD_VAR 0 3
81897: PPUSH
81898: CALL_OW 289
81902: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81903: LD_ADDR_VAR 0 2
81907: PUSH
81908: LD_VAR 0 2
81912: PPUSH
81913: LD_VAR 0 3
81917: PPUSH
81918: LD_VAR 0 4
81922: PPUSH
81923: CALL_OW 1
81927: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81928: LD_ADDR_VAR 0 2
81932: PUSH
81933: LD_VAR 0 2
81937: PPUSH
81938: LD_INT 4
81940: PPUSH
81941: LD_VAR 0 2
81945: PUSH
81946: LD_INT 4
81948: ARRAY
81949: PUSH
81950: LD_VAR 0 4
81954: PLUS
81955: PPUSH
81956: CALL_OW 1
81960: ST_TO_ADDR
// end ;
81961: GO 81880
81963: POP
81964: POP
// end ;
81965: LD_VAR 0 2
81969: RET
// export function Length ( array ) ; begin
81970: LD_INT 0
81972: PPUSH
// result := array + 0 ;
81973: LD_ADDR_VAR 0 2
81977: PUSH
81978: LD_VAR 0 1
81982: PUSH
81983: LD_INT 0
81985: PLUS
81986: ST_TO_ADDR
// end ;
81987: LD_VAR 0 2
81991: RET
// export function PrepareArray ( array ) ; begin
81992: LD_INT 0
81994: PPUSH
// result := array diff 0 ;
81995: LD_ADDR_VAR 0 2
81999: PUSH
82000: LD_VAR 0 1
82004: PUSH
82005: LD_INT 0
82007: DIFF
82008: ST_TO_ADDR
// if not result [ 1 ] then
82009: LD_VAR 0 2
82013: PUSH
82014: LD_INT 1
82016: ARRAY
82017: NOT
82018: IFFALSE 82038
// result := Delete ( result , 1 ) ;
82020: LD_ADDR_VAR 0 2
82024: PUSH
82025: LD_VAR 0 2
82029: PPUSH
82030: LD_INT 1
82032: PPUSH
82033: CALL_OW 3
82037: ST_TO_ADDR
// end ;
82038: LD_VAR 0 2
82042: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82043: LD_INT 0
82045: PPUSH
82046: PPUSH
82047: PPUSH
82048: PPUSH
// sibRocketRange := 25 ;
82049: LD_ADDR_VAR 0 6
82053: PUSH
82054: LD_INT 25
82056: ST_TO_ADDR
// result := false ;
82057: LD_ADDR_VAR 0 4
82061: PUSH
82062: LD_INT 0
82064: ST_TO_ADDR
// for i := 0 to 5 do
82065: LD_ADDR_VAR 0 5
82069: PUSH
82070: DOUBLE
82071: LD_INT 0
82073: DEC
82074: ST_TO_ADDR
82075: LD_INT 5
82077: PUSH
82078: FOR_TO
82079: IFFALSE 82146
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82081: LD_VAR 0 1
82085: PPUSH
82086: LD_VAR 0 5
82090: PPUSH
82091: LD_VAR 0 6
82095: PPUSH
82096: CALL_OW 272
82100: PPUSH
82101: LD_VAR 0 2
82105: PPUSH
82106: LD_VAR 0 5
82110: PPUSH
82111: LD_VAR 0 6
82115: PPUSH
82116: CALL_OW 273
82120: PPUSH
82121: LD_VAR 0 3
82125: PPUSH
82126: CALL_OW 309
82130: IFFALSE 82144
// begin result := true ;
82132: LD_ADDR_VAR 0 4
82136: PUSH
82137: LD_INT 1
82139: ST_TO_ADDR
// exit ;
82140: POP
82141: POP
82142: GO 82148
// end ;
82144: GO 82078
82146: POP
82147: POP
// end ;
82148: LD_VAR 0 4
82152: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82153: LD_INT 0
82155: PPUSH
82156: PPUSH
82157: PPUSH
// if btype = b_depot then
82158: LD_VAR 0 2
82162: PUSH
82163: LD_INT 0
82165: EQUAL
82166: IFFALSE 82178
// begin result := true ;
82168: LD_ADDR_VAR 0 3
82172: PUSH
82173: LD_INT 1
82175: ST_TO_ADDR
// exit ;
82176: GO 82294
// end ; pom := GetBase ( depot ) ;
82178: LD_ADDR_VAR 0 4
82182: PUSH
82183: LD_VAR 0 1
82187: PPUSH
82188: CALL_OW 274
82192: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82193: LD_ADDR_VAR 0 5
82197: PUSH
82198: LD_VAR 0 2
82202: PPUSH
82203: LD_VAR 0 1
82207: PPUSH
82208: CALL_OW 248
82212: PPUSH
82213: CALL_OW 450
82217: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82218: LD_ADDR_VAR 0 3
82222: PUSH
82223: LD_VAR 0 4
82227: PPUSH
82228: LD_INT 1
82230: PPUSH
82231: CALL_OW 275
82235: PUSH
82236: LD_VAR 0 5
82240: PUSH
82241: LD_INT 1
82243: ARRAY
82244: GREATEREQUAL
82245: PUSH
82246: LD_VAR 0 4
82250: PPUSH
82251: LD_INT 2
82253: PPUSH
82254: CALL_OW 275
82258: PUSH
82259: LD_VAR 0 5
82263: PUSH
82264: LD_INT 2
82266: ARRAY
82267: GREATEREQUAL
82268: AND
82269: PUSH
82270: LD_VAR 0 4
82274: PPUSH
82275: LD_INT 3
82277: PPUSH
82278: CALL_OW 275
82282: PUSH
82283: LD_VAR 0 5
82287: PUSH
82288: LD_INT 3
82290: ARRAY
82291: GREATEREQUAL
82292: AND
82293: ST_TO_ADDR
// end ;
82294: LD_VAR 0 3
82298: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82299: LD_INT 0
82301: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82302: LD_VAR 0 1
82306: PPUSH
82307: LD_VAR 0 2
82311: PPUSH
82312: LD_INT 0
82314: PPUSH
82315: LD_INT 0
82317: PPUSH
82318: LD_INT 1
82320: PPUSH
82321: LD_INT 0
82323: PPUSH
82324: CALL_OW 587
// end ;
82328: LD_VAR 0 3
82332: RET
// export function CenterOnNow ( unit ) ; begin
82333: LD_INT 0
82335: PPUSH
// result := IsInUnit ( unit ) ;
82336: LD_ADDR_VAR 0 2
82340: PUSH
82341: LD_VAR 0 1
82345: PPUSH
82346: CALL_OW 310
82350: ST_TO_ADDR
// if not result then
82351: LD_VAR 0 2
82355: NOT
82356: IFFALSE 82368
// result := unit ;
82358: LD_ADDR_VAR 0 2
82362: PUSH
82363: LD_VAR 0 1
82367: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82368: LD_VAR 0 1
82372: PPUSH
82373: CALL_OW 87
// end ;
82377: LD_VAR 0 2
82381: RET
// export function ComMoveHex ( unit , hex ) ; begin
82382: LD_INT 0
82384: PPUSH
// if not hex then
82385: LD_VAR 0 2
82389: NOT
82390: IFFALSE 82394
// exit ;
82392: GO 82447
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82394: LD_VAR 0 2
82398: PUSH
82399: LD_INT 1
82401: ARRAY
82402: PPUSH
82403: LD_VAR 0 2
82407: PUSH
82408: LD_INT 2
82410: ARRAY
82411: PPUSH
82412: CALL_OW 428
82416: IFFALSE 82420
// exit ;
82418: GO 82447
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82420: LD_VAR 0 1
82424: PPUSH
82425: LD_VAR 0 2
82429: PUSH
82430: LD_INT 1
82432: ARRAY
82433: PPUSH
82434: LD_VAR 0 2
82438: PUSH
82439: LD_INT 2
82441: ARRAY
82442: PPUSH
82443: CALL_OW 111
// end ;
82447: LD_VAR 0 3
82451: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82452: LD_INT 0
82454: PPUSH
82455: PPUSH
82456: PPUSH
// if not unit or not enemy then
82457: LD_VAR 0 1
82461: NOT
82462: PUSH
82463: LD_VAR 0 2
82467: NOT
82468: OR
82469: IFFALSE 82473
// exit ;
82471: GO 82597
// x := GetX ( enemy ) ;
82473: LD_ADDR_VAR 0 4
82477: PUSH
82478: LD_VAR 0 2
82482: PPUSH
82483: CALL_OW 250
82487: ST_TO_ADDR
// y := GetY ( enemy ) ;
82488: LD_ADDR_VAR 0 5
82492: PUSH
82493: LD_VAR 0 2
82497: PPUSH
82498: CALL_OW 251
82502: ST_TO_ADDR
// if ValidHex ( x , y ) then
82503: LD_VAR 0 4
82507: PPUSH
82508: LD_VAR 0 5
82512: PPUSH
82513: CALL_OW 488
82517: IFFALSE 82597
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82519: LD_VAR 0 2
82523: PPUSH
82524: CALL_OW 247
82528: PUSH
82529: LD_INT 3
82531: PUSH
82532: LD_INT 2
82534: PUSH
82535: EMPTY
82536: LIST
82537: LIST
82538: IN
82539: PUSH
82540: LD_VAR 0 1
82544: PPUSH
82545: CALL_OW 255
82549: PPUSH
82550: LD_VAR 0 2
82554: PPUSH
82555: CALL_OW 292
82559: OR
82560: IFFALSE 82578
// ComAttackUnit ( unit , enemy ) else
82562: LD_VAR 0 1
82566: PPUSH
82567: LD_VAR 0 2
82571: PPUSH
82572: CALL_OW 115
82576: GO 82597
// ComAgressiveMove ( unit , x , y ) ;
82578: LD_VAR 0 1
82582: PPUSH
82583: LD_VAR 0 4
82587: PPUSH
82588: LD_VAR 0 5
82592: PPUSH
82593: CALL_OW 114
// end ;
82597: LD_VAR 0 3
82601: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82602: LD_INT 0
82604: PPUSH
82605: PPUSH
82606: PPUSH
// list := AreaToList ( area , 0 ) ;
82607: LD_ADDR_VAR 0 5
82611: PUSH
82612: LD_VAR 0 1
82616: PPUSH
82617: LD_INT 0
82619: PPUSH
82620: CALL_OW 517
82624: ST_TO_ADDR
// if not list then
82625: LD_VAR 0 5
82629: NOT
82630: IFFALSE 82634
// exit ;
82632: GO 82764
// if all then
82634: LD_VAR 0 2
82638: IFFALSE 82726
// begin for i := 1 to list [ 1 ] do
82640: LD_ADDR_VAR 0 4
82644: PUSH
82645: DOUBLE
82646: LD_INT 1
82648: DEC
82649: ST_TO_ADDR
82650: LD_VAR 0 5
82654: PUSH
82655: LD_INT 1
82657: ARRAY
82658: PUSH
82659: FOR_TO
82660: IFFALSE 82722
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82662: LD_ADDR_VAR 0 3
82666: PUSH
82667: LD_VAR 0 3
82671: PPUSH
82672: LD_VAR 0 3
82676: PUSH
82677: LD_INT 1
82679: PLUS
82680: PPUSH
82681: LD_VAR 0 5
82685: PUSH
82686: LD_INT 1
82688: ARRAY
82689: PUSH
82690: LD_VAR 0 4
82694: ARRAY
82695: PUSH
82696: LD_VAR 0 5
82700: PUSH
82701: LD_INT 2
82703: ARRAY
82704: PUSH
82705: LD_VAR 0 4
82709: ARRAY
82710: PUSH
82711: EMPTY
82712: LIST
82713: LIST
82714: PPUSH
82715: CALL_OW 1
82719: ST_TO_ADDR
82720: GO 82659
82722: POP
82723: POP
// exit ;
82724: GO 82764
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82726: LD_ADDR_VAR 0 3
82730: PUSH
82731: LD_VAR 0 5
82735: PUSH
82736: LD_INT 1
82738: ARRAY
82739: PUSH
82740: LD_INT 1
82742: ARRAY
82743: PUSH
82744: LD_VAR 0 5
82748: PUSH
82749: LD_INT 2
82751: ARRAY
82752: PUSH
82753: LD_INT 1
82755: ARRAY
82756: PUSH
82757: EMPTY
82758: LIST
82759: LIST
82760: PUSH
82761: EMPTY
82762: LIST
82763: ST_TO_ADDR
// end ;
82764: LD_VAR 0 3
82768: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82769: LD_INT 0
82771: PPUSH
82772: PPUSH
// list := AreaToList ( area , 0 ) ;
82773: LD_ADDR_VAR 0 4
82777: PUSH
82778: LD_VAR 0 1
82782: PPUSH
82783: LD_INT 0
82785: PPUSH
82786: CALL_OW 517
82790: ST_TO_ADDR
// if not list then
82791: LD_VAR 0 4
82795: NOT
82796: IFFALSE 82800
// exit ;
82798: GO 82841
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82800: LD_ADDR_VAR 0 3
82804: PUSH
82805: LD_VAR 0 4
82809: PUSH
82810: LD_INT 1
82812: ARRAY
82813: PUSH
82814: LD_INT 1
82816: ARRAY
82817: PUSH
82818: LD_VAR 0 4
82822: PUSH
82823: LD_INT 2
82825: ARRAY
82826: PUSH
82827: LD_INT 1
82829: ARRAY
82830: PUSH
82831: LD_VAR 0 2
82835: PUSH
82836: EMPTY
82837: LIST
82838: LIST
82839: LIST
82840: ST_TO_ADDR
// end ;
82841: LD_VAR 0 3
82845: RET
// export function First ( array ) ; begin
82846: LD_INT 0
82848: PPUSH
// if not array then
82849: LD_VAR 0 1
82853: NOT
82854: IFFALSE 82858
// exit ;
82856: GO 82872
// result := array [ 1 ] ;
82858: LD_ADDR_VAR 0 2
82862: PUSH
82863: LD_VAR 0 1
82867: PUSH
82868: LD_INT 1
82870: ARRAY
82871: ST_TO_ADDR
// end ;
82872: LD_VAR 0 2
82876: RET
// export function Last ( array ) ; begin
82877: LD_INT 0
82879: PPUSH
// if not array then
82880: LD_VAR 0 1
82884: NOT
82885: IFFALSE 82889
// exit ;
82887: GO 82905
// result := array [ array ] ;
82889: LD_ADDR_VAR 0 2
82893: PUSH
82894: LD_VAR 0 1
82898: PUSH
82899: LD_VAR 0 1
82903: ARRAY
82904: ST_TO_ADDR
// end ;
82905: LD_VAR 0 2
82909: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
82910: LD_INT 0
82912: PPUSH
82913: PPUSH
// result := [ ] ;
82914: LD_ADDR_VAR 0 5
82918: PUSH
82919: EMPTY
82920: ST_TO_ADDR
// if not array then
82921: LD_VAR 0 1
82925: NOT
82926: IFFALSE 82930
// exit ;
82928: GO 83042
// for i := 1 to array do
82930: LD_ADDR_VAR 0 6
82934: PUSH
82935: DOUBLE
82936: LD_INT 1
82938: DEC
82939: ST_TO_ADDR
82940: LD_VAR 0 1
82944: PUSH
82945: FOR_TO
82946: IFFALSE 83040
// if array [ i ] [ index ] = value then
82948: LD_VAR 0 1
82952: PUSH
82953: LD_VAR 0 6
82957: ARRAY
82958: PUSH
82959: LD_VAR 0 2
82963: ARRAY
82964: PUSH
82965: LD_VAR 0 3
82969: EQUAL
82970: IFFALSE 83038
// begin if indexColumn then
82972: LD_VAR 0 4
82976: IFFALSE 83012
// result := Join ( result , array [ i ] [ indexColumn ] ) else
82978: LD_ADDR_VAR 0 5
82982: PUSH
82983: LD_VAR 0 5
82987: PPUSH
82988: LD_VAR 0 1
82992: PUSH
82993: LD_VAR 0 6
82997: ARRAY
82998: PUSH
82999: LD_VAR 0 4
83003: ARRAY
83004: PPUSH
83005: CALL 78230 0 2
83009: ST_TO_ADDR
83010: GO 83038
// result := Join ( result , array [ i ] ) ;
83012: LD_ADDR_VAR 0 5
83016: PUSH
83017: LD_VAR 0 5
83021: PPUSH
83022: LD_VAR 0 1
83026: PUSH
83027: LD_VAR 0 6
83031: ARRAY
83032: PPUSH
83033: CALL 78230 0 2
83037: ST_TO_ADDR
// end ;
83038: GO 82945
83040: POP
83041: POP
// end ;
83042: LD_VAR 0 5
83046: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83047: LD_INT 0
83049: PPUSH
// if not vehicles or not parkingPoint then
83050: LD_VAR 0 1
83054: NOT
83055: PUSH
83056: LD_VAR 0 2
83060: NOT
83061: OR
83062: IFFALSE 83066
// exit ;
83064: GO 83164
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83066: LD_ADDR_VAR 0 1
83070: PUSH
83071: LD_VAR 0 1
83075: PPUSH
83076: LD_INT 50
83078: PUSH
83079: EMPTY
83080: LIST
83081: PUSH
83082: LD_INT 3
83084: PUSH
83085: LD_INT 92
83087: PUSH
83088: LD_VAR 0 2
83092: PUSH
83093: LD_INT 1
83095: ARRAY
83096: PUSH
83097: LD_VAR 0 2
83101: PUSH
83102: LD_INT 2
83104: ARRAY
83105: PUSH
83106: LD_INT 8
83108: PUSH
83109: EMPTY
83110: LIST
83111: LIST
83112: LIST
83113: LIST
83114: PUSH
83115: EMPTY
83116: LIST
83117: LIST
83118: PUSH
83119: EMPTY
83120: LIST
83121: LIST
83122: PPUSH
83123: CALL_OW 72
83127: ST_TO_ADDR
// if not vehicles then
83128: LD_VAR 0 1
83132: NOT
83133: IFFALSE 83137
// exit ;
83135: GO 83164
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83137: LD_VAR 0 1
83141: PPUSH
83142: LD_VAR 0 2
83146: PUSH
83147: LD_INT 1
83149: ARRAY
83150: PPUSH
83151: LD_VAR 0 2
83155: PUSH
83156: LD_INT 2
83158: ARRAY
83159: PPUSH
83160: CALL_OW 111
// end ;
83164: LD_VAR 0 3
83168: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83169: LD_INT 0
83171: PPUSH
83172: PPUSH
83173: PPUSH
// if not side or not area then
83174: LD_VAR 0 1
83178: NOT
83179: PUSH
83180: LD_VAR 0 2
83184: NOT
83185: OR
83186: IFFALSE 83190
// exit ;
83188: GO 83309
// tmp := AreaToList ( area , 0 ) ;
83190: LD_ADDR_VAR 0 5
83194: PUSH
83195: LD_VAR 0 2
83199: PPUSH
83200: LD_INT 0
83202: PPUSH
83203: CALL_OW 517
83207: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83208: LD_ADDR_VAR 0 4
83212: PUSH
83213: DOUBLE
83214: LD_INT 1
83216: DEC
83217: ST_TO_ADDR
83218: LD_VAR 0 5
83222: PUSH
83223: LD_INT 1
83225: ARRAY
83226: PUSH
83227: FOR_TO
83228: IFFALSE 83307
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83230: LD_VAR 0 5
83234: PUSH
83235: LD_INT 1
83237: ARRAY
83238: PUSH
83239: LD_VAR 0 4
83243: ARRAY
83244: PPUSH
83245: LD_VAR 0 5
83249: PUSH
83250: LD_INT 2
83252: ARRAY
83253: PUSH
83254: LD_VAR 0 4
83258: ARRAY
83259: PPUSH
83260: CALL_OW 351
83264: IFFALSE 83305
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83266: LD_VAR 0 5
83270: PUSH
83271: LD_INT 1
83273: ARRAY
83274: PUSH
83275: LD_VAR 0 4
83279: ARRAY
83280: PPUSH
83281: LD_VAR 0 5
83285: PUSH
83286: LD_INT 2
83288: ARRAY
83289: PUSH
83290: LD_VAR 0 4
83294: ARRAY
83295: PPUSH
83296: LD_VAR 0 1
83300: PPUSH
83301: CALL_OW 244
// end ;
83305: GO 83227
83307: POP
83308: POP
// end ; end_of_file
83309: LD_VAR 0 3
83313: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83314: LD_VAR 0 1
83318: PUSH
83319: LD_INT 200
83321: DOUBLE
83322: GREATEREQUAL
83323: IFFALSE 83331
83325: LD_INT 299
83327: DOUBLE
83328: LESSEQUAL
83329: IFTRUE 83333
83331: GO 83365
83333: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83334: LD_VAR 0 1
83338: PPUSH
83339: LD_VAR 0 2
83343: PPUSH
83344: LD_VAR 0 3
83348: PPUSH
83349: LD_VAR 0 4
83353: PPUSH
83354: LD_VAR 0 5
83358: PPUSH
83359: CALL 35799 0 5
83363: GO 83442
83365: LD_INT 300
83367: DOUBLE
83368: GREATEREQUAL
83369: IFFALSE 83377
83371: LD_INT 399
83373: DOUBLE
83374: LESSEQUAL
83375: IFTRUE 83379
83377: GO 83441
83379: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83380: LD_VAR 0 1
83384: PPUSH
83385: LD_VAR 0 2
83389: PPUSH
83390: LD_VAR 0 3
83394: PPUSH
83395: LD_VAR 0 4
83399: PPUSH
83400: LD_VAR 0 5
83404: PPUSH
83405: LD_VAR 0 6
83409: PPUSH
83410: LD_VAR 0 7
83414: PPUSH
83415: LD_VAR 0 8
83419: PPUSH
83420: LD_VAR 0 9
83424: PPUSH
83425: LD_VAR 0 10
83429: PPUSH
83430: LD_VAR 0 11
83434: PPUSH
83435: CALL 31787 0 11
83439: GO 83442
83441: POP
// end ;
83442: PPOPN 11
83444: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83445: LD_VAR 0 1
83449: PPUSH
83450: LD_VAR 0 2
83454: PPUSH
83455: LD_VAR 0 3
83459: PPUSH
83460: LD_VAR 0 4
83464: PPUSH
83465: LD_VAR 0 5
83469: PPUSH
83470: CALL 35264 0 5
// end ; end_of_file
83474: PPOPN 5
83476: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83477: LD_VAR 0 1
83481: PPUSH
83482: LD_VAR 0 2
83486: PPUSH
83487: LD_VAR 0 3
83491: PPUSH
83492: LD_VAR 0 4
83496: PPUSH
83497: LD_VAR 0 5
83501: PPUSH
83502: LD_VAR 0 6
83506: PPUSH
83507: CALL 19439 0 6
// end ;
83511: PPOPN 6
83513: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83514: LD_INT 0
83516: PPUSH
// begin if not units then
83517: LD_VAR 0 1
83521: NOT
83522: IFFALSE 83526
// exit ;
83524: GO 83526
// end ;
83526: PPOPN 7
83528: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83529: CALL 19326 0 0
// end ;
83533: PPOPN 1
83535: END
