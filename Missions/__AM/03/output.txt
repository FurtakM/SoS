// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3059 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2273 0 0
// PrepareWesternBase ;
  41: CALL 2502 0 0
// Action ;
  45: CALL 5323 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
// uc_side := 4 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 4
1162: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1163: LD_ADDR_EXP 46
1167: PUSH
1168: LD_STRING Powell
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: LD_STRING 
1176: PPUSH
1177: CALL 36544 0 3
1181: ST_TO_ADDR
// uc_side := 1 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// uc_nation := 1 ;
1190: LD_ADDR_OWVAR 21
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if debug then
1198: LD_EXP 1
1202: IFFALSE 1332
// begin for i = 1 to 4 do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 4
1216: PUSH
1217: FOR_TO
1218: IFFALSE 1269
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL_OW 12
1233: PPUSH
1234: LD_INT 3
1236: PPUSH
1237: CALL_OW 380
// un := CreateHuman ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: CALL_OW 44
1250: ST_TO_ADDR
// others := others ^ un ;
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 3
1265: ADD
1266: ST_TO_ADDR
// end ;
1267: GO 1217
1269: POP
1270: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1271: LD_ADDR_VAR 0 6
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 90
1290: PUSH
1291: LD_INT 504
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 51
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 750
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1332: LD_ADDR_EXP 37
1336: PUSH
1337: LD_STRING JMM
1339: PPUSH
1340: LD_EXP 1
1344: NOT
1345: PPUSH
1346: LD_EXP 3
1350: PPUSH
1351: CALL 36544 0 3
1355: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1356: LD_ADDR_EXP 38
1360: PUSH
1361: LD_STRING Bobby
1363: PPUSH
1364: LD_EXP 1
1368: NOT
1369: PPUSH
1370: LD_EXP 3
1374: PPUSH
1375: CALL 36544 0 3
1379: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 39
1384: PUSH
1385: LD_STRING Cyrus
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 36544 0 3
1403: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1404: LD_ADDR_EXP 40
1408: PUSH
1409: LD_STRING Lisa
1411: PPUSH
1412: LD_EXP 1
1416: NOT
1417: PPUSH
1418: LD_EXP 3
1422: PPUSH
1423: CALL 36544 0 3
1427: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1428: LD_ADDR_EXP 41
1432: PUSH
1433: LD_STRING Khatam
1435: PPUSH
1436: LD_EXP 1
1440: NOT
1441: PPUSH
1442: LD_EXP 3
1446: PPUSH
1447: CALL 36544 0 3
1451: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1452: LD_ADDR_EXP 42
1456: PUSH
1457: LD_STRING Brian
1459: PPUSH
1460: LD_EXP 1
1464: NOT
1465: PPUSH
1466: LD_EXP 3
1470: PPUSH
1471: CALL 36544 0 3
1475: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1476: LD_ADDR_EXP 43
1480: PUSH
1481: LD_STRING Jerry
1483: PPUSH
1484: LD_EXP 1
1488: NOT
1489: PPUSH
1490: LD_EXP 3
1494: PPUSH
1495: CALL 36544 0 3
1499: ST_TO_ADDR
// if Bobby then
1500: LD_EXP 38
1504: IFFALSE 1535
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 4
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_EXP 38
1529: PPUSH
1530: CALL_OW 2
1534: ST_TO_ADDR
// if Cyrus then
1535: LD_EXP 39
1539: IFFALSE 1570
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 4
1555: PUSH
1556: LD_INT 1
1558: PLUS
1559: PPUSH
1560: LD_EXP 39
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if Lisa then
1570: LD_EXP 40
1574: IFFALSE 1605
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: PLUS
1594: PPUSH
1595: LD_EXP 40
1599: PPUSH
1600: CALL_OW 2
1604: ST_TO_ADDR
// if Khatam then
1605: LD_EXP 41
1609: IFFALSE 1640
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_VAR 0 4
1620: PPUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_INT 1
1628: PLUS
1629: PPUSH
1630: LD_EXP 41
1634: PPUSH
1635: CALL_OW 2
1639: ST_TO_ADDR
// if Brian then
1640: LD_EXP 42
1644: IFFALSE 1675
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_EXP 42
1669: PPUSH
1670: CALL_OW 2
1674: ST_TO_ADDR
// if Jerry then
1675: LD_EXP 43
1679: IFFALSE 1710
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 1
1698: PLUS
1699: PPUSH
1700: LD_EXP 43
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1710: LD_STRING 02_other_survivors
1712: PPUSH
1713: CALL_OW 28
1717: IFFALSE 1732
// others := CreateCharacterSet ( 02_other_survivors ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_STRING 02_other_survivors
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// if others then
1732: LD_VAR 0 5
1736: IFFALSE 1761
// begin tmp := tmp ^ others ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_VAR 0 5
1752: ADD
1753: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1754: LD_STRING 02_other_survivors
1756: PPUSH
1757: CALL_OW 40
// end ; jmm_units := tmp ;
1761: LD_ADDR_EXP 4
1765: PUSH
1766: LD_VAR 0 4
1770: ST_TO_ADDR
// if not vehicles then
1771: LD_VAR 0 6
1775: NOT
1776: IFFALSE 1794
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_STRING 02_tanks_1
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL_OW 30
1793: ST_TO_ADDR
// if vehicles then
1794: LD_VAR 0 6
1798: IFFALSE 1992
// begin got_mech := false ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1808: LD_VAR 0 4
1812: PPUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 72
1827: IFFALSE 1837
// got_mech := true ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// for i = 1 to vehicles do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1990
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_VAR 0 6
1870: PUSH
1871: LD_VAR 0 2
1875: ARRAY
1876: PUSH
1877: LD_INT 1
1879: ARRAY
1880: PPUSH
1881: LD_VAR 0 6
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 2
1894: ARRAY
1895: PPUSH
1896: LD_VAR 0 6
1900: PUSH
1901: LD_VAR 0 2
1905: ARRAY
1906: PUSH
1907: LD_INT 3
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 4
1924: ARRAY
1925: PPUSH
1926: LD_INT 40
1928: PPUSH
1929: CALL 497 0 7
1933: ST_TO_ADDR
// if not got_mech then
1934: LD_VAR 0 7
1938: NOT
1939: IFFALSE 1965
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 6
1959: ARRAY
1960: PPUSH
1961: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: LD_VAR 0 3
1982: PPUSH
1983: CALL_OW 2
1987: ST_TO_ADDR
// end ;
1988: GO 1852
1990: POP
1991: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1992: LD_EXP 37
1996: PPUSH
1997: LD_INT 194
1999: PPUSH
2000: LD_INT 119
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 48
// if tmp then
2010: LD_VAR 0 4
2014: IFFALSE 2202
// begin for i in tmp do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_VAR 0 4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2200
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2029: LD_VAR 0 2
2033: PPUSH
2034: CALL_OW 257
2038: PUSH
2039: LD_INT 1
2041: NONEQUAL
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 41
2052: NONEQUAL
2053: AND
2054: IFFALSE 2068
// SetClass ( i , 1 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 336
// if i = Khatam then
2068: LD_VAR 0 2
2072: PUSH
2073: LD_EXP 41
2077: EQUAL
2078: IFFALSE 2092
// SetClass ( i , 4 ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 4
2087: PPUSH
2088: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 58
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2133: LD_VAR 0 2
2137: PPUSH
2138: CALL_OW 247
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: PUSH
2147: LD_VAR 0 8
2151: AND
2152: IFFALSE 2174
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2154: LD_VAR 0 2
2158: PPUSH
2159: LD_VAR 0 8
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 52
2172: GO 2189
// PlaceUnitArea ( i , startArea , false ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// ComHold ( i ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: CALL_OW 140
// end ;
2198: GO 2026
2200: POP
2201: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2202: LD_ADDR_EXP 7
2206: PUSH
2207: LD_STRING 02_mikhailStatus_1
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 30
2217: ST_TO_ADDR
// if not bierezov_exist and not debug then
2218: LD_EXP 7
2222: NOT
2223: PUSH
2224: LD_EXP 1
2228: NOT
2229: AND
2230: IFFALSE 2234
// exit ;
2232: GO 2268
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2234: LD_ADDR_EXP 45
2238: PUSH
2239: LD_STRING Mikhail
2241: PPUSH
2242: LD_INT 0
2244: PPUSH
2245: LD_STRING 
2247: PPUSH
2248: CALL 36544 0 3
2252: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2253: LD_EXP 45
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// end ;
2268: LD_VAR 0 1
2272: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2273: LD_INT 0
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
// uc_side := 4 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 4
2286: ST_TO_ADDR
// uc_nation := 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2295: LD_ADDR_EXP 44
2299: PUSH
2300: LD_STRING Cornell
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: LD_STRING 
2308: PPUSH
2309: CALL 36544 0 3
2313: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2314: LD_ADDR_EXP 6
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_EXP 4
2326: MINUS
2327: ST_TO_ADDR
// tmp := [ ] ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// if cornel_units < 4 then
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 4
2342: LESS
2343: IFFALSE 2353
// cornel_units := 4 ;
2345: LD_ADDR_EXP 6
2349: PUSH
2350: LD_INT 4
2352: ST_TO_ADDR
// for i = 1 to cornel_units do
2353: LD_ADDR_VAR 0 4
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_EXP 6
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2467
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_VAR 0 4
2400: PUSH
2401: LD_INT 5
2403: MOD
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ARRAY
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: CALL_OW 380
// un := CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: CALL_OW 2
2449: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ;
2465: GO 2368
2467: POP
2468: POP
// cornel_units := tmp ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_VAR 0 2
2478: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2479: LD_EXP 44
2483: PPUSH
2484: LD_INT 191
2486: PPUSH
2487: LD_INT 106
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareWesternBase ; var i ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// uc_side := 8 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 8
2513: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2514: LD_ADDR_EXP 47
2518: PUSH
2519: LD_STRING Lynch
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 36544 0 3
2532: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_STRING Walker
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 36544 0 3
2551: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2552: LD_ADDR_EXP 49
2556: PUSH
2557: LD_STRING Turner
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: CALL 36544 0 3
2570: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2571: LD_ADDR_EXP 50
2575: PUSH
2576: LD_STRING Jillian
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_STRING 
2584: PPUSH
2585: CALL 36544 0 3
2589: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: LD_EXP 47
2599: PUSH
2600: LD_EXP 48
2604: PUSH
2605: LD_EXP 49
2609: PUSH
2610: LD_EXP 50
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: FOR_IN
2622: IFFALSE 2650
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2624: LD_VAR 0 2
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// ComHold ( i ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 140
// end ;
2648: GO 2621
2650: POP
2651: POP
// end ;
2652: LD_VAR 0 1
2656: RET
// export function SelectGroup ; var units , selected , i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_EXP 37
2672: PUSH
2673: LD_INT -3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_EXP 4
2684: ADD
2685: PUSH
2686: LD_INT -2
2688: PUSH
2689: LD_INT -4
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_EXP 45
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ADD
2708: PUSH
2709: LD_INT -3
2711: PUSH
2712: EMPTY
2713: LIST
2714: ADD
2715: PUSH
2716: LD_EXP 6
2720: ADD
2721: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: LD_EXP 37
2731: PUSH
2732: LD_STRING Select four characters to go with you
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: EMPTY
2747: PPUSH
2748: CALL_OW 42
2752: ADD
2753: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_EXP 4
2763: PUSH
2764: LD_EXP 6
2768: UNION
2769: PUSH
2770: LD_VAR 0 3
2774: DIFF
2775: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_EXP 6
2785: PUSH
2786: LD_EXP 45
2790: ADD
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2824
// if GetSide ( i ) = 1 then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 1
2807: EQUAL
2808: IFFALSE 2822
// SetSide ( i , 4 ) ;
2810: LD_VAR 0 4
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 235
2822: GO 2792
2824: POP
2825: POP
// for i in selected do
2826: LD_ADDR_VAR 0 4
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2868
// if GetSide ( i ) = 4 then
2839: LD_VAR 0 4
2843: PPUSH
2844: CALL_OW 255
2848: PUSH
2849: LD_INT 4
2851: EQUAL
2852: IFFALSE 2866
// SetSide ( i , 1 ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 235
2866: GO 2836
2868: POP
2869: POP
// jmm_units := jmm_units diff cornel_units ;
2870: LD_ADDR_EXP 4
2874: PUSH
2875: LD_EXP 4
2879: PUSH
2880: LD_EXP 6
2884: DIFF
2885: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2886: LD_EXP 38
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 4
2898: EQUAL
2899: IFFALSE 2914
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2901: LD_EXP 3
2905: PUSH
2906: LD_STRING Bobby
2908: STR
2909: PPUSH
2910: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2914: LD_EXP 39
2918: PPUSH
2919: CALL_OW 255
2923: PUSH
2924: LD_INT 4
2926: EQUAL
2927: IFFALSE 2942
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2929: LD_EXP 3
2933: PUSH
2934: LD_STRING Cyrus
2936: STR
2937: PPUSH
2938: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2942: LD_EXP 40
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2970
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2957: LD_EXP 3
2961: PUSH
2962: LD_STRING Lisa
2964: STR
2965: PPUSH
2966: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2970: LD_EXP 41
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 4
2982: EQUAL
2983: IFFALSE 2998
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2985: LD_EXP 3
2989: PUSH
2990: LD_STRING Khatam
2992: STR
2993: PPUSH
2994: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2998: LD_EXP 42
3002: PPUSH
3003: CALL_OW 255
3007: PUSH
3008: LD_INT 4
3010: EQUAL
3011: IFFALSE 3026
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3013: LD_EXP 3
3017: PUSH
3018: LD_STRING Brian
3020: STR
3021: PPUSH
3022: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3026: LD_EXP 43
3030: PPUSH
3031: CALL_OW 255
3035: PUSH
3036: LD_INT 4
3038: EQUAL
3039: IFFALSE 3054
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3041: LD_EXP 3
3045: PUSH
3046: LD_STRING Jerry
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end ; end_of_file
3054: LD_VAR 0 1
3058: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
// ru_alert := false ;
3074: LD_ADDR_EXP 60
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// ru_produce_list := [ ] ;
3082: LD_ADDR_EXP 57
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// if Difficulty > 1 then
3089: LD_OWVAR 67
3093: PUSH
3094: LD_INT 1
3096: GREATER
3097: IFFALSE 3185
// begin uc_side := 3 ;
3099: LD_ADDR_OWVAR 20
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// uc_nation := 3 ;
3107: LD_ADDR_OWVAR 21
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// bc_type := b_breastwork ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// bc_level := Difficulty ;
3123: LD_ADDR_OWVAR 43
3127: PUSH
3128: LD_OWVAR 67
3132: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3133: LD_INT 22
3135: PPUSH
3136: LD_INT 14
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3146: LD_INT 48
3148: PPUSH
3149: LD_INT 46
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3159: LD_INT 86
3161: PPUSH
3162: LD_INT 65
3164: PPUSH
3165: LD_INT 5
3167: PPUSH
3168: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3172: LD_INT 165
3174: PPUSH
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: CALL_OW 47
// end ; if Difficulty >= 3 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 3
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3208: LD_ADDR_VAR 0 7
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 2
3225: PUSH
3226: LD_INT 30
3228: PUSH
3229: LD_INT 31
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 30
3238: PUSH
3239: LD_INT 32
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 69
3259: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 30
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 30
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3362: LD_ADDR_VAR 0 2
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3441
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: CALL_OW 274
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 1000
3414: PPUSH
3415: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 274
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 300
3434: PPUSH
3435: CALL_OW 277
// end ;
3439: GO 3396
3441: POP
3442: POP
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := 3 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3459: LD_ADDR_VAR 0 11
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: LD_INT 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_OWVAR 67
3486: ARRAY
3487: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_STRING Pokryshkin
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: LD_STRING 
3501: PPUSH
3502: CALL 36544 0 3
3506: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3507: LD_EXP 52
3511: PPUSH
3512: LD_INT 63
3514: PPUSH
3515: LD_INT 21
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3525: LD_EXP 52
3529: PPUSH
3530: CALL_OW 140
// InitHc ;
3534: CALL_OW 19
// for i in fac do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: FOR_IN
3549: IFFALSE 3602
// begin for j = 1 to 6 do
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3598
// begin PrepareHuman ( false , 3 , skill ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_VAR 0 11
3577: PPUSH
3578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3582: CALL_OW 44
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 52
// end ;
3596: GO 3564
3598: POP
3599: POP
// end ;
3600: GO 3548
3602: POP
3603: POP
// for i in lab do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: LD_VAR 0 9
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3648
// begin PrepareHuman ( false , 4 , skill ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_VAR 0 11
3627: PPUSH
3628: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3632: CALL_OW 44
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 52
// end ;
3646: GO 3614
3648: POP
3649: POP
// for i in tw do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 7
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3710
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_INT 42
3670: PUSH
3671: LD_INT 43
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 12
3688: ARRAY
3689: PPUSH
3690: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3694: LD_VAR 0 11
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL 775 0 2
// end ;
3708: GO 3660
3710: POP
3711: POP
// for i in bar do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// begin PrepareHuman ( false , 1 , skill ) ;
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_VAR 0 11
3735: PPUSH
3736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3740: CALL_OW 44
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 52
// end ;
3754: GO 3722
3756: POP
3757: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3758: LD_ADDR_VAR 0 13
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 135
3775: PUSH
3776: LD_INT 60
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 41
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 9
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 84
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
// vehicles := [ ] ;
3820: LD_ADDR_VAR 0 12
3824: PUSH
3825: EMPTY
3826: ST_TO_ADDR
// for i in spot_xy do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_VAR 0 13
3836: PUSH
3837: FOR_IN
3838: IFFALSE 3996
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 22
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 42
3862: PUSH
3863: LD_INT 43
3865: PUSH
3866: LD_INT 44
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: PPUSH
3886: LD_INT 100
3888: PPUSH
3889: CALL 497 0 7
3893: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_VAR 0 12
3903: PPUSH
3904: LD_VAR 0 12
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: CALL_OW 2
3922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3935: LD_VAR 0 6
3939: PPUSH
3940: LD_VAR 0 2
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3980: CALL_OW 44
3984: PPUSH
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3837
3996: POP
3997: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 5
4010: PUSH
4011: LD_INT 7
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_OWVAR 67
4030: ARRAY
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4093
// begin PrepareHuman ( false , 1 , skill ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 11
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4075: LD_ADDR_EXP 55
4079: PUSH
4080: LD_EXP 55
4084: PUSH
4085: LD_VAR 0 5
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4032
4093: POP
4094: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4190
// begin PrepareHuman ( false , 1 , skill ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 380
// un := CreateHuman ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4172: LD_ADDR_EXP 53
4176: PUSH
4177: LD_EXP 53
4181: PUSH
4182: LD_VAR 0 5
4186: ADD
4187: ST_TO_ADDR
// end ;
4188: GO 4129
4190: POP
4191: POP
// for i = 1 to 2 do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: DOUBLE
4198: LD_INT 1
4200: DEC
4201: ST_TO_ADDR
4202: LD_INT 2
4204: PUSH
4205: FOR_TO
4206: IFFALSE 4272
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 11
4218: PPUSH
4219: CALL_OW 380
// un := CreateHuman ;
4223: LD_ADDR_VAR 0 5
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_INT 39
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4254: LD_ADDR_EXP 54
4258: PUSH
4259: LD_EXP 54
4263: PUSH
4264: LD_VAR 0 5
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4205
4272: POP
4273: POP
// for i = 1 to 3 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 3
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4354
// begin PrepareHuman ( false , 1 , skill ) ;
4290: LD_INT 0
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 11
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 5
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 180
4322: PPUSH
4323: LD_INT 11
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4336: LD_ADDR_EXP 58
4340: PUSH
4341: LD_EXP 58
4345: PUSH
4346: LD_VAR 0 5
4350: ADD
4351: ST_TO_ADDR
// end ;
4352: GO 4287
4354: POP
4355: POP
// ru_vehicles := vehicles ;
4356: LD_ADDR_EXP 56
4360: PUSH
4361: LD_VAR 0 12
4365: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4366: LD_ADDR_EXP 59
4370: PUSH
4371: LD_INT 131
4373: PUSH
4374: LD_INT 121
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 90
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 93
4393: PUSH
4394: LD_INT 62
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 120
4418: PUSH
4419: LD_INT 80
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 143
4428: PUSH
4429: LD_INT 120
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 154
4443: PUSH
4444: LD_INT 116
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 140
4453: PUSH
4454: LD_INT 93
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 130
4463: PUSH
4464: LD_INT 58
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 105
4478: PUSH
4479: LD_INT 106
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 134
4488: PUSH
4489: LD_INT 98
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 159
4498: PUSH
4499: LD_INT 113
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// if Difficulty = 1 then
4517: LD_OWVAR 67
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4529
// exit ;
4527: GO 4584
// for i = 1 to Difficulty - 1 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_OWVAR 67
4543: PUSH
4544: LD_INT 1
4546: MINUS
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4582
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4551: LD_ADDR_EXP 57
4555: PUSH
4556: LD_EXP 57
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 43
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ADD
4579: ST_TO_ADDR
4580: GO 4548
4582: POP
4583: POP
// end ;
4584: LD_VAR 0 1
4588: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IFFALSE 4711
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// begin enable ;
4626: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4627: LD_ADDR_VAR 0 2
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: ST_TO_ADDR
// if filter then
4661: LD_VAR 0 2
4665: IFFALSE 4711
// for i in filter do
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_VAR 0 2
4676: PUSH
4677: FOR_IN
4678: IFFALSE 4709
// if GetFuel ( i ) < 20 then
4680: LD_VAR 0 1
4684: PPUSH
4685: CALL_OW 261
4689: PUSH
4690: LD_INT 20
4692: LESS
4693: IFFALSE 4707
// SetFuel ( i , 20 ) ;
4695: LD_VAR 0 1
4699: PPUSH
4700: LD_INT 20
4702: PPUSH
4703: CALL_OW 240
4707: GO 4677
4709: POP
4710: POP
// end ;
4711: PPOPN 2
4713: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4714: LD_EXP 57
4718: IFFALSE 4937
4720: GO 4722
4722: DISABLE
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// begin enable ;
4728: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// can_produce := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if not fac then
4770: LD_VAR 0 2
4774: NOT
4775: IFFALSE 4780
// begin disable ;
4777: DISABLE
// exit ;
4778: GO 4937
// end ; for i in fac do
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_VAR 0 2
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4829
// if UnitsInside ( i ) then
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 313
4802: IFFALSE 4827
// can_produce := Insert ( can_produce , 1 , i ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 2
4826: ST_TO_ADDR
4827: GO 4790
4829: POP
4830: POP
// if not can_produce then
4831: LD_VAR 0 3
4835: NOT
4836: IFFALSE 4840
// exit ;
4838: GO 4937
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 12
4857: ARRAY
4858: PPUSH
4859: LD_EXP 57
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 57
4872: PUSH
4873: LD_INT 2
4875: ARRAY
4876: PPUSH
4877: LD_EXP 57
4881: PUSH
4882: LD_INT 3
4884: ARRAY
4885: PPUSH
4886: LD_EXP 57
4890: PUSH
4891: LD_INT 4
4893: ARRAY
4894: PPUSH
4895: CALL_OW 125
// for i = 1 to 4 do
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 4
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4935
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4915: LD_ADDR_EXP 57
4919: PUSH
4920: LD_EXP 57
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL_OW 3
4932: ST_TO_ADDR
4933: GO 4912
4935: POP
4936: POP
// end ;
4937: PPOPN 3
4939: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5129
// begin PrepareHuman ( false , 3 , 3 ) ;
4982: LD_INT 0
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 3
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 22
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 43
5017: PUSH
5018: LD_INT 42
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 1
5027: PPUSH
5028: LD_INT 2
5030: PPUSH
5031: CALL_OW 12
5035: ARRAY
5036: PPUSH
5037: LD_INT 70
5039: PPUSH
5040: CALL 497 0 7
5044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 229
5064: PPUSH
5065: LD_INT 44
5067: PPUSH
5068: LD_INT 0
5070: PPUSH
5071: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5089: LD_ADDR_EXP 56
5093: PUSH
5094: LD_EXP 56
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5105: LD_VAR 0 3
5109: PPUSH
5110: LD_INT 191
5112: PPUSH
5113: LD_INT 32
5115: PPUSH
5116: CALL_OW 111
// Wait ( 0 0$02 ) ;
5120: LD_INT 70
5122: PPUSH
5123: CALL_OW 67
// end ;
5127: GO 4979
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5136: LD_EXP 31
5140: PUSH
5141: LD_EXP 56
5145: AND
5146: IFFALSE 5320
5148: GO 5150
5150: DISABLE
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
5155: PPUSH
// begin wait ( 0 0$50 ) ;
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 67
// tmp := ru_vehicles ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_EXP 56
5172: ST_TO_ADDR
// if not tmp then
5173: LD_VAR 0 3
5177: NOT
5178: IFFALSE 5182
// exit ;
5180: GO 5320
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// for i in tmp do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_VAR 0 3
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5311
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 74
5226: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5227: LD_VAR 0 1
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 10
5244: GREATER
5245: IFFALSE 5264
// ComAgressiveMove ( i , 69 , 101 ) else
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_INT 69
5254: PPUSH
5255: LD_INT 101
5257: PPUSH
5258: CALL_OW 114
5262: GO 5278
// ComAttackUnit ( i , enemy ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: CALL_OW 115
// if GetLives ( i ) < 250 then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: IFFALSE 5309
// tmp := tmp diff i ;
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 1
5307: DIFF
5308: ST_TO_ADDR
// end ;
5309: GO 5199
5311: POP
5312: POP
// until not tmp ;
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 5182
// end ; end_of_file
5320: PPOPN 3
5322: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// InGameOn ;
5332: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5336: LD_EXP 37
5340: PPUSH
5341: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5345: LD_EXP 37
5349: PPUSH
5350: LD_EXP 44
5354: PPUSH
5355: CALL_OW 119
// if Bierezov then
5359: LD_EXP 45
5363: IFFALSE 5379
// ComTurnUnit ( Bierezov , Cornel ) ;
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 44
5374: PPUSH
5375: CALL_OW 119
// for i in jmm_units do
5379: LD_ADDR_VAR 0 2
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: FOR_IN
5390: IFFALSE 5408
// ComTurnUnit ( i , Cornel ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_EXP 44
5401: PPUSH
5402: CALL_OW 119
5406: GO 5389
5408: POP
5409: POP
// units := cornel_units union Cornel ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 6
5419: PUSH
5420: LD_EXP 44
5424: UNION
5425: ST_TO_ADDR
// repeat wait ( 1 ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 67
// for i in units do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5477
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_EXP 37
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_EXP 37
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: CALL_OW 111
5475: GO 5443
5477: POP
5478: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 92
5486: PUSH
5487: LD_EXP 37
5491: PPUSH
5492: CALL_OW 250
5496: PUSH
5497: LD_EXP 37
5501: PPUSH
5502: CALL_OW 251
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 72
5520: PUSH
5521: LD_VAR 0 3
5525: EQUAL
5526: IFFALSE 5426
// for i in units do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_VAR 0 3
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5557
// ComTurnUnit ( i , JMM ) ;
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_EXP 37
5550: PPUSH
5551: CALL_OW 119
5555: GO 5538
5557: POP
5558: POP
// ComTurnUnit ( Cornel , JMM ) ;
5559: LD_EXP 44
5563: PPUSH
5564: LD_EXP 37
5568: PPUSH
5569: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_STRING D1-JMM-1
5580: PPUSH
5581: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5585: LD_EXP 44
5589: PPUSH
5590: LD_STRING D1-Corn-1
5592: PPUSH
5593: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5597: LD_EXP 37
5601: PPUSH
5602: LD_EXP 44
5606: PPUSH
5607: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_EXP 37
5620: PPUSH
5621: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5632: LD_EXP 37
5636: PPUSH
5637: LD_EXP 44
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 6
5649: LESS
5650: IFFALSE 5625
// ChangeSideFog ( 4 , 1 ) ;
5652: LD_INT 4
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_EXP 44
5671: PPUSH
5672: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5676: LD_EXP 44
5680: PPUSH
5681: LD_EXP 37
5685: PPUSH
5686: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5690: LD_EXP 37
5694: PPUSH
5695: LD_STRING D1-JMM-2
5697: PPUSH
5698: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5702: LD_EXP 37
5706: PPUSH
5707: LD_STRING D1-JMM-2a
5709: PPUSH
5710: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_STRING D1-Corn-2
5721: PPUSH
5722: CALL_OW 88
// if bierezov_exist or debug then
5726: LD_EXP 7
5730: PUSH
5731: LD_EXP 1
5735: OR
5736: IFFALSE 5977
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5738: LD_EXP 44
5742: PPUSH
5743: LD_EXP 45
5747: PPUSH
5748: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5759: LD_EXP 44
5763: PPUSH
5764: LD_STRING D1a-Corn-1
5766: PPUSH
5767: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5771: LD_EXP 37
5775: PPUSH
5776: LD_EXP 45
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5785: LD_EXP 45
5789: PPUSH
5790: LD_EXP 37
5794: PPUSH
5795: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5799: LD_EXP 37
5803: PPUSH
5804: LD_STRING D1a-JMM-1
5806: PPUSH
5807: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_EXP 44
5820: PPUSH
5821: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5825: LD_EXP 44
5829: PPUSH
5830: LD_EXP 37
5834: PPUSH
5835: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-2
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-3
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-4
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5899: LD_EXP 37
5903: PPUSH
5904: LD_STRING D1a-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5911: LD_EXP 44
5915: PPUSH
5916: LD_STRING D1a-Corn-5
5918: PPUSH
5919: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5923: LD_EXP 45
5927: PPUSH
5928: LD_EXP 44
5932: PPUSH
5933: CALL_OW 250
5937: PPUSH
5938: LD_EXP 44
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_INT 2
5950: MINUS
5951: PPUSH
5952: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5956: LD_EXP 45
5960: PPUSH
5961: LD_EXP 44
5965: PPUSH
5966: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5970: LD_INT 10
5972: PPUSH
5973: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-1
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-2
6008: PPUSH
6009: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING D1b-Corn-2
6020: PPUSH
6021: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6025: LD_EXP 37
6029: PPUSH
6030: LD_STRING D1b-JMM-3
6032: PPUSH
6033: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6044: LD_EXP 46
6048: PPUSH
6049: LD_STRING D1b-Pow-3
6051: PPUSH
6052: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6056: LD_EXP 37
6060: PPUSH
6061: LD_STRING D1b-JMM-4
6063: PPUSH
6064: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6068: LD_EXP 44
6072: PPUSH
6073: LD_STRING D1b-Corn-4
6075: PPUSH
6076: CALL_OW 88
// if Khatam then
6080: LD_EXP 41
6084: IFFALSE 6100
// Say ( Khatam , D1b-Khat-4 ) else
6086: LD_EXP 41
6090: PPUSH
6091: LD_STRING D1b-Khat-4
6093: PPUSH
6094: CALL_OW 88
6098: GO 6136
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6100: LD_EXP 6
6104: PPUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 72
6119: PUSH
6120: LD_EXP 44
6124: PUSH
6125: EMPTY
6126: LIST
6127: DIFF
6128: PPUSH
6129: LD_STRING D1b-Sol1-4
6131: PPUSH
6132: CALL 585 0 2
// if Cyrus then
6136: LD_EXP 39
6140: IFFALSE 6154
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6142: LD_EXP 39
6146: PPUSH
6147: LD_STRING D1b-Cyrus-4
6149: PPUSH
6150: CALL_OW 88
// if Lisa then
6154: LD_EXP 40
6158: IFFALSE 6216
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6160: LD_EXP 40
6164: PPUSH
6165: LD_STRING D1b-Lisa-4
6167: PPUSH
6168: CALL_OW 88
// if Cyrus then
6172: LD_EXP 39
6176: IFFALSE 6216
// begin if not IsInUnit ( Cyrus ) then
6178: LD_EXP 39
6182: PPUSH
6183: CALL_OW 310
6187: NOT
6188: IFFALSE 6204
// ComTurnUnit ( Cyrus , Lisa ) ;
6190: LD_EXP 39
6194: PPUSH
6195: LD_EXP 40
6199: PPUSH
6200: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING D1b-Cyrus-5
6211: PPUSH
6212: CALL_OW 88
// end ; end ; SelectGroup ;
6216: CALL 2657 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6220: LD_EXP 37
6224: PPUSH
6225: LD_STRING D1d-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6232: LD_EXP 44
6236: PPUSH
6237: LD_STRING D1d-Corn-1
6239: PPUSH
6240: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 6
6258: ADD
6259: PUSH
6260: LD_EXP 37
6264: ADD
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// ComHold ( i ) ;
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 140
6278: GO 6266
6280: POP
6281: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// if vehicles then
6316: LD_VAR 0 4
6320: IFFALSE 6658
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6322: LD_EXP 6
6326: PPUSH
6327: LD_INT 55
6329: PUSH
6330: EMPTY
6331: LIST
6332: PPUSH
6333: CALL_OW 72
6337: IFFALSE 6376
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_EXP 6
6348: PPUSH
6349: LD_INT 55
6351: PUSH
6352: EMPTY
6353: LIST
6354: PPUSH
6355: CALL_OW 72
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// ComExitVehicle ( i ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: CALL_OW 121
6372: GO 6360
6374: POP
6375: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 51
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// if cargos then
6401: LD_VAR 0 5
6405: IFFALSE 6588
// begin vehicles := cargos ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_VAR 0 5
6416: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: LD_STRING 02_resources_4
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 30
6432: ST_TO_ADDR
// if debug and not resources then
6433: LD_EXP 1
6437: PUSH
6438: LD_VAR 0 6
6442: NOT
6443: AND
6444: IFFALSE 6454
// resources := 160 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_INT 160
6453: ST_TO_ADDR
// if resources mod 10 then
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 10
6461: MOD
6462: IFFALSE 6484
// resources := resources - resources mod 10 ;
6464: LD_ADDR_VAR 0 6
6468: PUSH
6469: LD_VAR 0 6
6473: PUSH
6474: LD_VAR 0 6
6478: PUSH
6479: LD_INT 10
6481: MOD
6482: MINUS
6483: ST_TO_ADDR
// if resources then
6484: LD_VAR 0 6
6488: IFFALSE 6588
// for i in cargos do
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_VAR 0 5
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6586
// begin if resources < 100 then
6503: LD_VAR 0 6
6507: PUSH
6508: LD_INT 100
6510: LESS
6511: IFFALSE 6533
// begin cargo := resources ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// resources := 0 ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// end else
6531: GO 6555
// begin cargo := 100 ;
6533: LD_ADDR_VAR 0 7
6537: PUSH
6538: LD_INT 100
6540: ST_TO_ADDR
// resources := resources - 100 ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_INT 100
6553: MINUS
6554: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_VAR 0 7
6567: PPUSH
6568: CALL_OW 290
// if resources = 0 then
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: EQUAL
6580: IFFALSE 6584
// break ;
6582: GO 6586
// end ;
6584: GO 6500
6586: POP
6587: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: CALL_OW 311
6601: PPUSH
6602: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PPUSH
6615: LD_INT 4
6617: PPUSH
6618: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6622: LD_EXP 44
6626: PPUSH
6627: LD_VAR 0 4
6631: PUSH
6632: LD_INT 1
6634: ARRAY
6635: PPUSH
6636: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6647: LD_EXP 44
6651: PPUSH
6652: CALL_OW 310
6656: IFFALSE 6640
// end ; InGameOff ;
6658: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6662: LD_STRING M1
6664: PPUSH
6665: CALL_OW 337
// SaveForQuickRestart ;
6669: CALL_OW 22
// cornel_active := true ;
6673: LD_ADDR_EXP 8
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: LD_VAR 0 1
6685: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6686: LD_EXP 37
6690: PPUSH
6691: LD_EXP 47
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 10
6703: LESS
6704: IFFALSE 8087
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_INT 89
6723: PUSH
6724: LD_INT 34
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 138
6733: PUSH
6734: LD_INT 63
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 196
6743: PUSH
6744: LD_INT 84
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 135
6753: PUSH
6754: LD_INT 52
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 39
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 58
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 38
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// Video ( true ) ;
6800: LD_INT 1
6802: PPUSH
6803: CALL 73253 0 1
// if jmm_units then
6807: LD_EXP 4
6811: IFFALSE 6887
// for i in jmm_units do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_EXP 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6885
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_EXP 37
6835: PPUSH
6836: CALL_OW 296
6840: PUSH
6841: LD_INT 10
6843: LESS
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 310
6854: NOT
6855: AND
6856: IFFALSE 6874
// ComTurnUnit ( i , JMM ) else
6858: LD_VAR 0 1
6862: PPUSH
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 119
6872: GO 6883
// ComHold ( i ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 140
// end ;
6883: GO 6823
6885: POP
6886: POP
// if IsInUnit ( JMM ) then
6887: LD_EXP 37
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6921
// begin ComExitVehicle ( JMM ) ;
6898: LD_EXP 37
6902: PPUSH
6903: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6907: LD_EXP 37
6911: PPUSH
6912: LD_EXP 47
6916: PPUSH
6917: CALL_OW 172
// end ; Wait ( 10 ) ;
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6928: LD_EXP 37
6932: PPUSH
6933: LD_EXP 47
6937: PPUSH
6938: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6949: LD_EXP 37
6953: PPUSH
6954: LD_EXP 47
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 6
6966: LESS
6967: IFFALSE 6942
// ComTurnUnit ( JMM , Lynch ) ;
6969: LD_EXP 37
6973: PPUSH
6974: LD_EXP 47
6978: PPUSH
6979: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_EXP 47
6992: PUSH
6993: LD_EXP 48
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: LD_EXP 50
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7033
// ComTurnUnit ( i , JMM ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_EXP 37
7026: PPUSH
7027: CALL_OW 119
7031: GO 7014
7033: POP
7034: POP
// Wait ( 0 0$0.3 ) ;
7035: LD_INT 10
7037: PPUSH
7038: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-2
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7090: LD_EXP 37
7094: PPUSH
7095: LD_STRING D2-JMM-3
7097: PPUSH
7098: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7102: LD_EXP 47
7106: PPUSH
7107: LD_STRING D2-Sol1-3
7109: PPUSH
7110: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7151
// SetSide ( i , 1 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 235
7149: GO 7134
7151: POP
7152: POP
// Say ( JMM , D2-JMM-4 ) ;
7153: LD_EXP 37
7157: PPUSH
7158: LD_STRING D2-JMM-4
7160: PPUSH
7161: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 332
// for i = 1 to points do
7175: LD_ADDR_VAR 0 1
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_VAR 0 2
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7366
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7193: LD_VAR 0 2
7197: PUSH
7198: LD_VAR 0 1
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 2
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL_OW 84
// if i = 1 then
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: EQUAL
7235: IFFALSE 7249
// Say ( Lynch , D2-Sol1-4 ) ;
7237: LD_EXP 47
7241: PPUSH
7242: LD_STRING D2-Sol1-4
7244: PPUSH
7245: CALL_OW 88
// if i = 2 then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7271
// Say ( JMM , D2-JMM-5 ) ;
7259: LD_EXP 37
7263: PPUSH
7264: LD_STRING D2-JMM-5
7266: PPUSH
7267: CALL_OW 88
// if i = 4 then
7271: LD_VAR 0 1
7275: PUSH
7276: LD_INT 4
7278: EQUAL
7279: IFFALSE 7303
// begin RevealFogArea ( 1 , troopsArea ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 6
7286: PPUSH
7287: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7291: LD_EXP 47
7295: PPUSH
7296: LD_STRING D2-Sol1-5
7298: PPUSH
7299: CALL_OW 88
// end ; if i = 5 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: IFFALSE 7325
// Say ( JMM , D2-JMM-6 ) ;
7313: LD_EXP 37
7317: PPUSH
7318: LD_STRING D2-JMM-6
7320: PPUSH
7321: CALL_OW 88
// if i = 7 then
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 7
7332: EQUAL
7333: IFFALSE 7357
// begin RevealFogArea ( 1 , forestArea ) ;
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 7
7340: PPUSH
7341: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7345: LD_EXP 47
7349: PPUSH
7350: LD_STRING D2-Sol1-6
7352: PPUSH
7353: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7357: LD_INT 46
7359: PPUSH
7360: CALL_OW 67
// end ;
7364: GO 7190
7366: POP
7367: POP
// CenterNowOnUnits ( JMM ) ;
7368: LD_EXP 37
7372: PPUSH
7373: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-7
7384: PPUSH
7385: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7389: LD_EXP 47
7393: PPUSH
7394: LD_STRING D2-Sol1-7
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7401: LD_EXP 37
7405: PPUSH
7406: LD_STRING D2-JMM-8
7408: PPUSH
7409: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7413: LD_ADDR_VAR 0 4
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7447: LD_EXP 47
7451: PPUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7465: LD_INT 65
7467: PPUSH
7468: LD_INT 101
7470: PPUSH
7471: CALL_OW 428
7475: IFFALSE 7498
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7477: LD_INT 65
7479: PPUSH
7480: LD_INT 101
7482: PPUSH
7483: CALL_OW 428
7487: PPUSH
7488: LD_INT 75
7490: PPUSH
7491: LD_INT 100
7493: PPUSH
7494: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7498: LD_INT 66
7500: PPUSH
7501: LD_INT 103
7503: PPUSH
7504: CALL_OW 428
7508: IFFALSE 7531
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 103
7515: PPUSH
7516: CALL_OW 428
7520: PPUSH
7521: LD_INT 75
7523: PPUSH
7524: LD_INT 100
7526: PPUSH
7527: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 91
7558: PUSH
7559: LD_EXP 37
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: ST_TO_ADDR
// if tmp then
7582: LD_VAR 0 5
7586: IFFALSE 7603
// ComMoveXY ( tmp , 75 , 100 ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_INT 75
7595: PPUSH
7596: LD_INT 100
7598: PPUSH
7599: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 4
7612: PPUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 72
7627: PPUSH
7628: LD_EXP 37
7632: PPUSH
7633: CALL_OW 74
7637: ST_TO_ADDR
// if sol then
7638: LD_VAR 0 3
7642: IFFALSE 7702
// if GetDistUnits ( JMM , sol ) < 10 then
7644: LD_EXP 37
7648: PPUSH
7649: LD_VAR 0 3
7653: PPUSH
7654: CALL_OW 296
7658: PUSH
7659: LD_INT 10
7661: LESS
7662: IFFALSE 7702
// begin if IsInUnit ( sol ) then
7664: LD_VAR 0 3
7668: PPUSH
7669: CALL_OW 310
7673: IFFALSE 7684
// ComExitVehicle ( sol ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: LD_VAR 0 4
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PPUSH
7698: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7702: LD_INT 10
7704: PPUSH
7705: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7709: LD_EXP 37
7713: PPUSH
7714: LD_INT 65
7716: PPUSH
7717: LD_INT 101
7719: PPUSH
7720: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7724: LD_EXP 37
7728: PPUSH
7729: LD_INT 63
7731: PPUSH
7732: LD_INT 100
7734: PPUSH
7735: CALL_OW 178
// tmp := 0 0$0 ;
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 5
7763: PUSH
7764: LD_INT 35
7766: PLUS
7767: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7768: LD_EXP 37
7772: PPUSH
7773: LD_INT 65
7775: PPUSH
7776: LD_INT 101
7778: PPUSH
7779: CALL_OW 307
7783: PUSH
7784: LD_VAR 0 5
7788: PUSH
7789: LD_INT 175
7791: GREATER
7792: OR
7793: IFFALSE 7747
// Say ( JMM , D2a-JMM-1 ) ;
7795: LD_EXP 37
7799: PPUSH
7800: LD_STRING D2a-JMM-1
7802: PPUSH
7803: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7807: LD_EXP 48
7811: PPUSH
7812: LD_INT 66
7814: PPUSH
7815: LD_INT 103
7817: PPUSH
7818: CALL_OW 111
// tmp := 0 0$0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7837: LD_EXP 48
7841: PPUSH
7842: LD_INT 66
7844: PPUSH
7845: LD_INT 103
7847: PPUSH
7848: CALL_OW 307
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 175
7860: GREATER
7861: OR
7862: IFFALSE 7830
// ComTurnUnit ( Walker , JMM ) ;
7864: LD_EXP 48
7868: PPUSH
7869: LD_EXP 37
7873: PPUSH
7874: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7878: LD_EXP 48
7882: PPUSH
7883: LD_STRING D2a-Sci1-1
7885: PPUSH
7886: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7890: LD_EXP 37
7894: PPUSH
7895: LD_EXP 48
7899: PPUSH
7900: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-2
7923: PPUSH
7924: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7928: LD_EXP 37
7932: PPUSH
7933: LD_STRING D2a-JMM-3
7935: PPUSH
7936: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7940: LD_EXP 48
7944: PPUSH
7945: LD_STRING D2a-Sci1-3
7947: PPUSH
7948: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7952: LD_ADDR_EXP 4
7956: PUSH
7957: LD_EXP 4
7961: PUSH
7962: LD_EXP 47
7966: PUSH
7967: LD_EXP 48
7971: PUSH
7972: LD_EXP 49
7976: PUSH
7977: LD_EXP 50
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// for i in jmm_units do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_EXP 4
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8025
// if not IsInUnit ( i ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 310
8011: NOT
8012: IFFALSE 8023
// ComFree ( i ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 139
8023: GO 7999
8025: POP
8026: POP
// Video ( false ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 73253 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8034: LD_STRING MSolar1
8036: PPUSH
8037: CALL_OW 337
// jmm_on_west := true ;
8041: LD_ADDR_EXP 5
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8049: LD_INT 1050
8051: PPUSH
8052: CALL_OW 67
// frank_can_return := true ;
8056: LD_ADDR_EXP 12
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8064: LD_INT 6300
8066: PPUSH
8067: LD_INT 8400
8069: PPUSH
8070: CALL_OW 12
8074: PPUSH
8075: CALL_OW 67
// send_spec_patrol := true ;
8079: LD_ADDR_EXP 30
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// end ;
8087: PPOPN 5
8089: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8090: LD_INT 22
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 51
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 92
8112: PUSH
8113: LD_INT 63
8115: PUSH
8116: LD_INT 100
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: PUSH
8141: LD_EXP 5
8145: NOT
8146: AND
8147: IFFALSE 8260
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 51
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 92
8184: PUSH
8185: LD_INT 63
8187: PUSH
8188: LD_INT 100
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: ST_TO_ADDR
// if not filter then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8222
// exit ;
8220: GO 8260
// for i in filter do
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// begin SetFuel ( i , 0 ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 240
// ComStop ( i ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 141
// end ;
8256: GO 8232
8258: POP
8259: POP
// end ;
8260: PPOPN 2
8262: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8263: LD_EXP 30
8267: IFFALSE 9393
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
// begin if not ru_spec_patrol then
8281: LD_EXP 54
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 9393
// dead1 := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// dead2 := false ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// inarea1 := false ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea2 := false ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// tmp := [ ] ;
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8329: LD_EXP 54
8333: PPUSH
8334: LD_INT 75
8336: PPUSH
8337: LD_INT 101
8339: PPUSH
8340: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_EXP 54
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: CALL_OW 292
8367: PUSH
8368: LD_EXP 54
8372: PPUSH
8373: LD_INT 92
8375: PUSH
8376: LD_INT 75
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: OR
8396: IFFALSE 8344
// ComStop ( ru_spec_patrol ) ;
8398: LD_EXP 54
8402: PPUSH
8403: CALL_OW 141
// Wait ( 0 0$02 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 67
// DialogueOn ;
8414: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8418: LD_EXP 54
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_STRING D8-Rus1-1
8429: PPUSH
8430: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8434: LD_EXP 37
8438: PPUSH
8439: LD_STRING D8-JMM-1
8441: PPUSH
8442: CALL_OW 88
// DialogueOff ;
8446: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8450: LD_EXP 54
8454: PPUSH
8455: LD_INT 13
8457: PPUSH
8458: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8462: LD_INT 35
8464: PPUSH
8465: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8469: LD_VAR 0 1
8473: NOT
8474: PUSH
8475: LD_EXP 54
8479: PUSH
8480: LD_INT 1
8482: ARRAY
8483: PPUSH
8484: CALL_OW 301
8488: AND
8489: IFFALSE 8499
// dead1 := true ;
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8499: LD_VAR 0 2
8503: NOT
8504: PUSH
8505: LD_EXP 54
8509: PUSH
8510: LD_INT 2
8512: ARRAY
8513: PPUSH
8514: CALL_OW 301
8518: AND
8519: IFFALSE 8529
// dead2 := true ;
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8529: LD_VAR 0 3
8533: NOT
8534: PUSH
8535: LD_EXP 54
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_INT 14
8546: PPUSH
8547: CALL_OW 308
8551: AND
8552: IFFALSE 8562
// inarea1 := true ;
8554: LD_ADDR_VAR 0 3
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8562: LD_VAR 0 4
8566: NOT
8567: PUSH
8568: LD_EXP 54
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: LD_INT 14
8579: PPUSH
8580: CALL_OW 308
8584: AND
8585: IFFALSE 8595
// inarea2 := true ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8595: LD_VAR 0 1
8599: PUSH
8600: LD_VAR 0 2
8604: AND
8605: PUSH
8606: LD_VAR 0 1
8610: PUSH
8611: LD_VAR 0 4
8615: AND
8616: OR
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: LD_VAR 0 3
8627: AND
8628: OR
8629: PUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_VAR 0 4
8639: AND
8640: OR
8641: IFFALSE 8462
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_VAR 0 4
8652: AND
8653: PUSH
8654: LD_VAR 0 1
8658: PUSH
8659: LD_VAR 0 4
8663: AND
8664: OR
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: AND
8676: OR
8677: IFFALSE 9373
// begin prepare_siege := true ;
8679: LD_ADDR_EXP 31
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// DialogueOn ;
8687: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_VAR 0 4
8700: AND
8701: IFFALSE 8717
// Say ( JMM , D8b-JMM-1a ) else
8703: LD_EXP 37
8707: PPUSH
8708: LD_STRING D8b-JMM-1a
8710: PPUSH
8711: CALL_OW 88
8715: GO 8729
// Say ( JMM , D8b-JMM-1 ) ;
8717: LD_EXP 37
8721: PPUSH
8722: LD_STRING D8b-JMM-1
8724: PPUSH
8725: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8729: LD_EXP 4
8733: PPUSH
8734: LD_INT 26
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PUSH
8749: LD_EXP 38
8753: PUSH
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 48
8763: PUSH
8764: LD_EXP 51
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: DIFF
8775: PPUSH
8776: LD_STRING D8b-Sol1-1
8778: PPUSH
8779: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
8783: LD_EXP 39
8787: PUSH
8788: LD_EXP 39
8792: PUSH
8793: LD_EXP 4
8797: IN
8798: AND
8799: IFFALSE 8815
// Say ( Cyrus , D8b-Cyrus-1 ) else
8801: LD_EXP 39
8805: PPUSH
8806: LD_STRING D8b-Cyrus-1
8808: PPUSH
8809: CALL_OW 88
8813: GO 8827
// Say ( JMM , D8b-JMM-1a ) ;
8815: LD_EXP 37
8819: PPUSH
8820: LD_STRING D8b-JMM-1a
8822: PPUSH
8823: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8827: LD_EXP 40
8831: PUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_EXP 4
8841: IN
8842: AND
8843: IFFALSE 8857
// Say ( Lisa , D8b-Lisa-2 ) ;
8845: LD_EXP 40
8849: PPUSH
8850: LD_STRING D8b-Lisa-2
8852: PPUSH
8853: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8857: LD_EXP 38
8861: PUSH
8862: LD_EXP 38
8866: PUSH
8867: LD_EXP 4
8871: IN
8872: AND
8873: IFFALSE 8889
// Say ( Bobby , D8b-Bobby-1 ) else
8875: LD_EXP 38
8879: PPUSH
8880: LD_STRING D8b-Bobby-1
8882: PPUSH
8883: CALL_OW 88
8887: GO 8949
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8889: LD_ADDR_VAR 0 5
8893: PUSH
8894: LD_EXP 4
8898: PPUSH
8899: LD_INT 26
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 72
8913: PUSH
8914: LD_EXP 38
8918: PUSH
8919: LD_EXP 39
8923: PUSH
8924: LD_EXP 48
8928: PUSH
8929: LD_EXP 51
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: DIFF
8940: PPUSH
8941: LD_STRING D8b-Sol2-1
8943: PPUSH
8944: CALL 585 0 2
8948: ST_TO_ADDR
// DialogueOff ;
8949: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8953: LD_EXP 39
8957: PUSH
8958: LD_EXP 39
8962: PUSH
8963: LD_EXP 4
8967: IN
8968: AND
8969: IFFALSE 8994
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8971: LD_ADDR_VAR 0 6
8975: PUSH
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_INT 1
8983: PPUSH
8984: LD_EXP 39
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8994: LD_EXP 38
8998: PUSH
8999: LD_EXP 38
9003: PUSH
9004: LD_EXP 4
9008: IN
9009: AND
9010: IFFALSE 9035
// tmp := Insert ( tmp , 1 , Bobby ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_EXP 38
9029: PPUSH
9030: CALL_OW 2
9034: ST_TO_ADDR
// if sol then
9035: LD_VAR 0 5
9039: IFFALSE 9064
// tmp := Insert ( tmp , 1 , sol ) ;
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: LD_VAR 0 6
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 2
9063: ST_TO_ADDR
// if tmp then
9064: LD_VAR 0 6
9068: IFFALSE 9332
// begin SetSide ( tmp , 8 ) ;
9070: LD_VAR 0 6
9074: PPUSH
9075: LD_INT 8
9077: PPUSH
9078: CALL_OW 235
// for i in tmp do
9082: LD_ADDR_VAR 0 7
9086: PUSH
9087: LD_VAR 0 6
9091: PUSH
9092: FOR_IN
9093: IFFALSE 9184
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9095: LD_VAR 0 7
9099: PPUSH
9100: CALL_OW 310
9104: PUSH
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 310
9114: PPUSH
9115: CALL_OW 266
9119: PUSH
9120: LD_INT 3
9122: EQUAL
9123: AND
9124: IFFALSE 9135
// ComExitBuilding ( i ) ;
9126: LD_VAR 0 7
9130: PPUSH
9131: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9135: LD_VAR 0 7
9139: PPUSH
9140: CALL_OW 310
9144: PUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 310
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 2
9162: EQUAL
9163: AND
9164: IFFALSE 9175
// ComExitVehicle ( i ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 121
// wait ( 0 0$1 ) ;
9175: LD_INT 35
9177: PPUSH
9178: CALL_OW 67
// end ;
9182: GO 9092
9184: POP
9185: POP
// ComFree ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: LD_INT 15
9202: PPUSH
9203: CALL_OW 173
// AddComHold ( tmp ) ;
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: CALL_OW 314
9236: NOT
9237: IFFALSE 9251
// ComMoveToArea ( tmp , cyrusEscape ) ;
9239: LD_VAR 0 6
9243: PPUSH
9244: LD_INT 15
9246: PPUSH
9247: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9251: LD_VAR 0 6
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: LD_INT 15
9262: PPUSH
9263: CALL_OW 308
9267: IFFALSE 9322
// begin RemoveUnit ( tmp [ 1 ] ) ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9282: LD_ADDR_EXP 4
9286: PUSH
9287: LD_EXP 4
9291: PUSH
9292: LD_VAR 0 6
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: DIFF
9301: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: LD_VAR 0 6
9311: PUSH
9312: LD_VAR 0 6
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: DIFF
9321: ST_TO_ADDR
// end ; until tmp = 0 ;
9322: LD_VAR 0 6
9326: PUSH
9327: LD_INT 0
9329: EQUAL
9330: IFFALSE 9216
// end ; wait ( 0 0$30 ) ;
9332: LD_INT 1050
9334: PPUSH
9335: CALL_OW 67
// if ru_spec_patrol then
9339: LD_EXP 54
9343: IFFALSE 9371
// for i in ru_spec_patrol do
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_EXP 54
9354: PUSH
9355: FOR_IN
9356: IFFALSE 9369
// RemoveUnit ( i ) ;
9358: LD_VAR 0 7
9362: PPUSH
9363: CALL_OW 64
9367: GO 9355
9369: POP
9370: POP
// end else
9371: GO 9393
// begin prepare_siege := false ;
9373: LD_ADDR_EXP 31
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9381: LD_EXP 37
9385: PPUSH
9386: LD_STRING D8a-JMM-1
9388: PPUSH
9389: CALL_OW 88
// end ; end ;
9393: PPOPN 7
9395: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9396: LD_EXP 12
9400: IFFALSE 10620
9402: GO 9404
9404: DISABLE
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin uc_side := 8 ;
9410: LD_ADDR_OWVAR 20
9414: PUSH
9415: LD_INT 8
9417: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: LD_INT 59
9425: PUSH
9426: LD_INT 71
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 122
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9447: LD_ADDR_EXP 51
9451: PUSH
9452: LD_STRING Frank
9454: PPUSH
9455: LD_INT 0
9457: PPUSH
9458: LD_STRING 
9460: PPUSH
9461: CALL 36544 0 3
9465: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9466: LD_ADDR_VAR 0 1
9470: PUSH
9471: LD_INT 1
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 12
9481: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9482: LD_EXP 51
9486: PPUSH
9487: LD_VAR 0 3
9491: PUSH
9492: LD_VAR 0 1
9496: ARRAY
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_VAR 0 3
9506: PUSH
9507: LD_VAR 0 1
9511: ARRAY
9512: PUSH
9513: LD_INT 2
9515: ARRAY
9516: PPUSH
9517: LD_INT 0
9519: PPUSH
9520: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9524: LD_EXP 51
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9543: LD_EXP 51
9547: PPUSH
9548: LD_EXP 37
9552: PPUSH
9553: CALL_OW 296
9557: PUSH
9558: LD_INT 8
9560: LESS
9561: PUSH
9562: LD_EXP 51
9566: PPUSH
9567: CALL_OW 256
9571: PUSH
9572: LD_INT 250
9574: GREATER
9575: AND
9576: IFFALSE 9536
// Video ( true ) ;
9578: LD_INT 1
9580: PPUSH
9581: CALL 73253 0 1
// CenterOnUnits ( JMM ) ;
9585: LD_EXP 37
9589: PPUSH
9590: CALL_OW 85
// if IsInUnit ( JMM ) then
9594: LD_EXP 37
9598: PPUSH
9599: CALL_OW 310
9603: IFFALSE 9614
// ComFree ( JMM ) ;
9605: LD_EXP 37
9609: PPUSH
9610: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9614: LD_EXP 37
9618: PPUSH
9619: LD_EXP 51
9623: PPUSH
9624: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9628: LD_EXP 51
9632: PPUSH
9633: LD_EXP 37
9637: PPUSH
9638: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING D6-JMM-1
9649: PPUSH
9650: CALL_OW 88
// p := 0 ;
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 67
// p := p + 1 ;
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9683: LD_EXP 37
9687: PPUSH
9688: LD_EXP 51
9692: PPUSH
9693: CALL_OW 296
9697: PUSH
9698: LD_INT 8
9700: LESS
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: LD_INT 7
9709: GREATER
9710: OR
9711: IFFALSE 9662
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9713: LD_EXP 40
9717: PUSH
9718: LD_EXP 40
9722: PPUSH
9723: LD_EXP 51
9727: PPUSH
9728: CALL_OW 296
9732: PUSH
9733: LD_INT 20
9735: LESS
9736: AND
9737: IFFALSE 9762
// begin ComFree ( Lisa ) ;
9739: LD_EXP 40
9743: PPUSH
9744: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9748: LD_EXP 40
9752: PPUSH
9753: LD_EXP 51
9757: PPUSH
9758: CALL_OW 172
// end ; if Lynch then
9762: LD_EXP 47
9766: IFFALSE 9791
// begin ComFree ( Lynch ) ;
9768: LD_EXP 47
9772: PPUSH
9773: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9777: LD_EXP 47
9781: PPUSH
9782: LD_EXP 51
9786: PPUSH
9787: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9791: LD_EXP 37
9795: PPUSH
9796: LD_EXP 51
9800: PPUSH
9801: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9805: LD_EXP 51
9809: PPUSH
9810: LD_EXP 37
9814: PPUSH
9815: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9819: LD_EXP 51
9823: PPUSH
9824: LD_STRING D6-Frank-1
9826: PPUSH
9827: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9831: LD_INT 69
9833: PPUSH
9834: LD_INT 20
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: LD_INT 20
9842: NEG
9843: PPUSH
9844: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9848: LD_INT 69
9850: PPUSH
9851: LD_INT 20
9853: PPUSH
9854: LD_INT 1
9856: PPUSH
9857: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9861: LD_INT 190
9863: PPUSH
9864: LD_INT 31
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: LD_INT 20
9872: NEG
9873: PPUSH
9874: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9878: LD_INT 190
9880: PPUSH
9881: LD_INT 31
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9891: LD_INT 69
9893: PPUSH
9894: LD_INT 20
9896: PPUSH
9897: CALL_OW 84
// Wait ( 0 0$02 ) ;
9901: LD_INT 70
9903: PPUSH
9904: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9908: LD_EXP 37
9912: PPUSH
9913: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9917: LD_EXP 40
9921: PUSH
9922: LD_EXP 40
9926: PPUSH
9927: LD_EXP 51
9931: PPUSH
9932: CALL_OW 296
9936: PUSH
9937: LD_INT 20
9939: LESS
9940: AND
9941: PUSH
9942: LD_EXP 40
9946: PPUSH
9947: CALL_OW 302
9951: AND
9952: IFFALSE 10074
// begin ComFree ( Lisa ) ;
9954: LD_EXP 40
9958: PPUSH
9959: CALL_OW 139
// p := 0 ;
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9971: LD_INT 35
9973: PPUSH
9974: CALL_OW 67
// p := p + 1 ;
9978: LD_ADDR_VAR 0 2
9982: PUSH
9983: LD_VAR 0 2
9987: PUSH
9988: LD_INT 1
9990: PLUS
9991: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9992: LD_EXP 40
9996: PPUSH
9997: LD_EXP 51
10001: PPUSH
10002: CALL_OW 296
10006: PUSH
10007: LD_INT 7
10009: LESS
10010: PUSH
10011: LD_VAR 0 2
10015: PUSH
10016: LD_INT 7
10018: GREATER
10019: OR
10020: IFFALSE 9971
// Say ( Lisa , D6-Lisa-1 ) ;
10022: LD_EXP 40
10026: PPUSH
10027: LD_STRING D6-Lisa-1
10029: PPUSH
10030: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10034: LD_EXP 40
10038: PPUSH
10039: LD_EXP 51
10043: PPUSH
10044: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10048: LD_EXP 51
10052: PPUSH
10053: LD_EXP 40
10057: PPUSH
10058: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10062: LD_EXP 51
10066: PPUSH
10067: LD_STRING D6-Frank-2
10069: PPUSH
10070: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10074: LD_EXP 47
10078: PUSH
10079: LD_EXP 47
10083: PPUSH
10084: LD_EXP 51
10088: PPUSH
10089: CALL_OW 296
10093: PUSH
10094: LD_INT 20
10096: LESS
10097: AND
10098: PUSH
10099: LD_EXP 47
10103: PPUSH
10104: CALL_OW 302
10108: AND
10109: IFFALSE 10290
// begin ComTurnUnit ( Lynch , JMM ) ;
10111: LD_EXP 47
10115: PPUSH
10116: LD_EXP 37
10120: PPUSH
10121: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10125: LD_EXP 51
10129: PPUSH
10130: LD_EXP 37
10134: PPUSH
10135: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10139: LD_EXP 47
10143: PPUSH
10144: LD_STRING D6-Sol1-2
10146: PPUSH
10147: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10151: LD_EXP 37
10155: PPUSH
10156: LD_STRING D6-JMM-2
10158: PPUSH
10159: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10163: LD_EXP 51
10167: PPUSH
10168: LD_STRING D6-Frank-3
10170: PPUSH
10171: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING D6-JMM-3
10182: PPUSH
10183: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING D6-Frank-4
10194: PPUSH
10195: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10199: LD_EXP 51
10203: PPUSH
10204: LD_STRING D6-Frank-4a
10206: PPUSH
10207: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10211: LD_EXP 37
10215: PPUSH
10216: LD_STRING D6-JMM-4
10218: PPUSH
10219: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10223: LD_EXP 51
10227: PPUSH
10228: LD_STRING D6-Frank-5
10230: PPUSH
10231: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10235: LD_EXP 40
10239: PUSH
10240: LD_EXP 40
10244: PPUSH
10245: CALL_OW 302
10249: AND
10250: IFFALSE 10264
// Say ( Lisa , D6-Lisa-5 ) ;
10252: LD_EXP 40
10256: PPUSH
10257: LD_STRING D6-Lisa-5
10259: PPUSH
10260: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10264: LD_EXP 51
10268: PPUSH
10269: LD_STRING D6-Frank-6
10271: PPUSH
10272: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10276: LD_EXP 37
10280: PPUSH
10281: LD_STRING D6-JMM-6
10283: PPUSH
10284: CALL_OW 88
// end else
10288: GO 10405
// begin ComTurnUnit ( Frank , JMM ) ;
10290: LD_EXP 51
10294: PPUSH
10295: LD_EXP 37
10299: PPUSH
10300: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10304: LD_EXP 51
10308: PPUSH
10309: LD_STRING D6-Frank-4
10311: PPUSH
10312: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10316: LD_EXP 51
10320: PPUSH
10321: LD_STRING D6-Frank-4a
10323: PPUSH
10324: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10328: LD_EXP 37
10332: PPUSH
10333: LD_STRING D6-JMM-4
10335: PPUSH
10336: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10340: LD_EXP 51
10344: PPUSH
10345: LD_STRING D6-Frank-5
10347: PPUSH
10348: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10352: LD_EXP 40
10356: PUSH
10357: LD_EXP 40
10361: PPUSH
10362: CALL_OW 302
10366: AND
10367: IFFALSE 10381
// Say ( Lisa , D6-Lisa-5 ) ;
10369: LD_EXP 40
10373: PPUSH
10374: LD_STRING D6-Lisa-5
10376: PPUSH
10377: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10381: LD_EXP 51
10385: PPUSH
10386: LD_STRING D6-Frank-6
10388: PPUSH
10389: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10393: LD_EXP 37
10397: PPUSH
10398: LD_STRING D6-JMM-6
10400: PPUSH
10401: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10405: LD_STRING Q1
10407: PPUSH
10408: CALL_OW 97
10412: PUSH
10413: LD_INT 1
10415: DOUBLE
10416: EQUAL
10417: IFTRUE 10421
10419: GO 10432
10421: POP
// frank_send_to_scout := true ; 2 :
10422: LD_ADDR_EXP 15
10426: PUSH
10427: LD_INT 1
10429: ST_TO_ADDR
10430: GO 10452
10432: LD_INT 2
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10451
10440: POP
// frank_send_to_scout := false ; end ;
10441: LD_ADDR_EXP 15
10445: PUSH
10446: LD_INT 0
10448: ST_TO_ADDR
10449: GO 10452
10451: POP
// Video ( false ) ;
10452: LD_INT 0
10454: PPUSH
10455: CALL 73253 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10459: LD_EXP 37
10463: PUSH
10464: LD_EXP 40
10468: PUSH
10469: LD_EXP 47
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: PPUSH
10479: CALL_OW 139
// if frank_send_to_scout then
10483: LD_EXP 15
10487: IFFALSE 10541
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10489: LD_EXP 51
10493: PPUSH
10494: LD_INT 15
10496: PPUSH
10497: CALL_OW 113
// wait ( 0 0$01 ) ;
10501: LD_INT 35
10503: PPUSH
10504: CALL_OW 67
// until not See ( 1 , Frank ) ;
10508: LD_INT 1
10510: PPUSH
10511: LD_EXP 51
10515: PPUSH
10516: CALL_OW 292
10520: NOT
10521: IFFALSE 10489
// wait ( 0 0$02 ) ;
10523: LD_INT 70
10525: PPUSH
10526: CALL_OW 67
// RemoveUnit ( Frank ) ;
10530: LD_EXP 51
10534: PPUSH
10535: CALL_OW 64
// end else
10539: GO 10553
// SetSide ( Frank , 1 ) ;
10541: LD_EXP 51
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 235
// send_attack_on_cornel_base := true ;
10553: LD_ADDR_EXP 26
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10568: LD_ADDR_EXP 29
10572: PUSH
10573: LD_EXP 29
10577: PPUSH
10578: LD_STRING -
10580: PPUSH
10581: CALL 1077 0 2
10585: ST_TO_ADDR
// if debug then
10586: LD_EXP 1
10590: IFFALSE 10602
// debug_strings := time_to_prepare ;
10592: LD_ADDR_OWVAR 48
10596: PUSH
10597: LD_EXP 29
10601: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10602: LD_EXP 29
10606: PUSH
10607: LD_INT 0
10609: EQUAL
10610: IFFALSE 10561
// cornel_prepared := true ;
10612: LD_ADDR_EXP 11
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// end ;
10620: PPOPN 3
10622: END
// every 0 0$01 trigger cornel_prepared do
10623: LD_EXP 11
10627: IFFALSE 10935
10629: GO 10631
10631: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10632: LD_EXP 44
10636: PPUSH
10637: LD_STRING D3-Corn-1
10639: PPUSH
10640: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10644: LD_STRING MOutWait
10646: PPUSH
10647: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10651: LD_INT 35
10653: PPUSH
10654: CALL_OW 67
// until cornel_counter = 0 ;
10658: LD_EXP 10
10662: PUSH
10663: LD_INT 0
10665: EQUAL
10666: IFFALSE 10651
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10668: LD_EXP 44
10672: PPUSH
10673: LD_STRING D3a-Corn-1
10675: PPUSH
10676: CALL_OW 94
// if IsOk ( Cornel ) then
10680: LD_EXP 44
10684: PPUSH
10685: CALL_OW 302
10689: IFFALSE 10703
// Say ( JMM , D3a-JMM-1 ) ;
10691: LD_EXP 37
10695: PPUSH
10696: LD_STRING D3a-JMM-1
10698: PPUSH
10699: CALL_OW 88
// end_mission_allowed := true ;
10703: LD_ADDR_EXP 21
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10711: LD_STRING M2
10713: PPUSH
10714: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10718: LD_INT 9
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 424
// Wait ( 0 0$05 ) ;
10728: LD_INT 175
10730: PPUSH
10731: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10735: LD_EXP 44
10739: PPUSH
10740: LD_STRING D3a-Corn-2
10742: PPUSH
10743: CALL_OW 94
// cornel_attack := true ;
10747: LD_ADDR_EXP 9
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10755: LD_INT 105
10757: PPUSH
10758: CALL_OW 67
// AddMoreTanks ( ) ;
10762: CALL 4940 0 0
// if frank_send_to_scout then
10766: LD_EXP 15
10770: IFFALSE 10935
// begin InitHc ;
10772: CALL_OW 19
// InitUc ;
10776: CALL_OW 18
// uc_side := 8 ;
10780: LD_ADDR_OWVAR 20
10784: PUSH
10785: LD_INT 8
10787: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10788: LD_ADDR_EXP 51
10792: PUSH
10793: LD_STRING Frank
10795: PPUSH
10796: LD_INT 0
10798: PPUSH
10799: LD_STRING 
10801: PPUSH
10802: CALL 36544 0 3
10806: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10807: LD_EXP 51
10811: PPUSH
10812: LD_INT 6
10814: PPUSH
10815: LD_INT 9
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 48
// ComCrawl ( Frank ) ;
10825: LD_EXP 51
10829: PPUSH
10830: CALL_OW 137
// repeat wait ( 10 ) ;
10834: LD_INT 10
10836: PPUSH
10837: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10841: LD_EXP 37
10845: PPUSH
10846: LD_EXP 51
10850: PPUSH
10851: CALL_OW 296
10855: PUSH
10856: LD_INT 9
10858: LESS
10859: PUSH
10860: LD_INT 9
10862: PPUSH
10863: LD_INT 22
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 70
10877: OR
10878: IFFALSE 10834
// if IsDead ( Frank ) then
10880: LD_EXP 51
10884: PPUSH
10885: CALL_OW 301
10889: IFFALSE 10893
// exit ;
10891: GO 10935
// CenterOnUnits ( Frank ) ;
10893: LD_EXP 51
10897: PPUSH
10898: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10902: LD_EXP 51
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10914: LD_EXP 51
10918: PPUSH
10919: LD_STRING D6a-Frank-1
10921: PPUSH
10922: CALL_OW 88
// ComWalk ( Frank ) ;
10926: LD_EXP 51
10930: PPUSH
10931: CALL_OW 138
// end ; end ;
10935: END
// every 0 0$01 trigger solar_builded do
10936: LD_EXP 14
10940: IFFALSE 11044
10942: GO 10944
10944: DISABLE
// begin Wait ( 0 0$02 ) ;
10945: LD_INT 70
10947: PPUSH
10948: CALL_OW 67
// DialogueOn ;
10952: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10956: LD_EXP 37
10960: PPUSH
10961: LD_STRING D2b-JMM-1
10963: PPUSH
10964: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10968: LD_EXP 48
10972: PUSH
10973: LD_EXP 48
10977: PPUSH
10978: CALL_OW 302
10982: AND
10983: IFFALSE 11033
// begin Say ( Walker , D2b-Sci1-1 ) ;
10985: LD_EXP 48
10989: PPUSH
10990: LD_STRING D2b-Sci1-1
10992: PPUSH
10993: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10997: LD_EXP 37
11001: PPUSH
11002: LD_STRING D2b-JMM-2
11004: PPUSH
11005: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11009: LD_EXP 48
11013: PPUSH
11014: LD_STRING D2b-Sci1-2
11016: PPUSH
11017: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11021: LD_EXP 37
11025: PPUSH
11026: LD_STRING D2b-JMM-3
11028: PPUSH
11029: CALL_OW 88
// end ; DialogueOff ;
11033: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11037: LD_STRING MOutSol
11039: PPUSH
11040: CALL_OW 337
// end ;
11044: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11045: LD_EXP 14
11049: PUSH
11050: LD_EXP 37
11054: PPUSH
11055: CALL_OW 302
11059: AND
11060: PUSH
11061: LD_EXP 37
11065: PPUSH
11066: CALL 911 0 1
11070: AND
11071: PUSH
11072: LD_EXP 16
11076: NOT
11077: AND
11078: IFFALSE 11149
11080: GO 11082
11082: DISABLE
11083: LD_INT 0
11085: PPUSH
// begin jmm_in_veh := true ;
11086: LD_ADDR_EXP 16
11090: PUSH
11091: LD_INT 1
11093: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11094: LD_ADDR_VAR 0 1
11098: PUSH
11099: LD_INT 0
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 12
11109: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11110: LD_INT 70
11112: PPUSH
11113: CALL_OW 67
// if i then
11117: LD_VAR 0 1
11121: IFFALSE 11137
// Say ( JMM , D2c-JMM-1 ) else
11123: LD_EXP 37
11127: PPUSH
11128: LD_STRING D2c-JMM-1
11130: PPUSH
11131: CALL_OW 88
11135: GO 11149
// Say ( JMM , D2c-JMM-1a ) ;
11137: LD_EXP 37
11141: PPUSH
11142: LD_STRING D2c-JMM-1a
11144: PPUSH
11145: CALL_OW 88
// end ;
11149: PPOPN 1
11151: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11152: LD_EXP 14
11156: PUSH
11157: LD_EXP 38
11161: PPUSH
11162: CALL_OW 302
11166: AND
11167: PUSH
11168: LD_EXP 38
11172: PPUSH
11173: CALL 911 0 1
11177: AND
11178: PUSH
11179: LD_EXP 17
11183: NOT
11184: AND
11185: IFFALSE 11217
11187: GO 11189
11189: DISABLE
// begin bobby_in_veh := true ;
11190: LD_ADDR_EXP 17
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11198: LD_INT 70
11200: PPUSH
11201: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11205: LD_EXP 38
11209: PPUSH
11210: LD_STRING D2c-Bobby-1
11212: PPUSH
11213: CALL_OW 88
11217: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11218: LD_EXP 14
11222: PUSH
11223: LD_EXP 40
11227: PPUSH
11228: CALL_OW 302
11232: AND
11233: PUSH
11234: LD_EXP 40
11238: PPUSH
11239: CALL 911 0 1
11243: AND
11244: PUSH
11245: LD_EXP 19
11249: NOT
11250: AND
11251: IFFALSE 11283
11253: GO 11255
11255: DISABLE
// begin lisa_in_veh := true ;
11256: LD_ADDR_EXP 19
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11264: LD_INT 70
11266: PPUSH
11267: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11271: LD_EXP 40
11275: PPUSH
11276: LD_STRING D2c-Lisa-1
11278: PPUSH
11279: CALL_OW 88
11283: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11284: LD_EXP 14
11288: PUSH
11289: LD_EXP 39
11293: PPUSH
11294: CALL_OW 302
11298: AND
11299: PUSH
11300: LD_EXP 39
11304: PPUSH
11305: CALL 911 0 1
11309: AND
11310: PUSH
11311: LD_EXP 18
11315: NOT
11316: AND
11317: IFFALSE 11388
11319: GO 11321
11321: DISABLE
11322: LD_INT 0
11324: PPUSH
// begin cyrus_in_veh := true ;
11325: LD_ADDR_EXP 18
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_INT 0
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 12
11348: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11349: LD_INT 70
11351: PPUSH
11352: CALL_OW 67
// if i then
11356: LD_VAR 0 1
11360: IFFALSE 11376
// Say ( Cyrus , D2c-Cyrus-1 ) else
11362: LD_EXP 39
11366: PPUSH
11367: LD_STRING D2c-Cyrus-1
11369: PPUSH
11370: CALL_OW 88
11374: GO 11388
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11376: LD_EXP 39
11380: PPUSH
11381: LD_STRING D2c-Cyrus-1a
11383: PPUSH
11384: CALL_OW 88
// end ;
11388: PPOPN 1
11390: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11391: LD_EXP 44
11395: PPUSH
11396: LD_INT 16
11398: PPUSH
11399: CALL_OW 308
11403: IFFALSE 11684
11405: GO 11407
11407: DISABLE
11408: LD_INT 0
11410: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11411: LD_INT 3
11413: PPUSH
11414: LD_EXP 44
11418: PPUSH
11419: CALL_OW 471
// send_attack_on_cornel := true ;
11423: LD_ADDR_EXP 32
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if ru_vehicles then
11431: LD_EXP 56
11435: IFFALSE 11469
// for i in ru_vehicles do
11437: LD_ADDR_VAR 0 1
11441: PUSH
11442: LD_EXP 56
11446: PUSH
11447: FOR_IN
11448: IFFALSE 11467
// ComAgressiveMove ( i , 215 , 69 ) ;
11450: LD_VAR 0 1
11454: PPUSH
11455: LD_INT 215
11457: PPUSH
11458: LD_INT 69
11460: PPUSH
11461: CALL_OW 114
11465: GO 11447
11467: POP
11468: POP
// if ru_patrol then
11469: LD_EXP 53
11473: IFFALSE 11507
// for i in ru_patrol do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_EXP 53
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11505
// ComAgressiveMove ( i , 215 , 69 ) ;
11488: LD_VAR 0 1
11492: PPUSH
11493: LD_INT 215
11495: PPUSH
11496: LD_INT 69
11498: PPUSH
11499: CALL_OW 114
11503: GO 11485
11505: POP
11506: POP
// if frank_send_to_scout then
11507: LD_EXP 15
11511: IFFALSE 11525
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11513: LD_EXP 51
11517: PPUSH
11518: LD_STRING D3b-Frank-1
11520: PPUSH
11521: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11525: LD_INT 105
11527: PPUSH
11528: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11532: LD_EXP 44
11536: PPUSH
11537: LD_STRING D4-Corn-1
11539: PPUSH
11540: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11544: LD_INT 35
11546: PPUSH
11547: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11551: LD_INT 22
11553: PUSH
11554: LD_INT 4
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 21
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 24
11576: PUSH
11577: LD_INT 1000
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: PUSH
11598: LD_INT 6
11600: LESS
11601: IFFALSE 11544
// if Cornel then
11603: LD_EXP 44
11607: IFFALSE 11647
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11609: LD_EXP 44
11613: PPUSH
11614: LD_STRING D5-Corn-1
11616: PPUSH
11617: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11621: LD_EXP 44
11625: PPUSH
11626: LD_EXP 2
11630: PUSH
11631: LD_STRING Cornel
11633: STR
11634: PPUSH
11635: CALL_OW 38
// cornel_saved := true ;
11639: LD_ADDR_EXP 27
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11647: LD_INT 4
11649: PPUSH
11650: LD_INT 8
11652: PPUSH
11653: CALL_OW 343
// Wait ( 0 0$01 ) ;
11657: LD_INT 35
11659: PPUSH
11660: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11664: LD_INT 3
11666: PPUSH
11667: LD_EXP 44
11671: PPUSH
11672: CALL_OW 472
// send_attack_on_cornel := false ;
11676: LD_ADDR_EXP 32
11680: PUSH
11681: LD_INT 0
11683: ST_TO_ADDR
// end ;
11684: PPOPN 1
11686: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11687: LD_INT 9
11689: PPUSH
11690: LD_INT 22
11692: PUSH
11693: LD_INT 1
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 70
11704: PUSH
11705: LD_EXP 33
11709: OR
11710: IFFALSE 11931
11712: GO 11714
11714: DISABLE
11715: LD_INT 0
11717: PPUSH
11718: PPUSH
// begin enable ;
11719: ENABLE
// if not jmm_on_west then
11720: LD_EXP 5
11724: NOT
11725: IFFALSE 11736
// begin YouLost ( 4 ) ;
11727: LD_STRING 4
11729: PPUSH
11730: CALL_OW 104
// exit ;
11734: GO 11931
// end ; if not game_end then
11736: LD_EXP 33
11740: NOT
11741: IFFALSE 11751
// game_end := true ;
11743: LD_ADDR_EXP 33
11747: PUSH
11748: LD_INT 1
11750: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11751: LD_ADDR_VAR 0 2
11755: PUSH
11756: LD_INT 9
11758: PPUSH
11759: LD_INT 22
11761: PUSH
11762: LD_INT 1
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PPUSH
11769: CALL_OW 70
11773: ST_TO_ADDR
// if not filter then
11774: LD_VAR 0 2
11778: NOT
11779: IFFALSE 11783
// exit ;
11781: GO 11931
// for i in filter do
11783: LD_ADDR_VAR 0 1
11787: PUSH
11788: LD_VAR 0 2
11792: PUSH
11793: FOR_IN
11794: IFFALSE 11929
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 302
11805: PUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 247
11815: PUSH
11816: LD_INT 2
11818: EQUAL
11819: AND
11820: IFFALSE 11892
// begin if i = JMM and save_group < 4 then
11822: LD_VAR 0 1
11826: PUSH
11827: LD_EXP 37
11831: EQUAL
11832: PUSH
11833: LD_EXP 23
11837: PUSH
11838: LD_INT 4
11840: LESS
11841: AND
11842: IFFALSE 11846
// continue ;
11844: GO 11793
// if GetNation ( i ) = nation_american then
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 248
11855: PUSH
11856: LD_INT 1
11858: EQUAL
11859: IFFALSE 11869
// veh_on_meta := true ;
11861: LD_ADDR_EXP 28
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11869: LD_VAR 0 1
11873: PPUSH
11874: CALL_OW 311
11878: PPUSH
11879: CALL 11934 0 1
// RemoveUnit ( i ) ;
11883: LD_VAR 0 1
11887: PPUSH
11888: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11892: LD_VAR 0 1
11896: PPUSH
11897: CALL_OW 302
11901: PUSH
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 247
11911: PUSH
11912: LD_INT 1
11914: EQUAL
11915: AND
11916: IFFALSE 11927
// Save ( i ) ;
11918: LD_VAR 0 1
11922: PPUSH
11923: CALL 11934 0 1
// end ;
11927: GO 11793
11929: POP
11930: POP
// end ;
11931: PPOPN 2
11933: END
// export function Save ( i ) ; begin
11934: LD_INT 0
11936: PPUSH
// if i = JMM and save_group >= 4 then
11937: LD_VAR 0 1
11941: PUSH
11942: LD_EXP 37
11946: EQUAL
11947: PUSH
11948: LD_EXP 23
11952: PUSH
11953: LD_INT 4
11955: GREATEREQUAL
11956: AND
11957: IFFALSE 12093
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11959: LD_EXP 24
11963: PUSH
11964: LD_INT 22
11966: PUSH
11967: LD_INT 1
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 21
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 69
11992: PUSH
11993: LD_INT 1
11995: GREATER
11996: AND
11997: IFFALSE 12054
// begin show_query := false ;
11999: LD_ADDR_EXP 24
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12007: LD_STRING Q2
12009: PPUSH
12010: CALL_OW 97
12014: PUSH
12015: LD_INT 1
12017: DOUBLE
12018: EQUAL
12019: IFTRUE 12023
12021: GO 12034
12023: POP
// wait_for_them := true ; 2 :
12024: LD_ADDR_EXP 25
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
12032: GO 12054
12034: LD_INT 2
12036: DOUBLE
12037: EQUAL
12038: IFTRUE 12042
12040: GO 12053
12042: POP
// wait_for_them := false ; end ;
12043: LD_ADDR_EXP 25
12047: PUSH
12048: LD_INT 0
12050: ST_TO_ADDR
12051: GO 12054
12053: POP
// end ; save_counter := save_counter + 1 ;
12054: LD_ADDR_EXP 36
12058: PUSH
12059: LD_EXP 36
12063: PUSH
12064: LD_INT 1
12066: PLUS
12067: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12068: LD_ADDR_EXP 23
12072: PUSH
12073: LD_EXP 23
12077: PUSH
12078: LD_EXP 37
12082: ADD
12083: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12084: LD_EXP 37
12088: PPUSH
12089: CALL_OW 64
// end ; if i = Lisa then
12093: LD_VAR 0 1
12097: PUSH
12098: LD_EXP 40
12102: EQUAL
12103: IFFALSE 12144
// begin save_counter := save_counter + 1 ;
12105: LD_ADDR_EXP 36
12109: PUSH
12110: LD_EXP 36
12114: PUSH
12115: LD_INT 1
12117: PLUS
12118: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12119: LD_ADDR_EXP 23
12123: PUSH
12124: LD_EXP 23
12128: PUSH
12129: LD_EXP 40
12133: ADD
12134: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12135: LD_EXP 40
12139: PPUSH
12140: CALL_OW 64
// end ; if i = Bobby then
12144: LD_VAR 0 1
12148: PUSH
12149: LD_EXP 38
12153: EQUAL
12154: IFFALSE 12195
// begin save_counter := save_counter + 1 ;
12156: LD_ADDR_EXP 36
12160: PUSH
12161: LD_EXP 36
12165: PUSH
12166: LD_INT 1
12168: PLUS
12169: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12170: LD_ADDR_EXP 23
12174: PUSH
12175: LD_EXP 23
12179: PUSH
12180: LD_EXP 38
12184: ADD
12185: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12186: LD_EXP 38
12190: PPUSH
12191: CALL_OW 64
// end ; if i = Cyrus then
12195: LD_VAR 0 1
12199: PUSH
12200: LD_EXP 39
12204: EQUAL
12205: IFFALSE 12246
// begin save_counter := save_counter + 1 ;
12207: LD_ADDR_EXP 36
12211: PUSH
12212: LD_EXP 36
12216: PUSH
12217: LD_INT 1
12219: PLUS
12220: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12221: LD_ADDR_EXP 23
12225: PUSH
12226: LD_EXP 23
12230: PUSH
12231: LD_EXP 39
12235: ADD
12236: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12237: LD_EXP 39
12241: PPUSH
12242: CALL_OW 64
// end ; if i = Khatam then
12246: LD_VAR 0 1
12250: PUSH
12251: LD_EXP 41
12255: EQUAL
12256: IFFALSE 12297
// begin save_counter := save_counter + 1 ;
12258: LD_ADDR_EXP 36
12262: PUSH
12263: LD_EXP 36
12267: PUSH
12268: LD_INT 1
12270: PLUS
12271: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12272: LD_ADDR_EXP 23
12276: PUSH
12277: LD_EXP 23
12281: PUSH
12282: LD_EXP 41
12286: ADD
12287: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12288: LD_EXP 41
12292: PPUSH
12293: CALL_OW 64
// end ; if i = Frank then
12297: LD_VAR 0 1
12301: PUSH
12302: LD_EXP 51
12306: EQUAL
12307: IFFALSE 12348
// begin save_counter := save_counter + 1 ;
12309: LD_ADDR_EXP 36
12313: PUSH
12314: LD_EXP 36
12318: PUSH
12319: LD_INT 1
12321: PLUS
12322: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12323: LD_ADDR_EXP 23
12327: PUSH
12328: LD_EXP 23
12332: PUSH
12333: LD_EXP 51
12337: ADD
12338: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12339: LD_EXP 51
12343: PPUSH
12344: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12348: LD_VAR 0 1
12352: PUSH
12353: LD_EXP 37
12357: NONEQUAL
12358: PUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 302
12368: AND
12369: PUSH
12370: LD_VAR 0 1
12374: PPUSH
12375: CALL_OW 247
12379: PUSH
12380: LD_INT 1
12382: EQUAL
12383: AND
12384: PUSH
12385: LD_VAR 0 1
12389: PUSH
12390: LD_EXP 23
12394: IN
12395: NOT
12396: AND
12397: IFFALSE 12438
// begin save_counter := save_counter + 1 ;
12399: LD_ADDR_EXP 36
12403: PUSH
12404: LD_EXP 36
12408: PUSH
12409: LD_INT 1
12411: PLUS
12412: ST_TO_ADDR
// save_others := save_others ^ i ;
12413: LD_ADDR_EXP 22
12417: PUSH
12418: LD_EXP 22
12422: PUSH
12423: LD_VAR 0 1
12427: ADD
12428: ST_TO_ADDR
// RemoveUnit ( i ) ;
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL_OW 64
// end ; end ;
12438: LD_VAR 0 2
12442: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12443: LD_EXP 24
12447: NOT
12448: PUSH
12449: LD_EXP 25
12453: NOT
12454: AND
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_INT 0
12487: EQUAL
12488: OR
12489: IFFALSE 12498
12491: GO 12493
12493: DISABLE
// EndMission ;
12494: CALL 12499 0 0
12498: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12499: LD_INT 0
12501: PPUSH
12502: PPUSH
12503: PPUSH
12504: PPUSH
12505: PPUSH
// wait ( 0 0$01 ) ;
12506: LD_INT 35
12508: PPUSH
12509: CALL_OW 67
// if tick <= 12 12$00 then
12513: LD_OWVAR 1
12517: PUSH
12518: LD_INT 25200
12520: LESSEQUAL
12521: IFFALSE 12530
// SetAchievement ( ACH_ASPEED_3 ) ;
12523: LD_STRING ACH_ASPEED_3
12525: PPUSH
12526: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12530: LD_EXP 23
12534: PUSH
12535: LD_EXP 22
12539: ADD
12540: PPUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 4
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 72
12555: PUSH
12556: LD_INT 0
12558: EQUAL
12559: IFFALSE 12575
// begin wait ( 3 ) ;
12561: LD_INT 3
12563: PPUSH
12564: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12568: LD_STRING ACH_NOSCI
12570: PPUSH
12571: CALL_OW 543
// end ; m1 := solar_builded ;
12575: LD_ADDR_VAR 0 3
12579: PUSH
12580: LD_EXP 14
12584: ST_TO_ADDR
// m2 := veh_on_meta ;
12585: LD_ADDR_VAR 0 4
12589: PUSH
12590: LD_EXP 28
12594: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12595: LD_ADDR_VAR 0 5
12599: PUSH
12600: LD_EXP 34
12604: PUSH
12605: LD_INT 0
12607: EQUAL
12608: ST_TO_ADDR
// if solar_builded then
12609: LD_EXP 14
12613: IFFALSE 12627
// AddMedal ( Solar1 , 1 ) else
12615: LD_STRING Solar1
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 101
12625: GO 12638
// AddMedal ( Solar1 , - 1 ) ;
12627: LD_STRING Solar1
12629: PPUSH
12630: LD_INT 1
12632: NEG
12633: PPUSH
12634: CALL_OW 101
// if veh_on_meta then
12638: LD_EXP 28
12642: IFFALSE 12656
// AddMedal ( Solar2 , 1 ) else
12644: LD_STRING Solar2
12646: PPUSH
12647: LD_INT 1
12649: PPUSH
12650: CALL_OW 101
12654: GO 12686
// if solar_builded then
12656: LD_EXP 14
12660: IFFALSE 12675
// AddMedal ( Solar2 , - 1 ) else
12662: LD_STRING Solar2
12664: PPUSH
12665: LD_INT 1
12667: NEG
12668: PPUSH
12669: CALL_OW 101
12673: GO 12686
// AddMedal ( Solar2 , - 2 ) ;
12675: LD_STRING Solar2
12677: PPUSH
12678: LD_INT 2
12680: NEG
12681: PPUSH
12682: CALL_OW 101
// if lose_counter = 0 then
12686: LD_EXP 34
12690: PUSH
12691: LD_INT 0
12693: EQUAL
12694: IFFALSE 12708
// AddMedal ( No , 1 ) else
12696: LD_STRING No
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 101
12706: GO 12752
// if lose_counter > 0 and lose_counter < 4 then
12708: LD_EXP 34
12712: PUSH
12713: LD_INT 0
12715: GREATER
12716: PUSH
12717: LD_EXP 34
12721: PUSH
12722: LD_INT 4
12724: LESS
12725: AND
12726: IFFALSE 12741
// AddMedal ( No , - 1 ) else
12728: LD_STRING No
12730: PPUSH
12731: LD_INT 1
12733: NEG
12734: PPUSH
12735: CALL_OW 101
12739: GO 12752
// AddMedal ( UpTo4 , - 1 ) ;
12741: LD_STRING UpTo4
12743: PPUSH
12744: LD_INT 1
12746: NEG
12747: PPUSH
12748: CALL_OW 101
// GiveMedals ( MAIN ) ;
12752: LD_STRING MAIN
12754: PPUSH
12755: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
12759: LD_OWVAR 67
12763: PUSH
12764: LD_INT 3
12766: GREATEREQUAL
12767: PUSH
12768: LD_VAR 0 3
12772: AND
12773: PUSH
12774: LD_VAR 0 4
12778: AND
12779: PUSH
12780: LD_VAR 0 5
12784: AND
12785: IFFALSE 12797
// SetAchievementEX ( ACH_AMER , 3 ) ;
12787: LD_STRING ACH_AMER
12789: PPUSH
12790: LD_INT 3
12792: PPUSH
12793: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12797: LD_EXP 52
12801: PPUSH
12802: CALL_OW 301
12806: IFFALSE 12862
// begin stop_talking := true ;
12808: LD_ADDR_OWVAR 56
12812: PUSH
12813: LD_INT 1
12815: ST_TO_ADDR
// for i in save_group union save_others do
12816: LD_ADDR_VAR 0 2
12820: PUSH
12821: LD_EXP 23
12825: PUSH
12826: LD_EXP 22
12830: UNION
12831: PUSH
12832: FOR_IN
12833: IFFALSE 12852
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
12835: LD_VAR 0 2
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: LD_INT 1500
12845: PPUSH
12846: CALL_OW 591
12850: GO 12832
12852: POP
12853: POP
// stop_talking := false ;
12854: LD_ADDR_OWVAR 56
12858: PUSH
12859: LD_INT 0
12861: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12862: LD_EXP 23
12866: PUSH
12867: LD_EXP 22
12871: ADD
12872: PPUSH
12873: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12877: LD_EXP 37
12881: PPUSH
12882: LD_EXP 2
12886: PUSH
12887: LD_STRING JMM
12889: STR
12890: PPUSH
12891: CALL_OW 38
// if Bobby in save_group then
12895: LD_EXP 38
12899: PUSH
12900: LD_EXP 23
12904: IN
12905: IFFALSE 12925
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12907: LD_EXP 38
12911: PPUSH
12912: LD_EXP 2
12916: PUSH
12917: LD_STRING Bobby
12919: STR
12920: PPUSH
12921: CALL_OW 38
// if Cyrus in save_group then
12925: LD_EXP 39
12929: PUSH
12930: LD_EXP 23
12934: IN
12935: IFFALSE 12955
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12937: LD_EXP 39
12941: PPUSH
12942: LD_EXP 2
12946: PUSH
12947: LD_STRING Cyrus
12949: STR
12950: PPUSH
12951: CALL_OW 38
// if Lisa in save_group then
12955: LD_EXP 40
12959: PUSH
12960: LD_EXP 23
12964: IN
12965: IFFALSE 12985
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12967: LD_EXP 40
12971: PPUSH
12972: LD_EXP 2
12976: PUSH
12977: LD_STRING Lisa
12979: STR
12980: PPUSH
12981: CALL_OW 38
// if Frank in save_group then
12985: LD_EXP 51
12989: PUSH
12990: LD_EXP 23
12994: IN
12995: IFFALSE 13015
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12997: LD_EXP 51
13001: PPUSH
13002: LD_EXP 2
13006: PUSH
13007: LD_STRING Frank
13009: STR
13010: PPUSH
13011: CALL_OW 38
// if Khatam in save_group then
13015: LD_EXP 41
13019: PUSH
13020: LD_EXP 23
13024: IN
13025: IFFALSE 13045
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13027: LD_EXP 41
13031: PPUSH
13032: LD_EXP 2
13036: PUSH
13037: LD_STRING Khatam
13039: STR
13040: PPUSH
13041: CALL_OW 38
// if save_others then
13045: LD_EXP 22
13049: IFFALSE 13063
// SaveCharacters ( save_others , 03_others ) ;
13051: LD_EXP 22
13055: PPUSH
13056: LD_STRING 03_others
13058: PPUSH
13059: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13063: LD_EXP 45
13067: PUSH
13068: LD_EXP 45
13072: PPUSH
13073: CALL_OW 302
13077: AND
13078: PUSH
13079: LD_EXP 27
13083: AND
13084: IFFALSE 13096
// begin ResetFog ;
13086: CALL_OW 335
// DisplayEndingScene ;
13090: CALL 13118 0 0
// end else
13094: GO 13109
// DeleteCharacters ( mission_prefix & Cornel ) ;
13096: LD_EXP 2
13100: PUSH
13101: LD_STRING Cornel
13103: STR
13104: PPUSH
13105: CALL_OW 40
// YouWin ;
13109: CALL_OW 103
// end ;
13113: LD_VAR 0 1
13117: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13118: LD_INT 0
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
// InGameOn ;
13126: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13130: LD_INT 208
13132: PPUSH
13133: LD_INT 62
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: LD_INT 10
13141: NEG
13142: PPUSH
13143: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13147: LD_INT 208
13149: PPUSH
13150: LD_INT 62
13152: PPUSH
13153: LD_INT 1
13155: PPUSH
13156: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13160: LD_ADDR_VAR 0 3
13164: PUSH
13165: LD_INT 22
13167: PUSH
13168: LD_INT 3
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 21
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 1
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: ST_TO_ADDR
// if filter then
13212: LD_VAR 0 3
13216: IFFALSE 13244
// for i in filter do
13218: LD_ADDR_VAR 0 2
13222: PUSH
13223: LD_VAR 0 3
13227: PUSH
13228: FOR_IN
13229: IFFALSE 13242
// RemoveUnit ( i ) ;
13231: LD_VAR 0 2
13235: PPUSH
13236: CALL_OW 64
13240: GO 13228
13242: POP
13243: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 4
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 21
13261: PUSH
13262: LD_INT 1
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: ST_TO_ADDR
// if filter then
13278: LD_VAR 0 3
13282: IFFALSE 13313
// for i in filter do
13284: LD_ADDR_VAR 0 2
13288: PUSH
13289: LD_VAR 0 3
13293: PUSH
13294: FOR_IN
13295: IFFALSE 13311
// SetLives ( i , 0 ) ;
13297: LD_VAR 0 2
13301: PPUSH
13302: LD_INT 0
13304: PPUSH
13305: CALL_OW 234
13309: GO 13294
13311: POP
13312: POP
// uc_side := 4 ;
13313: LD_ADDR_OWVAR 20
13317: PUSH
13318: LD_INT 4
13320: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13321: LD_ADDR_VAR 0 4
13325: PUSH
13326: LD_STRING Cornell
13328: PPUSH
13329: LD_INT 0
13331: PPUSH
13332: LD_STRING 
13334: PPUSH
13335: CALL 36544 0 3
13339: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13340: LD_VAR 0 4
13344: PPUSH
13345: LD_INT 208
13347: PPUSH
13348: LD_INT 62
13350: PPUSH
13351: LD_INT 0
13353: PPUSH
13354: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13358: LD_VAR 0 4
13362: PPUSH
13363: LD_INT 100
13365: PPUSH
13366: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13370: LD_INT 3
13372: PPUSH
13373: LD_VAR 0 4
13377: PPUSH
13378: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13382: LD_INT 4
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 1
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 80
// uc_side := 3 ;
13398: LD_ADDR_OWVAR 20
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// uc_nation := 3 ;
13406: LD_ADDR_OWVAR 21
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// InitHc ;
13414: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13418: LD_ADDR_VAR 0 5
13422: PUSH
13423: LD_STRING Mikhail
13425: PPUSH
13426: LD_INT 0
13428: PPUSH
13429: LD_STRING 
13431: PPUSH
13432: CALL 36544 0 3
13436: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13437: LD_INT 1
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 0
13445: PPUSH
13446: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13450: LD_ADDR_VAR 0 6
13454: PUSH
13455: LD_VAR 0 6
13459: PUSH
13460: CALL_OW 44
13464: ADD
13465: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13466: LD_ADDR_VAR 0 6
13470: PUSH
13471: LD_VAR 0 6
13475: PUSH
13476: CALL_OW 44
13480: ADD
13481: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13482: LD_INT 2
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 0
13490: PPUSH
13491: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13495: LD_ADDR_VAR 0 6
13499: PUSH
13500: LD_VAR 0 6
13504: PUSH
13505: CALL_OW 44
13509: ADD
13510: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13511: LD_VAR 0 5
13515: PPUSH
13516: LD_INT 17
13518: PPUSH
13519: LD_INT 0
13521: PPUSH
13522: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13526: LD_VAR 0 5
13530: PPUSH
13531: LD_INT 210
13533: PPUSH
13534: LD_INT 63
13536: PPUSH
13537: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13541: LD_VAR 0 5
13545: PPUSH
13546: LD_INT 208
13548: PPUSH
13549: LD_INT 62
13551: PPUSH
13552: CALL_OW 178
// for i in fake_russians do
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_VAR 0 6
13565: PUSH
13566: FOR_IN
13567: IFFALSE 13645
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13569: LD_VAR 0 2
13573: PPUSH
13574: LD_INT 17
13576: PPUSH
13577: LD_INT 0
13579: PPUSH
13580: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13584: LD_VAR 0 2
13588: PPUSH
13589: LD_INT 215
13591: PPUSH
13592: LD_INT 67
13594: PPUSH
13595: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13599: LD_VAR 0 2
13603: PPUSH
13604: LD_INT 208
13606: PPUSH
13607: LD_INT 62
13609: PPUSH
13610: CALL_OW 178
// if GetClass ( i ) = 4 then
13614: LD_VAR 0 2
13618: PPUSH
13619: CALL_OW 257
13623: PUSH
13624: LD_INT 4
13626: EQUAL
13627: IFFALSE 13643
// ComHeal ( i , fake_cornel ) ;
13629: LD_VAR 0 2
13633: PPUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: CALL_OW 128
// end ;
13643: GO 13566
13645: POP
13646: POP
// Wait ( 0 0$01 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13654: LD_INT 208
13656: PPUSH
13657: LD_INT 62
13659: PPUSH
13660: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13664: LD_INT 208
13666: PPUSH
13667: LD_INT 62
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: LD_INT 10
13675: NEG
13676: PPUSH
13677: CALL_OW 330
// Wait ( 0 0$15 ) ;
13681: LD_INT 525
13683: PPUSH
13684: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13688: LD_INT 208
13690: PPUSH
13691: LD_INT 62
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 331
// ResetFog ;
13701: CALL_OW 335
// InGameOff ;
13705: CALL_OW 9
// end ;
13709: LD_VAR 0 1
13713: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13714: LD_INT 10
13716: PPUSH
13717: LD_INT 22
13719: PUSH
13720: LD_INT 1
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 70
13731: PUSH
13732: LD_EXP 44
13736: PPUSH
13737: CALL_OW 302
13741: AND
13742: PUSH
13743: LD_INT 22
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: PPUSH
13758: LD_EXP 44
13762: PPUSH
13763: CALL_OW 74
13767: PPUSH
13768: LD_EXP 44
13772: PPUSH
13773: CALL_OW 296
13777: PUSH
13778: LD_INT 30
13780: LESS
13781: OR
13782: IFFALSE 13833
13784: GO 13786
13786: DISABLE
// begin enable ;
13787: ENABLE
// powell_warn := powell_warn + 1 ;
13788: LD_ADDR_EXP 35
13792: PUSH
13793: LD_EXP 35
13797: PUSH
13798: LD_INT 1
13800: PLUS
13801: ST_TO_ADDR
// if powell_warn = 3 then
13802: LD_EXP 35
13806: PUSH
13807: LD_INT 3
13809: EQUAL
13810: IFFALSE 13821
// begin YouLost ( 5 ) ;
13812: LD_STRING 5
13814: PPUSH
13815: CALL_OW 104
// exit ;
13819: GO 13833
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13821: LD_EXP 46
13825: PPUSH
13826: LD_STRING DWarn-Pow-1
13828: PPUSH
13829: CALL_OW 94
// end ; end_of_file
13833: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13834: LD_EXP 8
13838: IFFALSE 15675
13840: GO 13842
13842: DISABLE
13843: LD_INT 0
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13853: LD_EXP 44
13857: PUSH
13858: LD_EXP 45
13862: ADD
13863: PUSH
13864: LD_EXP 6
13868: ADD
13869: PPUSH
13870: LD_INT 250
13872: PPUSH
13873: LD_INT 120
13875: PPUSH
13876: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13880: LD_ADDR_VAR 0 2
13884: PUSH
13885: LD_EXP 6
13889: PPUSH
13890: LD_INT 25
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 72
13904: PUSH
13905: LD_EXP 45
13909: DIFF
13910: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13911: LD_ADDR_VAR 0 3
13915: PUSH
13916: LD_EXP 6
13920: PPUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 1
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 72
13935: PUSH
13936: LD_VAR 0 2
13940: DIFF
13941: ST_TO_ADDR
// if not has_eng then
13942: LD_VAR 0 2
13946: NOT
13947: IFFALSE 14030
// begin uc_side := 4 ;
13949: LD_ADDR_OWVAR 20
13953: PUSH
13954: LD_INT 4
13956: ST_TO_ADDR
// uc_nation := 1 ;
13957: LD_ADDR_OWVAR 21
13961: PUSH
13962: LD_INT 1
13964: ST_TO_ADDR
// bc_type := b_depot ;
13965: LD_ADDR_OWVAR 42
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// bc_level := 2 ;
13973: LD_ADDR_OWVAR 43
13977: PUSH
13978: LD_INT 2
13980: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13981: LD_ADDR_VAR 0 4
13985: PUSH
13986: LD_INT 264
13988: PPUSH
13989: LD_INT 120
13991: PPUSH
13992: LD_INT 4
13994: PPUSH
13995: CALL_OW 47
13999: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14000: LD_INT 264
14002: PPUSH
14003: LD_INT 120
14005: PPUSH
14006: LD_INT 4
14008: PPUSH
14009: LD_INT 10
14011: NEG
14012: PPUSH
14013: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14017: LD_INT 264
14019: PPUSH
14020: LD_INT 120
14022: PPUSH
14023: LD_INT 4
14025: PPUSH
14026: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14030: LD_INT 35
14032: PPUSH
14033: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14037: LD_EXP 44
14041: PPUSH
14042: LD_INT 10
14044: PPUSH
14045: CALL_OW 308
14049: PUSH
14050: LD_EXP 44
14054: PPUSH
14055: CALL_OW 310
14059: PPUSH
14060: LD_INT 10
14062: PPUSH
14063: CALL_OW 308
14067: OR
14068: IFFALSE 14030
// if has_eng and not dep then
14070: LD_VAR 0 2
14074: PUSH
14075: LD_VAR 0 4
14079: NOT
14080: AND
14081: IFFALSE 14231
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14083: LD_VAR 0 2
14087: PPUSH
14088: LD_INT 0
14090: PPUSH
14091: LD_INT 264
14093: PPUSH
14094: LD_INT 120
14096: PPUSH
14097: LD_INT 4
14099: PPUSH
14100: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14104: LD_INT 35
14106: PPUSH
14107: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14111: LD_INT 22
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 0
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: IFFALSE 14104
// ComMoveXY ( filter , 264 , 120 ) ;
14141: LD_VAR 0 3
14145: PPUSH
14146: LD_INT 264
14148: PPUSH
14149: LD_INT 120
14151: PPUSH
14152: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14156: LD_INT 35
14158: PPUSH
14159: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14163: LD_INT 22
14165: PUSH
14166: LD_INT 4
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 30
14175: PUSH
14176: LD_INT 0
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 3
14185: PUSH
14186: LD_INT 57
14188: PUSH
14189: EMPTY
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: IFFALSE 14156
// ComMoveXY ( filter , 247 , 113 ) ;
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 247
14214: PPUSH
14215: LD_INT 113
14217: PPUSH
14218: CALL_OW 111
// Wait ( 0 0$2 ) ;
14222: LD_INT 70
14224: PPUSH
14225: CALL_OW 67
// end else
14229: GO 14243
// begin SetSide ( dep , 4 ) ;
14231: LD_VAR 0 4
14235: PPUSH
14236: LD_INT 4
14238: PPUSH
14239: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14243: LD_ADDR_VAR 0 4
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_INT 4
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 30
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: PUSH
14277: LD_INT 1
14279: ARRAY
14280: ST_TO_ADDR
// if not has_eng then
14281: LD_VAR 0 2
14285: NOT
14286: IFFALSE 14373
// for i = 1 to 2 do
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: DOUBLE
14294: LD_INT 1
14296: DEC
14297: ST_TO_ADDR
14298: LD_INT 2
14300: PUSH
14301: FOR_TO
14302: IFFALSE 14371
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14304: LD_VAR 0 3
14308: PUSH
14309: LD_INT 1
14311: ARRAY
14312: PPUSH
14313: LD_VAR 0 4
14317: PPUSH
14318: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14322: LD_VAR 0 3
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: LD_INT 2
14333: PPUSH
14334: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14338: LD_VAR 0 3
14342: PUSH
14343: LD_INT 1
14345: ARRAY
14346: PPUSH
14347: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14351: LD_ADDR_VAR 0 3
14355: PUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 3
14368: ST_TO_ADDR
// end ;
14369: GO 14301
14371: POP
14372: POP
// if IsInUnit ( Cornel ) then
14373: LD_EXP 44
14377: PPUSH
14378: CALL_OW 310
14382: IFFALSE 14460
// begin cargo := IsInUnit ( Cornel ) ;
14384: LD_ADDR_VAR 0 7
14388: PUSH
14389: LD_EXP 44
14393: PPUSH
14394: CALL_OW 310
14398: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_INT 1
14406: PPUSH
14407: CALL_OW 289
14411: IFFALSE 14422
// ComUnload ( cargo ) ;
14413: LD_VAR 0 7
14417: PPUSH
14418: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14422: LD_EXP 44
14426: PPUSH
14427: LD_INT 235
14429: PPUSH
14430: LD_INT 122
14432: PPUSH
14433: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14437: LD_EXP 44
14441: PPUSH
14442: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14446: LD_EXP 44
14450: PPUSH
14451: LD_VAR 0 4
14455: PPUSH
14456: CALL_OW 180
// end ; if Bierezov then
14460: LD_EXP 45
14464: IFFALSE 14512
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14466: LD_EXP 45
14470: PPUSH
14471: LD_INT 260
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: CALL_OW 111
// if dep then
14481: LD_VAR 0 4
14485: IFFALSE 14503
// AddComEnterUnit ( Bierezov , dep ) else
14487: LD_EXP 45
14491: PPUSH
14492: LD_VAR 0 4
14496: PPUSH
14497: CALL_OW 180
14501: GO 14512
// AddComHold ( Bierezov ) ;
14503: LD_EXP 45
14507: PPUSH
14508: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14512: LD_INT 525
14514: PPUSH
14515: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_INT 4
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PPUSH
14548: CALL_OW 69
14552: PUSH
14553: LD_EXP 45
14557: DIFF
14558: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14559: LD_INT 35
14561: PPUSH
14562: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14566: LD_ADDR_VAR 0 6
14570: PUSH
14571: LD_INT 10
14573: PPUSH
14574: CALL_OW 435
14578: ST_TO_ADDR
// if crates then
14579: LD_VAR 0 6
14583: IFFALSE 14612
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14585: LD_VAR 0 2
14589: PPUSH
14590: LD_VAR 0 6
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: PPUSH
14599: LD_VAR 0 6
14603: PUSH
14604: LD_INT 2
14606: ARRAY
14607: PPUSH
14608: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 274
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: CALL_OW 275
14629: PUSH
14630: LD_INT 40
14632: GREATEREQUAL
14633: IFFALSE 14559
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14635: LD_ADDR_VAR 0 5
14639: PUSH
14640: LD_INT 4
14642: PUSH
14643: LD_INT 256
14645: PUSH
14646: LD_INT 111
14648: PUSH
14649: LD_INT 2
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 31
14660: PUSH
14661: LD_INT 243
14663: PUSH
14664: LD_INT 112
14666: PUSH
14667: LD_INT 2
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 31
14678: PUSH
14679: LD_INT 254
14681: PUSH
14682: LD_INT 114
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: ST_TO_ADDR
// for i in blist do
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: LD_VAR 0 5
14708: PUSH
14709: FOR_IN
14710: IFFALSE 14759
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14712: LD_VAR 0 2
14716: PPUSH
14717: LD_VAR 0 1
14721: PUSH
14722: LD_INT 1
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 1
14730: PUSH
14731: LD_INT 2
14733: ARRAY
14734: PPUSH
14735: LD_VAR 0 1
14739: PUSH
14740: LD_INT 3
14742: ARRAY
14743: PPUSH
14744: LD_VAR 0 1
14748: PUSH
14749: LD_INT 4
14751: ARRAY
14752: PPUSH
14753: CALL_OW 205
14757: GO 14709
14759: POP
14760: POP
// repeat wait ( 0 0$01 ) ;
14761: LD_INT 35
14763: PPUSH
14764: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14768: LD_INT 22
14770: PUSH
14771: LD_INT 4
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: LD_INT 4
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: LD_INT 57
14793: PUSH
14794: EMPTY
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: IFFALSE 14761
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14812: LD_VAR 0 3
14816: PPUSH
14817: LD_INT 22
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 30
14829: PUSH
14830: LD_INT 4
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PPUSH
14841: CALL_OW 69
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14854: LD_VAR 0 3
14858: PPUSH
14859: LD_INT 1
14861: PPUSH
14862: CALL_OW 183
// if has_eng > 1 then
14866: LD_VAR 0 2
14870: PUSH
14871: LD_INT 1
14873: GREATER
14874: IFFALSE 15016
// for i = has_eng downto 2 do
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: DOUBLE
14882: LD_VAR 0 2
14886: INC
14887: ST_TO_ADDR
14888: LD_INT 2
14890: PUSH
14891: FOR_DOWNTO
14892: IFFALSE 15014
// begin if IsInUnit ( has_eng [ i ] ) then
14894: LD_VAR 0 2
14898: PUSH
14899: LD_VAR 0 1
14903: ARRAY
14904: PPUSH
14905: CALL_OW 310
14909: IFFALSE 14926
// ComExitBuilding ( has_eng [ i ] ) ;
14911: LD_VAR 0 2
14915: PUSH
14916: LD_VAR 0 1
14920: ARRAY
14921: PPUSH
14922: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14926: LD_VAR 0 2
14930: PUSH
14931: LD_VAR 0 1
14935: ARRAY
14936: PPUSH
14937: LD_INT 22
14939: PUSH
14940: LD_INT 4
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 30
14949: PUSH
14950: LD_INT 4
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: PUSH
14966: LD_INT 1
14968: ARRAY
14969: PPUSH
14970: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14974: LD_VAR 0 2
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: PPUSH
14985: LD_INT 1
14987: PPUSH
14988: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14992: LD_ADDR_VAR 0 2
14996: PUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 3
15011: ST_TO_ADDR
// end ;
15012: GO 14891
15014: POP
15015: POP
// repeat wait ( 0 0$01 ) ;
15016: LD_INT 35
15018: PPUSH
15019: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15023: LD_INT 22
15025: PUSH
15026: LD_INT 4
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: LD_INT 31
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 3
15045: PUSH
15046: LD_INT 57
15048: PUSH
15049: EMPTY
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: PPUSH
15061: CALL_OW 69
15065: PUSH
15066: LD_INT 1
15068: GREATER
15069: IFFALSE 15016
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15071: LD_ADDR_VAR 0 8
15075: PUSH
15076: LD_EXP 6
15080: PPUSH
15081: LD_INT 25
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 72
15095: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15096: LD_ADDR_VAR 0 1
15100: PUSH
15101: DOUBLE
15102: LD_INT 1
15104: DEC
15105: ST_TO_ADDR
15106: LD_INT 22
15108: PUSH
15109: LD_INT 4
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 30
15118: PUSH
15119: LD_INT 31
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 3
15128: PUSH
15129: LD_INT 57
15131: PUSH
15132: EMPTY
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: PUSH
15149: FOR_TO
15150: IFFALSE 15234
// begin if not sol [ i ] then
15152: LD_VAR 0 8
15156: PUSH
15157: LD_VAR 0 1
15161: ARRAY
15162: NOT
15163: IFFALSE 15167
// break ;
15165: GO 15234
// ComExitBuilding ( sol [ i ] ) ;
15167: LD_VAR 0 8
15171: PUSH
15172: LD_VAR 0 1
15176: ARRAY
15177: PPUSH
15178: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15182: LD_VAR 0 8
15186: PUSH
15187: LD_VAR 0 1
15191: ARRAY
15192: PPUSH
15193: LD_INT 22
15195: PUSH
15196: LD_INT 4
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 30
15205: PUSH
15206: LD_INT 31
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 69
15221: PUSH
15222: LD_VAR 0 1
15226: ARRAY
15227: PPUSH
15228: CALL_OW 180
// end ;
15232: GO 15149
15234: POP
15235: POP
// if sol > 3 then
15236: LD_VAR 0 8
15240: PUSH
15241: LD_INT 3
15243: GREATER
15244: IFFALSE 15361
// begin ComExitBuilding ( sol [ 3 ] ) ;
15246: LD_VAR 0 8
15250: PUSH
15251: LD_INT 3
15253: ARRAY
15254: PPUSH
15255: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15259: LD_VAR 0 8
15263: PUSH
15264: LD_INT 3
15266: ARRAY
15267: PPUSH
15268: LD_INT 246
15270: PPUSH
15271: LD_INT 94
15273: PPUSH
15274: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15278: LD_VAR 0 8
15282: PUSH
15283: LD_INT 3
15285: ARRAY
15286: PPUSH
15287: LD_INT 175
15289: PPUSH
15290: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15294: LD_VAR 0 8
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: PPUSH
15303: LD_INT 224
15305: PPUSH
15306: LD_INT 90
15308: PPUSH
15309: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15313: LD_VAR 0 8
15317: PUSH
15318: LD_INT 3
15320: ARRAY
15321: PPUSH
15322: LD_INT 245
15324: PPUSH
15325: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15329: LD_VAR 0 8
15333: PUSH
15334: LD_INT 3
15336: ARRAY
15337: PPUSH
15338: LD_INT 223
15340: PPUSH
15341: LD_INT 110
15343: PPUSH
15344: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15348: LD_VAR 0 8
15352: PUSH
15353: LD_INT 3
15355: ARRAY
15356: PPUSH
15357: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15361: LD_VAR 0 2
15365: PPUSH
15366: LD_VAR 0 4
15370: PPUSH
15371: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15375: LD_INT 22
15377: PUSH
15378: LD_INT 4
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 30
15387: PUSH
15388: LD_INT 4
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: CALL_OW 69
15403: PUSH
15404: LD_INT 1
15406: ARRAY
15407: PPUSH
15408: CALL_OW 313
15412: PUSH
15413: LD_INT 6
15415: LESS
15416: IFFALSE 15480
// begin if IsInUnit ( Cornel ) then
15418: LD_EXP 44
15422: PPUSH
15423: CALL_OW 310
15427: IFFALSE 15438
// ComExitBuilding ( Cornel ) ;
15429: LD_EXP 44
15433: PPUSH
15434: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15438: LD_EXP 44
15442: PPUSH
15443: LD_INT 22
15445: PUSH
15446: LD_INT 4
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 30
15455: PUSH
15456: LD_INT 4
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 69
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15480: LD_INT 35
15482: PPUSH
15483: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: LD_INT 22
15494: PUSH
15495: LD_INT 4
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: LD_INT 24
15517: PUSH
15518: LD_INT 1000
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: ST_TO_ADDR
// if filter and has_eng then
15539: LD_VAR 0 3
15543: PUSH
15544: LD_VAR 0 2
15548: AND
15549: IFFALSE 15615
// begin for i in has_eng do
15551: LD_ADDR_VAR 0 1
15555: PUSH
15556: LD_VAR 0 2
15560: PUSH
15561: FOR_IN
15562: IFFALSE 15611
// begin if IsInUnit ( i ) then
15564: LD_VAR 0 1
15568: PPUSH
15569: CALL_OW 310
15573: IFFALSE 15584
// ComExitBuilding ( i ) ;
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 122
// Wait ( 3 ) ;
15584: LD_INT 3
15586: PPUSH
15587: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15591: LD_VAR 0 1
15595: PPUSH
15596: LD_VAR 0 3
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PPUSH
15605: CALL_OW 130
// end ;
15609: GO 15561
15611: POP
15612: POP
// end else
15613: GO 15669
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15615: LD_VAR 0 2
15619: PUSH
15620: LD_VAR 0 2
15624: PPUSH
15625: LD_INT 56
15627: PUSH
15628: EMPTY
15629: LIST
15630: PPUSH
15631: CALL_OW 72
15635: AND
15636: IFFALSE 15669
// for i in has_eng do
15638: LD_ADDR_VAR 0 1
15642: PUSH
15643: LD_VAR 0 2
15647: PUSH
15648: FOR_IN
15649: IFFALSE 15667
// ComEnterUnit ( i , dep ) ;
15651: LD_VAR 0 1
15655: PPUSH
15656: LD_VAR 0 4
15660: PPUSH
15661: CALL_OW 120
15665: GO 15648
15667: POP
15668: POP
// until cornel_prepared ;
15669: LD_EXP 11
15673: IFFALSE 15480
// end ;
15675: PPOPN 8
15677: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15678: LD_EXP 11
15682: IFFALSE 16081
15684: GO 15686
15686: DISABLE
15687: LD_INT 0
15689: PPUSH
15690: PPUSH
15691: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15692: LD_ADDR_VAR 0 2
15696: PUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 4
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 30
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 69
15725: PUSH
15726: LD_INT 1
15728: ARRAY
15729: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15730: LD_EXP 6
15734: PPUSH
15735: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15739: LD_EXP 45
15743: PUSH
15744: LD_EXP 45
15748: PPUSH
15749: CALL_OW 310
15753: AND
15754: IFFALSE 15765
// ComExitBuilding ( Bierezov ) ;
15756: LD_EXP 45
15760: PPUSH
15761: CALL_OW 122
// Wait ( 0 0$03 ) ;
15765: LD_INT 105
15767: PPUSH
15768: CALL_OW 67
// for i in cornel_units do
15772: LD_ADDR_VAR 0 1
15776: PUSH
15777: LD_EXP 6
15781: PUSH
15782: FOR_IN
15783: IFFALSE 15859
// begin if GetClass ( i ) in [ 2 , 3 ] then
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 257
15794: PUSH
15795: LD_INT 2
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: IN
15805: IFFALSE 15842
// begin ComEnterUnit ( i , arm ) ;
15807: LD_VAR 0 1
15811: PPUSH
15812: LD_VAR 0 2
15816: PPUSH
15817: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15821: LD_VAR 0 1
15825: PPUSH
15826: LD_INT 1
15828: PPUSH
15829: CALL_OW 183
// AddComExitBuilding ( i ) ;
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15842: LD_VAR 0 1
15846: PPUSH
15847: LD_INT 257
15849: PPUSH
15850: LD_INT 121
15852: PPUSH
15853: CALL_OW 171
// end ;
15857: GO 15782
15859: POP
15860: POP
// Wait ( 1 1$00 ) ;
15861: LD_INT 2100
15863: PPUSH
15864: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15868: LD_ADDR_VAR 0 3
15872: PUSH
15873: LD_EXP 44
15877: PUSH
15878: LD_EXP 45
15882: ADD
15883: PUSH
15884: LD_EXP 6
15888: ADD
15889: PUSH
15890: LD_EXP 6
15894: PPUSH
15895: LD_INT 21
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PPUSH
15905: CALL_OW 72
15909: DIFF
15910: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 248
15918: PPUSH
15919: LD_INT 85
15921: PPUSH
15922: CALL_OW 111
// AddComHold ( filter ) ;
15926: LD_VAR 0 3
15930: PPUSH
15931: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15935: LD_INT 35
15937: PPUSH
15938: CALL_OW 67
// until cornel_attack ;
15942: LD_EXP 9
15946: IFFALSE 15935
// ComAgressiveMove ( filter , 209 , 63 ) ;
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 209
15955: PPUSH
15956: LD_INT 63
15958: PPUSH
15959: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15963: LD_EXP 44
15967: PPUSH
15968: LD_INT 208
15970: PPUSH
15971: LD_INT 62
15973: PPUSH
15974: CALL_OW 114
// AddComHold ( Cornel ) ;
15978: LD_EXP 44
15982: PPUSH
15983: CALL_OW 200
// if Bierezov then
15987: LD_EXP 45
15991: IFFALSE 16081
// begin filter := filter diff Bierezov ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_VAR 0 3
16002: PUSH
16003: LD_EXP 45
16007: DIFF
16008: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16009: LD_EXP 45
16013: PPUSH
16014: LD_INT 6
16016: PPUSH
16017: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16021: LD_EXP 45
16025: PPUSH
16026: LD_INT 235
16028: PPUSH
16029: LD_INT 60
16031: PPUSH
16032: CALL_OW 111
// AddComHold ( Bierezov ) ;
16036: LD_EXP 45
16040: PPUSH
16041: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16045: LD_EXP 45
16049: PPUSH
16050: LD_INT 350
16052: PPUSH
16053: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 198
16064: PPUSH
16065: LD_INT 28
16067: PPUSH
16068: CALL_OW 171
// AddComHold ( Bierezov ) ;
16072: LD_EXP 45
16076: PPUSH
16077: CALL_OW 200
// end ; end ; end_of_file
16081: PPOPN 3
16083: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16084: LD_EXP 53
16088: PUSH
16089: LD_EXP 31
16093: NOT
16094: AND
16095: PUSH
16096: LD_EXP 32
16100: NOT
16101: AND
16102: IFFALSE 16552
16104: GO 16106
16106: DISABLE
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
// begin enable ;
16113: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16114: LD_ADDR_VAR 0 4
16118: PUSH
16119: LD_INT 81
16121: PUSH
16122: LD_INT 3
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PPUSH
16129: CALL_OW 69
16133: ST_TO_ADDR
// for i = 1 to ru_patrol do
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: DOUBLE
16140: LD_INT 1
16142: DEC
16143: ST_TO_ADDR
16144: LD_EXP 53
16148: PUSH
16149: FOR_TO
16150: IFFALSE 16550
// begin un := ru_patrol [ i ] ;
16152: LD_ADDR_VAR 0 1
16156: PUSH
16157: LD_EXP 53
16161: PUSH
16162: LD_VAR 0 2
16166: ARRAY
16167: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16168: LD_VAR 0 1
16172: PPUSH
16173: LD_INT 13
16175: PPUSH
16176: CALL_OW 308
16180: IFFALSE 16285
// begin if not ru_alert then
16182: LD_EXP 60
16186: NOT
16187: IFFALSE 16197
// ru_alert := true ;
16189: LD_ADDR_EXP 60
16193: PUSH
16194: LD_INT 1
16196: ST_TO_ADDR
// if not See ( 1 , un ) then
16197: LD_INT 1
16199: PPUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 292
16209: NOT
16210: IFFALSE 16224
// SetLives ( un , 1000 ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1000
16219: PPUSH
16220: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16224: LD_ADDR_EXP 53
16228: PUSH
16229: LD_EXP 53
16233: PUSH
16234: LD_VAR 0 1
16238: DIFF
16239: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16240: LD_VAR 0 1
16244: PPUSH
16245: LD_INT 22
16247: PUSH
16248: LD_INT 3
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 30
16257: PUSH
16258: LD_INT 4
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 69
16273: PPUSH
16274: CALL 1007 0 1
16278: PPUSH
16279: CALL_OW 120
// continue ;
16283: GO 16149
// end ; if IsOk ( un ) and not HasTask ( un ) then
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 302
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 314
16304: NOT
16305: AND
16306: IFFALSE 16399
// begin for j = 1 to ru_firepoints_south [ i ] do
16308: LD_ADDR_VAR 0 3
16312: PUSH
16313: DOUBLE
16314: LD_INT 1
16316: DEC
16317: ST_TO_ADDR
16318: LD_EXP 59
16322: PUSH
16323: LD_VAR 0 2
16327: ARRAY
16328: PUSH
16329: FOR_TO
16330: IFFALSE 16397
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16332: LD_VAR 0 1
16336: PPUSH
16337: LD_EXP 59
16341: PUSH
16342: LD_VAR 0 2
16346: ARRAY
16347: PUSH
16348: LD_VAR 0 3
16352: ARRAY
16353: PUSH
16354: LD_INT 1
16356: ARRAY
16357: PPUSH
16358: LD_EXP 59
16362: PUSH
16363: LD_VAR 0 2
16367: ARRAY
16368: PUSH
16369: LD_VAR 0 3
16373: ARRAY
16374: PUSH
16375: LD_INT 2
16377: ARRAY
16378: PPUSH
16379: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16383: LD_VAR 0 1
16387: PPUSH
16388: LD_INT 70
16390: PPUSH
16391: CALL_OW 202
// end ;
16395: GO 16329
16397: POP
16398: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 256
16408: PUSH
16409: LD_INT 700
16411: LESS
16412: PUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: LD_INT 13
16420: PPUSH
16421: CALL_OW 308
16425: NOT
16426: AND
16427: IFFALSE 16479
// begin ComMoveToArea ( un , retreatArea ) ;
16429: LD_VAR 0 1
16433: PPUSH
16434: LD_INT 13
16436: PPUSH
16437: CALL_OW 113
// if not ru_alert_xy then
16441: LD_EXP 61
16445: NOT
16446: IFFALSE 16477
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16448: LD_ADDR_EXP 61
16452: PUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 250
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 251
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: ST_TO_ADDR
// end else
16477: GO 16548
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_VAR 0 4
16488: PPUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 74
16498: PPUSH
16499: CALL_OW 296
16503: PUSH
16504: LD_INT 9
16506: LESS
16507: PUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 256
16517: PUSH
16518: LD_INT 500
16520: GREATER
16521: AND
16522: IFFALSE 16548
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_VAR 0 4
16533: PPUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 74
16543: PPUSH
16544: CALL_OW 115
// end ;
16548: GO 16149
16550: POP
16551: POP
// end ;
16552: PPOPN 4
16554: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16555: LD_EXP 60
16559: PUSH
16560: LD_EXP 61
16564: AND
16565: PUSH
16566: LD_EXP 31
16570: NOT
16571: AND
16572: PUSH
16573: LD_EXP 32
16577: NOT
16578: AND
16579: IFFALSE 16789
16581: GO 16583
16583: DISABLE
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
// begin enable ;
16588: ENABLE
// if not ru_vehicles then
16589: LD_EXP 56
16593: NOT
16594: IFFALSE 16598
// exit ;
16596: GO 16789
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16598: LD_ADDR_VAR 0 2
16602: PUSH
16603: LD_INT 81
16605: PUSH
16606: LD_INT 3
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PPUSH
16613: CALL_OW 69
16617: ST_TO_ADDR
// if ru_vehicles then
16618: LD_EXP 56
16622: IFFALSE 16789
// begin for i in ru_vehicles do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_EXP 56
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16787
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 302
16646: PUSH
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_VAR 0 2
16656: PPUSH
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 74
16666: PPUSH
16667: CALL_OW 296
16671: PUSH
16672: LD_INT 9
16674: LESS
16675: AND
16676: IFFALSE 16702
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16678: LD_VAR 0 1
16682: PPUSH
16683: LD_VAR 0 2
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 74
16697: PPUSH
16698: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16702: LD_VAR 0 1
16706: PPUSH
16707: CALL_OW 314
16711: NOT
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 302
16722: AND
16723: PUSH
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_EXP 61
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: LD_EXP 61
16742: PUSH
16743: LD_INT 2
16745: ARRAY
16746: PPUSH
16747: CALL_OW 297
16751: PUSH
16752: LD_INT 10
16754: GREATER
16755: AND
16756: IFFALSE 16785
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16758: LD_VAR 0 1
16762: PPUSH
16763: LD_EXP 61
16767: PUSH
16768: LD_INT 1
16770: ARRAY
16771: PPUSH
16772: LD_EXP 61
16776: PUSH
16777: LD_INT 2
16779: ARRAY
16780: PPUSH
16781: CALL_OW 114
// end ;
16785: GO 16634
16787: POP
16788: POP
// end ; end ;
16789: PPOPN 2
16791: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16792: LD_EXP 61
16796: PUSH
16797: LD_EXP 60
16801: AND
16802: PUSH
16803: LD_INT 3
16805: PPUSH
16806: CALL_OW 463
16810: NOT
16811: AND
16812: PUSH
16813: LD_EXP 31
16817: NOT
16818: AND
16819: PUSH
16820: LD_EXP 32
16824: NOT
16825: AND
16826: IFFALSE 16921
16828: GO 16830
16830: DISABLE
16831: LD_INT 0
16833: PPUSH
// begin enable ;
16834: ENABLE
// ru_alert_xy := false ;
16835: LD_ADDR_EXP 61
16839: PUSH
16840: LD_INT 0
16842: ST_TO_ADDR
// ru_alert := false ;
16843: LD_ADDR_EXP 60
16847: PUSH
16848: LD_INT 0
16850: ST_TO_ADDR
// if ru_vehicles then
16851: LD_EXP 56
16855: IFFALSE 16921
// for i in ru_vehicles do
16857: LD_ADDR_VAR 0 1
16861: PUSH
16862: LD_EXP 56
16866: PUSH
16867: FOR_IN
16868: IFFALSE 16919
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 302
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: LD_INT 89
16887: PPUSH
16888: LD_INT 36
16890: PPUSH
16891: CALL_OW 297
16895: PUSH
16896: LD_INT 10
16898: GREATER
16899: AND
16900: IFFALSE 16917
// ComMoveXY ( i , 89 , 36 ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 89
16909: PPUSH
16910: LD_INT 36
16912: PPUSH
16913: CALL_OW 111
16917: GO 16867
16919: POP
16920: POP
// end ;
16921: PPOPN 1
16923: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16924: LD_EXP 55
16928: PUSH
16929: LD_EXP 31
16933: NOT
16934: AND
16935: PUSH
16936: LD_EXP 32
16940: NOT
16941: AND
16942: IFFALSE 17226
16944: GO 16946
16946: DISABLE
16947: LD_INT 0
16949: PPUSH
16950: PPUSH
16951: PPUSH
// begin enable ;
16952: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_INT 81
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PPUSH
16968: CALL_OW 69
16972: ST_TO_ADDR
// for i = 1 to ru_forest do
16973: LD_ADDR_VAR 0 1
16977: PUSH
16978: DOUBLE
16979: LD_INT 1
16981: DEC
16982: ST_TO_ADDR
16983: LD_EXP 55
16987: PUSH
16988: FOR_TO
16989: IFFALSE 17224
// begin un := ru_forest [ i ] ;
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_EXP 55
17000: PUSH
17001: LD_VAR 0 1
17005: ARRAY
17006: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17007: LD_VAR 0 2
17011: PPUSH
17012: LD_INT 13
17014: PPUSH
17015: CALL_OW 308
17019: IFFALSE 17109
// begin if not See ( 1 , un ) then
17021: LD_INT 1
17023: PPUSH
17024: LD_VAR 0 2
17028: PPUSH
17029: CALL_OW 292
17033: NOT
17034: IFFALSE 17048
// SetLives ( un , 1000 ) ;
17036: LD_VAR 0 2
17040: PPUSH
17041: LD_INT 1000
17043: PPUSH
17044: CALL_OW 234
// ru_forest := ru_forest diff un ;
17048: LD_ADDR_EXP 55
17052: PUSH
17053: LD_EXP 55
17057: PUSH
17058: LD_VAR 0 2
17062: DIFF
17063: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17064: LD_VAR 0 2
17068: PPUSH
17069: LD_INT 22
17071: PUSH
17072: LD_INT 3
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 30
17081: PUSH
17082: LD_INT 4
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL_OW 69
17097: PPUSH
17098: CALL 1007 0 1
17102: PPUSH
17103: CALL_OW 120
// continue ;
17107: GO 16988
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17109: LD_VAR 0 2
17113: PPUSH
17114: CALL_OW 256
17118: PUSH
17119: LD_INT 700
17121: LESS
17122: PUSH
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_INT 13
17130: PPUSH
17131: CALL_OW 308
17135: NOT
17136: AND
17137: IFFALSE 17153
// ComMoveToArea ( un , retreatArea ) else
17139: LD_VAR 0 2
17143: PPUSH
17144: LD_INT 13
17146: PPUSH
17147: CALL_OW 113
17151: GO 17222
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17153: LD_VAR 0 2
17157: PPUSH
17158: LD_VAR 0 3
17162: PPUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: CALL_OW 74
17172: PPUSH
17173: CALL_OW 296
17177: PUSH
17178: LD_INT 9
17180: LESS
17181: PUSH
17182: LD_VAR 0 2
17186: PPUSH
17187: CALL_OW 256
17191: PUSH
17192: LD_INT 500
17194: GREATER
17195: AND
17196: IFFALSE 17222
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17198: LD_VAR 0 2
17202: PPUSH
17203: LD_VAR 0 3
17207: PPUSH
17208: LD_VAR 0 2
17212: PPUSH
17213: CALL_OW 74
17217: PPUSH
17218: CALL_OW 115
// end ;
17222: GO 16988
17224: POP
17225: POP
// end ;
17226: PPOPN 3
17228: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17229: LD_EXP 32
17233: NOT
17234: IFFALSE 17355
17236: GO 17238
17238: DISABLE
17239: LD_INT 0
17241: PPUSH
17242: PPUSH
// begin enable ;
17243: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17244: LD_ADDR_VAR 0 2
17248: PUSH
17249: LD_INT 22
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 21
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: ST_TO_ADDR
// if filter then
17278: LD_VAR 0 2
17282: IFFALSE 17355
// for i in filter do
17284: LD_ADDR_VAR 0 1
17288: PUSH
17289: LD_VAR 0 2
17293: PUSH
17294: FOR_IN
17295: IFFALSE 17353
// if GetLives ( i ) < 990 then
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 256
17306: PUSH
17307: LD_INT 990
17309: LESS
17310: IFFALSE 17351
// begin ru_alert := true ;
17312: LD_ADDR_EXP 60
17316: PUSH
17317: LD_INT 1
17319: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17320: LD_ADDR_EXP 61
17324: PUSH
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 250
17334: PUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: CALL_OW 251
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: ST_TO_ADDR
// break ;
17349: GO 17353
// end ;
17351: GO 17294
17353: POP
17354: POP
// end ;
17355: PPOPN 2
17357: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17358: LD_EXP 31
17362: IFFALSE 17511
17364: GO 17366
17366: DISABLE
17367: LD_INT 0
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17373: LD_ADDR_VAR 0 4
17377: PUSH
17378: LD_EXP 56
17382: PUSH
17383: LD_EXP 55
17387: ADD
17388: PUSH
17389: LD_EXP 53
17393: ADD
17394: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17395: LD_ADDR_VAR 0 3
17399: PUSH
17400: LD_INT 3
17402: PPUSH
17403: LD_INT 81
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PPUSH
17413: CALL_OW 70
17417: ST_TO_ADDR
// if filter and enemy then
17418: LD_VAR 0 4
17422: PUSH
17423: LD_VAR 0 3
17427: AND
17428: IFFALSE 17511
// repeat wait ( 0 0$01 ) ;
17430: LD_INT 35
17432: PPUSH
17433: CALL_OW 67
// for i in filter do
17437: LD_ADDR_VAR 0 1
17441: PUSH
17442: LD_VAR 0 4
17446: PUSH
17447: FOR_IN
17448: IFFALSE 17476
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17450: LD_VAR 0 1
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 74
17469: PPUSH
17470: CALL_OW 115
// end ;
17474: GO 17447
17476: POP
17477: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17478: LD_INT 3
17480: PPUSH
17481: LD_INT 81
17483: PUSH
17484: LD_INT 3
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PPUSH
17491: CALL_OW 70
17495: PUSH
17496: LD_INT 0
17498: EQUAL
17499: PUSH
17500: LD_VAR 0 4
17504: PUSH
17505: LD_INT 0
17507: EQUAL
17508: OR
17509: IFFALSE 17430
// end ;
17511: PPOPN 4
17513: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17514: LD_EXP 26
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_INT 4
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 30
17531: PUSH
17532: LD_INT 4
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 3
17541: PUSH
17542: LD_INT 57
17544: PUSH
17545: EMPTY
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: AND
17562: IFFALSE 17611
17564: GO 17566
17566: DISABLE
17567: LD_INT 0
17569: PPUSH
// begin if not ru_cornel_attack then
17570: LD_EXP 58
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 17611
// for i in ru_cornel_attack do
17579: LD_ADDR_VAR 0 1
17583: PUSH
17584: LD_EXP 58
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17609
// ComAgressiveMove ( i , 258 , 119 ) ;
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_INT 258
17599: PPUSH
17600: LD_INT 119
17602: PPUSH
17603: CALL_OW 114
17607: GO 17589
17609: POP
17610: POP
// end ; end_of_file
17611: PPOPN 1
17613: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17614: LD_EXP 5
17618: PUSH
17619: LD_EXP 9
17623: NOT
17624: AND
17625: PUSH
17626: LD_EXP 20
17630: AND
17631: IFFALSE 17743
17633: GO 17635
17635: DISABLE
17636: LD_INT 0
17638: PPUSH
// begin enable ;
17639: ENABLE
// crates_counter := crates_counter - 50 ;
17640: LD_ADDR_EXP 20
17644: PUSH
17645: LD_EXP 20
17649: PUSH
17650: LD_INT 50
17652: MINUS
17653: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17654: LD_INT 8
17656: PPUSH
17657: LD_INT 2
17659: PPUSH
17660: LD_INT 5
17662: PPUSH
17663: CALL_OW 12
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17675: LD_INT 1785
17677: PPUSH
17678: LD_INT 2345
17680: PPUSH
17681: CALL_OW 12
17685: PPUSH
17686: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17690: LD_ADDR_VAR 0 1
17694: PUSH
17695: LD_INT 1
17697: PPUSH
17698: LD_OWVAR 67
17702: PUSH
17703: LD_INT 2
17705: PLUS
17706: PPUSH
17707: CALL_OW 12
17711: ST_TO_ADDR
// if r < 3 then
17712: LD_VAR 0 1
17716: PUSH
17717: LD_INT 3
17719: LESS
17720: IFFALSE 17743
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17722: LD_INT 4
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: LD_INT 5
17730: PPUSH
17731: CALL_OW 12
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: CALL_OW 55
// end ;
17743: PPOPN 1
17745: END
// every 0 0$01 trigger cornel_active do
17746: LD_EXP 8
17750: IFFALSE 17839
17752: GO 17754
17754: DISABLE
// begin Wait ( 0 0$03 ) ;
17755: LD_INT 105
17757: PPUSH
17758: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17762: LD_INT 2
17764: PPUSH
17765: LD_INT 5
17767: PPUSH
17768: CALL_OW 12
17772: PPUSH
17773: LD_INT 10
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: CALL_OW 55
// Wait ( 0 0$13 ) ;
17783: LD_INT 455
17785: PPUSH
17786: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17790: LD_INT 2
17792: PPUSH
17793: LD_INT 5
17795: PPUSH
17796: CALL_OW 12
17800: PPUSH
17801: LD_INT 10
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 55
// Wait ( 0 0$16 ) ;
17811: LD_INT 560
17813: PPUSH
17814: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17818: LD_INT 2
17820: PPUSH
17821: LD_INT 5
17823: PPUSH
17824: CALL_OW 12
17828: PPUSH
17829: LD_INT 10
17831: PPUSH
17832: LD_INT 1
17834: PPUSH
17835: CALL_OW 55
// end ; end_of_file
17839: END
// every 0 0$01 trigger cornel_prepared do
17840: LD_EXP 11
17844: IFFALSE 17903
17846: GO 17848
17848: DISABLE
// begin enable ;
17849: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17850: LD_ADDR_OWVAR 47
17854: PUSH
17855: LD_STRING #Am03-1
17857: PUSH
17858: LD_EXP 10
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17867: LD_ADDR_EXP 10
17871: PUSH
17872: LD_EXP 10
17876: PPUSH
17877: LD_STRING -
17879: PPUSH
17880: CALL 1077 0 2
17884: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17885: LD_EXP 10
17889: PUSH
17890: LD_INT 0
17892: EQUAL
17893: IFFALSE 17903
// begin Display_Strings := [ ] ;
17895: LD_ADDR_OWVAR 47
17899: PUSH
17900: EMPTY
17901: ST_TO_ADDR
// disable ;
17902: DISABLE
// end ; end ;
17903: END
// every 0 0$01 trigger debug and debug_strings do
17904: LD_EXP 1
17908: PUSH
17909: LD_OWVAR 48
17913: AND
17914: IFFALSE 17930
17916: GO 17918
17918: DISABLE
// begin enable ;
17919: ENABLE
// Display_Strings := debug_strings ;
17920: LD_ADDR_OWVAR 47
17924: PUSH
17925: LD_OWVAR 48
17929: ST_TO_ADDR
// end ; end_of_file
17930: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17931: LD_VAR 0 1
17935: PPUSH
17936: CALL_OW 255
17940: PUSH
17941: LD_INT 1
17943: EQUAL
17944: PUSH
17945: LD_EXP 14
17949: NOT
17950: AND
17951: IFFALSE 17961
// solar_builded := true ;
17953: LD_ADDR_EXP 14
17957: PUSH
17958: LD_INT 1
17960: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17961: LD_VAR 0 1
17965: PPUSH
17966: CALL_OW 255
17970: PUSH
17971: LD_INT 1
17973: EQUAL
17974: PUSH
17975: LD_EXP 29
17979: AND
17980: IFFALSE 18017
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
17982: LD_ADDR_EXP 29
17986: PUSH
17987: LD_EXP 29
17991: PUSH
17992: LD_INT 1750
17994: PUSH
17995: LD_INT 1400
17997: PUSH
17998: LD_INT 1225
18000: PUSH
18001: LD_INT 1050
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: PUSH
18010: LD_OWVAR 67
18014: ARRAY
18015: PLUS
18016: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 255
18026: PUSH
18027: LD_INT 3
18029: EQUAL
18030: IFFALSE 18048
// ru_vehicles := ru_vehicles ^ veh ;
18032: LD_ADDR_EXP 56
18036: PUSH
18037: LD_EXP 56
18041: PUSH
18042: LD_VAR 0 1
18046: ADD
18047: ST_TO_ADDR
// end ;
18048: PPOPN 2
18050: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
18051: LD_VAR 0 1
18055: PUSH
18056: LD_EXP 53
18060: IN
18061: IFFALSE 18079
// ru_patrol := ru_patrol diff un ;
18063: LD_ADDR_EXP 53
18067: PUSH
18068: LD_EXP 53
18072: PUSH
18073: LD_VAR 0 1
18077: DIFF
18078: ST_TO_ADDR
// if un in ru_forest then
18079: LD_VAR 0 1
18083: PUSH
18084: LD_EXP 55
18088: IN
18089: IFFALSE 18107
// ru_forest := ru_forest diff un ;
18091: LD_ADDR_EXP 55
18095: PUSH
18096: LD_EXP 55
18100: PUSH
18101: LD_VAR 0 1
18105: DIFF
18106: ST_TO_ADDR
// if un in ru_vehicles then
18107: LD_VAR 0 1
18111: PUSH
18112: LD_EXP 56
18116: IN
18117: IFFALSE 18223
// begin ru_vehicles := ru_vehicles diff un ;
18119: LD_ADDR_EXP 56
18123: PUSH
18124: LD_EXP 56
18128: PUSH
18129: LD_VAR 0 1
18133: DIFF
18134: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18135: LD_ADDR_EXP 57
18139: PUSH
18140: LD_EXP 57
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 265
18154: PUSH
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 262
18164: PUSH
18165: LD_VAR 0 1
18169: PPUSH
18170: CALL_OW 263
18174: PUSH
18175: LD_VAR 0 1
18179: PPUSH
18180: CALL_OW 264
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: ADD
18191: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18192: LD_ADDR_EXP 13
18196: PUSH
18197: LD_EXP 13
18201: PUSH
18202: LD_INT 1
18204: PLUS
18205: ST_TO_ADDR
// if ach_counter = 10 then
18206: LD_EXP 13
18210: PUSH
18211: LD_INT 10
18213: EQUAL
18214: IFFALSE 18223
// SetAchievement ( ACH_FAUST ) ;
18216: LD_STRING ACH_FAUST
18218: PPUSH
18219: CALL_OW 543
// end ; if un = Pokryshkin then
18223: LD_VAR 0 1
18227: PUSH
18228: LD_EXP 52
18232: EQUAL
18233: IFFALSE 18242
// SetAchievement ( ACH_POKR ) ;
18235: LD_STRING ACH_POKR
18237: PPUSH
18238: CALL_OW 543
// if un = JMM then
18242: LD_VAR 0 1
18246: PUSH
18247: LD_EXP 37
18251: EQUAL
18252: IFFALSE 18261
// YouLost ( 0 ) ;
18254: LD_STRING 0
18256: PPUSH
18257: CALL_OW 104
// if un = us_dep_west then
18261: LD_VAR 0 1
18265: PUSH
18266: LD_INT 1
18268: EQUAL
18269: IFFALSE 18278
// YouLost ( 2 ) ;
18271: LD_STRING 2
18273: PPUSH
18274: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18278: LD_VAR 0 1
18282: PPUSH
18283: CALL_OW 255
18287: PUSH
18288: LD_INT 8
18290: EQUAL
18291: PUSH
18292: LD_EXP 5
18296: NOT
18297: AND
18298: IFFALSE 18307
// YouLost ( 4 ) ;
18300: LD_STRING 4
18302: PPUSH
18303: CALL_OW 104
// if un in jmm_units then
18307: LD_VAR 0 1
18311: PUSH
18312: LD_EXP 4
18316: IN
18317: IFFALSE 18333
// lose_counter := lose_counter + 1 ;
18319: LD_ADDR_EXP 34
18323: PUSH
18324: LD_EXP 34
18328: PUSH
18329: LD_INT 1
18331: PLUS
18332: ST_TO_ADDR
// end ;
18333: PPOPN 1
18335: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18336: LD_INT 0
18338: PPUSH
18339: PPUSH
// begin if GetSide ( driver ) = 3 then
18340: LD_VAR 0 1
18344: PPUSH
18345: CALL_OW 255
18349: PUSH
18350: LD_INT 3
18352: EQUAL
18353: IFFALSE 18431
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18355: LD_ADDR_VAR 0 6
18359: PUSH
18360: LD_INT 22
18362: PUSH
18363: LD_INT 3
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 30
18372: PUSH
18373: LD_INT 3
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PPUSH
18384: CALL_OW 69
18388: PPUSH
18389: CALL 1007 0 1
18393: ST_TO_ADDR
// if place then
18394: LD_VAR 0 6
18398: IFFALSE 18416
// ComEnterUnit ( driver , place ) else
18400: LD_VAR 0 1
18404: PPUSH
18405: LD_VAR 0 6
18409: PPUSH
18410: CALL_OW 120
18414: GO 18431
// ComMoveXY ( driver , 70 , 22 ) ;
18416: LD_VAR 0 1
18420: PPUSH
18421: LD_INT 70
18423: PPUSH
18424: LD_INT 22
18426: PPUSH
18427: CALL_OW 111
// end ; end ;
18431: PPOPN 6
18433: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18434: LD_VAR 0 1
18438: PUSH
18439: LD_INT 1
18441: EQUAL
18442: PUSH
18443: LD_VAR 0 2
18447: PUSH
18448: LD_INT 4
18450: EQUAL
18451: PUSH
18452: LD_VAR 0 2
18456: PUSH
18457: LD_INT 8
18459: EQUAL
18460: PUSH
18461: LD_EXP 5
18465: NOT
18466: AND
18467: OR
18468: AND
18469: IFFALSE 18478
// YouLost ( 5 ) ;
18471: LD_STRING 5
18473: PPUSH
18474: CALL_OW 104
// end ;
18478: PPOPN 2
18480: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18481: LD_EXP 36
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_INT 1
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 21
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: PUSH
18515: LD_INT 22
18517: PUSH
18518: LD_INT 8
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 21
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PPUSH
18539: CALL_OW 69
18543: ADD
18544: PLUS
18545: PUSH
18546: LD_INT 5
18548: LESS
18549: IFFALSE 18561
18551: GO 18553
18553: DISABLE
// YouLost ( 1 ) ;
18554: LD_STRING 1
18556: PPUSH
18557: CALL_OW 104
18561: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18562: LD_INT 1
18564: PPUSH
18565: CALL_OW 255
18569: PUSH
18570: LD_INT 3
18572: EQUAL
18573: IFFALSE 18585
18575: GO 18577
18577: DISABLE
// YouLost ( 3 ) ; end_of_file
18578: LD_STRING 3
18580: PPUSH
18581: CALL_OW 104
18585: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18586: LD_INT 0
18588: PPUSH
// ar_miner := 81 ;
18589: LD_ADDR_EXP 69
18593: PUSH
18594: LD_INT 81
18596: ST_TO_ADDR
// ar_crane := 88 ;
18597: LD_ADDR_EXP 68
18601: PUSH
18602: LD_INT 88
18604: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18605: LD_ADDR_EXP 63
18609: PUSH
18610: LD_INT 89
18612: ST_TO_ADDR
// us_hack := 99 ;
18613: LD_ADDR_EXP 64
18617: PUSH
18618: LD_INT 99
18620: ST_TO_ADDR
// us_artillery := 97 ;
18621: LD_ADDR_EXP 65
18625: PUSH
18626: LD_INT 97
18628: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18629: LD_ADDR_EXP 66
18633: PUSH
18634: LD_INT 91
18636: ST_TO_ADDR
// ar_mortar := 92 ;
18637: LD_ADDR_EXP 67
18641: PUSH
18642: LD_INT 92
18644: ST_TO_ADDR
// ru_radar := 98 ;
18645: LD_ADDR_EXP 62
18649: PUSH
18650: LD_INT 98
18652: ST_TO_ADDR
// tech_Artillery := 80 ;
18653: LD_ADDR_EXP 70
18657: PUSH
18658: LD_INT 80
18660: ST_TO_ADDR
// tech_RadMat := 81 ;
18661: LD_ADDR_EXP 71
18665: PUSH
18666: LD_INT 81
18668: ST_TO_ADDR
// tech_BasicTools := 82 ;
18669: LD_ADDR_EXP 72
18673: PUSH
18674: LD_INT 82
18676: ST_TO_ADDR
// tech_Cargo := 83 ;
18677: LD_ADDR_EXP 73
18681: PUSH
18682: LD_INT 83
18684: ST_TO_ADDR
// tech_Track := 84 ;
18685: LD_ADDR_EXP 74
18689: PUSH
18690: LD_INT 84
18692: ST_TO_ADDR
// tech_Crane := 85 ;
18693: LD_ADDR_EXP 75
18697: PUSH
18698: LD_INT 85
18700: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18701: LD_ADDR_EXP 76
18705: PUSH
18706: LD_INT 86
18708: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18709: LD_ADDR_EXP 77
18713: PUSH
18714: LD_INT 87
18716: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18717: LD_ADDR_EXP 78
18721: PUSH
18722: LD_INT 88
18724: ST_TO_ADDR
// class_mastodont := 31 ;
18725: LD_ADDR_EXP 79
18729: PUSH
18730: LD_INT 31
18732: ST_TO_ADDR
// class_horse := 21 ;
18733: LD_ADDR_EXP 80
18737: PUSH
18738: LD_INT 21
18740: ST_TO_ADDR
// end ;
18741: LD_VAR 0 1
18745: RET
// every 1 do
18746: GO 18748
18748: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18749: CALL 18586 0 0
18753: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18754: LD_INT 0
18756: PPUSH
// if p2 = 100 then
18757: LD_VAR 0 2
18761: PUSH
18762: LD_INT 100
18764: EQUAL
18765: IFFALSE 19768
// begin if not StreamModeActive then
18767: LD_EXP 81
18771: NOT
18772: IFFALSE 18782
// StreamModeActive := true ;
18774: LD_ADDR_EXP 81
18778: PUSH
18779: LD_INT 1
18781: ST_TO_ADDR
// if p3 = 0 then
18782: LD_VAR 0 3
18786: PUSH
18787: LD_INT 0
18789: EQUAL
18790: IFFALSE 18796
// InitStreamMode ;
18792: CALL 19928 0 0
// if p3 = 1 then
18796: LD_VAR 0 3
18800: PUSH
18801: LD_INT 1
18803: EQUAL
18804: IFFALSE 18814
// sRocket := true ;
18806: LD_ADDR_EXP 86
18810: PUSH
18811: LD_INT 1
18813: ST_TO_ADDR
// if p3 = 2 then
18814: LD_VAR 0 3
18818: PUSH
18819: LD_INT 2
18821: EQUAL
18822: IFFALSE 18832
// sSpeed := true ;
18824: LD_ADDR_EXP 85
18828: PUSH
18829: LD_INT 1
18831: ST_TO_ADDR
// if p3 = 3 then
18832: LD_VAR 0 3
18836: PUSH
18837: LD_INT 3
18839: EQUAL
18840: IFFALSE 18850
// sEngine := true ;
18842: LD_ADDR_EXP 87
18846: PUSH
18847: LD_INT 1
18849: ST_TO_ADDR
// if p3 = 4 then
18850: LD_VAR 0 3
18854: PUSH
18855: LD_INT 4
18857: EQUAL
18858: IFFALSE 18868
// sSpec := true ;
18860: LD_ADDR_EXP 84
18864: PUSH
18865: LD_INT 1
18867: ST_TO_ADDR
// if p3 = 5 then
18868: LD_VAR 0 3
18872: PUSH
18873: LD_INT 5
18875: EQUAL
18876: IFFALSE 18886
// sLevel := true ;
18878: LD_ADDR_EXP 88
18882: PUSH
18883: LD_INT 1
18885: ST_TO_ADDR
// if p3 = 6 then
18886: LD_VAR 0 3
18890: PUSH
18891: LD_INT 6
18893: EQUAL
18894: IFFALSE 18904
// sArmoury := true ;
18896: LD_ADDR_EXP 89
18900: PUSH
18901: LD_INT 1
18903: ST_TO_ADDR
// if p3 = 7 then
18904: LD_VAR 0 3
18908: PUSH
18909: LD_INT 7
18911: EQUAL
18912: IFFALSE 18922
// sRadar := true ;
18914: LD_ADDR_EXP 90
18918: PUSH
18919: LD_INT 1
18921: ST_TO_ADDR
// if p3 = 8 then
18922: LD_VAR 0 3
18926: PUSH
18927: LD_INT 8
18929: EQUAL
18930: IFFALSE 18940
// sBunker := true ;
18932: LD_ADDR_EXP 91
18936: PUSH
18937: LD_INT 1
18939: ST_TO_ADDR
// if p3 = 9 then
18940: LD_VAR 0 3
18944: PUSH
18945: LD_INT 9
18947: EQUAL
18948: IFFALSE 18958
// sHack := true ;
18950: LD_ADDR_EXP 92
18954: PUSH
18955: LD_INT 1
18957: ST_TO_ADDR
// if p3 = 10 then
18958: LD_VAR 0 3
18962: PUSH
18963: LD_INT 10
18965: EQUAL
18966: IFFALSE 18976
// sFire := true ;
18968: LD_ADDR_EXP 93
18972: PUSH
18973: LD_INT 1
18975: ST_TO_ADDR
// if p3 = 11 then
18976: LD_VAR 0 3
18980: PUSH
18981: LD_INT 11
18983: EQUAL
18984: IFFALSE 18994
// sRefresh := true ;
18986: LD_ADDR_EXP 94
18990: PUSH
18991: LD_INT 1
18993: ST_TO_ADDR
// if p3 = 12 then
18994: LD_VAR 0 3
18998: PUSH
18999: LD_INT 12
19001: EQUAL
19002: IFFALSE 19012
// sExp := true ;
19004: LD_ADDR_EXP 95
19008: PUSH
19009: LD_INT 1
19011: ST_TO_ADDR
// if p3 = 13 then
19012: LD_VAR 0 3
19016: PUSH
19017: LD_INT 13
19019: EQUAL
19020: IFFALSE 19030
// sDepot := true ;
19022: LD_ADDR_EXP 96
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if p3 = 14 then
19030: LD_VAR 0 3
19034: PUSH
19035: LD_INT 14
19037: EQUAL
19038: IFFALSE 19048
// sFlag := true ;
19040: LD_ADDR_EXP 97
19044: PUSH
19045: LD_INT 1
19047: ST_TO_ADDR
// if p3 = 15 then
19048: LD_VAR 0 3
19052: PUSH
19053: LD_INT 15
19055: EQUAL
19056: IFFALSE 19066
// sKamikadze := true ;
19058: LD_ADDR_EXP 105
19062: PUSH
19063: LD_INT 1
19065: ST_TO_ADDR
// if p3 = 16 then
19066: LD_VAR 0 3
19070: PUSH
19071: LD_INT 16
19073: EQUAL
19074: IFFALSE 19084
// sTroll := true ;
19076: LD_ADDR_EXP 106
19080: PUSH
19081: LD_INT 1
19083: ST_TO_ADDR
// if p3 = 17 then
19084: LD_VAR 0 3
19088: PUSH
19089: LD_INT 17
19091: EQUAL
19092: IFFALSE 19102
// sSlow := true ;
19094: LD_ADDR_EXP 107
19098: PUSH
19099: LD_INT 1
19101: ST_TO_ADDR
// if p3 = 18 then
19102: LD_VAR 0 3
19106: PUSH
19107: LD_INT 18
19109: EQUAL
19110: IFFALSE 19120
// sLack := true ;
19112: LD_ADDR_EXP 108
19116: PUSH
19117: LD_INT 1
19119: ST_TO_ADDR
// if p3 = 19 then
19120: LD_VAR 0 3
19124: PUSH
19125: LD_INT 19
19127: EQUAL
19128: IFFALSE 19138
// sTank := true ;
19130: LD_ADDR_EXP 110
19134: PUSH
19135: LD_INT 1
19137: ST_TO_ADDR
// if p3 = 20 then
19138: LD_VAR 0 3
19142: PUSH
19143: LD_INT 20
19145: EQUAL
19146: IFFALSE 19156
// sRemote := true ;
19148: LD_ADDR_EXP 111
19152: PUSH
19153: LD_INT 1
19155: ST_TO_ADDR
// if p3 = 21 then
19156: LD_VAR 0 3
19160: PUSH
19161: LD_INT 21
19163: EQUAL
19164: IFFALSE 19174
// sPowell := true ;
19166: LD_ADDR_EXP 112
19170: PUSH
19171: LD_INT 1
19173: ST_TO_ADDR
// if p3 = 22 then
19174: LD_VAR 0 3
19178: PUSH
19179: LD_INT 22
19181: EQUAL
19182: IFFALSE 19192
// sTeleport := true ;
19184: LD_ADDR_EXP 115
19188: PUSH
19189: LD_INT 1
19191: ST_TO_ADDR
// if p3 = 23 then
19192: LD_VAR 0 3
19196: PUSH
19197: LD_INT 23
19199: EQUAL
19200: IFFALSE 19210
// sOilTower := true ;
19202: LD_ADDR_EXP 117
19206: PUSH
19207: LD_INT 1
19209: ST_TO_ADDR
// if p3 = 24 then
19210: LD_VAR 0 3
19214: PUSH
19215: LD_INT 24
19217: EQUAL
19218: IFFALSE 19228
// sShovel := true ;
19220: LD_ADDR_EXP 118
19224: PUSH
19225: LD_INT 1
19227: ST_TO_ADDR
// if p3 = 25 then
19228: LD_VAR 0 3
19232: PUSH
19233: LD_INT 25
19235: EQUAL
19236: IFFALSE 19246
// sSheik := true ;
19238: LD_ADDR_EXP 119
19242: PUSH
19243: LD_INT 1
19245: ST_TO_ADDR
// if p3 = 26 then
19246: LD_VAR 0 3
19250: PUSH
19251: LD_INT 26
19253: EQUAL
19254: IFFALSE 19264
// sEarthquake := true ;
19256: LD_ADDR_EXP 121
19260: PUSH
19261: LD_INT 1
19263: ST_TO_ADDR
// if p3 = 27 then
19264: LD_VAR 0 3
19268: PUSH
19269: LD_INT 27
19271: EQUAL
19272: IFFALSE 19282
// sAI := true ;
19274: LD_ADDR_EXP 122
19278: PUSH
19279: LD_INT 1
19281: ST_TO_ADDR
// if p3 = 28 then
19282: LD_VAR 0 3
19286: PUSH
19287: LD_INT 28
19289: EQUAL
19290: IFFALSE 19300
// sCargo := true ;
19292: LD_ADDR_EXP 125
19296: PUSH
19297: LD_INT 1
19299: ST_TO_ADDR
// if p3 = 29 then
19300: LD_VAR 0 3
19304: PUSH
19305: LD_INT 29
19307: EQUAL
19308: IFFALSE 19318
// sDLaser := true ;
19310: LD_ADDR_EXP 126
19314: PUSH
19315: LD_INT 1
19317: ST_TO_ADDR
// if p3 = 30 then
19318: LD_VAR 0 3
19322: PUSH
19323: LD_INT 30
19325: EQUAL
19326: IFFALSE 19336
// sExchange := true ;
19328: LD_ADDR_EXP 127
19332: PUSH
19333: LD_INT 1
19335: ST_TO_ADDR
// if p3 = 31 then
19336: LD_VAR 0 3
19340: PUSH
19341: LD_INT 31
19343: EQUAL
19344: IFFALSE 19354
// sFac := true ;
19346: LD_ADDR_EXP 128
19350: PUSH
19351: LD_INT 1
19353: ST_TO_ADDR
// if p3 = 32 then
19354: LD_VAR 0 3
19358: PUSH
19359: LD_INT 32
19361: EQUAL
19362: IFFALSE 19372
// sPower := true ;
19364: LD_ADDR_EXP 129
19368: PUSH
19369: LD_INT 1
19371: ST_TO_ADDR
// if p3 = 33 then
19372: LD_VAR 0 3
19376: PUSH
19377: LD_INT 33
19379: EQUAL
19380: IFFALSE 19390
// sRandom := true ;
19382: LD_ADDR_EXP 130
19386: PUSH
19387: LD_INT 1
19389: ST_TO_ADDR
// if p3 = 34 then
19390: LD_VAR 0 3
19394: PUSH
19395: LD_INT 34
19397: EQUAL
19398: IFFALSE 19408
// sShield := true ;
19400: LD_ADDR_EXP 131
19404: PUSH
19405: LD_INT 1
19407: ST_TO_ADDR
// if p3 = 35 then
19408: LD_VAR 0 3
19412: PUSH
19413: LD_INT 35
19415: EQUAL
19416: IFFALSE 19426
// sTime := true ;
19418: LD_ADDR_EXP 132
19422: PUSH
19423: LD_INT 1
19425: ST_TO_ADDR
// if p3 = 36 then
19426: LD_VAR 0 3
19430: PUSH
19431: LD_INT 36
19433: EQUAL
19434: IFFALSE 19444
// sTools := true ;
19436: LD_ADDR_EXP 133
19440: PUSH
19441: LD_INT 1
19443: ST_TO_ADDR
// if p3 = 101 then
19444: LD_VAR 0 3
19448: PUSH
19449: LD_INT 101
19451: EQUAL
19452: IFFALSE 19462
// sSold := true ;
19454: LD_ADDR_EXP 98
19458: PUSH
19459: LD_INT 1
19461: ST_TO_ADDR
// if p3 = 102 then
19462: LD_VAR 0 3
19466: PUSH
19467: LD_INT 102
19469: EQUAL
19470: IFFALSE 19480
// sDiff := true ;
19472: LD_ADDR_EXP 99
19476: PUSH
19477: LD_INT 1
19479: ST_TO_ADDR
// if p3 = 103 then
19480: LD_VAR 0 3
19484: PUSH
19485: LD_INT 103
19487: EQUAL
19488: IFFALSE 19498
// sFog := true ;
19490: LD_ADDR_EXP 102
19494: PUSH
19495: LD_INT 1
19497: ST_TO_ADDR
// if p3 = 104 then
19498: LD_VAR 0 3
19502: PUSH
19503: LD_INT 104
19505: EQUAL
19506: IFFALSE 19516
// sReset := true ;
19508: LD_ADDR_EXP 103
19512: PUSH
19513: LD_INT 1
19515: ST_TO_ADDR
// if p3 = 105 then
19516: LD_VAR 0 3
19520: PUSH
19521: LD_INT 105
19523: EQUAL
19524: IFFALSE 19534
// sSun := true ;
19526: LD_ADDR_EXP 104
19530: PUSH
19531: LD_INT 1
19533: ST_TO_ADDR
// if p3 = 106 then
19534: LD_VAR 0 3
19538: PUSH
19539: LD_INT 106
19541: EQUAL
19542: IFFALSE 19552
// sTiger := true ;
19544: LD_ADDR_EXP 100
19548: PUSH
19549: LD_INT 1
19551: ST_TO_ADDR
// if p3 = 107 then
19552: LD_VAR 0 3
19556: PUSH
19557: LD_INT 107
19559: EQUAL
19560: IFFALSE 19570
// sBomb := true ;
19562: LD_ADDR_EXP 101
19566: PUSH
19567: LD_INT 1
19569: ST_TO_ADDR
// if p3 = 108 then
19570: LD_VAR 0 3
19574: PUSH
19575: LD_INT 108
19577: EQUAL
19578: IFFALSE 19588
// sWound := true ;
19580: LD_ADDR_EXP 109
19584: PUSH
19585: LD_INT 1
19587: ST_TO_ADDR
// if p3 = 109 then
19588: LD_VAR 0 3
19592: PUSH
19593: LD_INT 109
19595: EQUAL
19596: IFFALSE 19606
// sBetray := true ;
19598: LD_ADDR_EXP 113
19602: PUSH
19603: LD_INT 1
19605: ST_TO_ADDR
// if p3 = 110 then
19606: LD_VAR 0 3
19610: PUSH
19611: LD_INT 110
19613: EQUAL
19614: IFFALSE 19624
// sContamin := true ;
19616: LD_ADDR_EXP 114
19620: PUSH
19621: LD_INT 1
19623: ST_TO_ADDR
// if p3 = 111 then
19624: LD_VAR 0 3
19628: PUSH
19629: LD_INT 111
19631: EQUAL
19632: IFFALSE 19642
// sOil := true ;
19634: LD_ADDR_EXP 116
19638: PUSH
19639: LD_INT 1
19641: ST_TO_ADDR
// if p3 = 112 then
19642: LD_VAR 0 3
19646: PUSH
19647: LD_INT 112
19649: EQUAL
19650: IFFALSE 19660
// sStu := true ;
19652: LD_ADDR_EXP 120
19656: PUSH
19657: LD_INT 1
19659: ST_TO_ADDR
// if p3 = 113 then
19660: LD_VAR 0 3
19664: PUSH
19665: LD_INT 113
19667: EQUAL
19668: IFFALSE 19678
// sBazooka := true ;
19670: LD_ADDR_EXP 123
19674: PUSH
19675: LD_INT 1
19677: ST_TO_ADDR
// if p3 = 114 then
19678: LD_VAR 0 3
19682: PUSH
19683: LD_INT 114
19685: EQUAL
19686: IFFALSE 19696
// sMortar := true ;
19688: LD_ADDR_EXP 124
19692: PUSH
19693: LD_INT 1
19695: ST_TO_ADDR
// if p3 = 115 then
19696: LD_VAR 0 3
19700: PUSH
19701: LD_INT 115
19703: EQUAL
19704: IFFALSE 19714
// sRanger := true ;
19706: LD_ADDR_EXP 134
19710: PUSH
19711: LD_INT 1
19713: ST_TO_ADDR
// if p3 = 116 then
19714: LD_VAR 0 3
19718: PUSH
19719: LD_INT 116
19721: EQUAL
19722: IFFALSE 19732
// sComputer := true ;
19724: LD_ADDR_EXP 135
19728: PUSH
19729: LD_INT 1
19731: ST_TO_ADDR
// if p3 = 117 then
19732: LD_VAR 0 3
19736: PUSH
19737: LD_INT 117
19739: EQUAL
19740: IFFALSE 19750
// s30 := true ;
19742: LD_ADDR_EXP 136
19746: PUSH
19747: LD_INT 1
19749: ST_TO_ADDR
// if p3 = 118 then
19750: LD_VAR 0 3
19754: PUSH
19755: LD_INT 118
19757: EQUAL
19758: IFFALSE 19768
// s60 := true ;
19760: LD_ADDR_EXP 137
19764: PUSH
19765: LD_INT 1
19767: ST_TO_ADDR
// end ; if p2 = 101 then
19768: LD_VAR 0 2
19772: PUSH
19773: LD_INT 101
19775: EQUAL
19776: IFFALSE 19904
// begin case p3 of 1 :
19778: LD_VAR 0 3
19782: PUSH
19783: LD_INT 1
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19798
19791: POP
// hHackUnlimitedResources ; 2 :
19792: CALL 31500 0 0
19796: GO 19904
19798: LD_INT 2
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19813
19806: POP
// hHackSetLevel10 ; 3 :
19807: CALL 31633 0 0
19811: GO 19904
19813: LD_INT 3
19815: DOUBLE
19816: EQUAL
19817: IFTRUE 19821
19819: GO 19828
19821: POP
// hHackSetLevel10YourUnits ; 4 :
19822: CALL 31718 0 0
19826: GO 19904
19828: LD_INT 4
19830: DOUBLE
19831: EQUAL
19832: IFTRUE 19836
19834: GO 19843
19836: POP
// hHackInvincible ; 5 :
19837: CALL 32166 0 0
19841: GO 19904
19843: LD_INT 5
19845: DOUBLE
19846: EQUAL
19847: IFTRUE 19851
19849: GO 19858
19851: POP
// hHackInvisible ; 6 :
19852: CALL 32277 0 0
19856: GO 19904
19858: LD_INT 6
19860: DOUBLE
19861: EQUAL
19862: IFTRUE 19866
19864: GO 19873
19866: POP
// hHackChangeYourSide ; 7 :
19867: CALL 32334 0 0
19871: GO 19904
19873: LD_INT 7
19875: DOUBLE
19876: EQUAL
19877: IFTRUE 19881
19879: GO 19888
19881: POP
// hHackChangeUnitSide ; 8 :
19882: CALL 32376 0 0
19886: GO 19904
19888: LD_INT 8
19890: DOUBLE
19891: EQUAL
19892: IFTRUE 19896
19894: GO 19903
19896: POP
// hHackFog ; end ;
19897: CALL 32477 0 0
19901: GO 19904
19903: POP
// end ; end ;
19904: LD_VAR 0 7
19908: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19909: GO 19911
19911: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19912: LD_STRING initStreamRollete();
19914: PPUSH
19915: CALL_OW 559
// InitStreamMode ;
19919: CALL 19928 0 0
// DefineStreamItems ( ) ;
19923: CALL 20392 0 0
// end ;
19927: END
// function InitStreamMode ; begin
19928: LD_INT 0
19930: PPUSH
// streamModeActive := false ;
19931: LD_ADDR_EXP 81
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
// normalCounter := 36 ;
19939: LD_ADDR_EXP 82
19943: PUSH
19944: LD_INT 36
19946: ST_TO_ADDR
// hardcoreCounter := 16 ;
19947: LD_ADDR_EXP 83
19951: PUSH
19952: LD_INT 16
19954: ST_TO_ADDR
// sRocket := false ;
19955: LD_ADDR_EXP 86
19959: PUSH
19960: LD_INT 0
19962: ST_TO_ADDR
// sSpeed := false ;
19963: LD_ADDR_EXP 85
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// sEngine := false ;
19971: LD_ADDR_EXP 87
19975: PUSH
19976: LD_INT 0
19978: ST_TO_ADDR
// sSpec := false ;
19979: LD_ADDR_EXP 84
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// sLevel := false ;
19987: LD_ADDR_EXP 88
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// sArmoury := false ;
19995: LD_ADDR_EXP 89
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// sRadar := false ;
20003: LD_ADDR_EXP 90
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// sBunker := false ;
20011: LD_ADDR_EXP 91
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// sHack := false ;
20019: LD_ADDR_EXP 92
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// sFire := false ;
20027: LD_ADDR_EXP 93
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// sRefresh := false ;
20035: LD_ADDR_EXP 94
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// sExp := false ;
20043: LD_ADDR_EXP 95
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// sDepot := false ;
20051: LD_ADDR_EXP 96
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// sFlag := false ;
20059: LD_ADDR_EXP 97
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// sKamikadze := false ;
20067: LD_ADDR_EXP 105
20071: PUSH
20072: LD_INT 0
20074: ST_TO_ADDR
// sTroll := false ;
20075: LD_ADDR_EXP 106
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// sSlow := false ;
20083: LD_ADDR_EXP 107
20087: PUSH
20088: LD_INT 0
20090: ST_TO_ADDR
// sLack := false ;
20091: LD_ADDR_EXP 108
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// sTank := false ;
20099: LD_ADDR_EXP 110
20103: PUSH
20104: LD_INT 0
20106: ST_TO_ADDR
// sRemote := false ;
20107: LD_ADDR_EXP 111
20111: PUSH
20112: LD_INT 0
20114: ST_TO_ADDR
// sPowell := false ;
20115: LD_ADDR_EXP 112
20119: PUSH
20120: LD_INT 0
20122: ST_TO_ADDR
// sTeleport := false ;
20123: LD_ADDR_EXP 115
20127: PUSH
20128: LD_INT 0
20130: ST_TO_ADDR
// sOilTower := false ;
20131: LD_ADDR_EXP 117
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
// sShovel := false ;
20139: LD_ADDR_EXP 118
20143: PUSH
20144: LD_INT 0
20146: ST_TO_ADDR
// sSheik := false ;
20147: LD_ADDR_EXP 119
20151: PUSH
20152: LD_INT 0
20154: ST_TO_ADDR
// sEarthquake := false ;
20155: LD_ADDR_EXP 121
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
// sAI := false ;
20163: LD_ADDR_EXP 122
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// sCargo := false ;
20171: LD_ADDR_EXP 125
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// sDLaser := false ;
20179: LD_ADDR_EXP 126
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// sExchange := false ;
20187: LD_ADDR_EXP 127
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// sFac := false ;
20195: LD_ADDR_EXP 128
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// sPower := false ;
20203: LD_ADDR_EXP 129
20207: PUSH
20208: LD_INT 0
20210: ST_TO_ADDR
// sRandom := false ;
20211: LD_ADDR_EXP 130
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// sShield := false ;
20219: LD_ADDR_EXP 131
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
// sTime := false ;
20227: LD_ADDR_EXP 132
20231: PUSH
20232: LD_INT 0
20234: ST_TO_ADDR
// sTools := false ;
20235: LD_ADDR_EXP 133
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// sSold := false ;
20243: LD_ADDR_EXP 98
20247: PUSH
20248: LD_INT 0
20250: ST_TO_ADDR
// sDiff := false ;
20251: LD_ADDR_EXP 99
20255: PUSH
20256: LD_INT 0
20258: ST_TO_ADDR
// sFog := false ;
20259: LD_ADDR_EXP 102
20263: PUSH
20264: LD_INT 0
20266: ST_TO_ADDR
// sReset := false ;
20267: LD_ADDR_EXP 103
20271: PUSH
20272: LD_INT 0
20274: ST_TO_ADDR
// sSun := false ;
20275: LD_ADDR_EXP 104
20279: PUSH
20280: LD_INT 0
20282: ST_TO_ADDR
// sTiger := false ;
20283: LD_ADDR_EXP 100
20287: PUSH
20288: LD_INT 0
20290: ST_TO_ADDR
// sBomb := false ;
20291: LD_ADDR_EXP 101
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// sWound := false ;
20299: LD_ADDR_EXP 109
20303: PUSH
20304: LD_INT 0
20306: ST_TO_ADDR
// sBetray := false ;
20307: LD_ADDR_EXP 113
20311: PUSH
20312: LD_INT 0
20314: ST_TO_ADDR
// sContamin := false ;
20315: LD_ADDR_EXP 114
20319: PUSH
20320: LD_INT 0
20322: ST_TO_ADDR
// sOil := false ;
20323: LD_ADDR_EXP 116
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// sStu := false ;
20331: LD_ADDR_EXP 120
20335: PUSH
20336: LD_INT 0
20338: ST_TO_ADDR
// sBazooka := false ;
20339: LD_ADDR_EXP 123
20343: PUSH
20344: LD_INT 0
20346: ST_TO_ADDR
// sMortar := false ;
20347: LD_ADDR_EXP 124
20351: PUSH
20352: LD_INT 0
20354: ST_TO_ADDR
// sRanger := false ;
20355: LD_ADDR_EXP 134
20359: PUSH
20360: LD_INT 0
20362: ST_TO_ADDR
// sComputer := false ;
20363: LD_ADDR_EXP 135
20367: PUSH
20368: LD_INT 0
20370: ST_TO_ADDR
// s30 := false ;
20371: LD_ADDR_EXP 136
20375: PUSH
20376: LD_INT 0
20378: ST_TO_ADDR
// s60 := false ;
20379: LD_ADDR_EXP 137
20383: PUSH
20384: LD_INT 0
20386: ST_TO_ADDR
// end ;
20387: LD_VAR 0 1
20391: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20392: LD_INT 0
20394: PPUSH
20395: PPUSH
20396: PPUSH
20397: PPUSH
20398: PPUSH
// result := [ ] ;
20399: LD_ADDR_VAR 0 1
20403: PUSH
20404: EMPTY
20405: ST_TO_ADDR
// if campaign_id = 1 then
20406: LD_OWVAR 69
20410: PUSH
20411: LD_INT 1
20413: EQUAL
20414: IFFALSE 23580
// begin case mission_number of 1 :
20416: LD_OWVAR 70
20420: PUSH
20421: LD_INT 1
20423: DOUBLE
20424: EQUAL
20425: IFTRUE 20429
20427: GO 20505
20429: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20430: LD_ADDR_VAR 0 1
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 4
20440: PUSH
20441: LD_INT 11
20443: PUSH
20444: LD_INT 12
20446: PUSH
20447: LD_INT 15
20449: PUSH
20450: LD_INT 16
20452: PUSH
20453: LD_INT 22
20455: PUSH
20456: LD_INT 23
20458: PUSH
20459: LD_INT 26
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 101
20475: PUSH
20476: LD_INT 102
20478: PUSH
20479: LD_INT 106
20481: PUSH
20482: LD_INT 116
20484: PUSH
20485: LD_INT 117
20487: PUSH
20488: LD_INT 118
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: ST_TO_ADDR
20503: GO 23578
20505: LD_INT 2
20507: DOUBLE
20508: EQUAL
20509: IFTRUE 20513
20511: GO 20597
20513: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20514: LD_ADDR_VAR 0 1
20518: PUSH
20519: LD_INT 2
20521: PUSH
20522: LD_INT 4
20524: PUSH
20525: LD_INT 11
20527: PUSH
20528: LD_INT 12
20530: PUSH
20531: LD_INT 15
20533: PUSH
20534: LD_INT 16
20536: PUSH
20537: LD_INT 22
20539: PUSH
20540: LD_INT 23
20542: PUSH
20543: LD_INT 26
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 101
20559: PUSH
20560: LD_INT 102
20562: PUSH
20563: LD_INT 105
20565: PUSH
20566: LD_INT 106
20568: PUSH
20569: LD_INT 108
20571: PUSH
20572: LD_INT 116
20574: PUSH
20575: LD_INT 117
20577: PUSH
20578: LD_INT 118
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: ST_TO_ADDR
20595: GO 23578
20597: LD_INT 3
20599: DOUBLE
20600: EQUAL
20601: IFTRUE 20605
20603: GO 20693
20605: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20606: LD_ADDR_VAR 0 1
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: LD_INT 4
20616: PUSH
20617: LD_INT 5
20619: PUSH
20620: LD_INT 11
20622: PUSH
20623: LD_INT 12
20625: PUSH
20626: LD_INT 15
20628: PUSH
20629: LD_INT 16
20631: PUSH
20632: LD_INT 22
20634: PUSH
20635: LD_INT 26
20637: PUSH
20638: LD_INT 36
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 101
20655: PUSH
20656: LD_INT 102
20658: PUSH
20659: LD_INT 105
20661: PUSH
20662: LD_INT 106
20664: PUSH
20665: LD_INT 108
20667: PUSH
20668: LD_INT 116
20670: PUSH
20671: LD_INT 117
20673: PUSH
20674: LD_INT 118
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: ST_TO_ADDR
20691: GO 23578
20693: LD_INT 4
20695: DOUBLE
20696: EQUAL
20697: IFTRUE 20701
20699: GO 20797
20701: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20702: LD_ADDR_VAR 0 1
20706: PUSH
20707: LD_INT 2
20709: PUSH
20710: LD_INT 4
20712: PUSH
20713: LD_INT 5
20715: PUSH
20716: LD_INT 8
20718: PUSH
20719: LD_INT 11
20721: PUSH
20722: LD_INT 12
20724: PUSH
20725: LD_INT 15
20727: PUSH
20728: LD_INT 16
20730: PUSH
20731: LD_INT 22
20733: PUSH
20734: LD_INT 23
20736: PUSH
20737: LD_INT 26
20739: PUSH
20740: LD_INT 36
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 101
20759: PUSH
20760: LD_INT 102
20762: PUSH
20763: LD_INT 105
20765: PUSH
20766: LD_INT 106
20768: PUSH
20769: LD_INT 108
20771: PUSH
20772: LD_INT 116
20774: PUSH
20775: LD_INT 117
20777: PUSH
20778: LD_INT 118
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: ST_TO_ADDR
20795: GO 23578
20797: LD_INT 5
20799: DOUBLE
20800: EQUAL
20801: IFTRUE 20805
20803: GO 20917
20805: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20806: LD_ADDR_VAR 0 1
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: LD_INT 4
20816: PUSH
20817: LD_INT 5
20819: PUSH
20820: LD_INT 6
20822: PUSH
20823: LD_INT 8
20825: PUSH
20826: LD_INT 11
20828: PUSH
20829: LD_INT 12
20831: PUSH
20832: LD_INT 15
20834: PUSH
20835: LD_INT 16
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_INT 23
20843: PUSH
20844: LD_INT 25
20846: PUSH
20847: LD_INT 26
20849: PUSH
20850: LD_INT 36
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 101
20871: PUSH
20872: LD_INT 102
20874: PUSH
20875: LD_INT 105
20877: PUSH
20878: LD_INT 106
20880: PUSH
20881: LD_INT 108
20883: PUSH
20884: LD_INT 109
20886: PUSH
20887: LD_INT 112
20889: PUSH
20890: LD_INT 116
20892: PUSH
20893: LD_INT 117
20895: PUSH
20896: LD_INT 118
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: ST_TO_ADDR
20915: GO 23578
20917: LD_INT 6
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 21057
20925: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20926: LD_ADDR_VAR 0 1
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: LD_INT 4
20936: PUSH
20937: LD_INT 5
20939: PUSH
20940: LD_INT 6
20942: PUSH
20943: LD_INT 8
20945: PUSH
20946: LD_INT 11
20948: PUSH
20949: LD_INT 12
20951: PUSH
20952: LD_INT 15
20954: PUSH
20955: LD_INT 16
20957: PUSH
20958: LD_INT 20
20960: PUSH
20961: LD_INT 21
20963: PUSH
20964: LD_INT 22
20966: PUSH
20967: LD_INT 23
20969: PUSH
20970: LD_INT 25
20972: PUSH
20973: LD_INT 26
20975: PUSH
20976: LD_INT 30
20978: PUSH
20979: LD_INT 31
20981: PUSH
20982: LD_INT 32
20984: PUSH
20985: LD_INT 36
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 101
21011: PUSH
21012: LD_INT 102
21014: PUSH
21015: LD_INT 105
21017: PUSH
21018: LD_INT 106
21020: PUSH
21021: LD_INT 108
21023: PUSH
21024: LD_INT 109
21026: PUSH
21027: LD_INT 112
21029: PUSH
21030: LD_INT 116
21032: PUSH
21033: LD_INT 117
21035: PUSH
21036: LD_INT 118
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: ST_TO_ADDR
21055: GO 23578
21057: LD_INT 7
21059: DOUBLE
21060: EQUAL
21061: IFTRUE 21065
21063: GO 21177
21065: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21066: LD_ADDR_VAR 0 1
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 4
21076: PUSH
21077: LD_INT 5
21079: PUSH
21080: LD_INT 7
21082: PUSH
21083: LD_INT 11
21085: PUSH
21086: LD_INT 12
21088: PUSH
21089: LD_INT 15
21091: PUSH
21092: LD_INT 16
21094: PUSH
21095: LD_INT 20
21097: PUSH
21098: LD_INT 21
21100: PUSH
21101: LD_INT 22
21103: PUSH
21104: LD_INT 23
21106: PUSH
21107: LD_INT 25
21109: PUSH
21110: LD_INT 26
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 101
21131: PUSH
21132: LD_INT 102
21134: PUSH
21135: LD_INT 103
21137: PUSH
21138: LD_INT 105
21140: PUSH
21141: LD_INT 106
21143: PUSH
21144: LD_INT 108
21146: PUSH
21147: LD_INT 112
21149: PUSH
21150: LD_INT 116
21152: PUSH
21153: LD_INT 117
21155: PUSH
21156: LD_INT 118
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: ST_TO_ADDR
21175: GO 23578
21177: LD_INT 8
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21325
21185: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21186: LD_ADDR_VAR 0 1
21190: PUSH
21191: LD_INT 2
21193: PUSH
21194: LD_INT 4
21196: PUSH
21197: LD_INT 5
21199: PUSH
21200: LD_INT 6
21202: PUSH
21203: LD_INT 7
21205: PUSH
21206: LD_INT 8
21208: PUSH
21209: LD_INT 11
21211: PUSH
21212: LD_INT 12
21214: PUSH
21215: LD_INT 15
21217: PUSH
21218: LD_INT 16
21220: PUSH
21221: LD_INT 20
21223: PUSH
21224: LD_INT 21
21226: PUSH
21227: LD_INT 22
21229: PUSH
21230: LD_INT 23
21232: PUSH
21233: LD_INT 25
21235: PUSH
21236: LD_INT 26
21238: PUSH
21239: LD_INT 30
21241: PUSH
21242: LD_INT 31
21244: PUSH
21245: LD_INT 32
21247: PUSH
21248: LD_INT 36
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 101
21275: PUSH
21276: LD_INT 102
21278: PUSH
21279: LD_INT 103
21281: PUSH
21282: LD_INT 105
21284: PUSH
21285: LD_INT 106
21287: PUSH
21288: LD_INT 108
21290: PUSH
21291: LD_INT 109
21293: PUSH
21294: LD_INT 112
21296: PUSH
21297: LD_INT 116
21299: PUSH
21300: LD_INT 117
21302: PUSH
21303: LD_INT 118
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: ST_TO_ADDR
21323: GO 23578
21325: LD_INT 9
21327: DOUBLE
21328: EQUAL
21329: IFTRUE 21333
21331: GO 21481
21333: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21334: LD_ADDR_VAR 0 1
21338: PUSH
21339: LD_INT 2
21341: PUSH
21342: LD_INT 4
21344: PUSH
21345: LD_INT 5
21347: PUSH
21348: LD_INT 6
21350: PUSH
21351: LD_INT 7
21353: PUSH
21354: LD_INT 8
21356: PUSH
21357: LD_INT 11
21359: PUSH
21360: LD_INT 12
21362: PUSH
21363: LD_INT 15
21365: PUSH
21366: LD_INT 16
21368: PUSH
21369: LD_INT 20
21371: PUSH
21372: LD_INT 21
21374: PUSH
21375: LD_INT 22
21377: PUSH
21378: LD_INT 23
21380: PUSH
21381: LD_INT 25
21383: PUSH
21384: LD_INT 26
21386: PUSH
21387: LD_INT 28
21389: PUSH
21390: LD_INT 30
21392: PUSH
21393: LD_INT 31
21395: PUSH
21396: LD_INT 32
21398: PUSH
21399: LD_INT 36
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 101
21427: PUSH
21428: LD_INT 102
21430: PUSH
21431: LD_INT 103
21433: PUSH
21434: LD_INT 105
21436: PUSH
21437: LD_INT 106
21439: PUSH
21440: LD_INT 108
21442: PUSH
21443: LD_INT 109
21445: PUSH
21446: LD_INT 112
21448: PUSH
21449: LD_INT 114
21451: PUSH
21452: LD_INT 116
21454: PUSH
21455: LD_INT 117
21457: PUSH
21458: LD_INT 118
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: ST_TO_ADDR
21479: GO 23578
21481: LD_INT 10
21483: DOUBLE
21484: EQUAL
21485: IFTRUE 21489
21487: GO 21685
21489: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21490: LD_ADDR_VAR 0 1
21494: PUSH
21495: LD_INT 2
21497: PUSH
21498: LD_INT 4
21500: PUSH
21501: LD_INT 5
21503: PUSH
21504: LD_INT 6
21506: PUSH
21507: LD_INT 7
21509: PUSH
21510: LD_INT 8
21512: PUSH
21513: LD_INT 9
21515: PUSH
21516: LD_INT 10
21518: PUSH
21519: LD_INT 11
21521: PUSH
21522: LD_INT 12
21524: PUSH
21525: LD_INT 13
21527: PUSH
21528: LD_INT 14
21530: PUSH
21531: LD_INT 15
21533: PUSH
21534: LD_INT 16
21536: PUSH
21537: LD_INT 17
21539: PUSH
21540: LD_INT 18
21542: PUSH
21543: LD_INT 19
21545: PUSH
21546: LD_INT 20
21548: PUSH
21549: LD_INT 21
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_INT 23
21557: PUSH
21558: LD_INT 24
21560: PUSH
21561: LD_INT 25
21563: PUSH
21564: LD_INT 26
21566: PUSH
21567: LD_INT 28
21569: PUSH
21570: LD_INT 30
21572: PUSH
21573: LD_INT 31
21575: PUSH
21576: LD_INT 32
21578: PUSH
21579: LD_INT 36
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 101
21615: PUSH
21616: LD_INT 102
21618: PUSH
21619: LD_INT 103
21621: PUSH
21622: LD_INT 104
21624: PUSH
21625: LD_INT 105
21627: PUSH
21628: LD_INT 106
21630: PUSH
21631: LD_INT 107
21633: PUSH
21634: LD_INT 108
21636: PUSH
21637: LD_INT 109
21639: PUSH
21640: LD_INT 110
21642: PUSH
21643: LD_INT 111
21645: PUSH
21646: LD_INT 112
21648: PUSH
21649: LD_INT 114
21651: PUSH
21652: LD_INT 116
21654: PUSH
21655: LD_INT 117
21657: PUSH
21658: LD_INT 118
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: ST_TO_ADDR
21683: GO 23578
21685: LD_INT 11
21687: DOUBLE
21688: EQUAL
21689: IFTRUE 21693
21691: GO 21897
21693: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21694: LD_ADDR_VAR 0 1
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: LD_INT 4
21707: PUSH
21708: LD_INT 5
21710: PUSH
21711: LD_INT 6
21713: PUSH
21714: LD_INT 7
21716: PUSH
21717: LD_INT 8
21719: PUSH
21720: LD_INT 9
21722: PUSH
21723: LD_INT 10
21725: PUSH
21726: LD_INT 11
21728: PUSH
21729: LD_INT 12
21731: PUSH
21732: LD_INT 13
21734: PUSH
21735: LD_INT 14
21737: PUSH
21738: LD_INT 15
21740: PUSH
21741: LD_INT 16
21743: PUSH
21744: LD_INT 17
21746: PUSH
21747: LD_INT 18
21749: PUSH
21750: LD_INT 19
21752: PUSH
21753: LD_INT 20
21755: PUSH
21756: LD_INT 21
21758: PUSH
21759: LD_INT 22
21761: PUSH
21762: LD_INT 23
21764: PUSH
21765: LD_INT 24
21767: PUSH
21768: LD_INT 25
21770: PUSH
21771: LD_INT 26
21773: PUSH
21774: LD_INT 28
21776: PUSH
21777: LD_INT 30
21779: PUSH
21780: LD_INT 31
21782: PUSH
21783: LD_INT 32
21785: PUSH
21786: LD_INT 34
21788: PUSH
21789: LD_INT 36
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 101
21827: PUSH
21828: LD_INT 102
21830: PUSH
21831: LD_INT 103
21833: PUSH
21834: LD_INT 104
21836: PUSH
21837: LD_INT 105
21839: PUSH
21840: LD_INT 106
21842: PUSH
21843: LD_INT 107
21845: PUSH
21846: LD_INT 108
21848: PUSH
21849: LD_INT 109
21851: PUSH
21852: LD_INT 110
21854: PUSH
21855: LD_INT 111
21857: PUSH
21858: LD_INT 112
21860: PUSH
21861: LD_INT 114
21863: PUSH
21864: LD_INT 116
21866: PUSH
21867: LD_INT 117
21869: PUSH
21870: LD_INT 118
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: ST_TO_ADDR
21895: GO 23578
21897: LD_INT 12
21899: DOUBLE
21900: EQUAL
21901: IFTRUE 21905
21903: GO 22125
21905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21906: LD_ADDR_VAR 0 1
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: LD_INT 2
21916: PUSH
21917: LD_INT 3
21919: PUSH
21920: LD_INT 4
21922: PUSH
21923: LD_INT 5
21925: PUSH
21926: LD_INT 6
21928: PUSH
21929: LD_INT 7
21931: PUSH
21932: LD_INT 8
21934: PUSH
21935: LD_INT 9
21937: PUSH
21938: LD_INT 10
21940: PUSH
21941: LD_INT 11
21943: PUSH
21944: LD_INT 12
21946: PUSH
21947: LD_INT 13
21949: PUSH
21950: LD_INT 14
21952: PUSH
21953: LD_INT 15
21955: PUSH
21956: LD_INT 16
21958: PUSH
21959: LD_INT 17
21961: PUSH
21962: LD_INT 18
21964: PUSH
21965: LD_INT 19
21967: PUSH
21968: LD_INT 20
21970: PUSH
21971: LD_INT 21
21973: PUSH
21974: LD_INT 22
21976: PUSH
21977: LD_INT 23
21979: PUSH
21980: LD_INT 24
21982: PUSH
21983: LD_INT 25
21985: PUSH
21986: LD_INT 26
21988: PUSH
21989: LD_INT 27
21991: PUSH
21992: LD_INT 28
21994: PUSH
21995: LD_INT 30
21997: PUSH
21998: LD_INT 31
22000: PUSH
22001: LD_INT 32
22003: PUSH
22004: LD_INT 33
22006: PUSH
22007: LD_INT 34
22009: PUSH
22010: LD_INT 36
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 101
22051: PUSH
22052: LD_INT 102
22054: PUSH
22055: LD_INT 103
22057: PUSH
22058: LD_INT 104
22060: PUSH
22061: LD_INT 105
22063: PUSH
22064: LD_INT 106
22066: PUSH
22067: LD_INT 107
22069: PUSH
22070: LD_INT 108
22072: PUSH
22073: LD_INT 109
22075: PUSH
22076: LD_INT 110
22078: PUSH
22079: LD_INT 111
22081: PUSH
22082: LD_INT 112
22084: PUSH
22085: LD_INT 113
22087: PUSH
22088: LD_INT 114
22090: PUSH
22091: LD_INT 116
22093: PUSH
22094: LD_INT 117
22096: PUSH
22097: LD_INT 118
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: ST_TO_ADDR
22123: GO 23578
22125: LD_INT 13
22127: DOUBLE
22128: EQUAL
22129: IFTRUE 22133
22131: GO 22341
22133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22134: LD_ADDR_VAR 0 1
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 3
22147: PUSH
22148: LD_INT 4
22150: PUSH
22151: LD_INT 5
22153: PUSH
22154: LD_INT 8
22156: PUSH
22157: LD_INT 9
22159: PUSH
22160: LD_INT 10
22162: PUSH
22163: LD_INT 11
22165: PUSH
22166: LD_INT 12
22168: PUSH
22169: LD_INT 14
22171: PUSH
22172: LD_INT 15
22174: PUSH
22175: LD_INT 16
22177: PUSH
22178: LD_INT 17
22180: PUSH
22181: LD_INT 18
22183: PUSH
22184: LD_INT 19
22186: PUSH
22187: LD_INT 20
22189: PUSH
22190: LD_INT 21
22192: PUSH
22193: LD_INT 22
22195: PUSH
22196: LD_INT 23
22198: PUSH
22199: LD_INT 24
22201: PUSH
22202: LD_INT 25
22204: PUSH
22205: LD_INT 26
22207: PUSH
22208: LD_INT 27
22210: PUSH
22211: LD_INT 28
22213: PUSH
22214: LD_INT 30
22216: PUSH
22217: LD_INT 31
22219: PUSH
22220: LD_INT 32
22222: PUSH
22223: LD_INT 33
22225: PUSH
22226: LD_INT 34
22228: PUSH
22229: LD_INT 36
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 101
22267: PUSH
22268: LD_INT 102
22270: PUSH
22271: LD_INT 103
22273: PUSH
22274: LD_INT 104
22276: PUSH
22277: LD_INT 105
22279: PUSH
22280: LD_INT 106
22282: PUSH
22283: LD_INT 107
22285: PUSH
22286: LD_INT 108
22288: PUSH
22289: LD_INT 109
22291: PUSH
22292: LD_INT 110
22294: PUSH
22295: LD_INT 111
22297: PUSH
22298: LD_INT 112
22300: PUSH
22301: LD_INT 113
22303: PUSH
22304: LD_INT 114
22306: PUSH
22307: LD_INT 116
22309: PUSH
22310: LD_INT 117
22312: PUSH
22313: LD_INT 118
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: ST_TO_ADDR
22339: GO 23578
22341: LD_INT 14
22343: DOUBLE
22344: EQUAL
22345: IFTRUE 22349
22347: GO 22573
22349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22350: LD_ADDR_VAR 0 1
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: LD_INT 3
22363: PUSH
22364: LD_INT 4
22366: PUSH
22367: LD_INT 5
22369: PUSH
22370: LD_INT 6
22372: PUSH
22373: LD_INT 7
22375: PUSH
22376: LD_INT 8
22378: PUSH
22379: LD_INT 9
22381: PUSH
22382: LD_INT 10
22384: PUSH
22385: LD_INT 11
22387: PUSH
22388: LD_INT 12
22390: PUSH
22391: LD_INT 13
22393: PUSH
22394: LD_INT 14
22396: PUSH
22397: LD_INT 15
22399: PUSH
22400: LD_INT 16
22402: PUSH
22403: LD_INT 17
22405: PUSH
22406: LD_INT 18
22408: PUSH
22409: LD_INT 19
22411: PUSH
22412: LD_INT 20
22414: PUSH
22415: LD_INT 21
22417: PUSH
22418: LD_INT 22
22420: PUSH
22421: LD_INT 23
22423: PUSH
22424: LD_INT 24
22426: PUSH
22427: LD_INT 25
22429: PUSH
22430: LD_INT 26
22432: PUSH
22433: LD_INT 27
22435: PUSH
22436: LD_INT 28
22438: PUSH
22439: LD_INT 29
22441: PUSH
22442: LD_INT 30
22444: PUSH
22445: LD_INT 31
22447: PUSH
22448: LD_INT 32
22450: PUSH
22451: LD_INT 33
22453: PUSH
22454: LD_INT 34
22456: PUSH
22457: LD_INT 36
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 101
22499: PUSH
22500: LD_INT 102
22502: PUSH
22503: LD_INT 103
22505: PUSH
22506: LD_INT 104
22508: PUSH
22509: LD_INT 105
22511: PUSH
22512: LD_INT 106
22514: PUSH
22515: LD_INT 107
22517: PUSH
22518: LD_INT 108
22520: PUSH
22521: LD_INT 109
22523: PUSH
22524: LD_INT 110
22526: PUSH
22527: LD_INT 111
22529: PUSH
22530: LD_INT 112
22532: PUSH
22533: LD_INT 113
22535: PUSH
22536: LD_INT 114
22538: PUSH
22539: LD_INT 116
22541: PUSH
22542: LD_INT 117
22544: PUSH
22545: LD_INT 118
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: ST_TO_ADDR
22571: GO 23578
22573: LD_INT 15
22575: DOUBLE
22576: EQUAL
22577: IFTRUE 22581
22579: GO 22805
22581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22582: LD_ADDR_VAR 0 1
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: LD_INT 3
22595: PUSH
22596: LD_INT 4
22598: PUSH
22599: LD_INT 5
22601: PUSH
22602: LD_INT 6
22604: PUSH
22605: LD_INT 7
22607: PUSH
22608: LD_INT 8
22610: PUSH
22611: LD_INT 9
22613: PUSH
22614: LD_INT 10
22616: PUSH
22617: LD_INT 11
22619: PUSH
22620: LD_INT 12
22622: PUSH
22623: LD_INT 13
22625: PUSH
22626: LD_INT 14
22628: PUSH
22629: LD_INT 15
22631: PUSH
22632: LD_INT 16
22634: PUSH
22635: LD_INT 17
22637: PUSH
22638: LD_INT 18
22640: PUSH
22641: LD_INT 19
22643: PUSH
22644: LD_INT 20
22646: PUSH
22647: LD_INT 21
22649: PUSH
22650: LD_INT 22
22652: PUSH
22653: LD_INT 23
22655: PUSH
22656: LD_INT 24
22658: PUSH
22659: LD_INT 25
22661: PUSH
22662: LD_INT 26
22664: PUSH
22665: LD_INT 27
22667: PUSH
22668: LD_INT 28
22670: PUSH
22671: LD_INT 29
22673: PUSH
22674: LD_INT 30
22676: PUSH
22677: LD_INT 31
22679: PUSH
22680: LD_INT 32
22682: PUSH
22683: LD_INT 33
22685: PUSH
22686: LD_INT 34
22688: PUSH
22689: LD_INT 36
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 101
22731: PUSH
22732: LD_INT 102
22734: PUSH
22735: LD_INT 103
22737: PUSH
22738: LD_INT 104
22740: PUSH
22741: LD_INT 105
22743: PUSH
22744: LD_INT 106
22746: PUSH
22747: LD_INT 107
22749: PUSH
22750: LD_INT 108
22752: PUSH
22753: LD_INT 109
22755: PUSH
22756: LD_INT 110
22758: PUSH
22759: LD_INT 111
22761: PUSH
22762: LD_INT 112
22764: PUSH
22765: LD_INT 113
22767: PUSH
22768: LD_INT 114
22770: PUSH
22771: LD_INT 116
22773: PUSH
22774: LD_INT 117
22776: PUSH
22777: LD_INT 118
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: ST_TO_ADDR
22803: GO 23578
22805: LD_INT 16
22807: DOUBLE
22808: EQUAL
22809: IFTRUE 22813
22811: GO 22949
22813: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22814: LD_ADDR_VAR 0 1
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: LD_INT 4
22824: PUSH
22825: LD_INT 5
22827: PUSH
22828: LD_INT 7
22830: PUSH
22831: LD_INT 11
22833: PUSH
22834: LD_INT 12
22836: PUSH
22837: LD_INT 15
22839: PUSH
22840: LD_INT 16
22842: PUSH
22843: LD_INT 20
22845: PUSH
22846: LD_INT 21
22848: PUSH
22849: LD_INT 22
22851: PUSH
22852: LD_INT 23
22854: PUSH
22855: LD_INT 25
22857: PUSH
22858: LD_INT 26
22860: PUSH
22861: LD_INT 30
22863: PUSH
22864: LD_INT 31
22866: PUSH
22867: LD_INT 32
22869: PUSH
22870: LD_INT 33
22872: PUSH
22873: LD_INT 34
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 101
22899: PUSH
22900: LD_INT 102
22902: PUSH
22903: LD_INT 103
22905: PUSH
22906: LD_INT 106
22908: PUSH
22909: LD_INT 108
22911: PUSH
22912: LD_INT 112
22914: PUSH
22915: LD_INT 113
22917: PUSH
22918: LD_INT 114
22920: PUSH
22921: LD_INT 116
22923: PUSH
22924: LD_INT 117
22926: PUSH
22927: LD_INT 118
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: ST_TO_ADDR
22947: GO 23578
22949: LD_INT 17
22951: DOUBLE
22952: EQUAL
22953: IFTRUE 22957
22955: GO 23181
22957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22958: LD_ADDR_VAR 0 1
22962: PUSH
22963: LD_INT 1
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: LD_INT 4
22974: PUSH
22975: LD_INT 5
22977: PUSH
22978: LD_INT 6
22980: PUSH
22981: LD_INT 7
22983: PUSH
22984: LD_INT 8
22986: PUSH
22987: LD_INT 9
22989: PUSH
22990: LD_INT 10
22992: PUSH
22993: LD_INT 11
22995: PUSH
22996: LD_INT 12
22998: PUSH
22999: LD_INT 13
23001: PUSH
23002: LD_INT 14
23004: PUSH
23005: LD_INT 15
23007: PUSH
23008: LD_INT 16
23010: PUSH
23011: LD_INT 17
23013: PUSH
23014: LD_INT 18
23016: PUSH
23017: LD_INT 19
23019: PUSH
23020: LD_INT 20
23022: PUSH
23023: LD_INT 21
23025: PUSH
23026: LD_INT 22
23028: PUSH
23029: LD_INT 23
23031: PUSH
23032: LD_INT 24
23034: PUSH
23035: LD_INT 25
23037: PUSH
23038: LD_INT 26
23040: PUSH
23041: LD_INT 27
23043: PUSH
23044: LD_INT 28
23046: PUSH
23047: LD_INT 29
23049: PUSH
23050: LD_INT 30
23052: PUSH
23053: LD_INT 31
23055: PUSH
23056: LD_INT 32
23058: PUSH
23059: LD_INT 33
23061: PUSH
23062: LD_INT 34
23064: PUSH
23065: LD_INT 36
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 101
23107: PUSH
23108: LD_INT 102
23110: PUSH
23111: LD_INT 103
23113: PUSH
23114: LD_INT 104
23116: PUSH
23117: LD_INT 105
23119: PUSH
23120: LD_INT 106
23122: PUSH
23123: LD_INT 107
23125: PUSH
23126: LD_INT 108
23128: PUSH
23129: LD_INT 109
23131: PUSH
23132: LD_INT 110
23134: PUSH
23135: LD_INT 111
23137: PUSH
23138: LD_INT 112
23140: PUSH
23141: LD_INT 113
23143: PUSH
23144: LD_INT 114
23146: PUSH
23147: LD_INT 116
23149: PUSH
23150: LD_INT 117
23152: PUSH
23153: LD_INT 118
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: ST_TO_ADDR
23179: GO 23578
23181: LD_INT 18
23183: DOUBLE
23184: EQUAL
23185: IFTRUE 23189
23187: GO 23337
23189: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23190: LD_ADDR_VAR 0 1
23194: PUSH
23195: LD_INT 2
23197: PUSH
23198: LD_INT 4
23200: PUSH
23201: LD_INT 5
23203: PUSH
23204: LD_INT 7
23206: PUSH
23207: LD_INT 11
23209: PUSH
23210: LD_INT 12
23212: PUSH
23213: LD_INT 15
23215: PUSH
23216: LD_INT 16
23218: PUSH
23219: LD_INT 20
23221: PUSH
23222: LD_INT 21
23224: PUSH
23225: LD_INT 22
23227: PUSH
23228: LD_INT 23
23230: PUSH
23231: LD_INT 25
23233: PUSH
23234: LD_INT 26
23236: PUSH
23237: LD_INT 30
23239: PUSH
23240: LD_INT 31
23242: PUSH
23243: LD_INT 32
23245: PUSH
23246: LD_INT 33
23248: PUSH
23249: LD_INT 34
23251: PUSH
23252: LD_INT 35
23254: PUSH
23255: LD_INT 36
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 101
23283: PUSH
23284: LD_INT 102
23286: PUSH
23287: LD_INT 103
23289: PUSH
23290: LD_INT 106
23292: PUSH
23293: LD_INT 108
23295: PUSH
23296: LD_INT 112
23298: PUSH
23299: LD_INT 113
23301: PUSH
23302: LD_INT 114
23304: PUSH
23305: LD_INT 115
23307: PUSH
23308: LD_INT 116
23310: PUSH
23311: LD_INT 117
23313: PUSH
23314: LD_INT 118
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: ST_TO_ADDR
23335: GO 23578
23337: LD_INT 19
23339: DOUBLE
23340: EQUAL
23341: IFTRUE 23345
23343: GO 23577
23345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23346: LD_ADDR_VAR 0 1
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: LD_INT 2
23356: PUSH
23357: LD_INT 3
23359: PUSH
23360: LD_INT 4
23362: PUSH
23363: LD_INT 5
23365: PUSH
23366: LD_INT 6
23368: PUSH
23369: LD_INT 7
23371: PUSH
23372: LD_INT 8
23374: PUSH
23375: LD_INT 9
23377: PUSH
23378: LD_INT 10
23380: PUSH
23381: LD_INT 11
23383: PUSH
23384: LD_INT 12
23386: PUSH
23387: LD_INT 13
23389: PUSH
23390: LD_INT 14
23392: PUSH
23393: LD_INT 15
23395: PUSH
23396: LD_INT 16
23398: PUSH
23399: LD_INT 17
23401: PUSH
23402: LD_INT 18
23404: PUSH
23405: LD_INT 19
23407: PUSH
23408: LD_INT 20
23410: PUSH
23411: LD_INT 21
23413: PUSH
23414: LD_INT 22
23416: PUSH
23417: LD_INT 23
23419: PUSH
23420: LD_INT 24
23422: PUSH
23423: LD_INT 25
23425: PUSH
23426: LD_INT 26
23428: PUSH
23429: LD_INT 27
23431: PUSH
23432: LD_INT 28
23434: PUSH
23435: LD_INT 29
23437: PUSH
23438: LD_INT 30
23440: PUSH
23441: LD_INT 31
23443: PUSH
23444: LD_INT 32
23446: PUSH
23447: LD_INT 33
23449: PUSH
23450: LD_INT 34
23452: PUSH
23453: LD_INT 35
23455: PUSH
23456: LD_INT 36
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 101
23499: PUSH
23500: LD_INT 102
23502: PUSH
23503: LD_INT 103
23505: PUSH
23506: LD_INT 104
23508: PUSH
23509: LD_INT 105
23511: PUSH
23512: LD_INT 106
23514: PUSH
23515: LD_INT 107
23517: PUSH
23518: LD_INT 108
23520: PUSH
23521: LD_INT 109
23523: PUSH
23524: LD_INT 110
23526: PUSH
23527: LD_INT 111
23529: PUSH
23530: LD_INT 112
23532: PUSH
23533: LD_INT 113
23535: PUSH
23536: LD_INT 114
23538: PUSH
23539: LD_INT 115
23541: PUSH
23542: LD_INT 116
23544: PUSH
23545: LD_INT 117
23547: PUSH
23548: LD_INT 118
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: ST_TO_ADDR
23575: GO 23578
23577: POP
// end else
23578: GO 23809
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23580: LD_ADDR_VAR 0 1
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 3
23593: PUSH
23594: LD_INT 4
23596: PUSH
23597: LD_INT 5
23599: PUSH
23600: LD_INT 6
23602: PUSH
23603: LD_INT 7
23605: PUSH
23606: LD_INT 8
23608: PUSH
23609: LD_INT 9
23611: PUSH
23612: LD_INT 10
23614: PUSH
23615: LD_INT 11
23617: PUSH
23618: LD_INT 12
23620: PUSH
23621: LD_INT 13
23623: PUSH
23624: LD_INT 14
23626: PUSH
23627: LD_INT 15
23629: PUSH
23630: LD_INT 16
23632: PUSH
23633: LD_INT 17
23635: PUSH
23636: LD_INT 18
23638: PUSH
23639: LD_INT 19
23641: PUSH
23642: LD_INT 20
23644: PUSH
23645: LD_INT 21
23647: PUSH
23648: LD_INT 22
23650: PUSH
23651: LD_INT 23
23653: PUSH
23654: LD_INT 24
23656: PUSH
23657: LD_INT 25
23659: PUSH
23660: LD_INT 26
23662: PUSH
23663: LD_INT 27
23665: PUSH
23666: LD_INT 28
23668: PUSH
23669: LD_INT 29
23671: PUSH
23672: LD_INT 30
23674: PUSH
23675: LD_INT 31
23677: PUSH
23678: LD_INT 32
23680: PUSH
23681: LD_INT 33
23683: PUSH
23684: LD_INT 34
23686: PUSH
23687: LD_INT 35
23689: PUSH
23690: LD_INT 36
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 101
23733: PUSH
23734: LD_INT 102
23736: PUSH
23737: LD_INT 103
23739: PUSH
23740: LD_INT 104
23742: PUSH
23743: LD_INT 105
23745: PUSH
23746: LD_INT 106
23748: PUSH
23749: LD_INT 107
23751: PUSH
23752: LD_INT 108
23754: PUSH
23755: LD_INT 109
23757: PUSH
23758: LD_INT 110
23760: PUSH
23761: LD_INT 111
23763: PUSH
23764: LD_INT 112
23766: PUSH
23767: LD_INT 113
23769: PUSH
23770: LD_INT 114
23772: PUSH
23773: LD_INT 115
23775: PUSH
23776: LD_INT 116
23778: PUSH
23779: LD_INT 117
23781: PUSH
23782: LD_INT 118
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: ST_TO_ADDR
// if result then
23809: LD_VAR 0 1
23813: IFFALSE 24102
// begin normal :=  ;
23815: LD_ADDR_VAR 0 3
23819: PUSH
23820: LD_STRING 
23822: ST_TO_ADDR
// hardcore :=  ;
23823: LD_ADDR_VAR 0 4
23827: PUSH
23828: LD_STRING 
23830: ST_TO_ADDR
// for i = 1 to normalCounter do
23831: LD_ADDR_VAR 0 5
23835: PUSH
23836: DOUBLE
23837: LD_INT 1
23839: DEC
23840: ST_TO_ADDR
23841: LD_EXP 82
23845: PUSH
23846: FOR_TO
23847: IFFALSE 23948
// begin tmp := 0 ;
23849: LD_ADDR_VAR 0 2
23853: PUSH
23854: LD_STRING 0
23856: ST_TO_ADDR
// if result [ 1 ] then
23857: LD_VAR 0 1
23861: PUSH
23862: LD_INT 1
23864: ARRAY
23865: IFFALSE 23930
// if result [ 1 ] [ 1 ] = i then
23867: LD_VAR 0 1
23871: PUSH
23872: LD_INT 1
23874: ARRAY
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: PUSH
23880: LD_VAR 0 5
23884: EQUAL
23885: IFFALSE 23930
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23887: LD_ADDR_VAR 0 1
23891: PUSH
23892: LD_VAR 0 1
23896: PPUSH
23897: LD_INT 1
23899: PPUSH
23900: LD_VAR 0 1
23904: PUSH
23905: LD_INT 1
23907: ARRAY
23908: PPUSH
23909: LD_INT 1
23911: PPUSH
23912: CALL_OW 3
23916: PPUSH
23917: CALL_OW 1
23921: ST_TO_ADDR
// tmp := 1 ;
23922: LD_ADDR_VAR 0 2
23926: PUSH
23927: LD_STRING 1
23929: ST_TO_ADDR
// end ; normal := normal & tmp ;
23930: LD_ADDR_VAR 0 3
23934: PUSH
23935: LD_VAR 0 3
23939: PUSH
23940: LD_VAR 0 2
23944: STR
23945: ST_TO_ADDR
// end ;
23946: GO 23846
23948: POP
23949: POP
// for i = 1 to hardcoreCounter do
23950: LD_ADDR_VAR 0 5
23954: PUSH
23955: DOUBLE
23956: LD_INT 1
23958: DEC
23959: ST_TO_ADDR
23960: LD_EXP 83
23964: PUSH
23965: FOR_TO
23966: IFFALSE 24071
// begin tmp := 0 ;
23968: LD_ADDR_VAR 0 2
23972: PUSH
23973: LD_STRING 0
23975: ST_TO_ADDR
// if result [ 2 ] then
23976: LD_VAR 0 1
23980: PUSH
23981: LD_INT 2
23983: ARRAY
23984: IFFALSE 24053
// if result [ 2 ] [ 1 ] = 100 + i then
23986: LD_VAR 0 1
23990: PUSH
23991: LD_INT 2
23993: ARRAY
23994: PUSH
23995: LD_INT 1
23997: ARRAY
23998: PUSH
23999: LD_INT 100
24001: PUSH
24002: LD_VAR 0 5
24006: PLUS
24007: EQUAL
24008: IFFALSE 24053
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24010: LD_ADDR_VAR 0 1
24014: PUSH
24015: LD_VAR 0 1
24019: PPUSH
24020: LD_INT 2
24022: PPUSH
24023: LD_VAR 0 1
24027: PUSH
24028: LD_INT 2
24030: ARRAY
24031: PPUSH
24032: LD_INT 1
24034: PPUSH
24035: CALL_OW 3
24039: PPUSH
24040: CALL_OW 1
24044: ST_TO_ADDR
// tmp := 1 ;
24045: LD_ADDR_VAR 0 2
24049: PUSH
24050: LD_STRING 1
24052: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24053: LD_ADDR_VAR 0 4
24057: PUSH
24058: LD_VAR 0 4
24062: PUSH
24063: LD_VAR 0 2
24067: STR
24068: ST_TO_ADDR
// end ;
24069: GO 23965
24071: POP
24072: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24073: LD_STRING getStreamItemsFromMission("
24075: PUSH
24076: LD_VAR 0 3
24080: STR
24081: PUSH
24082: LD_STRING ","
24084: STR
24085: PUSH
24086: LD_VAR 0 4
24090: STR
24091: PUSH
24092: LD_STRING ")
24094: STR
24095: PPUSH
24096: CALL_OW 559
// end else
24100: GO 24109
// ToLua ( getStreamItemsFromMission("","") ) ;
24102: LD_STRING getStreamItemsFromMission("","")
24104: PPUSH
24105: CALL_OW 559
// end ;
24109: LD_VAR 0 1
24113: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24114: LD_EXP 81
24118: PUSH
24119: LD_EXP 86
24123: AND
24124: IFFALSE 24248
24126: GO 24128
24128: DISABLE
24129: LD_INT 0
24131: PPUSH
24132: PPUSH
// begin enable ;
24133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24134: LD_ADDR_VAR 0 2
24138: PUSH
24139: LD_INT 22
24141: PUSH
24142: LD_OWVAR 2
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: LD_INT 34
24156: PUSH
24157: LD_INT 7
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 34
24166: PUSH
24167: LD_INT 45
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 34
24176: PUSH
24177: LD_INT 28
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 34
24186: PUSH
24187: LD_INT 47
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PPUSH
24205: CALL_OW 69
24209: ST_TO_ADDR
// if not tmp then
24210: LD_VAR 0 2
24214: NOT
24215: IFFALSE 24219
// exit ;
24217: GO 24248
// for i in tmp do
24219: LD_ADDR_VAR 0 1
24223: PUSH
24224: LD_VAR 0 2
24228: PUSH
24229: FOR_IN
24230: IFFALSE 24246
// begin SetLives ( i , 0 ) ;
24232: LD_VAR 0 1
24236: PPUSH
24237: LD_INT 0
24239: PPUSH
24240: CALL_OW 234
// end ;
24244: GO 24229
24246: POP
24247: POP
// end ;
24248: PPOPN 2
24250: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24251: LD_EXP 81
24255: PUSH
24256: LD_EXP 87
24260: AND
24261: IFFALSE 24345
24263: GO 24265
24265: DISABLE
24266: LD_INT 0
24268: PPUSH
24269: PPUSH
// begin enable ;
24270: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_INT 22
24278: PUSH
24279: LD_OWVAR 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 32
24290: PUSH
24291: LD_INT 3
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PPUSH
24302: CALL_OW 69
24306: ST_TO_ADDR
// if not tmp then
24307: LD_VAR 0 2
24311: NOT
24312: IFFALSE 24316
// exit ;
24314: GO 24345
// for i in tmp do
24316: LD_ADDR_VAR 0 1
24320: PUSH
24321: LD_VAR 0 2
24325: PUSH
24326: FOR_IN
24327: IFFALSE 24343
// begin SetLives ( i , 0 ) ;
24329: LD_VAR 0 1
24333: PPUSH
24334: LD_INT 0
24336: PPUSH
24337: CALL_OW 234
// end ;
24341: GO 24326
24343: POP
24344: POP
// end ;
24345: PPOPN 2
24347: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24348: LD_EXP 81
24352: PUSH
24353: LD_EXP 84
24357: AND
24358: IFFALSE 24451
24360: GO 24362
24362: DISABLE
24363: LD_INT 0
24365: PPUSH
// begin enable ;
24366: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24367: LD_ADDR_VAR 0 1
24371: PUSH
24372: LD_INT 22
24374: PUSH
24375: LD_OWVAR 2
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 2
24386: PUSH
24387: LD_INT 25
24389: PUSH
24390: LD_INT 5
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 25
24399: PUSH
24400: LD_INT 9
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 25
24409: PUSH
24410: LD_INT 8
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PPUSH
24427: CALL_OW 69
24431: PUSH
24432: FOR_IN
24433: IFFALSE 24449
// begin SetClass ( i , 1 ) ;
24435: LD_VAR 0 1
24439: PPUSH
24440: LD_INT 1
24442: PPUSH
24443: CALL_OW 336
// end ;
24447: GO 24432
24449: POP
24450: POP
// end ;
24451: PPOPN 1
24453: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24454: LD_EXP 81
24458: PUSH
24459: LD_EXP 85
24463: AND
24464: PUSH
24465: LD_OWVAR 65
24469: PUSH
24470: LD_INT 7
24472: LESS
24473: AND
24474: IFFALSE 24488
24476: GO 24478
24478: DISABLE
// begin enable ;
24479: ENABLE
// game_speed := 7 ;
24480: LD_ADDR_OWVAR 65
24484: PUSH
24485: LD_INT 7
24487: ST_TO_ADDR
// end ;
24488: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24489: LD_EXP 81
24493: PUSH
24494: LD_EXP 88
24498: AND
24499: IFFALSE 24701
24501: GO 24503
24503: DISABLE
24504: LD_INT 0
24506: PPUSH
24507: PPUSH
24508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24509: LD_ADDR_VAR 0 3
24513: PUSH
24514: LD_INT 81
24516: PUSH
24517: LD_OWVAR 2
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 21
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PPUSH
24540: CALL_OW 69
24544: ST_TO_ADDR
// if not tmp then
24545: LD_VAR 0 3
24549: NOT
24550: IFFALSE 24554
// exit ;
24552: GO 24701
// if tmp > 5 then
24554: LD_VAR 0 3
24558: PUSH
24559: LD_INT 5
24561: GREATER
24562: IFFALSE 24574
// k := 5 else
24564: LD_ADDR_VAR 0 2
24568: PUSH
24569: LD_INT 5
24571: ST_TO_ADDR
24572: GO 24584
// k := tmp ;
24574: LD_ADDR_VAR 0 2
24578: PUSH
24579: LD_VAR 0 3
24583: ST_TO_ADDR
// for i := 1 to k do
24584: LD_ADDR_VAR 0 1
24588: PUSH
24589: DOUBLE
24590: LD_INT 1
24592: DEC
24593: ST_TO_ADDR
24594: LD_VAR 0 2
24598: PUSH
24599: FOR_TO
24600: IFFALSE 24699
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24602: LD_VAR 0 3
24606: PUSH
24607: LD_VAR 0 1
24611: ARRAY
24612: PPUSH
24613: LD_VAR 0 1
24617: PUSH
24618: LD_INT 4
24620: MOD
24621: PUSH
24622: LD_INT 1
24624: PLUS
24625: PPUSH
24626: CALL_OW 259
24630: PUSH
24631: LD_INT 10
24633: LESS
24634: IFFALSE 24697
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24636: LD_VAR 0 3
24640: PUSH
24641: LD_VAR 0 1
24645: ARRAY
24646: PPUSH
24647: LD_VAR 0 1
24651: PUSH
24652: LD_INT 4
24654: MOD
24655: PUSH
24656: LD_INT 1
24658: PLUS
24659: PPUSH
24660: LD_VAR 0 3
24664: PUSH
24665: LD_VAR 0 1
24669: ARRAY
24670: PPUSH
24671: LD_VAR 0 1
24675: PUSH
24676: LD_INT 4
24678: MOD
24679: PUSH
24680: LD_INT 1
24682: PLUS
24683: PPUSH
24684: CALL_OW 259
24688: PUSH
24689: LD_INT 1
24691: PLUS
24692: PPUSH
24693: CALL_OW 237
24697: GO 24599
24699: POP
24700: POP
// end ;
24701: PPOPN 3
24703: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24704: LD_EXP 81
24708: PUSH
24709: LD_EXP 89
24713: AND
24714: IFFALSE 24734
24716: GO 24718
24718: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24719: LD_INT 4
24721: PPUSH
24722: LD_OWVAR 2
24726: PPUSH
24727: LD_INT 0
24729: PPUSH
24730: CALL_OW 324
24734: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24735: LD_EXP 81
24739: PUSH
24740: LD_EXP 118
24744: AND
24745: IFFALSE 24765
24747: GO 24749
24749: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24750: LD_INT 19
24752: PPUSH
24753: LD_OWVAR 2
24757: PPUSH
24758: LD_INT 0
24760: PPUSH
24761: CALL_OW 324
24765: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24766: LD_EXP 81
24770: PUSH
24771: LD_EXP 90
24775: AND
24776: IFFALSE 24878
24778: GO 24780
24780: DISABLE
24781: LD_INT 0
24783: PPUSH
24784: PPUSH
// begin enable ;
24785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24786: LD_ADDR_VAR 0 2
24790: PUSH
24791: LD_INT 22
24793: PUSH
24794: LD_OWVAR 2
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 2
24805: PUSH
24806: LD_INT 34
24808: PUSH
24809: LD_INT 11
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 34
24818: PUSH
24819: LD_INT 30
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: ST_TO_ADDR
// if not tmp then
24840: LD_VAR 0 2
24844: NOT
24845: IFFALSE 24849
// exit ;
24847: GO 24878
// for i in tmp do
24849: LD_ADDR_VAR 0 1
24853: PUSH
24854: LD_VAR 0 2
24858: PUSH
24859: FOR_IN
24860: IFFALSE 24876
// begin SetLives ( i , 0 ) ;
24862: LD_VAR 0 1
24866: PPUSH
24867: LD_INT 0
24869: PPUSH
24870: CALL_OW 234
// end ;
24874: GO 24859
24876: POP
24877: POP
// end ;
24878: PPOPN 2
24880: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24881: LD_EXP 81
24885: PUSH
24886: LD_EXP 91
24890: AND
24891: IFFALSE 24911
24893: GO 24895
24895: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24896: LD_INT 32
24898: PPUSH
24899: LD_OWVAR 2
24903: PPUSH
24904: LD_INT 0
24906: PPUSH
24907: CALL_OW 324
24911: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24912: LD_EXP 81
24916: PUSH
24917: LD_EXP 92
24921: AND
24922: IFFALSE 25103
24924: GO 24926
24926: DISABLE
24927: LD_INT 0
24929: PPUSH
24930: PPUSH
24931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24932: LD_ADDR_VAR 0 2
24936: PUSH
24937: LD_INT 22
24939: PUSH
24940: LD_OWVAR 2
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 33
24951: PUSH
24952: LD_INT 3
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PPUSH
24963: CALL_OW 69
24967: ST_TO_ADDR
// if not tmp then
24968: LD_VAR 0 2
24972: NOT
24973: IFFALSE 24977
// exit ;
24975: GO 25103
// side := 0 ;
24977: LD_ADDR_VAR 0 3
24981: PUSH
24982: LD_INT 0
24984: ST_TO_ADDR
// for i := 1 to 8 do
24985: LD_ADDR_VAR 0 1
24989: PUSH
24990: DOUBLE
24991: LD_INT 1
24993: DEC
24994: ST_TO_ADDR
24995: LD_INT 8
24997: PUSH
24998: FOR_TO
24999: IFFALSE 25047
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25001: LD_OWVAR 2
25005: PUSH
25006: LD_VAR 0 1
25010: NONEQUAL
25011: PUSH
25012: LD_OWVAR 2
25016: PPUSH
25017: LD_VAR 0 1
25021: PPUSH
25022: CALL_OW 81
25026: PUSH
25027: LD_INT 2
25029: EQUAL
25030: AND
25031: IFFALSE 25045
// begin side := i ;
25033: LD_ADDR_VAR 0 3
25037: PUSH
25038: LD_VAR 0 1
25042: ST_TO_ADDR
// break ;
25043: GO 25047
// end ;
25045: GO 24998
25047: POP
25048: POP
// if not side then
25049: LD_VAR 0 3
25053: NOT
25054: IFFALSE 25058
// exit ;
25056: GO 25103
// for i := 1 to tmp do
25058: LD_ADDR_VAR 0 1
25062: PUSH
25063: DOUBLE
25064: LD_INT 1
25066: DEC
25067: ST_TO_ADDR
25068: LD_VAR 0 2
25072: PUSH
25073: FOR_TO
25074: IFFALSE 25101
// if Prob ( 60 ) then
25076: LD_INT 60
25078: PPUSH
25079: CALL_OW 13
25083: IFFALSE 25099
// SetSide ( i , side ) ;
25085: LD_VAR 0 1
25089: PPUSH
25090: LD_VAR 0 3
25094: PPUSH
25095: CALL_OW 235
25099: GO 25073
25101: POP
25102: POP
// end ;
25103: PPOPN 3
25105: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25106: LD_EXP 81
25110: PUSH
25111: LD_EXP 94
25115: AND
25116: IFFALSE 25235
25118: GO 25120
25120: DISABLE
25121: LD_INT 0
25123: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25124: LD_ADDR_VAR 0 1
25128: PUSH
25129: LD_INT 22
25131: PUSH
25132: LD_OWVAR 2
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 21
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 3
25153: PUSH
25154: LD_INT 23
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: LIST
25172: PPUSH
25173: CALL_OW 69
25177: PUSH
25178: FOR_IN
25179: IFFALSE 25233
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25181: LD_VAR 0 1
25185: PPUSH
25186: CALL_OW 257
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: LD_INT 2
25196: PUSH
25197: LD_INT 3
25199: PUSH
25200: LD_INT 4
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: IN
25209: IFFALSE 25231
// SetClass ( un , rand ( 1 , 4 ) ) ;
25211: LD_VAR 0 1
25215: PPUSH
25216: LD_INT 1
25218: PPUSH
25219: LD_INT 4
25221: PPUSH
25222: CALL_OW 12
25226: PPUSH
25227: CALL_OW 336
25231: GO 25178
25233: POP
25234: POP
// end ;
25235: PPOPN 1
25237: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25238: LD_EXP 81
25242: PUSH
25243: LD_EXP 93
25247: AND
25248: IFFALSE 25327
25250: GO 25252
25252: DISABLE
25253: LD_INT 0
25255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25256: LD_ADDR_VAR 0 1
25260: PUSH
25261: LD_INT 22
25263: PUSH
25264: LD_OWVAR 2
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 21
25275: PUSH
25276: LD_INT 3
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PPUSH
25287: CALL_OW 69
25291: ST_TO_ADDR
// if not tmp then
25292: LD_VAR 0 1
25296: NOT
25297: IFFALSE 25301
// exit ;
25299: GO 25327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25301: LD_VAR 0 1
25305: PUSH
25306: LD_INT 1
25308: PPUSH
25309: LD_VAR 0 1
25313: PPUSH
25314: CALL_OW 12
25318: ARRAY
25319: PPUSH
25320: LD_INT 100
25322: PPUSH
25323: CALL_OW 234
// end ;
25327: PPOPN 1
25329: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25330: LD_EXP 81
25334: PUSH
25335: LD_EXP 95
25339: AND
25340: IFFALSE 25438
25342: GO 25344
25344: DISABLE
25345: LD_INT 0
25347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25348: LD_ADDR_VAR 0 1
25352: PUSH
25353: LD_INT 22
25355: PUSH
25356: LD_OWVAR 2
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 21
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PPUSH
25379: CALL_OW 69
25383: ST_TO_ADDR
// if not tmp then
25384: LD_VAR 0 1
25388: NOT
25389: IFFALSE 25393
// exit ;
25391: GO 25438
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25393: LD_VAR 0 1
25397: PUSH
25398: LD_INT 1
25400: PPUSH
25401: LD_VAR 0 1
25405: PPUSH
25406: CALL_OW 12
25410: ARRAY
25411: PPUSH
25412: LD_INT 1
25414: PPUSH
25415: LD_INT 4
25417: PPUSH
25418: CALL_OW 12
25422: PPUSH
25423: LD_INT 3000
25425: PPUSH
25426: LD_INT 9000
25428: PPUSH
25429: CALL_OW 12
25433: PPUSH
25434: CALL_OW 492
// end ;
25438: PPOPN 1
25440: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25441: LD_EXP 81
25445: PUSH
25446: LD_EXP 96
25450: AND
25451: IFFALSE 25471
25453: GO 25455
25455: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25456: LD_INT 1
25458: PPUSH
25459: LD_OWVAR 2
25463: PPUSH
25464: LD_INT 0
25466: PPUSH
25467: CALL_OW 324
25471: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25472: LD_EXP 81
25476: PUSH
25477: LD_EXP 97
25481: AND
25482: IFFALSE 25565
25484: GO 25486
25486: DISABLE
25487: LD_INT 0
25489: PPUSH
25490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25491: LD_ADDR_VAR 0 2
25495: PUSH
25496: LD_INT 22
25498: PUSH
25499: LD_OWVAR 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 21
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PPUSH
25522: CALL_OW 69
25526: ST_TO_ADDR
// if not tmp then
25527: LD_VAR 0 2
25531: NOT
25532: IFFALSE 25536
// exit ;
25534: GO 25565
// for i in tmp do
25536: LD_ADDR_VAR 0 1
25540: PUSH
25541: LD_VAR 0 2
25545: PUSH
25546: FOR_IN
25547: IFFALSE 25563
// SetBLevel ( i , 10 ) ;
25549: LD_VAR 0 1
25553: PPUSH
25554: LD_INT 10
25556: PPUSH
25557: CALL_OW 241
25561: GO 25546
25563: POP
25564: POP
// end ;
25565: PPOPN 2
25567: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25568: LD_EXP 81
25572: PUSH
25573: LD_EXP 98
25577: AND
25578: IFFALSE 25689
25580: GO 25582
25582: DISABLE
25583: LD_INT 0
25585: PPUSH
25586: PPUSH
25587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25588: LD_ADDR_VAR 0 3
25592: PUSH
25593: LD_INT 22
25595: PUSH
25596: LD_OWVAR 2
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 25
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PPUSH
25619: CALL_OW 69
25623: ST_TO_ADDR
// if not tmp then
25624: LD_VAR 0 3
25628: NOT
25629: IFFALSE 25633
// exit ;
25631: GO 25689
// un := tmp [ rand ( 1 , tmp ) ] ;
25633: LD_ADDR_VAR 0 2
25637: PUSH
25638: LD_VAR 0 3
25642: PUSH
25643: LD_INT 1
25645: PPUSH
25646: LD_VAR 0 3
25650: PPUSH
25651: CALL_OW 12
25655: ARRAY
25656: ST_TO_ADDR
// if Crawls ( un ) then
25657: LD_VAR 0 2
25661: PPUSH
25662: CALL_OW 318
25666: IFFALSE 25677
// ComWalk ( un ) ;
25668: LD_VAR 0 2
25672: PPUSH
25673: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25677: LD_VAR 0 2
25681: PPUSH
25682: LD_INT 5
25684: PPUSH
25685: CALL_OW 336
// end ;
25689: PPOPN 3
25691: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25692: LD_EXP 81
25696: PUSH
25697: LD_EXP 99
25701: AND
25702: PUSH
25703: LD_OWVAR 67
25707: PUSH
25708: LD_INT 4
25710: LESS
25711: AND
25712: IFFALSE 25731
25714: GO 25716
25716: DISABLE
// begin Difficulty := Difficulty + 1 ;
25717: LD_ADDR_OWVAR 67
25721: PUSH
25722: LD_OWVAR 67
25726: PUSH
25727: LD_INT 1
25729: PLUS
25730: ST_TO_ADDR
// end ;
25731: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25732: LD_EXP 81
25736: PUSH
25737: LD_EXP 100
25741: AND
25742: IFFALSE 25845
25744: GO 25746
25746: DISABLE
25747: LD_INT 0
25749: PPUSH
// begin for i := 1 to 5 do
25750: LD_ADDR_VAR 0 1
25754: PUSH
25755: DOUBLE
25756: LD_INT 1
25758: DEC
25759: ST_TO_ADDR
25760: LD_INT 5
25762: PUSH
25763: FOR_TO
25764: IFFALSE 25843
// begin uc_nation := nation_nature ;
25766: LD_ADDR_OWVAR 21
25770: PUSH
25771: LD_INT 0
25773: ST_TO_ADDR
// uc_side := 0 ;
25774: LD_ADDR_OWVAR 20
25778: PUSH
25779: LD_INT 0
25781: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25782: LD_ADDR_OWVAR 29
25786: PUSH
25787: LD_INT 12
25789: PUSH
25790: LD_INT 12
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: ST_TO_ADDR
// hc_agressivity := 20 ;
25797: LD_ADDR_OWVAR 35
25801: PUSH
25802: LD_INT 20
25804: ST_TO_ADDR
// hc_class := class_tiger ;
25805: LD_ADDR_OWVAR 28
25809: PUSH
25810: LD_INT 14
25812: ST_TO_ADDR
// hc_gallery :=  ;
25813: LD_ADDR_OWVAR 33
25817: PUSH
25818: LD_STRING 
25820: ST_TO_ADDR
// hc_name :=  ;
25821: LD_ADDR_OWVAR 26
25825: PUSH
25826: LD_STRING 
25828: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25829: CALL_OW 44
25833: PPUSH
25834: LD_INT 0
25836: PPUSH
25837: CALL_OW 51
// end ;
25841: GO 25763
25843: POP
25844: POP
// end ;
25845: PPOPN 1
25847: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25848: LD_EXP 81
25852: PUSH
25853: LD_EXP 101
25857: AND
25858: IFFALSE 25867
25860: GO 25862
25862: DISABLE
// StreamSibBomb ;
25863: CALL 25868 0 0
25867: END
// export function StreamSibBomb ; var i , x , y ; begin
25868: LD_INT 0
25870: PPUSH
25871: PPUSH
25872: PPUSH
25873: PPUSH
// result := false ;
25874: LD_ADDR_VAR 0 1
25878: PUSH
25879: LD_INT 0
25881: ST_TO_ADDR
// for i := 1 to 16 do
25882: LD_ADDR_VAR 0 2
25886: PUSH
25887: DOUBLE
25888: LD_INT 1
25890: DEC
25891: ST_TO_ADDR
25892: LD_INT 16
25894: PUSH
25895: FOR_TO
25896: IFFALSE 26095
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25898: LD_ADDR_VAR 0 3
25902: PUSH
25903: LD_INT 10
25905: PUSH
25906: LD_INT 20
25908: PUSH
25909: LD_INT 30
25911: PUSH
25912: LD_INT 40
25914: PUSH
25915: LD_INT 50
25917: PUSH
25918: LD_INT 60
25920: PUSH
25921: LD_INT 70
25923: PUSH
25924: LD_INT 80
25926: PUSH
25927: LD_INT 90
25929: PUSH
25930: LD_INT 100
25932: PUSH
25933: LD_INT 110
25935: PUSH
25936: LD_INT 120
25938: PUSH
25939: LD_INT 130
25941: PUSH
25942: LD_INT 140
25944: PUSH
25945: LD_INT 150
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: PPUSH
25968: LD_INT 15
25970: PPUSH
25971: CALL_OW 12
25975: ARRAY
25976: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25977: LD_ADDR_VAR 0 4
25981: PUSH
25982: LD_INT 10
25984: PUSH
25985: LD_INT 20
25987: PUSH
25988: LD_INT 30
25990: PUSH
25991: LD_INT 40
25993: PUSH
25994: LD_INT 50
25996: PUSH
25997: LD_INT 60
25999: PUSH
26000: LD_INT 70
26002: PUSH
26003: LD_INT 80
26005: PUSH
26006: LD_INT 90
26008: PUSH
26009: LD_INT 100
26011: PUSH
26012: LD_INT 110
26014: PUSH
26015: LD_INT 120
26017: PUSH
26018: LD_INT 130
26020: PUSH
26021: LD_INT 140
26023: PUSH
26024: LD_INT 150
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: PPUSH
26047: LD_INT 15
26049: PPUSH
26050: CALL_OW 12
26054: ARRAY
26055: ST_TO_ADDR
// if ValidHex ( x , y ) then
26056: LD_VAR 0 3
26060: PPUSH
26061: LD_VAR 0 4
26065: PPUSH
26066: CALL_OW 488
26070: IFFALSE 26093
// begin result := [ x , y ] ;
26072: LD_ADDR_VAR 0 1
26076: PUSH
26077: LD_VAR 0 3
26081: PUSH
26082: LD_VAR 0 4
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: ST_TO_ADDR
// break ;
26091: GO 26095
// end ; end ;
26093: GO 25895
26095: POP
26096: POP
// if result then
26097: LD_VAR 0 1
26101: IFFALSE 26161
// begin ToLua ( playSibBomb() ) ;
26103: LD_STRING playSibBomb()
26105: PPUSH
26106: CALL_OW 559
// wait ( 0 0$14 ) ;
26110: LD_INT 490
26112: PPUSH
26113: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26117: LD_VAR 0 1
26121: PUSH
26122: LD_INT 1
26124: ARRAY
26125: PPUSH
26126: LD_VAR 0 1
26130: PUSH
26131: LD_INT 2
26133: ARRAY
26134: PPUSH
26135: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26139: LD_VAR 0 1
26143: PUSH
26144: LD_INT 1
26146: ARRAY
26147: PPUSH
26148: LD_VAR 0 1
26152: PUSH
26153: LD_INT 2
26155: ARRAY
26156: PPUSH
26157: CALL_OW 429
// end ; end ;
26161: LD_VAR 0 1
26165: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26166: LD_EXP 81
26170: PUSH
26171: LD_EXP 103
26175: AND
26176: IFFALSE 26188
26178: GO 26180
26180: DISABLE
// YouLost (  ) ;
26181: LD_STRING 
26183: PPUSH
26184: CALL_OW 104
26188: END
// every 0 0$1 trigger StreamModeActive and sFog do
26189: LD_EXP 81
26193: PUSH
26194: LD_EXP 102
26198: AND
26199: IFFALSE 26213
26201: GO 26203
26203: DISABLE
// FogOff ( your_side ) ;
26204: LD_OWVAR 2
26208: PPUSH
26209: CALL_OW 344
26213: END
// every 0 0$1 trigger StreamModeActive and sSun do
26214: LD_EXP 81
26218: PUSH
26219: LD_EXP 104
26223: AND
26224: IFFALSE 26252
26226: GO 26228
26228: DISABLE
// begin solar_recharge_percent := 0 ;
26229: LD_ADDR_OWVAR 79
26233: PUSH
26234: LD_INT 0
26236: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26237: LD_INT 10500
26239: PPUSH
26240: CALL_OW 67
// solar_recharge_percent := 100 ;
26244: LD_ADDR_OWVAR 79
26248: PUSH
26249: LD_INT 100
26251: ST_TO_ADDR
// end ;
26252: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26253: LD_EXP 81
26257: PUSH
26258: LD_EXP 105
26262: AND
26263: IFFALSE 26502
26265: GO 26267
26267: DISABLE
26268: LD_INT 0
26270: PPUSH
26271: PPUSH
26272: PPUSH
// begin tmp := [ ] ;
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: EMPTY
26279: ST_TO_ADDR
// for i := 1 to 6 do
26280: LD_ADDR_VAR 0 1
26284: PUSH
26285: DOUBLE
26286: LD_INT 1
26288: DEC
26289: ST_TO_ADDR
26290: LD_INT 6
26292: PUSH
26293: FOR_TO
26294: IFFALSE 26399
// begin uc_nation := nation_nature ;
26296: LD_ADDR_OWVAR 21
26300: PUSH
26301: LD_INT 0
26303: ST_TO_ADDR
// uc_side := 0 ;
26304: LD_ADDR_OWVAR 20
26308: PUSH
26309: LD_INT 0
26311: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26312: LD_ADDR_OWVAR 29
26316: PUSH
26317: LD_INT 12
26319: PUSH
26320: LD_INT 12
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: ST_TO_ADDR
// hc_agressivity := 20 ;
26327: LD_ADDR_OWVAR 35
26331: PUSH
26332: LD_INT 20
26334: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26335: LD_ADDR_OWVAR 28
26339: PUSH
26340: LD_INT 17
26342: ST_TO_ADDR
// hc_gallery :=  ;
26343: LD_ADDR_OWVAR 33
26347: PUSH
26348: LD_STRING 
26350: ST_TO_ADDR
// hc_name :=  ;
26351: LD_ADDR_OWVAR 26
26355: PUSH
26356: LD_STRING 
26358: ST_TO_ADDR
// un := CreateHuman ;
26359: LD_ADDR_VAR 0 2
26363: PUSH
26364: CALL_OW 44
26368: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26369: LD_VAR 0 2
26373: PPUSH
26374: LD_INT 1
26376: PPUSH
26377: CALL_OW 51
// tmp := tmp ^ un ;
26381: LD_ADDR_VAR 0 3
26385: PUSH
26386: LD_VAR 0 3
26390: PUSH
26391: LD_VAR 0 2
26395: ADD
26396: ST_TO_ADDR
// end ;
26397: GO 26293
26399: POP
26400: POP
// repeat wait ( 0 0$1 ) ;
26401: LD_INT 35
26403: PPUSH
26404: CALL_OW 67
// for un in tmp do
26408: LD_ADDR_VAR 0 2
26412: PUSH
26413: LD_VAR 0 3
26417: PUSH
26418: FOR_IN
26419: IFFALSE 26493
// begin if IsDead ( un ) then
26421: LD_VAR 0 2
26425: PPUSH
26426: CALL_OW 301
26430: IFFALSE 26450
// begin tmp := tmp diff un ;
26432: LD_ADDR_VAR 0 3
26436: PUSH
26437: LD_VAR 0 3
26441: PUSH
26442: LD_VAR 0 2
26446: DIFF
26447: ST_TO_ADDR
// continue ;
26448: GO 26418
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26450: LD_VAR 0 2
26454: PPUSH
26455: LD_INT 3
26457: PUSH
26458: LD_INT 22
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PPUSH
26472: CALL_OW 69
26476: PPUSH
26477: LD_VAR 0 2
26481: PPUSH
26482: CALL_OW 74
26486: PPUSH
26487: CALL_OW 115
// end ;
26491: GO 26418
26493: POP
26494: POP
// until not tmp ;
26495: LD_VAR 0 3
26499: NOT
26500: IFFALSE 26401
// end ;
26502: PPOPN 3
26504: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26505: LD_EXP 81
26509: PUSH
26510: LD_EXP 106
26514: AND
26515: IFFALSE 26569
26517: GO 26519
26519: DISABLE
// begin ToLua ( displayTroll(); ) ;
26520: LD_STRING displayTroll();
26522: PPUSH
26523: CALL_OW 559
// wait ( 3 3$00 ) ;
26527: LD_INT 6300
26529: PPUSH
26530: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26534: LD_STRING hideTroll();
26536: PPUSH
26537: CALL_OW 559
// wait ( 1 1$00 ) ;
26541: LD_INT 2100
26543: PPUSH
26544: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26548: LD_STRING displayTroll();
26550: PPUSH
26551: CALL_OW 559
// wait ( 1 1$00 ) ;
26555: LD_INT 2100
26557: PPUSH
26558: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26562: LD_STRING hideTroll();
26564: PPUSH
26565: CALL_OW 559
// end ;
26569: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26570: LD_EXP 81
26574: PUSH
26575: LD_EXP 107
26579: AND
26580: IFFALSE 26643
26582: GO 26584
26584: DISABLE
26585: LD_INT 0
26587: PPUSH
// begin p := 0 ;
26588: LD_ADDR_VAR 0 1
26592: PUSH
26593: LD_INT 0
26595: ST_TO_ADDR
// repeat game_speed := 1 ;
26596: LD_ADDR_OWVAR 65
26600: PUSH
26601: LD_INT 1
26603: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26604: LD_INT 35
26606: PPUSH
26607: CALL_OW 67
// p := p + 1 ;
26611: LD_ADDR_VAR 0 1
26615: PUSH
26616: LD_VAR 0 1
26620: PUSH
26621: LD_INT 1
26623: PLUS
26624: ST_TO_ADDR
// until p >= 60 ;
26625: LD_VAR 0 1
26629: PUSH
26630: LD_INT 60
26632: GREATEREQUAL
26633: IFFALSE 26596
// game_speed := 4 ;
26635: LD_ADDR_OWVAR 65
26639: PUSH
26640: LD_INT 4
26642: ST_TO_ADDR
// end ;
26643: PPOPN 1
26645: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26646: LD_EXP 81
26650: PUSH
26651: LD_EXP 108
26655: AND
26656: IFFALSE 26802
26658: GO 26660
26660: DISABLE
26661: LD_INT 0
26663: PPUSH
26664: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26665: LD_ADDR_VAR 0 1
26669: PUSH
26670: LD_INT 22
26672: PUSH
26673: LD_OWVAR 2
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 2
26684: PUSH
26685: LD_INT 30
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 30
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: CALL_OW 69
26718: ST_TO_ADDR
// if not depot then
26719: LD_VAR 0 1
26723: NOT
26724: IFFALSE 26728
// exit ;
26726: GO 26802
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26728: LD_ADDR_VAR 0 2
26732: PUSH
26733: LD_VAR 0 1
26737: PUSH
26738: LD_INT 1
26740: PPUSH
26741: LD_VAR 0 1
26745: PPUSH
26746: CALL_OW 12
26750: ARRAY
26751: PPUSH
26752: CALL_OW 274
26756: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26757: LD_VAR 0 2
26761: PPUSH
26762: LD_INT 1
26764: PPUSH
26765: LD_INT 0
26767: PPUSH
26768: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26772: LD_VAR 0 2
26776: PPUSH
26777: LD_INT 2
26779: PPUSH
26780: LD_INT 0
26782: PPUSH
26783: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26787: LD_VAR 0 2
26791: PPUSH
26792: LD_INT 3
26794: PPUSH
26795: LD_INT 0
26797: PPUSH
26798: CALL_OW 277
// end ;
26802: PPOPN 2
26804: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26805: LD_EXP 81
26809: PUSH
26810: LD_EXP 109
26814: AND
26815: IFFALSE 26912
26817: GO 26819
26819: DISABLE
26820: LD_INT 0
26822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26823: LD_ADDR_VAR 0 1
26827: PUSH
26828: LD_INT 22
26830: PUSH
26831: LD_OWVAR 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 21
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 3
26852: PUSH
26853: LD_INT 23
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: LIST
26871: PPUSH
26872: CALL_OW 69
26876: ST_TO_ADDR
// if not tmp then
26877: LD_VAR 0 1
26881: NOT
26882: IFFALSE 26886
// exit ;
26884: GO 26912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26886: LD_VAR 0 1
26890: PUSH
26891: LD_INT 1
26893: PPUSH
26894: LD_VAR 0 1
26898: PPUSH
26899: CALL_OW 12
26903: ARRAY
26904: PPUSH
26905: LD_INT 200
26907: PPUSH
26908: CALL_OW 234
// end ;
26912: PPOPN 1
26914: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26915: LD_EXP 81
26919: PUSH
26920: LD_EXP 110
26924: AND
26925: IFFALSE 27004
26927: GO 26929
26929: DISABLE
26930: LD_INT 0
26932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26933: LD_ADDR_VAR 0 1
26937: PUSH
26938: LD_INT 22
26940: PUSH
26941: LD_OWVAR 2
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 21
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PPUSH
26964: CALL_OW 69
26968: ST_TO_ADDR
// if not tmp then
26969: LD_VAR 0 1
26973: NOT
26974: IFFALSE 26978
// exit ;
26976: GO 27004
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26978: LD_VAR 0 1
26982: PUSH
26983: LD_INT 1
26985: PPUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 12
26995: ARRAY
26996: PPUSH
26997: LD_INT 60
26999: PPUSH
27000: CALL_OW 234
// end ;
27004: PPOPN 1
27006: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27007: LD_EXP 81
27011: PUSH
27012: LD_EXP 111
27016: AND
27017: IFFALSE 27116
27019: GO 27021
27021: DISABLE
27022: LD_INT 0
27024: PPUSH
27025: PPUSH
// begin enable ;
27026: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27027: LD_ADDR_VAR 0 1
27031: PUSH
27032: LD_INT 22
27034: PUSH
27035: LD_OWVAR 2
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 61
27046: PUSH
27047: EMPTY
27048: LIST
27049: PUSH
27050: LD_INT 33
27052: PUSH
27053: LD_INT 2
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: PPUSH
27065: CALL_OW 69
27069: ST_TO_ADDR
// if not tmp then
27070: LD_VAR 0 1
27074: NOT
27075: IFFALSE 27079
// exit ;
27077: GO 27116
// for i in tmp do
27079: LD_ADDR_VAR 0 2
27083: PUSH
27084: LD_VAR 0 1
27088: PUSH
27089: FOR_IN
27090: IFFALSE 27114
// if IsControledBy ( i ) then
27092: LD_VAR 0 2
27096: PPUSH
27097: CALL_OW 312
27101: IFFALSE 27112
// ComUnlink ( i ) ;
27103: LD_VAR 0 2
27107: PPUSH
27108: CALL_OW 136
27112: GO 27089
27114: POP
27115: POP
// end ;
27116: PPOPN 2
27118: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27119: LD_EXP 81
27123: PUSH
27124: LD_EXP 112
27128: AND
27129: IFFALSE 27269
27131: GO 27133
27133: DISABLE
27134: LD_INT 0
27136: PPUSH
27137: PPUSH
// begin ToLua ( displayPowell(); ) ;
27138: LD_STRING displayPowell();
27140: PPUSH
27141: CALL_OW 559
// uc_side := 0 ;
27145: LD_ADDR_OWVAR 20
27149: PUSH
27150: LD_INT 0
27152: ST_TO_ADDR
// uc_nation := 2 ;
27153: LD_ADDR_OWVAR 21
27157: PUSH
27158: LD_INT 2
27160: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27161: LD_ADDR_OWVAR 37
27165: PUSH
27166: LD_INT 14
27168: ST_TO_ADDR
// vc_engine := engine_siberite ;
27169: LD_ADDR_OWVAR 39
27173: PUSH
27174: LD_INT 3
27176: ST_TO_ADDR
// vc_control := control_apeman ;
27177: LD_ADDR_OWVAR 38
27181: PUSH
27182: LD_INT 5
27184: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27185: LD_ADDR_OWVAR 40
27189: PUSH
27190: LD_INT 29
27192: ST_TO_ADDR
// un := CreateVehicle ;
27193: LD_ADDR_VAR 0 2
27197: PUSH
27198: CALL_OW 45
27202: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27203: LD_VAR 0 2
27207: PPUSH
27208: LD_INT 1
27210: PPUSH
27211: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27215: LD_INT 35
27217: PPUSH
27218: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27222: LD_VAR 0 2
27226: PPUSH
27227: LD_INT 22
27229: PUSH
27230: LD_OWVAR 2
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PPUSH
27239: CALL_OW 69
27243: PPUSH
27244: LD_VAR 0 2
27248: PPUSH
27249: CALL_OW 74
27253: PPUSH
27254: CALL_OW 115
// until IsDead ( un ) ;
27258: LD_VAR 0 2
27262: PPUSH
27263: CALL_OW 301
27267: IFFALSE 27215
// end ;
27269: PPOPN 2
27271: END
// every 0 0$1 trigger StreamModeActive and sStu do
27272: LD_EXP 81
27276: PUSH
27277: LD_EXP 120
27281: AND
27282: IFFALSE 27298
27284: GO 27286
27286: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27287: LD_STRING displayStucuk();
27289: PPUSH
27290: CALL_OW 559
// ResetFog ;
27294: CALL_OW 335
// end ;
27298: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27299: LD_EXP 81
27303: PUSH
27304: LD_EXP 113
27308: AND
27309: IFFALSE 27450
27311: GO 27313
27313: DISABLE
27314: LD_INT 0
27316: PPUSH
27317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27318: LD_ADDR_VAR 0 2
27322: PUSH
27323: LD_INT 22
27325: PUSH
27326: LD_OWVAR 2
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 21
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PPUSH
27349: CALL_OW 69
27353: ST_TO_ADDR
// if not tmp then
27354: LD_VAR 0 2
27358: NOT
27359: IFFALSE 27363
// exit ;
27361: GO 27450
// un := tmp [ rand ( 1 , tmp ) ] ;
27363: LD_ADDR_VAR 0 1
27367: PUSH
27368: LD_VAR 0 2
27372: PUSH
27373: LD_INT 1
27375: PPUSH
27376: LD_VAR 0 2
27380: PPUSH
27381: CALL_OW 12
27385: ARRAY
27386: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27387: LD_VAR 0 1
27391: PPUSH
27392: LD_INT 0
27394: PPUSH
27395: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27399: LD_VAR 0 1
27403: PPUSH
27404: LD_OWVAR 3
27408: PUSH
27409: LD_VAR 0 1
27413: DIFF
27414: PPUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 74
27424: PPUSH
27425: CALL_OW 115
// wait ( 0 0$20 ) ;
27429: LD_INT 700
27431: PPUSH
27432: CALL_OW 67
// SetSide ( un , your_side ) ;
27436: LD_VAR 0 1
27440: PPUSH
27441: LD_OWVAR 2
27445: PPUSH
27446: CALL_OW 235
// end ;
27450: PPOPN 2
27452: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27453: LD_EXP 81
27457: PUSH
27458: LD_EXP 114
27462: AND
27463: IFFALSE 27569
27465: GO 27467
27467: DISABLE
27468: LD_INT 0
27470: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27471: LD_ADDR_VAR 0 1
27475: PUSH
27476: LD_INT 22
27478: PUSH
27479: LD_OWVAR 2
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 30
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 30
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PPUSH
27520: CALL_OW 69
27524: ST_TO_ADDR
// if not depot then
27525: LD_VAR 0 1
27529: NOT
27530: IFFALSE 27534
// exit ;
27532: GO 27569
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27534: LD_VAR 0 1
27538: PUSH
27539: LD_INT 1
27541: ARRAY
27542: PPUSH
27543: CALL_OW 250
27547: PPUSH
27548: LD_VAR 0 1
27552: PUSH
27553: LD_INT 1
27555: ARRAY
27556: PPUSH
27557: CALL_OW 251
27561: PPUSH
27562: LD_INT 70
27564: PPUSH
27565: CALL_OW 495
// end ;
27569: PPOPN 1
27571: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27572: LD_EXP 81
27576: PUSH
27577: LD_EXP 115
27581: AND
27582: IFFALSE 27793
27584: GO 27586
27586: DISABLE
27587: LD_INT 0
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27594: LD_ADDR_VAR 0 5
27598: PUSH
27599: LD_INT 22
27601: PUSH
27602: LD_OWVAR 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 21
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PPUSH
27625: CALL_OW 69
27629: ST_TO_ADDR
// if not tmp then
27630: LD_VAR 0 5
27634: NOT
27635: IFFALSE 27639
// exit ;
27637: GO 27793
// for i in tmp do
27639: LD_ADDR_VAR 0 1
27643: PUSH
27644: LD_VAR 0 5
27648: PUSH
27649: FOR_IN
27650: IFFALSE 27791
// begin d := rand ( 0 , 5 ) ;
27652: LD_ADDR_VAR 0 4
27656: PUSH
27657: LD_INT 0
27659: PPUSH
27660: LD_INT 5
27662: PPUSH
27663: CALL_OW 12
27667: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27668: LD_ADDR_VAR 0 2
27672: PUSH
27673: LD_VAR 0 1
27677: PPUSH
27678: CALL_OW 250
27682: PPUSH
27683: LD_VAR 0 4
27687: PPUSH
27688: LD_INT 3
27690: PPUSH
27691: LD_INT 12
27693: PPUSH
27694: CALL_OW 12
27698: PPUSH
27699: CALL_OW 272
27703: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27704: LD_ADDR_VAR 0 3
27708: PUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: CALL_OW 251
27718: PPUSH
27719: LD_VAR 0 4
27723: PPUSH
27724: LD_INT 3
27726: PPUSH
27727: LD_INT 12
27729: PPUSH
27730: CALL_OW 12
27734: PPUSH
27735: CALL_OW 273
27739: ST_TO_ADDR
// if ValidHex ( x , y ) then
27740: LD_VAR 0 2
27744: PPUSH
27745: LD_VAR 0 3
27749: PPUSH
27750: CALL_OW 488
27754: IFFALSE 27789
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27756: LD_VAR 0 1
27760: PPUSH
27761: LD_VAR 0 2
27765: PPUSH
27766: LD_VAR 0 3
27770: PPUSH
27771: LD_INT 3
27773: PPUSH
27774: LD_INT 6
27776: PPUSH
27777: CALL_OW 12
27781: PPUSH
27782: LD_INT 1
27784: PPUSH
27785: CALL_OW 483
// end ;
27789: GO 27649
27791: POP
27792: POP
// end ;
27793: PPOPN 5
27795: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27796: LD_EXP 81
27800: PUSH
27801: LD_EXP 116
27805: AND
27806: IFFALSE 27900
27808: GO 27810
27810: DISABLE
27811: LD_INT 0
27813: PPUSH
27814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27815: LD_ADDR_VAR 0 2
27819: PUSH
27820: LD_INT 22
27822: PUSH
27823: LD_OWVAR 2
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 32
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 21
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: PPUSH
27857: CALL_OW 69
27861: ST_TO_ADDR
// if not tmp then
27862: LD_VAR 0 2
27866: NOT
27867: IFFALSE 27871
// exit ;
27869: GO 27900
// for i in tmp do
27871: LD_ADDR_VAR 0 1
27875: PUSH
27876: LD_VAR 0 2
27880: PUSH
27881: FOR_IN
27882: IFFALSE 27898
// SetFuel ( i , 0 ) ;
27884: LD_VAR 0 1
27888: PPUSH
27889: LD_INT 0
27891: PPUSH
27892: CALL_OW 240
27896: GO 27881
27898: POP
27899: POP
// end ;
27900: PPOPN 2
27902: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27903: LD_EXP 81
27907: PUSH
27908: LD_EXP 117
27912: AND
27913: IFFALSE 27979
27915: GO 27917
27917: DISABLE
27918: LD_INT 0
27920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27921: LD_ADDR_VAR 0 1
27925: PUSH
27926: LD_INT 22
27928: PUSH
27929: LD_OWVAR 2
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 30
27940: PUSH
27941: LD_INT 29
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PPUSH
27952: CALL_OW 69
27956: ST_TO_ADDR
// if not tmp then
27957: LD_VAR 0 1
27961: NOT
27962: IFFALSE 27966
// exit ;
27964: GO 27979
// DestroyUnit ( tmp [ 1 ] ) ;
27966: LD_VAR 0 1
27970: PUSH
27971: LD_INT 1
27973: ARRAY
27974: PPUSH
27975: CALL_OW 65
// end ;
27979: PPOPN 1
27981: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27982: LD_EXP 81
27986: PUSH
27987: LD_EXP 119
27991: AND
27992: IFFALSE 28121
27994: GO 27996
27996: DISABLE
27997: LD_INT 0
27999: PPUSH
// begin uc_side := 0 ;
28000: LD_ADDR_OWVAR 20
28004: PUSH
28005: LD_INT 0
28007: ST_TO_ADDR
// uc_nation := nation_arabian ;
28008: LD_ADDR_OWVAR 21
28012: PUSH
28013: LD_INT 2
28015: ST_TO_ADDR
// hc_gallery :=  ;
28016: LD_ADDR_OWVAR 33
28020: PUSH
28021: LD_STRING 
28023: ST_TO_ADDR
// hc_name :=  ;
28024: LD_ADDR_OWVAR 26
28028: PUSH
28029: LD_STRING 
28031: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28032: LD_INT 1
28034: PPUSH
28035: LD_INT 11
28037: PPUSH
28038: LD_INT 10
28040: PPUSH
28041: CALL_OW 380
// un := CreateHuman ;
28045: LD_ADDR_VAR 0 1
28049: PUSH
28050: CALL_OW 44
28054: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28055: LD_VAR 0 1
28059: PPUSH
28060: LD_INT 1
28062: PPUSH
28063: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28067: LD_INT 35
28069: PPUSH
28070: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28074: LD_VAR 0 1
28078: PPUSH
28079: LD_INT 22
28081: PUSH
28082: LD_OWVAR 2
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PPUSH
28091: CALL_OW 69
28095: PPUSH
28096: LD_VAR 0 1
28100: PPUSH
28101: CALL_OW 74
28105: PPUSH
28106: CALL_OW 115
// until IsDead ( un ) ;
28110: LD_VAR 0 1
28114: PPUSH
28115: CALL_OW 301
28119: IFFALSE 28067
// end ;
28121: PPOPN 1
28123: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28124: LD_EXP 81
28128: PUSH
28129: LD_EXP 121
28133: AND
28134: IFFALSE 28146
28136: GO 28138
28138: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28139: LD_STRING earthquake(getX(game), 0, 32)
28141: PPUSH
28142: CALL_OW 559
28146: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28147: LD_EXP 81
28151: PUSH
28152: LD_EXP 122
28156: AND
28157: IFFALSE 28248
28159: GO 28161
28161: DISABLE
28162: LD_INT 0
28164: PPUSH
// begin enable ;
28165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28166: LD_ADDR_VAR 0 1
28170: PUSH
28171: LD_INT 22
28173: PUSH
28174: LD_OWVAR 2
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 21
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 33
28195: PUSH
28196: LD_INT 3
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: PPUSH
28208: CALL_OW 69
28212: ST_TO_ADDR
// if not tmp then
28213: LD_VAR 0 1
28217: NOT
28218: IFFALSE 28222
// exit ;
28220: GO 28248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28222: LD_VAR 0 1
28226: PUSH
28227: LD_INT 1
28229: PPUSH
28230: LD_VAR 0 1
28234: PPUSH
28235: CALL_OW 12
28239: ARRAY
28240: PPUSH
28241: LD_INT 1
28243: PPUSH
28244: CALL_OW 234
// end ;
28248: PPOPN 1
28250: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28251: LD_EXP 81
28255: PUSH
28256: LD_EXP 123
28260: AND
28261: IFFALSE 28402
28263: GO 28265
28265: DISABLE
28266: LD_INT 0
28268: PPUSH
28269: PPUSH
28270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28271: LD_ADDR_VAR 0 3
28275: PUSH
28276: LD_INT 22
28278: PUSH
28279: LD_OWVAR 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 25
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 69
28306: ST_TO_ADDR
// if not tmp then
28307: LD_VAR 0 3
28311: NOT
28312: IFFALSE 28316
// exit ;
28314: GO 28402
// un := tmp [ rand ( 1 , tmp ) ] ;
28316: LD_ADDR_VAR 0 2
28320: PUSH
28321: LD_VAR 0 3
28325: PUSH
28326: LD_INT 1
28328: PPUSH
28329: LD_VAR 0 3
28333: PPUSH
28334: CALL_OW 12
28338: ARRAY
28339: ST_TO_ADDR
// if Crawls ( un ) then
28340: LD_VAR 0 2
28344: PPUSH
28345: CALL_OW 318
28349: IFFALSE 28360
// ComWalk ( un ) ;
28351: LD_VAR 0 2
28355: PPUSH
28356: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28360: LD_VAR 0 2
28364: PPUSH
28365: LD_INT 9
28367: PPUSH
28368: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28372: LD_INT 28
28374: PPUSH
28375: LD_OWVAR 2
28379: PPUSH
28380: LD_INT 2
28382: PPUSH
28383: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28387: LD_INT 29
28389: PPUSH
28390: LD_OWVAR 2
28394: PPUSH
28395: LD_INT 2
28397: PPUSH
28398: CALL_OW 322
// end ;
28402: PPOPN 3
28404: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28405: LD_EXP 81
28409: PUSH
28410: LD_EXP 124
28414: AND
28415: IFFALSE 28526
28417: GO 28419
28419: DISABLE
28420: LD_INT 0
28422: PPUSH
28423: PPUSH
28424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28425: LD_ADDR_VAR 0 3
28429: PUSH
28430: LD_INT 22
28432: PUSH
28433: LD_OWVAR 2
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 25
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PPUSH
28456: CALL_OW 69
28460: ST_TO_ADDR
// if not tmp then
28461: LD_VAR 0 3
28465: NOT
28466: IFFALSE 28470
// exit ;
28468: GO 28526
// un := tmp [ rand ( 1 , tmp ) ] ;
28470: LD_ADDR_VAR 0 2
28474: PUSH
28475: LD_VAR 0 3
28479: PUSH
28480: LD_INT 1
28482: PPUSH
28483: LD_VAR 0 3
28487: PPUSH
28488: CALL_OW 12
28492: ARRAY
28493: ST_TO_ADDR
// if Crawls ( un ) then
28494: LD_VAR 0 2
28498: PPUSH
28499: CALL_OW 318
28503: IFFALSE 28514
// ComWalk ( un ) ;
28505: LD_VAR 0 2
28509: PPUSH
28510: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28514: LD_VAR 0 2
28518: PPUSH
28519: LD_INT 8
28521: PPUSH
28522: CALL_OW 336
// end ;
28526: PPOPN 3
28528: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28529: LD_EXP 81
28533: PUSH
28534: LD_EXP 125
28538: AND
28539: IFFALSE 28683
28541: GO 28543
28543: DISABLE
28544: LD_INT 0
28546: PPUSH
28547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28548: LD_ADDR_VAR 0 2
28552: PUSH
28553: LD_INT 22
28555: PUSH
28556: LD_OWVAR 2
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 21
28567: PUSH
28568: LD_INT 2
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: LD_INT 34
28580: PUSH
28581: LD_INT 12
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 34
28590: PUSH
28591: LD_INT 51
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 34
28600: PUSH
28601: LD_INT 32
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: PPUSH
28619: CALL_OW 69
28623: ST_TO_ADDR
// if not tmp then
28624: LD_VAR 0 2
28628: NOT
28629: IFFALSE 28633
// exit ;
28631: GO 28683
// for i in tmp do
28633: LD_ADDR_VAR 0 1
28637: PUSH
28638: LD_VAR 0 2
28642: PUSH
28643: FOR_IN
28644: IFFALSE 28681
// if GetCargo ( i , mat_artifact ) = 0 then
28646: LD_VAR 0 1
28650: PPUSH
28651: LD_INT 4
28653: PPUSH
28654: CALL_OW 289
28658: PUSH
28659: LD_INT 0
28661: EQUAL
28662: IFFALSE 28679
// SetCargo ( i , mat_siberit , 100 ) ;
28664: LD_VAR 0 1
28668: PPUSH
28669: LD_INT 3
28671: PPUSH
28672: LD_INT 100
28674: PPUSH
28675: CALL_OW 290
28679: GO 28643
28681: POP
28682: POP
// end ;
28683: PPOPN 2
28685: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28686: LD_EXP 81
28690: PUSH
28691: LD_EXP 126
28695: AND
28696: IFFALSE 28879
28698: GO 28700
28700: DISABLE
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28705: LD_ADDR_VAR 0 2
28709: PUSH
28710: LD_INT 22
28712: PUSH
28713: LD_OWVAR 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: ST_TO_ADDR
// if not tmp then
28727: LD_VAR 0 2
28731: NOT
28732: IFFALSE 28736
// exit ;
28734: GO 28879
// for i := 1 to 2 do
28736: LD_ADDR_VAR 0 1
28740: PUSH
28741: DOUBLE
28742: LD_INT 1
28744: DEC
28745: ST_TO_ADDR
28746: LD_INT 2
28748: PUSH
28749: FOR_TO
28750: IFFALSE 28877
// begin uc_side := your_side ;
28752: LD_ADDR_OWVAR 20
28756: PUSH
28757: LD_OWVAR 2
28761: ST_TO_ADDR
// uc_nation := nation_american ;
28762: LD_ADDR_OWVAR 21
28766: PUSH
28767: LD_INT 1
28769: ST_TO_ADDR
// vc_chassis := us_morphling ;
28770: LD_ADDR_OWVAR 37
28774: PUSH
28775: LD_INT 5
28777: ST_TO_ADDR
// vc_engine := engine_siberite ;
28778: LD_ADDR_OWVAR 39
28782: PUSH
28783: LD_INT 3
28785: ST_TO_ADDR
// vc_control := control_computer ;
28786: LD_ADDR_OWVAR 38
28790: PUSH
28791: LD_INT 3
28793: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28794: LD_ADDR_OWVAR 40
28798: PUSH
28799: LD_INT 10
28801: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28802: LD_VAR 0 2
28806: PUSH
28807: LD_INT 1
28809: ARRAY
28810: PPUSH
28811: CALL_OW 310
28815: NOT
28816: IFFALSE 28863
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28818: CALL_OW 45
28822: PPUSH
28823: LD_VAR 0 2
28827: PUSH
28828: LD_INT 1
28830: ARRAY
28831: PPUSH
28832: CALL_OW 250
28836: PPUSH
28837: LD_VAR 0 2
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: PPUSH
28846: CALL_OW 251
28850: PPUSH
28851: LD_INT 12
28853: PPUSH
28854: LD_INT 1
28856: PPUSH
28857: CALL_OW 50
28861: GO 28875
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28863: CALL_OW 45
28867: PPUSH
28868: LD_INT 1
28870: PPUSH
28871: CALL_OW 51
// end ;
28875: GO 28749
28877: POP
28878: POP
// end ;
28879: PPOPN 2
28881: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28882: LD_EXP 81
28886: PUSH
28887: LD_EXP 127
28891: AND
28892: IFFALSE 29114
28894: GO 28896
28896: DISABLE
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28905: LD_ADDR_VAR 0 6
28909: PUSH
28910: LD_INT 22
28912: PUSH
28913: LD_OWVAR 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 21
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 3
28934: PUSH
28935: LD_INT 23
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: PPUSH
28954: CALL_OW 69
28958: ST_TO_ADDR
// if not tmp then
28959: LD_VAR 0 6
28963: NOT
28964: IFFALSE 28968
// exit ;
28966: GO 29114
// s1 := rand ( 1 , 4 ) ;
28968: LD_ADDR_VAR 0 2
28972: PUSH
28973: LD_INT 1
28975: PPUSH
28976: LD_INT 4
28978: PPUSH
28979: CALL_OW 12
28983: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28984: LD_ADDR_VAR 0 4
28988: PUSH
28989: LD_VAR 0 6
28993: PUSH
28994: LD_INT 1
28996: ARRAY
28997: PPUSH
28998: LD_VAR 0 2
29002: PPUSH
29003: CALL_OW 259
29007: ST_TO_ADDR
// if s1 = 1 then
29008: LD_VAR 0 2
29012: PUSH
29013: LD_INT 1
29015: EQUAL
29016: IFFALSE 29036
// s2 := rand ( 2 , 4 ) else
29018: LD_ADDR_VAR 0 3
29022: PUSH
29023: LD_INT 2
29025: PPUSH
29026: LD_INT 4
29028: PPUSH
29029: CALL_OW 12
29033: ST_TO_ADDR
29034: GO 29044
// s2 := 1 ;
29036: LD_ADDR_VAR 0 3
29040: PUSH
29041: LD_INT 1
29043: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29044: LD_ADDR_VAR 0 5
29048: PUSH
29049: LD_VAR 0 6
29053: PUSH
29054: LD_INT 1
29056: ARRAY
29057: PPUSH
29058: LD_VAR 0 3
29062: PPUSH
29063: CALL_OW 259
29067: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29068: LD_VAR 0 6
29072: PUSH
29073: LD_INT 1
29075: ARRAY
29076: PPUSH
29077: LD_VAR 0 2
29081: PPUSH
29082: LD_VAR 0 5
29086: PPUSH
29087: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29091: LD_VAR 0 6
29095: PUSH
29096: LD_INT 1
29098: ARRAY
29099: PPUSH
29100: LD_VAR 0 3
29104: PPUSH
29105: LD_VAR 0 4
29109: PPUSH
29110: CALL_OW 237
// end ;
29114: PPOPN 6
29116: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29117: LD_EXP 81
29121: PUSH
29122: LD_EXP 128
29126: AND
29127: IFFALSE 29206
29129: GO 29131
29131: DISABLE
29132: LD_INT 0
29134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29135: LD_ADDR_VAR 0 1
29139: PUSH
29140: LD_INT 22
29142: PUSH
29143: LD_OWVAR 2
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 30
29154: PUSH
29155: LD_INT 3
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PPUSH
29166: CALL_OW 69
29170: ST_TO_ADDR
// if not tmp then
29171: LD_VAR 0 1
29175: NOT
29176: IFFALSE 29180
// exit ;
29178: GO 29206
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29180: LD_VAR 0 1
29184: PUSH
29185: LD_INT 1
29187: PPUSH
29188: LD_VAR 0 1
29192: PPUSH
29193: CALL_OW 12
29197: ARRAY
29198: PPUSH
29199: LD_INT 1
29201: PPUSH
29202: CALL_OW 234
// end ;
29206: PPOPN 1
29208: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29209: LD_EXP 81
29213: PUSH
29214: LD_EXP 129
29218: AND
29219: IFFALSE 29331
29221: GO 29223
29223: DISABLE
29224: LD_INT 0
29226: PPUSH
29227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29228: LD_ADDR_VAR 0 2
29232: PUSH
29233: LD_INT 22
29235: PUSH
29236: LD_OWVAR 2
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 2
29247: PUSH
29248: LD_INT 30
29250: PUSH
29251: LD_INT 27
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 30
29260: PUSH
29261: LD_INT 26
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 30
29270: PUSH
29271: LD_INT 28
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PPUSH
29288: CALL_OW 69
29292: ST_TO_ADDR
// if not tmp then
29293: LD_VAR 0 2
29297: NOT
29298: IFFALSE 29302
// exit ;
29300: GO 29331
// for i in tmp do
29302: LD_ADDR_VAR 0 1
29306: PUSH
29307: LD_VAR 0 2
29311: PUSH
29312: FOR_IN
29313: IFFALSE 29329
// SetLives ( i , 1 ) ;
29315: LD_VAR 0 1
29319: PPUSH
29320: LD_INT 1
29322: PPUSH
29323: CALL_OW 234
29327: GO 29312
29329: POP
29330: POP
// end ;
29331: PPOPN 2
29333: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29334: LD_EXP 81
29338: PUSH
29339: LD_EXP 130
29343: AND
29344: IFFALSE 29631
29346: GO 29348
29348: DISABLE
29349: LD_INT 0
29351: PPUSH
29352: PPUSH
29353: PPUSH
// begin i := rand ( 1 , 7 ) ;
29354: LD_ADDR_VAR 0 1
29358: PUSH
29359: LD_INT 1
29361: PPUSH
29362: LD_INT 7
29364: PPUSH
29365: CALL_OW 12
29369: ST_TO_ADDR
// case i of 1 :
29370: LD_VAR 0 1
29374: PUSH
29375: LD_INT 1
29377: DOUBLE
29378: EQUAL
29379: IFTRUE 29383
29381: GO 29393
29383: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29384: LD_STRING earthquake(getX(game), 0, 32)
29386: PPUSH
29387: CALL_OW 559
29391: GO 29631
29393: LD_INT 2
29395: DOUBLE
29396: EQUAL
29397: IFTRUE 29401
29399: GO 29415
29401: POP
// begin ToLua ( displayStucuk(); ) ;
29402: LD_STRING displayStucuk();
29404: PPUSH
29405: CALL_OW 559
// ResetFog ;
29409: CALL_OW 335
// end ; 3 :
29413: GO 29631
29415: LD_INT 3
29417: DOUBLE
29418: EQUAL
29419: IFTRUE 29423
29421: GO 29527
29423: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29424: LD_ADDR_VAR 0 2
29428: PUSH
29429: LD_INT 22
29431: PUSH
29432: LD_OWVAR 2
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 25
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 69
29459: ST_TO_ADDR
// if not tmp then
29460: LD_VAR 0 2
29464: NOT
29465: IFFALSE 29469
// exit ;
29467: GO 29631
// un := tmp [ rand ( 1 , tmp ) ] ;
29469: LD_ADDR_VAR 0 3
29473: PUSH
29474: LD_VAR 0 2
29478: PUSH
29479: LD_INT 1
29481: PPUSH
29482: LD_VAR 0 2
29486: PPUSH
29487: CALL_OW 12
29491: ARRAY
29492: ST_TO_ADDR
// if Crawls ( un ) then
29493: LD_VAR 0 3
29497: PPUSH
29498: CALL_OW 318
29502: IFFALSE 29513
// ComWalk ( un ) ;
29504: LD_VAR 0 3
29508: PPUSH
29509: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29513: LD_VAR 0 3
29517: PPUSH
29518: LD_INT 8
29520: PPUSH
29521: CALL_OW 336
// end ; 4 :
29525: GO 29631
29527: LD_INT 4
29529: DOUBLE
29530: EQUAL
29531: IFTRUE 29535
29533: GO 29609
29535: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29536: LD_ADDR_VAR 0 2
29540: PUSH
29541: LD_INT 22
29543: PUSH
29544: LD_OWVAR 2
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 30
29555: PUSH
29556: LD_INT 29
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PPUSH
29567: CALL_OW 69
29571: ST_TO_ADDR
// if not tmp then
29572: LD_VAR 0 2
29576: NOT
29577: IFFALSE 29581
// exit ;
29579: GO 29631
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29581: LD_VAR 0 2
29585: PUSH
29586: LD_INT 1
29588: ARRAY
29589: PPUSH
29590: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29594: LD_VAR 0 2
29598: PUSH
29599: LD_INT 1
29601: ARRAY
29602: PPUSH
29603: CALL_OW 65
// end ; 5 .. 7 :
29607: GO 29631
29609: LD_INT 5
29611: DOUBLE
29612: GREATEREQUAL
29613: IFFALSE 29621
29615: LD_INT 7
29617: DOUBLE
29618: LESSEQUAL
29619: IFTRUE 29623
29621: GO 29630
29623: POP
// StreamSibBomb ; end ;
29624: CALL 25868 0 0
29628: GO 29631
29630: POP
// end ;
29631: PPOPN 3
29633: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29634: LD_EXP 81
29638: PUSH
29639: LD_EXP 131
29643: AND
29644: IFFALSE 29800
29646: GO 29648
29648: DISABLE
29649: LD_INT 0
29651: PPUSH
29652: PPUSH
29653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29654: LD_ADDR_VAR 0 2
29658: PUSH
29659: LD_INT 81
29661: PUSH
29662: LD_OWVAR 2
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: LD_INT 21
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 21
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: LIST
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PPUSH
29703: CALL_OW 69
29707: ST_TO_ADDR
// if not tmp then
29708: LD_VAR 0 2
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29800
// p := 0 ;
29717: LD_ADDR_VAR 0 3
29721: PUSH
29722: LD_INT 0
29724: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29725: LD_INT 35
29727: PPUSH
29728: CALL_OW 67
// p := p + 1 ;
29732: LD_ADDR_VAR 0 3
29736: PUSH
29737: LD_VAR 0 3
29741: PUSH
29742: LD_INT 1
29744: PLUS
29745: ST_TO_ADDR
// for i in tmp do
29746: LD_ADDR_VAR 0 1
29750: PUSH
29751: LD_VAR 0 2
29755: PUSH
29756: FOR_IN
29757: IFFALSE 29788
// if GetLives ( i ) < 1000 then
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 256
29768: PUSH
29769: LD_INT 1000
29771: LESS
29772: IFFALSE 29786
// SetLives ( i , 1000 ) ;
29774: LD_VAR 0 1
29778: PPUSH
29779: LD_INT 1000
29781: PPUSH
29782: CALL_OW 234
29786: GO 29756
29788: POP
29789: POP
// until p > 20 ;
29790: LD_VAR 0 3
29794: PUSH
29795: LD_INT 20
29797: GREATER
29798: IFFALSE 29725
// end ;
29800: PPOPN 3
29802: END
// every 0 0$1 trigger StreamModeActive and sTime do
29803: LD_EXP 81
29807: PUSH
29808: LD_EXP 132
29812: AND
29813: IFFALSE 29848
29815: GO 29817
29817: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29818: LD_INT 28
29820: PPUSH
29821: LD_OWVAR 2
29825: PPUSH
29826: LD_INT 2
29828: PPUSH
29829: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29833: LD_INT 30
29835: PPUSH
29836: LD_OWVAR 2
29840: PPUSH
29841: LD_INT 2
29843: PPUSH
29844: CALL_OW 322
// end ;
29848: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29849: LD_EXP 81
29853: PUSH
29854: LD_EXP 133
29858: AND
29859: IFFALSE 29980
29861: GO 29863
29863: DISABLE
29864: LD_INT 0
29866: PPUSH
29867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29868: LD_ADDR_VAR 0 2
29872: PUSH
29873: LD_INT 22
29875: PUSH
29876: LD_OWVAR 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 21
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 3
29897: PUSH
29898: LD_INT 23
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: LIST
29916: PPUSH
29917: CALL_OW 69
29921: ST_TO_ADDR
// if not tmp then
29922: LD_VAR 0 2
29926: NOT
29927: IFFALSE 29931
// exit ;
29929: GO 29980
// for i in tmp do
29931: LD_ADDR_VAR 0 1
29935: PUSH
29936: LD_VAR 0 2
29940: PUSH
29941: FOR_IN
29942: IFFALSE 29978
// begin if Crawls ( i ) then
29944: LD_VAR 0 1
29948: PPUSH
29949: CALL_OW 318
29953: IFFALSE 29964
// ComWalk ( i ) ;
29955: LD_VAR 0 1
29959: PPUSH
29960: CALL_OW 138
// SetClass ( i , 2 ) ;
29964: LD_VAR 0 1
29968: PPUSH
29969: LD_INT 2
29971: PPUSH
29972: CALL_OW 336
// end ;
29976: GO 29941
29978: POP
29979: POP
// end ;
29980: PPOPN 2
29982: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29983: LD_EXP 81
29987: PUSH
29988: LD_EXP 134
29992: AND
29993: IFFALSE 30281
29995: GO 29997
29997: DISABLE
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
30002: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30003: LD_OWVAR 2
30007: PPUSH
30008: LD_INT 9
30010: PPUSH
30011: LD_INT 1
30013: PPUSH
30014: LD_INT 1
30016: PPUSH
30017: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30021: LD_INT 9
30023: PPUSH
30024: LD_OWVAR 2
30028: PPUSH
30029: CALL_OW 343
// uc_side := 9 ;
30033: LD_ADDR_OWVAR 20
30037: PUSH
30038: LD_INT 9
30040: ST_TO_ADDR
// uc_nation := 2 ;
30041: LD_ADDR_OWVAR 21
30045: PUSH
30046: LD_INT 2
30048: ST_TO_ADDR
// hc_name := Dark Warrior ;
30049: LD_ADDR_OWVAR 26
30053: PUSH
30054: LD_STRING Dark Warrior
30056: ST_TO_ADDR
// hc_gallery :=  ;
30057: LD_ADDR_OWVAR 33
30061: PUSH
30062: LD_STRING 
30064: ST_TO_ADDR
// hc_noskilllimit := true ;
30065: LD_ADDR_OWVAR 76
30069: PUSH
30070: LD_INT 1
30072: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30073: LD_ADDR_OWVAR 31
30077: PUSH
30078: LD_INT 30
30080: PUSH
30081: LD_INT 30
30083: PUSH
30084: LD_INT 30
30086: PUSH
30087: LD_INT 30
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
// un := CreateHuman ;
30096: LD_ADDR_VAR 0 3
30100: PUSH
30101: CALL_OW 44
30105: ST_TO_ADDR
// hc_noskilllimit := false ;
30106: LD_ADDR_OWVAR 76
30110: PUSH
30111: LD_INT 0
30113: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30114: LD_VAR 0 3
30118: PPUSH
30119: LD_INT 1
30121: PPUSH
30122: CALL_OW 51
// ToLua ( playRanger() ) ;
30126: LD_STRING playRanger()
30128: PPUSH
30129: CALL_OW 559
// p := 0 ;
30133: LD_ADDR_VAR 0 2
30137: PUSH
30138: LD_INT 0
30140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30141: LD_INT 35
30143: PPUSH
30144: CALL_OW 67
// p := p + 1 ;
30148: LD_ADDR_VAR 0 2
30152: PUSH
30153: LD_VAR 0 2
30157: PUSH
30158: LD_INT 1
30160: PLUS
30161: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30162: LD_VAR 0 3
30166: PPUSH
30167: CALL_OW 256
30171: PUSH
30172: LD_INT 1000
30174: LESS
30175: IFFALSE 30189
// SetLives ( un , 1000 ) ;
30177: LD_VAR 0 3
30181: PPUSH
30182: LD_INT 1000
30184: PPUSH
30185: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30189: LD_VAR 0 3
30193: PPUSH
30194: LD_INT 81
30196: PUSH
30197: LD_OWVAR 2
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 91
30208: PUSH
30209: LD_VAR 0 3
30213: PUSH
30214: LD_INT 30
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PPUSH
30226: CALL_OW 69
30230: PPUSH
30231: LD_VAR 0 3
30235: PPUSH
30236: CALL_OW 74
30240: PPUSH
30241: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30245: LD_VAR 0 2
30249: PUSH
30250: LD_INT 80
30252: GREATER
30253: PUSH
30254: LD_VAR 0 3
30258: PPUSH
30259: CALL_OW 301
30263: OR
30264: IFFALSE 30141
// if un then
30266: LD_VAR 0 3
30270: IFFALSE 30281
// RemoveUnit ( un ) ;
30272: LD_VAR 0 3
30276: PPUSH
30277: CALL_OW 64
// end ;
30281: PPOPN 3
30283: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30284: LD_EXP 135
30288: IFFALSE 30404
30290: GO 30292
30292: DISABLE
30293: LD_INT 0
30295: PPUSH
30296: PPUSH
30297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30298: LD_ADDR_VAR 0 2
30302: PUSH
30303: LD_INT 81
30305: PUSH
30306: LD_OWVAR 2
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 21
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PPUSH
30329: CALL_OW 69
30333: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30334: LD_STRING playComputer()
30336: PPUSH
30337: CALL_OW 559
// if not tmp then
30341: LD_VAR 0 2
30345: NOT
30346: IFFALSE 30350
// exit ;
30348: GO 30404
// for i in tmp do
30350: LD_ADDR_VAR 0 1
30354: PUSH
30355: LD_VAR 0 2
30359: PUSH
30360: FOR_IN
30361: IFFALSE 30402
// for j := 1 to 4 do
30363: LD_ADDR_VAR 0 3
30367: PUSH
30368: DOUBLE
30369: LD_INT 1
30371: DEC
30372: ST_TO_ADDR
30373: LD_INT 4
30375: PUSH
30376: FOR_TO
30377: IFFALSE 30398
// SetSkill ( i , j , 10 ) ;
30379: LD_VAR 0 1
30383: PPUSH
30384: LD_VAR 0 3
30388: PPUSH
30389: LD_INT 10
30391: PPUSH
30392: CALL_OW 237
30396: GO 30376
30398: POP
30399: POP
30400: GO 30360
30402: POP
30403: POP
// end ;
30404: PPOPN 3
30406: END
// every 0 0$1 trigger s30 do var i , tmp ;
30407: LD_EXP 136
30411: IFFALSE 30480
30413: GO 30415
30415: DISABLE
30416: LD_INT 0
30418: PPUSH
30419: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30420: LD_ADDR_VAR 0 2
30424: PUSH
30425: LD_INT 22
30427: PUSH
30428: LD_OWVAR 2
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PPUSH
30437: CALL_OW 69
30441: ST_TO_ADDR
// if not tmp then
30442: LD_VAR 0 2
30446: NOT
30447: IFFALSE 30451
// exit ;
30449: GO 30480
// for i in tmp do
30451: LD_ADDR_VAR 0 1
30455: PUSH
30456: LD_VAR 0 2
30460: PUSH
30461: FOR_IN
30462: IFFALSE 30478
// SetLives ( i , 300 ) ;
30464: LD_VAR 0 1
30468: PPUSH
30469: LD_INT 300
30471: PPUSH
30472: CALL_OW 234
30476: GO 30461
30478: POP
30479: POP
// end ;
30480: PPOPN 2
30482: END
// every 0 0$1 trigger s60 do var i , tmp ;
30483: LD_EXP 137
30487: IFFALSE 30556
30489: GO 30491
30491: DISABLE
30492: LD_INT 0
30494: PPUSH
30495: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: LD_INT 22
30503: PUSH
30504: LD_OWVAR 2
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PPUSH
30513: CALL_OW 69
30517: ST_TO_ADDR
// if not tmp then
30518: LD_VAR 0 2
30522: NOT
30523: IFFALSE 30527
// exit ;
30525: GO 30556
// for i in tmp do
30527: LD_ADDR_VAR 0 1
30531: PUSH
30532: LD_VAR 0 2
30536: PUSH
30537: FOR_IN
30538: IFFALSE 30554
// SetLives ( i , 600 ) ;
30540: LD_VAR 0 1
30544: PPUSH
30545: LD_INT 600
30547: PPUSH
30548: CALL_OW 234
30552: GO 30537
30554: POP
30555: POP
// end ;
30556: PPOPN 2
30558: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30559: LD_INT 0
30561: PPUSH
// case cmd of 301 :
30562: LD_VAR 0 1
30566: PUSH
30567: LD_INT 301
30569: DOUBLE
30570: EQUAL
30571: IFTRUE 30575
30573: GO 30607
30575: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30576: LD_VAR 0 6
30580: PPUSH
30581: LD_VAR 0 7
30585: PPUSH
30586: LD_VAR 0 8
30590: PPUSH
30591: LD_VAR 0 4
30595: PPUSH
30596: LD_VAR 0 5
30600: PPUSH
30601: CALL 31808 0 5
30605: GO 30728
30607: LD_INT 302
30609: DOUBLE
30610: EQUAL
30611: IFTRUE 30615
30613: GO 30652
30615: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30616: LD_VAR 0 6
30620: PPUSH
30621: LD_VAR 0 7
30625: PPUSH
30626: LD_VAR 0 8
30630: PPUSH
30631: LD_VAR 0 9
30635: PPUSH
30636: LD_VAR 0 4
30640: PPUSH
30641: LD_VAR 0 5
30645: PPUSH
30646: CALL 31899 0 6
30650: GO 30728
30652: LD_INT 303
30654: DOUBLE
30655: EQUAL
30656: IFTRUE 30660
30658: GO 30697
30660: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30661: LD_VAR 0 6
30665: PPUSH
30666: LD_VAR 0 7
30670: PPUSH
30671: LD_VAR 0 8
30675: PPUSH
30676: LD_VAR 0 9
30680: PPUSH
30681: LD_VAR 0 4
30685: PPUSH
30686: LD_VAR 0 5
30690: PPUSH
30691: CALL 30733 0 6
30695: GO 30728
30697: LD_INT 304
30699: DOUBLE
30700: EQUAL
30701: IFTRUE 30705
30703: GO 30727
30705: POP
// hHackTeleport ( unit , x , y ) ; end ;
30706: LD_VAR 0 2
30710: PPUSH
30711: LD_VAR 0 4
30715: PPUSH
30716: LD_VAR 0 5
30720: PPUSH
30721: CALL 32492 0 3
30725: GO 30728
30727: POP
// end ;
30728: LD_VAR 0 12
30732: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30733: LD_INT 0
30735: PPUSH
30736: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30737: LD_VAR 0 1
30741: PUSH
30742: LD_INT 1
30744: LESS
30745: PUSH
30746: LD_VAR 0 1
30750: PUSH
30751: LD_INT 3
30753: GREATER
30754: OR
30755: PUSH
30756: LD_VAR 0 5
30760: PPUSH
30761: LD_VAR 0 6
30765: PPUSH
30766: CALL_OW 428
30770: OR
30771: IFFALSE 30775
// exit ;
30773: GO 31495
// uc_side := your_side ;
30775: LD_ADDR_OWVAR 20
30779: PUSH
30780: LD_OWVAR 2
30784: ST_TO_ADDR
// uc_nation := nation ;
30785: LD_ADDR_OWVAR 21
30789: PUSH
30790: LD_VAR 0 1
30794: ST_TO_ADDR
// bc_level = 1 ;
30795: LD_ADDR_OWVAR 43
30799: PUSH
30800: LD_INT 1
30802: ST_TO_ADDR
// case btype of 1 :
30803: LD_VAR 0 2
30807: PUSH
30808: LD_INT 1
30810: DOUBLE
30811: EQUAL
30812: IFTRUE 30816
30814: GO 30827
30816: POP
// bc_type := b_depot ; 2 :
30817: LD_ADDR_OWVAR 42
30821: PUSH
30822: LD_INT 0
30824: ST_TO_ADDR
30825: GO 31439
30827: LD_INT 2
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30846
30835: POP
// bc_type := b_warehouse ; 3 :
30836: LD_ADDR_OWVAR 42
30840: PUSH
30841: LD_INT 1
30843: ST_TO_ADDR
30844: GO 31439
30846: LD_INT 3
30848: DOUBLE
30849: EQUAL
30850: IFTRUE 30854
30852: GO 30865
30854: POP
// bc_type := b_lab ; 4 .. 9 :
30855: LD_ADDR_OWVAR 42
30859: PUSH
30860: LD_INT 6
30862: ST_TO_ADDR
30863: GO 31439
30865: LD_INT 4
30867: DOUBLE
30868: GREATEREQUAL
30869: IFFALSE 30877
30871: LD_INT 9
30873: DOUBLE
30874: LESSEQUAL
30875: IFTRUE 30879
30877: GO 30931
30879: POP
// begin bc_type := b_lab_half ;
30880: LD_ADDR_OWVAR 42
30884: PUSH
30885: LD_INT 7
30887: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30888: LD_ADDR_OWVAR 44
30892: PUSH
30893: LD_INT 10
30895: PUSH
30896: LD_INT 11
30898: PUSH
30899: LD_INT 12
30901: PUSH
30902: LD_INT 15
30904: PUSH
30905: LD_INT 14
30907: PUSH
30908: LD_INT 13
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: PUSH
30919: LD_VAR 0 2
30923: PUSH
30924: LD_INT 3
30926: MINUS
30927: ARRAY
30928: ST_TO_ADDR
// end ; 10 .. 13 :
30929: GO 31439
30931: LD_INT 10
30933: DOUBLE
30934: GREATEREQUAL
30935: IFFALSE 30943
30937: LD_INT 13
30939: DOUBLE
30940: LESSEQUAL
30941: IFTRUE 30945
30943: GO 31022
30945: POP
// begin bc_type := b_lab_full ;
30946: LD_ADDR_OWVAR 42
30950: PUSH
30951: LD_INT 8
30953: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30954: LD_ADDR_OWVAR 44
30958: PUSH
30959: LD_INT 10
30961: PUSH
30962: LD_INT 12
30964: PUSH
30965: LD_INT 14
30967: PUSH
30968: LD_INT 13
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: PUSH
30977: LD_VAR 0 2
30981: PUSH
30982: LD_INT 9
30984: MINUS
30985: ARRAY
30986: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30987: LD_ADDR_OWVAR 45
30991: PUSH
30992: LD_INT 11
30994: PUSH
30995: LD_INT 15
30997: PUSH
30998: LD_INT 12
31000: PUSH
31001: LD_INT 15
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: PUSH
31010: LD_VAR 0 2
31014: PUSH
31015: LD_INT 9
31017: MINUS
31018: ARRAY
31019: ST_TO_ADDR
// end ; 14 :
31020: GO 31439
31022: LD_INT 14
31024: DOUBLE
31025: EQUAL
31026: IFTRUE 31030
31028: GO 31041
31030: POP
// bc_type := b_workshop ; 15 :
31031: LD_ADDR_OWVAR 42
31035: PUSH
31036: LD_INT 2
31038: ST_TO_ADDR
31039: GO 31439
31041: LD_INT 15
31043: DOUBLE
31044: EQUAL
31045: IFTRUE 31049
31047: GO 31060
31049: POP
// bc_type := b_factory ; 16 :
31050: LD_ADDR_OWVAR 42
31054: PUSH
31055: LD_INT 3
31057: ST_TO_ADDR
31058: GO 31439
31060: LD_INT 16
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31079
31068: POP
// bc_type := b_ext_gun ; 17 :
31069: LD_ADDR_OWVAR 42
31073: PUSH
31074: LD_INT 17
31076: ST_TO_ADDR
31077: GO 31439
31079: LD_INT 17
31081: DOUBLE
31082: EQUAL
31083: IFTRUE 31087
31085: GO 31115
31087: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31088: LD_ADDR_OWVAR 42
31092: PUSH
31093: LD_INT 19
31095: PUSH
31096: LD_INT 23
31098: PUSH
31099: LD_INT 19
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: PUSH
31107: LD_VAR 0 1
31111: ARRAY
31112: ST_TO_ADDR
31113: GO 31439
31115: LD_INT 18
31117: DOUBLE
31118: EQUAL
31119: IFTRUE 31123
31121: GO 31134
31123: POP
// bc_type := b_ext_radar ; 19 :
31124: LD_ADDR_OWVAR 42
31128: PUSH
31129: LD_INT 20
31131: ST_TO_ADDR
31132: GO 31439
31134: LD_INT 19
31136: DOUBLE
31137: EQUAL
31138: IFTRUE 31142
31140: GO 31153
31142: POP
// bc_type := b_ext_radio ; 20 :
31143: LD_ADDR_OWVAR 42
31147: PUSH
31148: LD_INT 22
31150: ST_TO_ADDR
31151: GO 31439
31153: LD_INT 20
31155: DOUBLE
31156: EQUAL
31157: IFTRUE 31161
31159: GO 31172
31161: POP
// bc_type := b_ext_siberium ; 21 :
31162: LD_ADDR_OWVAR 42
31166: PUSH
31167: LD_INT 21
31169: ST_TO_ADDR
31170: GO 31439
31172: LD_INT 21
31174: DOUBLE
31175: EQUAL
31176: IFTRUE 31180
31178: GO 31191
31180: POP
// bc_type := b_ext_computer ; 22 :
31181: LD_ADDR_OWVAR 42
31185: PUSH
31186: LD_INT 24
31188: ST_TO_ADDR
31189: GO 31439
31191: LD_INT 22
31193: DOUBLE
31194: EQUAL
31195: IFTRUE 31199
31197: GO 31210
31199: POP
// bc_type := b_ext_track ; 23 :
31200: LD_ADDR_OWVAR 42
31204: PUSH
31205: LD_INT 16
31207: ST_TO_ADDR
31208: GO 31439
31210: LD_INT 23
31212: DOUBLE
31213: EQUAL
31214: IFTRUE 31218
31216: GO 31229
31218: POP
// bc_type := b_ext_laser ; 24 :
31219: LD_ADDR_OWVAR 42
31223: PUSH
31224: LD_INT 25
31226: ST_TO_ADDR
31227: GO 31439
31229: LD_INT 24
31231: DOUBLE
31232: EQUAL
31233: IFTRUE 31237
31235: GO 31248
31237: POP
// bc_type := b_control_tower ; 25 :
31238: LD_ADDR_OWVAR 42
31242: PUSH
31243: LD_INT 36
31245: ST_TO_ADDR
31246: GO 31439
31248: LD_INT 25
31250: DOUBLE
31251: EQUAL
31252: IFTRUE 31256
31254: GO 31267
31256: POP
// bc_type := b_breastwork ; 26 :
31257: LD_ADDR_OWVAR 42
31261: PUSH
31262: LD_INT 31
31264: ST_TO_ADDR
31265: GO 31439
31267: LD_INT 26
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31286
31275: POP
// bc_type := b_bunker ; 27 :
31276: LD_ADDR_OWVAR 42
31280: PUSH
31281: LD_INT 32
31283: ST_TO_ADDR
31284: GO 31439
31286: LD_INT 27
31288: DOUBLE
31289: EQUAL
31290: IFTRUE 31294
31292: GO 31305
31294: POP
// bc_type := b_turret ; 28 :
31295: LD_ADDR_OWVAR 42
31299: PUSH
31300: LD_INT 33
31302: ST_TO_ADDR
31303: GO 31439
31305: LD_INT 28
31307: DOUBLE
31308: EQUAL
31309: IFTRUE 31313
31311: GO 31324
31313: POP
// bc_type := b_armoury ; 29 :
31314: LD_ADDR_OWVAR 42
31318: PUSH
31319: LD_INT 4
31321: ST_TO_ADDR
31322: GO 31439
31324: LD_INT 29
31326: DOUBLE
31327: EQUAL
31328: IFTRUE 31332
31330: GO 31343
31332: POP
// bc_type := b_barracks ; 30 :
31333: LD_ADDR_OWVAR 42
31337: PUSH
31338: LD_INT 5
31340: ST_TO_ADDR
31341: GO 31439
31343: LD_INT 30
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31351
31349: GO 31362
31351: POP
// bc_type := b_solar_power ; 31 :
31352: LD_ADDR_OWVAR 42
31356: PUSH
31357: LD_INT 27
31359: ST_TO_ADDR
31360: GO 31439
31362: LD_INT 31
31364: DOUBLE
31365: EQUAL
31366: IFTRUE 31370
31368: GO 31381
31370: POP
// bc_type := b_oil_power ; 32 :
31371: LD_ADDR_OWVAR 42
31375: PUSH
31376: LD_INT 26
31378: ST_TO_ADDR
31379: GO 31439
31381: LD_INT 32
31383: DOUBLE
31384: EQUAL
31385: IFTRUE 31389
31387: GO 31400
31389: POP
// bc_type := b_siberite_power ; 33 :
31390: LD_ADDR_OWVAR 42
31394: PUSH
31395: LD_INT 28
31397: ST_TO_ADDR
31398: GO 31439
31400: LD_INT 33
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31419
31408: POP
// bc_type := b_oil_mine ; 34 :
31409: LD_ADDR_OWVAR 42
31413: PUSH
31414: LD_INT 29
31416: ST_TO_ADDR
31417: GO 31439
31419: LD_INT 34
31421: DOUBLE
31422: EQUAL
31423: IFTRUE 31427
31425: GO 31438
31427: POP
// bc_type := b_siberite_mine ; end ;
31428: LD_ADDR_OWVAR 42
31432: PUSH
31433: LD_INT 30
31435: ST_TO_ADDR
31436: GO 31439
31438: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31439: LD_ADDR_VAR 0 8
31443: PUSH
31444: LD_VAR 0 5
31448: PPUSH
31449: LD_VAR 0 6
31453: PPUSH
31454: LD_VAR 0 3
31458: PPUSH
31459: CALL_OW 47
31463: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31464: LD_OWVAR 42
31468: PUSH
31469: LD_INT 32
31471: PUSH
31472: LD_INT 33
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: IN
31479: IFFALSE 31495
// PlaceWeaponTurret ( b , weapon ) ;
31481: LD_VAR 0 8
31485: PPUSH
31486: LD_VAR 0 4
31490: PPUSH
31491: CALL_OW 431
// end ;
31495: LD_VAR 0 7
31499: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31500: LD_INT 0
31502: PPUSH
31503: PPUSH
31504: PPUSH
31505: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31506: LD_ADDR_VAR 0 4
31510: PUSH
31511: LD_INT 22
31513: PUSH
31514: LD_OWVAR 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: LD_INT 30
31528: PUSH
31529: LD_INT 0
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 30
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PPUSH
31555: CALL_OW 69
31559: ST_TO_ADDR
// if not tmp then
31560: LD_VAR 0 4
31564: NOT
31565: IFFALSE 31569
// exit ;
31567: GO 31628
// for i in tmp do
31569: LD_ADDR_VAR 0 2
31573: PUSH
31574: LD_VAR 0 4
31578: PUSH
31579: FOR_IN
31580: IFFALSE 31626
// for j = 1 to 3 do
31582: LD_ADDR_VAR 0 3
31586: PUSH
31587: DOUBLE
31588: LD_INT 1
31590: DEC
31591: ST_TO_ADDR
31592: LD_INT 3
31594: PUSH
31595: FOR_TO
31596: IFFALSE 31622
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31598: LD_VAR 0 2
31602: PPUSH
31603: CALL_OW 274
31607: PPUSH
31608: LD_VAR 0 3
31612: PPUSH
31613: LD_INT 99999
31615: PPUSH
31616: CALL_OW 277
31620: GO 31595
31622: POP
31623: POP
31624: GO 31579
31626: POP
31627: POP
// end ;
31628: LD_VAR 0 1
31632: RET
// export function hHackSetLevel10 ; var i , j ; begin
31633: LD_INT 0
31635: PPUSH
31636: PPUSH
31637: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31638: LD_ADDR_VAR 0 2
31642: PUSH
31643: LD_INT 21
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PPUSH
31653: CALL_OW 69
31657: PUSH
31658: FOR_IN
31659: IFFALSE 31711
// if IsSelected ( i ) then
31661: LD_VAR 0 2
31665: PPUSH
31666: CALL_OW 306
31670: IFFALSE 31709
// begin for j := 1 to 4 do
31672: LD_ADDR_VAR 0 3
31676: PUSH
31677: DOUBLE
31678: LD_INT 1
31680: DEC
31681: ST_TO_ADDR
31682: LD_INT 4
31684: PUSH
31685: FOR_TO
31686: IFFALSE 31707
// SetSkill ( i , j , 10 ) ;
31688: LD_VAR 0 2
31692: PPUSH
31693: LD_VAR 0 3
31697: PPUSH
31698: LD_INT 10
31700: PPUSH
31701: CALL_OW 237
31705: GO 31685
31707: POP
31708: POP
// end ;
31709: GO 31658
31711: POP
31712: POP
// end ;
31713: LD_VAR 0 1
31717: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31718: LD_INT 0
31720: PPUSH
31721: PPUSH
31722: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31723: LD_ADDR_VAR 0 2
31727: PUSH
31728: LD_INT 22
31730: PUSH
31731: LD_OWVAR 2
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 21
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PPUSH
31754: CALL_OW 69
31758: PUSH
31759: FOR_IN
31760: IFFALSE 31801
// begin for j := 1 to 4 do
31762: LD_ADDR_VAR 0 3
31766: PUSH
31767: DOUBLE
31768: LD_INT 1
31770: DEC
31771: ST_TO_ADDR
31772: LD_INT 4
31774: PUSH
31775: FOR_TO
31776: IFFALSE 31797
// SetSkill ( i , j , 10 ) ;
31778: LD_VAR 0 2
31782: PPUSH
31783: LD_VAR 0 3
31787: PPUSH
31788: LD_INT 10
31790: PPUSH
31791: CALL_OW 237
31795: GO 31775
31797: POP
31798: POP
// end ;
31799: GO 31759
31801: POP
31802: POP
// end ;
31803: LD_VAR 0 1
31807: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31808: LD_INT 0
31810: PPUSH
// uc_side := your_side ;
31811: LD_ADDR_OWVAR 20
31815: PUSH
31816: LD_OWVAR 2
31820: ST_TO_ADDR
// uc_nation := nation ;
31821: LD_ADDR_OWVAR 21
31825: PUSH
31826: LD_VAR 0 1
31830: ST_TO_ADDR
// InitHc ;
31831: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31835: LD_INT 0
31837: PPUSH
31838: LD_VAR 0 2
31842: PPUSH
31843: LD_VAR 0 3
31847: PPUSH
31848: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31852: LD_VAR 0 4
31856: PPUSH
31857: LD_VAR 0 5
31861: PPUSH
31862: CALL_OW 428
31866: PUSH
31867: LD_INT 0
31869: EQUAL
31870: IFFALSE 31894
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31872: CALL_OW 44
31876: PPUSH
31877: LD_VAR 0 4
31881: PPUSH
31882: LD_VAR 0 5
31886: PPUSH
31887: LD_INT 1
31889: PPUSH
31890: CALL_OW 48
// end ;
31894: LD_VAR 0 6
31898: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31899: LD_INT 0
31901: PPUSH
31902: PPUSH
// uc_side := your_side ;
31903: LD_ADDR_OWVAR 20
31907: PUSH
31908: LD_OWVAR 2
31912: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31913: LD_VAR 0 1
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: LD_INT 3
31926: PUSH
31927: LD_INT 4
31929: PUSH
31930: LD_INT 5
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: IN
31940: IFFALSE 31952
// uc_nation := nation_american else
31942: LD_ADDR_OWVAR 21
31946: PUSH
31947: LD_INT 1
31949: ST_TO_ADDR
31950: GO 31995
// if chassis in [ 11 , 12 , 13 , 14 ] then
31952: LD_VAR 0 1
31956: PUSH
31957: LD_INT 11
31959: PUSH
31960: LD_INT 12
31962: PUSH
31963: LD_INT 13
31965: PUSH
31966: LD_INT 14
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: IN
31975: IFFALSE 31987
// uc_nation := nation_arabian else
31977: LD_ADDR_OWVAR 21
31981: PUSH
31982: LD_INT 2
31984: ST_TO_ADDR
31985: GO 31995
// uc_nation := nation_russian ;
31987: LD_ADDR_OWVAR 21
31991: PUSH
31992: LD_INT 3
31994: ST_TO_ADDR
// vc_chassis := chassis ;
31995: LD_ADDR_OWVAR 37
31999: PUSH
32000: LD_VAR 0 1
32004: ST_TO_ADDR
// vc_engine := engine ;
32005: LD_ADDR_OWVAR 39
32009: PUSH
32010: LD_VAR 0 2
32014: ST_TO_ADDR
// vc_control := control ;
32015: LD_ADDR_OWVAR 38
32019: PUSH
32020: LD_VAR 0 3
32024: ST_TO_ADDR
// vc_weapon := weapon ;
32025: LD_ADDR_OWVAR 40
32029: PUSH
32030: LD_VAR 0 4
32034: ST_TO_ADDR
// un := CreateVehicle ;
32035: LD_ADDR_VAR 0 8
32039: PUSH
32040: CALL_OW 45
32044: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32045: LD_VAR 0 8
32049: PPUSH
32050: LD_INT 0
32052: PPUSH
32053: LD_INT 5
32055: PPUSH
32056: CALL_OW 12
32060: PPUSH
32061: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32065: LD_VAR 0 8
32069: PPUSH
32070: LD_VAR 0 5
32074: PPUSH
32075: LD_VAR 0 6
32079: PPUSH
32080: LD_INT 1
32082: PPUSH
32083: CALL_OW 48
// end ;
32087: LD_VAR 0 7
32091: RET
// export hInvincible ; every 1 do
32092: GO 32094
32094: DISABLE
// hInvincible := [ ] ;
32095: LD_ADDR_EXP 138
32099: PUSH
32100: EMPTY
32101: ST_TO_ADDR
32102: END
// every 10 do var i ;
32103: GO 32105
32105: DISABLE
32106: LD_INT 0
32108: PPUSH
// begin enable ;
32109: ENABLE
// if not hInvincible then
32110: LD_EXP 138
32114: NOT
32115: IFFALSE 32119
// exit ;
32117: GO 32163
// for i in hInvincible do
32119: LD_ADDR_VAR 0 1
32123: PUSH
32124: LD_EXP 138
32128: PUSH
32129: FOR_IN
32130: IFFALSE 32161
// if GetLives ( i ) < 1000 then
32132: LD_VAR 0 1
32136: PPUSH
32137: CALL_OW 256
32141: PUSH
32142: LD_INT 1000
32144: LESS
32145: IFFALSE 32159
// SetLives ( i , 1000 ) ;
32147: LD_VAR 0 1
32151: PPUSH
32152: LD_INT 1000
32154: PPUSH
32155: CALL_OW 234
32159: GO 32129
32161: POP
32162: POP
// end ;
32163: PPOPN 1
32165: END
// export function hHackInvincible ; var i ; begin
32166: LD_INT 0
32168: PPUSH
32169: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32170: LD_ADDR_VAR 0 2
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: LD_INT 21
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 21
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: LIST
32202: PPUSH
32203: CALL_OW 69
32207: PUSH
32208: FOR_IN
32209: IFFALSE 32270
// if IsSelected ( i ) then
32211: LD_VAR 0 2
32215: PPUSH
32216: CALL_OW 306
32220: IFFALSE 32268
// begin if i in hInvincible then
32222: LD_VAR 0 2
32226: PUSH
32227: LD_EXP 138
32231: IN
32232: IFFALSE 32252
// hInvincible := hInvincible diff i else
32234: LD_ADDR_EXP 138
32238: PUSH
32239: LD_EXP 138
32243: PUSH
32244: LD_VAR 0 2
32248: DIFF
32249: ST_TO_ADDR
32250: GO 32268
// hInvincible := hInvincible union i ;
32252: LD_ADDR_EXP 138
32256: PUSH
32257: LD_EXP 138
32261: PUSH
32262: LD_VAR 0 2
32266: UNION
32267: ST_TO_ADDR
// end ;
32268: GO 32208
32270: POP
32271: POP
// end ;
32272: LD_VAR 0 1
32276: RET
// export function hHackInvisible ; var i , j ; begin
32277: LD_INT 0
32279: PPUSH
32280: PPUSH
32281: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32282: LD_ADDR_VAR 0 2
32286: PUSH
32287: LD_INT 21
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PPUSH
32297: CALL_OW 69
32301: PUSH
32302: FOR_IN
32303: IFFALSE 32327
// if IsSelected ( i ) then
32305: LD_VAR 0 2
32309: PPUSH
32310: CALL_OW 306
32314: IFFALSE 32325
// ComForceInvisible ( i ) ;
32316: LD_VAR 0 2
32320: PPUSH
32321: CALL_OW 496
32325: GO 32302
32327: POP
32328: POP
// end ;
32329: LD_VAR 0 1
32333: RET
// export function hHackChangeYourSide ; begin
32334: LD_INT 0
32336: PPUSH
// if your_side = 8 then
32337: LD_OWVAR 2
32341: PUSH
32342: LD_INT 8
32344: EQUAL
32345: IFFALSE 32357
// your_side := 0 else
32347: LD_ADDR_OWVAR 2
32351: PUSH
32352: LD_INT 0
32354: ST_TO_ADDR
32355: GO 32371
// your_side := your_side + 1 ;
32357: LD_ADDR_OWVAR 2
32361: PUSH
32362: LD_OWVAR 2
32366: PUSH
32367: LD_INT 1
32369: PLUS
32370: ST_TO_ADDR
// end ;
32371: LD_VAR 0 1
32375: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32376: LD_INT 0
32378: PPUSH
32379: PPUSH
32380: PPUSH
// for i in all_units do
32381: LD_ADDR_VAR 0 2
32385: PUSH
32386: LD_OWVAR 3
32390: PUSH
32391: FOR_IN
32392: IFFALSE 32470
// if IsSelected ( i ) then
32394: LD_VAR 0 2
32398: PPUSH
32399: CALL_OW 306
32403: IFFALSE 32468
// begin j := GetSide ( i ) ;
32405: LD_ADDR_VAR 0 3
32409: PUSH
32410: LD_VAR 0 2
32414: PPUSH
32415: CALL_OW 255
32419: ST_TO_ADDR
// if j = 8 then
32420: LD_VAR 0 3
32424: PUSH
32425: LD_INT 8
32427: EQUAL
32428: IFFALSE 32440
// j := 0 else
32430: LD_ADDR_VAR 0 3
32434: PUSH
32435: LD_INT 0
32437: ST_TO_ADDR
32438: GO 32454
// j := j + 1 ;
32440: LD_ADDR_VAR 0 3
32444: PUSH
32445: LD_VAR 0 3
32449: PUSH
32450: LD_INT 1
32452: PLUS
32453: ST_TO_ADDR
// SetSide ( i , j ) ;
32454: LD_VAR 0 2
32458: PPUSH
32459: LD_VAR 0 3
32463: PPUSH
32464: CALL_OW 235
// end ;
32468: GO 32391
32470: POP
32471: POP
// end ;
32472: LD_VAR 0 1
32476: RET
// export function hHackFog ; begin
32477: LD_INT 0
32479: PPUSH
// FogOff ( true ) ;
32480: LD_INT 1
32482: PPUSH
32483: CALL_OW 344
// end ;
32487: LD_VAR 0 1
32491: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32492: LD_INT 0
32494: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32495: LD_VAR 0 1
32499: PPUSH
32500: LD_VAR 0 2
32504: PPUSH
32505: LD_VAR 0 3
32509: PPUSH
32510: LD_INT 1
32512: PPUSH
32513: LD_INT 1
32515: PPUSH
32516: CALL_OW 483
// CenterOnXY ( x , y ) ;
32520: LD_VAR 0 2
32524: PPUSH
32525: LD_VAR 0 3
32529: PPUSH
32530: CALL_OW 84
// end ; end_of_file
32534: LD_VAR 0 4
32538: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32539: LD_INT 0
32541: PPUSH
32542: PPUSH
32543: PPUSH
32544: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32545: LD_VAR 0 1
32549: PPUSH
32550: CALL_OW 264
32554: PUSH
32555: LD_EXP 66
32559: EQUAL
32560: IFFALSE 32632
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32562: LD_INT 68
32564: PPUSH
32565: LD_VAR 0 1
32569: PPUSH
32570: CALL_OW 255
32574: PPUSH
32575: CALL_OW 321
32579: PUSH
32580: LD_INT 2
32582: EQUAL
32583: IFFALSE 32595
// eff := 70 else
32585: LD_ADDR_VAR 0 4
32589: PUSH
32590: LD_INT 70
32592: ST_TO_ADDR
32593: GO 32603
// eff := 30 ;
32595: LD_ADDR_VAR 0 4
32599: PUSH
32600: LD_INT 30
32602: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32603: LD_VAR 0 1
32607: PPUSH
32608: CALL_OW 250
32612: PPUSH
32613: LD_VAR 0 1
32617: PPUSH
32618: CALL_OW 251
32622: PPUSH
32623: LD_VAR 0 4
32627: PPUSH
32628: CALL_OW 495
// end ; end ;
32632: LD_VAR 0 2
32636: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32637: LD_INT 0
32639: PPUSH
// end ;
32640: LD_VAR 0 4
32644: RET
// export function SOS_Command ( cmd ) ; begin
32645: LD_INT 0
32647: PPUSH
// end ;
32648: LD_VAR 0 2
32652: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32653: LD_INT 0
32655: PPUSH
// end ;
32656: LD_VAR 0 6
32660: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32661: LD_INT 0
32663: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32664: LD_VAR 0 1
32668: PUSH
32669: LD_INT 250
32671: EQUAL
32672: PUSH
32673: LD_VAR 0 2
32677: PPUSH
32678: CALL_OW 264
32682: PUSH
32683: LD_EXP 69
32687: EQUAL
32688: AND
32689: IFFALSE 32710
// MinerPlaceMine ( unit , x , y ) ;
32691: LD_VAR 0 2
32695: PPUSH
32696: LD_VAR 0 4
32700: PPUSH
32701: LD_VAR 0 5
32705: PPUSH
32706: CALL 35059 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32710: LD_VAR 0 1
32714: PUSH
32715: LD_INT 251
32717: EQUAL
32718: PUSH
32719: LD_VAR 0 2
32723: PPUSH
32724: CALL_OW 264
32728: PUSH
32729: LD_EXP 69
32733: EQUAL
32734: AND
32735: IFFALSE 32756
// MinerDetonateMine ( unit , x , y ) ;
32737: LD_VAR 0 2
32741: PPUSH
32742: LD_VAR 0 4
32746: PPUSH
32747: LD_VAR 0 5
32751: PPUSH
32752: CALL 35336 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32756: LD_VAR 0 1
32760: PUSH
32761: LD_INT 252
32763: EQUAL
32764: PUSH
32765: LD_VAR 0 2
32769: PPUSH
32770: CALL_OW 264
32774: PUSH
32775: LD_EXP 69
32779: EQUAL
32780: AND
32781: IFFALSE 32802
// MinerCreateMinefield ( unit , x , y ) ;
32783: LD_VAR 0 2
32787: PPUSH
32788: LD_VAR 0 4
32792: PPUSH
32793: LD_VAR 0 5
32797: PPUSH
32798: CALL 35753 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32802: LD_VAR 0 1
32806: PUSH
32807: LD_INT 253
32809: EQUAL
32810: PUSH
32811: LD_VAR 0 2
32815: PPUSH
32816: CALL_OW 257
32820: PUSH
32821: LD_INT 5
32823: EQUAL
32824: AND
32825: IFFALSE 32846
// ComBinocular ( unit , x , y ) ;
32827: LD_VAR 0 2
32831: PPUSH
32832: LD_VAR 0 4
32836: PPUSH
32837: LD_VAR 0 5
32841: PPUSH
32842: CALL 36124 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32846: LD_VAR 0 1
32850: PUSH
32851: LD_INT 254
32853: EQUAL
32854: PUSH
32855: LD_VAR 0 2
32859: PPUSH
32860: CALL_OW 264
32864: PUSH
32865: LD_EXP 64
32869: EQUAL
32870: AND
32871: PUSH
32872: LD_VAR 0 3
32876: PPUSH
32877: CALL_OW 263
32881: PUSH
32882: LD_INT 3
32884: EQUAL
32885: AND
32886: IFFALSE 32902
// HackDestroyVehicle ( unit , selectedUnit ) ;
32888: LD_VAR 0 2
32892: PPUSH
32893: LD_VAR 0 3
32897: PPUSH
32898: CALL 34419 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32902: LD_VAR 0 1
32906: PUSH
32907: LD_INT 255
32909: EQUAL
32910: PUSH
32911: LD_VAR 0 2
32915: PPUSH
32916: CALL_OW 264
32920: PUSH
32921: LD_INT 14
32923: PUSH
32924: LD_INT 53
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: IN
32931: AND
32932: PUSH
32933: LD_VAR 0 4
32937: PPUSH
32938: LD_VAR 0 5
32942: PPUSH
32943: CALL_OW 488
32947: AND
32948: IFFALSE 32972
// CutTreeXYR ( unit , x , y , 12 ) ;
32950: LD_VAR 0 2
32954: PPUSH
32955: LD_VAR 0 4
32959: PPUSH
32960: LD_VAR 0 5
32964: PPUSH
32965: LD_INT 12
32967: PPUSH
32968: CALL 32985 0 4
// end ;
32972: LD_VAR 0 6
32976: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32977: LD_INT 0
32979: PPUSH
// end ;
32980: LD_VAR 0 4
32984: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32985: LD_INT 0
32987: PPUSH
32988: PPUSH
32989: PPUSH
32990: PPUSH
32991: PPUSH
32992: PPUSH
32993: PPUSH
32994: PPUSH
32995: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32996: LD_VAR 0 1
33000: NOT
33001: PUSH
33002: LD_VAR 0 2
33006: PPUSH
33007: LD_VAR 0 3
33011: PPUSH
33012: CALL_OW 488
33016: NOT
33017: OR
33018: PUSH
33019: LD_VAR 0 4
33023: NOT
33024: OR
33025: IFFALSE 33029
// exit ;
33027: GO 33369
// list := [ ] ;
33029: LD_ADDR_VAR 0 13
33033: PUSH
33034: EMPTY
33035: ST_TO_ADDR
// if x - r < 0 then
33036: LD_VAR 0 2
33040: PUSH
33041: LD_VAR 0 4
33045: MINUS
33046: PUSH
33047: LD_INT 0
33049: LESS
33050: IFFALSE 33062
// min_x := 0 else
33052: LD_ADDR_VAR 0 7
33056: PUSH
33057: LD_INT 0
33059: ST_TO_ADDR
33060: GO 33078
// min_x := x - r ;
33062: LD_ADDR_VAR 0 7
33066: PUSH
33067: LD_VAR 0 2
33071: PUSH
33072: LD_VAR 0 4
33076: MINUS
33077: ST_TO_ADDR
// if y - r < 0 then
33078: LD_VAR 0 3
33082: PUSH
33083: LD_VAR 0 4
33087: MINUS
33088: PUSH
33089: LD_INT 0
33091: LESS
33092: IFFALSE 33104
// min_y := 0 else
33094: LD_ADDR_VAR 0 8
33098: PUSH
33099: LD_INT 0
33101: ST_TO_ADDR
33102: GO 33120
// min_y := y - r ;
33104: LD_ADDR_VAR 0 8
33108: PUSH
33109: LD_VAR 0 3
33113: PUSH
33114: LD_VAR 0 4
33118: MINUS
33119: ST_TO_ADDR
// max_x := x + r ;
33120: LD_ADDR_VAR 0 9
33124: PUSH
33125: LD_VAR 0 2
33129: PUSH
33130: LD_VAR 0 4
33134: PLUS
33135: ST_TO_ADDR
// max_y := y + r ;
33136: LD_ADDR_VAR 0 10
33140: PUSH
33141: LD_VAR 0 3
33145: PUSH
33146: LD_VAR 0 4
33150: PLUS
33151: ST_TO_ADDR
// for _x = min_x to max_x do
33152: LD_ADDR_VAR 0 11
33156: PUSH
33157: DOUBLE
33158: LD_VAR 0 7
33162: DEC
33163: ST_TO_ADDR
33164: LD_VAR 0 9
33168: PUSH
33169: FOR_TO
33170: IFFALSE 33287
// for _y = min_y to max_y do
33172: LD_ADDR_VAR 0 12
33176: PUSH
33177: DOUBLE
33178: LD_VAR 0 8
33182: DEC
33183: ST_TO_ADDR
33184: LD_VAR 0 10
33188: PUSH
33189: FOR_TO
33190: IFFALSE 33283
// begin if not ValidHex ( _x , _y ) then
33192: LD_VAR 0 11
33196: PPUSH
33197: LD_VAR 0 12
33201: PPUSH
33202: CALL_OW 488
33206: NOT
33207: IFFALSE 33211
// continue ;
33209: GO 33189
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33211: LD_VAR 0 11
33215: PPUSH
33216: LD_VAR 0 12
33220: PPUSH
33221: CALL_OW 351
33225: PUSH
33226: LD_VAR 0 11
33230: PPUSH
33231: LD_VAR 0 12
33235: PPUSH
33236: CALL_OW 554
33240: AND
33241: IFFALSE 33281
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33243: LD_ADDR_VAR 0 13
33247: PUSH
33248: LD_VAR 0 13
33252: PPUSH
33253: LD_VAR 0 13
33257: PUSH
33258: LD_INT 1
33260: PLUS
33261: PPUSH
33262: LD_VAR 0 11
33266: PUSH
33267: LD_VAR 0 12
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PPUSH
33276: CALL_OW 2
33280: ST_TO_ADDR
// end ;
33281: GO 33189
33283: POP
33284: POP
33285: GO 33169
33287: POP
33288: POP
// if not list then
33289: LD_VAR 0 13
33293: NOT
33294: IFFALSE 33298
// exit ;
33296: GO 33369
// for i in list do
33298: LD_ADDR_VAR 0 6
33302: PUSH
33303: LD_VAR 0 13
33307: PUSH
33308: FOR_IN
33309: IFFALSE 33367
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33311: LD_VAR 0 1
33315: PPUSH
33316: LD_STRING M
33318: PUSH
33319: LD_VAR 0 6
33323: PUSH
33324: LD_INT 1
33326: ARRAY
33327: PUSH
33328: LD_VAR 0 6
33332: PUSH
33333: LD_INT 2
33335: ARRAY
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: PUSH
33358: EMPTY
33359: LIST
33360: PPUSH
33361: CALL_OW 447
33365: GO 33308
33367: POP
33368: POP
// end ;
33369: LD_VAR 0 5
33373: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33374: LD_EXP 141
33378: NOT
33379: IFFALSE 33429
33381: GO 33383
33383: DISABLE
// begin initHack := true ;
33384: LD_ADDR_EXP 141
33388: PUSH
33389: LD_INT 1
33391: ST_TO_ADDR
// hackTanks := [ ] ;
33392: LD_ADDR_EXP 142
33396: PUSH
33397: EMPTY
33398: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33399: LD_ADDR_EXP 143
33403: PUSH
33404: EMPTY
33405: ST_TO_ADDR
// hackLimit := 3 ;
33406: LD_ADDR_EXP 144
33410: PUSH
33411: LD_INT 3
33413: ST_TO_ADDR
// hackDist := 12 ;
33414: LD_ADDR_EXP 145
33418: PUSH
33419: LD_INT 12
33421: ST_TO_ADDR
// hackCounter := [ ] ;
33422: LD_ADDR_EXP 146
33426: PUSH
33427: EMPTY
33428: ST_TO_ADDR
// end ;
33429: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33430: LD_EXP 141
33434: PUSH
33435: LD_INT 34
33437: PUSH
33438: LD_EXP 64
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PPUSH
33447: CALL_OW 69
33451: AND
33452: IFFALSE 33707
33454: GO 33456
33456: DISABLE
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
// begin enable ;
33461: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33462: LD_ADDR_VAR 0 1
33466: PUSH
33467: LD_INT 34
33469: PUSH
33470: LD_EXP 64
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PPUSH
33479: CALL_OW 69
33483: PUSH
33484: FOR_IN
33485: IFFALSE 33705
// begin if not i in hackTanks then
33487: LD_VAR 0 1
33491: PUSH
33492: LD_EXP 142
33496: IN
33497: NOT
33498: IFFALSE 33581
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33500: LD_ADDR_EXP 142
33504: PUSH
33505: LD_EXP 142
33509: PPUSH
33510: LD_EXP 142
33514: PUSH
33515: LD_INT 1
33517: PLUS
33518: PPUSH
33519: LD_VAR 0 1
33523: PPUSH
33524: CALL_OW 1
33528: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33529: LD_ADDR_EXP 143
33533: PUSH
33534: LD_EXP 143
33538: PPUSH
33539: LD_EXP 143
33543: PUSH
33544: LD_INT 1
33546: PLUS
33547: PPUSH
33548: EMPTY
33549: PPUSH
33550: CALL_OW 1
33554: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33555: LD_ADDR_EXP 146
33559: PUSH
33560: LD_EXP 146
33564: PPUSH
33565: LD_EXP 146
33569: PUSH
33570: LD_INT 1
33572: PLUS
33573: PPUSH
33574: EMPTY
33575: PPUSH
33576: CALL_OW 1
33580: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33581: LD_VAR 0 1
33585: PPUSH
33586: CALL_OW 302
33590: NOT
33591: IFFALSE 33604
// begin HackUnlinkAll ( i ) ;
33593: LD_VAR 0 1
33597: PPUSH
33598: CALL 33710 0 1
// continue ;
33602: GO 33484
// end ; HackCheckCapturedStatus ( i ) ;
33604: LD_VAR 0 1
33608: PPUSH
33609: CALL 34153 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33613: LD_ADDR_VAR 0 2
33617: PUSH
33618: LD_INT 81
33620: PUSH
33621: LD_VAR 0 1
33625: PPUSH
33626: CALL_OW 255
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 33
33637: PUSH
33638: LD_INT 3
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 91
33647: PUSH
33648: LD_VAR 0 1
33652: PUSH
33653: LD_EXP 145
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 50
33665: PUSH
33666: EMPTY
33667: LIST
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: PPUSH
33675: CALL_OW 69
33679: ST_TO_ADDR
// if not tmp then
33680: LD_VAR 0 2
33684: NOT
33685: IFFALSE 33689
// continue ;
33687: GO 33484
// HackLink ( i , tmp ) ;
33689: LD_VAR 0 1
33693: PPUSH
33694: LD_VAR 0 2
33698: PPUSH
33699: CALL 33846 0 2
// end ;
33703: GO 33484
33705: POP
33706: POP
// end ;
33707: PPOPN 2
33709: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33710: LD_INT 0
33712: PPUSH
33713: PPUSH
33714: PPUSH
// if not hack in hackTanks then
33715: LD_VAR 0 1
33719: PUSH
33720: LD_EXP 142
33724: IN
33725: NOT
33726: IFFALSE 33730
// exit ;
33728: GO 33841
// index := GetElementIndex ( hackTanks , hack ) ;
33730: LD_ADDR_VAR 0 4
33734: PUSH
33735: LD_EXP 142
33739: PPUSH
33740: LD_VAR 0 1
33744: PPUSH
33745: CALL 41315 0 2
33749: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33750: LD_EXP 143
33754: PUSH
33755: LD_VAR 0 4
33759: ARRAY
33760: IFFALSE 33841
// begin for i in hackTanksCaptured [ index ] do
33762: LD_ADDR_VAR 0 3
33766: PUSH
33767: LD_EXP 143
33771: PUSH
33772: LD_VAR 0 4
33776: ARRAY
33777: PUSH
33778: FOR_IN
33779: IFFALSE 33805
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33781: LD_VAR 0 3
33785: PUSH
33786: LD_INT 1
33788: ARRAY
33789: PPUSH
33790: LD_VAR 0 3
33794: PUSH
33795: LD_INT 2
33797: ARRAY
33798: PPUSH
33799: CALL_OW 235
33803: GO 33778
33805: POP
33806: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33807: LD_ADDR_EXP 143
33811: PUSH
33812: LD_EXP 143
33816: PPUSH
33817: LD_VAR 0 4
33821: PPUSH
33822: EMPTY
33823: PPUSH
33824: CALL_OW 1
33828: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33829: LD_VAR 0 1
33833: PPUSH
33834: LD_INT 0
33836: PPUSH
33837: CALL_OW 505
// end ; end ;
33841: LD_VAR 0 2
33845: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33846: LD_INT 0
33848: PPUSH
33849: PPUSH
33850: PPUSH
// if not hack in hackTanks or not vehicles then
33851: LD_VAR 0 1
33855: PUSH
33856: LD_EXP 142
33860: IN
33861: NOT
33862: PUSH
33863: LD_VAR 0 2
33867: NOT
33868: OR
33869: IFFALSE 33873
// exit ;
33871: GO 34148
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33873: LD_ADDR_VAR 0 2
33877: PUSH
33878: LD_VAR 0 1
33882: PPUSH
33883: LD_VAR 0 2
33887: PPUSH
33888: LD_INT 1
33890: PPUSH
33891: LD_INT 1
33893: PPUSH
33894: CALL 41965 0 4
33898: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33899: LD_ADDR_VAR 0 5
33903: PUSH
33904: LD_EXP 142
33908: PPUSH
33909: LD_VAR 0 1
33913: PPUSH
33914: CALL 41315 0 2
33918: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33919: LD_EXP 143
33923: PUSH
33924: LD_VAR 0 5
33928: ARRAY
33929: PUSH
33930: LD_EXP 144
33934: LESS
33935: IFFALSE 34124
// begin for i := 1 to vehicles do
33937: LD_ADDR_VAR 0 4
33941: PUSH
33942: DOUBLE
33943: LD_INT 1
33945: DEC
33946: ST_TO_ADDR
33947: LD_VAR 0 2
33951: PUSH
33952: FOR_TO
33953: IFFALSE 34122
// begin if hackTanksCaptured [ index ] = hackLimit then
33955: LD_EXP 143
33959: PUSH
33960: LD_VAR 0 5
33964: ARRAY
33965: PUSH
33966: LD_EXP 144
33970: EQUAL
33971: IFFALSE 33975
// break ;
33973: GO 34122
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33975: LD_ADDR_EXP 146
33979: PUSH
33980: LD_EXP 146
33984: PPUSH
33985: LD_VAR 0 5
33989: PPUSH
33990: LD_EXP 146
33994: PUSH
33995: LD_VAR 0 5
33999: ARRAY
34000: PUSH
34001: LD_INT 1
34003: PLUS
34004: PPUSH
34005: CALL_OW 1
34009: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34010: LD_ADDR_EXP 143
34014: PUSH
34015: LD_EXP 143
34019: PPUSH
34020: LD_VAR 0 5
34024: PUSH
34025: LD_EXP 143
34029: PUSH
34030: LD_VAR 0 5
34034: ARRAY
34035: PUSH
34036: LD_INT 1
34038: PLUS
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PPUSH
34044: LD_VAR 0 2
34048: PUSH
34049: LD_VAR 0 4
34053: ARRAY
34054: PUSH
34055: LD_VAR 0 2
34059: PUSH
34060: LD_VAR 0 4
34064: ARRAY
34065: PPUSH
34066: CALL_OW 255
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PPUSH
34075: CALL 41530 0 3
34079: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34080: LD_VAR 0 2
34084: PUSH
34085: LD_VAR 0 4
34089: ARRAY
34090: PPUSH
34091: LD_VAR 0 1
34095: PPUSH
34096: CALL_OW 255
34100: PPUSH
34101: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34105: LD_VAR 0 2
34109: PUSH
34110: LD_VAR 0 4
34114: ARRAY
34115: PPUSH
34116: CALL_OW 141
// end ;
34120: GO 33952
34122: POP
34123: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34124: LD_VAR 0 1
34128: PPUSH
34129: LD_EXP 143
34133: PUSH
34134: LD_VAR 0 5
34138: ARRAY
34139: PUSH
34140: LD_INT 0
34142: PLUS
34143: PPUSH
34144: CALL_OW 505
// end ;
34148: LD_VAR 0 3
34152: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34153: LD_INT 0
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
// if not hack in hackTanks then
34159: LD_VAR 0 1
34163: PUSH
34164: LD_EXP 142
34168: IN
34169: NOT
34170: IFFALSE 34174
// exit ;
34172: GO 34414
// index := GetElementIndex ( hackTanks , hack ) ;
34174: LD_ADDR_VAR 0 4
34178: PUSH
34179: LD_EXP 142
34183: PPUSH
34184: LD_VAR 0 1
34188: PPUSH
34189: CALL 41315 0 2
34193: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34194: LD_ADDR_VAR 0 3
34198: PUSH
34199: DOUBLE
34200: LD_EXP 143
34204: PUSH
34205: LD_VAR 0 4
34209: ARRAY
34210: INC
34211: ST_TO_ADDR
34212: LD_INT 1
34214: PUSH
34215: FOR_DOWNTO
34216: IFFALSE 34388
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34218: LD_ADDR_VAR 0 5
34222: PUSH
34223: LD_EXP 143
34227: PUSH
34228: LD_VAR 0 4
34232: ARRAY
34233: PUSH
34234: LD_VAR 0 3
34238: ARRAY
34239: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34240: LD_VAR 0 5
34244: PUSH
34245: LD_INT 1
34247: ARRAY
34248: PPUSH
34249: CALL_OW 302
34253: NOT
34254: PUSH
34255: LD_VAR 0 5
34259: PUSH
34260: LD_INT 1
34262: ARRAY
34263: PPUSH
34264: CALL_OW 255
34268: PUSH
34269: LD_VAR 0 1
34273: PPUSH
34274: CALL_OW 255
34278: NONEQUAL
34279: OR
34280: IFFALSE 34386
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34282: LD_VAR 0 5
34286: PUSH
34287: LD_INT 1
34289: ARRAY
34290: PPUSH
34291: CALL_OW 305
34295: PUSH
34296: LD_VAR 0 5
34300: PUSH
34301: LD_INT 1
34303: ARRAY
34304: PPUSH
34305: CALL_OW 255
34309: PUSH
34310: LD_VAR 0 1
34314: PPUSH
34315: CALL_OW 255
34319: EQUAL
34320: AND
34321: IFFALSE 34345
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34323: LD_VAR 0 5
34327: PUSH
34328: LD_INT 1
34330: ARRAY
34331: PPUSH
34332: LD_VAR 0 5
34336: PUSH
34337: LD_INT 2
34339: ARRAY
34340: PPUSH
34341: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34345: LD_ADDR_EXP 143
34349: PUSH
34350: LD_EXP 143
34354: PPUSH
34355: LD_VAR 0 4
34359: PPUSH
34360: LD_EXP 143
34364: PUSH
34365: LD_VAR 0 4
34369: ARRAY
34370: PPUSH
34371: LD_VAR 0 3
34375: PPUSH
34376: CALL_OW 3
34380: PPUSH
34381: CALL_OW 1
34385: ST_TO_ADDR
// end ; end ;
34386: GO 34215
34388: POP
34389: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34390: LD_VAR 0 1
34394: PPUSH
34395: LD_EXP 143
34399: PUSH
34400: LD_VAR 0 4
34404: ARRAY
34405: PUSH
34406: LD_INT 0
34408: PLUS
34409: PPUSH
34410: CALL_OW 505
// end ;
34414: LD_VAR 0 2
34418: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34419: LD_INT 0
34421: PPUSH
34422: PPUSH
34423: PPUSH
34424: PPUSH
// if not hack in hackTanks then
34425: LD_VAR 0 1
34429: PUSH
34430: LD_EXP 142
34434: IN
34435: NOT
34436: IFFALSE 34440
// exit ;
34438: GO 34525
// index := GetElementIndex ( hackTanks , hack ) ;
34440: LD_ADDR_VAR 0 5
34444: PUSH
34445: LD_EXP 142
34449: PPUSH
34450: LD_VAR 0 1
34454: PPUSH
34455: CALL 41315 0 2
34459: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34460: LD_ADDR_VAR 0 4
34464: PUSH
34465: DOUBLE
34466: LD_INT 1
34468: DEC
34469: ST_TO_ADDR
34470: LD_EXP 143
34474: PUSH
34475: LD_VAR 0 5
34479: ARRAY
34480: PUSH
34481: FOR_TO
34482: IFFALSE 34523
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34484: LD_EXP 143
34488: PUSH
34489: LD_VAR 0 5
34493: ARRAY
34494: PUSH
34495: LD_VAR 0 4
34499: ARRAY
34500: PUSH
34501: LD_INT 1
34503: ARRAY
34504: PUSH
34505: LD_VAR 0 2
34509: EQUAL
34510: IFFALSE 34521
// KillUnit ( vehicle ) ;
34512: LD_VAR 0 2
34516: PPUSH
34517: CALL_OW 66
34521: GO 34481
34523: POP
34524: POP
// end ;
34525: LD_VAR 0 3
34529: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34530: LD_EXP 147
34534: NOT
34535: IFFALSE 34570
34537: GO 34539
34539: DISABLE
// begin initMiner := true ;
34540: LD_ADDR_EXP 147
34544: PUSH
34545: LD_INT 1
34547: ST_TO_ADDR
// minersList := [ ] ;
34548: LD_ADDR_EXP 148
34552: PUSH
34553: EMPTY
34554: ST_TO_ADDR
// minerMinesList := [ ] ;
34555: LD_ADDR_EXP 149
34559: PUSH
34560: EMPTY
34561: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34562: LD_ADDR_EXP 150
34566: PUSH
34567: LD_INT 5
34569: ST_TO_ADDR
// end ;
34570: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34571: LD_EXP 147
34575: PUSH
34576: LD_INT 34
34578: PUSH
34579: LD_EXP 69
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PPUSH
34588: CALL_OW 69
34592: AND
34593: IFFALSE 35056
34595: GO 34597
34597: DISABLE
34598: LD_INT 0
34600: PPUSH
34601: PPUSH
34602: PPUSH
34603: PPUSH
// begin enable ;
34604: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34605: LD_ADDR_VAR 0 1
34609: PUSH
34610: LD_INT 34
34612: PUSH
34613: LD_EXP 69
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PPUSH
34622: CALL_OW 69
34626: PUSH
34627: FOR_IN
34628: IFFALSE 34700
// begin if not i in minersList then
34630: LD_VAR 0 1
34634: PUSH
34635: LD_EXP 148
34639: IN
34640: NOT
34641: IFFALSE 34698
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34643: LD_ADDR_EXP 148
34647: PUSH
34648: LD_EXP 148
34652: PPUSH
34653: LD_EXP 148
34657: PUSH
34658: LD_INT 1
34660: PLUS
34661: PPUSH
34662: LD_VAR 0 1
34666: PPUSH
34667: CALL_OW 1
34671: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34672: LD_ADDR_EXP 149
34676: PUSH
34677: LD_EXP 149
34681: PPUSH
34682: LD_EXP 149
34686: PUSH
34687: LD_INT 1
34689: PLUS
34690: PPUSH
34691: EMPTY
34692: PPUSH
34693: CALL_OW 1
34697: ST_TO_ADDR
// end end ;
34698: GO 34627
34700: POP
34701: POP
// for i := minerMinesList downto 1 do
34702: LD_ADDR_VAR 0 1
34706: PUSH
34707: DOUBLE
34708: LD_EXP 149
34712: INC
34713: ST_TO_ADDR
34714: LD_INT 1
34716: PUSH
34717: FOR_DOWNTO
34718: IFFALSE 35054
// begin if IsLive ( minersList [ i ] ) then
34720: LD_EXP 148
34724: PUSH
34725: LD_VAR 0 1
34729: ARRAY
34730: PPUSH
34731: CALL_OW 300
34735: IFFALSE 34763
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34737: LD_EXP 148
34741: PUSH
34742: LD_VAR 0 1
34746: ARRAY
34747: PPUSH
34748: LD_EXP 149
34752: PUSH
34753: LD_VAR 0 1
34757: ARRAY
34758: PPUSH
34759: CALL_OW 505
// if not minerMinesList [ i ] then
34763: LD_EXP 149
34767: PUSH
34768: LD_VAR 0 1
34772: ARRAY
34773: NOT
34774: IFFALSE 34778
// continue ;
34776: GO 34717
// for j := minerMinesList [ i ] downto 1 do
34778: LD_ADDR_VAR 0 2
34782: PUSH
34783: DOUBLE
34784: LD_EXP 149
34788: PUSH
34789: LD_VAR 0 1
34793: ARRAY
34794: INC
34795: ST_TO_ADDR
34796: LD_INT 1
34798: PUSH
34799: FOR_DOWNTO
34800: IFFALSE 35050
// begin side := GetSide ( minersList [ i ] ) ;
34802: LD_ADDR_VAR 0 3
34806: PUSH
34807: LD_EXP 148
34811: PUSH
34812: LD_VAR 0 1
34816: ARRAY
34817: PPUSH
34818: CALL_OW 255
34822: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34823: LD_ADDR_VAR 0 4
34827: PUSH
34828: LD_EXP 149
34832: PUSH
34833: LD_VAR 0 1
34837: ARRAY
34838: PUSH
34839: LD_VAR 0 2
34843: ARRAY
34844: PUSH
34845: LD_INT 1
34847: ARRAY
34848: PPUSH
34849: LD_EXP 149
34853: PUSH
34854: LD_VAR 0 1
34858: ARRAY
34859: PUSH
34860: LD_VAR 0 2
34864: ARRAY
34865: PUSH
34866: LD_INT 2
34868: ARRAY
34869: PPUSH
34870: CALL_OW 428
34874: ST_TO_ADDR
// if not tmp then
34875: LD_VAR 0 4
34879: NOT
34880: IFFALSE 34884
// continue ;
34882: GO 34799
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34884: LD_VAR 0 4
34888: PUSH
34889: LD_INT 81
34891: PUSH
34892: LD_VAR 0 3
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PPUSH
34901: CALL_OW 69
34905: IN
34906: PUSH
34907: LD_EXP 149
34911: PUSH
34912: LD_VAR 0 1
34916: ARRAY
34917: PUSH
34918: LD_VAR 0 2
34922: ARRAY
34923: PUSH
34924: LD_INT 1
34926: ARRAY
34927: PPUSH
34928: LD_EXP 149
34932: PUSH
34933: LD_VAR 0 1
34937: ARRAY
34938: PUSH
34939: LD_VAR 0 2
34943: ARRAY
34944: PUSH
34945: LD_INT 2
34947: ARRAY
34948: PPUSH
34949: CALL_OW 458
34953: AND
34954: IFFALSE 35048
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34956: LD_EXP 149
34960: PUSH
34961: LD_VAR 0 1
34965: ARRAY
34966: PUSH
34967: LD_VAR 0 2
34971: ARRAY
34972: PUSH
34973: LD_INT 1
34975: ARRAY
34976: PPUSH
34977: LD_EXP 149
34981: PUSH
34982: LD_VAR 0 1
34986: ARRAY
34987: PUSH
34988: LD_VAR 0 2
34992: ARRAY
34993: PUSH
34994: LD_INT 2
34996: ARRAY
34997: PPUSH
34998: LD_VAR 0 3
35002: PPUSH
35003: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35007: LD_ADDR_EXP 149
35011: PUSH
35012: LD_EXP 149
35016: PPUSH
35017: LD_VAR 0 1
35021: PPUSH
35022: LD_EXP 149
35026: PUSH
35027: LD_VAR 0 1
35031: ARRAY
35032: PPUSH
35033: LD_VAR 0 2
35037: PPUSH
35038: CALL_OW 3
35042: PPUSH
35043: CALL_OW 1
35047: ST_TO_ADDR
// end ; end ;
35048: GO 34799
35050: POP
35051: POP
// end ;
35052: GO 34717
35054: POP
35055: POP
// end ;
35056: PPOPN 4
35058: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35059: LD_INT 0
35061: PPUSH
35062: PPUSH
// result := false ;
35063: LD_ADDR_VAR 0 4
35067: PUSH
35068: LD_INT 0
35070: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35071: LD_VAR 0 1
35075: PPUSH
35076: CALL_OW 264
35080: PUSH
35081: LD_EXP 69
35085: EQUAL
35086: NOT
35087: IFFALSE 35091
// exit ;
35089: GO 35331
// index := GetElementIndex ( minersList , unit ) ;
35091: LD_ADDR_VAR 0 5
35095: PUSH
35096: LD_EXP 148
35100: PPUSH
35101: LD_VAR 0 1
35105: PPUSH
35106: CALL 41315 0 2
35110: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35111: LD_EXP 149
35115: PUSH
35116: LD_VAR 0 5
35120: ARRAY
35121: PUSH
35122: LD_EXP 150
35126: GREATEREQUAL
35127: IFFALSE 35131
// exit ;
35129: GO 35331
// ComMoveXY ( unit , x , y ) ;
35131: LD_VAR 0 1
35135: PPUSH
35136: LD_VAR 0 2
35140: PPUSH
35141: LD_VAR 0 3
35145: PPUSH
35146: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35150: LD_INT 35
35152: PPUSH
35153: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35157: LD_VAR 0 1
35161: PPUSH
35162: LD_VAR 0 2
35166: PPUSH
35167: LD_VAR 0 3
35171: PPUSH
35172: CALL 72087 0 3
35176: NOT
35177: PUSH
35178: LD_VAR 0 1
35182: PPUSH
35183: CALL_OW 314
35187: AND
35188: IFFALSE 35192
// exit ;
35190: GO 35331
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35192: LD_VAR 0 2
35196: PPUSH
35197: LD_VAR 0 3
35201: PPUSH
35202: CALL_OW 428
35206: PUSH
35207: LD_VAR 0 1
35211: EQUAL
35212: PUSH
35213: LD_VAR 0 1
35217: PPUSH
35218: CALL_OW 314
35222: NOT
35223: AND
35224: IFFALSE 35150
// PlaySoundXY ( x , y , PlantMine ) ;
35226: LD_VAR 0 2
35230: PPUSH
35231: LD_VAR 0 3
35235: PPUSH
35236: LD_STRING PlantMine
35238: PPUSH
35239: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35243: LD_VAR 0 2
35247: PPUSH
35248: LD_VAR 0 3
35252: PPUSH
35253: LD_VAR 0 1
35257: PPUSH
35258: CALL_OW 255
35262: PPUSH
35263: LD_INT 0
35265: PPUSH
35266: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35270: LD_ADDR_EXP 149
35274: PUSH
35275: LD_EXP 149
35279: PPUSH
35280: LD_VAR 0 5
35284: PUSH
35285: LD_EXP 149
35289: PUSH
35290: LD_VAR 0 5
35294: ARRAY
35295: PUSH
35296: LD_INT 1
35298: PLUS
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PPUSH
35304: LD_VAR 0 2
35308: PUSH
35309: LD_VAR 0 3
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PPUSH
35318: CALL 41530 0 3
35322: ST_TO_ADDR
// result := true ;
35323: LD_ADDR_VAR 0 4
35327: PUSH
35328: LD_INT 1
35330: ST_TO_ADDR
// end ;
35331: LD_VAR 0 4
35335: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35336: LD_INT 0
35338: PPUSH
35339: PPUSH
35340: PPUSH
// if not unit in minersList then
35341: LD_VAR 0 1
35345: PUSH
35346: LD_EXP 148
35350: IN
35351: NOT
35352: IFFALSE 35356
// exit ;
35354: GO 35748
// index := GetElementIndex ( minersList , unit ) ;
35356: LD_ADDR_VAR 0 6
35360: PUSH
35361: LD_EXP 148
35365: PPUSH
35366: LD_VAR 0 1
35370: PPUSH
35371: CALL 41315 0 2
35375: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35376: LD_ADDR_VAR 0 5
35380: PUSH
35381: DOUBLE
35382: LD_EXP 149
35386: PUSH
35387: LD_VAR 0 6
35391: ARRAY
35392: INC
35393: ST_TO_ADDR
35394: LD_INT 1
35396: PUSH
35397: FOR_DOWNTO
35398: IFFALSE 35559
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35400: LD_EXP 149
35404: PUSH
35405: LD_VAR 0 6
35409: ARRAY
35410: PUSH
35411: LD_VAR 0 5
35415: ARRAY
35416: PUSH
35417: LD_INT 1
35419: ARRAY
35420: PUSH
35421: LD_VAR 0 2
35425: EQUAL
35426: PUSH
35427: LD_EXP 149
35431: PUSH
35432: LD_VAR 0 6
35436: ARRAY
35437: PUSH
35438: LD_VAR 0 5
35442: ARRAY
35443: PUSH
35444: LD_INT 2
35446: ARRAY
35447: PUSH
35448: LD_VAR 0 3
35452: EQUAL
35453: AND
35454: IFFALSE 35557
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35456: LD_EXP 149
35460: PUSH
35461: LD_VAR 0 6
35465: ARRAY
35466: PUSH
35467: LD_VAR 0 5
35471: ARRAY
35472: PUSH
35473: LD_INT 1
35475: ARRAY
35476: PPUSH
35477: LD_EXP 149
35481: PUSH
35482: LD_VAR 0 6
35486: ARRAY
35487: PUSH
35488: LD_VAR 0 5
35492: ARRAY
35493: PUSH
35494: LD_INT 2
35496: ARRAY
35497: PPUSH
35498: LD_VAR 0 1
35502: PPUSH
35503: CALL_OW 255
35507: PPUSH
35508: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35512: LD_ADDR_EXP 149
35516: PUSH
35517: LD_EXP 149
35521: PPUSH
35522: LD_VAR 0 6
35526: PPUSH
35527: LD_EXP 149
35531: PUSH
35532: LD_VAR 0 6
35536: ARRAY
35537: PPUSH
35538: LD_VAR 0 5
35542: PPUSH
35543: CALL_OW 3
35547: PPUSH
35548: CALL_OW 1
35552: ST_TO_ADDR
// exit ;
35553: POP
35554: POP
35555: GO 35748
// end ; end ;
35557: GO 35397
35559: POP
35560: POP
// for i := minerMinesList [ index ] downto 1 do
35561: LD_ADDR_VAR 0 5
35565: PUSH
35566: DOUBLE
35567: LD_EXP 149
35571: PUSH
35572: LD_VAR 0 6
35576: ARRAY
35577: INC
35578: ST_TO_ADDR
35579: LD_INT 1
35581: PUSH
35582: FOR_DOWNTO
35583: IFFALSE 35746
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35585: LD_EXP 149
35589: PUSH
35590: LD_VAR 0 6
35594: ARRAY
35595: PUSH
35596: LD_VAR 0 5
35600: ARRAY
35601: PUSH
35602: LD_INT 1
35604: ARRAY
35605: PPUSH
35606: LD_EXP 149
35610: PUSH
35611: LD_VAR 0 6
35615: ARRAY
35616: PUSH
35617: LD_VAR 0 5
35621: ARRAY
35622: PUSH
35623: LD_INT 2
35625: ARRAY
35626: PPUSH
35627: LD_VAR 0 2
35631: PPUSH
35632: LD_VAR 0 3
35636: PPUSH
35637: CALL_OW 298
35641: PUSH
35642: LD_INT 6
35644: LESS
35645: IFFALSE 35744
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35647: LD_EXP 149
35651: PUSH
35652: LD_VAR 0 6
35656: ARRAY
35657: PUSH
35658: LD_VAR 0 5
35662: ARRAY
35663: PUSH
35664: LD_INT 1
35666: ARRAY
35667: PPUSH
35668: LD_EXP 149
35672: PUSH
35673: LD_VAR 0 6
35677: ARRAY
35678: PUSH
35679: LD_VAR 0 5
35683: ARRAY
35684: PUSH
35685: LD_INT 2
35687: ARRAY
35688: PPUSH
35689: LD_VAR 0 1
35693: PPUSH
35694: CALL_OW 255
35698: PPUSH
35699: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35703: LD_ADDR_EXP 149
35707: PUSH
35708: LD_EXP 149
35712: PPUSH
35713: LD_VAR 0 6
35717: PPUSH
35718: LD_EXP 149
35722: PUSH
35723: LD_VAR 0 6
35727: ARRAY
35728: PPUSH
35729: LD_VAR 0 5
35733: PPUSH
35734: CALL_OW 3
35738: PPUSH
35739: CALL_OW 1
35743: ST_TO_ADDR
// end ; end ;
35744: GO 35582
35746: POP
35747: POP
// end ;
35748: LD_VAR 0 4
35752: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35753: LD_INT 0
35755: PPUSH
35756: PPUSH
35757: PPUSH
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35764: LD_VAR 0 1
35768: PPUSH
35769: CALL_OW 264
35773: PUSH
35774: LD_EXP 69
35778: EQUAL
35779: NOT
35780: PUSH
35781: LD_VAR 0 1
35785: PUSH
35786: LD_EXP 148
35790: IN
35791: NOT
35792: OR
35793: IFFALSE 35797
// exit ;
35795: GO 36119
// index := GetElementIndex ( minersList , unit ) ;
35797: LD_ADDR_VAR 0 6
35801: PUSH
35802: LD_EXP 148
35806: PPUSH
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL 41315 0 2
35816: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35817: LD_ADDR_VAR 0 8
35821: PUSH
35822: LD_EXP 150
35826: PUSH
35827: LD_EXP 149
35831: PUSH
35832: LD_VAR 0 6
35836: ARRAY
35837: MINUS
35838: ST_TO_ADDR
// if not minesFreeAmount then
35839: LD_VAR 0 8
35843: NOT
35844: IFFALSE 35848
// exit ;
35846: GO 36119
// tmp := [ ] ;
35848: LD_ADDR_VAR 0 7
35852: PUSH
35853: EMPTY
35854: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35855: LD_ADDR_VAR 0 5
35859: PUSH
35860: DOUBLE
35861: LD_INT 1
35863: DEC
35864: ST_TO_ADDR
35865: LD_VAR 0 8
35869: PUSH
35870: FOR_TO
35871: IFFALSE 36066
// begin _d := rand ( 0 , 5 ) ;
35873: LD_ADDR_VAR 0 11
35877: PUSH
35878: LD_INT 0
35880: PPUSH
35881: LD_INT 5
35883: PPUSH
35884: CALL_OW 12
35888: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35889: LD_ADDR_VAR 0 12
35893: PUSH
35894: LD_INT 2
35896: PPUSH
35897: LD_INT 6
35899: PPUSH
35900: CALL_OW 12
35904: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35905: LD_ADDR_VAR 0 9
35909: PUSH
35910: LD_VAR 0 2
35914: PPUSH
35915: LD_VAR 0 11
35919: PPUSH
35920: LD_VAR 0 12
35924: PPUSH
35925: CALL_OW 272
35929: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35930: LD_ADDR_VAR 0 10
35934: PUSH
35935: LD_VAR 0 3
35939: PPUSH
35940: LD_VAR 0 11
35944: PPUSH
35945: LD_VAR 0 12
35949: PPUSH
35950: CALL_OW 273
35954: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35955: LD_VAR 0 9
35959: PPUSH
35960: LD_VAR 0 10
35964: PPUSH
35965: CALL_OW 488
35969: PUSH
35970: LD_VAR 0 9
35974: PUSH
35975: LD_VAR 0 10
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_VAR 0 7
35988: IN
35989: NOT
35990: AND
35991: PUSH
35992: LD_VAR 0 9
35996: PPUSH
35997: LD_VAR 0 10
36001: PPUSH
36002: CALL_OW 458
36006: NOT
36007: AND
36008: IFFALSE 36050
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36010: LD_ADDR_VAR 0 7
36014: PUSH
36015: LD_VAR 0 7
36019: PPUSH
36020: LD_VAR 0 7
36024: PUSH
36025: LD_INT 1
36027: PLUS
36028: PPUSH
36029: LD_VAR 0 9
36033: PUSH
36034: LD_VAR 0 10
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PPUSH
36043: CALL_OW 1
36047: ST_TO_ADDR
36048: GO 36064
// i := i - 1 ;
36050: LD_ADDR_VAR 0 5
36054: PUSH
36055: LD_VAR 0 5
36059: PUSH
36060: LD_INT 1
36062: MINUS
36063: ST_TO_ADDR
// end ;
36064: GO 35870
36066: POP
36067: POP
// for i in tmp do
36068: LD_ADDR_VAR 0 5
36072: PUSH
36073: LD_VAR 0 7
36077: PUSH
36078: FOR_IN
36079: IFFALSE 36117
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36081: LD_VAR 0 1
36085: PPUSH
36086: LD_VAR 0 5
36090: PUSH
36091: LD_INT 1
36093: ARRAY
36094: PPUSH
36095: LD_VAR 0 5
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PPUSH
36104: CALL 35059 0 3
36108: NOT
36109: IFFALSE 36115
// exit ;
36111: POP
36112: POP
36113: GO 36119
36115: GO 36078
36117: POP
36118: POP
// end ;
36119: LD_VAR 0 4
36123: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36124: LD_INT 0
36126: PPUSH
36127: PPUSH
36128: PPUSH
36129: PPUSH
36130: PPUSH
36131: PPUSH
36132: PPUSH
// if not GetClass ( unit ) = class_sniper then
36133: LD_VAR 0 1
36137: PPUSH
36138: CALL_OW 257
36142: PUSH
36143: LD_INT 5
36145: EQUAL
36146: NOT
36147: IFFALSE 36151
// exit ;
36149: GO 36539
// dist := 8 ;
36151: LD_ADDR_VAR 0 5
36155: PUSH
36156: LD_INT 8
36158: ST_TO_ADDR
// viewRange := 12 ;
36159: LD_ADDR_VAR 0 7
36163: PUSH
36164: LD_INT 12
36166: ST_TO_ADDR
// side := GetSide ( unit ) ;
36167: LD_ADDR_VAR 0 6
36171: PUSH
36172: LD_VAR 0 1
36176: PPUSH
36177: CALL_OW 255
36181: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36182: LD_INT 61
36184: PPUSH
36185: LD_VAR 0 6
36189: PPUSH
36190: CALL_OW 321
36194: PUSH
36195: LD_INT 2
36197: EQUAL
36198: IFFALSE 36208
// viewRange := 16 ;
36200: LD_ADDR_VAR 0 7
36204: PUSH
36205: LD_INT 16
36207: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36208: LD_VAR 0 1
36212: PPUSH
36213: LD_VAR 0 2
36217: PPUSH
36218: LD_VAR 0 3
36222: PPUSH
36223: CALL_OW 297
36227: PUSH
36228: LD_VAR 0 5
36232: GREATER
36233: IFFALSE 36312
// begin ComMoveXY ( unit , x , y ) ;
36235: LD_VAR 0 1
36239: PPUSH
36240: LD_VAR 0 2
36244: PPUSH
36245: LD_VAR 0 3
36249: PPUSH
36250: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36254: LD_INT 35
36256: PPUSH
36257: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36261: LD_VAR 0 1
36265: PPUSH
36266: LD_VAR 0 2
36270: PPUSH
36271: LD_VAR 0 3
36275: PPUSH
36276: CALL 72087 0 3
36280: NOT
36281: IFFALSE 36285
// exit ;
36283: GO 36539
// until GetDistUnitXY ( unit , x , y ) < dist ;
36285: LD_VAR 0 1
36289: PPUSH
36290: LD_VAR 0 2
36294: PPUSH
36295: LD_VAR 0 3
36299: PPUSH
36300: CALL_OW 297
36304: PUSH
36305: LD_VAR 0 5
36309: LESS
36310: IFFALSE 36254
// end ; ComTurnXY ( unit , x , y ) ;
36312: LD_VAR 0 1
36316: PPUSH
36317: LD_VAR 0 2
36321: PPUSH
36322: LD_VAR 0 3
36326: PPUSH
36327: CALL_OW 118
// wait ( 5 ) ;
36331: LD_INT 5
36333: PPUSH
36334: CALL_OW 67
// _d := GetDir ( unit ) ;
36338: LD_ADDR_VAR 0 10
36342: PUSH
36343: LD_VAR 0 1
36347: PPUSH
36348: CALL_OW 254
36352: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36353: LD_ADDR_VAR 0 8
36357: PUSH
36358: LD_VAR 0 1
36362: PPUSH
36363: CALL_OW 250
36367: PPUSH
36368: LD_VAR 0 10
36372: PPUSH
36373: LD_VAR 0 5
36377: PPUSH
36378: CALL_OW 272
36382: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36383: LD_ADDR_VAR 0 9
36387: PUSH
36388: LD_VAR 0 1
36392: PPUSH
36393: CALL_OW 251
36397: PPUSH
36398: LD_VAR 0 10
36402: PPUSH
36403: LD_VAR 0 5
36407: PPUSH
36408: CALL_OW 273
36412: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36413: LD_VAR 0 8
36417: PPUSH
36418: LD_VAR 0 9
36422: PPUSH
36423: CALL_OW 488
36427: NOT
36428: IFFALSE 36432
// exit ;
36430: GO 36539
// ComAnimCustom ( unit , 1 ) ;
36432: LD_VAR 0 1
36436: PPUSH
36437: LD_INT 1
36439: PPUSH
36440: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36444: LD_VAR 0 8
36448: PPUSH
36449: LD_VAR 0 9
36453: PPUSH
36454: LD_VAR 0 6
36458: PPUSH
36459: LD_VAR 0 7
36463: PPUSH
36464: CALL_OW 330
// repeat wait ( 1 ) ;
36468: LD_INT 1
36470: PPUSH
36471: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36475: LD_VAR 0 1
36479: PPUSH
36480: CALL_OW 316
36484: PUSH
36485: LD_VAR 0 1
36489: PPUSH
36490: CALL_OW 314
36494: OR
36495: PUSH
36496: LD_VAR 0 1
36500: PPUSH
36501: CALL_OW 302
36505: NOT
36506: OR
36507: PUSH
36508: LD_VAR 0 1
36512: PPUSH
36513: CALL_OW 301
36517: OR
36518: IFFALSE 36468
// RemoveSeeing ( _x , _y , side ) ;
36520: LD_VAR 0 8
36524: PPUSH
36525: LD_VAR 0 9
36529: PPUSH
36530: LD_VAR 0 6
36534: PPUSH
36535: CALL_OW 331
// end ; end_of_file
36539: LD_VAR 0 4
36543: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36544: LD_INT 0
36546: PPUSH
36547: PPUSH
// if exist_mode then
36548: LD_VAR 0 2
36552: IFFALSE 36577
// unit := CreateCharacter ( prefix & ident ) else
36554: LD_ADDR_VAR 0 5
36558: PUSH
36559: LD_VAR 0 3
36563: PUSH
36564: LD_VAR 0 1
36568: STR
36569: PPUSH
36570: CALL_OW 34
36574: ST_TO_ADDR
36575: GO 36592
// unit := NewCharacter ( ident ) ;
36577: LD_ADDR_VAR 0 5
36581: PUSH
36582: LD_VAR 0 1
36586: PPUSH
36587: CALL_OW 25
36591: ST_TO_ADDR
// result := unit ;
36592: LD_ADDR_VAR 0 4
36596: PUSH
36597: LD_VAR 0 5
36601: ST_TO_ADDR
// end ;
36602: LD_VAR 0 4
36606: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36607: LD_INT 0
36609: PPUSH
36610: PPUSH
// if not side or not nation then
36611: LD_VAR 0 1
36615: NOT
36616: PUSH
36617: LD_VAR 0 2
36621: NOT
36622: OR
36623: IFFALSE 36627
// exit ;
36625: GO 37395
// case nation of nation_american :
36627: LD_VAR 0 2
36631: PUSH
36632: LD_INT 1
36634: DOUBLE
36635: EQUAL
36636: IFTRUE 36640
36638: GO 36854
36640: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36641: LD_ADDR_VAR 0 4
36645: PUSH
36646: LD_INT 35
36648: PUSH
36649: LD_INT 45
36651: PUSH
36652: LD_INT 46
36654: PUSH
36655: LD_INT 47
36657: PUSH
36658: LD_INT 82
36660: PUSH
36661: LD_INT 83
36663: PUSH
36664: LD_INT 84
36666: PUSH
36667: LD_INT 85
36669: PUSH
36670: LD_INT 86
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: LD_INT 6
36681: PUSH
36682: LD_INT 15
36684: PUSH
36685: LD_INT 16
36687: PUSH
36688: LD_INT 7
36690: PUSH
36691: LD_INT 12
36693: PUSH
36694: LD_INT 13
36696: PUSH
36697: LD_INT 10
36699: PUSH
36700: LD_INT 14
36702: PUSH
36703: LD_INT 20
36705: PUSH
36706: LD_INT 21
36708: PUSH
36709: LD_INT 22
36711: PUSH
36712: LD_INT 25
36714: PUSH
36715: LD_INT 32
36717: PUSH
36718: LD_INT 27
36720: PUSH
36721: LD_INT 36
36723: PUSH
36724: LD_INT 69
36726: PUSH
36727: LD_INT 39
36729: PUSH
36730: LD_INT 34
36732: PUSH
36733: LD_INT 40
36735: PUSH
36736: LD_INT 48
36738: PUSH
36739: LD_INT 49
36741: PUSH
36742: LD_INT 50
36744: PUSH
36745: LD_INT 51
36747: PUSH
36748: LD_INT 52
36750: PUSH
36751: LD_INT 53
36753: PUSH
36754: LD_INT 54
36756: PUSH
36757: LD_INT 55
36759: PUSH
36760: LD_INT 56
36762: PUSH
36763: LD_INT 57
36765: PUSH
36766: LD_INT 58
36768: PUSH
36769: LD_INT 59
36771: PUSH
36772: LD_INT 60
36774: PUSH
36775: LD_INT 61
36777: PUSH
36778: LD_INT 62
36780: PUSH
36781: LD_INT 80
36783: PUSH
36784: LD_INT 82
36786: PUSH
36787: LD_INT 83
36789: PUSH
36790: LD_INT 84
36792: PUSH
36793: LD_INT 85
36795: PUSH
36796: LD_INT 86
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: ST_TO_ADDR
36852: GO 37319
36854: LD_INT 2
36856: DOUBLE
36857: EQUAL
36858: IFTRUE 36862
36860: GO 37088
36862: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36863: LD_ADDR_VAR 0 4
36867: PUSH
36868: LD_INT 35
36870: PUSH
36871: LD_INT 45
36873: PUSH
36874: LD_INT 46
36876: PUSH
36877: LD_INT 47
36879: PUSH
36880: LD_INT 82
36882: PUSH
36883: LD_INT 83
36885: PUSH
36886: LD_INT 84
36888: PUSH
36889: LD_INT 85
36891: PUSH
36892: LD_INT 87
36894: PUSH
36895: LD_INT 70
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: LD_INT 11
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: LD_INT 4
36909: PUSH
36910: LD_INT 5
36912: PUSH
36913: LD_INT 6
36915: PUSH
36916: LD_INT 15
36918: PUSH
36919: LD_INT 18
36921: PUSH
36922: LD_INT 7
36924: PUSH
36925: LD_INT 17
36927: PUSH
36928: LD_INT 8
36930: PUSH
36931: LD_INT 20
36933: PUSH
36934: LD_INT 21
36936: PUSH
36937: LD_INT 22
36939: PUSH
36940: LD_INT 72
36942: PUSH
36943: LD_INT 26
36945: PUSH
36946: LD_INT 69
36948: PUSH
36949: LD_INT 39
36951: PUSH
36952: LD_INT 40
36954: PUSH
36955: LD_INT 41
36957: PUSH
36958: LD_INT 42
36960: PUSH
36961: LD_INT 43
36963: PUSH
36964: LD_INT 48
36966: PUSH
36967: LD_INT 49
36969: PUSH
36970: LD_INT 50
36972: PUSH
36973: LD_INT 51
36975: PUSH
36976: LD_INT 52
36978: PUSH
36979: LD_INT 53
36981: PUSH
36982: LD_INT 54
36984: PUSH
36985: LD_INT 55
36987: PUSH
36988: LD_INT 56
36990: PUSH
36991: LD_INT 60
36993: PUSH
36994: LD_INT 61
36996: PUSH
36997: LD_INT 62
36999: PUSH
37000: LD_INT 66
37002: PUSH
37003: LD_INT 67
37005: PUSH
37006: LD_INT 68
37008: PUSH
37009: LD_INT 81
37011: PUSH
37012: LD_INT 82
37014: PUSH
37015: LD_INT 83
37017: PUSH
37018: LD_INT 84
37020: PUSH
37021: LD_INT 85
37023: PUSH
37024: LD_INT 87
37026: PUSH
37027: LD_INT 88
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: ST_TO_ADDR
37086: GO 37319
37088: LD_INT 3
37090: DOUBLE
37091: EQUAL
37092: IFTRUE 37096
37094: GO 37318
37096: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37097: LD_ADDR_VAR 0 4
37101: PUSH
37102: LD_INT 46
37104: PUSH
37105: LD_INT 47
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 82
37116: PUSH
37117: LD_INT 83
37119: PUSH
37120: LD_INT 84
37122: PUSH
37123: LD_INT 85
37125: PUSH
37126: LD_INT 86
37128: PUSH
37129: LD_INT 11
37131: PUSH
37132: LD_INT 9
37134: PUSH
37135: LD_INT 20
37137: PUSH
37138: LD_INT 19
37140: PUSH
37141: LD_INT 21
37143: PUSH
37144: LD_INT 24
37146: PUSH
37147: LD_INT 22
37149: PUSH
37150: LD_INT 25
37152: PUSH
37153: LD_INT 28
37155: PUSH
37156: LD_INT 29
37158: PUSH
37159: LD_INT 30
37161: PUSH
37162: LD_INT 31
37164: PUSH
37165: LD_INT 37
37167: PUSH
37168: LD_INT 38
37170: PUSH
37171: LD_INT 32
37173: PUSH
37174: LD_INT 27
37176: PUSH
37177: LD_INT 33
37179: PUSH
37180: LD_INT 69
37182: PUSH
37183: LD_INT 39
37185: PUSH
37186: LD_INT 34
37188: PUSH
37189: LD_INT 40
37191: PUSH
37192: LD_INT 71
37194: PUSH
37195: LD_INT 23
37197: PUSH
37198: LD_INT 44
37200: PUSH
37201: LD_INT 48
37203: PUSH
37204: LD_INT 49
37206: PUSH
37207: LD_INT 50
37209: PUSH
37210: LD_INT 51
37212: PUSH
37213: LD_INT 52
37215: PUSH
37216: LD_INT 53
37218: PUSH
37219: LD_INT 54
37221: PUSH
37222: LD_INT 55
37224: PUSH
37225: LD_INT 56
37227: PUSH
37228: LD_INT 57
37230: PUSH
37231: LD_INT 58
37233: PUSH
37234: LD_INT 59
37236: PUSH
37237: LD_INT 63
37239: PUSH
37240: LD_INT 64
37242: PUSH
37243: LD_INT 65
37245: PUSH
37246: LD_INT 82
37248: PUSH
37249: LD_INT 83
37251: PUSH
37252: LD_INT 84
37254: PUSH
37255: LD_INT 85
37257: PUSH
37258: LD_INT 86
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
37316: GO 37319
37318: POP
// if state > - 1 and state < 3 then
37319: LD_VAR 0 3
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: GREATER
37328: PUSH
37329: LD_VAR 0 3
37333: PUSH
37334: LD_INT 3
37336: LESS
37337: AND
37338: IFFALSE 37395
// for i in result do
37340: LD_ADDR_VAR 0 5
37344: PUSH
37345: LD_VAR 0 4
37349: PUSH
37350: FOR_IN
37351: IFFALSE 37393
// if GetTech ( i , side ) <> state then
37353: LD_VAR 0 5
37357: PPUSH
37358: LD_VAR 0 1
37362: PPUSH
37363: CALL_OW 321
37367: PUSH
37368: LD_VAR 0 3
37372: NONEQUAL
37373: IFFALSE 37391
// result := result diff i ;
37375: LD_ADDR_VAR 0 4
37379: PUSH
37380: LD_VAR 0 4
37384: PUSH
37385: LD_VAR 0 5
37389: DIFF
37390: ST_TO_ADDR
37391: GO 37350
37393: POP
37394: POP
// end ;
37395: LD_VAR 0 4
37399: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37400: LD_INT 0
37402: PPUSH
37403: PPUSH
37404: PPUSH
// result := true ;
37405: LD_ADDR_VAR 0 3
37409: PUSH
37410: LD_INT 1
37412: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37413: LD_ADDR_VAR 0 5
37417: PUSH
37418: LD_VAR 0 2
37422: PPUSH
37423: CALL_OW 480
37427: ST_TO_ADDR
// if not tmp then
37428: LD_VAR 0 5
37432: NOT
37433: IFFALSE 37437
// exit ;
37435: GO 37486
// for i in tmp do
37437: LD_ADDR_VAR 0 4
37441: PUSH
37442: LD_VAR 0 5
37446: PUSH
37447: FOR_IN
37448: IFFALSE 37484
// if GetTech ( i , side ) <> state_researched then
37450: LD_VAR 0 4
37454: PPUSH
37455: LD_VAR 0 1
37459: PPUSH
37460: CALL_OW 321
37464: PUSH
37465: LD_INT 2
37467: NONEQUAL
37468: IFFALSE 37482
// begin result := false ;
37470: LD_ADDR_VAR 0 3
37474: PUSH
37475: LD_INT 0
37477: ST_TO_ADDR
// exit ;
37478: POP
37479: POP
37480: GO 37486
// end ;
37482: GO 37447
37484: POP
37485: POP
// end ;
37486: LD_VAR 0 3
37490: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37491: LD_INT 0
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37506: LD_VAR 0 1
37510: NOT
37511: PUSH
37512: LD_VAR 0 1
37516: PPUSH
37517: CALL_OW 257
37521: PUSH
37522: LD_INT 9
37524: NONEQUAL
37525: OR
37526: IFFALSE 37530
// exit ;
37528: GO 38103
// side := GetSide ( unit ) ;
37530: LD_ADDR_VAR 0 9
37534: PUSH
37535: LD_VAR 0 1
37539: PPUSH
37540: CALL_OW 255
37544: ST_TO_ADDR
// tech_space := tech_spacanom ;
37545: LD_ADDR_VAR 0 12
37549: PUSH
37550: LD_INT 29
37552: ST_TO_ADDR
// tech_time := tech_taurad ;
37553: LD_ADDR_VAR 0 13
37557: PUSH
37558: LD_INT 28
37560: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37561: LD_ADDR_VAR 0 11
37565: PUSH
37566: LD_VAR 0 1
37570: PPUSH
37571: CALL_OW 310
37575: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37576: LD_VAR 0 11
37580: PPUSH
37581: CALL_OW 247
37585: PUSH
37586: LD_INT 2
37588: EQUAL
37589: IFFALSE 37593
// exit ;
37591: GO 38103
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37593: LD_ADDR_VAR 0 8
37597: PUSH
37598: LD_INT 81
37600: PUSH
37601: LD_VAR 0 9
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 3
37612: PUSH
37613: LD_INT 21
37615: PUSH
37616: LD_INT 3
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PPUSH
37631: CALL_OW 69
37635: ST_TO_ADDR
// if not tmp then
37636: LD_VAR 0 8
37640: NOT
37641: IFFALSE 37645
// exit ;
37643: GO 38103
// if in_unit then
37645: LD_VAR 0 11
37649: IFFALSE 37673
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37651: LD_ADDR_VAR 0 10
37655: PUSH
37656: LD_VAR 0 8
37660: PPUSH
37661: LD_VAR 0 11
37665: PPUSH
37666: CALL_OW 74
37670: ST_TO_ADDR
37671: GO 37693
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37673: LD_ADDR_VAR 0 10
37677: PUSH
37678: LD_VAR 0 8
37682: PPUSH
37683: LD_VAR 0 1
37687: PPUSH
37688: CALL_OW 74
37692: ST_TO_ADDR
// if not enemy then
37693: LD_VAR 0 10
37697: NOT
37698: IFFALSE 37702
// exit ;
37700: GO 38103
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37702: LD_VAR 0 11
37706: PUSH
37707: LD_VAR 0 11
37711: PPUSH
37712: LD_VAR 0 10
37716: PPUSH
37717: CALL_OW 296
37721: PUSH
37722: LD_INT 13
37724: GREATER
37725: AND
37726: PUSH
37727: LD_VAR 0 1
37731: PPUSH
37732: LD_VAR 0 10
37736: PPUSH
37737: CALL_OW 296
37741: PUSH
37742: LD_INT 12
37744: GREATER
37745: OR
37746: IFFALSE 37750
// exit ;
37748: GO 38103
// missile := [ 1 ] ;
37750: LD_ADDR_VAR 0 14
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37761: LD_VAR 0 9
37765: PPUSH
37766: LD_VAR 0 12
37770: PPUSH
37771: CALL_OW 325
37775: IFFALSE 37804
// missile := Insert ( missile , missile + 1 , 2 ) ;
37777: LD_ADDR_VAR 0 14
37781: PUSH
37782: LD_VAR 0 14
37786: PPUSH
37787: LD_VAR 0 14
37791: PUSH
37792: LD_INT 1
37794: PLUS
37795: PPUSH
37796: LD_INT 2
37798: PPUSH
37799: CALL_OW 2
37803: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37804: LD_VAR 0 9
37808: PPUSH
37809: LD_VAR 0 13
37813: PPUSH
37814: CALL_OW 325
37818: PUSH
37819: LD_VAR 0 10
37823: PPUSH
37824: CALL_OW 255
37828: PPUSH
37829: LD_VAR 0 13
37833: PPUSH
37834: CALL_OW 325
37838: NOT
37839: AND
37840: IFFALSE 37869
// missile := Insert ( missile , missile + 1 , 3 ) ;
37842: LD_ADDR_VAR 0 14
37846: PUSH
37847: LD_VAR 0 14
37851: PPUSH
37852: LD_VAR 0 14
37856: PUSH
37857: LD_INT 1
37859: PLUS
37860: PPUSH
37861: LD_INT 3
37863: PPUSH
37864: CALL_OW 2
37868: ST_TO_ADDR
// if missile < 2 then
37869: LD_VAR 0 14
37873: PUSH
37874: LD_INT 2
37876: LESS
37877: IFFALSE 37881
// exit ;
37879: GO 38103
// x := GetX ( enemy ) ;
37881: LD_ADDR_VAR 0 4
37885: PUSH
37886: LD_VAR 0 10
37890: PPUSH
37891: CALL_OW 250
37895: ST_TO_ADDR
// y := GetY ( enemy ) ;
37896: LD_ADDR_VAR 0 5
37900: PUSH
37901: LD_VAR 0 10
37905: PPUSH
37906: CALL_OW 251
37910: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37911: LD_ADDR_VAR 0 6
37915: PUSH
37916: LD_VAR 0 4
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PPUSH
37925: LD_INT 1
37927: PPUSH
37928: CALL_OW 12
37932: PLUS
37933: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37934: LD_ADDR_VAR 0 7
37938: PUSH
37939: LD_VAR 0 5
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PPUSH
37948: LD_INT 1
37950: PPUSH
37951: CALL_OW 12
37955: PLUS
37956: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37957: LD_VAR 0 6
37961: PPUSH
37962: LD_VAR 0 7
37966: PPUSH
37967: CALL_OW 488
37971: NOT
37972: IFFALSE 37994
// begin _x := x ;
37974: LD_ADDR_VAR 0 6
37978: PUSH
37979: LD_VAR 0 4
37983: ST_TO_ADDR
// _y := y ;
37984: LD_ADDR_VAR 0 7
37988: PUSH
37989: LD_VAR 0 5
37993: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37994: LD_ADDR_VAR 0 3
37998: PUSH
37999: LD_INT 1
38001: PPUSH
38002: LD_VAR 0 14
38006: PPUSH
38007: CALL_OW 12
38011: ST_TO_ADDR
// case i of 1 :
38012: LD_VAR 0 3
38016: PUSH
38017: LD_INT 1
38019: DOUBLE
38020: EQUAL
38021: IFTRUE 38025
38023: GO 38042
38025: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38026: LD_VAR 0 1
38030: PPUSH
38031: LD_VAR 0 10
38035: PPUSH
38036: CALL_OW 115
38040: GO 38103
38042: LD_INT 2
38044: DOUBLE
38045: EQUAL
38046: IFTRUE 38050
38048: GO 38072
38050: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38051: LD_VAR 0 1
38055: PPUSH
38056: LD_VAR 0 6
38060: PPUSH
38061: LD_VAR 0 7
38065: PPUSH
38066: CALL_OW 153
38070: GO 38103
38072: LD_INT 3
38074: DOUBLE
38075: EQUAL
38076: IFTRUE 38080
38078: GO 38102
38080: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38081: LD_VAR 0 1
38085: PPUSH
38086: LD_VAR 0 6
38090: PPUSH
38091: LD_VAR 0 7
38095: PPUSH
38096: CALL_OW 154
38100: GO 38103
38102: POP
// end ;
38103: LD_VAR 0 2
38107: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38108: LD_INT 0
38110: PPUSH
38111: PPUSH
38112: PPUSH
38113: PPUSH
38114: PPUSH
38115: PPUSH
// if not unit or not building then
38116: LD_VAR 0 1
38120: NOT
38121: PUSH
38122: LD_VAR 0 2
38126: NOT
38127: OR
38128: IFFALSE 38132
// exit ;
38130: GO 38290
// x := GetX ( building ) ;
38132: LD_ADDR_VAR 0 5
38136: PUSH
38137: LD_VAR 0 2
38141: PPUSH
38142: CALL_OW 250
38146: ST_TO_ADDR
// y := GetY ( building ) ;
38147: LD_ADDR_VAR 0 6
38151: PUSH
38152: LD_VAR 0 2
38156: PPUSH
38157: CALL_OW 251
38161: ST_TO_ADDR
// for i = 0 to 5 do
38162: LD_ADDR_VAR 0 4
38166: PUSH
38167: DOUBLE
38168: LD_INT 0
38170: DEC
38171: ST_TO_ADDR
38172: LD_INT 5
38174: PUSH
38175: FOR_TO
38176: IFFALSE 38288
// begin _x := ShiftX ( x , i , 3 ) ;
38178: LD_ADDR_VAR 0 7
38182: PUSH
38183: LD_VAR 0 5
38187: PPUSH
38188: LD_VAR 0 4
38192: PPUSH
38193: LD_INT 3
38195: PPUSH
38196: CALL_OW 272
38200: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38201: LD_ADDR_VAR 0 8
38205: PUSH
38206: LD_VAR 0 6
38210: PPUSH
38211: LD_VAR 0 4
38215: PPUSH
38216: LD_INT 3
38218: PPUSH
38219: CALL_OW 273
38223: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38224: LD_VAR 0 7
38228: PPUSH
38229: LD_VAR 0 8
38233: PPUSH
38234: CALL_OW 488
38238: NOT
38239: IFFALSE 38243
// continue ;
38241: GO 38175
// if HexInfo ( _x , _y ) = 0 then
38243: LD_VAR 0 7
38247: PPUSH
38248: LD_VAR 0 8
38252: PPUSH
38253: CALL_OW 428
38257: PUSH
38258: LD_INT 0
38260: EQUAL
38261: IFFALSE 38286
// begin ComMoveXY ( unit , _x , _y ) ;
38263: LD_VAR 0 1
38267: PPUSH
38268: LD_VAR 0 7
38272: PPUSH
38273: LD_VAR 0 8
38277: PPUSH
38278: CALL_OW 111
// exit ;
38282: POP
38283: POP
38284: GO 38290
// end ; end ;
38286: GO 38175
38288: POP
38289: POP
// end ;
38290: LD_VAR 0 3
38294: RET
// export function ScanBase ( side , base_area ) ; begin
38295: LD_INT 0
38297: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38298: LD_ADDR_VAR 0 3
38302: PUSH
38303: LD_VAR 0 2
38307: PPUSH
38308: LD_INT 81
38310: PUSH
38311: LD_VAR 0 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PPUSH
38320: CALL_OW 70
38324: ST_TO_ADDR
// end ;
38325: LD_VAR 0 3
38329: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38330: LD_INT 0
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
// result := false ;
38336: LD_ADDR_VAR 0 2
38340: PUSH
38341: LD_INT 0
38343: ST_TO_ADDR
// side := GetSide ( unit ) ;
38344: LD_ADDR_VAR 0 3
38348: PUSH
38349: LD_VAR 0 1
38353: PPUSH
38354: CALL_OW 255
38358: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38359: LD_ADDR_VAR 0 4
38363: PUSH
38364: LD_VAR 0 1
38368: PPUSH
38369: CALL_OW 248
38373: ST_TO_ADDR
// case nat of 1 :
38374: LD_VAR 0 4
38378: PUSH
38379: LD_INT 1
38381: DOUBLE
38382: EQUAL
38383: IFTRUE 38387
38385: GO 38398
38387: POP
// tech := tech_lassight ; 2 :
38388: LD_ADDR_VAR 0 5
38392: PUSH
38393: LD_INT 12
38395: ST_TO_ADDR
38396: GO 38437
38398: LD_INT 2
38400: DOUBLE
38401: EQUAL
38402: IFTRUE 38406
38404: GO 38417
38406: POP
// tech := tech_mortar ; 3 :
38407: LD_ADDR_VAR 0 5
38411: PUSH
38412: LD_INT 41
38414: ST_TO_ADDR
38415: GO 38437
38417: LD_INT 3
38419: DOUBLE
38420: EQUAL
38421: IFTRUE 38425
38423: GO 38436
38425: POP
// tech := tech_bazooka ; end ;
38426: LD_ADDR_VAR 0 5
38430: PUSH
38431: LD_INT 44
38433: ST_TO_ADDR
38434: GO 38437
38436: POP
// if Researched ( side , tech ) then
38437: LD_VAR 0 3
38441: PPUSH
38442: LD_VAR 0 5
38446: PPUSH
38447: CALL_OW 325
38451: IFFALSE 38478
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38453: LD_ADDR_VAR 0 2
38457: PUSH
38458: LD_INT 5
38460: PUSH
38461: LD_INT 8
38463: PUSH
38464: LD_INT 9
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: LIST
38471: PUSH
38472: LD_VAR 0 4
38476: ARRAY
38477: ST_TO_ADDR
// end ;
38478: LD_VAR 0 2
38482: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38483: LD_INT 0
38485: PPUSH
38486: PPUSH
38487: PPUSH
// if not mines then
38488: LD_VAR 0 2
38492: NOT
38493: IFFALSE 38497
// exit ;
38495: GO 38641
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38497: LD_ADDR_VAR 0 5
38501: PUSH
38502: LD_INT 81
38504: PUSH
38505: LD_VAR 0 1
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 3
38516: PUSH
38517: LD_INT 21
38519: PUSH
38520: LD_INT 3
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PPUSH
38535: CALL_OW 69
38539: ST_TO_ADDR
// for i in mines do
38540: LD_ADDR_VAR 0 4
38544: PUSH
38545: LD_VAR 0 2
38549: PUSH
38550: FOR_IN
38551: IFFALSE 38639
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38553: LD_VAR 0 4
38557: PUSH
38558: LD_INT 1
38560: ARRAY
38561: PPUSH
38562: LD_VAR 0 4
38566: PUSH
38567: LD_INT 2
38569: ARRAY
38570: PPUSH
38571: CALL_OW 458
38575: NOT
38576: IFFALSE 38580
// continue ;
38578: GO 38550
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38580: LD_VAR 0 4
38584: PUSH
38585: LD_INT 1
38587: ARRAY
38588: PPUSH
38589: LD_VAR 0 4
38593: PUSH
38594: LD_INT 2
38596: ARRAY
38597: PPUSH
38598: CALL_OW 428
38602: PUSH
38603: LD_VAR 0 5
38607: IN
38608: IFFALSE 38637
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38610: LD_VAR 0 4
38614: PUSH
38615: LD_INT 1
38617: ARRAY
38618: PPUSH
38619: LD_VAR 0 4
38623: PUSH
38624: LD_INT 2
38626: ARRAY
38627: PPUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 456
// end ;
38637: GO 38550
38639: POP
38640: POP
// end ;
38641: LD_VAR 0 3
38645: RET
// export function Count ( array ) ; var i ; begin
38646: LD_INT 0
38648: PPUSH
38649: PPUSH
// result := 0 ;
38650: LD_ADDR_VAR 0 2
38654: PUSH
38655: LD_INT 0
38657: ST_TO_ADDR
// for i in array do
38658: LD_ADDR_VAR 0 3
38662: PUSH
38663: LD_VAR 0 1
38667: PUSH
38668: FOR_IN
38669: IFFALSE 38693
// if i then
38671: LD_VAR 0 3
38675: IFFALSE 38691
// result := result + 1 ;
38677: LD_ADDR_VAR 0 2
38681: PUSH
38682: LD_VAR 0 2
38686: PUSH
38687: LD_INT 1
38689: PLUS
38690: ST_TO_ADDR
38691: GO 38668
38693: POP
38694: POP
// end ;
38695: LD_VAR 0 2
38699: RET
// export function IsEmpty ( building ) ; begin
38700: LD_INT 0
38702: PPUSH
// if not building then
38703: LD_VAR 0 1
38707: NOT
38708: IFFALSE 38712
// exit ;
38710: GO 38755
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38712: LD_ADDR_VAR 0 2
38716: PUSH
38717: LD_VAR 0 1
38721: PUSH
38722: LD_INT 22
38724: PUSH
38725: LD_VAR 0 1
38729: PPUSH
38730: CALL_OW 255
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 58
38741: PUSH
38742: EMPTY
38743: LIST
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PPUSH
38749: CALL_OW 69
38753: IN
38754: ST_TO_ADDR
// end ;
38755: LD_VAR 0 2
38759: RET
// export function IsNotFull ( building ) ; begin
38760: LD_INT 0
38762: PPUSH
// if not building then
38763: LD_VAR 0 1
38767: NOT
38768: IFFALSE 38772
// exit ;
38770: GO 38791
// result := UnitsInside ( building ) < 6 ;
38772: LD_ADDR_VAR 0 2
38776: PUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 313
38786: PUSH
38787: LD_INT 6
38789: LESS
38790: ST_TO_ADDR
// end ;
38791: LD_VAR 0 2
38795: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38796: LD_INT 0
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
// tmp := [ ] ;
38802: LD_ADDR_VAR 0 3
38806: PUSH
38807: EMPTY
38808: ST_TO_ADDR
// list := [ ] ;
38809: LD_ADDR_VAR 0 5
38813: PUSH
38814: EMPTY
38815: ST_TO_ADDR
// for i = 16 to 25 do
38816: LD_ADDR_VAR 0 4
38820: PUSH
38821: DOUBLE
38822: LD_INT 16
38824: DEC
38825: ST_TO_ADDR
38826: LD_INT 25
38828: PUSH
38829: FOR_TO
38830: IFFALSE 38903
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38832: LD_ADDR_VAR 0 3
38836: PUSH
38837: LD_VAR 0 3
38841: PUSH
38842: LD_INT 22
38844: PUSH
38845: LD_VAR 0 1
38849: PPUSH
38850: CALL_OW 255
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 91
38861: PUSH
38862: LD_VAR 0 1
38866: PUSH
38867: LD_INT 6
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 30
38877: PUSH
38878: LD_VAR 0 4
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: PUSH
38892: EMPTY
38893: LIST
38894: PPUSH
38895: CALL_OW 69
38899: ADD
38900: ST_TO_ADDR
38901: GO 38829
38903: POP
38904: POP
// for i = 1 to tmp do
38905: LD_ADDR_VAR 0 4
38909: PUSH
38910: DOUBLE
38911: LD_INT 1
38913: DEC
38914: ST_TO_ADDR
38915: LD_VAR 0 3
38919: PUSH
38920: FOR_TO
38921: IFFALSE 39009
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38923: LD_ADDR_VAR 0 5
38927: PUSH
38928: LD_VAR 0 5
38932: PUSH
38933: LD_VAR 0 3
38937: PUSH
38938: LD_VAR 0 4
38942: ARRAY
38943: PPUSH
38944: CALL_OW 266
38948: PUSH
38949: LD_VAR 0 3
38953: PUSH
38954: LD_VAR 0 4
38958: ARRAY
38959: PPUSH
38960: CALL_OW 250
38964: PUSH
38965: LD_VAR 0 3
38969: PUSH
38970: LD_VAR 0 4
38974: ARRAY
38975: PPUSH
38976: CALL_OW 251
38980: PUSH
38981: LD_VAR 0 3
38985: PUSH
38986: LD_VAR 0 4
38990: ARRAY
38991: PPUSH
38992: CALL_OW 254
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: PUSH
39003: EMPTY
39004: LIST
39005: ADD
39006: ST_TO_ADDR
39007: GO 38920
39009: POP
39010: POP
// result := list ;
39011: LD_ADDR_VAR 0 2
39015: PUSH
39016: LD_VAR 0 5
39020: ST_TO_ADDR
// end ;
39021: LD_VAR 0 2
39025: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39026: LD_INT 0
39028: PPUSH
39029: PPUSH
39030: PPUSH
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
// if not factory then
39035: LD_VAR 0 1
39039: NOT
39040: IFFALSE 39044
// exit ;
39042: GO 39637
// if control = control_apeman then
39044: LD_VAR 0 4
39048: PUSH
39049: LD_INT 5
39051: EQUAL
39052: IFFALSE 39161
// begin tmp := UnitsInside ( factory ) ;
39054: LD_ADDR_VAR 0 8
39058: PUSH
39059: LD_VAR 0 1
39063: PPUSH
39064: CALL_OW 313
39068: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39069: LD_VAR 0 8
39073: PPUSH
39074: LD_INT 25
39076: PUSH
39077: LD_INT 12
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PPUSH
39084: CALL_OW 72
39088: NOT
39089: IFFALSE 39099
// control := control_manual ;
39091: LD_ADDR_VAR 0 4
39095: PUSH
39096: LD_INT 1
39098: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39099: LD_ADDR_VAR 0 8
39103: PUSH
39104: LD_VAR 0 1
39108: PPUSH
39109: CALL 38796 0 1
39113: ST_TO_ADDR
// if tmp then
39114: LD_VAR 0 8
39118: IFFALSE 39161
// begin for i in tmp do
39120: LD_ADDR_VAR 0 7
39124: PUSH
39125: LD_VAR 0 8
39129: PUSH
39130: FOR_IN
39131: IFFALSE 39159
// if i [ 1 ] = b_ext_radio then
39133: LD_VAR 0 7
39137: PUSH
39138: LD_INT 1
39140: ARRAY
39141: PUSH
39142: LD_INT 22
39144: EQUAL
39145: IFFALSE 39157
// begin control := control_remote ;
39147: LD_ADDR_VAR 0 4
39151: PUSH
39152: LD_INT 2
39154: ST_TO_ADDR
// break ;
39155: GO 39159
// end ;
39157: GO 39130
39159: POP
39160: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39161: LD_VAR 0 1
39165: PPUSH
39166: LD_VAR 0 2
39170: PPUSH
39171: LD_VAR 0 3
39175: PPUSH
39176: LD_VAR 0 4
39180: PPUSH
39181: LD_VAR 0 5
39185: PPUSH
39186: CALL_OW 448
39190: IFFALSE 39225
// begin result := [ chassis , engine , control , weapon ] ;
39192: LD_ADDR_VAR 0 6
39196: PUSH
39197: LD_VAR 0 2
39201: PUSH
39202: LD_VAR 0 3
39206: PUSH
39207: LD_VAR 0 4
39211: PUSH
39212: LD_VAR 0 5
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: ST_TO_ADDR
// exit ;
39223: GO 39637
// end ; _chassis := AvailableChassisList ( factory ) ;
39225: LD_ADDR_VAR 0 9
39229: PUSH
39230: LD_VAR 0 1
39234: PPUSH
39235: CALL_OW 475
39239: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39240: LD_ADDR_VAR 0 11
39244: PUSH
39245: LD_VAR 0 1
39249: PPUSH
39250: CALL_OW 476
39254: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39255: LD_ADDR_VAR 0 12
39259: PUSH
39260: LD_VAR 0 1
39264: PPUSH
39265: CALL_OW 477
39269: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39270: LD_ADDR_VAR 0 10
39274: PUSH
39275: LD_VAR 0 1
39279: PPUSH
39280: CALL_OW 478
39284: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39285: LD_VAR 0 9
39289: NOT
39290: PUSH
39291: LD_VAR 0 11
39295: NOT
39296: OR
39297: PUSH
39298: LD_VAR 0 12
39302: NOT
39303: OR
39304: PUSH
39305: LD_VAR 0 10
39309: NOT
39310: OR
39311: IFFALSE 39346
// begin result := [ chassis , engine , control , weapon ] ;
39313: LD_ADDR_VAR 0 6
39317: PUSH
39318: LD_VAR 0 2
39322: PUSH
39323: LD_VAR 0 3
39327: PUSH
39328: LD_VAR 0 4
39332: PUSH
39333: LD_VAR 0 5
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: ST_TO_ADDR
// exit ;
39344: GO 39637
// end ; if not chassis in _chassis then
39346: LD_VAR 0 2
39350: PUSH
39351: LD_VAR 0 9
39355: IN
39356: NOT
39357: IFFALSE 39383
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39359: LD_ADDR_VAR 0 2
39363: PUSH
39364: LD_VAR 0 9
39368: PUSH
39369: LD_INT 1
39371: PPUSH
39372: LD_VAR 0 9
39376: PPUSH
39377: CALL_OW 12
39381: ARRAY
39382: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39383: LD_VAR 0 2
39387: PPUSH
39388: LD_VAR 0 3
39392: PPUSH
39393: CALL 39642 0 2
39397: NOT
39398: IFFALSE 39457
// repeat engine := _engine [ 1 ] ;
39400: LD_ADDR_VAR 0 3
39404: PUSH
39405: LD_VAR 0 11
39409: PUSH
39410: LD_INT 1
39412: ARRAY
39413: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39414: LD_ADDR_VAR 0 11
39418: PUSH
39419: LD_VAR 0 11
39423: PPUSH
39424: LD_INT 1
39426: PPUSH
39427: CALL_OW 3
39431: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39432: LD_VAR 0 2
39436: PPUSH
39437: LD_VAR 0 3
39441: PPUSH
39442: CALL 39642 0 2
39446: PUSH
39447: LD_VAR 0 11
39451: PUSH
39452: EMPTY
39453: EQUAL
39454: OR
39455: IFFALSE 39400
// if not control in _control then
39457: LD_VAR 0 4
39461: PUSH
39462: LD_VAR 0 12
39466: IN
39467: NOT
39468: IFFALSE 39494
// control := _control [ rand ( 1 , _control ) ] ;
39470: LD_ADDR_VAR 0 4
39474: PUSH
39475: LD_VAR 0 12
39479: PUSH
39480: LD_INT 1
39482: PPUSH
39483: LD_VAR 0 12
39487: PPUSH
39488: CALL_OW 12
39492: ARRAY
39493: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39494: LD_VAR 0 2
39498: PPUSH
39499: LD_VAR 0 5
39503: PPUSH
39504: CALL 39862 0 2
39508: NOT
39509: IFFALSE 39568
// repeat weapon := _weapon [ 1 ] ;
39511: LD_ADDR_VAR 0 5
39515: PUSH
39516: LD_VAR 0 10
39520: PUSH
39521: LD_INT 1
39523: ARRAY
39524: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39525: LD_ADDR_VAR 0 10
39529: PUSH
39530: LD_VAR 0 10
39534: PPUSH
39535: LD_INT 1
39537: PPUSH
39538: CALL_OW 3
39542: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39543: LD_VAR 0 2
39547: PPUSH
39548: LD_VAR 0 5
39552: PPUSH
39553: CALL 39862 0 2
39557: PUSH
39558: LD_VAR 0 10
39562: PUSH
39563: EMPTY
39564: EQUAL
39565: OR
39566: IFFALSE 39511
// result := [ ] ;
39568: LD_ADDR_VAR 0 6
39572: PUSH
39573: EMPTY
39574: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39575: LD_VAR 0 1
39579: PPUSH
39580: LD_VAR 0 2
39584: PPUSH
39585: LD_VAR 0 3
39589: PPUSH
39590: LD_VAR 0 4
39594: PPUSH
39595: LD_VAR 0 5
39599: PPUSH
39600: CALL_OW 448
39604: IFFALSE 39637
// result := [ chassis , engine , control , weapon ] ;
39606: LD_ADDR_VAR 0 6
39610: PUSH
39611: LD_VAR 0 2
39615: PUSH
39616: LD_VAR 0 3
39620: PUSH
39621: LD_VAR 0 4
39625: PUSH
39626: LD_VAR 0 5
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: ST_TO_ADDR
// end ;
39637: LD_VAR 0 6
39641: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39642: LD_INT 0
39644: PPUSH
// if not chassis or not engine then
39645: LD_VAR 0 1
39649: NOT
39650: PUSH
39651: LD_VAR 0 2
39655: NOT
39656: OR
39657: IFFALSE 39661
// exit ;
39659: GO 39857
// case engine of engine_solar :
39661: LD_VAR 0 2
39665: PUSH
39666: LD_INT 2
39668: DOUBLE
39669: EQUAL
39670: IFTRUE 39674
39672: GO 39712
39674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39675: LD_ADDR_VAR 0 3
39679: PUSH
39680: LD_INT 11
39682: PUSH
39683: LD_INT 12
39685: PUSH
39686: LD_INT 13
39688: PUSH
39689: LD_INT 14
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: LD_INT 2
39697: PUSH
39698: LD_INT 3
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: ST_TO_ADDR
39710: GO 39841
39712: LD_INT 1
39714: DOUBLE
39715: EQUAL
39716: IFTRUE 39720
39718: GO 39782
39720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39721: LD_ADDR_VAR 0 3
39725: PUSH
39726: LD_INT 11
39728: PUSH
39729: LD_INT 12
39731: PUSH
39732: LD_INT 13
39734: PUSH
39735: LD_INT 14
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 3
39746: PUSH
39747: LD_INT 4
39749: PUSH
39750: LD_INT 5
39752: PUSH
39753: LD_INT 21
39755: PUSH
39756: LD_INT 23
39758: PUSH
39759: LD_INT 22
39761: PUSH
39762: LD_INT 24
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: ST_TO_ADDR
39780: GO 39841
39782: LD_INT 3
39784: DOUBLE
39785: EQUAL
39786: IFTRUE 39790
39788: GO 39840
39790: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39791: LD_ADDR_VAR 0 3
39795: PUSH
39796: LD_INT 13
39798: PUSH
39799: LD_INT 14
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: LD_INT 3
39807: PUSH
39808: LD_INT 4
39810: PUSH
39811: LD_INT 5
39813: PUSH
39814: LD_INT 21
39816: PUSH
39817: LD_INT 22
39819: PUSH
39820: LD_INT 23
39822: PUSH
39823: LD_INT 24
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
39838: GO 39841
39840: POP
// result := ( chassis in result ) ;
39841: LD_ADDR_VAR 0 3
39845: PUSH
39846: LD_VAR 0 1
39850: PUSH
39851: LD_VAR 0 3
39855: IN
39856: ST_TO_ADDR
// end ;
39857: LD_VAR 0 3
39861: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39862: LD_INT 0
39864: PPUSH
// if not chassis or not weapon then
39865: LD_VAR 0 1
39869: NOT
39870: PUSH
39871: LD_VAR 0 2
39875: NOT
39876: OR
39877: IFFALSE 39881
// exit ;
39879: GO 40943
// case weapon of us_machine_gun :
39881: LD_VAR 0 2
39885: PUSH
39886: LD_INT 2
39888: DOUBLE
39889: EQUAL
39890: IFTRUE 39894
39892: GO 39924
39894: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39895: LD_ADDR_VAR 0 3
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: LD_INT 3
39908: PUSH
39909: LD_INT 4
39911: PUSH
39912: LD_INT 5
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: ST_TO_ADDR
39922: GO 40927
39924: LD_INT 3
39926: DOUBLE
39927: EQUAL
39928: IFTRUE 39932
39930: GO 39962
39932: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39933: LD_ADDR_VAR 0 3
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: LD_INT 3
39946: PUSH
39947: LD_INT 4
39949: PUSH
39950: LD_INT 5
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: ST_TO_ADDR
39960: GO 40927
39962: LD_INT 11
39964: DOUBLE
39965: EQUAL
39966: IFTRUE 39970
39968: GO 40000
39970: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39971: LD_ADDR_VAR 0 3
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: LD_INT 3
39984: PUSH
39985: LD_INT 4
39987: PUSH
39988: LD_INT 5
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
39998: GO 40927
40000: LD_INT 4
40002: DOUBLE
40003: EQUAL
40004: IFTRUE 40008
40006: GO 40034
40008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40009: LD_ADDR_VAR 0 3
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 3
40019: PUSH
40020: LD_INT 4
40022: PUSH
40023: LD_INT 5
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: ST_TO_ADDR
40032: GO 40927
40034: LD_INT 5
40036: DOUBLE
40037: EQUAL
40038: IFTRUE 40042
40040: GO 40068
40042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40043: LD_ADDR_VAR 0 3
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: LD_INT 4
40056: PUSH
40057: LD_INT 5
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: ST_TO_ADDR
40066: GO 40927
40068: LD_INT 9
40070: DOUBLE
40071: EQUAL
40072: IFTRUE 40076
40074: GO 40102
40076: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40077: LD_ADDR_VAR 0 3
40081: PUSH
40082: LD_INT 2
40084: PUSH
40085: LD_INT 3
40087: PUSH
40088: LD_INT 4
40090: PUSH
40091: LD_INT 5
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: ST_TO_ADDR
40100: GO 40927
40102: LD_INT 7
40104: DOUBLE
40105: EQUAL
40106: IFTRUE 40110
40108: GO 40136
40110: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40111: LD_ADDR_VAR 0 3
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: LD_INT 3
40121: PUSH
40122: LD_INT 4
40124: PUSH
40125: LD_INT 5
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: ST_TO_ADDR
40134: GO 40927
40136: LD_INT 12
40138: DOUBLE
40139: EQUAL
40140: IFTRUE 40144
40142: GO 40170
40144: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40145: LD_ADDR_VAR 0 3
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 4
40158: PUSH
40159: LD_INT 5
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: ST_TO_ADDR
40168: GO 40927
40170: LD_INT 13
40172: DOUBLE
40173: EQUAL
40174: IFTRUE 40178
40176: GO 40204
40178: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40179: LD_ADDR_VAR 0 3
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: LD_INT 4
40192: PUSH
40193: LD_INT 5
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: ST_TO_ADDR
40202: GO 40927
40204: LD_INT 14
40206: DOUBLE
40207: EQUAL
40208: IFTRUE 40212
40210: GO 40230
40212: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40213: LD_ADDR_VAR 0 3
40217: PUSH
40218: LD_INT 4
40220: PUSH
40221: LD_INT 5
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: ST_TO_ADDR
40228: GO 40927
40230: LD_INT 6
40232: DOUBLE
40233: EQUAL
40234: IFTRUE 40238
40236: GO 40256
40238: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40239: LD_ADDR_VAR 0 3
40243: PUSH
40244: LD_INT 4
40246: PUSH
40247: LD_INT 5
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: ST_TO_ADDR
40254: GO 40927
40256: LD_INT 10
40258: DOUBLE
40259: EQUAL
40260: IFTRUE 40264
40262: GO 40282
40264: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40265: LD_ADDR_VAR 0 3
40269: PUSH
40270: LD_INT 4
40272: PUSH
40273: LD_INT 5
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: ST_TO_ADDR
40280: GO 40927
40282: LD_INT 22
40284: DOUBLE
40285: EQUAL
40286: IFTRUE 40290
40288: GO 40316
40290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40291: LD_ADDR_VAR 0 3
40295: PUSH
40296: LD_INT 11
40298: PUSH
40299: LD_INT 12
40301: PUSH
40302: LD_INT 13
40304: PUSH
40305: LD_INT 14
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: ST_TO_ADDR
40314: GO 40927
40316: LD_INT 23
40318: DOUBLE
40319: EQUAL
40320: IFTRUE 40324
40322: GO 40350
40324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40325: LD_ADDR_VAR 0 3
40329: PUSH
40330: LD_INT 11
40332: PUSH
40333: LD_INT 12
40335: PUSH
40336: LD_INT 13
40338: PUSH
40339: LD_INT 14
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: ST_TO_ADDR
40348: GO 40927
40350: LD_INT 24
40352: DOUBLE
40353: EQUAL
40354: IFTRUE 40358
40356: GO 40384
40358: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40359: LD_ADDR_VAR 0 3
40363: PUSH
40364: LD_INT 11
40366: PUSH
40367: LD_INT 12
40369: PUSH
40370: LD_INT 13
40372: PUSH
40373: LD_INT 14
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: ST_TO_ADDR
40382: GO 40927
40384: LD_INT 30
40386: DOUBLE
40387: EQUAL
40388: IFTRUE 40392
40390: GO 40418
40392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40393: LD_ADDR_VAR 0 3
40397: PUSH
40398: LD_INT 11
40400: PUSH
40401: LD_INT 12
40403: PUSH
40404: LD_INT 13
40406: PUSH
40407: LD_INT 14
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: ST_TO_ADDR
40416: GO 40927
40418: LD_INT 25
40420: DOUBLE
40421: EQUAL
40422: IFTRUE 40426
40424: GO 40444
40426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40427: LD_ADDR_VAR 0 3
40431: PUSH
40432: LD_INT 13
40434: PUSH
40435: LD_INT 14
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: ST_TO_ADDR
40442: GO 40927
40444: LD_INT 27
40446: DOUBLE
40447: EQUAL
40448: IFTRUE 40452
40450: GO 40470
40452: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: LD_INT 13
40460: PUSH
40461: LD_INT 14
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: ST_TO_ADDR
40468: GO 40927
40470: LD_EXP 67
40474: DOUBLE
40475: EQUAL
40476: IFTRUE 40480
40478: GO 40506
40480: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40481: LD_ADDR_VAR 0 3
40485: PUSH
40486: LD_INT 11
40488: PUSH
40489: LD_INT 12
40491: PUSH
40492: LD_INT 13
40494: PUSH
40495: LD_INT 14
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
40504: GO 40927
40506: LD_INT 28
40508: DOUBLE
40509: EQUAL
40510: IFTRUE 40514
40512: GO 40532
40514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_INT 13
40522: PUSH
40523: LD_INT 14
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: ST_TO_ADDR
40530: GO 40927
40532: LD_INT 29
40534: DOUBLE
40535: EQUAL
40536: IFTRUE 40540
40538: GO 40558
40540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40541: LD_ADDR_VAR 0 3
40545: PUSH
40546: LD_INT 13
40548: PUSH
40549: LD_INT 14
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: ST_TO_ADDR
40556: GO 40927
40558: LD_INT 31
40560: DOUBLE
40561: EQUAL
40562: IFTRUE 40566
40564: GO 40584
40566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40567: LD_ADDR_VAR 0 3
40571: PUSH
40572: LD_INT 13
40574: PUSH
40575: LD_INT 14
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: ST_TO_ADDR
40582: GO 40927
40584: LD_INT 26
40586: DOUBLE
40587: EQUAL
40588: IFTRUE 40592
40590: GO 40610
40592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40593: LD_ADDR_VAR 0 3
40597: PUSH
40598: LD_INT 13
40600: PUSH
40601: LD_INT 14
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: ST_TO_ADDR
40608: GO 40927
40610: LD_INT 42
40612: DOUBLE
40613: EQUAL
40614: IFTRUE 40618
40616: GO 40644
40618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40619: LD_ADDR_VAR 0 3
40623: PUSH
40624: LD_INT 21
40626: PUSH
40627: LD_INT 22
40629: PUSH
40630: LD_INT 23
40632: PUSH
40633: LD_INT 24
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: ST_TO_ADDR
40642: GO 40927
40644: LD_INT 43
40646: DOUBLE
40647: EQUAL
40648: IFTRUE 40652
40650: GO 40678
40652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40653: LD_ADDR_VAR 0 3
40657: PUSH
40658: LD_INT 21
40660: PUSH
40661: LD_INT 22
40663: PUSH
40664: LD_INT 23
40666: PUSH
40667: LD_INT 24
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: ST_TO_ADDR
40676: GO 40927
40678: LD_INT 44
40680: DOUBLE
40681: EQUAL
40682: IFTRUE 40686
40684: GO 40712
40686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40687: LD_ADDR_VAR 0 3
40691: PUSH
40692: LD_INT 21
40694: PUSH
40695: LD_INT 22
40697: PUSH
40698: LD_INT 23
40700: PUSH
40701: LD_INT 24
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: ST_TO_ADDR
40710: GO 40927
40712: LD_INT 45
40714: DOUBLE
40715: EQUAL
40716: IFTRUE 40720
40718: GO 40746
40720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40721: LD_ADDR_VAR 0 3
40725: PUSH
40726: LD_INT 21
40728: PUSH
40729: LD_INT 22
40731: PUSH
40732: LD_INT 23
40734: PUSH
40735: LD_INT 24
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: ST_TO_ADDR
40744: GO 40927
40746: LD_INT 49
40748: DOUBLE
40749: EQUAL
40750: IFTRUE 40754
40752: GO 40780
40754: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40755: LD_ADDR_VAR 0 3
40759: PUSH
40760: LD_INT 21
40762: PUSH
40763: LD_INT 22
40765: PUSH
40766: LD_INT 23
40768: PUSH
40769: LD_INT 24
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: ST_TO_ADDR
40778: GO 40927
40780: LD_INT 51
40782: DOUBLE
40783: EQUAL
40784: IFTRUE 40788
40786: GO 40814
40788: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40789: LD_ADDR_VAR 0 3
40793: PUSH
40794: LD_INT 21
40796: PUSH
40797: LD_INT 22
40799: PUSH
40800: LD_INT 23
40802: PUSH
40803: LD_INT 24
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: ST_TO_ADDR
40812: GO 40927
40814: LD_INT 52
40816: DOUBLE
40817: EQUAL
40818: IFTRUE 40822
40820: GO 40848
40822: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40823: LD_ADDR_VAR 0 3
40827: PUSH
40828: LD_INT 21
40830: PUSH
40831: LD_INT 22
40833: PUSH
40834: LD_INT 23
40836: PUSH
40837: LD_INT 24
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: ST_TO_ADDR
40846: GO 40927
40848: LD_INT 53
40850: DOUBLE
40851: EQUAL
40852: IFTRUE 40856
40854: GO 40874
40856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40857: LD_ADDR_VAR 0 3
40861: PUSH
40862: LD_INT 23
40864: PUSH
40865: LD_INT 24
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: ST_TO_ADDR
40872: GO 40927
40874: LD_INT 46
40876: DOUBLE
40877: EQUAL
40878: IFTRUE 40882
40880: GO 40900
40882: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40883: LD_ADDR_VAR 0 3
40887: PUSH
40888: LD_INT 23
40890: PUSH
40891: LD_INT 24
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: ST_TO_ADDR
40898: GO 40927
40900: LD_INT 47
40902: DOUBLE
40903: EQUAL
40904: IFTRUE 40908
40906: GO 40926
40908: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40909: LD_ADDR_VAR 0 3
40913: PUSH
40914: LD_INT 23
40916: PUSH
40917: LD_INT 24
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: ST_TO_ADDR
40924: GO 40927
40926: POP
// result := ( chassis in result ) ;
40927: LD_ADDR_VAR 0 3
40931: PUSH
40932: LD_VAR 0 1
40936: PUSH
40937: LD_VAR 0 3
40941: IN
40942: ST_TO_ADDR
// end ;
40943: LD_VAR 0 3
40947: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40948: LD_INT 0
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
// result := array ;
40957: LD_ADDR_VAR 0 5
40961: PUSH
40962: LD_VAR 0 1
40966: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40967: LD_VAR 0 1
40971: NOT
40972: PUSH
40973: LD_VAR 0 2
40977: NOT
40978: OR
40979: PUSH
40980: LD_VAR 0 3
40984: NOT
40985: OR
40986: PUSH
40987: LD_VAR 0 2
40991: PUSH
40992: LD_VAR 0 1
40996: GREATER
40997: OR
40998: PUSH
40999: LD_VAR 0 3
41003: PUSH
41004: LD_VAR 0 1
41008: GREATER
41009: OR
41010: IFFALSE 41014
// exit ;
41012: GO 41310
// if direction then
41014: LD_VAR 0 4
41018: IFFALSE 41082
// begin d := 1 ;
41020: LD_ADDR_VAR 0 9
41024: PUSH
41025: LD_INT 1
41027: ST_TO_ADDR
// if i_from > i_to then
41028: LD_VAR 0 2
41032: PUSH
41033: LD_VAR 0 3
41037: GREATER
41038: IFFALSE 41064
// length := ( array - i_from ) + i_to else
41040: LD_ADDR_VAR 0 11
41044: PUSH
41045: LD_VAR 0 1
41049: PUSH
41050: LD_VAR 0 2
41054: MINUS
41055: PUSH
41056: LD_VAR 0 3
41060: PLUS
41061: ST_TO_ADDR
41062: GO 41080
// length := i_to - i_from ;
41064: LD_ADDR_VAR 0 11
41068: PUSH
41069: LD_VAR 0 3
41073: PUSH
41074: LD_VAR 0 2
41078: MINUS
41079: ST_TO_ADDR
// end else
41080: GO 41143
// begin d := - 1 ;
41082: LD_ADDR_VAR 0 9
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: ST_TO_ADDR
// if i_from > i_to then
41091: LD_VAR 0 2
41095: PUSH
41096: LD_VAR 0 3
41100: GREATER
41101: IFFALSE 41121
// length := i_from - i_to else
41103: LD_ADDR_VAR 0 11
41107: PUSH
41108: LD_VAR 0 2
41112: PUSH
41113: LD_VAR 0 3
41117: MINUS
41118: ST_TO_ADDR
41119: GO 41143
// length := ( array - i_to ) + i_from ;
41121: LD_ADDR_VAR 0 11
41125: PUSH
41126: LD_VAR 0 1
41130: PUSH
41131: LD_VAR 0 3
41135: MINUS
41136: PUSH
41137: LD_VAR 0 2
41141: PLUS
41142: ST_TO_ADDR
// end ; if not length then
41143: LD_VAR 0 11
41147: NOT
41148: IFFALSE 41152
// exit ;
41150: GO 41310
// tmp := array ;
41152: LD_ADDR_VAR 0 10
41156: PUSH
41157: LD_VAR 0 1
41161: ST_TO_ADDR
// for i = 1 to length do
41162: LD_ADDR_VAR 0 6
41166: PUSH
41167: DOUBLE
41168: LD_INT 1
41170: DEC
41171: ST_TO_ADDR
41172: LD_VAR 0 11
41176: PUSH
41177: FOR_TO
41178: IFFALSE 41298
// begin for j = 1 to array do
41180: LD_ADDR_VAR 0 7
41184: PUSH
41185: DOUBLE
41186: LD_INT 1
41188: DEC
41189: ST_TO_ADDR
41190: LD_VAR 0 1
41194: PUSH
41195: FOR_TO
41196: IFFALSE 41284
// begin k := j + d ;
41198: LD_ADDR_VAR 0 8
41202: PUSH
41203: LD_VAR 0 7
41207: PUSH
41208: LD_VAR 0 9
41212: PLUS
41213: ST_TO_ADDR
// if k > array then
41214: LD_VAR 0 8
41218: PUSH
41219: LD_VAR 0 1
41223: GREATER
41224: IFFALSE 41234
// k := 1 ;
41226: LD_ADDR_VAR 0 8
41230: PUSH
41231: LD_INT 1
41233: ST_TO_ADDR
// if not k then
41234: LD_VAR 0 8
41238: NOT
41239: IFFALSE 41251
// k := array ;
41241: LD_ADDR_VAR 0 8
41245: PUSH
41246: LD_VAR 0 1
41250: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41251: LD_ADDR_VAR 0 10
41255: PUSH
41256: LD_VAR 0 10
41260: PPUSH
41261: LD_VAR 0 8
41265: PPUSH
41266: LD_VAR 0 1
41270: PUSH
41271: LD_VAR 0 7
41275: ARRAY
41276: PPUSH
41277: CALL_OW 1
41281: ST_TO_ADDR
// end ;
41282: GO 41195
41284: POP
41285: POP
// array := tmp ;
41286: LD_ADDR_VAR 0 1
41290: PUSH
41291: LD_VAR 0 10
41295: ST_TO_ADDR
// end ;
41296: GO 41177
41298: POP
41299: POP
// result := array ;
41300: LD_ADDR_VAR 0 5
41304: PUSH
41305: LD_VAR 0 1
41309: ST_TO_ADDR
// end ;
41310: LD_VAR 0 5
41314: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41315: LD_INT 0
41317: PPUSH
41318: PPUSH
// result := 0 ;
41319: LD_ADDR_VAR 0 3
41323: PUSH
41324: LD_INT 0
41326: ST_TO_ADDR
// if not array or not value in array then
41327: LD_VAR 0 1
41331: NOT
41332: PUSH
41333: LD_VAR 0 2
41337: PUSH
41338: LD_VAR 0 1
41342: IN
41343: NOT
41344: OR
41345: IFFALSE 41349
// exit ;
41347: GO 41403
// for i = 1 to array do
41349: LD_ADDR_VAR 0 4
41353: PUSH
41354: DOUBLE
41355: LD_INT 1
41357: DEC
41358: ST_TO_ADDR
41359: LD_VAR 0 1
41363: PUSH
41364: FOR_TO
41365: IFFALSE 41401
// if value = array [ i ] then
41367: LD_VAR 0 2
41371: PUSH
41372: LD_VAR 0 1
41376: PUSH
41377: LD_VAR 0 4
41381: ARRAY
41382: EQUAL
41383: IFFALSE 41399
// begin result := i ;
41385: LD_ADDR_VAR 0 3
41389: PUSH
41390: LD_VAR 0 4
41394: ST_TO_ADDR
// exit ;
41395: POP
41396: POP
41397: GO 41403
// end ;
41399: GO 41364
41401: POP
41402: POP
// end ;
41403: LD_VAR 0 3
41407: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41408: LD_INT 0
41410: PPUSH
// vc_chassis := chassis ;
41411: LD_ADDR_OWVAR 37
41415: PUSH
41416: LD_VAR 0 1
41420: ST_TO_ADDR
// vc_engine := engine ;
41421: LD_ADDR_OWVAR 39
41425: PUSH
41426: LD_VAR 0 2
41430: ST_TO_ADDR
// vc_control := control ;
41431: LD_ADDR_OWVAR 38
41435: PUSH
41436: LD_VAR 0 3
41440: ST_TO_ADDR
// vc_weapon := weapon ;
41441: LD_ADDR_OWVAR 40
41445: PUSH
41446: LD_VAR 0 4
41450: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41451: LD_ADDR_OWVAR 41
41455: PUSH
41456: LD_VAR 0 5
41460: ST_TO_ADDR
// end ;
41461: LD_VAR 0 6
41465: RET
// export function WantPlant ( unit ) ; var task ; begin
41466: LD_INT 0
41468: PPUSH
41469: PPUSH
// result := false ;
41470: LD_ADDR_VAR 0 2
41474: PUSH
41475: LD_INT 0
41477: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41478: LD_ADDR_VAR 0 3
41482: PUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: CALL_OW 437
41492: ST_TO_ADDR
// if task then
41493: LD_VAR 0 3
41497: IFFALSE 41525
// if task [ 1 ] [ 1 ] = p then
41499: LD_VAR 0 3
41503: PUSH
41504: LD_INT 1
41506: ARRAY
41507: PUSH
41508: LD_INT 1
41510: ARRAY
41511: PUSH
41512: LD_STRING p
41514: EQUAL
41515: IFFALSE 41525
// result := true ;
41517: LD_ADDR_VAR 0 2
41521: PUSH
41522: LD_INT 1
41524: ST_TO_ADDR
// end ;
41525: LD_VAR 0 2
41529: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41530: LD_INT 0
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
// if pos < 1 then
41536: LD_VAR 0 2
41540: PUSH
41541: LD_INT 1
41543: LESS
41544: IFFALSE 41548
// exit ;
41546: GO 41851
// if pos = 1 then
41548: LD_VAR 0 2
41552: PUSH
41553: LD_INT 1
41555: EQUAL
41556: IFFALSE 41589
// result := Replace ( arr , pos [ 1 ] , value ) else
41558: LD_ADDR_VAR 0 4
41562: PUSH
41563: LD_VAR 0 1
41567: PPUSH
41568: LD_VAR 0 2
41572: PUSH
41573: LD_INT 1
41575: ARRAY
41576: PPUSH
41577: LD_VAR 0 3
41581: PPUSH
41582: CALL_OW 1
41586: ST_TO_ADDR
41587: GO 41851
// begin tmp := arr ;
41589: LD_ADDR_VAR 0 6
41593: PUSH
41594: LD_VAR 0 1
41598: ST_TO_ADDR
// s_arr := [ tmp ] ;
41599: LD_ADDR_VAR 0 7
41603: PUSH
41604: LD_VAR 0 6
41608: PUSH
41609: EMPTY
41610: LIST
41611: ST_TO_ADDR
// for i = 1 to pos - 1 do
41612: LD_ADDR_VAR 0 5
41616: PUSH
41617: DOUBLE
41618: LD_INT 1
41620: DEC
41621: ST_TO_ADDR
41622: LD_VAR 0 2
41626: PUSH
41627: LD_INT 1
41629: MINUS
41630: PUSH
41631: FOR_TO
41632: IFFALSE 41677
// begin tmp := tmp [ pos [ i ] ] ;
41634: LD_ADDR_VAR 0 6
41638: PUSH
41639: LD_VAR 0 6
41643: PUSH
41644: LD_VAR 0 2
41648: PUSH
41649: LD_VAR 0 5
41653: ARRAY
41654: ARRAY
41655: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41656: LD_ADDR_VAR 0 7
41660: PUSH
41661: LD_VAR 0 7
41665: PUSH
41666: LD_VAR 0 6
41670: PUSH
41671: EMPTY
41672: LIST
41673: ADD
41674: ST_TO_ADDR
// end ;
41675: GO 41631
41677: POP
41678: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41679: LD_ADDR_VAR 0 6
41683: PUSH
41684: LD_VAR 0 6
41688: PPUSH
41689: LD_VAR 0 2
41693: PUSH
41694: LD_VAR 0 2
41698: ARRAY
41699: PPUSH
41700: LD_VAR 0 3
41704: PPUSH
41705: CALL_OW 1
41709: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41710: LD_ADDR_VAR 0 7
41714: PUSH
41715: LD_VAR 0 7
41719: PPUSH
41720: LD_VAR 0 7
41724: PPUSH
41725: LD_VAR 0 6
41729: PPUSH
41730: CALL_OW 1
41734: ST_TO_ADDR
// for i = s_arr downto 2 do
41735: LD_ADDR_VAR 0 5
41739: PUSH
41740: DOUBLE
41741: LD_VAR 0 7
41745: INC
41746: ST_TO_ADDR
41747: LD_INT 2
41749: PUSH
41750: FOR_DOWNTO
41751: IFFALSE 41835
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41753: LD_ADDR_VAR 0 6
41757: PUSH
41758: LD_VAR 0 7
41762: PUSH
41763: LD_VAR 0 5
41767: PUSH
41768: LD_INT 1
41770: MINUS
41771: ARRAY
41772: PPUSH
41773: LD_VAR 0 2
41777: PUSH
41778: LD_VAR 0 5
41782: PUSH
41783: LD_INT 1
41785: MINUS
41786: ARRAY
41787: PPUSH
41788: LD_VAR 0 7
41792: PUSH
41793: LD_VAR 0 5
41797: ARRAY
41798: PPUSH
41799: CALL_OW 1
41803: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41804: LD_ADDR_VAR 0 7
41808: PUSH
41809: LD_VAR 0 7
41813: PPUSH
41814: LD_VAR 0 5
41818: PUSH
41819: LD_INT 1
41821: MINUS
41822: PPUSH
41823: LD_VAR 0 6
41827: PPUSH
41828: CALL_OW 1
41832: ST_TO_ADDR
// end ;
41833: GO 41750
41835: POP
41836: POP
// result := s_arr [ 1 ] ;
41837: LD_ADDR_VAR 0 4
41841: PUSH
41842: LD_VAR 0 7
41846: PUSH
41847: LD_INT 1
41849: ARRAY
41850: ST_TO_ADDR
// end ; end ;
41851: LD_VAR 0 4
41855: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41856: LD_INT 0
41858: PPUSH
41859: PPUSH
// if not list then
41860: LD_VAR 0 1
41864: NOT
41865: IFFALSE 41869
// exit ;
41867: GO 41960
// i := list [ pos1 ] ;
41869: LD_ADDR_VAR 0 5
41873: PUSH
41874: LD_VAR 0 1
41878: PUSH
41879: LD_VAR 0 2
41883: ARRAY
41884: ST_TO_ADDR
// if not i then
41885: LD_VAR 0 5
41889: NOT
41890: IFFALSE 41894
// exit ;
41892: GO 41960
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41894: LD_ADDR_VAR 0 1
41898: PUSH
41899: LD_VAR 0 1
41903: PPUSH
41904: LD_VAR 0 2
41908: PPUSH
41909: LD_VAR 0 1
41913: PUSH
41914: LD_VAR 0 3
41918: ARRAY
41919: PPUSH
41920: CALL_OW 1
41924: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41925: LD_ADDR_VAR 0 1
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: LD_VAR 0 3
41939: PPUSH
41940: LD_VAR 0 5
41944: PPUSH
41945: CALL_OW 1
41949: ST_TO_ADDR
// result := list ;
41950: LD_ADDR_VAR 0 4
41954: PUSH
41955: LD_VAR 0 1
41959: ST_TO_ADDR
// end ;
41960: LD_VAR 0 4
41964: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41965: LD_INT 0
41967: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41968: LD_ADDR_VAR 0 5
41972: PUSH
41973: LD_VAR 0 1
41977: PPUSH
41978: CALL_OW 250
41982: PPUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: CALL_OW 251
41992: PPUSH
41993: LD_VAR 0 2
41997: PPUSH
41998: LD_VAR 0 3
42002: PPUSH
42003: LD_VAR 0 4
42007: PPUSH
42008: CALL 42018 0 5
42012: ST_TO_ADDR
// end ;
42013: LD_VAR 0 5
42017: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42018: LD_INT 0
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
// if not list then
42024: LD_VAR 0 3
42028: NOT
42029: IFFALSE 42033
// exit ;
42031: GO 42421
// result := [ ] ;
42033: LD_ADDR_VAR 0 6
42037: PUSH
42038: EMPTY
42039: ST_TO_ADDR
// for i in list do
42040: LD_ADDR_VAR 0 7
42044: PUSH
42045: LD_VAR 0 3
42049: PUSH
42050: FOR_IN
42051: IFFALSE 42253
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42053: LD_ADDR_VAR 0 9
42057: PUSH
42058: LD_VAR 0 7
42062: PPUSH
42063: LD_VAR 0 1
42067: PPUSH
42068: LD_VAR 0 2
42072: PPUSH
42073: CALL_OW 297
42077: ST_TO_ADDR
// if not result then
42078: LD_VAR 0 6
42082: NOT
42083: IFFALSE 42109
// result := [ [ i , tmp ] ] else
42085: LD_ADDR_VAR 0 6
42089: PUSH
42090: LD_VAR 0 7
42094: PUSH
42095: LD_VAR 0 9
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: ST_TO_ADDR
42107: GO 42251
// begin if result [ result ] [ 2 ] < tmp then
42109: LD_VAR 0 6
42113: PUSH
42114: LD_VAR 0 6
42118: ARRAY
42119: PUSH
42120: LD_INT 2
42122: ARRAY
42123: PUSH
42124: LD_VAR 0 9
42128: LESS
42129: IFFALSE 42171
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42131: LD_ADDR_VAR 0 6
42135: PUSH
42136: LD_VAR 0 6
42140: PPUSH
42141: LD_VAR 0 6
42145: PUSH
42146: LD_INT 1
42148: PLUS
42149: PPUSH
42150: LD_VAR 0 7
42154: PUSH
42155: LD_VAR 0 9
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PPUSH
42164: CALL_OW 2
42168: ST_TO_ADDR
42169: GO 42251
// for j = 1 to result do
42171: LD_ADDR_VAR 0 8
42175: PUSH
42176: DOUBLE
42177: LD_INT 1
42179: DEC
42180: ST_TO_ADDR
42181: LD_VAR 0 6
42185: PUSH
42186: FOR_TO
42187: IFFALSE 42249
// begin if tmp < result [ j ] [ 2 ] then
42189: LD_VAR 0 9
42193: PUSH
42194: LD_VAR 0 6
42198: PUSH
42199: LD_VAR 0 8
42203: ARRAY
42204: PUSH
42205: LD_INT 2
42207: ARRAY
42208: LESS
42209: IFFALSE 42247
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42211: LD_ADDR_VAR 0 6
42215: PUSH
42216: LD_VAR 0 6
42220: PPUSH
42221: LD_VAR 0 8
42225: PPUSH
42226: LD_VAR 0 7
42230: PUSH
42231: LD_VAR 0 9
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PPUSH
42240: CALL_OW 2
42244: ST_TO_ADDR
// break ;
42245: GO 42249
// end ; end ;
42247: GO 42186
42249: POP
42250: POP
// end ; end ;
42251: GO 42050
42253: POP
42254: POP
// if result and not asc then
42255: LD_VAR 0 6
42259: PUSH
42260: LD_VAR 0 4
42264: NOT
42265: AND
42266: IFFALSE 42341
// begin tmp := result ;
42268: LD_ADDR_VAR 0 9
42272: PUSH
42273: LD_VAR 0 6
42277: ST_TO_ADDR
// for i = tmp downto 1 do
42278: LD_ADDR_VAR 0 7
42282: PUSH
42283: DOUBLE
42284: LD_VAR 0 9
42288: INC
42289: ST_TO_ADDR
42290: LD_INT 1
42292: PUSH
42293: FOR_DOWNTO
42294: IFFALSE 42339
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42296: LD_ADDR_VAR 0 6
42300: PUSH
42301: LD_VAR 0 6
42305: PPUSH
42306: LD_VAR 0 9
42310: PUSH
42311: LD_VAR 0 7
42315: MINUS
42316: PUSH
42317: LD_INT 1
42319: PLUS
42320: PPUSH
42321: LD_VAR 0 9
42325: PUSH
42326: LD_VAR 0 7
42330: ARRAY
42331: PPUSH
42332: CALL_OW 1
42336: ST_TO_ADDR
42337: GO 42293
42339: POP
42340: POP
// end ; tmp := [ ] ;
42341: LD_ADDR_VAR 0 9
42345: PUSH
42346: EMPTY
42347: ST_TO_ADDR
// if mode then
42348: LD_VAR 0 5
42352: IFFALSE 42421
// begin for i = 1 to result do
42354: LD_ADDR_VAR 0 7
42358: PUSH
42359: DOUBLE
42360: LD_INT 1
42362: DEC
42363: ST_TO_ADDR
42364: LD_VAR 0 6
42368: PUSH
42369: FOR_TO
42370: IFFALSE 42409
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42372: LD_ADDR_VAR 0 9
42376: PUSH
42377: LD_VAR 0 9
42381: PPUSH
42382: LD_VAR 0 7
42386: PPUSH
42387: LD_VAR 0 6
42391: PUSH
42392: LD_VAR 0 7
42396: ARRAY
42397: PUSH
42398: LD_INT 1
42400: ARRAY
42401: PPUSH
42402: CALL_OW 1
42406: ST_TO_ADDR
42407: GO 42369
42409: POP
42410: POP
// result := tmp ;
42411: LD_ADDR_VAR 0 6
42415: PUSH
42416: LD_VAR 0 9
42420: ST_TO_ADDR
// end ; end ;
42421: LD_VAR 0 6
42425: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42426: LD_INT 0
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42434: LD_ADDR_VAR 0 5
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: EMPTY
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
// if not x or not y then
42456: LD_VAR 0 2
42460: NOT
42461: PUSH
42462: LD_VAR 0 3
42466: NOT
42467: OR
42468: IFFALSE 42472
// exit ;
42470: GO 44124
// if not range then
42472: LD_VAR 0 4
42476: NOT
42477: IFFALSE 42487
// range := 10 ;
42479: LD_ADDR_VAR 0 4
42483: PUSH
42484: LD_INT 10
42486: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42487: LD_ADDR_VAR 0 8
42491: PUSH
42492: LD_INT 81
42494: PUSH
42495: LD_VAR 0 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 92
42506: PUSH
42507: LD_VAR 0 2
42511: PUSH
42512: LD_VAR 0 3
42516: PUSH
42517: LD_VAR 0 4
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: LD_INT 21
42533: PUSH
42534: LD_INT 3
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: PPUSH
42550: CALL_OW 69
42554: ST_TO_ADDR
// if not tmp then
42555: LD_VAR 0 8
42559: NOT
42560: IFFALSE 42564
// exit ;
42562: GO 44124
// for i in tmp do
42564: LD_ADDR_VAR 0 6
42568: PUSH
42569: LD_VAR 0 8
42573: PUSH
42574: FOR_IN
42575: IFFALSE 44099
// begin points := [ 0 , 0 , 0 ] ;
42577: LD_ADDR_VAR 0 9
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: ST_TO_ADDR
// bpoints := 1 ;
42596: LD_ADDR_VAR 0 10
42600: PUSH
42601: LD_INT 1
42603: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42604: LD_VAR 0 6
42608: PPUSH
42609: CALL_OW 247
42613: PUSH
42614: LD_INT 1
42616: DOUBLE
42617: EQUAL
42618: IFTRUE 42622
42620: GO 43200
42622: POP
// begin if GetClass ( i ) = 1 then
42623: LD_VAR 0 6
42627: PPUSH
42628: CALL_OW 257
42632: PUSH
42633: LD_INT 1
42635: EQUAL
42636: IFFALSE 42657
// points := [ 10 , 5 , 3 ] ;
42638: LD_ADDR_VAR 0 9
42642: PUSH
42643: LD_INT 10
42645: PUSH
42646: LD_INT 5
42648: PUSH
42649: LD_INT 3
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42657: LD_VAR 0 6
42661: PPUSH
42662: CALL_OW 257
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: LD_INT 3
42672: PUSH
42673: LD_INT 4
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: IN
42681: IFFALSE 42702
// points := [ 3 , 2 , 1 ] ;
42683: LD_ADDR_VAR 0 9
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42702: LD_VAR 0 6
42706: PPUSH
42707: CALL_OW 257
42711: PUSH
42712: LD_INT 5
42714: EQUAL
42715: IFFALSE 42736
// points := [ 130 , 5 , 2 ] ;
42717: LD_ADDR_VAR 0 9
42721: PUSH
42722: LD_INT 130
42724: PUSH
42725: LD_INT 5
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42736: LD_VAR 0 6
42740: PPUSH
42741: CALL_OW 257
42745: PUSH
42746: LD_INT 8
42748: EQUAL
42749: IFFALSE 42770
// points := [ 35 , 35 , 30 ] ;
42751: LD_ADDR_VAR 0 9
42755: PUSH
42756: LD_INT 35
42758: PUSH
42759: LD_INT 35
42761: PUSH
42762: LD_INT 30
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42770: LD_VAR 0 6
42774: PPUSH
42775: CALL_OW 257
42779: PUSH
42780: LD_INT 9
42782: EQUAL
42783: IFFALSE 42804
// points := [ 20 , 55 , 40 ] ;
42785: LD_ADDR_VAR 0 9
42789: PUSH
42790: LD_INT 20
42792: PUSH
42793: LD_INT 55
42795: PUSH
42796: LD_INT 40
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: LIST
42803: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42804: LD_VAR 0 6
42808: PPUSH
42809: CALL_OW 257
42813: PUSH
42814: LD_INT 12
42816: PUSH
42817: LD_INT 16
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: IN
42824: IFFALSE 42845
// points := [ 5 , 3 , 2 ] ;
42826: LD_ADDR_VAR 0 9
42830: PUSH
42831: LD_INT 5
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42845: LD_VAR 0 6
42849: PPUSH
42850: CALL_OW 257
42854: PUSH
42855: LD_INT 17
42857: EQUAL
42858: IFFALSE 42879
// points := [ 100 , 50 , 75 ] ;
42860: LD_ADDR_VAR 0 9
42864: PUSH
42865: LD_INT 100
42867: PUSH
42868: LD_INT 50
42870: PUSH
42871: LD_INT 75
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42879: LD_VAR 0 6
42883: PPUSH
42884: CALL_OW 257
42888: PUSH
42889: LD_INT 15
42891: EQUAL
42892: IFFALSE 42913
// points := [ 10 , 5 , 3 ] ;
42894: LD_ADDR_VAR 0 9
42898: PUSH
42899: LD_INT 10
42901: PUSH
42902: LD_INT 5
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42913: LD_VAR 0 6
42917: PPUSH
42918: CALL_OW 257
42922: PUSH
42923: LD_INT 14
42925: EQUAL
42926: IFFALSE 42947
// points := [ 10 , 0 , 0 ] ;
42928: LD_ADDR_VAR 0 9
42932: PUSH
42933: LD_INT 10
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42947: LD_VAR 0 6
42951: PPUSH
42952: CALL_OW 257
42956: PUSH
42957: LD_INT 11
42959: EQUAL
42960: IFFALSE 42981
// points := [ 30 , 10 , 5 ] ;
42962: LD_ADDR_VAR 0 9
42966: PUSH
42967: LD_INT 30
42969: PUSH
42970: LD_INT 10
42972: PUSH
42973: LD_INT 5
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42981: LD_VAR 0 1
42985: PPUSH
42986: LD_INT 5
42988: PPUSH
42989: CALL_OW 321
42993: PUSH
42994: LD_INT 2
42996: EQUAL
42997: IFFALSE 43014
// bpoints := bpoints * 1.8 ;
42999: LD_ADDR_VAR 0 10
43003: PUSH
43004: LD_VAR 0 10
43008: PUSH
43009: LD_REAL  1.80000000000000E+0000
43012: MUL
43013: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43014: LD_VAR 0 6
43018: PPUSH
43019: CALL_OW 257
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: LD_INT 4
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: IN
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: LD_INT 51
43050: PPUSH
43051: CALL_OW 321
43055: PUSH
43056: LD_INT 2
43058: EQUAL
43059: AND
43060: IFFALSE 43077
// bpoints := bpoints * 1.2 ;
43062: LD_ADDR_VAR 0 10
43066: PUSH
43067: LD_VAR 0 10
43071: PUSH
43072: LD_REAL  1.20000000000000E+0000
43075: MUL
43076: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43077: LD_VAR 0 6
43081: PPUSH
43082: CALL_OW 257
43086: PUSH
43087: LD_INT 5
43089: PUSH
43090: LD_INT 7
43092: PUSH
43093: LD_INT 9
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: IN
43101: PUSH
43102: LD_VAR 0 1
43106: PPUSH
43107: LD_INT 52
43109: PPUSH
43110: CALL_OW 321
43114: PUSH
43115: LD_INT 2
43117: EQUAL
43118: AND
43119: IFFALSE 43136
// bpoints := bpoints * 1.5 ;
43121: LD_ADDR_VAR 0 10
43125: PUSH
43126: LD_VAR 0 10
43130: PUSH
43131: LD_REAL  1.50000000000000E+0000
43134: MUL
43135: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43136: LD_VAR 0 1
43140: PPUSH
43141: LD_INT 66
43143: PPUSH
43144: CALL_OW 321
43148: PUSH
43149: LD_INT 2
43151: EQUAL
43152: IFFALSE 43169
// bpoints := bpoints * 1.1 ;
43154: LD_ADDR_VAR 0 10
43158: PUSH
43159: LD_VAR 0 10
43163: PUSH
43164: LD_REAL  1.10000000000000E+0000
43167: MUL
43168: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43169: LD_ADDR_VAR 0 10
43173: PUSH
43174: LD_VAR 0 10
43178: PUSH
43179: LD_VAR 0 6
43183: PPUSH
43184: LD_INT 1
43186: PPUSH
43187: CALL_OW 259
43191: PUSH
43192: LD_REAL  1.15000000000000E+0000
43195: MUL
43196: MUL
43197: ST_TO_ADDR
// end ; unit_vehicle :
43198: GO 44028
43200: LD_INT 2
43202: DOUBLE
43203: EQUAL
43204: IFTRUE 43208
43206: GO 44016
43208: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43209: LD_VAR 0 6
43213: PPUSH
43214: CALL_OW 264
43218: PUSH
43219: LD_INT 2
43221: PUSH
43222: LD_INT 42
43224: PUSH
43225: LD_INT 24
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: IN
43233: IFFALSE 43254
// points := [ 25 , 5 , 3 ] ;
43235: LD_ADDR_VAR 0 9
43239: PUSH
43240: LD_INT 25
43242: PUSH
43243: LD_INT 5
43245: PUSH
43246: LD_INT 3
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43254: LD_VAR 0 6
43258: PPUSH
43259: CALL_OW 264
43263: PUSH
43264: LD_INT 4
43266: PUSH
43267: LD_INT 43
43269: PUSH
43270: LD_INT 25
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: IN
43278: IFFALSE 43299
// points := [ 40 , 15 , 5 ] ;
43280: LD_ADDR_VAR 0 9
43284: PUSH
43285: LD_INT 40
43287: PUSH
43288: LD_INT 15
43290: PUSH
43291: LD_INT 5
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43299: LD_VAR 0 6
43303: PPUSH
43304: CALL_OW 264
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: LD_INT 23
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: IN
43319: IFFALSE 43340
// points := [ 7 , 25 , 8 ] ;
43321: LD_ADDR_VAR 0 9
43325: PUSH
43326: LD_INT 7
43328: PUSH
43329: LD_INT 25
43331: PUSH
43332: LD_INT 8
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: LIST
43339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43340: LD_VAR 0 6
43344: PPUSH
43345: CALL_OW 264
43349: PUSH
43350: LD_INT 5
43352: PUSH
43353: LD_INT 27
43355: PUSH
43356: LD_INT 44
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: IN
43364: IFFALSE 43385
// points := [ 14 , 50 , 16 ] ;
43366: LD_ADDR_VAR 0 9
43370: PUSH
43371: LD_INT 14
43373: PUSH
43374: LD_INT 50
43376: PUSH
43377: LD_INT 16
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43385: LD_VAR 0 6
43389: PPUSH
43390: CALL_OW 264
43394: PUSH
43395: LD_INT 6
43397: PUSH
43398: LD_INT 46
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: IN
43405: IFFALSE 43426
// points := [ 32 , 120 , 70 ] ;
43407: LD_ADDR_VAR 0 9
43411: PUSH
43412: LD_INT 32
43414: PUSH
43415: LD_INT 120
43417: PUSH
43418: LD_INT 70
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: LIST
43425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43426: LD_VAR 0 6
43430: PPUSH
43431: CALL_OW 264
43435: PUSH
43436: LD_INT 7
43438: PUSH
43439: LD_INT 28
43441: PUSH
43442: LD_INT 45
43444: PUSH
43445: LD_EXP 67
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: IN
43456: IFFALSE 43477
// points := [ 35 , 20 , 45 ] ;
43458: LD_ADDR_VAR 0 9
43462: PUSH
43463: LD_INT 35
43465: PUSH
43466: LD_INT 20
43468: PUSH
43469: LD_INT 45
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43477: LD_VAR 0 6
43481: PPUSH
43482: CALL_OW 264
43486: PUSH
43487: LD_INT 47
43489: PUSH
43490: EMPTY
43491: LIST
43492: IN
43493: IFFALSE 43514
// points := [ 67 , 45 , 75 ] ;
43495: LD_ADDR_VAR 0 9
43499: PUSH
43500: LD_INT 67
43502: PUSH
43503: LD_INT 45
43505: PUSH
43506: LD_INT 75
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43514: LD_VAR 0 6
43518: PPUSH
43519: CALL_OW 264
43523: PUSH
43524: LD_INT 26
43526: PUSH
43527: EMPTY
43528: LIST
43529: IN
43530: IFFALSE 43551
// points := [ 120 , 30 , 80 ] ;
43532: LD_ADDR_VAR 0 9
43536: PUSH
43537: LD_INT 120
43539: PUSH
43540: LD_INT 30
43542: PUSH
43543: LD_INT 80
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43551: LD_VAR 0 6
43555: PPUSH
43556: CALL_OW 264
43560: PUSH
43561: LD_INT 22
43563: PUSH
43564: EMPTY
43565: LIST
43566: IN
43567: IFFALSE 43588
// points := [ 40 , 1 , 1 ] ;
43569: LD_ADDR_VAR 0 9
43573: PUSH
43574: LD_INT 40
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43588: LD_VAR 0 6
43592: PPUSH
43593: CALL_OW 264
43597: PUSH
43598: LD_INT 29
43600: PUSH
43601: EMPTY
43602: LIST
43603: IN
43604: IFFALSE 43625
// points := [ 70 , 200 , 400 ] ;
43606: LD_ADDR_VAR 0 9
43610: PUSH
43611: LD_INT 70
43613: PUSH
43614: LD_INT 200
43616: PUSH
43617: LD_INT 400
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43625: LD_VAR 0 6
43629: PPUSH
43630: CALL_OW 264
43634: PUSH
43635: LD_INT 14
43637: PUSH
43638: LD_INT 53
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: IN
43645: IFFALSE 43666
// points := [ 40 , 10 , 20 ] ;
43647: LD_ADDR_VAR 0 9
43651: PUSH
43652: LD_INT 40
43654: PUSH
43655: LD_INT 10
43657: PUSH
43658: LD_INT 20
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43666: LD_VAR 0 6
43670: PPUSH
43671: CALL_OW 264
43675: PUSH
43676: LD_INT 9
43678: PUSH
43679: EMPTY
43680: LIST
43681: IN
43682: IFFALSE 43703
// points := [ 5 , 70 , 20 ] ;
43684: LD_ADDR_VAR 0 9
43688: PUSH
43689: LD_INT 5
43691: PUSH
43692: LD_INT 70
43694: PUSH
43695: LD_INT 20
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43703: LD_VAR 0 6
43707: PPUSH
43708: CALL_OW 264
43712: PUSH
43713: LD_INT 10
43715: PUSH
43716: EMPTY
43717: LIST
43718: IN
43719: IFFALSE 43740
// points := [ 35 , 110 , 70 ] ;
43721: LD_ADDR_VAR 0 9
43725: PUSH
43726: LD_INT 35
43728: PUSH
43729: LD_INT 110
43731: PUSH
43732: LD_INT 70
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43740: LD_VAR 0 6
43744: PPUSH
43745: CALL_OW 265
43749: PUSH
43750: LD_INT 25
43752: EQUAL
43753: IFFALSE 43774
// points := [ 80 , 65 , 100 ] ;
43755: LD_ADDR_VAR 0 9
43759: PUSH
43760: LD_INT 80
43762: PUSH
43763: LD_INT 65
43765: PUSH
43766: LD_INT 100
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43774: LD_VAR 0 6
43778: PPUSH
43779: CALL_OW 263
43783: PUSH
43784: LD_INT 1
43786: EQUAL
43787: IFFALSE 43822
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43789: LD_ADDR_VAR 0 10
43793: PUSH
43794: LD_VAR 0 10
43798: PUSH
43799: LD_VAR 0 6
43803: PPUSH
43804: CALL_OW 311
43808: PPUSH
43809: LD_INT 3
43811: PPUSH
43812: CALL_OW 259
43816: PUSH
43817: LD_INT 4
43819: MUL
43820: MUL
43821: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43822: LD_VAR 0 6
43826: PPUSH
43827: CALL_OW 263
43831: PUSH
43832: LD_INT 2
43834: EQUAL
43835: IFFALSE 43886
// begin j := IsControledBy ( i ) ;
43837: LD_ADDR_VAR 0 7
43841: PUSH
43842: LD_VAR 0 6
43846: PPUSH
43847: CALL_OW 312
43851: ST_TO_ADDR
// if j then
43852: LD_VAR 0 7
43856: IFFALSE 43886
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43858: LD_ADDR_VAR 0 10
43862: PUSH
43863: LD_VAR 0 10
43867: PUSH
43868: LD_VAR 0 7
43872: PPUSH
43873: LD_INT 3
43875: PPUSH
43876: CALL_OW 259
43880: PUSH
43881: LD_INT 3
43883: MUL
43884: MUL
43885: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43886: LD_VAR 0 6
43890: PPUSH
43891: CALL_OW 264
43895: PUSH
43896: LD_INT 5
43898: PUSH
43899: LD_INT 6
43901: PUSH
43902: LD_INT 46
43904: PUSH
43905: LD_INT 44
43907: PUSH
43908: LD_INT 47
43910: PUSH
43911: LD_INT 45
43913: PUSH
43914: LD_INT 28
43916: PUSH
43917: LD_INT 7
43919: PUSH
43920: LD_INT 27
43922: PUSH
43923: LD_INT 29
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: IN
43938: PUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: LD_INT 52
43946: PPUSH
43947: CALL_OW 321
43951: PUSH
43952: LD_INT 2
43954: EQUAL
43955: AND
43956: IFFALSE 43973
// bpoints := bpoints * 1.2 ;
43958: LD_ADDR_VAR 0 10
43962: PUSH
43963: LD_VAR 0 10
43967: PUSH
43968: LD_REAL  1.20000000000000E+0000
43971: MUL
43972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43973: LD_VAR 0 6
43977: PPUSH
43978: CALL_OW 264
43982: PUSH
43983: LD_INT 6
43985: PUSH
43986: LD_INT 46
43988: PUSH
43989: LD_INT 47
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: IN
43997: IFFALSE 44014
// bpoints := bpoints * 1.2 ;
43999: LD_ADDR_VAR 0 10
44003: PUSH
44004: LD_VAR 0 10
44008: PUSH
44009: LD_REAL  1.20000000000000E+0000
44012: MUL
44013: ST_TO_ADDR
// end ; unit_building :
44014: GO 44028
44016: LD_INT 3
44018: DOUBLE
44019: EQUAL
44020: IFTRUE 44024
44022: GO 44027
44024: POP
// ; end ;
44025: GO 44028
44027: POP
// for j = 1 to 3 do
44028: LD_ADDR_VAR 0 7
44032: PUSH
44033: DOUBLE
44034: LD_INT 1
44036: DEC
44037: ST_TO_ADDR
44038: LD_INT 3
44040: PUSH
44041: FOR_TO
44042: IFFALSE 44095
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44044: LD_ADDR_VAR 0 5
44048: PUSH
44049: LD_VAR 0 5
44053: PPUSH
44054: LD_VAR 0 7
44058: PPUSH
44059: LD_VAR 0 5
44063: PUSH
44064: LD_VAR 0 7
44068: ARRAY
44069: PUSH
44070: LD_VAR 0 9
44074: PUSH
44075: LD_VAR 0 7
44079: ARRAY
44080: PUSH
44081: LD_VAR 0 10
44085: MUL
44086: PLUS
44087: PPUSH
44088: CALL_OW 1
44092: ST_TO_ADDR
44093: GO 44041
44095: POP
44096: POP
// end ;
44097: GO 42574
44099: POP
44100: POP
// result := Replace ( result , 4 , tmp ) ;
44101: LD_ADDR_VAR 0 5
44105: PUSH
44106: LD_VAR 0 5
44110: PPUSH
44111: LD_INT 4
44113: PPUSH
44114: LD_VAR 0 8
44118: PPUSH
44119: CALL_OW 1
44123: ST_TO_ADDR
// end ;
44124: LD_VAR 0 5
44128: RET
// export function DangerAtRange ( unit , range ) ; begin
44129: LD_INT 0
44131: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44132: LD_ADDR_VAR 0 3
44136: PUSH
44137: LD_VAR 0 1
44141: PPUSH
44142: CALL_OW 255
44146: PPUSH
44147: LD_VAR 0 1
44151: PPUSH
44152: CALL_OW 250
44156: PPUSH
44157: LD_VAR 0 1
44161: PPUSH
44162: CALL_OW 251
44166: PPUSH
44167: LD_VAR 0 2
44171: PPUSH
44172: CALL 42426 0 4
44176: ST_TO_ADDR
// end ;
44177: LD_VAR 0 3
44181: RET
// export function DangerInArea ( side , area ) ; begin
44182: LD_INT 0
44184: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44185: LD_ADDR_VAR 0 3
44189: PUSH
44190: LD_VAR 0 2
44194: PPUSH
44195: LD_INT 81
44197: PUSH
44198: LD_VAR 0 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PPUSH
44207: CALL_OW 70
44211: ST_TO_ADDR
// end ;
44212: LD_VAR 0 3
44216: RET
// export function IsExtension ( b ) ; begin
44217: LD_INT 0
44219: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44220: LD_ADDR_VAR 0 2
44224: PUSH
44225: LD_VAR 0 1
44229: PUSH
44230: LD_INT 23
44232: PUSH
44233: LD_INT 20
44235: PUSH
44236: LD_INT 22
44238: PUSH
44239: LD_INT 17
44241: PUSH
44242: LD_INT 24
44244: PUSH
44245: LD_INT 21
44247: PUSH
44248: LD_INT 19
44250: PUSH
44251: LD_INT 16
44253: PUSH
44254: LD_INT 25
44256: PUSH
44257: LD_INT 18
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: IN
44272: ST_TO_ADDR
// end ;
44273: LD_VAR 0 2
44277: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44278: LD_INT 0
44280: PPUSH
44281: PPUSH
44282: PPUSH
// result := [ ] ;
44283: LD_ADDR_VAR 0 4
44287: PUSH
44288: EMPTY
44289: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44290: LD_ADDR_VAR 0 5
44294: PUSH
44295: LD_VAR 0 2
44299: PPUSH
44300: LD_INT 21
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PPUSH
44310: CALL_OW 70
44314: ST_TO_ADDR
// if not tmp then
44315: LD_VAR 0 5
44319: NOT
44320: IFFALSE 44324
// exit ;
44322: GO 44388
// if checkLink then
44324: LD_VAR 0 3
44328: IFFALSE 44378
// begin for i in tmp do
44330: LD_ADDR_VAR 0 6
44334: PUSH
44335: LD_VAR 0 5
44339: PUSH
44340: FOR_IN
44341: IFFALSE 44376
// if GetBase ( i ) <> base then
44343: LD_VAR 0 6
44347: PPUSH
44348: CALL_OW 274
44352: PUSH
44353: LD_VAR 0 1
44357: NONEQUAL
44358: IFFALSE 44374
// ComLinkToBase ( base , i ) ;
44360: LD_VAR 0 1
44364: PPUSH
44365: LD_VAR 0 6
44369: PPUSH
44370: CALL_OW 169
44374: GO 44340
44376: POP
44377: POP
// end ; result := tmp ;
44378: LD_ADDR_VAR 0 4
44382: PUSH
44383: LD_VAR 0 5
44387: ST_TO_ADDR
// end ;
44388: LD_VAR 0 4
44392: RET
// export function ComComplete ( units , b ) ; var i ; begin
44393: LD_INT 0
44395: PPUSH
44396: PPUSH
// if not units then
44397: LD_VAR 0 1
44401: NOT
44402: IFFALSE 44406
// exit ;
44404: GO 44496
// for i in units do
44406: LD_ADDR_VAR 0 4
44410: PUSH
44411: LD_VAR 0 1
44415: PUSH
44416: FOR_IN
44417: IFFALSE 44494
// if BuildingStatus ( b ) = bs_build then
44419: LD_VAR 0 2
44423: PPUSH
44424: CALL_OW 461
44428: PUSH
44429: LD_INT 1
44431: EQUAL
44432: IFFALSE 44492
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44434: LD_VAR 0 4
44438: PPUSH
44439: LD_STRING h
44441: PUSH
44442: LD_VAR 0 2
44446: PPUSH
44447: CALL_OW 250
44451: PUSH
44452: LD_VAR 0 2
44456: PPUSH
44457: CALL_OW 251
44461: PUSH
44462: LD_VAR 0 2
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: PUSH
44485: EMPTY
44486: LIST
44487: PPUSH
44488: CALL_OW 446
44492: GO 44416
44494: POP
44495: POP
// end ;
44496: LD_VAR 0 3
44500: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44501: LD_INT 0
44503: PPUSH
44504: PPUSH
44505: PPUSH
44506: PPUSH
44507: PPUSH
44508: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44509: LD_VAR 0 1
44513: NOT
44514: PUSH
44515: LD_VAR 0 1
44519: PPUSH
44520: CALL_OW 263
44524: PUSH
44525: LD_INT 2
44527: NONEQUAL
44528: OR
44529: IFFALSE 44533
// exit ;
44531: GO 44849
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44533: LD_ADDR_VAR 0 6
44537: PUSH
44538: LD_INT 22
44540: PUSH
44541: LD_VAR 0 1
44545: PPUSH
44546: CALL_OW 255
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: LD_INT 30
44560: PUSH
44561: LD_INT 36
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 34
44570: PUSH
44571: LD_INT 31
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PPUSH
44587: CALL_OW 69
44591: ST_TO_ADDR
// if not tmp then
44592: LD_VAR 0 6
44596: NOT
44597: IFFALSE 44601
// exit ;
44599: GO 44849
// result := [ ] ;
44601: LD_ADDR_VAR 0 2
44605: PUSH
44606: EMPTY
44607: ST_TO_ADDR
// for i in tmp do
44608: LD_ADDR_VAR 0 3
44612: PUSH
44613: LD_VAR 0 6
44617: PUSH
44618: FOR_IN
44619: IFFALSE 44690
// begin t := UnitsInside ( i ) ;
44621: LD_ADDR_VAR 0 4
44625: PUSH
44626: LD_VAR 0 3
44630: PPUSH
44631: CALL_OW 313
44635: ST_TO_ADDR
// if t then
44636: LD_VAR 0 4
44640: IFFALSE 44688
// for j in t do
44642: LD_ADDR_VAR 0 7
44646: PUSH
44647: LD_VAR 0 4
44651: PUSH
44652: FOR_IN
44653: IFFALSE 44686
// result := Replace ( result , result + 1 , j ) ;
44655: LD_ADDR_VAR 0 2
44659: PUSH
44660: LD_VAR 0 2
44664: PPUSH
44665: LD_VAR 0 2
44669: PUSH
44670: LD_INT 1
44672: PLUS
44673: PPUSH
44674: LD_VAR 0 7
44678: PPUSH
44679: CALL_OW 1
44683: ST_TO_ADDR
44684: GO 44652
44686: POP
44687: POP
// end ;
44688: GO 44618
44690: POP
44691: POP
// if not result then
44692: LD_VAR 0 2
44696: NOT
44697: IFFALSE 44701
// exit ;
44699: GO 44849
// mech := result [ 1 ] ;
44701: LD_ADDR_VAR 0 5
44705: PUSH
44706: LD_VAR 0 2
44710: PUSH
44711: LD_INT 1
44713: ARRAY
44714: ST_TO_ADDR
// if result > 1 then
44715: LD_VAR 0 2
44719: PUSH
44720: LD_INT 1
44722: GREATER
44723: IFFALSE 44835
// begin for i = 2 to result do
44725: LD_ADDR_VAR 0 3
44729: PUSH
44730: DOUBLE
44731: LD_INT 2
44733: DEC
44734: ST_TO_ADDR
44735: LD_VAR 0 2
44739: PUSH
44740: FOR_TO
44741: IFFALSE 44833
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44743: LD_ADDR_VAR 0 4
44747: PUSH
44748: LD_VAR 0 2
44752: PUSH
44753: LD_VAR 0 3
44757: ARRAY
44758: PPUSH
44759: LD_INT 3
44761: PPUSH
44762: CALL_OW 259
44766: PUSH
44767: LD_VAR 0 2
44771: PUSH
44772: LD_VAR 0 3
44776: ARRAY
44777: PPUSH
44778: CALL_OW 432
44782: MINUS
44783: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44784: LD_VAR 0 4
44788: PUSH
44789: LD_VAR 0 5
44793: PPUSH
44794: LD_INT 3
44796: PPUSH
44797: CALL_OW 259
44801: PUSH
44802: LD_VAR 0 5
44806: PPUSH
44807: CALL_OW 432
44811: MINUS
44812: GREATEREQUAL
44813: IFFALSE 44831
// mech := result [ i ] ;
44815: LD_ADDR_VAR 0 5
44819: PUSH
44820: LD_VAR 0 2
44824: PUSH
44825: LD_VAR 0 3
44829: ARRAY
44830: ST_TO_ADDR
// end ;
44831: GO 44740
44833: POP
44834: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44835: LD_VAR 0 1
44839: PPUSH
44840: LD_VAR 0 5
44844: PPUSH
44845: CALL_OW 135
// end ;
44849: LD_VAR 0 2
44853: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44854: LD_INT 0
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
44860: PPUSH
44861: PPUSH
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
// result := [ ] ;
44869: LD_ADDR_VAR 0 7
44873: PUSH
44874: EMPTY
44875: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44876: LD_VAR 0 1
44880: PPUSH
44881: CALL_OW 266
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: IN
44896: NOT
44897: IFFALSE 44901
// exit ;
44899: GO 46535
// if name then
44901: LD_VAR 0 3
44905: IFFALSE 44921
// SetBName ( base_dep , name ) ;
44907: LD_VAR 0 1
44911: PPUSH
44912: LD_VAR 0 3
44916: PPUSH
44917: CALL_OW 500
// base := GetBase ( base_dep ) ;
44921: LD_ADDR_VAR 0 15
44925: PUSH
44926: LD_VAR 0 1
44930: PPUSH
44931: CALL_OW 274
44935: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44936: LD_ADDR_VAR 0 16
44940: PUSH
44941: LD_VAR 0 1
44945: PPUSH
44946: CALL_OW 255
44950: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44951: LD_ADDR_VAR 0 17
44955: PUSH
44956: LD_VAR 0 1
44960: PPUSH
44961: CALL_OW 248
44965: ST_TO_ADDR
// if sources then
44966: LD_VAR 0 5
44970: IFFALSE 45017
// for i = 1 to 3 do
44972: LD_ADDR_VAR 0 8
44976: PUSH
44977: DOUBLE
44978: LD_INT 1
44980: DEC
44981: ST_TO_ADDR
44982: LD_INT 3
44984: PUSH
44985: FOR_TO
44986: IFFALSE 45015
// AddResourceType ( base , i , sources [ i ] ) ;
44988: LD_VAR 0 15
44992: PPUSH
44993: LD_VAR 0 8
44997: PPUSH
44998: LD_VAR 0 5
45002: PUSH
45003: LD_VAR 0 8
45007: ARRAY
45008: PPUSH
45009: CALL_OW 276
45013: GO 44985
45015: POP
45016: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45017: LD_ADDR_VAR 0 18
45021: PUSH
45022: LD_VAR 0 15
45026: PPUSH
45027: LD_VAR 0 2
45031: PPUSH
45032: LD_INT 1
45034: PPUSH
45035: CALL 44278 0 3
45039: ST_TO_ADDR
// InitHc ;
45040: CALL_OW 19
// InitUc ;
45044: CALL_OW 18
// uc_side := side ;
45048: LD_ADDR_OWVAR 20
45052: PUSH
45053: LD_VAR 0 16
45057: ST_TO_ADDR
// uc_nation := nation ;
45058: LD_ADDR_OWVAR 21
45062: PUSH
45063: LD_VAR 0 17
45067: ST_TO_ADDR
// if buildings then
45068: LD_VAR 0 18
45072: IFFALSE 46394
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45074: LD_ADDR_VAR 0 19
45078: PUSH
45079: LD_VAR 0 18
45083: PPUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 30
45089: PUSH
45090: LD_INT 29
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 30
45099: PUSH
45100: LD_INT 30
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: PPUSH
45112: CALL_OW 72
45116: ST_TO_ADDR
// if tmp then
45117: LD_VAR 0 19
45121: IFFALSE 45169
// for i in tmp do
45123: LD_ADDR_VAR 0 8
45127: PUSH
45128: LD_VAR 0 19
45132: PUSH
45133: FOR_IN
45134: IFFALSE 45167
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45136: LD_VAR 0 8
45140: PPUSH
45141: CALL_OW 250
45145: PPUSH
45146: LD_VAR 0 8
45150: PPUSH
45151: CALL_OW 251
45155: PPUSH
45156: LD_VAR 0 16
45160: PPUSH
45161: CALL_OW 441
45165: GO 45133
45167: POP
45168: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45169: LD_VAR 0 18
45173: PPUSH
45174: LD_INT 2
45176: PUSH
45177: LD_INT 30
45179: PUSH
45180: LD_INT 32
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 30
45189: PUSH
45190: LD_INT 33
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: PPUSH
45202: CALL_OW 72
45206: IFFALSE 45294
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45208: LD_ADDR_VAR 0 8
45212: PUSH
45213: LD_VAR 0 18
45217: PPUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 30
45223: PUSH
45224: LD_INT 32
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 30
45233: PUSH
45234: LD_INT 33
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: PPUSH
45246: CALL_OW 72
45250: PUSH
45251: FOR_IN
45252: IFFALSE 45292
// begin if not GetBWeapon ( i ) then
45254: LD_VAR 0 8
45258: PPUSH
45259: CALL_OW 269
45263: NOT
45264: IFFALSE 45290
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45266: LD_VAR 0 8
45270: PPUSH
45271: LD_VAR 0 8
45275: PPUSH
45276: LD_VAR 0 2
45280: PPUSH
45281: CALL 46540 0 2
45285: PPUSH
45286: CALL_OW 431
// end ;
45290: GO 45251
45292: POP
45293: POP
// end ; for i = 1 to personel do
45294: LD_ADDR_VAR 0 8
45298: PUSH
45299: DOUBLE
45300: LD_INT 1
45302: DEC
45303: ST_TO_ADDR
45304: LD_VAR 0 6
45308: PUSH
45309: FOR_TO
45310: IFFALSE 46374
// begin if i > 4 then
45312: LD_VAR 0 8
45316: PUSH
45317: LD_INT 4
45319: GREATER
45320: IFFALSE 45324
// break ;
45322: GO 46374
// case i of 1 :
45324: LD_VAR 0 8
45328: PUSH
45329: LD_INT 1
45331: DOUBLE
45332: EQUAL
45333: IFTRUE 45337
45335: GO 45417
45337: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45338: LD_ADDR_VAR 0 12
45342: PUSH
45343: LD_VAR 0 18
45347: PPUSH
45348: LD_INT 22
45350: PUSH
45351: LD_VAR 0 16
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 58
45362: PUSH
45363: EMPTY
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 30
45371: PUSH
45372: LD_INT 32
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 30
45381: PUSH
45382: LD_INT 4
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 30
45391: PUSH
45392: LD_INT 5
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: PPUSH
45410: CALL_OW 72
45414: ST_TO_ADDR
45415: GO 45639
45417: LD_INT 2
45419: DOUBLE
45420: EQUAL
45421: IFTRUE 45425
45423: GO 45487
45425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45426: LD_ADDR_VAR 0 12
45430: PUSH
45431: LD_VAR 0 18
45435: PPUSH
45436: LD_INT 22
45438: PUSH
45439: LD_VAR 0 16
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 30
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 30
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PPUSH
45480: CALL_OW 72
45484: ST_TO_ADDR
45485: GO 45639
45487: LD_INT 3
45489: DOUBLE
45490: EQUAL
45491: IFTRUE 45495
45493: GO 45557
45495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45496: LD_ADDR_VAR 0 12
45500: PUSH
45501: LD_VAR 0 18
45505: PPUSH
45506: LD_INT 22
45508: PUSH
45509: LD_VAR 0 16
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: LD_INT 30
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 30
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PPUSH
45550: CALL_OW 72
45554: ST_TO_ADDR
45555: GO 45639
45557: LD_INT 4
45559: DOUBLE
45560: EQUAL
45561: IFTRUE 45565
45563: GO 45638
45565: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45566: LD_ADDR_VAR 0 12
45570: PUSH
45571: LD_VAR 0 18
45575: PPUSH
45576: LD_INT 22
45578: PUSH
45579: LD_VAR 0 16
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: LD_INT 30
45593: PUSH
45594: LD_INT 6
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 30
45603: PUSH
45604: LD_INT 7
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 30
45613: PUSH
45614: LD_INT 8
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PPUSH
45631: CALL_OW 72
45635: ST_TO_ADDR
45636: GO 45639
45638: POP
// if i = 1 then
45639: LD_VAR 0 8
45643: PUSH
45644: LD_INT 1
45646: EQUAL
45647: IFFALSE 45758
// begin tmp := [ ] ;
45649: LD_ADDR_VAR 0 19
45653: PUSH
45654: EMPTY
45655: ST_TO_ADDR
// for j in f do
45656: LD_ADDR_VAR 0 9
45660: PUSH
45661: LD_VAR 0 12
45665: PUSH
45666: FOR_IN
45667: IFFALSE 45740
// if GetBType ( j ) = b_bunker then
45669: LD_VAR 0 9
45673: PPUSH
45674: CALL_OW 266
45678: PUSH
45679: LD_INT 32
45681: EQUAL
45682: IFFALSE 45709
// tmp := Insert ( tmp , 1 , j ) else
45684: LD_ADDR_VAR 0 19
45688: PUSH
45689: LD_VAR 0 19
45693: PPUSH
45694: LD_INT 1
45696: PPUSH
45697: LD_VAR 0 9
45701: PPUSH
45702: CALL_OW 2
45706: ST_TO_ADDR
45707: GO 45738
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45709: LD_ADDR_VAR 0 19
45713: PUSH
45714: LD_VAR 0 19
45718: PPUSH
45719: LD_VAR 0 19
45723: PUSH
45724: LD_INT 1
45726: PLUS
45727: PPUSH
45728: LD_VAR 0 9
45732: PPUSH
45733: CALL_OW 2
45737: ST_TO_ADDR
45738: GO 45666
45740: POP
45741: POP
// if tmp then
45742: LD_VAR 0 19
45746: IFFALSE 45758
// f := tmp ;
45748: LD_ADDR_VAR 0 12
45752: PUSH
45753: LD_VAR 0 19
45757: ST_TO_ADDR
// end ; x := personel [ i ] ;
45758: LD_ADDR_VAR 0 13
45762: PUSH
45763: LD_VAR 0 6
45767: PUSH
45768: LD_VAR 0 8
45772: ARRAY
45773: ST_TO_ADDR
// if x = - 1 then
45774: LD_VAR 0 13
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: EQUAL
45783: IFFALSE 45992
// begin for j in f do
45785: LD_ADDR_VAR 0 9
45789: PUSH
45790: LD_VAR 0 12
45794: PUSH
45795: FOR_IN
45796: IFFALSE 45988
// repeat InitHc ;
45798: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45802: LD_VAR 0 9
45806: PPUSH
45807: CALL_OW 266
45811: PUSH
45812: LD_INT 5
45814: EQUAL
45815: IFFALSE 45885
// begin if UnitsInside ( j ) < 3 then
45817: LD_VAR 0 9
45821: PPUSH
45822: CALL_OW 313
45826: PUSH
45827: LD_INT 3
45829: LESS
45830: IFFALSE 45866
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45832: LD_INT 0
45834: PPUSH
45835: LD_INT 5
45837: PUSH
45838: LD_INT 8
45840: PUSH
45841: LD_INT 9
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: PUSH
45849: LD_VAR 0 17
45853: ARRAY
45854: PPUSH
45855: LD_VAR 0 4
45859: PPUSH
45860: CALL_OW 380
45864: GO 45883
// PrepareHuman ( false , i , skill ) ;
45866: LD_INT 0
45868: PPUSH
45869: LD_VAR 0 8
45873: PPUSH
45874: LD_VAR 0 4
45878: PPUSH
45879: CALL_OW 380
// end else
45883: GO 45902
// PrepareHuman ( false , i , skill ) ;
45885: LD_INT 0
45887: PPUSH
45888: LD_VAR 0 8
45892: PPUSH
45893: LD_VAR 0 4
45897: PPUSH
45898: CALL_OW 380
// un := CreateHuman ;
45902: LD_ADDR_VAR 0 14
45906: PUSH
45907: CALL_OW 44
45911: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45912: LD_ADDR_VAR 0 7
45916: PUSH
45917: LD_VAR 0 7
45921: PPUSH
45922: LD_INT 1
45924: PPUSH
45925: LD_VAR 0 14
45929: PPUSH
45930: CALL_OW 2
45934: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45935: LD_VAR 0 14
45939: PPUSH
45940: LD_VAR 0 9
45944: PPUSH
45945: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45949: LD_VAR 0 9
45953: PPUSH
45954: CALL_OW 313
45958: PUSH
45959: LD_INT 6
45961: EQUAL
45962: PUSH
45963: LD_VAR 0 9
45967: PPUSH
45968: CALL_OW 266
45972: PUSH
45973: LD_INT 32
45975: PUSH
45976: LD_INT 31
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: IN
45983: OR
45984: IFFALSE 45798
45986: GO 45795
45988: POP
45989: POP
// end else
45990: GO 46372
// for j = 1 to x do
45992: LD_ADDR_VAR 0 9
45996: PUSH
45997: DOUBLE
45998: LD_INT 1
46000: DEC
46001: ST_TO_ADDR
46002: LD_VAR 0 13
46006: PUSH
46007: FOR_TO
46008: IFFALSE 46370
// begin InitHc ;
46010: CALL_OW 19
// if not f then
46014: LD_VAR 0 12
46018: NOT
46019: IFFALSE 46108
// begin PrepareHuman ( false , i , skill ) ;
46021: LD_INT 0
46023: PPUSH
46024: LD_VAR 0 8
46028: PPUSH
46029: LD_VAR 0 4
46033: PPUSH
46034: CALL_OW 380
// un := CreateHuman ;
46038: LD_ADDR_VAR 0 14
46042: PUSH
46043: CALL_OW 44
46047: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46048: LD_ADDR_VAR 0 7
46052: PUSH
46053: LD_VAR 0 7
46057: PPUSH
46058: LD_INT 1
46060: PPUSH
46061: LD_VAR 0 14
46065: PPUSH
46066: CALL_OW 2
46070: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46071: LD_VAR 0 14
46075: PPUSH
46076: LD_VAR 0 1
46080: PPUSH
46081: CALL_OW 250
46085: PPUSH
46086: LD_VAR 0 1
46090: PPUSH
46091: CALL_OW 251
46095: PPUSH
46096: LD_INT 10
46098: PPUSH
46099: LD_INT 0
46101: PPUSH
46102: CALL_OW 50
// continue ;
46106: GO 46007
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46108: LD_VAR 0 12
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PPUSH
46117: CALL_OW 313
46121: PUSH
46122: LD_VAR 0 12
46126: PUSH
46127: LD_INT 1
46129: ARRAY
46130: PPUSH
46131: CALL_OW 266
46135: PUSH
46136: LD_INT 32
46138: PUSH
46139: LD_INT 31
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: IN
46146: AND
46147: PUSH
46148: LD_VAR 0 12
46152: PUSH
46153: LD_INT 1
46155: ARRAY
46156: PPUSH
46157: CALL_OW 313
46161: PUSH
46162: LD_INT 6
46164: EQUAL
46165: OR
46166: IFFALSE 46186
// f := Delete ( f , 1 ) ;
46168: LD_ADDR_VAR 0 12
46172: PUSH
46173: LD_VAR 0 12
46177: PPUSH
46178: LD_INT 1
46180: PPUSH
46181: CALL_OW 3
46185: ST_TO_ADDR
// if not f then
46186: LD_VAR 0 12
46190: NOT
46191: IFFALSE 46209
// begin x := x + 2 ;
46193: LD_ADDR_VAR 0 13
46197: PUSH
46198: LD_VAR 0 13
46202: PUSH
46203: LD_INT 2
46205: PLUS
46206: ST_TO_ADDR
// continue ;
46207: GO 46007
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46209: LD_VAR 0 12
46213: PUSH
46214: LD_INT 1
46216: ARRAY
46217: PPUSH
46218: CALL_OW 266
46222: PUSH
46223: LD_INT 5
46225: EQUAL
46226: IFFALSE 46300
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46228: LD_VAR 0 12
46232: PUSH
46233: LD_INT 1
46235: ARRAY
46236: PPUSH
46237: CALL_OW 313
46241: PUSH
46242: LD_INT 3
46244: LESS
46245: IFFALSE 46281
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46247: LD_INT 0
46249: PPUSH
46250: LD_INT 5
46252: PUSH
46253: LD_INT 8
46255: PUSH
46256: LD_INT 9
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: LIST
46263: PUSH
46264: LD_VAR 0 17
46268: ARRAY
46269: PPUSH
46270: LD_VAR 0 4
46274: PPUSH
46275: CALL_OW 380
46279: GO 46298
// PrepareHuman ( false , i , skill ) ;
46281: LD_INT 0
46283: PPUSH
46284: LD_VAR 0 8
46288: PPUSH
46289: LD_VAR 0 4
46293: PPUSH
46294: CALL_OW 380
// end else
46298: GO 46317
// PrepareHuman ( false , i , skill ) ;
46300: LD_INT 0
46302: PPUSH
46303: LD_VAR 0 8
46307: PPUSH
46308: LD_VAR 0 4
46312: PPUSH
46313: CALL_OW 380
// un := CreateHuman ;
46317: LD_ADDR_VAR 0 14
46321: PUSH
46322: CALL_OW 44
46326: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46327: LD_ADDR_VAR 0 7
46331: PUSH
46332: LD_VAR 0 7
46336: PPUSH
46337: LD_INT 1
46339: PPUSH
46340: LD_VAR 0 14
46344: PPUSH
46345: CALL_OW 2
46349: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46350: LD_VAR 0 14
46354: PPUSH
46355: LD_VAR 0 12
46359: PUSH
46360: LD_INT 1
46362: ARRAY
46363: PPUSH
46364: CALL_OW 52
// end ;
46368: GO 46007
46370: POP
46371: POP
// end ;
46372: GO 45309
46374: POP
46375: POP
// result := result ^ buildings ;
46376: LD_ADDR_VAR 0 7
46380: PUSH
46381: LD_VAR 0 7
46385: PUSH
46386: LD_VAR 0 18
46390: ADD
46391: ST_TO_ADDR
// end else
46392: GO 46535
// begin for i = 1 to personel do
46394: LD_ADDR_VAR 0 8
46398: PUSH
46399: DOUBLE
46400: LD_INT 1
46402: DEC
46403: ST_TO_ADDR
46404: LD_VAR 0 6
46408: PUSH
46409: FOR_TO
46410: IFFALSE 46533
// begin if i > 4 then
46412: LD_VAR 0 8
46416: PUSH
46417: LD_INT 4
46419: GREATER
46420: IFFALSE 46424
// break ;
46422: GO 46533
// x := personel [ i ] ;
46424: LD_ADDR_VAR 0 13
46428: PUSH
46429: LD_VAR 0 6
46433: PUSH
46434: LD_VAR 0 8
46438: ARRAY
46439: ST_TO_ADDR
// if x = - 1 then
46440: LD_VAR 0 13
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: EQUAL
46449: IFFALSE 46453
// continue ;
46451: GO 46409
// PrepareHuman ( false , i , skill ) ;
46453: LD_INT 0
46455: PPUSH
46456: LD_VAR 0 8
46460: PPUSH
46461: LD_VAR 0 4
46465: PPUSH
46466: CALL_OW 380
// un := CreateHuman ;
46470: LD_ADDR_VAR 0 14
46474: PUSH
46475: CALL_OW 44
46479: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46480: LD_VAR 0 14
46484: PPUSH
46485: LD_VAR 0 1
46489: PPUSH
46490: CALL_OW 250
46494: PPUSH
46495: LD_VAR 0 1
46499: PPUSH
46500: CALL_OW 251
46504: PPUSH
46505: LD_INT 10
46507: PPUSH
46508: LD_INT 0
46510: PPUSH
46511: CALL_OW 50
// result := result ^ un ;
46515: LD_ADDR_VAR 0 7
46519: PUSH
46520: LD_VAR 0 7
46524: PUSH
46525: LD_VAR 0 14
46529: ADD
46530: ST_TO_ADDR
// end ;
46531: GO 46409
46533: POP
46534: POP
// end ; end ;
46535: LD_VAR 0 7
46539: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46540: LD_INT 0
46542: PPUSH
46543: PPUSH
46544: PPUSH
46545: PPUSH
46546: PPUSH
46547: PPUSH
46548: PPUSH
46549: PPUSH
46550: PPUSH
46551: PPUSH
46552: PPUSH
46553: PPUSH
46554: PPUSH
46555: PPUSH
46556: PPUSH
46557: PPUSH
// result := false ;
46558: LD_ADDR_VAR 0 3
46562: PUSH
46563: LD_INT 0
46565: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46566: LD_VAR 0 1
46570: NOT
46571: PUSH
46572: LD_VAR 0 1
46576: PPUSH
46577: CALL_OW 266
46581: PUSH
46582: LD_INT 32
46584: PUSH
46585: LD_INT 33
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: IN
46592: NOT
46593: OR
46594: IFFALSE 46598
// exit ;
46596: GO 47707
// nat := GetNation ( tower ) ;
46598: LD_ADDR_VAR 0 12
46602: PUSH
46603: LD_VAR 0 1
46607: PPUSH
46608: CALL_OW 248
46612: ST_TO_ADDR
// side := GetSide ( tower ) ;
46613: LD_ADDR_VAR 0 16
46617: PUSH
46618: LD_VAR 0 1
46622: PPUSH
46623: CALL_OW 255
46627: ST_TO_ADDR
// x := GetX ( tower ) ;
46628: LD_ADDR_VAR 0 10
46632: PUSH
46633: LD_VAR 0 1
46637: PPUSH
46638: CALL_OW 250
46642: ST_TO_ADDR
// y := GetY ( tower ) ;
46643: LD_ADDR_VAR 0 11
46647: PUSH
46648: LD_VAR 0 1
46652: PPUSH
46653: CALL_OW 251
46657: ST_TO_ADDR
// if not x or not y then
46658: LD_VAR 0 10
46662: NOT
46663: PUSH
46664: LD_VAR 0 11
46668: NOT
46669: OR
46670: IFFALSE 46674
// exit ;
46672: GO 47707
// weapon := 0 ;
46674: LD_ADDR_VAR 0 18
46678: PUSH
46679: LD_INT 0
46681: ST_TO_ADDR
// fac_list := [ ] ;
46682: LD_ADDR_VAR 0 17
46686: PUSH
46687: EMPTY
46688: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46689: LD_ADDR_VAR 0 6
46693: PUSH
46694: LD_VAR 0 1
46698: PPUSH
46699: CALL_OW 274
46703: PPUSH
46704: LD_VAR 0 2
46708: PPUSH
46709: LD_INT 0
46711: PPUSH
46712: CALL 44278 0 3
46716: PPUSH
46717: LD_INT 30
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PPUSH
46727: CALL_OW 72
46731: ST_TO_ADDR
// if not factories then
46732: LD_VAR 0 6
46736: NOT
46737: IFFALSE 46741
// exit ;
46739: GO 47707
// for i in factories do
46741: LD_ADDR_VAR 0 8
46745: PUSH
46746: LD_VAR 0 6
46750: PUSH
46751: FOR_IN
46752: IFFALSE 46777
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46754: LD_ADDR_VAR 0 17
46758: PUSH
46759: LD_VAR 0 17
46763: PUSH
46764: LD_VAR 0 8
46768: PPUSH
46769: CALL_OW 478
46773: UNION
46774: ST_TO_ADDR
46775: GO 46751
46777: POP
46778: POP
// if not fac_list then
46779: LD_VAR 0 17
46783: NOT
46784: IFFALSE 46788
// exit ;
46786: GO 47707
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46788: LD_ADDR_VAR 0 5
46792: PUSH
46793: LD_INT 4
46795: PUSH
46796: LD_INT 5
46798: PUSH
46799: LD_INT 9
46801: PUSH
46802: LD_INT 10
46804: PUSH
46805: LD_INT 6
46807: PUSH
46808: LD_INT 7
46810: PUSH
46811: LD_INT 11
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 27
46825: PUSH
46826: LD_INT 28
46828: PUSH
46829: LD_INT 26
46831: PUSH
46832: LD_INT 30
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 43
46843: PUSH
46844: LD_INT 44
46846: PUSH
46847: LD_INT 46
46849: PUSH
46850: LD_INT 45
46852: PUSH
46853: LD_INT 47
46855: PUSH
46856: LD_INT 49
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: PUSH
46872: LD_VAR 0 12
46876: ARRAY
46877: ST_TO_ADDR
// list := list isect fac_list ;
46878: LD_ADDR_VAR 0 5
46882: PUSH
46883: LD_VAR 0 5
46887: PUSH
46888: LD_VAR 0 17
46892: ISECT
46893: ST_TO_ADDR
// if not list then
46894: LD_VAR 0 5
46898: NOT
46899: IFFALSE 46903
// exit ;
46901: GO 47707
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46903: LD_VAR 0 12
46907: PUSH
46908: LD_INT 3
46910: EQUAL
46911: PUSH
46912: LD_INT 49
46914: PUSH
46915: LD_VAR 0 5
46919: IN
46920: AND
46921: PUSH
46922: LD_INT 31
46924: PPUSH
46925: LD_VAR 0 16
46929: PPUSH
46930: CALL_OW 321
46934: PUSH
46935: LD_INT 2
46937: EQUAL
46938: AND
46939: IFFALSE 46999
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46941: LD_INT 22
46943: PUSH
46944: LD_VAR 0 16
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 35
46955: PUSH
46956: LD_INT 49
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 91
46965: PUSH
46966: LD_VAR 0 1
46970: PUSH
46971: LD_INT 10
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: PPUSH
46984: CALL_OW 69
46988: NOT
46989: IFFALSE 46999
// weapon := ru_time_lapser ;
46991: LD_ADDR_VAR 0 18
46995: PUSH
46996: LD_INT 49
46998: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46999: LD_VAR 0 12
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: IN
47014: PUSH
47015: LD_INT 11
47017: PUSH
47018: LD_VAR 0 5
47022: IN
47023: PUSH
47024: LD_INT 30
47026: PUSH
47027: LD_VAR 0 5
47031: IN
47032: OR
47033: AND
47034: PUSH
47035: LD_INT 6
47037: PPUSH
47038: LD_VAR 0 16
47042: PPUSH
47043: CALL_OW 321
47047: PUSH
47048: LD_INT 2
47050: EQUAL
47051: AND
47052: IFFALSE 47217
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47054: LD_INT 22
47056: PUSH
47057: LD_VAR 0 16
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 35
47071: PUSH
47072: LD_INT 11
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 35
47081: PUSH
47082: LD_INT 30
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 91
47096: PUSH
47097: LD_VAR 0 1
47101: PUSH
47102: LD_INT 18
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: PPUSH
47115: CALL_OW 69
47119: NOT
47120: PUSH
47121: LD_INT 22
47123: PUSH
47124: LD_VAR 0 16
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 30
47138: PUSH
47139: LD_INT 32
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 30
47148: PUSH
47149: LD_INT 33
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 91
47163: PUSH
47164: LD_VAR 0 1
47168: PUSH
47169: LD_INT 12
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: PUSH
47182: EMPTY
47183: LIST
47184: PPUSH
47185: CALL_OW 69
47189: PUSH
47190: LD_INT 2
47192: GREATER
47193: AND
47194: IFFALSE 47217
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47196: LD_ADDR_VAR 0 18
47200: PUSH
47201: LD_INT 11
47203: PUSH
47204: LD_INT 30
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_VAR 0 12
47215: ARRAY
47216: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47217: LD_VAR 0 18
47221: NOT
47222: PUSH
47223: LD_INT 40
47225: PPUSH
47226: LD_VAR 0 16
47230: PPUSH
47231: CALL_OW 321
47235: PUSH
47236: LD_INT 2
47238: EQUAL
47239: AND
47240: PUSH
47241: LD_INT 7
47243: PUSH
47244: LD_VAR 0 5
47248: IN
47249: PUSH
47250: LD_INT 28
47252: PUSH
47253: LD_VAR 0 5
47257: IN
47258: OR
47259: PUSH
47260: LD_INT 45
47262: PUSH
47263: LD_VAR 0 5
47267: IN
47268: OR
47269: AND
47270: IFFALSE 47524
// begin hex := GetHexInfo ( x , y ) ;
47272: LD_ADDR_VAR 0 4
47276: PUSH
47277: LD_VAR 0 10
47281: PPUSH
47282: LD_VAR 0 11
47286: PPUSH
47287: CALL_OW 546
47291: ST_TO_ADDR
// if hex [ 1 ] then
47292: LD_VAR 0 4
47296: PUSH
47297: LD_INT 1
47299: ARRAY
47300: IFFALSE 47304
// exit ;
47302: GO 47707
// height := hex [ 2 ] ;
47304: LD_ADDR_VAR 0 15
47308: PUSH
47309: LD_VAR 0 4
47313: PUSH
47314: LD_INT 2
47316: ARRAY
47317: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47318: LD_ADDR_VAR 0 14
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: LD_INT 5
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: ST_TO_ADDR
// for i in tmp do
47341: LD_ADDR_VAR 0 8
47345: PUSH
47346: LD_VAR 0 14
47350: PUSH
47351: FOR_IN
47352: IFFALSE 47522
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47354: LD_ADDR_VAR 0 9
47358: PUSH
47359: LD_VAR 0 10
47363: PPUSH
47364: LD_VAR 0 8
47368: PPUSH
47369: LD_INT 5
47371: PPUSH
47372: CALL_OW 272
47376: PUSH
47377: LD_VAR 0 11
47381: PPUSH
47382: LD_VAR 0 8
47386: PPUSH
47387: LD_INT 5
47389: PPUSH
47390: CALL_OW 273
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47399: LD_VAR 0 9
47403: PUSH
47404: LD_INT 1
47406: ARRAY
47407: PPUSH
47408: LD_VAR 0 9
47412: PUSH
47413: LD_INT 2
47415: ARRAY
47416: PPUSH
47417: CALL_OW 488
47421: IFFALSE 47520
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47423: LD_ADDR_VAR 0 4
47427: PUSH
47428: LD_VAR 0 9
47432: PUSH
47433: LD_INT 1
47435: ARRAY
47436: PPUSH
47437: LD_VAR 0 9
47441: PUSH
47442: LD_INT 2
47444: ARRAY
47445: PPUSH
47446: CALL_OW 546
47450: ST_TO_ADDR
// if hex [ 1 ] then
47451: LD_VAR 0 4
47455: PUSH
47456: LD_INT 1
47458: ARRAY
47459: IFFALSE 47463
// continue ;
47461: GO 47351
// h := hex [ 2 ] ;
47463: LD_ADDR_VAR 0 13
47467: PUSH
47468: LD_VAR 0 4
47472: PUSH
47473: LD_INT 2
47475: ARRAY
47476: ST_TO_ADDR
// if h + 7 < height then
47477: LD_VAR 0 13
47481: PUSH
47482: LD_INT 7
47484: PLUS
47485: PUSH
47486: LD_VAR 0 15
47490: LESS
47491: IFFALSE 47520
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47493: LD_ADDR_VAR 0 18
47497: PUSH
47498: LD_INT 7
47500: PUSH
47501: LD_INT 28
47503: PUSH
47504: LD_INT 45
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: PUSH
47512: LD_VAR 0 12
47516: ARRAY
47517: ST_TO_ADDR
// break ;
47518: GO 47522
// end ; end ; end ;
47520: GO 47351
47522: POP
47523: POP
// end ; if not weapon then
47524: LD_VAR 0 18
47528: NOT
47529: IFFALSE 47589
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47531: LD_ADDR_VAR 0 5
47535: PUSH
47536: LD_VAR 0 5
47540: PUSH
47541: LD_INT 11
47543: PUSH
47544: LD_INT 30
47546: PUSH
47547: LD_INT 49
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: DIFF
47555: ST_TO_ADDR
// if not list then
47556: LD_VAR 0 5
47560: NOT
47561: IFFALSE 47565
// exit ;
47563: GO 47707
// weapon := list [ rand ( 1 , list ) ] ;
47565: LD_ADDR_VAR 0 18
47569: PUSH
47570: LD_VAR 0 5
47574: PUSH
47575: LD_INT 1
47577: PPUSH
47578: LD_VAR 0 5
47582: PPUSH
47583: CALL_OW 12
47587: ARRAY
47588: ST_TO_ADDR
// end ; if weapon then
47589: LD_VAR 0 18
47593: IFFALSE 47707
// begin tmp := CostOfWeapon ( weapon ) ;
47595: LD_ADDR_VAR 0 14
47599: PUSH
47600: LD_VAR 0 18
47604: PPUSH
47605: CALL_OW 451
47609: ST_TO_ADDR
// j := GetBase ( tower ) ;
47610: LD_ADDR_VAR 0 9
47614: PUSH
47615: LD_VAR 0 1
47619: PPUSH
47620: CALL_OW 274
47624: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47625: LD_VAR 0 9
47629: PPUSH
47630: LD_INT 1
47632: PPUSH
47633: CALL_OW 275
47637: PUSH
47638: LD_VAR 0 14
47642: PUSH
47643: LD_INT 1
47645: ARRAY
47646: GREATEREQUAL
47647: PUSH
47648: LD_VAR 0 9
47652: PPUSH
47653: LD_INT 2
47655: PPUSH
47656: CALL_OW 275
47660: PUSH
47661: LD_VAR 0 14
47665: PUSH
47666: LD_INT 2
47668: ARRAY
47669: GREATEREQUAL
47670: AND
47671: PUSH
47672: LD_VAR 0 9
47676: PPUSH
47677: LD_INT 3
47679: PPUSH
47680: CALL_OW 275
47684: PUSH
47685: LD_VAR 0 14
47689: PUSH
47690: LD_INT 3
47692: ARRAY
47693: GREATEREQUAL
47694: AND
47695: IFFALSE 47707
// result := weapon ;
47697: LD_ADDR_VAR 0 3
47701: PUSH
47702: LD_VAR 0 18
47706: ST_TO_ADDR
// end ; end ;
47707: LD_VAR 0 3
47711: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47712: LD_INT 0
47714: PPUSH
47715: PPUSH
// result := true ;
47716: LD_ADDR_VAR 0 3
47720: PUSH
47721: LD_INT 1
47723: ST_TO_ADDR
// if array1 = array2 then
47724: LD_VAR 0 1
47728: PUSH
47729: LD_VAR 0 2
47733: EQUAL
47734: IFFALSE 47794
// begin for i = 1 to array1 do
47736: LD_ADDR_VAR 0 4
47740: PUSH
47741: DOUBLE
47742: LD_INT 1
47744: DEC
47745: ST_TO_ADDR
47746: LD_VAR 0 1
47750: PUSH
47751: FOR_TO
47752: IFFALSE 47790
// if array1 [ i ] <> array2 [ i ] then
47754: LD_VAR 0 1
47758: PUSH
47759: LD_VAR 0 4
47763: ARRAY
47764: PUSH
47765: LD_VAR 0 2
47769: PUSH
47770: LD_VAR 0 4
47774: ARRAY
47775: NONEQUAL
47776: IFFALSE 47788
// begin result := false ;
47778: LD_ADDR_VAR 0 3
47782: PUSH
47783: LD_INT 0
47785: ST_TO_ADDR
// break ;
47786: GO 47790
// end ;
47788: GO 47751
47790: POP
47791: POP
// end else
47792: GO 47802
// result := false ;
47794: LD_ADDR_VAR 0 3
47798: PUSH
47799: LD_INT 0
47801: ST_TO_ADDR
// end ;
47802: LD_VAR 0 3
47806: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47807: LD_INT 0
47809: PPUSH
47810: PPUSH
// if not array1 or not array2 then
47811: LD_VAR 0 1
47815: NOT
47816: PUSH
47817: LD_VAR 0 2
47821: NOT
47822: OR
47823: IFFALSE 47827
// exit ;
47825: GO 47891
// result := true ;
47827: LD_ADDR_VAR 0 3
47831: PUSH
47832: LD_INT 1
47834: ST_TO_ADDR
// for i = 1 to array1 do
47835: LD_ADDR_VAR 0 4
47839: PUSH
47840: DOUBLE
47841: LD_INT 1
47843: DEC
47844: ST_TO_ADDR
47845: LD_VAR 0 1
47849: PUSH
47850: FOR_TO
47851: IFFALSE 47889
// if array1 [ i ] <> array2 [ i ] then
47853: LD_VAR 0 1
47857: PUSH
47858: LD_VAR 0 4
47862: ARRAY
47863: PUSH
47864: LD_VAR 0 2
47868: PUSH
47869: LD_VAR 0 4
47873: ARRAY
47874: NONEQUAL
47875: IFFALSE 47887
// begin result := false ;
47877: LD_ADDR_VAR 0 3
47881: PUSH
47882: LD_INT 0
47884: ST_TO_ADDR
// break ;
47885: GO 47889
// end ;
47887: GO 47850
47889: POP
47890: POP
// end ;
47891: LD_VAR 0 3
47895: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47896: LD_INT 0
47898: PPUSH
47899: PPUSH
47900: PPUSH
// pom := GetBase ( fac ) ;
47901: LD_ADDR_VAR 0 5
47905: PUSH
47906: LD_VAR 0 1
47910: PPUSH
47911: CALL_OW 274
47915: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47916: LD_ADDR_VAR 0 4
47920: PUSH
47921: LD_VAR 0 2
47925: PUSH
47926: LD_INT 1
47928: ARRAY
47929: PPUSH
47930: LD_VAR 0 2
47934: PUSH
47935: LD_INT 2
47937: ARRAY
47938: PPUSH
47939: LD_VAR 0 2
47943: PUSH
47944: LD_INT 3
47946: ARRAY
47947: PPUSH
47948: LD_VAR 0 2
47952: PUSH
47953: LD_INT 4
47955: ARRAY
47956: PPUSH
47957: CALL_OW 449
47961: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47962: LD_ADDR_VAR 0 3
47966: PUSH
47967: LD_VAR 0 5
47971: PPUSH
47972: LD_INT 1
47974: PPUSH
47975: CALL_OW 275
47979: PUSH
47980: LD_VAR 0 4
47984: PUSH
47985: LD_INT 1
47987: ARRAY
47988: GREATEREQUAL
47989: PUSH
47990: LD_VAR 0 5
47994: PPUSH
47995: LD_INT 2
47997: PPUSH
47998: CALL_OW 275
48002: PUSH
48003: LD_VAR 0 4
48007: PUSH
48008: LD_INT 2
48010: ARRAY
48011: GREATEREQUAL
48012: AND
48013: PUSH
48014: LD_VAR 0 5
48018: PPUSH
48019: LD_INT 3
48021: PPUSH
48022: CALL_OW 275
48026: PUSH
48027: LD_VAR 0 4
48031: PUSH
48032: LD_INT 3
48034: ARRAY
48035: GREATEREQUAL
48036: AND
48037: ST_TO_ADDR
// end ;
48038: LD_VAR 0 3
48042: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48043: LD_INT 0
48045: PPUSH
48046: PPUSH
48047: PPUSH
48048: PPUSH
// pom := GetBase ( building ) ;
48049: LD_ADDR_VAR 0 3
48053: PUSH
48054: LD_VAR 0 1
48058: PPUSH
48059: CALL_OW 274
48063: ST_TO_ADDR
// if not pom then
48064: LD_VAR 0 3
48068: NOT
48069: IFFALSE 48073
// exit ;
48071: GO 48243
// btype := GetBType ( building ) ;
48073: LD_ADDR_VAR 0 5
48077: PUSH
48078: LD_VAR 0 1
48082: PPUSH
48083: CALL_OW 266
48087: ST_TO_ADDR
// if btype = b_armoury then
48088: LD_VAR 0 5
48092: PUSH
48093: LD_INT 4
48095: EQUAL
48096: IFFALSE 48106
// btype := b_barracks ;
48098: LD_ADDR_VAR 0 5
48102: PUSH
48103: LD_INT 5
48105: ST_TO_ADDR
// if btype = b_depot then
48106: LD_VAR 0 5
48110: PUSH
48111: LD_INT 0
48113: EQUAL
48114: IFFALSE 48124
// btype := b_warehouse ;
48116: LD_ADDR_VAR 0 5
48120: PUSH
48121: LD_INT 1
48123: ST_TO_ADDR
// if btype = b_workshop then
48124: LD_VAR 0 5
48128: PUSH
48129: LD_INT 2
48131: EQUAL
48132: IFFALSE 48142
// btype := b_factory ;
48134: LD_ADDR_VAR 0 5
48138: PUSH
48139: LD_INT 3
48141: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48142: LD_ADDR_VAR 0 4
48146: PUSH
48147: LD_VAR 0 5
48151: PPUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 248
48161: PPUSH
48162: CALL_OW 450
48166: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48167: LD_ADDR_VAR 0 2
48171: PUSH
48172: LD_VAR 0 3
48176: PPUSH
48177: LD_INT 1
48179: PPUSH
48180: CALL_OW 275
48184: PUSH
48185: LD_VAR 0 4
48189: PUSH
48190: LD_INT 1
48192: ARRAY
48193: GREATEREQUAL
48194: PUSH
48195: LD_VAR 0 3
48199: PPUSH
48200: LD_INT 2
48202: PPUSH
48203: CALL_OW 275
48207: PUSH
48208: LD_VAR 0 4
48212: PUSH
48213: LD_INT 2
48215: ARRAY
48216: GREATEREQUAL
48217: AND
48218: PUSH
48219: LD_VAR 0 3
48223: PPUSH
48224: LD_INT 3
48226: PPUSH
48227: CALL_OW 275
48231: PUSH
48232: LD_VAR 0 4
48236: PUSH
48237: LD_INT 3
48239: ARRAY
48240: GREATEREQUAL
48241: AND
48242: ST_TO_ADDR
// end ;
48243: LD_VAR 0 2
48247: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48248: LD_INT 0
48250: PPUSH
48251: PPUSH
48252: PPUSH
// pom := GetBase ( building ) ;
48253: LD_ADDR_VAR 0 4
48257: PUSH
48258: LD_VAR 0 1
48262: PPUSH
48263: CALL_OW 274
48267: ST_TO_ADDR
// if not pom then
48268: LD_VAR 0 4
48272: NOT
48273: IFFALSE 48277
// exit ;
48275: GO 48378
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48277: LD_ADDR_VAR 0 5
48281: PUSH
48282: LD_VAR 0 2
48286: PPUSH
48287: LD_VAR 0 1
48291: PPUSH
48292: CALL_OW 248
48296: PPUSH
48297: CALL_OW 450
48301: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48302: LD_ADDR_VAR 0 3
48306: PUSH
48307: LD_VAR 0 4
48311: PPUSH
48312: LD_INT 1
48314: PPUSH
48315: CALL_OW 275
48319: PUSH
48320: LD_VAR 0 5
48324: PUSH
48325: LD_INT 1
48327: ARRAY
48328: GREATEREQUAL
48329: PUSH
48330: LD_VAR 0 4
48334: PPUSH
48335: LD_INT 2
48337: PPUSH
48338: CALL_OW 275
48342: PUSH
48343: LD_VAR 0 5
48347: PUSH
48348: LD_INT 2
48350: ARRAY
48351: GREATEREQUAL
48352: AND
48353: PUSH
48354: LD_VAR 0 4
48358: PPUSH
48359: LD_INT 3
48361: PPUSH
48362: CALL_OW 275
48366: PUSH
48367: LD_VAR 0 5
48371: PUSH
48372: LD_INT 3
48374: ARRAY
48375: GREATEREQUAL
48376: AND
48377: ST_TO_ADDR
// end ;
48378: LD_VAR 0 3
48382: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48383: LD_INT 0
48385: PPUSH
48386: PPUSH
48387: PPUSH
48388: PPUSH
48389: PPUSH
48390: PPUSH
48391: PPUSH
48392: PPUSH
48393: PPUSH
48394: PPUSH
48395: PPUSH
// result := false ;
48396: LD_ADDR_VAR 0 8
48400: PUSH
48401: LD_INT 0
48403: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48404: LD_VAR 0 5
48408: NOT
48409: PUSH
48410: LD_VAR 0 1
48414: NOT
48415: OR
48416: PUSH
48417: LD_VAR 0 2
48421: NOT
48422: OR
48423: PUSH
48424: LD_VAR 0 3
48428: NOT
48429: OR
48430: IFFALSE 48434
// exit ;
48432: GO 49248
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48434: LD_ADDR_VAR 0 14
48438: PUSH
48439: LD_VAR 0 1
48443: PPUSH
48444: LD_VAR 0 2
48448: PPUSH
48449: LD_VAR 0 3
48453: PPUSH
48454: LD_VAR 0 4
48458: PPUSH
48459: LD_VAR 0 5
48463: PUSH
48464: LD_INT 1
48466: ARRAY
48467: PPUSH
48468: CALL_OW 248
48472: PPUSH
48473: LD_INT 0
48475: PPUSH
48476: CALL 50485 0 6
48480: ST_TO_ADDR
// if not hexes then
48481: LD_VAR 0 14
48485: NOT
48486: IFFALSE 48490
// exit ;
48488: GO 49248
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48490: LD_ADDR_VAR 0 17
48494: PUSH
48495: LD_VAR 0 5
48499: PPUSH
48500: LD_INT 22
48502: PUSH
48503: LD_VAR 0 13
48507: PPUSH
48508: CALL_OW 255
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 30
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 30
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: LIST
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PPUSH
48549: CALL_OW 72
48553: ST_TO_ADDR
// for i = 1 to hexes do
48554: LD_ADDR_VAR 0 9
48558: PUSH
48559: DOUBLE
48560: LD_INT 1
48562: DEC
48563: ST_TO_ADDR
48564: LD_VAR 0 14
48568: PUSH
48569: FOR_TO
48570: IFFALSE 49246
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48572: LD_ADDR_VAR 0 13
48576: PUSH
48577: LD_VAR 0 14
48581: PUSH
48582: LD_VAR 0 9
48586: ARRAY
48587: PUSH
48588: LD_INT 1
48590: ARRAY
48591: PPUSH
48592: LD_VAR 0 14
48596: PUSH
48597: LD_VAR 0 9
48601: ARRAY
48602: PUSH
48603: LD_INT 2
48605: ARRAY
48606: PPUSH
48607: CALL_OW 428
48611: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48612: LD_VAR 0 14
48616: PUSH
48617: LD_VAR 0 9
48621: ARRAY
48622: PUSH
48623: LD_INT 1
48625: ARRAY
48626: PPUSH
48627: LD_VAR 0 14
48631: PUSH
48632: LD_VAR 0 9
48636: ARRAY
48637: PUSH
48638: LD_INT 2
48640: ARRAY
48641: PPUSH
48642: CALL_OW 351
48646: PUSH
48647: LD_VAR 0 14
48651: PUSH
48652: LD_VAR 0 9
48656: ARRAY
48657: PUSH
48658: LD_INT 1
48660: ARRAY
48661: PPUSH
48662: LD_VAR 0 14
48666: PUSH
48667: LD_VAR 0 9
48671: ARRAY
48672: PUSH
48673: LD_INT 2
48675: ARRAY
48676: PPUSH
48677: CALL_OW 488
48681: NOT
48682: OR
48683: PUSH
48684: LD_VAR 0 13
48688: PPUSH
48689: CALL_OW 247
48693: PUSH
48694: LD_INT 3
48696: EQUAL
48697: OR
48698: IFFALSE 48704
// exit ;
48700: POP
48701: POP
48702: GO 49248
// if not tmp then
48704: LD_VAR 0 13
48708: NOT
48709: IFFALSE 48713
// continue ;
48711: GO 48569
// result := true ;
48713: LD_ADDR_VAR 0 8
48717: PUSH
48718: LD_INT 1
48720: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48721: LD_VAR 0 6
48725: PUSH
48726: LD_VAR 0 13
48730: PPUSH
48731: CALL_OW 247
48735: PUSH
48736: LD_INT 2
48738: EQUAL
48739: AND
48740: PUSH
48741: LD_VAR 0 13
48745: PPUSH
48746: CALL_OW 263
48750: PUSH
48751: LD_INT 1
48753: EQUAL
48754: AND
48755: IFFALSE 48919
// begin if IsDrivenBy ( tmp ) then
48757: LD_VAR 0 13
48761: PPUSH
48762: CALL_OW 311
48766: IFFALSE 48770
// continue ;
48768: GO 48569
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48770: LD_VAR 0 6
48774: PPUSH
48775: LD_INT 3
48777: PUSH
48778: LD_INT 60
48780: PUSH
48781: EMPTY
48782: LIST
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 3
48790: PUSH
48791: LD_INT 55
48793: PUSH
48794: EMPTY
48795: LIST
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PPUSH
48805: CALL_OW 72
48809: IFFALSE 48917
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48811: LD_ADDR_VAR 0 18
48815: PUSH
48816: LD_VAR 0 6
48820: PPUSH
48821: LD_INT 3
48823: PUSH
48824: LD_INT 60
48826: PUSH
48827: EMPTY
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 3
48836: PUSH
48837: LD_INT 55
48839: PUSH
48840: EMPTY
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PPUSH
48851: CALL_OW 72
48855: PUSH
48856: LD_INT 1
48858: ARRAY
48859: ST_TO_ADDR
// if IsInUnit ( driver ) then
48860: LD_VAR 0 18
48864: PPUSH
48865: CALL_OW 310
48869: IFFALSE 48880
// ComExit ( driver ) ;
48871: LD_VAR 0 18
48875: PPUSH
48876: CALL 73669 0 1
// AddComEnterUnit ( driver , tmp ) ;
48880: LD_VAR 0 18
48884: PPUSH
48885: LD_VAR 0 13
48889: PPUSH
48890: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48894: LD_VAR 0 18
48898: PPUSH
48899: LD_VAR 0 7
48903: PPUSH
48904: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48908: LD_VAR 0 18
48912: PPUSH
48913: CALL_OW 181
// end ; continue ;
48917: GO 48569
// end ; if not cleaners or not tmp in cleaners then
48919: LD_VAR 0 6
48923: NOT
48924: PUSH
48925: LD_VAR 0 13
48929: PUSH
48930: LD_VAR 0 6
48934: IN
48935: NOT
48936: OR
48937: IFFALSE 49244
// begin if dep then
48939: LD_VAR 0 17
48943: IFFALSE 49079
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48945: LD_ADDR_VAR 0 16
48949: PUSH
48950: LD_VAR 0 17
48954: PUSH
48955: LD_INT 1
48957: ARRAY
48958: PPUSH
48959: CALL_OW 250
48963: PPUSH
48964: LD_VAR 0 17
48968: PUSH
48969: LD_INT 1
48971: ARRAY
48972: PPUSH
48973: CALL_OW 254
48977: PPUSH
48978: LD_INT 5
48980: PPUSH
48981: CALL_OW 272
48985: PUSH
48986: LD_VAR 0 17
48990: PUSH
48991: LD_INT 1
48993: ARRAY
48994: PPUSH
48995: CALL_OW 251
48999: PPUSH
49000: LD_VAR 0 17
49004: PUSH
49005: LD_INT 1
49007: ARRAY
49008: PPUSH
49009: CALL_OW 254
49013: PPUSH
49014: LD_INT 5
49016: PPUSH
49017: CALL_OW 273
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49026: LD_VAR 0 16
49030: PUSH
49031: LD_INT 1
49033: ARRAY
49034: PPUSH
49035: LD_VAR 0 16
49039: PUSH
49040: LD_INT 2
49042: ARRAY
49043: PPUSH
49044: CALL_OW 488
49048: IFFALSE 49079
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49050: LD_VAR 0 13
49054: PPUSH
49055: LD_VAR 0 16
49059: PUSH
49060: LD_INT 1
49062: ARRAY
49063: PPUSH
49064: LD_VAR 0 16
49068: PUSH
49069: LD_INT 2
49071: ARRAY
49072: PPUSH
49073: CALL_OW 111
// continue ;
49077: GO 48569
// end ; end ; r := GetDir ( tmp ) ;
49079: LD_ADDR_VAR 0 15
49083: PUSH
49084: LD_VAR 0 13
49088: PPUSH
49089: CALL_OW 254
49093: ST_TO_ADDR
// if r = 5 then
49094: LD_VAR 0 15
49098: PUSH
49099: LD_INT 5
49101: EQUAL
49102: IFFALSE 49112
// r := 0 ;
49104: LD_ADDR_VAR 0 15
49108: PUSH
49109: LD_INT 0
49111: ST_TO_ADDR
// for j = r to 5 do
49112: LD_ADDR_VAR 0 10
49116: PUSH
49117: DOUBLE
49118: LD_VAR 0 15
49122: DEC
49123: ST_TO_ADDR
49124: LD_INT 5
49126: PUSH
49127: FOR_TO
49128: IFFALSE 49242
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49130: LD_ADDR_VAR 0 11
49134: PUSH
49135: LD_VAR 0 13
49139: PPUSH
49140: CALL_OW 250
49144: PPUSH
49145: LD_VAR 0 10
49149: PPUSH
49150: LD_INT 2
49152: PPUSH
49153: CALL_OW 272
49157: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49158: LD_ADDR_VAR 0 12
49162: PUSH
49163: LD_VAR 0 13
49167: PPUSH
49168: CALL_OW 251
49172: PPUSH
49173: LD_VAR 0 10
49177: PPUSH
49178: LD_INT 2
49180: PPUSH
49181: CALL_OW 273
49185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49186: LD_VAR 0 11
49190: PPUSH
49191: LD_VAR 0 12
49195: PPUSH
49196: CALL_OW 488
49200: PUSH
49201: LD_VAR 0 11
49205: PPUSH
49206: LD_VAR 0 12
49210: PPUSH
49211: CALL_OW 428
49215: NOT
49216: AND
49217: IFFALSE 49240
// begin ComMoveXY ( tmp , _x , _y ) ;
49219: LD_VAR 0 13
49223: PPUSH
49224: LD_VAR 0 11
49228: PPUSH
49229: LD_VAR 0 12
49233: PPUSH
49234: CALL_OW 111
// break ;
49238: GO 49242
// end ; end ;
49240: GO 49127
49242: POP
49243: POP
// end ; end ;
49244: GO 48569
49246: POP
49247: POP
// end ;
49248: LD_VAR 0 8
49252: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49253: LD_INT 0
49255: PPUSH
// result := true ;
49256: LD_ADDR_VAR 0 3
49260: PUSH
49261: LD_INT 1
49263: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49264: LD_VAR 0 2
49268: PUSH
49269: LD_INT 24
49271: DOUBLE
49272: EQUAL
49273: IFTRUE 49283
49275: LD_INT 33
49277: DOUBLE
49278: EQUAL
49279: IFTRUE 49283
49281: GO 49308
49283: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49284: LD_ADDR_VAR 0 3
49288: PUSH
49289: LD_INT 32
49291: PPUSH
49292: LD_VAR 0 1
49296: PPUSH
49297: CALL_OW 321
49301: PUSH
49302: LD_INT 2
49304: EQUAL
49305: ST_TO_ADDR
49306: GO 49628
49308: LD_INT 20
49310: DOUBLE
49311: EQUAL
49312: IFTRUE 49316
49314: GO 49341
49316: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49317: LD_ADDR_VAR 0 3
49321: PUSH
49322: LD_INT 6
49324: PPUSH
49325: LD_VAR 0 1
49329: PPUSH
49330: CALL_OW 321
49334: PUSH
49335: LD_INT 2
49337: EQUAL
49338: ST_TO_ADDR
49339: GO 49628
49341: LD_INT 22
49343: DOUBLE
49344: EQUAL
49345: IFTRUE 49355
49347: LD_INT 36
49349: DOUBLE
49350: EQUAL
49351: IFTRUE 49355
49353: GO 49380
49355: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49356: LD_ADDR_VAR 0 3
49360: PUSH
49361: LD_INT 15
49363: PPUSH
49364: LD_VAR 0 1
49368: PPUSH
49369: CALL_OW 321
49373: PUSH
49374: LD_INT 2
49376: EQUAL
49377: ST_TO_ADDR
49378: GO 49628
49380: LD_INT 30
49382: DOUBLE
49383: EQUAL
49384: IFTRUE 49388
49386: GO 49413
49388: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49389: LD_ADDR_VAR 0 3
49393: PUSH
49394: LD_INT 20
49396: PPUSH
49397: LD_VAR 0 1
49401: PPUSH
49402: CALL_OW 321
49406: PUSH
49407: LD_INT 2
49409: EQUAL
49410: ST_TO_ADDR
49411: GO 49628
49413: LD_INT 28
49415: DOUBLE
49416: EQUAL
49417: IFTRUE 49427
49419: LD_INT 21
49421: DOUBLE
49422: EQUAL
49423: IFTRUE 49427
49425: GO 49452
49427: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49428: LD_ADDR_VAR 0 3
49432: PUSH
49433: LD_INT 21
49435: PPUSH
49436: LD_VAR 0 1
49440: PPUSH
49441: CALL_OW 321
49445: PUSH
49446: LD_INT 2
49448: EQUAL
49449: ST_TO_ADDR
49450: GO 49628
49452: LD_INT 16
49454: DOUBLE
49455: EQUAL
49456: IFTRUE 49460
49458: GO 49487
49460: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49461: LD_ADDR_VAR 0 3
49465: PUSH
49466: LD_EXP 74
49470: PPUSH
49471: LD_VAR 0 1
49475: PPUSH
49476: CALL_OW 321
49480: PUSH
49481: LD_INT 2
49483: EQUAL
49484: ST_TO_ADDR
49485: GO 49628
49487: LD_INT 19
49489: DOUBLE
49490: EQUAL
49491: IFTRUE 49501
49493: LD_INT 23
49495: DOUBLE
49496: EQUAL
49497: IFTRUE 49501
49499: GO 49528
49501: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49502: LD_ADDR_VAR 0 3
49506: PUSH
49507: LD_EXP 73
49511: PPUSH
49512: LD_VAR 0 1
49516: PPUSH
49517: CALL_OW 321
49521: PUSH
49522: LD_INT 2
49524: EQUAL
49525: ST_TO_ADDR
49526: GO 49628
49528: LD_INT 17
49530: DOUBLE
49531: EQUAL
49532: IFTRUE 49536
49534: GO 49561
49536: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49537: LD_ADDR_VAR 0 3
49541: PUSH
49542: LD_INT 39
49544: PPUSH
49545: LD_VAR 0 1
49549: PPUSH
49550: CALL_OW 321
49554: PUSH
49555: LD_INT 2
49557: EQUAL
49558: ST_TO_ADDR
49559: GO 49628
49561: LD_INT 18
49563: DOUBLE
49564: EQUAL
49565: IFTRUE 49569
49567: GO 49594
49569: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49570: LD_ADDR_VAR 0 3
49574: PUSH
49575: LD_INT 40
49577: PPUSH
49578: LD_VAR 0 1
49582: PPUSH
49583: CALL_OW 321
49587: PUSH
49588: LD_INT 2
49590: EQUAL
49591: ST_TO_ADDR
49592: GO 49628
49594: LD_INT 27
49596: DOUBLE
49597: EQUAL
49598: IFTRUE 49602
49600: GO 49627
49602: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49603: LD_ADDR_VAR 0 3
49607: PUSH
49608: LD_INT 35
49610: PPUSH
49611: LD_VAR 0 1
49615: PPUSH
49616: CALL_OW 321
49620: PUSH
49621: LD_INT 2
49623: EQUAL
49624: ST_TO_ADDR
49625: GO 49628
49627: POP
// end ;
49628: LD_VAR 0 3
49632: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49633: LD_INT 0
49635: PPUSH
49636: PPUSH
49637: PPUSH
49638: PPUSH
49639: PPUSH
49640: PPUSH
49641: PPUSH
49642: PPUSH
49643: PPUSH
49644: PPUSH
49645: PPUSH
// result := false ;
49646: LD_ADDR_VAR 0 6
49650: PUSH
49651: LD_INT 0
49653: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49654: LD_VAR 0 1
49658: NOT
49659: PUSH
49660: LD_VAR 0 1
49664: PPUSH
49665: CALL_OW 266
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: IN
49680: NOT
49681: OR
49682: PUSH
49683: LD_VAR 0 2
49687: NOT
49688: OR
49689: PUSH
49690: LD_VAR 0 5
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 3
49706: PUSH
49707: LD_INT 4
49709: PUSH
49710: LD_INT 5
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: IN
49721: NOT
49722: OR
49723: PUSH
49724: LD_VAR 0 3
49728: PPUSH
49729: LD_VAR 0 4
49733: PPUSH
49734: CALL_OW 488
49738: NOT
49739: OR
49740: IFFALSE 49744
// exit ;
49742: GO 50480
// side := GetSide ( depot ) ;
49744: LD_ADDR_VAR 0 9
49748: PUSH
49749: LD_VAR 0 1
49753: PPUSH
49754: CALL_OW 255
49758: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49759: LD_VAR 0 9
49763: PPUSH
49764: LD_VAR 0 2
49768: PPUSH
49769: CALL 49253 0 2
49773: NOT
49774: IFFALSE 49778
// exit ;
49776: GO 50480
// pom := GetBase ( depot ) ;
49778: LD_ADDR_VAR 0 10
49782: PUSH
49783: LD_VAR 0 1
49787: PPUSH
49788: CALL_OW 274
49792: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49793: LD_ADDR_VAR 0 11
49797: PUSH
49798: LD_VAR 0 2
49802: PPUSH
49803: LD_VAR 0 1
49807: PPUSH
49808: CALL_OW 248
49812: PPUSH
49813: CALL_OW 450
49817: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49818: LD_VAR 0 10
49822: PPUSH
49823: LD_INT 1
49825: PPUSH
49826: CALL_OW 275
49830: PUSH
49831: LD_VAR 0 11
49835: PUSH
49836: LD_INT 1
49838: ARRAY
49839: GREATEREQUAL
49840: PUSH
49841: LD_VAR 0 10
49845: PPUSH
49846: LD_INT 2
49848: PPUSH
49849: CALL_OW 275
49853: PUSH
49854: LD_VAR 0 11
49858: PUSH
49859: LD_INT 2
49861: ARRAY
49862: GREATEREQUAL
49863: AND
49864: PUSH
49865: LD_VAR 0 10
49869: PPUSH
49870: LD_INT 3
49872: PPUSH
49873: CALL_OW 275
49877: PUSH
49878: LD_VAR 0 11
49882: PUSH
49883: LD_INT 3
49885: ARRAY
49886: GREATEREQUAL
49887: AND
49888: NOT
49889: IFFALSE 49893
// exit ;
49891: GO 50480
// if GetBType ( depot ) = b_depot then
49893: LD_VAR 0 1
49897: PPUSH
49898: CALL_OW 266
49902: PUSH
49903: LD_INT 0
49905: EQUAL
49906: IFFALSE 49918
// dist := 28 else
49908: LD_ADDR_VAR 0 14
49912: PUSH
49913: LD_INT 28
49915: ST_TO_ADDR
49916: GO 49926
// dist := 36 ;
49918: LD_ADDR_VAR 0 14
49922: PUSH
49923: LD_INT 36
49925: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49926: LD_VAR 0 1
49930: PPUSH
49931: LD_VAR 0 3
49935: PPUSH
49936: LD_VAR 0 4
49940: PPUSH
49941: CALL_OW 297
49945: PUSH
49946: LD_VAR 0 14
49950: GREATER
49951: IFFALSE 49955
// exit ;
49953: GO 50480
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49955: LD_ADDR_VAR 0 12
49959: PUSH
49960: LD_VAR 0 2
49964: PPUSH
49965: LD_VAR 0 3
49969: PPUSH
49970: LD_VAR 0 4
49974: PPUSH
49975: LD_VAR 0 5
49979: PPUSH
49980: LD_VAR 0 1
49984: PPUSH
49985: CALL_OW 248
49989: PPUSH
49990: LD_INT 0
49992: PPUSH
49993: CALL 50485 0 6
49997: ST_TO_ADDR
// if not hexes then
49998: LD_VAR 0 12
50002: NOT
50003: IFFALSE 50007
// exit ;
50005: GO 50480
// hex := GetHexInfo ( x , y ) ;
50007: LD_ADDR_VAR 0 15
50011: PUSH
50012: LD_VAR 0 3
50016: PPUSH
50017: LD_VAR 0 4
50021: PPUSH
50022: CALL_OW 546
50026: ST_TO_ADDR
// if hex [ 1 ] then
50027: LD_VAR 0 15
50031: PUSH
50032: LD_INT 1
50034: ARRAY
50035: IFFALSE 50039
// exit ;
50037: GO 50480
// height := hex [ 2 ] ;
50039: LD_ADDR_VAR 0 13
50043: PUSH
50044: LD_VAR 0 15
50048: PUSH
50049: LD_INT 2
50051: ARRAY
50052: ST_TO_ADDR
// for i = 1 to hexes do
50053: LD_ADDR_VAR 0 7
50057: PUSH
50058: DOUBLE
50059: LD_INT 1
50061: DEC
50062: ST_TO_ADDR
50063: LD_VAR 0 12
50067: PUSH
50068: FOR_TO
50069: IFFALSE 50399
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50071: LD_VAR 0 12
50075: PUSH
50076: LD_VAR 0 7
50080: ARRAY
50081: PUSH
50082: LD_INT 1
50084: ARRAY
50085: PPUSH
50086: LD_VAR 0 12
50090: PUSH
50091: LD_VAR 0 7
50095: ARRAY
50096: PUSH
50097: LD_INT 2
50099: ARRAY
50100: PPUSH
50101: CALL_OW 488
50105: NOT
50106: PUSH
50107: LD_VAR 0 12
50111: PUSH
50112: LD_VAR 0 7
50116: ARRAY
50117: PUSH
50118: LD_INT 1
50120: ARRAY
50121: PPUSH
50122: LD_VAR 0 12
50126: PUSH
50127: LD_VAR 0 7
50131: ARRAY
50132: PUSH
50133: LD_INT 2
50135: ARRAY
50136: PPUSH
50137: CALL_OW 428
50141: PUSH
50142: LD_INT 0
50144: GREATER
50145: OR
50146: PUSH
50147: LD_VAR 0 12
50151: PUSH
50152: LD_VAR 0 7
50156: ARRAY
50157: PUSH
50158: LD_INT 1
50160: ARRAY
50161: PPUSH
50162: LD_VAR 0 12
50166: PUSH
50167: LD_VAR 0 7
50171: ARRAY
50172: PUSH
50173: LD_INT 2
50175: ARRAY
50176: PPUSH
50177: CALL_OW 351
50181: OR
50182: IFFALSE 50188
// exit ;
50184: POP
50185: POP
50186: GO 50480
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50188: LD_ADDR_VAR 0 8
50192: PUSH
50193: LD_VAR 0 12
50197: PUSH
50198: LD_VAR 0 7
50202: ARRAY
50203: PUSH
50204: LD_INT 1
50206: ARRAY
50207: PPUSH
50208: LD_VAR 0 12
50212: PUSH
50213: LD_VAR 0 7
50217: ARRAY
50218: PUSH
50219: LD_INT 2
50221: ARRAY
50222: PPUSH
50223: CALL_OW 546
50227: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50228: LD_VAR 0 8
50232: PUSH
50233: LD_INT 1
50235: ARRAY
50236: PUSH
50237: LD_VAR 0 8
50241: PUSH
50242: LD_INT 2
50244: ARRAY
50245: PUSH
50246: LD_VAR 0 13
50250: PUSH
50251: LD_INT 2
50253: PLUS
50254: GREATER
50255: OR
50256: PUSH
50257: LD_VAR 0 8
50261: PUSH
50262: LD_INT 2
50264: ARRAY
50265: PUSH
50266: LD_VAR 0 13
50270: PUSH
50271: LD_INT 2
50273: MINUS
50274: LESS
50275: OR
50276: PUSH
50277: LD_VAR 0 8
50281: PUSH
50282: LD_INT 3
50284: ARRAY
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 8
50291: PUSH
50292: LD_INT 9
50294: PUSH
50295: LD_INT 10
50297: PUSH
50298: LD_INT 11
50300: PUSH
50301: LD_INT 12
50303: PUSH
50304: LD_INT 13
50306: PUSH
50307: LD_INT 16
50309: PUSH
50310: LD_INT 17
50312: PUSH
50313: LD_INT 18
50315: PUSH
50316: LD_INT 19
50318: PUSH
50319: LD_INT 20
50321: PUSH
50322: LD_INT 21
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: IN
50340: NOT
50341: OR
50342: PUSH
50343: LD_VAR 0 8
50347: PUSH
50348: LD_INT 5
50350: ARRAY
50351: NOT
50352: OR
50353: PUSH
50354: LD_VAR 0 8
50358: PUSH
50359: LD_INT 6
50361: ARRAY
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: LD_INT 7
50371: PUSH
50372: LD_INT 9
50374: PUSH
50375: LD_INT 10
50377: PUSH
50378: LD_INT 11
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: IN
50389: NOT
50390: OR
50391: IFFALSE 50397
// exit ;
50393: POP
50394: POP
50395: GO 50480
// end ;
50397: GO 50068
50399: POP
50400: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50401: LD_VAR 0 9
50405: PPUSH
50406: LD_VAR 0 3
50410: PPUSH
50411: LD_VAR 0 4
50415: PPUSH
50416: LD_INT 20
50418: PPUSH
50419: CALL 42426 0 4
50423: PUSH
50424: LD_INT 4
50426: ARRAY
50427: IFFALSE 50431
// exit ;
50429: GO 50480
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50431: LD_VAR 0 2
50435: PUSH
50436: LD_INT 29
50438: PUSH
50439: LD_INT 30
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: IN
50446: PUSH
50447: LD_VAR 0 3
50451: PPUSH
50452: LD_VAR 0 4
50456: PPUSH
50457: LD_VAR 0 9
50461: PPUSH
50462: CALL_OW 440
50466: NOT
50467: AND
50468: IFFALSE 50472
// exit ;
50470: GO 50480
// result := true ;
50472: LD_ADDR_VAR 0 6
50476: PUSH
50477: LD_INT 1
50479: ST_TO_ADDR
// end ;
50480: LD_VAR 0 6
50484: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50485: LD_INT 0
50487: PPUSH
50488: PPUSH
50489: PPUSH
50490: PPUSH
50491: PPUSH
50492: PPUSH
50493: PPUSH
50494: PPUSH
50495: PPUSH
50496: PPUSH
50497: PPUSH
50498: PPUSH
50499: PPUSH
50500: PPUSH
50501: PPUSH
50502: PPUSH
50503: PPUSH
50504: PPUSH
50505: PPUSH
50506: PPUSH
50507: PPUSH
50508: PPUSH
50509: PPUSH
50510: PPUSH
50511: PPUSH
50512: PPUSH
50513: PPUSH
50514: PPUSH
50515: PPUSH
50516: PPUSH
50517: PPUSH
50518: PPUSH
50519: PPUSH
50520: PPUSH
50521: PPUSH
50522: PPUSH
50523: PPUSH
50524: PPUSH
50525: PPUSH
50526: PPUSH
50527: PPUSH
50528: PPUSH
50529: PPUSH
50530: PPUSH
50531: PPUSH
50532: PPUSH
50533: PPUSH
50534: PPUSH
50535: PPUSH
50536: PPUSH
50537: PPUSH
50538: PPUSH
50539: PPUSH
50540: PPUSH
50541: PPUSH
50542: PPUSH
50543: PPUSH
50544: PPUSH
// result = [ ] ;
50545: LD_ADDR_VAR 0 7
50549: PUSH
50550: EMPTY
50551: ST_TO_ADDR
// temp_list = [ ] ;
50552: LD_ADDR_VAR 0 9
50556: PUSH
50557: EMPTY
50558: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50559: LD_VAR 0 4
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: LD_INT 3
50575: PUSH
50576: LD_INT 4
50578: PUSH
50579: LD_INT 5
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: IN
50590: NOT
50591: PUSH
50592: LD_VAR 0 1
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: IN
50607: PUSH
50608: LD_VAR 0 5
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: LD_INT 3
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: LIST
50626: IN
50627: NOT
50628: AND
50629: OR
50630: IFFALSE 50634
// exit ;
50632: GO 69025
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50634: LD_VAR 0 1
50638: PUSH
50639: LD_INT 6
50641: PUSH
50642: LD_INT 7
50644: PUSH
50645: LD_INT 8
50647: PUSH
50648: LD_INT 13
50650: PUSH
50651: LD_INT 12
50653: PUSH
50654: LD_INT 15
50656: PUSH
50657: LD_INT 11
50659: PUSH
50660: LD_INT 14
50662: PUSH
50663: LD_INT 10
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: IN
50677: IFFALSE 50687
// btype = b_lab ;
50679: LD_ADDR_VAR 0 1
50683: PUSH
50684: LD_INT 6
50686: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50687: LD_VAR 0 6
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: IN
50706: NOT
50707: PUSH
50708: LD_VAR 0 1
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: LD_INT 6
50727: PUSH
50728: LD_INT 36
50730: PUSH
50731: LD_INT 4
50733: PUSH
50734: LD_INT 5
50736: PUSH
50737: LD_INT 31
50739: PUSH
50740: LD_INT 32
50742: PUSH
50743: LD_INT 33
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: IN
50759: NOT
50760: PUSH
50761: LD_VAR 0 6
50765: PUSH
50766: LD_INT 1
50768: EQUAL
50769: AND
50770: OR
50771: PUSH
50772: LD_VAR 0 1
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: LD_INT 3
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: IN
50787: NOT
50788: PUSH
50789: LD_VAR 0 6
50793: PUSH
50794: LD_INT 2
50796: EQUAL
50797: AND
50798: OR
50799: IFFALSE 50809
// mode = 0 ;
50801: LD_ADDR_VAR 0 6
50805: PUSH
50806: LD_INT 0
50808: ST_TO_ADDR
// case mode of 0 :
50809: LD_VAR 0 6
50813: PUSH
50814: LD_INT 0
50816: DOUBLE
50817: EQUAL
50818: IFTRUE 50822
50820: GO 62275
50822: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50823: LD_ADDR_VAR 0 11
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51016: LD_ADDR_VAR 0 12
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 3
51184: NEG
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51212: LD_ADDR_VAR 0 13
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 3
51371: NEG
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51411: LD_ADDR_VAR 0 14
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 3
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51607: LD_ADDR_VAR 0 15
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51800: LD_ADDR_VAR 0 16
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: NEG
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51993: LD_ADDR_VAR 0 17
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52223: LD_ADDR_VAR 0 18
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52453: LD_ADDR_VAR 0 19
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52683: LD_ADDR_VAR 0 20
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52913: LD_ADDR_VAR 0 21
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53143: LD_ADDR_VAR 0 22
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53373: LD_ADDR_VAR 0 23
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: LD_INT 3
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53653: LD_ADDR_VAR 0 24
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53929: LD_ADDR_VAR 0 25
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 3
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54203: LD_ADDR_VAR 0 26
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 3
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54479: LD_ADDR_VAR 0 27
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 3
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 3
54724: NEG
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54759: LD_ADDR_VAR 0 28
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 3
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55041: LD_ADDR_VAR 0 29
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: NEG
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55320: LD_ADDR_VAR 0 30
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55598: LD_ADDR_VAR 0 31
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 3
55841: NEG
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55876: LD_ADDR_VAR 0 32
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 3
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 3
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56154: LD_ADDR_VAR 0 33
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: LD_INT 3
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 3
56398: NEG
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56433: LD_ADDR_VAR 0 34
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56713: LD_ADDR_VAR 0 35
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56825: LD_ADDR_VAR 0 36
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56937: LD_ADDR_VAR 0 37
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57049: LD_ADDR_VAR 0 38
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57161: LD_ADDR_VAR 0 39
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57273: LD_ADDR_VAR 0 40
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57385: LD_ADDR_VAR 0 41
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 3
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 3
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57735: LD_ADDR_VAR 0 42
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: LD_INT 3
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: LD_INT 3
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58085: LD_ADDR_VAR 0 43
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 2
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 3
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 3
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 3
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 3
58381: NEG
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 3
58392: NEG
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58433: LD_ADDR_VAR 0 44
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 3
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58783: LD_ADDR_VAR 0 45
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 2
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 2
58973: NEG
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 3
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: LD_INT 3
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 3
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 3
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 3
59092: NEG
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59133: LD_ADDR_VAR 0 46
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 3
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 3
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 3
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 3
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59481: LD_ADDR_VAR 0 47
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 2
59608: NEG
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59632: LD_ADDR_VAR 0 48
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 2
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59779: LD_ADDR_VAR 0 49
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59923: LD_ADDR_VAR 0 50
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60067: LD_ADDR_VAR 0 51
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: NEG
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60214: LD_ADDR_VAR 0 52
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60365: LD_ADDR_VAR 0 53
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60595: LD_ADDR_VAR 0 54
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 2
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 2
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60825: LD_ADDR_VAR 0 55
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 2
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61055: LD_ADDR_VAR 0 56
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61285: LD_ADDR_VAR 0 57
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 2
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61515: LD_ADDR_VAR 0 58
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61745: LD_ADDR_VAR 0 59
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61833: LD_ADDR_VAR 0 60
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61921: LD_ADDR_VAR 0 61
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62009: LD_ADDR_VAR 0 62
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62097: LD_ADDR_VAR 0 63
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62185: LD_ADDR_VAR 0 64
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: ST_TO_ADDR
// end ; 1 :
62273: GO 68170
62275: LD_INT 1
62277: DOUBLE
62278: EQUAL
62279: IFTRUE 62283
62281: GO 64906
62283: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62284: LD_ADDR_VAR 0 11
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 3
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 3
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62328: LD_ADDR_VAR 0 12
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 3
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62369: LD_ADDR_VAR 0 13
62373: PUSH
62374: LD_INT 3
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 2
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: LIST
62408: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62409: LD_ADDR_VAR 0 14
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: LD_INT 3
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62450: LD_ADDR_VAR 0 15
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 3
62468: NEG
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 3
62479: NEG
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62494: LD_ADDR_VAR 0 16
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: LD_INT 3
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 3
62513: NEG
62514: PUSH
62515: LD_INT 2
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 3
62525: NEG
62526: PUSH
62527: LD_INT 3
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62540: LD_ADDR_VAR 0 17
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 3
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: LD_INT 3
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62584: LD_ADDR_VAR 0 18
62588: PUSH
62589: LD_INT 2
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62625: LD_ADDR_VAR 0 19
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 3
62642: PUSH
62643: LD_INT 3
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 2
62652: PUSH
62653: LD_INT 3
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62665: LD_ADDR_VAR 0 20
62669: PUSH
62670: LD_INT 1
62672: PUSH
62673: LD_INT 3
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: LD_INT 3
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62706: LD_ADDR_VAR 0 21
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: NEG
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62750: LD_ADDR_VAR 0 22
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: LD_INT 3
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 3
62769: NEG
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 3
62781: NEG
62782: PUSH
62783: LD_INT 3
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: LIST
62795: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62796: LD_ADDR_VAR 0 23
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 3
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 4
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62840: LD_ADDR_VAR 0 24
62844: PUSH
62845: LD_INT 3
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 3
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 4
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: LIST
62880: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62881: LD_ADDR_VAR 0 25
62885: PUSH
62886: LD_INT 3
62888: PUSH
62889: LD_INT 3
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 4
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: LD_INT 4
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62921: LD_ADDR_VAR 0 26
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 3
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: LD_INT 4
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: LD_INT 3
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62962: LD_ADDR_VAR 0 27
62966: PUSH
62967: LD_INT 3
62969: NEG
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 3
62980: NEG
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 4
62991: NEG
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: LIST
63005: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63006: LD_ADDR_VAR 0 28
63010: PUSH
63011: LD_INT 3
63013: NEG
63014: PUSH
63015: LD_INT 3
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 3
63025: NEG
63026: PUSH
63027: LD_INT 4
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 4
63037: NEG
63038: PUSH
63039: LD_INT 3
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: LIST
63051: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63052: LD_ADDR_VAR 0 29
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: LD_INT 3
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 3
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 4
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 4
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: LD_INT 3
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 5
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 5
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 4
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 6
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 6
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 5
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63207: LD_ADDR_VAR 0 30
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 3
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 3
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 3
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 4
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 4
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 4
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 5
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 5
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 5
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 6
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 6
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63350: LD_ADDR_VAR 0 31
63354: PUSH
63355: LD_INT 3
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 3
63367: PUSH
63368: LD_INT 3
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 2
63377: PUSH
63378: LD_INT 3
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 4
63387: PUSH
63388: LD_INT 3
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 4
63397: PUSH
63398: LD_INT 4
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 3
63407: PUSH
63408: LD_INT 4
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 5
63417: PUSH
63418: LD_INT 4
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 5
63427: PUSH
63428: LD_INT 5
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 4
63437: PUSH
63438: LD_INT 5
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 6
63447: PUSH
63448: LD_INT 5
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 6
63457: PUSH
63458: LD_INT 6
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 5
63467: PUSH
63468: LD_INT 6
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63489: LD_ADDR_VAR 0 32
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 3
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: LD_INT 2
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: LD_INT 4
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 4
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: LD_INT 3
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: LD_INT 5
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 5
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 4
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: LD_INT 6
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: LD_INT 6
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: LD_INT 5
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63632: LD_ADDR_VAR 0 33
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 3
63650: NEG
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 3
63661: NEG
63662: PUSH
63663: LD_INT 1
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 3
63673: NEG
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 4
63684: NEG
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 4
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 4
63707: NEG
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 5
63718: NEG
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 5
63729: NEG
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 5
63741: NEG
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 6
63752: NEG
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 6
63763: NEG
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63787: LD_ADDR_VAR 0 34
63791: PUSH
63792: LD_INT 2
63794: NEG
63795: PUSH
63796: LD_INT 3
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 3
63818: NEG
63819: PUSH
63820: LD_INT 3
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: LD_INT 4
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 4
63842: NEG
63843: PUSH
63844: LD_INT 3
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 4
63854: NEG
63855: PUSH
63856: LD_INT 4
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 4
63866: NEG
63867: PUSH
63868: LD_INT 5
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 5
63878: NEG
63879: PUSH
63880: LD_INT 4
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 5
63890: NEG
63891: PUSH
63892: LD_INT 5
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 5
63902: NEG
63903: PUSH
63904: LD_INT 6
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 6
63914: NEG
63915: PUSH
63916: LD_INT 5
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 6
63926: NEG
63927: PUSH
63928: LD_INT 6
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63950: LD_ADDR_VAR 0 41
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 2
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: LIST
63993: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63994: LD_ADDR_VAR 0 42
63998: PUSH
63999: LD_INT 2
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 3
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: LIST
64034: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64035: LD_ADDR_VAR 0 43
64039: PUSH
64040: LD_INT 2
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 3
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64075: LD_ADDR_VAR 0 44
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 2
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 3
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64116: LD_ADDR_VAR 0 45
64120: PUSH
64121: LD_INT 2
64123: NEG
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 2
64134: NEG
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 3
64145: NEG
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64160: LD_ADDR_VAR 0 46
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: LD_INT 2
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: NEG
64180: PUSH
64181: LD_INT 3
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 3
64191: NEG
64192: PUSH
64193: LD_INT 2
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: LIST
64205: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64206: LD_ADDR_VAR 0 47
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: LD_INT 3
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: LD_INT 3
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64239: LD_ADDR_VAR 0 48
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: LD_INT 2
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64270: LD_ADDR_VAR 0 49
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 3
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64299: LD_ADDR_VAR 0 50
64303: PUSH
64304: LD_INT 2
64306: PUSH
64307: LD_INT 3
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64328: LD_ADDR_VAR 0 51
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: NEG
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64359: LD_ADDR_VAR 0 52
64363: PUSH
64364: LD_INT 3
64366: NEG
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: NEG
64379: PUSH
64380: LD_INT 2
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64392: LD_ADDR_VAR 0 53
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: LD_INT 3
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: LD_INT 3
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: LIST
64435: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64436: LD_ADDR_VAR 0 54
64440: PUSH
64441: LD_INT 2
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 3
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: LD_INT 1
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64477: LD_ADDR_VAR 0 55
64481: PUSH
64482: LD_INT 3
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 3
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: LD_INT 3
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64517: LD_ADDR_VAR 0 56
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 3
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: LIST
64557: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64558: LD_ADDR_VAR 0 57
64562: PUSH
64563: LD_INT 2
64565: NEG
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 3
64576: NEG
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 3
64587: NEG
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64602: LD_ADDR_VAR 0 58
64606: PUSH
64607: LD_INT 2
64609: NEG
64610: PUSH
64611: LD_INT 3
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: LD_INT 2
64625: NEG
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 3
64633: NEG
64634: PUSH
64635: LD_INT 3
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: LIST
64647: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64648: LD_ADDR_VAR 0 59
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: LIST
64691: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64692: LD_ADDR_VAR 0 60
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 2
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 2
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64733: LD_ADDR_VAR 0 61
64737: PUSH
64738: LD_INT 2
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 2
64750: PUSH
64751: LD_INT 2
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: LD_INT 2
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64773: LD_ADDR_VAR 0 62
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: LD_INT 2
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 1
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: LIST
64813: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64814: LD_ADDR_VAR 0 63
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 2
64843: NEG
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: LIST
64857: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64858: LD_ADDR_VAR 0 64
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 2
64877: NEG
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 2
64889: NEG
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: LIST
64903: ST_TO_ADDR
// end ; 2 :
64904: GO 68170
64906: LD_INT 2
64908: DOUBLE
64909: EQUAL
64910: IFTRUE 64914
64912: GO 68169
64914: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64915: LD_ADDR_VAR 0 29
64919: PUSH
64920: LD_INT 4
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 4
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 5
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 5
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 4
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 3
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 3
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 3
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 5
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: PUSH
65016: LD_INT 3
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 3
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 4
65035: PUSH
65036: LD_INT 3
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 4
65045: PUSH
65046: LD_INT 4
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 3
65055: PUSH
65056: LD_INT 4
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: LD_INT 3
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: LD_INT 2
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 4
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: LD_INT 4
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: LD_INT 4
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: LD_INT 3
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 4
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: LD_INT 5
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: LD_INT 5
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 1
65155: NEG
65156: PUSH
65157: LD_INT 4
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 1
65166: NEG
65167: PUSH
65168: LD_INT 3
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: LD_INT 5
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 2
65187: NEG
65188: PUSH
65189: LD_INT 3
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 3
65198: NEG
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 3
65209: NEG
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 2
65232: NEG
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 3
65243: NEG
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 4
65254: NEG
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 4
65265: NEG
65266: PUSH
65267: LD_INT 1
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 4
65277: NEG
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PUSH
65291: LD_INT 2
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 4
65300: NEG
65301: PUSH
65302: LD_INT 4
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 4
65312: NEG
65313: PUSH
65314: LD_INT 5
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 3
65324: NEG
65325: PUSH
65326: LD_INT 4
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 3
65336: NEG
65337: PUSH
65338: LD_INT 3
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 4
65348: NEG
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 5
65360: NEG
65361: PUSH
65362: LD_INT 4
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 5
65372: NEG
65373: PUSH
65374: LD_INT 5
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 3
65384: NEG
65385: PUSH
65386: LD_INT 5
65388: NEG
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 5
65396: NEG
65397: PUSH
65398: LD_INT 3
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65453: LD_ADDR_VAR 0 30
65457: PUSH
65458: LD_INT 4
65460: PUSH
65461: LD_INT 4
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 4
65470: PUSH
65471: LD_INT 3
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 5
65480: PUSH
65481: LD_INT 4
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 5
65490: PUSH
65491: LD_INT 5
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 4
65500: PUSH
65501: LD_INT 5
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: LD_INT 4
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 3
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 5
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 3
65540: PUSH
65541: LD_INT 5
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: LD_INT 3
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: PUSH
65581: LD_INT 4
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: LD_INT 4
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: LD_INT 3
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: LD_INT 2
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: LD_INT 4
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 4
65643: NEG
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 4
65654: NEG
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 3
65677: NEG
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 4
65688: NEG
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 5
65699: NEG
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 5
65710: NEG
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 5
65722: NEG
65723: PUSH
65724: LD_INT 2
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 3
65734: NEG
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 3
65745: NEG
65746: PUSH
65747: LD_INT 3
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 3
65757: NEG
65758: PUSH
65759: LD_INT 4
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 2
65769: NEG
65770: PUSH
65771: LD_INT 3
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 2
65781: NEG
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 3
65793: NEG
65794: PUSH
65795: LD_INT 2
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 4
65805: NEG
65806: PUSH
65807: LD_INT 3
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 4
65817: NEG
65818: PUSH
65819: LD_INT 4
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 2
65829: NEG
65830: PUSH
65831: LD_INT 4
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 4
65841: NEG
65842: PUSH
65843: LD_INT 2
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 4
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 5
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: LD_INT 4
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: LD_INT 3
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: LD_INT 3
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: LD_INT 4
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: LD_INT 5
65924: NEG
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 2
65932: PUSH
65933: LD_INT 3
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 2
65943: NEG
65944: PUSH
65945: LD_INT 5
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66000: LD_ADDR_VAR 0 31
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: LD_INT 4
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 3
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: LD_INT 4
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: LD_INT 5
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: LD_INT 5
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: LD_INT 4
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: LD_INT 3
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 2
66079: PUSH
66080: LD_INT 5
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 2
66089: NEG
66090: PUSH
66091: LD_INT 3
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 3
66100: NEG
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 2
66123: NEG
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 2
66134: NEG
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 3
66145: NEG
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 4
66156: NEG
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 4
66167: NEG
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 4
66179: NEG
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 2
66191: NEG
66192: PUSH
66193: LD_INT 2
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 4
66202: NEG
66203: PUSH
66204: LD_INT 4
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 4
66214: NEG
66215: PUSH
66216: LD_INT 5
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 3
66226: NEG
66227: PUSH
66228: LD_INT 4
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 3
66238: NEG
66239: PUSH
66240: LD_INT 3
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 4
66250: NEG
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 5
66262: NEG
66263: PUSH
66264: LD_INT 4
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 5
66274: NEG
66275: PUSH
66276: LD_INT 5
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 3
66286: NEG
66287: PUSH
66288: LD_INT 5
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 5
66298: NEG
66299: PUSH
66300: LD_INT 3
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 3
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: LD_INT 4
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: LD_INT 3
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 2
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 2
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: NEG
66366: PUSH
66367: LD_INT 3
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: LD_INT 4
66381: NEG
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 4
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 4
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 4
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 5
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 5
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 4
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 3
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 3
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: LD_INT 2
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 5
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66550: LD_ADDR_VAR 0 32
66554: PUSH
66555: LD_INT 4
66557: NEG
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 4
66568: NEG
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 4
66602: NEG
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 5
66613: NEG
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 5
66624: NEG
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 5
66636: NEG
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 3
66648: NEG
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 3
66659: NEG
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 3
66671: NEG
66672: PUSH
66673: LD_INT 4
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 2
66683: NEG
66684: PUSH
66685: LD_INT 3
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 2
66695: NEG
66696: PUSH
66697: LD_INT 2
66699: NEG
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 3
66707: NEG
66708: PUSH
66709: LD_INT 2
66711: NEG
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 4
66719: NEG
66720: PUSH
66721: LD_INT 3
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 4
66731: NEG
66732: PUSH
66733: LD_INT 4
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 2
66743: NEG
66744: PUSH
66745: LD_INT 4
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 4
66755: NEG
66756: PUSH
66757: LD_INT 2
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: LD_INT 4
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 0
66778: PUSH
66779: LD_INT 5
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: LD_INT 4
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: LD_INT 3
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: LD_INT 3
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: LD_INT 4
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 1
66834: NEG
66835: PUSH
66836: LD_INT 5
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 2
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 2
66857: NEG
66858: PUSH
66859: LD_INT 5
66861: NEG
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 3
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 3
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 4
66890: PUSH
66891: LD_INT 0
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 4
66900: PUSH
66901: LD_INT 1
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 3
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 2
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 2
66930: PUSH
66931: LD_INT 1
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: LD_INT 2
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 4
66952: PUSH
66953: LD_INT 2
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 4
66962: PUSH
66963: LD_INT 4
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 4
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 5
66982: PUSH
66983: LD_INT 4
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 5
66992: PUSH
66993: LD_INT 5
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 4
67002: PUSH
67003: LD_INT 5
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 3
67012: PUSH
67013: LD_INT 4
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 3
67022: PUSH
67023: LD_INT 3
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 5
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 3
67042: PUSH
67043: LD_INT 5
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67097: LD_ADDR_VAR 0 33
67101: PUSH
67102: LD_INT 4
67104: NEG
67105: PUSH
67106: LD_INT 4
67108: NEG
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 4
67116: NEG
67117: PUSH
67118: LD_INT 5
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 3
67128: NEG
67129: PUSH
67130: LD_INT 4
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 3
67140: NEG
67141: PUSH
67142: LD_INT 3
67144: NEG
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 4
67152: NEG
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 5
67164: NEG
67165: PUSH
67166: LD_INT 4
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 5
67176: NEG
67177: PUSH
67178: LD_INT 5
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 3
67188: NEG
67189: PUSH
67190: LD_INT 5
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 5
67200: NEG
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: LD_INT 3
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: LD_INT 4
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: PUSH
67235: LD_INT 3
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: LD_INT 2
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 0
67256: PUSH
67257: LD_INT 2
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: LD_INT 3
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: LD_INT 4
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 2
67291: PUSH
67292: LD_INT 2
67294: NEG
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 2
67302: NEG
67303: PUSH
67304: LD_INT 4
67306: NEG
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 4
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 4
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 5
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 5
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 4
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 3
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 3
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 3
67386: PUSH
67387: LD_INT 2
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 5
67397: PUSH
67398: LD_INT 2
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 3
67407: PUSH
67408: LD_INT 3
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 3
67417: PUSH
67418: LD_INT 2
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 4
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 4
67437: PUSH
67438: LD_INT 4
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 3
67447: PUSH
67448: LD_INT 4
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: LD_INT 3
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: LD_INT 2
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 4
67477: PUSH
67478: LD_INT 2
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 2
67487: PUSH
67488: LD_INT 4
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: LD_INT 4
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 3
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 1
67517: PUSH
67518: LD_INT 4
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: LD_INT 5
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: LD_INT 5
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 1
67547: NEG
67548: PUSH
67549: LD_INT 4
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 1
67558: NEG
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 2
67569: PUSH
67570: LD_INT 5
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 2
67579: NEG
67580: PUSH
67581: LD_INT 3
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67635: LD_ADDR_VAR 0 34
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: LD_INT 4
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: LD_INT 5
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: LD_INT 4
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: LD_INT 3
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: LD_INT 3
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: NEG
67698: PUSH
67699: LD_INT 4
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: NEG
67710: PUSH
67711: LD_INT 5
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 2
67721: PUSH
67722: LD_INT 3
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 2
67732: NEG
67733: PUSH
67734: LD_INT 5
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: LD_INT 0
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 3
67754: PUSH
67755: LD_INT 1
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 4
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 4
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: LD_INT 1
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 2
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 2
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 2
67816: PUSH
67817: LD_INT 2
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 4
67827: PUSH
67828: LD_INT 2
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 4
67837: PUSH
67838: LD_INT 4
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: LD_INT 3
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 5
67857: PUSH
67858: LD_INT 4
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 5
67867: PUSH
67868: LD_INT 5
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 4
67877: PUSH
67878: LD_INT 5
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 3
67887: PUSH
67888: LD_INT 4
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 3
67897: PUSH
67898: LD_INT 3
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 5
67907: PUSH
67908: LD_INT 3
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 3
67917: PUSH
67918: LD_INT 5
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: LD_INT 3
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: LD_INT 2
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 1
67947: PUSH
67948: LD_INT 3
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: PUSH
67958: LD_INT 4
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: LD_INT 4
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: PUSH
67979: LD_INT 3
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: LD_INT 2
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: LD_INT 4
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 2
68009: NEG
68010: PUSH
68011: LD_INT 2
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 4
68020: NEG
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 4
68031: NEG
68032: PUSH
68033: LD_INT 1
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: NEG
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 4
68065: NEG
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 5
68076: NEG
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 5
68087: NEG
68088: PUSH
68089: LD_INT 1
68091: NEG
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 5
68099: NEG
68100: PUSH
68101: LD_INT 2
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 3
68111: NEG
68112: PUSH
68113: LD_INT 2
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: ST_TO_ADDR
// end ; end ;
68167: GO 68170
68169: POP
// case btype of b_depot , b_warehouse :
68170: LD_VAR 0 1
68174: PUSH
68175: LD_INT 0
68177: DOUBLE
68178: EQUAL
68179: IFTRUE 68189
68181: LD_INT 1
68183: DOUBLE
68184: EQUAL
68185: IFTRUE 68189
68187: GO 68390
68189: POP
// case nation of nation_american :
68190: LD_VAR 0 5
68194: PUSH
68195: LD_INT 1
68197: DOUBLE
68198: EQUAL
68199: IFTRUE 68203
68201: GO 68259
68203: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68204: LD_ADDR_VAR 0 9
68208: PUSH
68209: LD_VAR 0 11
68213: PUSH
68214: LD_VAR 0 12
68218: PUSH
68219: LD_VAR 0 13
68223: PUSH
68224: LD_VAR 0 14
68228: PUSH
68229: LD_VAR 0 15
68233: PUSH
68234: LD_VAR 0 16
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: PUSH
68247: LD_VAR 0 4
68251: PUSH
68252: LD_INT 1
68254: PLUS
68255: ARRAY
68256: ST_TO_ADDR
68257: GO 68388
68259: LD_INT 2
68261: DOUBLE
68262: EQUAL
68263: IFTRUE 68267
68265: GO 68323
68267: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68268: LD_ADDR_VAR 0 9
68272: PUSH
68273: LD_VAR 0 17
68277: PUSH
68278: LD_VAR 0 18
68282: PUSH
68283: LD_VAR 0 19
68287: PUSH
68288: LD_VAR 0 20
68292: PUSH
68293: LD_VAR 0 21
68297: PUSH
68298: LD_VAR 0 22
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: PUSH
68311: LD_VAR 0 4
68315: PUSH
68316: LD_INT 1
68318: PLUS
68319: ARRAY
68320: ST_TO_ADDR
68321: GO 68388
68323: LD_INT 3
68325: DOUBLE
68326: EQUAL
68327: IFTRUE 68331
68329: GO 68387
68331: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68332: LD_ADDR_VAR 0 9
68336: PUSH
68337: LD_VAR 0 23
68341: PUSH
68342: LD_VAR 0 24
68346: PUSH
68347: LD_VAR 0 25
68351: PUSH
68352: LD_VAR 0 26
68356: PUSH
68357: LD_VAR 0 27
68361: PUSH
68362: LD_VAR 0 28
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: PUSH
68375: LD_VAR 0 4
68379: PUSH
68380: LD_INT 1
68382: PLUS
68383: ARRAY
68384: ST_TO_ADDR
68385: GO 68388
68387: POP
68388: GO 68943
68390: LD_INT 2
68392: DOUBLE
68393: EQUAL
68394: IFTRUE 68404
68396: LD_INT 3
68398: DOUBLE
68399: EQUAL
68400: IFTRUE 68404
68402: GO 68460
68404: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68405: LD_ADDR_VAR 0 9
68409: PUSH
68410: LD_VAR 0 29
68414: PUSH
68415: LD_VAR 0 30
68419: PUSH
68420: LD_VAR 0 31
68424: PUSH
68425: LD_VAR 0 32
68429: PUSH
68430: LD_VAR 0 33
68434: PUSH
68435: LD_VAR 0 34
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: PUSH
68448: LD_VAR 0 4
68452: PUSH
68453: LD_INT 1
68455: PLUS
68456: ARRAY
68457: ST_TO_ADDR
68458: GO 68943
68460: LD_INT 16
68462: DOUBLE
68463: EQUAL
68464: IFTRUE 68522
68466: LD_INT 17
68468: DOUBLE
68469: EQUAL
68470: IFTRUE 68522
68472: LD_INT 18
68474: DOUBLE
68475: EQUAL
68476: IFTRUE 68522
68478: LD_INT 19
68480: DOUBLE
68481: EQUAL
68482: IFTRUE 68522
68484: LD_INT 22
68486: DOUBLE
68487: EQUAL
68488: IFTRUE 68522
68490: LD_INT 20
68492: DOUBLE
68493: EQUAL
68494: IFTRUE 68522
68496: LD_INT 21
68498: DOUBLE
68499: EQUAL
68500: IFTRUE 68522
68502: LD_INT 23
68504: DOUBLE
68505: EQUAL
68506: IFTRUE 68522
68508: LD_INT 24
68510: DOUBLE
68511: EQUAL
68512: IFTRUE 68522
68514: LD_INT 25
68516: DOUBLE
68517: EQUAL
68518: IFTRUE 68522
68520: GO 68578
68522: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68523: LD_ADDR_VAR 0 9
68527: PUSH
68528: LD_VAR 0 35
68532: PUSH
68533: LD_VAR 0 36
68537: PUSH
68538: LD_VAR 0 37
68542: PUSH
68543: LD_VAR 0 38
68547: PUSH
68548: LD_VAR 0 39
68552: PUSH
68553: LD_VAR 0 40
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: PUSH
68566: LD_VAR 0 4
68570: PUSH
68571: LD_INT 1
68573: PLUS
68574: ARRAY
68575: ST_TO_ADDR
68576: GO 68943
68578: LD_INT 6
68580: DOUBLE
68581: EQUAL
68582: IFTRUE 68634
68584: LD_INT 7
68586: DOUBLE
68587: EQUAL
68588: IFTRUE 68634
68590: LD_INT 8
68592: DOUBLE
68593: EQUAL
68594: IFTRUE 68634
68596: LD_INT 13
68598: DOUBLE
68599: EQUAL
68600: IFTRUE 68634
68602: LD_INT 12
68604: DOUBLE
68605: EQUAL
68606: IFTRUE 68634
68608: LD_INT 15
68610: DOUBLE
68611: EQUAL
68612: IFTRUE 68634
68614: LD_INT 11
68616: DOUBLE
68617: EQUAL
68618: IFTRUE 68634
68620: LD_INT 14
68622: DOUBLE
68623: EQUAL
68624: IFTRUE 68634
68626: LD_INT 10
68628: DOUBLE
68629: EQUAL
68630: IFTRUE 68634
68632: GO 68690
68634: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68635: LD_ADDR_VAR 0 9
68639: PUSH
68640: LD_VAR 0 41
68644: PUSH
68645: LD_VAR 0 42
68649: PUSH
68650: LD_VAR 0 43
68654: PUSH
68655: LD_VAR 0 44
68659: PUSH
68660: LD_VAR 0 45
68664: PUSH
68665: LD_VAR 0 46
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: PUSH
68678: LD_VAR 0 4
68682: PUSH
68683: LD_INT 1
68685: PLUS
68686: ARRAY
68687: ST_TO_ADDR
68688: GO 68943
68690: LD_INT 36
68692: DOUBLE
68693: EQUAL
68694: IFTRUE 68698
68696: GO 68754
68698: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68699: LD_ADDR_VAR 0 9
68703: PUSH
68704: LD_VAR 0 47
68708: PUSH
68709: LD_VAR 0 48
68713: PUSH
68714: LD_VAR 0 49
68718: PUSH
68719: LD_VAR 0 50
68723: PUSH
68724: LD_VAR 0 51
68728: PUSH
68729: LD_VAR 0 52
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: PUSH
68742: LD_VAR 0 4
68746: PUSH
68747: LD_INT 1
68749: PLUS
68750: ARRAY
68751: ST_TO_ADDR
68752: GO 68943
68754: LD_INT 4
68756: DOUBLE
68757: EQUAL
68758: IFTRUE 68780
68760: LD_INT 5
68762: DOUBLE
68763: EQUAL
68764: IFTRUE 68780
68766: LD_INT 34
68768: DOUBLE
68769: EQUAL
68770: IFTRUE 68780
68772: LD_INT 37
68774: DOUBLE
68775: EQUAL
68776: IFTRUE 68780
68778: GO 68836
68780: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68781: LD_ADDR_VAR 0 9
68785: PUSH
68786: LD_VAR 0 53
68790: PUSH
68791: LD_VAR 0 54
68795: PUSH
68796: LD_VAR 0 55
68800: PUSH
68801: LD_VAR 0 56
68805: PUSH
68806: LD_VAR 0 57
68810: PUSH
68811: LD_VAR 0 58
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: PUSH
68824: LD_VAR 0 4
68828: PUSH
68829: LD_INT 1
68831: PLUS
68832: ARRAY
68833: ST_TO_ADDR
68834: GO 68943
68836: LD_INT 31
68838: DOUBLE
68839: EQUAL
68840: IFTRUE 68886
68842: LD_INT 32
68844: DOUBLE
68845: EQUAL
68846: IFTRUE 68886
68848: LD_INT 33
68850: DOUBLE
68851: EQUAL
68852: IFTRUE 68886
68854: LD_INT 27
68856: DOUBLE
68857: EQUAL
68858: IFTRUE 68886
68860: LD_INT 26
68862: DOUBLE
68863: EQUAL
68864: IFTRUE 68886
68866: LD_INT 28
68868: DOUBLE
68869: EQUAL
68870: IFTRUE 68886
68872: LD_INT 29
68874: DOUBLE
68875: EQUAL
68876: IFTRUE 68886
68878: LD_INT 30
68880: DOUBLE
68881: EQUAL
68882: IFTRUE 68886
68884: GO 68942
68886: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68887: LD_ADDR_VAR 0 9
68891: PUSH
68892: LD_VAR 0 59
68896: PUSH
68897: LD_VAR 0 60
68901: PUSH
68902: LD_VAR 0 61
68906: PUSH
68907: LD_VAR 0 62
68911: PUSH
68912: LD_VAR 0 63
68916: PUSH
68917: LD_VAR 0 64
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: PUSH
68930: LD_VAR 0 4
68934: PUSH
68935: LD_INT 1
68937: PLUS
68938: ARRAY
68939: ST_TO_ADDR
68940: GO 68943
68942: POP
// temp_list2 = [ ] ;
68943: LD_ADDR_VAR 0 10
68947: PUSH
68948: EMPTY
68949: ST_TO_ADDR
// for i in temp_list do
68950: LD_ADDR_VAR 0 8
68954: PUSH
68955: LD_VAR 0 9
68959: PUSH
68960: FOR_IN
68961: IFFALSE 69013
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68963: LD_ADDR_VAR 0 10
68967: PUSH
68968: LD_VAR 0 10
68972: PUSH
68973: LD_VAR 0 8
68977: PUSH
68978: LD_INT 1
68980: ARRAY
68981: PUSH
68982: LD_VAR 0 2
68986: PLUS
68987: PUSH
68988: LD_VAR 0 8
68992: PUSH
68993: LD_INT 2
68995: ARRAY
68996: PUSH
68997: LD_VAR 0 3
69001: PLUS
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: EMPTY
69008: LIST
69009: ADD
69010: ST_TO_ADDR
69011: GO 68960
69013: POP
69014: POP
// result = temp_list2 ;
69015: LD_ADDR_VAR 0 7
69019: PUSH
69020: LD_VAR 0 10
69024: ST_TO_ADDR
// end ;
69025: LD_VAR 0 7
69029: RET
// export function EnemyInRange ( unit , dist ) ; begin
69030: LD_INT 0
69032: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69033: LD_ADDR_VAR 0 3
69037: PUSH
69038: LD_VAR 0 1
69042: PPUSH
69043: CALL_OW 255
69047: PPUSH
69048: LD_VAR 0 1
69052: PPUSH
69053: CALL_OW 250
69057: PPUSH
69058: LD_VAR 0 1
69062: PPUSH
69063: CALL_OW 251
69067: PPUSH
69068: LD_VAR 0 2
69072: PPUSH
69073: CALL 42426 0 4
69077: PUSH
69078: LD_INT 4
69080: ARRAY
69081: ST_TO_ADDR
// end ;
69082: LD_VAR 0 3
69086: RET
// export function PlayerSeeMe ( unit ) ; begin
69087: LD_INT 0
69089: PPUSH
// result := See ( your_side , unit ) ;
69090: LD_ADDR_VAR 0 2
69094: PUSH
69095: LD_OWVAR 2
69099: PPUSH
69100: LD_VAR 0 1
69104: PPUSH
69105: CALL_OW 292
69109: ST_TO_ADDR
// end ;
69110: LD_VAR 0 2
69114: RET
// export function ReverseDir ( unit ) ; begin
69115: LD_INT 0
69117: PPUSH
// if not unit then
69118: LD_VAR 0 1
69122: NOT
69123: IFFALSE 69127
// exit ;
69125: GO 69150
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69127: LD_ADDR_VAR 0 2
69131: PUSH
69132: LD_VAR 0 1
69136: PPUSH
69137: CALL_OW 254
69141: PUSH
69142: LD_INT 3
69144: PLUS
69145: PUSH
69146: LD_INT 6
69148: MOD
69149: ST_TO_ADDR
// end ;
69150: LD_VAR 0 2
69154: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69155: LD_INT 0
69157: PPUSH
69158: PPUSH
69159: PPUSH
69160: PPUSH
69161: PPUSH
// if not hexes then
69162: LD_VAR 0 2
69166: NOT
69167: IFFALSE 69171
// exit ;
69169: GO 69319
// dist := 9999 ;
69171: LD_ADDR_VAR 0 5
69175: PUSH
69176: LD_INT 9999
69178: ST_TO_ADDR
// for i = 1 to hexes do
69179: LD_ADDR_VAR 0 4
69183: PUSH
69184: DOUBLE
69185: LD_INT 1
69187: DEC
69188: ST_TO_ADDR
69189: LD_VAR 0 2
69193: PUSH
69194: FOR_TO
69195: IFFALSE 69307
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69197: LD_VAR 0 1
69201: PPUSH
69202: LD_VAR 0 2
69206: PUSH
69207: LD_VAR 0 4
69211: ARRAY
69212: PUSH
69213: LD_INT 1
69215: ARRAY
69216: PPUSH
69217: LD_VAR 0 2
69221: PUSH
69222: LD_VAR 0 4
69226: ARRAY
69227: PUSH
69228: LD_INT 2
69230: ARRAY
69231: PPUSH
69232: CALL_OW 297
69236: PUSH
69237: LD_VAR 0 5
69241: LESS
69242: IFFALSE 69305
// begin hex := hexes [ i ] ;
69244: LD_ADDR_VAR 0 7
69248: PUSH
69249: LD_VAR 0 2
69253: PUSH
69254: LD_VAR 0 4
69258: ARRAY
69259: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69260: LD_ADDR_VAR 0 5
69264: PUSH
69265: LD_VAR 0 1
69269: PPUSH
69270: LD_VAR 0 2
69274: PUSH
69275: LD_VAR 0 4
69279: ARRAY
69280: PUSH
69281: LD_INT 1
69283: ARRAY
69284: PPUSH
69285: LD_VAR 0 2
69289: PUSH
69290: LD_VAR 0 4
69294: ARRAY
69295: PUSH
69296: LD_INT 2
69298: ARRAY
69299: PPUSH
69300: CALL_OW 297
69304: ST_TO_ADDR
// end ; end ;
69305: GO 69194
69307: POP
69308: POP
// result := hex ;
69309: LD_ADDR_VAR 0 3
69313: PUSH
69314: LD_VAR 0 7
69318: ST_TO_ADDR
// end ;
69319: LD_VAR 0 3
69323: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69324: LD_INT 0
69326: PPUSH
69327: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69328: LD_VAR 0 1
69332: NOT
69333: PUSH
69334: LD_VAR 0 1
69338: PUSH
69339: LD_INT 21
69341: PUSH
69342: LD_INT 2
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 23
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PPUSH
69363: CALL_OW 69
69367: IN
69368: NOT
69369: OR
69370: IFFALSE 69374
// exit ;
69372: GO 69421
// for i = 1 to 3 do
69374: LD_ADDR_VAR 0 3
69378: PUSH
69379: DOUBLE
69380: LD_INT 1
69382: DEC
69383: ST_TO_ADDR
69384: LD_INT 3
69386: PUSH
69387: FOR_TO
69388: IFFALSE 69419
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69390: LD_VAR 0 1
69394: PPUSH
69395: CALL_OW 250
69399: PPUSH
69400: LD_VAR 0 1
69404: PPUSH
69405: CALL_OW 251
69409: PPUSH
69410: LD_INT 1
69412: PPUSH
69413: CALL_OW 453
69417: GO 69387
69419: POP
69420: POP
// end ;
69421: LD_VAR 0 2
69425: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69426: LD_INT 0
69428: PPUSH
69429: PPUSH
69430: PPUSH
69431: PPUSH
69432: PPUSH
69433: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69434: LD_VAR 0 1
69438: NOT
69439: PUSH
69440: LD_VAR 0 2
69444: NOT
69445: OR
69446: PUSH
69447: LD_VAR 0 1
69451: PPUSH
69452: CALL_OW 314
69456: OR
69457: IFFALSE 69461
// exit ;
69459: GO 69902
// x := GetX ( enemy_unit ) ;
69461: LD_ADDR_VAR 0 7
69465: PUSH
69466: LD_VAR 0 2
69470: PPUSH
69471: CALL_OW 250
69475: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69476: LD_ADDR_VAR 0 8
69480: PUSH
69481: LD_VAR 0 2
69485: PPUSH
69486: CALL_OW 251
69490: ST_TO_ADDR
// if not x or not y then
69491: LD_VAR 0 7
69495: NOT
69496: PUSH
69497: LD_VAR 0 8
69501: NOT
69502: OR
69503: IFFALSE 69507
// exit ;
69505: GO 69902
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69507: LD_ADDR_VAR 0 6
69511: PUSH
69512: LD_VAR 0 7
69516: PPUSH
69517: LD_INT 0
69519: PPUSH
69520: LD_INT 4
69522: PPUSH
69523: CALL_OW 272
69527: PUSH
69528: LD_VAR 0 8
69532: PPUSH
69533: LD_INT 0
69535: PPUSH
69536: LD_INT 4
69538: PPUSH
69539: CALL_OW 273
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_VAR 0 7
69552: PPUSH
69553: LD_INT 1
69555: PPUSH
69556: LD_INT 4
69558: PPUSH
69559: CALL_OW 272
69563: PUSH
69564: LD_VAR 0 8
69568: PPUSH
69569: LD_INT 1
69571: PPUSH
69572: LD_INT 4
69574: PPUSH
69575: CALL_OW 273
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_VAR 0 7
69588: PPUSH
69589: LD_INT 2
69591: PPUSH
69592: LD_INT 4
69594: PPUSH
69595: CALL_OW 272
69599: PUSH
69600: LD_VAR 0 8
69604: PPUSH
69605: LD_INT 2
69607: PPUSH
69608: LD_INT 4
69610: PPUSH
69611: CALL_OW 273
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_VAR 0 7
69624: PPUSH
69625: LD_INT 3
69627: PPUSH
69628: LD_INT 4
69630: PPUSH
69631: CALL_OW 272
69635: PUSH
69636: LD_VAR 0 8
69640: PPUSH
69641: LD_INT 3
69643: PPUSH
69644: LD_INT 4
69646: PPUSH
69647: CALL_OW 273
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_VAR 0 7
69660: PPUSH
69661: LD_INT 4
69663: PPUSH
69664: LD_INT 4
69666: PPUSH
69667: CALL_OW 272
69671: PUSH
69672: LD_VAR 0 8
69676: PPUSH
69677: LD_INT 4
69679: PPUSH
69680: LD_INT 4
69682: PPUSH
69683: CALL_OW 273
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_VAR 0 7
69696: PPUSH
69697: LD_INT 5
69699: PPUSH
69700: LD_INT 4
69702: PPUSH
69703: CALL_OW 272
69707: PUSH
69708: LD_VAR 0 8
69712: PPUSH
69713: LD_INT 5
69715: PPUSH
69716: LD_INT 4
69718: PPUSH
69719: CALL_OW 273
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: ST_TO_ADDR
// for i = tmp downto 1 do
69736: LD_ADDR_VAR 0 4
69740: PUSH
69741: DOUBLE
69742: LD_VAR 0 6
69746: INC
69747: ST_TO_ADDR
69748: LD_INT 1
69750: PUSH
69751: FOR_DOWNTO
69752: IFFALSE 69853
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69754: LD_VAR 0 6
69758: PUSH
69759: LD_VAR 0 4
69763: ARRAY
69764: PUSH
69765: LD_INT 1
69767: ARRAY
69768: PPUSH
69769: LD_VAR 0 6
69773: PUSH
69774: LD_VAR 0 4
69778: ARRAY
69779: PUSH
69780: LD_INT 2
69782: ARRAY
69783: PPUSH
69784: CALL_OW 488
69788: NOT
69789: PUSH
69790: LD_VAR 0 6
69794: PUSH
69795: LD_VAR 0 4
69799: ARRAY
69800: PUSH
69801: LD_INT 1
69803: ARRAY
69804: PPUSH
69805: LD_VAR 0 6
69809: PUSH
69810: LD_VAR 0 4
69814: ARRAY
69815: PUSH
69816: LD_INT 2
69818: ARRAY
69819: PPUSH
69820: CALL_OW 428
69824: PUSH
69825: LD_INT 0
69827: NONEQUAL
69828: OR
69829: IFFALSE 69851
// tmp := Delete ( tmp , i ) ;
69831: LD_ADDR_VAR 0 6
69835: PUSH
69836: LD_VAR 0 6
69840: PPUSH
69841: LD_VAR 0 4
69845: PPUSH
69846: CALL_OW 3
69850: ST_TO_ADDR
69851: GO 69751
69853: POP
69854: POP
// j := GetClosestHex ( unit , tmp ) ;
69855: LD_ADDR_VAR 0 5
69859: PUSH
69860: LD_VAR 0 1
69864: PPUSH
69865: LD_VAR 0 6
69869: PPUSH
69870: CALL 69155 0 2
69874: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69875: LD_VAR 0 1
69879: PPUSH
69880: LD_VAR 0 5
69884: PUSH
69885: LD_INT 1
69887: ARRAY
69888: PPUSH
69889: LD_VAR 0 5
69893: PUSH
69894: LD_INT 2
69896: ARRAY
69897: PPUSH
69898: CALL_OW 111
// end ;
69902: LD_VAR 0 3
69906: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69907: LD_INT 0
69909: PPUSH
69910: PPUSH
69911: PPUSH
// uc_side = 0 ;
69912: LD_ADDR_OWVAR 20
69916: PUSH
69917: LD_INT 0
69919: ST_TO_ADDR
// uc_nation = 0 ;
69920: LD_ADDR_OWVAR 21
69924: PUSH
69925: LD_INT 0
69927: ST_TO_ADDR
// InitHc_All ( ) ;
69928: CALL_OW 584
// InitVc ;
69932: CALL_OW 20
// if mastodonts then
69936: LD_VAR 0 6
69940: IFFALSE 70007
// for i = 1 to mastodonts do
69942: LD_ADDR_VAR 0 11
69946: PUSH
69947: DOUBLE
69948: LD_INT 1
69950: DEC
69951: ST_TO_ADDR
69952: LD_VAR 0 6
69956: PUSH
69957: FOR_TO
69958: IFFALSE 70005
// begin vc_chassis := 31 ;
69960: LD_ADDR_OWVAR 37
69964: PUSH
69965: LD_INT 31
69967: ST_TO_ADDR
// vc_control := control_rider ;
69968: LD_ADDR_OWVAR 38
69972: PUSH
69973: LD_INT 4
69975: ST_TO_ADDR
// animal := CreateVehicle ;
69976: LD_ADDR_VAR 0 12
69980: PUSH
69981: CALL_OW 45
69985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69986: LD_VAR 0 12
69990: PPUSH
69991: LD_VAR 0 8
69995: PPUSH
69996: LD_INT 0
69998: PPUSH
69999: CALL 72195 0 3
// end ;
70003: GO 69957
70005: POP
70006: POP
// if horses then
70007: LD_VAR 0 5
70011: IFFALSE 70078
// for i = 1 to horses do
70013: LD_ADDR_VAR 0 11
70017: PUSH
70018: DOUBLE
70019: LD_INT 1
70021: DEC
70022: ST_TO_ADDR
70023: LD_VAR 0 5
70027: PUSH
70028: FOR_TO
70029: IFFALSE 70076
// begin hc_class := 21 ;
70031: LD_ADDR_OWVAR 28
70035: PUSH
70036: LD_INT 21
70038: ST_TO_ADDR
// hc_gallery :=  ;
70039: LD_ADDR_OWVAR 33
70043: PUSH
70044: LD_STRING 
70046: ST_TO_ADDR
// animal := CreateHuman ;
70047: LD_ADDR_VAR 0 12
70051: PUSH
70052: CALL_OW 44
70056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70057: LD_VAR 0 12
70061: PPUSH
70062: LD_VAR 0 8
70066: PPUSH
70067: LD_INT 0
70069: PPUSH
70070: CALL 72195 0 3
// end ;
70074: GO 70028
70076: POP
70077: POP
// if birds then
70078: LD_VAR 0 1
70082: IFFALSE 70149
// for i = 1 to birds do
70084: LD_ADDR_VAR 0 11
70088: PUSH
70089: DOUBLE
70090: LD_INT 1
70092: DEC
70093: ST_TO_ADDR
70094: LD_VAR 0 1
70098: PUSH
70099: FOR_TO
70100: IFFALSE 70147
// begin hc_class = 18 ;
70102: LD_ADDR_OWVAR 28
70106: PUSH
70107: LD_INT 18
70109: ST_TO_ADDR
// hc_gallery =  ;
70110: LD_ADDR_OWVAR 33
70114: PUSH
70115: LD_STRING 
70117: ST_TO_ADDR
// animal := CreateHuman ;
70118: LD_ADDR_VAR 0 12
70122: PUSH
70123: CALL_OW 44
70127: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70128: LD_VAR 0 12
70132: PPUSH
70133: LD_VAR 0 8
70137: PPUSH
70138: LD_INT 0
70140: PPUSH
70141: CALL 72195 0 3
// end ;
70145: GO 70099
70147: POP
70148: POP
// if tigers then
70149: LD_VAR 0 2
70153: IFFALSE 70237
// for i = 1 to tigers do
70155: LD_ADDR_VAR 0 11
70159: PUSH
70160: DOUBLE
70161: LD_INT 1
70163: DEC
70164: ST_TO_ADDR
70165: LD_VAR 0 2
70169: PUSH
70170: FOR_TO
70171: IFFALSE 70235
// begin hc_class = class_tiger ;
70173: LD_ADDR_OWVAR 28
70177: PUSH
70178: LD_INT 14
70180: ST_TO_ADDR
// hc_gallery =  ;
70181: LD_ADDR_OWVAR 33
70185: PUSH
70186: LD_STRING 
70188: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70189: LD_ADDR_OWVAR 35
70193: PUSH
70194: LD_INT 7
70196: NEG
70197: PPUSH
70198: LD_INT 7
70200: PPUSH
70201: CALL_OW 12
70205: ST_TO_ADDR
// animal := CreateHuman ;
70206: LD_ADDR_VAR 0 12
70210: PUSH
70211: CALL_OW 44
70215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70216: LD_VAR 0 12
70220: PPUSH
70221: LD_VAR 0 8
70225: PPUSH
70226: LD_INT 0
70228: PPUSH
70229: CALL 72195 0 3
// end ;
70233: GO 70170
70235: POP
70236: POP
// if apemans then
70237: LD_VAR 0 3
70241: IFFALSE 70364
// for i = 1 to apemans do
70243: LD_ADDR_VAR 0 11
70247: PUSH
70248: DOUBLE
70249: LD_INT 1
70251: DEC
70252: ST_TO_ADDR
70253: LD_VAR 0 3
70257: PUSH
70258: FOR_TO
70259: IFFALSE 70362
// begin hc_class = class_apeman ;
70261: LD_ADDR_OWVAR 28
70265: PUSH
70266: LD_INT 12
70268: ST_TO_ADDR
// hc_gallery =  ;
70269: LD_ADDR_OWVAR 33
70273: PUSH
70274: LD_STRING 
70276: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70277: LD_ADDR_OWVAR 35
70281: PUSH
70282: LD_INT 2
70284: NEG
70285: PPUSH
70286: LD_INT 2
70288: PPUSH
70289: CALL_OW 12
70293: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70294: LD_ADDR_OWVAR 31
70298: PUSH
70299: LD_INT 1
70301: PPUSH
70302: LD_INT 3
70304: PPUSH
70305: CALL_OW 12
70309: PUSH
70310: LD_INT 1
70312: PPUSH
70313: LD_INT 3
70315: PPUSH
70316: CALL_OW 12
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: LD_INT 0
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: ST_TO_ADDR
// animal := CreateHuman ;
70333: LD_ADDR_VAR 0 12
70337: PUSH
70338: CALL_OW 44
70342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70343: LD_VAR 0 12
70347: PPUSH
70348: LD_VAR 0 8
70352: PPUSH
70353: LD_INT 0
70355: PPUSH
70356: CALL 72195 0 3
// end ;
70360: GO 70258
70362: POP
70363: POP
// if enchidnas then
70364: LD_VAR 0 4
70368: IFFALSE 70435
// for i = 1 to enchidnas do
70370: LD_ADDR_VAR 0 11
70374: PUSH
70375: DOUBLE
70376: LD_INT 1
70378: DEC
70379: ST_TO_ADDR
70380: LD_VAR 0 4
70384: PUSH
70385: FOR_TO
70386: IFFALSE 70433
// begin hc_class = 13 ;
70388: LD_ADDR_OWVAR 28
70392: PUSH
70393: LD_INT 13
70395: ST_TO_ADDR
// hc_gallery =  ;
70396: LD_ADDR_OWVAR 33
70400: PUSH
70401: LD_STRING 
70403: ST_TO_ADDR
// animal := CreateHuman ;
70404: LD_ADDR_VAR 0 12
70408: PUSH
70409: CALL_OW 44
70413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70414: LD_VAR 0 12
70418: PPUSH
70419: LD_VAR 0 8
70423: PPUSH
70424: LD_INT 0
70426: PPUSH
70427: CALL 72195 0 3
// end ;
70431: GO 70385
70433: POP
70434: POP
// if fishes then
70435: LD_VAR 0 7
70439: IFFALSE 70506
// for i = 1 to fishes do
70441: LD_ADDR_VAR 0 11
70445: PUSH
70446: DOUBLE
70447: LD_INT 1
70449: DEC
70450: ST_TO_ADDR
70451: LD_VAR 0 7
70455: PUSH
70456: FOR_TO
70457: IFFALSE 70504
// begin hc_class = 20 ;
70459: LD_ADDR_OWVAR 28
70463: PUSH
70464: LD_INT 20
70466: ST_TO_ADDR
// hc_gallery =  ;
70467: LD_ADDR_OWVAR 33
70471: PUSH
70472: LD_STRING 
70474: ST_TO_ADDR
// animal := CreateHuman ;
70475: LD_ADDR_VAR 0 12
70479: PUSH
70480: CALL_OW 44
70484: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70485: LD_VAR 0 12
70489: PPUSH
70490: LD_VAR 0 9
70494: PPUSH
70495: LD_INT 0
70497: PPUSH
70498: CALL 72195 0 3
// end ;
70502: GO 70456
70504: POP
70505: POP
// end ;
70506: LD_VAR 0 10
70510: RET
// export function WantHeal ( sci , unit ) ; begin
70511: LD_INT 0
70513: PPUSH
// if GetTaskList ( sci ) > 0 then
70514: LD_VAR 0 1
70518: PPUSH
70519: CALL_OW 437
70523: PUSH
70524: LD_INT 0
70526: GREATER
70527: IFFALSE 70597
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70529: LD_VAR 0 1
70533: PPUSH
70534: CALL_OW 437
70538: PUSH
70539: LD_INT 1
70541: ARRAY
70542: PUSH
70543: LD_INT 1
70545: ARRAY
70546: PUSH
70547: LD_STRING l
70549: EQUAL
70550: PUSH
70551: LD_VAR 0 1
70555: PPUSH
70556: CALL_OW 437
70560: PUSH
70561: LD_INT 1
70563: ARRAY
70564: PUSH
70565: LD_INT 4
70567: ARRAY
70568: PUSH
70569: LD_VAR 0 2
70573: EQUAL
70574: AND
70575: IFFALSE 70587
// result := true else
70577: LD_ADDR_VAR 0 3
70581: PUSH
70582: LD_INT 1
70584: ST_TO_ADDR
70585: GO 70595
// result := false ;
70587: LD_ADDR_VAR 0 3
70591: PUSH
70592: LD_INT 0
70594: ST_TO_ADDR
// end else
70595: GO 70605
// result := false ;
70597: LD_ADDR_VAR 0 3
70601: PUSH
70602: LD_INT 0
70604: ST_TO_ADDR
// end ;
70605: LD_VAR 0 3
70609: RET
// export function HealTarget ( sci ) ; begin
70610: LD_INT 0
70612: PPUSH
// if not sci then
70613: LD_VAR 0 1
70617: NOT
70618: IFFALSE 70622
// exit ;
70620: GO 70687
// result := 0 ;
70622: LD_ADDR_VAR 0 2
70626: PUSH
70627: LD_INT 0
70629: ST_TO_ADDR
// if GetTaskList ( sci ) then
70630: LD_VAR 0 1
70634: PPUSH
70635: CALL_OW 437
70639: IFFALSE 70687
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70641: LD_VAR 0 1
70645: PPUSH
70646: CALL_OW 437
70650: PUSH
70651: LD_INT 1
70653: ARRAY
70654: PUSH
70655: LD_INT 1
70657: ARRAY
70658: PUSH
70659: LD_STRING l
70661: EQUAL
70662: IFFALSE 70687
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70664: LD_ADDR_VAR 0 2
70668: PUSH
70669: LD_VAR 0 1
70673: PPUSH
70674: CALL_OW 437
70678: PUSH
70679: LD_INT 1
70681: ARRAY
70682: PUSH
70683: LD_INT 4
70685: ARRAY
70686: ST_TO_ADDR
// end ;
70687: LD_VAR 0 2
70691: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70692: LD_INT 0
70694: PPUSH
70695: PPUSH
70696: PPUSH
70697: PPUSH
// if not base_units then
70698: LD_VAR 0 1
70702: NOT
70703: IFFALSE 70707
// exit ;
70705: GO 70794
// result := false ;
70707: LD_ADDR_VAR 0 2
70711: PUSH
70712: LD_INT 0
70714: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70715: LD_ADDR_VAR 0 5
70719: PUSH
70720: LD_VAR 0 1
70724: PPUSH
70725: LD_INT 21
70727: PUSH
70728: LD_INT 3
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PPUSH
70735: CALL_OW 72
70739: ST_TO_ADDR
// if not tmp then
70740: LD_VAR 0 5
70744: NOT
70745: IFFALSE 70749
// exit ;
70747: GO 70794
// for i in tmp do
70749: LD_ADDR_VAR 0 3
70753: PUSH
70754: LD_VAR 0 5
70758: PUSH
70759: FOR_IN
70760: IFFALSE 70792
// begin result := EnemyInRange ( i , 22 ) ;
70762: LD_ADDR_VAR 0 2
70766: PUSH
70767: LD_VAR 0 3
70771: PPUSH
70772: LD_INT 22
70774: PPUSH
70775: CALL 69030 0 2
70779: ST_TO_ADDR
// if result then
70780: LD_VAR 0 2
70784: IFFALSE 70790
// exit ;
70786: POP
70787: POP
70788: GO 70794
// end ;
70790: GO 70759
70792: POP
70793: POP
// end ;
70794: LD_VAR 0 2
70798: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70799: LD_INT 0
70801: PPUSH
70802: PPUSH
// if not units then
70803: LD_VAR 0 1
70807: NOT
70808: IFFALSE 70812
// exit ;
70810: GO 70882
// result := [ ] ;
70812: LD_ADDR_VAR 0 3
70816: PUSH
70817: EMPTY
70818: ST_TO_ADDR
// for i in units do
70819: LD_ADDR_VAR 0 4
70823: PUSH
70824: LD_VAR 0 1
70828: PUSH
70829: FOR_IN
70830: IFFALSE 70880
// if GetTag ( i ) = tag then
70832: LD_VAR 0 4
70836: PPUSH
70837: CALL_OW 110
70841: PUSH
70842: LD_VAR 0 2
70846: EQUAL
70847: IFFALSE 70878
// result := Replace ( result , result + 1 , i ) ;
70849: LD_ADDR_VAR 0 3
70853: PUSH
70854: LD_VAR 0 3
70858: PPUSH
70859: LD_VAR 0 3
70863: PUSH
70864: LD_INT 1
70866: PLUS
70867: PPUSH
70868: LD_VAR 0 4
70872: PPUSH
70873: CALL_OW 1
70877: ST_TO_ADDR
70878: GO 70829
70880: POP
70881: POP
// end ;
70882: LD_VAR 0 3
70886: RET
// export function IsDriver ( un ) ; begin
70887: LD_INT 0
70889: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70890: LD_ADDR_VAR 0 2
70894: PUSH
70895: LD_VAR 0 1
70899: PUSH
70900: LD_INT 55
70902: PUSH
70903: EMPTY
70904: LIST
70905: PPUSH
70906: CALL_OW 69
70910: IN
70911: ST_TO_ADDR
// end ;
70912: LD_VAR 0 2
70916: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70917: LD_INT 0
70919: PPUSH
70920: PPUSH
// list := [ ] ;
70921: LD_ADDR_VAR 0 5
70925: PUSH
70926: EMPTY
70927: ST_TO_ADDR
// case d of 0 :
70928: LD_VAR 0 3
70932: PUSH
70933: LD_INT 0
70935: DOUBLE
70936: EQUAL
70937: IFTRUE 70941
70939: GO 71074
70941: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70942: LD_ADDR_VAR 0 5
70946: PUSH
70947: LD_VAR 0 1
70951: PUSH
70952: LD_INT 4
70954: MINUS
70955: PUSH
70956: LD_VAR 0 2
70960: PUSH
70961: LD_INT 4
70963: MINUS
70964: PUSH
70965: LD_INT 2
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: LIST
70972: PUSH
70973: LD_VAR 0 1
70977: PUSH
70978: LD_INT 3
70980: MINUS
70981: PUSH
70982: LD_VAR 0 2
70986: PUSH
70987: LD_INT 1
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: LIST
70994: PUSH
70995: LD_VAR 0 1
70999: PUSH
71000: LD_INT 4
71002: PLUS
71003: PUSH
71004: LD_VAR 0 2
71008: PUSH
71009: LD_INT 4
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: LIST
71016: PUSH
71017: LD_VAR 0 1
71021: PUSH
71022: LD_INT 3
71024: PLUS
71025: PUSH
71026: LD_VAR 0 2
71030: PUSH
71031: LD_INT 3
71033: PLUS
71034: PUSH
71035: LD_INT 5
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: LIST
71042: PUSH
71043: LD_VAR 0 1
71047: PUSH
71048: LD_VAR 0 2
71052: PUSH
71053: LD_INT 4
71055: PLUS
71056: PUSH
71057: LD_INT 0
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: LIST
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: ST_TO_ADDR
// end ; 1 :
71072: GO 71772
71074: LD_INT 1
71076: DOUBLE
71077: EQUAL
71078: IFTRUE 71082
71080: GO 71215
71082: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71083: LD_ADDR_VAR 0 5
71087: PUSH
71088: LD_VAR 0 1
71092: PUSH
71093: LD_VAR 0 2
71097: PUSH
71098: LD_INT 4
71100: MINUS
71101: PUSH
71102: LD_INT 3
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: LIST
71109: PUSH
71110: LD_VAR 0 1
71114: PUSH
71115: LD_INT 3
71117: MINUS
71118: PUSH
71119: LD_VAR 0 2
71123: PUSH
71124: LD_INT 3
71126: MINUS
71127: PUSH
71128: LD_INT 2
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: LIST
71135: PUSH
71136: LD_VAR 0 1
71140: PUSH
71141: LD_INT 4
71143: MINUS
71144: PUSH
71145: LD_VAR 0 2
71149: PUSH
71150: LD_INT 1
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: LIST
71157: PUSH
71158: LD_VAR 0 1
71162: PUSH
71163: LD_VAR 0 2
71167: PUSH
71168: LD_INT 3
71170: PLUS
71171: PUSH
71172: LD_INT 0
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: LIST
71179: PUSH
71180: LD_VAR 0 1
71184: PUSH
71185: LD_INT 4
71187: PLUS
71188: PUSH
71189: LD_VAR 0 2
71193: PUSH
71194: LD_INT 4
71196: PLUS
71197: PUSH
71198: LD_INT 5
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: LIST
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: ST_TO_ADDR
// end ; 2 :
71213: GO 71772
71215: LD_INT 2
71217: DOUBLE
71218: EQUAL
71219: IFTRUE 71223
71221: GO 71352
71223: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71224: LD_ADDR_VAR 0 5
71228: PUSH
71229: LD_VAR 0 1
71233: PUSH
71234: LD_VAR 0 2
71238: PUSH
71239: LD_INT 3
71241: MINUS
71242: PUSH
71243: LD_INT 3
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: LIST
71250: PUSH
71251: LD_VAR 0 1
71255: PUSH
71256: LD_INT 4
71258: PLUS
71259: PUSH
71260: LD_VAR 0 2
71264: PUSH
71265: LD_INT 4
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: LIST
71272: PUSH
71273: LD_VAR 0 1
71277: PUSH
71278: LD_VAR 0 2
71282: PUSH
71283: LD_INT 4
71285: PLUS
71286: PUSH
71287: LD_INT 0
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: LIST
71294: PUSH
71295: LD_VAR 0 1
71299: PUSH
71300: LD_INT 3
71302: MINUS
71303: PUSH
71304: LD_VAR 0 2
71308: PUSH
71309: LD_INT 1
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: LIST
71316: PUSH
71317: LD_VAR 0 1
71321: PUSH
71322: LD_INT 4
71324: MINUS
71325: PUSH
71326: LD_VAR 0 2
71330: PUSH
71331: LD_INT 4
71333: MINUS
71334: PUSH
71335: LD_INT 2
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: LIST
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: ST_TO_ADDR
// end ; 3 :
71350: GO 71772
71352: LD_INT 3
71354: DOUBLE
71355: EQUAL
71356: IFTRUE 71360
71358: GO 71493
71360: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71361: LD_ADDR_VAR 0 5
71365: PUSH
71366: LD_VAR 0 1
71370: PUSH
71371: LD_INT 3
71373: PLUS
71374: PUSH
71375: LD_VAR 0 2
71379: PUSH
71380: LD_INT 4
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: LIST
71387: PUSH
71388: LD_VAR 0 1
71392: PUSH
71393: LD_INT 4
71395: PLUS
71396: PUSH
71397: LD_VAR 0 2
71401: PUSH
71402: LD_INT 4
71404: PLUS
71405: PUSH
71406: LD_INT 5
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: LIST
71413: PUSH
71414: LD_VAR 0 1
71418: PUSH
71419: LD_INT 4
71421: MINUS
71422: PUSH
71423: LD_VAR 0 2
71427: PUSH
71428: LD_INT 1
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: LIST
71435: PUSH
71436: LD_VAR 0 1
71440: PUSH
71441: LD_VAR 0 2
71445: PUSH
71446: LD_INT 4
71448: MINUS
71449: PUSH
71450: LD_INT 3
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: LIST
71457: PUSH
71458: LD_VAR 0 1
71462: PUSH
71463: LD_INT 3
71465: MINUS
71466: PUSH
71467: LD_VAR 0 2
71471: PUSH
71472: LD_INT 3
71474: MINUS
71475: PUSH
71476: LD_INT 2
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: LIST
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: ST_TO_ADDR
// end ; 4 :
71491: GO 71772
71493: LD_INT 4
71495: DOUBLE
71496: EQUAL
71497: IFTRUE 71501
71499: GO 71634
71501: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71502: LD_ADDR_VAR 0 5
71506: PUSH
71507: LD_VAR 0 1
71511: PUSH
71512: LD_VAR 0 2
71516: PUSH
71517: LD_INT 4
71519: PLUS
71520: PUSH
71521: LD_INT 0
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: LIST
71528: PUSH
71529: LD_VAR 0 1
71533: PUSH
71534: LD_INT 3
71536: PLUS
71537: PUSH
71538: LD_VAR 0 2
71542: PUSH
71543: LD_INT 3
71545: PLUS
71546: PUSH
71547: LD_INT 5
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: LIST
71554: PUSH
71555: LD_VAR 0 1
71559: PUSH
71560: LD_INT 4
71562: PLUS
71563: PUSH
71564: LD_VAR 0 2
71568: PUSH
71569: LD_INT 4
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: LIST
71576: PUSH
71577: LD_VAR 0 1
71581: PUSH
71582: LD_VAR 0 2
71586: PUSH
71587: LD_INT 3
71589: MINUS
71590: PUSH
71591: LD_INT 3
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: LIST
71598: PUSH
71599: LD_VAR 0 1
71603: PUSH
71604: LD_INT 4
71606: MINUS
71607: PUSH
71608: LD_VAR 0 2
71612: PUSH
71613: LD_INT 4
71615: MINUS
71616: PUSH
71617: LD_INT 2
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: LIST
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: ST_TO_ADDR
// end ; 5 :
71632: GO 71772
71634: LD_INT 5
71636: DOUBLE
71637: EQUAL
71638: IFTRUE 71642
71640: GO 71771
71642: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71643: LD_ADDR_VAR 0 5
71647: PUSH
71648: LD_VAR 0 1
71652: PUSH
71653: LD_INT 4
71655: MINUS
71656: PUSH
71657: LD_VAR 0 2
71661: PUSH
71662: LD_INT 1
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: LIST
71669: PUSH
71670: LD_VAR 0 1
71674: PUSH
71675: LD_VAR 0 2
71679: PUSH
71680: LD_INT 4
71682: MINUS
71683: PUSH
71684: LD_INT 3
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: LIST
71691: PUSH
71692: LD_VAR 0 1
71696: PUSH
71697: LD_INT 4
71699: PLUS
71700: PUSH
71701: LD_VAR 0 2
71705: PUSH
71706: LD_INT 4
71708: PLUS
71709: PUSH
71710: LD_INT 5
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: LIST
71717: PUSH
71718: LD_VAR 0 1
71722: PUSH
71723: LD_INT 3
71725: PLUS
71726: PUSH
71727: LD_VAR 0 2
71731: PUSH
71732: LD_INT 4
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: LIST
71739: PUSH
71740: LD_VAR 0 1
71744: PUSH
71745: LD_VAR 0 2
71749: PUSH
71750: LD_INT 3
71752: PLUS
71753: PUSH
71754: LD_INT 0
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: ST_TO_ADDR
// end ; end ;
71769: GO 71772
71771: POP
// result := list ;
71772: LD_ADDR_VAR 0 4
71776: PUSH
71777: LD_VAR 0 5
71781: ST_TO_ADDR
// end ;
71782: LD_VAR 0 4
71786: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71787: LD_INT 0
71789: PPUSH
71790: PPUSH
71791: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71792: LD_VAR 0 1
71796: NOT
71797: PUSH
71798: LD_VAR 0 2
71802: PUSH
71803: LD_INT 1
71805: PUSH
71806: LD_INT 2
71808: PUSH
71809: LD_INT 3
71811: PUSH
71812: LD_INT 4
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: IN
71821: NOT
71822: OR
71823: IFFALSE 71827
// exit ;
71825: GO 71919
// tmp := [ ] ;
71827: LD_ADDR_VAR 0 5
71831: PUSH
71832: EMPTY
71833: ST_TO_ADDR
// for i in units do
71834: LD_ADDR_VAR 0 4
71838: PUSH
71839: LD_VAR 0 1
71843: PUSH
71844: FOR_IN
71845: IFFALSE 71888
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71847: LD_ADDR_VAR 0 5
71851: PUSH
71852: LD_VAR 0 5
71856: PPUSH
71857: LD_VAR 0 5
71861: PUSH
71862: LD_INT 1
71864: PLUS
71865: PPUSH
71866: LD_VAR 0 4
71870: PPUSH
71871: LD_VAR 0 2
71875: PPUSH
71876: CALL_OW 259
71880: PPUSH
71881: CALL_OW 2
71885: ST_TO_ADDR
71886: GO 71844
71888: POP
71889: POP
// if not tmp then
71890: LD_VAR 0 5
71894: NOT
71895: IFFALSE 71899
// exit ;
71897: GO 71919
// result := SortListByListDesc ( units , tmp ) ;
71899: LD_ADDR_VAR 0 3
71903: PUSH
71904: LD_VAR 0 1
71908: PPUSH
71909: LD_VAR 0 5
71913: PPUSH
71914: CALL_OW 77
71918: ST_TO_ADDR
// end ;
71919: LD_VAR 0 3
71923: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71924: LD_INT 0
71926: PPUSH
71927: PPUSH
71928: PPUSH
// result := false ;
71929: LD_ADDR_VAR 0 3
71933: PUSH
71934: LD_INT 0
71936: ST_TO_ADDR
// x := GetX ( building ) ;
71937: LD_ADDR_VAR 0 4
71941: PUSH
71942: LD_VAR 0 2
71946: PPUSH
71947: CALL_OW 250
71951: ST_TO_ADDR
// y := GetY ( building ) ;
71952: LD_ADDR_VAR 0 5
71956: PUSH
71957: LD_VAR 0 2
71961: PPUSH
71962: CALL_OW 251
71966: ST_TO_ADDR
// if not building or not x or not y then
71967: LD_VAR 0 2
71971: NOT
71972: PUSH
71973: LD_VAR 0 4
71977: NOT
71978: OR
71979: PUSH
71980: LD_VAR 0 5
71984: NOT
71985: OR
71986: IFFALSE 71990
// exit ;
71988: GO 72082
// if GetTaskList ( unit ) then
71990: LD_VAR 0 1
71994: PPUSH
71995: CALL_OW 437
71999: IFFALSE 72082
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72001: LD_STRING e
72003: PUSH
72004: LD_VAR 0 1
72008: PPUSH
72009: CALL_OW 437
72013: PUSH
72014: LD_INT 1
72016: ARRAY
72017: PUSH
72018: LD_INT 1
72020: ARRAY
72021: EQUAL
72022: PUSH
72023: LD_VAR 0 4
72027: PUSH
72028: LD_VAR 0 1
72032: PPUSH
72033: CALL_OW 437
72037: PUSH
72038: LD_INT 1
72040: ARRAY
72041: PUSH
72042: LD_INT 2
72044: ARRAY
72045: EQUAL
72046: AND
72047: PUSH
72048: LD_VAR 0 5
72052: PUSH
72053: LD_VAR 0 1
72057: PPUSH
72058: CALL_OW 437
72062: PUSH
72063: LD_INT 1
72065: ARRAY
72066: PUSH
72067: LD_INT 3
72069: ARRAY
72070: EQUAL
72071: AND
72072: IFFALSE 72082
// result := true end ;
72074: LD_ADDR_VAR 0 3
72078: PUSH
72079: LD_INT 1
72081: ST_TO_ADDR
// end ;
72082: LD_VAR 0 3
72086: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72087: LD_INT 0
72089: PPUSH
// result := false ;
72090: LD_ADDR_VAR 0 4
72094: PUSH
72095: LD_INT 0
72097: ST_TO_ADDR
// if GetTaskList ( unit ) then
72098: LD_VAR 0 1
72102: PPUSH
72103: CALL_OW 437
72107: IFFALSE 72190
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72109: LD_STRING M
72111: PUSH
72112: LD_VAR 0 1
72116: PPUSH
72117: CALL_OW 437
72121: PUSH
72122: LD_INT 1
72124: ARRAY
72125: PUSH
72126: LD_INT 1
72128: ARRAY
72129: EQUAL
72130: PUSH
72131: LD_VAR 0 2
72135: PUSH
72136: LD_VAR 0 1
72140: PPUSH
72141: CALL_OW 437
72145: PUSH
72146: LD_INT 1
72148: ARRAY
72149: PUSH
72150: LD_INT 2
72152: ARRAY
72153: EQUAL
72154: AND
72155: PUSH
72156: LD_VAR 0 3
72160: PUSH
72161: LD_VAR 0 1
72165: PPUSH
72166: CALL_OW 437
72170: PUSH
72171: LD_INT 1
72173: ARRAY
72174: PUSH
72175: LD_INT 3
72177: ARRAY
72178: EQUAL
72179: AND
72180: IFFALSE 72190
// result := true ;
72182: LD_ADDR_VAR 0 4
72186: PUSH
72187: LD_INT 1
72189: ST_TO_ADDR
// end ; end ;
72190: LD_VAR 0 4
72194: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72195: LD_INT 0
72197: PPUSH
72198: PPUSH
72199: PPUSH
72200: PPUSH
// if not unit or not area then
72201: LD_VAR 0 1
72205: NOT
72206: PUSH
72207: LD_VAR 0 2
72211: NOT
72212: OR
72213: IFFALSE 72217
// exit ;
72215: GO 72381
// tmp := AreaToList ( area , i ) ;
72217: LD_ADDR_VAR 0 6
72221: PUSH
72222: LD_VAR 0 2
72226: PPUSH
72227: LD_VAR 0 5
72231: PPUSH
72232: CALL_OW 517
72236: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72237: LD_ADDR_VAR 0 5
72241: PUSH
72242: DOUBLE
72243: LD_INT 1
72245: DEC
72246: ST_TO_ADDR
72247: LD_VAR 0 6
72251: PUSH
72252: LD_INT 1
72254: ARRAY
72255: PUSH
72256: FOR_TO
72257: IFFALSE 72379
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72259: LD_ADDR_VAR 0 7
72263: PUSH
72264: LD_VAR 0 6
72268: PUSH
72269: LD_INT 1
72271: ARRAY
72272: PUSH
72273: LD_VAR 0 5
72277: ARRAY
72278: PUSH
72279: LD_VAR 0 6
72283: PUSH
72284: LD_INT 2
72286: ARRAY
72287: PUSH
72288: LD_VAR 0 5
72292: ARRAY
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72298: LD_VAR 0 7
72302: PUSH
72303: LD_INT 1
72305: ARRAY
72306: PPUSH
72307: LD_VAR 0 7
72311: PUSH
72312: LD_INT 2
72314: ARRAY
72315: PPUSH
72316: CALL_OW 428
72320: PUSH
72321: LD_INT 0
72323: EQUAL
72324: IFFALSE 72377
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72326: LD_VAR 0 1
72330: PPUSH
72331: LD_VAR 0 7
72335: PUSH
72336: LD_INT 1
72338: ARRAY
72339: PPUSH
72340: LD_VAR 0 7
72344: PUSH
72345: LD_INT 2
72347: ARRAY
72348: PPUSH
72349: LD_VAR 0 3
72353: PPUSH
72354: CALL_OW 48
// result := IsPlaced ( unit ) ;
72358: LD_ADDR_VAR 0 4
72362: PUSH
72363: LD_VAR 0 1
72367: PPUSH
72368: CALL_OW 305
72372: ST_TO_ADDR
// exit ;
72373: POP
72374: POP
72375: GO 72381
// end ; end ;
72377: GO 72256
72379: POP
72380: POP
// end ;
72381: LD_VAR 0 4
72385: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72386: LD_INT 0
72388: PPUSH
72389: PPUSH
72390: PPUSH
// if not side or side > 8 then
72391: LD_VAR 0 1
72395: NOT
72396: PUSH
72397: LD_VAR 0 1
72401: PUSH
72402: LD_INT 8
72404: GREATER
72405: OR
72406: IFFALSE 72410
// exit ;
72408: GO 72597
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72410: LD_ADDR_VAR 0 4
72414: PUSH
72415: LD_INT 22
72417: PUSH
72418: LD_VAR 0 1
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 21
72429: PUSH
72430: LD_INT 3
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PPUSH
72441: CALL_OW 69
72445: ST_TO_ADDR
// if not tmp then
72446: LD_VAR 0 4
72450: NOT
72451: IFFALSE 72455
// exit ;
72453: GO 72597
// enable_addtolog := true ;
72455: LD_ADDR_OWVAR 81
72459: PUSH
72460: LD_INT 1
72462: ST_TO_ADDR
// AddToLog ( [ ) ;
72463: LD_STRING [
72465: PPUSH
72466: CALL_OW 561
// for i in tmp do
72470: LD_ADDR_VAR 0 3
72474: PUSH
72475: LD_VAR 0 4
72479: PUSH
72480: FOR_IN
72481: IFFALSE 72588
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72483: LD_STRING [
72485: PUSH
72486: LD_VAR 0 3
72490: PPUSH
72491: CALL_OW 266
72495: STR
72496: PUSH
72497: LD_STRING , 
72499: STR
72500: PUSH
72501: LD_VAR 0 3
72505: PPUSH
72506: CALL_OW 250
72510: STR
72511: PUSH
72512: LD_STRING , 
72514: STR
72515: PUSH
72516: LD_VAR 0 3
72520: PPUSH
72521: CALL_OW 251
72525: STR
72526: PUSH
72527: LD_STRING , 
72529: STR
72530: PUSH
72531: LD_VAR 0 3
72535: PPUSH
72536: CALL_OW 254
72540: STR
72541: PUSH
72542: LD_STRING , 
72544: STR
72545: PUSH
72546: LD_VAR 0 3
72550: PPUSH
72551: LD_INT 1
72553: PPUSH
72554: CALL_OW 268
72558: STR
72559: PUSH
72560: LD_STRING , 
72562: STR
72563: PUSH
72564: LD_VAR 0 3
72568: PPUSH
72569: LD_INT 2
72571: PPUSH
72572: CALL_OW 268
72576: STR
72577: PUSH
72578: LD_STRING ],
72580: STR
72581: PPUSH
72582: CALL_OW 561
// end ;
72586: GO 72480
72588: POP
72589: POP
// AddToLog ( ]; ) ;
72590: LD_STRING ];
72592: PPUSH
72593: CALL_OW 561
// end ;
72597: LD_VAR 0 2
72601: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72602: LD_INT 0
72604: PPUSH
72605: PPUSH
72606: PPUSH
72607: PPUSH
72608: PPUSH
// if not area or not rate or not max then
72609: LD_VAR 0 1
72613: NOT
72614: PUSH
72615: LD_VAR 0 2
72619: NOT
72620: OR
72621: PUSH
72622: LD_VAR 0 4
72626: NOT
72627: OR
72628: IFFALSE 72632
// exit ;
72630: GO 72824
// while 1 do
72632: LD_INT 1
72634: IFFALSE 72824
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72636: LD_ADDR_VAR 0 9
72640: PUSH
72641: LD_VAR 0 1
72645: PPUSH
72646: LD_INT 1
72648: PPUSH
72649: CALL_OW 287
72653: PUSH
72654: LD_INT 10
72656: MUL
72657: ST_TO_ADDR
// r := rate / 10 ;
72658: LD_ADDR_VAR 0 7
72662: PUSH
72663: LD_VAR 0 2
72667: PUSH
72668: LD_INT 10
72670: DIVREAL
72671: ST_TO_ADDR
// time := 1 1$00 ;
72672: LD_ADDR_VAR 0 8
72676: PUSH
72677: LD_INT 2100
72679: ST_TO_ADDR
// if amount < min then
72680: LD_VAR 0 9
72684: PUSH
72685: LD_VAR 0 3
72689: LESS
72690: IFFALSE 72708
// r := r * 2 else
72692: LD_ADDR_VAR 0 7
72696: PUSH
72697: LD_VAR 0 7
72701: PUSH
72702: LD_INT 2
72704: MUL
72705: ST_TO_ADDR
72706: GO 72734
// if amount > max then
72708: LD_VAR 0 9
72712: PUSH
72713: LD_VAR 0 4
72717: GREATER
72718: IFFALSE 72734
// r := r / 2 ;
72720: LD_ADDR_VAR 0 7
72724: PUSH
72725: LD_VAR 0 7
72729: PUSH
72730: LD_INT 2
72732: DIVREAL
72733: ST_TO_ADDR
// time := time / r ;
72734: LD_ADDR_VAR 0 8
72738: PUSH
72739: LD_VAR 0 8
72743: PUSH
72744: LD_VAR 0 7
72748: DIVREAL
72749: ST_TO_ADDR
// if time < 0 then
72750: LD_VAR 0 8
72754: PUSH
72755: LD_INT 0
72757: LESS
72758: IFFALSE 72775
// time := time * - 1 ;
72760: LD_ADDR_VAR 0 8
72764: PUSH
72765: LD_VAR 0 8
72769: PUSH
72770: LD_INT 1
72772: NEG
72773: MUL
72774: ST_TO_ADDR
// wait ( time ) ;
72775: LD_VAR 0 8
72779: PPUSH
72780: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72784: LD_INT 35
72786: PPUSH
72787: LD_INT 875
72789: PPUSH
72790: CALL_OW 12
72794: PPUSH
72795: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72799: LD_INT 1
72801: PPUSH
72802: LD_INT 5
72804: PPUSH
72805: CALL_OW 12
72809: PPUSH
72810: LD_VAR 0 1
72814: PPUSH
72815: LD_INT 1
72817: PPUSH
72818: CALL_OW 55
// end ;
72822: GO 72632
// end ;
72824: LD_VAR 0 5
72828: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72829: LD_INT 0
72831: PPUSH
72832: PPUSH
72833: PPUSH
72834: PPUSH
72835: PPUSH
72836: PPUSH
72837: PPUSH
72838: PPUSH
// if not turrets or not factories then
72839: LD_VAR 0 1
72843: NOT
72844: PUSH
72845: LD_VAR 0 2
72849: NOT
72850: OR
72851: IFFALSE 72855
// exit ;
72853: GO 73162
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72855: LD_ADDR_VAR 0 10
72859: PUSH
72860: LD_INT 5
72862: PUSH
72863: LD_INT 6
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 2
72872: PUSH
72873: LD_INT 4
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 3
72882: PUSH
72883: LD_INT 5
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 24
72897: PUSH
72898: LD_INT 25
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 23
72907: PUSH
72908: LD_INT 27
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 42
72921: PUSH
72922: LD_INT 43
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PUSH
72929: LD_INT 44
72931: PUSH
72932: LD_INT 46
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 45
72941: PUSH
72942: LD_INT 47
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: LIST
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: LIST
72958: ST_TO_ADDR
// result := [ ] ;
72959: LD_ADDR_VAR 0 3
72963: PUSH
72964: EMPTY
72965: ST_TO_ADDR
// for i in turrets do
72966: LD_ADDR_VAR 0 4
72970: PUSH
72971: LD_VAR 0 1
72975: PUSH
72976: FOR_IN
72977: IFFALSE 73160
// begin nat := GetNation ( i ) ;
72979: LD_ADDR_VAR 0 7
72983: PUSH
72984: LD_VAR 0 4
72988: PPUSH
72989: CALL_OW 248
72993: ST_TO_ADDR
// weapon := 0 ;
72994: LD_ADDR_VAR 0 8
72998: PUSH
72999: LD_INT 0
73001: ST_TO_ADDR
// if not nat then
73002: LD_VAR 0 7
73006: NOT
73007: IFFALSE 73011
// continue ;
73009: GO 72976
// for j in list [ nat ] do
73011: LD_ADDR_VAR 0 5
73015: PUSH
73016: LD_VAR 0 10
73020: PUSH
73021: LD_VAR 0 7
73025: ARRAY
73026: PUSH
73027: FOR_IN
73028: IFFALSE 73069
// if GetBWeapon ( i ) = j [ 1 ] then
73030: LD_VAR 0 4
73034: PPUSH
73035: CALL_OW 269
73039: PUSH
73040: LD_VAR 0 5
73044: PUSH
73045: LD_INT 1
73047: ARRAY
73048: EQUAL
73049: IFFALSE 73067
// begin weapon := j [ 2 ] ;
73051: LD_ADDR_VAR 0 8
73055: PUSH
73056: LD_VAR 0 5
73060: PUSH
73061: LD_INT 2
73063: ARRAY
73064: ST_TO_ADDR
// break ;
73065: GO 73069
// end ;
73067: GO 73027
73069: POP
73070: POP
// if not weapon then
73071: LD_VAR 0 8
73075: NOT
73076: IFFALSE 73080
// continue ;
73078: GO 72976
// for k in factories do
73080: LD_ADDR_VAR 0 6
73084: PUSH
73085: LD_VAR 0 2
73089: PUSH
73090: FOR_IN
73091: IFFALSE 73156
// begin weapons := AvailableWeaponList ( k ) ;
73093: LD_ADDR_VAR 0 9
73097: PUSH
73098: LD_VAR 0 6
73102: PPUSH
73103: CALL_OW 478
73107: ST_TO_ADDR
// if not weapons then
73108: LD_VAR 0 9
73112: NOT
73113: IFFALSE 73117
// continue ;
73115: GO 73090
// if weapon in weapons then
73117: LD_VAR 0 8
73121: PUSH
73122: LD_VAR 0 9
73126: IN
73127: IFFALSE 73154
// begin result := [ i , weapon ] ;
73129: LD_ADDR_VAR 0 3
73133: PUSH
73134: LD_VAR 0 4
73138: PUSH
73139: LD_VAR 0 8
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: ST_TO_ADDR
// exit ;
73148: POP
73149: POP
73150: POP
73151: POP
73152: GO 73162
// end ; end ;
73154: GO 73090
73156: POP
73157: POP
// end ;
73158: GO 72976
73160: POP
73161: POP
// end ;
73162: LD_VAR 0 3
73166: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73167: LD_INT 0
73169: PPUSH
// if not side or side > 8 then
73170: LD_VAR 0 3
73174: NOT
73175: PUSH
73176: LD_VAR 0 3
73180: PUSH
73181: LD_INT 8
73183: GREATER
73184: OR
73185: IFFALSE 73189
// exit ;
73187: GO 73248
// if not range then
73189: LD_VAR 0 4
73193: NOT
73194: IFFALSE 73205
// range := - 12 ;
73196: LD_ADDR_VAR 0 4
73200: PUSH
73201: LD_INT 12
73203: NEG
73204: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73205: LD_VAR 0 1
73209: PPUSH
73210: LD_VAR 0 2
73214: PPUSH
73215: LD_VAR 0 3
73219: PPUSH
73220: LD_VAR 0 4
73224: PPUSH
73225: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73229: LD_VAR 0 1
73233: PPUSH
73234: LD_VAR 0 2
73238: PPUSH
73239: LD_VAR 0 3
73243: PPUSH
73244: CALL_OW 331
// end ;
73248: LD_VAR 0 5
73252: RET
// export function Video ( mode ) ; begin
73253: LD_INT 0
73255: PPUSH
// ingame_video = mode ;
73256: LD_ADDR_OWVAR 52
73260: PUSH
73261: LD_VAR 0 1
73265: ST_TO_ADDR
// interface_hidden = mode ;
73266: LD_ADDR_OWVAR 54
73270: PUSH
73271: LD_VAR 0 1
73275: ST_TO_ADDR
// end ;
73276: LD_VAR 0 2
73280: RET
// export function Join ( array , element ) ; begin
73281: LD_INT 0
73283: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73284: LD_ADDR_VAR 0 3
73288: PUSH
73289: LD_VAR 0 1
73293: PPUSH
73294: LD_VAR 0 1
73298: PUSH
73299: LD_INT 1
73301: PLUS
73302: PPUSH
73303: LD_VAR 0 2
73307: PPUSH
73308: CALL_OW 1
73312: ST_TO_ADDR
// end ;
73313: LD_VAR 0 3
73317: RET
// export function JoinUnion ( array , element ) ; begin
73318: LD_INT 0
73320: PPUSH
// result := array union element ;
73321: LD_ADDR_VAR 0 3
73325: PUSH
73326: LD_VAR 0 1
73330: PUSH
73331: LD_VAR 0 2
73335: UNION
73336: ST_TO_ADDR
// end ;
73337: LD_VAR 0 3
73341: RET
// export function GetBehemoths ( side ) ; begin
73342: LD_INT 0
73344: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73345: LD_ADDR_VAR 0 2
73349: PUSH
73350: LD_INT 22
73352: PUSH
73353: LD_VAR 0 1
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: LD_INT 31
73364: PUSH
73365: LD_INT 25
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PPUSH
73376: CALL_OW 69
73380: ST_TO_ADDR
// end ;
73381: LD_VAR 0 2
73385: RET
// export function Shuffle ( array ) ; var i , index ; begin
73386: LD_INT 0
73388: PPUSH
73389: PPUSH
73390: PPUSH
// result := [ ] ;
73391: LD_ADDR_VAR 0 2
73395: PUSH
73396: EMPTY
73397: ST_TO_ADDR
// if not array then
73398: LD_VAR 0 1
73402: NOT
73403: IFFALSE 73407
// exit ;
73405: GO 73506
// Randomize ;
73407: CALL_OW 10
// for i = array downto 1 do
73411: LD_ADDR_VAR 0 3
73415: PUSH
73416: DOUBLE
73417: LD_VAR 0 1
73421: INC
73422: ST_TO_ADDR
73423: LD_INT 1
73425: PUSH
73426: FOR_DOWNTO
73427: IFFALSE 73504
// begin index := rand ( 1 , array ) ;
73429: LD_ADDR_VAR 0 4
73433: PUSH
73434: LD_INT 1
73436: PPUSH
73437: LD_VAR 0 1
73441: PPUSH
73442: CALL_OW 12
73446: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73447: LD_ADDR_VAR 0 2
73451: PUSH
73452: LD_VAR 0 2
73456: PPUSH
73457: LD_VAR 0 2
73461: PUSH
73462: LD_INT 1
73464: PLUS
73465: PPUSH
73466: LD_VAR 0 1
73470: PUSH
73471: LD_VAR 0 4
73475: ARRAY
73476: PPUSH
73477: CALL_OW 2
73481: ST_TO_ADDR
// array := Delete ( array , index ) ;
73482: LD_ADDR_VAR 0 1
73486: PUSH
73487: LD_VAR 0 1
73491: PPUSH
73492: LD_VAR 0 4
73496: PPUSH
73497: CALL_OW 3
73501: ST_TO_ADDR
// end ;
73502: GO 73426
73504: POP
73505: POP
// end ;
73506: LD_VAR 0 2
73510: RET
// export function GetBaseMaterials ( base ) ; begin
73511: LD_INT 0
73513: PPUSH
// result := [ 0 , 0 , 0 ] ;
73514: LD_ADDR_VAR 0 2
73518: PUSH
73519: LD_INT 0
73521: PUSH
73522: LD_INT 0
73524: PUSH
73525: LD_INT 0
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: LIST
73532: ST_TO_ADDR
// if not base then
73533: LD_VAR 0 1
73537: NOT
73538: IFFALSE 73542
// exit ;
73540: GO 73591
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73542: LD_ADDR_VAR 0 2
73546: PUSH
73547: LD_VAR 0 1
73551: PPUSH
73552: LD_INT 1
73554: PPUSH
73555: CALL_OW 275
73559: PUSH
73560: LD_VAR 0 1
73564: PPUSH
73565: LD_INT 2
73567: PPUSH
73568: CALL_OW 275
73572: PUSH
73573: LD_VAR 0 1
73577: PPUSH
73578: LD_INT 3
73580: PPUSH
73581: CALL_OW 275
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: LIST
73590: ST_TO_ADDR
// end ;
73591: LD_VAR 0 2
73595: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73596: LD_INT 0
73598: PPUSH
73599: PPUSH
// result := array ;
73600: LD_ADDR_VAR 0 3
73604: PUSH
73605: LD_VAR 0 1
73609: ST_TO_ADDR
// if size > 0 then
73610: LD_VAR 0 2
73614: PUSH
73615: LD_INT 0
73617: GREATER
73618: IFFALSE 73664
// for i := array downto size do
73620: LD_ADDR_VAR 0 4
73624: PUSH
73625: DOUBLE
73626: LD_VAR 0 1
73630: INC
73631: ST_TO_ADDR
73632: LD_VAR 0 2
73636: PUSH
73637: FOR_DOWNTO
73638: IFFALSE 73662
// result := Delete ( result , result ) ;
73640: LD_ADDR_VAR 0 3
73644: PUSH
73645: LD_VAR 0 3
73649: PPUSH
73650: LD_VAR 0 3
73654: PPUSH
73655: CALL_OW 3
73659: ST_TO_ADDR
73660: GO 73637
73662: POP
73663: POP
// end ;
73664: LD_VAR 0 3
73668: RET
// export function ComExit ( unit ) ; var tmp ; begin
73669: LD_INT 0
73671: PPUSH
73672: PPUSH
// if not IsInUnit ( unit ) then
73673: LD_VAR 0 1
73677: PPUSH
73678: CALL_OW 310
73682: NOT
73683: IFFALSE 73687
// exit ;
73685: GO 73747
// tmp := IsInUnit ( unit ) ;
73687: LD_ADDR_VAR 0 3
73691: PUSH
73692: LD_VAR 0 1
73696: PPUSH
73697: CALL_OW 310
73701: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73702: LD_VAR 0 3
73706: PPUSH
73707: CALL_OW 247
73711: PUSH
73712: LD_INT 2
73714: EQUAL
73715: IFFALSE 73728
// ComExitVehicle ( unit ) else
73717: LD_VAR 0 1
73721: PPUSH
73722: CALL_OW 121
73726: GO 73737
// ComExitBuilding ( unit ) ;
73728: LD_VAR 0 1
73732: PPUSH
73733: CALL_OW 122
// result := tmp ;
73737: LD_ADDR_VAR 0 2
73741: PUSH
73742: LD_VAR 0 3
73746: ST_TO_ADDR
// end ;
73747: LD_VAR 0 2
73751: RET
// export function ComExitAll ( units ) ; var i ; begin
73752: LD_INT 0
73754: PPUSH
73755: PPUSH
// if not units then
73756: LD_VAR 0 1
73760: NOT
73761: IFFALSE 73765
// exit ;
73763: GO 73791
// for i in units do
73765: LD_ADDR_VAR 0 3
73769: PUSH
73770: LD_VAR 0 1
73774: PUSH
73775: FOR_IN
73776: IFFALSE 73789
// ComExit ( i ) ;
73778: LD_VAR 0 3
73782: PPUSH
73783: CALL 73669 0 1
73787: GO 73775
73789: POP
73790: POP
// end ;
73791: LD_VAR 0 2
73795: RET
// export function ResetHc ; begin
73796: LD_INT 0
73798: PPUSH
// InitHc ;
73799: CALL_OW 19
// hc_importance := 0 ;
73803: LD_ADDR_OWVAR 32
73807: PUSH
73808: LD_INT 0
73810: ST_TO_ADDR
// end ;
73811: LD_VAR 0 1
73815: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73816: LD_INT 0
73818: PPUSH
73819: PPUSH
73820: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73821: LD_ADDR_VAR 0 6
73825: PUSH
73826: LD_VAR 0 1
73830: PUSH
73831: LD_VAR 0 3
73835: PLUS
73836: PUSH
73837: LD_INT 2
73839: DIV
73840: ST_TO_ADDR
// if _x < 0 then
73841: LD_VAR 0 6
73845: PUSH
73846: LD_INT 0
73848: LESS
73849: IFFALSE 73866
// _x := _x * - 1 ;
73851: LD_ADDR_VAR 0 6
73855: PUSH
73856: LD_VAR 0 6
73860: PUSH
73861: LD_INT 1
73863: NEG
73864: MUL
73865: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73866: LD_ADDR_VAR 0 7
73870: PUSH
73871: LD_VAR 0 2
73875: PUSH
73876: LD_VAR 0 4
73880: PLUS
73881: PUSH
73882: LD_INT 2
73884: DIV
73885: ST_TO_ADDR
// if _y < 0 then
73886: LD_VAR 0 7
73890: PUSH
73891: LD_INT 0
73893: LESS
73894: IFFALSE 73911
// _y := _y * - 1 ;
73896: LD_ADDR_VAR 0 7
73900: PUSH
73901: LD_VAR 0 7
73905: PUSH
73906: LD_INT 1
73908: NEG
73909: MUL
73910: ST_TO_ADDR
// result := [ _x , _y ] ;
73911: LD_ADDR_VAR 0 5
73915: PUSH
73916: LD_VAR 0 6
73920: PUSH
73921: LD_VAR 0 7
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: ST_TO_ADDR
// end ;
73930: LD_VAR 0 5
73934: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73935: LD_INT 0
73937: PPUSH
73938: PPUSH
73939: PPUSH
73940: PPUSH
// task := GetTaskList ( unit ) ;
73941: LD_ADDR_VAR 0 7
73945: PUSH
73946: LD_VAR 0 1
73950: PPUSH
73951: CALL_OW 437
73955: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73956: LD_VAR 0 7
73960: NOT
73961: PUSH
73962: LD_VAR 0 1
73966: PPUSH
73967: LD_VAR 0 2
73971: PPUSH
73972: CALL_OW 308
73976: NOT
73977: AND
73978: IFFALSE 73982
// exit ;
73980: GO 74100
// if IsInArea ( unit , area ) then
73982: LD_VAR 0 1
73986: PPUSH
73987: LD_VAR 0 2
73991: PPUSH
73992: CALL_OW 308
73996: IFFALSE 74014
// begin ComMoveToArea ( unit , goAway ) ;
73998: LD_VAR 0 1
74002: PPUSH
74003: LD_VAR 0 3
74007: PPUSH
74008: CALL_OW 113
// exit ;
74012: GO 74100
// end ; if task [ 1 ] [ 1 ] <> M then
74014: LD_VAR 0 7
74018: PUSH
74019: LD_INT 1
74021: ARRAY
74022: PUSH
74023: LD_INT 1
74025: ARRAY
74026: PUSH
74027: LD_STRING M
74029: NONEQUAL
74030: IFFALSE 74034
// exit ;
74032: GO 74100
// x := task [ 1 ] [ 2 ] ;
74034: LD_ADDR_VAR 0 5
74038: PUSH
74039: LD_VAR 0 7
74043: PUSH
74044: LD_INT 1
74046: ARRAY
74047: PUSH
74048: LD_INT 2
74050: ARRAY
74051: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74052: LD_ADDR_VAR 0 6
74056: PUSH
74057: LD_VAR 0 7
74061: PUSH
74062: LD_INT 1
74064: ARRAY
74065: PUSH
74066: LD_INT 3
74068: ARRAY
74069: ST_TO_ADDR
// if InArea ( x , y , area ) then
74070: LD_VAR 0 5
74074: PPUSH
74075: LD_VAR 0 6
74079: PPUSH
74080: LD_VAR 0 2
74084: PPUSH
74085: CALL_OW 309
74089: IFFALSE 74100
// ComStop ( unit ) ;
74091: LD_VAR 0 1
74095: PPUSH
74096: CALL_OW 141
// end ;
74100: LD_VAR 0 4
74104: RET
// export function Abs ( value ) ; begin
74105: LD_INT 0
74107: PPUSH
// result := value ;
74108: LD_ADDR_VAR 0 2
74112: PUSH
74113: LD_VAR 0 1
74117: ST_TO_ADDR
// if value < 0 then
74118: LD_VAR 0 1
74122: PUSH
74123: LD_INT 0
74125: LESS
74126: IFFALSE 74143
// result := value * - 1 ;
74128: LD_ADDR_VAR 0 2
74132: PUSH
74133: LD_VAR 0 1
74137: PUSH
74138: LD_INT 1
74140: NEG
74141: MUL
74142: ST_TO_ADDR
// end ;
74143: LD_VAR 0 2
74147: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74148: LD_INT 0
74150: PPUSH
74151: PPUSH
74152: PPUSH
74153: PPUSH
74154: PPUSH
74155: PPUSH
74156: PPUSH
74157: PPUSH
// if not unit or not building then
74158: LD_VAR 0 1
74162: NOT
74163: PUSH
74164: LD_VAR 0 2
74168: NOT
74169: OR
74170: IFFALSE 74174
// exit ;
74172: GO 74400
// x := GetX ( building ) ;
74174: LD_ADDR_VAR 0 4
74178: PUSH
74179: LD_VAR 0 2
74183: PPUSH
74184: CALL_OW 250
74188: ST_TO_ADDR
// y := GetY ( building ) ;
74189: LD_ADDR_VAR 0 6
74193: PUSH
74194: LD_VAR 0 2
74198: PPUSH
74199: CALL_OW 251
74203: ST_TO_ADDR
// d := GetDir ( building ) ;
74204: LD_ADDR_VAR 0 8
74208: PUSH
74209: LD_VAR 0 2
74213: PPUSH
74214: CALL_OW 254
74218: ST_TO_ADDR
// r := 4 ;
74219: LD_ADDR_VAR 0 9
74223: PUSH
74224: LD_INT 4
74226: ST_TO_ADDR
// for i := 1 to 5 do
74227: LD_ADDR_VAR 0 10
74231: PUSH
74232: DOUBLE
74233: LD_INT 1
74235: DEC
74236: ST_TO_ADDR
74237: LD_INT 5
74239: PUSH
74240: FOR_TO
74241: IFFALSE 74398
// begin _x := ShiftX ( x , d , r + i ) ;
74243: LD_ADDR_VAR 0 5
74247: PUSH
74248: LD_VAR 0 4
74252: PPUSH
74253: LD_VAR 0 8
74257: PPUSH
74258: LD_VAR 0 9
74262: PUSH
74263: LD_VAR 0 10
74267: PLUS
74268: PPUSH
74269: CALL_OW 272
74273: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74274: LD_ADDR_VAR 0 7
74278: PUSH
74279: LD_VAR 0 6
74283: PPUSH
74284: LD_VAR 0 8
74288: PPUSH
74289: LD_VAR 0 9
74293: PUSH
74294: LD_VAR 0 10
74298: PLUS
74299: PPUSH
74300: CALL_OW 273
74304: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74305: LD_VAR 0 5
74309: PPUSH
74310: LD_VAR 0 7
74314: PPUSH
74315: CALL_OW 488
74319: PUSH
74320: LD_VAR 0 5
74324: PPUSH
74325: LD_VAR 0 7
74329: PPUSH
74330: CALL_OW 428
74334: PPUSH
74335: CALL_OW 247
74339: PUSH
74340: LD_INT 3
74342: PUSH
74343: LD_INT 2
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: IN
74350: NOT
74351: AND
74352: IFFALSE 74396
// begin ComMoveXY ( unit , _x , _y ) ;
74354: LD_VAR 0 1
74358: PPUSH
74359: LD_VAR 0 5
74363: PPUSH
74364: LD_VAR 0 7
74368: PPUSH
74369: CALL_OW 111
// result := [ _x , _y ] ;
74373: LD_ADDR_VAR 0 3
74377: PUSH
74378: LD_VAR 0 5
74382: PUSH
74383: LD_VAR 0 7
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: ST_TO_ADDR
// exit ;
74392: POP
74393: POP
74394: GO 74400
// end ; end ;
74396: GO 74240
74398: POP
74399: POP
// end ;
74400: LD_VAR 0 3
74404: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74405: LD_INT 0
74407: PPUSH
74408: PPUSH
74409: PPUSH
// result := 0 ;
74410: LD_ADDR_VAR 0 3
74414: PUSH
74415: LD_INT 0
74417: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74418: LD_VAR 0 1
74422: PUSH
74423: LD_INT 0
74425: LESS
74426: PUSH
74427: LD_VAR 0 1
74431: PUSH
74432: LD_INT 8
74434: GREATER
74435: OR
74436: PUSH
74437: LD_VAR 0 2
74441: PUSH
74442: LD_INT 0
74444: LESS
74445: OR
74446: PUSH
74447: LD_VAR 0 2
74451: PUSH
74452: LD_INT 8
74454: GREATER
74455: OR
74456: IFFALSE 74460
// exit ;
74458: GO 74535
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74460: LD_ADDR_VAR 0 4
74464: PUSH
74465: LD_INT 22
74467: PUSH
74468: LD_VAR 0 2
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PPUSH
74477: CALL_OW 69
74481: PUSH
74482: FOR_IN
74483: IFFALSE 74533
// begin un := UnitShoot ( i ) ;
74485: LD_ADDR_VAR 0 5
74489: PUSH
74490: LD_VAR 0 4
74494: PPUSH
74495: CALL_OW 504
74499: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74500: LD_VAR 0 5
74504: PPUSH
74505: CALL_OW 255
74509: PUSH
74510: LD_VAR 0 1
74514: EQUAL
74515: IFFALSE 74531
// begin result := un ;
74517: LD_ADDR_VAR 0 3
74521: PUSH
74522: LD_VAR 0 5
74526: ST_TO_ADDR
// exit ;
74527: POP
74528: POP
74529: GO 74535
// end ; end ;
74531: GO 74482
74533: POP
74534: POP
// end ;
74535: LD_VAR 0 3
74539: RET
// export function GetCargoBay ( units ) ; begin
74540: LD_INT 0
74542: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74543: LD_ADDR_VAR 0 2
74547: PUSH
74548: LD_VAR 0 1
74552: PPUSH
74553: LD_INT 2
74555: PUSH
74556: LD_INT 34
74558: PUSH
74559: LD_INT 12
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PUSH
74566: LD_INT 34
74568: PUSH
74569: LD_INT 51
74571: PUSH
74572: EMPTY
74573: LIST
74574: LIST
74575: PUSH
74576: LD_INT 34
74578: PUSH
74579: LD_INT 32
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 34
74588: PUSH
74589: LD_EXP 63
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: PPUSH
74605: CALL_OW 72
74609: ST_TO_ADDR
// end ;
74610: LD_VAR 0 2
74614: RET
// export function Negate ( value ) ; begin
74615: LD_INT 0
74617: PPUSH
// result := not value ;
74618: LD_ADDR_VAR 0 2
74622: PUSH
74623: LD_VAR 0 1
74627: NOT
74628: ST_TO_ADDR
// end ;
74629: LD_VAR 0 2
74633: RET
// export function Inc ( value ) ; begin
74634: LD_INT 0
74636: PPUSH
// result := value + 1 ;
74637: LD_ADDR_VAR 0 2
74641: PUSH
74642: LD_VAR 0 1
74646: PUSH
74647: LD_INT 1
74649: PLUS
74650: ST_TO_ADDR
// end ;
74651: LD_VAR 0 2
74655: RET
// export function Dec ( value ) ; begin
74656: LD_INT 0
74658: PPUSH
// result := value - 1 ;
74659: LD_ADDR_VAR 0 2
74663: PUSH
74664: LD_VAR 0 1
74668: PUSH
74669: LD_INT 1
74671: MINUS
74672: ST_TO_ADDR
// end ;
74673: LD_VAR 0 2
74677: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74678: LD_INT 0
74680: PPUSH
74681: PPUSH
74682: PPUSH
74683: PPUSH
74684: PPUSH
74685: PPUSH
74686: PPUSH
74687: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74688: LD_VAR 0 1
74692: PPUSH
74693: LD_VAR 0 2
74697: PPUSH
74698: CALL_OW 488
74702: NOT
74703: PUSH
74704: LD_VAR 0 3
74708: PPUSH
74709: LD_VAR 0 4
74713: PPUSH
74714: CALL_OW 488
74718: NOT
74719: OR
74720: IFFALSE 74733
// begin result := - 1 ;
74722: LD_ADDR_VAR 0 5
74726: PUSH
74727: LD_INT 1
74729: NEG
74730: ST_TO_ADDR
// exit ;
74731: GO 74968
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74733: LD_ADDR_VAR 0 12
74737: PUSH
74738: LD_VAR 0 1
74742: PPUSH
74743: LD_VAR 0 2
74747: PPUSH
74748: LD_VAR 0 3
74752: PPUSH
74753: LD_VAR 0 4
74757: PPUSH
74758: CALL 73816 0 4
74762: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74763: LD_ADDR_VAR 0 11
74767: PUSH
74768: LD_VAR 0 1
74772: PPUSH
74773: LD_VAR 0 2
74777: PPUSH
74778: LD_VAR 0 12
74782: PUSH
74783: LD_INT 1
74785: ARRAY
74786: PPUSH
74787: LD_VAR 0 12
74791: PUSH
74792: LD_INT 2
74794: ARRAY
74795: PPUSH
74796: CALL_OW 298
74800: ST_TO_ADDR
// distance := 9999 ;
74801: LD_ADDR_VAR 0 10
74805: PUSH
74806: LD_INT 9999
74808: ST_TO_ADDR
// for i := 0 to 5 do
74809: LD_ADDR_VAR 0 6
74813: PUSH
74814: DOUBLE
74815: LD_INT 0
74817: DEC
74818: ST_TO_ADDR
74819: LD_INT 5
74821: PUSH
74822: FOR_TO
74823: IFFALSE 74966
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74825: LD_ADDR_VAR 0 7
74829: PUSH
74830: LD_VAR 0 1
74834: PPUSH
74835: LD_VAR 0 6
74839: PPUSH
74840: LD_VAR 0 11
74844: PPUSH
74845: CALL_OW 272
74849: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74850: LD_ADDR_VAR 0 8
74854: PUSH
74855: LD_VAR 0 2
74859: PPUSH
74860: LD_VAR 0 6
74864: PPUSH
74865: LD_VAR 0 11
74869: PPUSH
74870: CALL_OW 273
74874: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74875: LD_VAR 0 7
74879: PPUSH
74880: LD_VAR 0 8
74884: PPUSH
74885: CALL_OW 488
74889: NOT
74890: IFFALSE 74894
// continue ;
74892: GO 74822
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74894: LD_ADDR_VAR 0 9
74898: PUSH
74899: LD_VAR 0 12
74903: PUSH
74904: LD_INT 1
74906: ARRAY
74907: PPUSH
74908: LD_VAR 0 12
74912: PUSH
74913: LD_INT 2
74915: ARRAY
74916: PPUSH
74917: LD_VAR 0 7
74921: PPUSH
74922: LD_VAR 0 8
74926: PPUSH
74927: CALL_OW 298
74931: ST_TO_ADDR
// if tmp < distance then
74932: LD_VAR 0 9
74936: PUSH
74937: LD_VAR 0 10
74941: LESS
74942: IFFALSE 74964
// begin result := i ;
74944: LD_ADDR_VAR 0 5
74948: PUSH
74949: LD_VAR 0 6
74953: ST_TO_ADDR
// distance := tmp ;
74954: LD_ADDR_VAR 0 10
74958: PUSH
74959: LD_VAR 0 9
74963: ST_TO_ADDR
// end ; end ;
74964: GO 74822
74966: POP
74967: POP
// end ;
74968: LD_VAR 0 5
74972: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74973: LD_INT 0
74975: PPUSH
74976: PPUSH
// if not driver or not IsInUnit ( driver ) then
74977: LD_VAR 0 1
74981: NOT
74982: PUSH
74983: LD_VAR 0 1
74987: PPUSH
74988: CALL_OW 310
74992: NOT
74993: OR
74994: IFFALSE 74998
// exit ;
74996: GO 75088
// vehicle := IsInUnit ( driver ) ;
74998: LD_ADDR_VAR 0 3
75002: PUSH
75003: LD_VAR 0 1
75007: PPUSH
75008: CALL_OW 310
75012: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75013: LD_VAR 0 1
75017: PPUSH
75018: LD_STRING \
75020: PUSH
75021: LD_INT 0
75023: PUSH
75024: LD_INT 0
75026: PUSH
75027: LD_INT 0
75029: PUSH
75030: LD_INT 0
75032: PUSH
75033: LD_INT 0
75035: PUSH
75036: LD_INT 0
75038: PUSH
75039: EMPTY
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: PUSH
75048: LD_STRING E
75050: PUSH
75051: LD_INT 0
75053: PUSH
75054: LD_INT 0
75056: PUSH
75057: LD_VAR 0 3
75061: PUSH
75062: LD_INT 0
75064: PUSH
75065: LD_INT 0
75067: PUSH
75068: LD_INT 0
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: PPUSH
75084: CALL_OW 446
// end ;
75088: LD_VAR 0 2
75092: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75093: LD_INT 0
75095: PPUSH
75096: PPUSH
// if not driver or not IsInUnit ( driver ) then
75097: LD_VAR 0 1
75101: NOT
75102: PUSH
75103: LD_VAR 0 1
75107: PPUSH
75108: CALL_OW 310
75112: NOT
75113: OR
75114: IFFALSE 75118
// exit ;
75116: GO 75208
// vehicle := IsInUnit ( driver ) ;
75118: LD_ADDR_VAR 0 3
75122: PUSH
75123: LD_VAR 0 1
75127: PPUSH
75128: CALL_OW 310
75132: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75133: LD_VAR 0 1
75137: PPUSH
75138: LD_STRING \
75140: PUSH
75141: LD_INT 0
75143: PUSH
75144: LD_INT 0
75146: PUSH
75147: LD_INT 0
75149: PUSH
75150: LD_INT 0
75152: PUSH
75153: LD_INT 0
75155: PUSH
75156: LD_INT 0
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: PUSH
75168: LD_STRING E
75170: PUSH
75171: LD_INT 0
75173: PUSH
75174: LD_INT 0
75176: PUSH
75177: LD_VAR 0 3
75181: PUSH
75182: LD_INT 0
75184: PUSH
75185: LD_INT 0
75187: PUSH
75188: LD_INT 0
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PPUSH
75204: CALL_OW 447
// end ;
75208: LD_VAR 0 2
75212: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75213: LD_INT 0
75215: PPUSH
75216: PPUSH
75217: PPUSH
// tmp := [ ] ;
75218: LD_ADDR_VAR 0 5
75222: PUSH
75223: EMPTY
75224: ST_TO_ADDR
// for i in units do
75225: LD_ADDR_VAR 0 4
75229: PUSH
75230: LD_VAR 0 1
75234: PUSH
75235: FOR_IN
75236: IFFALSE 75274
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75238: LD_ADDR_VAR 0 5
75242: PUSH
75243: LD_VAR 0 5
75247: PPUSH
75248: LD_VAR 0 5
75252: PUSH
75253: LD_INT 1
75255: PLUS
75256: PPUSH
75257: LD_VAR 0 4
75261: PPUSH
75262: CALL_OW 256
75266: PPUSH
75267: CALL_OW 2
75271: ST_TO_ADDR
75272: GO 75235
75274: POP
75275: POP
// if not tmp then
75276: LD_VAR 0 5
75280: NOT
75281: IFFALSE 75285
// exit ;
75283: GO 75333
// if asc then
75285: LD_VAR 0 2
75289: IFFALSE 75313
// result := SortListByListAsc ( units , tmp ) else
75291: LD_ADDR_VAR 0 3
75295: PUSH
75296: LD_VAR 0 1
75300: PPUSH
75301: LD_VAR 0 5
75305: PPUSH
75306: CALL_OW 76
75310: ST_TO_ADDR
75311: GO 75333
// result := SortListByListDesc ( units , tmp ) ;
75313: LD_ADDR_VAR 0 3
75317: PUSH
75318: LD_VAR 0 1
75322: PPUSH
75323: LD_VAR 0 5
75327: PPUSH
75328: CALL_OW 77
75332: ST_TO_ADDR
// end ;
75333: LD_VAR 0 3
75337: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75338: LD_INT 0
75340: PPUSH
75341: PPUSH
// task := GetTaskList ( mech ) ;
75342: LD_ADDR_VAR 0 4
75346: PUSH
75347: LD_VAR 0 1
75351: PPUSH
75352: CALL_OW 437
75356: ST_TO_ADDR
// if not task then
75357: LD_VAR 0 4
75361: NOT
75362: IFFALSE 75366
// exit ;
75364: GO 75408
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75366: LD_ADDR_VAR 0 3
75370: PUSH
75371: LD_VAR 0 4
75375: PUSH
75376: LD_INT 1
75378: ARRAY
75379: PUSH
75380: LD_INT 1
75382: ARRAY
75383: PUSH
75384: LD_STRING r
75386: EQUAL
75387: PUSH
75388: LD_VAR 0 4
75392: PUSH
75393: LD_INT 1
75395: ARRAY
75396: PUSH
75397: LD_INT 4
75399: ARRAY
75400: PUSH
75401: LD_VAR 0 2
75405: EQUAL
75406: AND
75407: ST_TO_ADDR
// end ;
75408: LD_VAR 0 3
75412: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75413: LD_INT 0
75415: PPUSH
// SetDir ( unit , d ) ;
75416: LD_VAR 0 1
75420: PPUSH
75421: LD_VAR 0 4
75425: PPUSH
75426: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75430: LD_VAR 0 1
75434: PPUSH
75435: LD_VAR 0 2
75439: PPUSH
75440: LD_VAR 0 3
75444: PPUSH
75445: LD_VAR 0 5
75449: PPUSH
75450: CALL_OW 48
// end ;
75454: LD_VAR 0 6
75458: RET
// export function ToNaturalNumber ( number ) ; begin
75459: LD_INT 0
75461: PPUSH
// result := number div 1 ;
75462: LD_ADDR_VAR 0 2
75466: PUSH
75467: LD_VAR 0 1
75471: PUSH
75472: LD_INT 1
75474: DIV
75475: ST_TO_ADDR
// if number < 0 then
75476: LD_VAR 0 1
75480: PUSH
75481: LD_INT 0
75483: LESS
75484: IFFALSE 75494
// result := 0 ;
75486: LD_ADDR_VAR 0 2
75490: PUSH
75491: LD_INT 0
75493: ST_TO_ADDR
// end ;
75494: LD_VAR 0 2
75498: RET
// export function SortByClass ( units , class ) ; var un ; begin
75499: LD_INT 0
75501: PPUSH
75502: PPUSH
// if not units or not class then
75503: LD_VAR 0 1
75507: NOT
75508: PUSH
75509: LD_VAR 0 2
75513: NOT
75514: OR
75515: IFFALSE 75519
// exit ;
75517: GO 75614
// result := [ ] ;
75519: LD_ADDR_VAR 0 3
75523: PUSH
75524: EMPTY
75525: ST_TO_ADDR
// for un in units do
75526: LD_ADDR_VAR 0 4
75530: PUSH
75531: LD_VAR 0 1
75535: PUSH
75536: FOR_IN
75537: IFFALSE 75612
// if GetClass ( un ) = class then
75539: LD_VAR 0 4
75543: PPUSH
75544: CALL_OW 257
75548: PUSH
75549: LD_VAR 0 2
75553: EQUAL
75554: IFFALSE 75581
// result := Insert ( result , 1 , un ) else
75556: LD_ADDR_VAR 0 3
75560: PUSH
75561: LD_VAR 0 3
75565: PPUSH
75566: LD_INT 1
75568: PPUSH
75569: LD_VAR 0 4
75573: PPUSH
75574: CALL_OW 2
75578: ST_TO_ADDR
75579: GO 75610
// result := Replace ( result , result + 1 , un ) ;
75581: LD_ADDR_VAR 0 3
75585: PUSH
75586: LD_VAR 0 3
75590: PPUSH
75591: LD_VAR 0 3
75595: PUSH
75596: LD_INT 1
75598: PLUS
75599: PPUSH
75600: LD_VAR 0 4
75604: PPUSH
75605: CALL_OW 1
75609: ST_TO_ADDR
75610: GO 75536
75612: POP
75613: POP
// end ;
75614: LD_VAR 0 3
75618: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75619: LD_INT 0
75621: PPUSH
75622: PPUSH
75623: PPUSH
75624: PPUSH
75625: PPUSH
75626: PPUSH
75627: PPUSH
// result := [ ] ;
75628: LD_ADDR_VAR 0 4
75632: PUSH
75633: EMPTY
75634: ST_TO_ADDR
// if x - r < 0 then
75635: LD_VAR 0 1
75639: PUSH
75640: LD_VAR 0 3
75644: MINUS
75645: PUSH
75646: LD_INT 0
75648: LESS
75649: IFFALSE 75661
// min_x := 0 else
75651: LD_ADDR_VAR 0 8
75655: PUSH
75656: LD_INT 0
75658: ST_TO_ADDR
75659: GO 75677
// min_x := x - r ;
75661: LD_ADDR_VAR 0 8
75665: PUSH
75666: LD_VAR 0 1
75670: PUSH
75671: LD_VAR 0 3
75675: MINUS
75676: ST_TO_ADDR
// if y - r < 0 then
75677: LD_VAR 0 2
75681: PUSH
75682: LD_VAR 0 3
75686: MINUS
75687: PUSH
75688: LD_INT 0
75690: LESS
75691: IFFALSE 75703
// min_y := 0 else
75693: LD_ADDR_VAR 0 7
75697: PUSH
75698: LD_INT 0
75700: ST_TO_ADDR
75701: GO 75719
// min_y := y - r ;
75703: LD_ADDR_VAR 0 7
75707: PUSH
75708: LD_VAR 0 2
75712: PUSH
75713: LD_VAR 0 3
75717: MINUS
75718: ST_TO_ADDR
// max_x := x + r ;
75719: LD_ADDR_VAR 0 9
75723: PUSH
75724: LD_VAR 0 1
75728: PUSH
75729: LD_VAR 0 3
75733: PLUS
75734: ST_TO_ADDR
// max_y := y + r ;
75735: LD_ADDR_VAR 0 10
75739: PUSH
75740: LD_VAR 0 2
75744: PUSH
75745: LD_VAR 0 3
75749: PLUS
75750: ST_TO_ADDR
// for _x = min_x to max_x do
75751: LD_ADDR_VAR 0 5
75755: PUSH
75756: DOUBLE
75757: LD_VAR 0 8
75761: DEC
75762: ST_TO_ADDR
75763: LD_VAR 0 9
75767: PUSH
75768: FOR_TO
75769: IFFALSE 75870
// for _y = min_y to max_y do
75771: LD_ADDR_VAR 0 6
75775: PUSH
75776: DOUBLE
75777: LD_VAR 0 7
75781: DEC
75782: ST_TO_ADDR
75783: LD_VAR 0 10
75787: PUSH
75788: FOR_TO
75789: IFFALSE 75866
// begin if not ValidHex ( _x , _y ) then
75791: LD_VAR 0 5
75795: PPUSH
75796: LD_VAR 0 6
75800: PPUSH
75801: CALL_OW 488
75805: NOT
75806: IFFALSE 75810
// continue ;
75808: GO 75788
// if GetResourceTypeXY ( _x , _y ) then
75810: LD_VAR 0 5
75814: PPUSH
75815: LD_VAR 0 6
75819: PPUSH
75820: CALL_OW 283
75824: IFFALSE 75864
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75826: LD_ADDR_VAR 0 4
75830: PUSH
75831: LD_VAR 0 4
75835: PPUSH
75836: LD_VAR 0 4
75840: PUSH
75841: LD_INT 1
75843: PLUS
75844: PPUSH
75845: LD_VAR 0 5
75849: PUSH
75850: LD_VAR 0 6
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PPUSH
75859: CALL_OW 1
75863: ST_TO_ADDR
// end ;
75864: GO 75788
75866: POP
75867: POP
75868: GO 75768
75870: POP
75871: POP
// end ;
75872: LD_VAR 0 4
75876: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75877: LD_INT 0
75879: PPUSH
75880: PPUSH
75881: PPUSH
75882: PPUSH
75883: PPUSH
75884: PPUSH
75885: PPUSH
75886: PPUSH
// if not units then
75887: LD_VAR 0 1
75891: NOT
75892: IFFALSE 75896
// exit ;
75894: GO 76321
// result := UnitFilter ( units , [ f_ok ] ) ;
75896: LD_ADDR_VAR 0 3
75900: PUSH
75901: LD_VAR 0 1
75905: PPUSH
75906: LD_INT 50
75908: PUSH
75909: EMPTY
75910: LIST
75911: PPUSH
75912: CALL_OW 72
75916: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75917: LD_ADDR_VAR 0 8
75921: PUSH
75922: LD_VAR 0 1
75926: PUSH
75927: LD_INT 1
75929: ARRAY
75930: PPUSH
75931: CALL_OW 255
75935: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
75936: LD_ADDR_VAR 0 10
75940: PUSH
75941: LD_INT 29
75943: PUSH
75944: LD_EXP 66
75948: PUSH
75949: EMPTY
75950: LIST
75951: LIST
75952: ST_TO_ADDR
// if not result then
75953: LD_VAR 0 3
75957: NOT
75958: IFFALSE 75962
// exit ;
75960: GO 76321
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75962: LD_ADDR_VAR 0 5
75966: PUSH
75967: LD_INT 81
75969: PUSH
75970: LD_VAR 0 8
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: PPUSH
75979: CALL_OW 69
75983: ST_TO_ADDR
// for i in result do
75984: LD_ADDR_VAR 0 4
75988: PUSH
75989: LD_VAR 0 3
75993: PUSH
75994: FOR_IN
75995: IFFALSE 76319
// begin tag := GetTag ( i ) + 1 ;
75997: LD_ADDR_VAR 0 9
76001: PUSH
76002: LD_VAR 0 4
76006: PPUSH
76007: CALL_OW 110
76011: PUSH
76012: LD_INT 1
76014: PLUS
76015: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76016: LD_ADDR_VAR 0 7
76020: PUSH
76021: LD_VAR 0 4
76025: PPUSH
76026: CALL_OW 250
76030: PPUSH
76031: LD_VAR 0 4
76035: PPUSH
76036: CALL_OW 251
76040: PPUSH
76041: LD_INT 6
76043: PPUSH
76044: CALL 75619 0 3
76048: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76049: LD_VAR 0 7
76053: PUSH
76054: LD_VAR 0 4
76058: PPUSH
76059: CALL_OW 264
76063: PUSH
76064: LD_VAR 0 10
76068: IN
76069: NOT
76070: AND
76071: IFFALSE 76110
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76073: LD_VAR 0 4
76077: PPUSH
76078: LD_VAR 0 7
76082: PUSH
76083: LD_INT 1
76085: ARRAY
76086: PUSH
76087: LD_INT 1
76089: ARRAY
76090: PPUSH
76091: LD_VAR 0 7
76095: PUSH
76096: LD_INT 1
76098: ARRAY
76099: PUSH
76100: LD_INT 2
76102: ARRAY
76103: PPUSH
76104: CALL_OW 116
76108: GO 76317
// if path > tag then
76110: LD_VAR 0 2
76114: PUSH
76115: LD_VAR 0 9
76119: GREATER
76120: IFFALSE 76287
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
76122: LD_ADDR_VAR 0 6
76126: PUSH
76127: LD_VAR 0 5
76131: PPUSH
76132: LD_INT 91
76134: PUSH
76135: LD_VAR 0 4
76139: PUSH
76140: LD_INT 12
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: LIST
76147: PPUSH
76148: CALL_OW 72
76152: ST_TO_ADDR
// if nearEnemy then
76153: LD_VAR 0 6
76157: IFFALSE 76185
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76159: LD_VAR 0 4
76163: PPUSH
76164: LD_VAR 0 6
76168: PPUSH
76169: LD_VAR 0 4
76173: PPUSH
76174: CALL_OW 74
76178: PPUSH
76179: CALL_OW 115
76183: GO 76285
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76185: LD_VAR 0 4
76189: PPUSH
76190: LD_VAR 0 2
76194: PUSH
76195: LD_VAR 0 9
76199: ARRAY
76200: PUSH
76201: LD_INT 1
76203: ARRAY
76204: PPUSH
76205: LD_VAR 0 2
76209: PUSH
76210: LD_VAR 0 9
76214: ARRAY
76215: PUSH
76216: LD_INT 2
76218: ARRAY
76219: PPUSH
76220: CALL_OW 297
76224: PUSH
76225: LD_INT 6
76227: GREATER
76228: IFFALSE 76271
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76230: LD_VAR 0 4
76234: PPUSH
76235: LD_VAR 0 2
76239: PUSH
76240: LD_VAR 0 9
76244: ARRAY
76245: PUSH
76246: LD_INT 1
76248: ARRAY
76249: PPUSH
76250: LD_VAR 0 2
76254: PUSH
76255: LD_VAR 0 9
76259: ARRAY
76260: PUSH
76261: LD_INT 2
76263: ARRAY
76264: PPUSH
76265: CALL_OW 114
76269: GO 76285
// SetTag ( i , tag ) ;
76271: LD_VAR 0 4
76275: PPUSH
76276: LD_VAR 0 9
76280: PPUSH
76281: CALL_OW 109
// end else
76285: GO 76317
// if enemy then
76287: LD_VAR 0 5
76291: IFFALSE 76317
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76293: LD_VAR 0 4
76297: PPUSH
76298: LD_VAR 0 5
76302: PPUSH
76303: LD_VAR 0 4
76307: PPUSH
76308: CALL_OW 74
76312: PPUSH
76313: CALL_OW 115
// end ;
76317: GO 75994
76319: POP
76320: POP
// end ;
76321: LD_VAR 0 3
76325: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76326: LD_INT 0
76328: PPUSH
76329: PPUSH
76330: PPUSH
// if not unit or IsInUnit ( unit ) then
76331: LD_VAR 0 1
76335: NOT
76336: PUSH
76337: LD_VAR 0 1
76341: PPUSH
76342: CALL_OW 310
76346: OR
76347: IFFALSE 76351
// exit ;
76349: GO 76442
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76351: LD_ADDR_VAR 0 4
76355: PUSH
76356: LD_VAR 0 1
76360: PPUSH
76361: CALL_OW 250
76365: PPUSH
76366: LD_VAR 0 2
76370: PPUSH
76371: LD_INT 1
76373: PPUSH
76374: CALL_OW 272
76378: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76379: LD_ADDR_VAR 0 5
76383: PUSH
76384: LD_VAR 0 1
76388: PPUSH
76389: CALL_OW 251
76393: PPUSH
76394: LD_VAR 0 2
76398: PPUSH
76399: LD_INT 1
76401: PPUSH
76402: CALL_OW 273
76406: ST_TO_ADDR
// if ValidHex ( x , y ) then
76407: LD_VAR 0 4
76411: PPUSH
76412: LD_VAR 0 5
76416: PPUSH
76417: CALL_OW 488
76421: IFFALSE 76442
// ComTurnXY ( unit , x , y ) ;
76423: LD_VAR 0 1
76427: PPUSH
76428: LD_VAR 0 4
76432: PPUSH
76433: LD_VAR 0 5
76437: PPUSH
76438: CALL_OW 118
// end ;
76442: LD_VAR 0 3
76446: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76447: LD_INT 0
76449: PPUSH
76450: PPUSH
// result := false ;
76451: LD_ADDR_VAR 0 3
76455: PUSH
76456: LD_INT 0
76458: ST_TO_ADDR
// if not units then
76459: LD_VAR 0 2
76463: NOT
76464: IFFALSE 76468
// exit ;
76466: GO 76513
// for i in units do
76468: LD_ADDR_VAR 0 4
76472: PUSH
76473: LD_VAR 0 2
76477: PUSH
76478: FOR_IN
76479: IFFALSE 76511
// if See ( side , i ) then
76481: LD_VAR 0 1
76485: PPUSH
76486: LD_VAR 0 4
76490: PPUSH
76491: CALL_OW 292
76495: IFFALSE 76509
// begin result := true ;
76497: LD_ADDR_VAR 0 3
76501: PUSH
76502: LD_INT 1
76504: ST_TO_ADDR
// exit ;
76505: POP
76506: POP
76507: GO 76513
// end ;
76509: GO 76478
76511: POP
76512: POP
// end ;
76513: LD_VAR 0 3
76517: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76518: LD_INT 0
76520: PPUSH
76521: PPUSH
76522: PPUSH
76523: PPUSH
// if not unit or not points then
76524: LD_VAR 0 1
76528: NOT
76529: PUSH
76530: LD_VAR 0 2
76534: NOT
76535: OR
76536: IFFALSE 76540
// exit ;
76538: GO 76630
// dist := 99999 ;
76540: LD_ADDR_VAR 0 5
76544: PUSH
76545: LD_INT 99999
76547: ST_TO_ADDR
// for i in points do
76548: LD_ADDR_VAR 0 4
76552: PUSH
76553: LD_VAR 0 2
76557: PUSH
76558: FOR_IN
76559: IFFALSE 76628
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76561: LD_ADDR_VAR 0 6
76565: PUSH
76566: LD_VAR 0 1
76570: PPUSH
76571: LD_VAR 0 4
76575: PUSH
76576: LD_INT 1
76578: ARRAY
76579: PPUSH
76580: LD_VAR 0 4
76584: PUSH
76585: LD_INT 2
76587: ARRAY
76588: PPUSH
76589: CALL_OW 297
76593: ST_TO_ADDR
// if tmpDist < dist then
76594: LD_VAR 0 6
76598: PUSH
76599: LD_VAR 0 5
76603: LESS
76604: IFFALSE 76626
// begin result := i ;
76606: LD_ADDR_VAR 0 3
76610: PUSH
76611: LD_VAR 0 4
76615: ST_TO_ADDR
// dist := tmpDist ;
76616: LD_ADDR_VAR 0 5
76620: PUSH
76621: LD_VAR 0 6
76625: ST_TO_ADDR
// end ; end ;
76626: GO 76558
76628: POP
76629: POP
// end ; end_of_file
76630: LD_VAR 0 3
76634: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76635: LD_VAR 0 1
76639: PUSH
76640: LD_INT 200
76642: DOUBLE
76643: GREATEREQUAL
76644: IFFALSE 76652
76646: LD_INT 299
76648: DOUBLE
76649: LESSEQUAL
76650: IFTRUE 76654
76652: GO 76686
76654: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76655: LD_VAR 0 1
76659: PPUSH
76660: LD_VAR 0 2
76664: PPUSH
76665: LD_VAR 0 3
76669: PPUSH
76670: LD_VAR 0 4
76674: PPUSH
76675: LD_VAR 0 5
76679: PPUSH
76680: CALL 32661 0 5
76684: GO 76763
76686: LD_INT 300
76688: DOUBLE
76689: GREATEREQUAL
76690: IFFALSE 76698
76692: LD_INT 399
76694: DOUBLE
76695: LESSEQUAL
76696: IFTRUE 76700
76698: GO 76762
76700: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76701: LD_VAR 0 1
76705: PPUSH
76706: LD_VAR 0 2
76710: PPUSH
76711: LD_VAR 0 3
76715: PPUSH
76716: LD_VAR 0 4
76720: PPUSH
76721: LD_VAR 0 5
76725: PPUSH
76726: LD_VAR 0 6
76730: PPUSH
76731: LD_VAR 0 7
76735: PPUSH
76736: LD_VAR 0 8
76740: PPUSH
76741: LD_VAR 0 9
76745: PPUSH
76746: LD_VAR 0 10
76750: PPUSH
76751: LD_VAR 0 11
76755: PPUSH
76756: CALL 30559 0 11
76760: GO 76763
76762: POP
// end ;
76763: PPOPN 11
76765: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76766: LD_VAR 0 1
76770: PPUSH
76771: LD_VAR 0 2
76775: PPUSH
76776: LD_VAR 0 3
76780: PPUSH
76781: LD_VAR 0 4
76785: PPUSH
76786: LD_VAR 0 5
76790: PPUSH
76791: CALL 32653 0 5
// end ; end_of_file
76795: PPOPN 5
76797: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76798: LD_VAR 0 1
76802: PPUSH
76803: LD_VAR 0 2
76807: PPUSH
76808: LD_VAR 0 3
76812: PPUSH
76813: LD_VAR 0 4
76817: PPUSH
76818: LD_VAR 0 5
76822: PPUSH
76823: LD_VAR 0 6
76827: PPUSH
76828: CALL 18754 0 6
// end ;
76832: PPOPN 6
76834: END
