// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 378 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 466 0 0
// PrepareRussian ;
  29: CALL 3051 0 0
// PrepareAmerican ;
  33: CALL 1137 0 0
// PrepareCornell ;
  37: CALL 2265 0 0
// PrepareWesternBase ;
  41: CALL 2494 0 0
// Action ;
  45: CALL 5299 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_OWVAR 67
 220: ARRAY
 221: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 ] [ Difficulty ] ;
 222: LD_ADDR_EXP 20
 226: PUSH
 227: LD_INT 600
 229: PUSH
 230: LD_INT 500
 232: PUSH
 233: LD_INT 400
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_OWVAR 67
 245: ARRAY
 246: ST_TO_ADDR
// end_mission_allowed := false ;
 247: LD_ADDR_EXP 21
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// save_others := [ ] ;
 255: LD_ADDR_EXP 22
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// save_group := [ ] ;
 262: LD_ADDR_EXP 23
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// show_query := true ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// wait_for_them := false ;
 277: LD_ADDR_EXP 25
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// veh_on_meta := false ;
 285: LD_ADDR_EXP 28
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// send_spec_patrol := false ;
 293: LD_ADDR_EXP 30
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// prepare_siege := false ;
 301: LD_ADDR_EXP 31
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// send_attack_on_cornel := false ;
 309: LD_ADDR_EXP 32
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 317: LD_ADDR_EXP 26
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// game_end := false ;
 325: LD_ADDR_EXP 33
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// lose_counter := 0 ;
 333: LD_ADDR_EXP 34
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// powell_warn := 0 ;
 341: LD_ADDR_EXP 35
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// save_counter := 0 ;
 349: LD_ADDR_EXP 36
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// cornel_saved := false ;
 357: LD_ADDR_EXP 27
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// ach_counter := 0 ;
 365: LD_ADDR_EXP 13
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// end ;
 373: LD_VAR 0 1
 377: RET
// function SetDiplomacy ; begin
 378: LD_INT 0
 380: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 381: LD_INT 1
 383: PPUSH
 384: LD_INT 4
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 397: LD_INT 1
 399: PPUSH
 400: LD_INT 8
 402: PPUSH
 403: LD_INT 1
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 413: LD_INT 3
 415: PPUSH
 416: LD_INT 6
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 429: LD_INT 4
 431: PPUSH
 432: LD_INT 6
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: LD_INT 1
 440: PPUSH
 441: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 445: LD_INT 3
 447: PPUSH
 448: LD_INT 8
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: LD_INT 1
 456: PPUSH
 457: CALL_OW 80
// end ;
 461: LD_VAR 0 1
 465: RET
// export function DebugMode ; var i ; begin
 466: LD_INT 0
 468: PPUSH
 469: PPUSH
// FogOff ( 1 ) ;
 470: LD_INT 1
 472: PPUSH
 473: CALL_OW 344
// debug_strings := [ ] ;
 477: LD_ADDR_OWVAR 48
 481: PUSH
 482: EMPTY
 483: ST_TO_ADDR
// end ; end_of_file
 484: LD_VAR 0 1
 488: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 489: LD_INT 0
 491: PPUSH
// uc_side := side ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_VAR 0 1
 501: ST_TO_ADDR
// uc_nation := nation ;
 502: LD_ADDR_OWVAR 21
 506: PUSH
 507: LD_VAR 0 2
 511: ST_TO_ADDR
// vc_chassis := chassis ;
 512: LD_ADDR_OWVAR 37
 516: PUSH
 517: LD_VAR 0 3
 521: ST_TO_ADDR
// vc_engine := engine ;
 522: LD_ADDR_OWVAR 39
 526: PUSH
 527: LD_VAR 0 4
 531: ST_TO_ADDR
// vc_control := control ;
 532: LD_ADDR_OWVAR 38
 536: PUSH
 537: LD_VAR 0 5
 541: ST_TO_ADDR
// vc_weapon := weapon ;
 542: LD_ADDR_OWVAR 40
 546: PUSH
 547: LD_VAR 0 6
 551: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 552: LD_ADDR_OWVAR 41
 556: PUSH
 557: LD_VAR 0 7
 561: ST_TO_ADDR
// result := CreateVehicle ;
 562: LD_ADDR_VAR 0 8
 566: PUSH
 567: CALL_OW 45
 571: ST_TO_ADDR
// end ;
 572: LD_VAR 0 8
 576: RET
// export function SayX ( units , ident ) ; var i ; begin
 577: LD_INT 0
 579: PPUSH
 580: PPUSH
// result := false ;
 581: LD_ADDR_VAR 0 3
 585: PUSH
 586: LD_INT 0
 588: ST_TO_ADDR
// if not units then
 589: LD_VAR 0 1
 593: NOT
 594: IFFALSE 598
// exit ;
 596: GO 652
// for i in units do
 598: LD_ADDR_VAR 0 4
 602: PUSH
 603: LD_VAR 0 1
 607: PUSH
 608: FOR_IN
 609: IFFALSE 650
// if IsOk ( i ) then
 611: LD_VAR 0 4
 615: PPUSH
 616: CALL_OW 302
 620: IFFALSE 648
// begin Say ( i , ident ) ;
 622: LD_VAR 0 4
 626: PPUSH
 627: LD_VAR 0 2
 631: PPUSH
 632: CALL_OW 88
// result := i ;
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: LD_VAR 0 4
 645: ST_TO_ADDR
// break ;
 646: GO 650
// end ;
 648: GO 608
 650: POP
 651: POP
// end ;
 652: LD_VAR 0 3
 656: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 657: LD_INT 0
 659: PPUSH
 660: PPUSH
 661: PPUSH
 662: PPUSH
// for i = 1 to count do
 663: LD_ADDR_VAR 0 8
 667: PUSH
 668: DOUBLE
 669: LD_INT 1
 671: DEC
 672: ST_TO_ADDR
 673: LD_VAR 0 6
 677: PUSH
 678: FOR_TO
 679: IFFALSE 760
// begin uc_side = side ;
 681: LD_ADDR_OWVAR 20
 685: PUSH
 686: LD_VAR 0 1
 690: ST_TO_ADDR
// uc_nation = nation ;
 691: LD_ADDR_OWVAR 21
 695: PUSH
 696: LD_VAR 0 2
 700: ST_TO_ADDR
// hc_gallery =  ;
 701: LD_ADDR_OWVAR 33
 705: PUSH
 706: LD_STRING 
 708: ST_TO_ADDR
// hc_name =  ;
 709: LD_ADDR_OWVAR 26
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 717: LD_INT 0
 719: PPUSH
 720: LD_VAR 0 5
 724: PPUSH
 725: LD_VAR 0 4
 729: PPUSH
 730: CALL_OW 380
// un = CreateHuman ;
 734: LD_ADDR_VAR 0 10
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 744: LD_VAR 0 10
 748: PPUSH
 749: LD_VAR 0 3
 753: PPUSH
 754: CALL_OW 52
// end ;
 758: GO 678
 760: POP
 761: POP
// end ;
 762: LD_VAR 0 7
 766: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 767: LD_INT 0
 769: PPUSH
 770: PPUSH
 771: PPUSH
// uc_side := GetSide ( b ) ;
 772: LD_ADDR_OWVAR 20
 776: PUSH
 777: LD_VAR 0 2
 781: PPUSH
 782: CALL_OW 255
 786: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 787: LD_ADDR_OWVAR 21
 791: PUSH
 792: LD_VAR 0 2
 796: PPUSH
 797: CALL_OW 248
 801: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 802: LD_INT 0
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_VAR 0 1
 812: PPUSH
 813: CALL_OW 380
// un = CreateHuman ;
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: CALL_OW 44
 826: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 827: LD_ADDR_VAR 0 5
 831: PUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 254
 841: PUSH
 842: LD_INT 3
 844: MINUS
 845: ST_TO_ADDR
// if dir < 0 then
 846: LD_VAR 0 5
 850: PUSH
 851: LD_INT 0
 853: LESS
 854: IFFALSE 870
// dir := 6 + dir ;
 856: LD_ADDR_VAR 0 5
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: LD_VAR 0 5
 868: PLUS
 869: ST_TO_ADDR
// SetDir ( un , dir ) ;
 870: LD_VAR 0 4
 874: PPUSH
 875: LD_VAR 0 5
 879: PPUSH
 880: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 884: LD_VAR 0 4
 888: PPUSH
 889: LD_VAR 0 2
 893: PPUSH
 894: CALL_OW 52
// end ;
 898: LD_VAR 0 3
 902: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 903: LD_INT 0
 905: PPUSH
 906: PPUSH
 907: PPUSH
// result := false ;
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: LD_INT 0
 915: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 34
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 69
 949: ST_TO_ADDR
// for i in filter do
 950: LD_ADDR_VAR 0 4
 954: PUSH
 955: LD_VAR 0 3
 959: PUSH
 960: FOR_IN
 961: IFFALSE 992
// if IsDrivenBy ( i ) = unit then
 963: LD_VAR 0 4
 967: PPUSH
 968: CALL_OW 311
 972: PUSH
 973: LD_VAR 0 1
 977: EQUAL
 978: IFFALSE 990
// begin result := true ;
 980: LD_ADDR_VAR 0 2
 984: PUSH
 985: LD_INT 1
 987: ST_TO_ADDR
// break ;
 988: GO 992
// end ;
 990: GO 960
 992: POP
 993: POP
// end ;
 994: LD_VAR 0 2
 998: RET
// export function FindFreePlace ( blist ) ; var i ; begin
 999: LD_INT 0
1001: PPUSH
1002: PPUSH
// result := false ;
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_INT 0
1010: ST_TO_ADDR
// if not blist then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1064
// for i in blist do
1020: LD_ADDR_VAR 0 3
1024: PUSH
1025: LD_VAR 0 1
1029: PUSH
1030: FOR_IN
1031: IFFALSE 1062
// if UnitsInside ( i ) < 6 then
1033: LD_VAR 0 3
1037: PPUSH
1038: CALL_OW 313
1042: PUSH
1043: LD_INT 6
1045: LESS
1046: IFFALSE 1060
// begin result := i ;
1048: LD_ADDR_VAR 0 2
1052: PUSH
1053: LD_VAR 0 3
1057: ST_TO_ADDR
// break ;
1058: GO 1062
// end ;
1060: GO 1030
1062: POP
1063: POP
// end ;
1064: LD_VAR 0 2
1068: RET
// export function CountTime ( timer , mode ) ; begin
1069: LD_INT 0
1071: PPUSH
// if not timer then
1072: LD_VAR 0 1
1076: NOT
1077: IFFALSE 1081
// exit ;
1079: GO 1132
// if mode in [ asc , up , + ] then
1081: LD_VAR 0 2
1085: PUSH
1086: LD_STRING asc
1088: PUSH
1089: LD_STRING up
1091: PUSH
1092: LD_STRING +
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: IN
1100: IFFALSE 1118
// result := timer + 0 0$01 else
1102: LD_ADDR_VAR 0 3
1106: PUSH
1107: LD_VAR 0 1
1111: PUSH
1112: LD_INT 35
1114: PLUS
1115: ST_TO_ADDR
1116: GO 1132
// result := timer - 0 0$01 ;
1118: LD_ADDR_VAR 0 3
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: LD_INT 35
1130: MINUS
1131: ST_TO_ADDR
// end ; end_of_file
1132: LD_VAR 0 3
1136: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// uc_side := 4 ;
1147: LD_ADDR_OWVAR 20
1151: PUSH
1152: LD_INT 4
1154: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1155: LD_ADDR_EXP 46
1159: PUSH
1160: LD_STRING Powell
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: LD_STRING 
1168: PPUSH
1169: CALL 33111 0 3
1173: ST_TO_ADDR
// uc_side := 1 ;
1174: LD_ADDR_OWVAR 20
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// uc_nation := 1 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// if debug then
1190: LD_EXP 1
1194: IFFALSE 1324
// begin for i = 1 to 4 do
1196: LD_ADDR_VAR 0 2
1200: PUSH
1201: DOUBLE
1202: LD_INT 1
1204: DEC
1205: ST_TO_ADDR
1206: LD_INT 4
1208: PUSH
1209: FOR_TO
1210: IFFALSE 1261
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1212: LD_INT 0
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 12
1225: PPUSH
1226: LD_INT 3
1228: PPUSH
1229: CALL_OW 380
// un := CreateHuman ;
1233: LD_ADDR_VAR 0 3
1237: PUSH
1238: CALL_OW 44
1242: ST_TO_ADDR
// others := others ^ un ;
1243: LD_ADDR_VAR 0 5
1247: PUSH
1248: LD_VAR 0 5
1252: PUSH
1253: LD_VAR 0 3
1257: ADD
1258: ST_TO_ADDR
// end ;
1259: GO 1209
1261: POP
1262: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1263: LD_ADDR_VAR 0 6
1267: PUSH
1268: LD_INT 21
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 51
1279: PUSH
1280: LD_INT 90
1282: PUSH
1283: LD_INT 504
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 21
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 1
1302: PUSH
1303: LD_INT 51
1305: PUSH
1306: LD_INT 80
1308: PUSH
1309: LD_INT 750
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1324: LD_ADDR_EXP 37
1328: PUSH
1329: LD_STRING JMM
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 3
1342: PPUSH
1343: CALL 33111 0 3
1347: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1348: LD_ADDR_EXP 38
1352: PUSH
1353: LD_STRING Bobby
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 3
1366: PPUSH
1367: CALL 33111 0 3
1371: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1372: LD_ADDR_EXP 39
1376: PUSH
1377: LD_STRING Cyrus
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 3
1390: PPUSH
1391: CALL 33111 0 3
1395: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1396: LD_ADDR_EXP 40
1400: PUSH
1401: LD_STRING Lisa
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 3
1414: PPUSH
1415: CALL 33111 0 3
1419: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1420: LD_ADDR_EXP 41
1424: PUSH
1425: LD_STRING Khatam
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 3
1438: PPUSH
1439: CALL 33111 0 3
1443: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1444: LD_ADDR_EXP 42
1448: PUSH
1449: LD_STRING Brian
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 3
1462: PPUSH
1463: CALL 33111 0 3
1467: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1468: LD_ADDR_EXP 43
1472: PUSH
1473: LD_STRING Jerry
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 3
1486: PPUSH
1487: CALL 33111 0 3
1491: ST_TO_ADDR
// if Bobby then
1492: LD_EXP 38
1496: IFFALSE 1527
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1498: LD_ADDR_VAR 0 4
1502: PUSH
1503: LD_VAR 0 4
1507: PPUSH
1508: LD_VAR 0 4
1512: PUSH
1513: LD_INT 1
1515: PLUS
1516: PPUSH
1517: LD_EXP 38
1521: PPUSH
1522: CALL_OW 2
1526: ST_TO_ADDR
// if Cyrus then
1527: LD_EXP 39
1531: IFFALSE 1562
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: LD_VAR 0 4
1542: PPUSH
1543: LD_VAR 0 4
1547: PUSH
1548: LD_INT 1
1550: PLUS
1551: PPUSH
1552: LD_EXP 39
1556: PPUSH
1557: CALL_OW 2
1561: ST_TO_ADDR
// if Lisa then
1562: LD_EXP 40
1566: IFFALSE 1597
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1568: LD_ADDR_VAR 0 4
1572: PUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: LD_VAR 0 4
1582: PUSH
1583: LD_INT 1
1585: PLUS
1586: PPUSH
1587: LD_EXP 40
1591: PPUSH
1592: CALL_OW 2
1596: ST_TO_ADDR
// if Khatam then
1597: LD_EXP 41
1601: IFFALSE 1632
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1603: LD_ADDR_VAR 0 4
1607: PUSH
1608: LD_VAR 0 4
1612: PPUSH
1613: LD_VAR 0 4
1617: PUSH
1618: LD_INT 1
1620: PLUS
1621: PPUSH
1622: LD_EXP 41
1626: PPUSH
1627: CALL_OW 2
1631: ST_TO_ADDR
// if Brian then
1632: LD_EXP 42
1636: IFFALSE 1667
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1638: LD_ADDR_VAR 0 4
1642: PUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_VAR 0 4
1652: PUSH
1653: LD_INT 1
1655: PLUS
1656: PPUSH
1657: LD_EXP 42
1661: PPUSH
1662: CALL_OW 2
1666: ST_TO_ADDR
// if Jerry then
1667: LD_EXP 43
1671: IFFALSE 1702
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: LD_VAR 0 4
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: PPUSH
1692: LD_EXP 43
1696: PPUSH
1697: CALL_OW 2
1701: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1702: LD_STRING 02_other_survivors
1704: PPUSH
1705: CALL_OW 28
1709: IFFALSE 1724
// others := CreateCharacterSet ( 02_other_survivors ) ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: LD_STRING 02_other_survivors
1718: PPUSH
1719: CALL_OW 31
1723: ST_TO_ADDR
// if others then
1724: LD_VAR 0 5
1728: IFFALSE 1753
// begin tmp := tmp ^ others ;
1730: LD_ADDR_VAR 0 4
1734: PUSH
1735: LD_VAR 0 4
1739: PUSH
1740: LD_VAR 0 5
1744: ADD
1745: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1746: LD_STRING 02_other_survivors
1748: PPUSH
1749: CALL_OW 40
// end ; jmm_units := tmp ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_VAR 0 4
1762: ST_TO_ADDR
// if not vehicles then
1763: LD_VAR 0 6
1767: NOT
1768: IFFALSE 1786
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1770: LD_ADDR_VAR 0 6
1774: PUSH
1775: LD_STRING 02_tanks_1
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 30
1785: ST_TO_ADDR
// if vehicles then
1786: LD_VAR 0 6
1790: IFFALSE 1984
// begin got_mech := false ;
1792: LD_ADDR_VAR 0 7
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1800: LD_VAR 0 4
1804: PPUSH
1805: LD_INT 25
1807: PUSH
1808: LD_INT 3
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 72
1819: IFFALSE 1829
// got_mech := true ;
1821: LD_ADDR_VAR 0 7
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// for i = 1 to vehicles do
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: DOUBLE
1835: LD_INT 1
1837: DEC
1838: ST_TO_ADDR
1839: LD_VAR 0 6
1843: PUSH
1844: FOR_TO
1845: IFFALSE 1982
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1847: LD_ADDR_VAR 0 3
1851: PUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: LD_VAR 0 6
1862: PUSH
1863: LD_VAR 0 2
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: PPUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PUSH
1884: LD_INT 2
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 6
1892: PUSH
1893: LD_VAR 0 2
1897: ARRAY
1898: PUSH
1899: LD_INT 3
1901: ARRAY
1902: PPUSH
1903: LD_VAR 0 6
1907: PUSH
1908: LD_VAR 0 2
1912: ARRAY
1913: PUSH
1914: LD_INT 4
1916: ARRAY
1917: PPUSH
1918: LD_INT 40
1920: PPUSH
1921: CALL 489 0 7
1925: ST_TO_ADDR
// if not got_mech then
1926: LD_VAR 0 7
1930: NOT
1931: IFFALSE 1957
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1933: LD_VAR 0 3
1937: PPUSH
1938: LD_VAR 0 6
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PUSH
1949: LD_INT 6
1951: ARRAY
1952: PPUSH
1953: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1957: LD_ADDR_VAR 0 4
1961: PUSH
1962: LD_VAR 0 4
1966: PPUSH
1967: LD_INT 1
1969: PPUSH
1970: LD_VAR 0 3
1974: PPUSH
1975: CALL_OW 2
1979: ST_TO_ADDR
// end ;
1980: GO 1844
1982: POP
1983: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1984: LD_EXP 37
1988: PPUSH
1989: LD_INT 194
1991: PPUSH
1992: LD_INT 119
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 48
// if tmp then
2002: LD_VAR 0 4
2006: IFFALSE 2194
// begin for i in tmp do
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: LD_VAR 0 4
2017: PUSH
2018: FOR_IN
2019: IFFALSE 2192
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2021: LD_VAR 0 2
2025: PPUSH
2026: CALL_OW 257
2030: PUSH
2031: LD_INT 1
2033: NONEQUAL
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 41
2044: NONEQUAL
2045: AND
2046: IFFALSE 2060
// SetClass ( i , 1 ) ;
2048: LD_VAR 0 2
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 336
// if i = Khatam then
2060: LD_VAR 0 2
2064: PUSH
2065: LD_EXP 41
2069: EQUAL
2070: IFFALSE 2084
// SetClass ( i , 4 ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_INT 4
2079: PPUSH
2080: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2084: LD_ADDR_VAR 0 8
2088: PUSH
2089: LD_INT 22
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 2
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 58
2111: PUSH
2112: EMPTY
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PPUSH
2120: CALL_OW 69
2124: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2125: LD_VAR 0 2
2129: PPUSH
2130: CALL_OW 247
2134: PUSH
2135: LD_INT 1
2137: EQUAL
2138: PUSH
2139: LD_VAR 0 8
2143: AND
2144: IFFALSE 2166
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2146: LD_VAR 0 2
2150: PPUSH
2151: LD_VAR 0 8
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PPUSH
2160: CALL_OW 52
2164: GO 2181
// PlaceUnitArea ( i , startArea , false ) ;
2166: LD_VAR 0 2
2170: PPUSH
2171: LD_INT 1
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: CALL_OW 49
// ComHold ( i ) ;
2181: LD_VAR 0 2
2185: PPUSH
2186: CALL_OW 140
// end ;
2190: GO 2018
2192: POP
2193: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2194: LD_ADDR_EXP 7
2198: PUSH
2199: LD_STRING 02_mikhailStatus_1
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 30
2209: ST_TO_ADDR
// if not bierezov_exist and not debug then
2210: LD_EXP 7
2214: NOT
2215: PUSH
2216: LD_EXP 1
2220: NOT
2221: AND
2222: IFFALSE 2226
// exit ;
2224: GO 2260
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2226: LD_ADDR_EXP 45
2230: PUSH
2231: LD_STRING Mikhail
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 33111 0 3
2244: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2245: LD_EXP 45
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: LD_VAR 0 1
2264: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2265: LD_INT 0
2267: PPUSH
2268: PPUSH
2269: PPUSH
2270: PPUSH
// uc_side := 4 ;
2271: LD_ADDR_OWVAR 20
2275: PUSH
2276: LD_INT 4
2278: ST_TO_ADDR
// uc_nation := 1 ;
2279: LD_ADDR_OWVAR 21
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2287: LD_ADDR_EXP 44
2291: PUSH
2292: LD_STRING Cornell
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_STRING 
2300: PPUSH
2301: CALL 33111 0 3
2305: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2306: LD_ADDR_EXP 6
2310: PUSH
2311: LD_INT 9
2313: PUSH
2314: LD_EXP 4
2318: MINUS
2319: ST_TO_ADDR
// tmp := [ ] ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: EMPTY
2326: ST_TO_ADDR
// if cornel_units < 4 then
2327: LD_EXP 6
2331: PUSH
2332: LD_INT 4
2334: LESS
2335: IFFALSE 2345
// cornel_units := 4 ;
2337: LD_ADDR_EXP 6
2341: PUSH
2342: LD_INT 4
2344: ST_TO_ADDR
// for i = 1 to cornel_units do
2345: LD_ADDR_VAR 0 4
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_EXP 6
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2459
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2363: LD_INT 0
2365: PPUSH
2366: LD_INT 1
2368: PUSH
2369: LD_INT 1
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: LD_INT 2
2377: PUSH
2378: LD_INT 4
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: LD_VAR 0 4
2392: PUSH
2393: LD_INT 5
2395: MOD
2396: PUSH
2397: LD_INT 1
2399: PLUS
2400: ARRAY
2401: PPUSH
2402: LD_INT 2
2404: PPUSH
2405: CALL_OW 380
// un := CreateHuman ;
2409: LD_ADDR_VAR 0 3
2413: PUSH
2414: CALL_OW 44
2418: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: LD_INT 1
2431: PPUSH
2432: LD_VAR 0 3
2436: PPUSH
2437: CALL_OW 2
2441: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2442: LD_VAR 0 3
2446: PPUSH
2447: LD_INT 2
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: CALL_OW 49
// end ;
2457: GO 2360
2459: POP
2460: POP
// cornel_units := tmp ;
2461: LD_ADDR_EXP 6
2465: PUSH
2466: LD_VAR 0 2
2470: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2471: LD_EXP 44
2475: PPUSH
2476: LD_INT 191
2478: PPUSH
2479: LD_INT 106
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: CALL_OW 48
// end ;
2489: LD_VAR 0 1
2493: RET
// export function PrepareWesternBase ; var i ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
// uc_side := 8 ;
2498: LD_ADDR_OWVAR 20
2502: PUSH
2503: LD_INT 8
2505: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2506: LD_ADDR_EXP 47
2510: PUSH
2511: LD_STRING Lynch
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: LD_STRING 
2519: PPUSH
2520: CALL 33111 0 3
2524: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2525: LD_ADDR_EXP 48
2529: PUSH
2530: LD_STRING Walker
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 33111 0 3
2543: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2544: LD_ADDR_EXP 49
2548: PUSH
2549: LD_STRING Turner
2551: PPUSH
2552: LD_INT 0
2554: PPUSH
2555: LD_STRING 
2557: PPUSH
2558: CALL 33111 0 3
2562: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2563: LD_ADDR_EXP 50
2567: PUSH
2568: LD_STRING Jillian
2570: PPUSH
2571: LD_INT 0
2573: PPUSH
2574: LD_STRING 
2576: PPUSH
2577: CALL 33111 0 3
2581: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_EXP 47
2591: PUSH
2592: LD_EXP 48
2596: PUSH
2597: LD_EXP 49
2601: PUSH
2602: LD_EXP 50
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: FOR_IN
2614: IFFALSE 2642
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 3
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// ComHold ( i ) ;
2631: LD_VAR 0 2
2635: PPUSH
2636: CALL_OW 140
// end ;
2640: GO 2613
2642: POP
2643: POP
// end ;
2644: LD_VAR 0 1
2648: RET
// export function SelectGroup ; var units , selected , i ; begin
2649: LD_INT 0
2651: PPUSH
2652: PPUSH
2653: PPUSH
2654: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2655: LD_ADDR_VAR 0 2
2659: PUSH
2660: LD_EXP 37
2664: PUSH
2665: LD_INT -3
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_EXP 4
2676: ADD
2677: PUSH
2678: LD_INT -2
2680: PUSH
2681: LD_INT -4
2683: PUSH
2684: LD_EXP 44
2688: PUSH
2689: LD_EXP 45
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: ADD
2700: PUSH
2701: LD_INT -3
2703: PUSH
2704: EMPTY
2705: LIST
2706: ADD
2707: PUSH
2708: LD_EXP 6
2712: ADD
2713: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select five characters to go with you , 4 , 4 , units , [ ] ) ;
2714: LD_ADDR_VAR 0 3
2718: PUSH
2719: LD_EXP 37
2723: PUSH
2724: LD_STRING Select five characters to go with you
2726: PPUSH
2727: LD_INT 4
2729: PPUSH
2730: LD_INT 4
2732: PPUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: EMPTY
2739: PPUSH
2740: CALL_OW 42
2744: ADD
2745: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2746: LD_ADDR_EXP 6
2750: PUSH
2751: LD_EXP 4
2755: PUSH
2756: LD_EXP 6
2760: UNION
2761: PUSH
2762: LD_VAR 0 3
2766: DIFF
2767: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2768: LD_ADDR_VAR 0 4
2772: PUSH
2773: LD_EXP 6
2777: PUSH
2778: LD_EXP 45
2782: ADD
2783: PUSH
2784: FOR_IN
2785: IFFALSE 2816
// if GetSide ( i ) = 1 then
2787: LD_VAR 0 4
2791: PPUSH
2792: CALL_OW 255
2796: PUSH
2797: LD_INT 1
2799: EQUAL
2800: IFFALSE 2814
// SetSide ( i , 4 ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 4
2809: PPUSH
2810: CALL_OW 235
2814: GO 2784
2816: POP
2817: POP
// for i in selected do
2818: LD_ADDR_VAR 0 4
2822: PUSH
2823: LD_VAR 0 3
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2860
// if GetSide ( i ) = 4 then
2831: LD_VAR 0 4
2835: PPUSH
2836: CALL_OW 255
2840: PUSH
2841: LD_INT 4
2843: EQUAL
2844: IFFALSE 2858
// SetSide ( i , 1 ) ;
2846: LD_VAR 0 4
2850: PPUSH
2851: LD_INT 1
2853: PPUSH
2854: CALL_OW 235
2858: GO 2828
2860: POP
2861: POP
// jmm_units := jmm_units diff cornel_units ;
2862: LD_ADDR_EXP 4
2866: PUSH
2867: LD_EXP 4
2871: PUSH
2872: LD_EXP 6
2876: DIFF
2877: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2878: LD_EXP 38
2882: PPUSH
2883: CALL_OW 255
2887: PUSH
2888: LD_INT 4
2890: EQUAL
2891: IFFALSE 2906
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2893: LD_EXP 3
2897: PUSH
2898: LD_STRING Bobby
2900: STR
2901: PPUSH
2902: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2906: LD_EXP 39
2910: PPUSH
2911: CALL_OW 255
2915: PUSH
2916: LD_INT 4
2918: EQUAL
2919: IFFALSE 2934
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2921: LD_EXP 3
2925: PUSH
2926: LD_STRING Cyrus
2928: STR
2929: PPUSH
2930: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2934: LD_EXP 40
2938: PPUSH
2939: CALL_OW 255
2943: PUSH
2944: LD_INT 4
2946: EQUAL
2947: IFFALSE 2962
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2949: LD_EXP 3
2953: PUSH
2954: LD_STRING Lisa
2956: STR
2957: PPUSH
2958: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2962: LD_EXP 41
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 4
2974: EQUAL
2975: IFFALSE 2990
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2977: LD_EXP 3
2981: PUSH
2982: LD_STRING Khatam
2984: STR
2985: PPUSH
2986: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2990: LD_EXP 42
2994: PPUSH
2995: CALL_OW 255
2999: PUSH
3000: LD_INT 4
3002: EQUAL
3003: IFFALSE 3018
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3005: LD_EXP 3
3009: PUSH
3010: LD_STRING Brian
3012: STR
3013: PPUSH
3014: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3018: LD_EXP 43
3022: PPUSH
3023: CALL_OW 255
3027: PUSH
3028: LD_INT 4
3030: EQUAL
3031: IFFALSE 3046
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3033: LD_EXP 3
3037: PUSH
3038: LD_STRING Jerry
3040: STR
3041: PPUSH
3042: CALL_OW 40
// end ; end_of_file
3046: LD_VAR 0 1
3050: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3051: LD_INT 0
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
// ru_alert := false ;
3066: LD_ADDR_EXP 60
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// ru_produce_list := [ ] ;
3074: LD_ADDR_EXP 57
3078: PUSH
3079: EMPTY
3080: ST_TO_ADDR
// if Difficulty > 1 then
3081: LD_OWVAR 67
3085: PUSH
3086: LD_INT 1
3088: GREATER
3089: IFFALSE 3177
// begin uc_side := 3 ;
3091: LD_ADDR_OWVAR 20
3095: PUSH
3096: LD_INT 3
3098: ST_TO_ADDR
// uc_nation := 3 ;
3099: LD_ADDR_OWVAR 21
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// bc_type := b_breastwork ;
3107: LD_ADDR_OWVAR 42
3111: PUSH
3112: LD_INT 31
3114: ST_TO_ADDR
// bc_level := Difficulty ;
3115: LD_ADDR_OWVAR 43
3119: PUSH
3120: LD_OWVAR 67
3124: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3125: LD_INT 22
3127: PPUSH
3128: LD_INT 14
3130: PPUSH
3131: LD_INT 0
3133: PPUSH
3134: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3138: LD_INT 48
3140: PPUSH
3141: LD_INT 46
3143: PPUSH
3144: LD_INT 0
3146: PPUSH
3147: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3151: LD_INT 86
3153: PPUSH
3154: LD_INT 65
3156: PPUSH
3157: LD_INT 5
3159: PPUSH
3160: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3164: LD_INT 165
3166: PPUSH
3167: LD_INT 73
3169: PPUSH
3170: LD_INT 5
3172: PPUSH
3173: CALL_OW 47
// end ; if Difficulty = 3 then
3177: LD_OWVAR 67
3181: PUSH
3182: LD_INT 3
3184: EQUAL
3185: IFFALSE 3200
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3187: LD_INT 51
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 2
3195: PPUSH
3196: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3200: LD_ADDR_VAR 0 7
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 30
3220: PUSH
3221: LD_INT 31
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 30
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3252: LD_ADDR_VAR 0 8
3256: PUSH
3257: LD_INT 22
3259: PUSH
3260: LD_INT 3
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: LD_INT 30
3269: PUSH
3270: LD_INT 4
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PPUSH
3281: CALL_OW 69
3285: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3286: LD_ADDR_VAR 0 10
3290: PUSH
3291: LD_INT 22
3293: PUSH
3294: LD_INT 3
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 30
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PPUSH
3315: CALL_OW 69
3319: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3320: LD_ADDR_VAR 0 9
3324: PUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 30
3337: PUSH
3338: LD_INT 6
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 69
3353: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 30
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 69
3387: PUSH
3388: FOR_IN
3389: IFFALSE 3433
// begin SetResourceType ( GetBase ( i ) , mat_cans , 5000 ) ;
3391: LD_VAR 0 2
3395: PPUSH
3396: CALL_OW 274
3400: PPUSH
3401: LD_INT 1
3403: PPUSH
3404: LD_INT 5000
3406: PPUSH
3407: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 3000 ) ;
3411: LD_VAR 0 2
3415: PPUSH
3416: CALL_OW 274
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 3000
3426: PPUSH
3427: CALL_OW 277
// end ;
3431: GO 3388
3433: POP
3434: POP
// uc_side := 3 ;
3435: LD_ADDR_OWVAR 20
3439: PUSH
3440: LD_INT 3
3442: ST_TO_ADDR
// uc_nation := 3 ;
3443: LD_ADDR_OWVAR 21
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// skill := [ 2 , 3 , 4 ] [ Difficulty ] ;
3451: LD_ADDR_VAR 0 11
3455: PUSH
3456: LD_INT 2
3458: PUSH
3459: LD_INT 3
3461: PUSH
3462: LD_INT 4
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: PUSH
3470: LD_OWVAR 67
3474: ARRAY
3475: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3476: LD_ADDR_EXP 52
3480: PUSH
3481: LD_STRING Pokryshkin
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: LD_STRING 
3489: PPUSH
3490: CALL 33111 0 3
3494: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3495: LD_EXP 52
3499: PPUSH
3500: LD_INT 63
3502: PPUSH
3503: LD_INT 21
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3513: LD_EXP 52
3517: PPUSH
3518: CALL_OW 140
// InitHc ;
3522: CALL_OW 19
// for i in fac do
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: LD_VAR 0 10
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3590
// begin for j = 1 to 6 do
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: DOUBLE
3545: LD_INT 1
3547: DEC
3548: ST_TO_ADDR
3549: LD_INT 6
3551: PUSH
3552: FOR_TO
3553: IFFALSE 3586
// begin PrepareHuman ( false , 3 , skill ) ;
3555: LD_INT 0
3557: PPUSH
3558: LD_INT 3
3560: PPUSH
3561: LD_VAR 0 11
3565: PPUSH
3566: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3570: CALL_OW 44
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 52
// end ;
3584: GO 3552
3586: POP
3587: POP
// end ;
3588: GO 3536
3590: POP
3591: POP
// for i in lab do
3592: LD_ADDR_VAR 0 2
3596: PUSH
3597: LD_VAR 0 9
3601: PUSH
3602: FOR_IN
3603: IFFALSE 3636
// begin PrepareHuman ( false , 4 , skill ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_VAR 0 11
3615: PPUSH
3616: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3620: CALL_OW 44
3624: PPUSH
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 52
// end ;
3634: GO 3602
3636: POP
3637: POP
// for i in tw do
3638: LD_ADDR_VAR 0 2
3642: PUSH
3643: LD_VAR 0 7
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3698
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3651: LD_VAR 0 2
3655: PPUSH
3656: LD_INT 42
3658: PUSH
3659: LD_INT 43
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 1
3668: PPUSH
3669: LD_INT 2
3671: PPUSH
3672: CALL_OW 12
3676: ARRAY
3677: PPUSH
3678: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3682: LD_VAR 0 11
3686: PPUSH
3687: LD_VAR 0 2
3691: PPUSH
3692: CALL 767 0 2
// end ;
3696: GO 3648
3698: POP
3699: POP
// for i in bar do
3700: LD_ADDR_VAR 0 2
3704: PUSH
3705: LD_VAR 0 8
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3744
// begin PrepareHuman ( false , 1 , skill ) ;
3713: LD_INT 0
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_VAR 0 11
3723: PPUSH
3724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3728: CALL_OW 44
3732: PPUSH
3733: LD_VAR 0 2
3737: PPUSH
3738: CALL_OW 52
// end ;
3742: GO 3710
3744: POP
3745: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3746: LD_ADDR_VAR 0 13
3750: PUSH
3751: LD_INT 100
3753: PUSH
3754: LD_INT 9
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 135
3763: PUSH
3764: LD_INT 60
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 41
3773: PUSH
3774: LD_INT 6
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 22
3783: PUSH
3784: LD_INT 9
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: LD_INT 84
3793: PUSH
3794: LD_INT 14
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// vehicles := [ ] ;
3808: LD_ADDR_VAR 0 12
3812: PUSH
3813: EMPTY
3814: ST_TO_ADDR
// for i in spot_xy do
3815: LD_ADDR_VAR 0 2
3819: PUSH
3820: LD_VAR 0 13
3824: PUSH
3825: FOR_IN
3826: IFFALSE 3984
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3828: LD_ADDR_VAR 0 6
3832: PUSH
3833: LD_INT 3
3835: PPUSH
3836: LD_INT 3
3838: PPUSH
3839: LD_INT 22
3841: PPUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 42
3850: PUSH
3851: LD_INT 43
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: CALL_OW 12
3872: ARRAY
3873: PPUSH
3874: LD_INT 100
3876: PPUSH
3877: CALL 489 0 7
3881: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3882: LD_ADDR_VAR 0 12
3886: PUSH
3887: LD_VAR 0 12
3891: PPUSH
3892: LD_VAR 0 12
3896: PUSH
3897: LD_INT 1
3899: PLUS
3900: PPUSH
3901: LD_VAR 0 6
3905: PPUSH
3906: CALL_OW 2
3910: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3911: LD_VAR 0 6
3915: PPUSH
3916: LD_INT 3
3918: PPUSH
3919: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_VAR 0 2
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 2
3944: ARRAY
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 3
3958: PPUSH
3959: LD_VAR 0 11
3963: PPUSH
3964: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3968: CALL_OW 44
3972: PPUSH
3973: LD_VAR 0 6
3977: PPUSH
3978: CALL_OW 52
// end ;
3982: GO 3825
3984: POP
3985: POP
// for i = 1 to [ 5 , 7 , 8 ] [ Difficulty ] do
3986: LD_ADDR_VAR 0 2
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 5
3998: PUSH
3999: LD_INT 7
4001: PUSH
4002: LD_INT 8
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_OWVAR 67
4014: ARRAY
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4077
// begin PrepareHuman ( false , 1 , skill ) ;
4019: LD_INT 0
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_VAR 0 11
4029: PPUSH
4030: CALL_OW 380
// un := CreateHuman ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: CALL_OW 44
4043: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4044: LD_VAR 0 5
4048: PPUSH
4049: LD_INT 11
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4059: LD_ADDR_EXP 55
4063: PUSH
4064: LD_EXP 55
4068: PUSH
4069: LD_VAR 0 5
4073: ADD
4074: ST_TO_ADDR
// end ;
4075: GO 4016
4077: POP
4078: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4079: LD_ADDR_VAR 0 2
4083: PUSH
4084: DOUBLE
4085: LD_INT 1
4087: DEC
4088: ST_TO_ADDR
4089: LD_INT 2
4091: PUSH
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PUSH
4103: LD_OWVAR 67
4107: ARRAY
4108: PUSH
4109: FOR_TO
4110: IFFALSE 4170
// begin PrepareHuman ( false , 1 , skill ) ;
4112: LD_INT 0
4114: PPUSH
4115: LD_INT 1
4117: PPUSH
4118: LD_VAR 0 11
4122: PPUSH
4123: CALL_OW 380
// un := CreateHuman ;
4127: LD_ADDR_VAR 0 5
4131: PUSH
4132: CALL_OW 44
4136: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4137: LD_VAR 0 5
4141: PPUSH
4142: LD_INT 12
4144: PPUSH
4145: LD_INT 0
4147: PPUSH
4148: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4152: LD_ADDR_EXP 53
4156: PUSH
4157: LD_EXP 53
4161: PUSH
4162: LD_VAR 0 5
4166: ADD
4167: ST_TO_ADDR
// end ;
4168: GO 4109
4170: POP
4171: POP
// for i = 1 to 2 do
4172: LD_ADDR_VAR 0 2
4176: PUSH
4177: DOUBLE
4178: LD_INT 1
4180: DEC
4181: ST_TO_ADDR
4182: LD_INT 2
4184: PUSH
4185: FOR_TO
4186: IFFALSE 4252
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4188: LD_INT 1
4190: PPUSH
4191: LD_INT 1
4193: PPUSH
4194: LD_VAR 0 11
4198: PPUSH
4199: CALL_OW 380
// un := CreateHuman ;
4203: LD_ADDR_VAR 0 5
4207: PUSH
4208: CALL_OW 44
4212: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4213: LD_VAR 0 5
4217: PPUSH
4218: LD_INT 39
4220: PPUSH
4221: LD_INT 12
4223: PPUSH
4224: LD_INT 3
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4234: LD_ADDR_EXP 54
4238: PUSH
4239: LD_EXP 54
4243: PUSH
4244: LD_VAR 0 5
4248: ADD
4249: ST_TO_ADDR
// end ;
4250: GO 4185
4252: POP
4253: POP
// for i = 1 to 3 do
4254: LD_ADDR_VAR 0 2
4258: PUSH
4259: DOUBLE
4260: LD_INT 1
4262: DEC
4263: ST_TO_ADDR
4264: LD_INT 3
4266: PUSH
4267: FOR_TO
4268: IFFALSE 4334
// begin PrepareHuman ( false , 1 , skill ) ;
4270: LD_INT 0
4272: PPUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_VAR 0 11
4280: PPUSH
4281: CALL_OW 380
// un := CreateHuman ;
4285: LD_ADDR_VAR 0 5
4289: PUSH
4290: CALL_OW 44
4294: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4295: LD_VAR 0 5
4299: PPUSH
4300: LD_INT 180
4302: PPUSH
4303: LD_INT 11
4305: PPUSH
4306: LD_INT 4
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4316: LD_ADDR_EXP 58
4320: PUSH
4321: LD_EXP 58
4325: PUSH
4326: LD_VAR 0 5
4330: ADD
4331: ST_TO_ADDR
// end ;
4332: GO 4267
4334: POP
4335: POP
// ru_vehicles := vehicles ;
4336: LD_ADDR_EXP 56
4340: PUSH
4341: LD_VAR 0 12
4345: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4346: LD_ADDR_EXP 59
4350: PUSH
4351: LD_INT 131
4353: PUSH
4354: LD_INT 121
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 113
4363: PUSH
4364: LD_INT 90
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 93
4373: PUSH
4374: LD_INT 62
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 106
4388: PUSH
4389: LD_INT 54
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 120
4398: PUSH
4399: LD_INT 80
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 143
4408: PUSH
4409: LD_INT 120
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: LIST
4420: PUSH
4421: LD_INT 154
4423: PUSH
4424: LD_INT 116
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 140
4433: PUSH
4434: LD_INT 93
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 130
4443: PUSH
4444: LD_INT 58
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 105
4458: PUSH
4459: LD_INT 106
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 134
4468: PUSH
4469: LD_INT 98
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 159
4478: PUSH
4479: LD_INT 113
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// if Difficulty = 1 then
4497: LD_OWVAR 67
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: IFFALSE 4509
// exit ;
4507: GO 4564
// for i = 1 to Difficulty - 1 do
4509: LD_ADDR_VAR 0 2
4513: PUSH
4514: DOUBLE
4515: LD_INT 1
4517: DEC
4518: ST_TO_ADDR
4519: LD_OWVAR 67
4523: PUSH
4524: LD_INT 1
4526: MINUS
4527: PUSH
4528: FOR_TO
4529: IFFALSE 4562
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4531: LD_ADDR_EXP 57
4535: PUSH
4536: LD_EXP 57
4540: PUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: LD_INT 43
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: ADD
4559: ST_TO_ADDR
4560: GO 4528
4562: POP
4563: POP
// end ;
4564: LD_VAR 0 1
4568: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4569: LD_INT 22
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 21
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: IFFALSE 4691
4599: GO 4601
4601: DISABLE
4602: LD_INT 0
4604: PPUSH
4605: PPUSH
// begin enable ;
4606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4607: LD_ADDR_VAR 0 2
4611: PUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 3
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 2
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PPUSH
4636: CALL_OW 69
4640: ST_TO_ADDR
// if filter then
4641: LD_VAR 0 2
4645: IFFALSE 4691
// for i in filter do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: LD_VAR 0 2
4656: PUSH
4657: FOR_IN
4658: IFFALSE 4689
// if GetFuel ( i ) < 20 then
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 261
4669: PUSH
4670: LD_INT 20
4672: LESS
4673: IFFALSE 4687
// SetFuel ( i , 20 ) ;
4675: LD_VAR 0 1
4679: PPUSH
4680: LD_INT 20
4682: PPUSH
4683: CALL_OW 240
4687: GO 4657
4689: POP
4690: POP
// end ;
4691: PPOPN 2
4693: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4694: LD_EXP 57
4698: IFFALSE 4917
4700: GO 4702
4702: DISABLE
4703: LD_INT 0
4705: PPUSH
4706: PPUSH
4707: PPUSH
// begin enable ;
4708: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4709: LD_ADDR_VAR 0 2
4713: PUSH
4714: LD_INT 22
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 30
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PPUSH
4738: CALL_OW 69
4742: ST_TO_ADDR
// can_produce := [ ] ;
4743: LD_ADDR_VAR 0 3
4747: PUSH
4748: EMPTY
4749: ST_TO_ADDR
// if not fac then
4750: LD_VAR 0 2
4754: NOT
4755: IFFALSE 4760
// begin disable ;
4757: DISABLE
// exit ;
4758: GO 4917
// end ; for i in fac do
4760: LD_ADDR_VAR 0 1
4764: PUSH
4765: LD_VAR 0 2
4769: PUSH
4770: FOR_IN
4771: IFFALSE 4809
// if UnitsInside ( i ) then
4773: LD_VAR 0 1
4777: PPUSH
4778: CALL_OW 313
4782: IFFALSE 4807
// can_produce := Insert ( can_produce , 1 , i ) ;
4784: LD_ADDR_VAR 0 3
4788: PUSH
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_INT 1
4796: PPUSH
4797: LD_VAR 0 1
4801: PPUSH
4802: CALL_OW 2
4806: ST_TO_ADDR
4807: GO 4770
4809: POP
4810: POP
// if not can_produce then
4811: LD_VAR 0 3
4815: NOT
4816: IFFALSE 4820
// exit ;
4818: GO 4917
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4820: LD_VAR 0 3
4824: PUSH
4825: LD_INT 1
4827: PPUSH
4828: LD_VAR 0 3
4832: PPUSH
4833: CALL_OW 12
4837: ARRAY
4838: PPUSH
4839: LD_EXP 57
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: LD_EXP 57
4852: PUSH
4853: LD_INT 2
4855: ARRAY
4856: PPUSH
4857: LD_EXP 57
4861: PUSH
4862: LD_INT 3
4864: ARRAY
4865: PPUSH
4866: LD_EXP 57
4870: PUSH
4871: LD_INT 4
4873: ARRAY
4874: PPUSH
4875: CALL_OW 125
// for i = 1 to 4 do
4879: LD_ADDR_VAR 0 1
4883: PUSH
4884: DOUBLE
4885: LD_INT 1
4887: DEC
4888: ST_TO_ADDR
4889: LD_INT 4
4891: PUSH
4892: FOR_TO
4893: IFFALSE 4915
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4895: LD_ADDR_EXP 57
4899: PUSH
4900: LD_EXP 57
4904: PPUSH
4905: LD_INT 1
4907: PPUSH
4908: CALL_OW 3
4912: ST_TO_ADDR
4913: GO 4892
4915: POP
4916: POP
// end ;
4917: PPOPN 3
4919: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4920: LD_INT 0
4922: PPUSH
4923: PPUSH
4924: PPUSH
// for i = 1 to [ 3 , 5 , 6 ] [ Difficulty ] do
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: DOUBLE
4931: LD_INT 1
4933: DEC
4934: ST_TO_ADDR
4935: LD_INT 3
4937: PUSH
4938: LD_INT 5
4940: PUSH
4941: LD_INT 6
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: LD_OWVAR 67
4953: ARRAY
4954: PUSH
4955: FOR_TO
4956: IFFALSE 5105
// begin PrepareHuman ( false , 3 , 3 ) ;
4958: LD_INT 0
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4971: LD_ADDR_VAR 0 3
4975: PUSH
4976: LD_INT 3
4978: PPUSH
4979: LD_INT 3
4981: PPUSH
4982: LD_INT 22
4984: PPUSH
4985: LD_INT 1
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: LD_INT 43
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 1
5003: PPUSH
5004: LD_INT 2
5006: PPUSH
5007: CALL_OW 12
5011: ARRAY
5012: PPUSH
5013: LD_INT 70
5015: PPUSH
5016: CALL 489 0 7
5020: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5021: LD_VAR 0 3
5025: PPUSH
5026: LD_INT 4
5028: PPUSH
5029: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5033: LD_VAR 0 3
5037: PPUSH
5038: LD_INT 229
5040: PPUSH
5041: LD_INT 44
5043: PPUSH
5044: LD_INT 0
5046: PPUSH
5047: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5051: CALL_OW 44
5055: PPUSH
5056: LD_VAR 0 3
5060: PPUSH
5061: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5065: LD_ADDR_EXP 56
5069: PUSH
5070: LD_EXP 56
5074: PUSH
5075: LD_VAR 0 3
5079: ADD
5080: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5081: LD_VAR 0 3
5085: PPUSH
5086: LD_INT 191
5088: PPUSH
5089: LD_INT 32
5091: PPUSH
5092: CALL_OW 111
// Wait ( 0 0$02 ) ;
5096: LD_INT 70
5098: PPUSH
5099: CALL_OW 67
// end ;
5103: GO 4955
5105: POP
5106: POP
// end ;
5107: LD_VAR 0 1
5111: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5112: LD_EXP 31
5116: PUSH
5117: LD_EXP 56
5121: AND
5122: IFFALSE 5296
5124: GO 5126
5126: DISABLE
5127: LD_INT 0
5129: PPUSH
5130: PPUSH
5131: PPUSH
// begin wait ( 0 0$50 ) ;
5132: LD_INT 1750
5134: PPUSH
5135: CALL_OW 67
// tmp := ru_vehicles ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_EXP 56
5148: ST_TO_ADDR
// if not tmp then
5149: LD_VAR 0 3
5153: NOT
5154: IFFALSE 5158
// exit ;
5156: GO 5296
// repeat wait ( 0 0$1 ) ;
5158: LD_INT 35
5160: PPUSH
5161: CALL_OW 67
// for i in tmp do
5165: LD_ADDR_VAR 0 1
5169: PUSH
5170: LD_VAR 0 3
5174: PUSH
5175: FOR_IN
5176: IFFALSE 5287
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5178: LD_ADDR_VAR 0 2
5182: PUSH
5183: LD_INT 22
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PPUSH
5193: LD_VAR 0 1
5197: PPUSH
5198: CALL_OW 74
5202: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 296
5217: PUSH
5218: LD_INT 10
5220: GREATER
5221: IFFALSE 5240
// ComAgressiveMove ( i , 69 , 101 ) else
5223: LD_VAR 0 1
5227: PPUSH
5228: LD_INT 69
5230: PPUSH
5231: LD_INT 101
5233: PPUSH
5234: CALL_OW 114
5238: GO 5254
// ComAttackUnit ( i , enemy ) ;
5240: LD_VAR 0 1
5244: PPUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: CALL_OW 115
// if GetLives ( i ) < 250 then
5254: LD_VAR 0 1
5258: PPUSH
5259: CALL_OW 256
5263: PUSH
5264: LD_INT 250
5266: LESS
5267: IFFALSE 5285
// tmp := tmp diff i ;
5269: LD_ADDR_VAR 0 3
5273: PUSH
5274: LD_VAR 0 3
5278: PUSH
5279: LD_VAR 0 1
5283: DIFF
5284: ST_TO_ADDR
// end ;
5285: GO 5175
5287: POP
5288: POP
// until not tmp ;
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 5158
// end ; end_of_file
5296: PPOPN 3
5298: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5299: LD_INT 0
5301: PPUSH
5302: PPUSH
5303: PPUSH
5304: PPUSH
5305: PPUSH
5306: PPUSH
5307: PPUSH
// InGameOn ;
5308: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5312: LD_EXP 37
5316: PPUSH
5317: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5321: LD_EXP 37
5325: PPUSH
5326: LD_EXP 44
5330: PPUSH
5331: CALL_OW 119
// if Bierezov then
5335: LD_EXP 45
5339: IFFALSE 5355
// ComTurnUnit ( Bierezov , Cornel ) ;
5341: LD_EXP 45
5345: PPUSH
5346: LD_EXP 44
5350: PPUSH
5351: CALL_OW 119
// for i in jmm_units do
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_EXP 4
5364: PUSH
5365: FOR_IN
5366: IFFALSE 5384
// ComTurnUnit ( i , Cornel ) ;
5368: LD_VAR 0 2
5372: PPUSH
5373: LD_EXP 44
5377: PPUSH
5378: CALL_OW 119
5382: GO 5365
5384: POP
5385: POP
// units := cornel_units union Cornel ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_EXP 6
5395: PUSH
5396: LD_EXP 44
5400: UNION
5401: ST_TO_ADDR
// repeat wait ( 1 ) ;
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 67
// for i in units do
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_VAR 0 3
5418: PUSH
5419: FOR_IN
5420: IFFALSE 5453
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5422: LD_VAR 0 2
5426: PPUSH
5427: LD_EXP 37
5431: PPUSH
5432: CALL_OW 250
5436: PPUSH
5437: LD_EXP 37
5441: PPUSH
5442: CALL_OW 251
5446: PPUSH
5447: CALL_OW 111
5451: GO 5419
5453: POP
5454: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5455: LD_VAR 0 3
5459: PPUSH
5460: LD_INT 92
5462: PUSH
5463: LD_EXP 37
5467: PPUSH
5468: CALL_OW 250
5472: PUSH
5473: LD_EXP 37
5477: PPUSH
5478: CALL_OW 251
5482: PUSH
5483: LD_INT 10
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL_OW 72
5496: PUSH
5497: LD_VAR 0 3
5501: EQUAL
5502: IFFALSE 5402
// for i in units do
5504: LD_ADDR_VAR 0 2
5508: PUSH
5509: LD_VAR 0 3
5513: PUSH
5514: FOR_IN
5515: IFFALSE 5533
// ComTurnUnit ( i , JMM ) ;
5517: LD_VAR 0 2
5521: PPUSH
5522: LD_EXP 37
5526: PPUSH
5527: CALL_OW 119
5531: GO 5514
5533: POP
5534: POP
// ComTurnUnit ( Cornel , JMM ) ;
5535: LD_EXP 44
5539: PPUSH
5540: LD_EXP 37
5544: PPUSH
5545: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5549: LD_EXP 37
5553: PPUSH
5554: LD_STRING D1-JMM-1
5556: PPUSH
5557: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_STRING D1-Corn-1
5568: PPUSH
5569: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_EXP 44
5582: PPUSH
5583: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5587: LD_EXP 44
5591: PPUSH
5592: LD_EXP 37
5596: PPUSH
5597: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5601: LD_INT 35
5603: PPUSH
5604: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5608: LD_EXP 37
5612: PPUSH
5613: LD_EXP 44
5617: PPUSH
5618: CALL_OW 296
5622: PUSH
5623: LD_INT 6
5625: LESS
5626: IFFALSE 5601
// ChangeSideFog ( 4 , 1 ) ;
5628: LD_INT 4
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5638: LD_EXP 37
5642: PPUSH
5643: LD_EXP 44
5647: PPUSH
5648: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5652: LD_EXP 44
5656: PPUSH
5657: LD_EXP 37
5661: PPUSH
5662: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5666: LD_EXP 37
5670: PPUSH
5671: LD_STRING D1-JMM-2
5673: PPUSH
5674: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5678: LD_EXP 37
5682: PPUSH
5683: LD_STRING D1-JMM-2a
5685: PPUSH
5686: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5690: LD_EXP 44
5694: PPUSH
5695: LD_STRING D1-Corn-2
5697: PPUSH
5698: CALL_OW 88
// if bierezov_exist or debug then
5702: LD_EXP 7
5706: PUSH
5707: LD_EXP 1
5711: OR
5712: IFFALSE 5953
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_EXP 45
5723: PPUSH
5724: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5728: LD_INT 10
5730: PPUSH
5731: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5735: LD_EXP 44
5739: PPUSH
5740: LD_STRING D1a-Corn-1
5742: PPUSH
5743: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5747: LD_EXP 37
5751: PPUSH
5752: LD_EXP 45
5756: PPUSH
5757: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5761: LD_EXP 45
5765: PPUSH
5766: LD_EXP 37
5770: PPUSH
5771: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5775: LD_EXP 37
5779: PPUSH
5780: LD_STRING D1a-JMM-1
5782: PPUSH
5783: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5787: LD_EXP 37
5791: PPUSH
5792: LD_EXP 44
5796: PPUSH
5797: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5801: LD_EXP 44
5805: PPUSH
5806: LD_EXP 37
5810: PPUSH
5811: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5815: LD_EXP 44
5819: PPUSH
5820: LD_STRING D1a-Corn-2
5822: PPUSH
5823: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5827: LD_EXP 37
5831: PPUSH
5832: LD_STRING D1a-JMM-2
5834: PPUSH
5835: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-3
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-3
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-4
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-4
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-5
5894: PPUSH
5895: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5899: LD_EXP 45
5903: PPUSH
5904: LD_EXP 44
5908: PPUSH
5909: CALL_OW 250
5913: PPUSH
5914: LD_EXP 44
5918: PPUSH
5919: CALL_OW 251
5923: PUSH
5924: LD_INT 2
5926: MINUS
5927: PPUSH
5928: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5932: LD_EXP 45
5936: PPUSH
5937: LD_EXP 44
5941: PPUSH
5942: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5946: LD_INT 10
5948: PPUSH
5949: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5953: LD_EXP 37
5957: PPUSH
5958: LD_STRING D1b-JMM-1
5960: PPUSH
5961: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5965: LD_EXP 44
5969: PPUSH
5970: LD_STRING D1b-Corn-1
5972: PPUSH
5973: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-2
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-2
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-3
6008: PPUSH
6009: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6013: LD_INT 10
6015: PPUSH
6016: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6020: LD_EXP 46
6024: PPUSH
6025: LD_STRING D1b-Pow-3
6027: PPUSH
6028: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6032: LD_EXP 37
6036: PPUSH
6037: LD_STRING D1b-JMM-4
6039: PPUSH
6040: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6044: LD_EXP 44
6048: PPUSH
6049: LD_STRING D1b-Corn-4
6051: PPUSH
6052: CALL_OW 88
// if Khatam then
6056: LD_EXP 41
6060: IFFALSE 6076
// Say ( Khatam , D1b-Khat-4 ) else
6062: LD_EXP 41
6066: PPUSH
6067: LD_STRING D1b-Khat-4
6069: PPUSH
6070: CALL_OW 88
6074: GO 6112
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6076: LD_EXP 6
6080: PPUSH
6081: LD_INT 26
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 72
6095: PUSH
6096: LD_EXP 44
6100: PUSH
6101: EMPTY
6102: LIST
6103: DIFF
6104: PPUSH
6105: LD_STRING D1b-Sol1-4
6107: PPUSH
6108: CALL 577 0 2
// if Cyrus then
6112: LD_EXP 39
6116: IFFALSE 6130
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6118: LD_EXP 39
6122: PPUSH
6123: LD_STRING D1b-Cyrus-4
6125: PPUSH
6126: CALL_OW 88
// if Lisa then
6130: LD_EXP 40
6134: IFFALSE 6192
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6136: LD_EXP 40
6140: PPUSH
6141: LD_STRING D1b-Lisa-4
6143: PPUSH
6144: CALL_OW 88
// if Cyrus then
6148: LD_EXP 39
6152: IFFALSE 6192
// begin if not IsInUnit ( Cyrus ) then
6154: LD_EXP 39
6158: PPUSH
6159: CALL_OW 310
6163: NOT
6164: IFFALSE 6180
// ComTurnUnit ( Cyrus , Lisa ) ;
6166: LD_EXP 39
6170: PPUSH
6171: LD_EXP 40
6175: PPUSH
6176: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6180: LD_EXP 39
6184: PPUSH
6185: LD_STRING D1b-Cyrus-5
6187: PPUSH
6188: CALL_OW 88
// end ; end ; SelectGroup ;
6192: CALL 2649 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6196: LD_EXP 37
6200: PPUSH
6201: LD_STRING D1d-JMM-1
6203: PPUSH
6204: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6208: LD_EXP 44
6212: PPUSH
6213: LD_STRING D1d-Corn-1
6215: PPUSH
6216: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6220: LD_ADDR_VAR 0 2
6224: PUSH
6225: LD_EXP 4
6229: PUSH
6230: LD_EXP 6
6234: ADD
6235: PUSH
6236: LD_EXP 37
6240: ADD
6241: PUSH
6242: FOR_IN
6243: IFFALSE 6256
// ComHold ( i ) ;
6245: LD_VAR 0 2
6249: PPUSH
6250: CALL_OW 140
6254: GO 6242
6256: POP
6257: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6258: LD_ADDR_VAR 0 4
6262: PUSH
6263: LD_INT 22
6265: PUSH
6266: LD_INT 1
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 21
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: ST_TO_ADDR
// if vehicles then
6292: LD_VAR 0 4
6296: IFFALSE 6634
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6298: LD_EXP 6
6302: PPUSH
6303: LD_INT 55
6305: PUSH
6306: EMPTY
6307: LIST
6308: PPUSH
6309: CALL_OW 72
6313: IFFALSE 6352
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6315: LD_ADDR_VAR 0 2
6319: PUSH
6320: LD_EXP 6
6324: PPUSH
6325: LD_INT 55
6327: PUSH
6328: EMPTY
6329: LIST
6330: PPUSH
6331: CALL_OW 72
6335: PUSH
6336: FOR_IN
6337: IFFALSE 6350
// ComExitVehicle ( i ) ;
6339: LD_VAR 0 2
6343: PPUSH
6344: CALL_OW 121
6348: GO 6336
6350: POP
6351: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6352: LD_ADDR_VAR 0 5
6356: PUSH
6357: LD_VAR 0 4
6361: PPUSH
6362: LD_INT 34
6364: PUSH
6365: LD_INT 51
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PPUSH
6372: CALL_OW 72
6376: ST_TO_ADDR
// if cargos then
6377: LD_VAR 0 5
6381: IFFALSE 6564
// begin vehicles := cargos ;
6383: LD_ADDR_VAR 0 4
6387: PUSH
6388: LD_VAR 0 5
6392: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_STRING 02_resources_4
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 30
6408: ST_TO_ADDR
// if debug and not resources then
6409: LD_EXP 1
6413: PUSH
6414: LD_VAR 0 6
6418: NOT
6419: AND
6420: IFFALSE 6430
// resources := 160 ;
6422: LD_ADDR_VAR 0 6
6426: PUSH
6427: LD_INT 160
6429: ST_TO_ADDR
// if resources mod 10 then
6430: LD_VAR 0 6
6434: PUSH
6435: LD_INT 10
6437: MOD
6438: IFFALSE 6460
// resources := resources - resources mod 10 ;
6440: LD_ADDR_VAR 0 6
6444: PUSH
6445: LD_VAR 0 6
6449: PUSH
6450: LD_VAR 0 6
6454: PUSH
6455: LD_INT 10
6457: MOD
6458: MINUS
6459: ST_TO_ADDR
// if resources then
6460: LD_VAR 0 6
6464: IFFALSE 6564
// for i in cargos do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: LD_VAR 0 5
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6562
// begin if resources < 100 then
6479: LD_VAR 0 6
6483: PUSH
6484: LD_INT 100
6486: LESS
6487: IFFALSE 6509
// begin cargo := resources ;
6489: LD_ADDR_VAR 0 7
6493: PUSH
6494: LD_VAR 0 6
6498: ST_TO_ADDR
// resources := 0 ;
6499: LD_ADDR_VAR 0 6
6503: PUSH
6504: LD_INT 0
6506: ST_TO_ADDR
// end else
6507: GO 6531
// begin cargo := 100 ;
6509: LD_ADDR_VAR 0 7
6513: PUSH
6514: LD_INT 100
6516: ST_TO_ADDR
// resources := resources - 100 ;
6517: LD_ADDR_VAR 0 6
6521: PUSH
6522: LD_VAR 0 6
6526: PUSH
6527: LD_INT 100
6529: MINUS
6530: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6531: LD_VAR 0 2
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_VAR 0 7
6543: PPUSH
6544: CALL_OW 290
// if resources = 0 then
6548: LD_VAR 0 6
6552: PUSH
6553: LD_INT 0
6555: EQUAL
6556: IFFALSE 6560
// break ;
6558: GO 6562
// end ;
6560: GO 6476
6562: POP
6563: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6564: LD_VAR 0 4
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: CALL_OW 311
6577: PPUSH
6578: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6582: LD_VAR 0 4
6586: PUSH
6587: LD_INT 1
6589: ARRAY
6590: PPUSH
6591: LD_INT 4
6593: PPUSH
6594: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6598: LD_EXP 44
6602: PPUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 1
6610: ARRAY
6611: PPUSH
6612: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6616: LD_INT 35
6618: PPUSH
6619: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6623: LD_EXP 44
6627: PPUSH
6628: CALL_OW 310
6632: IFFALSE 6616
// end ; InGameOff ;
6634: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6638: LD_STRING M1
6640: PPUSH
6641: CALL_OW 337
// SaveForQuickRestart ;
6645: CALL_OW 22
// cornel_active := true ;
6649: LD_ADDR_EXP 8
6653: PUSH
6654: LD_INT 1
6656: ST_TO_ADDR
// end ;
6657: LD_VAR 0 1
6661: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6662: LD_EXP 37
6666: PPUSH
6667: LD_EXP 47
6671: PPUSH
6672: CALL_OW 296
6676: PUSH
6677: LD_INT 10
6679: LESS
6680: IFFALSE 8063
6682: GO 6684
6684: DISABLE
6685: LD_INT 0
6687: PPUSH
6688: PPUSH
6689: PPUSH
6690: PPUSH
6691: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 89
6699: PUSH
6700: LD_INT 34
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 138
6709: PUSH
6710: LD_INT 63
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 196
6719: PUSH
6720: LD_INT 84
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 135
6729: PUSH
6730: LD_INT 52
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 103
6739: PUSH
6740: LD_INT 39
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 58
6749: PUSH
6750: LD_INT 30
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 38
6759: PUSH
6760: LD_INT 51
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: ST_TO_ADDR
// Video ( true ) ;
6776: LD_INT 1
6778: PPUSH
6779: CALL 68953 0 1
// if jmm_units then
6783: LD_EXP 4
6787: IFFALSE 6863
// for i in jmm_units do
6789: LD_ADDR_VAR 0 1
6793: PUSH
6794: LD_EXP 4
6798: PUSH
6799: FOR_IN
6800: IFFALSE 6861
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6802: LD_VAR 0 1
6806: PPUSH
6807: LD_EXP 37
6811: PPUSH
6812: CALL_OW 296
6816: PUSH
6817: LD_INT 10
6819: LESS
6820: PUSH
6821: LD_VAR 0 1
6825: PPUSH
6826: CALL_OW 310
6830: NOT
6831: AND
6832: IFFALSE 6850
// ComTurnUnit ( i , JMM ) else
6834: LD_VAR 0 1
6838: PPUSH
6839: LD_EXP 37
6843: PPUSH
6844: CALL_OW 119
6848: GO 6859
// ComHold ( i ) ;
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 140
// end ;
6859: GO 6799
6861: POP
6862: POP
// if IsInUnit ( JMM ) then
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 310
6872: IFFALSE 6897
// begin ComExitVehicle ( JMM ) ;
6874: LD_EXP 37
6878: PPUSH
6879: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6883: LD_EXP 37
6887: PPUSH
6888: LD_EXP 47
6892: PPUSH
6893: CALL_OW 172
// end ; Wait ( 10 ) ;
6897: LD_INT 10
6899: PPUSH
6900: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6904: LD_EXP 37
6908: PPUSH
6909: LD_EXP 47
6913: PPUSH
6914: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6918: LD_INT 35
6920: PPUSH
6921: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6925: LD_EXP 37
6929: PPUSH
6930: LD_EXP 47
6934: PPUSH
6935: CALL_OW 296
6939: PUSH
6940: LD_INT 6
6942: LESS
6943: IFFALSE 6918
// ComTurnUnit ( JMM , Lynch ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_EXP 47
6954: PPUSH
6955: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6959: LD_ADDR_VAR 0 1
6963: PUSH
6964: LD_EXP 47
6968: PUSH
6969: LD_EXP 48
6973: PUSH
6974: LD_EXP 49
6978: PUSH
6979: LD_EXP 50
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7009
// ComTurnUnit ( i , JMM ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: LD_EXP 37
7002: PPUSH
7003: CALL_OW 119
7007: GO 6990
7009: POP
7010: POP
// Wait ( 0 0$0.3 ) ;
7011: LD_INT 10
7013: PPUSH
7014: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7018: LD_EXP 37
7022: PPUSH
7023: LD_STRING D2-JMM-1
7025: PPUSH
7026: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7030: LD_EXP 47
7034: PPUSH
7035: LD_STRING D2-Sol1-1
7037: PPUSH
7038: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-2
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-2
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-3
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-3
7085: PPUSH
7086: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: LD_INT 22
7097: PUSH
7098: LD_INT 8
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PPUSH
7105: CALL_OW 69
7109: PUSH
7110: FOR_IN
7111: IFFALSE 7127
// SetSide ( i , 1 ) ;
7113: LD_VAR 0 1
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: CALL_OW 235
7125: GO 7110
7127: POP
7128: POP
// Say ( JMM , D2-JMM-4 ) ;
7129: LD_EXP 37
7133: PPUSH
7134: LD_STRING D2-JMM-4
7136: PPUSH
7137: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7141: LD_INT 1
7143: PPUSH
7144: LD_INT 5
7146: PPUSH
7147: CALL_OW 332
// for i = 1 to points do
7151: LD_ADDR_VAR 0 1
7155: PUSH
7156: DOUBLE
7157: LD_INT 1
7159: DEC
7160: ST_TO_ADDR
7161: LD_VAR 0 2
7165: PUSH
7166: FOR_TO
7167: IFFALSE 7342
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7169: LD_VAR 0 2
7173: PUSH
7174: LD_VAR 0 1
7178: ARRAY
7179: PUSH
7180: LD_INT 1
7182: ARRAY
7183: PPUSH
7184: LD_VAR 0 2
7188: PUSH
7189: LD_VAR 0 1
7193: ARRAY
7194: PUSH
7195: LD_INT 2
7197: ARRAY
7198: PPUSH
7199: CALL_OW 84
// if i = 1 then
7203: LD_VAR 0 1
7207: PUSH
7208: LD_INT 1
7210: EQUAL
7211: IFFALSE 7225
// Say ( Lynch , D2-Sol1-4 ) ;
7213: LD_EXP 47
7217: PPUSH
7218: LD_STRING D2-Sol1-4
7220: PPUSH
7221: CALL_OW 88
// if i = 2 then
7225: LD_VAR 0 1
7229: PUSH
7230: LD_INT 2
7232: EQUAL
7233: IFFALSE 7247
// Say ( JMM , D2-JMM-5 ) ;
7235: LD_EXP 37
7239: PPUSH
7240: LD_STRING D2-JMM-5
7242: PPUSH
7243: CALL_OW 88
// if i = 4 then
7247: LD_VAR 0 1
7251: PUSH
7252: LD_INT 4
7254: EQUAL
7255: IFFALSE 7279
// begin RevealFogArea ( 1 , troopsArea ) ;
7257: LD_INT 1
7259: PPUSH
7260: LD_INT 6
7262: PPUSH
7263: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7267: LD_EXP 47
7271: PPUSH
7272: LD_STRING D2-Sol1-5
7274: PPUSH
7275: CALL_OW 88
// end ; if i = 5 then
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 5
7286: EQUAL
7287: IFFALSE 7301
// Say ( JMM , D2-JMM-6 ) ;
7289: LD_EXP 37
7293: PPUSH
7294: LD_STRING D2-JMM-6
7296: PPUSH
7297: CALL_OW 88
// if i = 7 then
7301: LD_VAR 0 1
7305: PUSH
7306: LD_INT 7
7308: EQUAL
7309: IFFALSE 7333
// begin RevealFogArea ( 1 , forestArea ) ;
7311: LD_INT 1
7313: PPUSH
7314: LD_INT 7
7316: PPUSH
7317: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7321: LD_EXP 47
7325: PPUSH
7326: LD_STRING D2-Sol1-6
7328: PPUSH
7329: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7333: LD_INT 46
7335: PPUSH
7336: CALL_OW 67
// end ;
7340: GO 7166
7342: POP
7343: POP
// CenterNowOnUnits ( JMM ) ;
7344: LD_EXP 37
7348: PPUSH
7349: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7353: LD_EXP 37
7357: PPUSH
7358: LD_STRING D2-JMM-7
7360: PPUSH
7361: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7365: LD_EXP 47
7369: PPUSH
7370: LD_STRING D2-Sol1-7
7372: PPUSH
7373: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-8
7384: PPUSH
7385: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7389: LD_ADDR_VAR 0 4
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_INT 1
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 30
7406: PUSH
7407: LD_INT 31
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 69
7422: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7423: LD_EXP 47
7427: PPUSH
7428: LD_VAR 0 4
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7441: LD_INT 65
7443: PPUSH
7444: LD_INT 101
7446: PPUSH
7447: CALL_OW 428
7451: IFFALSE 7474
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7453: LD_INT 65
7455: PPUSH
7456: LD_INT 101
7458: PPUSH
7459: CALL_OW 428
7463: PPUSH
7464: LD_INT 75
7466: PPUSH
7467: LD_INT 100
7469: PPUSH
7470: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7474: LD_INT 66
7476: PPUSH
7477: LD_INT 103
7479: PPUSH
7480: CALL_OW 428
7484: IFFALSE 7507
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7486: LD_INT 66
7488: PPUSH
7489: LD_INT 103
7491: PPUSH
7492: CALL_OW 428
7496: PPUSH
7497: LD_INT 75
7499: PPUSH
7500: LD_INT 100
7502: PPUSH
7503: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7507: LD_ADDR_VAR 0 5
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 1
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 21
7524: PUSH
7525: LD_INT 2
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 91
7534: PUSH
7535: LD_EXP 37
7539: PUSH
7540: LD_INT 7
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 69
7557: ST_TO_ADDR
// if tmp then
7558: LD_VAR 0 5
7562: IFFALSE 7579
// ComMoveXY ( tmp , 75 , 100 ) ;
7564: LD_VAR 0 5
7568: PPUSH
7569: LD_INT 75
7571: PPUSH
7572: LD_INT 100
7574: PPUSH
7575: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7579: LD_ADDR_VAR 0 3
7583: PUSH
7584: LD_EXP 4
7588: PPUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 1
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PPUSH
7599: CALL_OW 72
7603: PPUSH
7604: LD_EXP 37
7608: PPUSH
7609: CALL_OW 74
7613: ST_TO_ADDR
// if sol then
7614: LD_VAR 0 3
7618: IFFALSE 7678
// if GetDistUnits ( JMM , sol ) < 10 then
7620: LD_EXP 37
7624: PPUSH
7625: LD_VAR 0 3
7629: PPUSH
7630: CALL_OW 296
7634: PUSH
7635: LD_INT 10
7637: LESS
7638: IFFALSE 7678
// begin if IsInUnit ( sol ) then
7640: LD_VAR 0 3
7644: PPUSH
7645: CALL_OW 310
7649: IFFALSE 7660
// ComExitVehicle ( sol ) ;
7651: LD_VAR 0 3
7655: PPUSH
7656: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7660: LD_VAR 0 3
7664: PPUSH
7665: LD_VAR 0 4
7669: PUSH
7670: LD_INT 2
7672: ARRAY
7673: PPUSH
7674: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7678: LD_INT 10
7680: PPUSH
7681: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7685: LD_EXP 37
7689: PPUSH
7690: LD_INT 65
7692: PPUSH
7693: LD_INT 101
7695: PPUSH
7696: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7700: LD_EXP 37
7704: PPUSH
7705: LD_INT 63
7707: PPUSH
7708: LD_INT 100
7710: PPUSH
7711: CALL_OW 178
// tmp := 0 0$0 ;
7715: LD_ADDR_VAR 0 5
7719: PUSH
7720: LD_INT 0
7722: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7723: LD_INT 35
7725: PPUSH
7726: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7730: LD_ADDR_VAR 0 5
7734: PUSH
7735: LD_VAR 0 5
7739: PUSH
7740: LD_INT 35
7742: PLUS
7743: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7744: LD_EXP 37
7748: PPUSH
7749: LD_INT 65
7751: PPUSH
7752: LD_INT 101
7754: PPUSH
7755: CALL_OW 307
7759: PUSH
7760: LD_VAR 0 5
7764: PUSH
7765: LD_INT 175
7767: GREATER
7768: OR
7769: IFFALSE 7723
// Say ( JMM , D2a-JMM-1 ) ;
7771: LD_EXP 37
7775: PPUSH
7776: LD_STRING D2a-JMM-1
7778: PPUSH
7779: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7783: LD_EXP 48
7787: PPUSH
7788: LD_INT 66
7790: PPUSH
7791: LD_INT 103
7793: PPUSH
7794: CALL_OW 111
// tmp := 0 0$0 ;
7798: LD_ADDR_VAR 0 5
7802: PUSH
7803: LD_INT 0
7805: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7806: LD_INT 35
7808: PPUSH
7809: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7813: LD_EXP 48
7817: PPUSH
7818: LD_INT 66
7820: PPUSH
7821: LD_INT 103
7823: PPUSH
7824: CALL_OW 307
7828: PUSH
7829: LD_VAR 0 5
7833: PUSH
7834: LD_INT 175
7836: GREATER
7837: OR
7838: IFFALSE 7806
// ComTurnUnit ( Walker , JMM ) ;
7840: LD_EXP 48
7844: PPUSH
7845: LD_EXP 37
7849: PPUSH
7850: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7854: LD_EXP 48
7858: PPUSH
7859: LD_STRING D2a-Sci1-1
7861: PPUSH
7862: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7866: LD_EXP 37
7870: PPUSH
7871: LD_EXP 48
7875: PPUSH
7876: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7880: LD_EXP 37
7884: PPUSH
7885: LD_STRING D2a-JMM-2
7887: PPUSH
7888: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7892: LD_EXP 48
7896: PPUSH
7897: LD_STRING D2a-Sci1-2
7899: PPUSH
7900: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-3
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-3
7923: PPUSH
7924: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7928: LD_ADDR_EXP 4
7932: PUSH
7933: LD_EXP 4
7937: PUSH
7938: LD_EXP 47
7942: PUSH
7943: LD_EXP 48
7947: PUSH
7948: LD_EXP 49
7952: PUSH
7953: LD_EXP 50
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: ADD
7964: ST_TO_ADDR
// for i in jmm_units do
7965: LD_ADDR_VAR 0 1
7969: PUSH
7970: LD_EXP 4
7974: PUSH
7975: FOR_IN
7976: IFFALSE 8001
// if not IsInUnit ( i ) then
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 310
7987: NOT
7988: IFFALSE 7999
// ComFree ( i ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 139
7999: GO 7975
8001: POP
8002: POP
// Video ( false ) ;
8003: LD_INT 0
8005: PPUSH
8006: CALL 68953 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8010: LD_STRING MSolar1
8012: PPUSH
8013: CALL_OW 337
// jmm_on_west := true ;
8017: LD_ADDR_EXP 5
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8025: LD_INT 1050
8027: PPUSH
8028: CALL_OW 67
// frank_can_return := true ;
8032: LD_ADDR_EXP 12
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8040: LD_INT 6300
8042: PPUSH
8043: LD_INT 8400
8045: PPUSH
8046: CALL_OW 12
8050: PPUSH
8051: CALL_OW 67
// send_spec_patrol := true ;
8055: LD_ADDR_EXP 30
8059: PUSH
8060: LD_INT 1
8062: ST_TO_ADDR
// end ;
8063: PPOPN 5
8065: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8066: LD_INT 22
8068: PUSH
8069: LD_INT 1
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 34
8078: PUSH
8079: LD_INT 51
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 92
8088: PUSH
8089: LD_INT 63
8091: PUSH
8092: LD_INT 100
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: PPUSH
8112: CALL_OW 69
8116: PUSH
8117: LD_EXP 5
8121: NOT
8122: AND
8123: IFFALSE 8236
8125: GO 8127
8127: DISABLE
8128: LD_INT 0
8130: PPUSH
8131: PPUSH
// begin enable ;
8132: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8133: LD_ADDR_VAR 0 2
8137: PUSH
8138: LD_INT 22
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 34
8150: PUSH
8151: LD_INT 51
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 92
8160: PUSH
8161: LD_INT 63
8163: PUSH
8164: LD_INT 100
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: ST_TO_ADDR
// if not filter then
8189: LD_VAR 0 2
8193: NOT
8194: IFFALSE 8198
// exit ;
8196: GO 8236
// for i in filter do
8198: LD_ADDR_VAR 0 1
8202: PUSH
8203: LD_VAR 0 2
8207: PUSH
8208: FOR_IN
8209: IFFALSE 8234
// begin SetFuel ( i , 0 ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 0
8218: PPUSH
8219: CALL_OW 240
// ComStop ( i ) ;
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 141
// end ;
8232: GO 8208
8234: POP
8235: POP
// end ;
8236: PPOPN 2
8238: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8239: LD_EXP 30
8243: IFFALSE 9340
8245: GO 8247
8247: DISABLE
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
8255: PPUSH
8256: PPUSH
// begin if not ru_spec_patrol then
8257: LD_EXP 54
8261: NOT
8262: IFFALSE 8266
// exit ;
8264: GO 9340
// dead1 := false ;
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_INT 0
8273: ST_TO_ADDR
// dead2 := false ;
8274: LD_ADDR_VAR 0 2
8278: PUSH
8279: LD_INT 0
8281: ST_TO_ADDR
// inarea1 := false ;
8282: LD_ADDR_VAR 0 3
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// inarea2 := false ;
8290: LD_ADDR_VAR 0 4
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// tmp := [ ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: EMPTY
8304: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8305: LD_EXP 54
8309: PPUSH
8310: LD_INT 75
8312: PPUSH
8313: LD_INT 101
8315: PPUSH
8316: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8320: LD_INT 35
8322: PPUSH
8323: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) ;
8327: LD_INT 1
8329: PPUSH
8330: LD_EXP 54
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: CALL_OW 292
8343: IFFALSE 8320
// ComStop ( ru_spec_patrol ) ;
8345: LD_EXP 54
8349: PPUSH
8350: CALL_OW 141
// Wait ( 0 0$02 ) ;
8354: LD_INT 70
8356: PPUSH
8357: CALL_OW 67
// DialogueOn ;
8361: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8365: LD_EXP 54
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_STRING D8-Rus1-1
8376: PPUSH
8377: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8381: LD_EXP 37
8385: PPUSH
8386: LD_STRING D8-JMM-1
8388: PPUSH
8389: CALL_OW 88
// DialogueOff ;
8393: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8397: LD_EXP 54
8401: PPUSH
8402: LD_INT 13
8404: PPUSH
8405: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8409: LD_INT 35
8411: PPUSH
8412: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8416: LD_VAR 0 1
8420: NOT
8421: PUSH
8422: LD_EXP 54
8426: PUSH
8427: LD_INT 1
8429: ARRAY
8430: PPUSH
8431: CALL_OW 301
8435: AND
8436: IFFALSE 8446
// dead1 := true ;
8438: LD_ADDR_VAR 0 1
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8446: LD_VAR 0 2
8450: NOT
8451: PUSH
8452: LD_EXP 54
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 301
8465: AND
8466: IFFALSE 8476
// dead2 := true ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8476: LD_VAR 0 3
8480: NOT
8481: PUSH
8482: LD_EXP 54
8486: PUSH
8487: LD_INT 1
8489: ARRAY
8490: PPUSH
8491: LD_INT 14
8493: PPUSH
8494: CALL_OW 308
8498: AND
8499: IFFALSE 8509
// inarea1 := true ;
8501: LD_ADDR_VAR 0 3
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8509: LD_VAR 0 4
8513: NOT
8514: PUSH
8515: LD_EXP 54
8519: PUSH
8520: LD_INT 2
8522: ARRAY
8523: PPUSH
8524: LD_INT 14
8526: PPUSH
8527: CALL_OW 308
8531: AND
8532: IFFALSE 8542
// inarea2 := true ;
8534: LD_ADDR_VAR 0 4
8538: PUSH
8539: LD_INT 1
8541: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8542: LD_VAR 0 1
8546: PUSH
8547: LD_VAR 0 2
8551: AND
8552: PUSH
8553: LD_VAR 0 1
8557: PUSH
8558: LD_VAR 0 4
8562: AND
8563: OR
8564: PUSH
8565: LD_VAR 0 2
8569: PUSH
8570: LD_VAR 0 3
8574: AND
8575: OR
8576: PUSH
8577: LD_VAR 0 3
8581: PUSH
8582: LD_VAR 0 4
8586: AND
8587: OR
8588: IFFALSE 8409
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: AND
8600: PUSH
8601: LD_VAR 0 1
8605: PUSH
8606: LD_VAR 0 4
8610: AND
8611: OR
8612: PUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_VAR 0 3
8622: AND
8623: OR
8624: IFFALSE 9320
// begin prepare_siege := true ;
8626: LD_ADDR_EXP 31
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// DialogueOn ;
8634: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_VAR 0 4
8647: AND
8648: IFFALSE 8664
// Say ( JMM , D8b-JMM-1a ) else
8650: LD_EXP 37
8654: PPUSH
8655: LD_STRING D8b-JMM-1a
8657: PPUSH
8658: CALL_OW 88
8662: GO 8676
// Say ( JMM , D8b-JMM-1 ) ;
8664: LD_EXP 37
8668: PPUSH
8669: LD_STRING D8b-JMM-1
8671: PPUSH
8672: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8676: LD_EXP 4
8680: PPUSH
8681: LD_INT 26
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 72
8695: PUSH
8696: LD_EXP 38
8700: PUSH
8701: LD_EXP 39
8705: PUSH
8706: LD_EXP 48
8710: PUSH
8711: LD_EXP 51
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: DIFF
8722: PPUSH
8723: LD_STRING D8b-Sol1-1
8725: PPUSH
8726: CALL 577 0 2
// if Cyrus and Cyrus in jmm_units then
8730: LD_EXP 39
8734: PUSH
8735: LD_EXP 39
8739: PUSH
8740: LD_EXP 4
8744: IN
8745: AND
8746: IFFALSE 8762
// Say ( Cyrus , D8b-Cyrus-1 ) else
8748: LD_EXP 39
8752: PPUSH
8753: LD_STRING D8b-Cyrus-1
8755: PPUSH
8756: CALL_OW 88
8760: GO 8774
// Say ( JMM , D8b-JMM-1a ) ;
8762: LD_EXP 37
8766: PPUSH
8767: LD_STRING D8b-JMM-1a
8769: PPUSH
8770: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8774: LD_EXP 40
8778: PUSH
8779: LD_EXP 40
8783: PUSH
8784: LD_EXP 4
8788: IN
8789: AND
8790: IFFALSE 8804
// Say ( Lisa , D8b-Lisa-2 ) ;
8792: LD_EXP 40
8796: PPUSH
8797: LD_STRING D8b-Lisa-2
8799: PPUSH
8800: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8804: LD_EXP 38
8808: PUSH
8809: LD_EXP 38
8813: PUSH
8814: LD_EXP 4
8818: IN
8819: AND
8820: IFFALSE 8836
// Say ( Bobby , D8b-Bobby-1 ) else
8822: LD_EXP 38
8826: PPUSH
8827: LD_STRING D8b-Bobby-1
8829: PPUSH
8830: CALL_OW 88
8834: GO 8896
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_EXP 4
8845: PPUSH
8846: LD_INT 26
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PPUSH
8856: CALL_OW 72
8860: PUSH
8861: LD_EXP 38
8865: PUSH
8866: LD_EXP 39
8870: PUSH
8871: LD_EXP 48
8875: PUSH
8876: LD_EXP 51
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: DIFF
8887: PPUSH
8888: LD_STRING D8b-Sol2-1
8890: PPUSH
8891: CALL 577 0 2
8895: ST_TO_ADDR
// DialogueOff ;
8896: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8900: LD_EXP 39
8904: PUSH
8905: LD_EXP 39
8909: PUSH
8910: LD_EXP 4
8914: IN
8915: AND
8916: IFFALSE 8941
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8918: LD_ADDR_VAR 0 6
8922: PUSH
8923: LD_VAR 0 6
8927: PPUSH
8928: LD_INT 1
8930: PPUSH
8931: LD_EXP 39
8935: PPUSH
8936: CALL_OW 2
8940: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8941: LD_EXP 38
8945: PUSH
8946: LD_EXP 38
8950: PUSH
8951: LD_EXP 4
8955: IN
8956: AND
8957: IFFALSE 8982
// tmp := Insert ( tmp , 1 , Bobby ) ;
8959: LD_ADDR_VAR 0 6
8963: PUSH
8964: LD_VAR 0 6
8968: PPUSH
8969: LD_INT 1
8971: PPUSH
8972: LD_EXP 38
8976: PPUSH
8977: CALL_OW 2
8981: ST_TO_ADDR
// if sol then
8982: LD_VAR 0 5
8986: IFFALSE 9011
// tmp := Insert ( tmp , 1 , sol ) ;
8988: LD_ADDR_VAR 0 6
8992: PUSH
8993: LD_VAR 0 6
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: LD_VAR 0 5
9005: PPUSH
9006: CALL_OW 2
9010: ST_TO_ADDR
// if tmp then
9011: LD_VAR 0 6
9015: IFFALSE 9279
// begin SetSide ( tmp , 8 ) ;
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 8
9024: PPUSH
9025: CALL_OW 235
// for i in tmp do
9029: LD_ADDR_VAR 0 7
9033: PUSH
9034: LD_VAR 0 6
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9131
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9042: LD_VAR 0 7
9046: PPUSH
9047: CALL_OW 310
9051: PUSH
9052: LD_VAR 0 7
9056: PPUSH
9057: CALL_OW 310
9061: PPUSH
9062: CALL_OW 266
9066: PUSH
9067: LD_INT 3
9069: EQUAL
9070: AND
9071: IFFALSE 9082
// ComExitBuilding ( i ) ;
9073: LD_VAR 0 7
9077: PPUSH
9078: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9082: LD_VAR 0 7
9086: PPUSH
9087: CALL_OW 310
9091: PUSH
9092: LD_VAR 0 7
9096: PPUSH
9097: CALL_OW 310
9101: PPUSH
9102: CALL_OW 266
9106: PUSH
9107: LD_INT 2
9109: EQUAL
9110: AND
9111: IFFALSE 9122
// ComExitVehicle ( i ) ;
9113: LD_VAR 0 7
9117: PPUSH
9118: CALL_OW 121
// wait ( 0 0$1 ) ;
9122: LD_INT 35
9124: PPUSH
9125: CALL_OW 67
// end ;
9129: GO 9039
9131: POP
9132: POP
// ComFree ( tmp ) ;
9133: LD_VAR 0 6
9137: PPUSH
9138: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9142: LD_VAR 0 6
9146: PPUSH
9147: LD_INT 15
9149: PPUSH
9150: CALL_OW 173
// AddComHold ( tmp ) ;
9154: LD_VAR 0 6
9158: PPUSH
9159: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9163: LD_INT 35
9165: PPUSH
9166: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9170: LD_VAR 0 6
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: CALL_OW 314
9183: NOT
9184: IFFALSE 9198
// ComMoveToArea ( tmp , cyrusEscape ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: LD_INT 15
9193: PPUSH
9194: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9198: LD_VAR 0 6
9202: PUSH
9203: LD_INT 1
9205: ARRAY
9206: PPUSH
9207: LD_INT 15
9209: PPUSH
9210: CALL_OW 308
9214: IFFALSE 9269
// begin RemoveUnit ( tmp [ 1 ] ) ;
9216: LD_VAR 0 6
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9229: LD_ADDR_EXP 4
9233: PUSH
9234: LD_EXP 4
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: DIFF
9248: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9249: LD_ADDR_VAR 0 6
9253: PUSH
9254: LD_VAR 0 6
9258: PUSH
9259: LD_VAR 0 6
9263: PUSH
9264: LD_INT 1
9266: ARRAY
9267: DIFF
9268: ST_TO_ADDR
// end ; until tmp = 0 ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 0
9276: EQUAL
9277: IFFALSE 9163
// end ; wait ( 0 0$30 ) ;
9279: LD_INT 1050
9281: PPUSH
9282: CALL_OW 67
// if ru_spec_patrol then
9286: LD_EXP 54
9290: IFFALSE 9318
// for i in ru_spec_patrol do
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_EXP 54
9301: PUSH
9302: FOR_IN
9303: IFFALSE 9316
// RemoveUnit ( i ) ;
9305: LD_VAR 0 7
9309: PPUSH
9310: CALL_OW 64
9314: GO 9302
9316: POP
9317: POP
// end else
9318: GO 9340
// begin prepare_siege := false ;
9320: LD_ADDR_EXP 31
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9328: LD_EXP 37
9332: PPUSH
9333: LD_STRING D8a-JMM-1
9335: PPUSH
9336: CALL_OW 88
// end ; end ;
9340: PPOPN 7
9342: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9343: LD_EXP 12
9347: IFFALSE 10567
9349: GO 9351
9351: DISABLE
9352: LD_INT 0
9354: PPUSH
9355: PPUSH
9356: PPUSH
// begin uc_side := 8 ;
9357: LD_ADDR_OWVAR 20
9361: PUSH
9362: LD_INT 8
9364: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9365: LD_ADDR_VAR 0 3
9369: PUSH
9370: LD_INT 59
9372: PUSH
9373: LD_INT 71
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 122
9382: PUSH
9383: LD_INT 117
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9394: LD_ADDR_EXP 51
9398: PUSH
9399: LD_STRING Frank
9401: PPUSH
9402: LD_INT 0
9404: PPUSH
9405: LD_STRING 
9407: PPUSH
9408: CALL 33111 0 3
9412: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9413: LD_ADDR_VAR 0 1
9417: PUSH
9418: LD_INT 1
9420: PPUSH
9421: LD_INT 2
9423: PPUSH
9424: CALL_OW 12
9428: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9429: LD_EXP 51
9433: PPUSH
9434: LD_VAR 0 3
9438: PUSH
9439: LD_VAR 0 1
9443: ARRAY
9444: PUSH
9445: LD_INT 1
9447: ARRAY
9448: PPUSH
9449: LD_VAR 0 3
9453: PUSH
9454: LD_VAR 0 1
9458: ARRAY
9459: PUSH
9460: LD_INT 2
9462: ARRAY
9463: PPUSH
9464: LD_INT 0
9466: PPUSH
9467: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9471: LD_EXP 51
9475: PPUSH
9476: LD_INT 1
9478: PPUSH
9479: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9483: LD_INT 35
9485: PPUSH
9486: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9490: LD_EXP 51
9494: PPUSH
9495: LD_EXP 37
9499: PPUSH
9500: CALL_OW 296
9504: PUSH
9505: LD_INT 8
9507: LESS
9508: PUSH
9509: LD_EXP 51
9513: PPUSH
9514: CALL_OW 256
9518: PUSH
9519: LD_INT 250
9521: GREATER
9522: AND
9523: IFFALSE 9483
// Video ( true ) ;
9525: LD_INT 1
9527: PPUSH
9528: CALL 68953 0 1
// CenterOnUnits ( JMM ) ;
9532: LD_EXP 37
9536: PPUSH
9537: CALL_OW 85
// if IsInUnit ( JMM ) then
9541: LD_EXP 37
9545: PPUSH
9546: CALL_OW 310
9550: IFFALSE 9561
// ComFree ( JMM ) ;
9552: LD_EXP 37
9556: PPUSH
9557: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9561: LD_EXP 37
9565: PPUSH
9566: LD_EXP 51
9570: PPUSH
9571: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9575: LD_EXP 51
9579: PPUSH
9580: LD_EXP 37
9584: PPUSH
9585: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9589: LD_EXP 37
9593: PPUSH
9594: LD_STRING D6-JMM-1
9596: PPUSH
9597: CALL_OW 88
// p := 0 ;
9601: LD_ADDR_VAR 0 2
9605: PUSH
9606: LD_INT 0
9608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9609: LD_INT 35
9611: PPUSH
9612: CALL_OW 67
// p := p + 1 ;
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_VAR 0 2
9625: PUSH
9626: LD_INT 1
9628: PLUS
9629: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9630: LD_EXP 37
9634: PPUSH
9635: LD_EXP 51
9639: PPUSH
9640: CALL_OW 296
9644: PUSH
9645: LD_INT 8
9647: LESS
9648: PUSH
9649: LD_VAR 0 2
9653: PUSH
9654: LD_INT 7
9656: GREATER
9657: OR
9658: IFFALSE 9609
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9660: LD_EXP 40
9664: PUSH
9665: LD_EXP 40
9669: PPUSH
9670: LD_EXP 51
9674: PPUSH
9675: CALL_OW 296
9679: PUSH
9680: LD_INT 20
9682: LESS
9683: AND
9684: IFFALSE 9709
// begin ComFree ( Lisa ) ;
9686: LD_EXP 40
9690: PPUSH
9691: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9695: LD_EXP 40
9699: PPUSH
9700: LD_EXP 51
9704: PPUSH
9705: CALL_OW 172
// end ; if Lynch then
9709: LD_EXP 47
9713: IFFALSE 9738
// begin ComFree ( Lynch ) ;
9715: LD_EXP 47
9719: PPUSH
9720: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9724: LD_EXP 47
9728: PPUSH
9729: LD_EXP 51
9733: PPUSH
9734: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9738: LD_EXP 37
9742: PPUSH
9743: LD_EXP 51
9747: PPUSH
9748: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9752: LD_EXP 51
9756: PPUSH
9757: LD_EXP 37
9761: PPUSH
9762: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9766: LD_EXP 51
9770: PPUSH
9771: LD_STRING D6-Frank-1
9773: PPUSH
9774: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9778: LD_INT 69
9780: PPUSH
9781: LD_INT 20
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 20
9789: NEG
9790: PPUSH
9791: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9795: LD_INT 69
9797: PPUSH
9798: LD_INT 20
9800: PPUSH
9801: LD_INT 1
9803: PPUSH
9804: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9808: LD_INT 190
9810: PPUSH
9811: LD_INT 31
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: LD_INT 20
9819: NEG
9820: PPUSH
9821: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9825: LD_INT 190
9827: PPUSH
9828: LD_INT 31
9830: PPUSH
9831: LD_INT 1
9833: PPUSH
9834: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9838: LD_INT 69
9840: PPUSH
9841: LD_INT 20
9843: PPUSH
9844: CALL_OW 84
// Wait ( 0 0$02 ) ;
9848: LD_INT 70
9850: PPUSH
9851: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9855: LD_EXP 37
9859: PPUSH
9860: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9864: LD_EXP 40
9868: PUSH
9869: LD_EXP 40
9873: PPUSH
9874: LD_EXP 51
9878: PPUSH
9879: CALL_OW 296
9883: PUSH
9884: LD_INT 20
9886: LESS
9887: AND
9888: PUSH
9889: LD_EXP 40
9893: PPUSH
9894: CALL_OW 302
9898: AND
9899: IFFALSE 10021
// begin ComFree ( Lisa ) ;
9901: LD_EXP 40
9905: PPUSH
9906: CALL_OW 139
// p := 0 ;
9910: LD_ADDR_VAR 0 2
9914: PUSH
9915: LD_INT 0
9917: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9918: LD_INT 35
9920: PPUSH
9921: CALL_OW 67
// p := p + 1 ;
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: LD_VAR 0 2
9934: PUSH
9935: LD_INT 1
9937: PLUS
9938: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9939: LD_EXP 40
9943: PPUSH
9944: LD_EXP 51
9948: PPUSH
9949: CALL_OW 296
9953: PUSH
9954: LD_INT 7
9956: LESS
9957: PUSH
9958: LD_VAR 0 2
9962: PUSH
9963: LD_INT 7
9965: GREATER
9966: OR
9967: IFFALSE 9918
// Say ( Lisa , D6-Lisa-1 ) ;
9969: LD_EXP 40
9973: PPUSH
9974: LD_STRING D6-Lisa-1
9976: PPUSH
9977: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
9981: LD_EXP 40
9985: PPUSH
9986: LD_EXP 51
9990: PPUSH
9991: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
9995: LD_EXP 51
9999: PPUSH
10000: LD_EXP 40
10004: PPUSH
10005: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10009: LD_EXP 51
10013: PPUSH
10014: LD_STRING D6-Frank-2
10016: PPUSH
10017: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10021: LD_EXP 47
10025: PUSH
10026: LD_EXP 47
10030: PPUSH
10031: LD_EXP 51
10035: PPUSH
10036: CALL_OW 296
10040: PUSH
10041: LD_INT 20
10043: LESS
10044: AND
10045: PUSH
10046: LD_EXP 47
10050: PPUSH
10051: CALL_OW 302
10055: AND
10056: IFFALSE 10237
// begin ComTurnUnit ( Lynch , JMM ) ;
10058: LD_EXP 47
10062: PPUSH
10063: LD_EXP 37
10067: PPUSH
10068: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10072: LD_EXP 51
10076: PPUSH
10077: LD_EXP 37
10081: PPUSH
10082: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10086: LD_EXP 47
10090: PPUSH
10091: LD_STRING D6-Sol1-2
10093: PPUSH
10094: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10098: LD_EXP 37
10102: PPUSH
10103: LD_STRING D6-JMM-2
10105: PPUSH
10106: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10110: LD_EXP 51
10114: PPUSH
10115: LD_STRING D6-Frank-3
10117: PPUSH
10118: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10122: LD_EXP 37
10126: PPUSH
10127: LD_STRING D6-JMM-3
10129: PPUSH
10130: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10134: LD_EXP 51
10138: PPUSH
10139: LD_STRING D6-Frank-4
10141: PPUSH
10142: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10146: LD_EXP 51
10150: PPUSH
10151: LD_STRING D6-Frank-4a
10153: PPUSH
10154: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10158: LD_EXP 37
10162: PPUSH
10163: LD_STRING D6-JMM-4
10165: PPUSH
10166: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10170: LD_EXP 51
10174: PPUSH
10175: LD_STRING D6-Frank-5
10177: PPUSH
10178: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10182: LD_EXP 40
10186: PUSH
10187: LD_EXP 40
10191: PPUSH
10192: CALL_OW 302
10196: AND
10197: IFFALSE 10211
// Say ( Lisa , D6-Lisa-5 ) ;
10199: LD_EXP 40
10203: PPUSH
10204: LD_STRING D6-Lisa-5
10206: PPUSH
10207: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10211: LD_EXP 51
10215: PPUSH
10216: LD_STRING D6-Frank-6
10218: PPUSH
10219: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10223: LD_EXP 37
10227: PPUSH
10228: LD_STRING D6-JMM-6
10230: PPUSH
10231: CALL_OW 88
// end else
10235: GO 10352
// begin ComTurnUnit ( Frank , JMM ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_EXP 37
10246: PPUSH
10247: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10251: LD_EXP 51
10255: PPUSH
10256: LD_STRING D6-Frank-4
10258: PPUSH
10259: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10263: LD_EXP 51
10267: PPUSH
10268: LD_STRING D6-Frank-4a
10270: PPUSH
10271: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10275: LD_EXP 37
10279: PPUSH
10280: LD_STRING D6-JMM-4
10282: PPUSH
10283: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10287: LD_EXP 51
10291: PPUSH
10292: LD_STRING D6-Frank-5
10294: PPUSH
10295: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10299: LD_EXP 40
10303: PUSH
10304: LD_EXP 40
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: IFFALSE 10328
// Say ( Lisa , D6-Lisa-5 ) ;
10316: LD_EXP 40
10320: PPUSH
10321: LD_STRING D6-Lisa-5
10323: PPUSH
10324: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10328: LD_EXP 51
10332: PPUSH
10333: LD_STRING D6-Frank-6
10335: PPUSH
10336: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10340: LD_EXP 37
10344: PPUSH
10345: LD_STRING D6-JMM-6
10347: PPUSH
10348: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10352: LD_STRING Q1
10354: PPUSH
10355: CALL_OW 97
10359: PUSH
10360: LD_INT 1
10362: DOUBLE
10363: EQUAL
10364: IFTRUE 10368
10366: GO 10379
10368: POP
// frank_send_to_scout := true ; 2 :
10369: LD_ADDR_EXP 15
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
10377: GO 10399
10379: LD_INT 2
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10398
10387: POP
// frank_send_to_scout := false ; end ;
10388: LD_ADDR_EXP 15
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
10396: GO 10399
10398: POP
// Video ( false ) ;
10399: LD_INT 0
10401: PPUSH
10402: CALL 68953 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10406: LD_EXP 37
10410: PUSH
10411: LD_EXP 40
10415: PUSH
10416: LD_EXP 47
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 139
// if frank_send_to_scout then
10430: LD_EXP 15
10434: IFFALSE 10488
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10436: LD_EXP 51
10440: PPUSH
10441: LD_INT 15
10443: PPUSH
10444: CALL_OW 113
// wait ( 0 0$01 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 67
// until not See ( 1 , Frank ) ;
10455: LD_INT 1
10457: PPUSH
10458: LD_EXP 51
10462: PPUSH
10463: CALL_OW 292
10467: NOT
10468: IFFALSE 10436
// wait ( 0 0$02 ) ;
10470: LD_INT 70
10472: PPUSH
10473: CALL_OW 67
// RemoveUnit ( Frank ) ;
10477: LD_EXP 51
10481: PPUSH
10482: CALL_OW 64
// end else
10486: GO 10500
// SetSide ( Frank , 1 ) ;
10488: LD_EXP 51
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 235
// send_attack_on_cornel_base := true ;
10500: LD_ADDR_EXP 26
10504: PUSH
10505: LD_INT 1
10507: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10508: LD_INT 35
10510: PPUSH
10511: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10515: LD_ADDR_EXP 29
10519: PUSH
10520: LD_EXP 29
10524: PPUSH
10525: LD_STRING -
10527: PPUSH
10528: CALL 1069 0 2
10532: ST_TO_ADDR
// if debug then
10533: LD_EXP 1
10537: IFFALSE 10549
// debug_strings := time_to_prepare ;
10539: LD_ADDR_OWVAR 48
10543: PUSH
10544: LD_EXP 29
10548: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10549: LD_EXP 29
10553: PUSH
10554: LD_INT 0
10556: EQUAL
10557: IFFALSE 10508
// cornel_prepared := true ;
10559: LD_ADDR_EXP 11
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// end ;
10567: PPOPN 3
10569: END
// every 0 0$01 trigger cornel_prepared do
10570: LD_EXP 11
10574: IFFALSE 10882
10576: GO 10578
10578: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10579: LD_EXP 44
10583: PPUSH
10584: LD_STRING D3-Corn-1
10586: PPUSH
10587: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10591: LD_STRING MOutWait
10593: PPUSH
10594: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10598: LD_INT 35
10600: PPUSH
10601: CALL_OW 67
// until cornel_counter = 0 ;
10605: LD_EXP 10
10609: PUSH
10610: LD_INT 0
10612: EQUAL
10613: IFFALSE 10598
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10615: LD_EXP 44
10619: PPUSH
10620: LD_STRING D3a-Corn-1
10622: PPUSH
10623: CALL_OW 94
// if IsOk ( Cornel ) then
10627: LD_EXP 44
10631: PPUSH
10632: CALL_OW 302
10636: IFFALSE 10650
// Say ( JMM , D3a-JMM-1 ) ;
10638: LD_EXP 37
10642: PPUSH
10643: LD_STRING D3a-JMM-1
10645: PPUSH
10646: CALL_OW 88
// end_mission_allowed := true ;
10650: LD_ADDR_EXP 21
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10658: LD_STRING M2
10660: PPUSH
10661: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10665: LD_INT 9
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 424
// Wait ( 0 0$05 ) ;
10675: LD_INT 175
10677: PPUSH
10678: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10682: LD_EXP 44
10686: PPUSH
10687: LD_STRING D3a-Corn-2
10689: PPUSH
10690: CALL_OW 94
// cornel_attack := true ;
10694: LD_ADDR_EXP 9
10698: PUSH
10699: LD_INT 1
10701: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10702: LD_INT 105
10704: PPUSH
10705: CALL_OW 67
// AddMoreTanks ( ) ;
10709: CALL 4920 0 0
// if frank_send_to_scout then
10713: LD_EXP 15
10717: IFFALSE 10882
// begin InitHc ;
10719: CALL_OW 19
// InitUc ;
10723: CALL_OW 18
// uc_side := 8 ;
10727: LD_ADDR_OWVAR 20
10731: PUSH
10732: LD_INT 8
10734: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10735: LD_ADDR_EXP 51
10739: PUSH
10740: LD_STRING Frank
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: LD_STRING 
10748: PPUSH
10749: CALL 33111 0 3
10753: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10754: LD_EXP 51
10758: PPUSH
10759: LD_INT 6
10761: PPUSH
10762: LD_INT 9
10764: PPUSH
10765: LD_INT 0
10767: PPUSH
10768: CALL_OW 48
// ComCrawl ( Frank ) ;
10772: LD_EXP 51
10776: PPUSH
10777: CALL_OW 137
// repeat wait ( 10 ) ;
10781: LD_INT 10
10783: PPUSH
10784: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10788: LD_EXP 37
10792: PPUSH
10793: LD_EXP 51
10797: PPUSH
10798: CALL_OW 296
10802: PUSH
10803: LD_INT 9
10805: LESS
10806: PUSH
10807: LD_INT 9
10809: PPUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 1
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 70
10824: OR
10825: IFFALSE 10781
// if IsDead ( Frank ) then
10827: LD_EXP 51
10831: PPUSH
10832: CALL_OW 301
10836: IFFALSE 10840
// exit ;
10838: GO 10882
// CenterOnUnits ( Frank ) ;
10840: LD_EXP 51
10844: PPUSH
10845: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10849: LD_EXP 51
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10861: LD_EXP 51
10865: PPUSH
10866: LD_STRING D6a-Frank-1
10868: PPUSH
10869: CALL_OW 88
// ComWalk ( Frank ) ;
10873: LD_EXP 51
10877: PPUSH
10878: CALL_OW 138
// end ; end ;
10882: END
// every 0 0$01 trigger solar_builded do
10883: LD_EXP 14
10887: IFFALSE 10991
10889: GO 10891
10891: DISABLE
// begin Wait ( 0 0$02 ) ;
10892: LD_INT 70
10894: PPUSH
10895: CALL_OW 67
// DialogueOn ;
10899: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10903: LD_EXP 37
10907: PPUSH
10908: LD_STRING D2b-JMM-1
10910: PPUSH
10911: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10915: LD_EXP 48
10919: PUSH
10920: LD_EXP 48
10924: PPUSH
10925: CALL_OW 302
10929: AND
10930: IFFALSE 10980
// begin Say ( Walker , D2b-Sci1-1 ) ;
10932: LD_EXP 48
10936: PPUSH
10937: LD_STRING D2b-Sci1-1
10939: PPUSH
10940: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10944: LD_EXP 37
10948: PPUSH
10949: LD_STRING D2b-JMM-2
10951: PPUSH
10952: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
10956: LD_EXP 48
10960: PPUSH
10961: LD_STRING D2b-Sci1-2
10963: PPUSH
10964: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
10968: LD_EXP 37
10972: PPUSH
10973: LD_STRING D2b-JMM-3
10975: PPUSH
10976: CALL_OW 88
// end ; DialogueOff ;
10980: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
10984: LD_STRING MOutSol
10986: PPUSH
10987: CALL_OW 337
// end ;
10991: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
10992: LD_EXP 14
10996: PUSH
10997: LD_EXP 37
11001: PPUSH
11002: CALL_OW 302
11006: AND
11007: PUSH
11008: LD_EXP 37
11012: PPUSH
11013: CALL 903 0 1
11017: AND
11018: PUSH
11019: LD_EXP 16
11023: NOT
11024: AND
11025: IFFALSE 11096
11027: GO 11029
11029: DISABLE
11030: LD_INT 0
11032: PPUSH
// begin jmm_in_veh := true ;
11033: LD_ADDR_EXP 16
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11041: LD_ADDR_VAR 0 1
11045: PUSH
11046: LD_INT 0
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 12
11056: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11057: LD_INT 70
11059: PPUSH
11060: CALL_OW 67
// if i then
11064: LD_VAR 0 1
11068: IFFALSE 11084
// Say ( JMM , D2c-JMM-1 ) else
11070: LD_EXP 37
11074: PPUSH
11075: LD_STRING D2c-JMM-1
11077: PPUSH
11078: CALL_OW 88
11082: GO 11096
// Say ( JMM , D2c-JMM-1a ) ;
11084: LD_EXP 37
11088: PPUSH
11089: LD_STRING D2c-JMM-1a
11091: PPUSH
11092: CALL_OW 88
// end ;
11096: PPOPN 1
11098: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11099: LD_EXP 14
11103: PUSH
11104: LD_EXP 38
11108: PPUSH
11109: CALL_OW 302
11113: AND
11114: PUSH
11115: LD_EXP 38
11119: PPUSH
11120: CALL 903 0 1
11124: AND
11125: PUSH
11126: LD_EXP 17
11130: NOT
11131: AND
11132: IFFALSE 11164
11134: GO 11136
11136: DISABLE
// begin bobby_in_veh := true ;
11137: LD_ADDR_EXP 17
11141: PUSH
11142: LD_INT 1
11144: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11145: LD_INT 70
11147: PPUSH
11148: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11152: LD_EXP 38
11156: PPUSH
11157: LD_STRING D2c-Bobby-1
11159: PPUSH
11160: CALL_OW 88
11164: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11165: LD_EXP 14
11169: PUSH
11170: LD_EXP 40
11174: PPUSH
11175: CALL_OW 302
11179: AND
11180: PUSH
11181: LD_EXP 40
11185: PPUSH
11186: CALL 903 0 1
11190: AND
11191: PUSH
11192: LD_EXP 19
11196: NOT
11197: AND
11198: IFFALSE 11230
11200: GO 11202
11202: DISABLE
// begin lisa_in_veh := true ;
11203: LD_ADDR_EXP 19
11207: PUSH
11208: LD_INT 1
11210: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11211: LD_INT 70
11213: PPUSH
11214: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11218: LD_EXP 40
11222: PPUSH
11223: LD_STRING D2c-Lisa-1
11225: PPUSH
11226: CALL_OW 88
11230: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11231: LD_EXP 14
11235: PUSH
11236: LD_EXP 39
11240: PPUSH
11241: CALL_OW 302
11245: AND
11246: PUSH
11247: LD_EXP 39
11251: PPUSH
11252: CALL 903 0 1
11256: AND
11257: PUSH
11258: LD_EXP 18
11262: NOT
11263: AND
11264: IFFALSE 11335
11266: GO 11268
11268: DISABLE
11269: LD_INT 0
11271: PPUSH
// begin cyrus_in_veh := true ;
11272: LD_ADDR_EXP 18
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11280: LD_ADDR_VAR 0 1
11284: PUSH
11285: LD_INT 0
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 12
11295: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11296: LD_INT 70
11298: PPUSH
11299: CALL_OW 67
// if i then
11303: LD_VAR 0 1
11307: IFFALSE 11323
// Say ( Cyrus , D2c-Cyrus-1 ) else
11309: LD_EXP 39
11313: PPUSH
11314: LD_STRING D2c-Cyrus-1
11316: PPUSH
11317: CALL_OW 88
11321: GO 11335
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11323: LD_EXP 39
11327: PPUSH
11328: LD_STRING D2c-Cyrus-1a
11330: PPUSH
11331: CALL_OW 88
// end ;
11335: PPOPN 1
11337: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11338: LD_EXP 44
11342: PPUSH
11343: LD_INT 16
11345: PPUSH
11346: CALL_OW 308
11350: IFFALSE 11631
11352: GO 11354
11354: DISABLE
11355: LD_INT 0
11357: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11358: LD_INT 3
11360: PPUSH
11361: LD_EXP 44
11365: PPUSH
11366: CALL_OW 471
// send_attack_on_cornel := true ;
11370: LD_ADDR_EXP 32
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if ru_vehicles then
11378: LD_EXP 56
11382: IFFALSE 11416
// for i in ru_vehicles do
11384: LD_ADDR_VAR 0 1
11388: PUSH
11389: LD_EXP 56
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11414
// ComAgressiveMove ( i , 215 , 69 ) ;
11397: LD_VAR 0 1
11401: PPUSH
11402: LD_INT 215
11404: PPUSH
11405: LD_INT 69
11407: PPUSH
11408: CALL_OW 114
11412: GO 11394
11414: POP
11415: POP
// if ru_patrol then
11416: LD_EXP 53
11420: IFFALSE 11454
// for i in ru_patrol do
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_EXP 53
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11452
// ComAgressiveMove ( i , 215 , 69 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 215
11442: PPUSH
11443: LD_INT 69
11445: PPUSH
11446: CALL_OW 114
11450: GO 11432
11452: POP
11453: POP
// if frank_send_to_scout then
11454: LD_EXP 15
11458: IFFALSE 11472
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11460: LD_EXP 51
11464: PPUSH
11465: LD_STRING D3b-Frank-1
11467: PPUSH
11468: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11472: LD_INT 105
11474: PPUSH
11475: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11479: LD_EXP 44
11483: PPUSH
11484: LD_STRING D4-Corn-1
11486: PPUSH
11487: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11491: LD_INT 35
11493: PPUSH
11494: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11498: LD_INT 22
11500: PUSH
11501: LD_INT 4
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 21
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 3
11520: PUSH
11521: LD_INT 24
11523: PUSH
11524: LD_INT 1000
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: PPUSH
11540: CALL_OW 69
11544: PUSH
11545: LD_INT 6
11547: LESS
11548: IFFALSE 11491
// if Cornel then
11550: LD_EXP 44
11554: IFFALSE 11594
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11556: LD_EXP 44
11560: PPUSH
11561: LD_STRING D5-Corn-1
11563: PPUSH
11564: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11568: LD_EXP 44
11572: PPUSH
11573: LD_EXP 2
11577: PUSH
11578: LD_STRING Cornel
11580: STR
11581: PPUSH
11582: CALL_OW 38
// cornel_saved := true ;
11586: LD_ADDR_EXP 27
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11594: LD_INT 4
11596: PPUSH
11597: LD_INT 8
11599: PPUSH
11600: CALL_OW 343
// Wait ( 0 0$01 ) ;
11604: LD_INT 35
11606: PPUSH
11607: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11611: LD_INT 3
11613: PPUSH
11614: LD_EXP 44
11618: PPUSH
11619: CALL_OW 472
// send_attack_on_cornel := false ;
11623: LD_ADDR_EXP 32
11627: PUSH
11628: LD_INT 0
11630: ST_TO_ADDR
// end ;
11631: PPOPN 1
11633: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11634: LD_INT 9
11636: PPUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 1
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 70
11651: PUSH
11652: LD_EXP 33
11656: OR
11657: IFFALSE 11878
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
// begin enable ;
11666: ENABLE
// if not jmm_on_west then
11667: LD_EXP 5
11671: NOT
11672: IFFALSE 11683
// begin YouLost ( 4 ) ;
11674: LD_STRING 4
11676: PPUSH
11677: CALL_OW 104
// exit ;
11681: GO 11878
// end ; if not game_end then
11683: LD_EXP 33
11687: NOT
11688: IFFALSE 11698
// game_end := true ;
11690: LD_ADDR_EXP 33
11694: PUSH
11695: LD_INT 1
11697: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_INT 9
11705: PPUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 70
11720: ST_TO_ADDR
// if not filter then
11721: LD_VAR 0 2
11725: NOT
11726: IFFALSE 11730
// exit ;
11728: GO 11878
// for i in filter do
11730: LD_ADDR_VAR 0 1
11734: PUSH
11735: LD_VAR 0 2
11739: PUSH
11740: FOR_IN
11741: IFFALSE 11876
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and GetNation ( i ) = nation_american then
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 302
11752: PUSH
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 247
11762: PUSH
11763: LD_INT 2
11765: EQUAL
11766: AND
11767: PUSH
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 248
11777: PUSH
11778: LD_INT 1
11780: EQUAL
11781: AND
11782: IFFALSE 11839
// begin if i = JMM and save_group < 4 then
11784: LD_VAR 0 1
11788: PUSH
11789: LD_EXP 37
11793: EQUAL
11794: PUSH
11795: LD_EXP 23
11799: PUSH
11800: LD_INT 4
11802: LESS
11803: AND
11804: IFFALSE 11808
// continue ;
11806: GO 11740
// veh_on_meta := true ;
11808: LD_ADDR_EXP 28
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11816: LD_VAR 0 1
11820: PPUSH
11821: CALL_OW 311
11825: PPUSH
11826: CALL 11881 0 1
// RemoveUnit ( i ) ;
11830: LD_VAR 0 1
11834: PPUSH
11835: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11839: LD_VAR 0 1
11843: PPUSH
11844: CALL_OW 302
11848: PUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 247
11858: PUSH
11859: LD_INT 1
11861: EQUAL
11862: AND
11863: IFFALSE 11874
// Save ( i ) ;
11865: LD_VAR 0 1
11869: PPUSH
11870: CALL 11881 0 1
// end ;
11874: GO 11740
11876: POP
11877: POP
// end ;
11878: PPOPN 2
11880: END
// export function Save ( i ) ; begin
11881: LD_INT 0
11883: PPUSH
// if i = JMM and save_group >= 4 then
11884: LD_VAR 0 1
11888: PUSH
11889: LD_EXP 37
11893: EQUAL
11894: PUSH
11895: LD_EXP 23
11899: PUSH
11900: LD_INT 4
11902: GREATEREQUAL
11903: AND
11904: IFFALSE 12040
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11906: LD_EXP 24
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: PUSH
11940: LD_INT 1
11942: GREATER
11943: AND
11944: IFFALSE 12001
// begin show_query := false ;
11946: LD_ADDR_EXP 24
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
11954: LD_STRING Q2
11956: PPUSH
11957: CALL_OW 97
11961: PUSH
11962: LD_INT 1
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 11981
11970: POP
// wait_for_them := true ; 2 :
11971: LD_ADDR_EXP 25
11975: PUSH
11976: LD_INT 1
11978: ST_TO_ADDR
11979: GO 12001
11981: LD_INT 2
11983: DOUBLE
11984: EQUAL
11985: IFTRUE 11989
11987: GO 12000
11989: POP
// wait_for_them := false ; end ;
11990: LD_ADDR_EXP 25
11994: PUSH
11995: LD_INT 0
11997: ST_TO_ADDR
11998: GO 12001
12000: POP
// end ; save_counter := save_counter + 1 ;
12001: LD_ADDR_EXP 36
12005: PUSH
12006: LD_EXP 36
12010: PUSH
12011: LD_INT 1
12013: PLUS
12014: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12015: LD_ADDR_EXP 23
12019: PUSH
12020: LD_EXP 23
12024: PUSH
12025: LD_EXP 37
12029: ADD
12030: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12031: LD_EXP 37
12035: PPUSH
12036: CALL_OW 64
// end ; if i = Lisa then
12040: LD_VAR 0 1
12044: PUSH
12045: LD_EXP 40
12049: EQUAL
12050: IFFALSE 12091
// begin save_counter := save_counter + 1 ;
12052: LD_ADDR_EXP 36
12056: PUSH
12057: LD_EXP 36
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12066: LD_ADDR_EXP 23
12070: PUSH
12071: LD_EXP 23
12075: PUSH
12076: LD_EXP 40
12080: ADD
12081: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12082: LD_EXP 40
12086: PPUSH
12087: CALL_OW 64
// end ; if i = Bobby then
12091: LD_VAR 0 1
12095: PUSH
12096: LD_EXP 38
12100: EQUAL
12101: IFFALSE 12142
// begin save_counter := save_counter + 1 ;
12103: LD_ADDR_EXP 36
12107: PUSH
12108: LD_EXP 36
12112: PUSH
12113: LD_INT 1
12115: PLUS
12116: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12117: LD_ADDR_EXP 23
12121: PUSH
12122: LD_EXP 23
12126: PUSH
12127: LD_EXP 38
12131: ADD
12132: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12133: LD_EXP 38
12137: PPUSH
12138: CALL_OW 64
// end ; if i = Cyrus then
12142: LD_VAR 0 1
12146: PUSH
12147: LD_EXP 39
12151: EQUAL
12152: IFFALSE 12193
// begin save_counter := save_counter + 1 ;
12154: LD_ADDR_EXP 36
12158: PUSH
12159: LD_EXP 36
12163: PUSH
12164: LD_INT 1
12166: PLUS
12167: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12168: LD_ADDR_EXP 23
12172: PUSH
12173: LD_EXP 23
12177: PUSH
12178: LD_EXP 39
12182: ADD
12183: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12184: LD_EXP 39
12188: PPUSH
12189: CALL_OW 64
// end ; if i = Khatam then
12193: LD_VAR 0 1
12197: PUSH
12198: LD_EXP 41
12202: EQUAL
12203: IFFALSE 12244
// begin save_counter := save_counter + 1 ;
12205: LD_ADDR_EXP 36
12209: PUSH
12210: LD_EXP 36
12214: PUSH
12215: LD_INT 1
12217: PLUS
12218: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12219: LD_ADDR_EXP 23
12223: PUSH
12224: LD_EXP 23
12228: PUSH
12229: LD_EXP 41
12233: ADD
12234: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12235: LD_EXP 41
12239: PPUSH
12240: CALL_OW 64
// end ; if i = Frank then
12244: LD_VAR 0 1
12248: PUSH
12249: LD_EXP 51
12253: EQUAL
12254: IFFALSE 12295
// begin save_counter := save_counter + 1 ;
12256: LD_ADDR_EXP 36
12260: PUSH
12261: LD_EXP 36
12265: PUSH
12266: LD_INT 1
12268: PLUS
12269: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12270: LD_ADDR_EXP 23
12274: PUSH
12275: LD_EXP 23
12279: PUSH
12280: LD_EXP 51
12284: ADD
12285: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12286: LD_EXP 51
12290: PPUSH
12291: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12295: LD_VAR 0 1
12299: PUSH
12300: LD_EXP 37
12304: NONEQUAL
12305: PUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 302
12315: AND
12316: PUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: CALL_OW 247
12326: PUSH
12327: LD_INT 1
12329: EQUAL
12330: AND
12331: PUSH
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 23
12341: IN
12342: NOT
12343: AND
12344: IFFALSE 12385
// begin save_counter := save_counter + 1 ;
12346: LD_ADDR_EXP 36
12350: PUSH
12351: LD_EXP 36
12355: PUSH
12356: LD_INT 1
12358: PLUS
12359: ST_TO_ADDR
// save_others := save_others ^ i ;
12360: LD_ADDR_EXP 22
12364: PUSH
12365: LD_EXP 22
12369: PUSH
12370: LD_VAR 0 1
12374: ADD
12375: ST_TO_ADDR
// RemoveUnit ( i ) ;
12376: LD_VAR 0 1
12380: PPUSH
12381: CALL_OW 64
// end ; end ;
12385: LD_VAR 0 2
12389: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12390: LD_EXP 24
12394: NOT
12395: PUSH
12396: LD_EXP 25
12400: NOT
12401: AND
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 0
12434: EQUAL
12435: OR
12436: IFFALSE 12445
12438: GO 12440
12440: DISABLE
// EndMission ;
12441: CALL 12446 0 0
12445: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
12450: PPUSH
12451: PPUSH
12452: PPUSH
// wait ( 0 0$01 ) ;
12453: LD_INT 35
12455: PPUSH
12456: CALL_OW 67
// if tick <= 12 12$00 then
12460: LD_OWVAR 1
12464: PUSH
12465: LD_INT 25200
12467: LESSEQUAL
12468: IFFALSE 12477
// SetAchievement ( ACH_ASPEED_3 ) ;
12470: LD_STRING ACH_ASPEED_3
12472: PPUSH
12473: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12477: LD_EXP 23
12481: PUSH
12482: LD_EXP 22
12486: ADD
12487: PPUSH
12488: LD_INT 25
12490: PUSH
12491: LD_INT 4
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 72
12502: PUSH
12503: LD_INT 0
12505: EQUAL
12506: IFFALSE 12522
// begin wait ( 3 ) ;
12508: LD_INT 3
12510: PPUSH
12511: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12515: LD_STRING ACH_NOSCI
12517: PPUSH
12518: CALL_OW 543
// end ; m1 := solar_builded ;
12522: LD_ADDR_VAR 0 3
12526: PUSH
12527: LD_EXP 14
12531: ST_TO_ADDR
// m2 := veh_on_meta ;
12532: LD_ADDR_VAR 0 4
12536: PUSH
12537: LD_EXP 28
12541: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12542: LD_ADDR_VAR 0 5
12546: PUSH
12547: LD_EXP 34
12551: PUSH
12552: LD_INT 0
12554: EQUAL
12555: ST_TO_ADDR
// if solar_builded then
12556: LD_EXP 14
12560: IFFALSE 12574
// AddMedal ( Solar1 , 1 ) else
12562: LD_STRING Solar1
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 101
12572: GO 12585
// AddMedal ( Solar1 , - 1 ) ;
12574: LD_STRING Solar1
12576: PPUSH
12577: LD_INT 1
12579: NEG
12580: PPUSH
12581: CALL_OW 101
// if veh_on_meta then
12585: LD_EXP 28
12589: IFFALSE 12603
// AddMedal ( Solar2 , 1 ) else
12591: LD_STRING Solar2
12593: PPUSH
12594: LD_INT 1
12596: PPUSH
12597: CALL_OW 101
12601: GO 12633
// if solar_builded then
12603: LD_EXP 14
12607: IFFALSE 12622
// AddMedal ( Solar2 , - 1 ) else
12609: LD_STRING Solar2
12611: PPUSH
12612: LD_INT 1
12614: NEG
12615: PPUSH
12616: CALL_OW 101
12620: GO 12633
// AddMedal ( Solar2 , - 2 ) ;
12622: LD_STRING Solar2
12624: PPUSH
12625: LD_INT 2
12627: NEG
12628: PPUSH
12629: CALL_OW 101
// if lose_counter = 0 then
12633: LD_EXP 34
12637: PUSH
12638: LD_INT 0
12640: EQUAL
12641: IFFALSE 12655
// AddMedal ( No , 1 ) else
12643: LD_STRING No
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 101
12653: GO 12699
// if lose_counter > 0 and lose_counter < 4 then
12655: LD_EXP 34
12659: PUSH
12660: LD_INT 0
12662: GREATER
12663: PUSH
12664: LD_EXP 34
12668: PUSH
12669: LD_INT 4
12671: LESS
12672: AND
12673: IFFALSE 12688
// AddMedal ( No , - 1 ) else
12675: LD_STRING No
12677: PPUSH
12678: LD_INT 1
12680: NEG
12681: PPUSH
12682: CALL_OW 101
12686: GO 12699
// AddMedal ( UpTo4 , - 1 ) ;
12688: LD_STRING UpTo4
12690: PPUSH
12691: LD_INT 1
12693: NEG
12694: PPUSH
12695: CALL_OW 101
// GiveMedals ( MAIN ) ;
12699: LD_STRING MAIN
12701: PPUSH
12702: CALL_OW 102
// if Difficulty = 3 and m1 and m2 and m3 then
12706: LD_OWVAR 67
12710: PUSH
12711: LD_INT 3
12713: EQUAL
12714: PUSH
12715: LD_VAR 0 3
12719: AND
12720: PUSH
12721: LD_VAR 0 4
12725: AND
12726: PUSH
12727: LD_VAR 0 5
12731: AND
12732: IFFALSE 12744
// SetAchievementEX ( ACH_AMER , 3 ) ;
12734: LD_STRING ACH_AMER
12736: PPUSH
12737: LD_INT 3
12739: PPUSH
12740: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12744: LD_EXP 52
12748: PPUSH
12749: CALL_OW 301
12753: IFFALSE 12809
// begin stop_talking := true ;
12755: LD_ADDR_OWVAR 56
12759: PUSH
12760: LD_INT 1
12762: ST_TO_ADDR
// for i in save_group ^ save_others do
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_EXP 23
12772: PUSH
12773: LD_EXP 22
12777: ADD
12778: PUSH
12779: FOR_IN
12780: IFFALSE 12799
// AddExperience ( i , skill_combat , 1500 ) ;
12782: LD_VAR 0 2
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: LD_INT 1500
12792: PPUSH
12793: CALL_OW 492
12797: GO 12779
12799: POP
12800: POP
// stop_talking := false ;
12801: LD_ADDR_OWVAR 56
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12809: LD_EXP 23
12813: PUSH
12814: LD_EXP 22
12818: ADD
12819: PPUSH
12820: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12824: LD_EXP 37
12828: PPUSH
12829: LD_EXP 2
12833: PUSH
12834: LD_STRING JMM
12836: STR
12837: PPUSH
12838: CALL_OW 38
// if Bobby in save_group then
12842: LD_EXP 38
12846: PUSH
12847: LD_EXP 23
12851: IN
12852: IFFALSE 12872
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12854: LD_EXP 38
12858: PPUSH
12859: LD_EXP 2
12863: PUSH
12864: LD_STRING Bobby
12866: STR
12867: PPUSH
12868: CALL_OW 38
// if Cyrus in save_group then
12872: LD_EXP 39
12876: PUSH
12877: LD_EXP 23
12881: IN
12882: IFFALSE 12902
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12884: LD_EXP 39
12888: PPUSH
12889: LD_EXP 2
12893: PUSH
12894: LD_STRING Cyrus
12896: STR
12897: PPUSH
12898: CALL_OW 38
// if Lisa in save_group then
12902: LD_EXP 40
12906: PUSH
12907: LD_EXP 23
12911: IN
12912: IFFALSE 12932
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12914: LD_EXP 40
12918: PPUSH
12919: LD_EXP 2
12923: PUSH
12924: LD_STRING Lisa
12926: STR
12927: PPUSH
12928: CALL_OW 38
// if Frank in save_group then
12932: LD_EXP 51
12936: PUSH
12937: LD_EXP 23
12941: IN
12942: IFFALSE 12962
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12944: LD_EXP 51
12948: PPUSH
12949: LD_EXP 2
12953: PUSH
12954: LD_STRING Frank
12956: STR
12957: PPUSH
12958: CALL_OW 38
// if Khatam in save_group then
12962: LD_EXP 41
12966: PUSH
12967: LD_EXP 23
12971: IN
12972: IFFALSE 12992
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
12974: LD_EXP 41
12978: PPUSH
12979: LD_EXP 2
12983: PUSH
12984: LD_STRING Khatam
12986: STR
12987: PPUSH
12988: CALL_OW 38
// if save_others then
12992: LD_EXP 22
12996: IFFALSE 13010
// SaveCharacters ( save_others , 03_others ) ;
12998: LD_EXP 22
13002: PPUSH
13003: LD_STRING 03_others
13005: PPUSH
13006: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13010: LD_EXP 45
13014: PUSH
13015: LD_EXP 45
13019: PPUSH
13020: CALL_OW 302
13024: AND
13025: PUSH
13026: LD_EXP 27
13030: AND
13031: IFFALSE 13043
// begin ResetFog ;
13033: CALL_OW 335
// DisplayEndingScene ;
13037: CALL 13065 0 0
// end else
13041: GO 13056
// DeleteCharacters ( mission_prefix & Cornel ) ;
13043: LD_EXP 2
13047: PUSH
13048: LD_STRING Cornel
13050: STR
13051: PPUSH
13052: CALL_OW 40
// YouWin ;
13056: CALL_OW 103
// end ;
13060: LD_VAR 0 1
13064: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
13069: PPUSH
13070: PPUSH
13071: PPUSH
13072: PPUSH
// InGameOn ;
13073: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13077: LD_INT 208
13079: PPUSH
13080: LD_INT 62
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: LD_INT 10
13088: NEG
13089: PPUSH
13090: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13094: LD_INT 208
13096: PPUSH
13097: LD_INT 62
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13107: LD_ADDR_VAR 0 3
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 2
13124: PUSH
13125: LD_INT 21
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 1
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 69
13158: ST_TO_ADDR
// if filter then
13159: LD_VAR 0 3
13163: IFFALSE 13191
// for i in filter do
13165: LD_ADDR_VAR 0 2
13169: PUSH
13170: LD_VAR 0 3
13174: PUSH
13175: FOR_IN
13176: IFFALSE 13189
// RemoveUnit ( i ) ;
13178: LD_VAR 0 2
13182: PPUSH
13183: CALL_OW 64
13187: GO 13175
13189: POP
13190: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13191: LD_ADDR_VAR 0 3
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_INT 4
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 21
13208: PUSH
13209: LD_INT 1
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: ST_TO_ADDR
// if filter then
13225: LD_VAR 0 3
13229: IFFALSE 13260
// for i in filter do
13231: LD_ADDR_VAR 0 2
13235: PUSH
13236: LD_VAR 0 3
13240: PUSH
13241: FOR_IN
13242: IFFALSE 13258
// SetLives ( i , 0 ) ;
13244: LD_VAR 0 2
13248: PPUSH
13249: LD_INT 0
13251: PPUSH
13252: CALL_OW 234
13256: GO 13241
13258: POP
13259: POP
// uc_side := 4 ;
13260: LD_ADDR_OWVAR 20
13264: PUSH
13265: LD_INT 4
13267: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13268: LD_ADDR_VAR 0 4
13272: PUSH
13273: LD_STRING Cornell
13275: PPUSH
13276: LD_INT 0
13278: PPUSH
13279: LD_STRING 
13281: PPUSH
13282: CALL 33111 0 3
13286: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13287: LD_VAR 0 4
13291: PPUSH
13292: LD_INT 208
13294: PPUSH
13295: LD_INT 62
13297: PPUSH
13298: LD_INT 0
13300: PPUSH
13301: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13305: LD_VAR 0 4
13309: PPUSH
13310: LD_INT 100
13312: PPUSH
13313: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13317: LD_INT 3
13319: PPUSH
13320: LD_VAR 0 4
13324: PPUSH
13325: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13329: LD_INT 4
13331: PPUSH
13332: LD_INT 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 80
// uc_side := 3 ;
13345: LD_ADDR_OWVAR 20
13349: PUSH
13350: LD_INT 3
13352: ST_TO_ADDR
// uc_nation := 3 ;
13353: LD_ADDR_OWVAR 21
13357: PUSH
13358: LD_INT 3
13360: ST_TO_ADDR
// InitHc ;
13361: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13365: LD_ADDR_VAR 0 5
13369: PUSH
13370: LD_STRING Mikhail
13372: PPUSH
13373: LD_INT 0
13375: PPUSH
13376: LD_STRING 
13378: PPUSH
13379: CALL 33111 0 3
13383: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13384: LD_INT 1
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: LD_INT 0
13392: PPUSH
13393: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13397: LD_ADDR_VAR 0 6
13401: PUSH
13402: LD_VAR 0 6
13406: PUSH
13407: CALL_OW 44
13411: ADD
13412: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13413: LD_ADDR_VAR 0 6
13417: PUSH
13418: LD_VAR 0 6
13422: PUSH
13423: CALL_OW 44
13427: ADD
13428: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13429: LD_INT 2
13431: PPUSH
13432: LD_INT 4
13434: PPUSH
13435: LD_INT 0
13437: PPUSH
13438: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13442: LD_ADDR_VAR 0 6
13446: PUSH
13447: LD_VAR 0 6
13451: PUSH
13452: CALL_OW 44
13456: ADD
13457: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13458: LD_VAR 0 5
13462: PPUSH
13463: LD_INT 17
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13473: LD_VAR 0 5
13477: PPUSH
13478: LD_INT 210
13480: PPUSH
13481: LD_INT 63
13483: PPUSH
13484: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13488: LD_VAR 0 5
13492: PPUSH
13493: LD_INT 208
13495: PPUSH
13496: LD_INT 62
13498: PPUSH
13499: CALL_OW 178
// for i in fake_russians do
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 6
13512: PUSH
13513: FOR_IN
13514: IFFALSE 13592
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13516: LD_VAR 0 2
13520: PPUSH
13521: LD_INT 17
13523: PPUSH
13524: LD_INT 0
13526: PPUSH
13527: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13531: LD_VAR 0 2
13535: PPUSH
13536: LD_INT 215
13538: PPUSH
13539: LD_INT 67
13541: PPUSH
13542: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_INT 208
13553: PPUSH
13554: LD_INT 62
13556: PPUSH
13557: CALL_OW 178
// if GetClass ( i ) = 4 then
13561: LD_VAR 0 2
13565: PPUSH
13566: CALL_OW 257
13570: PUSH
13571: LD_INT 4
13573: EQUAL
13574: IFFALSE 13590
// ComHeal ( i , fake_cornel ) ;
13576: LD_VAR 0 2
13580: PPUSH
13581: LD_VAR 0 4
13585: PPUSH
13586: CALL_OW 128
// end ;
13590: GO 13513
13592: POP
13593: POP
// Wait ( 0 0$01 ) ;
13594: LD_INT 35
13596: PPUSH
13597: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13611: LD_INT 208
13613: PPUSH
13614: LD_INT 62
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: LD_INT 10
13622: NEG
13623: PPUSH
13624: CALL_OW 330
// Wait ( 0 0$15 ) ;
13628: LD_INT 525
13630: PPUSH
13631: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13635: LD_INT 208
13637: PPUSH
13638: LD_INT 62
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 331
// ResetFog ;
13648: CALL_OW 335
// InGameOff ;
13652: CALL_OW 9
// end ;
13656: LD_VAR 0 1
13660: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13661: LD_INT 10
13663: PPUSH
13664: LD_INT 22
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 70
13678: PUSH
13679: LD_EXP 44
13683: PPUSH
13684: CALL_OW 302
13688: AND
13689: PUSH
13690: LD_INT 22
13692: PUSH
13693: LD_INT 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL_OW 69
13704: PPUSH
13705: LD_EXP 44
13709: PPUSH
13710: CALL_OW 74
13714: PPUSH
13715: LD_EXP 44
13719: PPUSH
13720: CALL_OW 296
13724: PUSH
13725: LD_INT 30
13727: LESS
13728: OR
13729: IFFALSE 13780
13731: GO 13733
13733: DISABLE
// begin enable ;
13734: ENABLE
// powell_warn := powell_warn + 1 ;
13735: LD_ADDR_EXP 35
13739: PUSH
13740: LD_EXP 35
13744: PUSH
13745: LD_INT 1
13747: PLUS
13748: ST_TO_ADDR
// if powell_warn = 3 then
13749: LD_EXP 35
13753: PUSH
13754: LD_INT 3
13756: EQUAL
13757: IFFALSE 13768
// begin YouLost ( 5 ) ;
13759: LD_STRING 5
13761: PPUSH
13762: CALL_OW 104
// exit ;
13766: GO 13780
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13768: LD_EXP 46
13772: PPUSH
13773: LD_STRING DWarn-Pow-1
13775: PPUSH
13776: CALL_OW 94
// end ; end_of_file
13780: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13781: LD_EXP 8
13785: IFFALSE 15622
13787: GO 13789
13789: DISABLE
13790: LD_INT 0
13792: PPUSH
13793: PPUSH
13794: PPUSH
13795: PPUSH
13796: PPUSH
13797: PPUSH
13798: PPUSH
13799: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13800: LD_EXP 44
13804: PUSH
13805: LD_EXP 45
13809: ADD
13810: PUSH
13811: LD_EXP 6
13815: ADD
13816: PPUSH
13817: LD_INT 250
13819: PPUSH
13820: LD_INT 120
13822: PPUSH
13823: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_EXP 6
13836: PPUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 72
13851: PUSH
13852: LD_EXP 45
13856: DIFF
13857: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13858: LD_ADDR_VAR 0 3
13862: PUSH
13863: LD_EXP 6
13867: PPUSH
13868: LD_INT 21
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PPUSH
13878: CALL_OW 72
13882: PUSH
13883: LD_VAR 0 2
13887: DIFF
13888: ST_TO_ADDR
// if not has_eng then
13889: LD_VAR 0 2
13893: NOT
13894: IFFALSE 13977
// begin uc_side := 4 ;
13896: LD_ADDR_OWVAR 20
13900: PUSH
13901: LD_INT 4
13903: ST_TO_ADDR
// uc_nation := 1 ;
13904: LD_ADDR_OWVAR 21
13908: PUSH
13909: LD_INT 1
13911: ST_TO_ADDR
// bc_type := b_depot ;
13912: LD_ADDR_OWVAR 42
13916: PUSH
13917: LD_INT 0
13919: ST_TO_ADDR
// bc_level := 2 ;
13920: LD_ADDR_OWVAR 43
13924: PUSH
13925: LD_INT 2
13927: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13928: LD_ADDR_VAR 0 4
13932: PUSH
13933: LD_INT 264
13935: PPUSH
13936: LD_INT 120
13938: PPUSH
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 47
13946: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
13947: LD_INT 264
13949: PPUSH
13950: LD_INT 120
13952: PPUSH
13953: LD_INT 4
13955: PPUSH
13956: LD_INT 10
13958: NEG
13959: PPUSH
13960: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
13964: LD_INT 264
13966: PPUSH
13967: LD_INT 120
13969: PPUSH
13970: LD_INT 4
13972: PPUSH
13973: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
13977: LD_INT 35
13979: PPUSH
13980: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
13984: LD_EXP 44
13988: PPUSH
13989: LD_INT 10
13991: PPUSH
13992: CALL_OW 308
13996: PUSH
13997: LD_EXP 44
14001: PPUSH
14002: CALL_OW 310
14006: PPUSH
14007: LD_INT 10
14009: PPUSH
14010: CALL_OW 308
14014: OR
14015: IFFALSE 13977
// if has_eng and not dep then
14017: LD_VAR 0 2
14021: PUSH
14022: LD_VAR 0 4
14026: NOT
14027: AND
14028: IFFALSE 14178
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14030: LD_VAR 0 2
14034: PPUSH
14035: LD_INT 0
14037: PPUSH
14038: LD_INT 264
14040: PPUSH
14041: LD_INT 120
14043: PPUSH
14044: LD_INT 4
14046: PPUSH
14047: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14051: LD_INT 35
14053: PPUSH
14054: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14058: LD_INT 22
14060: PUSH
14061: LD_INT 4
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 30
14070: PUSH
14071: LD_INT 0
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PPUSH
14082: CALL_OW 69
14086: IFFALSE 14051
// ComMoveXY ( filter , 264 , 120 ) ;
14088: LD_VAR 0 3
14092: PPUSH
14093: LD_INT 264
14095: PPUSH
14096: LD_INT 120
14098: PPUSH
14099: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14103: LD_INT 35
14105: PPUSH
14106: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14110: LD_INT 22
14112: PUSH
14113: LD_INT 4
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 30
14122: PUSH
14123: LD_INT 0
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 3
14132: PUSH
14133: LD_INT 57
14135: PUSH
14136: EMPTY
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: IFFALSE 14103
// ComMoveXY ( filter , 247 , 113 ) ;
14154: LD_VAR 0 3
14158: PPUSH
14159: LD_INT 247
14161: PPUSH
14162: LD_INT 113
14164: PPUSH
14165: CALL_OW 111
// Wait ( 0 0$2 ) ;
14169: LD_INT 70
14171: PPUSH
14172: CALL_OW 67
// end else
14176: GO 14190
// begin SetSide ( dep , 4 ) ;
14178: LD_VAR 0 4
14182: PPUSH
14183: LD_INT 4
14185: PPUSH
14186: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14190: LD_ADDR_VAR 0 4
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 4
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 30
14207: PUSH
14208: LD_INT 0
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: PUSH
14224: LD_INT 1
14226: ARRAY
14227: ST_TO_ADDR
// if not has_eng then
14228: LD_VAR 0 2
14232: NOT
14233: IFFALSE 14320
// for i = 1 to 2 do
14235: LD_ADDR_VAR 0 1
14239: PUSH
14240: DOUBLE
14241: LD_INT 1
14243: DEC
14244: ST_TO_ADDR
14245: LD_INT 2
14247: PUSH
14248: FOR_TO
14249: IFFALSE 14318
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14251: LD_VAR 0 3
14255: PUSH
14256: LD_INT 1
14258: ARRAY
14259: PPUSH
14260: LD_VAR 0 4
14264: PPUSH
14265: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14269: LD_VAR 0 3
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: LD_INT 2
14280: PPUSH
14281: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14285: LD_VAR 0 3
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14298: LD_ADDR_VAR 0 3
14302: PUSH
14303: LD_VAR 0 3
14307: PPUSH
14308: LD_INT 1
14310: PPUSH
14311: CALL_OW 3
14315: ST_TO_ADDR
// end ;
14316: GO 14248
14318: POP
14319: POP
// if IsInUnit ( Cornel ) then
14320: LD_EXP 44
14324: PPUSH
14325: CALL_OW 310
14329: IFFALSE 14407
// begin cargo := IsInUnit ( Cornel ) ;
14331: LD_ADDR_VAR 0 7
14335: PUSH
14336: LD_EXP 44
14340: PPUSH
14341: CALL_OW 310
14345: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14346: LD_VAR 0 7
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 289
14358: IFFALSE 14369
// ComUnload ( cargo ) ;
14360: LD_VAR 0 7
14364: PPUSH
14365: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14369: LD_EXP 44
14373: PPUSH
14374: LD_INT 235
14376: PPUSH
14377: LD_INT 122
14379: PPUSH
14380: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14384: LD_EXP 44
14388: PPUSH
14389: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14393: LD_EXP 44
14397: PPUSH
14398: LD_VAR 0 4
14402: PPUSH
14403: CALL_OW 180
// end ; if Bierezov then
14407: LD_EXP 45
14411: IFFALSE 14459
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14413: LD_EXP 45
14417: PPUSH
14418: LD_INT 260
14420: PPUSH
14421: LD_INT 120
14423: PPUSH
14424: CALL_OW 111
// if dep then
14428: LD_VAR 0 4
14432: IFFALSE 14450
// AddComEnterUnit ( Bierezov , dep ) else
14434: LD_EXP 45
14438: PPUSH
14439: LD_VAR 0 4
14443: PPUSH
14444: CALL_OW 180
14448: GO 14459
// AddComHold ( Bierezov ) ;
14450: LD_EXP 45
14454: PPUSH
14455: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14459: LD_INT 525
14461: PPUSH
14462: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14466: LD_ADDR_VAR 0 2
14470: PUSH
14471: LD_INT 22
14473: PUSH
14474: LD_INT 4
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 25
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PPUSH
14495: CALL_OW 69
14499: PUSH
14500: LD_EXP 45
14504: DIFF
14505: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14506: LD_INT 35
14508: PPUSH
14509: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14513: LD_ADDR_VAR 0 6
14517: PUSH
14518: LD_INT 10
14520: PPUSH
14521: CALL_OW 435
14525: ST_TO_ADDR
// if crates then
14526: LD_VAR 0 6
14530: IFFALSE 14559
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14532: LD_VAR 0 2
14536: PPUSH
14537: LD_VAR 0 6
14541: PUSH
14542: LD_INT 1
14544: ARRAY
14545: PPUSH
14546: LD_VAR 0 6
14550: PUSH
14551: LD_INT 2
14553: ARRAY
14554: PPUSH
14555: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14559: LD_VAR 0 4
14563: PPUSH
14564: CALL_OW 274
14568: PPUSH
14569: LD_INT 1
14571: PPUSH
14572: CALL_OW 275
14576: PUSH
14577: LD_INT 40
14579: GREATEREQUAL
14580: IFFALSE 14506
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14582: LD_ADDR_VAR 0 5
14586: PUSH
14587: LD_INT 4
14589: PUSH
14590: LD_INT 256
14592: PUSH
14593: LD_INT 111
14595: PUSH
14596: LD_INT 2
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 31
14607: PUSH
14608: LD_INT 243
14610: PUSH
14611: LD_INT 112
14613: PUSH
14614: LD_INT 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 31
14625: PUSH
14626: LD_INT 254
14628: PUSH
14629: LD_INT 114
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: ST_TO_ADDR
// for i in blist do
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_VAR 0 5
14655: PUSH
14656: FOR_IN
14657: IFFALSE 14706
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14659: LD_VAR 0 2
14663: PPUSH
14664: LD_VAR 0 1
14668: PUSH
14669: LD_INT 1
14671: ARRAY
14672: PPUSH
14673: LD_VAR 0 1
14677: PUSH
14678: LD_INT 2
14680: ARRAY
14681: PPUSH
14682: LD_VAR 0 1
14686: PUSH
14687: LD_INT 3
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 1
14695: PUSH
14696: LD_INT 4
14698: ARRAY
14699: PPUSH
14700: CALL_OW 205
14704: GO 14656
14706: POP
14707: POP
// repeat wait ( 0 0$01 ) ;
14708: LD_INT 35
14710: PPUSH
14711: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14715: LD_INT 22
14717: PUSH
14718: LD_INT 4
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 30
14727: PUSH
14728: LD_INT 4
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: LD_INT 57
14740: PUSH
14741: EMPTY
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 69
14757: IFFALSE 14708
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14759: LD_VAR 0 3
14763: PPUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 30
14776: PUSH
14777: LD_INT 4
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14801: LD_VAR 0 3
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 183
// if has_eng > 1 then
14813: LD_VAR 0 2
14817: PUSH
14818: LD_INT 1
14820: GREATER
14821: IFFALSE 14963
// for i = has_eng downto 2 do
14823: LD_ADDR_VAR 0 1
14827: PUSH
14828: DOUBLE
14829: LD_VAR 0 2
14833: INC
14834: ST_TO_ADDR
14835: LD_INT 2
14837: PUSH
14838: FOR_DOWNTO
14839: IFFALSE 14961
// begin if IsInUnit ( has_eng [ i ] ) then
14841: LD_VAR 0 2
14845: PUSH
14846: LD_VAR 0 1
14850: ARRAY
14851: PPUSH
14852: CALL_OW 310
14856: IFFALSE 14873
// ComExitBuilding ( has_eng [ i ] ) ;
14858: LD_VAR 0 2
14862: PUSH
14863: LD_VAR 0 1
14867: ARRAY
14868: PPUSH
14869: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14873: LD_VAR 0 2
14877: PUSH
14878: LD_VAR 0 1
14882: ARRAY
14883: PPUSH
14884: LD_INT 22
14886: PUSH
14887: LD_INT 4
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 30
14896: PUSH
14897: LD_INT 4
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: PPUSH
14917: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14921: LD_VAR 0 2
14925: PUSH
14926: LD_VAR 0 1
14930: ARRAY
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14939: LD_ADDR_VAR 0 2
14943: PUSH
14944: LD_VAR 0 2
14948: PPUSH
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 3
14958: ST_TO_ADDR
// end ;
14959: GO 14838
14961: POP
14962: POP
// repeat wait ( 0 0$01 ) ;
14963: LD_INT 35
14965: PPUSH
14966: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
14970: LD_INT 22
14972: PUSH
14973: LD_INT 4
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 30
14982: PUSH
14983: LD_INT 31
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 57
14995: PUSH
14996: EMPTY
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: PUSH
15013: LD_INT 1
15015: GREATER
15016: IFFALSE 14963
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15018: LD_ADDR_VAR 0 8
15022: PUSH
15023: LD_EXP 6
15027: PPUSH
15028: LD_INT 25
15030: PUSH
15031: LD_INT 1
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PPUSH
15038: CALL_OW 72
15042: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: DOUBLE
15049: LD_INT 1
15051: DEC
15052: ST_TO_ADDR
15053: LD_INT 22
15055: PUSH
15056: LD_INT 4
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 30
15065: PUSH
15066: LD_INT 31
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 3
15075: PUSH
15076: LD_INT 57
15078: PUSH
15079: EMPTY
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 69
15095: PUSH
15096: FOR_TO
15097: IFFALSE 15181
// begin if not sol [ i ] then
15099: LD_VAR 0 8
15103: PUSH
15104: LD_VAR 0 1
15108: ARRAY
15109: NOT
15110: IFFALSE 15114
// break ;
15112: GO 15181
// ComExitBuilding ( sol [ i ] ) ;
15114: LD_VAR 0 8
15118: PUSH
15119: LD_VAR 0 1
15123: ARRAY
15124: PPUSH
15125: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15129: LD_VAR 0 8
15133: PUSH
15134: LD_VAR 0 1
15138: ARRAY
15139: PPUSH
15140: LD_INT 22
15142: PUSH
15143: LD_INT 4
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 30
15152: PUSH
15153: LD_INT 31
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 69
15168: PUSH
15169: LD_VAR 0 1
15173: ARRAY
15174: PPUSH
15175: CALL_OW 180
// end ;
15179: GO 15096
15181: POP
15182: POP
// if sol > 3 then
15183: LD_VAR 0 8
15187: PUSH
15188: LD_INT 3
15190: GREATER
15191: IFFALSE 15308
// begin ComExitBuilding ( sol [ 3 ] ) ;
15193: LD_VAR 0 8
15197: PUSH
15198: LD_INT 3
15200: ARRAY
15201: PPUSH
15202: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15206: LD_VAR 0 8
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_INT 246
15217: PPUSH
15218: LD_INT 94
15220: PPUSH
15221: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15225: LD_VAR 0 8
15229: PUSH
15230: LD_INT 3
15232: ARRAY
15233: PPUSH
15234: LD_INT 175
15236: PPUSH
15237: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15241: LD_VAR 0 8
15245: PUSH
15246: LD_INT 3
15248: ARRAY
15249: PPUSH
15250: LD_INT 224
15252: PPUSH
15253: LD_INT 90
15255: PPUSH
15256: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15260: LD_VAR 0 8
15264: PUSH
15265: LD_INT 3
15267: ARRAY
15268: PPUSH
15269: LD_INT 245
15271: PPUSH
15272: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15276: LD_VAR 0 8
15280: PUSH
15281: LD_INT 3
15283: ARRAY
15284: PPUSH
15285: LD_INT 223
15287: PPUSH
15288: LD_INT 110
15290: PPUSH
15291: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15295: LD_VAR 0 8
15299: PUSH
15300: LD_INT 3
15302: ARRAY
15303: PPUSH
15304: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15308: LD_VAR 0 2
15312: PPUSH
15313: LD_VAR 0 4
15317: PPUSH
15318: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15322: LD_INT 22
15324: PUSH
15325: LD_INT 4
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 4
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 69
15350: PUSH
15351: LD_INT 1
15353: ARRAY
15354: PPUSH
15355: CALL_OW 313
15359: PUSH
15360: LD_INT 6
15362: LESS
15363: IFFALSE 15427
// begin if IsInUnit ( Cornel ) then
15365: LD_EXP 44
15369: PPUSH
15370: CALL_OW 310
15374: IFFALSE 15385
// ComExitBuilding ( Cornel ) ;
15376: LD_EXP 44
15380: PPUSH
15381: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15385: LD_EXP 44
15389: PPUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 4
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 30
15402: PUSH
15403: LD_INT 4
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: PPUSH
15423: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15427: LD_INT 35
15429: PPUSH
15430: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15434: LD_ADDR_VAR 0 3
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_INT 4
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 24
15464: PUSH
15465: LD_INT 1000
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: ST_TO_ADDR
// if filter and has_eng then
15486: LD_VAR 0 3
15490: PUSH
15491: LD_VAR 0 2
15495: AND
15496: IFFALSE 15562
// begin for i in has_eng do
15498: LD_ADDR_VAR 0 1
15502: PUSH
15503: LD_VAR 0 2
15507: PUSH
15508: FOR_IN
15509: IFFALSE 15558
// begin if IsInUnit ( i ) then
15511: LD_VAR 0 1
15515: PPUSH
15516: CALL_OW 310
15520: IFFALSE 15531
// ComExitBuilding ( i ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 122
// Wait ( 3 ) ;
15531: LD_INT 3
15533: PPUSH
15534: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_VAR 0 3
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: PPUSH
15552: CALL_OW 130
// end ;
15556: GO 15508
15558: POP
15559: POP
// end else
15560: GO 15616
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15562: LD_VAR 0 2
15566: PUSH
15567: LD_VAR 0 2
15571: PPUSH
15572: LD_INT 56
15574: PUSH
15575: EMPTY
15576: LIST
15577: PPUSH
15578: CALL_OW 72
15582: AND
15583: IFFALSE 15616
// for i in has_eng do
15585: LD_ADDR_VAR 0 1
15589: PUSH
15590: LD_VAR 0 2
15594: PUSH
15595: FOR_IN
15596: IFFALSE 15614
// ComEnterUnit ( i , dep ) ;
15598: LD_VAR 0 1
15602: PPUSH
15603: LD_VAR 0 4
15607: PPUSH
15608: CALL_OW 120
15612: GO 15595
15614: POP
15615: POP
// until cornel_prepared ;
15616: LD_EXP 11
15620: IFFALSE 15427
// end ;
15622: PPOPN 8
15624: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15625: LD_EXP 11
15629: IFFALSE 16028
15631: GO 15633
15633: DISABLE
15634: LD_INT 0
15636: PPUSH
15637: PPUSH
15638: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_INT 22
15646: PUSH
15647: LD_INT 4
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 30
15656: PUSH
15657: LD_INT 4
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 69
15672: PUSH
15673: LD_INT 1
15675: ARRAY
15676: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15677: LD_EXP 6
15681: PPUSH
15682: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15686: LD_EXP 45
15690: PUSH
15691: LD_EXP 45
15695: PPUSH
15696: CALL_OW 310
15700: AND
15701: IFFALSE 15712
// ComExitBuilding ( Bierezov ) ;
15703: LD_EXP 45
15707: PPUSH
15708: CALL_OW 122
// Wait ( 0 0$03 ) ;
15712: LD_INT 105
15714: PPUSH
15715: CALL_OW 67
// for i in cornel_units do
15719: LD_ADDR_VAR 0 1
15723: PUSH
15724: LD_EXP 6
15728: PUSH
15729: FOR_IN
15730: IFFALSE 15806
// begin if GetClass ( i ) in [ 2 , 3 ] then
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 257
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: IN
15752: IFFALSE 15789
// begin ComEnterUnit ( i , arm ) ;
15754: LD_VAR 0 1
15758: PPUSH
15759: LD_VAR 0 2
15763: PPUSH
15764: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15768: LD_VAR 0 1
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 183
// AddComExitBuilding ( i ) ;
15780: LD_VAR 0 1
15784: PPUSH
15785: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15789: LD_VAR 0 1
15793: PPUSH
15794: LD_INT 257
15796: PPUSH
15797: LD_INT 121
15799: PPUSH
15800: CALL_OW 171
// end ;
15804: GO 15729
15806: POP
15807: POP
// Wait ( 1 1$00 ) ;
15808: LD_INT 2100
15810: PPUSH
15811: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_EXP 44
15824: PUSH
15825: LD_EXP 45
15829: ADD
15830: PUSH
15831: LD_EXP 6
15835: ADD
15836: PUSH
15837: LD_EXP 6
15841: PPUSH
15842: LD_INT 21
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 72
15856: DIFF
15857: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15858: LD_VAR 0 3
15862: PPUSH
15863: LD_INT 248
15865: PPUSH
15866: LD_INT 85
15868: PPUSH
15869: CALL_OW 111
// AddComHold ( filter ) ;
15873: LD_VAR 0 3
15877: PPUSH
15878: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15882: LD_INT 35
15884: PPUSH
15885: CALL_OW 67
// until cornel_attack ;
15889: LD_EXP 9
15893: IFFALSE 15882
// ComAgressiveMove ( filter , 209 , 63 ) ;
15895: LD_VAR 0 3
15899: PPUSH
15900: LD_INT 209
15902: PPUSH
15903: LD_INT 63
15905: PPUSH
15906: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15910: LD_EXP 44
15914: PPUSH
15915: LD_INT 208
15917: PPUSH
15918: LD_INT 62
15920: PPUSH
15921: CALL_OW 114
// AddComHold ( Cornel ) ;
15925: LD_EXP 44
15929: PPUSH
15930: CALL_OW 200
// if Bierezov then
15934: LD_EXP 45
15938: IFFALSE 16028
// begin filter := filter diff Bierezov ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: LD_VAR 0 3
15949: PUSH
15950: LD_EXP 45
15954: DIFF
15955: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
15956: LD_EXP 45
15960: PPUSH
15961: LD_INT 6
15963: PPUSH
15964: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
15968: LD_EXP 45
15972: PPUSH
15973: LD_INT 235
15975: PPUSH
15976: LD_INT 60
15978: PPUSH
15979: CALL_OW 111
// AddComHold ( Bierezov ) ;
15983: LD_EXP 45
15987: PPUSH
15988: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
15992: LD_EXP 45
15996: PPUSH
15997: LD_INT 350
15999: PPUSH
16000: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16004: LD_EXP 45
16008: PPUSH
16009: LD_INT 198
16011: PPUSH
16012: LD_INT 28
16014: PPUSH
16015: CALL_OW 171
// AddComHold ( Bierezov ) ;
16019: LD_EXP 45
16023: PPUSH
16024: CALL_OW 200
// end ; end ; end_of_file
16028: PPOPN 3
16030: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16031: LD_EXP 53
16035: PUSH
16036: LD_EXP 31
16040: NOT
16041: AND
16042: PUSH
16043: LD_EXP 32
16047: NOT
16048: AND
16049: IFFALSE 16499
16051: GO 16053
16053: DISABLE
16054: LD_INT 0
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
// begin enable ;
16060: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16061: LD_ADDR_VAR 0 4
16065: PUSH
16066: LD_INT 81
16068: PUSH
16069: LD_INT 3
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 69
16080: ST_TO_ADDR
// for i = 1 to ru_patrol do
16081: LD_ADDR_VAR 0 2
16085: PUSH
16086: DOUBLE
16087: LD_INT 1
16089: DEC
16090: ST_TO_ADDR
16091: LD_EXP 53
16095: PUSH
16096: FOR_TO
16097: IFFALSE 16497
// begin un := ru_patrol [ i ] ;
16099: LD_ADDR_VAR 0 1
16103: PUSH
16104: LD_EXP 53
16108: PUSH
16109: LD_VAR 0 2
16113: ARRAY
16114: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16115: LD_VAR 0 1
16119: PPUSH
16120: LD_INT 13
16122: PPUSH
16123: CALL_OW 308
16127: IFFALSE 16232
// begin if not ru_alert then
16129: LD_EXP 60
16133: NOT
16134: IFFALSE 16144
// ru_alert := true ;
16136: LD_ADDR_EXP 60
16140: PUSH
16141: LD_INT 1
16143: ST_TO_ADDR
// if not See ( 1 , un ) then
16144: LD_INT 1
16146: PPUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL_OW 292
16156: NOT
16157: IFFALSE 16171
// SetLives ( un , 1000 ) ;
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_INT 1000
16166: PPUSH
16167: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16171: LD_ADDR_EXP 53
16175: PUSH
16176: LD_EXP 53
16180: PUSH
16181: LD_VAR 0 1
16185: DIFF
16186: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16187: LD_VAR 0 1
16191: PPUSH
16192: LD_INT 22
16194: PUSH
16195: LD_INT 3
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 30
16204: PUSH
16205: LD_INT 4
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 69
16220: PPUSH
16221: CALL 999 0 1
16225: PPUSH
16226: CALL_OW 120
// continue ;
16230: GO 16096
// end ; if IsOk ( un ) and not HasTask ( un ) then
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 302
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 314
16251: NOT
16252: AND
16253: IFFALSE 16346
// begin for j = 1 to ru_firepoints_south [ i ] do
16255: LD_ADDR_VAR 0 3
16259: PUSH
16260: DOUBLE
16261: LD_INT 1
16263: DEC
16264: ST_TO_ADDR
16265: LD_EXP 59
16269: PUSH
16270: LD_VAR 0 2
16274: ARRAY
16275: PUSH
16276: FOR_TO
16277: IFFALSE 16344
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16279: LD_VAR 0 1
16283: PPUSH
16284: LD_EXP 59
16288: PUSH
16289: LD_VAR 0 2
16293: ARRAY
16294: PUSH
16295: LD_VAR 0 3
16299: ARRAY
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: PPUSH
16305: LD_EXP 59
16309: PUSH
16310: LD_VAR 0 2
16314: ARRAY
16315: PUSH
16316: LD_VAR 0 3
16320: ARRAY
16321: PUSH
16322: LD_INT 2
16324: ARRAY
16325: PPUSH
16326: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16330: LD_VAR 0 1
16334: PPUSH
16335: LD_INT 70
16337: PPUSH
16338: CALL_OW 202
// end ;
16342: GO 16276
16344: POP
16345: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 256
16355: PUSH
16356: LD_INT 700
16358: LESS
16359: PUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: LD_INT 13
16367: PPUSH
16368: CALL_OW 308
16372: NOT
16373: AND
16374: IFFALSE 16426
// begin ComMoveToArea ( un , retreatArea ) ;
16376: LD_VAR 0 1
16380: PPUSH
16381: LD_INT 13
16383: PPUSH
16384: CALL_OW 113
// if not ru_alert_xy then
16388: LD_EXP 61
16392: NOT
16393: IFFALSE 16424
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16395: LD_ADDR_EXP 61
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 250
16409: PUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 251
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: ST_TO_ADDR
// end else
16424: GO 16495
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16426: LD_VAR 0 1
16430: PPUSH
16431: LD_VAR 0 4
16435: PPUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 74
16445: PPUSH
16446: CALL_OW 296
16450: PUSH
16451: LD_INT 9
16453: LESS
16454: PUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 256
16464: PUSH
16465: LD_INT 500
16467: GREATER
16468: AND
16469: IFFALSE 16495
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16471: LD_VAR 0 1
16475: PPUSH
16476: LD_VAR 0 4
16480: PPUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 74
16490: PPUSH
16491: CALL_OW 115
// end ;
16495: GO 16096
16497: POP
16498: POP
// end ;
16499: PPOPN 4
16501: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16502: LD_EXP 60
16506: PUSH
16507: LD_EXP 61
16511: AND
16512: PUSH
16513: LD_EXP 31
16517: NOT
16518: AND
16519: PUSH
16520: LD_EXP 32
16524: NOT
16525: AND
16526: IFFALSE 16736
16528: GO 16530
16530: DISABLE
16531: LD_INT 0
16533: PPUSH
16534: PPUSH
// begin enable ;
16535: ENABLE
// if not ru_vehicles then
16536: LD_EXP 56
16540: NOT
16541: IFFALSE 16545
// exit ;
16543: GO 16736
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16545: LD_ADDR_VAR 0 2
16549: PUSH
16550: LD_INT 81
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PPUSH
16560: CALL_OW 69
16564: ST_TO_ADDR
// if ru_vehicles then
16565: LD_EXP 56
16569: IFFALSE 16736
// begin for i in ru_vehicles do
16571: LD_ADDR_VAR 0 1
16575: PUSH
16576: LD_EXP 56
16580: PUSH
16581: FOR_IN
16582: IFFALSE 16734
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 302
16593: PUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 74
16613: PPUSH
16614: CALL_OW 296
16618: PUSH
16619: LD_INT 9
16621: LESS
16622: AND
16623: IFFALSE 16649
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_VAR 0 2
16634: PPUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 74
16644: PPUSH
16645: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 314
16658: NOT
16659: PUSH
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 302
16669: AND
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: LD_EXP 61
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: LD_EXP 61
16689: PUSH
16690: LD_INT 2
16692: ARRAY
16693: PPUSH
16694: CALL_OW 297
16698: PUSH
16699: LD_INT 10
16701: GREATER
16702: AND
16703: IFFALSE 16732
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: LD_EXP 61
16714: PUSH
16715: LD_INT 1
16717: ARRAY
16718: PPUSH
16719: LD_EXP 61
16723: PUSH
16724: LD_INT 2
16726: ARRAY
16727: PPUSH
16728: CALL_OW 114
// end ;
16732: GO 16581
16734: POP
16735: POP
// end ; end ;
16736: PPOPN 2
16738: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16739: LD_EXP 61
16743: PUSH
16744: LD_EXP 60
16748: AND
16749: PUSH
16750: LD_INT 3
16752: PPUSH
16753: CALL_OW 463
16757: NOT
16758: AND
16759: PUSH
16760: LD_EXP 31
16764: NOT
16765: AND
16766: PUSH
16767: LD_EXP 32
16771: NOT
16772: AND
16773: IFFALSE 16868
16775: GO 16777
16777: DISABLE
16778: LD_INT 0
16780: PPUSH
// begin enable ;
16781: ENABLE
// ru_alert_xy := false ;
16782: LD_ADDR_EXP 61
16786: PUSH
16787: LD_INT 0
16789: ST_TO_ADDR
// ru_alert := false ;
16790: LD_ADDR_EXP 60
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// if ru_vehicles then
16798: LD_EXP 56
16802: IFFALSE 16868
// for i in ru_vehicles do
16804: LD_ADDR_VAR 0 1
16808: PUSH
16809: LD_EXP 56
16813: PUSH
16814: FOR_IN
16815: IFFALSE 16866
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 302
16826: PUSH
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_INT 89
16834: PPUSH
16835: LD_INT 36
16837: PPUSH
16838: CALL_OW 297
16842: PUSH
16843: LD_INT 10
16845: GREATER
16846: AND
16847: IFFALSE 16864
// ComMoveXY ( i , 89 , 36 ) ;
16849: LD_VAR 0 1
16853: PPUSH
16854: LD_INT 89
16856: PPUSH
16857: LD_INT 36
16859: PPUSH
16860: CALL_OW 111
16864: GO 16814
16866: POP
16867: POP
// end ;
16868: PPOPN 1
16870: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16871: LD_EXP 55
16875: PUSH
16876: LD_EXP 31
16880: NOT
16881: AND
16882: PUSH
16883: LD_EXP 32
16887: NOT
16888: AND
16889: IFFALSE 17173
16891: GO 16893
16893: DISABLE
16894: LD_INT 0
16896: PPUSH
16897: PPUSH
16898: PPUSH
// begin enable ;
16899: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16900: LD_ADDR_VAR 0 3
16904: PUSH
16905: LD_INT 81
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PPUSH
16915: CALL_OW 69
16919: ST_TO_ADDR
// for i = 1 to ru_forest do
16920: LD_ADDR_VAR 0 1
16924: PUSH
16925: DOUBLE
16926: LD_INT 1
16928: DEC
16929: ST_TO_ADDR
16930: LD_EXP 55
16934: PUSH
16935: FOR_TO
16936: IFFALSE 17171
// begin un := ru_forest [ i ] ;
16938: LD_ADDR_VAR 0 2
16942: PUSH
16943: LD_EXP 55
16947: PUSH
16948: LD_VAR 0 1
16952: ARRAY
16953: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16954: LD_VAR 0 2
16958: PPUSH
16959: LD_INT 13
16961: PPUSH
16962: CALL_OW 308
16966: IFFALSE 17056
// begin if not See ( 1 , un ) then
16968: LD_INT 1
16970: PPUSH
16971: LD_VAR 0 2
16975: PPUSH
16976: CALL_OW 292
16980: NOT
16981: IFFALSE 16995
// SetLives ( un , 1000 ) ;
16983: LD_VAR 0 2
16987: PPUSH
16988: LD_INT 1000
16990: PPUSH
16991: CALL_OW 234
// ru_forest := ru_forest diff un ;
16995: LD_ADDR_EXP 55
16999: PUSH
17000: LD_EXP 55
17004: PUSH
17005: LD_VAR 0 2
17009: DIFF
17010: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17011: LD_VAR 0 2
17015: PPUSH
17016: LD_INT 22
17018: PUSH
17019: LD_INT 3
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 30
17028: PUSH
17029: LD_INT 4
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: PPUSH
17045: CALL 999 0 1
17049: PPUSH
17050: CALL_OW 120
// continue ;
17054: GO 16935
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17056: LD_VAR 0 2
17060: PPUSH
17061: CALL_OW 256
17065: PUSH
17066: LD_INT 700
17068: LESS
17069: PUSH
17070: LD_VAR 0 2
17074: PPUSH
17075: LD_INT 13
17077: PPUSH
17078: CALL_OW 308
17082: NOT
17083: AND
17084: IFFALSE 17100
// ComMoveToArea ( un , retreatArea ) else
17086: LD_VAR 0 2
17090: PPUSH
17091: LD_INT 13
17093: PPUSH
17094: CALL_OW 113
17098: GO 17169
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17100: LD_VAR 0 2
17104: PPUSH
17105: LD_VAR 0 3
17109: PPUSH
17110: LD_VAR 0 2
17114: PPUSH
17115: CALL_OW 74
17119: PPUSH
17120: CALL_OW 296
17124: PUSH
17125: LD_INT 9
17127: LESS
17128: PUSH
17129: LD_VAR 0 2
17133: PPUSH
17134: CALL_OW 256
17138: PUSH
17139: LD_INT 500
17141: GREATER
17142: AND
17143: IFFALSE 17169
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17145: LD_VAR 0 2
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_VAR 0 2
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
// end ;
17169: GO 16935
17171: POP
17172: POP
// end ;
17173: PPOPN 3
17175: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17176: LD_EXP 32
17180: NOT
17181: IFFALSE 17302
17183: GO 17185
17185: DISABLE
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
// begin enable ;
17190: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_INT 22
17198: PUSH
17199: LD_INT 3
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 21
17208: PUSH
17209: LD_INT 3
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: ST_TO_ADDR
// if filter then
17225: LD_VAR 0 2
17229: IFFALSE 17302
// for i in filter do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_VAR 0 2
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17300
// if GetLives ( i ) < 990 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 256
17253: PUSH
17254: LD_INT 990
17256: LESS
17257: IFFALSE 17298
// begin ru_alert := true ;
17259: LD_ADDR_EXP 60
17263: PUSH
17264: LD_INT 1
17266: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17267: LD_ADDR_EXP 61
17271: PUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 250
17281: PUSH
17282: LD_VAR 0 1
17286: PPUSH
17287: CALL_OW 251
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: ST_TO_ADDR
// break ;
17296: GO 17300
// end ;
17298: GO 17241
17300: POP
17301: POP
// end ;
17302: PPOPN 2
17304: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17305: LD_EXP 31
17309: IFFALSE 17458
17311: GO 17313
17313: DISABLE
17314: LD_INT 0
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17320: LD_ADDR_VAR 0 4
17324: PUSH
17325: LD_EXP 56
17329: PUSH
17330: LD_EXP 55
17334: ADD
17335: PUSH
17336: LD_EXP 53
17340: ADD
17341: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17342: LD_ADDR_VAR 0 3
17346: PUSH
17347: LD_INT 3
17349: PPUSH
17350: LD_INT 81
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PPUSH
17360: CALL_OW 70
17364: ST_TO_ADDR
// if filter and enemy then
17365: LD_VAR 0 4
17369: PUSH
17370: LD_VAR 0 3
17374: AND
17375: IFFALSE 17458
// repeat wait ( 0 0$01 ) ;
17377: LD_INT 35
17379: PPUSH
17380: CALL_OW 67
// for i in filter do
17384: LD_ADDR_VAR 0 1
17388: PUSH
17389: LD_VAR 0 4
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17423
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 74
17416: PPUSH
17417: CALL_OW 115
// end ;
17421: GO 17394
17423: POP
17424: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17425: LD_INT 3
17427: PPUSH
17428: LD_INT 81
17430: PUSH
17431: LD_INT 3
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PPUSH
17438: CALL_OW 70
17442: PUSH
17443: LD_INT 0
17445: EQUAL
17446: PUSH
17447: LD_VAR 0 4
17451: PUSH
17452: LD_INT 0
17454: EQUAL
17455: OR
17456: IFFALSE 17377
// end ;
17458: PPOPN 4
17460: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17461: LD_EXP 26
17465: PUSH
17466: LD_INT 22
17468: PUSH
17469: LD_INT 4
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 30
17478: PUSH
17479: LD_INT 4
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: LD_INT 57
17491: PUSH
17492: EMPTY
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: AND
17509: IFFALSE 17558
17511: GO 17513
17513: DISABLE
17514: LD_INT 0
17516: PPUSH
// begin if not ru_cornel_attack then
17517: LD_EXP 58
17521: NOT
17522: IFFALSE 17526
// exit ;
17524: GO 17558
// for i in ru_cornel_attack do
17526: LD_ADDR_VAR 0 1
17530: PUSH
17531: LD_EXP 58
17535: PUSH
17536: FOR_IN
17537: IFFALSE 17556
// ComAgressiveMove ( i , 258 , 119 ) ;
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_INT 258
17546: PPUSH
17547: LD_INT 119
17549: PPUSH
17550: CALL_OW 114
17554: GO 17536
17556: POP
17557: POP
// end ; end_of_file
17558: PPOPN 1
17560: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17561: LD_EXP 5
17565: PUSH
17566: LD_EXP 9
17570: NOT
17571: AND
17572: PUSH
17573: LD_EXP 20
17577: AND
17578: IFFALSE 17690
17580: GO 17582
17582: DISABLE
17583: LD_INT 0
17585: PPUSH
// begin enable ;
17586: ENABLE
// crates_counter := crates_counter - 50 ;
17587: LD_ADDR_EXP 20
17591: PUSH
17592: LD_EXP 20
17596: PUSH
17597: LD_INT 50
17599: MINUS
17600: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17601: LD_INT 8
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: LD_INT 5
17609: PPUSH
17610: CALL_OW 12
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17622: LD_INT 1785
17624: PPUSH
17625: LD_INT 2345
17627: PPUSH
17628: CALL_OW 12
17632: PPUSH
17633: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_INT 1
17644: PPUSH
17645: LD_OWVAR 67
17649: PUSH
17650: LD_INT 2
17652: PLUS
17653: PPUSH
17654: CALL_OW 12
17658: ST_TO_ADDR
// if r < 3 then
17659: LD_VAR 0 1
17663: PUSH
17664: LD_INT 3
17666: LESS
17667: IFFALSE 17690
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17669: LD_INT 4
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 5
17677: PPUSH
17678: CALL_OW 12
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 55
// end ;
17690: PPOPN 1
17692: END
// every 0 0$01 trigger cornel_active do
17693: LD_EXP 8
17697: IFFALSE 17786
17699: GO 17701
17701: DISABLE
// begin Wait ( 0 0$03 ) ;
17702: LD_INT 105
17704: PPUSH
17705: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17709: LD_INT 2
17711: PPUSH
17712: LD_INT 5
17714: PPUSH
17715: CALL_OW 12
17719: PPUSH
17720: LD_INT 10
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL_OW 55
// Wait ( 0 0$13 ) ;
17730: LD_INT 455
17732: PPUSH
17733: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17737: LD_INT 2
17739: PPUSH
17740: LD_INT 5
17742: PPUSH
17743: CALL_OW 12
17747: PPUSH
17748: LD_INT 10
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 55
// Wait ( 0 0$16 ) ;
17758: LD_INT 560
17760: PPUSH
17761: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17765: LD_INT 2
17767: PPUSH
17768: LD_INT 5
17770: PPUSH
17771: CALL_OW 12
17775: PPUSH
17776: LD_INT 10
17778: PPUSH
17779: LD_INT 1
17781: PPUSH
17782: CALL_OW 55
// end ; end_of_file
17786: END
// every 0 0$01 trigger cornel_prepared do
17787: LD_EXP 11
17791: IFFALSE 17850
17793: GO 17795
17795: DISABLE
// begin enable ;
17796: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17797: LD_ADDR_OWVAR 47
17801: PUSH
17802: LD_STRING #Am03-1
17804: PUSH
17805: LD_EXP 10
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17814: LD_ADDR_EXP 10
17818: PUSH
17819: LD_EXP 10
17823: PPUSH
17824: LD_STRING -
17826: PPUSH
17827: CALL 1069 0 2
17831: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17832: LD_EXP 10
17836: PUSH
17837: LD_INT 0
17839: EQUAL
17840: IFFALSE 17850
// begin Display_Strings := [ ] ;
17842: LD_ADDR_OWVAR 47
17846: PUSH
17847: EMPTY
17848: ST_TO_ADDR
// disable ;
17849: DISABLE
// end ; end ;
17850: END
// every 0 0$01 trigger debug and debug_strings do
17851: LD_EXP 1
17855: PUSH
17856: LD_OWVAR 48
17860: AND
17861: IFFALSE 17877
17863: GO 17865
17865: DISABLE
// begin enable ;
17866: ENABLE
// Display_Strings := debug_strings ;
17867: LD_ADDR_OWVAR 47
17871: PUSH
17872: LD_OWVAR 48
17876: ST_TO_ADDR
// end ; end_of_file
17877: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 255
17887: PUSH
17888: LD_INT 1
17890: EQUAL
17891: PUSH
17892: LD_EXP 14
17896: NOT
17897: AND
17898: IFFALSE 17908
// solar_builded := true ;
17900: LD_ADDR_EXP 14
17904: PUSH
17905: LD_INT 1
17907: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL_OW 255
17917: PUSH
17918: LD_INT 1
17920: EQUAL
17921: PUSH
17922: LD_EXP 29
17926: AND
17927: IFFALSE 17960
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ;
17929: LD_ADDR_EXP 29
17933: PUSH
17934: LD_EXP 29
17938: PUSH
17939: LD_INT 1750
17941: PUSH
17942: LD_INT 1400
17944: PUSH
17945: LD_INT 1225
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PUSH
17953: LD_OWVAR 67
17957: ARRAY
17958: PLUS
17959: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 255
17969: PUSH
17970: LD_INT 3
17972: EQUAL
17973: IFFALSE 17991
// ru_vehicles := ru_vehicles ^ veh ;
17975: LD_ADDR_EXP 56
17979: PUSH
17980: LD_EXP 56
17984: PUSH
17985: LD_VAR 0 1
17989: ADD
17990: ST_TO_ADDR
// end ;
17991: PPOPN 2
17993: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
17994: LD_VAR 0 1
17998: PUSH
17999: LD_EXP 53
18003: IN
18004: IFFALSE 18022
// ru_patrol := ru_patrol diff un ;
18006: LD_ADDR_EXP 53
18010: PUSH
18011: LD_EXP 53
18015: PUSH
18016: LD_VAR 0 1
18020: DIFF
18021: ST_TO_ADDR
// if un in ru_forest then
18022: LD_VAR 0 1
18026: PUSH
18027: LD_EXP 55
18031: IN
18032: IFFALSE 18050
// ru_forest := ru_forest diff un ;
18034: LD_ADDR_EXP 55
18038: PUSH
18039: LD_EXP 55
18043: PUSH
18044: LD_VAR 0 1
18048: DIFF
18049: ST_TO_ADDR
// if un in ru_vehicles then
18050: LD_VAR 0 1
18054: PUSH
18055: LD_EXP 56
18059: IN
18060: IFFALSE 18166
// begin ru_vehicles := ru_vehicles diff un ;
18062: LD_ADDR_EXP 56
18066: PUSH
18067: LD_EXP 56
18071: PUSH
18072: LD_VAR 0 1
18076: DIFF
18077: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18078: LD_ADDR_EXP 57
18082: PUSH
18083: LD_EXP 57
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 265
18097: PUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 262
18107: PUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL_OW 263
18117: PUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 264
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: ADD
18134: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18135: LD_ADDR_EXP 13
18139: PUSH
18140: LD_EXP 13
18144: PUSH
18145: LD_INT 1
18147: PLUS
18148: ST_TO_ADDR
// if ach_counter = 10 then
18149: LD_EXP 13
18153: PUSH
18154: LD_INT 10
18156: EQUAL
18157: IFFALSE 18166
// SetAchievement ( ACH_FAUST ) ;
18159: LD_STRING ACH_FAUST
18161: PPUSH
18162: CALL_OW 543
// end ; if un = Pokryshkin then
18166: LD_VAR 0 1
18170: PUSH
18171: LD_EXP 52
18175: EQUAL
18176: IFFALSE 18185
// SetAchievement ( ACH_POKR ) ;
18178: LD_STRING ACH_POKR
18180: PPUSH
18181: CALL_OW 543
// if un = JMM then
18185: LD_VAR 0 1
18189: PUSH
18190: LD_EXP 37
18194: EQUAL
18195: IFFALSE 18204
// YouLost ( 0 ) ;
18197: LD_STRING 0
18199: PPUSH
18200: CALL_OW 104
// if un = us_dep_west then
18204: LD_VAR 0 1
18208: PUSH
18209: LD_INT 1
18211: EQUAL
18212: IFFALSE 18221
// YouLost ( 2 ) ;
18214: LD_STRING 2
18216: PPUSH
18217: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18221: LD_VAR 0 1
18225: PPUSH
18226: CALL_OW 255
18230: PUSH
18231: LD_INT 8
18233: EQUAL
18234: PUSH
18235: LD_EXP 5
18239: NOT
18240: AND
18241: IFFALSE 18250
// YouLost ( 4 ) ;
18243: LD_STRING 4
18245: PPUSH
18246: CALL_OW 104
// if un in jmm_units then
18250: LD_VAR 0 1
18254: PUSH
18255: LD_EXP 4
18259: IN
18260: IFFALSE 18276
// lose_counter := lose_counter + 1 ;
18262: LD_ADDR_EXP 34
18266: PUSH
18267: LD_EXP 34
18271: PUSH
18272: LD_INT 1
18274: PLUS
18275: ST_TO_ADDR
// end ;
18276: PPOPN 1
18278: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
// begin if GetSide ( driver ) = 3 then
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 255
18292: PUSH
18293: LD_INT 3
18295: EQUAL
18296: IFFALSE 18374
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18298: LD_ADDR_VAR 0 6
18302: PUSH
18303: LD_INT 22
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 30
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 69
18331: PPUSH
18332: CALL 999 0 1
18336: ST_TO_ADDR
// if place then
18337: LD_VAR 0 6
18341: IFFALSE 18359
// ComEnterUnit ( driver , place ) else
18343: LD_VAR 0 1
18347: PPUSH
18348: LD_VAR 0 6
18352: PPUSH
18353: CALL_OW 120
18357: GO 18374
// ComMoveXY ( driver , 70 , 22 ) ;
18359: LD_VAR 0 1
18363: PPUSH
18364: LD_INT 70
18366: PPUSH
18367: LD_INT 22
18369: PPUSH
18370: CALL_OW 111
// end ; end ;
18374: PPOPN 6
18376: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 1
18384: EQUAL
18385: PUSH
18386: LD_VAR 0 2
18390: PUSH
18391: LD_INT 4
18393: EQUAL
18394: PUSH
18395: LD_VAR 0 2
18399: PUSH
18400: LD_INT 8
18402: EQUAL
18403: PUSH
18404: LD_EXP 5
18408: NOT
18409: AND
18410: OR
18411: AND
18412: IFFALSE 18421
// YouLost ( 5 ) ;
18414: LD_STRING 5
18416: PPUSH
18417: CALL_OW 104
// end ;
18421: PPOPN 2
18423: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18424: LD_EXP 36
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 21
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PPUSH
18453: CALL_OW 69
18457: PUSH
18458: LD_INT 22
18460: PUSH
18461: LD_INT 8
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 21
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PPUSH
18482: CALL_OW 69
18486: ADD
18487: PLUS
18488: PUSH
18489: LD_INT 5
18491: LESS
18492: IFFALSE 18504
18494: GO 18496
18496: DISABLE
// YouLost ( 1 ) ;
18497: LD_STRING 1
18499: PPUSH
18500: CALL_OW 104
18504: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18505: LD_INT 1
18507: PPUSH
18508: CALL_OW 255
18512: PUSH
18513: LD_INT 3
18515: EQUAL
18516: IFFALSE 18528
18518: GO 18520
18520: DISABLE
// YouLost ( 3 ) ; end_of_file
18521: LD_STRING 3
18523: PPUSH
18524: CALL_OW 104
18528: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18529: LD_INT 0
18531: PPUSH
// ar_crane := 88 ;
18532: LD_ADDR_EXP 68
18536: PUSH
18537: LD_INT 88
18539: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18540: LD_ADDR_EXP 63
18544: PUSH
18545: LD_INT 89
18547: ST_TO_ADDR
// us_hack := 99 ;
18548: LD_ADDR_EXP 64
18552: PUSH
18553: LD_INT 99
18555: ST_TO_ADDR
// us_artillery := 97 ;
18556: LD_ADDR_EXP 65
18560: PUSH
18561: LD_INT 97
18563: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18564: LD_ADDR_EXP 66
18568: PUSH
18569: LD_INT 91
18571: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18572: LD_ADDR_EXP 67
18576: PUSH
18577: LD_INT 92
18579: ST_TO_ADDR
// ru_radar := 98 ;
18580: LD_ADDR_EXP 62
18584: PUSH
18585: LD_INT 98
18587: ST_TO_ADDR
// tech_Artillery := 80 ;
18588: LD_ADDR_EXP 69
18592: PUSH
18593: LD_INT 80
18595: ST_TO_ADDR
// tech_RadMat := 81 ;
18596: LD_ADDR_EXP 70
18600: PUSH
18601: LD_INT 81
18603: ST_TO_ADDR
// tech_BasicTools := 82 ;
18604: LD_ADDR_EXP 71
18608: PUSH
18609: LD_INT 82
18611: ST_TO_ADDR
// tech_Cargo := 83 ;
18612: LD_ADDR_EXP 72
18616: PUSH
18617: LD_INT 83
18619: ST_TO_ADDR
// tech_Track := 84 ;
18620: LD_ADDR_EXP 73
18624: PUSH
18625: LD_INT 84
18627: ST_TO_ADDR
// tech_Crane := 85 ;
18628: LD_ADDR_EXP 74
18632: PUSH
18633: LD_INT 85
18635: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18636: LD_ADDR_EXP 75
18640: PUSH
18641: LD_INT 86
18643: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18644: LD_ADDR_EXP 76
18648: PUSH
18649: LD_INT 87
18651: ST_TO_ADDR
// end ;
18652: LD_VAR 0 1
18656: RET
// every 1 do
18657: GO 18659
18659: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18660: CALL 18529 0 0
18664: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18665: LD_VAR 0 2
18669: PUSH
18670: LD_INT 100
18672: EQUAL
18673: IFFALSE 19622
// begin if not StreamModeActive then
18675: LD_EXP 77
18679: NOT
18680: IFFALSE 18690
// StreamModeActive := true ;
18682: LD_ADDR_EXP 77
18686: PUSH
18687: LD_INT 1
18689: ST_TO_ADDR
// if p3 = 0 then
18690: LD_VAR 0 3
18694: PUSH
18695: LD_INT 0
18697: EQUAL
18698: IFFALSE 18704
// InitStreamMode ;
18700: CALL 19855 0 0
// if p3 = 1 then
18704: LD_VAR 0 3
18708: PUSH
18709: LD_INT 1
18711: EQUAL
18712: IFFALSE 18722
// sRocket := true ;
18714: LD_ADDR_EXP 82
18718: PUSH
18719: LD_INT 1
18721: ST_TO_ADDR
// if p3 = 2 then
18722: LD_VAR 0 3
18726: PUSH
18727: LD_INT 2
18729: EQUAL
18730: IFFALSE 18740
// sSpeed := true ;
18732: LD_ADDR_EXP 81
18736: PUSH
18737: LD_INT 1
18739: ST_TO_ADDR
// if p3 = 3 then
18740: LD_VAR 0 3
18744: PUSH
18745: LD_INT 3
18747: EQUAL
18748: IFFALSE 18758
// sEngine := true ;
18750: LD_ADDR_EXP 83
18754: PUSH
18755: LD_INT 1
18757: ST_TO_ADDR
// if p3 = 4 then
18758: LD_VAR 0 3
18762: PUSH
18763: LD_INT 4
18765: EQUAL
18766: IFFALSE 18776
// sSpec := true ;
18768: LD_ADDR_EXP 80
18772: PUSH
18773: LD_INT 1
18775: ST_TO_ADDR
// if p3 = 5 then
18776: LD_VAR 0 3
18780: PUSH
18781: LD_INT 5
18783: EQUAL
18784: IFFALSE 18794
// sLevel := true ;
18786: LD_ADDR_EXP 84
18790: PUSH
18791: LD_INT 1
18793: ST_TO_ADDR
// if p3 = 6 then
18794: LD_VAR 0 3
18798: PUSH
18799: LD_INT 6
18801: EQUAL
18802: IFFALSE 18812
// sArmoury := true ;
18804: LD_ADDR_EXP 85
18808: PUSH
18809: LD_INT 1
18811: ST_TO_ADDR
// if p3 = 7 then
18812: LD_VAR 0 3
18816: PUSH
18817: LD_INT 7
18819: EQUAL
18820: IFFALSE 18830
// sRadar := true ;
18822: LD_ADDR_EXP 86
18826: PUSH
18827: LD_INT 1
18829: ST_TO_ADDR
// if p3 = 8 then
18830: LD_VAR 0 3
18834: PUSH
18835: LD_INT 8
18837: EQUAL
18838: IFFALSE 18848
// sBunker := true ;
18840: LD_ADDR_EXP 87
18844: PUSH
18845: LD_INT 1
18847: ST_TO_ADDR
// if p3 = 9 then
18848: LD_VAR 0 3
18852: PUSH
18853: LD_INT 9
18855: EQUAL
18856: IFFALSE 18866
// sHack := true ;
18858: LD_ADDR_EXP 88
18862: PUSH
18863: LD_INT 1
18865: ST_TO_ADDR
// if p3 = 10 then
18866: LD_VAR 0 3
18870: PUSH
18871: LD_INT 10
18873: EQUAL
18874: IFFALSE 18884
// sFire := true ;
18876: LD_ADDR_EXP 89
18880: PUSH
18881: LD_INT 1
18883: ST_TO_ADDR
// if p3 = 11 then
18884: LD_VAR 0 3
18888: PUSH
18889: LD_INT 11
18891: EQUAL
18892: IFFALSE 18902
// sRefresh := true ;
18894: LD_ADDR_EXP 90
18898: PUSH
18899: LD_INT 1
18901: ST_TO_ADDR
// if p3 = 12 then
18902: LD_VAR 0 3
18906: PUSH
18907: LD_INT 12
18909: EQUAL
18910: IFFALSE 18920
// sExp := true ;
18912: LD_ADDR_EXP 91
18916: PUSH
18917: LD_INT 1
18919: ST_TO_ADDR
// if p3 = 13 then
18920: LD_VAR 0 3
18924: PUSH
18925: LD_INT 13
18927: EQUAL
18928: IFFALSE 18938
// sDepot := true ;
18930: LD_ADDR_EXP 92
18934: PUSH
18935: LD_INT 1
18937: ST_TO_ADDR
// if p3 = 14 then
18938: LD_VAR 0 3
18942: PUSH
18943: LD_INT 14
18945: EQUAL
18946: IFFALSE 18956
// sFlag := true ;
18948: LD_ADDR_EXP 93
18952: PUSH
18953: LD_INT 1
18955: ST_TO_ADDR
// if p3 = 15 then
18956: LD_VAR 0 3
18960: PUSH
18961: LD_INT 15
18963: EQUAL
18964: IFFALSE 18974
// sKamikadze := true ;
18966: LD_ADDR_EXP 101
18970: PUSH
18971: LD_INT 1
18973: ST_TO_ADDR
// if p3 = 16 then
18974: LD_VAR 0 3
18978: PUSH
18979: LD_INT 16
18981: EQUAL
18982: IFFALSE 18992
// sTroll := true ;
18984: LD_ADDR_EXP 102
18988: PUSH
18989: LD_INT 1
18991: ST_TO_ADDR
// if p3 = 17 then
18992: LD_VAR 0 3
18996: PUSH
18997: LD_INT 17
18999: EQUAL
19000: IFFALSE 19010
// sSlow := true ;
19002: LD_ADDR_EXP 103
19006: PUSH
19007: LD_INT 1
19009: ST_TO_ADDR
// if p3 = 18 then
19010: LD_VAR 0 3
19014: PUSH
19015: LD_INT 18
19017: EQUAL
19018: IFFALSE 19028
// sLack := true ;
19020: LD_ADDR_EXP 104
19024: PUSH
19025: LD_INT 1
19027: ST_TO_ADDR
// if p3 = 19 then
19028: LD_VAR 0 3
19032: PUSH
19033: LD_INT 19
19035: EQUAL
19036: IFFALSE 19046
// sTank := true ;
19038: LD_ADDR_EXP 106
19042: PUSH
19043: LD_INT 1
19045: ST_TO_ADDR
// if p3 = 20 then
19046: LD_VAR 0 3
19050: PUSH
19051: LD_INT 20
19053: EQUAL
19054: IFFALSE 19064
// sRemote := true ;
19056: LD_ADDR_EXP 107
19060: PUSH
19061: LD_INT 1
19063: ST_TO_ADDR
// if p3 = 21 then
19064: LD_VAR 0 3
19068: PUSH
19069: LD_INT 21
19071: EQUAL
19072: IFFALSE 19082
// sPowell := true ;
19074: LD_ADDR_EXP 108
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// if p3 = 22 then
19082: LD_VAR 0 3
19086: PUSH
19087: LD_INT 22
19089: EQUAL
19090: IFFALSE 19100
// sTeleport := true ;
19092: LD_ADDR_EXP 111
19096: PUSH
19097: LD_INT 1
19099: ST_TO_ADDR
// if p3 = 23 then
19100: LD_VAR 0 3
19104: PUSH
19105: LD_INT 23
19107: EQUAL
19108: IFFALSE 19118
// sOilTower := true ;
19110: LD_ADDR_EXP 113
19114: PUSH
19115: LD_INT 1
19117: ST_TO_ADDR
// if p3 = 24 then
19118: LD_VAR 0 3
19122: PUSH
19123: LD_INT 24
19125: EQUAL
19126: IFFALSE 19136
// sShovel := true ;
19128: LD_ADDR_EXP 114
19132: PUSH
19133: LD_INT 1
19135: ST_TO_ADDR
// if p3 = 25 then
19136: LD_VAR 0 3
19140: PUSH
19141: LD_INT 25
19143: EQUAL
19144: IFFALSE 19154
// sSheik := true ;
19146: LD_ADDR_EXP 115
19150: PUSH
19151: LD_INT 1
19153: ST_TO_ADDR
// if p3 = 26 then
19154: LD_VAR 0 3
19158: PUSH
19159: LD_INT 26
19161: EQUAL
19162: IFFALSE 19172
// sEarthquake := true ;
19164: LD_ADDR_EXP 117
19168: PUSH
19169: LD_INT 1
19171: ST_TO_ADDR
// if p3 = 27 then
19172: LD_VAR 0 3
19176: PUSH
19177: LD_INT 27
19179: EQUAL
19180: IFFALSE 19190
// sAI := true ;
19182: LD_ADDR_EXP 118
19186: PUSH
19187: LD_INT 1
19189: ST_TO_ADDR
// if p3 = 28 then
19190: LD_VAR 0 3
19194: PUSH
19195: LD_INT 28
19197: EQUAL
19198: IFFALSE 19208
// sCargo := true ;
19200: LD_ADDR_EXP 121
19204: PUSH
19205: LD_INT 1
19207: ST_TO_ADDR
// if p3 = 29 then
19208: LD_VAR 0 3
19212: PUSH
19213: LD_INT 29
19215: EQUAL
19216: IFFALSE 19226
// sDLaser := true ;
19218: LD_ADDR_EXP 122
19222: PUSH
19223: LD_INT 1
19225: ST_TO_ADDR
// if p3 = 30 then
19226: LD_VAR 0 3
19230: PUSH
19231: LD_INT 30
19233: EQUAL
19234: IFFALSE 19244
// sExchange := true ;
19236: LD_ADDR_EXP 123
19240: PUSH
19241: LD_INT 1
19243: ST_TO_ADDR
// if p3 = 31 then
19244: LD_VAR 0 3
19248: PUSH
19249: LD_INT 31
19251: EQUAL
19252: IFFALSE 19262
// sFac := true ;
19254: LD_ADDR_EXP 124
19258: PUSH
19259: LD_INT 1
19261: ST_TO_ADDR
// if p3 = 32 then
19262: LD_VAR 0 3
19266: PUSH
19267: LD_INT 32
19269: EQUAL
19270: IFFALSE 19280
// sPower := true ;
19272: LD_ADDR_EXP 125
19276: PUSH
19277: LD_INT 1
19279: ST_TO_ADDR
// if p3 = 33 then
19280: LD_VAR 0 3
19284: PUSH
19285: LD_INT 33
19287: EQUAL
19288: IFFALSE 19298
// sRandom := true ;
19290: LD_ADDR_EXP 126
19294: PUSH
19295: LD_INT 1
19297: ST_TO_ADDR
// if p3 = 34 then
19298: LD_VAR 0 3
19302: PUSH
19303: LD_INT 34
19305: EQUAL
19306: IFFALSE 19316
// sShield := true ;
19308: LD_ADDR_EXP 127
19312: PUSH
19313: LD_INT 1
19315: ST_TO_ADDR
// if p3 = 35 then
19316: LD_VAR 0 3
19320: PUSH
19321: LD_INT 35
19323: EQUAL
19324: IFFALSE 19334
// sTime := true ;
19326: LD_ADDR_EXP 128
19330: PUSH
19331: LD_INT 1
19333: ST_TO_ADDR
// if p3 = 36 then
19334: LD_VAR 0 3
19338: PUSH
19339: LD_INT 36
19341: EQUAL
19342: IFFALSE 19352
// sTools := true ;
19344: LD_ADDR_EXP 129
19348: PUSH
19349: LD_INT 1
19351: ST_TO_ADDR
// if p3 = 101 then
19352: LD_VAR 0 3
19356: PUSH
19357: LD_INT 101
19359: EQUAL
19360: IFFALSE 19370
// sSold := true ;
19362: LD_ADDR_EXP 94
19366: PUSH
19367: LD_INT 1
19369: ST_TO_ADDR
// if p3 = 102 then
19370: LD_VAR 0 3
19374: PUSH
19375: LD_INT 102
19377: EQUAL
19378: IFFALSE 19388
// sDiff := true ;
19380: LD_ADDR_EXP 95
19384: PUSH
19385: LD_INT 1
19387: ST_TO_ADDR
// if p3 = 103 then
19388: LD_VAR 0 3
19392: PUSH
19393: LD_INT 103
19395: EQUAL
19396: IFFALSE 19406
// sFog := true ;
19398: LD_ADDR_EXP 98
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
// if p3 = 104 then
19406: LD_VAR 0 3
19410: PUSH
19411: LD_INT 104
19413: EQUAL
19414: IFFALSE 19424
// sReset := true ;
19416: LD_ADDR_EXP 99
19420: PUSH
19421: LD_INT 1
19423: ST_TO_ADDR
// if p3 = 105 then
19424: LD_VAR 0 3
19428: PUSH
19429: LD_INT 105
19431: EQUAL
19432: IFFALSE 19442
// sSun := true ;
19434: LD_ADDR_EXP 100
19438: PUSH
19439: LD_INT 1
19441: ST_TO_ADDR
// if p3 = 106 then
19442: LD_VAR 0 3
19446: PUSH
19447: LD_INT 106
19449: EQUAL
19450: IFFALSE 19460
// sTiger := true ;
19452: LD_ADDR_EXP 96
19456: PUSH
19457: LD_INT 1
19459: ST_TO_ADDR
// if p3 = 107 then
19460: LD_VAR 0 3
19464: PUSH
19465: LD_INT 107
19467: EQUAL
19468: IFFALSE 19478
// sBomb := true ;
19470: LD_ADDR_EXP 97
19474: PUSH
19475: LD_INT 1
19477: ST_TO_ADDR
// if p3 = 108 then
19478: LD_VAR 0 3
19482: PUSH
19483: LD_INT 108
19485: EQUAL
19486: IFFALSE 19496
// sWound := true ;
19488: LD_ADDR_EXP 105
19492: PUSH
19493: LD_INT 1
19495: ST_TO_ADDR
// if p3 = 109 then
19496: LD_VAR 0 3
19500: PUSH
19501: LD_INT 109
19503: EQUAL
19504: IFFALSE 19514
// sBetray := true ;
19506: LD_ADDR_EXP 109
19510: PUSH
19511: LD_INT 1
19513: ST_TO_ADDR
// if p3 = 110 then
19514: LD_VAR 0 3
19518: PUSH
19519: LD_INT 110
19521: EQUAL
19522: IFFALSE 19532
// sContamin := true ;
19524: LD_ADDR_EXP 110
19528: PUSH
19529: LD_INT 1
19531: ST_TO_ADDR
// if p3 = 111 then
19532: LD_VAR 0 3
19536: PUSH
19537: LD_INT 111
19539: EQUAL
19540: IFFALSE 19550
// sOil := true ;
19542: LD_ADDR_EXP 112
19546: PUSH
19547: LD_INT 1
19549: ST_TO_ADDR
// if p3 = 112 then
19550: LD_VAR 0 3
19554: PUSH
19555: LD_INT 112
19557: EQUAL
19558: IFFALSE 19568
// sStu := true ;
19560: LD_ADDR_EXP 116
19564: PUSH
19565: LD_INT 1
19567: ST_TO_ADDR
// if p3 = 113 then
19568: LD_VAR 0 3
19572: PUSH
19573: LD_INT 113
19575: EQUAL
19576: IFFALSE 19586
// sBazooka := true ;
19578: LD_ADDR_EXP 119
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
// if p3 = 114 then
19586: LD_VAR 0 3
19590: PUSH
19591: LD_INT 114
19593: EQUAL
19594: IFFALSE 19604
// sMortar := true ;
19596: LD_ADDR_EXP 120
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// if p3 = 115 then
19604: LD_VAR 0 3
19608: PUSH
19609: LD_INT 115
19611: EQUAL
19612: IFFALSE 19622
// sRanger := true ;
19614: LD_ADDR_EXP 130
19618: PUSH
19619: LD_INT 1
19621: ST_TO_ADDR
// end ; if p2 = 101 then
19622: LD_VAR 0 2
19626: PUSH
19627: LD_INT 101
19629: EQUAL
19630: IFFALSE 19833
// begin case p3 of 1 :
19632: LD_VAR 0 3
19636: PUSH
19637: LD_INT 1
19639: DOUBLE
19640: EQUAL
19641: IFTRUE 19645
19643: GO 19652
19645: POP
// hHackUnlimitedResources ; 2 :
19646: CALL 29927 0 0
19650: GO 19833
19652: LD_INT 2
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19667
19660: POP
// hHackSetLevel10 ; 3 :
19661: CALL 30060 0 0
19665: GO 19833
19667: LD_INT 3
19669: DOUBLE
19670: EQUAL
19671: IFTRUE 19675
19673: GO 19682
19675: POP
// hHackSetLevel10YourUnits ; 4 :
19676: CALL 30145 0 0
19680: GO 19833
19682: LD_INT 4
19684: DOUBLE
19685: EQUAL
19686: IFTRUE 19690
19688: GO 19712
19690: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
19691: LD_VAR 0 4
19695: PPUSH
19696: LD_VAR 0 5
19700: PPUSH
19701: LD_VAR 0 6
19705: PPUSH
19706: CALL 30235 0 3
19710: GO 19833
19712: LD_INT 5
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19727
19720: POP
// hHackSpawnVehicle ; 6 :
19721: CALL 30296 0 0
19725: GO 19833
19727: LD_INT 6
19729: DOUBLE
19730: EQUAL
19731: IFTRUE 19735
19733: GO 19742
19735: POP
// hHackInvincible ; 7 :
19736: CALL 30842 0 0
19740: GO 19833
19742: LD_INT 7
19744: DOUBLE
19745: EQUAL
19746: IFTRUE 19750
19748: GO 19757
19750: POP
// hHackInvisible ; 8 :
19751: CALL 30953 0 0
19755: GO 19833
19757: LD_INT 8
19759: DOUBLE
19760: EQUAL
19761: IFTRUE 19765
19763: GO 19772
19765: POP
// hHackChangeYourSide ; 9 :
19766: CALL 31010 0 0
19770: GO 19833
19772: LD_INT 9
19774: DOUBLE
19775: EQUAL
19776: IFTRUE 19780
19778: GO 19787
19780: POP
// hHackChangeUnitSide ; 10 :
19781: CALL 31052 0 0
19785: GO 19833
19787: LD_INT 10
19789: DOUBLE
19790: EQUAL
19791: IFTRUE 19795
19793: GO 19802
19795: POP
// hHackFog ; 11 :
19796: CALL 31153 0 0
19800: GO 19833
19802: LD_INT 11
19804: DOUBLE
19805: EQUAL
19806: IFTRUE 19810
19808: GO 19817
19810: POP
// hHackApeman ; 12 :
19811: CALL 31168 0 0
19815: GO 19833
19817: LD_INT 12
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19832
19825: POP
// hHackBoom ; end ;
19826: CALL 31253 0 0
19830: GO 19833
19832: POP
// end ; end ;
19833: PPOPN 6
19835: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19836: GO 19838
19838: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19839: LD_STRING initStreamRollete();
19841: PPUSH
19842: CALL_OW 559
// InitStreamMode ;
19846: CALL 19855 0 0
// DefineStreamItems ( ) ;
19850: CALL 20295 0 0
// end ;
19854: END
// function InitStreamMode ; begin
19855: LD_INT 0
19857: PPUSH
// streamModeActive := false ;
19858: LD_ADDR_EXP 77
19862: PUSH
19863: LD_INT 0
19865: ST_TO_ADDR
// normalCounter := 36 ;
19866: LD_ADDR_EXP 78
19870: PUSH
19871: LD_INT 36
19873: ST_TO_ADDR
// hardcoreCounter := 16 ;
19874: LD_ADDR_EXP 79
19878: PUSH
19879: LD_INT 16
19881: ST_TO_ADDR
// sRocket := false ;
19882: LD_ADDR_EXP 82
19886: PUSH
19887: LD_INT 0
19889: ST_TO_ADDR
// sSpeed := false ;
19890: LD_ADDR_EXP 81
19894: PUSH
19895: LD_INT 0
19897: ST_TO_ADDR
// sEngine := false ;
19898: LD_ADDR_EXP 83
19902: PUSH
19903: LD_INT 0
19905: ST_TO_ADDR
// sSpec := false ;
19906: LD_ADDR_EXP 80
19910: PUSH
19911: LD_INT 0
19913: ST_TO_ADDR
// sLevel := false ;
19914: LD_ADDR_EXP 84
19918: PUSH
19919: LD_INT 0
19921: ST_TO_ADDR
// sArmoury := false ;
19922: LD_ADDR_EXP 85
19926: PUSH
19927: LD_INT 0
19929: ST_TO_ADDR
// sRadar := false ;
19930: LD_ADDR_EXP 86
19934: PUSH
19935: LD_INT 0
19937: ST_TO_ADDR
// sBunker := false ;
19938: LD_ADDR_EXP 87
19942: PUSH
19943: LD_INT 0
19945: ST_TO_ADDR
// sHack := false ;
19946: LD_ADDR_EXP 88
19950: PUSH
19951: LD_INT 0
19953: ST_TO_ADDR
// sFire := false ;
19954: LD_ADDR_EXP 89
19958: PUSH
19959: LD_INT 0
19961: ST_TO_ADDR
// sRefresh := false ;
19962: LD_ADDR_EXP 90
19966: PUSH
19967: LD_INT 0
19969: ST_TO_ADDR
// sExp := false ;
19970: LD_ADDR_EXP 91
19974: PUSH
19975: LD_INT 0
19977: ST_TO_ADDR
// sDepot := false ;
19978: LD_ADDR_EXP 92
19982: PUSH
19983: LD_INT 0
19985: ST_TO_ADDR
// sFlag := false ;
19986: LD_ADDR_EXP 93
19990: PUSH
19991: LD_INT 0
19993: ST_TO_ADDR
// sKamikadze := false ;
19994: LD_ADDR_EXP 101
19998: PUSH
19999: LD_INT 0
20001: ST_TO_ADDR
// sTroll := false ;
20002: LD_ADDR_EXP 102
20006: PUSH
20007: LD_INT 0
20009: ST_TO_ADDR
// sSlow := false ;
20010: LD_ADDR_EXP 103
20014: PUSH
20015: LD_INT 0
20017: ST_TO_ADDR
// sLack := false ;
20018: LD_ADDR_EXP 104
20022: PUSH
20023: LD_INT 0
20025: ST_TO_ADDR
// sTank := false ;
20026: LD_ADDR_EXP 106
20030: PUSH
20031: LD_INT 0
20033: ST_TO_ADDR
// sRemote := false ;
20034: LD_ADDR_EXP 107
20038: PUSH
20039: LD_INT 0
20041: ST_TO_ADDR
// sPowell := false ;
20042: LD_ADDR_EXP 108
20046: PUSH
20047: LD_INT 0
20049: ST_TO_ADDR
// sTeleport := false ;
20050: LD_ADDR_EXP 111
20054: PUSH
20055: LD_INT 0
20057: ST_TO_ADDR
// sOilTower := false ;
20058: LD_ADDR_EXP 113
20062: PUSH
20063: LD_INT 0
20065: ST_TO_ADDR
// sShovel := false ;
20066: LD_ADDR_EXP 114
20070: PUSH
20071: LD_INT 0
20073: ST_TO_ADDR
// sSheik := false ;
20074: LD_ADDR_EXP 115
20078: PUSH
20079: LD_INT 0
20081: ST_TO_ADDR
// sEarthquake := false ;
20082: LD_ADDR_EXP 117
20086: PUSH
20087: LD_INT 0
20089: ST_TO_ADDR
// sAI := false ;
20090: LD_ADDR_EXP 118
20094: PUSH
20095: LD_INT 0
20097: ST_TO_ADDR
// sCargo := false ;
20098: LD_ADDR_EXP 121
20102: PUSH
20103: LD_INT 0
20105: ST_TO_ADDR
// sDLaser := false ;
20106: LD_ADDR_EXP 122
20110: PUSH
20111: LD_INT 0
20113: ST_TO_ADDR
// sExchange := false ;
20114: LD_ADDR_EXP 123
20118: PUSH
20119: LD_INT 0
20121: ST_TO_ADDR
// sFac := false ;
20122: LD_ADDR_EXP 124
20126: PUSH
20127: LD_INT 0
20129: ST_TO_ADDR
// sPower := false ;
20130: LD_ADDR_EXP 125
20134: PUSH
20135: LD_INT 0
20137: ST_TO_ADDR
// sRandom := false ;
20138: LD_ADDR_EXP 126
20142: PUSH
20143: LD_INT 0
20145: ST_TO_ADDR
// sShield := false ;
20146: LD_ADDR_EXP 127
20150: PUSH
20151: LD_INT 0
20153: ST_TO_ADDR
// sTime := false ;
20154: LD_ADDR_EXP 128
20158: PUSH
20159: LD_INT 0
20161: ST_TO_ADDR
// sTools := false ;
20162: LD_ADDR_EXP 129
20166: PUSH
20167: LD_INT 0
20169: ST_TO_ADDR
// sSold := false ;
20170: LD_ADDR_EXP 94
20174: PUSH
20175: LD_INT 0
20177: ST_TO_ADDR
// sDiff := false ;
20178: LD_ADDR_EXP 95
20182: PUSH
20183: LD_INT 0
20185: ST_TO_ADDR
// sFog := false ;
20186: LD_ADDR_EXP 98
20190: PUSH
20191: LD_INT 0
20193: ST_TO_ADDR
// sReset := false ;
20194: LD_ADDR_EXP 99
20198: PUSH
20199: LD_INT 0
20201: ST_TO_ADDR
// sSun := false ;
20202: LD_ADDR_EXP 100
20206: PUSH
20207: LD_INT 0
20209: ST_TO_ADDR
// sTiger := false ;
20210: LD_ADDR_EXP 96
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// sBomb := false ;
20218: LD_ADDR_EXP 97
20222: PUSH
20223: LD_INT 0
20225: ST_TO_ADDR
// sWound := false ;
20226: LD_ADDR_EXP 105
20230: PUSH
20231: LD_INT 0
20233: ST_TO_ADDR
// sBetray := false ;
20234: LD_ADDR_EXP 109
20238: PUSH
20239: LD_INT 0
20241: ST_TO_ADDR
// sContamin := false ;
20242: LD_ADDR_EXP 110
20246: PUSH
20247: LD_INT 0
20249: ST_TO_ADDR
// sOil := false ;
20250: LD_ADDR_EXP 112
20254: PUSH
20255: LD_INT 0
20257: ST_TO_ADDR
// sStu := false ;
20258: LD_ADDR_EXP 116
20262: PUSH
20263: LD_INT 0
20265: ST_TO_ADDR
// sBazooka := false ;
20266: LD_ADDR_EXP 119
20270: PUSH
20271: LD_INT 0
20273: ST_TO_ADDR
// sMortar := false ;
20274: LD_ADDR_EXP 120
20278: PUSH
20279: LD_INT 0
20281: ST_TO_ADDR
// sRanger := false ;
20282: LD_ADDR_EXP 130
20286: PUSH
20287: LD_INT 0
20289: ST_TO_ADDR
// end ;
20290: LD_VAR 0 1
20294: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20295: LD_INT 0
20297: PPUSH
20298: PPUSH
20299: PPUSH
20300: PPUSH
20301: PPUSH
// result := [ ] ;
20302: LD_ADDR_VAR 0 1
20306: PUSH
20307: EMPTY
20308: ST_TO_ADDR
// if campaign_id = 1 then
20309: LD_OWVAR 69
20313: PUSH
20314: LD_INT 1
20316: EQUAL
20317: IFFALSE 23255
// begin case mission_number of 1 :
20319: LD_OWVAR 70
20323: PUSH
20324: LD_INT 1
20326: DOUBLE
20327: EQUAL
20328: IFTRUE 20332
20330: GO 20396
20332: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20333: LD_ADDR_VAR 0 1
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: LD_INT 4
20343: PUSH
20344: LD_INT 11
20346: PUSH
20347: LD_INT 12
20349: PUSH
20350: LD_INT 15
20352: PUSH
20353: LD_INT 16
20355: PUSH
20356: LD_INT 22
20358: PUSH
20359: LD_INT 23
20361: PUSH
20362: LD_INT 26
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 101
20378: PUSH
20379: LD_INT 102
20381: PUSH
20382: LD_INT 106
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: ST_TO_ADDR
20394: GO 23253
20396: LD_INT 2
20398: DOUBLE
20399: EQUAL
20400: IFTRUE 20404
20402: GO 20476
20404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20405: LD_ADDR_VAR 0 1
20409: PUSH
20410: LD_INT 2
20412: PUSH
20413: LD_INT 4
20415: PUSH
20416: LD_INT 11
20418: PUSH
20419: LD_INT 12
20421: PUSH
20422: LD_INT 15
20424: PUSH
20425: LD_INT 16
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 23
20433: PUSH
20434: LD_INT 26
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 101
20450: PUSH
20451: LD_INT 102
20453: PUSH
20454: LD_INT 105
20456: PUSH
20457: LD_INT 106
20459: PUSH
20460: LD_INT 108
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: ST_TO_ADDR
20474: GO 23253
20476: LD_INT 3
20478: DOUBLE
20479: EQUAL
20480: IFTRUE 20484
20482: GO 20560
20484: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20485: LD_ADDR_VAR 0 1
20489: PUSH
20490: LD_INT 2
20492: PUSH
20493: LD_INT 4
20495: PUSH
20496: LD_INT 5
20498: PUSH
20499: LD_INT 11
20501: PUSH
20502: LD_INT 12
20504: PUSH
20505: LD_INT 15
20507: PUSH
20508: LD_INT 16
20510: PUSH
20511: LD_INT 22
20513: PUSH
20514: LD_INT 26
20516: PUSH
20517: LD_INT 36
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 101
20534: PUSH
20535: LD_INT 102
20537: PUSH
20538: LD_INT 105
20540: PUSH
20541: LD_INT 106
20543: PUSH
20544: LD_INT 108
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: ST_TO_ADDR
20558: GO 23253
20560: LD_INT 4
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20652
20568: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20569: LD_ADDR_VAR 0 1
20573: PUSH
20574: LD_INT 2
20576: PUSH
20577: LD_INT 4
20579: PUSH
20580: LD_INT 5
20582: PUSH
20583: LD_INT 8
20585: PUSH
20586: LD_INT 11
20588: PUSH
20589: LD_INT 12
20591: PUSH
20592: LD_INT 15
20594: PUSH
20595: LD_INT 16
20597: PUSH
20598: LD_INT 22
20600: PUSH
20601: LD_INT 23
20603: PUSH
20604: LD_INT 26
20606: PUSH
20607: LD_INT 36
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 101
20626: PUSH
20627: LD_INT 102
20629: PUSH
20630: LD_INT 105
20632: PUSH
20633: LD_INT 106
20635: PUSH
20636: LD_INT 108
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: ST_TO_ADDR
20650: GO 23253
20652: LD_INT 5
20654: DOUBLE
20655: EQUAL
20656: IFTRUE 20660
20658: GO 20760
20660: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20661: LD_ADDR_VAR 0 1
20665: PUSH
20666: LD_INT 2
20668: PUSH
20669: LD_INT 4
20671: PUSH
20672: LD_INT 5
20674: PUSH
20675: LD_INT 6
20677: PUSH
20678: LD_INT 8
20680: PUSH
20681: LD_INT 11
20683: PUSH
20684: LD_INT 12
20686: PUSH
20687: LD_INT 15
20689: PUSH
20690: LD_INT 16
20692: PUSH
20693: LD_INT 22
20695: PUSH
20696: LD_INT 23
20698: PUSH
20699: LD_INT 25
20701: PUSH
20702: LD_INT 26
20704: PUSH
20705: LD_INT 36
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 101
20726: PUSH
20727: LD_INT 102
20729: PUSH
20730: LD_INT 105
20732: PUSH
20733: LD_INT 106
20735: PUSH
20736: LD_INT 108
20738: PUSH
20739: LD_INT 109
20741: PUSH
20742: LD_INT 112
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: ST_TO_ADDR
20758: GO 23253
20760: LD_INT 6
20762: DOUBLE
20763: EQUAL
20764: IFTRUE 20768
20766: GO 20888
20768: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20769: LD_ADDR_VAR 0 1
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: LD_INT 4
20779: PUSH
20780: LD_INT 5
20782: PUSH
20783: LD_INT 6
20785: PUSH
20786: LD_INT 8
20788: PUSH
20789: LD_INT 11
20791: PUSH
20792: LD_INT 12
20794: PUSH
20795: LD_INT 15
20797: PUSH
20798: LD_INT 16
20800: PUSH
20801: LD_INT 20
20803: PUSH
20804: LD_INT 21
20806: PUSH
20807: LD_INT 22
20809: PUSH
20810: LD_INT 23
20812: PUSH
20813: LD_INT 25
20815: PUSH
20816: LD_INT 26
20818: PUSH
20819: LD_INT 30
20821: PUSH
20822: LD_INT 31
20824: PUSH
20825: LD_INT 32
20827: PUSH
20828: LD_INT 36
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 101
20854: PUSH
20855: LD_INT 102
20857: PUSH
20858: LD_INT 105
20860: PUSH
20861: LD_INT 106
20863: PUSH
20864: LD_INT 108
20866: PUSH
20867: LD_INT 109
20869: PUSH
20870: LD_INT 112
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: ST_TO_ADDR
20886: GO 23253
20888: LD_INT 7
20890: DOUBLE
20891: EQUAL
20892: IFTRUE 20896
20894: GO 20996
20896: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20897: LD_ADDR_VAR 0 1
20901: PUSH
20902: LD_INT 2
20904: PUSH
20905: LD_INT 4
20907: PUSH
20908: LD_INT 5
20910: PUSH
20911: LD_INT 7
20913: PUSH
20914: LD_INT 11
20916: PUSH
20917: LD_INT 12
20919: PUSH
20920: LD_INT 15
20922: PUSH
20923: LD_INT 16
20925: PUSH
20926: LD_INT 20
20928: PUSH
20929: LD_INT 21
20931: PUSH
20932: LD_INT 22
20934: PUSH
20935: LD_INT 23
20937: PUSH
20938: LD_INT 25
20940: PUSH
20941: LD_INT 26
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 101
20962: PUSH
20963: LD_INT 102
20965: PUSH
20966: LD_INT 103
20968: PUSH
20969: LD_INT 105
20971: PUSH
20972: LD_INT 106
20974: PUSH
20975: LD_INT 108
20977: PUSH
20978: LD_INT 112
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: ST_TO_ADDR
20994: GO 23253
20996: LD_INT 8
20998: DOUBLE
20999: EQUAL
21000: IFTRUE 21004
21002: GO 21132
21004: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21005: LD_ADDR_VAR 0 1
21009: PUSH
21010: LD_INT 2
21012: PUSH
21013: LD_INT 4
21015: PUSH
21016: LD_INT 5
21018: PUSH
21019: LD_INT 6
21021: PUSH
21022: LD_INT 7
21024: PUSH
21025: LD_INT 8
21027: PUSH
21028: LD_INT 11
21030: PUSH
21031: LD_INT 12
21033: PUSH
21034: LD_INT 15
21036: PUSH
21037: LD_INT 16
21039: PUSH
21040: LD_INT 20
21042: PUSH
21043: LD_INT 21
21045: PUSH
21046: LD_INT 22
21048: PUSH
21049: LD_INT 23
21051: PUSH
21052: LD_INT 25
21054: PUSH
21055: LD_INT 26
21057: PUSH
21058: LD_INT 30
21060: PUSH
21061: LD_INT 31
21063: PUSH
21064: LD_INT 32
21066: PUSH
21067: LD_INT 36
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 101
21094: PUSH
21095: LD_INT 102
21097: PUSH
21098: LD_INT 103
21100: PUSH
21101: LD_INT 105
21103: PUSH
21104: LD_INT 106
21106: PUSH
21107: LD_INT 108
21109: PUSH
21110: LD_INT 109
21112: PUSH
21113: LD_INT 112
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: ST_TO_ADDR
21130: GO 23253
21132: LD_INT 9
21134: DOUBLE
21135: EQUAL
21136: IFTRUE 21140
21138: GO 21276
21140: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21141: LD_ADDR_VAR 0 1
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: LD_INT 4
21151: PUSH
21152: LD_INT 5
21154: PUSH
21155: LD_INT 6
21157: PUSH
21158: LD_INT 7
21160: PUSH
21161: LD_INT 8
21163: PUSH
21164: LD_INT 11
21166: PUSH
21167: LD_INT 12
21169: PUSH
21170: LD_INT 15
21172: PUSH
21173: LD_INT 16
21175: PUSH
21176: LD_INT 20
21178: PUSH
21179: LD_INT 21
21181: PUSH
21182: LD_INT 22
21184: PUSH
21185: LD_INT 23
21187: PUSH
21188: LD_INT 25
21190: PUSH
21191: LD_INT 26
21193: PUSH
21194: LD_INT 28
21196: PUSH
21197: LD_INT 30
21199: PUSH
21200: LD_INT 31
21202: PUSH
21203: LD_INT 32
21205: PUSH
21206: LD_INT 36
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 101
21234: PUSH
21235: LD_INT 102
21237: PUSH
21238: LD_INT 103
21240: PUSH
21241: LD_INT 105
21243: PUSH
21244: LD_INT 106
21246: PUSH
21247: LD_INT 108
21249: PUSH
21250: LD_INT 109
21252: PUSH
21253: LD_INT 112
21255: PUSH
21256: LD_INT 114
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: ST_TO_ADDR
21274: GO 23253
21276: LD_INT 10
21278: DOUBLE
21279: EQUAL
21280: IFTRUE 21284
21282: GO 21468
21284: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21285: LD_ADDR_VAR 0 1
21289: PUSH
21290: LD_INT 2
21292: PUSH
21293: LD_INT 4
21295: PUSH
21296: LD_INT 5
21298: PUSH
21299: LD_INT 6
21301: PUSH
21302: LD_INT 7
21304: PUSH
21305: LD_INT 8
21307: PUSH
21308: LD_INT 9
21310: PUSH
21311: LD_INT 10
21313: PUSH
21314: LD_INT 11
21316: PUSH
21317: LD_INT 12
21319: PUSH
21320: LD_INT 13
21322: PUSH
21323: LD_INT 14
21325: PUSH
21326: LD_INT 15
21328: PUSH
21329: LD_INT 16
21331: PUSH
21332: LD_INT 17
21334: PUSH
21335: LD_INT 18
21337: PUSH
21338: LD_INT 19
21340: PUSH
21341: LD_INT 20
21343: PUSH
21344: LD_INT 21
21346: PUSH
21347: LD_INT 22
21349: PUSH
21350: LD_INT 23
21352: PUSH
21353: LD_INT 24
21355: PUSH
21356: LD_INT 25
21358: PUSH
21359: LD_INT 26
21361: PUSH
21362: LD_INT 28
21364: PUSH
21365: LD_INT 30
21367: PUSH
21368: LD_INT 31
21370: PUSH
21371: LD_INT 32
21373: PUSH
21374: LD_INT 36
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 101
21410: PUSH
21411: LD_INT 102
21413: PUSH
21414: LD_INT 103
21416: PUSH
21417: LD_INT 104
21419: PUSH
21420: LD_INT 105
21422: PUSH
21423: LD_INT 106
21425: PUSH
21426: LD_INT 107
21428: PUSH
21429: LD_INT 108
21431: PUSH
21432: LD_INT 109
21434: PUSH
21435: LD_INT 110
21437: PUSH
21438: LD_INT 111
21440: PUSH
21441: LD_INT 112
21443: PUSH
21444: LD_INT 114
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: ST_TO_ADDR
21466: GO 23253
21468: LD_INT 11
21470: DOUBLE
21471: EQUAL
21472: IFTRUE 21476
21474: GO 21668
21476: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21477: LD_ADDR_VAR 0 1
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: LD_INT 3
21487: PUSH
21488: LD_INT 4
21490: PUSH
21491: LD_INT 5
21493: PUSH
21494: LD_INT 6
21496: PUSH
21497: LD_INT 7
21499: PUSH
21500: LD_INT 8
21502: PUSH
21503: LD_INT 9
21505: PUSH
21506: LD_INT 10
21508: PUSH
21509: LD_INT 11
21511: PUSH
21512: LD_INT 12
21514: PUSH
21515: LD_INT 13
21517: PUSH
21518: LD_INT 14
21520: PUSH
21521: LD_INT 15
21523: PUSH
21524: LD_INT 16
21526: PUSH
21527: LD_INT 17
21529: PUSH
21530: LD_INT 18
21532: PUSH
21533: LD_INT 19
21535: PUSH
21536: LD_INT 20
21538: PUSH
21539: LD_INT 21
21541: PUSH
21542: LD_INT 22
21544: PUSH
21545: LD_INT 23
21547: PUSH
21548: LD_INT 24
21550: PUSH
21551: LD_INT 25
21553: PUSH
21554: LD_INT 26
21556: PUSH
21557: LD_INT 28
21559: PUSH
21560: LD_INT 30
21562: PUSH
21563: LD_INT 31
21565: PUSH
21566: LD_INT 32
21568: PUSH
21569: LD_INT 34
21571: PUSH
21572: LD_INT 36
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 101
21610: PUSH
21611: LD_INT 102
21613: PUSH
21614: LD_INT 103
21616: PUSH
21617: LD_INT 104
21619: PUSH
21620: LD_INT 105
21622: PUSH
21623: LD_INT 106
21625: PUSH
21626: LD_INT 107
21628: PUSH
21629: LD_INT 108
21631: PUSH
21632: LD_INT 109
21634: PUSH
21635: LD_INT 110
21637: PUSH
21638: LD_INT 111
21640: PUSH
21641: LD_INT 112
21643: PUSH
21644: LD_INT 114
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: ST_TO_ADDR
21666: GO 23253
21668: LD_INT 12
21670: DOUBLE
21671: EQUAL
21672: IFTRUE 21676
21674: GO 21884
21676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21677: LD_ADDR_VAR 0 1
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 3
21690: PUSH
21691: LD_INT 4
21693: PUSH
21694: LD_INT 5
21696: PUSH
21697: LD_INT 6
21699: PUSH
21700: LD_INT 7
21702: PUSH
21703: LD_INT 8
21705: PUSH
21706: LD_INT 9
21708: PUSH
21709: LD_INT 10
21711: PUSH
21712: LD_INT 11
21714: PUSH
21715: LD_INT 12
21717: PUSH
21718: LD_INT 13
21720: PUSH
21721: LD_INT 14
21723: PUSH
21724: LD_INT 15
21726: PUSH
21727: LD_INT 16
21729: PUSH
21730: LD_INT 17
21732: PUSH
21733: LD_INT 18
21735: PUSH
21736: LD_INT 19
21738: PUSH
21739: LD_INT 20
21741: PUSH
21742: LD_INT 21
21744: PUSH
21745: LD_INT 22
21747: PUSH
21748: LD_INT 23
21750: PUSH
21751: LD_INT 24
21753: PUSH
21754: LD_INT 25
21756: PUSH
21757: LD_INT 26
21759: PUSH
21760: LD_INT 27
21762: PUSH
21763: LD_INT 28
21765: PUSH
21766: LD_INT 30
21768: PUSH
21769: LD_INT 31
21771: PUSH
21772: LD_INT 32
21774: PUSH
21775: LD_INT 33
21777: PUSH
21778: LD_INT 34
21780: PUSH
21781: LD_INT 36
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 101
21822: PUSH
21823: LD_INT 102
21825: PUSH
21826: LD_INT 103
21828: PUSH
21829: LD_INT 104
21831: PUSH
21832: LD_INT 105
21834: PUSH
21835: LD_INT 106
21837: PUSH
21838: LD_INT 107
21840: PUSH
21841: LD_INT 108
21843: PUSH
21844: LD_INT 109
21846: PUSH
21847: LD_INT 110
21849: PUSH
21850: LD_INT 111
21852: PUSH
21853: LD_INT 112
21855: PUSH
21856: LD_INT 113
21858: PUSH
21859: LD_INT 114
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: ST_TO_ADDR
21882: GO 23253
21884: LD_INT 13
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 22088
21892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21893: LD_ADDR_VAR 0 1
21897: PUSH
21898: LD_INT 1
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 3
21906: PUSH
21907: LD_INT 4
21909: PUSH
21910: LD_INT 5
21912: PUSH
21913: LD_INT 8
21915: PUSH
21916: LD_INT 9
21918: PUSH
21919: LD_INT 10
21921: PUSH
21922: LD_INT 11
21924: PUSH
21925: LD_INT 12
21927: PUSH
21928: LD_INT 14
21930: PUSH
21931: LD_INT 15
21933: PUSH
21934: LD_INT 16
21936: PUSH
21937: LD_INT 17
21939: PUSH
21940: LD_INT 18
21942: PUSH
21943: LD_INT 19
21945: PUSH
21946: LD_INT 20
21948: PUSH
21949: LD_INT 21
21951: PUSH
21952: LD_INT 22
21954: PUSH
21955: LD_INT 23
21957: PUSH
21958: LD_INT 24
21960: PUSH
21961: LD_INT 25
21963: PUSH
21964: LD_INT 26
21966: PUSH
21967: LD_INT 27
21969: PUSH
21970: LD_INT 28
21972: PUSH
21973: LD_INT 30
21975: PUSH
21976: LD_INT 31
21978: PUSH
21979: LD_INT 32
21981: PUSH
21982: LD_INT 33
21984: PUSH
21985: LD_INT 34
21987: PUSH
21988: LD_INT 36
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 101
22026: PUSH
22027: LD_INT 102
22029: PUSH
22030: LD_INT 103
22032: PUSH
22033: LD_INT 104
22035: PUSH
22036: LD_INT 105
22038: PUSH
22039: LD_INT 106
22041: PUSH
22042: LD_INT 107
22044: PUSH
22045: LD_INT 108
22047: PUSH
22048: LD_INT 109
22050: PUSH
22051: LD_INT 110
22053: PUSH
22054: LD_INT 111
22056: PUSH
22057: LD_INT 112
22059: PUSH
22060: LD_INT 113
22062: PUSH
22063: LD_INT 114
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: ST_TO_ADDR
22086: GO 23253
22088: LD_INT 14
22090: DOUBLE
22091: EQUAL
22092: IFTRUE 22096
22094: GO 22308
22096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22097: LD_ADDR_VAR 0 1
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: LD_INT 3
22110: PUSH
22111: LD_INT 4
22113: PUSH
22114: LD_INT 5
22116: PUSH
22117: LD_INT 6
22119: PUSH
22120: LD_INT 7
22122: PUSH
22123: LD_INT 8
22125: PUSH
22126: LD_INT 9
22128: PUSH
22129: LD_INT 10
22131: PUSH
22132: LD_INT 11
22134: PUSH
22135: LD_INT 12
22137: PUSH
22138: LD_INT 13
22140: PUSH
22141: LD_INT 14
22143: PUSH
22144: LD_INT 15
22146: PUSH
22147: LD_INT 16
22149: PUSH
22150: LD_INT 17
22152: PUSH
22153: LD_INT 18
22155: PUSH
22156: LD_INT 19
22158: PUSH
22159: LD_INT 20
22161: PUSH
22162: LD_INT 21
22164: PUSH
22165: LD_INT 22
22167: PUSH
22168: LD_INT 23
22170: PUSH
22171: LD_INT 24
22173: PUSH
22174: LD_INT 25
22176: PUSH
22177: LD_INT 26
22179: PUSH
22180: LD_INT 27
22182: PUSH
22183: LD_INT 28
22185: PUSH
22186: LD_INT 29
22188: PUSH
22189: LD_INT 30
22191: PUSH
22192: LD_INT 31
22194: PUSH
22195: LD_INT 32
22197: PUSH
22198: LD_INT 33
22200: PUSH
22201: LD_INT 34
22203: PUSH
22204: LD_INT 36
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 101
22246: PUSH
22247: LD_INT 102
22249: PUSH
22250: LD_INT 103
22252: PUSH
22253: LD_INT 104
22255: PUSH
22256: LD_INT 105
22258: PUSH
22259: LD_INT 106
22261: PUSH
22262: LD_INT 107
22264: PUSH
22265: LD_INT 108
22267: PUSH
22268: LD_INT 109
22270: PUSH
22271: LD_INT 110
22273: PUSH
22274: LD_INT 111
22276: PUSH
22277: LD_INT 112
22279: PUSH
22280: LD_INT 113
22282: PUSH
22283: LD_INT 114
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: ST_TO_ADDR
22306: GO 23253
22308: LD_INT 15
22310: DOUBLE
22311: EQUAL
22312: IFTRUE 22316
22314: GO 22528
22316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22317: LD_ADDR_VAR 0 1
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: LD_INT 2
22327: PUSH
22328: LD_INT 3
22330: PUSH
22331: LD_INT 4
22333: PUSH
22334: LD_INT 5
22336: PUSH
22337: LD_INT 6
22339: PUSH
22340: LD_INT 7
22342: PUSH
22343: LD_INT 8
22345: PUSH
22346: LD_INT 9
22348: PUSH
22349: LD_INT 10
22351: PUSH
22352: LD_INT 11
22354: PUSH
22355: LD_INT 12
22357: PUSH
22358: LD_INT 13
22360: PUSH
22361: LD_INT 14
22363: PUSH
22364: LD_INT 15
22366: PUSH
22367: LD_INT 16
22369: PUSH
22370: LD_INT 17
22372: PUSH
22373: LD_INT 18
22375: PUSH
22376: LD_INT 19
22378: PUSH
22379: LD_INT 20
22381: PUSH
22382: LD_INT 21
22384: PUSH
22385: LD_INT 22
22387: PUSH
22388: LD_INT 23
22390: PUSH
22391: LD_INT 24
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 26
22399: PUSH
22400: LD_INT 27
22402: PUSH
22403: LD_INT 28
22405: PUSH
22406: LD_INT 29
22408: PUSH
22409: LD_INT 30
22411: PUSH
22412: LD_INT 31
22414: PUSH
22415: LD_INT 32
22417: PUSH
22418: LD_INT 33
22420: PUSH
22421: LD_INT 34
22423: PUSH
22424: LD_INT 36
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 101
22466: PUSH
22467: LD_INT 102
22469: PUSH
22470: LD_INT 103
22472: PUSH
22473: LD_INT 104
22475: PUSH
22476: LD_INT 105
22478: PUSH
22479: LD_INT 106
22481: PUSH
22482: LD_INT 107
22484: PUSH
22485: LD_INT 108
22487: PUSH
22488: LD_INT 109
22490: PUSH
22491: LD_INT 110
22493: PUSH
22494: LD_INT 111
22496: PUSH
22497: LD_INT 112
22499: PUSH
22500: LD_INT 113
22502: PUSH
22503: LD_INT 114
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: ST_TO_ADDR
22526: GO 23253
22528: LD_INT 16
22530: DOUBLE
22531: EQUAL
22532: IFTRUE 22536
22534: GO 22660
22536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22537: LD_ADDR_VAR 0 1
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: LD_INT 4
22547: PUSH
22548: LD_INT 5
22550: PUSH
22551: LD_INT 7
22553: PUSH
22554: LD_INT 11
22556: PUSH
22557: LD_INT 12
22559: PUSH
22560: LD_INT 15
22562: PUSH
22563: LD_INT 16
22565: PUSH
22566: LD_INT 20
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 22
22574: PUSH
22575: LD_INT 23
22577: PUSH
22578: LD_INT 25
22580: PUSH
22581: LD_INT 26
22583: PUSH
22584: LD_INT 30
22586: PUSH
22587: LD_INT 31
22589: PUSH
22590: LD_INT 32
22592: PUSH
22593: LD_INT 33
22595: PUSH
22596: LD_INT 34
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 101
22622: PUSH
22623: LD_INT 102
22625: PUSH
22626: LD_INT 103
22628: PUSH
22629: LD_INT 106
22631: PUSH
22632: LD_INT 108
22634: PUSH
22635: LD_INT 112
22637: PUSH
22638: LD_INT 113
22640: PUSH
22641: LD_INT 114
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: ST_TO_ADDR
22658: GO 23253
22660: LD_INT 17
22662: DOUBLE
22663: EQUAL
22664: IFTRUE 22668
22666: GO 22880
22668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22669: LD_ADDR_VAR 0 1
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: LD_INT 3
22682: PUSH
22683: LD_INT 4
22685: PUSH
22686: LD_INT 5
22688: PUSH
22689: LD_INT 6
22691: PUSH
22692: LD_INT 7
22694: PUSH
22695: LD_INT 8
22697: PUSH
22698: LD_INT 9
22700: PUSH
22701: LD_INT 10
22703: PUSH
22704: LD_INT 11
22706: PUSH
22707: LD_INT 12
22709: PUSH
22710: LD_INT 13
22712: PUSH
22713: LD_INT 14
22715: PUSH
22716: LD_INT 15
22718: PUSH
22719: LD_INT 16
22721: PUSH
22722: LD_INT 17
22724: PUSH
22725: LD_INT 18
22727: PUSH
22728: LD_INT 19
22730: PUSH
22731: LD_INT 20
22733: PUSH
22734: LD_INT 21
22736: PUSH
22737: LD_INT 22
22739: PUSH
22740: LD_INT 23
22742: PUSH
22743: LD_INT 24
22745: PUSH
22746: LD_INT 25
22748: PUSH
22749: LD_INT 26
22751: PUSH
22752: LD_INT 27
22754: PUSH
22755: LD_INT 28
22757: PUSH
22758: LD_INT 29
22760: PUSH
22761: LD_INT 30
22763: PUSH
22764: LD_INT 31
22766: PUSH
22767: LD_INT 32
22769: PUSH
22770: LD_INT 33
22772: PUSH
22773: LD_INT 34
22775: PUSH
22776: LD_INT 36
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 101
22818: PUSH
22819: LD_INT 102
22821: PUSH
22822: LD_INT 103
22824: PUSH
22825: LD_INT 104
22827: PUSH
22828: LD_INT 105
22830: PUSH
22831: LD_INT 106
22833: PUSH
22834: LD_INT 107
22836: PUSH
22837: LD_INT 108
22839: PUSH
22840: LD_INT 109
22842: PUSH
22843: LD_INT 110
22845: PUSH
22846: LD_INT 111
22848: PUSH
22849: LD_INT 112
22851: PUSH
22852: LD_INT 113
22854: PUSH
22855: LD_INT 114
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: ST_TO_ADDR
22878: GO 23253
22880: LD_INT 18
22882: DOUBLE
22883: EQUAL
22884: IFTRUE 22888
22886: GO 23024
22888: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22889: LD_ADDR_VAR 0 1
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: LD_INT 4
22899: PUSH
22900: LD_INT 5
22902: PUSH
22903: LD_INT 7
22905: PUSH
22906: LD_INT 11
22908: PUSH
22909: LD_INT 12
22911: PUSH
22912: LD_INT 15
22914: PUSH
22915: LD_INT 16
22917: PUSH
22918: LD_INT 20
22920: PUSH
22921: LD_INT 21
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 23
22929: PUSH
22930: LD_INT 25
22932: PUSH
22933: LD_INT 26
22935: PUSH
22936: LD_INT 30
22938: PUSH
22939: LD_INT 31
22941: PUSH
22942: LD_INT 32
22944: PUSH
22945: LD_INT 33
22947: PUSH
22948: LD_INT 34
22950: PUSH
22951: LD_INT 35
22953: PUSH
22954: LD_INT 36
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 101
22982: PUSH
22983: LD_INT 102
22985: PUSH
22986: LD_INT 103
22988: PUSH
22989: LD_INT 106
22991: PUSH
22992: LD_INT 108
22994: PUSH
22995: LD_INT 112
22997: PUSH
22998: LD_INT 113
23000: PUSH
23001: LD_INT 114
23003: PUSH
23004: LD_INT 115
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: ST_TO_ADDR
23022: GO 23253
23024: LD_INT 19
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23252
23032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23033: LD_ADDR_VAR 0 1
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: LD_INT 2
23043: PUSH
23044: LD_INT 3
23046: PUSH
23047: LD_INT 4
23049: PUSH
23050: LD_INT 5
23052: PUSH
23053: LD_INT 6
23055: PUSH
23056: LD_INT 7
23058: PUSH
23059: LD_INT 8
23061: PUSH
23062: LD_INT 9
23064: PUSH
23065: LD_INT 10
23067: PUSH
23068: LD_INT 11
23070: PUSH
23071: LD_INT 12
23073: PUSH
23074: LD_INT 13
23076: PUSH
23077: LD_INT 14
23079: PUSH
23080: LD_INT 15
23082: PUSH
23083: LD_INT 16
23085: PUSH
23086: LD_INT 17
23088: PUSH
23089: LD_INT 18
23091: PUSH
23092: LD_INT 19
23094: PUSH
23095: LD_INT 20
23097: PUSH
23098: LD_INT 21
23100: PUSH
23101: LD_INT 22
23103: PUSH
23104: LD_INT 23
23106: PUSH
23107: LD_INT 24
23109: PUSH
23110: LD_INT 25
23112: PUSH
23113: LD_INT 26
23115: PUSH
23116: LD_INT 27
23118: PUSH
23119: LD_INT 28
23121: PUSH
23122: LD_INT 29
23124: PUSH
23125: LD_INT 30
23127: PUSH
23128: LD_INT 31
23130: PUSH
23131: LD_INT 32
23133: PUSH
23134: LD_INT 33
23136: PUSH
23137: LD_INT 34
23139: PUSH
23140: LD_INT 35
23142: PUSH
23143: LD_INT 36
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 101
23186: PUSH
23187: LD_INT 102
23189: PUSH
23190: LD_INT 103
23192: PUSH
23193: LD_INT 104
23195: PUSH
23196: LD_INT 105
23198: PUSH
23199: LD_INT 106
23201: PUSH
23202: LD_INT 107
23204: PUSH
23205: LD_INT 108
23207: PUSH
23208: LD_INT 109
23210: PUSH
23211: LD_INT 110
23213: PUSH
23214: LD_INT 111
23216: PUSH
23217: LD_INT 112
23219: PUSH
23220: LD_INT 113
23222: PUSH
23223: LD_INT 114
23225: PUSH
23226: LD_INT 115
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: ST_TO_ADDR
23250: GO 23253
23252: POP
// end else
23253: GO 23472
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23255: LD_ADDR_VAR 0 1
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: LD_INT 2
23265: PUSH
23266: LD_INT 3
23268: PUSH
23269: LD_INT 4
23271: PUSH
23272: LD_INT 5
23274: PUSH
23275: LD_INT 6
23277: PUSH
23278: LD_INT 7
23280: PUSH
23281: LD_INT 8
23283: PUSH
23284: LD_INT 9
23286: PUSH
23287: LD_INT 10
23289: PUSH
23290: LD_INT 11
23292: PUSH
23293: LD_INT 12
23295: PUSH
23296: LD_INT 13
23298: PUSH
23299: LD_INT 14
23301: PUSH
23302: LD_INT 15
23304: PUSH
23305: LD_INT 16
23307: PUSH
23308: LD_INT 17
23310: PUSH
23311: LD_INT 18
23313: PUSH
23314: LD_INT 19
23316: PUSH
23317: LD_INT 20
23319: PUSH
23320: LD_INT 21
23322: PUSH
23323: LD_INT 22
23325: PUSH
23326: LD_INT 23
23328: PUSH
23329: LD_INT 24
23331: PUSH
23332: LD_INT 25
23334: PUSH
23335: LD_INT 26
23337: PUSH
23338: LD_INT 27
23340: PUSH
23341: LD_INT 28
23343: PUSH
23344: LD_INT 29
23346: PUSH
23347: LD_INT 30
23349: PUSH
23350: LD_INT 31
23352: PUSH
23353: LD_INT 32
23355: PUSH
23356: LD_INT 33
23358: PUSH
23359: LD_INT 34
23361: PUSH
23362: LD_INT 35
23364: PUSH
23365: LD_INT 36
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 101
23408: PUSH
23409: LD_INT 102
23411: PUSH
23412: LD_INT 103
23414: PUSH
23415: LD_INT 104
23417: PUSH
23418: LD_INT 105
23420: PUSH
23421: LD_INT 106
23423: PUSH
23424: LD_INT 107
23426: PUSH
23427: LD_INT 108
23429: PUSH
23430: LD_INT 109
23432: PUSH
23433: LD_INT 110
23435: PUSH
23436: LD_INT 111
23438: PUSH
23439: LD_INT 112
23441: PUSH
23442: LD_INT 113
23444: PUSH
23445: LD_INT 114
23447: PUSH
23448: LD_INT 115
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: ST_TO_ADDR
// if result then
23472: LD_VAR 0 1
23476: IFFALSE 23765
// begin normal :=  ;
23478: LD_ADDR_VAR 0 3
23482: PUSH
23483: LD_STRING 
23485: ST_TO_ADDR
// hardcore :=  ;
23486: LD_ADDR_VAR 0 4
23490: PUSH
23491: LD_STRING 
23493: ST_TO_ADDR
// for i = 1 to normalCounter do
23494: LD_ADDR_VAR 0 5
23498: PUSH
23499: DOUBLE
23500: LD_INT 1
23502: DEC
23503: ST_TO_ADDR
23504: LD_EXP 78
23508: PUSH
23509: FOR_TO
23510: IFFALSE 23611
// begin tmp := 0 ;
23512: LD_ADDR_VAR 0 2
23516: PUSH
23517: LD_STRING 0
23519: ST_TO_ADDR
// if result [ 1 ] then
23520: LD_VAR 0 1
23524: PUSH
23525: LD_INT 1
23527: ARRAY
23528: IFFALSE 23593
// if result [ 1 ] [ 1 ] = i then
23530: LD_VAR 0 1
23534: PUSH
23535: LD_INT 1
23537: ARRAY
23538: PUSH
23539: LD_INT 1
23541: ARRAY
23542: PUSH
23543: LD_VAR 0 5
23547: EQUAL
23548: IFFALSE 23593
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23550: LD_ADDR_VAR 0 1
23554: PUSH
23555: LD_VAR 0 1
23559: PPUSH
23560: LD_INT 1
23562: PPUSH
23563: LD_VAR 0 1
23567: PUSH
23568: LD_INT 1
23570: ARRAY
23571: PPUSH
23572: LD_INT 1
23574: PPUSH
23575: CALL_OW 3
23579: PPUSH
23580: CALL_OW 1
23584: ST_TO_ADDR
// tmp := 1 ;
23585: LD_ADDR_VAR 0 2
23589: PUSH
23590: LD_STRING 1
23592: ST_TO_ADDR
// end ; normal := normal & tmp ;
23593: LD_ADDR_VAR 0 3
23597: PUSH
23598: LD_VAR 0 3
23602: PUSH
23603: LD_VAR 0 2
23607: STR
23608: ST_TO_ADDR
// end ;
23609: GO 23509
23611: POP
23612: POP
// for i = 1 to hardcoreCounter do
23613: LD_ADDR_VAR 0 5
23617: PUSH
23618: DOUBLE
23619: LD_INT 1
23621: DEC
23622: ST_TO_ADDR
23623: LD_EXP 79
23627: PUSH
23628: FOR_TO
23629: IFFALSE 23734
// begin tmp := 0 ;
23631: LD_ADDR_VAR 0 2
23635: PUSH
23636: LD_STRING 0
23638: ST_TO_ADDR
// if result [ 2 ] then
23639: LD_VAR 0 1
23643: PUSH
23644: LD_INT 2
23646: ARRAY
23647: IFFALSE 23716
// if result [ 2 ] [ 1 ] = 100 + i then
23649: LD_VAR 0 1
23653: PUSH
23654: LD_INT 2
23656: ARRAY
23657: PUSH
23658: LD_INT 1
23660: ARRAY
23661: PUSH
23662: LD_INT 100
23664: PUSH
23665: LD_VAR 0 5
23669: PLUS
23670: EQUAL
23671: IFFALSE 23716
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23673: LD_ADDR_VAR 0 1
23677: PUSH
23678: LD_VAR 0 1
23682: PPUSH
23683: LD_INT 2
23685: PPUSH
23686: LD_VAR 0 1
23690: PUSH
23691: LD_INT 2
23693: ARRAY
23694: PPUSH
23695: LD_INT 1
23697: PPUSH
23698: CALL_OW 3
23702: PPUSH
23703: CALL_OW 1
23707: ST_TO_ADDR
// tmp := 1 ;
23708: LD_ADDR_VAR 0 2
23712: PUSH
23713: LD_STRING 1
23715: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23716: LD_ADDR_VAR 0 4
23720: PUSH
23721: LD_VAR 0 4
23725: PUSH
23726: LD_VAR 0 2
23730: STR
23731: ST_TO_ADDR
// end ;
23732: GO 23628
23734: POP
23735: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23736: LD_STRING getStreamItemsFromMission("
23738: PUSH
23739: LD_VAR 0 3
23743: STR
23744: PUSH
23745: LD_STRING ","
23747: STR
23748: PUSH
23749: LD_VAR 0 4
23753: STR
23754: PUSH
23755: LD_STRING ")
23757: STR
23758: PPUSH
23759: CALL_OW 559
// end else
23763: GO 23772
// ToLua ( getStreamItemsFromMission("","") ) ;
23765: LD_STRING getStreamItemsFromMission("","")
23767: PPUSH
23768: CALL_OW 559
// end ;
23772: LD_VAR 0 1
23776: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23777: LD_EXP 77
23781: PUSH
23782: LD_EXP 82
23786: AND
23787: IFFALSE 23911
23789: GO 23791
23791: DISABLE
23792: LD_INT 0
23794: PPUSH
23795: PPUSH
// begin enable ;
23796: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23797: LD_ADDR_VAR 0 2
23801: PUSH
23802: LD_INT 22
23804: PUSH
23805: LD_OWVAR 2
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 2
23816: PUSH
23817: LD_INT 34
23819: PUSH
23820: LD_INT 7
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 34
23829: PUSH
23830: LD_INT 45
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 34
23839: PUSH
23840: LD_INT 28
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 34
23849: PUSH
23850: LD_INT 47
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PPUSH
23868: CALL_OW 69
23872: ST_TO_ADDR
// if not tmp then
23873: LD_VAR 0 2
23877: NOT
23878: IFFALSE 23882
// exit ;
23880: GO 23911
// for i in tmp do
23882: LD_ADDR_VAR 0 1
23886: PUSH
23887: LD_VAR 0 2
23891: PUSH
23892: FOR_IN
23893: IFFALSE 23909
// begin SetLives ( i , 0 ) ;
23895: LD_VAR 0 1
23899: PPUSH
23900: LD_INT 0
23902: PPUSH
23903: CALL_OW 234
// end ;
23907: GO 23892
23909: POP
23910: POP
// end ;
23911: PPOPN 2
23913: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23914: LD_EXP 77
23918: PUSH
23919: LD_EXP 83
23923: AND
23924: IFFALSE 24008
23926: GO 23928
23928: DISABLE
23929: LD_INT 0
23931: PPUSH
23932: PPUSH
// begin enable ;
23933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23934: LD_ADDR_VAR 0 2
23938: PUSH
23939: LD_INT 22
23941: PUSH
23942: LD_OWVAR 2
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 32
23953: PUSH
23954: LD_INT 3
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PPUSH
23965: CALL_OW 69
23969: ST_TO_ADDR
// if not tmp then
23970: LD_VAR 0 2
23974: NOT
23975: IFFALSE 23979
// exit ;
23977: GO 24008
// for i in tmp do
23979: LD_ADDR_VAR 0 1
23983: PUSH
23984: LD_VAR 0 2
23988: PUSH
23989: FOR_IN
23990: IFFALSE 24006
// begin SetLives ( i , 0 ) ;
23992: LD_VAR 0 1
23996: PPUSH
23997: LD_INT 0
23999: PPUSH
24000: CALL_OW 234
// end ;
24004: GO 23989
24006: POP
24007: POP
// end ;
24008: PPOPN 2
24010: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24011: LD_EXP 77
24015: PUSH
24016: LD_EXP 80
24020: AND
24021: IFFALSE 24114
24023: GO 24025
24025: DISABLE
24026: LD_INT 0
24028: PPUSH
// begin enable ;
24029: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24030: LD_ADDR_VAR 0 1
24034: PUSH
24035: LD_INT 22
24037: PUSH
24038: LD_OWVAR 2
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 25
24052: PUSH
24053: LD_INT 5
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 25
24062: PUSH
24063: LD_INT 9
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 25
24072: PUSH
24073: LD_INT 8
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PPUSH
24090: CALL_OW 69
24094: PUSH
24095: FOR_IN
24096: IFFALSE 24112
// begin SetClass ( i , 1 ) ;
24098: LD_VAR 0 1
24102: PPUSH
24103: LD_INT 1
24105: PPUSH
24106: CALL_OW 336
// end ;
24110: GO 24095
24112: POP
24113: POP
// end ;
24114: PPOPN 1
24116: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24117: LD_EXP 77
24121: PUSH
24122: LD_EXP 81
24126: AND
24127: PUSH
24128: LD_OWVAR 65
24132: PUSH
24133: LD_INT 7
24135: LESS
24136: AND
24137: IFFALSE 24151
24139: GO 24141
24141: DISABLE
// begin enable ;
24142: ENABLE
// game_speed := 7 ;
24143: LD_ADDR_OWVAR 65
24147: PUSH
24148: LD_INT 7
24150: ST_TO_ADDR
// end ;
24151: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24152: LD_EXP 77
24156: PUSH
24157: LD_EXP 84
24161: AND
24162: IFFALSE 24364
24164: GO 24166
24166: DISABLE
24167: LD_INT 0
24169: PPUSH
24170: PPUSH
24171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24172: LD_ADDR_VAR 0 3
24176: PUSH
24177: LD_INT 81
24179: PUSH
24180: LD_OWVAR 2
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 21
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PPUSH
24203: CALL_OW 69
24207: ST_TO_ADDR
// if not tmp then
24208: LD_VAR 0 3
24212: NOT
24213: IFFALSE 24217
// exit ;
24215: GO 24364
// if tmp > 5 then
24217: LD_VAR 0 3
24221: PUSH
24222: LD_INT 5
24224: GREATER
24225: IFFALSE 24237
// k := 5 else
24227: LD_ADDR_VAR 0 2
24231: PUSH
24232: LD_INT 5
24234: ST_TO_ADDR
24235: GO 24247
// k := tmp ;
24237: LD_ADDR_VAR 0 2
24241: PUSH
24242: LD_VAR 0 3
24246: ST_TO_ADDR
// for i := 1 to k do
24247: LD_ADDR_VAR 0 1
24251: PUSH
24252: DOUBLE
24253: LD_INT 1
24255: DEC
24256: ST_TO_ADDR
24257: LD_VAR 0 2
24261: PUSH
24262: FOR_TO
24263: IFFALSE 24362
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24265: LD_VAR 0 3
24269: PUSH
24270: LD_VAR 0 1
24274: ARRAY
24275: PPUSH
24276: LD_VAR 0 1
24280: PUSH
24281: LD_INT 4
24283: MOD
24284: PUSH
24285: LD_INT 1
24287: PLUS
24288: PPUSH
24289: CALL_OW 259
24293: PUSH
24294: LD_INT 10
24296: LESS
24297: IFFALSE 24360
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24299: LD_VAR 0 3
24303: PUSH
24304: LD_VAR 0 1
24308: ARRAY
24309: PPUSH
24310: LD_VAR 0 1
24314: PUSH
24315: LD_INT 4
24317: MOD
24318: PUSH
24319: LD_INT 1
24321: PLUS
24322: PPUSH
24323: LD_VAR 0 3
24327: PUSH
24328: LD_VAR 0 1
24332: ARRAY
24333: PPUSH
24334: LD_VAR 0 1
24338: PUSH
24339: LD_INT 4
24341: MOD
24342: PUSH
24343: LD_INT 1
24345: PLUS
24346: PPUSH
24347: CALL_OW 259
24351: PUSH
24352: LD_INT 1
24354: PLUS
24355: PPUSH
24356: CALL_OW 237
24360: GO 24262
24362: POP
24363: POP
// end ;
24364: PPOPN 3
24366: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24367: LD_EXP 77
24371: PUSH
24372: LD_EXP 85
24376: AND
24377: IFFALSE 24397
24379: GO 24381
24381: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24382: LD_INT 4
24384: PPUSH
24385: LD_OWVAR 2
24389: PPUSH
24390: LD_INT 0
24392: PPUSH
24393: CALL_OW 324
24397: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24398: LD_EXP 77
24402: PUSH
24403: LD_EXP 114
24407: AND
24408: IFFALSE 24428
24410: GO 24412
24412: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24413: LD_INT 19
24415: PPUSH
24416: LD_OWVAR 2
24420: PPUSH
24421: LD_INT 0
24423: PPUSH
24424: CALL_OW 324
24428: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24429: LD_EXP 77
24433: PUSH
24434: LD_EXP 86
24438: AND
24439: IFFALSE 24541
24441: GO 24443
24443: DISABLE
24444: LD_INT 0
24446: PPUSH
24447: PPUSH
// begin enable ;
24448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24449: LD_ADDR_VAR 0 2
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_OWVAR 2
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 2
24468: PUSH
24469: LD_INT 34
24471: PUSH
24472: LD_INT 11
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 34
24481: PUSH
24482: LD_INT 30
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PPUSH
24498: CALL_OW 69
24502: ST_TO_ADDR
// if not tmp then
24503: LD_VAR 0 2
24507: NOT
24508: IFFALSE 24512
// exit ;
24510: GO 24541
// for i in tmp do
24512: LD_ADDR_VAR 0 1
24516: PUSH
24517: LD_VAR 0 2
24521: PUSH
24522: FOR_IN
24523: IFFALSE 24539
// begin SetLives ( i , 0 ) ;
24525: LD_VAR 0 1
24529: PPUSH
24530: LD_INT 0
24532: PPUSH
24533: CALL_OW 234
// end ;
24537: GO 24522
24539: POP
24540: POP
// end ;
24541: PPOPN 2
24543: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24544: LD_EXP 77
24548: PUSH
24549: LD_EXP 87
24553: AND
24554: IFFALSE 24574
24556: GO 24558
24558: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24559: LD_INT 32
24561: PPUSH
24562: LD_OWVAR 2
24566: PPUSH
24567: LD_INT 0
24569: PPUSH
24570: CALL_OW 324
24574: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24575: LD_EXP 77
24579: PUSH
24580: LD_EXP 88
24584: AND
24585: IFFALSE 24766
24587: GO 24589
24589: DISABLE
24590: LD_INT 0
24592: PPUSH
24593: PPUSH
24594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24595: LD_ADDR_VAR 0 2
24599: PUSH
24600: LD_INT 22
24602: PUSH
24603: LD_OWVAR 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 33
24614: PUSH
24615: LD_INT 3
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PPUSH
24626: CALL_OW 69
24630: ST_TO_ADDR
// if not tmp then
24631: LD_VAR 0 2
24635: NOT
24636: IFFALSE 24640
// exit ;
24638: GO 24766
// side := 0 ;
24640: LD_ADDR_VAR 0 3
24644: PUSH
24645: LD_INT 0
24647: ST_TO_ADDR
// for i := 1 to 8 do
24648: LD_ADDR_VAR 0 1
24652: PUSH
24653: DOUBLE
24654: LD_INT 1
24656: DEC
24657: ST_TO_ADDR
24658: LD_INT 8
24660: PUSH
24661: FOR_TO
24662: IFFALSE 24710
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24664: LD_OWVAR 2
24668: PUSH
24669: LD_VAR 0 1
24673: NONEQUAL
24674: PUSH
24675: LD_OWVAR 2
24679: PPUSH
24680: LD_VAR 0 1
24684: PPUSH
24685: CALL_OW 81
24689: PUSH
24690: LD_INT 2
24692: EQUAL
24693: AND
24694: IFFALSE 24708
// begin side := i ;
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: ST_TO_ADDR
// break ;
24706: GO 24710
// end ;
24708: GO 24661
24710: POP
24711: POP
// if not side then
24712: LD_VAR 0 3
24716: NOT
24717: IFFALSE 24721
// exit ;
24719: GO 24766
// for i := 1 to tmp do
24721: LD_ADDR_VAR 0 1
24725: PUSH
24726: DOUBLE
24727: LD_INT 1
24729: DEC
24730: ST_TO_ADDR
24731: LD_VAR 0 2
24735: PUSH
24736: FOR_TO
24737: IFFALSE 24764
// if Prob ( 60 ) then
24739: LD_INT 60
24741: PPUSH
24742: CALL_OW 13
24746: IFFALSE 24762
// SetSide ( i , side ) ;
24748: LD_VAR 0 1
24752: PPUSH
24753: LD_VAR 0 3
24757: PPUSH
24758: CALL_OW 235
24762: GO 24736
24764: POP
24765: POP
// end ;
24766: PPOPN 3
24768: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24769: LD_EXP 77
24773: PUSH
24774: LD_EXP 90
24778: AND
24779: IFFALSE 24898
24781: GO 24783
24783: DISABLE
24784: LD_INT 0
24786: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24787: LD_ADDR_VAR 0 1
24791: PUSH
24792: LD_INT 22
24794: PUSH
24795: LD_OWVAR 2
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 21
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 3
24816: PUSH
24817: LD_INT 23
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 69
24840: PUSH
24841: FOR_IN
24842: IFFALSE 24896
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24844: LD_VAR 0 1
24848: PPUSH
24849: CALL_OW 257
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 3
24862: PUSH
24863: LD_INT 4
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: IN
24872: IFFALSE 24894
// SetClass ( un , rand ( 1 , 4 ) ) ;
24874: LD_VAR 0 1
24878: PPUSH
24879: LD_INT 1
24881: PPUSH
24882: LD_INT 4
24884: PPUSH
24885: CALL_OW 12
24889: PPUSH
24890: CALL_OW 336
24894: GO 24841
24896: POP
24897: POP
// end ;
24898: PPOPN 1
24900: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24901: LD_EXP 77
24905: PUSH
24906: LD_EXP 89
24910: AND
24911: IFFALSE 24990
24913: GO 24915
24915: DISABLE
24916: LD_INT 0
24918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24919: LD_ADDR_VAR 0 1
24923: PUSH
24924: LD_INT 22
24926: PUSH
24927: LD_OWVAR 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 21
24938: PUSH
24939: LD_INT 3
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PPUSH
24950: CALL_OW 69
24954: ST_TO_ADDR
// if not tmp then
24955: LD_VAR 0 1
24959: NOT
24960: IFFALSE 24964
// exit ;
24962: GO 24990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24964: LD_VAR 0 1
24968: PUSH
24969: LD_INT 1
24971: PPUSH
24972: LD_VAR 0 1
24976: PPUSH
24977: CALL_OW 12
24981: ARRAY
24982: PPUSH
24983: LD_INT 100
24985: PPUSH
24986: CALL_OW 234
// end ;
24990: PPOPN 1
24992: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24993: LD_EXP 77
24997: PUSH
24998: LD_EXP 91
25002: AND
25003: IFFALSE 25101
25005: GO 25007
25007: DISABLE
25008: LD_INT 0
25010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25011: LD_ADDR_VAR 0 1
25015: PUSH
25016: LD_INT 22
25018: PUSH
25019: LD_OWVAR 2
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 21
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PPUSH
25042: CALL_OW 69
25046: ST_TO_ADDR
// if not tmp then
25047: LD_VAR 0 1
25051: NOT
25052: IFFALSE 25056
// exit ;
25054: GO 25101
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25056: LD_VAR 0 1
25060: PUSH
25061: LD_INT 1
25063: PPUSH
25064: LD_VAR 0 1
25068: PPUSH
25069: CALL_OW 12
25073: ARRAY
25074: PPUSH
25075: LD_INT 1
25077: PPUSH
25078: LD_INT 4
25080: PPUSH
25081: CALL_OW 12
25085: PPUSH
25086: LD_INT 3000
25088: PPUSH
25089: LD_INT 9000
25091: PPUSH
25092: CALL_OW 12
25096: PPUSH
25097: CALL_OW 492
// end ;
25101: PPOPN 1
25103: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25104: LD_EXP 77
25108: PUSH
25109: LD_EXP 92
25113: AND
25114: IFFALSE 25134
25116: GO 25118
25118: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25119: LD_INT 1
25121: PPUSH
25122: LD_OWVAR 2
25126: PPUSH
25127: LD_INT 0
25129: PPUSH
25130: CALL_OW 324
25134: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25135: LD_EXP 77
25139: PUSH
25140: LD_EXP 93
25144: AND
25145: IFFALSE 25228
25147: GO 25149
25149: DISABLE
25150: LD_INT 0
25152: PPUSH
25153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25154: LD_ADDR_VAR 0 2
25158: PUSH
25159: LD_INT 22
25161: PUSH
25162: LD_OWVAR 2
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 69
25189: ST_TO_ADDR
// if not tmp then
25190: LD_VAR 0 2
25194: NOT
25195: IFFALSE 25199
// exit ;
25197: GO 25228
// for i in tmp do
25199: LD_ADDR_VAR 0 1
25203: PUSH
25204: LD_VAR 0 2
25208: PUSH
25209: FOR_IN
25210: IFFALSE 25226
// SetBLevel ( i , 10 ) ;
25212: LD_VAR 0 1
25216: PPUSH
25217: LD_INT 10
25219: PPUSH
25220: CALL_OW 241
25224: GO 25209
25226: POP
25227: POP
// end ;
25228: PPOPN 2
25230: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25231: LD_EXP 77
25235: PUSH
25236: LD_EXP 94
25240: AND
25241: IFFALSE 25352
25243: GO 25245
25245: DISABLE
25246: LD_INT 0
25248: PPUSH
25249: PPUSH
25250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25251: LD_ADDR_VAR 0 3
25255: PUSH
25256: LD_INT 22
25258: PUSH
25259: LD_OWVAR 2
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 25
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PPUSH
25282: CALL_OW 69
25286: ST_TO_ADDR
// if not tmp then
25287: LD_VAR 0 3
25291: NOT
25292: IFFALSE 25296
// exit ;
25294: GO 25352
// un := tmp [ rand ( 1 , tmp ) ] ;
25296: LD_ADDR_VAR 0 2
25300: PUSH
25301: LD_VAR 0 3
25305: PUSH
25306: LD_INT 1
25308: PPUSH
25309: LD_VAR 0 3
25313: PPUSH
25314: CALL_OW 12
25318: ARRAY
25319: ST_TO_ADDR
// if Crawls ( un ) then
25320: LD_VAR 0 2
25324: PPUSH
25325: CALL_OW 318
25329: IFFALSE 25340
// ComWalk ( un ) ;
25331: LD_VAR 0 2
25335: PPUSH
25336: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25340: LD_VAR 0 2
25344: PPUSH
25345: LD_INT 5
25347: PPUSH
25348: CALL_OW 336
// end ;
25352: PPOPN 3
25354: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25355: LD_EXP 77
25359: PUSH
25360: LD_EXP 95
25364: AND
25365: PUSH
25366: LD_OWVAR 67
25370: PUSH
25371: LD_INT 3
25373: LESS
25374: AND
25375: IFFALSE 25394
25377: GO 25379
25379: DISABLE
// Difficulty := Difficulty + 1 ;
25380: LD_ADDR_OWVAR 67
25384: PUSH
25385: LD_OWVAR 67
25389: PUSH
25390: LD_INT 1
25392: PLUS
25393: ST_TO_ADDR
25394: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25395: LD_EXP 77
25399: PUSH
25400: LD_EXP 96
25404: AND
25405: IFFALSE 25508
25407: GO 25409
25409: DISABLE
25410: LD_INT 0
25412: PPUSH
// begin for i := 1 to 5 do
25413: LD_ADDR_VAR 0 1
25417: PUSH
25418: DOUBLE
25419: LD_INT 1
25421: DEC
25422: ST_TO_ADDR
25423: LD_INT 5
25425: PUSH
25426: FOR_TO
25427: IFFALSE 25506
// begin uc_nation := nation_nature ;
25429: LD_ADDR_OWVAR 21
25433: PUSH
25434: LD_INT 0
25436: ST_TO_ADDR
// uc_side := 0 ;
25437: LD_ADDR_OWVAR 20
25441: PUSH
25442: LD_INT 0
25444: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25445: LD_ADDR_OWVAR 29
25449: PUSH
25450: LD_INT 12
25452: PUSH
25453: LD_INT 12
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: ST_TO_ADDR
// hc_agressivity := 20 ;
25460: LD_ADDR_OWVAR 35
25464: PUSH
25465: LD_INT 20
25467: ST_TO_ADDR
// hc_class := class_tiger ;
25468: LD_ADDR_OWVAR 28
25472: PUSH
25473: LD_INT 14
25475: ST_TO_ADDR
// hc_gallery :=  ;
25476: LD_ADDR_OWVAR 33
25480: PUSH
25481: LD_STRING 
25483: ST_TO_ADDR
// hc_name :=  ;
25484: LD_ADDR_OWVAR 26
25488: PUSH
25489: LD_STRING 
25491: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25492: CALL_OW 44
25496: PPUSH
25497: LD_INT 0
25499: PPUSH
25500: CALL_OW 51
// end ;
25504: GO 25426
25506: POP
25507: POP
// end ;
25508: PPOPN 1
25510: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25511: LD_EXP 77
25515: PUSH
25516: LD_EXP 97
25520: AND
25521: IFFALSE 25530
25523: GO 25525
25525: DISABLE
// StreamSibBomb ;
25526: CALL 25531 0 0
25530: END
// export function StreamSibBomb ; var i , x , y ; begin
25531: LD_INT 0
25533: PPUSH
25534: PPUSH
25535: PPUSH
25536: PPUSH
// result := false ;
25537: LD_ADDR_VAR 0 1
25541: PUSH
25542: LD_INT 0
25544: ST_TO_ADDR
// for i := 1 to 16 do
25545: LD_ADDR_VAR 0 2
25549: PUSH
25550: DOUBLE
25551: LD_INT 1
25553: DEC
25554: ST_TO_ADDR
25555: LD_INT 16
25557: PUSH
25558: FOR_TO
25559: IFFALSE 25758
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25561: LD_ADDR_VAR 0 3
25565: PUSH
25566: LD_INT 10
25568: PUSH
25569: LD_INT 20
25571: PUSH
25572: LD_INT 30
25574: PUSH
25575: LD_INT 40
25577: PUSH
25578: LD_INT 50
25580: PUSH
25581: LD_INT 60
25583: PUSH
25584: LD_INT 70
25586: PUSH
25587: LD_INT 80
25589: PUSH
25590: LD_INT 90
25592: PUSH
25593: LD_INT 100
25595: PUSH
25596: LD_INT 110
25598: PUSH
25599: LD_INT 120
25601: PUSH
25602: LD_INT 130
25604: PUSH
25605: LD_INT 140
25607: PUSH
25608: LD_INT 150
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: PPUSH
25631: LD_INT 15
25633: PPUSH
25634: CALL_OW 12
25638: ARRAY
25639: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25640: LD_ADDR_VAR 0 4
25644: PUSH
25645: LD_INT 10
25647: PUSH
25648: LD_INT 20
25650: PUSH
25651: LD_INT 30
25653: PUSH
25654: LD_INT 40
25656: PUSH
25657: LD_INT 50
25659: PUSH
25660: LD_INT 60
25662: PUSH
25663: LD_INT 70
25665: PUSH
25666: LD_INT 80
25668: PUSH
25669: LD_INT 90
25671: PUSH
25672: LD_INT 100
25674: PUSH
25675: LD_INT 110
25677: PUSH
25678: LD_INT 120
25680: PUSH
25681: LD_INT 130
25683: PUSH
25684: LD_INT 140
25686: PUSH
25687: LD_INT 150
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PPUSH
25710: LD_INT 15
25712: PPUSH
25713: CALL_OW 12
25717: ARRAY
25718: ST_TO_ADDR
// if ValidHex ( x , y ) then
25719: LD_VAR 0 3
25723: PPUSH
25724: LD_VAR 0 4
25728: PPUSH
25729: CALL_OW 488
25733: IFFALSE 25756
// begin result := [ x , y ] ;
25735: LD_ADDR_VAR 0 1
25739: PUSH
25740: LD_VAR 0 3
25744: PUSH
25745: LD_VAR 0 4
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: ST_TO_ADDR
// break ;
25754: GO 25758
// end ; end ;
25756: GO 25558
25758: POP
25759: POP
// if result then
25760: LD_VAR 0 1
25764: IFFALSE 25824
// begin ToLua ( playSibBomb() ) ;
25766: LD_STRING playSibBomb()
25768: PPUSH
25769: CALL_OW 559
// wait ( 0 0$14 ) ;
25773: LD_INT 490
25775: PPUSH
25776: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25780: LD_VAR 0 1
25784: PUSH
25785: LD_INT 1
25787: ARRAY
25788: PPUSH
25789: LD_VAR 0 1
25793: PUSH
25794: LD_INT 2
25796: ARRAY
25797: PPUSH
25798: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25802: LD_VAR 0 1
25806: PUSH
25807: LD_INT 1
25809: ARRAY
25810: PPUSH
25811: LD_VAR 0 1
25815: PUSH
25816: LD_INT 2
25818: ARRAY
25819: PPUSH
25820: CALL_OW 429
// end ; end ;
25824: LD_VAR 0 1
25828: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25829: LD_EXP 77
25833: PUSH
25834: LD_EXP 99
25838: AND
25839: IFFALSE 25851
25841: GO 25843
25843: DISABLE
// YouLost (  ) ;
25844: LD_STRING 
25846: PPUSH
25847: CALL_OW 104
25851: END
// every 0 0$1 trigger StreamModeActive and sFog do
25852: LD_EXP 77
25856: PUSH
25857: LD_EXP 98
25861: AND
25862: IFFALSE 25876
25864: GO 25866
25866: DISABLE
// FogOff ( your_side ) ;
25867: LD_OWVAR 2
25871: PPUSH
25872: CALL_OW 344
25876: END
// every 0 0$1 trigger StreamModeActive and sSun do
25877: LD_EXP 77
25881: PUSH
25882: LD_EXP 100
25886: AND
25887: IFFALSE 25915
25889: GO 25891
25891: DISABLE
// begin solar_recharge_percent := 0 ;
25892: LD_ADDR_OWVAR 79
25896: PUSH
25897: LD_INT 0
25899: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25900: LD_INT 10500
25902: PPUSH
25903: CALL_OW 67
// solar_recharge_percent := 100 ;
25907: LD_ADDR_OWVAR 79
25911: PUSH
25912: LD_INT 100
25914: ST_TO_ADDR
// end ;
25915: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25916: LD_EXP 77
25920: PUSH
25921: LD_EXP 101
25925: AND
25926: IFFALSE 26165
25928: GO 25930
25930: DISABLE
25931: LD_INT 0
25933: PPUSH
25934: PPUSH
25935: PPUSH
// begin tmp := [ ] ;
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: EMPTY
25942: ST_TO_ADDR
// for i := 1 to 6 do
25943: LD_ADDR_VAR 0 1
25947: PUSH
25948: DOUBLE
25949: LD_INT 1
25951: DEC
25952: ST_TO_ADDR
25953: LD_INT 6
25955: PUSH
25956: FOR_TO
25957: IFFALSE 26062
// begin uc_nation := nation_nature ;
25959: LD_ADDR_OWVAR 21
25963: PUSH
25964: LD_INT 0
25966: ST_TO_ADDR
// uc_side := 0 ;
25967: LD_ADDR_OWVAR 20
25971: PUSH
25972: LD_INT 0
25974: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25975: LD_ADDR_OWVAR 29
25979: PUSH
25980: LD_INT 12
25982: PUSH
25983: LD_INT 12
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: ST_TO_ADDR
// hc_agressivity := 20 ;
25990: LD_ADDR_OWVAR 35
25994: PUSH
25995: LD_INT 20
25997: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25998: LD_ADDR_OWVAR 28
26002: PUSH
26003: LD_INT 17
26005: ST_TO_ADDR
// hc_gallery :=  ;
26006: LD_ADDR_OWVAR 33
26010: PUSH
26011: LD_STRING 
26013: ST_TO_ADDR
// hc_name :=  ;
26014: LD_ADDR_OWVAR 26
26018: PUSH
26019: LD_STRING 
26021: ST_TO_ADDR
// un := CreateHuman ;
26022: LD_ADDR_VAR 0 2
26026: PUSH
26027: CALL_OW 44
26031: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26032: LD_VAR 0 2
26036: PPUSH
26037: LD_INT 1
26039: PPUSH
26040: CALL_OW 51
// tmp := tmp ^ un ;
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_VAR 0 3
26053: PUSH
26054: LD_VAR 0 2
26058: ADD
26059: ST_TO_ADDR
// end ;
26060: GO 25956
26062: POP
26063: POP
// repeat wait ( 0 0$1 ) ;
26064: LD_INT 35
26066: PPUSH
26067: CALL_OW 67
// for un in tmp do
26071: LD_ADDR_VAR 0 2
26075: PUSH
26076: LD_VAR 0 3
26080: PUSH
26081: FOR_IN
26082: IFFALSE 26156
// begin if IsDead ( un ) then
26084: LD_VAR 0 2
26088: PPUSH
26089: CALL_OW 301
26093: IFFALSE 26113
// begin tmp := tmp diff un ;
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: LD_VAR 0 3
26104: PUSH
26105: LD_VAR 0 2
26109: DIFF
26110: ST_TO_ADDR
// continue ;
26111: GO 26081
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26113: LD_VAR 0 2
26117: PPUSH
26118: LD_INT 3
26120: PUSH
26121: LD_INT 22
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PPUSH
26135: CALL_OW 69
26139: PPUSH
26140: LD_VAR 0 2
26144: PPUSH
26145: CALL_OW 74
26149: PPUSH
26150: CALL_OW 115
// end ;
26154: GO 26081
26156: POP
26157: POP
// until not tmp ;
26158: LD_VAR 0 3
26162: NOT
26163: IFFALSE 26064
// end ;
26165: PPOPN 3
26167: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26168: LD_EXP 77
26172: PUSH
26173: LD_EXP 102
26177: AND
26178: IFFALSE 26232
26180: GO 26182
26182: DISABLE
// begin ToLua ( displayTroll(); ) ;
26183: LD_STRING displayTroll();
26185: PPUSH
26186: CALL_OW 559
// wait ( 3 3$00 ) ;
26190: LD_INT 6300
26192: PPUSH
26193: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26197: LD_STRING hideTroll();
26199: PPUSH
26200: CALL_OW 559
// wait ( 1 1$00 ) ;
26204: LD_INT 2100
26206: PPUSH
26207: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26211: LD_STRING displayTroll();
26213: PPUSH
26214: CALL_OW 559
// wait ( 1 1$00 ) ;
26218: LD_INT 2100
26220: PPUSH
26221: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26225: LD_STRING hideTroll();
26227: PPUSH
26228: CALL_OW 559
// end ;
26232: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26233: LD_EXP 77
26237: PUSH
26238: LD_EXP 103
26242: AND
26243: IFFALSE 26306
26245: GO 26247
26247: DISABLE
26248: LD_INT 0
26250: PPUSH
// begin p := 0 ;
26251: LD_ADDR_VAR 0 1
26255: PUSH
26256: LD_INT 0
26258: ST_TO_ADDR
// repeat game_speed := 1 ;
26259: LD_ADDR_OWVAR 65
26263: PUSH
26264: LD_INT 1
26266: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26267: LD_INT 35
26269: PPUSH
26270: CALL_OW 67
// p := p + 1 ;
26274: LD_ADDR_VAR 0 1
26278: PUSH
26279: LD_VAR 0 1
26283: PUSH
26284: LD_INT 1
26286: PLUS
26287: ST_TO_ADDR
// until p >= 60 ;
26288: LD_VAR 0 1
26292: PUSH
26293: LD_INT 60
26295: GREATEREQUAL
26296: IFFALSE 26259
// game_speed := 4 ;
26298: LD_ADDR_OWVAR 65
26302: PUSH
26303: LD_INT 4
26305: ST_TO_ADDR
// end ;
26306: PPOPN 1
26308: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26309: LD_EXP 77
26313: PUSH
26314: LD_EXP 104
26318: AND
26319: IFFALSE 26465
26321: GO 26323
26323: DISABLE
26324: LD_INT 0
26326: PPUSH
26327: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26328: LD_ADDR_VAR 0 1
26332: PUSH
26333: LD_INT 22
26335: PUSH
26336: LD_OWVAR 2
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 2
26347: PUSH
26348: LD_INT 30
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 30
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PPUSH
26377: CALL_OW 69
26381: ST_TO_ADDR
// if not depot then
26382: LD_VAR 0 1
26386: NOT
26387: IFFALSE 26391
// exit ;
26389: GO 26465
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26391: LD_ADDR_VAR 0 2
26395: PUSH
26396: LD_VAR 0 1
26400: PUSH
26401: LD_INT 1
26403: PPUSH
26404: LD_VAR 0 1
26408: PPUSH
26409: CALL_OW 12
26413: ARRAY
26414: PPUSH
26415: CALL_OW 274
26419: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26420: LD_VAR 0 2
26424: PPUSH
26425: LD_INT 1
26427: PPUSH
26428: LD_INT 0
26430: PPUSH
26431: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26435: LD_VAR 0 2
26439: PPUSH
26440: LD_INT 2
26442: PPUSH
26443: LD_INT 0
26445: PPUSH
26446: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26450: LD_VAR 0 2
26454: PPUSH
26455: LD_INT 3
26457: PPUSH
26458: LD_INT 0
26460: PPUSH
26461: CALL_OW 277
// end ;
26465: PPOPN 2
26467: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26468: LD_EXP 77
26472: PUSH
26473: LD_EXP 105
26477: AND
26478: IFFALSE 26575
26480: GO 26482
26482: DISABLE
26483: LD_INT 0
26485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26486: LD_ADDR_VAR 0 1
26490: PUSH
26491: LD_INT 22
26493: PUSH
26494: LD_OWVAR 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 21
26505: PUSH
26506: LD_INT 1
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 3
26515: PUSH
26516: LD_INT 23
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: PPUSH
26535: CALL_OW 69
26539: ST_TO_ADDR
// if not tmp then
26540: LD_VAR 0 1
26544: NOT
26545: IFFALSE 26549
// exit ;
26547: GO 26575
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26549: LD_VAR 0 1
26553: PUSH
26554: LD_INT 1
26556: PPUSH
26557: LD_VAR 0 1
26561: PPUSH
26562: CALL_OW 12
26566: ARRAY
26567: PPUSH
26568: LD_INT 200
26570: PPUSH
26571: CALL_OW 234
// end ;
26575: PPOPN 1
26577: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26578: LD_EXP 77
26582: PUSH
26583: LD_EXP 106
26587: AND
26588: IFFALSE 26667
26590: GO 26592
26592: DISABLE
26593: LD_INT 0
26595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26596: LD_ADDR_VAR 0 1
26600: PUSH
26601: LD_INT 22
26603: PUSH
26604: LD_OWVAR 2
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 21
26615: PUSH
26616: LD_INT 2
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PPUSH
26627: CALL_OW 69
26631: ST_TO_ADDR
// if not tmp then
26632: LD_VAR 0 1
26636: NOT
26637: IFFALSE 26641
// exit ;
26639: GO 26667
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26641: LD_VAR 0 1
26645: PUSH
26646: LD_INT 1
26648: PPUSH
26649: LD_VAR 0 1
26653: PPUSH
26654: CALL_OW 12
26658: ARRAY
26659: PPUSH
26660: LD_INT 60
26662: PPUSH
26663: CALL_OW 234
// end ;
26667: PPOPN 1
26669: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26670: LD_EXP 77
26674: PUSH
26675: LD_EXP 107
26679: AND
26680: IFFALSE 26779
26682: GO 26684
26684: DISABLE
26685: LD_INT 0
26687: PPUSH
26688: PPUSH
// begin enable ;
26689: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26690: LD_ADDR_VAR 0 1
26694: PUSH
26695: LD_INT 22
26697: PUSH
26698: LD_OWVAR 2
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 61
26709: PUSH
26710: EMPTY
26711: LIST
26712: PUSH
26713: LD_INT 33
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: LIST
26727: PPUSH
26728: CALL_OW 69
26732: ST_TO_ADDR
// if not tmp then
26733: LD_VAR 0 1
26737: NOT
26738: IFFALSE 26742
// exit ;
26740: GO 26779
// for i in tmp do
26742: LD_ADDR_VAR 0 2
26746: PUSH
26747: LD_VAR 0 1
26751: PUSH
26752: FOR_IN
26753: IFFALSE 26777
// if IsControledBy ( i ) then
26755: LD_VAR 0 2
26759: PPUSH
26760: CALL_OW 312
26764: IFFALSE 26775
// ComUnlink ( i ) ;
26766: LD_VAR 0 2
26770: PPUSH
26771: CALL_OW 136
26775: GO 26752
26777: POP
26778: POP
// end ;
26779: PPOPN 2
26781: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26782: LD_EXP 77
26786: PUSH
26787: LD_EXP 108
26791: AND
26792: IFFALSE 26932
26794: GO 26796
26796: DISABLE
26797: LD_INT 0
26799: PPUSH
26800: PPUSH
// begin ToLua ( displayPowell(); ) ;
26801: LD_STRING displayPowell();
26803: PPUSH
26804: CALL_OW 559
// uc_side := 0 ;
26808: LD_ADDR_OWVAR 20
26812: PUSH
26813: LD_INT 0
26815: ST_TO_ADDR
// uc_nation := 2 ;
26816: LD_ADDR_OWVAR 21
26820: PUSH
26821: LD_INT 2
26823: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26824: LD_ADDR_OWVAR 37
26828: PUSH
26829: LD_INT 14
26831: ST_TO_ADDR
// vc_engine := engine_siberite ;
26832: LD_ADDR_OWVAR 39
26836: PUSH
26837: LD_INT 3
26839: ST_TO_ADDR
// vc_control := control_apeman ;
26840: LD_ADDR_OWVAR 38
26844: PUSH
26845: LD_INT 5
26847: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26848: LD_ADDR_OWVAR 40
26852: PUSH
26853: LD_INT 29
26855: ST_TO_ADDR
// un := CreateVehicle ;
26856: LD_ADDR_VAR 0 2
26860: PUSH
26861: CALL_OW 45
26865: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26866: LD_VAR 0 2
26870: PPUSH
26871: LD_INT 1
26873: PPUSH
26874: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26878: LD_INT 35
26880: PPUSH
26881: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26885: LD_VAR 0 2
26889: PPUSH
26890: LD_INT 22
26892: PUSH
26893: LD_OWVAR 2
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PPUSH
26902: CALL_OW 69
26906: PPUSH
26907: LD_VAR 0 2
26911: PPUSH
26912: CALL_OW 74
26916: PPUSH
26917: CALL_OW 115
// until IsDead ( un ) ;
26921: LD_VAR 0 2
26925: PPUSH
26926: CALL_OW 301
26930: IFFALSE 26878
// end ;
26932: PPOPN 2
26934: END
// every 0 0$1 trigger StreamModeActive and sStu do
26935: LD_EXP 77
26939: PUSH
26940: LD_EXP 116
26944: AND
26945: IFFALSE 26961
26947: GO 26949
26949: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26950: LD_STRING displayStucuk();
26952: PPUSH
26953: CALL_OW 559
// ResetFog ;
26957: CALL_OW 335
// end ;
26961: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26962: LD_EXP 77
26966: PUSH
26967: LD_EXP 109
26971: AND
26972: IFFALSE 27113
26974: GO 26976
26976: DISABLE
26977: LD_INT 0
26979: PPUSH
26980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26981: LD_ADDR_VAR 0 2
26985: PUSH
26986: LD_INT 22
26988: PUSH
26989: LD_OWVAR 2
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 21
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PPUSH
27012: CALL_OW 69
27016: ST_TO_ADDR
// if not tmp then
27017: LD_VAR 0 2
27021: NOT
27022: IFFALSE 27026
// exit ;
27024: GO 27113
// un := tmp [ rand ( 1 , tmp ) ] ;
27026: LD_ADDR_VAR 0 1
27030: PUSH
27031: LD_VAR 0 2
27035: PUSH
27036: LD_INT 1
27038: PPUSH
27039: LD_VAR 0 2
27043: PPUSH
27044: CALL_OW 12
27048: ARRAY
27049: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27050: LD_VAR 0 1
27054: PPUSH
27055: LD_INT 0
27057: PPUSH
27058: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27062: LD_VAR 0 1
27066: PPUSH
27067: LD_OWVAR 3
27071: PUSH
27072: LD_VAR 0 1
27076: DIFF
27077: PPUSH
27078: LD_VAR 0 1
27082: PPUSH
27083: CALL_OW 74
27087: PPUSH
27088: CALL_OW 115
// wait ( 0 0$20 ) ;
27092: LD_INT 700
27094: PPUSH
27095: CALL_OW 67
// SetSide ( un , your_side ) ;
27099: LD_VAR 0 1
27103: PPUSH
27104: LD_OWVAR 2
27108: PPUSH
27109: CALL_OW 235
// end ;
27113: PPOPN 2
27115: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27116: LD_EXP 77
27120: PUSH
27121: LD_EXP 110
27125: AND
27126: IFFALSE 27232
27128: GO 27130
27130: DISABLE
27131: LD_INT 0
27133: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27134: LD_ADDR_VAR 0 1
27138: PUSH
27139: LD_INT 22
27141: PUSH
27142: LD_OWVAR 2
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: LD_INT 30
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 30
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PPUSH
27183: CALL_OW 69
27187: ST_TO_ADDR
// if not depot then
27188: LD_VAR 0 1
27192: NOT
27193: IFFALSE 27197
// exit ;
27195: GO 27232
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27197: LD_VAR 0 1
27201: PUSH
27202: LD_INT 1
27204: ARRAY
27205: PPUSH
27206: CALL_OW 250
27210: PPUSH
27211: LD_VAR 0 1
27215: PUSH
27216: LD_INT 1
27218: ARRAY
27219: PPUSH
27220: CALL_OW 251
27224: PPUSH
27225: LD_INT 70
27227: PPUSH
27228: CALL_OW 495
// end ;
27232: PPOPN 1
27234: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27235: LD_EXP 77
27239: PUSH
27240: LD_EXP 111
27244: AND
27245: IFFALSE 27456
27247: GO 27249
27249: DISABLE
27250: LD_INT 0
27252: PPUSH
27253: PPUSH
27254: PPUSH
27255: PPUSH
27256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27257: LD_ADDR_VAR 0 5
27261: PUSH
27262: LD_INT 22
27264: PUSH
27265: LD_OWVAR 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 21
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 69
27292: ST_TO_ADDR
// if not tmp then
27293: LD_VAR 0 5
27297: NOT
27298: IFFALSE 27302
// exit ;
27300: GO 27456
// for i in tmp do
27302: LD_ADDR_VAR 0 1
27306: PUSH
27307: LD_VAR 0 5
27311: PUSH
27312: FOR_IN
27313: IFFALSE 27454
// begin d := rand ( 0 , 5 ) ;
27315: LD_ADDR_VAR 0 4
27319: PUSH
27320: LD_INT 0
27322: PPUSH
27323: LD_INT 5
27325: PPUSH
27326: CALL_OW 12
27330: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: LD_VAR 0 1
27340: PPUSH
27341: CALL_OW 250
27345: PPUSH
27346: LD_VAR 0 4
27350: PPUSH
27351: LD_INT 3
27353: PPUSH
27354: LD_INT 12
27356: PPUSH
27357: CALL_OW 12
27361: PPUSH
27362: CALL_OW 272
27366: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27367: LD_ADDR_VAR 0 3
27371: PUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 251
27381: PPUSH
27382: LD_VAR 0 4
27386: PPUSH
27387: LD_INT 3
27389: PPUSH
27390: LD_INT 12
27392: PPUSH
27393: CALL_OW 12
27397: PPUSH
27398: CALL_OW 273
27402: ST_TO_ADDR
// if ValidHex ( x , y ) then
27403: LD_VAR 0 2
27407: PPUSH
27408: LD_VAR 0 3
27412: PPUSH
27413: CALL_OW 488
27417: IFFALSE 27452
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27419: LD_VAR 0 1
27423: PPUSH
27424: LD_VAR 0 2
27428: PPUSH
27429: LD_VAR 0 3
27433: PPUSH
27434: LD_INT 3
27436: PPUSH
27437: LD_INT 6
27439: PPUSH
27440: CALL_OW 12
27444: PPUSH
27445: LD_INT 1
27447: PPUSH
27448: CALL_OW 483
// end ;
27452: GO 27312
27454: POP
27455: POP
// end ;
27456: PPOPN 5
27458: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27459: LD_EXP 77
27463: PUSH
27464: LD_EXP 112
27468: AND
27469: IFFALSE 27563
27471: GO 27473
27473: DISABLE
27474: LD_INT 0
27476: PPUSH
27477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27478: LD_ADDR_VAR 0 2
27482: PUSH
27483: LD_INT 22
27485: PUSH
27486: LD_OWVAR 2
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 32
27497: PUSH
27498: LD_INT 1
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 21
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: PPUSH
27520: CALL_OW 69
27524: ST_TO_ADDR
// if not tmp then
27525: LD_VAR 0 2
27529: NOT
27530: IFFALSE 27534
// exit ;
27532: GO 27563
// for i in tmp do
27534: LD_ADDR_VAR 0 1
27538: PUSH
27539: LD_VAR 0 2
27543: PUSH
27544: FOR_IN
27545: IFFALSE 27561
// SetFuel ( i , 0 ) ;
27547: LD_VAR 0 1
27551: PPUSH
27552: LD_INT 0
27554: PPUSH
27555: CALL_OW 240
27559: GO 27544
27561: POP
27562: POP
// end ;
27563: PPOPN 2
27565: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27566: LD_EXP 77
27570: PUSH
27571: LD_EXP 113
27575: AND
27576: IFFALSE 27642
27578: GO 27580
27580: DISABLE
27581: LD_INT 0
27583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27584: LD_ADDR_VAR 0 1
27588: PUSH
27589: LD_INT 22
27591: PUSH
27592: LD_OWVAR 2
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 30
27603: PUSH
27604: LD_INT 29
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PPUSH
27615: CALL_OW 69
27619: ST_TO_ADDR
// if not tmp then
27620: LD_VAR 0 1
27624: NOT
27625: IFFALSE 27629
// exit ;
27627: GO 27642
// DestroyUnit ( tmp [ 1 ] ) ;
27629: LD_VAR 0 1
27633: PUSH
27634: LD_INT 1
27636: ARRAY
27637: PPUSH
27638: CALL_OW 65
// end ;
27642: PPOPN 1
27644: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27645: LD_EXP 77
27649: PUSH
27650: LD_EXP 115
27654: AND
27655: IFFALSE 27784
27657: GO 27659
27659: DISABLE
27660: LD_INT 0
27662: PPUSH
// begin uc_side := 0 ;
27663: LD_ADDR_OWVAR 20
27667: PUSH
27668: LD_INT 0
27670: ST_TO_ADDR
// uc_nation := nation_arabian ;
27671: LD_ADDR_OWVAR 21
27675: PUSH
27676: LD_INT 2
27678: ST_TO_ADDR
// hc_gallery :=  ;
27679: LD_ADDR_OWVAR 33
27683: PUSH
27684: LD_STRING 
27686: ST_TO_ADDR
// hc_name :=  ;
27687: LD_ADDR_OWVAR 26
27691: PUSH
27692: LD_STRING 
27694: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27695: LD_INT 1
27697: PPUSH
27698: LD_INT 11
27700: PPUSH
27701: LD_INT 10
27703: PPUSH
27704: CALL_OW 380
// un := CreateHuman ;
27708: LD_ADDR_VAR 0 1
27712: PUSH
27713: CALL_OW 44
27717: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27718: LD_VAR 0 1
27722: PPUSH
27723: LD_INT 1
27725: PPUSH
27726: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27730: LD_INT 35
27732: PPUSH
27733: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27737: LD_VAR 0 1
27741: PPUSH
27742: LD_INT 22
27744: PUSH
27745: LD_OWVAR 2
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PPUSH
27754: CALL_OW 69
27758: PPUSH
27759: LD_VAR 0 1
27763: PPUSH
27764: CALL_OW 74
27768: PPUSH
27769: CALL_OW 115
// until IsDead ( un ) ;
27773: LD_VAR 0 1
27777: PPUSH
27778: CALL_OW 301
27782: IFFALSE 27730
// end ;
27784: PPOPN 1
27786: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27787: LD_EXP 77
27791: PUSH
27792: LD_EXP 117
27796: AND
27797: IFFALSE 27809
27799: GO 27801
27801: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27802: LD_STRING earthquake(getX(game), 0, 32)
27804: PPUSH
27805: CALL_OW 559
27809: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27810: LD_EXP 77
27814: PUSH
27815: LD_EXP 118
27819: AND
27820: IFFALSE 27911
27822: GO 27824
27824: DISABLE
27825: LD_INT 0
27827: PPUSH
// begin enable ;
27828: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27829: LD_ADDR_VAR 0 1
27833: PUSH
27834: LD_INT 22
27836: PUSH
27837: LD_OWVAR 2
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 21
27848: PUSH
27849: LD_INT 2
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 33
27858: PUSH
27859: LD_INT 3
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: LIST
27870: PPUSH
27871: CALL_OW 69
27875: ST_TO_ADDR
// if not tmp then
27876: LD_VAR 0 1
27880: NOT
27881: IFFALSE 27885
// exit ;
27883: GO 27911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27885: LD_VAR 0 1
27889: PUSH
27890: LD_INT 1
27892: PPUSH
27893: LD_VAR 0 1
27897: PPUSH
27898: CALL_OW 12
27902: ARRAY
27903: PPUSH
27904: LD_INT 1
27906: PPUSH
27907: CALL_OW 234
// end ;
27911: PPOPN 1
27913: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27914: LD_EXP 77
27918: PUSH
27919: LD_EXP 119
27923: AND
27924: IFFALSE 28065
27926: GO 27928
27928: DISABLE
27929: LD_INT 0
27931: PPUSH
27932: PPUSH
27933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27934: LD_ADDR_VAR 0 3
27938: PUSH
27939: LD_INT 22
27941: PUSH
27942: LD_OWVAR 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 25
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PPUSH
27965: CALL_OW 69
27969: ST_TO_ADDR
// if not tmp then
27970: LD_VAR 0 3
27974: NOT
27975: IFFALSE 27979
// exit ;
27977: GO 28065
// un := tmp [ rand ( 1 , tmp ) ] ;
27979: LD_ADDR_VAR 0 2
27983: PUSH
27984: LD_VAR 0 3
27988: PUSH
27989: LD_INT 1
27991: PPUSH
27992: LD_VAR 0 3
27996: PPUSH
27997: CALL_OW 12
28001: ARRAY
28002: ST_TO_ADDR
// if Crawls ( un ) then
28003: LD_VAR 0 2
28007: PPUSH
28008: CALL_OW 318
28012: IFFALSE 28023
// ComWalk ( un ) ;
28014: LD_VAR 0 2
28018: PPUSH
28019: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28023: LD_VAR 0 2
28027: PPUSH
28028: LD_INT 9
28030: PPUSH
28031: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28035: LD_INT 28
28037: PPUSH
28038: LD_OWVAR 2
28042: PPUSH
28043: LD_INT 2
28045: PPUSH
28046: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28050: LD_INT 29
28052: PPUSH
28053: LD_OWVAR 2
28057: PPUSH
28058: LD_INT 2
28060: PPUSH
28061: CALL_OW 322
// end ;
28065: PPOPN 3
28067: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28068: LD_EXP 77
28072: PUSH
28073: LD_EXP 120
28077: AND
28078: IFFALSE 28189
28080: GO 28082
28082: DISABLE
28083: LD_INT 0
28085: PPUSH
28086: PPUSH
28087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28088: LD_ADDR_VAR 0 3
28092: PUSH
28093: LD_INT 22
28095: PUSH
28096: LD_OWVAR 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 25
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PPUSH
28119: CALL_OW 69
28123: ST_TO_ADDR
// if not tmp then
28124: LD_VAR 0 3
28128: NOT
28129: IFFALSE 28133
// exit ;
28131: GO 28189
// un := tmp [ rand ( 1 , tmp ) ] ;
28133: LD_ADDR_VAR 0 2
28137: PUSH
28138: LD_VAR 0 3
28142: PUSH
28143: LD_INT 1
28145: PPUSH
28146: LD_VAR 0 3
28150: PPUSH
28151: CALL_OW 12
28155: ARRAY
28156: ST_TO_ADDR
// if Crawls ( un ) then
28157: LD_VAR 0 2
28161: PPUSH
28162: CALL_OW 318
28166: IFFALSE 28177
// ComWalk ( un ) ;
28168: LD_VAR 0 2
28172: PPUSH
28173: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28177: LD_VAR 0 2
28181: PPUSH
28182: LD_INT 8
28184: PPUSH
28185: CALL_OW 336
// end ;
28189: PPOPN 3
28191: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28192: LD_EXP 77
28196: PUSH
28197: LD_EXP 121
28201: AND
28202: IFFALSE 28346
28204: GO 28206
28206: DISABLE
28207: LD_INT 0
28209: PPUSH
28210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28211: LD_ADDR_VAR 0 2
28215: PUSH
28216: LD_INT 22
28218: PUSH
28219: LD_OWVAR 2
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 21
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: LD_INT 34
28243: PUSH
28244: LD_INT 12
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 34
28253: PUSH
28254: LD_INT 51
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 34
28263: PUSH
28264: LD_INT 32
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: LIST
28281: PPUSH
28282: CALL_OW 69
28286: ST_TO_ADDR
// if not tmp then
28287: LD_VAR 0 2
28291: NOT
28292: IFFALSE 28296
// exit ;
28294: GO 28346
// for i in tmp do
28296: LD_ADDR_VAR 0 1
28300: PUSH
28301: LD_VAR 0 2
28305: PUSH
28306: FOR_IN
28307: IFFALSE 28344
// if GetCargo ( i , mat_artifact ) = 0 then
28309: LD_VAR 0 1
28313: PPUSH
28314: LD_INT 4
28316: PPUSH
28317: CALL_OW 289
28321: PUSH
28322: LD_INT 0
28324: EQUAL
28325: IFFALSE 28342
// SetCargo ( i , mat_siberit , 100 ) ;
28327: LD_VAR 0 1
28331: PPUSH
28332: LD_INT 3
28334: PPUSH
28335: LD_INT 100
28337: PPUSH
28338: CALL_OW 290
28342: GO 28306
28344: POP
28345: POP
// end ;
28346: PPOPN 2
28348: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28349: LD_EXP 77
28353: PUSH
28354: LD_EXP 122
28358: AND
28359: IFFALSE 28542
28361: GO 28363
28363: DISABLE
28364: LD_INT 0
28366: PPUSH
28367: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28368: LD_ADDR_VAR 0 2
28372: PUSH
28373: LD_INT 22
28375: PUSH
28376: LD_OWVAR 2
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PPUSH
28385: CALL_OW 69
28389: ST_TO_ADDR
// if not tmp then
28390: LD_VAR 0 2
28394: NOT
28395: IFFALSE 28399
// exit ;
28397: GO 28542
// for i := 1 to 2 do
28399: LD_ADDR_VAR 0 1
28403: PUSH
28404: DOUBLE
28405: LD_INT 1
28407: DEC
28408: ST_TO_ADDR
28409: LD_INT 2
28411: PUSH
28412: FOR_TO
28413: IFFALSE 28540
// begin uc_side := your_side ;
28415: LD_ADDR_OWVAR 20
28419: PUSH
28420: LD_OWVAR 2
28424: ST_TO_ADDR
// uc_nation := nation_american ;
28425: LD_ADDR_OWVAR 21
28429: PUSH
28430: LD_INT 1
28432: ST_TO_ADDR
// vc_chassis := us_morphling ;
28433: LD_ADDR_OWVAR 37
28437: PUSH
28438: LD_INT 5
28440: ST_TO_ADDR
// vc_engine := engine_siberite ;
28441: LD_ADDR_OWVAR 39
28445: PUSH
28446: LD_INT 3
28448: ST_TO_ADDR
// vc_control := control_computer ;
28449: LD_ADDR_OWVAR 38
28453: PUSH
28454: LD_INT 3
28456: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28457: LD_ADDR_OWVAR 40
28461: PUSH
28462: LD_INT 10
28464: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28465: LD_VAR 0 2
28469: PUSH
28470: LD_INT 1
28472: ARRAY
28473: PPUSH
28474: CALL_OW 310
28478: NOT
28479: IFFALSE 28526
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28481: CALL_OW 45
28485: PPUSH
28486: LD_VAR 0 2
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: PPUSH
28495: CALL_OW 250
28499: PPUSH
28500: LD_VAR 0 2
28504: PUSH
28505: LD_INT 1
28507: ARRAY
28508: PPUSH
28509: CALL_OW 251
28513: PPUSH
28514: LD_INT 12
28516: PPUSH
28517: LD_INT 1
28519: PPUSH
28520: CALL_OW 50
28524: GO 28538
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28526: CALL_OW 45
28530: PPUSH
28531: LD_INT 1
28533: PPUSH
28534: CALL_OW 51
// end ;
28538: GO 28412
28540: POP
28541: POP
// end ;
28542: PPOPN 2
28544: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28545: LD_EXP 77
28549: PUSH
28550: LD_EXP 123
28554: AND
28555: IFFALSE 28777
28557: GO 28559
28559: DISABLE
28560: LD_INT 0
28562: PPUSH
28563: PPUSH
28564: PPUSH
28565: PPUSH
28566: PPUSH
28567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28568: LD_ADDR_VAR 0 6
28572: PUSH
28573: LD_INT 22
28575: PUSH
28576: LD_OWVAR 2
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 21
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: LD_INT 23
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: LIST
28616: PPUSH
28617: CALL_OW 69
28621: ST_TO_ADDR
// if not tmp then
28622: LD_VAR 0 6
28626: NOT
28627: IFFALSE 28631
// exit ;
28629: GO 28777
// s1 := rand ( 1 , 4 ) ;
28631: LD_ADDR_VAR 0 2
28635: PUSH
28636: LD_INT 1
28638: PPUSH
28639: LD_INT 4
28641: PPUSH
28642: CALL_OW 12
28646: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28647: LD_ADDR_VAR 0 4
28651: PUSH
28652: LD_VAR 0 6
28656: PUSH
28657: LD_INT 1
28659: ARRAY
28660: PPUSH
28661: LD_VAR 0 2
28665: PPUSH
28666: CALL_OW 259
28670: ST_TO_ADDR
// if s1 = 1 then
28671: LD_VAR 0 2
28675: PUSH
28676: LD_INT 1
28678: EQUAL
28679: IFFALSE 28699
// s2 := rand ( 2 , 4 ) else
28681: LD_ADDR_VAR 0 3
28685: PUSH
28686: LD_INT 2
28688: PPUSH
28689: LD_INT 4
28691: PPUSH
28692: CALL_OW 12
28696: ST_TO_ADDR
28697: GO 28707
// s2 := 1 ;
28699: LD_ADDR_VAR 0 3
28703: PUSH
28704: LD_INT 1
28706: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28707: LD_ADDR_VAR 0 5
28711: PUSH
28712: LD_VAR 0 6
28716: PUSH
28717: LD_INT 1
28719: ARRAY
28720: PPUSH
28721: LD_VAR 0 3
28725: PPUSH
28726: CALL_OW 259
28730: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28731: LD_VAR 0 6
28735: PUSH
28736: LD_INT 1
28738: ARRAY
28739: PPUSH
28740: LD_VAR 0 2
28744: PPUSH
28745: LD_VAR 0 5
28749: PPUSH
28750: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28754: LD_VAR 0 6
28758: PUSH
28759: LD_INT 1
28761: ARRAY
28762: PPUSH
28763: LD_VAR 0 3
28767: PPUSH
28768: LD_VAR 0 4
28772: PPUSH
28773: CALL_OW 237
// end ;
28777: PPOPN 6
28779: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28780: LD_EXP 77
28784: PUSH
28785: LD_EXP 124
28789: AND
28790: IFFALSE 28869
28792: GO 28794
28794: DISABLE
28795: LD_INT 0
28797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28798: LD_ADDR_VAR 0 1
28802: PUSH
28803: LD_INT 22
28805: PUSH
28806: LD_OWVAR 2
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 30
28817: PUSH
28818: LD_INT 3
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PPUSH
28829: CALL_OW 69
28833: ST_TO_ADDR
// if not tmp then
28834: LD_VAR 0 1
28838: NOT
28839: IFFALSE 28843
// exit ;
28841: GO 28869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28843: LD_VAR 0 1
28847: PUSH
28848: LD_INT 1
28850: PPUSH
28851: LD_VAR 0 1
28855: PPUSH
28856: CALL_OW 12
28860: ARRAY
28861: PPUSH
28862: LD_INT 1
28864: PPUSH
28865: CALL_OW 234
// end ;
28869: PPOPN 1
28871: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28872: LD_EXP 77
28876: PUSH
28877: LD_EXP 125
28881: AND
28882: IFFALSE 28994
28884: GO 28886
28886: DISABLE
28887: LD_INT 0
28889: PPUSH
28890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28891: LD_ADDR_VAR 0 2
28895: PUSH
28896: LD_INT 22
28898: PUSH
28899: LD_OWVAR 2
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: LD_INT 30
28913: PUSH
28914: LD_INT 27
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 30
28923: PUSH
28924: LD_INT 26
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 30
28933: PUSH
28934: LD_INT 28
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PPUSH
28951: CALL_OW 69
28955: ST_TO_ADDR
// if not tmp then
28956: LD_VAR 0 2
28960: NOT
28961: IFFALSE 28965
// exit ;
28963: GO 28994
// for i in tmp do
28965: LD_ADDR_VAR 0 1
28969: PUSH
28970: LD_VAR 0 2
28974: PUSH
28975: FOR_IN
28976: IFFALSE 28992
// SetLives ( i , 1 ) ;
28978: LD_VAR 0 1
28982: PPUSH
28983: LD_INT 1
28985: PPUSH
28986: CALL_OW 234
28990: GO 28975
28992: POP
28993: POP
// end ;
28994: PPOPN 2
28996: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28997: LD_EXP 77
29001: PUSH
29002: LD_EXP 126
29006: AND
29007: IFFALSE 29281
29009: GO 29011
29011: DISABLE
29012: LD_INT 0
29014: PPUSH
29015: PPUSH
29016: PPUSH
// begin i := rand ( 1 , 7 ) ;
29017: LD_ADDR_VAR 0 1
29021: PUSH
29022: LD_INT 1
29024: PPUSH
29025: LD_INT 7
29027: PPUSH
29028: CALL_OW 12
29032: ST_TO_ADDR
// case i of 1 :
29033: LD_VAR 0 1
29037: PUSH
29038: LD_INT 1
29040: DOUBLE
29041: EQUAL
29042: IFTRUE 29046
29044: GO 29056
29046: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29047: LD_STRING earthquake(getX(game), 0, 32)
29049: PPUSH
29050: CALL_OW 559
29054: GO 29281
29056: LD_INT 2
29058: DOUBLE
29059: EQUAL
29060: IFTRUE 29064
29062: GO 29078
29064: POP
// begin ToLua ( displayStucuk(); ) ;
29065: LD_STRING displayStucuk();
29067: PPUSH
29068: CALL_OW 559
// ResetFog ;
29072: CALL_OW 335
// end ; 3 :
29076: GO 29281
29078: LD_INT 3
29080: DOUBLE
29081: EQUAL
29082: IFTRUE 29086
29084: GO 29190
29086: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29087: LD_ADDR_VAR 0 2
29091: PUSH
29092: LD_INT 22
29094: PUSH
29095: LD_OWVAR 2
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 25
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PPUSH
29118: CALL_OW 69
29122: ST_TO_ADDR
// if not tmp then
29123: LD_VAR 0 2
29127: NOT
29128: IFFALSE 29132
// exit ;
29130: GO 29281
// un := tmp [ rand ( 1 , tmp ) ] ;
29132: LD_ADDR_VAR 0 3
29136: PUSH
29137: LD_VAR 0 2
29141: PUSH
29142: LD_INT 1
29144: PPUSH
29145: LD_VAR 0 2
29149: PPUSH
29150: CALL_OW 12
29154: ARRAY
29155: ST_TO_ADDR
// if Crawls ( un ) then
29156: LD_VAR 0 3
29160: PPUSH
29161: CALL_OW 318
29165: IFFALSE 29176
// ComWalk ( un ) ;
29167: LD_VAR 0 3
29171: PPUSH
29172: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29176: LD_VAR 0 3
29180: PPUSH
29181: LD_INT 8
29183: PPUSH
29184: CALL_OW 336
// end ; 4 :
29188: GO 29281
29190: LD_INT 4
29192: DOUBLE
29193: EQUAL
29194: IFTRUE 29198
29196: GO 29259
29198: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29199: LD_ADDR_VAR 0 2
29203: PUSH
29204: LD_INT 22
29206: PUSH
29207: LD_OWVAR 2
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 30
29218: PUSH
29219: LD_INT 29
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PPUSH
29230: CALL_OW 69
29234: ST_TO_ADDR
// if not tmp then
29235: LD_VAR 0 2
29239: NOT
29240: IFFALSE 29244
// exit ;
29242: GO 29281
// DestroyUnit ( tmp [ 1 ] ) ;
29244: LD_VAR 0 2
29248: PUSH
29249: LD_INT 1
29251: ARRAY
29252: PPUSH
29253: CALL_OW 65
// end ; 5 .. 7 :
29257: GO 29281
29259: LD_INT 5
29261: DOUBLE
29262: GREATEREQUAL
29263: IFFALSE 29271
29265: LD_INT 7
29267: DOUBLE
29268: LESSEQUAL
29269: IFTRUE 29273
29271: GO 29280
29273: POP
// StreamSibBomb ; end ;
29274: CALL 25531 0 0
29278: GO 29281
29280: POP
// end ;
29281: PPOPN 3
29283: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29284: LD_EXP 77
29288: PUSH
29289: LD_EXP 127
29293: AND
29294: IFFALSE 29450
29296: GO 29298
29298: DISABLE
29299: LD_INT 0
29301: PPUSH
29302: PPUSH
29303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29304: LD_ADDR_VAR 0 2
29308: PUSH
29309: LD_INT 81
29311: PUSH
29312: LD_OWVAR 2
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 21
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 21
29336: PUSH
29337: LD_INT 2
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PPUSH
29353: CALL_OW 69
29357: ST_TO_ADDR
// if not tmp then
29358: LD_VAR 0 2
29362: NOT
29363: IFFALSE 29367
// exit ;
29365: GO 29450
// p := 0 ;
29367: LD_ADDR_VAR 0 3
29371: PUSH
29372: LD_INT 0
29374: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29375: LD_INT 35
29377: PPUSH
29378: CALL_OW 67
// p := p + 1 ;
29382: LD_ADDR_VAR 0 3
29386: PUSH
29387: LD_VAR 0 3
29391: PUSH
29392: LD_INT 1
29394: PLUS
29395: ST_TO_ADDR
// for i in tmp do
29396: LD_ADDR_VAR 0 1
29400: PUSH
29401: LD_VAR 0 2
29405: PUSH
29406: FOR_IN
29407: IFFALSE 29438
// if GetLives ( i ) < 1000 then
29409: LD_VAR 0 1
29413: PPUSH
29414: CALL_OW 256
29418: PUSH
29419: LD_INT 1000
29421: LESS
29422: IFFALSE 29436
// SetLives ( i , 1000 ) ;
29424: LD_VAR 0 1
29428: PPUSH
29429: LD_INT 1000
29431: PPUSH
29432: CALL_OW 234
29436: GO 29406
29438: POP
29439: POP
// until p > 20 ;
29440: LD_VAR 0 3
29444: PUSH
29445: LD_INT 20
29447: GREATER
29448: IFFALSE 29375
// end ;
29450: PPOPN 3
29452: END
// every 0 0$1 trigger StreamModeActive and sTime do
29453: LD_EXP 77
29457: PUSH
29458: LD_EXP 128
29462: AND
29463: IFFALSE 29498
29465: GO 29467
29467: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29468: LD_INT 28
29470: PPUSH
29471: LD_OWVAR 2
29475: PPUSH
29476: LD_INT 2
29478: PPUSH
29479: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29483: LD_INT 30
29485: PPUSH
29486: LD_OWVAR 2
29490: PPUSH
29491: LD_INT 2
29493: PPUSH
29494: CALL_OW 322
// end ;
29498: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29499: LD_EXP 77
29503: PUSH
29504: LD_EXP 129
29508: AND
29509: IFFALSE 29630
29511: GO 29513
29513: DISABLE
29514: LD_INT 0
29516: PPUSH
29517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29518: LD_ADDR_VAR 0 2
29522: PUSH
29523: LD_INT 22
29525: PUSH
29526: LD_OWVAR 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 21
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 3
29547: PUSH
29548: LD_INT 23
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: PPUSH
29567: CALL_OW 69
29571: ST_TO_ADDR
// if not tmp then
29572: LD_VAR 0 2
29576: NOT
29577: IFFALSE 29581
// exit ;
29579: GO 29630
// for i in tmp do
29581: LD_ADDR_VAR 0 1
29585: PUSH
29586: LD_VAR 0 2
29590: PUSH
29591: FOR_IN
29592: IFFALSE 29628
// begin if Crawls ( i ) then
29594: LD_VAR 0 1
29598: PPUSH
29599: CALL_OW 318
29603: IFFALSE 29614
// ComWalk ( i ) ;
29605: LD_VAR 0 1
29609: PPUSH
29610: CALL_OW 138
// SetClass ( i , 2 ) ;
29614: LD_VAR 0 1
29618: PPUSH
29619: LD_INT 2
29621: PPUSH
29622: CALL_OW 336
// end ;
29626: GO 29591
29628: POP
29629: POP
// end ;
29630: PPOPN 2
29632: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29633: LD_EXP 77
29637: PUSH
29638: LD_EXP 130
29642: AND
29643: IFFALSE 29924
29645: GO 29647
29647: DISABLE
29648: LD_INT 0
29650: PPUSH
29651: PPUSH
29652: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29653: LD_OWVAR 2
29657: PPUSH
29658: LD_INT 9
29660: PPUSH
29661: LD_INT 1
29663: PPUSH
29664: LD_INT 1
29666: PPUSH
29667: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29671: LD_INT 9
29673: PPUSH
29674: LD_OWVAR 2
29678: PPUSH
29679: CALL_OW 343
// uc_side := 9 ;
29683: LD_ADDR_OWVAR 20
29687: PUSH
29688: LD_INT 9
29690: ST_TO_ADDR
// uc_nation := 2 ;
29691: LD_ADDR_OWVAR 21
29695: PUSH
29696: LD_INT 2
29698: ST_TO_ADDR
// hc_name := Dark Warrior ;
29699: LD_ADDR_OWVAR 26
29703: PUSH
29704: LD_STRING Dark Warrior
29706: ST_TO_ADDR
// hc_gallery :=  ;
29707: LD_ADDR_OWVAR 33
29711: PUSH
29712: LD_STRING 
29714: ST_TO_ADDR
// hc_noskilllimit := true ;
29715: LD_ADDR_OWVAR 76
29719: PUSH
29720: LD_INT 1
29722: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29723: LD_ADDR_OWVAR 31
29727: PUSH
29728: LD_INT 30
29730: PUSH
29731: LD_INT 30
29733: PUSH
29734: LD_INT 30
29736: PUSH
29737: LD_INT 30
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: ST_TO_ADDR
// un := CreateHuman ;
29746: LD_ADDR_VAR 0 3
29750: PUSH
29751: CALL_OW 44
29755: ST_TO_ADDR
// hc_noskilllimit := false ;
29756: LD_ADDR_OWVAR 76
29760: PUSH
29761: LD_INT 0
29763: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29764: LD_VAR 0 3
29768: PPUSH
29769: LD_INT 1
29771: PPUSH
29772: CALL_OW 51
// p := 0 ;
29776: LD_ADDR_VAR 0 2
29780: PUSH
29781: LD_INT 0
29783: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29784: LD_INT 35
29786: PPUSH
29787: CALL_OW 67
// p := p + 1 ;
29791: LD_ADDR_VAR 0 2
29795: PUSH
29796: LD_VAR 0 2
29800: PUSH
29801: LD_INT 1
29803: PLUS
29804: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29805: LD_VAR 0 3
29809: PPUSH
29810: CALL_OW 256
29814: PUSH
29815: LD_INT 1000
29817: LESS
29818: IFFALSE 29832
// SetLives ( un , 1000 ) ;
29820: LD_VAR 0 3
29824: PPUSH
29825: LD_INT 1000
29827: PPUSH
29828: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29832: LD_VAR 0 3
29836: PPUSH
29837: LD_INT 81
29839: PUSH
29840: LD_OWVAR 2
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 91
29851: PUSH
29852: LD_VAR 0 3
29856: PUSH
29857: LD_INT 30
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PPUSH
29869: CALL_OW 69
29873: PPUSH
29874: LD_VAR 0 3
29878: PPUSH
29879: CALL_OW 74
29883: PPUSH
29884: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29888: LD_VAR 0 2
29892: PUSH
29893: LD_INT 60
29895: GREATER
29896: PUSH
29897: LD_VAR 0 3
29901: PPUSH
29902: CALL_OW 301
29906: OR
29907: IFFALSE 29784
// if un then
29909: LD_VAR 0 3
29913: IFFALSE 29924
// RemoveUnit ( un ) ;
29915: LD_VAR 0 3
29919: PPUSH
29920: CALL_OW 64
// end ;
29924: PPOPN 3
29926: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29927: LD_INT 0
29929: PPUSH
29930: PPUSH
29931: PPUSH
29932: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29933: LD_ADDR_VAR 0 4
29937: PUSH
29938: LD_INT 22
29940: PUSH
29941: LD_OWVAR 2
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: LD_INT 30
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 30
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: LIST
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PPUSH
29982: CALL_OW 69
29986: ST_TO_ADDR
// if not tmp then
29987: LD_VAR 0 4
29991: NOT
29992: IFFALSE 29996
// exit ;
29994: GO 30055
// for i in tmp do
29996: LD_ADDR_VAR 0 2
30000: PUSH
30001: LD_VAR 0 4
30005: PUSH
30006: FOR_IN
30007: IFFALSE 30053
// for j = 1 to 3 do
30009: LD_ADDR_VAR 0 3
30013: PUSH
30014: DOUBLE
30015: LD_INT 1
30017: DEC
30018: ST_TO_ADDR
30019: LD_INT 3
30021: PUSH
30022: FOR_TO
30023: IFFALSE 30049
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30025: LD_VAR 0 2
30029: PPUSH
30030: CALL_OW 274
30034: PPUSH
30035: LD_VAR 0 3
30039: PPUSH
30040: LD_INT 99999
30042: PPUSH
30043: CALL_OW 277
30047: GO 30022
30049: POP
30050: POP
30051: GO 30006
30053: POP
30054: POP
// end ;
30055: LD_VAR 0 1
30059: RET
// export function hHackSetLevel10 ; var i , j ; begin
30060: LD_INT 0
30062: PPUSH
30063: PPUSH
30064: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30065: LD_ADDR_VAR 0 2
30069: PUSH
30070: LD_INT 21
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PPUSH
30080: CALL_OW 69
30084: PUSH
30085: FOR_IN
30086: IFFALSE 30138
// if IsSelected ( i ) then
30088: LD_VAR 0 2
30092: PPUSH
30093: CALL_OW 306
30097: IFFALSE 30136
// begin for j := 1 to 4 do
30099: LD_ADDR_VAR 0 3
30103: PUSH
30104: DOUBLE
30105: LD_INT 1
30107: DEC
30108: ST_TO_ADDR
30109: LD_INT 4
30111: PUSH
30112: FOR_TO
30113: IFFALSE 30134
// SetSkill ( i , j , 10 ) ;
30115: LD_VAR 0 2
30119: PPUSH
30120: LD_VAR 0 3
30124: PPUSH
30125: LD_INT 10
30127: PPUSH
30128: CALL_OW 237
30132: GO 30112
30134: POP
30135: POP
// end ;
30136: GO 30085
30138: POP
30139: POP
// end ;
30140: LD_VAR 0 1
30144: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30145: LD_INT 0
30147: PPUSH
30148: PPUSH
30149: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30150: LD_ADDR_VAR 0 2
30154: PUSH
30155: LD_INT 22
30157: PUSH
30158: LD_OWVAR 2
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 21
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PPUSH
30181: CALL_OW 69
30185: PUSH
30186: FOR_IN
30187: IFFALSE 30228
// begin for j := 1 to 4 do
30189: LD_ADDR_VAR 0 3
30193: PUSH
30194: DOUBLE
30195: LD_INT 1
30197: DEC
30198: ST_TO_ADDR
30199: LD_INT 4
30201: PUSH
30202: FOR_TO
30203: IFFALSE 30224
// SetSkill ( i , j , 10 ) ;
30205: LD_VAR 0 2
30209: PPUSH
30210: LD_VAR 0 3
30214: PPUSH
30215: LD_INT 10
30217: PPUSH
30218: CALL_OW 237
30222: GO 30202
30224: POP
30225: POP
// end ;
30226: GO 30186
30228: POP
30229: POP
// end ;
30230: LD_VAR 0 1
30234: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
30235: LD_INT 0
30237: PPUSH
// uc_side := your_side ;
30238: LD_ADDR_OWVAR 20
30242: PUSH
30243: LD_OWVAR 2
30247: ST_TO_ADDR
// uc_nation := nation ;
30248: LD_ADDR_OWVAR 21
30252: PUSH
30253: LD_VAR 0 1
30257: ST_TO_ADDR
// InitHc ;
30258: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30262: LD_INT 0
30264: PPUSH
30265: LD_VAR 0 2
30269: PPUSH
30270: LD_VAR 0 3
30274: PPUSH
30275: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30279: CALL_OW 44
30283: PPUSH
30284: LD_INT 1
30286: PPUSH
30287: CALL_OW 51
// end ;
30291: LD_VAR 0 4
30295: RET
// export function hHackSpawnVehicle ; begin
30296: LD_INT 0
30298: PPUSH
// uc_side := your_side ;
30299: LD_ADDR_OWVAR 20
30303: PUSH
30304: LD_OWVAR 2
30308: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
30309: LD_ADDR_OWVAR 21
30313: PUSH
30314: LD_INT 1
30316: PPUSH
30317: LD_INT 3
30319: PPUSH
30320: CALL_OW 12
30324: ST_TO_ADDR
// InitVc ;
30325: CALL_OW 20
// case uc_nation of 1 :
30329: LD_OWVAR 21
30333: PUSH
30334: LD_INT 1
30336: DOUBLE
30337: EQUAL
30338: IFTRUE 30342
30340: GO 30486
30342: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
30343: LD_ADDR_OWVAR 37
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: LD_INT 4
30359: PUSH
30360: LD_INT 5
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: PPUSH
30373: LD_INT 5
30375: PPUSH
30376: CALL_OW 12
30380: ARRAY
30381: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30382: LD_ADDR_OWVAR 39
30386: PUSH
30387: LD_INT 1
30389: PPUSH
30390: LD_INT 3
30392: PPUSH
30393: CALL_OW 12
30397: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
30398: LD_ADDR_OWVAR 38
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 1
30419: PPUSH
30420: LD_INT 3
30422: PPUSH
30423: CALL_OW 12
30427: ARRAY
30428: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
30429: LD_ADDR_OWVAR 40
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: LD_INT 4
30439: PUSH
30440: LD_INT 5
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: LD_INT 7
30448: PUSH
30449: LD_INT 8
30451: PUSH
30452: LD_INT 9
30454: PUSH
30455: LD_INT 10
30457: PUSH
30458: LD_INT 6
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: PPUSH
30475: LD_INT 9
30477: PPUSH
30478: CALL_OW 12
30482: ARRAY
30483: ST_TO_ADDR
// end ; 2 :
30484: GO 30751
30486: LD_INT 2
30488: DOUBLE
30489: EQUAL
30490: IFTRUE 30494
30492: GO 30618
30494: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
30495: LD_ADDR_OWVAR 37
30499: PUSH
30500: LD_INT 11
30502: PUSH
30503: LD_INT 12
30505: PUSH
30506: LD_INT 13
30508: PUSH
30509: LD_INT 14
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: PPUSH
30521: LD_INT 4
30523: PPUSH
30524: CALL_OW 12
30528: ARRAY
30529: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30530: LD_ADDR_OWVAR 39
30534: PUSH
30535: LD_INT 1
30537: PPUSH
30538: LD_INT 3
30540: PPUSH
30541: CALL_OW 12
30545: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
30546: LD_ADDR_OWVAR 38
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 5
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: PPUSH
30568: LD_INT 3
30570: PPUSH
30571: CALL_OW 12
30575: ARRAY
30576: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
30577: LD_ADDR_OWVAR 40
30581: PUSH
30582: LD_INT 24
30584: PUSH
30585: LD_INT 26
30587: PUSH
30588: LD_INT 27
30590: PUSH
30591: LD_INT 28
30593: PUSH
30594: LD_INT 29
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PPUSH
30607: LD_INT 5
30609: PPUSH
30610: CALL_OW 12
30614: ARRAY
30615: ST_TO_ADDR
// end ; 3 :
30616: GO 30751
30618: LD_INT 3
30620: DOUBLE
30621: EQUAL
30622: IFTRUE 30626
30624: GO 30750
30626: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
30627: LD_ADDR_OWVAR 37
30631: PUSH
30632: LD_INT 21
30634: PUSH
30635: LD_INT 23
30637: PUSH
30638: LD_INT 22
30640: PUSH
30641: LD_INT 24
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: PPUSH
30653: LD_INT 4
30655: PPUSH
30656: CALL_OW 12
30660: ARRAY
30661: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30662: LD_ADDR_OWVAR 39
30666: PUSH
30667: LD_INT 1
30669: PPUSH
30670: LD_INT 3
30672: PPUSH
30673: CALL_OW 12
30677: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
30678: LD_ADDR_OWVAR 38
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: PPUSH
30696: LD_INT 2
30698: PPUSH
30699: CALL_OW 12
30703: ARRAY
30704: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
30705: LD_ADDR_OWVAR 40
30709: PUSH
30710: LD_INT 42
30712: PUSH
30713: LD_INT 43
30715: PUSH
30716: LD_INT 44
30718: PUSH
30719: LD_INT 46
30721: PUSH
30722: LD_INT 48
30724: PUSH
30725: LD_INT 47
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: PPUSH
30739: LD_INT 6
30741: PPUSH
30742: CALL_OW 12
30746: ARRAY
30747: ST_TO_ADDR
// end ; end ;
30748: GO 30751
30750: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30751: CALL_OW 45
30755: PPUSH
30756: LD_INT 1
30758: PPUSH
30759: CALL_OW 51
// end ;
30763: LD_VAR 0 1
30767: RET
// export hInvincible ; every 1 do
30768: GO 30770
30770: DISABLE
// hInvincible := [ ] ;
30771: LD_ADDR_EXP 131
30775: PUSH
30776: EMPTY
30777: ST_TO_ADDR
30778: END
// every 10 do var i ;
30779: GO 30781
30781: DISABLE
30782: LD_INT 0
30784: PPUSH
// begin enable ;
30785: ENABLE
// if not hInvincible then
30786: LD_EXP 131
30790: NOT
30791: IFFALSE 30795
// exit ;
30793: GO 30839
// for i in hInvincible do
30795: LD_ADDR_VAR 0 1
30799: PUSH
30800: LD_EXP 131
30804: PUSH
30805: FOR_IN
30806: IFFALSE 30837
// if GetLives ( i ) < 1000 then
30808: LD_VAR 0 1
30812: PPUSH
30813: CALL_OW 256
30817: PUSH
30818: LD_INT 1000
30820: LESS
30821: IFFALSE 30835
// SetLives ( i , 1000 ) ;
30823: LD_VAR 0 1
30827: PPUSH
30828: LD_INT 1000
30830: PPUSH
30831: CALL_OW 234
30835: GO 30805
30837: POP
30838: POP
// end ;
30839: PPOPN 1
30841: END
// export function hHackInvincible ; var i ; begin
30842: LD_INT 0
30844: PPUSH
30845: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30846: LD_ADDR_VAR 0 2
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: LD_INT 21
30856: PUSH
30857: LD_INT 1
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 21
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: PPUSH
30879: CALL_OW 69
30883: PUSH
30884: FOR_IN
30885: IFFALSE 30946
// if IsSelected ( i ) then
30887: LD_VAR 0 2
30891: PPUSH
30892: CALL_OW 306
30896: IFFALSE 30944
// begin if i in hInvincible then
30898: LD_VAR 0 2
30902: PUSH
30903: LD_EXP 131
30907: IN
30908: IFFALSE 30928
// hInvincible := hInvincible diff i else
30910: LD_ADDR_EXP 131
30914: PUSH
30915: LD_EXP 131
30919: PUSH
30920: LD_VAR 0 2
30924: DIFF
30925: ST_TO_ADDR
30926: GO 30944
// hInvincible := hInvincible union i ;
30928: LD_ADDR_EXP 131
30932: PUSH
30933: LD_EXP 131
30937: PUSH
30938: LD_VAR 0 2
30942: UNION
30943: ST_TO_ADDR
// end ;
30944: GO 30884
30946: POP
30947: POP
// end ;
30948: LD_VAR 0 1
30952: RET
// export function hHackInvisible ; var i , j ; begin
30953: LD_INT 0
30955: PPUSH
30956: PPUSH
30957: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30958: LD_ADDR_VAR 0 2
30962: PUSH
30963: LD_INT 21
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PPUSH
30973: CALL_OW 69
30977: PUSH
30978: FOR_IN
30979: IFFALSE 31003
// if IsSelected ( i ) then
30981: LD_VAR 0 2
30985: PPUSH
30986: CALL_OW 306
30990: IFFALSE 31001
// ComForceInvisible ( i ) ;
30992: LD_VAR 0 2
30996: PPUSH
30997: CALL_OW 496
31001: GO 30978
31003: POP
31004: POP
// end ;
31005: LD_VAR 0 1
31009: RET
// export function hHackChangeYourSide ; begin
31010: LD_INT 0
31012: PPUSH
// if your_side = 8 then
31013: LD_OWVAR 2
31017: PUSH
31018: LD_INT 8
31020: EQUAL
31021: IFFALSE 31033
// your_side := 0 else
31023: LD_ADDR_OWVAR 2
31027: PUSH
31028: LD_INT 0
31030: ST_TO_ADDR
31031: GO 31047
// your_side := your_side + 1 ;
31033: LD_ADDR_OWVAR 2
31037: PUSH
31038: LD_OWVAR 2
31042: PUSH
31043: LD_INT 1
31045: PLUS
31046: ST_TO_ADDR
// end ;
31047: LD_VAR 0 1
31051: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31052: LD_INT 0
31054: PPUSH
31055: PPUSH
31056: PPUSH
// for i in all_units do
31057: LD_ADDR_VAR 0 2
31061: PUSH
31062: LD_OWVAR 3
31066: PUSH
31067: FOR_IN
31068: IFFALSE 31146
// if IsSelected ( i ) then
31070: LD_VAR 0 2
31074: PPUSH
31075: CALL_OW 306
31079: IFFALSE 31144
// begin j := GetSide ( i ) ;
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_VAR 0 2
31090: PPUSH
31091: CALL_OW 255
31095: ST_TO_ADDR
// if j = 8 then
31096: LD_VAR 0 3
31100: PUSH
31101: LD_INT 8
31103: EQUAL
31104: IFFALSE 31116
// j := 0 else
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_INT 0
31113: ST_TO_ADDR
31114: GO 31130
// j := j + 1 ;
31116: LD_ADDR_VAR 0 3
31120: PUSH
31121: LD_VAR 0 3
31125: PUSH
31126: LD_INT 1
31128: PLUS
31129: ST_TO_ADDR
// SetSide ( i , j ) ;
31130: LD_VAR 0 2
31134: PPUSH
31135: LD_VAR 0 3
31139: PPUSH
31140: CALL_OW 235
// end ;
31144: GO 31067
31146: POP
31147: POP
// end ;
31148: LD_VAR 0 1
31152: RET
// export function hHackFog ; begin
31153: LD_INT 0
31155: PPUSH
// FogOff ( true ) ;
31156: LD_INT 1
31158: PPUSH
31159: CALL_OW 344
// end ;
31163: LD_VAR 0 1
31167: RET
// export function hHackApeman ; begin
31168: LD_INT 0
31170: PPUSH
// uc_side := your_side ;
31171: LD_ADDR_OWVAR 20
31175: PUSH
31176: LD_OWVAR 2
31180: ST_TO_ADDR
// uc_nation := 0 ;
31181: LD_ADDR_OWVAR 21
31185: PUSH
31186: LD_INT 0
31188: ST_TO_ADDR
// hc_name :=  ;
31189: LD_ADDR_OWVAR 26
31193: PUSH
31194: LD_STRING 
31196: ST_TO_ADDR
// hc_gallery :=  ;
31197: LD_ADDR_OWVAR 33
31201: PUSH
31202: LD_STRING 
31204: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
31205: LD_ADDR_OWVAR 31
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
// hc_class := class_apeman ;
31228: LD_ADDR_OWVAR 28
31232: PUSH
31233: LD_INT 12
31235: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
31236: CALL_OW 44
31240: PPUSH
31241: LD_INT 1
31243: PPUSH
31244: CALL_OW 51
// end ;
31248: LD_VAR 0 1
31252: RET
// export function hHackBoom ; begin
31253: LD_INT 0
31255: PPUSH
// uc_side := your_side ;
31256: LD_ADDR_OWVAR 20
31260: PUSH
31261: LD_OWVAR 2
31265: ST_TO_ADDR
// uc_nation := 1 ;
31266: LD_ADDR_OWVAR 21
31270: PUSH
31271: LD_INT 1
31273: ST_TO_ADDR
// vc_chassis := us_morphling ;
31274: LD_ADDR_OWVAR 37
31278: PUSH
31279: LD_INT 5
31281: ST_TO_ADDR
// vc_engine := engine_siberite ;
31282: LD_ADDR_OWVAR 39
31286: PUSH
31287: LD_INT 3
31289: ST_TO_ADDR
// vc_control := control_computer ;
31290: LD_ADDR_OWVAR 38
31294: PUSH
31295: LD_INT 3
31297: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
31298: LD_ADDR_OWVAR 40
31302: PUSH
31303: LD_INT 8
31305: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31306: CALL_OW 45
31310: PPUSH
31311: LD_INT 1
31313: PPUSH
31314: CALL_OW 51
// end ; end_of_file
31318: LD_VAR 0 1
31322: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31323: LD_INT 0
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31329: LD_VAR 0 1
31333: PPUSH
31334: CALL_OW 264
31338: PUSH
31339: LD_EXP 66
31343: EQUAL
31344: IFFALSE 31416
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31346: LD_INT 68
31348: PPUSH
31349: LD_VAR 0 1
31353: PPUSH
31354: CALL_OW 255
31358: PPUSH
31359: CALL_OW 321
31363: PUSH
31364: LD_INT 2
31366: EQUAL
31367: IFFALSE 31379
// eff := 70 else
31369: LD_ADDR_VAR 0 4
31373: PUSH
31374: LD_INT 70
31376: ST_TO_ADDR
31377: GO 31387
// eff := 30 ;
31379: LD_ADDR_VAR 0 4
31383: PUSH
31384: LD_INT 30
31386: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31387: LD_VAR 0 1
31391: PPUSH
31392: CALL_OW 250
31396: PPUSH
31397: LD_VAR 0 1
31401: PPUSH
31402: CALL_OW 251
31406: PPUSH
31407: LD_VAR 0 4
31411: PPUSH
31412: CALL_OW 495
// end ; end ;
31416: LD_VAR 0 2
31420: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31421: LD_INT 0
31423: PPUSH
// end ;
31424: LD_VAR 0 4
31428: RET
// export function SOS_Command ( cmd ) ; begin
31429: LD_INT 0
31431: PPUSH
// end ;
31432: LD_VAR 0 2
31436: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31437: LD_VAR 0 1
31441: PUSH
31442: LD_INT 254
31444: EQUAL
31445: PUSH
31446: LD_VAR 0 2
31450: PPUSH
31451: CALL_OW 264
31455: PUSH
31456: LD_EXP 64
31460: EQUAL
31461: AND
31462: PUSH
31463: LD_VAR 0 3
31467: PPUSH
31468: CALL_OW 263
31472: PUSH
31473: LD_INT 3
31475: EQUAL
31476: AND
31477: IFFALSE 31493
// HackDestroyVehicle ( unit , selectedUnit ) ;
31479: LD_VAR 0 2
31483: PPUSH
31484: LD_VAR 0 3
31488: PPUSH
31489: CALL 33000 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31493: LD_VAR 0 1
31497: PUSH
31498: LD_INT 255
31500: EQUAL
31501: PUSH
31502: LD_VAR 0 2
31506: PPUSH
31507: CALL_OW 264
31511: PUSH
31512: LD_INT 14
31514: PUSH
31515: LD_INT 53
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: IN
31522: AND
31523: PUSH
31524: LD_VAR 0 4
31528: PPUSH
31529: LD_VAR 0 5
31533: PPUSH
31534: CALL_OW 488
31538: AND
31539: IFFALSE 31563
// CutTreeXYR ( unit , x , y , 12 ) ;
31541: LD_VAR 0 2
31545: PPUSH
31546: LD_VAR 0 4
31550: PPUSH
31551: LD_VAR 0 5
31555: PPUSH
31556: LD_INT 12
31558: PPUSH
31559: CALL 31566 0 4
// end ;
31563: PPOPN 5
31565: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31566: LD_INT 0
31568: PPUSH
31569: PPUSH
31570: PPUSH
31571: PPUSH
31572: PPUSH
31573: PPUSH
31574: PPUSH
31575: PPUSH
31576: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31577: LD_VAR 0 1
31581: NOT
31582: PUSH
31583: LD_VAR 0 2
31587: PPUSH
31588: LD_VAR 0 3
31592: PPUSH
31593: CALL_OW 488
31597: NOT
31598: OR
31599: PUSH
31600: LD_VAR 0 4
31604: NOT
31605: OR
31606: IFFALSE 31610
// exit ;
31608: GO 31950
// list := [ ] ;
31610: LD_ADDR_VAR 0 13
31614: PUSH
31615: EMPTY
31616: ST_TO_ADDR
// if x - r < 0 then
31617: LD_VAR 0 2
31621: PUSH
31622: LD_VAR 0 4
31626: MINUS
31627: PUSH
31628: LD_INT 0
31630: LESS
31631: IFFALSE 31643
// min_x := 0 else
31633: LD_ADDR_VAR 0 7
31637: PUSH
31638: LD_INT 0
31640: ST_TO_ADDR
31641: GO 31659
// min_x := x - r ;
31643: LD_ADDR_VAR 0 7
31647: PUSH
31648: LD_VAR 0 2
31652: PUSH
31653: LD_VAR 0 4
31657: MINUS
31658: ST_TO_ADDR
// if y - r < 0 then
31659: LD_VAR 0 3
31663: PUSH
31664: LD_VAR 0 4
31668: MINUS
31669: PUSH
31670: LD_INT 0
31672: LESS
31673: IFFALSE 31685
// min_y := 0 else
31675: LD_ADDR_VAR 0 8
31679: PUSH
31680: LD_INT 0
31682: ST_TO_ADDR
31683: GO 31701
// min_y := y - r ;
31685: LD_ADDR_VAR 0 8
31689: PUSH
31690: LD_VAR 0 3
31694: PUSH
31695: LD_VAR 0 4
31699: MINUS
31700: ST_TO_ADDR
// max_x := x + r ;
31701: LD_ADDR_VAR 0 9
31705: PUSH
31706: LD_VAR 0 2
31710: PUSH
31711: LD_VAR 0 4
31715: PLUS
31716: ST_TO_ADDR
// max_y := y + r ;
31717: LD_ADDR_VAR 0 10
31721: PUSH
31722: LD_VAR 0 3
31726: PUSH
31727: LD_VAR 0 4
31731: PLUS
31732: ST_TO_ADDR
// for _x = min_x to max_x do
31733: LD_ADDR_VAR 0 11
31737: PUSH
31738: DOUBLE
31739: LD_VAR 0 7
31743: DEC
31744: ST_TO_ADDR
31745: LD_VAR 0 9
31749: PUSH
31750: FOR_TO
31751: IFFALSE 31868
// for _y = min_y to max_y do
31753: LD_ADDR_VAR 0 12
31757: PUSH
31758: DOUBLE
31759: LD_VAR 0 8
31763: DEC
31764: ST_TO_ADDR
31765: LD_VAR 0 10
31769: PUSH
31770: FOR_TO
31771: IFFALSE 31864
// begin if not ValidHex ( _x , _y ) then
31773: LD_VAR 0 11
31777: PPUSH
31778: LD_VAR 0 12
31782: PPUSH
31783: CALL_OW 488
31787: NOT
31788: IFFALSE 31792
// continue ;
31790: GO 31770
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31792: LD_VAR 0 11
31796: PPUSH
31797: LD_VAR 0 12
31801: PPUSH
31802: CALL_OW 351
31806: PUSH
31807: LD_VAR 0 11
31811: PPUSH
31812: LD_VAR 0 12
31816: PPUSH
31817: CALL_OW 554
31821: AND
31822: IFFALSE 31862
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31824: LD_ADDR_VAR 0 13
31828: PUSH
31829: LD_VAR 0 13
31833: PPUSH
31834: LD_VAR 0 13
31838: PUSH
31839: LD_INT 1
31841: PLUS
31842: PPUSH
31843: LD_VAR 0 11
31847: PUSH
31848: LD_VAR 0 12
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PPUSH
31857: CALL_OW 2
31861: ST_TO_ADDR
// end ;
31862: GO 31770
31864: POP
31865: POP
31866: GO 31750
31868: POP
31869: POP
// if not list then
31870: LD_VAR 0 13
31874: NOT
31875: IFFALSE 31879
// exit ;
31877: GO 31950
// for i in list do
31879: LD_ADDR_VAR 0 6
31883: PUSH
31884: LD_VAR 0 13
31888: PUSH
31889: FOR_IN
31890: IFFALSE 31948
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31892: LD_VAR 0 1
31896: PPUSH
31897: LD_STRING M
31899: PUSH
31900: LD_VAR 0 6
31904: PUSH
31905: LD_INT 1
31907: ARRAY
31908: PUSH
31909: LD_VAR 0 6
31913: PUSH
31914: LD_INT 2
31916: ARRAY
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: PPUSH
31942: CALL_OW 447
31946: GO 31889
31948: POP
31949: POP
// end ;
31950: LD_VAR 0 5
31954: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31955: LD_EXP 132
31959: NOT
31960: IFFALSE 32010
31962: GO 31964
31964: DISABLE
// begin initHack := true ;
31965: LD_ADDR_EXP 132
31969: PUSH
31970: LD_INT 1
31972: ST_TO_ADDR
// hackTanks := [ ] ;
31973: LD_ADDR_EXP 133
31977: PUSH
31978: EMPTY
31979: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31980: LD_ADDR_EXP 134
31984: PUSH
31985: EMPTY
31986: ST_TO_ADDR
// hackLimit := 3 ;
31987: LD_ADDR_EXP 135
31991: PUSH
31992: LD_INT 3
31994: ST_TO_ADDR
// hackDist := 12 ;
31995: LD_ADDR_EXP 136
31999: PUSH
32000: LD_INT 12
32002: ST_TO_ADDR
// hackCounter := [ ] ;
32003: LD_ADDR_EXP 137
32007: PUSH
32008: EMPTY
32009: ST_TO_ADDR
// end ;
32010: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32011: LD_EXP 132
32015: PUSH
32016: LD_INT 34
32018: PUSH
32019: LD_EXP 64
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PPUSH
32028: CALL_OW 69
32032: AND
32033: IFFALSE 32288
32035: GO 32037
32037: DISABLE
32038: LD_INT 0
32040: PPUSH
32041: PPUSH
// begin enable ;
32042: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32043: LD_ADDR_VAR 0 1
32047: PUSH
32048: LD_INT 34
32050: PUSH
32051: LD_EXP 64
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PPUSH
32060: CALL_OW 69
32064: PUSH
32065: FOR_IN
32066: IFFALSE 32286
// begin if not i in hackTanks then
32068: LD_VAR 0 1
32072: PUSH
32073: LD_EXP 133
32077: IN
32078: NOT
32079: IFFALSE 32162
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32081: LD_ADDR_EXP 133
32085: PUSH
32086: LD_EXP 133
32090: PPUSH
32091: LD_EXP 133
32095: PUSH
32096: LD_INT 1
32098: PLUS
32099: PPUSH
32100: LD_VAR 0 1
32104: PPUSH
32105: CALL_OW 1
32109: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32110: LD_ADDR_EXP 134
32114: PUSH
32115: LD_EXP 134
32119: PPUSH
32120: LD_EXP 134
32124: PUSH
32125: LD_INT 1
32127: PLUS
32128: PPUSH
32129: EMPTY
32130: PPUSH
32131: CALL_OW 1
32135: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32136: LD_ADDR_EXP 137
32140: PUSH
32141: LD_EXP 137
32145: PPUSH
32146: LD_EXP 137
32150: PUSH
32151: LD_INT 1
32153: PLUS
32154: PPUSH
32155: EMPTY
32156: PPUSH
32157: CALL_OW 1
32161: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32162: LD_VAR 0 1
32166: PPUSH
32167: CALL_OW 302
32171: NOT
32172: IFFALSE 32185
// begin HackUnlinkAll ( i ) ;
32174: LD_VAR 0 1
32178: PPUSH
32179: CALL 32291 0 1
// continue ;
32183: GO 32065
// end ; HackCheckCapturedStatus ( i ) ;
32185: LD_VAR 0 1
32189: PPUSH
32190: CALL 32734 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32194: LD_ADDR_VAR 0 2
32198: PUSH
32199: LD_INT 81
32201: PUSH
32202: LD_VAR 0 1
32206: PPUSH
32207: CALL_OW 255
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 33
32218: PUSH
32219: LD_INT 3
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 91
32228: PUSH
32229: LD_VAR 0 1
32233: PUSH
32234: LD_EXP 136
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 50
32246: PUSH
32247: EMPTY
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: PPUSH
32256: CALL_OW 69
32260: ST_TO_ADDR
// if not tmp then
32261: LD_VAR 0 2
32265: NOT
32266: IFFALSE 32270
// continue ;
32268: GO 32065
// HackLink ( i , tmp ) ;
32270: LD_VAR 0 1
32274: PPUSH
32275: LD_VAR 0 2
32279: PPUSH
32280: CALL 32427 0 2
// end ;
32284: GO 32065
32286: POP
32287: POP
// end ;
32288: PPOPN 2
32290: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32291: LD_INT 0
32293: PPUSH
32294: PPUSH
32295: PPUSH
// if not hack in hackTanks then
32296: LD_VAR 0 1
32300: PUSH
32301: LD_EXP 133
32305: IN
32306: NOT
32307: IFFALSE 32311
// exit ;
32309: GO 32422
// index := GetElementIndex ( hackTanks , hack ) ;
32311: LD_ADDR_VAR 0 4
32315: PUSH
32316: LD_EXP 133
32320: PPUSH
32321: LD_VAR 0 1
32325: PPUSH
32326: CALL 37842 0 2
32330: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32331: LD_EXP 134
32335: PUSH
32336: LD_VAR 0 4
32340: ARRAY
32341: IFFALSE 32422
// begin for i in hackTanksCaptured [ index ] do
32343: LD_ADDR_VAR 0 3
32347: PUSH
32348: LD_EXP 134
32352: PUSH
32353: LD_VAR 0 4
32357: ARRAY
32358: PUSH
32359: FOR_IN
32360: IFFALSE 32386
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32362: LD_VAR 0 3
32366: PUSH
32367: LD_INT 1
32369: ARRAY
32370: PPUSH
32371: LD_VAR 0 3
32375: PUSH
32376: LD_INT 2
32378: ARRAY
32379: PPUSH
32380: CALL_OW 235
32384: GO 32359
32386: POP
32387: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32388: LD_ADDR_EXP 134
32392: PUSH
32393: LD_EXP 134
32397: PPUSH
32398: LD_VAR 0 4
32402: PPUSH
32403: EMPTY
32404: PPUSH
32405: CALL_OW 1
32409: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32410: LD_VAR 0 1
32414: PPUSH
32415: LD_INT 0
32417: PPUSH
32418: CALL_OW 505
// end ; end ;
32422: LD_VAR 0 2
32426: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32427: LD_INT 0
32429: PPUSH
32430: PPUSH
32431: PPUSH
// if not hack in hackTanks or not vehicles then
32432: LD_VAR 0 1
32436: PUSH
32437: LD_EXP 133
32441: IN
32442: NOT
32443: PUSH
32444: LD_VAR 0 2
32448: NOT
32449: OR
32450: IFFALSE 32454
// exit ;
32452: GO 32729
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32454: LD_ADDR_VAR 0 2
32458: PUSH
32459: LD_VAR 0 1
32463: PPUSH
32464: LD_VAR 0 2
32468: PPUSH
32469: LD_INT 1
32471: PPUSH
32472: LD_INT 1
32474: PPUSH
32475: CALL 38492 0 4
32479: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32480: LD_ADDR_VAR 0 5
32484: PUSH
32485: LD_EXP 133
32489: PPUSH
32490: LD_VAR 0 1
32494: PPUSH
32495: CALL 37842 0 2
32499: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32500: LD_EXP 134
32504: PUSH
32505: LD_VAR 0 5
32509: ARRAY
32510: PUSH
32511: LD_EXP 135
32515: LESS
32516: IFFALSE 32705
// begin for i := 1 to vehicles do
32518: LD_ADDR_VAR 0 4
32522: PUSH
32523: DOUBLE
32524: LD_INT 1
32526: DEC
32527: ST_TO_ADDR
32528: LD_VAR 0 2
32532: PUSH
32533: FOR_TO
32534: IFFALSE 32703
// begin if hackTanksCaptured [ index ] = hackLimit then
32536: LD_EXP 134
32540: PUSH
32541: LD_VAR 0 5
32545: ARRAY
32546: PUSH
32547: LD_EXP 135
32551: EQUAL
32552: IFFALSE 32556
// break ;
32554: GO 32703
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32556: LD_ADDR_EXP 137
32560: PUSH
32561: LD_EXP 137
32565: PPUSH
32566: LD_VAR 0 5
32570: PPUSH
32571: LD_EXP 137
32575: PUSH
32576: LD_VAR 0 5
32580: ARRAY
32581: PUSH
32582: LD_INT 1
32584: PLUS
32585: PPUSH
32586: CALL_OW 1
32590: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32591: LD_ADDR_EXP 134
32595: PUSH
32596: LD_EXP 134
32600: PPUSH
32601: LD_VAR 0 5
32605: PUSH
32606: LD_EXP 134
32610: PUSH
32611: LD_VAR 0 5
32615: ARRAY
32616: PUSH
32617: LD_INT 1
32619: PLUS
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PPUSH
32625: LD_VAR 0 2
32629: PUSH
32630: LD_VAR 0 4
32634: ARRAY
32635: PUSH
32636: LD_VAR 0 2
32640: PUSH
32641: LD_VAR 0 4
32645: ARRAY
32646: PPUSH
32647: CALL_OW 255
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PPUSH
32656: CALL 38057 0 3
32660: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32661: LD_VAR 0 2
32665: PUSH
32666: LD_VAR 0 4
32670: ARRAY
32671: PPUSH
32672: LD_VAR 0 1
32676: PPUSH
32677: CALL_OW 255
32681: PPUSH
32682: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32686: LD_VAR 0 2
32690: PUSH
32691: LD_VAR 0 4
32695: ARRAY
32696: PPUSH
32697: CALL_OW 141
// end ;
32701: GO 32533
32703: POP
32704: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32705: LD_VAR 0 1
32709: PPUSH
32710: LD_EXP 134
32714: PUSH
32715: LD_VAR 0 5
32719: ARRAY
32720: PUSH
32721: LD_INT 0
32723: PLUS
32724: PPUSH
32725: CALL_OW 505
// end ;
32729: LD_VAR 0 3
32733: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32734: LD_INT 0
32736: PPUSH
32737: PPUSH
32738: PPUSH
32739: PPUSH
// if not hack in hackTanks then
32740: LD_VAR 0 1
32744: PUSH
32745: LD_EXP 133
32749: IN
32750: NOT
32751: IFFALSE 32755
// exit ;
32753: GO 32995
// index := GetElementIndex ( hackTanks , hack ) ;
32755: LD_ADDR_VAR 0 4
32759: PUSH
32760: LD_EXP 133
32764: PPUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL 37842 0 2
32774: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32775: LD_ADDR_VAR 0 3
32779: PUSH
32780: DOUBLE
32781: LD_EXP 134
32785: PUSH
32786: LD_VAR 0 4
32790: ARRAY
32791: INC
32792: ST_TO_ADDR
32793: LD_INT 1
32795: PUSH
32796: FOR_DOWNTO
32797: IFFALSE 32969
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32799: LD_ADDR_VAR 0 5
32803: PUSH
32804: LD_EXP 134
32808: PUSH
32809: LD_VAR 0 4
32813: ARRAY
32814: PUSH
32815: LD_VAR 0 3
32819: ARRAY
32820: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32821: LD_VAR 0 5
32825: PUSH
32826: LD_INT 1
32828: ARRAY
32829: PPUSH
32830: CALL_OW 302
32834: NOT
32835: PUSH
32836: LD_VAR 0 5
32840: PUSH
32841: LD_INT 1
32843: ARRAY
32844: PPUSH
32845: CALL_OW 255
32849: PUSH
32850: LD_VAR 0 1
32854: PPUSH
32855: CALL_OW 255
32859: NONEQUAL
32860: OR
32861: IFFALSE 32967
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32863: LD_VAR 0 5
32867: PUSH
32868: LD_INT 1
32870: ARRAY
32871: PPUSH
32872: CALL_OW 305
32876: PUSH
32877: LD_VAR 0 5
32881: PUSH
32882: LD_INT 1
32884: ARRAY
32885: PPUSH
32886: CALL_OW 255
32890: PUSH
32891: LD_VAR 0 1
32895: PPUSH
32896: CALL_OW 255
32900: EQUAL
32901: AND
32902: IFFALSE 32926
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32904: LD_VAR 0 5
32908: PUSH
32909: LD_INT 1
32911: ARRAY
32912: PPUSH
32913: LD_VAR 0 5
32917: PUSH
32918: LD_INT 2
32920: ARRAY
32921: PPUSH
32922: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32926: LD_ADDR_EXP 134
32930: PUSH
32931: LD_EXP 134
32935: PPUSH
32936: LD_VAR 0 4
32940: PPUSH
32941: LD_EXP 134
32945: PUSH
32946: LD_VAR 0 4
32950: ARRAY
32951: PPUSH
32952: LD_VAR 0 3
32956: PPUSH
32957: CALL_OW 3
32961: PPUSH
32962: CALL_OW 1
32966: ST_TO_ADDR
// end ; end ;
32967: GO 32796
32969: POP
32970: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32971: LD_VAR 0 1
32975: PPUSH
32976: LD_EXP 134
32980: PUSH
32981: LD_VAR 0 4
32985: ARRAY
32986: PUSH
32987: LD_INT 0
32989: PLUS
32990: PPUSH
32991: CALL_OW 505
// end ;
32995: LD_VAR 0 2
32999: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33000: LD_INT 0
33002: PPUSH
33003: PPUSH
33004: PPUSH
33005: PPUSH
// if not hack in hackTanks then
33006: LD_VAR 0 1
33010: PUSH
33011: LD_EXP 133
33015: IN
33016: NOT
33017: IFFALSE 33021
// exit ;
33019: GO 33106
// index := GetElementIndex ( hackTanks , hack ) ;
33021: LD_ADDR_VAR 0 5
33025: PUSH
33026: LD_EXP 133
33030: PPUSH
33031: LD_VAR 0 1
33035: PPUSH
33036: CALL 37842 0 2
33040: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33041: LD_ADDR_VAR 0 4
33045: PUSH
33046: DOUBLE
33047: LD_INT 1
33049: DEC
33050: ST_TO_ADDR
33051: LD_EXP 134
33055: PUSH
33056: LD_VAR 0 5
33060: ARRAY
33061: PUSH
33062: FOR_TO
33063: IFFALSE 33104
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33065: LD_EXP 134
33069: PUSH
33070: LD_VAR 0 5
33074: ARRAY
33075: PUSH
33076: LD_VAR 0 4
33080: ARRAY
33081: PUSH
33082: LD_INT 1
33084: ARRAY
33085: PUSH
33086: LD_VAR 0 2
33090: EQUAL
33091: IFFALSE 33102
// KillUnit ( vehicle ) ;
33093: LD_VAR 0 2
33097: PPUSH
33098: CALL_OW 66
33102: GO 33062
33104: POP
33105: POP
// end ; end_of_file
33106: LD_VAR 0 3
33110: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33111: LD_INT 0
33113: PPUSH
33114: PPUSH
// if exist_mode then
33115: LD_VAR 0 2
33119: IFFALSE 33144
// unit := CreateCharacter ( prefix & ident ) else
33121: LD_ADDR_VAR 0 5
33125: PUSH
33126: LD_VAR 0 3
33130: PUSH
33131: LD_VAR 0 1
33135: STR
33136: PPUSH
33137: CALL_OW 34
33141: ST_TO_ADDR
33142: GO 33159
// unit := NewCharacter ( ident ) ;
33144: LD_ADDR_VAR 0 5
33148: PUSH
33149: LD_VAR 0 1
33153: PPUSH
33154: CALL_OW 25
33158: ST_TO_ADDR
// result := unit ;
33159: LD_ADDR_VAR 0 4
33163: PUSH
33164: LD_VAR 0 5
33168: ST_TO_ADDR
// end ;
33169: LD_VAR 0 4
33173: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33174: LD_INT 0
33176: PPUSH
33177: PPUSH
// if not side or not nation then
33178: LD_VAR 0 1
33182: NOT
33183: PUSH
33184: LD_VAR 0 2
33188: NOT
33189: OR
33190: IFFALSE 33194
// exit ;
33192: GO 33958
// case nation of nation_american :
33194: LD_VAR 0 2
33198: PUSH
33199: LD_INT 1
33201: DOUBLE
33202: EQUAL
33203: IFTRUE 33207
33205: GO 33421
33207: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33208: LD_ADDR_VAR 0 4
33212: PUSH
33213: LD_INT 35
33215: PUSH
33216: LD_INT 45
33218: PUSH
33219: LD_INT 46
33221: PUSH
33222: LD_INT 47
33224: PUSH
33225: LD_INT 82
33227: PUSH
33228: LD_INT 83
33230: PUSH
33231: LD_INT 84
33233: PUSH
33234: LD_INT 85
33236: PUSH
33237: LD_INT 86
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: LD_INT 6
33248: PUSH
33249: LD_INT 15
33251: PUSH
33252: LD_INT 16
33254: PUSH
33255: LD_INT 7
33257: PUSH
33258: LD_INT 12
33260: PUSH
33261: LD_INT 13
33263: PUSH
33264: LD_INT 10
33266: PUSH
33267: LD_INT 14
33269: PUSH
33270: LD_INT 20
33272: PUSH
33273: LD_INT 21
33275: PUSH
33276: LD_INT 22
33278: PUSH
33279: LD_INT 25
33281: PUSH
33282: LD_INT 32
33284: PUSH
33285: LD_INT 27
33287: PUSH
33288: LD_INT 36
33290: PUSH
33291: LD_INT 69
33293: PUSH
33294: LD_INT 39
33296: PUSH
33297: LD_INT 34
33299: PUSH
33300: LD_INT 40
33302: PUSH
33303: LD_INT 48
33305: PUSH
33306: LD_INT 49
33308: PUSH
33309: LD_INT 50
33311: PUSH
33312: LD_INT 51
33314: PUSH
33315: LD_INT 52
33317: PUSH
33318: LD_INT 53
33320: PUSH
33321: LD_INT 54
33323: PUSH
33324: LD_INT 55
33326: PUSH
33327: LD_INT 56
33329: PUSH
33330: LD_INT 57
33332: PUSH
33333: LD_INT 58
33335: PUSH
33336: LD_INT 59
33338: PUSH
33339: LD_INT 60
33341: PUSH
33342: LD_INT 61
33344: PUSH
33345: LD_INT 62
33347: PUSH
33348: LD_INT 80
33350: PUSH
33351: LD_INT 82
33353: PUSH
33354: LD_INT 83
33356: PUSH
33357: LD_INT 84
33359: PUSH
33360: LD_INT 85
33362: PUSH
33363: LD_INT 86
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: ST_TO_ADDR
33419: GO 33882
33421: LD_INT 2
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33429
33427: GO 33651
33429: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
33430: LD_ADDR_VAR 0 4
33434: PUSH
33435: LD_INT 35
33437: PUSH
33438: LD_INT 45
33440: PUSH
33441: LD_INT 46
33443: PUSH
33444: LD_INT 47
33446: PUSH
33447: LD_INT 82
33449: PUSH
33450: LD_INT 83
33452: PUSH
33453: LD_INT 84
33455: PUSH
33456: LD_INT 85
33458: PUSH
33459: LD_INT 87
33461: PUSH
33462: LD_INT 70
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: LD_INT 11
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 4
33476: PUSH
33477: LD_INT 5
33479: PUSH
33480: LD_INT 6
33482: PUSH
33483: LD_INT 15
33485: PUSH
33486: LD_INT 18
33488: PUSH
33489: LD_INT 7
33491: PUSH
33492: LD_INT 17
33494: PUSH
33495: LD_INT 8
33497: PUSH
33498: LD_INT 20
33500: PUSH
33501: LD_INT 21
33503: PUSH
33504: LD_INT 22
33506: PUSH
33507: LD_INT 72
33509: PUSH
33510: LD_INT 26
33512: PUSH
33513: LD_INT 69
33515: PUSH
33516: LD_INT 39
33518: PUSH
33519: LD_INT 40
33521: PUSH
33522: LD_INT 41
33524: PUSH
33525: LD_INT 42
33527: PUSH
33528: LD_INT 43
33530: PUSH
33531: LD_INT 48
33533: PUSH
33534: LD_INT 49
33536: PUSH
33537: LD_INT 50
33539: PUSH
33540: LD_INT 51
33542: PUSH
33543: LD_INT 52
33545: PUSH
33546: LD_INT 53
33548: PUSH
33549: LD_INT 54
33551: PUSH
33552: LD_INT 55
33554: PUSH
33555: LD_INT 56
33557: PUSH
33558: LD_INT 60
33560: PUSH
33561: LD_INT 61
33563: PUSH
33564: LD_INT 62
33566: PUSH
33567: LD_INT 66
33569: PUSH
33570: LD_INT 67
33572: PUSH
33573: LD_INT 68
33575: PUSH
33576: LD_INT 81
33578: PUSH
33579: LD_INT 82
33581: PUSH
33582: LD_INT 83
33584: PUSH
33585: LD_INT 84
33587: PUSH
33588: LD_INT 85
33590: PUSH
33591: LD_INT 87
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: ST_TO_ADDR
33649: GO 33882
33651: LD_INT 3
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33659
33657: GO 33881
33659: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33660: LD_ADDR_VAR 0 4
33664: PUSH
33665: LD_INT 46
33667: PUSH
33668: LD_INT 47
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: LD_INT 2
33676: PUSH
33677: LD_INT 82
33679: PUSH
33680: LD_INT 83
33682: PUSH
33683: LD_INT 84
33685: PUSH
33686: LD_INT 85
33688: PUSH
33689: LD_INT 86
33691: PUSH
33692: LD_INT 11
33694: PUSH
33695: LD_INT 9
33697: PUSH
33698: LD_INT 20
33700: PUSH
33701: LD_INT 19
33703: PUSH
33704: LD_INT 21
33706: PUSH
33707: LD_INT 24
33709: PUSH
33710: LD_INT 22
33712: PUSH
33713: LD_INT 25
33715: PUSH
33716: LD_INT 28
33718: PUSH
33719: LD_INT 29
33721: PUSH
33722: LD_INT 30
33724: PUSH
33725: LD_INT 31
33727: PUSH
33728: LD_INT 37
33730: PUSH
33731: LD_INT 38
33733: PUSH
33734: LD_INT 32
33736: PUSH
33737: LD_INT 27
33739: PUSH
33740: LD_INT 33
33742: PUSH
33743: LD_INT 69
33745: PUSH
33746: LD_INT 39
33748: PUSH
33749: LD_INT 34
33751: PUSH
33752: LD_INT 40
33754: PUSH
33755: LD_INT 71
33757: PUSH
33758: LD_INT 23
33760: PUSH
33761: LD_INT 44
33763: PUSH
33764: LD_INT 48
33766: PUSH
33767: LD_INT 49
33769: PUSH
33770: LD_INT 50
33772: PUSH
33773: LD_INT 51
33775: PUSH
33776: LD_INT 52
33778: PUSH
33779: LD_INT 53
33781: PUSH
33782: LD_INT 54
33784: PUSH
33785: LD_INT 55
33787: PUSH
33788: LD_INT 56
33790: PUSH
33791: LD_INT 57
33793: PUSH
33794: LD_INT 58
33796: PUSH
33797: LD_INT 59
33799: PUSH
33800: LD_INT 63
33802: PUSH
33803: LD_INT 64
33805: PUSH
33806: LD_INT 65
33808: PUSH
33809: LD_INT 82
33811: PUSH
33812: LD_INT 83
33814: PUSH
33815: LD_INT 84
33817: PUSH
33818: LD_INT 85
33820: PUSH
33821: LD_INT 86
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
33879: GO 33882
33881: POP
// if state > - 1 and state < 3 then
33882: LD_VAR 0 3
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: GREATER
33891: PUSH
33892: LD_VAR 0 3
33896: PUSH
33897: LD_INT 3
33899: LESS
33900: AND
33901: IFFALSE 33958
// for i in result do
33903: LD_ADDR_VAR 0 5
33907: PUSH
33908: LD_VAR 0 4
33912: PUSH
33913: FOR_IN
33914: IFFALSE 33956
// if GetTech ( i , side ) <> state then
33916: LD_VAR 0 5
33920: PPUSH
33921: LD_VAR 0 1
33925: PPUSH
33926: CALL_OW 321
33930: PUSH
33931: LD_VAR 0 3
33935: NONEQUAL
33936: IFFALSE 33954
// result := result diff i ;
33938: LD_ADDR_VAR 0 4
33942: PUSH
33943: LD_VAR 0 4
33947: PUSH
33948: LD_VAR 0 5
33952: DIFF
33953: ST_TO_ADDR
33954: GO 33913
33956: POP
33957: POP
// end ;
33958: LD_VAR 0 4
33962: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33963: LD_INT 0
33965: PPUSH
33966: PPUSH
33967: PPUSH
// result := true ;
33968: LD_ADDR_VAR 0 3
33972: PUSH
33973: LD_INT 1
33975: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33976: LD_ADDR_VAR 0 5
33980: PUSH
33981: LD_VAR 0 2
33985: PPUSH
33986: CALL_OW 480
33990: ST_TO_ADDR
// if not tmp then
33991: LD_VAR 0 5
33995: NOT
33996: IFFALSE 34000
// exit ;
33998: GO 34049
// for i in tmp do
34000: LD_ADDR_VAR 0 4
34004: PUSH
34005: LD_VAR 0 5
34009: PUSH
34010: FOR_IN
34011: IFFALSE 34047
// if GetTech ( i , side ) <> state_researched then
34013: LD_VAR 0 4
34017: PPUSH
34018: LD_VAR 0 1
34022: PPUSH
34023: CALL_OW 321
34027: PUSH
34028: LD_INT 2
34030: NONEQUAL
34031: IFFALSE 34045
// begin result := false ;
34033: LD_ADDR_VAR 0 3
34037: PUSH
34038: LD_INT 0
34040: ST_TO_ADDR
// exit ;
34041: POP
34042: POP
34043: GO 34049
// end ;
34045: GO 34010
34047: POP
34048: POP
// end ;
34049: LD_VAR 0 3
34053: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34054: LD_INT 0
34056: PPUSH
34057: PPUSH
34058: PPUSH
34059: PPUSH
34060: PPUSH
34061: PPUSH
34062: PPUSH
34063: PPUSH
34064: PPUSH
34065: PPUSH
34066: PPUSH
34067: PPUSH
34068: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34069: LD_VAR 0 1
34073: NOT
34074: PUSH
34075: LD_VAR 0 1
34079: PPUSH
34080: CALL_OW 257
34084: PUSH
34085: LD_INT 9
34087: NONEQUAL
34088: OR
34089: IFFALSE 34093
// exit ;
34091: GO 34666
// side := GetSide ( unit ) ;
34093: LD_ADDR_VAR 0 9
34097: PUSH
34098: LD_VAR 0 1
34102: PPUSH
34103: CALL_OW 255
34107: ST_TO_ADDR
// tech_space := tech_spacanom ;
34108: LD_ADDR_VAR 0 12
34112: PUSH
34113: LD_INT 29
34115: ST_TO_ADDR
// tech_time := tech_taurad ;
34116: LD_ADDR_VAR 0 13
34120: PUSH
34121: LD_INT 28
34123: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34124: LD_ADDR_VAR 0 11
34128: PUSH
34129: LD_VAR 0 1
34133: PPUSH
34134: CALL_OW 310
34138: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34139: LD_VAR 0 11
34143: PPUSH
34144: CALL_OW 247
34148: PUSH
34149: LD_INT 2
34151: EQUAL
34152: IFFALSE 34156
// exit ;
34154: GO 34666
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34156: LD_ADDR_VAR 0 8
34160: PUSH
34161: LD_INT 81
34163: PUSH
34164: LD_VAR 0 9
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: LD_INT 21
34178: PUSH
34179: LD_INT 3
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PPUSH
34194: CALL_OW 69
34198: ST_TO_ADDR
// if not tmp then
34199: LD_VAR 0 8
34203: NOT
34204: IFFALSE 34208
// exit ;
34206: GO 34666
// if in_unit then
34208: LD_VAR 0 11
34212: IFFALSE 34236
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34214: LD_ADDR_VAR 0 10
34218: PUSH
34219: LD_VAR 0 8
34223: PPUSH
34224: LD_VAR 0 11
34228: PPUSH
34229: CALL_OW 74
34233: ST_TO_ADDR
34234: GO 34256
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34236: LD_ADDR_VAR 0 10
34240: PUSH
34241: LD_VAR 0 8
34245: PPUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: CALL_OW 74
34255: ST_TO_ADDR
// if not enemy then
34256: LD_VAR 0 10
34260: NOT
34261: IFFALSE 34265
// exit ;
34263: GO 34666
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34265: LD_VAR 0 11
34269: PUSH
34270: LD_VAR 0 11
34274: PPUSH
34275: LD_VAR 0 10
34279: PPUSH
34280: CALL_OW 296
34284: PUSH
34285: LD_INT 13
34287: GREATER
34288: AND
34289: PUSH
34290: LD_VAR 0 1
34294: PPUSH
34295: LD_VAR 0 10
34299: PPUSH
34300: CALL_OW 296
34304: PUSH
34305: LD_INT 12
34307: GREATER
34308: OR
34309: IFFALSE 34313
// exit ;
34311: GO 34666
// missile := [ 1 ] ;
34313: LD_ADDR_VAR 0 14
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: EMPTY
34322: LIST
34323: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34324: LD_VAR 0 9
34328: PPUSH
34329: LD_VAR 0 12
34333: PPUSH
34334: CALL_OW 325
34338: IFFALSE 34367
// missile := Insert ( missile , missile + 1 , 2 ) ;
34340: LD_ADDR_VAR 0 14
34344: PUSH
34345: LD_VAR 0 14
34349: PPUSH
34350: LD_VAR 0 14
34354: PUSH
34355: LD_INT 1
34357: PLUS
34358: PPUSH
34359: LD_INT 2
34361: PPUSH
34362: CALL_OW 2
34366: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34367: LD_VAR 0 9
34371: PPUSH
34372: LD_VAR 0 13
34376: PPUSH
34377: CALL_OW 325
34381: PUSH
34382: LD_VAR 0 10
34386: PPUSH
34387: CALL_OW 255
34391: PPUSH
34392: LD_VAR 0 13
34396: PPUSH
34397: CALL_OW 325
34401: NOT
34402: AND
34403: IFFALSE 34432
// missile := Insert ( missile , missile + 1 , 3 ) ;
34405: LD_ADDR_VAR 0 14
34409: PUSH
34410: LD_VAR 0 14
34414: PPUSH
34415: LD_VAR 0 14
34419: PUSH
34420: LD_INT 1
34422: PLUS
34423: PPUSH
34424: LD_INT 3
34426: PPUSH
34427: CALL_OW 2
34431: ST_TO_ADDR
// if missile < 2 then
34432: LD_VAR 0 14
34436: PUSH
34437: LD_INT 2
34439: LESS
34440: IFFALSE 34444
// exit ;
34442: GO 34666
// x := GetX ( enemy ) ;
34444: LD_ADDR_VAR 0 4
34448: PUSH
34449: LD_VAR 0 10
34453: PPUSH
34454: CALL_OW 250
34458: ST_TO_ADDR
// y := GetY ( enemy ) ;
34459: LD_ADDR_VAR 0 5
34463: PUSH
34464: LD_VAR 0 10
34468: PPUSH
34469: CALL_OW 251
34473: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34474: LD_ADDR_VAR 0 6
34478: PUSH
34479: LD_VAR 0 4
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PPUSH
34488: LD_INT 1
34490: PPUSH
34491: CALL_OW 12
34495: PLUS
34496: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34497: LD_ADDR_VAR 0 7
34501: PUSH
34502: LD_VAR 0 5
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PPUSH
34511: LD_INT 1
34513: PPUSH
34514: CALL_OW 12
34518: PLUS
34519: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34520: LD_VAR 0 6
34524: PPUSH
34525: LD_VAR 0 7
34529: PPUSH
34530: CALL_OW 488
34534: NOT
34535: IFFALSE 34557
// begin _x := x ;
34537: LD_ADDR_VAR 0 6
34541: PUSH
34542: LD_VAR 0 4
34546: ST_TO_ADDR
// _y := y ;
34547: LD_ADDR_VAR 0 7
34551: PUSH
34552: LD_VAR 0 5
34556: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34557: LD_ADDR_VAR 0 3
34561: PUSH
34562: LD_INT 1
34564: PPUSH
34565: LD_VAR 0 14
34569: PPUSH
34570: CALL_OW 12
34574: ST_TO_ADDR
// case i of 1 :
34575: LD_VAR 0 3
34579: PUSH
34580: LD_INT 1
34582: DOUBLE
34583: EQUAL
34584: IFTRUE 34588
34586: GO 34605
34588: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34589: LD_VAR 0 1
34593: PPUSH
34594: LD_VAR 0 10
34598: PPUSH
34599: CALL_OW 115
34603: GO 34666
34605: LD_INT 2
34607: DOUBLE
34608: EQUAL
34609: IFTRUE 34613
34611: GO 34635
34613: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34614: LD_VAR 0 1
34618: PPUSH
34619: LD_VAR 0 6
34623: PPUSH
34624: LD_VAR 0 7
34628: PPUSH
34629: CALL_OW 153
34633: GO 34666
34635: LD_INT 3
34637: DOUBLE
34638: EQUAL
34639: IFTRUE 34643
34641: GO 34665
34643: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34644: LD_VAR 0 1
34648: PPUSH
34649: LD_VAR 0 6
34653: PPUSH
34654: LD_VAR 0 7
34658: PPUSH
34659: CALL_OW 154
34663: GO 34666
34665: POP
// end ;
34666: LD_VAR 0 2
34670: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34671: LD_INT 0
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
// if not unit or not building then
34679: LD_VAR 0 1
34683: NOT
34684: PUSH
34685: LD_VAR 0 2
34689: NOT
34690: OR
34691: IFFALSE 34695
// exit ;
34693: GO 34853
// x := GetX ( building ) ;
34695: LD_ADDR_VAR 0 5
34699: PUSH
34700: LD_VAR 0 2
34704: PPUSH
34705: CALL_OW 250
34709: ST_TO_ADDR
// y := GetY ( building ) ;
34710: LD_ADDR_VAR 0 6
34714: PUSH
34715: LD_VAR 0 2
34719: PPUSH
34720: CALL_OW 251
34724: ST_TO_ADDR
// for i = 0 to 5 do
34725: LD_ADDR_VAR 0 4
34729: PUSH
34730: DOUBLE
34731: LD_INT 0
34733: DEC
34734: ST_TO_ADDR
34735: LD_INT 5
34737: PUSH
34738: FOR_TO
34739: IFFALSE 34851
// begin _x := ShiftX ( x , i , 3 ) ;
34741: LD_ADDR_VAR 0 7
34745: PUSH
34746: LD_VAR 0 5
34750: PPUSH
34751: LD_VAR 0 4
34755: PPUSH
34756: LD_INT 3
34758: PPUSH
34759: CALL_OW 272
34763: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34764: LD_ADDR_VAR 0 8
34768: PUSH
34769: LD_VAR 0 6
34773: PPUSH
34774: LD_VAR 0 4
34778: PPUSH
34779: LD_INT 3
34781: PPUSH
34782: CALL_OW 273
34786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34787: LD_VAR 0 7
34791: PPUSH
34792: LD_VAR 0 8
34796: PPUSH
34797: CALL_OW 488
34801: NOT
34802: IFFALSE 34806
// continue ;
34804: GO 34738
// if HexInfo ( _x , _y ) = 0 then
34806: LD_VAR 0 7
34810: PPUSH
34811: LD_VAR 0 8
34815: PPUSH
34816: CALL_OW 428
34820: PUSH
34821: LD_INT 0
34823: EQUAL
34824: IFFALSE 34849
// begin ComMoveXY ( unit , _x , _y ) ;
34826: LD_VAR 0 1
34830: PPUSH
34831: LD_VAR 0 7
34835: PPUSH
34836: LD_VAR 0 8
34840: PPUSH
34841: CALL_OW 111
// exit ;
34845: POP
34846: POP
34847: GO 34853
// end ; end ;
34849: GO 34738
34851: POP
34852: POP
// end ;
34853: LD_VAR 0 3
34857: RET
// export function ScanBase ( side , base_area ) ; begin
34858: LD_INT 0
34860: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_VAR 0 2
34870: PPUSH
34871: LD_INT 81
34873: PUSH
34874: LD_VAR 0 1
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PPUSH
34883: CALL_OW 70
34887: ST_TO_ADDR
// end ;
34888: LD_VAR 0 3
34892: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34893: LD_INT 0
34895: PPUSH
34896: PPUSH
34897: PPUSH
34898: PPUSH
// result := false ;
34899: LD_ADDR_VAR 0 2
34903: PUSH
34904: LD_INT 0
34906: ST_TO_ADDR
// side := GetSide ( unit ) ;
34907: LD_ADDR_VAR 0 3
34911: PUSH
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 255
34921: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34922: LD_ADDR_VAR 0 4
34926: PUSH
34927: LD_VAR 0 1
34931: PPUSH
34932: CALL_OW 248
34936: ST_TO_ADDR
// case nat of 1 :
34937: LD_VAR 0 4
34941: PUSH
34942: LD_INT 1
34944: DOUBLE
34945: EQUAL
34946: IFTRUE 34950
34948: GO 34961
34950: POP
// tech := tech_lassight ; 2 :
34951: LD_ADDR_VAR 0 5
34955: PUSH
34956: LD_INT 12
34958: ST_TO_ADDR
34959: GO 35000
34961: LD_INT 2
34963: DOUBLE
34964: EQUAL
34965: IFTRUE 34969
34967: GO 34980
34969: POP
// tech := tech_mortar ; 3 :
34970: LD_ADDR_VAR 0 5
34974: PUSH
34975: LD_INT 41
34977: ST_TO_ADDR
34978: GO 35000
34980: LD_INT 3
34982: DOUBLE
34983: EQUAL
34984: IFTRUE 34988
34986: GO 34999
34988: POP
// tech := tech_bazooka ; end ;
34989: LD_ADDR_VAR 0 5
34993: PUSH
34994: LD_INT 44
34996: ST_TO_ADDR
34997: GO 35000
34999: POP
// if Researched ( side , tech ) then
35000: LD_VAR 0 3
35004: PPUSH
35005: LD_VAR 0 5
35009: PPUSH
35010: CALL_OW 325
35014: IFFALSE 35041
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35016: LD_ADDR_VAR 0 2
35020: PUSH
35021: LD_INT 5
35023: PUSH
35024: LD_INT 8
35026: PUSH
35027: LD_INT 9
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: PUSH
35035: LD_VAR 0 4
35039: ARRAY
35040: ST_TO_ADDR
// end ;
35041: LD_VAR 0 2
35045: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35046: LD_INT 0
35048: PPUSH
35049: PPUSH
35050: PPUSH
// if not mines then
35051: LD_VAR 0 2
35055: NOT
35056: IFFALSE 35060
// exit ;
35058: GO 35204
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35060: LD_ADDR_VAR 0 5
35064: PUSH
35065: LD_INT 81
35067: PUSH
35068: LD_VAR 0 1
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 3
35079: PUSH
35080: LD_INT 21
35082: PUSH
35083: LD_INT 3
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PPUSH
35098: CALL_OW 69
35102: ST_TO_ADDR
// for i in mines do
35103: LD_ADDR_VAR 0 4
35107: PUSH
35108: LD_VAR 0 2
35112: PUSH
35113: FOR_IN
35114: IFFALSE 35202
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35116: LD_VAR 0 4
35120: PUSH
35121: LD_INT 1
35123: ARRAY
35124: PPUSH
35125: LD_VAR 0 4
35129: PUSH
35130: LD_INT 2
35132: ARRAY
35133: PPUSH
35134: CALL_OW 458
35138: NOT
35139: IFFALSE 35143
// continue ;
35141: GO 35113
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35143: LD_VAR 0 4
35147: PUSH
35148: LD_INT 1
35150: ARRAY
35151: PPUSH
35152: LD_VAR 0 4
35156: PUSH
35157: LD_INT 2
35159: ARRAY
35160: PPUSH
35161: CALL_OW 428
35165: PUSH
35166: LD_VAR 0 5
35170: IN
35171: IFFALSE 35200
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35173: LD_VAR 0 4
35177: PUSH
35178: LD_INT 1
35180: ARRAY
35181: PPUSH
35182: LD_VAR 0 4
35186: PUSH
35187: LD_INT 2
35189: ARRAY
35190: PPUSH
35191: LD_VAR 0 1
35195: PPUSH
35196: CALL_OW 456
// end ;
35200: GO 35113
35202: POP
35203: POP
// end ;
35204: LD_VAR 0 3
35208: RET
// export function Count ( array ) ; var i ; begin
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
// result := 0 ;
35213: LD_ADDR_VAR 0 2
35217: PUSH
35218: LD_INT 0
35220: ST_TO_ADDR
// for i in array do
35221: LD_ADDR_VAR 0 3
35225: PUSH
35226: LD_VAR 0 1
35230: PUSH
35231: FOR_IN
35232: IFFALSE 35256
// if i then
35234: LD_VAR 0 3
35238: IFFALSE 35254
// result := result + 1 ;
35240: LD_ADDR_VAR 0 2
35244: PUSH
35245: LD_VAR 0 2
35249: PUSH
35250: LD_INT 1
35252: PLUS
35253: ST_TO_ADDR
35254: GO 35231
35256: POP
35257: POP
// end ;
35258: LD_VAR 0 2
35262: RET
// export function IsEmpty ( building ) ; begin
35263: LD_INT 0
35265: PPUSH
// if not building then
35266: LD_VAR 0 1
35270: NOT
35271: IFFALSE 35275
// exit ;
35273: GO 35318
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35275: LD_ADDR_VAR 0 2
35279: PUSH
35280: LD_VAR 0 1
35284: PUSH
35285: LD_INT 22
35287: PUSH
35288: LD_VAR 0 1
35292: PPUSH
35293: CALL_OW 255
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 58
35304: PUSH
35305: EMPTY
35306: LIST
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PPUSH
35312: CALL_OW 69
35316: IN
35317: ST_TO_ADDR
// end ;
35318: LD_VAR 0 2
35322: RET
// export function IsNotFull ( building ) ; begin
35323: LD_INT 0
35325: PPUSH
// if not building then
35326: LD_VAR 0 1
35330: NOT
35331: IFFALSE 35335
// exit ;
35333: GO 35354
// result := UnitsInside ( building ) < 6 ;
35335: LD_ADDR_VAR 0 2
35339: PUSH
35340: LD_VAR 0 1
35344: PPUSH
35345: CALL_OW 313
35349: PUSH
35350: LD_INT 6
35352: LESS
35353: ST_TO_ADDR
// end ;
35354: LD_VAR 0 2
35358: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35359: LD_INT 0
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
// tmp := [ ] ;
35365: LD_ADDR_VAR 0 3
35369: PUSH
35370: EMPTY
35371: ST_TO_ADDR
// list := [ ] ;
35372: LD_ADDR_VAR 0 5
35376: PUSH
35377: EMPTY
35378: ST_TO_ADDR
// for i = 16 to 25 do
35379: LD_ADDR_VAR 0 4
35383: PUSH
35384: DOUBLE
35385: LD_INT 16
35387: DEC
35388: ST_TO_ADDR
35389: LD_INT 25
35391: PUSH
35392: FOR_TO
35393: IFFALSE 35466
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35395: LD_ADDR_VAR 0 3
35399: PUSH
35400: LD_VAR 0 3
35404: PUSH
35405: LD_INT 22
35407: PUSH
35408: LD_VAR 0 1
35412: PPUSH
35413: CALL_OW 255
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 91
35424: PUSH
35425: LD_VAR 0 1
35429: PUSH
35430: LD_INT 6
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 30
35440: PUSH
35441: LD_VAR 0 4
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: PUSH
35455: EMPTY
35456: LIST
35457: PPUSH
35458: CALL_OW 69
35462: ADD
35463: ST_TO_ADDR
35464: GO 35392
35466: POP
35467: POP
// for i = 1 to tmp do
35468: LD_ADDR_VAR 0 4
35472: PUSH
35473: DOUBLE
35474: LD_INT 1
35476: DEC
35477: ST_TO_ADDR
35478: LD_VAR 0 3
35482: PUSH
35483: FOR_TO
35484: IFFALSE 35572
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35486: LD_ADDR_VAR 0 5
35490: PUSH
35491: LD_VAR 0 5
35495: PUSH
35496: LD_VAR 0 3
35500: PUSH
35501: LD_VAR 0 4
35505: ARRAY
35506: PPUSH
35507: CALL_OW 266
35511: PUSH
35512: LD_VAR 0 3
35516: PUSH
35517: LD_VAR 0 4
35521: ARRAY
35522: PPUSH
35523: CALL_OW 250
35527: PUSH
35528: LD_VAR 0 3
35532: PUSH
35533: LD_VAR 0 4
35537: ARRAY
35538: PPUSH
35539: CALL_OW 251
35543: PUSH
35544: LD_VAR 0 3
35548: PUSH
35549: LD_VAR 0 4
35553: ARRAY
35554: PPUSH
35555: CALL_OW 254
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: PUSH
35566: EMPTY
35567: LIST
35568: ADD
35569: ST_TO_ADDR
35570: GO 35483
35572: POP
35573: POP
// result := list ;
35574: LD_ADDR_VAR 0 2
35578: PUSH
35579: LD_VAR 0 5
35583: ST_TO_ADDR
// end ;
35584: LD_VAR 0 2
35588: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35589: LD_INT 0
35591: PPUSH
35592: PPUSH
35593: PPUSH
35594: PPUSH
35595: PPUSH
35596: PPUSH
35597: PPUSH
// if not factory then
35598: LD_VAR 0 1
35602: NOT
35603: IFFALSE 35607
// exit ;
35605: GO 36200
// if control = control_apeman then
35607: LD_VAR 0 4
35611: PUSH
35612: LD_INT 5
35614: EQUAL
35615: IFFALSE 35724
// begin tmp := UnitsInside ( factory ) ;
35617: LD_ADDR_VAR 0 8
35621: PUSH
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL_OW 313
35631: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35632: LD_VAR 0 8
35636: PPUSH
35637: LD_INT 25
35639: PUSH
35640: LD_INT 12
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PPUSH
35647: CALL_OW 72
35651: NOT
35652: IFFALSE 35662
// control := control_manual ;
35654: LD_ADDR_VAR 0 4
35658: PUSH
35659: LD_INT 1
35661: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35662: LD_ADDR_VAR 0 8
35666: PUSH
35667: LD_VAR 0 1
35671: PPUSH
35672: CALL 35359 0 1
35676: ST_TO_ADDR
// if tmp then
35677: LD_VAR 0 8
35681: IFFALSE 35724
// begin for i in tmp do
35683: LD_ADDR_VAR 0 7
35687: PUSH
35688: LD_VAR 0 8
35692: PUSH
35693: FOR_IN
35694: IFFALSE 35722
// if i [ 1 ] = b_ext_radio then
35696: LD_VAR 0 7
35700: PUSH
35701: LD_INT 1
35703: ARRAY
35704: PUSH
35705: LD_INT 22
35707: EQUAL
35708: IFFALSE 35720
// begin control := control_remote ;
35710: LD_ADDR_VAR 0 4
35714: PUSH
35715: LD_INT 2
35717: ST_TO_ADDR
// break ;
35718: GO 35722
// end ;
35720: GO 35693
35722: POP
35723: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35724: LD_VAR 0 1
35728: PPUSH
35729: LD_VAR 0 2
35733: PPUSH
35734: LD_VAR 0 3
35738: PPUSH
35739: LD_VAR 0 4
35743: PPUSH
35744: LD_VAR 0 5
35748: PPUSH
35749: CALL_OW 448
35753: IFFALSE 35788
// begin result := [ chassis , engine , control , weapon ] ;
35755: LD_ADDR_VAR 0 6
35759: PUSH
35760: LD_VAR 0 2
35764: PUSH
35765: LD_VAR 0 3
35769: PUSH
35770: LD_VAR 0 4
35774: PUSH
35775: LD_VAR 0 5
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: ST_TO_ADDR
// exit ;
35786: GO 36200
// end ; _chassis := AvailableChassisList ( factory ) ;
35788: LD_ADDR_VAR 0 9
35792: PUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL_OW 475
35802: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35803: LD_ADDR_VAR 0 11
35807: PUSH
35808: LD_VAR 0 1
35812: PPUSH
35813: CALL_OW 476
35817: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35818: LD_ADDR_VAR 0 12
35822: PUSH
35823: LD_VAR 0 1
35827: PPUSH
35828: CALL_OW 477
35832: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35833: LD_ADDR_VAR 0 10
35837: PUSH
35838: LD_VAR 0 1
35842: PPUSH
35843: CALL_OW 478
35847: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35848: LD_VAR 0 9
35852: NOT
35853: PUSH
35854: LD_VAR 0 11
35858: NOT
35859: OR
35860: PUSH
35861: LD_VAR 0 12
35865: NOT
35866: OR
35867: PUSH
35868: LD_VAR 0 10
35872: NOT
35873: OR
35874: IFFALSE 35909
// begin result := [ chassis , engine , control , weapon ] ;
35876: LD_ADDR_VAR 0 6
35880: PUSH
35881: LD_VAR 0 2
35885: PUSH
35886: LD_VAR 0 3
35890: PUSH
35891: LD_VAR 0 4
35895: PUSH
35896: LD_VAR 0 5
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
// exit ;
35907: GO 36200
// end ; if not chassis in _chassis then
35909: LD_VAR 0 2
35913: PUSH
35914: LD_VAR 0 9
35918: IN
35919: NOT
35920: IFFALSE 35946
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35922: LD_ADDR_VAR 0 2
35926: PUSH
35927: LD_VAR 0 9
35931: PUSH
35932: LD_INT 1
35934: PPUSH
35935: LD_VAR 0 9
35939: PPUSH
35940: CALL_OW 12
35944: ARRAY
35945: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35946: LD_VAR 0 2
35950: PPUSH
35951: LD_VAR 0 3
35955: PPUSH
35956: CALL 36205 0 2
35960: NOT
35961: IFFALSE 36020
// repeat engine := _engine [ 1 ] ;
35963: LD_ADDR_VAR 0 3
35967: PUSH
35968: LD_VAR 0 11
35972: PUSH
35973: LD_INT 1
35975: ARRAY
35976: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35977: LD_ADDR_VAR 0 11
35981: PUSH
35982: LD_VAR 0 11
35986: PPUSH
35987: LD_INT 1
35989: PPUSH
35990: CALL_OW 3
35994: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35995: LD_VAR 0 2
35999: PPUSH
36000: LD_VAR 0 3
36004: PPUSH
36005: CALL 36205 0 2
36009: PUSH
36010: LD_VAR 0 11
36014: PUSH
36015: EMPTY
36016: EQUAL
36017: OR
36018: IFFALSE 35963
// if not control in _control then
36020: LD_VAR 0 4
36024: PUSH
36025: LD_VAR 0 12
36029: IN
36030: NOT
36031: IFFALSE 36057
// control := _control [ rand ( 1 , _control ) ] ;
36033: LD_ADDR_VAR 0 4
36037: PUSH
36038: LD_VAR 0 12
36042: PUSH
36043: LD_INT 1
36045: PPUSH
36046: LD_VAR 0 12
36050: PPUSH
36051: CALL_OW 12
36055: ARRAY
36056: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36057: LD_VAR 0 2
36061: PPUSH
36062: LD_VAR 0 5
36066: PPUSH
36067: CALL 36425 0 2
36071: NOT
36072: IFFALSE 36131
// repeat weapon := _weapon [ 1 ] ;
36074: LD_ADDR_VAR 0 5
36078: PUSH
36079: LD_VAR 0 10
36083: PUSH
36084: LD_INT 1
36086: ARRAY
36087: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36088: LD_ADDR_VAR 0 10
36092: PUSH
36093: LD_VAR 0 10
36097: PPUSH
36098: LD_INT 1
36100: PPUSH
36101: CALL_OW 3
36105: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36106: LD_VAR 0 2
36110: PPUSH
36111: LD_VAR 0 5
36115: PPUSH
36116: CALL 36425 0 2
36120: PUSH
36121: LD_VAR 0 10
36125: PUSH
36126: EMPTY
36127: EQUAL
36128: OR
36129: IFFALSE 36074
// result := [ ] ;
36131: LD_ADDR_VAR 0 6
36135: PUSH
36136: EMPTY
36137: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36138: LD_VAR 0 1
36142: PPUSH
36143: LD_VAR 0 2
36147: PPUSH
36148: LD_VAR 0 3
36152: PPUSH
36153: LD_VAR 0 4
36157: PPUSH
36158: LD_VAR 0 5
36162: PPUSH
36163: CALL_OW 448
36167: IFFALSE 36200
// result := [ chassis , engine , control , weapon ] ;
36169: LD_ADDR_VAR 0 6
36173: PUSH
36174: LD_VAR 0 2
36178: PUSH
36179: LD_VAR 0 3
36183: PUSH
36184: LD_VAR 0 4
36188: PUSH
36189: LD_VAR 0 5
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// end ;
36200: LD_VAR 0 6
36204: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36205: LD_INT 0
36207: PPUSH
// if not chassis or not engine then
36208: LD_VAR 0 1
36212: NOT
36213: PUSH
36214: LD_VAR 0 2
36218: NOT
36219: OR
36220: IFFALSE 36224
// exit ;
36222: GO 36420
// case engine of engine_solar :
36224: LD_VAR 0 2
36228: PUSH
36229: LD_INT 2
36231: DOUBLE
36232: EQUAL
36233: IFTRUE 36237
36235: GO 36275
36237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36238: LD_ADDR_VAR 0 3
36242: PUSH
36243: LD_INT 11
36245: PUSH
36246: LD_INT 12
36248: PUSH
36249: LD_INT 13
36251: PUSH
36252: LD_INT 14
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: LD_INT 3
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: ST_TO_ADDR
36273: GO 36404
36275: LD_INT 1
36277: DOUBLE
36278: EQUAL
36279: IFTRUE 36283
36281: GO 36345
36283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36284: LD_ADDR_VAR 0 3
36288: PUSH
36289: LD_INT 11
36291: PUSH
36292: LD_INT 12
36294: PUSH
36295: LD_INT 13
36297: PUSH
36298: LD_INT 14
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: LD_INT 4
36312: PUSH
36313: LD_INT 5
36315: PUSH
36316: LD_INT 21
36318: PUSH
36319: LD_INT 23
36321: PUSH
36322: LD_INT 22
36324: PUSH
36325: LD_INT 24
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: ST_TO_ADDR
36343: GO 36404
36345: LD_INT 3
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36353
36351: GO 36403
36353: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36354: LD_ADDR_VAR 0 3
36358: PUSH
36359: LD_INT 13
36361: PUSH
36362: LD_INT 14
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 3
36370: PUSH
36371: LD_INT 4
36373: PUSH
36374: LD_INT 5
36376: PUSH
36377: LD_INT 21
36379: PUSH
36380: LD_INT 22
36382: PUSH
36383: LD_INT 23
36385: PUSH
36386: LD_INT 24
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: ST_TO_ADDR
36401: GO 36404
36403: POP
// result := ( chassis in result ) ;
36404: LD_ADDR_VAR 0 3
36408: PUSH
36409: LD_VAR 0 1
36413: PUSH
36414: LD_VAR 0 3
36418: IN
36419: ST_TO_ADDR
// end ;
36420: LD_VAR 0 3
36424: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36425: LD_INT 0
36427: PPUSH
// if not chassis or not weapon then
36428: LD_VAR 0 1
36432: NOT
36433: PUSH
36434: LD_VAR 0 2
36438: NOT
36439: OR
36440: IFFALSE 36444
// exit ;
36442: GO 37470
// case weapon of us_machine_gun :
36444: LD_VAR 0 2
36448: PUSH
36449: LD_INT 2
36451: DOUBLE
36452: EQUAL
36453: IFTRUE 36457
36455: GO 36487
36457: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36458: LD_ADDR_VAR 0 3
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 4
36474: PUSH
36475: LD_INT 5
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: ST_TO_ADDR
36485: GO 37454
36487: LD_INT 3
36489: DOUBLE
36490: EQUAL
36491: IFTRUE 36495
36493: GO 36525
36495: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36496: LD_ADDR_VAR 0 3
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: LD_INT 2
36506: PUSH
36507: LD_INT 3
36509: PUSH
36510: LD_INT 4
36512: PUSH
36513: LD_INT 5
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: ST_TO_ADDR
36523: GO 37454
36525: LD_INT 11
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36533
36531: GO 36563
36533: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: LD_INT 3
36547: PUSH
36548: LD_INT 4
36550: PUSH
36551: LD_INT 5
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: ST_TO_ADDR
36561: GO 37454
36563: LD_INT 4
36565: DOUBLE
36566: EQUAL
36567: IFTRUE 36571
36569: GO 36597
36571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36572: LD_ADDR_VAR 0 3
36576: PUSH
36577: LD_INT 2
36579: PUSH
36580: LD_INT 3
36582: PUSH
36583: LD_INT 4
36585: PUSH
36586: LD_INT 5
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: ST_TO_ADDR
36595: GO 37454
36597: LD_INT 5
36599: DOUBLE
36600: EQUAL
36601: IFTRUE 36605
36603: GO 36631
36605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36606: LD_ADDR_VAR 0 3
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: LD_INT 3
36616: PUSH
36617: LD_INT 4
36619: PUSH
36620: LD_INT 5
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: ST_TO_ADDR
36629: GO 37454
36631: LD_INT 9
36633: DOUBLE
36634: EQUAL
36635: IFTRUE 36639
36637: GO 36665
36639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36640: LD_ADDR_VAR 0 3
36644: PUSH
36645: LD_INT 2
36647: PUSH
36648: LD_INT 3
36650: PUSH
36651: LD_INT 4
36653: PUSH
36654: LD_INT 5
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: ST_TO_ADDR
36663: GO 37454
36665: LD_INT 7
36667: DOUBLE
36668: EQUAL
36669: IFTRUE 36673
36671: GO 36699
36673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36674: LD_ADDR_VAR 0 3
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: LD_INT 4
36687: PUSH
36688: LD_INT 5
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
36697: GO 37454
36699: LD_INT 12
36701: DOUBLE
36702: EQUAL
36703: IFTRUE 36707
36705: GO 36733
36707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36708: LD_ADDR_VAR 0 3
36712: PUSH
36713: LD_INT 2
36715: PUSH
36716: LD_INT 3
36718: PUSH
36719: LD_INT 4
36721: PUSH
36722: LD_INT 5
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: ST_TO_ADDR
36731: GO 37454
36733: LD_INT 13
36735: DOUBLE
36736: EQUAL
36737: IFTRUE 36741
36739: GO 36767
36741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36742: LD_ADDR_VAR 0 3
36746: PUSH
36747: LD_INT 2
36749: PUSH
36750: LD_INT 3
36752: PUSH
36753: LD_INT 4
36755: PUSH
36756: LD_INT 5
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: ST_TO_ADDR
36765: GO 37454
36767: LD_INT 14
36769: DOUBLE
36770: EQUAL
36771: IFTRUE 36775
36773: GO 36793
36775: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36776: LD_ADDR_VAR 0 3
36780: PUSH
36781: LD_INT 4
36783: PUSH
36784: LD_INT 5
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: ST_TO_ADDR
36791: GO 37454
36793: LD_INT 6
36795: DOUBLE
36796: EQUAL
36797: IFTRUE 36801
36799: GO 36819
36801: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36802: LD_ADDR_VAR 0 3
36806: PUSH
36807: LD_INT 4
36809: PUSH
36810: LD_INT 5
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: ST_TO_ADDR
36817: GO 37454
36819: LD_INT 10
36821: DOUBLE
36822: EQUAL
36823: IFTRUE 36827
36825: GO 36845
36827: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36828: LD_ADDR_VAR 0 3
36832: PUSH
36833: LD_INT 4
36835: PUSH
36836: LD_INT 5
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: ST_TO_ADDR
36843: GO 37454
36845: LD_INT 22
36847: DOUBLE
36848: EQUAL
36849: IFTRUE 36853
36851: GO 36879
36853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36854: LD_ADDR_VAR 0 3
36858: PUSH
36859: LD_INT 11
36861: PUSH
36862: LD_INT 12
36864: PUSH
36865: LD_INT 13
36867: PUSH
36868: LD_INT 14
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: ST_TO_ADDR
36877: GO 37454
36879: LD_INT 23
36881: DOUBLE
36882: EQUAL
36883: IFTRUE 36887
36885: GO 36913
36887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36888: LD_ADDR_VAR 0 3
36892: PUSH
36893: LD_INT 11
36895: PUSH
36896: LD_INT 12
36898: PUSH
36899: LD_INT 13
36901: PUSH
36902: LD_INT 14
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: ST_TO_ADDR
36911: GO 37454
36913: LD_INT 24
36915: DOUBLE
36916: EQUAL
36917: IFTRUE 36921
36919: GO 36947
36921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36922: LD_ADDR_VAR 0 3
36926: PUSH
36927: LD_INT 11
36929: PUSH
36930: LD_INT 12
36932: PUSH
36933: LD_INT 13
36935: PUSH
36936: LD_INT 14
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: ST_TO_ADDR
36945: GO 37454
36947: LD_INT 30
36949: DOUBLE
36950: EQUAL
36951: IFTRUE 36955
36953: GO 36981
36955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36956: LD_ADDR_VAR 0 3
36960: PUSH
36961: LD_INT 11
36963: PUSH
36964: LD_INT 12
36966: PUSH
36967: LD_INT 13
36969: PUSH
36970: LD_INT 14
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: ST_TO_ADDR
36979: GO 37454
36981: LD_INT 25
36983: DOUBLE
36984: EQUAL
36985: IFTRUE 36989
36987: GO 37007
36989: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36990: LD_ADDR_VAR 0 3
36994: PUSH
36995: LD_INT 13
36997: PUSH
36998: LD_INT 14
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: ST_TO_ADDR
37005: GO 37454
37007: LD_INT 27
37009: DOUBLE
37010: EQUAL
37011: IFTRUE 37015
37013: GO 37033
37015: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37016: LD_ADDR_VAR 0 3
37020: PUSH
37021: LD_INT 13
37023: PUSH
37024: LD_INT 14
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: ST_TO_ADDR
37031: GO 37454
37033: LD_INT 28
37035: DOUBLE
37036: EQUAL
37037: IFTRUE 37041
37039: GO 37059
37041: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37042: LD_ADDR_VAR 0 3
37046: PUSH
37047: LD_INT 13
37049: PUSH
37050: LD_INT 14
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: ST_TO_ADDR
37057: GO 37454
37059: LD_INT 29
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37067
37065: GO 37085
37067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37068: LD_ADDR_VAR 0 3
37072: PUSH
37073: LD_INT 13
37075: PUSH
37076: LD_INT 14
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: ST_TO_ADDR
37083: GO 37454
37085: LD_INT 31
37087: DOUBLE
37088: EQUAL
37089: IFTRUE 37093
37091: GO 37111
37093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37094: LD_ADDR_VAR 0 3
37098: PUSH
37099: LD_INT 13
37101: PUSH
37102: LD_INT 14
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: ST_TO_ADDR
37109: GO 37454
37111: LD_INT 26
37113: DOUBLE
37114: EQUAL
37115: IFTRUE 37119
37117: GO 37137
37119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37120: LD_ADDR_VAR 0 3
37124: PUSH
37125: LD_INT 13
37127: PUSH
37128: LD_INT 14
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: ST_TO_ADDR
37135: GO 37454
37137: LD_INT 42
37139: DOUBLE
37140: EQUAL
37141: IFTRUE 37145
37143: GO 37171
37145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37146: LD_ADDR_VAR 0 3
37150: PUSH
37151: LD_INT 21
37153: PUSH
37154: LD_INT 22
37156: PUSH
37157: LD_INT 23
37159: PUSH
37160: LD_INT 24
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
37169: GO 37454
37171: LD_INT 43
37173: DOUBLE
37174: EQUAL
37175: IFTRUE 37179
37177: GO 37205
37179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_INT 21
37187: PUSH
37188: LD_INT 22
37190: PUSH
37191: LD_INT 23
37193: PUSH
37194: LD_INT 24
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: ST_TO_ADDR
37203: GO 37454
37205: LD_INT 44
37207: DOUBLE
37208: EQUAL
37209: IFTRUE 37213
37211: GO 37239
37213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37214: LD_ADDR_VAR 0 3
37218: PUSH
37219: LD_INT 21
37221: PUSH
37222: LD_INT 22
37224: PUSH
37225: LD_INT 23
37227: PUSH
37228: LD_INT 24
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
37237: GO 37454
37239: LD_INT 45
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 37273
37247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37248: LD_ADDR_VAR 0 3
37252: PUSH
37253: LD_INT 21
37255: PUSH
37256: LD_INT 22
37258: PUSH
37259: LD_INT 23
37261: PUSH
37262: LD_INT 24
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: ST_TO_ADDR
37271: GO 37454
37273: LD_INT 49
37275: DOUBLE
37276: EQUAL
37277: IFTRUE 37281
37279: GO 37307
37281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37282: LD_ADDR_VAR 0 3
37286: PUSH
37287: LD_INT 21
37289: PUSH
37290: LD_INT 22
37292: PUSH
37293: LD_INT 23
37295: PUSH
37296: LD_INT 24
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: ST_TO_ADDR
37305: GO 37454
37307: LD_INT 51
37309: DOUBLE
37310: EQUAL
37311: IFTRUE 37315
37313: GO 37341
37315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37316: LD_ADDR_VAR 0 3
37320: PUSH
37321: LD_INT 21
37323: PUSH
37324: LD_INT 22
37326: PUSH
37327: LD_INT 23
37329: PUSH
37330: LD_INT 24
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: ST_TO_ADDR
37339: GO 37454
37341: LD_INT 52
37343: DOUBLE
37344: EQUAL
37345: IFTRUE 37349
37347: GO 37375
37349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37350: LD_ADDR_VAR 0 3
37354: PUSH
37355: LD_INT 21
37357: PUSH
37358: LD_INT 22
37360: PUSH
37361: LD_INT 23
37363: PUSH
37364: LD_INT 24
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: ST_TO_ADDR
37373: GO 37454
37375: LD_INT 53
37377: DOUBLE
37378: EQUAL
37379: IFTRUE 37383
37381: GO 37401
37383: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37384: LD_ADDR_VAR 0 3
37388: PUSH
37389: LD_INT 23
37391: PUSH
37392: LD_INT 24
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: ST_TO_ADDR
37399: GO 37454
37401: LD_INT 46
37403: DOUBLE
37404: EQUAL
37405: IFTRUE 37409
37407: GO 37427
37409: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37410: LD_ADDR_VAR 0 3
37414: PUSH
37415: LD_INT 23
37417: PUSH
37418: LD_INT 24
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: ST_TO_ADDR
37425: GO 37454
37427: LD_INT 47
37429: DOUBLE
37430: EQUAL
37431: IFTRUE 37435
37433: GO 37453
37435: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37436: LD_ADDR_VAR 0 3
37440: PUSH
37441: LD_INT 23
37443: PUSH
37444: LD_INT 24
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: ST_TO_ADDR
37451: GO 37454
37453: POP
// result := ( chassis in result ) ;
37454: LD_ADDR_VAR 0 3
37458: PUSH
37459: LD_VAR 0 1
37463: PUSH
37464: LD_VAR 0 3
37468: IN
37469: ST_TO_ADDR
// end ;
37470: LD_VAR 0 3
37474: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37475: LD_INT 0
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
// result := array ;
37484: LD_ADDR_VAR 0 5
37488: PUSH
37489: LD_VAR 0 1
37493: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37494: LD_VAR 0 1
37498: NOT
37499: PUSH
37500: LD_VAR 0 2
37504: NOT
37505: OR
37506: PUSH
37507: LD_VAR 0 3
37511: NOT
37512: OR
37513: PUSH
37514: LD_VAR 0 2
37518: PUSH
37519: LD_VAR 0 1
37523: GREATER
37524: OR
37525: PUSH
37526: LD_VAR 0 3
37530: PUSH
37531: LD_VAR 0 1
37535: GREATER
37536: OR
37537: IFFALSE 37541
// exit ;
37539: GO 37837
// if direction then
37541: LD_VAR 0 4
37545: IFFALSE 37609
// begin d := 1 ;
37547: LD_ADDR_VAR 0 9
37551: PUSH
37552: LD_INT 1
37554: ST_TO_ADDR
// if i_from > i_to then
37555: LD_VAR 0 2
37559: PUSH
37560: LD_VAR 0 3
37564: GREATER
37565: IFFALSE 37591
// length := ( array - i_from ) + i_to else
37567: LD_ADDR_VAR 0 11
37571: PUSH
37572: LD_VAR 0 1
37576: PUSH
37577: LD_VAR 0 2
37581: MINUS
37582: PUSH
37583: LD_VAR 0 3
37587: PLUS
37588: ST_TO_ADDR
37589: GO 37607
// length := i_to - i_from ;
37591: LD_ADDR_VAR 0 11
37595: PUSH
37596: LD_VAR 0 3
37600: PUSH
37601: LD_VAR 0 2
37605: MINUS
37606: ST_TO_ADDR
// end else
37607: GO 37670
// begin d := - 1 ;
37609: LD_ADDR_VAR 0 9
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: ST_TO_ADDR
// if i_from > i_to then
37618: LD_VAR 0 2
37622: PUSH
37623: LD_VAR 0 3
37627: GREATER
37628: IFFALSE 37648
// length := i_from - i_to else
37630: LD_ADDR_VAR 0 11
37634: PUSH
37635: LD_VAR 0 2
37639: PUSH
37640: LD_VAR 0 3
37644: MINUS
37645: ST_TO_ADDR
37646: GO 37670
// length := ( array - i_to ) + i_from ;
37648: LD_ADDR_VAR 0 11
37652: PUSH
37653: LD_VAR 0 1
37657: PUSH
37658: LD_VAR 0 3
37662: MINUS
37663: PUSH
37664: LD_VAR 0 2
37668: PLUS
37669: ST_TO_ADDR
// end ; if not length then
37670: LD_VAR 0 11
37674: NOT
37675: IFFALSE 37679
// exit ;
37677: GO 37837
// tmp := array ;
37679: LD_ADDR_VAR 0 10
37683: PUSH
37684: LD_VAR 0 1
37688: ST_TO_ADDR
// for i = 1 to length do
37689: LD_ADDR_VAR 0 6
37693: PUSH
37694: DOUBLE
37695: LD_INT 1
37697: DEC
37698: ST_TO_ADDR
37699: LD_VAR 0 11
37703: PUSH
37704: FOR_TO
37705: IFFALSE 37825
// begin for j = 1 to array do
37707: LD_ADDR_VAR 0 7
37711: PUSH
37712: DOUBLE
37713: LD_INT 1
37715: DEC
37716: ST_TO_ADDR
37717: LD_VAR 0 1
37721: PUSH
37722: FOR_TO
37723: IFFALSE 37811
// begin k := j + d ;
37725: LD_ADDR_VAR 0 8
37729: PUSH
37730: LD_VAR 0 7
37734: PUSH
37735: LD_VAR 0 9
37739: PLUS
37740: ST_TO_ADDR
// if k > array then
37741: LD_VAR 0 8
37745: PUSH
37746: LD_VAR 0 1
37750: GREATER
37751: IFFALSE 37761
// k := 1 ;
37753: LD_ADDR_VAR 0 8
37757: PUSH
37758: LD_INT 1
37760: ST_TO_ADDR
// if not k then
37761: LD_VAR 0 8
37765: NOT
37766: IFFALSE 37778
// k := array ;
37768: LD_ADDR_VAR 0 8
37772: PUSH
37773: LD_VAR 0 1
37777: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37778: LD_ADDR_VAR 0 10
37782: PUSH
37783: LD_VAR 0 10
37787: PPUSH
37788: LD_VAR 0 8
37792: PPUSH
37793: LD_VAR 0 1
37797: PUSH
37798: LD_VAR 0 7
37802: ARRAY
37803: PPUSH
37804: CALL_OW 1
37808: ST_TO_ADDR
// end ;
37809: GO 37722
37811: POP
37812: POP
// array := tmp ;
37813: LD_ADDR_VAR 0 1
37817: PUSH
37818: LD_VAR 0 10
37822: ST_TO_ADDR
// end ;
37823: GO 37704
37825: POP
37826: POP
// result := array ;
37827: LD_ADDR_VAR 0 5
37831: PUSH
37832: LD_VAR 0 1
37836: ST_TO_ADDR
// end ;
37837: LD_VAR 0 5
37841: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37842: LD_INT 0
37844: PPUSH
37845: PPUSH
// result := 0 ;
37846: LD_ADDR_VAR 0 3
37850: PUSH
37851: LD_INT 0
37853: ST_TO_ADDR
// if not array or not value in array then
37854: LD_VAR 0 1
37858: NOT
37859: PUSH
37860: LD_VAR 0 2
37864: PUSH
37865: LD_VAR 0 1
37869: IN
37870: NOT
37871: OR
37872: IFFALSE 37876
// exit ;
37874: GO 37930
// for i = 1 to array do
37876: LD_ADDR_VAR 0 4
37880: PUSH
37881: DOUBLE
37882: LD_INT 1
37884: DEC
37885: ST_TO_ADDR
37886: LD_VAR 0 1
37890: PUSH
37891: FOR_TO
37892: IFFALSE 37928
// if value = array [ i ] then
37894: LD_VAR 0 2
37898: PUSH
37899: LD_VAR 0 1
37903: PUSH
37904: LD_VAR 0 4
37908: ARRAY
37909: EQUAL
37910: IFFALSE 37926
// begin result := i ;
37912: LD_ADDR_VAR 0 3
37916: PUSH
37917: LD_VAR 0 4
37921: ST_TO_ADDR
// exit ;
37922: POP
37923: POP
37924: GO 37930
// end ;
37926: GO 37891
37928: POP
37929: POP
// end ;
37930: LD_VAR 0 3
37934: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37935: LD_INT 0
37937: PPUSH
// vc_chassis := chassis ;
37938: LD_ADDR_OWVAR 37
37942: PUSH
37943: LD_VAR 0 1
37947: ST_TO_ADDR
// vc_engine := engine ;
37948: LD_ADDR_OWVAR 39
37952: PUSH
37953: LD_VAR 0 2
37957: ST_TO_ADDR
// vc_control := control ;
37958: LD_ADDR_OWVAR 38
37962: PUSH
37963: LD_VAR 0 3
37967: ST_TO_ADDR
// vc_weapon := weapon ;
37968: LD_ADDR_OWVAR 40
37972: PUSH
37973: LD_VAR 0 4
37977: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37978: LD_ADDR_OWVAR 41
37982: PUSH
37983: LD_VAR 0 5
37987: ST_TO_ADDR
// end ;
37988: LD_VAR 0 6
37992: RET
// export function WantPlant ( unit ) ; var task ; begin
37993: LD_INT 0
37995: PPUSH
37996: PPUSH
// result := false ;
37997: LD_ADDR_VAR 0 2
38001: PUSH
38002: LD_INT 0
38004: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38005: LD_ADDR_VAR 0 3
38009: PUSH
38010: LD_VAR 0 1
38014: PPUSH
38015: CALL_OW 437
38019: ST_TO_ADDR
// if task then
38020: LD_VAR 0 3
38024: IFFALSE 38052
// if task [ 1 ] [ 1 ] = p then
38026: LD_VAR 0 3
38030: PUSH
38031: LD_INT 1
38033: ARRAY
38034: PUSH
38035: LD_INT 1
38037: ARRAY
38038: PUSH
38039: LD_STRING p
38041: EQUAL
38042: IFFALSE 38052
// result := true ;
38044: LD_ADDR_VAR 0 2
38048: PUSH
38049: LD_INT 1
38051: ST_TO_ADDR
// end ;
38052: LD_VAR 0 2
38056: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38057: LD_INT 0
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
// if pos < 1 then
38063: LD_VAR 0 2
38067: PUSH
38068: LD_INT 1
38070: LESS
38071: IFFALSE 38075
// exit ;
38073: GO 38378
// if pos = 1 then
38075: LD_VAR 0 2
38079: PUSH
38080: LD_INT 1
38082: EQUAL
38083: IFFALSE 38116
// result := Replace ( arr , pos [ 1 ] , value ) else
38085: LD_ADDR_VAR 0 4
38089: PUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: LD_VAR 0 2
38099: PUSH
38100: LD_INT 1
38102: ARRAY
38103: PPUSH
38104: LD_VAR 0 3
38108: PPUSH
38109: CALL_OW 1
38113: ST_TO_ADDR
38114: GO 38378
// begin tmp := arr ;
38116: LD_ADDR_VAR 0 6
38120: PUSH
38121: LD_VAR 0 1
38125: ST_TO_ADDR
// s_arr := [ tmp ] ;
38126: LD_ADDR_VAR 0 7
38130: PUSH
38131: LD_VAR 0 6
38135: PUSH
38136: EMPTY
38137: LIST
38138: ST_TO_ADDR
// for i = 1 to pos - 1 do
38139: LD_ADDR_VAR 0 5
38143: PUSH
38144: DOUBLE
38145: LD_INT 1
38147: DEC
38148: ST_TO_ADDR
38149: LD_VAR 0 2
38153: PUSH
38154: LD_INT 1
38156: MINUS
38157: PUSH
38158: FOR_TO
38159: IFFALSE 38204
// begin tmp := tmp [ pos [ i ] ] ;
38161: LD_ADDR_VAR 0 6
38165: PUSH
38166: LD_VAR 0 6
38170: PUSH
38171: LD_VAR 0 2
38175: PUSH
38176: LD_VAR 0 5
38180: ARRAY
38181: ARRAY
38182: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38183: LD_ADDR_VAR 0 7
38187: PUSH
38188: LD_VAR 0 7
38192: PUSH
38193: LD_VAR 0 6
38197: PUSH
38198: EMPTY
38199: LIST
38200: ADD
38201: ST_TO_ADDR
// end ;
38202: GO 38158
38204: POP
38205: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38206: LD_ADDR_VAR 0 6
38210: PUSH
38211: LD_VAR 0 6
38215: PPUSH
38216: LD_VAR 0 2
38220: PUSH
38221: LD_VAR 0 2
38225: ARRAY
38226: PPUSH
38227: LD_VAR 0 3
38231: PPUSH
38232: CALL_OW 1
38236: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38237: LD_ADDR_VAR 0 7
38241: PUSH
38242: LD_VAR 0 7
38246: PPUSH
38247: LD_VAR 0 7
38251: PPUSH
38252: LD_VAR 0 6
38256: PPUSH
38257: CALL_OW 1
38261: ST_TO_ADDR
// for i = s_arr downto 2 do
38262: LD_ADDR_VAR 0 5
38266: PUSH
38267: DOUBLE
38268: LD_VAR 0 7
38272: INC
38273: ST_TO_ADDR
38274: LD_INT 2
38276: PUSH
38277: FOR_DOWNTO
38278: IFFALSE 38362
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38280: LD_ADDR_VAR 0 6
38284: PUSH
38285: LD_VAR 0 7
38289: PUSH
38290: LD_VAR 0 5
38294: PUSH
38295: LD_INT 1
38297: MINUS
38298: ARRAY
38299: PPUSH
38300: LD_VAR 0 2
38304: PUSH
38305: LD_VAR 0 5
38309: PUSH
38310: LD_INT 1
38312: MINUS
38313: ARRAY
38314: PPUSH
38315: LD_VAR 0 7
38319: PUSH
38320: LD_VAR 0 5
38324: ARRAY
38325: PPUSH
38326: CALL_OW 1
38330: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38331: LD_ADDR_VAR 0 7
38335: PUSH
38336: LD_VAR 0 7
38340: PPUSH
38341: LD_VAR 0 5
38345: PUSH
38346: LD_INT 1
38348: MINUS
38349: PPUSH
38350: LD_VAR 0 6
38354: PPUSH
38355: CALL_OW 1
38359: ST_TO_ADDR
// end ;
38360: GO 38277
38362: POP
38363: POP
// result := s_arr [ 1 ] ;
38364: LD_ADDR_VAR 0 4
38368: PUSH
38369: LD_VAR 0 7
38373: PUSH
38374: LD_INT 1
38376: ARRAY
38377: ST_TO_ADDR
// end ; end ;
38378: LD_VAR 0 4
38382: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38383: LD_INT 0
38385: PPUSH
38386: PPUSH
// if not list then
38387: LD_VAR 0 1
38391: NOT
38392: IFFALSE 38396
// exit ;
38394: GO 38487
// i := list [ pos1 ] ;
38396: LD_ADDR_VAR 0 5
38400: PUSH
38401: LD_VAR 0 1
38405: PUSH
38406: LD_VAR 0 2
38410: ARRAY
38411: ST_TO_ADDR
// if not i then
38412: LD_VAR 0 5
38416: NOT
38417: IFFALSE 38421
// exit ;
38419: GO 38487
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38421: LD_ADDR_VAR 0 1
38425: PUSH
38426: LD_VAR 0 1
38430: PPUSH
38431: LD_VAR 0 2
38435: PPUSH
38436: LD_VAR 0 1
38440: PUSH
38441: LD_VAR 0 3
38445: ARRAY
38446: PPUSH
38447: CALL_OW 1
38451: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38452: LD_ADDR_VAR 0 1
38456: PUSH
38457: LD_VAR 0 1
38461: PPUSH
38462: LD_VAR 0 3
38466: PPUSH
38467: LD_VAR 0 5
38471: PPUSH
38472: CALL_OW 1
38476: ST_TO_ADDR
// result := list ;
38477: LD_ADDR_VAR 0 4
38481: PUSH
38482: LD_VAR 0 1
38486: ST_TO_ADDR
// end ;
38487: LD_VAR 0 4
38491: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38492: LD_INT 0
38494: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38495: LD_ADDR_VAR 0 5
38499: PUSH
38500: LD_VAR 0 1
38504: PPUSH
38505: CALL_OW 250
38509: PPUSH
38510: LD_VAR 0 1
38514: PPUSH
38515: CALL_OW 251
38519: PPUSH
38520: LD_VAR 0 2
38524: PPUSH
38525: LD_VAR 0 3
38529: PPUSH
38530: LD_VAR 0 4
38534: PPUSH
38535: CALL 38545 0 5
38539: ST_TO_ADDR
// end ;
38540: LD_VAR 0 5
38544: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38545: LD_INT 0
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
// if not list then
38551: LD_VAR 0 3
38555: NOT
38556: IFFALSE 38560
// exit ;
38558: GO 38948
// result := [ ] ;
38560: LD_ADDR_VAR 0 6
38564: PUSH
38565: EMPTY
38566: ST_TO_ADDR
// for i in list do
38567: LD_ADDR_VAR 0 7
38571: PUSH
38572: LD_VAR 0 3
38576: PUSH
38577: FOR_IN
38578: IFFALSE 38780
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38580: LD_ADDR_VAR 0 9
38584: PUSH
38585: LD_VAR 0 7
38589: PPUSH
38590: LD_VAR 0 1
38594: PPUSH
38595: LD_VAR 0 2
38599: PPUSH
38600: CALL_OW 297
38604: ST_TO_ADDR
// if not result then
38605: LD_VAR 0 6
38609: NOT
38610: IFFALSE 38636
// result := [ [ i , tmp ] ] else
38612: LD_ADDR_VAR 0 6
38616: PUSH
38617: LD_VAR 0 7
38621: PUSH
38622: LD_VAR 0 9
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: EMPTY
38632: LIST
38633: ST_TO_ADDR
38634: GO 38778
// begin if result [ result ] [ 2 ] < tmp then
38636: LD_VAR 0 6
38640: PUSH
38641: LD_VAR 0 6
38645: ARRAY
38646: PUSH
38647: LD_INT 2
38649: ARRAY
38650: PUSH
38651: LD_VAR 0 9
38655: LESS
38656: IFFALSE 38698
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38658: LD_ADDR_VAR 0 6
38662: PUSH
38663: LD_VAR 0 6
38667: PPUSH
38668: LD_VAR 0 6
38672: PUSH
38673: LD_INT 1
38675: PLUS
38676: PPUSH
38677: LD_VAR 0 7
38681: PUSH
38682: LD_VAR 0 9
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PPUSH
38691: CALL_OW 2
38695: ST_TO_ADDR
38696: GO 38778
// for j = 1 to result do
38698: LD_ADDR_VAR 0 8
38702: PUSH
38703: DOUBLE
38704: LD_INT 1
38706: DEC
38707: ST_TO_ADDR
38708: LD_VAR 0 6
38712: PUSH
38713: FOR_TO
38714: IFFALSE 38776
// begin if tmp < result [ j ] [ 2 ] then
38716: LD_VAR 0 9
38720: PUSH
38721: LD_VAR 0 6
38725: PUSH
38726: LD_VAR 0 8
38730: ARRAY
38731: PUSH
38732: LD_INT 2
38734: ARRAY
38735: LESS
38736: IFFALSE 38774
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38738: LD_ADDR_VAR 0 6
38742: PUSH
38743: LD_VAR 0 6
38747: PPUSH
38748: LD_VAR 0 8
38752: PPUSH
38753: LD_VAR 0 7
38757: PUSH
38758: LD_VAR 0 9
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PPUSH
38767: CALL_OW 2
38771: ST_TO_ADDR
// break ;
38772: GO 38776
// end ; end ;
38774: GO 38713
38776: POP
38777: POP
// end ; end ;
38778: GO 38577
38780: POP
38781: POP
// if result and not asc then
38782: LD_VAR 0 6
38786: PUSH
38787: LD_VAR 0 4
38791: NOT
38792: AND
38793: IFFALSE 38868
// begin tmp := result ;
38795: LD_ADDR_VAR 0 9
38799: PUSH
38800: LD_VAR 0 6
38804: ST_TO_ADDR
// for i = tmp downto 1 do
38805: LD_ADDR_VAR 0 7
38809: PUSH
38810: DOUBLE
38811: LD_VAR 0 9
38815: INC
38816: ST_TO_ADDR
38817: LD_INT 1
38819: PUSH
38820: FOR_DOWNTO
38821: IFFALSE 38866
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38823: LD_ADDR_VAR 0 6
38827: PUSH
38828: LD_VAR 0 6
38832: PPUSH
38833: LD_VAR 0 9
38837: PUSH
38838: LD_VAR 0 7
38842: MINUS
38843: PUSH
38844: LD_INT 1
38846: PLUS
38847: PPUSH
38848: LD_VAR 0 9
38852: PUSH
38853: LD_VAR 0 7
38857: ARRAY
38858: PPUSH
38859: CALL_OW 1
38863: ST_TO_ADDR
38864: GO 38820
38866: POP
38867: POP
// end ; tmp := [ ] ;
38868: LD_ADDR_VAR 0 9
38872: PUSH
38873: EMPTY
38874: ST_TO_ADDR
// if mode then
38875: LD_VAR 0 5
38879: IFFALSE 38948
// begin for i = 1 to result do
38881: LD_ADDR_VAR 0 7
38885: PUSH
38886: DOUBLE
38887: LD_INT 1
38889: DEC
38890: ST_TO_ADDR
38891: LD_VAR 0 6
38895: PUSH
38896: FOR_TO
38897: IFFALSE 38936
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38899: LD_ADDR_VAR 0 9
38903: PUSH
38904: LD_VAR 0 9
38908: PPUSH
38909: LD_VAR 0 7
38913: PPUSH
38914: LD_VAR 0 6
38918: PUSH
38919: LD_VAR 0 7
38923: ARRAY
38924: PUSH
38925: LD_INT 1
38927: ARRAY
38928: PPUSH
38929: CALL_OW 1
38933: ST_TO_ADDR
38934: GO 38896
38936: POP
38937: POP
// result := tmp ;
38938: LD_ADDR_VAR 0 6
38942: PUSH
38943: LD_VAR 0 9
38947: ST_TO_ADDR
// end ; end ;
38948: LD_VAR 0 6
38952: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38953: LD_INT 0
38955: PPUSH
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38961: LD_ADDR_VAR 0 5
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: EMPTY
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// if not x or not y then
38983: LD_VAR 0 2
38987: NOT
38988: PUSH
38989: LD_VAR 0 3
38993: NOT
38994: OR
38995: IFFALSE 38999
// exit ;
38997: GO 40645
// if not range then
38999: LD_VAR 0 4
39003: NOT
39004: IFFALSE 39014
// range := 10 ;
39006: LD_ADDR_VAR 0 4
39010: PUSH
39011: LD_INT 10
39013: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39014: LD_ADDR_VAR 0 8
39018: PUSH
39019: LD_INT 81
39021: PUSH
39022: LD_VAR 0 1
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 92
39033: PUSH
39034: LD_VAR 0 2
39038: PUSH
39039: LD_VAR 0 3
39043: PUSH
39044: LD_VAR 0 4
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 3
39057: PUSH
39058: LD_INT 21
39060: PUSH
39061: LD_INT 3
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: PPUSH
39077: CALL_OW 69
39081: ST_TO_ADDR
// if not tmp then
39082: LD_VAR 0 8
39086: NOT
39087: IFFALSE 39091
// exit ;
39089: GO 40645
// for i in tmp do
39091: LD_ADDR_VAR 0 6
39095: PUSH
39096: LD_VAR 0 8
39100: PUSH
39101: FOR_IN
39102: IFFALSE 40620
// begin points := [ 0 , 0 , 0 ] ;
39104: LD_ADDR_VAR 0 9
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// bpoints := 1 ;
39123: LD_ADDR_VAR 0 10
39127: PUSH
39128: LD_INT 1
39130: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39131: LD_VAR 0 6
39135: PPUSH
39136: CALL_OW 247
39140: PUSH
39141: LD_INT 1
39143: DOUBLE
39144: EQUAL
39145: IFTRUE 39149
39147: GO 39727
39149: POP
// begin if GetClass ( i ) = 1 then
39150: LD_VAR 0 6
39154: PPUSH
39155: CALL_OW 257
39159: PUSH
39160: LD_INT 1
39162: EQUAL
39163: IFFALSE 39184
// points := [ 10 , 5 , 3 ] ;
39165: LD_ADDR_VAR 0 9
39169: PUSH
39170: LD_INT 10
39172: PUSH
39173: LD_INT 5
39175: PUSH
39176: LD_INT 3
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39184: LD_VAR 0 6
39188: PPUSH
39189: CALL_OW 257
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: LD_INT 3
39199: PUSH
39200: LD_INT 4
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: LIST
39207: IN
39208: IFFALSE 39229
// points := [ 3 , 2 , 1 ] ;
39210: LD_ADDR_VAR 0 9
39214: PUSH
39215: LD_INT 3
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39229: LD_VAR 0 6
39233: PPUSH
39234: CALL_OW 257
39238: PUSH
39239: LD_INT 5
39241: EQUAL
39242: IFFALSE 39263
// points := [ 130 , 5 , 2 ] ;
39244: LD_ADDR_VAR 0 9
39248: PUSH
39249: LD_INT 130
39251: PUSH
39252: LD_INT 5
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39263: LD_VAR 0 6
39267: PPUSH
39268: CALL_OW 257
39272: PUSH
39273: LD_INT 8
39275: EQUAL
39276: IFFALSE 39297
// points := [ 35 , 35 , 30 ] ;
39278: LD_ADDR_VAR 0 9
39282: PUSH
39283: LD_INT 35
39285: PUSH
39286: LD_INT 35
39288: PUSH
39289: LD_INT 30
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39297: LD_VAR 0 6
39301: PPUSH
39302: CALL_OW 257
39306: PUSH
39307: LD_INT 9
39309: EQUAL
39310: IFFALSE 39331
// points := [ 20 , 55 , 40 ] ;
39312: LD_ADDR_VAR 0 9
39316: PUSH
39317: LD_INT 20
39319: PUSH
39320: LD_INT 55
39322: PUSH
39323: LD_INT 40
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39331: LD_VAR 0 6
39335: PPUSH
39336: CALL_OW 257
39340: PUSH
39341: LD_INT 12
39343: PUSH
39344: LD_INT 16
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: IN
39351: IFFALSE 39372
// points := [ 5 , 3 , 2 ] ;
39353: LD_ADDR_VAR 0 9
39357: PUSH
39358: LD_INT 5
39360: PUSH
39361: LD_INT 3
39363: PUSH
39364: LD_INT 2
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39372: LD_VAR 0 6
39376: PPUSH
39377: CALL_OW 257
39381: PUSH
39382: LD_INT 17
39384: EQUAL
39385: IFFALSE 39406
// points := [ 100 , 50 , 75 ] ;
39387: LD_ADDR_VAR 0 9
39391: PUSH
39392: LD_INT 100
39394: PUSH
39395: LD_INT 50
39397: PUSH
39398: LD_INT 75
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39406: LD_VAR 0 6
39410: PPUSH
39411: CALL_OW 257
39415: PUSH
39416: LD_INT 15
39418: EQUAL
39419: IFFALSE 39440
// points := [ 10 , 5 , 3 ] ;
39421: LD_ADDR_VAR 0 9
39425: PUSH
39426: LD_INT 10
39428: PUSH
39429: LD_INT 5
39431: PUSH
39432: LD_INT 3
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39440: LD_VAR 0 6
39444: PPUSH
39445: CALL_OW 257
39449: PUSH
39450: LD_INT 14
39452: EQUAL
39453: IFFALSE 39474
// points := [ 10 , 0 , 0 ] ;
39455: LD_ADDR_VAR 0 9
39459: PUSH
39460: LD_INT 10
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39474: LD_VAR 0 6
39478: PPUSH
39479: CALL_OW 257
39483: PUSH
39484: LD_INT 11
39486: EQUAL
39487: IFFALSE 39508
// points := [ 30 , 10 , 5 ] ;
39489: LD_ADDR_VAR 0 9
39493: PUSH
39494: LD_INT 30
39496: PUSH
39497: LD_INT 10
39499: PUSH
39500: LD_INT 5
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: LIST
39507: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39508: LD_VAR 0 1
39512: PPUSH
39513: LD_INT 5
39515: PPUSH
39516: CALL_OW 321
39520: PUSH
39521: LD_INT 2
39523: EQUAL
39524: IFFALSE 39541
// bpoints := bpoints * 1.8 ;
39526: LD_ADDR_VAR 0 10
39530: PUSH
39531: LD_VAR 0 10
39535: PUSH
39536: LD_REAL  1.80000000000000E+0000
39539: MUL
39540: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39541: LD_VAR 0 6
39545: PPUSH
39546: CALL_OW 257
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: LD_INT 3
39559: PUSH
39560: LD_INT 4
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: IN
39569: PUSH
39570: LD_VAR 0 1
39574: PPUSH
39575: LD_INT 51
39577: PPUSH
39578: CALL_OW 321
39582: PUSH
39583: LD_INT 2
39585: EQUAL
39586: AND
39587: IFFALSE 39604
// bpoints := bpoints * 1.2 ;
39589: LD_ADDR_VAR 0 10
39593: PUSH
39594: LD_VAR 0 10
39598: PUSH
39599: LD_REAL  1.20000000000000E+0000
39602: MUL
39603: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39604: LD_VAR 0 6
39608: PPUSH
39609: CALL_OW 257
39613: PUSH
39614: LD_INT 5
39616: PUSH
39617: LD_INT 7
39619: PUSH
39620: LD_INT 9
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: IN
39628: PUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: LD_INT 52
39636: PPUSH
39637: CALL_OW 321
39641: PUSH
39642: LD_INT 2
39644: EQUAL
39645: AND
39646: IFFALSE 39663
// bpoints := bpoints * 1.5 ;
39648: LD_ADDR_VAR 0 10
39652: PUSH
39653: LD_VAR 0 10
39657: PUSH
39658: LD_REAL  1.50000000000000E+0000
39661: MUL
39662: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39663: LD_VAR 0 1
39667: PPUSH
39668: LD_INT 66
39670: PPUSH
39671: CALL_OW 321
39675: PUSH
39676: LD_INT 2
39678: EQUAL
39679: IFFALSE 39696
// bpoints := bpoints * 1.1 ;
39681: LD_ADDR_VAR 0 10
39685: PUSH
39686: LD_VAR 0 10
39690: PUSH
39691: LD_REAL  1.10000000000000E+0000
39694: MUL
39695: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39696: LD_ADDR_VAR 0 10
39700: PUSH
39701: LD_VAR 0 10
39705: PUSH
39706: LD_VAR 0 6
39710: PPUSH
39711: LD_INT 1
39713: PPUSH
39714: CALL_OW 259
39718: PUSH
39719: LD_REAL  1.15000000000000E+0000
39722: MUL
39723: MUL
39724: ST_TO_ADDR
// end ; unit_vehicle :
39725: GO 40549
39727: LD_INT 2
39729: DOUBLE
39730: EQUAL
39731: IFTRUE 39735
39733: GO 40537
39735: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39736: LD_VAR 0 6
39740: PPUSH
39741: CALL_OW 264
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: LD_INT 42
39751: PUSH
39752: LD_INT 24
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: IN
39760: IFFALSE 39781
// points := [ 25 , 5 , 3 ] ;
39762: LD_ADDR_VAR 0 9
39766: PUSH
39767: LD_INT 25
39769: PUSH
39770: LD_INT 5
39772: PUSH
39773: LD_INT 3
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39781: LD_VAR 0 6
39785: PPUSH
39786: CALL_OW 264
39790: PUSH
39791: LD_INT 4
39793: PUSH
39794: LD_INT 43
39796: PUSH
39797: LD_INT 25
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: IN
39805: IFFALSE 39826
// points := [ 40 , 15 , 5 ] ;
39807: LD_ADDR_VAR 0 9
39811: PUSH
39812: LD_INT 40
39814: PUSH
39815: LD_INT 15
39817: PUSH
39818: LD_INT 5
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39826: LD_VAR 0 6
39830: PPUSH
39831: CALL_OW 264
39835: PUSH
39836: LD_INT 3
39838: PUSH
39839: LD_INT 23
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: IN
39846: IFFALSE 39867
// points := [ 7 , 25 , 8 ] ;
39848: LD_ADDR_VAR 0 9
39852: PUSH
39853: LD_INT 7
39855: PUSH
39856: LD_INT 25
39858: PUSH
39859: LD_INT 8
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39867: LD_VAR 0 6
39871: PPUSH
39872: CALL_OW 264
39876: PUSH
39877: LD_INT 5
39879: PUSH
39880: LD_INT 27
39882: PUSH
39883: LD_INT 44
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: LIST
39890: IN
39891: IFFALSE 39912
// points := [ 14 , 50 , 16 ] ;
39893: LD_ADDR_VAR 0 9
39897: PUSH
39898: LD_INT 14
39900: PUSH
39901: LD_INT 50
39903: PUSH
39904: LD_INT 16
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: LIST
39911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39912: LD_VAR 0 6
39916: PPUSH
39917: CALL_OW 264
39921: PUSH
39922: LD_INT 6
39924: PUSH
39925: LD_INT 46
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: IN
39932: IFFALSE 39953
// points := [ 32 , 120 , 70 ] ;
39934: LD_ADDR_VAR 0 9
39938: PUSH
39939: LD_INT 32
39941: PUSH
39942: LD_INT 120
39944: PUSH
39945: LD_INT 70
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: LIST
39952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
39953: LD_VAR 0 6
39957: PPUSH
39958: CALL_OW 264
39962: PUSH
39963: LD_INT 7
39965: PUSH
39966: LD_INT 28
39968: PUSH
39969: LD_INT 45
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: IN
39977: IFFALSE 39998
// points := [ 35 , 20 , 45 ] ;
39979: LD_ADDR_VAR 0 9
39983: PUSH
39984: LD_INT 35
39986: PUSH
39987: LD_INT 20
39989: PUSH
39990: LD_INT 45
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39998: LD_VAR 0 6
40002: PPUSH
40003: CALL_OW 264
40007: PUSH
40008: LD_INT 47
40010: PUSH
40011: EMPTY
40012: LIST
40013: IN
40014: IFFALSE 40035
// points := [ 67 , 45 , 75 ] ;
40016: LD_ADDR_VAR 0 9
40020: PUSH
40021: LD_INT 67
40023: PUSH
40024: LD_INT 45
40026: PUSH
40027: LD_INT 75
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40035: LD_VAR 0 6
40039: PPUSH
40040: CALL_OW 264
40044: PUSH
40045: LD_INT 26
40047: PUSH
40048: EMPTY
40049: LIST
40050: IN
40051: IFFALSE 40072
// points := [ 120 , 30 , 80 ] ;
40053: LD_ADDR_VAR 0 9
40057: PUSH
40058: LD_INT 120
40060: PUSH
40061: LD_INT 30
40063: PUSH
40064: LD_INT 80
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: LIST
40071: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40072: LD_VAR 0 6
40076: PPUSH
40077: CALL_OW 264
40081: PUSH
40082: LD_INT 22
40084: PUSH
40085: EMPTY
40086: LIST
40087: IN
40088: IFFALSE 40109
// points := [ 40 , 1 , 1 ] ;
40090: LD_ADDR_VAR 0 9
40094: PUSH
40095: LD_INT 40
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40109: LD_VAR 0 6
40113: PPUSH
40114: CALL_OW 264
40118: PUSH
40119: LD_INT 29
40121: PUSH
40122: EMPTY
40123: LIST
40124: IN
40125: IFFALSE 40146
// points := [ 70 , 200 , 400 ] ;
40127: LD_ADDR_VAR 0 9
40131: PUSH
40132: LD_INT 70
40134: PUSH
40135: LD_INT 200
40137: PUSH
40138: LD_INT 400
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: LIST
40145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40146: LD_VAR 0 6
40150: PPUSH
40151: CALL_OW 264
40155: PUSH
40156: LD_INT 14
40158: PUSH
40159: LD_INT 53
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: IN
40166: IFFALSE 40187
// points := [ 40 , 10 , 20 ] ;
40168: LD_ADDR_VAR 0 9
40172: PUSH
40173: LD_INT 40
40175: PUSH
40176: LD_INT 10
40178: PUSH
40179: LD_INT 20
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40187: LD_VAR 0 6
40191: PPUSH
40192: CALL_OW 264
40196: PUSH
40197: LD_INT 9
40199: PUSH
40200: EMPTY
40201: LIST
40202: IN
40203: IFFALSE 40224
// points := [ 5 , 70 , 20 ] ;
40205: LD_ADDR_VAR 0 9
40209: PUSH
40210: LD_INT 5
40212: PUSH
40213: LD_INT 70
40215: PUSH
40216: LD_INT 20
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: LIST
40223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40224: LD_VAR 0 6
40228: PPUSH
40229: CALL_OW 264
40233: PUSH
40234: LD_INT 10
40236: PUSH
40237: EMPTY
40238: LIST
40239: IN
40240: IFFALSE 40261
// points := [ 35 , 110 , 70 ] ;
40242: LD_ADDR_VAR 0 9
40246: PUSH
40247: LD_INT 35
40249: PUSH
40250: LD_INT 110
40252: PUSH
40253: LD_INT 70
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: LIST
40260: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40261: LD_VAR 0 6
40265: PPUSH
40266: CALL_OW 265
40270: PUSH
40271: LD_INT 25
40273: EQUAL
40274: IFFALSE 40295
// points := [ 80 , 65 , 100 ] ;
40276: LD_ADDR_VAR 0 9
40280: PUSH
40281: LD_INT 80
40283: PUSH
40284: LD_INT 65
40286: PUSH
40287: LD_INT 100
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40295: LD_VAR 0 6
40299: PPUSH
40300: CALL_OW 263
40304: PUSH
40305: LD_INT 1
40307: EQUAL
40308: IFFALSE 40343
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40310: LD_ADDR_VAR 0 10
40314: PUSH
40315: LD_VAR 0 10
40319: PUSH
40320: LD_VAR 0 6
40324: PPUSH
40325: CALL_OW 311
40329: PPUSH
40330: LD_INT 3
40332: PPUSH
40333: CALL_OW 259
40337: PUSH
40338: LD_INT 4
40340: MUL
40341: MUL
40342: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40343: LD_VAR 0 6
40347: PPUSH
40348: CALL_OW 263
40352: PUSH
40353: LD_INT 2
40355: EQUAL
40356: IFFALSE 40407
// begin j := IsControledBy ( i ) ;
40358: LD_ADDR_VAR 0 7
40362: PUSH
40363: LD_VAR 0 6
40367: PPUSH
40368: CALL_OW 312
40372: ST_TO_ADDR
// if j then
40373: LD_VAR 0 7
40377: IFFALSE 40407
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40379: LD_ADDR_VAR 0 10
40383: PUSH
40384: LD_VAR 0 10
40388: PUSH
40389: LD_VAR 0 7
40393: PPUSH
40394: LD_INT 3
40396: PPUSH
40397: CALL_OW 259
40401: PUSH
40402: LD_INT 3
40404: MUL
40405: MUL
40406: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40407: LD_VAR 0 6
40411: PPUSH
40412: CALL_OW 264
40416: PUSH
40417: LD_INT 5
40419: PUSH
40420: LD_INT 6
40422: PUSH
40423: LD_INT 46
40425: PUSH
40426: LD_INT 44
40428: PUSH
40429: LD_INT 47
40431: PUSH
40432: LD_INT 45
40434: PUSH
40435: LD_INT 28
40437: PUSH
40438: LD_INT 7
40440: PUSH
40441: LD_INT 27
40443: PUSH
40444: LD_INT 29
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: IN
40459: PUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: LD_INT 52
40467: PPUSH
40468: CALL_OW 321
40472: PUSH
40473: LD_INT 2
40475: EQUAL
40476: AND
40477: IFFALSE 40494
// bpoints := bpoints * 1.2 ;
40479: LD_ADDR_VAR 0 10
40483: PUSH
40484: LD_VAR 0 10
40488: PUSH
40489: LD_REAL  1.20000000000000E+0000
40492: MUL
40493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40494: LD_VAR 0 6
40498: PPUSH
40499: CALL_OW 264
40503: PUSH
40504: LD_INT 6
40506: PUSH
40507: LD_INT 46
40509: PUSH
40510: LD_INT 47
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: IN
40518: IFFALSE 40535
// bpoints := bpoints * 1.2 ;
40520: LD_ADDR_VAR 0 10
40524: PUSH
40525: LD_VAR 0 10
40529: PUSH
40530: LD_REAL  1.20000000000000E+0000
40533: MUL
40534: ST_TO_ADDR
// end ; unit_building :
40535: GO 40549
40537: LD_INT 3
40539: DOUBLE
40540: EQUAL
40541: IFTRUE 40545
40543: GO 40548
40545: POP
// ; end ;
40546: GO 40549
40548: POP
// for j = 1 to 3 do
40549: LD_ADDR_VAR 0 7
40553: PUSH
40554: DOUBLE
40555: LD_INT 1
40557: DEC
40558: ST_TO_ADDR
40559: LD_INT 3
40561: PUSH
40562: FOR_TO
40563: IFFALSE 40616
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40565: LD_ADDR_VAR 0 5
40569: PUSH
40570: LD_VAR 0 5
40574: PPUSH
40575: LD_VAR 0 7
40579: PPUSH
40580: LD_VAR 0 5
40584: PUSH
40585: LD_VAR 0 7
40589: ARRAY
40590: PUSH
40591: LD_VAR 0 9
40595: PUSH
40596: LD_VAR 0 7
40600: ARRAY
40601: PUSH
40602: LD_VAR 0 10
40606: MUL
40607: PLUS
40608: PPUSH
40609: CALL_OW 1
40613: ST_TO_ADDR
40614: GO 40562
40616: POP
40617: POP
// end ;
40618: GO 39101
40620: POP
40621: POP
// result := Replace ( result , 4 , tmp ) ;
40622: LD_ADDR_VAR 0 5
40626: PUSH
40627: LD_VAR 0 5
40631: PPUSH
40632: LD_INT 4
40634: PPUSH
40635: LD_VAR 0 8
40639: PPUSH
40640: CALL_OW 1
40644: ST_TO_ADDR
// end ;
40645: LD_VAR 0 5
40649: RET
// export function DangerAtRange ( unit , range ) ; begin
40650: LD_INT 0
40652: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40653: LD_ADDR_VAR 0 3
40657: PUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 255
40667: PPUSH
40668: LD_VAR 0 1
40672: PPUSH
40673: CALL_OW 250
40677: PPUSH
40678: LD_VAR 0 1
40682: PPUSH
40683: CALL_OW 251
40687: PPUSH
40688: LD_VAR 0 2
40692: PPUSH
40693: CALL 38953 0 4
40697: ST_TO_ADDR
// end ;
40698: LD_VAR 0 3
40702: RET
// export function DangerInArea ( side , area ) ; begin
40703: LD_INT 0
40705: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40706: LD_ADDR_VAR 0 3
40710: PUSH
40711: LD_VAR 0 2
40715: PPUSH
40716: LD_INT 81
40718: PUSH
40719: LD_VAR 0 1
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PPUSH
40728: CALL_OW 70
40732: ST_TO_ADDR
// end ;
40733: LD_VAR 0 3
40737: RET
// export function IsExtension ( b ) ; begin
40738: LD_INT 0
40740: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40741: LD_ADDR_VAR 0 2
40745: PUSH
40746: LD_VAR 0 1
40750: PUSH
40751: LD_INT 23
40753: PUSH
40754: LD_INT 20
40756: PUSH
40757: LD_INT 22
40759: PUSH
40760: LD_INT 17
40762: PUSH
40763: LD_INT 24
40765: PUSH
40766: LD_INT 21
40768: PUSH
40769: LD_INT 19
40771: PUSH
40772: LD_INT 16
40774: PUSH
40775: LD_INT 25
40777: PUSH
40778: LD_INT 18
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: IN
40793: ST_TO_ADDR
// end ;
40794: LD_VAR 0 2
40798: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
40799: LD_INT 0
40801: PPUSH
40802: PPUSH
40803: PPUSH
// result := [ ] ;
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: EMPTY
40810: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40811: LD_ADDR_VAR 0 4
40815: PUSH
40816: LD_VAR 0 2
40820: PPUSH
40821: LD_INT 21
40823: PUSH
40824: LD_INT 3
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PPUSH
40831: CALL_OW 70
40835: ST_TO_ADDR
// if not tmp then
40836: LD_VAR 0 4
40840: NOT
40841: IFFALSE 40845
// exit ;
40843: GO 40903
// for i in tmp do
40845: LD_ADDR_VAR 0 5
40849: PUSH
40850: LD_VAR 0 4
40854: PUSH
40855: FOR_IN
40856: IFFALSE 40891
// if GetBase ( i ) <> base then
40858: LD_VAR 0 5
40862: PPUSH
40863: CALL_OW 274
40867: PUSH
40868: LD_VAR 0 1
40872: NONEQUAL
40873: IFFALSE 40889
// ComLinkToBase ( base , i ) ;
40875: LD_VAR 0 1
40879: PPUSH
40880: LD_VAR 0 5
40884: PPUSH
40885: CALL_OW 169
40889: GO 40855
40891: POP
40892: POP
// result := tmp ;
40893: LD_ADDR_VAR 0 3
40897: PUSH
40898: LD_VAR 0 4
40902: ST_TO_ADDR
// end ;
40903: LD_VAR 0 3
40907: RET
// export function ComComplete ( unit , b ) ; var i ; begin
40908: LD_INT 0
40910: PPUSH
40911: PPUSH
// if BuildingStatus ( b ) = bs_build then
40912: LD_VAR 0 2
40916: PPUSH
40917: CALL_OW 461
40921: PUSH
40922: LD_INT 1
40924: EQUAL
40925: IFFALSE 40985
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40927: LD_VAR 0 1
40931: PPUSH
40932: LD_STRING h
40934: PUSH
40935: LD_VAR 0 2
40939: PPUSH
40940: CALL_OW 250
40944: PUSH
40945: LD_VAR 0 2
40949: PPUSH
40950: CALL_OW 251
40954: PUSH
40955: LD_VAR 0 2
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: PUSH
40978: EMPTY
40979: LIST
40980: PPUSH
40981: CALL_OW 446
// end ;
40985: LD_VAR 0 3
40989: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40990: LD_INT 0
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
40998: LD_VAR 0 1
41002: NOT
41003: PUSH
41004: LD_VAR 0 1
41008: PPUSH
41009: CALL_OW 263
41013: PUSH
41014: LD_INT 2
41016: EQUAL
41017: NOT
41018: OR
41019: IFFALSE 41023
// exit ;
41021: GO 41339
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41023: LD_ADDR_VAR 0 6
41027: PUSH
41028: LD_INT 22
41030: PUSH
41031: LD_VAR 0 1
41035: PPUSH
41036: CALL_OW 255
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 30
41050: PUSH
41051: LD_INT 36
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 34
41060: PUSH
41061: LD_INT 31
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PPUSH
41077: CALL_OW 69
41081: ST_TO_ADDR
// if not tmp then
41082: LD_VAR 0 6
41086: NOT
41087: IFFALSE 41091
// exit ;
41089: GO 41339
// result := [ ] ;
41091: LD_ADDR_VAR 0 2
41095: PUSH
41096: EMPTY
41097: ST_TO_ADDR
// for i in tmp do
41098: LD_ADDR_VAR 0 3
41102: PUSH
41103: LD_VAR 0 6
41107: PUSH
41108: FOR_IN
41109: IFFALSE 41180
// begin t := UnitsInside ( i ) ;
41111: LD_ADDR_VAR 0 4
41115: PUSH
41116: LD_VAR 0 3
41120: PPUSH
41121: CALL_OW 313
41125: ST_TO_ADDR
// if t then
41126: LD_VAR 0 4
41130: IFFALSE 41178
// for j in t do
41132: LD_ADDR_VAR 0 7
41136: PUSH
41137: LD_VAR 0 4
41141: PUSH
41142: FOR_IN
41143: IFFALSE 41176
// result := Insert ( result , result + 1 , j ) ;
41145: LD_ADDR_VAR 0 2
41149: PUSH
41150: LD_VAR 0 2
41154: PPUSH
41155: LD_VAR 0 2
41159: PUSH
41160: LD_INT 1
41162: PLUS
41163: PPUSH
41164: LD_VAR 0 7
41168: PPUSH
41169: CALL_OW 2
41173: ST_TO_ADDR
41174: GO 41142
41176: POP
41177: POP
// end ;
41178: GO 41108
41180: POP
41181: POP
// if not result then
41182: LD_VAR 0 2
41186: NOT
41187: IFFALSE 41191
// exit ;
41189: GO 41339
// mech := result [ 1 ] ;
41191: LD_ADDR_VAR 0 5
41195: PUSH
41196: LD_VAR 0 2
41200: PUSH
41201: LD_INT 1
41203: ARRAY
41204: ST_TO_ADDR
// if result > 1 then
41205: LD_VAR 0 2
41209: PUSH
41210: LD_INT 1
41212: GREATER
41213: IFFALSE 41325
// for i = 2 to result do
41215: LD_ADDR_VAR 0 3
41219: PUSH
41220: DOUBLE
41221: LD_INT 2
41223: DEC
41224: ST_TO_ADDR
41225: LD_VAR 0 2
41229: PUSH
41230: FOR_TO
41231: IFFALSE 41323
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41233: LD_ADDR_VAR 0 4
41237: PUSH
41238: LD_VAR 0 2
41242: PUSH
41243: LD_VAR 0 3
41247: ARRAY
41248: PPUSH
41249: LD_INT 3
41251: PPUSH
41252: CALL_OW 259
41256: PUSH
41257: LD_VAR 0 2
41261: PUSH
41262: LD_VAR 0 3
41266: ARRAY
41267: PPUSH
41268: CALL_OW 432
41272: MINUS
41273: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41274: LD_VAR 0 4
41278: PUSH
41279: LD_VAR 0 5
41283: PPUSH
41284: LD_INT 3
41286: PPUSH
41287: CALL_OW 259
41291: PUSH
41292: LD_VAR 0 5
41296: PPUSH
41297: CALL_OW 432
41301: MINUS
41302: GREATEREQUAL
41303: IFFALSE 41321
// mech := result [ i ] ;
41305: LD_ADDR_VAR 0 5
41309: PUSH
41310: LD_VAR 0 2
41314: PUSH
41315: LD_VAR 0 3
41319: ARRAY
41320: ST_TO_ADDR
// end ;
41321: GO 41230
41323: POP
41324: POP
// ComLinkTo ( vehicle , mech ) ;
41325: LD_VAR 0 1
41329: PPUSH
41330: LD_VAR 0 5
41334: PPUSH
41335: CALL_OW 135
// end ;
41339: LD_VAR 0 2
41343: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41344: LD_INT 0
41346: PPUSH
41347: PPUSH
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
// result := [ ] ;
41359: LD_ADDR_VAR 0 7
41363: PUSH
41364: EMPTY
41365: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41366: LD_VAR 0 1
41370: PPUSH
41371: CALL_OW 266
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: IN
41386: NOT
41387: IFFALSE 41391
// exit ;
41389: GO 43022
// if name then
41391: LD_VAR 0 3
41395: IFFALSE 41411
// SetBName ( base_dep , name ) ;
41397: LD_VAR 0 1
41401: PPUSH
41402: LD_VAR 0 3
41406: PPUSH
41407: CALL_OW 500
// base := GetBase ( base_dep ) ;
41411: LD_ADDR_VAR 0 15
41415: PUSH
41416: LD_VAR 0 1
41420: PPUSH
41421: CALL_OW 274
41425: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41426: LD_ADDR_VAR 0 16
41430: PUSH
41431: LD_VAR 0 1
41435: PPUSH
41436: CALL_OW 255
41440: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41441: LD_ADDR_VAR 0 17
41445: PUSH
41446: LD_VAR 0 1
41450: PPUSH
41451: CALL_OW 248
41455: ST_TO_ADDR
// if sources then
41456: LD_VAR 0 5
41460: IFFALSE 41507
// for i = 1 to 3 do
41462: LD_ADDR_VAR 0 8
41466: PUSH
41467: DOUBLE
41468: LD_INT 1
41470: DEC
41471: ST_TO_ADDR
41472: LD_INT 3
41474: PUSH
41475: FOR_TO
41476: IFFALSE 41505
// AddResourceType ( base , i , sources [ i ] ) ;
41478: LD_VAR 0 15
41482: PPUSH
41483: LD_VAR 0 8
41487: PPUSH
41488: LD_VAR 0 5
41492: PUSH
41493: LD_VAR 0 8
41497: ARRAY
41498: PPUSH
41499: CALL_OW 276
41503: GO 41475
41505: POP
41506: POP
// buildings := GetBaseBuildings ( base , area ) ;
41507: LD_ADDR_VAR 0 18
41511: PUSH
41512: LD_VAR 0 15
41516: PPUSH
41517: LD_VAR 0 2
41521: PPUSH
41522: CALL 40799 0 2
41526: ST_TO_ADDR
// InitHc ;
41527: CALL_OW 19
// InitUc ;
41531: CALL_OW 18
// uc_side := side ;
41535: LD_ADDR_OWVAR 20
41539: PUSH
41540: LD_VAR 0 16
41544: ST_TO_ADDR
// uc_nation := nation ;
41545: LD_ADDR_OWVAR 21
41549: PUSH
41550: LD_VAR 0 17
41554: ST_TO_ADDR
// if buildings then
41555: LD_VAR 0 18
41559: IFFALSE 42881
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41561: LD_ADDR_VAR 0 19
41565: PUSH
41566: LD_VAR 0 18
41570: PPUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 30
41576: PUSH
41577: LD_INT 29
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 30
41586: PUSH
41587: LD_INT 30
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: LIST
41598: PPUSH
41599: CALL_OW 72
41603: ST_TO_ADDR
// if tmp then
41604: LD_VAR 0 19
41608: IFFALSE 41656
// for i in tmp do
41610: LD_ADDR_VAR 0 8
41614: PUSH
41615: LD_VAR 0 19
41619: PUSH
41620: FOR_IN
41621: IFFALSE 41654
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41623: LD_VAR 0 8
41627: PPUSH
41628: CALL_OW 250
41632: PPUSH
41633: LD_VAR 0 8
41637: PPUSH
41638: CALL_OW 251
41642: PPUSH
41643: LD_VAR 0 16
41647: PPUSH
41648: CALL_OW 441
41652: GO 41620
41654: POP
41655: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41656: LD_VAR 0 18
41660: PPUSH
41661: LD_INT 2
41663: PUSH
41664: LD_INT 30
41666: PUSH
41667: LD_INT 32
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 30
41676: PUSH
41677: LD_INT 33
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: LIST
41688: PPUSH
41689: CALL_OW 72
41693: IFFALSE 41781
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41695: LD_ADDR_VAR 0 8
41699: PUSH
41700: LD_VAR 0 18
41704: PPUSH
41705: LD_INT 2
41707: PUSH
41708: LD_INT 30
41710: PUSH
41711: LD_INT 32
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 30
41720: PUSH
41721: LD_INT 33
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: LIST
41732: PPUSH
41733: CALL_OW 72
41737: PUSH
41738: FOR_IN
41739: IFFALSE 41779
// begin if not GetBWeapon ( i ) then
41741: LD_VAR 0 8
41745: PPUSH
41746: CALL_OW 269
41750: NOT
41751: IFFALSE 41777
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41753: LD_VAR 0 8
41757: PPUSH
41758: LD_VAR 0 8
41762: PPUSH
41763: LD_VAR 0 2
41767: PPUSH
41768: CALL 43027 0 2
41772: PPUSH
41773: CALL_OW 431
// end ;
41777: GO 41738
41779: POP
41780: POP
// end ; for i = 1 to personel do
41781: LD_ADDR_VAR 0 8
41785: PUSH
41786: DOUBLE
41787: LD_INT 1
41789: DEC
41790: ST_TO_ADDR
41791: LD_VAR 0 6
41795: PUSH
41796: FOR_TO
41797: IFFALSE 42861
// begin if i > 4 then
41799: LD_VAR 0 8
41803: PUSH
41804: LD_INT 4
41806: GREATER
41807: IFFALSE 41811
// break ;
41809: GO 42861
// case i of 1 :
41811: LD_VAR 0 8
41815: PUSH
41816: LD_INT 1
41818: DOUBLE
41819: EQUAL
41820: IFTRUE 41824
41822: GO 41904
41824: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41825: LD_ADDR_VAR 0 12
41829: PUSH
41830: LD_VAR 0 18
41834: PPUSH
41835: LD_INT 22
41837: PUSH
41838: LD_VAR 0 16
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 58
41849: PUSH
41850: EMPTY
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: LD_INT 30
41858: PUSH
41859: LD_INT 32
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 30
41868: PUSH
41869: LD_INT 4
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 30
41878: PUSH
41879: LD_INT 5
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: PPUSH
41897: CALL_OW 72
41901: ST_TO_ADDR
41902: GO 42126
41904: LD_INT 2
41906: DOUBLE
41907: EQUAL
41908: IFTRUE 41912
41910: GO 41974
41912: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41913: LD_ADDR_VAR 0 12
41917: PUSH
41918: LD_VAR 0 18
41922: PPUSH
41923: LD_INT 22
41925: PUSH
41926: LD_VAR 0 16
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 30
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 30
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: LIST
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PPUSH
41967: CALL_OW 72
41971: ST_TO_ADDR
41972: GO 42126
41974: LD_INT 3
41976: DOUBLE
41977: EQUAL
41978: IFTRUE 41982
41980: GO 42044
41982: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41983: LD_ADDR_VAR 0 12
41987: PUSH
41988: LD_VAR 0 18
41992: PPUSH
41993: LD_INT 22
41995: PUSH
41996: LD_VAR 0 16
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 30
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 30
42020: PUSH
42021: LD_INT 3
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PPUSH
42037: CALL_OW 72
42041: ST_TO_ADDR
42042: GO 42126
42044: LD_INT 4
42046: DOUBLE
42047: EQUAL
42048: IFTRUE 42052
42050: GO 42125
42052: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42053: LD_ADDR_VAR 0 12
42057: PUSH
42058: LD_VAR 0 18
42062: PPUSH
42063: LD_INT 22
42065: PUSH
42066: LD_VAR 0 16
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: LD_INT 30
42080: PUSH
42081: LD_INT 6
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 30
42090: PUSH
42091: LD_INT 7
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 30
42100: PUSH
42101: LD_INT 8
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PPUSH
42118: CALL_OW 72
42122: ST_TO_ADDR
42123: GO 42126
42125: POP
// if i = 1 then
42126: LD_VAR 0 8
42130: PUSH
42131: LD_INT 1
42133: EQUAL
42134: IFFALSE 42245
// begin tmp := [ ] ;
42136: LD_ADDR_VAR 0 19
42140: PUSH
42141: EMPTY
42142: ST_TO_ADDR
// for j in f do
42143: LD_ADDR_VAR 0 9
42147: PUSH
42148: LD_VAR 0 12
42152: PUSH
42153: FOR_IN
42154: IFFALSE 42227
// if GetBType ( j ) = b_bunker then
42156: LD_VAR 0 9
42160: PPUSH
42161: CALL_OW 266
42165: PUSH
42166: LD_INT 32
42168: EQUAL
42169: IFFALSE 42196
// tmp := Insert ( tmp , 1 , j ) else
42171: LD_ADDR_VAR 0 19
42175: PUSH
42176: LD_VAR 0 19
42180: PPUSH
42181: LD_INT 1
42183: PPUSH
42184: LD_VAR 0 9
42188: PPUSH
42189: CALL_OW 2
42193: ST_TO_ADDR
42194: GO 42225
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42196: LD_ADDR_VAR 0 19
42200: PUSH
42201: LD_VAR 0 19
42205: PPUSH
42206: LD_VAR 0 19
42210: PUSH
42211: LD_INT 1
42213: PLUS
42214: PPUSH
42215: LD_VAR 0 9
42219: PPUSH
42220: CALL_OW 2
42224: ST_TO_ADDR
42225: GO 42153
42227: POP
42228: POP
// if tmp then
42229: LD_VAR 0 19
42233: IFFALSE 42245
// f := tmp ;
42235: LD_ADDR_VAR 0 12
42239: PUSH
42240: LD_VAR 0 19
42244: ST_TO_ADDR
// end ; x := personel [ i ] ;
42245: LD_ADDR_VAR 0 13
42249: PUSH
42250: LD_VAR 0 6
42254: PUSH
42255: LD_VAR 0 8
42259: ARRAY
42260: ST_TO_ADDR
// if x = - 1 then
42261: LD_VAR 0 13
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: EQUAL
42270: IFFALSE 42479
// begin for j in f do
42272: LD_ADDR_VAR 0 9
42276: PUSH
42277: LD_VAR 0 12
42281: PUSH
42282: FOR_IN
42283: IFFALSE 42475
// repeat InitHc ;
42285: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42289: LD_VAR 0 9
42293: PPUSH
42294: CALL_OW 266
42298: PUSH
42299: LD_INT 5
42301: EQUAL
42302: IFFALSE 42372
// begin if UnitsInside ( j ) < 3 then
42304: LD_VAR 0 9
42308: PPUSH
42309: CALL_OW 313
42313: PUSH
42314: LD_INT 3
42316: LESS
42317: IFFALSE 42353
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42319: LD_INT 0
42321: PPUSH
42322: LD_INT 5
42324: PUSH
42325: LD_INT 8
42327: PUSH
42328: LD_INT 9
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: LIST
42335: PUSH
42336: LD_VAR 0 17
42340: ARRAY
42341: PPUSH
42342: LD_VAR 0 4
42346: PPUSH
42347: CALL_OW 380
42351: GO 42370
// PrepareHuman ( false , i , skill ) ;
42353: LD_INT 0
42355: PPUSH
42356: LD_VAR 0 8
42360: PPUSH
42361: LD_VAR 0 4
42365: PPUSH
42366: CALL_OW 380
// end else
42370: GO 42389
// PrepareHuman ( false , i , skill ) ;
42372: LD_INT 0
42374: PPUSH
42375: LD_VAR 0 8
42379: PPUSH
42380: LD_VAR 0 4
42384: PPUSH
42385: CALL_OW 380
// un := CreateHuman ;
42389: LD_ADDR_VAR 0 14
42393: PUSH
42394: CALL_OW 44
42398: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42399: LD_ADDR_VAR 0 7
42403: PUSH
42404: LD_VAR 0 7
42408: PPUSH
42409: LD_INT 1
42411: PPUSH
42412: LD_VAR 0 14
42416: PPUSH
42417: CALL_OW 2
42421: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42422: LD_VAR 0 14
42426: PPUSH
42427: LD_VAR 0 9
42431: PPUSH
42432: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42436: LD_VAR 0 9
42440: PPUSH
42441: CALL_OW 313
42445: PUSH
42446: LD_INT 6
42448: EQUAL
42449: PUSH
42450: LD_VAR 0 9
42454: PPUSH
42455: CALL_OW 266
42459: PUSH
42460: LD_INT 32
42462: PUSH
42463: LD_INT 31
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: IN
42470: OR
42471: IFFALSE 42285
42473: GO 42282
42475: POP
42476: POP
// end else
42477: GO 42859
// for j = 1 to x do
42479: LD_ADDR_VAR 0 9
42483: PUSH
42484: DOUBLE
42485: LD_INT 1
42487: DEC
42488: ST_TO_ADDR
42489: LD_VAR 0 13
42493: PUSH
42494: FOR_TO
42495: IFFALSE 42857
// begin InitHc ;
42497: CALL_OW 19
// if not f then
42501: LD_VAR 0 12
42505: NOT
42506: IFFALSE 42595
// begin PrepareHuman ( false , i , skill ) ;
42508: LD_INT 0
42510: PPUSH
42511: LD_VAR 0 8
42515: PPUSH
42516: LD_VAR 0 4
42520: PPUSH
42521: CALL_OW 380
// un := CreateHuman ;
42525: LD_ADDR_VAR 0 14
42529: PUSH
42530: CALL_OW 44
42534: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42535: LD_ADDR_VAR 0 7
42539: PUSH
42540: LD_VAR 0 7
42544: PPUSH
42545: LD_INT 1
42547: PPUSH
42548: LD_VAR 0 14
42552: PPUSH
42553: CALL_OW 2
42557: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42558: LD_VAR 0 14
42562: PPUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: CALL_OW 250
42572: PPUSH
42573: LD_VAR 0 1
42577: PPUSH
42578: CALL_OW 251
42582: PPUSH
42583: LD_INT 10
42585: PPUSH
42586: LD_INT 0
42588: PPUSH
42589: CALL_OW 50
// continue ;
42593: GO 42494
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42595: LD_VAR 0 12
42599: PUSH
42600: LD_INT 1
42602: ARRAY
42603: PPUSH
42604: CALL_OW 313
42608: PUSH
42609: LD_VAR 0 12
42613: PUSH
42614: LD_INT 1
42616: ARRAY
42617: PPUSH
42618: CALL_OW 266
42622: PUSH
42623: LD_INT 32
42625: PUSH
42626: LD_INT 31
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: IN
42633: AND
42634: PUSH
42635: LD_VAR 0 12
42639: PUSH
42640: LD_INT 1
42642: ARRAY
42643: PPUSH
42644: CALL_OW 313
42648: PUSH
42649: LD_INT 6
42651: EQUAL
42652: OR
42653: IFFALSE 42673
// f := Delete ( f , 1 ) ;
42655: LD_ADDR_VAR 0 12
42659: PUSH
42660: LD_VAR 0 12
42664: PPUSH
42665: LD_INT 1
42667: PPUSH
42668: CALL_OW 3
42672: ST_TO_ADDR
// if not f then
42673: LD_VAR 0 12
42677: NOT
42678: IFFALSE 42696
// begin x := x + 2 ;
42680: LD_ADDR_VAR 0 13
42684: PUSH
42685: LD_VAR 0 13
42689: PUSH
42690: LD_INT 2
42692: PLUS
42693: ST_TO_ADDR
// continue ;
42694: GO 42494
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42696: LD_VAR 0 12
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: PPUSH
42705: CALL_OW 266
42709: PUSH
42710: LD_INT 5
42712: EQUAL
42713: IFFALSE 42787
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42715: LD_VAR 0 12
42719: PUSH
42720: LD_INT 1
42722: ARRAY
42723: PPUSH
42724: CALL_OW 313
42728: PUSH
42729: LD_INT 3
42731: LESS
42732: IFFALSE 42768
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42734: LD_INT 0
42736: PPUSH
42737: LD_INT 5
42739: PUSH
42740: LD_INT 8
42742: PUSH
42743: LD_INT 9
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: PUSH
42751: LD_VAR 0 17
42755: ARRAY
42756: PPUSH
42757: LD_VAR 0 4
42761: PPUSH
42762: CALL_OW 380
42766: GO 42785
// PrepareHuman ( false , i , skill ) ;
42768: LD_INT 0
42770: PPUSH
42771: LD_VAR 0 8
42775: PPUSH
42776: LD_VAR 0 4
42780: PPUSH
42781: CALL_OW 380
// end else
42785: GO 42804
// PrepareHuman ( false , i , skill ) ;
42787: LD_INT 0
42789: PPUSH
42790: LD_VAR 0 8
42794: PPUSH
42795: LD_VAR 0 4
42799: PPUSH
42800: CALL_OW 380
// un := CreateHuman ;
42804: LD_ADDR_VAR 0 14
42808: PUSH
42809: CALL_OW 44
42813: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42814: LD_ADDR_VAR 0 7
42818: PUSH
42819: LD_VAR 0 7
42823: PPUSH
42824: LD_INT 1
42826: PPUSH
42827: LD_VAR 0 14
42831: PPUSH
42832: CALL_OW 2
42836: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42837: LD_VAR 0 14
42841: PPUSH
42842: LD_VAR 0 12
42846: PUSH
42847: LD_INT 1
42849: ARRAY
42850: PPUSH
42851: CALL_OW 52
// end ;
42855: GO 42494
42857: POP
42858: POP
// end ;
42859: GO 41796
42861: POP
42862: POP
// result := result ^ buildings ;
42863: LD_ADDR_VAR 0 7
42867: PUSH
42868: LD_VAR 0 7
42872: PUSH
42873: LD_VAR 0 18
42877: ADD
42878: ST_TO_ADDR
// end else
42879: GO 43022
// begin for i = 1 to personel do
42881: LD_ADDR_VAR 0 8
42885: PUSH
42886: DOUBLE
42887: LD_INT 1
42889: DEC
42890: ST_TO_ADDR
42891: LD_VAR 0 6
42895: PUSH
42896: FOR_TO
42897: IFFALSE 43020
// begin if i > 4 then
42899: LD_VAR 0 8
42903: PUSH
42904: LD_INT 4
42906: GREATER
42907: IFFALSE 42911
// break ;
42909: GO 43020
// x := personel [ i ] ;
42911: LD_ADDR_VAR 0 13
42915: PUSH
42916: LD_VAR 0 6
42920: PUSH
42921: LD_VAR 0 8
42925: ARRAY
42926: ST_TO_ADDR
// if x = - 1 then
42927: LD_VAR 0 13
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: EQUAL
42936: IFFALSE 42940
// continue ;
42938: GO 42896
// PrepareHuman ( false , i , skill ) ;
42940: LD_INT 0
42942: PPUSH
42943: LD_VAR 0 8
42947: PPUSH
42948: LD_VAR 0 4
42952: PPUSH
42953: CALL_OW 380
// un := CreateHuman ;
42957: LD_ADDR_VAR 0 14
42961: PUSH
42962: CALL_OW 44
42966: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42967: LD_VAR 0 14
42971: PPUSH
42972: LD_VAR 0 1
42976: PPUSH
42977: CALL_OW 250
42981: PPUSH
42982: LD_VAR 0 1
42986: PPUSH
42987: CALL_OW 251
42991: PPUSH
42992: LD_INT 10
42994: PPUSH
42995: LD_INT 0
42997: PPUSH
42998: CALL_OW 50
// result := result ^ un ;
43002: LD_ADDR_VAR 0 7
43006: PUSH
43007: LD_VAR 0 7
43011: PUSH
43012: LD_VAR 0 14
43016: ADD
43017: ST_TO_ADDR
// end ;
43018: GO 42896
43020: POP
43021: POP
// end ; end ;
43022: LD_VAR 0 7
43026: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43027: LD_INT 0
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
43038: PPUSH
43039: PPUSH
43040: PPUSH
43041: PPUSH
43042: PPUSH
43043: PPUSH
43044: PPUSH
// result := false ;
43045: LD_ADDR_VAR 0 3
43049: PUSH
43050: LD_INT 0
43052: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43053: LD_VAR 0 1
43057: NOT
43058: PUSH
43059: LD_VAR 0 1
43063: PPUSH
43064: CALL_OW 266
43068: PUSH
43069: LD_INT 32
43071: PUSH
43072: LD_INT 33
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: IN
43079: NOT
43080: OR
43081: IFFALSE 43085
// exit ;
43083: GO 44221
// nat := GetNation ( tower ) ;
43085: LD_ADDR_VAR 0 12
43089: PUSH
43090: LD_VAR 0 1
43094: PPUSH
43095: CALL_OW 248
43099: ST_TO_ADDR
// side := GetSide ( tower ) ;
43100: LD_ADDR_VAR 0 16
43104: PUSH
43105: LD_VAR 0 1
43109: PPUSH
43110: CALL_OW 255
43114: ST_TO_ADDR
// x := GetX ( tower ) ;
43115: LD_ADDR_VAR 0 10
43119: PUSH
43120: LD_VAR 0 1
43124: PPUSH
43125: CALL_OW 250
43129: ST_TO_ADDR
// y := GetY ( tower ) ;
43130: LD_ADDR_VAR 0 11
43134: PUSH
43135: LD_VAR 0 1
43139: PPUSH
43140: CALL_OW 251
43144: ST_TO_ADDR
// if not x or not y then
43145: LD_VAR 0 10
43149: NOT
43150: PUSH
43151: LD_VAR 0 11
43155: NOT
43156: OR
43157: IFFALSE 43161
// exit ;
43159: GO 44221
// weapon := 0 ;
43161: LD_ADDR_VAR 0 18
43165: PUSH
43166: LD_INT 0
43168: ST_TO_ADDR
// fac_list := [ ] ;
43169: LD_ADDR_VAR 0 17
43173: PUSH
43174: EMPTY
43175: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
43176: LD_ADDR_VAR 0 6
43180: PUSH
43181: LD_VAR 0 1
43185: PPUSH
43186: CALL_OW 274
43190: PPUSH
43191: LD_VAR 0 2
43195: PPUSH
43196: CALL 40799 0 2
43200: PPUSH
43201: LD_INT 30
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PPUSH
43211: CALL_OW 72
43215: ST_TO_ADDR
// if not factories then
43216: LD_VAR 0 6
43220: NOT
43221: IFFALSE 43225
// exit ;
43223: GO 44221
// for i in factories do
43225: LD_ADDR_VAR 0 8
43229: PUSH
43230: LD_VAR 0 6
43234: PUSH
43235: FOR_IN
43236: IFFALSE 43261
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43238: LD_ADDR_VAR 0 17
43242: PUSH
43243: LD_VAR 0 17
43247: PUSH
43248: LD_VAR 0 8
43252: PPUSH
43253: CALL_OW 478
43257: UNION
43258: ST_TO_ADDR
43259: GO 43235
43261: POP
43262: POP
// if not fac_list then
43263: LD_VAR 0 17
43267: NOT
43268: IFFALSE 43272
// exit ;
43270: GO 44221
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43272: LD_ADDR_VAR 0 5
43276: PUSH
43277: LD_INT 4
43279: PUSH
43280: LD_INT 5
43282: PUSH
43283: LD_INT 9
43285: PUSH
43286: LD_INT 10
43288: PUSH
43289: LD_INT 6
43291: PUSH
43292: LD_INT 7
43294: PUSH
43295: LD_INT 11
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 27
43309: PUSH
43310: LD_INT 28
43312: PUSH
43313: LD_INT 26
43315: PUSH
43316: LD_INT 30
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 43
43327: PUSH
43328: LD_INT 44
43330: PUSH
43331: LD_INT 46
43333: PUSH
43334: LD_INT 45
43336: PUSH
43337: LD_INT 47
43339: PUSH
43340: LD_INT 49
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: PUSH
43356: LD_VAR 0 12
43360: ARRAY
43361: ST_TO_ADDR
// for i in list do
43362: LD_ADDR_VAR 0 8
43366: PUSH
43367: LD_VAR 0 5
43371: PUSH
43372: FOR_IN
43373: IFFALSE 43406
// if not i in fac_list then
43375: LD_VAR 0 8
43379: PUSH
43380: LD_VAR 0 17
43384: IN
43385: NOT
43386: IFFALSE 43404
// list := list diff i ;
43388: LD_ADDR_VAR 0 5
43392: PUSH
43393: LD_VAR 0 5
43397: PUSH
43398: LD_VAR 0 8
43402: DIFF
43403: ST_TO_ADDR
43404: GO 43372
43406: POP
43407: POP
// if not list then
43408: LD_VAR 0 5
43412: NOT
43413: IFFALSE 43417
// exit ;
43415: GO 44221
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43417: LD_VAR 0 12
43421: PUSH
43422: LD_INT 3
43424: EQUAL
43425: PUSH
43426: LD_INT 49
43428: PUSH
43429: LD_VAR 0 5
43433: IN
43434: AND
43435: PUSH
43436: LD_INT 31
43438: PPUSH
43439: LD_VAR 0 16
43443: PPUSH
43444: CALL_OW 321
43448: PUSH
43449: LD_INT 2
43451: EQUAL
43452: AND
43453: IFFALSE 43513
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43455: LD_INT 22
43457: PUSH
43458: LD_VAR 0 16
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 35
43469: PUSH
43470: LD_INT 49
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 91
43479: PUSH
43480: LD_VAR 0 1
43484: PUSH
43485: LD_INT 10
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: PPUSH
43498: CALL_OW 69
43502: NOT
43503: IFFALSE 43513
// weapon := ru_time_lapser ;
43505: LD_ADDR_VAR 0 18
43509: PUSH
43510: LD_INT 49
43512: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43513: LD_VAR 0 12
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: IN
43528: PUSH
43529: LD_INT 11
43531: PUSH
43532: LD_VAR 0 5
43536: IN
43537: PUSH
43538: LD_INT 30
43540: PUSH
43541: LD_VAR 0 5
43545: IN
43546: OR
43547: AND
43548: PUSH
43549: LD_INT 6
43551: PPUSH
43552: LD_VAR 0 16
43556: PPUSH
43557: CALL_OW 321
43561: PUSH
43562: LD_INT 2
43564: EQUAL
43565: AND
43566: IFFALSE 43731
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43568: LD_INT 22
43570: PUSH
43571: LD_VAR 0 16
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 35
43585: PUSH
43586: LD_INT 11
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 35
43595: PUSH
43596: LD_INT 30
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 91
43610: PUSH
43611: LD_VAR 0 1
43615: PUSH
43616: LD_INT 18
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: LIST
43628: PPUSH
43629: CALL_OW 69
43633: NOT
43634: PUSH
43635: LD_INT 22
43637: PUSH
43638: LD_VAR 0 16
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: LD_INT 30
43652: PUSH
43653: LD_INT 32
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 30
43662: PUSH
43663: LD_INT 33
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 91
43677: PUSH
43678: LD_VAR 0 1
43682: PUSH
43683: LD_INT 12
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: LIST
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: PUSH
43696: EMPTY
43697: LIST
43698: PPUSH
43699: CALL_OW 69
43703: PUSH
43704: LD_INT 2
43706: GREATER
43707: AND
43708: IFFALSE 43731
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43710: LD_ADDR_VAR 0 18
43714: PUSH
43715: LD_INT 11
43717: PUSH
43718: LD_INT 30
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_VAR 0 12
43729: ARRAY
43730: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43731: LD_VAR 0 18
43735: NOT
43736: PUSH
43737: LD_INT 40
43739: PPUSH
43740: LD_VAR 0 16
43744: PPUSH
43745: CALL_OW 321
43749: PUSH
43750: LD_INT 2
43752: EQUAL
43753: AND
43754: PUSH
43755: LD_INT 7
43757: PUSH
43758: LD_VAR 0 5
43762: IN
43763: PUSH
43764: LD_INT 28
43766: PUSH
43767: LD_VAR 0 5
43771: IN
43772: OR
43773: PUSH
43774: LD_INT 45
43776: PUSH
43777: LD_VAR 0 5
43781: IN
43782: OR
43783: AND
43784: IFFALSE 44038
// begin hex := GetHexInfo ( x , y ) ;
43786: LD_ADDR_VAR 0 4
43790: PUSH
43791: LD_VAR 0 10
43795: PPUSH
43796: LD_VAR 0 11
43800: PPUSH
43801: CALL_OW 546
43805: ST_TO_ADDR
// if hex [ 1 ] then
43806: LD_VAR 0 4
43810: PUSH
43811: LD_INT 1
43813: ARRAY
43814: IFFALSE 43818
// exit ;
43816: GO 44221
// height := hex [ 2 ] ;
43818: LD_ADDR_VAR 0 15
43822: PUSH
43823: LD_VAR 0 4
43827: PUSH
43828: LD_INT 2
43830: ARRAY
43831: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43832: LD_ADDR_VAR 0 14
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 3
43845: PUSH
43846: LD_INT 5
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// for i in tmp do
43855: LD_ADDR_VAR 0 8
43859: PUSH
43860: LD_VAR 0 14
43864: PUSH
43865: FOR_IN
43866: IFFALSE 44036
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43868: LD_ADDR_VAR 0 9
43872: PUSH
43873: LD_VAR 0 10
43877: PPUSH
43878: LD_VAR 0 8
43882: PPUSH
43883: LD_INT 5
43885: PPUSH
43886: CALL_OW 272
43890: PUSH
43891: LD_VAR 0 11
43895: PPUSH
43896: LD_VAR 0 8
43900: PPUSH
43901: LD_INT 5
43903: PPUSH
43904: CALL_OW 273
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43913: LD_VAR 0 9
43917: PUSH
43918: LD_INT 1
43920: ARRAY
43921: PPUSH
43922: LD_VAR 0 9
43926: PUSH
43927: LD_INT 2
43929: ARRAY
43930: PPUSH
43931: CALL_OW 488
43935: IFFALSE 44034
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43937: LD_ADDR_VAR 0 4
43941: PUSH
43942: LD_VAR 0 9
43946: PUSH
43947: LD_INT 1
43949: ARRAY
43950: PPUSH
43951: LD_VAR 0 9
43955: PUSH
43956: LD_INT 2
43958: ARRAY
43959: PPUSH
43960: CALL_OW 546
43964: ST_TO_ADDR
// if hex [ 1 ] then
43965: LD_VAR 0 4
43969: PUSH
43970: LD_INT 1
43972: ARRAY
43973: IFFALSE 43977
// continue ;
43975: GO 43865
// h := hex [ 2 ] ;
43977: LD_ADDR_VAR 0 13
43981: PUSH
43982: LD_VAR 0 4
43986: PUSH
43987: LD_INT 2
43989: ARRAY
43990: ST_TO_ADDR
// if h + 7 < height then
43991: LD_VAR 0 13
43995: PUSH
43996: LD_INT 7
43998: PLUS
43999: PUSH
44000: LD_VAR 0 15
44004: LESS
44005: IFFALSE 44034
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44007: LD_ADDR_VAR 0 18
44011: PUSH
44012: LD_INT 7
44014: PUSH
44015: LD_INT 28
44017: PUSH
44018: LD_INT 45
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: PUSH
44026: LD_VAR 0 12
44030: ARRAY
44031: ST_TO_ADDR
// break ;
44032: GO 44036
// end ; end ; end ;
44034: GO 43865
44036: POP
44037: POP
// end ; if not weapon then
44038: LD_VAR 0 18
44042: NOT
44043: IFFALSE 44103
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44045: LD_ADDR_VAR 0 5
44049: PUSH
44050: LD_VAR 0 5
44054: PUSH
44055: LD_INT 11
44057: PUSH
44058: LD_INT 30
44060: PUSH
44061: LD_INT 49
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: DIFF
44069: ST_TO_ADDR
// if not list then
44070: LD_VAR 0 5
44074: NOT
44075: IFFALSE 44079
// exit ;
44077: GO 44221
// weapon := list [ rand ( 1 , list ) ] ;
44079: LD_ADDR_VAR 0 18
44083: PUSH
44084: LD_VAR 0 5
44088: PUSH
44089: LD_INT 1
44091: PPUSH
44092: LD_VAR 0 5
44096: PPUSH
44097: CALL_OW 12
44101: ARRAY
44102: ST_TO_ADDR
// end ; if weapon then
44103: LD_VAR 0 18
44107: IFFALSE 44221
// begin tmp := CostOfWeapon ( weapon ) ;
44109: LD_ADDR_VAR 0 14
44113: PUSH
44114: LD_VAR 0 18
44118: PPUSH
44119: CALL_OW 451
44123: ST_TO_ADDR
// j := GetBase ( tower ) ;
44124: LD_ADDR_VAR 0 9
44128: PUSH
44129: LD_VAR 0 1
44133: PPUSH
44134: CALL_OW 274
44138: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44139: LD_VAR 0 9
44143: PPUSH
44144: LD_INT 1
44146: PPUSH
44147: CALL_OW 275
44151: PUSH
44152: LD_VAR 0 14
44156: PUSH
44157: LD_INT 1
44159: ARRAY
44160: GREATEREQUAL
44161: PUSH
44162: LD_VAR 0 9
44166: PPUSH
44167: LD_INT 2
44169: PPUSH
44170: CALL_OW 275
44174: PUSH
44175: LD_VAR 0 14
44179: PUSH
44180: LD_INT 2
44182: ARRAY
44183: GREATEREQUAL
44184: AND
44185: PUSH
44186: LD_VAR 0 9
44190: PPUSH
44191: LD_INT 3
44193: PPUSH
44194: CALL_OW 275
44198: PUSH
44199: LD_VAR 0 14
44203: PUSH
44204: LD_INT 3
44206: ARRAY
44207: GREATEREQUAL
44208: AND
44209: IFFALSE 44221
// result := weapon ;
44211: LD_ADDR_VAR 0 3
44215: PUSH
44216: LD_VAR 0 18
44220: ST_TO_ADDR
// end ; end ;
44221: LD_VAR 0 3
44225: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44226: LD_INT 0
44228: PPUSH
44229: PPUSH
// result := true ;
44230: LD_ADDR_VAR 0 3
44234: PUSH
44235: LD_INT 1
44237: ST_TO_ADDR
// if array1 = array2 then
44238: LD_VAR 0 1
44242: PUSH
44243: LD_VAR 0 2
44247: EQUAL
44248: IFFALSE 44308
// begin for i = 1 to array1 do
44250: LD_ADDR_VAR 0 4
44254: PUSH
44255: DOUBLE
44256: LD_INT 1
44258: DEC
44259: ST_TO_ADDR
44260: LD_VAR 0 1
44264: PUSH
44265: FOR_TO
44266: IFFALSE 44304
// if array1 [ i ] <> array2 [ i ] then
44268: LD_VAR 0 1
44272: PUSH
44273: LD_VAR 0 4
44277: ARRAY
44278: PUSH
44279: LD_VAR 0 2
44283: PUSH
44284: LD_VAR 0 4
44288: ARRAY
44289: NONEQUAL
44290: IFFALSE 44302
// begin result := false ;
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 0
44299: ST_TO_ADDR
// break ;
44300: GO 44304
// end ;
44302: GO 44265
44304: POP
44305: POP
// end else
44306: GO 44316
// result := false ;
44308: LD_ADDR_VAR 0 3
44312: PUSH
44313: LD_INT 0
44315: ST_TO_ADDR
// end ;
44316: LD_VAR 0 3
44320: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44321: LD_INT 0
44323: PPUSH
44324: PPUSH
44325: PPUSH
// pom := GetBase ( fac ) ;
44326: LD_ADDR_VAR 0 5
44330: PUSH
44331: LD_VAR 0 1
44335: PPUSH
44336: CALL_OW 274
44340: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44341: LD_ADDR_VAR 0 4
44345: PUSH
44346: LD_VAR 0 2
44350: PUSH
44351: LD_INT 1
44353: ARRAY
44354: PPUSH
44355: LD_VAR 0 2
44359: PUSH
44360: LD_INT 2
44362: ARRAY
44363: PPUSH
44364: LD_VAR 0 2
44368: PUSH
44369: LD_INT 3
44371: ARRAY
44372: PPUSH
44373: LD_VAR 0 2
44377: PUSH
44378: LD_INT 4
44380: ARRAY
44381: PPUSH
44382: CALL_OW 449
44386: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44387: LD_ADDR_VAR 0 3
44391: PUSH
44392: LD_VAR 0 5
44396: PPUSH
44397: LD_INT 1
44399: PPUSH
44400: CALL_OW 275
44404: PUSH
44405: LD_VAR 0 4
44409: PUSH
44410: LD_INT 1
44412: ARRAY
44413: GREATEREQUAL
44414: PUSH
44415: LD_VAR 0 5
44419: PPUSH
44420: LD_INT 2
44422: PPUSH
44423: CALL_OW 275
44427: PUSH
44428: LD_VAR 0 4
44432: PUSH
44433: LD_INT 2
44435: ARRAY
44436: GREATEREQUAL
44437: AND
44438: PUSH
44439: LD_VAR 0 5
44443: PPUSH
44444: LD_INT 3
44446: PPUSH
44447: CALL_OW 275
44451: PUSH
44452: LD_VAR 0 4
44456: PUSH
44457: LD_INT 3
44459: ARRAY
44460: GREATEREQUAL
44461: AND
44462: ST_TO_ADDR
// end ;
44463: LD_VAR 0 3
44467: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44468: LD_INT 0
44470: PPUSH
44471: PPUSH
44472: PPUSH
44473: PPUSH
// pom := GetBase ( building ) ;
44474: LD_ADDR_VAR 0 3
44478: PUSH
44479: LD_VAR 0 1
44483: PPUSH
44484: CALL_OW 274
44488: ST_TO_ADDR
// if not pom then
44489: LD_VAR 0 3
44493: NOT
44494: IFFALSE 44498
// exit ;
44496: GO 44668
// btype := GetBType ( building ) ;
44498: LD_ADDR_VAR 0 5
44502: PUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 266
44512: ST_TO_ADDR
// if btype = b_armoury then
44513: LD_VAR 0 5
44517: PUSH
44518: LD_INT 4
44520: EQUAL
44521: IFFALSE 44531
// btype := b_barracks ;
44523: LD_ADDR_VAR 0 5
44527: PUSH
44528: LD_INT 5
44530: ST_TO_ADDR
// if btype = b_depot then
44531: LD_VAR 0 5
44535: PUSH
44536: LD_INT 0
44538: EQUAL
44539: IFFALSE 44549
// btype := b_warehouse ;
44541: LD_ADDR_VAR 0 5
44545: PUSH
44546: LD_INT 1
44548: ST_TO_ADDR
// if btype = b_workshop then
44549: LD_VAR 0 5
44553: PUSH
44554: LD_INT 2
44556: EQUAL
44557: IFFALSE 44567
// btype := b_factory ;
44559: LD_ADDR_VAR 0 5
44563: PUSH
44564: LD_INT 3
44566: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44567: LD_ADDR_VAR 0 4
44571: PUSH
44572: LD_VAR 0 5
44576: PPUSH
44577: LD_VAR 0 1
44581: PPUSH
44582: CALL_OW 248
44586: PPUSH
44587: CALL_OW 450
44591: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44592: LD_ADDR_VAR 0 2
44596: PUSH
44597: LD_VAR 0 3
44601: PPUSH
44602: LD_INT 1
44604: PPUSH
44605: CALL_OW 275
44609: PUSH
44610: LD_VAR 0 4
44614: PUSH
44615: LD_INT 1
44617: ARRAY
44618: GREATEREQUAL
44619: PUSH
44620: LD_VAR 0 3
44624: PPUSH
44625: LD_INT 2
44627: PPUSH
44628: CALL_OW 275
44632: PUSH
44633: LD_VAR 0 4
44637: PUSH
44638: LD_INT 2
44640: ARRAY
44641: GREATEREQUAL
44642: AND
44643: PUSH
44644: LD_VAR 0 3
44648: PPUSH
44649: LD_INT 3
44651: PPUSH
44652: CALL_OW 275
44656: PUSH
44657: LD_VAR 0 4
44661: PUSH
44662: LD_INT 3
44664: ARRAY
44665: GREATEREQUAL
44666: AND
44667: ST_TO_ADDR
// end ;
44668: LD_VAR 0 2
44672: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44673: LD_INT 0
44675: PPUSH
44676: PPUSH
44677: PPUSH
// pom := GetBase ( building ) ;
44678: LD_ADDR_VAR 0 4
44682: PUSH
44683: LD_VAR 0 1
44687: PPUSH
44688: CALL_OW 274
44692: ST_TO_ADDR
// if not pom then
44693: LD_VAR 0 4
44697: NOT
44698: IFFALSE 44702
// exit ;
44700: GO 44803
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44702: LD_ADDR_VAR 0 5
44706: PUSH
44707: LD_VAR 0 2
44711: PPUSH
44712: LD_VAR 0 1
44716: PPUSH
44717: CALL_OW 248
44721: PPUSH
44722: CALL_OW 450
44726: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44727: LD_ADDR_VAR 0 3
44731: PUSH
44732: LD_VAR 0 4
44736: PPUSH
44737: LD_INT 1
44739: PPUSH
44740: CALL_OW 275
44744: PUSH
44745: LD_VAR 0 5
44749: PUSH
44750: LD_INT 1
44752: ARRAY
44753: GREATEREQUAL
44754: PUSH
44755: LD_VAR 0 4
44759: PPUSH
44760: LD_INT 2
44762: PPUSH
44763: CALL_OW 275
44767: PUSH
44768: LD_VAR 0 5
44772: PUSH
44773: LD_INT 2
44775: ARRAY
44776: GREATEREQUAL
44777: AND
44778: PUSH
44779: LD_VAR 0 4
44783: PPUSH
44784: LD_INT 3
44786: PPUSH
44787: CALL_OW 275
44791: PUSH
44792: LD_VAR 0 5
44796: PUSH
44797: LD_INT 3
44799: ARRAY
44800: GREATEREQUAL
44801: AND
44802: ST_TO_ADDR
// end ;
44803: LD_VAR 0 3
44807: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
44808: LD_INT 0
44810: PPUSH
44811: PPUSH
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
// result := false ;
44820: LD_ADDR_VAR 0 6
44824: PUSH
44825: LD_INT 0
44827: ST_TO_ADDR
// if not base or not btype or not x or not y then
44828: LD_VAR 0 1
44832: NOT
44833: PUSH
44834: LD_VAR 0 2
44838: NOT
44839: OR
44840: PUSH
44841: LD_VAR 0 3
44845: NOT
44846: OR
44847: PUSH
44848: LD_VAR 0 4
44852: NOT
44853: OR
44854: IFFALSE 44858
// exit ;
44856: GO 45467
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
44858: LD_ADDR_VAR 0 12
44862: PUSH
44863: LD_VAR 0 2
44867: PPUSH
44868: LD_VAR 0 3
44872: PPUSH
44873: LD_VAR 0 4
44877: PPUSH
44878: LD_VAR 0 5
44882: PPUSH
44883: LD_VAR 0 1
44887: PUSH
44888: LD_INT 1
44890: ARRAY
44891: PPUSH
44892: CALL_OW 248
44896: PPUSH
44897: LD_INT 0
44899: PPUSH
44900: CALL 46304 0 6
44904: ST_TO_ADDR
// if not hexes then
44905: LD_VAR 0 12
44909: NOT
44910: IFFALSE 44914
// exit ;
44912: GO 45467
// for i = 1 to hexes do
44914: LD_ADDR_VAR 0 7
44918: PUSH
44919: DOUBLE
44920: LD_INT 1
44922: DEC
44923: ST_TO_ADDR
44924: LD_VAR 0 12
44928: PUSH
44929: FOR_TO
44930: IFFALSE 45465
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44932: LD_ADDR_VAR 0 11
44936: PUSH
44937: LD_VAR 0 12
44941: PUSH
44942: LD_VAR 0 7
44946: ARRAY
44947: PUSH
44948: LD_INT 1
44950: ARRAY
44951: PPUSH
44952: LD_VAR 0 12
44956: PUSH
44957: LD_VAR 0 7
44961: ARRAY
44962: PUSH
44963: LD_INT 2
44965: ARRAY
44966: PPUSH
44967: CALL_OW 428
44971: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44972: LD_VAR 0 12
44976: PUSH
44977: LD_VAR 0 7
44981: ARRAY
44982: PUSH
44983: LD_INT 1
44985: ARRAY
44986: PPUSH
44987: LD_VAR 0 12
44991: PUSH
44992: LD_VAR 0 7
44996: ARRAY
44997: PUSH
44998: LD_INT 2
45000: ARRAY
45001: PPUSH
45002: CALL_OW 351
45006: PUSH
45007: LD_VAR 0 12
45011: PUSH
45012: LD_VAR 0 7
45016: ARRAY
45017: PUSH
45018: LD_INT 1
45020: ARRAY
45021: PPUSH
45022: LD_VAR 0 12
45026: PUSH
45027: LD_VAR 0 7
45031: ARRAY
45032: PUSH
45033: LD_INT 2
45035: ARRAY
45036: PPUSH
45037: CALL_OW 488
45041: NOT
45042: OR
45043: PUSH
45044: LD_VAR 0 11
45048: PPUSH
45049: CALL_OW 247
45053: PUSH
45054: LD_INT 3
45056: EQUAL
45057: OR
45058: IFFALSE 45064
// exit ;
45060: POP
45061: POP
45062: GO 45467
// if not tmp or not tmp in base then
45064: LD_VAR 0 11
45068: NOT
45069: PUSH
45070: LD_VAR 0 11
45074: PUSH
45075: LD_VAR 0 1
45079: IN
45080: NOT
45081: OR
45082: IFFALSE 45086
// continue ;
45084: GO 44929
// result := true ;
45086: LD_ADDR_VAR 0 6
45090: PUSH
45091: LD_INT 1
45093: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45094: LD_ADDR_VAR 0 15
45098: PUSH
45099: LD_VAR 0 1
45103: PPUSH
45104: LD_INT 22
45106: PUSH
45107: LD_VAR 0 11
45111: PPUSH
45112: CALL_OW 255
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 30
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 30
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PPUSH
45153: CALL_OW 72
45157: ST_TO_ADDR
// if dep then
45158: LD_VAR 0 15
45162: IFFALSE 45298
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45164: LD_ADDR_VAR 0 14
45168: PUSH
45169: LD_VAR 0 15
45173: PUSH
45174: LD_INT 1
45176: ARRAY
45177: PPUSH
45178: CALL_OW 250
45182: PPUSH
45183: LD_VAR 0 15
45187: PUSH
45188: LD_INT 1
45190: ARRAY
45191: PPUSH
45192: CALL_OW 254
45196: PPUSH
45197: LD_INT 5
45199: PPUSH
45200: CALL_OW 272
45204: PUSH
45205: LD_VAR 0 15
45209: PUSH
45210: LD_INT 1
45212: ARRAY
45213: PPUSH
45214: CALL_OW 251
45218: PPUSH
45219: LD_VAR 0 15
45223: PUSH
45224: LD_INT 1
45226: ARRAY
45227: PPUSH
45228: CALL_OW 254
45232: PPUSH
45233: LD_INT 5
45235: PPUSH
45236: CALL_OW 273
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45245: LD_VAR 0 14
45249: PUSH
45250: LD_INT 1
45252: ARRAY
45253: PPUSH
45254: LD_VAR 0 14
45258: PUSH
45259: LD_INT 2
45261: ARRAY
45262: PPUSH
45263: CALL_OW 488
45267: IFFALSE 45298
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45269: LD_VAR 0 11
45273: PPUSH
45274: LD_VAR 0 14
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: PPUSH
45283: LD_VAR 0 14
45287: PUSH
45288: LD_INT 2
45290: ARRAY
45291: PPUSH
45292: CALL_OW 111
// continue ;
45296: GO 44929
// end ; end ; r := GetDir ( tmp ) ;
45298: LD_ADDR_VAR 0 13
45302: PUSH
45303: LD_VAR 0 11
45307: PPUSH
45308: CALL_OW 254
45312: ST_TO_ADDR
// if r = 5 then
45313: LD_VAR 0 13
45317: PUSH
45318: LD_INT 5
45320: EQUAL
45321: IFFALSE 45331
// r := 0 ;
45323: LD_ADDR_VAR 0 13
45327: PUSH
45328: LD_INT 0
45330: ST_TO_ADDR
// for j = r to 5 do
45331: LD_ADDR_VAR 0 8
45335: PUSH
45336: DOUBLE
45337: LD_VAR 0 13
45341: DEC
45342: ST_TO_ADDR
45343: LD_INT 5
45345: PUSH
45346: FOR_TO
45347: IFFALSE 45461
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45349: LD_ADDR_VAR 0 9
45353: PUSH
45354: LD_VAR 0 11
45358: PPUSH
45359: CALL_OW 250
45363: PPUSH
45364: LD_VAR 0 8
45368: PPUSH
45369: LD_INT 2
45371: PPUSH
45372: CALL_OW 272
45376: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45377: LD_ADDR_VAR 0 10
45381: PUSH
45382: LD_VAR 0 11
45386: PPUSH
45387: CALL_OW 251
45391: PPUSH
45392: LD_VAR 0 8
45396: PPUSH
45397: LD_INT 2
45399: PPUSH
45400: CALL_OW 273
45404: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45405: LD_VAR 0 9
45409: PPUSH
45410: LD_VAR 0 10
45414: PPUSH
45415: CALL_OW 488
45419: PUSH
45420: LD_VAR 0 9
45424: PPUSH
45425: LD_VAR 0 10
45429: PPUSH
45430: CALL_OW 428
45434: NOT
45435: AND
45436: IFFALSE 45459
// begin ComMoveXY ( tmp , _x , _y ) ;
45438: LD_VAR 0 11
45442: PPUSH
45443: LD_VAR 0 9
45447: PPUSH
45448: LD_VAR 0 10
45452: PPUSH
45453: CALL_OW 111
// break ;
45457: GO 45461
// end ; end ;
45459: GO 45346
45461: POP
45462: POP
// end ;
45463: GO 44929
45465: POP
45466: POP
// end ;
45467: LD_VAR 0 6
45471: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45472: LD_INT 0
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
// result := false ;
45484: LD_ADDR_VAR 0 6
45488: PUSH
45489: LD_INT 0
45491: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45492: LD_VAR 0 1
45496: NOT
45497: PUSH
45498: LD_VAR 0 1
45502: PPUSH
45503: CALL_OW 266
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: IN
45518: NOT
45519: OR
45520: PUSH
45521: LD_VAR 0 2
45525: NOT
45526: OR
45527: PUSH
45528: LD_VAR 0 5
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: LD_INT 4
45547: PUSH
45548: LD_INT 5
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: IN
45559: NOT
45560: OR
45561: PUSH
45562: LD_VAR 0 3
45566: PPUSH
45567: LD_VAR 0 4
45571: PPUSH
45572: CALL_OW 488
45576: NOT
45577: OR
45578: IFFALSE 45582
// exit ;
45580: GO 46299
// pom := GetBase ( depot ) ;
45582: LD_ADDR_VAR 0 10
45586: PUSH
45587: LD_VAR 0 1
45591: PPUSH
45592: CALL_OW 274
45596: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45597: LD_ADDR_VAR 0 11
45601: PUSH
45602: LD_VAR 0 2
45606: PPUSH
45607: LD_VAR 0 1
45611: PPUSH
45612: CALL_OW 248
45616: PPUSH
45617: CALL_OW 450
45621: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45622: LD_VAR 0 10
45626: PPUSH
45627: LD_INT 1
45629: PPUSH
45630: CALL_OW 275
45634: PUSH
45635: LD_VAR 0 11
45639: PUSH
45640: LD_INT 1
45642: ARRAY
45643: GREATEREQUAL
45644: PUSH
45645: LD_VAR 0 10
45649: PPUSH
45650: LD_INT 2
45652: PPUSH
45653: CALL_OW 275
45657: PUSH
45658: LD_VAR 0 11
45662: PUSH
45663: LD_INT 2
45665: ARRAY
45666: GREATEREQUAL
45667: AND
45668: PUSH
45669: LD_VAR 0 10
45673: PPUSH
45674: LD_INT 3
45676: PPUSH
45677: CALL_OW 275
45681: PUSH
45682: LD_VAR 0 11
45686: PUSH
45687: LD_INT 3
45689: ARRAY
45690: GREATEREQUAL
45691: AND
45692: NOT
45693: IFFALSE 45697
// exit ;
45695: GO 46299
// if GetBType ( depot ) = b_depot then
45697: LD_VAR 0 1
45701: PPUSH
45702: CALL_OW 266
45706: PUSH
45707: LD_INT 0
45709: EQUAL
45710: IFFALSE 45722
// dist := 28 else
45712: LD_ADDR_VAR 0 14
45716: PUSH
45717: LD_INT 28
45719: ST_TO_ADDR
45720: GO 45730
// dist := 36 ;
45722: LD_ADDR_VAR 0 14
45726: PUSH
45727: LD_INT 36
45729: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45730: LD_VAR 0 1
45734: PPUSH
45735: LD_VAR 0 3
45739: PPUSH
45740: LD_VAR 0 4
45744: PPUSH
45745: CALL_OW 297
45749: PUSH
45750: LD_VAR 0 14
45754: GREATER
45755: IFFALSE 45759
// exit ;
45757: GO 46299
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45759: LD_ADDR_VAR 0 12
45763: PUSH
45764: LD_VAR 0 2
45768: PPUSH
45769: LD_VAR 0 3
45773: PPUSH
45774: LD_VAR 0 4
45778: PPUSH
45779: LD_VAR 0 5
45783: PPUSH
45784: LD_VAR 0 1
45788: PPUSH
45789: CALL_OW 248
45793: PPUSH
45794: LD_INT 0
45796: PPUSH
45797: CALL 46304 0 6
45801: ST_TO_ADDR
// if not hexes then
45802: LD_VAR 0 12
45806: NOT
45807: IFFALSE 45811
// exit ;
45809: GO 46299
// hex := GetHexInfo ( x , y ) ;
45811: LD_ADDR_VAR 0 15
45815: PUSH
45816: LD_VAR 0 3
45820: PPUSH
45821: LD_VAR 0 4
45825: PPUSH
45826: CALL_OW 546
45830: ST_TO_ADDR
// if hex [ 1 ] then
45831: LD_VAR 0 15
45835: PUSH
45836: LD_INT 1
45838: ARRAY
45839: IFFALSE 45843
// exit ;
45841: GO 46299
// height := hex [ 2 ] ;
45843: LD_ADDR_VAR 0 13
45847: PUSH
45848: LD_VAR 0 15
45852: PUSH
45853: LD_INT 2
45855: ARRAY
45856: ST_TO_ADDR
// for i = 1 to hexes do
45857: LD_ADDR_VAR 0 7
45861: PUSH
45862: DOUBLE
45863: LD_INT 1
45865: DEC
45866: ST_TO_ADDR
45867: LD_VAR 0 12
45871: PUSH
45872: FOR_TO
45873: IFFALSE 46203
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45875: LD_VAR 0 12
45879: PUSH
45880: LD_VAR 0 7
45884: ARRAY
45885: PUSH
45886: LD_INT 1
45888: ARRAY
45889: PPUSH
45890: LD_VAR 0 12
45894: PUSH
45895: LD_VAR 0 7
45899: ARRAY
45900: PUSH
45901: LD_INT 2
45903: ARRAY
45904: PPUSH
45905: CALL_OW 488
45909: NOT
45910: PUSH
45911: LD_VAR 0 12
45915: PUSH
45916: LD_VAR 0 7
45920: ARRAY
45921: PUSH
45922: LD_INT 1
45924: ARRAY
45925: PPUSH
45926: LD_VAR 0 12
45930: PUSH
45931: LD_VAR 0 7
45935: ARRAY
45936: PUSH
45937: LD_INT 2
45939: ARRAY
45940: PPUSH
45941: CALL_OW 428
45945: PUSH
45946: LD_INT 0
45948: GREATER
45949: OR
45950: PUSH
45951: LD_VAR 0 12
45955: PUSH
45956: LD_VAR 0 7
45960: ARRAY
45961: PUSH
45962: LD_INT 1
45964: ARRAY
45965: PPUSH
45966: LD_VAR 0 12
45970: PUSH
45971: LD_VAR 0 7
45975: ARRAY
45976: PUSH
45977: LD_INT 2
45979: ARRAY
45980: PPUSH
45981: CALL_OW 351
45985: OR
45986: IFFALSE 45992
// exit ;
45988: POP
45989: POP
45990: GO 46299
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45992: LD_ADDR_VAR 0 8
45996: PUSH
45997: LD_VAR 0 12
46001: PUSH
46002: LD_VAR 0 7
46006: ARRAY
46007: PUSH
46008: LD_INT 1
46010: ARRAY
46011: PPUSH
46012: LD_VAR 0 12
46016: PUSH
46017: LD_VAR 0 7
46021: ARRAY
46022: PUSH
46023: LD_INT 2
46025: ARRAY
46026: PPUSH
46027: CALL_OW 546
46031: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46032: LD_VAR 0 8
46036: PUSH
46037: LD_INT 1
46039: ARRAY
46040: PUSH
46041: LD_VAR 0 8
46045: PUSH
46046: LD_INT 2
46048: ARRAY
46049: PUSH
46050: LD_VAR 0 13
46054: PUSH
46055: LD_INT 2
46057: PLUS
46058: GREATER
46059: OR
46060: PUSH
46061: LD_VAR 0 8
46065: PUSH
46066: LD_INT 2
46068: ARRAY
46069: PUSH
46070: LD_VAR 0 13
46074: PUSH
46075: LD_INT 2
46077: MINUS
46078: LESS
46079: OR
46080: PUSH
46081: LD_VAR 0 8
46085: PUSH
46086: LD_INT 3
46088: ARRAY
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 8
46095: PUSH
46096: LD_INT 9
46098: PUSH
46099: LD_INT 10
46101: PUSH
46102: LD_INT 11
46104: PUSH
46105: LD_INT 12
46107: PUSH
46108: LD_INT 13
46110: PUSH
46111: LD_INT 16
46113: PUSH
46114: LD_INT 17
46116: PUSH
46117: LD_INT 18
46119: PUSH
46120: LD_INT 19
46122: PUSH
46123: LD_INT 20
46125: PUSH
46126: LD_INT 21
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: IN
46144: NOT
46145: OR
46146: PUSH
46147: LD_VAR 0 8
46151: PUSH
46152: LD_INT 5
46154: ARRAY
46155: NOT
46156: OR
46157: PUSH
46158: LD_VAR 0 8
46162: PUSH
46163: LD_INT 6
46165: ARRAY
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: LD_INT 7
46175: PUSH
46176: LD_INT 9
46178: PUSH
46179: LD_INT 10
46181: PUSH
46182: LD_INT 11
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: IN
46193: NOT
46194: OR
46195: IFFALSE 46201
// exit ;
46197: POP
46198: POP
46199: GO 46299
// end ;
46201: GO 45872
46203: POP
46204: POP
// side := GetSide ( depot ) ;
46205: LD_ADDR_VAR 0 9
46209: PUSH
46210: LD_VAR 0 1
46214: PPUSH
46215: CALL_OW 255
46219: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46220: LD_VAR 0 9
46224: PPUSH
46225: LD_VAR 0 3
46229: PPUSH
46230: LD_VAR 0 4
46234: PPUSH
46235: LD_INT 20
46237: PPUSH
46238: CALL 38953 0 4
46242: PUSH
46243: LD_INT 4
46245: ARRAY
46246: IFFALSE 46250
// exit ;
46248: GO 46299
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46250: LD_VAR 0 2
46254: PUSH
46255: LD_INT 29
46257: PUSH
46258: LD_INT 30
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: IN
46265: PUSH
46266: LD_VAR 0 3
46270: PPUSH
46271: LD_VAR 0 4
46275: PPUSH
46276: LD_VAR 0 9
46280: PPUSH
46281: CALL_OW 440
46285: NOT
46286: AND
46287: IFFALSE 46291
// exit ;
46289: GO 46299
// result := true ;
46291: LD_ADDR_VAR 0 6
46295: PUSH
46296: LD_INT 1
46298: ST_TO_ADDR
// end ;
46299: LD_VAR 0 6
46303: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
46304: LD_INT 0
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
46324: PPUSH
46325: PPUSH
46326: PPUSH
46327: PPUSH
46328: PPUSH
46329: PPUSH
46330: PPUSH
46331: PPUSH
46332: PPUSH
46333: PPUSH
46334: PPUSH
46335: PPUSH
46336: PPUSH
46337: PPUSH
46338: PPUSH
46339: PPUSH
46340: PPUSH
46341: PPUSH
46342: PPUSH
46343: PPUSH
46344: PPUSH
46345: PPUSH
46346: PPUSH
46347: PPUSH
46348: PPUSH
46349: PPUSH
46350: PPUSH
46351: PPUSH
46352: PPUSH
46353: PPUSH
46354: PPUSH
46355: PPUSH
46356: PPUSH
46357: PPUSH
46358: PPUSH
46359: PPUSH
46360: PPUSH
46361: PPUSH
46362: PPUSH
46363: PPUSH
// result = [ ] ;
46364: LD_ADDR_VAR 0 7
46368: PUSH
46369: EMPTY
46370: ST_TO_ADDR
// temp_list = [ ] ;
46371: LD_ADDR_VAR 0 9
46375: PUSH
46376: EMPTY
46377: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46378: LD_VAR 0 4
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: LD_INT 4
46397: PUSH
46398: LD_INT 5
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: IN
46409: NOT
46410: PUSH
46411: LD_VAR 0 1
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: IN
46426: PUSH
46427: LD_VAR 0 5
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: IN
46446: NOT
46447: AND
46448: OR
46449: IFFALSE 46453
// exit ;
46451: GO 64844
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46453: LD_VAR 0 1
46457: PUSH
46458: LD_INT 6
46460: PUSH
46461: LD_INT 7
46463: PUSH
46464: LD_INT 8
46466: PUSH
46467: LD_INT 13
46469: PUSH
46470: LD_INT 12
46472: PUSH
46473: LD_INT 15
46475: PUSH
46476: LD_INT 11
46478: PUSH
46479: LD_INT 14
46481: PUSH
46482: LD_INT 10
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: IN
46496: IFFALSE 46506
// btype = b_lab ;
46498: LD_ADDR_VAR 0 1
46502: PUSH
46503: LD_INT 6
46505: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46506: LD_VAR 0 6
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: IN
46525: NOT
46526: PUSH
46527: LD_VAR 0 1
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: LD_INT 6
46546: PUSH
46547: LD_INT 36
46549: PUSH
46550: LD_INT 4
46552: PUSH
46553: LD_INT 5
46555: PUSH
46556: LD_INT 31
46558: PUSH
46559: LD_INT 32
46561: PUSH
46562: LD_INT 33
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: IN
46578: NOT
46579: PUSH
46580: LD_VAR 0 6
46584: PUSH
46585: LD_INT 1
46587: EQUAL
46588: AND
46589: OR
46590: PUSH
46591: LD_VAR 0 1
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 3
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: IN
46606: NOT
46607: PUSH
46608: LD_VAR 0 6
46612: PUSH
46613: LD_INT 2
46615: EQUAL
46616: AND
46617: OR
46618: IFFALSE 46628
// mode = 0 ;
46620: LD_ADDR_VAR 0 6
46624: PUSH
46625: LD_INT 0
46627: ST_TO_ADDR
// case mode of 0 :
46628: LD_VAR 0 6
46632: PUSH
46633: LD_INT 0
46635: DOUBLE
46636: EQUAL
46637: IFTRUE 46641
46639: GO 58094
46641: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46642: LD_ADDR_VAR 0 11
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46835: LD_ADDR_VAR 0 12
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47031: LD_ADDR_VAR 0 13
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 3
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: NEG
47203: PUSH
47204: LD_INT 3
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47230: LD_ADDR_VAR 0 14
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 3
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47426: LD_ADDR_VAR 0 15
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47619: LD_ADDR_VAR 0 16
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: LD_INT 3
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47812: LD_ADDR_VAR 0 17
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48042: LD_ADDR_VAR 0 18
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48272: LD_ADDR_VAR 0 19
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48502: LD_ADDR_VAR 0 20
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48732: LD_ADDR_VAR 0 21
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48962: LD_ADDR_VAR 0 22
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: LD_INT 2
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49192: LD_ADDR_VAR 0 23
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 3
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 3
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49472: LD_ADDR_VAR 0 24
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 2
49648: NEG
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49748: LD_ADDR_VAR 0 25
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 3
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: LD_INT 3
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: LD_INT 3
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50022: LD_ADDR_VAR 0 26
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50298: LD_ADDR_VAR 0 27
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 2
50474: NEG
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 3
50531: NEG
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50578: LD_ADDR_VAR 0 28
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 3
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: NEG
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50860: LD_ADDR_VAR 0 29
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: NEG
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51139: LD_ADDR_VAR 0 30
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 3
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 3
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51417: LD_ADDR_VAR 0 31
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 3
51660: NEG
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51695: LD_ADDR_VAR 0 32
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 3
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51973: LD_ADDR_VAR 0 33
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52252: LD_ADDR_VAR 0 34
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 3
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 3
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 3
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52532: LD_ADDR_VAR 0 35
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52644: LD_ADDR_VAR 0 36
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52756: LD_ADDR_VAR 0 37
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52868: LD_ADDR_VAR 0 38
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52980: LD_ADDR_VAR 0 39
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53092: LD_ADDR_VAR 0 40
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53204: LD_ADDR_VAR 0 41
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 3
53501: NEG
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: LD_INT 3
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53554: LD_ADDR_VAR 0 42
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 3
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53904: LD_ADDR_VAR 0 43
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 3
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 3
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54252: LD_ADDR_VAR 0 44
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 3
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 3
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 3
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: LD_INT 3
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54602: LD_ADDR_VAR 0 45
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 3
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 3
54911: NEG
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54952: LD_ADDR_VAR 0 46
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 3
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 3
55248: NEG
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 3
55259: NEG
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55300: LD_ADDR_VAR 0 47
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55451: LD_ADDR_VAR 0 48
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55598: LD_ADDR_VAR 0 49
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55742: LD_ADDR_VAR 0 50
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55886: LD_ADDR_VAR 0 51
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56033: LD_ADDR_VAR 0 52
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56184: LD_ADDR_VAR 0 53
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56414: LD_ADDR_VAR 0 54
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56644: LD_ADDR_VAR 0 55
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56874: LD_ADDR_VAR 0 56
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57104: LD_ADDR_VAR 0 57
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57334: LD_ADDR_VAR 0 58
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: LD_INT 2
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57564: LD_ADDR_VAR 0 59
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57652: LD_ADDR_VAR 0 60
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57740: LD_ADDR_VAR 0 61
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57828: LD_ADDR_VAR 0 62
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57916: LD_ADDR_VAR 0 63
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58004: LD_ADDR_VAR 0 64
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: ST_TO_ADDR
// end ; 1 :
58092: GO 63989
58094: LD_INT 1
58096: DOUBLE
58097: EQUAL
58098: IFTRUE 58102
58100: GO 60725
58102: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58103: LD_ADDR_VAR 0 11
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 3
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: LIST
58146: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58147: LD_ADDR_VAR 0 12
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: LIST
58187: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58188: LD_ADDR_VAR 0 13
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: LIST
58227: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58228: LD_ADDR_VAR 0 14
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58269: LD_ADDR_VAR 0 15
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: NEG
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: LIST
58312: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58313: LD_ADDR_VAR 0 16
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 3
58344: NEG
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: LIST
58358: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58359: LD_ADDR_VAR 0 17
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 3
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58403: LD_ADDR_VAR 0 18
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: LIST
58443: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58444: LD_ADDR_VAR 0 19
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58484: LD_ADDR_VAR 0 20
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 3
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: LIST
58524: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58525: LD_ADDR_VAR 0 21
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: LIST
58568: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58569: LD_ADDR_VAR 0 22
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: LD_INT 3
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: NEG
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: LD_INT 3
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: LIST
58614: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58615: LD_ADDR_VAR 0 23
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 4
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: LIST
58658: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58659: LD_ADDR_VAR 0 24
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 4
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: LIST
58699: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58700: LD_ADDR_VAR 0 25
58704: PUSH
58705: LD_INT 3
58707: PUSH
58708: LD_INT 3
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 4
58717: PUSH
58718: LD_INT 3
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 3
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: LIST
58739: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58740: LD_ADDR_VAR 0 26
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: LD_INT 4
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: LIST
58780: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58781: LD_ADDR_VAR 0 27
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 3
58799: NEG
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 4
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: LIST
58824: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58825: LD_ADDR_VAR 0 28
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: NEG
58845: PUSH
58846: LD_INT 4
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 4
58856: NEG
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: LIST
58870: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58871: LD_ADDR_VAR 0 29
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: LD_INT 4
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 4
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 5
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 5
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 6
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 6
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 5
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59026: LD_ADDR_VAR 0 30
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 3
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 4
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 4
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 5
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 5
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 5
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 6
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 6
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59169: LD_ADDR_VAR 0 31
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: LD_INT 3
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: LD_INT 3
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 4
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 3
59226: PUSH
59227: LD_INT 4
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: LD_INT 4
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 5
59246: PUSH
59247: LD_INT 5
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 4
59256: PUSH
59257: LD_INT 5
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 6
59266: PUSH
59267: LD_INT 5
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 6
59276: PUSH
59277: LD_INT 6
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 5
59286: PUSH
59287: LD_INT 6
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59308: LD_ADDR_VAR 0 32
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: LD_INT 4
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 4
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 3
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: LD_INT 5
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: LD_INT 5
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 4
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: LD_INT 6
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 6
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 5
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59451: LD_ADDR_VAR 0 33
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 3
59469: NEG
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 3
59480: NEG
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 4
59503: NEG
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 4
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 4
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 5
59537: NEG
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 5
59548: NEG
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 5
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 6
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 6
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59606: LD_ADDR_VAR 0 34
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 3
59649: NEG
59650: PUSH
59651: LD_INT 4
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 4
59661: NEG
59662: PUSH
59663: LD_INT 3
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 4
59673: NEG
59674: PUSH
59675: LD_INT 4
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 4
59685: NEG
59686: PUSH
59687: LD_INT 5
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 5
59697: NEG
59698: PUSH
59699: LD_INT 4
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 5
59709: NEG
59710: PUSH
59711: LD_INT 5
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 5
59721: NEG
59722: PUSH
59723: LD_INT 6
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 6
59733: NEG
59734: PUSH
59735: LD_INT 5
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 6
59745: NEG
59746: PUSH
59747: LD_INT 6
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59769: LD_ADDR_VAR 0 41
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: LD_INT 3
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59813: LD_ADDR_VAR 0 42
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59854: LD_ADDR_VAR 0 43
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 3
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59894: LD_ADDR_VAR 0 44
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 3
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59935: LD_ADDR_VAR 0 45
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 3
59964: NEG
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59979: LD_ADDR_VAR 0 46
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 3
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: LIST
60024: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60025: LD_ADDR_VAR 0 47
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: LD_INT 3
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60058: LD_ADDR_VAR 0 48
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60089: LD_ADDR_VAR 0 49
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60118: LD_ADDR_VAR 0 50
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60147: LD_ADDR_VAR 0 51
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60178: LD_ADDR_VAR 0 52
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: NEG
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60211: LD_ADDR_VAR 0 53
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60255: LD_ADDR_VAR 0 54
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60296: LD_ADDR_VAR 0 55
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60336: LD_ADDR_VAR 0 56
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 3
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60377: LD_ADDR_VAR 0 57
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: LIST
60420: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60421: LD_ADDR_VAR 0 58
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60467: LD_ADDR_VAR 0 59
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60511: LD_ADDR_VAR 0 60
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: LIST
60551: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60552: LD_ADDR_VAR 0 61
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60592: LD_ADDR_VAR 0 62
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60633: LD_ADDR_VAR 0 63
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: LIST
60676: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60677: LD_ADDR_VAR 0 64
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: ST_TO_ADDR
// end ; 2 :
60723: GO 63989
60725: LD_INT 2
60727: DOUBLE
60728: EQUAL
60729: IFTRUE 60733
60731: GO 63988
60733: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60734: LD_ADDR_VAR 0 29
60738: PUSH
60739: LD_INT 4
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 4
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 5
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 5
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 4
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 3
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 3
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 5
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 3
60834: PUSH
60835: LD_INT 3
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 3
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 4
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 4
60864: PUSH
60865: LD_INT 4
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: PUSH
60875: LD_INT 4
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 4
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: PUSH
60915: LD_INT 4
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 4
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 4
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: LD_INT 5
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 5
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 4
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: LD_INT 5
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 3
61028: NEG
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 4
61073: NEG
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 4
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 4
61096: NEG
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 4
61119: NEG
61120: PUSH
61121: LD_INT 4
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 4
61131: NEG
61132: PUSH
61133: LD_INT 5
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 3
61143: NEG
61144: PUSH
61145: LD_INT 4
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: LD_INT 3
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 4
61167: NEG
61168: PUSH
61169: LD_INT 3
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 5
61179: NEG
61180: PUSH
61181: LD_INT 4
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 5
61191: NEG
61192: PUSH
61193: LD_INT 5
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: LD_INT 5
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 5
61215: NEG
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61272: LD_ADDR_VAR 0 30
61276: PUSH
61277: LD_INT 4
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 4
61289: PUSH
61290: LD_INT 3
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 5
61299: PUSH
61300: LD_INT 4
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 5
61309: PUSH
61310: LD_INT 5
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 4
61319: PUSH
61320: LD_INT 5
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 5
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 3
61359: PUSH
61360: LD_INT 5
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: LD_INT 4
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 4
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 3
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: LD_INT 4
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 4
61462: NEG
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 4
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 3
61496: NEG
61497: PUSH
61498: LD_INT 1
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 4
61507: NEG
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 5
61518: NEG
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 5
61529: NEG
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 5
61541: NEG
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 3
61564: NEG
61565: PUSH
61566: LD_INT 3
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 3
61576: NEG
61577: PUSH
61578: LD_INT 4
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: LD_INT 3
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: LD_INT 2
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 4
61624: NEG
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 4
61636: NEG
61637: PUSH
61638: LD_INT 4
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: LD_INT 4
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 4
61660: NEG
61661: PUSH
61662: LD_INT 2
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 4
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 5
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: LD_INT 4
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 3
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 3
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 5
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: LD_INT 5
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61819: LD_ADDR_VAR 0 31
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 4
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 3
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 4
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 5
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 5
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: LD_INT 4
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: LD_INT 3
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 2
61898: PUSH
61899: LD_INT 5
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 2
61908: NEG
61909: PUSH
61910: LD_INT 3
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 3
61919: NEG
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 3
61930: NEG
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: NEG
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 3
61964: NEG
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 4
61975: NEG
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 4
61986: NEG
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 4
61998: NEG
61999: PUSH
62000: LD_INT 2
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 4
62021: NEG
62022: PUSH
62023: LD_INT 4
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 4
62033: NEG
62034: PUSH
62035: LD_INT 5
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 3
62045: NEG
62046: PUSH
62047: LD_INT 4
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 4
62069: NEG
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 5
62081: NEG
62082: PUSH
62083: LD_INT 4
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 5
62093: NEG
62094: PUSH
62095: LD_INT 5
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: LD_INT 5
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 5
62117: NEG
62118: PUSH
62119: LD_INT 3
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 3
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 4
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: LD_INT 3
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 2
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 2
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: LD_INT 4
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: LD_INT 2
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 4
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 4
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 4
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 5
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 5
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 4
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 3
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 3
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 3
62303: PUSH
62304: LD_INT 2
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 5
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62369: LD_ADDR_VAR 0 32
62373: PUSH
62374: LD_INT 4
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 4
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 3
62399: NEG
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 4
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 5
62432: NEG
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 5
62443: NEG
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 5
62455: NEG
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 3
62467: NEG
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 3
62478: NEG
62479: PUSH
62480: LD_INT 3
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: NEG
62491: PUSH
62492: LD_INT 4
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: NEG
62515: PUSH
62516: LD_INT 2
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 3
62526: NEG
62527: PUSH
62528: LD_INT 2
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 4
62538: NEG
62539: PUSH
62540: LD_INT 3
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 4
62550: NEG
62551: PUSH
62552: LD_INT 4
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: LD_INT 4
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 4
62574: NEG
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 4
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 5
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: LD_INT 4
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: LD_INT 3
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: LD_INT 4
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: LD_INT 5
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: LD_INT 3
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 5
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 3
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 4
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 4
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 3
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 4
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 4
62781: PUSH
62782: LD_INT 4
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 4
62791: PUSH
62792: LD_INT 3
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 5
62801: PUSH
62802: LD_INT 4
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 5
62811: PUSH
62812: LD_INT 5
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 4
62821: PUSH
62822: LD_INT 5
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 3
62831: PUSH
62832: LD_INT 4
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: LD_INT 3
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 5
62851: PUSH
62852: LD_INT 3
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: LD_INT 5
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62916: LD_ADDR_VAR 0 33
62920: PUSH
62921: LD_INT 4
62923: NEG
62924: PUSH
62925: LD_INT 4
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 4
62935: NEG
62936: PUSH
62937: LD_INT 5
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 3
62947: NEG
62948: PUSH
62949: LD_INT 4
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: NEG
62960: PUSH
62961: LD_INT 3
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 4
62971: NEG
62972: PUSH
62973: LD_INT 3
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 5
62983: NEG
62984: PUSH
62985: LD_INT 4
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 5
62995: NEG
62996: PUSH
62997: LD_INT 5
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: LD_INT 5
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 5
63019: NEG
63020: PUSH
63021: LD_INT 3
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 4
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: LD_INT 4
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 2
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: LD_INT 4
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 4
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 4
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 5
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 5
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 4
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 3
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 3
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 5
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: PUSH
63227: LD_INT 3
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: LD_INT 2
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 4
63246: PUSH
63247: LD_INT 3
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 4
63256: PUSH
63257: LD_INT 4
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 3
63266: PUSH
63267: LD_INT 4
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: LD_INT 3
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 4
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: LD_INT 4
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: LD_INT 4
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: LD_INT 4
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 5
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 5
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 4
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: LD_INT 3
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: LD_INT 5
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63454: LD_ADDR_VAR 0 34
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: LD_INT 4
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 5
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: LD_INT 4
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: LD_INT 3
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: LD_INT 3
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: LD_INT 4
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: LD_INT 5
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 2
63540: PUSH
63541: LD_INT 3
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: LD_INT 5
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 3
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 3
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 4
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 4
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: LD_INT 1
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 2
63635: PUSH
63636: LD_INT 2
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 4
63646: PUSH
63647: LD_INT 2
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 4
63656: PUSH
63657: LD_INT 4
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 4
63666: PUSH
63667: LD_INT 3
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 5
63676: PUSH
63677: LD_INT 4
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 5
63686: PUSH
63687: LD_INT 5
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 4
63696: PUSH
63697: LD_INT 5
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: LD_INT 4
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 3
63716: PUSH
63717: LD_INT 3
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 5
63726: PUSH
63727: LD_INT 3
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 3
63736: PUSH
63737: LD_INT 5
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: LD_INT 3
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 4
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 4
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: LD_INT 4
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 4
63839: NEG
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 4
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 3
63862: NEG
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 3
63873: NEG
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 4
63884: NEG
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 5
63895: NEG
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 5
63906: NEG
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 5
63918: NEG
63919: PUSH
63920: LD_INT 2
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: ST_TO_ADDR
// end ; end ;
63986: GO 63989
63988: POP
// case btype of b_depot , b_warehouse :
63989: LD_VAR 0 1
63993: PUSH
63994: LD_INT 0
63996: DOUBLE
63997: EQUAL
63998: IFTRUE 64008
64000: LD_INT 1
64002: DOUBLE
64003: EQUAL
64004: IFTRUE 64008
64006: GO 64209
64008: POP
// case nation of nation_american :
64009: LD_VAR 0 5
64013: PUSH
64014: LD_INT 1
64016: DOUBLE
64017: EQUAL
64018: IFTRUE 64022
64020: GO 64078
64022: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
64023: LD_ADDR_VAR 0 9
64027: PUSH
64028: LD_VAR 0 11
64032: PUSH
64033: LD_VAR 0 12
64037: PUSH
64038: LD_VAR 0 13
64042: PUSH
64043: LD_VAR 0 14
64047: PUSH
64048: LD_VAR 0 15
64052: PUSH
64053: LD_VAR 0 16
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: PUSH
64066: LD_VAR 0 4
64070: PUSH
64071: LD_INT 1
64073: PLUS
64074: ARRAY
64075: ST_TO_ADDR
64076: GO 64207
64078: LD_INT 2
64080: DOUBLE
64081: EQUAL
64082: IFTRUE 64086
64084: GO 64142
64086: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
64087: LD_ADDR_VAR 0 9
64091: PUSH
64092: LD_VAR 0 17
64096: PUSH
64097: LD_VAR 0 18
64101: PUSH
64102: LD_VAR 0 19
64106: PUSH
64107: LD_VAR 0 20
64111: PUSH
64112: LD_VAR 0 21
64116: PUSH
64117: LD_VAR 0 22
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: PUSH
64130: LD_VAR 0 4
64134: PUSH
64135: LD_INT 1
64137: PLUS
64138: ARRAY
64139: ST_TO_ADDR
64140: GO 64207
64142: LD_INT 3
64144: DOUBLE
64145: EQUAL
64146: IFTRUE 64150
64148: GO 64206
64150: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64151: LD_ADDR_VAR 0 9
64155: PUSH
64156: LD_VAR 0 23
64160: PUSH
64161: LD_VAR 0 24
64165: PUSH
64166: LD_VAR 0 25
64170: PUSH
64171: LD_VAR 0 26
64175: PUSH
64176: LD_VAR 0 27
64180: PUSH
64181: LD_VAR 0 28
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: PUSH
64194: LD_VAR 0 4
64198: PUSH
64199: LD_INT 1
64201: PLUS
64202: ARRAY
64203: ST_TO_ADDR
64204: GO 64207
64206: POP
64207: GO 64762
64209: LD_INT 2
64211: DOUBLE
64212: EQUAL
64213: IFTRUE 64223
64215: LD_INT 3
64217: DOUBLE
64218: EQUAL
64219: IFTRUE 64223
64221: GO 64279
64223: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64224: LD_ADDR_VAR 0 9
64228: PUSH
64229: LD_VAR 0 29
64233: PUSH
64234: LD_VAR 0 30
64238: PUSH
64239: LD_VAR 0 31
64243: PUSH
64244: LD_VAR 0 32
64248: PUSH
64249: LD_VAR 0 33
64253: PUSH
64254: LD_VAR 0 34
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: PUSH
64267: LD_VAR 0 4
64271: PUSH
64272: LD_INT 1
64274: PLUS
64275: ARRAY
64276: ST_TO_ADDR
64277: GO 64762
64279: LD_INT 16
64281: DOUBLE
64282: EQUAL
64283: IFTRUE 64341
64285: LD_INT 17
64287: DOUBLE
64288: EQUAL
64289: IFTRUE 64341
64291: LD_INT 18
64293: DOUBLE
64294: EQUAL
64295: IFTRUE 64341
64297: LD_INT 19
64299: DOUBLE
64300: EQUAL
64301: IFTRUE 64341
64303: LD_INT 22
64305: DOUBLE
64306: EQUAL
64307: IFTRUE 64341
64309: LD_INT 20
64311: DOUBLE
64312: EQUAL
64313: IFTRUE 64341
64315: LD_INT 21
64317: DOUBLE
64318: EQUAL
64319: IFTRUE 64341
64321: LD_INT 23
64323: DOUBLE
64324: EQUAL
64325: IFTRUE 64341
64327: LD_INT 24
64329: DOUBLE
64330: EQUAL
64331: IFTRUE 64341
64333: LD_INT 25
64335: DOUBLE
64336: EQUAL
64337: IFTRUE 64341
64339: GO 64397
64341: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64342: LD_ADDR_VAR 0 9
64346: PUSH
64347: LD_VAR 0 35
64351: PUSH
64352: LD_VAR 0 36
64356: PUSH
64357: LD_VAR 0 37
64361: PUSH
64362: LD_VAR 0 38
64366: PUSH
64367: LD_VAR 0 39
64371: PUSH
64372: LD_VAR 0 40
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: PUSH
64385: LD_VAR 0 4
64389: PUSH
64390: LD_INT 1
64392: PLUS
64393: ARRAY
64394: ST_TO_ADDR
64395: GO 64762
64397: LD_INT 6
64399: DOUBLE
64400: EQUAL
64401: IFTRUE 64453
64403: LD_INT 7
64405: DOUBLE
64406: EQUAL
64407: IFTRUE 64453
64409: LD_INT 8
64411: DOUBLE
64412: EQUAL
64413: IFTRUE 64453
64415: LD_INT 13
64417: DOUBLE
64418: EQUAL
64419: IFTRUE 64453
64421: LD_INT 12
64423: DOUBLE
64424: EQUAL
64425: IFTRUE 64453
64427: LD_INT 15
64429: DOUBLE
64430: EQUAL
64431: IFTRUE 64453
64433: LD_INT 11
64435: DOUBLE
64436: EQUAL
64437: IFTRUE 64453
64439: LD_INT 14
64441: DOUBLE
64442: EQUAL
64443: IFTRUE 64453
64445: LD_INT 10
64447: DOUBLE
64448: EQUAL
64449: IFTRUE 64453
64451: GO 64509
64453: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
64454: LD_ADDR_VAR 0 9
64458: PUSH
64459: LD_VAR 0 41
64463: PUSH
64464: LD_VAR 0 42
64468: PUSH
64469: LD_VAR 0 43
64473: PUSH
64474: LD_VAR 0 44
64478: PUSH
64479: LD_VAR 0 45
64483: PUSH
64484: LD_VAR 0 46
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: PUSH
64497: LD_VAR 0 4
64501: PUSH
64502: LD_INT 1
64504: PLUS
64505: ARRAY
64506: ST_TO_ADDR
64507: GO 64762
64509: LD_INT 36
64511: DOUBLE
64512: EQUAL
64513: IFTRUE 64517
64515: GO 64573
64517: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64518: LD_ADDR_VAR 0 9
64522: PUSH
64523: LD_VAR 0 47
64527: PUSH
64528: LD_VAR 0 48
64532: PUSH
64533: LD_VAR 0 49
64537: PUSH
64538: LD_VAR 0 50
64542: PUSH
64543: LD_VAR 0 51
64547: PUSH
64548: LD_VAR 0 52
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: PUSH
64561: LD_VAR 0 4
64565: PUSH
64566: LD_INT 1
64568: PLUS
64569: ARRAY
64570: ST_TO_ADDR
64571: GO 64762
64573: LD_INT 4
64575: DOUBLE
64576: EQUAL
64577: IFTRUE 64599
64579: LD_INT 5
64581: DOUBLE
64582: EQUAL
64583: IFTRUE 64599
64585: LD_INT 34
64587: DOUBLE
64588: EQUAL
64589: IFTRUE 64599
64591: LD_INT 37
64593: DOUBLE
64594: EQUAL
64595: IFTRUE 64599
64597: GO 64655
64599: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64600: LD_ADDR_VAR 0 9
64604: PUSH
64605: LD_VAR 0 53
64609: PUSH
64610: LD_VAR 0 54
64614: PUSH
64615: LD_VAR 0 55
64619: PUSH
64620: LD_VAR 0 56
64624: PUSH
64625: LD_VAR 0 57
64629: PUSH
64630: LD_VAR 0 58
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: PUSH
64643: LD_VAR 0 4
64647: PUSH
64648: LD_INT 1
64650: PLUS
64651: ARRAY
64652: ST_TO_ADDR
64653: GO 64762
64655: LD_INT 31
64657: DOUBLE
64658: EQUAL
64659: IFTRUE 64705
64661: LD_INT 32
64663: DOUBLE
64664: EQUAL
64665: IFTRUE 64705
64667: LD_INT 33
64669: DOUBLE
64670: EQUAL
64671: IFTRUE 64705
64673: LD_INT 27
64675: DOUBLE
64676: EQUAL
64677: IFTRUE 64705
64679: LD_INT 26
64681: DOUBLE
64682: EQUAL
64683: IFTRUE 64705
64685: LD_INT 28
64687: DOUBLE
64688: EQUAL
64689: IFTRUE 64705
64691: LD_INT 29
64693: DOUBLE
64694: EQUAL
64695: IFTRUE 64705
64697: LD_INT 30
64699: DOUBLE
64700: EQUAL
64701: IFTRUE 64705
64703: GO 64761
64705: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
64706: LD_ADDR_VAR 0 9
64710: PUSH
64711: LD_VAR 0 59
64715: PUSH
64716: LD_VAR 0 60
64720: PUSH
64721: LD_VAR 0 61
64725: PUSH
64726: LD_VAR 0 62
64730: PUSH
64731: LD_VAR 0 63
64735: PUSH
64736: LD_VAR 0 64
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: PUSH
64749: LD_VAR 0 4
64753: PUSH
64754: LD_INT 1
64756: PLUS
64757: ARRAY
64758: ST_TO_ADDR
64759: GO 64762
64761: POP
// temp_list2 = [ ] ;
64762: LD_ADDR_VAR 0 10
64766: PUSH
64767: EMPTY
64768: ST_TO_ADDR
// for i in temp_list do
64769: LD_ADDR_VAR 0 8
64773: PUSH
64774: LD_VAR 0 9
64778: PUSH
64779: FOR_IN
64780: IFFALSE 64832
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64782: LD_ADDR_VAR 0 10
64786: PUSH
64787: LD_VAR 0 10
64791: PUSH
64792: LD_VAR 0 8
64796: PUSH
64797: LD_INT 1
64799: ARRAY
64800: PUSH
64801: LD_VAR 0 2
64805: PLUS
64806: PUSH
64807: LD_VAR 0 8
64811: PUSH
64812: LD_INT 2
64814: ARRAY
64815: PUSH
64816: LD_VAR 0 3
64820: PLUS
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: EMPTY
64827: LIST
64828: ADD
64829: ST_TO_ADDR
64830: GO 64779
64832: POP
64833: POP
// result = temp_list2 ;
64834: LD_ADDR_VAR 0 7
64838: PUSH
64839: LD_VAR 0 10
64843: ST_TO_ADDR
// end ;
64844: LD_VAR 0 7
64848: RET
// export function EnemyInRange ( unit , dist ) ; begin
64849: LD_INT 0
64851: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64852: LD_ADDR_VAR 0 3
64856: PUSH
64857: LD_VAR 0 1
64861: PPUSH
64862: CALL_OW 255
64866: PPUSH
64867: LD_VAR 0 1
64871: PPUSH
64872: CALL_OW 250
64876: PPUSH
64877: LD_VAR 0 1
64881: PPUSH
64882: CALL_OW 251
64886: PPUSH
64887: LD_VAR 0 2
64891: PPUSH
64892: CALL 38953 0 4
64896: PUSH
64897: LD_INT 4
64899: ARRAY
64900: ST_TO_ADDR
// end ;
64901: LD_VAR 0 3
64905: RET
// export function PlayerSeeMe ( unit ) ; begin
64906: LD_INT 0
64908: PPUSH
// result := See ( your_side , unit ) ;
64909: LD_ADDR_VAR 0 2
64913: PUSH
64914: LD_OWVAR 2
64918: PPUSH
64919: LD_VAR 0 1
64923: PPUSH
64924: CALL_OW 292
64928: ST_TO_ADDR
// end ;
64929: LD_VAR 0 2
64933: RET
// export function ReverseDir ( unit ) ; begin
64934: LD_INT 0
64936: PPUSH
// if not unit then
64937: LD_VAR 0 1
64941: NOT
64942: IFFALSE 64946
// exit ;
64944: GO 64969
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64946: LD_ADDR_VAR 0 2
64950: PUSH
64951: LD_VAR 0 1
64955: PPUSH
64956: CALL_OW 254
64960: PUSH
64961: LD_INT 3
64963: PLUS
64964: PUSH
64965: LD_INT 6
64967: MOD
64968: ST_TO_ADDR
// end ;
64969: LD_VAR 0 2
64973: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64974: LD_INT 0
64976: PPUSH
64977: PPUSH
64978: PPUSH
64979: PPUSH
64980: PPUSH
// if not hexes then
64981: LD_VAR 0 2
64985: NOT
64986: IFFALSE 64990
// exit ;
64988: GO 65138
// dist := 9999 ;
64990: LD_ADDR_VAR 0 5
64994: PUSH
64995: LD_INT 9999
64997: ST_TO_ADDR
// for i = 1 to hexes do
64998: LD_ADDR_VAR 0 4
65002: PUSH
65003: DOUBLE
65004: LD_INT 1
65006: DEC
65007: ST_TO_ADDR
65008: LD_VAR 0 2
65012: PUSH
65013: FOR_TO
65014: IFFALSE 65126
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65016: LD_VAR 0 1
65020: PPUSH
65021: LD_VAR 0 2
65025: PUSH
65026: LD_VAR 0 4
65030: ARRAY
65031: PUSH
65032: LD_INT 1
65034: ARRAY
65035: PPUSH
65036: LD_VAR 0 2
65040: PUSH
65041: LD_VAR 0 4
65045: ARRAY
65046: PUSH
65047: LD_INT 2
65049: ARRAY
65050: PPUSH
65051: CALL_OW 297
65055: PUSH
65056: LD_VAR 0 5
65060: LESS
65061: IFFALSE 65124
// begin hex := hexes [ i ] ;
65063: LD_ADDR_VAR 0 7
65067: PUSH
65068: LD_VAR 0 2
65072: PUSH
65073: LD_VAR 0 4
65077: ARRAY
65078: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65079: LD_ADDR_VAR 0 5
65083: PUSH
65084: LD_VAR 0 1
65088: PPUSH
65089: LD_VAR 0 2
65093: PUSH
65094: LD_VAR 0 4
65098: ARRAY
65099: PUSH
65100: LD_INT 1
65102: ARRAY
65103: PPUSH
65104: LD_VAR 0 2
65108: PUSH
65109: LD_VAR 0 4
65113: ARRAY
65114: PUSH
65115: LD_INT 2
65117: ARRAY
65118: PPUSH
65119: CALL_OW 297
65123: ST_TO_ADDR
// end ; end ;
65124: GO 65013
65126: POP
65127: POP
// result := hex ;
65128: LD_ADDR_VAR 0 3
65132: PUSH
65133: LD_VAR 0 7
65137: ST_TO_ADDR
// end ;
65138: LD_VAR 0 3
65142: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65143: LD_INT 0
65145: PPUSH
65146: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65147: LD_VAR 0 1
65151: NOT
65152: PUSH
65153: LD_VAR 0 1
65157: PUSH
65158: LD_INT 21
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 23
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PPUSH
65182: CALL_OW 69
65186: IN
65187: NOT
65188: OR
65189: IFFALSE 65193
// exit ;
65191: GO 65240
// for i = 1 to 3 do
65193: LD_ADDR_VAR 0 3
65197: PUSH
65198: DOUBLE
65199: LD_INT 1
65201: DEC
65202: ST_TO_ADDR
65203: LD_INT 3
65205: PUSH
65206: FOR_TO
65207: IFFALSE 65238
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65209: LD_VAR 0 1
65213: PPUSH
65214: CALL_OW 250
65218: PPUSH
65219: LD_VAR 0 1
65223: PPUSH
65224: CALL_OW 251
65228: PPUSH
65229: LD_INT 1
65231: PPUSH
65232: CALL_OW 453
65236: GO 65206
65238: POP
65239: POP
// end ;
65240: LD_VAR 0 2
65244: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65245: LD_INT 0
65247: PPUSH
65248: PPUSH
65249: PPUSH
65250: PPUSH
65251: PPUSH
65252: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65253: LD_VAR 0 1
65257: NOT
65258: PUSH
65259: LD_VAR 0 2
65263: NOT
65264: OR
65265: PUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: CALL_OW 314
65275: OR
65276: IFFALSE 65280
// exit ;
65278: GO 65721
// x := GetX ( enemy_unit ) ;
65280: LD_ADDR_VAR 0 7
65284: PUSH
65285: LD_VAR 0 2
65289: PPUSH
65290: CALL_OW 250
65294: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65295: LD_ADDR_VAR 0 8
65299: PUSH
65300: LD_VAR 0 2
65304: PPUSH
65305: CALL_OW 251
65309: ST_TO_ADDR
// if not x or not y then
65310: LD_VAR 0 7
65314: NOT
65315: PUSH
65316: LD_VAR 0 8
65320: NOT
65321: OR
65322: IFFALSE 65326
// exit ;
65324: GO 65721
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65326: LD_ADDR_VAR 0 6
65330: PUSH
65331: LD_VAR 0 7
65335: PPUSH
65336: LD_INT 0
65338: PPUSH
65339: LD_INT 4
65341: PPUSH
65342: CALL_OW 272
65346: PUSH
65347: LD_VAR 0 8
65351: PPUSH
65352: LD_INT 0
65354: PPUSH
65355: LD_INT 4
65357: PPUSH
65358: CALL_OW 273
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_VAR 0 7
65371: PPUSH
65372: LD_INT 1
65374: PPUSH
65375: LD_INT 4
65377: PPUSH
65378: CALL_OW 272
65382: PUSH
65383: LD_VAR 0 8
65387: PPUSH
65388: LD_INT 1
65390: PPUSH
65391: LD_INT 4
65393: PPUSH
65394: CALL_OW 273
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_VAR 0 7
65407: PPUSH
65408: LD_INT 2
65410: PPUSH
65411: LD_INT 4
65413: PPUSH
65414: CALL_OW 272
65418: PUSH
65419: LD_VAR 0 8
65423: PPUSH
65424: LD_INT 2
65426: PPUSH
65427: LD_INT 4
65429: PPUSH
65430: CALL_OW 273
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_VAR 0 7
65443: PPUSH
65444: LD_INT 3
65446: PPUSH
65447: LD_INT 4
65449: PPUSH
65450: CALL_OW 272
65454: PUSH
65455: LD_VAR 0 8
65459: PPUSH
65460: LD_INT 3
65462: PPUSH
65463: LD_INT 4
65465: PPUSH
65466: CALL_OW 273
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_VAR 0 7
65479: PPUSH
65480: LD_INT 4
65482: PPUSH
65483: LD_INT 4
65485: PPUSH
65486: CALL_OW 272
65490: PUSH
65491: LD_VAR 0 8
65495: PPUSH
65496: LD_INT 4
65498: PPUSH
65499: LD_INT 4
65501: PPUSH
65502: CALL_OW 273
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_VAR 0 7
65515: PPUSH
65516: LD_INT 5
65518: PPUSH
65519: LD_INT 4
65521: PPUSH
65522: CALL_OW 272
65526: PUSH
65527: LD_VAR 0 8
65531: PPUSH
65532: LD_INT 5
65534: PPUSH
65535: LD_INT 4
65537: PPUSH
65538: CALL_OW 273
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: ST_TO_ADDR
// for i = tmp downto 1 do
65555: LD_ADDR_VAR 0 4
65559: PUSH
65560: DOUBLE
65561: LD_VAR 0 6
65565: INC
65566: ST_TO_ADDR
65567: LD_INT 1
65569: PUSH
65570: FOR_DOWNTO
65571: IFFALSE 65672
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65573: LD_VAR 0 6
65577: PUSH
65578: LD_VAR 0 4
65582: ARRAY
65583: PUSH
65584: LD_INT 1
65586: ARRAY
65587: PPUSH
65588: LD_VAR 0 6
65592: PUSH
65593: LD_VAR 0 4
65597: ARRAY
65598: PUSH
65599: LD_INT 2
65601: ARRAY
65602: PPUSH
65603: CALL_OW 488
65607: NOT
65608: PUSH
65609: LD_VAR 0 6
65613: PUSH
65614: LD_VAR 0 4
65618: ARRAY
65619: PUSH
65620: LD_INT 1
65622: ARRAY
65623: PPUSH
65624: LD_VAR 0 6
65628: PUSH
65629: LD_VAR 0 4
65633: ARRAY
65634: PUSH
65635: LD_INT 2
65637: ARRAY
65638: PPUSH
65639: CALL_OW 428
65643: PUSH
65644: LD_INT 0
65646: NONEQUAL
65647: OR
65648: IFFALSE 65670
// tmp := Delete ( tmp , i ) ;
65650: LD_ADDR_VAR 0 6
65654: PUSH
65655: LD_VAR 0 6
65659: PPUSH
65660: LD_VAR 0 4
65664: PPUSH
65665: CALL_OW 3
65669: ST_TO_ADDR
65670: GO 65570
65672: POP
65673: POP
// j := GetClosestHex ( unit , tmp ) ;
65674: LD_ADDR_VAR 0 5
65678: PUSH
65679: LD_VAR 0 1
65683: PPUSH
65684: LD_VAR 0 6
65688: PPUSH
65689: CALL 64974 0 2
65693: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65694: LD_VAR 0 1
65698: PPUSH
65699: LD_VAR 0 5
65703: PUSH
65704: LD_INT 1
65706: ARRAY
65707: PPUSH
65708: LD_VAR 0 5
65712: PUSH
65713: LD_INT 2
65715: ARRAY
65716: PPUSH
65717: CALL_OW 111
// end ;
65721: LD_VAR 0 3
65725: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65726: LD_INT 0
65728: PPUSH
65729: PPUSH
65730: PPUSH
// uc_side = 0 ;
65731: LD_ADDR_OWVAR 20
65735: PUSH
65736: LD_INT 0
65738: ST_TO_ADDR
// uc_nation = 0 ;
65739: LD_ADDR_OWVAR 21
65743: PUSH
65744: LD_INT 0
65746: ST_TO_ADDR
// InitHc ;
65747: CALL_OW 19
// InitVc ;
65751: CALL_OW 20
// if mastodonts then
65755: LD_VAR 0 6
65759: IFFALSE 65826
// for i = 1 to mastodonts do
65761: LD_ADDR_VAR 0 11
65765: PUSH
65766: DOUBLE
65767: LD_INT 1
65769: DEC
65770: ST_TO_ADDR
65771: LD_VAR 0 6
65775: PUSH
65776: FOR_TO
65777: IFFALSE 65824
// begin vc_chassis := 31 ;
65779: LD_ADDR_OWVAR 37
65783: PUSH
65784: LD_INT 31
65786: ST_TO_ADDR
// vc_control := control_rider ;
65787: LD_ADDR_OWVAR 38
65791: PUSH
65792: LD_INT 4
65794: ST_TO_ADDR
// animal := CreateVehicle ;
65795: LD_ADDR_VAR 0 12
65799: PUSH
65800: CALL_OW 45
65804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65805: LD_VAR 0 12
65809: PPUSH
65810: LD_VAR 0 8
65814: PPUSH
65815: LD_INT 0
65817: PPUSH
65818: CALL 67895 0 3
// end ;
65822: GO 65776
65824: POP
65825: POP
// if horses then
65826: LD_VAR 0 5
65830: IFFALSE 65897
// for i = 1 to horses do
65832: LD_ADDR_VAR 0 11
65836: PUSH
65837: DOUBLE
65838: LD_INT 1
65840: DEC
65841: ST_TO_ADDR
65842: LD_VAR 0 5
65846: PUSH
65847: FOR_TO
65848: IFFALSE 65895
// begin hc_class := 21 ;
65850: LD_ADDR_OWVAR 28
65854: PUSH
65855: LD_INT 21
65857: ST_TO_ADDR
// hc_gallery :=  ;
65858: LD_ADDR_OWVAR 33
65862: PUSH
65863: LD_STRING 
65865: ST_TO_ADDR
// animal := CreateHuman ;
65866: LD_ADDR_VAR 0 12
65870: PUSH
65871: CALL_OW 44
65875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65876: LD_VAR 0 12
65880: PPUSH
65881: LD_VAR 0 8
65885: PPUSH
65886: LD_INT 0
65888: PPUSH
65889: CALL 67895 0 3
// end ;
65893: GO 65847
65895: POP
65896: POP
// if birds then
65897: LD_VAR 0 1
65901: IFFALSE 65968
// for i = 1 to birds do
65903: LD_ADDR_VAR 0 11
65907: PUSH
65908: DOUBLE
65909: LD_INT 1
65911: DEC
65912: ST_TO_ADDR
65913: LD_VAR 0 1
65917: PUSH
65918: FOR_TO
65919: IFFALSE 65966
// begin hc_class = 18 ;
65921: LD_ADDR_OWVAR 28
65925: PUSH
65926: LD_INT 18
65928: ST_TO_ADDR
// hc_gallery =  ;
65929: LD_ADDR_OWVAR 33
65933: PUSH
65934: LD_STRING 
65936: ST_TO_ADDR
// animal := CreateHuman ;
65937: LD_ADDR_VAR 0 12
65941: PUSH
65942: CALL_OW 44
65946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65947: LD_VAR 0 12
65951: PPUSH
65952: LD_VAR 0 8
65956: PPUSH
65957: LD_INT 0
65959: PPUSH
65960: CALL 67895 0 3
// end ;
65964: GO 65918
65966: POP
65967: POP
// if tigers then
65968: LD_VAR 0 2
65972: IFFALSE 66056
// for i = 1 to tigers do
65974: LD_ADDR_VAR 0 11
65978: PUSH
65979: DOUBLE
65980: LD_INT 1
65982: DEC
65983: ST_TO_ADDR
65984: LD_VAR 0 2
65988: PUSH
65989: FOR_TO
65990: IFFALSE 66054
// begin hc_class = class_tiger ;
65992: LD_ADDR_OWVAR 28
65996: PUSH
65997: LD_INT 14
65999: ST_TO_ADDR
// hc_gallery =  ;
66000: LD_ADDR_OWVAR 33
66004: PUSH
66005: LD_STRING 
66007: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66008: LD_ADDR_OWVAR 35
66012: PUSH
66013: LD_INT 7
66015: NEG
66016: PPUSH
66017: LD_INT 7
66019: PPUSH
66020: CALL_OW 12
66024: ST_TO_ADDR
// animal := CreateHuman ;
66025: LD_ADDR_VAR 0 12
66029: PUSH
66030: CALL_OW 44
66034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66035: LD_VAR 0 12
66039: PPUSH
66040: LD_VAR 0 8
66044: PPUSH
66045: LD_INT 0
66047: PPUSH
66048: CALL 67895 0 3
// end ;
66052: GO 65989
66054: POP
66055: POP
// if apemans then
66056: LD_VAR 0 3
66060: IFFALSE 66183
// for i = 1 to apemans do
66062: LD_ADDR_VAR 0 11
66066: PUSH
66067: DOUBLE
66068: LD_INT 1
66070: DEC
66071: ST_TO_ADDR
66072: LD_VAR 0 3
66076: PUSH
66077: FOR_TO
66078: IFFALSE 66181
// begin hc_class = class_apeman ;
66080: LD_ADDR_OWVAR 28
66084: PUSH
66085: LD_INT 12
66087: ST_TO_ADDR
// hc_gallery =  ;
66088: LD_ADDR_OWVAR 33
66092: PUSH
66093: LD_STRING 
66095: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
66096: LD_ADDR_OWVAR 35
66100: PUSH
66101: LD_INT 5
66103: NEG
66104: PPUSH
66105: LD_INT 5
66107: PPUSH
66108: CALL_OW 12
66112: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66113: LD_ADDR_OWVAR 31
66117: PUSH
66118: LD_INT 1
66120: PPUSH
66121: LD_INT 3
66123: PPUSH
66124: CALL_OW 12
66128: PUSH
66129: LD_INT 1
66131: PPUSH
66132: LD_INT 3
66134: PPUSH
66135: CALL_OW 12
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: ST_TO_ADDR
// animal := CreateHuman ;
66152: LD_ADDR_VAR 0 12
66156: PUSH
66157: CALL_OW 44
66161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66162: LD_VAR 0 12
66166: PPUSH
66167: LD_VAR 0 8
66171: PPUSH
66172: LD_INT 0
66174: PPUSH
66175: CALL 67895 0 3
// end ;
66179: GO 66077
66181: POP
66182: POP
// if enchidnas then
66183: LD_VAR 0 4
66187: IFFALSE 66254
// for i = 1 to enchidnas do
66189: LD_ADDR_VAR 0 11
66193: PUSH
66194: DOUBLE
66195: LD_INT 1
66197: DEC
66198: ST_TO_ADDR
66199: LD_VAR 0 4
66203: PUSH
66204: FOR_TO
66205: IFFALSE 66252
// begin hc_class = 13 ;
66207: LD_ADDR_OWVAR 28
66211: PUSH
66212: LD_INT 13
66214: ST_TO_ADDR
// hc_gallery =  ;
66215: LD_ADDR_OWVAR 33
66219: PUSH
66220: LD_STRING 
66222: ST_TO_ADDR
// animal := CreateHuman ;
66223: LD_ADDR_VAR 0 12
66227: PUSH
66228: CALL_OW 44
66232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66233: LD_VAR 0 12
66237: PPUSH
66238: LD_VAR 0 8
66242: PPUSH
66243: LD_INT 0
66245: PPUSH
66246: CALL 67895 0 3
// end ;
66250: GO 66204
66252: POP
66253: POP
// if fishes then
66254: LD_VAR 0 7
66258: IFFALSE 66325
// for i = 1 to fishes do
66260: LD_ADDR_VAR 0 11
66264: PUSH
66265: DOUBLE
66266: LD_INT 1
66268: DEC
66269: ST_TO_ADDR
66270: LD_VAR 0 7
66274: PUSH
66275: FOR_TO
66276: IFFALSE 66323
// begin hc_class = 20 ;
66278: LD_ADDR_OWVAR 28
66282: PUSH
66283: LD_INT 20
66285: ST_TO_ADDR
// hc_gallery =  ;
66286: LD_ADDR_OWVAR 33
66290: PUSH
66291: LD_STRING 
66293: ST_TO_ADDR
// animal := CreateHuman ;
66294: LD_ADDR_VAR 0 12
66298: PUSH
66299: CALL_OW 44
66303: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66304: LD_VAR 0 12
66308: PPUSH
66309: LD_VAR 0 9
66313: PPUSH
66314: LD_INT 0
66316: PPUSH
66317: CALL 67895 0 3
// end ;
66321: GO 66275
66323: POP
66324: POP
// end ;
66325: LD_VAR 0 10
66329: RET
// export function WantHeal ( sci , unit ) ; begin
66330: LD_INT 0
66332: PPUSH
// if GetTaskList ( sci ) > 0 then
66333: LD_VAR 0 1
66337: PPUSH
66338: CALL_OW 437
66342: PUSH
66343: LD_INT 0
66345: GREATER
66346: IFFALSE 66416
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66348: LD_VAR 0 1
66352: PPUSH
66353: CALL_OW 437
66357: PUSH
66358: LD_INT 1
66360: ARRAY
66361: PUSH
66362: LD_INT 1
66364: ARRAY
66365: PUSH
66366: LD_STRING l
66368: EQUAL
66369: PUSH
66370: LD_VAR 0 1
66374: PPUSH
66375: CALL_OW 437
66379: PUSH
66380: LD_INT 1
66382: ARRAY
66383: PUSH
66384: LD_INT 4
66386: ARRAY
66387: PUSH
66388: LD_VAR 0 2
66392: EQUAL
66393: AND
66394: IFFALSE 66406
// result := true else
66396: LD_ADDR_VAR 0 3
66400: PUSH
66401: LD_INT 1
66403: ST_TO_ADDR
66404: GO 66414
// result := false ;
66406: LD_ADDR_VAR 0 3
66410: PUSH
66411: LD_INT 0
66413: ST_TO_ADDR
// end else
66414: GO 66424
// result := false ;
66416: LD_ADDR_VAR 0 3
66420: PUSH
66421: LD_INT 0
66423: ST_TO_ADDR
// end ;
66424: LD_VAR 0 3
66428: RET
// export function HealTarget ( sci ) ; begin
66429: LD_INT 0
66431: PPUSH
// if not sci then
66432: LD_VAR 0 1
66436: NOT
66437: IFFALSE 66441
// exit ;
66439: GO 66506
// result := 0 ;
66441: LD_ADDR_VAR 0 2
66445: PUSH
66446: LD_INT 0
66448: ST_TO_ADDR
// if GetTaskList ( sci ) then
66449: LD_VAR 0 1
66453: PPUSH
66454: CALL_OW 437
66458: IFFALSE 66506
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66460: LD_VAR 0 1
66464: PPUSH
66465: CALL_OW 437
66469: PUSH
66470: LD_INT 1
66472: ARRAY
66473: PUSH
66474: LD_INT 1
66476: ARRAY
66477: PUSH
66478: LD_STRING l
66480: EQUAL
66481: IFFALSE 66506
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66483: LD_ADDR_VAR 0 2
66487: PUSH
66488: LD_VAR 0 1
66492: PPUSH
66493: CALL_OW 437
66497: PUSH
66498: LD_INT 1
66500: ARRAY
66501: PUSH
66502: LD_INT 4
66504: ARRAY
66505: ST_TO_ADDR
// end ;
66506: LD_VAR 0 2
66510: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66511: LD_INT 0
66513: PPUSH
66514: PPUSH
66515: PPUSH
66516: PPUSH
// if not base_units then
66517: LD_VAR 0 1
66521: NOT
66522: IFFALSE 66526
// exit ;
66524: GO 66613
// result := false ;
66526: LD_ADDR_VAR 0 2
66530: PUSH
66531: LD_INT 0
66533: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66534: LD_ADDR_VAR 0 5
66538: PUSH
66539: LD_VAR 0 1
66543: PPUSH
66544: LD_INT 21
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PPUSH
66554: CALL_OW 72
66558: ST_TO_ADDR
// if not tmp then
66559: LD_VAR 0 5
66563: NOT
66564: IFFALSE 66568
// exit ;
66566: GO 66613
// for i in tmp do
66568: LD_ADDR_VAR 0 3
66572: PUSH
66573: LD_VAR 0 5
66577: PUSH
66578: FOR_IN
66579: IFFALSE 66611
// begin result := EnemyInRange ( i , 22 ) ;
66581: LD_ADDR_VAR 0 2
66585: PUSH
66586: LD_VAR 0 3
66590: PPUSH
66591: LD_INT 22
66593: PPUSH
66594: CALL 64849 0 2
66598: ST_TO_ADDR
// if result then
66599: LD_VAR 0 2
66603: IFFALSE 66609
// exit ;
66605: POP
66606: POP
66607: GO 66613
// end ;
66609: GO 66578
66611: POP
66612: POP
// end ;
66613: LD_VAR 0 2
66617: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66618: LD_INT 0
66620: PPUSH
66621: PPUSH
// if not units then
66622: LD_VAR 0 1
66626: NOT
66627: IFFALSE 66631
// exit ;
66629: GO 66701
// result := [ ] ;
66631: LD_ADDR_VAR 0 3
66635: PUSH
66636: EMPTY
66637: ST_TO_ADDR
// for i in units do
66638: LD_ADDR_VAR 0 4
66642: PUSH
66643: LD_VAR 0 1
66647: PUSH
66648: FOR_IN
66649: IFFALSE 66699
// if GetTag ( i ) = tag then
66651: LD_VAR 0 4
66655: PPUSH
66656: CALL_OW 110
66660: PUSH
66661: LD_VAR 0 2
66665: EQUAL
66666: IFFALSE 66697
// result := Insert ( result , result + 1 , i ) ;
66668: LD_ADDR_VAR 0 3
66672: PUSH
66673: LD_VAR 0 3
66677: PPUSH
66678: LD_VAR 0 3
66682: PUSH
66683: LD_INT 1
66685: PLUS
66686: PPUSH
66687: LD_VAR 0 4
66691: PPUSH
66692: CALL_OW 2
66696: ST_TO_ADDR
66697: GO 66648
66699: POP
66700: POP
// end ;
66701: LD_VAR 0 3
66705: RET
// export function IsDriver ( un ) ; begin
66706: LD_INT 0
66708: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66709: LD_ADDR_VAR 0 2
66713: PUSH
66714: LD_VAR 0 1
66718: PUSH
66719: LD_INT 55
66721: PUSH
66722: EMPTY
66723: LIST
66724: PPUSH
66725: CALL_OW 69
66729: IN
66730: ST_TO_ADDR
// end ;
66731: LD_VAR 0 2
66735: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66736: LD_INT 0
66738: PPUSH
66739: PPUSH
// list := [ ] ;
66740: LD_ADDR_VAR 0 5
66744: PUSH
66745: EMPTY
66746: ST_TO_ADDR
// case d of 0 :
66747: LD_VAR 0 3
66751: PUSH
66752: LD_INT 0
66754: DOUBLE
66755: EQUAL
66756: IFTRUE 66760
66758: GO 66893
66760: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66761: LD_ADDR_VAR 0 5
66765: PUSH
66766: LD_VAR 0 1
66770: PUSH
66771: LD_INT 4
66773: MINUS
66774: PUSH
66775: LD_VAR 0 2
66779: PUSH
66780: LD_INT 4
66782: MINUS
66783: PUSH
66784: LD_INT 2
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: PUSH
66792: LD_VAR 0 1
66796: PUSH
66797: LD_INT 3
66799: MINUS
66800: PUSH
66801: LD_VAR 0 2
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: PUSH
66814: LD_VAR 0 1
66818: PUSH
66819: LD_INT 4
66821: PLUS
66822: PUSH
66823: LD_VAR 0 2
66827: PUSH
66828: LD_INT 4
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: LIST
66835: PUSH
66836: LD_VAR 0 1
66840: PUSH
66841: LD_INT 3
66843: PLUS
66844: PUSH
66845: LD_VAR 0 2
66849: PUSH
66850: LD_INT 3
66852: PLUS
66853: PUSH
66854: LD_INT 5
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: PUSH
66862: LD_VAR 0 1
66866: PUSH
66867: LD_VAR 0 2
66871: PUSH
66872: LD_INT 4
66874: PLUS
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: LIST
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: ST_TO_ADDR
// end ; 1 :
66891: GO 67591
66893: LD_INT 1
66895: DOUBLE
66896: EQUAL
66897: IFTRUE 66901
66899: GO 67034
66901: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66902: LD_ADDR_VAR 0 5
66906: PUSH
66907: LD_VAR 0 1
66911: PUSH
66912: LD_VAR 0 2
66916: PUSH
66917: LD_INT 4
66919: MINUS
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: LIST
66928: PUSH
66929: LD_VAR 0 1
66933: PUSH
66934: LD_INT 3
66936: MINUS
66937: PUSH
66938: LD_VAR 0 2
66942: PUSH
66943: LD_INT 3
66945: MINUS
66946: PUSH
66947: LD_INT 2
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: LIST
66954: PUSH
66955: LD_VAR 0 1
66959: PUSH
66960: LD_INT 4
66962: MINUS
66963: PUSH
66964: LD_VAR 0 2
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: PUSH
66977: LD_VAR 0 1
66981: PUSH
66982: LD_VAR 0 2
66986: PUSH
66987: LD_INT 3
66989: PLUS
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: PUSH
66999: LD_VAR 0 1
67003: PUSH
67004: LD_INT 4
67006: PLUS
67007: PUSH
67008: LD_VAR 0 2
67012: PUSH
67013: LD_INT 4
67015: PLUS
67016: PUSH
67017: LD_INT 5
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: LIST
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: ST_TO_ADDR
// end ; 2 :
67032: GO 67591
67034: LD_INT 2
67036: DOUBLE
67037: EQUAL
67038: IFTRUE 67042
67040: GO 67171
67042: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67043: LD_ADDR_VAR 0 5
67047: PUSH
67048: LD_VAR 0 1
67052: PUSH
67053: LD_VAR 0 2
67057: PUSH
67058: LD_INT 3
67060: MINUS
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: LIST
67069: PUSH
67070: LD_VAR 0 1
67074: PUSH
67075: LD_INT 4
67077: PLUS
67078: PUSH
67079: LD_VAR 0 2
67083: PUSH
67084: LD_INT 4
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: LIST
67091: PUSH
67092: LD_VAR 0 1
67096: PUSH
67097: LD_VAR 0 2
67101: PUSH
67102: LD_INT 4
67104: PLUS
67105: PUSH
67106: LD_INT 0
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: LIST
67113: PUSH
67114: LD_VAR 0 1
67118: PUSH
67119: LD_INT 3
67121: MINUS
67122: PUSH
67123: LD_VAR 0 2
67127: PUSH
67128: LD_INT 1
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: LIST
67135: PUSH
67136: LD_VAR 0 1
67140: PUSH
67141: LD_INT 4
67143: MINUS
67144: PUSH
67145: LD_VAR 0 2
67149: PUSH
67150: LD_INT 4
67152: MINUS
67153: PUSH
67154: LD_INT 2
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: LIST
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: ST_TO_ADDR
// end ; 3 :
67169: GO 67591
67171: LD_INT 3
67173: DOUBLE
67174: EQUAL
67175: IFTRUE 67179
67177: GO 67312
67179: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67180: LD_ADDR_VAR 0 5
67184: PUSH
67185: LD_VAR 0 1
67189: PUSH
67190: LD_INT 3
67192: PLUS
67193: PUSH
67194: LD_VAR 0 2
67198: PUSH
67199: LD_INT 4
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: PUSH
67207: LD_VAR 0 1
67211: PUSH
67212: LD_INT 4
67214: PLUS
67215: PUSH
67216: LD_VAR 0 2
67220: PUSH
67221: LD_INT 4
67223: PLUS
67224: PUSH
67225: LD_INT 5
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: LIST
67232: PUSH
67233: LD_VAR 0 1
67237: PUSH
67238: LD_INT 4
67240: MINUS
67241: PUSH
67242: LD_VAR 0 2
67246: PUSH
67247: LD_INT 1
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: PUSH
67255: LD_VAR 0 1
67259: PUSH
67260: LD_VAR 0 2
67264: PUSH
67265: LD_INT 4
67267: MINUS
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: LIST
67276: PUSH
67277: LD_VAR 0 1
67281: PUSH
67282: LD_INT 3
67284: MINUS
67285: PUSH
67286: LD_VAR 0 2
67290: PUSH
67291: LD_INT 3
67293: MINUS
67294: PUSH
67295: LD_INT 2
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: ST_TO_ADDR
// end ; 4 :
67310: GO 67591
67312: LD_INT 4
67314: DOUBLE
67315: EQUAL
67316: IFTRUE 67320
67318: GO 67453
67320: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67321: LD_ADDR_VAR 0 5
67325: PUSH
67326: LD_VAR 0 1
67330: PUSH
67331: LD_VAR 0 2
67335: PUSH
67336: LD_INT 4
67338: PLUS
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: LIST
67347: PUSH
67348: LD_VAR 0 1
67352: PUSH
67353: LD_INT 3
67355: PLUS
67356: PUSH
67357: LD_VAR 0 2
67361: PUSH
67362: LD_INT 3
67364: PLUS
67365: PUSH
67366: LD_INT 5
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: LIST
67373: PUSH
67374: LD_VAR 0 1
67378: PUSH
67379: LD_INT 4
67381: PLUS
67382: PUSH
67383: LD_VAR 0 2
67387: PUSH
67388: LD_INT 4
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: LIST
67395: PUSH
67396: LD_VAR 0 1
67400: PUSH
67401: LD_VAR 0 2
67405: PUSH
67406: LD_INT 3
67408: MINUS
67409: PUSH
67410: LD_INT 3
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: LIST
67417: PUSH
67418: LD_VAR 0 1
67422: PUSH
67423: LD_INT 4
67425: MINUS
67426: PUSH
67427: LD_VAR 0 2
67431: PUSH
67432: LD_INT 4
67434: MINUS
67435: PUSH
67436: LD_INT 2
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: ST_TO_ADDR
// end ; 5 :
67451: GO 67591
67453: LD_INT 5
67455: DOUBLE
67456: EQUAL
67457: IFTRUE 67461
67459: GO 67590
67461: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67462: LD_ADDR_VAR 0 5
67466: PUSH
67467: LD_VAR 0 1
67471: PUSH
67472: LD_INT 4
67474: MINUS
67475: PUSH
67476: LD_VAR 0 2
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: LIST
67488: PUSH
67489: LD_VAR 0 1
67493: PUSH
67494: LD_VAR 0 2
67498: PUSH
67499: LD_INT 4
67501: MINUS
67502: PUSH
67503: LD_INT 3
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: LIST
67510: PUSH
67511: LD_VAR 0 1
67515: PUSH
67516: LD_INT 4
67518: PLUS
67519: PUSH
67520: LD_VAR 0 2
67524: PUSH
67525: LD_INT 4
67527: PLUS
67528: PUSH
67529: LD_INT 5
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: LIST
67536: PUSH
67537: LD_VAR 0 1
67541: PUSH
67542: LD_INT 3
67544: PLUS
67545: PUSH
67546: LD_VAR 0 2
67550: PUSH
67551: LD_INT 4
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: LIST
67558: PUSH
67559: LD_VAR 0 1
67563: PUSH
67564: LD_VAR 0 2
67568: PUSH
67569: LD_INT 3
67571: PLUS
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: LIST
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: ST_TO_ADDR
// end ; end ;
67588: GO 67591
67590: POP
// result := list ;
67591: LD_ADDR_VAR 0 4
67595: PUSH
67596: LD_VAR 0 5
67600: ST_TO_ADDR
// end ;
67601: LD_VAR 0 4
67605: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67606: LD_INT 0
67608: PPUSH
67609: PPUSH
67610: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67611: LD_VAR 0 1
67615: NOT
67616: PUSH
67617: LD_VAR 0 2
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: LD_INT 2
67627: PUSH
67628: LD_INT 3
67630: PUSH
67631: LD_INT 4
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: IN
67640: NOT
67641: OR
67642: IFFALSE 67646
// exit ;
67644: GO 67738
// tmp := [ ] ;
67646: LD_ADDR_VAR 0 5
67650: PUSH
67651: EMPTY
67652: ST_TO_ADDR
// for i in units do
67653: LD_ADDR_VAR 0 4
67657: PUSH
67658: LD_VAR 0 1
67662: PUSH
67663: FOR_IN
67664: IFFALSE 67707
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67666: LD_ADDR_VAR 0 5
67670: PUSH
67671: LD_VAR 0 5
67675: PPUSH
67676: LD_VAR 0 5
67680: PUSH
67681: LD_INT 1
67683: PLUS
67684: PPUSH
67685: LD_VAR 0 4
67689: PPUSH
67690: LD_VAR 0 2
67694: PPUSH
67695: CALL_OW 259
67699: PPUSH
67700: CALL_OW 2
67704: ST_TO_ADDR
67705: GO 67663
67707: POP
67708: POP
// if not tmp then
67709: LD_VAR 0 5
67713: NOT
67714: IFFALSE 67718
// exit ;
67716: GO 67738
// result := SortListByListDesc ( units , tmp ) ;
67718: LD_ADDR_VAR 0 3
67722: PUSH
67723: LD_VAR 0 1
67727: PPUSH
67728: LD_VAR 0 5
67732: PPUSH
67733: CALL_OW 77
67737: ST_TO_ADDR
// end ;
67738: LD_VAR 0 3
67742: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67743: LD_INT 0
67745: PPUSH
67746: PPUSH
67747: PPUSH
// x := GetX ( building ) ;
67748: LD_ADDR_VAR 0 4
67752: PUSH
67753: LD_VAR 0 2
67757: PPUSH
67758: CALL_OW 250
67762: ST_TO_ADDR
// y := GetY ( building ) ;
67763: LD_ADDR_VAR 0 5
67767: PUSH
67768: LD_VAR 0 2
67772: PPUSH
67773: CALL_OW 251
67777: ST_TO_ADDR
// if GetTaskList ( unit ) then
67778: LD_VAR 0 1
67782: PPUSH
67783: CALL_OW 437
67787: IFFALSE 67882
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67789: LD_STRING e
67791: PUSH
67792: LD_VAR 0 1
67796: PPUSH
67797: CALL_OW 437
67801: PUSH
67802: LD_INT 1
67804: ARRAY
67805: PUSH
67806: LD_INT 1
67808: ARRAY
67809: EQUAL
67810: PUSH
67811: LD_VAR 0 4
67815: PUSH
67816: LD_VAR 0 1
67820: PPUSH
67821: CALL_OW 437
67825: PUSH
67826: LD_INT 1
67828: ARRAY
67829: PUSH
67830: LD_INT 2
67832: ARRAY
67833: EQUAL
67834: AND
67835: PUSH
67836: LD_VAR 0 5
67840: PUSH
67841: LD_VAR 0 1
67845: PPUSH
67846: CALL_OW 437
67850: PUSH
67851: LD_INT 1
67853: ARRAY
67854: PUSH
67855: LD_INT 3
67857: ARRAY
67858: EQUAL
67859: AND
67860: IFFALSE 67872
// result := true else
67862: LD_ADDR_VAR 0 3
67866: PUSH
67867: LD_INT 1
67869: ST_TO_ADDR
67870: GO 67880
// result := false ;
67872: LD_ADDR_VAR 0 3
67876: PUSH
67877: LD_INT 0
67879: ST_TO_ADDR
// end else
67880: GO 67890
// result := false ;
67882: LD_ADDR_VAR 0 3
67886: PUSH
67887: LD_INT 0
67889: ST_TO_ADDR
// end ;
67890: LD_VAR 0 3
67894: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67895: LD_INT 0
67897: PPUSH
67898: PPUSH
67899: PPUSH
67900: PPUSH
// if not unit or not area then
67901: LD_VAR 0 1
67905: NOT
67906: PUSH
67907: LD_VAR 0 2
67911: NOT
67912: OR
67913: IFFALSE 67917
// exit ;
67915: GO 68081
// tmp := AreaToList ( area , i ) ;
67917: LD_ADDR_VAR 0 6
67921: PUSH
67922: LD_VAR 0 2
67926: PPUSH
67927: LD_VAR 0 5
67931: PPUSH
67932: CALL_OW 517
67936: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67937: LD_ADDR_VAR 0 5
67941: PUSH
67942: DOUBLE
67943: LD_INT 1
67945: DEC
67946: ST_TO_ADDR
67947: LD_VAR 0 6
67951: PUSH
67952: LD_INT 1
67954: ARRAY
67955: PUSH
67956: FOR_TO
67957: IFFALSE 68079
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67959: LD_ADDR_VAR 0 7
67963: PUSH
67964: LD_VAR 0 6
67968: PUSH
67969: LD_INT 1
67971: ARRAY
67972: PUSH
67973: LD_VAR 0 5
67977: ARRAY
67978: PUSH
67979: LD_VAR 0 6
67983: PUSH
67984: LD_INT 2
67986: ARRAY
67987: PUSH
67988: LD_VAR 0 5
67992: ARRAY
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67998: LD_VAR 0 7
68002: PUSH
68003: LD_INT 1
68005: ARRAY
68006: PPUSH
68007: LD_VAR 0 7
68011: PUSH
68012: LD_INT 2
68014: ARRAY
68015: PPUSH
68016: CALL_OW 428
68020: PUSH
68021: LD_INT 0
68023: EQUAL
68024: IFFALSE 68077
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68026: LD_VAR 0 1
68030: PPUSH
68031: LD_VAR 0 7
68035: PUSH
68036: LD_INT 1
68038: ARRAY
68039: PPUSH
68040: LD_VAR 0 7
68044: PUSH
68045: LD_INT 2
68047: ARRAY
68048: PPUSH
68049: LD_VAR 0 3
68053: PPUSH
68054: CALL_OW 48
// result := IsPlaced ( unit ) ;
68058: LD_ADDR_VAR 0 4
68062: PUSH
68063: LD_VAR 0 1
68067: PPUSH
68068: CALL_OW 305
68072: ST_TO_ADDR
// exit ;
68073: POP
68074: POP
68075: GO 68081
// end ; end ;
68077: GO 67956
68079: POP
68080: POP
// end ;
68081: LD_VAR 0 4
68085: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68086: LD_INT 0
68088: PPUSH
68089: PPUSH
68090: PPUSH
// if not side or side > 8 then
68091: LD_VAR 0 1
68095: NOT
68096: PUSH
68097: LD_VAR 0 1
68101: PUSH
68102: LD_INT 8
68104: GREATER
68105: OR
68106: IFFALSE 68110
// exit ;
68108: GO 68297
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68110: LD_ADDR_VAR 0 4
68114: PUSH
68115: LD_INT 22
68117: PUSH
68118: LD_VAR 0 1
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 21
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PPUSH
68141: CALL_OW 69
68145: ST_TO_ADDR
// if not tmp then
68146: LD_VAR 0 4
68150: NOT
68151: IFFALSE 68155
// exit ;
68153: GO 68297
// enable_addtolog := true ;
68155: LD_ADDR_OWVAR 81
68159: PUSH
68160: LD_INT 1
68162: ST_TO_ADDR
// AddToLog ( [ ) ;
68163: LD_STRING [
68165: PPUSH
68166: CALL_OW 561
// for i in tmp do
68170: LD_ADDR_VAR 0 3
68174: PUSH
68175: LD_VAR 0 4
68179: PUSH
68180: FOR_IN
68181: IFFALSE 68288
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68183: LD_STRING [
68185: PUSH
68186: LD_VAR 0 3
68190: PPUSH
68191: CALL_OW 266
68195: STR
68196: PUSH
68197: LD_STRING , 
68199: STR
68200: PUSH
68201: LD_VAR 0 3
68205: PPUSH
68206: CALL_OW 250
68210: STR
68211: PUSH
68212: LD_STRING , 
68214: STR
68215: PUSH
68216: LD_VAR 0 3
68220: PPUSH
68221: CALL_OW 251
68225: STR
68226: PUSH
68227: LD_STRING , 
68229: STR
68230: PUSH
68231: LD_VAR 0 3
68235: PPUSH
68236: CALL_OW 254
68240: STR
68241: PUSH
68242: LD_STRING , 
68244: STR
68245: PUSH
68246: LD_VAR 0 3
68250: PPUSH
68251: LD_INT 1
68253: PPUSH
68254: CALL_OW 268
68258: STR
68259: PUSH
68260: LD_STRING , 
68262: STR
68263: PUSH
68264: LD_VAR 0 3
68268: PPUSH
68269: LD_INT 2
68271: PPUSH
68272: CALL_OW 268
68276: STR
68277: PUSH
68278: LD_STRING ],
68280: STR
68281: PPUSH
68282: CALL_OW 561
// end ;
68286: GO 68180
68288: POP
68289: POP
// AddToLog ( ]; ) ;
68290: LD_STRING ];
68292: PPUSH
68293: CALL_OW 561
// end ;
68297: LD_VAR 0 2
68301: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68302: LD_INT 0
68304: PPUSH
68305: PPUSH
68306: PPUSH
68307: PPUSH
68308: PPUSH
// if not area or not rate or not max then
68309: LD_VAR 0 1
68313: NOT
68314: PUSH
68315: LD_VAR 0 2
68319: NOT
68320: OR
68321: PUSH
68322: LD_VAR 0 4
68326: NOT
68327: OR
68328: IFFALSE 68332
// exit ;
68330: GO 68524
// while 1 do
68332: LD_INT 1
68334: IFFALSE 68524
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68336: LD_ADDR_VAR 0 9
68340: PUSH
68341: LD_VAR 0 1
68345: PPUSH
68346: LD_INT 1
68348: PPUSH
68349: CALL_OW 287
68353: PUSH
68354: LD_INT 10
68356: MUL
68357: ST_TO_ADDR
// r := rate / 10 ;
68358: LD_ADDR_VAR 0 7
68362: PUSH
68363: LD_VAR 0 2
68367: PUSH
68368: LD_INT 10
68370: DIVREAL
68371: ST_TO_ADDR
// time := 1 1$00 ;
68372: LD_ADDR_VAR 0 8
68376: PUSH
68377: LD_INT 2100
68379: ST_TO_ADDR
// if amount < min then
68380: LD_VAR 0 9
68384: PUSH
68385: LD_VAR 0 3
68389: LESS
68390: IFFALSE 68408
// r := r * 2 else
68392: LD_ADDR_VAR 0 7
68396: PUSH
68397: LD_VAR 0 7
68401: PUSH
68402: LD_INT 2
68404: MUL
68405: ST_TO_ADDR
68406: GO 68434
// if amount > max then
68408: LD_VAR 0 9
68412: PUSH
68413: LD_VAR 0 4
68417: GREATER
68418: IFFALSE 68434
// r := r / 2 ;
68420: LD_ADDR_VAR 0 7
68424: PUSH
68425: LD_VAR 0 7
68429: PUSH
68430: LD_INT 2
68432: DIVREAL
68433: ST_TO_ADDR
// time := time / r ;
68434: LD_ADDR_VAR 0 8
68438: PUSH
68439: LD_VAR 0 8
68443: PUSH
68444: LD_VAR 0 7
68448: DIVREAL
68449: ST_TO_ADDR
// if time < 0 then
68450: LD_VAR 0 8
68454: PUSH
68455: LD_INT 0
68457: LESS
68458: IFFALSE 68475
// time := time * - 1 ;
68460: LD_ADDR_VAR 0 8
68464: PUSH
68465: LD_VAR 0 8
68469: PUSH
68470: LD_INT 1
68472: NEG
68473: MUL
68474: ST_TO_ADDR
// wait ( time ) ;
68475: LD_VAR 0 8
68479: PPUSH
68480: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68484: LD_INT 35
68486: PPUSH
68487: LD_INT 875
68489: PPUSH
68490: CALL_OW 12
68494: PPUSH
68495: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68499: LD_INT 1
68501: PPUSH
68502: LD_INT 5
68504: PPUSH
68505: CALL_OW 12
68509: PPUSH
68510: LD_VAR 0 1
68514: PPUSH
68515: LD_INT 1
68517: PPUSH
68518: CALL_OW 55
// end ;
68522: GO 68332
// end ;
68524: LD_VAR 0 5
68528: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68529: LD_INT 0
68531: PPUSH
68532: PPUSH
68533: PPUSH
68534: PPUSH
68535: PPUSH
68536: PPUSH
68537: PPUSH
68538: PPUSH
// if not turrets or not factories then
68539: LD_VAR 0 1
68543: NOT
68544: PUSH
68545: LD_VAR 0 2
68549: NOT
68550: OR
68551: IFFALSE 68555
// exit ;
68553: GO 68862
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68555: LD_ADDR_VAR 0 10
68559: PUSH
68560: LD_INT 5
68562: PUSH
68563: LD_INT 6
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 2
68572: PUSH
68573: LD_INT 4
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 3
68582: PUSH
68583: LD_INT 5
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 24
68597: PUSH
68598: LD_INT 25
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 23
68607: PUSH
68608: LD_INT 27
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 42
68621: PUSH
68622: LD_INT 43
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 44
68631: PUSH
68632: LD_INT 46
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 45
68641: PUSH
68642: LD_INT 47
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: LIST
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: LIST
68658: ST_TO_ADDR
// result := [ ] ;
68659: LD_ADDR_VAR 0 3
68663: PUSH
68664: EMPTY
68665: ST_TO_ADDR
// for i in turrets do
68666: LD_ADDR_VAR 0 4
68670: PUSH
68671: LD_VAR 0 1
68675: PUSH
68676: FOR_IN
68677: IFFALSE 68860
// begin nat := GetNation ( i ) ;
68679: LD_ADDR_VAR 0 7
68683: PUSH
68684: LD_VAR 0 4
68688: PPUSH
68689: CALL_OW 248
68693: ST_TO_ADDR
// weapon := 0 ;
68694: LD_ADDR_VAR 0 8
68698: PUSH
68699: LD_INT 0
68701: ST_TO_ADDR
// if not nat then
68702: LD_VAR 0 7
68706: NOT
68707: IFFALSE 68711
// continue ;
68709: GO 68676
// for j in list [ nat ] do
68711: LD_ADDR_VAR 0 5
68715: PUSH
68716: LD_VAR 0 10
68720: PUSH
68721: LD_VAR 0 7
68725: ARRAY
68726: PUSH
68727: FOR_IN
68728: IFFALSE 68769
// if GetBWeapon ( i ) = j [ 1 ] then
68730: LD_VAR 0 4
68734: PPUSH
68735: CALL_OW 269
68739: PUSH
68740: LD_VAR 0 5
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: EQUAL
68749: IFFALSE 68767
// begin weapon := j [ 2 ] ;
68751: LD_ADDR_VAR 0 8
68755: PUSH
68756: LD_VAR 0 5
68760: PUSH
68761: LD_INT 2
68763: ARRAY
68764: ST_TO_ADDR
// break ;
68765: GO 68769
// end ;
68767: GO 68727
68769: POP
68770: POP
// if not weapon then
68771: LD_VAR 0 8
68775: NOT
68776: IFFALSE 68780
// continue ;
68778: GO 68676
// for k in factories do
68780: LD_ADDR_VAR 0 6
68784: PUSH
68785: LD_VAR 0 2
68789: PUSH
68790: FOR_IN
68791: IFFALSE 68856
// begin weapons := AvailableWeaponList ( k ) ;
68793: LD_ADDR_VAR 0 9
68797: PUSH
68798: LD_VAR 0 6
68802: PPUSH
68803: CALL_OW 478
68807: ST_TO_ADDR
// if not weapons then
68808: LD_VAR 0 9
68812: NOT
68813: IFFALSE 68817
// continue ;
68815: GO 68790
// if weapon in weapons then
68817: LD_VAR 0 8
68821: PUSH
68822: LD_VAR 0 9
68826: IN
68827: IFFALSE 68854
// begin result := [ i , weapon ] ;
68829: LD_ADDR_VAR 0 3
68833: PUSH
68834: LD_VAR 0 4
68838: PUSH
68839: LD_VAR 0 8
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: ST_TO_ADDR
// exit ;
68848: POP
68849: POP
68850: POP
68851: POP
68852: GO 68862
// end ; end ;
68854: GO 68790
68856: POP
68857: POP
// end ;
68858: GO 68676
68860: POP
68861: POP
// end ;
68862: LD_VAR 0 3
68866: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68867: LD_INT 0
68869: PPUSH
// if not side or side > 8 then
68870: LD_VAR 0 3
68874: NOT
68875: PUSH
68876: LD_VAR 0 3
68880: PUSH
68881: LD_INT 8
68883: GREATER
68884: OR
68885: IFFALSE 68889
// exit ;
68887: GO 68948
// if not range then
68889: LD_VAR 0 4
68893: NOT
68894: IFFALSE 68905
// range := - 12 ;
68896: LD_ADDR_VAR 0 4
68900: PUSH
68901: LD_INT 12
68903: NEG
68904: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68905: LD_VAR 0 1
68909: PPUSH
68910: LD_VAR 0 2
68914: PPUSH
68915: LD_VAR 0 3
68919: PPUSH
68920: LD_VAR 0 4
68924: PPUSH
68925: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68929: LD_VAR 0 1
68933: PPUSH
68934: LD_VAR 0 2
68938: PPUSH
68939: LD_VAR 0 3
68943: PPUSH
68944: CALL_OW 331
// end ;
68948: LD_VAR 0 5
68952: RET
// export function Video ( mode ) ; begin
68953: LD_INT 0
68955: PPUSH
// ingame_video = mode ;
68956: LD_ADDR_OWVAR 52
68960: PUSH
68961: LD_VAR 0 1
68965: ST_TO_ADDR
// interface_hidden = mode ;
68966: LD_ADDR_OWVAR 54
68970: PUSH
68971: LD_VAR 0 1
68975: ST_TO_ADDR
// end ;
68976: LD_VAR 0 2
68980: RET
// export function Join ( array , element ) ; begin
68981: LD_INT 0
68983: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68984: LD_ADDR_VAR 0 3
68988: PUSH
68989: LD_VAR 0 1
68993: PPUSH
68994: LD_VAR 0 1
68998: PUSH
68999: LD_INT 1
69001: PLUS
69002: PPUSH
69003: LD_VAR 0 2
69007: PPUSH
69008: CALL_OW 1
69012: ST_TO_ADDR
// end ;
69013: LD_VAR 0 3
69017: RET
// export function JoinUnion ( array , element ) ; begin
69018: LD_INT 0
69020: PPUSH
// result := array union element ;
69021: LD_ADDR_VAR 0 3
69025: PUSH
69026: LD_VAR 0 1
69030: PUSH
69031: LD_VAR 0 2
69035: UNION
69036: ST_TO_ADDR
// end ;
69037: LD_VAR 0 3
69041: RET
// export function GetBehemoths ( side ) ; begin
69042: LD_INT 0
69044: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69045: LD_ADDR_VAR 0 2
69049: PUSH
69050: LD_INT 22
69052: PUSH
69053: LD_VAR 0 1
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 31
69064: PUSH
69065: LD_INT 25
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PPUSH
69076: CALL_OW 69
69080: ST_TO_ADDR
// end ;
69081: LD_VAR 0 2
69085: RET
// export function Shuffle ( array ) ; var i , index ; begin
69086: LD_INT 0
69088: PPUSH
69089: PPUSH
69090: PPUSH
// result := [ ] ;
69091: LD_ADDR_VAR 0 2
69095: PUSH
69096: EMPTY
69097: ST_TO_ADDR
// if not array then
69098: LD_VAR 0 1
69102: NOT
69103: IFFALSE 69107
// exit ;
69105: GO 69206
// Randomize ;
69107: CALL_OW 10
// for i = array downto 1 do
69111: LD_ADDR_VAR 0 3
69115: PUSH
69116: DOUBLE
69117: LD_VAR 0 1
69121: INC
69122: ST_TO_ADDR
69123: LD_INT 1
69125: PUSH
69126: FOR_DOWNTO
69127: IFFALSE 69204
// begin index := rand ( 1 , array ) ;
69129: LD_ADDR_VAR 0 4
69133: PUSH
69134: LD_INT 1
69136: PPUSH
69137: LD_VAR 0 1
69141: PPUSH
69142: CALL_OW 12
69146: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69147: LD_ADDR_VAR 0 2
69151: PUSH
69152: LD_VAR 0 2
69156: PPUSH
69157: LD_VAR 0 2
69161: PUSH
69162: LD_INT 1
69164: PLUS
69165: PPUSH
69166: LD_VAR 0 1
69170: PUSH
69171: LD_VAR 0 4
69175: ARRAY
69176: PPUSH
69177: CALL_OW 2
69181: ST_TO_ADDR
// array := Delete ( array , index ) ;
69182: LD_ADDR_VAR 0 1
69186: PUSH
69187: LD_VAR 0 1
69191: PPUSH
69192: LD_VAR 0 4
69196: PPUSH
69197: CALL_OW 3
69201: ST_TO_ADDR
// end ;
69202: GO 69126
69204: POP
69205: POP
// end ;
69206: LD_VAR 0 2
69210: RET
// export function GetBaseMaterials ( base ) ; begin
69211: LD_INT 0
69213: PPUSH
// result := [ 0 , 0 , 0 ] ;
69214: LD_ADDR_VAR 0 2
69218: PUSH
69219: LD_INT 0
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: LD_INT 0
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: LIST
69232: ST_TO_ADDR
// if not base then
69233: LD_VAR 0 1
69237: NOT
69238: IFFALSE 69242
// exit ;
69240: GO 69291
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69242: LD_ADDR_VAR 0 2
69246: PUSH
69247: LD_VAR 0 1
69251: PPUSH
69252: LD_INT 1
69254: PPUSH
69255: CALL_OW 275
69259: PUSH
69260: LD_VAR 0 1
69264: PPUSH
69265: LD_INT 2
69267: PPUSH
69268: CALL_OW 275
69272: PUSH
69273: LD_VAR 0 1
69277: PPUSH
69278: LD_INT 3
69280: PPUSH
69281: CALL_OW 275
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: LIST
69290: ST_TO_ADDR
// end ;
69291: LD_VAR 0 2
69295: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69296: LD_INT 0
69298: PPUSH
69299: PPUSH
// result := array ;
69300: LD_ADDR_VAR 0 3
69304: PUSH
69305: LD_VAR 0 1
69309: ST_TO_ADDR
// if size > 0 then
69310: LD_VAR 0 2
69314: PUSH
69315: LD_INT 0
69317: GREATER
69318: IFFALSE 69364
// for i := array downto size do
69320: LD_ADDR_VAR 0 4
69324: PUSH
69325: DOUBLE
69326: LD_VAR 0 1
69330: INC
69331: ST_TO_ADDR
69332: LD_VAR 0 2
69336: PUSH
69337: FOR_DOWNTO
69338: IFFALSE 69362
// result := Delete ( result , result ) ;
69340: LD_ADDR_VAR 0 3
69344: PUSH
69345: LD_VAR 0 3
69349: PPUSH
69350: LD_VAR 0 3
69354: PPUSH
69355: CALL_OW 3
69359: ST_TO_ADDR
69360: GO 69337
69362: POP
69363: POP
// end ;
69364: LD_VAR 0 3
69368: RET
// export function ComExit ( unit ) ; var tmp ; begin
69369: LD_INT 0
69371: PPUSH
69372: PPUSH
// if not IsInUnit ( unit ) then
69373: LD_VAR 0 1
69377: PPUSH
69378: CALL_OW 310
69382: NOT
69383: IFFALSE 69387
// exit ;
69385: GO 69447
// tmp := IsInUnit ( unit ) ;
69387: LD_ADDR_VAR 0 3
69391: PUSH
69392: LD_VAR 0 1
69396: PPUSH
69397: CALL_OW 310
69401: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69402: LD_VAR 0 3
69406: PPUSH
69407: CALL_OW 247
69411: PUSH
69412: LD_INT 2
69414: EQUAL
69415: IFFALSE 69428
// ComExitVehicle ( unit ) else
69417: LD_VAR 0 1
69421: PPUSH
69422: CALL_OW 121
69426: GO 69437
// ComExitBuilding ( unit ) ;
69428: LD_VAR 0 1
69432: PPUSH
69433: CALL_OW 122
// result := tmp ;
69437: LD_ADDR_VAR 0 2
69441: PUSH
69442: LD_VAR 0 3
69446: ST_TO_ADDR
// end ;
69447: LD_VAR 0 2
69451: RET
// export function ResetHc ; begin
69452: LD_INT 0
69454: PPUSH
// InitHc ;
69455: CALL_OW 19
// hc_importance := 0 ;
69459: LD_ADDR_OWVAR 32
69463: PUSH
69464: LD_INT 0
69466: ST_TO_ADDR
// end ;
69467: LD_VAR 0 1
69471: RET
